; ModuleID = '../../third_party/libvpx/source/libvpx/vp8/common/x86/bilinear_filter_sse2.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp8/common/x86/bilinear_filter_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@vp8_bilinear_filters = external local_unnamed_addr constant [8 x [2 x i16]], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_bilinear_predict16x16_sse2(i8* nocapture readonly, i32, i32, i32, i8* nocapture, i32) local_unnamed_addr #0 {
  %7 = alloca [272 x i16], align 16
  %8 = bitcast [272 x i16]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 544, i8* nonnull %8) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 544, i1 false)
  %9 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 0
  %10 = icmp eq i32 %2, 0
  br i1 %10, label %11, label %164

11:                                               ; preds = %6
  %12 = sext i32 %1 to i64
  %13 = bitcast i8* %0 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 1
  %15 = shufflevector <16 x i8> %14, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %16 = shufflevector <16 x i8> %14, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %17 = bitcast [272 x i16]* %7 to <16 x i8>*
  store <16 x i8> %15, <16 x i8>* %17, align 16
  %18 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 8
  %19 = bitcast i16* %18 to <16 x i8>*
  store <16 x i8> %16, <16 x i8>* %19, align 16
  %20 = getelementptr inbounds i8, i8* %0, i64 %12
  %21 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 16
  %22 = bitcast i8* %20 to <16 x i8>*
  %23 = load <16 x i8>, <16 x i8>* %22, align 1
  %24 = shufflevector <16 x i8> %23, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %25 = shufflevector <16 x i8> %23, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %26 = bitcast i16* %21 to <16 x i8>*
  store <16 x i8> %24, <16 x i8>* %26, align 16
  %27 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 24
  %28 = bitcast i16* %27 to <16 x i8>*
  store <16 x i8> %25, <16 x i8>* %28, align 16
  %29 = getelementptr inbounds i8, i8* %20, i64 %12
  %30 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 32
  %31 = bitcast i8* %29 to <16 x i8>*
  %32 = load <16 x i8>, <16 x i8>* %31, align 1
  %33 = shufflevector <16 x i8> %32, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %34 = shufflevector <16 x i8> %32, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %35 = bitcast i16* %30 to <16 x i8>*
  store <16 x i8> %33, <16 x i8>* %35, align 16
  %36 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 40
  %37 = bitcast i16* %36 to <16 x i8>*
  store <16 x i8> %34, <16 x i8>* %37, align 16
  %38 = getelementptr inbounds i8, i8* %29, i64 %12
  %39 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 48
  %40 = bitcast i8* %38 to <16 x i8>*
  %41 = load <16 x i8>, <16 x i8>* %40, align 1
  %42 = shufflevector <16 x i8> %41, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %43 = shufflevector <16 x i8> %41, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %44 = bitcast i16* %39 to <16 x i8>*
  store <16 x i8> %42, <16 x i8>* %44, align 16
  %45 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 56
  %46 = bitcast i16* %45 to <16 x i8>*
  store <16 x i8> %43, <16 x i8>* %46, align 16
  %47 = getelementptr inbounds i8, i8* %38, i64 %12
  %48 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 64
  %49 = bitcast i8* %47 to <16 x i8>*
  %50 = load <16 x i8>, <16 x i8>* %49, align 1
  %51 = shufflevector <16 x i8> %50, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %52 = shufflevector <16 x i8> %50, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %53 = bitcast i16* %48 to <16 x i8>*
  store <16 x i8> %51, <16 x i8>* %53, align 16
  %54 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 72
  %55 = bitcast i16* %54 to <16 x i8>*
  store <16 x i8> %52, <16 x i8>* %55, align 16
  %56 = getelementptr inbounds i8, i8* %47, i64 %12
  %57 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 80
  %58 = bitcast i8* %56 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1
  %60 = shufflevector <16 x i8> %59, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %61 = shufflevector <16 x i8> %59, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %62 = bitcast i16* %57 to <16 x i8>*
  store <16 x i8> %60, <16 x i8>* %62, align 16
  %63 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 88
  %64 = bitcast i16* %63 to <16 x i8>*
  store <16 x i8> %61, <16 x i8>* %64, align 16
  %65 = getelementptr inbounds i8, i8* %56, i64 %12
  %66 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 96
  %67 = bitcast i8* %65 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = shufflevector <16 x i8> %68, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %70 = shufflevector <16 x i8> %68, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %71 = bitcast i16* %66 to <16 x i8>*
  store <16 x i8> %69, <16 x i8>* %71, align 16
  %72 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 104
  %73 = bitcast i16* %72 to <16 x i8>*
  store <16 x i8> %70, <16 x i8>* %73, align 16
  %74 = getelementptr inbounds i8, i8* %65, i64 %12
  %75 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 112
  %76 = bitcast i8* %74 to <16 x i8>*
  %77 = load <16 x i8>, <16 x i8>* %76, align 1
  %78 = shufflevector <16 x i8> %77, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %79 = shufflevector <16 x i8> %77, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %80 = bitcast i16* %75 to <16 x i8>*
  store <16 x i8> %78, <16 x i8>* %80, align 16
  %81 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 120
  %82 = bitcast i16* %81 to <16 x i8>*
  store <16 x i8> %79, <16 x i8>* %82, align 16
  %83 = getelementptr inbounds i8, i8* %74, i64 %12
  %84 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 128
  %85 = bitcast i8* %83 to <16 x i8>*
  %86 = load <16 x i8>, <16 x i8>* %85, align 1
  %87 = shufflevector <16 x i8> %86, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %88 = shufflevector <16 x i8> %86, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %89 = bitcast i16* %84 to <16 x i8>*
  store <16 x i8> %87, <16 x i8>* %89, align 16
  %90 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 136
  %91 = bitcast i16* %90 to <16 x i8>*
  store <16 x i8> %88, <16 x i8>* %91, align 16
  %92 = getelementptr inbounds i8, i8* %83, i64 %12
  %93 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 144
  %94 = bitcast i8* %92 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1
  %96 = shufflevector <16 x i8> %95, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %97 = shufflevector <16 x i8> %95, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %98 = bitcast i16* %93 to <16 x i8>*
  store <16 x i8> %96, <16 x i8>* %98, align 16
  %99 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 152
  %100 = bitcast i16* %99 to <16 x i8>*
  store <16 x i8> %97, <16 x i8>* %100, align 16
  %101 = getelementptr inbounds i8, i8* %92, i64 %12
  %102 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 160
  %103 = bitcast i8* %101 to <16 x i8>*
  %104 = load <16 x i8>, <16 x i8>* %103, align 1
  %105 = shufflevector <16 x i8> %104, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %106 = shufflevector <16 x i8> %104, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %107 = bitcast i16* %102 to <16 x i8>*
  store <16 x i8> %105, <16 x i8>* %107, align 16
  %108 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 168
  %109 = bitcast i16* %108 to <16 x i8>*
  store <16 x i8> %106, <16 x i8>* %109, align 16
  %110 = getelementptr inbounds i8, i8* %101, i64 %12
  %111 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 176
  %112 = bitcast i8* %110 to <16 x i8>*
  %113 = load <16 x i8>, <16 x i8>* %112, align 1
  %114 = shufflevector <16 x i8> %113, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %115 = shufflevector <16 x i8> %113, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %116 = bitcast i16* %111 to <16 x i8>*
  store <16 x i8> %114, <16 x i8>* %116, align 16
  %117 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 184
  %118 = bitcast i16* %117 to <16 x i8>*
  store <16 x i8> %115, <16 x i8>* %118, align 16
  %119 = getelementptr inbounds i8, i8* %110, i64 %12
  %120 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 192
  %121 = bitcast i8* %119 to <16 x i8>*
  %122 = load <16 x i8>, <16 x i8>* %121, align 1
  %123 = shufflevector <16 x i8> %122, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %124 = shufflevector <16 x i8> %122, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %125 = bitcast i16* %120 to <16 x i8>*
  store <16 x i8> %123, <16 x i8>* %125, align 16
  %126 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 200
  %127 = bitcast i16* %126 to <16 x i8>*
  store <16 x i8> %124, <16 x i8>* %127, align 16
  %128 = getelementptr inbounds i8, i8* %119, i64 %12
  %129 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 208
  %130 = bitcast i8* %128 to <16 x i8>*
  %131 = load <16 x i8>, <16 x i8>* %130, align 1
  %132 = shufflevector <16 x i8> %131, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %133 = shufflevector <16 x i8> %131, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %134 = bitcast i16* %129 to <16 x i8>*
  store <16 x i8> %132, <16 x i8>* %134, align 16
  %135 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 216
  %136 = bitcast i16* %135 to <16 x i8>*
  store <16 x i8> %133, <16 x i8>* %136, align 16
  %137 = getelementptr inbounds i8, i8* %128, i64 %12
  %138 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 224
  %139 = bitcast i8* %137 to <16 x i8>*
  %140 = load <16 x i8>, <16 x i8>* %139, align 1
  %141 = shufflevector <16 x i8> %140, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %142 = shufflevector <16 x i8> %140, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %143 = bitcast i16* %138 to <16 x i8>*
  store <16 x i8> %141, <16 x i8>* %143, align 16
  %144 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 232
  %145 = bitcast i16* %144 to <16 x i8>*
  store <16 x i8> %142, <16 x i8>* %145, align 16
  %146 = getelementptr inbounds i8, i8* %137, i64 %12
  %147 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 240
  %148 = bitcast i8* %146 to <16 x i8>*
  %149 = load <16 x i8>, <16 x i8>* %148, align 1
  %150 = shufflevector <16 x i8> %149, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %151 = shufflevector <16 x i8> %149, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %152 = bitcast i16* %147 to <16 x i8>*
  store <16 x i8> %150, <16 x i8>* %152, align 16
  %153 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 248
  %154 = bitcast i16* %153 to <16 x i8>*
  store <16 x i8> %151, <16 x i8>* %154, align 16
  %155 = getelementptr inbounds i8, i8* %146, i64 %12
  %156 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 256
  %157 = bitcast i8* %155 to <16 x i8>*
  %158 = load <16 x i8>, <16 x i8>* %157, align 1
  %159 = shufflevector <16 x i8> %158, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %160 = shufflevector <16 x i8> %158, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %161 = bitcast i16* %156 to <16 x i8>*
  store <16 x i8> %159, <16 x i8>* %161, align 16
  %162 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 264
  %163 = bitcast i16* %162 to <16 x i8>*
  store <16 x i8> %160, <16 x i8>* %163, align 16
  br label %209

164:                                              ; preds = %6
  %165 = sext i32 %2 to i64
  %166 = getelementptr inbounds [8 x [2 x i16]], [8 x [2 x i16]]* @vp8_bilinear_filters, i64 0, i64 %165, i64 0
  %167 = load i16, i16* %166, align 4
  %168 = insertelement <8 x i16> undef, i16 %167, i32 0
  %169 = shufflevector <8 x i16> %168, <8 x i16> undef, <8 x i32> zeroinitializer
  %170 = getelementptr inbounds [8 x [2 x i16]], [8 x [2 x i16]]* @vp8_bilinear_filters, i64 0, i64 %165, i64 1
  %171 = load i16, i16* %170, align 2
  %172 = insertelement <8 x i16> undef, i16 %171, i32 0
  %173 = shufflevector <8 x i16> %172, <8 x i16> undef, <8 x i32> zeroinitializer
  %174 = sext i32 %1 to i64
  br label %175

175:                                              ; preds = %175, %164
  %176 = phi i8* [ %0, %164 ], [ %205, %175 ]
  %177 = phi i16* [ %9, %164 ], [ %206, %175 ]
  %178 = phi i32 [ 0, %164 ], [ %207, %175 ]
  %179 = bitcast i8* %176 to <16 x i8>*
  %180 = load <16 x i8>, <16 x i8>* %179, align 1
  %181 = shufflevector <16 x i8> %180, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %182 = shufflevector <16 x i8> %180, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %183 = bitcast <16 x i8> %181 to <8 x i16>
  %184 = mul <8 x i16> %169, %183
  %185 = bitcast <16 x i8> %182 to <8 x i16>
  %186 = mul <8 x i16> %169, %185
  %187 = getelementptr inbounds i8, i8* %176, i64 1
  %188 = bitcast i8* %187 to <16 x i8>*
  %189 = load <16 x i8>, <16 x i8>* %188, align 1
  %190 = shufflevector <16 x i8> %189, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %191 = shufflevector <16 x i8> %189, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %192 = bitcast <16 x i8> %190 to <8 x i16>
  %193 = mul <8 x i16> %173, %192
  %194 = bitcast <16 x i8> %191 to <8 x i16>
  %195 = mul <8 x i16> %173, %194
  %196 = add <8 x i16> %184, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %197 = add <8 x i16> %196, %193
  %198 = add <8 x i16> %186, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %199 = add <8 x i16> %198, %195
  %200 = ashr <8 x i16> %197, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %201 = ashr <8 x i16> %199, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %202 = bitcast i16* %177 to <8 x i16>*
  store <8 x i16> %200, <8 x i16>* %202, align 16
  %203 = getelementptr inbounds i16, i16* %177, i64 8
  %204 = bitcast i16* %203 to <8 x i16>*
  store <8 x i16> %201, <8 x i16>* %204, align 16
  %205 = getelementptr inbounds i8, i8* %176, i64 %174
  %206 = getelementptr inbounds i16, i16* %177, i64 16
  %207 = add nuw nsw i32 %178, 1
  %208 = icmp eq i32 %207, 17
  br i1 %208, label %209, label %175

209:                                              ; preds = %175, %11
  %210 = icmp eq i32 %3, 0
  br i1 %210, label %211, label %355

211:                                              ; preds = %209
  %212 = sext i32 %5 to i64
  %213 = bitcast [272 x i16]* %7 to <8 x i16>*
  %214 = load <8 x i16>, <8 x i16>* %213, align 16
  %215 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 8
  %216 = bitcast i16* %215 to <8 x i16>*
  %217 = load <8 x i16>, <8 x i16>* %216, align 16
  %218 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %214, <8 x i16> %217) #3
  %219 = bitcast i8* %4 to <16 x i8>*
  store <16 x i8> %218, <16 x i8>* %219, align 16
  %220 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 16
  %221 = getelementptr inbounds i8, i8* %4, i64 %212
  %222 = bitcast i16* %220 to <8 x i16>*
  %223 = load <8 x i16>, <8 x i16>* %222, align 16
  %224 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 24
  %225 = bitcast i16* %224 to <8 x i16>*
  %226 = load <8 x i16>, <8 x i16>* %225, align 16
  %227 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %223, <8 x i16> %226) #3
  %228 = bitcast i8* %221 to <16 x i8>*
  store <16 x i8> %227, <16 x i8>* %228, align 16
  %229 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 32
  %230 = getelementptr inbounds i8, i8* %221, i64 %212
  %231 = bitcast i16* %229 to <8 x i16>*
  %232 = load <8 x i16>, <8 x i16>* %231, align 16
  %233 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 40
  %234 = bitcast i16* %233 to <8 x i16>*
  %235 = load <8 x i16>, <8 x i16>* %234, align 16
  %236 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %232, <8 x i16> %235) #3
  %237 = bitcast i8* %230 to <16 x i8>*
  store <16 x i8> %236, <16 x i8>* %237, align 16
  %238 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 48
  %239 = getelementptr inbounds i8, i8* %230, i64 %212
  %240 = bitcast i16* %238 to <8 x i16>*
  %241 = load <8 x i16>, <8 x i16>* %240, align 16
  %242 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 56
  %243 = bitcast i16* %242 to <8 x i16>*
  %244 = load <8 x i16>, <8 x i16>* %243, align 16
  %245 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %241, <8 x i16> %244) #3
  %246 = bitcast i8* %239 to <16 x i8>*
  store <16 x i8> %245, <16 x i8>* %246, align 16
  %247 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 64
  %248 = getelementptr inbounds i8, i8* %239, i64 %212
  %249 = bitcast i16* %247 to <8 x i16>*
  %250 = load <8 x i16>, <8 x i16>* %249, align 16
  %251 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 72
  %252 = bitcast i16* %251 to <8 x i16>*
  %253 = load <8 x i16>, <8 x i16>* %252, align 16
  %254 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %250, <8 x i16> %253) #3
  %255 = bitcast i8* %248 to <16 x i8>*
  store <16 x i8> %254, <16 x i8>* %255, align 16
  %256 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 80
  %257 = getelementptr inbounds i8, i8* %248, i64 %212
  %258 = bitcast i16* %256 to <8 x i16>*
  %259 = load <8 x i16>, <8 x i16>* %258, align 16
  %260 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 88
  %261 = bitcast i16* %260 to <8 x i16>*
  %262 = load <8 x i16>, <8 x i16>* %261, align 16
  %263 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %259, <8 x i16> %262) #3
  %264 = bitcast i8* %257 to <16 x i8>*
  store <16 x i8> %263, <16 x i8>* %264, align 16
  %265 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 96
  %266 = getelementptr inbounds i8, i8* %257, i64 %212
  %267 = bitcast i16* %265 to <8 x i16>*
  %268 = load <8 x i16>, <8 x i16>* %267, align 16
  %269 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 104
  %270 = bitcast i16* %269 to <8 x i16>*
  %271 = load <8 x i16>, <8 x i16>* %270, align 16
  %272 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %268, <8 x i16> %271) #3
  %273 = bitcast i8* %266 to <16 x i8>*
  store <16 x i8> %272, <16 x i8>* %273, align 16
  %274 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 112
  %275 = getelementptr inbounds i8, i8* %266, i64 %212
  %276 = bitcast i16* %274 to <8 x i16>*
  %277 = load <8 x i16>, <8 x i16>* %276, align 16
  %278 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 120
  %279 = bitcast i16* %278 to <8 x i16>*
  %280 = load <8 x i16>, <8 x i16>* %279, align 16
  %281 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %277, <8 x i16> %280) #3
  %282 = bitcast i8* %275 to <16 x i8>*
  store <16 x i8> %281, <16 x i8>* %282, align 16
  %283 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 128
  %284 = getelementptr inbounds i8, i8* %275, i64 %212
  %285 = bitcast i16* %283 to <8 x i16>*
  %286 = load <8 x i16>, <8 x i16>* %285, align 16
  %287 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 136
  %288 = bitcast i16* %287 to <8 x i16>*
  %289 = load <8 x i16>, <8 x i16>* %288, align 16
  %290 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %286, <8 x i16> %289) #3
  %291 = bitcast i8* %284 to <16 x i8>*
  store <16 x i8> %290, <16 x i8>* %291, align 16
  %292 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 144
  %293 = getelementptr inbounds i8, i8* %284, i64 %212
  %294 = bitcast i16* %292 to <8 x i16>*
  %295 = load <8 x i16>, <8 x i16>* %294, align 16
  %296 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 152
  %297 = bitcast i16* %296 to <8 x i16>*
  %298 = load <8 x i16>, <8 x i16>* %297, align 16
  %299 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %295, <8 x i16> %298) #3
  %300 = bitcast i8* %293 to <16 x i8>*
  store <16 x i8> %299, <16 x i8>* %300, align 16
  %301 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 160
  %302 = getelementptr inbounds i8, i8* %293, i64 %212
  %303 = bitcast i16* %301 to <8 x i16>*
  %304 = load <8 x i16>, <8 x i16>* %303, align 16
  %305 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 168
  %306 = bitcast i16* %305 to <8 x i16>*
  %307 = load <8 x i16>, <8 x i16>* %306, align 16
  %308 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %304, <8 x i16> %307) #3
  %309 = bitcast i8* %302 to <16 x i8>*
  store <16 x i8> %308, <16 x i8>* %309, align 16
  %310 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 176
  %311 = getelementptr inbounds i8, i8* %302, i64 %212
  %312 = bitcast i16* %310 to <8 x i16>*
  %313 = load <8 x i16>, <8 x i16>* %312, align 16
  %314 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 184
  %315 = bitcast i16* %314 to <8 x i16>*
  %316 = load <8 x i16>, <8 x i16>* %315, align 16
  %317 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %313, <8 x i16> %316) #3
  %318 = bitcast i8* %311 to <16 x i8>*
  store <16 x i8> %317, <16 x i8>* %318, align 16
  %319 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 192
  %320 = getelementptr inbounds i8, i8* %311, i64 %212
  %321 = bitcast i16* %319 to <8 x i16>*
  %322 = load <8 x i16>, <8 x i16>* %321, align 16
  %323 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 200
  %324 = bitcast i16* %323 to <8 x i16>*
  %325 = load <8 x i16>, <8 x i16>* %324, align 16
  %326 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %322, <8 x i16> %325) #3
  %327 = bitcast i8* %320 to <16 x i8>*
  store <16 x i8> %326, <16 x i8>* %327, align 16
  %328 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 208
  %329 = getelementptr inbounds i8, i8* %320, i64 %212
  %330 = bitcast i16* %328 to <8 x i16>*
  %331 = load <8 x i16>, <8 x i16>* %330, align 16
  %332 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 216
  %333 = bitcast i16* %332 to <8 x i16>*
  %334 = load <8 x i16>, <8 x i16>* %333, align 16
  %335 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %331, <8 x i16> %334) #3
  %336 = bitcast i8* %329 to <16 x i8>*
  store <16 x i8> %335, <16 x i8>* %336, align 16
  %337 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 224
  %338 = getelementptr inbounds i8, i8* %329, i64 %212
  %339 = bitcast i16* %337 to <8 x i16>*
  %340 = load <8 x i16>, <8 x i16>* %339, align 16
  %341 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 232
  %342 = bitcast i16* %341 to <8 x i16>*
  %343 = load <8 x i16>, <8 x i16>* %342, align 16
  %344 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %340, <8 x i16> %343) #3
  %345 = bitcast i8* %338 to <16 x i8>*
  store <16 x i8> %344, <16 x i8>* %345, align 16
  %346 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 240
  %347 = getelementptr inbounds i8, i8* %338, i64 %212
  %348 = bitcast i16* %346 to <8 x i16>*
  %349 = load <8 x i16>, <8 x i16>* %348, align 16
  %350 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 248
  %351 = bitcast i16* %350 to <8 x i16>*
  %352 = load <8 x i16>, <8 x i16>* %351, align 16
  %353 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %349, <8 x i16> %352) #3
  %354 = bitcast i8* %347 to <16 x i8>*
  store <16 x i8> %353, <16 x i8>* %354, align 16
  br label %402

355:                                              ; preds = %209
  %356 = sext i32 %3 to i64
  %357 = getelementptr inbounds [8 x [2 x i16]], [8 x [2 x i16]]* @vp8_bilinear_filters, i64 0, i64 %356, i64 0
  %358 = load i16, i16* %357, align 4
  %359 = insertelement <8 x i16> undef, i16 %358, i32 0
  %360 = shufflevector <8 x i16> %359, <8 x i16> undef, <8 x i32> zeroinitializer
  %361 = getelementptr inbounds [8 x [2 x i16]], [8 x [2 x i16]]* @vp8_bilinear_filters, i64 0, i64 %356, i64 1
  %362 = load i16, i16* %361, align 2
  %363 = insertelement <8 x i16> undef, i16 %362, i32 0
  %364 = shufflevector <8 x i16> %363, <8 x i16> undef, <8 x i32> zeroinitializer
  %365 = bitcast [272 x i16]* %7 to <2 x i64>*
  %366 = load <2 x i64>, <2 x i64>* %365, align 16
  %367 = getelementptr inbounds [272 x i16], [272 x i16]* %7, i64 0, i64 8
  %368 = bitcast i16* %367 to <2 x i64>*
  %369 = load <2 x i64>, <2 x i64>* %368, align 16
  %370 = sext i32 %5 to i64
  br label %371

371:                                              ; preds = %371, %355
  %372 = phi i16* [ %9, %355 ], [ %377, %371 ]
  %373 = phi i8* [ %4, %355 ], [ %399, %371 ]
  %374 = phi i32 [ 0, %355 ], [ %400, %371 ]
  %375 = phi <2 x i64> [ %366, %355 ], [ %383, %371 ]
  %376 = phi <2 x i64> [ %369, %355 ], [ %386, %371 ]
  %377 = getelementptr inbounds i16, i16* %372, i64 16
  %378 = bitcast <2 x i64> %375 to <8 x i16>
  %379 = mul <8 x i16> %360, %378
  %380 = bitcast <2 x i64> %376 to <8 x i16>
  %381 = mul <8 x i16> %360, %380
  %382 = bitcast i16* %377 to <2 x i64>*
  %383 = load <2 x i64>, <2 x i64>* %382, align 16
  %384 = getelementptr inbounds i16, i16* %372, i64 24
  %385 = bitcast i16* %384 to <2 x i64>*
  %386 = load <2 x i64>, <2 x i64>* %385, align 16
  %387 = bitcast <2 x i64> %383 to <8 x i16>
  %388 = mul <8 x i16> %364, %387
  %389 = bitcast <2 x i64> %386 to <8 x i16>
  %390 = mul <8 x i16> %364, %389
  %391 = add <8 x i16> %379, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %392 = add <8 x i16> %391, %388
  %393 = add <8 x i16> %381, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %394 = add <8 x i16> %393, %390
  %395 = ashr <8 x i16> %392, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %396 = ashr <8 x i16> %394, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %397 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %395, <8 x i16> %396) #3
  %398 = bitcast i8* %373 to <16 x i8>*
  store <16 x i8> %397, <16 x i8>* %398, align 16
  %399 = getelementptr inbounds i8, i8* %373, i64 %370
  %400 = add nuw nsw i32 %374, 1
  %401 = icmp eq i32 %400, 16
  br i1 %401, label %402, label %371

402:                                              ; preds = %371, %211
  call void @llvm.lifetime.end.p0i8(i64 544, i8* nonnull %8) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_bilinear_predict8x8_sse2(i8* nocapture readonly, i32, i32, i32, i8* nocapture, i32) local_unnamed_addr #0 {
  %7 = alloca [72 x i16], align 16
  %8 = bitcast [72 x i16]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %8) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 144, i1 false)
  %9 = icmp eq i32 %2, 0
  br i1 %9, label %10, label %82

10:                                               ; preds = %6
  %11 = sext i32 %1 to i64
  %12 = bitcast i8* %0 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = insertelement <2 x i64> undef, i64 %13, i32 0
  %15 = bitcast <2 x i64> %14 to <16 x i8>
  %16 = shufflevector <16 x i8> %15, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %17 = bitcast [72 x i16]* %7 to <16 x i8>*
  store <16 x i8> %16, <16 x i8>* %17, align 16
  %18 = getelementptr inbounds i8, i8* %0, i64 %11
  %19 = getelementptr inbounds [72 x i16], [72 x i16]* %7, i64 0, i64 8
  %20 = bitcast i8* %18 to i64*
  %21 = load i64, i64* %20, align 1
  %22 = insertelement <2 x i64> undef, i64 %21, i32 0
  %23 = bitcast <2 x i64> %22 to <16 x i8>
  %24 = shufflevector <16 x i8> %23, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %25 = bitcast i16* %19 to <16 x i8>*
  store <16 x i8> %24, <16 x i8>* %25, align 16
  %26 = getelementptr inbounds i8, i8* %18, i64 %11
  %27 = getelementptr inbounds [72 x i16], [72 x i16]* %7, i64 0, i64 16
  %28 = bitcast i8* %26 to i64*
  %29 = load i64, i64* %28, align 1
  %30 = insertelement <2 x i64> undef, i64 %29, i32 0
  %31 = bitcast <2 x i64> %30 to <16 x i8>
  %32 = shufflevector <16 x i8> %31, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %33 = bitcast i16* %27 to <16 x i8>*
  store <16 x i8> %32, <16 x i8>* %33, align 16
  %34 = getelementptr inbounds i8, i8* %26, i64 %11
  %35 = getelementptr inbounds [72 x i16], [72 x i16]* %7, i64 0, i64 24
  %36 = bitcast i8* %34 to i64*
  %37 = load i64, i64* %36, align 1
  %38 = insertelement <2 x i64> undef, i64 %37, i32 0
  %39 = bitcast <2 x i64> %38 to <16 x i8>
  %40 = shufflevector <16 x i8> %39, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %41 = bitcast i16* %35 to <16 x i8>*
  store <16 x i8> %40, <16 x i8>* %41, align 16
  %42 = getelementptr inbounds i8, i8* %34, i64 %11
  %43 = getelementptr inbounds [72 x i16], [72 x i16]* %7, i64 0, i64 32
  %44 = bitcast i8* %42 to i64*
  %45 = load i64, i64* %44, align 1
  %46 = insertelement <2 x i64> undef, i64 %45, i32 0
  %47 = bitcast <2 x i64> %46 to <16 x i8>
  %48 = shufflevector <16 x i8> %47, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %49 = bitcast i16* %43 to <16 x i8>*
  store <16 x i8> %48, <16 x i8>* %49, align 16
  %50 = getelementptr inbounds i8, i8* %42, i64 %11
  %51 = getelementptr inbounds [72 x i16], [72 x i16]* %7, i64 0, i64 40
  %52 = bitcast i8* %50 to i64*
  %53 = load i64, i64* %52, align 1
  %54 = insertelement <2 x i64> undef, i64 %53, i32 0
  %55 = bitcast <2 x i64> %54 to <16 x i8>
  %56 = shufflevector <16 x i8> %55, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %57 = bitcast i16* %51 to <16 x i8>*
  store <16 x i8> %56, <16 x i8>* %57, align 16
  %58 = getelementptr inbounds i8, i8* %50, i64 %11
  %59 = getelementptr inbounds [72 x i16], [72 x i16]* %7, i64 0, i64 48
  %60 = bitcast i8* %58 to i64*
  %61 = load i64, i64* %60, align 1
  %62 = insertelement <2 x i64> undef, i64 %61, i32 0
  %63 = bitcast <2 x i64> %62 to <16 x i8>
  %64 = shufflevector <16 x i8> %63, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %65 = bitcast i16* %59 to <16 x i8>*
  store <16 x i8> %64, <16 x i8>* %65, align 16
  %66 = getelementptr inbounds i8, i8* %58, i64 %11
  %67 = getelementptr inbounds [72 x i16], [72 x i16]* %7, i64 0, i64 56
  %68 = bitcast i8* %66 to i64*
  %69 = load i64, i64* %68, align 1
  %70 = insertelement <2 x i64> undef, i64 %69, i32 0
  %71 = bitcast <2 x i64> %70 to <16 x i8>
  %72 = shufflevector <16 x i8> %71, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %73 = bitcast i16* %67 to <16 x i8>*
  store <16 x i8> %72, <16 x i8>* %73, align 16
  %74 = getelementptr inbounds i8, i8* %66, i64 %11
  %75 = getelementptr inbounds [72 x i16], [72 x i16]* %7, i64 0, i64 64
  %76 = bitcast i8* %74 to i64*
  %77 = load i64, i64* %76, align 1
  %78 = insertelement <2 x i64> undef, i64 %77, i32 0
  %79 = bitcast <2 x i64> %78 to <16 x i8>
  %80 = shufflevector <16 x i8> %79, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %81 = bitcast i16* %75 to <16 x i8>*
  store <16 x i8> %80, <16 x i8>* %81, align 16
  br label %226

82:                                               ; preds = %6
  %83 = sext i32 %2 to i64
  %84 = getelementptr inbounds [8 x [2 x i16]], [8 x [2 x i16]]* @vp8_bilinear_filters, i64 0, i64 %83, i64 0
  %85 = load i16, i16* %84, align 4
  %86 = insertelement <8 x i16> undef, i16 %85, i32 0
  %87 = shufflevector <8 x i16> %86, <8 x i16> undef, <8 x i32> zeroinitializer
  %88 = getelementptr inbounds [8 x [2 x i16]], [8 x [2 x i16]]* @vp8_bilinear_filters, i64 0, i64 %83, i64 1
  %89 = load i16, i16* %88, align 2
  %90 = insertelement <8 x i16> undef, i16 %89, i32 0
  %91 = shufflevector <8 x i16> %90, <8 x i16> undef, <8 x i32> zeroinitializer
  %92 = sext i32 %1 to i64
  %93 = bitcast i8* %0 to <16 x i8>*
  %94 = load <16 x i8>, <16 x i8>* %93, align 1
  %95 = shufflevector <16 x i8> %94, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %96 = shufflevector <16 x i8> %94, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %97 = shufflevector <16 x i8> %95, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %98 = bitcast <16 x i8> %96 to <8 x i16>
  %99 = mul <8 x i16> %87, %98
  %100 = bitcast <16 x i8> %97 to <8 x i16>
  %101 = mul <8 x i16> %91, %100
  %102 = add <8 x i16> %99, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %103 = add <8 x i16> %102, %101
  %104 = ashr <8 x i16> %103, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %105 = bitcast [72 x i16]* %7 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %105, align 16
  %106 = getelementptr inbounds i8, i8* %0, i64 %92
  %107 = getelementptr inbounds [72 x i16], [72 x i16]* %7, i64 0, i64 8
  %108 = bitcast i8* %106 to <16 x i8>*
  %109 = load <16 x i8>, <16 x i8>* %108, align 1
  %110 = shufflevector <16 x i8> %109, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %111 = shufflevector <16 x i8> %109, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %112 = shufflevector <16 x i8> %110, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %113 = bitcast <16 x i8> %111 to <8 x i16>
  %114 = mul <8 x i16> %87, %113
  %115 = bitcast <16 x i8> %112 to <8 x i16>
  %116 = mul <8 x i16> %91, %115
  %117 = add <8 x i16> %114, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %118 = add <8 x i16> %117, %116
  %119 = ashr <8 x i16> %118, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %120 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %120, align 16
  %121 = getelementptr inbounds i8, i8* %106, i64 %92
  %122 = getelementptr inbounds [72 x i16], [72 x i16]* %7, i64 0, i64 16
  %123 = bitcast i8* %121 to <16 x i8>*
  %124 = load <16 x i8>, <16 x i8>* %123, align 1
  %125 = shufflevector <16 x i8> %124, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %126 = shufflevector <16 x i8> %124, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %127 = shufflevector <16 x i8> %125, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %128 = bitcast <16 x i8> %126 to <8 x i16>
  %129 = mul <8 x i16> %87, %128
  %130 = bitcast <16 x i8> %127 to <8 x i16>
  %131 = mul <8 x i16> %91, %130
  %132 = add <8 x i16> %129, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %133 = add <8 x i16> %132, %131
  %134 = ashr <8 x i16> %133, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %135 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %134, <8 x i16>* %135, align 16
  %136 = getelementptr inbounds i8, i8* %121, i64 %92
  %137 = getelementptr inbounds [72 x i16], [72 x i16]* %7, i64 0, i64 24
  %138 = bitcast i8* %136 to <16 x i8>*
  %139 = load <16 x i8>, <16 x i8>* %138, align 1
  %140 = shufflevector <16 x i8> %139, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %141 = shufflevector <16 x i8> %139, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %142 = shufflevector <16 x i8> %140, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %143 = bitcast <16 x i8> %141 to <8 x i16>
  %144 = mul <8 x i16> %87, %143
  %145 = bitcast <16 x i8> %142 to <8 x i16>
  %146 = mul <8 x i16> %91, %145
  %147 = add <8 x i16> %144, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %148 = add <8 x i16> %147, %146
  %149 = ashr <8 x i16> %148, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %150 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %149, <8 x i16>* %150, align 16
  %151 = getelementptr inbounds i8, i8* %136, i64 %92
  %152 = getelementptr inbounds [72 x i16], [72 x i16]* %7, i64 0, i64 32
  %153 = bitcast i8* %151 to <16 x i8>*
  %154 = load <16 x i8>, <16 x i8>* %153, align 1
  %155 = shufflevector <16 x i8> %154, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %156 = shufflevector <16 x i8> %154, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %157 = shufflevector <16 x i8> %155, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %158 = bitcast <16 x i8> %156 to <8 x i16>
  %159 = mul <8 x i16> %87, %158
  %160 = bitcast <16 x i8> %157 to <8 x i16>
  %161 = mul <8 x i16> %91, %160
  %162 = add <8 x i16> %159, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %163 = add <8 x i16> %162, %161
  %164 = ashr <8 x i16> %163, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %165 = bitcast i16* %152 to <8 x i16>*
  store <8 x i16> %164, <8 x i16>* %165, align 16
  %166 = getelementptr inbounds i8, i8* %151, i64 %92
  %167 = getelementptr inbounds [72 x i16], [72 x i16]* %7, i64 0, i64 40
  %168 = bitcast i8* %166 to <16 x i8>*
  %169 = load <16 x i8>, <16 x i8>* %168, align 1
  %170 = shufflevector <16 x i8> %169, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %171 = shufflevector <16 x i8> %169, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %172 = shufflevector <16 x i8> %170, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %173 = bitcast <16 x i8> %171 to <8 x i16>
  %174 = mul <8 x i16> %87, %173
  %175 = bitcast <16 x i8> %172 to <8 x i16>
  %176 = mul <8 x i16> %91, %175
  %177 = add <8 x i16> %174, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %178 = add <8 x i16> %177, %176
  %179 = ashr <8 x i16> %178, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %180 = bitcast i16* %167 to <8 x i16>*
  store <8 x i16> %179, <8 x i16>* %180, align 16
  %181 = getelementptr inbounds i8, i8* %166, i64 %92
  %182 = getelementptr inbounds [72 x i16], [72 x i16]* %7, i64 0, i64 48
  %183 = bitcast i8* %181 to <16 x i8>*
  %184 = load <16 x i8>, <16 x i8>* %183, align 1
  %185 = shufflevector <16 x i8> %184, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %186 = shufflevector <16 x i8> %184, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %187 = shufflevector <16 x i8> %185, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %188 = bitcast <16 x i8> %186 to <8 x i16>
  %189 = mul <8 x i16> %87, %188
  %190 = bitcast <16 x i8> %187 to <8 x i16>
  %191 = mul <8 x i16> %91, %190
  %192 = add <8 x i16> %189, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %193 = add <8 x i16> %192, %191
  %194 = ashr <8 x i16> %193, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %195 = bitcast i16* %182 to <8 x i16>*
  store <8 x i16> %194, <8 x i16>* %195, align 16
  %196 = getelementptr inbounds i8, i8* %181, i64 %92
  %197 = getelementptr inbounds [72 x i16], [72 x i16]* %7, i64 0, i64 56
  %198 = bitcast i8* %196 to <16 x i8>*
  %199 = load <16 x i8>, <16 x i8>* %198, align 1
  %200 = shufflevector <16 x i8> %199, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %201 = shufflevector <16 x i8> %199, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %202 = shufflevector <16 x i8> %200, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %203 = bitcast <16 x i8> %201 to <8 x i16>
  %204 = mul <8 x i16> %87, %203
  %205 = bitcast <16 x i8> %202 to <8 x i16>
  %206 = mul <8 x i16> %91, %205
  %207 = add <8 x i16> %204, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %208 = add <8 x i16> %207, %206
  %209 = ashr <8 x i16> %208, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %210 = bitcast i16* %197 to <8 x i16>*
  store <8 x i16> %209, <8 x i16>* %210, align 16
  %211 = getelementptr inbounds i8, i8* %196, i64 %92
  %212 = getelementptr inbounds [72 x i16], [72 x i16]* %7, i64 0, i64 64
  %213 = bitcast i8* %211 to <16 x i8>*
  %214 = load <16 x i8>, <16 x i8>* %213, align 1
  %215 = shufflevector <16 x i8> %214, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %216 = shufflevector <16 x i8> %214, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %217 = shufflevector <16 x i8> %215, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %218 = bitcast <16 x i8> %216 to <8 x i16>
  %219 = mul <8 x i16> %87, %218
  %220 = bitcast <16 x i8> %217 to <8 x i16>
  %221 = mul <8 x i16> %91, %220
  %222 = add <8 x i16> %219, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %223 = add <8 x i16> %222, %221
  %224 = ashr <8 x i16> %223, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %225 = bitcast i16* %212 to <8 x i16>*
  store <8 x i16> %224, <8 x i16>* %225, align 16
  br label %226

226:                                              ; preds = %82, %10
  %227 = icmp eq i32 %3, 0
  br i1 %227, label %228, label %288

228:                                              ; preds = %226
  %229 = sext i32 %5 to i64
  %230 = bitcast [72 x i16]* %7 to <8 x i16>*
  %231 = load <8 x i16>, <8 x i16>* %230, align 16
  %232 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %231, <8 x i16> undef) #3
  %233 = bitcast <16 x i8> %232 to <2 x i64>
  %234 = extractelement <2 x i64> %233, i32 0
  %235 = bitcast i8* %4 to i64*
  store i64 %234, i64* %235, align 1
  %236 = getelementptr inbounds [72 x i16], [72 x i16]* %7, i64 0, i64 8
  %237 = getelementptr inbounds i8, i8* %4, i64 %229
  %238 = bitcast i16* %236 to <8 x i16>*
  %239 = load <8 x i16>, <8 x i16>* %238, align 16
  %240 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %239, <8 x i16> undef) #3
  %241 = bitcast <16 x i8> %240 to <2 x i64>
  %242 = extractelement <2 x i64> %241, i32 0
  %243 = bitcast i8* %237 to i64*
  store i64 %242, i64* %243, align 1
  %244 = getelementptr inbounds [72 x i16], [72 x i16]* %7, i64 0, i64 16
  %245 = getelementptr inbounds i8, i8* %237, i64 %229
  %246 = bitcast i16* %244 to <8 x i16>*
  %247 = load <8 x i16>, <8 x i16>* %246, align 16
  %248 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %247, <8 x i16> undef) #3
  %249 = bitcast <16 x i8> %248 to <2 x i64>
  %250 = extractelement <2 x i64> %249, i32 0
  %251 = bitcast i8* %245 to i64*
  store i64 %250, i64* %251, align 1
  %252 = getelementptr inbounds [72 x i16], [72 x i16]* %7, i64 0, i64 24
  %253 = getelementptr inbounds i8, i8* %245, i64 %229
  %254 = bitcast i16* %252 to <8 x i16>*
  %255 = load <8 x i16>, <8 x i16>* %254, align 16
  %256 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %255, <8 x i16> undef) #3
  %257 = bitcast <16 x i8> %256 to <2 x i64>
  %258 = extractelement <2 x i64> %257, i32 0
  %259 = bitcast i8* %253 to i64*
  store i64 %258, i64* %259, align 1
  %260 = getelementptr inbounds [72 x i16], [72 x i16]* %7, i64 0, i64 32
  %261 = getelementptr inbounds i8, i8* %253, i64 %229
  %262 = bitcast i16* %260 to <8 x i16>*
  %263 = load <8 x i16>, <8 x i16>* %262, align 16
  %264 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %263, <8 x i16> undef) #3
  %265 = bitcast <16 x i8> %264 to <2 x i64>
  %266 = extractelement <2 x i64> %265, i32 0
  %267 = bitcast i8* %261 to i64*
  store i64 %266, i64* %267, align 1
  %268 = getelementptr inbounds [72 x i16], [72 x i16]* %7, i64 0, i64 40
  %269 = getelementptr inbounds i8, i8* %261, i64 %229
  %270 = bitcast i16* %268 to <8 x i16>*
  %271 = load <8 x i16>, <8 x i16>* %270, align 16
  %272 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %271, <8 x i16> undef) #3
  %273 = bitcast <16 x i8> %272 to <2 x i64>
  %274 = extractelement <2 x i64> %273, i32 0
  %275 = bitcast i8* %269 to i64*
  store i64 %274, i64* %275, align 1
  %276 = getelementptr inbounds [72 x i16], [72 x i16]* %7, i64 0, i64 48
  %277 = getelementptr inbounds i8, i8* %269, i64 %229
  %278 = bitcast i16* %276 to <8 x i16>*
  %279 = load <8 x i16>, <8 x i16>* %278, align 16
  %280 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %279, <8 x i16> undef) #3
  %281 = bitcast <16 x i8> %280 to <2 x i64>
  %282 = extractelement <2 x i64> %281, i32 0
  %283 = bitcast i8* %277 to i64*
  store i64 %282, i64* %283, align 1
  %284 = getelementptr inbounds [72 x i16], [72 x i16]* %7, i64 0, i64 56
  %285 = getelementptr inbounds i8, i8* %277, i64 %229
  %286 = bitcast i16* %284 to <8 x i16>*
  %287 = load <8 x i16>, <8 x i16>* %286, align 16
  br label %400

288:                                              ; preds = %226
  %289 = sext i32 %3 to i64
  %290 = getelementptr inbounds [8 x [2 x i16]], [8 x [2 x i16]]* @vp8_bilinear_filters, i64 0, i64 %289, i64 0
  %291 = load i16, i16* %290, align 4
  %292 = insertelement <8 x i16> undef, i16 %291, i32 0
  %293 = shufflevector <8 x i16> %292, <8 x i16> undef, <8 x i32> zeroinitializer
  %294 = getelementptr inbounds [8 x [2 x i16]], [8 x [2 x i16]]* @vp8_bilinear_filters, i64 0, i64 %289, i64 1
  %295 = load i16, i16* %294, align 2
  %296 = insertelement <8 x i16> undef, i16 %295, i32 0
  %297 = shufflevector <8 x i16> %296, <8 x i16> undef, <8 x i32> zeroinitializer
  %298 = bitcast [72 x i16]* %7 to <8 x i16>*
  %299 = load <8 x i16>, <8 x i16>* %298, align 16
  %300 = sext i32 %5 to i64
  %301 = getelementptr inbounds [72 x i16], [72 x i16]* %7, i64 0, i64 8
  %302 = bitcast i16* %301 to <8 x i16>*
  %303 = load <8 x i16>, <8 x i16>* %302, align 16
  %304 = mul <8 x i16> %293, %299
  %305 = mul <8 x i16> %297, %303
  %306 = add <8 x i16> %304, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %307 = add <8 x i16> %306, %305
  %308 = ashr <8 x i16> %307, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %309 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %308, <8 x i16> undef) #3
  %310 = bitcast <16 x i8> %309 to <2 x i64>
  %311 = extractelement <2 x i64> %310, i32 0
  %312 = bitcast i8* %4 to i64*
  store i64 %311, i64* %312, align 1
  %313 = getelementptr inbounds i8, i8* %4, i64 %300
  %314 = getelementptr inbounds [72 x i16], [72 x i16]* %7, i64 0, i64 16
  %315 = bitcast i16* %314 to <8 x i16>*
  %316 = load <8 x i16>, <8 x i16>* %315, align 16
  %317 = mul <8 x i16> %293, %303
  %318 = mul <8 x i16> %297, %316
  %319 = add <8 x i16> %317, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %320 = add <8 x i16> %319, %318
  %321 = ashr <8 x i16> %320, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %322 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %321, <8 x i16> undef) #3
  %323 = bitcast <16 x i8> %322 to <2 x i64>
  %324 = extractelement <2 x i64> %323, i32 0
  %325 = bitcast i8* %313 to i64*
  store i64 %324, i64* %325, align 1
  %326 = getelementptr inbounds i8, i8* %313, i64 %300
  %327 = getelementptr inbounds [72 x i16], [72 x i16]* %7, i64 0, i64 24
  %328 = bitcast i16* %327 to <8 x i16>*
  %329 = load <8 x i16>, <8 x i16>* %328, align 16
  %330 = mul <8 x i16> %293, %316
  %331 = mul <8 x i16> %297, %329
  %332 = add <8 x i16> %330, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %333 = add <8 x i16> %332, %331
  %334 = ashr <8 x i16> %333, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %335 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %334, <8 x i16> undef) #3
  %336 = bitcast <16 x i8> %335 to <2 x i64>
  %337 = extractelement <2 x i64> %336, i32 0
  %338 = bitcast i8* %326 to i64*
  store i64 %337, i64* %338, align 1
  %339 = getelementptr inbounds i8, i8* %326, i64 %300
  %340 = getelementptr inbounds [72 x i16], [72 x i16]* %7, i64 0, i64 32
  %341 = bitcast i16* %340 to <8 x i16>*
  %342 = load <8 x i16>, <8 x i16>* %341, align 16
  %343 = mul <8 x i16> %293, %329
  %344 = mul <8 x i16> %297, %342
  %345 = add <8 x i16> %343, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %346 = add <8 x i16> %345, %344
  %347 = ashr <8 x i16> %346, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %348 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %347, <8 x i16> undef) #3
  %349 = bitcast <16 x i8> %348 to <2 x i64>
  %350 = extractelement <2 x i64> %349, i32 0
  %351 = bitcast i8* %339 to i64*
  store i64 %350, i64* %351, align 1
  %352 = getelementptr inbounds i8, i8* %339, i64 %300
  %353 = getelementptr inbounds [72 x i16], [72 x i16]* %7, i64 0, i64 40
  %354 = bitcast i16* %353 to <8 x i16>*
  %355 = load <8 x i16>, <8 x i16>* %354, align 16
  %356 = mul <8 x i16> %293, %342
  %357 = mul <8 x i16> %297, %355
  %358 = add <8 x i16> %356, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %359 = add <8 x i16> %358, %357
  %360 = ashr <8 x i16> %359, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %361 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %360, <8 x i16> undef) #3
  %362 = bitcast <16 x i8> %361 to <2 x i64>
  %363 = extractelement <2 x i64> %362, i32 0
  %364 = bitcast i8* %352 to i64*
  store i64 %363, i64* %364, align 1
  %365 = getelementptr inbounds i8, i8* %352, i64 %300
  %366 = getelementptr inbounds [72 x i16], [72 x i16]* %7, i64 0, i64 48
  %367 = bitcast i16* %366 to <8 x i16>*
  %368 = load <8 x i16>, <8 x i16>* %367, align 16
  %369 = mul <8 x i16> %293, %355
  %370 = mul <8 x i16> %297, %368
  %371 = add <8 x i16> %369, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %372 = add <8 x i16> %371, %370
  %373 = ashr <8 x i16> %372, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %374 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %373, <8 x i16> undef) #3
  %375 = bitcast <16 x i8> %374 to <2 x i64>
  %376 = extractelement <2 x i64> %375, i32 0
  %377 = bitcast i8* %365 to i64*
  store i64 %376, i64* %377, align 1
  %378 = getelementptr inbounds i8, i8* %365, i64 %300
  %379 = getelementptr inbounds [72 x i16], [72 x i16]* %7, i64 0, i64 56
  %380 = bitcast i16* %379 to <8 x i16>*
  %381 = load <8 x i16>, <8 x i16>* %380, align 16
  %382 = mul <8 x i16> %293, %368
  %383 = mul <8 x i16> %297, %381
  %384 = add <8 x i16> %382, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %385 = add <8 x i16> %384, %383
  %386 = ashr <8 x i16> %385, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %387 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %386, <8 x i16> undef) #3
  %388 = bitcast <16 x i8> %387 to <2 x i64>
  %389 = extractelement <2 x i64> %388, i32 0
  %390 = bitcast i8* %378 to i64*
  store i64 %389, i64* %390, align 1
  %391 = getelementptr inbounds i8, i8* %378, i64 %300
  %392 = getelementptr inbounds [72 x i16], [72 x i16]* %7, i64 0, i64 64
  %393 = bitcast i16* %392 to <8 x i16>*
  %394 = load <8 x i16>, <8 x i16>* %393, align 16
  %395 = mul <8 x i16> %293, %381
  %396 = mul <8 x i16> %297, %394
  %397 = add <8 x i16> %395, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %398 = add <8 x i16> %397, %396
  %399 = ashr <8 x i16> %398, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  br label %400

400:                                              ; preds = %288, %228
  %401 = phi <8 x i16> [ %399, %288 ], [ %287, %228 ]
  %402 = phi i8* [ %391, %288 ], [ %285, %228 ]
  %403 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %401, <8 x i16> undef) #3
  %404 = bitcast <16 x i8> %403 to <2 x i64>
  %405 = extractelement <2 x i64> %404, i32 0
  %406 = bitcast i8* %402 to i64*
  store i64 %405, i64* %406, align 1
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %8) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_bilinear_predict8x4_sse2(i8* nocapture readonly, i32, i32, i32, i8* nocapture, i32) local_unnamed_addr #0 {
  %7 = icmp eq i32 %2, 0
  br i1 %7, label %8, label %48

8:                                                ; preds = %6
  %9 = sext i32 %1 to i64
  %10 = bitcast i8* %0 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = insertelement <2 x i64> undef, i64 %11, i32 0
  %13 = bitcast <2 x i64> %12 to <16 x i8>
  %14 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %15 = getelementptr inbounds i8, i8* %0, i64 %9
  %16 = bitcast i8* %15 to i64*
  %17 = load i64, i64* %16, align 1
  %18 = insertelement <2 x i64> undef, i64 %17, i32 0
  %19 = bitcast <2 x i64> %18 to <16 x i8>
  %20 = shufflevector <16 x i8> %19, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %21 = getelementptr inbounds i8, i8* %15, i64 %9
  %22 = bitcast i8* %21 to i64*
  %23 = load i64, i64* %22, align 1
  %24 = insertelement <2 x i64> undef, i64 %23, i32 0
  %25 = bitcast <2 x i64> %24 to <16 x i8>
  %26 = shufflevector <16 x i8> %25, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %27 = getelementptr inbounds i8, i8* %21, i64 %9
  %28 = bitcast i8* %27 to i64*
  %29 = load i64, i64* %28, align 1
  %30 = insertelement <2 x i64> undef, i64 %29, i32 0
  %31 = bitcast <2 x i64> %30 to <16 x i8>
  %32 = shufflevector <16 x i8> %31, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %33 = getelementptr inbounds i8, i8* %27, i64 %9
  %34 = bitcast i8* %33 to i64*
  %35 = load i64, i64* %34, align 1
  %36 = insertelement <2 x i64> undef, i64 %35, i32 0
  %37 = bitcast <2 x i64> %36 to <16 x i8>
  %38 = shufflevector <16 x i8> %37, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %39 = bitcast <16 x i8> %14 to <2 x i64>
  %40 = bitcast <16 x i8> %20 to <2 x i64>
  %41 = bitcast <16 x i8> %26 to <2 x i64>
  %42 = bitcast <16 x i8> %32 to <2 x i64>
  %43 = bitcast <16 x i8> %38 to <2 x i64>
  %44 = bitcast <16 x i8> %14 to <8 x i16>
  %45 = bitcast <16 x i8> %20 to <8 x i16>
  %46 = bitcast <16 x i8> %26 to <8 x i16>
  %47 = bitcast <16 x i8> %32 to <8 x i16>
  br label %128

48:                                               ; preds = %6
  %49 = sext i32 %2 to i64
  %50 = getelementptr inbounds [8 x [2 x i16]], [8 x [2 x i16]]* @vp8_bilinear_filters, i64 0, i64 %49, i64 0
  %51 = load i16, i16* %50, align 4
  %52 = insertelement <8 x i16> undef, i16 %51, i32 0
  %53 = shufflevector <8 x i16> %52, <8 x i16> undef, <8 x i32> zeroinitializer
  %54 = getelementptr inbounds [8 x [2 x i16]], [8 x [2 x i16]]* @vp8_bilinear_filters, i64 0, i64 %49, i64 1
  %55 = load i16, i16* %54, align 2
  %56 = insertelement <8 x i16> undef, i16 %55, i32 0
  %57 = shufflevector <8 x i16> %56, <8 x i16> undef, <8 x i32> zeroinitializer
  %58 = sext i32 %1 to i64
  %59 = bitcast i8* %0 to <16 x i8>*
  %60 = load <16 x i8>, <16 x i8>* %59, align 1
  %61 = shufflevector <16 x i8> %60, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %62 = shufflevector <16 x i8> %60, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %63 = shufflevector <16 x i8> %61, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %64 = bitcast <16 x i8> %62 to <8 x i16>
  %65 = mul <8 x i16> %53, %64
  %66 = bitcast <16 x i8> %63 to <8 x i16>
  %67 = mul <8 x i16> %57, %66
  %68 = add <8 x i16> %65, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %69 = add <8 x i16> %68, %67
  %70 = ashr <8 x i16> %69, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %71 = getelementptr inbounds i8, i8* %0, i64 %58
  %72 = bitcast i8* %71 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1
  %74 = shufflevector <16 x i8> %73, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %75 = shufflevector <16 x i8> %73, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %76 = shufflevector <16 x i8> %74, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %77 = bitcast <16 x i8> %75 to <8 x i16>
  %78 = mul <8 x i16> %53, %77
  %79 = bitcast <16 x i8> %76 to <8 x i16>
  %80 = mul <8 x i16> %57, %79
  %81 = add <8 x i16> %78, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %82 = add <8 x i16> %81, %80
  %83 = ashr <8 x i16> %82, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %84 = getelementptr inbounds i8, i8* %71, i64 %58
  %85 = bitcast i8* %84 to <16 x i8>*
  %86 = load <16 x i8>, <16 x i8>* %85, align 1
  %87 = shufflevector <16 x i8> %86, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %88 = shufflevector <16 x i8> %86, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %89 = shufflevector <16 x i8> %87, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %90 = bitcast <16 x i8> %88 to <8 x i16>
  %91 = mul <8 x i16> %53, %90
  %92 = bitcast <16 x i8> %89 to <8 x i16>
  %93 = mul <8 x i16> %57, %92
  %94 = add <8 x i16> %91, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %95 = add <8 x i16> %94, %93
  %96 = ashr <8 x i16> %95, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %97 = getelementptr inbounds i8, i8* %84, i64 %58
  %98 = bitcast i8* %97 to <16 x i8>*
  %99 = load <16 x i8>, <16 x i8>* %98, align 1
  %100 = shufflevector <16 x i8> %99, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %101 = shufflevector <16 x i8> %99, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %102 = shufflevector <16 x i8> %100, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %103 = bitcast <16 x i8> %101 to <8 x i16>
  %104 = mul <8 x i16> %53, %103
  %105 = bitcast <16 x i8> %102 to <8 x i16>
  %106 = mul <8 x i16> %57, %105
  %107 = add <8 x i16> %104, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %108 = add <8 x i16> %107, %106
  %109 = ashr <8 x i16> %108, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %110 = getelementptr inbounds i8, i8* %97, i64 %58
  %111 = bitcast i8* %110 to <16 x i8>*
  %112 = load <16 x i8>, <16 x i8>* %111, align 1
  %113 = shufflevector <16 x i8> %112, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %114 = shufflevector <16 x i8> %112, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %115 = shufflevector <16 x i8> %113, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %116 = bitcast <16 x i8> %114 to <8 x i16>
  %117 = mul <8 x i16> %53, %116
  %118 = bitcast <16 x i8> %115 to <8 x i16>
  %119 = mul <8 x i16> %57, %118
  %120 = add <8 x i16> %117, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %121 = add <8 x i16> %120, %119
  %122 = ashr <8 x i16> %121, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %123 = bitcast <8 x i16> %70 to <2 x i64>
  %124 = bitcast <8 x i16> %83 to <2 x i64>
  %125 = bitcast <8 x i16> %96 to <2 x i64>
  %126 = bitcast <8 x i16> %109 to <2 x i64>
  %127 = bitcast <8 x i16> %122 to <2 x i64>
  br label %128

128:                                              ; preds = %48, %8
  %129 = phi <8 x i16> [ %109, %48 ], [ %47, %8 ]
  %130 = phi <8 x i16> [ %96, %48 ], [ %46, %8 ]
  %131 = phi <8 x i16> [ %83, %48 ], [ %45, %8 ]
  %132 = phi <8 x i16> [ %70, %48 ], [ %44, %8 ]
  %133 = phi <2 x i64> [ %127, %48 ], [ %43, %8 ]
  %134 = phi <2 x i64> [ %126, %48 ], [ %42, %8 ]
  %135 = phi <2 x i64> [ %125, %48 ], [ %41, %8 ]
  %136 = phi <2 x i64> [ %124, %48 ], [ %40, %8 ]
  %137 = phi <2 x i64> [ %123, %48 ], [ %39, %8 ]
  %138 = icmp eq i32 %3, 0
  br i1 %138, label %139, label %156

139:                                              ; preds = %128
  %140 = sext i32 %5 to i64
  %141 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %132, <8 x i16> undef) #3
  %142 = bitcast <16 x i8> %141 to <2 x i64>
  %143 = extractelement <2 x i64> %142, i32 0
  %144 = bitcast i8* %4 to i64*
  store i64 %143, i64* %144, align 1
  %145 = getelementptr inbounds i8, i8* %4, i64 %140
  %146 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %131, <8 x i16> undef) #3
  %147 = bitcast <16 x i8> %146 to <2 x i64>
  %148 = extractelement <2 x i64> %147, i32 0
  %149 = bitcast i8* %145 to i64*
  store i64 %148, i64* %149, align 1
  %150 = getelementptr inbounds i8, i8* %145, i64 %140
  %151 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %130, <8 x i16> undef) #3
  %152 = bitcast <16 x i8> %151 to <2 x i64>
  %153 = extractelement <2 x i64> %152, i32 0
  %154 = bitcast i8* %150 to i64*
  store i64 %153, i64* %154, align 1
  %155 = getelementptr inbounds i8, i8* %150, i64 %140
  br label %207

156:                                              ; preds = %128
  %157 = sext i32 %3 to i64
  %158 = getelementptr inbounds [8 x [2 x i16]], [8 x [2 x i16]]* @vp8_bilinear_filters, i64 0, i64 %157, i64 0
  %159 = load i16, i16* %158, align 4
  %160 = insertelement <8 x i16> undef, i16 %159, i32 0
  %161 = shufflevector <8 x i16> %160, <8 x i16> undef, <8 x i32> zeroinitializer
  %162 = getelementptr inbounds [8 x [2 x i16]], [8 x [2 x i16]]* @vp8_bilinear_filters, i64 0, i64 %157, i64 1
  %163 = load i16, i16* %162, align 2
  %164 = insertelement <8 x i16> undef, i16 %163, i32 0
  %165 = shufflevector <8 x i16> %164, <8 x i16> undef, <8 x i32> zeroinitializer
  %166 = sext i32 %5 to i64
  %167 = bitcast <2 x i64> %137 to <8 x i16>
  %168 = mul <8 x i16> %161, %167
  %169 = bitcast <2 x i64> %136 to <8 x i16>
  %170 = mul <8 x i16> %165, %169
  %171 = add <8 x i16> %168, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %172 = add <8 x i16> %171, %170
  %173 = ashr <8 x i16> %172, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %174 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %173, <8 x i16> undef) #3
  %175 = bitcast <16 x i8> %174 to <2 x i64>
  %176 = extractelement <2 x i64> %175, i32 0
  %177 = bitcast i8* %4 to i64*
  store i64 %176, i64* %177, align 1
  %178 = getelementptr inbounds i8, i8* %4, i64 %166
  %179 = mul <8 x i16> %161, %169
  %180 = bitcast <2 x i64> %135 to <8 x i16>
  %181 = mul <8 x i16> %165, %180
  %182 = add <8 x i16> %179, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %183 = add <8 x i16> %182, %181
  %184 = ashr <8 x i16> %183, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %185 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %184, <8 x i16> undef) #3
  %186 = bitcast <16 x i8> %185 to <2 x i64>
  %187 = extractelement <2 x i64> %186, i32 0
  %188 = bitcast i8* %178 to i64*
  store i64 %187, i64* %188, align 1
  %189 = getelementptr inbounds i8, i8* %178, i64 %166
  %190 = mul <8 x i16> %161, %180
  %191 = bitcast <2 x i64> %134 to <8 x i16>
  %192 = mul <8 x i16> %165, %191
  %193 = add <8 x i16> %190, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %194 = add <8 x i16> %193, %192
  %195 = ashr <8 x i16> %194, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %196 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %195, <8 x i16> undef) #3
  %197 = bitcast <16 x i8> %196 to <2 x i64>
  %198 = extractelement <2 x i64> %197, i32 0
  %199 = bitcast i8* %189 to i64*
  store i64 %198, i64* %199, align 1
  %200 = getelementptr inbounds i8, i8* %189, i64 %166
  %201 = mul <8 x i16> %161, %191
  %202 = bitcast <2 x i64> %133 to <8 x i16>
  %203 = mul <8 x i16> %165, %202
  %204 = add <8 x i16> %201, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %205 = add <8 x i16> %204, %203
  %206 = ashr <8 x i16> %205, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  br label %207

207:                                              ; preds = %156, %139
  %208 = phi <8 x i16> [ %206, %156 ], [ %129, %139 ]
  %209 = phi i8* [ %200, %156 ], [ %155, %139 ]
  %210 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %208, <8 x i16> undef) #3
  %211 = bitcast <16 x i8> %210 to <2 x i64>
  %212 = extractelement <2 x i64> %211, i32 0
  %213 = bitcast i8* %209 to i64*
  store i64 %212, i64* %213, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_bilinear_predict4x4_sse2(i8* nocapture readonly, i32, i32, i32, i8* nocapture, i32) local_unnamed_addr #0 {
  %7 = alloca [20 x i16], align 16
  %8 = bitcast [20 x i16]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %8)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 40, i1 false)
  %9 = icmp eq i32 %2, 0
  br i1 %9, label %10, label %57

10:                                               ; preds = %6
  %11 = sext i32 %1 to i64
  %12 = bitcast i8* %0 to i32*
  %13 = load i32, i32* %12, align 1
  %14 = insertelement <4 x i32> undef, i32 %13, i32 0
  %15 = bitcast <4 x i32> %14 to <16 x i8>
  %16 = shufflevector <16 x i8> %15, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %17 = bitcast <16 x i8> %16 to <2 x i64>
  %18 = extractelement <2 x i64> %17, i32 0
  %19 = bitcast [20 x i16]* %7 to i64*
  store i64 %18, i64* %19, align 16
  %20 = getelementptr inbounds i8, i8* %0, i64 %11
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 1
  %23 = insertelement <4 x i32> undef, i32 %22, i32 0
  %24 = bitcast <4 x i32> %23 to <16 x i8>
  %25 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %26 = bitcast <16 x i8> %25 to <2 x i64>
  %27 = extractelement <2 x i64> %26, i32 0
  %28 = getelementptr inbounds [20 x i16], [20 x i16]* %7, i64 0, i64 4
  %29 = bitcast i16* %28 to i64*
  store i64 %27, i64* %29, align 8
  %30 = getelementptr inbounds i8, i8* %20, i64 %11
  %31 = bitcast i8* %30 to i32*
  %32 = load i32, i32* %31, align 1
  %33 = insertelement <4 x i32> undef, i32 %32, i32 0
  %34 = bitcast <4 x i32> %33 to <16 x i8>
  %35 = shufflevector <16 x i8> %34, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %36 = bitcast <16 x i8> %35 to <2 x i64>
  %37 = extractelement <2 x i64> %36, i32 0
  %38 = getelementptr inbounds [20 x i16], [20 x i16]* %7, i64 0, i64 8
  %39 = bitcast i16* %38 to i64*
  store i64 %37, i64* %39, align 16
  %40 = getelementptr inbounds i8, i8* %30, i64 %11
  %41 = bitcast i8* %40 to i32*
  %42 = load i32, i32* %41, align 1
  %43 = insertelement <4 x i32> undef, i32 %42, i32 0
  %44 = bitcast <4 x i32> %43 to <16 x i8>
  %45 = shufflevector <16 x i8> %44, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %46 = bitcast <16 x i8> %45 to <2 x i64>
  %47 = extractelement <2 x i64> %46, i32 0
  %48 = getelementptr inbounds [20 x i16], [20 x i16]* %7, i64 0, i64 12
  %49 = bitcast i16* %48 to i64*
  store i64 %47, i64* %49, align 8
  %50 = getelementptr inbounds i8, i8* %40, i64 %11
  %51 = bitcast i8* %50 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = insertelement <4 x i32> undef, i32 %52, i32 0
  %54 = bitcast <4 x i32> %53 to <16 x i8>
  %55 = shufflevector <16 x i8> %54, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %56 = bitcast <16 x i8> %55 to <2 x i64>
  br label %178

57:                                               ; preds = %6
  %58 = sext i32 %2 to i64
  %59 = getelementptr inbounds [8 x [2 x i16]], [8 x [2 x i16]]* @vp8_bilinear_filters, i64 0, i64 %58, i64 0
  %60 = load i16, i16* %59, align 4
  %61 = insertelement <8 x i16> undef, i16 %60, i32 0
  %62 = shufflevector <8 x i16> %61, <8 x i16> undef, <8 x i32> zeroinitializer
  %63 = getelementptr inbounds [8 x [2 x i16]], [8 x [2 x i16]]* @vp8_bilinear_filters, i64 0, i64 %58, i64 1
  %64 = load i16, i16* %63, align 2
  %65 = insertelement <8 x i16> undef, i16 %64, i32 0
  %66 = shufflevector <8 x i16> %65, <8 x i16> undef, <8 x i32> zeroinitializer
  %67 = sext i32 %1 to i64
  %68 = bitcast i8* %0 to i32*
  %69 = load i32, i32* %68, align 1
  %70 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %69, i32 0
  %71 = getelementptr inbounds i8, i8* %0, i64 1
  %72 = bitcast i8* %71 to i32*
  %73 = load i32, i32* %72, align 1
  %74 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %73, i32 0
  %75 = bitcast <4 x i32> %70 to <16 x i8>
  %76 = shufflevector <16 x i8> %75, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %77 = bitcast <4 x i32> %74 to <16 x i8>
  %78 = shufflevector <16 x i8> %77, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %79 = bitcast <16 x i8> %76 to <8 x i16>
  %80 = mul <8 x i16> %62, %79
  %81 = bitcast <16 x i8> %78 to <8 x i16>
  %82 = mul <8 x i16> %66, %81
  %83 = add <8 x i16> %80, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %84 = add <8 x i16> %83, %82
  %85 = ashr <8 x i16> %84, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %86 = bitcast <8 x i16> %85 to <2 x i64>
  %87 = extractelement <2 x i64> %86, i32 0
  %88 = bitcast [20 x i16]* %7 to i64*
  store i64 %87, i64* %88, align 16
  %89 = getelementptr inbounds i8, i8* %0, i64 %67
  %90 = bitcast i8* %89 to i32*
  %91 = load i32, i32* %90, align 1
  %92 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %91, i32 0
  %93 = getelementptr inbounds i8, i8* %89, i64 1
  %94 = bitcast i8* %93 to i32*
  %95 = load i32, i32* %94, align 1
  %96 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %95, i32 0
  %97 = bitcast <4 x i32> %92 to <16 x i8>
  %98 = shufflevector <16 x i8> %97, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %99 = bitcast <4 x i32> %96 to <16 x i8>
  %100 = shufflevector <16 x i8> %99, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %101 = bitcast <16 x i8> %98 to <8 x i16>
  %102 = mul <8 x i16> %62, %101
  %103 = bitcast <16 x i8> %100 to <8 x i16>
  %104 = mul <8 x i16> %66, %103
  %105 = add <8 x i16> %102, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %106 = add <8 x i16> %105, %104
  %107 = ashr <8 x i16> %106, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %108 = bitcast <8 x i16> %107 to <2 x i64>
  %109 = extractelement <2 x i64> %108, i32 0
  %110 = getelementptr inbounds [20 x i16], [20 x i16]* %7, i64 0, i64 4
  %111 = bitcast i16* %110 to i64*
  store i64 %109, i64* %111, align 8
  %112 = getelementptr inbounds i8, i8* %89, i64 %67
  %113 = bitcast i8* %112 to i32*
  %114 = load i32, i32* %113, align 1
  %115 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %114, i32 0
  %116 = getelementptr inbounds i8, i8* %112, i64 1
  %117 = bitcast i8* %116 to i32*
  %118 = load i32, i32* %117, align 1
  %119 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %118, i32 0
  %120 = bitcast <4 x i32> %115 to <16 x i8>
  %121 = shufflevector <16 x i8> %120, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %122 = bitcast <4 x i32> %119 to <16 x i8>
  %123 = shufflevector <16 x i8> %122, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %124 = bitcast <16 x i8> %121 to <8 x i16>
  %125 = mul <8 x i16> %62, %124
  %126 = bitcast <16 x i8> %123 to <8 x i16>
  %127 = mul <8 x i16> %66, %126
  %128 = add <8 x i16> %125, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %129 = add <8 x i16> %128, %127
  %130 = ashr <8 x i16> %129, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %131 = bitcast <8 x i16> %130 to <2 x i64>
  %132 = extractelement <2 x i64> %131, i32 0
  %133 = getelementptr inbounds [20 x i16], [20 x i16]* %7, i64 0, i64 8
  %134 = bitcast i16* %133 to i64*
  store i64 %132, i64* %134, align 16
  %135 = getelementptr inbounds i8, i8* %112, i64 %67
  %136 = bitcast i8* %135 to i32*
  %137 = load i32, i32* %136, align 1
  %138 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %137, i32 0
  %139 = getelementptr inbounds i8, i8* %135, i64 1
  %140 = bitcast i8* %139 to i32*
  %141 = load i32, i32* %140, align 1
  %142 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %141, i32 0
  %143 = bitcast <4 x i32> %138 to <16 x i8>
  %144 = shufflevector <16 x i8> %143, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %145 = bitcast <4 x i32> %142 to <16 x i8>
  %146 = shufflevector <16 x i8> %145, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %147 = bitcast <16 x i8> %144 to <8 x i16>
  %148 = mul <8 x i16> %62, %147
  %149 = bitcast <16 x i8> %146 to <8 x i16>
  %150 = mul <8 x i16> %66, %149
  %151 = add <8 x i16> %148, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %152 = add <8 x i16> %151, %150
  %153 = ashr <8 x i16> %152, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %154 = bitcast <8 x i16> %153 to <2 x i64>
  %155 = extractelement <2 x i64> %154, i32 0
  %156 = getelementptr inbounds [20 x i16], [20 x i16]* %7, i64 0, i64 12
  %157 = bitcast i16* %156 to i64*
  store i64 %155, i64* %157, align 8
  %158 = getelementptr inbounds i8, i8* %135, i64 %67
  %159 = bitcast i8* %158 to i32*
  %160 = load i32, i32* %159, align 1
  %161 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %160, i32 0
  %162 = getelementptr inbounds i8, i8* %158, i64 1
  %163 = bitcast i8* %162 to i32*
  %164 = load i32, i32* %163, align 1
  %165 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %164, i32 0
  %166 = bitcast <4 x i32> %161 to <16 x i8>
  %167 = shufflevector <16 x i8> %166, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %168 = bitcast <4 x i32> %165 to <16 x i8>
  %169 = shufflevector <16 x i8> %168, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %170 = bitcast <16 x i8> %167 to <8 x i16>
  %171 = mul <8 x i16> %62, %170
  %172 = bitcast <16 x i8> %169 to <8 x i16>
  %173 = mul <8 x i16> %66, %172
  %174 = add <8 x i16> %171, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %175 = add <8 x i16> %174, %173
  %176 = ashr <8 x i16> %175, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %177 = bitcast <8 x i16> %176 to <2 x i64>
  br label %178

178:                                              ; preds = %10, %57
  %179 = phi <2 x i64> [ %56, %10 ], [ %177, %57 ]
  %180 = extractelement <2 x i64> %179, i32 0
  %181 = getelementptr inbounds [20 x i16], [20 x i16]* %7, i64 0, i64 16
  %182 = bitcast i16* %181 to i64*
  store i64 %180, i64* %182, align 16
  %183 = icmp eq i32 %3, 0
  br i1 %183, label %184, label %207

184:                                              ; preds = %178
  %185 = sext i32 %5 to i64
  %186 = bitcast [20 x i16]* %7 to <8 x i16>*
  %187 = load <8 x i16>, <8 x i16>* %186, align 16
  %188 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %187, <8 x i16> %187) #3
  %189 = bitcast <16 x i8> %188 to <4 x i32>
  %190 = extractelement <4 x i32> %189, i32 0
  %191 = bitcast i8* %4 to i32*
  store i32 %190, i32* %191, align 1
  %192 = getelementptr inbounds i8, i8* %4, i64 %185
  %193 = shufflevector <16 x i8> %188, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %194 = bitcast <16 x i8> %193 to <4 x i32>
  %195 = extractelement <4 x i32> %194, i32 0
  %196 = bitcast i8* %192 to i32*
  store i32 %195, i32* %196, align 1
  %197 = getelementptr inbounds i8, i8* %192, i64 %185
  %198 = getelementptr inbounds [20 x i16], [20 x i16]* %7, i64 0, i64 8
  %199 = bitcast i16* %198 to <8 x i16>*
  %200 = load <8 x i16>, <8 x i16>* %199, align 16
  %201 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %200, <8 x i16> %200) #3
  %202 = bitcast <16 x i8> %201 to <4 x i32>
  %203 = extractelement <4 x i32> %202, i32 0
  %204 = bitcast i8* %197 to i32*
  store i32 %203, i32* %204, align 1
  %205 = getelementptr inbounds i8, i8* %197, i64 %185
  %206 = shufflevector <16 x i8> %201, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  br label %255

207:                                              ; preds = %178
  %208 = sext i32 %3 to i64
  %209 = getelementptr inbounds [8 x [2 x i16]], [8 x [2 x i16]]* @vp8_bilinear_filters, i64 0, i64 %208, i64 0
  %210 = load i16, i16* %209, align 4
  %211 = insertelement <8 x i16> undef, i16 %210, i32 0
  %212 = shufflevector <8 x i16> %211, <8 x i16> undef, <8 x i32> zeroinitializer
  %213 = getelementptr inbounds [8 x [2 x i16]], [8 x [2 x i16]]* @vp8_bilinear_filters, i64 0, i64 %208, i64 1
  %214 = load i16, i16* %213, align 2
  %215 = insertelement <8 x i16> undef, i16 %214, i32 0
  %216 = shufflevector <8 x i16> %215, <8 x i16> undef, <8 x i32> zeroinitializer
  %217 = sext i32 %5 to i64
  %218 = bitcast [20 x i16]* %7 to <8 x i16>*
  %219 = load <8 x i16>, <8 x i16>* %218, align 16
  %220 = getelementptr inbounds [20 x i16], [20 x i16]* %7, i64 0, i64 4
  %221 = bitcast i16* %220 to <8 x i16>*
  %222 = load <8 x i16>, <8 x i16>* %221, align 8
  %223 = mul <8 x i16> %219, %212
  %224 = mul <8 x i16> %222, %216
  %225 = add <8 x i16> %223, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %226 = add <8 x i16> %225, %224
  %227 = ashr <8 x i16> %226, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %228 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %227, <8 x i16> %227) #3
  %229 = bitcast <16 x i8> %228 to <4 x i32>
  %230 = extractelement <4 x i32> %229, i32 0
  %231 = bitcast i8* %4 to i32*
  store i32 %230, i32* %231, align 1
  %232 = shufflevector <16 x i8> %228, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %233 = getelementptr inbounds i8, i8* %4, i64 %217
  %234 = bitcast <16 x i8> %232 to <4 x i32>
  %235 = extractelement <4 x i32> %234, i32 0
  %236 = bitcast i8* %233 to i32*
  store i32 %235, i32* %236, align 1
  %237 = getelementptr inbounds i8, i8* %233, i64 %217
  %238 = getelementptr inbounds [20 x i16], [20 x i16]* %7, i64 0, i64 8
  %239 = bitcast i16* %238 to <8 x i16>*
  %240 = load <8 x i16>, <8 x i16>* %239, align 16
  %241 = getelementptr inbounds [20 x i16], [20 x i16]* %7, i64 0, i64 12
  %242 = bitcast i16* %241 to <8 x i16>*
  %243 = load <8 x i16>, <8 x i16>* %242, align 8
  %244 = mul <8 x i16> %240, %212
  %245 = mul <8 x i16> %243, %216
  %246 = add <8 x i16> %244, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %247 = add <8 x i16> %246, %245
  %248 = ashr <8 x i16> %247, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %249 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %248, <8 x i16> %248) #3
  %250 = bitcast <16 x i8> %249 to <4 x i32>
  %251 = extractelement <4 x i32> %250, i32 0
  %252 = bitcast i8* %237 to i32*
  store i32 %251, i32* %252, align 1
  %253 = shufflevector <16 x i8> %249, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %254 = getelementptr inbounds i8, i8* %237, i64 %217
  br label %255

255:                                              ; preds = %184, %207
  %256 = phi <16 x i8> [ %206, %184 ], [ %253, %207 ]
  %257 = phi i8* [ %205, %184 ], [ %254, %207 ]
  %258 = bitcast <16 x i8> %256 to <4 x i32>
  %259 = extractelement <4 x i32> %258, i32 0
  %260 = bitcast i8* %257 to i32*
  store i32 %259, i32* %260, align 1
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %8)
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
