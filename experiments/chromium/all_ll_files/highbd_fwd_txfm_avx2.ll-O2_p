; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/x86/highbd_fwd_txfm_avx2.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/x86/highbd_fwd_txfm_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@av1_fwd_txfm_shift_ls = external local_unnamed_addr global [19 x i8*], align 16
@av1_fwd_cos_bit_col = external local_unnamed_addr constant [5 x [5 x i8]], align 16
@av1_fwd_cos_bit_row = external local_unnamed_addr constant [5 x [5 x i8]], align 16
@col_highbd_txfm8x16_arr = internal unnamed_addr constant [16 x void (<4 x i64>*, <4 x i64>*, i8, i32, i32)*] [void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fdct16_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fadst16_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fdct16_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fadst16_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fadst16_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fdct16_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fadst16_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fadst16_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fadst16_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @idtx16_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fdct16_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @idtx16_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fadst16_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @idtx16_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fadst16_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @idtx16_avx2], align 16
@row_highbd_txfm8x8_arr = internal unnamed_addr constant [16 x void (<4 x i64>*, <4 x i64>*, i8, i32, i32)*] [void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fdct8_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fdct8_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fadst8_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fadst8_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fdct8_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fadst8_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fadst8_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fadst8_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fadst8_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @idtx8_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @idtx8_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fdct8_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @idtx8_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fadst8_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @idtx8_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fadst8_avx2], align 16
@col_highbd_txfm8x8_arr = internal unnamed_addr constant [16 x void (<4 x i64>*, <4 x i64>*, i8, i32, i32)*] [void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fdct8_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fadst8_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fdct8_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fadst8_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fadst8_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fdct8_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fadst8_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fadst8_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fadst8_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @idtx8_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fdct8_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @idtx8_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fadst8_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @idtx8_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fadst8_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @idtx8_avx2], align 16
@row_highbd_txfm8x16_arr = internal unnamed_addr constant [16 x void (<4 x i64>*, <4 x i64>*, i8, i32, i32)*] [void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fdct16_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fdct16_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fadst16_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fadst16_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fdct16_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fadst16_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fadst16_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fadst16_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fadst16_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @idtx16_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @idtx16_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fdct16_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @idtx16_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fadst16_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @idtx16_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fadst16_avx2], align 16
@row_txfm8x32_arr = internal unnamed_addr constant [16 x void (<4 x i64>*, <4 x i64>*, i8, i32, i32)*] [void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @fdct32_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* null, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* null, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* null, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* null, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* null, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* null, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* null, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* null, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* @idtx32x32_avx2, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* null, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* null, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* null, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* null, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* null, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)* null], align 16
@av1_cospi_arr_data = external local_unnamed_addr constant [7 x [64 x i32]], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_fwd_txfm2d_8x8_avx2(i16* readonly, i32* nocapture, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = bitcast i32* %1 to i8*
  %7 = alloca [8 x <4 x i64>], align 32
  %8 = bitcast [8 x <4 x i64>]* %7 to i8*
  %9 = alloca [8 x <4 x i64>], align 32
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %8) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %8, i8 -86, i64 256, i1 false)
  %10 = bitcast [8 x <4 x i64>]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %10) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %10, i8 -86, i64 256, i1 false)
  %11 = load i8*, i8** getelementptr inbounds ([19 x i8*], [19 x i8*]* @av1_fwd_txfm_shift_ls, i64 0, i64 1), align 8
  switch i8 %3, label %3187 [
    i8 0, label %12
    i8 1, label %221
    i8 2, label %430
    i8 3, label %639
    i8 4, label %848
    i8 5, label %1057
    i8 6, label %1306
    i8 7, label %1555
    i8 8, label %1804
    i8 9, label %2013
    i8 10, label %2138
    i8 11, label %2266
    i8 12, label %2474
    i8 13, label %2602
    i8 14, label %2810
    i8 15, label %2938
  ]

12:                                               ; preds = %5
  %13 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 0
  %14 = load i8, i8* %11, align 1
  %15 = sext i8 %14 to i32
  %16 = bitcast i16* %0 to <8 x i16>*
  %17 = load <8 x i16>, <8 x i16>* %16, align 16
  %18 = sext i32 %2 to i64
  %19 = getelementptr inbounds i16, i16* %0, i64 %18
  %20 = bitcast i16* %19 to <8 x i16>*
  %21 = load <8 x i16>, <8 x i16>* %20, align 16
  %22 = shl nsw i32 %2, 1
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i16, i16* %0, i64 %23
  %25 = bitcast i16* %24 to <8 x i16>*
  %26 = load <8 x i16>, <8 x i16>* %25, align 16
  %27 = mul nsw i32 %2, 3
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i16, i16* %0, i64 %28
  %30 = bitcast i16* %29 to <8 x i16>*
  %31 = load <8 x i16>, <8 x i16>* %30, align 16
  %32 = shl nsw i32 %2, 2
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i16, i16* %0, i64 %33
  %35 = bitcast i16* %34 to <8 x i16>*
  %36 = load <8 x i16>, <8 x i16>* %35, align 16
  %37 = mul nsw i32 %2, 5
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i16, i16* %0, i64 %38
  %40 = bitcast i16* %39 to <8 x i16>*
  %41 = load <8 x i16>, <8 x i16>* %40, align 16
  %42 = mul nsw i32 %2, 6
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds i16, i16* %0, i64 %43
  %45 = bitcast i16* %44 to <8 x i16>*
  %46 = load <8 x i16>, <8 x i16>* %45, align 16
  %47 = mul nsw i32 %2, 7
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds i16, i16* %0, i64 %48
  %50 = bitcast i16* %49 to <8 x i16>*
  %51 = load <8 x i16>, <8 x i16>* %50, align 16
  %52 = sext <8 x i16> %17 to <8 x i32>
  %53 = bitcast [8 x <4 x i64>]* %7 to <8 x i32>*
  %54 = sext <8 x i16> %21 to <8 x i32>
  %55 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 1
  %56 = bitcast <4 x i64>* %55 to <8 x i32>*
  %57 = sext <8 x i16> %26 to <8 x i32>
  %58 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 2
  %59 = bitcast <4 x i64>* %58 to <8 x i32>*
  %60 = sext <8 x i16> %31 to <8 x i32>
  %61 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 3
  %62 = bitcast <4 x i64>* %61 to <8 x i32>*
  %63 = sext <8 x i16> %36 to <8 x i32>
  %64 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 4
  %65 = bitcast <4 x i64>* %64 to <8 x i32>*
  %66 = sext <8 x i16> %41 to <8 x i32>
  %67 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 5
  %68 = bitcast <4 x i64>* %67 to <8 x i32>*
  %69 = sext <8 x i16> %46 to <8 x i32>
  %70 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 6
  %71 = bitcast <4 x i64>* %70 to <8 x i32>*
  %72 = sext <8 x i16> %51 to <8 x i32>
  %73 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 7
  %74 = bitcast <4 x i64>* %73 to <8 x i32>*
  %75 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %52, i32 %15) #7
  store <8 x i32> %75, <8 x i32>* %53, align 32
  %76 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %54, i32 %15) #7
  store <8 x i32> %76, <8 x i32>* %56, align 32
  %77 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %57, i32 %15) #7
  store <8 x i32> %77, <8 x i32>* %59, align 32
  %78 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %60, i32 %15) #7
  store <8 x i32> %78, <8 x i32>* %62, align 32
  %79 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %63, i32 %15) #7
  store <8 x i32> %79, <8 x i32>* %65, align 32
  %80 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %66, i32 %15) #7
  store <8 x i32> %80, <8 x i32>* %68, align 32
  %81 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %69, i32 %15) #7
  store <8 x i32> %81, <8 x i32>* %71, align 32
  %82 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %72, i32 %15) #7
  store <8 x i32> %82, <8 x i32>* %74, align 32
  %83 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 0
  %84 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 1, i64 1), align 1
  call void @fdct8_avx2(<4 x i64>* nonnull %13, <4 x i64>* nonnull %83, i8 signext %84, i32 1, i32 1)
  %85 = getelementptr inbounds i8, i8* %11, i64 1
  %86 = load i8, i8* %85, align 1
  %87 = sext i8 %86 to i32
  %88 = sub nsw i32 0, %87
  %89 = xor i32 %87, -1
  %90 = shl i32 1, %89
  %91 = insertelement <8 x i32> undef, i32 %90, i32 0
  %92 = shufflevector <8 x i32> %91, <8 x i32> undef, <8 x i32> zeroinitializer
  %93 = bitcast [8 x <4 x i64>]* %9 to <8 x i32>*
  %94 = load <8 x i32>, <8 x i32>* %93, align 32
  %95 = add <8 x i32> %92, %94
  %96 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 1
  %97 = bitcast <4 x i64>* %96 to <8 x i32>*
  %98 = load <8 x i32>, <8 x i32>* %97, align 32
  %99 = add <8 x i32> %92, %98
  %100 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 2
  %101 = bitcast <4 x i64>* %100 to <8 x i32>*
  %102 = load <8 x i32>, <8 x i32>* %101, align 32
  %103 = add <8 x i32> %92, %102
  %104 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 3
  %105 = bitcast <4 x i64>* %104 to <8 x i32>*
  %106 = load <8 x i32>, <8 x i32>* %105, align 32
  %107 = add <8 x i32> %106, %92
  %108 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 4
  %109 = bitcast <4 x i64>* %108 to <8 x i32>*
  %110 = load <8 x i32>, <8 x i32>* %109, align 32
  %111 = add <8 x i32> %110, %92
  %112 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 5
  %113 = bitcast <4 x i64>* %112 to <8 x i32>*
  %114 = load <8 x i32>, <8 x i32>* %113, align 32
  %115 = add <8 x i32> %114, %92
  %116 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 6
  %117 = bitcast <4 x i64>* %116 to <8 x i32>*
  %118 = load <8 x i32>, <8 x i32>* %117, align 32
  %119 = add <8 x i32> %118, %92
  %120 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 7
  %121 = bitcast <4 x i64>* %120 to <8 x i32>*
  %122 = load <8 x i32>, <8 x i32>* %121, align 32
  %123 = add <8 x i32> %122, %92
  %124 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %95, i32 %88) #7
  store <8 x i32> %124, <8 x i32>* %93, align 32
  %125 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %99, i32 %88) #7
  store <8 x i32> %125, <8 x i32>* %97, align 32
  %126 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %103, i32 %88) #7
  store <8 x i32> %126, <8 x i32>* %101, align 32
  %127 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %107, i32 %88) #7
  store <8 x i32> %127, <8 x i32>* %105, align 32
  %128 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %111, i32 %88) #7
  store <8 x i32> %128, <8 x i32>* %109, align 32
  %129 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %115, i32 %88) #7
  store <8 x i32> %129, <8 x i32>* %113, align 32
  %130 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %119, i32 %88) #7
  store <8 x i32> %130, <8 x i32>* %117, align 32
  %131 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %123, i32 %88) #7
  store <8 x i32> %131, <8 x i32>* %121, align 32
  %132 = shufflevector <8 x i32> %124, <8 x i32> %125, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %133 = bitcast <8 x i32> %132 to <4 x i64>
  %134 = shufflevector <8 x i32> %124, <8 x i32> %125, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %135 = bitcast <8 x i32> %134 to <4 x i64>
  %136 = shufflevector <8 x i32> %126, <8 x i32> %127, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %137 = bitcast <8 x i32> %136 to <4 x i64>
  %138 = shufflevector <8 x i32> %126, <8 x i32> %127, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %139 = bitcast <8 x i32> %138 to <4 x i64>
  %140 = shufflevector <8 x i32> %128, <8 x i32> %129, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %141 = bitcast <8 x i32> %140 to <4 x i64>
  %142 = shufflevector <8 x i32> %128, <8 x i32> %129, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %143 = bitcast <8 x i32> %142 to <4 x i64>
  %144 = shufflevector <8 x i32> %130, <8 x i32> %131, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %145 = bitcast <8 x i32> %144 to <4 x i64>
  %146 = shufflevector <8 x i32> %130, <8 x i32> %131, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %147 = bitcast <8 x i32> %146 to <4 x i64>
  %148 = shufflevector <4 x i64> %133, <4 x i64> %137, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %149 = shufflevector <4 x i64> %141, <4 x i64> %145, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %150 = bitcast <4 x i64> %148 to <8 x i32>
  %151 = bitcast <4 x i64> %149 to <8 x i32>
  %152 = shufflevector <8 x i32> %150, <8 x i32> %151, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %152, <8 x i32>* %53, align 32
  %153 = shufflevector <8 x i32> %150, <8 x i32> %151, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %153, <8 x i32>* %65, align 32
  %154 = shufflevector <4 x i64> %133, <4 x i64> %137, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %155 = shufflevector <4 x i64> %141, <4 x i64> %145, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %156 = bitcast <4 x i64> %154 to <8 x i32>
  %157 = bitcast <4 x i64> %155 to <8 x i32>
  %158 = shufflevector <8 x i32> %156, <8 x i32> %157, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %158, <8 x i32>* %56, align 32
  %159 = shufflevector <8 x i32> %156, <8 x i32> %157, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %159, <8 x i32>* %68, align 32
  %160 = shufflevector <4 x i64> %135, <4 x i64> %139, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %161 = shufflevector <4 x i64> %143, <4 x i64> %147, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %162 = bitcast <4 x i64> %160 to <8 x i32>
  %163 = bitcast <4 x i64> %161 to <8 x i32>
  %164 = shufflevector <8 x i32> %162, <8 x i32> %163, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %164, <8 x i32>* %59, align 32
  %165 = shufflevector <8 x i32> %162, <8 x i32> %163, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %165, <8 x i32>* %71, align 32
  %166 = shufflevector <4 x i64> %135, <4 x i64> %139, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %167 = shufflevector <4 x i64> %143, <4 x i64> %147, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %168 = bitcast <4 x i64> %166 to <8 x i32>
  %169 = bitcast <4 x i64> %167 to <8 x i32>
  %170 = shufflevector <8 x i32> %168, <8 x i32> %169, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %170, <8 x i32>* %62, align 32
  %171 = shufflevector <8 x i32> %168, <8 x i32> %169, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %171, <8 x i32>* %74, align 32
  %172 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 1, i64 1), align 1
  call void @fdct8_avx2(<4 x i64>* nonnull %13, <4 x i64>* nonnull %83, i8 signext %172, i32 1, i32 1)
  %173 = load <8 x i32>, <8 x i32>* %93, align 32
  %174 = load <8 x i32>, <8 x i32>* %97, align 32
  %175 = shufflevector <8 x i32> %173, <8 x i32> %174, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %176 = bitcast <8 x i32> %175 to <4 x i64>
  %177 = shufflevector <8 x i32> %173, <8 x i32> %174, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %178 = bitcast <8 x i32> %177 to <4 x i64>
  %179 = load <8 x i32>, <8 x i32>* %101, align 32
  %180 = load <8 x i32>, <8 x i32>* %105, align 32
  %181 = shufflevector <8 x i32> %179, <8 x i32> %180, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %182 = bitcast <8 x i32> %181 to <4 x i64>
  %183 = shufflevector <8 x i32> %179, <8 x i32> %180, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %184 = bitcast <8 x i32> %183 to <4 x i64>
  %185 = load <8 x i32>, <8 x i32>* %109, align 32
  %186 = load <8 x i32>, <8 x i32>* %113, align 32
  %187 = shufflevector <8 x i32> %185, <8 x i32> %186, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %188 = bitcast <8 x i32> %187 to <4 x i64>
  %189 = shufflevector <8 x i32> %185, <8 x i32> %186, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %190 = bitcast <8 x i32> %189 to <4 x i64>
  %191 = load <8 x i32>, <8 x i32>* %117, align 32
  %192 = load <8 x i32>, <8 x i32>* %121, align 32
  %193 = shufflevector <8 x i32> %191, <8 x i32> %192, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %194 = bitcast <8 x i32> %193 to <4 x i64>
  %195 = shufflevector <8 x i32> %191, <8 x i32> %192, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %196 = bitcast <8 x i32> %195 to <4 x i64>
  %197 = shufflevector <4 x i64> %176, <4 x i64> %182, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %198 = shufflevector <4 x i64> %188, <4 x i64> %194, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %199 = bitcast <4 x i64> %197 to <8 x i32>
  %200 = bitcast <4 x i64> %198 to <8 x i32>
  %201 = shufflevector <8 x i32> %199, <8 x i32> %200, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %201, <8 x i32>* %53, align 32
  %202 = shufflevector <8 x i32> %199, <8 x i32> %200, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %202, <8 x i32>* %65, align 32
  %203 = shufflevector <4 x i64> %176, <4 x i64> %182, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %204 = shufflevector <4 x i64> %188, <4 x i64> %194, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %205 = bitcast <4 x i64> %203 to <8 x i32>
  %206 = bitcast <4 x i64> %204 to <8 x i32>
  %207 = shufflevector <8 x i32> %205, <8 x i32> %206, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %207, <8 x i32>* %56, align 32
  %208 = shufflevector <8 x i32> %205, <8 x i32> %206, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %208, <8 x i32>* %68, align 32
  %209 = shufflevector <4 x i64> %178, <4 x i64> %184, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %210 = shufflevector <4 x i64> %190, <4 x i64> %196, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %211 = bitcast <4 x i64> %209 to <8 x i32>
  %212 = bitcast <4 x i64> %210 to <8 x i32>
  %213 = shufflevector <8 x i32> %211, <8 x i32> %212, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %213, <8 x i32>* %59, align 32
  %214 = shufflevector <8 x i32> %211, <8 x i32> %212, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %214, <8 x i32>* %71, align 32
  %215 = shufflevector <4 x i64> %178, <4 x i64> %184, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %216 = shufflevector <4 x i64> %190, <4 x i64> %196, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %217 = bitcast <4 x i64> %215 to <8 x i32>
  %218 = bitcast <4 x i64> %216 to <8 x i32>
  %219 = shufflevector <8 x i32> %217, <8 x i32> %218, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %219, <8 x i32>* %62, align 32
  %220 = shufflevector <8 x i32> %217, <8 x i32> %218, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %220, <8 x i32>* %74, align 32
  br label %3186

221:                                              ; preds = %5
  %222 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 0
  %223 = load i8, i8* %11, align 1
  %224 = sext i8 %223 to i32
  %225 = bitcast i16* %0 to <8 x i16>*
  %226 = load <8 x i16>, <8 x i16>* %225, align 16
  %227 = sext i32 %2 to i64
  %228 = getelementptr inbounds i16, i16* %0, i64 %227
  %229 = bitcast i16* %228 to <8 x i16>*
  %230 = load <8 x i16>, <8 x i16>* %229, align 16
  %231 = shl nsw i32 %2, 1
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds i16, i16* %0, i64 %232
  %234 = bitcast i16* %233 to <8 x i16>*
  %235 = load <8 x i16>, <8 x i16>* %234, align 16
  %236 = mul nsw i32 %2, 3
  %237 = sext i32 %236 to i64
  %238 = getelementptr inbounds i16, i16* %0, i64 %237
  %239 = bitcast i16* %238 to <8 x i16>*
  %240 = load <8 x i16>, <8 x i16>* %239, align 16
  %241 = shl nsw i32 %2, 2
  %242 = sext i32 %241 to i64
  %243 = getelementptr inbounds i16, i16* %0, i64 %242
  %244 = bitcast i16* %243 to <8 x i16>*
  %245 = load <8 x i16>, <8 x i16>* %244, align 16
  %246 = mul nsw i32 %2, 5
  %247 = sext i32 %246 to i64
  %248 = getelementptr inbounds i16, i16* %0, i64 %247
  %249 = bitcast i16* %248 to <8 x i16>*
  %250 = load <8 x i16>, <8 x i16>* %249, align 16
  %251 = mul nsw i32 %2, 6
  %252 = sext i32 %251 to i64
  %253 = getelementptr inbounds i16, i16* %0, i64 %252
  %254 = bitcast i16* %253 to <8 x i16>*
  %255 = load <8 x i16>, <8 x i16>* %254, align 16
  %256 = mul nsw i32 %2, 7
  %257 = sext i32 %256 to i64
  %258 = getelementptr inbounds i16, i16* %0, i64 %257
  %259 = bitcast i16* %258 to <8 x i16>*
  %260 = load <8 x i16>, <8 x i16>* %259, align 16
  %261 = sext <8 x i16> %226 to <8 x i32>
  %262 = bitcast [8 x <4 x i64>]* %7 to <8 x i32>*
  %263 = sext <8 x i16> %230 to <8 x i32>
  %264 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 1
  %265 = bitcast <4 x i64>* %264 to <8 x i32>*
  %266 = sext <8 x i16> %235 to <8 x i32>
  %267 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 2
  %268 = bitcast <4 x i64>* %267 to <8 x i32>*
  %269 = sext <8 x i16> %240 to <8 x i32>
  %270 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 3
  %271 = bitcast <4 x i64>* %270 to <8 x i32>*
  %272 = sext <8 x i16> %245 to <8 x i32>
  %273 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 4
  %274 = bitcast <4 x i64>* %273 to <8 x i32>*
  %275 = sext <8 x i16> %250 to <8 x i32>
  %276 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 5
  %277 = bitcast <4 x i64>* %276 to <8 x i32>*
  %278 = sext <8 x i16> %255 to <8 x i32>
  %279 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 6
  %280 = bitcast <4 x i64>* %279 to <8 x i32>*
  %281 = sext <8 x i16> %260 to <8 x i32>
  %282 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 7
  %283 = bitcast <4 x i64>* %282 to <8 x i32>*
  %284 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %261, i32 %224) #7
  store <8 x i32> %284, <8 x i32>* %262, align 32
  %285 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %263, i32 %224) #7
  store <8 x i32> %285, <8 x i32>* %265, align 32
  %286 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %266, i32 %224) #7
  store <8 x i32> %286, <8 x i32>* %268, align 32
  %287 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %269, i32 %224) #7
  store <8 x i32> %287, <8 x i32>* %271, align 32
  %288 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %272, i32 %224) #7
  store <8 x i32> %288, <8 x i32>* %274, align 32
  %289 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %275, i32 %224) #7
  store <8 x i32> %289, <8 x i32>* %277, align 32
  %290 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %278, i32 %224) #7
  store <8 x i32> %290, <8 x i32>* %280, align 32
  %291 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %281, i32 %224) #7
  store <8 x i32> %291, <8 x i32>* %283, align 32
  %292 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 0
  %293 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 1, i64 1), align 1
  call void @fadst8_avx2(<4 x i64>* nonnull %222, <4 x i64>* nonnull %292, i8 signext %293, i32 1, i32 1)
  %294 = getelementptr inbounds i8, i8* %11, i64 1
  %295 = load i8, i8* %294, align 1
  %296 = sext i8 %295 to i32
  %297 = sub nsw i32 0, %296
  %298 = xor i32 %296, -1
  %299 = shl i32 1, %298
  %300 = insertelement <8 x i32> undef, i32 %299, i32 0
  %301 = shufflevector <8 x i32> %300, <8 x i32> undef, <8 x i32> zeroinitializer
  %302 = bitcast [8 x <4 x i64>]* %9 to <8 x i32>*
  %303 = load <8 x i32>, <8 x i32>* %302, align 32
  %304 = add <8 x i32> %301, %303
  %305 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 1
  %306 = bitcast <4 x i64>* %305 to <8 x i32>*
  %307 = load <8 x i32>, <8 x i32>* %306, align 32
  %308 = add <8 x i32> %301, %307
  %309 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 2
  %310 = bitcast <4 x i64>* %309 to <8 x i32>*
  %311 = load <8 x i32>, <8 x i32>* %310, align 32
  %312 = add <8 x i32> %301, %311
  %313 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 3
  %314 = bitcast <4 x i64>* %313 to <8 x i32>*
  %315 = load <8 x i32>, <8 x i32>* %314, align 32
  %316 = add <8 x i32> %315, %301
  %317 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 4
  %318 = bitcast <4 x i64>* %317 to <8 x i32>*
  %319 = load <8 x i32>, <8 x i32>* %318, align 32
  %320 = add <8 x i32> %319, %301
  %321 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 5
  %322 = bitcast <4 x i64>* %321 to <8 x i32>*
  %323 = load <8 x i32>, <8 x i32>* %322, align 32
  %324 = add <8 x i32> %323, %301
  %325 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 6
  %326 = bitcast <4 x i64>* %325 to <8 x i32>*
  %327 = load <8 x i32>, <8 x i32>* %326, align 32
  %328 = add <8 x i32> %327, %301
  %329 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 7
  %330 = bitcast <4 x i64>* %329 to <8 x i32>*
  %331 = load <8 x i32>, <8 x i32>* %330, align 32
  %332 = add <8 x i32> %331, %301
  %333 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %304, i32 %297) #7
  store <8 x i32> %333, <8 x i32>* %302, align 32
  %334 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %308, i32 %297) #7
  store <8 x i32> %334, <8 x i32>* %306, align 32
  %335 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %312, i32 %297) #7
  store <8 x i32> %335, <8 x i32>* %310, align 32
  %336 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %316, i32 %297) #7
  store <8 x i32> %336, <8 x i32>* %314, align 32
  %337 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %320, i32 %297) #7
  store <8 x i32> %337, <8 x i32>* %318, align 32
  %338 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %324, i32 %297) #7
  store <8 x i32> %338, <8 x i32>* %322, align 32
  %339 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %328, i32 %297) #7
  store <8 x i32> %339, <8 x i32>* %326, align 32
  %340 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %332, i32 %297) #7
  store <8 x i32> %340, <8 x i32>* %330, align 32
  %341 = shufflevector <8 x i32> %333, <8 x i32> %334, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %342 = bitcast <8 x i32> %341 to <4 x i64>
  %343 = shufflevector <8 x i32> %333, <8 x i32> %334, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %344 = bitcast <8 x i32> %343 to <4 x i64>
  %345 = shufflevector <8 x i32> %335, <8 x i32> %336, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %346 = bitcast <8 x i32> %345 to <4 x i64>
  %347 = shufflevector <8 x i32> %335, <8 x i32> %336, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %348 = bitcast <8 x i32> %347 to <4 x i64>
  %349 = shufflevector <8 x i32> %337, <8 x i32> %338, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %350 = bitcast <8 x i32> %349 to <4 x i64>
  %351 = shufflevector <8 x i32> %337, <8 x i32> %338, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %352 = bitcast <8 x i32> %351 to <4 x i64>
  %353 = shufflevector <8 x i32> %339, <8 x i32> %340, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %354 = bitcast <8 x i32> %353 to <4 x i64>
  %355 = shufflevector <8 x i32> %339, <8 x i32> %340, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %356 = bitcast <8 x i32> %355 to <4 x i64>
  %357 = shufflevector <4 x i64> %342, <4 x i64> %346, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %358 = shufflevector <4 x i64> %350, <4 x i64> %354, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %359 = bitcast <4 x i64> %357 to <8 x i32>
  %360 = bitcast <4 x i64> %358 to <8 x i32>
  %361 = shufflevector <8 x i32> %359, <8 x i32> %360, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %361, <8 x i32>* %262, align 32
  %362 = shufflevector <8 x i32> %359, <8 x i32> %360, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %362, <8 x i32>* %274, align 32
  %363 = shufflevector <4 x i64> %342, <4 x i64> %346, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %364 = shufflevector <4 x i64> %350, <4 x i64> %354, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %365 = bitcast <4 x i64> %363 to <8 x i32>
  %366 = bitcast <4 x i64> %364 to <8 x i32>
  %367 = shufflevector <8 x i32> %365, <8 x i32> %366, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %367, <8 x i32>* %265, align 32
  %368 = shufflevector <8 x i32> %365, <8 x i32> %366, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %368, <8 x i32>* %277, align 32
  %369 = shufflevector <4 x i64> %344, <4 x i64> %348, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %370 = shufflevector <4 x i64> %352, <4 x i64> %356, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %371 = bitcast <4 x i64> %369 to <8 x i32>
  %372 = bitcast <4 x i64> %370 to <8 x i32>
  %373 = shufflevector <8 x i32> %371, <8 x i32> %372, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %373, <8 x i32>* %268, align 32
  %374 = shufflevector <8 x i32> %371, <8 x i32> %372, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %374, <8 x i32>* %280, align 32
  %375 = shufflevector <4 x i64> %344, <4 x i64> %348, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %376 = shufflevector <4 x i64> %352, <4 x i64> %356, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %377 = bitcast <4 x i64> %375 to <8 x i32>
  %378 = bitcast <4 x i64> %376 to <8 x i32>
  %379 = shufflevector <8 x i32> %377, <8 x i32> %378, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %379, <8 x i32>* %271, align 32
  %380 = shufflevector <8 x i32> %377, <8 x i32> %378, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %380, <8 x i32>* %283, align 32
  %381 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 1, i64 1), align 1
  call void @fdct8_avx2(<4 x i64>* nonnull %222, <4 x i64>* nonnull %292, i8 signext %381, i32 1, i32 1)
  %382 = load <8 x i32>, <8 x i32>* %302, align 32
  %383 = load <8 x i32>, <8 x i32>* %306, align 32
  %384 = shufflevector <8 x i32> %382, <8 x i32> %383, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %385 = bitcast <8 x i32> %384 to <4 x i64>
  %386 = shufflevector <8 x i32> %382, <8 x i32> %383, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %387 = bitcast <8 x i32> %386 to <4 x i64>
  %388 = load <8 x i32>, <8 x i32>* %310, align 32
  %389 = load <8 x i32>, <8 x i32>* %314, align 32
  %390 = shufflevector <8 x i32> %388, <8 x i32> %389, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %391 = bitcast <8 x i32> %390 to <4 x i64>
  %392 = shufflevector <8 x i32> %388, <8 x i32> %389, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %393 = bitcast <8 x i32> %392 to <4 x i64>
  %394 = load <8 x i32>, <8 x i32>* %318, align 32
  %395 = load <8 x i32>, <8 x i32>* %322, align 32
  %396 = shufflevector <8 x i32> %394, <8 x i32> %395, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %397 = bitcast <8 x i32> %396 to <4 x i64>
  %398 = shufflevector <8 x i32> %394, <8 x i32> %395, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %399 = bitcast <8 x i32> %398 to <4 x i64>
  %400 = load <8 x i32>, <8 x i32>* %326, align 32
  %401 = load <8 x i32>, <8 x i32>* %330, align 32
  %402 = shufflevector <8 x i32> %400, <8 x i32> %401, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %403 = bitcast <8 x i32> %402 to <4 x i64>
  %404 = shufflevector <8 x i32> %400, <8 x i32> %401, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %405 = bitcast <8 x i32> %404 to <4 x i64>
  %406 = shufflevector <4 x i64> %385, <4 x i64> %391, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %407 = shufflevector <4 x i64> %397, <4 x i64> %403, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %408 = bitcast <4 x i64> %406 to <8 x i32>
  %409 = bitcast <4 x i64> %407 to <8 x i32>
  %410 = shufflevector <8 x i32> %408, <8 x i32> %409, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %410, <8 x i32>* %262, align 32
  %411 = shufflevector <8 x i32> %408, <8 x i32> %409, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %411, <8 x i32>* %274, align 32
  %412 = shufflevector <4 x i64> %385, <4 x i64> %391, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %413 = shufflevector <4 x i64> %397, <4 x i64> %403, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %414 = bitcast <4 x i64> %412 to <8 x i32>
  %415 = bitcast <4 x i64> %413 to <8 x i32>
  %416 = shufflevector <8 x i32> %414, <8 x i32> %415, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %416, <8 x i32>* %265, align 32
  %417 = shufflevector <8 x i32> %414, <8 x i32> %415, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %417, <8 x i32>* %277, align 32
  %418 = shufflevector <4 x i64> %387, <4 x i64> %393, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %419 = shufflevector <4 x i64> %399, <4 x i64> %405, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %420 = bitcast <4 x i64> %418 to <8 x i32>
  %421 = bitcast <4 x i64> %419 to <8 x i32>
  %422 = shufflevector <8 x i32> %420, <8 x i32> %421, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %422, <8 x i32>* %268, align 32
  %423 = shufflevector <8 x i32> %420, <8 x i32> %421, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %423, <8 x i32>* %280, align 32
  %424 = shufflevector <4 x i64> %387, <4 x i64> %393, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %425 = shufflevector <4 x i64> %399, <4 x i64> %405, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %426 = bitcast <4 x i64> %424 to <8 x i32>
  %427 = bitcast <4 x i64> %425 to <8 x i32>
  %428 = shufflevector <8 x i32> %426, <8 x i32> %427, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %428, <8 x i32>* %271, align 32
  %429 = shufflevector <8 x i32> %426, <8 x i32> %427, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %429, <8 x i32>* %283, align 32
  br label %3186

430:                                              ; preds = %5
  %431 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 0
  %432 = load i8, i8* %11, align 1
  %433 = sext i8 %432 to i32
  %434 = bitcast i16* %0 to <8 x i16>*
  %435 = load <8 x i16>, <8 x i16>* %434, align 16
  %436 = sext i32 %2 to i64
  %437 = getelementptr inbounds i16, i16* %0, i64 %436
  %438 = bitcast i16* %437 to <8 x i16>*
  %439 = load <8 x i16>, <8 x i16>* %438, align 16
  %440 = shl nsw i32 %2, 1
  %441 = sext i32 %440 to i64
  %442 = getelementptr inbounds i16, i16* %0, i64 %441
  %443 = bitcast i16* %442 to <8 x i16>*
  %444 = load <8 x i16>, <8 x i16>* %443, align 16
  %445 = mul nsw i32 %2, 3
  %446 = sext i32 %445 to i64
  %447 = getelementptr inbounds i16, i16* %0, i64 %446
  %448 = bitcast i16* %447 to <8 x i16>*
  %449 = load <8 x i16>, <8 x i16>* %448, align 16
  %450 = shl nsw i32 %2, 2
  %451 = sext i32 %450 to i64
  %452 = getelementptr inbounds i16, i16* %0, i64 %451
  %453 = bitcast i16* %452 to <8 x i16>*
  %454 = load <8 x i16>, <8 x i16>* %453, align 16
  %455 = mul nsw i32 %2, 5
  %456 = sext i32 %455 to i64
  %457 = getelementptr inbounds i16, i16* %0, i64 %456
  %458 = bitcast i16* %457 to <8 x i16>*
  %459 = load <8 x i16>, <8 x i16>* %458, align 16
  %460 = mul nsw i32 %2, 6
  %461 = sext i32 %460 to i64
  %462 = getelementptr inbounds i16, i16* %0, i64 %461
  %463 = bitcast i16* %462 to <8 x i16>*
  %464 = load <8 x i16>, <8 x i16>* %463, align 16
  %465 = mul nsw i32 %2, 7
  %466 = sext i32 %465 to i64
  %467 = getelementptr inbounds i16, i16* %0, i64 %466
  %468 = bitcast i16* %467 to <8 x i16>*
  %469 = load <8 x i16>, <8 x i16>* %468, align 16
  %470 = sext <8 x i16> %435 to <8 x i32>
  %471 = bitcast [8 x <4 x i64>]* %7 to <8 x i32>*
  %472 = sext <8 x i16> %439 to <8 x i32>
  %473 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 1
  %474 = bitcast <4 x i64>* %473 to <8 x i32>*
  %475 = sext <8 x i16> %444 to <8 x i32>
  %476 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 2
  %477 = bitcast <4 x i64>* %476 to <8 x i32>*
  %478 = sext <8 x i16> %449 to <8 x i32>
  %479 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 3
  %480 = bitcast <4 x i64>* %479 to <8 x i32>*
  %481 = sext <8 x i16> %454 to <8 x i32>
  %482 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 4
  %483 = bitcast <4 x i64>* %482 to <8 x i32>*
  %484 = sext <8 x i16> %459 to <8 x i32>
  %485 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 5
  %486 = bitcast <4 x i64>* %485 to <8 x i32>*
  %487 = sext <8 x i16> %464 to <8 x i32>
  %488 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 6
  %489 = bitcast <4 x i64>* %488 to <8 x i32>*
  %490 = sext <8 x i16> %469 to <8 x i32>
  %491 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 7
  %492 = bitcast <4 x i64>* %491 to <8 x i32>*
  %493 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %470, i32 %433) #7
  store <8 x i32> %493, <8 x i32>* %471, align 32
  %494 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %472, i32 %433) #7
  store <8 x i32> %494, <8 x i32>* %474, align 32
  %495 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %475, i32 %433) #7
  store <8 x i32> %495, <8 x i32>* %477, align 32
  %496 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %478, i32 %433) #7
  store <8 x i32> %496, <8 x i32>* %480, align 32
  %497 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %481, i32 %433) #7
  store <8 x i32> %497, <8 x i32>* %483, align 32
  %498 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %484, i32 %433) #7
  store <8 x i32> %498, <8 x i32>* %486, align 32
  %499 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %487, i32 %433) #7
  store <8 x i32> %499, <8 x i32>* %489, align 32
  %500 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %490, i32 %433) #7
  store <8 x i32> %500, <8 x i32>* %492, align 32
  %501 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 0
  %502 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 1, i64 1), align 1
  call void @fdct8_avx2(<4 x i64>* nonnull %431, <4 x i64>* nonnull %501, i8 signext %502, i32 1, i32 1)
  %503 = getelementptr inbounds i8, i8* %11, i64 1
  %504 = load i8, i8* %503, align 1
  %505 = sext i8 %504 to i32
  %506 = sub nsw i32 0, %505
  %507 = xor i32 %505, -1
  %508 = shl i32 1, %507
  %509 = insertelement <8 x i32> undef, i32 %508, i32 0
  %510 = shufflevector <8 x i32> %509, <8 x i32> undef, <8 x i32> zeroinitializer
  %511 = bitcast [8 x <4 x i64>]* %9 to <8 x i32>*
  %512 = load <8 x i32>, <8 x i32>* %511, align 32
  %513 = add <8 x i32> %510, %512
  %514 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 1
  %515 = bitcast <4 x i64>* %514 to <8 x i32>*
  %516 = load <8 x i32>, <8 x i32>* %515, align 32
  %517 = add <8 x i32> %510, %516
  %518 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 2
  %519 = bitcast <4 x i64>* %518 to <8 x i32>*
  %520 = load <8 x i32>, <8 x i32>* %519, align 32
  %521 = add <8 x i32> %510, %520
  %522 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 3
  %523 = bitcast <4 x i64>* %522 to <8 x i32>*
  %524 = load <8 x i32>, <8 x i32>* %523, align 32
  %525 = add <8 x i32> %524, %510
  %526 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 4
  %527 = bitcast <4 x i64>* %526 to <8 x i32>*
  %528 = load <8 x i32>, <8 x i32>* %527, align 32
  %529 = add <8 x i32> %528, %510
  %530 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 5
  %531 = bitcast <4 x i64>* %530 to <8 x i32>*
  %532 = load <8 x i32>, <8 x i32>* %531, align 32
  %533 = add <8 x i32> %532, %510
  %534 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 6
  %535 = bitcast <4 x i64>* %534 to <8 x i32>*
  %536 = load <8 x i32>, <8 x i32>* %535, align 32
  %537 = add <8 x i32> %536, %510
  %538 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 7
  %539 = bitcast <4 x i64>* %538 to <8 x i32>*
  %540 = load <8 x i32>, <8 x i32>* %539, align 32
  %541 = add <8 x i32> %540, %510
  %542 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %513, i32 %506) #7
  store <8 x i32> %542, <8 x i32>* %511, align 32
  %543 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %517, i32 %506) #7
  store <8 x i32> %543, <8 x i32>* %515, align 32
  %544 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %521, i32 %506) #7
  store <8 x i32> %544, <8 x i32>* %519, align 32
  %545 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %525, i32 %506) #7
  store <8 x i32> %545, <8 x i32>* %523, align 32
  %546 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %529, i32 %506) #7
  store <8 x i32> %546, <8 x i32>* %527, align 32
  %547 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %533, i32 %506) #7
  store <8 x i32> %547, <8 x i32>* %531, align 32
  %548 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %537, i32 %506) #7
  store <8 x i32> %548, <8 x i32>* %535, align 32
  %549 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %541, i32 %506) #7
  store <8 x i32> %549, <8 x i32>* %539, align 32
  %550 = shufflevector <8 x i32> %542, <8 x i32> %543, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %551 = bitcast <8 x i32> %550 to <4 x i64>
  %552 = shufflevector <8 x i32> %542, <8 x i32> %543, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %553 = bitcast <8 x i32> %552 to <4 x i64>
  %554 = shufflevector <8 x i32> %544, <8 x i32> %545, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %555 = bitcast <8 x i32> %554 to <4 x i64>
  %556 = shufflevector <8 x i32> %544, <8 x i32> %545, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %557 = bitcast <8 x i32> %556 to <4 x i64>
  %558 = shufflevector <8 x i32> %546, <8 x i32> %547, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %559 = bitcast <8 x i32> %558 to <4 x i64>
  %560 = shufflevector <8 x i32> %546, <8 x i32> %547, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %561 = bitcast <8 x i32> %560 to <4 x i64>
  %562 = shufflevector <8 x i32> %548, <8 x i32> %549, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %563 = bitcast <8 x i32> %562 to <4 x i64>
  %564 = shufflevector <8 x i32> %548, <8 x i32> %549, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %565 = bitcast <8 x i32> %564 to <4 x i64>
  %566 = shufflevector <4 x i64> %551, <4 x i64> %555, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %567 = shufflevector <4 x i64> %559, <4 x i64> %563, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %568 = bitcast <4 x i64> %566 to <8 x i32>
  %569 = bitcast <4 x i64> %567 to <8 x i32>
  %570 = shufflevector <8 x i32> %568, <8 x i32> %569, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %570, <8 x i32>* %471, align 32
  %571 = shufflevector <8 x i32> %568, <8 x i32> %569, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %571, <8 x i32>* %483, align 32
  %572 = shufflevector <4 x i64> %551, <4 x i64> %555, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %573 = shufflevector <4 x i64> %559, <4 x i64> %563, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %574 = bitcast <4 x i64> %572 to <8 x i32>
  %575 = bitcast <4 x i64> %573 to <8 x i32>
  %576 = shufflevector <8 x i32> %574, <8 x i32> %575, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %576, <8 x i32>* %474, align 32
  %577 = shufflevector <8 x i32> %574, <8 x i32> %575, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %577, <8 x i32>* %486, align 32
  %578 = shufflevector <4 x i64> %553, <4 x i64> %557, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %579 = shufflevector <4 x i64> %561, <4 x i64> %565, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %580 = bitcast <4 x i64> %578 to <8 x i32>
  %581 = bitcast <4 x i64> %579 to <8 x i32>
  %582 = shufflevector <8 x i32> %580, <8 x i32> %581, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %582, <8 x i32>* %477, align 32
  %583 = shufflevector <8 x i32> %580, <8 x i32> %581, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %583, <8 x i32>* %489, align 32
  %584 = shufflevector <4 x i64> %553, <4 x i64> %557, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %585 = shufflevector <4 x i64> %561, <4 x i64> %565, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %586 = bitcast <4 x i64> %584 to <8 x i32>
  %587 = bitcast <4 x i64> %585 to <8 x i32>
  %588 = shufflevector <8 x i32> %586, <8 x i32> %587, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %588, <8 x i32>* %480, align 32
  %589 = shufflevector <8 x i32> %586, <8 x i32> %587, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %589, <8 x i32>* %492, align 32
  %590 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 1, i64 1), align 1
  call void @fadst8_avx2(<4 x i64>* nonnull %431, <4 x i64>* nonnull %501, i8 signext %590, i32 1, i32 1)
  %591 = load <8 x i32>, <8 x i32>* %511, align 32
  %592 = load <8 x i32>, <8 x i32>* %515, align 32
  %593 = shufflevector <8 x i32> %591, <8 x i32> %592, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %594 = bitcast <8 x i32> %593 to <4 x i64>
  %595 = shufflevector <8 x i32> %591, <8 x i32> %592, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %596 = bitcast <8 x i32> %595 to <4 x i64>
  %597 = load <8 x i32>, <8 x i32>* %519, align 32
  %598 = load <8 x i32>, <8 x i32>* %523, align 32
  %599 = shufflevector <8 x i32> %597, <8 x i32> %598, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %600 = bitcast <8 x i32> %599 to <4 x i64>
  %601 = shufflevector <8 x i32> %597, <8 x i32> %598, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %602 = bitcast <8 x i32> %601 to <4 x i64>
  %603 = load <8 x i32>, <8 x i32>* %527, align 32
  %604 = load <8 x i32>, <8 x i32>* %531, align 32
  %605 = shufflevector <8 x i32> %603, <8 x i32> %604, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %606 = bitcast <8 x i32> %605 to <4 x i64>
  %607 = shufflevector <8 x i32> %603, <8 x i32> %604, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %608 = bitcast <8 x i32> %607 to <4 x i64>
  %609 = load <8 x i32>, <8 x i32>* %535, align 32
  %610 = load <8 x i32>, <8 x i32>* %539, align 32
  %611 = shufflevector <8 x i32> %609, <8 x i32> %610, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %612 = bitcast <8 x i32> %611 to <4 x i64>
  %613 = shufflevector <8 x i32> %609, <8 x i32> %610, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %614 = bitcast <8 x i32> %613 to <4 x i64>
  %615 = shufflevector <4 x i64> %594, <4 x i64> %600, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %616 = shufflevector <4 x i64> %606, <4 x i64> %612, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %617 = bitcast <4 x i64> %615 to <8 x i32>
  %618 = bitcast <4 x i64> %616 to <8 x i32>
  %619 = shufflevector <8 x i32> %617, <8 x i32> %618, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %619, <8 x i32>* %471, align 32
  %620 = shufflevector <8 x i32> %617, <8 x i32> %618, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %620, <8 x i32>* %483, align 32
  %621 = shufflevector <4 x i64> %594, <4 x i64> %600, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %622 = shufflevector <4 x i64> %606, <4 x i64> %612, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %623 = bitcast <4 x i64> %621 to <8 x i32>
  %624 = bitcast <4 x i64> %622 to <8 x i32>
  %625 = shufflevector <8 x i32> %623, <8 x i32> %624, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %625, <8 x i32>* %474, align 32
  %626 = shufflevector <8 x i32> %623, <8 x i32> %624, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %626, <8 x i32>* %486, align 32
  %627 = shufflevector <4 x i64> %596, <4 x i64> %602, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %628 = shufflevector <4 x i64> %608, <4 x i64> %614, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %629 = bitcast <4 x i64> %627 to <8 x i32>
  %630 = bitcast <4 x i64> %628 to <8 x i32>
  %631 = shufflevector <8 x i32> %629, <8 x i32> %630, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %631, <8 x i32>* %477, align 32
  %632 = shufflevector <8 x i32> %629, <8 x i32> %630, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %632, <8 x i32>* %489, align 32
  %633 = shufflevector <4 x i64> %596, <4 x i64> %602, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %634 = shufflevector <4 x i64> %608, <4 x i64> %614, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %635 = bitcast <4 x i64> %633 to <8 x i32>
  %636 = bitcast <4 x i64> %634 to <8 x i32>
  %637 = shufflevector <8 x i32> %635, <8 x i32> %636, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %637, <8 x i32>* %480, align 32
  %638 = shufflevector <8 x i32> %635, <8 x i32> %636, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %638, <8 x i32>* %492, align 32
  br label %3186

639:                                              ; preds = %5
  %640 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 0
  %641 = load i8, i8* %11, align 1
  %642 = sext i8 %641 to i32
  %643 = bitcast i16* %0 to <8 x i16>*
  %644 = load <8 x i16>, <8 x i16>* %643, align 16
  %645 = sext i32 %2 to i64
  %646 = getelementptr inbounds i16, i16* %0, i64 %645
  %647 = bitcast i16* %646 to <8 x i16>*
  %648 = load <8 x i16>, <8 x i16>* %647, align 16
  %649 = shl nsw i32 %2, 1
  %650 = sext i32 %649 to i64
  %651 = getelementptr inbounds i16, i16* %0, i64 %650
  %652 = bitcast i16* %651 to <8 x i16>*
  %653 = load <8 x i16>, <8 x i16>* %652, align 16
  %654 = mul nsw i32 %2, 3
  %655 = sext i32 %654 to i64
  %656 = getelementptr inbounds i16, i16* %0, i64 %655
  %657 = bitcast i16* %656 to <8 x i16>*
  %658 = load <8 x i16>, <8 x i16>* %657, align 16
  %659 = shl nsw i32 %2, 2
  %660 = sext i32 %659 to i64
  %661 = getelementptr inbounds i16, i16* %0, i64 %660
  %662 = bitcast i16* %661 to <8 x i16>*
  %663 = load <8 x i16>, <8 x i16>* %662, align 16
  %664 = mul nsw i32 %2, 5
  %665 = sext i32 %664 to i64
  %666 = getelementptr inbounds i16, i16* %0, i64 %665
  %667 = bitcast i16* %666 to <8 x i16>*
  %668 = load <8 x i16>, <8 x i16>* %667, align 16
  %669 = mul nsw i32 %2, 6
  %670 = sext i32 %669 to i64
  %671 = getelementptr inbounds i16, i16* %0, i64 %670
  %672 = bitcast i16* %671 to <8 x i16>*
  %673 = load <8 x i16>, <8 x i16>* %672, align 16
  %674 = mul nsw i32 %2, 7
  %675 = sext i32 %674 to i64
  %676 = getelementptr inbounds i16, i16* %0, i64 %675
  %677 = bitcast i16* %676 to <8 x i16>*
  %678 = load <8 x i16>, <8 x i16>* %677, align 16
  %679 = sext <8 x i16> %644 to <8 x i32>
  %680 = bitcast [8 x <4 x i64>]* %7 to <8 x i32>*
  %681 = sext <8 x i16> %648 to <8 x i32>
  %682 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 1
  %683 = bitcast <4 x i64>* %682 to <8 x i32>*
  %684 = sext <8 x i16> %653 to <8 x i32>
  %685 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 2
  %686 = bitcast <4 x i64>* %685 to <8 x i32>*
  %687 = sext <8 x i16> %658 to <8 x i32>
  %688 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 3
  %689 = bitcast <4 x i64>* %688 to <8 x i32>*
  %690 = sext <8 x i16> %663 to <8 x i32>
  %691 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 4
  %692 = bitcast <4 x i64>* %691 to <8 x i32>*
  %693 = sext <8 x i16> %668 to <8 x i32>
  %694 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 5
  %695 = bitcast <4 x i64>* %694 to <8 x i32>*
  %696 = sext <8 x i16> %673 to <8 x i32>
  %697 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 6
  %698 = bitcast <4 x i64>* %697 to <8 x i32>*
  %699 = sext <8 x i16> %678 to <8 x i32>
  %700 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 7
  %701 = bitcast <4 x i64>* %700 to <8 x i32>*
  %702 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %679, i32 %642) #7
  store <8 x i32> %702, <8 x i32>* %680, align 32
  %703 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %681, i32 %642) #7
  store <8 x i32> %703, <8 x i32>* %683, align 32
  %704 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %684, i32 %642) #7
  store <8 x i32> %704, <8 x i32>* %686, align 32
  %705 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %687, i32 %642) #7
  store <8 x i32> %705, <8 x i32>* %689, align 32
  %706 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %690, i32 %642) #7
  store <8 x i32> %706, <8 x i32>* %692, align 32
  %707 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %693, i32 %642) #7
  store <8 x i32> %707, <8 x i32>* %695, align 32
  %708 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %696, i32 %642) #7
  store <8 x i32> %708, <8 x i32>* %698, align 32
  %709 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %699, i32 %642) #7
  store <8 x i32> %709, <8 x i32>* %701, align 32
  %710 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 0
  %711 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 1, i64 1), align 1
  call void @fadst8_avx2(<4 x i64>* nonnull %640, <4 x i64>* nonnull %710, i8 signext %711, i32 1, i32 1)
  %712 = getelementptr inbounds i8, i8* %11, i64 1
  %713 = load i8, i8* %712, align 1
  %714 = sext i8 %713 to i32
  %715 = sub nsw i32 0, %714
  %716 = xor i32 %714, -1
  %717 = shl i32 1, %716
  %718 = insertelement <8 x i32> undef, i32 %717, i32 0
  %719 = shufflevector <8 x i32> %718, <8 x i32> undef, <8 x i32> zeroinitializer
  %720 = bitcast [8 x <4 x i64>]* %9 to <8 x i32>*
  %721 = load <8 x i32>, <8 x i32>* %720, align 32
  %722 = add <8 x i32> %719, %721
  %723 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 1
  %724 = bitcast <4 x i64>* %723 to <8 x i32>*
  %725 = load <8 x i32>, <8 x i32>* %724, align 32
  %726 = add <8 x i32> %719, %725
  %727 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 2
  %728 = bitcast <4 x i64>* %727 to <8 x i32>*
  %729 = load <8 x i32>, <8 x i32>* %728, align 32
  %730 = add <8 x i32> %719, %729
  %731 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 3
  %732 = bitcast <4 x i64>* %731 to <8 x i32>*
  %733 = load <8 x i32>, <8 x i32>* %732, align 32
  %734 = add <8 x i32> %733, %719
  %735 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 4
  %736 = bitcast <4 x i64>* %735 to <8 x i32>*
  %737 = load <8 x i32>, <8 x i32>* %736, align 32
  %738 = add <8 x i32> %737, %719
  %739 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 5
  %740 = bitcast <4 x i64>* %739 to <8 x i32>*
  %741 = load <8 x i32>, <8 x i32>* %740, align 32
  %742 = add <8 x i32> %741, %719
  %743 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 6
  %744 = bitcast <4 x i64>* %743 to <8 x i32>*
  %745 = load <8 x i32>, <8 x i32>* %744, align 32
  %746 = add <8 x i32> %745, %719
  %747 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 7
  %748 = bitcast <4 x i64>* %747 to <8 x i32>*
  %749 = load <8 x i32>, <8 x i32>* %748, align 32
  %750 = add <8 x i32> %749, %719
  %751 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %722, i32 %715) #7
  store <8 x i32> %751, <8 x i32>* %720, align 32
  %752 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %726, i32 %715) #7
  store <8 x i32> %752, <8 x i32>* %724, align 32
  %753 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %730, i32 %715) #7
  store <8 x i32> %753, <8 x i32>* %728, align 32
  %754 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %734, i32 %715) #7
  store <8 x i32> %754, <8 x i32>* %732, align 32
  %755 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %738, i32 %715) #7
  store <8 x i32> %755, <8 x i32>* %736, align 32
  %756 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %742, i32 %715) #7
  store <8 x i32> %756, <8 x i32>* %740, align 32
  %757 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %746, i32 %715) #7
  store <8 x i32> %757, <8 x i32>* %744, align 32
  %758 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %750, i32 %715) #7
  store <8 x i32> %758, <8 x i32>* %748, align 32
  %759 = shufflevector <8 x i32> %751, <8 x i32> %752, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %760 = bitcast <8 x i32> %759 to <4 x i64>
  %761 = shufflevector <8 x i32> %751, <8 x i32> %752, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %762 = bitcast <8 x i32> %761 to <4 x i64>
  %763 = shufflevector <8 x i32> %753, <8 x i32> %754, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %764 = bitcast <8 x i32> %763 to <4 x i64>
  %765 = shufflevector <8 x i32> %753, <8 x i32> %754, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %766 = bitcast <8 x i32> %765 to <4 x i64>
  %767 = shufflevector <8 x i32> %755, <8 x i32> %756, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %768 = bitcast <8 x i32> %767 to <4 x i64>
  %769 = shufflevector <8 x i32> %755, <8 x i32> %756, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %770 = bitcast <8 x i32> %769 to <4 x i64>
  %771 = shufflevector <8 x i32> %757, <8 x i32> %758, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %772 = bitcast <8 x i32> %771 to <4 x i64>
  %773 = shufflevector <8 x i32> %757, <8 x i32> %758, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %774 = bitcast <8 x i32> %773 to <4 x i64>
  %775 = shufflevector <4 x i64> %760, <4 x i64> %764, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %776 = shufflevector <4 x i64> %768, <4 x i64> %772, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %777 = bitcast <4 x i64> %775 to <8 x i32>
  %778 = bitcast <4 x i64> %776 to <8 x i32>
  %779 = shufflevector <8 x i32> %777, <8 x i32> %778, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %779, <8 x i32>* %680, align 32
  %780 = shufflevector <8 x i32> %777, <8 x i32> %778, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %780, <8 x i32>* %692, align 32
  %781 = shufflevector <4 x i64> %760, <4 x i64> %764, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %782 = shufflevector <4 x i64> %768, <4 x i64> %772, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %783 = bitcast <4 x i64> %781 to <8 x i32>
  %784 = bitcast <4 x i64> %782 to <8 x i32>
  %785 = shufflevector <8 x i32> %783, <8 x i32> %784, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %785, <8 x i32>* %683, align 32
  %786 = shufflevector <8 x i32> %783, <8 x i32> %784, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %786, <8 x i32>* %695, align 32
  %787 = shufflevector <4 x i64> %762, <4 x i64> %766, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %788 = shufflevector <4 x i64> %770, <4 x i64> %774, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %789 = bitcast <4 x i64> %787 to <8 x i32>
  %790 = bitcast <4 x i64> %788 to <8 x i32>
  %791 = shufflevector <8 x i32> %789, <8 x i32> %790, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %791, <8 x i32>* %686, align 32
  %792 = shufflevector <8 x i32> %789, <8 x i32> %790, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %792, <8 x i32>* %698, align 32
  %793 = shufflevector <4 x i64> %762, <4 x i64> %766, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %794 = shufflevector <4 x i64> %770, <4 x i64> %774, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %795 = bitcast <4 x i64> %793 to <8 x i32>
  %796 = bitcast <4 x i64> %794 to <8 x i32>
  %797 = shufflevector <8 x i32> %795, <8 x i32> %796, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %797, <8 x i32>* %689, align 32
  %798 = shufflevector <8 x i32> %795, <8 x i32> %796, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %798, <8 x i32>* %701, align 32
  %799 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 1, i64 1), align 1
  call void @fadst8_avx2(<4 x i64>* nonnull %640, <4 x i64>* nonnull %710, i8 signext %799, i32 1, i32 1)
  %800 = load <8 x i32>, <8 x i32>* %720, align 32
  %801 = load <8 x i32>, <8 x i32>* %724, align 32
  %802 = shufflevector <8 x i32> %800, <8 x i32> %801, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %803 = bitcast <8 x i32> %802 to <4 x i64>
  %804 = shufflevector <8 x i32> %800, <8 x i32> %801, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %805 = bitcast <8 x i32> %804 to <4 x i64>
  %806 = load <8 x i32>, <8 x i32>* %728, align 32
  %807 = load <8 x i32>, <8 x i32>* %732, align 32
  %808 = shufflevector <8 x i32> %806, <8 x i32> %807, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %809 = bitcast <8 x i32> %808 to <4 x i64>
  %810 = shufflevector <8 x i32> %806, <8 x i32> %807, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %811 = bitcast <8 x i32> %810 to <4 x i64>
  %812 = load <8 x i32>, <8 x i32>* %736, align 32
  %813 = load <8 x i32>, <8 x i32>* %740, align 32
  %814 = shufflevector <8 x i32> %812, <8 x i32> %813, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %815 = bitcast <8 x i32> %814 to <4 x i64>
  %816 = shufflevector <8 x i32> %812, <8 x i32> %813, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %817 = bitcast <8 x i32> %816 to <4 x i64>
  %818 = load <8 x i32>, <8 x i32>* %744, align 32
  %819 = load <8 x i32>, <8 x i32>* %748, align 32
  %820 = shufflevector <8 x i32> %818, <8 x i32> %819, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %821 = bitcast <8 x i32> %820 to <4 x i64>
  %822 = shufflevector <8 x i32> %818, <8 x i32> %819, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %823 = bitcast <8 x i32> %822 to <4 x i64>
  %824 = shufflevector <4 x i64> %803, <4 x i64> %809, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %825 = shufflevector <4 x i64> %815, <4 x i64> %821, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %826 = bitcast <4 x i64> %824 to <8 x i32>
  %827 = bitcast <4 x i64> %825 to <8 x i32>
  %828 = shufflevector <8 x i32> %826, <8 x i32> %827, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %828, <8 x i32>* %680, align 32
  %829 = shufflevector <8 x i32> %826, <8 x i32> %827, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %829, <8 x i32>* %692, align 32
  %830 = shufflevector <4 x i64> %803, <4 x i64> %809, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %831 = shufflevector <4 x i64> %815, <4 x i64> %821, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %832 = bitcast <4 x i64> %830 to <8 x i32>
  %833 = bitcast <4 x i64> %831 to <8 x i32>
  %834 = shufflevector <8 x i32> %832, <8 x i32> %833, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %834, <8 x i32>* %683, align 32
  %835 = shufflevector <8 x i32> %832, <8 x i32> %833, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %835, <8 x i32>* %695, align 32
  %836 = shufflevector <4 x i64> %805, <4 x i64> %811, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %837 = shufflevector <4 x i64> %817, <4 x i64> %823, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %838 = bitcast <4 x i64> %836 to <8 x i32>
  %839 = bitcast <4 x i64> %837 to <8 x i32>
  %840 = shufflevector <8 x i32> %838, <8 x i32> %839, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %840, <8 x i32>* %686, align 32
  %841 = shufflevector <8 x i32> %838, <8 x i32> %839, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %841, <8 x i32>* %698, align 32
  %842 = shufflevector <4 x i64> %805, <4 x i64> %811, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %843 = shufflevector <4 x i64> %817, <4 x i64> %823, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %844 = bitcast <4 x i64> %842 to <8 x i32>
  %845 = bitcast <4 x i64> %843 to <8 x i32>
  %846 = shufflevector <8 x i32> %844, <8 x i32> %845, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %846, <8 x i32>* %689, align 32
  %847 = shufflevector <8 x i32> %844, <8 x i32> %845, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %847, <8 x i32>* %701, align 32
  br label %3186

848:                                              ; preds = %5
  %849 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 0
  %850 = load i8, i8* %11, align 1
  %851 = sext i8 %850 to i32
  %852 = bitcast i16* %0 to <8 x i16>*
  %853 = load <8 x i16>, <8 x i16>* %852, align 16
  %854 = sext i32 %2 to i64
  %855 = getelementptr inbounds i16, i16* %0, i64 %854
  %856 = bitcast i16* %855 to <8 x i16>*
  %857 = load <8 x i16>, <8 x i16>* %856, align 16
  %858 = shl nsw i32 %2, 1
  %859 = sext i32 %858 to i64
  %860 = getelementptr inbounds i16, i16* %0, i64 %859
  %861 = bitcast i16* %860 to <8 x i16>*
  %862 = load <8 x i16>, <8 x i16>* %861, align 16
  %863 = mul nsw i32 %2, 3
  %864 = sext i32 %863 to i64
  %865 = getelementptr inbounds i16, i16* %0, i64 %864
  %866 = bitcast i16* %865 to <8 x i16>*
  %867 = load <8 x i16>, <8 x i16>* %866, align 16
  %868 = shl nsw i32 %2, 2
  %869 = sext i32 %868 to i64
  %870 = getelementptr inbounds i16, i16* %0, i64 %869
  %871 = bitcast i16* %870 to <8 x i16>*
  %872 = load <8 x i16>, <8 x i16>* %871, align 16
  %873 = mul nsw i32 %2, 5
  %874 = sext i32 %873 to i64
  %875 = getelementptr inbounds i16, i16* %0, i64 %874
  %876 = bitcast i16* %875 to <8 x i16>*
  %877 = load <8 x i16>, <8 x i16>* %876, align 16
  %878 = mul nsw i32 %2, 6
  %879 = sext i32 %878 to i64
  %880 = getelementptr inbounds i16, i16* %0, i64 %879
  %881 = bitcast i16* %880 to <8 x i16>*
  %882 = load <8 x i16>, <8 x i16>* %881, align 16
  %883 = mul nsw i32 %2, 7
  %884 = sext i32 %883 to i64
  %885 = getelementptr inbounds i16, i16* %0, i64 %884
  %886 = bitcast i16* %885 to <8 x i16>*
  %887 = load <8 x i16>, <8 x i16>* %886, align 16
  %888 = sext <8 x i16> %887 to <8 x i32>
  %889 = bitcast [8 x <4 x i64>]* %7 to <8 x i32>*
  %890 = sext <8 x i16> %882 to <8 x i32>
  %891 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 1
  %892 = bitcast <4 x i64>* %891 to <8 x i32>*
  %893 = sext <8 x i16> %877 to <8 x i32>
  %894 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 2
  %895 = bitcast <4 x i64>* %894 to <8 x i32>*
  %896 = sext <8 x i16> %872 to <8 x i32>
  %897 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 3
  %898 = bitcast <4 x i64>* %897 to <8 x i32>*
  %899 = sext <8 x i16> %867 to <8 x i32>
  %900 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 4
  %901 = bitcast <4 x i64>* %900 to <8 x i32>*
  %902 = sext <8 x i16> %862 to <8 x i32>
  %903 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 5
  %904 = bitcast <4 x i64>* %903 to <8 x i32>*
  %905 = sext <8 x i16> %857 to <8 x i32>
  %906 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 6
  %907 = bitcast <4 x i64>* %906 to <8 x i32>*
  %908 = sext <8 x i16> %853 to <8 x i32>
  %909 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 7
  %910 = bitcast <4 x i64>* %909 to <8 x i32>*
  %911 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %888, i32 %851) #7
  store <8 x i32> %911, <8 x i32>* %889, align 32
  %912 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %890, i32 %851) #7
  store <8 x i32> %912, <8 x i32>* %892, align 32
  %913 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %893, i32 %851) #7
  store <8 x i32> %913, <8 x i32>* %895, align 32
  %914 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %896, i32 %851) #7
  store <8 x i32> %914, <8 x i32>* %898, align 32
  %915 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %899, i32 %851) #7
  store <8 x i32> %915, <8 x i32>* %901, align 32
  %916 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %902, i32 %851) #7
  store <8 x i32> %916, <8 x i32>* %904, align 32
  %917 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %905, i32 %851) #7
  store <8 x i32> %917, <8 x i32>* %907, align 32
  %918 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %908, i32 %851) #7
  store <8 x i32> %918, <8 x i32>* %910, align 32
  %919 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 0
  %920 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 1, i64 1), align 1
  call void @fadst8_avx2(<4 x i64>* nonnull %849, <4 x i64>* nonnull %919, i8 signext %920, i32 1, i32 1)
  %921 = getelementptr inbounds i8, i8* %11, i64 1
  %922 = load i8, i8* %921, align 1
  %923 = sext i8 %922 to i32
  %924 = sub nsw i32 0, %923
  %925 = xor i32 %923, -1
  %926 = shl i32 1, %925
  %927 = insertelement <8 x i32> undef, i32 %926, i32 0
  %928 = shufflevector <8 x i32> %927, <8 x i32> undef, <8 x i32> zeroinitializer
  %929 = bitcast [8 x <4 x i64>]* %9 to <8 x i32>*
  %930 = load <8 x i32>, <8 x i32>* %929, align 32
  %931 = add <8 x i32> %928, %930
  %932 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 1
  %933 = bitcast <4 x i64>* %932 to <8 x i32>*
  %934 = load <8 x i32>, <8 x i32>* %933, align 32
  %935 = add <8 x i32> %928, %934
  %936 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 2
  %937 = bitcast <4 x i64>* %936 to <8 x i32>*
  %938 = load <8 x i32>, <8 x i32>* %937, align 32
  %939 = add <8 x i32> %928, %938
  %940 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 3
  %941 = bitcast <4 x i64>* %940 to <8 x i32>*
  %942 = load <8 x i32>, <8 x i32>* %941, align 32
  %943 = add <8 x i32> %942, %928
  %944 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 4
  %945 = bitcast <4 x i64>* %944 to <8 x i32>*
  %946 = load <8 x i32>, <8 x i32>* %945, align 32
  %947 = add <8 x i32> %946, %928
  %948 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 5
  %949 = bitcast <4 x i64>* %948 to <8 x i32>*
  %950 = load <8 x i32>, <8 x i32>* %949, align 32
  %951 = add <8 x i32> %950, %928
  %952 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 6
  %953 = bitcast <4 x i64>* %952 to <8 x i32>*
  %954 = load <8 x i32>, <8 x i32>* %953, align 32
  %955 = add <8 x i32> %954, %928
  %956 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 7
  %957 = bitcast <4 x i64>* %956 to <8 x i32>*
  %958 = load <8 x i32>, <8 x i32>* %957, align 32
  %959 = add <8 x i32> %958, %928
  %960 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %931, i32 %924) #7
  store <8 x i32> %960, <8 x i32>* %929, align 32
  %961 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %935, i32 %924) #7
  store <8 x i32> %961, <8 x i32>* %933, align 32
  %962 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %939, i32 %924) #7
  store <8 x i32> %962, <8 x i32>* %937, align 32
  %963 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %943, i32 %924) #7
  store <8 x i32> %963, <8 x i32>* %941, align 32
  %964 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %947, i32 %924) #7
  store <8 x i32> %964, <8 x i32>* %945, align 32
  %965 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %951, i32 %924) #7
  store <8 x i32> %965, <8 x i32>* %949, align 32
  %966 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %955, i32 %924) #7
  store <8 x i32> %966, <8 x i32>* %953, align 32
  %967 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %959, i32 %924) #7
  store <8 x i32> %967, <8 x i32>* %957, align 32
  %968 = shufflevector <8 x i32> %960, <8 x i32> %961, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %969 = bitcast <8 x i32> %968 to <4 x i64>
  %970 = shufflevector <8 x i32> %960, <8 x i32> %961, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %971 = bitcast <8 x i32> %970 to <4 x i64>
  %972 = shufflevector <8 x i32> %962, <8 x i32> %963, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %973 = bitcast <8 x i32> %972 to <4 x i64>
  %974 = shufflevector <8 x i32> %962, <8 x i32> %963, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %975 = bitcast <8 x i32> %974 to <4 x i64>
  %976 = shufflevector <8 x i32> %964, <8 x i32> %965, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %977 = bitcast <8 x i32> %976 to <4 x i64>
  %978 = shufflevector <8 x i32> %964, <8 x i32> %965, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %979 = bitcast <8 x i32> %978 to <4 x i64>
  %980 = shufflevector <8 x i32> %966, <8 x i32> %967, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %981 = bitcast <8 x i32> %980 to <4 x i64>
  %982 = shufflevector <8 x i32> %966, <8 x i32> %967, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %983 = bitcast <8 x i32> %982 to <4 x i64>
  %984 = shufflevector <4 x i64> %969, <4 x i64> %973, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %985 = shufflevector <4 x i64> %977, <4 x i64> %981, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %986 = bitcast <4 x i64> %984 to <8 x i32>
  %987 = bitcast <4 x i64> %985 to <8 x i32>
  %988 = shufflevector <8 x i32> %986, <8 x i32> %987, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %988, <8 x i32>* %889, align 32
  %989 = shufflevector <8 x i32> %986, <8 x i32> %987, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %989, <8 x i32>* %901, align 32
  %990 = shufflevector <4 x i64> %969, <4 x i64> %973, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %991 = shufflevector <4 x i64> %977, <4 x i64> %981, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %992 = bitcast <4 x i64> %990 to <8 x i32>
  %993 = bitcast <4 x i64> %991 to <8 x i32>
  %994 = shufflevector <8 x i32> %992, <8 x i32> %993, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %994, <8 x i32>* %892, align 32
  %995 = shufflevector <8 x i32> %992, <8 x i32> %993, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %995, <8 x i32>* %904, align 32
  %996 = shufflevector <4 x i64> %971, <4 x i64> %975, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %997 = shufflevector <4 x i64> %979, <4 x i64> %983, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %998 = bitcast <4 x i64> %996 to <8 x i32>
  %999 = bitcast <4 x i64> %997 to <8 x i32>
  %1000 = shufflevector <8 x i32> %998, <8 x i32> %999, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1000, <8 x i32>* %895, align 32
  %1001 = shufflevector <8 x i32> %998, <8 x i32> %999, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1001, <8 x i32>* %907, align 32
  %1002 = shufflevector <4 x i64> %971, <4 x i64> %975, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1003 = shufflevector <4 x i64> %979, <4 x i64> %983, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1004 = bitcast <4 x i64> %1002 to <8 x i32>
  %1005 = bitcast <4 x i64> %1003 to <8 x i32>
  %1006 = shufflevector <8 x i32> %1004, <8 x i32> %1005, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1006, <8 x i32>* %898, align 32
  %1007 = shufflevector <8 x i32> %1004, <8 x i32> %1005, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1007, <8 x i32>* %910, align 32
  %1008 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 1, i64 1), align 1
  call void @fdct8_avx2(<4 x i64>* nonnull %849, <4 x i64>* nonnull %919, i8 signext %1008, i32 1, i32 1)
  %1009 = load <8 x i32>, <8 x i32>* %929, align 32
  %1010 = load <8 x i32>, <8 x i32>* %933, align 32
  %1011 = shufflevector <8 x i32> %1009, <8 x i32> %1010, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1012 = bitcast <8 x i32> %1011 to <4 x i64>
  %1013 = shufflevector <8 x i32> %1009, <8 x i32> %1010, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1014 = bitcast <8 x i32> %1013 to <4 x i64>
  %1015 = load <8 x i32>, <8 x i32>* %937, align 32
  %1016 = load <8 x i32>, <8 x i32>* %941, align 32
  %1017 = shufflevector <8 x i32> %1015, <8 x i32> %1016, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1018 = bitcast <8 x i32> %1017 to <4 x i64>
  %1019 = shufflevector <8 x i32> %1015, <8 x i32> %1016, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1020 = bitcast <8 x i32> %1019 to <4 x i64>
  %1021 = load <8 x i32>, <8 x i32>* %945, align 32
  %1022 = load <8 x i32>, <8 x i32>* %949, align 32
  %1023 = shufflevector <8 x i32> %1021, <8 x i32> %1022, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1024 = bitcast <8 x i32> %1023 to <4 x i64>
  %1025 = shufflevector <8 x i32> %1021, <8 x i32> %1022, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1026 = bitcast <8 x i32> %1025 to <4 x i64>
  %1027 = load <8 x i32>, <8 x i32>* %953, align 32
  %1028 = load <8 x i32>, <8 x i32>* %957, align 32
  %1029 = shufflevector <8 x i32> %1027, <8 x i32> %1028, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1030 = bitcast <8 x i32> %1029 to <4 x i64>
  %1031 = shufflevector <8 x i32> %1027, <8 x i32> %1028, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1032 = bitcast <8 x i32> %1031 to <4 x i64>
  %1033 = shufflevector <4 x i64> %1012, <4 x i64> %1018, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1034 = shufflevector <4 x i64> %1024, <4 x i64> %1030, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1035 = bitcast <4 x i64> %1033 to <8 x i32>
  %1036 = bitcast <4 x i64> %1034 to <8 x i32>
  %1037 = shufflevector <8 x i32> %1035, <8 x i32> %1036, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1037, <8 x i32>* %889, align 32
  %1038 = shufflevector <8 x i32> %1035, <8 x i32> %1036, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1038, <8 x i32>* %901, align 32
  %1039 = shufflevector <4 x i64> %1012, <4 x i64> %1018, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1040 = shufflevector <4 x i64> %1024, <4 x i64> %1030, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1041 = bitcast <4 x i64> %1039 to <8 x i32>
  %1042 = bitcast <4 x i64> %1040 to <8 x i32>
  %1043 = shufflevector <8 x i32> %1041, <8 x i32> %1042, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1043, <8 x i32>* %892, align 32
  %1044 = shufflevector <8 x i32> %1041, <8 x i32> %1042, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1044, <8 x i32>* %904, align 32
  %1045 = shufflevector <4 x i64> %1014, <4 x i64> %1020, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1046 = shufflevector <4 x i64> %1026, <4 x i64> %1032, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1047 = bitcast <4 x i64> %1045 to <8 x i32>
  %1048 = bitcast <4 x i64> %1046 to <8 x i32>
  %1049 = shufflevector <8 x i32> %1047, <8 x i32> %1048, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1049, <8 x i32>* %895, align 32
  %1050 = shufflevector <8 x i32> %1047, <8 x i32> %1048, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1050, <8 x i32>* %907, align 32
  %1051 = shufflevector <4 x i64> %1014, <4 x i64> %1020, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1052 = shufflevector <4 x i64> %1026, <4 x i64> %1032, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1053 = bitcast <4 x i64> %1051 to <8 x i32>
  %1054 = bitcast <4 x i64> %1052 to <8 x i32>
  %1055 = shufflevector <8 x i32> %1053, <8 x i32> %1054, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1055, <8 x i32>* %898, align 32
  %1056 = shufflevector <8 x i32> %1053, <8 x i32> %1054, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1056, <8 x i32>* %910, align 32
  br label %3186

1057:                                             ; preds = %5
  %1058 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 0
  %1059 = load i8, i8* %11, align 1
  %1060 = sext i8 %1059 to i32
  %1061 = bitcast i16* %0 to <8 x i16>*
  %1062 = load <8 x i16>, <8 x i16>* %1061, align 16
  %1063 = sext i32 %2 to i64
  %1064 = getelementptr inbounds i16, i16* %0, i64 %1063
  %1065 = bitcast i16* %1064 to <8 x i16>*
  %1066 = load <8 x i16>, <8 x i16>* %1065, align 16
  %1067 = shl nsw i32 %2, 1
  %1068 = sext i32 %1067 to i64
  %1069 = getelementptr inbounds i16, i16* %0, i64 %1068
  %1070 = bitcast i16* %1069 to <8 x i16>*
  %1071 = load <8 x i16>, <8 x i16>* %1070, align 16
  %1072 = mul nsw i32 %2, 3
  %1073 = sext i32 %1072 to i64
  %1074 = getelementptr inbounds i16, i16* %0, i64 %1073
  %1075 = bitcast i16* %1074 to <8 x i16>*
  %1076 = load <8 x i16>, <8 x i16>* %1075, align 16
  %1077 = shl nsw i32 %2, 2
  %1078 = sext i32 %1077 to i64
  %1079 = getelementptr inbounds i16, i16* %0, i64 %1078
  %1080 = bitcast i16* %1079 to <8 x i16>*
  %1081 = load <8 x i16>, <8 x i16>* %1080, align 16
  %1082 = mul nsw i32 %2, 5
  %1083 = sext i32 %1082 to i64
  %1084 = getelementptr inbounds i16, i16* %0, i64 %1083
  %1085 = bitcast i16* %1084 to <8 x i16>*
  %1086 = load <8 x i16>, <8 x i16>* %1085, align 16
  %1087 = mul nsw i32 %2, 6
  %1088 = sext i32 %1087 to i64
  %1089 = getelementptr inbounds i16, i16* %0, i64 %1088
  %1090 = bitcast i16* %1089 to <8 x i16>*
  %1091 = load <8 x i16>, <8 x i16>* %1090, align 16
  %1092 = mul nsw i32 %2, 7
  %1093 = sext i32 %1092 to i64
  %1094 = getelementptr inbounds i16, i16* %0, i64 %1093
  %1095 = bitcast i16* %1094 to <8 x i16>*
  %1096 = load <8 x i16>, <8 x i16>* %1095, align 16
  %1097 = shufflevector <8 x i16> %1062, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %1098 = shufflevector <8 x i16> %1097, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %1099 = bitcast <8 x i16> %1098 to <4 x i32>
  %1100 = shufflevector <4 x i32> %1099, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %1101 = bitcast <4 x i32> %1100 to <8 x i16>
  %1102 = sext <8 x i16> %1101 to <8 x i32>
  %1103 = bitcast [8 x <4 x i64>]* %7 to <8 x i32>*
  %1104 = shufflevector <8 x i16> %1066, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %1105 = shufflevector <8 x i16> %1104, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %1106 = bitcast <8 x i16> %1105 to <4 x i32>
  %1107 = shufflevector <4 x i32> %1106, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %1108 = bitcast <4 x i32> %1107 to <8 x i16>
  %1109 = sext <8 x i16> %1108 to <8 x i32>
  %1110 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 1
  %1111 = bitcast <4 x i64>* %1110 to <8 x i32>*
  %1112 = shufflevector <8 x i16> %1071, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %1113 = shufflevector <8 x i16> %1112, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %1114 = bitcast <8 x i16> %1113 to <4 x i32>
  %1115 = shufflevector <4 x i32> %1114, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %1116 = bitcast <4 x i32> %1115 to <8 x i16>
  %1117 = sext <8 x i16> %1116 to <8 x i32>
  %1118 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 2
  %1119 = bitcast <4 x i64>* %1118 to <8 x i32>*
  %1120 = shufflevector <8 x i16> %1076, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %1121 = shufflevector <8 x i16> %1120, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %1122 = bitcast <8 x i16> %1121 to <4 x i32>
  %1123 = shufflevector <4 x i32> %1122, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %1124 = bitcast <4 x i32> %1123 to <8 x i16>
  %1125 = sext <8 x i16> %1124 to <8 x i32>
  %1126 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 3
  %1127 = bitcast <4 x i64>* %1126 to <8 x i32>*
  %1128 = shufflevector <8 x i16> %1081, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %1129 = shufflevector <8 x i16> %1128, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %1130 = bitcast <8 x i16> %1129 to <4 x i32>
  %1131 = shufflevector <4 x i32> %1130, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %1132 = bitcast <4 x i32> %1131 to <8 x i16>
  %1133 = sext <8 x i16> %1132 to <8 x i32>
  %1134 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 4
  %1135 = bitcast <4 x i64>* %1134 to <8 x i32>*
  %1136 = shufflevector <8 x i16> %1086, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %1137 = shufflevector <8 x i16> %1136, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %1138 = bitcast <8 x i16> %1137 to <4 x i32>
  %1139 = shufflevector <4 x i32> %1138, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %1140 = bitcast <4 x i32> %1139 to <8 x i16>
  %1141 = sext <8 x i16> %1140 to <8 x i32>
  %1142 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 5
  %1143 = bitcast <4 x i64>* %1142 to <8 x i32>*
  %1144 = shufflevector <8 x i16> %1091, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %1145 = shufflevector <8 x i16> %1144, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %1146 = bitcast <8 x i16> %1145 to <4 x i32>
  %1147 = shufflevector <4 x i32> %1146, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %1148 = bitcast <4 x i32> %1147 to <8 x i16>
  %1149 = sext <8 x i16> %1148 to <8 x i32>
  %1150 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 6
  %1151 = bitcast <4 x i64>* %1150 to <8 x i32>*
  %1152 = shufflevector <8 x i16> %1096, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %1153 = shufflevector <8 x i16> %1152, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %1154 = bitcast <8 x i16> %1153 to <4 x i32>
  %1155 = shufflevector <4 x i32> %1154, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %1156 = bitcast <4 x i32> %1155 to <8 x i16>
  %1157 = sext <8 x i16> %1156 to <8 x i32>
  %1158 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 7
  %1159 = bitcast <4 x i64>* %1158 to <8 x i32>*
  %1160 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1102, i32 %1060) #7
  store <8 x i32> %1160, <8 x i32>* %1103, align 32
  %1161 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1109, i32 %1060) #7
  store <8 x i32> %1161, <8 x i32>* %1111, align 32
  %1162 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1117, i32 %1060) #7
  store <8 x i32> %1162, <8 x i32>* %1119, align 32
  %1163 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1125, i32 %1060) #7
  store <8 x i32> %1163, <8 x i32>* %1127, align 32
  %1164 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1133, i32 %1060) #7
  store <8 x i32> %1164, <8 x i32>* %1135, align 32
  %1165 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1141, i32 %1060) #7
  store <8 x i32> %1165, <8 x i32>* %1143, align 32
  %1166 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1149, i32 %1060) #7
  store <8 x i32> %1166, <8 x i32>* %1151, align 32
  %1167 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1157, i32 %1060) #7
  store <8 x i32> %1167, <8 x i32>* %1159, align 32
  %1168 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 0
  %1169 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 1, i64 1), align 1
  call void @fdct8_avx2(<4 x i64>* nonnull %1058, <4 x i64>* nonnull %1168, i8 signext %1169, i32 1, i32 1)
  %1170 = getelementptr inbounds i8, i8* %11, i64 1
  %1171 = load i8, i8* %1170, align 1
  %1172 = sext i8 %1171 to i32
  %1173 = sub nsw i32 0, %1172
  %1174 = xor i32 %1172, -1
  %1175 = shl i32 1, %1174
  %1176 = insertelement <8 x i32> undef, i32 %1175, i32 0
  %1177 = shufflevector <8 x i32> %1176, <8 x i32> undef, <8 x i32> zeroinitializer
  %1178 = bitcast [8 x <4 x i64>]* %9 to <8 x i32>*
  %1179 = load <8 x i32>, <8 x i32>* %1178, align 32
  %1180 = add <8 x i32> %1177, %1179
  %1181 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 1
  %1182 = bitcast <4 x i64>* %1181 to <8 x i32>*
  %1183 = load <8 x i32>, <8 x i32>* %1182, align 32
  %1184 = add <8 x i32> %1177, %1183
  %1185 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 2
  %1186 = bitcast <4 x i64>* %1185 to <8 x i32>*
  %1187 = load <8 x i32>, <8 x i32>* %1186, align 32
  %1188 = add <8 x i32> %1177, %1187
  %1189 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 3
  %1190 = bitcast <4 x i64>* %1189 to <8 x i32>*
  %1191 = load <8 x i32>, <8 x i32>* %1190, align 32
  %1192 = add <8 x i32> %1191, %1177
  %1193 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 4
  %1194 = bitcast <4 x i64>* %1193 to <8 x i32>*
  %1195 = load <8 x i32>, <8 x i32>* %1194, align 32
  %1196 = add <8 x i32> %1195, %1177
  %1197 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 5
  %1198 = bitcast <4 x i64>* %1197 to <8 x i32>*
  %1199 = load <8 x i32>, <8 x i32>* %1198, align 32
  %1200 = add <8 x i32> %1199, %1177
  %1201 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 6
  %1202 = bitcast <4 x i64>* %1201 to <8 x i32>*
  %1203 = load <8 x i32>, <8 x i32>* %1202, align 32
  %1204 = add <8 x i32> %1203, %1177
  %1205 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 7
  %1206 = bitcast <4 x i64>* %1205 to <8 x i32>*
  %1207 = load <8 x i32>, <8 x i32>* %1206, align 32
  %1208 = add <8 x i32> %1207, %1177
  %1209 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1180, i32 %1173) #7
  store <8 x i32> %1209, <8 x i32>* %1178, align 32
  %1210 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1184, i32 %1173) #7
  store <8 x i32> %1210, <8 x i32>* %1182, align 32
  %1211 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1188, i32 %1173) #7
  store <8 x i32> %1211, <8 x i32>* %1186, align 32
  %1212 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1192, i32 %1173) #7
  store <8 x i32> %1212, <8 x i32>* %1190, align 32
  %1213 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1196, i32 %1173) #7
  store <8 x i32> %1213, <8 x i32>* %1194, align 32
  %1214 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1200, i32 %1173) #7
  store <8 x i32> %1214, <8 x i32>* %1198, align 32
  %1215 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1204, i32 %1173) #7
  store <8 x i32> %1215, <8 x i32>* %1202, align 32
  %1216 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1208, i32 %1173) #7
  store <8 x i32> %1216, <8 x i32>* %1206, align 32
  %1217 = shufflevector <8 x i32> %1209, <8 x i32> %1210, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1218 = bitcast <8 x i32> %1217 to <4 x i64>
  %1219 = shufflevector <8 x i32> %1209, <8 x i32> %1210, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1220 = bitcast <8 x i32> %1219 to <4 x i64>
  %1221 = shufflevector <8 x i32> %1211, <8 x i32> %1212, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1222 = bitcast <8 x i32> %1221 to <4 x i64>
  %1223 = shufflevector <8 x i32> %1211, <8 x i32> %1212, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1224 = bitcast <8 x i32> %1223 to <4 x i64>
  %1225 = shufflevector <8 x i32> %1213, <8 x i32> %1214, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1226 = bitcast <8 x i32> %1225 to <4 x i64>
  %1227 = shufflevector <8 x i32> %1213, <8 x i32> %1214, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1228 = bitcast <8 x i32> %1227 to <4 x i64>
  %1229 = shufflevector <8 x i32> %1215, <8 x i32> %1216, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1230 = bitcast <8 x i32> %1229 to <4 x i64>
  %1231 = shufflevector <8 x i32> %1215, <8 x i32> %1216, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1232 = bitcast <8 x i32> %1231 to <4 x i64>
  %1233 = shufflevector <4 x i64> %1218, <4 x i64> %1222, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1234 = shufflevector <4 x i64> %1226, <4 x i64> %1230, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1235 = bitcast <4 x i64> %1233 to <8 x i32>
  %1236 = bitcast <4 x i64> %1234 to <8 x i32>
  %1237 = shufflevector <8 x i32> %1235, <8 x i32> %1236, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1237, <8 x i32>* %1103, align 32
  %1238 = shufflevector <8 x i32> %1235, <8 x i32> %1236, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1238, <8 x i32>* %1135, align 32
  %1239 = shufflevector <4 x i64> %1218, <4 x i64> %1222, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1240 = shufflevector <4 x i64> %1226, <4 x i64> %1230, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1241 = bitcast <4 x i64> %1239 to <8 x i32>
  %1242 = bitcast <4 x i64> %1240 to <8 x i32>
  %1243 = shufflevector <8 x i32> %1241, <8 x i32> %1242, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1243, <8 x i32>* %1111, align 32
  %1244 = shufflevector <8 x i32> %1241, <8 x i32> %1242, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1244, <8 x i32>* %1143, align 32
  %1245 = shufflevector <4 x i64> %1220, <4 x i64> %1224, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1246 = shufflevector <4 x i64> %1228, <4 x i64> %1232, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1247 = bitcast <4 x i64> %1245 to <8 x i32>
  %1248 = bitcast <4 x i64> %1246 to <8 x i32>
  %1249 = shufflevector <8 x i32> %1247, <8 x i32> %1248, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1249, <8 x i32>* %1119, align 32
  %1250 = shufflevector <8 x i32> %1247, <8 x i32> %1248, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1250, <8 x i32>* %1151, align 32
  %1251 = shufflevector <4 x i64> %1220, <4 x i64> %1224, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1252 = shufflevector <4 x i64> %1228, <4 x i64> %1232, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1253 = bitcast <4 x i64> %1251 to <8 x i32>
  %1254 = bitcast <4 x i64> %1252 to <8 x i32>
  %1255 = shufflevector <8 x i32> %1253, <8 x i32> %1254, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1255, <8 x i32>* %1127, align 32
  %1256 = shufflevector <8 x i32> %1253, <8 x i32> %1254, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1256, <8 x i32>* %1159, align 32
  %1257 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 1, i64 1), align 1
  call void @fadst8_avx2(<4 x i64>* nonnull %1058, <4 x i64>* nonnull %1168, i8 signext %1257, i32 1, i32 1)
  %1258 = load <8 x i32>, <8 x i32>* %1178, align 32
  %1259 = load <8 x i32>, <8 x i32>* %1182, align 32
  %1260 = shufflevector <8 x i32> %1258, <8 x i32> %1259, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1261 = bitcast <8 x i32> %1260 to <4 x i64>
  %1262 = shufflevector <8 x i32> %1258, <8 x i32> %1259, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1263 = bitcast <8 x i32> %1262 to <4 x i64>
  %1264 = load <8 x i32>, <8 x i32>* %1186, align 32
  %1265 = load <8 x i32>, <8 x i32>* %1190, align 32
  %1266 = shufflevector <8 x i32> %1264, <8 x i32> %1265, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1267 = bitcast <8 x i32> %1266 to <4 x i64>
  %1268 = shufflevector <8 x i32> %1264, <8 x i32> %1265, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1269 = bitcast <8 x i32> %1268 to <4 x i64>
  %1270 = load <8 x i32>, <8 x i32>* %1194, align 32
  %1271 = load <8 x i32>, <8 x i32>* %1198, align 32
  %1272 = shufflevector <8 x i32> %1270, <8 x i32> %1271, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1273 = bitcast <8 x i32> %1272 to <4 x i64>
  %1274 = shufflevector <8 x i32> %1270, <8 x i32> %1271, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1275 = bitcast <8 x i32> %1274 to <4 x i64>
  %1276 = load <8 x i32>, <8 x i32>* %1202, align 32
  %1277 = load <8 x i32>, <8 x i32>* %1206, align 32
  %1278 = shufflevector <8 x i32> %1276, <8 x i32> %1277, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1279 = bitcast <8 x i32> %1278 to <4 x i64>
  %1280 = shufflevector <8 x i32> %1276, <8 x i32> %1277, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1281 = bitcast <8 x i32> %1280 to <4 x i64>
  %1282 = shufflevector <4 x i64> %1261, <4 x i64> %1267, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1283 = shufflevector <4 x i64> %1273, <4 x i64> %1279, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1284 = bitcast <4 x i64> %1282 to <8 x i32>
  %1285 = bitcast <4 x i64> %1283 to <8 x i32>
  %1286 = shufflevector <8 x i32> %1284, <8 x i32> %1285, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1286, <8 x i32>* %1103, align 32
  %1287 = shufflevector <8 x i32> %1284, <8 x i32> %1285, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1287, <8 x i32>* %1135, align 32
  %1288 = shufflevector <4 x i64> %1261, <4 x i64> %1267, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1289 = shufflevector <4 x i64> %1273, <4 x i64> %1279, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1290 = bitcast <4 x i64> %1288 to <8 x i32>
  %1291 = bitcast <4 x i64> %1289 to <8 x i32>
  %1292 = shufflevector <8 x i32> %1290, <8 x i32> %1291, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1292, <8 x i32>* %1111, align 32
  %1293 = shufflevector <8 x i32> %1290, <8 x i32> %1291, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1293, <8 x i32>* %1143, align 32
  %1294 = shufflevector <4 x i64> %1263, <4 x i64> %1269, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1295 = shufflevector <4 x i64> %1275, <4 x i64> %1281, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1296 = bitcast <4 x i64> %1294 to <8 x i32>
  %1297 = bitcast <4 x i64> %1295 to <8 x i32>
  %1298 = shufflevector <8 x i32> %1296, <8 x i32> %1297, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1298, <8 x i32>* %1119, align 32
  %1299 = shufflevector <8 x i32> %1296, <8 x i32> %1297, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1299, <8 x i32>* %1151, align 32
  %1300 = shufflevector <4 x i64> %1263, <4 x i64> %1269, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1301 = shufflevector <4 x i64> %1275, <4 x i64> %1281, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1302 = bitcast <4 x i64> %1300 to <8 x i32>
  %1303 = bitcast <4 x i64> %1301 to <8 x i32>
  %1304 = shufflevector <8 x i32> %1302, <8 x i32> %1303, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1304, <8 x i32>* %1127, align 32
  %1305 = shufflevector <8 x i32> %1302, <8 x i32> %1303, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1305, <8 x i32>* %1159, align 32
  br label %3186

1306:                                             ; preds = %5
  %1307 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 0
  %1308 = load i8, i8* %11, align 1
  %1309 = sext i8 %1308 to i32
  %1310 = bitcast i16* %0 to <8 x i16>*
  %1311 = load <8 x i16>, <8 x i16>* %1310, align 16
  %1312 = sext i32 %2 to i64
  %1313 = getelementptr inbounds i16, i16* %0, i64 %1312
  %1314 = bitcast i16* %1313 to <8 x i16>*
  %1315 = load <8 x i16>, <8 x i16>* %1314, align 16
  %1316 = shl nsw i32 %2, 1
  %1317 = sext i32 %1316 to i64
  %1318 = getelementptr inbounds i16, i16* %0, i64 %1317
  %1319 = bitcast i16* %1318 to <8 x i16>*
  %1320 = load <8 x i16>, <8 x i16>* %1319, align 16
  %1321 = mul nsw i32 %2, 3
  %1322 = sext i32 %1321 to i64
  %1323 = getelementptr inbounds i16, i16* %0, i64 %1322
  %1324 = bitcast i16* %1323 to <8 x i16>*
  %1325 = load <8 x i16>, <8 x i16>* %1324, align 16
  %1326 = shl nsw i32 %2, 2
  %1327 = sext i32 %1326 to i64
  %1328 = getelementptr inbounds i16, i16* %0, i64 %1327
  %1329 = bitcast i16* %1328 to <8 x i16>*
  %1330 = load <8 x i16>, <8 x i16>* %1329, align 16
  %1331 = mul nsw i32 %2, 5
  %1332 = sext i32 %1331 to i64
  %1333 = getelementptr inbounds i16, i16* %0, i64 %1332
  %1334 = bitcast i16* %1333 to <8 x i16>*
  %1335 = load <8 x i16>, <8 x i16>* %1334, align 16
  %1336 = mul nsw i32 %2, 6
  %1337 = sext i32 %1336 to i64
  %1338 = getelementptr inbounds i16, i16* %0, i64 %1337
  %1339 = bitcast i16* %1338 to <8 x i16>*
  %1340 = load <8 x i16>, <8 x i16>* %1339, align 16
  %1341 = mul nsw i32 %2, 7
  %1342 = sext i32 %1341 to i64
  %1343 = getelementptr inbounds i16, i16* %0, i64 %1342
  %1344 = bitcast i16* %1343 to <8 x i16>*
  %1345 = load <8 x i16>, <8 x i16>* %1344, align 16
  %1346 = shufflevector <8 x i16> %1345, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %1347 = shufflevector <8 x i16> %1346, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %1348 = bitcast <8 x i16> %1347 to <4 x i32>
  %1349 = shufflevector <4 x i32> %1348, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %1350 = bitcast <4 x i32> %1349 to <8 x i16>
  %1351 = sext <8 x i16> %1350 to <8 x i32>
  %1352 = bitcast [8 x <4 x i64>]* %7 to <8 x i32>*
  %1353 = shufflevector <8 x i16> %1340, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %1354 = shufflevector <8 x i16> %1353, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %1355 = bitcast <8 x i16> %1354 to <4 x i32>
  %1356 = shufflevector <4 x i32> %1355, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %1357 = bitcast <4 x i32> %1356 to <8 x i16>
  %1358 = sext <8 x i16> %1357 to <8 x i32>
  %1359 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 1
  %1360 = bitcast <4 x i64>* %1359 to <8 x i32>*
  %1361 = shufflevector <8 x i16> %1335, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %1362 = shufflevector <8 x i16> %1361, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %1363 = bitcast <8 x i16> %1362 to <4 x i32>
  %1364 = shufflevector <4 x i32> %1363, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %1365 = bitcast <4 x i32> %1364 to <8 x i16>
  %1366 = sext <8 x i16> %1365 to <8 x i32>
  %1367 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 2
  %1368 = bitcast <4 x i64>* %1367 to <8 x i32>*
  %1369 = shufflevector <8 x i16> %1330, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %1370 = shufflevector <8 x i16> %1369, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %1371 = bitcast <8 x i16> %1370 to <4 x i32>
  %1372 = shufflevector <4 x i32> %1371, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %1373 = bitcast <4 x i32> %1372 to <8 x i16>
  %1374 = sext <8 x i16> %1373 to <8 x i32>
  %1375 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 3
  %1376 = bitcast <4 x i64>* %1375 to <8 x i32>*
  %1377 = shufflevector <8 x i16> %1325, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %1378 = shufflevector <8 x i16> %1377, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %1379 = bitcast <8 x i16> %1378 to <4 x i32>
  %1380 = shufflevector <4 x i32> %1379, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %1381 = bitcast <4 x i32> %1380 to <8 x i16>
  %1382 = sext <8 x i16> %1381 to <8 x i32>
  %1383 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 4
  %1384 = bitcast <4 x i64>* %1383 to <8 x i32>*
  %1385 = shufflevector <8 x i16> %1320, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %1386 = shufflevector <8 x i16> %1385, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %1387 = bitcast <8 x i16> %1386 to <4 x i32>
  %1388 = shufflevector <4 x i32> %1387, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %1389 = bitcast <4 x i32> %1388 to <8 x i16>
  %1390 = sext <8 x i16> %1389 to <8 x i32>
  %1391 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 5
  %1392 = bitcast <4 x i64>* %1391 to <8 x i32>*
  %1393 = shufflevector <8 x i16> %1315, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %1394 = shufflevector <8 x i16> %1393, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %1395 = bitcast <8 x i16> %1394 to <4 x i32>
  %1396 = shufflevector <4 x i32> %1395, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %1397 = bitcast <4 x i32> %1396 to <8 x i16>
  %1398 = sext <8 x i16> %1397 to <8 x i32>
  %1399 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 6
  %1400 = bitcast <4 x i64>* %1399 to <8 x i32>*
  %1401 = shufflevector <8 x i16> %1311, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %1402 = shufflevector <8 x i16> %1401, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %1403 = bitcast <8 x i16> %1402 to <4 x i32>
  %1404 = shufflevector <4 x i32> %1403, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %1405 = bitcast <4 x i32> %1404 to <8 x i16>
  %1406 = sext <8 x i16> %1405 to <8 x i32>
  %1407 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 7
  %1408 = bitcast <4 x i64>* %1407 to <8 x i32>*
  %1409 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1351, i32 %1309) #7
  store <8 x i32> %1409, <8 x i32>* %1352, align 32
  %1410 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1358, i32 %1309) #7
  store <8 x i32> %1410, <8 x i32>* %1360, align 32
  %1411 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1366, i32 %1309) #7
  store <8 x i32> %1411, <8 x i32>* %1368, align 32
  %1412 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1374, i32 %1309) #7
  store <8 x i32> %1412, <8 x i32>* %1376, align 32
  %1413 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1382, i32 %1309) #7
  store <8 x i32> %1413, <8 x i32>* %1384, align 32
  %1414 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1390, i32 %1309) #7
  store <8 x i32> %1414, <8 x i32>* %1392, align 32
  %1415 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1398, i32 %1309) #7
  store <8 x i32> %1415, <8 x i32>* %1400, align 32
  %1416 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1406, i32 %1309) #7
  store <8 x i32> %1416, <8 x i32>* %1408, align 32
  %1417 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 0
  %1418 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 1, i64 1), align 1
  call void @fadst8_avx2(<4 x i64>* nonnull %1307, <4 x i64>* nonnull %1417, i8 signext %1418, i32 1, i32 1)
  %1419 = getelementptr inbounds i8, i8* %11, i64 1
  %1420 = load i8, i8* %1419, align 1
  %1421 = sext i8 %1420 to i32
  %1422 = sub nsw i32 0, %1421
  %1423 = xor i32 %1421, -1
  %1424 = shl i32 1, %1423
  %1425 = insertelement <8 x i32> undef, i32 %1424, i32 0
  %1426 = shufflevector <8 x i32> %1425, <8 x i32> undef, <8 x i32> zeroinitializer
  %1427 = bitcast [8 x <4 x i64>]* %9 to <8 x i32>*
  %1428 = load <8 x i32>, <8 x i32>* %1427, align 32
  %1429 = add <8 x i32> %1426, %1428
  %1430 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 1
  %1431 = bitcast <4 x i64>* %1430 to <8 x i32>*
  %1432 = load <8 x i32>, <8 x i32>* %1431, align 32
  %1433 = add <8 x i32> %1426, %1432
  %1434 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 2
  %1435 = bitcast <4 x i64>* %1434 to <8 x i32>*
  %1436 = load <8 x i32>, <8 x i32>* %1435, align 32
  %1437 = add <8 x i32> %1426, %1436
  %1438 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 3
  %1439 = bitcast <4 x i64>* %1438 to <8 x i32>*
  %1440 = load <8 x i32>, <8 x i32>* %1439, align 32
  %1441 = add <8 x i32> %1440, %1426
  %1442 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 4
  %1443 = bitcast <4 x i64>* %1442 to <8 x i32>*
  %1444 = load <8 x i32>, <8 x i32>* %1443, align 32
  %1445 = add <8 x i32> %1444, %1426
  %1446 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 5
  %1447 = bitcast <4 x i64>* %1446 to <8 x i32>*
  %1448 = load <8 x i32>, <8 x i32>* %1447, align 32
  %1449 = add <8 x i32> %1448, %1426
  %1450 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 6
  %1451 = bitcast <4 x i64>* %1450 to <8 x i32>*
  %1452 = load <8 x i32>, <8 x i32>* %1451, align 32
  %1453 = add <8 x i32> %1452, %1426
  %1454 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 7
  %1455 = bitcast <4 x i64>* %1454 to <8 x i32>*
  %1456 = load <8 x i32>, <8 x i32>* %1455, align 32
  %1457 = add <8 x i32> %1456, %1426
  %1458 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1429, i32 %1422) #7
  store <8 x i32> %1458, <8 x i32>* %1427, align 32
  %1459 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1433, i32 %1422) #7
  store <8 x i32> %1459, <8 x i32>* %1431, align 32
  %1460 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1437, i32 %1422) #7
  store <8 x i32> %1460, <8 x i32>* %1435, align 32
  %1461 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1441, i32 %1422) #7
  store <8 x i32> %1461, <8 x i32>* %1439, align 32
  %1462 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1445, i32 %1422) #7
  store <8 x i32> %1462, <8 x i32>* %1443, align 32
  %1463 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1449, i32 %1422) #7
  store <8 x i32> %1463, <8 x i32>* %1447, align 32
  %1464 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1453, i32 %1422) #7
  store <8 x i32> %1464, <8 x i32>* %1451, align 32
  %1465 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1457, i32 %1422) #7
  store <8 x i32> %1465, <8 x i32>* %1455, align 32
  %1466 = shufflevector <8 x i32> %1458, <8 x i32> %1459, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1467 = bitcast <8 x i32> %1466 to <4 x i64>
  %1468 = shufflevector <8 x i32> %1458, <8 x i32> %1459, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1469 = bitcast <8 x i32> %1468 to <4 x i64>
  %1470 = shufflevector <8 x i32> %1460, <8 x i32> %1461, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1471 = bitcast <8 x i32> %1470 to <4 x i64>
  %1472 = shufflevector <8 x i32> %1460, <8 x i32> %1461, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1473 = bitcast <8 x i32> %1472 to <4 x i64>
  %1474 = shufflevector <8 x i32> %1462, <8 x i32> %1463, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1475 = bitcast <8 x i32> %1474 to <4 x i64>
  %1476 = shufflevector <8 x i32> %1462, <8 x i32> %1463, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1477 = bitcast <8 x i32> %1476 to <4 x i64>
  %1478 = shufflevector <8 x i32> %1464, <8 x i32> %1465, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1479 = bitcast <8 x i32> %1478 to <4 x i64>
  %1480 = shufflevector <8 x i32> %1464, <8 x i32> %1465, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1481 = bitcast <8 x i32> %1480 to <4 x i64>
  %1482 = shufflevector <4 x i64> %1467, <4 x i64> %1471, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1483 = shufflevector <4 x i64> %1475, <4 x i64> %1479, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1484 = bitcast <4 x i64> %1482 to <8 x i32>
  %1485 = bitcast <4 x i64> %1483 to <8 x i32>
  %1486 = shufflevector <8 x i32> %1484, <8 x i32> %1485, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1486, <8 x i32>* %1352, align 32
  %1487 = shufflevector <8 x i32> %1484, <8 x i32> %1485, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1487, <8 x i32>* %1384, align 32
  %1488 = shufflevector <4 x i64> %1467, <4 x i64> %1471, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1489 = shufflevector <4 x i64> %1475, <4 x i64> %1479, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1490 = bitcast <4 x i64> %1488 to <8 x i32>
  %1491 = bitcast <4 x i64> %1489 to <8 x i32>
  %1492 = shufflevector <8 x i32> %1490, <8 x i32> %1491, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1492, <8 x i32>* %1360, align 32
  %1493 = shufflevector <8 x i32> %1490, <8 x i32> %1491, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1493, <8 x i32>* %1392, align 32
  %1494 = shufflevector <4 x i64> %1469, <4 x i64> %1473, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1495 = shufflevector <4 x i64> %1477, <4 x i64> %1481, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1496 = bitcast <4 x i64> %1494 to <8 x i32>
  %1497 = bitcast <4 x i64> %1495 to <8 x i32>
  %1498 = shufflevector <8 x i32> %1496, <8 x i32> %1497, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1498, <8 x i32>* %1368, align 32
  %1499 = shufflevector <8 x i32> %1496, <8 x i32> %1497, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1499, <8 x i32>* %1400, align 32
  %1500 = shufflevector <4 x i64> %1469, <4 x i64> %1473, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1501 = shufflevector <4 x i64> %1477, <4 x i64> %1481, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1502 = bitcast <4 x i64> %1500 to <8 x i32>
  %1503 = bitcast <4 x i64> %1501 to <8 x i32>
  %1504 = shufflevector <8 x i32> %1502, <8 x i32> %1503, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1504, <8 x i32>* %1376, align 32
  %1505 = shufflevector <8 x i32> %1502, <8 x i32> %1503, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1505, <8 x i32>* %1408, align 32
  %1506 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 1, i64 1), align 1
  call void @fadst8_avx2(<4 x i64>* nonnull %1307, <4 x i64>* nonnull %1417, i8 signext %1506, i32 1, i32 1)
  %1507 = load <8 x i32>, <8 x i32>* %1427, align 32
  %1508 = load <8 x i32>, <8 x i32>* %1431, align 32
  %1509 = shufflevector <8 x i32> %1507, <8 x i32> %1508, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1510 = bitcast <8 x i32> %1509 to <4 x i64>
  %1511 = shufflevector <8 x i32> %1507, <8 x i32> %1508, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1512 = bitcast <8 x i32> %1511 to <4 x i64>
  %1513 = load <8 x i32>, <8 x i32>* %1435, align 32
  %1514 = load <8 x i32>, <8 x i32>* %1439, align 32
  %1515 = shufflevector <8 x i32> %1513, <8 x i32> %1514, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1516 = bitcast <8 x i32> %1515 to <4 x i64>
  %1517 = shufflevector <8 x i32> %1513, <8 x i32> %1514, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1518 = bitcast <8 x i32> %1517 to <4 x i64>
  %1519 = load <8 x i32>, <8 x i32>* %1443, align 32
  %1520 = load <8 x i32>, <8 x i32>* %1447, align 32
  %1521 = shufflevector <8 x i32> %1519, <8 x i32> %1520, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1522 = bitcast <8 x i32> %1521 to <4 x i64>
  %1523 = shufflevector <8 x i32> %1519, <8 x i32> %1520, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1524 = bitcast <8 x i32> %1523 to <4 x i64>
  %1525 = load <8 x i32>, <8 x i32>* %1451, align 32
  %1526 = load <8 x i32>, <8 x i32>* %1455, align 32
  %1527 = shufflevector <8 x i32> %1525, <8 x i32> %1526, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1528 = bitcast <8 x i32> %1527 to <4 x i64>
  %1529 = shufflevector <8 x i32> %1525, <8 x i32> %1526, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1530 = bitcast <8 x i32> %1529 to <4 x i64>
  %1531 = shufflevector <4 x i64> %1510, <4 x i64> %1516, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1532 = shufflevector <4 x i64> %1522, <4 x i64> %1528, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1533 = bitcast <4 x i64> %1531 to <8 x i32>
  %1534 = bitcast <4 x i64> %1532 to <8 x i32>
  %1535 = shufflevector <8 x i32> %1533, <8 x i32> %1534, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1535, <8 x i32>* %1352, align 32
  %1536 = shufflevector <8 x i32> %1533, <8 x i32> %1534, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1536, <8 x i32>* %1384, align 32
  %1537 = shufflevector <4 x i64> %1510, <4 x i64> %1516, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1538 = shufflevector <4 x i64> %1522, <4 x i64> %1528, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1539 = bitcast <4 x i64> %1537 to <8 x i32>
  %1540 = bitcast <4 x i64> %1538 to <8 x i32>
  %1541 = shufflevector <8 x i32> %1539, <8 x i32> %1540, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1541, <8 x i32>* %1360, align 32
  %1542 = shufflevector <8 x i32> %1539, <8 x i32> %1540, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1542, <8 x i32>* %1392, align 32
  %1543 = shufflevector <4 x i64> %1512, <4 x i64> %1518, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1544 = shufflevector <4 x i64> %1524, <4 x i64> %1530, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1545 = bitcast <4 x i64> %1543 to <8 x i32>
  %1546 = bitcast <4 x i64> %1544 to <8 x i32>
  %1547 = shufflevector <8 x i32> %1545, <8 x i32> %1546, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1547, <8 x i32>* %1368, align 32
  %1548 = shufflevector <8 x i32> %1545, <8 x i32> %1546, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1548, <8 x i32>* %1400, align 32
  %1549 = shufflevector <4 x i64> %1512, <4 x i64> %1518, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1550 = shufflevector <4 x i64> %1524, <4 x i64> %1530, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1551 = bitcast <4 x i64> %1549 to <8 x i32>
  %1552 = bitcast <4 x i64> %1550 to <8 x i32>
  %1553 = shufflevector <8 x i32> %1551, <8 x i32> %1552, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1553, <8 x i32>* %1376, align 32
  %1554 = shufflevector <8 x i32> %1551, <8 x i32> %1552, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1554, <8 x i32>* %1408, align 32
  br label %3186

1555:                                             ; preds = %5
  %1556 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 0
  %1557 = load i8, i8* %11, align 1
  %1558 = sext i8 %1557 to i32
  %1559 = bitcast i16* %0 to <8 x i16>*
  %1560 = load <8 x i16>, <8 x i16>* %1559, align 16
  %1561 = sext i32 %2 to i64
  %1562 = getelementptr inbounds i16, i16* %0, i64 %1561
  %1563 = bitcast i16* %1562 to <8 x i16>*
  %1564 = load <8 x i16>, <8 x i16>* %1563, align 16
  %1565 = shl nsw i32 %2, 1
  %1566 = sext i32 %1565 to i64
  %1567 = getelementptr inbounds i16, i16* %0, i64 %1566
  %1568 = bitcast i16* %1567 to <8 x i16>*
  %1569 = load <8 x i16>, <8 x i16>* %1568, align 16
  %1570 = mul nsw i32 %2, 3
  %1571 = sext i32 %1570 to i64
  %1572 = getelementptr inbounds i16, i16* %0, i64 %1571
  %1573 = bitcast i16* %1572 to <8 x i16>*
  %1574 = load <8 x i16>, <8 x i16>* %1573, align 16
  %1575 = shl nsw i32 %2, 2
  %1576 = sext i32 %1575 to i64
  %1577 = getelementptr inbounds i16, i16* %0, i64 %1576
  %1578 = bitcast i16* %1577 to <8 x i16>*
  %1579 = load <8 x i16>, <8 x i16>* %1578, align 16
  %1580 = mul nsw i32 %2, 5
  %1581 = sext i32 %1580 to i64
  %1582 = getelementptr inbounds i16, i16* %0, i64 %1581
  %1583 = bitcast i16* %1582 to <8 x i16>*
  %1584 = load <8 x i16>, <8 x i16>* %1583, align 16
  %1585 = mul nsw i32 %2, 6
  %1586 = sext i32 %1585 to i64
  %1587 = getelementptr inbounds i16, i16* %0, i64 %1586
  %1588 = bitcast i16* %1587 to <8 x i16>*
  %1589 = load <8 x i16>, <8 x i16>* %1588, align 16
  %1590 = mul nsw i32 %2, 7
  %1591 = sext i32 %1590 to i64
  %1592 = getelementptr inbounds i16, i16* %0, i64 %1591
  %1593 = bitcast i16* %1592 to <8 x i16>*
  %1594 = load <8 x i16>, <8 x i16>* %1593, align 16
  %1595 = shufflevector <8 x i16> %1560, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %1596 = shufflevector <8 x i16> %1595, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %1597 = bitcast <8 x i16> %1596 to <4 x i32>
  %1598 = shufflevector <4 x i32> %1597, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %1599 = bitcast <4 x i32> %1598 to <8 x i16>
  %1600 = sext <8 x i16> %1599 to <8 x i32>
  %1601 = bitcast [8 x <4 x i64>]* %7 to <8 x i32>*
  %1602 = shufflevector <8 x i16> %1564, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %1603 = shufflevector <8 x i16> %1602, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %1604 = bitcast <8 x i16> %1603 to <4 x i32>
  %1605 = shufflevector <4 x i32> %1604, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %1606 = bitcast <4 x i32> %1605 to <8 x i16>
  %1607 = sext <8 x i16> %1606 to <8 x i32>
  %1608 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 1
  %1609 = bitcast <4 x i64>* %1608 to <8 x i32>*
  %1610 = shufflevector <8 x i16> %1569, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %1611 = shufflevector <8 x i16> %1610, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %1612 = bitcast <8 x i16> %1611 to <4 x i32>
  %1613 = shufflevector <4 x i32> %1612, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %1614 = bitcast <4 x i32> %1613 to <8 x i16>
  %1615 = sext <8 x i16> %1614 to <8 x i32>
  %1616 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 2
  %1617 = bitcast <4 x i64>* %1616 to <8 x i32>*
  %1618 = shufflevector <8 x i16> %1574, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %1619 = shufflevector <8 x i16> %1618, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %1620 = bitcast <8 x i16> %1619 to <4 x i32>
  %1621 = shufflevector <4 x i32> %1620, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %1622 = bitcast <4 x i32> %1621 to <8 x i16>
  %1623 = sext <8 x i16> %1622 to <8 x i32>
  %1624 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 3
  %1625 = bitcast <4 x i64>* %1624 to <8 x i32>*
  %1626 = shufflevector <8 x i16> %1579, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %1627 = shufflevector <8 x i16> %1626, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %1628 = bitcast <8 x i16> %1627 to <4 x i32>
  %1629 = shufflevector <4 x i32> %1628, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %1630 = bitcast <4 x i32> %1629 to <8 x i16>
  %1631 = sext <8 x i16> %1630 to <8 x i32>
  %1632 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 4
  %1633 = bitcast <4 x i64>* %1632 to <8 x i32>*
  %1634 = shufflevector <8 x i16> %1584, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %1635 = shufflevector <8 x i16> %1634, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %1636 = bitcast <8 x i16> %1635 to <4 x i32>
  %1637 = shufflevector <4 x i32> %1636, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %1638 = bitcast <4 x i32> %1637 to <8 x i16>
  %1639 = sext <8 x i16> %1638 to <8 x i32>
  %1640 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 5
  %1641 = bitcast <4 x i64>* %1640 to <8 x i32>*
  %1642 = shufflevector <8 x i16> %1589, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %1643 = shufflevector <8 x i16> %1642, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %1644 = bitcast <8 x i16> %1643 to <4 x i32>
  %1645 = shufflevector <4 x i32> %1644, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %1646 = bitcast <4 x i32> %1645 to <8 x i16>
  %1647 = sext <8 x i16> %1646 to <8 x i32>
  %1648 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 6
  %1649 = bitcast <4 x i64>* %1648 to <8 x i32>*
  %1650 = shufflevector <8 x i16> %1594, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %1651 = shufflevector <8 x i16> %1650, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %1652 = bitcast <8 x i16> %1651 to <4 x i32>
  %1653 = shufflevector <4 x i32> %1652, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %1654 = bitcast <4 x i32> %1653 to <8 x i16>
  %1655 = sext <8 x i16> %1654 to <8 x i32>
  %1656 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 7
  %1657 = bitcast <4 x i64>* %1656 to <8 x i32>*
  %1658 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1600, i32 %1558) #7
  store <8 x i32> %1658, <8 x i32>* %1601, align 32
  %1659 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1607, i32 %1558) #7
  store <8 x i32> %1659, <8 x i32>* %1609, align 32
  %1660 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1615, i32 %1558) #7
  store <8 x i32> %1660, <8 x i32>* %1617, align 32
  %1661 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1623, i32 %1558) #7
  store <8 x i32> %1661, <8 x i32>* %1625, align 32
  %1662 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1631, i32 %1558) #7
  store <8 x i32> %1662, <8 x i32>* %1633, align 32
  %1663 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1639, i32 %1558) #7
  store <8 x i32> %1663, <8 x i32>* %1641, align 32
  %1664 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1647, i32 %1558) #7
  store <8 x i32> %1664, <8 x i32>* %1649, align 32
  %1665 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1655, i32 %1558) #7
  store <8 x i32> %1665, <8 x i32>* %1657, align 32
  %1666 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 0
  %1667 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 1, i64 1), align 1
  call void @fadst8_avx2(<4 x i64>* nonnull %1556, <4 x i64>* nonnull %1666, i8 signext %1667, i32 1, i32 1)
  %1668 = getelementptr inbounds i8, i8* %11, i64 1
  %1669 = load i8, i8* %1668, align 1
  %1670 = sext i8 %1669 to i32
  %1671 = sub nsw i32 0, %1670
  %1672 = xor i32 %1670, -1
  %1673 = shl i32 1, %1672
  %1674 = insertelement <8 x i32> undef, i32 %1673, i32 0
  %1675 = shufflevector <8 x i32> %1674, <8 x i32> undef, <8 x i32> zeroinitializer
  %1676 = bitcast [8 x <4 x i64>]* %9 to <8 x i32>*
  %1677 = load <8 x i32>, <8 x i32>* %1676, align 32
  %1678 = add <8 x i32> %1675, %1677
  %1679 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 1
  %1680 = bitcast <4 x i64>* %1679 to <8 x i32>*
  %1681 = load <8 x i32>, <8 x i32>* %1680, align 32
  %1682 = add <8 x i32> %1675, %1681
  %1683 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 2
  %1684 = bitcast <4 x i64>* %1683 to <8 x i32>*
  %1685 = load <8 x i32>, <8 x i32>* %1684, align 32
  %1686 = add <8 x i32> %1675, %1685
  %1687 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 3
  %1688 = bitcast <4 x i64>* %1687 to <8 x i32>*
  %1689 = load <8 x i32>, <8 x i32>* %1688, align 32
  %1690 = add <8 x i32> %1689, %1675
  %1691 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 4
  %1692 = bitcast <4 x i64>* %1691 to <8 x i32>*
  %1693 = load <8 x i32>, <8 x i32>* %1692, align 32
  %1694 = add <8 x i32> %1693, %1675
  %1695 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 5
  %1696 = bitcast <4 x i64>* %1695 to <8 x i32>*
  %1697 = load <8 x i32>, <8 x i32>* %1696, align 32
  %1698 = add <8 x i32> %1697, %1675
  %1699 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 6
  %1700 = bitcast <4 x i64>* %1699 to <8 x i32>*
  %1701 = load <8 x i32>, <8 x i32>* %1700, align 32
  %1702 = add <8 x i32> %1701, %1675
  %1703 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 7
  %1704 = bitcast <4 x i64>* %1703 to <8 x i32>*
  %1705 = load <8 x i32>, <8 x i32>* %1704, align 32
  %1706 = add <8 x i32> %1705, %1675
  %1707 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1678, i32 %1671) #7
  store <8 x i32> %1707, <8 x i32>* %1676, align 32
  %1708 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1682, i32 %1671) #7
  store <8 x i32> %1708, <8 x i32>* %1680, align 32
  %1709 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1686, i32 %1671) #7
  store <8 x i32> %1709, <8 x i32>* %1684, align 32
  %1710 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1690, i32 %1671) #7
  store <8 x i32> %1710, <8 x i32>* %1688, align 32
  %1711 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1694, i32 %1671) #7
  store <8 x i32> %1711, <8 x i32>* %1692, align 32
  %1712 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1698, i32 %1671) #7
  store <8 x i32> %1712, <8 x i32>* %1696, align 32
  %1713 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1702, i32 %1671) #7
  store <8 x i32> %1713, <8 x i32>* %1700, align 32
  %1714 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1706, i32 %1671) #7
  store <8 x i32> %1714, <8 x i32>* %1704, align 32
  %1715 = shufflevector <8 x i32> %1707, <8 x i32> %1708, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1716 = bitcast <8 x i32> %1715 to <4 x i64>
  %1717 = shufflevector <8 x i32> %1707, <8 x i32> %1708, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1718 = bitcast <8 x i32> %1717 to <4 x i64>
  %1719 = shufflevector <8 x i32> %1709, <8 x i32> %1710, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1720 = bitcast <8 x i32> %1719 to <4 x i64>
  %1721 = shufflevector <8 x i32> %1709, <8 x i32> %1710, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1722 = bitcast <8 x i32> %1721 to <4 x i64>
  %1723 = shufflevector <8 x i32> %1711, <8 x i32> %1712, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1724 = bitcast <8 x i32> %1723 to <4 x i64>
  %1725 = shufflevector <8 x i32> %1711, <8 x i32> %1712, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1726 = bitcast <8 x i32> %1725 to <4 x i64>
  %1727 = shufflevector <8 x i32> %1713, <8 x i32> %1714, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1728 = bitcast <8 x i32> %1727 to <4 x i64>
  %1729 = shufflevector <8 x i32> %1713, <8 x i32> %1714, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1730 = bitcast <8 x i32> %1729 to <4 x i64>
  %1731 = shufflevector <4 x i64> %1716, <4 x i64> %1720, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1732 = shufflevector <4 x i64> %1724, <4 x i64> %1728, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1733 = bitcast <4 x i64> %1731 to <8 x i32>
  %1734 = bitcast <4 x i64> %1732 to <8 x i32>
  %1735 = shufflevector <8 x i32> %1733, <8 x i32> %1734, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1735, <8 x i32>* %1601, align 32
  %1736 = shufflevector <8 x i32> %1733, <8 x i32> %1734, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1736, <8 x i32>* %1633, align 32
  %1737 = shufflevector <4 x i64> %1716, <4 x i64> %1720, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1738 = shufflevector <4 x i64> %1724, <4 x i64> %1728, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1739 = bitcast <4 x i64> %1737 to <8 x i32>
  %1740 = bitcast <4 x i64> %1738 to <8 x i32>
  %1741 = shufflevector <8 x i32> %1739, <8 x i32> %1740, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1741, <8 x i32>* %1609, align 32
  %1742 = shufflevector <8 x i32> %1739, <8 x i32> %1740, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1742, <8 x i32>* %1641, align 32
  %1743 = shufflevector <4 x i64> %1718, <4 x i64> %1722, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1744 = shufflevector <4 x i64> %1726, <4 x i64> %1730, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1745 = bitcast <4 x i64> %1743 to <8 x i32>
  %1746 = bitcast <4 x i64> %1744 to <8 x i32>
  %1747 = shufflevector <8 x i32> %1745, <8 x i32> %1746, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1747, <8 x i32>* %1617, align 32
  %1748 = shufflevector <8 x i32> %1745, <8 x i32> %1746, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1748, <8 x i32>* %1649, align 32
  %1749 = shufflevector <4 x i64> %1718, <4 x i64> %1722, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1750 = shufflevector <4 x i64> %1726, <4 x i64> %1730, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1751 = bitcast <4 x i64> %1749 to <8 x i32>
  %1752 = bitcast <4 x i64> %1750 to <8 x i32>
  %1753 = shufflevector <8 x i32> %1751, <8 x i32> %1752, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1753, <8 x i32>* %1625, align 32
  %1754 = shufflevector <8 x i32> %1751, <8 x i32> %1752, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1754, <8 x i32>* %1657, align 32
  %1755 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 1, i64 1), align 1
  call void @fadst8_avx2(<4 x i64>* nonnull %1556, <4 x i64>* nonnull %1666, i8 signext %1755, i32 1, i32 1)
  %1756 = load <8 x i32>, <8 x i32>* %1676, align 32
  %1757 = load <8 x i32>, <8 x i32>* %1680, align 32
  %1758 = shufflevector <8 x i32> %1756, <8 x i32> %1757, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1759 = bitcast <8 x i32> %1758 to <4 x i64>
  %1760 = shufflevector <8 x i32> %1756, <8 x i32> %1757, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1761 = bitcast <8 x i32> %1760 to <4 x i64>
  %1762 = load <8 x i32>, <8 x i32>* %1684, align 32
  %1763 = load <8 x i32>, <8 x i32>* %1688, align 32
  %1764 = shufflevector <8 x i32> %1762, <8 x i32> %1763, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1765 = bitcast <8 x i32> %1764 to <4 x i64>
  %1766 = shufflevector <8 x i32> %1762, <8 x i32> %1763, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1767 = bitcast <8 x i32> %1766 to <4 x i64>
  %1768 = load <8 x i32>, <8 x i32>* %1692, align 32
  %1769 = load <8 x i32>, <8 x i32>* %1696, align 32
  %1770 = shufflevector <8 x i32> %1768, <8 x i32> %1769, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1771 = bitcast <8 x i32> %1770 to <4 x i64>
  %1772 = shufflevector <8 x i32> %1768, <8 x i32> %1769, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1773 = bitcast <8 x i32> %1772 to <4 x i64>
  %1774 = load <8 x i32>, <8 x i32>* %1700, align 32
  %1775 = load <8 x i32>, <8 x i32>* %1704, align 32
  %1776 = shufflevector <8 x i32> %1774, <8 x i32> %1775, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1777 = bitcast <8 x i32> %1776 to <4 x i64>
  %1778 = shufflevector <8 x i32> %1774, <8 x i32> %1775, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1779 = bitcast <8 x i32> %1778 to <4 x i64>
  %1780 = shufflevector <4 x i64> %1759, <4 x i64> %1765, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1781 = shufflevector <4 x i64> %1771, <4 x i64> %1777, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1782 = bitcast <4 x i64> %1780 to <8 x i32>
  %1783 = bitcast <4 x i64> %1781 to <8 x i32>
  %1784 = shufflevector <8 x i32> %1782, <8 x i32> %1783, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1784, <8 x i32>* %1601, align 32
  %1785 = shufflevector <8 x i32> %1782, <8 x i32> %1783, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1785, <8 x i32>* %1633, align 32
  %1786 = shufflevector <4 x i64> %1759, <4 x i64> %1765, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1787 = shufflevector <4 x i64> %1771, <4 x i64> %1777, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1788 = bitcast <4 x i64> %1786 to <8 x i32>
  %1789 = bitcast <4 x i64> %1787 to <8 x i32>
  %1790 = shufflevector <8 x i32> %1788, <8 x i32> %1789, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1790, <8 x i32>* %1609, align 32
  %1791 = shufflevector <8 x i32> %1788, <8 x i32> %1789, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1791, <8 x i32>* %1641, align 32
  %1792 = shufflevector <4 x i64> %1761, <4 x i64> %1767, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1793 = shufflevector <4 x i64> %1773, <4 x i64> %1779, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1794 = bitcast <4 x i64> %1792 to <8 x i32>
  %1795 = bitcast <4 x i64> %1793 to <8 x i32>
  %1796 = shufflevector <8 x i32> %1794, <8 x i32> %1795, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1796, <8 x i32>* %1617, align 32
  %1797 = shufflevector <8 x i32> %1794, <8 x i32> %1795, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1797, <8 x i32>* %1649, align 32
  %1798 = shufflevector <4 x i64> %1761, <4 x i64> %1767, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1799 = shufflevector <4 x i64> %1773, <4 x i64> %1779, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1800 = bitcast <4 x i64> %1798 to <8 x i32>
  %1801 = bitcast <4 x i64> %1799 to <8 x i32>
  %1802 = shufflevector <8 x i32> %1800, <8 x i32> %1801, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1802, <8 x i32>* %1625, align 32
  %1803 = shufflevector <8 x i32> %1800, <8 x i32> %1801, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1803, <8 x i32>* %1657, align 32
  br label %3186

1804:                                             ; preds = %5
  %1805 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 0
  %1806 = load i8, i8* %11, align 1
  %1807 = sext i8 %1806 to i32
  %1808 = bitcast i16* %0 to <8 x i16>*
  %1809 = load <8 x i16>, <8 x i16>* %1808, align 16
  %1810 = sext i32 %2 to i64
  %1811 = getelementptr inbounds i16, i16* %0, i64 %1810
  %1812 = bitcast i16* %1811 to <8 x i16>*
  %1813 = load <8 x i16>, <8 x i16>* %1812, align 16
  %1814 = shl nsw i32 %2, 1
  %1815 = sext i32 %1814 to i64
  %1816 = getelementptr inbounds i16, i16* %0, i64 %1815
  %1817 = bitcast i16* %1816 to <8 x i16>*
  %1818 = load <8 x i16>, <8 x i16>* %1817, align 16
  %1819 = mul nsw i32 %2, 3
  %1820 = sext i32 %1819 to i64
  %1821 = getelementptr inbounds i16, i16* %0, i64 %1820
  %1822 = bitcast i16* %1821 to <8 x i16>*
  %1823 = load <8 x i16>, <8 x i16>* %1822, align 16
  %1824 = shl nsw i32 %2, 2
  %1825 = sext i32 %1824 to i64
  %1826 = getelementptr inbounds i16, i16* %0, i64 %1825
  %1827 = bitcast i16* %1826 to <8 x i16>*
  %1828 = load <8 x i16>, <8 x i16>* %1827, align 16
  %1829 = mul nsw i32 %2, 5
  %1830 = sext i32 %1829 to i64
  %1831 = getelementptr inbounds i16, i16* %0, i64 %1830
  %1832 = bitcast i16* %1831 to <8 x i16>*
  %1833 = load <8 x i16>, <8 x i16>* %1832, align 16
  %1834 = mul nsw i32 %2, 6
  %1835 = sext i32 %1834 to i64
  %1836 = getelementptr inbounds i16, i16* %0, i64 %1835
  %1837 = bitcast i16* %1836 to <8 x i16>*
  %1838 = load <8 x i16>, <8 x i16>* %1837, align 16
  %1839 = mul nsw i32 %2, 7
  %1840 = sext i32 %1839 to i64
  %1841 = getelementptr inbounds i16, i16* %0, i64 %1840
  %1842 = bitcast i16* %1841 to <8 x i16>*
  %1843 = load <8 x i16>, <8 x i16>* %1842, align 16
  %1844 = sext <8 x i16> %1843 to <8 x i32>
  %1845 = bitcast [8 x <4 x i64>]* %7 to <8 x i32>*
  %1846 = sext <8 x i16> %1838 to <8 x i32>
  %1847 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 1
  %1848 = bitcast <4 x i64>* %1847 to <8 x i32>*
  %1849 = sext <8 x i16> %1833 to <8 x i32>
  %1850 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 2
  %1851 = bitcast <4 x i64>* %1850 to <8 x i32>*
  %1852 = sext <8 x i16> %1828 to <8 x i32>
  %1853 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 3
  %1854 = bitcast <4 x i64>* %1853 to <8 x i32>*
  %1855 = sext <8 x i16> %1823 to <8 x i32>
  %1856 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 4
  %1857 = bitcast <4 x i64>* %1856 to <8 x i32>*
  %1858 = sext <8 x i16> %1818 to <8 x i32>
  %1859 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 5
  %1860 = bitcast <4 x i64>* %1859 to <8 x i32>*
  %1861 = sext <8 x i16> %1813 to <8 x i32>
  %1862 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 6
  %1863 = bitcast <4 x i64>* %1862 to <8 x i32>*
  %1864 = sext <8 x i16> %1809 to <8 x i32>
  %1865 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 7
  %1866 = bitcast <4 x i64>* %1865 to <8 x i32>*
  %1867 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1844, i32 %1807) #7
  store <8 x i32> %1867, <8 x i32>* %1845, align 32
  %1868 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1846, i32 %1807) #7
  store <8 x i32> %1868, <8 x i32>* %1848, align 32
  %1869 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1849, i32 %1807) #7
  store <8 x i32> %1869, <8 x i32>* %1851, align 32
  %1870 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1852, i32 %1807) #7
  store <8 x i32> %1870, <8 x i32>* %1854, align 32
  %1871 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1855, i32 %1807) #7
  store <8 x i32> %1871, <8 x i32>* %1857, align 32
  %1872 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1858, i32 %1807) #7
  store <8 x i32> %1872, <8 x i32>* %1860, align 32
  %1873 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1861, i32 %1807) #7
  store <8 x i32> %1873, <8 x i32>* %1863, align 32
  %1874 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1864, i32 %1807) #7
  store <8 x i32> %1874, <8 x i32>* %1866, align 32
  %1875 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 0
  %1876 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 1, i64 1), align 1
  call void @fadst8_avx2(<4 x i64>* nonnull %1805, <4 x i64>* nonnull %1875, i8 signext %1876, i32 1, i32 1)
  %1877 = getelementptr inbounds i8, i8* %11, i64 1
  %1878 = load i8, i8* %1877, align 1
  %1879 = sext i8 %1878 to i32
  %1880 = sub nsw i32 0, %1879
  %1881 = xor i32 %1879, -1
  %1882 = shl i32 1, %1881
  %1883 = insertelement <8 x i32> undef, i32 %1882, i32 0
  %1884 = shufflevector <8 x i32> %1883, <8 x i32> undef, <8 x i32> zeroinitializer
  %1885 = bitcast [8 x <4 x i64>]* %9 to <8 x i32>*
  %1886 = load <8 x i32>, <8 x i32>* %1885, align 32
  %1887 = add <8 x i32> %1884, %1886
  %1888 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 1
  %1889 = bitcast <4 x i64>* %1888 to <8 x i32>*
  %1890 = load <8 x i32>, <8 x i32>* %1889, align 32
  %1891 = add <8 x i32> %1884, %1890
  %1892 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 2
  %1893 = bitcast <4 x i64>* %1892 to <8 x i32>*
  %1894 = load <8 x i32>, <8 x i32>* %1893, align 32
  %1895 = add <8 x i32> %1884, %1894
  %1896 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 3
  %1897 = bitcast <4 x i64>* %1896 to <8 x i32>*
  %1898 = load <8 x i32>, <8 x i32>* %1897, align 32
  %1899 = add <8 x i32> %1898, %1884
  %1900 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 4
  %1901 = bitcast <4 x i64>* %1900 to <8 x i32>*
  %1902 = load <8 x i32>, <8 x i32>* %1901, align 32
  %1903 = add <8 x i32> %1902, %1884
  %1904 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 5
  %1905 = bitcast <4 x i64>* %1904 to <8 x i32>*
  %1906 = load <8 x i32>, <8 x i32>* %1905, align 32
  %1907 = add <8 x i32> %1906, %1884
  %1908 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 6
  %1909 = bitcast <4 x i64>* %1908 to <8 x i32>*
  %1910 = load <8 x i32>, <8 x i32>* %1909, align 32
  %1911 = add <8 x i32> %1910, %1884
  %1912 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 7
  %1913 = bitcast <4 x i64>* %1912 to <8 x i32>*
  %1914 = load <8 x i32>, <8 x i32>* %1913, align 32
  %1915 = add <8 x i32> %1914, %1884
  %1916 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1887, i32 %1880) #7
  store <8 x i32> %1916, <8 x i32>* %1885, align 32
  %1917 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1891, i32 %1880) #7
  store <8 x i32> %1917, <8 x i32>* %1889, align 32
  %1918 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1895, i32 %1880) #7
  store <8 x i32> %1918, <8 x i32>* %1893, align 32
  %1919 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1899, i32 %1880) #7
  store <8 x i32> %1919, <8 x i32>* %1897, align 32
  %1920 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1903, i32 %1880) #7
  store <8 x i32> %1920, <8 x i32>* %1901, align 32
  %1921 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1907, i32 %1880) #7
  store <8 x i32> %1921, <8 x i32>* %1905, align 32
  %1922 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1911, i32 %1880) #7
  store <8 x i32> %1922, <8 x i32>* %1909, align 32
  %1923 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1915, i32 %1880) #7
  store <8 x i32> %1923, <8 x i32>* %1913, align 32
  %1924 = shufflevector <8 x i32> %1916, <8 x i32> %1917, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1925 = bitcast <8 x i32> %1924 to <4 x i64>
  %1926 = shufflevector <8 x i32> %1916, <8 x i32> %1917, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1927 = bitcast <8 x i32> %1926 to <4 x i64>
  %1928 = shufflevector <8 x i32> %1918, <8 x i32> %1919, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1929 = bitcast <8 x i32> %1928 to <4 x i64>
  %1930 = shufflevector <8 x i32> %1918, <8 x i32> %1919, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1931 = bitcast <8 x i32> %1930 to <4 x i64>
  %1932 = shufflevector <8 x i32> %1920, <8 x i32> %1921, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1933 = bitcast <8 x i32> %1932 to <4 x i64>
  %1934 = shufflevector <8 x i32> %1920, <8 x i32> %1921, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1935 = bitcast <8 x i32> %1934 to <4 x i64>
  %1936 = shufflevector <8 x i32> %1922, <8 x i32> %1923, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1937 = bitcast <8 x i32> %1936 to <4 x i64>
  %1938 = shufflevector <8 x i32> %1922, <8 x i32> %1923, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1939 = bitcast <8 x i32> %1938 to <4 x i64>
  %1940 = shufflevector <4 x i64> %1925, <4 x i64> %1929, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1941 = shufflevector <4 x i64> %1933, <4 x i64> %1937, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1942 = bitcast <4 x i64> %1940 to <8 x i32>
  %1943 = bitcast <4 x i64> %1941 to <8 x i32>
  %1944 = shufflevector <8 x i32> %1942, <8 x i32> %1943, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1944, <8 x i32>* %1845, align 32
  %1945 = shufflevector <8 x i32> %1942, <8 x i32> %1943, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1945, <8 x i32>* %1857, align 32
  %1946 = shufflevector <4 x i64> %1925, <4 x i64> %1929, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1947 = shufflevector <4 x i64> %1933, <4 x i64> %1937, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1948 = bitcast <4 x i64> %1946 to <8 x i32>
  %1949 = bitcast <4 x i64> %1947 to <8 x i32>
  %1950 = shufflevector <8 x i32> %1948, <8 x i32> %1949, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1950, <8 x i32>* %1848, align 32
  %1951 = shufflevector <8 x i32> %1948, <8 x i32> %1949, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1951, <8 x i32>* %1860, align 32
  %1952 = shufflevector <4 x i64> %1927, <4 x i64> %1931, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1953 = shufflevector <4 x i64> %1935, <4 x i64> %1939, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1954 = bitcast <4 x i64> %1952 to <8 x i32>
  %1955 = bitcast <4 x i64> %1953 to <8 x i32>
  %1956 = shufflevector <8 x i32> %1954, <8 x i32> %1955, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1956, <8 x i32>* %1851, align 32
  %1957 = shufflevector <8 x i32> %1954, <8 x i32> %1955, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1957, <8 x i32>* %1863, align 32
  %1958 = shufflevector <4 x i64> %1927, <4 x i64> %1931, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1959 = shufflevector <4 x i64> %1935, <4 x i64> %1939, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1960 = bitcast <4 x i64> %1958 to <8 x i32>
  %1961 = bitcast <4 x i64> %1959 to <8 x i32>
  %1962 = shufflevector <8 x i32> %1960, <8 x i32> %1961, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1962, <8 x i32>* %1854, align 32
  %1963 = shufflevector <8 x i32> %1960, <8 x i32> %1961, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1963, <8 x i32>* %1866, align 32
  %1964 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 1, i64 1), align 1
  call void @fadst8_avx2(<4 x i64>* nonnull %1805, <4 x i64>* nonnull %1875, i8 signext %1964, i32 1, i32 1)
  %1965 = load <8 x i32>, <8 x i32>* %1885, align 32
  %1966 = load <8 x i32>, <8 x i32>* %1889, align 32
  %1967 = shufflevector <8 x i32> %1965, <8 x i32> %1966, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1968 = bitcast <8 x i32> %1967 to <4 x i64>
  %1969 = shufflevector <8 x i32> %1965, <8 x i32> %1966, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1970 = bitcast <8 x i32> %1969 to <4 x i64>
  %1971 = load <8 x i32>, <8 x i32>* %1893, align 32
  %1972 = load <8 x i32>, <8 x i32>* %1897, align 32
  %1973 = shufflevector <8 x i32> %1971, <8 x i32> %1972, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1974 = bitcast <8 x i32> %1973 to <4 x i64>
  %1975 = shufflevector <8 x i32> %1971, <8 x i32> %1972, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1976 = bitcast <8 x i32> %1975 to <4 x i64>
  %1977 = load <8 x i32>, <8 x i32>* %1901, align 32
  %1978 = load <8 x i32>, <8 x i32>* %1905, align 32
  %1979 = shufflevector <8 x i32> %1977, <8 x i32> %1978, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1980 = bitcast <8 x i32> %1979 to <4 x i64>
  %1981 = shufflevector <8 x i32> %1977, <8 x i32> %1978, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1982 = bitcast <8 x i32> %1981 to <4 x i64>
  %1983 = load <8 x i32>, <8 x i32>* %1909, align 32
  %1984 = load <8 x i32>, <8 x i32>* %1913, align 32
  %1985 = shufflevector <8 x i32> %1983, <8 x i32> %1984, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1986 = bitcast <8 x i32> %1985 to <4 x i64>
  %1987 = shufflevector <8 x i32> %1983, <8 x i32> %1984, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1988 = bitcast <8 x i32> %1987 to <4 x i64>
  %1989 = shufflevector <4 x i64> %1968, <4 x i64> %1974, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1990 = shufflevector <4 x i64> %1980, <4 x i64> %1986, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1991 = bitcast <4 x i64> %1989 to <8 x i32>
  %1992 = bitcast <4 x i64> %1990 to <8 x i32>
  %1993 = shufflevector <8 x i32> %1991, <8 x i32> %1992, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1993, <8 x i32>* %1845, align 32
  %1994 = shufflevector <8 x i32> %1991, <8 x i32> %1992, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1994, <8 x i32>* %1857, align 32
  %1995 = shufflevector <4 x i64> %1968, <4 x i64> %1974, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1996 = shufflevector <4 x i64> %1980, <4 x i64> %1986, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1997 = bitcast <4 x i64> %1995 to <8 x i32>
  %1998 = bitcast <4 x i64> %1996 to <8 x i32>
  %1999 = shufflevector <8 x i32> %1997, <8 x i32> %1998, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1999, <8 x i32>* %1848, align 32
  %2000 = shufflevector <8 x i32> %1997, <8 x i32> %1998, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2000, <8 x i32>* %1860, align 32
  %2001 = shufflevector <4 x i64> %1970, <4 x i64> %1976, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2002 = shufflevector <4 x i64> %1982, <4 x i64> %1988, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2003 = bitcast <4 x i64> %2001 to <8 x i32>
  %2004 = bitcast <4 x i64> %2002 to <8 x i32>
  %2005 = shufflevector <8 x i32> %2003, <8 x i32> %2004, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2005, <8 x i32>* %1851, align 32
  %2006 = shufflevector <8 x i32> %2003, <8 x i32> %2004, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2006, <8 x i32>* %1863, align 32
  %2007 = shufflevector <4 x i64> %1970, <4 x i64> %1976, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2008 = shufflevector <4 x i64> %1982, <4 x i64> %1988, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2009 = bitcast <4 x i64> %2007 to <8 x i32>
  %2010 = bitcast <4 x i64> %2008 to <8 x i32>
  %2011 = shufflevector <8 x i32> %2009, <8 x i32> %2010, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2011, <8 x i32>* %1854, align 32
  %2012 = shufflevector <8 x i32> %2009, <8 x i32> %2010, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2012, <8 x i32>* %1866, align 32
  br label %3186

2013:                                             ; preds = %5
  %2014 = load i8, i8* %11, align 1
  %2015 = sext i8 %2014 to i32
  %2016 = bitcast i16* %0 to <8 x i16>*
  %2017 = load <8 x i16>, <8 x i16>* %2016, align 16
  %2018 = sext i32 %2 to i64
  %2019 = getelementptr inbounds i16, i16* %0, i64 %2018
  %2020 = bitcast i16* %2019 to <8 x i16>*
  %2021 = load <8 x i16>, <8 x i16>* %2020, align 16
  %2022 = shl nsw i32 %2, 1
  %2023 = sext i32 %2022 to i64
  %2024 = getelementptr inbounds i16, i16* %0, i64 %2023
  %2025 = bitcast i16* %2024 to <8 x i16>*
  %2026 = load <8 x i16>, <8 x i16>* %2025, align 16
  %2027 = mul nsw i32 %2, 3
  %2028 = sext i32 %2027 to i64
  %2029 = getelementptr inbounds i16, i16* %0, i64 %2028
  %2030 = bitcast i16* %2029 to <8 x i16>*
  %2031 = load <8 x i16>, <8 x i16>* %2030, align 16
  %2032 = shl nsw i32 %2, 2
  %2033 = sext i32 %2032 to i64
  %2034 = getelementptr inbounds i16, i16* %0, i64 %2033
  %2035 = bitcast i16* %2034 to <8 x i16>*
  %2036 = load <8 x i16>, <8 x i16>* %2035, align 16
  %2037 = mul nsw i32 %2, 5
  %2038 = sext i32 %2037 to i64
  %2039 = getelementptr inbounds i16, i16* %0, i64 %2038
  %2040 = bitcast i16* %2039 to <8 x i16>*
  %2041 = load <8 x i16>, <8 x i16>* %2040, align 16
  %2042 = mul nsw i32 %2, 6
  %2043 = sext i32 %2042 to i64
  %2044 = getelementptr inbounds i16, i16* %0, i64 %2043
  %2045 = bitcast i16* %2044 to <8 x i16>*
  %2046 = load <8 x i16>, <8 x i16>* %2045, align 16
  %2047 = mul nsw i32 %2, 7
  %2048 = sext i32 %2047 to i64
  %2049 = getelementptr inbounds i16, i16* %0, i64 %2048
  %2050 = bitcast i16* %2049 to <8 x i16>*
  %2051 = load <8 x i16>, <8 x i16>* %2050, align 16
  %2052 = sext <8 x i16> %2017 to <8 x i32>
  %2053 = bitcast [8 x <4 x i64>]* %7 to <8 x i32>*
  %2054 = sext <8 x i16> %2021 to <8 x i32>
  %2055 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 1
  %2056 = bitcast <4 x i64>* %2055 to <8 x i32>*
  %2057 = sext <8 x i16> %2026 to <8 x i32>
  %2058 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 2
  %2059 = bitcast <4 x i64>* %2058 to <8 x i32>*
  %2060 = sext <8 x i16> %2031 to <8 x i32>
  %2061 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 3
  %2062 = bitcast <4 x i64>* %2061 to <8 x i32>*
  %2063 = sext <8 x i16> %2036 to <8 x i32>
  %2064 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 4
  %2065 = bitcast <4 x i64>* %2064 to <8 x i32>*
  %2066 = sext <8 x i16> %2041 to <8 x i32>
  %2067 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 5
  %2068 = bitcast <4 x i64>* %2067 to <8 x i32>*
  %2069 = sext <8 x i16> %2046 to <8 x i32>
  %2070 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 6
  %2071 = bitcast <4 x i64>* %2070 to <8 x i32>*
  %2072 = sext <8 x i16> %2051 to <8 x i32>
  %2073 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 7
  %2074 = bitcast <4 x i64>* %2073 to <8 x i32>*
  %2075 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2052, i32 %2015) #7
  store <8 x i32> %2075, <8 x i32>* %2053, align 32
  %2076 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2054, i32 %2015) #7
  store <8 x i32> %2076, <8 x i32>* %2056, align 32
  %2077 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2057, i32 %2015) #7
  store <8 x i32> %2077, <8 x i32>* %2059, align 32
  %2078 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2060, i32 %2015) #7
  store <8 x i32> %2078, <8 x i32>* %2062, align 32
  %2079 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2063, i32 %2015) #7
  store <8 x i32> %2079, <8 x i32>* %2065, align 32
  %2080 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2066, i32 %2015) #7
  store <8 x i32> %2080, <8 x i32>* %2068, align 32
  %2081 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2069, i32 %2015) #7
  store <8 x i32> %2081, <8 x i32>* %2071, align 32
  %2082 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2072, i32 %2015) #7
  store <8 x i32> %2082, <8 x i32>* %2074, align 32
  %2083 = shl <8 x i32> %2075, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2084 = bitcast [8 x <4 x i64>]* %9 to <8 x i32>*
  store <8 x i32> %2083, <8 x i32>* %2084, align 32
  %2085 = shl <8 x i32> %2076, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2086 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 1
  %2087 = bitcast <4 x i64>* %2086 to <8 x i32>*
  store <8 x i32> %2085, <8 x i32>* %2087, align 32
  %2088 = shl <8 x i32> %2077, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2089 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 2
  %2090 = bitcast <4 x i64>* %2089 to <8 x i32>*
  store <8 x i32> %2088, <8 x i32>* %2090, align 32
  %2091 = shl <8 x i32> %2078, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2092 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 3
  %2093 = bitcast <4 x i64>* %2092 to <8 x i32>*
  store <8 x i32> %2091, <8 x i32>* %2093, align 32
  %2094 = shl <8 x i32> %2079, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2095 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 4
  %2096 = bitcast <4 x i64>* %2095 to <8 x i32>*
  store <8 x i32> %2094, <8 x i32>* %2096, align 32
  %2097 = shl <8 x i32> %2080, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2098 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 5
  %2099 = bitcast <4 x i64>* %2098 to <8 x i32>*
  store <8 x i32> %2097, <8 x i32>* %2099, align 32
  %2100 = shl <8 x i32> %2081, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2101 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 6
  %2102 = bitcast <4 x i64>* %2101 to <8 x i32>*
  store <8 x i32> %2100, <8 x i32>* %2102, align 32
  %2103 = shl <8 x i32> %2082, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2104 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 7
  %2105 = bitcast <4 x i64>* %2104 to <8 x i32>*
  store <8 x i32> %2103, <8 x i32>* %2105, align 32
  %2106 = getelementptr inbounds i8, i8* %11, i64 1
  %2107 = load i8, i8* %2106, align 1
  %2108 = sext i8 %2107 to i32
  %2109 = sub nsw i32 0, %2108
  %2110 = xor i32 %2108, -1
  %2111 = shl i32 1, %2110
  %2112 = insertelement <8 x i32> undef, i32 %2111, i32 0
  %2113 = shufflevector <8 x i32> %2112, <8 x i32> undef, <8 x i32> zeroinitializer
  %2114 = add <8 x i32> %2113, %2083
  %2115 = add <8 x i32> %2113, %2085
  %2116 = add <8 x i32> %2113, %2088
  %2117 = add <8 x i32> %2113, %2091
  %2118 = add <8 x i32> %2113, %2094
  %2119 = add <8 x i32> %2113, %2097
  %2120 = add <8 x i32> %2113, %2100
  %2121 = add <8 x i32> %2113, %2103
  %2122 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2114, i32 %2109) #7
  store <8 x i32> %2122, <8 x i32>* %2084, align 32
  %2123 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2115, i32 %2109) #7
  store <8 x i32> %2123, <8 x i32>* %2087, align 32
  %2124 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2116, i32 %2109) #7
  store <8 x i32> %2124, <8 x i32>* %2090, align 32
  %2125 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2117, i32 %2109) #7
  store <8 x i32> %2125, <8 x i32>* %2093, align 32
  %2126 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2118, i32 %2109) #7
  store <8 x i32> %2126, <8 x i32>* %2096, align 32
  %2127 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2119, i32 %2109) #7
  store <8 x i32> %2127, <8 x i32>* %2099, align 32
  %2128 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2120, i32 %2109) #7
  store <8 x i32> %2128, <8 x i32>* %2102, align 32
  %2129 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2121, i32 %2109) #7
  store <8 x i32> %2129, <8 x i32>* %2105, align 32
  %2130 = shl <8 x i32> %2122, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  store <8 x i32> %2130, <8 x i32>* %2053, align 32
  %2131 = shl <8 x i32> %2123, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  store <8 x i32> %2131, <8 x i32>* %2056, align 32
  %2132 = shl <8 x i32> %2124, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  store <8 x i32> %2132, <8 x i32>* %2059, align 32
  %2133 = shl <8 x i32> %2125, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  store <8 x i32> %2133, <8 x i32>* %2062, align 32
  %2134 = shl <8 x i32> %2126, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  store <8 x i32> %2134, <8 x i32>* %2065, align 32
  %2135 = shl <8 x i32> %2127, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  store <8 x i32> %2135, <8 x i32>* %2068, align 32
  %2136 = shl <8 x i32> %2128, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  store <8 x i32> %2136, <8 x i32>* %2071, align 32
  %2137 = shl <8 x i32> %2129, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  store <8 x i32> %2137, <8 x i32>* %2074, align 32
  br label %3186

2138:                                             ; preds = %5
  %2139 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 0
  %2140 = load i8, i8* %11, align 1
  %2141 = sext i8 %2140 to i32
  %2142 = bitcast i16* %0 to <8 x i16>*
  %2143 = load <8 x i16>, <8 x i16>* %2142, align 16
  %2144 = sext i32 %2 to i64
  %2145 = getelementptr inbounds i16, i16* %0, i64 %2144
  %2146 = bitcast i16* %2145 to <8 x i16>*
  %2147 = load <8 x i16>, <8 x i16>* %2146, align 16
  %2148 = shl nsw i32 %2, 1
  %2149 = sext i32 %2148 to i64
  %2150 = getelementptr inbounds i16, i16* %0, i64 %2149
  %2151 = bitcast i16* %2150 to <8 x i16>*
  %2152 = load <8 x i16>, <8 x i16>* %2151, align 16
  %2153 = mul nsw i32 %2, 3
  %2154 = sext i32 %2153 to i64
  %2155 = getelementptr inbounds i16, i16* %0, i64 %2154
  %2156 = bitcast i16* %2155 to <8 x i16>*
  %2157 = load <8 x i16>, <8 x i16>* %2156, align 16
  %2158 = shl nsw i32 %2, 2
  %2159 = sext i32 %2158 to i64
  %2160 = getelementptr inbounds i16, i16* %0, i64 %2159
  %2161 = bitcast i16* %2160 to <8 x i16>*
  %2162 = load <8 x i16>, <8 x i16>* %2161, align 16
  %2163 = mul nsw i32 %2, 5
  %2164 = sext i32 %2163 to i64
  %2165 = getelementptr inbounds i16, i16* %0, i64 %2164
  %2166 = bitcast i16* %2165 to <8 x i16>*
  %2167 = load <8 x i16>, <8 x i16>* %2166, align 16
  %2168 = mul nsw i32 %2, 6
  %2169 = sext i32 %2168 to i64
  %2170 = getelementptr inbounds i16, i16* %0, i64 %2169
  %2171 = bitcast i16* %2170 to <8 x i16>*
  %2172 = load <8 x i16>, <8 x i16>* %2171, align 16
  %2173 = mul nsw i32 %2, 7
  %2174 = sext i32 %2173 to i64
  %2175 = getelementptr inbounds i16, i16* %0, i64 %2174
  %2176 = bitcast i16* %2175 to <8 x i16>*
  %2177 = load <8 x i16>, <8 x i16>* %2176, align 16
  %2178 = sext <8 x i16> %2143 to <8 x i32>
  %2179 = bitcast [8 x <4 x i64>]* %7 to <8 x i32>*
  %2180 = sext <8 x i16> %2147 to <8 x i32>
  %2181 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 1
  %2182 = bitcast <4 x i64>* %2181 to <8 x i32>*
  %2183 = sext <8 x i16> %2152 to <8 x i32>
  %2184 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 2
  %2185 = bitcast <4 x i64>* %2184 to <8 x i32>*
  %2186 = sext <8 x i16> %2157 to <8 x i32>
  %2187 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 3
  %2188 = bitcast <4 x i64>* %2187 to <8 x i32>*
  %2189 = sext <8 x i16> %2162 to <8 x i32>
  %2190 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 4
  %2191 = bitcast <4 x i64>* %2190 to <8 x i32>*
  %2192 = sext <8 x i16> %2167 to <8 x i32>
  %2193 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 5
  %2194 = bitcast <4 x i64>* %2193 to <8 x i32>*
  %2195 = sext <8 x i16> %2172 to <8 x i32>
  %2196 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 6
  %2197 = bitcast <4 x i64>* %2196 to <8 x i32>*
  %2198 = sext <8 x i16> %2177 to <8 x i32>
  %2199 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 7
  %2200 = bitcast <4 x i64>* %2199 to <8 x i32>*
  %2201 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2178, i32 %2141) #7
  store <8 x i32> %2201, <8 x i32>* %2179, align 32
  %2202 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2180, i32 %2141) #7
  store <8 x i32> %2202, <8 x i32>* %2182, align 32
  %2203 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2183, i32 %2141) #7
  store <8 x i32> %2203, <8 x i32>* %2185, align 32
  %2204 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2186, i32 %2141) #7
  store <8 x i32> %2204, <8 x i32>* %2188, align 32
  %2205 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2189, i32 %2141) #7
  store <8 x i32> %2205, <8 x i32>* %2191, align 32
  %2206 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2192, i32 %2141) #7
  store <8 x i32> %2206, <8 x i32>* %2194, align 32
  %2207 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2195, i32 %2141) #7
  store <8 x i32> %2207, <8 x i32>* %2197, align 32
  %2208 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2198, i32 %2141) #7
  store <8 x i32> %2208, <8 x i32>* %2200, align 32
  %2209 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 0
  %2210 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 1, i64 1), align 1
  call void @fdct8_avx2(<4 x i64>* nonnull %2139, <4 x i64>* nonnull %2209, i8 signext %2210, i32 1, i32 1)
  %2211 = getelementptr inbounds i8, i8* %11, i64 1
  %2212 = load i8, i8* %2211, align 1
  %2213 = sext i8 %2212 to i32
  %2214 = sub nsw i32 0, %2213
  %2215 = xor i32 %2213, -1
  %2216 = shl i32 1, %2215
  %2217 = insertelement <8 x i32> undef, i32 %2216, i32 0
  %2218 = shufflevector <8 x i32> %2217, <8 x i32> undef, <8 x i32> zeroinitializer
  %2219 = bitcast [8 x <4 x i64>]* %9 to <8 x i32>*
  %2220 = load <8 x i32>, <8 x i32>* %2219, align 32
  %2221 = add <8 x i32> %2218, %2220
  %2222 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 1
  %2223 = bitcast <4 x i64>* %2222 to <8 x i32>*
  %2224 = load <8 x i32>, <8 x i32>* %2223, align 32
  %2225 = add <8 x i32> %2218, %2224
  %2226 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 2
  %2227 = bitcast <4 x i64>* %2226 to <8 x i32>*
  %2228 = load <8 x i32>, <8 x i32>* %2227, align 32
  %2229 = add <8 x i32> %2218, %2228
  %2230 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 3
  %2231 = bitcast <4 x i64>* %2230 to <8 x i32>*
  %2232 = load <8 x i32>, <8 x i32>* %2231, align 32
  %2233 = add <8 x i32> %2232, %2218
  %2234 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 4
  %2235 = bitcast <4 x i64>* %2234 to <8 x i32>*
  %2236 = load <8 x i32>, <8 x i32>* %2235, align 32
  %2237 = add <8 x i32> %2236, %2218
  %2238 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 5
  %2239 = bitcast <4 x i64>* %2238 to <8 x i32>*
  %2240 = load <8 x i32>, <8 x i32>* %2239, align 32
  %2241 = add <8 x i32> %2240, %2218
  %2242 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 6
  %2243 = bitcast <4 x i64>* %2242 to <8 x i32>*
  %2244 = load <8 x i32>, <8 x i32>* %2243, align 32
  %2245 = add <8 x i32> %2244, %2218
  %2246 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 7
  %2247 = bitcast <4 x i64>* %2246 to <8 x i32>*
  %2248 = load <8 x i32>, <8 x i32>* %2247, align 32
  %2249 = add <8 x i32> %2248, %2218
  %2250 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2221, i32 %2214) #7
  store <8 x i32> %2250, <8 x i32>* %2219, align 32
  %2251 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2225, i32 %2214) #7
  store <8 x i32> %2251, <8 x i32>* %2223, align 32
  %2252 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2229, i32 %2214) #7
  store <8 x i32> %2252, <8 x i32>* %2227, align 32
  %2253 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2233, i32 %2214) #7
  store <8 x i32> %2253, <8 x i32>* %2231, align 32
  %2254 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2237, i32 %2214) #7
  store <8 x i32> %2254, <8 x i32>* %2235, align 32
  %2255 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2241, i32 %2214) #7
  store <8 x i32> %2255, <8 x i32>* %2239, align 32
  %2256 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2245, i32 %2214) #7
  store <8 x i32> %2256, <8 x i32>* %2243, align 32
  %2257 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2249, i32 %2214) #7
  store <8 x i32> %2257, <8 x i32>* %2247, align 32
  %2258 = shl <8 x i32> %2250, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  store <8 x i32> %2258, <8 x i32>* %2179, align 32
  %2259 = shl <8 x i32> %2251, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  store <8 x i32> %2259, <8 x i32>* %2182, align 32
  %2260 = shl <8 x i32> %2252, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  store <8 x i32> %2260, <8 x i32>* %2185, align 32
  %2261 = shl <8 x i32> %2253, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  store <8 x i32> %2261, <8 x i32>* %2188, align 32
  %2262 = shl <8 x i32> %2254, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  store <8 x i32> %2262, <8 x i32>* %2191, align 32
  %2263 = shl <8 x i32> %2255, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  store <8 x i32> %2263, <8 x i32>* %2194, align 32
  %2264 = shl <8 x i32> %2256, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  store <8 x i32> %2264, <8 x i32>* %2197, align 32
  %2265 = shl <8 x i32> %2257, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  store <8 x i32> %2265, <8 x i32>* %2200, align 32
  br label %3186

2266:                                             ; preds = %5
  %2267 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 0
  %2268 = load i8, i8* %11, align 1
  %2269 = sext i8 %2268 to i32
  %2270 = bitcast i16* %0 to <8 x i16>*
  %2271 = load <8 x i16>, <8 x i16>* %2270, align 16
  %2272 = sext i32 %2 to i64
  %2273 = getelementptr inbounds i16, i16* %0, i64 %2272
  %2274 = bitcast i16* %2273 to <8 x i16>*
  %2275 = load <8 x i16>, <8 x i16>* %2274, align 16
  %2276 = shl nsw i32 %2, 1
  %2277 = sext i32 %2276 to i64
  %2278 = getelementptr inbounds i16, i16* %0, i64 %2277
  %2279 = bitcast i16* %2278 to <8 x i16>*
  %2280 = load <8 x i16>, <8 x i16>* %2279, align 16
  %2281 = mul nsw i32 %2, 3
  %2282 = sext i32 %2281 to i64
  %2283 = getelementptr inbounds i16, i16* %0, i64 %2282
  %2284 = bitcast i16* %2283 to <8 x i16>*
  %2285 = load <8 x i16>, <8 x i16>* %2284, align 16
  %2286 = shl nsw i32 %2, 2
  %2287 = sext i32 %2286 to i64
  %2288 = getelementptr inbounds i16, i16* %0, i64 %2287
  %2289 = bitcast i16* %2288 to <8 x i16>*
  %2290 = load <8 x i16>, <8 x i16>* %2289, align 16
  %2291 = mul nsw i32 %2, 5
  %2292 = sext i32 %2291 to i64
  %2293 = getelementptr inbounds i16, i16* %0, i64 %2292
  %2294 = bitcast i16* %2293 to <8 x i16>*
  %2295 = load <8 x i16>, <8 x i16>* %2294, align 16
  %2296 = mul nsw i32 %2, 6
  %2297 = sext i32 %2296 to i64
  %2298 = getelementptr inbounds i16, i16* %0, i64 %2297
  %2299 = bitcast i16* %2298 to <8 x i16>*
  %2300 = load <8 x i16>, <8 x i16>* %2299, align 16
  %2301 = mul nsw i32 %2, 7
  %2302 = sext i32 %2301 to i64
  %2303 = getelementptr inbounds i16, i16* %0, i64 %2302
  %2304 = bitcast i16* %2303 to <8 x i16>*
  %2305 = load <8 x i16>, <8 x i16>* %2304, align 16
  %2306 = sext <8 x i16> %2271 to <8 x i32>
  %2307 = bitcast [8 x <4 x i64>]* %7 to <8 x i32>*
  %2308 = sext <8 x i16> %2275 to <8 x i32>
  %2309 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 1
  %2310 = bitcast <4 x i64>* %2309 to <8 x i32>*
  %2311 = sext <8 x i16> %2280 to <8 x i32>
  %2312 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 2
  %2313 = bitcast <4 x i64>* %2312 to <8 x i32>*
  %2314 = sext <8 x i16> %2285 to <8 x i32>
  %2315 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 3
  %2316 = bitcast <4 x i64>* %2315 to <8 x i32>*
  %2317 = sext <8 x i16> %2290 to <8 x i32>
  %2318 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 4
  %2319 = bitcast <4 x i64>* %2318 to <8 x i32>*
  %2320 = sext <8 x i16> %2295 to <8 x i32>
  %2321 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 5
  %2322 = bitcast <4 x i64>* %2321 to <8 x i32>*
  %2323 = sext <8 x i16> %2300 to <8 x i32>
  %2324 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 6
  %2325 = bitcast <4 x i64>* %2324 to <8 x i32>*
  %2326 = sext <8 x i16> %2305 to <8 x i32>
  %2327 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 7
  %2328 = bitcast <4 x i64>* %2327 to <8 x i32>*
  %2329 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2306, i32 %2269) #7
  store <8 x i32> %2329, <8 x i32>* %2307, align 32
  %2330 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2308, i32 %2269) #7
  store <8 x i32> %2330, <8 x i32>* %2310, align 32
  %2331 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2311, i32 %2269) #7
  store <8 x i32> %2331, <8 x i32>* %2313, align 32
  %2332 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2314, i32 %2269) #7
  store <8 x i32> %2332, <8 x i32>* %2316, align 32
  %2333 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2317, i32 %2269) #7
  store <8 x i32> %2333, <8 x i32>* %2319, align 32
  %2334 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2320, i32 %2269) #7
  store <8 x i32> %2334, <8 x i32>* %2322, align 32
  %2335 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2323, i32 %2269) #7
  store <8 x i32> %2335, <8 x i32>* %2325, align 32
  %2336 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2326, i32 %2269) #7
  store <8 x i32> %2336, <8 x i32>* %2328, align 32
  %2337 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 0
  %2338 = shl <8 x i32> %2329, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2339 = bitcast [8 x <4 x i64>]* %9 to <8 x i32>*
  store <8 x i32> %2338, <8 x i32>* %2339, align 32
  %2340 = shl <8 x i32> %2330, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2341 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 1
  %2342 = bitcast <4 x i64>* %2341 to <8 x i32>*
  store <8 x i32> %2340, <8 x i32>* %2342, align 32
  %2343 = shl <8 x i32> %2331, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2344 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 2
  %2345 = bitcast <4 x i64>* %2344 to <8 x i32>*
  store <8 x i32> %2343, <8 x i32>* %2345, align 32
  %2346 = shl <8 x i32> %2332, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2347 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 3
  %2348 = bitcast <4 x i64>* %2347 to <8 x i32>*
  store <8 x i32> %2346, <8 x i32>* %2348, align 32
  %2349 = shl <8 x i32> %2333, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2350 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 4
  %2351 = bitcast <4 x i64>* %2350 to <8 x i32>*
  store <8 x i32> %2349, <8 x i32>* %2351, align 32
  %2352 = shl <8 x i32> %2334, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2353 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 5
  %2354 = bitcast <4 x i64>* %2353 to <8 x i32>*
  store <8 x i32> %2352, <8 x i32>* %2354, align 32
  %2355 = shl <8 x i32> %2335, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2356 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 6
  %2357 = bitcast <4 x i64>* %2356 to <8 x i32>*
  store <8 x i32> %2355, <8 x i32>* %2357, align 32
  %2358 = shl <8 x i32> %2336, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2359 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 7
  %2360 = bitcast <4 x i64>* %2359 to <8 x i32>*
  store <8 x i32> %2358, <8 x i32>* %2360, align 32
  %2361 = getelementptr inbounds i8, i8* %11, i64 1
  %2362 = load i8, i8* %2361, align 1
  %2363 = sext i8 %2362 to i32
  %2364 = sub nsw i32 0, %2363
  %2365 = xor i32 %2363, -1
  %2366 = shl i32 1, %2365
  %2367 = insertelement <8 x i32> undef, i32 %2366, i32 0
  %2368 = shufflevector <8 x i32> %2367, <8 x i32> undef, <8 x i32> zeroinitializer
  %2369 = add <8 x i32> %2368, %2338
  %2370 = add <8 x i32> %2368, %2340
  %2371 = add <8 x i32> %2368, %2343
  %2372 = add <8 x i32> %2368, %2346
  %2373 = add <8 x i32> %2368, %2349
  %2374 = add <8 x i32> %2368, %2352
  %2375 = add <8 x i32> %2368, %2355
  %2376 = add <8 x i32> %2368, %2358
  %2377 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2369, i32 %2364) #7
  store <8 x i32> %2377, <8 x i32>* %2339, align 32
  %2378 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2370, i32 %2364) #7
  store <8 x i32> %2378, <8 x i32>* %2342, align 32
  %2379 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2371, i32 %2364) #7
  store <8 x i32> %2379, <8 x i32>* %2345, align 32
  %2380 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2372, i32 %2364) #7
  store <8 x i32> %2380, <8 x i32>* %2348, align 32
  %2381 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2373, i32 %2364) #7
  store <8 x i32> %2381, <8 x i32>* %2351, align 32
  %2382 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2374, i32 %2364) #7
  store <8 x i32> %2382, <8 x i32>* %2354, align 32
  %2383 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2375, i32 %2364) #7
  store <8 x i32> %2383, <8 x i32>* %2357, align 32
  %2384 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2376, i32 %2364) #7
  store <8 x i32> %2384, <8 x i32>* %2360, align 32
  %2385 = shufflevector <8 x i32> %2377, <8 x i32> %2378, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2386 = bitcast <8 x i32> %2385 to <4 x i64>
  %2387 = shufflevector <8 x i32> %2377, <8 x i32> %2378, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2388 = bitcast <8 x i32> %2387 to <4 x i64>
  %2389 = shufflevector <8 x i32> %2379, <8 x i32> %2380, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2390 = bitcast <8 x i32> %2389 to <4 x i64>
  %2391 = shufflevector <8 x i32> %2379, <8 x i32> %2380, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2392 = bitcast <8 x i32> %2391 to <4 x i64>
  %2393 = shufflevector <8 x i32> %2381, <8 x i32> %2382, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2394 = bitcast <8 x i32> %2393 to <4 x i64>
  %2395 = shufflevector <8 x i32> %2381, <8 x i32> %2382, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2396 = bitcast <8 x i32> %2395 to <4 x i64>
  %2397 = shufflevector <8 x i32> %2383, <8 x i32> %2384, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2398 = bitcast <8 x i32> %2397 to <4 x i64>
  %2399 = shufflevector <8 x i32> %2383, <8 x i32> %2384, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2400 = bitcast <8 x i32> %2399 to <4 x i64>
  %2401 = shufflevector <4 x i64> %2386, <4 x i64> %2390, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2402 = shufflevector <4 x i64> %2394, <4 x i64> %2398, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2403 = bitcast <4 x i64> %2401 to <8 x i32>
  %2404 = bitcast <4 x i64> %2402 to <8 x i32>
  %2405 = shufflevector <8 x i32> %2403, <8 x i32> %2404, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2405, <8 x i32>* %2307, align 32
  %2406 = shufflevector <8 x i32> %2403, <8 x i32> %2404, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2406, <8 x i32>* %2319, align 32
  %2407 = shufflevector <4 x i64> %2386, <4 x i64> %2390, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2408 = shufflevector <4 x i64> %2394, <4 x i64> %2398, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2409 = bitcast <4 x i64> %2407 to <8 x i32>
  %2410 = bitcast <4 x i64> %2408 to <8 x i32>
  %2411 = shufflevector <8 x i32> %2409, <8 x i32> %2410, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2411, <8 x i32>* %2310, align 32
  %2412 = shufflevector <8 x i32> %2409, <8 x i32> %2410, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2412, <8 x i32>* %2322, align 32
  %2413 = shufflevector <4 x i64> %2388, <4 x i64> %2392, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2414 = shufflevector <4 x i64> %2396, <4 x i64> %2400, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2415 = bitcast <4 x i64> %2413 to <8 x i32>
  %2416 = bitcast <4 x i64> %2414 to <8 x i32>
  %2417 = shufflevector <8 x i32> %2415, <8 x i32> %2416, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2417, <8 x i32>* %2313, align 32
  %2418 = shufflevector <8 x i32> %2415, <8 x i32> %2416, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2418, <8 x i32>* %2325, align 32
  %2419 = shufflevector <4 x i64> %2388, <4 x i64> %2392, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2420 = shufflevector <4 x i64> %2396, <4 x i64> %2400, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2421 = bitcast <4 x i64> %2419 to <8 x i32>
  %2422 = bitcast <4 x i64> %2420 to <8 x i32>
  %2423 = shufflevector <8 x i32> %2421, <8 x i32> %2422, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2423, <8 x i32>* %2316, align 32
  %2424 = shufflevector <8 x i32> %2421, <8 x i32> %2422, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2424, <8 x i32>* %2328, align 32
  %2425 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 1, i64 1), align 1
  call void @fdct8_avx2(<4 x i64>* nonnull %2267, <4 x i64>* nonnull %2337, i8 signext %2425, i32 1, i32 1)
  %2426 = load <8 x i32>, <8 x i32>* %2339, align 32
  %2427 = load <8 x i32>, <8 x i32>* %2342, align 32
  %2428 = shufflevector <8 x i32> %2426, <8 x i32> %2427, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2429 = bitcast <8 x i32> %2428 to <4 x i64>
  %2430 = shufflevector <8 x i32> %2426, <8 x i32> %2427, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2431 = bitcast <8 x i32> %2430 to <4 x i64>
  %2432 = load <8 x i32>, <8 x i32>* %2345, align 32
  %2433 = load <8 x i32>, <8 x i32>* %2348, align 32
  %2434 = shufflevector <8 x i32> %2432, <8 x i32> %2433, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2435 = bitcast <8 x i32> %2434 to <4 x i64>
  %2436 = shufflevector <8 x i32> %2432, <8 x i32> %2433, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2437 = bitcast <8 x i32> %2436 to <4 x i64>
  %2438 = load <8 x i32>, <8 x i32>* %2351, align 32
  %2439 = load <8 x i32>, <8 x i32>* %2354, align 32
  %2440 = shufflevector <8 x i32> %2438, <8 x i32> %2439, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2441 = bitcast <8 x i32> %2440 to <4 x i64>
  %2442 = shufflevector <8 x i32> %2438, <8 x i32> %2439, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2443 = bitcast <8 x i32> %2442 to <4 x i64>
  %2444 = load <8 x i32>, <8 x i32>* %2357, align 32
  %2445 = load <8 x i32>, <8 x i32>* %2360, align 32
  %2446 = shufflevector <8 x i32> %2444, <8 x i32> %2445, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2447 = bitcast <8 x i32> %2446 to <4 x i64>
  %2448 = shufflevector <8 x i32> %2444, <8 x i32> %2445, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2449 = bitcast <8 x i32> %2448 to <4 x i64>
  %2450 = shufflevector <4 x i64> %2429, <4 x i64> %2435, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2451 = shufflevector <4 x i64> %2441, <4 x i64> %2447, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2452 = bitcast <4 x i64> %2450 to <8 x i32>
  %2453 = bitcast <4 x i64> %2451 to <8 x i32>
  %2454 = shufflevector <8 x i32> %2452, <8 x i32> %2453, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2454, <8 x i32>* %2307, align 32
  %2455 = shufflevector <8 x i32> %2452, <8 x i32> %2453, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2455, <8 x i32>* %2319, align 32
  %2456 = shufflevector <4 x i64> %2429, <4 x i64> %2435, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2457 = shufflevector <4 x i64> %2441, <4 x i64> %2447, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2458 = bitcast <4 x i64> %2456 to <8 x i32>
  %2459 = bitcast <4 x i64> %2457 to <8 x i32>
  %2460 = shufflevector <8 x i32> %2458, <8 x i32> %2459, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2460, <8 x i32>* %2310, align 32
  %2461 = shufflevector <8 x i32> %2458, <8 x i32> %2459, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2461, <8 x i32>* %2322, align 32
  %2462 = shufflevector <4 x i64> %2431, <4 x i64> %2437, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2463 = shufflevector <4 x i64> %2443, <4 x i64> %2449, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2464 = bitcast <4 x i64> %2462 to <8 x i32>
  %2465 = bitcast <4 x i64> %2463 to <8 x i32>
  %2466 = shufflevector <8 x i32> %2464, <8 x i32> %2465, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2466, <8 x i32>* %2313, align 32
  %2467 = shufflevector <8 x i32> %2464, <8 x i32> %2465, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2467, <8 x i32>* %2325, align 32
  %2468 = shufflevector <4 x i64> %2431, <4 x i64> %2437, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2469 = shufflevector <4 x i64> %2443, <4 x i64> %2449, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2470 = bitcast <4 x i64> %2468 to <8 x i32>
  %2471 = bitcast <4 x i64> %2469 to <8 x i32>
  %2472 = shufflevector <8 x i32> %2470, <8 x i32> %2471, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2472, <8 x i32>* %2316, align 32
  %2473 = shufflevector <8 x i32> %2470, <8 x i32> %2471, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2473, <8 x i32>* %2328, align 32
  br label %3186

2474:                                             ; preds = %5
  %2475 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 0
  %2476 = load i8, i8* %11, align 1
  %2477 = sext i8 %2476 to i32
  %2478 = bitcast i16* %0 to <8 x i16>*
  %2479 = load <8 x i16>, <8 x i16>* %2478, align 16
  %2480 = sext i32 %2 to i64
  %2481 = getelementptr inbounds i16, i16* %0, i64 %2480
  %2482 = bitcast i16* %2481 to <8 x i16>*
  %2483 = load <8 x i16>, <8 x i16>* %2482, align 16
  %2484 = shl nsw i32 %2, 1
  %2485 = sext i32 %2484 to i64
  %2486 = getelementptr inbounds i16, i16* %0, i64 %2485
  %2487 = bitcast i16* %2486 to <8 x i16>*
  %2488 = load <8 x i16>, <8 x i16>* %2487, align 16
  %2489 = mul nsw i32 %2, 3
  %2490 = sext i32 %2489 to i64
  %2491 = getelementptr inbounds i16, i16* %0, i64 %2490
  %2492 = bitcast i16* %2491 to <8 x i16>*
  %2493 = load <8 x i16>, <8 x i16>* %2492, align 16
  %2494 = shl nsw i32 %2, 2
  %2495 = sext i32 %2494 to i64
  %2496 = getelementptr inbounds i16, i16* %0, i64 %2495
  %2497 = bitcast i16* %2496 to <8 x i16>*
  %2498 = load <8 x i16>, <8 x i16>* %2497, align 16
  %2499 = mul nsw i32 %2, 5
  %2500 = sext i32 %2499 to i64
  %2501 = getelementptr inbounds i16, i16* %0, i64 %2500
  %2502 = bitcast i16* %2501 to <8 x i16>*
  %2503 = load <8 x i16>, <8 x i16>* %2502, align 16
  %2504 = mul nsw i32 %2, 6
  %2505 = sext i32 %2504 to i64
  %2506 = getelementptr inbounds i16, i16* %0, i64 %2505
  %2507 = bitcast i16* %2506 to <8 x i16>*
  %2508 = load <8 x i16>, <8 x i16>* %2507, align 16
  %2509 = mul nsw i32 %2, 7
  %2510 = sext i32 %2509 to i64
  %2511 = getelementptr inbounds i16, i16* %0, i64 %2510
  %2512 = bitcast i16* %2511 to <8 x i16>*
  %2513 = load <8 x i16>, <8 x i16>* %2512, align 16
  %2514 = sext <8 x i16> %2479 to <8 x i32>
  %2515 = bitcast [8 x <4 x i64>]* %7 to <8 x i32>*
  %2516 = sext <8 x i16> %2483 to <8 x i32>
  %2517 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 1
  %2518 = bitcast <4 x i64>* %2517 to <8 x i32>*
  %2519 = sext <8 x i16> %2488 to <8 x i32>
  %2520 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 2
  %2521 = bitcast <4 x i64>* %2520 to <8 x i32>*
  %2522 = sext <8 x i16> %2493 to <8 x i32>
  %2523 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 3
  %2524 = bitcast <4 x i64>* %2523 to <8 x i32>*
  %2525 = sext <8 x i16> %2498 to <8 x i32>
  %2526 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 4
  %2527 = bitcast <4 x i64>* %2526 to <8 x i32>*
  %2528 = sext <8 x i16> %2503 to <8 x i32>
  %2529 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 5
  %2530 = bitcast <4 x i64>* %2529 to <8 x i32>*
  %2531 = sext <8 x i16> %2508 to <8 x i32>
  %2532 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 6
  %2533 = bitcast <4 x i64>* %2532 to <8 x i32>*
  %2534 = sext <8 x i16> %2513 to <8 x i32>
  %2535 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 7
  %2536 = bitcast <4 x i64>* %2535 to <8 x i32>*
  %2537 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2514, i32 %2477) #7
  store <8 x i32> %2537, <8 x i32>* %2515, align 32
  %2538 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2516, i32 %2477) #7
  store <8 x i32> %2538, <8 x i32>* %2518, align 32
  %2539 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2519, i32 %2477) #7
  store <8 x i32> %2539, <8 x i32>* %2521, align 32
  %2540 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2522, i32 %2477) #7
  store <8 x i32> %2540, <8 x i32>* %2524, align 32
  %2541 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2525, i32 %2477) #7
  store <8 x i32> %2541, <8 x i32>* %2527, align 32
  %2542 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2528, i32 %2477) #7
  store <8 x i32> %2542, <8 x i32>* %2530, align 32
  %2543 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2531, i32 %2477) #7
  store <8 x i32> %2543, <8 x i32>* %2533, align 32
  %2544 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2534, i32 %2477) #7
  store <8 x i32> %2544, <8 x i32>* %2536, align 32
  %2545 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 0
  %2546 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 1, i64 1), align 1
  call void @fadst8_avx2(<4 x i64>* nonnull %2475, <4 x i64>* nonnull %2545, i8 signext %2546, i32 1, i32 1)
  %2547 = getelementptr inbounds i8, i8* %11, i64 1
  %2548 = load i8, i8* %2547, align 1
  %2549 = sext i8 %2548 to i32
  %2550 = sub nsw i32 0, %2549
  %2551 = xor i32 %2549, -1
  %2552 = shl i32 1, %2551
  %2553 = insertelement <8 x i32> undef, i32 %2552, i32 0
  %2554 = shufflevector <8 x i32> %2553, <8 x i32> undef, <8 x i32> zeroinitializer
  %2555 = bitcast [8 x <4 x i64>]* %9 to <8 x i32>*
  %2556 = load <8 x i32>, <8 x i32>* %2555, align 32
  %2557 = add <8 x i32> %2554, %2556
  %2558 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 1
  %2559 = bitcast <4 x i64>* %2558 to <8 x i32>*
  %2560 = load <8 x i32>, <8 x i32>* %2559, align 32
  %2561 = add <8 x i32> %2554, %2560
  %2562 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 2
  %2563 = bitcast <4 x i64>* %2562 to <8 x i32>*
  %2564 = load <8 x i32>, <8 x i32>* %2563, align 32
  %2565 = add <8 x i32> %2554, %2564
  %2566 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 3
  %2567 = bitcast <4 x i64>* %2566 to <8 x i32>*
  %2568 = load <8 x i32>, <8 x i32>* %2567, align 32
  %2569 = add <8 x i32> %2568, %2554
  %2570 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 4
  %2571 = bitcast <4 x i64>* %2570 to <8 x i32>*
  %2572 = load <8 x i32>, <8 x i32>* %2571, align 32
  %2573 = add <8 x i32> %2572, %2554
  %2574 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 5
  %2575 = bitcast <4 x i64>* %2574 to <8 x i32>*
  %2576 = load <8 x i32>, <8 x i32>* %2575, align 32
  %2577 = add <8 x i32> %2576, %2554
  %2578 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 6
  %2579 = bitcast <4 x i64>* %2578 to <8 x i32>*
  %2580 = load <8 x i32>, <8 x i32>* %2579, align 32
  %2581 = add <8 x i32> %2580, %2554
  %2582 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 7
  %2583 = bitcast <4 x i64>* %2582 to <8 x i32>*
  %2584 = load <8 x i32>, <8 x i32>* %2583, align 32
  %2585 = add <8 x i32> %2584, %2554
  %2586 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2557, i32 %2550) #7
  store <8 x i32> %2586, <8 x i32>* %2555, align 32
  %2587 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2561, i32 %2550) #7
  store <8 x i32> %2587, <8 x i32>* %2559, align 32
  %2588 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2565, i32 %2550) #7
  store <8 x i32> %2588, <8 x i32>* %2563, align 32
  %2589 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2569, i32 %2550) #7
  store <8 x i32> %2589, <8 x i32>* %2567, align 32
  %2590 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2573, i32 %2550) #7
  store <8 x i32> %2590, <8 x i32>* %2571, align 32
  %2591 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2577, i32 %2550) #7
  store <8 x i32> %2591, <8 x i32>* %2575, align 32
  %2592 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2581, i32 %2550) #7
  store <8 x i32> %2592, <8 x i32>* %2579, align 32
  %2593 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2585, i32 %2550) #7
  store <8 x i32> %2593, <8 x i32>* %2583, align 32
  %2594 = shl <8 x i32> %2586, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  store <8 x i32> %2594, <8 x i32>* %2515, align 32
  %2595 = shl <8 x i32> %2587, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  store <8 x i32> %2595, <8 x i32>* %2518, align 32
  %2596 = shl <8 x i32> %2588, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  store <8 x i32> %2596, <8 x i32>* %2521, align 32
  %2597 = shl <8 x i32> %2589, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  store <8 x i32> %2597, <8 x i32>* %2524, align 32
  %2598 = shl <8 x i32> %2590, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  store <8 x i32> %2598, <8 x i32>* %2527, align 32
  %2599 = shl <8 x i32> %2591, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  store <8 x i32> %2599, <8 x i32>* %2530, align 32
  %2600 = shl <8 x i32> %2592, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  store <8 x i32> %2600, <8 x i32>* %2533, align 32
  %2601 = shl <8 x i32> %2593, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  store <8 x i32> %2601, <8 x i32>* %2536, align 32
  br label %3186

2602:                                             ; preds = %5
  %2603 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 0
  %2604 = load i8, i8* %11, align 1
  %2605 = sext i8 %2604 to i32
  %2606 = bitcast i16* %0 to <8 x i16>*
  %2607 = load <8 x i16>, <8 x i16>* %2606, align 16
  %2608 = sext i32 %2 to i64
  %2609 = getelementptr inbounds i16, i16* %0, i64 %2608
  %2610 = bitcast i16* %2609 to <8 x i16>*
  %2611 = load <8 x i16>, <8 x i16>* %2610, align 16
  %2612 = shl nsw i32 %2, 1
  %2613 = sext i32 %2612 to i64
  %2614 = getelementptr inbounds i16, i16* %0, i64 %2613
  %2615 = bitcast i16* %2614 to <8 x i16>*
  %2616 = load <8 x i16>, <8 x i16>* %2615, align 16
  %2617 = mul nsw i32 %2, 3
  %2618 = sext i32 %2617 to i64
  %2619 = getelementptr inbounds i16, i16* %0, i64 %2618
  %2620 = bitcast i16* %2619 to <8 x i16>*
  %2621 = load <8 x i16>, <8 x i16>* %2620, align 16
  %2622 = shl nsw i32 %2, 2
  %2623 = sext i32 %2622 to i64
  %2624 = getelementptr inbounds i16, i16* %0, i64 %2623
  %2625 = bitcast i16* %2624 to <8 x i16>*
  %2626 = load <8 x i16>, <8 x i16>* %2625, align 16
  %2627 = mul nsw i32 %2, 5
  %2628 = sext i32 %2627 to i64
  %2629 = getelementptr inbounds i16, i16* %0, i64 %2628
  %2630 = bitcast i16* %2629 to <8 x i16>*
  %2631 = load <8 x i16>, <8 x i16>* %2630, align 16
  %2632 = mul nsw i32 %2, 6
  %2633 = sext i32 %2632 to i64
  %2634 = getelementptr inbounds i16, i16* %0, i64 %2633
  %2635 = bitcast i16* %2634 to <8 x i16>*
  %2636 = load <8 x i16>, <8 x i16>* %2635, align 16
  %2637 = mul nsw i32 %2, 7
  %2638 = sext i32 %2637 to i64
  %2639 = getelementptr inbounds i16, i16* %0, i64 %2638
  %2640 = bitcast i16* %2639 to <8 x i16>*
  %2641 = load <8 x i16>, <8 x i16>* %2640, align 16
  %2642 = sext <8 x i16> %2607 to <8 x i32>
  %2643 = bitcast [8 x <4 x i64>]* %7 to <8 x i32>*
  %2644 = sext <8 x i16> %2611 to <8 x i32>
  %2645 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 1
  %2646 = bitcast <4 x i64>* %2645 to <8 x i32>*
  %2647 = sext <8 x i16> %2616 to <8 x i32>
  %2648 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 2
  %2649 = bitcast <4 x i64>* %2648 to <8 x i32>*
  %2650 = sext <8 x i16> %2621 to <8 x i32>
  %2651 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 3
  %2652 = bitcast <4 x i64>* %2651 to <8 x i32>*
  %2653 = sext <8 x i16> %2626 to <8 x i32>
  %2654 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 4
  %2655 = bitcast <4 x i64>* %2654 to <8 x i32>*
  %2656 = sext <8 x i16> %2631 to <8 x i32>
  %2657 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 5
  %2658 = bitcast <4 x i64>* %2657 to <8 x i32>*
  %2659 = sext <8 x i16> %2636 to <8 x i32>
  %2660 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 6
  %2661 = bitcast <4 x i64>* %2660 to <8 x i32>*
  %2662 = sext <8 x i16> %2641 to <8 x i32>
  %2663 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 7
  %2664 = bitcast <4 x i64>* %2663 to <8 x i32>*
  %2665 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2642, i32 %2605) #7
  store <8 x i32> %2665, <8 x i32>* %2643, align 32
  %2666 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2644, i32 %2605) #7
  store <8 x i32> %2666, <8 x i32>* %2646, align 32
  %2667 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2647, i32 %2605) #7
  store <8 x i32> %2667, <8 x i32>* %2649, align 32
  %2668 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2650, i32 %2605) #7
  store <8 x i32> %2668, <8 x i32>* %2652, align 32
  %2669 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2653, i32 %2605) #7
  store <8 x i32> %2669, <8 x i32>* %2655, align 32
  %2670 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2656, i32 %2605) #7
  store <8 x i32> %2670, <8 x i32>* %2658, align 32
  %2671 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2659, i32 %2605) #7
  store <8 x i32> %2671, <8 x i32>* %2661, align 32
  %2672 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2662, i32 %2605) #7
  store <8 x i32> %2672, <8 x i32>* %2664, align 32
  %2673 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 0
  %2674 = shl <8 x i32> %2665, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2675 = bitcast [8 x <4 x i64>]* %9 to <8 x i32>*
  store <8 x i32> %2674, <8 x i32>* %2675, align 32
  %2676 = shl <8 x i32> %2666, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2677 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 1
  %2678 = bitcast <4 x i64>* %2677 to <8 x i32>*
  store <8 x i32> %2676, <8 x i32>* %2678, align 32
  %2679 = shl <8 x i32> %2667, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2680 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 2
  %2681 = bitcast <4 x i64>* %2680 to <8 x i32>*
  store <8 x i32> %2679, <8 x i32>* %2681, align 32
  %2682 = shl <8 x i32> %2668, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2683 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 3
  %2684 = bitcast <4 x i64>* %2683 to <8 x i32>*
  store <8 x i32> %2682, <8 x i32>* %2684, align 32
  %2685 = shl <8 x i32> %2669, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2686 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 4
  %2687 = bitcast <4 x i64>* %2686 to <8 x i32>*
  store <8 x i32> %2685, <8 x i32>* %2687, align 32
  %2688 = shl <8 x i32> %2670, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2689 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 5
  %2690 = bitcast <4 x i64>* %2689 to <8 x i32>*
  store <8 x i32> %2688, <8 x i32>* %2690, align 32
  %2691 = shl <8 x i32> %2671, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2692 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 6
  %2693 = bitcast <4 x i64>* %2692 to <8 x i32>*
  store <8 x i32> %2691, <8 x i32>* %2693, align 32
  %2694 = shl <8 x i32> %2672, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2695 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 7
  %2696 = bitcast <4 x i64>* %2695 to <8 x i32>*
  store <8 x i32> %2694, <8 x i32>* %2696, align 32
  %2697 = getelementptr inbounds i8, i8* %11, i64 1
  %2698 = load i8, i8* %2697, align 1
  %2699 = sext i8 %2698 to i32
  %2700 = sub nsw i32 0, %2699
  %2701 = xor i32 %2699, -1
  %2702 = shl i32 1, %2701
  %2703 = insertelement <8 x i32> undef, i32 %2702, i32 0
  %2704 = shufflevector <8 x i32> %2703, <8 x i32> undef, <8 x i32> zeroinitializer
  %2705 = add <8 x i32> %2704, %2674
  %2706 = add <8 x i32> %2704, %2676
  %2707 = add <8 x i32> %2704, %2679
  %2708 = add <8 x i32> %2704, %2682
  %2709 = add <8 x i32> %2704, %2685
  %2710 = add <8 x i32> %2704, %2688
  %2711 = add <8 x i32> %2704, %2691
  %2712 = add <8 x i32> %2704, %2694
  %2713 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2705, i32 %2700) #7
  store <8 x i32> %2713, <8 x i32>* %2675, align 32
  %2714 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2706, i32 %2700) #7
  store <8 x i32> %2714, <8 x i32>* %2678, align 32
  %2715 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2707, i32 %2700) #7
  store <8 x i32> %2715, <8 x i32>* %2681, align 32
  %2716 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2708, i32 %2700) #7
  store <8 x i32> %2716, <8 x i32>* %2684, align 32
  %2717 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2709, i32 %2700) #7
  store <8 x i32> %2717, <8 x i32>* %2687, align 32
  %2718 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2710, i32 %2700) #7
  store <8 x i32> %2718, <8 x i32>* %2690, align 32
  %2719 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2711, i32 %2700) #7
  store <8 x i32> %2719, <8 x i32>* %2693, align 32
  %2720 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2712, i32 %2700) #7
  store <8 x i32> %2720, <8 x i32>* %2696, align 32
  %2721 = shufflevector <8 x i32> %2713, <8 x i32> %2714, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2722 = bitcast <8 x i32> %2721 to <4 x i64>
  %2723 = shufflevector <8 x i32> %2713, <8 x i32> %2714, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2724 = bitcast <8 x i32> %2723 to <4 x i64>
  %2725 = shufflevector <8 x i32> %2715, <8 x i32> %2716, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2726 = bitcast <8 x i32> %2725 to <4 x i64>
  %2727 = shufflevector <8 x i32> %2715, <8 x i32> %2716, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2728 = bitcast <8 x i32> %2727 to <4 x i64>
  %2729 = shufflevector <8 x i32> %2717, <8 x i32> %2718, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2730 = bitcast <8 x i32> %2729 to <4 x i64>
  %2731 = shufflevector <8 x i32> %2717, <8 x i32> %2718, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2732 = bitcast <8 x i32> %2731 to <4 x i64>
  %2733 = shufflevector <8 x i32> %2719, <8 x i32> %2720, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2734 = bitcast <8 x i32> %2733 to <4 x i64>
  %2735 = shufflevector <8 x i32> %2719, <8 x i32> %2720, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2736 = bitcast <8 x i32> %2735 to <4 x i64>
  %2737 = shufflevector <4 x i64> %2722, <4 x i64> %2726, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2738 = shufflevector <4 x i64> %2730, <4 x i64> %2734, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2739 = bitcast <4 x i64> %2737 to <8 x i32>
  %2740 = bitcast <4 x i64> %2738 to <8 x i32>
  %2741 = shufflevector <8 x i32> %2739, <8 x i32> %2740, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2741, <8 x i32>* %2643, align 32
  %2742 = shufflevector <8 x i32> %2739, <8 x i32> %2740, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2742, <8 x i32>* %2655, align 32
  %2743 = shufflevector <4 x i64> %2722, <4 x i64> %2726, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2744 = shufflevector <4 x i64> %2730, <4 x i64> %2734, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2745 = bitcast <4 x i64> %2743 to <8 x i32>
  %2746 = bitcast <4 x i64> %2744 to <8 x i32>
  %2747 = shufflevector <8 x i32> %2745, <8 x i32> %2746, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2747, <8 x i32>* %2646, align 32
  %2748 = shufflevector <8 x i32> %2745, <8 x i32> %2746, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2748, <8 x i32>* %2658, align 32
  %2749 = shufflevector <4 x i64> %2724, <4 x i64> %2728, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2750 = shufflevector <4 x i64> %2732, <4 x i64> %2736, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2751 = bitcast <4 x i64> %2749 to <8 x i32>
  %2752 = bitcast <4 x i64> %2750 to <8 x i32>
  %2753 = shufflevector <8 x i32> %2751, <8 x i32> %2752, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2753, <8 x i32>* %2649, align 32
  %2754 = shufflevector <8 x i32> %2751, <8 x i32> %2752, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2754, <8 x i32>* %2661, align 32
  %2755 = shufflevector <4 x i64> %2724, <4 x i64> %2728, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2756 = shufflevector <4 x i64> %2732, <4 x i64> %2736, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2757 = bitcast <4 x i64> %2755 to <8 x i32>
  %2758 = bitcast <4 x i64> %2756 to <8 x i32>
  %2759 = shufflevector <8 x i32> %2757, <8 x i32> %2758, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2759, <8 x i32>* %2652, align 32
  %2760 = shufflevector <8 x i32> %2757, <8 x i32> %2758, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2760, <8 x i32>* %2664, align 32
  %2761 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 1, i64 1), align 1
  call void @fadst8_avx2(<4 x i64>* nonnull %2603, <4 x i64>* nonnull %2673, i8 signext %2761, i32 1, i32 1)
  %2762 = load <8 x i32>, <8 x i32>* %2675, align 32
  %2763 = load <8 x i32>, <8 x i32>* %2678, align 32
  %2764 = shufflevector <8 x i32> %2762, <8 x i32> %2763, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2765 = bitcast <8 x i32> %2764 to <4 x i64>
  %2766 = shufflevector <8 x i32> %2762, <8 x i32> %2763, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2767 = bitcast <8 x i32> %2766 to <4 x i64>
  %2768 = load <8 x i32>, <8 x i32>* %2681, align 32
  %2769 = load <8 x i32>, <8 x i32>* %2684, align 32
  %2770 = shufflevector <8 x i32> %2768, <8 x i32> %2769, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2771 = bitcast <8 x i32> %2770 to <4 x i64>
  %2772 = shufflevector <8 x i32> %2768, <8 x i32> %2769, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2773 = bitcast <8 x i32> %2772 to <4 x i64>
  %2774 = load <8 x i32>, <8 x i32>* %2687, align 32
  %2775 = load <8 x i32>, <8 x i32>* %2690, align 32
  %2776 = shufflevector <8 x i32> %2774, <8 x i32> %2775, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2777 = bitcast <8 x i32> %2776 to <4 x i64>
  %2778 = shufflevector <8 x i32> %2774, <8 x i32> %2775, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2779 = bitcast <8 x i32> %2778 to <4 x i64>
  %2780 = load <8 x i32>, <8 x i32>* %2693, align 32
  %2781 = load <8 x i32>, <8 x i32>* %2696, align 32
  %2782 = shufflevector <8 x i32> %2780, <8 x i32> %2781, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2783 = bitcast <8 x i32> %2782 to <4 x i64>
  %2784 = shufflevector <8 x i32> %2780, <8 x i32> %2781, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2785 = bitcast <8 x i32> %2784 to <4 x i64>
  %2786 = shufflevector <4 x i64> %2765, <4 x i64> %2771, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2787 = shufflevector <4 x i64> %2777, <4 x i64> %2783, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2788 = bitcast <4 x i64> %2786 to <8 x i32>
  %2789 = bitcast <4 x i64> %2787 to <8 x i32>
  %2790 = shufflevector <8 x i32> %2788, <8 x i32> %2789, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2790, <8 x i32>* %2643, align 32
  %2791 = shufflevector <8 x i32> %2788, <8 x i32> %2789, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2791, <8 x i32>* %2655, align 32
  %2792 = shufflevector <4 x i64> %2765, <4 x i64> %2771, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2793 = shufflevector <4 x i64> %2777, <4 x i64> %2783, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2794 = bitcast <4 x i64> %2792 to <8 x i32>
  %2795 = bitcast <4 x i64> %2793 to <8 x i32>
  %2796 = shufflevector <8 x i32> %2794, <8 x i32> %2795, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2796, <8 x i32>* %2646, align 32
  %2797 = shufflevector <8 x i32> %2794, <8 x i32> %2795, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2797, <8 x i32>* %2658, align 32
  %2798 = shufflevector <4 x i64> %2767, <4 x i64> %2773, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2799 = shufflevector <4 x i64> %2779, <4 x i64> %2785, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2800 = bitcast <4 x i64> %2798 to <8 x i32>
  %2801 = bitcast <4 x i64> %2799 to <8 x i32>
  %2802 = shufflevector <8 x i32> %2800, <8 x i32> %2801, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2802, <8 x i32>* %2649, align 32
  %2803 = shufflevector <8 x i32> %2800, <8 x i32> %2801, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2803, <8 x i32>* %2661, align 32
  %2804 = shufflevector <4 x i64> %2767, <4 x i64> %2773, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2805 = shufflevector <4 x i64> %2779, <4 x i64> %2785, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2806 = bitcast <4 x i64> %2804 to <8 x i32>
  %2807 = bitcast <4 x i64> %2805 to <8 x i32>
  %2808 = shufflevector <8 x i32> %2806, <8 x i32> %2807, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2808, <8 x i32>* %2652, align 32
  %2809 = shufflevector <8 x i32> %2806, <8 x i32> %2807, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2809, <8 x i32>* %2664, align 32
  br label %3186

2810:                                             ; preds = %5
  %2811 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 0
  %2812 = load i8, i8* %11, align 1
  %2813 = sext i8 %2812 to i32
  %2814 = bitcast i16* %0 to <8 x i16>*
  %2815 = load <8 x i16>, <8 x i16>* %2814, align 16
  %2816 = sext i32 %2 to i64
  %2817 = getelementptr inbounds i16, i16* %0, i64 %2816
  %2818 = bitcast i16* %2817 to <8 x i16>*
  %2819 = load <8 x i16>, <8 x i16>* %2818, align 16
  %2820 = shl nsw i32 %2, 1
  %2821 = sext i32 %2820 to i64
  %2822 = getelementptr inbounds i16, i16* %0, i64 %2821
  %2823 = bitcast i16* %2822 to <8 x i16>*
  %2824 = load <8 x i16>, <8 x i16>* %2823, align 16
  %2825 = mul nsw i32 %2, 3
  %2826 = sext i32 %2825 to i64
  %2827 = getelementptr inbounds i16, i16* %0, i64 %2826
  %2828 = bitcast i16* %2827 to <8 x i16>*
  %2829 = load <8 x i16>, <8 x i16>* %2828, align 16
  %2830 = shl nsw i32 %2, 2
  %2831 = sext i32 %2830 to i64
  %2832 = getelementptr inbounds i16, i16* %0, i64 %2831
  %2833 = bitcast i16* %2832 to <8 x i16>*
  %2834 = load <8 x i16>, <8 x i16>* %2833, align 16
  %2835 = mul nsw i32 %2, 5
  %2836 = sext i32 %2835 to i64
  %2837 = getelementptr inbounds i16, i16* %0, i64 %2836
  %2838 = bitcast i16* %2837 to <8 x i16>*
  %2839 = load <8 x i16>, <8 x i16>* %2838, align 16
  %2840 = mul nsw i32 %2, 6
  %2841 = sext i32 %2840 to i64
  %2842 = getelementptr inbounds i16, i16* %0, i64 %2841
  %2843 = bitcast i16* %2842 to <8 x i16>*
  %2844 = load <8 x i16>, <8 x i16>* %2843, align 16
  %2845 = mul nsw i32 %2, 7
  %2846 = sext i32 %2845 to i64
  %2847 = getelementptr inbounds i16, i16* %0, i64 %2846
  %2848 = bitcast i16* %2847 to <8 x i16>*
  %2849 = load <8 x i16>, <8 x i16>* %2848, align 16
  %2850 = sext <8 x i16> %2849 to <8 x i32>
  %2851 = bitcast [8 x <4 x i64>]* %7 to <8 x i32>*
  %2852 = sext <8 x i16> %2844 to <8 x i32>
  %2853 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 1
  %2854 = bitcast <4 x i64>* %2853 to <8 x i32>*
  %2855 = sext <8 x i16> %2839 to <8 x i32>
  %2856 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 2
  %2857 = bitcast <4 x i64>* %2856 to <8 x i32>*
  %2858 = sext <8 x i16> %2834 to <8 x i32>
  %2859 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 3
  %2860 = bitcast <4 x i64>* %2859 to <8 x i32>*
  %2861 = sext <8 x i16> %2829 to <8 x i32>
  %2862 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 4
  %2863 = bitcast <4 x i64>* %2862 to <8 x i32>*
  %2864 = sext <8 x i16> %2824 to <8 x i32>
  %2865 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 5
  %2866 = bitcast <4 x i64>* %2865 to <8 x i32>*
  %2867 = sext <8 x i16> %2819 to <8 x i32>
  %2868 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 6
  %2869 = bitcast <4 x i64>* %2868 to <8 x i32>*
  %2870 = sext <8 x i16> %2815 to <8 x i32>
  %2871 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 7
  %2872 = bitcast <4 x i64>* %2871 to <8 x i32>*
  %2873 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2850, i32 %2813) #7
  store <8 x i32> %2873, <8 x i32>* %2851, align 32
  %2874 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2852, i32 %2813) #7
  store <8 x i32> %2874, <8 x i32>* %2854, align 32
  %2875 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2855, i32 %2813) #7
  store <8 x i32> %2875, <8 x i32>* %2857, align 32
  %2876 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2858, i32 %2813) #7
  store <8 x i32> %2876, <8 x i32>* %2860, align 32
  %2877 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2861, i32 %2813) #7
  store <8 x i32> %2877, <8 x i32>* %2863, align 32
  %2878 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2864, i32 %2813) #7
  store <8 x i32> %2878, <8 x i32>* %2866, align 32
  %2879 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2867, i32 %2813) #7
  store <8 x i32> %2879, <8 x i32>* %2869, align 32
  %2880 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2870, i32 %2813) #7
  store <8 x i32> %2880, <8 x i32>* %2872, align 32
  %2881 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 0
  %2882 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 1, i64 1), align 1
  call void @fadst8_avx2(<4 x i64>* nonnull %2811, <4 x i64>* nonnull %2881, i8 signext %2882, i32 1, i32 1)
  %2883 = getelementptr inbounds i8, i8* %11, i64 1
  %2884 = load i8, i8* %2883, align 1
  %2885 = sext i8 %2884 to i32
  %2886 = sub nsw i32 0, %2885
  %2887 = xor i32 %2885, -1
  %2888 = shl i32 1, %2887
  %2889 = insertelement <8 x i32> undef, i32 %2888, i32 0
  %2890 = shufflevector <8 x i32> %2889, <8 x i32> undef, <8 x i32> zeroinitializer
  %2891 = bitcast [8 x <4 x i64>]* %9 to <8 x i32>*
  %2892 = load <8 x i32>, <8 x i32>* %2891, align 32
  %2893 = add <8 x i32> %2890, %2892
  %2894 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 1
  %2895 = bitcast <4 x i64>* %2894 to <8 x i32>*
  %2896 = load <8 x i32>, <8 x i32>* %2895, align 32
  %2897 = add <8 x i32> %2890, %2896
  %2898 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 2
  %2899 = bitcast <4 x i64>* %2898 to <8 x i32>*
  %2900 = load <8 x i32>, <8 x i32>* %2899, align 32
  %2901 = add <8 x i32> %2890, %2900
  %2902 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 3
  %2903 = bitcast <4 x i64>* %2902 to <8 x i32>*
  %2904 = load <8 x i32>, <8 x i32>* %2903, align 32
  %2905 = add <8 x i32> %2904, %2890
  %2906 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 4
  %2907 = bitcast <4 x i64>* %2906 to <8 x i32>*
  %2908 = load <8 x i32>, <8 x i32>* %2907, align 32
  %2909 = add <8 x i32> %2908, %2890
  %2910 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 5
  %2911 = bitcast <4 x i64>* %2910 to <8 x i32>*
  %2912 = load <8 x i32>, <8 x i32>* %2911, align 32
  %2913 = add <8 x i32> %2912, %2890
  %2914 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 6
  %2915 = bitcast <4 x i64>* %2914 to <8 x i32>*
  %2916 = load <8 x i32>, <8 x i32>* %2915, align 32
  %2917 = add <8 x i32> %2916, %2890
  %2918 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 7
  %2919 = bitcast <4 x i64>* %2918 to <8 x i32>*
  %2920 = load <8 x i32>, <8 x i32>* %2919, align 32
  %2921 = add <8 x i32> %2920, %2890
  %2922 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2893, i32 %2886) #7
  store <8 x i32> %2922, <8 x i32>* %2891, align 32
  %2923 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2897, i32 %2886) #7
  store <8 x i32> %2923, <8 x i32>* %2895, align 32
  %2924 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2901, i32 %2886) #7
  store <8 x i32> %2924, <8 x i32>* %2899, align 32
  %2925 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2905, i32 %2886) #7
  store <8 x i32> %2925, <8 x i32>* %2903, align 32
  %2926 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2909, i32 %2886) #7
  store <8 x i32> %2926, <8 x i32>* %2907, align 32
  %2927 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2913, i32 %2886) #7
  store <8 x i32> %2927, <8 x i32>* %2911, align 32
  %2928 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2917, i32 %2886) #7
  store <8 x i32> %2928, <8 x i32>* %2915, align 32
  %2929 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2921, i32 %2886) #7
  store <8 x i32> %2929, <8 x i32>* %2919, align 32
  %2930 = shl <8 x i32> %2922, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  store <8 x i32> %2930, <8 x i32>* %2851, align 32
  %2931 = shl <8 x i32> %2923, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  store <8 x i32> %2931, <8 x i32>* %2854, align 32
  %2932 = shl <8 x i32> %2924, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  store <8 x i32> %2932, <8 x i32>* %2857, align 32
  %2933 = shl <8 x i32> %2925, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  store <8 x i32> %2933, <8 x i32>* %2860, align 32
  %2934 = shl <8 x i32> %2926, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  store <8 x i32> %2934, <8 x i32>* %2863, align 32
  %2935 = shl <8 x i32> %2927, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  store <8 x i32> %2935, <8 x i32>* %2866, align 32
  %2936 = shl <8 x i32> %2928, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  store <8 x i32> %2936, <8 x i32>* %2869, align 32
  %2937 = shl <8 x i32> %2929, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  store <8 x i32> %2937, <8 x i32>* %2872, align 32
  br label %3186

2938:                                             ; preds = %5
  %2939 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 0
  %2940 = load i8, i8* %11, align 1
  %2941 = sext i8 %2940 to i32
  %2942 = bitcast i16* %0 to <8 x i16>*
  %2943 = load <8 x i16>, <8 x i16>* %2942, align 16
  %2944 = sext i32 %2 to i64
  %2945 = getelementptr inbounds i16, i16* %0, i64 %2944
  %2946 = bitcast i16* %2945 to <8 x i16>*
  %2947 = load <8 x i16>, <8 x i16>* %2946, align 16
  %2948 = shl nsw i32 %2, 1
  %2949 = sext i32 %2948 to i64
  %2950 = getelementptr inbounds i16, i16* %0, i64 %2949
  %2951 = bitcast i16* %2950 to <8 x i16>*
  %2952 = load <8 x i16>, <8 x i16>* %2951, align 16
  %2953 = mul nsw i32 %2, 3
  %2954 = sext i32 %2953 to i64
  %2955 = getelementptr inbounds i16, i16* %0, i64 %2954
  %2956 = bitcast i16* %2955 to <8 x i16>*
  %2957 = load <8 x i16>, <8 x i16>* %2956, align 16
  %2958 = shl nsw i32 %2, 2
  %2959 = sext i32 %2958 to i64
  %2960 = getelementptr inbounds i16, i16* %0, i64 %2959
  %2961 = bitcast i16* %2960 to <8 x i16>*
  %2962 = load <8 x i16>, <8 x i16>* %2961, align 16
  %2963 = mul nsw i32 %2, 5
  %2964 = sext i32 %2963 to i64
  %2965 = getelementptr inbounds i16, i16* %0, i64 %2964
  %2966 = bitcast i16* %2965 to <8 x i16>*
  %2967 = load <8 x i16>, <8 x i16>* %2966, align 16
  %2968 = mul nsw i32 %2, 6
  %2969 = sext i32 %2968 to i64
  %2970 = getelementptr inbounds i16, i16* %0, i64 %2969
  %2971 = bitcast i16* %2970 to <8 x i16>*
  %2972 = load <8 x i16>, <8 x i16>* %2971, align 16
  %2973 = mul nsw i32 %2, 7
  %2974 = sext i32 %2973 to i64
  %2975 = getelementptr inbounds i16, i16* %0, i64 %2974
  %2976 = bitcast i16* %2975 to <8 x i16>*
  %2977 = load <8 x i16>, <8 x i16>* %2976, align 16
  %2978 = shufflevector <8 x i16> %2943, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %2979 = shufflevector <8 x i16> %2978, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %2980 = bitcast <8 x i16> %2979 to <4 x i32>
  %2981 = shufflevector <4 x i32> %2980, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %2982 = bitcast <4 x i32> %2981 to <8 x i16>
  %2983 = sext <8 x i16> %2982 to <8 x i32>
  %2984 = bitcast [8 x <4 x i64>]* %7 to <8 x i32>*
  %2985 = shufflevector <8 x i16> %2947, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %2986 = shufflevector <8 x i16> %2985, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %2987 = bitcast <8 x i16> %2986 to <4 x i32>
  %2988 = shufflevector <4 x i32> %2987, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %2989 = bitcast <4 x i32> %2988 to <8 x i16>
  %2990 = sext <8 x i16> %2989 to <8 x i32>
  %2991 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 1
  %2992 = bitcast <4 x i64>* %2991 to <8 x i32>*
  %2993 = shufflevector <8 x i16> %2952, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %2994 = shufflevector <8 x i16> %2993, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %2995 = bitcast <8 x i16> %2994 to <4 x i32>
  %2996 = shufflevector <4 x i32> %2995, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %2997 = bitcast <4 x i32> %2996 to <8 x i16>
  %2998 = sext <8 x i16> %2997 to <8 x i32>
  %2999 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 2
  %3000 = bitcast <4 x i64>* %2999 to <8 x i32>*
  %3001 = shufflevector <8 x i16> %2957, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %3002 = shufflevector <8 x i16> %3001, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %3003 = bitcast <8 x i16> %3002 to <4 x i32>
  %3004 = shufflevector <4 x i32> %3003, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %3005 = bitcast <4 x i32> %3004 to <8 x i16>
  %3006 = sext <8 x i16> %3005 to <8 x i32>
  %3007 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 3
  %3008 = bitcast <4 x i64>* %3007 to <8 x i32>*
  %3009 = shufflevector <8 x i16> %2962, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %3010 = shufflevector <8 x i16> %3009, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %3011 = bitcast <8 x i16> %3010 to <4 x i32>
  %3012 = shufflevector <4 x i32> %3011, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %3013 = bitcast <4 x i32> %3012 to <8 x i16>
  %3014 = sext <8 x i16> %3013 to <8 x i32>
  %3015 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 4
  %3016 = bitcast <4 x i64>* %3015 to <8 x i32>*
  %3017 = shufflevector <8 x i16> %2967, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %3018 = shufflevector <8 x i16> %3017, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %3019 = bitcast <8 x i16> %3018 to <4 x i32>
  %3020 = shufflevector <4 x i32> %3019, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %3021 = bitcast <4 x i32> %3020 to <8 x i16>
  %3022 = sext <8 x i16> %3021 to <8 x i32>
  %3023 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 5
  %3024 = bitcast <4 x i64>* %3023 to <8 x i32>*
  %3025 = shufflevector <8 x i16> %2972, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %3026 = shufflevector <8 x i16> %3025, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %3027 = bitcast <8 x i16> %3026 to <4 x i32>
  %3028 = shufflevector <4 x i32> %3027, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %3029 = bitcast <4 x i32> %3028 to <8 x i16>
  %3030 = sext <8 x i16> %3029 to <8 x i32>
  %3031 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 6
  %3032 = bitcast <4 x i64>* %3031 to <8 x i32>*
  %3033 = shufflevector <8 x i16> %2977, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %3034 = shufflevector <8 x i16> %3033, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %3035 = bitcast <8 x i16> %3034 to <4 x i32>
  %3036 = shufflevector <4 x i32> %3035, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %3037 = bitcast <4 x i32> %3036 to <8 x i16>
  %3038 = sext <8 x i16> %3037 to <8 x i32>
  %3039 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %7, i64 0, i64 7
  %3040 = bitcast <4 x i64>* %3039 to <8 x i32>*
  %3041 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2983, i32 %2941) #7
  store <8 x i32> %3041, <8 x i32>* %2984, align 32
  %3042 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2990, i32 %2941) #7
  store <8 x i32> %3042, <8 x i32>* %2992, align 32
  %3043 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2998, i32 %2941) #7
  store <8 x i32> %3043, <8 x i32>* %3000, align 32
  %3044 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %3006, i32 %2941) #7
  store <8 x i32> %3044, <8 x i32>* %3008, align 32
  %3045 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %3014, i32 %2941) #7
  store <8 x i32> %3045, <8 x i32>* %3016, align 32
  %3046 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %3022, i32 %2941) #7
  store <8 x i32> %3046, <8 x i32>* %3024, align 32
  %3047 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %3030, i32 %2941) #7
  store <8 x i32> %3047, <8 x i32>* %3032, align 32
  %3048 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %3038, i32 %2941) #7
  store <8 x i32> %3048, <8 x i32>* %3040, align 32
  %3049 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 0
  %3050 = shl <8 x i32> %3041, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %3051 = bitcast [8 x <4 x i64>]* %9 to <8 x i32>*
  store <8 x i32> %3050, <8 x i32>* %3051, align 32
  %3052 = shl <8 x i32> %3042, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %3053 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 1
  %3054 = bitcast <4 x i64>* %3053 to <8 x i32>*
  store <8 x i32> %3052, <8 x i32>* %3054, align 32
  %3055 = shl <8 x i32> %3043, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %3056 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 2
  %3057 = bitcast <4 x i64>* %3056 to <8 x i32>*
  store <8 x i32> %3055, <8 x i32>* %3057, align 32
  %3058 = shl <8 x i32> %3044, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %3059 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 3
  %3060 = bitcast <4 x i64>* %3059 to <8 x i32>*
  store <8 x i32> %3058, <8 x i32>* %3060, align 32
  %3061 = shl <8 x i32> %3045, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %3062 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 4
  %3063 = bitcast <4 x i64>* %3062 to <8 x i32>*
  store <8 x i32> %3061, <8 x i32>* %3063, align 32
  %3064 = shl <8 x i32> %3046, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %3065 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 5
  %3066 = bitcast <4 x i64>* %3065 to <8 x i32>*
  store <8 x i32> %3064, <8 x i32>* %3066, align 32
  %3067 = shl <8 x i32> %3047, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %3068 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 6
  %3069 = bitcast <4 x i64>* %3068 to <8 x i32>*
  store <8 x i32> %3067, <8 x i32>* %3069, align 32
  %3070 = shl <8 x i32> %3048, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %3071 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %9, i64 0, i64 7
  %3072 = bitcast <4 x i64>* %3071 to <8 x i32>*
  store <8 x i32> %3070, <8 x i32>* %3072, align 32
  %3073 = getelementptr inbounds i8, i8* %11, i64 1
  %3074 = load i8, i8* %3073, align 1
  %3075 = sext i8 %3074 to i32
  %3076 = sub nsw i32 0, %3075
  %3077 = xor i32 %3075, -1
  %3078 = shl i32 1, %3077
  %3079 = insertelement <8 x i32> undef, i32 %3078, i32 0
  %3080 = shufflevector <8 x i32> %3079, <8 x i32> undef, <8 x i32> zeroinitializer
  %3081 = add <8 x i32> %3080, %3050
  %3082 = add <8 x i32> %3080, %3052
  %3083 = add <8 x i32> %3080, %3055
  %3084 = add <8 x i32> %3080, %3058
  %3085 = add <8 x i32> %3080, %3061
  %3086 = add <8 x i32> %3080, %3064
  %3087 = add <8 x i32> %3080, %3067
  %3088 = add <8 x i32> %3080, %3070
  %3089 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %3081, i32 %3076) #7
  store <8 x i32> %3089, <8 x i32>* %3051, align 32
  %3090 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %3082, i32 %3076) #7
  store <8 x i32> %3090, <8 x i32>* %3054, align 32
  %3091 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %3083, i32 %3076) #7
  store <8 x i32> %3091, <8 x i32>* %3057, align 32
  %3092 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %3084, i32 %3076) #7
  store <8 x i32> %3092, <8 x i32>* %3060, align 32
  %3093 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %3085, i32 %3076) #7
  store <8 x i32> %3093, <8 x i32>* %3063, align 32
  %3094 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %3086, i32 %3076) #7
  store <8 x i32> %3094, <8 x i32>* %3066, align 32
  %3095 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %3087, i32 %3076) #7
  store <8 x i32> %3095, <8 x i32>* %3069, align 32
  %3096 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %3088, i32 %3076) #7
  store <8 x i32> %3096, <8 x i32>* %3072, align 32
  %3097 = shufflevector <8 x i32> %3089, <8 x i32> %3090, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3098 = bitcast <8 x i32> %3097 to <4 x i64>
  %3099 = shufflevector <8 x i32> %3089, <8 x i32> %3090, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3100 = bitcast <8 x i32> %3099 to <4 x i64>
  %3101 = shufflevector <8 x i32> %3091, <8 x i32> %3092, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3102 = bitcast <8 x i32> %3101 to <4 x i64>
  %3103 = shufflevector <8 x i32> %3091, <8 x i32> %3092, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3104 = bitcast <8 x i32> %3103 to <4 x i64>
  %3105 = shufflevector <8 x i32> %3093, <8 x i32> %3094, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3106 = bitcast <8 x i32> %3105 to <4 x i64>
  %3107 = shufflevector <8 x i32> %3093, <8 x i32> %3094, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3108 = bitcast <8 x i32> %3107 to <4 x i64>
  %3109 = shufflevector <8 x i32> %3095, <8 x i32> %3096, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3110 = bitcast <8 x i32> %3109 to <4 x i64>
  %3111 = shufflevector <8 x i32> %3095, <8 x i32> %3096, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3112 = bitcast <8 x i32> %3111 to <4 x i64>
  %3113 = shufflevector <4 x i64> %3098, <4 x i64> %3102, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3114 = shufflevector <4 x i64> %3106, <4 x i64> %3110, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3115 = bitcast <4 x i64> %3113 to <8 x i32>
  %3116 = bitcast <4 x i64> %3114 to <8 x i32>
  %3117 = shufflevector <8 x i32> %3115, <8 x i32> %3116, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %3117, <8 x i32>* %2984, align 32
  %3118 = shufflevector <8 x i32> %3115, <8 x i32> %3116, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %3118, <8 x i32>* %3016, align 32
  %3119 = shufflevector <4 x i64> %3098, <4 x i64> %3102, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3120 = shufflevector <4 x i64> %3106, <4 x i64> %3110, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3121 = bitcast <4 x i64> %3119 to <8 x i32>
  %3122 = bitcast <4 x i64> %3120 to <8 x i32>
  %3123 = shufflevector <8 x i32> %3121, <8 x i32> %3122, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %3123, <8 x i32>* %2992, align 32
  %3124 = shufflevector <8 x i32> %3121, <8 x i32> %3122, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %3124, <8 x i32>* %3024, align 32
  %3125 = shufflevector <4 x i64> %3100, <4 x i64> %3104, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3126 = shufflevector <4 x i64> %3108, <4 x i64> %3112, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3127 = bitcast <4 x i64> %3125 to <8 x i32>
  %3128 = bitcast <4 x i64> %3126 to <8 x i32>
  %3129 = shufflevector <8 x i32> %3127, <8 x i32> %3128, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %3129, <8 x i32>* %3000, align 32
  %3130 = shufflevector <8 x i32> %3127, <8 x i32> %3128, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %3130, <8 x i32>* %3032, align 32
  %3131 = shufflevector <4 x i64> %3100, <4 x i64> %3104, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3132 = shufflevector <4 x i64> %3108, <4 x i64> %3112, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3133 = bitcast <4 x i64> %3131 to <8 x i32>
  %3134 = bitcast <4 x i64> %3132 to <8 x i32>
  %3135 = shufflevector <8 x i32> %3133, <8 x i32> %3134, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %3135, <8 x i32>* %3008, align 32
  %3136 = shufflevector <8 x i32> %3133, <8 x i32> %3134, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %3136, <8 x i32>* %3040, align 32
  %3137 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 1, i64 1), align 1
  call void @fadst8_avx2(<4 x i64>* nonnull %2939, <4 x i64>* nonnull %3049, i8 signext %3137, i32 1, i32 1)
  %3138 = load <8 x i32>, <8 x i32>* %3051, align 32
  %3139 = load <8 x i32>, <8 x i32>* %3054, align 32
  %3140 = shufflevector <8 x i32> %3138, <8 x i32> %3139, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3141 = bitcast <8 x i32> %3140 to <4 x i64>
  %3142 = shufflevector <8 x i32> %3138, <8 x i32> %3139, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3143 = bitcast <8 x i32> %3142 to <4 x i64>
  %3144 = load <8 x i32>, <8 x i32>* %3057, align 32
  %3145 = load <8 x i32>, <8 x i32>* %3060, align 32
  %3146 = shufflevector <8 x i32> %3144, <8 x i32> %3145, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3147 = bitcast <8 x i32> %3146 to <4 x i64>
  %3148 = shufflevector <8 x i32> %3144, <8 x i32> %3145, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3149 = bitcast <8 x i32> %3148 to <4 x i64>
  %3150 = load <8 x i32>, <8 x i32>* %3063, align 32
  %3151 = load <8 x i32>, <8 x i32>* %3066, align 32
  %3152 = shufflevector <8 x i32> %3150, <8 x i32> %3151, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3153 = bitcast <8 x i32> %3152 to <4 x i64>
  %3154 = shufflevector <8 x i32> %3150, <8 x i32> %3151, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3155 = bitcast <8 x i32> %3154 to <4 x i64>
  %3156 = load <8 x i32>, <8 x i32>* %3069, align 32
  %3157 = load <8 x i32>, <8 x i32>* %3072, align 32
  %3158 = shufflevector <8 x i32> %3156, <8 x i32> %3157, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3159 = bitcast <8 x i32> %3158 to <4 x i64>
  %3160 = shufflevector <8 x i32> %3156, <8 x i32> %3157, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3161 = bitcast <8 x i32> %3160 to <4 x i64>
  %3162 = shufflevector <4 x i64> %3141, <4 x i64> %3147, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3163 = shufflevector <4 x i64> %3153, <4 x i64> %3159, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3164 = bitcast <4 x i64> %3162 to <8 x i32>
  %3165 = bitcast <4 x i64> %3163 to <8 x i32>
  %3166 = shufflevector <8 x i32> %3164, <8 x i32> %3165, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %3166, <8 x i32>* %2984, align 32
  %3167 = shufflevector <8 x i32> %3164, <8 x i32> %3165, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %3167, <8 x i32>* %3016, align 32
  %3168 = shufflevector <4 x i64> %3141, <4 x i64> %3147, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3169 = shufflevector <4 x i64> %3153, <4 x i64> %3159, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3170 = bitcast <4 x i64> %3168 to <8 x i32>
  %3171 = bitcast <4 x i64> %3169 to <8 x i32>
  %3172 = shufflevector <8 x i32> %3170, <8 x i32> %3171, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %3172, <8 x i32>* %2992, align 32
  %3173 = shufflevector <8 x i32> %3170, <8 x i32> %3171, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %3173, <8 x i32>* %3024, align 32
  %3174 = shufflevector <4 x i64> %3143, <4 x i64> %3149, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3175 = shufflevector <4 x i64> %3155, <4 x i64> %3161, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3176 = bitcast <4 x i64> %3174 to <8 x i32>
  %3177 = bitcast <4 x i64> %3175 to <8 x i32>
  %3178 = shufflevector <8 x i32> %3176, <8 x i32> %3177, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %3178, <8 x i32>* %3000, align 32
  %3179 = shufflevector <8 x i32> %3176, <8 x i32> %3177, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %3179, <8 x i32>* %3032, align 32
  %3180 = shufflevector <4 x i64> %3143, <4 x i64> %3149, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3181 = shufflevector <4 x i64> %3155, <4 x i64> %3161, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3182 = bitcast <4 x i64> %3180 to <8 x i32>
  %3183 = bitcast <4 x i64> %3181 to <8 x i32>
  %3184 = shufflevector <8 x i32> %3182, <8 x i32> %3183, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %3184, <8 x i32>* %3008, align 32
  %3185 = shufflevector <8 x i32> %3182, <8 x i32> %3183, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %3185, <8 x i32>* %3040, align 32
  br label %3186

3186:                                             ; preds = %12, %221, %430, %639, %848, %1057, %1306, %1555, %1804, %2013, %2138, %2266, %2474, %2602, %2810, %2938
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 32 %6, i8* nonnull align 32 %8, i64 256, i1 false)
  br label %3187

3187:                                             ; preds = %3186, %5
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %10) #7
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %8) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nounwind ssp uwtable
define internal void @fdct8_avx2(<4 x i64>* nocapture readonly, <4 x i64>* nocapture, i8 signext, i32, i32) #2 {
  %6 = sext i8 %2 to i32
  %7 = add nsw i32 %6, -10
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 32
  %10 = load i32, i32* %9, align 16
  %11 = insertelement <8 x i32> undef, i32 %10, i32 0
  %12 = shufflevector <8 x i32> %11, <8 x i32> undef, <8 x i32> zeroinitializer
  %13 = sub nsw i32 0, %10
  %14 = insertelement <8 x i32> undef, i32 %13, i32 0
  %15 = shufflevector <8 x i32> %14, <8 x i32> undef, <8 x i32> zeroinitializer
  %16 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 48
  %17 = load i32, i32* %16, align 16
  %18 = insertelement <8 x i32> undef, i32 %17, i32 0
  %19 = shufflevector <8 x i32> %18, <8 x i32> undef, <8 x i32> zeroinitializer
  %20 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 16
  %21 = load i32, i32* %20, align 16
  %22 = insertelement <8 x i32> undef, i32 %21, i32 0
  %23 = shufflevector <8 x i32> %22, <8 x i32> undef, <8 x i32> zeroinitializer
  %24 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 56
  %25 = load i32, i32* %24, align 16
  %26 = insertelement <8 x i32> undef, i32 %25, i32 0
  %27 = shufflevector <8 x i32> %26, <8 x i32> undef, <8 x i32> zeroinitializer
  %28 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 8
  %29 = load i32, i32* %28, align 16
  %30 = insertelement <8 x i32> undef, i32 %29, i32 0
  %31 = shufflevector <8 x i32> %30, <8 x i32> undef, <8 x i32> zeroinitializer
  %32 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 24
  %33 = load i32, i32* %32, align 16
  %34 = insertelement <8 x i32> undef, i32 %33, i32 0
  %35 = shufflevector <8 x i32> %34, <8 x i32> undef, <8 x i32> zeroinitializer
  %36 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 40
  %37 = load i32, i32* %36, align 16
  %38 = insertelement <8 x i32> undef, i32 %37, i32 0
  %39 = shufflevector <8 x i32> %38, <8 x i32> undef, <8 x i32> zeroinitializer
  %40 = add nsw i32 %6, -1
  %41 = shl i32 1, %40
  %42 = insertelement <8 x i32> undef, i32 %41, i32 0
  %43 = shufflevector <8 x i32> %42, <8 x i32> undef, <8 x i32> zeroinitializer
  %44 = icmp sgt i32 %3, 0
  br i1 %44, label %45, label %73

45:                                               ; preds = %5
  %46 = mul nsw i32 %3, 7
  %47 = mul nsw i32 %3, 6
  %48 = shl i32 %3, 1
  %49 = mul nsw i32 %3, 5
  %50 = mul nsw i32 %3, 3
  %51 = shl i32 %3, 2
  %52 = mul nsw i32 %4, 7
  %53 = mul nsw i32 %4, 5
  %54 = mul nsw i32 %4, 3
  %55 = shl i32 %4, 2
  %56 = shl i32 %4, 1
  %57 = mul nsw i32 %4, 6
  %58 = sext i32 %57 to i64
  %59 = sext i32 %56 to i64
  %60 = sext i32 %55 to i64
  %61 = sext i32 %54 to i64
  %62 = sext i32 %53 to i64
  %63 = sext i32 %52 to i64
  %64 = sext i32 %4 to i64
  %65 = sext i32 %51 to i64
  %66 = sext i32 %50 to i64
  %67 = sext i32 %49 to i64
  %68 = sext i32 %48 to i64
  %69 = sext i32 %47 to i64
  %70 = sext i32 %3 to i64
  %71 = sext i32 %46 to i64
  %72 = zext i32 %3 to i64
  br label %74

73:                                               ; preds = %74, %5
  ret void

74:                                               ; preds = %74, %45
  %75 = phi i64 [ 0, %45 ], [ %194, %74 ]
  %76 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %75
  %77 = bitcast <4 x i64>* %76 to <8 x i32>*
  %78 = load <8 x i32>, <8 x i32>* %77, align 32
  %79 = add nsw i64 %75, %71
  %80 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %79
  %81 = bitcast <4 x i64>* %80 to <8 x i32>*
  %82 = load <8 x i32>, <8 x i32>* %81, align 32
  %83 = add <8 x i32> %82, %78
  %84 = sub <8 x i32> %78, %82
  %85 = add nsw i64 %75, %70
  %86 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %85
  %87 = bitcast <4 x i64>* %86 to <8 x i32>*
  %88 = load <8 x i32>, <8 x i32>* %87, align 32
  %89 = add nsw i64 %75, %69
  %90 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %89
  %91 = bitcast <4 x i64>* %90 to <8 x i32>*
  %92 = load <8 x i32>, <8 x i32>* %91, align 32
  %93 = add <8 x i32> %92, %88
  %94 = sub <8 x i32> %88, %92
  %95 = add nsw i64 %75, %68
  %96 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %95
  %97 = bitcast <4 x i64>* %96 to <8 x i32>*
  %98 = load <8 x i32>, <8 x i32>* %97, align 32
  %99 = add nsw i64 %75, %67
  %100 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %99
  %101 = bitcast <4 x i64>* %100 to <8 x i32>*
  %102 = load <8 x i32>, <8 x i32>* %101, align 32
  %103 = add <8 x i32> %102, %98
  %104 = sub <8 x i32> %98, %102
  %105 = add nsw i64 %75, %66
  %106 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %105
  %107 = bitcast <4 x i64>* %106 to <8 x i32>*
  %108 = load <8 x i32>, <8 x i32>* %107, align 32
  %109 = add nsw i64 %75, %65
  %110 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %109
  %111 = bitcast <4 x i64>* %110 to <8 x i32>*
  %112 = load <8 x i32>, <8 x i32>* %111, align 32
  %113 = add <8 x i32> %112, %108
  %114 = sub <8 x i32> %108, %112
  %115 = add <8 x i32> %113, %83
  %116 = sub <8 x i32> %83, %113
  %117 = add <8 x i32> %103, %93
  %118 = sub <8 x i32> %93, %103
  %119 = mul <8 x i32> %104, %15
  %120 = mul <8 x i32> %94, %12
  %121 = add <8 x i32> %120, %43
  %122 = add <8 x i32> %121, %119
  %123 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %122, i32 %6) #7
  %124 = mul <8 x i32> %104, %12
  %125 = mul <8 x i32> %15, %94
  %126 = sub <8 x i32> %43, %125
  %127 = add <8 x i32> %126, %124
  %128 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %127, i32 %6) #7
  %129 = mul <8 x i32> %115, %12
  %130 = mul <8 x i32> %117, %12
  %131 = add <8 x i32> %130, %43
  %132 = add <8 x i32> %131, %129
  %133 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %132, i32 %6) #7
  %134 = sub <8 x i32> %43, %130
  %135 = add <8 x i32> %134, %129
  %136 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %135, i32 %6) #7
  %137 = mul <8 x i32> %118, %19
  %138 = mul <8 x i32> %116, %23
  %139 = add <8 x i32> %137, %43
  %140 = add <8 x i32> %139, %138
  %141 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %140, i32 %6) #7
  %142 = mul <8 x i32> %116, %19
  %143 = mul <8 x i32> %23, %118
  %144 = sub <8 x i32> %43, %143
  %145 = add <8 x i32> %144, %142
  %146 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %145, i32 %6) #7
  %147 = add <8 x i32> %123, %114
  %148 = sub <8 x i32> %114, %123
  %149 = sub <8 x i32> %84, %128
  %150 = add <8 x i32> %128, %84
  %151 = mul <8 x i32> %147, %27
  %152 = mul <8 x i32> %150, %31
  %153 = add <8 x i32> %151, %43
  %154 = add <8 x i32> %153, %152
  %155 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %154, i32 %6) #7
  %156 = add nsw i64 %75, %64
  %157 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %156
  %158 = bitcast <4 x i64>* %157 to <8 x i32>*
  store <8 x i32> %155, <8 x i32>* %158, align 32
  %159 = mul <8 x i32> %150, %27
  %160 = mul <8 x i32> %31, %147
  %161 = sub <8 x i32> %43, %160
  %162 = add <8 x i32> %161, %159
  %163 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %162, i32 %6) #7
  %164 = add nsw i64 %75, %63
  %165 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %164
  %166 = bitcast <4 x i64>* %165 to <8 x i32>*
  store <8 x i32> %163, <8 x i32>* %166, align 32
  %167 = mul <8 x i32> %148, %35
  %168 = mul <8 x i32> %149, %39
  %169 = add <8 x i32> %167, %43
  %170 = add <8 x i32> %169, %168
  %171 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %170, i32 %6) #7
  %172 = add nsw i64 %75, %62
  %173 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %172
  %174 = bitcast <4 x i64>* %173 to <8 x i32>*
  store <8 x i32> %171, <8 x i32>* %174, align 32
  %175 = mul <8 x i32> %149, %35
  %176 = mul <8 x i32> %39, %148
  %177 = sub <8 x i32> %43, %176
  %178 = add <8 x i32> %177, %175
  %179 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %178, i32 %6) #7
  %180 = add nsw i64 %75, %61
  %181 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %180
  %182 = bitcast <4 x i64>* %181 to <8 x i32>*
  store <8 x i32> %179, <8 x i32>* %182, align 32
  %183 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %75
  %184 = bitcast <4 x i64>* %183 to <8 x i32>*
  store <8 x i32> %133, <8 x i32>* %184, align 32
  %185 = add nsw i64 %75, %60
  %186 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %185
  %187 = bitcast <4 x i64>* %186 to <8 x i32>*
  store <8 x i32> %136, <8 x i32>* %187, align 32
  %188 = add nsw i64 %75, %59
  %189 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %188
  %190 = bitcast <4 x i64>* %189 to <8 x i32>*
  store <8 x i32> %141, <8 x i32>* %190, align 32
  %191 = add nsw i64 %75, %58
  %192 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %191
  %193 = bitcast <4 x i64>* %192 to <8 x i32>*
  store <8 x i32> %146, <8 x i32>* %193, align 32
  %194 = add nuw nsw i64 %75, 1
  %195 = icmp eq i64 %194, %72
  br i1 %195, label %73, label %74
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @fadst8_avx2(<4 x i64>* nocapture readonly, <4 x i64>* nocapture, i8 signext, i32, i32) #2 {
  %6 = sext i8 %2 to i32
  %7 = add nsw i32 %6, -10
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 32
  %10 = load i32, i32* %9, align 16
  %11 = insertelement <8 x i32> undef, i32 %10, i32 0
  %12 = shufflevector <8 x i32> %11, <8 x i32> undef, <8 x i32> zeroinitializer
  %13 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 16
  %14 = load i32, i32* %13, align 16
  %15 = insertelement <8 x i32> undef, i32 %14, i32 0
  %16 = shufflevector <8 x i32> %15, <8 x i32> undef, <8 x i32> zeroinitializer
  %17 = sub nsw i32 0, %14
  %18 = insertelement <8 x i32> undef, i32 %17, i32 0
  %19 = shufflevector <8 x i32> %18, <8 x i32> undef, <8 x i32> zeroinitializer
  %20 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 48
  %21 = load i32, i32* %20, align 16
  %22 = insertelement <8 x i32> undef, i32 %21, i32 0
  %23 = shufflevector <8 x i32> %22, <8 x i32> undef, <8 x i32> zeroinitializer
  %24 = sub nsw i32 0, %21
  %25 = insertelement <8 x i32> undef, i32 %24, i32 0
  %26 = shufflevector <8 x i32> %25, <8 x i32> undef, <8 x i32> zeroinitializer
  %27 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 4
  %28 = load i32, i32* %27, align 16
  %29 = insertelement <8 x i32> undef, i32 %28, i32 0
  %30 = shufflevector <8 x i32> %29, <8 x i32> undef, <8 x i32> zeroinitializer
  %31 = sub nsw i32 0, %28
  %32 = insertelement <8 x i32> undef, i32 %31, i32 0
  %33 = shufflevector <8 x i32> %32, <8 x i32> undef, <8 x i32> zeroinitializer
  %34 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 60
  %35 = load i32, i32* %34, align 16
  %36 = insertelement <8 x i32> undef, i32 %35, i32 0
  %37 = shufflevector <8 x i32> %36, <8 x i32> undef, <8 x i32> zeroinitializer
  %38 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 20
  %39 = load i32, i32* %38, align 16
  %40 = insertelement <8 x i32> undef, i32 %39, i32 0
  %41 = shufflevector <8 x i32> %40, <8 x i32> undef, <8 x i32> zeroinitializer
  %42 = sub nsw i32 0, %39
  %43 = insertelement <8 x i32> undef, i32 %42, i32 0
  %44 = shufflevector <8 x i32> %43, <8 x i32> undef, <8 x i32> zeroinitializer
  %45 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 44
  %46 = load i32, i32* %45, align 16
  %47 = insertelement <8 x i32> undef, i32 %46, i32 0
  %48 = shufflevector <8 x i32> %47, <8 x i32> undef, <8 x i32> zeroinitializer
  %49 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 28
  %50 = load i32, i32* %49, align 16
  %51 = insertelement <8 x i32> undef, i32 %50, i32 0
  %52 = shufflevector <8 x i32> %51, <8 x i32> undef, <8 x i32> zeroinitializer
  %53 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 36
  %54 = load i32, i32* %53, align 16
  %55 = insertelement <8 x i32> undef, i32 %54, i32 0
  %56 = shufflevector <8 x i32> %55, <8 x i32> undef, <8 x i32> zeroinitializer
  %57 = sub nsw i32 0, %54
  %58 = insertelement <8 x i32> undef, i32 %57, i32 0
  %59 = shufflevector <8 x i32> %58, <8 x i32> undef, <8 x i32> zeroinitializer
  %60 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 52
  %61 = load i32, i32* %60, align 16
  %62 = insertelement <8 x i32> undef, i32 %61, i32 0
  %63 = shufflevector <8 x i32> %62, <8 x i32> undef, <8 x i32> zeroinitializer
  %64 = sub nsw i32 0, %61
  %65 = insertelement <8 x i32> undef, i32 %64, i32 0
  %66 = shufflevector <8 x i32> %65, <8 x i32> undef, <8 x i32> zeroinitializer
  %67 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 12
  %68 = load i32, i32* %67, align 16
  %69 = insertelement <8 x i32> undef, i32 %68, i32 0
  %70 = shufflevector <8 x i32> %69, <8 x i32> undef, <8 x i32> zeroinitializer
  %71 = add nsw i32 %6, -1
  %72 = shl i32 1, %71
  %73 = insertelement <8 x i32> undef, i32 %72, i32 0
  %74 = shufflevector <8 x i32> %73, <8 x i32> undef, <8 x i32> zeroinitializer
  %75 = icmp sgt i32 %3, 0
  br i1 %75, label %76, label %104

76:                                               ; preds = %5
  %77 = mul nsw i32 %3, 7
  %78 = mul nsw i32 %3, 3
  %79 = shl i32 %3, 2
  %80 = mul nsw i32 %3, 6
  %81 = shl i32 %3, 1
  %82 = mul nsw i32 %3, 5
  %83 = shl i32 %4, 1
  %84 = mul nsw i32 %4, 3
  %85 = shl i32 %4, 2
  %86 = mul nsw i32 %4, 5
  %87 = mul nsw i32 %4, 6
  %88 = mul nsw i32 %4, 7
  %89 = sext i32 %88 to i64
  %90 = sext i32 %87 to i64
  %91 = sext i32 %86 to i64
  %92 = sext i32 %85 to i64
  %93 = sext i32 %84 to i64
  %94 = sext i32 %83 to i64
  %95 = sext i32 %4 to i64
  %96 = sext i32 %82 to i64
  %97 = sext i32 %81 to i64
  %98 = sext i32 %80 to i64
  %99 = sext i32 %3 to i64
  %100 = sext i32 %79 to i64
  %101 = sext i32 %78 to i64
  %102 = sext i32 %77 to i64
  %103 = zext i32 %3 to i64
  br label %105

104:                                              ; preds = %105, %5
  ret void

105:                                              ; preds = %105, %76
  %106 = phi i64 [ 0, %76 ], [ %253, %105 ]
  %107 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %106
  %108 = bitcast <4 x i64>* %107 to <8 x i32>*
  %109 = load <8 x i32>, <8 x i32>* %108, align 32
  %110 = add nsw i64 %106, %102
  %111 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %110
  %112 = bitcast <4 x i64>* %111 to <8 x i32>*
  %113 = load <8 x i32>, <8 x i32>* %112, align 32
  %114 = add nsw i64 %106, %101
  %115 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %114
  %116 = bitcast <4 x i64>* %115 to <8 x i32>*
  %117 = load <8 x i32>, <8 x i32>* %116, align 32
  %118 = add nsw i64 %106, %100
  %119 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %118
  %120 = bitcast <4 x i64>* %119 to <8 x i32>*
  %121 = load <8 x i32>, <8 x i32>* %120, align 32
  %122 = add nsw i64 %106, %99
  %123 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %122
  %124 = bitcast <4 x i64>* %123 to <8 x i32>*
  %125 = load <8 x i32>, <8 x i32>* %124, align 32
  %126 = add nsw i64 %106, %98
  %127 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %126
  %128 = bitcast <4 x i64>* %127 to <8 x i32>*
  %129 = load <8 x i32>, <8 x i32>* %128, align 32
  %130 = add nsw i64 %106, %97
  %131 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %130
  %132 = bitcast <4 x i64>* %131 to <8 x i32>*
  %133 = load <8 x i32>, <8 x i32>* %132, align 32
  %134 = add nsw i64 %106, %96
  %135 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %134
  %136 = bitcast <4 x i64>* %135 to <8 x i32>*
  %137 = load <8 x i32>, <8 x i32>* %136, align 32
  %138 = mul <8 x i32> %12, %117
  %139 = mul <8 x i32> %121, %12
  %140 = sub <8 x i32> %74, %138
  %141 = add <8 x i32> %140, %139
  %142 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %141, i32 %6) #7
  %143 = sub <8 x i32> %140, %139
  %144 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %143, i32 %6) #7
  %145 = mul <8 x i32> %133, %12
  %146 = mul <8 x i32> %137, %12
  %147 = add <8 x i32> %145, %74
  %148 = sub <8 x i32> %147, %146
  %149 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %148, i32 %6) #7
  %150 = add <8 x i32> %147, %146
  %151 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %150, i32 %6) #7
  %152 = add <8 x i32> %142, %109
  %153 = sub <8 x i32> %144, %113
  %154 = sub <8 x i32> %109, %142
  %155 = add <8 x i32> %144, %113
  %156 = sub <8 x i32> zeroinitializer, %155
  %157 = sub <8 x i32> %149, %125
  %158 = add <8 x i32> %151, %129
  %159 = add <8 x i32> %149, %125
  %160 = sub <8 x i32> zeroinitializer, %159
  %161 = sub <8 x i32> %129, %151
  %162 = mul <8 x i32> %157, %16
  %163 = mul <8 x i32> %158, %23
  %164 = add <8 x i32> %162, %74
  %165 = add <8 x i32> %164, %163
  %166 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %165, i32 %6) #7
  %167 = mul <8 x i32> %157, %23
  %168 = mul <8 x i32> %158, %19
  %169 = add <8 x i32> %167, %74
  %170 = add <8 x i32> %169, %168
  %171 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %170, i32 %6) #7
  %172 = mul <8 x i32> %26, %160
  %173 = mul <8 x i32> %161, %16
  %174 = add <8 x i32> %172, %74
  %175 = add <8 x i32> %174, %173
  %176 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %175, i32 %6) #7
  %177 = mul <8 x i32> %16, %160
  %178 = mul <8 x i32> %161, %23
  %179 = add <8 x i32> %177, %74
  %180 = add <8 x i32> %179, %178
  %181 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %180, i32 %6) #7
  %182 = add <8 x i32> %166, %152
  %183 = add <8 x i32> %171, %153
  %184 = add <8 x i32> %176, %154
  %185 = sub <8 x i32> %181, %155
  %186 = sub <8 x i32> %152, %166
  %187 = sub <8 x i32> %153, %171
  %188 = sub <8 x i32> %154, %176
  %189 = sub <8 x i32> %156, %181
  %190 = mul <8 x i32> %182, %30
  %191 = mul <8 x i32> %183, %37
  %192 = add <8 x i32> %190, %74
  %193 = add <8 x i32> %192, %191
  %194 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %193, i32 %6) #7
  %195 = mul <8 x i32> %182, %37
  %196 = mul <8 x i32> %183, %33
  %197 = add <8 x i32> %195, %74
  %198 = add <8 x i32> %197, %196
  %199 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %198, i32 %6) #7
  %200 = mul <8 x i32> %184, %41
  %201 = mul <8 x i32> %185, %48
  %202 = add <8 x i32> %200, %74
  %203 = add <8 x i32> %202, %201
  %204 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %203, i32 %6) #7
  %205 = mul <8 x i32> %184, %48
  %206 = mul <8 x i32> %185, %44
  %207 = add <8 x i32> %205, %74
  %208 = add <8 x i32> %207, %206
  %209 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %208, i32 %6) #7
  %210 = mul <8 x i32> %186, %56
  %211 = mul <8 x i32> %187, %52
  %212 = add <8 x i32> %210, %74
  %213 = add <8 x i32> %212, %211
  %214 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %213, i32 %6) #7
  %215 = mul <8 x i32> %186, %52
  %216 = mul <8 x i32> %187, %59
  %217 = add <8 x i32> %215, %74
  %218 = add <8 x i32> %217, %216
  %219 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %218, i32 %6) #7
  %220 = mul <8 x i32> %188, %63
  %221 = mul <8 x i32> %189, %70
  %222 = add <8 x i32> %220, %74
  %223 = add <8 x i32> %222, %221
  %224 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %223, i32 %6) #7
  %225 = mul <8 x i32> %188, %70
  %226 = mul <8 x i32> %189, %66
  %227 = add <8 x i32> %225, %74
  %228 = add <8 x i32> %227, %226
  %229 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %228, i32 %6) #7
  %230 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %106
  %231 = bitcast <4 x i64>* %230 to <8 x i32>*
  store <8 x i32> %199, <8 x i32>* %231, align 32
  %232 = add nsw i64 %106, %95
  %233 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %232
  %234 = bitcast <4 x i64>* %233 to <8 x i32>*
  store <8 x i32> %224, <8 x i32>* %234, align 32
  %235 = add nsw i64 %106, %94
  %236 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %235
  %237 = bitcast <4 x i64>* %236 to <8 x i32>*
  store <8 x i32> %209, <8 x i32>* %237, align 32
  %238 = add nsw i64 %106, %93
  %239 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %238
  %240 = bitcast <4 x i64>* %239 to <8 x i32>*
  store <8 x i32> %214, <8 x i32>* %240, align 32
  %241 = add nsw i64 %106, %92
  %242 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %241
  %243 = bitcast <4 x i64>* %242 to <8 x i32>*
  store <8 x i32> %219, <8 x i32>* %243, align 32
  %244 = add nsw i64 %106, %91
  %245 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %244
  %246 = bitcast <4 x i64>* %245 to <8 x i32>*
  store <8 x i32> %204, <8 x i32>* %246, align 32
  %247 = add nsw i64 %106, %90
  %248 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %247
  %249 = bitcast <4 x i64>* %248 to <8 x i32>*
  store <8 x i32> %229, <8 x i32>* %249, align 32
  %250 = add nsw i64 %106, %89
  %251 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %250
  %252 = bitcast <4 x i64>* %251 to <8 x i32>*
  store <8 x i32> %194, <8 x i32>* %252, align 32
  %253 = add nuw nsw i64 %106, 1
  %254 = icmp eq i64 %253, %103
  br i1 %254, label %104, label %105
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @idtx8_avx2(<4 x i64>* nocapture readonly, <4 x i64>* nocapture, i8 signext, i32, i32) #3 {
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %5
  %8 = shl nsw i32 %3, 3
  %9 = sext i32 %8 to i64
  br label %11

10:                                               ; preds = %11, %5
  ret void

11:                                               ; preds = %7, %11
  %12 = phi i64 [ 0, %7 ], [ %68, %11 ]
  %13 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %12
  %14 = bitcast <4 x i64>* %13 to <8 x i32>*
  %15 = load <8 x i32>, <8 x i32>* %14, align 32
  %16 = shl <8 x i32> %15, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %17 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %12
  %18 = bitcast <4 x i64>* %17 to <8 x i32>*
  store <8 x i32> %16, <8 x i32>* %18, align 32
  %19 = or i64 %12, 1
  %20 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %19
  %21 = bitcast <4 x i64>* %20 to <8 x i32>*
  %22 = load <8 x i32>, <8 x i32>* %21, align 32
  %23 = shl <8 x i32> %22, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %24 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %19
  %25 = bitcast <4 x i64>* %24 to <8 x i32>*
  store <8 x i32> %23, <8 x i32>* %25, align 32
  %26 = or i64 %12, 2
  %27 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %26
  %28 = bitcast <4 x i64>* %27 to <8 x i32>*
  %29 = load <8 x i32>, <8 x i32>* %28, align 32
  %30 = shl <8 x i32> %29, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %31 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %26
  %32 = bitcast <4 x i64>* %31 to <8 x i32>*
  store <8 x i32> %30, <8 x i32>* %32, align 32
  %33 = or i64 %12, 3
  %34 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %33
  %35 = bitcast <4 x i64>* %34 to <8 x i32>*
  %36 = load <8 x i32>, <8 x i32>* %35, align 32
  %37 = shl <8 x i32> %36, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %38 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %33
  %39 = bitcast <4 x i64>* %38 to <8 x i32>*
  store <8 x i32> %37, <8 x i32>* %39, align 32
  %40 = or i64 %12, 4
  %41 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %40
  %42 = bitcast <4 x i64>* %41 to <8 x i32>*
  %43 = load <8 x i32>, <8 x i32>* %42, align 32
  %44 = shl <8 x i32> %43, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %45 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %40
  %46 = bitcast <4 x i64>* %45 to <8 x i32>*
  store <8 x i32> %44, <8 x i32>* %46, align 32
  %47 = or i64 %12, 5
  %48 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %47
  %49 = bitcast <4 x i64>* %48 to <8 x i32>*
  %50 = load <8 x i32>, <8 x i32>* %49, align 32
  %51 = shl <8 x i32> %50, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %52 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %47
  %53 = bitcast <4 x i64>* %52 to <8 x i32>*
  store <8 x i32> %51, <8 x i32>* %53, align 32
  %54 = or i64 %12, 6
  %55 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %54
  %56 = bitcast <4 x i64>* %55 to <8 x i32>*
  %57 = load <8 x i32>, <8 x i32>* %56, align 32
  %58 = shl <8 x i32> %57, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %59 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %54
  %60 = bitcast <4 x i64>* %59 to <8 x i32>*
  store <8 x i32> %58, <8 x i32>* %60, align 32
  %61 = or i64 %12, 7
  %62 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %61
  %63 = bitcast <4 x i64>* %62 to <8 x i32>*
  %64 = load <8 x i32>, <8 x i32>* %63, align 32
  %65 = shl <8 x i32> %64, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %66 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %61
  %67 = bitcast <4 x i64>* %66 to <8 x i32>*
  store <8 x i32> %65, <8 x i32>* %67, align 32
  %68 = add nuw nsw i64 %12, 8
  %69 = icmp slt i64 %68, %9
  br i1 %69, label %11, label %10
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_fwd_txfm2d_8x16_avx2(i16* nocapture readonly, i32* nocapture, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = bitcast i32* %1 to i8*
  %7 = alloca [16 x <4 x i64>], align 32
  %8 = bitcast [16 x <4 x i64>]* %7 to i8*
  %9 = alloca [16 x <4 x i64>], align 32
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %8, i8 -86, i64 512, i1 false)
  %10 = bitcast [16 x <4 x i64>]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %10) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %10, i8 -86, i64 512, i1 false)
  %11 = load i8*, i8** getelementptr inbounds ([19 x i8*], [19 x i8*]* @av1_fwd_txfm_shift_ls, i64 0, i64 7), align 8
  %12 = zext i8 %3 to i64
  %13 = getelementptr inbounds [16 x void (<4 x i64>*, <4 x i64>*, i8, i32, i32)*], [16 x void (<4 x i64>*, <4 x i64>*, i8, i32, i32)*]* @col_highbd_txfm8x16_arr, i64 0, i64 %12
  %14 = load void (<4 x i64>*, <4 x i64>*, i8, i32, i32)*, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)** %13, align 8
  %15 = getelementptr inbounds [16 x void (<4 x i64>*, <4 x i64>*, i8, i32, i32)*], [16 x void (<4 x i64>*, <4 x i64>*, i8, i32, i32)*]* @row_highbd_txfm8x8_arr, i64 0, i64 %12
  %16 = load void (<4 x i64>*, <4 x i64>*, i8, i32, i32)*, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)** %15, align 8
  %17 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 1, i64 2), align 1
  switch i8 %3, label %26 [
    i8 6, label %19
    i8 15, label %18
    i8 7, label %18
    i8 5, label %18
    i8 14, label %20
    i8 8, label %20
    i8 4, label %20
  ]

18:                                               ; preds = %5, %5, %5
  br label %26

19:                                               ; preds = %5
  br label %20

20:                                               ; preds = %5, %5, %5, %19
  %21 = phi i1 [ false, %19 ], [ true, %5 ], [ true, %5 ], [ true, %5 ]
  %22 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 0
  %23 = shl nsw i32 %2, 3
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i16, i16* %0, i64 %24
  br label %32

26:                                               ; preds = %5, %18
  %27 = phi i1 [ true, %5 ], [ false, %18 ]
  %28 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 0
  %29 = shl nsw i32 %2, 3
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds i16, i16* %0, i64 %30
  br label %32

32:                                               ; preds = %20, %26
  %33 = phi i16* [ %0, %26 ], [ %25, %20 ]
  %34 = phi i1 [ true, %26 ], [ false, %20 ]
  %35 = phi i1 [ %27, %26 ], [ %21, %20 ]
  %36 = phi <4 x i64>* [ %28, %26 ], [ %22, %20 ]
  %37 = phi i16* [ %31, %26 ], [ %0, %20 ]
  %38 = load i8, i8* %11, align 1
  %39 = sext i8 %38 to i32
  %40 = bitcast i16* %33 to <2 x i64>*
  %41 = load <2 x i64>, <2 x i64>* %40, align 16
  %42 = sext i32 %2 to i64
  %43 = getelementptr inbounds i16, i16* %33, i64 %42
  %44 = bitcast i16* %43 to <2 x i64>*
  %45 = load <2 x i64>, <2 x i64>* %44, align 16
  %46 = shl nsw i32 %2, 1
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i16, i16* %33, i64 %47
  %49 = bitcast i16* %48 to <2 x i64>*
  %50 = load <2 x i64>, <2 x i64>* %49, align 16
  %51 = mul nsw i32 %2, 3
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i16, i16* %33, i64 %52
  %54 = bitcast i16* %53 to <2 x i64>*
  %55 = load <2 x i64>, <2 x i64>* %54, align 16
  %56 = shl nsw i32 %2, 2
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i16, i16* %33, i64 %57
  %59 = bitcast i16* %58 to <2 x i64>*
  %60 = load <2 x i64>, <2 x i64>* %59, align 16
  %61 = mul nsw i32 %2, 5
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds i16, i16* %33, i64 %62
  %64 = bitcast i16* %63 to <2 x i64>*
  %65 = load <2 x i64>, <2 x i64>* %64, align 16
  %66 = mul nsw i32 %2, 6
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds i16, i16* %33, i64 %67
  %69 = bitcast i16* %68 to <2 x i64>*
  %70 = load <2 x i64>, <2 x i64>* %69, align 16
  %71 = mul nsw i32 %2, 7
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds i16, i16* %33, i64 %72
  %74 = bitcast i16* %73 to <2 x i64>*
  %75 = load <2 x i64>, <2 x i64>* %74, align 16
  %76 = select i1 %34, <2 x i64> %75, <2 x i64> %41
  %77 = select i1 %34, <2 x i64> %70, <2 x i64> %45
  %78 = select i1 %34, <2 x i64> %65, <2 x i64> %50
  %79 = select i1 %34, <2 x i64> %60, <2 x i64> %55
  %80 = select i1 %34, <2 x i64> %55, <2 x i64> %60
  %81 = select i1 %34, <2 x i64> %50, <2 x i64> %65
  %82 = select i1 %34, <2 x i64> %45, <2 x i64> %70
  %83 = select i1 %34, <2 x i64> %41, <2 x i64> %75
  %84 = bitcast <2 x i64> %83 to <8 x i16>
  br i1 %35, label %85, label %116

85:                                               ; preds = %32
  %86 = sext <8 x i16> %84 to <8 x i32>
  %87 = bitcast [16 x <4 x i64>]* %7 to <8 x i32>*
  store <8 x i32> %86, <8 x i32>* %87, align 32
  %88 = bitcast <2 x i64> %82 to <8 x i16>
  %89 = sext <8 x i16> %88 to <8 x i32>
  %90 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 1
  %91 = bitcast <4 x i64>* %90 to <8 x i32>*
  store <8 x i32> %89, <8 x i32>* %91, align 32
  %92 = bitcast <2 x i64> %81 to <8 x i16>
  %93 = sext <8 x i16> %92 to <8 x i32>
  %94 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 2
  %95 = bitcast <4 x i64>* %94 to <8 x i32>*
  store <8 x i32> %93, <8 x i32>* %95, align 32
  %96 = bitcast <2 x i64> %80 to <8 x i16>
  %97 = sext <8 x i16> %96 to <8 x i32>
  %98 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 3
  %99 = bitcast <4 x i64>* %98 to <8 x i32>*
  store <8 x i32> %97, <8 x i32>* %99, align 32
  %100 = bitcast <2 x i64> %79 to <8 x i16>
  %101 = sext <8 x i16> %100 to <8 x i32>
  %102 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 4
  %103 = bitcast <4 x i64>* %102 to <8 x i32>*
  store <8 x i32> %101, <8 x i32>* %103, align 32
  %104 = bitcast <2 x i64> %78 to <8 x i16>
  %105 = sext <8 x i16> %104 to <8 x i32>
  %106 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 5
  %107 = bitcast <4 x i64>* %106 to <8 x i32>*
  store <8 x i32> %105, <8 x i32>* %107, align 32
  %108 = bitcast <2 x i64> %77 to <8 x i16>
  %109 = sext <8 x i16> %108 to <8 x i32>
  %110 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 6
  %111 = bitcast <4 x i64>* %110 to <8 x i32>*
  store <8 x i32> %109, <8 x i32>* %111, align 32
  %112 = bitcast <2 x i64> %76 to <8 x i16>
  %113 = sext <8 x i16> %112 to <8 x i32>
  %114 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 7
  %115 = bitcast <4 x i64>* %114 to <8 x i32>*
  store <8 x i32> %113, <8 x i32>* %115, align 32
  br label %187

116:                                              ; preds = %32
  %117 = shufflevector <8 x i16> %84, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %118 = shufflevector <8 x i16> %117, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %119 = bitcast <8 x i16> %118 to <4 x i32>
  %120 = shufflevector <4 x i32> %119, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %121 = bitcast <4 x i32> %120 to <8 x i16>
  %122 = sext <8 x i16> %121 to <8 x i32>
  %123 = bitcast [16 x <4 x i64>]* %7 to <8 x i32>*
  store <8 x i32> %122, <8 x i32>* %123, align 32
  %124 = bitcast <2 x i64> %82 to <8 x i16>
  %125 = shufflevector <8 x i16> %124, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %126 = shufflevector <8 x i16> %125, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %127 = bitcast <8 x i16> %126 to <4 x i32>
  %128 = shufflevector <4 x i32> %127, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %129 = bitcast <4 x i32> %128 to <8 x i16>
  %130 = sext <8 x i16> %129 to <8 x i32>
  %131 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 1
  %132 = bitcast <4 x i64>* %131 to <8 x i32>*
  store <8 x i32> %130, <8 x i32>* %132, align 32
  %133 = bitcast <2 x i64> %81 to <8 x i16>
  %134 = shufflevector <8 x i16> %133, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %135 = shufflevector <8 x i16> %134, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %136 = bitcast <8 x i16> %135 to <4 x i32>
  %137 = shufflevector <4 x i32> %136, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %138 = bitcast <4 x i32> %137 to <8 x i16>
  %139 = sext <8 x i16> %138 to <8 x i32>
  %140 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 2
  %141 = bitcast <4 x i64>* %140 to <8 x i32>*
  store <8 x i32> %139, <8 x i32>* %141, align 32
  %142 = bitcast <2 x i64> %80 to <8 x i16>
  %143 = shufflevector <8 x i16> %142, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %144 = shufflevector <8 x i16> %143, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %145 = bitcast <8 x i16> %144 to <4 x i32>
  %146 = shufflevector <4 x i32> %145, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %147 = bitcast <4 x i32> %146 to <8 x i16>
  %148 = sext <8 x i16> %147 to <8 x i32>
  %149 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 3
  %150 = bitcast <4 x i64>* %149 to <8 x i32>*
  store <8 x i32> %148, <8 x i32>* %150, align 32
  %151 = bitcast <2 x i64> %79 to <8 x i16>
  %152 = shufflevector <8 x i16> %151, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %153 = shufflevector <8 x i16> %152, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %154 = bitcast <8 x i16> %153 to <4 x i32>
  %155 = shufflevector <4 x i32> %154, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %156 = bitcast <4 x i32> %155 to <8 x i16>
  %157 = sext <8 x i16> %156 to <8 x i32>
  %158 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 4
  %159 = bitcast <4 x i64>* %158 to <8 x i32>*
  store <8 x i32> %157, <8 x i32>* %159, align 32
  %160 = bitcast <2 x i64> %78 to <8 x i16>
  %161 = shufflevector <8 x i16> %160, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %162 = shufflevector <8 x i16> %161, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %163 = bitcast <8 x i16> %162 to <4 x i32>
  %164 = shufflevector <4 x i32> %163, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %165 = bitcast <4 x i32> %164 to <8 x i16>
  %166 = sext <8 x i16> %165 to <8 x i32>
  %167 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 5
  %168 = bitcast <4 x i64>* %167 to <8 x i32>*
  store <8 x i32> %166, <8 x i32>* %168, align 32
  %169 = bitcast <2 x i64> %77 to <8 x i16>
  %170 = shufflevector <8 x i16> %169, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %171 = shufflevector <8 x i16> %170, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %172 = bitcast <8 x i16> %171 to <4 x i32>
  %173 = shufflevector <4 x i32> %172, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %174 = bitcast <4 x i32> %173 to <8 x i16>
  %175 = sext <8 x i16> %174 to <8 x i32>
  %176 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 6
  %177 = bitcast <4 x i64>* %176 to <8 x i32>*
  store <8 x i32> %175, <8 x i32>* %177, align 32
  %178 = bitcast <2 x i64> %76 to <8 x i16>
  %179 = shufflevector <8 x i16> %178, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %180 = shufflevector <8 x i16> %179, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %181 = bitcast <8 x i16> %180 to <4 x i32>
  %182 = shufflevector <4 x i32> %181, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %183 = bitcast <4 x i32> %182 to <8 x i16>
  %184 = sext <8 x i16> %183 to <8 x i32>
  %185 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 7
  %186 = bitcast <4 x i64>* %185 to <8 x i32>*
  store <8 x i32> %184, <8 x i32>* %186, align 32
  br label %187

187:                                              ; preds = %116, %85
  %188 = phi <8 x i32>* [ %186, %116 ], [ %115, %85 ]
  %189 = phi <8 x i32>* [ %177, %116 ], [ %111, %85 ]
  %190 = phi <8 x i32>* [ %168, %116 ], [ %107, %85 ]
  %191 = phi <8 x i32>* [ %159, %116 ], [ %103, %85 ]
  %192 = phi <8 x i32>* [ %150, %116 ], [ %99, %85 ]
  %193 = phi <8 x i32>* [ %141, %116 ], [ %95, %85 ]
  %194 = phi <8 x i32>* [ %132, %116 ], [ %91, %85 ]
  %195 = phi <8 x i32>* [ %123, %116 ], [ %87, %85 ]
  %196 = phi <8 x i32> [ %184, %116 ], [ %113, %85 ]
  %197 = phi <8 x i32> [ %175, %116 ], [ %109, %85 ]
  %198 = phi <8 x i32> [ %166, %116 ], [ %105, %85 ]
  %199 = phi <8 x i32> [ %157, %116 ], [ %101, %85 ]
  %200 = phi <8 x i32> [ %148, %116 ], [ %97, %85 ]
  %201 = phi <8 x i32> [ %139, %116 ], [ %93, %85 ]
  %202 = phi <8 x i32> [ %130, %116 ], [ %89, %85 ]
  %203 = phi <8 x i32> [ %122, %116 ], [ %86, %85 ]
  %204 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %203, i32 %39) #7
  store <8 x i32> %204, <8 x i32>* %195, align 32
  %205 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %202, i32 %39) #7
  store <8 x i32> %205, <8 x i32>* %194, align 32
  %206 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %201, i32 %39) #7
  store <8 x i32> %206, <8 x i32>* %193, align 32
  %207 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %200, i32 %39) #7
  store <8 x i32> %207, <8 x i32>* %192, align 32
  %208 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %199, i32 %39) #7
  store <8 x i32> %208, <8 x i32>* %191, align 32
  %209 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %198, i32 %39) #7
  store <8 x i32> %209, <8 x i32>* %190, align 32
  %210 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %197, i32 %39) #7
  store <8 x i32> %210, <8 x i32>* %189, align 32
  %211 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %196, i32 %39) #7
  store <8 x i32> %211, <8 x i32>* %188, align 32
  %212 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 8
  %213 = bitcast i16* %37 to <2 x i64>*
  %214 = load <2 x i64>, <2 x i64>* %213, align 16
  %215 = getelementptr inbounds i16, i16* %37, i64 %42
  %216 = bitcast i16* %215 to <2 x i64>*
  %217 = load <2 x i64>, <2 x i64>* %216, align 16
  %218 = getelementptr inbounds i16, i16* %37, i64 %47
  %219 = bitcast i16* %218 to <2 x i64>*
  %220 = load <2 x i64>, <2 x i64>* %219, align 16
  %221 = getelementptr inbounds i16, i16* %37, i64 %52
  %222 = bitcast i16* %221 to <2 x i64>*
  %223 = load <2 x i64>, <2 x i64>* %222, align 16
  %224 = getelementptr inbounds i16, i16* %37, i64 %57
  %225 = bitcast i16* %224 to <2 x i64>*
  %226 = load <2 x i64>, <2 x i64>* %225, align 16
  %227 = getelementptr inbounds i16, i16* %37, i64 %62
  %228 = bitcast i16* %227 to <2 x i64>*
  %229 = load <2 x i64>, <2 x i64>* %228, align 16
  %230 = getelementptr inbounds i16, i16* %37, i64 %67
  %231 = bitcast i16* %230 to <2 x i64>*
  %232 = load <2 x i64>, <2 x i64>* %231, align 16
  %233 = getelementptr inbounds i16, i16* %37, i64 %72
  %234 = bitcast i16* %233 to <2 x i64>*
  %235 = load <2 x i64>, <2 x i64>* %234, align 16
  %236 = select i1 %34, <2 x i64> %235, <2 x i64> %214
  %237 = select i1 %34, <2 x i64> %232, <2 x i64> %217
  %238 = select i1 %34, <2 x i64> %229, <2 x i64> %220
  %239 = select i1 %34, <2 x i64> %226, <2 x i64> %223
  %240 = select i1 %34, <2 x i64> %223, <2 x i64> %226
  %241 = select i1 %34, <2 x i64> %220, <2 x i64> %229
  %242 = select i1 %34, <2 x i64> %217, <2 x i64> %232
  %243 = select i1 %34, <2 x i64> %214, <2 x i64> %235
  %244 = bitcast <2 x i64> %243 to <8 x i16>
  br i1 %35, label %245, label %276

245:                                              ; preds = %187
  %246 = sext <8 x i16> %244 to <8 x i32>
  %247 = bitcast <4 x i64>* %212 to <8 x i32>*
  store <8 x i32> %246, <8 x i32>* %247, align 32
  %248 = bitcast <2 x i64> %242 to <8 x i16>
  %249 = sext <8 x i16> %248 to <8 x i32>
  %250 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 9
  %251 = bitcast <4 x i64>* %250 to <8 x i32>*
  store <8 x i32> %249, <8 x i32>* %251, align 32
  %252 = bitcast <2 x i64> %241 to <8 x i16>
  %253 = sext <8 x i16> %252 to <8 x i32>
  %254 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 10
  %255 = bitcast <4 x i64>* %254 to <8 x i32>*
  store <8 x i32> %253, <8 x i32>* %255, align 32
  %256 = bitcast <2 x i64> %240 to <8 x i16>
  %257 = sext <8 x i16> %256 to <8 x i32>
  %258 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 11
  %259 = bitcast <4 x i64>* %258 to <8 x i32>*
  store <8 x i32> %257, <8 x i32>* %259, align 32
  %260 = bitcast <2 x i64> %239 to <8 x i16>
  %261 = sext <8 x i16> %260 to <8 x i32>
  %262 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 12
  %263 = bitcast <4 x i64>* %262 to <8 x i32>*
  store <8 x i32> %261, <8 x i32>* %263, align 32
  %264 = bitcast <2 x i64> %238 to <8 x i16>
  %265 = sext <8 x i16> %264 to <8 x i32>
  %266 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 13
  %267 = bitcast <4 x i64>* %266 to <8 x i32>*
  store <8 x i32> %265, <8 x i32>* %267, align 32
  %268 = bitcast <2 x i64> %237 to <8 x i16>
  %269 = sext <8 x i16> %268 to <8 x i32>
  %270 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 14
  %271 = bitcast <4 x i64>* %270 to <8 x i32>*
  store <8 x i32> %269, <8 x i32>* %271, align 32
  %272 = bitcast <2 x i64> %236 to <8 x i16>
  %273 = sext <8 x i16> %272 to <8 x i32>
  %274 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 15
  %275 = bitcast <4 x i64>* %274 to <8 x i32>*
  store <8 x i32> %273, <8 x i32>* %275, align 32
  br label %347

276:                                              ; preds = %187
  %277 = shufflevector <8 x i16> %244, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %278 = shufflevector <8 x i16> %277, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %279 = bitcast <8 x i16> %278 to <4 x i32>
  %280 = shufflevector <4 x i32> %279, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %281 = bitcast <4 x i32> %280 to <8 x i16>
  %282 = sext <8 x i16> %281 to <8 x i32>
  %283 = bitcast <4 x i64>* %212 to <8 x i32>*
  store <8 x i32> %282, <8 x i32>* %283, align 32
  %284 = bitcast <2 x i64> %242 to <8 x i16>
  %285 = shufflevector <8 x i16> %284, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %286 = shufflevector <8 x i16> %285, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %287 = bitcast <8 x i16> %286 to <4 x i32>
  %288 = shufflevector <4 x i32> %287, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %289 = bitcast <4 x i32> %288 to <8 x i16>
  %290 = sext <8 x i16> %289 to <8 x i32>
  %291 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 9
  %292 = bitcast <4 x i64>* %291 to <8 x i32>*
  store <8 x i32> %290, <8 x i32>* %292, align 32
  %293 = bitcast <2 x i64> %241 to <8 x i16>
  %294 = shufflevector <8 x i16> %293, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %295 = shufflevector <8 x i16> %294, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %296 = bitcast <8 x i16> %295 to <4 x i32>
  %297 = shufflevector <4 x i32> %296, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %298 = bitcast <4 x i32> %297 to <8 x i16>
  %299 = sext <8 x i16> %298 to <8 x i32>
  %300 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 10
  %301 = bitcast <4 x i64>* %300 to <8 x i32>*
  store <8 x i32> %299, <8 x i32>* %301, align 32
  %302 = bitcast <2 x i64> %240 to <8 x i16>
  %303 = shufflevector <8 x i16> %302, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %304 = shufflevector <8 x i16> %303, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %305 = bitcast <8 x i16> %304 to <4 x i32>
  %306 = shufflevector <4 x i32> %305, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %307 = bitcast <4 x i32> %306 to <8 x i16>
  %308 = sext <8 x i16> %307 to <8 x i32>
  %309 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 11
  %310 = bitcast <4 x i64>* %309 to <8 x i32>*
  store <8 x i32> %308, <8 x i32>* %310, align 32
  %311 = bitcast <2 x i64> %239 to <8 x i16>
  %312 = shufflevector <8 x i16> %311, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %313 = shufflevector <8 x i16> %312, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %314 = bitcast <8 x i16> %313 to <4 x i32>
  %315 = shufflevector <4 x i32> %314, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %316 = bitcast <4 x i32> %315 to <8 x i16>
  %317 = sext <8 x i16> %316 to <8 x i32>
  %318 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 12
  %319 = bitcast <4 x i64>* %318 to <8 x i32>*
  store <8 x i32> %317, <8 x i32>* %319, align 32
  %320 = bitcast <2 x i64> %238 to <8 x i16>
  %321 = shufflevector <8 x i16> %320, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %322 = shufflevector <8 x i16> %321, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %323 = bitcast <8 x i16> %322 to <4 x i32>
  %324 = shufflevector <4 x i32> %323, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %325 = bitcast <4 x i32> %324 to <8 x i16>
  %326 = sext <8 x i16> %325 to <8 x i32>
  %327 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 13
  %328 = bitcast <4 x i64>* %327 to <8 x i32>*
  store <8 x i32> %326, <8 x i32>* %328, align 32
  %329 = bitcast <2 x i64> %237 to <8 x i16>
  %330 = shufflevector <8 x i16> %329, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %331 = shufflevector <8 x i16> %330, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %332 = bitcast <8 x i16> %331 to <4 x i32>
  %333 = shufflevector <4 x i32> %332, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %334 = bitcast <4 x i32> %333 to <8 x i16>
  %335 = sext <8 x i16> %334 to <8 x i32>
  %336 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 14
  %337 = bitcast <4 x i64>* %336 to <8 x i32>*
  store <8 x i32> %335, <8 x i32>* %337, align 32
  %338 = bitcast <2 x i64> %236 to <8 x i16>
  %339 = shufflevector <8 x i16> %338, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %340 = shufflevector <8 x i16> %339, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %341 = bitcast <8 x i16> %340 to <4 x i32>
  %342 = shufflevector <4 x i32> %341, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %343 = bitcast <4 x i32> %342 to <8 x i16>
  %344 = sext <8 x i16> %343 to <8 x i32>
  %345 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 15
  %346 = bitcast <4 x i64>* %345 to <8 x i32>*
  store <8 x i32> %344, <8 x i32>* %346, align 32
  br label %347

347:                                              ; preds = %245, %276
  %348 = phi <8 x i32>* [ %275, %245 ], [ %346, %276 ]
  %349 = phi <8 x i32>* [ %267, %245 ], [ %328, %276 ]
  %350 = phi <8 x i32>* [ %259, %245 ], [ %310, %276 ]
  %351 = phi <8 x i32>* [ %251, %245 ], [ %292, %276 ]
  %352 = phi <8 x i32>* [ %271, %245 ], [ %337, %276 ]
  %353 = phi <8 x i32>* [ %263, %245 ], [ %319, %276 ]
  %354 = phi <8 x i32>* [ %255, %245 ], [ %301, %276 ]
  %355 = phi <8 x i32>* [ %247, %245 ], [ %283, %276 ]
  %356 = phi <8 x i32> [ %273, %245 ], [ %344, %276 ]
  %357 = phi <8 x i32> [ %269, %245 ], [ %335, %276 ]
  %358 = phi <8 x i32> [ %265, %245 ], [ %326, %276 ]
  %359 = phi <8 x i32> [ %261, %245 ], [ %317, %276 ]
  %360 = phi <8 x i32> [ %257, %245 ], [ %308, %276 ]
  %361 = phi <8 x i32> [ %253, %245 ], [ %299, %276 ]
  %362 = phi <8 x i32> [ %249, %245 ], [ %290, %276 ]
  %363 = phi <8 x i32> [ %246, %245 ], [ %282, %276 ]
  %364 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %363, i32 %39) #7
  store <8 x i32> %364, <8 x i32>* %355, align 32
  %365 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %362, i32 %39) #7
  store <8 x i32> %365, <8 x i32>* %351, align 32
  %366 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %361, i32 %39) #7
  store <8 x i32> %366, <8 x i32>* %354, align 32
  %367 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %360, i32 %39) #7
  store <8 x i32> %367, <8 x i32>* %350, align 32
  %368 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %359, i32 %39) #7
  store <8 x i32> %368, <8 x i32>* %353, align 32
  %369 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %358, i32 %39) #7
  store <8 x i32> %369, <8 x i32>* %349, align 32
  %370 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %357, i32 %39) #7
  store <8 x i32> %370, <8 x i32>* %352, align 32
  %371 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %356, i32 %39) #7
  store <8 x i32> %371, <8 x i32>* %348, align 32
  %372 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %9, i64 0, i64 0
  call void %14(<4 x i64>* nonnull %36, <4 x i64>* nonnull %372, i8 signext %17, i32 1, i32 1) #7
  %373 = getelementptr inbounds i8, i8* %11, i64 1
  %374 = load i8, i8* %373, align 1
  %375 = sext i8 %374 to i32
  %376 = sub nsw i32 0, %375
  %377 = xor i32 %375, -1
  %378 = shl i32 1, %377
  %379 = insertelement <8 x i32> undef, i32 %378, i32 0
  %380 = shufflevector <8 x i32> %379, <8 x i32> undef, <8 x i32> zeroinitializer
  %381 = bitcast [16 x <4 x i64>]* %9 to <8 x i32>*
  %382 = load <8 x i32>, <8 x i32>* %381, align 32
  %383 = add <8 x i32> %380, %382
  %384 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %9, i64 0, i64 1
  %385 = bitcast <4 x i64>* %384 to <8 x i32>*
  %386 = load <8 x i32>, <8 x i32>* %385, align 32
  %387 = add <8 x i32> %380, %386
  %388 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %9, i64 0, i64 2
  %389 = bitcast <4 x i64>* %388 to <8 x i32>*
  %390 = load <8 x i32>, <8 x i32>* %389, align 32
  %391 = add <8 x i32> %380, %390
  %392 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %9, i64 0, i64 3
  %393 = bitcast <4 x i64>* %392 to <8 x i32>*
  %394 = load <8 x i32>, <8 x i32>* %393, align 32
  %395 = add <8 x i32> %394, %380
  %396 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %9, i64 0, i64 4
  %397 = bitcast <4 x i64>* %396 to <8 x i32>*
  %398 = load <8 x i32>, <8 x i32>* %397, align 32
  %399 = add <8 x i32> %398, %380
  %400 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %9, i64 0, i64 5
  %401 = bitcast <4 x i64>* %400 to <8 x i32>*
  %402 = load <8 x i32>, <8 x i32>* %401, align 32
  %403 = add <8 x i32> %402, %380
  %404 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %9, i64 0, i64 6
  %405 = bitcast <4 x i64>* %404 to <8 x i32>*
  %406 = load <8 x i32>, <8 x i32>* %405, align 32
  %407 = add <8 x i32> %406, %380
  %408 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %9, i64 0, i64 7
  %409 = bitcast <4 x i64>* %408 to <8 x i32>*
  %410 = load <8 x i32>, <8 x i32>* %409, align 32
  %411 = add <8 x i32> %410, %380
  %412 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %383, i32 %376) #7
  store <8 x i32> %412, <8 x i32>* %381, align 32
  %413 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %387, i32 %376) #7
  store <8 x i32> %413, <8 x i32>* %385, align 32
  %414 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %391, i32 %376) #7
  store <8 x i32> %414, <8 x i32>* %389, align 32
  %415 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %395, i32 %376) #7
  store <8 x i32> %415, <8 x i32>* %393, align 32
  %416 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %399, i32 %376) #7
  store <8 x i32> %416, <8 x i32>* %397, align 32
  %417 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %403, i32 %376) #7
  store <8 x i32> %417, <8 x i32>* %401, align 32
  %418 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %407, i32 %376) #7
  store <8 x i32> %418, <8 x i32>* %405, align 32
  %419 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %411, i32 %376) #7
  store <8 x i32> %419, <8 x i32>* %409, align 32
  %420 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %9, i64 0, i64 8
  %421 = load i8, i8* %373, align 1
  %422 = sext i8 %421 to i32
  %423 = sub nsw i32 0, %422
  %424 = xor i32 %422, -1
  %425 = shl i32 1, %424
  %426 = insertelement <8 x i32> undef, i32 %425, i32 0
  %427 = shufflevector <8 x i32> %426, <8 x i32> undef, <8 x i32> zeroinitializer
  %428 = bitcast <4 x i64>* %420 to <8 x i32>*
  %429 = load <8 x i32>, <8 x i32>* %428, align 32
  %430 = add <8 x i32> %427, %429
  %431 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %9, i64 0, i64 9
  %432 = bitcast <4 x i64>* %431 to <8 x i32>*
  %433 = load <8 x i32>, <8 x i32>* %432, align 32
  %434 = add <8 x i32> %427, %433
  %435 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %9, i64 0, i64 10
  %436 = bitcast <4 x i64>* %435 to <8 x i32>*
  %437 = load <8 x i32>, <8 x i32>* %436, align 32
  %438 = add <8 x i32> %427, %437
  %439 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %9, i64 0, i64 11
  %440 = bitcast <4 x i64>* %439 to <8 x i32>*
  %441 = load <8 x i32>, <8 x i32>* %440, align 32
  %442 = add <8 x i32> %441, %427
  %443 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %9, i64 0, i64 12
  %444 = bitcast <4 x i64>* %443 to <8 x i32>*
  %445 = load <8 x i32>, <8 x i32>* %444, align 32
  %446 = add <8 x i32> %445, %427
  %447 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %9, i64 0, i64 13
  %448 = bitcast <4 x i64>* %447 to <8 x i32>*
  %449 = load <8 x i32>, <8 x i32>* %448, align 32
  %450 = add <8 x i32> %449, %427
  %451 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %9, i64 0, i64 14
  %452 = bitcast <4 x i64>* %451 to <8 x i32>*
  %453 = load <8 x i32>, <8 x i32>* %452, align 32
  %454 = add <8 x i32> %453, %427
  %455 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %9, i64 0, i64 15
  %456 = bitcast <4 x i64>* %455 to <8 x i32>*
  %457 = load <8 x i32>, <8 x i32>* %456, align 32
  %458 = add <8 x i32> %457, %427
  %459 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %430, i32 %423) #7
  store <8 x i32> %459, <8 x i32>* %428, align 32
  %460 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %434, i32 %423) #7
  store <8 x i32> %460, <8 x i32>* %432, align 32
  %461 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %438, i32 %423) #7
  store <8 x i32> %461, <8 x i32>* %436, align 32
  %462 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %442, i32 %423) #7
  store <8 x i32> %462, <8 x i32>* %440, align 32
  %463 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %446, i32 %423) #7
  store <8 x i32> %463, <8 x i32>* %444, align 32
  %464 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %450, i32 %423) #7
  store <8 x i32> %464, <8 x i32>* %448, align 32
  %465 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %454, i32 %423) #7
  store <8 x i32> %465, <8 x i32>* %452, align 32
  %466 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %458, i32 %423) #7
  store <8 x i32> %466, <8 x i32>* %456, align 32
  %467 = shufflevector <8 x i32> %412, <8 x i32> %413, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %468 = bitcast <8 x i32> %467 to <4 x i64>
  %469 = shufflevector <8 x i32> %412, <8 x i32> %413, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %470 = bitcast <8 x i32> %469 to <4 x i64>
  %471 = shufflevector <8 x i32> %414, <8 x i32> %415, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %472 = bitcast <8 x i32> %471 to <4 x i64>
  %473 = shufflevector <8 x i32> %414, <8 x i32> %415, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %474 = bitcast <8 x i32> %473 to <4 x i64>
  %475 = shufflevector <8 x i32> %416, <8 x i32> %417, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %476 = bitcast <8 x i32> %475 to <4 x i64>
  %477 = shufflevector <8 x i32> %416, <8 x i32> %417, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %478 = bitcast <8 x i32> %477 to <4 x i64>
  %479 = shufflevector <8 x i32> %418, <8 x i32> %419, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %480 = bitcast <8 x i32> %479 to <4 x i64>
  %481 = shufflevector <8 x i32> %418, <8 x i32> %419, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %482 = bitcast <8 x i32> %481 to <4 x i64>
  %483 = shufflevector <4 x i64> %468, <4 x i64> %472, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %484 = shufflevector <4 x i64> %476, <4 x i64> %480, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %485 = bitcast <4 x i64> %483 to <8 x i32>
  %486 = bitcast <4 x i64> %484 to <8 x i32>
  %487 = shufflevector <8 x i32> %485, <8 x i32> %486, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %488 = bitcast [16 x <4 x i64>]* %7 to <8 x i32>*
  store <8 x i32> %487, <8 x i32>* %488, align 32
  %489 = shufflevector <8 x i32> %485, <8 x i32> %486, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %489, <8 x i32>* %355, align 32
  %490 = shufflevector <4 x i64> %468, <4 x i64> %472, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %491 = shufflevector <4 x i64> %476, <4 x i64> %480, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %492 = bitcast <4 x i64> %490 to <8 x i32>
  %493 = bitcast <4 x i64> %491 to <8 x i32>
  %494 = shufflevector <8 x i32> %492, <8 x i32> %493, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %495 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 2
  %496 = bitcast <4 x i64>* %495 to <8 x i32>*
  store <8 x i32> %494, <8 x i32>* %496, align 32
  %497 = shufflevector <8 x i32> %492, <8 x i32> %493, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %497, <8 x i32>* %354, align 32
  %498 = shufflevector <4 x i64> %470, <4 x i64> %474, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %499 = shufflevector <4 x i64> %478, <4 x i64> %482, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %500 = bitcast <4 x i64> %498 to <8 x i32>
  %501 = bitcast <4 x i64> %499 to <8 x i32>
  %502 = shufflevector <8 x i32> %500, <8 x i32> %501, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %503 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 4
  %504 = bitcast <4 x i64>* %503 to <8 x i32>*
  store <8 x i32> %502, <8 x i32>* %504, align 32
  %505 = shufflevector <8 x i32> %500, <8 x i32> %501, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %505, <8 x i32>* %353, align 32
  %506 = shufflevector <4 x i64> %470, <4 x i64> %474, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %507 = shufflevector <4 x i64> %478, <4 x i64> %482, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %508 = bitcast <4 x i64> %506 to <8 x i32>
  %509 = bitcast <4 x i64> %507 to <8 x i32>
  %510 = shufflevector <8 x i32> %508, <8 x i32> %509, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %511 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 6
  %512 = bitcast <4 x i64>* %511 to <8 x i32>*
  store <8 x i32> %510, <8 x i32>* %512, align 32
  %513 = shufflevector <8 x i32> %508, <8 x i32> %509, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %513, <8 x i32>* %352, align 32
  %514 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 1
  %515 = shufflevector <8 x i32> %459, <8 x i32> %460, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %516 = bitcast <8 x i32> %515 to <4 x i64>
  %517 = shufflevector <8 x i32> %459, <8 x i32> %460, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %518 = bitcast <8 x i32> %517 to <4 x i64>
  %519 = shufflevector <8 x i32> %461, <8 x i32> %462, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %520 = bitcast <8 x i32> %519 to <4 x i64>
  %521 = shufflevector <8 x i32> %461, <8 x i32> %462, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %522 = bitcast <8 x i32> %521 to <4 x i64>
  %523 = shufflevector <8 x i32> %463, <8 x i32> %464, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %524 = bitcast <8 x i32> %523 to <4 x i64>
  %525 = shufflevector <8 x i32> %463, <8 x i32> %464, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %526 = bitcast <8 x i32> %525 to <4 x i64>
  %527 = shufflevector <8 x i32> %465, <8 x i32> %466, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %528 = bitcast <8 x i32> %527 to <4 x i64>
  %529 = shufflevector <8 x i32> %465, <8 x i32> %466, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %530 = bitcast <8 x i32> %529 to <4 x i64>
  %531 = shufflevector <4 x i64> %516, <4 x i64> %520, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %532 = shufflevector <4 x i64> %524, <4 x i64> %528, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %533 = bitcast <4 x i64> %531 to <8 x i32>
  %534 = bitcast <4 x i64> %532 to <8 x i32>
  %535 = shufflevector <8 x i32> %533, <8 x i32> %534, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %536 = bitcast <4 x i64>* %514 to <8 x i32>*
  store <8 x i32> %535, <8 x i32>* %536, align 32
  %537 = shufflevector <8 x i32> %533, <8 x i32> %534, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %537, <8 x i32>* %351, align 32
  %538 = shufflevector <4 x i64> %516, <4 x i64> %520, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %539 = shufflevector <4 x i64> %524, <4 x i64> %528, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %540 = bitcast <4 x i64> %538 to <8 x i32>
  %541 = bitcast <4 x i64> %539 to <8 x i32>
  %542 = shufflevector <8 x i32> %540, <8 x i32> %541, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %543 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 3
  %544 = bitcast <4 x i64>* %543 to <8 x i32>*
  store <8 x i32> %542, <8 x i32>* %544, align 32
  %545 = shufflevector <8 x i32> %540, <8 x i32> %541, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %545, <8 x i32>* %350, align 32
  %546 = shufflevector <4 x i64> %518, <4 x i64> %522, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %547 = shufflevector <4 x i64> %526, <4 x i64> %530, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %548 = bitcast <4 x i64> %546 to <8 x i32>
  %549 = bitcast <4 x i64> %547 to <8 x i32>
  %550 = shufflevector <8 x i32> %548, <8 x i32> %549, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %551 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 5
  %552 = bitcast <4 x i64>* %551 to <8 x i32>*
  store <8 x i32> %550, <8 x i32>* %552, align 32
  %553 = shufflevector <8 x i32> %548, <8 x i32> %549, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %553, <8 x i32>* %349, align 32
  %554 = shufflevector <4 x i64> %518, <4 x i64> %522, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %555 = shufflevector <4 x i64> %526, <4 x i64> %530, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %556 = bitcast <4 x i64> %554 to <8 x i32>
  %557 = bitcast <4 x i64> %555 to <8 x i32>
  %558 = shufflevector <8 x i32> %556, <8 x i32> %557, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %559 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %7, i64 0, i64 7
  %560 = bitcast <4 x i64>* %559 to <8 x i32>*
  store <8 x i32> %558, <8 x i32>* %560, align 32
  %561 = shufflevector <8 x i32> %556, <8 x i32> %557, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %561, <8 x i32>* %348, align 32
  call void %16(<4 x i64>* nonnull %36, <4 x i64>* nonnull %372, i8 signext %17, i32 2, i32 2) #7
  %562 = load <8 x i32>, <8 x i32>* %381, align 32
  %563 = load <8 x i32>, <8 x i32>* %389, align 32
  %564 = shufflevector <8 x i32> %562, <8 x i32> %563, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %565 = bitcast <8 x i32> %564 to <4 x i64>
  %566 = shufflevector <8 x i32> %562, <8 x i32> %563, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %567 = bitcast <8 x i32> %566 to <4 x i64>
  %568 = load <8 x i32>, <8 x i32>* %397, align 32
  %569 = load <8 x i32>, <8 x i32>* %405, align 32
  %570 = shufflevector <8 x i32> %568, <8 x i32> %569, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %571 = bitcast <8 x i32> %570 to <4 x i64>
  %572 = shufflevector <8 x i32> %568, <8 x i32> %569, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %573 = bitcast <8 x i32> %572 to <4 x i64>
  %574 = load <8 x i32>, <8 x i32>* %428, align 32
  %575 = load <8 x i32>, <8 x i32>* %436, align 32
  %576 = shufflevector <8 x i32> %574, <8 x i32> %575, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %577 = bitcast <8 x i32> %576 to <4 x i64>
  %578 = shufflevector <8 x i32> %574, <8 x i32> %575, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %579 = bitcast <8 x i32> %578 to <4 x i64>
  %580 = load <8 x i32>, <8 x i32>* %444, align 32
  %581 = load <8 x i32>, <8 x i32>* %452, align 32
  %582 = shufflevector <8 x i32> %580, <8 x i32> %581, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %583 = bitcast <8 x i32> %582 to <4 x i64>
  %584 = shufflevector <8 x i32> %580, <8 x i32> %581, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %585 = bitcast <8 x i32> %584 to <4 x i64>
  %586 = shufflevector <4 x i64> %565, <4 x i64> %571, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %587 = shufflevector <4 x i64> %577, <4 x i64> %583, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %588 = bitcast <4 x i64> %586 to <8 x i32>
  %589 = bitcast <4 x i64> %587 to <8 x i32>
  %590 = shufflevector <8 x i32> %588, <8 x i32> %589, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %590, <8 x i32>* %488, align 32
  %591 = shufflevector <8 x i32> %588, <8 x i32> %589, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %591, <8 x i32>* %504, align 32
  %592 = shufflevector <4 x i64> %565, <4 x i64> %571, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %593 = shufflevector <4 x i64> %577, <4 x i64> %583, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %594 = bitcast <4 x i64> %592 to <8 x i32>
  %595 = bitcast <4 x i64> %593 to <8 x i32>
  %596 = shufflevector <8 x i32> %594, <8 x i32> %595, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %596, <8 x i32>* %536, align 32
  %597 = shufflevector <8 x i32> %594, <8 x i32> %595, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %597, <8 x i32>* %552, align 32
  %598 = shufflevector <4 x i64> %567, <4 x i64> %573, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %599 = shufflevector <4 x i64> %579, <4 x i64> %585, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %600 = bitcast <4 x i64> %598 to <8 x i32>
  %601 = bitcast <4 x i64> %599 to <8 x i32>
  %602 = shufflevector <8 x i32> %600, <8 x i32> %601, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %602, <8 x i32>* %496, align 32
  %603 = shufflevector <8 x i32> %600, <8 x i32> %601, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %603, <8 x i32>* %512, align 32
  %604 = shufflevector <4 x i64> %567, <4 x i64> %573, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %605 = shufflevector <4 x i64> %579, <4 x i64> %585, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %606 = bitcast <4 x i64> %604 to <8 x i32>
  %607 = bitcast <4 x i64> %605 to <8 x i32>
  %608 = shufflevector <8 x i32> %606, <8 x i32> %607, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %608, <8 x i32>* %544, align 32
  %609 = shufflevector <8 x i32> %606, <8 x i32> %607, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %609, <8 x i32>* %560, align 32
  %610 = load <8 x i32>, <8 x i32>* %385, align 32
  %611 = load <8 x i32>, <8 x i32>* %393, align 32
  %612 = shufflevector <8 x i32> %610, <8 x i32> %611, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %613 = bitcast <8 x i32> %612 to <4 x i64>
  %614 = shufflevector <8 x i32> %610, <8 x i32> %611, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %615 = bitcast <8 x i32> %614 to <4 x i64>
  %616 = load <8 x i32>, <8 x i32>* %401, align 32
  %617 = load <8 x i32>, <8 x i32>* %409, align 32
  %618 = shufflevector <8 x i32> %616, <8 x i32> %617, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %619 = bitcast <8 x i32> %618 to <4 x i64>
  %620 = shufflevector <8 x i32> %616, <8 x i32> %617, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %621 = bitcast <8 x i32> %620 to <4 x i64>
  %622 = load <8 x i32>, <8 x i32>* %432, align 32
  %623 = load <8 x i32>, <8 x i32>* %440, align 32
  %624 = shufflevector <8 x i32> %622, <8 x i32> %623, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %625 = bitcast <8 x i32> %624 to <4 x i64>
  %626 = shufflevector <8 x i32> %622, <8 x i32> %623, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %627 = bitcast <8 x i32> %626 to <4 x i64>
  %628 = load <8 x i32>, <8 x i32>* %448, align 32
  %629 = load <8 x i32>, <8 x i32>* %456, align 32
  %630 = shufflevector <8 x i32> %628, <8 x i32> %629, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %631 = bitcast <8 x i32> %630 to <4 x i64>
  %632 = shufflevector <8 x i32> %628, <8 x i32> %629, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %633 = bitcast <8 x i32> %632 to <4 x i64>
  %634 = shufflevector <4 x i64> %613, <4 x i64> %619, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %635 = shufflevector <4 x i64> %625, <4 x i64> %631, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %636 = bitcast <4 x i64> %634 to <8 x i32>
  %637 = bitcast <4 x i64> %635 to <8 x i32>
  %638 = shufflevector <8 x i32> %636, <8 x i32> %637, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %638, <8 x i32>* %355, align 32
  %639 = shufflevector <8 x i32> %636, <8 x i32> %637, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %639, <8 x i32>* %353, align 32
  %640 = shufflevector <4 x i64> %613, <4 x i64> %619, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %641 = shufflevector <4 x i64> %625, <4 x i64> %631, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %642 = bitcast <4 x i64> %640 to <8 x i32>
  %643 = bitcast <4 x i64> %641 to <8 x i32>
  %644 = shufflevector <8 x i32> %642, <8 x i32> %643, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %644, <8 x i32>* %351, align 32
  %645 = shufflevector <8 x i32> %642, <8 x i32> %643, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %645, <8 x i32>* %349, align 32
  %646 = shufflevector <4 x i64> %615, <4 x i64> %621, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %647 = shufflevector <4 x i64> %627, <4 x i64> %633, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %648 = bitcast <4 x i64> %646 to <8 x i32>
  %649 = bitcast <4 x i64> %647 to <8 x i32>
  %650 = shufflevector <8 x i32> %648, <8 x i32> %649, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %650, <8 x i32>* %354, align 32
  %651 = shufflevector <8 x i32> %648, <8 x i32> %649, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %651, <8 x i32>* %352, align 32
  %652 = shufflevector <4 x i64> %615, <4 x i64> %621, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %653 = shufflevector <4 x i64> %627, <4 x i64> %633, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %654 = bitcast <4 x i64> %652 to <8 x i32>
  %655 = bitcast <4 x i64> %653 to <8 x i32>
  %656 = shufflevector <8 x i32> %654, <8 x i32> %655, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %656, <8 x i32>* %350, align 32
  %657 = shufflevector <8 x i32> %654, <8 x i32> %655, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %657, <8 x i32>* %348, align 32
  %658 = getelementptr inbounds i8, i8* %11, i64 2
  %659 = load i8, i8* %658, align 1
  %660 = sext i8 %659 to i32
  %661 = sub nsw i32 0, %660
  %662 = icmp slt i8 %659, 0
  br i1 %662, label %725, label %663

663:                                              ; preds = %347
  %664 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %590, i32 %660) #7
  %665 = mul <8 x i32> %664, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %666 = add <8 x i32> %665, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %667 = ashr <8 x i32> %666, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %667, <8 x i32>* %488, align 32
  %668 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %596, i32 %660) #7
  %669 = mul <8 x i32> %668, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %670 = add <8 x i32> %669, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %671 = ashr <8 x i32> %670, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %671, <8 x i32>* %536, align 32
  %672 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %602, i32 %660) #7
  %673 = mul <8 x i32> %672, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %674 = add <8 x i32> %673, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %675 = ashr <8 x i32> %674, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %675, <8 x i32>* %496, align 32
  %676 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %608, i32 %660) #7
  %677 = mul <8 x i32> %676, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %678 = add <8 x i32> %677, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %679 = ashr <8 x i32> %678, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %679, <8 x i32>* %544, align 32
  %680 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %591, i32 %660) #7
  %681 = mul <8 x i32> %680, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %682 = add <8 x i32> %681, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %683 = ashr <8 x i32> %682, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %683, <8 x i32>* %504, align 32
  %684 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %597, i32 %660) #7
  %685 = mul <8 x i32> %684, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %686 = add <8 x i32> %685, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %687 = ashr <8 x i32> %686, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %687, <8 x i32>* %552, align 32
  %688 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %603, i32 %660) #7
  %689 = mul <8 x i32> %688, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %690 = add <8 x i32> %689, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %691 = ashr <8 x i32> %690, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %691, <8 x i32>* %512, align 32
  %692 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %609, i32 %660) #7
  %693 = mul <8 x i32> %692, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %694 = add <8 x i32> %693, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %695 = ashr <8 x i32> %694, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %695, <8 x i32>* %560, align 32
  %696 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %638, i32 %660) #7
  %697 = mul <8 x i32> %696, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %698 = add <8 x i32> %697, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %699 = ashr <8 x i32> %698, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %699, <8 x i32>* %355, align 32
  %700 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %644, i32 %660) #7
  %701 = mul <8 x i32> %700, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %702 = add <8 x i32> %701, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %703 = ashr <8 x i32> %702, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %703, <8 x i32>* %351, align 32
  %704 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %650, i32 %660) #7
  %705 = mul <8 x i32> %704, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %706 = add <8 x i32> %705, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %707 = ashr <8 x i32> %706, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %707, <8 x i32>* %354, align 32
  %708 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %656, i32 %660) #7
  %709 = mul <8 x i32> %708, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %710 = add <8 x i32> %709, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %711 = ashr <8 x i32> %710, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %711, <8 x i32>* %350, align 32
  %712 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %639, i32 %660) #7
  %713 = mul <8 x i32> %712, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %714 = add <8 x i32> %713, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %715 = ashr <8 x i32> %714, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %715, <8 x i32>* %353, align 32
  %716 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %645, i32 %660) #7
  %717 = mul <8 x i32> %716, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %718 = add <8 x i32> %717, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %719 = ashr <8 x i32> %718, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %719, <8 x i32>* %349, align 32
  %720 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %651, i32 %660) #7
  %721 = mul <8 x i32> %720, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %722 = add <8 x i32> %721, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %723 = ashr <8 x i32> %722, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %723, <8 x i32>* %352, align 32
  %724 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %657, i32 %660) #7
  br label %808

725:                                              ; preds = %347
  %726 = xor i32 %660, -1
  %727 = shl i32 1, %726
  %728 = insertelement <8 x i32> undef, i32 %727, i32 0
  %729 = shufflevector <8 x i32> %728, <8 x i32> undef, <8 x i32> zeroinitializer
  %730 = bitcast [16 x <4 x i64>]* %7 to <8 x i32>*
  %731 = add <8 x i32> %590, %729
  %732 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %731, i32 %661) #7
  %733 = mul <8 x i32> %732, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %734 = add <8 x i32> %733, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %735 = ashr <8 x i32> %734, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %735, <8 x i32>* %730, align 32
  %736 = add <8 x i32> %596, %729
  %737 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %736, i32 %661) #7
  %738 = mul <8 x i32> %737, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %739 = add <8 x i32> %738, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %740 = ashr <8 x i32> %739, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %740, <8 x i32>* %536, align 32
  %741 = add <8 x i32> %602, %729
  %742 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %741, i32 %661) #7
  %743 = mul <8 x i32> %742, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %744 = add <8 x i32> %743, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %745 = ashr <8 x i32> %744, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %745, <8 x i32>* %496, align 32
  %746 = add <8 x i32> %608, %729
  %747 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %746, i32 %661) #7
  %748 = mul <8 x i32> %747, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %749 = add <8 x i32> %748, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %750 = ashr <8 x i32> %749, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %750, <8 x i32>* %544, align 32
  %751 = add <8 x i32> %591, %729
  %752 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %751, i32 %661) #7
  %753 = mul <8 x i32> %752, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %754 = add <8 x i32> %753, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %755 = ashr <8 x i32> %754, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %755, <8 x i32>* %504, align 32
  %756 = add <8 x i32> %597, %729
  %757 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %756, i32 %661) #7
  %758 = mul <8 x i32> %757, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %759 = add <8 x i32> %758, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %760 = ashr <8 x i32> %759, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %760, <8 x i32>* %552, align 32
  %761 = add <8 x i32> %603, %729
  %762 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %761, i32 %661) #7
  %763 = mul <8 x i32> %762, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %764 = add <8 x i32> %763, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %765 = ashr <8 x i32> %764, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %765, <8 x i32>* %512, align 32
  %766 = add <8 x i32> %609, %729
  %767 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %766, i32 %661) #7
  %768 = mul <8 x i32> %767, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %769 = add <8 x i32> %768, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %770 = ashr <8 x i32> %769, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %770, <8 x i32>* %560, align 32
  %771 = add <8 x i32> %638, %729
  %772 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %771, i32 %661) #7
  %773 = mul <8 x i32> %772, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %774 = add <8 x i32> %773, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %775 = ashr <8 x i32> %774, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %775, <8 x i32>* %355, align 32
  %776 = add <8 x i32> %644, %729
  %777 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %776, i32 %661) #7
  %778 = mul <8 x i32> %777, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %779 = add <8 x i32> %778, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %780 = ashr <8 x i32> %779, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %780, <8 x i32>* %351, align 32
  %781 = add <8 x i32> %650, %729
  %782 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %781, i32 %661) #7
  %783 = mul <8 x i32> %782, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %784 = add <8 x i32> %783, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %785 = ashr <8 x i32> %784, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %785, <8 x i32>* %354, align 32
  %786 = add <8 x i32> %656, %729
  %787 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %786, i32 %661) #7
  %788 = mul <8 x i32> %787, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %789 = add <8 x i32> %788, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %790 = ashr <8 x i32> %789, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %790, <8 x i32>* %350, align 32
  %791 = add <8 x i32> %639, %729
  %792 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %791, i32 %661) #7
  %793 = mul <8 x i32> %792, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %794 = add <8 x i32> %793, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %795 = ashr <8 x i32> %794, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %795, <8 x i32>* %353, align 32
  %796 = add <8 x i32> %645, %729
  %797 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %796, i32 %661) #7
  %798 = mul <8 x i32> %797, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %799 = add <8 x i32> %798, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %800 = ashr <8 x i32> %799, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %800, <8 x i32>* %349, align 32
  %801 = add <8 x i32> %651, %729
  %802 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %801, i32 %661) #7
  %803 = mul <8 x i32> %802, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %804 = add <8 x i32> %803, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %805 = ashr <8 x i32> %804, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %805, <8 x i32>* %352, align 32
  %806 = add <8 x i32> %657, %729
  %807 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %806, i32 %661) #7
  br label %808

808:                                              ; preds = %725, %663
  %809 = phi <8 x i32> [ %724, %663 ], [ %807, %725 ]
  %810 = mul <8 x i32> %809, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %811 = add <8 x i32> %810, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %812 = ashr <8 x i32> %811, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %812, <8 x i32>* %348, align 32
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 32 %6, i8* nonnull align 32 %8, i64 512, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %10) #7
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_fwd_txfm2d_16x8_avx2(i16* nocapture readonly, i32* nocapture, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = bitcast i32* %1 to i8*
  %7 = alloca [64 x <4 x i64>], align 32
  %8 = alloca [16 x <4 x i64>], align 32
  %9 = bitcast [16 x <4 x i64>]* %8 to i8*
  %10 = alloca [16 x <4 x i64>], align 32
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %9) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %9, i8 -86, i64 512, i1 false)
  %11 = bitcast [16 x <4 x i64>]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %11) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %11, i8 -86, i64 512, i1 false)
  %12 = load i8*, i8** getelementptr inbounds ([19 x i8*], [19 x i8*]* @av1_fwd_txfm_shift_ls, i64 0, i64 8), align 16
  %13 = zext i8 %3 to i64
  %14 = getelementptr inbounds [16 x void (<4 x i64>*, <4 x i64>*, i8, i32, i32)*], [16 x void (<4 x i64>*, <4 x i64>*, i8, i32, i32)*]* @col_highbd_txfm8x8_arr, i64 0, i64 %13
  %15 = load void (<4 x i64>*, <4 x i64>*, i8, i32, i32)*, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)** %14, align 8
  %16 = getelementptr inbounds [16 x void (<4 x i64>*, <4 x i64>*, i8, i32, i32)*], [16 x void (<4 x i64>*, <4 x i64>*, i8, i32, i32)*]* @row_highbd_txfm8x16_arr, i64 0, i64 %13
  %17 = load void (<4 x i64>*, <4 x i64>*, i8, i32, i32)*, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)** %16, align 8
  %18 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 2, i64 1), align 1
  switch i8 %3, label %63 [
    i8 6, label %20
    i8 15, label %19
    i8 7, label %19
    i8 5, label %19
    i8 14, label %21
    i8 8, label %21
    i8 4, label %21
  ]

19:                                               ; preds = %5, %5, %5
  br label %63

20:                                               ; preds = %5
  br label %21

21:                                               ; preds = %5, %5, %5, %20
  %22 = phi i32 [ 1, %20 ], [ 0, %5 ], [ 0, %5 ], [ 0, %5 ]
  %23 = bitcast [64 x <4 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %23) #7
  %24 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 8
  %25 = bitcast <4 x i64>* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %25, i8 -86, i64 1792, i1 false) #7
  %26 = sext i32 %2 to i64
  %27 = bitcast i16* %0 to <4 x i64>*
  %28 = load <4 x i64>, <4 x i64>* %27, align 1
  %29 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 7
  store <4 x i64> %28, <4 x i64>* %29, align 32
  %30 = getelementptr inbounds i16, i16* %0, i64 %26
  %31 = bitcast i16* %30 to <4 x i64>*
  %32 = load <4 x i64>, <4 x i64>* %31, align 1
  %33 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 6
  store <4 x i64> %32, <4 x i64>* %33, align 32
  %34 = shl nsw i64 %26, 1
  %35 = getelementptr inbounds i16, i16* %0, i64 %34
  %36 = bitcast i16* %35 to <4 x i64>*
  %37 = load <4 x i64>, <4 x i64>* %36, align 1
  %38 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 5
  store <4 x i64> %37, <4 x i64>* %38, align 32
  %39 = mul nsw i64 %26, 3
  %40 = getelementptr inbounds i16, i16* %0, i64 %39
  %41 = bitcast i16* %40 to <4 x i64>*
  %42 = load <4 x i64>, <4 x i64>* %41, align 1
  %43 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 4
  store <4 x i64> %42, <4 x i64>* %43, align 32
  %44 = shl nsw i64 %26, 2
  %45 = getelementptr inbounds i16, i16* %0, i64 %44
  %46 = bitcast i16* %45 to <4 x i64>*
  %47 = load <4 x i64>, <4 x i64>* %46, align 1
  %48 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 3
  store <4 x i64> %47, <4 x i64>* %48, align 32
  %49 = mul nsw i64 %26, 5
  %50 = getelementptr inbounds i16, i16* %0, i64 %49
  %51 = bitcast i16* %50 to <4 x i64>*
  %52 = load <4 x i64>, <4 x i64>* %51, align 1
  %53 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 2
  store <4 x i64> %52, <4 x i64>* %53, align 32
  %54 = mul nsw i64 %26, 6
  %55 = getelementptr inbounds i16, i16* %0, i64 %54
  %56 = bitcast i16* %55 to <4 x i64>*
  %57 = load <4 x i64>, <4 x i64>* %56, align 1
  %58 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 1
  store <4 x i64> %57, <4 x i64>* %58, align 32
  %59 = mul nsw i64 %26, 7
  %60 = getelementptr inbounds i16, i16* %0, i64 %59
  %61 = bitcast i16* %60 to <4 x i64>*
  %62 = load <4 x i64>, <4 x i64>* %61, align 1
  br label %105

63:                                               ; preds = %19, %5
  %64 = phi i32 [ 0, %5 ], [ 1, %19 ]
  %65 = bitcast [64 x <4 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %65) #7
  %66 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 8
  %67 = bitcast <4 x i64>* %66 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %67, i8 -86, i64 1792, i1 false) #7
  %68 = sext i32 %2 to i64
  %69 = bitcast i16* %0 to <4 x i64>*
  %70 = load <4 x i64>, <4 x i64>* %69, align 1
  %71 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 0
  store <4 x i64> %70, <4 x i64>* %71, align 32
  %72 = getelementptr inbounds i16, i16* %0, i64 %68
  %73 = bitcast i16* %72 to <4 x i64>*
  %74 = load <4 x i64>, <4 x i64>* %73, align 1
  %75 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 1
  store <4 x i64> %74, <4 x i64>* %75, align 32
  %76 = shl nsw i64 %68, 1
  %77 = getelementptr inbounds i16, i16* %0, i64 %76
  %78 = bitcast i16* %77 to <4 x i64>*
  %79 = load <4 x i64>, <4 x i64>* %78, align 1
  %80 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 2
  store <4 x i64> %79, <4 x i64>* %80, align 32
  %81 = mul nsw i64 %68, 3
  %82 = getelementptr inbounds i16, i16* %0, i64 %81
  %83 = bitcast i16* %82 to <4 x i64>*
  %84 = load <4 x i64>, <4 x i64>* %83, align 1
  %85 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 3
  store <4 x i64> %84, <4 x i64>* %85, align 32
  %86 = shl nsw i64 %68, 2
  %87 = getelementptr inbounds i16, i16* %0, i64 %86
  %88 = bitcast i16* %87 to <4 x i64>*
  %89 = load <4 x i64>, <4 x i64>* %88, align 1
  %90 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 4
  store <4 x i64> %89, <4 x i64>* %90, align 32
  %91 = mul nsw i64 %68, 5
  %92 = getelementptr inbounds i16, i16* %0, i64 %91
  %93 = bitcast i16* %92 to <4 x i64>*
  %94 = load <4 x i64>, <4 x i64>* %93, align 1
  %95 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 5
  store <4 x i64> %94, <4 x i64>* %95, align 32
  %96 = mul nsw i64 %68, 6
  %97 = getelementptr inbounds i16, i16* %0, i64 %96
  %98 = bitcast i16* %97 to <4 x i64>*
  %99 = load <4 x i64>, <4 x i64>* %98, align 1
  %100 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 6
  store <4 x i64> %99, <4 x i64>* %100, align 32
  %101 = mul nsw i64 %68, 7
  %102 = getelementptr inbounds i16, i16* %0, i64 %101
  %103 = bitcast i16* %102 to <4 x i64>*
  %104 = load <4 x i64>, <4 x i64>* %103, align 1
  br label %105

105:                                              ; preds = %21, %63
  %106 = phi i64 [ 0, %21 ], [ 7, %63 ]
  %107 = phi <4 x i64> [ %62, %21 ], [ %104, %63 ]
  %108 = phi <4 x i64> [ %28, %21 ], [ %104, %63 ]
  %109 = phi <4 x i64> [ %32, %21 ], [ %99, %63 ]
  %110 = phi <4 x i64> [ %37, %21 ], [ %94, %63 ]
  %111 = phi <4 x i64> [ %42, %21 ], [ %89, %63 ]
  %112 = phi <4 x i64> [ %47, %21 ], [ %84, %63 ]
  %113 = phi <4 x i64> [ %52, %21 ], [ %79, %63 ]
  %114 = phi <4 x i64> [ %57, %21 ], [ %74, %63 ]
  %115 = phi <4 x i64> [ %62, %21 ], [ %70, %63 ]
  %116 = phi i8* [ %23, %21 ], [ %65, %63 ]
  %117 = phi i32 [ %22, %21 ], [ %64, %63 ]
  %118 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 %106
  store <4 x i64> %107, <4 x i64>* %118, align 32
  %119 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 0
  %120 = icmp eq i32 %117, 0
  br i1 %120, label %121, label %209

121:                                              ; preds = %105
  %122 = shufflevector <4 x i64> %115, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %123 = bitcast <2 x i64> %122 to <8 x i16>
  %124 = sext <8 x i16> %123 to <8 x i32>
  %125 = bitcast [16 x <4 x i64>]* %8 to <8 x i32>*
  store <8 x i32> %124, <8 x i32>* %125, align 32
  %126 = bitcast <4 x i64> %115 to <8 x i32>
  %127 = shufflevector <8 x i32> %126, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %128 = bitcast <4 x i32> %127 to <8 x i16>
  %129 = sext <8 x i16> %128 to <8 x i32>
  %130 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 1
  %131 = bitcast <4 x i64>* %130 to <8 x i32>*
  store <8 x i32> %129, <8 x i32>* %131, align 32
  %132 = shufflevector <4 x i64> %114, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %133 = bitcast <2 x i64> %132 to <8 x i16>
  %134 = sext <8 x i16> %133 to <8 x i32>
  %135 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 2
  %136 = bitcast <4 x i64>* %135 to <8 x i32>*
  store <8 x i32> %134, <8 x i32>* %136, align 32
  %137 = bitcast <4 x i64> %114 to <8 x i32>
  %138 = shufflevector <8 x i32> %137, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %139 = bitcast <4 x i32> %138 to <8 x i16>
  %140 = sext <8 x i16> %139 to <8 x i32>
  %141 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 3
  %142 = bitcast <4 x i64>* %141 to <8 x i32>*
  store <8 x i32> %140, <8 x i32>* %142, align 32
  %143 = shufflevector <4 x i64> %113, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %144 = bitcast <2 x i64> %143 to <8 x i16>
  %145 = sext <8 x i16> %144 to <8 x i32>
  %146 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 4
  %147 = bitcast <4 x i64>* %146 to <8 x i32>*
  store <8 x i32> %145, <8 x i32>* %147, align 32
  %148 = bitcast <4 x i64> %113 to <8 x i32>
  %149 = shufflevector <8 x i32> %148, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %150 = bitcast <4 x i32> %149 to <8 x i16>
  %151 = sext <8 x i16> %150 to <8 x i32>
  %152 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 5
  %153 = bitcast <4 x i64>* %152 to <8 x i32>*
  store <8 x i32> %151, <8 x i32>* %153, align 32
  %154 = shufflevector <4 x i64> %112, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %155 = bitcast <2 x i64> %154 to <8 x i16>
  %156 = sext <8 x i16> %155 to <8 x i32>
  %157 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 6
  %158 = bitcast <4 x i64>* %157 to <8 x i32>*
  store <8 x i32> %156, <8 x i32>* %158, align 32
  %159 = bitcast <4 x i64> %112 to <8 x i32>
  %160 = shufflevector <8 x i32> %159, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %161 = bitcast <4 x i32> %160 to <8 x i16>
  %162 = sext <8 x i16> %161 to <8 x i32>
  %163 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 7
  %164 = bitcast <4 x i64>* %163 to <8 x i32>*
  store <8 x i32> %162, <8 x i32>* %164, align 32
  %165 = shufflevector <4 x i64> %111, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %166 = bitcast <2 x i64> %165 to <8 x i16>
  %167 = sext <8 x i16> %166 to <8 x i32>
  %168 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 8
  %169 = bitcast <4 x i64>* %168 to <8 x i32>*
  store <8 x i32> %167, <8 x i32>* %169, align 32
  %170 = bitcast <4 x i64> %111 to <8 x i32>
  %171 = shufflevector <8 x i32> %170, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %172 = bitcast <4 x i32> %171 to <8 x i16>
  %173 = sext <8 x i16> %172 to <8 x i32>
  %174 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 9
  %175 = bitcast <4 x i64>* %174 to <8 x i32>*
  store <8 x i32> %173, <8 x i32>* %175, align 32
  %176 = shufflevector <4 x i64> %110, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %177 = bitcast <2 x i64> %176 to <8 x i16>
  %178 = sext <8 x i16> %177 to <8 x i32>
  %179 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 10
  %180 = bitcast <4 x i64>* %179 to <8 x i32>*
  store <8 x i32> %178, <8 x i32>* %180, align 32
  %181 = bitcast <4 x i64> %110 to <8 x i32>
  %182 = shufflevector <8 x i32> %181, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %183 = bitcast <4 x i32> %182 to <8 x i16>
  %184 = sext <8 x i16> %183 to <8 x i32>
  %185 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 11
  %186 = bitcast <4 x i64>* %185 to <8 x i32>*
  store <8 x i32> %184, <8 x i32>* %186, align 32
  %187 = shufflevector <4 x i64> %109, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %188 = bitcast <2 x i64> %187 to <8 x i16>
  %189 = sext <8 x i16> %188 to <8 x i32>
  %190 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 12
  %191 = bitcast <4 x i64>* %190 to <8 x i32>*
  store <8 x i32> %189, <8 x i32>* %191, align 32
  %192 = bitcast <4 x i64> %109 to <8 x i32>
  %193 = shufflevector <8 x i32> %192, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %194 = bitcast <4 x i32> %193 to <8 x i16>
  %195 = sext <8 x i16> %194 to <8 x i32>
  %196 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 13
  %197 = bitcast <4 x i64>* %196 to <8 x i32>*
  store <8 x i32> %195, <8 x i32>* %197, align 32
  %198 = shufflevector <4 x i64> %108, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %199 = bitcast <2 x i64> %198 to <8 x i16>
  %200 = sext <8 x i16> %199 to <8 x i32>
  %201 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 14
  %202 = bitcast <4 x i64>* %201 to <8 x i32>*
  store <8 x i32> %200, <8 x i32>* %202, align 32
  %203 = bitcast <4 x i64> %108 to <8 x i32>
  %204 = shufflevector <8 x i32> %203, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %205 = bitcast <4 x i32> %204 to <8 x i16>
  %206 = sext <8 x i16> %205 to <8 x i32>
  %207 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 15
  %208 = bitcast <4 x i64>* %207 to <8 x i32>*
  store <8 x i32> %206, <8 x i32>* %208, align 32
  br label %240

209:                                              ; preds = %105, %237
  %210 = phi <4 x i64> [ %239, %237 ], [ %115, %105 ]
  %211 = phi i64 [ %235, %237 ], [ 0, %105 ]
  %212 = shufflevector <4 x i64> %210, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %213 = bitcast <2 x i64> %212 to <8 x i16>
  %214 = shufflevector <8 x i16> %213, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %215 = shufflevector <8 x i16> %214, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %216 = bitcast <8 x i16> %215 to <4 x i32>
  %217 = shufflevector <4 x i32> %216, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %218 = bitcast <4 x i32> %217 to <8 x i16>
  %219 = sext <8 x i16> %218 to <8 x i32>
  %220 = shl nuw nsw i64 %211, 1
  %221 = or i64 %220, 1
  %222 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 %221
  %223 = bitcast <4 x i64>* %222 to <8 x i32>*
  store <8 x i32> %219, <8 x i32>* %223, align 32
  %224 = bitcast <4 x i64> %210 to <8 x i32>
  %225 = shufflevector <8 x i32> %224, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %226 = bitcast <4 x i32> %225 to <8 x i16>
  %227 = shufflevector <8 x i16> %226, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %228 = shufflevector <8 x i16> %227, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %229 = bitcast <8 x i16> %228 to <4 x i32>
  %230 = shufflevector <4 x i32> %229, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %231 = bitcast <4 x i32> %230 to <8 x i16>
  %232 = sext <8 x i16> %231 to <8 x i32>
  %233 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 %220
  %234 = bitcast <4 x i64>* %233 to <8 x i32>*
  store <8 x i32> %232, <8 x i32>* %234, align 32
  %235 = add nuw nsw i64 %211, 1
  %236 = icmp eq i64 %235, 8
  br i1 %236, label %240, label %237

237:                                              ; preds = %209
  %238 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 %235
  %239 = load <4 x i64>, <4 x i64>* %238, align 32
  br label %209

240:                                              ; preds = %209, %121
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %116) #7
  %241 = load i8, i8* %12, align 1
  %242 = sext i8 %241 to i32
  %243 = icmp slt i8 %241, 0
  br i1 %243, label %244, label %329

244:                                              ; preds = %240
  %245 = sub nsw i32 0, %242
  %246 = xor i32 %242, -1
  %247 = shl i32 1, %246
  %248 = insertelement <8 x i32> undef, i32 %247, i32 0
  %249 = shufflevector <8 x i32> %248, <8 x i32> undef, <8 x i32> zeroinitializer
  %250 = bitcast [16 x <4 x i64>]* %8 to <8 x i32>*
  %251 = load <8 x i32>, <8 x i32>* %250, align 32
  %252 = add <8 x i32> %251, %249
  %253 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %252, i32 %245) #7
  store <8 x i32> %253, <8 x i32>* %250, align 32
  %254 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 1
  %255 = bitcast <4 x i64>* %254 to <8 x i32>*
  %256 = load <8 x i32>, <8 x i32>* %255, align 32
  %257 = add <8 x i32> %256, %249
  %258 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %257, i32 %245) #7
  store <8 x i32> %258, <8 x i32>* %255, align 32
  %259 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 2
  %260 = bitcast <4 x i64>* %259 to <8 x i32>*
  %261 = load <8 x i32>, <8 x i32>* %260, align 32
  %262 = add <8 x i32> %261, %249
  %263 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %262, i32 %245) #7
  store <8 x i32> %263, <8 x i32>* %260, align 32
  %264 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 3
  %265 = bitcast <4 x i64>* %264 to <8 x i32>*
  %266 = load <8 x i32>, <8 x i32>* %265, align 32
  %267 = add <8 x i32> %266, %249
  %268 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %267, i32 %245) #7
  store <8 x i32> %268, <8 x i32>* %265, align 32
  %269 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 4
  %270 = bitcast <4 x i64>* %269 to <8 x i32>*
  %271 = load <8 x i32>, <8 x i32>* %270, align 32
  %272 = add <8 x i32> %271, %249
  %273 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %272, i32 %245) #7
  store <8 x i32> %273, <8 x i32>* %270, align 32
  %274 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 5
  %275 = bitcast <4 x i64>* %274 to <8 x i32>*
  %276 = load <8 x i32>, <8 x i32>* %275, align 32
  %277 = add <8 x i32> %276, %249
  %278 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %277, i32 %245) #7
  store <8 x i32> %278, <8 x i32>* %275, align 32
  %279 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 6
  %280 = bitcast <4 x i64>* %279 to <8 x i32>*
  %281 = load <8 x i32>, <8 x i32>* %280, align 32
  %282 = add <8 x i32> %281, %249
  %283 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %282, i32 %245) #7
  store <8 x i32> %283, <8 x i32>* %280, align 32
  %284 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 7
  %285 = bitcast <4 x i64>* %284 to <8 x i32>*
  %286 = load <8 x i32>, <8 x i32>* %285, align 32
  %287 = add <8 x i32> %286, %249
  %288 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %287, i32 %245) #7
  store <8 x i32> %288, <8 x i32>* %285, align 32
  %289 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 8
  %290 = bitcast <4 x i64>* %289 to <8 x i32>*
  %291 = load <8 x i32>, <8 x i32>* %290, align 32
  %292 = add <8 x i32> %291, %249
  %293 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %292, i32 %245) #7
  store <8 x i32> %293, <8 x i32>* %290, align 32
  %294 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 9
  %295 = bitcast <4 x i64>* %294 to <8 x i32>*
  %296 = load <8 x i32>, <8 x i32>* %295, align 32
  %297 = add <8 x i32> %296, %249
  %298 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %297, i32 %245) #7
  store <8 x i32> %298, <8 x i32>* %295, align 32
  %299 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 10
  %300 = bitcast <4 x i64>* %299 to <8 x i32>*
  %301 = load <8 x i32>, <8 x i32>* %300, align 32
  %302 = add <8 x i32> %301, %249
  %303 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %302, i32 %245) #7
  store <8 x i32> %303, <8 x i32>* %300, align 32
  %304 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 11
  %305 = bitcast <4 x i64>* %304 to <8 x i32>*
  %306 = load <8 x i32>, <8 x i32>* %305, align 32
  %307 = add <8 x i32> %306, %249
  %308 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %307, i32 %245) #7
  store <8 x i32> %308, <8 x i32>* %305, align 32
  %309 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 12
  %310 = bitcast <4 x i64>* %309 to <8 x i32>*
  %311 = load <8 x i32>, <8 x i32>* %310, align 32
  %312 = add <8 x i32> %311, %249
  %313 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %312, i32 %245) #7
  store <8 x i32> %313, <8 x i32>* %310, align 32
  %314 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 13
  %315 = bitcast <4 x i64>* %314 to <8 x i32>*
  %316 = load <8 x i32>, <8 x i32>* %315, align 32
  %317 = add <8 x i32> %316, %249
  %318 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %317, i32 %245) #7
  store <8 x i32> %318, <8 x i32>* %315, align 32
  %319 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 14
  %320 = bitcast <4 x i64>* %319 to <8 x i32>*
  %321 = load <8 x i32>, <8 x i32>* %320, align 32
  %322 = add <8 x i32> %321, %249
  %323 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %322, i32 %245) #7
  store <8 x i32> %323, <8 x i32>* %320, align 32
  %324 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 15
  %325 = bitcast <4 x i64>* %324 to <8 x i32>*
  %326 = load <8 x i32>, <8 x i32>* %325, align 32
  %327 = add <8 x i32> %326, %249
  %328 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %327, i32 %245) #7
  store <8 x i32> %328, <8 x i32>* %325, align 32
  br label %395

329:                                              ; preds = %240
  %330 = icmp eq i8 %241, 0
  br i1 %330, label %395, label %331

331:                                              ; preds = %329
  %332 = bitcast [16 x <4 x i64>]* %8 to <8 x i32>*
  %333 = load <8 x i32>, <8 x i32>* %332, align 32
  %334 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %333, i32 %242) #7
  store <8 x i32> %334, <8 x i32>* %332, align 32
  %335 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 1
  %336 = bitcast <4 x i64>* %335 to <8 x i32>*
  %337 = load <8 x i32>, <8 x i32>* %336, align 32
  %338 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %337, i32 %242) #7
  store <8 x i32> %338, <8 x i32>* %336, align 32
  %339 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 2
  %340 = bitcast <4 x i64>* %339 to <8 x i32>*
  %341 = load <8 x i32>, <8 x i32>* %340, align 32
  %342 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %341, i32 %242) #7
  store <8 x i32> %342, <8 x i32>* %340, align 32
  %343 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 3
  %344 = bitcast <4 x i64>* %343 to <8 x i32>*
  %345 = load <8 x i32>, <8 x i32>* %344, align 32
  %346 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %345, i32 %242) #7
  store <8 x i32> %346, <8 x i32>* %344, align 32
  %347 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 4
  %348 = bitcast <4 x i64>* %347 to <8 x i32>*
  %349 = load <8 x i32>, <8 x i32>* %348, align 32
  %350 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %349, i32 %242) #7
  store <8 x i32> %350, <8 x i32>* %348, align 32
  %351 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 5
  %352 = bitcast <4 x i64>* %351 to <8 x i32>*
  %353 = load <8 x i32>, <8 x i32>* %352, align 32
  %354 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %353, i32 %242) #7
  store <8 x i32> %354, <8 x i32>* %352, align 32
  %355 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 6
  %356 = bitcast <4 x i64>* %355 to <8 x i32>*
  %357 = load <8 x i32>, <8 x i32>* %356, align 32
  %358 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %357, i32 %242) #7
  store <8 x i32> %358, <8 x i32>* %356, align 32
  %359 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 7
  %360 = bitcast <4 x i64>* %359 to <8 x i32>*
  %361 = load <8 x i32>, <8 x i32>* %360, align 32
  %362 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %361, i32 %242) #7
  store <8 x i32> %362, <8 x i32>* %360, align 32
  %363 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 8
  %364 = bitcast <4 x i64>* %363 to <8 x i32>*
  %365 = load <8 x i32>, <8 x i32>* %364, align 32
  %366 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %365, i32 %242) #7
  store <8 x i32> %366, <8 x i32>* %364, align 32
  %367 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 9
  %368 = bitcast <4 x i64>* %367 to <8 x i32>*
  %369 = load <8 x i32>, <8 x i32>* %368, align 32
  %370 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %369, i32 %242) #7
  store <8 x i32> %370, <8 x i32>* %368, align 32
  %371 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 10
  %372 = bitcast <4 x i64>* %371 to <8 x i32>*
  %373 = load <8 x i32>, <8 x i32>* %372, align 32
  %374 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %373, i32 %242) #7
  store <8 x i32> %374, <8 x i32>* %372, align 32
  %375 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 11
  %376 = bitcast <4 x i64>* %375 to <8 x i32>*
  %377 = load <8 x i32>, <8 x i32>* %376, align 32
  %378 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %377, i32 %242) #7
  store <8 x i32> %378, <8 x i32>* %376, align 32
  %379 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 12
  %380 = bitcast <4 x i64>* %379 to <8 x i32>*
  %381 = load <8 x i32>, <8 x i32>* %380, align 32
  %382 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %381, i32 %242) #7
  store <8 x i32> %382, <8 x i32>* %380, align 32
  %383 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 13
  %384 = bitcast <4 x i64>* %383 to <8 x i32>*
  %385 = load <8 x i32>, <8 x i32>* %384, align 32
  %386 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %385, i32 %242) #7
  store <8 x i32> %386, <8 x i32>* %384, align 32
  %387 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 14
  %388 = bitcast <4 x i64>* %387 to <8 x i32>*
  %389 = load <8 x i32>, <8 x i32>* %388, align 32
  %390 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %389, i32 %242) #7
  store <8 x i32> %390, <8 x i32>* %388, align 32
  %391 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 15
  %392 = bitcast <4 x i64>* %391 to <8 x i32>*
  %393 = load <8 x i32>, <8 x i32>* %392, align 32
  %394 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %393, i32 %242) #7
  store <8 x i32> %394, <8 x i32>* %392, align 32
  br label %395

395:                                              ; preds = %331, %244, %329
  %396 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 0
  call void %15(<4 x i64>* %119, <4 x i64>* nonnull %396, i8 signext %18, i32 2, i32 2) #7
  %397 = getelementptr inbounds i8, i8* %12, i64 1
  %398 = load i8, i8* %397, align 1
  %399 = sext i8 %398 to i32
  %400 = icmp slt i8 %398, 0
  br i1 %400, label %401, label %486

401:                                              ; preds = %395
  %402 = sub nsw i32 0, %399
  %403 = xor i32 %399, -1
  %404 = shl i32 1, %403
  %405 = insertelement <8 x i32> undef, i32 %404, i32 0
  %406 = shufflevector <8 x i32> %405, <8 x i32> undef, <8 x i32> zeroinitializer
  %407 = bitcast [16 x <4 x i64>]* %10 to <8 x i32>*
  %408 = load <8 x i32>, <8 x i32>* %407, align 32
  %409 = add <8 x i32> %408, %406
  %410 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %409, i32 %402) #7
  store <8 x i32> %410, <8 x i32>* %407, align 32
  %411 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 1
  %412 = bitcast <4 x i64>* %411 to <8 x i32>*
  %413 = load <8 x i32>, <8 x i32>* %412, align 32
  %414 = add <8 x i32> %413, %406
  %415 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %414, i32 %402) #7
  store <8 x i32> %415, <8 x i32>* %412, align 32
  %416 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 2
  %417 = bitcast <4 x i64>* %416 to <8 x i32>*
  %418 = load <8 x i32>, <8 x i32>* %417, align 32
  %419 = add <8 x i32> %418, %406
  %420 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %419, i32 %402) #7
  store <8 x i32> %420, <8 x i32>* %417, align 32
  %421 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 3
  %422 = bitcast <4 x i64>* %421 to <8 x i32>*
  %423 = load <8 x i32>, <8 x i32>* %422, align 32
  %424 = add <8 x i32> %423, %406
  %425 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %424, i32 %402) #7
  store <8 x i32> %425, <8 x i32>* %422, align 32
  %426 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 4
  %427 = bitcast <4 x i64>* %426 to <8 x i32>*
  %428 = load <8 x i32>, <8 x i32>* %427, align 32
  %429 = add <8 x i32> %428, %406
  %430 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %429, i32 %402) #7
  store <8 x i32> %430, <8 x i32>* %427, align 32
  %431 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 5
  %432 = bitcast <4 x i64>* %431 to <8 x i32>*
  %433 = load <8 x i32>, <8 x i32>* %432, align 32
  %434 = add <8 x i32> %433, %406
  %435 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %434, i32 %402) #7
  store <8 x i32> %435, <8 x i32>* %432, align 32
  %436 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 6
  %437 = bitcast <4 x i64>* %436 to <8 x i32>*
  %438 = load <8 x i32>, <8 x i32>* %437, align 32
  %439 = add <8 x i32> %438, %406
  %440 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %439, i32 %402) #7
  store <8 x i32> %440, <8 x i32>* %437, align 32
  %441 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 7
  %442 = bitcast <4 x i64>* %441 to <8 x i32>*
  %443 = load <8 x i32>, <8 x i32>* %442, align 32
  %444 = add <8 x i32> %443, %406
  %445 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %444, i32 %402) #7
  store <8 x i32> %445, <8 x i32>* %442, align 32
  %446 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 8
  %447 = bitcast <4 x i64>* %446 to <8 x i32>*
  %448 = load <8 x i32>, <8 x i32>* %447, align 32
  %449 = add <8 x i32> %448, %406
  %450 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %449, i32 %402) #7
  store <8 x i32> %450, <8 x i32>* %447, align 32
  %451 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 9
  %452 = bitcast <4 x i64>* %451 to <8 x i32>*
  %453 = load <8 x i32>, <8 x i32>* %452, align 32
  %454 = add <8 x i32> %453, %406
  %455 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %454, i32 %402) #7
  store <8 x i32> %455, <8 x i32>* %452, align 32
  %456 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 10
  %457 = bitcast <4 x i64>* %456 to <8 x i32>*
  %458 = load <8 x i32>, <8 x i32>* %457, align 32
  %459 = add <8 x i32> %458, %406
  %460 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %459, i32 %402) #7
  store <8 x i32> %460, <8 x i32>* %457, align 32
  %461 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 11
  %462 = bitcast <4 x i64>* %461 to <8 x i32>*
  %463 = load <8 x i32>, <8 x i32>* %462, align 32
  %464 = add <8 x i32> %463, %406
  %465 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %464, i32 %402) #7
  store <8 x i32> %465, <8 x i32>* %462, align 32
  %466 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 12
  %467 = bitcast <4 x i64>* %466 to <8 x i32>*
  %468 = load <8 x i32>, <8 x i32>* %467, align 32
  %469 = add <8 x i32> %468, %406
  %470 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %469, i32 %402) #7
  store <8 x i32> %470, <8 x i32>* %467, align 32
  %471 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 13
  %472 = bitcast <4 x i64>* %471 to <8 x i32>*
  %473 = load <8 x i32>, <8 x i32>* %472, align 32
  %474 = add <8 x i32> %473, %406
  %475 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %474, i32 %402) #7
  store <8 x i32> %475, <8 x i32>* %472, align 32
  %476 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 14
  %477 = bitcast <4 x i64>* %476 to <8 x i32>*
  %478 = load <8 x i32>, <8 x i32>* %477, align 32
  %479 = add <8 x i32> %478, %406
  %480 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %479, i32 %402) #7
  store <8 x i32> %480, <8 x i32>* %477, align 32
  %481 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 15
  %482 = bitcast <4 x i64>* %481 to <8 x i32>*
  %483 = load <8 x i32>, <8 x i32>* %482, align 32
  %484 = add <8 x i32> %483, %406
  %485 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %484, i32 %402) #7
  store <8 x i32> %485, <8 x i32>* %482, align 32
  br label %583

486:                                              ; preds = %395
  %487 = icmp eq i8 %398, 0
  %488 = bitcast [16 x <4 x i64>]* %10 to <8 x i32>*
  %489 = load <8 x i32>, <8 x i32>* %488, align 32
  br i1 %487, label %490, label %521

490:                                              ; preds = %486
  %491 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 2
  %492 = bitcast <4 x i64>* %491 to <8 x i32>*
  %493 = load <8 x i32>, <8 x i32>* %492, align 32
  %494 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 4
  %495 = bitcast <4 x i64>* %494 to <8 x i32>*
  %496 = load <8 x i32>, <8 x i32>* %495, align 32
  %497 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 6
  %498 = bitcast <4 x i64>* %497 to <8 x i32>*
  %499 = load <8 x i32>, <8 x i32>* %498, align 32
  %500 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 8
  %501 = bitcast <4 x i64>* %500 to <8 x i32>*
  %502 = load <8 x i32>, <8 x i32>* %501, align 32
  %503 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 10
  %504 = bitcast <4 x i64>* %503 to <8 x i32>*
  %505 = load <8 x i32>, <8 x i32>* %504, align 32
  %506 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 12
  %507 = bitcast <4 x i64>* %506 to <8 x i32>*
  %508 = load <8 x i32>, <8 x i32>* %507, align 32
  %509 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 14
  %510 = bitcast <4 x i64>* %509 to <8 x i32>*
  %511 = load <8 x i32>, <8 x i32>* %510, align 32
  %512 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 1
  %513 = bitcast <4 x i64>* %512 to <8 x i32>*
  %514 = load <8 x i32>, <8 x i32>* %513, align 32
  %515 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 3
  %516 = bitcast <4 x i64>* %515 to <8 x i32>*
  %517 = load <8 x i32>, <8 x i32>* %516, align 32
  %518 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 5
  %519 = bitcast <4 x i64>* %518 to <8 x i32>*
  %520 = load <8 x i32>, <8 x i32>* %519, align 32
  br label %583

521:                                              ; preds = %486
  %522 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %489, i32 %399) #7
  store <8 x i32> %522, <8 x i32>* %488, align 32
  %523 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 1
  %524 = bitcast <4 x i64>* %523 to <8 x i32>*
  %525 = load <8 x i32>, <8 x i32>* %524, align 32
  %526 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %525, i32 %399) #7
  store <8 x i32> %526, <8 x i32>* %524, align 32
  %527 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 2
  %528 = bitcast <4 x i64>* %527 to <8 x i32>*
  %529 = load <8 x i32>, <8 x i32>* %528, align 32
  %530 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %529, i32 %399) #7
  store <8 x i32> %530, <8 x i32>* %528, align 32
  %531 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 3
  %532 = bitcast <4 x i64>* %531 to <8 x i32>*
  %533 = load <8 x i32>, <8 x i32>* %532, align 32
  %534 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %533, i32 %399) #7
  store <8 x i32> %534, <8 x i32>* %532, align 32
  %535 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 4
  %536 = bitcast <4 x i64>* %535 to <8 x i32>*
  %537 = load <8 x i32>, <8 x i32>* %536, align 32
  %538 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %537, i32 %399) #7
  store <8 x i32> %538, <8 x i32>* %536, align 32
  %539 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 5
  %540 = bitcast <4 x i64>* %539 to <8 x i32>*
  %541 = load <8 x i32>, <8 x i32>* %540, align 32
  %542 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %541, i32 %399) #7
  store <8 x i32> %542, <8 x i32>* %540, align 32
  %543 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 6
  %544 = bitcast <4 x i64>* %543 to <8 x i32>*
  %545 = load <8 x i32>, <8 x i32>* %544, align 32
  %546 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %545, i32 %399) #7
  store <8 x i32> %546, <8 x i32>* %544, align 32
  %547 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 7
  %548 = bitcast <4 x i64>* %547 to <8 x i32>*
  %549 = load <8 x i32>, <8 x i32>* %548, align 32
  %550 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %549, i32 %399) #7
  store <8 x i32> %550, <8 x i32>* %548, align 32
  %551 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 8
  %552 = bitcast <4 x i64>* %551 to <8 x i32>*
  %553 = load <8 x i32>, <8 x i32>* %552, align 32
  %554 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %553, i32 %399) #7
  store <8 x i32> %554, <8 x i32>* %552, align 32
  %555 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 9
  %556 = bitcast <4 x i64>* %555 to <8 x i32>*
  %557 = load <8 x i32>, <8 x i32>* %556, align 32
  %558 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %557, i32 %399) #7
  store <8 x i32> %558, <8 x i32>* %556, align 32
  %559 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 10
  %560 = bitcast <4 x i64>* %559 to <8 x i32>*
  %561 = load <8 x i32>, <8 x i32>* %560, align 32
  %562 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %561, i32 %399) #7
  store <8 x i32> %562, <8 x i32>* %560, align 32
  %563 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 11
  %564 = bitcast <4 x i64>* %563 to <8 x i32>*
  %565 = load <8 x i32>, <8 x i32>* %564, align 32
  %566 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %565, i32 %399) #7
  store <8 x i32> %566, <8 x i32>* %564, align 32
  %567 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 12
  %568 = bitcast <4 x i64>* %567 to <8 x i32>*
  %569 = load <8 x i32>, <8 x i32>* %568, align 32
  %570 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %569, i32 %399) #7
  store <8 x i32> %570, <8 x i32>* %568, align 32
  %571 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 13
  %572 = bitcast <4 x i64>* %571 to <8 x i32>*
  %573 = load <8 x i32>, <8 x i32>* %572, align 32
  %574 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %573, i32 %399) #7
  store <8 x i32> %574, <8 x i32>* %572, align 32
  %575 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 14
  %576 = bitcast <4 x i64>* %575 to <8 x i32>*
  %577 = load <8 x i32>, <8 x i32>* %576, align 32
  %578 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %577, i32 %399) #7
  store <8 x i32> %578, <8 x i32>* %576, align 32
  %579 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 15
  %580 = bitcast <4 x i64>* %579 to <8 x i32>*
  %581 = load <8 x i32>, <8 x i32>* %580, align 32
  %582 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %581, i32 %399) #7
  store <8 x i32> %582, <8 x i32>* %580, align 32
  br label %583

583:                                              ; preds = %490, %521, %401
  %584 = phi <8 x i32>* [ %519, %490 ], [ %540, %521 ], [ %432, %401 ]
  %585 = phi <8 x i32>* [ %516, %490 ], [ %532, %521 ], [ %422, %401 ]
  %586 = phi <8 x i32>* [ %513, %490 ], [ %524, %521 ], [ %412, %401 ]
  %587 = phi <8 x i32>* [ %510, %490 ], [ %576, %521 ], [ %477, %401 ]
  %588 = phi <8 x i32>* [ %507, %490 ], [ %568, %521 ], [ %467, %401 ]
  %589 = phi <8 x i32>* [ %504, %490 ], [ %560, %521 ], [ %457, %401 ]
  %590 = phi <8 x i32>* [ %501, %490 ], [ %552, %521 ], [ %447, %401 ]
  %591 = phi <8 x i32>* [ %498, %490 ], [ %544, %521 ], [ %437, %401 ]
  %592 = phi <8 x i32>* [ %495, %490 ], [ %536, %521 ], [ %427, %401 ]
  %593 = phi <8 x i32>* [ %492, %490 ], [ %528, %521 ], [ %417, %401 ]
  %594 = phi <8 x i32> [ %520, %490 ], [ %542, %521 ], [ %435, %401 ]
  %595 = phi <8 x i32> [ %517, %490 ], [ %534, %521 ], [ %425, %401 ]
  %596 = phi <8 x i32> [ %514, %490 ], [ %526, %521 ], [ %415, %401 ]
  %597 = phi <8 x i32> [ %511, %490 ], [ %578, %521 ], [ %480, %401 ]
  %598 = phi <8 x i32> [ %508, %490 ], [ %570, %521 ], [ %470, %401 ]
  %599 = phi <8 x i32> [ %505, %490 ], [ %562, %521 ], [ %460, %401 ]
  %600 = phi <8 x i32> [ %502, %490 ], [ %554, %521 ], [ %450, %401 ]
  %601 = phi <8 x i32> [ %499, %490 ], [ %546, %521 ], [ %440, %401 ]
  %602 = phi <8 x i32> [ %496, %490 ], [ %538, %521 ], [ %430, %401 ]
  %603 = phi <8 x i32> [ %493, %490 ], [ %530, %521 ], [ %420, %401 ]
  %604 = phi <8 x i32> [ %489, %490 ], [ %522, %521 ], [ %410, %401 ]
  %605 = bitcast [16 x <4 x i64>]* %10 to <8 x i32>*
  %606 = shufflevector <8 x i32> %604, <8 x i32> %603, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %607 = bitcast <8 x i32> %606 to <4 x i64>
  %608 = shufflevector <8 x i32> %604, <8 x i32> %603, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %609 = bitcast <8 x i32> %608 to <4 x i64>
  %610 = shufflevector <8 x i32> %602, <8 x i32> %601, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %611 = bitcast <8 x i32> %610 to <4 x i64>
  %612 = shufflevector <8 x i32> %602, <8 x i32> %601, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %613 = bitcast <8 x i32> %612 to <4 x i64>
  %614 = shufflevector <8 x i32> %600, <8 x i32> %599, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %615 = bitcast <8 x i32> %614 to <4 x i64>
  %616 = shufflevector <8 x i32> %600, <8 x i32> %599, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %617 = bitcast <8 x i32> %616 to <4 x i64>
  %618 = shufflevector <8 x i32> %598, <8 x i32> %597, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %619 = bitcast <8 x i32> %618 to <4 x i64>
  %620 = shufflevector <8 x i32> %598, <8 x i32> %597, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %621 = bitcast <8 x i32> %620 to <4 x i64>
  %622 = shufflevector <4 x i64> %607, <4 x i64> %611, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %623 = shufflevector <4 x i64> %615, <4 x i64> %619, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %624 = bitcast <4 x i64> %622 to <8 x i32>
  %625 = bitcast <4 x i64> %623 to <8 x i32>
  %626 = shufflevector <8 x i32> %624, <8 x i32> %625, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %627 = bitcast [16 x <4 x i64>]* %8 to <8 x i32>*
  store <8 x i32> %626, <8 x i32>* %627, align 32
  %628 = shufflevector <8 x i32> %624, <8 x i32> %625, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %629 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 4
  %630 = bitcast <4 x i64>* %629 to <8 x i32>*
  store <8 x i32> %628, <8 x i32>* %630, align 32
  %631 = shufflevector <4 x i64> %607, <4 x i64> %611, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %632 = shufflevector <4 x i64> %615, <4 x i64> %619, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %633 = bitcast <4 x i64> %631 to <8 x i32>
  %634 = bitcast <4 x i64> %632 to <8 x i32>
  %635 = shufflevector <8 x i32> %633, <8 x i32> %634, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %636 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 1
  %637 = bitcast <4 x i64>* %636 to <8 x i32>*
  store <8 x i32> %635, <8 x i32>* %637, align 32
  %638 = shufflevector <8 x i32> %633, <8 x i32> %634, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %639 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 5
  %640 = bitcast <4 x i64>* %639 to <8 x i32>*
  store <8 x i32> %638, <8 x i32>* %640, align 32
  %641 = shufflevector <4 x i64> %609, <4 x i64> %613, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %642 = shufflevector <4 x i64> %617, <4 x i64> %621, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %643 = bitcast <4 x i64> %641 to <8 x i32>
  %644 = bitcast <4 x i64> %642 to <8 x i32>
  %645 = shufflevector <8 x i32> %643, <8 x i32> %644, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %646 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 2
  %647 = bitcast <4 x i64>* %646 to <8 x i32>*
  store <8 x i32> %645, <8 x i32>* %647, align 32
  %648 = shufflevector <8 x i32> %643, <8 x i32> %644, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %649 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 6
  %650 = bitcast <4 x i64>* %649 to <8 x i32>*
  store <8 x i32> %648, <8 x i32>* %650, align 32
  %651 = shufflevector <4 x i64> %609, <4 x i64> %613, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %652 = shufflevector <4 x i64> %617, <4 x i64> %621, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %653 = bitcast <4 x i64> %651 to <8 x i32>
  %654 = bitcast <4 x i64> %652 to <8 x i32>
  %655 = shufflevector <8 x i32> %653, <8 x i32> %654, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %656 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 3
  %657 = bitcast <4 x i64>* %656 to <8 x i32>*
  store <8 x i32> %655, <8 x i32>* %657, align 32
  %658 = shufflevector <8 x i32> %653, <8 x i32> %654, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %659 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 7
  %660 = bitcast <4 x i64>* %659 to <8 x i32>*
  store <8 x i32> %658, <8 x i32>* %660, align 32
  %661 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 8
  %662 = shufflevector <8 x i32> %596, <8 x i32> %595, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %663 = bitcast <8 x i32> %662 to <4 x i64>
  %664 = shufflevector <8 x i32> %596, <8 x i32> %595, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %665 = bitcast <8 x i32> %664 to <4 x i64>
  %666 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 7
  %667 = bitcast <4 x i64>* %666 to <8 x i32>*
  %668 = load <8 x i32>, <8 x i32>* %667, align 32
  %669 = shufflevector <8 x i32> %594, <8 x i32> %668, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %670 = bitcast <8 x i32> %669 to <4 x i64>
  %671 = shufflevector <8 x i32> %594, <8 x i32> %668, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %672 = bitcast <8 x i32> %671 to <4 x i64>
  %673 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 9
  %674 = bitcast <4 x i64>* %673 to <8 x i32>*
  %675 = load <8 x i32>, <8 x i32>* %674, align 32
  %676 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 11
  %677 = bitcast <4 x i64>* %676 to <8 x i32>*
  %678 = load <8 x i32>, <8 x i32>* %677, align 32
  %679 = shufflevector <8 x i32> %675, <8 x i32> %678, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %680 = bitcast <8 x i32> %679 to <4 x i64>
  %681 = shufflevector <8 x i32> %675, <8 x i32> %678, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %682 = bitcast <8 x i32> %681 to <4 x i64>
  %683 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 13
  %684 = bitcast <4 x i64>* %683 to <8 x i32>*
  %685 = load <8 x i32>, <8 x i32>* %684, align 32
  %686 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %10, i64 0, i64 15
  %687 = bitcast <4 x i64>* %686 to <8 x i32>*
  %688 = load <8 x i32>, <8 x i32>* %687, align 32
  %689 = shufflevector <8 x i32> %685, <8 x i32> %688, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %690 = bitcast <8 x i32> %689 to <4 x i64>
  %691 = shufflevector <8 x i32> %685, <8 x i32> %688, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %692 = bitcast <8 x i32> %691 to <4 x i64>
  %693 = shufflevector <4 x i64> %663, <4 x i64> %670, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %694 = shufflevector <4 x i64> %680, <4 x i64> %690, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %695 = bitcast <4 x i64> %693 to <8 x i32>
  %696 = bitcast <4 x i64> %694 to <8 x i32>
  %697 = shufflevector <8 x i32> %695, <8 x i32> %696, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %698 = bitcast <4 x i64>* %661 to <8 x i32>*
  store <8 x i32> %697, <8 x i32>* %698, align 32
  %699 = shufflevector <8 x i32> %695, <8 x i32> %696, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %700 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 12
  %701 = bitcast <4 x i64>* %700 to <8 x i32>*
  store <8 x i32> %699, <8 x i32>* %701, align 32
  %702 = shufflevector <4 x i64> %663, <4 x i64> %670, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %703 = shufflevector <4 x i64> %680, <4 x i64> %690, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %704 = bitcast <4 x i64> %702 to <8 x i32>
  %705 = bitcast <4 x i64> %703 to <8 x i32>
  %706 = shufflevector <8 x i32> %704, <8 x i32> %705, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %707 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 9
  %708 = bitcast <4 x i64>* %707 to <8 x i32>*
  store <8 x i32> %706, <8 x i32>* %708, align 32
  %709 = shufflevector <8 x i32> %704, <8 x i32> %705, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %710 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 13
  %711 = bitcast <4 x i64>* %710 to <8 x i32>*
  store <8 x i32> %709, <8 x i32>* %711, align 32
  %712 = shufflevector <4 x i64> %665, <4 x i64> %672, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %713 = shufflevector <4 x i64> %682, <4 x i64> %692, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %714 = bitcast <4 x i64> %712 to <8 x i32>
  %715 = bitcast <4 x i64> %713 to <8 x i32>
  %716 = shufflevector <8 x i32> %714, <8 x i32> %715, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %717 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 10
  %718 = bitcast <4 x i64>* %717 to <8 x i32>*
  store <8 x i32> %716, <8 x i32>* %718, align 32
  %719 = shufflevector <8 x i32> %714, <8 x i32> %715, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %720 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 14
  %721 = bitcast <4 x i64>* %720 to <8 x i32>*
  store <8 x i32> %719, <8 x i32>* %721, align 32
  %722 = shufflevector <4 x i64> %665, <4 x i64> %672, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %723 = shufflevector <4 x i64> %682, <4 x i64> %692, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %724 = bitcast <4 x i64> %722 to <8 x i32>
  %725 = bitcast <4 x i64> %723 to <8 x i32>
  %726 = shufflevector <8 x i32> %724, <8 x i32> %725, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %727 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 11
  %728 = bitcast <4 x i64>* %727 to <8 x i32>*
  store <8 x i32> %726, <8 x i32>* %728, align 32
  %729 = shufflevector <8 x i32> %724, <8 x i32> %725, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %730 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %8, i64 0, i64 15
  %731 = bitcast <4 x i64>* %730 to <8 x i32>*
  store <8 x i32> %729, <8 x i32>* %731, align 32
  call void %17(<4 x i64>* %119, <4 x i64>* nonnull %396, i8 signext %18, i32 1, i32 1) #7
  %732 = load <8 x i32>, <8 x i32>* %605, align 32
  %733 = load <8 x i32>, <8 x i32>* %586, align 32
  %734 = shufflevector <8 x i32> %732, <8 x i32> %733, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %735 = bitcast <8 x i32> %734 to <4 x i64>
  %736 = shufflevector <8 x i32> %732, <8 x i32> %733, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %737 = bitcast <8 x i32> %736 to <4 x i64>
  %738 = load <8 x i32>, <8 x i32>* %593, align 32
  %739 = load <8 x i32>, <8 x i32>* %585, align 32
  %740 = shufflevector <8 x i32> %738, <8 x i32> %739, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %741 = bitcast <8 x i32> %740 to <4 x i64>
  %742 = shufflevector <8 x i32> %738, <8 x i32> %739, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %743 = bitcast <8 x i32> %742 to <4 x i64>
  %744 = load <8 x i32>, <8 x i32>* %592, align 32
  %745 = load <8 x i32>, <8 x i32>* %584, align 32
  %746 = shufflevector <8 x i32> %744, <8 x i32> %745, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %747 = bitcast <8 x i32> %746 to <4 x i64>
  %748 = shufflevector <8 x i32> %744, <8 x i32> %745, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %749 = bitcast <8 x i32> %748 to <4 x i64>
  %750 = load <8 x i32>, <8 x i32>* %591, align 32
  %751 = load <8 x i32>, <8 x i32>* %667, align 32
  %752 = shufflevector <8 x i32> %750, <8 x i32> %751, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %753 = bitcast <8 x i32> %752 to <4 x i64>
  %754 = shufflevector <8 x i32> %750, <8 x i32> %751, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %755 = bitcast <8 x i32> %754 to <4 x i64>
  %756 = shufflevector <4 x i64> %735, <4 x i64> %741, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %757 = shufflevector <4 x i64> %747, <4 x i64> %753, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %758 = bitcast <4 x i64> %756 to <8 x i32>
  %759 = bitcast <4 x i64> %757 to <8 x i32>
  %760 = shufflevector <8 x i32> %758, <8 x i32> %759, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %760, <8 x i32>* %627, align 32
  %761 = shufflevector <8 x i32> %758, <8 x i32> %759, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %761, <8 x i32>* %698, align 32
  %762 = shufflevector <4 x i64> %735, <4 x i64> %741, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %763 = shufflevector <4 x i64> %747, <4 x i64> %753, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %764 = bitcast <4 x i64> %762 to <8 x i32>
  %765 = bitcast <4 x i64> %763 to <8 x i32>
  %766 = shufflevector <8 x i32> %764, <8 x i32> %765, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %766, <8 x i32>* %647, align 32
  %767 = shufflevector <8 x i32> %764, <8 x i32> %765, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %767, <8 x i32>* %718, align 32
  %768 = shufflevector <4 x i64> %737, <4 x i64> %743, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %769 = shufflevector <4 x i64> %749, <4 x i64> %755, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %770 = bitcast <4 x i64> %768 to <8 x i32>
  %771 = bitcast <4 x i64> %769 to <8 x i32>
  %772 = shufflevector <8 x i32> %770, <8 x i32> %771, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %772, <8 x i32>* %630, align 32
  %773 = shufflevector <8 x i32> %770, <8 x i32> %771, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %773, <8 x i32>* %701, align 32
  %774 = shufflevector <4 x i64> %737, <4 x i64> %743, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %775 = shufflevector <4 x i64> %749, <4 x i64> %755, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %776 = bitcast <4 x i64> %774 to <8 x i32>
  %777 = bitcast <4 x i64> %775 to <8 x i32>
  %778 = shufflevector <8 x i32> %776, <8 x i32> %777, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %778, <8 x i32>* %650, align 32
  %779 = shufflevector <8 x i32> %776, <8 x i32> %777, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %779, <8 x i32>* %721, align 32
  %780 = load <8 x i32>, <8 x i32>* %590, align 32
  %781 = load <8 x i32>, <8 x i32>* %674, align 32
  %782 = shufflevector <8 x i32> %780, <8 x i32> %781, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %783 = bitcast <8 x i32> %782 to <4 x i64>
  %784 = shufflevector <8 x i32> %780, <8 x i32> %781, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %785 = bitcast <8 x i32> %784 to <4 x i64>
  %786 = load <8 x i32>, <8 x i32>* %589, align 32
  %787 = load <8 x i32>, <8 x i32>* %677, align 32
  %788 = shufflevector <8 x i32> %786, <8 x i32> %787, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %789 = bitcast <8 x i32> %788 to <4 x i64>
  %790 = shufflevector <8 x i32> %786, <8 x i32> %787, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %791 = bitcast <8 x i32> %790 to <4 x i64>
  %792 = load <8 x i32>, <8 x i32>* %588, align 32
  %793 = load <8 x i32>, <8 x i32>* %684, align 32
  %794 = shufflevector <8 x i32> %792, <8 x i32> %793, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %795 = bitcast <8 x i32> %794 to <4 x i64>
  %796 = shufflevector <8 x i32> %792, <8 x i32> %793, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %797 = bitcast <8 x i32> %796 to <4 x i64>
  %798 = load <8 x i32>, <8 x i32>* %587, align 32
  %799 = load <8 x i32>, <8 x i32>* %687, align 32
  %800 = shufflevector <8 x i32> %798, <8 x i32> %799, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %801 = bitcast <8 x i32> %800 to <4 x i64>
  %802 = shufflevector <8 x i32> %798, <8 x i32> %799, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %803 = bitcast <8 x i32> %802 to <4 x i64>
  %804 = shufflevector <4 x i64> %783, <4 x i64> %789, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %805 = shufflevector <4 x i64> %795, <4 x i64> %801, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %806 = bitcast <4 x i64> %804 to <8 x i32>
  %807 = bitcast <4 x i64> %805 to <8 x i32>
  %808 = shufflevector <8 x i32> %806, <8 x i32> %807, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %808, <8 x i32>* %637, align 32
  %809 = shufflevector <8 x i32> %806, <8 x i32> %807, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %809, <8 x i32>* %708, align 32
  %810 = shufflevector <4 x i64> %783, <4 x i64> %789, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %811 = shufflevector <4 x i64> %795, <4 x i64> %801, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %812 = bitcast <4 x i64> %810 to <8 x i32>
  %813 = bitcast <4 x i64> %811 to <8 x i32>
  %814 = shufflevector <8 x i32> %812, <8 x i32> %813, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %814, <8 x i32>* %657, align 32
  %815 = shufflevector <8 x i32> %812, <8 x i32> %813, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %815, <8 x i32>* %728, align 32
  %816 = shufflevector <4 x i64> %785, <4 x i64> %791, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %817 = shufflevector <4 x i64> %797, <4 x i64> %803, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %818 = bitcast <4 x i64> %816 to <8 x i32>
  %819 = bitcast <4 x i64> %817 to <8 x i32>
  %820 = shufflevector <8 x i32> %818, <8 x i32> %819, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %820, <8 x i32>* %640, align 32
  %821 = shufflevector <8 x i32> %818, <8 x i32> %819, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %821, <8 x i32>* %711, align 32
  %822 = shufflevector <4 x i64> %785, <4 x i64> %791, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %823 = shufflevector <4 x i64> %797, <4 x i64> %803, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %824 = bitcast <4 x i64> %822 to <8 x i32>
  %825 = bitcast <4 x i64> %823 to <8 x i32>
  %826 = shufflevector <8 x i32> %824, <8 x i32> %825, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %826, <8 x i32>* %660, align 32
  %827 = shufflevector <8 x i32> %824, <8 x i32> %825, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %827, <8 x i32>* %731, align 32
  %828 = getelementptr inbounds i8, i8* %12, i64 2
  %829 = load i8, i8* %828, align 1
  %830 = sext i8 %829 to i32
  %831 = sub nsw i32 0, %830
  %832 = icmp slt i8 %829, 0
  br i1 %832, label %895, label %833

833:                                              ; preds = %583
  %834 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %760, i32 %830) #7
  %835 = mul <8 x i32> %834, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %836 = add <8 x i32> %835, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %837 = ashr <8 x i32> %836, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %837, <8 x i32>* %627, align 32
  %838 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %808, i32 %830) #7
  %839 = mul <8 x i32> %838, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %840 = add <8 x i32> %839, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %841 = ashr <8 x i32> %840, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %841, <8 x i32>* %637, align 32
  %842 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %766, i32 %830) #7
  %843 = mul <8 x i32> %842, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %844 = add <8 x i32> %843, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %845 = ashr <8 x i32> %844, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %845, <8 x i32>* %647, align 32
  %846 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %814, i32 %830) #7
  %847 = mul <8 x i32> %846, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %848 = add <8 x i32> %847, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %849 = ashr <8 x i32> %848, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %849, <8 x i32>* %657, align 32
  %850 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %772, i32 %830) #7
  %851 = mul <8 x i32> %850, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %852 = add <8 x i32> %851, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %853 = ashr <8 x i32> %852, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %853, <8 x i32>* %630, align 32
  %854 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %820, i32 %830) #7
  %855 = mul <8 x i32> %854, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %856 = add <8 x i32> %855, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %857 = ashr <8 x i32> %856, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %857, <8 x i32>* %640, align 32
  %858 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %778, i32 %830) #7
  %859 = mul <8 x i32> %858, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %860 = add <8 x i32> %859, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %861 = ashr <8 x i32> %860, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %861, <8 x i32>* %650, align 32
  %862 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %826, i32 %830) #7
  %863 = mul <8 x i32> %862, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %864 = add <8 x i32> %863, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %865 = ashr <8 x i32> %864, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %865, <8 x i32>* %660, align 32
  %866 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %761, i32 %830) #7
  %867 = mul <8 x i32> %866, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %868 = add <8 x i32> %867, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %869 = ashr <8 x i32> %868, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %869, <8 x i32>* %698, align 32
  %870 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %809, i32 %830) #7
  %871 = mul <8 x i32> %870, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %872 = add <8 x i32> %871, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %873 = ashr <8 x i32> %872, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %873, <8 x i32>* %708, align 32
  %874 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %767, i32 %830) #7
  %875 = mul <8 x i32> %874, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %876 = add <8 x i32> %875, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %877 = ashr <8 x i32> %876, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %877, <8 x i32>* %718, align 32
  %878 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %815, i32 %830) #7
  %879 = mul <8 x i32> %878, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %880 = add <8 x i32> %879, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %881 = ashr <8 x i32> %880, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %881, <8 x i32>* %728, align 32
  %882 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %773, i32 %830) #7
  %883 = mul <8 x i32> %882, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %884 = add <8 x i32> %883, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %885 = ashr <8 x i32> %884, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %885, <8 x i32>* %701, align 32
  %886 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %821, i32 %830) #7
  %887 = mul <8 x i32> %886, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %888 = add <8 x i32> %887, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %889 = ashr <8 x i32> %888, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %889, <8 x i32>* %711, align 32
  %890 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %779, i32 %830) #7
  %891 = mul <8 x i32> %890, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %892 = add <8 x i32> %891, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %893 = ashr <8 x i32> %892, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %893, <8 x i32>* %721, align 32
  %894 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %827, i32 %830) #7
  br label %978

895:                                              ; preds = %583
  %896 = xor i32 %830, -1
  %897 = shl i32 1, %896
  %898 = insertelement <8 x i32> undef, i32 %897, i32 0
  %899 = shufflevector <8 x i32> %898, <8 x i32> undef, <8 x i32> zeroinitializer
  %900 = bitcast [16 x <4 x i64>]* %8 to <8 x i32>*
  %901 = add <8 x i32> %760, %899
  %902 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %901, i32 %831) #7
  %903 = mul <8 x i32> %902, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %904 = add <8 x i32> %903, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %905 = ashr <8 x i32> %904, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %905, <8 x i32>* %900, align 32
  %906 = add <8 x i32> %808, %899
  %907 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %906, i32 %831) #7
  %908 = mul <8 x i32> %907, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %909 = add <8 x i32> %908, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %910 = ashr <8 x i32> %909, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %910, <8 x i32>* %637, align 32
  %911 = add <8 x i32> %766, %899
  %912 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %911, i32 %831) #7
  %913 = mul <8 x i32> %912, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %914 = add <8 x i32> %913, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %915 = ashr <8 x i32> %914, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %915, <8 x i32>* %647, align 32
  %916 = add <8 x i32> %814, %899
  %917 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %916, i32 %831) #7
  %918 = mul <8 x i32> %917, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %919 = add <8 x i32> %918, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %920 = ashr <8 x i32> %919, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %920, <8 x i32>* %657, align 32
  %921 = add <8 x i32> %772, %899
  %922 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %921, i32 %831) #7
  %923 = mul <8 x i32> %922, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %924 = add <8 x i32> %923, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %925 = ashr <8 x i32> %924, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %925, <8 x i32>* %630, align 32
  %926 = add <8 x i32> %820, %899
  %927 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %926, i32 %831) #7
  %928 = mul <8 x i32> %927, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %929 = add <8 x i32> %928, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %930 = ashr <8 x i32> %929, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %930, <8 x i32>* %640, align 32
  %931 = add <8 x i32> %778, %899
  %932 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %931, i32 %831) #7
  %933 = mul <8 x i32> %932, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %934 = add <8 x i32> %933, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %935 = ashr <8 x i32> %934, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %935, <8 x i32>* %650, align 32
  %936 = add <8 x i32> %826, %899
  %937 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %936, i32 %831) #7
  %938 = mul <8 x i32> %937, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %939 = add <8 x i32> %938, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %940 = ashr <8 x i32> %939, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %940, <8 x i32>* %660, align 32
  %941 = add <8 x i32> %761, %899
  %942 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %941, i32 %831) #7
  %943 = mul <8 x i32> %942, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %944 = add <8 x i32> %943, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %945 = ashr <8 x i32> %944, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %945, <8 x i32>* %698, align 32
  %946 = add <8 x i32> %809, %899
  %947 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %946, i32 %831) #7
  %948 = mul <8 x i32> %947, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %949 = add <8 x i32> %948, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %950 = ashr <8 x i32> %949, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %950, <8 x i32>* %708, align 32
  %951 = add <8 x i32> %767, %899
  %952 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %951, i32 %831) #7
  %953 = mul <8 x i32> %952, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %954 = add <8 x i32> %953, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %955 = ashr <8 x i32> %954, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %955, <8 x i32>* %718, align 32
  %956 = add <8 x i32> %815, %899
  %957 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %956, i32 %831) #7
  %958 = mul <8 x i32> %957, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %959 = add <8 x i32> %958, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %960 = ashr <8 x i32> %959, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %960, <8 x i32>* %728, align 32
  %961 = add <8 x i32> %773, %899
  %962 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %961, i32 %831) #7
  %963 = mul <8 x i32> %962, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %964 = add <8 x i32> %963, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %965 = ashr <8 x i32> %964, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %965, <8 x i32>* %701, align 32
  %966 = add <8 x i32> %821, %899
  %967 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %966, i32 %831) #7
  %968 = mul <8 x i32> %967, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %969 = add <8 x i32> %968, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %970 = ashr <8 x i32> %969, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %970, <8 x i32>* %711, align 32
  %971 = add <8 x i32> %779, %899
  %972 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %971, i32 %831) #7
  %973 = mul <8 x i32> %972, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %974 = add <8 x i32> %973, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %975 = ashr <8 x i32> %974, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %975, <8 x i32>* %721, align 32
  %976 = add <8 x i32> %827, %899
  %977 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %976, i32 %831) #7
  br label %978

978:                                              ; preds = %895, %833
  %979 = phi <8 x i32> [ %894, %833 ], [ %977, %895 ]
  %980 = mul <8 x i32> %979, <i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793, i32 5793>
  %981 = add <8 x i32> %980, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %982 = ashr <8 x i32> %981, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  store <8 x i32> %982, <8 x i32>* %731, align 32
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 32 %6, i8* nonnull align 32 %9, i64 512, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %11) #7
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %9) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_fwd_txfm2d_16x16_avx2(i16* nocapture readonly, i32* nocapture, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = bitcast i32* %1 to i8*
  %7 = alloca [64 x <4 x i64>], align 32
  %8 = alloca [32 x <4 x i64>], align 32
  %9 = bitcast [32 x <4 x i64>]* %8 to i8*
  %10 = alloca [32 x <4 x i64>], align 32
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %9) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %9, i8 -86, i64 1024, i1 false)
  %11 = bitcast [32 x <4 x i64>]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %11) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %11, i8 -86, i64 1024, i1 false)
  %12 = load i8*, i8** getelementptr inbounds ([19 x i8*], [19 x i8*]* @av1_fwd_txfm_shift_ls, i64 0, i64 2), align 16
  switch i8 %3, label %10160 [
    i8 0, label %13
    i8 1, label %764
    i8 2, label %1515
    i8 3, label %2266
    i8 4, label %3017
    i8 5, label %3768
    i8 6, label %4521
    i8 7, label %5274
    i8 8, label %6027
    i8 9, label %6778
    i8 10, label %7058
    i8 11, label %7319
    i8 12, label %8091
    i8 13, label %8352
    i8 14, label %9124
    i8 15, label %9385
  ]

13:                                               ; preds = %5
  %14 = bitcast [64 x <4 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %14) #7
  %15 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 16
  %16 = bitcast <4 x i64>* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %16, i8 -86, i64 1536, i1 false) #7
  %17 = sext i32 %2 to i64
  %18 = bitcast i16* %0 to <4 x i64>*
  %19 = load <4 x i64>, <4 x i64>* %18, align 1
  %20 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 0
  store <4 x i64> %19, <4 x i64>* %20, align 32
  %21 = getelementptr inbounds i16, i16* %0, i64 %17
  %22 = bitcast i16* %21 to <4 x i64>*
  %23 = load <4 x i64>, <4 x i64>* %22, align 1
  %24 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 1
  store <4 x i64> %23, <4 x i64>* %24, align 32
  %25 = shl nsw i64 %17, 1
  %26 = getelementptr inbounds i16, i16* %0, i64 %25
  %27 = bitcast i16* %26 to <4 x i64>*
  %28 = load <4 x i64>, <4 x i64>* %27, align 1
  %29 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 2
  store <4 x i64> %28, <4 x i64>* %29, align 32
  %30 = mul nsw i64 %17, 3
  %31 = getelementptr inbounds i16, i16* %0, i64 %30
  %32 = bitcast i16* %31 to <4 x i64>*
  %33 = load <4 x i64>, <4 x i64>* %32, align 1
  %34 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 3
  store <4 x i64> %33, <4 x i64>* %34, align 32
  %35 = shl nsw i64 %17, 2
  %36 = getelementptr inbounds i16, i16* %0, i64 %35
  %37 = bitcast i16* %36 to <4 x i64>*
  %38 = load <4 x i64>, <4 x i64>* %37, align 1
  %39 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 4
  store <4 x i64> %38, <4 x i64>* %39, align 32
  %40 = mul nsw i64 %17, 5
  %41 = getelementptr inbounds i16, i16* %0, i64 %40
  %42 = bitcast i16* %41 to <4 x i64>*
  %43 = load <4 x i64>, <4 x i64>* %42, align 1
  %44 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 5
  store <4 x i64> %43, <4 x i64>* %44, align 32
  %45 = mul nsw i64 %17, 6
  %46 = getelementptr inbounds i16, i16* %0, i64 %45
  %47 = bitcast i16* %46 to <4 x i64>*
  %48 = load <4 x i64>, <4 x i64>* %47, align 1
  %49 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 6
  store <4 x i64> %48, <4 x i64>* %49, align 32
  %50 = mul nsw i64 %17, 7
  %51 = getelementptr inbounds i16, i16* %0, i64 %50
  %52 = bitcast i16* %51 to <4 x i64>*
  %53 = load <4 x i64>, <4 x i64>* %52, align 1
  %54 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 7
  store <4 x i64> %53, <4 x i64>* %54, align 32
  %55 = shl nsw i64 %17, 3
  %56 = getelementptr inbounds i16, i16* %0, i64 %55
  %57 = bitcast i16* %56 to <4 x i64>*
  %58 = load <4 x i64>, <4 x i64>* %57, align 1
  %59 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 8
  store <4 x i64> %58, <4 x i64>* %59, align 32
  %60 = mul nsw i64 %17, 9
  %61 = getelementptr inbounds i16, i16* %0, i64 %60
  %62 = bitcast i16* %61 to <4 x i64>*
  %63 = load <4 x i64>, <4 x i64>* %62, align 1
  %64 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 9
  store <4 x i64> %63, <4 x i64>* %64, align 32
  %65 = mul nsw i64 %17, 10
  %66 = getelementptr inbounds i16, i16* %0, i64 %65
  %67 = bitcast i16* %66 to <4 x i64>*
  %68 = load <4 x i64>, <4 x i64>* %67, align 1
  %69 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 10
  store <4 x i64> %68, <4 x i64>* %69, align 32
  %70 = mul nsw i64 %17, 11
  %71 = getelementptr inbounds i16, i16* %0, i64 %70
  %72 = bitcast i16* %71 to <4 x i64>*
  %73 = load <4 x i64>, <4 x i64>* %72, align 1
  %74 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 11
  store <4 x i64> %73, <4 x i64>* %74, align 32
  %75 = mul nsw i64 %17, 12
  %76 = getelementptr inbounds i16, i16* %0, i64 %75
  %77 = bitcast i16* %76 to <4 x i64>*
  %78 = load <4 x i64>, <4 x i64>* %77, align 1
  %79 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 12
  store <4 x i64> %78, <4 x i64>* %79, align 32
  %80 = mul nsw i64 %17, 13
  %81 = getelementptr inbounds i16, i16* %0, i64 %80
  %82 = bitcast i16* %81 to <4 x i64>*
  %83 = load <4 x i64>, <4 x i64>* %82, align 1
  %84 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 13
  store <4 x i64> %83, <4 x i64>* %84, align 32
  %85 = mul nsw i64 %17, 14
  %86 = getelementptr inbounds i16, i16* %0, i64 %85
  %87 = bitcast i16* %86 to <4 x i64>*
  %88 = load <4 x i64>, <4 x i64>* %87, align 1
  %89 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 14
  store <4 x i64> %88, <4 x i64>* %89, align 32
  %90 = mul nsw i64 %17, 15
  %91 = getelementptr inbounds i16, i16* %0, i64 %90
  %92 = bitcast i16* %91 to <4 x i64>*
  %93 = load <4 x i64>, <4 x i64>* %92, align 1
  %94 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 15
  store <4 x i64> %93, <4 x i64>* %94, align 32
  %95 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 0
  %96 = shufflevector <4 x i64> %19, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %97 = bitcast <2 x i64> %96 to <8 x i16>
  %98 = sext <8 x i16> %97 to <8 x i32>
  %99 = bitcast [32 x <4 x i64>]* %8 to <8 x i32>*
  store <8 x i32> %98, <8 x i32>* %99, align 32
  %100 = bitcast <4 x i64> %19 to <8 x i32>
  %101 = shufflevector <8 x i32> %100, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %102 = bitcast <4 x i32> %101 to <8 x i16>
  %103 = sext <8 x i16> %102 to <8 x i32>
  %104 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 1
  %105 = bitcast <4 x i64>* %104 to <8 x i32>*
  store <8 x i32> %103, <8 x i32>* %105, align 32
  br label %106

106:                                              ; preds = %13, %106
  %107 = phi i64 [ 1, %13 ], [ %123, %106 ]
  %108 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 %107
  %109 = load <4 x i64>, <4 x i64>* %108, align 32
  %110 = shufflevector <4 x i64> %109, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %111 = bitcast <2 x i64> %110 to <8 x i16>
  %112 = sext <8 x i16> %111 to <8 x i32>
  %113 = shl nuw nsw i64 %107, 1
  %114 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %113
  %115 = bitcast <4 x i64>* %114 to <8 x i32>*
  store <8 x i32> %112, <8 x i32>* %115, align 32
  %116 = bitcast <4 x i64> %109 to <8 x i32>
  %117 = shufflevector <8 x i32> %116, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %118 = bitcast <4 x i32> %117 to <8 x i16>
  %119 = sext <8 x i16> %118 to <8 x i32>
  %120 = or i64 %113, 1
  %121 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %120
  %122 = bitcast <4 x i64>* %121 to <8 x i32>*
  store <8 x i32> %119, <8 x i32>* %122, align 32
  %123 = add nuw nsw i64 %107, 1
  %124 = icmp eq i64 %123, 16
  br i1 %124, label %125, label %106

125:                                              ; preds = %106
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %14) #7
  %126 = load i8, i8* %12, align 1
  %127 = sext i8 %126 to i32
  %128 = icmp slt i8 %126, 0
  br i1 %128, label %129, label %162

129:                                              ; preds = %125
  %130 = sub nsw i32 0, %127
  %131 = xor i32 %127, -1
  %132 = shl i32 1, %131
  %133 = insertelement <8 x i32> undef, i32 %132, i32 0
  %134 = shufflevector <8 x i32> %133, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %135

135:                                              ; preds = %135, %129
  %136 = phi i64 [ 0, %129 ], [ %160, %135 ]
  %137 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %136
  %138 = bitcast <4 x i64>* %137 to <8 x i32>*
  %139 = load <8 x i32>, <8 x i32>* %138, align 32
  %140 = add <8 x i32> %139, %134
  %141 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %140, i32 %130) #7
  store <8 x i32> %141, <8 x i32>* %138, align 32
  %142 = or i64 %136, 1
  %143 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %142
  %144 = bitcast <4 x i64>* %143 to <8 x i32>*
  %145 = load <8 x i32>, <8 x i32>* %144, align 32
  %146 = add <8 x i32> %145, %134
  %147 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %146, i32 %130) #7
  store <8 x i32> %147, <8 x i32>* %144, align 32
  %148 = or i64 %136, 2
  %149 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %148
  %150 = bitcast <4 x i64>* %149 to <8 x i32>*
  %151 = load <8 x i32>, <8 x i32>* %150, align 32
  %152 = add <8 x i32> %151, %134
  %153 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %152, i32 %130) #7
  store <8 x i32> %153, <8 x i32>* %150, align 32
  %154 = or i64 %136, 3
  %155 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %154
  %156 = bitcast <4 x i64>* %155 to <8 x i32>*
  %157 = load <8 x i32>, <8 x i32>* %156, align 32
  %158 = add <8 x i32> %157, %134
  %159 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %158, i32 %130) #7
  store <8 x i32> %159, <8 x i32>* %156, align 32
  %160 = add nuw nsw i64 %136, 4
  %161 = icmp eq i64 %160, 32
  br i1 %161, label %187, label %135

162:                                              ; preds = %125
  %163 = icmp eq i8 %126, 0
  br i1 %163, label %187, label %164

164:                                              ; preds = %162, %164
  %165 = phi i64 [ %185, %164 ], [ 0, %162 ]
  %166 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %165
  %167 = bitcast <4 x i64>* %166 to <8 x i32>*
  %168 = load <8 x i32>, <8 x i32>* %167, align 32
  %169 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %168, i32 %127) #7
  store <8 x i32> %169, <8 x i32>* %167, align 32
  %170 = or i64 %165, 1
  %171 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %170
  %172 = bitcast <4 x i64>* %171 to <8 x i32>*
  %173 = load <8 x i32>, <8 x i32>* %172, align 32
  %174 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %173, i32 %127) #7
  store <8 x i32> %174, <8 x i32>* %172, align 32
  %175 = or i64 %165, 2
  %176 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %175
  %177 = bitcast <4 x i64>* %176 to <8 x i32>*
  %178 = load <8 x i32>, <8 x i32>* %177, align 32
  %179 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %178, i32 %127) #7
  store <8 x i32> %179, <8 x i32>* %177, align 32
  %180 = or i64 %165, 3
  %181 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %180
  %182 = bitcast <4 x i64>* %181 to <8 x i32>*
  %183 = load <8 x i32>, <8 x i32>* %182, align 32
  %184 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %183, i32 %127) #7
  store <8 x i32> %184, <8 x i32>* %182, align 32
  %185 = add nuw nsw i64 %165, 4
  %186 = icmp eq i64 %185, 32
  br i1 %186, label %187, label %164

187:                                              ; preds = %164, %135, %162
  %188 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 0
  %189 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 2, i64 2), align 2
  call void @fdct16_avx2(<4 x i64>* nonnull %95, <4 x i64>* nonnull %188, i8 signext %189, i32 2, i32 2)
  %190 = getelementptr inbounds i8, i8* %12, i64 1
  %191 = load i8, i8* %190, align 1
  %192 = sext i8 %191 to i32
  %193 = icmp slt i8 %191, 0
  br i1 %193, label %194, label %227

194:                                              ; preds = %187
  %195 = sub nsw i32 0, %192
  %196 = xor i32 %192, -1
  %197 = shl i32 1, %196
  %198 = insertelement <8 x i32> undef, i32 %197, i32 0
  %199 = shufflevector <8 x i32> %198, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %200

200:                                              ; preds = %200, %194
  %201 = phi i64 [ 0, %194 ], [ %225, %200 ]
  %202 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %201
  %203 = bitcast <4 x i64>* %202 to <8 x i32>*
  %204 = load <8 x i32>, <8 x i32>* %203, align 32
  %205 = add <8 x i32> %204, %199
  %206 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %205, i32 %195) #7
  store <8 x i32> %206, <8 x i32>* %203, align 32
  %207 = or i64 %201, 1
  %208 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %207
  %209 = bitcast <4 x i64>* %208 to <8 x i32>*
  %210 = load <8 x i32>, <8 x i32>* %209, align 32
  %211 = add <8 x i32> %210, %199
  %212 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %211, i32 %195) #7
  store <8 x i32> %212, <8 x i32>* %209, align 32
  %213 = or i64 %201, 2
  %214 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %213
  %215 = bitcast <4 x i64>* %214 to <8 x i32>*
  %216 = load <8 x i32>, <8 x i32>* %215, align 32
  %217 = add <8 x i32> %216, %199
  %218 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %217, i32 %195) #7
  store <8 x i32> %218, <8 x i32>* %215, align 32
  %219 = or i64 %201, 3
  %220 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %219
  %221 = bitcast <4 x i64>* %220 to <8 x i32>*
  %222 = load <8 x i32>, <8 x i32>* %221, align 32
  %223 = add <8 x i32> %222, %199
  %224 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %223, i32 %195) #7
  store <8 x i32> %224, <8 x i32>* %221, align 32
  %225 = add nuw nsw i64 %201, 4
  %226 = icmp eq i64 %225, 32
  br i1 %226, label %252, label %200

227:                                              ; preds = %187
  %228 = icmp eq i8 %191, 0
  br i1 %228, label %252, label %229

229:                                              ; preds = %227, %229
  %230 = phi i64 [ %250, %229 ], [ 0, %227 ]
  %231 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %230
  %232 = bitcast <4 x i64>* %231 to <8 x i32>*
  %233 = load <8 x i32>, <8 x i32>* %232, align 32
  %234 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %233, i32 %192) #7
  store <8 x i32> %234, <8 x i32>* %232, align 32
  %235 = or i64 %230, 1
  %236 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %235
  %237 = bitcast <4 x i64>* %236 to <8 x i32>*
  %238 = load <8 x i32>, <8 x i32>* %237, align 32
  %239 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %238, i32 %192) #7
  store <8 x i32> %239, <8 x i32>* %237, align 32
  %240 = or i64 %230, 2
  %241 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %240
  %242 = bitcast <4 x i64>* %241 to <8 x i32>*
  %243 = load <8 x i32>, <8 x i32>* %242, align 32
  %244 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %243, i32 %192) #7
  store <8 x i32> %244, <8 x i32>* %242, align 32
  %245 = or i64 %230, 3
  %246 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %245
  %247 = bitcast <4 x i64>* %246 to <8 x i32>*
  %248 = load <8 x i32>, <8 x i32>* %247, align 32
  %249 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %248, i32 %192) #7
  store <8 x i32> %249, <8 x i32>* %247, align 32
  %250 = add nuw nsw i64 %230, 4
  %251 = icmp eq i64 %250, 32
  br i1 %251, label %252, label %229

252:                                              ; preds = %229, %200, %227
  %253 = bitcast [32 x <4 x i64>]* %10 to <8 x i32>*
  %254 = load <8 x i32>, <8 x i32>* %253, align 32
  %255 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 2
  %256 = bitcast <4 x i64>* %255 to <8 x i32>*
  %257 = load <8 x i32>, <8 x i32>* %256, align 32
  %258 = shufflevector <8 x i32> %254, <8 x i32> %257, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %259 = bitcast <8 x i32> %258 to <4 x i64>
  %260 = shufflevector <8 x i32> %254, <8 x i32> %257, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %261 = bitcast <8 x i32> %260 to <4 x i64>
  %262 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 4
  %263 = bitcast <4 x i64>* %262 to <8 x i32>*
  %264 = load <8 x i32>, <8 x i32>* %263, align 32
  %265 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 6
  %266 = bitcast <4 x i64>* %265 to <8 x i32>*
  %267 = load <8 x i32>, <8 x i32>* %266, align 32
  %268 = shufflevector <8 x i32> %264, <8 x i32> %267, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %269 = bitcast <8 x i32> %268 to <4 x i64>
  %270 = shufflevector <8 x i32> %264, <8 x i32> %267, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %271 = bitcast <8 x i32> %270 to <4 x i64>
  %272 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 8
  %273 = bitcast <4 x i64>* %272 to <8 x i32>*
  %274 = load <8 x i32>, <8 x i32>* %273, align 32
  %275 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 10
  %276 = bitcast <4 x i64>* %275 to <8 x i32>*
  %277 = load <8 x i32>, <8 x i32>* %276, align 32
  %278 = shufflevector <8 x i32> %274, <8 x i32> %277, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %279 = bitcast <8 x i32> %278 to <4 x i64>
  %280 = shufflevector <8 x i32> %274, <8 x i32> %277, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %281 = bitcast <8 x i32> %280 to <4 x i64>
  %282 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 12
  %283 = bitcast <4 x i64>* %282 to <8 x i32>*
  %284 = load <8 x i32>, <8 x i32>* %283, align 32
  %285 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 14
  %286 = bitcast <4 x i64>* %285 to <8 x i32>*
  %287 = load <8 x i32>, <8 x i32>* %286, align 32
  %288 = shufflevector <8 x i32> %284, <8 x i32> %287, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %289 = bitcast <8 x i32> %288 to <4 x i64>
  %290 = shufflevector <8 x i32> %284, <8 x i32> %287, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %291 = bitcast <8 x i32> %290 to <4 x i64>
  %292 = shufflevector <4 x i64> %259, <4 x i64> %269, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %293 = shufflevector <4 x i64> %279, <4 x i64> %289, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %294 = bitcast <4 x i64> %292 to <8 x i32>
  %295 = bitcast <4 x i64> %293 to <8 x i32>
  %296 = shufflevector <8 x i32> %294, <8 x i32> %295, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %297 = bitcast [32 x <4 x i64>]* %8 to <8 x i32>*
  store <8 x i32> %296, <8 x i32>* %297, align 32
  %298 = shufflevector <8 x i32> %294, <8 x i32> %295, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %299 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 8
  %300 = bitcast <4 x i64>* %299 to <8 x i32>*
  store <8 x i32> %298, <8 x i32>* %300, align 32
  %301 = shufflevector <4 x i64> %259, <4 x i64> %269, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %302 = shufflevector <4 x i64> %279, <4 x i64> %289, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %303 = bitcast <4 x i64> %301 to <8 x i32>
  %304 = bitcast <4 x i64> %302 to <8 x i32>
  %305 = shufflevector <8 x i32> %303, <8 x i32> %304, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %306 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 2
  %307 = bitcast <4 x i64>* %306 to <8 x i32>*
  store <8 x i32> %305, <8 x i32>* %307, align 32
  %308 = shufflevector <8 x i32> %303, <8 x i32> %304, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %309 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 10
  %310 = bitcast <4 x i64>* %309 to <8 x i32>*
  store <8 x i32> %308, <8 x i32>* %310, align 32
  %311 = shufflevector <4 x i64> %261, <4 x i64> %271, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %312 = shufflevector <4 x i64> %281, <4 x i64> %291, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %313 = bitcast <4 x i64> %311 to <8 x i32>
  %314 = bitcast <4 x i64> %312 to <8 x i32>
  %315 = shufflevector <8 x i32> %313, <8 x i32> %314, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %316 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 4
  %317 = bitcast <4 x i64>* %316 to <8 x i32>*
  store <8 x i32> %315, <8 x i32>* %317, align 32
  %318 = shufflevector <8 x i32> %313, <8 x i32> %314, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %319 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 12
  %320 = bitcast <4 x i64>* %319 to <8 x i32>*
  store <8 x i32> %318, <8 x i32>* %320, align 32
  %321 = shufflevector <4 x i64> %261, <4 x i64> %271, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %322 = shufflevector <4 x i64> %281, <4 x i64> %291, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %323 = bitcast <4 x i64> %321 to <8 x i32>
  %324 = bitcast <4 x i64> %322 to <8 x i32>
  %325 = shufflevector <8 x i32> %323, <8 x i32> %324, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %326 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 6
  %327 = bitcast <4 x i64>* %326 to <8 x i32>*
  store <8 x i32> %325, <8 x i32>* %327, align 32
  %328 = shufflevector <8 x i32> %323, <8 x i32> %324, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %329 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 14
  %330 = bitcast <4 x i64>* %329 to <8 x i32>*
  store <8 x i32> %328, <8 x i32>* %330, align 32
  %331 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 1
  %332 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 16
  %333 = bitcast <4 x i64>* %331 to <8 x i32>*
  %334 = load <8 x i32>, <8 x i32>* %333, align 32
  %335 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 3
  %336 = bitcast <4 x i64>* %335 to <8 x i32>*
  %337 = load <8 x i32>, <8 x i32>* %336, align 32
  %338 = shufflevector <8 x i32> %334, <8 x i32> %337, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %339 = bitcast <8 x i32> %338 to <4 x i64>
  %340 = shufflevector <8 x i32> %334, <8 x i32> %337, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %341 = bitcast <8 x i32> %340 to <4 x i64>
  %342 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 5
  %343 = bitcast <4 x i64>* %342 to <8 x i32>*
  %344 = load <8 x i32>, <8 x i32>* %343, align 32
  %345 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 7
  %346 = bitcast <4 x i64>* %345 to <8 x i32>*
  %347 = load <8 x i32>, <8 x i32>* %346, align 32
  %348 = shufflevector <8 x i32> %344, <8 x i32> %347, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %349 = bitcast <8 x i32> %348 to <4 x i64>
  %350 = shufflevector <8 x i32> %344, <8 x i32> %347, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %351 = bitcast <8 x i32> %350 to <4 x i64>
  %352 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 9
  %353 = bitcast <4 x i64>* %352 to <8 x i32>*
  %354 = load <8 x i32>, <8 x i32>* %353, align 32
  %355 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 11
  %356 = bitcast <4 x i64>* %355 to <8 x i32>*
  %357 = load <8 x i32>, <8 x i32>* %356, align 32
  %358 = shufflevector <8 x i32> %354, <8 x i32> %357, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %359 = bitcast <8 x i32> %358 to <4 x i64>
  %360 = shufflevector <8 x i32> %354, <8 x i32> %357, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %361 = bitcast <8 x i32> %360 to <4 x i64>
  %362 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 13
  %363 = bitcast <4 x i64>* %362 to <8 x i32>*
  %364 = load <8 x i32>, <8 x i32>* %363, align 32
  %365 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 15
  %366 = bitcast <4 x i64>* %365 to <8 x i32>*
  %367 = load <8 x i32>, <8 x i32>* %366, align 32
  %368 = shufflevector <8 x i32> %364, <8 x i32> %367, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %369 = bitcast <8 x i32> %368 to <4 x i64>
  %370 = shufflevector <8 x i32> %364, <8 x i32> %367, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %371 = bitcast <8 x i32> %370 to <4 x i64>
  %372 = shufflevector <4 x i64> %339, <4 x i64> %349, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %373 = shufflevector <4 x i64> %359, <4 x i64> %369, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %374 = bitcast <4 x i64> %372 to <8 x i32>
  %375 = bitcast <4 x i64> %373 to <8 x i32>
  %376 = shufflevector <8 x i32> %374, <8 x i32> %375, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %377 = bitcast <4 x i64>* %332 to <8 x i32>*
  store <8 x i32> %376, <8 x i32>* %377, align 32
  %378 = shufflevector <8 x i32> %374, <8 x i32> %375, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %379 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 24
  %380 = bitcast <4 x i64>* %379 to <8 x i32>*
  store <8 x i32> %378, <8 x i32>* %380, align 32
  %381 = shufflevector <4 x i64> %339, <4 x i64> %349, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %382 = shufflevector <4 x i64> %359, <4 x i64> %369, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %383 = bitcast <4 x i64> %381 to <8 x i32>
  %384 = bitcast <4 x i64> %382 to <8 x i32>
  %385 = shufflevector <8 x i32> %383, <8 x i32> %384, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %386 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 18
  %387 = bitcast <4 x i64>* %386 to <8 x i32>*
  store <8 x i32> %385, <8 x i32>* %387, align 32
  %388 = shufflevector <8 x i32> %383, <8 x i32> %384, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %389 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 26
  %390 = bitcast <4 x i64>* %389 to <8 x i32>*
  store <8 x i32> %388, <8 x i32>* %390, align 32
  %391 = shufflevector <4 x i64> %341, <4 x i64> %351, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %392 = shufflevector <4 x i64> %361, <4 x i64> %371, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %393 = bitcast <4 x i64> %391 to <8 x i32>
  %394 = bitcast <4 x i64> %392 to <8 x i32>
  %395 = shufflevector <8 x i32> %393, <8 x i32> %394, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %396 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 20
  %397 = bitcast <4 x i64>* %396 to <8 x i32>*
  store <8 x i32> %395, <8 x i32>* %397, align 32
  %398 = shufflevector <8 x i32> %393, <8 x i32> %394, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %399 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 28
  %400 = bitcast <4 x i64>* %399 to <8 x i32>*
  store <8 x i32> %398, <8 x i32>* %400, align 32
  %401 = shufflevector <4 x i64> %341, <4 x i64> %351, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %402 = shufflevector <4 x i64> %361, <4 x i64> %371, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %403 = bitcast <4 x i64> %401 to <8 x i32>
  %404 = bitcast <4 x i64> %402 to <8 x i32>
  %405 = shufflevector <8 x i32> %403, <8 x i32> %404, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %406 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 22
  %407 = bitcast <4 x i64>* %406 to <8 x i32>*
  store <8 x i32> %405, <8 x i32>* %407, align 32
  %408 = shufflevector <8 x i32> %403, <8 x i32> %404, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %409 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 30
  %410 = bitcast <4 x i64>* %409 to <8 x i32>*
  store <8 x i32> %408, <8 x i32>* %410, align 32
  %411 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 16
  %412 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 1
  %413 = bitcast <4 x i64>* %411 to <8 x i32>*
  %414 = load <8 x i32>, <8 x i32>* %413, align 32
  %415 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 18
  %416 = bitcast <4 x i64>* %415 to <8 x i32>*
  %417 = load <8 x i32>, <8 x i32>* %416, align 32
  %418 = shufflevector <8 x i32> %414, <8 x i32> %417, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %419 = bitcast <8 x i32> %418 to <4 x i64>
  %420 = shufflevector <8 x i32> %414, <8 x i32> %417, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %421 = bitcast <8 x i32> %420 to <4 x i64>
  %422 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 20
  %423 = bitcast <4 x i64>* %422 to <8 x i32>*
  %424 = load <8 x i32>, <8 x i32>* %423, align 32
  %425 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 22
  %426 = bitcast <4 x i64>* %425 to <8 x i32>*
  %427 = load <8 x i32>, <8 x i32>* %426, align 32
  %428 = shufflevector <8 x i32> %424, <8 x i32> %427, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %429 = bitcast <8 x i32> %428 to <4 x i64>
  %430 = shufflevector <8 x i32> %424, <8 x i32> %427, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %431 = bitcast <8 x i32> %430 to <4 x i64>
  %432 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 24
  %433 = bitcast <4 x i64>* %432 to <8 x i32>*
  %434 = load <8 x i32>, <8 x i32>* %433, align 32
  %435 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 26
  %436 = bitcast <4 x i64>* %435 to <8 x i32>*
  %437 = load <8 x i32>, <8 x i32>* %436, align 32
  %438 = shufflevector <8 x i32> %434, <8 x i32> %437, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %439 = bitcast <8 x i32> %438 to <4 x i64>
  %440 = shufflevector <8 x i32> %434, <8 x i32> %437, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %441 = bitcast <8 x i32> %440 to <4 x i64>
  %442 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 28
  %443 = bitcast <4 x i64>* %442 to <8 x i32>*
  %444 = load <8 x i32>, <8 x i32>* %443, align 32
  %445 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 30
  %446 = bitcast <4 x i64>* %445 to <8 x i32>*
  %447 = load <8 x i32>, <8 x i32>* %446, align 32
  %448 = shufflevector <8 x i32> %444, <8 x i32> %447, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %449 = bitcast <8 x i32> %448 to <4 x i64>
  %450 = shufflevector <8 x i32> %444, <8 x i32> %447, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %451 = bitcast <8 x i32> %450 to <4 x i64>
  %452 = shufflevector <4 x i64> %419, <4 x i64> %429, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %453 = shufflevector <4 x i64> %439, <4 x i64> %449, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %454 = bitcast <4 x i64> %452 to <8 x i32>
  %455 = bitcast <4 x i64> %453 to <8 x i32>
  %456 = shufflevector <8 x i32> %454, <8 x i32> %455, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %457 = bitcast <4 x i64>* %412 to <8 x i32>*
  store <8 x i32> %456, <8 x i32>* %457, align 32
  %458 = shufflevector <8 x i32> %454, <8 x i32> %455, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %459 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 9
  %460 = bitcast <4 x i64>* %459 to <8 x i32>*
  store <8 x i32> %458, <8 x i32>* %460, align 32
  %461 = shufflevector <4 x i64> %419, <4 x i64> %429, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %462 = shufflevector <4 x i64> %439, <4 x i64> %449, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %463 = bitcast <4 x i64> %461 to <8 x i32>
  %464 = bitcast <4 x i64> %462 to <8 x i32>
  %465 = shufflevector <8 x i32> %463, <8 x i32> %464, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %466 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 3
  %467 = bitcast <4 x i64>* %466 to <8 x i32>*
  store <8 x i32> %465, <8 x i32>* %467, align 32
  %468 = shufflevector <8 x i32> %463, <8 x i32> %464, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %469 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 11
  %470 = bitcast <4 x i64>* %469 to <8 x i32>*
  store <8 x i32> %468, <8 x i32>* %470, align 32
  %471 = shufflevector <4 x i64> %421, <4 x i64> %431, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %472 = shufflevector <4 x i64> %441, <4 x i64> %451, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %473 = bitcast <4 x i64> %471 to <8 x i32>
  %474 = bitcast <4 x i64> %472 to <8 x i32>
  %475 = shufflevector <8 x i32> %473, <8 x i32> %474, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %476 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 5
  %477 = bitcast <4 x i64>* %476 to <8 x i32>*
  store <8 x i32> %475, <8 x i32>* %477, align 32
  %478 = shufflevector <8 x i32> %473, <8 x i32> %474, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %479 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 13
  %480 = bitcast <4 x i64>* %479 to <8 x i32>*
  store <8 x i32> %478, <8 x i32>* %480, align 32
  %481 = shufflevector <4 x i64> %421, <4 x i64> %431, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %482 = shufflevector <4 x i64> %441, <4 x i64> %451, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %483 = bitcast <4 x i64> %481 to <8 x i32>
  %484 = bitcast <4 x i64> %482 to <8 x i32>
  %485 = shufflevector <8 x i32> %483, <8 x i32> %484, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %486 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 7
  %487 = bitcast <4 x i64>* %486 to <8 x i32>*
  store <8 x i32> %485, <8 x i32>* %487, align 32
  %488 = shufflevector <8 x i32> %483, <8 x i32> %484, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %489 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 15
  %490 = bitcast <4 x i64>* %489 to <8 x i32>*
  store <8 x i32> %488, <8 x i32>* %490, align 32
  %491 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 17
  %492 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 17
  %493 = bitcast <4 x i64>* %491 to <8 x i32>*
  %494 = load <8 x i32>, <8 x i32>* %493, align 32
  %495 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 19
  %496 = bitcast <4 x i64>* %495 to <8 x i32>*
  %497 = load <8 x i32>, <8 x i32>* %496, align 32
  %498 = shufflevector <8 x i32> %494, <8 x i32> %497, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %499 = bitcast <8 x i32> %498 to <4 x i64>
  %500 = shufflevector <8 x i32> %494, <8 x i32> %497, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %501 = bitcast <8 x i32> %500 to <4 x i64>
  %502 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 21
  %503 = bitcast <4 x i64>* %502 to <8 x i32>*
  %504 = load <8 x i32>, <8 x i32>* %503, align 32
  %505 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 23
  %506 = bitcast <4 x i64>* %505 to <8 x i32>*
  %507 = load <8 x i32>, <8 x i32>* %506, align 32
  %508 = shufflevector <8 x i32> %504, <8 x i32> %507, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %509 = bitcast <8 x i32> %508 to <4 x i64>
  %510 = shufflevector <8 x i32> %504, <8 x i32> %507, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %511 = bitcast <8 x i32> %510 to <4 x i64>
  %512 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 25
  %513 = bitcast <4 x i64>* %512 to <8 x i32>*
  %514 = load <8 x i32>, <8 x i32>* %513, align 32
  %515 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 27
  %516 = bitcast <4 x i64>* %515 to <8 x i32>*
  %517 = load <8 x i32>, <8 x i32>* %516, align 32
  %518 = shufflevector <8 x i32> %514, <8 x i32> %517, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %519 = bitcast <8 x i32> %518 to <4 x i64>
  %520 = shufflevector <8 x i32> %514, <8 x i32> %517, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %521 = bitcast <8 x i32> %520 to <4 x i64>
  %522 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 29
  %523 = bitcast <4 x i64>* %522 to <8 x i32>*
  %524 = load <8 x i32>, <8 x i32>* %523, align 32
  %525 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 31
  %526 = bitcast <4 x i64>* %525 to <8 x i32>*
  %527 = load <8 x i32>, <8 x i32>* %526, align 32
  %528 = shufflevector <8 x i32> %524, <8 x i32> %527, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %529 = bitcast <8 x i32> %528 to <4 x i64>
  %530 = shufflevector <8 x i32> %524, <8 x i32> %527, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %531 = bitcast <8 x i32> %530 to <4 x i64>
  %532 = shufflevector <4 x i64> %499, <4 x i64> %509, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %533 = shufflevector <4 x i64> %519, <4 x i64> %529, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %534 = bitcast <4 x i64> %532 to <8 x i32>
  %535 = bitcast <4 x i64> %533 to <8 x i32>
  %536 = shufflevector <8 x i32> %534, <8 x i32> %535, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %537 = bitcast <4 x i64>* %492 to <8 x i32>*
  store <8 x i32> %536, <8 x i32>* %537, align 32
  %538 = shufflevector <8 x i32> %534, <8 x i32> %535, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %539 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 25
  %540 = bitcast <4 x i64>* %539 to <8 x i32>*
  store <8 x i32> %538, <8 x i32>* %540, align 32
  %541 = shufflevector <4 x i64> %499, <4 x i64> %509, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %542 = shufflevector <4 x i64> %519, <4 x i64> %529, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %543 = bitcast <4 x i64> %541 to <8 x i32>
  %544 = bitcast <4 x i64> %542 to <8 x i32>
  %545 = shufflevector <8 x i32> %543, <8 x i32> %544, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %546 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 19
  %547 = bitcast <4 x i64>* %546 to <8 x i32>*
  store <8 x i32> %545, <8 x i32>* %547, align 32
  %548 = shufflevector <8 x i32> %543, <8 x i32> %544, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %549 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 27
  %550 = bitcast <4 x i64>* %549 to <8 x i32>*
  store <8 x i32> %548, <8 x i32>* %550, align 32
  %551 = shufflevector <4 x i64> %501, <4 x i64> %511, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %552 = shufflevector <4 x i64> %521, <4 x i64> %531, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %553 = bitcast <4 x i64> %551 to <8 x i32>
  %554 = bitcast <4 x i64> %552 to <8 x i32>
  %555 = shufflevector <8 x i32> %553, <8 x i32> %554, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %556 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 21
  %557 = bitcast <4 x i64>* %556 to <8 x i32>*
  store <8 x i32> %555, <8 x i32>* %557, align 32
  %558 = shufflevector <8 x i32> %553, <8 x i32> %554, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %559 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 29
  %560 = bitcast <4 x i64>* %559 to <8 x i32>*
  store <8 x i32> %558, <8 x i32>* %560, align 32
  %561 = shufflevector <4 x i64> %501, <4 x i64> %511, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %562 = shufflevector <4 x i64> %521, <4 x i64> %531, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %563 = bitcast <4 x i64> %561 to <8 x i32>
  %564 = bitcast <4 x i64> %562 to <8 x i32>
  %565 = shufflevector <8 x i32> %563, <8 x i32> %564, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %566 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 23
  %567 = bitcast <4 x i64>* %566 to <8 x i32>*
  store <8 x i32> %565, <8 x i32>* %567, align 32
  %568 = shufflevector <8 x i32> %563, <8 x i32> %564, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %569 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 31
  %570 = bitcast <4 x i64>* %569 to <8 x i32>*
  store <8 x i32> %568, <8 x i32>* %570, align 32
  %571 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 2, i64 2), align 2
  call void @fdct16_avx2(<4 x i64>* nonnull %95, <4 x i64>* nonnull %188, i8 signext %571, i32 2, i32 2)
  %572 = load <8 x i32>, <8 x i32>* %253, align 32
  %573 = load <8 x i32>, <8 x i32>* %256, align 32
  %574 = shufflevector <8 x i32> %572, <8 x i32> %573, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %575 = bitcast <8 x i32> %574 to <4 x i64>
  %576 = shufflevector <8 x i32> %572, <8 x i32> %573, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %577 = bitcast <8 x i32> %576 to <4 x i64>
  %578 = load <8 x i32>, <8 x i32>* %263, align 32
  %579 = load <8 x i32>, <8 x i32>* %266, align 32
  %580 = shufflevector <8 x i32> %578, <8 x i32> %579, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %581 = bitcast <8 x i32> %580 to <4 x i64>
  %582 = shufflevector <8 x i32> %578, <8 x i32> %579, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %583 = bitcast <8 x i32> %582 to <4 x i64>
  %584 = load <8 x i32>, <8 x i32>* %273, align 32
  %585 = load <8 x i32>, <8 x i32>* %276, align 32
  %586 = shufflevector <8 x i32> %584, <8 x i32> %585, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %587 = bitcast <8 x i32> %586 to <4 x i64>
  %588 = shufflevector <8 x i32> %584, <8 x i32> %585, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %589 = bitcast <8 x i32> %588 to <4 x i64>
  %590 = load <8 x i32>, <8 x i32>* %283, align 32
  %591 = load <8 x i32>, <8 x i32>* %286, align 32
  %592 = shufflevector <8 x i32> %590, <8 x i32> %591, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %593 = bitcast <8 x i32> %592 to <4 x i64>
  %594 = shufflevector <8 x i32> %590, <8 x i32> %591, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %595 = bitcast <8 x i32> %594 to <4 x i64>
  %596 = shufflevector <4 x i64> %575, <4 x i64> %581, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %597 = shufflevector <4 x i64> %587, <4 x i64> %593, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %598 = bitcast <4 x i64> %596 to <8 x i32>
  %599 = bitcast <4 x i64> %597 to <8 x i32>
  %600 = shufflevector <8 x i32> %598, <8 x i32> %599, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %600, <8 x i32>* %297, align 32
  %601 = shufflevector <8 x i32> %598, <8 x i32> %599, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %601, <8 x i32>* %300, align 32
  %602 = shufflevector <4 x i64> %575, <4 x i64> %581, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %603 = shufflevector <4 x i64> %587, <4 x i64> %593, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %604 = bitcast <4 x i64> %602 to <8 x i32>
  %605 = bitcast <4 x i64> %603 to <8 x i32>
  %606 = shufflevector <8 x i32> %604, <8 x i32> %605, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %606, <8 x i32>* %307, align 32
  %607 = shufflevector <8 x i32> %604, <8 x i32> %605, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %607, <8 x i32>* %310, align 32
  %608 = shufflevector <4 x i64> %577, <4 x i64> %583, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %609 = shufflevector <4 x i64> %589, <4 x i64> %595, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %610 = bitcast <4 x i64> %608 to <8 x i32>
  %611 = bitcast <4 x i64> %609 to <8 x i32>
  %612 = shufflevector <8 x i32> %610, <8 x i32> %611, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %612, <8 x i32>* %317, align 32
  %613 = shufflevector <8 x i32> %610, <8 x i32> %611, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %613, <8 x i32>* %320, align 32
  %614 = shufflevector <4 x i64> %577, <4 x i64> %583, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %615 = shufflevector <4 x i64> %589, <4 x i64> %595, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %616 = bitcast <4 x i64> %614 to <8 x i32>
  %617 = bitcast <4 x i64> %615 to <8 x i32>
  %618 = shufflevector <8 x i32> %616, <8 x i32> %617, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %618, <8 x i32>* %327, align 32
  %619 = shufflevector <8 x i32> %616, <8 x i32> %617, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %619, <8 x i32>* %330, align 32
  %620 = load <8 x i32>, <8 x i32>* %333, align 32
  %621 = load <8 x i32>, <8 x i32>* %336, align 32
  %622 = shufflevector <8 x i32> %620, <8 x i32> %621, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %623 = bitcast <8 x i32> %622 to <4 x i64>
  %624 = shufflevector <8 x i32> %620, <8 x i32> %621, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %625 = bitcast <8 x i32> %624 to <4 x i64>
  %626 = load <8 x i32>, <8 x i32>* %343, align 32
  %627 = load <8 x i32>, <8 x i32>* %346, align 32
  %628 = shufflevector <8 x i32> %626, <8 x i32> %627, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %629 = bitcast <8 x i32> %628 to <4 x i64>
  %630 = shufflevector <8 x i32> %626, <8 x i32> %627, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %631 = bitcast <8 x i32> %630 to <4 x i64>
  %632 = load <8 x i32>, <8 x i32>* %353, align 32
  %633 = load <8 x i32>, <8 x i32>* %356, align 32
  %634 = shufflevector <8 x i32> %632, <8 x i32> %633, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %635 = bitcast <8 x i32> %634 to <4 x i64>
  %636 = shufflevector <8 x i32> %632, <8 x i32> %633, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %637 = bitcast <8 x i32> %636 to <4 x i64>
  %638 = load <8 x i32>, <8 x i32>* %363, align 32
  %639 = load <8 x i32>, <8 x i32>* %366, align 32
  %640 = shufflevector <8 x i32> %638, <8 x i32> %639, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %641 = bitcast <8 x i32> %640 to <4 x i64>
  %642 = shufflevector <8 x i32> %638, <8 x i32> %639, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %643 = bitcast <8 x i32> %642 to <4 x i64>
  %644 = shufflevector <4 x i64> %623, <4 x i64> %629, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %645 = shufflevector <4 x i64> %635, <4 x i64> %641, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %646 = bitcast <4 x i64> %644 to <8 x i32>
  %647 = bitcast <4 x i64> %645 to <8 x i32>
  %648 = shufflevector <8 x i32> %646, <8 x i32> %647, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %648, <8 x i32>* %377, align 32
  %649 = shufflevector <8 x i32> %646, <8 x i32> %647, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %649, <8 x i32>* %380, align 32
  %650 = shufflevector <4 x i64> %623, <4 x i64> %629, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %651 = shufflevector <4 x i64> %635, <4 x i64> %641, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %652 = bitcast <4 x i64> %650 to <8 x i32>
  %653 = bitcast <4 x i64> %651 to <8 x i32>
  %654 = shufflevector <8 x i32> %652, <8 x i32> %653, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %654, <8 x i32>* %387, align 32
  %655 = shufflevector <8 x i32> %652, <8 x i32> %653, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %655, <8 x i32>* %390, align 32
  %656 = shufflevector <4 x i64> %625, <4 x i64> %631, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %657 = shufflevector <4 x i64> %637, <4 x i64> %643, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %658 = bitcast <4 x i64> %656 to <8 x i32>
  %659 = bitcast <4 x i64> %657 to <8 x i32>
  %660 = shufflevector <8 x i32> %658, <8 x i32> %659, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %660, <8 x i32>* %397, align 32
  %661 = shufflevector <8 x i32> %658, <8 x i32> %659, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %661, <8 x i32>* %400, align 32
  %662 = shufflevector <4 x i64> %625, <4 x i64> %631, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %663 = shufflevector <4 x i64> %637, <4 x i64> %643, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %664 = bitcast <4 x i64> %662 to <8 x i32>
  %665 = bitcast <4 x i64> %663 to <8 x i32>
  %666 = shufflevector <8 x i32> %664, <8 x i32> %665, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %666, <8 x i32>* %407, align 32
  %667 = shufflevector <8 x i32> %664, <8 x i32> %665, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %667, <8 x i32>* %410, align 32
  %668 = load <8 x i32>, <8 x i32>* %413, align 32
  %669 = load <8 x i32>, <8 x i32>* %416, align 32
  %670 = shufflevector <8 x i32> %668, <8 x i32> %669, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %671 = bitcast <8 x i32> %670 to <4 x i64>
  %672 = shufflevector <8 x i32> %668, <8 x i32> %669, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %673 = bitcast <8 x i32> %672 to <4 x i64>
  %674 = load <8 x i32>, <8 x i32>* %423, align 32
  %675 = load <8 x i32>, <8 x i32>* %426, align 32
  %676 = shufflevector <8 x i32> %674, <8 x i32> %675, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %677 = bitcast <8 x i32> %676 to <4 x i64>
  %678 = shufflevector <8 x i32> %674, <8 x i32> %675, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %679 = bitcast <8 x i32> %678 to <4 x i64>
  %680 = load <8 x i32>, <8 x i32>* %433, align 32
  %681 = load <8 x i32>, <8 x i32>* %436, align 32
  %682 = shufflevector <8 x i32> %680, <8 x i32> %681, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %683 = bitcast <8 x i32> %682 to <4 x i64>
  %684 = shufflevector <8 x i32> %680, <8 x i32> %681, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %685 = bitcast <8 x i32> %684 to <4 x i64>
  %686 = load <8 x i32>, <8 x i32>* %443, align 32
  %687 = load <8 x i32>, <8 x i32>* %446, align 32
  %688 = shufflevector <8 x i32> %686, <8 x i32> %687, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %689 = bitcast <8 x i32> %688 to <4 x i64>
  %690 = shufflevector <8 x i32> %686, <8 x i32> %687, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %691 = bitcast <8 x i32> %690 to <4 x i64>
  %692 = shufflevector <4 x i64> %671, <4 x i64> %677, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %693 = shufflevector <4 x i64> %683, <4 x i64> %689, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %694 = bitcast <4 x i64> %692 to <8 x i32>
  %695 = bitcast <4 x i64> %693 to <8 x i32>
  %696 = shufflevector <8 x i32> %694, <8 x i32> %695, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %696, <8 x i32>* %457, align 32
  %697 = shufflevector <8 x i32> %694, <8 x i32> %695, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %697, <8 x i32>* %460, align 32
  %698 = shufflevector <4 x i64> %671, <4 x i64> %677, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %699 = shufflevector <4 x i64> %683, <4 x i64> %689, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %700 = bitcast <4 x i64> %698 to <8 x i32>
  %701 = bitcast <4 x i64> %699 to <8 x i32>
  %702 = shufflevector <8 x i32> %700, <8 x i32> %701, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %702, <8 x i32>* %467, align 32
  %703 = shufflevector <8 x i32> %700, <8 x i32> %701, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %703, <8 x i32>* %470, align 32
  %704 = shufflevector <4 x i64> %673, <4 x i64> %679, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %705 = shufflevector <4 x i64> %685, <4 x i64> %691, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %706 = bitcast <4 x i64> %704 to <8 x i32>
  %707 = bitcast <4 x i64> %705 to <8 x i32>
  %708 = shufflevector <8 x i32> %706, <8 x i32> %707, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %708, <8 x i32>* %477, align 32
  %709 = shufflevector <8 x i32> %706, <8 x i32> %707, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %709, <8 x i32>* %480, align 32
  %710 = shufflevector <4 x i64> %673, <4 x i64> %679, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %711 = shufflevector <4 x i64> %685, <4 x i64> %691, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %712 = bitcast <4 x i64> %710 to <8 x i32>
  %713 = bitcast <4 x i64> %711 to <8 x i32>
  %714 = shufflevector <8 x i32> %712, <8 x i32> %713, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %714, <8 x i32>* %487, align 32
  %715 = shufflevector <8 x i32> %712, <8 x i32> %713, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %715, <8 x i32>* %490, align 32
  %716 = load <8 x i32>, <8 x i32>* %493, align 32
  %717 = load <8 x i32>, <8 x i32>* %496, align 32
  %718 = shufflevector <8 x i32> %716, <8 x i32> %717, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %719 = bitcast <8 x i32> %718 to <4 x i64>
  %720 = shufflevector <8 x i32> %716, <8 x i32> %717, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %721 = bitcast <8 x i32> %720 to <4 x i64>
  %722 = load <8 x i32>, <8 x i32>* %503, align 32
  %723 = load <8 x i32>, <8 x i32>* %506, align 32
  %724 = shufflevector <8 x i32> %722, <8 x i32> %723, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %725 = bitcast <8 x i32> %724 to <4 x i64>
  %726 = shufflevector <8 x i32> %722, <8 x i32> %723, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %727 = bitcast <8 x i32> %726 to <4 x i64>
  %728 = load <8 x i32>, <8 x i32>* %513, align 32
  %729 = load <8 x i32>, <8 x i32>* %516, align 32
  %730 = shufflevector <8 x i32> %728, <8 x i32> %729, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %731 = bitcast <8 x i32> %730 to <4 x i64>
  %732 = shufflevector <8 x i32> %728, <8 x i32> %729, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %733 = bitcast <8 x i32> %732 to <4 x i64>
  %734 = load <8 x i32>, <8 x i32>* %523, align 32
  %735 = load <8 x i32>, <8 x i32>* %526, align 32
  %736 = shufflevector <8 x i32> %734, <8 x i32> %735, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %737 = bitcast <8 x i32> %736 to <4 x i64>
  %738 = shufflevector <8 x i32> %734, <8 x i32> %735, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %739 = bitcast <8 x i32> %738 to <4 x i64>
  %740 = shufflevector <4 x i64> %719, <4 x i64> %725, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %741 = shufflevector <4 x i64> %731, <4 x i64> %737, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %742 = bitcast <4 x i64> %740 to <8 x i32>
  %743 = bitcast <4 x i64> %741 to <8 x i32>
  %744 = shufflevector <8 x i32> %742, <8 x i32> %743, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %744, <8 x i32>* %537, align 32
  %745 = shufflevector <8 x i32> %742, <8 x i32> %743, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %745, <8 x i32>* %540, align 32
  %746 = shufflevector <4 x i64> %719, <4 x i64> %725, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %747 = shufflevector <4 x i64> %731, <4 x i64> %737, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %748 = bitcast <4 x i64> %746 to <8 x i32>
  %749 = bitcast <4 x i64> %747 to <8 x i32>
  %750 = shufflevector <8 x i32> %748, <8 x i32> %749, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %750, <8 x i32>* %547, align 32
  %751 = shufflevector <8 x i32> %748, <8 x i32> %749, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %751, <8 x i32>* %550, align 32
  %752 = shufflevector <4 x i64> %721, <4 x i64> %727, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %753 = shufflevector <4 x i64> %733, <4 x i64> %739, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %754 = bitcast <4 x i64> %752 to <8 x i32>
  %755 = bitcast <4 x i64> %753 to <8 x i32>
  %756 = shufflevector <8 x i32> %754, <8 x i32> %755, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %756, <8 x i32>* %557, align 32
  %757 = shufflevector <8 x i32> %754, <8 x i32> %755, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %757, <8 x i32>* %560, align 32
  %758 = shufflevector <4 x i64> %721, <4 x i64> %727, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %759 = shufflevector <4 x i64> %733, <4 x i64> %739, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %760 = bitcast <4 x i64> %758 to <8 x i32>
  %761 = bitcast <4 x i64> %759 to <8 x i32>
  %762 = shufflevector <8 x i32> %760, <8 x i32> %761, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %762, <8 x i32>* %567, align 32
  %763 = shufflevector <8 x i32> %760, <8 x i32> %761, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %763, <8 x i32>* %570, align 32
  br label %10159

764:                                              ; preds = %5
  %765 = bitcast [64 x <4 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %765) #7
  %766 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 16
  %767 = bitcast <4 x i64>* %766 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %767, i8 -86, i64 1536, i1 false) #7
  %768 = sext i32 %2 to i64
  %769 = bitcast i16* %0 to <4 x i64>*
  %770 = load <4 x i64>, <4 x i64>* %769, align 1
  %771 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 0
  store <4 x i64> %770, <4 x i64>* %771, align 32
  %772 = getelementptr inbounds i16, i16* %0, i64 %768
  %773 = bitcast i16* %772 to <4 x i64>*
  %774 = load <4 x i64>, <4 x i64>* %773, align 1
  %775 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 1
  store <4 x i64> %774, <4 x i64>* %775, align 32
  %776 = shl nsw i64 %768, 1
  %777 = getelementptr inbounds i16, i16* %0, i64 %776
  %778 = bitcast i16* %777 to <4 x i64>*
  %779 = load <4 x i64>, <4 x i64>* %778, align 1
  %780 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 2
  store <4 x i64> %779, <4 x i64>* %780, align 32
  %781 = mul nsw i64 %768, 3
  %782 = getelementptr inbounds i16, i16* %0, i64 %781
  %783 = bitcast i16* %782 to <4 x i64>*
  %784 = load <4 x i64>, <4 x i64>* %783, align 1
  %785 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 3
  store <4 x i64> %784, <4 x i64>* %785, align 32
  %786 = shl nsw i64 %768, 2
  %787 = getelementptr inbounds i16, i16* %0, i64 %786
  %788 = bitcast i16* %787 to <4 x i64>*
  %789 = load <4 x i64>, <4 x i64>* %788, align 1
  %790 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 4
  store <4 x i64> %789, <4 x i64>* %790, align 32
  %791 = mul nsw i64 %768, 5
  %792 = getelementptr inbounds i16, i16* %0, i64 %791
  %793 = bitcast i16* %792 to <4 x i64>*
  %794 = load <4 x i64>, <4 x i64>* %793, align 1
  %795 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 5
  store <4 x i64> %794, <4 x i64>* %795, align 32
  %796 = mul nsw i64 %768, 6
  %797 = getelementptr inbounds i16, i16* %0, i64 %796
  %798 = bitcast i16* %797 to <4 x i64>*
  %799 = load <4 x i64>, <4 x i64>* %798, align 1
  %800 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 6
  store <4 x i64> %799, <4 x i64>* %800, align 32
  %801 = mul nsw i64 %768, 7
  %802 = getelementptr inbounds i16, i16* %0, i64 %801
  %803 = bitcast i16* %802 to <4 x i64>*
  %804 = load <4 x i64>, <4 x i64>* %803, align 1
  %805 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 7
  store <4 x i64> %804, <4 x i64>* %805, align 32
  %806 = shl nsw i64 %768, 3
  %807 = getelementptr inbounds i16, i16* %0, i64 %806
  %808 = bitcast i16* %807 to <4 x i64>*
  %809 = load <4 x i64>, <4 x i64>* %808, align 1
  %810 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 8
  store <4 x i64> %809, <4 x i64>* %810, align 32
  %811 = mul nsw i64 %768, 9
  %812 = getelementptr inbounds i16, i16* %0, i64 %811
  %813 = bitcast i16* %812 to <4 x i64>*
  %814 = load <4 x i64>, <4 x i64>* %813, align 1
  %815 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 9
  store <4 x i64> %814, <4 x i64>* %815, align 32
  %816 = mul nsw i64 %768, 10
  %817 = getelementptr inbounds i16, i16* %0, i64 %816
  %818 = bitcast i16* %817 to <4 x i64>*
  %819 = load <4 x i64>, <4 x i64>* %818, align 1
  %820 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 10
  store <4 x i64> %819, <4 x i64>* %820, align 32
  %821 = mul nsw i64 %768, 11
  %822 = getelementptr inbounds i16, i16* %0, i64 %821
  %823 = bitcast i16* %822 to <4 x i64>*
  %824 = load <4 x i64>, <4 x i64>* %823, align 1
  %825 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 11
  store <4 x i64> %824, <4 x i64>* %825, align 32
  %826 = mul nsw i64 %768, 12
  %827 = getelementptr inbounds i16, i16* %0, i64 %826
  %828 = bitcast i16* %827 to <4 x i64>*
  %829 = load <4 x i64>, <4 x i64>* %828, align 1
  %830 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 12
  store <4 x i64> %829, <4 x i64>* %830, align 32
  %831 = mul nsw i64 %768, 13
  %832 = getelementptr inbounds i16, i16* %0, i64 %831
  %833 = bitcast i16* %832 to <4 x i64>*
  %834 = load <4 x i64>, <4 x i64>* %833, align 1
  %835 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 13
  store <4 x i64> %834, <4 x i64>* %835, align 32
  %836 = mul nsw i64 %768, 14
  %837 = getelementptr inbounds i16, i16* %0, i64 %836
  %838 = bitcast i16* %837 to <4 x i64>*
  %839 = load <4 x i64>, <4 x i64>* %838, align 1
  %840 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 14
  store <4 x i64> %839, <4 x i64>* %840, align 32
  %841 = mul nsw i64 %768, 15
  %842 = getelementptr inbounds i16, i16* %0, i64 %841
  %843 = bitcast i16* %842 to <4 x i64>*
  %844 = load <4 x i64>, <4 x i64>* %843, align 1
  %845 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 15
  store <4 x i64> %844, <4 x i64>* %845, align 32
  %846 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 0
  %847 = shufflevector <4 x i64> %770, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %848 = bitcast <2 x i64> %847 to <8 x i16>
  %849 = sext <8 x i16> %848 to <8 x i32>
  %850 = bitcast [32 x <4 x i64>]* %8 to <8 x i32>*
  store <8 x i32> %849, <8 x i32>* %850, align 32
  %851 = bitcast <4 x i64> %770 to <8 x i32>
  %852 = shufflevector <8 x i32> %851, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %853 = bitcast <4 x i32> %852 to <8 x i16>
  %854 = sext <8 x i16> %853 to <8 x i32>
  %855 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 1
  %856 = bitcast <4 x i64>* %855 to <8 x i32>*
  store <8 x i32> %854, <8 x i32>* %856, align 32
  br label %857

857:                                              ; preds = %764, %857
  %858 = phi i64 [ 1, %764 ], [ %874, %857 ]
  %859 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 %858
  %860 = load <4 x i64>, <4 x i64>* %859, align 32
  %861 = shufflevector <4 x i64> %860, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %862 = bitcast <2 x i64> %861 to <8 x i16>
  %863 = sext <8 x i16> %862 to <8 x i32>
  %864 = shl nuw nsw i64 %858, 1
  %865 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %864
  %866 = bitcast <4 x i64>* %865 to <8 x i32>*
  store <8 x i32> %863, <8 x i32>* %866, align 32
  %867 = bitcast <4 x i64> %860 to <8 x i32>
  %868 = shufflevector <8 x i32> %867, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %869 = bitcast <4 x i32> %868 to <8 x i16>
  %870 = sext <8 x i16> %869 to <8 x i32>
  %871 = or i64 %864, 1
  %872 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %871
  %873 = bitcast <4 x i64>* %872 to <8 x i32>*
  store <8 x i32> %870, <8 x i32>* %873, align 32
  %874 = add nuw nsw i64 %858, 1
  %875 = icmp eq i64 %874, 16
  br i1 %875, label %876, label %857

876:                                              ; preds = %857
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %765) #7
  %877 = load i8, i8* %12, align 1
  %878 = sext i8 %877 to i32
  %879 = icmp slt i8 %877, 0
  br i1 %879, label %880, label %913

880:                                              ; preds = %876
  %881 = sub nsw i32 0, %878
  %882 = xor i32 %878, -1
  %883 = shl i32 1, %882
  %884 = insertelement <8 x i32> undef, i32 %883, i32 0
  %885 = shufflevector <8 x i32> %884, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %886

886:                                              ; preds = %886, %880
  %887 = phi i64 [ 0, %880 ], [ %911, %886 ]
  %888 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %887
  %889 = bitcast <4 x i64>* %888 to <8 x i32>*
  %890 = load <8 x i32>, <8 x i32>* %889, align 32
  %891 = add <8 x i32> %890, %885
  %892 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %891, i32 %881) #7
  store <8 x i32> %892, <8 x i32>* %889, align 32
  %893 = or i64 %887, 1
  %894 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %893
  %895 = bitcast <4 x i64>* %894 to <8 x i32>*
  %896 = load <8 x i32>, <8 x i32>* %895, align 32
  %897 = add <8 x i32> %896, %885
  %898 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %897, i32 %881) #7
  store <8 x i32> %898, <8 x i32>* %895, align 32
  %899 = or i64 %887, 2
  %900 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %899
  %901 = bitcast <4 x i64>* %900 to <8 x i32>*
  %902 = load <8 x i32>, <8 x i32>* %901, align 32
  %903 = add <8 x i32> %902, %885
  %904 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %903, i32 %881) #7
  store <8 x i32> %904, <8 x i32>* %901, align 32
  %905 = or i64 %887, 3
  %906 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %905
  %907 = bitcast <4 x i64>* %906 to <8 x i32>*
  %908 = load <8 x i32>, <8 x i32>* %907, align 32
  %909 = add <8 x i32> %908, %885
  %910 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %909, i32 %881) #7
  store <8 x i32> %910, <8 x i32>* %907, align 32
  %911 = add nuw nsw i64 %887, 4
  %912 = icmp eq i64 %911, 32
  br i1 %912, label %938, label %886

913:                                              ; preds = %876
  %914 = icmp eq i8 %877, 0
  br i1 %914, label %938, label %915

915:                                              ; preds = %913, %915
  %916 = phi i64 [ %936, %915 ], [ 0, %913 ]
  %917 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %916
  %918 = bitcast <4 x i64>* %917 to <8 x i32>*
  %919 = load <8 x i32>, <8 x i32>* %918, align 32
  %920 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %919, i32 %878) #7
  store <8 x i32> %920, <8 x i32>* %918, align 32
  %921 = or i64 %916, 1
  %922 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %921
  %923 = bitcast <4 x i64>* %922 to <8 x i32>*
  %924 = load <8 x i32>, <8 x i32>* %923, align 32
  %925 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %924, i32 %878) #7
  store <8 x i32> %925, <8 x i32>* %923, align 32
  %926 = or i64 %916, 2
  %927 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %926
  %928 = bitcast <4 x i64>* %927 to <8 x i32>*
  %929 = load <8 x i32>, <8 x i32>* %928, align 32
  %930 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %929, i32 %878) #7
  store <8 x i32> %930, <8 x i32>* %928, align 32
  %931 = or i64 %916, 3
  %932 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %931
  %933 = bitcast <4 x i64>* %932 to <8 x i32>*
  %934 = load <8 x i32>, <8 x i32>* %933, align 32
  %935 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %934, i32 %878) #7
  store <8 x i32> %935, <8 x i32>* %933, align 32
  %936 = add nuw nsw i64 %916, 4
  %937 = icmp eq i64 %936, 32
  br i1 %937, label %938, label %915

938:                                              ; preds = %915, %886, %913
  %939 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 0
  %940 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 2, i64 2), align 2
  call void @fadst16_avx2(<4 x i64>* nonnull %846, <4 x i64>* nonnull %939, i8 signext %940, i32 2, i32 2)
  %941 = getelementptr inbounds i8, i8* %12, i64 1
  %942 = load i8, i8* %941, align 1
  %943 = sext i8 %942 to i32
  %944 = icmp slt i8 %942, 0
  br i1 %944, label %945, label %978

945:                                              ; preds = %938
  %946 = sub nsw i32 0, %943
  %947 = xor i32 %943, -1
  %948 = shl i32 1, %947
  %949 = insertelement <8 x i32> undef, i32 %948, i32 0
  %950 = shufflevector <8 x i32> %949, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %951

951:                                              ; preds = %951, %945
  %952 = phi i64 [ 0, %945 ], [ %976, %951 ]
  %953 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %952
  %954 = bitcast <4 x i64>* %953 to <8 x i32>*
  %955 = load <8 x i32>, <8 x i32>* %954, align 32
  %956 = add <8 x i32> %955, %950
  %957 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %956, i32 %946) #7
  store <8 x i32> %957, <8 x i32>* %954, align 32
  %958 = or i64 %952, 1
  %959 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %958
  %960 = bitcast <4 x i64>* %959 to <8 x i32>*
  %961 = load <8 x i32>, <8 x i32>* %960, align 32
  %962 = add <8 x i32> %961, %950
  %963 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %962, i32 %946) #7
  store <8 x i32> %963, <8 x i32>* %960, align 32
  %964 = or i64 %952, 2
  %965 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %964
  %966 = bitcast <4 x i64>* %965 to <8 x i32>*
  %967 = load <8 x i32>, <8 x i32>* %966, align 32
  %968 = add <8 x i32> %967, %950
  %969 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %968, i32 %946) #7
  store <8 x i32> %969, <8 x i32>* %966, align 32
  %970 = or i64 %952, 3
  %971 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %970
  %972 = bitcast <4 x i64>* %971 to <8 x i32>*
  %973 = load <8 x i32>, <8 x i32>* %972, align 32
  %974 = add <8 x i32> %973, %950
  %975 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %974, i32 %946) #7
  store <8 x i32> %975, <8 x i32>* %972, align 32
  %976 = add nuw nsw i64 %952, 4
  %977 = icmp eq i64 %976, 32
  br i1 %977, label %1003, label %951

978:                                              ; preds = %938
  %979 = icmp eq i8 %942, 0
  br i1 %979, label %1003, label %980

980:                                              ; preds = %978, %980
  %981 = phi i64 [ %1001, %980 ], [ 0, %978 ]
  %982 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %981
  %983 = bitcast <4 x i64>* %982 to <8 x i32>*
  %984 = load <8 x i32>, <8 x i32>* %983, align 32
  %985 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %984, i32 %943) #7
  store <8 x i32> %985, <8 x i32>* %983, align 32
  %986 = or i64 %981, 1
  %987 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %986
  %988 = bitcast <4 x i64>* %987 to <8 x i32>*
  %989 = load <8 x i32>, <8 x i32>* %988, align 32
  %990 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %989, i32 %943) #7
  store <8 x i32> %990, <8 x i32>* %988, align 32
  %991 = or i64 %981, 2
  %992 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %991
  %993 = bitcast <4 x i64>* %992 to <8 x i32>*
  %994 = load <8 x i32>, <8 x i32>* %993, align 32
  %995 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %994, i32 %943) #7
  store <8 x i32> %995, <8 x i32>* %993, align 32
  %996 = or i64 %981, 3
  %997 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %996
  %998 = bitcast <4 x i64>* %997 to <8 x i32>*
  %999 = load <8 x i32>, <8 x i32>* %998, align 32
  %1000 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %999, i32 %943) #7
  store <8 x i32> %1000, <8 x i32>* %998, align 32
  %1001 = add nuw nsw i64 %981, 4
  %1002 = icmp eq i64 %1001, 32
  br i1 %1002, label %1003, label %980

1003:                                             ; preds = %980, %951, %978
  %1004 = bitcast [32 x <4 x i64>]* %10 to <8 x i32>*
  %1005 = load <8 x i32>, <8 x i32>* %1004, align 32
  %1006 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 2
  %1007 = bitcast <4 x i64>* %1006 to <8 x i32>*
  %1008 = load <8 x i32>, <8 x i32>* %1007, align 32
  %1009 = shufflevector <8 x i32> %1005, <8 x i32> %1008, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1010 = bitcast <8 x i32> %1009 to <4 x i64>
  %1011 = shufflevector <8 x i32> %1005, <8 x i32> %1008, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1012 = bitcast <8 x i32> %1011 to <4 x i64>
  %1013 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 4
  %1014 = bitcast <4 x i64>* %1013 to <8 x i32>*
  %1015 = load <8 x i32>, <8 x i32>* %1014, align 32
  %1016 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 6
  %1017 = bitcast <4 x i64>* %1016 to <8 x i32>*
  %1018 = load <8 x i32>, <8 x i32>* %1017, align 32
  %1019 = shufflevector <8 x i32> %1015, <8 x i32> %1018, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1020 = bitcast <8 x i32> %1019 to <4 x i64>
  %1021 = shufflevector <8 x i32> %1015, <8 x i32> %1018, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1022 = bitcast <8 x i32> %1021 to <4 x i64>
  %1023 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 8
  %1024 = bitcast <4 x i64>* %1023 to <8 x i32>*
  %1025 = load <8 x i32>, <8 x i32>* %1024, align 32
  %1026 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 10
  %1027 = bitcast <4 x i64>* %1026 to <8 x i32>*
  %1028 = load <8 x i32>, <8 x i32>* %1027, align 32
  %1029 = shufflevector <8 x i32> %1025, <8 x i32> %1028, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1030 = bitcast <8 x i32> %1029 to <4 x i64>
  %1031 = shufflevector <8 x i32> %1025, <8 x i32> %1028, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1032 = bitcast <8 x i32> %1031 to <4 x i64>
  %1033 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 12
  %1034 = bitcast <4 x i64>* %1033 to <8 x i32>*
  %1035 = load <8 x i32>, <8 x i32>* %1034, align 32
  %1036 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 14
  %1037 = bitcast <4 x i64>* %1036 to <8 x i32>*
  %1038 = load <8 x i32>, <8 x i32>* %1037, align 32
  %1039 = shufflevector <8 x i32> %1035, <8 x i32> %1038, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1040 = bitcast <8 x i32> %1039 to <4 x i64>
  %1041 = shufflevector <8 x i32> %1035, <8 x i32> %1038, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1042 = bitcast <8 x i32> %1041 to <4 x i64>
  %1043 = shufflevector <4 x i64> %1010, <4 x i64> %1020, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1044 = shufflevector <4 x i64> %1030, <4 x i64> %1040, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1045 = bitcast <4 x i64> %1043 to <8 x i32>
  %1046 = bitcast <4 x i64> %1044 to <8 x i32>
  %1047 = shufflevector <8 x i32> %1045, <8 x i32> %1046, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1048 = bitcast [32 x <4 x i64>]* %8 to <8 x i32>*
  store <8 x i32> %1047, <8 x i32>* %1048, align 32
  %1049 = shufflevector <8 x i32> %1045, <8 x i32> %1046, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1050 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 8
  %1051 = bitcast <4 x i64>* %1050 to <8 x i32>*
  store <8 x i32> %1049, <8 x i32>* %1051, align 32
  %1052 = shufflevector <4 x i64> %1010, <4 x i64> %1020, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1053 = shufflevector <4 x i64> %1030, <4 x i64> %1040, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1054 = bitcast <4 x i64> %1052 to <8 x i32>
  %1055 = bitcast <4 x i64> %1053 to <8 x i32>
  %1056 = shufflevector <8 x i32> %1054, <8 x i32> %1055, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1057 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 2
  %1058 = bitcast <4 x i64>* %1057 to <8 x i32>*
  store <8 x i32> %1056, <8 x i32>* %1058, align 32
  %1059 = shufflevector <8 x i32> %1054, <8 x i32> %1055, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1060 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 10
  %1061 = bitcast <4 x i64>* %1060 to <8 x i32>*
  store <8 x i32> %1059, <8 x i32>* %1061, align 32
  %1062 = shufflevector <4 x i64> %1012, <4 x i64> %1022, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1063 = shufflevector <4 x i64> %1032, <4 x i64> %1042, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1064 = bitcast <4 x i64> %1062 to <8 x i32>
  %1065 = bitcast <4 x i64> %1063 to <8 x i32>
  %1066 = shufflevector <8 x i32> %1064, <8 x i32> %1065, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1067 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 4
  %1068 = bitcast <4 x i64>* %1067 to <8 x i32>*
  store <8 x i32> %1066, <8 x i32>* %1068, align 32
  %1069 = shufflevector <8 x i32> %1064, <8 x i32> %1065, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1070 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 12
  %1071 = bitcast <4 x i64>* %1070 to <8 x i32>*
  store <8 x i32> %1069, <8 x i32>* %1071, align 32
  %1072 = shufflevector <4 x i64> %1012, <4 x i64> %1022, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1073 = shufflevector <4 x i64> %1032, <4 x i64> %1042, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1074 = bitcast <4 x i64> %1072 to <8 x i32>
  %1075 = bitcast <4 x i64> %1073 to <8 x i32>
  %1076 = shufflevector <8 x i32> %1074, <8 x i32> %1075, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1077 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 6
  %1078 = bitcast <4 x i64>* %1077 to <8 x i32>*
  store <8 x i32> %1076, <8 x i32>* %1078, align 32
  %1079 = shufflevector <8 x i32> %1074, <8 x i32> %1075, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1080 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 14
  %1081 = bitcast <4 x i64>* %1080 to <8 x i32>*
  store <8 x i32> %1079, <8 x i32>* %1081, align 32
  %1082 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 1
  %1083 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 16
  %1084 = bitcast <4 x i64>* %1082 to <8 x i32>*
  %1085 = load <8 x i32>, <8 x i32>* %1084, align 32
  %1086 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 3
  %1087 = bitcast <4 x i64>* %1086 to <8 x i32>*
  %1088 = load <8 x i32>, <8 x i32>* %1087, align 32
  %1089 = shufflevector <8 x i32> %1085, <8 x i32> %1088, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1090 = bitcast <8 x i32> %1089 to <4 x i64>
  %1091 = shufflevector <8 x i32> %1085, <8 x i32> %1088, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1092 = bitcast <8 x i32> %1091 to <4 x i64>
  %1093 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 5
  %1094 = bitcast <4 x i64>* %1093 to <8 x i32>*
  %1095 = load <8 x i32>, <8 x i32>* %1094, align 32
  %1096 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 7
  %1097 = bitcast <4 x i64>* %1096 to <8 x i32>*
  %1098 = load <8 x i32>, <8 x i32>* %1097, align 32
  %1099 = shufflevector <8 x i32> %1095, <8 x i32> %1098, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1100 = bitcast <8 x i32> %1099 to <4 x i64>
  %1101 = shufflevector <8 x i32> %1095, <8 x i32> %1098, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1102 = bitcast <8 x i32> %1101 to <4 x i64>
  %1103 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 9
  %1104 = bitcast <4 x i64>* %1103 to <8 x i32>*
  %1105 = load <8 x i32>, <8 x i32>* %1104, align 32
  %1106 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 11
  %1107 = bitcast <4 x i64>* %1106 to <8 x i32>*
  %1108 = load <8 x i32>, <8 x i32>* %1107, align 32
  %1109 = shufflevector <8 x i32> %1105, <8 x i32> %1108, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1110 = bitcast <8 x i32> %1109 to <4 x i64>
  %1111 = shufflevector <8 x i32> %1105, <8 x i32> %1108, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1112 = bitcast <8 x i32> %1111 to <4 x i64>
  %1113 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 13
  %1114 = bitcast <4 x i64>* %1113 to <8 x i32>*
  %1115 = load <8 x i32>, <8 x i32>* %1114, align 32
  %1116 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 15
  %1117 = bitcast <4 x i64>* %1116 to <8 x i32>*
  %1118 = load <8 x i32>, <8 x i32>* %1117, align 32
  %1119 = shufflevector <8 x i32> %1115, <8 x i32> %1118, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1120 = bitcast <8 x i32> %1119 to <4 x i64>
  %1121 = shufflevector <8 x i32> %1115, <8 x i32> %1118, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1122 = bitcast <8 x i32> %1121 to <4 x i64>
  %1123 = shufflevector <4 x i64> %1090, <4 x i64> %1100, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1124 = shufflevector <4 x i64> %1110, <4 x i64> %1120, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1125 = bitcast <4 x i64> %1123 to <8 x i32>
  %1126 = bitcast <4 x i64> %1124 to <8 x i32>
  %1127 = shufflevector <8 x i32> %1125, <8 x i32> %1126, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1128 = bitcast <4 x i64>* %1083 to <8 x i32>*
  store <8 x i32> %1127, <8 x i32>* %1128, align 32
  %1129 = shufflevector <8 x i32> %1125, <8 x i32> %1126, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1130 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 24
  %1131 = bitcast <4 x i64>* %1130 to <8 x i32>*
  store <8 x i32> %1129, <8 x i32>* %1131, align 32
  %1132 = shufflevector <4 x i64> %1090, <4 x i64> %1100, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1133 = shufflevector <4 x i64> %1110, <4 x i64> %1120, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1134 = bitcast <4 x i64> %1132 to <8 x i32>
  %1135 = bitcast <4 x i64> %1133 to <8 x i32>
  %1136 = shufflevector <8 x i32> %1134, <8 x i32> %1135, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1137 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 18
  %1138 = bitcast <4 x i64>* %1137 to <8 x i32>*
  store <8 x i32> %1136, <8 x i32>* %1138, align 32
  %1139 = shufflevector <8 x i32> %1134, <8 x i32> %1135, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1140 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 26
  %1141 = bitcast <4 x i64>* %1140 to <8 x i32>*
  store <8 x i32> %1139, <8 x i32>* %1141, align 32
  %1142 = shufflevector <4 x i64> %1092, <4 x i64> %1102, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1143 = shufflevector <4 x i64> %1112, <4 x i64> %1122, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1144 = bitcast <4 x i64> %1142 to <8 x i32>
  %1145 = bitcast <4 x i64> %1143 to <8 x i32>
  %1146 = shufflevector <8 x i32> %1144, <8 x i32> %1145, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1147 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 20
  %1148 = bitcast <4 x i64>* %1147 to <8 x i32>*
  store <8 x i32> %1146, <8 x i32>* %1148, align 32
  %1149 = shufflevector <8 x i32> %1144, <8 x i32> %1145, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1150 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 28
  %1151 = bitcast <4 x i64>* %1150 to <8 x i32>*
  store <8 x i32> %1149, <8 x i32>* %1151, align 32
  %1152 = shufflevector <4 x i64> %1092, <4 x i64> %1102, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1153 = shufflevector <4 x i64> %1112, <4 x i64> %1122, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1154 = bitcast <4 x i64> %1152 to <8 x i32>
  %1155 = bitcast <4 x i64> %1153 to <8 x i32>
  %1156 = shufflevector <8 x i32> %1154, <8 x i32> %1155, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1157 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 22
  %1158 = bitcast <4 x i64>* %1157 to <8 x i32>*
  store <8 x i32> %1156, <8 x i32>* %1158, align 32
  %1159 = shufflevector <8 x i32> %1154, <8 x i32> %1155, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1160 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 30
  %1161 = bitcast <4 x i64>* %1160 to <8 x i32>*
  store <8 x i32> %1159, <8 x i32>* %1161, align 32
  %1162 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 16
  %1163 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 1
  %1164 = bitcast <4 x i64>* %1162 to <8 x i32>*
  %1165 = load <8 x i32>, <8 x i32>* %1164, align 32
  %1166 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 18
  %1167 = bitcast <4 x i64>* %1166 to <8 x i32>*
  %1168 = load <8 x i32>, <8 x i32>* %1167, align 32
  %1169 = shufflevector <8 x i32> %1165, <8 x i32> %1168, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1170 = bitcast <8 x i32> %1169 to <4 x i64>
  %1171 = shufflevector <8 x i32> %1165, <8 x i32> %1168, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1172 = bitcast <8 x i32> %1171 to <4 x i64>
  %1173 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 20
  %1174 = bitcast <4 x i64>* %1173 to <8 x i32>*
  %1175 = load <8 x i32>, <8 x i32>* %1174, align 32
  %1176 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 22
  %1177 = bitcast <4 x i64>* %1176 to <8 x i32>*
  %1178 = load <8 x i32>, <8 x i32>* %1177, align 32
  %1179 = shufflevector <8 x i32> %1175, <8 x i32> %1178, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1180 = bitcast <8 x i32> %1179 to <4 x i64>
  %1181 = shufflevector <8 x i32> %1175, <8 x i32> %1178, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1182 = bitcast <8 x i32> %1181 to <4 x i64>
  %1183 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 24
  %1184 = bitcast <4 x i64>* %1183 to <8 x i32>*
  %1185 = load <8 x i32>, <8 x i32>* %1184, align 32
  %1186 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 26
  %1187 = bitcast <4 x i64>* %1186 to <8 x i32>*
  %1188 = load <8 x i32>, <8 x i32>* %1187, align 32
  %1189 = shufflevector <8 x i32> %1185, <8 x i32> %1188, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1190 = bitcast <8 x i32> %1189 to <4 x i64>
  %1191 = shufflevector <8 x i32> %1185, <8 x i32> %1188, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1192 = bitcast <8 x i32> %1191 to <4 x i64>
  %1193 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 28
  %1194 = bitcast <4 x i64>* %1193 to <8 x i32>*
  %1195 = load <8 x i32>, <8 x i32>* %1194, align 32
  %1196 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 30
  %1197 = bitcast <4 x i64>* %1196 to <8 x i32>*
  %1198 = load <8 x i32>, <8 x i32>* %1197, align 32
  %1199 = shufflevector <8 x i32> %1195, <8 x i32> %1198, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1200 = bitcast <8 x i32> %1199 to <4 x i64>
  %1201 = shufflevector <8 x i32> %1195, <8 x i32> %1198, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1202 = bitcast <8 x i32> %1201 to <4 x i64>
  %1203 = shufflevector <4 x i64> %1170, <4 x i64> %1180, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1204 = shufflevector <4 x i64> %1190, <4 x i64> %1200, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1205 = bitcast <4 x i64> %1203 to <8 x i32>
  %1206 = bitcast <4 x i64> %1204 to <8 x i32>
  %1207 = shufflevector <8 x i32> %1205, <8 x i32> %1206, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1208 = bitcast <4 x i64>* %1163 to <8 x i32>*
  store <8 x i32> %1207, <8 x i32>* %1208, align 32
  %1209 = shufflevector <8 x i32> %1205, <8 x i32> %1206, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1210 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 9
  %1211 = bitcast <4 x i64>* %1210 to <8 x i32>*
  store <8 x i32> %1209, <8 x i32>* %1211, align 32
  %1212 = shufflevector <4 x i64> %1170, <4 x i64> %1180, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1213 = shufflevector <4 x i64> %1190, <4 x i64> %1200, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1214 = bitcast <4 x i64> %1212 to <8 x i32>
  %1215 = bitcast <4 x i64> %1213 to <8 x i32>
  %1216 = shufflevector <8 x i32> %1214, <8 x i32> %1215, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1217 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 3
  %1218 = bitcast <4 x i64>* %1217 to <8 x i32>*
  store <8 x i32> %1216, <8 x i32>* %1218, align 32
  %1219 = shufflevector <8 x i32> %1214, <8 x i32> %1215, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1220 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 11
  %1221 = bitcast <4 x i64>* %1220 to <8 x i32>*
  store <8 x i32> %1219, <8 x i32>* %1221, align 32
  %1222 = shufflevector <4 x i64> %1172, <4 x i64> %1182, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1223 = shufflevector <4 x i64> %1192, <4 x i64> %1202, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1224 = bitcast <4 x i64> %1222 to <8 x i32>
  %1225 = bitcast <4 x i64> %1223 to <8 x i32>
  %1226 = shufflevector <8 x i32> %1224, <8 x i32> %1225, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1227 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 5
  %1228 = bitcast <4 x i64>* %1227 to <8 x i32>*
  store <8 x i32> %1226, <8 x i32>* %1228, align 32
  %1229 = shufflevector <8 x i32> %1224, <8 x i32> %1225, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1230 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 13
  %1231 = bitcast <4 x i64>* %1230 to <8 x i32>*
  store <8 x i32> %1229, <8 x i32>* %1231, align 32
  %1232 = shufflevector <4 x i64> %1172, <4 x i64> %1182, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1233 = shufflevector <4 x i64> %1192, <4 x i64> %1202, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1234 = bitcast <4 x i64> %1232 to <8 x i32>
  %1235 = bitcast <4 x i64> %1233 to <8 x i32>
  %1236 = shufflevector <8 x i32> %1234, <8 x i32> %1235, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1237 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 7
  %1238 = bitcast <4 x i64>* %1237 to <8 x i32>*
  store <8 x i32> %1236, <8 x i32>* %1238, align 32
  %1239 = shufflevector <8 x i32> %1234, <8 x i32> %1235, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1240 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 15
  %1241 = bitcast <4 x i64>* %1240 to <8 x i32>*
  store <8 x i32> %1239, <8 x i32>* %1241, align 32
  %1242 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 17
  %1243 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 17
  %1244 = bitcast <4 x i64>* %1242 to <8 x i32>*
  %1245 = load <8 x i32>, <8 x i32>* %1244, align 32
  %1246 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 19
  %1247 = bitcast <4 x i64>* %1246 to <8 x i32>*
  %1248 = load <8 x i32>, <8 x i32>* %1247, align 32
  %1249 = shufflevector <8 x i32> %1245, <8 x i32> %1248, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1250 = bitcast <8 x i32> %1249 to <4 x i64>
  %1251 = shufflevector <8 x i32> %1245, <8 x i32> %1248, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1252 = bitcast <8 x i32> %1251 to <4 x i64>
  %1253 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 21
  %1254 = bitcast <4 x i64>* %1253 to <8 x i32>*
  %1255 = load <8 x i32>, <8 x i32>* %1254, align 32
  %1256 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 23
  %1257 = bitcast <4 x i64>* %1256 to <8 x i32>*
  %1258 = load <8 x i32>, <8 x i32>* %1257, align 32
  %1259 = shufflevector <8 x i32> %1255, <8 x i32> %1258, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1260 = bitcast <8 x i32> %1259 to <4 x i64>
  %1261 = shufflevector <8 x i32> %1255, <8 x i32> %1258, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1262 = bitcast <8 x i32> %1261 to <4 x i64>
  %1263 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 25
  %1264 = bitcast <4 x i64>* %1263 to <8 x i32>*
  %1265 = load <8 x i32>, <8 x i32>* %1264, align 32
  %1266 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 27
  %1267 = bitcast <4 x i64>* %1266 to <8 x i32>*
  %1268 = load <8 x i32>, <8 x i32>* %1267, align 32
  %1269 = shufflevector <8 x i32> %1265, <8 x i32> %1268, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1270 = bitcast <8 x i32> %1269 to <4 x i64>
  %1271 = shufflevector <8 x i32> %1265, <8 x i32> %1268, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1272 = bitcast <8 x i32> %1271 to <4 x i64>
  %1273 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 29
  %1274 = bitcast <4 x i64>* %1273 to <8 x i32>*
  %1275 = load <8 x i32>, <8 x i32>* %1274, align 32
  %1276 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 31
  %1277 = bitcast <4 x i64>* %1276 to <8 x i32>*
  %1278 = load <8 x i32>, <8 x i32>* %1277, align 32
  %1279 = shufflevector <8 x i32> %1275, <8 x i32> %1278, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1280 = bitcast <8 x i32> %1279 to <4 x i64>
  %1281 = shufflevector <8 x i32> %1275, <8 x i32> %1278, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1282 = bitcast <8 x i32> %1281 to <4 x i64>
  %1283 = shufflevector <4 x i64> %1250, <4 x i64> %1260, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1284 = shufflevector <4 x i64> %1270, <4 x i64> %1280, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1285 = bitcast <4 x i64> %1283 to <8 x i32>
  %1286 = bitcast <4 x i64> %1284 to <8 x i32>
  %1287 = shufflevector <8 x i32> %1285, <8 x i32> %1286, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1288 = bitcast <4 x i64>* %1243 to <8 x i32>*
  store <8 x i32> %1287, <8 x i32>* %1288, align 32
  %1289 = shufflevector <8 x i32> %1285, <8 x i32> %1286, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1290 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 25
  %1291 = bitcast <4 x i64>* %1290 to <8 x i32>*
  store <8 x i32> %1289, <8 x i32>* %1291, align 32
  %1292 = shufflevector <4 x i64> %1250, <4 x i64> %1260, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1293 = shufflevector <4 x i64> %1270, <4 x i64> %1280, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1294 = bitcast <4 x i64> %1292 to <8 x i32>
  %1295 = bitcast <4 x i64> %1293 to <8 x i32>
  %1296 = shufflevector <8 x i32> %1294, <8 x i32> %1295, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1297 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 19
  %1298 = bitcast <4 x i64>* %1297 to <8 x i32>*
  store <8 x i32> %1296, <8 x i32>* %1298, align 32
  %1299 = shufflevector <8 x i32> %1294, <8 x i32> %1295, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1300 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 27
  %1301 = bitcast <4 x i64>* %1300 to <8 x i32>*
  store <8 x i32> %1299, <8 x i32>* %1301, align 32
  %1302 = shufflevector <4 x i64> %1252, <4 x i64> %1262, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1303 = shufflevector <4 x i64> %1272, <4 x i64> %1282, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1304 = bitcast <4 x i64> %1302 to <8 x i32>
  %1305 = bitcast <4 x i64> %1303 to <8 x i32>
  %1306 = shufflevector <8 x i32> %1304, <8 x i32> %1305, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1307 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 21
  %1308 = bitcast <4 x i64>* %1307 to <8 x i32>*
  store <8 x i32> %1306, <8 x i32>* %1308, align 32
  %1309 = shufflevector <8 x i32> %1304, <8 x i32> %1305, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1310 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 29
  %1311 = bitcast <4 x i64>* %1310 to <8 x i32>*
  store <8 x i32> %1309, <8 x i32>* %1311, align 32
  %1312 = shufflevector <4 x i64> %1252, <4 x i64> %1262, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1313 = shufflevector <4 x i64> %1272, <4 x i64> %1282, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1314 = bitcast <4 x i64> %1312 to <8 x i32>
  %1315 = bitcast <4 x i64> %1313 to <8 x i32>
  %1316 = shufflevector <8 x i32> %1314, <8 x i32> %1315, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1317 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 23
  %1318 = bitcast <4 x i64>* %1317 to <8 x i32>*
  store <8 x i32> %1316, <8 x i32>* %1318, align 32
  %1319 = shufflevector <8 x i32> %1314, <8 x i32> %1315, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1320 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 31
  %1321 = bitcast <4 x i64>* %1320 to <8 x i32>*
  store <8 x i32> %1319, <8 x i32>* %1321, align 32
  %1322 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 2, i64 2), align 2
  call void @fdct16_avx2(<4 x i64>* nonnull %846, <4 x i64>* nonnull %939, i8 signext %1322, i32 2, i32 2)
  %1323 = load <8 x i32>, <8 x i32>* %1004, align 32
  %1324 = load <8 x i32>, <8 x i32>* %1007, align 32
  %1325 = shufflevector <8 x i32> %1323, <8 x i32> %1324, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1326 = bitcast <8 x i32> %1325 to <4 x i64>
  %1327 = shufflevector <8 x i32> %1323, <8 x i32> %1324, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1328 = bitcast <8 x i32> %1327 to <4 x i64>
  %1329 = load <8 x i32>, <8 x i32>* %1014, align 32
  %1330 = load <8 x i32>, <8 x i32>* %1017, align 32
  %1331 = shufflevector <8 x i32> %1329, <8 x i32> %1330, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1332 = bitcast <8 x i32> %1331 to <4 x i64>
  %1333 = shufflevector <8 x i32> %1329, <8 x i32> %1330, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1334 = bitcast <8 x i32> %1333 to <4 x i64>
  %1335 = load <8 x i32>, <8 x i32>* %1024, align 32
  %1336 = load <8 x i32>, <8 x i32>* %1027, align 32
  %1337 = shufflevector <8 x i32> %1335, <8 x i32> %1336, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1338 = bitcast <8 x i32> %1337 to <4 x i64>
  %1339 = shufflevector <8 x i32> %1335, <8 x i32> %1336, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1340 = bitcast <8 x i32> %1339 to <4 x i64>
  %1341 = load <8 x i32>, <8 x i32>* %1034, align 32
  %1342 = load <8 x i32>, <8 x i32>* %1037, align 32
  %1343 = shufflevector <8 x i32> %1341, <8 x i32> %1342, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1344 = bitcast <8 x i32> %1343 to <4 x i64>
  %1345 = shufflevector <8 x i32> %1341, <8 x i32> %1342, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1346 = bitcast <8 x i32> %1345 to <4 x i64>
  %1347 = shufflevector <4 x i64> %1326, <4 x i64> %1332, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1348 = shufflevector <4 x i64> %1338, <4 x i64> %1344, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1349 = bitcast <4 x i64> %1347 to <8 x i32>
  %1350 = bitcast <4 x i64> %1348 to <8 x i32>
  %1351 = shufflevector <8 x i32> %1349, <8 x i32> %1350, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1351, <8 x i32>* %1048, align 32
  %1352 = shufflevector <8 x i32> %1349, <8 x i32> %1350, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1352, <8 x i32>* %1051, align 32
  %1353 = shufflevector <4 x i64> %1326, <4 x i64> %1332, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1354 = shufflevector <4 x i64> %1338, <4 x i64> %1344, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1355 = bitcast <4 x i64> %1353 to <8 x i32>
  %1356 = bitcast <4 x i64> %1354 to <8 x i32>
  %1357 = shufflevector <8 x i32> %1355, <8 x i32> %1356, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1357, <8 x i32>* %1058, align 32
  %1358 = shufflevector <8 x i32> %1355, <8 x i32> %1356, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1358, <8 x i32>* %1061, align 32
  %1359 = shufflevector <4 x i64> %1328, <4 x i64> %1334, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1360 = shufflevector <4 x i64> %1340, <4 x i64> %1346, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1361 = bitcast <4 x i64> %1359 to <8 x i32>
  %1362 = bitcast <4 x i64> %1360 to <8 x i32>
  %1363 = shufflevector <8 x i32> %1361, <8 x i32> %1362, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1363, <8 x i32>* %1068, align 32
  %1364 = shufflevector <8 x i32> %1361, <8 x i32> %1362, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1364, <8 x i32>* %1071, align 32
  %1365 = shufflevector <4 x i64> %1328, <4 x i64> %1334, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1366 = shufflevector <4 x i64> %1340, <4 x i64> %1346, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1367 = bitcast <4 x i64> %1365 to <8 x i32>
  %1368 = bitcast <4 x i64> %1366 to <8 x i32>
  %1369 = shufflevector <8 x i32> %1367, <8 x i32> %1368, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1369, <8 x i32>* %1078, align 32
  %1370 = shufflevector <8 x i32> %1367, <8 x i32> %1368, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1370, <8 x i32>* %1081, align 32
  %1371 = load <8 x i32>, <8 x i32>* %1084, align 32
  %1372 = load <8 x i32>, <8 x i32>* %1087, align 32
  %1373 = shufflevector <8 x i32> %1371, <8 x i32> %1372, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1374 = bitcast <8 x i32> %1373 to <4 x i64>
  %1375 = shufflevector <8 x i32> %1371, <8 x i32> %1372, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1376 = bitcast <8 x i32> %1375 to <4 x i64>
  %1377 = load <8 x i32>, <8 x i32>* %1094, align 32
  %1378 = load <8 x i32>, <8 x i32>* %1097, align 32
  %1379 = shufflevector <8 x i32> %1377, <8 x i32> %1378, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1380 = bitcast <8 x i32> %1379 to <4 x i64>
  %1381 = shufflevector <8 x i32> %1377, <8 x i32> %1378, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1382 = bitcast <8 x i32> %1381 to <4 x i64>
  %1383 = load <8 x i32>, <8 x i32>* %1104, align 32
  %1384 = load <8 x i32>, <8 x i32>* %1107, align 32
  %1385 = shufflevector <8 x i32> %1383, <8 x i32> %1384, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1386 = bitcast <8 x i32> %1385 to <4 x i64>
  %1387 = shufflevector <8 x i32> %1383, <8 x i32> %1384, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1388 = bitcast <8 x i32> %1387 to <4 x i64>
  %1389 = load <8 x i32>, <8 x i32>* %1114, align 32
  %1390 = load <8 x i32>, <8 x i32>* %1117, align 32
  %1391 = shufflevector <8 x i32> %1389, <8 x i32> %1390, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1392 = bitcast <8 x i32> %1391 to <4 x i64>
  %1393 = shufflevector <8 x i32> %1389, <8 x i32> %1390, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1394 = bitcast <8 x i32> %1393 to <4 x i64>
  %1395 = shufflevector <4 x i64> %1374, <4 x i64> %1380, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1396 = shufflevector <4 x i64> %1386, <4 x i64> %1392, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1397 = bitcast <4 x i64> %1395 to <8 x i32>
  %1398 = bitcast <4 x i64> %1396 to <8 x i32>
  %1399 = shufflevector <8 x i32> %1397, <8 x i32> %1398, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1399, <8 x i32>* %1128, align 32
  %1400 = shufflevector <8 x i32> %1397, <8 x i32> %1398, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1400, <8 x i32>* %1131, align 32
  %1401 = shufflevector <4 x i64> %1374, <4 x i64> %1380, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1402 = shufflevector <4 x i64> %1386, <4 x i64> %1392, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1403 = bitcast <4 x i64> %1401 to <8 x i32>
  %1404 = bitcast <4 x i64> %1402 to <8 x i32>
  %1405 = shufflevector <8 x i32> %1403, <8 x i32> %1404, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1405, <8 x i32>* %1138, align 32
  %1406 = shufflevector <8 x i32> %1403, <8 x i32> %1404, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1406, <8 x i32>* %1141, align 32
  %1407 = shufflevector <4 x i64> %1376, <4 x i64> %1382, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1408 = shufflevector <4 x i64> %1388, <4 x i64> %1394, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1409 = bitcast <4 x i64> %1407 to <8 x i32>
  %1410 = bitcast <4 x i64> %1408 to <8 x i32>
  %1411 = shufflevector <8 x i32> %1409, <8 x i32> %1410, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1411, <8 x i32>* %1148, align 32
  %1412 = shufflevector <8 x i32> %1409, <8 x i32> %1410, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1412, <8 x i32>* %1151, align 32
  %1413 = shufflevector <4 x i64> %1376, <4 x i64> %1382, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1414 = shufflevector <4 x i64> %1388, <4 x i64> %1394, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1415 = bitcast <4 x i64> %1413 to <8 x i32>
  %1416 = bitcast <4 x i64> %1414 to <8 x i32>
  %1417 = shufflevector <8 x i32> %1415, <8 x i32> %1416, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1417, <8 x i32>* %1158, align 32
  %1418 = shufflevector <8 x i32> %1415, <8 x i32> %1416, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1418, <8 x i32>* %1161, align 32
  %1419 = load <8 x i32>, <8 x i32>* %1164, align 32
  %1420 = load <8 x i32>, <8 x i32>* %1167, align 32
  %1421 = shufflevector <8 x i32> %1419, <8 x i32> %1420, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1422 = bitcast <8 x i32> %1421 to <4 x i64>
  %1423 = shufflevector <8 x i32> %1419, <8 x i32> %1420, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1424 = bitcast <8 x i32> %1423 to <4 x i64>
  %1425 = load <8 x i32>, <8 x i32>* %1174, align 32
  %1426 = load <8 x i32>, <8 x i32>* %1177, align 32
  %1427 = shufflevector <8 x i32> %1425, <8 x i32> %1426, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1428 = bitcast <8 x i32> %1427 to <4 x i64>
  %1429 = shufflevector <8 x i32> %1425, <8 x i32> %1426, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1430 = bitcast <8 x i32> %1429 to <4 x i64>
  %1431 = load <8 x i32>, <8 x i32>* %1184, align 32
  %1432 = load <8 x i32>, <8 x i32>* %1187, align 32
  %1433 = shufflevector <8 x i32> %1431, <8 x i32> %1432, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1434 = bitcast <8 x i32> %1433 to <4 x i64>
  %1435 = shufflevector <8 x i32> %1431, <8 x i32> %1432, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1436 = bitcast <8 x i32> %1435 to <4 x i64>
  %1437 = load <8 x i32>, <8 x i32>* %1194, align 32
  %1438 = load <8 x i32>, <8 x i32>* %1197, align 32
  %1439 = shufflevector <8 x i32> %1437, <8 x i32> %1438, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1440 = bitcast <8 x i32> %1439 to <4 x i64>
  %1441 = shufflevector <8 x i32> %1437, <8 x i32> %1438, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1442 = bitcast <8 x i32> %1441 to <4 x i64>
  %1443 = shufflevector <4 x i64> %1422, <4 x i64> %1428, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1444 = shufflevector <4 x i64> %1434, <4 x i64> %1440, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1445 = bitcast <4 x i64> %1443 to <8 x i32>
  %1446 = bitcast <4 x i64> %1444 to <8 x i32>
  %1447 = shufflevector <8 x i32> %1445, <8 x i32> %1446, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1447, <8 x i32>* %1208, align 32
  %1448 = shufflevector <8 x i32> %1445, <8 x i32> %1446, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1448, <8 x i32>* %1211, align 32
  %1449 = shufflevector <4 x i64> %1422, <4 x i64> %1428, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1450 = shufflevector <4 x i64> %1434, <4 x i64> %1440, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1451 = bitcast <4 x i64> %1449 to <8 x i32>
  %1452 = bitcast <4 x i64> %1450 to <8 x i32>
  %1453 = shufflevector <8 x i32> %1451, <8 x i32> %1452, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1453, <8 x i32>* %1218, align 32
  %1454 = shufflevector <8 x i32> %1451, <8 x i32> %1452, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1454, <8 x i32>* %1221, align 32
  %1455 = shufflevector <4 x i64> %1424, <4 x i64> %1430, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1456 = shufflevector <4 x i64> %1436, <4 x i64> %1442, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1457 = bitcast <4 x i64> %1455 to <8 x i32>
  %1458 = bitcast <4 x i64> %1456 to <8 x i32>
  %1459 = shufflevector <8 x i32> %1457, <8 x i32> %1458, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1459, <8 x i32>* %1228, align 32
  %1460 = shufflevector <8 x i32> %1457, <8 x i32> %1458, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1460, <8 x i32>* %1231, align 32
  %1461 = shufflevector <4 x i64> %1424, <4 x i64> %1430, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1462 = shufflevector <4 x i64> %1436, <4 x i64> %1442, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1463 = bitcast <4 x i64> %1461 to <8 x i32>
  %1464 = bitcast <4 x i64> %1462 to <8 x i32>
  %1465 = shufflevector <8 x i32> %1463, <8 x i32> %1464, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1465, <8 x i32>* %1238, align 32
  %1466 = shufflevector <8 x i32> %1463, <8 x i32> %1464, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1466, <8 x i32>* %1241, align 32
  %1467 = load <8 x i32>, <8 x i32>* %1244, align 32
  %1468 = load <8 x i32>, <8 x i32>* %1247, align 32
  %1469 = shufflevector <8 x i32> %1467, <8 x i32> %1468, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1470 = bitcast <8 x i32> %1469 to <4 x i64>
  %1471 = shufflevector <8 x i32> %1467, <8 x i32> %1468, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1472 = bitcast <8 x i32> %1471 to <4 x i64>
  %1473 = load <8 x i32>, <8 x i32>* %1254, align 32
  %1474 = load <8 x i32>, <8 x i32>* %1257, align 32
  %1475 = shufflevector <8 x i32> %1473, <8 x i32> %1474, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1476 = bitcast <8 x i32> %1475 to <4 x i64>
  %1477 = shufflevector <8 x i32> %1473, <8 x i32> %1474, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1478 = bitcast <8 x i32> %1477 to <4 x i64>
  %1479 = load <8 x i32>, <8 x i32>* %1264, align 32
  %1480 = load <8 x i32>, <8 x i32>* %1267, align 32
  %1481 = shufflevector <8 x i32> %1479, <8 x i32> %1480, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1482 = bitcast <8 x i32> %1481 to <4 x i64>
  %1483 = shufflevector <8 x i32> %1479, <8 x i32> %1480, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1484 = bitcast <8 x i32> %1483 to <4 x i64>
  %1485 = load <8 x i32>, <8 x i32>* %1274, align 32
  %1486 = load <8 x i32>, <8 x i32>* %1277, align 32
  %1487 = shufflevector <8 x i32> %1485, <8 x i32> %1486, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1488 = bitcast <8 x i32> %1487 to <4 x i64>
  %1489 = shufflevector <8 x i32> %1485, <8 x i32> %1486, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1490 = bitcast <8 x i32> %1489 to <4 x i64>
  %1491 = shufflevector <4 x i64> %1470, <4 x i64> %1476, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1492 = shufflevector <4 x i64> %1482, <4 x i64> %1488, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1493 = bitcast <4 x i64> %1491 to <8 x i32>
  %1494 = bitcast <4 x i64> %1492 to <8 x i32>
  %1495 = shufflevector <8 x i32> %1493, <8 x i32> %1494, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1495, <8 x i32>* %1288, align 32
  %1496 = shufflevector <8 x i32> %1493, <8 x i32> %1494, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1496, <8 x i32>* %1291, align 32
  %1497 = shufflevector <4 x i64> %1470, <4 x i64> %1476, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1498 = shufflevector <4 x i64> %1482, <4 x i64> %1488, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1499 = bitcast <4 x i64> %1497 to <8 x i32>
  %1500 = bitcast <4 x i64> %1498 to <8 x i32>
  %1501 = shufflevector <8 x i32> %1499, <8 x i32> %1500, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1501, <8 x i32>* %1298, align 32
  %1502 = shufflevector <8 x i32> %1499, <8 x i32> %1500, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1502, <8 x i32>* %1301, align 32
  %1503 = shufflevector <4 x i64> %1472, <4 x i64> %1478, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1504 = shufflevector <4 x i64> %1484, <4 x i64> %1490, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1505 = bitcast <4 x i64> %1503 to <8 x i32>
  %1506 = bitcast <4 x i64> %1504 to <8 x i32>
  %1507 = shufflevector <8 x i32> %1505, <8 x i32> %1506, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1507, <8 x i32>* %1308, align 32
  %1508 = shufflevector <8 x i32> %1505, <8 x i32> %1506, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1508, <8 x i32>* %1311, align 32
  %1509 = shufflevector <4 x i64> %1472, <4 x i64> %1478, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1510 = shufflevector <4 x i64> %1484, <4 x i64> %1490, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1511 = bitcast <4 x i64> %1509 to <8 x i32>
  %1512 = bitcast <4 x i64> %1510 to <8 x i32>
  %1513 = shufflevector <8 x i32> %1511, <8 x i32> %1512, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1513, <8 x i32>* %1318, align 32
  %1514 = shufflevector <8 x i32> %1511, <8 x i32> %1512, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1514, <8 x i32>* %1321, align 32
  br label %10159

1515:                                             ; preds = %5
  %1516 = bitcast [64 x <4 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %1516) #7
  %1517 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 16
  %1518 = bitcast <4 x i64>* %1517 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %1518, i8 -86, i64 1536, i1 false) #7
  %1519 = sext i32 %2 to i64
  %1520 = bitcast i16* %0 to <4 x i64>*
  %1521 = load <4 x i64>, <4 x i64>* %1520, align 1
  %1522 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 0
  store <4 x i64> %1521, <4 x i64>* %1522, align 32
  %1523 = getelementptr inbounds i16, i16* %0, i64 %1519
  %1524 = bitcast i16* %1523 to <4 x i64>*
  %1525 = load <4 x i64>, <4 x i64>* %1524, align 1
  %1526 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 1
  store <4 x i64> %1525, <4 x i64>* %1526, align 32
  %1527 = shl nsw i64 %1519, 1
  %1528 = getelementptr inbounds i16, i16* %0, i64 %1527
  %1529 = bitcast i16* %1528 to <4 x i64>*
  %1530 = load <4 x i64>, <4 x i64>* %1529, align 1
  %1531 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 2
  store <4 x i64> %1530, <4 x i64>* %1531, align 32
  %1532 = mul nsw i64 %1519, 3
  %1533 = getelementptr inbounds i16, i16* %0, i64 %1532
  %1534 = bitcast i16* %1533 to <4 x i64>*
  %1535 = load <4 x i64>, <4 x i64>* %1534, align 1
  %1536 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 3
  store <4 x i64> %1535, <4 x i64>* %1536, align 32
  %1537 = shl nsw i64 %1519, 2
  %1538 = getelementptr inbounds i16, i16* %0, i64 %1537
  %1539 = bitcast i16* %1538 to <4 x i64>*
  %1540 = load <4 x i64>, <4 x i64>* %1539, align 1
  %1541 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 4
  store <4 x i64> %1540, <4 x i64>* %1541, align 32
  %1542 = mul nsw i64 %1519, 5
  %1543 = getelementptr inbounds i16, i16* %0, i64 %1542
  %1544 = bitcast i16* %1543 to <4 x i64>*
  %1545 = load <4 x i64>, <4 x i64>* %1544, align 1
  %1546 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 5
  store <4 x i64> %1545, <4 x i64>* %1546, align 32
  %1547 = mul nsw i64 %1519, 6
  %1548 = getelementptr inbounds i16, i16* %0, i64 %1547
  %1549 = bitcast i16* %1548 to <4 x i64>*
  %1550 = load <4 x i64>, <4 x i64>* %1549, align 1
  %1551 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 6
  store <4 x i64> %1550, <4 x i64>* %1551, align 32
  %1552 = mul nsw i64 %1519, 7
  %1553 = getelementptr inbounds i16, i16* %0, i64 %1552
  %1554 = bitcast i16* %1553 to <4 x i64>*
  %1555 = load <4 x i64>, <4 x i64>* %1554, align 1
  %1556 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 7
  store <4 x i64> %1555, <4 x i64>* %1556, align 32
  %1557 = shl nsw i64 %1519, 3
  %1558 = getelementptr inbounds i16, i16* %0, i64 %1557
  %1559 = bitcast i16* %1558 to <4 x i64>*
  %1560 = load <4 x i64>, <4 x i64>* %1559, align 1
  %1561 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 8
  store <4 x i64> %1560, <4 x i64>* %1561, align 32
  %1562 = mul nsw i64 %1519, 9
  %1563 = getelementptr inbounds i16, i16* %0, i64 %1562
  %1564 = bitcast i16* %1563 to <4 x i64>*
  %1565 = load <4 x i64>, <4 x i64>* %1564, align 1
  %1566 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 9
  store <4 x i64> %1565, <4 x i64>* %1566, align 32
  %1567 = mul nsw i64 %1519, 10
  %1568 = getelementptr inbounds i16, i16* %0, i64 %1567
  %1569 = bitcast i16* %1568 to <4 x i64>*
  %1570 = load <4 x i64>, <4 x i64>* %1569, align 1
  %1571 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 10
  store <4 x i64> %1570, <4 x i64>* %1571, align 32
  %1572 = mul nsw i64 %1519, 11
  %1573 = getelementptr inbounds i16, i16* %0, i64 %1572
  %1574 = bitcast i16* %1573 to <4 x i64>*
  %1575 = load <4 x i64>, <4 x i64>* %1574, align 1
  %1576 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 11
  store <4 x i64> %1575, <4 x i64>* %1576, align 32
  %1577 = mul nsw i64 %1519, 12
  %1578 = getelementptr inbounds i16, i16* %0, i64 %1577
  %1579 = bitcast i16* %1578 to <4 x i64>*
  %1580 = load <4 x i64>, <4 x i64>* %1579, align 1
  %1581 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 12
  store <4 x i64> %1580, <4 x i64>* %1581, align 32
  %1582 = mul nsw i64 %1519, 13
  %1583 = getelementptr inbounds i16, i16* %0, i64 %1582
  %1584 = bitcast i16* %1583 to <4 x i64>*
  %1585 = load <4 x i64>, <4 x i64>* %1584, align 1
  %1586 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 13
  store <4 x i64> %1585, <4 x i64>* %1586, align 32
  %1587 = mul nsw i64 %1519, 14
  %1588 = getelementptr inbounds i16, i16* %0, i64 %1587
  %1589 = bitcast i16* %1588 to <4 x i64>*
  %1590 = load <4 x i64>, <4 x i64>* %1589, align 1
  %1591 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 14
  store <4 x i64> %1590, <4 x i64>* %1591, align 32
  %1592 = mul nsw i64 %1519, 15
  %1593 = getelementptr inbounds i16, i16* %0, i64 %1592
  %1594 = bitcast i16* %1593 to <4 x i64>*
  %1595 = load <4 x i64>, <4 x i64>* %1594, align 1
  %1596 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 15
  store <4 x i64> %1595, <4 x i64>* %1596, align 32
  %1597 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 0
  %1598 = shufflevector <4 x i64> %1521, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %1599 = bitcast <2 x i64> %1598 to <8 x i16>
  %1600 = sext <8 x i16> %1599 to <8 x i32>
  %1601 = bitcast [32 x <4 x i64>]* %8 to <8 x i32>*
  store <8 x i32> %1600, <8 x i32>* %1601, align 32
  %1602 = bitcast <4 x i64> %1521 to <8 x i32>
  %1603 = shufflevector <8 x i32> %1602, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1604 = bitcast <4 x i32> %1603 to <8 x i16>
  %1605 = sext <8 x i16> %1604 to <8 x i32>
  %1606 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 1
  %1607 = bitcast <4 x i64>* %1606 to <8 x i32>*
  store <8 x i32> %1605, <8 x i32>* %1607, align 32
  br label %1608

1608:                                             ; preds = %1515, %1608
  %1609 = phi i64 [ 1, %1515 ], [ %1625, %1608 ]
  %1610 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 %1609
  %1611 = load <4 x i64>, <4 x i64>* %1610, align 32
  %1612 = shufflevector <4 x i64> %1611, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %1613 = bitcast <2 x i64> %1612 to <8 x i16>
  %1614 = sext <8 x i16> %1613 to <8 x i32>
  %1615 = shl nuw nsw i64 %1609, 1
  %1616 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %1615
  %1617 = bitcast <4 x i64>* %1616 to <8 x i32>*
  store <8 x i32> %1614, <8 x i32>* %1617, align 32
  %1618 = bitcast <4 x i64> %1611 to <8 x i32>
  %1619 = shufflevector <8 x i32> %1618, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1620 = bitcast <4 x i32> %1619 to <8 x i16>
  %1621 = sext <8 x i16> %1620 to <8 x i32>
  %1622 = or i64 %1615, 1
  %1623 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %1622
  %1624 = bitcast <4 x i64>* %1623 to <8 x i32>*
  store <8 x i32> %1621, <8 x i32>* %1624, align 32
  %1625 = add nuw nsw i64 %1609, 1
  %1626 = icmp eq i64 %1625, 16
  br i1 %1626, label %1627, label %1608

1627:                                             ; preds = %1608
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %1516) #7
  %1628 = load i8, i8* %12, align 1
  %1629 = sext i8 %1628 to i32
  %1630 = icmp slt i8 %1628, 0
  br i1 %1630, label %1631, label %1664

1631:                                             ; preds = %1627
  %1632 = sub nsw i32 0, %1629
  %1633 = xor i32 %1629, -1
  %1634 = shl i32 1, %1633
  %1635 = insertelement <8 x i32> undef, i32 %1634, i32 0
  %1636 = shufflevector <8 x i32> %1635, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %1637

1637:                                             ; preds = %1637, %1631
  %1638 = phi i64 [ 0, %1631 ], [ %1662, %1637 ]
  %1639 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %1638
  %1640 = bitcast <4 x i64>* %1639 to <8 x i32>*
  %1641 = load <8 x i32>, <8 x i32>* %1640, align 32
  %1642 = add <8 x i32> %1641, %1636
  %1643 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1642, i32 %1632) #7
  store <8 x i32> %1643, <8 x i32>* %1640, align 32
  %1644 = or i64 %1638, 1
  %1645 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %1644
  %1646 = bitcast <4 x i64>* %1645 to <8 x i32>*
  %1647 = load <8 x i32>, <8 x i32>* %1646, align 32
  %1648 = add <8 x i32> %1647, %1636
  %1649 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1648, i32 %1632) #7
  store <8 x i32> %1649, <8 x i32>* %1646, align 32
  %1650 = or i64 %1638, 2
  %1651 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %1650
  %1652 = bitcast <4 x i64>* %1651 to <8 x i32>*
  %1653 = load <8 x i32>, <8 x i32>* %1652, align 32
  %1654 = add <8 x i32> %1653, %1636
  %1655 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1654, i32 %1632) #7
  store <8 x i32> %1655, <8 x i32>* %1652, align 32
  %1656 = or i64 %1638, 3
  %1657 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %1656
  %1658 = bitcast <4 x i64>* %1657 to <8 x i32>*
  %1659 = load <8 x i32>, <8 x i32>* %1658, align 32
  %1660 = add <8 x i32> %1659, %1636
  %1661 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1660, i32 %1632) #7
  store <8 x i32> %1661, <8 x i32>* %1658, align 32
  %1662 = add nuw nsw i64 %1638, 4
  %1663 = icmp eq i64 %1662, 32
  br i1 %1663, label %1689, label %1637

1664:                                             ; preds = %1627
  %1665 = icmp eq i8 %1628, 0
  br i1 %1665, label %1689, label %1666

1666:                                             ; preds = %1664, %1666
  %1667 = phi i64 [ %1687, %1666 ], [ 0, %1664 ]
  %1668 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %1667
  %1669 = bitcast <4 x i64>* %1668 to <8 x i32>*
  %1670 = load <8 x i32>, <8 x i32>* %1669, align 32
  %1671 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1670, i32 %1629) #7
  store <8 x i32> %1671, <8 x i32>* %1669, align 32
  %1672 = or i64 %1667, 1
  %1673 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %1672
  %1674 = bitcast <4 x i64>* %1673 to <8 x i32>*
  %1675 = load <8 x i32>, <8 x i32>* %1674, align 32
  %1676 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1675, i32 %1629) #7
  store <8 x i32> %1676, <8 x i32>* %1674, align 32
  %1677 = or i64 %1667, 2
  %1678 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %1677
  %1679 = bitcast <4 x i64>* %1678 to <8 x i32>*
  %1680 = load <8 x i32>, <8 x i32>* %1679, align 32
  %1681 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1680, i32 %1629) #7
  store <8 x i32> %1681, <8 x i32>* %1679, align 32
  %1682 = or i64 %1667, 3
  %1683 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %1682
  %1684 = bitcast <4 x i64>* %1683 to <8 x i32>*
  %1685 = load <8 x i32>, <8 x i32>* %1684, align 32
  %1686 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1685, i32 %1629) #7
  store <8 x i32> %1686, <8 x i32>* %1684, align 32
  %1687 = add nuw nsw i64 %1667, 4
  %1688 = icmp eq i64 %1687, 32
  br i1 %1688, label %1689, label %1666

1689:                                             ; preds = %1666, %1637, %1664
  %1690 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 0
  %1691 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 2, i64 2), align 2
  call void @fdct16_avx2(<4 x i64>* nonnull %1597, <4 x i64>* nonnull %1690, i8 signext %1691, i32 2, i32 2)
  %1692 = getelementptr inbounds i8, i8* %12, i64 1
  %1693 = load i8, i8* %1692, align 1
  %1694 = sext i8 %1693 to i32
  %1695 = icmp slt i8 %1693, 0
  br i1 %1695, label %1696, label %1729

1696:                                             ; preds = %1689
  %1697 = sub nsw i32 0, %1694
  %1698 = xor i32 %1694, -1
  %1699 = shl i32 1, %1698
  %1700 = insertelement <8 x i32> undef, i32 %1699, i32 0
  %1701 = shufflevector <8 x i32> %1700, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %1702

1702:                                             ; preds = %1702, %1696
  %1703 = phi i64 [ 0, %1696 ], [ %1727, %1702 ]
  %1704 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %1703
  %1705 = bitcast <4 x i64>* %1704 to <8 x i32>*
  %1706 = load <8 x i32>, <8 x i32>* %1705, align 32
  %1707 = add <8 x i32> %1706, %1701
  %1708 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1707, i32 %1697) #7
  store <8 x i32> %1708, <8 x i32>* %1705, align 32
  %1709 = or i64 %1703, 1
  %1710 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %1709
  %1711 = bitcast <4 x i64>* %1710 to <8 x i32>*
  %1712 = load <8 x i32>, <8 x i32>* %1711, align 32
  %1713 = add <8 x i32> %1712, %1701
  %1714 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1713, i32 %1697) #7
  store <8 x i32> %1714, <8 x i32>* %1711, align 32
  %1715 = or i64 %1703, 2
  %1716 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %1715
  %1717 = bitcast <4 x i64>* %1716 to <8 x i32>*
  %1718 = load <8 x i32>, <8 x i32>* %1717, align 32
  %1719 = add <8 x i32> %1718, %1701
  %1720 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1719, i32 %1697) #7
  store <8 x i32> %1720, <8 x i32>* %1717, align 32
  %1721 = or i64 %1703, 3
  %1722 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %1721
  %1723 = bitcast <4 x i64>* %1722 to <8 x i32>*
  %1724 = load <8 x i32>, <8 x i32>* %1723, align 32
  %1725 = add <8 x i32> %1724, %1701
  %1726 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1725, i32 %1697) #7
  store <8 x i32> %1726, <8 x i32>* %1723, align 32
  %1727 = add nuw nsw i64 %1703, 4
  %1728 = icmp eq i64 %1727, 32
  br i1 %1728, label %1754, label %1702

1729:                                             ; preds = %1689
  %1730 = icmp eq i8 %1693, 0
  br i1 %1730, label %1754, label %1731

1731:                                             ; preds = %1729, %1731
  %1732 = phi i64 [ %1752, %1731 ], [ 0, %1729 ]
  %1733 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %1732
  %1734 = bitcast <4 x i64>* %1733 to <8 x i32>*
  %1735 = load <8 x i32>, <8 x i32>* %1734, align 32
  %1736 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1735, i32 %1694) #7
  store <8 x i32> %1736, <8 x i32>* %1734, align 32
  %1737 = or i64 %1732, 1
  %1738 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %1737
  %1739 = bitcast <4 x i64>* %1738 to <8 x i32>*
  %1740 = load <8 x i32>, <8 x i32>* %1739, align 32
  %1741 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1740, i32 %1694) #7
  store <8 x i32> %1741, <8 x i32>* %1739, align 32
  %1742 = or i64 %1732, 2
  %1743 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %1742
  %1744 = bitcast <4 x i64>* %1743 to <8 x i32>*
  %1745 = load <8 x i32>, <8 x i32>* %1744, align 32
  %1746 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1745, i32 %1694) #7
  store <8 x i32> %1746, <8 x i32>* %1744, align 32
  %1747 = or i64 %1732, 3
  %1748 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %1747
  %1749 = bitcast <4 x i64>* %1748 to <8 x i32>*
  %1750 = load <8 x i32>, <8 x i32>* %1749, align 32
  %1751 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1750, i32 %1694) #7
  store <8 x i32> %1751, <8 x i32>* %1749, align 32
  %1752 = add nuw nsw i64 %1732, 4
  %1753 = icmp eq i64 %1752, 32
  br i1 %1753, label %1754, label %1731

1754:                                             ; preds = %1731, %1702, %1729
  %1755 = bitcast [32 x <4 x i64>]* %10 to <8 x i32>*
  %1756 = load <8 x i32>, <8 x i32>* %1755, align 32
  %1757 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 2
  %1758 = bitcast <4 x i64>* %1757 to <8 x i32>*
  %1759 = load <8 x i32>, <8 x i32>* %1758, align 32
  %1760 = shufflevector <8 x i32> %1756, <8 x i32> %1759, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1761 = bitcast <8 x i32> %1760 to <4 x i64>
  %1762 = shufflevector <8 x i32> %1756, <8 x i32> %1759, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1763 = bitcast <8 x i32> %1762 to <4 x i64>
  %1764 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 4
  %1765 = bitcast <4 x i64>* %1764 to <8 x i32>*
  %1766 = load <8 x i32>, <8 x i32>* %1765, align 32
  %1767 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 6
  %1768 = bitcast <4 x i64>* %1767 to <8 x i32>*
  %1769 = load <8 x i32>, <8 x i32>* %1768, align 32
  %1770 = shufflevector <8 x i32> %1766, <8 x i32> %1769, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1771 = bitcast <8 x i32> %1770 to <4 x i64>
  %1772 = shufflevector <8 x i32> %1766, <8 x i32> %1769, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1773 = bitcast <8 x i32> %1772 to <4 x i64>
  %1774 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 8
  %1775 = bitcast <4 x i64>* %1774 to <8 x i32>*
  %1776 = load <8 x i32>, <8 x i32>* %1775, align 32
  %1777 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 10
  %1778 = bitcast <4 x i64>* %1777 to <8 x i32>*
  %1779 = load <8 x i32>, <8 x i32>* %1778, align 32
  %1780 = shufflevector <8 x i32> %1776, <8 x i32> %1779, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1781 = bitcast <8 x i32> %1780 to <4 x i64>
  %1782 = shufflevector <8 x i32> %1776, <8 x i32> %1779, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1783 = bitcast <8 x i32> %1782 to <4 x i64>
  %1784 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 12
  %1785 = bitcast <4 x i64>* %1784 to <8 x i32>*
  %1786 = load <8 x i32>, <8 x i32>* %1785, align 32
  %1787 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 14
  %1788 = bitcast <4 x i64>* %1787 to <8 x i32>*
  %1789 = load <8 x i32>, <8 x i32>* %1788, align 32
  %1790 = shufflevector <8 x i32> %1786, <8 x i32> %1789, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1791 = bitcast <8 x i32> %1790 to <4 x i64>
  %1792 = shufflevector <8 x i32> %1786, <8 x i32> %1789, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1793 = bitcast <8 x i32> %1792 to <4 x i64>
  %1794 = shufflevector <4 x i64> %1761, <4 x i64> %1771, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1795 = shufflevector <4 x i64> %1781, <4 x i64> %1791, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1796 = bitcast <4 x i64> %1794 to <8 x i32>
  %1797 = bitcast <4 x i64> %1795 to <8 x i32>
  %1798 = shufflevector <8 x i32> %1796, <8 x i32> %1797, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1799 = bitcast [32 x <4 x i64>]* %8 to <8 x i32>*
  store <8 x i32> %1798, <8 x i32>* %1799, align 32
  %1800 = shufflevector <8 x i32> %1796, <8 x i32> %1797, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1801 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 8
  %1802 = bitcast <4 x i64>* %1801 to <8 x i32>*
  store <8 x i32> %1800, <8 x i32>* %1802, align 32
  %1803 = shufflevector <4 x i64> %1761, <4 x i64> %1771, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1804 = shufflevector <4 x i64> %1781, <4 x i64> %1791, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1805 = bitcast <4 x i64> %1803 to <8 x i32>
  %1806 = bitcast <4 x i64> %1804 to <8 x i32>
  %1807 = shufflevector <8 x i32> %1805, <8 x i32> %1806, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1808 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 2
  %1809 = bitcast <4 x i64>* %1808 to <8 x i32>*
  store <8 x i32> %1807, <8 x i32>* %1809, align 32
  %1810 = shufflevector <8 x i32> %1805, <8 x i32> %1806, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1811 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 10
  %1812 = bitcast <4 x i64>* %1811 to <8 x i32>*
  store <8 x i32> %1810, <8 x i32>* %1812, align 32
  %1813 = shufflevector <4 x i64> %1763, <4 x i64> %1773, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1814 = shufflevector <4 x i64> %1783, <4 x i64> %1793, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1815 = bitcast <4 x i64> %1813 to <8 x i32>
  %1816 = bitcast <4 x i64> %1814 to <8 x i32>
  %1817 = shufflevector <8 x i32> %1815, <8 x i32> %1816, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1818 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 4
  %1819 = bitcast <4 x i64>* %1818 to <8 x i32>*
  store <8 x i32> %1817, <8 x i32>* %1819, align 32
  %1820 = shufflevector <8 x i32> %1815, <8 x i32> %1816, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1821 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 12
  %1822 = bitcast <4 x i64>* %1821 to <8 x i32>*
  store <8 x i32> %1820, <8 x i32>* %1822, align 32
  %1823 = shufflevector <4 x i64> %1763, <4 x i64> %1773, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1824 = shufflevector <4 x i64> %1783, <4 x i64> %1793, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1825 = bitcast <4 x i64> %1823 to <8 x i32>
  %1826 = bitcast <4 x i64> %1824 to <8 x i32>
  %1827 = shufflevector <8 x i32> %1825, <8 x i32> %1826, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1828 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 6
  %1829 = bitcast <4 x i64>* %1828 to <8 x i32>*
  store <8 x i32> %1827, <8 x i32>* %1829, align 32
  %1830 = shufflevector <8 x i32> %1825, <8 x i32> %1826, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1831 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 14
  %1832 = bitcast <4 x i64>* %1831 to <8 x i32>*
  store <8 x i32> %1830, <8 x i32>* %1832, align 32
  %1833 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 1
  %1834 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 16
  %1835 = bitcast <4 x i64>* %1833 to <8 x i32>*
  %1836 = load <8 x i32>, <8 x i32>* %1835, align 32
  %1837 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 3
  %1838 = bitcast <4 x i64>* %1837 to <8 x i32>*
  %1839 = load <8 x i32>, <8 x i32>* %1838, align 32
  %1840 = shufflevector <8 x i32> %1836, <8 x i32> %1839, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1841 = bitcast <8 x i32> %1840 to <4 x i64>
  %1842 = shufflevector <8 x i32> %1836, <8 x i32> %1839, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1843 = bitcast <8 x i32> %1842 to <4 x i64>
  %1844 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 5
  %1845 = bitcast <4 x i64>* %1844 to <8 x i32>*
  %1846 = load <8 x i32>, <8 x i32>* %1845, align 32
  %1847 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 7
  %1848 = bitcast <4 x i64>* %1847 to <8 x i32>*
  %1849 = load <8 x i32>, <8 x i32>* %1848, align 32
  %1850 = shufflevector <8 x i32> %1846, <8 x i32> %1849, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1851 = bitcast <8 x i32> %1850 to <4 x i64>
  %1852 = shufflevector <8 x i32> %1846, <8 x i32> %1849, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1853 = bitcast <8 x i32> %1852 to <4 x i64>
  %1854 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 9
  %1855 = bitcast <4 x i64>* %1854 to <8 x i32>*
  %1856 = load <8 x i32>, <8 x i32>* %1855, align 32
  %1857 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 11
  %1858 = bitcast <4 x i64>* %1857 to <8 x i32>*
  %1859 = load <8 x i32>, <8 x i32>* %1858, align 32
  %1860 = shufflevector <8 x i32> %1856, <8 x i32> %1859, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1861 = bitcast <8 x i32> %1860 to <4 x i64>
  %1862 = shufflevector <8 x i32> %1856, <8 x i32> %1859, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1863 = bitcast <8 x i32> %1862 to <4 x i64>
  %1864 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 13
  %1865 = bitcast <4 x i64>* %1864 to <8 x i32>*
  %1866 = load <8 x i32>, <8 x i32>* %1865, align 32
  %1867 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 15
  %1868 = bitcast <4 x i64>* %1867 to <8 x i32>*
  %1869 = load <8 x i32>, <8 x i32>* %1868, align 32
  %1870 = shufflevector <8 x i32> %1866, <8 x i32> %1869, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1871 = bitcast <8 x i32> %1870 to <4 x i64>
  %1872 = shufflevector <8 x i32> %1866, <8 x i32> %1869, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1873 = bitcast <8 x i32> %1872 to <4 x i64>
  %1874 = shufflevector <4 x i64> %1841, <4 x i64> %1851, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1875 = shufflevector <4 x i64> %1861, <4 x i64> %1871, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1876 = bitcast <4 x i64> %1874 to <8 x i32>
  %1877 = bitcast <4 x i64> %1875 to <8 x i32>
  %1878 = shufflevector <8 x i32> %1876, <8 x i32> %1877, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1879 = bitcast <4 x i64>* %1834 to <8 x i32>*
  store <8 x i32> %1878, <8 x i32>* %1879, align 32
  %1880 = shufflevector <8 x i32> %1876, <8 x i32> %1877, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1881 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 24
  %1882 = bitcast <4 x i64>* %1881 to <8 x i32>*
  store <8 x i32> %1880, <8 x i32>* %1882, align 32
  %1883 = shufflevector <4 x i64> %1841, <4 x i64> %1851, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1884 = shufflevector <4 x i64> %1861, <4 x i64> %1871, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1885 = bitcast <4 x i64> %1883 to <8 x i32>
  %1886 = bitcast <4 x i64> %1884 to <8 x i32>
  %1887 = shufflevector <8 x i32> %1885, <8 x i32> %1886, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1888 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 18
  %1889 = bitcast <4 x i64>* %1888 to <8 x i32>*
  store <8 x i32> %1887, <8 x i32>* %1889, align 32
  %1890 = shufflevector <8 x i32> %1885, <8 x i32> %1886, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1891 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 26
  %1892 = bitcast <4 x i64>* %1891 to <8 x i32>*
  store <8 x i32> %1890, <8 x i32>* %1892, align 32
  %1893 = shufflevector <4 x i64> %1843, <4 x i64> %1853, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1894 = shufflevector <4 x i64> %1863, <4 x i64> %1873, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1895 = bitcast <4 x i64> %1893 to <8 x i32>
  %1896 = bitcast <4 x i64> %1894 to <8 x i32>
  %1897 = shufflevector <8 x i32> %1895, <8 x i32> %1896, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1898 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 20
  %1899 = bitcast <4 x i64>* %1898 to <8 x i32>*
  store <8 x i32> %1897, <8 x i32>* %1899, align 32
  %1900 = shufflevector <8 x i32> %1895, <8 x i32> %1896, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1901 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 28
  %1902 = bitcast <4 x i64>* %1901 to <8 x i32>*
  store <8 x i32> %1900, <8 x i32>* %1902, align 32
  %1903 = shufflevector <4 x i64> %1843, <4 x i64> %1853, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1904 = shufflevector <4 x i64> %1863, <4 x i64> %1873, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1905 = bitcast <4 x i64> %1903 to <8 x i32>
  %1906 = bitcast <4 x i64> %1904 to <8 x i32>
  %1907 = shufflevector <8 x i32> %1905, <8 x i32> %1906, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1908 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 22
  %1909 = bitcast <4 x i64>* %1908 to <8 x i32>*
  store <8 x i32> %1907, <8 x i32>* %1909, align 32
  %1910 = shufflevector <8 x i32> %1905, <8 x i32> %1906, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1911 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 30
  %1912 = bitcast <4 x i64>* %1911 to <8 x i32>*
  store <8 x i32> %1910, <8 x i32>* %1912, align 32
  %1913 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 16
  %1914 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 1
  %1915 = bitcast <4 x i64>* %1913 to <8 x i32>*
  %1916 = load <8 x i32>, <8 x i32>* %1915, align 32
  %1917 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 18
  %1918 = bitcast <4 x i64>* %1917 to <8 x i32>*
  %1919 = load <8 x i32>, <8 x i32>* %1918, align 32
  %1920 = shufflevector <8 x i32> %1916, <8 x i32> %1919, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1921 = bitcast <8 x i32> %1920 to <4 x i64>
  %1922 = shufflevector <8 x i32> %1916, <8 x i32> %1919, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1923 = bitcast <8 x i32> %1922 to <4 x i64>
  %1924 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 20
  %1925 = bitcast <4 x i64>* %1924 to <8 x i32>*
  %1926 = load <8 x i32>, <8 x i32>* %1925, align 32
  %1927 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 22
  %1928 = bitcast <4 x i64>* %1927 to <8 x i32>*
  %1929 = load <8 x i32>, <8 x i32>* %1928, align 32
  %1930 = shufflevector <8 x i32> %1926, <8 x i32> %1929, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1931 = bitcast <8 x i32> %1930 to <4 x i64>
  %1932 = shufflevector <8 x i32> %1926, <8 x i32> %1929, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1933 = bitcast <8 x i32> %1932 to <4 x i64>
  %1934 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 24
  %1935 = bitcast <4 x i64>* %1934 to <8 x i32>*
  %1936 = load <8 x i32>, <8 x i32>* %1935, align 32
  %1937 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 26
  %1938 = bitcast <4 x i64>* %1937 to <8 x i32>*
  %1939 = load <8 x i32>, <8 x i32>* %1938, align 32
  %1940 = shufflevector <8 x i32> %1936, <8 x i32> %1939, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1941 = bitcast <8 x i32> %1940 to <4 x i64>
  %1942 = shufflevector <8 x i32> %1936, <8 x i32> %1939, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1943 = bitcast <8 x i32> %1942 to <4 x i64>
  %1944 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 28
  %1945 = bitcast <4 x i64>* %1944 to <8 x i32>*
  %1946 = load <8 x i32>, <8 x i32>* %1945, align 32
  %1947 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 30
  %1948 = bitcast <4 x i64>* %1947 to <8 x i32>*
  %1949 = load <8 x i32>, <8 x i32>* %1948, align 32
  %1950 = shufflevector <8 x i32> %1946, <8 x i32> %1949, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1951 = bitcast <8 x i32> %1950 to <4 x i64>
  %1952 = shufflevector <8 x i32> %1946, <8 x i32> %1949, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1953 = bitcast <8 x i32> %1952 to <4 x i64>
  %1954 = shufflevector <4 x i64> %1921, <4 x i64> %1931, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1955 = shufflevector <4 x i64> %1941, <4 x i64> %1951, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1956 = bitcast <4 x i64> %1954 to <8 x i32>
  %1957 = bitcast <4 x i64> %1955 to <8 x i32>
  %1958 = shufflevector <8 x i32> %1956, <8 x i32> %1957, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1959 = bitcast <4 x i64>* %1914 to <8 x i32>*
  store <8 x i32> %1958, <8 x i32>* %1959, align 32
  %1960 = shufflevector <8 x i32> %1956, <8 x i32> %1957, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1961 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 9
  %1962 = bitcast <4 x i64>* %1961 to <8 x i32>*
  store <8 x i32> %1960, <8 x i32>* %1962, align 32
  %1963 = shufflevector <4 x i64> %1921, <4 x i64> %1931, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1964 = shufflevector <4 x i64> %1941, <4 x i64> %1951, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1965 = bitcast <4 x i64> %1963 to <8 x i32>
  %1966 = bitcast <4 x i64> %1964 to <8 x i32>
  %1967 = shufflevector <8 x i32> %1965, <8 x i32> %1966, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1968 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 3
  %1969 = bitcast <4 x i64>* %1968 to <8 x i32>*
  store <8 x i32> %1967, <8 x i32>* %1969, align 32
  %1970 = shufflevector <8 x i32> %1965, <8 x i32> %1966, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1971 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 11
  %1972 = bitcast <4 x i64>* %1971 to <8 x i32>*
  store <8 x i32> %1970, <8 x i32>* %1972, align 32
  %1973 = shufflevector <4 x i64> %1923, <4 x i64> %1933, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1974 = shufflevector <4 x i64> %1943, <4 x i64> %1953, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1975 = bitcast <4 x i64> %1973 to <8 x i32>
  %1976 = bitcast <4 x i64> %1974 to <8 x i32>
  %1977 = shufflevector <8 x i32> %1975, <8 x i32> %1976, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1978 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 5
  %1979 = bitcast <4 x i64>* %1978 to <8 x i32>*
  store <8 x i32> %1977, <8 x i32>* %1979, align 32
  %1980 = shufflevector <8 x i32> %1975, <8 x i32> %1976, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1981 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 13
  %1982 = bitcast <4 x i64>* %1981 to <8 x i32>*
  store <8 x i32> %1980, <8 x i32>* %1982, align 32
  %1983 = shufflevector <4 x i64> %1923, <4 x i64> %1933, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1984 = shufflevector <4 x i64> %1943, <4 x i64> %1953, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1985 = bitcast <4 x i64> %1983 to <8 x i32>
  %1986 = bitcast <4 x i64> %1984 to <8 x i32>
  %1987 = shufflevector <8 x i32> %1985, <8 x i32> %1986, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1988 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 7
  %1989 = bitcast <4 x i64>* %1988 to <8 x i32>*
  store <8 x i32> %1987, <8 x i32>* %1989, align 32
  %1990 = shufflevector <8 x i32> %1985, <8 x i32> %1986, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1991 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 15
  %1992 = bitcast <4 x i64>* %1991 to <8 x i32>*
  store <8 x i32> %1990, <8 x i32>* %1992, align 32
  %1993 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 17
  %1994 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 17
  %1995 = bitcast <4 x i64>* %1993 to <8 x i32>*
  %1996 = load <8 x i32>, <8 x i32>* %1995, align 32
  %1997 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 19
  %1998 = bitcast <4 x i64>* %1997 to <8 x i32>*
  %1999 = load <8 x i32>, <8 x i32>* %1998, align 32
  %2000 = shufflevector <8 x i32> %1996, <8 x i32> %1999, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2001 = bitcast <8 x i32> %2000 to <4 x i64>
  %2002 = shufflevector <8 x i32> %1996, <8 x i32> %1999, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2003 = bitcast <8 x i32> %2002 to <4 x i64>
  %2004 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 21
  %2005 = bitcast <4 x i64>* %2004 to <8 x i32>*
  %2006 = load <8 x i32>, <8 x i32>* %2005, align 32
  %2007 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 23
  %2008 = bitcast <4 x i64>* %2007 to <8 x i32>*
  %2009 = load <8 x i32>, <8 x i32>* %2008, align 32
  %2010 = shufflevector <8 x i32> %2006, <8 x i32> %2009, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2011 = bitcast <8 x i32> %2010 to <4 x i64>
  %2012 = shufflevector <8 x i32> %2006, <8 x i32> %2009, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2013 = bitcast <8 x i32> %2012 to <4 x i64>
  %2014 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 25
  %2015 = bitcast <4 x i64>* %2014 to <8 x i32>*
  %2016 = load <8 x i32>, <8 x i32>* %2015, align 32
  %2017 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 27
  %2018 = bitcast <4 x i64>* %2017 to <8 x i32>*
  %2019 = load <8 x i32>, <8 x i32>* %2018, align 32
  %2020 = shufflevector <8 x i32> %2016, <8 x i32> %2019, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2021 = bitcast <8 x i32> %2020 to <4 x i64>
  %2022 = shufflevector <8 x i32> %2016, <8 x i32> %2019, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2023 = bitcast <8 x i32> %2022 to <4 x i64>
  %2024 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 29
  %2025 = bitcast <4 x i64>* %2024 to <8 x i32>*
  %2026 = load <8 x i32>, <8 x i32>* %2025, align 32
  %2027 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 31
  %2028 = bitcast <4 x i64>* %2027 to <8 x i32>*
  %2029 = load <8 x i32>, <8 x i32>* %2028, align 32
  %2030 = shufflevector <8 x i32> %2026, <8 x i32> %2029, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2031 = bitcast <8 x i32> %2030 to <4 x i64>
  %2032 = shufflevector <8 x i32> %2026, <8 x i32> %2029, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2033 = bitcast <8 x i32> %2032 to <4 x i64>
  %2034 = shufflevector <4 x i64> %2001, <4 x i64> %2011, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2035 = shufflevector <4 x i64> %2021, <4 x i64> %2031, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2036 = bitcast <4 x i64> %2034 to <8 x i32>
  %2037 = bitcast <4 x i64> %2035 to <8 x i32>
  %2038 = shufflevector <8 x i32> %2036, <8 x i32> %2037, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %2039 = bitcast <4 x i64>* %1994 to <8 x i32>*
  store <8 x i32> %2038, <8 x i32>* %2039, align 32
  %2040 = shufflevector <8 x i32> %2036, <8 x i32> %2037, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %2041 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 25
  %2042 = bitcast <4 x i64>* %2041 to <8 x i32>*
  store <8 x i32> %2040, <8 x i32>* %2042, align 32
  %2043 = shufflevector <4 x i64> %2001, <4 x i64> %2011, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2044 = shufflevector <4 x i64> %2021, <4 x i64> %2031, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2045 = bitcast <4 x i64> %2043 to <8 x i32>
  %2046 = bitcast <4 x i64> %2044 to <8 x i32>
  %2047 = shufflevector <8 x i32> %2045, <8 x i32> %2046, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %2048 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 19
  %2049 = bitcast <4 x i64>* %2048 to <8 x i32>*
  store <8 x i32> %2047, <8 x i32>* %2049, align 32
  %2050 = shufflevector <8 x i32> %2045, <8 x i32> %2046, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %2051 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 27
  %2052 = bitcast <4 x i64>* %2051 to <8 x i32>*
  store <8 x i32> %2050, <8 x i32>* %2052, align 32
  %2053 = shufflevector <4 x i64> %2003, <4 x i64> %2013, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2054 = shufflevector <4 x i64> %2023, <4 x i64> %2033, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2055 = bitcast <4 x i64> %2053 to <8 x i32>
  %2056 = bitcast <4 x i64> %2054 to <8 x i32>
  %2057 = shufflevector <8 x i32> %2055, <8 x i32> %2056, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %2058 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 21
  %2059 = bitcast <4 x i64>* %2058 to <8 x i32>*
  store <8 x i32> %2057, <8 x i32>* %2059, align 32
  %2060 = shufflevector <8 x i32> %2055, <8 x i32> %2056, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %2061 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 29
  %2062 = bitcast <4 x i64>* %2061 to <8 x i32>*
  store <8 x i32> %2060, <8 x i32>* %2062, align 32
  %2063 = shufflevector <4 x i64> %2003, <4 x i64> %2013, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2064 = shufflevector <4 x i64> %2023, <4 x i64> %2033, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2065 = bitcast <4 x i64> %2063 to <8 x i32>
  %2066 = bitcast <4 x i64> %2064 to <8 x i32>
  %2067 = shufflevector <8 x i32> %2065, <8 x i32> %2066, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %2068 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 23
  %2069 = bitcast <4 x i64>* %2068 to <8 x i32>*
  store <8 x i32> %2067, <8 x i32>* %2069, align 32
  %2070 = shufflevector <8 x i32> %2065, <8 x i32> %2066, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %2071 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 31
  %2072 = bitcast <4 x i64>* %2071 to <8 x i32>*
  store <8 x i32> %2070, <8 x i32>* %2072, align 32
  %2073 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 2, i64 2), align 2
  call void @fadst16_avx2(<4 x i64>* nonnull %1597, <4 x i64>* nonnull %1690, i8 signext %2073, i32 2, i32 2)
  %2074 = load <8 x i32>, <8 x i32>* %1755, align 32
  %2075 = load <8 x i32>, <8 x i32>* %1758, align 32
  %2076 = shufflevector <8 x i32> %2074, <8 x i32> %2075, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2077 = bitcast <8 x i32> %2076 to <4 x i64>
  %2078 = shufflevector <8 x i32> %2074, <8 x i32> %2075, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2079 = bitcast <8 x i32> %2078 to <4 x i64>
  %2080 = load <8 x i32>, <8 x i32>* %1765, align 32
  %2081 = load <8 x i32>, <8 x i32>* %1768, align 32
  %2082 = shufflevector <8 x i32> %2080, <8 x i32> %2081, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2083 = bitcast <8 x i32> %2082 to <4 x i64>
  %2084 = shufflevector <8 x i32> %2080, <8 x i32> %2081, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2085 = bitcast <8 x i32> %2084 to <4 x i64>
  %2086 = load <8 x i32>, <8 x i32>* %1775, align 32
  %2087 = load <8 x i32>, <8 x i32>* %1778, align 32
  %2088 = shufflevector <8 x i32> %2086, <8 x i32> %2087, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2089 = bitcast <8 x i32> %2088 to <4 x i64>
  %2090 = shufflevector <8 x i32> %2086, <8 x i32> %2087, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2091 = bitcast <8 x i32> %2090 to <4 x i64>
  %2092 = load <8 x i32>, <8 x i32>* %1785, align 32
  %2093 = load <8 x i32>, <8 x i32>* %1788, align 32
  %2094 = shufflevector <8 x i32> %2092, <8 x i32> %2093, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2095 = bitcast <8 x i32> %2094 to <4 x i64>
  %2096 = shufflevector <8 x i32> %2092, <8 x i32> %2093, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2097 = bitcast <8 x i32> %2096 to <4 x i64>
  %2098 = shufflevector <4 x i64> %2077, <4 x i64> %2083, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2099 = shufflevector <4 x i64> %2089, <4 x i64> %2095, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2100 = bitcast <4 x i64> %2098 to <8 x i32>
  %2101 = bitcast <4 x i64> %2099 to <8 x i32>
  %2102 = shufflevector <8 x i32> %2100, <8 x i32> %2101, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2102, <8 x i32>* %1799, align 32
  %2103 = shufflevector <8 x i32> %2100, <8 x i32> %2101, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2103, <8 x i32>* %1802, align 32
  %2104 = shufflevector <4 x i64> %2077, <4 x i64> %2083, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2105 = shufflevector <4 x i64> %2089, <4 x i64> %2095, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2106 = bitcast <4 x i64> %2104 to <8 x i32>
  %2107 = bitcast <4 x i64> %2105 to <8 x i32>
  %2108 = shufflevector <8 x i32> %2106, <8 x i32> %2107, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2108, <8 x i32>* %1809, align 32
  %2109 = shufflevector <8 x i32> %2106, <8 x i32> %2107, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2109, <8 x i32>* %1812, align 32
  %2110 = shufflevector <4 x i64> %2079, <4 x i64> %2085, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2111 = shufflevector <4 x i64> %2091, <4 x i64> %2097, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2112 = bitcast <4 x i64> %2110 to <8 x i32>
  %2113 = bitcast <4 x i64> %2111 to <8 x i32>
  %2114 = shufflevector <8 x i32> %2112, <8 x i32> %2113, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2114, <8 x i32>* %1819, align 32
  %2115 = shufflevector <8 x i32> %2112, <8 x i32> %2113, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2115, <8 x i32>* %1822, align 32
  %2116 = shufflevector <4 x i64> %2079, <4 x i64> %2085, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2117 = shufflevector <4 x i64> %2091, <4 x i64> %2097, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2118 = bitcast <4 x i64> %2116 to <8 x i32>
  %2119 = bitcast <4 x i64> %2117 to <8 x i32>
  %2120 = shufflevector <8 x i32> %2118, <8 x i32> %2119, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2120, <8 x i32>* %1829, align 32
  %2121 = shufflevector <8 x i32> %2118, <8 x i32> %2119, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2121, <8 x i32>* %1832, align 32
  %2122 = load <8 x i32>, <8 x i32>* %1835, align 32
  %2123 = load <8 x i32>, <8 x i32>* %1838, align 32
  %2124 = shufflevector <8 x i32> %2122, <8 x i32> %2123, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2125 = bitcast <8 x i32> %2124 to <4 x i64>
  %2126 = shufflevector <8 x i32> %2122, <8 x i32> %2123, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2127 = bitcast <8 x i32> %2126 to <4 x i64>
  %2128 = load <8 x i32>, <8 x i32>* %1845, align 32
  %2129 = load <8 x i32>, <8 x i32>* %1848, align 32
  %2130 = shufflevector <8 x i32> %2128, <8 x i32> %2129, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2131 = bitcast <8 x i32> %2130 to <4 x i64>
  %2132 = shufflevector <8 x i32> %2128, <8 x i32> %2129, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2133 = bitcast <8 x i32> %2132 to <4 x i64>
  %2134 = load <8 x i32>, <8 x i32>* %1855, align 32
  %2135 = load <8 x i32>, <8 x i32>* %1858, align 32
  %2136 = shufflevector <8 x i32> %2134, <8 x i32> %2135, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2137 = bitcast <8 x i32> %2136 to <4 x i64>
  %2138 = shufflevector <8 x i32> %2134, <8 x i32> %2135, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2139 = bitcast <8 x i32> %2138 to <4 x i64>
  %2140 = load <8 x i32>, <8 x i32>* %1865, align 32
  %2141 = load <8 x i32>, <8 x i32>* %1868, align 32
  %2142 = shufflevector <8 x i32> %2140, <8 x i32> %2141, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2143 = bitcast <8 x i32> %2142 to <4 x i64>
  %2144 = shufflevector <8 x i32> %2140, <8 x i32> %2141, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2145 = bitcast <8 x i32> %2144 to <4 x i64>
  %2146 = shufflevector <4 x i64> %2125, <4 x i64> %2131, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2147 = shufflevector <4 x i64> %2137, <4 x i64> %2143, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2148 = bitcast <4 x i64> %2146 to <8 x i32>
  %2149 = bitcast <4 x i64> %2147 to <8 x i32>
  %2150 = shufflevector <8 x i32> %2148, <8 x i32> %2149, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2150, <8 x i32>* %1879, align 32
  %2151 = shufflevector <8 x i32> %2148, <8 x i32> %2149, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2151, <8 x i32>* %1882, align 32
  %2152 = shufflevector <4 x i64> %2125, <4 x i64> %2131, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2153 = shufflevector <4 x i64> %2137, <4 x i64> %2143, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2154 = bitcast <4 x i64> %2152 to <8 x i32>
  %2155 = bitcast <4 x i64> %2153 to <8 x i32>
  %2156 = shufflevector <8 x i32> %2154, <8 x i32> %2155, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2156, <8 x i32>* %1889, align 32
  %2157 = shufflevector <8 x i32> %2154, <8 x i32> %2155, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2157, <8 x i32>* %1892, align 32
  %2158 = shufflevector <4 x i64> %2127, <4 x i64> %2133, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2159 = shufflevector <4 x i64> %2139, <4 x i64> %2145, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2160 = bitcast <4 x i64> %2158 to <8 x i32>
  %2161 = bitcast <4 x i64> %2159 to <8 x i32>
  %2162 = shufflevector <8 x i32> %2160, <8 x i32> %2161, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2162, <8 x i32>* %1899, align 32
  %2163 = shufflevector <8 x i32> %2160, <8 x i32> %2161, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2163, <8 x i32>* %1902, align 32
  %2164 = shufflevector <4 x i64> %2127, <4 x i64> %2133, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2165 = shufflevector <4 x i64> %2139, <4 x i64> %2145, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2166 = bitcast <4 x i64> %2164 to <8 x i32>
  %2167 = bitcast <4 x i64> %2165 to <8 x i32>
  %2168 = shufflevector <8 x i32> %2166, <8 x i32> %2167, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2168, <8 x i32>* %1909, align 32
  %2169 = shufflevector <8 x i32> %2166, <8 x i32> %2167, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2169, <8 x i32>* %1912, align 32
  %2170 = load <8 x i32>, <8 x i32>* %1915, align 32
  %2171 = load <8 x i32>, <8 x i32>* %1918, align 32
  %2172 = shufflevector <8 x i32> %2170, <8 x i32> %2171, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2173 = bitcast <8 x i32> %2172 to <4 x i64>
  %2174 = shufflevector <8 x i32> %2170, <8 x i32> %2171, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2175 = bitcast <8 x i32> %2174 to <4 x i64>
  %2176 = load <8 x i32>, <8 x i32>* %1925, align 32
  %2177 = load <8 x i32>, <8 x i32>* %1928, align 32
  %2178 = shufflevector <8 x i32> %2176, <8 x i32> %2177, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2179 = bitcast <8 x i32> %2178 to <4 x i64>
  %2180 = shufflevector <8 x i32> %2176, <8 x i32> %2177, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2181 = bitcast <8 x i32> %2180 to <4 x i64>
  %2182 = load <8 x i32>, <8 x i32>* %1935, align 32
  %2183 = load <8 x i32>, <8 x i32>* %1938, align 32
  %2184 = shufflevector <8 x i32> %2182, <8 x i32> %2183, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2185 = bitcast <8 x i32> %2184 to <4 x i64>
  %2186 = shufflevector <8 x i32> %2182, <8 x i32> %2183, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2187 = bitcast <8 x i32> %2186 to <4 x i64>
  %2188 = load <8 x i32>, <8 x i32>* %1945, align 32
  %2189 = load <8 x i32>, <8 x i32>* %1948, align 32
  %2190 = shufflevector <8 x i32> %2188, <8 x i32> %2189, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2191 = bitcast <8 x i32> %2190 to <4 x i64>
  %2192 = shufflevector <8 x i32> %2188, <8 x i32> %2189, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2193 = bitcast <8 x i32> %2192 to <4 x i64>
  %2194 = shufflevector <4 x i64> %2173, <4 x i64> %2179, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2195 = shufflevector <4 x i64> %2185, <4 x i64> %2191, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2196 = bitcast <4 x i64> %2194 to <8 x i32>
  %2197 = bitcast <4 x i64> %2195 to <8 x i32>
  %2198 = shufflevector <8 x i32> %2196, <8 x i32> %2197, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2198, <8 x i32>* %1959, align 32
  %2199 = shufflevector <8 x i32> %2196, <8 x i32> %2197, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2199, <8 x i32>* %1962, align 32
  %2200 = shufflevector <4 x i64> %2173, <4 x i64> %2179, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2201 = shufflevector <4 x i64> %2185, <4 x i64> %2191, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2202 = bitcast <4 x i64> %2200 to <8 x i32>
  %2203 = bitcast <4 x i64> %2201 to <8 x i32>
  %2204 = shufflevector <8 x i32> %2202, <8 x i32> %2203, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2204, <8 x i32>* %1969, align 32
  %2205 = shufflevector <8 x i32> %2202, <8 x i32> %2203, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2205, <8 x i32>* %1972, align 32
  %2206 = shufflevector <4 x i64> %2175, <4 x i64> %2181, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2207 = shufflevector <4 x i64> %2187, <4 x i64> %2193, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2208 = bitcast <4 x i64> %2206 to <8 x i32>
  %2209 = bitcast <4 x i64> %2207 to <8 x i32>
  %2210 = shufflevector <8 x i32> %2208, <8 x i32> %2209, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2210, <8 x i32>* %1979, align 32
  %2211 = shufflevector <8 x i32> %2208, <8 x i32> %2209, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2211, <8 x i32>* %1982, align 32
  %2212 = shufflevector <4 x i64> %2175, <4 x i64> %2181, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2213 = shufflevector <4 x i64> %2187, <4 x i64> %2193, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2214 = bitcast <4 x i64> %2212 to <8 x i32>
  %2215 = bitcast <4 x i64> %2213 to <8 x i32>
  %2216 = shufflevector <8 x i32> %2214, <8 x i32> %2215, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2216, <8 x i32>* %1989, align 32
  %2217 = shufflevector <8 x i32> %2214, <8 x i32> %2215, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2217, <8 x i32>* %1992, align 32
  %2218 = load <8 x i32>, <8 x i32>* %1995, align 32
  %2219 = load <8 x i32>, <8 x i32>* %1998, align 32
  %2220 = shufflevector <8 x i32> %2218, <8 x i32> %2219, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2221 = bitcast <8 x i32> %2220 to <4 x i64>
  %2222 = shufflevector <8 x i32> %2218, <8 x i32> %2219, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2223 = bitcast <8 x i32> %2222 to <4 x i64>
  %2224 = load <8 x i32>, <8 x i32>* %2005, align 32
  %2225 = load <8 x i32>, <8 x i32>* %2008, align 32
  %2226 = shufflevector <8 x i32> %2224, <8 x i32> %2225, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2227 = bitcast <8 x i32> %2226 to <4 x i64>
  %2228 = shufflevector <8 x i32> %2224, <8 x i32> %2225, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2229 = bitcast <8 x i32> %2228 to <4 x i64>
  %2230 = load <8 x i32>, <8 x i32>* %2015, align 32
  %2231 = load <8 x i32>, <8 x i32>* %2018, align 32
  %2232 = shufflevector <8 x i32> %2230, <8 x i32> %2231, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2233 = bitcast <8 x i32> %2232 to <4 x i64>
  %2234 = shufflevector <8 x i32> %2230, <8 x i32> %2231, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2235 = bitcast <8 x i32> %2234 to <4 x i64>
  %2236 = load <8 x i32>, <8 x i32>* %2025, align 32
  %2237 = load <8 x i32>, <8 x i32>* %2028, align 32
  %2238 = shufflevector <8 x i32> %2236, <8 x i32> %2237, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2239 = bitcast <8 x i32> %2238 to <4 x i64>
  %2240 = shufflevector <8 x i32> %2236, <8 x i32> %2237, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2241 = bitcast <8 x i32> %2240 to <4 x i64>
  %2242 = shufflevector <4 x i64> %2221, <4 x i64> %2227, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2243 = shufflevector <4 x i64> %2233, <4 x i64> %2239, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2244 = bitcast <4 x i64> %2242 to <8 x i32>
  %2245 = bitcast <4 x i64> %2243 to <8 x i32>
  %2246 = shufflevector <8 x i32> %2244, <8 x i32> %2245, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2246, <8 x i32>* %2039, align 32
  %2247 = shufflevector <8 x i32> %2244, <8 x i32> %2245, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2247, <8 x i32>* %2042, align 32
  %2248 = shufflevector <4 x i64> %2221, <4 x i64> %2227, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2249 = shufflevector <4 x i64> %2233, <4 x i64> %2239, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2250 = bitcast <4 x i64> %2248 to <8 x i32>
  %2251 = bitcast <4 x i64> %2249 to <8 x i32>
  %2252 = shufflevector <8 x i32> %2250, <8 x i32> %2251, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2252, <8 x i32>* %2049, align 32
  %2253 = shufflevector <8 x i32> %2250, <8 x i32> %2251, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2253, <8 x i32>* %2052, align 32
  %2254 = shufflevector <4 x i64> %2223, <4 x i64> %2229, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2255 = shufflevector <4 x i64> %2235, <4 x i64> %2241, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2256 = bitcast <4 x i64> %2254 to <8 x i32>
  %2257 = bitcast <4 x i64> %2255 to <8 x i32>
  %2258 = shufflevector <8 x i32> %2256, <8 x i32> %2257, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2258, <8 x i32>* %2059, align 32
  %2259 = shufflevector <8 x i32> %2256, <8 x i32> %2257, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2259, <8 x i32>* %2062, align 32
  %2260 = shufflevector <4 x i64> %2223, <4 x i64> %2229, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2261 = shufflevector <4 x i64> %2235, <4 x i64> %2241, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2262 = bitcast <4 x i64> %2260 to <8 x i32>
  %2263 = bitcast <4 x i64> %2261 to <8 x i32>
  %2264 = shufflevector <8 x i32> %2262, <8 x i32> %2263, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2264, <8 x i32>* %2069, align 32
  %2265 = shufflevector <8 x i32> %2262, <8 x i32> %2263, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2265, <8 x i32>* %2072, align 32
  br label %10159

2266:                                             ; preds = %5
  %2267 = bitcast [64 x <4 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %2267) #7
  %2268 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 16
  %2269 = bitcast <4 x i64>* %2268 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %2269, i8 -86, i64 1536, i1 false) #7
  %2270 = sext i32 %2 to i64
  %2271 = bitcast i16* %0 to <4 x i64>*
  %2272 = load <4 x i64>, <4 x i64>* %2271, align 1
  %2273 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 0
  store <4 x i64> %2272, <4 x i64>* %2273, align 32
  %2274 = getelementptr inbounds i16, i16* %0, i64 %2270
  %2275 = bitcast i16* %2274 to <4 x i64>*
  %2276 = load <4 x i64>, <4 x i64>* %2275, align 1
  %2277 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 1
  store <4 x i64> %2276, <4 x i64>* %2277, align 32
  %2278 = shl nsw i64 %2270, 1
  %2279 = getelementptr inbounds i16, i16* %0, i64 %2278
  %2280 = bitcast i16* %2279 to <4 x i64>*
  %2281 = load <4 x i64>, <4 x i64>* %2280, align 1
  %2282 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 2
  store <4 x i64> %2281, <4 x i64>* %2282, align 32
  %2283 = mul nsw i64 %2270, 3
  %2284 = getelementptr inbounds i16, i16* %0, i64 %2283
  %2285 = bitcast i16* %2284 to <4 x i64>*
  %2286 = load <4 x i64>, <4 x i64>* %2285, align 1
  %2287 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 3
  store <4 x i64> %2286, <4 x i64>* %2287, align 32
  %2288 = shl nsw i64 %2270, 2
  %2289 = getelementptr inbounds i16, i16* %0, i64 %2288
  %2290 = bitcast i16* %2289 to <4 x i64>*
  %2291 = load <4 x i64>, <4 x i64>* %2290, align 1
  %2292 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 4
  store <4 x i64> %2291, <4 x i64>* %2292, align 32
  %2293 = mul nsw i64 %2270, 5
  %2294 = getelementptr inbounds i16, i16* %0, i64 %2293
  %2295 = bitcast i16* %2294 to <4 x i64>*
  %2296 = load <4 x i64>, <4 x i64>* %2295, align 1
  %2297 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 5
  store <4 x i64> %2296, <4 x i64>* %2297, align 32
  %2298 = mul nsw i64 %2270, 6
  %2299 = getelementptr inbounds i16, i16* %0, i64 %2298
  %2300 = bitcast i16* %2299 to <4 x i64>*
  %2301 = load <4 x i64>, <4 x i64>* %2300, align 1
  %2302 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 6
  store <4 x i64> %2301, <4 x i64>* %2302, align 32
  %2303 = mul nsw i64 %2270, 7
  %2304 = getelementptr inbounds i16, i16* %0, i64 %2303
  %2305 = bitcast i16* %2304 to <4 x i64>*
  %2306 = load <4 x i64>, <4 x i64>* %2305, align 1
  %2307 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 7
  store <4 x i64> %2306, <4 x i64>* %2307, align 32
  %2308 = shl nsw i64 %2270, 3
  %2309 = getelementptr inbounds i16, i16* %0, i64 %2308
  %2310 = bitcast i16* %2309 to <4 x i64>*
  %2311 = load <4 x i64>, <4 x i64>* %2310, align 1
  %2312 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 8
  store <4 x i64> %2311, <4 x i64>* %2312, align 32
  %2313 = mul nsw i64 %2270, 9
  %2314 = getelementptr inbounds i16, i16* %0, i64 %2313
  %2315 = bitcast i16* %2314 to <4 x i64>*
  %2316 = load <4 x i64>, <4 x i64>* %2315, align 1
  %2317 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 9
  store <4 x i64> %2316, <4 x i64>* %2317, align 32
  %2318 = mul nsw i64 %2270, 10
  %2319 = getelementptr inbounds i16, i16* %0, i64 %2318
  %2320 = bitcast i16* %2319 to <4 x i64>*
  %2321 = load <4 x i64>, <4 x i64>* %2320, align 1
  %2322 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 10
  store <4 x i64> %2321, <4 x i64>* %2322, align 32
  %2323 = mul nsw i64 %2270, 11
  %2324 = getelementptr inbounds i16, i16* %0, i64 %2323
  %2325 = bitcast i16* %2324 to <4 x i64>*
  %2326 = load <4 x i64>, <4 x i64>* %2325, align 1
  %2327 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 11
  store <4 x i64> %2326, <4 x i64>* %2327, align 32
  %2328 = mul nsw i64 %2270, 12
  %2329 = getelementptr inbounds i16, i16* %0, i64 %2328
  %2330 = bitcast i16* %2329 to <4 x i64>*
  %2331 = load <4 x i64>, <4 x i64>* %2330, align 1
  %2332 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 12
  store <4 x i64> %2331, <4 x i64>* %2332, align 32
  %2333 = mul nsw i64 %2270, 13
  %2334 = getelementptr inbounds i16, i16* %0, i64 %2333
  %2335 = bitcast i16* %2334 to <4 x i64>*
  %2336 = load <4 x i64>, <4 x i64>* %2335, align 1
  %2337 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 13
  store <4 x i64> %2336, <4 x i64>* %2337, align 32
  %2338 = mul nsw i64 %2270, 14
  %2339 = getelementptr inbounds i16, i16* %0, i64 %2338
  %2340 = bitcast i16* %2339 to <4 x i64>*
  %2341 = load <4 x i64>, <4 x i64>* %2340, align 1
  %2342 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 14
  store <4 x i64> %2341, <4 x i64>* %2342, align 32
  %2343 = mul nsw i64 %2270, 15
  %2344 = getelementptr inbounds i16, i16* %0, i64 %2343
  %2345 = bitcast i16* %2344 to <4 x i64>*
  %2346 = load <4 x i64>, <4 x i64>* %2345, align 1
  %2347 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 15
  store <4 x i64> %2346, <4 x i64>* %2347, align 32
  %2348 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 0
  %2349 = shufflevector <4 x i64> %2272, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %2350 = bitcast <2 x i64> %2349 to <8 x i16>
  %2351 = sext <8 x i16> %2350 to <8 x i32>
  %2352 = bitcast [32 x <4 x i64>]* %8 to <8 x i32>*
  store <8 x i32> %2351, <8 x i32>* %2352, align 32
  %2353 = bitcast <4 x i64> %2272 to <8 x i32>
  %2354 = shufflevector <8 x i32> %2353, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2355 = bitcast <4 x i32> %2354 to <8 x i16>
  %2356 = sext <8 x i16> %2355 to <8 x i32>
  %2357 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 1
  %2358 = bitcast <4 x i64>* %2357 to <8 x i32>*
  store <8 x i32> %2356, <8 x i32>* %2358, align 32
  br label %2359

2359:                                             ; preds = %2266, %2359
  %2360 = phi i64 [ 1, %2266 ], [ %2376, %2359 ]
  %2361 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 %2360
  %2362 = load <4 x i64>, <4 x i64>* %2361, align 32
  %2363 = shufflevector <4 x i64> %2362, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %2364 = bitcast <2 x i64> %2363 to <8 x i16>
  %2365 = sext <8 x i16> %2364 to <8 x i32>
  %2366 = shl nuw nsw i64 %2360, 1
  %2367 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %2366
  %2368 = bitcast <4 x i64>* %2367 to <8 x i32>*
  store <8 x i32> %2365, <8 x i32>* %2368, align 32
  %2369 = bitcast <4 x i64> %2362 to <8 x i32>
  %2370 = shufflevector <8 x i32> %2369, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2371 = bitcast <4 x i32> %2370 to <8 x i16>
  %2372 = sext <8 x i16> %2371 to <8 x i32>
  %2373 = or i64 %2366, 1
  %2374 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %2373
  %2375 = bitcast <4 x i64>* %2374 to <8 x i32>*
  store <8 x i32> %2372, <8 x i32>* %2375, align 32
  %2376 = add nuw nsw i64 %2360, 1
  %2377 = icmp eq i64 %2376, 16
  br i1 %2377, label %2378, label %2359

2378:                                             ; preds = %2359
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %2267) #7
  %2379 = load i8, i8* %12, align 1
  %2380 = sext i8 %2379 to i32
  %2381 = icmp slt i8 %2379, 0
  br i1 %2381, label %2382, label %2415

2382:                                             ; preds = %2378
  %2383 = sub nsw i32 0, %2380
  %2384 = xor i32 %2380, -1
  %2385 = shl i32 1, %2384
  %2386 = insertelement <8 x i32> undef, i32 %2385, i32 0
  %2387 = shufflevector <8 x i32> %2386, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %2388

2388:                                             ; preds = %2388, %2382
  %2389 = phi i64 [ 0, %2382 ], [ %2413, %2388 ]
  %2390 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %2389
  %2391 = bitcast <4 x i64>* %2390 to <8 x i32>*
  %2392 = load <8 x i32>, <8 x i32>* %2391, align 32
  %2393 = add <8 x i32> %2392, %2387
  %2394 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2393, i32 %2383) #7
  store <8 x i32> %2394, <8 x i32>* %2391, align 32
  %2395 = or i64 %2389, 1
  %2396 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %2395
  %2397 = bitcast <4 x i64>* %2396 to <8 x i32>*
  %2398 = load <8 x i32>, <8 x i32>* %2397, align 32
  %2399 = add <8 x i32> %2398, %2387
  %2400 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2399, i32 %2383) #7
  store <8 x i32> %2400, <8 x i32>* %2397, align 32
  %2401 = or i64 %2389, 2
  %2402 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %2401
  %2403 = bitcast <4 x i64>* %2402 to <8 x i32>*
  %2404 = load <8 x i32>, <8 x i32>* %2403, align 32
  %2405 = add <8 x i32> %2404, %2387
  %2406 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2405, i32 %2383) #7
  store <8 x i32> %2406, <8 x i32>* %2403, align 32
  %2407 = or i64 %2389, 3
  %2408 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %2407
  %2409 = bitcast <4 x i64>* %2408 to <8 x i32>*
  %2410 = load <8 x i32>, <8 x i32>* %2409, align 32
  %2411 = add <8 x i32> %2410, %2387
  %2412 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2411, i32 %2383) #7
  store <8 x i32> %2412, <8 x i32>* %2409, align 32
  %2413 = add nuw nsw i64 %2389, 4
  %2414 = icmp eq i64 %2413, 32
  br i1 %2414, label %2440, label %2388

2415:                                             ; preds = %2378
  %2416 = icmp eq i8 %2379, 0
  br i1 %2416, label %2440, label %2417

2417:                                             ; preds = %2415, %2417
  %2418 = phi i64 [ %2438, %2417 ], [ 0, %2415 ]
  %2419 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %2418
  %2420 = bitcast <4 x i64>* %2419 to <8 x i32>*
  %2421 = load <8 x i32>, <8 x i32>* %2420, align 32
  %2422 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2421, i32 %2380) #7
  store <8 x i32> %2422, <8 x i32>* %2420, align 32
  %2423 = or i64 %2418, 1
  %2424 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %2423
  %2425 = bitcast <4 x i64>* %2424 to <8 x i32>*
  %2426 = load <8 x i32>, <8 x i32>* %2425, align 32
  %2427 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2426, i32 %2380) #7
  store <8 x i32> %2427, <8 x i32>* %2425, align 32
  %2428 = or i64 %2418, 2
  %2429 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %2428
  %2430 = bitcast <4 x i64>* %2429 to <8 x i32>*
  %2431 = load <8 x i32>, <8 x i32>* %2430, align 32
  %2432 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2431, i32 %2380) #7
  store <8 x i32> %2432, <8 x i32>* %2430, align 32
  %2433 = or i64 %2418, 3
  %2434 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %2433
  %2435 = bitcast <4 x i64>* %2434 to <8 x i32>*
  %2436 = load <8 x i32>, <8 x i32>* %2435, align 32
  %2437 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2436, i32 %2380) #7
  store <8 x i32> %2437, <8 x i32>* %2435, align 32
  %2438 = add nuw nsw i64 %2418, 4
  %2439 = icmp eq i64 %2438, 32
  br i1 %2439, label %2440, label %2417

2440:                                             ; preds = %2417, %2388, %2415
  %2441 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 0
  %2442 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 2, i64 2), align 2
  call void @fadst16_avx2(<4 x i64>* nonnull %2348, <4 x i64>* nonnull %2441, i8 signext %2442, i32 2, i32 2)
  %2443 = getelementptr inbounds i8, i8* %12, i64 1
  %2444 = load i8, i8* %2443, align 1
  %2445 = sext i8 %2444 to i32
  %2446 = icmp slt i8 %2444, 0
  br i1 %2446, label %2447, label %2480

2447:                                             ; preds = %2440
  %2448 = sub nsw i32 0, %2445
  %2449 = xor i32 %2445, -1
  %2450 = shl i32 1, %2449
  %2451 = insertelement <8 x i32> undef, i32 %2450, i32 0
  %2452 = shufflevector <8 x i32> %2451, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %2453

2453:                                             ; preds = %2453, %2447
  %2454 = phi i64 [ 0, %2447 ], [ %2478, %2453 ]
  %2455 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %2454
  %2456 = bitcast <4 x i64>* %2455 to <8 x i32>*
  %2457 = load <8 x i32>, <8 x i32>* %2456, align 32
  %2458 = add <8 x i32> %2457, %2452
  %2459 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2458, i32 %2448) #7
  store <8 x i32> %2459, <8 x i32>* %2456, align 32
  %2460 = or i64 %2454, 1
  %2461 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %2460
  %2462 = bitcast <4 x i64>* %2461 to <8 x i32>*
  %2463 = load <8 x i32>, <8 x i32>* %2462, align 32
  %2464 = add <8 x i32> %2463, %2452
  %2465 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2464, i32 %2448) #7
  store <8 x i32> %2465, <8 x i32>* %2462, align 32
  %2466 = or i64 %2454, 2
  %2467 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %2466
  %2468 = bitcast <4 x i64>* %2467 to <8 x i32>*
  %2469 = load <8 x i32>, <8 x i32>* %2468, align 32
  %2470 = add <8 x i32> %2469, %2452
  %2471 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2470, i32 %2448) #7
  store <8 x i32> %2471, <8 x i32>* %2468, align 32
  %2472 = or i64 %2454, 3
  %2473 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %2472
  %2474 = bitcast <4 x i64>* %2473 to <8 x i32>*
  %2475 = load <8 x i32>, <8 x i32>* %2474, align 32
  %2476 = add <8 x i32> %2475, %2452
  %2477 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %2476, i32 %2448) #7
  store <8 x i32> %2477, <8 x i32>* %2474, align 32
  %2478 = add nuw nsw i64 %2454, 4
  %2479 = icmp eq i64 %2478, 32
  br i1 %2479, label %2505, label %2453

2480:                                             ; preds = %2440
  %2481 = icmp eq i8 %2444, 0
  br i1 %2481, label %2505, label %2482

2482:                                             ; preds = %2480, %2482
  %2483 = phi i64 [ %2503, %2482 ], [ 0, %2480 ]
  %2484 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %2483
  %2485 = bitcast <4 x i64>* %2484 to <8 x i32>*
  %2486 = load <8 x i32>, <8 x i32>* %2485, align 32
  %2487 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2486, i32 %2445) #7
  store <8 x i32> %2487, <8 x i32>* %2485, align 32
  %2488 = or i64 %2483, 1
  %2489 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %2488
  %2490 = bitcast <4 x i64>* %2489 to <8 x i32>*
  %2491 = load <8 x i32>, <8 x i32>* %2490, align 32
  %2492 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2491, i32 %2445) #7
  store <8 x i32> %2492, <8 x i32>* %2490, align 32
  %2493 = or i64 %2483, 2
  %2494 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %2493
  %2495 = bitcast <4 x i64>* %2494 to <8 x i32>*
  %2496 = load <8 x i32>, <8 x i32>* %2495, align 32
  %2497 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2496, i32 %2445) #7
  store <8 x i32> %2497, <8 x i32>* %2495, align 32
  %2498 = or i64 %2483, 3
  %2499 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %2498
  %2500 = bitcast <4 x i64>* %2499 to <8 x i32>*
  %2501 = load <8 x i32>, <8 x i32>* %2500, align 32
  %2502 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2501, i32 %2445) #7
  store <8 x i32> %2502, <8 x i32>* %2500, align 32
  %2503 = add nuw nsw i64 %2483, 4
  %2504 = icmp eq i64 %2503, 32
  br i1 %2504, label %2505, label %2482

2505:                                             ; preds = %2482, %2453, %2480
  %2506 = bitcast [32 x <4 x i64>]* %10 to <8 x i32>*
  %2507 = load <8 x i32>, <8 x i32>* %2506, align 32
  %2508 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 2
  %2509 = bitcast <4 x i64>* %2508 to <8 x i32>*
  %2510 = load <8 x i32>, <8 x i32>* %2509, align 32
  %2511 = shufflevector <8 x i32> %2507, <8 x i32> %2510, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2512 = bitcast <8 x i32> %2511 to <4 x i64>
  %2513 = shufflevector <8 x i32> %2507, <8 x i32> %2510, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2514 = bitcast <8 x i32> %2513 to <4 x i64>
  %2515 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 4
  %2516 = bitcast <4 x i64>* %2515 to <8 x i32>*
  %2517 = load <8 x i32>, <8 x i32>* %2516, align 32
  %2518 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 6
  %2519 = bitcast <4 x i64>* %2518 to <8 x i32>*
  %2520 = load <8 x i32>, <8 x i32>* %2519, align 32
  %2521 = shufflevector <8 x i32> %2517, <8 x i32> %2520, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2522 = bitcast <8 x i32> %2521 to <4 x i64>
  %2523 = shufflevector <8 x i32> %2517, <8 x i32> %2520, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2524 = bitcast <8 x i32> %2523 to <4 x i64>
  %2525 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 8
  %2526 = bitcast <4 x i64>* %2525 to <8 x i32>*
  %2527 = load <8 x i32>, <8 x i32>* %2526, align 32
  %2528 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 10
  %2529 = bitcast <4 x i64>* %2528 to <8 x i32>*
  %2530 = load <8 x i32>, <8 x i32>* %2529, align 32
  %2531 = shufflevector <8 x i32> %2527, <8 x i32> %2530, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2532 = bitcast <8 x i32> %2531 to <4 x i64>
  %2533 = shufflevector <8 x i32> %2527, <8 x i32> %2530, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2534 = bitcast <8 x i32> %2533 to <4 x i64>
  %2535 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 12
  %2536 = bitcast <4 x i64>* %2535 to <8 x i32>*
  %2537 = load <8 x i32>, <8 x i32>* %2536, align 32
  %2538 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 14
  %2539 = bitcast <4 x i64>* %2538 to <8 x i32>*
  %2540 = load <8 x i32>, <8 x i32>* %2539, align 32
  %2541 = shufflevector <8 x i32> %2537, <8 x i32> %2540, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2542 = bitcast <8 x i32> %2541 to <4 x i64>
  %2543 = shufflevector <8 x i32> %2537, <8 x i32> %2540, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2544 = bitcast <8 x i32> %2543 to <4 x i64>
  %2545 = shufflevector <4 x i64> %2512, <4 x i64> %2522, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2546 = shufflevector <4 x i64> %2532, <4 x i64> %2542, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2547 = bitcast <4 x i64> %2545 to <8 x i32>
  %2548 = bitcast <4 x i64> %2546 to <8 x i32>
  %2549 = shufflevector <8 x i32> %2547, <8 x i32> %2548, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %2550 = bitcast [32 x <4 x i64>]* %8 to <8 x i32>*
  store <8 x i32> %2549, <8 x i32>* %2550, align 32
  %2551 = shufflevector <8 x i32> %2547, <8 x i32> %2548, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %2552 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 8
  %2553 = bitcast <4 x i64>* %2552 to <8 x i32>*
  store <8 x i32> %2551, <8 x i32>* %2553, align 32
  %2554 = shufflevector <4 x i64> %2512, <4 x i64> %2522, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2555 = shufflevector <4 x i64> %2532, <4 x i64> %2542, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2556 = bitcast <4 x i64> %2554 to <8 x i32>
  %2557 = bitcast <4 x i64> %2555 to <8 x i32>
  %2558 = shufflevector <8 x i32> %2556, <8 x i32> %2557, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %2559 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 2
  %2560 = bitcast <4 x i64>* %2559 to <8 x i32>*
  store <8 x i32> %2558, <8 x i32>* %2560, align 32
  %2561 = shufflevector <8 x i32> %2556, <8 x i32> %2557, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %2562 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 10
  %2563 = bitcast <4 x i64>* %2562 to <8 x i32>*
  store <8 x i32> %2561, <8 x i32>* %2563, align 32
  %2564 = shufflevector <4 x i64> %2514, <4 x i64> %2524, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2565 = shufflevector <4 x i64> %2534, <4 x i64> %2544, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2566 = bitcast <4 x i64> %2564 to <8 x i32>
  %2567 = bitcast <4 x i64> %2565 to <8 x i32>
  %2568 = shufflevector <8 x i32> %2566, <8 x i32> %2567, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %2569 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 4
  %2570 = bitcast <4 x i64>* %2569 to <8 x i32>*
  store <8 x i32> %2568, <8 x i32>* %2570, align 32
  %2571 = shufflevector <8 x i32> %2566, <8 x i32> %2567, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %2572 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 12
  %2573 = bitcast <4 x i64>* %2572 to <8 x i32>*
  store <8 x i32> %2571, <8 x i32>* %2573, align 32
  %2574 = shufflevector <4 x i64> %2514, <4 x i64> %2524, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2575 = shufflevector <4 x i64> %2534, <4 x i64> %2544, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2576 = bitcast <4 x i64> %2574 to <8 x i32>
  %2577 = bitcast <4 x i64> %2575 to <8 x i32>
  %2578 = shufflevector <8 x i32> %2576, <8 x i32> %2577, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %2579 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 6
  %2580 = bitcast <4 x i64>* %2579 to <8 x i32>*
  store <8 x i32> %2578, <8 x i32>* %2580, align 32
  %2581 = shufflevector <8 x i32> %2576, <8 x i32> %2577, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %2582 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 14
  %2583 = bitcast <4 x i64>* %2582 to <8 x i32>*
  store <8 x i32> %2581, <8 x i32>* %2583, align 32
  %2584 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 1
  %2585 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 16
  %2586 = bitcast <4 x i64>* %2584 to <8 x i32>*
  %2587 = load <8 x i32>, <8 x i32>* %2586, align 32
  %2588 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 3
  %2589 = bitcast <4 x i64>* %2588 to <8 x i32>*
  %2590 = load <8 x i32>, <8 x i32>* %2589, align 32
  %2591 = shufflevector <8 x i32> %2587, <8 x i32> %2590, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2592 = bitcast <8 x i32> %2591 to <4 x i64>
  %2593 = shufflevector <8 x i32> %2587, <8 x i32> %2590, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2594 = bitcast <8 x i32> %2593 to <4 x i64>
  %2595 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 5
  %2596 = bitcast <4 x i64>* %2595 to <8 x i32>*
  %2597 = load <8 x i32>, <8 x i32>* %2596, align 32
  %2598 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 7
  %2599 = bitcast <4 x i64>* %2598 to <8 x i32>*
  %2600 = load <8 x i32>, <8 x i32>* %2599, align 32
  %2601 = shufflevector <8 x i32> %2597, <8 x i32> %2600, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2602 = bitcast <8 x i32> %2601 to <4 x i64>
  %2603 = shufflevector <8 x i32> %2597, <8 x i32> %2600, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2604 = bitcast <8 x i32> %2603 to <4 x i64>
  %2605 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 9
  %2606 = bitcast <4 x i64>* %2605 to <8 x i32>*
  %2607 = load <8 x i32>, <8 x i32>* %2606, align 32
  %2608 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 11
  %2609 = bitcast <4 x i64>* %2608 to <8 x i32>*
  %2610 = load <8 x i32>, <8 x i32>* %2609, align 32
  %2611 = shufflevector <8 x i32> %2607, <8 x i32> %2610, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2612 = bitcast <8 x i32> %2611 to <4 x i64>
  %2613 = shufflevector <8 x i32> %2607, <8 x i32> %2610, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2614 = bitcast <8 x i32> %2613 to <4 x i64>
  %2615 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 13
  %2616 = bitcast <4 x i64>* %2615 to <8 x i32>*
  %2617 = load <8 x i32>, <8 x i32>* %2616, align 32
  %2618 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 15
  %2619 = bitcast <4 x i64>* %2618 to <8 x i32>*
  %2620 = load <8 x i32>, <8 x i32>* %2619, align 32
  %2621 = shufflevector <8 x i32> %2617, <8 x i32> %2620, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2622 = bitcast <8 x i32> %2621 to <4 x i64>
  %2623 = shufflevector <8 x i32> %2617, <8 x i32> %2620, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2624 = bitcast <8 x i32> %2623 to <4 x i64>
  %2625 = shufflevector <4 x i64> %2592, <4 x i64> %2602, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2626 = shufflevector <4 x i64> %2612, <4 x i64> %2622, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2627 = bitcast <4 x i64> %2625 to <8 x i32>
  %2628 = bitcast <4 x i64> %2626 to <8 x i32>
  %2629 = shufflevector <8 x i32> %2627, <8 x i32> %2628, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %2630 = bitcast <4 x i64>* %2585 to <8 x i32>*
  store <8 x i32> %2629, <8 x i32>* %2630, align 32
  %2631 = shufflevector <8 x i32> %2627, <8 x i32> %2628, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %2632 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 24
  %2633 = bitcast <4 x i64>* %2632 to <8 x i32>*
  store <8 x i32> %2631, <8 x i32>* %2633, align 32
  %2634 = shufflevector <4 x i64> %2592, <4 x i64> %2602, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2635 = shufflevector <4 x i64> %2612, <4 x i64> %2622, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2636 = bitcast <4 x i64> %2634 to <8 x i32>
  %2637 = bitcast <4 x i64> %2635 to <8 x i32>
  %2638 = shufflevector <8 x i32> %2636, <8 x i32> %2637, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %2639 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 18
  %2640 = bitcast <4 x i64>* %2639 to <8 x i32>*
  store <8 x i32> %2638, <8 x i32>* %2640, align 32
  %2641 = shufflevector <8 x i32> %2636, <8 x i32> %2637, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %2642 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 26
  %2643 = bitcast <4 x i64>* %2642 to <8 x i32>*
  store <8 x i32> %2641, <8 x i32>* %2643, align 32
  %2644 = shufflevector <4 x i64> %2594, <4 x i64> %2604, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2645 = shufflevector <4 x i64> %2614, <4 x i64> %2624, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2646 = bitcast <4 x i64> %2644 to <8 x i32>
  %2647 = bitcast <4 x i64> %2645 to <8 x i32>
  %2648 = shufflevector <8 x i32> %2646, <8 x i32> %2647, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %2649 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 20
  %2650 = bitcast <4 x i64>* %2649 to <8 x i32>*
  store <8 x i32> %2648, <8 x i32>* %2650, align 32
  %2651 = shufflevector <8 x i32> %2646, <8 x i32> %2647, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %2652 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 28
  %2653 = bitcast <4 x i64>* %2652 to <8 x i32>*
  store <8 x i32> %2651, <8 x i32>* %2653, align 32
  %2654 = shufflevector <4 x i64> %2594, <4 x i64> %2604, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2655 = shufflevector <4 x i64> %2614, <4 x i64> %2624, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2656 = bitcast <4 x i64> %2654 to <8 x i32>
  %2657 = bitcast <4 x i64> %2655 to <8 x i32>
  %2658 = shufflevector <8 x i32> %2656, <8 x i32> %2657, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %2659 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 22
  %2660 = bitcast <4 x i64>* %2659 to <8 x i32>*
  store <8 x i32> %2658, <8 x i32>* %2660, align 32
  %2661 = shufflevector <8 x i32> %2656, <8 x i32> %2657, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %2662 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 30
  %2663 = bitcast <4 x i64>* %2662 to <8 x i32>*
  store <8 x i32> %2661, <8 x i32>* %2663, align 32
  %2664 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 16
  %2665 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 1
  %2666 = bitcast <4 x i64>* %2664 to <8 x i32>*
  %2667 = load <8 x i32>, <8 x i32>* %2666, align 32
  %2668 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 18
  %2669 = bitcast <4 x i64>* %2668 to <8 x i32>*
  %2670 = load <8 x i32>, <8 x i32>* %2669, align 32
  %2671 = shufflevector <8 x i32> %2667, <8 x i32> %2670, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2672 = bitcast <8 x i32> %2671 to <4 x i64>
  %2673 = shufflevector <8 x i32> %2667, <8 x i32> %2670, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2674 = bitcast <8 x i32> %2673 to <4 x i64>
  %2675 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 20
  %2676 = bitcast <4 x i64>* %2675 to <8 x i32>*
  %2677 = load <8 x i32>, <8 x i32>* %2676, align 32
  %2678 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 22
  %2679 = bitcast <4 x i64>* %2678 to <8 x i32>*
  %2680 = load <8 x i32>, <8 x i32>* %2679, align 32
  %2681 = shufflevector <8 x i32> %2677, <8 x i32> %2680, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2682 = bitcast <8 x i32> %2681 to <4 x i64>
  %2683 = shufflevector <8 x i32> %2677, <8 x i32> %2680, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2684 = bitcast <8 x i32> %2683 to <4 x i64>
  %2685 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 24
  %2686 = bitcast <4 x i64>* %2685 to <8 x i32>*
  %2687 = load <8 x i32>, <8 x i32>* %2686, align 32
  %2688 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 26
  %2689 = bitcast <4 x i64>* %2688 to <8 x i32>*
  %2690 = load <8 x i32>, <8 x i32>* %2689, align 32
  %2691 = shufflevector <8 x i32> %2687, <8 x i32> %2690, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2692 = bitcast <8 x i32> %2691 to <4 x i64>
  %2693 = shufflevector <8 x i32> %2687, <8 x i32> %2690, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2694 = bitcast <8 x i32> %2693 to <4 x i64>
  %2695 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 28
  %2696 = bitcast <4 x i64>* %2695 to <8 x i32>*
  %2697 = load <8 x i32>, <8 x i32>* %2696, align 32
  %2698 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 30
  %2699 = bitcast <4 x i64>* %2698 to <8 x i32>*
  %2700 = load <8 x i32>, <8 x i32>* %2699, align 32
  %2701 = shufflevector <8 x i32> %2697, <8 x i32> %2700, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2702 = bitcast <8 x i32> %2701 to <4 x i64>
  %2703 = shufflevector <8 x i32> %2697, <8 x i32> %2700, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2704 = bitcast <8 x i32> %2703 to <4 x i64>
  %2705 = shufflevector <4 x i64> %2672, <4 x i64> %2682, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2706 = shufflevector <4 x i64> %2692, <4 x i64> %2702, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2707 = bitcast <4 x i64> %2705 to <8 x i32>
  %2708 = bitcast <4 x i64> %2706 to <8 x i32>
  %2709 = shufflevector <8 x i32> %2707, <8 x i32> %2708, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %2710 = bitcast <4 x i64>* %2665 to <8 x i32>*
  store <8 x i32> %2709, <8 x i32>* %2710, align 32
  %2711 = shufflevector <8 x i32> %2707, <8 x i32> %2708, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %2712 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 9
  %2713 = bitcast <4 x i64>* %2712 to <8 x i32>*
  store <8 x i32> %2711, <8 x i32>* %2713, align 32
  %2714 = shufflevector <4 x i64> %2672, <4 x i64> %2682, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2715 = shufflevector <4 x i64> %2692, <4 x i64> %2702, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2716 = bitcast <4 x i64> %2714 to <8 x i32>
  %2717 = bitcast <4 x i64> %2715 to <8 x i32>
  %2718 = shufflevector <8 x i32> %2716, <8 x i32> %2717, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %2719 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 3
  %2720 = bitcast <4 x i64>* %2719 to <8 x i32>*
  store <8 x i32> %2718, <8 x i32>* %2720, align 32
  %2721 = shufflevector <8 x i32> %2716, <8 x i32> %2717, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %2722 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 11
  %2723 = bitcast <4 x i64>* %2722 to <8 x i32>*
  store <8 x i32> %2721, <8 x i32>* %2723, align 32
  %2724 = shufflevector <4 x i64> %2674, <4 x i64> %2684, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2725 = shufflevector <4 x i64> %2694, <4 x i64> %2704, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2726 = bitcast <4 x i64> %2724 to <8 x i32>
  %2727 = bitcast <4 x i64> %2725 to <8 x i32>
  %2728 = shufflevector <8 x i32> %2726, <8 x i32> %2727, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %2729 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 5
  %2730 = bitcast <4 x i64>* %2729 to <8 x i32>*
  store <8 x i32> %2728, <8 x i32>* %2730, align 32
  %2731 = shufflevector <8 x i32> %2726, <8 x i32> %2727, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %2732 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 13
  %2733 = bitcast <4 x i64>* %2732 to <8 x i32>*
  store <8 x i32> %2731, <8 x i32>* %2733, align 32
  %2734 = shufflevector <4 x i64> %2674, <4 x i64> %2684, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2735 = shufflevector <4 x i64> %2694, <4 x i64> %2704, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2736 = bitcast <4 x i64> %2734 to <8 x i32>
  %2737 = bitcast <4 x i64> %2735 to <8 x i32>
  %2738 = shufflevector <8 x i32> %2736, <8 x i32> %2737, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %2739 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 7
  %2740 = bitcast <4 x i64>* %2739 to <8 x i32>*
  store <8 x i32> %2738, <8 x i32>* %2740, align 32
  %2741 = shufflevector <8 x i32> %2736, <8 x i32> %2737, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %2742 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 15
  %2743 = bitcast <4 x i64>* %2742 to <8 x i32>*
  store <8 x i32> %2741, <8 x i32>* %2743, align 32
  %2744 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 17
  %2745 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 17
  %2746 = bitcast <4 x i64>* %2744 to <8 x i32>*
  %2747 = load <8 x i32>, <8 x i32>* %2746, align 32
  %2748 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 19
  %2749 = bitcast <4 x i64>* %2748 to <8 x i32>*
  %2750 = load <8 x i32>, <8 x i32>* %2749, align 32
  %2751 = shufflevector <8 x i32> %2747, <8 x i32> %2750, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2752 = bitcast <8 x i32> %2751 to <4 x i64>
  %2753 = shufflevector <8 x i32> %2747, <8 x i32> %2750, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2754 = bitcast <8 x i32> %2753 to <4 x i64>
  %2755 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 21
  %2756 = bitcast <4 x i64>* %2755 to <8 x i32>*
  %2757 = load <8 x i32>, <8 x i32>* %2756, align 32
  %2758 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 23
  %2759 = bitcast <4 x i64>* %2758 to <8 x i32>*
  %2760 = load <8 x i32>, <8 x i32>* %2759, align 32
  %2761 = shufflevector <8 x i32> %2757, <8 x i32> %2760, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2762 = bitcast <8 x i32> %2761 to <4 x i64>
  %2763 = shufflevector <8 x i32> %2757, <8 x i32> %2760, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2764 = bitcast <8 x i32> %2763 to <4 x i64>
  %2765 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 25
  %2766 = bitcast <4 x i64>* %2765 to <8 x i32>*
  %2767 = load <8 x i32>, <8 x i32>* %2766, align 32
  %2768 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 27
  %2769 = bitcast <4 x i64>* %2768 to <8 x i32>*
  %2770 = load <8 x i32>, <8 x i32>* %2769, align 32
  %2771 = shufflevector <8 x i32> %2767, <8 x i32> %2770, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2772 = bitcast <8 x i32> %2771 to <4 x i64>
  %2773 = shufflevector <8 x i32> %2767, <8 x i32> %2770, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2774 = bitcast <8 x i32> %2773 to <4 x i64>
  %2775 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 29
  %2776 = bitcast <4 x i64>* %2775 to <8 x i32>*
  %2777 = load <8 x i32>, <8 x i32>* %2776, align 32
  %2778 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 31
  %2779 = bitcast <4 x i64>* %2778 to <8 x i32>*
  %2780 = load <8 x i32>, <8 x i32>* %2779, align 32
  %2781 = shufflevector <8 x i32> %2777, <8 x i32> %2780, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2782 = bitcast <8 x i32> %2781 to <4 x i64>
  %2783 = shufflevector <8 x i32> %2777, <8 x i32> %2780, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2784 = bitcast <8 x i32> %2783 to <4 x i64>
  %2785 = shufflevector <4 x i64> %2752, <4 x i64> %2762, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2786 = shufflevector <4 x i64> %2772, <4 x i64> %2782, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2787 = bitcast <4 x i64> %2785 to <8 x i32>
  %2788 = bitcast <4 x i64> %2786 to <8 x i32>
  %2789 = shufflevector <8 x i32> %2787, <8 x i32> %2788, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %2790 = bitcast <4 x i64>* %2745 to <8 x i32>*
  store <8 x i32> %2789, <8 x i32>* %2790, align 32
  %2791 = shufflevector <8 x i32> %2787, <8 x i32> %2788, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %2792 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 25
  %2793 = bitcast <4 x i64>* %2792 to <8 x i32>*
  store <8 x i32> %2791, <8 x i32>* %2793, align 32
  %2794 = shufflevector <4 x i64> %2752, <4 x i64> %2762, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2795 = shufflevector <4 x i64> %2772, <4 x i64> %2782, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2796 = bitcast <4 x i64> %2794 to <8 x i32>
  %2797 = bitcast <4 x i64> %2795 to <8 x i32>
  %2798 = shufflevector <8 x i32> %2796, <8 x i32> %2797, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %2799 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 19
  %2800 = bitcast <4 x i64>* %2799 to <8 x i32>*
  store <8 x i32> %2798, <8 x i32>* %2800, align 32
  %2801 = shufflevector <8 x i32> %2796, <8 x i32> %2797, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %2802 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 27
  %2803 = bitcast <4 x i64>* %2802 to <8 x i32>*
  store <8 x i32> %2801, <8 x i32>* %2803, align 32
  %2804 = shufflevector <4 x i64> %2754, <4 x i64> %2764, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2805 = shufflevector <4 x i64> %2774, <4 x i64> %2784, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2806 = bitcast <4 x i64> %2804 to <8 x i32>
  %2807 = bitcast <4 x i64> %2805 to <8 x i32>
  %2808 = shufflevector <8 x i32> %2806, <8 x i32> %2807, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %2809 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 21
  %2810 = bitcast <4 x i64>* %2809 to <8 x i32>*
  store <8 x i32> %2808, <8 x i32>* %2810, align 32
  %2811 = shufflevector <8 x i32> %2806, <8 x i32> %2807, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %2812 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 29
  %2813 = bitcast <4 x i64>* %2812 to <8 x i32>*
  store <8 x i32> %2811, <8 x i32>* %2813, align 32
  %2814 = shufflevector <4 x i64> %2754, <4 x i64> %2764, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2815 = shufflevector <4 x i64> %2774, <4 x i64> %2784, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2816 = bitcast <4 x i64> %2814 to <8 x i32>
  %2817 = bitcast <4 x i64> %2815 to <8 x i32>
  %2818 = shufflevector <8 x i32> %2816, <8 x i32> %2817, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %2819 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 23
  %2820 = bitcast <4 x i64>* %2819 to <8 x i32>*
  store <8 x i32> %2818, <8 x i32>* %2820, align 32
  %2821 = shufflevector <8 x i32> %2816, <8 x i32> %2817, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %2822 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 31
  %2823 = bitcast <4 x i64>* %2822 to <8 x i32>*
  store <8 x i32> %2821, <8 x i32>* %2823, align 32
  %2824 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 2, i64 2), align 2
  call void @fadst16_avx2(<4 x i64>* nonnull %2348, <4 x i64>* nonnull %2441, i8 signext %2824, i32 2, i32 2)
  %2825 = load <8 x i32>, <8 x i32>* %2506, align 32
  %2826 = load <8 x i32>, <8 x i32>* %2509, align 32
  %2827 = shufflevector <8 x i32> %2825, <8 x i32> %2826, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2828 = bitcast <8 x i32> %2827 to <4 x i64>
  %2829 = shufflevector <8 x i32> %2825, <8 x i32> %2826, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2830 = bitcast <8 x i32> %2829 to <4 x i64>
  %2831 = load <8 x i32>, <8 x i32>* %2516, align 32
  %2832 = load <8 x i32>, <8 x i32>* %2519, align 32
  %2833 = shufflevector <8 x i32> %2831, <8 x i32> %2832, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2834 = bitcast <8 x i32> %2833 to <4 x i64>
  %2835 = shufflevector <8 x i32> %2831, <8 x i32> %2832, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2836 = bitcast <8 x i32> %2835 to <4 x i64>
  %2837 = load <8 x i32>, <8 x i32>* %2526, align 32
  %2838 = load <8 x i32>, <8 x i32>* %2529, align 32
  %2839 = shufflevector <8 x i32> %2837, <8 x i32> %2838, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2840 = bitcast <8 x i32> %2839 to <4 x i64>
  %2841 = shufflevector <8 x i32> %2837, <8 x i32> %2838, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2842 = bitcast <8 x i32> %2841 to <4 x i64>
  %2843 = load <8 x i32>, <8 x i32>* %2536, align 32
  %2844 = load <8 x i32>, <8 x i32>* %2539, align 32
  %2845 = shufflevector <8 x i32> %2843, <8 x i32> %2844, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2846 = bitcast <8 x i32> %2845 to <4 x i64>
  %2847 = shufflevector <8 x i32> %2843, <8 x i32> %2844, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2848 = bitcast <8 x i32> %2847 to <4 x i64>
  %2849 = shufflevector <4 x i64> %2828, <4 x i64> %2834, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2850 = shufflevector <4 x i64> %2840, <4 x i64> %2846, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2851 = bitcast <4 x i64> %2849 to <8 x i32>
  %2852 = bitcast <4 x i64> %2850 to <8 x i32>
  %2853 = shufflevector <8 x i32> %2851, <8 x i32> %2852, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2853, <8 x i32>* %2550, align 32
  %2854 = shufflevector <8 x i32> %2851, <8 x i32> %2852, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2854, <8 x i32>* %2553, align 32
  %2855 = shufflevector <4 x i64> %2828, <4 x i64> %2834, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2856 = shufflevector <4 x i64> %2840, <4 x i64> %2846, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2857 = bitcast <4 x i64> %2855 to <8 x i32>
  %2858 = bitcast <4 x i64> %2856 to <8 x i32>
  %2859 = shufflevector <8 x i32> %2857, <8 x i32> %2858, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2859, <8 x i32>* %2560, align 32
  %2860 = shufflevector <8 x i32> %2857, <8 x i32> %2858, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2860, <8 x i32>* %2563, align 32
  %2861 = shufflevector <4 x i64> %2830, <4 x i64> %2836, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2862 = shufflevector <4 x i64> %2842, <4 x i64> %2848, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2863 = bitcast <4 x i64> %2861 to <8 x i32>
  %2864 = bitcast <4 x i64> %2862 to <8 x i32>
  %2865 = shufflevector <8 x i32> %2863, <8 x i32> %2864, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2865, <8 x i32>* %2570, align 32
  %2866 = shufflevector <8 x i32> %2863, <8 x i32> %2864, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2866, <8 x i32>* %2573, align 32
  %2867 = shufflevector <4 x i64> %2830, <4 x i64> %2836, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2868 = shufflevector <4 x i64> %2842, <4 x i64> %2848, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2869 = bitcast <4 x i64> %2867 to <8 x i32>
  %2870 = bitcast <4 x i64> %2868 to <8 x i32>
  %2871 = shufflevector <8 x i32> %2869, <8 x i32> %2870, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2871, <8 x i32>* %2580, align 32
  %2872 = shufflevector <8 x i32> %2869, <8 x i32> %2870, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2872, <8 x i32>* %2583, align 32
  %2873 = load <8 x i32>, <8 x i32>* %2586, align 32
  %2874 = load <8 x i32>, <8 x i32>* %2589, align 32
  %2875 = shufflevector <8 x i32> %2873, <8 x i32> %2874, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2876 = bitcast <8 x i32> %2875 to <4 x i64>
  %2877 = shufflevector <8 x i32> %2873, <8 x i32> %2874, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2878 = bitcast <8 x i32> %2877 to <4 x i64>
  %2879 = load <8 x i32>, <8 x i32>* %2596, align 32
  %2880 = load <8 x i32>, <8 x i32>* %2599, align 32
  %2881 = shufflevector <8 x i32> %2879, <8 x i32> %2880, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2882 = bitcast <8 x i32> %2881 to <4 x i64>
  %2883 = shufflevector <8 x i32> %2879, <8 x i32> %2880, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2884 = bitcast <8 x i32> %2883 to <4 x i64>
  %2885 = load <8 x i32>, <8 x i32>* %2606, align 32
  %2886 = load <8 x i32>, <8 x i32>* %2609, align 32
  %2887 = shufflevector <8 x i32> %2885, <8 x i32> %2886, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2888 = bitcast <8 x i32> %2887 to <4 x i64>
  %2889 = shufflevector <8 x i32> %2885, <8 x i32> %2886, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2890 = bitcast <8 x i32> %2889 to <4 x i64>
  %2891 = load <8 x i32>, <8 x i32>* %2616, align 32
  %2892 = load <8 x i32>, <8 x i32>* %2619, align 32
  %2893 = shufflevector <8 x i32> %2891, <8 x i32> %2892, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2894 = bitcast <8 x i32> %2893 to <4 x i64>
  %2895 = shufflevector <8 x i32> %2891, <8 x i32> %2892, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2896 = bitcast <8 x i32> %2895 to <4 x i64>
  %2897 = shufflevector <4 x i64> %2876, <4 x i64> %2882, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2898 = shufflevector <4 x i64> %2888, <4 x i64> %2894, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2899 = bitcast <4 x i64> %2897 to <8 x i32>
  %2900 = bitcast <4 x i64> %2898 to <8 x i32>
  %2901 = shufflevector <8 x i32> %2899, <8 x i32> %2900, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2901, <8 x i32>* %2630, align 32
  %2902 = shufflevector <8 x i32> %2899, <8 x i32> %2900, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2902, <8 x i32>* %2633, align 32
  %2903 = shufflevector <4 x i64> %2876, <4 x i64> %2882, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2904 = shufflevector <4 x i64> %2888, <4 x i64> %2894, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2905 = bitcast <4 x i64> %2903 to <8 x i32>
  %2906 = bitcast <4 x i64> %2904 to <8 x i32>
  %2907 = shufflevector <8 x i32> %2905, <8 x i32> %2906, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2907, <8 x i32>* %2640, align 32
  %2908 = shufflevector <8 x i32> %2905, <8 x i32> %2906, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2908, <8 x i32>* %2643, align 32
  %2909 = shufflevector <4 x i64> %2878, <4 x i64> %2884, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2910 = shufflevector <4 x i64> %2890, <4 x i64> %2896, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2911 = bitcast <4 x i64> %2909 to <8 x i32>
  %2912 = bitcast <4 x i64> %2910 to <8 x i32>
  %2913 = shufflevector <8 x i32> %2911, <8 x i32> %2912, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2913, <8 x i32>* %2650, align 32
  %2914 = shufflevector <8 x i32> %2911, <8 x i32> %2912, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2914, <8 x i32>* %2653, align 32
  %2915 = shufflevector <4 x i64> %2878, <4 x i64> %2884, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2916 = shufflevector <4 x i64> %2890, <4 x i64> %2896, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2917 = bitcast <4 x i64> %2915 to <8 x i32>
  %2918 = bitcast <4 x i64> %2916 to <8 x i32>
  %2919 = shufflevector <8 x i32> %2917, <8 x i32> %2918, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2919, <8 x i32>* %2660, align 32
  %2920 = shufflevector <8 x i32> %2917, <8 x i32> %2918, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2920, <8 x i32>* %2663, align 32
  %2921 = load <8 x i32>, <8 x i32>* %2666, align 32
  %2922 = load <8 x i32>, <8 x i32>* %2669, align 32
  %2923 = shufflevector <8 x i32> %2921, <8 x i32> %2922, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2924 = bitcast <8 x i32> %2923 to <4 x i64>
  %2925 = shufflevector <8 x i32> %2921, <8 x i32> %2922, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2926 = bitcast <8 x i32> %2925 to <4 x i64>
  %2927 = load <8 x i32>, <8 x i32>* %2676, align 32
  %2928 = load <8 x i32>, <8 x i32>* %2679, align 32
  %2929 = shufflevector <8 x i32> %2927, <8 x i32> %2928, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2930 = bitcast <8 x i32> %2929 to <4 x i64>
  %2931 = shufflevector <8 x i32> %2927, <8 x i32> %2928, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2932 = bitcast <8 x i32> %2931 to <4 x i64>
  %2933 = load <8 x i32>, <8 x i32>* %2686, align 32
  %2934 = load <8 x i32>, <8 x i32>* %2689, align 32
  %2935 = shufflevector <8 x i32> %2933, <8 x i32> %2934, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2936 = bitcast <8 x i32> %2935 to <4 x i64>
  %2937 = shufflevector <8 x i32> %2933, <8 x i32> %2934, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2938 = bitcast <8 x i32> %2937 to <4 x i64>
  %2939 = load <8 x i32>, <8 x i32>* %2696, align 32
  %2940 = load <8 x i32>, <8 x i32>* %2699, align 32
  %2941 = shufflevector <8 x i32> %2939, <8 x i32> %2940, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2942 = bitcast <8 x i32> %2941 to <4 x i64>
  %2943 = shufflevector <8 x i32> %2939, <8 x i32> %2940, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2944 = bitcast <8 x i32> %2943 to <4 x i64>
  %2945 = shufflevector <4 x i64> %2924, <4 x i64> %2930, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2946 = shufflevector <4 x i64> %2936, <4 x i64> %2942, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2947 = bitcast <4 x i64> %2945 to <8 x i32>
  %2948 = bitcast <4 x i64> %2946 to <8 x i32>
  %2949 = shufflevector <8 x i32> %2947, <8 x i32> %2948, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2949, <8 x i32>* %2710, align 32
  %2950 = shufflevector <8 x i32> %2947, <8 x i32> %2948, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2950, <8 x i32>* %2713, align 32
  %2951 = shufflevector <4 x i64> %2924, <4 x i64> %2930, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2952 = shufflevector <4 x i64> %2936, <4 x i64> %2942, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2953 = bitcast <4 x i64> %2951 to <8 x i32>
  %2954 = bitcast <4 x i64> %2952 to <8 x i32>
  %2955 = shufflevector <8 x i32> %2953, <8 x i32> %2954, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2955, <8 x i32>* %2720, align 32
  %2956 = shufflevector <8 x i32> %2953, <8 x i32> %2954, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2956, <8 x i32>* %2723, align 32
  %2957 = shufflevector <4 x i64> %2926, <4 x i64> %2932, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2958 = shufflevector <4 x i64> %2938, <4 x i64> %2944, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2959 = bitcast <4 x i64> %2957 to <8 x i32>
  %2960 = bitcast <4 x i64> %2958 to <8 x i32>
  %2961 = shufflevector <8 x i32> %2959, <8 x i32> %2960, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2961, <8 x i32>* %2730, align 32
  %2962 = shufflevector <8 x i32> %2959, <8 x i32> %2960, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2962, <8 x i32>* %2733, align 32
  %2963 = shufflevector <4 x i64> %2926, <4 x i64> %2932, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2964 = shufflevector <4 x i64> %2938, <4 x i64> %2944, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2965 = bitcast <4 x i64> %2963 to <8 x i32>
  %2966 = bitcast <4 x i64> %2964 to <8 x i32>
  %2967 = shufflevector <8 x i32> %2965, <8 x i32> %2966, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2967, <8 x i32>* %2740, align 32
  %2968 = shufflevector <8 x i32> %2965, <8 x i32> %2966, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2968, <8 x i32>* %2743, align 32
  %2969 = load <8 x i32>, <8 x i32>* %2746, align 32
  %2970 = load <8 x i32>, <8 x i32>* %2749, align 32
  %2971 = shufflevector <8 x i32> %2969, <8 x i32> %2970, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2972 = bitcast <8 x i32> %2971 to <4 x i64>
  %2973 = shufflevector <8 x i32> %2969, <8 x i32> %2970, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2974 = bitcast <8 x i32> %2973 to <4 x i64>
  %2975 = load <8 x i32>, <8 x i32>* %2756, align 32
  %2976 = load <8 x i32>, <8 x i32>* %2759, align 32
  %2977 = shufflevector <8 x i32> %2975, <8 x i32> %2976, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2978 = bitcast <8 x i32> %2977 to <4 x i64>
  %2979 = shufflevector <8 x i32> %2975, <8 x i32> %2976, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2980 = bitcast <8 x i32> %2979 to <4 x i64>
  %2981 = load <8 x i32>, <8 x i32>* %2766, align 32
  %2982 = load <8 x i32>, <8 x i32>* %2769, align 32
  %2983 = shufflevector <8 x i32> %2981, <8 x i32> %2982, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2984 = bitcast <8 x i32> %2983 to <4 x i64>
  %2985 = shufflevector <8 x i32> %2981, <8 x i32> %2982, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2986 = bitcast <8 x i32> %2985 to <4 x i64>
  %2987 = load <8 x i32>, <8 x i32>* %2776, align 32
  %2988 = load <8 x i32>, <8 x i32>* %2779, align 32
  %2989 = shufflevector <8 x i32> %2987, <8 x i32> %2988, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2990 = bitcast <8 x i32> %2989 to <4 x i64>
  %2991 = shufflevector <8 x i32> %2987, <8 x i32> %2988, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2992 = bitcast <8 x i32> %2991 to <4 x i64>
  %2993 = shufflevector <4 x i64> %2972, <4 x i64> %2978, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2994 = shufflevector <4 x i64> %2984, <4 x i64> %2990, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2995 = bitcast <4 x i64> %2993 to <8 x i32>
  %2996 = bitcast <4 x i64> %2994 to <8 x i32>
  %2997 = shufflevector <8 x i32> %2995, <8 x i32> %2996, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2997, <8 x i32>* %2790, align 32
  %2998 = shufflevector <8 x i32> %2995, <8 x i32> %2996, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2998, <8 x i32>* %2793, align 32
  %2999 = shufflevector <4 x i64> %2972, <4 x i64> %2978, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3000 = shufflevector <4 x i64> %2984, <4 x i64> %2990, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3001 = bitcast <4 x i64> %2999 to <8 x i32>
  %3002 = bitcast <4 x i64> %3000 to <8 x i32>
  %3003 = shufflevector <8 x i32> %3001, <8 x i32> %3002, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %3003, <8 x i32>* %2800, align 32
  %3004 = shufflevector <8 x i32> %3001, <8 x i32> %3002, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %3004, <8 x i32>* %2803, align 32
  %3005 = shufflevector <4 x i64> %2974, <4 x i64> %2980, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3006 = shufflevector <4 x i64> %2986, <4 x i64> %2992, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3007 = bitcast <4 x i64> %3005 to <8 x i32>
  %3008 = bitcast <4 x i64> %3006 to <8 x i32>
  %3009 = shufflevector <8 x i32> %3007, <8 x i32> %3008, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %3009, <8 x i32>* %2810, align 32
  %3010 = shufflevector <8 x i32> %3007, <8 x i32> %3008, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %3010, <8 x i32>* %2813, align 32
  %3011 = shufflevector <4 x i64> %2974, <4 x i64> %2980, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3012 = shufflevector <4 x i64> %2986, <4 x i64> %2992, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3013 = bitcast <4 x i64> %3011 to <8 x i32>
  %3014 = bitcast <4 x i64> %3012 to <8 x i32>
  %3015 = shufflevector <8 x i32> %3013, <8 x i32> %3014, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %3015, <8 x i32>* %2820, align 32
  %3016 = shufflevector <8 x i32> %3013, <8 x i32> %3014, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %3016, <8 x i32>* %2823, align 32
  br label %10159

3017:                                             ; preds = %5
  %3018 = bitcast [64 x <4 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %3018) #7
  %3019 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 16
  %3020 = bitcast <4 x i64>* %3019 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %3020, i8 -86, i64 1536, i1 false) #7
  %3021 = sext i32 %2 to i64
  %3022 = bitcast i16* %0 to <4 x i64>*
  %3023 = load <4 x i64>, <4 x i64>* %3022, align 1
  %3024 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 15
  store <4 x i64> %3023, <4 x i64>* %3024, align 32
  %3025 = getelementptr inbounds i16, i16* %0, i64 %3021
  %3026 = bitcast i16* %3025 to <4 x i64>*
  %3027 = load <4 x i64>, <4 x i64>* %3026, align 1
  %3028 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 14
  store <4 x i64> %3027, <4 x i64>* %3028, align 32
  %3029 = shl nsw i64 %3021, 1
  %3030 = getelementptr inbounds i16, i16* %0, i64 %3029
  %3031 = bitcast i16* %3030 to <4 x i64>*
  %3032 = load <4 x i64>, <4 x i64>* %3031, align 1
  %3033 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 13
  store <4 x i64> %3032, <4 x i64>* %3033, align 32
  %3034 = mul nsw i64 %3021, 3
  %3035 = getelementptr inbounds i16, i16* %0, i64 %3034
  %3036 = bitcast i16* %3035 to <4 x i64>*
  %3037 = load <4 x i64>, <4 x i64>* %3036, align 1
  %3038 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 12
  store <4 x i64> %3037, <4 x i64>* %3038, align 32
  %3039 = shl nsw i64 %3021, 2
  %3040 = getelementptr inbounds i16, i16* %0, i64 %3039
  %3041 = bitcast i16* %3040 to <4 x i64>*
  %3042 = load <4 x i64>, <4 x i64>* %3041, align 1
  %3043 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 11
  store <4 x i64> %3042, <4 x i64>* %3043, align 32
  %3044 = mul nsw i64 %3021, 5
  %3045 = getelementptr inbounds i16, i16* %0, i64 %3044
  %3046 = bitcast i16* %3045 to <4 x i64>*
  %3047 = load <4 x i64>, <4 x i64>* %3046, align 1
  %3048 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 10
  store <4 x i64> %3047, <4 x i64>* %3048, align 32
  %3049 = mul nsw i64 %3021, 6
  %3050 = getelementptr inbounds i16, i16* %0, i64 %3049
  %3051 = bitcast i16* %3050 to <4 x i64>*
  %3052 = load <4 x i64>, <4 x i64>* %3051, align 1
  %3053 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 9
  store <4 x i64> %3052, <4 x i64>* %3053, align 32
  %3054 = mul nsw i64 %3021, 7
  %3055 = getelementptr inbounds i16, i16* %0, i64 %3054
  %3056 = bitcast i16* %3055 to <4 x i64>*
  %3057 = load <4 x i64>, <4 x i64>* %3056, align 1
  %3058 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 8
  store <4 x i64> %3057, <4 x i64>* %3058, align 32
  %3059 = shl nsw i64 %3021, 3
  %3060 = getelementptr inbounds i16, i16* %0, i64 %3059
  %3061 = bitcast i16* %3060 to <4 x i64>*
  %3062 = load <4 x i64>, <4 x i64>* %3061, align 1
  %3063 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 7
  store <4 x i64> %3062, <4 x i64>* %3063, align 32
  %3064 = mul nsw i64 %3021, 9
  %3065 = getelementptr inbounds i16, i16* %0, i64 %3064
  %3066 = bitcast i16* %3065 to <4 x i64>*
  %3067 = load <4 x i64>, <4 x i64>* %3066, align 1
  %3068 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 6
  store <4 x i64> %3067, <4 x i64>* %3068, align 32
  %3069 = mul nsw i64 %3021, 10
  %3070 = getelementptr inbounds i16, i16* %0, i64 %3069
  %3071 = bitcast i16* %3070 to <4 x i64>*
  %3072 = load <4 x i64>, <4 x i64>* %3071, align 1
  %3073 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 5
  store <4 x i64> %3072, <4 x i64>* %3073, align 32
  %3074 = mul nsw i64 %3021, 11
  %3075 = getelementptr inbounds i16, i16* %0, i64 %3074
  %3076 = bitcast i16* %3075 to <4 x i64>*
  %3077 = load <4 x i64>, <4 x i64>* %3076, align 1
  %3078 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 4
  store <4 x i64> %3077, <4 x i64>* %3078, align 32
  %3079 = mul nsw i64 %3021, 12
  %3080 = getelementptr inbounds i16, i16* %0, i64 %3079
  %3081 = bitcast i16* %3080 to <4 x i64>*
  %3082 = load <4 x i64>, <4 x i64>* %3081, align 1
  %3083 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 3
  store <4 x i64> %3082, <4 x i64>* %3083, align 32
  %3084 = mul nsw i64 %3021, 13
  %3085 = getelementptr inbounds i16, i16* %0, i64 %3084
  %3086 = bitcast i16* %3085 to <4 x i64>*
  %3087 = load <4 x i64>, <4 x i64>* %3086, align 1
  %3088 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 2
  store <4 x i64> %3087, <4 x i64>* %3088, align 32
  %3089 = mul nsw i64 %3021, 14
  %3090 = getelementptr inbounds i16, i16* %0, i64 %3089
  %3091 = bitcast i16* %3090 to <4 x i64>*
  %3092 = load <4 x i64>, <4 x i64>* %3091, align 1
  %3093 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 1
  store <4 x i64> %3092, <4 x i64>* %3093, align 32
  %3094 = mul nsw i64 %3021, 15
  %3095 = getelementptr inbounds i16, i16* %0, i64 %3094
  %3096 = bitcast i16* %3095 to <4 x i64>*
  %3097 = load <4 x i64>, <4 x i64>* %3096, align 1
  %3098 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 0
  store <4 x i64> %3097, <4 x i64>* %3098, align 32
  %3099 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 0
  %3100 = shufflevector <4 x i64> %3097, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %3101 = bitcast <2 x i64> %3100 to <8 x i16>
  %3102 = sext <8 x i16> %3101 to <8 x i32>
  %3103 = bitcast [32 x <4 x i64>]* %8 to <8 x i32>*
  store <8 x i32> %3102, <8 x i32>* %3103, align 32
  %3104 = bitcast <4 x i64> %3097 to <8 x i32>
  %3105 = shufflevector <8 x i32> %3104, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3106 = bitcast <4 x i32> %3105 to <8 x i16>
  %3107 = sext <8 x i16> %3106 to <8 x i32>
  %3108 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 1
  %3109 = bitcast <4 x i64>* %3108 to <8 x i32>*
  store <8 x i32> %3107, <8 x i32>* %3109, align 32
  br label %3110

3110:                                             ; preds = %3017, %3110
  %3111 = phi i64 [ 1, %3017 ], [ %3127, %3110 ]
  %3112 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 %3111
  %3113 = load <4 x i64>, <4 x i64>* %3112, align 32
  %3114 = shufflevector <4 x i64> %3113, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %3115 = bitcast <2 x i64> %3114 to <8 x i16>
  %3116 = sext <8 x i16> %3115 to <8 x i32>
  %3117 = shl nuw nsw i64 %3111, 1
  %3118 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %3117
  %3119 = bitcast <4 x i64>* %3118 to <8 x i32>*
  store <8 x i32> %3116, <8 x i32>* %3119, align 32
  %3120 = bitcast <4 x i64> %3113 to <8 x i32>
  %3121 = shufflevector <8 x i32> %3120, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3122 = bitcast <4 x i32> %3121 to <8 x i16>
  %3123 = sext <8 x i16> %3122 to <8 x i32>
  %3124 = or i64 %3117, 1
  %3125 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %3124
  %3126 = bitcast <4 x i64>* %3125 to <8 x i32>*
  store <8 x i32> %3123, <8 x i32>* %3126, align 32
  %3127 = add nuw nsw i64 %3111, 1
  %3128 = icmp eq i64 %3127, 16
  br i1 %3128, label %3129, label %3110

3129:                                             ; preds = %3110
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %3018) #7
  %3130 = load i8, i8* %12, align 1
  %3131 = sext i8 %3130 to i32
  %3132 = icmp slt i8 %3130, 0
  br i1 %3132, label %3133, label %3166

3133:                                             ; preds = %3129
  %3134 = sub nsw i32 0, %3131
  %3135 = xor i32 %3131, -1
  %3136 = shl i32 1, %3135
  %3137 = insertelement <8 x i32> undef, i32 %3136, i32 0
  %3138 = shufflevector <8 x i32> %3137, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %3139

3139:                                             ; preds = %3139, %3133
  %3140 = phi i64 [ 0, %3133 ], [ %3164, %3139 ]
  %3141 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %3140
  %3142 = bitcast <4 x i64>* %3141 to <8 x i32>*
  %3143 = load <8 x i32>, <8 x i32>* %3142, align 32
  %3144 = add <8 x i32> %3143, %3138
  %3145 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %3144, i32 %3134) #7
  store <8 x i32> %3145, <8 x i32>* %3142, align 32
  %3146 = or i64 %3140, 1
  %3147 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %3146
  %3148 = bitcast <4 x i64>* %3147 to <8 x i32>*
  %3149 = load <8 x i32>, <8 x i32>* %3148, align 32
  %3150 = add <8 x i32> %3149, %3138
  %3151 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %3150, i32 %3134) #7
  store <8 x i32> %3151, <8 x i32>* %3148, align 32
  %3152 = or i64 %3140, 2
  %3153 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %3152
  %3154 = bitcast <4 x i64>* %3153 to <8 x i32>*
  %3155 = load <8 x i32>, <8 x i32>* %3154, align 32
  %3156 = add <8 x i32> %3155, %3138
  %3157 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %3156, i32 %3134) #7
  store <8 x i32> %3157, <8 x i32>* %3154, align 32
  %3158 = or i64 %3140, 3
  %3159 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %3158
  %3160 = bitcast <4 x i64>* %3159 to <8 x i32>*
  %3161 = load <8 x i32>, <8 x i32>* %3160, align 32
  %3162 = add <8 x i32> %3161, %3138
  %3163 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %3162, i32 %3134) #7
  store <8 x i32> %3163, <8 x i32>* %3160, align 32
  %3164 = add nuw nsw i64 %3140, 4
  %3165 = icmp eq i64 %3164, 32
  br i1 %3165, label %3191, label %3139

3166:                                             ; preds = %3129
  %3167 = icmp eq i8 %3130, 0
  br i1 %3167, label %3191, label %3168

3168:                                             ; preds = %3166, %3168
  %3169 = phi i64 [ %3189, %3168 ], [ 0, %3166 ]
  %3170 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %3169
  %3171 = bitcast <4 x i64>* %3170 to <8 x i32>*
  %3172 = load <8 x i32>, <8 x i32>* %3171, align 32
  %3173 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %3172, i32 %3131) #7
  store <8 x i32> %3173, <8 x i32>* %3171, align 32
  %3174 = or i64 %3169, 1
  %3175 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %3174
  %3176 = bitcast <4 x i64>* %3175 to <8 x i32>*
  %3177 = load <8 x i32>, <8 x i32>* %3176, align 32
  %3178 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %3177, i32 %3131) #7
  store <8 x i32> %3178, <8 x i32>* %3176, align 32
  %3179 = or i64 %3169, 2
  %3180 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %3179
  %3181 = bitcast <4 x i64>* %3180 to <8 x i32>*
  %3182 = load <8 x i32>, <8 x i32>* %3181, align 32
  %3183 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %3182, i32 %3131) #7
  store <8 x i32> %3183, <8 x i32>* %3181, align 32
  %3184 = or i64 %3169, 3
  %3185 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %3184
  %3186 = bitcast <4 x i64>* %3185 to <8 x i32>*
  %3187 = load <8 x i32>, <8 x i32>* %3186, align 32
  %3188 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %3187, i32 %3131) #7
  store <8 x i32> %3188, <8 x i32>* %3186, align 32
  %3189 = add nuw nsw i64 %3169, 4
  %3190 = icmp eq i64 %3189, 32
  br i1 %3190, label %3191, label %3168

3191:                                             ; preds = %3168, %3139, %3166
  %3192 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 0
  %3193 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 2, i64 2), align 2
  call void @fadst16_avx2(<4 x i64>* nonnull %3099, <4 x i64>* nonnull %3192, i8 signext %3193, i32 2, i32 2)
  %3194 = getelementptr inbounds i8, i8* %12, i64 1
  %3195 = load i8, i8* %3194, align 1
  %3196 = sext i8 %3195 to i32
  %3197 = icmp slt i8 %3195, 0
  br i1 %3197, label %3198, label %3231

3198:                                             ; preds = %3191
  %3199 = sub nsw i32 0, %3196
  %3200 = xor i32 %3196, -1
  %3201 = shl i32 1, %3200
  %3202 = insertelement <8 x i32> undef, i32 %3201, i32 0
  %3203 = shufflevector <8 x i32> %3202, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %3204

3204:                                             ; preds = %3204, %3198
  %3205 = phi i64 [ 0, %3198 ], [ %3229, %3204 ]
  %3206 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %3205
  %3207 = bitcast <4 x i64>* %3206 to <8 x i32>*
  %3208 = load <8 x i32>, <8 x i32>* %3207, align 32
  %3209 = add <8 x i32> %3208, %3203
  %3210 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %3209, i32 %3199) #7
  store <8 x i32> %3210, <8 x i32>* %3207, align 32
  %3211 = or i64 %3205, 1
  %3212 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %3211
  %3213 = bitcast <4 x i64>* %3212 to <8 x i32>*
  %3214 = load <8 x i32>, <8 x i32>* %3213, align 32
  %3215 = add <8 x i32> %3214, %3203
  %3216 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %3215, i32 %3199) #7
  store <8 x i32> %3216, <8 x i32>* %3213, align 32
  %3217 = or i64 %3205, 2
  %3218 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %3217
  %3219 = bitcast <4 x i64>* %3218 to <8 x i32>*
  %3220 = load <8 x i32>, <8 x i32>* %3219, align 32
  %3221 = add <8 x i32> %3220, %3203
  %3222 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %3221, i32 %3199) #7
  store <8 x i32> %3222, <8 x i32>* %3219, align 32
  %3223 = or i64 %3205, 3
  %3224 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %3223
  %3225 = bitcast <4 x i64>* %3224 to <8 x i32>*
  %3226 = load <8 x i32>, <8 x i32>* %3225, align 32
  %3227 = add <8 x i32> %3226, %3203
  %3228 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %3227, i32 %3199) #7
  store <8 x i32> %3228, <8 x i32>* %3225, align 32
  %3229 = add nuw nsw i64 %3205, 4
  %3230 = icmp eq i64 %3229, 32
  br i1 %3230, label %3256, label %3204

3231:                                             ; preds = %3191
  %3232 = icmp eq i8 %3195, 0
  br i1 %3232, label %3256, label %3233

3233:                                             ; preds = %3231, %3233
  %3234 = phi i64 [ %3254, %3233 ], [ 0, %3231 ]
  %3235 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %3234
  %3236 = bitcast <4 x i64>* %3235 to <8 x i32>*
  %3237 = load <8 x i32>, <8 x i32>* %3236, align 32
  %3238 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %3237, i32 %3196) #7
  store <8 x i32> %3238, <8 x i32>* %3236, align 32
  %3239 = or i64 %3234, 1
  %3240 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %3239
  %3241 = bitcast <4 x i64>* %3240 to <8 x i32>*
  %3242 = load <8 x i32>, <8 x i32>* %3241, align 32
  %3243 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %3242, i32 %3196) #7
  store <8 x i32> %3243, <8 x i32>* %3241, align 32
  %3244 = or i64 %3234, 2
  %3245 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %3244
  %3246 = bitcast <4 x i64>* %3245 to <8 x i32>*
  %3247 = load <8 x i32>, <8 x i32>* %3246, align 32
  %3248 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %3247, i32 %3196) #7
  store <8 x i32> %3248, <8 x i32>* %3246, align 32
  %3249 = or i64 %3234, 3
  %3250 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %3249
  %3251 = bitcast <4 x i64>* %3250 to <8 x i32>*
  %3252 = load <8 x i32>, <8 x i32>* %3251, align 32
  %3253 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %3252, i32 %3196) #7
  store <8 x i32> %3253, <8 x i32>* %3251, align 32
  %3254 = add nuw nsw i64 %3234, 4
  %3255 = icmp eq i64 %3254, 32
  br i1 %3255, label %3256, label %3233

3256:                                             ; preds = %3233, %3204, %3231
  %3257 = bitcast [32 x <4 x i64>]* %10 to <8 x i32>*
  %3258 = load <8 x i32>, <8 x i32>* %3257, align 32
  %3259 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 2
  %3260 = bitcast <4 x i64>* %3259 to <8 x i32>*
  %3261 = load <8 x i32>, <8 x i32>* %3260, align 32
  %3262 = shufflevector <8 x i32> %3258, <8 x i32> %3261, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3263 = bitcast <8 x i32> %3262 to <4 x i64>
  %3264 = shufflevector <8 x i32> %3258, <8 x i32> %3261, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3265 = bitcast <8 x i32> %3264 to <4 x i64>
  %3266 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 4
  %3267 = bitcast <4 x i64>* %3266 to <8 x i32>*
  %3268 = load <8 x i32>, <8 x i32>* %3267, align 32
  %3269 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 6
  %3270 = bitcast <4 x i64>* %3269 to <8 x i32>*
  %3271 = load <8 x i32>, <8 x i32>* %3270, align 32
  %3272 = shufflevector <8 x i32> %3268, <8 x i32> %3271, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3273 = bitcast <8 x i32> %3272 to <4 x i64>
  %3274 = shufflevector <8 x i32> %3268, <8 x i32> %3271, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3275 = bitcast <8 x i32> %3274 to <4 x i64>
  %3276 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 8
  %3277 = bitcast <4 x i64>* %3276 to <8 x i32>*
  %3278 = load <8 x i32>, <8 x i32>* %3277, align 32
  %3279 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 10
  %3280 = bitcast <4 x i64>* %3279 to <8 x i32>*
  %3281 = load <8 x i32>, <8 x i32>* %3280, align 32
  %3282 = shufflevector <8 x i32> %3278, <8 x i32> %3281, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3283 = bitcast <8 x i32> %3282 to <4 x i64>
  %3284 = shufflevector <8 x i32> %3278, <8 x i32> %3281, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3285 = bitcast <8 x i32> %3284 to <4 x i64>
  %3286 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 12
  %3287 = bitcast <4 x i64>* %3286 to <8 x i32>*
  %3288 = load <8 x i32>, <8 x i32>* %3287, align 32
  %3289 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 14
  %3290 = bitcast <4 x i64>* %3289 to <8 x i32>*
  %3291 = load <8 x i32>, <8 x i32>* %3290, align 32
  %3292 = shufflevector <8 x i32> %3288, <8 x i32> %3291, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3293 = bitcast <8 x i32> %3292 to <4 x i64>
  %3294 = shufflevector <8 x i32> %3288, <8 x i32> %3291, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3295 = bitcast <8 x i32> %3294 to <4 x i64>
  %3296 = shufflevector <4 x i64> %3263, <4 x i64> %3273, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3297 = shufflevector <4 x i64> %3283, <4 x i64> %3293, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3298 = bitcast <4 x i64> %3296 to <8 x i32>
  %3299 = bitcast <4 x i64> %3297 to <8 x i32>
  %3300 = shufflevector <8 x i32> %3298, <8 x i32> %3299, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %3301 = bitcast [32 x <4 x i64>]* %8 to <8 x i32>*
  store <8 x i32> %3300, <8 x i32>* %3301, align 32
  %3302 = shufflevector <8 x i32> %3298, <8 x i32> %3299, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %3303 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 8
  %3304 = bitcast <4 x i64>* %3303 to <8 x i32>*
  store <8 x i32> %3302, <8 x i32>* %3304, align 32
  %3305 = shufflevector <4 x i64> %3263, <4 x i64> %3273, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3306 = shufflevector <4 x i64> %3283, <4 x i64> %3293, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3307 = bitcast <4 x i64> %3305 to <8 x i32>
  %3308 = bitcast <4 x i64> %3306 to <8 x i32>
  %3309 = shufflevector <8 x i32> %3307, <8 x i32> %3308, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %3310 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 2
  %3311 = bitcast <4 x i64>* %3310 to <8 x i32>*
  store <8 x i32> %3309, <8 x i32>* %3311, align 32
  %3312 = shufflevector <8 x i32> %3307, <8 x i32> %3308, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %3313 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 10
  %3314 = bitcast <4 x i64>* %3313 to <8 x i32>*
  store <8 x i32> %3312, <8 x i32>* %3314, align 32
  %3315 = shufflevector <4 x i64> %3265, <4 x i64> %3275, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3316 = shufflevector <4 x i64> %3285, <4 x i64> %3295, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3317 = bitcast <4 x i64> %3315 to <8 x i32>
  %3318 = bitcast <4 x i64> %3316 to <8 x i32>
  %3319 = shufflevector <8 x i32> %3317, <8 x i32> %3318, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %3320 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 4
  %3321 = bitcast <4 x i64>* %3320 to <8 x i32>*
  store <8 x i32> %3319, <8 x i32>* %3321, align 32
  %3322 = shufflevector <8 x i32> %3317, <8 x i32> %3318, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %3323 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 12
  %3324 = bitcast <4 x i64>* %3323 to <8 x i32>*
  store <8 x i32> %3322, <8 x i32>* %3324, align 32
  %3325 = shufflevector <4 x i64> %3265, <4 x i64> %3275, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3326 = shufflevector <4 x i64> %3285, <4 x i64> %3295, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3327 = bitcast <4 x i64> %3325 to <8 x i32>
  %3328 = bitcast <4 x i64> %3326 to <8 x i32>
  %3329 = shufflevector <8 x i32> %3327, <8 x i32> %3328, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %3330 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 6
  %3331 = bitcast <4 x i64>* %3330 to <8 x i32>*
  store <8 x i32> %3329, <8 x i32>* %3331, align 32
  %3332 = shufflevector <8 x i32> %3327, <8 x i32> %3328, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %3333 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 14
  %3334 = bitcast <4 x i64>* %3333 to <8 x i32>*
  store <8 x i32> %3332, <8 x i32>* %3334, align 32
  %3335 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 1
  %3336 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 16
  %3337 = bitcast <4 x i64>* %3335 to <8 x i32>*
  %3338 = load <8 x i32>, <8 x i32>* %3337, align 32
  %3339 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 3
  %3340 = bitcast <4 x i64>* %3339 to <8 x i32>*
  %3341 = load <8 x i32>, <8 x i32>* %3340, align 32
  %3342 = shufflevector <8 x i32> %3338, <8 x i32> %3341, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3343 = bitcast <8 x i32> %3342 to <4 x i64>
  %3344 = shufflevector <8 x i32> %3338, <8 x i32> %3341, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3345 = bitcast <8 x i32> %3344 to <4 x i64>
  %3346 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 5
  %3347 = bitcast <4 x i64>* %3346 to <8 x i32>*
  %3348 = load <8 x i32>, <8 x i32>* %3347, align 32
  %3349 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 7
  %3350 = bitcast <4 x i64>* %3349 to <8 x i32>*
  %3351 = load <8 x i32>, <8 x i32>* %3350, align 32
  %3352 = shufflevector <8 x i32> %3348, <8 x i32> %3351, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3353 = bitcast <8 x i32> %3352 to <4 x i64>
  %3354 = shufflevector <8 x i32> %3348, <8 x i32> %3351, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3355 = bitcast <8 x i32> %3354 to <4 x i64>
  %3356 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 9
  %3357 = bitcast <4 x i64>* %3356 to <8 x i32>*
  %3358 = load <8 x i32>, <8 x i32>* %3357, align 32
  %3359 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 11
  %3360 = bitcast <4 x i64>* %3359 to <8 x i32>*
  %3361 = load <8 x i32>, <8 x i32>* %3360, align 32
  %3362 = shufflevector <8 x i32> %3358, <8 x i32> %3361, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3363 = bitcast <8 x i32> %3362 to <4 x i64>
  %3364 = shufflevector <8 x i32> %3358, <8 x i32> %3361, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3365 = bitcast <8 x i32> %3364 to <4 x i64>
  %3366 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 13
  %3367 = bitcast <4 x i64>* %3366 to <8 x i32>*
  %3368 = load <8 x i32>, <8 x i32>* %3367, align 32
  %3369 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 15
  %3370 = bitcast <4 x i64>* %3369 to <8 x i32>*
  %3371 = load <8 x i32>, <8 x i32>* %3370, align 32
  %3372 = shufflevector <8 x i32> %3368, <8 x i32> %3371, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3373 = bitcast <8 x i32> %3372 to <4 x i64>
  %3374 = shufflevector <8 x i32> %3368, <8 x i32> %3371, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3375 = bitcast <8 x i32> %3374 to <4 x i64>
  %3376 = shufflevector <4 x i64> %3343, <4 x i64> %3353, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3377 = shufflevector <4 x i64> %3363, <4 x i64> %3373, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3378 = bitcast <4 x i64> %3376 to <8 x i32>
  %3379 = bitcast <4 x i64> %3377 to <8 x i32>
  %3380 = shufflevector <8 x i32> %3378, <8 x i32> %3379, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %3381 = bitcast <4 x i64>* %3336 to <8 x i32>*
  store <8 x i32> %3380, <8 x i32>* %3381, align 32
  %3382 = shufflevector <8 x i32> %3378, <8 x i32> %3379, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %3383 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 24
  %3384 = bitcast <4 x i64>* %3383 to <8 x i32>*
  store <8 x i32> %3382, <8 x i32>* %3384, align 32
  %3385 = shufflevector <4 x i64> %3343, <4 x i64> %3353, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3386 = shufflevector <4 x i64> %3363, <4 x i64> %3373, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3387 = bitcast <4 x i64> %3385 to <8 x i32>
  %3388 = bitcast <4 x i64> %3386 to <8 x i32>
  %3389 = shufflevector <8 x i32> %3387, <8 x i32> %3388, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %3390 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 18
  %3391 = bitcast <4 x i64>* %3390 to <8 x i32>*
  store <8 x i32> %3389, <8 x i32>* %3391, align 32
  %3392 = shufflevector <8 x i32> %3387, <8 x i32> %3388, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %3393 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 26
  %3394 = bitcast <4 x i64>* %3393 to <8 x i32>*
  store <8 x i32> %3392, <8 x i32>* %3394, align 32
  %3395 = shufflevector <4 x i64> %3345, <4 x i64> %3355, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3396 = shufflevector <4 x i64> %3365, <4 x i64> %3375, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3397 = bitcast <4 x i64> %3395 to <8 x i32>
  %3398 = bitcast <4 x i64> %3396 to <8 x i32>
  %3399 = shufflevector <8 x i32> %3397, <8 x i32> %3398, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %3400 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 20
  %3401 = bitcast <4 x i64>* %3400 to <8 x i32>*
  store <8 x i32> %3399, <8 x i32>* %3401, align 32
  %3402 = shufflevector <8 x i32> %3397, <8 x i32> %3398, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %3403 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 28
  %3404 = bitcast <4 x i64>* %3403 to <8 x i32>*
  store <8 x i32> %3402, <8 x i32>* %3404, align 32
  %3405 = shufflevector <4 x i64> %3345, <4 x i64> %3355, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3406 = shufflevector <4 x i64> %3365, <4 x i64> %3375, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3407 = bitcast <4 x i64> %3405 to <8 x i32>
  %3408 = bitcast <4 x i64> %3406 to <8 x i32>
  %3409 = shufflevector <8 x i32> %3407, <8 x i32> %3408, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %3410 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 22
  %3411 = bitcast <4 x i64>* %3410 to <8 x i32>*
  store <8 x i32> %3409, <8 x i32>* %3411, align 32
  %3412 = shufflevector <8 x i32> %3407, <8 x i32> %3408, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %3413 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 30
  %3414 = bitcast <4 x i64>* %3413 to <8 x i32>*
  store <8 x i32> %3412, <8 x i32>* %3414, align 32
  %3415 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 16
  %3416 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 1
  %3417 = bitcast <4 x i64>* %3415 to <8 x i32>*
  %3418 = load <8 x i32>, <8 x i32>* %3417, align 32
  %3419 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 18
  %3420 = bitcast <4 x i64>* %3419 to <8 x i32>*
  %3421 = load <8 x i32>, <8 x i32>* %3420, align 32
  %3422 = shufflevector <8 x i32> %3418, <8 x i32> %3421, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3423 = bitcast <8 x i32> %3422 to <4 x i64>
  %3424 = shufflevector <8 x i32> %3418, <8 x i32> %3421, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3425 = bitcast <8 x i32> %3424 to <4 x i64>
  %3426 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 20
  %3427 = bitcast <4 x i64>* %3426 to <8 x i32>*
  %3428 = load <8 x i32>, <8 x i32>* %3427, align 32
  %3429 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 22
  %3430 = bitcast <4 x i64>* %3429 to <8 x i32>*
  %3431 = load <8 x i32>, <8 x i32>* %3430, align 32
  %3432 = shufflevector <8 x i32> %3428, <8 x i32> %3431, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3433 = bitcast <8 x i32> %3432 to <4 x i64>
  %3434 = shufflevector <8 x i32> %3428, <8 x i32> %3431, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3435 = bitcast <8 x i32> %3434 to <4 x i64>
  %3436 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 24
  %3437 = bitcast <4 x i64>* %3436 to <8 x i32>*
  %3438 = load <8 x i32>, <8 x i32>* %3437, align 32
  %3439 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 26
  %3440 = bitcast <4 x i64>* %3439 to <8 x i32>*
  %3441 = load <8 x i32>, <8 x i32>* %3440, align 32
  %3442 = shufflevector <8 x i32> %3438, <8 x i32> %3441, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3443 = bitcast <8 x i32> %3442 to <4 x i64>
  %3444 = shufflevector <8 x i32> %3438, <8 x i32> %3441, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3445 = bitcast <8 x i32> %3444 to <4 x i64>
  %3446 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 28
  %3447 = bitcast <4 x i64>* %3446 to <8 x i32>*
  %3448 = load <8 x i32>, <8 x i32>* %3447, align 32
  %3449 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 30
  %3450 = bitcast <4 x i64>* %3449 to <8 x i32>*
  %3451 = load <8 x i32>, <8 x i32>* %3450, align 32
  %3452 = shufflevector <8 x i32> %3448, <8 x i32> %3451, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3453 = bitcast <8 x i32> %3452 to <4 x i64>
  %3454 = shufflevector <8 x i32> %3448, <8 x i32> %3451, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3455 = bitcast <8 x i32> %3454 to <4 x i64>
  %3456 = shufflevector <4 x i64> %3423, <4 x i64> %3433, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3457 = shufflevector <4 x i64> %3443, <4 x i64> %3453, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3458 = bitcast <4 x i64> %3456 to <8 x i32>
  %3459 = bitcast <4 x i64> %3457 to <8 x i32>
  %3460 = shufflevector <8 x i32> %3458, <8 x i32> %3459, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %3461 = bitcast <4 x i64>* %3416 to <8 x i32>*
  store <8 x i32> %3460, <8 x i32>* %3461, align 32
  %3462 = shufflevector <8 x i32> %3458, <8 x i32> %3459, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %3463 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 9
  %3464 = bitcast <4 x i64>* %3463 to <8 x i32>*
  store <8 x i32> %3462, <8 x i32>* %3464, align 32
  %3465 = shufflevector <4 x i64> %3423, <4 x i64> %3433, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3466 = shufflevector <4 x i64> %3443, <4 x i64> %3453, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3467 = bitcast <4 x i64> %3465 to <8 x i32>
  %3468 = bitcast <4 x i64> %3466 to <8 x i32>
  %3469 = shufflevector <8 x i32> %3467, <8 x i32> %3468, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %3470 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 3
  %3471 = bitcast <4 x i64>* %3470 to <8 x i32>*
  store <8 x i32> %3469, <8 x i32>* %3471, align 32
  %3472 = shufflevector <8 x i32> %3467, <8 x i32> %3468, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %3473 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 11
  %3474 = bitcast <4 x i64>* %3473 to <8 x i32>*
  store <8 x i32> %3472, <8 x i32>* %3474, align 32
  %3475 = shufflevector <4 x i64> %3425, <4 x i64> %3435, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3476 = shufflevector <4 x i64> %3445, <4 x i64> %3455, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3477 = bitcast <4 x i64> %3475 to <8 x i32>
  %3478 = bitcast <4 x i64> %3476 to <8 x i32>
  %3479 = shufflevector <8 x i32> %3477, <8 x i32> %3478, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %3480 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 5
  %3481 = bitcast <4 x i64>* %3480 to <8 x i32>*
  store <8 x i32> %3479, <8 x i32>* %3481, align 32
  %3482 = shufflevector <8 x i32> %3477, <8 x i32> %3478, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %3483 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 13
  %3484 = bitcast <4 x i64>* %3483 to <8 x i32>*
  store <8 x i32> %3482, <8 x i32>* %3484, align 32
  %3485 = shufflevector <4 x i64> %3425, <4 x i64> %3435, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3486 = shufflevector <4 x i64> %3445, <4 x i64> %3455, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3487 = bitcast <4 x i64> %3485 to <8 x i32>
  %3488 = bitcast <4 x i64> %3486 to <8 x i32>
  %3489 = shufflevector <8 x i32> %3487, <8 x i32> %3488, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %3490 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 7
  %3491 = bitcast <4 x i64>* %3490 to <8 x i32>*
  store <8 x i32> %3489, <8 x i32>* %3491, align 32
  %3492 = shufflevector <8 x i32> %3487, <8 x i32> %3488, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %3493 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 15
  %3494 = bitcast <4 x i64>* %3493 to <8 x i32>*
  store <8 x i32> %3492, <8 x i32>* %3494, align 32
  %3495 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 17
  %3496 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 17
  %3497 = bitcast <4 x i64>* %3495 to <8 x i32>*
  %3498 = load <8 x i32>, <8 x i32>* %3497, align 32
  %3499 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 19
  %3500 = bitcast <4 x i64>* %3499 to <8 x i32>*
  %3501 = load <8 x i32>, <8 x i32>* %3500, align 32
  %3502 = shufflevector <8 x i32> %3498, <8 x i32> %3501, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3503 = bitcast <8 x i32> %3502 to <4 x i64>
  %3504 = shufflevector <8 x i32> %3498, <8 x i32> %3501, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3505 = bitcast <8 x i32> %3504 to <4 x i64>
  %3506 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 21
  %3507 = bitcast <4 x i64>* %3506 to <8 x i32>*
  %3508 = load <8 x i32>, <8 x i32>* %3507, align 32
  %3509 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 23
  %3510 = bitcast <4 x i64>* %3509 to <8 x i32>*
  %3511 = load <8 x i32>, <8 x i32>* %3510, align 32
  %3512 = shufflevector <8 x i32> %3508, <8 x i32> %3511, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3513 = bitcast <8 x i32> %3512 to <4 x i64>
  %3514 = shufflevector <8 x i32> %3508, <8 x i32> %3511, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3515 = bitcast <8 x i32> %3514 to <4 x i64>
  %3516 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 25
  %3517 = bitcast <4 x i64>* %3516 to <8 x i32>*
  %3518 = load <8 x i32>, <8 x i32>* %3517, align 32
  %3519 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 27
  %3520 = bitcast <4 x i64>* %3519 to <8 x i32>*
  %3521 = load <8 x i32>, <8 x i32>* %3520, align 32
  %3522 = shufflevector <8 x i32> %3518, <8 x i32> %3521, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3523 = bitcast <8 x i32> %3522 to <4 x i64>
  %3524 = shufflevector <8 x i32> %3518, <8 x i32> %3521, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3525 = bitcast <8 x i32> %3524 to <4 x i64>
  %3526 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 29
  %3527 = bitcast <4 x i64>* %3526 to <8 x i32>*
  %3528 = load <8 x i32>, <8 x i32>* %3527, align 32
  %3529 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 31
  %3530 = bitcast <4 x i64>* %3529 to <8 x i32>*
  %3531 = load <8 x i32>, <8 x i32>* %3530, align 32
  %3532 = shufflevector <8 x i32> %3528, <8 x i32> %3531, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3533 = bitcast <8 x i32> %3532 to <4 x i64>
  %3534 = shufflevector <8 x i32> %3528, <8 x i32> %3531, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3535 = bitcast <8 x i32> %3534 to <4 x i64>
  %3536 = shufflevector <4 x i64> %3503, <4 x i64> %3513, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3537 = shufflevector <4 x i64> %3523, <4 x i64> %3533, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3538 = bitcast <4 x i64> %3536 to <8 x i32>
  %3539 = bitcast <4 x i64> %3537 to <8 x i32>
  %3540 = shufflevector <8 x i32> %3538, <8 x i32> %3539, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %3541 = bitcast <4 x i64>* %3496 to <8 x i32>*
  store <8 x i32> %3540, <8 x i32>* %3541, align 32
  %3542 = shufflevector <8 x i32> %3538, <8 x i32> %3539, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %3543 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 25
  %3544 = bitcast <4 x i64>* %3543 to <8 x i32>*
  store <8 x i32> %3542, <8 x i32>* %3544, align 32
  %3545 = shufflevector <4 x i64> %3503, <4 x i64> %3513, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3546 = shufflevector <4 x i64> %3523, <4 x i64> %3533, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3547 = bitcast <4 x i64> %3545 to <8 x i32>
  %3548 = bitcast <4 x i64> %3546 to <8 x i32>
  %3549 = shufflevector <8 x i32> %3547, <8 x i32> %3548, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %3550 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 19
  %3551 = bitcast <4 x i64>* %3550 to <8 x i32>*
  store <8 x i32> %3549, <8 x i32>* %3551, align 32
  %3552 = shufflevector <8 x i32> %3547, <8 x i32> %3548, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %3553 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 27
  %3554 = bitcast <4 x i64>* %3553 to <8 x i32>*
  store <8 x i32> %3552, <8 x i32>* %3554, align 32
  %3555 = shufflevector <4 x i64> %3505, <4 x i64> %3515, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3556 = shufflevector <4 x i64> %3525, <4 x i64> %3535, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3557 = bitcast <4 x i64> %3555 to <8 x i32>
  %3558 = bitcast <4 x i64> %3556 to <8 x i32>
  %3559 = shufflevector <8 x i32> %3557, <8 x i32> %3558, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %3560 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 21
  %3561 = bitcast <4 x i64>* %3560 to <8 x i32>*
  store <8 x i32> %3559, <8 x i32>* %3561, align 32
  %3562 = shufflevector <8 x i32> %3557, <8 x i32> %3558, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %3563 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 29
  %3564 = bitcast <4 x i64>* %3563 to <8 x i32>*
  store <8 x i32> %3562, <8 x i32>* %3564, align 32
  %3565 = shufflevector <4 x i64> %3505, <4 x i64> %3515, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3566 = shufflevector <4 x i64> %3525, <4 x i64> %3535, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3567 = bitcast <4 x i64> %3565 to <8 x i32>
  %3568 = bitcast <4 x i64> %3566 to <8 x i32>
  %3569 = shufflevector <8 x i32> %3567, <8 x i32> %3568, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %3570 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 23
  %3571 = bitcast <4 x i64>* %3570 to <8 x i32>*
  store <8 x i32> %3569, <8 x i32>* %3571, align 32
  %3572 = shufflevector <8 x i32> %3567, <8 x i32> %3568, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %3573 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 31
  %3574 = bitcast <4 x i64>* %3573 to <8 x i32>*
  store <8 x i32> %3572, <8 x i32>* %3574, align 32
  %3575 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 2, i64 2), align 2
  call void @fdct16_avx2(<4 x i64>* nonnull %3099, <4 x i64>* nonnull %3192, i8 signext %3575, i32 2, i32 2)
  %3576 = load <8 x i32>, <8 x i32>* %3257, align 32
  %3577 = load <8 x i32>, <8 x i32>* %3260, align 32
  %3578 = shufflevector <8 x i32> %3576, <8 x i32> %3577, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3579 = bitcast <8 x i32> %3578 to <4 x i64>
  %3580 = shufflevector <8 x i32> %3576, <8 x i32> %3577, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3581 = bitcast <8 x i32> %3580 to <4 x i64>
  %3582 = load <8 x i32>, <8 x i32>* %3267, align 32
  %3583 = load <8 x i32>, <8 x i32>* %3270, align 32
  %3584 = shufflevector <8 x i32> %3582, <8 x i32> %3583, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3585 = bitcast <8 x i32> %3584 to <4 x i64>
  %3586 = shufflevector <8 x i32> %3582, <8 x i32> %3583, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3587 = bitcast <8 x i32> %3586 to <4 x i64>
  %3588 = load <8 x i32>, <8 x i32>* %3277, align 32
  %3589 = load <8 x i32>, <8 x i32>* %3280, align 32
  %3590 = shufflevector <8 x i32> %3588, <8 x i32> %3589, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3591 = bitcast <8 x i32> %3590 to <4 x i64>
  %3592 = shufflevector <8 x i32> %3588, <8 x i32> %3589, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3593 = bitcast <8 x i32> %3592 to <4 x i64>
  %3594 = load <8 x i32>, <8 x i32>* %3287, align 32
  %3595 = load <8 x i32>, <8 x i32>* %3290, align 32
  %3596 = shufflevector <8 x i32> %3594, <8 x i32> %3595, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3597 = bitcast <8 x i32> %3596 to <4 x i64>
  %3598 = shufflevector <8 x i32> %3594, <8 x i32> %3595, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3599 = bitcast <8 x i32> %3598 to <4 x i64>
  %3600 = shufflevector <4 x i64> %3579, <4 x i64> %3585, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3601 = shufflevector <4 x i64> %3591, <4 x i64> %3597, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3602 = bitcast <4 x i64> %3600 to <8 x i32>
  %3603 = bitcast <4 x i64> %3601 to <8 x i32>
  %3604 = shufflevector <8 x i32> %3602, <8 x i32> %3603, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %3604, <8 x i32>* %3301, align 32
  %3605 = shufflevector <8 x i32> %3602, <8 x i32> %3603, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %3605, <8 x i32>* %3304, align 32
  %3606 = shufflevector <4 x i64> %3579, <4 x i64> %3585, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3607 = shufflevector <4 x i64> %3591, <4 x i64> %3597, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3608 = bitcast <4 x i64> %3606 to <8 x i32>
  %3609 = bitcast <4 x i64> %3607 to <8 x i32>
  %3610 = shufflevector <8 x i32> %3608, <8 x i32> %3609, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %3610, <8 x i32>* %3311, align 32
  %3611 = shufflevector <8 x i32> %3608, <8 x i32> %3609, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %3611, <8 x i32>* %3314, align 32
  %3612 = shufflevector <4 x i64> %3581, <4 x i64> %3587, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3613 = shufflevector <4 x i64> %3593, <4 x i64> %3599, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3614 = bitcast <4 x i64> %3612 to <8 x i32>
  %3615 = bitcast <4 x i64> %3613 to <8 x i32>
  %3616 = shufflevector <8 x i32> %3614, <8 x i32> %3615, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %3616, <8 x i32>* %3321, align 32
  %3617 = shufflevector <8 x i32> %3614, <8 x i32> %3615, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %3617, <8 x i32>* %3324, align 32
  %3618 = shufflevector <4 x i64> %3581, <4 x i64> %3587, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3619 = shufflevector <4 x i64> %3593, <4 x i64> %3599, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3620 = bitcast <4 x i64> %3618 to <8 x i32>
  %3621 = bitcast <4 x i64> %3619 to <8 x i32>
  %3622 = shufflevector <8 x i32> %3620, <8 x i32> %3621, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %3622, <8 x i32>* %3331, align 32
  %3623 = shufflevector <8 x i32> %3620, <8 x i32> %3621, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %3623, <8 x i32>* %3334, align 32
  %3624 = load <8 x i32>, <8 x i32>* %3337, align 32
  %3625 = load <8 x i32>, <8 x i32>* %3340, align 32
  %3626 = shufflevector <8 x i32> %3624, <8 x i32> %3625, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3627 = bitcast <8 x i32> %3626 to <4 x i64>
  %3628 = shufflevector <8 x i32> %3624, <8 x i32> %3625, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3629 = bitcast <8 x i32> %3628 to <4 x i64>
  %3630 = load <8 x i32>, <8 x i32>* %3347, align 32
  %3631 = load <8 x i32>, <8 x i32>* %3350, align 32
  %3632 = shufflevector <8 x i32> %3630, <8 x i32> %3631, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3633 = bitcast <8 x i32> %3632 to <4 x i64>
  %3634 = shufflevector <8 x i32> %3630, <8 x i32> %3631, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3635 = bitcast <8 x i32> %3634 to <4 x i64>
  %3636 = load <8 x i32>, <8 x i32>* %3357, align 32
  %3637 = load <8 x i32>, <8 x i32>* %3360, align 32
  %3638 = shufflevector <8 x i32> %3636, <8 x i32> %3637, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3639 = bitcast <8 x i32> %3638 to <4 x i64>
  %3640 = shufflevector <8 x i32> %3636, <8 x i32> %3637, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3641 = bitcast <8 x i32> %3640 to <4 x i64>
  %3642 = load <8 x i32>, <8 x i32>* %3367, align 32
  %3643 = load <8 x i32>, <8 x i32>* %3370, align 32
  %3644 = shufflevector <8 x i32> %3642, <8 x i32> %3643, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3645 = bitcast <8 x i32> %3644 to <4 x i64>
  %3646 = shufflevector <8 x i32> %3642, <8 x i32> %3643, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3647 = bitcast <8 x i32> %3646 to <4 x i64>
  %3648 = shufflevector <4 x i64> %3627, <4 x i64> %3633, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3649 = shufflevector <4 x i64> %3639, <4 x i64> %3645, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3650 = bitcast <4 x i64> %3648 to <8 x i32>
  %3651 = bitcast <4 x i64> %3649 to <8 x i32>
  %3652 = shufflevector <8 x i32> %3650, <8 x i32> %3651, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %3652, <8 x i32>* %3381, align 32
  %3653 = shufflevector <8 x i32> %3650, <8 x i32> %3651, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %3653, <8 x i32>* %3384, align 32
  %3654 = shufflevector <4 x i64> %3627, <4 x i64> %3633, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3655 = shufflevector <4 x i64> %3639, <4 x i64> %3645, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3656 = bitcast <4 x i64> %3654 to <8 x i32>
  %3657 = bitcast <4 x i64> %3655 to <8 x i32>
  %3658 = shufflevector <8 x i32> %3656, <8 x i32> %3657, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %3658, <8 x i32>* %3391, align 32
  %3659 = shufflevector <8 x i32> %3656, <8 x i32> %3657, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %3659, <8 x i32>* %3394, align 32
  %3660 = shufflevector <4 x i64> %3629, <4 x i64> %3635, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3661 = shufflevector <4 x i64> %3641, <4 x i64> %3647, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3662 = bitcast <4 x i64> %3660 to <8 x i32>
  %3663 = bitcast <4 x i64> %3661 to <8 x i32>
  %3664 = shufflevector <8 x i32> %3662, <8 x i32> %3663, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %3664, <8 x i32>* %3401, align 32
  %3665 = shufflevector <8 x i32> %3662, <8 x i32> %3663, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %3665, <8 x i32>* %3404, align 32
  %3666 = shufflevector <4 x i64> %3629, <4 x i64> %3635, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3667 = shufflevector <4 x i64> %3641, <4 x i64> %3647, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3668 = bitcast <4 x i64> %3666 to <8 x i32>
  %3669 = bitcast <4 x i64> %3667 to <8 x i32>
  %3670 = shufflevector <8 x i32> %3668, <8 x i32> %3669, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %3670, <8 x i32>* %3411, align 32
  %3671 = shufflevector <8 x i32> %3668, <8 x i32> %3669, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %3671, <8 x i32>* %3414, align 32
  %3672 = load <8 x i32>, <8 x i32>* %3417, align 32
  %3673 = load <8 x i32>, <8 x i32>* %3420, align 32
  %3674 = shufflevector <8 x i32> %3672, <8 x i32> %3673, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3675 = bitcast <8 x i32> %3674 to <4 x i64>
  %3676 = shufflevector <8 x i32> %3672, <8 x i32> %3673, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3677 = bitcast <8 x i32> %3676 to <4 x i64>
  %3678 = load <8 x i32>, <8 x i32>* %3427, align 32
  %3679 = load <8 x i32>, <8 x i32>* %3430, align 32
  %3680 = shufflevector <8 x i32> %3678, <8 x i32> %3679, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3681 = bitcast <8 x i32> %3680 to <4 x i64>
  %3682 = shufflevector <8 x i32> %3678, <8 x i32> %3679, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3683 = bitcast <8 x i32> %3682 to <4 x i64>
  %3684 = load <8 x i32>, <8 x i32>* %3437, align 32
  %3685 = load <8 x i32>, <8 x i32>* %3440, align 32
  %3686 = shufflevector <8 x i32> %3684, <8 x i32> %3685, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3687 = bitcast <8 x i32> %3686 to <4 x i64>
  %3688 = shufflevector <8 x i32> %3684, <8 x i32> %3685, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3689 = bitcast <8 x i32> %3688 to <4 x i64>
  %3690 = load <8 x i32>, <8 x i32>* %3447, align 32
  %3691 = load <8 x i32>, <8 x i32>* %3450, align 32
  %3692 = shufflevector <8 x i32> %3690, <8 x i32> %3691, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3693 = bitcast <8 x i32> %3692 to <4 x i64>
  %3694 = shufflevector <8 x i32> %3690, <8 x i32> %3691, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3695 = bitcast <8 x i32> %3694 to <4 x i64>
  %3696 = shufflevector <4 x i64> %3675, <4 x i64> %3681, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3697 = shufflevector <4 x i64> %3687, <4 x i64> %3693, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3698 = bitcast <4 x i64> %3696 to <8 x i32>
  %3699 = bitcast <4 x i64> %3697 to <8 x i32>
  %3700 = shufflevector <8 x i32> %3698, <8 x i32> %3699, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %3700, <8 x i32>* %3461, align 32
  %3701 = shufflevector <8 x i32> %3698, <8 x i32> %3699, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %3701, <8 x i32>* %3464, align 32
  %3702 = shufflevector <4 x i64> %3675, <4 x i64> %3681, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3703 = shufflevector <4 x i64> %3687, <4 x i64> %3693, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3704 = bitcast <4 x i64> %3702 to <8 x i32>
  %3705 = bitcast <4 x i64> %3703 to <8 x i32>
  %3706 = shufflevector <8 x i32> %3704, <8 x i32> %3705, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %3706, <8 x i32>* %3471, align 32
  %3707 = shufflevector <8 x i32> %3704, <8 x i32> %3705, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %3707, <8 x i32>* %3474, align 32
  %3708 = shufflevector <4 x i64> %3677, <4 x i64> %3683, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3709 = shufflevector <4 x i64> %3689, <4 x i64> %3695, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3710 = bitcast <4 x i64> %3708 to <8 x i32>
  %3711 = bitcast <4 x i64> %3709 to <8 x i32>
  %3712 = shufflevector <8 x i32> %3710, <8 x i32> %3711, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %3712, <8 x i32>* %3481, align 32
  %3713 = shufflevector <8 x i32> %3710, <8 x i32> %3711, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %3713, <8 x i32>* %3484, align 32
  %3714 = shufflevector <4 x i64> %3677, <4 x i64> %3683, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3715 = shufflevector <4 x i64> %3689, <4 x i64> %3695, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3716 = bitcast <4 x i64> %3714 to <8 x i32>
  %3717 = bitcast <4 x i64> %3715 to <8 x i32>
  %3718 = shufflevector <8 x i32> %3716, <8 x i32> %3717, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %3718, <8 x i32>* %3491, align 32
  %3719 = shufflevector <8 x i32> %3716, <8 x i32> %3717, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %3719, <8 x i32>* %3494, align 32
  %3720 = load <8 x i32>, <8 x i32>* %3497, align 32
  %3721 = load <8 x i32>, <8 x i32>* %3500, align 32
  %3722 = shufflevector <8 x i32> %3720, <8 x i32> %3721, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3723 = bitcast <8 x i32> %3722 to <4 x i64>
  %3724 = shufflevector <8 x i32> %3720, <8 x i32> %3721, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3725 = bitcast <8 x i32> %3724 to <4 x i64>
  %3726 = load <8 x i32>, <8 x i32>* %3507, align 32
  %3727 = load <8 x i32>, <8 x i32>* %3510, align 32
  %3728 = shufflevector <8 x i32> %3726, <8 x i32> %3727, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3729 = bitcast <8 x i32> %3728 to <4 x i64>
  %3730 = shufflevector <8 x i32> %3726, <8 x i32> %3727, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3731 = bitcast <8 x i32> %3730 to <4 x i64>
  %3732 = load <8 x i32>, <8 x i32>* %3517, align 32
  %3733 = load <8 x i32>, <8 x i32>* %3520, align 32
  %3734 = shufflevector <8 x i32> %3732, <8 x i32> %3733, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3735 = bitcast <8 x i32> %3734 to <4 x i64>
  %3736 = shufflevector <8 x i32> %3732, <8 x i32> %3733, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3737 = bitcast <8 x i32> %3736 to <4 x i64>
  %3738 = load <8 x i32>, <8 x i32>* %3527, align 32
  %3739 = load <8 x i32>, <8 x i32>* %3530, align 32
  %3740 = shufflevector <8 x i32> %3738, <8 x i32> %3739, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3741 = bitcast <8 x i32> %3740 to <4 x i64>
  %3742 = shufflevector <8 x i32> %3738, <8 x i32> %3739, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3743 = bitcast <8 x i32> %3742 to <4 x i64>
  %3744 = shufflevector <4 x i64> %3723, <4 x i64> %3729, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3745 = shufflevector <4 x i64> %3735, <4 x i64> %3741, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3746 = bitcast <4 x i64> %3744 to <8 x i32>
  %3747 = bitcast <4 x i64> %3745 to <8 x i32>
  %3748 = shufflevector <8 x i32> %3746, <8 x i32> %3747, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %3748, <8 x i32>* %3541, align 32
  %3749 = shufflevector <8 x i32> %3746, <8 x i32> %3747, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %3749, <8 x i32>* %3544, align 32
  %3750 = shufflevector <4 x i64> %3723, <4 x i64> %3729, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3751 = shufflevector <4 x i64> %3735, <4 x i64> %3741, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3752 = bitcast <4 x i64> %3750 to <8 x i32>
  %3753 = bitcast <4 x i64> %3751 to <8 x i32>
  %3754 = shufflevector <8 x i32> %3752, <8 x i32> %3753, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %3754, <8 x i32>* %3551, align 32
  %3755 = shufflevector <8 x i32> %3752, <8 x i32> %3753, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %3755, <8 x i32>* %3554, align 32
  %3756 = shufflevector <4 x i64> %3725, <4 x i64> %3731, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3757 = shufflevector <4 x i64> %3737, <4 x i64> %3743, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3758 = bitcast <4 x i64> %3756 to <8 x i32>
  %3759 = bitcast <4 x i64> %3757 to <8 x i32>
  %3760 = shufflevector <8 x i32> %3758, <8 x i32> %3759, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %3760, <8 x i32>* %3561, align 32
  %3761 = shufflevector <8 x i32> %3758, <8 x i32> %3759, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %3761, <8 x i32>* %3564, align 32
  %3762 = shufflevector <4 x i64> %3725, <4 x i64> %3731, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3763 = shufflevector <4 x i64> %3737, <4 x i64> %3743, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3764 = bitcast <4 x i64> %3762 to <8 x i32>
  %3765 = bitcast <4 x i64> %3763 to <8 x i32>
  %3766 = shufflevector <8 x i32> %3764, <8 x i32> %3765, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %3766, <8 x i32>* %3571, align 32
  %3767 = shufflevector <8 x i32> %3764, <8 x i32> %3765, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %3767, <8 x i32>* %3574, align 32
  br label %10159

3768:                                             ; preds = %5
  %3769 = bitcast [64 x <4 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %3769) #7
  %3770 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 16
  %3771 = bitcast <4 x i64>* %3770 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %3771, i8 -86, i64 1536, i1 false) #7
  %3772 = sext i32 %2 to i64
  %3773 = bitcast i16* %0 to <4 x i64>*
  %3774 = load <4 x i64>, <4 x i64>* %3773, align 1
  %3775 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 0
  store <4 x i64> %3774, <4 x i64>* %3775, align 32
  %3776 = getelementptr inbounds i16, i16* %0, i64 %3772
  %3777 = bitcast i16* %3776 to <4 x i64>*
  %3778 = load <4 x i64>, <4 x i64>* %3777, align 1
  %3779 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 1
  store <4 x i64> %3778, <4 x i64>* %3779, align 32
  %3780 = shl nsw i64 %3772, 1
  %3781 = getelementptr inbounds i16, i16* %0, i64 %3780
  %3782 = bitcast i16* %3781 to <4 x i64>*
  %3783 = load <4 x i64>, <4 x i64>* %3782, align 1
  %3784 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 2
  store <4 x i64> %3783, <4 x i64>* %3784, align 32
  %3785 = mul nsw i64 %3772, 3
  %3786 = getelementptr inbounds i16, i16* %0, i64 %3785
  %3787 = bitcast i16* %3786 to <4 x i64>*
  %3788 = load <4 x i64>, <4 x i64>* %3787, align 1
  %3789 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 3
  store <4 x i64> %3788, <4 x i64>* %3789, align 32
  %3790 = shl nsw i64 %3772, 2
  %3791 = getelementptr inbounds i16, i16* %0, i64 %3790
  %3792 = bitcast i16* %3791 to <4 x i64>*
  %3793 = load <4 x i64>, <4 x i64>* %3792, align 1
  %3794 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 4
  store <4 x i64> %3793, <4 x i64>* %3794, align 32
  %3795 = mul nsw i64 %3772, 5
  %3796 = getelementptr inbounds i16, i16* %0, i64 %3795
  %3797 = bitcast i16* %3796 to <4 x i64>*
  %3798 = load <4 x i64>, <4 x i64>* %3797, align 1
  %3799 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 5
  store <4 x i64> %3798, <4 x i64>* %3799, align 32
  %3800 = mul nsw i64 %3772, 6
  %3801 = getelementptr inbounds i16, i16* %0, i64 %3800
  %3802 = bitcast i16* %3801 to <4 x i64>*
  %3803 = load <4 x i64>, <4 x i64>* %3802, align 1
  %3804 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 6
  store <4 x i64> %3803, <4 x i64>* %3804, align 32
  %3805 = mul nsw i64 %3772, 7
  %3806 = getelementptr inbounds i16, i16* %0, i64 %3805
  %3807 = bitcast i16* %3806 to <4 x i64>*
  %3808 = load <4 x i64>, <4 x i64>* %3807, align 1
  %3809 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 7
  store <4 x i64> %3808, <4 x i64>* %3809, align 32
  %3810 = shl nsw i64 %3772, 3
  %3811 = getelementptr inbounds i16, i16* %0, i64 %3810
  %3812 = bitcast i16* %3811 to <4 x i64>*
  %3813 = load <4 x i64>, <4 x i64>* %3812, align 1
  %3814 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 8
  store <4 x i64> %3813, <4 x i64>* %3814, align 32
  %3815 = mul nsw i64 %3772, 9
  %3816 = getelementptr inbounds i16, i16* %0, i64 %3815
  %3817 = bitcast i16* %3816 to <4 x i64>*
  %3818 = load <4 x i64>, <4 x i64>* %3817, align 1
  %3819 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 9
  store <4 x i64> %3818, <4 x i64>* %3819, align 32
  %3820 = mul nsw i64 %3772, 10
  %3821 = getelementptr inbounds i16, i16* %0, i64 %3820
  %3822 = bitcast i16* %3821 to <4 x i64>*
  %3823 = load <4 x i64>, <4 x i64>* %3822, align 1
  %3824 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 10
  store <4 x i64> %3823, <4 x i64>* %3824, align 32
  %3825 = mul nsw i64 %3772, 11
  %3826 = getelementptr inbounds i16, i16* %0, i64 %3825
  %3827 = bitcast i16* %3826 to <4 x i64>*
  %3828 = load <4 x i64>, <4 x i64>* %3827, align 1
  %3829 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 11
  store <4 x i64> %3828, <4 x i64>* %3829, align 32
  %3830 = mul nsw i64 %3772, 12
  %3831 = getelementptr inbounds i16, i16* %0, i64 %3830
  %3832 = bitcast i16* %3831 to <4 x i64>*
  %3833 = load <4 x i64>, <4 x i64>* %3832, align 1
  %3834 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 12
  store <4 x i64> %3833, <4 x i64>* %3834, align 32
  %3835 = mul nsw i64 %3772, 13
  %3836 = getelementptr inbounds i16, i16* %0, i64 %3835
  %3837 = bitcast i16* %3836 to <4 x i64>*
  %3838 = load <4 x i64>, <4 x i64>* %3837, align 1
  %3839 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 13
  store <4 x i64> %3838, <4 x i64>* %3839, align 32
  %3840 = mul nsw i64 %3772, 14
  %3841 = getelementptr inbounds i16, i16* %0, i64 %3840
  %3842 = bitcast i16* %3841 to <4 x i64>*
  %3843 = load <4 x i64>, <4 x i64>* %3842, align 1
  %3844 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 14
  store <4 x i64> %3843, <4 x i64>* %3844, align 32
  %3845 = mul nsw i64 %3772, 15
  %3846 = getelementptr inbounds i16, i16* %0, i64 %3845
  %3847 = bitcast i16* %3846 to <4 x i64>*
  %3848 = load <4 x i64>, <4 x i64>* %3847, align 1
  %3849 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 15
  store <4 x i64> %3848, <4 x i64>* %3849, align 32
  %3850 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 0
  br label %3851

3851:                                             ; preds = %3879, %3768
  %3852 = phi <4 x i64> [ %3881, %3879 ], [ %3774, %3768 ]
  %3853 = phi i64 [ %3877, %3879 ], [ 0, %3768 ]
  %3854 = shufflevector <4 x i64> %3852, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %3855 = bitcast <2 x i64> %3854 to <8 x i16>
  %3856 = shufflevector <8 x i16> %3855, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %3857 = shufflevector <8 x i16> %3856, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %3858 = bitcast <8 x i16> %3857 to <4 x i32>
  %3859 = shufflevector <4 x i32> %3858, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %3860 = bitcast <4 x i32> %3859 to <8 x i16>
  %3861 = sext <8 x i16> %3860 to <8 x i32>
  %3862 = shl nuw nsw i64 %3853, 1
  %3863 = or i64 %3862, 1
  %3864 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %3863
  %3865 = bitcast <4 x i64>* %3864 to <8 x i32>*
  store <8 x i32> %3861, <8 x i32>* %3865, align 32
  %3866 = bitcast <4 x i64> %3852 to <8 x i32>
  %3867 = shufflevector <8 x i32> %3866, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3868 = bitcast <4 x i32> %3867 to <8 x i16>
  %3869 = shufflevector <8 x i16> %3868, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %3870 = shufflevector <8 x i16> %3869, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %3871 = bitcast <8 x i16> %3870 to <4 x i32>
  %3872 = shufflevector <4 x i32> %3871, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %3873 = bitcast <4 x i32> %3872 to <8 x i16>
  %3874 = sext <8 x i16> %3873 to <8 x i32>
  %3875 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %3862
  %3876 = bitcast <4 x i64>* %3875 to <8 x i32>*
  store <8 x i32> %3874, <8 x i32>* %3876, align 32
  %3877 = add nuw nsw i64 %3853, 1
  %3878 = icmp eq i64 %3877, 16
  br i1 %3878, label %3882, label %3879

3879:                                             ; preds = %3851
  %3880 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 %3877
  %3881 = load <4 x i64>, <4 x i64>* %3880, align 32
  br label %3851

3882:                                             ; preds = %3851
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %3769) #7
  %3883 = load i8, i8* %12, align 1
  %3884 = sext i8 %3883 to i32
  %3885 = icmp slt i8 %3883, 0
  br i1 %3885, label %3886, label %3919

3886:                                             ; preds = %3882
  %3887 = sub nsw i32 0, %3884
  %3888 = xor i32 %3884, -1
  %3889 = shl i32 1, %3888
  %3890 = insertelement <8 x i32> undef, i32 %3889, i32 0
  %3891 = shufflevector <8 x i32> %3890, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %3892

3892:                                             ; preds = %3892, %3886
  %3893 = phi i64 [ 0, %3886 ], [ %3917, %3892 ]
  %3894 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %3893
  %3895 = bitcast <4 x i64>* %3894 to <8 x i32>*
  %3896 = load <8 x i32>, <8 x i32>* %3895, align 32
  %3897 = add <8 x i32> %3896, %3891
  %3898 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %3897, i32 %3887) #7
  store <8 x i32> %3898, <8 x i32>* %3895, align 32
  %3899 = or i64 %3893, 1
  %3900 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %3899
  %3901 = bitcast <4 x i64>* %3900 to <8 x i32>*
  %3902 = load <8 x i32>, <8 x i32>* %3901, align 32
  %3903 = add <8 x i32> %3902, %3891
  %3904 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %3903, i32 %3887) #7
  store <8 x i32> %3904, <8 x i32>* %3901, align 32
  %3905 = or i64 %3893, 2
  %3906 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %3905
  %3907 = bitcast <4 x i64>* %3906 to <8 x i32>*
  %3908 = load <8 x i32>, <8 x i32>* %3907, align 32
  %3909 = add <8 x i32> %3908, %3891
  %3910 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %3909, i32 %3887) #7
  store <8 x i32> %3910, <8 x i32>* %3907, align 32
  %3911 = or i64 %3893, 3
  %3912 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %3911
  %3913 = bitcast <4 x i64>* %3912 to <8 x i32>*
  %3914 = load <8 x i32>, <8 x i32>* %3913, align 32
  %3915 = add <8 x i32> %3914, %3891
  %3916 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %3915, i32 %3887) #7
  store <8 x i32> %3916, <8 x i32>* %3913, align 32
  %3917 = add nuw nsw i64 %3893, 4
  %3918 = icmp eq i64 %3917, 32
  br i1 %3918, label %3944, label %3892

3919:                                             ; preds = %3882
  %3920 = icmp eq i8 %3883, 0
  br i1 %3920, label %3944, label %3921

3921:                                             ; preds = %3919, %3921
  %3922 = phi i64 [ %3942, %3921 ], [ 0, %3919 ]
  %3923 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %3922
  %3924 = bitcast <4 x i64>* %3923 to <8 x i32>*
  %3925 = load <8 x i32>, <8 x i32>* %3924, align 32
  %3926 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %3925, i32 %3884) #7
  store <8 x i32> %3926, <8 x i32>* %3924, align 32
  %3927 = or i64 %3922, 1
  %3928 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %3927
  %3929 = bitcast <4 x i64>* %3928 to <8 x i32>*
  %3930 = load <8 x i32>, <8 x i32>* %3929, align 32
  %3931 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %3930, i32 %3884) #7
  store <8 x i32> %3931, <8 x i32>* %3929, align 32
  %3932 = or i64 %3922, 2
  %3933 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %3932
  %3934 = bitcast <4 x i64>* %3933 to <8 x i32>*
  %3935 = load <8 x i32>, <8 x i32>* %3934, align 32
  %3936 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %3935, i32 %3884) #7
  store <8 x i32> %3936, <8 x i32>* %3934, align 32
  %3937 = or i64 %3922, 3
  %3938 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %3937
  %3939 = bitcast <4 x i64>* %3938 to <8 x i32>*
  %3940 = load <8 x i32>, <8 x i32>* %3939, align 32
  %3941 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %3940, i32 %3884) #7
  store <8 x i32> %3941, <8 x i32>* %3939, align 32
  %3942 = add nuw nsw i64 %3922, 4
  %3943 = icmp eq i64 %3942, 32
  br i1 %3943, label %3944, label %3921

3944:                                             ; preds = %3921, %3892, %3919
  %3945 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 0
  %3946 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 2, i64 2), align 2
  call void @fdct16_avx2(<4 x i64>* nonnull %3850, <4 x i64>* nonnull %3945, i8 signext %3946, i32 2, i32 2)
  %3947 = getelementptr inbounds i8, i8* %12, i64 1
  %3948 = load i8, i8* %3947, align 1
  %3949 = sext i8 %3948 to i32
  %3950 = icmp slt i8 %3948, 0
  br i1 %3950, label %3951, label %3984

3951:                                             ; preds = %3944
  %3952 = sub nsw i32 0, %3949
  %3953 = xor i32 %3949, -1
  %3954 = shl i32 1, %3953
  %3955 = insertelement <8 x i32> undef, i32 %3954, i32 0
  %3956 = shufflevector <8 x i32> %3955, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %3957

3957:                                             ; preds = %3957, %3951
  %3958 = phi i64 [ 0, %3951 ], [ %3982, %3957 ]
  %3959 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %3958
  %3960 = bitcast <4 x i64>* %3959 to <8 x i32>*
  %3961 = load <8 x i32>, <8 x i32>* %3960, align 32
  %3962 = add <8 x i32> %3961, %3956
  %3963 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %3962, i32 %3952) #7
  store <8 x i32> %3963, <8 x i32>* %3960, align 32
  %3964 = or i64 %3958, 1
  %3965 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %3964
  %3966 = bitcast <4 x i64>* %3965 to <8 x i32>*
  %3967 = load <8 x i32>, <8 x i32>* %3966, align 32
  %3968 = add <8 x i32> %3967, %3956
  %3969 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %3968, i32 %3952) #7
  store <8 x i32> %3969, <8 x i32>* %3966, align 32
  %3970 = or i64 %3958, 2
  %3971 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %3970
  %3972 = bitcast <4 x i64>* %3971 to <8 x i32>*
  %3973 = load <8 x i32>, <8 x i32>* %3972, align 32
  %3974 = add <8 x i32> %3973, %3956
  %3975 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %3974, i32 %3952) #7
  store <8 x i32> %3975, <8 x i32>* %3972, align 32
  %3976 = or i64 %3958, 3
  %3977 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %3976
  %3978 = bitcast <4 x i64>* %3977 to <8 x i32>*
  %3979 = load <8 x i32>, <8 x i32>* %3978, align 32
  %3980 = add <8 x i32> %3979, %3956
  %3981 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %3980, i32 %3952) #7
  store <8 x i32> %3981, <8 x i32>* %3978, align 32
  %3982 = add nuw nsw i64 %3958, 4
  %3983 = icmp eq i64 %3982, 32
  br i1 %3983, label %4009, label %3957

3984:                                             ; preds = %3944
  %3985 = icmp eq i8 %3948, 0
  br i1 %3985, label %4009, label %3986

3986:                                             ; preds = %3984, %3986
  %3987 = phi i64 [ %4007, %3986 ], [ 0, %3984 ]
  %3988 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %3987
  %3989 = bitcast <4 x i64>* %3988 to <8 x i32>*
  %3990 = load <8 x i32>, <8 x i32>* %3989, align 32
  %3991 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %3990, i32 %3949) #7
  store <8 x i32> %3991, <8 x i32>* %3989, align 32
  %3992 = or i64 %3987, 1
  %3993 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %3992
  %3994 = bitcast <4 x i64>* %3993 to <8 x i32>*
  %3995 = load <8 x i32>, <8 x i32>* %3994, align 32
  %3996 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %3995, i32 %3949) #7
  store <8 x i32> %3996, <8 x i32>* %3994, align 32
  %3997 = or i64 %3987, 2
  %3998 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %3997
  %3999 = bitcast <4 x i64>* %3998 to <8 x i32>*
  %4000 = load <8 x i32>, <8 x i32>* %3999, align 32
  %4001 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %4000, i32 %3949) #7
  store <8 x i32> %4001, <8 x i32>* %3999, align 32
  %4002 = or i64 %3987, 3
  %4003 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %4002
  %4004 = bitcast <4 x i64>* %4003 to <8 x i32>*
  %4005 = load <8 x i32>, <8 x i32>* %4004, align 32
  %4006 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %4005, i32 %3949) #7
  store <8 x i32> %4006, <8 x i32>* %4004, align 32
  %4007 = add nuw nsw i64 %3987, 4
  %4008 = icmp eq i64 %4007, 32
  br i1 %4008, label %4009, label %3986

4009:                                             ; preds = %3986, %3957, %3984
  %4010 = bitcast [32 x <4 x i64>]* %10 to <8 x i32>*
  %4011 = load <8 x i32>, <8 x i32>* %4010, align 32
  %4012 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 2
  %4013 = bitcast <4 x i64>* %4012 to <8 x i32>*
  %4014 = load <8 x i32>, <8 x i32>* %4013, align 32
  %4015 = shufflevector <8 x i32> %4011, <8 x i32> %4014, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4016 = bitcast <8 x i32> %4015 to <4 x i64>
  %4017 = shufflevector <8 x i32> %4011, <8 x i32> %4014, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4018 = bitcast <8 x i32> %4017 to <4 x i64>
  %4019 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 4
  %4020 = bitcast <4 x i64>* %4019 to <8 x i32>*
  %4021 = load <8 x i32>, <8 x i32>* %4020, align 32
  %4022 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 6
  %4023 = bitcast <4 x i64>* %4022 to <8 x i32>*
  %4024 = load <8 x i32>, <8 x i32>* %4023, align 32
  %4025 = shufflevector <8 x i32> %4021, <8 x i32> %4024, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4026 = bitcast <8 x i32> %4025 to <4 x i64>
  %4027 = shufflevector <8 x i32> %4021, <8 x i32> %4024, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4028 = bitcast <8 x i32> %4027 to <4 x i64>
  %4029 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 8
  %4030 = bitcast <4 x i64>* %4029 to <8 x i32>*
  %4031 = load <8 x i32>, <8 x i32>* %4030, align 32
  %4032 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 10
  %4033 = bitcast <4 x i64>* %4032 to <8 x i32>*
  %4034 = load <8 x i32>, <8 x i32>* %4033, align 32
  %4035 = shufflevector <8 x i32> %4031, <8 x i32> %4034, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4036 = bitcast <8 x i32> %4035 to <4 x i64>
  %4037 = shufflevector <8 x i32> %4031, <8 x i32> %4034, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4038 = bitcast <8 x i32> %4037 to <4 x i64>
  %4039 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 12
  %4040 = bitcast <4 x i64>* %4039 to <8 x i32>*
  %4041 = load <8 x i32>, <8 x i32>* %4040, align 32
  %4042 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 14
  %4043 = bitcast <4 x i64>* %4042 to <8 x i32>*
  %4044 = load <8 x i32>, <8 x i32>* %4043, align 32
  %4045 = shufflevector <8 x i32> %4041, <8 x i32> %4044, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4046 = bitcast <8 x i32> %4045 to <4 x i64>
  %4047 = shufflevector <8 x i32> %4041, <8 x i32> %4044, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4048 = bitcast <8 x i32> %4047 to <4 x i64>
  %4049 = shufflevector <4 x i64> %4016, <4 x i64> %4026, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4050 = shufflevector <4 x i64> %4036, <4 x i64> %4046, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4051 = bitcast <4 x i64> %4049 to <8 x i32>
  %4052 = bitcast <4 x i64> %4050 to <8 x i32>
  %4053 = shufflevector <8 x i32> %4051, <8 x i32> %4052, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %4054 = bitcast [32 x <4 x i64>]* %8 to <8 x i32>*
  store <8 x i32> %4053, <8 x i32>* %4054, align 32
  %4055 = shufflevector <8 x i32> %4051, <8 x i32> %4052, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %4056 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 8
  %4057 = bitcast <4 x i64>* %4056 to <8 x i32>*
  store <8 x i32> %4055, <8 x i32>* %4057, align 32
  %4058 = shufflevector <4 x i64> %4016, <4 x i64> %4026, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4059 = shufflevector <4 x i64> %4036, <4 x i64> %4046, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4060 = bitcast <4 x i64> %4058 to <8 x i32>
  %4061 = bitcast <4 x i64> %4059 to <8 x i32>
  %4062 = shufflevector <8 x i32> %4060, <8 x i32> %4061, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %4063 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 2
  %4064 = bitcast <4 x i64>* %4063 to <8 x i32>*
  store <8 x i32> %4062, <8 x i32>* %4064, align 32
  %4065 = shufflevector <8 x i32> %4060, <8 x i32> %4061, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %4066 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 10
  %4067 = bitcast <4 x i64>* %4066 to <8 x i32>*
  store <8 x i32> %4065, <8 x i32>* %4067, align 32
  %4068 = shufflevector <4 x i64> %4018, <4 x i64> %4028, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4069 = shufflevector <4 x i64> %4038, <4 x i64> %4048, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4070 = bitcast <4 x i64> %4068 to <8 x i32>
  %4071 = bitcast <4 x i64> %4069 to <8 x i32>
  %4072 = shufflevector <8 x i32> %4070, <8 x i32> %4071, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %4073 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 4
  %4074 = bitcast <4 x i64>* %4073 to <8 x i32>*
  store <8 x i32> %4072, <8 x i32>* %4074, align 32
  %4075 = shufflevector <8 x i32> %4070, <8 x i32> %4071, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %4076 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 12
  %4077 = bitcast <4 x i64>* %4076 to <8 x i32>*
  store <8 x i32> %4075, <8 x i32>* %4077, align 32
  %4078 = shufflevector <4 x i64> %4018, <4 x i64> %4028, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4079 = shufflevector <4 x i64> %4038, <4 x i64> %4048, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4080 = bitcast <4 x i64> %4078 to <8 x i32>
  %4081 = bitcast <4 x i64> %4079 to <8 x i32>
  %4082 = shufflevector <8 x i32> %4080, <8 x i32> %4081, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %4083 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 6
  %4084 = bitcast <4 x i64>* %4083 to <8 x i32>*
  store <8 x i32> %4082, <8 x i32>* %4084, align 32
  %4085 = shufflevector <8 x i32> %4080, <8 x i32> %4081, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %4086 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 14
  %4087 = bitcast <4 x i64>* %4086 to <8 x i32>*
  store <8 x i32> %4085, <8 x i32>* %4087, align 32
  %4088 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 1
  %4089 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 16
  %4090 = bitcast <4 x i64>* %4088 to <8 x i32>*
  %4091 = load <8 x i32>, <8 x i32>* %4090, align 32
  %4092 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 3
  %4093 = bitcast <4 x i64>* %4092 to <8 x i32>*
  %4094 = load <8 x i32>, <8 x i32>* %4093, align 32
  %4095 = shufflevector <8 x i32> %4091, <8 x i32> %4094, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4096 = bitcast <8 x i32> %4095 to <4 x i64>
  %4097 = shufflevector <8 x i32> %4091, <8 x i32> %4094, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4098 = bitcast <8 x i32> %4097 to <4 x i64>
  %4099 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 5
  %4100 = bitcast <4 x i64>* %4099 to <8 x i32>*
  %4101 = load <8 x i32>, <8 x i32>* %4100, align 32
  %4102 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 7
  %4103 = bitcast <4 x i64>* %4102 to <8 x i32>*
  %4104 = load <8 x i32>, <8 x i32>* %4103, align 32
  %4105 = shufflevector <8 x i32> %4101, <8 x i32> %4104, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4106 = bitcast <8 x i32> %4105 to <4 x i64>
  %4107 = shufflevector <8 x i32> %4101, <8 x i32> %4104, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4108 = bitcast <8 x i32> %4107 to <4 x i64>
  %4109 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 9
  %4110 = bitcast <4 x i64>* %4109 to <8 x i32>*
  %4111 = load <8 x i32>, <8 x i32>* %4110, align 32
  %4112 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 11
  %4113 = bitcast <4 x i64>* %4112 to <8 x i32>*
  %4114 = load <8 x i32>, <8 x i32>* %4113, align 32
  %4115 = shufflevector <8 x i32> %4111, <8 x i32> %4114, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4116 = bitcast <8 x i32> %4115 to <4 x i64>
  %4117 = shufflevector <8 x i32> %4111, <8 x i32> %4114, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4118 = bitcast <8 x i32> %4117 to <4 x i64>
  %4119 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 13
  %4120 = bitcast <4 x i64>* %4119 to <8 x i32>*
  %4121 = load <8 x i32>, <8 x i32>* %4120, align 32
  %4122 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 15
  %4123 = bitcast <4 x i64>* %4122 to <8 x i32>*
  %4124 = load <8 x i32>, <8 x i32>* %4123, align 32
  %4125 = shufflevector <8 x i32> %4121, <8 x i32> %4124, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4126 = bitcast <8 x i32> %4125 to <4 x i64>
  %4127 = shufflevector <8 x i32> %4121, <8 x i32> %4124, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4128 = bitcast <8 x i32> %4127 to <4 x i64>
  %4129 = shufflevector <4 x i64> %4096, <4 x i64> %4106, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4130 = shufflevector <4 x i64> %4116, <4 x i64> %4126, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4131 = bitcast <4 x i64> %4129 to <8 x i32>
  %4132 = bitcast <4 x i64> %4130 to <8 x i32>
  %4133 = shufflevector <8 x i32> %4131, <8 x i32> %4132, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %4134 = bitcast <4 x i64>* %4089 to <8 x i32>*
  store <8 x i32> %4133, <8 x i32>* %4134, align 32
  %4135 = shufflevector <8 x i32> %4131, <8 x i32> %4132, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %4136 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 24
  %4137 = bitcast <4 x i64>* %4136 to <8 x i32>*
  store <8 x i32> %4135, <8 x i32>* %4137, align 32
  %4138 = shufflevector <4 x i64> %4096, <4 x i64> %4106, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4139 = shufflevector <4 x i64> %4116, <4 x i64> %4126, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4140 = bitcast <4 x i64> %4138 to <8 x i32>
  %4141 = bitcast <4 x i64> %4139 to <8 x i32>
  %4142 = shufflevector <8 x i32> %4140, <8 x i32> %4141, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %4143 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 18
  %4144 = bitcast <4 x i64>* %4143 to <8 x i32>*
  store <8 x i32> %4142, <8 x i32>* %4144, align 32
  %4145 = shufflevector <8 x i32> %4140, <8 x i32> %4141, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %4146 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 26
  %4147 = bitcast <4 x i64>* %4146 to <8 x i32>*
  store <8 x i32> %4145, <8 x i32>* %4147, align 32
  %4148 = shufflevector <4 x i64> %4098, <4 x i64> %4108, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4149 = shufflevector <4 x i64> %4118, <4 x i64> %4128, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4150 = bitcast <4 x i64> %4148 to <8 x i32>
  %4151 = bitcast <4 x i64> %4149 to <8 x i32>
  %4152 = shufflevector <8 x i32> %4150, <8 x i32> %4151, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %4153 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 20
  %4154 = bitcast <4 x i64>* %4153 to <8 x i32>*
  store <8 x i32> %4152, <8 x i32>* %4154, align 32
  %4155 = shufflevector <8 x i32> %4150, <8 x i32> %4151, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %4156 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 28
  %4157 = bitcast <4 x i64>* %4156 to <8 x i32>*
  store <8 x i32> %4155, <8 x i32>* %4157, align 32
  %4158 = shufflevector <4 x i64> %4098, <4 x i64> %4108, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4159 = shufflevector <4 x i64> %4118, <4 x i64> %4128, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4160 = bitcast <4 x i64> %4158 to <8 x i32>
  %4161 = bitcast <4 x i64> %4159 to <8 x i32>
  %4162 = shufflevector <8 x i32> %4160, <8 x i32> %4161, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %4163 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 22
  %4164 = bitcast <4 x i64>* %4163 to <8 x i32>*
  store <8 x i32> %4162, <8 x i32>* %4164, align 32
  %4165 = shufflevector <8 x i32> %4160, <8 x i32> %4161, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %4166 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 30
  %4167 = bitcast <4 x i64>* %4166 to <8 x i32>*
  store <8 x i32> %4165, <8 x i32>* %4167, align 32
  %4168 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 16
  %4169 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 1
  %4170 = bitcast <4 x i64>* %4168 to <8 x i32>*
  %4171 = load <8 x i32>, <8 x i32>* %4170, align 32
  %4172 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 18
  %4173 = bitcast <4 x i64>* %4172 to <8 x i32>*
  %4174 = load <8 x i32>, <8 x i32>* %4173, align 32
  %4175 = shufflevector <8 x i32> %4171, <8 x i32> %4174, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4176 = bitcast <8 x i32> %4175 to <4 x i64>
  %4177 = shufflevector <8 x i32> %4171, <8 x i32> %4174, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4178 = bitcast <8 x i32> %4177 to <4 x i64>
  %4179 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 20
  %4180 = bitcast <4 x i64>* %4179 to <8 x i32>*
  %4181 = load <8 x i32>, <8 x i32>* %4180, align 32
  %4182 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 22
  %4183 = bitcast <4 x i64>* %4182 to <8 x i32>*
  %4184 = load <8 x i32>, <8 x i32>* %4183, align 32
  %4185 = shufflevector <8 x i32> %4181, <8 x i32> %4184, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4186 = bitcast <8 x i32> %4185 to <4 x i64>
  %4187 = shufflevector <8 x i32> %4181, <8 x i32> %4184, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4188 = bitcast <8 x i32> %4187 to <4 x i64>
  %4189 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 24
  %4190 = bitcast <4 x i64>* %4189 to <8 x i32>*
  %4191 = load <8 x i32>, <8 x i32>* %4190, align 32
  %4192 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 26
  %4193 = bitcast <4 x i64>* %4192 to <8 x i32>*
  %4194 = load <8 x i32>, <8 x i32>* %4193, align 32
  %4195 = shufflevector <8 x i32> %4191, <8 x i32> %4194, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4196 = bitcast <8 x i32> %4195 to <4 x i64>
  %4197 = shufflevector <8 x i32> %4191, <8 x i32> %4194, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4198 = bitcast <8 x i32> %4197 to <4 x i64>
  %4199 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 28
  %4200 = bitcast <4 x i64>* %4199 to <8 x i32>*
  %4201 = load <8 x i32>, <8 x i32>* %4200, align 32
  %4202 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 30
  %4203 = bitcast <4 x i64>* %4202 to <8 x i32>*
  %4204 = load <8 x i32>, <8 x i32>* %4203, align 32
  %4205 = shufflevector <8 x i32> %4201, <8 x i32> %4204, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4206 = bitcast <8 x i32> %4205 to <4 x i64>
  %4207 = shufflevector <8 x i32> %4201, <8 x i32> %4204, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4208 = bitcast <8 x i32> %4207 to <4 x i64>
  %4209 = shufflevector <4 x i64> %4176, <4 x i64> %4186, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4210 = shufflevector <4 x i64> %4196, <4 x i64> %4206, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4211 = bitcast <4 x i64> %4209 to <8 x i32>
  %4212 = bitcast <4 x i64> %4210 to <8 x i32>
  %4213 = shufflevector <8 x i32> %4211, <8 x i32> %4212, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %4214 = bitcast <4 x i64>* %4169 to <8 x i32>*
  store <8 x i32> %4213, <8 x i32>* %4214, align 32
  %4215 = shufflevector <8 x i32> %4211, <8 x i32> %4212, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %4216 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 9
  %4217 = bitcast <4 x i64>* %4216 to <8 x i32>*
  store <8 x i32> %4215, <8 x i32>* %4217, align 32
  %4218 = shufflevector <4 x i64> %4176, <4 x i64> %4186, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4219 = shufflevector <4 x i64> %4196, <4 x i64> %4206, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4220 = bitcast <4 x i64> %4218 to <8 x i32>
  %4221 = bitcast <4 x i64> %4219 to <8 x i32>
  %4222 = shufflevector <8 x i32> %4220, <8 x i32> %4221, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %4223 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 3
  %4224 = bitcast <4 x i64>* %4223 to <8 x i32>*
  store <8 x i32> %4222, <8 x i32>* %4224, align 32
  %4225 = shufflevector <8 x i32> %4220, <8 x i32> %4221, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %4226 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 11
  %4227 = bitcast <4 x i64>* %4226 to <8 x i32>*
  store <8 x i32> %4225, <8 x i32>* %4227, align 32
  %4228 = shufflevector <4 x i64> %4178, <4 x i64> %4188, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4229 = shufflevector <4 x i64> %4198, <4 x i64> %4208, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4230 = bitcast <4 x i64> %4228 to <8 x i32>
  %4231 = bitcast <4 x i64> %4229 to <8 x i32>
  %4232 = shufflevector <8 x i32> %4230, <8 x i32> %4231, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %4233 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 5
  %4234 = bitcast <4 x i64>* %4233 to <8 x i32>*
  store <8 x i32> %4232, <8 x i32>* %4234, align 32
  %4235 = shufflevector <8 x i32> %4230, <8 x i32> %4231, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %4236 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 13
  %4237 = bitcast <4 x i64>* %4236 to <8 x i32>*
  store <8 x i32> %4235, <8 x i32>* %4237, align 32
  %4238 = shufflevector <4 x i64> %4178, <4 x i64> %4188, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4239 = shufflevector <4 x i64> %4198, <4 x i64> %4208, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4240 = bitcast <4 x i64> %4238 to <8 x i32>
  %4241 = bitcast <4 x i64> %4239 to <8 x i32>
  %4242 = shufflevector <8 x i32> %4240, <8 x i32> %4241, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %4243 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 7
  %4244 = bitcast <4 x i64>* %4243 to <8 x i32>*
  store <8 x i32> %4242, <8 x i32>* %4244, align 32
  %4245 = shufflevector <8 x i32> %4240, <8 x i32> %4241, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %4246 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 15
  %4247 = bitcast <4 x i64>* %4246 to <8 x i32>*
  store <8 x i32> %4245, <8 x i32>* %4247, align 32
  %4248 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 17
  %4249 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 17
  %4250 = bitcast <4 x i64>* %4248 to <8 x i32>*
  %4251 = load <8 x i32>, <8 x i32>* %4250, align 32
  %4252 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 19
  %4253 = bitcast <4 x i64>* %4252 to <8 x i32>*
  %4254 = load <8 x i32>, <8 x i32>* %4253, align 32
  %4255 = shufflevector <8 x i32> %4251, <8 x i32> %4254, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4256 = bitcast <8 x i32> %4255 to <4 x i64>
  %4257 = shufflevector <8 x i32> %4251, <8 x i32> %4254, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4258 = bitcast <8 x i32> %4257 to <4 x i64>
  %4259 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 21
  %4260 = bitcast <4 x i64>* %4259 to <8 x i32>*
  %4261 = load <8 x i32>, <8 x i32>* %4260, align 32
  %4262 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 23
  %4263 = bitcast <4 x i64>* %4262 to <8 x i32>*
  %4264 = load <8 x i32>, <8 x i32>* %4263, align 32
  %4265 = shufflevector <8 x i32> %4261, <8 x i32> %4264, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4266 = bitcast <8 x i32> %4265 to <4 x i64>
  %4267 = shufflevector <8 x i32> %4261, <8 x i32> %4264, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4268 = bitcast <8 x i32> %4267 to <4 x i64>
  %4269 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 25
  %4270 = bitcast <4 x i64>* %4269 to <8 x i32>*
  %4271 = load <8 x i32>, <8 x i32>* %4270, align 32
  %4272 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 27
  %4273 = bitcast <4 x i64>* %4272 to <8 x i32>*
  %4274 = load <8 x i32>, <8 x i32>* %4273, align 32
  %4275 = shufflevector <8 x i32> %4271, <8 x i32> %4274, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4276 = bitcast <8 x i32> %4275 to <4 x i64>
  %4277 = shufflevector <8 x i32> %4271, <8 x i32> %4274, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4278 = bitcast <8 x i32> %4277 to <4 x i64>
  %4279 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 29
  %4280 = bitcast <4 x i64>* %4279 to <8 x i32>*
  %4281 = load <8 x i32>, <8 x i32>* %4280, align 32
  %4282 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 31
  %4283 = bitcast <4 x i64>* %4282 to <8 x i32>*
  %4284 = load <8 x i32>, <8 x i32>* %4283, align 32
  %4285 = shufflevector <8 x i32> %4281, <8 x i32> %4284, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4286 = bitcast <8 x i32> %4285 to <4 x i64>
  %4287 = shufflevector <8 x i32> %4281, <8 x i32> %4284, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4288 = bitcast <8 x i32> %4287 to <4 x i64>
  %4289 = shufflevector <4 x i64> %4256, <4 x i64> %4266, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4290 = shufflevector <4 x i64> %4276, <4 x i64> %4286, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4291 = bitcast <4 x i64> %4289 to <8 x i32>
  %4292 = bitcast <4 x i64> %4290 to <8 x i32>
  %4293 = shufflevector <8 x i32> %4291, <8 x i32> %4292, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %4294 = bitcast <4 x i64>* %4249 to <8 x i32>*
  store <8 x i32> %4293, <8 x i32>* %4294, align 32
  %4295 = shufflevector <8 x i32> %4291, <8 x i32> %4292, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %4296 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 25
  %4297 = bitcast <4 x i64>* %4296 to <8 x i32>*
  store <8 x i32> %4295, <8 x i32>* %4297, align 32
  %4298 = shufflevector <4 x i64> %4256, <4 x i64> %4266, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4299 = shufflevector <4 x i64> %4276, <4 x i64> %4286, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4300 = bitcast <4 x i64> %4298 to <8 x i32>
  %4301 = bitcast <4 x i64> %4299 to <8 x i32>
  %4302 = shufflevector <8 x i32> %4300, <8 x i32> %4301, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %4303 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 19
  %4304 = bitcast <4 x i64>* %4303 to <8 x i32>*
  store <8 x i32> %4302, <8 x i32>* %4304, align 32
  %4305 = shufflevector <8 x i32> %4300, <8 x i32> %4301, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %4306 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 27
  %4307 = bitcast <4 x i64>* %4306 to <8 x i32>*
  store <8 x i32> %4305, <8 x i32>* %4307, align 32
  %4308 = shufflevector <4 x i64> %4258, <4 x i64> %4268, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4309 = shufflevector <4 x i64> %4278, <4 x i64> %4288, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4310 = bitcast <4 x i64> %4308 to <8 x i32>
  %4311 = bitcast <4 x i64> %4309 to <8 x i32>
  %4312 = shufflevector <8 x i32> %4310, <8 x i32> %4311, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %4313 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 21
  %4314 = bitcast <4 x i64>* %4313 to <8 x i32>*
  store <8 x i32> %4312, <8 x i32>* %4314, align 32
  %4315 = shufflevector <8 x i32> %4310, <8 x i32> %4311, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %4316 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 29
  %4317 = bitcast <4 x i64>* %4316 to <8 x i32>*
  store <8 x i32> %4315, <8 x i32>* %4317, align 32
  %4318 = shufflevector <4 x i64> %4258, <4 x i64> %4268, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4319 = shufflevector <4 x i64> %4278, <4 x i64> %4288, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4320 = bitcast <4 x i64> %4318 to <8 x i32>
  %4321 = bitcast <4 x i64> %4319 to <8 x i32>
  %4322 = shufflevector <8 x i32> %4320, <8 x i32> %4321, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %4323 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 23
  %4324 = bitcast <4 x i64>* %4323 to <8 x i32>*
  store <8 x i32> %4322, <8 x i32>* %4324, align 32
  %4325 = shufflevector <8 x i32> %4320, <8 x i32> %4321, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %4326 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 31
  %4327 = bitcast <4 x i64>* %4326 to <8 x i32>*
  store <8 x i32> %4325, <8 x i32>* %4327, align 32
  %4328 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 2, i64 2), align 2
  call void @fadst16_avx2(<4 x i64>* nonnull %3850, <4 x i64>* nonnull %3945, i8 signext %4328, i32 2, i32 2)
  %4329 = load <8 x i32>, <8 x i32>* %4010, align 32
  %4330 = load <8 x i32>, <8 x i32>* %4013, align 32
  %4331 = shufflevector <8 x i32> %4329, <8 x i32> %4330, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4332 = bitcast <8 x i32> %4331 to <4 x i64>
  %4333 = shufflevector <8 x i32> %4329, <8 x i32> %4330, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4334 = bitcast <8 x i32> %4333 to <4 x i64>
  %4335 = load <8 x i32>, <8 x i32>* %4020, align 32
  %4336 = load <8 x i32>, <8 x i32>* %4023, align 32
  %4337 = shufflevector <8 x i32> %4335, <8 x i32> %4336, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4338 = bitcast <8 x i32> %4337 to <4 x i64>
  %4339 = shufflevector <8 x i32> %4335, <8 x i32> %4336, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4340 = bitcast <8 x i32> %4339 to <4 x i64>
  %4341 = load <8 x i32>, <8 x i32>* %4030, align 32
  %4342 = load <8 x i32>, <8 x i32>* %4033, align 32
  %4343 = shufflevector <8 x i32> %4341, <8 x i32> %4342, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4344 = bitcast <8 x i32> %4343 to <4 x i64>
  %4345 = shufflevector <8 x i32> %4341, <8 x i32> %4342, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4346 = bitcast <8 x i32> %4345 to <4 x i64>
  %4347 = load <8 x i32>, <8 x i32>* %4040, align 32
  %4348 = load <8 x i32>, <8 x i32>* %4043, align 32
  %4349 = shufflevector <8 x i32> %4347, <8 x i32> %4348, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4350 = bitcast <8 x i32> %4349 to <4 x i64>
  %4351 = shufflevector <8 x i32> %4347, <8 x i32> %4348, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4352 = bitcast <8 x i32> %4351 to <4 x i64>
  %4353 = shufflevector <4 x i64> %4332, <4 x i64> %4338, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4354 = shufflevector <4 x i64> %4344, <4 x i64> %4350, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4355 = bitcast <4 x i64> %4353 to <8 x i32>
  %4356 = bitcast <4 x i64> %4354 to <8 x i32>
  %4357 = shufflevector <8 x i32> %4355, <8 x i32> %4356, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %4357, <8 x i32>* %4054, align 32
  %4358 = shufflevector <8 x i32> %4355, <8 x i32> %4356, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %4358, <8 x i32>* %4057, align 32
  %4359 = shufflevector <4 x i64> %4332, <4 x i64> %4338, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4360 = shufflevector <4 x i64> %4344, <4 x i64> %4350, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4361 = bitcast <4 x i64> %4359 to <8 x i32>
  %4362 = bitcast <4 x i64> %4360 to <8 x i32>
  %4363 = shufflevector <8 x i32> %4361, <8 x i32> %4362, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %4363, <8 x i32>* %4064, align 32
  %4364 = shufflevector <8 x i32> %4361, <8 x i32> %4362, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %4364, <8 x i32>* %4067, align 32
  %4365 = shufflevector <4 x i64> %4334, <4 x i64> %4340, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4366 = shufflevector <4 x i64> %4346, <4 x i64> %4352, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4367 = bitcast <4 x i64> %4365 to <8 x i32>
  %4368 = bitcast <4 x i64> %4366 to <8 x i32>
  %4369 = shufflevector <8 x i32> %4367, <8 x i32> %4368, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %4369, <8 x i32>* %4074, align 32
  %4370 = shufflevector <8 x i32> %4367, <8 x i32> %4368, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %4370, <8 x i32>* %4077, align 32
  %4371 = shufflevector <4 x i64> %4334, <4 x i64> %4340, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4372 = shufflevector <4 x i64> %4346, <4 x i64> %4352, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4373 = bitcast <4 x i64> %4371 to <8 x i32>
  %4374 = bitcast <4 x i64> %4372 to <8 x i32>
  %4375 = shufflevector <8 x i32> %4373, <8 x i32> %4374, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %4375, <8 x i32>* %4084, align 32
  %4376 = shufflevector <8 x i32> %4373, <8 x i32> %4374, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %4376, <8 x i32>* %4087, align 32
  %4377 = load <8 x i32>, <8 x i32>* %4090, align 32
  %4378 = load <8 x i32>, <8 x i32>* %4093, align 32
  %4379 = shufflevector <8 x i32> %4377, <8 x i32> %4378, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4380 = bitcast <8 x i32> %4379 to <4 x i64>
  %4381 = shufflevector <8 x i32> %4377, <8 x i32> %4378, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4382 = bitcast <8 x i32> %4381 to <4 x i64>
  %4383 = load <8 x i32>, <8 x i32>* %4100, align 32
  %4384 = load <8 x i32>, <8 x i32>* %4103, align 32
  %4385 = shufflevector <8 x i32> %4383, <8 x i32> %4384, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4386 = bitcast <8 x i32> %4385 to <4 x i64>
  %4387 = shufflevector <8 x i32> %4383, <8 x i32> %4384, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4388 = bitcast <8 x i32> %4387 to <4 x i64>
  %4389 = load <8 x i32>, <8 x i32>* %4110, align 32
  %4390 = load <8 x i32>, <8 x i32>* %4113, align 32
  %4391 = shufflevector <8 x i32> %4389, <8 x i32> %4390, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4392 = bitcast <8 x i32> %4391 to <4 x i64>
  %4393 = shufflevector <8 x i32> %4389, <8 x i32> %4390, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4394 = bitcast <8 x i32> %4393 to <4 x i64>
  %4395 = load <8 x i32>, <8 x i32>* %4120, align 32
  %4396 = load <8 x i32>, <8 x i32>* %4123, align 32
  %4397 = shufflevector <8 x i32> %4395, <8 x i32> %4396, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4398 = bitcast <8 x i32> %4397 to <4 x i64>
  %4399 = shufflevector <8 x i32> %4395, <8 x i32> %4396, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4400 = bitcast <8 x i32> %4399 to <4 x i64>
  %4401 = shufflevector <4 x i64> %4380, <4 x i64> %4386, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4402 = shufflevector <4 x i64> %4392, <4 x i64> %4398, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4403 = bitcast <4 x i64> %4401 to <8 x i32>
  %4404 = bitcast <4 x i64> %4402 to <8 x i32>
  %4405 = shufflevector <8 x i32> %4403, <8 x i32> %4404, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %4405, <8 x i32>* %4134, align 32
  %4406 = shufflevector <8 x i32> %4403, <8 x i32> %4404, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %4406, <8 x i32>* %4137, align 32
  %4407 = shufflevector <4 x i64> %4380, <4 x i64> %4386, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4408 = shufflevector <4 x i64> %4392, <4 x i64> %4398, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4409 = bitcast <4 x i64> %4407 to <8 x i32>
  %4410 = bitcast <4 x i64> %4408 to <8 x i32>
  %4411 = shufflevector <8 x i32> %4409, <8 x i32> %4410, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %4411, <8 x i32>* %4144, align 32
  %4412 = shufflevector <8 x i32> %4409, <8 x i32> %4410, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %4412, <8 x i32>* %4147, align 32
  %4413 = shufflevector <4 x i64> %4382, <4 x i64> %4388, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4414 = shufflevector <4 x i64> %4394, <4 x i64> %4400, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4415 = bitcast <4 x i64> %4413 to <8 x i32>
  %4416 = bitcast <4 x i64> %4414 to <8 x i32>
  %4417 = shufflevector <8 x i32> %4415, <8 x i32> %4416, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %4417, <8 x i32>* %4154, align 32
  %4418 = shufflevector <8 x i32> %4415, <8 x i32> %4416, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %4418, <8 x i32>* %4157, align 32
  %4419 = shufflevector <4 x i64> %4382, <4 x i64> %4388, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4420 = shufflevector <4 x i64> %4394, <4 x i64> %4400, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4421 = bitcast <4 x i64> %4419 to <8 x i32>
  %4422 = bitcast <4 x i64> %4420 to <8 x i32>
  %4423 = shufflevector <8 x i32> %4421, <8 x i32> %4422, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %4423, <8 x i32>* %4164, align 32
  %4424 = shufflevector <8 x i32> %4421, <8 x i32> %4422, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %4424, <8 x i32>* %4167, align 32
  %4425 = load <8 x i32>, <8 x i32>* %4170, align 32
  %4426 = load <8 x i32>, <8 x i32>* %4173, align 32
  %4427 = shufflevector <8 x i32> %4425, <8 x i32> %4426, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4428 = bitcast <8 x i32> %4427 to <4 x i64>
  %4429 = shufflevector <8 x i32> %4425, <8 x i32> %4426, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4430 = bitcast <8 x i32> %4429 to <4 x i64>
  %4431 = load <8 x i32>, <8 x i32>* %4180, align 32
  %4432 = load <8 x i32>, <8 x i32>* %4183, align 32
  %4433 = shufflevector <8 x i32> %4431, <8 x i32> %4432, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4434 = bitcast <8 x i32> %4433 to <4 x i64>
  %4435 = shufflevector <8 x i32> %4431, <8 x i32> %4432, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4436 = bitcast <8 x i32> %4435 to <4 x i64>
  %4437 = load <8 x i32>, <8 x i32>* %4190, align 32
  %4438 = load <8 x i32>, <8 x i32>* %4193, align 32
  %4439 = shufflevector <8 x i32> %4437, <8 x i32> %4438, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4440 = bitcast <8 x i32> %4439 to <4 x i64>
  %4441 = shufflevector <8 x i32> %4437, <8 x i32> %4438, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4442 = bitcast <8 x i32> %4441 to <4 x i64>
  %4443 = load <8 x i32>, <8 x i32>* %4200, align 32
  %4444 = load <8 x i32>, <8 x i32>* %4203, align 32
  %4445 = shufflevector <8 x i32> %4443, <8 x i32> %4444, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4446 = bitcast <8 x i32> %4445 to <4 x i64>
  %4447 = shufflevector <8 x i32> %4443, <8 x i32> %4444, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4448 = bitcast <8 x i32> %4447 to <4 x i64>
  %4449 = shufflevector <4 x i64> %4428, <4 x i64> %4434, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4450 = shufflevector <4 x i64> %4440, <4 x i64> %4446, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4451 = bitcast <4 x i64> %4449 to <8 x i32>
  %4452 = bitcast <4 x i64> %4450 to <8 x i32>
  %4453 = shufflevector <8 x i32> %4451, <8 x i32> %4452, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %4453, <8 x i32>* %4214, align 32
  %4454 = shufflevector <8 x i32> %4451, <8 x i32> %4452, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %4454, <8 x i32>* %4217, align 32
  %4455 = shufflevector <4 x i64> %4428, <4 x i64> %4434, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4456 = shufflevector <4 x i64> %4440, <4 x i64> %4446, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4457 = bitcast <4 x i64> %4455 to <8 x i32>
  %4458 = bitcast <4 x i64> %4456 to <8 x i32>
  %4459 = shufflevector <8 x i32> %4457, <8 x i32> %4458, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %4459, <8 x i32>* %4224, align 32
  %4460 = shufflevector <8 x i32> %4457, <8 x i32> %4458, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %4460, <8 x i32>* %4227, align 32
  %4461 = shufflevector <4 x i64> %4430, <4 x i64> %4436, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4462 = shufflevector <4 x i64> %4442, <4 x i64> %4448, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4463 = bitcast <4 x i64> %4461 to <8 x i32>
  %4464 = bitcast <4 x i64> %4462 to <8 x i32>
  %4465 = shufflevector <8 x i32> %4463, <8 x i32> %4464, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %4465, <8 x i32>* %4234, align 32
  %4466 = shufflevector <8 x i32> %4463, <8 x i32> %4464, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %4466, <8 x i32>* %4237, align 32
  %4467 = shufflevector <4 x i64> %4430, <4 x i64> %4436, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4468 = shufflevector <4 x i64> %4442, <4 x i64> %4448, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4469 = bitcast <4 x i64> %4467 to <8 x i32>
  %4470 = bitcast <4 x i64> %4468 to <8 x i32>
  %4471 = shufflevector <8 x i32> %4469, <8 x i32> %4470, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %4471, <8 x i32>* %4244, align 32
  %4472 = shufflevector <8 x i32> %4469, <8 x i32> %4470, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %4472, <8 x i32>* %4247, align 32
  %4473 = load <8 x i32>, <8 x i32>* %4250, align 32
  %4474 = load <8 x i32>, <8 x i32>* %4253, align 32
  %4475 = shufflevector <8 x i32> %4473, <8 x i32> %4474, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4476 = bitcast <8 x i32> %4475 to <4 x i64>
  %4477 = shufflevector <8 x i32> %4473, <8 x i32> %4474, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4478 = bitcast <8 x i32> %4477 to <4 x i64>
  %4479 = load <8 x i32>, <8 x i32>* %4260, align 32
  %4480 = load <8 x i32>, <8 x i32>* %4263, align 32
  %4481 = shufflevector <8 x i32> %4479, <8 x i32> %4480, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4482 = bitcast <8 x i32> %4481 to <4 x i64>
  %4483 = shufflevector <8 x i32> %4479, <8 x i32> %4480, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4484 = bitcast <8 x i32> %4483 to <4 x i64>
  %4485 = load <8 x i32>, <8 x i32>* %4270, align 32
  %4486 = load <8 x i32>, <8 x i32>* %4273, align 32
  %4487 = shufflevector <8 x i32> %4485, <8 x i32> %4486, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4488 = bitcast <8 x i32> %4487 to <4 x i64>
  %4489 = shufflevector <8 x i32> %4485, <8 x i32> %4486, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4490 = bitcast <8 x i32> %4489 to <4 x i64>
  %4491 = load <8 x i32>, <8 x i32>* %4280, align 32
  %4492 = load <8 x i32>, <8 x i32>* %4283, align 32
  %4493 = shufflevector <8 x i32> %4491, <8 x i32> %4492, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4494 = bitcast <8 x i32> %4493 to <4 x i64>
  %4495 = shufflevector <8 x i32> %4491, <8 x i32> %4492, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4496 = bitcast <8 x i32> %4495 to <4 x i64>
  %4497 = shufflevector <4 x i64> %4476, <4 x i64> %4482, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4498 = shufflevector <4 x i64> %4488, <4 x i64> %4494, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4499 = bitcast <4 x i64> %4497 to <8 x i32>
  %4500 = bitcast <4 x i64> %4498 to <8 x i32>
  %4501 = shufflevector <8 x i32> %4499, <8 x i32> %4500, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %4501, <8 x i32>* %4294, align 32
  %4502 = shufflevector <8 x i32> %4499, <8 x i32> %4500, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %4502, <8 x i32>* %4297, align 32
  %4503 = shufflevector <4 x i64> %4476, <4 x i64> %4482, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4504 = shufflevector <4 x i64> %4488, <4 x i64> %4494, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4505 = bitcast <4 x i64> %4503 to <8 x i32>
  %4506 = bitcast <4 x i64> %4504 to <8 x i32>
  %4507 = shufflevector <8 x i32> %4505, <8 x i32> %4506, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %4507, <8 x i32>* %4304, align 32
  %4508 = shufflevector <8 x i32> %4505, <8 x i32> %4506, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %4508, <8 x i32>* %4307, align 32
  %4509 = shufflevector <4 x i64> %4478, <4 x i64> %4484, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4510 = shufflevector <4 x i64> %4490, <4 x i64> %4496, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4511 = bitcast <4 x i64> %4509 to <8 x i32>
  %4512 = bitcast <4 x i64> %4510 to <8 x i32>
  %4513 = shufflevector <8 x i32> %4511, <8 x i32> %4512, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %4513, <8 x i32>* %4314, align 32
  %4514 = shufflevector <8 x i32> %4511, <8 x i32> %4512, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %4514, <8 x i32>* %4317, align 32
  %4515 = shufflevector <4 x i64> %4478, <4 x i64> %4484, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4516 = shufflevector <4 x i64> %4490, <4 x i64> %4496, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4517 = bitcast <4 x i64> %4515 to <8 x i32>
  %4518 = bitcast <4 x i64> %4516 to <8 x i32>
  %4519 = shufflevector <8 x i32> %4517, <8 x i32> %4518, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %4519, <8 x i32>* %4324, align 32
  %4520 = shufflevector <8 x i32> %4517, <8 x i32> %4518, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %4520, <8 x i32>* %4327, align 32
  br label %10159

4521:                                             ; preds = %5
  %4522 = bitcast [64 x <4 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %4522) #7
  %4523 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 16
  %4524 = bitcast <4 x i64>* %4523 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %4524, i8 -86, i64 1536, i1 false) #7
  %4525 = sext i32 %2 to i64
  %4526 = bitcast i16* %0 to <4 x i64>*
  %4527 = load <4 x i64>, <4 x i64>* %4526, align 1
  %4528 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 15
  store <4 x i64> %4527, <4 x i64>* %4528, align 32
  %4529 = getelementptr inbounds i16, i16* %0, i64 %4525
  %4530 = bitcast i16* %4529 to <4 x i64>*
  %4531 = load <4 x i64>, <4 x i64>* %4530, align 1
  %4532 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 14
  store <4 x i64> %4531, <4 x i64>* %4532, align 32
  %4533 = shl nsw i64 %4525, 1
  %4534 = getelementptr inbounds i16, i16* %0, i64 %4533
  %4535 = bitcast i16* %4534 to <4 x i64>*
  %4536 = load <4 x i64>, <4 x i64>* %4535, align 1
  %4537 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 13
  store <4 x i64> %4536, <4 x i64>* %4537, align 32
  %4538 = mul nsw i64 %4525, 3
  %4539 = getelementptr inbounds i16, i16* %0, i64 %4538
  %4540 = bitcast i16* %4539 to <4 x i64>*
  %4541 = load <4 x i64>, <4 x i64>* %4540, align 1
  %4542 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 12
  store <4 x i64> %4541, <4 x i64>* %4542, align 32
  %4543 = shl nsw i64 %4525, 2
  %4544 = getelementptr inbounds i16, i16* %0, i64 %4543
  %4545 = bitcast i16* %4544 to <4 x i64>*
  %4546 = load <4 x i64>, <4 x i64>* %4545, align 1
  %4547 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 11
  store <4 x i64> %4546, <4 x i64>* %4547, align 32
  %4548 = mul nsw i64 %4525, 5
  %4549 = getelementptr inbounds i16, i16* %0, i64 %4548
  %4550 = bitcast i16* %4549 to <4 x i64>*
  %4551 = load <4 x i64>, <4 x i64>* %4550, align 1
  %4552 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 10
  store <4 x i64> %4551, <4 x i64>* %4552, align 32
  %4553 = mul nsw i64 %4525, 6
  %4554 = getelementptr inbounds i16, i16* %0, i64 %4553
  %4555 = bitcast i16* %4554 to <4 x i64>*
  %4556 = load <4 x i64>, <4 x i64>* %4555, align 1
  %4557 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 9
  store <4 x i64> %4556, <4 x i64>* %4557, align 32
  %4558 = mul nsw i64 %4525, 7
  %4559 = getelementptr inbounds i16, i16* %0, i64 %4558
  %4560 = bitcast i16* %4559 to <4 x i64>*
  %4561 = load <4 x i64>, <4 x i64>* %4560, align 1
  %4562 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 8
  store <4 x i64> %4561, <4 x i64>* %4562, align 32
  %4563 = shl nsw i64 %4525, 3
  %4564 = getelementptr inbounds i16, i16* %0, i64 %4563
  %4565 = bitcast i16* %4564 to <4 x i64>*
  %4566 = load <4 x i64>, <4 x i64>* %4565, align 1
  %4567 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 7
  store <4 x i64> %4566, <4 x i64>* %4567, align 32
  %4568 = mul nsw i64 %4525, 9
  %4569 = getelementptr inbounds i16, i16* %0, i64 %4568
  %4570 = bitcast i16* %4569 to <4 x i64>*
  %4571 = load <4 x i64>, <4 x i64>* %4570, align 1
  %4572 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 6
  store <4 x i64> %4571, <4 x i64>* %4572, align 32
  %4573 = mul nsw i64 %4525, 10
  %4574 = getelementptr inbounds i16, i16* %0, i64 %4573
  %4575 = bitcast i16* %4574 to <4 x i64>*
  %4576 = load <4 x i64>, <4 x i64>* %4575, align 1
  %4577 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 5
  store <4 x i64> %4576, <4 x i64>* %4577, align 32
  %4578 = mul nsw i64 %4525, 11
  %4579 = getelementptr inbounds i16, i16* %0, i64 %4578
  %4580 = bitcast i16* %4579 to <4 x i64>*
  %4581 = load <4 x i64>, <4 x i64>* %4580, align 1
  %4582 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 4
  store <4 x i64> %4581, <4 x i64>* %4582, align 32
  %4583 = mul nsw i64 %4525, 12
  %4584 = getelementptr inbounds i16, i16* %0, i64 %4583
  %4585 = bitcast i16* %4584 to <4 x i64>*
  %4586 = load <4 x i64>, <4 x i64>* %4585, align 1
  %4587 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 3
  store <4 x i64> %4586, <4 x i64>* %4587, align 32
  %4588 = mul nsw i64 %4525, 13
  %4589 = getelementptr inbounds i16, i16* %0, i64 %4588
  %4590 = bitcast i16* %4589 to <4 x i64>*
  %4591 = load <4 x i64>, <4 x i64>* %4590, align 1
  %4592 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 2
  store <4 x i64> %4591, <4 x i64>* %4592, align 32
  %4593 = mul nsw i64 %4525, 14
  %4594 = getelementptr inbounds i16, i16* %0, i64 %4593
  %4595 = bitcast i16* %4594 to <4 x i64>*
  %4596 = load <4 x i64>, <4 x i64>* %4595, align 1
  %4597 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 1
  store <4 x i64> %4596, <4 x i64>* %4597, align 32
  %4598 = mul nsw i64 %4525, 15
  %4599 = getelementptr inbounds i16, i16* %0, i64 %4598
  %4600 = bitcast i16* %4599 to <4 x i64>*
  %4601 = load <4 x i64>, <4 x i64>* %4600, align 1
  %4602 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 0
  store <4 x i64> %4601, <4 x i64>* %4602, align 32
  %4603 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 0
  br label %4604

4604:                                             ; preds = %4632, %4521
  %4605 = phi <4 x i64> [ %4634, %4632 ], [ %4601, %4521 ]
  %4606 = phi i64 [ %4630, %4632 ], [ 0, %4521 ]
  %4607 = shufflevector <4 x i64> %4605, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %4608 = bitcast <2 x i64> %4607 to <8 x i16>
  %4609 = shufflevector <8 x i16> %4608, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %4610 = shufflevector <8 x i16> %4609, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %4611 = bitcast <8 x i16> %4610 to <4 x i32>
  %4612 = shufflevector <4 x i32> %4611, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %4613 = bitcast <4 x i32> %4612 to <8 x i16>
  %4614 = sext <8 x i16> %4613 to <8 x i32>
  %4615 = shl nuw nsw i64 %4606, 1
  %4616 = or i64 %4615, 1
  %4617 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %4616
  %4618 = bitcast <4 x i64>* %4617 to <8 x i32>*
  store <8 x i32> %4614, <8 x i32>* %4618, align 32
  %4619 = bitcast <4 x i64> %4605 to <8 x i32>
  %4620 = shufflevector <8 x i32> %4619, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4621 = bitcast <4 x i32> %4620 to <8 x i16>
  %4622 = shufflevector <8 x i16> %4621, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %4623 = shufflevector <8 x i16> %4622, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %4624 = bitcast <8 x i16> %4623 to <4 x i32>
  %4625 = shufflevector <4 x i32> %4624, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %4626 = bitcast <4 x i32> %4625 to <8 x i16>
  %4627 = sext <8 x i16> %4626 to <8 x i32>
  %4628 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %4615
  %4629 = bitcast <4 x i64>* %4628 to <8 x i32>*
  store <8 x i32> %4627, <8 x i32>* %4629, align 32
  %4630 = add nuw nsw i64 %4606, 1
  %4631 = icmp eq i64 %4630, 16
  br i1 %4631, label %4635, label %4632

4632:                                             ; preds = %4604
  %4633 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 %4630
  %4634 = load <4 x i64>, <4 x i64>* %4633, align 32
  br label %4604

4635:                                             ; preds = %4604
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %4522) #7
  %4636 = load i8, i8* %12, align 1
  %4637 = sext i8 %4636 to i32
  %4638 = icmp slt i8 %4636, 0
  br i1 %4638, label %4639, label %4672

4639:                                             ; preds = %4635
  %4640 = sub nsw i32 0, %4637
  %4641 = xor i32 %4637, -1
  %4642 = shl i32 1, %4641
  %4643 = insertelement <8 x i32> undef, i32 %4642, i32 0
  %4644 = shufflevector <8 x i32> %4643, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %4645

4645:                                             ; preds = %4645, %4639
  %4646 = phi i64 [ 0, %4639 ], [ %4670, %4645 ]
  %4647 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %4646
  %4648 = bitcast <4 x i64>* %4647 to <8 x i32>*
  %4649 = load <8 x i32>, <8 x i32>* %4648, align 32
  %4650 = add <8 x i32> %4649, %4644
  %4651 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %4650, i32 %4640) #7
  store <8 x i32> %4651, <8 x i32>* %4648, align 32
  %4652 = or i64 %4646, 1
  %4653 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %4652
  %4654 = bitcast <4 x i64>* %4653 to <8 x i32>*
  %4655 = load <8 x i32>, <8 x i32>* %4654, align 32
  %4656 = add <8 x i32> %4655, %4644
  %4657 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %4656, i32 %4640) #7
  store <8 x i32> %4657, <8 x i32>* %4654, align 32
  %4658 = or i64 %4646, 2
  %4659 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %4658
  %4660 = bitcast <4 x i64>* %4659 to <8 x i32>*
  %4661 = load <8 x i32>, <8 x i32>* %4660, align 32
  %4662 = add <8 x i32> %4661, %4644
  %4663 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %4662, i32 %4640) #7
  store <8 x i32> %4663, <8 x i32>* %4660, align 32
  %4664 = or i64 %4646, 3
  %4665 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %4664
  %4666 = bitcast <4 x i64>* %4665 to <8 x i32>*
  %4667 = load <8 x i32>, <8 x i32>* %4666, align 32
  %4668 = add <8 x i32> %4667, %4644
  %4669 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %4668, i32 %4640) #7
  store <8 x i32> %4669, <8 x i32>* %4666, align 32
  %4670 = add nuw nsw i64 %4646, 4
  %4671 = icmp eq i64 %4670, 32
  br i1 %4671, label %4697, label %4645

4672:                                             ; preds = %4635
  %4673 = icmp eq i8 %4636, 0
  br i1 %4673, label %4697, label %4674

4674:                                             ; preds = %4672, %4674
  %4675 = phi i64 [ %4695, %4674 ], [ 0, %4672 ]
  %4676 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %4675
  %4677 = bitcast <4 x i64>* %4676 to <8 x i32>*
  %4678 = load <8 x i32>, <8 x i32>* %4677, align 32
  %4679 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %4678, i32 %4637) #7
  store <8 x i32> %4679, <8 x i32>* %4677, align 32
  %4680 = or i64 %4675, 1
  %4681 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %4680
  %4682 = bitcast <4 x i64>* %4681 to <8 x i32>*
  %4683 = load <8 x i32>, <8 x i32>* %4682, align 32
  %4684 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %4683, i32 %4637) #7
  store <8 x i32> %4684, <8 x i32>* %4682, align 32
  %4685 = or i64 %4675, 2
  %4686 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %4685
  %4687 = bitcast <4 x i64>* %4686 to <8 x i32>*
  %4688 = load <8 x i32>, <8 x i32>* %4687, align 32
  %4689 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %4688, i32 %4637) #7
  store <8 x i32> %4689, <8 x i32>* %4687, align 32
  %4690 = or i64 %4675, 3
  %4691 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %4690
  %4692 = bitcast <4 x i64>* %4691 to <8 x i32>*
  %4693 = load <8 x i32>, <8 x i32>* %4692, align 32
  %4694 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %4693, i32 %4637) #7
  store <8 x i32> %4694, <8 x i32>* %4692, align 32
  %4695 = add nuw nsw i64 %4675, 4
  %4696 = icmp eq i64 %4695, 32
  br i1 %4696, label %4697, label %4674

4697:                                             ; preds = %4674, %4645, %4672
  %4698 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 0
  %4699 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 2, i64 2), align 2
  call void @fadst16_avx2(<4 x i64>* nonnull %4603, <4 x i64>* nonnull %4698, i8 signext %4699, i32 2, i32 2)
  %4700 = getelementptr inbounds i8, i8* %12, i64 1
  %4701 = load i8, i8* %4700, align 1
  %4702 = sext i8 %4701 to i32
  %4703 = icmp slt i8 %4701, 0
  br i1 %4703, label %4704, label %4737

4704:                                             ; preds = %4697
  %4705 = sub nsw i32 0, %4702
  %4706 = xor i32 %4702, -1
  %4707 = shl i32 1, %4706
  %4708 = insertelement <8 x i32> undef, i32 %4707, i32 0
  %4709 = shufflevector <8 x i32> %4708, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %4710

4710:                                             ; preds = %4710, %4704
  %4711 = phi i64 [ 0, %4704 ], [ %4735, %4710 ]
  %4712 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %4711
  %4713 = bitcast <4 x i64>* %4712 to <8 x i32>*
  %4714 = load <8 x i32>, <8 x i32>* %4713, align 32
  %4715 = add <8 x i32> %4714, %4709
  %4716 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %4715, i32 %4705) #7
  store <8 x i32> %4716, <8 x i32>* %4713, align 32
  %4717 = or i64 %4711, 1
  %4718 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %4717
  %4719 = bitcast <4 x i64>* %4718 to <8 x i32>*
  %4720 = load <8 x i32>, <8 x i32>* %4719, align 32
  %4721 = add <8 x i32> %4720, %4709
  %4722 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %4721, i32 %4705) #7
  store <8 x i32> %4722, <8 x i32>* %4719, align 32
  %4723 = or i64 %4711, 2
  %4724 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %4723
  %4725 = bitcast <4 x i64>* %4724 to <8 x i32>*
  %4726 = load <8 x i32>, <8 x i32>* %4725, align 32
  %4727 = add <8 x i32> %4726, %4709
  %4728 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %4727, i32 %4705) #7
  store <8 x i32> %4728, <8 x i32>* %4725, align 32
  %4729 = or i64 %4711, 3
  %4730 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %4729
  %4731 = bitcast <4 x i64>* %4730 to <8 x i32>*
  %4732 = load <8 x i32>, <8 x i32>* %4731, align 32
  %4733 = add <8 x i32> %4732, %4709
  %4734 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %4733, i32 %4705) #7
  store <8 x i32> %4734, <8 x i32>* %4731, align 32
  %4735 = add nuw nsw i64 %4711, 4
  %4736 = icmp eq i64 %4735, 32
  br i1 %4736, label %4762, label %4710

4737:                                             ; preds = %4697
  %4738 = icmp eq i8 %4701, 0
  br i1 %4738, label %4762, label %4739

4739:                                             ; preds = %4737, %4739
  %4740 = phi i64 [ %4760, %4739 ], [ 0, %4737 ]
  %4741 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %4740
  %4742 = bitcast <4 x i64>* %4741 to <8 x i32>*
  %4743 = load <8 x i32>, <8 x i32>* %4742, align 32
  %4744 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %4743, i32 %4702) #7
  store <8 x i32> %4744, <8 x i32>* %4742, align 32
  %4745 = or i64 %4740, 1
  %4746 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %4745
  %4747 = bitcast <4 x i64>* %4746 to <8 x i32>*
  %4748 = load <8 x i32>, <8 x i32>* %4747, align 32
  %4749 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %4748, i32 %4702) #7
  store <8 x i32> %4749, <8 x i32>* %4747, align 32
  %4750 = or i64 %4740, 2
  %4751 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %4750
  %4752 = bitcast <4 x i64>* %4751 to <8 x i32>*
  %4753 = load <8 x i32>, <8 x i32>* %4752, align 32
  %4754 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %4753, i32 %4702) #7
  store <8 x i32> %4754, <8 x i32>* %4752, align 32
  %4755 = or i64 %4740, 3
  %4756 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %4755
  %4757 = bitcast <4 x i64>* %4756 to <8 x i32>*
  %4758 = load <8 x i32>, <8 x i32>* %4757, align 32
  %4759 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %4758, i32 %4702) #7
  store <8 x i32> %4759, <8 x i32>* %4757, align 32
  %4760 = add nuw nsw i64 %4740, 4
  %4761 = icmp eq i64 %4760, 32
  br i1 %4761, label %4762, label %4739

4762:                                             ; preds = %4739, %4710, %4737
  %4763 = bitcast [32 x <4 x i64>]* %10 to <8 x i32>*
  %4764 = load <8 x i32>, <8 x i32>* %4763, align 32
  %4765 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 2
  %4766 = bitcast <4 x i64>* %4765 to <8 x i32>*
  %4767 = load <8 x i32>, <8 x i32>* %4766, align 32
  %4768 = shufflevector <8 x i32> %4764, <8 x i32> %4767, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4769 = bitcast <8 x i32> %4768 to <4 x i64>
  %4770 = shufflevector <8 x i32> %4764, <8 x i32> %4767, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4771 = bitcast <8 x i32> %4770 to <4 x i64>
  %4772 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 4
  %4773 = bitcast <4 x i64>* %4772 to <8 x i32>*
  %4774 = load <8 x i32>, <8 x i32>* %4773, align 32
  %4775 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 6
  %4776 = bitcast <4 x i64>* %4775 to <8 x i32>*
  %4777 = load <8 x i32>, <8 x i32>* %4776, align 32
  %4778 = shufflevector <8 x i32> %4774, <8 x i32> %4777, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4779 = bitcast <8 x i32> %4778 to <4 x i64>
  %4780 = shufflevector <8 x i32> %4774, <8 x i32> %4777, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4781 = bitcast <8 x i32> %4780 to <4 x i64>
  %4782 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 8
  %4783 = bitcast <4 x i64>* %4782 to <8 x i32>*
  %4784 = load <8 x i32>, <8 x i32>* %4783, align 32
  %4785 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 10
  %4786 = bitcast <4 x i64>* %4785 to <8 x i32>*
  %4787 = load <8 x i32>, <8 x i32>* %4786, align 32
  %4788 = shufflevector <8 x i32> %4784, <8 x i32> %4787, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4789 = bitcast <8 x i32> %4788 to <4 x i64>
  %4790 = shufflevector <8 x i32> %4784, <8 x i32> %4787, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4791 = bitcast <8 x i32> %4790 to <4 x i64>
  %4792 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 12
  %4793 = bitcast <4 x i64>* %4792 to <8 x i32>*
  %4794 = load <8 x i32>, <8 x i32>* %4793, align 32
  %4795 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 14
  %4796 = bitcast <4 x i64>* %4795 to <8 x i32>*
  %4797 = load <8 x i32>, <8 x i32>* %4796, align 32
  %4798 = shufflevector <8 x i32> %4794, <8 x i32> %4797, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4799 = bitcast <8 x i32> %4798 to <4 x i64>
  %4800 = shufflevector <8 x i32> %4794, <8 x i32> %4797, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4801 = bitcast <8 x i32> %4800 to <4 x i64>
  %4802 = shufflevector <4 x i64> %4769, <4 x i64> %4779, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4803 = shufflevector <4 x i64> %4789, <4 x i64> %4799, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4804 = bitcast <4 x i64> %4802 to <8 x i32>
  %4805 = bitcast <4 x i64> %4803 to <8 x i32>
  %4806 = shufflevector <8 x i32> %4804, <8 x i32> %4805, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %4807 = bitcast [32 x <4 x i64>]* %8 to <8 x i32>*
  store <8 x i32> %4806, <8 x i32>* %4807, align 32
  %4808 = shufflevector <8 x i32> %4804, <8 x i32> %4805, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %4809 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 8
  %4810 = bitcast <4 x i64>* %4809 to <8 x i32>*
  store <8 x i32> %4808, <8 x i32>* %4810, align 32
  %4811 = shufflevector <4 x i64> %4769, <4 x i64> %4779, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4812 = shufflevector <4 x i64> %4789, <4 x i64> %4799, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4813 = bitcast <4 x i64> %4811 to <8 x i32>
  %4814 = bitcast <4 x i64> %4812 to <8 x i32>
  %4815 = shufflevector <8 x i32> %4813, <8 x i32> %4814, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %4816 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 2
  %4817 = bitcast <4 x i64>* %4816 to <8 x i32>*
  store <8 x i32> %4815, <8 x i32>* %4817, align 32
  %4818 = shufflevector <8 x i32> %4813, <8 x i32> %4814, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %4819 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 10
  %4820 = bitcast <4 x i64>* %4819 to <8 x i32>*
  store <8 x i32> %4818, <8 x i32>* %4820, align 32
  %4821 = shufflevector <4 x i64> %4771, <4 x i64> %4781, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4822 = shufflevector <4 x i64> %4791, <4 x i64> %4801, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4823 = bitcast <4 x i64> %4821 to <8 x i32>
  %4824 = bitcast <4 x i64> %4822 to <8 x i32>
  %4825 = shufflevector <8 x i32> %4823, <8 x i32> %4824, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %4826 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 4
  %4827 = bitcast <4 x i64>* %4826 to <8 x i32>*
  store <8 x i32> %4825, <8 x i32>* %4827, align 32
  %4828 = shufflevector <8 x i32> %4823, <8 x i32> %4824, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %4829 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 12
  %4830 = bitcast <4 x i64>* %4829 to <8 x i32>*
  store <8 x i32> %4828, <8 x i32>* %4830, align 32
  %4831 = shufflevector <4 x i64> %4771, <4 x i64> %4781, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4832 = shufflevector <4 x i64> %4791, <4 x i64> %4801, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4833 = bitcast <4 x i64> %4831 to <8 x i32>
  %4834 = bitcast <4 x i64> %4832 to <8 x i32>
  %4835 = shufflevector <8 x i32> %4833, <8 x i32> %4834, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %4836 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 6
  %4837 = bitcast <4 x i64>* %4836 to <8 x i32>*
  store <8 x i32> %4835, <8 x i32>* %4837, align 32
  %4838 = shufflevector <8 x i32> %4833, <8 x i32> %4834, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %4839 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 14
  %4840 = bitcast <4 x i64>* %4839 to <8 x i32>*
  store <8 x i32> %4838, <8 x i32>* %4840, align 32
  %4841 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 1
  %4842 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 16
  %4843 = bitcast <4 x i64>* %4841 to <8 x i32>*
  %4844 = load <8 x i32>, <8 x i32>* %4843, align 32
  %4845 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 3
  %4846 = bitcast <4 x i64>* %4845 to <8 x i32>*
  %4847 = load <8 x i32>, <8 x i32>* %4846, align 32
  %4848 = shufflevector <8 x i32> %4844, <8 x i32> %4847, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4849 = bitcast <8 x i32> %4848 to <4 x i64>
  %4850 = shufflevector <8 x i32> %4844, <8 x i32> %4847, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4851 = bitcast <8 x i32> %4850 to <4 x i64>
  %4852 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 5
  %4853 = bitcast <4 x i64>* %4852 to <8 x i32>*
  %4854 = load <8 x i32>, <8 x i32>* %4853, align 32
  %4855 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 7
  %4856 = bitcast <4 x i64>* %4855 to <8 x i32>*
  %4857 = load <8 x i32>, <8 x i32>* %4856, align 32
  %4858 = shufflevector <8 x i32> %4854, <8 x i32> %4857, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4859 = bitcast <8 x i32> %4858 to <4 x i64>
  %4860 = shufflevector <8 x i32> %4854, <8 x i32> %4857, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4861 = bitcast <8 x i32> %4860 to <4 x i64>
  %4862 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 9
  %4863 = bitcast <4 x i64>* %4862 to <8 x i32>*
  %4864 = load <8 x i32>, <8 x i32>* %4863, align 32
  %4865 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 11
  %4866 = bitcast <4 x i64>* %4865 to <8 x i32>*
  %4867 = load <8 x i32>, <8 x i32>* %4866, align 32
  %4868 = shufflevector <8 x i32> %4864, <8 x i32> %4867, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4869 = bitcast <8 x i32> %4868 to <4 x i64>
  %4870 = shufflevector <8 x i32> %4864, <8 x i32> %4867, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4871 = bitcast <8 x i32> %4870 to <4 x i64>
  %4872 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 13
  %4873 = bitcast <4 x i64>* %4872 to <8 x i32>*
  %4874 = load <8 x i32>, <8 x i32>* %4873, align 32
  %4875 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 15
  %4876 = bitcast <4 x i64>* %4875 to <8 x i32>*
  %4877 = load <8 x i32>, <8 x i32>* %4876, align 32
  %4878 = shufflevector <8 x i32> %4874, <8 x i32> %4877, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4879 = bitcast <8 x i32> %4878 to <4 x i64>
  %4880 = shufflevector <8 x i32> %4874, <8 x i32> %4877, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4881 = bitcast <8 x i32> %4880 to <4 x i64>
  %4882 = shufflevector <4 x i64> %4849, <4 x i64> %4859, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4883 = shufflevector <4 x i64> %4869, <4 x i64> %4879, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4884 = bitcast <4 x i64> %4882 to <8 x i32>
  %4885 = bitcast <4 x i64> %4883 to <8 x i32>
  %4886 = shufflevector <8 x i32> %4884, <8 x i32> %4885, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %4887 = bitcast <4 x i64>* %4842 to <8 x i32>*
  store <8 x i32> %4886, <8 x i32>* %4887, align 32
  %4888 = shufflevector <8 x i32> %4884, <8 x i32> %4885, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %4889 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 24
  %4890 = bitcast <4 x i64>* %4889 to <8 x i32>*
  store <8 x i32> %4888, <8 x i32>* %4890, align 32
  %4891 = shufflevector <4 x i64> %4849, <4 x i64> %4859, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4892 = shufflevector <4 x i64> %4869, <4 x i64> %4879, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4893 = bitcast <4 x i64> %4891 to <8 x i32>
  %4894 = bitcast <4 x i64> %4892 to <8 x i32>
  %4895 = shufflevector <8 x i32> %4893, <8 x i32> %4894, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %4896 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 18
  %4897 = bitcast <4 x i64>* %4896 to <8 x i32>*
  store <8 x i32> %4895, <8 x i32>* %4897, align 32
  %4898 = shufflevector <8 x i32> %4893, <8 x i32> %4894, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %4899 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 26
  %4900 = bitcast <4 x i64>* %4899 to <8 x i32>*
  store <8 x i32> %4898, <8 x i32>* %4900, align 32
  %4901 = shufflevector <4 x i64> %4851, <4 x i64> %4861, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4902 = shufflevector <4 x i64> %4871, <4 x i64> %4881, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4903 = bitcast <4 x i64> %4901 to <8 x i32>
  %4904 = bitcast <4 x i64> %4902 to <8 x i32>
  %4905 = shufflevector <8 x i32> %4903, <8 x i32> %4904, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %4906 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 20
  %4907 = bitcast <4 x i64>* %4906 to <8 x i32>*
  store <8 x i32> %4905, <8 x i32>* %4907, align 32
  %4908 = shufflevector <8 x i32> %4903, <8 x i32> %4904, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %4909 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 28
  %4910 = bitcast <4 x i64>* %4909 to <8 x i32>*
  store <8 x i32> %4908, <8 x i32>* %4910, align 32
  %4911 = shufflevector <4 x i64> %4851, <4 x i64> %4861, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4912 = shufflevector <4 x i64> %4871, <4 x i64> %4881, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4913 = bitcast <4 x i64> %4911 to <8 x i32>
  %4914 = bitcast <4 x i64> %4912 to <8 x i32>
  %4915 = shufflevector <8 x i32> %4913, <8 x i32> %4914, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %4916 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 22
  %4917 = bitcast <4 x i64>* %4916 to <8 x i32>*
  store <8 x i32> %4915, <8 x i32>* %4917, align 32
  %4918 = shufflevector <8 x i32> %4913, <8 x i32> %4914, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %4919 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 30
  %4920 = bitcast <4 x i64>* %4919 to <8 x i32>*
  store <8 x i32> %4918, <8 x i32>* %4920, align 32
  %4921 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 16
  %4922 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 1
  %4923 = bitcast <4 x i64>* %4921 to <8 x i32>*
  %4924 = load <8 x i32>, <8 x i32>* %4923, align 32
  %4925 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 18
  %4926 = bitcast <4 x i64>* %4925 to <8 x i32>*
  %4927 = load <8 x i32>, <8 x i32>* %4926, align 32
  %4928 = shufflevector <8 x i32> %4924, <8 x i32> %4927, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4929 = bitcast <8 x i32> %4928 to <4 x i64>
  %4930 = shufflevector <8 x i32> %4924, <8 x i32> %4927, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4931 = bitcast <8 x i32> %4930 to <4 x i64>
  %4932 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 20
  %4933 = bitcast <4 x i64>* %4932 to <8 x i32>*
  %4934 = load <8 x i32>, <8 x i32>* %4933, align 32
  %4935 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 22
  %4936 = bitcast <4 x i64>* %4935 to <8 x i32>*
  %4937 = load <8 x i32>, <8 x i32>* %4936, align 32
  %4938 = shufflevector <8 x i32> %4934, <8 x i32> %4937, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4939 = bitcast <8 x i32> %4938 to <4 x i64>
  %4940 = shufflevector <8 x i32> %4934, <8 x i32> %4937, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4941 = bitcast <8 x i32> %4940 to <4 x i64>
  %4942 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 24
  %4943 = bitcast <4 x i64>* %4942 to <8 x i32>*
  %4944 = load <8 x i32>, <8 x i32>* %4943, align 32
  %4945 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 26
  %4946 = bitcast <4 x i64>* %4945 to <8 x i32>*
  %4947 = load <8 x i32>, <8 x i32>* %4946, align 32
  %4948 = shufflevector <8 x i32> %4944, <8 x i32> %4947, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4949 = bitcast <8 x i32> %4948 to <4 x i64>
  %4950 = shufflevector <8 x i32> %4944, <8 x i32> %4947, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4951 = bitcast <8 x i32> %4950 to <4 x i64>
  %4952 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 28
  %4953 = bitcast <4 x i64>* %4952 to <8 x i32>*
  %4954 = load <8 x i32>, <8 x i32>* %4953, align 32
  %4955 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 30
  %4956 = bitcast <4 x i64>* %4955 to <8 x i32>*
  %4957 = load <8 x i32>, <8 x i32>* %4956, align 32
  %4958 = shufflevector <8 x i32> %4954, <8 x i32> %4957, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4959 = bitcast <8 x i32> %4958 to <4 x i64>
  %4960 = shufflevector <8 x i32> %4954, <8 x i32> %4957, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4961 = bitcast <8 x i32> %4960 to <4 x i64>
  %4962 = shufflevector <4 x i64> %4929, <4 x i64> %4939, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4963 = shufflevector <4 x i64> %4949, <4 x i64> %4959, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4964 = bitcast <4 x i64> %4962 to <8 x i32>
  %4965 = bitcast <4 x i64> %4963 to <8 x i32>
  %4966 = shufflevector <8 x i32> %4964, <8 x i32> %4965, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %4967 = bitcast <4 x i64>* %4922 to <8 x i32>*
  store <8 x i32> %4966, <8 x i32>* %4967, align 32
  %4968 = shufflevector <8 x i32> %4964, <8 x i32> %4965, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %4969 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 9
  %4970 = bitcast <4 x i64>* %4969 to <8 x i32>*
  store <8 x i32> %4968, <8 x i32>* %4970, align 32
  %4971 = shufflevector <4 x i64> %4929, <4 x i64> %4939, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4972 = shufflevector <4 x i64> %4949, <4 x i64> %4959, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4973 = bitcast <4 x i64> %4971 to <8 x i32>
  %4974 = bitcast <4 x i64> %4972 to <8 x i32>
  %4975 = shufflevector <8 x i32> %4973, <8 x i32> %4974, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %4976 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 3
  %4977 = bitcast <4 x i64>* %4976 to <8 x i32>*
  store <8 x i32> %4975, <8 x i32>* %4977, align 32
  %4978 = shufflevector <8 x i32> %4973, <8 x i32> %4974, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %4979 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 11
  %4980 = bitcast <4 x i64>* %4979 to <8 x i32>*
  store <8 x i32> %4978, <8 x i32>* %4980, align 32
  %4981 = shufflevector <4 x i64> %4931, <4 x i64> %4941, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4982 = shufflevector <4 x i64> %4951, <4 x i64> %4961, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4983 = bitcast <4 x i64> %4981 to <8 x i32>
  %4984 = bitcast <4 x i64> %4982 to <8 x i32>
  %4985 = shufflevector <8 x i32> %4983, <8 x i32> %4984, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %4986 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 5
  %4987 = bitcast <4 x i64>* %4986 to <8 x i32>*
  store <8 x i32> %4985, <8 x i32>* %4987, align 32
  %4988 = shufflevector <8 x i32> %4983, <8 x i32> %4984, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %4989 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 13
  %4990 = bitcast <4 x i64>* %4989 to <8 x i32>*
  store <8 x i32> %4988, <8 x i32>* %4990, align 32
  %4991 = shufflevector <4 x i64> %4931, <4 x i64> %4941, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4992 = shufflevector <4 x i64> %4951, <4 x i64> %4961, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4993 = bitcast <4 x i64> %4991 to <8 x i32>
  %4994 = bitcast <4 x i64> %4992 to <8 x i32>
  %4995 = shufflevector <8 x i32> %4993, <8 x i32> %4994, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %4996 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 7
  %4997 = bitcast <4 x i64>* %4996 to <8 x i32>*
  store <8 x i32> %4995, <8 x i32>* %4997, align 32
  %4998 = shufflevector <8 x i32> %4993, <8 x i32> %4994, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %4999 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 15
  %5000 = bitcast <4 x i64>* %4999 to <8 x i32>*
  store <8 x i32> %4998, <8 x i32>* %5000, align 32
  %5001 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 17
  %5002 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 17
  %5003 = bitcast <4 x i64>* %5001 to <8 x i32>*
  %5004 = load <8 x i32>, <8 x i32>* %5003, align 32
  %5005 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 19
  %5006 = bitcast <4 x i64>* %5005 to <8 x i32>*
  %5007 = load <8 x i32>, <8 x i32>* %5006, align 32
  %5008 = shufflevector <8 x i32> %5004, <8 x i32> %5007, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5009 = bitcast <8 x i32> %5008 to <4 x i64>
  %5010 = shufflevector <8 x i32> %5004, <8 x i32> %5007, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5011 = bitcast <8 x i32> %5010 to <4 x i64>
  %5012 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 21
  %5013 = bitcast <4 x i64>* %5012 to <8 x i32>*
  %5014 = load <8 x i32>, <8 x i32>* %5013, align 32
  %5015 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 23
  %5016 = bitcast <4 x i64>* %5015 to <8 x i32>*
  %5017 = load <8 x i32>, <8 x i32>* %5016, align 32
  %5018 = shufflevector <8 x i32> %5014, <8 x i32> %5017, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5019 = bitcast <8 x i32> %5018 to <4 x i64>
  %5020 = shufflevector <8 x i32> %5014, <8 x i32> %5017, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5021 = bitcast <8 x i32> %5020 to <4 x i64>
  %5022 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 25
  %5023 = bitcast <4 x i64>* %5022 to <8 x i32>*
  %5024 = load <8 x i32>, <8 x i32>* %5023, align 32
  %5025 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 27
  %5026 = bitcast <4 x i64>* %5025 to <8 x i32>*
  %5027 = load <8 x i32>, <8 x i32>* %5026, align 32
  %5028 = shufflevector <8 x i32> %5024, <8 x i32> %5027, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5029 = bitcast <8 x i32> %5028 to <4 x i64>
  %5030 = shufflevector <8 x i32> %5024, <8 x i32> %5027, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5031 = bitcast <8 x i32> %5030 to <4 x i64>
  %5032 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 29
  %5033 = bitcast <4 x i64>* %5032 to <8 x i32>*
  %5034 = load <8 x i32>, <8 x i32>* %5033, align 32
  %5035 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 31
  %5036 = bitcast <4 x i64>* %5035 to <8 x i32>*
  %5037 = load <8 x i32>, <8 x i32>* %5036, align 32
  %5038 = shufflevector <8 x i32> %5034, <8 x i32> %5037, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5039 = bitcast <8 x i32> %5038 to <4 x i64>
  %5040 = shufflevector <8 x i32> %5034, <8 x i32> %5037, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5041 = bitcast <8 x i32> %5040 to <4 x i64>
  %5042 = shufflevector <4 x i64> %5009, <4 x i64> %5019, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5043 = shufflevector <4 x i64> %5029, <4 x i64> %5039, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5044 = bitcast <4 x i64> %5042 to <8 x i32>
  %5045 = bitcast <4 x i64> %5043 to <8 x i32>
  %5046 = shufflevector <8 x i32> %5044, <8 x i32> %5045, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %5047 = bitcast <4 x i64>* %5002 to <8 x i32>*
  store <8 x i32> %5046, <8 x i32>* %5047, align 32
  %5048 = shufflevector <8 x i32> %5044, <8 x i32> %5045, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %5049 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 25
  %5050 = bitcast <4 x i64>* %5049 to <8 x i32>*
  store <8 x i32> %5048, <8 x i32>* %5050, align 32
  %5051 = shufflevector <4 x i64> %5009, <4 x i64> %5019, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5052 = shufflevector <4 x i64> %5029, <4 x i64> %5039, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5053 = bitcast <4 x i64> %5051 to <8 x i32>
  %5054 = bitcast <4 x i64> %5052 to <8 x i32>
  %5055 = shufflevector <8 x i32> %5053, <8 x i32> %5054, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %5056 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 19
  %5057 = bitcast <4 x i64>* %5056 to <8 x i32>*
  store <8 x i32> %5055, <8 x i32>* %5057, align 32
  %5058 = shufflevector <8 x i32> %5053, <8 x i32> %5054, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %5059 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 27
  %5060 = bitcast <4 x i64>* %5059 to <8 x i32>*
  store <8 x i32> %5058, <8 x i32>* %5060, align 32
  %5061 = shufflevector <4 x i64> %5011, <4 x i64> %5021, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5062 = shufflevector <4 x i64> %5031, <4 x i64> %5041, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5063 = bitcast <4 x i64> %5061 to <8 x i32>
  %5064 = bitcast <4 x i64> %5062 to <8 x i32>
  %5065 = shufflevector <8 x i32> %5063, <8 x i32> %5064, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %5066 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 21
  %5067 = bitcast <4 x i64>* %5066 to <8 x i32>*
  store <8 x i32> %5065, <8 x i32>* %5067, align 32
  %5068 = shufflevector <8 x i32> %5063, <8 x i32> %5064, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %5069 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 29
  %5070 = bitcast <4 x i64>* %5069 to <8 x i32>*
  store <8 x i32> %5068, <8 x i32>* %5070, align 32
  %5071 = shufflevector <4 x i64> %5011, <4 x i64> %5021, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5072 = shufflevector <4 x i64> %5031, <4 x i64> %5041, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5073 = bitcast <4 x i64> %5071 to <8 x i32>
  %5074 = bitcast <4 x i64> %5072 to <8 x i32>
  %5075 = shufflevector <8 x i32> %5073, <8 x i32> %5074, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %5076 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 23
  %5077 = bitcast <4 x i64>* %5076 to <8 x i32>*
  store <8 x i32> %5075, <8 x i32>* %5077, align 32
  %5078 = shufflevector <8 x i32> %5073, <8 x i32> %5074, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %5079 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 31
  %5080 = bitcast <4 x i64>* %5079 to <8 x i32>*
  store <8 x i32> %5078, <8 x i32>* %5080, align 32
  %5081 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 2, i64 2), align 2
  call void @fadst16_avx2(<4 x i64>* nonnull %4603, <4 x i64>* nonnull %4698, i8 signext %5081, i32 2, i32 2)
  %5082 = load <8 x i32>, <8 x i32>* %4763, align 32
  %5083 = load <8 x i32>, <8 x i32>* %4766, align 32
  %5084 = shufflevector <8 x i32> %5082, <8 x i32> %5083, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5085 = bitcast <8 x i32> %5084 to <4 x i64>
  %5086 = shufflevector <8 x i32> %5082, <8 x i32> %5083, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5087 = bitcast <8 x i32> %5086 to <4 x i64>
  %5088 = load <8 x i32>, <8 x i32>* %4773, align 32
  %5089 = load <8 x i32>, <8 x i32>* %4776, align 32
  %5090 = shufflevector <8 x i32> %5088, <8 x i32> %5089, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5091 = bitcast <8 x i32> %5090 to <4 x i64>
  %5092 = shufflevector <8 x i32> %5088, <8 x i32> %5089, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5093 = bitcast <8 x i32> %5092 to <4 x i64>
  %5094 = load <8 x i32>, <8 x i32>* %4783, align 32
  %5095 = load <8 x i32>, <8 x i32>* %4786, align 32
  %5096 = shufflevector <8 x i32> %5094, <8 x i32> %5095, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5097 = bitcast <8 x i32> %5096 to <4 x i64>
  %5098 = shufflevector <8 x i32> %5094, <8 x i32> %5095, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5099 = bitcast <8 x i32> %5098 to <4 x i64>
  %5100 = load <8 x i32>, <8 x i32>* %4793, align 32
  %5101 = load <8 x i32>, <8 x i32>* %4796, align 32
  %5102 = shufflevector <8 x i32> %5100, <8 x i32> %5101, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5103 = bitcast <8 x i32> %5102 to <4 x i64>
  %5104 = shufflevector <8 x i32> %5100, <8 x i32> %5101, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5105 = bitcast <8 x i32> %5104 to <4 x i64>
  %5106 = shufflevector <4 x i64> %5085, <4 x i64> %5091, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5107 = shufflevector <4 x i64> %5097, <4 x i64> %5103, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5108 = bitcast <4 x i64> %5106 to <8 x i32>
  %5109 = bitcast <4 x i64> %5107 to <8 x i32>
  %5110 = shufflevector <8 x i32> %5108, <8 x i32> %5109, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %5110, <8 x i32>* %4807, align 32
  %5111 = shufflevector <8 x i32> %5108, <8 x i32> %5109, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %5111, <8 x i32>* %4810, align 32
  %5112 = shufflevector <4 x i64> %5085, <4 x i64> %5091, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5113 = shufflevector <4 x i64> %5097, <4 x i64> %5103, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5114 = bitcast <4 x i64> %5112 to <8 x i32>
  %5115 = bitcast <4 x i64> %5113 to <8 x i32>
  %5116 = shufflevector <8 x i32> %5114, <8 x i32> %5115, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %5116, <8 x i32>* %4817, align 32
  %5117 = shufflevector <8 x i32> %5114, <8 x i32> %5115, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %5117, <8 x i32>* %4820, align 32
  %5118 = shufflevector <4 x i64> %5087, <4 x i64> %5093, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5119 = shufflevector <4 x i64> %5099, <4 x i64> %5105, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5120 = bitcast <4 x i64> %5118 to <8 x i32>
  %5121 = bitcast <4 x i64> %5119 to <8 x i32>
  %5122 = shufflevector <8 x i32> %5120, <8 x i32> %5121, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %5122, <8 x i32>* %4827, align 32
  %5123 = shufflevector <8 x i32> %5120, <8 x i32> %5121, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %5123, <8 x i32>* %4830, align 32
  %5124 = shufflevector <4 x i64> %5087, <4 x i64> %5093, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5125 = shufflevector <4 x i64> %5099, <4 x i64> %5105, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5126 = bitcast <4 x i64> %5124 to <8 x i32>
  %5127 = bitcast <4 x i64> %5125 to <8 x i32>
  %5128 = shufflevector <8 x i32> %5126, <8 x i32> %5127, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %5128, <8 x i32>* %4837, align 32
  %5129 = shufflevector <8 x i32> %5126, <8 x i32> %5127, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %5129, <8 x i32>* %4840, align 32
  %5130 = load <8 x i32>, <8 x i32>* %4843, align 32
  %5131 = load <8 x i32>, <8 x i32>* %4846, align 32
  %5132 = shufflevector <8 x i32> %5130, <8 x i32> %5131, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5133 = bitcast <8 x i32> %5132 to <4 x i64>
  %5134 = shufflevector <8 x i32> %5130, <8 x i32> %5131, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5135 = bitcast <8 x i32> %5134 to <4 x i64>
  %5136 = load <8 x i32>, <8 x i32>* %4853, align 32
  %5137 = load <8 x i32>, <8 x i32>* %4856, align 32
  %5138 = shufflevector <8 x i32> %5136, <8 x i32> %5137, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5139 = bitcast <8 x i32> %5138 to <4 x i64>
  %5140 = shufflevector <8 x i32> %5136, <8 x i32> %5137, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5141 = bitcast <8 x i32> %5140 to <4 x i64>
  %5142 = load <8 x i32>, <8 x i32>* %4863, align 32
  %5143 = load <8 x i32>, <8 x i32>* %4866, align 32
  %5144 = shufflevector <8 x i32> %5142, <8 x i32> %5143, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5145 = bitcast <8 x i32> %5144 to <4 x i64>
  %5146 = shufflevector <8 x i32> %5142, <8 x i32> %5143, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5147 = bitcast <8 x i32> %5146 to <4 x i64>
  %5148 = load <8 x i32>, <8 x i32>* %4873, align 32
  %5149 = load <8 x i32>, <8 x i32>* %4876, align 32
  %5150 = shufflevector <8 x i32> %5148, <8 x i32> %5149, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5151 = bitcast <8 x i32> %5150 to <4 x i64>
  %5152 = shufflevector <8 x i32> %5148, <8 x i32> %5149, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5153 = bitcast <8 x i32> %5152 to <4 x i64>
  %5154 = shufflevector <4 x i64> %5133, <4 x i64> %5139, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5155 = shufflevector <4 x i64> %5145, <4 x i64> %5151, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5156 = bitcast <4 x i64> %5154 to <8 x i32>
  %5157 = bitcast <4 x i64> %5155 to <8 x i32>
  %5158 = shufflevector <8 x i32> %5156, <8 x i32> %5157, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %5158, <8 x i32>* %4887, align 32
  %5159 = shufflevector <8 x i32> %5156, <8 x i32> %5157, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %5159, <8 x i32>* %4890, align 32
  %5160 = shufflevector <4 x i64> %5133, <4 x i64> %5139, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5161 = shufflevector <4 x i64> %5145, <4 x i64> %5151, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5162 = bitcast <4 x i64> %5160 to <8 x i32>
  %5163 = bitcast <4 x i64> %5161 to <8 x i32>
  %5164 = shufflevector <8 x i32> %5162, <8 x i32> %5163, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %5164, <8 x i32>* %4897, align 32
  %5165 = shufflevector <8 x i32> %5162, <8 x i32> %5163, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %5165, <8 x i32>* %4900, align 32
  %5166 = shufflevector <4 x i64> %5135, <4 x i64> %5141, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5167 = shufflevector <4 x i64> %5147, <4 x i64> %5153, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5168 = bitcast <4 x i64> %5166 to <8 x i32>
  %5169 = bitcast <4 x i64> %5167 to <8 x i32>
  %5170 = shufflevector <8 x i32> %5168, <8 x i32> %5169, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %5170, <8 x i32>* %4907, align 32
  %5171 = shufflevector <8 x i32> %5168, <8 x i32> %5169, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %5171, <8 x i32>* %4910, align 32
  %5172 = shufflevector <4 x i64> %5135, <4 x i64> %5141, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5173 = shufflevector <4 x i64> %5147, <4 x i64> %5153, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5174 = bitcast <4 x i64> %5172 to <8 x i32>
  %5175 = bitcast <4 x i64> %5173 to <8 x i32>
  %5176 = shufflevector <8 x i32> %5174, <8 x i32> %5175, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %5176, <8 x i32>* %4917, align 32
  %5177 = shufflevector <8 x i32> %5174, <8 x i32> %5175, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %5177, <8 x i32>* %4920, align 32
  %5178 = load <8 x i32>, <8 x i32>* %4923, align 32
  %5179 = load <8 x i32>, <8 x i32>* %4926, align 32
  %5180 = shufflevector <8 x i32> %5178, <8 x i32> %5179, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5181 = bitcast <8 x i32> %5180 to <4 x i64>
  %5182 = shufflevector <8 x i32> %5178, <8 x i32> %5179, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5183 = bitcast <8 x i32> %5182 to <4 x i64>
  %5184 = load <8 x i32>, <8 x i32>* %4933, align 32
  %5185 = load <8 x i32>, <8 x i32>* %4936, align 32
  %5186 = shufflevector <8 x i32> %5184, <8 x i32> %5185, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5187 = bitcast <8 x i32> %5186 to <4 x i64>
  %5188 = shufflevector <8 x i32> %5184, <8 x i32> %5185, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5189 = bitcast <8 x i32> %5188 to <4 x i64>
  %5190 = load <8 x i32>, <8 x i32>* %4943, align 32
  %5191 = load <8 x i32>, <8 x i32>* %4946, align 32
  %5192 = shufflevector <8 x i32> %5190, <8 x i32> %5191, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5193 = bitcast <8 x i32> %5192 to <4 x i64>
  %5194 = shufflevector <8 x i32> %5190, <8 x i32> %5191, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5195 = bitcast <8 x i32> %5194 to <4 x i64>
  %5196 = load <8 x i32>, <8 x i32>* %4953, align 32
  %5197 = load <8 x i32>, <8 x i32>* %4956, align 32
  %5198 = shufflevector <8 x i32> %5196, <8 x i32> %5197, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5199 = bitcast <8 x i32> %5198 to <4 x i64>
  %5200 = shufflevector <8 x i32> %5196, <8 x i32> %5197, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5201 = bitcast <8 x i32> %5200 to <4 x i64>
  %5202 = shufflevector <4 x i64> %5181, <4 x i64> %5187, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5203 = shufflevector <4 x i64> %5193, <4 x i64> %5199, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5204 = bitcast <4 x i64> %5202 to <8 x i32>
  %5205 = bitcast <4 x i64> %5203 to <8 x i32>
  %5206 = shufflevector <8 x i32> %5204, <8 x i32> %5205, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %5206, <8 x i32>* %4967, align 32
  %5207 = shufflevector <8 x i32> %5204, <8 x i32> %5205, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %5207, <8 x i32>* %4970, align 32
  %5208 = shufflevector <4 x i64> %5181, <4 x i64> %5187, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5209 = shufflevector <4 x i64> %5193, <4 x i64> %5199, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5210 = bitcast <4 x i64> %5208 to <8 x i32>
  %5211 = bitcast <4 x i64> %5209 to <8 x i32>
  %5212 = shufflevector <8 x i32> %5210, <8 x i32> %5211, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %5212, <8 x i32>* %4977, align 32
  %5213 = shufflevector <8 x i32> %5210, <8 x i32> %5211, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %5213, <8 x i32>* %4980, align 32
  %5214 = shufflevector <4 x i64> %5183, <4 x i64> %5189, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5215 = shufflevector <4 x i64> %5195, <4 x i64> %5201, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5216 = bitcast <4 x i64> %5214 to <8 x i32>
  %5217 = bitcast <4 x i64> %5215 to <8 x i32>
  %5218 = shufflevector <8 x i32> %5216, <8 x i32> %5217, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %5218, <8 x i32>* %4987, align 32
  %5219 = shufflevector <8 x i32> %5216, <8 x i32> %5217, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %5219, <8 x i32>* %4990, align 32
  %5220 = shufflevector <4 x i64> %5183, <4 x i64> %5189, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5221 = shufflevector <4 x i64> %5195, <4 x i64> %5201, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5222 = bitcast <4 x i64> %5220 to <8 x i32>
  %5223 = bitcast <4 x i64> %5221 to <8 x i32>
  %5224 = shufflevector <8 x i32> %5222, <8 x i32> %5223, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %5224, <8 x i32>* %4997, align 32
  %5225 = shufflevector <8 x i32> %5222, <8 x i32> %5223, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %5225, <8 x i32>* %5000, align 32
  %5226 = load <8 x i32>, <8 x i32>* %5003, align 32
  %5227 = load <8 x i32>, <8 x i32>* %5006, align 32
  %5228 = shufflevector <8 x i32> %5226, <8 x i32> %5227, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5229 = bitcast <8 x i32> %5228 to <4 x i64>
  %5230 = shufflevector <8 x i32> %5226, <8 x i32> %5227, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5231 = bitcast <8 x i32> %5230 to <4 x i64>
  %5232 = load <8 x i32>, <8 x i32>* %5013, align 32
  %5233 = load <8 x i32>, <8 x i32>* %5016, align 32
  %5234 = shufflevector <8 x i32> %5232, <8 x i32> %5233, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5235 = bitcast <8 x i32> %5234 to <4 x i64>
  %5236 = shufflevector <8 x i32> %5232, <8 x i32> %5233, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5237 = bitcast <8 x i32> %5236 to <4 x i64>
  %5238 = load <8 x i32>, <8 x i32>* %5023, align 32
  %5239 = load <8 x i32>, <8 x i32>* %5026, align 32
  %5240 = shufflevector <8 x i32> %5238, <8 x i32> %5239, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5241 = bitcast <8 x i32> %5240 to <4 x i64>
  %5242 = shufflevector <8 x i32> %5238, <8 x i32> %5239, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5243 = bitcast <8 x i32> %5242 to <4 x i64>
  %5244 = load <8 x i32>, <8 x i32>* %5033, align 32
  %5245 = load <8 x i32>, <8 x i32>* %5036, align 32
  %5246 = shufflevector <8 x i32> %5244, <8 x i32> %5245, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5247 = bitcast <8 x i32> %5246 to <4 x i64>
  %5248 = shufflevector <8 x i32> %5244, <8 x i32> %5245, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5249 = bitcast <8 x i32> %5248 to <4 x i64>
  %5250 = shufflevector <4 x i64> %5229, <4 x i64> %5235, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5251 = shufflevector <4 x i64> %5241, <4 x i64> %5247, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5252 = bitcast <4 x i64> %5250 to <8 x i32>
  %5253 = bitcast <4 x i64> %5251 to <8 x i32>
  %5254 = shufflevector <8 x i32> %5252, <8 x i32> %5253, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %5254, <8 x i32>* %5047, align 32
  %5255 = shufflevector <8 x i32> %5252, <8 x i32> %5253, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %5255, <8 x i32>* %5050, align 32
  %5256 = shufflevector <4 x i64> %5229, <4 x i64> %5235, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5257 = shufflevector <4 x i64> %5241, <4 x i64> %5247, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5258 = bitcast <4 x i64> %5256 to <8 x i32>
  %5259 = bitcast <4 x i64> %5257 to <8 x i32>
  %5260 = shufflevector <8 x i32> %5258, <8 x i32> %5259, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %5260, <8 x i32>* %5057, align 32
  %5261 = shufflevector <8 x i32> %5258, <8 x i32> %5259, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %5261, <8 x i32>* %5060, align 32
  %5262 = shufflevector <4 x i64> %5231, <4 x i64> %5237, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5263 = shufflevector <4 x i64> %5243, <4 x i64> %5249, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5264 = bitcast <4 x i64> %5262 to <8 x i32>
  %5265 = bitcast <4 x i64> %5263 to <8 x i32>
  %5266 = shufflevector <8 x i32> %5264, <8 x i32> %5265, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %5266, <8 x i32>* %5067, align 32
  %5267 = shufflevector <8 x i32> %5264, <8 x i32> %5265, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %5267, <8 x i32>* %5070, align 32
  %5268 = shufflevector <4 x i64> %5231, <4 x i64> %5237, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5269 = shufflevector <4 x i64> %5243, <4 x i64> %5249, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5270 = bitcast <4 x i64> %5268 to <8 x i32>
  %5271 = bitcast <4 x i64> %5269 to <8 x i32>
  %5272 = shufflevector <8 x i32> %5270, <8 x i32> %5271, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %5272, <8 x i32>* %5077, align 32
  %5273 = shufflevector <8 x i32> %5270, <8 x i32> %5271, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %5273, <8 x i32>* %5080, align 32
  br label %10159

5274:                                             ; preds = %5
  %5275 = bitcast [64 x <4 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %5275) #7
  %5276 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 16
  %5277 = bitcast <4 x i64>* %5276 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %5277, i8 -86, i64 1536, i1 false) #7
  %5278 = sext i32 %2 to i64
  %5279 = bitcast i16* %0 to <4 x i64>*
  %5280 = load <4 x i64>, <4 x i64>* %5279, align 1
  %5281 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 0
  store <4 x i64> %5280, <4 x i64>* %5281, align 32
  %5282 = getelementptr inbounds i16, i16* %0, i64 %5278
  %5283 = bitcast i16* %5282 to <4 x i64>*
  %5284 = load <4 x i64>, <4 x i64>* %5283, align 1
  %5285 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 1
  store <4 x i64> %5284, <4 x i64>* %5285, align 32
  %5286 = shl nsw i64 %5278, 1
  %5287 = getelementptr inbounds i16, i16* %0, i64 %5286
  %5288 = bitcast i16* %5287 to <4 x i64>*
  %5289 = load <4 x i64>, <4 x i64>* %5288, align 1
  %5290 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 2
  store <4 x i64> %5289, <4 x i64>* %5290, align 32
  %5291 = mul nsw i64 %5278, 3
  %5292 = getelementptr inbounds i16, i16* %0, i64 %5291
  %5293 = bitcast i16* %5292 to <4 x i64>*
  %5294 = load <4 x i64>, <4 x i64>* %5293, align 1
  %5295 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 3
  store <4 x i64> %5294, <4 x i64>* %5295, align 32
  %5296 = shl nsw i64 %5278, 2
  %5297 = getelementptr inbounds i16, i16* %0, i64 %5296
  %5298 = bitcast i16* %5297 to <4 x i64>*
  %5299 = load <4 x i64>, <4 x i64>* %5298, align 1
  %5300 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 4
  store <4 x i64> %5299, <4 x i64>* %5300, align 32
  %5301 = mul nsw i64 %5278, 5
  %5302 = getelementptr inbounds i16, i16* %0, i64 %5301
  %5303 = bitcast i16* %5302 to <4 x i64>*
  %5304 = load <4 x i64>, <4 x i64>* %5303, align 1
  %5305 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 5
  store <4 x i64> %5304, <4 x i64>* %5305, align 32
  %5306 = mul nsw i64 %5278, 6
  %5307 = getelementptr inbounds i16, i16* %0, i64 %5306
  %5308 = bitcast i16* %5307 to <4 x i64>*
  %5309 = load <4 x i64>, <4 x i64>* %5308, align 1
  %5310 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 6
  store <4 x i64> %5309, <4 x i64>* %5310, align 32
  %5311 = mul nsw i64 %5278, 7
  %5312 = getelementptr inbounds i16, i16* %0, i64 %5311
  %5313 = bitcast i16* %5312 to <4 x i64>*
  %5314 = load <4 x i64>, <4 x i64>* %5313, align 1
  %5315 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 7
  store <4 x i64> %5314, <4 x i64>* %5315, align 32
  %5316 = shl nsw i64 %5278, 3
  %5317 = getelementptr inbounds i16, i16* %0, i64 %5316
  %5318 = bitcast i16* %5317 to <4 x i64>*
  %5319 = load <4 x i64>, <4 x i64>* %5318, align 1
  %5320 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 8
  store <4 x i64> %5319, <4 x i64>* %5320, align 32
  %5321 = mul nsw i64 %5278, 9
  %5322 = getelementptr inbounds i16, i16* %0, i64 %5321
  %5323 = bitcast i16* %5322 to <4 x i64>*
  %5324 = load <4 x i64>, <4 x i64>* %5323, align 1
  %5325 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 9
  store <4 x i64> %5324, <4 x i64>* %5325, align 32
  %5326 = mul nsw i64 %5278, 10
  %5327 = getelementptr inbounds i16, i16* %0, i64 %5326
  %5328 = bitcast i16* %5327 to <4 x i64>*
  %5329 = load <4 x i64>, <4 x i64>* %5328, align 1
  %5330 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 10
  store <4 x i64> %5329, <4 x i64>* %5330, align 32
  %5331 = mul nsw i64 %5278, 11
  %5332 = getelementptr inbounds i16, i16* %0, i64 %5331
  %5333 = bitcast i16* %5332 to <4 x i64>*
  %5334 = load <4 x i64>, <4 x i64>* %5333, align 1
  %5335 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 11
  store <4 x i64> %5334, <4 x i64>* %5335, align 32
  %5336 = mul nsw i64 %5278, 12
  %5337 = getelementptr inbounds i16, i16* %0, i64 %5336
  %5338 = bitcast i16* %5337 to <4 x i64>*
  %5339 = load <4 x i64>, <4 x i64>* %5338, align 1
  %5340 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 12
  store <4 x i64> %5339, <4 x i64>* %5340, align 32
  %5341 = mul nsw i64 %5278, 13
  %5342 = getelementptr inbounds i16, i16* %0, i64 %5341
  %5343 = bitcast i16* %5342 to <4 x i64>*
  %5344 = load <4 x i64>, <4 x i64>* %5343, align 1
  %5345 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 13
  store <4 x i64> %5344, <4 x i64>* %5345, align 32
  %5346 = mul nsw i64 %5278, 14
  %5347 = getelementptr inbounds i16, i16* %0, i64 %5346
  %5348 = bitcast i16* %5347 to <4 x i64>*
  %5349 = load <4 x i64>, <4 x i64>* %5348, align 1
  %5350 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 14
  store <4 x i64> %5349, <4 x i64>* %5350, align 32
  %5351 = mul nsw i64 %5278, 15
  %5352 = getelementptr inbounds i16, i16* %0, i64 %5351
  %5353 = bitcast i16* %5352 to <4 x i64>*
  %5354 = load <4 x i64>, <4 x i64>* %5353, align 1
  %5355 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 15
  store <4 x i64> %5354, <4 x i64>* %5355, align 32
  %5356 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 0
  br label %5357

5357:                                             ; preds = %5385, %5274
  %5358 = phi <4 x i64> [ %5387, %5385 ], [ %5280, %5274 ]
  %5359 = phi i64 [ %5383, %5385 ], [ 0, %5274 ]
  %5360 = shufflevector <4 x i64> %5358, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %5361 = bitcast <2 x i64> %5360 to <8 x i16>
  %5362 = shufflevector <8 x i16> %5361, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %5363 = shufflevector <8 x i16> %5362, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %5364 = bitcast <8 x i16> %5363 to <4 x i32>
  %5365 = shufflevector <4 x i32> %5364, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %5366 = bitcast <4 x i32> %5365 to <8 x i16>
  %5367 = sext <8 x i16> %5366 to <8 x i32>
  %5368 = shl nuw nsw i64 %5359, 1
  %5369 = or i64 %5368, 1
  %5370 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %5369
  %5371 = bitcast <4 x i64>* %5370 to <8 x i32>*
  store <8 x i32> %5367, <8 x i32>* %5371, align 32
  %5372 = bitcast <4 x i64> %5358 to <8 x i32>
  %5373 = shufflevector <8 x i32> %5372, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5374 = bitcast <4 x i32> %5373 to <8 x i16>
  %5375 = shufflevector <8 x i16> %5374, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %5376 = shufflevector <8 x i16> %5375, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %5377 = bitcast <8 x i16> %5376 to <4 x i32>
  %5378 = shufflevector <4 x i32> %5377, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %5379 = bitcast <4 x i32> %5378 to <8 x i16>
  %5380 = sext <8 x i16> %5379 to <8 x i32>
  %5381 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %5368
  %5382 = bitcast <4 x i64>* %5381 to <8 x i32>*
  store <8 x i32> %5380, <8 x i32>* %5382, align 32
  %5383 = add nuw nsw i64 %5359, 1
  %5384 = icmp eq i64 %5383, 16
  br i1 %5384, label %5388, label %5385

5385:                                             ; preds = %5357
  %5386 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 %5383
  %5387 = load <4 x i64>, <4 x i64>* %5386, align 32
  br label %5357

5388:                                             ; preds = %5357
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %5275) #7
  %5389 = load i8, i8* %12, align 1
  %5390 = sext i8 %5389 to i32
  %5391 = icmp slt i8 %5389, 0
  br i1 %5391, label %5392, label %5425

5392:                                             ; preds = %5388
  %5393 = sub nsw i32 0, %5390
  %5394 = xor i32 %5390, -1
  %5395 = shl i32 1, %5394
  %5396 = insertelement <8 x i32> undef, i32 %5395, i32 0
  %5397 = shufflevector <8 x i32> %5396, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %5398

5398:                                             ; preds = %5398, %5392
  %5399 = phi i64 [ 0, %5392 ], [ %5423, %5398 ]
  %5400 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %5399
  %5401 = bitcast <4 x i64>* %5400 to <8 x i32>*
  %5402 = load <8 x i32>, <8 x i32>* %5401, align 32
  %5403 = add <8 x i32> %5402, %5397
  %5404 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %5403, i32 %5393) #7
  store <8 x i32> %5404, <8 x i32>* %5401, align 32
  %5405 = or i64 %5399, 1
  %5406 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %5405
  %5407 = bitcast <4 x i64>* %5406 to <8 x i32>*
  %5408 = load <8 x i32>, <8 x i32>* %5407, align 32
  %5409 = add <8 x i32> %5408, %5397
  %5410 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %5409, i32 %5393) #7
  store <8 x i32> %5410, <8 x i32>* %5407, align 32
  %5411 = or i64 %5399, 2
  %5412 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %5411
  %5413 = bitcast <4 x i64>* %5412 to <8 x i32>*
  %5414 = load <8 x i32>, <8 x i32>* %5413, align 32
  %5415 = add <8 x i32> %5414, %5397
  %5416 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %5415, i32 %5393) #7
  store <8 x i32> %5416, <8 x i32>* %5413, align 32
  %5417 = or i64 %5399, 3
  %5418 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %5417
  %5419 = bitcast <4 x i64>* %5418 to <8 x i32>*
  %5420 = load <8 x i32>, <8 x i32>* %5419, align 32
  %5421 = add <8 x i32> %5420, %5397
  %5422 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %5421, i32 %5393) #7
  store <8 x i32> %5422, <8 x i32>* %5419, align 32
  %5423 = add nuw nsw i64 %5399, 4
  %5424 = icmp eq i64 %5423, 32
  br i1 %5424, label %5450, label %5398

5425:                                             ; preds = %5388
  %5426 = icmp eq i8 %5389, 0
  br i1 %5426, label %5450, label %5427

5427:                                             ; preds = %5425, %5427
  %5428 = phi i64 [ %5448, %5427 ], [ 0, %5425 ]
  %5429 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %5428
  %5430 = bitcast <4 x i64>* %5429 to <8 x i32>*
  %5431 = load <8 x i32>, <8 x i32>* %5430, align 32
  %5432 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %5431, i32 %5390) #7
  store <8 x i32> %5432, <8 x i32>* %5430, align 32
  %5433 = or i64 %5428, 1
  %5434 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %5433
  %5435 = bitcast <4 x i64>* %5434 to <8 x i32>*
  %5436 = load <8 x i32>, <8 x i32>* %5435, align 32
  %5437 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %5436, i32 %5390) #7
  store <8 x i32> %5437, <8 x i32>* %5435, align 32
  %5438 = or i64 %5428, 2
  %5439 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %5438
  %5440 = bitcast <4 x i64>* %5439 to <8 x i32>*
  %5441 = load <8 x i32>, <8 x i32>* %5440, align 32
  %5442 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %5441, i32 %5390) #7
  store <8 x i32> %5442, <8 x i32>* %5440, align 32
  %5443 = or i64 %5428, 3
  %5444 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %5443
  %5445 = bitcast <4 x i64>* %5444 to <8 x i32>*
  %5446 = load <8 x i32>, <8 x i32>* %5445, align 32
  %5447 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %5446, i32 %5390) #7
  store <8 x i32> %5447, <8 x i32>* %5445, align 32
  %5448 = add nuw nsw i64 %5428, 4
  %5449 = icmp eq i64 %5448, 32
  br i1 %5449, label %5450, label %5427

5450:                                             ; preds = %5427, %5398, %5425
  %5451 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 0
  %5452 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 2, i64 2), align 2
  call void @fadst16_avx2(<4 x i64>* nonnull %5356, <4 x i64>* nonnull %5451, i8 signext %5452, i32 2, i32 2)
  %5453 = getelementptr inbounds i8, i8* %12, i64 1
  %5454 = load i8, i8* %5453, align 1
  %5455 = sext i8 %5454 to i32
  %5456 = icmp slt i8 %5454, 0
  br i1 %5456, label %5457, label %5490

5457:                                             ; preds = %5450
  %5458 = sub nsw i32 0, %5455
  %5459 = xor i32 %5455, -1
  %5460 = shl i32 1, %5459
  %5461 = insertelement <8 x i32> undef, i32 %5460, i32 0
  %5462 = shufflevector <8 x i32> %5461, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %5463

5463:                                             ; preds = %5463, %5457
  %5464 = phi i64 [ 0, %5457 ], [ %5488, %5463 ]
  %5465 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %5464
  %5466 = bitcast <4 x i64>* %5465 to <8 x i32>*
  %5467 = load <8 x i32>, <8 x i32>* %5466, align 32
  %5468 = add <8 x i32> %5467, %5462
  %5469 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %5468, i32 %5458) #7
  store <8 x i32> %5469, <8 x i32>* %5466, align 32
  %5470 = or i64 %5464, 1
  %5471 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %5470
  %5472 = bitcast <4 x i64>* %5471 to <8 x i32>*
  %5473 = load <8 x i32>, <8 x i32>* %5472, align 32
  %5474 = add <8 x i32> %5473, %5462
  %5475 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %5474, i32 %5458) #7
  store <8 x i32> %5475, <8 x i32>* %5472, align 32
  %5476 = or i64 %5464, 2
  %5477 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %5476
  %5478 = bitcast <4 x i64>* %5477 to <8 x i32>*
  %5479 = load <8 x i32>, <8 x i32>* %5478, align 32
  %5480 = add <8 x i32> %5479, %5462
  %5481 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %5480, i32 %5458) #7
  store <8 x i32> %5481, <8 x i32>* %5478, align 32
  %5482 = or i64 %5464, 3
  %5483 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %5482
  %5484 = bitcast <4 x i64>* %5483 to <8 x i32>*
  %5485 = load <8 x i32>, <8 x i32>* %5484, align 32
  %5486 = add <8 x i32> %5485, %5462
  %5487 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %5486, i32 %5458) #7
  store <8 x i32> %5487, <8 x i32>* %5484, align 32
  %5488 = add nuw nsw i64 %5464, 4
  %5489 = icmp eq i64 %5488, 32
  br i1 %5489, label %5515, label %5463

5490:                                             ; preds = %5450
  %5491 = icmp eq i8 %5454, 0
  br i1 %5491, label %5515, label %5492

5492:                                             ; preds = %5490, %5492
  %5493 = phi i64 [ %5513, %5492 ], [ 0, %5490 ]
  %5494 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %5493
  %5495 = bitcast <4 x i64>* %5494 to <8 x i32>*
  %5496 = load <8 x i32>, <8 x i32>* %5495, align 32
  %5497 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %5496, i32 %5455) #7
  store <8 x i32> %5497, <8 x i32>* %5495, align 32
  %5498 = or i64 %5493, 1
  %5499 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %5498
  %5500 = bitcast <4 x i64>* %5499 to <8 x i32>*
  %5501 = load <8 x i32>, <8 x i32>* %5500, align 32
  %5502 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %5501, i32 %5455) #7
  store <8 x i32> %5502, <8 x i32>* %5500, align 32
  %5503 = or i64 %5493, 2
  %5504 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %5503
  %5505 = bitcast <4 x i64>* %5504 to <8 x i32>*
  %5506 = load <8 x i32>, <8 x i32>* %5505, align 32
  %5507 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %5506, i32 %5455) #7
  store <8 x i32> %5507, <8 x i32>* %5505, align 32
  %5508 = or i64 %5493, 3
  %5509 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %5508
  %5510 = bitcast <4 x i64>* %5509 to <8 x i32>*
  %5511 = load <8 x i32>, <8 x i32>* %5510, align 32
  %5512 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %5511, i32 %5455) #7
  store <8 x i32> %5512, <8 x i32>* %5510, align 32
  %5513 = add nuw nsw i64 %5493, 4
  %5514 = icmp eq i64 %5513, 32
  br i1 %5514, label %5515, label %5492

5515:                                             ; preds = %5492, %5463, %5490
  %5516 = bitcast [32 x <4 x i64>]* %10 to <8 x i32>*
  %5517 = load <8 x i32>, <8 x i32>* %5516, align 32
  %5518 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 2
  %5519 = bitcast <4 x i64>* %5518 to <8 x i32>*
  %5520 = load <8 x i32>, <8 x i32>* %5519, align 32
  %5521 = shufflevector <8 x i32> %5517, <8 x i32> %5520, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5522 = bitcast <8 x i32> %5521 to <4 x i64>
  %5523 = shufflevector <8 x i32> %5517, <8 x i32> %5520, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5524 = bitcast <8 x i32> %5523 to <4 x i64>
  %5525 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 4
  %5526 = bitcast <4 x i64>* %5525 to <8 x i32>*
  %5527 = load <8 x i32>, <8 x i32>* %5526, align 32
  %5528 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 6
  %5529 = bitcast <4 x i64>* %5528 to <8 x i32>*
  %5530 = load <8 x i32>, <8 x i32>* %5529, align 32
  %5531 = shufflevector <8 x i32> %5527, <8 x i32> %5530, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5532 = bitcast <8 x i32> %5531 to <4 x i64>
  %5533 = shufflevector <8 x i32> %5527, <8 x i32> %5530, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5534 = bitcast <8 x i32> %5533 to <4 x i64>
  %5535 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 8
  %5536 = bitcast <4 x i64>* %5535 to <8 x i32>*
  %5537 = load <8 x i32>, <8 x i32>* %5536, align 32
  %5538 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 10
  %5539 = bitcast <4 x i64>* %5538 to <8 x i32>*
  %5540 = load <8 x i32>, <8 x i32>* %5539, align 32
  %5541 = shufflevector <8 x i32> %5537, <8 x i32> %5540, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5542 = bitcast <8 x i32> %5541 to <4 x i64>
  %5543 = shufflevector <8 x i32> %5537, <8 x i32> %5540, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5544 = bitcast <8 x i32> %5543 to <4 x i64>
  %5545 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 12
  %5546 = bitcast <4 x i64>* %5545 to <8 x i32>*
  %5547 = load <8 x i32>, <8 x i32>* %5546, align 32
  %5548 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 14
  %5549 = bitcast <4 x i64>* %5548 to <8 x i32>*
  %5550 = load <8 x i32>, <8 x i32>* %5549, align 32
  %5551 = shufflevector <8 x i32> %5547, <8 x i32> %5550, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5552 = bitcast <8 x i32> %5551 to <4 x i64>
  %5553 = shufflevector <8 x i32> %5547, <8 x i32> %5550, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5554 = bitcast <8 x i32> %5553 to <4 x i64>
  %5555 = shufflevector <4 x i64> %5522, <4 x i64> %5532, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5556 = shufflevector <4 x i64> %5542, <4 x i64> %5552, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5557 = bitcast <4 x i64> %5555 to <8 x i32>
  %5558 = bitcast <4 x i64> %5556 to <8 x i32>
  %5559 = shufflevector <8 x i32> %5557, <8 x i32> %5558, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %5560 = bitcast [32 x <4 x i64>]* %8 to <8 x i32>*
  store <8 x i32> %5559, <8 x i32>* %5560, align 32
  %5561 = shufflevector <8 x i32> %5557, <8 x i32> %5558, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %5562 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 8
  %5563 = bitcast <4 x i64>* %5562 to <8 x i32>*
  store <8 x i32> %5561, <8 x i32>* %5563, align 32
  %5564 = shufflevector <4 x i64> %5522, <4 x i64> %5532, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5565 = shufflevector <4 x i64> %5542, <4 x i64> %5552, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5566 = bitcast <4 x i64> %5564 to <8 x i32>
  %5567 = bitcast <4 x i64> %5565 to <8 x i32>
  %5568 = shufflevector <8 x i32> %5566, <8 x i32> %5567, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %5569 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 2
  %5570 = bitcast <4 x i64>* %5569 to <8 x i32>*
  store <8 x i32> %5568, <8 x i32>* %5570, align 32
  %5571 = shufflevector <8 x i32> %5566, <8 x i32> %5567, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %5572 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 10
  %5573 = bitcast <4 x i64>* %5572 to <8 x i32>*
  store <8 x i32> %5571, <8 x i32>* %5573, align 32
  %5574 = shufflevector <4 x i64> %5524, <4 x i64> %5534, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5575 = shufflevector <4 x i64> %5544, <4 x i64> %5554, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5576 = bitcast <4 x i64> %5574 to <8 x i32>
  %5577 = bitcast <4 x i64> %5575 to <8 x i32>
  %5578 = shufflevector <8 x i32> %5576, <8 x i32> %5577, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %5579 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 4
  %5580 = bitcast <4 x i64>* %5579 to <8 x i32>*
  store <8 x i32> %5578, <8 x i32>* %5580, align 32
  %5581 = shufflevector <8 x i32> %5576, <8 x i32> %5577, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %5582 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 12
  %5583 = bitcast <4 x i64>* %5582 to <8 x i32>*
  store <8 x i32> %5581, <8 x i32>* %5583, align 32
  %5584 = shufflevector <4 x i64> %5524, <4 x i64> %5534, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5585 = shufflevector <4 x i64> %5544, <4 x i64> %5554, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5586 = bitcast <4 x i64> %5584 to <8 x i32>
  %5587 = bitcast <4 x i64> %5585 to <8 x i32>
  %5588 = shufflevector <8 x i32> %5586, <8 x i32> %5587, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %5589 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 6
  %5590 = bitcast <4 x i64>* %5589 to <8 x i32>*
  store <8 x i32> %5588, <8 x i32>* %5590, align 32
  %5591 = shufflevector <8 x i32> %5586, <8 x i32> %5587, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %5592 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 14
  %5593 = bitcast <4 x i64>* %5592 to <8 x i32>*
  store <8 x i32> %5591, <8 x i32>* %5593, align 32
  %5594 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 1
  %5595 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 16
  %5596 = bitcast <4 x i64>* %5594 to <8 x i32>*
  %5597 = load <8 x i32>, <8 x i32>* %5596, align 32
  %5598 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 3
  %5599 = bitcast <4 x i64>* %5598 to <8 x i32>*
  %5600 = load <8 x i32>, <8 x i32>* %5599, align 32
  %5601 = shufflevector <8 x i32> %5597, <8 x i32> %5600, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5602 = bitcast <8 x i32> %5601 to <4 x i64>
  %5603 = shufflevector <8 x i32> %5597, <8 x i32> %5600, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5604 = bitcast <8 x i32> %5603 to <4 x i64>
  %5605 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 5
  %5606 = bitcast <4 x i64>* %5605 to <8 x i32>*
  %5607 = load <8 x i32>, <8 x i32>* %5606, align 32
  %5608 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 7
  %5609 = bitcast <4 x i64>* %5608 to <8 x i32>*
  %5610 = load <8 x i32>, <8 x i32>* %5609, align 32
  %5611 = shufflevector <8 x i32> %5607, <8 x i32> %5610, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5612 = bitcast <8 x i32> %5611 to <4 x i64>
  %5613 = shufflevector <8 x i32> %5607, <8 x i32> %5610, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5614 = bitcast <8 x i32> %5613 to <4 x i64>
  %5615 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 9
  %5616 = bitcast <4 x i64>* %5615 to <8 x i32>*
  %5617 = load <8 x i32>, <8 x i32>* %5616, align 32
  %5618 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 11
  %5619 = bitcast <4 x i64>* %5618 to <8 x i32>*
  %5620 = load <8 x i32>, <8 x i32>* %5619, align 32
  %5621 = shufflevector <8 x i32> %5617, <8 x i32> %5620, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5622 = bitcast <8 x i32> %5621 to <4 x i64>
  %5623 = shufflevector <8 x i32> %5617, <8 x i32> %5620, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5624 = bitcast <8 x i32> %5623 to <4 x i64>
  %5625 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 13
  %5626 = bitcast <4 x i64>* %5625 to <8 x i32>*
  %5627 = load <8 x i32>, <8 x i32>* %5626, align 32
  %5628 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 15
  %5629 = bitcast <4 x i64>* %5628 to <8 x i32>*
  %5630 = load <8 x i32>, <8 x i32>* %5629, align 32
  %5631 = shufflevector <8 x i32> %5627, <8 x i32> %5630, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5632 = bitcast <8 x i32> %5631 to <4 x i64>
  %5633 = shufflevector <8 x i32> %5627, <8 x i32> %5630, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5634 = bitcast <8 x i32> %5633 to <4 x i64>
  %5635 = shufflevector <4 x i64> %5602, <4 x i64> %5612, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5636 = shufflevector <4 x i64> %5622, <4 x i64> %5632, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5637 = bitcast <4 x i64> %5635 to <8 x i32>
  %5638 = bitcast <4 x i64> %5636 to <8 x i32>
  %5639 = shufflevector <8 x i32> %5637, <8 x i32> %5638, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %5640 = bitcast <4 x i64>* %5595 to <8 x i32>*
  store <8 x i32> %5639, <8 x i32>* %5640, align 32
  %5641 = shufflevector <8 x i32> %5637, <8 x i32> %5638, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %5642 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 24
  %5643 = bitcast <4 x i64>* %5642 to <8 x i32>*
  store <8 x i32> %5641, <8 x i32>* %5643, align 32
  %5644 = shufflevector <4 x i64> %5602, <4 x i64> %5612, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5645 = shufflevector <4 x i64> %5622, <4 x i64> %5632, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5646 = bitcast <4 x i64> %5644 to <8 x i32>
  %5647 = bitcast <4 x i64> %5645 to <8 x i32>
  %5648 = shufflevector <8 x i32> %5646, <8 x i32> %5647, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %5649 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 18
  %5650 = bitcast <4 x i64>* %5649 to <8 x i32>*
  store <8 x i32> %5648, <8 x i32>* %5650, align 32
  %5651 = shufflevector <8 x i32> %5646, <8 x i32> %5647, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %5652 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 26
  %5653 = bitcast <4 x i64>* %5652 to <8 x i32>*
  store <8 x i32> %5651, <8 x i32>* %5653, align 32
  %5654 = shufflevector <4 x i64> %5604, <4 x i64> %5614, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5655 = shufflevector <4 x i64> %5624, <4 x i64> %5634, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5656 = bitcast <4 x i64> %5654 to <8 x i32>
  %5657 = bitcast <4 x i64> %5655 to <8 x i32>
  %5658 = shufflevector <8 x i32> %5656, <8 x i32> %5657, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %5659 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 20
  %5660 = bitcast <4 x i64>* %5659 to <8 x i32>*
  store <8 x i32> %5658, <8 x i32>* %5660, align 32
  %5661 = shufflevector <8 x i32> %5656, <8 x i32> %5657, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %5662 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 28
  %5663 = bitcast <4 x i64>* %5662 to <8 x i32>*
  store <8 x i32> %5661, <8 x i32>* %5663, align 32
  %5664 = shufflevector <4 x i64> %5604, <4 x i64> %5614, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5665 = shufflevector <4 x i64> %5624, <4 x i64> %5634, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5666 = bitcast <4 x i64> %5664 to <8 x i32>
  %5667 = bitcast <4 x i64> %5665 to <8 x i32>
  %5668 = shufflevector <8 x i32> %5666, <8 x i32> %5667, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %5669 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 22
  %5670 = bitcast <4 x i64>* %5669 to <8 x i32>*
  store <8 x i32> %5668, <8 x i32>* %5670, align 32
  %5671 = shufflevector <8 x i32> %5666, <8 x i32> %5667, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %5672 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 30
  %5673 = bitcast <4 x i64>* %5672 to <8 x i32>*
  store <8 x i32> %5671, <8 x i32>* %5673, align 32
  %5674 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 16
  %5675 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 1
  %5676 = bitcast <4 x i64>* %5674 to <8 x i32>*
  %5677 = load <8 x i32>, <8 x i32>* %5676, align 32
  %5678 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 18
  %5679 = bitcast <4 x i64>* %5678 to <8 x i32>*
  %5680 = load <8 x i32>, <8 x i32>* %5679, align 32
  %5681 = shufflevector <8 x i32> %5677, <8 x i32> %5680, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5682 = bitcast <8 x i32> %5681 to <4 x i64>
  %5683 = shufflevector <8 x i32> %5677, <8 x i32> %5680, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5684 = bitcast <8 x i32> %5683 to <4 x i64>
  %5685 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 20
  %5686 = bitcast <4 x i64>* %5685 to <8 x i32>*
  %5687 = load <8 x i32>, <8 x i32>* %5686, align 32
  %5688 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 22
  %5689 = bitcast <4 x i64>* %5688 to <8 x i32>*
  %5690 = load <8 x i32>, <8 x i32>* %5689, align 32
  %5691 = shufflevector <8 x i32> %5687, <8 x i32> %5690, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5692 = bitcast <8 x i32> %5691 to <4 x i64>
  %5693 = shufflevector <8 x i32> %5687, <8 x i32> %5690, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5694 = bitcast <8 x i32> %5693 to <4 x i64>
  %5695 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 24
  %5696 = bitcast <4 x i64>* %5695 to <8 x i32>*
  %5697 = load <8 x i32>, <8 x i32>* %5696, align 32
  %5698 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 26
  %5699 = bitcast <4 x i64>* %5698 to <8 x i32>*
  %5700 = load <8 x i32>, <8 x i32>* %5699, align 32
  %5701 = shufflevector <8 x i32> %5697, <8 x i32> %5700, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5702 = bitcast <8 x i32> %5701 to <4 x i64>
  %5703 = shufflevector <8 x i32> %5697, <8 x i32> %5700, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5704 = bitcast <8 x i32> %5703 to <4 x i64>
  %5705 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 28
  %5706 = bitcast <4 x i64>* %5705 to <8 x i32>*
  %5707 = load <8 x i32>, <8 x i32>* %5706, align 32
  %5708 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 30
  %5709 = bitcast <4 x i64>* %5708 to <8 x i32>*
  %5710 = load <8 x i32>, <8 x i32>* %5709, align 32
  %5711 = shufflevector <8 x i32> %5707, <8 x i32> %5710, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5712 = bitcast <8 x i32> %5711 to <4 x i64>
  %5713 = shufflevector <8 x i32> %5707, <8 x i32> %5710, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5714 = bitcast <8 x i32> %5713 to <4 x i64>
  %5715 = shufflevector <4 x i64> %5682, <4 x i64> %5692, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5716 = shufflevector <4 x i64> %5702, <4 x i64> %5712, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5717 = bitcast <4 x i64> %5715 to <8 x i32>
  %5718 = bitcast <4 x i64> %5716 to <8 x i32>
  %5719 = shufflevector <8 x i32> %5717, <8 x i32> %5718, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %5720 = bitcast <4 x i64>* %5675 to <8 x i32>*
  store <8 x i32> %5719, <8 x i32>* %5720, align 32
  %5721 = shufflevector <8 x i32> %5717, <8 x i32> %5718, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %5722 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 9
  %5723 = bitcast <4 x i64>* %5722 to <8 x i32>*
  store <8 x i32> %5721, <8 x i32>* %5723, align 32
  %5724 = shufflevector <4 x i64> %5682, <4 x i64> %5692, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5725 = shufflevector <4 x i64> %5702, <4 x i64> %5712, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5726 = bitcast <4 x i64> %5724 to <8 x i32>
  %5727 = bitcast <4 x i64> %5725 to <8 x i32>
  %5728 = shufflevector <8 x i32> %5726, <8 x i32> %5727, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %5729 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 3
  %5730 = bitcast <4 x i64>* %5729 to <8 x i32>*
  store <8 x i32> %5728, <8 x i32>* %5730, align 32
  %5731 = shufflevector <8 x i32> %5726, <8 x i32> %5727, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %5732 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 11
  %5733 = bitcast <4 x i64>* %5732 to <8 x i32>*
  store <8 x i32> %5731, <8 x i32>* %5733, align 32
  %5734 = shufflevector <4 x i64> %5684, <4 x i64> %5694, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5735 = shufflevector <4 x i64> %5704, <4 x i64> %5714, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5736 = bitcast <4 x i64> %5734 to <8 x i32>
  %5737 = bitcast <4 x i64> %5735 to <8 x i32>
  %5738 = shufflevector <8 x i32> %5736, <8 x i32> %5737, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %5739 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 5
  %5740 = bitcast <4 x i64>* %5739 to <8 x i32>*
  store <8 x i32> %5738, <8 x i32>* %5740, align 32
  %5741 = shufflevector <8 x i32> %5736, <8 x i32> %5737, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %5742 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 13
  %5743 = bitcast <4 x i64>* %5742 to <8 x i32>*
  store <8 x i32> %5741, <8 x i32>* %5743, align 32
  %5744 = shufflevector <4 x i64> %5684, <4 x i64> %5694, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5745 = shufflevector <4 x i64> %5704, <4 x i64> %5714, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5746 = bitcast <4 x i64> %5744 to <8 x i32>
  %5747 = bitcast <4 x i64> %5745 to <8 x i32>
  %5748 = shufflevector <8 x i32> %5746, <8 x i32> %5747, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %5749 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 7
  %5750 = bitcast <4 x i64>* %5749 to <8 x i32>*
  store <8 x i32> %5748, <8 x i32>* %5750, align 32
  %5751 = shufflevector <8 x i32> %5746, <8 x i32> %5747, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %5752 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 15
  %5753 = bitcast <4 x i64>* %5752 to <8 x i32>*
  store <8 x i32> %5751, <8 x i32>* %5753, align 32
  %5754 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 17
  %5755 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 17
  %5756 = bitcast <4 x i64>* %5754 to <8 x i32>*
  %5757 = load <8 x i32>, <8 x i32>* %5756, align 32
  %5758 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 19
  %5759 = bitcast <4 x i64>* %5758 to <8 x i32>*
  %5760 = load <8 x i32>, <8 x i32>* %5759, align 32
  %5761 = shufflevector <8 x i32> %5757, <8 x i32> %5760, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5762 = bitcast <8 x i32> %5761 to <4 x i64>
  %5763 = shufflevector <8 x i32> %5757, <8 x i32> %5760, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5764 = bitcast <8 x i32> %5763 to <4 x i64>
  %5765 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 21
  %5766 = bitcast <4 x i64>* %5765 to <8 x i32>*
  %5767 = load <8 x i32>, <8 x i32>* %5766, align 32
  %5768 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 23
  %5769 = bitcast <4 x i64>* %5768 to <8 x i32>*
  %5770 = load <8 x i32>, <8 x i32>* %5769, align 32
  %5771 = shufflevector <8 x i32> %5767, <8 x i32> %5770, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5772 = bitcast <8 x i32> %5771 to <4 x i64>
  %5773 = shufflevector <8 x i32> %5767, <8 x i32> %5770, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5774 = bitcast <8 x i32> %5773 to <4 x i64>
  %5775 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 25
  %5776 = bitcast <4 x i64>* %5775 to <8 x i32>*
  %5777 = load <8 x i32>, <8 x i32>* %5776, align 32
  %5778 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 27
  %5779 = bitcast <4 x i64>* %5778 to <8 x i32>*
  %5780 = load <8 x i32>, <8 x i32>* %5779, align 32
  %5781 = shufflevector <8 x i32> %5777, <8 x i32> %5780, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5782 = bitcast <8 x i32> %5781 to <4 x i64>
  %5783 = shufflevector <8 x i32> %5777, <8 x i32> %5780, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5784 = bitcast <8 x i32> %5783 to <4 x i64>
  %5785 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 29
  %5786 = bitcast <4 x i64>* %5785 to <8 x i32>*
  %5787 = load <8 x i32>, <8 x i32>* %5786, align 32
  %5788 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 31
  %5789 = bitcast <4 x i64>* %5788 to <8 x i32>*
  %5790 = load <8 x i32>, <8 x i32>* %5789, align 32
  %5791 = shufflevector <8 x i32> %5787, <8 x i32> %5790, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5792 = bitcast <8 x i32> %5791 to <4 x i64>
  %5793 = shufflevector <8 x i32> %5787, <8 x i32> %5790, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5794 = bitcast <8 x i32> %5793 to <4 x i64>
  %5795 = shufflevector <4 x i64> %5762, <4 x i64> %5772, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5796 = shufflevector <4 x i64> %5782, <4 x i64> %5792, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5797 = bitcast <4 x i64> %5795 to <8 x i32>
  %5798 = bitcast <4 x i64> %5796 to <8 x i32>
  %5799 = shufflevector <8 x i32> %5797, <8 x i32> %5798, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %5800 = bitcast <4 x i64>* %5755 to <8 x i32>*
  store <8 x i32> %5799, <8 x i32>* %5800, align 32
  %5801 = shufflevector <8 x i32> %5797, <8 x i32> %5798, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %5802 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 25
  %5803 = bitcast <4 x i64>* %5802 to <8 x i32>*
  store <8 x i32> %5801, <8 x i32>* %5803, align 32
  %5804 = shufflevector <4 x i64> %5762, <4 x i64> %5772, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5805 = shufflevector <4 x i64> %5782, <4 x i64> %5792, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5806 = bitcast <4 x i64> %5804 to <8 x i32>
  %5807 = bitcast <4 x i64> %5805 to <8 x i32>
  %5808 = shufflevector <8 x i32> %5806, <8 x i32> %5807, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %5809 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 19
  %5810 = bitcast <4 x i64>* %5809 to <8 x i32>*
  store <8 x i32> %5808, <8 x i32>* %5810, align 32
  %5811 = shufflevector <8 x i32> %5806, <8 x i32> %5807, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %5812 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 27
  %5813 = bitcast <4 x i64>* %5812 to <8 x i32>*
  store <8 x i32> %5811, <8 x i32>* %5813, align 32
  %5814 = shufflevector <4 x i64> %5764, <4 x i64> %5774, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5815 = shufflevector <4 x i64> %5784, <4 x i64> %5794, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5816 = bitcast <4 x i64> %5814 to <8 x i32>
  %5817 = bitcast <4 x i64> %5815 to <8 x i32>
  %5818 = shufflevector <8 x i32> %5816, <8 x i32> %5817, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %5819 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 21
  %5820 = bitcast <4 x i64>* %5819 to <8 x i32>*
  store <8 x i32> %5818, <8 x i32>* %5820, align 32
  %5821 = shufflevector <8 x i32> %5816, <8 x i32> %5817, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %5822 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 29
  %5823 = bitcast <4 x i64>* %5822 to <8 x i32>*
  store <8 x i32> %5821, <8 x i32>* %5823, align 32
  %5824 = shufflevector <4 x i64> %5764, <4 x i64> %5774, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5825 = shufflevector <4 x i64> %5784, <4 x i64> %5794, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5826 = bitcast <4 x i64> %5824 to <8 x i32>
  %5827 = bitcast <4 x i64> %5825 to <8 x i32>
  %5828 = shufflevector <8 x i32> %5826, <8 x i32> %5827, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %5829 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 23
  %5830 = bitcast <4 x i64>* %5829 to <8 x i32>*
  store <8 x i32> %5828, <8 x i32>* %5830, align 32
  %5831 = shufflevector <8 x i32> %5826, <8 x i32> %5827, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %5832 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 31
  %5833 = bitcast <4 x i64>* %5832 to <8 x i32>*
  store <8 x i32> %5831, <8 x i32>* %5833, align 32
  %5834 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 2, i64 2), align 2
  call void @fadst16_avx2(<4 x i64>* nonnull %5356, <4 x i64>* nonnull %5451, i8 signext %5834, i32 2, i32 2)
  %5835 = load <8 x i32>, <8 x i32>* %5516, align 32
  %5836 = load <8 x i32>, <8 x i32>* %5519, align 32
  %5837 = shufflevector <8 x i32> %5835, <8 x i32> %5836, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5838 = bitcast <8 x i32> %5837 to <4 x i64>
  %5839 = shufflevector <8 x i32> %5835, <8 x i32> %5836, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5840 = bitcast <8 x i32> %5839 to <4 x i64>
  %5841 = load <8 x i32>, <8 x i32>* %5526, align 32
  %5842 = load <8 x i32>, <8 x i32>* %5529, align 32
  %5843 = shufflevector <8 x i32> %5841, <8 x i32> %5842, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5844 = bitcast <8 x i32> %5843 to <4 x i64>
  %5845 = shufflevector <8 x i32> %5841, <8 x i32> %5842, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5846 = bitcast <8 x i32> %5845 to <4 x i64>
  %5847 = load <8 x i32>, <8 x i32>* %5536, align 32
  %5848 = load <8 x i32>, <8 x i32>* %5539, align 32
  %5849 = shufflevector <8 x i32> %5847, <8 x i32> %5848, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5850 = bitcast <8 x i32> %5849 to <4 x i64>
  %5851 = shufflevector <8 x i32> %5847, <8 x i32> %5848, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5852 = bitcast <8 x i32> %5851 to <4 x i64>
  %5853 = load <8 x i32>, <8 x i32>* %5546, align 32
  %5854 = load <8 x i32>, <8 x i32>* %5549, align 32
  %5855 = shufflevector <8 x i32> %5853, <8 x i32> %5854, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5856 = bitcast <8 x i32> %5855 to <4 x i64>
  %5857 = shufflevector <8 x i32> %5853, <8 x i32> %5854, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5858 = bitcast <8 x i32> %5857 to <4 x i64>
  %5859 = shufflevector <4 x i64> %5838, <4 x i64> %5844, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5860 = shufflevector <4 x i64> %5850, <4 x i64> %5856, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5861 = bitcast <4 x i64> %5859 to <8 x i32>
  %5862 = bitcast <4 x i64> %5860 to <8 x i32>
  %5863 = shufflevector <8 x i32> %5861, <8 x i32> %5862, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %5863, <8 x i32>* %5560, align 32
  %5864 = shufflevector <8 x i32> %5861, <8 x i32> %5862, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %5864, <8 x i32>* %5563, align 32
  %5865 = shufflevector <4 x i64> %5838, <4 x i64> %5844, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5866 = shufflevector <4 x i64> %5850, <4 x i64> %5856, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5867 = bitcast <4 x i64> %5865 to <8 x i32>
  %5868 = bitcast <4 x i64> %5866 to <8 x i32>
  %5869 = shufflevector <8 x i32> %5867, <8 x i32> %5868, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %5869, <8 x i32>* %5570, align 32
  %5870 = shufflevector <8 x i32> %5867, <8 x i32> %5868, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %5870, <8 x i32>* %5573, align 32
  %5871 = shufflevector <4 x i64> %5840, <4 x i64> %5846, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5872 = shufflevector <4 x i64> %5852, <4 x i64> %5858, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5873 = bitcast <4 x i64> %5871 to <8 x i32>
  %5874 = bitcast <4 x i64> %5872 to <8 x i32>
  %5875 = shufflevector <8 x i32> %5873, <8 x i32> %5874, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %5875, <8 x i32>* %5580, align 32
  %5876 = shufflevector <8 x i32> %5873, <8 x i32> %5874, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %5876, <8 x i32>* %5583, align 32
  %5877 = shufflevector <4 x i64> %5840, <4 x i64> %5846, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5878 = shufflevector <4 x i64> %5852, <4 x i64> %5858, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5879 = bitcast <4 x i64> %5877 to <8 x i32>
  %5880 = bitcast <4 x i64> %5878 to <8 x i32>
  %5881 = shufflevector <8 x i32> %5879, <8 x i32> %5880, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %5881, <8 x i32>* %5590, align 32
  %5882 = shufflevector <8 x i32> %5879, <8 x i32> %5880, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %5882, <8 x i32>* %5593, align 32
  %5883 = load <8 x i32>, <8 x i32>* %5596, align 32
  %5884 = load <8 x i32>, <8 x i32>* %5599, align 32
  %5885 = shufflevector <8 x i32> %5883, <8 x i32> %5884, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5886 = bitcast <8 x i32> %5885 to <4 x i64>
  %5887 = shufflevector <8 x i32> %5883, <8 x i32> %5884, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5888 = bitcast <8 x i32> %5887 to <4 x i64>
  %5889 = load <8 x i32>, <8 x i32>* %5606, align 32
  %5890 = load <8 x i32>, <8 x i32>* %5609, align 32
  %5891 = shufflevector <8 x i32> %5889, <8 x i32> %5890, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5892 = bitcast <8 x i32> %5891 to <4 x i64>
  %5893 = shufflevector <8 x i32> %5889, <8 x i32> %5890, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5894 = bitcast <8 x i32> %5893 to <4 x i64>
  %5895 = load <8 x i32>, <8 x i32>* %5616, align 32
  %5896 = load <8 x i32>, <8 x i32>* %5619, align 32
  %5897 = shufflevector <8 x i32> %5895, <8 x i32> %5896, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5898 = bitcast <8 x i32> %5897 to <4 x i64>
  %5899 = shufflevector <8 x i32> %5895, <8 x i32> %5896, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5900 = bitcast <8 x i32> %5899 to <4 x i64>
  %5901 = load <8 x i32>, <8 x i32>* %5626, align 32
  %5902 = load <8 x i32>, <8 x i32>* %5629, align 32
  %5903 = shufflevector <8 x i32> %5901, <8 x i32> %5902, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5904 = bitcast <8 x i32> %5903 to <4 x i64>
  %5905 = shufflevector <8 x i32> %5901, <8 x i32> %5902, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5906 = bitcast <8 x i32> %5905 to <4 x i64>
  %5907 = shufflevector <4 x i64> %5886, <4 x i64> %5892, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5908 = shufflevector <4 x i64> %5898, <4 x i64> %5904, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5909 = bitcast <4 x i64> %5907 to <8 x i32>
  %5910 = bitcast <4 x i64> %5908 to <8 x i32>
  %5911 = shufflevector <8 x i32> %5909, <8 x i32> %5910, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %5911, <8 x i32>* %5640, align 32
  %5912 = shufflevector <8 x i32> %5909, <8 x i32> %5910, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %5912, <8 x i32>* %5643, align 32
  %5913 = shufflevector <4 x i64> %5886, <4 x i64> %5892, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5914 = shufflevector <4 x i64> %5898, <4 x i64> %5904, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5915 = bitcast <4 x i64> %5913 to <8 x i32>
  %5916 = bitcast <4 x i64> %5914 to <8 x i32>
  %5917 = shufflevector <8 x i32> %5915, <8 x i32> %5916, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %5917, <8 x i32>* %5650, align 32
  %5918 = shufflevector <8 x i32> %5915, <8 x i32> %5916, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %5918, <8 x i32>* %5653, align 32
  %5919 = shufflevector <4 x i64> %5888, <4 x i64> %5894, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5920 = shufflevector <4 x i64> %5900, <4 x i64> %5906, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5921 = bitcast <4 x i64> %5919 to <8 x i32>
  %5922 = bitcast <4 x i64> %5920 to <8 x i32>
  %5923 = shufflevector <8 x i32> %5921, <8 x i32> %5922, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %5923, <8 x i32>* %5660, align 32
  %5924 = shufflevector <8 x i32> %5921, <8 x i32> %5922, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %5924, <8 x i32>* %5663, align 32
  %5925 = shufflevector <4 x i64> %5888, <4 x i64> %5894, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5926 = shufflevector <4 x i64> %5900, <4 x i64> %5906, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5927 = bitcast <4 x i64> %5925 to <8 x i32>
  %5928 = bitcast <4 x i64> %5926 to <8 x i32>
  %5929 = shufflevector <8 x i32> %5927, <8 x i32> %5928, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %5929, <8 x i32>* %5670, align 32
  %5930 = shufflevector <8 x i32> %5927, <8 x i32> %5928, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %5930, <8 x i32>* %5673, align 32
  %5931 = load <8 x i32>, <8 x i32>* %5676, align 32
  %5932 = load <8 x i32>, <8 x i32>* %5679, align 32
  %5933 = shufflevector <8 x i32> %5931, <8 x i32> %5932, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5934 = bitcast <8 x i32> %5933 to <4 x i64>
  %5935 = shufflevector <8 x i32> %5931, <8 x i32> %5932, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5936 = bitcast <8 x i32> %5935 to <4 x i64>
  %5937 = load <8 x i32>, <8 x i32>* %5686, align 32
  %5938 = load <8 x i32>, <8 x i32>* %5689, align 32
  %5939 = shufflevector <8 x i32> %5937, <8 x i32> %5938, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5940 = bitcast <8 x i32> %5939 to <4 x i64>
  %5941 = shufflevector <8 x i32> %5937, <8 x i32> %5938, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5942 = bitcast <8 x i32> %5941 to <4 x i64>
  %5943 = load <8 x i32>, <8 x i32>* %5696, align 32
  %5944 = load <8 x i32>, <8 x i32>* %5699, align 32
  %5945 = shufflevector <8 x i32> %5943, <8 x i32> %5944, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5946 = bitcast <8 x i32> %5945 to <4 x i64>
  %5947 = shufflevector <8 x i32> %5943, <8 x i32> %5944, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5948 = bitcast <8 x i32> %5947 to <4 x i64>
  %5949 = load <8 x i32>, <8 x i32>* %5706, align 32
  %5950 = load <8 x i32>, <8 x i32>* %5709, align 32
  %5951 = shufflevector <8 x i32> %5949, <8 x i32> %5950, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5952 = bitcast <8 x i32> %5951 to <4 x i64>
  %5953 = shufflevector <8 x i32> %5949, <8 x i32> %5950, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5954 = bitcast <8 x i32> %5953 to <4 x i64>
  %5955 = shufflevector <4 x i64> %5934, <4 x i64> %5940, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5956 = shufflevector <4 x i64> %5946, <4 x i64> %5952, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5957 = bitcast <4 x i64> %5955 to <8 x i32>
  %5958 = bitcast <4 x i64> %5956 to <8 x i32>
  %5959 = shufflevector <8 x i32> %5957, <8 x i32> %5958, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %5959, <8 x i32>* %5720, align 32
  %5960 = shufflevector <8 x i32> %5957, <8 x i32> %5958, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %5960, <8 x i32>* %5723, align 32
  %5961 = shufflevector <4 x i64> %5934, <4 x i64> %5940, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5962 = shufflevector <4 x i64> %5946, <4 x i64> %5952, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5963 = bitcast <4 x i64> %5961 to <8 x i32>
  %5964 = bitcast <4 x i64> %5962 to <8 x i32>
  %5965 = shufflevector <8 x i32> %5963, <8 x i32> %5964, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %5965, <8 x i32>* %5730, align 32
  %5966 = shufflevector <8 x i32> %5963, <8 x i32> %5964, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %5966, <8 x i32>* %5733, align 32
  %5967 = shufflevector <4 x i64> %5936, <4 x i64> %5942, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5968 = shufflevector <4 x i64> %5948, <4 x i64> %5954, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %5969 = bitcast <4 x i64> %5967 to <8 x i32>
  %5970 = bitcast <4 x i64> %5968 to <8 x i32>
  %5971 = shufflevector <8 x i32> %5969, <8 x i32> %5970, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %5971, <8 x i32>* %5740, align 32
  %5972 = shufflevector <8 x i32> %5969, <8 x i32> %5970, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %5972, <8 x i32>* %5743, align 32
  %5973 = shufflevector <4 x i64> %5936, <4 x i64> %5942, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5974 = shufflevector <4 x i64> %5948, <4 x i64> %5954, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %5975 = bitcast <4 x i64> %5973 to <8 x i32>
  %5976 = bitcast <4 x i64> %5974 to <8 x i32>
  %5977 = shufflevector <8 x i32> %5975, <8 x i32> %5976, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %5977, <8 x i32>* %5750, align 32
  %5978 = shufflevector <8 x i32> %5975, <8 x i32> %5976, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %5978, <8 x i32>* %5753, align 32
  %5979 = load <8 x i32>, <8 x i32>* %5756, align 32
  %5980 = load <8 x i32>, <8 x i32>* %5759, align 32
  %5981 = shufflevector <8 x i32> %5979, <8 x i32> %5980, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5982 = bitcast <8 x i32> %5981 to <4 x i64>
  %5983 = shufflevector <8 x i32> %5979, <8 x i32> %5980, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5984 = bitcast <8 x i32> %5983 to <4 x i64>
  %5985 = load <8 x i32>, <8 x i32>* %5766, align 32
  %5986 = load <8 x i32>, <8 x i32>* %5769, align 32
  %5987 = shufflevector <8 x i32> %5985, <8 x i32> %5986, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5988 = bitcast <8 x i32> %5987 to <4 x i64>
  %5989 = shufflevector <8 x i32> %5985, <8 x i32> %5986, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5990 = bitcast <8 x i32> %5989 to <4 x i64>
  %5991 = load <8 x i32>, <8 x i32>* %5776, align 32
  %5992 = load <8 x i32>, <8 x i32>* %5779, align 32
  %5993 = shufflevector <8 x i32> %5991, <8 x i32> %5992, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %5994 = bitcast <8 x i32> %5993 to <4 x i64>
  %5995 = shufflevector <8 x i32> %5991, <8 x i32> %5992, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %5996 = bitcast <8 x i32> %5995 to <4 x i64>
  %5997 = load <8 x i32>, <8 x i32>* %5786, align 32
  %5998 = load <8 x i32>, <8 x i32>* %5789, align 32
  %5999 = shufflevector <8 x i32> %5997, <8 x i32> %5998, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6000 = bitcast <8 x i32> %5999 to <4 x i64>
  %6001 = shufflevector <8 x i32> %5997, <8 x i32> %5998, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6002 = bitcast <8 x i32> %6001 to <4 x i64>
  %6003 = shufflevector <4 x i64> %5982, <4 x i64> %5988, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6004 = shufflevector <4 x i64> %5994, <4 x i64> %6000, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6005 = bitcast <4 x i64> %6003 to <8 x i32>
  %6006 = bitcast <4 x i64> %6004 to <8 x i32>
  %6007 = shufflevector <8 x i32> %6005, <8 x i32> %6006, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %6007, <8 x i32>* %5800, align 32
  %6008 = shufflevector <8 x i32> %6005, <8 x i32> %6006, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %6008, <8 x i32>* %5803, align 32
  %6009 = shufflevector <4 x i64> %5982, <4 x i64> %5988, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6010 = shufflevector <4 x i64> %5994, <4 x i64> %6000, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6011 = bitcast <4 x i64> %6009 to <8 x i32>
  %6012 = bitcast <4 x i64> %6010 to <8 x i32>
  %6013 = shufflevector <8 x i32> %6011, <8 x i32> %6012, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %6013, <8 x i32>* %5810, align 32
  %6014 = shufflevector <8 x i32> %6011, <8 x i32> %6012, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %6014, <8 x i32>* %5813, align 32
  %6015 = shufflevector <4 x i64> %5984, <4 x i64> %5990, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6016 = shufflevector <4 x i64> %5996, <4 x i64> %6002, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6017 = bitcast <4 x i64> %6015 to <8 x i32>
  %6018 = bitcast <4 x i64> %6016 to <8 x i32>
  %6019 = shufflevector <8 x i32> %6017, <8 x i32> %6018, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %6019, <8 x i32>* %5820, align 32
  %6020 = shufflevector <8 x i32> %6017, <8 x i32> %6018, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %6020, <8 x i32>* %5823, align 32
  %6021 = shufflevector <4 x i64> %5984, <4 x i64> %5990, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6022 = shufflevector <4 x i64> %5996, <4 x i64> %6002, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6023 = bitcast <4 x i64> %6021 to <8 x i32>
  %6024 = bitcast <4 x i64> %6022 to <8 x i32>
  %6025 = shufflevector <8 x i32> %6023, <8 x i32> %6024, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %6025, <8 x i32>* %5830, align 32
  %6026 = shufflevector <8 x i32> %6023, <8 x i32> %6024, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %6026, <8 x i32>* %5833, align 32
  br label %10159

6027:                                             ; preds = %5
  %6028 = bitcast [64 x <4 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %6028) #7
  %6029 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 16
  %6030 = bitcast <4 x i64>* %6029 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %6030, i8 -86, i64 1536, i1 false) #7
  %6031 = sext i32 %2 to i64
  %6032 = bitcast i16* %0 to <4 x i64>*
  %6033 = load <4 x i64>, <4 x i64>* %6032, align 1
  %6034 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 15
  store <4 x i64> %6033, <4 x i64>* %6034, align 32
  %6035 = getelementptr inbounds i16, i16* %0, i64 %6031
  %6036 = bitcast i16* %6035 to <4 x i64>*
  %6037 = load <4 x i64>, <4 x i64>* %6036, align 1
  %6038 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 14
  store <4 x i64> %6037, <4 x i64>* %6038, align 32
  %6039 = shl nsw i64 %6031, 1
  %6040 = getelementptr inbounds i16, i16* %0, i64 %6039
  %6041 = bitcast i16* %6040 to <4 x i64>*
  %6042 = load <4 x i64>, <4 x i64>* %6041, align 1
  %6043 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 13
  store <4 x i64> %6042, <4 x i64>* %6043, align 32
  %6044 = mul nsw i64 %6031, 3
  %6045 = getelementptr inbounds i16, i16* %0, i64 %6044
  %6046 = bitcast i16* %6045 to <4 x i64>*
  %6047 = load <4 x i64>, <4 x i64>* %6046, align 1
  %6048 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 12
  store <4 x i64> %6047, <4 x i64>* %6048, align 32
  %6049 = shl nsw i64 %6031, 2
  %6050 = getelementptr inbounds i16, i16* %0, i64 %6049
  %6051 = bitcast i16* %6050 to <4 x i64>*
  %6052 = load <4 x i64>, <4 x i64>* %6051, align 1
  %6053 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 11
  store <4 x i64> %6052, <4 x i64>* %6053, align 32
  %6054 = mul nsw i64 %6031, 5
  %6055 = getelementptr inbounds i16, i16* %0, i64 %6054
  %6056 = bitcast i16* %6055 to <4 x i64>*
  %6057 = load <4 x i64>, <4 x i64>* %6056, align 1
  %6058 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 10
  store <4 x i64> %6057, <4 x i64>* %6058, align 32
  %6059 = mul nsw i64 %6031, 6
  %6060 = getelementptr inbounds i16, i16* %0, i64 %6059
  %6061 = bitcast i16* %6060 to <4 x i64>*
  %6062 = load <4 x i64>, <4 x i64>* %6061, align 1
  %6063 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 9
  store <4 x i64> %6062, <4 x i64>* %6063, align 32
  %6064 = mul nsw i64 %6031, 7
  %6065 = getelementptr inbounds i16, i16* %0, i64 %6064
  %6066 = bitcast i16* %6065 to <4 x i64>*
  %6067 = load <4 x i64>, <4 x i64>* %6066, align 1
  %6068 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 8
  store <4 x i64> %6067, <4 x i64>* %6068, align 32
  %6069 = shl nsw i64 %6031, 3
  %6070 = getelementptr inbounds i16, i16* %0, i64 %6069
  %6071 = bitcast i16* %6070 to <4 x i64>*
  %6072 = load <4 x i64>, <4 x i64>* %6071, align 1
  %6073 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 7
  store <4 x i64> %6072, <4 x i64>* %6073, align 32
  %6074 = mul nsw i64 %6031, 9
  %6075 = getelementptr inbounds i16, i16* %0, i64 %6074
  %6076 = bitcast i16* %6075 to <4 x i64>*
  %6077 = load <4 x i64>, <4 x i64>* %6076, align 1
  %6078 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 6
  store <4 x i64> %6077, <4 x i64>* %6078, align 32
  %6079 = mul nsw i64 %6031, 10
  %6080 = getelementptr inbounds i16, i16* %0, i64 %6079
  %6081 = bitcast i16* %6080 to <4 x i64>*
  %6082 = load <4 x i64>, <4 x i64>* %6081, align 1
  %6083 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 5
  store <4 x i64> %6082, <4 x i64>* %6083, align 32
  %6084 = mul nsw i64 %6031, 11
  %6085 = getelementptr inbounds i16, i16* %0, i64 %6084
  %6086 = bitcast i16* %6085 to <4 x i64>*
  %6087 = load <4 x i64>, <4 x i64>* %6086, align 1
  %6088 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 4
  store <4 x i64> %6087, <4 x i64>* %6088, align 32
  %6089 = mul nsw i64 %6031, 12
  %6090 = getelementptr inbounds i16, i16* %0, i64 %6089
  %6091 = bitcast i16* %6090 to <4 x i64>*
  %6092 = load <4 x i64>, <4 x i64>* %6091, align 1
  %6093 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 3
  store <4 x i64> %6092, <4 x i64>* %6093, align 32
  %6094 = mul nsw i64 %6031, 13
  %6095 = getelementptr inbounds i16, i16* %0, i64 %6094
  %6096 = bitcast i16* %6095 to <4 x i64>*
  %6097 = load <4 x i64>, <4 x i64>* %6096, align 1
  %6098 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 2
  store <4 x i64> %6097, <4 x i64>* %6098, align 32
  %6099 = mul nsw i64 %6031, 14
  %6100 = getelementptr inbounds i16, i16* %0, i64 %6099
  %6101 = bitcast i16* %6100 to <4 x i64>*
  %6102 = load <4 x i64>, <4 x i64>* %6101, align 1
  %6103 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 1
  store <4 x i64> %6102, <4 x i64>* %6103, align 32
  %6104 = mul nsw i64 %6031, 15
  %6105 = getelementptr inbounds i16, i16* %0, i64 %6104
  %6106 = bitcast i16* %6105 to <4 x i64>*
  %6107 = load <4 x i64>, <4 x i64>* %6106, align 1
  %6108 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 0
  store <4 x i64> %6107, <4 x i64>* %6108, align 32
  %6109 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 0
  %6110 = shufflevector <4 x i64> %6107, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6111 = bitcast <2 x i64> %6110 to <8 x i16>
  %6112 = sext <8 x i16> %6111 to <8 x i32>
  %6113 = bitcast [32 x <4 x i64>]* %8 to <8 x i32>*
  store <8 x i32> %6112, <8 x i32>* %6113, align 32
  %6114 = bitcast <4 x i64> %6107 to <8 x i32>
  %6115 = shufflevector <8 x i32> %6114, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6116 = bitcast <4 x i32> %6115 to <8 x i16>
  %6117 = sext <8 x i16> %6116 to <8 x i32>
  %6118 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 1
  %6119 = bitcast <4 x i64>* %6118 to <8 x i32>*
  store <8 x i32> %6117, <8 x i32>* %6119, align 32
  br label %6120

6120:                                             ; preds = %6027, %6120
  %6121 = phi i64 [ 1, %6027 ], [ %6137, %6120 ]
  %6122 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 %6121
  %6123 = load <4 x i64>, <4 x i64>* %6122, align 32
  %6124 = shufflevector <4 x i64> %6123, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6125 = bitcast <2 x i64> %6124 to <8 x i16>
  %6126 = sext <8 x i16> %6125 to <8 x i32>
  %6127 = shl nuw nsw i64 %6121, 1
  %6128 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %6127
  %6129 = bitcast <4 x i64>* %6128 to <8 x i32>*
  store <8 x i32> %6126, <8 x i32>* %6129, align 32
  %6130 = bitcast <4 x i64> %6123 to <8 x i32>
  %6131 = shufflevector <8 x i32> %6130, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6132 = bitcast <4 x i32> %6131 to <8 x i16>
  %6133 = sext <8 x i16> %6132 to <8 x i32>
  %6134 = or i64 %6127, 1
  %6135 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %6134
  %6136 = bitcast <4 x i64>* %6135 to <8 x i32>*
  store <8 x i32> %6133, <8 x i32>* %6136, align 32
  %6137 = add nuw nsw i64 %6121, 1
  %6138 = icmp eq i64 %6137, 16
  br i1 %6138, label %6139, label %6120

6139:                                             ; preds = %6120
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %6028) #7
  %6140 = load i8, i8* %12, align 1
  %6141 = sext i8 %6140 to i32
  %6142 = icmp slt i8 %6140, 0
  br i1 %6142, label %6143, label %6176

6143:                                             ; preds = %6139
  %6144 = sub nsw i32 0, %6141
  %6145 = xor i32 %6141, -1
  %6146 = shl i32 1, %6145
  %6147 = insertelement <8 x i32> undef, i32 %6146, i32 0
  %6148 = shufflevector <8 x i32> %6147, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %6149

6149:                                             ; preds = %6149, %6143
  %6150 = phi i64 [ 0, %6143 ], [ %6174, %6149 ]
  %6151 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %6150
  %6152 = bitcast <4 x i64>* %6151 to <8 x i32>*
  %6153 = load <8 x i32>, <8 x i32>* %6152, align 32
  %6154 = add <8 x i32> %6153, %6148
  %6155 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %6154, i32 %6144) #7
  store <8 x i32> %6155, <8 x i32>* %6152, align 32
  %6156 = or i64 %6150, 1
  %6157 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %6156
  %6158 = bitcast <4 x i64>* %6157 to <8 x i32>*
  %6159 = load <8 x i32>, <8 x i32>* %6158, align 32
  %6160 = add <8 x i32> %6159, %6148
  %6161 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %6160, i32 %6144) #7
  store <8 x i32> %6161, <8 x i32>* %6158, align 32
  %6162 = or i64 %6150, 2
  %6163 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %6162
  %6164 = bitcast <4 x i64>* %6163 to <8 x i32>*
  %6165 = load <8 x i32>, <8 x i32>* %6164, align 32
  %6166 = add <8 x i32> %6165, %6148
  %6167 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %6166, i32 %6144) #7
  store <8 x i32> %6167, <8 x i32>* %6164, align 32
  %6168 = or i64 %6150, 3
  %6169 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %6168
  %6170 = bitcast <4 x i64>* %6169 to <8 x i32>*
  %6171 = load <8 x i32>, <8 x i32>* %6170, align 32
  %6172 = add <8 x i32> %6171, %6148
  %6173 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %6172, i32 %6144) #7
  store <8 x i32> %6173, <8 x i32>* %6170, align 32
  %6174 = add nuw nsw i64 %6150, 4
  %6175 = icmp eq i64 %6174, 32
  br i1 %6175, label %6201, label %6149

6176:                                             ; preds = %6139
  %6177 = icmp eq i8 %6140, 0
  br i1 %6177, label %6201, label %6178

6178:                                             ; preds = %6176, %6178
  %6179 = phi i64 [ %6199, %6178 ], [ 0, %6176 ]
  %6180 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %6179
  %6181 = bitcast <4 x i64>* %6180 to <8 x i32>*
  %6182 = load <8 x i32>, <8 x i32>* %6181, align 32
  %6183 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %6182, i32 %6141) #7
  store <8 x i32> %6183, <8 x i32>* %6181, align 32
  %6184 = or i64 %6179, 1
  %6185 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %6184
  %6186 = bitcast <4 x i64>* %6185 to <8 x i32>*
  %6187 = load <8 x i32>, <8 x i32>* %6186, align 32
  %6188 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %6187, i32 %6141) #7
  store <8 x i32> %6188, <8 x i32>* %6186, align 32
  %6189 = or i64 %6179, 2
  %6190 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %6189
  %6191 = bitcast <4 x i64>* %6190 to <8 x i32>*
  %6192 = load <8 x i32>, <8 x i32>* %6191, align 32
  %6193 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %6192, i32 %6141) #7
  store <8 x i32> %6193, <8 x i32>* %6191, align 32
  %6194 = or i64 %6179, 3
  %6195 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %6194
  %6196 = bitcast <4 x i64>* %6195 to <8 x i32>*
  %6197 = load <8 x i32>, <8 x i32>* %6196, align 32
  %6198 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %6197, i32 %6141) #7
  store <8 x i32> %6198, <8 x i32>* %6196, align 32
  %6199 = add nuw nsw i64 %6179, 4
  %6200 = icmp eq i64 %6199, 32
  br i1 %6200, label %6201, label %6178

6201:                                             ; preds = %6178, %6149, %6176
  %6202 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 0
  %6203 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 2, i64 2), align 2
  call void @fadst16_avx2(<4 x i64>* nonnull %6109, <4 x i64>* nonnull %6202, i8 signext %6203, i32 2, i32 2)
  %6204 = getelementptr inbounds i8, i8* %12, i64 1
  %6205 = load i8, i8* %6204, align 1
  %6206 = sext i8 %6205 to i32
  %6207 = icmp slt i8 %6205, 0
  br i1 %6207, label %6208, label %6241

6208:                                             ; preds = %6201
  %6209 = sub nsw i32 0, %6206
  %6210 = xor i32 %6206, -1
  %6211 = shl i32 1, %6210
  %6212 = insertelement <8 x i32> undef, i32 %6211, i32 0
  %6213 = shufflevector <8 x i32> %6212, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %6214

6214:                                             ; preds = %6214, %6208
  %6215 = phi i64 [ 0, %6208 ], [ %6239, %6214 ]
  %6216 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %6215
  %6217 = bitcast <4 x i64>* %6216 to <8 x i32>*
  %6218 = load <8 x i32>, <8 x i32>* %6217, align 32
  %6219 = add <8 x i32> %6218, %6213
  %6220 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %6219, i32 %6209) #7
  store <8 x i32> %6220, <8 x i32>* %6217, align 32
  %6221 = or i64 %6215, 1
  %6222 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %6221
  %6223 = bitcast <4 x i64>* %6222 to <8 x i32>*
  %6224 = load <8 x i32>, <8 x i32>* %6223, align 32
  %6225 = add <8 x i32> %6224, %6213
  %6226 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %6225, i32 %6209) #7
  store <8 x i32> %6226, <8 x i32>* %6223, align 32
  %6227 = or i64 %6215, 2
  %6228 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %6227
  %6229 = bitcast <4 x i64>* %6228 to <8 x i32>*
  %6230 = load <8 x i32>, <8 x i32>* %6229, align 32
  %6231 = add <8 x i32> %6230, %6213
  %6232 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %6231, i32 %6209) #7
  store <8 x i32> %6232, <8 x i32>* %6229, align 32
  %6233 = or i64 %6215, 3
  %6234 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %6233
  %6235 = bitcast <4 x i64>* %6234 to <8 x i32>*
  %6236 = load <8 x i32>, <8 x i32>* %6235, align 32
  %6237 = add <8 x i32> %6236, %6213
  %6238 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %6237, i32 %6209) #7
  store <8 x i32> %6238, <8 x i32>* %6235, align 32
  %6239 = add nuw nsw i64 %6215, 4
  %6240 = icmp eq i64 %6239, 32
  br i1 %6240, label %6266, label %6214

6241:                                             ; preds = %6201
  %6242 = icmp eq i8 %6205, 0
  br i1 %6242, label %6266, label %6243

6243:                                             ; preds = %6241, %6243
  %6244 = phi i64 [ %6264, %6243 ], [ 0, %6241 ]
  %6245 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %6244
  %6246 = bitcast <4 x i64>* %6245 to <8 x i32>*
  %6247 = load <8 x i32>, <8 x i32>* %6246, align 32
  %6248 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %6247, i32 %6206) #7
  store <8 x i32> %6248, <8 x i32>* %6246, align 32
  %6249 = or i64 %6244, 1
  %6250 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %6249
  %6251 = bitcast <4 x i64>* %6250 to <8 x i32>*
  %6252 = load <8 x i32>, <8 x i32>* %6251, align 32
  %6253 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %6252, i32 %6206) #7
  store <8 x i32> %6253, <8 x i32>* %6251, align 32
  %6254 = or i64 %6244, 2
  %6255 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %6254
  %6256 = bitcast <4 x i64>* %6255 to <8 x i32>*
  %6257 = load <8 x i32>, <8 x i32>* %6256, align 32
  %6258 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %6257, i32 %6206) #7
  store <8 x i32> %6258, <8 x i32>* %6256, align 32
  %6259 = or i64 %6244, 3
  %6260 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %6259
  %6261 = bitcast <4 x i64>* %6260 to <8 x i32>*
  %6262 = load <8 x i32>, <8 x i32>* %6261, align 32
  %6263 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %6262, i32 %6206) #7
  store <8 x i32> %6263, <8 x i32>* %6261, align 32
  %6264 = add nuw nsw i64 %6244, 4
  %6265 = icmp eq i64 %6264, 32
  br i1 %6265, label %6266, label %6243

6266:                                             ; preds = %6243, %6214, %6241
  %6267 = bitcast [32 x <4 x i64>]* %10 to <8 x i32>*
  %6268 = load <8 x i32>, <8 x i32>* %6267, align 32
  %6269 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 2
  %6270 = bitcast <4 x i64>* %6269 to <8 x i32>*
  %6271 = load <8 x i32>, <8 x i32>* %6270, align 32
  %6272 = shufflevector <8 x i32> %6268, <8 x i32> %6271, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6273 = bitcast <8 x i32> %6272 to <4 x i64>
  %6274 = shufflevector <8 x i32> %6268, <8 x i32> %6271, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6275 = bitcast <8 x i32> %6274 to <4 x i64>
  %6276 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 4
  %6277 = bitcast <4 x i64>* %6276 to <8 x i32>*
  %6278 = load <8 x i32>, <8 x i32>* %6277, align 32
  %6279 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 6
  %6280 = bitcast <4 x i64>* %6279 to <8 x i32>*
  %6281 = load <8 x i32>, <8 x i32>* %6280, align 32
  %6282 = shufflevector <8 x i32> %6278, <8 x i32> %6281, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6283 = bitcast <8 x i32> %6282 to <4 x i64>
  %6284 = shufflevector <8 x i32> %6278, <8 x i32> %6281, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6285 = bitcast <8 x i32> %6284 to <4 x i64>
  %6286 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 8
  %6287 = bitcast <4 x i64>* %6286 to <8 x i32>*
  %6288 = load <8 x i32>, <8 x i32>* %6287, align 32
  %6289 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 10
  %6290 = bitcast <4 x i64>* %6289 to <8 x i32>*
  %6291 = load <8 x i32>, <8 x i32>* %6290, align 32
  %6292 = shufflevector <8 x i32> %6288, <8 x i32> %6291, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6293 = bitcast <8 x i32> %6292 to <4 x i64>
  %6294 = shufflevector <8 x i32> %6288, <8 x i32> %6291, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6295 = bitcast <8 x i32> %6294 to <4 x i64>
  %6296 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 12
  %6297 = bitcast <4 x i64>* %6296 to <8 x i32>*
  %6298 = load <8 x i32>, <8 x i32>* %6297, align 32
  %6299 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 14
  %6300 = bitcast <4 x i64>* %6299 to <8 x i32>*
  %6301 = load <8 x i32>, <8 x i32>* %6300, align 32
  %6302 = shufflevector <8 x i32> %6298, <8 x i32> %6301, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6303 = bitcast <8 x i32> %6302 to <4 x i64>
  %6304 = shufflevector <8 x i32> %6298, <8 x i32> %6301, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6305 = bitcast <8 x i32> %6304 to <4 x i64>
  %6306 = shufflevector <4 x i64> %6273, <4 x i64> %6283, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6307 = shufflevector <4 x i64> %6293, <4 x i64> %6303, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6308 = bitcast <4 x i64> %6306 to <8 x i32>
  %6309 = bitcast <4 x i64> %6307 to <8 x i32>
  %6310 = shufflevector <8 x i32> %6308, <8 x i32> %6309, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %6311 = bitcast [32 x <4 x i64>]* %8 to <8 x i32>*
  store <8 x i32> %6310, <8 x i32>* %6311, align 32
  %6312 = shufflevector <8 x i32> %6308, <8 x i32> %6309, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %6313 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 8
  %6314 = bitcast <4 x i64>* %6313 to <8 x i32>*
  store <8 x i32> %6312, <8 x i32>* %6314, align 32
  %6315 = shufflevector <4 x i64> %6273, <4 x i64> %6283, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6316 = shufflevector <4 x i64> %6293, <4 x i64> %6303, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6317 = bitcast <4 x i64> %6315 to <8 x i32>
  %6318 = bitcast <4 x i64> %6316 to <8 x i32>
  %6319 = shufflevector <8 x i32> %6317, <8 x i32> %6318, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %6320 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 2
  %6321 = bitcast <4 x i64>* %6320 to <8 x i32>*
  store <8 x i32> %6319, <8 x i32>* %6321, align 32
  %6322 = shufflevector <8 x i32> %6317, <8 x i32> %6318, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %6323 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 10
  %6324 = bitcast <4 x i64>* %6323 to <8 x i32>*
  store <8 x i32> %6322, <8 x i32>* %6324, align 32
  %6325 = shufflevector <4 x i64> %6275, <4 x i64> %6285, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6326 = shufflevector <4 x i64> %6295, <4 x i64> %6305, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6327 = bitcast <4 x i64> %6325 to <8 x i32>
  %6328 = bitcast <4 x i64> %6326 to <8 x i32>
  %6329 = shufflevector <8 x i32> %6327, <8 x i32> %6328, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %6330 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 4
  %6331 = bitcast <4 x i64>* %6330 to <8 x i32>*
  store <8 x i32> %6329, <8 x i32>* %6331, align 32
  %6332 = shufflevector <8 x i32> %6327, <8 x i32> %6328, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %6333 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 12
  %6334 = bitcast <4 x i64>* %6333 to <8 x i32>*
  store <8 x i32> %6332, <8 x i32>* %6334, align 32
  %6335 = shufflevector <4 x i64> %6275, <4 x i64> %6285, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6336 = shufflevector <4 x i64> %6295, <4 x i64> %6305, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6337 = bitcast <4 x i64> %6335 to <8 x i32>
  %6338 = bitcast <4 x i64> %6336 to <8 x i32>
  %6339 = shufflevector <8 x i32> %6337, <8 x i32> %6338, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %6340 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 6
  %6341 = bitcast <4 x i64>* %6340 to <8 x i32>*
  store <8 x i32> %6339, <8 x i32>* %6341, align 32
  %6342 = shufflevector <8 x i32> %6337, <8 x i32> %6338, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %6343 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 14
  %6344 = bitcast <4 x i64>* %6343 to <8 x i32>*
  store <8 x i32> %6342, <8 x i32>* %6344, align 32
  %6345 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 1
  %6346 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 16
  %6347 = bitcast <4 x i64>* %6345 to <8 x i32>*
  %6348 = load <8 x i32>, <8 x i32>* %6347, align 32
  %6349 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 3
  %6350 = bitcast <4 x i64>* %6349 to <8 x i32>*
  %6351 = load <8 x i32>, <8 x i32>* %6350, align 32
  %6352 = shufflevector <8 x i32> %6348, <8 x i32> %6351, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6353 = bitcast <8 x i32> %6352 to <4 x i64>
  %6354 = shufflevector <8 x i32> %6348, <8 x i32> %6351, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6355 = bitcast <8 x i32> %6354 to <4 x i64>
  %6356 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 5
  %6357 = bitcast <4 x i64>* %6356 to <8 x i32>*
  %6358 = load <8 x i32>, <8 x i32>* %6357, align 32
  %6359 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 7
  %6360 = bitcast <4 x i64>* %6359 to <8 x i32>*
  %6361 = load <8 x i32>, <8 x i32>* %6360, align 32
  %6362 = shufflevector <8 x i32> %6358, <8 x i32> %6361, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6363 = bitcast <8 x i32> %6362 to <4 x i64>
  %6364 = shufflevector <8 x i32> %6358, <8 x i32> %6361, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6365 = bitcast <8 x i32> %6364 to <4 x i64>
  %6366 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 9
  %6367 = bitcast <4 x i64>* %6366 to <8 x i32>*
  %6368 = load <8 x i32>, <8 x i32>* %6367, align 32
  %6369 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 11
  %6370 = bitcast <4 x i64>* %6369 to <8 x i32>*
  %6371 = load <8 x i32>, <8 x i32>* %6370, align 32
  %6372 = shufflevector <8 x i32> %6368, <8 x i32> %6371, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6373 = bitcast <8 x i32> %6372 to <4 x i64>
  %6374 = shufflevector <8 x i32> %6368, <8 x i32> %6371, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6375 = bitcast <8 x i32> %6374 to <4 x i64>
  %6376 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 13
  %6377 = bitcast <4 x i64>* %6376 to <8 x i32>*
  %6378 = load <8 x i32>, <8 x i32>* %6377, align 32
  %6379 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 15
  %6380 = bitcast <4 x i64>* %6379 to <8 x i32>*
  %6381 = load <8 x i32>, <8 x i32>* %6380, align 32
  %6382 = shufflevector <8 x i32> %6378, <8 x i32> %6381, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6383 = bitcast <8 x i32> %6382 to <4 x i64>
  %6384 = shufflevector <8 x i32> %6378, <8 x i32> %6381, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6385 = bitcast <8 x i32> %6384 to <4 x i64>
  %6386 = shufflevector <4 x i64> %6353, <4 x i64> %6363, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6387 = shufflevector <4 x i64> %6373, <4 x i64> %6383, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6388 = bitcast <4 x i64> %6386 to <8 x i32>
  %6389 = bitcast <4 x i64> %6387 to <8 x i32>
  %6390 = shufflevector <8 x i32> %6388, <8 x i32> %6389, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %6391 = bitcast <4 x i64>* %6346 to <8 x i32>*
  store <8 x i32> %6390, <8 x i32>* %6391, align 32
  %6392 = shufflevector <8 x i32> %6388, <8 x i32> %6389, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %6393 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 24
  %6394 = bitcast <4 x i64>* %6393 to <8 x i32>*
  store <8 x i32> %6392, <8 x i32>* %6394, align 32
  %6395 = shufflevector <4 x i64> %6353, <4 x i64> %6363, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6396 = shufflevector <4 x i64> %6373, <4 x i64> %6383, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6397 = bitcast <4 x i64> %6395 to <8 x i32>
  %6398 = bitcast <4 x i64> %6396 to <8 x i32>
  %6399 = shufflevector <8 x i32> %6397, <8 x i32> %6398, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %6400 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 18
  %6401 = bitcast <4 x i64>* %6400 to <8 x i32>*
  store <8 x i32> %6399, <8 x i32>* %6401, align 32
  %6402 = shufflevector <8 x i32> %6397, <8 x i32> %6398, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %6403 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 26
  %6404 = bitcast <4 x i64>* %6403 to <8 x i32>*
  store <8 x i32> %6402, <8 x i32>* %6404, align 32
  %6405 = shufflevector <4 x i64> %6355, <4 x i64> %6365, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6406 = shufflevector <4 x i64> %6375, <4 x i64> %6385, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6407 = bitcast <4 x i64> %6405 to <8 x i32>
  %6408 = bitcast <4 x i64> %6406 to <8 x i32>
  %6409 = shufflevector <8 x i32> %6407, <8 x i32> %6408, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %6410 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 20
  %6411 = bitcast <4 x i64>* %6410 to <8 x i32>*
  store <8 x i32> %6409, <8 x i32>* %6411, align 32
  %6412 = shufflevector <8 x i32> %6407, <8 x i32> %6408, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %6413 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 28
  %6414 = bitcast <4 x i64>* %6413 to <8 x i32>*
  store <8 x i32> %6412, <8 x i32>* %6414, align 32
  %6415 = shufflevector <4 x i64> %6355, <4 x i64> %6365, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6416 = shufflevector <4 x i64> %6375, <4 x i64> %6385, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6417 = bitcast <4 x i64> %6415 to <8 x i32>
  %6418 = bitcast <4 x i64> %6416 to <8 x i32>
  %6419 = shufflevector <8 x i32> %6417, <8 x i32> %6418, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %6420 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 22
  %6421 = bitcast <4 x i64>* %6420 to <8 x i32>*
  store <8 x i32> %6419, <8 x i32>* %6421, align 32
  %6422 = shufflevector <8 x i32> %6417, <8 x i32> %6418, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %6423 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 30
  %6424 = bitcast <4 x i64>* %6423 to <8 x i32>*
  store <8 x i32> %6422, <8 x i32>* %6424, align 32
  %6425 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 16
  %6426 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 1
  %6427 = bitcast <4 x i64>* %6425 to <8 x i32>*
  %6428 = load <8 x i32>, <8 x i32>* %6427, align 32
  %6429 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 18
  %6430 = bitcast <4 x i64>* %6429 to <8 x i32>*
  %6431 = load <8 x i32>, <8 x i32>* %6430, align 32
  %6432 = shufflevector <8 x i32> %6428, <8 x i32> %6431, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6433 = bitcast <8 x i32> %6432 to <4 x i64>
  %6434 = shufflevector <8 x i32> %6428, <8 x i32> %6431, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6435 = bitcast <8 x i32> %6434 to <4 x i64>
  %6436 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 20
  %6437 = bitcast <4 x i64>* %6436 to <8 x i32>*
  %6438 = load <8 x i32>, <8 x i32>* %6437, align 32
  %6439 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 22
  %6440 = bitcast <4 x i64>* %6439 to <8 x i32>*
  %6441 = load <8 x i32>, <8 x i32>* %6440, align 32
  %6442 = shufflevector <8 x i32> %6438, <8 x i32> %6441, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6443 = bitcast <8 x i32> %6442 to <4 x i64>
  %6444 = shufflevector <8 x i32> %6438, <8 x i32> %6441, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6445 = bitcast <8 x i32> %6444 to <4 x i64>
  %6446 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 24
  %6447 = bitcast <4 x i64>* %6446 to <8 x i32>*
  %6448 = load <8 x i32>, <8 x i32>* %6447, align 32
  %6449 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 26
  %6450 = bitcast <4 x i64>* %6449 to <8 x i32>*
  %6451 = load <8 x i32>, <8 x i32>* %6450, align 32
  %6452 = shufflevector <8 x i32> %6448, <8 x i32> %6451, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6453 = bitcast <8 x i32> %6452 to <4 x i64>
  %6454 = shufflevector <8 x i32> %6448, <8 x i32> %6451, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6455 = bitcast <8 x i32> %6454 to <4 x i64>
  %6456 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 28
  %6457 = bitcast <4 x i64>* %6456 to <8 x i32>*
  %6458 = load <8 x i32>, <8 x i32>* %6457, align 32
  %6459 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 30
  %6460 = bitcast <4 x i64>* %6459 to <8 x i32>*
  %6461 = load <8 x i32>, <8 x i32>* %6460, align 32
  %6462 = shufflevector <8 x i32> %6458, <8 x i32> %6461, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6463 = bitcast <8 x i32> %6462 to <4 x i64>
  %6464 = shufflevector <8 x i32> %6458, <8 x i32> %6461, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6465 = bitcast <8 x i32> %6464 to <4 x i64>
  %6466 = shufflevector <4 x i64> %6433, <4 x i64> %6443, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6467 = shufflevector <4 x i64> %6453, <4 x i64> %6463, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6468 = bitcast <4 x i64> %6466 to <8 x i32>
  %6469 = bitcast <4 x i64> %6467 to <8 x i32>
  %6470 = shufflevector <8 x i32> %6468, <8 x i32> %6469, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %6471 = bitcast <4 x i64>* %6426 to <8 x i32>*
  store <8 x i32> %6470, <8 x i32>* %6471, align 32
  %6472 = shufflevector <8 x i32> %6468, <8 x i32> %6469, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %6473 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 9
  %6474 = bitcast <4 x i64>* %6473 to <8 x i32>*
  store <8 x i32> %6472, <8 x i32>* %6474, align 32
  %6475 = shufflevector <4 x i64> %6433, <4 x i64> %6443, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6476 = shufflevector <4 x i64> %6453, <4 x i64> %6463, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6477 = bitcast <4 x i64> %6475 to <8 x i32>
  %6478 = bitcast <4 x i64> %6476 to <8 x i32>
  %6479 = shufflevector <8 x i32> %6477, <8 x i32> %6478, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %6480 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 3
  %6481 = bitcast <4 x i64>* %6480 to <8 x i32>*
  store <8 x i32> %6479, <8 x i32>* %6481, align 32
  %6482 = shufflevector <8 x i32> %6477, <8 x i32> %6478, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %6483 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 11
  %6484 = bitcast <4 x i64>* %6483 to <8 x i32>*
  store <8 x i32> %6482, <8 x i32>* %6484, align 32
  %6485 = shufflevector <4 x i64> %6435, <4 x i64> %6445, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6486 = shufflevector <4 x i64> %6455, <4 x i64> %6465, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6487 = bitcast <4 x i64> %6485 to <8 x i32>
  %6488 = bitcast <4 x i64> %6486 to <8 x i32>
  %6489 = shufflevector <8 x i32> %6487, <8 x i32> %6488, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %6490 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 5
  %6491 = bitcast <4 x i64>* %6490 to <8 x i32>*
  store <8 x i32> %6489, <8 x i32>* %6491, align 32
  %6492 = shufflevector <8 x i32> %6487, <8 x i32> %6488, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %6493 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 13
  %6494 = bitcast <4 x i64>* %6493 to <8 x i32>*
  store <8 x i32> %6492, <8 x i32>* %6494, align 32
  %6495 = shufflevector <4 x i64> %6435, <4 x i64> %6445, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6496 = shufflevector <4 x i64> %6455, <4 x i64> %6465, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6497 = bitcast <4 x i64> %6495 to <8 x i32>
  %6498 = bitcast <4 x i64> %6496 to <8 x i32>
  %6499 = shufflevector <8 x i32> %6497, <8 x i32> %6498, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %6500 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 7
  %6501 = bitcast <4 x i64>* %6500 to <8 x i32>*
  store <8 x i32> %6499, <8 x i32>* %6501, align 32
  %6502 = shufflevector <8 x i32> %6497, <8 x i32> %6498, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %6503 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 15
  %6504 = bitcast <4 x i64>* %6503 to <8 x i32>*
  store <8 x i32> %6502, <8 x i32>* %6504, align 32
  %6505 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 17
  %6506 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 17
  %6507 = bitcast <4 x i64>* %6505 to <8 x i32>*
  %6508 = load <8 x i32>, <8 x i32>* %6507, align 32
  %6509 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 19
  %6510 = bitcast <4 x i64>* %6509 to <8 x i32>*
  %6511 = load <8 x i32>, <8 x i32>* %6510, align 32
  %6512 = shufflevector <8 x i32> %6508, <8 x i32> %6511, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6513 = bitcast <8 x i32> %6512 to <4 x i64>
  %6514 = shufflevector <8 x i32> %6508, <8 x i32> %6511, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6515 = bitcast <8 x i32> %6514 to <4 x i64>
  %6516 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 21
  %6517 = bitcast <4 x i64>* %6516 to <8 x i32>*
  %6518 = load <8 x i32>, <8 x i32>* %6517, align 32
  %6519 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 23
  %6520 = bitcast <4 x i64>* %6519 to <8 x i32>*
  %6521 = load <8 x i32>, <8 x i32>* %6520, align 32
  %6522 = shufflevector <8 x i32> %6518, <8 x i32> %6521, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6523 = bitcast <8 x i32> %6522 to <4 x i64>
  %6524 = shufflevector <8 x i32> %6518, <8 x i32> %6521, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6525 = bitcast <8 x i32> %6524 to <4 x i64>
  %6526 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 25
  %6527 = bitcast <4 x i64>* %6526 to <8 x i32>*
  %6528 = load <8 x i32>, <8 x i32>* %6527, align 32
  %6529 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 27
  %6530 = bitcast <4 x i64>* %6529 to <8 x i32>*
  %6531 = load <8 x i32>, <8 x i32>* %6530, align 32
  %6532 = shufflevector <8 x i32> %6528, <8 x i32> %6531, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6533 = bitcast <8 x i32> %6532 to <4 x i64>
  %6534 = shufflevector <8 x i32> %6528, <8 x i32> %6531, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6535 = bitcast <8 x i32> %6534 to <4 x i64>
  %6536 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 29
  %6537 = bitcast <4 x i64>* %6536 to <8 x i32>*
  %6538 = load <8 x i32>, <8 x i32>* %6537, align 32
  %6539 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 31
  %6540 = bitcast <4 x i64>* %6539 to <8 x i32>*
  %6541 = load <8 x i32>, <8 x i32>* %6540, align 32
  %6542 = shufflevector <8 x i32> %6538, <8 x i32> %6541, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6543 = bitcast <8 x i32> %6542 to <4 x i64>
  %6544 = shufflevector <8 x i32> %6538, <8 x i32> %6541, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6545 = bitcast <8 x i32> %6544 to <4 x i64>
  %6546 = shufflevector <4 x i64> %6513, <4 x i64> %6523, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6547 = shufflevector <4 x i64> %6533, <4 x i64> %6543, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6548 = bitcast <4 x i64> %6546 to <8 x i32>
  %6549 = bitcast <4 x i64> %6547 to <8 x i32>
  %6550 = shufflevector <8 x i32> %6548, <8 x i32> %6549, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %6551 = bitcast <4 x i64>* %6506 to <8 x i32>*
  store <8 x i32> %6550, <8 x i32>* %6551, align 32
  %6552 = shufflevector <8 x i32> %6548, <8 x i32> %6549, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %6553 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 25
  %6554 = bitcast <4 x i64>* %6553 to <8 x i32>*
  store <8 x i32> %6552, <8 x i32>* %6554, align 32
  %6555 = shufflevector <4 x i64> %6513, <4 x i64> %6523, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6556 = shufflevector <4 x i64> %6533, <4 x i64> %6543, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6557 = bitcast <4 x i64> %6555 to <8 x i32>
  %6558 = bitcast <4 x i64> %6556 to <8 x i32>
  %6559 = shufflevector <8 x i32> %6557, <8 x i32> %6558, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %6560 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 19
  %6561 = bitcast <4 x i64>* %6560 to <8 x i32>*
  store <8 x i32> %6559, <8 x i32>* %6561, align 32
  %6562 = shufflevector <8 x i32> %6557, <8 x i32> %6558, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %6563 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 27
  %6564 = bitcast <4 x i64>* %6563 to <8 x i32>*
  store <8 x i32> %6562, <8 x i32>* %6564, align 32
  %6565 = shufflevector <4 x i64> %6515, <4 x i64> %6525, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6566 = shufflevector <4 x i64> %6535, <4 x i64> %6545, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6567 = bitcast <4 x i64> %6565 to <8 x i32>
  %6568 = bitcast <4 x i64> %6566 to <8 x i32>
  %6569 = shufflevector <8 x i32> %6567, <8 x i32> %6568, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %6570 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 21
  %6571 = bitcast <4 x i64>* %6570 to <8 x i32>*
  store <8 x i32> %6569, <8 x i32>* %6571, align 32
  %6572 = shufflevector <8 x i32> %6567, <8 x i32> %6568, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %6573 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 29
  %6574 = bitcast <4 x i64>* %6573 to <8 x i32>*
  store <8 x i32> %6572, <8 x i32>* %6574, align 32
  %6575 = shufflevector <4 x i64> %6515, <4 x i64> %6525, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6576 = shufflevector <4 x i64> %6535, <4 x i64> %6545, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6577 = bitcast <4 x i64> %6575 to <8 x i32>
  %6578 = bitcast <4 x i64> %6576 to <8 x i32>
  %6579 = shufflevector <8 x i32> %6577, <8 x i32> %6578, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %6580 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 23
  %6581 = bitcast <4 x i64>* %6580 to <8 x i32>*
  store <8 x i32> %6579, <8 x i32>* %6581, align 32
  %6582 = shufflevector <8 x i32> %6577, <8 x i32> %6578, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %6583 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 31
  %6584 = bitcast <4 x i64>* %6583 to <8 x i32>*
  store <8 x i32> %6582, <8 x i32>* %6584, align 32
  %6585 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 2, i64 2), align 2
  call void @fadst16_avx2(<4 x i64>* nonnull %6109, <4 x i64>* nonnull %6202, i8 signext %6585, i32 2, i32 2)
  %6586 = load <8 x i32>, <8 x i32>* %6267, align 32
  %6587 = load <8 x i32>, <8 x i32>* %6270, align 32
  %6588 = shufflevector <8 x i32> %6586, <8 x i32> %6587, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6589 = bitcast <8 x i32> %6588 to <4 x i64>
  %6590 = shufflevector <8 x i32> %6586, <8 x i32> %6587, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6591 = bitcast <8 x i32> %6590 to <4 x i64>
  %6592 = load <8 x i32>, <8 x i32>* %6277, align 32
  %6593 = load <8 x i32>, <8 x i32>* %6280, align 32
  %6594 = shufflevector <8 x i32> %6592, <8 x i32> %6593, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6595 = bitcast <8 x i32> %6594 to <4 x i64>
  %6596 = shufflevector <8 x i32> %6592, <8 x i32> %6593, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6597 = bitcast <8 x i32> %6596 to <4 x i64>
  %6598 = load <8 x i32>, <8 x i32>* %6287, align 32
  %6599 = load <8 x i32>, <8 x i32>* %6290, align 32
  %6600 = shufflevector <8 x i32> %6598, <8 x i32> %6599, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6601 = bitcast <8 x i32> %6600 to <4 x i64>
  %6602 = shufflevector <8 x i32> %6598, <8 x i32> %6599, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6603 = bitcast <8 x i32> %6602 to <4 x i64>
  %6604 = load <8 x i32>, <8 x i32>* %6297, align 32
  %6605 = load <8 x i32>, <8 x i32>* %6300, align 32
  %6606 = shufflevector <8 x i32> %6604, <8 x i32> %6605, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6607 = bitcast <8 x i32> %6606 to <4 x i64>
  %6608 = shufflevector <8 x i32> %6604, <8 x i32> %6605, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6609 = bitcast <8 x i32> %6608 to <4 x i64>
  %6610 = shufflevector <4 x i64> %6589, <4 x i64> %6595, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6611 = shufflevector <4 x i64> %6601, <4 x i64> %6607, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6612 = bitcast <4 x i64> %6610 to <8 x i32>
  %6613 = bitcast <4 x i64> %6611 to <8 x i32>
  %6614 = shufflevector <8 x i32> %6612, <8 x i32> %6613, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %6614, <8 x i32>* %6311, align 32
  %6615 = shufflevector <8 x i32> %6612, <8 x i32> %6613, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %6615, <8 x i32>* %6314, align 32
  %6616 = shufflevector <4 x i64> %6589, <4 x i64> %6595, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6617 = shufflevector <4 x i64> %6601, <4 x i64> %6607, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6618 = bitcast <4 x i64> %6616 to <8 x i32>
  %6619 = bitcast <4 x i64> %6617 to <8 x i32>
  %6620 = shufflevector <8 x i32> %6618, <8 x i32> %6619, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %6620, <8 x i32>* %6321, align 32
  %6621 = shufflevector <8 x i32> %6618, <8 x i32> %6619, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %6621, <8 x i32>* %6324, align 32
  %6622 = shufflevector <4 x i64> %6591, <4 x i64> %6597, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6623 = shufflevector <4 x i64> %6603, <4 x i64> %6609, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6624 = bitcast <4 x i64> %6622 to <8 x i32>
  %6625 = bitcast <4 x i64> %6623 to <8 x i32>
  %6626 = shufflevector <8 x i32> %6624, <8 x i32> %6625, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %6626, <8 x i32>* %6331, align 32
  %6627 = shufflevector <8 x i32> %6624, <8 x i32> %6625, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %6627, <8 x i32>* %6334, align 32
  %6628 = shufflevector <4 x i64> %6591, <4 x i64> %6597, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6629 = shufflevector <4 x i64> %6603, <4 x i64> %6609, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6630 = bitcast <4 x i64> %6628 to <8 x i32>
  %6631 = bitcast <4 x i64> %6629 to <8 x i32>
  %6632 = shufflevector <8 x i32> %6630, <8 x i32> %6631, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %6632, <8 x i32>* %6341, align 32
  %6633 = shufflevector <8 x i32> %6630, <8 x i32> %6631, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %6633, <8 x i32>* %6344, align 32
  %6634 = load <8 x i32>, <8 x i32>* %6347, align 32
  %6635 = load <8 x i32>, <8 x i32>* %6350, align 32
  %6636 = shufflevector <8 x i32> %6634, <8 x i32> %6635, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6637 = bitcast <8 x i32> %6636 to <4 x i64>
  %6638 = shufflevector <8 x i32> %6634, <8 x i32> %6635, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6639 = bitcast <8 x i32> %6638 to <4 x i64>
  %6640 = load <8 x i32>, <8 x i32>* %6357, align 32
  %6641 = load <8 x i32>, <8 x i32>* %6360, align 32
  %6642 = shufflevector <8 x i32> %6640, <8 x i32> %6641, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6643 = bitcast <8 x i32> %6642 to <4 x i64>
  %6644 = shufflevector <8 x i32> %6640, <8 x i32> %6641, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6645 = bitcast <8 x i32> %6644 to <4 x i64>
  %6646 = load <8 x i32>, <8 x i32>* %6367, align 32
  %6647 = load <8 x i32>, <8 x i32>* %6370, align 32
  %6648 = shufflevector <8 x i32> %6646, <8 x i32> %6647, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6649 = bitcast <8 x i32> %6648 to <4 x i64>
  %6650 = shufflevector <8 x i32> %6646, <8 x i32> %6647, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6651 = bitcast <8 x i32> %6650 to <4 x i64>
  %6652 = load <8 x i32>, <8 x i32>* %6377, align 32
  %6653 = load <8 x i32>, <8 x i32>* %6380, align 32
  %6654 = shufflevector <8 x i32> %6652, <8 x i32> %6653, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6655 = bitcast <8 x i32> %6654 to <4 x i64>
  %6656 = shufflevector <8 x i32> %6652, <8 x i32> %6653, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6657 = bitcast <8 x i32> %6656 to <4 x i64>
  %6658 = shufflevector <4 x i64> %6637, <4 x i64> %6643, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6659 = shufflevector <4 x i64> %6649, <4 x i64> %6655, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6660 = bitcast <4 x i64> %6658 to <8 x i32>
  %6661 = bitcast <4 x i64> %6659 to <8 x i32>
  %6662 = shufflevector <8 x i32> %6660, <8 x i32> %6661, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %6662, <8 x i32>* %6391, align 32
  %6663 = shufflevector <8 x i32> %6660, <8 x i32> %6661, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %6663, <8 x i32>* %6394, align 32
  %6664 = shufflevector <4 x i64> %6637, <4 x i64> %6643, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6665 = shufflevector <4 x i64> %6649, <4 x i64> %6655, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6666 = bitcast <4 x i64> %6664 to <8 x i32>
  %6667 = bitcast <4 x i64> %6665 to <8 x i32>
  %6668 = shufflevector <8 x i32> %6666, <8 x i32> %6667, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %6668, <8 x i32>* %6401, align 32
  %6669 = shufflevector <8 x i32> %6666, <8 x i32> %6667, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %6669, <8 x i32>* %6404, align 32
  %6670 = shufflevector <4 x i64> %6639, <4 x i64> %6645, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6671 = shufflevector <4 x i64> %6651, <4 x i64> %6657, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6672 = bitcast <4 x i64> %6670 to <8 x i32>
  %6673 = bitcast <4 x i64> %6671 to <8 x i32>
  %6674 = shufflevector <8 x i32> %6672, <8 x i32> %6673, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %6674, <8 x i32>* %6411, align 32
  %6675 = shufflevector <8 x i32> %6672, <8 x i32> %6673, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %6675, <8 x i32>* %6414, align 32
  %6676 = shufflevector <4 x i64> %6639, <4 x i64> %6645, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6677 = shufflevector <4 x i64> %6651, <4 x i64> %6657, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6678 = bitcast <4 x i64> %6676 to <8 x i32>
  %6679 = bitcast <4 x i64> %6677 to <8 x i32>
  %6680 = shufflevector <8 x i32> %6678, <8 x i32> %6679, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %6680, <8 x i32>* %6421, align 32
  %6681 = shufflevector <8 x i32> %6678, <8 x i32> %6679, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %6681, <8 x i32>* %6424, align 32
  %6682 = load <8 x i32>, <8 x i32>* %6427, align 32
  %6683 = load <8 x i32>, <8 x i32>* %6430, align 32
  %6684 = shufflevector <8 x i32> %6682, <8 x i32> %6683, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6685 = bitcast <8 x i32> %6684 to <4 x i64>
  %6686 = shufflevector <8 x i32> %6682, <8 x i32> %6683, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6687 = bitcast <8 x i32> %6686 to <4 x i64>
  %6688 = load <8 x i32>, <8 x i32>* %6437, align 32
  %6689 = load <8 x i32>, <8 x i32>* %6440, align 32
  %6690 = shufflevector <8 x i32> %6688, <8 x i32> %6689, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6691 = bitcast <8 x i32> %6690 to <4 x i64>
  %6692 = shufflevector <8 x i32> %6688, <8 x i32> %6689, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6693 = bitcast <8 x i32> %6692 to <4 x i64>
  %6694 = load <8 x i32>, <8 x i32>* %6447, align 32
  %6695 = load <8 x i32>, <8 x i32>* %6450, align 32
  %6696 = shufflevector <8 x i32> %6694, <8 x i32> %6695, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6697 = bitcast <8 x i32> %6696 to <4 x i64>
  %6698 = shufflevector <8 x i32> %6694, <8 x i32> %6695, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6699 = bitcast <8 x i32> %6698 to <4 x i64>
  %6700 = load <8 x i32>, <8 x i32>* %6457, align 32
  %6701 = load <8 x i32>, <8 x i32>* %6460, align 32
  %6702 = shufflevector <8 x i32> %6700, <8 x i32> %6701, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6703 = bitcast <8 x i32> %6702 to <4 x i64>
  %6704 = shufflevector <8 x i32> %6700, <8 x i32> %6701, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6705 = bitcast <8 x i32> %6704 to <4 x i64>
  %6706 = shufflevector <4 x i64> %6685, <4 x i64> %6691, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6707 = shufflevector <4 x i64> %6697, <4 x i64> %6703, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6708 = bitcast <4 x i64> %6706 to <8 x i32>
  %6709 = bitcast <4 x i64> %6707 to <8 x i32>
  %6710 = shufflevector <8 x i32> %6708, <8 x i32> %6709, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %6710, <8 x i32>* %6471, align 32
  %6711 = shufflevector <8 x i32> %6708, <8 x i32> %6709, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %6711, <8 x i32>* %6474, align 32
  %6712 = shufflevector <4 x i64> %6685, <4 x i64> %6691, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6713 = shufflevector <4 x i64> %6697, <4 x i64> %6703, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6714 = bitcast <4 x i64> %6712 to <8 x i32>
  %6715 = bitcast <4 x i64> %6713 to <8 x i32>
  %6716 = shufflevector <8 x i32> %6714, <8 x i32> %6715, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %6716, <8 x i32>* %6481, align 32
  %6717 = shufflevector <8 x i32> %6714, <8 x i32> %6715, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %6717, <8 x i32>* %6484, align 32
  %6718 = shufflevector <4 x i64> %6687, <4 x i64> %6693, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6719 = shufflevector <4 x i64> %6699, <4 x i64> %6705, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6720 = bitcast <4 x i64> %6718 to <8 x i32>
  %6721 = bitcast <4 x i64> %6719 to <8 x i32>
  %6722 = shufflevector <8 x i32> %6720, <8 x i32> %6721, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %6722, <8 x i32>* %6491, align 32
  %6723 = shufflevector <8 x i32> %6720, <8 x i32> %6721, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %6723, <8 x i32>* %6494, align 32
  %6724 = shufflevector <4 x i64> %6687, <4 x i64> %6693, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6725 = shufflevector <4 x i64> %6699, <4 x i64> %6705, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6726 = bitcast <4 x i64> %6724 to <8 x i32>
  %6727 = bitcast <4 x i64> %6725 to <8 x i32>
  %6728 = shufflevector <8 x i32> %6726, <8 x i32> %6727, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %6728, <8 x i32>* %6501, align 32
  %6729 = shufflevector <8 x i32> %6726, <8 x i32> %6727, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %6729, <8 x i32>* %6504, align 32
  %6730 = load <8 x i32>, <8 x i32>* %6507, align 32
  %6731 = load <8 x i32>, <8 x i32>* %6510, align 32
  %6732 = shufflevector <8 x i32> %6730, <8 x i32> %6731, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6733 = bitcast <8 x i32> %6732 to <4 x i64>
  %6734 = shufflevector <8 x i32> %6730, <8 x i32> %6731, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6735 = bitcast <8 x i32> %6734 to <4 x i64>
  %6736 = load <8 x i32>, <8 x i32>* %6517, align 32
  %6737 = load <8 x i32>, <8 x i32>* %6520, align 32
  %6738 = shufflevector <8 x i32> %6736, <8 x i32> %6737, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6739 = bitcast <8 x i32> %6738 to <4 x i64>
  %6740 = shufflevector <8 x i32> %6736, <8 x i32> %6737, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6741 = bitcast <8 x i32> %6740 to <4 x i64>
  %6742 = load <8 x i32>, <8 x i32>* %6527, align 32
  %6743 = load <8 x i32>, <8 x i32>* %6530, align 32
  %6744 = shufflevector <8 x i32> %6742, <8 x i32> %6743, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6745 = bitcast <8 x i32> %6744 to <4 x i64>
  %6746 = shufflevector <8 x i32> %6742, <8 x i32> %6743, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6747 = bitcast <8 x i32> %6746 to <4 x i64>
  %6748 = load <8 x i32>, <8 x i32>* %6537, align 32
  %6749 = load <8 x i32>, <8 x i32>* %6540, align 32
  %6750 = shufflevector <8 x i32> %6748, <8 x i32> %6749, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6751 = bitcast <8 x i32> %6750 to <4 x i64>
  %6752 = shufflevector <8 x i32> %6748, <8 x i32> %6749, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6753 = bitcast <8 x i32> %6752 to <4 x i64>
  %6754 = shufflevector <4 x i64> %6733, <4 x i64> %6739, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6755 = shufflevector <4 x i64> %6745, <4 x i64> %6751, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6756 = bitcast <4 x i64> %6754 to <8 x i32>
  %6757 = bitcast <4 x i64> %6755 to <8 x i32>
  %6758 = shufflevector <8 x i32> %6756, <8 x i32> %6757, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %6758, <8 x i32>* %6551, align 32
  %6759 = shufflevector <8 x i32> %6756, <8 x i32> %6757, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %6759, <8 x i32>* %6554, align 32
  %6760 = shufflevector <4 x i64> %6733, <4 x i64> %6739, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6761 = shufflevector <4 x i64> %6745, <4 x i64> %6751, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6762 = bitcast <4 x i64> %6760 to <8 x i32>
  %6763 = bitcast <4 x i64> %6761 to <8 x i32>
  %6764 = shufflevector <8 x i32> %6762, <8 x i32> %6763, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %6764, <8 x i32>* %6561, align 32
  %6765 = shufflevector <8 x i32> %6762, <8 x i32> %6763, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %6765, <8 x i32>* %6564, align 32
  %6766 = shufflevector <4 x i64> %6735, <4 x i64> %6741, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6767 = shufflevector <4 x i64> %6747, <4 x i64> %6753, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6768 = bitcast <4 x i64> %6766 to <8 x i32>
  %6769 = bitcast <4 x i64> %6767 to <8 x i32>
  %6770 = shufflevector <8 x i32> %6768, <8 x i32> %6769, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %6770, <8 x i32>* %6571, align 32
  %6771 = shufflevector <8 x i32> %6768, <8 x i32> %6769, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %6771, <8 x i32>* %6574, align 32
  %6772 = shufflevector <4 x i64> %6735, <4 x i64> %6741, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6773 = shufflevector <4 x i64> %6747, <4 x i64> %6753, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6774 = bitcast <4 x i64> %6772 to <8 x i32>
  %6775 = bitcast <4 x i64> %6773 to <8 x i32>
  %6776 = shufflevector <8 x i32> %6774, <8 x i32> %6775, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %6776, <8 x i32>* %6581, align 32
  %6777 = shufflevector <8 x i32> %6774, <8 x i32> %6775, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %6777, <8 x i32>* %6584, align 32
  br label %10159

6778:                                             ; preds = %5
  %6779 = bitcast [64 x <4 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %6779) #7
  %6780 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 16
  %6781 = bitcast <4 x i64>* %6780 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %6781, i8 -86, i64 1536, i1 false) #7
  %6782 = sext i32 %2 to i64
  %6783 = bitcast i16* %0 to <4 x i64>*
  %6784 = load <4 x i64>, <4 x i64>* %6783, align 1
  %6785 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 0
  store <4 x i64> %6784, <4 x i64>* %6785, align 32
  %6786 = getelementptr inbounds i16, i16* %0, i64 %6782
  %6787 = bitcast i16* %6786 to <4 x i64>*
  %6788 = load <4 x i64>, <4 x i64>* %6787, align 1
  %6789 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 1
  store <4 x i64> %6788, <4 x i64>* %6789, align 32
  %6790 = shl nsw i64 %6782, 1
  %6791 = getelementptr inbounds i16, i16* %0, i64 %6790
  %6792 = bitcast i16* %6791 to <4 x i64>*
  %6793 = load <4 x i64>, <4 x i64>* %6792, align 1
  %6794 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 2
  store <4 x i64> %6793, <4 x i64>* %6794, align 32
  %6795 = mul nsw i64 %6782, 3
  %6796 = getelementptr inbounds i16, i16* %0, i64 %6795
  %6797 = bitcast i16* %6796 to <4 x i64>*
  %6798 = load <4 x i64>, <4 x i64>* %6797, align 1
  %6799 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 3
  store <4 x i64> %6798, <4 x i64>* %6799, align 32
  %6800 = shl nsw i64 %6782, 2
  %6801 = getelementptr inbounds i16, i16* %0, i64 %6800
  %6802 = bitcast i16* %6801 to <4 x i64>*
  %6803 = load <4 x i64>, <4 x i64>* %6802, align 1
  %6804 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 4
  store <4 x i64> %6803, <4 x i64>* %6804, align 32
  %6805 = mul nsw i64 %6782, 5
  %6806 = getelementptr inbounds i16, i16* %0, i64 %6805
  %6807 = bitcast i16* %6806 to <4 x i64>*
  %6808 = load <4 x i64>, <4 x i64>* %6807, align 1
  %6809 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 5
  store <4 x i64> %6808, <4 x i64>* %6809, align 32
  %6810 = mul nsw i64 %6782, 6
  %6811 = getelementptr inbounds i16, i16* %0, i64 %6810
  %6812 = bitcast i16* %6811 to <4 x i64>*
  %6813 = load <4 x i64>, <4 x i64>* %6812, align 1
  %6814 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 6
  store <4 x i64> %6813, <4 x i64>* %6814, align 32
  %6815 = mul nsw i64 %6782, 7
  %6816 = getelementptr inbounds i16, i16* %0, i64 %6815
  %6817 = bitcast i16* %6816 to <4 x i64>*
  %6818 = load <4 x i64>, <4 x i64>* %6817, align 1
  %6819 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 7
  store <4 x i64> %6818, <4 x i64>* %6819, align 32
  %6820 = shl nsw i64 %6782, 3
  %6821 = getelementptr inbounds i16, i16* %0, i64 %6820
  %6822 = bitcast i16* %6821 to <4 x i64>*
  %6823 = load <4 x i64>, <4 x i64>* %6822, align 1
  %6824 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 8
  store <4 x i64> %6823, <4 x i64>* %6824, align 32
  %6825 = mul nsw i64 %6782, 9
  %6826 = getelementptr inbounds i16, i16* %0, i64 %6825
  %6827 = bitcast i16* %6826 to <4 x i64>*
  %6828 = load <4 x i64>, <4 x i64>* %6827, align 1
  %6829 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 9
  store <4 x i64> %6828, <4 x i64>* %6829, align 32
  %6830 = mul nsw i64 %6782, 10
  %6831 = getelementptr inbounds i16, i16* %0, i64 %6830
  %6832 = bitcast i16* %6831 to <4 x i64>*
  %6833 = load <4 x i64>, <4 x i64>* %6832, align 1
  %6834 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 10
  store <4 x i64> %6833, <4 x i64>* %6834, align 32
  %6835 = mul nsw i64 %6782, 11
  %6836 = getelementptr inbounds i16, i16* %0, i64 %6835
  %6837 = bitcast i16* %6836 to <4 x i64>*
  %6838 = load <4 x i64>, <4 x i64>* %6837, align 1
  %6839 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 11
  store <4 x i64> %6838, <4 x i64>* %6839, align 32
  %6840 = mul nsw i64 %6782, 12
  %6841 = getelementptr inbounds i16, i16* %0, i64 %6840
  %6842 = bitcast i16* %6841 to <4 x i64>*
  %6843 = load <4 x i64>, <4 x i64>* %6842, align 1
  %6844 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 12
  store <4 x i64> %6843, <4 x i64>* %6844, align 32
  %6845 = mul nsw i64 %6782, 13
  %6846 = getelementptr inbounds i16, i16* %0, i64 %6845
  %6847 = bitcast i16* %6846 to <4 x i64>*
  %6848 = load <4 x i64>, <4 x i64>* %6847, align 1
  %6849 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 13
  store <4 x i64> %6848, <4 x i64>* %6849, align 32
  %6850 = mul nsw i64 %6782, 14
  %6851 = getelementptr inbounds i16, i16* %0, i64 %6850
  %6852 = bitcast i16* %6851 to <4 x i64>*
  %6853 = load <4 x i64>, <4 x i64>* %6852, align 1
  %6854 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 14
  store <4 x i64> %6853, <4 x i64>* %6854, align 32
  %6855 = mul nsw i64 %6782, 15
  %6856 = getelementptr inbounds i16, i16* %0, i64 %6855
  %6857 = bitcast i16* %6856 to <4 x i64>*
  %6858 = load <4 x i64>, <4 x i64>* %6857, align 1
  %6859 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 15
  store <4 x i64> %6858, <4 x i64>* %6859, align 32
  %6860 = shufflevector <4 x i64> %6784, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6861 = bitcast <2 x i64> %6860 to <8 x i16>
  %6862 = sext <8 x i16> %6861 to <8 x i32>
  %6863 = bitcast [32 x <4 x i64>]* %8 to <8 x i32>*
  store <8 x i32> %6862, <8 x i32>* %6863, align 32
  %6864 = bitcast <4 x i64> %6784 to <8 x i32>
  %6865 = shufflevector <8 x i32> %6864, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6866 = bitcast <4 x i32> %6865 to <8 x i16>
  %6867 = sext <8 x i16> %6866 to <8 x i32>
  %6868 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 1
  %6869 = bitcast <4 x i64>* %6868 to <8 x i32>*
  store <8 x i32> %6867, <8 x i32>* %6869, align 32
  br label %6870

6870:                                             ; preds = %6778, %6870
  %6871 = phi i64 [ 1, %6778 ], [ %6887, %6870 ]
  %6872 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 %6871
  %6873 = load <4 x i64>, <4 x i64>* %6872, align 32
  %6874 = shufflevector <4 x i64> %6873, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6875 = bitcast <2 x i64> %6874 to <8 x i16>
  %6876 = sext <8 x i16> %6875 to <8 x i32>
  %6877 = shl nuw nsw i64 %6871, 1
  %6878 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %6877
  %6879 = bitcast <4 x i64>* %6878 to <8 x i32>*
  store <8 x i32> %6876, <8 x i32>* %6879, align 32
  %6880 = bitcast <4 x i64> %6873 to <8 x i32>
  %6881 = shufflevector <8 x i32> %6880, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6882 = bitcast <4 x i32> %6881 to <8 x i16>
  %6883 = sext <8 x i16> %6882 to <8 x i32>
  %6884 = or i64 %6877, 1
  %6885 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %6884
  %6886 = bitcast <4 x i64>* %6885 to <8 x i32>*
  store <8 x i32> %6883, <8 x i32>* %6886, align 32
  %6887 = add nuw nsw i64 %6871, 1
  %6888 = icmp eq i64 %6887, 16
  br i1 %6888, label %6889, label %6870

6889:                                             ; preds = %6870
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %6779) #7
  %6890 = load i8, i8* %12, align 1
  %6891 = sext i8 %6890 to i32
  %6892 = icmp slt i8 %6890, 0
  br i1 %6892, label %6893, label %6926

6893:                                             ; preds = %6889
  %6894 = sub nsw i32 0, %6891
  %6895 = xor i32 %6891, -1
  %6896 = shl i32 1, %6895
  %6897 = insertelement <8 x i32> undef, i32 %6896, i32 0
  %6898 = shufflevector <8 x i32> %6897, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %6899

6899:                                             ; preds = %6899, %6893
  %6900 = phi i64 [ 0, %6893 ], [ %6924, %6899 ]
  %6901 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %6900
  %6902 = bitcast <4 x i64>* %6901 to <8 x i32>*
  %6903 = load <8 x i32>, <8 x i32>* %6902, align 32
  %6904 = add <8 x i32> %6903, %6898
  %6905 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %6904, i32 %6894) #7
  store <8 x i32> %6905, <8 x i32>* %6902, align 32
  %6906 = or i64 %6900, 1
  %6907 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %6906
  %6908 = bitcast <4 x i64>* %6907 to <8 x i32>*
  %6909 = load <8 x i32>, <8 x i32>* %6908, align 32
  %6910 = add <8 x i32> %6909, %6898
  %6911 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %6910, i32 %6894) #7
  store <8 x i32> %6911, <8 x i32>* %6908, align 32
  %6912 = or i64 %6900, 2
  %6913 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %6912
  %6914 = bitcast <4 x i64>* %6913 to <8 x i32>*
  %6915 = load <8 x i32>, <8 x i32>* %6914, align 32
  %6916 = add <8 x i32> %6915, %6898
  %6917 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %6916, i32 %6894) #7
  store <8 x i32> %6917, <8 x i32>* %6914, align 32
  %6918 = or i64 %6900, 3
  %6919 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %6918
  %6920 = bitcast <4 x i64>* %6919 to <8 x i32>*
  %6921 = load <8 x i32>, <8 x i32>* %6920, align 32
  %6922 = add <8 x i32> %6921, %6898
  %6923 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %6922, i32 %6894) #7
  store <8 x i32> %6923, <8 x i32>* %6920, align 32
  %6924 = add nuw nsw i64 %6900, 4
  %6925 = icmp eq i64 %6924, 32
  br i1 %6925, label %6951, label %6899

6926:                                             ; preds = %6889
  %6927 = icmp eq i8 %6890, 0
  br i1 %6927, label %6951, label %6928

6928:                                             ; preds = %6926, %6928
  %6929 = phi i64 [ %6949, %6928 ], [ 0, %6926 ]
  %6930 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %6929
  %6931 = bitcast <4 x i64>* %6930 to <8 x i32>*
  %6932 = load <8 x i32>, <8 x i32>* %6931, align 32
  %6933 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %6932, i32 %6891) #7
  store <8 x i32> %6933, <8 x i32>* %6931, align 32
  %6934 = or i64 %6929, 1
  %6935 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %6934
  %6936 = bitcast <4 x i64>* %6935 to <8 x i32>*
  %6937 = load <8 x i32>, <8 x i32>* %6936, align 32
  %6938 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %6937, i32 %6891) #7
  store <8 x i32> %6938, <8 x i32>* %6936, align 32
  %6939 = or i64 %6929, 2
  %6940 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %6939
  %6941 = bitcast <4 x i64>* %6940 to <8 x i32>*
  %6942 = load <8 x i32>, <8 x i32>* %6941, align 32
  %6943 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %6942, i32 %6891) #7
  store <8 x i32> %6943, <8 x i32>* %6941, align 32
  %6944 = or i64 %6929, 3
  %6945 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %6944
  %6946 = bitcast <4 x i64>* %6945 to <8 x i32>*
  %6947 = load <8 x i32>, <8 x i32>* %6946, align 32
  %6948 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %6947, i32 %6891) #7
  store <8 x i32> %6948, <8 x i32>* %6946, align 32
  %6949 = add nuw nsw i64 %6929, 4
  %6950 = icmp eq i64 %6949, 32
  br i1 %6950, label %6951, label %6928

6951:                                             ; preds = %6928, %6899, %6926
  br label %6952

6952:                                             ; preds = %6952, %6951
  %6953 = phi i64 [ 0, %6951 ], [ %6971, %6952 ]
  %6954 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %6953
  %6955 = bitcast <4 x i64>* %6954 to <8 x i32>*
  %6956 = load <8 x i32>, <8 x i32>* %6955, align 32
  %6957 = mul <8 x i32> %6956, <i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586>
  %6958 = add <8 x i32> %6957, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %6959 = ashr <8 x i32> %6958, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %6960 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %6953
  %6961 = bitcast <4 x i64>* %6960 to <8 x i32>*
  store <8 x i32> %6959, <8 x i32>* %6961, align 32
  %6962 = or i64 %6953, 1
  %6963 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %6962
  %6964 = bitcast <4 x i64>* %6963 to <8 x i32>*
  %6965 = load <8 x i32>, <8 x i32>* %6964, align 32
  %6966 = mul <8 x i32> %6965, <i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586>
  %6967 = add <8 x i32> %6966, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %6968 = ashr <8 x i32> %6967, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %6969 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %6962
  %6970 = bitcast <4 x i64>* %6969 to <8 x i32>*
  store <8 x i32> %6968, <8 x i32>* %6970, align 32
  %6971 = add nuw nsw i64 %6953, 2
  %6972 = icmp eq i64 %6971, 32
  br i1 %6972, label %6973, label %6952

6973:                                             ; preds = %6952
  %6974 = getelementptr inbounds i8, i8* %12, i64 1
  %6975 = load i8, i8* %6974, align 1
  %6976 = sext i8 %6975 to i32
  %6977 = icmp slt i8 %6975, 0
  br i1 %6977, label %6978, label %7011

6978:                                             ; preds = %6973
  %6979 = sub nsw i32 0, %6976
  %6980 = xor i32 %6976, -1
  %6981 = shl i32 1, %6980
  %6982 = insertelement <8 x i32> undef, i32 %6981, i32 0
  %6983 = shufflevector <8 x i32> %6982, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %6984

6984:                                             ; preds = %6984, %6978
  %6985 = phi i64 [ 0, %6978 ], [ %7009, %6984 ]
  %6986 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %6985
  %6987 = bitcast <4 x i64>* %6986 to <8 x i32>*
  %6988 = load <8 x i32>, <8 x i32>* %6987, align 32
  %6989 = add <8 x i32> %6988, %6983
  %6990 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %6989, i32 %6979) #7
  store <8 x i32> %6990, <8 x i32>* %6987, align 32
  %6991 = or i64 %6985, 1
  %6992 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %6991
  %6993 = bitcast <4 x i64>* %6992 to <8 x i32>*
  %6994 = load <8 x i32>, <8 x i32>* %6993, align 32
  %6995 = add <8 x i32> %6994, %6983
  %6996 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %6995, i32 %6979) #7
  store <8 x i32> %6996, <8 x i32>* %6993, align 32
  %6997 = or i64 %6985, 2
  %6998 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %6997
  %6999 = bitcast <4 x i64>* %6998 to <8 x i32>*
  %7000 = load <8 x i32>, <8 x i32>* %6999, align 32
  %7001 = add <8 x i32> %7000, %6983
  %7002 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %7001, i32 %6979) #7
  store <8 x i32> %7002, <8 x i32>* %6999, align 32
  %7003 = or i64 %6985, 3
  %7004 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %7003
  %7005 = bitcast <4 x i64>* %7004 to <8 x i32>*
  %7006 = load <8 x i32>, <8 x i32>* %7005, align 32
  %7007 = add <8 x i32> %7006, %6983
  %7008 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %7007, i32 %6979) #7
  store <8 x i32> %7008, <8 x i32>* %7005, align 32
  %7009 = add nuw nsw i64 %6985, 4
  %7010 = icmp eq i64 %7009, 32
  br i1 %7010, label %7036, label %6984

7011:                                             ; preds = %6973
  %7012 = icmp eq i8 %6975, 0
  br i1 %7012, label %7036, label %7013

7013:                                             ; preds = %7011, %7013
  %7014 = phi i64 [ %7034, %7013 ], [ 0, %7011 ]
  %7015 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %7014
  %7016 = bitcast <4 x i64>* %7015 to <8 x i32>*
  %7017 = load <8 x i32>, <8 x i32>* %7016, align 32
  %7018 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %7017, i32 %6976) #7
  store <8 x i32> %7018, <8 x i32>* %7016, align 32
  %7019 = or i64 %7014, 1
  %7020 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %7019
  %7021 = bitcast <4 x i64>* %7020 to <8 x i32>*
  %7022 = load <8 x i32>, <8 x i32>* %7021, align 32
  %7023 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %7022, i32 %6976) #7
  store <8 x i32> %7023, <8 x i32>* %7021, align 32
  %7024 = or i64 %7014, 2
  %7025 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %7024
  %7026 = bitcast <4 x i64>* %7025 to <8 x i32>*
  %7027 = load <8 x i32>, <8 x i32>* %7026, align 32
  %7028 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %7027, i32 %6976) #7
  store <8 x i32> %7028, <8 x i32>* %7026, align 32
  %7029 = or i64 %7014, 3
  %7030 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %7029
  %7031 = bitcast <4 x i64>* %7030 to <8 x i32>*
  %7032 = load <8 x i32>, <8 x i32>* %7031, align 32
  %7033 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %7032, i32 %6976) #7
  store <8 x i32> %7033, <8 x i32>* %7031, align 32
  %7034 = add nuw nsw i64 %7014, 4
  %7035 = icmp eq i64 %7034, 32
  br i1 %7035, label %7036, label %7013

7036:                                             ; preds = %7013, %6984, %7011
  br label %7037

7037:                                             ; preds = %7037, %7036
  %7038 = phi i64 [ 0, %7036 ], [ %7056, %7037 ]
  %7039 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %7038
  %7040 = bitcast <4 x i64>* %7039 to <8 x i32>*
  %7041 = load <8 x i32>, <8 x i32>* %7040, align 32
  %7042 = mul <8 x i32> %7041, <i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586>
  %7043 = add <8 x i32> %7042, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %7044 = ashr <8 x i32> %7043, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %7045 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %7038
  %7046 = bitcast <4 x i64>* %7045 to <8 x i32>*
  store <8 x i32> %7044, <8 x i32>* %7046, align 32
  %7047 = or i64 %7038, 1
  %7048 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %7047
  %7049 = bitcast <4 x i64>* %7048 to <8 x i32>*
  %7050 = load <8 x i32>, <8 x i32>* %7049, align 32
  %7051 = mul <8 x i32> %7050, <i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586>
  %7052 = add <8 x i32> %7051, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %7053 = ashr <8 x i32> %7052, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %7054 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %7047
  %7055 = bitcast <4 x i64>* %7054 to <8 x i32>*
  store <8 x i32> %7053, <8 x i32>* %7055, align 32
  %7056 = add nuw nsw i64 %7038, 2
  %7057 = icmp eq i64 %7056, 32
  br i1 %7057, label %10159, label %7037

7058:                                             ; preds = %5
  %7059 = bitcast [64 x <4 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %7059) #7
  %7060 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 16
  %7061 = bitcast <4 x i64>* %7060 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %7061, i8 -86, i64 1536, i1 false) #7
  %7062 = sext i32 %2 to i64
  %7063 = bitcast i16* %0 to <4 x i64>*
  %7064 = load <4 x i64>, <4 x i64>* %7063, align 1
  %7065 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 0
  store <4 x i64> %7064, <4 x i64>* %7065, align 32
  %7066 = getelementptr inbounds i16, i16* %0, i64 %7062
  %7067 = bitcast i16* %7066 to <4 x i64>*
  %7068 = load <4 x i64>, <4 x i64>* %7067, align 1
  %7069 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 1
  store <4 x i64> %7068, <4 x i64>* %7069, align 32
  %7070 = shl nsw i64 %7062, 1
  %7071 = getelementptr inbounds i16, i16* %0, i64 %7070
  %7072 = bitcast i16* %7071 to <4 x i64>*
  %7073 = load <4 x i64>, <4 x i64>* %7072, align 1
  %7074 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 2
  store <4 x i64> %7073, <4 x i64>* %7074, align 32
  %7075 = mul nsw i64 %7062, 3
  %7076 = getelementptr inbounds i16, i16* %0, i64 %7075
  %7077 = bitcast i16* %7076 to <4 x i64>*
  %7078 = load <4 x i64>, <4 x i64>* %7077, align 1
  %7079 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 3
  store <4 x i64> %7078, <4 x i64>* %7079, align 32
  %7080 = shl nsw i64 %7062, 2
  %7081 = getelementptr inbounds i16, i16* %0, i64 %7080
  %7082 = bitcast i16* %7081 to <4 x i64>*
  %7083 = load <4 x i64>, <4 x i64>* %7082, align 1
  %7084 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 4
  store <4 x i64> %7083, <4 x i64>* %7084, align 32
  %7085 = mul nsw i64 %7062, 5
  %7086 = getelementptr inbounds i16, i16* %0, i64 %7085
  %7087 = bitcast i16* %7086 to <4 x i64>*
  %7088 = load <4 x i64>, <4 x i64>* %7087, align 1
  %7089 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 5
  store <4 x i64> %7088, <4 x i64>* %7089, align 32
  %7090 = mul nsw i64 %7062, 6
  %7091 = getelementptr inbounds i16, i16* %0, i64 %7090
  %7092 = bitcast i16* %7091 to <4 x i64>*
  %7093 = load <4 x i64>, <4 x i64>* %7092, align 1
  %7094 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 6
  store <4 x i64> %7093, <4 x i64>* %7094, align 32
  %7095 = mul nsw i64 %7062, 7
  %7096 = getelementptr inbounds i16, i16* %0, i64 %7095
  %7097 = bitcast i16* %7096 to <4 x i64>*
  %7098 = load <4 x i64>, <4 x i64>* %7097, align 1
  %7099 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 7
  store <4 x i64> %7098, <4 x i64>* %7099, align 32
  %7100 = shl nsw i64 %7062, 3
  %7101 = getelementptr inbounds i16, i16* %0, i64 %7100
  %7102 = bitcast i16* %7101 to <4 x i64>*
  %7103 = load <4 x i64>, <4 x i64>* %7102, align 1
  %7104 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 8
  store <4 x i64> %7103, <4 x i64>* %7104, align 32
  %7105 = mul nsw i64 %7062, 9
  %7106 = getelementptr inbounds i16, i16* %0, i64 %7105
  %7107 = bitcast i16* %7106 to <4 x i64>*
  %7108 = load <4 x i64>, <4 x i64>* %7107, align 1
  %7109 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 9
  store <4 x i64> %7108, <4 x i64>* %7109, align 32
  %7110 = mul nsw i64 %7062, 10
  %7111 = getelementptr inbounds i16, i16* %0, i64 %7110
  %7112 = bitcast i16* %7111 to <4 x i64>*
  %7113 = load <4 x i64>, <4 x i64>* %7112, align 1
  %7114 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 10
  store <4 x i64> %7113, <4 x i64>* %7114, align 32
  %7115 = mul nsw i64 %7062, 11
  %7116 = getelementptr inbounds i16, i16* %0, i64 %7115
  %7117 = bitcast i16* %7116 to <4 x i64>*
  %7118 = load <4 x i64>, <4 x i64>* %7117, align 1
  %7119 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 11
  store <4 x i64> %7118, <4 x i64>* %7119, align 32
  %7120 = mul nsw i64 %7062, 12
  %7121 = getelementptr inbounds i16, i16* %0, i64 %7120
  %7122 = bitcast i16* %7121 to <4 x i64>*
  %7123 = load <4 x i64>, <4 x i64>* %7122, align 1
  %7124 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 12
  store <4 x i64> %7123, <4 x i64>* %7124, align 32
  %7125 = mul nsw i64 %7062, 13
  %7126 = getelementptr inbounds i16, i16* %0, i64 %7125
  %7127 = bitcast i16* %7126 to <4 x i64>*
  %7128 = load <4 x i64>, <4 x i64>* %7127, align 1
  %7129 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 13
  store <4 x i64> %7128, <4 x i64>* %7129, align 32
  %7130 = mul nsw i64 %7062, 14
  %7131 = getelementptr inbounds i16, i16* %0, i64 %7130
  %7132 = bitcast i16* %7131 to <4 x i64>*
  %7133 = load <4 x i64>, <4 x i64>* %7132, align 1
  %7134 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 14
  store <4 x i64> %7133, <4 x i64>* %7134, align 32
  %7135 = mul nsw i64 %7062, 15
  %7136 = getelementptr inbounds i16, i16* %0, i64 %7135
  %7137 = bitcast i16* %7136 to <4 x i64>*
  %7138 = load <4 x i64>, <4 x i64>* %7137, align 1
  %7139 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 15
  store <4 x i64> %7138, <4 x i64>* %7139, align 32
  %7140 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 0
  %7141 = shufflevector <4 x i64> %7064, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7142 = bitcast <2 x i64> %7141 to <8 x i16>
  %7143 = sext <8 x i16> %7142 to <8 x i32>
  %7144 = bitcast [32 x <4 x i64>]* %8 to <8 x i32>*
  store <8 x i32> %7143, <8 x i32>* %7144, align 32
  %7145 = bitcast <4 x i64> %7064 to <8 x i32>
  %7146 = shufflevector <8 x i32> %7145, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7147 = bitcast <4 x i32> %7146 to <8 x i16>
  %7148 = sext <8 x i16> %7147 to <8 x i32>
  %7149 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 1
  %7150 = bitcast <4 x i64>* %7149 to <8 x i32>*
  store <8 x i32> %7148, <8 x i32>* %7150, align 32
  br label %7151

7151:                                             ; preds = %7058, %7151
  %7152 = phi i64 [ 1, %7058 ], [ %7168, %7151 ]
  %7153 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 %7152
  %7154 = load <4 x i64>, <4 x i64>* %7153, align 32
  %7155 = shufflevector <4 x i64> %7154, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7156 = bitcast <2 x i64> %7155 to <8 x i16>
  %7157 = sext <8 x i16> %7156 to <8 x i32>
  %7158 = shl nuw nsw i64 %7152, 1
  %7159 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %7158
  %7160 = bitcast <4 x i64>* %7159 to <8 x i32>*
  store <8 x i32> %7157, <8 x i32>* %7160, align 32
  %7161 = bitcast <4 x i64> %7154 to <8 x i32>
  %7162 = shufflevector <8 x i32> %7161, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7163 = bitcast <4 x i32> %7162 to <8 x i16>
  %7164 = sext <8 x i16> %7163 to <8 x i32>
  %7165 = or i64 %7158, 1
  %7166 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %7165
  %7167 = bitcast <4 x i64>* %7166 to <8 x i32>*
  store <8 x i32> %7164, <8 x i32>* %7167, align 32
  %7168 = add nuw nsw i64 %7152, 1
  %7169 = icmp eq i64 %7168, 16
  br i1 %7169, label %7170, label %7151

7170:                                             ; preds = %7151
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %7059) #7
  %7171 = load i8, i8* %12, align 1
  %7172 = sext i8 %7171 to i32
  %7173 = icmp slt i8 %7171, 0
  br i1 %7173, label %7174, label %7207

7174:                                             ; preds = %7170
  %7175 = sub nsw i32 0, %7172
  %7176 = xor i32 %7172, -1
  %7177 = shl i32 1, %7176
  %7178 = insertelement <8 x i32> undef, i32 %7177, i32 0
  %7179 = shufflevector <8 x i32> %7178, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %7180

7180:                                             ; preds = %7180, %7174
  %7181 = phi i64 [ 0, %7174 ], [ %7205, %7180 ]
  %7182 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %7181
  %7183 = bitcast <4 x i64>* %7182 to <8 x i32>*
  %7184 = load <8 x i32>, <8 x i32>* %7183, align 32
  %7185 = add <8 x i32> %7184, %7179
  %7186 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %7185, i32 %7175) #7
  store <8 x i32> %7186, <8 x i32>* %7183, align 32
  %7187 = or i64 %7181, 1
  %7188 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %7187
  %7189 = bitcast <4 x i64>* %7188 to <8 x i32>*
  %7190 = load <8 x i32>, <8 x i32>* %7189, align 32
  %7191 = add <8 x i32> %7190, %7179
  %7192 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %7191, i32 %7175) #7
  store <8 x i32> %7192, <8 x i32>* %7189, align 32
  %7193 = or i64 %7181, 2
  %7194 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %7193
  %7195 = bitcast <4 x i64>* %7194 to <8 x i32>*
  %7196 = load <8 x i32>, <8 x i32>* %7195, align 32
  %7197 = add <8 x i32> %7196, %7179
  %7198 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %7197, i32 %7175) #7
  store <8 x i32> %7198, <8 x i32>* %7195, align 32
  %7199 = or i64 %7181, 3
  %7200 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %7199
  %7201 = bitcast <4 x i64>* %7200 to <8 x i32>*
  %7202 = load <8 x i32>, <8 x i32>* %7201, align 32
  %7203 = add <8 x i32> %7202, %7179
  %7204 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %7203, i32 %7175) #7
  store <8 x i32> %7204, <8 x i32>* %7201, align 32
  %7205 = add nuw nsw i64 %7181, 4
  %7206 = icmp eq i64 %7205, 32
  br i1 %7206, label %7232, label %7180

7207:                                             ; preds = %7170
  %7208 = icmp eq i8 %7171, 0
  br i1 %7208, label %7232, label %7209

7209:                                             ; preds = %7207, %7209
  %7210 = phi i64 [ %7230, %7209 ], [ 0, %7207 ]
  %7211 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %7210
  %7212 = bitcast <4 x i64>* %7211 to <8 x i32>*
  %7213 = load <8 x i32>, <8 x i32>* %7212, align 32
  %7214 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %7213, i32 %7172) #7
  store <8 x i32> %7214, <8 x i32>* %7212, align 32
  %7215 = or i64 %7210, 1
  %7216 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %7215
  %7217 = bitcast <4 x i64>* %7216 to <8 x i32>*
  %7218 = load <8 x i32>, <8 x i32>* %7217, align 32
  %7219 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %7218, i32 %7172) #7
  store <8 x i32> %7219, <8 x i32>* %7217, align 32
  %7220 = or i64 %7210, 2
  %7221 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %7220
  %7222 = bitcast <4 x i64>* %7221 to <8 x i32>*
  %7223 = load <8 x i32>, <8 x i32>* %7222, align 32
  %7224 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %7223, i32 %7172) #7
  store <8 x i32> %7224, <8 x i32>* %7222, align 32
  %7225 = or i64 %7210, 3
  %7226 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %7225
  %7227 = bitcast <4 x i64>* %7226 to <8 x i32>*
  %7228 = load <8 x i32>, <8 x i32>* %7227, align 32
  %7229 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %7228, i32 %7172) #7
  store <8 x i32> %7229, <8 x i32>* %7227, align 32
  %7230 = add nuw nsw i64 %7210, 4
  %7231 = icmp eq i64 %7230, 32
  br i1 %7231, label %7232, label %7209

7232:                                             ; preds = %7209, %7180, %7207
  %7233 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 0
  %7234 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 2, i64 2), align 2
  call void @fdct16_avx2(<4 x i64>* nonnull %7140, <4 x i64>* nonnull %7233, i8 signext %7234, i32 2, i32 2)
  %7235 = getelementptr inbounds i8, i8* %12, i64 1
  %7236 = load i8, i8* %7235, align 1
  %7237 = sext i8 %7236 to i32
  %7238 = icmp slt i8 %7236, 0
  br i1 %7238, label %7239, label %7272

7239:                                             ; preds = %7232
  %7240 = sub nsw i32 0, %7237
  %7241 = xor i32 %7237, -1
  %7242 = shl i32 1, %7241
  %7243 = insertelement <8 x i32> undef, i32 %7242, i32 0
  %7244 = shufflevector <8 x i32> %7243, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %7245

7245:                                             ; preds = %7245, %7239
  %7246 = phi i64 [ 0, %7239 ], [ %7270, %7245 ]
  %7247 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %7246
  %7248 = bitcast <4 x i64>* %7247 to <8 x i32>*
  %7249 = load <8 x i32>, <8 x i32>* %7248, align 32
  %7250 = add <8 x i32> %7249, %7244
  %7251 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %7250, i32 %7240) #7
  store <8 x i32> %7251, <8 x i32>* %7248, align 32
  %7252 = or i64 %7246, 1
  %7253 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %7252
  %7254 = bitcast <4 x i64>* %7253 to <8 x i32>*
  %7255 = load <8 x i32>, <8 x i32>* %7254, align 32
  %7256 = add <8 x i32> %7255, %7244
  %7257 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %7256, i32 %7240) #7
  store <8 x i32> %7257, <8 x i32>* %7254, align 32
  %7258 = or i64 %7246, 2
  %7259 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %7258
  %7260 = bitcast <4 x i64>* %7259 to <8 x i32>*
  %7261 = load <8 x i32>, <8 x i32>* %7260, align 32
  %7262 = add <8 x i32> %7261, %7244
  %7263 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %7262, i32 %7240) #7
  store <8 x i32> %7263, <8 x i32>* %7260, align 32
  %7264 = or i64 %7246, 3
  %7265 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %7264
  %7266 = bitcast <4 x i64>* %7265 to <8 x i32>*
  %7267 = load <8 x i32>, <8 x i32>* %7266, align 32
  %7268 = add <8 x i32> %7267, %7244
  %7269 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %7268, i32 %7240) #7
  store <8 x i32> %7269, <8 x i32>* %7266, align 32
  %7270 = add nuw nsw i64 %7246, 4
  %7271 = icmp eq i64 %7270, 32
  br i1 %7271, label %7297, label %7245

7272:                                             ; preds = %7232
  %7273 = icmp eq i8 %7236, 0
  br i1 %7273, label %7297, label %7274

7274:                                             ; preds = %7272, %7274
  %7275 = phi i64 [ %7295, %7274 ], [ 0, %7272 ]
  %7276 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %7275
  %7277 = bitcast <4 x i64>* %7276 to <8 x i32>*
  %7278 = load <8 x i32>, <8 x i32>* %7277, align 32
  %7279 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %7278, i32 %7237) #7
  store <8 x i32> %7279, <8 x i32>* %7277, align 32
  %7280 = or i64 %7275, 1
  %7281 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %7280
  %7282 = bitcast <4 x i64>* %7281 to <8 x i32>*
  %7283 = load <8 x i32>, <8 x i32>* %7282, align 32
  %7284 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %7283, i32 %7237) #7
  store <8 x i32> %7284, <8 x i32>* %7282, align 32
  %7285 = or i64 %7275, 2
  %7286 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %7285
  %7287 = bitcast <4 x i64>* %7286 to <8 x i32>*
  %7288 = load <8 x i32>, <8 x i32>* %7287, align 32
  %7289 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %7288, i32 %7237) #7
  store <8 x i32> %7289, <8 x i32>* %7287, align 32
  %7290 = or i64 %7275, 3
  %7291 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %7290
  %7292 = bitcast <4 x i64>* %7291 to <8 x i32>*
  %7293 = load <8 x i32>, <8 x i32>* %7292, align 32
  %7294 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %7293, i32 %7237) #7
  store <8 x i32> %7294, <8 x i32>* %7292, align 32
  %7295 = add nuw nsw i64 %7275, 4
  %7296 = icmp eq i64 %7295, 32
  br i1 %7296, label %7297, label %7274

7297:                                             ; preds = %7274, %7245, %7272
  br label %7298

7298:                                             ; preds = %7298, %7297
  %7299 = phi i64 [ 0, %7297 ], [ %7317, %7298 ]
  %7300 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %7299
  %7301 = bitcast <4 x i64>* %7300 to <8 x i32>*
  %7302 = load <8 x i32>, <8 x i32>* %7301, align 32
  %7303 = mul <8 x i32> %7302, <i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586>
  %7304 = add <8 x i32> %7303, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %7305 = ashr <8 x i32> %7304, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %7306 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %7299
  %7307 = bitcast <4 x i64>* %7306 to <8 x i32>*
  store <8 x i32> %7305, <8 x i32>* %7307, align 32
  %7308 = or i64 %7299, 1
  %7309 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %7308
  %7310 = bitcast <4 x i64>* %7309 to <8 x i32>*
  %7311 = load <8 x i32>, <8 x i32>* %7310, align 32
  %7312 = mul <8 x i32> %7311, <i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586>
  %7313 = add <8 x i32> %7312, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %7314 = ashr <8 x i32> %7313, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %7315 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %7308
  %7316 = bitcast <4 x i64>* %7315 to <8 x i32>*
  store <8 x i32> %7314, <8 x i32>* %7316, align 32
  %7317 = add nuw nsw i64 %7299, 2
  %7318 = icmp eq i64 %7317, 32
  br i1 %7318, label %10159, label %7298

7319:                                             ; preds = %5
  %7320 = bitcast [64 x <4 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %7320) #7
  %7321 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 16
  %7322 = bitcast <4 x i64>* %7321 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %7322, i8 -86, i64 1536, i1 false) #7
  %7323 = sext i32 %2 to i64
  %7324 = bitcast i16* %0 to <4 x i64>*
  %7325 = load <4 x i64>, <4 x i64>* %7324, align 1
  %7326 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 0
  store <4 x i64> %7325, <4 x i64>* %7326, align 32
  %7327 = getelementptr inbounds i16, i16* %0, i64 %7323
  %7328 = bitcast i16* %7327 to <4 x i64>*
  %7329 = load <4 x i64>, <4 x i64>* %7328, align 1
  %7330 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 1
  store <4 x i64> %7329, <4 x i64>* %7330, align 32
  %7331 = shl nsw i64 %7323, 1
  %7332 = getelementptr inbounds i16, i16* %0, i64 %7331
  %7333 = bitcast i16* %7332 to <4 x i64>*
  %7334 = load <4 x i64>, <4 x i64>* %7333, align 1
  %7335 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 2
  store <4 x i64> %7334, <4 x i64>* %7335, align 32
  %7336 = mul nsw i64 %7323, 3
  %7337 = getelementptr inbounds i16, i16* %0, i64 %7336
  %7338 = bitcast i16* %7337 to <4 x i64>*
  %7339 = load <4 x i64>, <4 x i64>* %7338, align 1
  %7340 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 3
  store <4 x i64> %7339, <4 x i64>* %7340, align 32
  %7341 = shl nsw i64 %7323, 2
  %7342 = getelementptr inbounds i16, i16* %0, i64 %7341
  %7343 = bitcast i16* %7342 to <4 x i64>*
  %7344 = load <4 x i64>, <4 x i64>* %7343, align 1
  %7345 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 4
  store <4 x i64> %7344, <4 x i64>* %7345, align 32
  %7346 = mul nsw i64 %7323, 5
  %7347 = getelementptr inbounds i16, i16* %0, i64 %7346
  %7348 = bitcast i16* %7347 to <4 x i64>*
  %7349 = load <4 x i64>, <4 x i64>* %7348, align 1
  %7350 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 5
  store <4 x i64> %7349, <4 x i64>* %7350, align 32
  %7351 = mul nsw i64 %7323, 6
  %7352 = getelementptr inbounds i16, i16* %0, i64 %7351
  %7353 = bitcast i16* %7352 to <4 x i64>*
  %7354 = load <4 x i64>, <4 x i64>* %7353, align 1
  %7355 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 6
  store <4 x i64> %7354, <4 x i64>* %7355, align 32
  %7356 = mul nsw i64 %7323, 7
  %7357 = getelementptr inbounds i16, i16* %0, i64 %7356
  %7358 = bitcast i16* %7357 to <4 x i64>*
  %7359 = load <4 x i64>, <4 x i64>* %7358, align 1
  %7360 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 7
  store <4 x i64> %7359, <4 x i64>* %7360, align 32
  %7361 = shl nsw i64 %7323, 3
  %7362 = getelementptr inbounds i16, i16* %0, i64 %7361
  %7363 = bitcast i16* %7362 to <4 x i64>*
  %7364 = load <4 x i64>, <4 x i64>* %7363, align 1
  %7365 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 8
  store <4 x i64> %7364, <4 x i64>* %7365, align 32
  %7366 = mul nsw i64 %7323, 9
  %7367 = getelementptr inbounds i16, i16* %0, i64 %7366
  %7368 = bitcast i16* %7367 to <4 x i64>*
  %7369 = load <4 x i64>, <4 x i64>* %7368, align 1
  %7370 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 9
  store <4 x i64> %7369, <4 x i64>* %7370, align 32
  %7371 = mul nsw i64 %7323, 10
  %7372 = getelementptr inbounds i16, i16* %0, i64 %7371
  %7373 = bitcast i16* %7372 to <4 x i64>*
  %7374 = load <4 x i64>, <4 x i64>* %7373, align 1
  %7375 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 10
  store <4 x i64> %7374, <4 x i64>* %7375, align 32
  %7376 = mul nsw i64 %7323, 11
  %7377 = getelementptr inbounds i16, i16* %0, i64 %7376
  %7378 = bitcast i16* %7377 to <4 x i64>*
  %7379 = load <4 x i64>, <4 x i64>* %7378, align 1
  %7380 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 11
  store <4 x i64> %7379, <4 x i64>* %7380, align 32
  %7381 = mul nsw i64 %7323, 12
  %7382 = getelementptr inbounds i16, i16* %0, i64 %7381
  %7383 = bitcast i16* %7382 to <4 x i64>*
  %7384 = load <4 x i64>, <4 x i64>* %7383, align 1
  %7385 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 12
  store <4 x i64> %7384, <4 x i64>* %7385, align 32
  %7386 = mul nsw i64 %7323, 13
  %7387 = getelementptr inbounds i16, i16* %0, i64 %7386
  %7388 = bitcast i16* %7387 to <4 x i64>*
  %7389 = load <4 x i64>, <4 x i64>* %7388, align 1
  %7390 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 13
  store <4 x i64> %7389, <4 x i64>* %7390, align 32
  %7391 = mul nsw i64 %7323, 14
  %7392 = getelementptr inbounds i16, i16* %0, i64 %7391
  %7393 = bitcast i16* %7392 to <4 x i64>*
  %7394 = load <4 x i64>, <4 x i64>* %7393, align 1
  %7395 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 14
  store <4 x i64> %7394, <4 x i64>* %7395, align 32
  %7396 = mul nsw i64 %7323, 15
  %7397 = getelementptr inbounds i16, i16* %0, i64 %7396
  %7398 = bitcast i16* %7397 to <4 x i64>*
  %7399 = load <4 x i64>, <4 x i64>* %7398, align 1
  %7400 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 15
  store <4 x i64> %7399, <4 x i64>* %7400, align 32
  %7401 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 0
  %7402 = shufflevector <4 x i64> %7325, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7403 = bitcast <2 x i64> %7402 to <8 x i16>
  %7404 = sext <8 x i16> %7403 to <8 x i32>
  %7405 = bitcast [32 x <4 x i64>]* %8 to <8 x i32>*
  store <8 x i32> %7404, <8 x i32>* %7405, align 32
  %7406 = bitcast <4 x i64> %7325 to <8 x i32>
  %7407 = shufflevector <8 x i32> %7406, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7408 = bitcast <4 x i32> %7407 to <8 x i16>
  %7409 = sext <8 x i16> %7408 to <8 x i32>
  %7410 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 1
  %7411 = bitcast <4 x i64>* %7410 to <8 x i32>*
  store <8 x i32> %7409, <8 x i32>* %7411, align 32
  br label %7412

7412:                                             ; preds = %7319, %7412
  %7413 = phi i64 [ 1, %7319 ], [ %7429, %7412 ]
  %7414 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 %7413
  %7415 = load <4 x i64>, <4 x i64>* %7414, align 32
  %7416 = shufflevector <4 x i64> %7415, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7417 = bitcast <2 x i64> %7416 to <8 x i16>
  %7418 = sext <8 x i16> %7417 to <8 x i32>
  %7419 = shl nuw nsw i64 %7413, 1
  %7420 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %7419
  %7421 = bitcast <4 x i64>* %7420 to <8 x i32>*
  store <8 x i32> %7418, <8 x i32>* %7421, align 32
  %7422 = bitcast <4 x i64> %7415 to <8 x i32>
  %7423 = shufflevector <8 x i32> %7422, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7424 = bitcast <4 x i32> %7423 to <8 x i16>
  %7425 = sext <8 x i16> %7424 to <8 x i32>
  %7426 = or i64 %7419, 1
  %7427 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %7426
  %7428 = bitcast <4 x i64>* %7427 to <8 x i32>*
  store <8 x i32> %7425, <8 x i32>* %7428, align 32
  %7429 = add nuw nsw i64 %7413, 1
  %7430 = icmp eq i64 %7429, 16
  br i1 %7430, label %7431, label %7412

7431:                                             ; preds = %7412
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %7320) #7
  %7432 = load i8, i8* %12, align 1
  %7433 = sext i8 %7432 to i32
  %7434 = icmp slt i8 %7432, 0
  br i1 %7434, label %7435, label %7468

7435:                                             ; preds = %7431
  %7436 = sub nsw i32 0, %7433
  %7437 = xor i32 %7433, -1
  %7438 = shl i32 1, %7437
  %7439 = insertelement <8 x i32> undef, i32 %7438, i32 0
  %7440 = shufflevector <8 x i32> %7439, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %7441

7441:                                             ; preds = %7441, %7435
  %7442 = phi i64 [ 0, %7435 ], [ %7466, %7441 ]
  %7443 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %7442
  %7444 = bitcast <4 x i64>* %7443 to <8 x i32>*
  %7445 = load <8 x i32>, <8 x i32>* %7444, align 32
  %7446 = add <8 x i32> %7445, %7440
  %7447 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %7446, i32 %7436) #7
  store <8 x i32> %7447, <8 x i32>* %7444, align 32
  %7448 = or i64 %7442, 1
  %7449 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %7448
  %7450 = bitcast <4 x i64>* %7449 to <8 x i32>*
  %7451 = load <8 x i32>, <8 x i32>* %7450, align 32
  %7452 = add <8 x i32> %7451, %7440
  %7453 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %7452, i32 %7436) #7
  store <8 x i32> %7453, <8 x i32>* %7450, align 32
  %7454 = or i64 %7442, 2
  %7455 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %7454
  %7456 = bitcast <4 x i64>* %7455 to <8 x i32>*
  %7457 = load <8 x i32>, <8 x i32>* %7456, align 32
  %7458 = add <8 x i32> %7457, %7440
  %7459 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %7458, i32 %7436) #7
  store <8 x i32> %7459, <8 x i32>* %7456, align 32
  %7460 = or i64 %7442, 3
  %7461 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %7460
  %7462 = bitcast <4 x i64>* %7461 to <8 x i32>*
  %7463 = load <8 x i32>, <8 x i32>* %7462, align 32
  %7464 = add <8 x i32> %7463, %7440
  %7465 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %7464, i32 %7436) #7
  store <8 x i32> %7465, <8 x i32>* %7462, align 32
  %7466 = add nuw nsw i64 %7442, 4
  %7467 = icmp eq i64 %7466, 32
  br i1 %7467, label %7493, label %7441

7468:                                             ; preds = %7431
  %7469 = icmp eq i8 %7432, 0
  br i1 %7469, label %7493, label %7470

7470:                                             ; preds = %7468, %7470
  %7471 = phi i64 [ %7491, %7470 ], [ 0, %7468 ]
  %7472 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %7471
  %7473 = bitcast <4 x i64>* %7472 to <8 x i32>*
  %7474 = load <8 x i32>, <8 x i32>* %7473, align 32
  %7475 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %7474, i32 %7433) #7
  store <8 x i32> %7475, <8 x i32>* %7473, align 32
  %7476 = or i64 %7471, 1
  %7477 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %7476
  %7478 = bitcast <4 x i64>* %7477 to <8 x i32>*
  %7479 = load <8 x i32>, <8 x i32>* %7478, align 32
  %7480 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %7479, i32 %7433) #7
  store <8 x i32> %7480, <8 x i32>* %7478, align 32
  %7481 = or i64 %7471, 2
  %7482 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %7481
  %7483 = bitcast <4 x i64>* %7482 to <8 x i32>*
  %7484 = load <8 x i32>, <8 x i32>* %7483, align 32
  %7485 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %7484, i32 %7433) #7
  store <8 x i32> %7485, <8 x i32>* %7483, align 32
  %7486 = or i64 %7471, 3
  %7487 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %7486
  %7488 = bitcast <4 x i64>* %7487 to <8 x i32>*
  %7489 = load <8 x i32>, <8 x i32>* %7488, align 32
  %7490 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %7489, i32 %7433) #7
  store <8 x i32> %7490, <8 x i32>* %7488, align 32
  %7491 = add nuw nsw i64 %7471, 4
  %7492 = icmp eq i64 %7491, 32
  br i1 %7492, label %7493, label %7470

7493:                                             ; preds = %7470, %7441, %7468
  br label %7494

7494:                                             ; preds = %7494, %7493
  %7495 = phi i64 [ 0, %7493 ], [ %7513, %7494 ]
  %7496 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %7495
  %7497 = bitcast <4 x i64>* %7496 to <8 x i32>*
  %7498 = load <8 x i32>, <8 x i32>* %7497, align 32
  %7499 = mul <8 x i32> %7498, <i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586>
  %7500 = add <8 x i32> %7499, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %7501 = ashr <8 x i32> %7500, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %7502 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %7495
  %7503 = bitcast <4 x i64>* %7502 to <8 x i32>*
  store <8 x i32> %7501, <8 x i32>* %7503, align 32
  %7504 = or i64 %7495, 1
  %7505 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %7504
  %7506 = bitcast <4 x i64>* %7505 to <8 x i32>*
  %7507 = load <8 x i32>, <8 x i32>* %7506, align 32
  %7508 = mul <8 x i32> %7507, <i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586>
  %7509 = add <8 x i32> %7508, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %7510 = ashr <8 x i32> %7509, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %7511 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %7504
  %7512 = bitcast <4 x i64>* %7511 to <8 x i32>*
  store <8 x i32> %7510, <8 x i32>* %7512, align 32
  %7513 = add nuw nsw i64 %7495, 2
  %7514 = icmp eq i64 %7513, 32
  br i1 %7514, label %7515, label %7494

7515:                                             ; preds = %7494
  %7516 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 0
  %7517 = getelementptr inbounds i8, i8* %12, i64 1
  %7518 = load i8, i8* %7517, align 1
  %7519 = sext i8 %7518 to i32
  %7520 = icmp slt i8 %7518, 0
  br i1 %7520, label %7521, label %7554

7521:                                             ; preds = %7515
  %7522 = sub nsw i32 0, %7519
  %7523 = xor i32 %7519, -1
  %7524 = shl i32 1, %7523
  %7525 = insertelement <8 x i32> undef, i32 %7524, i32 0
  %7526 = shufflevector <8 x i32> %7525, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %7527

7527:                                             ; preds = %7527, %7521
  %7528 = phi i64 [ 0, %7521 ], [ %7552, %7527 ]
  %7529 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %7528
  %7530 = bitcast <4 x i64>* %7529 to <8 x i32>*
  %7531 = load <8 x i32>, <8 x i32>* %7530, align 32
  %7532 = add <8 x i32> %7531, %7526
  %7533 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %7532, i32 %7522) #7
  store <8 x i32> %7533, <8 x i32>* %7530, align 32
  %7534 = or i64 %7528, 1
  %7535 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %7534
  %7536 = bitcast <4 x i64>* %7535 to <8 x i32>*
  %7537 = load <8 x i32>, <8 x i32>* %7536, align 32
  %7538 = add <8 x i32> %7537, %7526
  %7539 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %7538, i32 %7522) #7
  store <8 x i32> %7539, <8 x i32>* %7536, align 32
  %7540 = or i64 %7528, 2
  %7541 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %7540
  %7542 = bitcast <4 x i64>* %7541 to <8 x i32>*
  %7543 = load <8 x i32>, <8 x i32>* %7542, align 32
  %7544 = add <8 x i32> %7543, %7526
  %7545 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %7544, i32 %7522) #7
  store <8 x i32> %7545, <8 x i32>* %7542, align 32
  %7546 = or i64 %7528, 3
  %7547 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %7546
  %7548 = bitcast <4 x i64>* %7547 to <8 x i32>*
  %7549 = load <8 x i32>, <8 x i32>* %7548, align 32
  %7550 = add <8 x i32> %7549, %7526
  %7551 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %7550, i32 %7522) #7
  store <8 x i32> %7551, <8 x i32>* %7548, align 32
  %7552 = add nuw nsw i64 %7528, 4
  %7553 = icmp eq i64 %7552, 32
  br i1 %7553, label %7579, label %7527

7554:                                             ; preds = %7515
  %7555 = icmp eq i8 %7518, 0
  br i1 %7555, label %7579, label %7556

7556:                                             ; preds = %7554, %7556
  %7557 = phi i64 [ %7577, %7556 ], [ 0, %7554 ]
  %7558 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %7557
  %7559 = bitcast <4 x i64>* %7558 to <8 x i32>*
  %7560 = load <8 x i32>, <8 x i32>* %7559, align 32
  %7561 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %7560, i32 %7519) #7
  store <8 x i32> %7561, <8 x i32>* %7559, align 32
  %7562 = or i64 %7557, 1
  %7563 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %7562
  %7564 = bitcast <4 x i64>* %7563 to <8 x i32>*
  %7565 = load <8 x i32>, <8 x i32>* %7564, align 32
  %7566 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %7565, i32 %7519) #7
  store <8 x i32> %7566, <8 x i32>* %7564, align 32
  %7567 = or i64 %7557, 2
  %7568 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %7567
  %7569 = bitcast <4 x i64>* %7568 to <8 x i32>*
  %7570 = load <8 x i32>, <8 x i32>* %7569, align 32
  %7571 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %7570, i32 %7519) #7
  store <8 x i32> %7571, <8 x i32>* %7569, align 32
  %7572 = or i64 %7557, 3
  %7573 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %7572
  %7574 = bitcast <4 x i64>* %7573 to <8 x i32>*
  %7575 = load <8 x i32>, <8 x i32>* %7574, align 32
  %7576 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %7575, i32 %7519) #7
  store <8 x i32> %7576, <8 x i32>* %7574, align 32
  %7577 = add nuw nsw i64 %7557, 4
  %7578 = icmp eq i64 %7577, 32
  br i1 %7578, label %7579, label %7556

7579:                                             ; preds = %7556, %7527, %7554
  %7580 = bitcast [32 x <4 x i64>]* %10 to <8 x i32>*
  %7581 = load <8 x i32>, <8 x i32>* %7580, align 32
  %7582 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 2
  %7583 = bitcast <4 x i64>* %7582 to <8 x i32>*
  %7584 = load <8 x i32>, <8 x i32>* %7583, align 32
  %7585 = shufflevector <8 x i32> %7581, <8 x i32> %7584, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %7586 = bitcast <8 x i32> %7585 to <4 x i64>
  %7587 = shufflevector <8 x i32> %7581, <8 x i32> %7584, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %7588 = bitcast <8 x i32> %7587 to <4 x i64>
  %7589 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 4
  %7590 = bitcast <4 x i64>* %7589 to <8 x i32>*
  %7591 = load <8 x i32>, <8 x i32>* %7590, align 32
  %7592 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 6
  %7593 = bitcast <4 x i64>* %7592 to <8 x i32>*
  %7594 = load <8 x i32>, <8 x i32>* %7593, align 32
  %7595 = shufflevector <8 x i32> %7591, <8 x i32> %7594, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %7596 = bitcast <8 x i32> %7595 to <4 x i64>
  %7597 = shufflevector <8 x i32> %7591, <8 x i32> %7594, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %7598 = bitcast <8 x i32> %7597 to <4 x i64>
  %7599 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 8
  %7600 = bitcast <4 x i64>* %7599 to <8 x i32>*
  %7601 = load <8 x i32>, <8 x i32>* %7600, align 32
  %7602 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 10
  %7603 = bitcast <4 x i64>* %7602 to <8 x i32>*
  %7604 = load <8 x i32>, <8 x i32>* %7603, align 32
  %7605 = shufflevector <8 x i32> %7601, <8 x i32> %7604, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %7606 = bitcast <8 x i32> %7605 to <4 x i64>
  %7607 = shufflevector <8 x i32> %7601, <8 x i32> %7604, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %7608 = bitcast <8 x i32> %7607 to <4 x i64>
  %7609 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 12
  %7610 = bitcast <4 x i64>* %7609 to <8 x i32>*
  %7611 = load <8 x i32>, <8 x i32>* %7610, align 32
  %7612 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 14
  %7613 = bitcast <4 x i64>* %7612 to <8 x i32>*
  %7614 = load <8 x i32>, <8 x i32>* %7613, align 32
  %7615 = shufflevector <8 x i32> %7611, <8 x i32> %7614, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %7616 = bitcast <8 x i32> %7615 to <4 x i64>
  %7617 = shufflevector <8 x i32> %7611, <8 x i32> %7614, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %7618 = bitcast <8 x i32> %7617 to <4 x i64>
  %7619 = shufflevector <4 x i64> %7586, <4 x i64> %7596, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %7620 = shufflevector <4 x i64> %7606, <4 x i64> %7616, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %7621 = bitcast <4 x i64> %7619 to <8 x i32>
  %7622 = bitcast <4 x i64> %7620 to <8 x i32>
  %7623 = shufflevector <8 x i32> %7621, <8 x i32> %7622, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %7624 = bitcast [32 x <4 x i64>]* %8 to <8 x i32>*
  store <8 x i32> %7623, <8 x i32>* %7624, align 32
  %7625 = shufflevector <8 x i32> %7621, <8 x i32> %7622, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %7626 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 8
  %7627 = bitcast <4 x i64>* %7626 to <8 x i32>*
  store <8 x i32> %7625, <8 x i32>* %7627, align 32
  %7628 = shufflevector <4 x i64> %7586, <4 x i64> %7596, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %7629 = shufflevector <4 x i64> %7606, <4 x i64> %7616, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %7630 = bitcast <4 x i64> %7628 to <8 x i32>
  %7631 = bitcast <4 x i64> %7629 to <8 x i32>
  %7632 = shufflevector <8 x i32> %7630, <8 x i32> %7631, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %7633 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 2
  %7634 = bitcast <4 x i64>* %7633 to <8 x i32>*
  store <8 x i32> %7632, <8 x i32>* %7634, align 32
  %7635 = shufflevector <8 x i32> %7630, <8 x i32> %7631, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %7636 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 10
  %7637 = bitcast <4 x i64>* %7636 to <8 x i32>*
  store <8 x i32> %7635, <8 x i32>* %7637, align 32
  %7638 = shufflevector <4 x i64> %7588, <4 x i64> %7598, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %7639 = shufflevector <4 x i64> %7608, <4 x i64> %7618, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %7640 = bitcast <4 x i64> %7638 to <8 x i32>
  %7641 = bitcast <4 x i64> %7639 to <8 x i32>
  %7642 = shufflevector <8 x i32> %7640, <8 x i32> %7641, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %7643 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 4
  %7644 = bitcast <4 x i64>* %7643 to <8 x i32>*
  store <8 x i32> %7642, <8 x i32>* %7644, align 32
  %7645 = shufflevector <8 x i32> %7640, <8 x i32> %7641, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %7646 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 12
  %7647 = bitcast <4 x i64>* %7646 to <8 x i32>*
  store <8 x i32> %7645, <8 x i32>* %7647, align 32
  %7648 = shufflevector <4 x i64> %7588, <4 x i64> %7598, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %7649 = shufflevector <4 x i64> %7608, <4 x i64> %7618, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %7650 = bitcast <4 x i64> %7648 to <8 x i32>
  %7651 = bitcast <4 x i64> %7649 to <8 x i32>
  %7652 = shufflevector <8 x i32> %7650, <8 x i32> %7651, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %7653 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 6
  %7654 = bitcast <4 x i64>* %7653 to <8 x i32>*
  store <8 x i32> %7652, <8 x i32>* %7654, align 32
  %7655 = shufflevector <8 x i32> %7650, <8 x i32> %7651, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %7656 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 14
  %7657 = bitcast <4 x i64>* %7656 to <8 x i32>*
  store <8 x i32> %7655, <8 x i32>* %7657, align 32
  %7658 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 1
  %7659 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 16
  %7660 = bitcast <4 x i64>* %7658 to <8 x i32>*
  %7661 = load <8 x i32>, <8 x i32>* %7660, align 32
  %7662 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 3
  %7663 = bitcast <4 x i64>* %7662 to <8 x i32>*
  %7664 = load <8 x i32>, <8 x i32>* %7663, align 32
  %7665 = shufflevector <8 x i32> %7661, <8 x i32> %7664, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %7666 = bitcast <8 x i32> %7665 to <4 x i64>
  %7667 = shufflevector <8 x i32> %7661, <8 x i32> %7664, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %7668 = bitcast <8 x i32> %7667 to <4 x i64>
  %7669 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 5
  %7670 = bitcast <4 x i64>* %7669 to <8 x i32>*
  %7671 = load <8 x i32>, <8 x i32>* %7670, align 32
  %7672 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 7
  %7673 = bitcast <4 x i64>* %7672 to <8 x i32>*
  %7674 = load <8 x i32>, <8 x i32>* %7673, align 32
  %7675 = shufflevector <8 x i32> %7671, <8 x i32> %7674, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %7676 = bitcast <8 x i32> %7675 to <4 x i64>
  %7677 = shufflevector <8 x i32> %7671, <8 x i32> %7674, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %7678 = bitcast <8 x i32> %7677 to <4 x i64>
  %7679 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 9
  %7680 = bitcast <4 x i64>* %7679 to <8 x i32>*
  %7681 = load <8 x i32>, <8 x i32>* %7680, align 32
  %7682 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 11
  %7683 = bitcast <4 x i64>* %7682 to <8 x i32>*
  %7684 = load <8 x i32>, <8 x i32>* %7683, align 32
  %7685 = shufflevector <8 x i32> %7681, <8 x i32> %7684, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %7686 = bitcast <8 x i32> %7685 to <4 x i64>
  %7687 = shufflevector <8 x i32> %7681, <8 x i32> %7684, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %7688 = bitcast <8 x i32> %7687 to <4 x i64>
  %7689 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 13
  %7690 = bitcast <4 x i64>* %7689 to <8 x i32>*
  %7691 = load <8 x i32>, <8 x i32>* %7690, align 32
  %7692 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 15
  %7693 = bitcast <4 x i64>* %7692 to <8 x i32>*
  %7694 = load <8 x i32>, <8 x i32>* %7693, align 32
  %7695 = shufflevector <8 x i32> %7691, <8 x i32> %7694, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %7696 = bitcast <8 x i32> %7695 to <4 x i64>
  %7697 = shufflevector <8 x i32> %7691, <8 x i32> %7694, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %7698 = bitcast <8 x i32> %7697 to <4 x i64>
  %7699 = shufflevector <4 x i64> %7666, <4 x i64> %7676, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %7700 = shufflevector <4 x i64> %7686, <4 x i64> %7696, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %7701 = bitcast <4 x i64> %7699 to <8 x i32>
  %7702 = bitcast <4 x i64> %7700 to <8 x i32>
  %7703 = shufflevector <8 x i32> %7701, <8 x i32> %7702, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %7704 = bitcast <4 x i64>* %7659 to <8 x i32>*
  store <8 x i32> %7703, <8 x i32>* %7704, align 32
  %7705 = shufflevector <8 x i32> %7701, <8 x i32> %7702, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %7706 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 24
  %7707 = bitcast <4 x i64>* %7706 to <8 x i32>*
  store <8 x i32> %7705, <8 x i32>* %7707, align 32
  %7708 = shufflevector <4 x i64> %7666, <4 x i64> %7676, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %7709 = shufflevector <4 x i64> %7686, <4 x i64> %7696, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %7710 = bitcast <4 x i64> %7708 to <8 x i32>
  %7711 = bitcast <4 x i64> %7709 to <8 x i32>
  %7712 = shufflevector <8 x i32> %7710, <8 x i32> %7711, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %7713 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 18
  %7714 = bitcast <4 x i64>* %7713 to <8 x i32>*
  store <8 x i32> %7712, <8 x i32>* %7714, align 32
  %7715 = shufflevector <8 x i32> %7710, <8 x i32> %7711, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %7716 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 26
  %7717 = bitcast <4 x i64>* %7716 to <8 x i32>*
  store <8 x i32> %7715, <8 x i32>* %7717, align 32
  %7718 = shufflevector <4 x i64> %7668, <4 x i64> %7678, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %7719 = shufflevector <4 x i64> %7688, <4 x i64> %7698, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %7720 = bitcast <4 x i64> %7718 to <8 x i32>
  %7721 = bitcast <4 x i64> %7719 to <8 x i32>
  %7722 = shufflevector <8 x i32> %7720, <8 x i32> %7721, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %7723 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 20
  %7724 = bitcast <4 x i64>* %7723 to <8 x i32>*
  store <8 x i32> %7722, <8 x i32>* %7724, align 32
  %7725 = shufflevector <8 x i32> %7720, <8 x i32> %7721, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %7726 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 28
  %7727 = bitcast <4 x i64>* %7726 to <8 x i32>*
  store <8 x i32> %7725, <8 x i32>* %7727, align 32
  %7728 = shufflevector <4 x i64> %7668, <4 x i64> %7678, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %7729 = shufflevector <4 x i64> %7688, <4 x i64> %7698, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %7730 = bitcast <4 x i64> %7728 to <8 x i32>
  %7731 = bitcast <4 x i64> %7729 to <8 x i32>
  %7732 = shufflevector <8 x i32> %7730, <8 x i32> %7731, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %7733 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 22
  %7734 = bitcast <4 x i64>* %7733 to <8 x i32>*
  store <8 x i32> %7732, <8 x i32>* %7734, align 32
  %7735 = shufflevector <8 x i32> %7730, <8 x i32> %7731, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %7736 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 30
  %7737 = bitcast <4 x i64>* %7736 to <8 x i32>*
  store <8 x i32> %7735, <8 x i32>* %7737, align 32
  %7738 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 16
  %7739 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 1
  %7740 = bitcast <4 x i64>* %7738 to <8 x i32>*
  %7741 = load <8 x i32>, <8 x i32>* %7740, align 32
  %7742 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 18
  %7743 = bitcast <4 x i64>* %7742 to <8 x i32>*
  %7744 = load <8 x i32>, <8 x i32>* %7743, align 32
  %7745 = shufflevector <8 x i32> %7741, <8 x i32> %7744, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %7746 = bitcast <8 x i32> %7745 to <4 x i64>
  %7747 = shufflevector <8 x i32> %7741, <8 x i32> %7744, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %7748 = bitcast <8 x i32> %7747 to <4 x i64>
  %7749 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 20
  %7750 = bitcast <4 x i64>* %7749 to <8 x i32>*
  %7751 = load <8 x i32>, <8 x i32>* %7750, align 32
  %7752 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 22
  %7753 = bitcast <4 x i64>* %7752 to <8 x i32>*
  %7754 = load <8 x i32>, <8 x i32>* %7753, align 32
  %7755 = shufflevector <8 x i32> %7751, <8 x i32> %7754, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %7756 = bitcast <8 x i32> %7755 to <4 x i64>
  %7757 = shufflevector <8 x i32> %7751, <8 x i32> %7754, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %7758 = bitcast <8 x i32> %7757 to <4 x i64>
  %7759 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 24
  %7760 = bitcast <4 x i64>* %7759 to <8 x i32>*
  %7761 = load <8 x i32>, <8 x i32>* %7760, align 32
  %7762 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 26
  %7763 = bitcast <4 x i64>* %7762 to <8 x i32>*
  %7764 = load <8 x i32>, <8 x i32>* %7763, align 32
  %7765 = shufflevector <8 x i32> %7761, <8 x i32> %7764, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %7766 = bitcast <8 x i32> %7765 to <4 x i64>
  %7767 = shufflevector <8 x i32> %7761, <8 x i32> %7764, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %7768 = bitcast <8 x i32> %7767 to <4 x i64>
  %7769 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 28
  %7770 = bitcast <4 x i64>* %7769 to <8 x i32>*
  %7771 = load <8 x i32>, <8 x i32>* %7770, align 32
  %7772 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 30
  %7773 = bitcast <4 x i64>* %7772 to <8 x i32>*
  %7774 = load <8 x i32>, <8 x i32>* %7773, align 32
  %7775 = shufflevector <8 x i32> %7771, <8 x i32> %7774, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %7776 = bitcast <8 x i32> %7775 to <4 x i64>
  %7777 = shufflevector <8 x i32> %7771, <8 x i32> %7774, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %7778 = bitcast <8 x i32> %7777 to <4 x i64>
  %7779 = shufflevector <4 x i64> %7746, <4 x i64> %7756, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %7780 = shufflevector <4 x i64> %7766, <4 x i64> %7776, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %7781 = bitcast <4 x i64> %7779 to <8 x i32>
  %7782 = bitcast <4 x i64> %7780 to <8 x i32>
  %7783 = shufflevector <8 x i32> %7781, <8 x i32> %7782, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %7784 = bitcast <4 x i64>* %7739 to <8 x i32>*
  store <8 x i32> %7783, <8 x i32>* %7784, align 32
  %7785 = shufflevector <8 x i32> %7781, <8 x i32> %7782, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %7786 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 9
  %7787 = bitcast <4 x i64>* %7786 to <8 x i32>*
  store <8 x i32> %7785, <8 x i32>* %7787, align 32
  %7788 = shufflevector <4 x i64> %7746, <4 x i64> %7756, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %7789 = shufflevector <4 x i64> %7766, <4 x i64> %7776, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %7790 = bitcast <4 x i64> %7788 to <8 x i32>
  %7791 = bitcast <4 x i64> %7789 to <8 x i32>
  %7792 = shufflevector <8 x i32> %7790, <8 x i32> %7791, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %7793 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 3
  %7794 = bitcast <4 x i64>* %7793 to <8 x i32>*
  store <8 x i32> %7792, <8 x i32>* %7794, align 32
  %7795 = shufflevector <8 x i32> %7790, <8 x i32> %7791, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %7796 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 11
  %7797 = bitcast <4 x i64>* %7796 to <8 x i32>*
  store <8 x i32> %7795, <8 x i32>* %7797, align 32
  %7798 = shufflevector <4 x i64> %7748, <4 x i64> %7758, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %7799 = shufflevector <4 x i64> %7768, <4 x i64> %7778, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %7800 = bitcast <4 x i64> %7798 to <8 x i32>
  %7801 = bitcast <4 x i64> %7799 to <8 x i32>
  %7802 = shufflevector <8 x i32> %7800, <8 x i32> %7801, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %7803 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 5
  %7804 = bitcast <4 x i64>* %7803 to <8 x i32>*
  store <8 x i32> %7802, <8 x i32>* %7804, align 32
  %7805 = shufflevector <8 x i32> %7800, <8 x i32> %7801, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %7806 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 13
  %7807 = bitcast <4 x i64>* %7806 to <8 x i32>*
  store <8 x i32> %7805, <8 x i32>* %7807, align 32
  %7808 = shufflevector <4 x i64> %7748, <4 x i64> %7758, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %7809 = shufflevector <4 x i64> %7768, <4 x i64> %7778, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %7810 = bitcast <4 x i64> %7808 to <8 x i32>
  %7811 = bitcast <4 x i64> %7809 to <8 x i32>
  %7812 = shufflevector <8 x i32> %7810, <8 x i32> %7811, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %7813 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 7
  %7814 = bitcast <4 x i64>* %7813 to <8 x i32>*
  store <8 x i32> %7812, <8 x i32>* %7814, align 32
  %7815 = shufflevector <8 x i32> %7810, <8 x i32> %7811, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %7816 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 15
  %7817 = bitcast <4 x i64>* %7816 to <8 x i32>*
  store <8 x i32> %7815, <8 x i32>* %7817, align 32
  %7818 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 17
  %7819 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 17
  %7820 = bitcast <4 x i64>* %7818 to <8 x i32>*
  %7821 = load <8 x i32>, <8 x i32>* %7820, align 32
  %7822 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 19
  %7823 = bitcast <4 x i64>* %7822 to <8 x i32>*
  %7824 = load <8 x i32>, <8 x i32>* %7823, align 32
  %7825 = shufflevector <8 x i32> %7821, <8 x i32> %7824, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %7826 = bitcast <8 x i32> %7825 to <4 x i64>
  %7827 = shufflevector <8 x i32> %7821, <8 x i32> %7824, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %7828 = bitcast <8 x i32> %7827 to <4 x i64>
  %7829 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 21
  %7830 = bitcast <4 x i64>* %7829 to <8 x i32>*
  %7831 = load <8 x i32>, <8 x i32>* %7830, align 32
  %7832 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 23
  %7833 = bitcast <4 x i64>* %7832 to <8 x i32>*
  %7834 = load <8 x i32>, <8 x i32>* %7833, align 32
  %7835 = shufflevector <8 x i32> %7831, <8 x i32> %7834, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %7836 = bitcast <8 x i32> %7835 to <4 x i64>
  %7837 = shufflevector <8 x i32> %7831, <8 x i32> %7834, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %7838 = bitcast <8 x i32> %7837 to <4 x i64>
  %7839 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 25
  %7840 = bitcast <4 x i64>* %7839 to <8 x i32>*
  %7841 = load <8 x i32>, <8 x i32>* %7840, align 32
  %7842 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 27
  %7843 = bitcast <4 x i64>* %7842 to <8 x i32>*
  %7844 = load <8 x i32>, <8 x i32>* %7843, align 32
  %7845 = shufflevector <8 x i32> %7841, <8 x i32> %7844, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %7846 = bitcast <8 x i32> %7845 to <4 x i64>
  %7847 = shufflevector <8 x i32> %7841, <8 x i32> %7844, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %7848 = bitcast <8 x i32> %7847 to <4 x i64>
  %7849 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 29
  %7850 = bitcast <4 x i64>* %7849 to <8 x i32>*
  %7851 = load <8 x i32>, <8 x i32>* %7850, align 32
  %7852 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 31
  %7853 = bitcast <4 x i64>* %7852 to <8 x i32>*
  %7854 = load <8 x i32>, <8 x i32>* %7853, align 32
  %7855 = shufflevector <8 x i32> %7851, <8 x i32> %7854, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %7856 = bitcast <8 x i32> %7855 to <4 x i64>
  %7857 = shufflevector <8 x i32> %7851, <8 x i32> %7854, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %7858 = bitcast <8 x i32> %7857 to <4 x i64>
  %7859 = shufflevector <4 x i64> %7826, <4 x i64> %7836, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %7860 = shufflevector <4 x i64> %7846, <4 x i64> %7856, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %7861 = bitcast <4 x i64> %7859 to <8 x i32>
  %7862 = bitcast <4 x i64> %7860 to <8 x i32>
  %7863 = shufflevector <8 x i32> %7861, <8 x i32> %7862, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %7864 = bitcast <4 x i64>* %7819 to <8 x i32>*
  store <8 x i32> %7863, <8 x i32>* %7864, align 32
  %7865 = shufflevector <8 x i32> %7861, <8 x i32> %7862, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %7866 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 25
  %7867 = bitcast <4 x i64>* %7866 to <8 x i32>*
  store <8 x i32> %7865, <8 x i32>* %7867, align 32
  %7868 = shufflevector <4 x i64> %7826, <4 x i64> %7836, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %7869 = shufflevector <4 x i64> %7846, <4 x i64> %7856, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %7870 = bitcast <4 x i64> %7868 to <8 x i32>
  %7871 = bitcast <4 x i64> %7869 to <8 x i32>
  %7872 = shufflevector <8 x i32> %7870, <8 x i32> %7871, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %7873 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 19
  %7874 = bitcast <4 x i64>* %7873 to <8 x i32>*
  store <8 x i32> %7872, <8 x i32>* %7874, align 32
  %7875 = shufflevector <8 x i32> %7870, <8 x i32> %7871, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %7876 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 27
  %7877 = bitcast <4 x i64>* %7876 to <8 x i32>*
  store <8 x i32> %7875, <8 x i32>* %7877, align 32
  %7878 = shufflevector <4 x i64> %7828, <4 x i64> %7838, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %7879 = shufflevector <4 x i64> %7848, <4 x i64> %7858, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %7880 = bitcast <4 x i64> %7878 to <8 x i32>
  %7881 = bitcast <4 x i64> %7879 to <8 x i32>
  %7882 = shufflevector <8 x i32> %7880, <8 x i32> %7881, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %7883 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 21
  %7884 = bitcast <4 x i64>* %7883 to <8 x i32>*
  store <8 x i32> %7882, <8 x i32>* %7884, align 32
  %7885 = shufflevector <8 x i32> %7880, <8 x i32> %7881, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %7886 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 29
  %7887 = bitcast <4 x i64>* %7886 to <8 x i32>*
  store <8 x i32> %7885, <8 x i32>* %7887, align 32
  %7888 = shufflevector <4 x i64> %7828, <4 x i64> %7838, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %7889 = shufflevector <4 x i64> %7848, <4 x i64> %7858, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %7890 = bitcast <4 x i64> %7888 to <8 x i32>
  %7891 = bitcast <4 x i64> %7889 to <8 x i32>
  %7892 = shufflevector <8 x i32> %7890, <8 x i32> %7891, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %7893 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 23
  %7894 = bitcast <4 x i64>* %7893 to <8 x i32>*
  store <8 x i32> %7892, <8 x i32>* %7894, align 32
  %7895 = shufflevector <8 x i32> %7890, <8 x i32> %7891, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %7896 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 31
  %7897 = bitcast <4 x i64>* %7896 to <8 x i32>*
  store <8 x i32> %7895, <8 x i32>* %7897, align 32
  %7898 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 2, i64 2), align 2
  call void @fdct16_avx2(<4 x i64>* nonnull %7401, <4 x i64>* nonnull %7516, i8 signext %7898, i32 2, i32 2)
  %7899 = load <8 x i32>, <8 x i32>* %7580, align 32
  %7900 = load <8 x i32>, <8 x i32>* %7583, align 32
  %7901 = shufflevector <8 x i32> %7899, <8 x i32> %7900, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %7902 = bitcast <8 x i32> %7901 to <4 x i64>
  %7903 = shufflevector <8 x i32> %7899, <8 x i32> %7900, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %7904 = bitcast <8 x i32> %7903 to <4 x i64>
  %7905 = load <8 x i32>, <8 x i32>* %7590, align 32
  %7906 = load <8 x i32>, <8 x i32>* %7593, align 32
  %7907 = shufflevector <8 x i32> %7905, <8 x i32> %7906, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %7908 = bitcast <8 x i32> %7907 to <4 x i64>
  %7909 = shufflevector <8 x i32> %7905, <8 x i32> %7906, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %7910 = bitcast <8 x i32> %7909 to <4 x i64>
  %7911 = load <8 x i32>, <8 x i32>* %7600, align 32
  %7912 = load <8 x i32>, <8 x i32>* %7603, align 32
  %7913 = shufflevector <8 x i32> %7911, <8 x i32> %7912, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %7914 = bitcast <8 x i32> %7913 to <4 x i64>
  %7915 = shufflevector <8 x i32> %7911, <8 x i32> %7912, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %7916 = bitcast <8 x i32> %7915 to <4 x i64>
  %7917 = load <8 x i32>, <8 x i32>* %7610, align 32
  %7918 = load <8 x i32>, <8 x i32>* %7613, align 32
  %7919 = shufflevector <8 x i32> %7917, <8 x i32> %7918, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %7920 = bitcast <8 x i32> %7919 to <4 x i64>
  %7921 = shufflevector <8 x i32> %7917, <8 x i32> %7918, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %7922 = bitcast <8 x i32> %7921 to <4 x i64>
  %7923 = shufflevector <4 x i64> %7902, <4 x i64> %7908, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %7924 = shufflevector <4 x i64> %7914, <4 x i64> %7920, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %7925 = bitcast <4 x i64> %7923 to <8 x i32>
  %7926 = bitcast <4 x i64> %7924 to <8 x i32>
  %7927 = shufflevector <8 x i32> %7925, <8 x i32> %7926, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %7927, <8 x i32>* %7624, align 32
  %7928 = shufflevector <8 x i32> %7925, <8 x i32> %7926, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %7928, <8 x i32>* %7627, align 32
  %7929 = shufflevector <4 x i64> %7902, <4 x i64> %7908, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %7930 = shufflevector <4 x i64> %7914, <4 x i64> %7920, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %7931 = bitcast <4 x i64> %7929 to <8 x i32>
  %7932 = bitcast <4 x i64> %7930 to <8 x i32>
  %7933 = shufflevector <8 x i32> %7931, <8 x i32> %7932, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %7933, <8 x i32>* %7634, align 32
  %7934 = shufflevector <8 x i32> %7931, <8 x i32> %7932, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %7934, <8 x i32>* %7637, align 32
  %7935 = shufflevector <4 x i64> %7904, <4 x i64> %7910, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %7936 = shufflevector <4 x i64> %7916, <4 x i64> %7922, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %7937 = bitcast <4 x i64> %7935 to <8 x i32>
  %7938 = bitcast <4 x i64> %7936 to <8 x i32>
  %7939 = shufflevector <8 x i32> %7937, <8 x i32> %7938, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %7939, <8 x i32>* %7644, align 32
  %7940 = shufflevector <8 x i32> %7937, <8 x i32> %7938, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %7940, <8 x i32>* %7647, align 32
  %7941 = shufflevector <4 x i64> %7904, <4 x i64> %7910, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %7942 = shufflevector <4 x i64> %7916, <4 x i64> %7922, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %7943 = bitcast <4 x i64> %7941 to <8 x i32>
  %7944 = bitcast <4 x i64> %7942 to <8 x i32>
  %7945 = shufflevector <8 x i32> %7943, <8 x i32> %7944, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %7945, <8 x i32>* %7654, align 32
  %7946 = shufflevector <8 x i32> %7943, <8 x i32> %7944, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %7946, <8 x i32>* %7657, align 32
  %7947 = load <8 x i32>, <8 x i32>* %7660, align 32
  %7948 = load <8 x i32>, <8 x i32>* %7663, align 32
  %7949 = shufflevector <8 x i32> %7947, <8 x i32> %7948, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %7950 = bitcast <8 x i32> %7949 to <4 x i64>
  %7951 = shufflevector <8 x i32> %7947, <8 x i32> %7948, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %7952 = bitcast <8 x i32> %7951 to <4 x i64>
  %7953 = load <8 x i32>, <8 x i32>* %7670, align 32
  %7954 = load <8 x i32>, <8 x i32>* %7673, align 32
  %7955 = shufflevector <8 x i32> %7953, <8 x i32> %7954, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %7956 = bitcast <8 x i32> %7955 to <4 x i64>
  %7957 = shufflevector <8 x i32> %7953, <8 x i32> %7954, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %7958 = bitcast <8 x i32> %7957 to <4 x i64>
  %7959 = load <8 x i32>, <8 x i32>* %7680, align 32
  %7960 = load <8 x i32>, <8 x i32>* %7683, align 32
  %7961 = shufflevector <8 x i32> %7959, <8 x i32> %7960, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %7962 = bitcast <8 x i32> %7961 to <4 x i64>
  %7963 = shufflevector <8 x i32> %7959, <8 x i32> %7960, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %7964 = bitcast <8 x i32> %7963 to <4 x i64>
  %7965 = load <8 x i32>, <8 x i32>* %7690, align 32
  %7966 = load <8 x i32>, <8 x i32>* %7693, align 32
  %7967 = shufflevector <8 x i32> %7965, <8 x i32> %7966, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %7968 = bitcast <8 x i32> %7967 to <4 x i64>
  %7969 = shufflevector <8 x i32> %7965, <8 x i32> %7966, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %7970 = bitcast <8 x i32> %7969 to <4 x i64>
  %7971 = shufflevector <4 x i64> %7950, <4 x i64> %7956, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %7972 = shufflevector <4 x i64> %7962, <4 x i64> %7968, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %7973 = bitcast <4 x i64> %7971 to <8 x i32>
  %7974 = bitcast <4 x i64> %7972 to <8 x i32>
  %7975 = shufflevector <8 x i32> %7973, <8 x i32> %7974, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %7975, <8 x i32>* %7704, align 32
  %7976 = shufflevector <8 x i32> %7973, <8 x i32> %7974, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %7976, <8 x i32>* %7707, align 32
  %7977 = shufflevector <4 x i64> %7950, <4 x i64> %7956, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %7978 = shufflevector <4 x i64> %7962, <4 x i64> %7968, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %7979 = bitcast <4 x i64> %7977 to <8 x i32>
  %7980 = bitcast <4 x i64> %7978 to <8 x i32>
  %7981 = shufflevector <8 x i32> %7979, <8 x i32> %7980, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %7981, <8 x i32>* %7714, align 32
  %7982 = shufflevector <8 x i32> %7979, <8 x i32> %7980, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %7982, <8 x i32>* %7717, align 32
  %7983 = shufflevector <4 x i64> %7952, <4 x i64> %7958, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %7984 = shufflevector <4 x i64> %7964, <4 x i64> %7970, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %7985 = bitcast <4 x i64> %7983 to <8 x i32>
  %7986 = bitcast <4 x i64> %7984 to <8 x i32>
  %7987 = shufflevector <8 x i32> %7985, <8 x i32> %7986, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %7987, <8 x i32>* %7724, align 32
  %7988 = shufflevector <8 x i32> %7985, <8 x i32> %7986, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %7988, <8 x i32>* %7727, align 32
  %7989 = shufflevector <4 x i64> %7952, <4 x i64> %7958, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %7990 = shufflevector <4 x i64> %7964, <4 x i64> %7970, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %7991 = bitcast <4 x i64> %7989 to <8 x i32>
  %7992 = bitcast <4 x i64> %7990 to <8 x i32>
  %7993 = shufflevector <8 x i32> %7991, <8 x i32> %7992, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %7993, <8 x i32>* %7734, align 32
  %7994 = shufflevector <8 x i32> %7991, <8 x i32> %7992, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %7994, <8 x i32>* %7737, align 32
  %7995 = load <8 x i32>, <8 x i32>* %7740, align 32
  %7996 = load <8 x i32>, <8 x i32>* %7743, align 32
  %7997 = shufflevector <8 x i32> %7995, <8 x i32> %7996, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %7998 = bitcast <8 x i32> %7997 to <4 x i64>
  %7999 = shufflevector <8 x i32> %7995, <8 x i32> %7996, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %8000 = bitcast <8 x i32> %7999 to <4 x i64>
  %8001 = load <8 x i32>, <8 x i32>* %7750, align 32
  %8002 = load <8 x i32>, <8 x i32>* %7753, align 32
  %8003 = shufflevector <8 x i32> %8001, <8 x i32> %8002, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %8004 = bitcast <8 x i32> %8003 to <4 x i64>
  %8005 = shufflevector <8 x i32> %8001, <8 x i32> %8002, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %8006 = bitcast <8 x i32> %8005 to <4 x i64>
  %8007 = load <8 x i32>, <8 x i32>* %7760, align 32
  %8008 = load <8 x i32>, <8 x i32>* %7763, align 32
  %8009 = shufflevector <8 x i32> %8007, <8 x i32> %8008, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %8010 = bitcast <8 x i32> %8009 to <4 x i64>
  %8011 = shufflevector <8 x i32> %8007, <8 x i32> %8008, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %8012 = bitcast <8 x i32> %8011 to <4 x i64>
  %8013 = load <8 x i32>, <8 x i32>* %7770, align 32
  %8014 = load <8 x i32>, <8 x i32>* %7773, align 32
  %8015 = shufflevector <8 x i32> %8013, <8 x i32> %8014, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %8016 = bitcast <8 x i32> %8015 to <4 x i64>
  %8017 = shufflevector <8 x i32> %8013, <8 x i32> %8014, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %8018 = bitcast <8 x i32> %8017 to <4 x i64>
  %8019 = shufflevector <4 x i64> %7998, <4 x i64> %8004, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %8020 = shufflevector <4 x i64> %8010, <4 x i64> %8016, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %8021 = bitcast <4 x i64> %8019 to <8 x i32>
  %8022 = bitcast <4 x i64> %8020 to <8 x i32>
  %8023 = shufflevector <8 x i32> %8021, <8 x i32> %8022, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %8023, <8 x i32>* %7784, align 32
  %8024 = shufflevector <8 x i32> %8021, <8 x i32> %8022, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %8024, <8 x i32>* %7787, align 32
  %8025 = shufflevector <4 x i64> %7998, <4 x i64> %8004, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %8026 = shufflevector <4 x i64> %8010, <4 x i64> %8016, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %8027 = bitcast <4 x i64> %8025 to <8 x i32>
  %8028 = bitcast <4 x i64> %8026 to <8 x i32>
  %8029 = shufflevector <8 x i32> %8027, <8 x i32> %8028, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %8029, <8 x i32>* %7794, align 32
  %8030 = shufflevector <8 x i32> %8027, <8 x i32> %8028, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %8030, <8 x i32>* %7797, align 32
  %8031 = shufflevector <4 x i64> %8000, <4 x i64> %8006, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %8032 = shufflevector <4 x i64> %8012, <4 x i64> %8018, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %8033 = bitcast <4 x i64> %8031 to <8 x i32>
  %8034 = bitcast <4 x i64> %8032 to <8 x i32>
  %8035 = shufflevector <8 x i32> %8033, <8 x i32> %8034, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %8035, <8 x i32>* %7804, align 32
  %8036 = shufflevector <8 x i32> %8033, <8 x i32> %8034, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %8036, <8 x i32>* %7807, align 32
  %8037 = shufflevector <4 x i64> %8000, <4 x i64> %8006, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %8038 = shufflevector <4 x i64> %8012, <4 x i64> %8018, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %8039 = bitcast <4 x i64> %8037 to <8 x i32>
  %8040 = bitcast <4 x i64> %8038 to <8 x i32>
  %8041 = shufflevector <8 x i32> %8039, <8 x i32> %8040, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %8041, <8 x i32>* %7814, align 32
  %8042 = shufflevector <8 x i32> %8039, <8 x i32> %8040, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %8042, <8 x i32>* %7817, align 32
  %8043 = load <8 x i32>, <8 x i32>* %7820, align 32
  %8044 = load <8 x i32>, <8 x i32>* %7823, align 32
  %8045 = shufflevector <8 x i32> %8043, <8 x i32> %8044, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %8046 = bitcast <8 x i32> %8045 to <4 x i64>
  %8047 = shufflevector <8 x i32> %8043, <8 x i32> %8044, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %8048 = bitcast <8 x i32> %8047 to <4 x i64>
  %8049 = load <8 x i32>, <8 x i32>* %7830, align 32
  %8050 = load <8 x i32>, <8 x i32>* %7833, align 32
  %8051 = shufflevector <8 x i32> %8049, <8 x i32> %8050, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %8052 = bitcast <8 x i32> %8051 to <4 x i64>
  %8053 = shufflevector <8 x i32> %8049, <8 x i32> %8050, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %8054 = bitcast <8 x i32> %8053 to <4 x i64>
  %8055 = load <8 x i32>, <8 x i32>* %7840, align 32
  %8056 = load <8 x i32>, <8 x i32>* %7843, align 32
  %8057 = shufflevector <8 x i32> %8055, <8 x i32> %8056, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %8058 = bitcast <8 x i32> %8057 to <4 x i64>
  %8059 = shufflevector <8 x i32> %8055, <8 x i32> %8056, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %8060 = bitcast <8 x i32> %8059 to <4 x i64>
  %8061 = load <8 x i32>, <8 x i32>* %7850, align 32
  %8062 = load <8 x i32>, <8 x i32>* %7853, align 32
  %8063 = shufflevector <8 x i32> %8061, <8 x i32> %8062, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %8064 = bitcast <8 x i32> %8063 to <4 x i64>
  %8065 = shufflevector <8 x i32> %8061, <8 x i32> %8062, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %8066 = bitcast <8 x i32> %8065 to <4 x i64>
  %8067 = shufflevector <4 x i64> %8046, <4 x i64> %8052, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %8068 = shufflevector <4 x i64> %8058, <4 x i64> %8064, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %8069 = bitcast <4 x i64> %8067 to <8 x i32>
  %8070 = bitcast <4 x i64> %8068 to <8 x i32>
  %8071 = shufflevector <8 x i32> %8069, <8 x i32> %8070, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %8071, <8 x i32>* %7864, align 32
  %8072 = shufflevector <8 x i32> %8069, <8 x i32> %8070, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %8072, <8 x i32>* %7867, align 32
  %8073 = shufflevector <4 x i64> %8046, <4 x i64> %8052, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %8074 = shufflevector <4 x i64> %8058, <4 x i64> %8064, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %8075 = bitcast <4 x i64> %8073 to <8 x i32>
  %8076 = bitcast <4 x i64> %8074 to <8 x i32>
  %8077 = shufflevector <8 x i32> %8075, <8 x i32> %8076, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %8077, <8 x i32>* %7874, align 32
  %8078 = shufflevector <8 x i32> %8075, <8 x i32> %8076, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %8078, <8 x i32>* %7877, align 32
  %8079 = shufflevector <4 x i64> %8048, <4 x i64> %8054, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %8080 = shufflevector <4 x i64> %8060, <4 x i64> %8066, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %8081 = bitcast <4 x i64> %8079 to <8 x i32>
  %8082 = bitcast <4 x i64> %8080 to <8 x i32>
  %8083 = shufflevector <8 x i32> %8081, <8 x i32> %8082, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %8083, <8 x i32>* %7884, align 32
  %8084 = shufflevector <8 x i32> %8081, <8 x i32> %8082, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %8084, <8 x i32>* %7887, align 32
  %8085 = shufflevector <4 x i64> %8048, <4 x i64> %8054, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %8086 = shufflevector <4 x i64> %8060, <4 x i64> %8066, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %8087 = bitcast <4 x i64> %8085 to <8 x i32>
  %8088 = bitcast <4 x i64> %8086 to <8 x i32>
  %8089 = shufflevector <8 x i32> %8087, <8 x i32> %8088, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %8089, <8 x i32>* %7894, align 32
  %8090 = shufflevector <8 x i32> %8087, <8 x i32> %8088, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %8090, <8 x i32>* %7897, align 32
  br label %10159

8091:                                             ; preds = %5
  %8092 = bitcast [64 x <4 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %8092) #7
  %8093 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 16
  %8094 = bitcast <4 x i64>* %8093 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %8094, i8 -86, i64 1536, i1 false) #7
  %8095 = sext i32 %2 to i64
  %8096 = bitcast i16* %0 to <4 x i64>*
  %8097 = load <4 x i64>, <4 x i64>* %8096, align 1
  %8098 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 0
  store <4 x i64> %8097, <4 x i64>* %8098, align 32
  %8099 = getelementptr inbounds i16, i16* %0, i64 %8095
  %8100 = bitcast i16* %8099 to <4 x i64>*
  %8101 = load <4 x i64>, <4 x i64>* %8100, align 1
  %8102 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 1
  store <4 x i64> %8101, <4 x i64>* %8102, align 32
  %8103 = shl nsw i64 %8095, 1
  %8104 = getelementptr inbounds i16, i16* %0, i64 %8103
  %8105 = bitcast i16* %8104 to <4 x i64>*
  %8106 = load <4 x i64>, <4 x i64>* %8105, align 1
  %8107 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 2
  store <4 x i64> %8106, <4 x i64>* %8107, align 32
  %8108 = mul nsw i64 %8095, 3
  %8109 = getelementptr inbounds i16, i16* %0, i64 %8108
  %8110 = bitcast i16* %8109 to <4 x i64>*
  %8111 = load <4 x i64>, <4 x i64>* %8110, align 1
  %8112 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 3
  store <4 x i64> %8111, <4 x i64>* %8112, align 32
  %8113 = shl nsw i64 %8095, 2
  %8114 = getelementptr inbounds i16, i16* %0, i64 %8113
  %8115 = bitcast i16* %8114 to <4 x i64>*
  %8116 = load <4 x i64>, <4 x i64>* %8115, align 1
  %8117 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 4
  store <4 x i64> %8116, <4 x i64>* %8117, align 32
  %8118 = mul nsw i64 %8095, 5
  %8119 = getelementptr inbounds i16, i16* %0, i64 %8118
  %8120 = bitcast i16* %8119 to <4 x i64>*
  %8121 = load <4 x i64>, <4 x i64>* %8120, align 1
  %8122 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 5
  store <4 x i64> %8121, <4 x i64>* %8122, align 32
  %8123 = mul nsw i64 %8095, 6
  %8124 = getelementptr inbounds i16, i16* %0, i64 %8123
  %8125 = bitcast i16* %8124 to <4 x i64>*
  %8126 = load <4 x i64>, <4 x i64>* %8125, align 1
  %8127 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 6
  store <4 x i64> %8126, <4 x i64>* %8127, align 32
  %8128 = mul nsw i64 %8095, 7
  %8129 = getelementptr inbounds i16, i16* %0, i64 %8128
  %8130 = bitcast i16* %8129 to <4 x i64>*
  %8131 = load <4 x i64>, <4 x i64>* %8130, align 1
  %8132 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 7
  store <4 x i64> %8131, <4 x i64>* %8132, align 32
  %8133 = shl nsw i64 %8095, 3
  %8134 = getelementptr inbounds i16, i16* %0, i64 %8133
  %8135 = bitcast i16* %8134 to <4 x i64>*
  %8136 = load <4 x i64>, <4 x i64>* %8135, align 1
  %8137 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 8
  store <4 x i64> %8136, <4 x i64>* %8137, align 32
  %8138 = mul nsw i64 %8095, 9
  %8139 = getelementptr inbounds i16, i16* %0, i64 %8138
  %8140 = bitcast i16* %8139 to <4 x i64>*
  %8141 = load <4 x i64>, <4 x i64>* %8140, align 1
  %8142 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 9
  store <4 x i64> %8141, <4 x i64>* %8142, align 32
  %8143 = mul nsw i64 %8095, 10
  %8144 = getelementptr inbounds i16, i16* %0, i64 %8143
  %8145 = bitcast i16* %8144 to <4 x i64>*
  %8146 = load <4 x i64>, <4 x i64>* %8145, align 1
  %8147 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 10
  store <4 x i64> %8146, <4 x i64>* %8147, align 32
  %8148 = mul nsw i64 %8095, 11
  %8149 = getelementptr inbounds i16, i16* %0, i64 %8148
  %8150 = bitcast i16* %8149 to <4 x i64>*
  %8151 = load <4 x i64>, <4 x i64>* %8150, align 1
  %8152 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 11
  store <4 x i64> %8151, <4 x i64>* %8152, align 32
  %8153 = mul nsw i64 %8095, 12
  %8154 = getelementptr inbounds i16, i16* %0, i64 %8153
  %8155 = bitcast i16* %8154 to <4 x i64>*
  %8156 = load <4 x i64>, <4 x i64>* %8155, align 1
  %8157 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 12
  store <4 x i64> %8156, <4 x i64>* %8157, align 32
  %8158 = mul nsw i64 %8095, 13
  %8159 = getelementptr inbounds i16, i16* %0, i64 %8158
  %8160 = bitcast i16* %8159 to <4 x i64>*
  %8161 = load <4 x i64>, <4 x i64>* %8160, align 1
  %8162 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 13
  store <4 x i64> %8161, <4 x i64>* %8162, align 32
  %8163 = mul nsw i64 %8095, 14
  %8164 = getelementptr inbounds i16, i16* %0, i64 %8163
  %8165 = bitcast i16* %8164 to <4 x i64>*
  %8166 = load <4 x i64>, <4 x i64>* %8165, align 1
  %8167 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 14
  store <4 x i64> %8166, <4 x i64>* %8167, align 32
  %8168 = mul nsw i64 %8095, 15
  %8169 = getelementptr inbounds i16, i16* %0, i64 %8168
  %8170 = bitcast i16* %8169 to <4 x i64>*
  %8171 = load <4 x i64>, <4 x i64>* %8170, align 1
  %8172 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 15
  store <4 x i64> %8171, <4 x i64>* %8172, align 32
  %8173 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 0
  %8174 = shufflevector <4 x i64> %8097, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8175 = bitcast <2 x i64> %8174 to <8 x i16>
  %8176 = sext <8 x i16> %8175 to <8 x i32>
  %8177 = bitcast [32 x <4 x i64>]* %8 to <8 x i32>*
  store <8 x i32> %8176, <8 x i32>* %8177, align 32
  %8178 = bitcast <4 x i64> %8097 to <8 x i32>
  %8179 = shufflevector <8 x i32> %8178, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %8180 = bitcast <4 x i32> %8179 to <8 x i16>
  %8181 = sext <8 x i16> %8180 to <8 x i32>
  %8182 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 1
  %8183 = bitcast <4 x i64>* %8182 to <8 x i32>*
  store <8 x i32> %8181, <8 x i32>* %8183, align 32
  br label %8184

8184:                                             ; preds = %8091, %8184
  %8185 = phi i64 [ 1, %8091 ], [ %8201, %8184 ]
  %8186 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 %8185
  %8187 = load <4 x i64>, <4 x i64>* %8186, align 32
  %8188 = shufflevector <4 x i64> %8187, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8189 = bitcast <2 x i64> %8188 to <8 x i16>
  %8190 = sext <8 x i16> %8189 to <8 x i32>
  %8191 = shl nuw nsw i64 %8185, 1
  %8192 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %8191
  %8193 = bitcast <4 x i64>* %8192 to <8 x i32>*
  store <8 x i32> %8190, <8 x i32>* %8193, align 32
  %8194 = bitcast <4 x i64> %8187 to <8 x i32>
  %8195 = shufflevector <8 x i32> %8194, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %8196 = bitcast <4 x i32> %8195 to <8 x i16>
  %8197 = sext <8 x i16> %8196 to <8 x i32>
  %8198 = or i64 %8191, 1
  %8199 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %8198
  %8200 = bitcast <4 x i64>* %8199 to <8 x i32>*
  store <8 x i32> %8197, <8 x i32>* %8200, align 32
  %8201 = add nuw nsw i64 %8185, 1
  %8202 = icmp eq i64 %8201, 16
  br i1 %8202, label %8203, label %8184

8203:                                             ; preds = %8184
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %8092) #7
  %8204 = load i8, i8* %12, align 1
  %8205 = sext i8 %8204 to i32
  %8206 = icmp slt i8 %8204, 0
  br i1 %8206, label %8207, label %8240

8207:                                             ; preds = %8203
  %8208 = sub nsw i32 0, %8205
  %8209 = xor i32 %8205, -1
  %8210 = shl i32 1, %8209
  %8211 = insertelement <8 x i32> undef, i32 %8210, i32 0
  %8212 = shufflevector <8 x i32> %8211, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %8213

8213:                                             ; preds = %8213, %8207
  %8214 = phi i64 [ 0, %8207 ], [ %8238, %8213 ]
  %8215 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %8214
  %8216 = bitcast <4 x i64>* %8215 to <8 x i32>*
  %8217 = load <8 x i32>, <8 x i32>* %8216, align 32
  %8218 = add <8 x i32> %8217, %8212
  %8219 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %8218, i32 %8208) #7
  store <8 x i32> %8219, <8 x i32>* %8216, align 32
  %8220 = or i64 %8214, 1
  %8221 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %8220
  %8222 = bitcast <4 x i64>* %8221 to <8 x i32>*
  %8223 = load <8 x i32>, <8 x i32>* %8222, align 32
  %8224 = add <8 x i32> %8223, %8212
  %8225 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %8224, i32 %8208) #7
  store <8 x i32> %8225, <8 x i32>* %8222, align 32
  %8226 = or i64 %8214, 2
  %8227 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %8226
  %8228 = bitcast <4 x i64>* %8227 to <8 x i32>*
  %8229 = load <8 x i32>, <8 x i32>* %8228, align 32
  %8230 = add <8 x i32> %8229, %8212
  %8231 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %8230, i32 %8208) #7
  store <8 x i32> %8231, <8 x i32>* %8228, align 32
  %8232 = or i64 %8214, 3
  %8233 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %8232
  %8234 = bitcast <4 x i64>* %8233 to <8 x i32>*
  %8235 = load <8 x i32>, <8 x i32>* %8234, align 32
  %8236 = add <8 x i32> %8235, %8212
  %8237 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %8236, i32 %8208) #7
  store <8 x i32> %8237, <8 x i32>* %8234, align 32
  %8238 = add nuw nsw i64 %8214, 4
  %8239 = icmp eq i64 %8238, 32
  br i1 %8239, label %8265, label %8213

8240:                                             ; preds = %8203
  %8241 = icmp eq i8 %8204, 0
  br i1 %8241, label %8265, label %8242

8242:                                             ; preds = %8240, %8242
  %8243 = phi i64 [ %8263, %8242 ], [ 0, %8240 ]
  %8244 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %8243
  %8245 = bitcast <4 x i64>* %8244 to <8 x i32>*
  %8246 = load <8 x i32>, <8 x i32>* %8245, align 32
  %8247 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %8246, i32 %8205) #7
  store <8 x i32> %8247, <8 x i32>* %8245, align 32
  %8248 = or i64 %8243, 1
  %8249 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %8248
  %8250 = bitcast <4 x i64>* %8249 to <8 x i32>*
  %8251 = load <8 x i32>, <8 x i32>* %8250, align 32
  %8252 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %8251, i32 %8205) #7
  store <8 x i32> %8252, <8 x i32>* %8250, align 32
  %8253 = or i64 %8243, 2
  %8254 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %8253
  %8255 = bitcast <4 x i64>* %8254 to <8 x i32>*
  %8256 = load <8 x i32>, <8 x i32>* %8255, align 32
  %8257 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %8256, i32 %8205) #7
  store <8 x i32> %8257, <8 x i32>* %8255, align 32
  %8258 = or i64 %8243, 3
  %8259 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %8258
  %8260 = bitcast <4 x i64>* %8259 to <8 x i32>*
  %8261 = load <8 x i32>, <8 x i32>* %8260, align 32
  %8262 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %8261, i32 %8205) #7
  store <8 x i32> %8262, <8 x i32>* %8260, align 32
  %8263 = add nuw nsw i64 %8243, 4
  %8264 = icmp eq i64 %8263, 32
  br i1 %8264, label %8265, label %8242

8265:                                             ; preds = %8242, %8213, %8240
  %8266 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 0
  %8267 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 2, i64 2), align 2
  call void @fadst16_avx2(<4 x i64>* nonnull %8173, <4 x i64>* nonnull %8266, i8 signext %8267, i32 2, i32 2)
  %8268 = getelementptr inbounds i8, i8* %12, i64 1
  %8269 = load i8, i8* %8268, align 1
  %8270 = sext i8 %8269 to i32
  %8271 = icmp slt i8 %8269, 0
  br i1 %8271, label %8272, label %8305

8272:                                             ; preds = %8265
  %8273 = sub nsw i32 0, %8270
  %8274 = xor i32 %8270, -1
  %8275 = shl i32 1, %8274
  %8276 = insertelement <8 x i32> undef, i32 %8275, i32 0
  %8277 = shufflevector <8 x i32> %8276, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %8278

8278:                                             ; preds = %8278, %8272
  %8279 = phi i64 [ 0, %8272 ], [ %8303, %8278 ]
  %8280 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %8279
  %8281 = bitcast <4 x i64>* %8280 to <8 x i32>*
  %8282 = load <8 x i32>, <8 x i32>* %8281, align 32
  %8283 = add <8 x i32> %8282, %8277
  %8284 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %8283, i32 %8273) #7
  store <8 x i32> %8284, <8 x i32>* %8281, align 32
  %8285 = or i64 %8279, 1
  %8286 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %8285
  %8287 = bitcast <4 x i64>* %8286 to <8 x i32>*
  %8288 = load <8 x i32>, <8 x i32>* %8287, align 32
  %8289 = add <8 x i32> %8288, %8277
  %8290 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %8289, i32 %8273) #7
  store <8 x i32> %8290, <8 x i32>* %8287, align 32
  %8291 = or i64 %8279, 2
  %8292 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %8291
  %8293 = bitcast <4 x i64>* %8292 to <8 x i32>*
  %8294 = load <8 x i32>, <8 x i32>* %8293, align 32
  %8295 = add <8 x i32> %8294, %8277
  %8296 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %8295, i32 %8273) #7
  store <8 x i32> %8296, <8 x i32>* %8293, align 32
  %8297 = or i64 %8279, 3
  %8298 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %8297
  %8299 = bitcast <4 x i64>* %8298 to <8 x i32>*
  %8300 = load <8 x i32>, <8 x i32>* %8299, align 32
  %8301 = add <8 x i32> %8300, %8277
  %8302 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %8301, i32 %8273) #7
  store <8 x i32> %8302, <8 x i32>* %8299, align 32
  %8303 = add nuw nsw i64 %8279, 4
  %8304 = icmp eq i64 %8303, 32
  br i1 %8304, label %8330, label %8278

8305:                                             ; preds = %8265
  %8306 = icmp eq i8 %8269, 0
  br i1 %8306, label %8330, label %8307

8307:                                             ; preds = %8305, %8307
  %8308 = phi i64 [ %8328, %8307 ], [ 0, %8305 ]
  %8309 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %8308
  %8310 = bitcast <4 x i64>* %8309 to <8 x i32>*
  %8311 = load <8 x i32>, <8 x i32>* %8310, align 32
  %8312 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %8311, i32 %8270) #7
  store <8 x i32> %8312, <8 x i32>* %8310, align 32
  %8313 = or i64 %8308, 1
  %8314 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %8313
  %8315 = bitcast <4 x i64>* %8314 to <8 x i32>*
  %8316 = load <8 x i32>, <8 x i32>* %8315, align 32
  %8317 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %8316, i32 %8270) #7
  store <8 x i32> %8317, <8 x i32>* %8315, align 32
  %8318 = or i64 %8308, 2
  %8319 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %8318
  %8320 = bitcast <4 x i64>* %8319 to <8 x i32>*
  %8321 = load <8 x i32>, <8 x i32>* %8320, align 32
  %8322 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %8321, i32 %8270) #7
  store <8 x i32> %8322, <8 x i32>* %8320, align 32
  %8323 = or i64 %8308, 3
  %8324 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %8323
  %8325 = bitcast <4 x i64>* %8324 to <8 x i32>*
  %8326 = load <8 x i32>, <8 x i32>* %8325, align 32
  %8327 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %8326, i32 %8270) #7
  store <8 x i32> %8327, <8 x i32>* %8325, align 32
  %8328 = add nuw nsw i64 %8308, 4
  %8329 = icmp eq i64 %8328, 32
  br i1 %8329, label %8330, label %8307

8330:                                             ; preds = %8307, %8278, %8305
  br label %8331

8331:                                             ; preds = %8331, %8330
  %8332 = phi i64 [ 0, %8330 ], [ %8350, %8331 ]
  %8333 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %8332
  %8334 = bitcast <4 x i64>* %8333 to <8 x i32>*
  %8335 = load <8 x i32>, <8 x i32>* %8334, align 32
  %8336 = mul <8 x i32> %8335, <i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586>
  %8337 = add <8 x i32> %8336, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %8338 = ashr <8 x i32> %8337, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %8339 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %8332
  %8340 = bitcast <4 x i64>* %8339 to <8 x i32>*
  store <8 x i32> %8338, <8 x i32>* %8340, align 32
  %8341 = or i64 %8332, 1
  %8342 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %8341
  %8343 = bitcast <4 x i64>* %8342 to <8 x i32>*
  %8344 = load <8 x i32>, <8 x i32>* %8343, align 32
  %8345 = mul <8 x i32> %8344, <i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586>
  %8346 = add <8 x i32> %8345, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %8347 = ashr <8 x i32> %8346, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %8348 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %8341
  %8349 = bitcast <4 x i64>* %8348 to <8 x i32>*
  store <8 x i32> %8347, <8 x i32>* %8349, align 32
  %8350 = add nuw nsw i64 %8332, 2
  %8351 = icmp eq i64 %8350, 32
  br i1 %8351, label %10159, label %8331

8352:                                             ; preds = %5
  %8353 = bitcast [64 x <4 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %8353) #7
  %8354 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 16
  %8355 = bitcast <4 x i64>* %8354 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %8355, i8 -86, i64 1536, i1 false) #7
  %8356 = sext i32 %2 to i64
  %8357 = bitcast i16* %0 to <4 x i64>*
  %8358 = load <4 x i64>, <4 x i64>* %8357, align 1
  %8359 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 0
  store <4 x i64> %8358, <4 x i64>* %8359, align 32
  %8360 = getelementptr inbounds i16, i16* %0, i64 %8356
  %8361 = bitcast i16* %8360 to <4 x i64>*
  %8362 = load <4 x i64>, <4 x i64>* %8361, align 1
  %8363 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 1
  store <4 x i64> %8362, <4 x i64>* %8363, align 32
  %8364 = shl nsw i64 %8356, 1
  %8365 = getelementptr inbounds i16, i16* %0, i64 %8364
  %8366 = bitcast i16* %8365 to <4 x i64>*
  %8367 = load <4 x i64>, <4 x i64>* %8366, align 1
  %8368 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 2
  store <4 x i64> %8367, <4 x i64>* %8368, align 32
  %8369 = mul nsw i64 %8356, 3
  %8370 = getelementptr inbounds i16, i16* %0, i64 %8369
  %8371 = bitcast i16* %8370 to <4 x i64>*
  %8372 = load <4 x i64>, <4 x i64>* %8371, align 1
  %8373 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 3
  store <4 x i64> %8372, <4 x i64>* %8373, align 32
  %8374 = shl nsw i64 %8356, 2
  %8375 = getelementptr inbounds i16, i16* %0, i64 %8374
  %8376 = bitcast i16* %8375 to <4 x i64>*
  %8377 = load <4 x i64>, <4 x i64>* %8376, align 1
  %8378 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 4
  store <4 x i64> %8377, <4 x i64>* %8378, align 32
  %8379 = mul nsw i64 %8356, 5
  %8380 = getelementptr inbounds i16, i16* %0, i64 %8379
  %8381 = bitcast i16* %8380 to <4 x i64>*
  %8382 = load <4 x i64>, <4 x i64>* %8381, align 1
  %8383 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 5
  store <4 x i64> %8382, <4 x i64>* %8383, align 32
  %8384 = mul nsw i64 %8356, 6
  %8385 = getelementptr inbounds i16, i16* %0, i64 %8384
  %8386 = bitcast i16* %8385 to <4 x i64>*
  %8387 = load <4 x i64>, <4 x i64>* %8386, align 1
  %8388 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 6
  store <4 x i64> %8387, <4 x i64>* %8388, align 32
  %8389 = mul nsw i64 %8356, 7
  %8390 = getelementptr inbounds i16, i16* %0, i64 %8389
  %8391 = bitcast i16* %8390 to <4 x i64>*
  %8392 = load <4 x i64>, <4 x i64>* %8391, align 1
  %8393 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 7
  store <4 x i64> %8392, <4 x i64>* %8393, align 32
  %8394 = shl nsw i64 %8356, 3
  %8395 = getelementptr inbounds i16, i16* %0, i64 %8394
  %8396 = bitcast i16* %8395 to <4 x i64>*
  %8397 = load <4 x i64>, <4 x i64>* %8396, align 1
  %8398 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 8
  store <4 x i64> %8397, <4 x i64>* %8398, align 32
  %8399 = mul nsw i64 %8356, 9
  %8400 = getelementptr inbounds i16, i16* %0, i64 %8399
  %8401 = bitcast i16* %8400 to <4 x i64>*
  %8402 = load <4 x i64>, <4 x i64>* %8401, align 1
  %8403 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 9
  store <4 x i64> %8402, <4 x i64>* %8403, align 32
  %8404 = mul nsw i64 %8356, 10
  %8405 = getelementptr inbounds i16, i16* %0, i64 %8404
  %8406 = bitcast i16* %8405 to <4 x i64>*
  %8407 = load <4 x i64>, <4 x i64>* %8406, align 1
  %8408 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 10
  store <4 x i64> %8407, <4 x i64>* %8408, align 32
  %8409 = mul nsw i64 %8356, 11
  %8410 = getelementptr inbounds i16, i16* %0, i64 %8409
  %8411 = bitcast i16* %8410 to <4 x i64>*
  %8412 = load <4 x i64>, <4 x i64>* %8411, align 1
  %8413 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 11
  store <4 x i64> %8412, <4 x i64>* %8413, align 32
  %8414 = mul nsw i64 %8356, 12
  %8415 = getelementptr inbounds i16, i16* %0, i64 %8414
  %8416 = bitcast i16* %8415 to <4 x i64>*
  %8417 = load <4 x i64>, <4 x i64>* %8416, align 1
  %8418 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 12
  store <4 x i64> %8417, <4 x i64>* %8418, align 32
  %8419 = mul nsw i64 %8356, 13
  %8420 = getelementptr inbounds i16, i16* %0, i64 %8419
  %8421 = bitcast i16* %8420 to <4 x i64>*
  %8422 = load <4 x i64>, <4 x i64>* %8421, align 1
  %8423 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 13
  store <4 x i64> %8422, <4 x i64>* %8423, align 32
  %8424 = mul nsw i64 %8356, 14
  %8425 = getelementptr inbounds i16, i16* %0, i64 %8424
  %8426 = bitcast i16* %8425 to <4 x i64>*
  %8427 = load <4 x i64>, <4 x i64>* %8426, align 1
  %8428 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 14
  store <4 x i64> %8427, <4 x i64>* %8428, align 32
  %8429 = mul nsw i64 %8356, 15
  %8430 = getelementptr inbounds i16, i16* %0, i64 %8429
  %8431 = bitcast i16* %8430 to <4 x i64>*
  %8432 = load <4 x i64>, <4 x i64>* %8431, align 1
  %8433 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 15
  store <4 x i64> %8432, <4 x i64>* %8433, align 32
  %8434 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 0
  %8435 = shufflevector <4 x i64> %8358, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8436 = bitcast <2 x i64> %8435 to <8 x i16>
  %8437 = sext <8 x i16> %8436 to <8 x i32>
  %8438 = bitcast [32 x <4 x i64>]* %8 to <8 x i32>*
  store <8 x i32> %8437, <8 x i32>* %8438, align 32
  %8439 = bitcast <4 x i64> %8358 to <8 x i32>
  %8440 = shufflevector <8 x i32> %8439, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %8441 = bitcast <4 x i32> %8440 to <8 x i16>
  %8442 = sext <8 x i16> %8441 to <8 x i32>
  %8443 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 1
  %8444 = bitcast <4 x i64>* %8443 to <8 x i32>*
  store <8 x i32> %8442, <8 x i32>* %8444, align 32
  br label %8445

8445:                                             ; preds = %8352, %8445
  %8446 = phi i64 [ 1, %8352 ], [ %8462, %8445 ]
  %8447 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 %8446
  %8448 = load <4 x i64>, <4 x i64>* %8447, align 32
  %8449 = shufflevector <4 x i64> %8448, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8450 = bitcast <2 x i64> %8449 to <8 x i16>
  %8451 = sext <8 x i16> %8450 to <8 x i32>
  %8452 = shl nuw nsw i64 %8446, 1
  %8453 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %8452
  %8454 = bitcast <4 x i64>* %8453 to <8 x i32>*
  store <8 x i32> %8451, <8 x i32>* %8454, align 32
  %8455 = bitcast <4 x i64> %8448 to <8 x i32>
  %8456 = shufflevector <8 x i32> %8455, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %8457 = bitcast <4 x i32> %8456 to <8 x i16>
  %8458 = sext <8 x i16> %8457 to <8 x i32>
  %8459 = or i64 %8452, 1
  %8460 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %8459
  %8461 = bitcast <4 x i64>* %8460 to <8 x i32>*
  store <8 x i32> %8458, <8 x i32>* %8461, align 32
  %8462 = add nuw nsw i64 %8446, 1
  %8463 = icmp eq i64 %8462, 16
  br i1 %8463, label %8464, label %8445

8464:                                             ; preds = %8445
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %8353) #7
  %8465 = load i8, i8* %12, align 1
  %8466 = sext i8 %8465 to i32
  %8467 = icmp slt i8 %8465, 0
  br i1 %8467, label %8468, label %8501

8468:                                             ; preds = %8464
  %8469 = sub nsw i32 0, %8466
  %8470 = xor i32 %8466, -1
  %8471 = shl i32 1, %8470
  %8472 = insertelement <8 x i32> undef, i32 %8471, i32 0
  %8473 = shufflevector <8 x i32> %8472, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %8474

8474:                                             ; preds = %8474, %8468
  %8475 = phi i64 [ 0, %8468 ], [ %8499, %8474 ]
  %8476 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %8475
  %8477 = bitcast <4 x i64>* %8476 to <8 x i32>*
  %8478 = load <8 x i32>, <8 x i32>* %8477, align 32
  %8479 = add <8 x i32> %8478, %8473
  %8480 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %8479, i32 %8469) #7
  store <8 x i32> %8480, <8 x i32>* %8477, align 32
  %8481 = or i64 %8475, 1
  %8482 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %8481
  %8483 = bitcast <4 x i64>* %8482 to <8 x i32>*
  %8484 = load <8 x i32>, <8 x i32>* %8483, align 32
  %8485 = add <8 x i32> %8484, %8473
  %8486 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %8485, i32 %8469) #7
  store <8 x i32> %8486, <8 x i32>* %8483, align 32
  %8487 = or i64 %8475, 2
  %8488 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %8487
  %8489 = bitcast <4 x i64>* %8488 to <8 x i32>*
  %8490 = load <8 x i32>, <8 x i32>* %8489, align 32
  %8491 = add <8 x i32> %8490, %8473
  %8492 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %8491, i32 %8469) #7
  store <8 x i32> %8492, <8 x i32>* %8489, align 32
  %8493 = or i64 %8475, 3
  %8494 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %8493
  %8495 = bitcast <4 x i64>* %8494 to <8 x i32>*
  %8496 = load <8 x i32>, <8 x i32>* %8495, align 32
  %8497 = add <8 x i32> %8496, %8473
  %8498 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %8497, i32 %8469) #7
  store <8 x i32> %8498, <8 x i32>* %8495, align 32
  %8499 = add nuw nsw i64 %8475, 4
  %8500 = icmp eq i64 %8499, 32
  br i1 %8500, label %8526, label %8474

8501:                                             ; preds = %8464
  %8502 = icmp eq i8 %8465, 0
  br i1 %8502, label %8526, label %8503

8503:                                             ; preds = %8501, %8503
  %8504 = phi i64 [ %8524, %8503 ], [ 0, %8501 ]
  %8505 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %8504
  %8506 = bitcast <4 x i64>* %8505 to <8 x i32>*
  %8507 = load <8 x i32>, <8 x i32>* %8506, align 32
  %8508 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %8507, i32 %8466) #7
  store <8 x i32> %8508, <8 x i32>* %8506, align 32
  %8509 = or i64 %8504, 1
  %8510 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %8509
  %8511 = bitcast <4 x i64>* %8510 to <8 x i32>*
  %8512 = load <8 x i32>, <8 x i32>* %8511, align 32
  %8513 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %8512, i32 %8466) #7
  store <8 x i32> %8513, <8 x i32>* %8511, align 32
  %8514 = or i64 %8504, 2
  %8515 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %8514
  %8516 = bitcast <4 x i64>* %8515 to <8 x i32>*
  %8517 = load <8 x i32>, <8 x i32>* %8516, align 32
  %8518 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %8517, i32 %8466) #7
  store <8 x i32> %8518, <8 x i32>* %8516, align 32
  %8519 = or i64 %8504, 3
  %8520 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %8519
  %8521 = bitcast <4 x i64>* %8520 to <8 x i32>*
  %8522 = load <8 x i32>, <8 x i32>* %8521, align 32
  %8523 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %8522, i32 %8466) #7
  store <8 x i32> %8523, <8 x i32>* %8521, align 32
  %8524 = add nuw nsw i64 %8504, 4
  %8525 = icmp eq i64 %8524, 32
  br i1 %8525, label %8526, label %8503

8526:                                             ; preds = %8503, %8474, %8501
  br label %8527

8527:                                             ; preds = %8527, %8526
  %8528 = phi i64 [ 0, %8526 ], [ %8546, %8527 ]
  %8529 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %8528
  %8530 = bitcast <4 x i64>* %8529 to <8 x i32>*
  %8531 = load <8 x i32>, <8 x i32>* %8530, align 32
  %8532 = mul <8 x i32> %8531, <i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586>
  %8533 = add <8 x i32> %8532, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %8534 = ashr <8 x i32> %8533, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %8535 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %8528
  %8536 = bitcast <4 x i64>* %8535 to <8 x i32>*
  store <8 x i32> %8534, <8 x i32>* %8536, align 32
  %8537 = or i64 %8528, 1
  %8538 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %8537
  %8539 = bitcast <4 x i64>* %8538 to <8 x i32>*
  %8540 = load <8 x i32>, <8 x i32>* %8539, align 32
  %8541 = mul <8 x i32> %8540, <i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586>
  %8542 = add <8 x i32> %8541, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %8543 = ashr <8 x i32> %8542, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %8544 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %8537
  %8545 = bitcast <4 x i64>* %8544 to <8 x i32>*
  store <8 x i32> %8543, <8 x i32>* %8545, align 32
  %8546 = add nuw nsw i64 %8528, 2
  %8547 = icmp eq i64 %8546, 32
  br i1 %8547, label %8548, label %8527

8548:                                             ; preds = %8527
  %8549 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 0
  %8550 = getelementptr inbounds i8, i8* %12, i64 1
  %8551 = load i8, i8* %8550, align 1
  %8552 = sext i8 %8551 to i32
  %8553 = icmp slt i8 %8551, 0
  br i1 %8553, label %8554, label %8587

8554:                                             ; preds = %8548
  %8555 = sub nsw i32 0, %8552
  %8556 = xor i32 %8552, -1
  %8557 = shl i32 1, %8556
  %8558 = insertelement <8 x i32> undef, i32 %8557, i32 0
  %8559 = shufflevector <8 x i32> %8558, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %8560

8560:                                             ; preds = %8560, %8554
  %8561 = phi i64 [ 0, %8554 ], [ %8585, %8560 ]
  %8562 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %8561
  %8563 = bitcast <4 x i64>* %8562 to <8 x i32>*
  %8564 = load <8 x i32>, <8 x i32>* %8563, align 32
  %8565 = add <8 x i32> %8564, %8559
  %8566 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %8565, i32 %8555) #7
  store <8 x i32> %8566, <8 x i32>* %8563, align 32
  %8567 = or i64 %8561, 1
  %8568 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %8567
  %8569 = bitcast <4 x i64>* %8568 to <8 x i32>*
  %8570 = load <8 x i32>, <8 x i32>* %8569, align 32
  %8571 = add <8 x i32> %8570, %8559
  %8572 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %8571, i32 %8555) #7
  store <8 x i32> %8572, <8 x i32>* %8569, align 32
  %8573 = or i64 %8561, 2
  %8574 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %8573
  %8575 = bitcast <4 x i64>* %8574 to <8 x i32>*
  %8576 = load <8 x i32>, <8 x i32>* %8575, align 32
  %8577 = add <8 x i32> %8576, %8559
  %8578 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %8577, i32 %8555) #7
  store <8 x i32> %8578, <8 x i32>* %8575, align 32
  %8579 = or i64 %8561, 3
  %8580 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %8579
  %8581 = bitcast <4 x i64>* %8580 to <8 x i32>*
  %8582 = load <8 x i32>, <8 x i32>* %8581, align 32
  %8583 = add <8 x i32> %8582, %8559
  %8584 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %8583, i32 %8555) #7
  store <8 x i32> %8584, <8 x i32>* %8581, align 32
  %8585 = add nuw nsw i64 %8561, 4
  %8586 = icmp eq i64 %8585, 32
  br i1 %8586, label %8612, label %8560

8587:                                             ; preds = %8548
  %8588 = icmp eq i8 %8551, 0
  br i1 %8588, label %8612, label %8589

8589:                                             ; preds = %8587, %8589
  %8590 = phi i64 [ %8610, %8589 ], [ 0, %8587 ]
  %8591 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %8590
  %8592 = bitcast <4 x i64>* %8591 to <8 x i32>*
  %8593 = load <8 x i32>, <8 x i32>* %8592, align 32
  %8594 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %8593, i32 %8552) #7
  store <8 x i32> %8594, <8 x i32>* %8592, align 32
  %8595 = or i64 %8590, 1
  %8596 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %8595
  %8597 = bitcast <4 x i64>* %8596 to <8 x i32>*
  %8598 = load <8 x i32>, <8 x i32>* %8597, align 32
  %8599 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %8598, i32 %8552) #7
  store <8 x i32> %8599, <8 x i32>* %8597, align 32
  %8600 = or i64 %8590, 2
  %8601 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %8600
  %8602 = bitcast <4 x i64>* %8601 to <8 x i32>*
  %8603 = load <8 x i32>, <8 x i32>* %8602, align 32
  %8604 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %8603, i32 %8552) #7
  store <8 x i32> %8604, <8 x i32>* %8602, align 32
  %8605 = or i64 %8590, 3
  %8606 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %8605
  %8607 = bitcast <4 x i64>* %8606 to <8 x i32>*
  %8608 = load <8 x i32>, <8 x i32>* %8607, align 32
  %8609 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %8608, i32 %8552) #7
  store <8 x i32> %8609, <8 x i32>* %8607, align 32
  %8610 = add nuw nsw i64 %8590, 4
  %8611 = icmp eq i64 %8610, 32
  br i1 %8611, label %8612, label %8589

8612:                                             ; preds = %8589, %8560, %8587
  %8613 = bitcast [32 x <4 x i64>]* %10 to <8 x i32>*
  %8614 = load <8 x i32>, <8 x i32>* %8613, align 32
  %8615 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 2
  %8616 = bitcast <4 x i64>* %8615 to <8 x i32>*
  %8617 = load <8 x i32>, <8 x i32>* %8616, align 32
  %8618 = shufflevector <8 x i32> %8614, <8 x i32> %8617, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %8619 = bitcast <8 x i32> %8618 to <4 x i64>
  %8620 = shufflevector <8 x i32> %8614, <8 x i32> %8617, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %8621 = bitcast <8 x i32> %8620 to <4 x i64>
  %8622 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 4
  %8623 = bitcast <4 x i64>* %8622 to <8 x i32>*
  %8624 = load <8 x i32>, <8 x i32>* %8623, align 32
  %8625 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 6
  %8626 = bitcast <4 x i64>* %8625 to <8 x i32>*
  %8627 = load <8 x i32>, <8 x i32>* %8626, align 32
  %8628 = shufflevector <8 x i32> %8624, <8 x i32> %8627, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %8629 = bitcast <8 x i32> %8628 to <4 x i64>
  %8630 = shufflevector <8 x i32> %8624, <8 x i32> %8627, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %8631 = bitcast <8 x i32> %8630 to <4 x i64>
  %8632 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 8
  %8633 = bitcast <4 x i64>* %8632 to <8 x i32>*
  %8634 = load <8 x i32>, <8 x i32>* %8633, align 32
  %8635 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 10
  %8636 = bitcast <4 x i64>* %8635 to <8 x i32>*
  %8637 = load <8 x i32>, <8 x i32>* %8636, align 32
  %8638 = shufflevector <8 x i32> %8634, <8 x i32> %8637, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %8639 = bitcast <8 x i32> %8638 to <4 x i64>
  %8640 = shufflevector <8 x i32> %8634, <8 x i32> %8637, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %8641 = bitcast <8 x i32> %8640 to <4 x i64>
  %8642 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 12
  %8643 = bitcast <4 x i64>* %8642 to <8 x i32>*
  %8644 = load <8 x i32>, <8 x i32>* %8643, align 32
  %8645 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 14
  %8646 = bitcast <4 x i64>* %8645 to <8 x i32>*
  %8647 = load <8 x i32>, <8 x i32>* %8646, align 32
  %8648 = shufflevector <8 x i32> %8644, <8 x i32> %8647, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %8649 = bitcast <8 x i32> %8648 to <4 x i64>
  %8650 = shufflevector <8 x i32> %8644, <8 x i32> %8647, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %8651 = bitcast <8 x i32> %8650 to <4 x i64>
  %8652 = shufflevector <4 x i64> %8619, <4 x i64> %8629, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %8653 = shufflevector <4 x i64> %8639, <4 x i64> %8649, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %8654 = bitcast <4 x i64> %8652 to <8 x i32>
  %8655 = bitcast <4 x i64> %8653 to <8 x i32>
  %8656 = shufflevector <8 x i32> %8654, <8 x i32> %8655, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %8657 = bitcast [32 x <4 x i64>]* %8 to <8 x i32>*
  store <8 x i32> %8656, <8 x i32>* %8657, align 32
  %8658 = shufflevector <8 x i32> %8654, <8 x i32> %8655, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %8659 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 8
  %8660 = bitcast <4 x i64>* %8659 to <8 x i32>*
  store <8 x i32> %8658, <8 x i32>* %8660, align 32
  %8661 = shufflevector <4 x i64> %8619, <4 x i64> %8629, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %8662 = shufflevector <4 x i64> %8639, <4 x i64> %8649, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %8663 = bitcast <4 x i64> %8661 to <8 x i32>
  %8664 = bitcast <4 x i64> %8662 to <8 x i32>
  %8665 = shufflevector <8 x i32> %8663, <8 x i32> %8664, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %8666 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 2
  %8667 = bitcast <4 x i64>* %8666 to <8 x i32>*
  store <8 x i32> %8665, <8 x i32>* %8667, align 32
  %8668 = shufflevector <8 x i32> %8663, <8 x i32> %8664, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %8669 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 10
  %8670 = bitcast <4 x i64>* %8669 to <8 x i32>*
  store <8 x i32> %8668, <8 x i32>* %8670, align 32
  %8671 = shufflevector <4 x i64> %8621, <4 x i64> %8631, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %8672 = shufflevector <4 x i64> %8641, <4 x i64> %8651, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %8673 = bitcast <4 x i64> %8671 to <8 x i32>
  %8674 = bitcast <4 x i64> %8672 to <8 x i32>
  %8675 = shufflevector <8 x i32> %8673, <8 x i32> %8674, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %8676 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 4
  %8677 = bitcast <4 x i64>* %8676 to <8 x i32>*
  store <8 x i32> %8675, <8 x i32>* %8677, align 32
  %8678 = shufflevector <8 x i32> %8673, <8 x i32> %8674, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %8679 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 12
  %8680 = bitcast <4 x i64>* %8679 to <8 x i32>*
  store <8 x i32> %8678, <8 x i32>* %8680, align 32
  %8681 = shufflevector <4 x i64> %8621, <4 x i64> %8631, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %8682 = shufflevector <4 x i64> %8641, <4 x i64> %8651, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %8683 = bitcast <4 x i64> %8681 to <8 x i32>
  %8684 = bitcast <4 x i64> %8682 to <8 x i32>
  %8685 = shufflevector <8 x i32> %8683, <8 x i32> %8684, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %8686 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 6
  %8687 = bitcast <4 x i64>* %8686 to <8 x i32>*
  store <8 x i32> %8685, <8 x i32>* %8687, align 32
  %8688 = shufflevector <8 x i32> %8683, <8 x i32> %8684, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %8689 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 14
  %8690 = bitcast <4 x i64>* %8689 to <8 x i32>*
  store <8 x i32> %8688, <8 x i32>* %8690, align 32
  %8691 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 1
  %8692 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 16
  %8693 = bitcast <4 x i64>* %8691 to <8 x i32>*
  %8694 = load <8 x i32>, <8 x i32>* %8693, align 32
  %8695 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 3
  %8696 = bitcast <4 x i64>* %8695 to <8 x i32>*
  %8697 = load <8 x i32>, <8 x i32>* %8696, align 32
  %8698 = shufflevector <8 x i32> %8694, <8 x i32> %8697, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %8699 = bitcast <8 x i32> %8698 to <4 x i64>
  %8700 = shufflevector <8 x i32> %8694, <8 x i32> %8697, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %8701 = bitcast <8 x i32> %8700 to <4 x i64>
  %8702 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 5
  %8703 = bitcast <4 x i64>* %8702 to <8 x i32>*
  %8704 = load <8 x i32>, <8 x i32>* %8703, align 32
  %8705 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 7
  %8706 = bitcast <4 x i64>* %8705 to <8 x i32>*
  %8707 = load <8 x i32>, <8 x i32>* %8706, align 32
  %8708 = shufflevector <8 x i32> %8704, <8 x i32> %8707, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %8709 = bitcast <8 x i32> %8708 to <4 x i64>
  %8710 = shufflevector <8 x i32> %8704, <8 x i32> %8707, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %8711 = bitcast <8 x i32> %8710 to <4 x i64>
  %8712 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 9
  %8713 = bitcast <4 x i64>* %8712 to <8 x i32>*
  %8714 = load <8 x i32>, <8 x i32>* %8713, align 32
  %8715 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 11
  %8716 = bitcast <4 x i64>* %8715 to <8 x i32>*
  %8717 = load <8 x i32>, <8 x i32>* %8716, align 32
  %8718 = shufflevector <8 x i32> %8714, <8 x i32> %8717, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %8719 = bitcast <8 x i32> %8718 to <4 x i64>
  %8720 = shufflevector <8 x i32> %8714, <8 x i32> %8717, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %8721 = bitcast <8 x i32> %8720 to <4 x i64>
  %8722 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 13
  %8723 = bitcast <4 x i64>* %8722 to <8 x i32>*
  %8724 = load <8 x i32>, <8 x i32>* %8723, align 32
  %8725 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 15
  %8726 = bitcast <4 x i64>* %8725 to <8 x i32>*
  %8727 = load <8 x i32>, <8 x i32>* %8726, align 32
  %8728 = shufflevector <8 x i32> %8724, <8 x i32> %8727, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %8729 = bitcast <8 x i32> %8728 to <4 x i64>
  %8730 = shufflevector <8 x i32> %8724, <8 x i32> %8727, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %8731 = bitcast <8 x i32> %8730 to <4 x i64>
  %8732 = shufflevector <4 x i64> %8699, <4 x i64> %8709, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %8733 = shufflevector <4 x i64> %8719, <4 x i64> %8729, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %8734 = bitcast <4 x i64> %8732 to <8 x i32>
  %8735 = bitcast <4 x i64> %8733 to <8 x i32>
  %8736 = shufflevector <8 x i32> %8734, <8 x i32> %8735, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %8737 = bitcast <4 x i64>* %8692 to <8 x i32>*
  store <8 x i32> %8736, <8 x i32>* %8737, align 32
  %8738 = shufflevector <8 x i32> %8734, <8 x i32> %8735, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %8739 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 24
  %8740 = bitcast <4 x i64>* %8739 to <8 x i32>*
  store <8 x i32> %8738, <8 x i32>* %8740, align 32
  %8741 = shufflevector <4 x i64> %8699, <4 x i64> %8709, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %8742 = shufflevector <4 x i64> %8719, <4 x i64> %8729, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %8743 = bitcast <4 x i64> %8741 to <8 x i32>
  %8744 = bitcast <4 x i64> %8742 to <8 x i32>
  %8745 = shufflevector <8 x i32> %8743, <8 x i32> %8744, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %8746 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 18
  %8747 = bitcast <4 x i64>* %8746 to <8 x i32>*
  store <8 x i32> %8745, <8 x i32>* %8747, align 32
  %8748 = shufflevector <8 x i32> %8743, <8 x i32> %8744, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %8749 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 26
  %8750 = bitcast <4 x i64>* %8749 to <8 x i32>*
  store <8 x i32> %8748, <8 x i32>* %8750, align 32
  %8751 = shufflevector <4 x i64> %8701, <4 x i64> %8711, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %8752 = shufflevector <4 x i64> %8721, <4 x i64> %8731, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %8753 = bitcast <4 x i64> %8751 to <8 x i32>
  %8754 = bitcast <4 x i64> %8752 to <8 x i32>
  %8755 = shufflevector <8 x i32> %8753, <8 x i32> %8754, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %8756 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 20
  %8757 = bitcast <4 x i64>* %8756 to <8 x i32>*
  store <8 x i32> %8755, <8 x i32>* %8757, align 32
  %8758 = shufflevector <8 x i32> %8753, <8 x i32> %8754, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %8759 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 28
  %8760 = bitcast <4 x i64>* %8759 to <8 x i32>*
  store <8 x i32> %8758, <8 x i32>* %8760, align 32
  %8761 = shufflevector <4 x i64> %8701, <4 x i64> %8711, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %8762 = shufflevector <4 x i64> %8721, <4 x i64> %8731, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %8763 = bitcast <4 x i64> %8761 to <8 x i32>
  %8764 = bitcast <4 x i64> %8762 to <8 x i32>
  %8765 = shufflevector <8 x i32> %8763, <8 x i32> %8764, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %8766 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 22
  %8767 = bitcast <4 x i64>* %8766 to <8 x i32>*
  store <8 x i32> %8765, <8 x i32>* %8767, align 32
  %8768 = shufflevector <8 x i32> %8763, <8 x i32> %8764, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %8769 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 30
  %8770 = bitcast <4 x i64>* %8769 to <8 x i32>*
  store <8 x i32> %8768, <8 x i32>* %8770, align 32
  %8771 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 16
  %8772 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 1
  %8773 = bitcast <4 x i64>* %8771 to <8 x i32>*
  %8774 = load <8 x i32>, <8 x i32>* %8773, align 32
  %8775 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 18
  %8776 = bitcast <4 x i64>* %8775 to <8 x i32>*
  %8777 = load <8 x i32>, <8 x i32>* %8776, align 32
  %8778 = shufflevector <8 x i32> %8774, <8 x i32> %8777, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %8779 = bitcast <8 x i32> %8778 to <4 x i64>
  %8780 = shufflevector <8 x i32> %8774, <8 x i32> %8777, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %8781 = bitcast <8 x i32> %8780 to <4 x i64>
  %8782 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 20
  %8783 = bitcast <4 x i64>* %8782 to <8 x i32>*
  %8784 = load <8 x i32>, <8 x i32>* %8783, align 32
  %8785 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 22
  %8786 = bitcast <4 x i64>* %8785 to <8 x i32>*
  %8787 = load <8 x i32>, <8 x i32>* %8786, align 32
  %8788 = shufflevector <8 x i32> %8784, <8 x i32> %8787, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %8789 = bitcast <8 x i32> %8788 to <4 x i64>
  %8790 = shufflevector <8 x i32> %8784, <8 x i32> %8787, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %8791 = bitcast <8 x i32> %8790 to <4 x i64>
  %8792 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 24
  %8793 = bitcast <4 x i64>* %8792 to <8 x i32>*
  %8794 = load <8 x i32>, <8 x i32>* %8793, align 32
  %8795 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 26
  %8796 = bitcast <4 x i64>* %8795 to <8 x i32>*
  %8797 = load <8 x i32>, <8 x i32>* %8796, align 32
  %8798 = shufflevector <8 x i32> %8794, <8 x i32> %8797, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %8799 = bitcast <8 x i32> %8798 to <4 x i64>
  %8800 = shufflevector <8 x i32> %8794, <8 x i32> %8797, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %8801 = bitcast <8 x i32> %8800 to <4 x i64>
  %8802 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 28
  %8803 = bitcast <4 x i64>* %8802 to <8 x i32>*
  %8804 = load <8 x i32>, <8 x i32>* %8803, align 32
  %8805 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 30
  %8806 = bitcast <4 x i64>* %8805 to <8 x i32>*
  %8807 = load <8 x i32>, <8 x i32>* %8806, align 32
  %8808 = shufflevector <8 x i32> %8804, <8 x i32> %8807, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %8809 = bitcast <8 x i32> %8808 to <4 x i64>
  %8810 = shufflevector <8 x i32> %8804, <8 x i32> %8807, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %8811 = bitcast <8 x i32> %8810 to <4 x i64>
  %8812 = shufflevector <4 x i64> %8779, <4 x i64> %8789, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %8813 = shufflevector <4 x i64> %8799, <4 x i64> %8809, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %8814 = bitcast <4 x i64> %8812 to <8 x i32>
  %8815 = bitcast <4 x i64> %8813 to <8 x i32>
  %8816 = shufflevector <8 x i32> %8814, <8 x i32> %8815, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %8817 = bitcast <4 x i64>* %8772 to <8 x i32>*
  store <8 x i32> %8816, <8 x i32>* %8817, align 32
  %8818 = shufflevector <8 x i32> %8814, <8 x i32> %8815, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %8819 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 9
  %8820 = bitcast <4 x i64>* %8819 to <8 x i32>*
  store <8 x i32> %8818, <8 x i32>* %8820, align 32
  %8821 = shufflevector <4 x i64> %8779, <4 x i64> %8789, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %8822 = shufflevector <4 x i64> %8799, <4 x i64> %8809, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %8823 = bitcast <4 x i64> %8821 to <8 x i32>
  %8824 = bitcast <4 x i64> %8822 to <8 x i32>
  %8825 = shufflevector <8 x i32> %8823, <8 x i32> %8824, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %8826 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 3
  %8827 = bitcast <4 x i64>* %8826 to <8 x i32>*
  store <8 x i32> %8825, <8 x i32>* %8827, align 32
  %8828 = shufflevector <8 x i32> %8823, <8 x i32> %8824, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %8829 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 11
  %8830 = bitcast <4 x i64>* %8829 to <8 x i32>*
  store <8 x i32> %8828, <8 x i32>* %8830, align 32
  %8831 = shufflevector <4 x i64> %8781, <4 x i64> %8791, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %8832 = shufflevector <4 x i64> %8801, <4 x i64> %8811, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %8833 = bitcast <4 x i64> %8831 to <8 x i32>
  %8834 = bitcast <4 x i64> %8832 to <8 x i32>
  %8835 = shufflevector <8 x i32> %8833, <8 x i32> %8834, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %8836 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 5
  %8837 = bitcast <4 x i64>* %8836 to <8 x i32>*
  store <8 x i32> %8835, <8 x i32>* %8837, align 32
  %8838 = shufflevector <8 x i32> %8833, <8 x i32> %8834, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %8839 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 13
  %8840 = bitcast <4 x i64>* %8839 to <8 x i32>*
  store <8 x i32> %8838, <8 x i32>* %8840, align 32
  %8841 = shufflevector <4 x i64> %8781, <4 x i64> %8791, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %8842 = shufflevector <4 x i64> %8801, <4 x i64> %8811, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %8843 = bitcast <4 x i64> %8841 to <8 x i32>
  %8844 = bitcast <4 x i64> %8842 to <8 x i32>
  %8845 = shufflevector <8 x i32> %8843, <8 x i32> %8844, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %8846 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 7
  %8847 = bitcast <4 x i64>* %8846 to <8 x i32>*
  store <8 x i32> %8845, <8 x i32>* %8847, align 32
  %8848 = shufflevector <8 x i32> %8843, <8 x i32> %8844, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %8849 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 15
  %8850 = bitcast <4 x i64>* %8849 to <8 x i32>*
  store <8 x i32> %8848, <8 x i32>* %8850, align 32
  %8851 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 17
  %8852 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 17
  %8853 = bitcast <4 x i64>* %8851 to <8 x i32>*
  %8854 = load <8 x i32>, <8 x i32>* %8853, align 32
  %8855 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 19
  %8856 = bitcast <4 x i64>* %8855 to <8 x i32>*
  %8857 = load <8 x i32>, <8 x i32>* %8856, align 32
  %8858 = shufflevector <8 x i32> %8854, <8 x i32> %8857, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %8859 = bitcast <8 x i32> %8858 to <4 x i64>
  %8860 = shufflevector <8 x i32> %8854, <8 x i32> %8857, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %8861 = bitcast <8 x i32> %8860 to <4 x i64>
  %8862 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 21
  %8863 = bitcast <4 x i64>* %8862 to <8 x i32>*
  %8864 = load <8 x i32>, <8 x i32>* %8863, align 32
  %8865 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 23
  %8866 = bitcast <4 x i64>* %8865 to <8 x i32>*
  %8867 = load <8 x i32>, <8 x i32>* %8866, align 32
  %8868 = shufflevector <8 x i32> %8864, <8 x i32> %8867, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %8869 = bitcast <8 x i32> %8868 to <4 x i64>
  %8870 = shufflevector <8 x i32> %8864, <8 x i32> %8867, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %8871 = bitcast <8 x i32> %8870 to <4 x i64>
  %8872 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 25
  %8873 = bitcast <4 x i64>* %8872 to <8 x i32>*
  %8874 = load <8 x i32>, <8 x i32>* %8873, align 32
  %8875 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 27
  %8876 = bitcast <4 x i64>* %8875 to <8 x i32>*
  %8877 = load <8 x i32>, <8 x i32>* %8876, align 32
  %8878 = shufflevector <8 x i32> %8874, <8 x i32> %8877, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %8879 = bitcast <8 x i32> %8878 to <4 x i64>
  %8880 = shufflevector <8 x i32> %8874, <8 x i32> %8877, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %8881 = bitcast <8 x i32> %8880 to <4 x i64>
  %8882 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 29
  %8883 = bitcast <4 x i64>* %8882 to <8 x i32>*
  %8884 = load <8 x i32>, <8 x i32>* %8883, align 32
  %8885 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 31
  %8886 = bitcast <4 x i64>* %8885 to <8 x i32>*
  %8887 = load <8 x i32>, <8 x i32>* %8886, align 32
  %8888 = shufflevector <8 x i32> %8884, <8 x i32> %8887, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %8889 = bitcast <8 x i32> %8888 to <4 x i64>
  %8890 = shufflevector <8 x i32> %8884, <8 x i32> %8887, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %8891 = bitcast <8 x i32> %8890 to <4 x i64>
  %8892 = shufflevector <4 x i64> %8859, <4 x i64> %8869, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %8893 = shufflevector <4 x i64> %8879, <4 x i64> %8889, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %8894 = bitcast <4 x i64> %8892 to <8 x i32>
  %8895 = bitcast <4 x i64> %8893 to <8 x i32>
  %8896 = shufflevector <8 x i32> %8894, <8 x i32> %8895, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %8897 = bitcast <4 x i64>* %8852 to <8 x i32>*
  store <8 x i32> %8896, <8 x i32>* %8897, align 32
  %8898 = shufflevector <8 x i32> %8894, <8 x i32> %8895, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %8899 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 25
  %8900 = bitcast <4 x i64>* %8899 to <8 x i32>*
  store <8 x i32> %8898, <8 x i32>* %8900, align 32
  %8901 = shufflevector <4 x i64> %8859, <4 x i64> %8869, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %8902 = shufflevector <4 x i64> %8879, <4 x i64> %8889, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %8903 = bitcast <4 x i64> %8901 to <8 x i32>
  %8904 = bitcast <4 x i64> %8902 to <8 x i32>
  %8905 = shufflevector <8 x i32> %8903, <8 x i32> %8904, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %8906 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 19
  %8907 = bitcast <4 x i64>* %8906 to <8 x i32>*
  store <8 x i32> %8905, <8 x i32>* %8907, align 32
  %8908 = shufflevector <8 x i32> %8903, <8 x i32> %8904, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %8909 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 27
  %8910 = bitcast <4 x i64>* %8909 to <8 x i32>*
  store <8 x i32> %8908, <8 x i32>* %8910, align 32
  %8911 = shufflevector <4 x i64> %8861, <4 x i64> %8871, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %8912 = shufflevector <4 x i64> %8881, <4 x i64> %8891, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %8913 = bitcast <4 x i64> %8911 to <8 x i32>
  %8914 = bitcast <4 x i64> %8912 to <8 x i32>
  %8915 = shufflevector <8 x i32> %8913, <8 x i32> %8914, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %8916 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 21
  %8917 = bitcast <4 x i64>* %8916 to <8 x i32>*
  store <8 x i32> %8915, <8 x i32>* %8917, align 32
  %8918 = shufflevector <8 x i32> %8913, <8 x i32> %8914, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %8919 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 29
  %8920 = bitcast <4 x i64>* %8919 to <8 x i32>*
  store <8 x i32> %8918, <8 x i32>* %8920, align 32
  %8921 = shufflevector <4 x i64> %8861, <4 x i64> %8871, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %8922 = shufflevector <4 x i64> %8881, <4 x i64> %8891, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %8923 = bitcast <4 x i64> %8921 to <8 x i32>
  %8924 = bitcast <4 x i64> %8922 to <8 x i32>
  %8925 = shufflevector <8 x i32> %8923, <8 x i32> %8924, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %8926 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 23
  %8927 = bitcast <4 x i64>* %8926 to <8 x i32>*
  store <8 x i32> %8925, <8 x i32>* %8927, align 32
  %8928 = shufflevector <8 x i32> %8923, <8 x i32> %8924, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %8929 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 31
  %8930 = bitcast <4 x i64>* %8929 to <8 x i32>*
  store <8 x i32> %8928, <8 x i32>* %8930, align 32
  %8931 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 2, i64 2), align 2
  call void @fadst16_avx2(<4 x i64>* nonnull %8434, <4 x i64>* nonnull %8549, i8 signext %8931, i32 2, i32 2)
  %8932 = load <8 x i32>, <8 x i32>* %8613, align 32
  %8933 = load <8 x i32>, <8 x i32>* %8616, align 32
  %8934 = shufflevector <8 x i32> %8932, <8 x i32> %8933, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %8935 = bitcast <8 x i32> %8934 to <4 x i64>
  %8936 = shufflevector <8 x i32> %8932, <8 x i32> %8933, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %8937 = bitcast <8 x i32> %8936 to <4 x i64>
  %8938 = load <8 x i32>, <8 x i32>* %8623, align 32
  %8939 = load <8 x i32>, <8 x i32>* %8626, align 32
  %8940 = shufflevector <8 x i32> %8938, <8 x i32> %8939, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %8941 = bitcast <8 x i32> %8940 to <4 x i64>
  %8942 = shufflevector <8 x i32> %8938, <8 x i32> %8939, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %8943 = bitcast <8 x i32> %8942 to <4 x i64>
  %8944 = load <8 x i32>, <8 x i32>* %8633, align 32
  %8945 = load <8 x i32>, <8 x i32>* %8636, align 32
  %8946 = shufflevector <8 x i32> %8944, <8 x i32> %8945, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %8947 = bitcast <8 x i32> %8946 to <4 x i64>
  %8948 = shufflevector <8 x i32> %8944, <8 x i32> %8945, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %8949 = bitcast <8 x i32> %8948 to <4 x i64>
  %8950 = load <8 x i32>, <8 x i32>* %8643, align 32
  %8951 = load <8 x i32>, <8 x i32>* %8646, align 32
  %8952 = shufflevector <8 x i32> %8950, <8 x i32> %8951, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %8953 = bitcast <8 x i32> %8952 to <4 x i64>
  %8954 = shufflevector <8 x i32> %8950, <8 x i32> %8951, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %8955 = bitcast <8 x i32> %8954 to <4 x i64>
  %8956 = shufflevector <4 x i64> %8935, <4 x i64> %8941, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %8957 = shufflevector <4 x i64> %8947, <4 x i64> %8953, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %8958 = bitcast <4 x i64> %8956 to <8 x i32>
  %8959 = bitcast <4 x i64> %8957 to <8 x i32>
  %8960 = shufflevector <8 x i32> %8958, <8 x i32> %8959, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %8960, <8 x i32>* %8657, align 32
  %8961 = shufflevector <8 x i32> %8958, <8 x i32> %8959, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %8961, <8 x i32>* %8660, align 32
  %8962 = shufflevector <4 x i64> %8935, <4 x i64> %8941, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %8963 = shufflevector <4 x i64> %8947, <4 x i64> %8953, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %8964 = bitcast <4 x i64> %8962 to <8 x i32>
  %8965 = bitcast <4 x i64> %8963 to <8 x i32>
  %8966 = shufflevector <8 x i32> %8964, <8 x i32> %8965, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %8966, <8 x i32>* %8667, align 32
  %8967 = shufflevector <8 x i32> %8964, <8 x i32> %8965, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %8967, <8 x i32>* %8670, align 32
  %8968 = shufflevector <4 x i64> %8937, <4 x i64> %8943, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %8969 = shufflevector <4 x i64> %8949, <4 x i64> %8955, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %8970 = bitcast <4 x i64> %8968 to <8 x i32>
  %8971 = bitcast <4 x i64> %8969 to <8 x i32>
  %8972 = shufflevector <8 x i32> %8970, <8 x i32> %8971, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %8972, <8 x i32>* %8677, align 32
  %8973 = shufflevector <8 x i32> %8970, <8 x i32> %8971, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %8973, <8 x i32>* %8680, align 32
  %8974 = shufflevector <4 x i64> %8937, <4 x i64> %8943, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %8975 = shufflevector <4 x i64> %8949, <4 x i64> %8955, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %8976 = bitcast <4 x i64> %8974 to <8 x i32>
  %8977 = bitcast <4 x i64> %8975 to <8 x i32>
  %8978 = shufflevector <8 x i32> %8976, <8 x i32> %8977, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %8978, <8 x i32>* %8687, align 32
  %8979 = shufflevector <8 x i32> %8976, <8 x i32> %8977, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %8979, <8 x i32>* %8690, align 32
  %8980 = load <8 x i32>, <8 x i32>* %8693, align 32
  %8981 = load <8 x i32>, <8 x i32>* %8696, align 32
  %8982 = shufflevector <8 x i32> %8980, <8 x i32> %8981, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %8983 = bitcast <8 x i32> %8982 to <4 x i64>
  %8984 = shufflevector <8 x i32> %8980, <8 x i32> %8981, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %8985 = bitcast <8 x i32> %8984 to <4 x i64>
  %8986 = load <8 x i32>, <8 x i32>* %8703, align 32
  %8987 = load <8 x i32>, <8 x i32>* %8706, align 32
  %8988 = shufflevector <8 x i32> %8986, <8 x i32> %8987, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %8989 = bitcast <8 x i32> %8988 to <4 x i64>
  %8990 = shufflevector <8 x i32> %8986, <8 x i32> %8987, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %8991 = bitcast <8 x i32> %8990 to <4 x i64>
  %8992 = load <8 x i32>, <8 x i32>* %8713, align 32
  %8993 = load <8 x i32>, <8 x i32>* %8716, align 32
  %8994 = shufflevector <8 x i32> %8992, <8 x i32> %8993, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %8995 = bitcast <8 x i32> %8994 to <4 x i64>
  %8996 = shufflevector <8 x i32> %8992, <8 x i32> %8993, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %8997 = bitcast <8 x i32> %8996 to <4 x i64>
  %8998 = load <8 x i32>, <8 x i32>* %8723, align 32
  %8999 = load <8 x i32>, <8 x i32>* %8726, align 32
  %9000 = shufflevector <8 x i32> %8998, <8 x i32> %8999, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %9001 = bitcast <8 x i32> %9000 to <4 x i64>
  %9002 = shufflevector <8 x i32> %8998, <8 x i32> %8999, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %9003 = bitcast <8 x i32> %9002 to <4 x i64>
  %9004 = shufflevector <4 x i64> %8983, <4 x i64> %8989, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %9005 = shufflevector <4 x i64> %8995, <4 x i64> %9001, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %9006 = bitcast <4 x i64> %9004 to <8 x i32>
  %9007 = bitcast <4 x i64> %9005 to <8 x i32>
  %9008 = shufflevector <8 x i32> %9006, <8 x i32> %9007, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %9008, <8 x i32>* %8737, align 32
  %9009 = shufflevector <8 x i32> %9006, <8 x i32> %9007, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %9009, <8 x i32>* %8740, align 32
  %9010 = shufflevector <4 x i64> %8983, <4 x i64> %8989, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %9011 = shufflevector <4 x i64> %8995, <4 x i64> %9001, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %9012 = bitcast <4 x i64> %9010 to <8 x i32>
  %9013 = bitcast <4 x i64> %9011 to <8 x i32>
  %9014 = shufflevector <8 x i32> %9012, <8 x i32> %9013, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %9014, <8 x i32>* %8747, align 32
  %9015 = shufflevector <8 x i32> %9012, <8 x i32> %9013, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %9015, <8 x i32>* %8750, align 32
  %9016 = shufflevector <4 x i64> %8985, <4 x i64> %8991, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %9017 = shufflevector <4 x i64> %8997, <4 x i64> %9003, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %9018 = bitcast <4 x i64> %9016 to <8 x i32>
  %9019 = bitcast <4 x i64> %9017 to <8 x i32>
  %9020 = shufflevector <8 x i32> %9018, <8 x i32> %9019, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %9020, <8 x i32>* %8757, align 32
  %9021 = shufflevector <8 x i32> %9018, <8 x i32> %9019, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %9021, <8 x i32>* %8760, align 32
  %9022 = shufflevector <4 x i64> %8985, <4 x i64> %8991, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %9023 = shufflevector <4 x i64> %8997, <4 x i64> %9003, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %9024 = bitcast <4 x i64> %9022 to <8 x i32>
  %9025 = bitcast <4 x i64> %9023 to <8 x i32>
  %9026 = shufflevector <8 x i32> %9024, <8 x i32> %9025, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %9026, <8 x i32>* %8767, align 32
  %9027 = shufflevector <8 x i32> %9024, <8 x i32> %9025, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %9027, <8 x i32>* %8770, align 32
  %9028 = load <8 x i32>, <8 x i32>* %8773, align 32
  %9029 = load <8 x i32>, <8 x i32>* %8776, align 32
  %9030 = shufflevector <8 x i32> %9028, <8 x i32> %9029, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %9031 = bitcast <8 x i32> %9030 to <4 x i64>
  %9032 = shufflevector <8 x i32> %9028, <8 x i32> %9029, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %9033 = bitcast <8 x i32> %9032 to <4 x i64>
  %9034 = load <8 x i32>, <8 x i32>* %8783, align 32
  %9035 = load <8 x i32>, <8 x i32>* %8786, align 32
  %9036 = shufflevector <8 x i32> %9034, <8 x i32> %9035, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %9037 = bitcast <8 x i32> %9036 to <4 x i64>
  %9038 = shufflevector <8 x i32> %9034, <8 x i32> %9035, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %9039 = bitcast <8 x i32> %9038 to <4 x i64>
  %9040 = load <8 x i32>, <8 x i32>* %8793, align 32
  %9041 = load <8 x i32>, <8 x i32>* %8796, align 32
  %9042 = shufflevector <8 x i32> %9040, <8 x i32> %9041, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %9043 = bitcast <8 x i32> %9042 to <4 x i64>
  %9044 = shufflevector <8 x i32> %9040, <8 x i32> %9041, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %9045 = bitcast <8 x i32> %9044 to <4 x i64>
  %9046 = load <8 x i32>, <8 x i32>* %8803, align 32
  %9047 = load <8 x i32>, <8 x i32>* %8806, align 32
  %9048 = shufflevector <8 x i32> %9046, <8 x i32> %9047, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %9049 = bitcast <8 x i32> %9048 to <4 x i64>
  %9050 = shufflevector <8 x i32> %9046, <8 x i32> %9047, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %9051 = bitcast <8 x i32> %9050 to <4 x i64>
  %9052 = shufflevector <4 x i64> %9031, <4 x i64> %9037, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %9053 = shufflevector <4 x i64> %9043, <4 x i64> %9049, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %9054 = bitcast <4 x i64> %9052 to <8 x i32>
  %9055 = bitcast <4 x i64> %9053 to <8 x i32>
  %9056 = shufflevector <8 x i32> %9054, <8 x i32> %9055, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %9056, <8 x i32>* %8817, align 32
  %9057 = shufflevector <8 x i32> %9054, <8 x i32> %9055, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %9057, <8 x i32>* %8820, align 32
  %9058 = shufflevector <4 x i64> %9031, <4 x i64> %9037, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %9059 = shufflevector <4 x i64> %9043, <4 x i64> %9049, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %9060 = bitcast <4 x i64> %9058 to <8 x i32>
  %9061 = bitcast <4 x i64> %9059 to <8 x i32>
  %9062 = shufflevector <8 x i32> %9060, <8 x i32> %9061, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %9062, <8 x i32>* %8827, align 32
  %9063 = shufflevector <8 x i32> %9060, <8 x i32> %9061, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %9063, <8 x i32>* %8830, align 32
  %9064 = shufflevector <4 x i64> %9033, <4 x i64> %9039, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %9065 = shufflevector <4 x i64> %9045, <4 x i64> %9051, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %9066 = bitcast <4 x i64> %9064 to <8 x i32>
  %9067 = bitcast <4 x i64> %9065 to <8 x i32>
  %9068 = shufflevector <8 x i32> %9066, <8 x i32> %9067, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %9068, <8 x i32>* %8837, align 32
  %9069 = shufflevector <8 x i32> %9066, <8 x i32> %9067, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %9069, <8 x i32>* %8840, align 32
  %9070 = shufflevector <4 x i64> %9033, <4 x i64> %9039, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %9071 = shufflevector <4 x i64> %9045, <4 x i64> %9051, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %9072 = bitcast <4 x i64> %9070 to <8 x i32>
  %9073 = bitcast <4 x i64> %9071 to <8 x i32>
  %9074 = shufflevector <8 x i32> %9072, <8 x i32> %9073, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %9074, <8 x i32>* %8847, align 32
  %9075 = shufflevector <8 x i32> %9072, <8 x i32> %9073, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %9075, <8 x i32>* %8850, align 32
  %9076 = load <8 x i32>, <8 x i32>* %8853, align 32
  %9077 = load <8 x i32>, <8 x i32>* %8856, align 32
  %9078 = shufflevector <8 x i32> %9076, <8 x i32> %9077, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %9079 = bitcast <8 x i32> %9078 to <4 x i64>
  %9080 = shufflevector <8 x i32> %9076, <8 x i32> %9077, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %9081 = bitcast <8 x i32> %9080 to <4 x i64>
  %9082 = load <8 x i32>, <8 x i32>* %8863, align 32
  %9083 = load <8 x i32>, <8 x i32>* %8866, align 32
  %9084 = shufflevector <8 x i32> %9082, <8 x i32> %9083, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %9085 = bitcast <8 x i32> %9084 to <4 x i64>
  %9086 = shufflevector <8 x i32> %9082, <8 x i32> %9083, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %9087 = bitcast <8 x i32> %9086 to <4 x i64>
  %9088 = load <8 x i32>, <8 x i32>* %8873, align 32
  %9089 = load <8 x i32>, <8 x i32>* %8876, align 32
  %9090 = shufflevector <8 x i32> %9088, <8 x i32> %9089, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %9091 = bitcast <8 x i32> %9090 to <4 x i64>
  %9092 = shufflevector <8 x i32> %9088, <8 x i32> %9089, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %9093 = bitcast <8 x i32> %9092 to <4 x i64>
  %9094 = load <8 x i32>, <8 x i32>* %8883, align 32
  %9095 = load <8 x i32>, <8 x i32>* %8886, align 32
  %9096 = shufflevector <8 x i32> %9094, <8 x i32> %9095, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %9097 = bitcast <8 x i32> %9096 to <4 x i64>
  %9098 = shufflevector <8 x i32> %9094, <8 x i32> %9095, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %9099 = bitcast <8 x i32> %9098 to <4 x i64>
  %9100 = shufflevector <4 x i64> %9079, <4 x i64> %9085, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %9101 = shufflevector <4 x i64> %9091, <4 x i64> %9097, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %9102 = bitcast <4 x i64> %9100 to <8 x i32>
  %9103 = bitcast <4 x i64> %9101 to <8 x i32>
  %9104 = shufflevector <8 x i32> %9102, <8 x i32> %9103, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %9104, <8 x i32>* %8897, align 32
  %9105 = shufflevector <8 x i32> %9102, <8 x i32> %9103, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %9105, <8 x i32>* %8900, align 32
  %9106 = shufflevector <4 x i64> %9079, <4 x i64> %9085, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %9107 = shufflevector <4 x i64> %9091, <4 x i64> %9097, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %9108 = bitcast <4 x i64> %9106 to <8 x i32>
  %9109 = bitcast <4 x i64> %9107 to <8 x i32>
  %9110 = shufflevector <8 x i32> %9108, <8 x i32> %9109, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %9110, <8 x i32>* %8907, align 32
  %9111 = shufflevector <8 x i32> %9108, <8 x i32> %9109, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %9111, <8 x i32>* %8910, align 32
  %9112 = shufflevector <4 x i64> %9081, <4 x i64> %9087, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %9113 = shufflevector <4 x i64> %9093, <4 x i64> %9099, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %9114 = bitcast <4 x i64> %9112 to <8 x i32>
  %9115 = bitcast <4 x i64> %9113 to <8 x i32>
  %9116 = shufflevector <8 x i32> %9114, <8 x i32> %9115, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %9116, <8 x i32>* %8917, align 32
  %9117 = shufflevector <8 x i32> %9114, <8 x i32> %9115, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %9117, <8 x i32>* %8920, align 32
  %9118 = shufflevector <4 x i64> %9081, <4 x i64> %9087, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %9119 = shufflevector <4 x i64> %9093, <4 x i64> %9099, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %9120 = bitcast <4 x i64> %9118 to <8 x i32>
  %9121 = bitcast <4 x i64> %9119 to <8 x i32>
  %9122 = shufflevector <8 x i32> %9120, <8 x i32> %9121, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %9122, <8 x i32>* %8927, align 32
  %9123 = shufflevector <8 x i32> %9120, <8 x i32> %9121, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %9123, <8 x i32>* %8930, align 32
  br label %10159

9124:                                             ; preds = %5
  %9125 = bitcast [64 x <4 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %9125) #7
  %9126 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 16
  %9127 = bitcast <4 x i64>* %9126 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %9127, i8 -86, i64 1536, i1 false) #7
  %9128 = sext i32 %2 to i64
  %9129 = bitcast i16* %0 to <4 x i64>*
  %9130 = load <4 x i64>, <4 x i64>* %9129, align 1
  %9131 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 15
  store <4 x i64> %9130, <4 x i64>* %9131, align 32
  %9132 = getelementptr inbounds i16, i16* %0, i64 %9128
  %9133 = bitcast i16* %9132 to <4 x i64>*
  %9134 = load <4 x i64>, <4 x i64>* %9133, align 1
  %9135 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 14
  store <4 x i64> %9134, <4 x i64>* %9135, align 32
  %9136 = shl nsw i64 %9128, 1
  %9137 = getelementptr inbounds i16, i16* %0, i64 %9136
  %9138 = bitcast i16* %9137 to <4 x i64>*
  %9139 = load <4 x i64>, <4 x i64>* %9138, align 1
  %9140 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 13
  store <4 x i64> %9139, <4 x i64>* %9140, align 32
  %9141 = mul nsw i64 %9128, 3
  %9142 = getelementptr inbounds i16, i16* %0, i64 %9141
  %9143 = bitcast i16* %9142 to <4 x i64>*
  %9144 = load <4 x i64>, <4 x i64>* %9143, align 1
  %9145 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 12
  store <4 x i64> %9144, <4 x i64>* %9145, align 32
  %9146 = shl nsw i64 %9128, 2
  %9147 = getelementptr inbounds i16, i16* %0, i64 %9146
  %9148 = bitcast i16* %9147 to <4 x i64>*
  %9149 = load <4 x i64>, <4 x i64>* %9148, align 1
  %9150 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 11
  store <4 x i64> %9149, <4 x i64>* %9150, align 32
  %9151 = mul nsw i64 %9128, 5
  %9152 = getelementptr inbounds i16, i16* %0, i64 %9151
  %9153 = bitcast i16* %9152 to <4 x i64>*
  %9154 = load <4 x i64>, <4 x i64>* %9153, align 1
  %9155 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 10
  store <4 x i64> %9154, <4 x i64>* %9155, align 32
  %9156 = mul nsw i64 %9128, 6
  %9157 = getelementptr inbounds i16, i16* %0, i64 %9156
  %9158 = bitcast i16* %9157 to <4 x i64>*
  %9159 = load <4 x i64>, <4 x i64>* %9158, align 1
  %9160 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 9
  store <4 x i64> %9159, <4 x i64>* %9160, align 32
  %9161 = mul nsw i64 %9128, 7
  %9162 = getelementptr inbounds i16, i16* %0, i64 %9161
  %9163 = bitcast i16* %9162 to <4 x i64>*
  %9164 = load <4 x i64>, <4 x i64>* %9163, align 1
  %9165 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 8
  store <4 x i64> %9164, <4 x i64>* %9165, align 32
  %9166 = shl nsw i64 %9128, 3
  %9167 = getelementptr inbounds i16, i16* %0, i64 %9166
  %9168 = bitcast i16* %9167 to <4 x i64>*
  %9169 = load <4 x i64>, <4 x i64>* %9168, align 1
  %9170 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 7
  store <4 x i64> %9169, <4 x i64>* %9170, align 32
  %9171 = mul nsw i64 %9128, 9
  %9172 = getelementptr inbounds i16, i16* %0, i64 %9171
  %9173 = bitcast i16* %9172 to <4 x i64>*
  %9174 = load <4 x i64>, <4 x i64>* %9173, align 1
  %9175 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 6
  store <4 x i64> %9174, <4 x i64>* %9175, align 32
  %9176 = mul nsw i64 %9128, 10
  %9177 = getelementptr inbounds i16, i16* %0, i64 %9176
  %9178 = bitcast i16* %9177 to <4 x i64>*
  %9179 = load <4 x i64>, <4 x i64>* %9178, align 1
  %9180 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 5
  store <4 x i64> %9179, <4 x i64>* %9180, align 32
  %9181 = mul nsw i64 %9128, 11
  %9182 = getelementptr inbounds i16, i16* %0, i64 %9181
  %9183 = bitcast i16* %9182 to <4 x i64>*
  %9184 = load <4 x i64>, <4 x i64>* %9183, align 1
  %9185 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 4
  store <4 x i64> %9184, <4 x i64>* %9185, align 32
  %9186 = mul nsw i64 %9128, 12
  %9187 = getelementptr inbounds i16, i16* %0, i64 %9186
  %9188 = bitcast i16* %9187 to <4 x i64>*
  %9189 = load <4 x i64>, <4 x i64>* %9188, align 1
  %9190 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 3
  store <4 x i64> %9189, <4 x i64>* %9190, align 32
  %9191 = mul nsw i64 %9128, 13
  %9192 = getelementptr inbounds i16, i16* %0, i64 %9191
  %9193 = bitcast i16* %9192 to <4 x i64>*
  %9194 = load <4 x i64>, <4 x i64>* %9193, align 1
  %9195 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 2
  store <4 x i64> %9194, <4 x i64>* %9195, align 32
  %9196 = mul nsw i64 %9128, 14
  %9197 = getelementptr inbounds i16, i16* %0, i64 %9196
  %9198 = bitcast i16* %9197 to <4 x i64>*
  %9199 = load <4 x i64>, <4 x i64>* %9198, align 1
  %9200 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 1
  store <4 x i64> %9199, <4 x i64>* %9200, align 32
  %9201 = mul nsw i64 %9128, 15
  %9202 = getelementptr inbounds i16, i16* %0, i64 %9201
  %9203 = bitcast i16* %9202 to <4 x i64>*
  %9204 = load <4 x i64>, <4 x i64>* %9203, align 1
  %9205 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 0
  store <4 x i64> %9204, <4 x i64>* %9205, align 32
  %9206 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 0
  %9207 = shufflevector <4 x i64> %9204, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9208 = bitcast <2 x i64> %9207 to <8 x i16>
  %9209 = sext <8 x i16> %9208 to <8 x i32>
  %9210 = bitcast [32 x <4 x i64>]* %8 to <8 x i32>*
  store <8 x i32> %9209, <8 x i32>* %9210, align 32
  %9211 = bitcast <4 x i64> %9204 to <8 x i32>
  %9212 = shufflevector <8 x i32> %9211, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9213 = bitcast <4 x i32> %9212 to <8 x i16>
  %9214 = sext <8 x i16> %9213 to <8 x i32>
  %9215 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 1
  %9216 = bitcast <4 x i64>* %9215 to <8 x i32>*
  store <8 x i32> %9214, <8 x i32>* %9216, align 32
  br label %9217

9217:                                             ; preds = %9124, %9217
  %9218 = phi i64 [ 1, %9124 ], [ %9234, %9217 ]
  %9219 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 %9218
  %9220 = load <4 x i64>, <4 x i64>* %9219, align 32
  %9221 = shufflevector <4 x i64> %9220, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9222 = bitcast <2 x i64> %9221 to <8 x i16>
  %9223 = sext <8 x i16> %9222 to <8 x i32>
  %9224 = shl nuw nsw i64 %9218, 1
  %9225 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %9224
  %9226 = bitcast <4 x i64>* %9225 to <8 x i32>*
  store <8 x i32> %9223, <8 x i32>* %9226, align 32
  %9227 = bitcast <4 x i64> %9220 to <8 x i32>
  %9228 = shufflevector <8 x i32> %9227, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9229 = bitcast <4 x i32> %9228 to <8 x i16>
  %9230 = sext <8 x i16> %9229 to <8 x i32>
  %9231 = or i64 %9224, 1
  %9232 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %9231
  %9233 = bitcast <4 x i64>* %9232 to <8 x i32>*
  store <8 x i32> %9230, <8 x i32>* %9233, align 32
  %9234 = add nuw nsw i64 %9218, 1
  %9235 = icmp eq i64 %9234, 16
  br i1 %9235, label %9236, label %9217

9236:                                             ; preds = %9217
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %9125) #7
  %9237 = load i8, i8* %12, align 1
  %9238 = sext i8 %9237 to i32
  %9239 = icmp slt i8 %9237, 0
  br i1 %9239, label %9240, label %9273

9240:                                             ; preds = %9236
  %9241 = sub nsw i32 0, %9238
  %9242 = xor i32 %9238, -1
  %9243 = shl i32 1, %9242
  %9244 = insertelement <8 x i32> undef, i32 %9243, i32 0
  %9245 = shufflevector <8 x i32> %9244, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %9246

9246:                                             ; preds = %9246, %9240
  %9247 = phi i64 [ 0, %9240 ], [ %9271, %9246 ]
  %9248 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %9247
  %9249 = bitcast <4 x i64>* %9248 to <8 x i32>*
  %9250 = load <8 x i32>, <8 x i32>* %9249, align 32
  %9251 = add <8 x i32> %9250, %9245
  %9252 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %9251, i32 %9241) #7
  store <8 x i32> %9252, <8 x i32>* %9249, align 32
  %9253 = or i64 %9247, 1
  %9254 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %9253
  %9255 = bitcast <4 x i64>* %9254 to <8 x i32>*
  %9256 = load <8 x i32>, <8 x i32>* %9255, align 32
  %9257 = add <8 x i32> %9256, %9245
  %9258 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %9257, i32 %9241) #7
  store <8 x i32> %9258, <8 x i32>* %9255, align 32
  %9259 = or i64 %9247, 2
  %9260 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %9259
  %9261 = bitcast <4 x i64>* %9260 to <8 x i32>*
  %9262 = load <8 x i32>, <8 x i32>* %9261, align 32
  %9263 = add <8 x i32> %9262, %9245
  %9264 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %9263, i32 %9241) #7
  store <8 x i32> %9264, <8 x i32>* %9261, align 32
  %9265 = or i64 %9247, 3
  %9266 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %9265
  %9267 = bitcast <4 x i64>* %9266 to <8 x i32>*
  %9268 = load <8 x i32>, <8 x i32>* %9267, align 32
  %9269 = add <8 x i32> %9268, %9245
  %9270 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %9269, i32 %9241) #7
  store <8 x i32> %9270, <8 x i32>* %9267, align 32
  %9271 = add nuw nsw i64 %9247, 4
  %9272 = icmp eq i64 %9271, 32
  br i1 %9272, label %9298, label %9246

9273:                                             ; preds = %9236
  %9274 = icmp eq i8 %9237, 0
  br i1 %9274, label %9298, label %9275

9275:                                             ; preds = %9273, %9275
  %9276 = phi i64 [ %9296, %9275 ], [ 0, %9273 ]
  %9277 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %9276
  %9278 = bitcast <4 x i64>* %9277 to <8 x i32>*
  %9279 = load <8 x i32>, <8 x i32>* %9278, align 32
  %9280 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %9279, i32 %9238) #7
  store <8 x i32> %9280, <8 x i32>* %9278, align 32
  %9281 = or i64 %9276, 1
  %9282 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %9281
  %9283 = bitcast <4 x i64>* %9282 to <8 x i32>*
  %9284 = load <8 x i32>, <8 x i32>* %9283, align 32
  %9285 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %9284, i32 %9238) #7
  store <8 x i32> %9285, <8 x i32>* %9283, align 32
  %9286 = or i64 %9276, 2
  %9287 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %9286
  %9288 = bitcast <4 x i64>* %9287 to <8 x i32>*
  %9289 = load <8 x i32>, <8 x i32>* %9288, align 32
  %9290 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %9289, i32 %9238) #7
  store <8 x i32> %9290, <8 x i32>* %9288, align 32
  %9291 = or i64 %9276, 3
  %9292 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %9291
  %9293 = bitcast <4 x i64>* %9292 to <8 x i32>*
  %9294 = load <8 x i32>, <8 x i32>* %9293, align 32
  %9295 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %9294, i32 %9238) #7
  store <8 x i32> %9295, <8 x i32>* %9293, align 32
  %9296 = add nuw nsw i64 %9276, 4
  %9297 = icmp eq i64 %9296, 32
  br i1 %9297, label %9298, label %9275

9298:                                             ; preds = %9275, %9246, %9273
  %9299 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 0
  %9300 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 2, i64 2), align 2
  call void @fadst16_avx2(<4 x i64>* nonnull %9206, <4 x i64>* nonnull %9299, i8 signext %9300, i32 2, i32 2)
  %9301 = getelementptr inbounds i8, i8* %12, i64 1
  %9302 = load i8, i8* %9301, align 1
  %9303 = sext i8 %9302 to i32
  %9304 = icmp slt i8 %9302, 0
  br i1 %9304, label %9305, label %9338

9305:                                             ; preds = %9298
  %9306 = sub nsw i32 0, %9303
  %9307 = xor i32 %9303, -1
  %9308 = shl i32 1, %9307
  %9309 = insertelement <8 x i32> undef, i32 %9308, i32 0
  %9310 = shufflevector <8 x i32> %9309, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %9311

9311:                                             ; preds = %9311, %9305
  %9312 = phi i64 [ 0, %9305 ], [ %9336, %9311 ]
  %9313 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %9312
  %9314 = bitcast <4 x i64>* %9313 to <8 x i32>*
  %9315 = load <8 x i32>, <8 x i32>* %9314, align 32
  %9316 = add <8 x i32> %9315, %9310
  %9317 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %9316, i32 %9306) #7
  store <8 x i32> %9317, <8 x i32>* %9314, align 32
  %9318 = or i64 %9312, 1
  %9319 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %9318
  %9320 = bitcast <4 x i64>* %9319 to <8 x i32>*
  %9321 = load <8 x i32>, <8 x i32>* %9320, align 32
  %9322 = add <8 x i32> %9321, %9310
  %9323 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %9322, i32 %9306) #7
  store <8 x i32> %9323, <8 x i32>* %9320, align 32
  %9324 = or i64 %9312, 2
  %9325 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %9324
  %9326 = bitcast <4 x i64>* %9325 to <8 x i32>*
  %9327 = load <8 x i32>, <8 x i32>* %9326, align 32
  %9328 = add <8 x i32> %9327, %9310
  %9329 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %9328, i32 %9306) #7
  store <8 x i32> %9329, <8 x i32>* %9326, align 32
  %9330 = or i64 %9312, 3
  %9331 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %9330
  %9332 = bitcast <4 x i64>* %9331 to <8 x i32>*
  %9333 = load <8 x i32>, <8 x i32>* %9332, align 32
  %9334 = add <8 x i32> %9333, %9310
  %9335 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %9334, i32 %9306) #7
  store <8 x i32> %9335, <8 x i32>* %9332, align 32
  %9336 = add nuw nsw i64 %9312, 4
  %9337 = icmp eq i64 %9336, 32
  br i1 %9337, label %9363, label %9311

9338:                                             ; preds = %9298
  %9339 = icmp eq i8 %9302, 0
  br i1 %9339, label %9363, label %9340

9340:                                             ; preds = %9338, %9340
  %9341 = phi i64 [ %9361, %9340 ], [ 0, %9338 ]
  %9342 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %9341
  %9343 = bitcast <4 x i64>* %9342 to <8 x i32>*
  %9344 = load <8 x i32>, <8 x i32>* %9343, align 32
  %9345 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %9344, i32 %9303) #7
  store <8 x i32> %9345, <8 x i32>* %9343, align 32
  %9346 = or i64 %9341, 1
  %9347 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %9346
  %9348 = bitcast <4 x i64>* %9347 to <8 x i32>*
  %9349 = load <8 x i32>, <8 x i32>* %9348, align 32
  %9350 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %9349, i32 %9303) #7
  store <8 x i32> %9350, <8 x i32>* %9348, align 32
  %9351 = or i64 %9341, 2
  %9352 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %9351
  %9353 = bitcast <4 x i64>* %9352 to <8 x i32>*
  %9354 = load <8 x i32>, <8 x i32>* %9353, align 32
  %9355 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %9354, i32 %9303) #7
  store <8 x i32> %9355, <8 x i32>* %9353, align 32
  %9356 = or i64 %9341, 3
  %9357 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %9356
  %9358 = bitcast <4 x i64>* %9357 to <8 x i32>*
  %9359 = load <8 x i32>, <8 x i32>* %9358, align 32
  %9360 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %9359, i32 %9303) #7
  store <8 x i32> %9360, <8 x i32>* %9358, align 32
  %9361 = add nuw nsw i64 %9341, 4
  %9362 = icmp eq i64 %9361, 32
  br i1 %9362, label %9363, label %9340

9363:                                             ; preds = %9340, %9311, %9338
  br label %9364

9364:                                             ; preds = %9364, %9363
  %9365 = phi i64 [ 0, %9363 ], [ %9383, %9364 ]
  %9366 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %9365
  %9367 = bitcast <4 x i64>* %9366 to <8 x i32>*
  %9368 = load <8 x i32>, <8 x i32>* %9367, align 32
  %9369 = mul <8 x i32> %9368, <i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586>
  %9370 = add <8 x i32> %9369, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %9371 = ashr <8 x i32> %9370, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %9372 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %9365
  %9373 = bitcast <4 x i64>* %9372 to <8 x i32>*
  store <8 x i32> %9371, <8 x i32>* %9373, align 32
  %9374 = or i64 %9365, 1
  %9375 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %9374
  %9376 = bitcast <4 x i64>* %9375 to <8 x i32>*
  %9377 = load <8 x i32>, <8 x i32>* %9376, align 32
  %9378 = mul <8 x i32> %9377, <i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586>
  %9379 = add <8 x i32> %9378, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %9380 = ashr <8 x i32> %9379, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %9381 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %9374
  %9382 = bitcast <4 x i64>* %9381 to <8 x i32>*
  store <8 x i32> %9380, <8 x i32>* %9382, align 32
  %9383 = add nuw nsw i64 %9365, 2
  %9384 = icmp eq i64 %9383, 32
  br i1 %9384, label %10159, label %9364

9385:                                             ; preds = %5
  %9386 = bitcast [64 x <4 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %9386) #7
  %9387 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 16
  %9388 = bitcast <4 x i64>* %9387 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %9388, i8 -86, i64 1536, i1 false) #7
  %9389 = sext i32 %2 to i64
  %9390 = bitcast i16* %0 to <4 x i64>*
  %9391 = load <4 x i64>, <4 x i64>* %9390, align 1
  %9392 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 0
  store <4 x i64> %9391, <4 x i64>* %9392, align 32
  %9393 = getelementptr inbounds i16, i16* %0, i64 %9389
  %9394 = bitcast i16* %9393 to <4 x i64>*
  %9395 = load <4 x i64>, <4 x i64>* %9394, align 1
  %9396 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 1
  store <4 x i64> %9395, <4 x i64>* %9396, align 32
  %9397 = shl nsw i64 %9389, 1
  %9398 = getelementptr inbounds i16, i16* %0, i64 %9397
  %9399 = bitcast i16* %9398 to <4 x i64>*
  %9400 = load <4 x i64>, <4 x i64>* %9399, align 1
  %9401 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 2
  store <4 x i64> %9400, <4 x i64>* %9401, align 32
  %9402 = mul nsw i64 %9389, 3
  %9403 = getelementptr inbounds i16, i16* %0, i64 %9402
  %9404 = bitcast i16* %9403 to <4 x i64>*
  %9405 = load <4 x i64>, <4 x i64>* %9404, align 1
  %9406 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 3
  store <4 x i64> %9405, <4 x i64>* %9406, align 32
  %9407 = shl nsw i64 %9389, 2
  %9408 = getelementptr inbounds i16, i16* %0, i64 %9407
  %9409 = bitcast i16* %9408 to <4 x i64>*
  %9410 = load <4 x i64>, <4 x i64>* %9409, align 1
  %9411 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 4
  store <4 x i64> %9410, <4 x i64>* %9411, align 32
  %9412 = mul nsw i64 %9389, 5
  %9413 = getelementptr inbounds i16, i16* %0, i64 %9412
  %9414 = bitcast i16* %9413 to <4 x i64>*
  %9415 = load <4 x i64>, <4 x i64>* %9414, align 1
  %9416 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 5
  store <4 x i64> %9415, <4 x i64>* %9416, align 32
  %9417 = mul nsw i64 %9389, 6
  %9418 = getelementptr inbounds i16, i16* %0, i64 %9417
  %9419 = bitcast i16* %9418 to <4 x i64>*
  %9420 = load <4 x i64>, <4 x i64>* %9419, align 1
  %9421 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 6
  store <4 x i64> %9420, <4 x i64>* %9421, align 32
  %9422 = mul nsw i64 %9389, 7
  %9423 = getelementptr inbounds i16, i16* %0, i64 %9422
  %9424 = bitcast i16* %9423 to <4 x i64>*
  %9425 = load <4 x i64>, <4 x i64>* %9424, align 1
  %9426 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 7
  store <4 x i64> %9425, <4 x i64>* %9426, align 32
  %9427 = shl nsw i64 %9389, 3
  %9428 = getelementptr inbounds i16, i16* %0, i64 %9427
  %9429 = bitcast i16* %9428 to <4 x i64>*
  %9430 = load <4 x i64>, <4 x i64>* %9429, align 1
  %9431 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 8
  store <4 x i64> %9430, <4 x i64>* %9431, align 32
  %9432 = mul nsw i64 %9389, 9
  %9433 = getelementptr inbounds i16, i16* %0, i64 %9432
  %9434 = bitcast i16* %9433 to <4 x i64>*
  %9435 = load <4 x i64>, <4 x i64>* %9434, align 1
  %9436 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 9
  store <4 x i64> %9435, <4 x i64>* %9436, align 32
  %9437 = mul nsw i64 %9389, 10
  %9438 = getelementptr inbounds i16, i16* %0, i64 %9437
  %9439 = bitcast i16* %9438 to <4 x i64>*
  %9440 = load <4 x i64>, <4 x i64>* %9439, align 1
  %9441 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 10
  store <4 x i64> %9440, <4 x i64>* %9441, align 32
  %9442 = mul nsw i64 %9389, 11
  %9443 = getelementptr inbounds i16, i16* %0, i64 %9442
  %9444 = bitcast i16* %9443 to <4 x i64>*
  %9445 = load <4 x i64>, <4 x i64>* %9444, align 1
  %9446 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 11
  store <4 x i64> %9445, <4 x i64>* %9446, align 32
  %9447 = mul nsw i64 %9389, 12
  %9448 = getelementptr inbounds i16, i16* %0, i64 %9447
  %9449 = bitcast i16* %9448 to <4 x i64>*
  %9450 = load <4 x i64>, <4 x i64>* %9449, align 1
  %9451 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 12
  store <4 x i64> %9450, <4 x i64>* %9451, align 32
  %9452 = mul nsw i64 %9389, 13
  %9453 = getelementptr inbounds i16, i16* %0, i64 %9452
  %9454 = bitcast i16* %9453 to <4 x i64>*
  %9455 = load <4 x i64>, <4 x i64>* %9454, align 1
  %9456 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 13
  store <4 x i64> %9455, <4 x i64>* %9456, align 32
  %9457 = mul nsw i64 %9389, 14
  %9458 = getelementptr inbounds i16, i16* %0, i64 %9457
  %9459 = bitcast i16* %9458 to <4 x i64>*
  %9460 = load <4 x i64>, <4 x i64>* %9459, align 1
  %9461 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 14
  store <4 x i64> %9460, <4 x i64>* %9461, align 32
  %9462 = mul nsw i64 %9389, 15
  %9463 = getelementptr inbounds i16, i16* %0, i64 %9462
  %9464 = bitcast i16* %9463 to <4 x i64>*
  %9465 = load <4 x i64>, <4 x i64>* %9464, align 1
  %9466 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 15
  store <4 x i64> %9465, <4 x i64>* %9466, align 32
  %9467 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 0
  br label %9468

9468:                                             ; preds = %9496, %9385
  %9469 = phi <4 x i64> [ %9498, %9496 ], [ %9391, %9385 ]
  %9470 = phi i64 [ %9494, %9496 ], [ 0, %9385 ]
  %9471 = shufflevector <4 x i64> %9469, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9472 = bitcast <2 x i64> %9471 to <8 x i16>
  %9473 = shufflevector <8 x i16> %9472, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %9474 = shufflevector <8 x i16> %9473, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %9475 = bitcast <8 x i16> %9474 to <4 x i32>
  %9476 = shufflevector <4 x i32> %9475, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %9477 = bitcast <4 x i32> %9476 to <8 x i16>
  %9478 = sext <8 x i16> %9477 to <8 x i32>
  %9479 = shl nuw nsw i64 %9470, 1
  %9480 = or i64 %9479, 1
  %9481 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %9480
  %9482 = bitcast <4 x i64>* %9481 to <8 x i32>*
  store <8 x i32> %9478, <8 x i32>* %9482, align 32
  %9483 = bitcast <4 x i64> %9469 to <8 x i32>
  %9484 = shufflevector <8 x i32> %9483, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9485 = bitcast <4 x i32> %9484 to <8 x i16>
  %9486 = shufflevector <8 x i16> %9485, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %9487 = shufflevector <8 x i16> %9486, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %9488 = bitcast <8 x i16> %9487 to <4 x i32>
  %9489 = shufflevector <4 x i32> %9488, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %9490 = bitcast <4 x i32> %9489 to <8 x i16>
  %9491 = sext <8 x i16> %9490 to <8 x i32>
  %9492 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %9479
  %9493 = bitcast <4 x i64>* %9492 to <8 x i32>*
  store <8 x i32> %9491, <8 x i32>* %9493, align 32
  %9494 = add nuw nsw i64 %9470, 1
  %9495 = icmp eq i64 %9494, 16
  br i1 %9495, label %9499, label %9496

9496:                                             ; preds = %9468
  %9497 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %7, i64 0, i64 %9494
  %9498 = load <4 x i64>, <4 x i64>* %9497, align 32
  br label %9468

9499:                                             ; preds = %9468
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %9386) #7
  %9500 = load i8, i8* %12, align 1
  %9501 = sext i8 %9500 to i32
  %9502 = icmp slt i8 %9500, 0
  br i1 %9502, label %9503, label %9536

9503:                                             ; preds = %9499
  %9504 = sub nsw i32 0, %9501
  %9505 = xor i32 %9501, -1
  %9506 = shl i32 1, %9505
  %9507 = insertelement <8 x i32> undef, i32 %9506, i32 0
  %9508 = shufflevector <8 x i32> %9507, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %9509

9509:                                             ; preds = %9509, %9503
  %9510 = phi i64 [ 0, %9503 ], [ %9534, %9509 ]
  %9511 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %9510
  %9512 = bitcast <4 x i64>* %9511 to <8 x i32>*
  %9513 = load <8 x i32>, <8 x i32>* %9512, align 32
  %9514 = add <8 x i32> %9513, %9508
  %9515 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %9514, i32 %9504) #7
  store <8 x i32> %9515, <8 x i32>* %9512, align 32
  %9516 = or i64 %9510, 1
  %9517 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %9516
  %9518 = bitcast <4 x i64>* %9517 to <8 x i32>*
  %9519 = load <8 x i32>, <8 x i32>* %9518, align 32
  %9520 = add <8 x i32> %9519, %9508
  %9521 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %9520, i32 %9504) #7
  store <8 x i32> %9521, <8 x i32>* %9518, align 32
  %9522 = or i64 %9510, 2
  %9523 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %9522
  %9524 = bitcast <4 x i64>* %9523 to <8 x i32>*
  %9525 = load <8 x i32>, <8 x i32>* %9524, align 32
  %9526 = add <8 x i32> %9525, %9508
  %9527 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %9526, i32 %9504) #7
  store <8 x i32> %9527, <8 x i32>* %9524, align 32
  %9528 = or i64 %9510, 3
  %9529 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %9528
  %9530 = bitcast <4 x i64>* %9529 to <8 x i32>*
  %9531 = load <8 x i32>, <8 x i32>* %9530, align 32
  %9532 = add <8 x i32> %9531, %9508
  %9533 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %9532, i32 %9504) #7
  store <8 x i32> %9533, <8 x i32>* %9530, align 32
  %9534 = add nuw nsw i64 %9510, 4
  %9535 = icmp eq i64 %9534, 32
  br i1 %9535, label %9561, label %9509

9536:                                             ; preds = %9499
  %9537 = icmp eq i8 %9500, 0
  br i1 %9537, label %9561, label %9538

9538:                                             ; preds = %9536, %9538
  %9539 = phi i64 [ %9559, %9538 ], [ 0, %9536 ]
  %9540 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %9539
  %9541 = bitcast <4 x i64>* %9540 to <8 x i32>*
  %9542 = load <8 x i32>, <8 x i32>* %9541, align 32
  %9543 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %9542, i32 %9501) #7
  store <8 x i32> %9543, <8 x i32>* %9541, align 32
  %9544 = or i64 %9539, 1
  %9545 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %9544
  %9546 = bitcast <4 x i64>* %9545 to <8 x i32>*
  %9547 = load <8 x i32>, <8 x i32>* %9546, align 32
  %9548 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %9547, i32 %9501) #7
  store <8 x i32> %9548, <8 x i32>* %9546, align 32
  %9549 = or i64 %9539, 2
  %9550 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %9549
  %9551 = bitcast <4 x i64>* %9550 to <8 x i32>*
  %9552 = load <8 x i32>, <8 x i32>* %9551, align 32
  %9553 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %9552, i32 %9501) #7
  store <8 x i32> %9553, <8 x i32>* %9551, align 32
  %9554 = or i64 %9539, 3
  %9555 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %9554
  %9556 = bitcast <4 x i64>* %9555 to <8 x i32>*
  %9557 = load <8 x i32>, <8 x i32>* %9556, align 32
  %9558 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %9557, i32 %9501) #7
  store <8 x i32> %9558, <8 x i32>* %9556, align 32
  %9559 = add nuw nsw i64 %9539, 4
  %9560 = icmp eq i64 %9559, 32
  br i1 %9560, label %9561, label %9538

9561:                                             ; preds = %9538, %9509, %9536
  br label %9562

9562:                                             ; preds = %9562, %9561
  %9563 = phi i64 [ 0, %9561 ], [ %9581, %9562 ]
  %9564 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %9563
  %9565 = bitcast <4 x i64>* %9564 to <8 x i32>*
  %9566 = load <8 x i32>, <8 x i32>* %9565, align 32
  %9567 = mul <8 x i32> %9566, <i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586>
  %9568 = add <8 x i32> %9567, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %9569 = ashr <8 x i32> %9568, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %9570 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %9563
  %9571 = bitcast <4 x i64>* %9570 to <8 x i32>*
  store <8 x i32> %9569, <8 x i32>* %9571, align 32
  %9572 = or i64 %9563, 1
  %9573 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 %9572
  %9574 = bitcast <4 x i64>* %9573 to <8 x i32>*
  %9575 = load <8 x i32>, <8 x i32>* %9574, align 32
  %9576 = mul <8 x i32> %9575, <i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586>
  %9577 = add <8 x i32> %9576, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %9578 = ashr <8 x i32> %9577, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %9579 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %9572
  %9580 = bitcast <4 x i64>* %9579 to <8 x i32>*
  store <8 x i32> %9578, <8 x i32>* %9580, align 32
  %9581 = add nuw nsw i64 %9563, 2
  %9582 = icmp eq i64 %9581, 32
  br i1 %9582, label %9583, label %9562

9583:                                             ; preds = %9562
  %9584 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 0
  %9585 = getelementptr inbounds i8, i8* %12, i64 1
  %9586 = load i8, i8* %9585, align 1
  %9587 = sext i8 %9586 to i32
  %9588 = icmp slt i8 %9586, 0
  br i1 %9588, label %9589, label %9622

9589:                                             ; preds = %9583
  %9590 = sub nsw i32 0, %9587
  %9591 = xor i32 %9587, -1
  %9592 = shl i32 1, %9591
  %9593 = insertelement <8 x i32> undef, i32 %9592, i32 0
  %9594 = shufflevector <8 x i32> %9593, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %9595

9595:                                             ; preds = %9595, %9589
  %9596 = phi i64 [ 0, %9589 ], [ %9620, %9595 ]
  %9597 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %9596
  %9598 = bitcast <4 x i64>* %9597 to <8 x i32>*
  %9599 = load <8 x i32>, <8 x i32>* %9598, align 32
  %9600 = add <8 x i32> %9599, %9594
  %9601 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %9600, i32 %9590) #7
  store <8 x i32> %9601, <8 x i32>* %9598, align 32
  %9602 = or i64 %9596, 1
  %9603 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %9602
  %9604 = bitcast <4 x i64>* %9603 to <8 x i32>*
  %9605 = load <8 x i32>, <8 x i32>* %9604, align 32
  %9606 = add <8 x i32> %9605, %9594
  %9607 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %9606, i32 %9590) #7
  store <8 x i32> %9607, <8 x i32>* %9604, align 32
  %9608 = or i64 %9596, 2
  %9609 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %9608
  %9610 = bitcast <4 x i64>* %9609 to <8 x i32>*
  %9611 = load <8 x i32>, <8 x i32>* %9610, align 32
  %9612 = add <8 x i32> %9611, %9594
  %9613 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %9612, i32 %9590) #7
  store <8 x i32> %9613, <8 x i32>* %9610, align 32
  %9614 = or i64 %9596, 3
  %9615 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %9614
  %9616 = bitcast <4 x i64>* %9615 to <8 x i32>*
  %9617 = load <8 x i32>, <8 x i32>* %9616, align 32
  %9618 = add <8 x i32> %9617, %9594
  %9619 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %9618, i32 %9590) #7
  store <8 x i32> %9619, <8 x i32>* %9616, align 32
  %9620 = add nuw nsw i64 %9596, 4
  %9621 = icmp eq i64 %9620, 32
  br i1 %9621, label %9647, label %9595

9622:                                             ; preds = %9583
  %9623 = icmp eq i8 %9586, 0
  br i1 %9623, label %9647, label %9624

9624:                                             ; preds = %9622, %9624
  %9625 = phi i64 [ %9645, %9624 ], [ 0, %9622 ]
  %9626 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %9625
  %9627 = bitcast <4 x i64>* %9626 to <8 x i32>*
  %9628 = load <8 x i32>, <8 x i32>* %9627, align 32
  %9629 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %9628, i32 %9587) #7
  store <8 x i32> %9629, <8 x i32>* %9627, align 32
  %9630 = or i64 %9625, 1
  %9631 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %9630
  %9632 = bitcast <4 x i64>* %9631 to <8 x i32>*
  %9633 = load <8 x i32>, <8 x i32>* %9632, align 32
  %9634 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %9633, i32 %9587) #7
  store <8 x i32> %9634, <8 x i32>* %9632, align 32
  %9635 = or i64 %9625, 2
  %9636 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %9635
  %9637 = bitcast <4 x i64>* %9636 to <8 x i32>*
  %9638 = load <8 x i32>, <8 x i32>* %9637, align 32
  %9639 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %9638, i32 %9587) #7
  store <8 x i32> %9639, <8 x i32>* %9637, align 32
  %9640 = or i64 %9625, 3
  %9641 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 %9640
  %9642 = bitcast <4 x i64>* %9641 to <8 x i32>*
  %9643 = load <8 x i32>, <8 x i32>* %9642, align 32
  %9644 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %9643, i32 %9587) #7
  store <8 x i32> %9644, <8 x i32>* %9642, align 32
  %9645 = add nuw nsw i64 %9625, 4
  %9646 = icmp eq i64 %9645, 32
  br i1 %9646, label %9647, label %9624

9647:                                             ; preds = %9624, %9595, %9622
  %9648 = bitcast [32 x <4 x i64>]* %10 to <8 x i32>*
  %9649 = load <8 x i32>, <8 x i32>* %9648, align 32
  %9650 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 2
  %9651 = bitcast <4 x i64>* %9650 to <8 x i32>*
  %9652 = load <8 x i32>, <8 x i32>* %9651, align 32
  %9653 = shufflevector <8 x i32> %9649, <8 x i32> %9652, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %9654 = bitcast <8 x i32> %9653 to <4 x i64>
  %9655 = shufflevector <8 x i32> %9649, <8 x i32> %9652, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %9656 = bitcast <8 x i32> %9655 to <4 x i64>
  %9657 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 4
  %9658 = bitcast <4 x i64>* %9657 to <8 x i32>*
  %9659 = load <8 x i32>, <8 x i32>* %9658, align 32
  %9660 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 6
  %9661 = bitcast <4 x i64>* %9660 to <8 x i32>*
  %9662 = load <8 x i32>, <8 x i32>* %9661, align 32
  %9663 = shufflevector <8 x i32> %9659, <8 x i32> %9662, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %9664 = bitcast <8 x i32> %9663 to <4 x i64>
  %9665 = shufflevector <8 x i32> %9659, <8 x i32> %9662, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %9666 = bitcast <8 x i32> %9665 to <4 x i64>
  %9667 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 8
  %9668 = bitcast <4 x i64>* %9667 to <8 x i32>*
  %9669 = load <8 x i32>, <8 x i32>* %9668, align 32
  %9670 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 10
  %9671 = bitcast <4 x i64>* %9670 to <8 x i32>*
  %9672 = load <8 x i32>, <8 x i32>* %9671, align 32
  %9673 = shufflevector <8 x i32> %9669, <8 x i32> %9672, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %9674 = bitcast <8 x i32> %9673 to <4 x i64>
  %9675 = shufflevector <8 x i32> %9669, <8 x i32> %9672, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %9676 = bitcast <8 x i32> %9675 to <4 x i64>
  %9677 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 12
  %9678 = bitcast <4 x i64>* %9677 to <8 x i32>*
  %9679 = load <8 x i32>, <8 x i32>* %9678, align 32
  %9680 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 14
  %9681 = bitcast <4 x i64>* %9680 to <8 x i32>*
  %9682 = load <8 x i32>, <8 x i32>* %9681, align 32
  %9683 = shufflevector <8 x i32> %9679, <8 x i32> %9682, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %9684 = bitcast <8 x i32> %9683 to <4 x i64>
  %9685 = shufflevector <8 x i32> %9679, <8 x i32> %9682, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %9686 = bitcast <8 x i32> %9685 to <4 x i64>
  %9687 = shufflevector <4 x i64> %9654, <4 x i64> %9664, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %9688 = shufflevector <4 x i64> %9674, <4 x i64> %9684, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %9689 = bitcast <4 x i64> %9687 to <8 x i32>
  %9690 = bitcast <4 x i64> %9688 to <8 x i32>
  %9691 = shufflevector <8 x i32> %9689, <8 x i32> %9690, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %9692 = bitcast [32 x <4 x i64>]* %8 to <8 x i32>*
  store <8 x i32> %9691, <8 x i32>* %9692, align 32
  %9693 = shufflevector <8 x i32> %9689, <8 x i32> %9690, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %9694 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 8
  %9695 = bitcast <4 x i64>* %9694 to <8 x i32>*
  store <8 x i32> %9693, <8 x i32>* %9695, align 32
  %9696 = shufflevector <4 x i64> %9654, <4 x i64> %9664, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %9697 = shufflevector <4 x i64> %9674, <4 x i64> %9684, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %9698 = bitcast <4 x i64> %9696 to <8 x i32>
  %9699 = bitcast <4 x i64> %9697 to <8 x i32>
  %9700 = shufflevector <8 x i32> %9698, <8 x i32> %9699, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %9701 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 2
  %9702 = bitcast <4 x i64>* %9701 to <8 x i32>*
  store <8 x i32> %9700, <8 x i32>* %9702, align 32
  %9703 = shufflevector <8 x i32> %9698, <8 x i32> %9699, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %9704 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 10
  %9705 = bitcast <4 x i64>* %9704 to <8 x i32>*
  store <8 x i32> %9703, <8 x i32>* %9705, align 32
  %9706 = shufflevector <4 x i64> %9656, <4 x i64> %9666, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %9707 = shufflevector <4 x i64> %9676, <4 x i64> %9686, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %9708 = bitcast <4 x i64> %9706 to <8 x i32>
  %9709 = bitcast <4 x i64> %9707 to <8 x i32>
  %9710 = shufflevector <8 x i32> %9708, <8 x i32> %9709, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %9711 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 4
  %9712 = bitcast <4 x i64>* %9711 to <8 x i32>*
  store <8 x i32> %9710, <8 x i32>* %9712, align 32
  %9713 = shufflevector <8 x i32> %9708, <8 x i32> %9709, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %9714 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 12
  %9715 = bitcast <4 x i64>* %9714 to <8 x i32>*
  store <8 x i32> %9713, <8 x i32>* %9715, align 32
  %9716 = shufflevector <4 x i64> %9656, <4 x i64> %9666, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %9717 = shufflevector <4 x i64> %9676, <4 x i64> %9686, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %9718 = bitcast <4 x i64> %9716 to <8 x i32>
  %9719 = bitcast <4 x i64> %9717 to <8 x i32>
  %9720 = shufflevector <8 x i32> %9718, <8 x i32> %9719, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %9721 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 6
  %9722 = bitcast <4 x i64>* %9721 to <8 x i32>*
  store <8 x i32> %9720, <8 x i32>* %9722, align 32
  %9723 = shufflevector <8 x i32> %9718, <8 x i32> %9719, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %9724 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 14
  %9725 = bitcast <4 x i64>* %9724 to <8 x i32>*
  store <8 x i32> %9723, <8 x i32>* %9725, align 32
  %9726 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 1
  %9727 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 16
  %9728 = bitcast <4 x i64>* %9726 to <8 x i32>*
  %9729 = load <8 x i32>, <8 x i32>* %9728, align 32
  %9730 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 3
  %9731 = bitcast <4 x i64>* %9730 to <8 x i32>*
  %9732 = load <8 x i32>, <8 x i32>* %9731, align 32
  %9733 = shufflevector <8 x i32> %9729, <8 x i32> %9732, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %9734 = bitcast <8 x i32> %9733 to <4 x i64>
  %9735 = shufflevector <8 x i32> %9729, <8 x i32> %9732, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %9736 = bitcast <8 x i32> %9735 to <4 x i64>
  %9737 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 5
  %9738 = bitcast <4 x i64>* %9737 to <8 x i32>*
  %9739 = load <8 x i32>, <8 x i32>* %9738, align 32
  %9740 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 7
  %9741 = bitcast <4 x i64>* %9740 to <8 x i32>*
  %9742 = load <8 x i32>, <8 x i32>* %9741, align 32
  %9743 = shufflevector <8 x i32> %9739, <8 x i32> %9742, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %9744 = bitcast <8 x i32> %9743 to <4 x i64>
  %9745 = shufflevector <8 x i32> %9739, <8 x i32> %9742, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %9746 = bitcast <8 x i32> %9745 to <4 x i64>
  %9747 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 9
  %9748 = bitcast <4 x i64>* %9747 to <8 x i32>*
  %9749 = load <8 x i32>, <8 x i32>* %9748, align 32
  %9750 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 11
  %9751 = bitcast <4 x i64>* %9750 to <8 x i32>*
  %9752 = load <8 x i32>, <8 x i32>* %9751, align 32
  %9753 = shufflevector <8 x i32> %9749, <8 x i32> %9752, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %9754 = bitcast <8 x i32> %9753 to <4 x i64>
  %9755 = shufflevector <8 x i32> %9749, <8 x i32> %9752, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %9756 = bitcast <8 x i32> %9755 to <4 x i64>
  %9757 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 13
  %9758 = bitcast <4 x i64>* %9757 to <8 x i32>*
  %9759 = load <8 x i32>, <8 x i32>* %9758, align 32
  %9760 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 15
  %9761 = bitcast <4 x i64>* %9760 to <8 x i32>*
  %9762 = load <8 x i32>, <8 x i32>* %9761, align 32
  %9763 = shufflevector <8 x i32> %9759, <8 x i32> %9762, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %9764 = bitcast <8 x i32> %9763 to <4 x i64>
  %9765 = shufflevector <8 x i32> %9759, <8 x i32> %9762, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %9766 = bitcast <8 x i32> %9765 to <4 x i64>
  %9767 = shufflevector <4 x i64> %9734, <4 x i64> %9744, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %9768 = shufflevector <4 x i64> %9754, <4 x i64> %9764, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %9769 = bitcast <4 x i64> %9767 to <8 x i32>
  %9770 = bitcast <4 x i64> %9768 to <8 x i32>
  %9771 = shufflevector <8 x i32> %9769, <8 x i32> %9770, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %9772 = bitcast <4 x i64>* %9727 to <8 x i32>*
  store <8 x i32> %9771, <8 x i32>* %9772, align 32
  %9773 = shufflevector <8 x i32> %9769, <8 x i32> %9770, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %9774 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 24
  %9775 = bitcast <4 x i64>* %9774 to <8 x i32>*
  store <8 x i32> %9773, <8 x i32>* %9775, align 32
  %9776 = shufflevector <4 x i64> %9734, <4 x i64> %9744, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %9777 = shufflevector <4 x i64> %9754, <4 x i64> %9764, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %9778 = bitcast <4 x i64> %9776 to <8 x i32>
  %9779 = bitcast <4 x i64> %9777 to <8 x i32>
  %9780 = shufflevector <8 x i32> %9778, <8 x i32> %9779, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %9781 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 18
  %9782 = bitcast <4 x i64>* %9781 to <8 x i32>*
  store <8 x i32> %9780, <8 x i32>* %9782, align 32
  %9783 = shufflevector <8 x i32> %9778, <8 x i32> %9779, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %9784 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 26
  %9785 = bitcast <4 x i64>* %9784 to <8 x i32>*
  store <8 x i32> %9783, <8 x i32>* %9785, align 32
  %9786 = shufflevector <4 x i64> %9736, <4 x i64> %9746, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %9787 = shufflevector <4 x i64> %9756, <4 x i64> %9766, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %9788 = bitcast <4 x i64> %9786 to <8 x i32>
  %9789 = bitcast <4 x i64> %9787 to <8 x i32>
  %9790 = shufflevector <8 x i32> %9788, <8 x i32> %9789, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %9791 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 20
  %9792 = bitcast <4 x i64>* %9791 to <8 x i32>*
  store <8 x i32> %9790, <8 x i32>* %9792, align 32
  %9793 = shufflevector <8 x i32> %9788, <8 x i32> %9789, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %9794 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 28
  %9795 = bitcast <4 x i64>* %9794 to <8 x i32>*
  store <8 x i32> %9793, <8 x i32>* %9795, align 32
  %9796 = shufflevector <4 x i64> %9736, <4 x i64> %9746, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %9797 = shufflevector <4 x i64> %9756, <4 x i64> %9766, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %9798 = bitcast <4 x i64> %9796 to <8 x i32>
  %9799 = bitcast <4 x i64> %9797 to <8 x i32>
  %9800 = shufflevector <8 x i32> %9798, <8 x i32> %9799, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %9801 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 22
  %9802 = bitcast <4 x i64>* %9801 to <8 x i32>*
  store <8 x i32> %9800, <8 x i32>* %9802, align 32
  %9803 = shufflevector <8 x i32> %9798, <8 x i32> %9799, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %9804 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 30
  %9805 = bitcast <4 x i64>* %9804 to <8 x i32>*
  store <8 x i32> %9803, <8 x i32>* %9805, align 32
  %9806 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 16
  %9807 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 1
  %9808 = bitcast <4 x i64>* %9806 to <8 x i32>*
  %9809 = load <8 x i32>, <8 x i32>* %9808, align 32
  %9810 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 18
  %9811 = bitcast <4 x i64>* %9810 to <8 x i32>*
  %9812 = load <8 x i32>, <8 x i32>* %9811, align 32
  %9813 = shufflevector <8 x i32> %9809, <8 x i32> %9812, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %9814 = bitcast <8 x i32> %9813 to <4 x i64>
  %9815 = shufflevector <8 x i32> %9809, <8 x i32> %9812, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %9816 = bitcast <8 x i32> %9815 to <4 x i64>
  %9817 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 20
  %9818 = bitcast <4 x i64>* %9817 to <8 x i32>*
  %9819 = load <8 x i32>, <8 x i32>* %9818, align 32
  %9820 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 22
  %9821 = bitcast <4 x i64>* %9820 to <8 x i32>*
  %9822 = load <8 x i32>, <8 x i32>* %9821, align 32
  %9823 = shufflevector <8 x i32> %9819, <8 x i32> %9822, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %9824 = bitcast <8 x i32> %9823 to <4 x i64>
  %9825 = shufflevector <8 x i32> %9819, <8 x i32> %9822, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %9826 = bitcast <8 x i32> %9825 to <4 x i64>
  %9827 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 24
  %9828 = bitcast <4 x i64>* %9827 to <8 x i32>*
  %9829 = load <8 x i32>, <8 x i32>* %9828, align 32
  %9830 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 26
  %9831 = bitcast <4 x i64>* %9830 to <8 x i32>*
  %9832 = load <8 x i32>, <8 x i32>* %9831, align 32
  %9833 = shufflevector <8 x i32> %9829, <8 x i32> %9832, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %9834 = bitcast <8 x i32> %9833 to <4 x i64>
  %9835 = shufflevector <8 x i32> %9829, <8 x i32> %9832, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %9836 = bitcast <8 x i32> %9835 to <4 x i64>
  %9837 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 28
  %9838 = bitcast <4 x i64>* %9837 to <8 x i32>*
  %9839 = load <8 x i32>, <8 x i32>* %9838, align 32
  %9840 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 30
  %9841 = bitcast <4 x i64>* %9840 to <8 x i32>*
  %9842 = load <8 x i32>, <8 x i32>* %9841, align 32
  %9843 = shufflevector <8 x i32> %9839, <8 x i32> %9842, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %9844 = bitcast <8 x i32> %9843 to <4 x i64>
  %9845 = shufflevector <8 x i32> %9839, <8 x i32> %9842, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %9846 = bitcast <8 x i32> %9845 to <4 x i64>
  %9847 = shufflevector <4 x i64> %9814, <4 x i64> %9824, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %9848 = shufflevector <4 x i64> %9834, <4 x i64> %9844, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %9849 = bitcast <4 x i64> %9847 to <8 x i32>
  %9850 = bitcast <4 x i64> %9848 to <8 x i32>
  %9851 = shufflevector <8 x i32> %9849, <8 x i32> %9850, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %9852 = bitcast <4 x i64>* %9807 to <8 x i32>*
  store <8 x i32> %9851, <8 x i32>* %9852, align 32
  %9853 = shufflevector <8 x i32> %9849, <8 x i32> %9850, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %9854 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 9
  %9855 = bitcast <4 x i64>* %9854 to <8 x i32>*
  store <8 x i32> %9853, <8 x i32>* %9855, align 32
  %9856 = shufflevector <4 x i64> %9814, <4 x i64> %9824, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %9857 = shufflevector <4 x i64> %9834, <4 x i64> %9844, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %9858 = bitcast <4 x i64> %9856 to <8 x i32>
  %9859 = bitcast <4 x i64> %9857 to <8 x i32>
  %9860 = shufflevector <8 x i32> %9858, <8 x i32> %9859, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %9861 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 3
  %9862 = bitcast <4 x i64>* %9861 to <8 x i32>*
  store <8 x i32> %9860, <8 x i32>* %9862, align 32
  %9863 = shufflevector <8 x i32> %9858, <8 x i32> %9859, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %9864 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 11
  %9865 = bitcast <4 x i64>* %9864 to <8 x i32>*
  store <8 x i32> %9863, <8 x i32>* %9865, align 32
  %9866 = shufflevector <4 x i64> %9816, <4 x i64> %9826, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %9867 = shufflevector <4 x i64> %9836, <4 x i64> %9846, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %9868 = bitcast <4 x i64> %9866 to <8 x i32>
  %9869 = bitcast <4 x i64> %9867 to <8 x i32>
  %9870 = shufflevector <8 x i32> %9868, <8 x i32> %9869, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %9871 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 5
  %9872 = bitcast <4 x i64>* %9871 to <8 x i32>*
  store <8 x i32> %9870, <8 x i32>* %9872, align 32
  %9873 = shufflevector <8 x i32> %9868, <8 x i32> %9869, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %9874 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 13
  %9875 = bitcast <4 x i64>* %9874 to <8 x i32>*
  store <8 x i32> %9873, <8 x i32>* %9875, align 32
  %9876 = shufflevector <4 x i64> %9816, <4 x i64> %9826, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %9877 = shufflevector <4 x i64> %9836, <4 x i64> %9846, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %9878 = bitcast <4 x i64> %9876 to <8 x i32>
  %9879 = bitcast <4 x i64> %9877 to <8 x i32>
  %9880 = shufflevector <8 x i32> %9878, <8 x i32> %9879, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %9881 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 7
  %9882 = bitcast <4 x i64>* %9881 to <8 x i32>*
  store <8 x i32> %9880, <8 x i32>* %9882, align 32
  %9883 = shufflevector <8 x i32> %9878, <8 x i32> %9879, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %9884 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 15
  %9885 = bitcast <4 x i64>* %9884 to <8 x i32>*
  store <8 x i32> %9883, <8 x i32>* %9885, align 32
  %9886 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 17
  %9887 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 17
  %9888 = bitcast <4 x i64>* %9886 to <8 x i32>*
  %9889 = load <8 x i32>, <8 x i32>* %9888, align 32
  %9890 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 19
  %9891 = bitcast <4 x i64>* %9890 to <8 x i32>*
  %9892 = load <8 x i32>, <8 x i32>* %9891, align 32
  %9893 = shufflevector <8 x i32> %9889, <8 x i32> %9892, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %9894 = bitcast <8 x i32> %9893 to <4 x i64>
  %9895 = shufflevector <8 x i32> %9889, <8 x i32> %9892, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %9896 = bitcast <8 x i32> %9895 to <4 x i64>
  %9897 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 21
  %9898 = bitcast <4 x i64>* %9897 to <8 x i32>*
  %9899 = load <8 x i32>, <8 x i32>* %9898, align 32
  %9900 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 23
  %9901 = bitcast <4 x i64>* %9900 to <8 x i32>*
  %9902 = load <8 x i32>, <8 x i32>* %9901, align 32
  %9903 = shufflevector <8 x i32> %9899, <8 x i32> %9902, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %9904 = bitcast <8 x i32> %9903 to <4 x i64>
  %9905 = shufflevector <8 x i32> %9899, <8 x i32> %9902, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %9906 = bitcast <8 x i32> %9905 to <4 x i64>
  %9907 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 25
  %9908 = bitcast <4 x i64>* %9907 to <8 x i32>*
  %9909 = load <8 x i32>, <8 x i32>* %9908, align 32
  %9910 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 27
  %9911 = bitcast <4 x i64>* %9910 to <8 x i32>*
  %9912 = load <8 x i32>, <8 x i32>* %9911, align 32
  %9913 = shufflevector <8 x i32> %9909, <8 x i32> %9912, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %9914 = bitcast <8 x i32> %9913 to <4 x i64>
  %9915 = shufflevector <8 x i32> %9909, <8 x i32> %9912, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %9916 = bitcast <8 x i32> %9915 to <4 x i64>
  %9917 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 29
  %9918 = bitcast <4 x i64>* %9917 to <8 x i32>*
  %9919 = load <8 x i32>, <8 x i32>* %9918, align 32
  %9920 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %10, i64 0, i64 31
  %9921 = bitcast <4 x i64>* %9920 to <8 x i32>*
  %9922 = load <8 x i32>, <8 x i32>* %9921, align 32
  %9923 = shufflevector <8 x i32> %9919, <8 x i32> %9922, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %9924 = bitcast <8 x i32> %9923 to <4 x i64>
  %9925 = shufflevector <8 x i32> %9919, <8 x i32> %9922, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %9926 = bitcast <8 x i32> %9925 to <4 x i64>
  %9927 = shufflevector <4 x i64> %9894, <4 x i64> %9904, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %9928 = shufflevector <4 x i64> %9914, <4 x i64> %9924, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %9929 = bitcast <4 x i64> %9927 to <8 x i32>
  %9930 = bitcast <4 x i64> %9928 to <8 x i32>
  %9931 = shufflevector <8 x i32> %9929, <8 x i32> %9930, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %9932 = bitcast <4 x i64>* %9887 to <8 x i32>*
  store <8 x i32> %9931, <8 x i32>* %9932, align 32
  %9933 = shufflevector <8 x i32> %9929, <8 x i32> %9930, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %9934 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 25
  %9935 = bitcast <4 x i64>* %9934 to <8 x i32>*
  store <8 x i32> %9933, <8 x i32>* %9935, align 32
  %9936 = shufflevector <4 x i64> %9894, <4 x i64> %9904, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %9937 = shufflevector <4 x i64> %9914, <4 x i64> %9924, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %9938 = bitcast <4 x i64> %9936 to <8 x i32>
  %9939 = bitcast <4 x i64> %9937 to <8 x i32>
  %9940 = shufflevector <8 x i32> %9938, <8 x i32> %9939, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %9941 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 19
  %9942 = bitcast <4 x i64>* %9941 to <8 x i32>*
  store <8 x i32> %9940, <8 x i32>* %9942, align 32
  %9943 = shufflevector <8 x i32> %9938, <8 x i32> %9939, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %9944 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 27
  %9945 = bitcast <4 x i64>* %9944 to <8 x i32>*
  store <8 x i32> %9943, <8 x i32>* %9945, align 32
  %9946 = shufflevector <4 x i64> %9896, <4 x i64> %9906, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %9947 = shufflevector <4 x i64> %9916, <4 x i64> %9926, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %9948 = bitcast <4 x i64> %9946 to <8 x i32>
  %9949 = bitcast <4 x i64> %9947 to <8 x i32>
  %9950 = shufflevector <8 x i32> %9948, <8 x i32> %9949, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %9951 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 21
  %9952 = bitcast <4 x i64>* %9951 to <8 x i32>*
  store <8 x i32> %9950, <8 x i32>* %9952, align 32
  %9953 = shufflevector <8 x i32> %9948, <8 x i32> %9949, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %9954 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 29
  %9955 = bitcast <4 x i64>* %9954 to <8 x i32>*
  store <8 x i32> %9953, <8 x i32>* %9955, align 32
  %9956 = shufflevector <4 x i64> %9896, <4 x i64> %9906, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %9957 = shufflevector <4 x i64> %9916, <4 x i64> %9926, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %9958 = bitcast <4 x i64> %9956 to <8 x i32>
  %9959 = bitcast <4 x i64> %9957 to <8 x i32>
  %9960 = shufflevector <8 x i32> %9958, <8 x i32> %9959, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %9961 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 23
  %9962 = bitcast <4 x i64>* %9961 to <8 x i32>*
  store <8 x i32> %9960, <8 x i32>* %9962, align 32
  %9963 = shufflevector <8 x i32> %9958, <8 x i32> %9959, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %9964 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %8, i64 0, i64 31
  %9965 = bitcast <4 x i64>* %9964 to <8 x i32>*
  store <8 x i32> %9963, <8 x i32>* %9965, align 32
  %9966 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 2, i64 2), align 2
  call void @fadst16_avx2(<4 x i64>* nonnull %9467, <4 x i64>* nonnull %9584, i8 signext %9966, i32 2, i32 2)
  %9967 = load <8 x i32>, <8 x i32>* %9648, align 32
  %9968 = load <8 x i32>, <8 x i32>* %9651, align 32
  %9969 = shufflevector <8 x i32> %9967, <8 x i32> %9968, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %9970 = bitcast <8 x i32> %9969 to <4 x i64>
  %9971 = shufflevector <8 x i32> %9967, <8 x i32> %9968, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %9972 = bitcast <8 x i32> %9971 to <4 x i64>
  %9973 = load <8 x i32>, <8 x i32>* %9658, align 32
  %9974 = load <8 x i32>, <8 x i32>* %9661, align 32
  %9975 = shufflevector <8 x i32> %9973, <8 x i32> %9974, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %9976 = bitcast <8 x i32> %9975 to <4 x i64>
  %9977 = shufflevector <8 x i32> %9973, <8 x i32> %9974, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %9978 = bitcast <8 x i32> %9977 to <4 x i64>
  %9979 = load <8 x i32>, <8 x i32>* %9668, align 32
  %9980 = load <8 x i32>, <8 x i32>* %9671, align 32
  %9981 = shufflevector <8 x i32> %9979, <8 x i32> %9980, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %9982 = bitcast <8 x i32> %9981 to <4 x i64>
  %9983 = shufflevector <8 x i32> %9979, <8 x i32> %9980, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %9984 = bitcast <8 x i32> %9983 to <4 x i64>
  %9985 = load <8 x i32>, <8 x i32>* %9678, align 32
  %9986 = load <8 x i32>, <8 x i32>* %9681, align 32
  %9987 = shufflevector <8 x i32> %9985, <8 x i32> %9986, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %9988 = bitcast <8 x i32> %9987 to <4 x i64>
  %9989 = shufflevector <8 x i32> %9985, <8 x i32> %9986, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %9990 = bitcast <8 x i32> %9989 to <4 x i64>
  %9991 = shufflevector <4 x i64> %9970, <4 x i64> %9976, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %9992 = shufflevector <4 x i64> %9982, <4 x i64> %9988, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %9993 = bitcast <4 x i64> %9991 to <8 x i32>
  %9994 = bitcast <4 x i64> %9992 to <8 x i32>
  %9995 = shufflevector <8 x i32> %9993, <8 x i32> %9994, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %9995, <8 x i32>* %9692, align 32
  %9996 = shufflevector <8 x i32> %9993, <8 x i32> %9994, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %9996, <8 x i32>* %9695, align 32
  %9997 = shufflevector <4 x i64> %9970, <4 x i64> %9976, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %9998 = shufflevector <4 x i64> %9982, <4 x i64> %9988, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %9999 = bitcast <4 x i64> %9997 to <8 x i32>
  %10000 = bitcast <4 x i64> %9998 to <8 x i32>
  %10001 = shufflevector <8 x i32> %9999, <8 x i32> %10000, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %10001, <8 x i32>* %9702, align 32
  %10002 = shufflevector <8 x i32> %9999, <8 x i32> %10000, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %10002, <8 x i32>* %9705, align 32
  %10003 = shufflevector <4 x i64> %9972, <4 x i64> %9978, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %10004 = shufflevector <4 x i64> %9984, <4 x i64> %9990, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %10005 = bitcast <4 x i64> %10003 to <8 x i32>
  %10006 = bitcast <4 x i64> %10004 to <8 x i32>
  %10007 = shufflevector <8 x i32> %10005, <8 x i32> %10006, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %10007, <8 x i32>* %9712, align 32
  %10008 = shufflevector <8 x i32> %10005, <8 x i32> %10006, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %10008, <8 x i32>* %9715, align 32
  %10009 = shufflevector <4 x i64> %9972, <4 x i64> %9978, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %10010 = shufflevector <4 x i64> %9984, <4 x i64> %9990, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %10011 = bitcast <4 x i64> %10009 to <8 x i32>
  %10012 = bitcast <4 x i64> %10010 to <8 x i32>
  %10013 = shufflevector <8 x i32> %10011, <8 x i32> %10012, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %10013, <8 x i32>* %9722, align 32
  %10014 = shufflevector <8 x i32> %10011, <8 x i32> %10012, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %10014, <8 x i32>* %9725, align 32
  %10015 = load <8 x i32>, <8 x i32>* %9728, align 32
  %10016 = load <8 x i32>, <8 x i32>* %9731, align 32
  %10017 = shufflevector <8 x i32> %10015, <8 x i32> %10016, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %10018 = bitcast <8 x i32> %10017 to <4 x i64>
  %10019 = shufflevector <8 x i32> %10015, <8 x i32> %10016, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %10020 = bitcast <8 x i32> %10019 to <4 x i64>
  %10021 = load <8 x i32>, <8 x i32>* %9738, align 32
  %10022 = load <8 x i32>, <8 x i32>* %9741, align 32
  %10023 = shufflevector <8 x i32> %10021, <8 x i32> %10022, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %10024 = bitcast <8 x i32> %10023 to <4 x i64>
  %10025 = shufflevector <8 x i32> %10021, <8 x i32> %10022, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %10026 = bitcast <8 x i32> %10025 to <4 x i64>
  %10027 = load <8 x i32>, <8 x i32>* %9748, align 32
  %10028 = load <8 x i32>, <8 x i32>* %9751, align 32
  %10029 = shufflevector <8 x i32> %10027, <8 x i32> %10028, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %10030 = bitcast <8 x i32> %10029 to <4 x i64>
  %10031 = shufflevector <8 x i32> %10027, <8 x i32> %10028, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %10032 = bitcast <8 x i32> %10031 to <4 x i64>
  %10033 = load <8 x i32>, <8 x i32>* %9758, align 32
  %10034 = load <8 x i32>, <8 x i32>* %9761, align 32
  %10035 = shufflevector <8 x i32> %10033, <8 x i32> %10034, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %10036 = bitcast <8 x i32> %10035 to <4 x i64>
  %10037 = shufflevector <8 x i32> %10033, <8 x i32> %10034, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %10038 = bitcast <8 x i32> %10037 to <4 x i64>
  %10039 = shufflevector <4 x i64> %10018, <4 x i64> %10024, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %10040 = shufflevector <4 x i64> %10030, <4 x i64> %10036, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %10041 = bitcast <4 x i64> %10039 to <8 x i32>
  %10042 = bitcast <4 x i64> %10040 to <8 x i32>
  %10043 = shufflevector <8 x i32> %10041, <8 x i32> %10042, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %10043, <8 x i32>* %9772, align 32
  %10044 = shufflevector <8 x i32> %10041, <8 x i32> %10042, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %10044, <8 x i32>* %9775, align 32
  %10045 = shufflevector <4 x i64> %10018, <4 x i64> %10024, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %10046 = shufflevector <4 x i64> %10030, <4 x i64> %10036, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %10047 = bitcast <4 x i64> %10045 to <8 x i32>
  %10048 = bitcast <4 x i64> %10046 to <8 x i32>
  %10049 = shufflevector <8 x i32> %10047, <8 x i32> %10048, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %10049, <8 x i32>* %9782, align 32
  %10050 = shufflevector <8 x i32> %10047, <8 x i32> %10048, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %10050, <8 x i32>* %9785, align 32
  %10051 = shufflevector <4 x i64> %10020, <4 x i64> %10026, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %10052 = shufflevector <4 x i64> %10032, <4 x i64> %10038, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %10053 = bitcast <4 x i64> %10051 to <8 x i32>
  %10054 = bitcast <4 x i64> %10052 to <8 x i32>
  %10055 = shufflevector <8 x i32> %10053, <8 x i32> %10054, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %10055, <8 x i32>* %9792, align 32
  %10056 = shufflevector <8 x i32> %10053, <8 x i32> %10054, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %10056, <8 x i32>* %9795, align 32
  %10057 = shufflevector <4 x i64> %10020, <4 x i64> %10026, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %10058 = shufflevector <4 x i64> %10032, <4 x i64> %10038, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %10059 = bitcast <4 x i64> %10057 to <8 x i32>
  %10060 = bitcast <4 x i64> %10058 to <8 x i32>
  %10061 = shufflevector <8 x i32> %10059, <8 x i32> %10060, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %10061, <8 x i32>* %9802, align 32
  %10062 = shufflevector <8 x i32> %10059, <8 x i32> %10060, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %10062, <8 x i32>* %9805, align 32
  %10063 = load <8 x i32>, <8 x i32>* %9808, align 32
  %10064 = load <8 x i32>, <8 x i32>* %9811, align 32
  %10065 = shufflevector <8 x i32> %10063, <8 x i32> %10064, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %10066 = bitcast <8 x i32> %10065 to <4 x i64>
  %10067 = shufflevector <8 x i32> %10063, <8 x i32> %10064, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %10068 = bitcast <8 x i32> %10067 to <4 x i64>
  %10069 = load <8 x i32>, <8 x i32>* %9818, align 32
  %10070 = load <8 x i32>, <8 x i32>* %9821, align 32
  %10071 = shufflevector <8 x i32> %10069, <8 x i32> %10070, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %10072 = bitcast <8 x i32> %10071 to <4 x i64>
  %10073 = shufflevector <8 x i32> %10069, <8 x i32> %10070, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %10074 = bitcast <8 x i32> %10073 to <4 x i64>
  %10075 = load <8 x i32>, <8 x i32>* %9828, align 32
  %10076 = load <8 x i32>, <8 x i32>* %9831, align 32
  %10077 = shufflevector <8 x i32> %10075, <8 x i32> %10076, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %10078 = bitcast <8 x i32> %10077 to <4 x i64>
  %10079 = shufflevector <8 x i32> %10075, <8 x i32> %10076, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %10080 = bitcast <8 x i32> %10079 to <4 x i64>
  %10081 = load <8 x i32>, <8 x i32>* %9838, align 32
  %10082 = load <8 x i32>, <8 x i32>* %9841, align 32
  %10083 = shufflevector <8 x i32> %10081, <8 x i32> %10082, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %10084 = bitcast <8 x i32> %10083 to <4 x i64>
  %10085 = shufflevector <8 x i32> %10081, <8 x i32> %10082, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %10086 = bitcast <8 x i32> %10085 to <4 x i64>
  %10087 = shufflevector <4 x i64> %10066, <4 x i64> %10072, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %10088 = shufflevector <4 x i64> %10078, <4 x i64> %10084, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %10089 = bitcast <4 x i64> %10087 to <8 x i32>
  %10090 = bitcast <4 x i64> %10088 to <8 x i32>
  %10091 = shufflevector <8 x i32> %10089, <8 x i32> %10090, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %10091, <8 x i32>* %9852, align 32
  %10092 = shufflevector <8 x i32> %10089, <8 x i32> %10090, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %10092, <8 x i32>* %9855, align 32
  %10093 = shufflevector <4 x i64> %10066, <4 x i64> %10072, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %10094 = shufflevector <4 x i64> %10078, <4 x i64> %10084, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %10095 = bitcast <4 x i64> %10093 to <8 x i32>
  %10096 = bitcast <4 x i64> %10094 to <8 x i32>
  %10097 = shufflevector <8 x i32> %10095, <8 x i32> %10096, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %10097, <8 x i32>* %9862, align 32
  %10098 = shufflevector <8 x i32> %10095, <8 x i32> %10096, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %10098, <8 x i32>* %9865, align 32
  %10099 = shufflevector <4 x i64> %10068, <4 x i64> %10074, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %10100 = shufflevector <4 x i64> %10080, <4 x i64> %10086, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %10101 = bitcast <4 x i64> %10099 to <8 x i32>
  %10102 = bitcast <4 x i64> %10100 to <8 x i32>
  %10103 = shufflevector <8 x i32> %10101, <8 x i32> %10102, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %10103, <8 x i32>* %9872, align 32
  %10104 = shufflevector <8 x i32> %10101, <8 x i32> %10102, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %10104, <8 x i32>* %9875, align 32
  %10105 = shufflevector <4 x i64> %10068, <4 x i64> %10074, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %10106 = shufflevector <4 x i64> %10080, <4 x i64> %10086, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %10107 = bitcast <4 x i64> %10105 to <8 x i32>
  %10108 = bitcast <4 x i64> %10106 to <8 x i32>
  %10109 = shufflevector <8 x i32> %10107, <8 x i32> %10108, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %10109, <8 x i32>* %9882, align 32
  %10110 = shufflevector <8 x i32> %10107, <8 x i32> %10108, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %10110, <8 x i32>* %9885, align 32
  %10111 = load <8 x i32>, <8 x i32>* %9888, align 32
  %10112 = load <8 x i32>, <8 x i32>* %9891, align 32
  %10113 = shufflevector <8 x i32> %10111, <8 x i32> %10112, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %10114 = bitcast <8 x i32> %10113 to <4 x i64>
  %10115 = shufflevector <8 x i32> %10111, <8 x i32> %10112, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %10116 = bitcast <8 x i32> %10115 to <4 x i64>
  %10117 = load <8 x i32>, <8 x i32>* %9898, align 32
  %10118 = load <8 x i32>, <8 x i32>* %9901, align 32
  %10119 = shufflevector <8 x i32> %10117, <8 x i32> %10118, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %10120 = bitcast <8 x i32> %10119 to <4 x i64>
  %10121 = shufflevector <8 x i32> %10117, <8 x i32> %10118, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %10122 = bitcast <8 x i32> %10121 to <4 x i64>
  %10123 = load <8 x i32>, <8 x i32>* %9908, align 32
  %10124 = load <8 x i32>, <8 x i32>* %9911, align 32
  %10125 = shufflevector <8 x i32> %10123, <8 x i32> %10124, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %10126 = bitcast <8 x i32> %10125 to <4 x i64>
  %10127 = shufflevector <8 x i32> %10123, <8 x i32> %10124, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %10128 = bitcast <8 x i32> %10127 to <4 x i64>
  %10129 = load <8 x i32>, <8 x i32>* %9918, align 32
  %10130 = load <8 x i32>, <8 x i32>* %9921, align 32
  %10131 = shufflevector <8 x i32> %10129, <8 x i32> %10130, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %10132 = bitcast <8 x i32> %10131 to <4 x i64>
  %10133 = shufflevector <8 x i32> %10129, <8 x i32> %10130, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %10134 = bitcast <8 x i32> %10133 to <4 x i64>
  %10135 = shufflevector <4 x i64> %10114, <4 x i64> %10120, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %10136 = shufflevector <4 x i64> %10126, <4 x i64> %10132, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %10137 = bitcast <4 x i64> %10135 to <8 x i32>
  %10138 = bitcast <4 x i64> %10136 to <8 x i32>
  %10139 = shufflevector <8 x i32> %10137, <8 x i32> %10138, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %10139, <8 x i32>* %9932, align 32
  %10140 = shufflevector <8 x i32> %10137, <8 x i32> %10138, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %10140, <8 x i32>* %9935, align 32
  %10141 = shufflevector <4 x i64> %10114, <4 x i64> %10120, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %10142 = shufflevector <4 x i64> %10126, <4 x i64> %10132, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %10143 = bitcast <4 x i64> %10141 to <8 x i32>
  %10144 = bitcast <4 x i64> %10142 to <8 x i32>
  %10145 = shufflevector <8 x i32> %10143, <8 x i32> %10144, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %10145, <8 x i32>* %9942, align 32
  %10146 = shufflevector <8 x i32> %10143, <8 x i32> %10144, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %10146, <8 x i32>* %9945, align 32
  %10147 = shufflevector <4 x i64> %10116, <4 x i64> %10122, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %10148 = shufflevector <4 x i64> %10128, <4 x i64> %10134, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %10149 = bitcast <4 x i64> %10147 to <8 x i32>
  %10150 = bitcast <4 x i64> %10148 to <8 x i32>
  %10151 = shufflevector <8 x i32> %10149, <8 x i32> %10150, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %10151, <8 x i32>* %9952, align 32
  %10152 = shufflevector <8 x i32> %10149, <8 x i32> %10150, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %10152, <8 x i32>* %9955, align 32
  %10153 = shufflevector <4 x i64> %10116, <4 x i64> %10122, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %10154 = shufflevector <4 x i64> %10128, <4 x i64> %10134, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %10155 = bitcast <4 x i64> %10153 to <8 x i32>
  %10156 = bitcast <4 x i64> %10154 to <8 x i32>
  %10157 = shufflevector <8 x i32> %10155, <8 x i32> %10156, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %10157, <8 x i32>* %9962, align 32
  %10158 = shufflevector <8 x i32> %10155, <8 x i32> %10156, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %10158, <8 x i32>* %9965, align 32
  br label %10159

10159:                                            ; preds = %9364, %8331, %7298, %7037, %252, %1003, %1754, %2505, %3256, %4009, %4762, %5515, %6266, %7579, %8612, %9647
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 32 %6, i8* nonnull align 32 %9, i64 1024, i1 false)
  br label %10160

10160:                                            ; preds = %10159, %5
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %11) #7
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %9) #7
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @fdct16_avx2(<4 x i64>* nocapture readonly, <4 x i64>* nocapture, i8 signext, i32, i32) #2 {
  %6 = sext i8 %2 to i32
  %7 = add nsw i32 %6, -10
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 32
  %10 = load i32, i32* %9, align 16
  %11 = insertelement <8 x i32> undef, i32 %10, i32 0
  %12 = shufflevector <8 x i32> %11, <8 x i32> undef, <8 x i32> zeroinitializer
  %13 = sub nsw i32 0, %10
  %14 = insertelement <8 x i32> undef, i32 %13, i32 0
  %15 = shufflevector <8 x i32> %14, <8 x i32> undef, <8 x i32> zeroinitializer
  %16 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 48
  %17 = load i32, i32* %16, align 16
  %18 = insertelement <8 x i32> undef, i32 %17, i32 0
  %19 = shufflevector <8 x i32> %18, <8 x i32> undef, <8 x i32> zeroinitializer
  %20 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 16
  %21 = load i32, i32* %20, align 16
  %22 = insertelement <8 x i32> undef, i32 %21, i32 0
  %23 = shufflevector <8 x i32> %22, <8 x i32> undef, <8 x i32> zeroinitializer
  %24 = sub nsw i32 0, %17
  %25 = insertelement <8 x i32> undef, i32 %24, i32 0
  %26 = shufflevector <8 x i32> %25, <8 x i32> undef, <8 x i32> zeroinitializer
  %27 = sub nsw i32 0, %21
  %28 = insertelement <8 x i32> undef, i32 %27, i32 0
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> zeroinitializer
  %30 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 56
  %31 = load i32, i32* %30, align 16
  %32 = insertelement <8 x i32> undef, i32 %31, i32 0
  %33 = shufflevector <8 x i32> %32, <8 x i32> undef, <8 x i32> zeroinitializer
  %34 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 8
  %35 = load i32, i32* %34, align 16
  %36 = insertelement <8 x i32> undef, i32 %35, i32 0
  %37 = shufflevector <8 x i32> %36, <8 x i32> undef, <8 x i32> zeroinitializer
  %38 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 24
  %39 = load i32, i32* %38, align 16
  %40 = insertelement <8 x i32> undef, i32 %39, i32 0
  %41 = shufflevector <8 x i32> %40, <8 x i32> undef, <8 x i32> zeroinitializer
  %42 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 40
  %43 = load i32, i32* %42, align 16
  %44 = insertelement <8 x i32> undef, i32 %43, i32 0
  %45 = shufflevector <8 x i32> %44, <8 x i32> undef, <8 x i32> zeroinitializer
  %46 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 60
  %47 = load i32, i32* %46, align 16
  %48 = insertelement <8 x i32> undef, i32 %47, i32 0
  %49 = shufflevector <8 x i32> %48, <8 x i32> undef, <8 x i32> zeroinitializer
  %50 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 4
  %51 = load i32, i32* %50, align 16
  %52 = insertelement <8 x i32> undef, i32 %51, i32 0
  %53 = shufflevector <8 x i32> %52, <8 x i32> undef, <8 x i32> zeroinitializer
  %54 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 28
  %55 = load i32, i32* %54, align 16
  %56 = insertelement <8 x i32> undef, i32 %55, i32 0
  %57 = shufflevector <8 x i32> %56, <8 x i32> undef, <8 x i32> zeroinitializer
  %58 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 36
  %59 = load i32, i32* %58, align 16
  %60 = insertelement <8 x i32> undef, i32 %59, i32 0
  %61 = shufflevector <8 x i32> %60, <8 x i32> undef, <8 x i32> zeroinitializer
  %62 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 44
  %63 = load i32, i32* %62, align 16
  %64 = insertelement <8 x i32> undef, i32 %63, i32 0
  %65 = shufflevector <8 x i32> %64, <8 x i32> undef, <8 x i32> zeroinitializer
  %66 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 20
  %67 = load i32, i32* %66, align 16
  %68 = insertelement <8 x i32> undef, i32 %67, i32 0
  %69 = shufflevector <8 x i32> %68, <8 x i32> undef, <8 x i32> zeroinitializer
  %70 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 12
  %71 = load i32, i32* %70, align 16
  %72 = insertelement <8 x i32> undef, i32 %71, i32 0
  %73 = shufflevector <8 x i32> %72, <8 x i32> undef, <8 x i32> zeroinitializer
  %74 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 52
  %75 = load i32, i32* %74, align 16
  %76 = insertelement <8 x i32> undef, i32 %75, i32 0
  %77 = shufflevector <8 x i32> %76, <8 x i32> undef, <8 x i32> zeroinitializer
  %78 = add nsw i32 %6, -1
  %79 = shl i32 1, %78
  %80 = insertelement <8 x i32> undef, i32 %79, i32 0
  %81 = shufflevector <8 x i32> %80, <8 x i32> undef, <8 x i32> zeroinitializer
  %82 = icmp sgt i32 %3, 0
  br i1 %82, label %83, label %433

83:                                               ; preds = %5
  %84 = mul nsw i32 %3, 15
  %85 = mul nsw i32 %3, 14
  %86 = shl i32 %3, 1
  %87 = mul nsw i32 %3, 13
  %88 = mul nsw i32 %3, 3
  %89 = mul nsw i32 %3, 12
  %90 = shl i32 %3, 2
  %91 = mul nsw i32 %3, 11
  %92 = mul nsw i32 %3, 5
  %93 = mul nsw i32 %3, 10
  %94 = mul nsw i32 %3, 6
  %95 = mul nsw i32 %3, 9
  %96 = mul nsw i32 %3, 7
  %97 = shl i32 %3, 3
  %98 = shl i32 %4, 1
  %99 = mul nsw i32 %4, 3
  %100 = shl i32 %4, 2
  %101 = mul nsw i32 %4, 5
  %102 = mul nsw i32 %4, 6
  %103 = mul nsw i32 %4, 7
  %104 = shl i32 %4, 3
  %105 = mul nsw i32 %4, 9
  %106 = mul nsw i32 %4, 10
  %107 = mul nsw i32 %4, 11
  %108 = mul nsw i32 %4, 12
  %109 = mul nsw i32 %4, 13
  %110 = mul nsw i32 %4, 14
  %111 = mul nsw i32 %4, 15
  %112 = sext i32 %111 to i64
  %113 = sext i32 %110 to i64
  %114 = sext i32 %109 to i64
  %115 = sext i32 %108 to i64
  %116 = sext i32 %107 to i64
  %117 = sext i32 %106 to i64
  %118 = sext i32 %105 to i64
  %119 = sext i32 %104 to i64
  %120 = sext i32 %103 to i64
  %121 = sext i32 %102 to i64
  %122 = sext i32 %101 to i64
  %123 = sext i32 %100 to i64
  %124 = sext i32 %99 to i64
  %125 = sext i32 %98 to i64
  %126 = sext i32 %4 to i64
  %127 = sext i32 %97 to i64
  %128 = sext i32 %96 to i64
  %129 = sext i32 %95 to i64
  %130 = sext i32 %94 to i64
  %131 = sext i32 %93 to i64
  %132 = sext i32 %92 to i64
  %133 = sext i32 %91 to i64
  %134 = sext i32 %90 to i64
  %135 = sext i32 %89 to i64
  %136 = sext i32 %88 to i64
  %137 = sext i32 %87 to i64
  %138 = sext i32 %86 to i64
  %139 = sext i32 %85 to i64
  %140 = sext i32 %3 to i64
  %141 = sext i32 %84 to i64
  %142 = zext i32 %3 to i64
  br label %143

143:                                              ; preds = %143, %83
  %144 = phi i64 [ 0, %83 ], [ %431, %143 ]
  %145 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %144
  %146 = bitcast <4 x i64>* %145 to <8 x i32>*
  %147 = load <8 x i32>, <8 x i32>* %146, align 32
  %148 = add nsw i64 %144, %141
  %149 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %148
  %150 = bitcast <4 x i64>* %149 to <8 x i32>*
  %151 = load <8 x i32>, <8 x i32>* %150, align 32
  %152 = add <8 x i32> %151, %147
  %153 = sub <8 x i32> %147, %151
  %154 = add nsw i64 %144, %140
  %155 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %154
  %156 = bitcast <4 x i64>* %155 to <8 x i32>*
  %157 = load <8 x i32>, <8 x i32>* %156, align 32
  %158 = add nsw i64 %144, %139
  %159 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %158
  %160 = bitcast <4 x i64>* %159 to <8 x i32>*
  %161 = load <8 x i32>, <8 x i32>* %160, align 32
  %162 = add <8 x i32> %161, %157
  %163 = sub <8 x i32> %157, %161
  %164 = add nsw i64 %144, %138
  %165 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %164
  %166 = bitcast <4 x i64>* %165 to <8 x i32>*
  %167 = load <8 x i32>, <8 x i32>* %166, align 32
  %168 = add nsw i64 %144, %137
  %169 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %168
  %170 = bitcast <4 x i64>* %169 to <8 x i32>*
  %171 = load <8 x i32>, <8 x i32>* %170, align 32
  %172 = add <8 x i32> %171, %167
  %173 = sub <8 x i32> %167, %171
  %174 = add nsw i64 %144, %136
  %175 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %174
  %176 = bitcast <4 x i64>* %175 to <8 x i32>*
  %177 = load <8 x i32>, <8 x i32>* %176, align 32
  %178 = add nsw i64 %144, %135
  %179 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %178
  %180 = bitcast <4 x i64>* %179 to <8 x i32>*
  %181 = load <8 x i32>, <8 x i32>* %180, align 32
  %182 = add <8 x i32> %181, %177
  %183 = sub <8 x i32> %177, %181
  %184 = add nsw i64 %144, %134
  %185 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %184
  %186 = bitcast <4 x i64>* %185 to <8 x i32>*
  %187 = load <8 x i32>, <8 x i32>* %186, align 32
  %188 = add nsw i64 %144, %133
  %189 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %188
  %190 = bitcast <4 x i64>* %189 to <8 x i32>*
  %191 = load <8 x i32>, <8 x i32>* %190, align 32
  %192 = add <8 x i32> %191, %187
  %193 = sub <8 x i32> %187, %191
  %194 = add nsw i64 %144, %132
  %195 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %194
  %196 = bitcast <4 x i64>* %195 to <8 x i32>*
  %197 = load <8 x i32>, <8 x i32>* %196, align 32
  %198 = add nsw i64 %144, %131
  %199 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %198
  %200 = bitcast <4 x i64>* %199 to <8 x i32>*
  %201 = load <8 x i32>, <8 x i32>* %200, align 32
  %202 = add <8 x i32> %201, %197
  %203 = sub <8 x i32> %197, %201
  %204 = add nsw i64 %144, %130
  %205 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %204
  %206 = bitcast <4 x i64>* %205 to <8 x i32>*
  %207 = load <8 x i32>, <8 x i32>* %206, align 32
  %208 = add nsw i64 %144, %129
  %209 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %208
  %210 = bitcast <4 x i64>* %209 to <8 x i32>*
  %211 = load <8 x i32>, <8 x i32>* %210, align 32
  %212 = add <8 x i32> %211, %207
  %213 = sub <8 x i32> %207, %211
  %214 = add nsw i64 %144, %128
  %215 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %214
  %216 = bitcast <4 x i64>* %215 to <8 x i32>*
  %217 = load <8 x i32>, <8 x i32>* %216, align 32
  %218 = add nsw i64 %144, %127
  %219 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %218
  %220 = bitcast <4 x i64>* %219 to <8 x i32>*
  %221 = load <8 x i32>, <8 x i32>* %220, align 32
  %222 = add <8 x i32> %221, %217
  %223 = sub <8 x i32> %217, %221
  %224 = add <8 x i32> %222, %152
  %225 = sub <8 x i32> %152, %222
  %226 = add <8 x i32> %212, %162
  %227 = sub <8 x i32> %162, %212
  %228 = add <8 x i32> %202, %172
  %229 = sub <8 x i32> %172, %202
  %230 = add <8 x i32> %192, %182
  %231 = sub <8 x i32> %182, %192
  %232 = mul <8 x i32> %203, %15
  %233 = mul <8 x i32> %173, %12
  %234 = add <8 x i32> %233, %81
  %235 = add <8 x i32> %234, %232
  %236 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %235, i32 %6) #7
  %237 = mul <8 x i32> %203, %12
  %238 = mul <8 x i32> %15, %173
  %239 = sub <8 x i32> %81, %238
  %240 = add <8 x i32> %239, %237
  %241 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %240, i32 %6) #7
  %242 = mul <8 x i32> %193, %15
  %243 = mul <8 x i32> %183, %12
  %244 = add <8 x i32> %243, %81
  %245 = add <8 x i32> %244, %242
  %246 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %245, i32 %6) #7
  %247 = mul <8 x i32> %193, %12
  %248 = mul <8 x i32> %15, %183
  %249 = sub <8 x i32> %81, %248
  %250 = add <8 x i32> %249, %247
  %251 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %250, i32 %6) #7
  %252 = add <8 x i32> %224, %230
  %253 = sub <8 x i32> %224, %230
  %254 = add <8 x i32> %226, %228
  %255 = sub <8 x i32> %226, %228
  %256 = mul <8 x i32> %229, %15
  %257 = mul <8 x i32> %227, %12
  %258 = add <8 x i32> %256, %81
  %259 = add <8 x i32> %258, %257
  %260 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %259, i32 %6) #7
  %261 = mul <8 x i32> %229, %12
  %262 = mul <8 x i32> %15, %227
  %263 = add <8 x i32> %261, %81
  %264 = sub <8 x i32> %263, %262
  %265 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %264, i32 %6) #7
  %266 = add <8 x i32> %246, %223
  %267 = sub <8 x i32> %223, %246
  %268 = add <8 x i32> %236, %213
  %269 = sub <8 x i32> %213, %236
  %270 = sub <8 x i32> %153, %251
  %271 = add <8 x i32> %251, %153
  %272 = sub <8 x i32> %163, %241
  %273 = add <8 x i32> %241, %163
  %274 = mul <8 x i32> %252, %12
  %275 = mul <8 x i32> %254, %12
  %276 = add <8 x i32> %275, %81
  %277 = add <8 x i32> %276, %274
  %278 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %277, i32 %6) #7
  %279 = sub <8 x i32> %81, %275
  %280 = add <8 x i32> %279, %274
  %281 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %280, i32 %6) #7
  %282 = mul <8 x i32> %255, %19
  %283 = mul <8 x i32> %253, %23
  %284 = add <8 x i32> %282, %81
  %285 = add <8 x i32> %284, %283
  %286 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %285, i32 %6) #7
  %287 = mul <8 x i32> %253, %19
  %288 = mul <8 x i32> %23, %255
  %289 = sub <8 x i32> %81, %288
  %290 = add <8 x i32> %289, %287
  %291 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %290, i32 %6) #7
  %292 = add <8 x i32> %260, %231
  %293 = sub <8 x i32> %231, %260
  %294 = sub <8 x i32> %225, %265
  %295 = add <8 x i32> %265, %225
  %296 = mul <8 x i32> %268, %29
  %297 = mul <8 x i32> %273, %19
  %298 = add <8 x i32> %296, %81
  %299 = add <8 x i32> %298, %297
  %300 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %299, i32 %6) #7
  %301 = mul <8 x i32> %268, %19
  %302 = mul <8 x i32> %29, %273
  %303 = add <8 x i32> %301, %81
  %304 = sub <8 x i32> %303, %302
  %305 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %304, i32 %6) #7
  %306 = mul <8 x i32> %269, %26
  %307 = mul <8 x i32> %272, %29
  %308 = add <8 x i32> %306, %81
  %309 = add <8 x i32> %308, %307
  %310 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %309, i32 %6) #7
  %311 = mul <8 x i32> %269, %29
  %312 = mul <8 x i32> %26, %272
  %313 = add <8 x i32> %311, %81
  %314 = sub <8 x i32> %313, %312
  %315 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %314, i32 %6) #7
  %316 = mul <8 x i32> %292, %33
  %317 = mul <8 x i32> %295, %37
  %318 = add <8 x i32> %316, %81
  %319 = add <8 x i32> %318, %317
  %320 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %319, i32 %6) #7
  %321 = mul <8 x i32> %295, %33
  %322 = mul <8 x i32> %37, %292
  %323 = sub <8 x i32> %81, %322
  %324 = add <8 x i32> %323, %321
  %325 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %324, i32 %6) #7
  %326 = mul <8 x i32> %293, %41
  %327 = mul <8 x i32> %294, %45
  %328 = add <8 x i32> %326, %81
  %329 = add <8 x i32> %328, %327
  %330 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %329, i32 %6) #7
  %331 = mul <8 x i32> %294, %41
  %332 = mul <8 x i32> %45, %293
  %333 = sub <8 x i32> %81, %332
  %334 = add <8 x i32> %333, %331
  %335 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %334, i32 %6) #7
  %336 = add <8 x i32> %300, %266
  %337 = sub <8 x i32> %266, %300
  %338 = sub <8 x i32> %267, %310
  %339 = add <8 x i32> %310, %267
  %340 = add <8 x i32> %315, %270
  %341 = sub <8 x i32> %270, %315
  %342 = sub <8 x i32> %271, %305
  %343 = add <8 x i32> %305, %271
  %344 = mul <8 x i32> %336, %49
  %345 = mul <8 x i32> %343, %53
  %346 = add <8 x i32> %344, %81
  %347 = add <8 x i32> %346, %345
  %348 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %347, i32 %6) #7
  %349 = mul <8 x i32> %343, %49
  %350 = mul <8 x i32> %53, %336
  %351 = sub <8 x i32> %81, %350
  %352 = add <8 x i32> %351, %349
  %353 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %352, i32 %6) #7
  %354 = mul <8 x i32> %337, %57
  %355 = mul <8 x i32> %342, %61
  %356 = add <8 x i32> %354, %81
  %357 = add <8 x i32> %356, %355
  %358 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %357, i32 %6) #7
  %359 = mul <8 x i32> %342, %57
  %360 = mul <8 x i32> %61, %337
  %361 = sub <8 x i32> %81, %360
  %362 = add <8 x i32> %361, %359
  %363 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %362, i32 %6) #7
  %364 = mul <8 x i32> %338, %65
  %365 = mul <8 x i32> %341, %69
  %366 = add <8 x i32> %364, %81
  %367 = add <8 x i32> %366, %365
  %368 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %367, i32 %6) #7
  %369 = mul <8 x i32> %341, %65
  %370 = mul <8 x i32> %69, %338
  %371 = sub <8 x i32> %81, %370
  %372 = add <8 x i32> %371, %369
  %373 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %372, i32 %6) #7
  %374 = mul <8 x i32> %339, %73
  %375 = mul <8 x i32> %340, %77
  %376 = add <8 x i32> %374, %81
  %377 = add <8 x i32> %376, %375
  %378 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %377, i32 %6) #7
  %379 = mul <8 x i32> %340, %73
  %380 = mul <8 x i32> %77, %339
  %381 = sub <8 x i32> %81, %380
  %382 = add <8 x i32> %381, %379
  %383 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %382, i32 %6) #7
  %384 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %144
  %385 = bitcast <4 x i64>* %384 to <8 x i32>*
  store <8 x i32> %278, <8 x i32>* %385, align 32
  %386 = add nsw i64 %144, %126
  %387 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %386
  %388 = bitcast <4 x i64>* %387 to <8 x i32>*
  store <8 x i32> %348, <8 x i32>* %388, align 32
  %389 = add nsw i64 %144, %125
  %390 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %389
  %391 = bitcast <4 x i64>* %390 to <8 x i32>*
  store <8 x i32> %320, <8 x i32>* %391, align 32
  %392 = add nsw i64 %144, %124
  %393 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %392
  %394 = bitcast <4 x i64>* %393 to <8 x i32>*
  store <8 x i32> %383, <8 x i32>* %394, align 32
  %395 = add nsw i64 %144, %123
  %396 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %395
  %397 = bitcast <4 x i64>* %396 to <8 x i32>*
  store <8 x i32> %286, <8 x i32>* %397, align 32
  %398 = add nsw i64 %144, %122
  %399 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %398
  %400 = bitcast <4 x i64>* %399 to <8 x i32>*
  store <8 x i32> %368, <8 x i32>* %400, align 32
  %401 = add nsw i64 %144, %121
  %402 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %401
  %403 = bitcast <4 x i64>* %402 to <8 x i32>*
  store <8 x i32> %335, <8 x i32>* %403, align 32
  %404 = add nsw i64 %144, %120
  %405 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %404
  %406 = bitcast <4 x i64>* %405 to <8 x i32>*
  store <8 x i32> %363, <8 x i32>* %406, align 32
  %407 = add nsw i64 %144, %119
  %408 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %407
  %409 = bitcast <4 x i64>* %408 to <8 x i32>*
  store <8 x i32> %281, <8 x i32>* %409, align 32
  %410 = add nsw i64 %144, %118
  %411 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %410
  %412 = bitcast <4 x i64>* %411 to <8 x i32>*
  store <8 x i32> %358, <8 x i32>* %412, align 32
  %413 = add nsw i64 %144, %117
  %414 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %413
  %415 = bitcast <4 x i64>* %414 to <8 x i32>*
  store <8 x i32> %330, <8 x i32>* %415, align 32
  %416 = add nsw i64 %144, %116
  %417 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %416
  %418 = bitcast <4 x i64>* %417 to <8 x i32>*
  store <8 x i32> %373, <8 x i32>* %418, align 32
  %419 = add nsw i64 %144, %115
  %420 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %419
  %421 = bitcast <4 x i64>* %420 to <8 x i32>*
  store <8 x i32> %291, <8 x i32>* %421, align 32
  %422 = add nsw i64 %144, %114
  %423 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %422
  %424 = bitcast <4 x i64>* %423 to <8 x i32>*
  store <8 x i32> %378, <8 x i32>* %424, align 32
  %425 = add nsw i64 %144, %113
  %426 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %425
  %427 = bitcast <4 x i64>* %426 to <8 x i32>*
  store <8 x i32> %325, <8 x i32>* %427, align 32
  %428 = add nsw i64 %144, %112
  %429 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %428
  %430 = bitcast <4 x i64>* %429 to <8 x i32>*
  store <8 x i32> %353, <8 x i32>* %430, align 32
  %431 = add nuw nsw i64 %144, 1
  %432 = icmp eq i64 %431, %142
  br i1 %432, label %433, label %143

433:                                              ; preds = %143, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @fadst16_avx2(<4 x i64>* nocapture readonly, <4 x i64>* nocapture, i8 signext, i32, i32) #0 {
  %6 = sext i8 %2 to i32
  %7 = add nsw i32 %6, -10
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 32
  %10 = load i32, i32* %9, align 16
  %11 = insertelement <8 x i32> undef, i32 %10, i32 0
  %12 = shufflevector <8 x i32> %11, <8 x i32> undef, <8 x i32> zeroinitializer
  %13 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 48
  %14 = load i32, i32* %13, align 16
  %15 = insertelement <8 x i32> undef, i32 %14, i32 0
  %16 = shufflevector <8 x i32> %15, <8 x i32> undef, <8 x i32> zeroinitializer
  %17 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 16
  %18 = load i32, i32* %17, align 16
  %19 = insertelement <8 x i32> undef, i32 %18, i32 0
  %20 = shufflevector <8 x i32> %19, <8 x i32> undef, <8 x i32> zeroinitializer
  %21 = sub nsw i32 0, %18
  %22 = insertelement <8 x i32> undef, i32 %21, i32 0
  %23 = shufflevector <8 x i32> %22, <8 x i32> undef, <8 x i32> zeroinitializer
  %24 = sub nsw i32 0, %14
  %25 = insertelement <8 x i32> undef, i32 %24, i32 0
  %26 = shufflevector <8 x i32> %25, <8 x i32> undef, <8 x i32> zeroinitializer
  %27 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 8
  %28 = load i32, i32* %27, align 16
  %29 = insertelement <8 x i32> undef, i32 %28, i32 0
  %30 = shufflevector <8 x i32> %29, <8 x i32> undef, <8 x i32> zeroinitializer
  %31 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 56
  %32 = load i32, i32* %31, align 16
  %33 = insertelement <8 x i32> undef, i32 %32, i32 0
  %34 = shufflevector <8 x i32> %33, <8 x i32> undef, <8 x i32> zeroinitializer
  %35 = sub nsw i32 0, %32
  %36 = insertelement <8 x i32> undef, i32 %35, i32 0
  %37 = shufflevector <8 x i32> %36, <8 x i32> undef, <8 x i32> zeroinitializer
  %38 = sub nsw i32 0, %28
  %39 = insertelement <8 x i32> undef, i32 %38, i32 0
  %40 = shufflevector <8 x i32> %39, <8 x i32> undef, <8 x i32> zeroinitializer
  %41 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 24
  %42 = load i32, i32* %41, align 16
  %43 = insertelement <8 x i32> undef, i32 %42, i32 0
  %44 = shufflevector <8 x i32> %43, <8 x i32> undef, <8 x i32> zeroinitializer
  %45 = sub nsw i32 0, %42
  %46 = insertelement <8 x i32> undef, i32 %45, i32 0
  %47 = shufflevector <8 x i32> %46, <8 x i32> undef, <8 x i32> zeroinitializer
  %48 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 40
  %49 = load i32, i32* %48, align 16
  %50 = sub nsw i32 0, %49
  %51 = insertelement <8 x i32> undef, i32 %50, i32 0
  %52 = shufflevector <8 x i32> %51, <8 x i32> undef, <8 x i32> zeroinitializer
  %53 = insertelement <8 x i32> undef, i32 %49, i32 0
  %54 = shufflevector <8 x i32> %53, <8 x i32> undef, <8 x i32> zeroinitializer
  %55 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 2
  %56 = load i32, i32* %55, align 8
  %57 = insertelement <8 x i32> undef, i32 %56, i32 0
  %58 = shufflevector <8 x i32> %57, <8 x i32> undef, <8 x i32> zeroinitializer
  %59 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 62
  %60 = load i32, i32* %59, align 8
  %61 = insertelement <8 x i32> undef, i32 %60, i32 0
  %62 = shufflevector <8 x i32> %61, <8 x i32> undef, <8 x i32> zeroinitializer
  %63 = sub nsw i32 0, %56
  %64 = insertelement <8 x i32> undef, i32 %63, i32 0
  %65 = shufflevector <8 x i32> %64, <8 x i32> undef, <8 x i32> zeroinitializer
  %66 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 10
  %67 = load i32, i32* %66, align 8
  %68 = insertelement <8 x i32> undef, i32 %67, i32 0
  %69 = shufflevector <8 x i32> %68, <8 x i32> undef, <8 x i32> zeroinitializer
  %70 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 54
  %71 = load i32, i32* %70, align 8
  %72 = insertelement <8 x i32> undef, i32 %71, i32 0
  %73 = shufflevector <8 x i32> %72, <8 x i32> undef, <8 x i32> zeroinitializer
  %74 = sub nsw i32 0, %67
  %75 = insertelement <8 x i32> undef, i32 %74, i32 0
  %76 = shufflevector <8 x i32> %75, <8 x i32> undef, <8 x i32> zeroinitializer
  %77 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 18
  %78 = load i32, i32* %77, align 8
  %79 = insertelement <8 x i32> undef, i32 %78, i32 0
  %80 = shufflevector <8 x i32> %79, <8 x i32> undef, <8 x i32> zeroinitializer
  %81 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 46
  %82 = load i32, i32* %81, align 8
  %83 = insertelement <8 x i32> undef, i32 %82, i32 0
  %84 = shufflevector <8 x i32> %83, <8 x i32> undef, <8 x i32> zeroinitializer
  %85 = sub nsw i32 0, %78
  %86 = insertelement <8 x i32> undef, i32 %85, i32 0
  %87 = shufflevector <8 x i32> %86, <8 x i32> undef, <8 x i32> zeroinitializer
  %88 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 26
  %89 = load i32, i32* %88, align 8
  %90 = insertelement <8 x i32> undef, i32 %89, i32 0
  %91 = shufflevector <8 x i32> %90, <8 x i32> undef, <8 x i32> zeroinitializer
  %92 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 38
  %93 = load i32, i32* %92, align 8
  %94 = insertelement <8 x i32> undef, i32 %93, i32 0
  %95 = shufflevector <8 x i32> %94, <8 x i32> undef, <8 x i32> zeroinitializer
  %96 = sub nsw i32 0, %89
  %97 = insertelement <8 x i32> undef, i32 %96, i32 0
  %98 = shufflevector <8 x i32> %97, <8 x i32> undef, <8 x i32> zeroinitializer
  %99 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 34
  %100 = load i32, i32* %99, align 8
  %101 = insertelement <8 x i32> undef, i32 %100, i32 0
  %102 = shufflevector <8 x i32> %101, <8 x i32> undef, <8 x i32> zeroinitializer
  %103 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 30
  %104 = load i32, i32* %103, align 8
  %105 = insertelement <8 x i32> undef, i32 %104, i32 0
  %106 = shufflevector <8 x i32> %105, <8 x i32> undef, <8 x i32> zeroinitializer
  %107 = sub nsw i32 0, %100
  %108 = insertelement <8 x i32> undef, i32 %107, i32 0
  %109 = shufflevector <8 x i32> %108, <8 x i32> undef, <8 x i32> zeroinitializer
  %110 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 42
  %111 = load i32, i32* %110, align 8
  %112 = insertelement <8 x i32> undef, i32 %111, i32 0
  %113 = shufflevector <8 x i32> %112, <8 x i32> undef, <8 x i32> zeroinitializer
  %114 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 22
  %115 = load i32, i32* %114, align 8
  %116 = insertelement <8 x i32> undef, i32 %115, i32 0
  %117 = shufflevector <8 x i32> %116, <8 x i32> undef, <8 x i32> zeroinitializer
  %118 = sub nsw i32 0, %111
  %119 = insertelement <8 x i32> undef, i32 %118, i32 0
  %120 = shufflevector <8 x i32> %119, <8 x i32> undef, <8 x i32> zeroinitializer
  %121 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 50
  %122 = load i32, i32* %121, align 8
  %123 = insertelement <8 x i32> undef, i32 %122, i32 0
  %124 = shufflevector <8 x i32> %123, <8 x i32> undef, <8 x i32> zeroinitializer
  %125 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 14
  %126 = load i32, i32* %125, align 8
  %127 = insertelement <8 x i32> undef, i32 %126, i32 0
  %128 = shufflevector <8 x i32> %127, <8 x i32> undef, <8 x i32> zeroinitializer
  %129 = sub nsw i32 0, %122
  %130 = insertelement <8 x i32> undef, i32 %129, i32 0
  %131 = shufflevector <8 x i32> %130, <8 x i32> undef, <8 x i32> zeroinitializer
  %132 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 58
  %133 = load i32, i32* %132, align 8
  %134 = insertelement <8 x i32> undef, i32 %133, i32 0
  %135 = shufflevector <8 x i32> %134, <8 x i32> undef, <8 x i32> zeroinitializer
  %136 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %8, i64 6
  %137 = load i32, i32* %136, align 8
  %138 = insertelement <8 x i32> undef, i32 %137, i32 0
  %139 = shufflevector <8 x i32> %138, <8 x i32> undef, <8 x i32> zeroinitializer
  %140 = sub nsw i32 0, %133
  %141 = insertelement <8 x i32> undef, i32 %140, i32 0
  %142 = shufflevector <8 x i32> %141, <8 x i32> undef, <8 x i32> zeroinitializer
  %143 = add nsw i32 %6, -1
  %144 = shl i32 1, %143
  %145 = insertelement <8 x i32> undef, i32 %144, i32 0
  %146 = shufflevector <8 x i32> %145, <8 x i32> undef, <8 x i32> zeroinitializer
  %147 = icmp sgt i32 %3, 0
  br i1 %147, label %148, label %562

148:                                              ; preds = %5
  %149 = mul nsw i32 %3, 15
  %150 = mul nsw i32 %3, 7
  %151 = shl i32 %3, 3
  %152 = mul nsw i32 %3, 3
  %153 = mul nsw i32 %3, 12
  %154 = shl i32 %3, 2
  %155 = mul nsw i32 %3, 11
  %156 = mul nsw i32 %3, 14
  %157 = mul nsw i32 %3, 6
  %158 = mul nsw i32 %3, 9
  %159 = shl i32 %3, 1
  %160 = mul nsw i32 %3, 13
  %161 = mul nsw i32 %3, 5
  %162 = mul nsw i32 %3, 10
  %163 = shl i32 %4, 1
  %164 = mul nsw i32 %4, 3
  %165 = shl i32 %4, 2
  %166 = mul nsw i32 %4, 5
  %167 = mul nsw i32 %4, 6
  %168 = mul nsw i32 %4, 7
  %169 = shl i32 %4, 3
  %170 = mul nsw i32 %4, 9
  %171 = mul nsw i32 %4, 10
  %172 = mul nsw i32 %4, 11
  %173 = mul nsw i32 %4, 12
  %174 = mul nsw i32 %4, 13
  %175 = mul nsw i32 %4, 14
  %176 = mul nsw i32 %4, 15
  %177 = sext i32 %176 to i64
  %178 = sext i32 %175 to i64
  %179 = sext i32 %174 to i64
  %180 = sext i32 %173 to i64
  %181 = sext i32 %172 to i64
  %182 = sext i32 %171 to i64
  %183 = sext i32 %170 to i64
  %184 = sext i32 %169 to i64
  %185 = sext i32 %168 to i64
  %186 = sext i32 %167 to i64
  %187 = sext i32 %166 to i64
  %188 = sext i32 %165 to i64
  %189 = sext i32 %164 to i64
  %190 = sext i32 %163 to i64
  %191 = sext i32 %4 to i64
  %192 = sext i32 %162 to i64
  %193 = sext i32 %161 to i64
  %194 = sext i32 %160 to i64
  %195 = sext i32 %159 to i64
  %196 = sext i32 %158 to i64
  %197 = sext i32 %157 to i64
  %198 = sext i32 %156 to i64
  %199 = sext i32 %3 to i64
  %200 = sext i32 %155 to i64
  %201 = sext i32 %154 to i64
  %202 = sext i32 %153 to i64
  %203 = sext i32 %152 to i64
  %204 = sext i32 %151 to i64
  %205 = sext i32 %150 to i64
  %206 = sext i32 %149 to i64
  %207 = zext i32 %3 to i64
  br label %208

208:                                              ; preds = %208, %148
  %209 = phi i64 [ 0, %148 ], [ %560, %208 ]
  %210 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %209
  %211 = bitcast <4 x i64>* %210 to <8 x i32>*
  %212 = load <8 x i32>, <8 x i32>* %211, align 32
  %213 = add nsw i64 %209, %206
  %214 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %213
  %215 = bitcast <4 x i64>* %214 to <8 x i32>*
  %216 = load <8 x i32>, <8 x i32>* %215, align 32
  %217 = add nsw i64 %209, %205
  %218 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %217
  %219 = bitcast <4 x i64>* %218 to <8 x i32>*
  %220 = load <8 x i32>, <8 x i32>* %219, align 32
  %221 = add nsw i64 %209, %204
  %222 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %221
  %223 = bitcast <4 x i64>* %222 to <8 x i32>*
  %224 = load <8 x i32>, <8 x i32>* %223, align 32
  %225 = add nsw i64 %209, %203
  %226 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %225
  %227 = bitcast <4 x i64>* %226 to <8 x i32>*
  %228 = load <8 x i32>, <8 x i32>* %227, align 32
  %229 = add nsw i64 %209, %202
  %230 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %229
  %231 = bitcast <4 x i64>* %230 to <8 x i32>*
  %232 = load <8 x i32>, <8 x i32>* %231, align 32
  %233 = add nsw i64 %209, %201
  %234 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %233
  %235 = bitcast <4 x i64>* %234 to <8 x i32>*
  %236 = load <8 x i32>, <8 x i32>* %235, align 32
  %237 = add nsw i64 %209, %200
  %238 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %237
  %239 = bitcast <4 x i64>* %238 to <8 x i32>*
  %240 = load <8 x i32>, <8 x i32>* %239, align 32
  %241 = add nsw i64 %209, %199
  %242 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %241
  %243 = bitcast <4 x i64>* %242 to <8 x i32>*
  %244 = load <8 x i32>, <8 x i32>* %243, align 32
  %245 = add nsw i64 %209, %198
  %246 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %245
  %247 = bitcast <4 x i64>* %246 to <8 x i32>*
  %248 = load <8 x i32>, <8 x i32>* %247, align 32
  %249 = add nsw i64 %209, %197
  %250 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %249
  %251 = bitcast <4 x i64>* %250 to <8 x i32>*
  %252 = load <8 x i32>, <8 x i32>* %251, align 32
  %253 = add nsw i64 %209, %196
  %254 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %253
  %255 = bitcast <4 x i64>* %254 to <8 x i32>*
  %256 = load <8 x i32>, <8 x i32>* %255, align 32
  %257 = add nsw i64 %209, %195
  %258 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %257
  %259 = bitcast <4 x i64>* %258 to <8 x i32>*
  %260 = load <8 x i32>, <8 x i32>* %259, align 32
  %261 = add nsw i64 %209, %194
  %262 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %261
  %263 = bitcast <4 x i64>* %262 to <8 x i32>*
  %264 = load <8 x i32>, <8 x i32>* %263, align 32
  %265 = add nsw i64 %209, %193
  %266 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %265
  %267 = bitcast <4 x i64>* %266 to <8 x i32>*
  %268 = load <8 x i32>, <8 x i32>* %267, align 32
  %269 = add nsw i64 %209, %192
  %270 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %269
  %271 = bitcast <4 x i64>* %270 to <8 x i32>*
  %272 = load <8 x i32>, <8 x i32>* %271, align 32
  %273 = mul <8 x i32> %12, %220
  %274 = mul <8 x i32> %224, %12
  %275 = sub <8 x i32> %146, %273
  %276 = add <8 x i32> %275, %274
  %277 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %276, i32 %6) #7
  %278 = sub <8 x i32> %275, %274
  %279 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %278, i32 %6) #7
  %280 = mul <8 x i32> %236, %12
  %281 = mul <8 x i32> %240, %12
  %282 = add <8 x i32> %280, %146
  %283 = sub <8 x i32> %282, %281
  %284 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %283, i32 %6) #7
  %285 = add <8 x i32> %282, %281
  %286 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %285, i32 %6) #7
  %287 = mul <8 x i32> %252, %12
  %288 = mul <8 x i32> %256, %12
  %289 = add <8 x i32> %287, %146
  %290 = sub <8 x i32> %289, %288
  %291 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %290, i32 %6) #7
  %292 = add <8 x i32> %289, %288
  %293 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %292, i32 %6) #7
  %294 = mul <8 x i32> %12, %268
  %295 = mul <8 x i32> %272, %12
  %296 = sub <8 x i32> %146, %294
  %297 = add <8 x i32> %296, %295
  %298 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %297, i32 %6) #7
  %299 = sub <8 x i32> %296, %295
  %300 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %299, i32 %6) #7
  %301 = add <8 x i32> %277, %212
  %302 = sub <8 x i32> %279, %216
  %303 = sub <8 x i32> %212, %277
  %304 = add <8 x i32> %279, %216
  %305 = sub <8 x i32> zeroinitializer, %304
  %306 = sub <8 x i32> %284, %228
  %307 = add <8 x i32> %286, %232
  %308 = add <8 x i32> %284, %228
  %309 = sub <8 x i32> zeroinitializer, %308
  %310 = sub <8 x i32> %232, %286
  %311 = sub <8 x i32> %291, %244
  %312 = add <8 x i32> %293, %248
  %313 = add <8 x i32> %291, %244
  %314 = sub <8 x i32> zeroinitializer, %313
  %315 = sub <8 x i32> %248, %293
  %316 = add <8 x i32> %298, %260
  %317 = sub <8 x i32> %300, %264
  %318 = sub <8 x i32> %260, %298
  %319 = add <8 x i32> %300, %264
  %320 = sub <8 x i32> zeroinitializer, %319
  %321 = mul <8 x i32> %306, %20
  %322 = mul <8 x i32> %307, %16
  %323 = add <8 x i32> %321, %146
  %324 = add <8 x i32> %323, %322
  %325 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %324, i32 %6) #7
  %326 = mul <8 x i32> %306, %16
  %327 = mul <8 x i32> %307, %23
  %328 = add <8 x i32> %326, %146
  %329 = add <8 x i32> %328, %327
  %330 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %329, i32 %6) #7
  %331 = mul <8 x i32> %26, %309
  %332 = mul <8 x i32> %310, %20
  %333 = add <8 x i32> %331, %146
  %334 = add <8 x i32> %333, %332
  %335 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %334, i32 %6) #7
  %336 = mul <8 x i32> %20, %309
  %337 = mul <8 x i32> %310, %16
  %338 = add <8 x i32> %336, %146
  %339 = add <8 x i32> %338, %337
  %340 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %339, i32 %6) #7
  %341 = mul <8 x i32> %316, %20
  %342 = mul <8 x i32> %317, %16
  %343 = add <8 x i32> %341, %146
  %344 = add <8 x i32> %343, %342
  %345 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %344, i32 %6) #7
  %346 = mul <8 x i32> %316, %16
  %347 = mul <8 x i32> %317, %23
  %348 = add <8 x i32> %346, %146
  %349 = add <8 x i32> %348, %347
  %350 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %349, i32 %6) #7
  %351 = mul <8 x i32> %318, %26
  %352 = mul <8 x i32> %20, %320
  %353 = add <8 x i32> %351, %146
  %354 = add <8 x i32> %353, %352
  %355 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %354, i32 %6) #7
  %356 = mul <8 x i32> %318, %20
  %357 = mul <8 x i32> %16, %320
  %358 = add <8 x i32> %356, %146
  %359 = add <8 x i32> %358, %357
  %360 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %359, i32 %6) #7
  %361 = add <8 x i32> %325, %301
  %362 = add <8 x i32> %330, %302
  %363 = add <8 x i32> %335, %303
  %364 = sub <8 x i32> %340, %304
  %365 = sub <8 x i32> %301, %325
  %366 = sub <8 x i32> %302, %330
  %367 = sub <8 x i32> %303, %335
  %368 = sub <8 x i32> %305, %340
  %369 = add <8 x i32> %345, %311
  %370 = add <8 x i32> %350, %312
  %371 = sub <8 x i32> %355, %313
  %372 = add <8 x i32> %360, %315
  %373 = sub <8 x i32> %311, %345
  %374 = sub <8 x i32> %312, %350
  %375 = sub <8 x i32> %314, %355
  %376 = sub <8 x i32> %315, %360
  %377 = mul <8 x i32> %369, %30
  %378 = mul <8 x i32> %370, %34
  %379 = add <8 x i32> %377, %146
  %380 = add <8 x i32> %379, %378
  %381 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %380, i32 %6) #7
  %382 = mul <8 x i32> %369, %34
  %383 = mul <8 x i32> %370, %40
  %384 = add <8 x i32> %382, %146
  %385 = add <8 x i32> %384, %383
  %386 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %385, i32 %6) #7
  %387 = mul <8 x i32> %371, %54
  %388 = mul <8 x i32> %372, %44
  %389 = add <8 x i32> %387, %146
  %390 = add <8 x i32> %389, %388
  %391 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %390, i32 %6) #7
  %392 = mul <8 x i32> %371, %44
  %393 = mul <8 x i32> %372, %52
  %394 = add <8 x i32> %392, %146
  %395 = add <8 x i32> %394, %393
  %396 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %395, i32 %6) #7
  %397 = mul <8 x i32> %373, %37
  %398 = mul <8 x i32> %374, %30
  %399 = add <8 x i32> %397, %146
  %400 = add <8 x i32> %399, %398
  %401 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %400, i32 %6) #7
  %402 = mul <8 x i32> %373, %30
  %403 = mul <8 x i32> %374, %34
  %404 = add <8 x i32> %402, %146
  %405 = add <8 x i32> %404, %403
  %406 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %405, i32 %6) #7
  %407 = mul <8 x i32> %375, %47
  %408 = mul <8 x i32> %376, %54
  %409 = add <8 x i32> %407, %146
  %410 = add <8 x i32> %409, %408
  %411 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %410, i32 %6) #7
  %412 = mul <8 x i32> %375, %54
  %413 = mul <8 x i32> %376, %44
  %414 = add <8 x i32> %412, %146
  %415 = add <8 x i32> %414, %413
  %416 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %415, i32 %6) #7
  %417 = add <8 x i32> %381, %361
  %418 = add <8 x i32> %386, %362
  %419 = add <8 x i32> %391, %363
  %420 = add <8 x i32> %396, %364
  %421 = add <8 x i32> %401, %365
  %422 = add <8 x i32> %406, %366
  %423 = add <8 x i32> %411, %367
  %424 = add <8 x i32> %416, %368
  %425 = sub <8 x i32> %361, %381
  %426 = sub <8 x i32> %362, %386
  %427 = sub <8 x i32> %363, %391
  %428 = sub <8 x i32> %364, %396
  %429 = sub <8 x i32> %365, %401
  %430 = sub <8 x i32> %366, %406
  %431 = sub <8 x i32> %367, %411
  %432 = sub <8 x i32> %368, %416
  %433 = mul <8 x i32> %417, %58
  %434 = mul <8 x i32> %418, %62
  %435 = add <8 x i32> %433, %146
  %436 = add <8 x i32> %435, %434
  %437 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %436, i32 %6) #7
  %438 = mul <8 x i32> %417, %62
  %439 = mul <8 x i32> %418, %65
  %440 = add <8 x i32> %438, %146
  %441 = add <8 x i32> %440, %439
  %442 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %441, i32 %6) #7
  %443 = mul <8 x i32> %419, %69
  %444 = mul <8 x i32> %420, %73
  %445 = add <8 x i32> %443, %146
  %446 = add <8 x i32> %445, %444
  %447 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %446, i32 %6) #7
  %448 = mul <8 x i32> %419, %73
  %449 = mul <8 x i32> %420, %76
  %450 = add <8 x i32> %448, %146
  %451 = add <8 x i32> %450, %449
  %452 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %451, i32 %6) #7
  %453 = mul <8 x i32> %421, %80
  %454 = mul <8 x i32> %422, %84
  %455 = add <8 x i32> %453, %146
  %456 = add <8 x i32> %455, %454
  %457 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %456, i32 %6) #7
  %458 = mul <8 x i32> %421, %84
  %459 = mul <8 x i32> %422, %87
  %460 = add <8 x i32> %458, %146
  %461 = add <8 x i32> %460, %459
  %462 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %461, i32 %6) #7
  %463 = mul <8 x i32> %423, %91
  %464 = mul <8 x i32> %424, %95
  %465 = add <8 x i32> %463, %146
  %466 = add <8 x i32> %465, %464
  %467 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %466, i32 %6) #7
  %468 = mul <8 x i32> %423, %95
  %469 = mul <8 x i32> %424, %98
  %470 = add <8 x i32> %468, %146
  %471 = add <8 x i32> %470, %469
  %472 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %471, i32 %6) #7
  %473 = mul <8 x i32> %425, %102
  %474 = mul <8 x i32> %426, %106
  %475 = add <8 x i32> %473, %146
  %476 = add <8 x i32> %475, %474
  %477 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %476, i32 %6) #7
  %478 = mul <8 x i32> %425, %106
  %479 = mul <8 x i32> %426, %109
  %480 = add <8 x i32> %478, %146
  %481 = add <8 x i32> %480, %479
  %482 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %481, i32 %6) #7
  %483 = mul <8 x i32> %427, %113
  %484 = mul <8 x i32> %428, %117
  %485 = add <8 x i32> %483, %146
  %486 = add <8 x i32> %485, %484
  %487 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %486, i32 %6) #7
  %488 = mul <8 x i32> %427, %117
  %489 = mul <8 x i32> %428, %120
  %490 = add <8 x i32> %488, %146
  %491 = add <8 x i32> %490, %489
  %492 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %491, i32 %6) #7
  %493 = mul <8 x i32> %429, %124
  %494 = mul <8 x i32> %430, %128
  %495 = add <8 x i32> %493, %146
  %496 = add <8 x i32> %495, %494
  %497 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %496, i32 %6) #7
  %498 = mul <8 x i32> %429, %128
  %499 = mul <8 x i32> %430, %131
  %500 = add <8 x i32> %498, %146
  %501 = add <8 x i32> %500, %499
  %502 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %501, i32 %6) #7
  %503 = mul <8 x i32> %431, %135
  %504 = mul <8 x i32> %432, %139
  %505 = add <8 x i32> %503, %146
  %506 = add <8 x i32> %505, %504
  %507 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %506, i32 %6) #7
  %508 = mul <8 x i32> %431, %139
  %509 = mul <8 x i32> %432, %142
  %510 = add <8 x i32> %508, %146
  %511 = add <8 x i32> %510, %509
  %512 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %511, i32 %6) #7
  %513 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %209
  %514 = bitcast <4 x i64>* %513 to <8 x i32>*
  store <8 x i32> %442, <8 x i32>* %514, align 32
  %515 = add nsw i64 %209, %191
  %516 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %515
  %517 = bitcast <4 x i64>* %516 to <8 x i32>*
  store <8 x i32> %507, <8 x i32>* %517, align 32
  %518 = add nsw i64 %209, %190
  %519 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %518
  %520 = bitcast <4 x i64>* %519 to <8 x i32>*
  store <8 x i32> %452, <8 x i32>* %520, align 32
  %521 = add nsw i64 %209, %189
  %522 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %521
  %523 = bitcast <4 x i64>* %522 to <8 x i32>*
  store <8 x i32> %497, <8 x i32>* %523, align 32
  %524 = add nsw i64 %209, %188
  %525 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %524
  %526 = bitcast <4 x i64>* %525 to <8 x i32>*
  store <8 x i32> %462, <8 x i32>* %526, align 32
  %527 = add nsw i64 %209, %187
  %528 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %527
  %529 = bitcast <4 x i64>* %528 to <8 x i32>*
  store <8 x i32> %487, <8 x i32>* %529, align 32
  %530 = add nsw i64 %209, %186
  %531 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %530
  %532 = bitcast <4 x i64>* %531 to <8 x i32>*
  store <8 x i32> %472, <8 x i32>* %532, align 32
  %533 = add nsw i64 %209, %185
  %534 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %533
  %535 = bitcast <4 x i64>* %534 to <8 x i32>*
  store <8 x i32> %477, <8 x i32>* %535, align 32
  %536 = add nsw i64 %209, %184
  %537 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %536
  %538 = bitcast <4 x i64>* %537 to <8 x i32>*
  store <8 x i32> %482, <8 x i32>* %538, align 32
  %539 = add nsw i64 %209, %183
  %540 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %539
  %541 = bitcast <4 x i64>* %540 to <8 x i32>*
  store <8 x i32> %467, <8 x i32>* %541, align 32
  %542 = add nsw i64 %209, %182
  %543 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %542
  %544 = bitcast <4 x i64>* %543 to <8 x i32>*
  store <8 x i32> %492, <8 x i32>* %544, align 32
  %545 = add nsw i64 %209, %181
  %546 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %545
  %547 = bitcast <4 x i64>* %546 to <8 x i32>*
  store <8 x i32> %457, <8 x i32>* %547, align 32
  %548 = add nsw i64 %209, %180
  %549 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %548
  %550 = bitcast <4 x i64>* %549 to <8 x i32>*
  store <8 x i32> %502, <8 x i32>* %550, align 32
  %551 = add nsw i64 %209, %179
  %552 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %551
  %553 = bitcast <4 x i64>* %552 to <8 x i32>*
  store <8 x i32> %447, <8 x i32>* %553, align 32
  %554 = add nsw i64 %209, %178
  %555 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %554
  %556 = bitcast <4 x i64>* %555 to <8 x i32>*
  store <8 x i32> %512, <8 x i32>* %556, align 32
  %557 = add nsw i64 %209, %177
  %558 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %557
  %559 = bitcast <4 x i64>* %558 to <8 x i32>*
  store <8 x i32> %437, <8 x i32>* %559, align 32
  %560 = add nuw nsw i64 %209, 1
  %561 = icmp eq i64 %560, %207
  br i1 %561, label %562, label %208

562:                                              ; preds = %208, %5
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @idtx16_avx2(<4 x i64>* nocapture readonly, <4 x i64>* nocapture, i8 signext, i32, i32) #2 {
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %5
  %8 = shl nsw i32 %3, 4
  %9 = sext i32 %8 to i64
  br label %11

10:                                               ; preds = %11, %5
  ret void

11:                                               ; preds = %7, %11
  %12 = phi i64 [ 0, %7 ], [ %21, %11 ]
  %13 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %12
  %14 = bitcast <4 x i64>* %13 to <8 x i32>*
  %15 = load <8 x i32>, <8 x i32>* %14, align 32
  %16 = mul <8 x i32> %15, <i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586>
  %17 = add <8 x i32> %16, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %18 = ashr <8 x i32> %17, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %19 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %12
  %20 = bitcast <4 x i64>* %19 to <8 x i32>*
  store <8 x i32> %18, <8 x i32>* %20, align 32
  %21 = add nuw nsw i64 %12, 1
  %22 = icmp slt i64 %21, %9
  br i1 %22, label %11, label %10
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_fwd_txfm2d_32x32_avx2(i16* nocapture readonly, i32* nocapture, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [64 x <4 x i64>], align 32
  %7 = alloca [128 x <4 x i64>], align 32
  %8 = bitcast [128 x <4 x i64>]* %7 to i8*
  %9 = alloca [128 x <4 x i64>], align 32
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %8) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %8, i8 -86, i64 4096, i1 false)
  %10 = bitcast [128 x <4 x i64>]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %10) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %10, i8 -86, i64 4096, i1 false)
  %11 = load i8*, i8** getelementptr inbounds ([19 x i8*], [19 x i8*]* @av1_fwd_txfm_shift_ls, i64 0, i64 3), align 8
  %12 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 3, i64 3), align 1
  %13 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 3, i64 3), align 1
  %14 = zext i8 %3 to i64
  %15 = getelementptr inbounds [16 x void (<4 x i64>*, <4 x i64>*, i8, i32, i32)*], [16 x void (<4 x i64>*, <4 x i64>*, i8, i32, i32)*]* @row_txfm8x32_arr, i64 0, i64 %14
  %16 = load void (<4 x i64>*, <4 x i64>*, i8, i32, i32)*, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)** %15, align 8
  %17 = getelementptr inbounds [16 x void (<4 x i64>*, <4 x i64>*, i8, i32, i32)*], [16 x void (<4 x i64>*, <4 x i64>*, i8, i32, i32)*]* @row_txfm8x32_arr, i64 0, i64 %14
  %18 = load void (<4 x i64>*, <4 x i64>*, i8, i32, i32)*, void (<4 x i64>*, <4 x i64>*, i8, i32, i32)** %17, align 8
  %19 = bitcast [64 x <4 x i64>]* %6 to i8*
  %20 = sext i32 %2 to i64
  %21 = getelementptr inbounds i8, i8* %11, i64 1
  br label %22

22:                                               ; preds = %305, %5
  %23 = phi i64 [ 0, %5 ], [ %306, %305 ]
  %24 = shl i64 %23, 4
  %25 = getelementptr inbounds i16, i16* %0, i64 %24
  %26 = shl nuw i64 %23, 1
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %19) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %19, i8 -86, i64 2048, i1 false) #7
  br label %27

27:                                               ; preds = %27, %22
  %28 = phi i64 [ 0, %22 ], [ %52, %27 ]
  %29 = mul nsw i64 %28, %20
  %30 = getelementptr inbounds i16, i16* %25, i64 %29
  %31 = bitcast i16* %30 to <4 x i64>*
  %32 = load <4 x i64>, <4 x i64>* %31, align 1
  %33 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %6, i64 0, i64 %28
  store <4 x i64> %32, <4 x i64>* %33, align 32
  %34 = or i64 %28, 1
  %35 = mul nsw i64 %34, %20
  %36 = getelementptr inbounds i16, i16* %25, i64 %35
  %37 = bitcast i16* %36 to <4 x i64>*
  %38 = load <4 x i64>, <4 x i64>* %37, align 1
  %39 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %6, i64 0, i64 %34
  store <4 x i64> %38, <4 x i64>* %39, align 32
  %40 = or i64 %28, 2
  %41 = mul nsw i64 %40, %20
  %42 = getelementptr inbounds i16, i16* %25, i64 %41
  %43 = bitcast i16* %42 to <4 x i64>*
  %44 = load <4 x i64>, <4 x i64>* %43, align 1
  %45 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %6, i64 0, i64 %40
  store <4 x i64> %44, <4 x i64>* %45, align 32
  %46 = or i64 %28, 3
  %47 = mul nsw i64 %46, %20
  %48 = getelementptr inbounds i16, i16* %25, i64 %47
  %49 = bitcast i16* %48 to <4 x i64>*
  %50 = load <4 x i64>, <4 x i64>* %49, align 1
  %51 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %6, i64 0, i64 %46
  store <4 x i64> %50, <4 x i64>* %51, align 32
  %52 = add nuw nsw i64 %28, 4
  %53 = icmp eq i64 %52, 32
  br i1 %53, label %54, label %27

54:                                               ; preds = %27
  %55 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %26
  br label %56

56:                                               ; preds = %54, %56
  %57 = phi i64 [ %73, %56 ], [ 0, %54 ]
  %58 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %6, i64 0, i64 %57
  %59 = load <4 x i64>, <4 x i64>* %58, align 32
  %60 = shufflevector <4 x i64> %59, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %61 = bitcast <2 x i64> %60 to <8 x i16>
  %62 = sext <8 x i16> %61 to <8 x i32>
  %63 = shl nsw i64 %57, 2
  %64 = getelementptr inbounds <4 x i64>, <4 x i64>* %55, i64 %63
  %65 = bitcast <4 x i64>* %64 to <8 x i32>*
  store <8 x i32> %62, <8 x i32>* %65, align 32
  %66 = bitcast <4 x i64> %59 to <8 x i32>
  %67 = shufflevector <8 x i32> %66, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %68 = bitcast <4 x i32> %67 to <8 x i16>
  %69 = sext <8 x i16> %68 to <8 x i32>
  %70 = or i64 %63, 1
  %71 = getelementptr inbounds <4 x i64>, <4 x i64>* %55, i64 %70
  %72 = bitcast <4 x i64>* %71 to <8 x i32>*
  store <8 x i32> %69, <8 x i32>* %72, align 32
  %73 = add nuw nsw i64 %57, 1
  %74 = icmp eq i64 %73, 32
  br i1 %74, label %75, label %56

75:                                               ; preds = %56
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %19) #7
  %76 = load i8, i8* %11, align 1
  %77 = sext i8 %76 to i32
  %78 = icmp slt i8 %76, 0
  br i1 %78, label %79, label %102

79:                                               ; preds = %75
  %80 = sub nsw i32 0, %77
  %81 = xor i32 %77, -1
  %82 = shl i32 1, %81
  %83 = insertelement <8 x i32> undef, i32 %82, i32 0
  %84 = shufflevector <8 x i32> %83, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %85

85:                                               ; preds = %85, %79
  %86 = phi i64 [ 0, %79 ], [ %100, %85 ]
  %87 = shl nsw i64 %86, 2
  %88 = getelementptr inbounds <4 x i64>, <4 x i64>* %55, i64 %87
  %89 = bitcast <4 x i64>* %88 to <8 x i32>*
  %90 = load <8 x i32>, <8 x i32>* %89, align 32
  %91 = add <8 x i32> %90, %84
  %92 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %91, i32 %80) #7
  store <8 x i32> %92, <8 x i32>* %89, align 32
  %93 = shl i64 %86, 2
  %94 = or i64 %93, 4
  %95 = getelementptr inbounds <4 x i64>, <4 x i64>* %55, i64 %94
  %96 = bitcast <4 x i64>* %95 to <8 x i32>*
  %97 = load <8 x i32>, <8 x i32>* %96, align 32
  %98 = add <8 x i32> %97, %84
  %99 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %98, i32 %80) #7
  store <8 x i32> %99, <8 x i32>* %96, align 32
  %100 = add nuw nsw i64 %86, 2
  %101 = icmp eq i64 %100, 32
  br i1 %101, label %134, label %85

102:                                              ; preds = %75
  %103 = icmp eq i8 %76, 0
  br i1 %103, label %104, label %107

104:                                              ; preds = %102
  %105 = or i64 %26, 1
  %106 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %105
  br label %192

107:                                              ; preds = %102, %107
  %108 = phi i64 [ %132, %107 ], [ 0, %102 ]
  %109 = shl nsw i64 %108, 2
  %110 = getelementptr inbounds <4 x i64>, <4 x i64>* %55, i64 %109
  %111 = bitcast <4 x i64>* %110 to <8 x i32>*
  %112 = load <8 x i32>, <8 x i32>* %111, align 32
  %113 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %112, i32 %77) #7
  store <8 x i32> %113, <8 x i32>* %111, align 32
  %114 = shl i64 %108, 2
  %115 = or i64 %114, 4
  %116 = getelementptr inbounds <4 x i64>, <4 x i64>* %55, i64 %115
  %117 = bitcast <4 x i64>* %116 to <8 x i32>*
  %118 = load <8 x i32>, <8 x i32>* %117, align 32
  %119 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %118, i32 %77) #7
  store <8 x i32> %119, <8 x i32>* %117, align 32
  %120 = shl i64 %108, 2
  %121 = or i64 %120, 8
  %122 = getelementptr inbounds <4 x i64>, <4 x i64>* %55, i64 %121
  %123 = bitcast <4 x i64>* %122 to <8 x i32>*
  %124 = load <8 x i32>, <8 x i32>* %123, align 32
  %125 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %124, i32 %77) #7
  store <8 x i32> %125, <8 x i32>* %123, align 32
  %126 = shl i64 %108, 2
  %127 = or i64 %126, 12
  %128 = getelementptr inbounds <4 x i64>, <4 x i64>* %55, i64 %127
  %129 = bitcast <4 x i64>* %128 to <8 x i32>*
  %130 = load <8 x i32>, <8 x i32>* %129, align 32
  %131 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %130, i32 %77) #7
  store <8 x i32> %131, <8 x i32>* %129, align 32
  %132 = add nuw nsw i64 %108, 4
  %133 = icmp eq i64 %132, 32
  br i1 %133, label %134, label %107

134:                                              ; preds = %107, %85
  %135 = load i8, i8* %11, align 1
  %136 = or i64 %26, 1
  %137 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %136
  %138 = sext i8 %135 to i32
  %139 = icmp slt i8 %135, 0
  br i1 %139, label %140, label %163

140:                                              ; preds = %134
  %141 = sub nsw i32 0, %138
  %142 = xor i32 %138, -1
  %143 = shl i32 1, %142
  %144 = insertelement <8 x i32> undef, i32 %143, i32 0
  %145 = shufflevector <8 x i32> %144, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %146

146:                                              ; preds = %146, %140
  %147 = phi i64 [ 0, %140 ], [ %161, %146 ]
  %148 = shl nsw i64 %147, 2
  %149 = getelementptr inbounds <4 x i64>, <4 x i64>* %137, i64 %148
  %150 = bitcast <4 x i64>* %149 to <8 x i32>*
  %151 = load <8 x i32>, <8 x i32>* %150, align 32
  %152 = add <8 x i32> %151, %145
  %153 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %152, i32 %141) #7
  store <8 x i32> %153, <8 x i32>* %150, align 32
  %154 = shl i64 %147, 2
  %155 = or i64 %154, 4
  %156 = getelementptr inbounds <4 x i64>, <4 x i64>* %137, i64 %155
  %157 = bitcast <4 x i64>* %156 to <8 x i32>*
  %158 = load <8 x i32>, <8 x i32>* %157, align 32
  %159 = add <8 x i32> %158, %145
  %160 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %159, i32 %141) #7
  store <8 x i32> %160, <8 x i32>* %157, align 32
  %161 = add nuw nsw i64 %147, 2
  %162 = icmp eq i64 %161, 32
  br i1 %162, label %192, label %146

163:                                              ; preds = %134
  %164 = icmp eq i8 %135, 0
  br i1 %164, label %192, label %165

165:                                              ; preds = %163, %165
  %166 = phi i64 [ %190, %165 ], [ 0, %163 ]
  %167 = shl nsw i64 %166, 2
  %168 = getelementptr inbounds <4 x i64>, <4 x i64>* %137, i64 %167
  %169 = bitcast <4 x i64>* %168 to <8 x i32>*
  %170 = load <8 x i32>, <8 x i32>* %169, align 32
  %171 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %170, i32 %138) #7
  store <8 x i32> %171, <8 x i32>* %169, align 32
  %172 = shl i64 %166, 2
  %173 = or i64 %172, 4
  %174 = getelementptr inbounds <4 x i64>, <4 x i64>* %137, i64 %173
  %175 = bitcast <4 x i64>* %174 to <8 x i32>*
  %176 = load <8 x i32>, <8 x i32>* %175, align 32
  %177 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %176, i32 %138) #7
  store <8 x i32> %177, <8 x i32>* %175, align 32
  %178 = shl i64 %166, 2
  %179 = or i64 %178, 8
  %180 = getelementptr inbounds <4 x i64>, <4 x i64>* %137, i64 %179
  %181 = bitcast <4 x i64>* %180 to <8 x i32>*
  %182 = load <8 x i32>, <8 x i32>* %181, align 32
  %183 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %182, i32 %138) #7
  store <8 x i32> %183, <8 x i32>* %181, align 32
  %184 = shl i64 %166, 2
  %185 = or i64 %184, 12
  %186 = getelementptr inbounds <4 x i64>, <4 x i64>* %137, i64 %185
  %187 = bitcast <4 x i64>* %186 to <8 x i32>*
  %188 = load <8 x i32>, <8 x i32>* %187, align 32
  %189 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %188, i32 %138) #7
  store <8 x i32> %189, <8 x i32>* %187, align 32
  %190 = add nuw nsw i64 %166, 4
  %191 = icmp eq i64 %190, 32
  br i1 %191, label %192, label %165

192:                                              ; preds = %165, %146, %104, %163
  %193 = phi <4 x i64>* [ %137, %163 ], [ %106, %104 ], [ %137, %146 ], [ %137, %165 ]
  call void %16(<4 x i64>* %55, <4 x i64>* %55, i8 signext %12, i32 4, i32 4) #7
  call void %16(<4 x i64>* %193, <4 x i64>* %193, i8 signext %12, i32 4, i32 4) #7
  %194 = load i8, i8* %21, align 1
  %195 = sext i8 %194 to i32
  %196 = icmp slt i8 %194, 0
  br i1 %196, label %197, label %220

197:                                              ; preds = %192
  %198 = sub nsw i32 0, %195
  %199 = xor i32 %195, -1
  %200 = shl i32 1, %199
  %201 = insertelement <8 x i32> undef, i32 %200, i32 0
  %202 = shufflevector <8 x i32> %201, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %203

203:                                              ; preds = %203, %197
  %204 = phi i64 [ 0, %197 ], [ %218, %203 ]
  %205 = shl nsw i64 %204, 2
  %206 = getelementptr inbounds <4 x i64>, <4 x i64>* %55, i64 %205
  %207 = bitcast <4 x i64>* %206 to <8 x i32>*
  %208 = load <8 x i32>, <8 x i32>* %207, align 32
  %209 = add <8 x i32> %208, %202
  %210 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %209, i32 %198) #7
  store <8 x i32> %210, <8 x i32>* %207, align 32
  %211 = shl i64 %204, 2
  %212 = or i64 %211, 4
  %213 = getelementptr inbounds <4 x i64>, <4 x i64>* %55, i64 %212
  %214 = bitcast <4 x i64>* %213 to <8 x i32>*
  %215 = load <8 x i32>, <8 x i32>* %214, align 32
  %216 = add <8 x i32> %215, %202
  %217 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %216, i32 %198) #7
  store <8 x i32> %217, <8 x i32>* %214, align 32
  %218 = add nuw nsw i64 %204, 2
  %219 = icmp eq i64 %218, 32
  br i1 %219, label %249, label %203

220:                                              ; preds = %192
  %221 = icmp eq i8 %194, 0
  br i1 %221, label %305, label %222

222:                                              ; preds = %220, %222
  %223 = phi i64 [ %247, %222 ], [ 0, %220 ]
  %224 = shl nsw i64 %223, 2
  %225 = getelementptr inbounds <4 x i64>, <4 x i64>* %55, i64 %224
  %226 = bitcast <4 x i64>* %225 to <8 x i32>*
  %227 = load <8 x i32>, <8 x i32>* %226, align 32
  %228 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %227, i32 %195) #7
  store <8 x i32> %228, <8 x i32>* %226, align 32
  %229 = shl i64 %223, 2
  %230 = or i64 %229, 4
  %231 = getelementptr inbounds <4 x i64>, <4 x i64>* %55, i64 %230
  %232 = bitcast <4 x i64>* %231 to <8 x i32>*
  %233 = load <8 x i32>, <8 x i32>* %232, align 32
  %234 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %233, i32 %195) #7
  store <8 x i32> %234, <8 x i32>* %232, align 32
  %235 = shl i64 %223, 2
  %236 = or i64 %235, 8
  %237 = getelementptr inbounds <4 x i64>, <4 x i64>* %55, i64 %236
  %238 = bitcast <4 x i64>* %237 to <8 x i32>*
  %239 = load <8 x i32>, <8 x i32>* %238, align 32
  %240 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %239, i32 %195) #7
  store <8 x i32> %240, <8 x i32>* %238, align 32
  %241 = shl i64 %223, 2
  %242 = or i64 %241, 12
  %243 = getelementptr inbounds <4 x i64>, <4 x i64>* %55, i64 %242
  %244 = bitcast <4 x i64>* %243 to <8 x i32>*
  %245 = load <8 x i32>, <8 x i32>* %244, align 32
  %246 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %245, i32 %195) #7
  store <8 x i32> %246, <8 x i32>* %244, align 32
  %247 = add nuw nsw i64 %223, 4
  %248 = icmp eq i64 %247, 32
  br i1 %248, label %249, label %222

249:                                              ; preds = %222, %203
  %250 = load i8, i8* %21, align 1
  %251 = sext i8 %250 to i32
  %252 = icmp slt i8 %250, 0
  br i1 %252, label %253, label %276

253:                                              ; preds = %249
  %254 = sub nsw i32 0, %251
  %255 = xor i32 %251, -1
  %256 = shl i32 1, %255
  %257 = insertelement <8 x i32> undef, i32 %256, i32 0
  %258 = shufflevector <8 x i32> %257, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %259

259:                                              ; preds = %259, %253
  %260 = phi i64 [ 0, %253 ], [ %274, %259 ]
  %261 = shl nsw i64 %260, 2
  %262 = getelementptr inbounds <4 x i64>, <4 x i64>* %193, i64 %261
  %263 = bitcast <4 x i64>* %262 to <8 x i32>*
  %264 = load <8 x i32>, <8 x i32>* %263, align 32
  %265 = add <8 x i32> %264, %258
  %266 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %265, i32 %254) #7
  store <8 x i32> %266, <8 x i32>* %263, align 32
  %267 = shl i64 %260, 2
  %268 = or i64 %267, 4
  %269 = getelementptr inbounds <4 x i64>, <4 x i64>* %193, i64 %268
  %270 = bitcast <4 x i64>* %269 to <8 x i32>*
  %271 = load <8 x i32>, <8 x i32>* %270, align 32
  %272 = add <8 x i32> %271, %258
  %273 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %272, i32 %254) #7
  store <8 x i32> %273, <8 x i32>* %270, align 32
  %274 = add nuw nsw i64 %260, 2
  %275 = icmp eq i64 %274, 32
  br i1 %275, label %305, label %259

276:                                              ; preds = %249
  %277 = icmp eq i8 %250, 0
  br i1 %277, label %305, label %278

278:                                              ; preds = %276, %278
  %279 = phi i64 [ %303, %278 ], [ 0, %276 ]
  %280 = shl nsw i64 %279, 2
  %281 = getelementptr inbounds <4 x i64>, <4 x i64>* %193, i64 %280
  %282 = bitcast <4 x i64>* %281 to <8 x i32>*
  %283 = load <8 x i32>, <8 x i32>* %282, align 32
  %284 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %283, i32 %251) #7
  store <8 x i32> %284, <8 x i32>* %282, align 32
  %285 = shl i64 %279, 2
  %286 = or i64 %285, 4
  %287 = getelementptr inbounds <4 x i64>, <4 x i64>* %193, i64 %286
  %288 = bitcast <4 x i64>* %287 to <8 x i32>*
  %289 = load <8 x i32>, <8 x i32>* %288, align 32
  %290 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %289, i32 %251) #7
  store <8 x i32> %290, <8 x i32>* %288, align 32
  %291 = shl i64 %279, 2
  %292 = or i64 %291, 8
  %293 = getelementptr inbounds <4 x i64>, <4 x i64>* %193, i64 %292
  %294 = bitcast <4 x i64>* %293 to <8 x i32>*
  %295 = load <8 x i32>, <8 x i32>* %294, align 32
  %296 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %295, i32 %251) #7
  store <8 x i32> %296, <8 x i32>* %294, align 32
  %297 = shl i64 %279, 2
  %298 = or i64 %297, 12
  %299 = getelementptr inbounds <4 x i64>, <4 x i64>* %193, i64 %298
  %300 = bitcast <4 x i64>* %299 to <8 x i32>*
  %301 = load <8 x i32>, <8 x i32>* %300, align 32
  %302 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %301, i32 %251) #7
  store <8 x i32> %302, <8 x i32>* %300, align 32
  %303 = add nuw nsw i64 %279, 4
  %304 = icmp eq i64 %303, 32
  br i1 %304, label %305, label %278

305:                                              ; preds = %278, %259, %220, %276
  %306 = add nuw nsw i64 %23, 1
  %307 = icmp eq i64 %306, 2
  br i1 %307, label %308, label %22

308:                                              ; preds = %305
  %309 = bitcast i32* %1 to i8*
  br label %310

310:                                              ; preds = %308, %403
  %311 = phi i64 [ 0, %308 ], [ %404, %403 ]
  %312 = shl i64 %311, 2
  %313 = lshr exact i64 %311, 3
  br label %316

314:                                              ; preds = %403
  %315 = getelementptr inbounds i8, i8* %11, i64 2
  br label %406

316:                                              ; preds = %316, %310
  %317 = phi i64 [ 0, %310 ], [ %401, %316 ]
  %318 = add nuw nsw i64 %317, %312
  %319 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %318
  %320 = shl i64 %317, 5
  %321 = add nuw nsw i64 %320, %313
  %322 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %9, i64 0, i64 %321
  %323 = bitcast <4 x i64>* %319 to <8 x i32>*
  %324 = load <8 x i32>, <8 x i32>* %323, align 32
  %325 = getelementptr inbounds <4 x i64>, <4 x i64>* %319, i64 4
  %326 = bitcast <4 x i64>* %325 to <8 x i32>*
  %327 = load <8 x i32>, <8 x i32>* %326, align 32
  %328 = shufflevector <8 x i32> %324, <8 x i32> %327, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %329 = bitcast <8 x i32> %328 to <4 x i64>
  %330 = shufflevector <8 x i32> %324, <8 x i32> %327, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %331 = bitcast <8 x i32> %330 to <4 x i64>
  %332 = getelementptr inbounds <4 x i64>, <4 x i64>* %319, i64 8
  %333 = bitcast <4 x i64>* %332 to <8 x i32>*
  %334 = load <8 x i32>, <8 x i32>* %333, align 32
  %335 = getelementptr inbounds <4 x i64>, <4 x i64>* %319, i64 12
  %336 = bitcast <4 x i64>* %335 to <8 x i32>*
  %337 = load <8 x i32>, <8 x i32>* %336, align 32
  %338 = shufflevector <8 x i32> %334, <8 x i32> %337, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %339 = bitcast <8 x i32> %338 to <4 x i64>
  %340 = shufflevector <8 x i32> %334, <8 x i32> %337, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %341 = bitcast <8 x i32> %340 to <4 x i64>
  %342 = getelementptr inbounds <4 x i64>, <4 x i64>* %319, i64 16
  %343 = bitcast <4 x i64>* %342 to <8 x i32>*
  %344 = load <8 x i32>, <8 x i32>* %343, align 32
  %345 = getelementptr inbounds <4 x i64>, <4 x i64>* %319, i64 20
  %346 = bitcast <4 x i64>* %345 to <8 x i32>*
  %347 = load <8 x i32>, <8 x i32>* %346, align 32
  %348 = shufflevector <8 x i32> %344, <8 x i32> %347, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %349 = bitcast <8 x i32> %348 to <4 x i64>
  %350 = shufflevector <8 x i32> %344, <8 x i32> %347, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %351 = bitcast <8 x i32> %350 to <4 x i64>
  %352 = getelementptr inbounds <4 x i64>, <4 x i64>* %319, i64 24
  %353 = bitcast <4 x i64>* %352 to <8 x i32>*
  %354 = load <8 x i32>, <8 x i32>* %353, align 32
  %355 = getelementptr inbounds <4 x i64>, <4 x i64>* %319, i64 28
  %356 = bitcast <4 x i64>* %355 to <8 x i32>*
  %357 = load <8 x i32>, <8 x i32>* %356, align 32
  %358 = shufflevector <8 x i32> %354, <8 x i32> %357, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %359 = bitcast <8 x i32> %358 to <4 x i64>
  %360 = shufflevector <8 x i32> %354, <8 x i32> %357, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %361 = bitcast <8 x i32> %360 to <4 x i64>
  %362 = shufflevector <4 x i64> %329, <4 x i64> %339, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %363 = shufflevector <4 x i64> %349, <4 x i64> %359, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %364 = bitcast <4 x i64> %362 to <8 x i32>
  %365 = bitcast <4 x i64> %363 to <8 x i32>
  %366 = shufflevector <8 x i32> %364, <8 x i32> %365, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %367 = bitcast <4 x i64>* %322 to <8 x i32>*
  store <8 x i32> %366, <8 x i32>* %367, align 32
  %368 = shufflevector <8 x i32> %364, <8 x i32> %365, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %369 = getelementptr inbounds <4 x i64>, <4 x i64>* %322, i64 16
  %370 = bitcast <4 x i64>* %369 to <8 x i32>*
  store <8 x i32> %368, <8 x i32>* %370, align 32
  %371 = shufflevector <4 x i64> %329, <4 x i64> %339, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %372 = shufflevector <4 x i64> %349, <4 x i64> %359, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %373 = bitcast <4 x i64> %371 to <8 x i32>
  %374 = bitcast <4 x i64> %372 to <8 x i32>
  %375 = shufflevector <8 x i32> %373, <8 x i32> %374, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %376 = getelementptr inbounds <4 x i64>, <4 x i64>* %322, i64 4
  %377 = bitcast <4 x i64>* %376 to <8 x i32>*
  store <8 x i32> %375, <8 x i32>* %377, align 32
  %378 = shufflevector <8 x i32> %373, <8 x i32> %374, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %379 = getelementptr inbounds <4 x i64>, <4 x i64>* %322, i64 20
  %380 = bitcast <4 x i64>* %379 to <8 x i32>*
  store <8 x i32> %378, <8 x i32>* %380, align 32
  %381 = shufflevector <4 x i64> %331, <4 x i64> %341, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %382 = shufflevector <4 x i64> %351, <4 x i64> %361, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %383 = bitcast <4 x i64> %381 to <8 x i32>
  %384 = bitcast <4 x i64> %382 to <8 x i32>
  %385 = shufflevector <8 x i32> %383, <8 x i32> %384, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %386 = getelementptr inbounds <4 x i64>, <4 x i64>* %322, i64 8
  %387 = bitcast <4 x i64>* %386 to <8 x i32>*
  store <8 x i32> %385, <8 x i32>* %387, align 32
  %388 = shufflevector <8 x i32> %383, <8 x i32> %384, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %389 = getelementptr inbounds <4 x i64>, <4 x i64>* %322, i64 24
  %390 = bitcast <4 x i64>* %389 to <8 x i32>*
  store <8 x i32> %388, <8 x i32>* %390, align 32
  %391 = shufflevector <4 x i64> %331, <4 x i64> %341, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %392 = shufflevector <4 x i64> %351, <4 x i64> %361, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %393 = bitcast <4 x i64> %391 to <8 x i32>
  %394 = bitcast <4 x i64> %392 to <8 x i32>
  %395 = shufflevector <8 x i32> %393, <8 x i32> %394, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %396 = getelementptr inbounds <4 x i64>, <4 x i64>* %322, i64 12
  %397 = bitcast <4 x i64>* %396 to <8 x i32>*
  store <8 x i32> %395, <8 x i32>* %397, align 32
  %398 = shufflevector <8 x i32> %393, <8 x i32> %394, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %399 = getelementptr inbounds <4 x i64>, <4 x i64>* %322, i64 28
  %400 = bitcast <4 x i64>* %399 to <8 x i32>*
  store <8 x i32> %398, <8 x i32>* %400, align 32
  %401 = add nuw nsw i64 %317, 1
  %402 = icmp eq i64 %401, 4
  br i1 %402, label %403, label %316

403:                                              ; preds = %316
  %404 = add nuw nsw i64 %311, 8
  %405 = icmp ult i64 %404, 32
  br i1 %405, label %310, label %314

406:                                              ; preds = %523, %314
  %407 = phi i64 [ 0, %314 ], [ %524, %523 ]
  %408 = shl nuw i64 %407, 1
  %409 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %9, i64 0, i64 %408
  call void %18(<4 x i64>* %409, <4 x i64>* %409, i8 signext %13, i32 4, i32 4) #7
  %410 = or i64 %408, 1
  %411 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %9, i64 0, i64 %410
  call void %18(<4 x i64>* %411, <4 x i64>* %411, i8 signext %13, i32 4, i32 4) #7
  %412 = load i8, i8* %315, align 1
  %413 = sext i8 %412 to i32
  %414 = icmp slt i8 %412, 0
  br i1 %414, label %415, label %438

415:                                              ; preds = %406
  %416 = sub nsw i32 0, %413
  %417 = xor i32 %413, -1
  %418 = shl i32 1, %417
  %419 = insertelement <8 x i32> undef, i32 %418, i32 0
  %420 = shufflevector <8 x i32> %419, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %421

421:                                              ; preds = %421, %415
  %422 = phi i64 [ 0, %415 ], [ %436, %421 ]
  %423 = shl nsw i64 %422, 2
  %424 = getelementptr inbounds <4 x i64>, <4 x i64>* %409, i64 %423
  %425 = bitcast <4 x i64>* %424 to <8 x i32>*
  %426 = load <8 x i32>, <8 x i32>* %425, align 32
  %427 = add <8 x i32> %426, %420
  %428 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %427, i32 %416) #7
  store <8 x i32> %428, <8 x i32>* %425, align 32
  %429 = shl i64 %422, 2
  %430 = or i64 %429, 4
  %431 = getelementptr inbounds <4 x i64>, <4 x i64>* %409, i64 %430
  %432 = bitcast <4 x i64>* %431 to <8 x i32>*
  %433 = load <8 x i32>, <8 x i32>* %432, align 32
  %434 = add <8 x i32> %433, %420
  %435 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %434, i32 %416) #7
  store <8 x i32> %435, <8 x i32>* %432, align 32
  %436 = add nuw nsw i64 %422, 2
  %437 = icmp eq i64 %436, 32
  br i1 %437, label %467, label %421

438:                                              ; preds = %406
  %439 = icmp eq i8 %412, 0
  br i1 %439, label %523, label %440

440:                                              ; preds = %438, %440
  %441 = phi i64 [ %465, %440 ], [ 0, %438 ]
  %442 = shl nsw i64 %441, 2
  %443 = getelementptr inbounds <4 x i64>, <4 x i64>* %409, i64 %442
  %444 = bitcast <4 x i64>* %443 to <8 x i32>*
  %445 = load <8 x i32>, <8 x i32>* %444, align 32
  %446 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %445, i32 %413) #7
  store <8 x i32> %446, <8 x i32>* %444, align 32
  %447 = shl i64 %441, 2
  %448 = or i64 %447, 4
  %449 = getelementptr inbounds <4 x i64>, <4 x i64>* %409, i64 %448
  %450 = bitcast <4 x i64>* %449 to <8 x i32>*
  %451 = load <8 x i32>, <8 x i32>* %450, align 32
  %452 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %451, i32 %413) #7
  store <8 x i32> %452, <8 x i32>* %450, align 32
  %453 = shl i64 %441, 2
  %454 = or i64 %453, 8
  %455 = getelementptr inbounds <4 x i64>, <4 x i64>* %409, i64 %454
  %456 = bitcast <4 x i64>* %455 to <8 x i32>*
  %457 = load <8 x i32>, <8 x i32>* %456, align 32
  %458 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %457, i32 %413) #7
  store <8 x i32> %458, <8 x i32>* %456, align 32
  %459 = shl i64 %441, 2
  %460 = or i64 %459, 12
  %461 = getelementptr inbounds <4 x i64>, <4 x i64>* %409, i64 %460
  %462 = bitcast <4 x i64>* %461 to <8 x i32>*
  %463 = load <8 x i32>, <8 x i32>* %462, align 32
  %464 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %463, i32 %413) #7
  store <8 x i32> %464, <8 x i32>* %462, align 32
  %465 = add nuw nsw i64 %441, 4
  %466 = icmp eq i64 %465, 32
  br i1 %466, label %467, label %440

467:                                              ; preds = %440, %421
  %468 = load i8, i8* %315, align 1
  %469 = sext i8 %468 to i32
  %470 = icmp slt i8 %468, 0
  br i1 %470, label %471, label %494

471:                                              ; preds = %467
  %472 = sub nsw i32 0, %469
  %473 = xor i32 %469, -1
  %474 = shl i32 1, %473
  %475 = insertelement <8 x i32> undef, i32 %474, i32 0
  %476 = shufflevector <8 x i32> %475, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %477

477:                                              ; preds = %477, %471
  %478 = phi i64 [ 0, %471 ], [ %492, %477 ]
  %479 = shl nsw i64 %478, 2
  %480 = getelementptr inbounds <4 x i64>, <4 x i64>* %411, i64 %479
  %481 = bitcast <4 x i64>* %480 to <8 x i32>*
  %482 = load <8 x i32>, <8 x i32>* %481, align 32
  %483 = add <8 x i32> %482, %476
  %484 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %483, i32 %472) #7
  store <8 x i32> %484, <8 x i32>* %481, align 32
  %485 = shl i64 %478, 2
  %486 = or i64 %485, 4
  %487 = getelementptr inbounds <4 x i64>, <4 x i64>* %411, i64 %486
  %488 = bitcast <4 x i64>* %487 to <8 x i32>*
  %489 = load <8 x i32>, <8 x i32>* %488, align 32
  %490 = add <8 x i32> %489, %476
  %491 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %490, i32 %472) #7
  store <8 x i32> %491, <8 x i32>* %488, align 32
  %492 = add nuw nsw i64 %478, 2
  %493 = icmp eq i64 %492, 32
  br i1 %493, label %523, label %477

494:                                              ; preds = %467
  %495 = icmp eq i8 %468, 0
  br i1 %495, label %523, label %496

496:                                              ; preds = %494, %496
  %497 = phi i64 [ %521, %496 ], [ 0, %494 ]
  %498 = shl nsw i64 %497, 2
  %499 = getelementptr inbounds <4 x i64>, <4 x i64>* %411, i64 %498
  %500 = bitcast <4 x i64>* %499 to <8 x i32>*
  %501 = load <8 x i32>, <8 x i32>* %500, align 32
  %502 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %501, i32 %469) #7
  store <8 x i32> %502, <8 x i32>* %500, align 32
  %503 = shl i64 %497, 2
  %504 = or i64 %503, 4
  %505 = getelementptr inbounds <4 x i64>, <4 x i64>* %411, i64 %504
  %506 = bitcast <4 x i64>* %505 to <8 x i32>*
  %507 = load <8 x i32>, <8 x i32>* %506, align 32
  %508 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %507, i32 %469) #7
  store <8 x i32> %508, <8 x i32>* %506, align 32
  %509 = shl i64 %497, 2
  %510 = or i64 %509, 8
  %511 = getelementptr inbounds <4 x i64>, <4 x i64>* %411, i64 %510
  %512 = bitcast <4 x i64>* %511 to <8 x i32>*
  %513 = load <8 x i32>, <8 x i32>* %512, align 32
  %514 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %513, i32 %469) #7
  store <8 x i32> %514, <8 x i32>* %512, align 32
  %515 = shl i64 %497, 2
  %516 = or i64 %515, 12
  %517 = getelementptr inbounds <4 x i64>, <4 x i64>* %411, i64 %516
  %518 = bitcast <4 x i64>* %517 to <8 x i32>*
  %519 = load <8 x i32>, <8 x i32>* %518, align 32
  %520 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %519, i32 %469) #7
  store <8 x i32> %520, <8 x i32>* %518, align 32
  %521 = add nuw nsw i64 %497, 4
  %522 = icmp eq i64 %521, 32
  br i1 %522, label %523, label %496

523:                                              ; preds = %496, %477, %438, %494
  %524 = add nuw nsw i64 %407, 1
  %525 = icmp eq i64 %524, 2
  br i1 %525, label %526, label %406

526:                                              ; preds = %523, %617
  %527 = phi i64 [ %618, %617 ], [ 0, %523 ]
  %528 = shl i64 %527, 2
  %529 = lshr exact i64 %527, 3
  br label %530

530:                                              ; preds = %530, %526
  %531 = phi i64 [ 0, %526 ], [ %615, %530 ]
  %532 = add nuw nsw i64 %531, %528
  %533 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %9, i64 0, i64 %532
  %534 = shl i64 %531, 5
  %535 = add nuw nsw i64 %534, %529
  %536 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %535
  %537 = bitcast <4 x i64>* %533 to <8 x i32>*
  %538 = load <8 x i32>, <8 x i32>* %537, align 32
  %539 = getelementptr inbounds <4 x i64>, <4 x i64>* %533, i64 4
  %540 = bitcast <4 x i64>* %539 to <8 x i32>*
  %541 = load <8 x i32>, <8 x i32>* %540, align 32
  %542 = shufflevector <8 x i32> %538, <8 x i32> %541, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %543 = bitcast <8 x i32> %542 to <4 x i64>
  %544 = shufflevector <8 x i32> %538, <8 x i32> %541, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %545 = bitcast <8 x i32> %544 to <4 x i64>
  %546 = getelementptr inbounds <4 x i64>, <4 x i64>* %533, i64 8
  %547 = bitcast <4 x i64>* %546 to <8 x i32>*
  %548 = load <8 x i32>, <8 x i32>* %547, align 32
  %549 = getelementptr inbounds <4 x i64>, <4 x i64>* %533, i64 12
  %550 = bitcast <4 x i64>* %549 to <8 x i32>*
  %551 = load <8 x i32>, <8 x i32>* %550, align 32
  %552 = shufflevector <8 x i32> %548, <8 x i32> %551, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %553 = bitcast <8 x i32> %552 to <4 x i64>
  %554 = shufflevector <8 x i32> %548, <8 x i32> %551, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %555 = bitcast <8 x i32> %554 to <4 x i64>
  %556 = getelementptr inbounds <4 x i64>, <4 x i64>* %533, i64 16
  %557 = bitcast <4 x i64>* %556 to <8 x i32>*
  %558 = load <8 x i32>, <8 x i32>* %557, align 32
  %559 = getelementptr inbounds <4 x i64>, <4 x i64>* %533, i64 20
  %560 = bitcast <4 x i64>* %559 to <8 x i32>*
  %561 = load <8 x i32>, <8 x i32>* %560, align 32
  %562 = shufflevector <8 x i32> %558, <8 x i32> %561, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %563 = bitcast <8 x i32> %562 to <4 x i64>
  %564 = shufflevector <8 x i32> %558, <8 x i32> %561, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %565 = bitcast <8 x i32> %564 to <4 x i64>
  %566 = getelementptr inbounds <4 x i64>, <4 x i64>* %533, i64 24
  %567 = bitcast <4 x i64>* %566 to <8 x i32>*
  %568 = load <8 x i32>, <8 x i32>* %567, align 32
  %569 = getelementptr inbounds <4 x i64>, <4 x i64>* %533, i64 28
  %570 = bitcast <4 x i64>* %569 to <8 x i32>*
  %571 = load <8 x i32>, <8 x i32>* %570, align 32
  %572 = shufflevector <8 x i32> %568, <8 x i32> %571, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %573 = bitcast <8 x i32> %572 to <4 x i64>
  %574 = shufflevector <8 x i32> %568, <8 x i32> %571, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %575 = bitcast <8 x i32> %574 to <4 x i64>
  %576 = shufflevector <4 x i64> %543, <4 x i64> %553, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %577 = shufflevector <4 x i64> %563, <4 x i64> %573, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %578 = bitcast <4 x i64> %576 to <8 x i32>
  %579 = bitcast <4 x i64> %577 to <8 x i32>
  %580 = shufflevector <8 x i32> %578, <8 x i32> %579, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %581 = bitcast <4 x i64>* %536 to <8 x i32>*
  store <8 x i32> %580, <8 x i32>* %581, align 32
  %582 = shufflevector <8 x i32> %578, <8 x i32> %579, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %583 = getelementptr inbounds <4 x i64>, <4 x i64>* %536, i64 16
  %584 = bitcast <4 x i64>* %583 to <8 x i32>*
  store <8 x i32> %582, <8 x i32>* %584, align 32
  %585 = shufflevector <4 x i64> %543, <4 x i64> %553, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %586 = shufflevector <4 x i64> %563, <4 x i64> %573, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %587 = bitcast <4 x i64> %585 to <8 x i32>
  %588 = bitcast <4 x i64> %586 to <8 x i32>
  %589 = shufflevector <8 x i32> %587, <8 x i32> %588, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %590 = getelementptr inbounds <4 x i64>, <4 x i64>* %536, i64 4
  %591 = bitcast <4 x i64>* %590 to <8 x i32>*
  store <8 x i32> %589, <8 x i32>* %591, align 32
  %592 = shufflevector <8 x i32> %587, <8 x i32> %588, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %593 = getelementptr inbounds <4 x i64>, <4 x i64>* %536, i64 20
  %594 = bitcast <4 x i64>* %593 to <8 x i32>*
  store <8 x i32> %592, <8 x i32>* %594, align 32
  %595 = shufflevector <4 x i64> %545, <4 x i64> %555, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %596 = shufflevector <4 x i64> %565, <4 x i64> %575, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %597 = bitcast <4 x i64> %595 to <8 x i32>
  %598 = bitcast <4 x i64> %596 to <8 x i32>
  %599 = shufflevector <8 x i32> %597, <8 x i32> %598, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %600 = getelementptr inbounds <4 x i64>, <4 x i64>* %536, i64 8
  %601 = bitcast <4 x i64>* %600 to <8 x i32>*
  store <8 x i32> %599, <8 x i32>* %601, align 32
  %602 = shufflevector <8 x i32> %597, <8 x i32> %598, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %603 = getelementptr inbounds <4 x i64>, <4 x i64>* %536, i64 24
  %604 = bitcast <4 x i64>* %603 to <8 x i32>*
  store <8 x i32> %602, <8 x i32>* %604, align 32
  %605 = shufflevector <4 x i64> %545, <4 x i64> %555, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %606 = shufflevector <4 x i64> %565, <4 x i64> %575, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %607 = bitcast <4 x i64> %605 to <8 x i32>
  %608 = bitcast <4 x i64> %606 to <8 x i32>
  %609 = shufflevector <8 x i32> %607, <8 x i32> %608, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %610 = getelementptr inbounds <4 x i64>, <4 x i64>* %536, i64 12
  %611 = bitcast <4 x i64>* %610 to <8 x i32>*
  store <8 x i32> %609, <8 x i32>* %611, align 32
  %612 = shufflevector <8 x i32> %607, <8 x i32> %608, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %613 = getelementptr inbounds <4 x i64>, <4 x i64>* %536, i64 28
  %614 = bitcast <4 x i64>* %613 to <8 x i32>*
  store <8 x i32> %612, <8 x i32>* %614, align 32
  %615 = add nuw nsw i64 %531, 1
  %616 = icmp eq i64 %615, 4
  br i1 %616, label %617, label %530

617:                                              ; preds = %530
  %618 = add nuw nsw i64 %527, 8
  %619 = icmp ult i64 %618, 32
  br i1 %619, label %526, label %620

620:                                              ; preds = %617
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 32 %309, i8* nonnull align 32 %8, i64 4096, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %10) #7
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %8) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_fwd_txfm2d_64x64_avx2(i16* nocapture readonly, i32* nocapture, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [64 x <4 x i64>], align 32
  %7 = alloca [512 x <4 x i64>], align 32
  %8 = alloca [512 x <4 x i64>], align 32
  %9 = bitcast [512 x <4 x i64>]* %8 to i8*
  %10 = bitcast [512 x <4 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16384, i8* nonnull %10) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %10, i8 -86, i64 16384, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16384, i8* nonnull %9) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %9, i8 -86, i64 16384, i1 false)
  %11 = load i8*, i8** getelementptr inbounds ([19 x i8*], [19 x i8*]* @av1_fwd_txfm_shift_ls, i64 0, i64 4), align 16
  %12 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 4, i64 4), align 4
  %13 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 4, i64 4), align 4
  %14 = bitcast [64 x <4 x i64>]* %6 to i8*
  %15 = sext i32 %2 to i64
  %16 = getelementptr inbounds i8, i8* %11, i64 1
  br label %17

17:                                               ; preds = %300, %5
  %18 = phi i64 [ 0, %5 ], [ %301, %300 ]
  %19 = shl i64 %18, 4
  %20 = getelementptr inbounds i16, i16* %0, i64 %19
  %21 = shl nuw i64 %18, 1
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %14) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %14, i8 -86, i64 2048, i1 false) #7
  br label %22

22:                                               ; preds = %22, %17
  %23 = phi i64 [ 0, %17 ], [ %47, %22 ]
  %24 = mul nsw i64 %23, %15
  %25 = getelementptr inbounds i16, i16* %20, i64 %24
  %26 = bitcast i16* %25 to <4 x i64>*
  %27 = load <4 x i64>, <4 x i64>* %26, align 1
  %28 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %6, i64 0, i64 %23
  store <4 x i64> %27, <4 x i64>* %28, align 32
  %29 = or i64 %23, 1
  %30 = mul nsw i64 %29, %15
  %31 = getelementptr inbounds i16, i16* %20, i64 %30
  %32 = bitcast i16* %31 to <4 x i64>*
  %33 = load <4 x i64>, <4 x i64>* %32, align 1
  %34 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %6, i64 0, i64 %29
  store <4 x i64> %33, <4 x i64>* %34, align 32
  %35 = or i64 %23, 2
  %36 = mul nsw i64 %35, %15
  %37 = getelementptr inbounds i16, i16* %20, i64 %36
  %38 = bitcast i16* %37 to <4 x i64>*
  %39 = load <4 x i64>, <4 x i64>* %38, align 1
  %40 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %6, i64 0, i64 %35
  store <4 x i64> %39, <4 x i64>* %40, align 32
  %41 = or i64 %23, 3
  %42 = mul nsw i64 %41, %15
  %43 = getelementptr inbounds i16, i16* %20, i64 %42
  %44 = bitcast i16* %43 to <4 x i64>*
  %45 = load <4 x i64>, <4 x i64>* %44, align 1
  %46 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %6, i64 0, i64 %41
  store <4 x i64> %45, <4 x i64>* %46, align 32
  %47 = add nuw nsw i64 %23, 4
  %48 = icmp eq i64 %47, 64
  br i1 %48, label %49, label %22

49:                                               ; preds = %22
  %50 = getelementptr inbounds [512 x <4 x i64>], [512 x <4 x i64>]* %7, i64 0, i64 %21
  br label %51

51:                                               ; preds = %49, %51
  %52 = phi i64 [ %68, %51 ], [ 0, %49 ]
  %53 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %6, i64 0, i64 %52
  %54 = load <4 x i64>, <4 x i64>* %53, align 32
  %55 = shufflevector <4 x i64> %54, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %56 = bitcast <2 x i64> %55 to <8 x i16>
  %57 = sext <8 x i16> %56 to <8 x i32>
  %58 = shl nsw i64 %52, 3
  %59 = getelementptr inbounds <4 x i64>, <4 x i64>* %50, i64 %58
  %60 = bitcast <4 x i64>* %59 to <8 x i32>*
  store <8 x i32> %57, <8 x i32>* %60, align 32
  %61 = bitcast <4 x i64> %54 to <8 x i32>
  %62 = shufflevector <8 x i32> %61, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %63 = bitcast <4 x i32> %62 to <8 x i16>
  %64 = sext <8 x i16> %63 to <8 x i32>
  %65 = or i64 %58, 1
  %66 = getelementptr inbounds <4 x i64>, <4 x i64>* %50, i64 %65
  %67 = bitcast <4 x i64>* %66 to <8 x i32>*
  store <8 x i32> %64, <8 x i32>* %67, align 32
  %68 = add nuw nsw i64 %52, 1
  %69 = icmp eq i64 %68, 64
  br i1 %69, label %70, label %51

70:                                               ; preds = %51
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %14) #7
  %71 = load i8, i8* %11, align 1
  %72 = sext i8 %71 to i32
  %73 = icmp slt i8 %71, 0
  br i1 %73, label %74, label %97

74:                                               ; preds = %70
  %75 = sub nsw i32 0, %72
  %76 = xor i32 %72, -1
  %77 = shl i32 1, %76
  %78 = insertelement <8 x i32> undef, i32 %77, i32 0
  %79 = shufflevector <8 x i32> %78, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %80

80:                                               ; preds = %80, %74
  %81 = phi i64 [ 0, %74 ], [ %95, %80 ]
  %82 = shl nsw i64 %81, 3
  %83 = getelementptr inbounds <4 x i64>, <4 x i64>* %50, i64 %82
  %84 = bitcast <4 x i64>* %83 to <8 x i32>*
  %85 = load <8 x i32>, <8 x i32>* %84, align 32
  %86 = add <8 x i32> %85, %79
  %87 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %86, i32 %75) #7
  store <8 x i32> %87, <8 x i32>* %84, align 32
  %88 = shl i64 %81, 3
  %89 = or i64 %88, 8
  %90 = getelementptr inbounds <4 x i64>, <4 x i64>* %50, i64 %89
  %91 = bitcast <4 x i64>* %90 to <8 x i32>*
  %92 = load <8 x i32>, <8 x i32>* %91, align 32
  %93 = add <8 x i32> %92, %79
  %94 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %93, i32 %75) #7
  store <8 x i32> %94, <8 x i32>* %91, align 32
  %95 = add nuw nsw i64 %81, 2
  %96 = icmp eq i64 %95, 64
  br i1 %96, label %129, label %80

97:                                               ; preds = %70
  %98 = icmp eq i8 %71, 0
  br i1 %98, label %99, label %102

99:                                               ; preds = %97
  %100 = or i64 %21, 1
  %101 = getelementptr inbounds [512 x <4 x i64>], [512 x <4 x i64>]* %7, i64 0, i64 %100
  br label %187

102:                                              ; preds = %97, %102
  %103 = phi i64 [ %127, %102 ], [ 0, %97 ]
  %104 = shl nsw i64 %103, 3
  %105 = getelementptr inbounds <4 x i64>, <4 x i64>* %50, i64 %104
  %106 = bitcast <4 x i64>* %105 to <8 x i32>*
  %107 = load <8 x i32>, <8 x i32>* %106, align 32
  %108 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %107, i32 %72) #7
  store <8 x i32> %108, <8 x i32>* %106, align 32
  %109 = shl i64 %103, 3
  %110 = or i64 %109, 8
  %111 = getelementptr inbounds <4 x i64>, <4 x i64>* %50, i64 %110
  %112 = bitcast <4 x i64>* %111 to <8 x i32>*
  %113 = load <8 x i32>, <8 x i32>* %112, align 32
  %114 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %113, i32 %72) #7
  store <8 x i32> %114, <8 x i32>* %112, align 32
  %115 = shl i64 %103, 3
  %116 = or i64 %115, 16
  %117 = getelementptr inbounds <4 x i64>, <4 x i64>* %50, i64 %116
  %118 = bitcast <4 x i64>* %117 to <8 x i32>*
  %119 = load <8 x i32>, <8 x i32>* %118, align 32
  %120 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %119, i32 %72) #7
  store <8 x i32> %120, <8 x i32>* %118, align 32
  %121 = shl i64 %103, 3
  %122 = or i64 %121, 24
  %123 = getelementptr inbounds <4 x i64>, <4 x i64>* %50, i64 %122
  %124 = bitcast <4 x i64>* %123 to <8 x i32>*
  %125 = load <8 x i32>, <8 x i32>* %124, align 32
  %126 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %125, i32 %72) #7
  store <8 x i32> %126, <8 x i32>* %124, align 32
  %127 = add nuw nsw i64 %103, 4
  %128 = icmp eq i64 %127, 64
  br i1 %128, label %129, label %102

129:                                              ; preds = %102, %80
  %130 = load i8, i8* %11, align 1
  %131 = or i64 %21, 1
  %132 = getelementptr inbounds [512 x <4 x i64>], [512 x <4 x i64>]* %7, i64 0, i64 %131
  %133 = sext i8 %130 to i32
  %134 = icmp slt i8 %130, 0
  br i1 %134, label %135, label %158

135:                                              ; preds = %129
  %136 = sub nsw i32 0, %133
  %137 = xor i32 %133, -1
  %138 = shl i32 1, %137
  %139 = insertelement <8 x i32> undef, i32 %138, i32 0
  %140 = shufflevector <8 x i32> %139, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %141

141:                                              ; preds = %141, %135
  %142 = phi i64 [ 0, %135 ], [ %156, %141 ]
  %143 = shl nsw i64 %142, 3
  %144 = getelementptr inbounds <4 x i64>, <4 x i64>* %132, i64 %143
  %145 = bitcast <4 x i64>* %144 to <8 x i32>*
  %146 = load <8 x i32>, <8 x i32>* %145, align 32
  %147 = add <8 x i32> %146, %140
  %148 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %147, i32 %136) #7
  store <8 x i32> %148, <8 x i32>* %145, align 32
  %149 = shl i64 %142, 3
  %150 = or i64 %149, 8
  %151 = getelementptr inbounds <4 x i64>, <4 x i64>* %132, i64 %150
  %152 = bitcast <4 x i64>* %151 to <8 x i32>*
  %153 = load <8 x i32>, <8 x i32>* %152, align 32
  %154 = add <8 x i32> %153, %140
  %155 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %154, i32 %136) #7
  store <8 x i32> %155, <8 x i32>* %152, align 32
  %156 = add nuw nsw i64 %142, 2
  %157 = icmp eq i64 %156, 64
  br i1 %157, label %187, label %141

158:                                              ; preds = %129
  %159 = icmp eq i8 %130, 0
  br i1 %159, label %187, label %160

160:                                              ; preds = %158, %160
  %161 = phi i64 [ %185, %160 ], [ 0, %158 ]
  %162 = shl nsw i64 %161, 3
  %163 = getelementptr inbounds <4 x i64>, <4 x i64>* %132, i64 %162
  %164 = bitcast <4 x i64>* %163 to <8 x i32>*
  %165 = load <8 x i32>, <8 x i32>* %164, align 32
  %166 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %165, i32 %133) #7
  store <8 x i32> %166, <8 x i32>* %164, align 32
  %167 = shl i64 %161, 3
  %168 = or i64 %167, 8
  %169 = getelementptr inbounds <4 x i64>, <4 x i64>* %132, i64 %168
  %170 = bitcast <4 x i64>* %169 to <8 x i32>*
  %171 = load <8 x i32>, <8 x i32>* %170, align 32
  %172 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %171, i32 %133) #7
  store <8 x i32> %172, <8 x i32>* %170, align 32
  %173 = shl i64 %161, 3
  %174 = or i64 %173, 16
  %175 = getelementptr inbounds <4 x i64>, <4 x i64>* %132, i64 %174
  %176 = bitcast <4 x i64>* %175 to <8 x i32>*
  %177 = load <8 x i32>, <8 x i32>* %176, align 32
  %178 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %177, i32 %133) #7
  store <8 x i32> %178, <8 x i32>* %176, align 32
  %179 = shl i64 %161, 3
  %180 = or i64 %179, 24
  %181 = getelementptr inbounds <4 x i64>, <4 x i64>* %132, i64 %180
  %182 = bitcast <4 x i64>* %181 to <8 x i32>*
  %183 = load <8 x i32>, <8 x i32>* %182, align 32
  %184 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %183, i32 %133) #7
  store <8 x i32> %184, <8 x i32>* %182, align 32
  %185 = add nuw nsw i64 %161, 4
  %186 = icmp eq i64 %185, 64
  br i1 %186, label %187, label %160

187:                                              ; preds = %160, %141, %99, %158
  %188 = phi <4 x i64>* [ %132, %158 ], [ %101, %99 ], [ %132, %141 ], [ %132, %160 ]
  call fastcc void @fdct64_avx2(<4 x i64>* %50, <4 x i64>* %50, i8 signext %12, i32 8)
  call fastcc void @fdct64_avx2(<4 x i64>* %188, <4 x i64>* %188, i8 signext %12, i32 8)
  %189 = load i8, i8* %16, align 1
  %190 = sext i8 %189 to i32
  %191 = icmp slt i8 %189, 0
  br i1 %191, label %192, label %215

192:                                              ; preds = %187
  %193 = sub nsw i32 0, %190
  %194 = xor i32 %190, -1
  %195 = shl i32 1, %194
  %196 = insertelement <8 x i32> undef, i32 %195, i32 0
  %197 = shufflevector <8 x i32> %196, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %198

198:                                              ; preds = %198, %192
  %199 = phi i64 [ 0, %192 ], [ %213, %198 ]
  %200 = shl nsw i64 %199, 3
  %201 = getelementptr inbounds <4 x i64>, <4 x i64>* %50, i64 %200
  %202 = bitcast <4 x i64>* %201 to <8 x i32>*
  %203 = load <8 x i32>, <8 x i32>* %202, align 32
  %204 = add <8 x i32> %203, %197
  %205 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %204, i32 %193) #7
  store <8 x i32> %205, <8 x i32>* %202, align 32
  %206 = shl i64 %199, 3
  %207 = or i64 %206, 8
  %208 = getelementptr inbounds <4 x i64>, <4 x i64>* %50, i64 %207
  %209 = bitcast <4 x i64>* %208 to <8 x i32>*
  %210 = load <8 x i32>, <8 x i32>* %209, align 32
  %211 = add <8 x i32> %210, %197
  %212 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %211, i32 %193) #7
  store <8 x i32> %212, <8 x i32>* %209, align 32
  %213 = add nuw nsw i64 %199, 2
  %214 = icmp eq i64 %213, 64
  br i1 %214, label %244, label %198

215:                                              ; preds = %187
  %216 = icmp eq i8 %189, 0
  br i1 %216, label %300, label %217

217:                                              ; preds = %215, %217
  %218 = phi i64 [ %242, %217 ], [ 0, %215 ]
  %219 = shl nsw i64 %218, 3
  %220 = getelementptr inbounds <4 x i64>, <4 x i64>* %50, i64 %219
  %221 = bitcast <4 x i64>* %220 to <8 x i32>*
  %222 = load <8 x i32>, <8 x i32>* %221, align 32
  %223 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %222, i32 %190) #7
  store <8 x i32> %223, <8 x i32>* %221, align 32
  %224 = shl i64 %218, 3
  %225 = or i64 %224, 8
  %226 = getelementptr inbounds <4 x i64>, <4 x i64>* %50, i64 %225
  %227 = bitcast <4 x i64>* %226 to <8 x i32>*
  %228 = load <8 x i32>, <8 x i32>* %227, align 32
  %229 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %228, i32 %190) #7
  store <8 x i32> %229, <8 x i32>* %227, align 32
  %230 = shl i64 %218, 3
  %231 = or i64 %230, 16
  %232 = getelementptr inbounds <4 x i64>, <4 x i64>* %50, i64 %231
  %233 = bitcast <4 x i64>* %232 to <8 x i32>*
  %234 = load <8 x i32>, <8 x i32>* %233, align 32
  %235 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %234, i32 %190) #7
  store <8 x i32> %235, <8 x i32>* %233, align 32
  %236 = shl i64 %218, 3
  %237 = or i64 %236, 24
  %238 = getelementptr inbounds <4 x i64>, <4 x i64>* %50, i64 %237
  %239 = bitcast <4 x i64>* %238 to <8 x i32>*
  %240 = load <8 x i32>, <8 x i32>* %239, align 32
  %241 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %240, i32 %190) #7
  store <8 x i32> %241, <8 x i32>* %239, align 32
  %242 = add nuw nsw i64 %218, 4
  %243 = icmp eq i64 %242, 64
  br i1 %243, label %244, label %217

244:                                              ; preds = %217, %198
  %245 = load i8, i8* %16, align 1
  %246 = sext i8 %245 to i32
  %247 = icmp slt i8 %245, 0
  br i1 %247, label %248, label %271

248:                                              ; preds = %244
  %249 = sub nsw i32 0, %246
  %250 = xor i32 %246, -1
  %251 = shl i32 1, %250
  %252 = insertelement <8 x i32> undef, i32 %251, i32 0
  %253 = shufflevector <8 x i32> %252, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %254

254:                                              ; preds = %254, %248
  %255 = phi i64 [ 0, %248 ], [ %269, %254 ]
  %256 = shl nsw i64 %255, 3
  %257 = getelementptr inbounds <4 x i64>, <4 x i64>* %188, i64 %256
  %258 = bitcast <4 x i64>* %257 to <8 x i32>*
  %259 = load <8 x i32>, <8 x i32>* %258, align 32
  %260 = add <8 x i32> %259, %253
  %261 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %260, i32 %249) #7
  store <8 x i32> %261, <8 x i32>* %258, align 32
  %262 = shl i64 %255, 3
  %263 = or i64 %262, 8
  %264 = getelementptr inbounds <4 x i64>, <4 x i64>* %188, i64 %263
  %265 = bitcast <4 x i64>* %264 to <8 x i32>*
  %266 = load <8 x i32>, <8 x i32>* %265, align 32
  %267 = add <8 x i32> %266, %253
  %268 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %267, i32 %249) #7
  store <8 x i32> %268, <8 x i32>* %265, align 32
  %269 = add nuw nsw i64 %255, 2
  %270 = icmp eq i64 %269, 64
  br i1 %270, label %300, label %254

271:                                              ; preds = %244
  %272 = icmp eq i8 %245, 0
  br i1 %272, label %300, label %273

273:                                              ; preds = %271, %273
  %274 = phi i64 [ %298, %273 ], [ 0, %271 ]
  %275 = shl nsw i64 %274, 3
  %276 = getelementptr inbounds <4 x i64>, <4 x i64>* %188, i64 %275
  %277 = bitcast <4 x i64>* %276 to <8 x i32>*
  %278 = load <8 x i32>, <8 x i32>* %277, align 32
  %279 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %278, i32 %246) #7
  store <8 x i32> %279, <8 x i32>* %277, align 32
  %280 = shl i64 %274, 3
  %281 = or i64 %280, 8
  %282 = getelementptr inbounds <4 x i64>, <4 x i64>* %188, i64 %281
  %283 = bitcast <4 x i64>* %282 to <8 x i32>*
  %284 = load <8 x i32>, <8 x i32>* %283, align 32
  %285 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %284, i32 %246) #7
  store <8 x i32> %285, <8 x i32>* %283, align 32
  %286 = shl i64 %274, 3
  %287 = or i64 %286, 16
  %288 = getelementptr inbounds <4 x i64>, <4 x i64>* %188, i64 %287
  %289 = bitcast <4 x i64>* %288 to <8 x i32>*
  %290 = load <8 x i32>, <8 x i32>* %289, align 32
  %291 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %290, i32 %246) #7
  store <8 x i32> %291, <8 x i32>* %289, align 32
  %292 = shl i64 %274, 3
  %293 = or i64 %292, 24
  %294 = getelementptr inbounds <4 x i64>, <4 x i64>* %188, i64 %293
  %295 = bitcast <4 x i64>* %294 to <8 x i32>*
  %296 = load <8 x i32>, <8 x i32>* %295, align 32
  %297 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %296, i32 %246) #7
  store <8 x i32> %297, <8 x i32>* %295, align 32
  %298 = add nuw nsw i64 %274, 4
  %299 = icmp eq i64 %298, 64
  br i1 %299, label %300, label %273

300:                                              ; preds = %273, %254, %215, %271
  %301 = add nuw nsw i64 %18, 1
  %302 = icmp eq i64 %301, 4
  br i1 %302, label %303, label %17

303:                                              ; preds = %300
  %304 = bitcast i32* %1 to i8*
  br label %305

305:                                              ; preds = %303, %398
  %306 = phi i64 [ 0, %303 ], [ %399, %398 ]
  %307 = shl i64 %306, 3
  %308 = lshr exact i64 %306, 3
  br label %311

309:                                              ; preds = %398
  %310 = getelementptr inbounds i8, i8* %11, i64 2
  br label %401

311:                                              ; preds = %311, %305
  %312 = phi i64 [ 0, %305 ], [ %396, %311 ]
  %313 = add nuw nsw i64 %312, %307
  %314 = getelementptr inbounds [512 x <4 x i64>], [512 x <4 x i64>]* %7, i64 0, i64 %313
  %315 = shl i64 %312, 6
  %316 = add nuw nsw i64 %315, %308
  %317 = getelementptr inbounds [512 x <4 x i64>], [512 x <4 x i64>]* %8, i64 0, i64 %316
  %318 = bitcast <4 x i64>* %314 to <8 x i32>*
  %319 = load <8 x i32>, <8 x i32>* %318, align 32
  %320 = getelementptr inbounds <4 x i64>, <4 x i64>* %314, i64 8
  %321 = bitcast <4 x i64>* %320 to <8 x i32>*
  %322 = load <8 x i32>, <8 x i32>* %321, align 32
  %323 = shufflevector <8 x i32> %319, <8 x i32> %322, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %324 = bitcast <8 x i32> %323 to <4 x i64>
  %325 = shufflevector <8 x i32> %319, <8 x i32> %322, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %326 = bitcast <8 x i32> %325 to <4 x i64>
  %327 = getelementptr inbounds <4 x i64>, <4 x i64>* %314, i64 16
  %328 = bitcast <4 x i64>* %327 to <8 x i32>*
  %329 = load <8 x i32>, <8 x i32>* %328, align 32
  %330 = getelementptr inbounds <4 x i64>, <4 x i64>* %314, i64 24
  %331 = bitcast <4 x i64>* %330 to <8 x i32>*
  %332 = load <8 x i32>, <8 x i32>* %331, align 32
  %333 = shufflevector <8 x i32> %329, <8 x i32> %332, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %334 = bitcast <8 x i32> %333 to <4 x i64>
  %335 = shufflevector <8 x i32> %329, <8 x i32> %332, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %336 = bitcast <8 x i32> %335 to <4 x i64>
  %337 = getelementptr inbounds <4 x i64>, <4 x i64>* %314, i64 32
  %338 = bitcast <4 x i64>* %337 to <8 x i32>*
  %339 = load <8 x i32>, <8 x i32>* %338, align 32
  %340 = getelementptr inbounds <4 x i64>, <4 x i64>* %314, i64 40
  %341 = bitcast <4 x i64>* %340 to <8 x i32>*
  %342 = load <8 x i32>, <8 x i32>* %341, align 32
  %343 = shufflevector <8 x i32> %339, <8 x i32> %342, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %344 = bitcast <8 x i32> %343 to <4 x i64>
  %345 = shufflevector <8 x i32> %339, <8 x i32> %342, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %346 = bitcast <8 x i32> %345 to <4 x i64>
  %347 = getelementptr inbounds <4 x i64>, <4 x i64>* %314, i64 48
  %348 = bitcast <4 x i64>* %347 to <8 x i32>*
  %349 = load <8 x i32>, <8 x i32>* %348, align 32
  %350 = getelementptr inbounds <4 x i64>, <4 x i64>* %314, i64 56
  %351 = bitcast <4 x i64>* %350 to <8 x i32>*
  %352 = load <8 x i32>, <8 x i32>* %351, align 32
  %353 = shufflevector <8 x i32> %349, <8 x i32> %352, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %354 = bitcast <8 x i32> %353 to <4 x i64>
  %355 = shufflevector <8 x i32> %349, <8 x i32> %352, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %356 = bitcast <8 x i32> %355 to <4 x i64>
  %357 = shufflevector <4 x i64> %324, <4 x i64> %334, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %358 = shufflevector <4 x i64> %344, <4 x i64> %354, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %359 = bitcast <4 x i64> %357 to <8 x i32>
  %360 = bitcast <4 x i64> %358 to <8 x i32>
  %361 = shufflevector <8 x i32> %359, <8 x i32> %360, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %362 = bitcast <4 x i64>* %317 to <8 x i32>*
  store <8 x i32> %361, <8 x i32>* %362, align 32
  %363 = shufflevector <8 x i32> %359, <8 x i32> %360, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %364 = getelementptr inbounds <4 x i64>, <4 x i64>* %317, i64 32
  %365 = bitcast <4 x i64>* %364 to <8 x i32>*
  store <8 x i32> %363, <8 x i32>* %365, align 32
  %366 = shufflevector <4 x i64> %324, <4 x i64> %334, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %367 = shufflevector <4 x i64> %344, <4 x i64> %354, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %368 = bitcast <4 x i64> %366 to <8 x i32>
  %369 = bitcast <4 x i64> %367 to <8 x i32>
  %370 = shufflevector <8 x i32> %368, <8 x i32> %369, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %371 = getelementptr inbounds <4 x i64>, <4 x i64>* %317, i64 8
  %372 = bitcast <4 x i64>* %371 to <8 x i32>*
  store <8 x i32> %370, <8 x i32>* %372, align 32
  %373 = shufflevector <8 x i32> %368, <8 x i32> %369, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %374 = getelementptr inbounds <4 x i64>, <4 x i64>* %317, i64 40
  %375 = bitcast <4 x i64>* %374 to <8 x i32>*
  store <8 x i32> %373, <8 x i32>* %375, align 32
  %376 = shufflevector <4 x i64> %326, <4 x i64> %336, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %377 = shufflevector <4 x i64> %346, <4 x i64> %356, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %378 = bitcast <4 x i64> %376 to <8 x i32>
  %379 = bitcast <4 x i64> %377 to <8 x i32>
  %380 = shufflevector <8 x i32> %378, <8 x i32> %379, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %381 = getelementptr inbounds <4 x i64>, <4 x i64>* %317, i64 16
  %382 = bitcast <4 x i64>* %381 to <8 x i32>*
  store <8 x i32> %380, <8 x i32>* %382, align 32
  %383 = shufflevector <8 x i32> %378, <8 x i32> %379, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %384 = getelementptr inbounds <4 x i64>, <4 x i64>* %317, i64 48
  %385 = bitcast <4 x i64>* %384 to <8 x i32>*
  store <8 x i32> %383, <8 x i32>* %385, align 32
  %386 = shufflevector <4 x i64> %326, <4 x i64> %336, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %387 = shufflevector <4 x i64> %346, <4 x i64> %356, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %388 = bitcast <4 x i64> %386 to <8 x i32>
  %389 = bitcast <4 x i64> %387 to <8 x i32>
  %390 = shufflevector <8 x i32> %388, <8 x i32> %389, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %391 = getelementptr inbounds <4 x i64>, <4 x i64>* %317, i64 24
  %392 = bitcast <4 x i64>* %391 to <8 x i32>*
  store <8 x i32> %390, <8 x i32>* %392, align 32
  %393 = shufflevector <8 x i32> %388, <8 x i32> %389, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %394 = getelementptr inbounds <4 x i64>, <4 x i64>* %317, i64 56
  %395 = bitcast <4 x i64>* %394 to <8 x i32>*
  store <8 x i32> %393, <8 x i32>* %395, align 32
  %396 = add nuw nsw i64 %312, 1
  %397 = icmp eq i64 %396, 8
  br i1 %397, label %398, label %311

398:                                              ; preds = %311
  %399 = add nuw nsw i64 %306, 8
  %400 = icmp ult i64 %399, 64
  br i1 %400, label %305, label %309

401:                                              ; preds = %520, %309
  %402 = phi i64 [ 0, %309 ], [ %521, %520 ]
  %403 = shl nuw i64 %402, 1
  %404 = getelementptr inbounds [512 x <4 x i64>], [512 x <4 x i64>]* %8, i64 0, i64 %403
  %405 = getelementptr inbounds [512 x <4 x i64>], [512 x <4 x i64>]* %7, i64 0, i64 %403
  call fastcc void @fdct64_avx2(<4 x i64>* %404, <4 x i64>* %405, i8 signext %13, i32 4)
  %406 = or i64 %403, 1
  %407 = getelementptr inbounds [512 x <4 x i64>], [512 x <4 x i64>]* %8, i64 0, i64 %406
  %408 = getelementptr inbounds [512 x <4 x i64>], [512 x <4 x i64>]* %7, i64 0, i64 %406
  call fastcc void @fdct64_avx2(<4 x i64>* %407, <4 x i64>* %408, i8 signext %13, i32 4)
  %409 = load i8, i8* %310, align 1
  %410 = sext i8 %409 to i32
  %411 = icmp slt i8 %409, 0
  br i1 %411, label %412, label %435

412:                                              ; preds = %401
  %413 = sub nsw i32 0, %410
  %414 = xor i32 %410, -1
  %415 = shl i32 1, %414
  %416 = insertelement <8 x i32> undef, i32 %415, i32 0
  %417 = shufflevector <8 x i32> %416, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %418

418:                                              ; preds = %418, %412
  %419 = phi i64 [ 0, %412 ], [ %433, %418 ]
  %420 = shl nsw i64 %419, 2
  %421 = getelementptr inbounds <4 x i64>, <4 x i64>* %405, i64 %420
  %422 = bitcast <4 x i64>* %421 to <8 x i32>*
  %423 = load <8 x i32>, <8 x i32>* %422, align 32
  %424 = add <8 x i32> %423, %417
  %425 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %424, i32 %413) #7
  store <8 x i32> %425, <8 x i32>* %422, align 32
  %426 = shl i64 %419, 2
  %427 = or i64 %426, 4
  %428 = getelementptr inbounds <4 x i64>, <4 x i64>* %405, i64 %427
  %429 = bitcast <4 x i64>* %428 to <8 x i32>*
  %430 = load <8 x i32>, <8 x i32>* %429, align 32
  %431 = add <8 x i32> %430, %417
  %432 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %431, i32 %413) #7
  store <8 x i32> %432, <8 x i32>* %429, align 32
  %433 = add nuw nsw i64 %419, 2
  %434 = icmp eq i64 %433, 32
  br i1 %434, label %464, label %418

435:                                              ; preds = %401
  %436 = icmp eq i8 %409, 0
  br i1 %436, label %520, label %437

437:                                              ; preds = %435, %437
  %438 = phi i64 [ %462, %437 ], [ 0, %435 ]
  %439 = shl nsw i64 %438, 2
  %440 = getelementptr inbounds <4 x i64>, <4 x i64>* %405, i64 %439
  %441 = bitcast <4 x i64>* %440 to <8 x i32>*
  %442 = load <8 x i32>, <8 x i32>* %441, align 32
  %443 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %442, i32 %410) #7
  store <8 x i32> %443, <8 x i32>* %441, align 32
  %444 = shl i64 %438, 2
  %445 = or i64 %444, 4
  %446 = getelementptr inbounds <4 x i64>, <4 x i64>* %405, i64 %445
  %447 = bitcast <4 x i64>* %446 to <8 x i32>*
  %448 = load <8 x i32>, <8 x i32>* %447, align 32
  %449 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %448, i32 %410) #7
  store <8 x i32> %449, <8 x i32>* %447, align 32
  %450 = shl i64 %438, 2
  %451 = or i64 %450, 8
  %452 = getelementptr inbounds <4 x i64>, <4 x i64>* %405, i64 %451
  %453 = bitcast <4 x i64>* %452 to <8 x i32>*
  %454 = load <8 x i32>, <8 x i32>* %453, align 32
  %455 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %454, i32 %410) #7
  store <8 x i32> %455, <8 x i32>* %453, align 32
  %456 = shl i64 %438, 2
  %457 = or i64 %456, 12
  %458 = getelementptr inbounds <4 x i64>, <4 x i64>* %405, i64 %457
  %459 = bitcast <4 x i64>* %458 to <8 x i32>*
  %460 = load <8 x i32>, <8 x i32>* %459, align 32
  %461 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %460, i32 %410) #7
  store <8 x i32> %461, <8 x i32>* %459, align 32
  %462 = add nuw nsw i64 %438, 4
  %463 = icmp eq i64 %462, 32
  br i1 %463, label %464, label %437

464:                                              ; preds = %437, %418
  %465 = load i8, i8* %310, align 1
  %466 = sext i8 %465 to i32
  %467 = icmp slt i8 %465, 0
  br i1 %467, label %468, label %491

468:                                              ; preds = %464
  %469 = sub nsw i32 0, %466
  %470 = xor i32 %466, -1
  %471 = shl i32 1, %470
  %472 = insertelement <8 x i32> undef, i32 %471, i32 0
  %473 = shufflevector <8 x i32> %472, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %474

474:                                              ; preds = %474, %468
  %475 = phi i64 [ 0, %468 ], [ %489, %474 ]
  %476 = shl nsw i64 %475, 2
  %477 = getelementptr inbounds <4 x i64>, <4 x i64>* %408, i64 %476
  %478 = bitcast <4 x i64>* %477 to <8 x i32>*
  %479 = load <8 x i32>, <8 x i32>* %478, align 32
  %480 = add <8 x i32> %479, %473
  %481 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %480, i32 %469) #7
  store <8 x i32> %481, <8 x i32>* %478, align 32
  %482 = shl i64 %475, 2
  %483 = or i64 %482, 4
  %484 = getelementptr inbounds <4 x i64>, <4 x i64>* %408, i64 %483
  %485 = bitcast <4 x i64>* %484 to <8 x i32>*
  %486 = load <8 x i32>, <8 x i32>* %485, align 32
  %487 = add <8 x i32> %486, %473
  %488 = call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %487, i32 %469) #7
  store <8 x i32> %488, <8 x i32>* %485, align 32
  %489 = add nuw nsw i64 %475, 2
  %490 = icmp eq i64 %489, 32
  br i1 %490, label %520, label %474

491:                                              ; preds = %464
  %492 = icmp eq i8 %465, 0
  br i1 %492, label %520, label %493

493:                                              ; preds = %491, %493
  %494 = phi i64 [ %518, %493 ], [ 0, %491 ]
  %495 = shl nsw i64 %494, 2
  %496 = getelementptr inbounds <4 x i64>, <4 x i64>* %408, i64 %495
  %497 = bitcast <4 x i64>* %496 to <8 x i32>*
  %498 = load <8 x i32>, <8 x i32>* %497, align 32
  %499 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %498, i32 %466) #7
  store <8 x i32> %499, <8 x i32>* %497, align 32
  %500 = shl i64 %494, 2
  %501 = or i64 %500, 4
  %502 = getelementptr inbounds <4 x i64>, <4 x i64>* %408, i64 %501
  %503 = bitcast <4 x i64>* %502 to <8 x i32>*
  %504 = load <8 x i32>, <8 x i32>* %503, align 32
  %505 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %504, i32 %466) #7
  store <8 x i32> %505, <8 x i32>* %503, align 32
  %506 = shl i64 %494, 2
  %507 = or i64 %506, 8
  %508 = getelementptr inbounds <4 x i64>, <4 x i64>* %408, i64 %507
  %509 = bitcast <4 x i64>* %508 to <8 x i32>*
  %510 = load <8 x i32>, <8 x i32>* %509, align 32
  %511 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %510, i32 %466) #7
  store <8 x i32> %511, <8 x i32>* %509, align 32
  %512 = shl i64 %494, 2
  %513 = or i64 %512, 12
  %514 = getelementptr inbounds <4 x i64>, <4 x i64>* %408, i64 %513
  %515 = bitcast <4 x i64>* %514 to <8 x i32>*
  %516 = load <8 x i32>, <8 x i32>* %515, align 32
  %517 = call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %516, i32 %466) #7
  store <8 x i32> %517, <8 x i32>* %515, align 32
  %518 = add nuw nsw i64 %494, 4
  %519 = icmp eq i64 %518, 32
  br i1 %519, label %520, label %493

520:                                              ; preds = %493, %474, %435, %491
  %521 = add nuw nsw i64 %402, 1
  %522 = icmp eq i64 %521, 2
  br i1 %522, label %523, label %401

523:                                              ; preds = %520, %614
  %524 = phi i64 [ %615, %614 ], [ 0, %520 ]
  %525 = shl i64 %524, 2
  %526 = lshr exact i64 %524, 3
  br label %527

527:                                              ; preds = %527, %523
  %528 = phi i64 [ 0, %523 ], [ %612, %527 ]
  %529 = add nuw nsw i64 %528, %525
  %530 = getelementptr inbounds [512 x <4 x i64>], [512 x <4 x i64>]* %7, i64 0, i64 %529
  %531 = shl i64 %528, 5
  %532 = add nuw nsw i64 %531, %526
  %533 = getelementptr inbounds [512 x <4 x i64>], [512 x <4 x i64>]* %8, i64 0, i64 %532
  %534 = bitcast <4 x i64>* %530 to <8 x i32>*
  %535 = load <8 x i32>, <8 x i32>* %534, align 32
  %536 = getelementptr inbounds <4 x i64>, <4 x i64>* %530, i64 4
  %537 = bitcast <4 x i64>* %536 to <8 x i32>*
  %538 = load <8 x i32>, <8 x i32>* %537, align 32
  %539 = shufflevector <8 x i32> %535, <8 x i32> %538, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %540 = bitcast <8 x i32> %539 to <4 x i64>
  %541 = shufflevector <8 x i32> %535, <8 x i32> %538, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %542 = bitcast <8 x i32> %541 to <4 x i64>
  %543 = getelementptr inbounds <4 x i64>, <4 x i64>* %530, i64 8
  %544 = bitcast <4 x i64>* %543 to <8 x i32>*
  %545 = load <8 x i32>, <8 x i32>* %544, align 32
  %546 = getelementptr inbounds <4 x i64>, <4 x i64>* %530, i64 12
  %547 = bitcast <4 x i64>* %546 to <8 x i32>*
  %548 = load <8 x i32>, <8 x i32>* %547, align 32
  %549 = shufflevector <8 x i32> %545, <8 x i32> %548, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %550 = bitcast <8 x i32> %549 to <4 x i64>
  %551 = shufflevector <8 x i32> %545, <8 x i32> %548, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %552 = bitcast <8 x i32> %551 to <4 x i64>
  %553 = getelementptr inbounds <4 x i64>, <4 x i64>* %530, i64 16
  %554 = bitcast <4 x i64>* %553 to <8 x i32>*
  %555 = load <8 x i32>, <8 x i32>* %554, align 32
  %556 = getelementptr inbounds <4 x i64>, <4 x i64>* %530, i64 20
  %557 = bitcast <4 x i64>* %556 to <8 x i32>*
  %558 = load <8 x i32>, <8 x i32>* %557, align 32
  %559 = shufflevector <8 x i32> %555, <8 x i32> %558, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %560 = bitcast <8 x i32> %559 to <4 x i64>
  %561 = shufflevector <8 x i32> %555, <8 x i32> %558, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %562 = bitcast <8 x i32> %561 to <4 x i64>
  %563 = getelementptr inbounds <4 x i64>, <4 x i64>* %530, i64 24
  %564 = bitcast <4 x i64>* %563 to <8 x i32>*
  %565 = load <8 x i32>, <8 x i32>* %564, align 32
  %566 = getelementptr inbounds <4 x i64>, <4 x i64>* %530, i64 28
  %567 = bitcast <4 x i64>* %566 to <8 x i32>*
  %568 = load <8 x i32>, <8 x i32>* %567, align 32
  %569 = shufflevector <8 x i32> %565, <8 x i32> %568, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %570 = bitcast <8 x i32> %569 to <4 x i64>
  %571 = shufflevector <8 x i32> %565, <8 x i32> %568, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %572 = bitcast <8 x i32> %571 to <4 x i64>
  %573 = shufflevector <4 x i64> %540, <4 x i64> %550, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %574 = shufflevector <4 x i64> %560, <4 x i64> %570, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %575 = bitcast <4 x i64> %573 to <8 x i32>
  %576 = bitcast <4 x i64> %574 to <8 x i32>
  %577 = shufflevector <8 x i32> %575, <8 x i32> %576, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %578 = bitcast <4 x i64>* %533 to <8 x i32>*
  store <8 x i32> %577, <8 x i32>* %578, align 32
  %579 = shufflevector <8 x i32> %575, <8 x i32> %576, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %580 = getelementptr inbounds <4 x i64>, <4 x i64>* %533, i64 16
  %581 = bitcast <4 x i64>* %580 to <8 x i32>*
  store <8 x i32> %579, <8 x i32>* %581, align 32
  %582 = shufflevector <4 x i64> %540, <4 x i64> %550, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %583 = shufflevector <4 x i64> %560, <4 x i64> %570, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %584 = bitcast <4 x i64> %582 to <8 x i32>
  %585 = bitcast <4 x i64> %583 to <8 x i32>
  %586 = shufflevector <8 x i32> %584, <8 x i32> %585, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %587 = getelementptr inbounds <4 x i64>, <4 x i64>* %533, i64 4
  %588 = bitcast <4 x i64>* %587 to <8 x i32>*
  store <8 x i32> %586, <8 x i32>* %588, align 32
  %589 = shufflevector <8 x i32> %584, <8 x i32> %585, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %590 = getelementptr inbounds <4 x i64>, <4 x i64>* %533, i64 20
  %591 = bitcast <4 x i64>* %590 to <8 x i32>*
  store <8 x i32> %589, <8 x i32>* %591, align 32
  %592 = shufflevector <4 x i64> %542, <4 x i64> %552, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %593 = shufflevector <4 x i64> %562, <4 x i64> %572, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %594 = bitcast <4 x i64> %592 to <8 x i32>
  %595 = bitcast <4 x i64> %593 to <8 x i32>
  %596 = shufflevector <8 x i32> %594, <8 x i32> %595, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %597 = getelementptr inbounds <4 x i64>, <4 x i64>* %533, i64 8
  %598 = bitcast <4 x i64>* %597 to <8 x i32>*
  store <8 x i32> %596, <8 x i32>* %598, align 32
  %599 = shufflevector <8 x i32> %594, <8 x i32> %595, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %600 = getelementptr inbounds <4 x i64>, <4 x i64>* %533, i64 24
  %601 = bitcast <4 x i64>* %600 to <8 x i32>*
  store <8 x i32> %599, <8 x i32>* %601, align 32
  %602 = shufflevector <4 x i64> %542, <4 x i64> %552, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %603 = shufflevector <4 x i64> %562, <4 x i64> %572, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %604 = bitcast <4 x i64> %602 to <8 x i32>
  %605 = bitcast <4 x i64> %603 to <8 x i32>
  %606 = shufflevector <8 x i32> %604, <8 x i32> %605, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %607 = getelementptr inbounds <4 x i64>, <4 x i64>* %533, i64 12
  %608 = bitcast <4 x i64>* %607 to <8 x i32>*
  store <8 x i32> %606, <8 x i32>* %608, align 32
  %609 = shufflevector <8 x i32> %604, <8 x i32> %605, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %610 = getelementptr inbounds <4 x i64>, <4 x i64>* %533, i64 28
  %611 = bitcast <4 x i64>* %610 to <8 x i32>*
  store <8 x i32> %609, <8 x i32>* %611, align 32
  %612 = add nuw nsw i64 %528, 1
  %613 = icmp eq i64 %612, 4
  br i1 %613, label %614, label %527

614:                                              ; preds = %527
  %615 = add nuw nsw i64 %524, 8
  %616 = icmp ult i64 %615, 32
  br i1 %616, label %523, label %617

617:                                              ; preds = %614
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 32 %304, i8* nonnull align 32 %9, i64 4096, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 16384, i8* nonnull %9) #7
  call void @llvm.lifetime.end.p0i8(i64 16384, i8* nonnull %10) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @fdct64_avx2(<4 x i64>* readonly, <4 x i64>*, i8 signext, i32) unnamed_addr #0 {
  %5 = sext i8 %2 to i32
  %6 = add nsw i32 %5, -10
  %7 = sext i32 %6 to i64
  %8 = add nsw i32 %5, -1
  %9 = shl i32 1, %8
  %10 = insertelement <8 x i32> undef, i32 %9, i32 0
  %11 = shufflevector <8 x i32> %10, <8 x i32> undef, <8 x i32> zeroinitializer
  %12 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 32
  %13 = load i32, i32* %12, align 16
  %14 = sub nsw i32 0, %13
  %15 = insertelement <8 x i32> undef, i32 %14, i32 0
  %16 = shufflevector <8 x i32> %15, <8 x i32> undef, <8 x i32> zeroinitializer
  %17 = insertelement <8 x i32> undef, i32 %13, i32 0
  %18 = shufflevector <8 x i32> %17, <8 x i32> undef, <8 x i32> zeroinitializer
  %19 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 16
  %20 = load i32, i32* %19, align 16
  %21 = sub nsw i32 0, %20
  %22 = insertelement <8 x i32> undef, i32 %21, i32 0
  %23 = shufflevector <8 x i32> %22, <8 x i32> undef, <8 x i32> zeroinitializer
  %24 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 48
  %25 = load i32, i32* %24, align 16
  %26 = insertelement <8 x i32> undef, i32 %25, i32 0
  %27 = shufflevector <8 x i32> %26, <8 x i32> undef, <8 x i32> zeroinitializer
  %28 = sub nsw i32 0, %25
  %29 = insertelement <8 x i32> undef, i32 %28, i32 0
  %30 = shufflevector <8 x i32> %29, <8 x i32> undef, <8 x i32> zeroinitializer
  %31 = insertelement <8 x i32> undef, i32 %20, i32 0
  %32 = shufflevector <8 x i32> %31, <8 x i32> undef, <8 x i32> zeroinitializer
  %33 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 8
  %34 = load i32, i32* %33, align 16
  %35 = sub nsw i32 0, %34
  %36 = insertelement <8 x i32> undef, i32 %35, i32 0
  %37 = shufflevector <8 x i32> %36, <8 x i32> undef, <8 x i32> zeroinitializer
  %38 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 56
  %39 = load i32, i32* %38, align 16
  %40 = insertelement <8 x i32> undef, i32 %39, i32 0
  %41 = shufflevector <8 x i32> %40, <8 x i32> undef, <8 x i32> zeroinitializer
  %42 = sub nsw i32 0, %39
  %43 = insertelement <8 x i32> undef, i32 %42, i32 0
  %44 = shufflevector <8 x i32> %43, <8 x i32> undef, <8 x i32> zeroinitializer
  %45 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 40
  %46 = load i32, i32* %45, align 16
  %47 = sub nsw i32 0, %46
  %48 = insertelement <8 x i32> undef, i32 %47, i32 0
  %49 = shufflevector <8 x i32> %48, <8 x i32> undef, <8 x i32> zeroinitializer
  %50 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 24
  %51 = load i32, i32* %50, align 16
  %52 = insertelement <8 x i32> undef, i32 %51, i32 0
  %53 = shufflevector <8 x i32> %52, <8 x i32> undef, <8 x i32> zeroinitializer
  %54 = sub nsw i32 0, %51
  %55 = insertelement <8 x i32> undef, i32 %54, i32 0
  %56 = shufflevector <8 x i32> %55, <8 x i32> undef, <8 x i32> zeroinitializer
  %57 = insertelement <8 x i32> undef, i32 %34, i32 0
  %58 = shufflevector <8 x i32> %57, <8 x i32> undef, <8 x i32> zeroinitializer
  %59 = insertelement <8 x i32> undef, i32 %46, i32 0
  %60 = shufflevector <8 x i32> %59, <8 x i32> undef, <8 x i32> zeroinitializer
  %61 = bitcast <4 x i64>* %0 to <8 x i32>*
  %62 = load <8 x i32>, <8 x i32>* %61, align 32
  %63 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 504
  %64 = bitcast <4 x i64>* %63 to <8 x i32>*
  %65 = load <8 x i32>, <8 x i32>* %64, align 32
  %66 = add <8 x i32> %65, %62
  %67 = sub <8 x i32> %62, %65
  %68 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 8
  %69 = bitcast <4 x i64>* %68 to <8 x i32>*
  %70 = load <8 x i32>, <8 x i32>* %69, align 32
  %71 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 496
  %72 = bitcast <4 x i64>* %71 to <8 x i32>*
  %73 = load <8 x i32>, <8 x i32>* %72, align 32
  %74 = add <8 x i32> %73, %70
  %75 = sub <8 x i32> %70, %73
  %76 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 16
  %77 = bitcast <4 x i64>* %76 to <8 x i32>*
  %78 = load <8 x i32>, <8 x i32>* %77, align 32
  %79 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 488
  %80 = bitcast <4 x i64>* %79 to <8 x i32>*
  %81 = load <8 x i32>, <8 x i32>* %80, align 32
  %82 = add <8 x i32> %81, %78
  %83 = sub <8 x i32> %78, %81
  %84 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 24
  %85 = bitcast <4 x i64>* %84 to <8 x i32>*
  %86 = load <8 x i32>, <8 x i32>* %85, align 32
  %87 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 480
  %88 = bitcast <4 x i64>* %87 to <8 x i32>*
  %89 = load <8 x i32>, <8 x i32>* %88, align 32
  %90 = add <8 x i32> %89, %86
  %91 = sub <8 x i32> %86, %89
  %92 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 32
  %93 = bitcast <4 x i64>* %92 to <8 x i32>*
  %94 = load <8 x i32>, <8 x i32>* %93, align 32
  %95 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 472
  %96 = bitcast <4 x i64>* %95 to <8 x i32>*
  %97 = load <8 x i32>, <8 x i32>* %96, align 32
  %98 = add <8 x i32> %97, %94
  %99 = sub <8 x i32> %94, %97
  %100 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 40
  %101 = bitcast <4 x i64>* %100 to <8 x i32>*
  %102 = load <8 x i32>, <8 x i32>* %101, align 32
  %103 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 464
  %104 = bitcast <4 x i64>* %103 to <8 x i32>*
  %105 = load <8 x i32>, <8 x i32>* %104, align 32
  %106 = add <8 x i32> %105, %102
  %107 = sub <8 x i32> %102, %105
  %108 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 48
  %109 = bitcast <4 x i64>* %108 to <8 x i32>*
  %110 = load <8 x i32>, <8 x i32>* %109, align 32
  %111 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 456
  %112 = bitcast <4 x i64>* %111 to <8 x i32>*
  %113 = load <8 x i32>, <8 x i32>* %112, align 32
  %114 = add <8 x i32> %113, %110
  %115 = sub <8 x i32> %110, %113
  %116 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 56
  %117 = bitcast <4 x i64>* %116 to <8 x i32>*
  %118 = load <8 x i32>, <8 x i32>* %117, align 32
  %119 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 448
  %120 = bitcast <4 x i64>* %119 to <8 x i32>*
  %121 = load <8 x i32>, <8 x i32>* %120, align 32
  %122 = add <8 x i32> %121, %118
  %123 = sub <8 x i32> %118, %121
  %124 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 64
  %125 = bitcast <4 x i64>* %124 to <8 x i32>*
  %126 = load <8 x i32>, <8 x i32>* %125, align 32
  %127 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 440
  %128 = bitcast <4 x i64>* %127 to <8 x i32>*
  %129 = load <8 x i32>, <8 x i32>* %128, align 32
  %130 = add <8 x i32> %129, %126
  %131 = sub <8 x i32> %126, %129
  %132 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 72
  %133 = bitcast <4 x i64>* %132 to <8 x i32>*
  %134 = load <8 x i32>, <8 x i32>* %133, align 32
  %135 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 432
  %136 = bitcast <4 x i64>* %135 to <8 x i32>*
  %137 = load <8 x i32>, <8 x i32>* %136, align 32
  %138 = add <8 x i32> %137, %134
  %139 = sub <8 x i32> %134, %137
  %140 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 80
  %141 = bitcast <4 x i64>* %140 to <8 x i32>*
  %142 = load <8 x i32>, <8 x i32>* %141, align 32
  %143 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 424
  %144 = bitcast <4 x i64>* %143 to <8 x i32>*
  %145 = load <8 x i32>, <8 x i32>* %144, align 32
  %146 = add <8 x i32> %145, %142
  %147 = sub <8 x i32> %142, %145
  %148 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 88
  %149 = bitcast <4 x i64>* %148 to <8 x i32>*
  %150 = load <8 x i32>, <8 x i32>* %149, align 32
  %151 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 416
  %152 = bitcast <4 x i64>* %151 to <8 x i32>*
  %153 = load <8 x i32>, <8 x i32>* %152, align 32
  %154 = add <8 x i32> %153, %150
  %155 = sub <8 x i32> %150, %153
  %156 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 96
  %157 = bitcast <4 x i64>* %156 to <8 x i32>*
  %158 = load <8 x i32>, <8 x i32>* %157, align 32
  %159 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 408
  %160 = bitcast <4 x i64>* %159 to <8 x i32>*
  %161 = load <8 x i32>, <8 x i32>* %160, align 32
  %162 = add <8 x i32> %161, %158
  %163 = sub <8 x i32> %158, %161
  %164 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 104
  %165 = bitcast <4 x i64>* %164 to <8 x i32>*
  %166 = load <8 x i32>, <8 x i32>* %165, align 32
  %167 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 400
  %168 = bitcast <4 x i64>* %167 to <8 x i32>*
  %169 = load <8 x i32>, <8 x i32>* %168, align 32
  %170 = add <8 x i32> %169, %166
  %171 = sub <8 x i32> %166, %169
  %172 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 112
  %173 = bitcast <4 x i64>* %172 to <8 x i32>*
  %174 = load <8 x i32>, <8 x i32>* %173, align 32
  %175 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 392
  %176 = bitcast <4 x i64>* %175 to <8 x i32>*
  %177 = load <8 x i32>, <8 x i32>* %176, align 32
  %178 = add <8 x i32> %177, %174
  %179 = sub <8 x i32> %174, %177
  %180 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 120
  %181 = bitcast <4 x i64>* %180 to <8 x i32>*
  %182 = load <8 x i32>, <8 x i32>* %181, align 32
  %183 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 384
  %184 = bitcast <4 x i64>* %183 to <8 x i32>*
  %185 = load <8 x i32>, <8 x i32>* %184, align 32
  %186 = add <8 x i32> %185, %182
  %187 = sub <8 x i32> %182, %185
  %188 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 128
  %189 = bitcast <4 x i64>* %188 to <8 x i32>*
  %190 = load <8 x i32>, <8 x i32>* %189, align 32
  %191 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 376
  %192 = bitcast <4 x i64>* %191 to <8 x i32>*
  %193 = load <8 x i32>, <8 x i32>* %192, align 32
  %194 = add <8 x i32> %193, %190
  %195 = sub <8 x i32> %190, %193
  %196 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 136
  %197 = bitcast <4 x i64>* %196 to <8 x i32>*
  %198 = load <8 x i32>, <8 x i32>* %197, align 32
  %199 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 368
  %200 = bitcast <4 x i64>* %199 to <8 x i32>*
  %201 = load <8 x i32>, <8 x i32>* %200, align 32
  %202 = add <8 x i32> %201, %198
  %203 = sub <8 x i32> %198, %201
  %204 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 144
  %205 = bitcast <4 x i64>* %204 to <8 x i32>*
  %206 = load <8 x i32>, <8 x i32>* %205, align 32
  %207 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 360
  %208 = bitcast <4 x i64>* %207 to <8 x i32>*
  %209 = load <8 x i32>, <8 x i32>* %208, align 32
  %210 = add <8 x i32> %209, %206
  %211 = sub <8 x i32> %206, %209
  %212 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 152
  %213 = bitcast <4 x i64>* %212 to <8 x i32>*
  %214 = load <8 x i32>, <8 x i32>* %213, align 32
  %215 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 352
  %216 = bitcast <4 x i64>* %215 to <8 x i32>*
  %217 = load <8 x i32>, <8 x i32>* %216, align 32
  %218 = add <8 x i32> %217, %214
  %219 = sub <8 x i32> %214, %217
  %220 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 160
  %221 = bitcast <4 x i64>* %220 to <8 x i32>*
  %222 = load <8 x i32>, <8 x i32>* %221, align 32
  %223 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 344
  %224 = bitcast <4 x i64>* %223 to <8 x i32>*
  %225 = load <8 x i32>, <8 x i32>* %224, align 32
  %226 = add <8 x i32> %225, %222
  %227 = sub <8 x i32> %222, %225
  %228 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 168
  %229 = bitcast <4 x i64>* %228 to <8 x i32>*
  %230 = load <8 x i32>, <8 x i32>* %229, align 32
  %231 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 336
  %232 = bitcast <4 x i64>* %231 to <8 x i32>*
  %233 = load <8 x i32>, <8 x i32>* %232, align 32
  %234 = add <8 x i32> %233, %230
  %235 = sub <8 x i32> %230, %233
  %236 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 176
  %237 = bitcast <4 x i64>* %236 to <8 x i32>*
  %238 = load <8 x i32>, <8 x i32>* %237, align 32
  %239 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 328
  %240 = bitcast <4 x i64>* %239 to <8 x i32>*
  %241 = load <8 x i32>, <8 x i32>* %240, align 32
  %242 = add <8 x i32> %241, %238
  %243 = sub <8 x i32> %238, %241
  %244 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 184
  %245 = bitcast <4 x i64>* %244 to <8 x i32>*
  %246 = load <8 x i32>, <8 x i32>* %245, align 32
  %247 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 320
  %248 = bitcast <4 x i64>* %247 to <8 x i32>*
  %249 = load <8 x i32>, <8 x i32>* %248, align 32
  %250 = add <8 x i32> %249, %246
  %251 = sub <8 x i32> %246, %249
  %252 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 192
  %253 = bitcast <4 x i64>* %252 to <8 x i32>*
  %254 = load <8 x i32>, <8 x i32>* %253, align 32
  %255 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 312
  %256 = bitcast <4 x i64>* %255 to <8 x i32>*
  %257 = load <8 x i32>, <8 x i32>* %256, align 32
  %258 = add <8 x i32> %257, %254
  %259 = sub <8 x i32> %254, %257
  %260 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 200
  %261 = bitcast <4 x i64>* %260 to <8 x i32>*
  %262 = load <8 x i32>, <8 x i32>* %261, align 32
  %263 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 304
  %264 = bitcast <4 x i64>* %263 to <8 x i32>*
  %265 = load <8 x i32>, <8 x i32>* %264, align 32
  %266 = add <8 x i32> %265, %262
  %267 = sub <8 x i32> %262, %265
  %268 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 208
  %269 = bitcast <4 x i64>* %268 to <8 x i32>*
  %270 = load <8 x i32>, <8 x i32>* %269, align 32
  %271 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 296
  %272 = bitcast <4 x i64>* %271 to <8 x i32>*
  %273 = load <8 x i32>, <8 x i32>* %272, align 32
  %274 = add <8 x i32> %273, %270
  %275 = sub <8 x i32> %270, %273
  %276 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 216
  %277 = bitcast <4 x i64>* %276 to <8 x i32>*
  %278 = load <8 x i32>, <8 x i32>* %277, align 32
  %279 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 288
  %280 = bitcast <4 x i64>* %279 to <8 x i32>*
  %281 = load <8 x i32>, <8 x i32>* %280, align 32
  %282 = add <8 x i32> %281, %278
  %283 = sub <8 x i32> %278, %281
  %284 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 224
  %285 = bitcast <4 x i64>* %284 to <8 x i32>*
  %286 = load <8 x i32>, <8 x i32>* %285, align 32
  %287 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 280
  %288 = bitcast <4 x i64>* %287 to <8 x i32>*
  %289 = load <8 x i32>, <8 x i32>* %288, align 32
  %290 = add <8 x i32> %289, %286
  %291 = sub <8 x i32> %286, %289
  %292 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 232
  %293 = bitcast <4 x i64>* %292 to <8 x i32>*
  %294 = load <8 x i32>, <8 x i32>* %293, align 32
  %295 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 272
  %296 = bitcast <4 x i64>* %295 to <8 x i32>*
  %297 = load <8 x i32>, <8 x i32>* %296, align 32
  %298 = add <8 x i32> %297, %294
  %299 = sub <8 x i32> %294, %297
  %300 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 240
  %301 = bitcast <4 x i64>* %300 to <8 x i32>*
  %302 = load <8 x i32>, <8 x i32>* %301, align 32
  %303 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 264
  %304 = bitcast <4 x i64>* %303 to <8 x i32>*
  %305 = load <8 x i32>, <8 x i32>* %304, align 32
  %306 = add <8 x i32> %305, %302
  %307 = sub <8 x i32> %302, %305
  %308 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 248
  %309 = bitcast <4 x i64>* %308 to <8 x i32>*
  %310 = load <8 x i32>, <8 x i32>* %309, align 32
  %311 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 256
  %312 = bitcast <4 x i64>* %311 to <8 x i32>*
  %313 = load <8 x i32>, <8 x i32>* %312, align 32
  %314 = add <8 x i32> %313, %310
  %315 = sub <8 x i32> %310, %313
  %316 = add <8 x i32> %314, %66
  %317 = sub <8 x i32> %66, %314
  %318 = add <8 x i32> %306, %74
  %319 = sub <8 x i32> %74, %306
  %320 = add <8 x i32> %298, %82
  %321 = sub <8 x i32> %82, %298
  %322 = add <8 x i32> %290, %90
  %323 = sub <8 x i32> %90, %290
  %324 = add <8 x i32> %282, %98
  %325 = sub <8 x i32> %98, %282
  %326 = add <8 x i32> %274, %106
  %327 = sub <8 x i32> %106, %274
  %328 = add <8 x i32> %266, %114
  %329 = sub <8 x i32> %114, %266
  %330 = add <8 x i32> %258, %122
  %331 = sub <8 x i32> %122, %258
  %332 = add <8 x i32> %250, %130
  %333 = sub <8 x i32> %130, %250
  %334 = add <8 x i32> %242, %138
  %335 = sub <8 x i32> %138, %242
  %336 = add <8 x i32> %234, %146
  %337 = sub <8 x i32> %146, %234
  %338 = add <8 x i32> %226, %154
  %339 = sub <8 x i32> %154, %226
  %340 = add <8 x i32> %218, %162
  %341 = sub <8 x i32> %162, %218
  %342 = add <8 x i32> %210, %170
  %343 = sub <8 x i32> %170, %210
  %344 = add <8 x i32> %202, %178
  %345 = sub <8 x i32> %178, %202
  %346 = add <8 x i32> %194, %186
  %347 = sub <8 x i32> %186, %194
  %348 = mul <8 x i32> %251, %16
  %349 = mul <8 x i32> %131, %18
  %350 = add <8 x i32> %349, %11
  %351 = add <8 x i32> %350, %348
  %352 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %351, i32 %5) #7
  %353 = mul <8 x i32> %251, %18
  %354 = mul <8 x i32> %16, %131
  %355 = sub <8 x i32> %11, %354
  %356 = add <8 x i32> %355, %353
  %357 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %356, i32 %5) #7
  %358 = mul <8 x i32> %243, %16
  %359 = mul <8 x i32> %139, %18
  %360 = add <8 x i32> %359, %11
  %361 = add <8 x i32> %360, %358
  %362 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %361, i32 %5) #7
  %363 = mul <8 x i32> %243, %18
  %364 = mul <8 x i32> %16, %139
  %365 = sub <8 x i32> %11, %364
  %366 = add <8 x i32> %365, %363
  %367 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %366, i32 %5) #7
  %368 = mul <8 x i32> %235, %16
  %369 = mul <8 x i32> %147, %18
  %370 = add <8 x i32> %369, %11
  %371 = add <8 x i32> %370, %368
  %372 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %371, i32 %5) #7
  %373 = mul <8 x i32> %235, %18
  %374 = mul <8 x i32> %16, %147
  %375 = sub <8 x i32> %11, %374
  %376 = add <8 x i32> %375, %373
  %377 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %376, i32 %5) #7
  %378 = mul <8 x i32> %227, %16
  %379 = mul <8 x i32> %155, %18
  %380 = add <8 x i32> %379, %11
  %381 = add <8 x i32> %380, %378
  %382 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %381, i32 %5) #7
  %383 = mul <8 x i32> %227, %18
  %384 = mul <8 x i32> %16, %155
  %385 = sub <8 x i32> %11, %384
  %386 = add <8 x i32> %385, %383
  %387 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %386, i32 %5) #7
  %388 = mul <8 x i32> %219, %16
  %389 = mul <8 x i32> %163, %18
  %390 = add <8 x i32> %389, %11
  %391 = add <8 x i32> %390, %388
  %392 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %391, i32 %5) #7
  %393 = mul <8 x i32> %219, %18
  %394 = mul <8 x i32> %16, %163
  %395 = sub <8 x i32> %11, %394
  %396 = add <8 x i32> %395, %393
  %397 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %396, i32 %5) #7
  %398 = mul <8 x i32> %211, %16
  %399 = mul <8 x i32> %171, %18
  %400 = add <8 x i32> %399, %11
  %401 = add <8 x i32> %400, %398
  %402 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %401, i32 %5) #7
  %403 = mul <8 x i32> %211, %18
  %404 = mul <8 x i32> %16, %171
  %405 = sub <8 x i32> %11, %404
  %406 = add <8 x i32> %405, %403
  %407 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %406, i32 %5) #7
  %408 = mul <8 x i32> %203, %16
  %409 = mul <8 x i32> %179, %18
  %410 = add <8 x i32> %409, %11
  %411 = add <8 x i32> %410, %408
  %412 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %411, i32 %5) #7
  %413 = mul <8 x i32> %203, %18
  %414 = mul <8 x i32> %16, %179
  %415 = sub <8 x i32> %11, %414
  %416 = add <8 x i32> %415, %413
  %417 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %416, i32 %5) #7
  %418 = mul <8 x i32> %195, %16
  %419 = mul <8 x i32> %187, %18
  %420 = add <8 x i32> %419, %11
  %421 = add <8 x i32> %420, %418
  %422 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %421, i32 %5) #7
  %423 = mul <8 x i32> %195, %18
  %424 = mul <8 x i32> %16, %187
  %425 = sub <8 x i32> %11, %424
  %426 = add <8 x i32> %425, %423
  %427 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %426, i32 %5) #7
  %428 = add <8 x i32> %316, %346
  %429 = sub <8 x i32> %316, %346
  %430 = add <8 x i32> %318, %344
  %431 = sub <8 x i32> %318, %344
  %432 = add <8 x i32> %320, %342
  %433 = sub <8 x i32> %320, %342
  %434 = add <8 x i32> %322, %340
  %435 = sub <8 x i32> %322, %340
  %436 = add <8 x i32> %324, %338
  %437 = sub <8 x i32> %324, %338
  %438 = add <8 x i32> %326, %336
  %439 = sub <8 x i32> %326, %336
  %440 = add <8 x i32> %328, %334
  %441 = sub <8 x i32> %328, %334
  %442 = add <8 x i32> %330, %332
  %443 = sub <8 x i32> %330, %332
  %444 = mul <8 x i32> %339, %16
  %445 = mul <8 x i32> %325, %18
  %446 = add <8 x i32> %444, %11
  %447 = add <8 x i32> %446, %445
  %448 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %447, i32 %5) #7
  %449 = mul <8 x i32> %339, %18
  %450 = mul <8 x i32> %16, %325
  %451 = add <8 x i32> %449, %11
  %452 = sub <8 x i32> %451, %450
  %453 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %452, i32 %5) #7
  %454 = mul <8 x i32> %337, %16
  %455 = mul <8 x i32> %327, %18
  %456 = add <8 x i32> %454, %11
  %457 = add <8 x i32> %456, %455
  %458 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %457, i32 %5) #7
  %459 = mul <8 x i32> %337, %18
  %460 = mul <8 x i32> %16, %327
  %461 = add <8 x i32> %459, %11
  %462 = sub <8 x i32> %461, %460
  %463 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %462, i32 %5) #7
  %464 = mul <8 x i32> %335, %16
  %465 = mul <8 x i32> %329, %18
  %466 = add <8 x i32> %464, %11
  %467 = add <8 x i32> %466, %465
  %468 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %467, i32 %5) #7
  %469 = mul <8 x i32> %335, %18
  %470 = mul <8 x i32> %16, %329
  %471 = add <8 x i32> %469, %11
  %472 = sub <8 x i32> %471, %470
  %473 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %472, i32 %5) #7
  %474 = mul <8 x i32> %333, %16
  %475 = mul <8 x i32> %331, %18
  %476 = add <8 x i32> %474, %11
  %477 = add <8 x i32> %476, %475
  %478 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %477, i32 %5) #7
  %479 = mul <8 x i32> %333, %18
  %480 = mul <8 x i32> %16, %331
  %481 = add <8 x i32> %479, %11
  %482 = sub <8 x i32> %481, %480
  %483 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %482, i32 %5) #7
  %484 = add <8 x i32> %422, %315
  %485 = sub <8 x i32> %315, %422
  %486 = add <8 x i32> %412, %307
  %487 = sub <8 x i32> %307, %412
  %488 = add <8 x i32> %402, %299
  %489 = sub <8 x i32> %299, %402
  %490 = add <8 x i32> %392, %291
  %491 = sub <8 x i32> %291, %392
  %492 = add <8 x i32> %382, %283
  %493 = sub <8 x i32> %283, %382
  %494 = add <8 x i32> %372, %275
  %495 = sub <8 x i32> %275, %372
  %496 = add <8 x i32> %362, %267
  %497 = sub <8 x i32> %267, %362
  %498 = add <8 x i32> %352, %259
  %499 = sub <8 x i32> %259, %352
  %500 = sub <8 x i32> %67, %427
  %501 = add <8 x i32> %427, %67
  %502 = sub <8 x i32> %75, %417
  %503 = add <8 x i32> %417, %75
  %504 = sub <8 x i32> %83, %407
  %505 = add <8 x i32> %407, %83
  %506 = sub <8 x i32> %91, %397
  %507 = add <8 x i32> %397, %91
  %508 = sub <8 x i32> %99, %387
  %509 = add <8 x i32> %387, %99
  %510 = sub <8 x i32> %107, %377
  %511 = add <8 x i32> %377, %107
  %512 = sub <8 x i32> %115, %367
  %513 = add <8 x i32> %367, %115
  %514 = sub <8 x i32> %123, %357
  %515 = add <8 x i32> %357, %123
  %516 = add <8 x i32> %428, %442
  %517 = sub <8 x i32> %428, %442
  %518 = add <8 x i32> %430, %440
  %519 = sub <8 x i32> %430, %440
  %520 = add <8 x i32> %432, %438
  %521 = sub <8 x i32> %432, %438
  %522 = add <8 x i32> %434, %436
  %523 = sub <8 x i32> %434, %436
  %524 = mul <8 x i32> %439, %16
  %525 = mul <8 x i32> %433, %18
  %526 = add <8 x i32> %524, %11
  %527 = add <8 x i32> %526, %525
  %528 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %527, i32 %5) #7
  %529 = mul <8 x i32> %439, %18
  %530 = mul <8 x i32> %16, %433
  %531 = add <8 x i32> %529, %11
  %532 = sub <8 x i32> %531, %530
  %533 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %532, i32 %5) #7
  %534 = mul <8 x i32> %437, %16
  %535 = mul <8 x i32> %435, %18
  %536 = add <8 x i32> %534, %11
  %537 = add <8 x i32> %536, %535
  %538 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %537, i32 %5) #7
  %539 = mul <8 x i32> %437, %18
  %540 = mul <8 x i32> %16, %435
  %541 = add <8 x i32> %539, %11
  %542 = sub <8 x i32> %541, %540
  %543 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %542, i32 %5) #7
  %544 = add <8 x i32> %478, %347
  %545 = sub <8 x i32> %347, %478
  %546 = add <8 x i32> %468, %345
  %547 = sub <8 x i32> %345, %468
  %548 = add <8 x i32> %458, %343
  %549 = sub <8 x i32> %343, %458
  %550 = add <8 x i32> %448, %341
  %551 = sub <8 x i32> %341, %448
  %552 = sub <8 x i32> %317, %483
  %553 = add <8 x i32> %483, %317
  %554 = sub <8 x i32> %319, %473
  %555 = add <8 x i32> %473, %319
  %556 = sub <8 x i32> %321, %463
  %557 = add <8 x i32> %463, %321
  %558 = sub <8 x i32> %323, %453
  %559 = add <8 x i32> %453, %323
  %560 = mul <8 x i32> %492, %23
  %561 = mul <8 x i32> %509, %27
  %562 = add <8 x i32> %560, %11
  %563 = add <8 x i32> %562, %561
  %564 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %563, i32 %5) #7
  %565 = mul <8 x i32> %492, %27
  %566 = mul <8 x i32> %23, %509
  %567 = add <8 x i32> %565, %11
  %568 = sub <8 x i32> %567, %566
  %569 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %568, i32 %5) #7
  %570 = mul <8 x i32> %494, %23
  %571 = mul <8 x i32> %511, %27
  %572 = add <8 x i32> %570, %11
  %573 = add <8 x i32> %572, %571
  %574 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %573, i32 %5) #7
  %575 = mul <8 x i32> %494, %27
  %576 = mul <8 x i32> %23, %511
  %577 = add <8 x i32> %575, %11
  %578 = sub <8 x i32> %577, %576
  %579 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %578, i32 %5) #7
  %580 = mul <8 x i32> %496, %23
  %581 = mul <8 x i32> %513, %27
  %582 = add <8 x i32> %580, %11
  %583 = add <8 x i32> %582, %581
  %584 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %583, i32 %5) #7
  %585 = mul <8 x i32> %496, %27
  %586 = mul <8 x i32> %23, %513
  %587 = add <8 x i32> %585, %11
  %588 = sub <8 x i32> %587, %586
  %589 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %588, i32 %5) #7
  %590 = mul <8 x i32> %498, %23
  %591 = mul <8 x i32> %515, %27
  %592 = add <8 x i32> %590, %11
  %593 = add <8 x i32> %592, %591
  %594 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %593, i32 %5) #7
  %595 = mul <8 x i32> %498, %27
  %596 = mul <8 x i32> %23, %515
  %597 = add <8 x i32> %595, %11
  %598 = sub <8 x i32> %597, %596
  %599 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %598, i32 %5) #7
  %600 = mul <8 x i32> %499, %30
  %601 = mul <8 x i32> %514, %23
  %602 = add <8 x i32> %600, %11
  %603 = add <8 x i32> %602, %601
  %604 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %603, i32 %5) #7
  %605 = mul <8 x i32> %499, %23
  %606 = mul <8 x i32> %30, %514
  %607 = add <8 x i32> %605, %11
  %608 = sub <8 x i32> %607, %606
  %609 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %608, i32 %5) #7
  %610 = mul <8 x i32> %497, %30
  %611 = mul <8 x i32> %512, %23
  %612 = add <8 x i32> %610, %11
  %613 = add <8 x i32> %612, %611
  %614 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %613, i32 %5) #7
  %615 = mul <8 x i32> %497, %23
  %616 = mul <8 x i32> %30, %512
  %617 = add <8 x i32> %615, %11
  %618 = sub <8 x i32> %617, %616
  %619 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %618, i32 %5) #7
  %620 = mul <8 x i32> %495, %30
  %621 = mul <8 x i32> %510, %23
  %622 = add <8 x i32> %620, %11
  %623 = add <8 x i32> %622, %621
  %624 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %623, i32 %5) #7
  %625 = mul <8 x i32> %495, %23
  %626 = mul <8 x i32> %30, %510
  %627 = add <8 x i32> %625, %11
  %628 = sub <8 x i32> %627, %626
  %629 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %628, i32 %5) #7
  %630 = mul <8 x i32> %493, %30
  %631 = mul <8 x i32> %508, %23
  %632 = add <8 x i32> %630, %11
  %633 = add <8 x i32> %632, %631
  %634 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %633, i32 %5) #7
  %635 = mul <8 x i32> %493, %23
  %636 = mul <8 x i32> %30, %508
  %637 = add <8 x i32> %635, %11
  %638 = sub <8 x i32> %637, %636
  %639 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %638, i32 %5) #7
  %640 = add <8 x i32> %516, %522
  %641 = sub <8 x i32> %516, %522
  %642 = add <8 x i32> %518, %520
  %643 = sub <8 x i32> %518, %520
  %644 = mul <8 x i32> %521, %16
  %645 = mul <8 x i32> %519, %18
  %646 = add <8 x i32> %644, %11
  %647 = add <8 x i32> %646, %645
  %648 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %647, i32 %5) #7
  %649 = mul <8 x i32> %521, %18
  %650 = mul <8 x i32> %16, %519
  %651 = add <8 x i32> %649, %11
  %652 = sub <8 x i32> %651, %650
  %653 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %652, i32 %5) #7
  %654 = add <8 x i32> %538, %443
  %655 = sub <8 x i32> %443, %538
  %656 = add <8 x i32> %528, %441
  %657 = sub <8 x i32> %441, %528
  %658 = sub <8 x i32> %429, %543
  %659 = add <8 x i32> %543, %429
  %660 = sub <8 x i32> %431, %533
  %661 = add <8 x i32> %533, %431
  %662 = mul <8 x i32> %548, %23
  %663 = mul <8 x i32> %557, %27
  %664 = add <8 x i32> %662, %11
  %665 = add <8 x i32> %664, %663
  %666 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %665, i32 %5) #7
  %667 = mul <8 x i32> %548, %27
  %668 = mul <8 x i32> %23, %557
  %669 = add <8 x i32> %667, %11
  %670 = sub <8 x i32> %669, %668
  %671 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %670, i32 %5) #7
  %672 = mul <8 x i32> %550, %23
  %673 = mul <8 x i32> %559, %27
  %674 = add <8 x i32> %672, %11
  %675 = add <8 x i32> %674, %673
  %676 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %675, i32 %5) #7
  %677 = mul <8 x i32> %550, %27
  %678 = mul <8 x i32> %23, %559
  %679 = add <8 x i32> %677, %11
  %680 = sub <8 x i32> %679, %678
  %681 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %680, i32 %5) #7
  %682 = mul <8 x i32> %551, %30
  %683 = mul <8 x i32> %558, %23
  %684 = add <8 x i32> %682, %11
  %685 = add <8 x i32> %684, %683
  %686 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %685, i32 %5) #7
  %687 = mul <8 x i32> %551, %23
  %688 = mul <8 x i32> %30, %558
  %689 = add <8 x i32> %687, %11
  %690 = sub <8 x i32> %689, %688
  %691 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %690, i32 %5) #7
  %692 = mul <8 x i32> %549, %30
  %693 = mul <8 x i32> %556, %23
  %694 = add <8 x i32> %692, %11
  %695 = add <8 x i32> %694, %693
  %696 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %695, i32 %5) #7
  %697 = mul <8 x i32> %549, %23
  %698 = mul <8 x i32> %30, %556
  %699 = add <8 x i32> %697, %11
  %700 = sub <8 x i32> %699, %698
  %701 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %700, i32 %5) #7
  %702 = add <8 x i32> %594, %484
  %703 = sub <8 x i32> %484, %594
  %704 = add <8 x i32> %584, %486
  %705 = sub <8 x i32> %486, %584
  %706 = add <8 x i32> %574, %488
  %707 = sub <8 x i32> %488, %574
  %708 = add <8 x i32> %564, %490
  %709 = sub <8 x i32> %490, %564
  %710 = sub <8 x i32> %485, %604
  %711 = add <8 x i32> %604, %485
  %712 = sub <8 x i32> %487, %614
  %713 = add <8 x i32> %614, %487
  %714 = sub <8 x i32> %489, %624
  %715 = add <8 x i32> %624, %489
  %716 = sub <8 x i32> %491, %634
  %717 = add <8 x i32> %634, %491
  %718 = add <8 x i32> %609, %500
  %719 = sub <8 x i32> %500, %609
  %720 = add <8 x i32> %619, %502
  %721 = sub <8 x i32> %502, %619
  %722 = add <8 x i32> %629, %504
  %723 = sub <8 x i32> %504, %629
  %724 = add <8 x i32> %639, %506
  %725 = sub <8 x i32> %506, %639
  %726 = sub <8 x i32> %501, %599
  %727 = add <8 x i32> %599, %501
  %728 = sub <8 x i32> %503, %589
  %729 = add <8 x i32> %589, %503
  %730 = sub <8 x i32> %505, %579
  %731 = add <8 x i32> %579, %505
  %732 = sub <8 x i32> %507, %569
  %733 = add <8 x i32> %569, %507
  %734 = add <8 x i32> %640, %642
  %735 = mul <8 x i32> %734, %18
  %736 = add <8 x i32> %735, %11
  %737 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %736, i32 %5) #7
  %738 = sub <8 x i32> %640, %642
  %739 = mul <8 x i32> %738, %18
  %740 = add <8 x i32> %739, %11
  %741 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %740, i32 %5) #7
  %742 = mul <8 x i32> %641, %32
  %743 = mul <8 x i32> %643, %27
  %744 = add <8 x i32> %743, %11
  %745 = add <8 x i32> %744, %742
  %746 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %745, i32 %5) #7
  %747 = mul <8 x i32> %641, %27
  %748 = mul <8 x i32> %32, %643
  %749 = sub <8 x i32> %11, %748
  %750 = add <8 x i32> %749, %747
  %751 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %750, i32 %5) #7
  %752 = add <8 x i32> %648, %523
  %753 = sub <8 x i32> %523, %648
  %754 = sub <8 x i32> %517, %653
  %755 = add <8 x i32> %653, %517
  %756 = mul <8 x i32> %656, %23
  %757 = mul <8 x i32> %661, %27
  %758 = add <8 x i32> %756, %11
  %759 = add <8 x i32> %758, %757
  %760 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %759, i32 %5) #7
  %761 = mul <8 x i32> %656, %27
  %762 = mul <8 x i32> %23, %661
  %763 = add <8 x i32> %761, %11
  %764 = sub <8 x i32> %763, %762
  %765 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %764, i32 %5) #7
  %766 = mul <8 x i32> %657, %30
  %767 = mul <8 x i32> %660, %23
  %768 = add <8 x i32> %766, %11
  %769 = add <8 x i32> %768, %767
  %770 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %769, i32 %5) #7
  %771 = mul <8 x i32> %657, %23
  %772 = mul <8 x i32> %30, %660
  %773 = add <8 x i32> %771, %11
  %774 = sub <8 x i32> %773, %772
  %775 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %774, i32 %5) #7
  %776 = add <8 x i32> %676, %544
  %777 = sub <8 x i32> %544, %676
  %778 = add <8 x i32> %666, %546
  %779 = sub <8 x i32> %546, %666
  %780 = sub <8 x i32> %545, %686
  %781 = add <8 x i32> %686, %545
  %782 = sub <8 x i32> %547, %696
  %783 = add <8 x i32> %696, %547
  %784 = add <8 x i32> %691, %552
  %785 = sub <8 x i32> %552, %691
  %786 = add <8 x i32> %701, %554
  %787 = sub <8 x i32> %554, %701
  %788 = sub <8 x i32> %553, %681
  %789 = add <8 x i32> %681, %553
  %790 = sub <8 x i32> %555, %671
  %791 = add <8 x i32> %671, %555
  %792 = mul <8 x i32> %706, %37
  %793 = mul <8 x i32> %731, %41
  %794 = add <8 x i32> %792, %11
  %795 = add <8 x i32> %794, %793
  %796 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %795, i32 %5) #7
  %797 = mul <8 x i32> %706, %41
  %798 = mul <8 x i32> %37, %731
  %799 = add <8 x i32> %797, %11
  %800 = sub <8 x i32> %799, %798
  %801 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %800, i32 %5) #7
  %802 = mul <8 x i32> %708, %37
  %803 = mul <8 x i32> %733, %41
  %804 = add <8 x i32> %802, %11
  %805 = add <8 x i32> %804, %803
  %806 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %805, i32 %5) #7
  %807 = mul <8 x i32> %708, %41
  %808 = mul <8 x i32> %37, %733
  %809 = add <8 x i32> %807, %11
  %810 = sub <8 x i32> %809, %808
  %811 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %810, i32 %5) #7
  %812 = mul <8 x i32> %709, %44
  %813 = mul <8 x i32> %732, %37
  %814 = add <8 x i32> %812, %11
  %815 = add <8 x i32> %814, %813
  %816 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %815, i32 %5) #7
  %817 = mul <8 x i32> %709, %37
  %818 = mul <8 x i32> %44, %732
  %819 = add <8 x i32> %817, %11
  %820 = sub <8 x i32> %819, %818
  %821 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %820, i32 %5) #7
  %822 = mul <8 x i32> %707, %44
  %823 = mul <8 x i32> %730, %37
  %824 = add <8 x i32> %822, %11
  %825 = add <8 x i32> %824, %823
  %826 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %825, i32 %5) #7
  %827 = mul <8 x i32> %707, %37
  %828 = mul <8 x i32> %44, %730
  %829 = add <8 x i32> %827, %11
  %830 = sub <8 x i32> %829, %828
  %831 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %830, i32 %5) #7
  %832 = mul <8 x i32> %714, %49
  %833 = mul <8 x i32> %723, %53
  %834 = add <8 x i32> %832, %11
  %835 = add <8 x i32> %834, %833
  %836 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %835, i32 %5) #7
  %837 = mul <8 x i32> %714, %53
  %838 = mul <8 x i32> %49, %723
  %839 = add <8 x i32> %837, %11
  %840 = sub <8 x i32> %839, %838
  %841 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %840, i32 %5) #7
  %842 = mul <8 x i32> %716, %49
  %843 = mul <8 x i32> %725, %53
  %844 = add <8 x i32> %842, %11
  %845 = add <8 x i32> %844, %843
  %846 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %845, i32 %5) #7
  %847 = mul <8 x i32> %716, %53
  %848 = mul <8 x i32> %49, %725
  %849 = add <8 x i32> %847, %11
  %850 = sub <8 x i32> %849, %848
  %851 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %850, i32 %5) #7
  %852 = mul <8 x i32> %717, %56
  %853 = mul <8 x i32> %724, %49
  %854 = add <8 x i32> %852, %11
  %855 = add <8 x i32> %854, %853
  %856 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %855, i32 %5) #7
  %857 = mul <8 x i32> %717, %49
  %858 = mul <8 x i32> %56, %724
  %859 = add <8 x i32> %857, %11
  %860 = sub <8 x i32> %859, %858
  %861 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %860, i32 %5) #7
  %862 = mul <8 x i32> %715, %56
  %863 = mul <8 x i32> %722, %49
  %864 = add <8 x i32> %862, %11
  %865 = add <8 x i32> %864, %863
  %866 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %865, i32 %5) #7
  %867 = mul <8 x i32> %715, %49
  %868 = mul <8 x i32> %56, %722
  %869 = add <8 x i32> %867, %11
  %870 = sub <8 x i32> %869, %868
  %871 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %870, i32 %5) #7
  %872 = mul <8 x i32> %755, %58
  %873 = mul <8 x i32> %752, %41
  %874 = add <8 x i32> %873, %11
  %875 = add <8 x i32> %874, %872
  %876 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %875, i32 %5) #7
  %877 = mul <8 x i32> %755, %41
  %878 = mul <8 x i32> %58, %752
  %879 = sub <8 x i32> %11, %878
  %880 = add <8 x i32> %879, %877
  %881 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %880, i32 %5) #7
  %882 = mul <8 x i32> %754, %60
  %883 = mul <8 x i32> %753, %53
  %884 = add <8 x i32> %883, %11
  %885 = add <8 x i32> %884, %882
  %886 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %885, i32 %5) #7
  %887 = mul <8 x i32> %754, %53
  %888 = mul <8 x i32> %60, %753
  %889 = sub <8 x i32> %11, %888
  %890 = add <8 x i32> %889, %887
  %891 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %890, i32 %5) #7
  %892 = add <8 x i32> %760, %654
  %893 = sub <8 x i32> %654, %760
  %894 = sub <8 x i32> %655, %770
  %895 = add <8 x i32> %770, %655
  %896 = add <8 x i32> %775, %658
  %897 = sub <8 x i32> %658, %775
  %898 = sub <8 x i32> %659, %765
  %899 = add <8 x i32> %765, %659
  %900 = mul <8 x i32> %778, %37
  %901 = mul <8 x i32> %791, %41
  %902 = add <8 x i32> %900, %11
  %903 = add <8 x i32> %902, %901
  %904 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %903, i32 %5) #7
  %905 = mul <8 x i32> %778, %41
  %906 = mul <8 x i32> %37, %791
  %907 = add <8 x i32> %905, %11
  %908 = sub <8 x i32> %907, %906
  %909 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %908, i32 %5) #7
  %910 = mul <8 x i32> %779, %44
  %911 = mul <8 x i32> %790, %37
  %912 = add <8 x i32> %910, %11
  %913 = add <8 x i32> %912, %911
  %914 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %913, i32 %5) #7
  %915 = mul <8 x i32> %779, %37
  %916 = mul <8 x i32> %44, %790
  %917 = add <8 x i32> %915, %11
  %918 = sub <8 x i32> %917, %916
  %919 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %918, i32 %5) #7
  %920 = mul <8 x i32> %782, %49
  %921 = mul <8 x i32> %787, %53
  %922 = add <8 x i32> %920, %11
  %923 = add <8 x i32> %922, %921
  %924 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %923, i32 %5) #7
  %925 = mul <8 x i32> %782, %53
  %926 = mul <8 x i32> %49, %787
  %927 = add <8 x i32> %925, %11
  %928 = sub <8 x i32> %927, %926
  %929 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %928, i32 %5) #7
  %930 = mul <8 x i32> %783, %56
  %931 = mul <8 x i32> %786, %49
  %932 = add <8 x i32> %930, %11
  %933 = add <8 x i32> %932, %931
  %934 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %933, i32 %5) #7
  %935 = mul <8 x i32> %783, %49
  %936 = mul <8 x i32> %56, %786
  %937 = add <8 x i32> %935, %11
  %938 = sub <8 x i32> %937, %936
  %939 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %938, i32 %5) #7
  %940 = add <8 x i32> %806, %702
  %941 = sub <8 x i32> %702, %806
  %942 = add <8 x i32> %796, %704
  %943 = sub <8 x i32> %704, %796
  %944 = sub <8 x i32> %703, %816
  %945 = add <8 x i32> %816, %703
  %946 = sub <8 x i32> %705, %826
  %947 = add <8 x i32> %826, %705
  %948 = add <8 x i32> %846, %710
  %949 = sub <8 x i32> %710, %846
  %950 = add <8 x i32> %836, %712
  %951 = sub <8 x i32> %712, %836
  %952 = sub <8 x i32> %711, %856
  %953 = add <8 x i32> %856, %711
  %954 = sub <8 x i32> %713, %866
  %955 = add <8 x i32> %866, %713
  %956 = add <8 x i32> %861, %718
  %957 = sub <8 x i32> %718, %861
  %958 = add <8 x i32> %871, %720
  %959 = sub <8 x i32> %720, %871
  %960 = sub <8 x i32> %719, %851
  %961 = add <8 x i32> %851, %719
  %962 = sub <8 x i32> %721, %841
  %963 = add <8 x i32> %841, %721
  %964 = add <8 x i32> %821, %726
  %965 = sub <8 x i32> %726, %821
  %966 = add <8 x i32> %831, %728
  %967 = sub <8 x i32> %728, %831
  %968 = sub <8 x i32> %727, %811
  %969 = add <8 x i32> %811, %727
  %970 = sub <8 x i32> %729, %801
  %971 = add <8 x i32> %801, %729
  %972 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 60
  %973 = load i32, i32* %972, align 16
  %974 = insertelement <8 x i32> undef, i32 %973, i32 0
  %975 = shufflevector <8 x i32> %974, <8 x i32> undef, <8 x i32> zeroinitializer
  %976 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 4
  %977 = load i32, i32* %976, align 16
  %978 = insertelement <8 x i32> undef, i32 %977, i32 0
  %979 = shufflevector <8 x i32> %978, <8 x i32> undef, <8 x i32> zeroinitializer
  %980 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 28
  %981 = load i32, i32* %980, align 16
  %982 = insertelement <8 x i32> undef, i32 %981, i32 0
  %983 = shufflevector <8 x i32> %982, <8 x i32> undef, <8 x i32> zeroinitializer
  %984 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 36
  %985 = load i32, i32* %984, align 16
  %986 = insertelement <8 x i32> undef, i32 %985, i32 0
  %987 = shufflevector <8 x i32> %986, <8 x i32> undef, <8 x i32> zeroinitializer
  %988 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 44
  %989 = load i32, i32* %988, align 16
  %990 = insertelement <8 x i32> undef, i32 %989, i32 0
  %991 = shufflevector <8 x i32> %990, <8 x i32> undef, <8 x i32> zeroinitializer
  %992 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 20
  %993 = load i32, i32* %992, align 16
  %994 = insertelement <8 x i32> undef, i32 %993, i32 0
  %995 = shufflevector <8 x i32> %994, <8 x i32> undef, <8 x i32> zeroinitializer
  %996 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 12
  %997 = load i32, i32* %996, align 16
  %998 = insertelement <8 x i32> undef, i32 %997, i32 0
  %999 = shufflevector <8 x i32> %998, <8 x i32> undef, <8 x i32> zeroinitializer
  %1000 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 52
  %1001 = load i32, i32* %1000, align 16
  %1002 = insertelement <8 x i32> undef, i32 %1001, i32 0
  %1003 = shufflevector <8 x i32> %1002, <8 x i32> undef, <8 x i32> zeroinitializer
  %1004 = sub nsw i32 0, %977
  %1005 = insertelement <8 x i32> undef, i32 %1004, i32 0
  %1006 = shufflevector <8 x i32> %1005, <8 x i32> undef, <8 x i32> zeroinitializer
  %1007 = sub nsw i32 0, %973
  %1008 = insertelement <8 x i32> undef, i32 %1007, i32 0
  %1009 = shufflevector <8 x i32> %1008, <8 x i32> undef, <8 x i32> zeroinitializer
  %1010 = sub nsw i32 0, %985
  %1011 = insertelement <8 x i32> undef, i32 %1010, i32 0
  %1012 = shufflevector <8 x i32> %1011, <8 x i32> undef, <8 x i32> zeroinitializer
  %1013 = sub nsw i32 0, %981
  %1014 = insertelement <8 x i32> undef, i32 %1013, i32 0
  %1015 = shufflevector <8 x i32> %1014, <8 x i32> undef, <8 x i32> zeroinitializer
  %1016 = sub nsw i32 0, %993
  %1017 = insertelement <8 x i32> undef, i32 %1016, i32 0
  %1018 = shufflevector <8 x i32> %1017, <8 x i32> undef, <8 x i32> zeroinitializer
  %1019 = sub nsw i32 0, %989
  %1020 = insertelement <8 x i32> undef, i32 %1019, i32 0
  %1021 = shufflevector <8 x i32> %1020, <8 x i32> undef, <8 x i32> zeroinitializer
  %1022 = sub nsw i32 0, %1001
  %1023 = insertelement <8 x i32> undef, i32 %1022, i32 0
  %1024 = shufflevector <8 x i32> %1023, <8 x i32> undef, <8 x i32> zeroinitializer
  %1025 = sub nsw i32 0, %997
  %1026 = insertelement <8 x i32> undef, i32 %1025, i32 0
  %1027 = shufflevector <8 x i32> %1026, <8 x i32> undef, <8 x i32> zeroinitializer
  %1028 = mul <8 x i32> %979, %899
  %1029 = mul <8 x i32> %975, %892
  %1030 = add <8 x i32> %1029, %11
  %1031 = add <8 x i32> %1030, %1028
  %1032 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1031, i32 %5) #7
  %1033 = mul <8 x i32> %975, %899
  %1034 = mul <8 x i32> %892, %979
  %1035 = add <8 x i32> %1033, %11
  %1036 = sub <8 x i32> %1035, %1034
  %1037 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1036, i32 %5) #7
  %1038 = mul <8 x i32> %987, %898
  %1039 = mul <8 x i32> %983, %893
  %1040 = add <8 x i32> %1039, %11
  %1041 = add <8 x i32> %1040, %1038
  %1042 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1041, i32 %5) #7
  %1043 = mul <8 x i32> %983, %898
  %1044 = mul <8 x i32> %893, %987
  %1045 = add <8 x i32> %1043, %11
  %1046 = sub <8 x i32> %1045, %1044
  %1047 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1046, i32 %5) #7
  %1048 = mul <8 x i32> %995, %897
  %1049 = mul <8 x i32> %991, %894
  %1050 = add <8 x i32> %1049, %11
  %1051 = add <8 x i32> %1050, %1048
  %1052 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1051, i32 %5) #7
  %1053 = mul <8 x i32> %991, %897
  %1054 = mul <8 x i32> %894, %995
  %1055 = add <8 x i32> %1053, %11
  %1056 = sub <8 x i32> %1055, %1054
  %1057 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1056, i32 %5) #7
  %1058 = mul <8 x i32> %1003, %896
  %1059 = mul <8 x i32> %999, %895
  %1060 = add <8 x i32> %1059, %11
  %1061 = add <8 x i32> %1060, %1058
  %1062 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1061, i32 %5) #7
  %1063 = mul <8 x i32> %999, %896
  %1064 = mul <8 x i32> %895, %1003
  %1065 = add <8 x i32> %1063, %11
  %1066 = sub <8 x i32> %1065, %1064
  %1067 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1066, i32 %5) #7
  %1068 = add <8 x i32> %904, %776
  %1069 = sub <8 x i32> %776, %904
  %1070 = sub <8 x i32> %777, %914
  %1071 = add <8 x i32> %914, %777
  %1072 = add <8 x i32> %924, %780
  %1073 = sub <8 x i32> %780, %924
  %1074 = sub <8 x i32> %781, %934
  %1075 = add <8 x i32> %934, %781
  %1076 = add <8 x i32> %939, %784
  %1077 = sub <8 x i32> %784, %939
  %1078 = sub <8 x i32> %785, %929
  %1079 = add <8 x i32> %929, %785
  %1080 = add <8 x i32> %919, %788
  %1081 = sub <8 x i32> %788, %919
  %1082 = sub <8 x i32> %789, %909
  %1083 = add <8 x i32> %909, %789
  %1084 = mul <8 x i32> %1006, %942
  %1085 = mul <8 x i32> %975, %971
  %1086 = add <8 x i32> %1085, %11
  %1087 = add <8 x i32> %1086, %1084
  %1088 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1087, i32 %5) #7
  %1089 = mul <8 x i32> %975, %942
  %1090 = mul <8 x i32> %971, %1006
  %1091 = add <8 x i32> %1089, %11
  %1092 = sub <8 x i32> %1091, %1090
  %1093 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1092, i32 %5) #7
  %1094 = mul <8 x i32> %1009, %943
  %1095 = mul <8 x i32> %1006, %970
  %1096 = add <8 x i32> %1094, %11
  %1097 = add <8 x i32> %1096, %1095
  %1098 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1097, i32 %5) #7
  %1099 = mul <8 x i32> %1006, %943
  %1100 = mul <8 x i32> %970, %1009
  %1101 = sub <8 x i32> %11, %1100
  %1102 = add <8 x i32> %1101, %1099
  %1103 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1102, i32 %5) #7
  %1104 = mul <8 x i32> %1012, %946
  %1105 = mul <8 x i32> %983, %967
  %1106 = add <8 x i32> %1105, %11
  %1107 = add <8 x i32> %1106, %1104
  %1108 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1107, i32 %5) #7
  %1109 = mul <8 x i32> %983, %946
  %1110 = mul <8 x i32> %967, %1012
  %1111 = add <8 x i32> %1109, %11
  %1112 = sub <8 x i32> %1111, %1110
  %1113 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1112, i32 %5) #7
  %1114 = mul <8 x i32> %1015, %947
  %1115 = mul <8 x i32> %1012, %966
  %1116 = add <8 x i32> %1114, %11
  %1117 = add <8 x i32> %1116, %1115
  %1118 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1117, i32 %5) #7
  %1119 = mul <8 x i32> %1012, %947
  %1120 = mul <8 x i32> %966, %1015
  %1121 = sub <8 x i32> %11, %1120
  %1122 = add <8 x i32> %1121, %1119
  %1123 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1122, i32 %5) #7
  %1124 = mul <8 x i32> %1018, %950
  %1125 = mul <8 x i32> %991, %963
  %1126 = add <8 x i32> %1125, %11
  %1127 = add <8 x i32> %1126, %1124
  %1128 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1127, i32 %5) #7
  %1129 = mul <8 x i32> %991, %950
  %1130 = mul <8 x i32> %963, %1018
  %1131 = add <8 x i32> %1129, %11
  %1132 = sub <8 x i32> %1131, %1130
  %1133 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1132, i32 %5) #7
  %1134 = mul <8 x i32> %1021, %951
  %1135 = mul <8 x i32> %1018, %962
  %1136 = add <8 x i32> %1134, %11
  %1137 = add <8 x i32> %1136, %1135
  %1138 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1137, i32 %5) #7
  %1139 = mul <8 x i32> %1018, %951
  %1140 = mul <8 x i32> %962, %1021
  %1141 = sub <8 x i32> %11, %1140
  %1142 = add <8 x i32> %1141, %1139
  %1143 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1142, i32 %5) #7
  %1144 = mul <8 x i32> %1024, %954
  %1145 = mul <8 x i32> %999, %959
  %1146 = add <8 x i32> %1145, %11
  %1147 = add <8 x i32> %1146, %1144
  %1148 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1147, i32 %5) #7
  %1149 = mul <8 x i32> %999, %954
  %1150 = mul <8 x i32> %959, %1024
  %1151 = add <8 x i32> %1149, %11
  %1152 = sub <8 x i32> %1151, %1150
  %1153 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1152, i32 %5) #7
  %1154 = mul <8 x i32> %1027, %955
  %1155 = mul <8 x i32> %1024, %958
  %1156 = add <8 x i32> %1154, %11
  %1157 = add <8 x i32> %1156, %1155
  %1158 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1157, i32 %5) #7
  %1159 = mul <8 x i32> %1024, %955
  %1160 = mul <8 x i32> %958, %1027
  %1161 = sub <8 x i32> %11, %1160
  %1162 = add <8 x i32> %1161, %1159
  %1163 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1162, i32 %5) #7
  %1164 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 62
  %1165 = load i32, i32* %1164, align 8
  %1166 = insertelement <8 x i32> undef, i32 %1165, i32 0
  %1167 = shufflevector <8 x i32> %1166, <8 x i32> undef, <8 x i32> zeroinitializer
  %1168 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 2
  %1169 = load i32, i32* %1168, align 8
  %1170 = insertelement <8 x i32> undef, i32 %1169, i32 0
  %1171 = shufflevector <8 x i32> %1170, <8 x i32> undef, <8 x i32> zeroinitializer
  %1172 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 30
  %1173 = load i32, i32* %1172, align 8
  %1174 = insertelement <8 x i32> undef, i32 %1173, i32 0
  %1175 = shufflevector <8 x i32> %1174, <8 x i32> undef, <8 x i32> zeroinitializer
  %1176 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 34
  %1177 = load i32, i32* %1176, align 8
  %1178 = insertelement <8 x i32> undef, i32 %1177, i32 0
  %1179 = shufflevector <8 x i32> %1178, <8 x i32> undef, <8 x i32> zeroinitializer
  %1180 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 46
  %1181 = load i32, i32* %1180, align 8
  %1182 = insertelement <8 x i32> undef, i32 %1181, i32 0
  %1183 = shufflevector <8 x i32> %1182, <8 x i32> undef, <8 x i32> zeroinitializer
  %1184 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 18
  %1185 = load i32, i32* %1184, align 8
  %1186 = insertelement <8 x i32> undef, i32 %1185, i32 0
  %1187 = shufflevector <8 x i32> %1186, <8 x i32> undef, <8 x i32> zeroinitializer
  %1188 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 14
  %1189 = load i32, i32* %1188, align 8
  %1190 = insertelement <8 x i32> undef, i32 %1189, i32 0
  %1191 = shufflevector <8 x i32> %1190, <8 x i32> undef, <8 x i32> zeroinitializer
  %1192 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 50
  %1193 = load i32, i32* %1192, align 8
  %1194 = insertelement <8 x i32> undef, i32 %1193, i32 0
  %1195 = shufflevector <8 x i32> %1194, <8 x i32> undef, <8 x i32> zeroinitializer
  %1196 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 54
  %1197 = load i32, i32* %1196, align 8
  %1198 = insertelement <8 x i32> undef, i32 %1197, i32 0
  %1199 = shufflevector <8 x i32> %1198, <8 x i32> undef, <8 x i32> zeroinitializer
  %1200 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 10
  %1201 = load i32, i32* %1200, align 8
  %1202 = insertelement <8 x i32> undef, i32 %1201, i32 0
  %1203 = shufflevector <8 x i32> %1202, <8 x i32> undef, <8 x i32> zeroinitializer
  %1204 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 22
  %1205 = load i32, i32* %1204, align 8
  %1206 = insertelement <8 x i32> undef, i32 %1205, i32 0
  %1207 = shufflevector <8 x i32> %1206, <8 x i32> undef, <8 x i32> zeroinitializer
  %1208 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 42
  %1209 = load i32, i32* %1208, align 8
  %1210 = insertelement <8 x i32> undef, i32 %1209, i32 0
  %1211 = shufflevector <8 x i32> %1210, <8 x i32> undef, <8 x i32> zeroinitializer
  %1212 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 38
  %1213 = load i32, i32* %1212, align 8
  %1214 = insertelement <8 x i32> undef, i32 %1213, i32 0
  %1215 = shufflevector <8 x i32> %1214, <8 x i32> undef, <8 x i32> zeroinitializer
  %1216 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 26
  %1217 = load i32, i32* %1216, align 8
  %1218 = insertelement <8 x i32> undef, i32 %1217, i32 0
  %1219 = shufflevector <8 x i32> %1218, <8 x i32> undef, <8 x i32> zeroinitializer
  %1220 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 6
  %1221 = load i32, i32* %1220, align 8
  %1222 = insertelement <8 x i32> undef, i32 %1221, i32 0
  %1223 = shufflevector <8 x i32> %1222, <8 x i32> undef, <8 x i32> zeroinitializer
  %1224 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 58
  %1225 = load i32, i32* %1224, align 8
  %1226 = insertelement <8 x i32> undef, i32 %1225, i32 0
  %1227 = shufflevector <8 x i32> %1226, <8 x i32> undef, <8 x i32> zeroinitializer
  %1228 = mul <8 x i32> %1171, %1083
  %1229 = mul <8 x i32> %1167, %1068
  %1230 = add <8 x i32> %1229, %11
  %1231 = add <8 x i32> %1230, %1228
  %1232 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1231, i32 %5) #7
  %1233 = mul <8 x i32> %1167, %1083
  %1234 = mul <8 x i32> %1068, %1171
  %1235 = add <8 x i32> %1233, %11
  %1236 = sub <8 x i32> %1235, %1234
  %1237 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1236, i32 %5) #7
  %1238 = mul <8 x i32> %1179, %1082
  %1239 = mul <8 x i32> %1175, %1069
  %1240 = add <8 x i32> %1239, %11
  %1241 = add <8 x i32> %1240, %1238
  %1242 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1241, i32 %5) #7
  %1243 = mul <8 x i32> %1175, %1082
  %1244 = mul <8 x i32> %1069, %1179
  %1245 = add <8 x i32> %1243, %11
  %1246 = sub <8 x i32> %1245, %1244
  %1247 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1246, i32 %5) #7
  %1248 = mul <8 x i32> %1187, %1081
  %1249 = mul <8 x i32> %1183, %1070
  %1250 = add <8 x i32> %1249, %11
  %1251 = add <8 x i32> %1250, %1248
  %1252 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1251, i32 %5) #7
  %1253 = mul <8 x i32> %1183, %1081
  %1254 = mul <8 x i32> %1070, %1187
  %1255 = add <8 x i32> %1253, %11
  %1256 = sub <8 x i32> %1255, %1254
  %1257 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1256, i32 %5) #7
  %1258 = mul <8 x i32> %1195, %1080
  %1259 = mul <8 x i32> %1191, %1071
  %1260 = add <8 x i32> %1259, %11
  %1261 = add <8 x i32> %1260, %1258
  %1262 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1261, i32 %5) #7
  %1263 = mul <8 x i32> %1191, %1080
  %1264 = mul <8 x i32> %1071, %1195
  %1265 = add <8 x i32> %1263, %11
  %1266 = sub <8 x i32> %1265, %1264
  %1267 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1266, i32 %5) #7
  %1268 = mul <8 x i32> %1203, %1079
  %1269 = mul <8 x i32> %1199, %1072
  %1270 = add <8 x i32> %1269, %11
  %1271 = add <8 x i32> %1270, %1268
  %1272 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1271, i32 %5) #7
  %1273 = mul <8 x i32> %1199, %1079
  %1274 = mul <8 x i32> %1072, %1203
  %1275 = add <8 x i32> %1273, %11
  %1276 = sub <8 x i32> %1275, %1274
  %1277 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1276, i32 %5) #7
  %1278 = mul <8 x i32> %1211, %1078
  %1279 = mul <8 x i32> %1207, %1073
  %1280 = add <8 x i32> %1279, %11
  %1281 = add <8 x i32> %1280, %1278
  %1282 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1281, i32 %5) #7
  %1283 = mul <8 x i32> %1207, %1078
  %1284 = mul <8 x i32> %1073, %1211
  %1285 = add <8 x i32> %1283, %11
  %1286 = sub <8 x i32> %1285, %1284
  %1287 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1286, i32 %5) #7
  %1288 = mul <8 x i32> %1219, %1077
  %1289 = mul <8 x i32> %1215, %1074
  %1290 = add <8 x i32> %1289, %11
  %1291 = add <8 x i32> %1290, %1288
  %1292 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1291, i32 %5) #7
  %1293 = mul <8 x i32> %1215, %1077
  %1294 = mul <8 x i32> %1074, %1219
  %1295 = add <8 x i32> %1293, %11
  %1296 = sub <8 x i32> %1295, %1294
  %1297 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1296, i32 %5) #7
  %1298 = mul <8 x i32> %1227, %1076
  %1299 = mul <8 x i32> %1223, %1075
  %1300 = add <8 x i32> %1299, %11
  %1301 = add <8 x i32> %1300, %1298
  %1302 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1301, i32 %5) #7
  %1303 = mul <8 x i32> %1223, %1076
  %1304 = mul <8 x i32> %1075, %1227
  %1305 = add <8 x i32> %1303, %11
  %1306 = sub <8 x i32> %1305, %1304
  %1307 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1306, i32 %5) #7
  %1308 = add <8 x i32> %1088, %940
  %1309 = sub <8 x i32> %940, %1088
  %1310 = sub <8 x i32> %941, %1098
  %1311 = add <8 x i32> %1098, %941
  %1312 = add <8 x i32> %1108, %944
  %1313 = sub <8 x i32> %944, %1108
  %1314 = sub <8 x i32> %945, %1118
  %1315 = add <8 x i32> %1118, %945
  %1316 = add <8 x i32> %1128, %948
  %1317 = sub <8 x i32> %948, %1128
  %1318 = sub <8 x i32> %949, %1138
  %1319 = add <8 x i32> %1138, %949
  %1320 = add <8 x i32> %1148, %952
  %1321 = sub <8 x i32> %952, %1148
  %1322 = sub <8 x i32> %953, %1158
  %1323 = add <8 x i32> %1158, %953
  %1324 = add <8 x i32> %1163, %956
  %1325 = sub <8 x i32> %956, %1163
  %1326 = sub <8 x i32> %957, %1153
  %1327 = add <8 x i32> %1153, %957
  %1328 = add <8 x i32> %1143, %960
  %1329 = sub <8 x i32> %960, %1143
  %1330 = sub <8 x i32> %961, %1133
  %1331 = add <8 x i32> %1133, %961
  %1332 = add <8 x i32> %1123, %964
  %1333 = sub <8 x i32> %964, %1123
  %1334 = sub <8 x i32> %965, %1113
  %1335 = add <8 x i32> %1113, %965
  %1336 = add <8 x i32> %1103, %968
  %1337 = sub <8 x i32> %968, %1103
  %1338 = sub <8 x i32> %969, %1093
  %1339 = add <8 x i32> %1093, %969
  %1340 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 63
  %1341 = load i32, i32* %1340, align 4
  %1342 = insertelement <8 x i32> undef, i32 %1341, i32 0
  %1343 = shufflevector <8 x i32> %1342, <8 x i32> undef, <8 x i32> zeroinitializer
  %1344 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 1
  %1345 = load i32, i32* %1344, align 4
  %1346 = insertelement <8 x i32> undef, i32 %1345, i32 0
  %1347 = shufflevector <8 x i32> %1346, <8 x i32> undef, <8 x i32> zeroinitializer
  %1348 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 31
  %1349 = load i32, i32* %1348, align 4
  %1350 = insertelement <8 x i32> undef, i32 %1349, i32 0
  %1351 = shufflevector <8 x i32> %1350, <8 x i32> undef, <8 x i32> zeroinitializer
  %1352 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 33
  %1353 = load i32, i32* %1352, align 4
  %1354 = insertelement <8 x i32> undef, i32 %1353, i32 0
  %1355 = shufflevector <8 x i32> %1354, <8 x i32> undef, <8 x i32> zeroinitializer
  %1356 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 47
  %1357 = load i32, i32* %1356, align 4
  %1358 = insertelement <8 x i32> undef, i32 %1357, i32 0
  %1359 = shufflevector <8 x i32> %1358, <8 x i32> undef, <8 x i32> zeroinitializer
  %1360 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 17
  %1361 = load i32, i32* %1360, align 4
  %1362 = insertelement <8 x i32> undef, i32 %1361, i32 0
  %1363 = shufflevector <8 x i32> %1362, <8 x i32> undef, <8 x i32> zeroinitializer
  %1364 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 15
  %1365 = load i32, i32* %1364, align 4
  %1366 = insertelement <8 x i32> undef, i32 %1365, i32 0
  %1367 = shufflevector <8 x i32> %1366, <8 x i32> undef, <8 x i32> zeroinitializer
  %1368 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 49
  %1369 = load i32, i32* %1368, align 4
  %1370 = insertelement <8 x i32> undef, i32 %1369, i32 0
  %1371 = shufflevector <8 x i32> %1370, <8 x i32> undef, <8 x i32> zeroinitializer
  %1372 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 55
  %1373 = load i32, i32* %1372, align 4
  %1374 = insertelement <8 x i32> undef, i32 %1373, i32 0
  %1375 = shufflevector <8 x i32> %1374, <8 x i32> undef, <8 x i32> zeroinitializer
  %1376 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 9
  %1377 = load i32, i32* %1376, align 4
  %1378 = insertelement <8 x i32> undef, i32 %1377, i32 0
  %1379 = shufflevector <8 x i32> %1378, <8 x i32> undef, <8 x i32> zeroinitializer
  %1380 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 23
  %1381 = load i32, i32* %1380, align 4
  %1382 = insertelement <8 x i32> undef, i32 %1381, i32 0
  %1383 = shufflevector <8 x i32> %1382, <8 x i32> undef, <8 x i32> zeroinitializer
  %1384 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 41
  %1385 = load i32, i32* %1384, align 4
  %1386 = insertelement <8 x i32> undef, i32 %1385, i32 0
  %1387 = shufflevector <8 x i32> %1386, <8 x i32> undef, <8 x i32> zeroinitializer
  %1388 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 39
  %1389 = load i32, i32* %1388, align 4
  %1390 = insertelement <8 x i32> undef, i32 %1389, i32 0
  %1391 = shufflevector <8 x i32> %1390, <8 x i32> undef, <8 x i32> zeroinitializer
  %1392 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 25
  %1393 = load i32, i32* %1392, align 4
  %1394 = insertelement <8 x i32> undef, i32 %1393, i32 0
  %1395 = shufflevector <8 x i32> %1394, <8 x i32> undef, <8 x i32> zeroinitializer
  %1396 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 7
  %1397 = load i32, i32* %1396, align 4
  %1398 = insertelement <8 x i32> undef, i32 %1397, i32 0
  %1399 = shufflevector <8 x i32> %1398, <8 x i32> undef, <8 x i32> zeroinitializer
  %1400 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 57
  %1401 = load i32, i32* %1400, align 4
  %1402 = insertelement <8 x i32> undef, i32 %1401, i32 0
  %1403 = shufflevector <8 x i32> %1402, <8 x i32> undef, <8 x i32> zeroinitializer
  %1404 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 59
  %1405 = load i32, i32* %1404, align 4
  %1406 = insertelement <8 x i32> undef, i32 %1405, i32 0
  %1407 = shufflevector <8 x i32> %1406, <8 x i32> undef, <8 x i32> zeroinitializer
  %1408 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 5
  %1409 = load i32, i32* %1408, align 4
  %1410 = insertelement <8 x i32> undef, i32 %1409, i32 0
  %1411 = shufflevector <8 x i32> %1410, <8 x i32> undef, <8 x i32> zeroinitializer
  %1412 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 27
  %1413 = load i32, i32* %1412, align 4
  %1414 = insertelement <8 x i32> undef, i32 %1413, i32 0
  %1415 = shufflevector <8 x i32> %1414, <8 x i32> undef, <8 x i32> zeroinitializer
  %1416 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 37
  %1417 = load i32, i32* %1416, align 4
  %1418 = insertelement <8 x i32> undef, i32 %1417, i32 0
  %1419 = shufflevector <8 x i32> %1418, <8 x i32> undef, <8 x i32> zeroinitializer
  %1420 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 43
  %1421 = load i32, i32* %1420, align 4
  %1422 = insertelement <8 x i32> undef, i32 %1421, i32 0
  %1423 = shufflevector <8 x i32> %1422, <8 x i32> undef, <8 x i32> zeroinitializer
  %1424 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 21
  %1425 = load i32, i32* %1424, align 4
  %1426 = insertelement <8 x i32> undef, i32 %1425, i32 0
  %1427 = shufflevector <8 x i32> %1426, <8 x i32> undef, <8 x i32> zeroinitializer
  %1428 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 11
  %1429 = load i32, i32* %1428, align 4
  %1430 = insertelement <8 x i32> undef, i32 %1429, i32 0
  %1431 = shufflevector <8 x i32> %1430, <8 x i32> undef, <8 x i32> zeroinitializer
  %1432 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 53
  %1433 = load i32, i32* %1432, align 4
  %1434 = insertelement <8 x i32> undef, i32 %1433, i32 0
  %1435 = shufflevector <8 x i32> %1434, <8 x i32> undef, <8 x i32> zeroinitializer
  %1436 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 51
  %1437 = load i32, i32* %1436, align 4
  %1438 = insertelement <8 x i32> undef, i32 %1437, i32 0
  %1439 = shufflevector <8 x i32> %1438, <8 x i32> undef, <8 x i32> zeroinitializer
  %1440 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 13
  %1441 = load i32, i32* %1440, align 4
  %1442 = insertelement <8 x i32> undef, i32 %1441, i32 0
  %1443 = shufflevector <8 x i32> %1442, <8 x i32> undef, <8 x i32> zeroinitializer
  %1444 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 19
  %1445 = load i32, i32* %1444, align 4
  %1446 = insertelement <8 x i32> undef, i32 %1445, i32 0
  %1447 = shufflevector <8 x i32> %1446, <8 x i32> undef, <8 x i32> zeroinitializer
  %1448 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 45
  %1449 = load i32, i32* %1448, align 4
  %1450 = insertelement <8 x i32> undef, i32 %1449, i32 0
  %1451 = shufflevector <8 x i32> %1450, <8 x i32> undef, <8 x i32> zeroinitializer
  %1452 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 35
  %1453 = load i32, i32* %1452, align 4
  %1454 = insertelement <8 x i32> undef, i32 %1453, i32 0
  %1455 = shufflevector <8 x i32> %1454, <8 x i32> undef, <8 x i32> zeroinitializer
  %1456 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 29
  %1457 = load i32, i32* %1456, align 4
  %1458 = insertelement <8 x i32> undef, i32 %1457, i32 0
  %1459 = shufflevector <8 x i32> %1458, <8 x i32> undef, <8 x i32> zeroinitializer
  %1460 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 3
  %1461 = load i32, i32* %1460, align 4
  %1462 = insertelement <8 x i32> undef, i32 %1461, i32 0
  %1463 = shufflevector <8 x i32> %1462, <8 x i32> undef, <8 x i32> zeroinitializer
  %1464 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %7, i64 61
  %1465 = load i32, i32* %1464, align 4
  %1466 = insertelement <8 x i32> undef, i32 %1465, i32 0
  %1467 = shufflevector <8 x i32> %1466, <8 x i32> undef, <8 x i32> zeroinitializer
  %1468 = mul <8 x i32> %1347, %1339
  %1469 = mul <8 x i32> %1343, %1308
  %1470 = add <8 x i32> %1469, %11
  %1471 = add <8 x i32> %1470, %1468
  %1472 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1471, i32 %5) #7
  %1473 = mul <8 x i32> %1343, %1339
  %1474 = mul <8 x i32> %1308, %1347
  %1475 = add <8 x i32> %1473, %11
  %1476 = sub <8 x i32> %1475, %1474
  %1477 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1476, i32 %5) #7
  %1478 = mul <8 x i32> %1355, %1338
  %1479 = mul <8 x i32> %1351, %1309
  %1480 = add <8 x i32> %1479, %11
  %1481 = add <8 x i32> %1480, %1478
  %1482 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1481, i32 %5) #7
  %1483 = mul <8 x i32> %1351, %1338
  %1484 = mul <8 x i32> %1309, %1355
  %1485 = add <8 x i32> %1483, %11
  %1486 = sub <8 x i32> %1485, %1484
  %1487 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1486, i32 %5) #7
  %1488 = mul <8 x i32> %1363, %1337
  %1489 = mul <8 x i32> %1359, %1310
  %1490 = add <8 x i32> %1489, %11
  %1491 = add <8 x i32> %1490, %1488
  %1492 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1491, i32 %5) #7
  %1493 = mul <8 x i32> %1359, %1337
  %1494 = mul <8 x i32> %1310, %1363
  %1495 = add <8 x i32> %1493, %11
  %1496 = sub <8 x i32> %1495, %1494
  %1497 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1496, i32 %5) #7
  %1498 = mul <8 x i32> %1371, %1336
  %1499 = mul <8 x i32> %1367, %1311
  %1500 = add <8 x i32> %1499, %11
  %1501 = add <8 x i32> %1500, %1498
  %1502 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1501, i32 %5) #7
  %1503 = mul <8 x i32> %1367, %1336
  %1504 = mul <8 x i32> %1311, %1371
  %1505 = add <8 x i32> %1503, %11
  %1506 = sub <8 x i32> %1505, %1504
  %1507 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1506, i32 %5) #7
  %1508 = mul <8 x i32> %1379, %1335
  %1509 = mul <8 x i32> %1375, %1312
  %1510 = add <8 x i32> %1509, %11
  %1511 = add <8 x i32> %1510, %1508
  %1512 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1511, i32 %5) #7
  %1513 = mul <8 x i32> %1375, %1335
  %1514 = mul <8 x i32> %1312, %1379
  %1515 = add <8 x i32> %1513, %11
  %1516 = sub <8 x i32> %1515, %1514
  %1517 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1516, i32 %5) #7
  %1518 = mul <8 x i32> %1387, %1334
  %1519 = mul <8 x i32> %1383, %1313
  %1520 = add <8 x i32> %1519, %11
  %1521 = add <8 x i32> %1520, %1518
  %1522 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1521, i32 %5) #7
  %1523 = mul <8 x i32> %1383, %1334
  %1524 = mul <8 x i32> %1313, %1387
  %1525 = add <8 x i32> %1523, %11
  %1526 = sub <8 x i32> %1525, %1524
  %1527 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1526, i32 %5) #7
  %1528 = mul <8 x i32> %1395, %1333
  %1529 = mul <8 x i32> %1391, %1314
  %1530 = add <8 x i32> %1529, %11
  %1531 = add <8 x i32> %1530, %1528
  %1532 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1531, i32 %5) #7
  %1533 = mul <8 x i32> %1391, %1333
  %1534 = mul <8 x i32> %1314, %1395
  %1535 = add <8 x i32> %1533, %11
  %1536 = sub <8 x i32> %1535, %1534
  %1537 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1536, i32 %5) #7
  %1538 = mul <8 x i32> %1403, %1332
  %1539 = mul <8 x i32> %1399, %1315
  %1540 = add <8 x i32> %1539, %11
  %1541 = add <8 x i32> %1540, %1538
  %1542 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1541, i32 %5) #7
  %1543 = mul <8 x i32> %1399, %1332
  %1544 = mul <8 x i32> %1315, %1403
  %1545 = add <8 x i32> %1543, %11
  %1546 = sub <8 x i32> %1545, %1544
  %1547 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1546, i32 %5) #7
  %1548 = mul <8 x i32> %1411, %1331
  %1549 = mul <8 x i32> %1407, %1316
  %1550 = add <8 x i32> %1549, %11
  %1551 = add <8 x i32> %1550, %1548
  %1552 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1551, i32 %5) #7
  %1553 = mul <8 x i32> %1407, %1331
  %1554 = mul <8 x i32> %1316, %1411
  %1555 = add <8 x i32> %1553, %11
  %1556 = sub <8 x i32> %1555, %1554
  %1557 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1556, i32 %5) #7
  %1558 = mul <8 x i32> %1419, %1330
  %1559 = mul <8 x i32> %1415, %1317
  %1560 = add <8 x i32> %1559, %11
  %1561 = add <8 x i32> %1560, %1558
  %1562 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1561, i32 %5) #7
  %1563 = mul <8 x i32> %1415, %1330
  %1564 = mul <8 x i32> %1317, %1419
  %1565 = add <8 x i32> %1563, %11
  %1566 = sub <8 x i32> %1565, %1564
  %1567 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1566, i32 %5) #7
  %1568 = mul <8 x i32> %1427, %1329
  %1569 = mul <8 x i32> %1423, %1318
  %1570 = add <8 x i32> %1569, %11
  %1571 = add <8 x i32> %1570, %1568
  %1572 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1571, i32 %5) #7
  %1573 = mul <8 x i32> %1423, %1329
  %1574 = mul <8 x i32> %1318, %1427
  %1575 = add <8 x i32> %1573, %11
  %1576 = sub <8 x i32> %1575, %1574
  %1577 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1576, i32 %5) #7
  %1578 = mul <8 x i32> %1435, %1328
  %1579 = mul <8 x i32> %1431, %1319
  %1580 = add <8 x i32> %1579, %11
  %1581 = add <8 x i32> %1580, %1578
  %1582 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1581, i32 %5) #7
  %1583 = mul <8 x i32> %1431, %1328
  %1584 = mul <8 x i32> %1319, %1435
  %1585 = add <8 x i32> %1583, %11
  %1586 = sub <8 x i32> %1585, %1584
  %1587 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1586, i32 %5) #7
  %1588 = mul <8 x i32> %1443, %1327
  %1589 = mul <8 x i32> %1439, %1320
  %1590 = add <8 x i32> %1589, %11
  %1591 = add <8 x i32> %1590, %1588
  %1592 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1591, i32 %5) #7
  %1593 = mul <8 x i32> %1439, %1327
  %1594 = mul <8 x i32> %1320, %1443
  %1595 = add <8 x i32> %1593, %11
  %1596 = sub <8 x i32> %1595, %1594
  %1597 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1596, i32 %5) #7
  %1598 = mul <8 x i32> %1451, %1326
  %1599 = mul <8 x i32> %1447, %1321
  %1600 = add <8 x i32> %1599, %11
  %1601 = add <8 x i32> %1600, %1598
  %1602 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1601, i32 %5) #7
  %1603 = mul <8 x i32> %1447, %1326
  %1604 = mul <8 x i32> %1321, %1451
  %1605 = add <8 x i32> %1603, %11
  %1606 = sub <8 x i32> %1605, %1604
  %1607 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1606, i32 %5) #7
  %1608 = mul <8 x i32> %1459, %1325
  %1609 = mul <8 x i32> %1455, %1322
  %1610 = add <8 x i32> %1609, %11
  %1611 = add <8 x i32> %1610, %1608
  %1612 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1611, i32 %5) #7
  %1613 = mul <8 x i32> %1455, %1325
  %1614 = mul <8 x i32> %1322, %1459
  %1615 = add <8 x i32> %1613, %11
  %1616 = sub <8 x i32> %1615, %1614
  %1617 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1616, i32 %5) #7
  %1618 = mul <8 x i32> %1467, %1324
  %1619 = mul <8 x i32> %1463, %1323
  %1620 = add <8 x i32> %1619, %11
  %1621 = add <8 x i32> %1620, %1618
  %1622 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1621, i32 %5) #7
  %1623 = mul <8 x i32> %1463, %1324
  %1624 = mul <8 x i32> %1323, %1467
  %1625 = add <8 x i32> %1623, %11
  %1626 = sub <8 x i32> %1625, %1624
  %1627 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1626, i32 %5) #7
  %1628 = mul nsw i32 %3, 63
  %1629 = bitcast <4 x i64>* %1 to <8 x i32>*
  store <8 x i32> %737, <8 x i32>* %1629, align 32
  %1630 = sext i32 %1628 to i64
  %1631 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1630
  %1632 = bitcast <4 x i64>* %1631 to <8 x i32>*
  store <8 x i32> %1477, <8 x i32>* %1632, align 32
  %1633 = mul i32 %3, 62
  %1634 = sext i32 %3 to i64
  %1635 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1634
  %1636 = bitcast <4 x i64>* %1635 to <8 x i32>*
  store <8 x i32> %1472, <8 x i32>* %1636, align 32
  %1637 = sext i32 %1633 to i64
  %1638 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1637
  %1639 = bitcast <4 x i64>* %1638 to <8 x i32>*
  store <8 x i32> %1237, <8 x i32>* %1639, align 32
  %1640 = shl nsw i32 %3, 1
  %1641 = mul i32 %3, 61
  %1642 = sext i32 %1640 to i64
  %1643 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1642
  %1644 = bitcast <4 x i64>* %1643 to <8 x i32>*
  store <8 x i32> %1232, <8 x i32>* %1644, align 32
  %1645 = sext i32 %1641 to i64
  %1646 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1645
  %1647 = bitcast <4 x i64>* %1646 to <8 x i32>*
  store <8 x i32> %1622, <8 x i32>* %1647, align 32
  %1648 = mul nsw i32 %3, 3
  %1649 = mul i32 %3, 60
  %1650 = sext i32 %1648 to i64
  %1651 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1650
  %1652 = bitcast <4 x i64>* %1651 to <8 x i32>*
  store <8 x i32> %1627, <8 x i32>* %1652, align 32
  %1653 = sext i32 %1649 to i64
  %1654 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1653
  %1655 = bitcast <4 x i64>* %1654 to <8 x i32>*
  store <8 x i32> %1037, <8 x i32>* %1655, align 32
  %1656 = shl nsw i32 %3, 2
  %1657 = mul i32 %3, 59
  %1658 = sext i32 %1656 to i64
  %1659 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1658
  %1660 = bitcast <4 x i64>* %1659 to <8 x i32>*
  store <8 x i32> %1032, <8 x i32>* %1660, align 32
  %1661 = sext i32 %1657 to i64
  %1662 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1661
  %1663 = bitcast <4 x i64>* %1662 to <8 x i32>*
  store <8 x i32> %1557, <8 x i32>* %1663, align 32
  %1664 = mul nsw i32 %3, 5
  %1665 = mul i32 %3, 58
  %1666 = sext i32 %1664 to i64
  %1667 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1666
  %1668 = bitcast <4 x i64>* %1667 to <8 x i32>*
  store <8 x i32> %1552, <8 x i32>* %1668, align 32
  %1669 = sext i32 %1665 to i64
  %1670 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1669
  %1671 = bitcast <4 x i64>* %1670 to <8 x i32>*
  store <8 x i32> %1302, <8 x i32>* %1671, align 32
  %1672 = mul nsw i32 %3, 6
  %1673 = mul i32 %3, 57
  %1674 = sext i32 %1672 to i64
  %1675 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1674
  %1676 = bitcast <4 x i64>* %1675 to <8 x i32>*
  store <8 x i32> %1307, <8 x i32>* %1676, align 32
  %1677 = sext i32 %1673 to i64
  %1678 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1677
  %1679 = bitcast <4 x i64>* %1678 to <8 x i32>*
  store <8 x i32> %1542, <8 x i32>* %1679, align 32
  %1680 = mul nsw i32 %3, 7
  %1681 = mul i32 %3, 56
  %1682 = sext i32 %1680 to i64
  %1683 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1682
  %1684 = bitcast <4 x i64>* %1683 to <8 x i32>*
  store <8 x i32> %1547, <8 x i32>* %1684, align 32
  %1685 = sext i32 %1681 to i64
  %1686 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1685
  %1687 = bitcast <4 x i64>* %1686 to <8 x i32>*
  store <8 x i32> %881, <8 x i32>* %1687, align 32
  %1688 = shl nsw i32 %3, 3
  %1689 = mul i32 %3, 55
  %1690 = sext i32 %1688 to i64
  %1691 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1690
  %1692 = bitcast <4 x i64>* %1691 to <8 x i32>*
  store <8 x i32> %876, <8 x i32>* %1692, align 32
  %1693 = sext i32 %1689 to i64
  %1694 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1693
  %1695 = bitcast <4 x i64>* %1694 to <8 x i32>*
  store <8 x i32> %1517, <8 x i32>* %1695, align 32
  %1696 = mul nsw i32 %3, 9
  %1697 = mul i32 %3, 54
  %1698 = sext i32 %1696 to i64
  %1699 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1698
  %1700 = bitcast <4 x i64>* %1699 to <8 x i32>*
  store <8 x i32> %1512, <8 x i32>* %1700, align 32
  %1701 = sext i32 %1697 to i64
  %1702 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1701
  %1703 = bitcast <4 x i64>* %1702 to <8 x i32>*
  store <8 x i32> %1277, <8 x i32>* %1703, align 32
  %1704 = mul nsw i32 %3, 10
  %1705 = mul i32 %3, 53
  %1706 = sext i32 %1704 to i64
  %1707 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1706
  %1708 = bitcast <4 x i64>* %1707 to <8 x i32>*
  store <8 x i32> %1272, <8 x i32>* %1708, align 32
  %1709 = sext i32 %1705 to i64
  %1710 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1709
  %1711 = bitcast <4 x i64>* %1710 to <8 x i32>*
  store <8 x i32> %1582, <8 x i32>* %1711, align 32
  %1712 = mul nsw i32 %3, 11
  %1713 = mul i32 %3, 52
  %1714 = sext i32 %1712 to i64
  %1715 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1714
  %1716 = bitcast <4 x i64>* %1715 to <8 x i32>*
  store <8 x i32> %1587, <8 x i32>* %1716, align 32
  %1717 = sext i32 %1713 to i64
  %1718 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1717
  %1719 = bitcast <4 x i64>* %1718 to <8 x i32>*
  store <8 x i32> %1062, <8 x i32>* %1719, align 32
  %1720 = mul nsw i32 %3, 12
  %1721 = mul i32 %3, 51
  %1722 = sext i32 %1720 to i64
  %1723 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1722
  %1724 = bitcast <4 x i64>* %1723 to <8 x i32>*
  store <8 x i32> %1067, <8 x i32>* %1724, align 32
  %1725 = sext i32 %1721 to i64
  %1726 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1725
  %1727 = bitcast <4 x i64>* %1726 to <8 x i32>*
  store <8 x i32> %1597, <8 x i32>* %1727, align 32
  %1728 = mul nsw i32 %3, 13
  %1729 = mul i32 %3, 50
  %1730 = sext i32 %1728 to i64
  %1731 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1730
  %1732 = bitcast <4 x i64>* %1731 to <8 x i32>*
  store <8 x i32> %1592, <8 x i32>* %1732, align 32
  %1733 = sext i32 %1729 to i64
  %1734 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1733
  %1735 = bitcast <4 x i64>* %1734 to <8 x i32>*
  store <8 x i32> %1262, <8 x i32>* %1735, align 32
  %1736 = mul nsw i32 %3, 14
  %1737 = mul i32 %3, 49
  %1738 = sext i32 %1736 to i64
  %1739 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1738
  %1740 = bitcast <4 x i64>* %1739 to <8 x i32>*
  store <8 x i32> %1267, <8 x i32>* %1740, align 32
  %1741 = sext i32 %1737 to i64
  %1742 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1741
  %1743 = bitcast <4 x i64>* %1742 to <8 x i32>*
  store <8 x i32> %1502, <8 x i32>* %1743, align 32
  %1744 = mul nsw i32 %3, 15
  %1745 = mul i32 %3, 48
  %1746 = sext i32 %1744 to i64
  %1747 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1746
  %1748 = bitcast <4 x i64>* %1747 to <8 x i32>*
  store <8 x i32> %1507, <8 x i32>* %1748, align 32
  %1749 = sext i32 %1745 to i64
  %1750 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1749
  %1751 = bitcast <4 x i64>* %1750 to <8 x i32>*
  store <8 x i32> %751, <8 x i32>* %1751, align 32
  %1752 = shl nsw i32 %3, 4
  %1753 = mul i32 %3, 47
  %1754 = sext i32 %1752 to i64
  %1755 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1754
  %1756 = bitcast <4 x i64>* %1755 to <8 x i32>*
  store <8 x i32> %746, <8 x i32>* %1756, align 32
  %1757 = sext i32 %1753 to i64
  %1758 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1757
  %1759 = bitcast <4 x i64>* %1758 to <8 x i32>*
  store <8 x i32> %1497, <8 x i32>* %1759, align 32
  %1760 = mul nsw i32 %3, 17
  %1761 = mul i32 %3, 46
  %1762 = sext i32 %1760 to i64
  %1763 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1762
  %1764 = bitcast <4 x i64>* %1763 to <8 x i32>*
  store <8 x i32> %1492, <8 x i32>* %1764, align 32
  %1765 = sext i32 %1761 to i64
  %1766 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1765
  %1767 = bitcast <4 x i64>* %1766 to <8 x i32>*
  store <8 x i32> %1257, <8 x i32>* %1767, align 32
  %1768 = mul nsw i32 %3, 18
  %1769 = mul i32 %3, 45
  %1770 = sext i32 %1768 to i64
  %1771 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1770
  %1772 = bitcast <4 x i64>* %1771 to <8 x i32>*
  store <8 x i32> %1252, <8 x i32>* %1772, align 32
  %1773 = sext i32 %1769 to i64
  %1774 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1773
  %1775 = bitcast <4 x i64>* %1774 to <8 x i32>*
  store <8 x i32> %1602, <8 x i32>* %1775, align 32
  %1776 = mul nsw i32 %3, 19
  %1777 = mul i32 %3, 44
  %1778 = sext i32 %1776 to i64
  %1779 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1778
  %1780 = bitcast <4 x i64>* %1779 to <8 x i32>*
  store <8 x i32> %1607, <8 x i32>* %1780, align 32
  %1781 = sext i32 %1777 to i64
  %1782 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1781
  %1783 = bitcast <4 x i64>* %1782 to <8 x i32>*
  store <8 x i32> %1057, <8 x i32>* %1783, align 32
  %1784 = mul nsw i32 %3, 20
  %1785 = mul i32 %3, 43
  %1786 = sext i32 %1784 to i64
  %1787 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1786
  %1788 = bitcast <4 x i64>* %1787 to <8 x i32>*
  store <8 x i32> %1052, <8 x i32>* %1788, align 32
  %1789 = sext i32 %1785 to i64
  %1790 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1789
  %1791 = bitcast <4 x i64>* %1790 to <8 x i32>*
  store <8 x i32> %1577, <8 x i32>* %1791, align 32
  %1792 = mul nsw i32 %3, 21
  %1793 = mul i32 %3, 42
  %1794 = sext i32 %1792 to i64
  %1795 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1794
  %1796 = bitcast <4 x i64>* %1795 to <8 x i32>*
  store <8 x i32> %1572, <8 x i32>* %1796, align 32
  %1797 = sext i32 %1793 to i64
  %1798 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1797
  %1799 = bitcast <4 x i64>* %1798 to <8 x i32>*
  store <8 x i32> %1282, <8 x i32>* %1799, align 32
  %1800 = mul nsw i32 %3, 22
  %1801 = mul i32 %3, 41
  %1802 = sext i32 %1800 to i64
  %1803 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1802
  %1804 = bitcast <4 x i64>* %1803 to <8 x i32>*
  store <8 x i32> %1287, <8 x i32>* %1804, align 32
  %1805 = sext i32 %1801 to i64
  %1806 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1805
  %1807 = bitcast <4 x i64>* %1806 to <8 x i32>*
  store <8 x i32> %1522, <8 x i32>* %1807, align 32
  %1808 = mul nsw i32 %3, 23
  %1809 = mul i32 %3, 40
  %1810 = sext i32 %1808 to i64
  %1811 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1810
  %1812 = bitcast <4 x i64>* %1811 to <8 x i32>*
  store <8 x i32> %1527, <8 x i32>* %1812, align 32
  %1813 = sext i32 %1809 to i64
  %1814 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1813
  %1815 = bitcast <4 x i64>* %1814 to <8 x i32>*
  store <8 x i32> %886, <8 x i32>* %1815, align 32
  %1816 = mul nsw i32 %3, 24
  %1817 = mul i32 %3, 39
  %1818 = sext i32 %1816 to i64
  %1819 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1818
  %1820 = bitcast <4 x i64>* %1819 to <8 x i32>*
  store <8 x i32> %891, <8 x i32>* %1820, align 32
  %1821 = sext i32 %1817 to i64
  %1822 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1821
  %1823 = bitcast <4 x i64>* %1822 to <8 x i32>*
  store <8 x i32> %1537, <8 x i32>* %1823, align 32
  %1824 = mul nsw i32 %3, 25
  %1825 = mul i32 %3, 38
  %1826 = sext i32 %1824 to i64
  %1827 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1826
  %1828 = bitcast <4 x i64>* %1827 to <8 x i32>*
  store <8 x i32> %1532, <8 x i32>* %1828, align 32
  %1829 = sext i32 %1825 to i64
  %1830 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1829
  %1831 = bitcast <4 x i64>* %1830 to <8 x i32>*
  store <8 x i32> %1297, <8 x i32>* %1831, align 32
  %1832 = mul nsw i32 %3, 26
  %1833 = mul i32 %3, 37
  %1834 = sext i32 %1832 to i64
  %1835 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1834
  %1836 = bitcast <4 x i64>* %1835 to <8 x i32>*
  store <8 x i32> %1292, <8 x i32>* %1836, align 32
  %1837 = sext i32 %1833 to i64
  %1838 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1837
  %1839 = bitcast <4 x i64>* %1838 to <8 x i32>*
  store <8 x i32> %1562, <8 x i32>* %1839, align 32
  %1840 = mul nsw i32 %3, 27
  %1841 = mul i32 %3, 36
  %1842 = sext i32 %1840 to i64
  %1843 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1842
  %1844 = bitcast <4 x i64>* %1843 to <8 x i32>*
  store <8 x i32> %1567, <8 x i32>* %1844, align 32
  %1845 = sext i32 %1841 to i64
  %1846 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1845
  %1847 = bitcast <4 x i64>* %1846 to <8 x i32>*
  store <8 x i32> %1042, <8 x i32>* %1847, align 32
  %1848 = mul nsw i32 %3, 28
  %1849 = mul i32 %3, 35
  %1850 = sext i32 %1848 to i64
  %1851 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1850
  %1852 = bitcast <4 x i64>* %1851 to <8 x i32>*
  store <8 x i32> %1047, <8 x i32>* %1852, align 32
  %1853 = sext i32 %1849 to i64
  %1854 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1853
  %1855 = bitcast <4 x i64>* %1854 to <8 x i32>*
  store <8 x i32> %1617, <8 x i32>* %1855, align 32
  %1856 = mul nsw i32 %3, 29
  %1857 = mul i32 %3, 34
  %1858 = sext i32 %1856 to i64
  %1859 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1858
  %1860 = bitcast <4 x i64>* %1859 to <8 x i32>*
  store <8 x i32> %1612, <8 x i32>* %1860, align 32
  %1861 = sext i32 %1857 to i64
  %1862 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1861
  %1863 = bitcast <4 x i64>* %1862 to <8 x i32>*
  store <8 x i32> %1242, <8 x i32>* %1863, align 32
  %1864 = mul nsw i32 %3, 30
  %1865 = mul i32 %3, 33
  %1866 = sext i32 %1864 to i64
  %1867 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1866
  %1868 = bitcast <4 x i64>* %1867 to <8 x i32>*
  store <8 x i32> %1247, <8 x i32>* %1868, align 32
  %1869 = sext i32 %1865 to i64
  %1870 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1869
  %1871 = bitcast <4 x i64>* %1870 to <8 x i32>*
  store <8 x i32> %1482, <8 x i32>* %1871, align 32
  %1872 = mul nsw i32 %3, 31
  %1873 = shl i32 %3, 5
  %1874 = sext i32 %1872 to i64
  %1875 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1874
  %1876 = bitcast <4 x i64>* %1875 to <8 x i32>*
  store <8 x i32> %1487, <8 x i32>* %1876, align 32
  %1877 = sext i32 %1873 to i64
  %1878 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1877
  %1879 = bitcast <4 x i64>* %1878 to <8 x i32>*
  store <8 x i32> %741, <8 x i32>* %1879, align 32
  ret void
}

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32>, i32) #4

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32>, i32) #4

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @fdct32_avx2(<4 x i64>* readonly, <4 x i64>*, i8 signext, i32, i32) #5 {
  %6 = alloca [32 x <4 x i64>], align 32
  %7 = bitcast [32 x <4 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %7) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %7, i8 -86, i64 1024, i1 false)
  %8 = mul nsw i32 %3, 31
  %9 = bitcast <4 x i64>* %0 to <8 x i32>*
  %10 = load <8 x i32>, <8 x i32>* %9, align 32
  %11 = sext i32 %8 to i64
  %12 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %11
  %13 = bitcast <4 x i64>* %12 to <8 x i32>*
  %14 = load <8 x i32>, <8 x i32>* %13, align 32
  %15 = add <8 x i32> %14, %10
  %16 = sub <8 x i32> %10, %14
  %17 = mul i32 %3, 30
  %18 = sext i32 %3 to i64
  %19 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %18
  %20 = bitcast <4 x i64>* %19 to <8 x i32>*
  %21 = load <8 x i32>, <8 x i32>* %20, align 32
  %22 = sext i32 %17 to i64
  %23 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %22
  %24 = bitcast <4 x i64>* %23 to <8 x i32>*
  %25 = load <8 x i32>, <8 x i32>* %24, align 32
  %26 = add <8 x i32> %25, %21
  %27 = sub <8 x i32> %21, %25
  %28 = shl nsw i32 %3, 1
  %29 = mul i32 %3, 29
  %30 = sext i32 %28 to i64
  %31 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %30
  %32 = bitcast <4 x i64>* %31 to <8 x i32>*
  %33 = load <8 x i32>, <8 x i32>* %32, align 32
  %34 = sext i32 %29 to i64
  %35 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %34
  %36 = bitcast <4 x i64>* %35 to <8 x i32>*
  %37 = load <8 x i32>, <8 x i32>* %36, align 32
  %38 = add <8 x i32> %37, %33
  %39 = sub <8 x i32> %33, %37
  %40 = mul nsw i32 %3, 3
  %41 = mul i32 %3, 28
  %42 = sext i32 %40 to i64
  %43 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %42
  %44 = bitcast <4 x i64>* %43 to <8 x i32>*
  %45 = load <8 x i32>, <8 x i32>* %44, align 32
  %46 = sext i32 %41 to i64
  %47 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %46
  %48 = bitcast <4 x i64>* %47 to <8 x i32>*
  %49 = load <8 x i32>, <8 x i32>* %48, align 32
  %50 = add <8 x i32> %49, %45
  %51 = sub <8 x i32> %45, %49
  %52 = shl nsw i32 %3, 2
  %53 = mul i32 %3, 27
  %54 = sext i32 %52 to i64
  %55 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %54
  %56 = bitcast <4 x i64>* %55 to <8 x i32>*
  %57 = load <8 x i32>, <8 x i32>* %56, align 32
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %58
  %60 = bitcast <4 x i64>* %59 to <8 x i32>*
  %61 = load <8 x i32>, <8 x i32>* %60, align 32
  %62 = add <8 x i32> %61, %57
  %63 = sub <8 x i32> %57, %61
  %64 = mul nsw i32 %3, 5
  %65 = mul i32 %3, 26
  %66 = sext i32 %64 to i64
  %67 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %66
  %68 = bitcast <4 x i64>* %67 to <8 x i32>*
  %69 = load <8 x i32>, <8 x i32>* %68, align 32
  %70 = sext i32 %65 to i64
  %71 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %70
  %72 = bitcast <4 x i64>* %71 to <8 x i32>*
  %73 = load <8 x i32>, <8 x i32>* %72, align 32
  %74 = add <8 x i32> %73, %69
  %75 = sub <8 x i32> %69, %73
  %76 = mul nsw i32 %3, 6
  %77 = mul i32 %3, 25
  %78 = sext i32 %76 to i64
  %79 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %78
  %80 = bitcast <4 x i64>* %79 to <8 x i32>*
  %81 = load <8 x i32>, <8 x i32>* %80, align 32
  %82 = sext i32 %77 to i64
  %83 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %82
  %84 = bitcast <4 x i64>* %83 to <8 x i32>*
  %85 = load <8 x i32>, <8 x i32>* %84, align 32
  %86 = add <8 x i32> %85, %81
  %87 = sub <8 x i32> %81, %85
  %88 = mul nsw i32 %3, 7
  %89 = mul i32 %3, 24
  %90 = sext i32 %88 to i64
  %91 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %90
  %92 = bitcast <4 x i64>* %91 to <8 x i32>*
  %93 = load <8 x i32>, <8 x i32>* %92, align 32
  %94 = sext i32 %89 to i64
  %95 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %94
  %96 = bitcast <4 x i64>* %95 to <8 x i32>*
  %97 = load <8 x i32>, <8 x i32>* %96, align 32
  %98 = add <8 x i32> %97, %93
  %99 = sub <8 x i32> %93, %97
  %100 = shl nsw i32 %3, 3
  %101 = mul i32 %3, 23
  %102 = sext i32 %100 to i64
  %103 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %102
  %104 = bitcast <4 x i64>* %103 to <8 x i32>*
  %105 = load <8 x i32>, <8 x i32>* %104, align 32
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %106
  %108 = bitcast <4 x i64>* %107 to <8 x i32>*
  %109 = load <8 x i32>, <8 x i32>* %108, align 32
  %110 = add <8 x i32> %109, %105
  %111 = sub <8 x i32> %105, %109
  %112 = mul nsw i32 %3, 9
  %113 = mul i32 %3, 22
  %114 = sext i32 %112 to i64
  %115 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %114
  %116 = bitcast <4 x i64>* %115 to <8 x i32>*
  %117 = load <8 x i32>, <8 x i32>* %116, align 32
  %118 = sext i32 %113 to i64
  %119 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %118
  %120 = bitcast <4 x i64>* %119 to <8 x i32>*
  %121 = load <8 x i32>, <8 x i32>* %120, align 32
  %122 = add <8 x i32> %121, %117
  %123 = sub <8 x i32> %117, %121
  %124 = mul nsw i32 %3, 10
  %125 = mul i32 %3, 21
  %126 = sext i32 %124 to i64
  %127 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %126
  %128 = bitcast <4 x i64>* %127 to <8 x i32>*
  %129 = load <8 x i32>, <8 x i32>* %128, align 32
  %130 = sext i32 %125 to i64
  %131 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %130
  %132 = bitcast <4 x i64>* %131 to <8 x i32>*
  %133 = load <8 x i32>, <8 x i32>* %132, align 32
  %134 = add <8 x i32> %133, %129
  %135 = sub <8 x i32> %129, %133
  %136 = mul nsw i32 %3, 11
  %137 = mul i32 %3, 20
  %138 = sext i32 %136 to i64
  %139 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %138
  %140 = bitcast <4 x i64>* %139 to <8 x i32>*
  %141 = load <8 x i32>, <8 x i32>* %140, align 32
  %142 = sext i32 %137 to i64
  %143 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %142
  %144 = bitcast <4 x i64>* %143 to <8 x i32>*
  %145 = load <8 x i32>, <8 x i32>* %144, align 32
  %146 = add <8 x i32> %145, %141
  %147 = sub <8 x i32> %141, %145
  %148 = mul nsw i32 %3, 12
  %149 = mul i32 %3, 19
  %150 = sext i32 %148 to i64
  %151 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %150
  %152 = bitcast <4 x i64>* %151 to <8 x i32>*
  %153 = load <8 x i32>, <8 x i32>* %152, align 32
  %154 = sext i32 %149 to i64
  %155 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %154
  %156 = bitcast <4 x i64>* %155 to <8 x i32>*
  %157 = load <8 x i32>, <8 x i32>* %156, align 32
  %158 = add <8 x i32> %157, %153
  %159 = sub <8 x i32> %153, %157
  %160 = mul nsw i32 %3, 13
  %161 = mul i32 %3, 18
  %162 = sext i32 %160 to i64
  %163 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %162
  %164 = bitcast <4 x i64>* %163 to <8 x i32>*
  %165 = load <8 x i32>, <8 x i32>* %164, align 32
  %166 = sext i32 %161 to i64
  %167 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %166
  %168 = bitcast <4 x i64>* %167 to <8 x i32>*
  %169 = load <8 x i32>, <8 x i32>* %168, align 32
  %170 = add <8 x i32> %169, %165
  %171 = sub <8 x i32> %165, %169
  %172 = mul nsw i32 %3, 14
  %173 = mul i32 %3, 17
  %174 = sext i32 %172 to i64
  %175 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %174
  %176 = bitcast <4 x i64>* %175 to <8 x i32>*
  %177 = load <8 x i32>, <8 x i32>* %176, align 32
  %178 = sext i32 %173 to i64
  %179 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %178
  %180 = bitcast <4 x i64>* %179 to <8 x i32>*
  %181 = load <8 x i32>, <8 x i32>* %180, align 32
  %182 = add <8 x i32> %181, %177
  %183 = sub <8 x i32> %177, %181
  %184 = mul nsw i32 %3, 15
  %185 = shl i32 %3, 4
  %186 = sext i32 %184 to i64
  %187 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %186
  %188 = bitcast <4 x i64>* %187 to <8 x i32>*
  %189 = load <8 x i32>, <8 x i32>* %188, align 32
  %190 = sext i32 %185 to i64
  %191 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %190
  %192 = bitcast <4 x i64>* %191 to <8 x i32>*
  %193 = load <8 x i32>, <8 x i32>* %192, align 32
  %194 = add <8 x i32> %193, %189
  %195 = sub <8 x i32> %189, %193
  %196 = sext i8 %2 to i32
  %197 = add nsw i32 %196, -10
  %198 = sext i32 %197 to i64
  %199 = add <8 x i32> %194, %15
  %200 = bitcast [32 x <4 x i64>]* %6 to <8 x i32>*
  store <8 x i32> %199, <8 x i32>* %200, align 32
  %201 = sub <8 x i32> %15, %194
  %202 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 15
  %203 = bitcast <4 x i64>* %202 to <8 x i32>*
  store <8 x i32> %201, <8 x i32>* %203, align 32
  %204 = add <8 x i32> %182, %26
  %205 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 1
  %206 = bitcast <4 x i64>* %205 to <8 x i32>*
  store <8 x i32> %204, <8 x i32>* %206, align 32
  %207 = sub <8 x i32> %26, %182
  %208 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 14
  %209 = bitcast <4 x i64>* %208 to <8 x i32>*
  store <8 x i32> %207, <8 x i32>* %209, align 32
  %210 = add <8 x i32> %170, %38
  %211 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 2
  %212 = bitcast <4 x i64>* %211 to <8 x i32>*
  store <8 x i32> %210, <8 x i32>* %212, align 32
  %213 = sub <8 x i32> %38, %170
  %214 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 13
  %215 = bitcast <4 x i64>* %214 to <8 x i32>*
  store <8 x i32> %213, <8 x i32>* %215, align 32
  %216 = add <8 x i32> %158, %50
  %217 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 3
  %218 = bitcast <4 x i64>* %217 to <8 x i32>*
  store <8 x i32> %216, <8 x i32>* %218, align 32
  %219 = sub <8 x i32> %50, %158
  %220 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 12
  %221 = bitcast <4 x i64>* %220 to <8 x i32>*
  store <8 x i32> %219, <8 x i32>* %221, align 32
  %222 = add <8 x i32> %146, %62
  %223 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 4
  %224 = bitcast <4 x i64>* %223 to <8 x i32>*
  store <8 x i32> %222, <8 x i32>* %224, align 32
  %225 = sub <8 x i32> %62, %146
  %226 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 11
  %227 = bitcast <4 x i64>* %226 to <8 x i32>*
  store <8 x i32> %225, <8 x i32>* %227, align 32
  %228 = add <8 x i32> %134, %74
  %229 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 5
  %230 = bitcast <4 x i64>* %229 to <8 x i32>*
  store <8 x i32> %228, <8 x i32>* %230, align 32
  %231 = sub <8 x i32> %74, %134
  %232 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 10
  %233 = bitcast <4 x i64>* %232 to <8 x i32>*
  store <8 x i32> %231, <8 x i32>* %233, align 32
  %234 = add <8 x i32> %122, %86
  %235 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 6
  %236 = bitcast <4 x i64>* %235 to <8 x i32>*
  store <8 x i32> %234, <8 x i32>* %236, align 32
  %237 = sub <8 x i32> %86, %122
  %238 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 9
  %239 = bitcast <4 x i64>* %238 to <8 x i32>*
  store <8 x i32> %237, <8 x i32>* %239, align 32
  %240 = add <8 x i32> %110, %98
  %241 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 7
  %242 = bitcast <4 x i64>* %241 to <8 x i32>*
  store <8 x i32> %240, <8 x i32>* %242, align 32
  %243 = sub <8 x i32> %98, %110
  %244 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 8
  %245 = bitcast <4 x i64>* %244 to <8 x i32>*
  store <8 x i32> %243, <8 x i32>* %245, align 32
  %246 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 16
  %247 = bitcast <4 x i64>* %246 to <8 x i32>*
  store <8 x i32> %195, <8 x i32>* %247, align 32
  %248 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 17
  %249 = bitcast <4 x i64>* %248 to <8 x i32>*
  store <8 x i32> %183, <8 x i32>* %249, align 32
  %250 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 18
  %251 = bitcast <4 x i64>* %250 to <8 x i32>*
  store <8 x i32> %171, <8 x i32>* %251, align 32
  %252 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 19
  %253 = bitcast <4 x i64>* %252 to <8 x i32>*
  store <8 x i32> %159, <8 x i32>* %253, align 32
  %254 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %198, i64 32
  %255 = load i32, i32* %254, align 16
  %256 = sub nsw i32 0, %255
  %257 = insertelement <8 x i32> undef, i32 %256, i32 0
  %258 = shufflevector <8 x i32> %257, <8 x i32> undef, <8 x i32> zeroinitializer
  %259 = insertelement <8 x i32> undef, i32 %255, i32 0
  %260 = shufflevector <8 x i32> %259, <8 x i32> undef, <8 x i32> zeroinitializer
  %261 = mul <8 x i32> %258, %147
  %262 = mul <8 x i32> %260, %63
  %263 = add <8 x i32> %262, %261
  %264 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 20
  %265 = bitcast <4 x i64>* %264 to <8 x i32>*
  store <8 x i32> %263, <8 x i32>* %265, align 32
  %266 = sub nsw i32 0, %196
  %267 = icmp sgt i8 %2, 0
  br i1 %267, label %306, label %268

268:                                              ; preds = %5
  %269 = icmp eq i8 %2, 0
  br i1 %269, label %270, label %390

270:                                              ; preds = %268
  %271 = mul <8 x i32> %260, %147
  %272 = mul <8 x i32> %258, %63
  %273 = sub <8 x i32> %271, %272
  %274 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 27
  %275 = bitcast <4 x i64>* %274 to <8 x i32>*
  store <8 x i32> %273, <8 x i32>* %275, align 32
  %276 = mul <8 x i32> %258, %135
  %277 = mul <8 x i32> %260, %75
  %278 = add <8 x i32> %277, %276
  %279 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 21
  %280 = bitcast <4 x i64>* %279 to <8 x i32>*
  store <8 x i32> %278, <8 x i32>* %280, align 32
  %281 = mul <8 x i32> %260, %135
  %282 = mul <8 x i32> %258, %75
  %283 = sub <8 x i32> %281, %282
  %284 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 26
  %285 = bitcast <4 x i64>* %284 to <8 x i32>*
  store <8 x i32> %283, <8 x i32>* %285, align 32
  %286 = mul <8 x i32> %258, %123
  %287 = mul <8 x i32> %260, %87
  %288 = add <8 x i32> %287, %286
  %289 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 22
  %290 = bitcast <4 x i64>* %289 to <8 x i32>*
  store <8 x i32> %288, <8 x i32>* %290, align 32
  %291 = mul <8 x i32> %260, %123
  %292 = mul <8 x i32> %258, %87
  %293 = sub <8 x i32> %291, %292
  %294 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 25
  %295 = bitcast <4 x i64>* %294 to <8 x i32>*
  store <8 x i32> %293, <8 x i32>* %295, align 32
  %296 = mul <8 x i32> %258, %111
  %297 = mul <8 x i32> %260, %99
  %298 = add <8 x i32> %297, %296
  %299 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 23
  %300 = bitcast <4 x i64>* %299 to <8 x i32>*
  store <8 x i32> %298, <8 x i32>* %300, align 32
  %301 = mul <8 x i32> %260, %111
  %302 = mul <8 x i32> %258, %99
  %303 = sub <8 x i32> %301, %302
  %304 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 24
  %305 = bitcast <4 x i64>* %304 to <8 x i32>*
  store <8 x i32> %303, <8 x i32>* %305, align 32
  br label %434

306:                                              ; preds = %5
  %307 = add nsw i32 %196, -1
  %308 = shl i32 1, %307
  %309 = insertelement <8 x i32> undef, i32 %308, i32 0
  %310 = shufflevector <8 x i32> %309, <8 x i32> undef, <8 x i32> zeroinitializer
  %311 = add <8 x i32> %263, %310
  %312 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %311, i32 %196) #7
  store <8 x i32> %312, <8 x i32>* %265, align 32
  %313 = mul <8 x i32> %260, %147
  %314 = mul <8 x i32> %258, %63
  %315 = sub <8 x i32> %313, %314
  %316 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 27
  %317 = bitcast <4 x i64>* %316 to <8 x i32>*
  %318 = add nsw i32 %196, -1
  %319 = shl i32 1, %318
  %320 = insertelement <8 x i32> undef, i32 %319, i32 0
  %321 = shufflevector <8 x i32> %320, <8 x i32> undef, <8 x i32> zeroinitializer
  %322 = add <8 x i32> %315, %321
  %323 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %322, i32 %196) #7
  store <8 x i32> %323, <8 x i32>* %317, align 32
  %324 = mul <8 x i32> %258, %135
  %325 = mul <8 x i32> %260, %75
  %326 = add <8 x i32> %325, %324
  %327 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 21
  %328 = bitcast <4 x i64>* %327 to <8 x i32>*
  %329 = add nsw i32 %196, -1
  %330 = shl i32 1, %329
  %331 = insertelement <8 x i32> undef, i32 %330, i32 0
  %332 = shufflevector <8 x i32> %331, <8 x i32> undef, <8 x i32> zeroinitializer
  %333 = add <8 x i32> %326, %332
  %334 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %333, i32 %196) #7
  store <8 x i32> %334, <8 x i32>* %328, align 32
  %335 = mul <8 x i32> %260, %135
  %336 = mul <8 x i32> %258, %75
  %337 = sub <8 x i32> %335, %336
  %338 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 26
  %339 = bitcast <4 x i64>* %338 to <8 x i32>*
  %340 = add nsw i32 %196, -1
  %341 = shl i32 1, %340
  %342 = insertelement <8 x i32> undef, i32 %341, i32 0
  %343 = shufflevector <8 x i32> %342, <8 x i32> undef, <8 x i32> zeroinitializer
  %344 = add <8 x i32> %337, %343
  %345 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %344, i32 %196) #7
  store <8 x i32> %345, <8 x i32>* %339, align 32
  %346 = mul <8 x i32> %258, %123
  %347 = mul <8 x i32> %260, %87
  %348 = add <8 x i32> %347, %346
  %349 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 22
  %350 = bitcast <4 x i64>* %349 to <8 x i32>*
  %351 = add nsw i32 %196, -1
  %352 = shl i32 1, %351
  %353 = insertelement <8 x i32> undef, i32 %352, i32 0
  %354 = shufflevector <8 x i32> %353, <8 x i32> undef, <8 x i32> zeroinitializer
  %355 = add <8 x i32> %348, %354
  %356 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %355, i32 %196) #7
  store <8 x i32> %356, <8 x i32>* %350, align 32
  %357 = mul <8 x i32> %260, %123
  %358 = mul <8 x i32> %258, %87
  %359 = sub <8 x i32> %357, %358
  %360 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 25
  %361 = bitcast <4 x i64>* %360 to <8 x i32>*
  %362 = add nsw i32 %196, -1
  %363 = shl i32 1, %362
  %364 = insertelement <8 x i32> undef, i32 %363, i32 0
  %365 = shufflevector <8 x i32> %364, <8 x i32> undef, <8 x i32> zeroinitializer
  %366 = add <8 x i32> %359, %365
  %367 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %366, i32 %196) #7
  store <8 x i32> %367, <8 x i32>* %361, align 32
  %368 = mul <8 x i32> %258, %111
  %369 = mul <8 x i32> %260, %99
  %370 = add <8 x i32> %369, %368
  %371 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 23
  %372 = bitcast <4 x i64>* %371 to <8 x i32>*
  %373 = add nsw i32 %196, -1
  %374 = shl i32 1, %373
  %375 = insertelement <8 x i32> undef, i32 %374, i32 0
  %376 = shufflevector <8 x i32> %375, <8 x i32> undef, <8 x i32> zeroinitializer
  %377 = add <8 x i32> %370, %376
  %378 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %377, i32 %196) #7
  store <8 x i32> %378, <8 x i32>* %372, align 32
  %379 = mul <8 x i32> %260, %111
  %380 = mul <8 x i32> %258, %99
  %381 = sub <8 x i32> %379, %380
  %382 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 24
  %383 = bitcast <4 x i64>* %382 to <8 x i32>*
  %384 = add nsw i32 %196, -1
  %385 = shl i32 1, %384
  %386 = insertelement <8 x i32> undef, i32 %385, i32 0
  %387 = shufflevector <8 x i32> %386, <8 x i32> undef, <8 x i32> zeroinitializer
  %388 = add <8 x i32> %381, %387
  %389 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %388, i32 %196) #7
  store <8 x i32> %389, <8 x i32>* %383, align 32
  br label %434

390:                                              ; preds = %268
  %391 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %263, i32 %266) #7
  store <8 x i32> %391, <8 x i32>* %265, align 32
  %392 = mul <8 x i32> %260, %147
  %393 = mul <8 x i32> %258, %63
  %394 = sub <8 x i32> %392, %393
  %395 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 27
  %396 = bitcast <4 x i64>* %395 to <8 x i32>*
  %397 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %394, i32 %266) #7
  store <8 x i32> %397, <8 x i32>* %396, align 32
  %398 = mul <8 x i32> %258, %135
  %399 = mul <8 x i32> %260, %75
  %400 = add <8 x i32> %399, %398
  %401 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 21
  %402 = bitcast <4 x i64>* %401 to <8 x i32>*
  %403 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %400, i32 %266) #7
  store <8 x i32> %403, <8 x i32>* %402, align 32
  %404 = mul <8 x i32> %260, %135
  %405 = mul <8 x i32> %258, %75
  %406 = sub <8 x i32> %404, %405
  %407 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 26
  %408 = bitcast <4 x i64>* %407 to <8 x i32>*
  %409 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %406, i32 %266) #7
  store <8 x i32> %409, <8 x i32>* %408, align 32
  %410 = mul <8 x i32> %258, %123
  %411 = mul <8 x i32> %260, %87
  %412 = add <8 x i32> %411, %410
  %413 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 22
  %414 = bitcast <4 x i64>* %413 to <8 x i32>*
  %415 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %412, i32 %266) #7
  store <8 x i32> %415, <8 x i32>* %414, align 32
  %416 = mul <8 x i32> %260, %123
  %417 = mul <8 x i32> %258, %87
  %418 = sub <8 x i32> %416, %417
  %419 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 25
  %420 = bitcast <4 x i64>* %419 to <8 x i32>*
  %421 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %418, i32 %266) #7
  store <8 x i32> %421, <8 x i32>* %420, align 32
  %422 = mul <8 x i32> %258, %111
  %423 = mul <8 x i32> %260, %99
  %424 = add <8 x i32> %423, %422
  %425 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 23
  %426 = bitcast <4 x i64>* %425 to <8 x i32>*
  %427 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %424, i32 %266) #7
  store <8 x i32> %427, <8 x i32>* %426, align 32
  %428 = mul <8 x i32> %260, %111
  %429 = mul <8 x i32> %258, %99
  %430 = sub <8 x i32> %428, %429
  %431 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 24
  %432 = bitcast <4 x i64>* %431 to <8 x i32>*
  %433 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %430, i32 %266) #7
  store <8 x i32> %433, <8 x i32>* %432, align 32
  br label %434

434:                                              ; preds = %270, %390, %306
  %435 = phi <8 x i32>* [ %432, %390 ], [ %383, %306 ], [ %305, %270 ]
  %436 = phi <8 x i32> [ %427, %390 ], [ %378, %306 ], [ %298, %270 ]
  %437 = phi <8 x i32>* [ %420, %390 ], [ %361, %306 ], [ %295, %270 ]
  %438 = phi <8 x i32> [ %415, %390 ], [ %356, %306 ], [ %288, %270 ]
  %439 = phi <8 x i32>* [ %408, %390 ], [ %339, %306 ], [ %285, %270 ]
  %440 = phi <8 x i32> [ %403, %390 ], [ %334, %306 ], [ %278, %270 ]
  %441 = phi <8 x i32>* [ %396, %390 ], [ %317, %306 ], [ %275, %270 ]
  %442 = phi <8 x i32> [ %391, %390 ], [ %312, %306 ], [ %263, %270 ]
  %443 = phi <8 x i32> [ %397, %390 ], [ %323, %306 ], [ %273, %270 ]
  %444 = phi <8 x i32>* [ %402, %390 ], [ %328, %306 ], [ %280, %270 ]
  %445 = phi <8 x i32> [ %409, %390 ], [ %345, %306 ], [ %283, %270 ]
  %446 = phi <4 x i64>* [ %413, %390 ], [ %349, %306 ], [ %289, %270 ]
  %447 = phi <8 x i32>* [ %414, %390 ], [ %350, %306 ], [ %290, %270 ]
  %448 = phi <8 x i32> [ %421, %390 ], [ %367, %306 ], [ %293, %270 ]
  %449 = phi <8 x i32>* [ %426, %390 ], [ %372, %306 ], [ %300, %270 ]
  %450 = phi <8 x i32> [ %433, %390 ], [ %389, %306 ], [ %303, %270 ]
  %451 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 28
  %452 = bitcast <4 x i64>* %451 to <8 x i32>*
  store <8 x i32> %51, <8 x i32>* %452, align 32
  %453 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 29
  %454 = bitcast <4 x i64>* %453 to <8 x i32>*
  store <8 x i32> %39, <8 x i32>* %454, align 32
  %455 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 30
  %456 = bitcast <4 x i64>* %455 to <8 x i32>*
  store <8 x i32> %27, <8 x i32>* %456, align 32
  %457 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %6, i64 0, i64 31
  %458 = bitcast <4 x i64>* %457 to <8 x i32>*
  store <8 x i32> %16, <8 x i32>* %458, align 32
  %459 = add <8 x i32> %199, %240
  %460 = sub <8 x i32> %199, %240
  %461 = add <8 x i32> %204, %234
  %462 = sub <8 x i32> %204, %234
  %463 = add <8 x i32> %210, %228
  %464 = sub <8 x i32> %210, %228
  %465 = add <8 x i32> %216, %222
  %466 = sub <8 x i32> %216, %222
  %467 = mul <8 x i32> %258, %231
  %468 = mul <8 x i32> %260, %213
  %469 = add <8 x i32> %468, %467
  br i1 %267, label %482, label %470

470:                                              ; preds = %434
  %471 = icmp eq i8 %2, 0
  br i1 %471, label %472, label %516

472:                                              ; preds = %470
  %473 = mul <8 x i32> %260, %231
  %474 = mul <8 x i32> %258, %213
  %475 = sub <8 x i32> %473, %474
  %476 = mul <8 x i32> %258, %225
  %477 = mul <8 x i32> %260, %219
  %478 = add <8 x i32> %477, %476
  %479 = mul <8 x i32> %260, %225
  %480 = mul <8 x i32> %258, %219
  %481 = sub <8 x i32> %479, %480
  br label %530

482:                                              ; preds = %434
  %483 = add nsw i32 %196, -1
  %484 = shl i32 1, %483
  %485 = insertelement <8 x i32> undef, i32 %484, i32 0
  %486 = shufflevector <8 x i32> %485, <8 x i32> undef, <8 x i32> zeroinitializer
  %487 = add <8 x i32> %469, %486
  %488 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %487, i32 %196) #7
  %489 = mul <8 x i32> %260, %231
  %490 = mul <8 x i32> %258, %213
  %491 = sub <8 x i32> %489, %490
  %492 = add nsw i32 %196, -1
  %493 = shl i32 1, %492
  %494 = insertelement <8 x i32> undef, i32 %493, i32 0
  %495 = shufflevector <8 x i32> %494, <8 x i32> undef, <8 x i32> zeroinitializer
  %496 = add <8 x i32> %491, %495
  %497 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %496, i32 %196) #7
  %498 = mul <8 x i32> %258, %225
  %499 = mul <8 x i32> %260, %219
  %500 = add <8 x i32> %499, %498
  %501 = add nsw i32 %196, -1
  %502 = shl i32 1, %501
  %503 = insertelement <8 x i32> undef, i32 %502, i32 0
  %504 = shufflevector <8 x i32> %503, <8 x i32> undef, <8 x i32> zeroinitializer
  %505 = add <8 x i32> %500, %504
  %506 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %505, i32 %196) #7
  %507 = mul <8 x i32> %260, %225
  %508 = mul <8 x i32> %258, %219
  %509 = sub <8 x i32> %507, %508
  %510 = add nsw i32 %196, -1
  %511 = shl i32 1, %510
  %512 = insertelement <8 x i32> undef, i32 %511, i32 0
  %513 = shufflevector <8 x i32> %512, <8 x i32> undef, <8 x i32> zeroinitializer
  %514 = add <8 x i32> %509, %513
  %515 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %514, i32 %196) #7
  br label %530

516:                                              ; preds = %470
  %517 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %469, i32 %266) #7
  %518 = mul <8 x i32> %260, %231
  %519 = mul <8 x i32> %258, %213
  %520 = sub <8 x i32> %518, %519
  %521 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %520, i32 %266) #7
  %522 = mul <8 x i32> %258, %225
  %523 = mul <8 x i32> %260, %219
  %524 = add <8 x i32> %523, %522
  %525 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %524, i32 %266) #7
  %526 = mul <8 x i32> %260, %225
  %527 = mul <8 x i32> %258, %219
  %528 = sub <8 x i32> %526, %527
  %529 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %528, i32 %266) #7
  br label %530

530:                                              ; preds = %472, %516, %482
  %531 = phi <8 x i32> [ %525, %516 ], [ %506, %482 ], [ %478, %472 ]
  %532 = phi <8 x i32> [ %517, %516 ], [ %488, %482 ], [ %469, %472 ]
  %533 = phi <8 x i32> [ %521, %516 ], [ %497, %482 ], [ %475, %472 ]
  %534 = phi <8 x i32> [ %529, %516 ], [ %515, %482 ], [ %481, %472 ]
  %535 = add <8 x i32> %436, %195
  %536 = sub <8 x i32> %195, %436
  %537 = add <8 x i32> %438, %183
  %538 = sub <8 x i32> %183, %438
  %539 = add <8 x i32> %440, %171
  %540 = sub <8 x i32> %171, %440
  %541 = add <8 x i32> %442, %159
  %542 = sub <8 x i32> %159, %442
  %543 = sub <8 x i32> %16, %450
  %544 = add <8 x i32> %450, %16
  %545 = sub <8 x i32> %27, %448
  %546 = add <8 x i32> %448, %27
  %547 = sub <8 x i32> %39, %445
  %548 = add <8 x i32> %445, %39
  %549 = sub <8 x i32> %51, %443
  %550 = add <8 x i32> %443, %51
  %551 = add <8 x i32> %459, %465
  store <8 x i32> %551, <8 x i32>* %200, align 32
  %552 = sub <8 x i32> %459, %465
  store <8 x i32> %552, <8 x i32>* %218, align 32
  %553 = add <8 x i32> %461, %463
  store <8 x i32> %553, <8 x i32>* %206, align 32
  %554 = sub <8 x i32> %461, %463
  store <8 x i32> %554, <8 x i32>* %212, align 32
  store <8 x i32> %466, <8 x i32>* %224, align 32
  %555 = mul <8 x i32> %258, %464
  %556 = mul <8 x i32> %260, %462
  %557 = add <8 x i32> %556, %555
  store <8 x i32> %557, <8 x i32>* %230, align 32
  br i1 %267, label %564, label %558

558:                                              ; preds = %530
  %559 = icmp eq i8 %2, 0
  br i1 %559, label %560, label %580

560:                                              ; preds = %558
  %561 = mul <8 x i32> %260, %464
  %562 = mul <8 x i32> %258, %462
  %563 = sub <8 x i32> %561, %562
  br label %586

564:                                              ; preds = %530
  %565 = add nsw i32 %196, -1
  %566 = shl i32 1, %565
  %567 = insertelement <8 x i32> undef, i32 %566, i32 0
  %568 = shufflevector <8 x i32> %567, <8 x i32> undef, <8 x i32> zeroinitializer
  %569 = add <8 x i32> %557, %568
  %570 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %569, i32 %196) #7
  store <8 x i32> %570, <8 x i32>* %230, align 32
  %571 = mul <8 x i32> %260, %464
  %572 = mul <8 x i32> %258, %462
  %573 = sub <8 x i32> %571, %572
  %574 = add nsw i32 %196, -1
  %575 = shl i32 1, %574
  %576 = insertelement <8 x i32> undef, i32 %575, i32 0
  %577 = shufflevector <8 x i32> %576, <8 x i32> undef, <8 x i32> zeroinitializer
  %578 = add <8 x i32> %573, %577
  %579 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %578, i32 %196) #7
  br label %586

580:                                              ; preds = %558
  %581 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %557, i32 %266) #7
  store <8 x i32> %581, <8 x i32>* %230, align 32
  %582 = mul <8 x i32> %260, %464
  %583 = mul <8 x i32> %258, %462
  %584 = sub <8 x i32> %582, %583
  %585 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %584, i32 %266) #7
  br label %586

586:                                              ; preds = %560, %580, %564
  %587 = phi <8 x i32> [ %563, %560 ], [ %585, %580 ], [ %579, %564 ]
  %588 = phi <8 x i32> [ %557, %560 ], [ %581, %580 ], [ %570, %564 ]
  store <8 x i32> %587, <8 x i32>* %236, align 32
  store <8 x i32> %460, <8 x i32>* %242, align 32
  %589 = add <8 x i32> %531, %243
  store <8 x i32> %589, <8 x i32>* %245, align 32
  %590 = sub <8 x i32> %243, %531
  store <8 x i32> %590, <8 x i32>* %227, align 32
  %591 = add <8 x i32> %532, %237
  store <8 x i32> %591, <8 x i32>* %239, align 32
  %592 = sub <8 x i32> %237, %532
  store <8 x i32> %592, <8 x i32>* %233, align 32
  %593 = sub <8 x i32> %201, %534
  store <8 x i32> %593, <8 x i32>* %221, align 32
  %594 = add <8 x i32> %534, %201
  store <8 x i32> %594, <8 x i32>* %203, align 32
  %595 = sub <8 x i32> %207, %533
  store <8 x i32> %595, <8 x i32>* %215, align 32
  %596 = add <8 x i32> %533, %207
  store <8 x i32> %596, <8 x i32>* %209, align 32
  store <8 x i32> %535, <8 x i32>* %247, align 32
  store <8 x i32> %537, <8 x i32>* %249, align 32
  %597 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %198, i64 16
  %598 = load i32, i32* %597, align 16
  %599 = sub nsw i32 0, %598
  %600 = insertelement <8 x i32> undef, i32 %599, i32 0
  %601 = shufflevector <8 x i32> %600, <8 x i32> undef, <8 x i32> zeroinitializer
  %602 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %198, i64 48
  %603 = load i32, i32* %602, align 16
  %604 = insertelement <8 x i32> undef, i32 %603, i32 0
  %605 = shufflevector <8 x i32> %604, <8 x i32> undef, <8 x i32> zeroinitializer
  %606 = mul <8 x i32> %601, %539
  %607 = mul <8 x i32> %605, %548
  %608 = add <8 x i32> %607, %606
  store <8 x i32> %608, <8 x i32>* %251, align 32
  br i1 %267, label %621, label %609

609:                                              ; preds = %586
  %610 = icmp eq i8 %2, 0
  br i1 %610, label %611, label %655

611:                                              ; preds = %609
  %612 = mul <8 x i32> %605, %539
  %613 = mul <8 x i32> %601, %548
  %614 = sub <8 x i32> %612, %613
  store <8 x i32> %614, <8 x i32>* %454, align 32
  %615 = mul <8 x i32> %601, %541
  %616 = mul <8 x i32> %605, %550
  %617 = add <8 x i32> %616, %615
  store <8 x i32> %617, <8 x i32>* %253, align 32
  %618 = mul <8 x i32> %605, %541
  %619 = mul <8 x i32> %601, %550
  %620 = sub <8 x i32> %618, %619
  br label %669

621:                                              ; preds = %586
  %622 = add nsw i32 %196, -1
  %623 = shl i32 1, %622
  %624 = insertelement <8 x i32> undef, i32 %623, i32 0
  %625 = shufflevector <8 x i32> %624, <8 x i32> undef, <8 x i32> zeroinitializer
  %626 = add <8 x i32> %608, %625
  %627 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %626, i32 %196) #7
  store <8 x i32> %627, <8 x i32>* %251, align 32
  %628 = mul <8 x i32> %605, %539
  %629 = mul <8 x i32> %601, %548
  %630 = sub <8 x i32> %628, %629
  %631 = add nsw i32 %196, -1
  %632 = shl i32 1, %631
  %633 = insertelement <8 x i32> undef, i32 %632, i32 0
  %634 = shufflevector <8 x i32> %633, <8 x i32> undef, <8 x i32> zeroinitializer
  %635 = add <8 x i32> %630, %634
  %636 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %635, i32 %196) #7
  store <8 x i32> %636, <8 x i32>* %454, align 32
  %637 = mul <8 x i32> %601, %541
  %638 = mul <8 x i32> %605, %550
  %639 = add <8 x i32> %638, %637
  %640 = add nsw i32 %196, -1
  %641 = shl i32 1, %640
  %642 = insertelement <8 x i32> undef, i32 %641, i32 0
  %643 = shufflevector <8 x i32> %642, <8 x i32> undef, <8 x i32> zeroinitializer
  %644 = add <8 x i32> %639, %643
  %645 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %644, i32 %196) #7
  store <8 x i32> %645, <8 x i32>* %253, align 32
  %646 = mul <8 x i32> %605, %541
  %647 = mul <8 x i32> %601, %550
  %648 = sub <8 x i32> %646, %647
  %649 = add nsw i32 %196, -1
  %650 = shl i32 1, %649
  %651 = insertelement <8 x i32> undef, i32 %650, i32 0
  %652 = shufflevector <8 x i32> %651, <8 x i32> undef, <8 x i32> zeroinitializer
  %653 = add <8 x i32> %648, %652
  %654 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %653, i32 %196) #7
  br label %669

655:                                              ; preds = %609
  %656 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %608, i32 %266) #7
  store <8 x i32> %656, <8 x i32>* %251, align 32
  %657 = mul <8 x i32> %605, %539
  %658 = mul <8 x i32> %601, %548
  %659 = sub <8 x i32> %657, %658
  %660 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %659, i32 %266) #7
  store <8 x i32> %660, <8 x i32>* %454, align 32
  %661 = mul <8 x i32> %601, %541
  %662 = mul <8 x i32> %605, %550
  %663 = add <8 x i32> %662, %661
  %664 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %663, i32 %266) #7
  store <8 x i32> %664, <8 x i32>* %253, align 32
  %665 = mul <8 x i32> %605, %541
  %666 = mul <8 x i32> %601, %550
  %667 = sub <8 x i32> %665, %666
  %668 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %667, i32 %266) #7
  br label %669

669:                                              ; preds = %611, %655, %621
  %670 = phi <8 x i32> [ %620, %611 ], [ %668, %655 ], [ %654, %621 ]
  %671 = phi <8 x i32> [ %617, %611 ], [ %664, %655 ], [ %645, %621 ]
  %672 = phi <8 x i32> [ %608, %611 ], [ %656, %655 ], [ %627, %621 ]
  %673 = phi <8 x i32> [ %614, %611 ], [ %660, %655 ], [ %636, %621 ]
  store <8 x i32> %670, <8 x i32>* %452, align 32
  %674 = sub nsw i32 0, %603
  %675 = insertelement <8 x i32> undef, i32 %674, i32 0
  %676 = shufflevector <8 x i32> %675, <8 x i32> undef, <8 x i32> zeroinitializer
  %677 = mul <8 x i32> %676, %542
  %678 = mul <8 x i32> %601, %549
  %679 = add <8 x i32> %677, %678
  store <8 x i32> %679, <8 x i32>* %265, align 32
  br i1 %267, label %692, label %680

680:                                              ; preds = %669
  %681 = icmp eq i8 %2, 0
  br i1 %681, label %682, label %726

682:                                              ; preds = %680
  %683 = mul <8 x i32> %601, %542
  %684 = mul <8 x i32> %676, %549
  %685 = sub <8 x i32> %683, %684
  store <8 x i32> %685, <8 x i32>* %441, align 32
  %686 = mul <8 x i32> %676, %540
  %687 = mul <8 x i32> %601, %547
  %688 = add <8 x i32> %686, %687
  store <8 x i32> %688, <8 x i32>* %444, align 32
  %689 = mul <8 x i32> %601, %540
  %690 = mul <8 x i32> %676, %547
  %691 = sub <8 x i32> %689, %690
  br label %740

692:                                              ; preds = %669
  %693 = add nsw i32 %196, -1
  %694 = shl i32 1, %693
  %695 = insertelement <8 x i32> undef, i32 %694, i32 0
  %696 = shufflevector <8 x i32> %695, <8 x i32> undef, <8 x i32> zeroinitializer
  %697 = add <8 x i32> %679, %696
  %698 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %697, i32 %196) #7
  store <8 x i32> %698, <8 x i32>* %265, align 32
  %699 = mul <8 x i32> %601, %542
  %700 = mul <8 x i32> %676, %549
  %701 = sub <8 x i32> %699, %700
  %702 = add nsw i32 %196, -1
  %703 = shl i32 1, %702
  %704 = insertelement <8 x i32> undef, i32 %703, i32 0
  %705 = shufflevector <8 x i32> %704, <8 x i32> undef, <8 x i32> zeroinitializer
  %706 = add <8 x i32> %701, %705
  %707 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %706, i32 %196) #7
  store <8 x i32> %707, <8 x i32>* %441, align 32
  %708 = mul <8 x i32> %676, %540
  %709 = mul <8 x i32> %601, %547
  %710 = add <8 x i32> %708, %709
  %711 = add nsw i32 %196, -1
  %712 = shl i32 1, %711
  %713 = insertelement <8 x i32> undef, i32 %712, i32 0
  %714 = shufflevector <8 x i32> %713, <8 x i32> undef, <8 x i32> zeroinitializer
  %715 = add <8 x i32> %710, %714
  %716 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %715, i32 %196) #7
  store <8 x i32> %716, <8 x i32>* %444, align 32
  %717 = mul <8 x i32> %601, %540
  %718 = mul <8 x i32> %676, %547
  %719 = sub <8 x i32> %717, %718
  %720 = add nsw i32 %196, -1
  %721 = shl i32 1, %720
  %722 = insertelement <8 x i32> undef, i32 %721, i32 0
  %723 = shufflevector <8 x i32> %722, <8 x i32> undef, <8 x i32> zeroinitializer
  %724 = add <8 x i32> %719, %723
  %725 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %724, i32 %196) #7
  br label %740

726:                                              ; preds = %680
  %727 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %679, i32 %266) #7
  store <8 x i32> %727, <8 x i32>* %265, align 32
  %728 = mul <8 x i32> %601, %542
  %729 = mul <8 x i32> %676, %549
  %730 = sub <8 x i32> %728, %729
  %731 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %730, i32 %266) #7
  store <8 x i32> %731, <8 x i32>* %441, align 32
  %732 = mul <8 x i32> %676, %540
  %733 = mul <8 x i32> %601, %547
  %734 = add <8 x i32> %732, %733
  %735 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %734, i32 %266) #7
  store <8 x i32> %735, <8 x i32>* %444, align 32
  %736 = mul <8 x i32> %601, %540
  %737 = mul <8 x i32> %676, %547
  %738 = sub <8 x i32> %736, %737
  %739 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %738, i32 %266) #7
  br label %740

740:                                              ; preds = %682, %726, %692
  %741 = phi <8 x i32> [ %691, %682 ], [ %739, %726 ], [ %725, %692 ]
  %742 = phi <8 x i32> [ %688, %682 ], [ %735, %726 ], [ %716, %692 ]
  %743 = phi <8 x i32> [ %679, %682 ], [ %727, %726 ], [ %698, %692 ]
  %744 = phi <8 x i32> [ %685, %682 ], [ %731, %726 ], [ %707, %692 ]
  store <8 x i32> %741, <8 x i32>* %439, align 32
  store <8 x i32> %538, <8 x i32>* %447, align 32
  store <8 x i32> %536, <8 x i32>* %449, align 32
  store <8 x i32> %543, <8 x i32>* %435, align 32
  store <8 x i32> %545, <8 x i32>* %437, align 32
  store <8 x i32> %546, <8 x i32>* %456, align 32
  store <8 x i32> %544, <8 x i32>* %458, align 32
  %745 = mul <8 x i32> %260, %551
  %746 = mul <8 x i32> %260, %553
  %747 = add <8 x i32> %746, %745
  br i1 %267, label %760, label %748

748:                                              ; preds = %740
  %749 = icmp eq i8 %2, 0
  br i1 %749, label %750, label %794

750:                                              ; preds = %748
  %751 = sub <8 x i32> %745, %746
  %752 = insertelement <8 x i32> undef, i32 %598, i32 0
  %753 = shufflevector <8 x i32> %752, <8 x i32> undef, <8 x i32> zeroinitializer
  %754 = mul <8 x i32> %753, %552
  %755 = mul <8 x i32> %605, %554
  %756 = add <8 x i32> %755, %754
  %757 = mul <8 x i32> %605, %552
  %758 = mul <8 x i32> %753, %554
  %759 = sub <8 x i32> %757, %758
  br label %808

760:                                              ; preds = %740
  %761 = add nsw i32 %196, -1
  %762 = shl i32 1, %761
  %763 = insertelement <8 x i32> undef, i32 %762, i32 0
  %764 = shufflevector <8 x i32> %763, <8 x i32> undef, <8 x i32> zeroinitializer
  %765 = add <8 x i32> %747, %764
  %766 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %765, i32 %196) #7
  %767 = sub <8 x i32> %745, %746
  %768 = add nsw i32 %196, -1
  %769 = shl i32 1, %768
  %770 = insertelement <8 x i32> undef, i32 %769, i32 0
  %771 = shufflevector <8 x i32> %770, <8 x i32> undef, <8 x i32> zeroinitializer
  %772 = add <8 x i32> %767, %771
  %773 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %772, i32 %196) #7
  %774 = insertelement <8 x i32> undef, i32 %598, i32 0
  %775 = shufflevector <8 x i32> %774, <8 x i32> undef, <8 x i32> zeroinitializer
  %776 = mul <8 x i32> %775, %552
  %777 = mul <8 x i32> %605, %554
  %778 = add <8 x i32> %777, %776
  %779 = add nsw i32 %196, -1
  %780 = shl i32 1, %779
  %781 = insertelement <8 x i32> undef, i32 %780, i32 0
  %782 = shufflevector <8 x i32> %781, <8 x i32> undef, <8 x i32> zeroinitializer
  %783 = add <8 x i32> %778, %782
  %784 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %783, i32 %196) #7
  %785 = mul <8 x i32> %605, %552
  %786 = mul <8 x i32> %775, %554
  %787 = sub <8 x i32> %785, %786
  %788 = add nsw i32 %196, -1
  %789 = shl i32 1, %788
  %790 = insertelement <8 x i32> undef, i32 %789, i32 0
  %791 = shufflevector <8 x i32> %790, <8 x i32> undef, <8 x i32> zeroinitializer
  %792 = add <8 x i32> %787, %791
  %793 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %792, i32 %196) #7
  br label %808

794:                                              ; preds = %748
  %795 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %747, i32 %266) #7
  %796 = sub <8 x i32> %745, %746
  %797 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %796, i32 %266) #7
  %798 = insertelement <8 x i32> undef, i32 %598, i32 0
  %799 = shufflevector <8 x i32> %798, <8 x i32> undef, <8 x i32> zeroinitializer
  %800 = mul <8 x i32> %799, %552
  %801 = mul <8 x i32> %605, %554
  %802 = add <8 x i32> %801, %800
  %803 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %802, i32 %266) #7
  %804 = mul <8 x i32> %605, %552
  %805 = mul <8 x i32> %799, %554
  %806 = sub <8 x i32> %804, %805
  %807 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %806, i32 %266) #7
  br label %808

808:                                              ; preds = %750, %794, %760
  %809 = phi <8 x i32> [ %803, %794 ], [ %784, %760 ], [ %756, %750 ]
  %810 = phi <8 x i32> [ %797, %794 ], [ %773, %760 ], [ %751, %750 ]
  %811 = phi <8 x i32> [ %795, %794 ], [ %766, %760 ], [ %747, %750 ]
  %812 = phi <8 x i32> [ %807, %794 ], [ %793, %760 ], [ %759, %750 ]
  %813 = add <8 x i32> %588, %466
  %814 = sub <8 x i32> %466, %588
  %815 = sub <8 x i32> %460, %587
  %816 = add <8 x i32> %587, %460
  %817 = mul <8 x i32> %601, %591
  %818 = mul <8 x i32> %605, %596
  %819 = add <8 x i32> %818, %817
  br i1 %267, label %832, label %820

820:                                              ; preds = %808
  %821 = icmp eq i8 %2, 0
  br i1 %821, label %822, label %866

822:                                              ; preds = %820
  %823 = mul <8 x i32> %605, %591
  %824 = mul <8 x i32> %601, %596
  %825 = sub <8 x i32> %823, %824
  %826 = mul <8 x i32> %676, %592
  %827 = mul <8 x i32> %601, %595
  %828 = add <8 x i32> %826, %827
  %829 = mul <8 x i32> %601, %592
  %830 = mul <8 x i32> %676, %595
  %831 = sub <8 x i32> %829, %830
  br label %880

832:                                              ; preds = %808
  %833 = add nsw i32 %196, -1
  %834 = shl i32 1, %833
  %835 = insertelement <8 x i32> undef, i32 %834, i32 0
  %836 = shufflevector <8 x i32> %835, <8 x i32> undef, <8 x i32> zeroinitializer
  %837 = add <8 x i32> %819, %836
  %838 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %837, i32 %196) #7
  %839 = mul <8 x i32> %605, %591
  %840 = mul <8 x i32> %601, %596
  %841 = sub <8 x i32> %839, %840
  %842 = add nsw i32 %196, -1
  %843 = shl i32 1, %842
  %844 = insertelement <8 x i32> undef, i32 %843, i32 0
  %845 = shufflevector <8 x i32> %844, <8 x i32> undef, <8 x i32> zeroinitializer
  %846 = add <8 x i32> %841, %845
  %847 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %846, i32 %196) #7
  %848 = mul <8 x i32> %676, %592
  %849 = mul <8 x i32> %601, %595
  %850 = add <8 x i32> %848, %849
  %851 = add nsw i32 %196, -1
  %852 = shl i32 1, %851
  %853 = insertelement <8 x i32> undef, i32 %852, i32 0
  %854 = shufflevector <8 x i32> %853, <8 x i32> undef, <8 x i32> zeroinitializer
  %855 = add <8 x i32> %850, %854
  %856 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %855, i32 %196) #7
  %857 = mul <8 x i32> %601, %592
  %858 = mul <8 x i32> %676, %595
  %859 = sub <8 x i32> %857, %858
  %860 = add nsw i32 %196, -1
  %861 = shl i32 1, %860
  %862 = insertelement <8 x i32> undef, i32 %861, i32 0
  %863 = shufflevector <8 x i32> %862, <8 x i32> undef, <8 x i32> zeroinitializer
  %864 = add <8 x i32> %859, %863
  %865 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %864, i32 %196) #7
  br label %880

866:                                              ; preds = %820
  %867 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %819, i32 %266) #7
  %868 = mul <8 x i32> %605, %591
  %869 = mul <8 x i32> %601, %596
  %870 = sub <8 x i32> %868, %869
  %871 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %870, i32 %266) #7
  %872 = mul <8 x i32> %676, %592
  %873 = mul <8 x i32> %601, %595
  %874 = add <8 x i32> %872, %873
  %875 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %874, i32 %266) #7
  %876 = mul <8 x i32> %601, %592
  %877 = mul <8 x i32> %676, %595
  %878 = sub <8 x i32> %876, %877
  %879 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %878, i32 %266) #7
  br label %880

880:                                              ; preds = %822, %866, %832
  %881 = phi <8 x i32> [ %875, %866 ], [ %856, %832 ], [ %828, %822 ]
  %882 = phi <8 x i32> [ %867, %866 ], [ %838, %832 ], [ %819, %822 ]
  %883 = phi <8 x i32> [ %871, %866 ], [ %847, %832 ], [ %825, %822 ]
  %884 = phi <8 x i32> [ %879, %866 ], [ %865, %832 ], [ %831, %822 ]
  %885 = add <8 x i32> %671, %535
  %886 = sub <8 x i32> %535, %671
  %887 = add <8 x i32> %672, %537
  %888 = sub <8 x i32> %537, %672
  %889 = sub <8 x i32> %536, %743
  %890 = add <8 x i32> %743, %536
  %891 = sub <8 x i32> %538, %742
  %892 = add <8 x i32> %742, %538
  %893 = add <8 x i32> %744, %543
  %894 = sub <8 x i32> %543, %744
  %895 = add <8 x i32> %741, %545
  %896 = sub <8 x i32> %545, %741
  %897 = sub <8 x i32> %544, %670
  %898 = add <8 x i32> %670, %544
  %899 = sub <8 x i32> %546, %673
  %900 = add <8 x i32> %673, %546
  %901 = bitcast [32 x <4 x i64>]* %6 to <8 x i32>*
  store <8 x i32> %811, <8 x i32>* %901, align 32
  %902 = bitcast <4 x i64>* %205 to <8 x i32>*
  store <8 x i32> %810, <8 x i32>* %902, align 32
  %903 = bitcast <4 x i64>* %211 to <8 x i32>*
  store <8 x i32> %809, <8 x i32>* %903, align 32
  %904 = bitcast <4 x i64>* %217 to <8 x i32>*
  store <8 x i32> %812, <8 x i32>* %904, align 32
  %905 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %198, i64 8
  %906 = load i32, i32* %905, align 16
  %907 = insertelement <8 x i32> undef, i32 %906, i32 0
  %908 = shufflevector <8 x i32> %907, <8 x i32> undef, <8 x i32> zeroinitializer
  %909 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %198, i64 56
  %910 = load i32, i32* %909, align 16
  %911 = insertelement <8 x i32> undef, i32 %910, i32 0
  %912 = shufflevector <8 x i32> %911, <8 x i32> undef, <8 x i32> zeroinitializer
  %913 = mul <8 x i32> %908, %816
  %914 = mul <8 x i32> %912, %813
  %915 = add <8 x i32> %914, %913
  store <8 x i32> %915, <8 x i32>* %224, align 32
  br i1 %267, label %922, label %916

916:                                              ; preds = %880
  %917 = icmp eq i8 %2, 0
  br i1 %917, label %918, label %938

918:                                              ; preds = %916
  %919 = mul <8 x i32> %912, %816
  %920 = mul <8 x i32> %908, %813
  %921 = sub <8 x i32> %919, %920
  br label %944

922:                                              ; preds = %880
  %923 = add nsw i32 %196, -1
  %924 = shl i32 1, %923
  %925 = insertelement <8 x i32> undef, i32 %924, i32 0
  %926 = shufflevector <8 x i32> %925, <8 x i32> undef, <8 x i32> zeroinitializer
  %927 = add <8 x i32> %915, %926
  %928 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %927, i32 %196) #7
  store <8 x i32> %928, <8 x i32>* %224, align 32
  %929 = mul <8 x i32> %912, %816
  %930 = mul <8 x i32> %908, %813
  %931 = sub <8 x i32> %929, %930
  %932 = add nsw i32 %196, -1
  %933 = shl i32 1, %932
  %934 = insertelement <8 x i32> undef, i32 %933, i32 0
  %935 = shufflevector <8 x i32> %934, <8 x i32> undef, <8 x i32> zeroinitializer
  %936 = add <8 x i32> %931, %935
  %937 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %936, i32 %196) #7
  br label %944

938:                                              ; preds = %916
  %939 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %915, i32 %266) #7
  store <8 x i32> %939, <8 x i32>* %224, align 32
  %940 = mul <8 x i32> %912, %816
  %941 = mul <8 x i32> %908, %813
  %942 = sub <8 x i32> %940, %941
  %943 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %942, i32 %266) #7
  br label %944

944:                                              ; preds = %918, %938, %922
  %945 = phi <8 x i32> [ %921, %918 ], [ %943, %938 ], [ %937, %922 ]
  %946 = phi <8 x i32> [ %915, %918 ], [ %939, %938 ], [ %928, %922 ]
  store <8 x i32> %945, <8 x i32>* %242, align 32
  %947 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %198, i64 40
  %948 = load i32, i32* %947, align 16
  %949 = insertelement <8 x i32> undef, i32 %948, i32 0
  %950 = shufflevector <8 x i32> %949, <8 x i32> undef, <8 x i32> zeroinitializer
  %951 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %198, i64 24
  %952 = load i32, i32* %951, align 16
  %953 = insertelement <8 x i32> undef, i32 %952, i32 0
  %954 = shufflevector <8 x i32> %953, <8 x i32> undef, <8 x i32> zeroinitializer
  %955 = mul <8 x i32> %950, %815
  %956 = mul <8 x i32> %954, %814
  %957 = add <8 x i32> %956, %955
  store <8 x i32> %957, <8 x i32>* %230, align 32
  br i1 %267, label %964, label %958

958:                                              ; preds = %944
  %959 = icmp eq i8 %2, 0
  br i1 %959, label %960, label %980

960:                                              ; preds = %958
  %961 = mul <8 x i32> %954, %815
  %962 = mul <8 x i32> %950, %814
  %963 = sub <8 x i32> %961, %962
  br label %986

964:                                              ; preds = %944
  %965 = add nsw i32 %196, -1
  %966 = shl i32 1, %965
  %967 = insertelement <8 x i32> undef, i32 %966, i32 0
  %968 = shufflevector <8 x i32> %967, <8 x i32> undef, <8 x i32> zeroinitializer
  %969 = add <8 x i32> %957, %968
  %970 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %969, i32 %196) #7
  store <8 x i32> %970, <8 x i32>* %230, align 32
  %971 = mul <8 x i32> %954, %815
  %972 = mul <8 x i32> %950, %814
  %973 = sub <8 x i32> %971, %972
  %974 = add nsw i32 %196, -1
  %975 = shl i32 1, %974
  %976 = insertelement <8 x i32> undef, i32 %975, i32 0
  %977 = shufflevector <8 x i32> %976, <8 x i32> undef, <8 x i32> zeroinitializer
  %978 = add <8 x i32> %973, %977
  %979 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %978, i32 %196) #7
  br label %986

980:                                              ; preds = %958
  %981 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %957, i32 %266) #7
  store <8 x i32> %981, <8 x i32>* %230, align 32
  %982 = mul <8 x i32> %954, %815
  %983 = mul <8 x i32> %950, %814
  %984 = sub <8 x i32> %982, %983
  %985 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %984, i32 %266) #7
  br label %986

986:                                              ; preds = %960, %980, %964
  %987 = phi <8 x i32> [ %963, %960 ], [ %985, %980 ], [ %979, %964 ]
  %988 = phi <8 x i32> [ %957, %960 ], [ %981, %980 ], [ %970, %964 ]
  store <8 x i32> %987, <8 x i32>* %236, align 32
  %989 = add <8 x i32> %882, %589
  store <8 x i32> %989, <8 x i32>* %245, align 32
  %990 = sub <8 x i32> %589, %882
  store <8 x i32> %990, <8 x i32>* %239, align 32
  %991 = sub <8 x i32> %590, %881
  store <8 x i32> %991, <8 x i32>* %233, align 32
  %992 = add <8 x i32> %881, %590
  store <8 x i32> %992, <8 x i32>* %227, align 32
  %993 = add <8 x i32> %884, %593
  store <8 x i32> %993, <8 x i32>* %221, align 32
  %994 = sub <8 x i32> %593, %884
  store <8 x i32> %994, <8 x i32>* %215, align 32
  %995 = sub <8 x i32> %594, %883
  store <8 x i32> %995, <8 x i32>* %209, align 32
  %996 = add <8 x i32> %883, %594
  store <8 x i32> %996, <8 x i32>* %203, align 32
  store <8 x i32> %885, <8 x i32>* %247, align 32
  %997 = sub nsw i32 0, %906
  %998 = insertelement <8 x i32> undef, i32 %997, i32 0
  %999 = shufflevector <8 x i32> %998, <8 x i32> undef, <8 x i32> zeroinitializer
  %1000 = mul <8 x i32> %999, %887
  %1001 = mul <8 x i32> %912, %900
  %1002 = add <8 x i32> %1001, %1000
  store <8 x i32> %1002, <8 x i32>* %249, align 32
  br i1 %267, label %1009, label %1003

1003:                                             ; preds = %986
  %1004 = icmp eq i8 %2, 0
  br i1 %1004, label %1005, label %1025

1005:                                             ; preds = %1003
  %1006 = mul <8 x i32> %912, %887
  %1007 = mul <8 x i32> %999, %900
  %1008 = sub <8 x i32> %1006, %1007
  br label %1031

1009:                                             ; preds = %986
  %1010 = add nsw i32 %196, -1
  %1011 = shl i32 1, %1010
  %1012 = insertelement <8 x i32> undef, i32 %1011, i32 0
  %1013 = shufflevector <8 x i32> %1012, <8 x i32> undef, <8 x i32> zeroinitializer
  %1014 = add <8 x i32> %1002, %1013
  %1015 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1014, i32 %196) #7
  store <8 x i32> %1015, <8 x i32>* %249, align 32
  %1016 = mul <8 x i32> %912, %887
  %1017 = mul <8 x i32> %999, %900
  %1018 = sub <8 x i32> %1016, %1017
  %1019 = add nsw i32 %196, -1
  %1020 = shl i32 1, %1019
  %1021 = insertelement <8 x i32> undef, i32 %1020, i32 0
  %1022 = shufflevector <8 x i32> %1021, <8 x i32> undef, <8 x i32> zeroinitializer
  %1023 = add <8 x i32> %1018, %1022
  %1024 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1023, i32 %196) #7
  br label %1031

1025:                                             ; preds = %1003
  %1026 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1002, i32 %266) #7
  store <8 x i32> %1026, <8 x i32>* %249, align 32
  %1027 = mul <8 x i32> %912, %887
  %1028 = mul <8 x i32> %999, %900
  %1029 = sub <8 x i32> %1027, %1028
  %1030 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1029, i32 %266) #7
  br label %1031

1031:                                             ; preds = %1005, %1025, %1009
  %1032 = phi <8 x i32> [ %1008, %1005 ], [ %1030, %1025 ], [ %1024, %1009 ]
  %1033 = phi <8 x i32> [ %1002, %1005 ], [ %1026, %1025 ], [ %1015, %1009 ]
  store <8 x i32> %1032, <8 x i32>* %456, align 32
  %1034 = sub nsw i32 0, %910
  %1035 = insertelement <8 x i32> undef, i32 %1034, i32 0
  %1036 = shufflevector <8 x i32> %1035, <8 x i32> undef, <8 x i32> zeroinitializer
  %1037 = mul <8 x i32> %1036, %888
  %1038 = mul <8 x i32> %999, %899
  %1039 = add <8 x i32> %1037, %1038
  store <8 x i32> %1039, <8 x i32>* %251, align 32
  br i1 %267, label %1046, label %1040

1040:                                             ; preds = %1031
  %1041 = icmp eq i8 %2, 0
  br i1 %1041, label %1042, label %1062

1042:                                             ; preds = %1040
  %1043 = mul <8 x i32> %999, %888
  %1044 = mul <8 x i32> %1036, %899
  %1045 = sub <8 x i32> %1043, %1044
  br label %1068

1046:                                             ; preds = %1031
  %1047 = add nsw i32 %196, -1
  %1048 = shl i32 1, %1047
  %1049 = insertelement <8 x i32> undef, i32 %1048, i32 0
  %1050 = shufflevector <8 x i32> %1049, <8 x i32> undef, <8 x i32> zeroinitializer
  %1051 = add <8 x i32> %1039, %1050
  %1052 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1051, i32 %196) #7
  store <8 x i32> %1052, <8 x i32>* %251, align 32
  %1053 = mul <8 x i32> %999, %888
  %1054 = mul <8 x i32> %1036, %899
  %1055 = sub <8 x i32> %1053, %1054
  %1056 = add nsw i32 %196, -1
  %1057 = shl i32 1, %1056
  %1058 = insertelement <8 x i32> undef, i32 %1057, i32 0
  %1059 = shufflevector <8 x i32> %1058, <8 x i32> undef, <8 x i32> zeroinitializer
  %1060 = add <8 x i32> %1055, %1059
  %1061 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1060, i32 %196) #7
  br label %1068

1062:                                             ; preds = %1040
  %1063 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1039, i32 %266) #7
  store <8 x i32> %1063, <8 x i32>* %251, align 32
  %1064 = mul <8 x i32> %999, %888
  %1065 = mul <8 x i32> %1036, %899
  %1066 = sub <8 x i32> %1064, %1065
  %1067 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1066, i32 %266) #7
  br label %1068

1068:                                             ; preds = %1042, %1062, %1046
  %1069 = phi <8 x i32> [ %1045, %1042 ], [ %1067, %1062 ], [ %1061, %1046 ]
  %1070 = phi <8 x i32> [ %1039, %1042 ], [ %1063, %1062 ], [ %1052, %1046 ]
  store <8 x i32> %1069, <8 x i32>* %454, align 32
  store <8 x i32> %886, <8 x i32>* %253, align 32
  store <8 x i32> %889, <8 x i32>* %265, align 32
  %1071 = sub nsw i32 0, %948
  %1072 = insertelement <8 x i32> undef, i32 %1071, i32 0
  %1073 = shufflevector <8 x i32> %1072, <8 x i32> undef, <8 x i32> zeroinitializer
  %1074 = mul <8 x i32> %1073, %891
  %1075 = mul <8 x i32> %954, %896
  %1076 = add <8 x i32> %1075, %1074
  store <8 x i32> %1076, <8 x i32>* %444, align 32
  br i1 %267, label %1083, label %1077

1077:                                             ; preds = %1068
  %1078 = icmp eq i8 %2, 0
  br i1 %1078, label %1079, label %1099

1079:                                             ; preds = %1077
  %1080 = mul <8 x i32> %954, %891
  %1081 = mul <8 x i32> %1073, %896
  %1082 = sub <8 x i32> %1080, %1081
  br label %1105

1083:                                             ; preds = %1068
  %1084 = add nsw i32 %196, -1
  %1085 = shl i32 1, %1084
  %1086 = insertelement <8 x i32> undef, i32 %1085, i32 0
  %1087 = shufflevector <8 x i32> %1086, <8 x i32> undef, <8 x i32> zeroinitializer
  %1088 = add <8 x i32> %1076, %1087
  %1089 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1088, i32 %196) #7
  store <8 x i32> %1089, <8 x i32>* %444, align 32
  %1090 = mul <8 x i32> %954, %891
  %1091 = mul <8 x i32> %1073, %896
  %1092 = sub <8 x i32> %1090, %1091
  %1093 = add nsw i32 %196, -1
  %1094 = shl i32 1, %1093
  %1095 = insertelement <8 x i32> undef, i32 %1094, i32 0
  %1096 = shufflevector <8 x i32> %1095, <8 x i32> undef, <8 x i32> zeroinitializer
  %1097 = add <8 x i32> %1092, %1096
  %1098 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1097, i32 %196) #7
  br label %1105

1099:                                             ; preds = %1077
  %1100 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1076, i32 %266) #7
  store <8 x i32> %1100, <8 x i32>* %444, align 32
  %1101 = mul <8 x i32> %954, %891
  %1102 = mul <8 x i32> %1073, %896
  %1103 = sub <8 x i32> %1101, %1102
  %1104 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1103, i32 %266) #7
  br label %1105

1105:                                             ; preds = %1079, %1099, %1083
  %1106 = phi <8 x i32> [ %1082, %1079 ], [ %1104, %1099 ], [ %1098, %1083 ]
  %1107 = phi <8 x i32> [ %1076, %1079 ], [ %1100, %1099 ], [ %1089, %1083 ]
  store <8 x i32> %1106, <8 x i32>* %439, align 32
  %1108 = sub nsw i32 0, %952
  %1109 = insertelement <8 x i32> undef, i32 %1108, i32 0
  %1110 = shufflevector <8 x i32> %1109, <8 x i32> undef, <8 x i32> zeroinitializer
  %1111 = mul <8 x i32> %1110, %892
  %1112 = mul <8 x i32> %1073, %895
  %1113 = add <8 x i32> %1111, %1112
  store <8 x i32> %1113, <8 x i32>* %447, align 32
  br i1 %267, label %1120, label %1114

1114:                                             ; preds = %1105
  %1115 = icmp eq i8 %2, 0
  br i1 %1115, label %1116, label %1136

1116:                                             ; preds = %1114
  %1117 = mul <8 x i32> %1073, %892
  %1118 = mul <8 x i32> %1110, %895
  %1119 = sub <8 x i32> %1117, %1118
  br label %1142

1120:                                             ; preds = %1105
  %1121 = add nsw i32 %196, -1
  %1122 = shl i32 1, %1121
  %1123 = insertelement <8 x i32> undef, i32 %1122, i32 0
  %1124 = shufflevector <8 x i32> %1123, <8 x i32> undef, <8 x i32> zeroinitializer
  %1125 = add <8 x i32> %1113, %1124
  %1126 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1125, i32 %196) #7
  store <8 x i32> %1126, <8 x i32>* %447, align 32
  %1127 = mul <8 x i32> %1073, %892
  %1128 = mul <8 x i32> %1110, %895
  %1129 = sub <8 x i32> %1127, %1128
  %1130 = add nsw i32 %196, -1
  %1131 = shl i32 1, %1130
  %1132 = insertelement <8 x i32> undef, i32 %1131, i32 0
  %1133 = shufflevector <8 x i32> %1132, <8 x i32> undef, <8 x i32> zeroinitializer
  %1134 = add <8 x i32> %1129, %1133
  %1135 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1134, i32 %196) #7
  br label %1142

1136:                                             ; preds = %1114
  %1137 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1113, i32 %266) #7
  store <8 x i32> %1137, <8 x i32>* %447, align 32
  %1138 = mul <8 x i32> %1073, %892
  %1139 = mul <8 x i32> %1110, %895
  %1140 = sub <8 x i32> %1138, %1139
  %1141 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1140, i32 %266) #7
  br label %1142

1142:                                             ; preds = %1116, %1136, %1120
  %1143 = phi <8 x i32> [ %1119, %1116 ], [ %1141, %1136 ], [ %1135, %1120 ]
  %1144 = phi <8 x i32> [ %1113, %1116 ], [ %1137, %1136 ], [ %1126, %1120 ]
  store <8 x i32> %1143, <8 x i32>* %437, align 32
  store <8 x i32> %890, <8 x i32>* %449, align 32
  store <8 x i32> %893, <8 x i32>* %435, align 32
  store <8 x i32> %894, <8 x i32>* %441, align 32
  store <8 x i32> %897, <8 x i32>* %452, align 32
  store <8 x i32> %898, <8 x i32>* %458, align 32
  %1145 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %198, i64 4
  %1146 = load i32, i32* %1145, align 16
  %1147 = insertelement <8 x i32> undef, i32 %1146, i32 0
  %1148 = shufflevector <8 x i32> %1147, <8 x i32> undef, <8 x i32> zeroinitializer
  %1149 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %198, i64 60
  %1150 = load i32, i32* %1149, align 16
  %1151 = insertelement <8 x i32> undef, i32 %1150, i32 0
  %1152 = shufflevector <8 x i32> %1151, <8 x i32> undef, <8 x i32> zeroinitializer
  %1153 = mul <8 x i32> %1148, %996
  %1154 = mul <8 x i32> %1152, %989
  %1155 = add <8 x i32> %1154, %1153
  br i1 %267, label %1162, label %1156

1156:                                             ; preds = %1142
  %1157 = icmp eq i8 %2, 0
  br i1 %1157, label %1158, label %1178

1158:                                             ; preds = %1156
  %1159 = mul <8 x i32> %1152, %996
  %1160 = mul <8 x i32> %1148, %989
  %1161 = sub <8 x i32> %1159, %1160
  br label %1184

1162:                                             ; preds = %1142
  %1163 = add nsw i32 %196, -1
  %1164 = shl i32 1, %1163
  %1165 = insertelement <8 x i32> undef, i32 %1164, i32 0
  %1166 = shufflevector <8 x i32> %1165, <8 x i32> undef, <8 x i32> zeroinitializer
  %1167 = add <8 x i32> %1155, %1166
  %1168 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1167, i32 %196) #7
  %1169 = mul <8 x i32> %1152, %996
  %1170 = mul <8 x i32> %1148, %989
  %1171 = sub <8 x i32> %1169, %1170
  %1172 = add nsw i32 %196, -1
  %1173 = shl i32 1, %1172
  %1174 = insertelement <8 x i32> undef, i32 %1173, i32 0
  %1175 = shufflevector <8 x i32> %1174, <8 x i32> undef, <8 x i32> zeroinitializer
  %1176 = add <8 x i32> %1171, %1175
  %1177 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1176, i32 %196) #7
  br label %1184

1178:                                             ; preds = %1156
  %1179 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1155, i32 %266) #7
  %1180 = mul <8 x i32> %1152, %996
  %1181 = mul <8 x i32> %1148, %989
  %1182 = sub <8 x i32> %1180, %1181
  %1183 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1182, i32 %266) #7
  br label %1184

1184:                                             ; preds = %1158, %1178, %1162
  %1185 = phi <8 x i32> [ %1179, %1178 ], [ %1168, %1162 ], [ %1155, %1158 ]
  %1186 = phi <8 x i32> [ %1183, %1178 ], [ %1177, %1162 ], [ %1161, %1158 ]
  %1187 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %198, i64 36
  %1188 = load i32, i32* %1187, align 16
  %1189 = insertelement <8 x i32> undef, i32 %1188, i32 0
  %1190 = shufflevector <8 x i32> %1189, <8 x i32> undef, <8 x i32> zeroinitializer
  %1191 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %198, i64 28
  %1192 = load i32, i32* %1191, align 16
  %1193 = insertelement <8 x i32> undef, i32 %1192, i32 0
  %1194 = shufflevector <8 x i32> %1193, <8 x i32> undef, <8 x i32> zeroinitializer
  %1195 = mul <8 x i32> %1190, %995
  %1196 = mul <8 x i32> %1194, %990
  %1197 = add <8 x i32> %1196, %1195
  br i1 %267, label %1204, label %1198

1198:                                             ; preds = %1184
  %1199 = icmp eq i8 %2, 0
  br i1 %1199, label %1200, label %1220

1200:                                             ; preds = %1198
  %1201 = mul <8 x i32> %1194, %995
  %1202 = mul <8 x i32> %1190, %990
  %1203 = sub <8 x i32> %1201, %1202
  br label %1226

1204:                                             ; preds = %1184
  %1205 = add nsw i32 %196, -1
  %1206 = shl i32 1, %1205
  %1207 = insertelement <8 x i32> undef, i32 %1206, i32 0
  %1208 = shufflevector <8 x i32> %1207, <8 x i32> undef, <8 x i32> zeroinitializer
  %1209 = add <8 x i32> %1197, %1208
  %1210 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1209, i32 %196) #7
  %1211 = mul <8 x i32> %1194, %995
  %1212 = mul <8 x i32> %1190, %990
  %1213 = sub <8 x i32> %1211, %1212
  %1214 = add nsw i32 %196, -1
  %1215 = shl i32 1, %1214
  %1216 = insertelement <8 x i32> undef, i32 %1215, i32 0
  %1217 = shufflevector <8 x i32> %1216, <8 x i32> undef, <8 x i32> zeroinitializer
  %1218 = add <8 x i32> %1213, %1217
  %1219 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1218, i32 %196) #7
  br label %1226

1220:                                             ; preds = %1198
  %1221 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1197, i32 %266) #7
  %1222 = mul <8 x i32> %1194, %995
  %1223 = mul <8 x i32> %1190, %990
  %1224 = sub <8 x i32> %1222, %1223
  %1225 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1224, i32 %266) #7
  br label %1226

1226:                                             ; preds = %1200, %1220, %1204
  %1227 = phi <8 x i32> [ %1221, %1220 ], [ %1210, %1204 ], [ %1197, %1200 ]
  %1228 = phi <8 x i32> [ %1225, %1220 ], [ %1219, %1204 ], [ %1203, %1200 ]
  %1229 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %198, i64 20
  %1230 = load i32, i32* %1229, align 16
  %1231 = insertelement <8 x i32> undef, i32 %1230, i32 0
  %1232 = shufflevector <8 x i32> %1231, <8 x i32> undef, <8 x i32> zeroinitializer
  %1233 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %198, i64 44
  %1234 = load i32, i32* %1233, align 16
  %1235 = insertelement <8 x i32> undef, i32 %1234, i32 0
  %1236 = shufflevector <8 x i32> %1235, <8 x i32> undef, <8 x i32> zeroinitializer
  %1237 = mul <8 x i32> %1232, %994
  %1238 = mul <8 x i32> %1236, %991
  %1239 = add <8 x i32> %1238, %1237
  br i1 %267, label %1246, label %1240

1240:                                             ; preds = %1226
  %1241 = icmp eq i8 %2, 0
  br i1 %1241, label %1242, label %1262

1242:                                             ; preds = %1240
  %1243 = mul <8 x i32> %1236, %994
  %1244 = mul <8 x i32> %1232, %991
  %1245 = sub <8 x i32> %1243, %1244
  br label %1268

1246:                                             ; preds = %1226
  %1247 = add nsw i32 %196, -1
  %1248 = shl i32 1, %1247
  %1249 = insertelement <8 x i32> undef, i32 %1248, i32 0
  %1250 = shufflevector <8 x i32> %1249, <8 x i32> undef, <8 x i32> zeroinitializer
  %1251 = add <8 x i32> %1239, %1250
  %1252 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1251, i32 %196) #7
  %1253 = mul <8 x i32> %1236, %994
  %1254 = mul <8 x i32> %1232, %991
  %1255 = sub <8 x i32> %1253, %1254
  %1256 = add nsw i32 %196, -1
  %1257 = shl i32 1, %1256
  %1258 = insertelement <8 x i32> undef, i32 %1257, i32 0
  %1259 = shufflevector <8 x i32> %1258, <8 x i32> undef, <8 x i32> zeroinitializer
  %1260 = add <8 x i32> %1255, %1259
  %1261 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1260, i32 %196) #7
  br label %1268

1262:                                             ; preds = %1240
  %1263 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1239, i32 %266) #7
  %1264 = mul <8 x i32> %1236, %994
  %1265 = mul <8 x i32> %1232, %991
  %1266 = sub <8 x i32> %1264, %1265
  %1267 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1266, i32 %266) #7
  br label %1268

1268:                                             ; preds = %1242, %1262, %1246
  %1269 = phi <8 x i32> [ %1263, %1262 ], [ %1252, %1246 ], [ %1239, %1242 ]
  %1270 = phi <8 x i32> [ %1267, %1262 ], [ %1261, %1246 ], [ %1245, %1242 ]
  %1271 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %198, i64 52
  %1272 = load i32, i32* %1271, align 16
  %1273 = insertelement <8 x i32> undef, i32 %1272, i32 0
  %1274 = shufflevector <8 x i32> %1273, <8 x i32> undef, <8 x i32> zeroinitializer
  %1275 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %198, i64 12
  %1276 = load i32, i32* %1275, align 16
  %1277 = insertelement <8 x i32> undef, i32 %1276, i32 0
  %1278 = shufflevector <8 x i32> %1277, <8 x i32> undef, <8 x i32> zeroinitializer
  %1279 = mul <8 x i32> %1274, %993
  %1280 = mul <8 x i32> %1278, %992
  %1281 = add <8 x i32> %1280, %1279
  br i1 %267, label %1288, label %1282

1282:                                             ; preds = %1268
  %1283 = icmp eq i8 %2, 0
  br i1 %1283, label %1284, label %1304

1284:                                             ; preds = %1282
  %1285 = mul <8 x i32> %1278, %993
  %1286 = mul <8 x i32> %1274, %992
  %1287 = sub <8 x i32> %1285, %1286
  br label %1310

1288:                                             ; preds = %1268
  %1289 = add nsw i32 %196, -1
  %1290 = shl i32 1, %1289
  %1291 = insertelement <8 x i32> undef, i32 %1290, i32 0
  %1292 = shufflevector <8 x i32> %1291, <8 x i32> undef, <8 x i32> zeroinitializer
  %1293 = add <8 x i32> %1281, %1292
  %1294 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1293, i32 %196) #7
  %1295 = mul <8 x i32> %1278, %993
  %1296 = mul <8 x i32> %1274, %992
  %1297 = sub <8 x i32> %1295, %1296
  %1298 = add nsw i32 %196, -1
  %1299 = shl i32 1, %1298
  %1300 = insertelement <8 x i32> undef, i32 %1299, i32 0
  %1301 = shufflevector <8 x i32> %1300, <8 x i32> undef, <8 x i32> zeroinitializer
  %1302 = add <8 x i32> %1297, %1301
  %1303 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1302, i32 %196) #7
  br label %1310

1304:                                             ; preds = %1282
  %1305 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1281, i32 %266) #7
  %1306 = mul <8 x i32> %1278, %993
  %1307 = mul <8 x i32> %1274, %992
  %1308 = sub <8 x i32> %1306, %1307
  %1309 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1308, i32 %266) #7
  br label %1310

1310:                                             ; preds = %1284, %1304, %1288
  %1311 = phi <8 x i32> [ %1305, %1304 ], [ %1294, %1288 ], [ %1281, %1284 ]
  %1312 = phi <8 x i32> [ %1309, %1304 ], [ %1303, %1288 ], [ %1287, %1284 ]
  %1313 = add <8 x i32> %1033, %885
  %1314 = sub <8 x i32> %885, %1033
  %1315 = sub <8 x i32> %886, %1070
  %1316 = add <8 x i32> %1070, %886
  %1317 = add <8 x i32> %1107, %889
  %1318 = sub <8 x i32> %889, %1107
  %1319 = sub <8 x i32> %890, %1144
  %1320 = add <8 x i32> %1144, %890
  %1321 = add <8 x i32> %1143, %893
  %1322 = sub <8 x i32> %893, %1143
  %1323 = sub <8 x i32> %894, %1106
  %1324 = add <8 x i32> %1106, %894
  %1325 = add <8 x i32> %1069, %897
  %1326 = sub <8 x i32> %897, %1069
  %1327 = sub <8 x i32> %898, %1032
  %1328 = add <8 x i32> %1032, %898
  %1329 = bitcast [32 x <4 x i64>]* %6 to <8 x i32>*
  store <8 x i32> %811, <8 x i32>* %1329, align 32
  %1330 = bitcast <4 x i64>* %205 to <8 x i32>*
  store <8 x i32> %810, <8 x i32>* %1330, align 32
  %1331 = bitcast <4 x i64>* %211 to <8 x i32>*
  store <8 x i32> %809, <8 x i32>* %1331, align 32
  %1332 = bitcast <4 x i64>* %217 to <8 x i32>*
  store <8 x i32> %812, <8 x i32>* %1332, align 32
  %1333 = bitcast <4 x i64>* %244 to <8 x i32>*
  store <8 x i32> %1185, <8 x i32>* %1333, align 32
  %1334 = bitcast <4 x i64>* %238 to <8 x i32>*
  store <8 x i32> %1227, <8 x i32>* %1334, align 32
  %1335 = bitcast <4 x i64>* %232 to <8 x i32>*
  store <8 x i32> %1269, <8 x i32>* %1335, align 32
  %1336 = bitcast <4 x i64>* %226 to <8 x i32>*
  store <8 x i32> %1311, <8 x i32>* %1336, align 32
  %1337 = bitcast <4 x i64>* %220 to <8 x i32>*
  store <8 x i32> %1312, <8 x i32>* %1337, align 32
  %1338 = bitcast <4 x i64>* %214 to <8 x i32>*
  store <8 x i32> %1270, <8 x i32>* %1338, align 32
  %1339 = bitcast <4 x i64>* %208 to <8 x i32>*
  store <8 x i32> %1228, <8 x i32>* %1339, align 32
  %1340 = bitcast <4 x i64>* %202 to <8 x i32>*
  store <8 x i32> %1186, <8 x i32>* %1340, align 32
  %1341 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %198, i64 2
  %1342 = load i32, i32* %1341, align 8
  %1343 = insertelement <8 x i32> undef, i32 %1342, i32 0
  %1344 = shufflevector <8 x i32> %1343, <8 x i32> undef, <8 x i32> zeroinitializer
  %1345 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %198, i64 62
  %1346 = load i32, i32* %1345, align 8
  %1347 = insertelement <8 x i32> undef, i32 %1346, i32 0
  %1348 = shufflevector <8 x i32> %1347, <8 x i32> undef, <8 x i32> zeroinitializer
  %1349 = mul <8 x i32> %1344, %1328
  %1350 = mul <8 x i32> %1348, %1313
  %1351 = add <8 x i32> %1350, %1349
  store <8 x i32> %1351, <8 x i32>* %247, align 32
  br i1 %267, label %1358, label %1352

1352:                                             ; preds = %1310
  %1353 = icmp eq i8 %2, 0
  br i1 %1353, label %1354, label %1374

1354:                                             ; preds = %1352
  %1355 = mul <8 x i32> %1348, %1328
  %1356 = mul <8 x i32> %1344, %1313
  %1357 = sub <8 x i32> %1355, %1356
  br label %1380

1358:                                             ; preds = %1310
  %1359 = add nsw i32 %196, -1
  %1360 = shl i32 1, %1359
  %1361 = insertelement <8 x i32> undef, i32 %1360, i32 0
  %1362 = shufflevector <8 x i32> %1361, <8 x i32> undef, <8 x i32> zeroinitializer
  %1363 = add <8 x i32> %1351, %1362
  %1364 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1363, i32 %196) #7
  store <8 x i32> %1364, <8 x i32>* %247, align 32
  %1365 = mul <8 x i32> %1348, %1328
  %1366 = mul <8 x i32> %1344, %1313
  %1367 = sub <8 x i32> %1365, %1366
  %1368 = add nsw i32 %196, -1
  %1369 = shl i32 1, %1368
  %1370 = insertelement <8 x i32> undef, i32 %1369, i32 0
  %1371 = shufflevector <8 x i32> %1370, <8 x i32> undef, <8 x i32> zeroinitializer
  %1372 = add <8 x i32> %1367, %1371
  %1373 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1372, i32 %196) #7
  br label %1380

1374:                                             ; preds = %1352
  %1375 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1351, i32 %266) #7
  store <8 x i32> %1375, <8 x i32>* %247, align 32
  %1376 = mul <8 x i32> %1348, %1328
  %1377 = mul <8 x i32> %1344, %1313
  %1378 = sub <8 x i32> %1376, %1377
  %1379 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1378, i32 %266) #7
  br label %1380

1380:                                             ; preds = %1354, %1374, %1358
  %1381 = phi <8 x i32> [ %1357, %1354 ], [ %1379, %1374 ], [ %1373, %1358 ]
  %1382 = phi <8 x i32> [ %1351, %1354 ], [ %1375, %1374 ], [ %1364, %1358 ]
  store <8 x i32> %1381, <8 x i32>* %458, align 32
  %1383 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %198, i64 34
  %1384 = load i32, i32* %1383, align 8
  %1385 = insertelement <8 x i32> undef, i32 %1384, i32 0
  %1386 = shufflevector <8 x i32> %1385, <8 x i32> undef, <8 x i32> zeroinitializer
  %1387 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %198, i64 30
  %1388 = load i32, i32* %1387, align 8
  %1389 = insertelement <8 x i32> undef, i32 %1388, i32 0
  %1390 = shufflevector <8 x i32> %1389, <8 x i32> undef, <8 x i32> zeroinitializer
  %1391 = mul <8 x i32> %1386, %1327
  %1392 = mul <8 x i32> %1390, %1314
  %1393 = add <8 x i32> %1392, %1391
  store <8 x i32> %1393, <8 x i32>* %249, align 32
  br i1 %267, label %1400, label %1394

1394:                                             ; preds = %1380
  %1395 = icmp eq i8 %2, 0
  br i1 %1395, label %1396, label %1416

1396:                                             ; preds = %1394
  %1397 = mul <8 x i32> %1390, %1327
  %1398 = mul <8 x i32> %1386, %1314
  %1399 = sub <8 x i32> %1397, %1398
  br label %1422

1400:                                             ; preds = %1380
  %1401 = add nsw i32 %196, -1
  %1402 = shl i32 1, %1401
  %1403 = insertelement <8 x i32> undef, i32 %1402, i32 0
  %1404 = shufflevector <8 x i32> %1403, <8 x i32> undef, <8 x i32> zeroinitializer
  %1405 = add <8 x i32> %1393, %1404
  %1406 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1405, i32 %196) #7
  store <8 x i32> %1406, <8 x i32>* %249, align 32
  %1407 = mul <8 x i32> %1390, %1327
  %1408 = mul <8 x i32> %1386, %1314
  %1409 = sub <8 x i32> %1407, %1408
  %1410 = add nsw i32 %196, -1
  %1411 = shl i32 1, %1410
  %1412 = insertelement <8 x i32> undef, i32 %1411, i32 0
  %1413 = shufflevector <8 x i32> %1412, <8 x i32> undef, <8 x i32> zeroinitializer
  %1414 = add <8 x i32> %1409, %1413
  %1415 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1414, i32 %196) #7
  br label %1422

1416:                                             ; preds = %1394
  %1417 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1393, i32 %266) #7
  store <8 x i32> %1417, <8 x i32>* %249, align 32
  %1418 = mul <8 x i32> %1390, %1327
  %1419 = mul <8 x i32> %1386, %1314
  %1420 = sub <8 x i32> %1418, %1419
  %1421 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1420, i32 %266) #7
  br label %1422

1422:                                             ; preds = %1396, %1416, %1400
  %1423 = phi <8 x i32> [ %1399, %1396 ], [ %1421, %1416 ], [ %1415, %1400 ]
  store <8 x i32> %1423, <8 x i32>* %456, align 32
  %1424 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %198, i64 18
  %1425 = load i32, i32* %1424, align 8
  %1426 = insertelement <8 x i32> undef, i32 %1425, i32 0
  %1427 = shufflevector <8 x i32> %1426, <8 x i32> undef, <8 x i32> zeroinitializer
  %1428 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %198, i64 46
  %1429 = load i32, i32* %1428, align 8
  %1430 = insertelement <8 x i32> undef, i32 %1429, i32 0
  %1431 = shufflevector <8 x i32> %1430, <8 x i32> undef, <8 x i32> zeroinitializer
  %1432 = mul <8 x i32> %1427, %1326
  %1433 = mul <8 x i32> %1431, %1315
  %1434 = add <8 x i32> %1433, %1432
  store <8 x i32> %1434, <8 x i32>* %251, align 32
  br i1 %267, label %1441, label %1435

1435:                                             ; preds = %1422
  %1436 = icmp eq i8 %2, 0
  br i1 %1436, label %1437, label %1457

1437:                                             ; preds = %1435
  %1438 = mul <8 x i32> %1431, %1326
  %1439 = mul <8 x i32> %1427, %1315
  %1440 = sub <8 x i32> %1438, %1439
  br label %1463

1441:                                             ; preds = %1422
  %1442 = add nsw i32 %196, -1
  %1443 = shl i32 1, %1442
  %1444 = insertelement <8 x i32> undef, i32 %1443, i32 0
  %1445 = shufflevector <8 x i32> %1444, <8 x i32> undef, <8 x i32> zeroinitializer
  %1446 = add <8 x i32> %1434, %1445
  %1447 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1446, i32 %196) #7
  store <8 x i32> %1447, <8 x i32>* %251, align 32
  %1448 = mul <8 x i32> %1431, %1326
  %1449 = mul <8 x i32> %1427, %1315
  %1450 = sub <8 x i32> %1448, %1449
  %1451 = add nsw i32 %196, -1
  %1452 = shl i32 1, %1451
  %1453 = insertelement <8 x i32> undef, i32 %1452, i32 0
  %1454 = shufflevector <8 x i32> %1453, <8 x i32> undef, <8 x i32> zeroinitializer
  %1455 = add <8 x i32> %1450, %1454
  %1456 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1455, i32 %196) #7
  br label %1463

1457:                                             ; preds = %1435
  %1458 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1434, i32 %266) #7
  store <8 x i32> %1458, <8 x i32>* %251, align 32
  %1459 = mul <8 x i32> %1431, %1326
  %1460 = mul <8 x i32> %1427, %1315
  %1461 = sub <8 x i32> %1459, %1460
  %1462 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1461, i32 %266) #7
  br label %1463

1463:                                             ; preds = %1437, %1457, %1441
  %1464 = phi <8 x i32> [ %1440, %1437 ], [ %1462, %1457 ], [ %1456, %1441 ]
  %1465 = phi <8 x i32> [ %1434, %1437 ], [ %1458, %1457 ], [ %1447, %1441 ]
  store <8 x i32> %1464, <8 x i32>* %454, align 32
  %1466 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %198, i64 50
  %1467 = load i32, i32* %1466, align 8
  %1468 = insertelement <8 x i32> undef, i32 %1467, i32 0
  %1469 = shufflevector <8 x i32> %1468, <8 x i32> undef, <8 x i32> zeroinitializer
  %1470 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %198, i64 14
  %1471 = load i32, i32* %1470, align 8
  %1472 = insertelement <8 x i32> undef, i32 %1471, i32 0
  %1473 = shufflevector <8 x i32> %1472, <8 x i32> undef, <8 x i32> zeroinitializer
  %1474 = mul <8 x i32> %1469, %1325
  %1475 = mul <8 x i32> %1473, %1316
  %1476 = add <8 x i32> %1475, %1474
  store <8 x i32> %1476, <8 x i32>* %253, align 32
  br i1 %267, label %1483, label %1477

1477:                                             ; preds = %1463
  %1478 = icmp eq i8 %2, 0
  br i1 %1478, label %1479, label %1499

1479:                                             ; preds = %1477
  %1480 = mul <8 x i32> %1473, %1325
  %1481 = mul <8 x i32> %1469, %1316
  %1482 = sub <8 x i32> %1480, %1481
  br label %1505

1483:                                             ; preds = %1463
  %1484 = add nsw i32 %196, -1
  %1485 = shl i32 1, %1484
  %1486 = insertelement <8 x i32> undef, i32 %1485, i32 0
  %1487 = shufflevector <8 x i32> %1486, <8 x i32> undef, <8 x i32> zeroinitializer
  %1488 = add <8 x i32> %1476, %1487
  %1489 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1488, i32 %196) #7
  store <8 x i32> %1489, <8 x i32>* %253, align 32
  %1490 = mul <8 x i32> %1473, %1325
  %1491 = mul <8 x i32> %1469, %1316
  %1492 = sub <8 x i32> %1490, %1491
  %1493 = add nsw i32 %196, -1
  %1494 = shl i32 1, %1493
  %1495 = insertelement <8 x i32> undef, i32 %1494, i32 0
  %1496 = shufflevector <8 x i32> %1495, <8 x i32> undef, <8 x i32> zeroinitializer
  %1497 = add <8 x i32> %1492, %1496
  %1498 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1497, i32 %196) #7
  br label %1505

1499:                                             ; preds = %1477
  %1500 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1476, i32 %266) #7
  store <8 x i32> %1500, <8 x i32>* %253, align 32
  %1501 = mul <8 x i32> %1473, %1325
  %1502 = mul <8 x i32> %1469, %1316
  %1503 = sub <8 x i32> %1501, %1502
  %1504 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1503, i32 %266) #7
  br label %1505

1505:                                             ; preds = %1479, %1499, %1483
  %1506 = phi <8 x i32> [ %1482, %1479 ], [ %1504, %1499 ], [ %1498, %1483 ]
  %1507 = phi <8 x i32> [ %1476, %1479 ], [ %1500, %1499 ], [ %1489, %1483 ]
  store <8 x i32> %1506, <8 x i32>* %452, align 32
  %1508 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %198, i64 10
  %1509 = load i32, i32* %1508, align 8
  %1510 = insertelement <8 x i32> undef, i32 %1509, i32 0
  %1511 = shufflevector <8 x i32> %1510, <8 x i32> undef, <8 x i32> zeroinitializer
  %1512 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %198, i64 54
  %1513 = load i32, i32* %1512, align 8
  %1514 = insertelement <8 x i32> undef, i32 %1513, i32 0
  %1515 = shufflevector <8 x i32> %1514, <8 x i32> undef, <8 x i32> zeroinitializer
  %1516 = mul <8 x i32> %1511, %1324
  %1517 = mul <8 x i32> %1515, %1317
  %1518 = add <8 x i32> %1517, %1516
  store <8 x i32> %1518, <8 x i32>* %265, align 32
  br i1 %267, label %1525, label %1519

1519:                                             ; preds = %1505
  %1520 = icmp eq i8 %2, 0
  br i1 %1520, label %1521, label %1541

1521:                                             ; preds = %1519
  %1522 = mul <8 x i32> %1515, %1324
  %1523 = mul <8 x i32> %1511, %1317
  %1524 = sub <8 x i32> %1522, %1523
  br label %1547

1525:                                             ; preds = %1505
  %1526 = add nsw i32 %196, -1
  %1527 = shl i32 1, %1526
  %1528 = insertelement <8 x i32> undef, i32 %1527, i32 0
  %1529 = shufflevector <8 x i32> %1528, <8 x i32> undef, <8 x i32> zeroinitializer
  %1530 = add <8 x i32> %1518, %1529
  %1531 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1530, i32 %196) #7
  store <8 x i32> %1531, <8 x i32>* %265, align 32
  %1532 = mul <8 x i32> %1515, %1324
  %1533 = mul <8 x i32> %1511, %1317
  %1534 = sub <8 x i32> %1532, %1533
  %1535 = add nsw i32 %196, -1
  %1536 = shl i32 1, %1535
  %1537 = insertelement <8 x i32> undef, i32 %1536, i32 0
  %1538 = shufflevector <8 x i32> %1537, <8 x i32> undef, <8 x i32> zeroinitializer
  %1539 = add <8 x i32> %1534, %1538
  %1540 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1539, i32 %196) #7
  br label %1547

1541:                                             ; preds = %1519
  %1542 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1518, i32 %266) #7
  store <8 x i32> %1542, <8 x i32>* %265, align 32
  %1543 = mul <8 x i32> %1515, %1324
  %1544 = mul <8 x i32> %1511, %1317
  %1545 = sub <8 x i32> %1543, %1544
  %1546 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1545, i32 %266) #7
  br label %1547

1547:                                             ; preds = %1521, %1541, %1525
  %1548 = phi <8 x i32> [ %1524, %1521 ], [ %1546, %1541 ], [ %1540, %1525 ]
  %1549 = phi <8 x i32> [ %1518, %1521 ], [ %1542, %1541 ], [ %1531, %1525 ]
  store <8 x i32> %1548, <8 x i32>* %441, align 32
  %1550 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %198, i64 42
  %1551 = load i32, i32* %1550, align 8
  %1552 = insertelement <8 x i32> undef, i32 %1551, i32 0
  %1553 = shufflevector <8 x i32> %1552, <8 x i32> undef, <8 x i32> zeroinitializer
  %1554 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %198, i64 22
  %1555 = load i32, i32* %1554, align 8
  %1556 = insertelement <8 x i32> undef, i32 %1555, i32 0
  %1557 = shufflevector <8 x i32> %1556, <8 x i32> undef, <8 x i32> zeroinitializer
  %1558 = mul <8 x i32> %1553, %1323
  %1559 = mul <8 x i32> %1557, %1318
  %1560 = add <8 x i32> %1559, %1558
  store <8 x i32> %1560, <8 x i32>* %444, align 32
  br i1 %267, label %1567, label %1561

1561:                                             ; preds = %1547
  %1562 = icmp eq i8 %2, 0
  br i1 %1562, label %1563, label %1583

1563:                                             ; preds = %1561
  %1564 = mul <8 x i32> %1557, %1323
  %1565 = mul <8 x i32> %1553, %1318
  %1566 = sub <8 x i32> %1564, %1565
  br label %1589

1567:                                             ; preds = %1547
  %1568 = add nsw i32 %196, -1
  %1569 = shl i32 1, %1568
  %1570 = insertelement <8 x i32> undef, i32 %1569, i32 0
  %1571 = shufflevector <8 x i32> %1570, <8 x i32> undef, <8 x i32> zeroinitializer
  %1572 = add <8 x i32> %1560, %1571
  %1573 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1572, i32 %196) #7
  store <8 x i32> %1573, <8 x i32>* %444, align 32
  %1574 = mul <8 x i32> %1557, %1323
  %1575 = mul <8 x i32> %1553, %1318
  %1576 = sub <8 x i32> %1574, %1575
  %1577 = add nsw i32 %196, -1
  %1578 = shl i32 1, %1577
  %1579 = insertelement <8 x i32> undef, i32 %1578, i32 0
  %1580 = shufflevector <8 x i32> %1579, <8 x i32> undef, <8 x i32> zeroinitializer
  %1581 = add <8 x i32> %1576, %1580
  %1582 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1581, i32 %196) #7
  br label %1589

1583:                                             ; preds = %1561
  %1584 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1560, i32 %266) #7
  store <8 x i32> %1584, <8 x i32>* %444, align 32
  %1585 = mul <8 x i32> %1557, %1323
  %1586 = mul <8 x i32> %1553, %1318
  %1587 = sub <8 x i32> %1585, %1586
  %1588 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1587, i32 %266) #7
  br label %1589

1589:                                             ; preds = %1563, %1583, %1567
  %1590 = phi <8 x i32> [ %1566, %1563 ], [ %1588, %1583 ], [ %1582, %1567 ]
  %1591 = phi <8 x i32> [ %1560, %1563 ], [ %1584, %1583 ], [ %1573, %1567 ]
  store <8 x i32> %1590, <8 x i32>* %439, align 32
  %1592 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %198, i64 26
  %1593 = load i32, i32* %1592, align 8
  %1594 = insertelement <8 x i32> undef, i32 %1593, i32 0
  %1595 = shufflevector <8 x i32> %1594, <8 x i32> undef, <8 x i32> zeroinitializer
  %1596 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %198, i64 38
  %1597 = load i32, i32* %1596, align 8
  %1598 = insertelement <8 x i32> undef, i32 %1597, i32 0
  %1599 = shufflevector <8 x i32> %1598, <8 x i32> undef, <8 x i32> zeroinitializer
  %1600 = mul <8 x i32> %1595, %1322
  %1601 = mul <8 x i32> %1599, %1319
  %1602 = add <8 x i32> %1601, %1600
  store <8 x i32> %1602, <8 x i32>* %447, align 32
  br i1 %267, label %1609, label %1603

1603:                                             ; preds = %1589
  %1604 = icmp eq i8 %2, 0
  br i1 %1604, label %1605, label %1625

1605:                                             ; preds = %1603
  %1606 = mul <8 x i32> %1599, %1322
  %1607 = mul <8 x i32> %1595, %1319
  %1608 = sub <8 x i32> %1606, %1607
  br label %1631

1609:                                             ; preds = %1589
  %1610 = add nsw i32 %196, -1
  %1611 = shl i32 1, %1610
  %1612 = insertelement <8 x i32> undef, i32 %1611, i32 0
  %1613 = shufflevector <8 x i32> %1612, <8 x i32> undef, <8 x i32> zeroinitializer
  %1614 = add <8 x i32> %1602, %1613
  %1615 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1614, i32 %196) #7
  store <8 x i32> %1615, <8 x i32>* %447, align 32
  %1616 = mul <8 x i32> %1599, %1322
  %1617 = mul <8 x i32> %1595, %1319
  %1618 = sub <8 x i32> %1616, %1617
  %1619 = add nsw i32 %196, -1
  %1620 = shl i32 1, %1619
  %1621 = insertelement <8 x i32> undef, i32 %1620, i32 0
  %1622 = shufflevector <8 x i32> %1621, <8 x i32> undef, <8 x i32> zeroinitializer
  %1623 = add <8 x i32> %1618, %1622
  %1624 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1623, i32 %196) #7
  br label %1631

1625:                                             ; preds = %1603
  %1626 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1602, i32 %266) #7
  store <8 x i32> %1626, <8 x i32>* %447, align 32
  %1627 = mul <8 x i32> %1599, %1322
  %1628 = mul <8 x i32> %1595, %1319
  %1629 = sub <8 x i32> %1627, %1628
  %1630 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1629, i32 %266) #7
  br label %1631

1631:                                             ; preds = %1605, %1625, %1609
  %1632 = phi <8 x i32> [ %1608, %1605 ], [ %1630, %1625 ], [ %1624, %1609 ]
  store <8 x i32> %1632, <8 x i32>* %437, align 32
  %1633 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %198, i64 58
  %1634 = load i32, i32* %1633, align 8
  %1635 = insertelement <8 x i32> undef, i32 %1634, i32 0
  %1636 = shufflevector <8 x i32> %1635, <8 x i32> undef, <8 x i32> zeroinitializer
  %1637 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %198, i64 6
  %1638 = load i32, i32* %1637, align 8
  %1639 = insertelement <8 x i32> undef, i32 %1638, i32 0
  %1640 = shufflevector <8 x i32> %1639, <8 x i32> undef, <8 x i32> zeroinitializer
  %1641 = mul <8 x i32> %1636, %1321
  %1642 = mul <8 x i32> %1640, %1320
  %1643 = add <8 x i32> %1642, %1641
  store <8 x i32> %1643, <8 x i32>* %449, align 32
  br i1 %267, label %1650, label %1644

1644:                                             ; preds = %1631
  %1645 = icmp eq i8 %2, 0
  br i1 %1645, label %1646, label %1666

1646:                                             ; preds = %1644
  %1647 = mul <8 x i32> %1640, %1321
  %1648 = mul <8 x i32> %1636, %1320
  %1649 = sub <8 x i32> %1647, %1648
  br label %1672

1650:                                             ; preds = %1631
  %1651 = add nsw i32 %196, -1
  %1652 = shl i32 1, %1651
  %1653 = insertelement <8 x i32> undef, i32 %1652, i32 0
  %1654 = shufflevector <8 x i32> %1653, <8 x i32> undef, <8 x i32> zeroinitializer
  %1655 = add <8 x i32> %1643, %1654
  %1656 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1655, i32 %196) #7
  store <8 x i32> %1656, <8 x i32>* %449, align 32
  %1657 = mul <8 x i32> %1640, %1321
  %1658 = mul <8 x i32> %1636, %1320
  %1659 = sub <8 x i32> %1657, %1658
  %1660 = add nsw i32 %196, -1
  %1661 = shl i32 1, %1660
  %1662 = insertelement <8 x i32> undef, i32 %1661, i32 0
  %1663 = shufflevector <8 x i32> %1662, <8 x i32> undef, <8 x i32> zeroinitializer
  %1664 = add <8 x i32> %1659, %1663
  %1665 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %1664, i32 %196) #7
  br label %1672

1666:                                             ; preds = %1644
  %1667 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1643, i32 %266) #7
  store <8 x i32> %1667, <8 x i32>* %449, align 32
  %1668 = mul <8 x i32> %1640, %1321
  %1669 = mul <8 x i32> %1636, %1320
  %1670 = sub <8 x i32> %1668, %1669
  %1671 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %1670, i32 %266) #7
  br label %1672

1672:                                             ; preds = %1646, %1666, %1650
  %1673 = phi <8 x i32> [ %1649, %1646 ], [ %1671, %1666 ], [ %1665, %1650 ]
  %1674 = phi <8 x i32> [ %1643, %1646 ], [ %1667, %1666 ], [ %1656, %1650 ]
  store <8 x i32> %1673, <8 x i32>* %435, align 32
  %1675 = mul nsw i32 %4, 31
  %1676 = bitcast <4 x i64>* %1 to <8 x i32>*
  store <8 x i32> %811, <8 x i32>* %1676, align 32
  %1677 = sext i32 %1675 to i64
  %1678 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1677
  %1679 = bitcast <4 x i64>* %1678 to <8 x i32>*
  store <8 x i32> %1381, <8 x i32>* %1679, align 32
  %1680 = mul i32 %4, 30
  %1681 = sext i32 %4 to i64
  %1682 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1681
  %1683 = bitcast <4 x i64>* %1682 to <8 x i32>*
  store <8 x i32> %1382, <8 x i32>* %1683, align 32
  %1684 = sext i32 %1680 to i64
  %1685 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1684
  %1686 = bitcast <4 x i64>* %1685 to <8 x i32>*
  store <8 x i32> %1186, <8 x i32>* %1686, align 32
  %1687 = shl nsw i32 %4, 1
  %1688 = mul i32 %4, 29
  %1689 = sext i32 %1687 to i64
  %1690 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1689
  %1691 = bitcast <4 x i64>* %1690 to <8 x i32>*
  store <8 x i32> %1185, <8 x i32>* %1691, align 32
  %1692 = sext i32 %1688 to i64
  %1693 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1692
  %1694 = bitcast <4 x i64>* %1693 to <8 x i32>*
  store <8 x i32> %1674, <8 x i32>* %1694, align 32
  %1695 = mul nsw i32 %4, 3
  %1696 = mul i32 %4, 28
  %1697 = sext i32 %1695 to i64
  %1698 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1697
  %1699 = bitcast <4 x i64>* %1698 to <8 x i32>*
  store <8 x i32> %1673, <8 x i32>* %1699, align 32
  %1700 = sext i32 %1696 to i64
  %1701 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1700
  %1702 = bitcast <4 x i64>* %1701 to <8 x i32>*
  store <8 x i32> %945, <8 x i32>* %1702, align 32
  %1703 = shl nsw i32 %4, 2
  %1704 = mul i32 %4, 27
  %1705 = sext i32 %1703 to i64
  %1706 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1705
  %1707 = bitcast <4 x i64>* %1706 to <8 x i32>*
  store <8 x i32> %946, <8 x i32>* %1707, align 32
  %1708 = sext i32 %1704 to i64
  %1709 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1708
  %1710 = bitcast <4 x i64>* %1709 to <8 x i32>*
  store <8 x i32> %1548, <8 x i32>* %1710, align 32
  %1711 = mul nsw i32 %4, 5
  %1712 = mul i32 %4, 26
  %1713 = sext i32 %1711 to i64
  %1714 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1713
  %1715 = bitcast <4 x i64>* %1714 to <8 x i32>*
  store <8 x i32> %1549, <8 x i32>* %1715, align 32
  %1716 = sext i32 %1712 to i64
  %1717 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1716
  %1718 = bitcast <4 x i64>* %1717 to <8 x i32>*
  store <8 x i32> %1311, <8 x i32>* %1718, align 32
  %1719 = mul nsw i32 %4, 6
  %1720 = mul i32 %4, 25
  %1721 = sext i32 %1719 to i64
  %1722 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1721
  %1723 = bitcast <4 x i64>* %1722 to <8 x i32>*
  store <8 x i32> %1312, <8 x i32>* %1723, align 32
  %1724 = sext i32 %1720 to i64
  %1725 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1724
  %1726 = bitcast <4 x i64>* %1725 to <8 x i32>*
  store <8 x i32> %1507, <8 x i32>* %1726, align 32
  %1727 = mul nsw i32 %4, 7
  %1728 = mul i32 %4, 24
  %1729 = sext i32 %1727 to i64
  %1730 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1729
  %1731 = bitcast <4 x i64>* %1730 to <8 x i32>*
  store <8 x i32> %1506, <8 x i32>* %1731, align 32
  %1732 = sext i32 %1728 to i64
  %1733 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1732
  %1734 = bitcast <4 x i64>* %1733 to <8 x i32>*
  store <8 x i32> %812, <8 x i32>* %1734, align 32
  %1735 = shl nsw i32 %4, 3
  %1736 = mul i32 %4, 23
  %1737 = sext i32 %1735 to i64
  %1738 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1737
  %1739 = bitcast <4 x i64>* %1738 to <8 x i32>*
  store <8 x i32> %809, <8 x i32>* %1739, align 32
  %1740 = sext i32 %1736 to i64
  %1741 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1740
  %1742 = bitcast <4 x i64>* %1741 to <8 x i32>*
  store <8 x i32> %1464, <8 x i32>* %1742, align 32
  %1743 = mul nsw i32 %4, 9
  %1744 = mul i32 %4, 22
  %1745 = sext i32 %1743 to i64
  %1746 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1745
  %1747 = bitcast <4 x i64>* %1746 to <8 x i32>*
  store <8 x i32> %1465, <8 x i32>* %1747, align 32
  %1748 = sext i32 %1744 to i64
  %1749 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1748
  %1750 = bitcast <4 x i64>* %1749 to <8 x i32>*
  store <8 x i32> %1270, <8 x i32>* %1750, align 32
  %1751 = mul nsw i32 %4, 10
  %1752 = mul i32 %4, 21
  %1753 = sext i32 %1751 to i64
  %1754 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1753
  %1755 = bitcast <4 x i64>* %1754 to <8 x i32>*
  store <8 x i32> %1269, <8 x i32>* %1755, align 32
  %1756 = sext i32 %1752 to i64
  %1757 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1756
  %1758 = bitcast <4 x i64>* %1757 to <8 x i32>*
  store <8 x i32> %1591, <8 x i32>* %1758, align 32
  %1759 = mul nsw i32 %4, 11
  %1760 = mul i32 %4, 20
  %1761 = sext i32 %1759 to i64
  %1762 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1761
  %1763 = bitcast <4 x i64>* %1762 to <8 x i32>*
  store <8 x i32> %1590, <8 x i32>* %1763, align 32
  %1764 = sext i32 %1760 to i64
  %1765 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1764
  %1766 = bitcast <4 x i64>* %1765 to <8 x i32>*
  store <8 x i32> %988, <8 x i32>* %1766, align 32
  %1767 = mul nsw i32 %4, 12
  %1768 = mul i32 %4, 19
  %1769 = sext i32 %1767 to i64
  %1770 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1769
  %1771 = bitcast <4 x i64>* %1770 to <8 x i32>*
  store <8 x i32> %987, <8 x i32>* %1771, align 32
  %1772 = sext i32 %1768 to i64
  %1773 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1772
  %1774 = bitcast <4 x i64>* %1773 to <8 x i32>*
  store <8 x i32> %1632, <8 x i32>* %1774, align 32
  %1775 = mul nsw i32 %4, 13
  %1776 = mul i32 %4, 18
  %1777 = load <4 x i64>, <4 x i64>* %446, align 32
  %1778 = sext i32 %1775 to i64
  %1779 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1778
  store <4 x i64> %1777, <4 x i64>* %1779, align 32
  %1780 = sext i32 %1776 to i64
  %1781 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1780
  %1782 = bitcast <4 x i64>* %1781 to <8 x i32>*
  store <8 x i32> %1227, <8 x i32>* %1782, align 32
  %1783 = mul nsw i32 %4, 14
  %1784 = mul i32 %4, 17
  %1785 = sext i32 %1783 to i64
  %1786 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1785
  %1787 = bitcast <4 x i64>* %1786 to <8 x i32>*
  store <8 x i32> %1228, <8 x i32>* %1787, align 32
  %1788 = load <4 x i64>, <4 x i64>* %248, align 32
  %1789 = sext i32 %1784 to i64
  %1790 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1789
  store <4 x i64> %1788, <4 x i64>* %1790, align 32
  %1791 = mul nsw i32 %4, 15
  %1792 = shl i32 %4, 4
  %1793 = load <4 x i64>, <4 x i64>* %455, align 32
  %1794 = sext i32 %1791 to i64
  %1795 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1794
  store <4 x i64> %1793, <4 x i64>* %1795, align 32
  %1796 = sext i32 %1792 to i64
  %1797 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %1796
  %1798 = bitcast <4 x i64>* %1797 to <8 x i32>*
  store <8 x i32> %810, <8 x i32>* %1798, align 32
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %7) #7
  ret void
}

; Function Attrs: inlinehint nofree nounwind ssp uwtable
define internal void @idtx32x32_avx2(<4 x i64>* nocapture readonly, <4 x i64>* nocapture, i8 signext, i32, i32) #6 {
  %6 = sext i32 %4 to i64
  %7 = sext i32 %3 to i64
  br label %9

8:                                                ; preds = %9
  ret void

9:                                                ; preds = %5, %9
  %10 = phi i64 [ 0, %5 ], [ %82, %9 ]
  %11 = mul nsw i64 %10, %7
  %12 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %11
  %13 = bitcast <4 x i64>* %12 to <8 x i32>*
  %14 = load <8 x i32>, <8 x i32>* %13, align 32
  %15 = shl <8 x i32> %14, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %16 = mul nsw i64 %10, %6
  %17 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %16
  %18 = bitcast <4 x i64>* %17 to <8 x i32>*
  store <8 x i32> %15, <8 x i32>* %18, align 32
  %19 = or i64 %10, 1
  %20 = mul nsw i64 %19, %7
  %21 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %20
  %22 = bitcast <4 x i64>* %21 to <8 x i32>*
  %23 = load <8 x i32>, <8 x i32>* %22, align 32
  %24 = shl <8 x i32> %23, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %25 = mul nsw i64 %19, %6
  %26 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %25
  %27 = bitcast <4 x i64>* %26 to <8 x i32>*
  store <8 x i32> %24, <8 x i32>* %27, align 32
  %28 = or i64 %10, 2
  %29 = mul nsw i64 %28, %7
  %30 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %29
  %31 = bitcast <4 x i64>* %30 to <8 x i32>*
  %32 = load <8 x i32>, <8 x i32>* %31, align 32
  %33 = shl <8 x i32> %32, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %34 = mul nsw i64 %28, %6
  %35 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %34
  %36 = bitcast <4 x i64>* %35 to <8 x i32>*
  store <8 x i32> %33, <8 x i32>* %36, align 32
  %37 = or i64 %10, 3
  %38 = mul nsw i64 %37, %7
  %39 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %38
  %40 = bitcast <4 x i64>* %39 to <8 x i32>*
  %41 = load <8 x i32>, <8 x i32>* %40, align 32
  %42 = shl <8 x i32> %41, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %43 = mul nsw i64 %37, %6
  %44 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %43
  %45 = bitcast <4 x i64>* %44 to <8 x i32>*
  store <8 x i32> %42, <8 x i32>* %45, align 32
  %46 = or i64 %10, 4
  %47 = mul nsw i64 %46, %7
  %48 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %47
  %49 = bitcast <4 x i64>* %48 to <8 x i32>*
  %50 = load <8 x i32>, <8 x i32>* %49, align 32
  %51 = shl <8 x i32> %50, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %52 = mul nsw i64 %46, %6
  %53 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %52
  %54 = bitcast <4 x i64>* %53 to <8 x i32>*
  store <8 x i32> %51, <8 x i32>* %54, align 32
  %55 = or i64 %10, 5
  %56 = mul nsw i64 %55, %7
  %57 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %56
  %58 = bitcast <4 x i64>* %57 to <8 x i32>*
  %59 = load <8 x i32>, <8 x i32>* %58, align 32
  %60 = shl <8 x i32> %59, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %61 = mul nsw i64 %55, %6
  %62 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %61
  %63 = bitcast <4 x i64>* %62 to <8 x i32>*
  store <8 x i32> %60, <8 x i32>* %63, align 32
  %64 = or i64 %10, 6
  %65 = mul nsw i64 %64, %7
  %66 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %65
  %67 = bitcast <4 x i64>* %66 to <8 x i32>*
  %68 = load <8 x i32>, <8 x i32>* %67, align 32
  %69 = shl <8 x i32> %68, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %70 = mul nsw i64 %64, %6
  %71 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %70
  %72 = bitcast <4 x i64>* %71 to <8 x i32>*
  store <8 x i32> %69, <8 x i32>* %72, align 32
  %73 = or i64 %10, 7
  %74 = mul nsw i64 %73, %7
  %75 = getelementptr inbounds <4 x i64>, <4 x i64>* %0, i64 %74
  %76 = bitcast <4 x i64>* %75 to <8 x i32>*
  %77 = load <8 x i32>, <8 x i32>* %76, align 32
  %78 = shl <8 x i32> %77, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %79 = mul nsw i64 %73, %6
  %80 = getelementptr inbounds <4 x i64>, <4 x i64>* %1, i64 %79
  %81 = bitcast <4 x i64>* %80 to <8 x i32>*
  store <8 x i32> %78, <8 x i32>* %81, align 32
  %82 = add nuw nsw i64 %10, 8
  %83 = icmp ult i64 %82, 32
  br i1 %83, label %9, label %8
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
