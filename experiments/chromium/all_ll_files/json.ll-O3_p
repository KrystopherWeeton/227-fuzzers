; ModuleID = '../../v8/third_party/inspector_protocol/crdtp/json.cc'
source_filename = "../../v8/third_party/inspector_protocol/crdtp/json.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8_crdtp::ParserHandler" = type { i32 (...)** }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i8* }
%"struct.v8_crdtp::Status" = type { i32, i64 }
%"class.std::__1::stack" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.9" }
%"struct.std::__1::__split_buffer" = type { %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.std::__1::__compressed_pair.4" }
%"class.v8_crdtp::json::(anonymous namespace)::State" = type { i32, i32 }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.v8_crdtp::json::(anonymous namespace)::State"** }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.v8_crdtp::json::(anonymous namespace)::JsonParser" = type { i8*, i8, %"class.v8_crdtp::ParserHandler"* }
%"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21" = type { i16*, i8, %"class.v8_crdtp::ParserHandler"* }
%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder" = type { %"class.v8_crdtp::ParserHandler", %"class.std::__1::vector"*, %"struct.v8_crdtp::Status"*, %"class.std::__1::stack" }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19" = type { %"class.v8_crdtp::ParserHandler", %"class.std::__1::basic_string"*, %"struct.v8_crdtp::Status"*, %"class.std::__1::stack" }
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.std::__1::vector.36" = type { %"class.std::__1::__vector_base.37" }
%"class.std::__1::__vector_base.37" = type { i16*, i16*, %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { i16* }

$_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_ = comdat any

$_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertINS_11__wrap_iterIPKcEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS5_IPhEEE4typeENS5_IPKhEESA_SA_ = comdat any

$_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertIPKcEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueEE13_EnableIfImplINS_11__wrap_iterIPcEEEENSD_IS8_EESA_SA_ = comdat any

$_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertINS_11__wrap_iterIPKcEEEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueEE13_EnableIfImplINS7_IPcEEEESA_SC_SC_ = comdat any

@_ZTVN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__16vectorIhNS3_9allocatorIhEEEEEE = internal unnamed_addr constant { [16 x i8*] } { [16 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"*)* @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__16vectorIhNS3_9allocatorIhEEEEED2Ev to i8*), i8* bitcast (void (%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"*)* @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__16vectorIhNS3_9allocatorIhEEEEED0Ev to i8*), i8* bitcast (void (%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"*)* @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__16vectorIhNS3_9allocatorIhEEEEE14HandleMapBeginEv to i8*), i8* bitcast (void (%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"*)* @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__16vectorIhNS3_9allocatorIhEEEEE12HandleMapEndEv to i8*), i8* bitcast (void (%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"*)* @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__16vectorIhNS3_9allocatorIhEEEEE16HandleArrayBeginEv to i8*), i8* bitcast (void (%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"*)* @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__16vectorIhNS3_9allocatorIhEEEEE14HandleArrayEndEv to i8*), i8* bitcast (void (%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"*, i8*, i64)* @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__16vectorIhNS3_9allocatorIhEEEEE13HandleString8ENS_4spanIhEE to i8*), i8* bitcast (void (%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"*, i16*, i64)* @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__16vectorIhNS3_9allocatorIhEEEEE14HandleString16ENS_4spanItEE to i8*), i8* bitcast (void (%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"*, i8*, i64)* @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__16vectorIhNS3_9allocatorIhEEEEE12HandleBinaryENS_4spanIhEE to i8*), i8* bitcast (void (%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"*, double)* @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__16vectorIhNS3_9allocatorIhEEEEE12HandleDoubleEd to i8*), i8* bitcast (void (%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"*, i32)* @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__16vectorIhNS3_9allocatorIhEEEEE11HandleInt32Ei to i8*), i8* bitcast (void (%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"*, i1)* @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__16vectorIhNS3_9allocatorIhEEEEE10HandleBoolEb to i8*), i8* bitcast (void (%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"*)* @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__16vectorIhNS3_9allocatorIhEEEEE10HandleNullEv to i8*), i8* bitcast (void (%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"*, i32, i64)* @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__16vectorIhNS3_9allocatorIhEEEEE11HandleErrorENS_6StatusE to i8*)] }, align 8
@.str.1 = private unnamed_addr constant [3 x i8] c"\5C\22\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"\5C\5C\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"\5Cb\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"\5Cf\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"\5Cn\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"\5Cr\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"\5Ct\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"\5Cu\00", align 1
@_ZN8v8_crdtp4json12_GLOBAL__N_112kBase64TableE = internal unnamed_addr constant [65 x i8] c"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\00", align 16
@.str.9 = private unnamed_addr constant [5 x i8] c"null\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c".0\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"-0\00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@_ZTVN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE = internal unnamed_addr constant { [16 x i8*] } { [16 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"*)* @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEED2Ev to i8*), i8* bitcast (void (%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"*)* @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEED0Ev to i8*), i8* bitcast (void (%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"*)* @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE14HandleMapBeginEv to i8*), i8* bitcast (void (%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"*)* @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE12HandleMapEndEv to i8*), i8* bitcast (void (%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"*)* @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE16HandleArrayBeginEv to i8*), i8* bitcast (void (%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"*)* @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE14HandleArrayEndEv to i8*), i8* bitcast (void (%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"*, i8*, i64)* @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE13HandleString8ENS_4spanIhEE to i8*), i8* bitcast (void (%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"*, i16*, i64)* @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE14HandleString16ENS_4spanItEE to i8*), i8* bitcast (void (%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"*, i8*, i64)* @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE12HandleBinaryENS_4spanIhEE to i8*), i8* bitcast (void (%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"*, double)* @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE12HandleDoubleEd to i8*), i8* bitcast (void (%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"*, i32)* @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE11HandleInt32Ei to i8*), i8* bitcast (void (%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"*, i1)* @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE10HandleBoolEb to i8*), i8* bitcast (void (%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"*)* @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE10HandleNullEv to i8*), i8* bitcast (void (%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"*, i32, i64)* @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE11HandleErrorENS_6StatusE to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8_crdtp::ParserHandler"* @_ZN8v8_crdtp4json14NewJSONEncoderEPNSt3__16vectorIhNS1_9allocatorIhEEEEPNS_6StatusE(%"class.std::__1::vector"*, %"struct.v8_crdtp::Status"*) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = tail call i8* @_Znwm(i64 72) #11
  %5 = bitcast i8* %4 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__16vectorIhNS3_9allocatorIhEEEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds i8, i8* %4, i64 8
  %7 = bitcast i8* %6 to %"class.std::__1::vector"**
  store %"class.std::__1::vector"* %0, %"class.std::__1::vector"** %7, align 8
  %8 = getelementptr inbounds i8, i8* %4, i64 16
  %9 = bitcast i8* %8 to %"struct.v8_crdtp::Status"**
  store %"struct.v8_crdtp::Status"* %1, %"struct.v8_crdtp::Status"** %9, align 8
  %10 = getelementptr inbounds i8, i8* %4, i64 24
  %11 = bitcast i8* %10 to %"class.std::__1::stack"*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 48, i1 false) #12
  %12 = bitcast %"struct.v8_crdtp::Status"* %1 to i8*
  %13 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %1, i64 0, i32 0
  store i32 0, i32* %13, align 8
  %14 = getelementptr inbounds i8, i8* %12, i64 4
  %15 = bitcast i8* %14 to i32*
  store i32 0, i32* %15, align 4
  %16 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %1, i64 0, i32 1
  store i64 -1, i64* %16, align 8
  %17 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #12
  store i32 0, i32* %3, align 4
  call fastcc void @_ZNSt3__15stackIN8v8_crdtp4json12_GLOBAL__N_15StateENS_5dequeIS4_NS_9allocatorIS4_EEEEE7emplaceIJNS3_9ContainerEEEEvDpOT_(%"class.std::__1::stack"* %11, i32* nonnull dereferenceable(4) %3) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #12
  %18 = bitcast i8* %4 to %"class.v8_crdtp::ParserHandler"*
  ret %"class.v8_crdtp::ParserHandler"* %18
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8_crdtp::ParserHandler"* @_ZN8v8_crdtp4json14NewJSONEncoderEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPNS_6StatusE(%"class.std::__1::basic_string"*, %"struct.v8_crdtp::Status"*) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = tail call i8* @_Znwm(i64 72) #11
  %5 = bitcast i8* %4 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds i8, i8* %4, i64 8
  %7 = bitcast i8* %6 to %"class.std::__1::basic_string"**
  store %"class.std::__1::basic_string"* %0, %"class.std::__1::basic_string"** %7, align 8
  %8 = getelementptr inbounds i8, i8* %4, i64 16
  %9 = bitcast i8* %8 to %"struct.v8_crdtp::Status"**
  store %"struct.v8_crdtp::Status"* %1, %"struct.v8_crdtp::Status"** %9, align 8
  %10 = getelementptr inbounds i8, i8* %4, i64 24
  %11 = bitcast i8* %10 to %"class.std::__1::stack"*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 48, i1 false) #12
  %12 = bitcast %"struct.v8_crdtp::Status"* %1 to i8*
  %13 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %1, i64 0, i32 0
  store i32 0, i32* %13, align 8
  %14 = getelementptr inbounds i8, i8* %12, i64 4
  %15 = bitcast i8* %14 to i32*
  store i32 0, i32* %15, align 4
  %16 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %1, i64 0, i32 1
  store i64 -1, i64* %16, align 8
  %17 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #12
  store i32 0, i32* %3, align 4
  call fastcc void @_ZNSt3__15stackIN8v8_crdtp4json12_GLOBAL__N_15StateENS_5dequeIS4_NS_9allocatorIS4_EEEEE7emplaceIJNS3_9ContainerEEEEvDpOT_(%"class.std::__1::stack"* %11, i32* nonnull dereferenceable(4) %3) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #12
  %18 = bitcast i8* %4 to %"class.v8_crdtp::ParserHandler"*
  ret %"class.v8_crdtp::ParserHandler"* %18
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8v8_crdtp4json9ParseJSONENS_4spanIhEEPNS_13ParserHandlerE(i8*, i64, %"class.v8_crdtp::ParserHandler"*) local_unnamed_addr #0 {
  %4 = alloca i8*, align 8
  %5 = alloca %"class.v8_crdtp::json::(anonymous namespace)::JsonParser", align 8
  %6 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #12
  %7 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %5, i64 0, i32 0
  %8 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %5, i64 0, i32 1
  store i8 0, i8* %8, align 8
  %9 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %5, i64 0, i32 2
  store %"class.v8_crdtp::ParserHandler"* %2, %"class.v8_crdtp::ParserHandler"** %9, align 8
  store i8* %0, i8** %7, align 8
  %10 = getelementptr inbounds i8, i8* %0, i64 %1
  %11 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #12
  store i8* null, i8** %4, align 8
  call fastcc void @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserIhE10ParseValueEPKhS5_PS5_i(%"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* nonnull %5, i8* %0, i8* %10, i8** nonnull %4, i32 0) #12
  %12 = load i8, i8* %8, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %27

14:                                               ; preds = %3
  %15 = load i8*, i8** %4, align 8
  %16 = icmp eq i8* %15, %10
  br i1 %16, label %27, label %17

17:                                               ; preds = %14
  %18 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %9, align 8
  %19 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %5 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = ptrtoint i8* %15 to i64
  %22 = sub i64 %21, %20
  %23 = bitcast %"class.v8_crdtp::ParserHandler"* %18 to void (%"class.v8_crdtp::ParserHandler"*, i32, i64)***
  %24 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*** %23, align 8
  %25 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %24, i64 13
  %26 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %25, align 8
  call void %26(%"class.v8_crdtp::ParserHandler"* %18, i32 1, i64 %22) #12
  store i8 1, i8* %8, align 8
  br label %27

27:                                               ; preds = %3, %14, %17
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #12
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8v8_crdtp4json9ParseJSONENS_4spanItEEPNS_13ParserHandlerE(i16*, i64, %"class.v8_crdtp::ParserHandler"*) local_unnamed_addr #0 {
  %4 = alloca i16*, align 8
  %5 = alloca %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21", align 8
  %6 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #12
  %7 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %5, i64 0, i32 0
  %8 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %5, i64 0, i32 1
  store i8 0, i8* %8, align 8
  %9 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %5, i64 0, i32 2
  store %"class.v8_crdtp::ParserHandler"* %2, %"class.v8_crdtp::ParserHandler"** %9, align 8
  store i16* %0, i16** %7, align 8
  %10 = getelementptr inbounds i16, i16* %0, i64 %1
  %11 = bitcast i16** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #12
  store i16* null, i16** %4, align 8
  call fastcc void @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserItE10ParseValueEPKtS5_PS5_i(%"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* nonnull %5, i16* %0, i16* %10, i16** nonnull %4, i32 0) #12
  %12 = load i8, i8* %8, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %28

14:                                               ; preds = %3
  %15 = load i16*, i16** %4, align 8
  %16 = icmp eq i16* %15, %10
  br i1 %16, label %28, label %17

17:                                               ; preds = %14
  %18 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %9, align 8
  %19 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %5 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = ptrtoint i16* %15 to i64
  %22 = sub i64 %21, %20
  %23 = ashr exact i64 %22, 1
  %24 = bitcast %"class.v8_crdtp::ParserHandler"* %18 to void (%"class.v8_crdtp::ParserHandler"*, i32, i64)***
  %25 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %25, i64 13
  %27 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %26, align 8
  call void %27(%"class.v8_crdtp::ParserHandler"* %18, i32 1, i64 %23) #12
  store i8 1, i8* %8, align 8
  br label %28

28:                                               ; preds = %3, %14, %17
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden { i32, i64 } @_ZN8v8_crdtp4json17ConvertCBORToJSONENS_4spanIhEEPNSt3__16vectorIhNS3_9allocatorIhEEEE(i8*, i64, %"class.std::__1::vector"*) local_unnamed_addr #0 {
  %4 = alloca i32, align 4
  %5 = alloca %"struct.v8_crdtp::Status", align 8
  %6 = bitcast %"struct.v8_crdtp::Status"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6)
  %7 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %5, i64 0, i32 0
  %8 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %5, i64 0, i32 1
  %9 = tail call i8* @_Znwm(i64 72) #11
  %10 = bitcast i8* %9 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__16vectorIhNS3_9allocatorIhEEEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %11 = getelementptr inbounds i8, i8* %9, i64 8
  %12 = bitcast i8* %11 to %"class.std::__1::vector"**
  store %"class.std::__1::vector"* %2, %"class.std::__1::vector"** %12, align 8
  %13 = getelementptr inbounds i8, i8* %9, i64 16
  %14 = bitcast i8* %13 to %"struct.v8_crdtp::Status"**
  store %"struct.v8_crdtp::Status"* %5, %"struct.v8_crdtp::Status"** %14, align 8
  %15 = getelementptr inbounds i8, i8* %9, i64 24
  %16 = bitcast i8* %15 to %"class.std::__1::stack"*
  call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 48, i1 false) #12
  store i32 0, i32* %7, align 8
  %17 = getelementptr inbounds i8, i8* %6, i64 4
  %18 = bitcast i8* %17 to i32*
  store i32 0, i32* %18, align 4
  store i64 -1, i64* %8, align 8
  %19 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #12
  store i32 0, i32* %4, align 4
  call fastcc void @_ZNSt3__15stackIN8v8_crdtp4json12_GLOBAL__N_15StateENS_5dequeIS4_NS_9allocatorIS4_EEEEE7emplaceIJNS3_9ContainerEEEEvDpOT_(%"class.std::__1::stack"* %16, i32* nonnull dereferenceable(4) %4) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #12
  %20 = bitcast i8* %9 to %"class.v8_crdtp::ParserHandler"*
  call void @_ZN8v8_crdtp4cbor9ParseCBORENS_4spanIhEEPNS_13ParserHandlerE(i8* %0, i64 %1, %"class.v8_crdtp::ParserHandler"* nonnull %20) #12
  %21 = bitcast i8* %9 to void (%"class.v8_crdtp::ParserHandler"*)***
  %22 = load void (%"class.v8_crdtp::ParserHandler"*)**, void (%"class.v8_crdtp::ParserHandler"*)*** %21, align 8
  %23 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*)*, void (%"class.v8_crdtp::ParserHandler"*)** %22, i64 1
  %24 = load void (%"class.v8_crdtp::ParserHandler"*)*, void (%"class.v8_crdtp::ParserHandler"*)** %23, align 8
  call void %24(%"class.v8_crdtp::ParserHandler"* nonnull %20) #12
  %25 = load i32, i32* %7, align 8
  %26 = insertvalue { i32, i64 } undef, i32 %25, 0
  %27 = load i64, i64* %8, align 8
  %28 = insertvalue { i32, i64 } %26, i64 %27, 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6)
  ret { i32, i64 } %28
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden { i32, i64 } @_ZN8v8_crdtp4json17ConvertCBORToJSONENS_4spanIhEEPNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE(i8*, i64, %"class.std::__1::basic_string"*) local_unnamed_addr #0 {
  %4 = alloca i32, align 4
  %5 = alloca %"struct.v8_crdtp::Status", align 8
  %6 = bitcast %"struct.v8_crdtp::Status"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6)
  %7 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %5, i64 0, i32 0
  %8 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %5, i64 0, i32 1
  %9 = tail call i8* @_Znwm(i64 72) #11
  %10 = bitcast i8* %9 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %11 = getelementptr inbounds i8, i8* %9, i64 8
  %12 = bitcast i8* %11 to %"class.std::__1::basic_string"**
  store %"class.std::__1::basic_string"* %2, %"class.std::__1::basic_string"** %12, align 8
  %13 = getelementptr inbounds i8, i8* %9, i64 16
  %14 = bitcast i8* %13 to %"struct.v8_crdtp::Status"**
  store %"struct.v8_crdtp::Status"* %5, %"struct.v8_crdtp::Status"** %14, align 8
  %15 = getelementptr inbounds i8, i8* %9, i64 24
  %16 = bitcast i8* %15 to %"class.std::__1::stack"*
  call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 48, i1 false) #12
  store i32 0, i32* %7, align 8
  %17 = getelementptr inbounds i8, i8* %6, i64 4
  %18 = bitcast i8* %17 to i32*
  store i32 0, i32* %18, align 4
  store i64 -1, i64* %8, align 8
  %19 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #12
  store i32 0, i32* %4, align 4
  call fastcc void @_ZNSt3__15stackIN8v8_crdtp4json12_GLOBAL__N_15StateENS_5dequeIS4_NS_9allocatorIS4_EEEEE7emplaceIJNS3_9ContainerEEEEvDpOT_(%"class.std::__1::stack"* %16, i32* nonnull dereferenceable(4) %4) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #12
  %20 = bitcast i8* %9 to %"class.v8_crdtp::ParserHandler"*
  call void @_ZN8v8_crdtp4cbor9ParseCBORENS_4spanIhEEPNS_13ParserHandlerE(i8* %0, i64 %1, %"class.v8_crdtp::ParserHandler"* nonnull %20) #12
  %21 = bitcast i8* %9 to void (%"class.v8_crdtp::ParserHandler"*)***
  %22 = load void (%"class.v8_crdtp::ParserHandler"*)**, void (%"class.v8_crdtp::ParserHandler"*)*** %21, align 8
  %23 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*)*, void (%"class.v8_crdtp::ParserHandler"*)** %22, i64 1
  %24 = load void (%"class.v8_crdtp::ParserHandler"*)*, void (%"class.v8_crdtp::ParserHandler"*)** %23, align 8
  call void %24(%"class.v8_crdtp::ParserHandler"* nonnull %20) #12
  %25 = load i32, i32* %7, align 8
  %26 = insertvalue { i32, i64 } undef, i32 %25, 0
  %27 = load i64, i64* %8, align 8
  %28 = insertvalue { i32, i64 } %26, i64 %27, 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6)
  ret { i32, i64 } %28
}

; Function Attrs: nounwind ssp uwtable
define hidden { i32, i64 } @_ZN8v8_crdtp4json17ConvertJSONToCBORENS_4spanIhEEPNSt3__16vectorIhNS3_9allocatorIhEEEE(i8*, i64, %"class.std::__1::vector"*) local_unnamed_addr #0 {
  %4 = alloca i8*, align 8
  %5 = alloca %"class.v8_crdtp::json::(anonymous namespace)::JsonParser", align 8
  %6 = alloca %"struct.v8_crdtp::Status", align 8
  %7 = bitcast %"struct.v8_crdtp::Status"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7)
  %8 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %6, i64 0, i32 0
  store i32 0, i32* %8, align 8
  %9 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %6, i64 0, i32 1
  store i64 -1, i64* %9, align 8
  %10 = call %"class.v8_crdtp::ParserHandler"* @_ZN8v8_crdtp4cbor14NewCBOREncoderEPNSt3__16vectorIhNS1_9allocatorIhEEEEPNS_6StatusE(%"class.std::__1::vector"* %2, %"struct.v8_crdtp::Status"* nonnull %6) #12
  %11 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #12
  %12 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %5, i64 0, i32 0
  %13 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %5, i64 0, i32 1
  store i8 0, i8* %13, align 8
  %14 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %5, i64 0, i32 2
  store %"class.v8_crdtp::ParserHandler"* %10, %"class.v8_crdtp::ParserHandler"** %14, align 8
  store i8* %0, i8** %12, align 8
  %15 = getelementptr inbounds i8, i8* %0, i64 %1
  %16 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #12
  store i8* null, i8** %4, align 8
  call fastcc void @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserIhE10ParseValueEPKhS5_PS5_i(%"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* nonnull %5, i8* %0, i8* %15, i8** nonnull %4, i32 0) #12
  %17 = load i8, i8* %13, align 8, !range !2
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %19, label %32

19:                                               ; preds = %3
  %20 = load i8*, i8** %4, align 8
  %21 = icmp eq i8* %20, %15
  br i1 %21, label %32, label %22

22:                                               ; preds = %19
  %23 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %14, align 8
  %24 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %5 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = ptrtoint i8* %20 to i64
  %27 = sub i64 %26, %25
  %28 = bitcast %"class.v8_crdtp::ParserHandler"* %23 to void (%"class.v8_crdtp::ParserHandler"*, i32, i64)***
  %29 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*** %28, align 8
  %30 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %29, i64 13
  %31 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %30, align 8
  call void %31(%"class.v8_crdtp::ParserHandler"* %23, i32 1, i64 %27) #12
  store i8 1, i8* %13, align 8
  br label %32

32:                                               ; preds = %22, %19, %3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #12
  %33 = icmp eq %"class.v8_crdtp::ParserHandler"* %10, null
  br i1 %33, label %39, label %34

34:                                               ; preds = %32
  %35 = bitcast %"class.v8_crdtp::ParserHandler"* %10 to void (%"class.v8_crdtp::ParserHandler"*)***
  %36 = load void (%"class.v8_crdtp::ParserHandler"*)**, void (%"class.v8_crdtp::ParserHandler"*)*** %35, align 8
  %37 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*)*, void (%"class.v8_crdtp::ParserHandler"*)** %36, i64 1
  %38 = load void (%"class.v8_crdtp::ParserHandler"*)*, void (%"class.v8_crdtp::ParserHandler"*)** %37, align 8
  call void %38(%"class.v8_crdtp::ParserHandler"* nonnull %10) #12
  br label %39

39:                                               ; preds = %32, %34
  %40 = load i32, i32* %8, align 8
  %41 = insertvalue { i32, i64 } undef, i32 %40, 0
  %42 = load i64, i64* %9, align 8
  %43 = insertvalue { i32, i64 } %41, i64 %42, 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7)
  ret { i32, i64 } %43
}

; Function Attrs: nounwind ssp uwtable
define hidden { i32, i64 } @_ZN8v8_crdtp4json17ConvertJSONToCBORENS_4spanItEEPNSt3__16vectorIhNS3_9allocatorIhEEEE(i16*, i64, %"class.std::__1::vector"*) local_unnamed_addr #0 {
  %4 = alloca i16*, align 8
  %5 = alloca %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21", align 8
  %6 = alloca %"struct.v8_crdtp::Status", align 8
  %7 = bitcast %"struct.v8_crdtp::Status"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7)
  %8 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %6, i64 0, i32 0
  store i32 0, i32* %8, align 8
  %9 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %6, i64 0, i32 1
  store i64 -1, i64* %9, align 8
  %10 = call %"class.v8_crdtp::ParserHandler"* @_ZN8v8_crdtp4cbor14NewCBOREncoderEPNSt3__16vectorIhNS1_9allocatorIhEEEEPNS_6StatusE(%"class.std::__1::vector"* %2, %"struct.v8_crdtp::Status"* nonnull %6) #12
  %11 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #12
  %12 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %5, i64 0, i32 0
  %13 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %5, i64 0, i32 1
  store i8 0, i8* %13, align 8
  %14 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %5, i64 0, i32 2
  store %"class.v8_crdtp::ParserHandler"* %10, %"class.v8_crdtp::ParserHandler"** %14, align 8
  store i16* %0, i16** %12, align 8
  %15 = getelementptr inbounds i16, i16* %0, i64 %1
  %16 = bitcast i16** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #12
  store i16* null, i16** %4, align 8
  call fastcc void @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserItE10ParseValueEPKtS5_PS5_i(%"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* nonnull %5, i16* %0, i16* %15, i16** nonnull %4, i32 0) #12
  %17 = load i8, i8* %13, align 8, !range !2
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %19, label %33

19:                                               ; preds = %3
  %20 = load i16*, i16** %4, align 8
  %21 = icmp eq i16* %20, %15
  br i1 %21, label %33, label %22

22:                                               ; preds = %19
  %23 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %14, align 8
  %24 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %5 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = ptrtoint i16* %20 to i64
  %27 = sub i64 %26, %25
  %28 = ashr exact i64 %27, 1
  %29 = bitcast %"class.v8_crdtp::ParserHandler"* %23 to void (%"class.v8_crdtp::ParserHandler"*, i32, i64)***
  %30 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*** %29, align 8
  %31 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %30, i64 13
  %32 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %31, align 8
  call void %32(%"class.v8_crdtp::ParserHandler"* %23, i32 1, i64 %28) #12
  store i8 1, i8* %13, align 8
  br label %33

33:                                               ; preds = %22, %19, %3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #12
  %34 = icmp eq %"class.v8_crdtp::ParserHandler"* %10, null
  br i1 %34, label %40, label %35

35:                                               ; preds = %33
  %36 = bitcast %"class.v8_crdtp::ParserHandler"* %10 to void (%"class.v8_crdtp::ParserHandler"*)***
  %37 = load void (%"class.v8_crdtp::ParserHandler"*)**, void (%"class.v8_crdtp::ParserHandler"*)*** %36, align 8
  %38 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*)*, void (%"class.v8_crdtp::ParserHandler"*)** %37, i64 1
  %39 = load void (%"class.v8_crdtp::ParserHandler"*)*, void (%"class.v8_crdtp::ParserHandler"*)** %38, align 8
  call void %39(%"class.v8_crdtp::ParserHandler"* nonnull %10) #12
  br label %40

40:                                               ; preds = %33, %35
  %41 = load i32, i32* %8, align 8
  %42 = insertvalue { i32, i64 } undef, i32 %41, 0
  %43 = load i64, i64* %9, align 8
  %44 = insertvalue { i32, i64 } %42, i64 %43, 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7)
  ret { i32, i64 } %44
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZNSt3__15stackIN8v8_crdtp4json12_GLOBAL__N_15StateENS_5dequeIS4_NS_9allocatorIS4_EEEEE7emplaceIJNS3_9ContainerEEEEvDpOT_(%"class.std::__1::stack"* nocapture, i32* nocapture readonly dereferenceable(4)) unnamed_addr #0 align 2 {
  %3 = getelementptr %"class.std::__1::stack", %"class.std::__1::stack"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %4 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"*** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr %"class.std::__1::stack", %"class.std::__1::stack"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %7 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"*** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp eq i64 %9, 0
  %11 = shl i64 %9, 6
  %12 = add i64 %11, -1
  %13 = select i1 %10, i64 0, i64 %12
  %14 = getelementptr %"class.std::__1::stack", %"class.std::__1::stack"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.std::__1::stack", %"class.std::__1::stack"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = add i64 %17, %15
  %19 = icmp eq i64 %13, %18
  %20 = inttoptr i64 %8 to %"class.v8_crdtp::json::(anonymous namespace)::State"**
  %21 = inttoptr i64 %5 to %"class.v8_crdtp::json::(anonymous namespace)::State"**
  br i1 %19, label %22, label %790

22:                                               ; preds = %2
  %23 = icmp ugt i64 %15, 511
  br i1 %23, label %24, label %170

24:                                               ; preds = %22
  %25 = add i64 %15, -512
  store i64 %25, i64* %14, align 8
  %26 = inttoptr i64 %8 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %20, i64 1
  store %"class.v8_crdtp::json::(anonymous namespace)::State"** %28, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %6, align 8
  %29 = getelementptr inbounds %"class.std::__1::stack", %"class.std::__1::stack"* %0, i64 0, i32 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %30 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %29, align 8
  %31 = icmp eq %"class.v8_crdtp::json::(anonymous namespace)::State"** %30, %21
  %32 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %30 to i64
  %33 = inttoptr i64 %5 to i64*
  br i1 %31, label %34, label %166

34:                                               ; preds = %24
  %35 = getelementptr inbounds %"class.std::__1::stack", %"class.std::__1::stack"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %36 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %35, align 8
  %37 = icmp ugt %"class.v8_crdtp::json::(anonymous namespace)::State"** %28, %36
  %38 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %36 to i64
  br i1 %37, label %39, label %58

39:                                               ; preds = %34
  %40 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %28 to i64
  %41 = sub i64 %40, %38
  %42 = ashr exact i64 %41, 3
  %43 = add nsw i64 %42, 1
  %44 = sdiv i64 %43, -2
  %45 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %28, i64 %44
  %46 = sub i64 %5, %40
  %47 = ashr exact i64 %46, 3
  %48 = icmp eq i64 %46, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %39
  %50 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %45 to i8*
  %51 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %28 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %51, i64 %46, i1 false) #12
  %52 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %6, align 8
  br label %53

53:                                               ; preds = %49, %39
  %54 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %28, %39 ], [ %52, %49 ]
  %55 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %45, i64 %47
  store %"class.v8_crdtp::json::(anonymous namespace)::State"** %55, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %3, align 8
  %56 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %54, i64 %44
  store %"class.v8_crdtp::json::(anonymous namespace)::State"** %56, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %6, align 8
  %57 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %55 to i64*
  br label %166

58:                                               ; preds = %34
  %59 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"*** %29 to i64*
  %60 = bitcast %"class.std::__1::stack"* %0 to i64*
  %61 = sub i64 %32, %38
  %62 = ashr exact i64 %61, 2
  %63 = icmp eq i64 %61, 0
  %64 = select i1 %63, i64 1, i64 %62
  %65 = icmp ugt i64 %64, 2305843009213693951
  br i1 %65, label %66, label %67

66:                                               ; preds = %58
  tail call void @abort() #13
  unreachable

67:                                               ; preds = %58
  %68 = lshr i64 %64, 2
  %69 = shl i64 %64, 3
  %70 = tail call i8* @_Znwm(i64 %69) #11
  %71 = bitcast i8* %70 to %"class.v8_crdtp::json::(anonymous namespace)::State"**
  %72 = ptrtoint i8* %70 to i64
  %73 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %71, i64 %68
  %74 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %73 to i64
  %75 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %71, i64 %64
  %76 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %75 to i64
  %77 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %28 to i64
  %78 = sub i64 %5, %77
  %79 = ashr exact i64 %78, 3
  %80 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %73, i64 %79
  %81 = icmp eq i64 %78, 0
  br i1 %81, label %157, label %82

82:                                               ; preds = %67
  %83 = add i64 %78, -8
  %84 = lshr i64 %83, 3
  %85 = add nuw nsw i64 %84, 1
  %86 = and i64 %85, 7
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %103, label %88

88:                                               ; preds = %82, %88
  %89 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %96, %88 ], [ %73, %82 ]
  %90 = phi i64 [ %97, %88 ], [ %74, %82 ]
  %91 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %98, %88 ], [ %28, %82 ]
  %92 = phi i64 [ %99, %88 ], [ %86, %82 ]
  %93 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %91 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %90 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %89, i64 1
  %97 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %96 to i64
  %98 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %91, i64 1
  %99 = add i64 %92, -1
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %88, !llvm.loop !3

101:                                              ; preds = %88
  %102 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %96 to i64
  br label %103

103:                                              ; preds = %82, %101
  %104 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %73, %82 ], [ %96, %101 ]
  %105 = phi i64 [ %74, %82 ], [ %102, %101 ]
  %106 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %28, %82 ], [ %98, %101 ]
  %107 = icmp ult i64 %83, 56
  br i1 %107, label %154, label %108

108:                                              ; preds = %103, %108
  %109 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %150, %108 ], [ %104, %103 ]
  %110 = phi i64 [ %151, %108 ], [ %105, %103 ]
  %111 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %152, %108 ], [ %106, %103 ]
  %112 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = inttoptr i64 %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %109, i64 1
  %116 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %111, i64 1
  %117 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %109, i64 2
  %121 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %111, i64 2
  %122 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %109, i64 3
  %126 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %111, i64 3
  %127 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %109, i64 4
  %131 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %111, i64 4
  %132 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %131 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %130 to i64*
  store i64 %133, i64* %134, align 8
  %135 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %109, i64 5
  %136 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %111, i64 5
  %137 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %135 to i64*
  store i64 %138, i64* %139, align 8
  %140 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %109, i64 6
  %141 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %111, i64 6
  %142 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %140 to i64*
  store i64 %143, i64* %144, align 8
  %145 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %109, i64 7
  %146 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %111, i64 7
  %147 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %146 to i64*
  %148 = load i64, i64* %147, align 8
  %149 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %145 to i64*
  store i64 %148, i64* %149, align 8
  %150 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %109, i64 8
  %151 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %150 to i64
  %152 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %111, i64 8
  %153 = icmp eq %"class.v8_crdtp::json::(anonymous namespace)::State"** %80, %150
  br i1 %153, label %154, label %108

154:                                              ; preds = %108, %103
  %155 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %80 to i64
  %156 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %35, align 8
  br label %157

157:                                              ; preds = %154, %67
  %158 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %156, %154 ], [ %36, %67 ]
  %159 = phi i64 [ %155, %154 ], [ %74, %67 ]
  store i64 %72, i64* %60, align 8
  store i64 %74, i64* %7, align 8
  store i64 %159, i64* %4, align 8
  store i64 %76, i64* %59, align 8
  %160 = icmp eq %"class.v8_crdtp::json::(anonymous namespace)::State"** %158, null
  %161 = inttoptr i64 %159 to i64*
  br i1 %160, label %166, label %162

162:                                              ; preds = %157
  %163 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %158 to i8*
  tail call void @_ZdlPv(i8* %163) #11
  %164 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"*** %3 to i64**
  %165 = load i64*, i64** %164, align 8
  br label %166

166:                                              ; preds = %162, %157, %53, %24
  %167 = phi i64* [ %165, %162 ], [ %161, %157 ], [ %57, %53 ], [ %33, %24 ]
  store i64 %27, i64* %167, align 8
  %168 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %3, align 8
  %169 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %168, i64 1
  store %"class.v8_crdtp::json::(anonymous namespace)::State"** %169, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %3, align 8
  br label %790

170:                                              ; preds = %22
  %171 = ashr exact i64 %9, 3
  %172 = getelementptr inbounds %"class.std::__1::stack", %"class.std::__1::stack"* %0, i64 0, i32 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %173 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"*** %172 to i64*
  %174 = load i64, i64* %173, align 8
  %175 = bitcast %"class.std::__1::stack"* %0 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = sub i64 %174, %176
  %178 = ashr exact i64 %177, 3
  %179 = icmp ult i64 %171, %178
  %180 = inttoptr i64 %174 to %"class.v8_crdtp::json::(anonymous namespace)::State"**
  %181 = inttoptr i64 %176 to %"class.v8_crdtp::json::(anonymous namespace)::State"**
  br i1 %179, label %182, label %575

182:                                              ; preds = %170
  %183 = icmp eq i64 %174, %5
  %184 = tail call i8* @_Znwm(i64 4096) #11
  %185 = ptrtoint i8* %184 to i64
  br i1 %183, label %312, label %186

186:                                              ; preds = %182
  %187 = icmp eq %"class.v8_crdtp::json::(anonymous namespace)::State"** %21, %180
  %188 = inttoptr i64 %5 to i64*
  br i1 %187, label %189, label %308

189:                                              ; preds = %186
  %190 = getelementptr inbounds %"class.std::__1::stack", %"class.std::__1::stack"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %191 = icmp ugt %"class.v8_crdtp::json::(anonymous namespace)::State"** %20, %181
  br i1 %191, label %192, label %207

192:                                              ; preds = %189
  %193 = sub i64 %8, %176
  %194 = ashr exact i64 %193, 3
  %195 = add nsw i64 %194, 1
  %196 = sdiv i64 %195, -2
  %197 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %20, i64 %196
  br i1 %10, label %202, label %198

198:                                              ; preds = %192
  %199 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %197 to i8*
  %200 = inttoptr i64 %8 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %199, i8* align 8 %200, i64 %9, i1 false) #12
  %201 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %6, align 8
  br label %202

202:                                              ; preds = %198, %192
  %203 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %20, %192 ], [ %201, %198 ]
  %204 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %197, i64 %171
  store %"class.v8_crdtp::json::(anonymous namespace)::State"** %204, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %3, align 8
  %205 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %203, i64 %196
  store %"class.v8_crdtp::json::(anonymous namespace)::State"** %205, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %6, align 8
  %206 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %204 to i64*
  br label %308

207:                                              ; preds = %189
  %208 = ashr exact i64 %177, 2
  %209 = icmp eq i64 %177, 0
  %210 = select i1 %209, i64 1, i64 %208
  %211 = icmp ugt i64 %210, 2305843009213693951
  br i1 %211, label %212, label %213

212:                                              ; preds = %207
  tail call void @abort() #13
  unreachable

213:                                              ; preds = %207
  %214 = lshr i64 %210, 2
  %215 = shl i64 %210, 3
  %216 = tail call i8* @_Znwm(i64 %215) #11
  %217 = bitcast i8* %216 to %"class.v8_crdtp::json::(anonymous namespace)::State"**
  %218 = ptrtoint i8* %216 to i64
  %219 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %217, i64 %214
  %220 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %219 to i64
  %221 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %217, i64 %210
  %222 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %221 to i64
  %223 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %219, i64 %171
  br i1 %10, label %299, label %224

224:                                              ; preds = %213
  %225 = add i64 %9, -8
  %226 = lshr i64 %225, 3
  %227 = add nuw nsw i64 %226, 1
  %228 = and i64 %227, 7
  %229 = icmp eq i64 %228, 0
  br i1 %229, label %245, label %230

230:                                              ; preds = %224, %230
  %231 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %238, %230 ], [ %219, %224 ]
  %232 = phi i64 [ %239, %230 ], [ %220, %224 ]
  %233 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %240, %230 ], [ %20, %224 ]
  %234 = phi i64 [ %241, %230 ], [ %228, %224 ]
  %235 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %233 to i64*
  %236 = load i64, i64* %235, align 8
  %237 = inttoptr i64 %232 to i64*
  store i64 %236, i64* %237, align 8
  %238 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %231, i64 1
  %239 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %238 to i64
  %240 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %233, i64 1
  %241 = add i64 %234, -1
  %242 = icmp eq i64 %241, 0
  br i1 %242, label %243, label %230, !llvm.loop !5

243:                                              ; preds = %230
  %244 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %238 to i64
  br label %245

245:                                              ; preds = %224, %243
  %246 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %219, %224 ], [ %238, %243 ]
  %247 = phi i64 [ %220, %224 ], [ %244, %243 ]
  %248 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %20, %224 ], [ %240, %243 ]
  %249 = icmp ult i64 %225, 56
  br i1 %249, label %296, label %250

250:                                              ; preds = %245, %250
  %251 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %292, %250 ], [ %246, %245 ]
  %252 = phi i64 [ %293, %250 ], [ %247, %245 ]
  %253 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %294, %250 ], [ %248, %245 ]
  %254 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %253 to i64*
  %255 = load i64, i64* %254, align 8
  %256 = inttoptr i64 %252 to i64*
  store i64 %255, i64* %256, align 8
  %257 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %251, i64 1
  %258 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %253, i64 1
  %259 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %258 to i64*
  %260 = load i64, i64* %259, align 8
  %261 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %257 to i64*
  store i64 %260, i64* %261, align 8
  %262 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %251, i64 2
  %263 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %253, i64 2
  %264 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %263 to i64*
  %265 = load i64, i64* %264, align 8
  %266 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %262 to i64*
  store i64 %265, i64* %266, align 8
  %267 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %251, i64 3
  %268 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %253, i64 3
  %269 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %268 to i64*
  %270 = load i64, i64* %269, align 8
  %271 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %267 to i64*
  store i64 %270, i64* %271, align 8
  %272 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %251, i64 4
  %273 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %253, i64 4
  %274 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %273 to i64*
  %275 = load i64, i64* %274, align 8
  %276 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %272 to i64*
  store i64 %275, i64* %276, align 8
  %277 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %251, i64 5
  %278 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %253, i64 5
  %279 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %278 to i64*
  %280 = load i64, i64* %279, align 8
  %281 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %277 to i64*
  store i64 %280, i64* %281, align 8
  %282 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %251, i64 6
  %283 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %253, i64 6
  %284 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %283 to i64*
  %285 = load i64, i64* %284, align 8
  %286 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %282 to i64*
  store i64 %285, i64* %286, align 8
  %287 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %251, i64 7
  %288 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %253, i64 7
  %289 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %288 to i64*
  %290 = load i64, i64* %289, align 8
  %291 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %287 to i64*
  store i64 %290, i64* %291, align 8
  %292 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %251, i64 8
  %293 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %292 to i64
  %294 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %253, i64 8
  %295 = icmp eq %"class.v8_crdtp::json::(anonymous namespace)::State"** %223, %292
  br i1 %295, label %296, label %250

296:                                              ; preds = %250, %245
  %297 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %223 to i64
  %298 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %190, align 8
  br label %299

299:                                              ; preds = %296, %213
  %300 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %298, %296 ], [ %181, %213 ]
  %301 = phi i64 [ %297, %296 ], [ %220, %213 ]
  store i64 %218, i64* %175, align 8
  store i64 %220, i64* %7, align 8
  store i64 %301, i64* %4, align 8
  store i64 %222, i64* %173, align 8
  %302 = icmp eq %"class.v8_crdtp::json::(anonymous namespace)::State"** %300, null
  %303 = inttoptr i64 %301 to i64*
  br i1 %302, label %308, label %304

304:                                              ; preds = %299
  %305 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %300 to i8*
  tail call void @_ZdlPv(i8* %305) #11
  %306 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"*** %3 to i64**
  %307 = load i64*, i64** %306, align 8
  br label %308

308:                                              ; preds = %304, %299, %202, %186
  %309 = phi i64* [ %307, %304 ], [ %303, %299 ], [ %206, %202 ], [ %188, %186 ]
  store i64 %185, i64* %309, align 8
  %310 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %3, align 8
  %311 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %310, i64 1
  store %"class.v8_crdtp::json::(anonymous namespace)::State"** %311, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %3, align 8
  br label %790

312:                                              ; preds = %182
  %313 = getelementptr inbounds %"class.std::__1::stack", %"class.std::__1::stack"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %314 = icmp eq %"class.v8_crdtp::json::(anonymous namespace)::State"** %20, %181
  br i1 %314, label %315, label %427

315:                                              ; preds = %312
  %316 = icmp ult %"class.v8_crdtp::json::(anonymous namespace)::State"** %21, %180
  br i1 %316, label %317, label %327

317:                                              ; preds = %315
  br i1 %10, label %324, label %318

318:                                              ; preds = %317
  %319 = sub nsw i64 0, %171
  %320 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %21, i64 %319
  %321 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %320 to i8*
  %322 = inttoptr i64 %8 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %321, i8* align 8 %322, i64 %9, i1 false) #12
  %323 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %3, align 8
  br label %324

324:                                              ; preds = %318, %317
  %325 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %323, %318 ], [ %21, %317 ]
  %326 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %320, %318 ], [ %21, %317 ]
  store %"class.v8_crdtp::json::(anonymous namespace)::State"** %326, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %6, align 8
  store %"class.v8_crdtp::json::(anonymous namespace)::State"** %325, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %3, align 8
  br label %427

327:                                              ; preds = %315
  %328 = ashr exact i64 %177, 2
  %329 = icmp eq i64 %177, 0
  %330 = select i1 %329, i64 1, i64 %328
  %331 = icmp ugt i64 %330, 2305843009213693951
  br i1 %331, label %332, label %333

332:                                              ; preds = %327
  tail call void @abort() #13
  unreachable

333:                                              ; preds = %327
  %334 = add nuw nsw i64 %330, 3
  %335 = lshr i64 %334, 2
  %336 = shl i64 %330, 3
  %337 = tail call i8* @_Znwm(i64 %336) #11
  %338 = bitcast i8* %337 to %"class.v8_crdtp::json::(anonymous namespace)::State"**
  %339 = ptrtoint i8* %337 to i64
  %340 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %338, i64 %335
  %341 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %340 to i64
  %342 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %338, i64 %330
  %343 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %342 to i64
  %344 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %340, i64 %171
  br i1 %10, label %420, label %345

345:                                              ; preds = %333
  %346 = add i64 %9, -8
  %347 = lshr i64 %346, 3
  %348 = add nuw nsw i64 %347, 1
  %349 = and i64 %348, 7
  %350 = icmp eq i64 %349, 0
  br i1 %350, label %366, label %351

351:                                              ; preds = %345, %351
  %352 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %359, %351 ], [ %340, %345 ]
  %353 = phi i64 [ %360, %351 ], [ %341, %345 ]
  %354 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %361, %351 ], [ %20, %345 ]
  %355 = phi i64 [ %362, %351 ], [ %349, %345 ]
  %356 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %354 to i64*
  %357 = load i64, i64* %356, align 8
  %358 = inttoptr i64 %353 to i64*
  store i64 %357, i64* %358, align 8
  %359 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %352, i64 1
  %360 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %359 to i64
  %361 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %354, i64 1
  %362 = add i64 %355, -1
  %363 = icmp eq i64 %362, 0
  br i1 %363, label %364, label %351, !llvm.loop !6

364:                                              ; preds = %351
  %365 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %359 to i64
  br label %366

366:                                              ; preds = %345, %364
  %367 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %340, %345 ], [ %359, %364 ]
  %368 = phi i64 [ %341, %345 ], [ %365, %364 ]
  %369 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %20, %345 ], [ %361, %364 ]
  %370 = icmp ult i64 %346, 56
  br i1 %370, label %417, label %371

371:                                              ; preds = %366, %371
  %372 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %413, %371 ], [ %367, %366 ]
  %373 = phi i64 [ %414, %371 ], [ %368, %366 ]
  %374 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %415, %371 ], [ %369, %366 ]
  %375 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %374 to i64*
  %376 = load i64, i64* %375, align 8
  %377 = inttoptr i64 %373 to i64*
  store i64 %376, i64* %377, align 8
  %378 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %372, i64 1
  %379 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %374, i64 1
  %380 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %379 to i64*
  %381 = load i64, i64* %380, align 8
  %382 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %378 to i64*
  store i64 %381, i64* %382, align 8
  %383 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %372, i64 2
  %384 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %374, i64 2
  %385 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %384 to i64*
  %386 = load i64, i64* %385, align 8
  %387 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %383 to i64*
  store i64 %386, i64* %387, align 8
  %388 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %372, i64 3
  %389 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %374, i64 3
  %390 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %389 to i64*
  %391 = load i64, i64* %390, align 8
  %392 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %388 to i64*
  store i64 %391, i64* %392, align 8
  %393 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %372, i64 4
  %394 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %374, i64 4
  %395 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %394 to i64*
  %396 = load i64, i64* %395, align 8
  %397 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %393 to i64*
  store i64 %396, i64* %397, align 8
  %398 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %372, i64 5
  %399 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %374, i64 5
  %400 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %399 to i64*
  %401 = load i64, i64* %400, align 8
  %402 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %398 to i64*
  store i64 %401, i64* %402, align 8
  %403 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %372, i64 6
  %404 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %374, i64 6
  %405 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %404 to i64*
  %406 = load i64, i64* %405, align 8
  %407 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %403 to i64*
  store i64 %406, i64* %407, align 8
  %408 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %372, i64 7
  %409 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %374, i64 7
  %410 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %409 to i64*
  %411 = load i64, i64* %410, align 8
  %412 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %408 to i64*
  store i64 %411, i64* %412, align 8
  %413 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %372, i64 8
  %414 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %413 to i64
  %415 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %374, i64 8
  %416 = icmp eq %"class.v8_crdtp::json::(anonymous namespace)::State"** %344, %413
  br i1 %416, label %417, label %371

417:                                              ; preds = %371, %366
  %418 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %344 to i64
  %419 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %313, align 8
  br label %420

420:                                              ; preds = %417, %333
  %421 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %419, %417 ], [ %20, %333 ]
  %422 = phi i64 [ %418, %417 ], [ %341, %333 ]
  store i64 %339, i64* %175, align 8
  store i64 %341, i64* %7, align 8
  store i64 %422, i64* %4, align 8
  store i64 %343, i64* %173, align 8
  %423 = icmp eq %"class.v8_crdtp::json::(anonymous namespace)::State"** %421, null
  br i1 %423, label %427, label %424

424:                                              ; preds = %420
  %425 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %421 to i8*
  tail call void @_ZdlPv(i8* %425) #11
  %426 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %6, align 8
  br label %427

427:                                              ; preds = %424, %420, %324, %312
  %428 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %426, %424 ], [ %340, %420 ], [ %326, %324 ], [ %20, %312 ]
  %429 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %428, i64 -1
  %430 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %429 to i64*
  store i64 %185, i64* %430, align 8
  %431 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %6, align 8
  %432 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %431, i64 -1
  store %"class.v8_crdtp::json::(anonymous namespace)::State"** %432, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %6, align 8
  %433 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %432 to i64*
  %434 = load i64, i64* %433, align 8
  store %"class.v8_crdtp::json::(anonymous namespace)::State"** %431, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %6, align 8
  %435 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %3, align 8
  %436 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %172, align 8
  %437 = icmp eq %"class.v8_crdtp::json::(anonymous namespace)::State"** %435, %436
  %438 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %436 to i64
  %439 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %435 to i64*
  br i1 %437, label %440, label %571

440:                                              ; preds = %427
  %441 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %313, align 8
  %442 = icmp ugt %"class.v8_crdtp::json::(anonymous namespace)::State"** %431, %441
  %443 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %441 to i64
  br i1 %442, label %444, label %464

444:                                              ; preds = %440
  %445 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %431 to i64
  %446 = sub i64 %445, %443
  %447 = ashr exact i64 %446, 3
  %448 = add nsw i64 %447, 1
  %449 = sdiv i64 %448, -2
  %450 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %431, i64 %449
  %451 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %435 to i64
  %452 = sub i64 %451, %445
  %453 = ashr exact i64 %452, 3
  %454 = icmp eq i64 %452, 0
  br i1 %454, label %459, label %455

455:                                              ; preds = %444
  %456 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %450 to i8*
  %457 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %431 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %456, i8* align 8 %457, i64 %452, i1 false) #12
  %458 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %6, align 8
  br label %459

459:                                              ; preds = %455, %444
  %460 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %431, %444 ], [ %458, %455 ]
  %461 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %450, i64 %453
  store %"class.v8_crdtp::json::(anonymous namespace)::State"** %461, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %3, align 8
  %462 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %460, i64 %449
  store %"class.v8_crdtp::json::(anonymous namespace)::State"** %462, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %6, align 8
  %463 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %461 to i64*
  br label %571

464:                                              ; preds = %440
  %465 = sub i64 %438, %443
  %466 = ashr exact i64 %465, 2
  %467 = icmp eq i64 %465, 0
  %468 = select i1 %467, i64 1, i64 %466
  %469 = icmp ugt i64 %468, 2305843009213693951
  br i1 %469, label %470, label %471

470:                                              ; preds = %464
  tail call void @abort() #13
  unreachable

471:                                              ; preds = %464
  %472 = lshr i64 %468, 2
  %473 = shl i64 %468, 3
  %474 = tail call i8* @_Znwm(i64 %473) #11
  %475 = bitcast i8* %474 to %"class.v8_crdtp::json::(anonymous namespace)::State"**
  %476 = ptrtoint i8* %474 to i64
  %477 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %475, i64 %472
  %478 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %477 to i64
  %479 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %475, i64 %468
  %480 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %479 to i64
  %481 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %435 to i64
  %482 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %431 to i64
  %483 = sub i64 %481, %482
  %484 = ashr exact i64 %483, 3
  %485 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %477, i64 %484
  %486 = icmp eq i64 %483, 0
  br i1 %486, label %562, label %487

487:                                              ; preds = %471
  %488 = add i64 %483, -8
  %489 = lshr i64 %488, 3
  %490 = add nuw nsw i64 %489, 1
  %491 = and i64 %490, 7
  %492 = icmp eq i64 %491, 0
  br i1 %492, label %508, label %493

493:                                              ; preds = %487, %493
  %494 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %501, %493 ], [ %477, %487 ]
  %495 = phi i64 [ %502, %493 ], [ %478, %487 ]
  %496 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %503, %493 ], [ %431, %487 ]
  %497 = phi i64 [ %504, %493 ], [ %491, %487 ]
  %498 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %496 to i64*
  %499 = load i64, i64* %498, align 8
  %500 = inttoptr i64 %495 to i64*
  store i64 %499, i64* %500, align 8
  %501 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %494, i64 1
  %502 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %501 to i64
  %503 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %496, i64 1
  %504 = add i64 %497, -1
  %505 = icmp eq i64 %504, 0
  br i1 %505, label %506, label %493, !llvm.loop !7

506:                                              ; preds = %493
  %507 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %501 to i64
  br label %508

508:                                              ; preds = %487, %506
  %509 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %477, %487 ], [ %501, %506 ]
  %510 = phi i64 [ %478, %487 ], [ %507, %506 ]
  %511 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %431, %487 ], [ %503, %506 ]
  %512 = icmp ult i64 %488, 56
  br i1 %512, label %559, label %513

513:                                              ; preds = %508, %513
  %514 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %555, %513 ], [ %509, %508 ]
  %515 = phi i64 [ %556, %513 ], [ %510, %508 ]
  %516 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %557, %513 ], [ %511, %508 ]
  %517 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %516 to i64*
  %518 = load i64, i64* %517, align 8
  %519 = inttoptr i64 %515 to i64*
  store i64 %518, i64* %519, align 8
  %520 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %514, i64 1
  %521 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %516, i64 1
  %522 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %521 to i64*
  %523 = load i64, i64* %522, align 8
  %524 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %520 to i64*
  store i64 %523, i64* %524, align 8
  %525 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %514, i64 2
  %526 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %516, i64 2
  %527 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %526 to i64*
  %528 = load i64, i64* %527, align 8
  %529 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %525 to i64*
  store i64 %528, i64* %529, align 8
  %530 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %514, i64 3
  %531 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %516, i64 3
  %532 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %531 to i64*
  %533 = load i64, i64* %532, align 8
  %534 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %530 to i64*
  store i64 %533, i64* %534, align 8
  %535 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %514, i64 4
  %536 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %516, i64 4
  %537 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %536 to i64*
  %538 = load i64, i64* %537, align 8
  %539 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %535 to i64*
  store i64 %538, i64* %539, align 8
  %540 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %514, i64 5
  %541 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %516, i64 5
  %542 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %541 to i64*
  %543 = load i64, i64* %542, align 8
  %544 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %540 to i64*
  store i64 %543, i64* %544, align 8
  %545 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %514, i64 6
  %546 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %516, i64 6
  %547 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %546 to i64*
  %548 = load i64, i64* %547, align 8
  %549 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %545 to i64*
  store i64 %548, i64* %549, align 8
  %550 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %514, i64 7
  %551 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %516, i64 7
  %552 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %551 to i64*
  %553 = load i64, i64* %552, align 8
  %554 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %550 to i64*
  store i64 %553, i64* %554, align 8
  %555 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %514, i64 8
  %556 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %555 to i64
  %557 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %516, i64 8
  %558 = icmp eq %"class.v8_crdtp::json::(anonymous namespace)::State"** %485, %555
  br i1 %558, label %559, label %513

559:                                              ; preds = %513, %508
  %560 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %485 to i64
  %561 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %313, align 8
  br label %562

562:                                              ; preds = %559, %471
  %563 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %561, %559 ], [ %441, %471 ]
  %564 = phi i64 [ %560, %559 ], [ %478, %471 ]
  store i64 %476, i64* %175, align 8
  store i64 %478, i64* %7, align 8
  store i64 %564, i64* %4, align 8
  store i64 %480, i64* %173, align 8
  %565 = icmp eq %"class.v8_crdtp::json::(anonymous namespace)::State"** %563, null
  %566 = inttoptr i64 %564 to i64*
  br i1 %565, label %571, label %567

567:                                              ; preds = %562
  %568 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %563 to i8*
  tail call void @_ZdlPv(i8* %568) #11
  %569 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"*** %3 to i64**
  %570 = load i64*, i64** %569, align 8
  br label %571

571:                                              ; preds = %567, %562, %459, %427
  %572 = phi i64* [ %570, %567 ], [ %566, %562 ], [ %463, %459 ], [ %439, %427 ]
  store i64 %434, i64* %572, align 8
  %573 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %3, align 8
  %574 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %573, i64 1
  store %"class.v8_crdtp::json::(anonymous namespace)::State"** %574, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %3, align 8
  br label %790

575:                                              ; preds = %170
  %576 = ashr exact i64 %177, 2
  %577 = icmp eq i64 %177, 0
  %578 = select i1 %577, i64 1, i64 %576
  %579 = icmp ugt i64 %578, 2305843009213693951
  br i1 %579, label %580, label %581

580:                                              ; preds = %575
  tail call void @abort() #13
  unreachable

581:                                              ; preds = %575
  %582 = shl i64 %578, 3
  %583 = tail call i8* @_Znwm(i64 %582) #11
  %584 = bitcast i8* %583 to %"class.v8_crdtp::json::(anonymous namespace)::State"**
  %585 = ptrtoint i8* %583 to i64
  %586 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %584, i64 %171
  %587 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %586 to i64
  %588 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %584, i64 %578
  %589 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %588 to i64
  %590 = tail call i8* @_Znwm(i64 4096) #11
  %591 = ptrtoint i8* %590 to i64
  %592 = icmp eq i64 %171, %578
  br i1 %592, label %593, label %621

593:                                              ; preds = %581
  %594 = icmp ugt %"class.v8_crdtp::json::(anonymous namespace)::State"** %586, %584
  br i1 %594, label %595, label %602

595:                                              ; preds = %593
  %596 = sub i64 %587, %585
  %597 = ashr exact i64 %596, 3
  %598 = add nsw i64 %597, 1
  %599 = sdiv i64 %598, -2
  %600 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %586, i64 %599
  %601 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %600 to i64
  br label %621

602:                                              ; preds = %593
  %603 = sub i64 %589, %585
  %604 = ashr exact i64 %603, 2
  %605 = icmp eq i64 %603, 0
  %606 = select i1 %605, i64 1, i64 %604
  %607 = icmp ugt i64 %606, 2305843009213693951
  br i1 %607, label %608, label %609

608:                                              ; preds = %602
  tail call void @abort() #13
  unreachable

609:                                              ; preds = %602
  %610 = lshr i64 %606, 2
  %611 = shl i64 %606, 3
  %612 = tail call i8* @_Znwm(i64 %611) #11
  %613 = bitcast i8* %612 to %"class.v8_crdtp::json::(anonymous namespace)::State"**
  %614 = ptrtoint i8* %612 to i64
  %615 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %613, i64 %610
  %616 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %615 to i64
  %617 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %613, i64 %606
  %618 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %617 to i64
  tail call void @_ZdlPv(i8* nonnull %583) #11
  %619 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %3, align 8
  %620 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %6, align 8
  br label %621

621:                                              ; preds = %609, %595, %581
  %622 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %20, %595 ], [ %620, %609 ], [ %20, %581 ]
  %623 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %21, %595 ], [ %619, %609 ], [ %21, %581 ]
  %624 = phi i64 [ %585, %595 ], [ %614, %609 ], [ %585, %581 ]
  %625 = phi i64 [ %601, %595 ], [ %616, %609 ], [ %587, %581 ]
  %626 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %600, %595 ], [ %615, %609 ], [ %586, %581 ]
  %627 = phi i64 [ %589, %595 ], [ %618, %609 ], [ %589, %581 ]
  %628 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %626 to i64*
  store i64 %591, i64* %628, align 8
  %629 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %626, i64 1
  %630 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %629 to i64
  %631 = icmp eq %"class.v8_crdtp::json::(anonymous namespace)::State"** %623, %622
  br i1 %631, label %634, label %646

632:                                              ; preds = %778
  %633 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %783 to i64
  br label %634

634:                                              ; preds = %632, %621
  %635 = phi i64 [ %624, %621 ], [ %779, %632 ]
  %636 = phi i64 [ %625, %621 ], [ %633, %632 ]
  %637 = phi i64 [ %630, %621 ], [ %780, %632 ]
  %638 = phi i64 [ %627, %621 ], [ %781, %632 ]
  %639 = getelementptr inbounds %"class.std::__1::stack", %"class.std::__1::stack"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %640 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %639, align 8
  store i64 %635, i64* %175, align 8
  store i64 %636, i64* %7, align 8
  store i64 %637, i64* %4, align 8
  store i64 %638, i64* %173, align 8
  %641 = icmp eq %"class.v8_crdtp::json::(anonymous namespace)::State"** %640, null
  %642 = inttoptr i64 %637 to %"class.v8_crdtp::json::(anonymous namespace)::State"**
  br i1 %641, label %790, label %643

643:                                              ; preds = %634
  %644 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %640 to i8*
  tail call void @_ZdlPv(i8* %644) #11
  %645 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %3, align 8
  br label %790

646:                                              ; preds = %621, %778
  %647 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %652, %778 ], [ %623, %621 ]
  %648 = phi i64 [ %781, %778 ], [ %627, %621 ]
  %649 = phi i64 [ %780, %778 ], [ %630, %621 ]
  %650 = phi i64 [ %787, %778 ], [ %625, %621 ]
  %651 = phi i64 [ %779, %778 ], [ %624, %621 ]
  %652 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %647, i64 -1
  %653 = inttoptr i64 %650 to %"class.v8_crdtp::json::(anonymous namespace)::State"**
  %654 = inttoptr i64 %651 to %"class.v8_crdtp::json::(anonymous namespace)::State"**
  %655 = icmp eq %"class.v8_crdtp::json::(anonymous namespace)::State"** %653, %654
  br i1 %655, label %656, label %778

656:                                              ; preds = %646
  %657 = inttoptr i64 %649 to %"class.v8_crdtp::json::(anonymous namespace)::State"**
  %658 = inttoptr i64 %648 to %"class.v8_crdtp::json::(anonymous namespace)::State"**
  %659 = icmp ult %"class.v8_crdtp::json::(anonymous namespace)::State"** %657, %658
  br i1 %659, label %660, label %677

660:                                              ; preds = %656
  %661 = sub i64 %648, %649
  %662 = ashr exact i64 %661, 3
  %663 = add nsw i64 %662, 1
  %664 = sdiv i64 %663, 2
  %665 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %657, i64 %664
  %666 = sub i64 %649, %650
  %667 = icmp eq i64 %666, 0
  br i1 %667, label %674, label %668

668:                                              ; preds = %660
  %669 = ashr exact i64 %666, 3
  %670 = sub nsw i64 0, %669
  %671 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %665, i64 %670
  %672 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %671 to i8*
  %673 = inttoptr i64 %650 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %672, i8* align 8 %673, i64 %666, i1 false) #12
  br label %674

674:                                              ; preds = %668, %660
  %675 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %671, %668 ], [ %665, %660 ]
  %676 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %665 to i64
  br label %778

677:                                              ; preds = %656
  %678 = sub i64 %648, %651
  %679 = ashr exact i64 %678, 2
  %680 = icmp eq i64 %678, 0
  %681 = select i1 %680, i64 1, i64 %679
  %682 = icmp ugt i64 %681, 2305843009213693951
  br i1 %682, label %683, label %684

683:                                              ; preds = %677
  tail call void @abort() #13
  unreachable

684:                                              ; preds = %677
  %685 = add nuw nsw i64 %681, 3
  %686 = lshr i64 %685, 2
  %687 = shl i64 %681, 3
  %688 = tail call i8* @_Znwm(i64 %687) #11
  %689 = bitcast i8* %688 to %"class.v8_crdtp::json::(anonymous namespace)::State"**
  %690 = ptrtoint i8* %688 to i64
  %691 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %689, i64 %686
  %692 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %691 to i64
  %693 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %689, i64 %681
  %694 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %693 to i64
  %695 = sub i64 %649, %650
  %696 = ashr exact i64 %695, 3
  %697 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %691, i64 %696
  %698 = icmp eq i64 %695, 0
  br i1 %698, label %773, label %699

699:                                              ; preds = %684
  %700 = add i64 %695, -8
  %701 = lshr i64 %700, 3
  %702 = add nuw nsw i64 %701, 1
  %703 = and i64 %702, 7
  %704 = icmp eq i64 %703, 0
  br i1 %704, label %720, label %705

705:                                              ; preds = %699, %705
  %706 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %713, %705 ], [ %691, %699 ]
  %707 = phi i64 [ %714, %705 ], [ %692, %699 ]
  %708 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %715, %705 ], [ %653, %699 ]
  %709 = phi i64 [ %716, %705 ], [ %703, %699 ]
  %710 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %708 to i64*
  %711 = load i64, i64* %710, align 8
  %712 = inttoptr i64 %707 to i64*
  store i64 %711, i64* %712, align 8
  %713 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %706, i64 1
  %714 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %713 to i64
  %715 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %708, i64 1
  %716 = add i64 %709, -1
  %717 = icmp eq i64 %716, 0
  br i1 %717, label %718, label %705, !llvm.loop !8

718:                                              ; preds = %705
  %719 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %713 to i64
  br label %720

720:                                              ; preds = %699, %718
  %721 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %691, %699 ], [ %713, %718 ]
  %722 = phi i64 [ %692, %699 ], [ %719, %718 ]
  %723 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %653, %699 ], [ %715, %718 ]
  %724 = icmp ult i64 %700, 56
  br i1 %724, label %771, label %725

725:                                              ; preds = %720, %725
  %726 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %767, %725 ], [ %721, %720 ]
  %727 = phi i64 [ %768, %725 ], [ %722, %720 ]
  %728 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %769, %725 ], [ %723, %720 ]
  %729 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %728 to i64*
  %730 = load i64, i64* %729, align 8
  %731 = inttoptr i64 %727 to i64*
  store i64 %730, i64* %731, align 8
  %732 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %726, i64 1
  %733 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %728, i64 1
  %734 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %733 to i64*
  %735 = load i64, i64* %734, align 8
  %736 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %732 to i64*
  store i64 %735, i64* %736, align 8
  %737 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %726, i64 2
  %738 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %728, i64 2
  %739 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %738 to i64*
  %740 = load i64, i64* %739, align 8
  %741 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %737 to i64*
  store i64 %740, i64* %741, align 8
  %742 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %726, i64 3
  %743 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %728, i64 3
  %744 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %743 to i64*
  %745 = load i64, i64* %744, align 8
  %746 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %742 to i64*
  store i64 %745, i64* %746, align 8
  %747 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %726, i64 4
  %748 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %728, i64 4
  %749 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %748 to i64*
  %750 = load i64, i64* %749, align 8
  %751 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %747 to i64*
  store i64 %750, i64* %751, align 8
  %752 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %726, i64 5
  %753 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %728, i64 5
  %754 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %753 to i64*
  %755 = load i64, i64* %754, align 8
  %756 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %752 to i64*
  store i64 %755, i64* %756, align 8
  %757 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %726, i64 6
  %758 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %728, i64 6
  %759 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %758 to i64*
  %760 = load i64, i64* %759, align 8
  %761 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %757 to i64*
  store i64 %760, i64* %761, align 8
  %762 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %726, i64 7
  %763 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %728, i64 7
  %764 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %763 to i64*
  %765 = load i64, i64* %764, align 8
  %766 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %762 to i64*
  store i64 %765, i64* %766, align 8
  %767 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %726, i64 8
  %768 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %767 to i64
  %769 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %728, i64 8
  %770 = icmp eq %"class.v8_crdtp::json::(anonymous namespace)::State"** %697, %767
  br i1 %770, label %771, label %725

771:                                              ; preds = %725, %720
  %772 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %697 to i64
  br label %773

773:                                              ; preds = %771, %684
  %774 = phi i64 [ %772, %771 ], [ %692, %684 ]
  %775 = icmp eq i64 %650, 0
  br i1 %775, label %778, label %776

776:                                              ; preds = %773
  %777 = inttoptr i64 %650 to i8*
  tail call void @_ZdlPv(i8* %777) #11
  br label %778

778:                                              ; preds = %776, %773, %674, %646
  %779 = phi i64 [ %651, %674 ], [ %690, %773 ], [ %690, %776 ], [ %651, %646 ]
  %780 = phi i64 [ %676, %674 ], [ %774, %773 ], [ %774, %776 ], [ %649, %646 ]
  %781 = phi i64 [ %648, %674 ], [ %694, %773 ], [ %694, %776 ], [ %648, %646 ]
  %782 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %675, %674 ], [ %691, %773 ], [ %691, %776 ], [ %653, %646 ]
  %783 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %782, i64 -1
  %784 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %652 to i64*
  %785 = load i64, i64* %784, align 8
  %786 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %783 to i64*
  store i64 %785, i64* %786, align 8
  %787 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %783 to i64
  %788 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %6, align 8
  %789 = icmp eq %"class.v8_crdtp::json::(anonymous namespace)::State"** %652, %788
  br i1 %789, label %632, label %646

790:                                              ; preds = %643, %634, %571, %308, %166, %2
  %791 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %645, %643 ], [ %642, %634 ], [ %574, %571 ], [ %311, %308 ], [ %169, %166 ], [ %21, %2 ]
  %792 = load i64, i64* %16, align 8
  %793 = load i64, i64* %14, align 8
  %794 = add i64 %793, %792
  %795 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %6, align 8
  %796 = icmp eq %"class.v8_crdtp::json::(anonymous namespace)::State"** %791, %795
  br i1 %796, label %803, label %797

797:                                              ; preds = %790
  %798 = lshr i64 %794, 9
  %799 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %795, i64 %798
  %800 = load %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %799, align 8
  %801 = and i64 %794, 511
  %802 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %800, i64 %801
  br label %803

803:                                              ; preds = %790, %797
  %804 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"* [ %802, %797 ], [ null, %790 ]
  %805 = load i32, i32* %1, align 4
  %806 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %804, i64 0, i32 0
  store i32 %805, i32* %806, align 4
  %807 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %804, i64 0, i32 1
  store i32 0, i32* %807, align 4
  %808 = load i64, i64* %16, align 8
  %809 = add i64 %808, 1
  store i64 %809, i64* %16, align 8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__16vectorIhNS3_9allocatorIhEEEEED2Ev(%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* nocapture) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__16vectorIhNS3_9allocatorIhEEEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0
  tail call fastcc void @_ZNSt3__112__deque_baseIN8v8_crdtp4json12_GLOBAL__N_15StateENS_9allocatorIS4_EEED2Ev(%"class.std::__1::__deque_base"* %3) #12
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__16vectorIhNS3_9allocatorIhEEEEED0Ev(%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"*) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__16vectorIhNS3_9allocatorIhEEEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0
  tail call fastcc void @_ZNSt3__112__deque_baseIN8v8_crdtp4json12_GLOBAL__N_15StateENS_9allocatorIS4_EEED2Ev(%"class.std::__1::__deque_base"* %3) #12
  %4 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__16vectorIhNS3_9allocatorIhEEEEE14HandleMapBeginEv(%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* nocapture) unnamed_addr #0 align 2 {
  %2 = alloca i32, align 4
  %3 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 2
  %4 = load %"struct.v8_crdtp::Status"*, %"struct.v8_crdtp::Status"** %3, align 8
  %5 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %4, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %82

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3
  %10 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 2, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = add i64 %11, -1
  %15 = add i64 %14, %13
  %16 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %17 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %16, align 8
  %18 = lshr i64 %15, 9
  %19 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %17, i64 %18
  %20 = load %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %19, align 8
  %21 = and i64 %15, 511
  %22 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %20, i64 %21
  %23 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 1
  %24 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  tail call fastcc void @_ZN8v8_crdtp4json12_GLOBAL__N_15State12StartElementEPNSt3__16vectorIhNS3_9allocatorIhEEEE(%"class.v8_crdtp::json::(anonymous namespace)::State"* %22, %"class.std::__1::vector"* %24)
  %25 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %25) #12
  store i32 1, i32* %2, align 4
  call fastcc void @_ZNSt3__15stackIN8v8_crdtp4json12_GLOBAL__N_15StateENS_5dequeIS4_NS_9allocatorIS4_EEEEE7emplaceIJNS3_9ContainerEEEEvDpOT_(%"class.std::__1::stack"* %9, i32* nonnull dereferenceable(4) %2)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %25) #12
  %26 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %27 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %26, i64 0, i32 0, i32 1
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %26, i64 0, i32 0, i32 2, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = icmp ult i8* %28, %30
  %32 = ptrtoint i8* %30 to i64
  br i1 %31, label %33, label %37

33:                                               ; preds = %8
  store i8 123, i8* %28, align 1
  %34 = getelementptr inbounds i8, i8* %28, i64 1
  %35 = ptrtoint i8* %34 to i64
  %36 = bitcast i8** %27 to i64*
  store i64 %35, i64* %36, align 8
  br label %82

37:                                               ; preds = %8
  %38 = ptrtoint i8* %28 to i64
  %39 = bitcast i8** %27 to i64*
  %40 = bitcast %"class.std::__1::vector"* %26 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %38, %41
  %43 = add i64 %42, 1
  %44 = icmp slt i64 %43, 0
  br i1 %44, label %45, label %47

45:                                               ; preds = %37
  %46 = bitcast %"class.std::__1::vector"* %26 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %46) #13
  unreachable

47:                                               ; preds = %37
  %48 = bitcast i8** %29 to i64*
  %49 = sub i64 %32, %41
  %50 = icmp ult i64 %49, 4611686018427387903
  br i1 %50, label %51, label %56

51:                                               ; preds = %47
  %52 = shl i64 %49, 1
  %53 = icmp ult i64 %52, %43
  %54 = select i1 %53, i64 %43, i64 %52
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %59, label %56

56:                                               ; preds = %51, %47
  %57 = phi i64 [ %54, %51 ], [ 9223372036854775807, %47 ]
  %58 = tail call i8* @_Znwm(i64 %57) #11
  br label %59

59:                                               ; preds = %56, %51
  %60 = phi i64 [ %57, %56 ], [ 0, %51 ]
  %61 = phi i8* [ %58, %56 ], [ null, %51 ]
  %62 = getelementptr inbounds i8, i8* %61, i64 %42
  %63 = getelementptr inbounds i8, i8* %61, i64 %60
  %64 = ptrtoint i8* %63 to i64
  store i8 123, i8* %62, align 1
  %65 = getelementptr inbounds i8, i8* %62, i64 1
  %66 = ptrtoint i8* %65 to i64
  %67 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %26, i64 0, i32 0, i32 0
  %68 = load i8*, i8** %67, align 8
  %69 = load i64, i64* %39, align 8
  %70 = ptrtoint i8* %68 to i64
  %71 = sub i64 %69, %70
  %72 = sub i64 0, %71
  %73 = getelementptr inbounds i8, i8* %62, i64 %72
  %74 = ptrtoint i8* %73 to i64
  %75 = icmp sgt i64 %71, 0
  br i1 %75, label %76, label %78

76:                                               ; preds = %59
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %73, i8* align 1 %68, i64 %71, i1 false) #12
  %77 = load i8*, i8** %67, align 8
  br label %78

78:                                               ; preds = %76, %59
  %79 = phi i8* [ %68, %59 ], [ %77, %76 ]
  store i64 %74, i64* %40, align 8
  store i64 %66, i64* %39, align 8
  store i64 %64, i64* %48, align 8
  %80 = icmp eq i8* %79, null
  br i1 %80, label %82, label %81

81:                                               ; preds = %78
  tail call void @_ZdlPv(i8* nonnull %79) #11
  br label %82

82:                                               ; preds = %81, %78, %33, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__16vectorIhNS3_9allocatorIhEEEEE12HandleMapEndEv(%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 2
  %3 = load %"struct.v8_crdtp::Status"*, %"struct.v8_crdtp::Status"** %2, align 8
  %4 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %3, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %93

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 2, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, -1
  store i64 %10, i64* %8, align 8
  %11 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 2
  %12 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"*** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %15 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"*** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %13, %16
  %18 = icmp eq i64 %17, 0
  %19 = shl i64 %17, 6
  %20 = add i64 %19, -1
  %21 = select i1 %18, i64 0, i64 %20
  %22 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = sub i64 1, %9
  %25 = sub i64 %24, %23
  %26 = add i64 %25, %21
  %27 = icmp ugt i64 %26, 1023
  br i1 %27, label %28, label %35

28:                                               ; preds = %7
  %29 = inttoptr i64 %13 to %"class.v8_crdtp::json::(anonymous namespace)::State"**
  %30 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %29, i64 -1
  %31 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %30 to i8**
  %32 = load i8*, i8** %31, align 8
  tail call void @_ZdlPv(i8* %32) #11
  %33 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %11, align 8
  %34 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %33, i64 -1
  store %"class.v8_crdtp::json::(anonymous namespace)::State"** %34, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %11, align 8
  br label %35

35:                                               ; preds = %7, %28
  %36 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 1
  %37 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %36, align 8
  %38 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %37, i64 0, i32 0, i32 1
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %37, i64 0, i32 0, i32 2, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = icmp ult i8* %39, %41
  %43 = ptrtoint i8* %41 to i64
  br i1 %42, label %44, label %48

44:                                               ; preds = %35
  store i8 125, i8* %39, align 1
  %45 = getelementptr inbounds i8, i8* %39, i64 1
  %46 = ptrtoint i8* %45 to i64
  %47 = bitcast i8** %38 to i64*
  store i64 %46, i64* %47, align 8
  br label %93

48:                                               ; preds = %35
  %49 = ptrtoint i8* %39 to i64
  %50 = bitcast i8** %38 to i64*
  %51 = bitcast %"class.std::__1::vector"* %37 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = sub i64 %49, %52
  %54 = add i64 %53, 1
  %55 = icmp slt i64 %54, 0
  br i1 %55, label %56, label %58

56:                                               ; preds = %48
  %57 = bitcast %"class.std::__1::vector"* %37 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %57) #13
  unreachable

58:                                               ; preds = %48
  %59 = bitcast i8** %40 to i64*
  %60 = sub i64 %43, %52
  %61 = icmp ult i64 %60, 4611686018427387903
  br i1 %61, label %62, label %67

62:                                               ; preds = %58
  %63 = shl i64 %60, 1
  %64 = icmp ult i64 %63, %54
  %65 = select i1 %64, i64 %54, i64 %63
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %70, label %67

67:                                               ; preds = %62, %58
  %68 = phi i64 [ %65, %62 ], [ 9223372036854775807, %58 ]
  %69 = tail call i8* @_Znwm(i64 %68) #11
  br label %70

70:                                               ; preds = %67, %62
  %71 = phi i64 [ %68, %67 ], [ 0, %62 ]
  %72 = phi i8* [ %69, %67 ], [ null, %62 ]
  %73 = getelementptr inbounds i8, i8* %72, i64 %53
  %74 = getelementptr inbounds i8, i8* %72, i64 %71
  %75 = ptrtoint i8* %74 to i64
  store i8 125, i8* %73, align 1
  %76 = getelementptr inbounds i8, i8* %73, i64 1
  %77 = ptrtoint i8* %76 to i64
  %78 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %37, i64 0, i32 0, i32 0
  %79 = load i8*, i8** %78, align 8
  %80 = load i64, i64* %50, align 8
  %81 = ptrtoint i8* %79 to i64
  %82 = sub i64 %80, %81
  %83 = sub i64 0, %82
  %84 = getelementptr inbounds i8, i8* %73, i64 %83
  %85 = ptrtoint i8* %84 to i64
  %86 = icmp sgt i64 %82, 0
  br i1 %86, label %87, label %89

87:                                               ; preds = %70
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %84, i8* align 1 %79, i64 %82, i1 false) #12
  %88 = load i8*, i8** %78, align 8
  br label %89

89:                                               ; preds = %87, %70
  %90 = phi i8* [ %79, %70 ], [ %88, %87 ]
  store i64 %85, i64* %51, align 8
  store i64 %77, i64* %50, align 8
  store i64 %75, i64* %59, align 8
  %91 = icmp eq i8* %90, null
  br i1 %91, label %93, label %92

92:                                               ; preds = %89
  tail call void @_ZdlPv(i8* nonnull %90) #11
  br label %93

93:                                               ; preds = %92, %89, %44, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__16vectorIhNS3_9allocatorIhEEEEE16HandleArrayBeginEv(%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* nocapture) unnamed_addr #0 align 2 {
  %2 = alloca i32, align 4
  %3 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 2
  %4 = load %"struct.v8_crdtp::Status"*, %"struct.v8_crdtp::Status"** %3, align 8
  %5 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %4, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %82

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3
  %10 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 2, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = add i64 %11, -1
  %15 = add i64 %14, %13
  %16 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %17 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %16, align 8
  %18 = lshr i64 %15, 9
  %19 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %17, i64 %18
  %20 = load %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %19, align 8
  %21 = and i64 %15, 511
  %22 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %20, i64 %21
  %23 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 1
  %24 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  tail call fastcc void @_ZN8v8_crdtp4json12_GLOBAL__N_15State12StartElementEPNSt3__16vectorIhNS3_9allocatorIhEEEE(%"class.v8_crdtp::json::(anonymous namespace)::State"* %22, %"class.std::__1::vector"* %24)
  %25 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %25) #12
  store i32 2, i32* %2, align 4
  call fastcc void @_ZNSt3__15stackIN8v8_crdtp4json12_GLOBAL__N_15StateENS_5dequeIS4_NS_9allocatorIS4_EEEEE7emplaceIJNS3_9ContainerEEEEvDpOT_(%"class.std::__1::stack"* %9, i32* nonnull dereferenceable(4) %2)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %25) #12
  %26 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %27 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %26, i64 0, i32 0, i32 1
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %26, i64 0, i32 0, i32 2, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = icmp ult i8* %28, %30
  %32 = ptrtoint i8* %30 to i64
  br i1 %31, label %33, label %37

33:                                               ; preds = %8
  store i8 91, i8* %28, align 1
  %34 = getelementptr inbounds i8, i8* %28, i64 1
  %35 = ptrtoint i8* %34 to i64
  %36 = bitcast i8** %27 to i64*
  store i64 %35, i64* %36, align 8
  br label %82

37:                                               ; preds = %8
  %38 = ptrtoint i8* %28 to i64
  %39 = bitcast i8** %27 to i64*
  %40 = bitcast %"class.std::__1::vector"* %26 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %38, %41
  %43 = add i64 %42, 1
  %44 = icmp slt i64 %43, 0
  br i1 %44, label %45, label %47

45:                                               ; preds = %37
  %46 = bitcast %"class.std::__1::vector"* %26 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %46) #13
  unreachable

47:                                               ; preds = %37
  %48 = bitcast i8** %29 to i64*
  %49 = sub i64 %32, %41
  %50 = icmp ult i64 %49, 4611686018427387903
  br i1 %50, label %51, label %56

51:                                               ; preds = %47
  %52 = shl i64 %49, 1
  %53 = icmp ult i64 %52, %43
  %54 = select i1 %53, i64 %43, i64 %52
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %59, label %56

56:                                               ; preds = %51, %47
  %57 = phi i64 [ %54, %51 ], [ 9223372036854775807, %47 ]
  %58 = tail call i8* @_Znwm(i64 %57) #11
  br label %59

59:                                               ; preds = %56, %51
  %60 = phi i64 [ %57, %56 ], [ 0, %51 ]
  %61 = phi i8* [ %58, %56 ], [ null, %51 ]
  %62 = getelementptr inbounds i8, i8* %61, i64 %42
  %63 = getelementptr inbounds i8, i8* %61, i64 %60
  %64 = ptrtoint i8* %63 to i64
  store i8 91, i8* %62, align 1
  %65 = getelementptr inbounds i8, i8* %62, i64 1
  %66 = ptrtoint i8* %65 to i64
  %67 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %26, i64 0, i32 0, i32 0
  %68 = load i8*, i8** %67, align 8
  %69 = load i64, i64* %39, align 8
  %70 = ptrtoint i8* %68 to i64
  %71 = sub i64 %69, %70
  %72 = sub i64 0, %71
  %73 = getelementptr inbounds i8, i8* %62, i64 %72
  %74 = ptrtoint i8* %73 to i64
  %75 = icmp sgt i64 %71, 0
  br i1 %75, label %76, label %78

76:                                               ; preds = %59
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %73, i8* align 1 %68, i64 %71, i1 false) #12
  %77 = load i8*, i8** %67, align 8
  br label %78

78:                                               ; preds = %76, %59
  %79 = phi i8* [ %68, %59 ], [ %77, %76 ]
  store i64 %74, i64* %40, align 8
  store i64 %66, i64* %39, align 8
  store i64 %64, i64* %48, align 8
  %80 = icmp eq i8* %79, null
  br i1 %80, label %82, label %81

81:                                               ; preds = %78
  tail call void @_ZdlPv(i8* nonnull %79) #11
  br label %82

82:                                               ; preds = %81, %78, %33, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__16vectorIhNS3_9allocatorIhEEEEE14HandleArrayEndEv(%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 2
  %3 = load %"struct.v8_crdtp::Status"*, %"struct.v8_crdtp::Status"** %2, align 8
  %4 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %3, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %93

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 2, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, -1
  store i64 %10, i64* %8, align 8
  %11 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 2
  %12 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"*** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %15 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"*** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %13, %16
  %18 = icmp eq i64 %17, 0
  %19 = shl i64 %17, 6
  %20 = add i64 %19, -1
  %21 = select i1 %18, i64 0, i64 %20
  %22 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = sub i64 1, %9
  %25 = sub i64 %24, %23
  %26 = add i64 %25, %21
  %27 = icmp ugt i64 %26, 1023
  br i1 %27, label %28, label %35

28:                                               ; preds = %7
  %29 = inttoptr i64 %13 to %"class.v8_crdtp::json::(anonymous namespace)::State"**
  %30 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %29, i64 -1
  %31 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %30 to i8**
  %32 = load i8*, i8** %31, align 8
  tail call void @_ZdlPv(i8* %32) #11
  %33 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %11, align 8
  %34 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %33, i64 -1
  store %"class.v8_crdtp::json::(anonymous namespace)::State"** %34, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %11, align 8
  br label %35

35:                                               ; preds = %7, %28
  %36 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 1
  %37 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %36, align 8
  %38 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %37, i64 0, i32 0, i32 1
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %37, i64 0, i32 0, i32 2, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = icmp ult i8* %39, %41
  %43 = ptrtoint i8* %41 to i64
  br i1 %42, label %44, label %48

44:                                               ; preds = %35
  store i8 93, i8* %39, align 1
  %45 = getelementptr inbounds i8, i8* %39, i64 1
  %46 = ptrtoint i8* %45 to i64
  %47 = bitcast i8** %38 to i64*
  store i64 %46, i64* %47, align 8
  br label %93

48:                                               ; preds = %35
  %49 = ptrtoint i8* %39 to i64
  %50 = bitcast i8** %38 to i64*
  %51 = bitcast %"class.std::__1::vector"* %37 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = sub i64 %49, %52
  %54 = add i64 %53, 1
  %55 = icmp slt i64 %54, 0
  br i1 %55, label %56, label %58

56:                                               ; preds = %48
  %57 = bitcast %"class.std::__1::vector"* %37 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %57) #13
  unreachable

58:                                               ; preds = %48
  %59 = bitcast i8** %40 to i64*
  %60 = sub i64 %43, %52
  %61 = icmp ult i64 %60, 4611686018427387903
  br i1 %61, label %62, label %67

62:                                               ; preds = %58
  %63 = shl i64 %60, 1
  %64 = icmp ult i64 %63, %54
  %65 = select i1 %64, i64 %54, i64 %63
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %70, label %67

67:                                               ; preds = %62, %58
  %68 = phi i64 [ %65, %62 ], [ 9223372036854775807, %58 ]
  %69 = tail call i8* @_Znwm(i64 %68) #11
  br label %70

70:                                               ; preds = %67, %62
  %71 = phi i64 [ %68, %67 ], [ 0, %62 ]
  %72 = phi i8* [ %69, %67 ], [ null, %62 ]
  %73 = getelementptr inbounds i8, i8* %72, i64 %53
  %74 = getelementptr inbounds i8, i8* %72, i64 %71
  %75 = ptrtoint i8* %74 to i64
  store i8 93, i8* %73, align 1
  %76 = getelementptr inbounds i8, i8* %73, i64 1
  %77 = ptrtoint i8* %76 to i64
  %78 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %37, i64 0, i32 0, i32 0
  %79 = load i8*, i8** %78, align 8
  %80 = load i64, i64* %50, align 8
  %81 = ptrtoint i8* %79 to i64
  %82 = sub i64 %80, %81
  %83 = sub i64 0, %82
  %84 = getelementptr inbounds i8, i8* %73, i64 %83
  %85 = ptrtoint i8* %84 to i64
  %86 = icmp sgt i64 %82, 0
  br i1 %86, label %87, label %89

87:                                               ; preds = %70
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %84, i8* align 1 %79, i64 %82, i1 false) #12
  %88 = load i8*, i8** %78, align 8
  br label %89

89:                                               ; preds = %87, %70
  %90 = phi i8* [ %79, %70 ], [ %88, %87 ]
  store i64 %85, i64* %51, align 8
  store i64 %77, i64* %50, align 8
  store i64 %75, i64* %59, align 8
  %91 = icmp eq i8* %90, null
  br i1 %91, label %93, label %92

92:                                               ; preds = %89
  tail call void @_ZdlPv(i8* nonnull %90) #11
  br label %93

93:                                               ; preds = %92, %89, %44, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__16vectorIhNS3_9allocatorIhEEEEE13HandleString8ENS_4spanIhEE(%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* nocapture readonly, i8*, i64) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 2
  %5 = load %"struct.v8_crdtp::Status"*, %"struct.v8_crdtp::Status"** %4, align 8
  %6 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %5, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %1263

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 2, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = add i64 %11, -1
  %15 = add i64 %14, %13
  %16 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %17 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %16, align 8
  %18 = lshr i64 %15, 9
  %19 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %17, i64 %18
  %20 = load %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %19, align 8
  %21 = and i64 %15, 511
  %22 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %20, i64 %21
  %23 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 1
  %24 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  tail call fastcc void @_ZN8v8_crdtp4json12_GLOBAL__N_15State12StartElementEPNSt3__16vectorIhNS3_9allocatorIhEEEE(%"class.v8_crdtp::json::(anonymous namespace)::State"* %22, %"class.std::__1::vector"* %24)
  %25 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %26 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %25, i64 0, i32 0, i32 1
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %25, i64 0, i32 0, i32 2, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  %30 = icmp ult i8* %27, %29
  %31 = ptrtoint i8* %29 to i64
  br i1 %30, label %32, label %36

32:                                               ; preds = %9
  store i8 34, i8* %27, align 1
  %33 = getelementptr inbounds i8, i8* %27, i64 1
  %34 = ptrtoint i8* %33 to i64
  %35 = bitcast i8** %26 to i64*
  store i64 %34, i64* %35, align 8
  br label %81

36:                                               ; preds = %9
  %37 = ptrtoint i8* %27 to i64
  %38 = bitcast i8** %26 to i64*
  %39 = bitcast %"class.std::__1::vector"* %25 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %37, %40
  %42 = add i64 %41, 1
  %43 = icmp slt i64 %42, 0
  br i1 %43, label %44, label %46

44:                                               ; preds = %36
  %45 = bitcast %"class.std::__1::vector"* %25 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %45) #13
  unreachable

46:                                               ; preds = %36
  %47 = bitcast i8** %28 to i64*
  %48 = sub i64 %31, %40
  %49 = icmp ult i64 %48, 4611686018427387903
  br i1 %49, label %50, label %55

50:                                               ; preds = %46
  %51 = shl i64 %48, 1
  %52 = icmp ult i64 %51, %42
  %53 = select i1 %52, i64 %42, i64 %51
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %58, label %55

55:                                               ; preds = %50, %46
  %56 = phi i64 [ %53, %50 ], [ 9223372036854775807, %46 ]
  %57 = tail call i8* @_Znwm(i64 %56) #11
  br label %58

58:                                               ; preds = %55, %50
  %59 = phi i64 [ %56, %55 ], [ 0, %50 ]
  %60 = phi i8* [ %57, %55 ], [ null, %50 ]
  %61 = getelementptr inbounds i8, i8* %60, i64 %41
  %62 = getelementptr inbounds i8, i8* %60, i64 %59
  %63 = ptrtoint i8* %62 to i64
  store i8 34, i8* %61, align 1
  %64 = getelementptr inbounds i8, i8* %61, i64 1
  %65 = ptrtoint i8* %64 to i64
  %66 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %25, i64 0, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = load i64, i64* %38, align 8
  %69 = ptrtoint i8* %67 to i64
  %70 = sub i64 %68, %69
  %71 = sub i64 0, %70
  %72 = getelementptr inbounds i8, i8* %61, i64 %71
  %73 = ptrtoint i8* %72 to i64
  %74 = icmp sgt i64 %70, 0
  br i1 %74, label %75, label %77

75:                                               ; preds = %58
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %72, i8* align 1 %67, i64 %70, i1 false) #12
  %76 = load i8*, i8** %66, align 8
  br label %77

77:                                               ; preds = %75, %58
  %78 = phi i8* [ %67, %58 ], [ %76, %75 ]
  store i64 %73, i64* %39, align 8
  store i64 %65, i64* %38, align 8
  store i64 %63, i64* %47, align 8
  %79 = icmp eq i8* %78, null
  br i1 %79, label %81, label %80

80:                                               ; preds = %77
  tail call void @_ZdlPv(i8* nonnull %78) #11
  br label %81

81:                                               ; preds = %32, %77, %80
  %82 = icmp eq i64 %2, 0
  br i1 %82, label %83, label %140

83:                                               ; preds = %1259, %81
  %84 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %85 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %84, i64 0, i32 0, i32 1
  %86 = load i8*, i8** %85, align 8
  %87 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %84, i64 0, i32 0, i32 2, i32 0, i32 0
  %88 = load i8*, i8** %87, align 8
  %89 = icmp ult i8* %86, %88
  %90 = ptrtoint i8* %88 to i64
  br i1 %89, label %91, label %95

91:                                               ; preds = %83
  store i8 34, i8* %86, align 1
  %92 = getelementptr inbounds i8, i8* %86, i64 1
  %93 = ptrtoint i8* %92 to i64
  %94 = bitcast i8** %85 to i64*
  store i64 %93, i64* %94, align 8
  br label %1263

95:                                               ; preds = %83
  %96 = ptrtoint i8* %86 to i64
  %97 = bitcast i8** %85 to i64*
  %98 = bitcast %"class.std::__1::vector"* %84 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = sub i64 %96, %99
  %101 = add i64 %100, 1
  %102 = icmp slt i64 %101, 0
  br i1 %102, label %103, label %105

103:                                              ; preds = %95
  %104 = bitcast %"class.std::__1::vector"* %84 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %104) #13
  unreachable

105:                                              ; preds = %95
  %106 = bitcast i8** %87 to i64*
  %107 = sub i64 %90, %99
  %108 = icmp ult i64 %107, 4611686018427387903
  br i1 %108, label %109, label %114

109:                                              ; preds = %105
  %110 = shl i64 %107, 1
  %111 = icmp ult i64 %110, %101
  %112 = select i1 %111, i64 %101, i64 %110
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %117, label %114

114:                                              ; preds = %109, %105
  %115 = phi i64 [ %112, %109 ], [ 9223372036854775807, %105 ]
  %116 = tail call i8* @_Znwm(i64 %115) #11
  br label %117

117:                                              ; preds = %114, %109
  %118 = phi i64 [ %115, %114 ], [ 0, %109 ]
  %119 = phi i8* [ %116, %114 ], [ null, %109 ]
  %120 = getelementptr inbounds i8, i8* %119, i64 %100
  %121 = getelementptr inbounds i8, i8* %119, i64 %118
  %122 = ptrtoint i8* %121 to i64
  store i8 34, i8* %120, align 1
  %123 = getelementptr inbounds i8, i8* %120, i64 1
  %124 = ptrtoint i8* %123 to i64
  %125 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %84, i64 0, i32 0, i32 0
  %126 = load i8*, i8** %125, align 8
  %127 = load i64, i64* %97, align 8
  %128 = ptrtoint i8* %126 to i64
  %129 = sub i64 %127, %128
  %130 = sub i64 0, %129
  %131 = getelementptr inbounds i8, i8* %120, i64 %130
  %132 = ptrtoint i8* %131 to i64
  %133 = icmp sgt i64 %129, 0
  br i1 %133, label %134, label %136

134:                                              ; preds = %117
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %131, i8* align 1 %126, i64 %129, i1 false) #12
  %135 = load i8*, i8** %125, align 8
  br label %136

136:                                              ; preds = %134, %117
  %137 = phi i8* [ %126, %117 ], [ %135, %134 ]
  store i64 %132, i64* %98, align 8
  store i64 %124, i64* %97, align 8
  store i64 %122, i64* %106, align 8
  %138 = icmp eq i8* %137, null
  br i1 %138, label %1263, label %139

139:                                              ; preds = %136
  tail call void @_ZdlPv(i8* nonnull %137) #11
  br label %1263

140:                                              ; preds = %81, %1259
  %141 = phi i64 [ %1261, %1259 ], [ 0, %81 ]
  %142 = getelementptr inbounds i8, i8* %1, i64 %141
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i32
  switch i8 %143, label %180 [
    i8 34, label %145
    i8 92, label %150
    i8 8, label %155
    i8 12, label %160
    i8 10, label %165
    i8 13, label %170
    i8 9, label %175
  ]

145:                                              ; preds = %140
  %146 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %147 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %146, i64 0, i32 0, i32 1
  %148 = load i8*, i8** %147, align 8
  %149 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"* %146, i8* %148, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 2)) #12
  br label %1259

150:                                              ; preds = %140
  %151 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %152 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %151, i64 0, i32 0, i32 1
  %153 = load i8*, i8** %152, align 8
  %154 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"* %151, i8* %153, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 2)) #12
  br label %1259

155:                                              ; preds = %140
  %156 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %157 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %156, i64 0, i32 0, i32 1
  %158 = load i8*, i8** %157, align 8
  %159 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"* %156, i8* %158, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 2)) #12
  br label %1259

160:                                              ; preds = %140
  %161 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %162 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %161, i64 0, i32 0, i32 1
  %163 = load i8*, i8** %162, align 8
  %164 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"* %161, i8* %163, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 2)) #12
  br label %1259

165:                                              ; preds = %140
  %166 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %167 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %166, i64 0, i32 0, i32 1
  %168 = load i8*, i8** %167, align 8
  %169 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"* %166, i8* %168, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 2)) #12
  br label %1259

170:                                              ; preds = %140
  %171 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %172 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %171, i64 0, i32 0, i32 1
  %173 = load i8*, i8** %172, align 8
  %174 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"* %171, i8* %173, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 2)) #12
  br label %1259

175:                                              ; preds = %140
  %176 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %177 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %176, i64 0, i32 0, i32 1
  %178 = load i8*, i8** %177, align 8
  %179 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"* %176, i8* %178, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 2)) #12
  br label %1259

180:                                              ; preds = %140
  %181 = icmp ugt i8 %143, 31
  %182 = icmp sgt i8 %143, -1
  %183 = and i1 %181, %182
  br i1 %183, label %184, label %241

184:                                              ; preds = %180
  %185 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %186 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %185, i64 0, i32 0, i32 1
  %187 = load i8*, i8** %186, align 8
  %188 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %185, i64 0, i32 0, i32 2, i32 0, i32 0
  %189 = load i8*, i8** %188, align 8
  %190 = icmp ult i8* %187, %189
  %191 = ptrtoint i8* %189 to i64
  br i1 %190, label %192, label %196

192:                                              ; preds = %184
  store i8 %143, i8* %187, align 1
  %193 = getelementptr inbounds i8, i8* %187, i64 1
  %194 = ptrtoint i8* %193 to i64
  %195 = bitcast i8** %186 to i64*
  store i64 %194, i64* %195, align 8
  br label %1259

196:                                              ; preds = %184
  %197 = ptrtoint i8* %187 to i64
  %198 = bitcast i8** %186 to i64*
  %199 = bitcast %"class.std::__1::vector"* %185 to i64*
  %200 = load i64, i64* %199, align 8
  %201 = sub i64 %197, %200
  %202 = add i64 %201, 1
  %203 = icmp slt i64 %202, 0
  br i1 %203, label %204, label %206

204:                                              ; preds = %196
  %205 = bitcast %"class.std::__1::vector"* %185 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %205) #13
  unreachable

206:                                              ; preds = %196
  %207 = bitcast i8** %188 to i64*
  %208 = sub i64 %191, %200
  %209 = icmp ult i64 %208, 4611686018427387903
  br i1 %209, label %210, label %215

210:                                              ; preds = %206
  %211 = shl i64 %208, 1
  %212 = icmp ult i64 %211, %202
  %213 = select i1 %212, i64 %202, i64 %211
  %214 = icmp eq i64 %213, 0
  br i1 %214, label %218, label %215

215:                                              ; preds = %210, %206
  %216 = phi i64 [ %213, %210 ], [ 9223372036854775807, %206 ]
  %217 = tail call i8* @_Znwm(i64 %216) #11
  br label %218

218:                                              ; preds = %215, %210
  %219 = phi i64 [ %216, %215 ], [ 0, %210 ]
  %220 = phi i8* [ %217, %215 ], [ null, %210 ]
  %221 = getelementptr inbounds i8, i8* %220, i64 %201
  %222 = getelementptr inbounds i8, i8* %220, i64 %219
  %223 = ptrtoint i8* %222 to i64
  store i8 %143, i8* %221, align 1
  %224 = getelementptr inbounds i8, i8* %221, i64 1
  %225 = ptrtoint i8* %224 to i64
  %226 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %185, i64 0, i32 0, i32 0
  %227 = load i8*, i8** %226, align 8
  %228 = load i64, i64* %198, align 8
  %229 = ptrtoint i8* %227 to i64
  %230 = sub i64 %228, %229
  %231 = sub i64 0, %230
  %232 = getelementptr inbounds i8, i8* %221, i64 %231
  %233 = ptrtoint i8* %232 to i64
  %234 = icmp sgt i64 %230, 0
  br i1 %234, label %235, label %237

235:                                              ; preds = %218
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %232, i8* align 1 %227, i64 %230, i1 false) #12
  %236 = load i8*, i8** %226, align 8
  br label %237

237:                                              ; preds = %235, %218
  %238 = phi i8* [ %227, %218 ], [ %236, %235 ]
  store i64 %233, i64* %199, align 8
  store i64 %225, i64* %198, align 8
  store i64 %223, i64* %207, align 8
  %239 = icmp eq i8* %238, null
  br i1 %239, label %1259, label %240

240:                                              ; preds = %237
  tail call void @_ZdlPv(i8* nonnull %238) #11
  br label %1259

241:                                              ; preds = %180
  %242 = icmp ult i8 %143, 32
  br i1 %242, label %243, label %475

243:                                              ; preds = %241
  %244 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %245 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %244, i64 0, i32 0, i32 1
  %246 = load i8*, i8** %245, align 8
  %247 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"* %244, i8* %246, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 2)) #12
  %248 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %249 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %248, i64 0, i32 0, i32 1
  %250 = load i8*, i8** %249, align 8
  %251 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %248, i64 0, i32 0, i32 2, i32 0, i32 0
  %252 = load i8*, i8** %251, align 8
  %253 = icmp ult i8* %250, %252
  %254 = ptrtoint i8* %252 to i64
  br i1 %253, label %255, label %259

255:                                              ; preds = %243
  store i8 48, i8* %250, align 1
  %256 = getelementptr inbounds i8, i8* %250, i64 1
  %257 = ptrtoint i8* %256 to i64
  %258 = bitcast i8** %249 to i64*
  store i64 %257, i64* %258, align 8
  br label %305

259:                                              ; preds = %243
  %260 = ptrtoint i8* %250 to i64
  %261 = bitcast i8** %249 to i64*
  %262 = bitcast %"class.std::__1::vector"* %248 to i64*
  %263 = load i64, i64* %262, align 8
  %264 = sub i64 %260, %263
  %265 = add i64 %264, 1
  %266 = icmp slt i64 %265, 0
  br i1 %266, label %267, label %269

267:                                              ; preds = %259
  %268 = bitcast %"class.std::__1::vector"* %248 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %268) #13
  unreachable

269:                                              ; preds = %259
  %270 = bitcast i8** %251 to i64*
  %271 = sub i64 %254, %263
  %272 = icmp ult i64 %271, 4611686018427387903
  br i1 %272, label %273, label %278

273:                                              ; preds = %269
  %274 = shl i64 %271, 1
  %275 = icmp ult i64 %274, %265
  %276 = select i1 %275, i64 %265, i64 %274
  %277 = icmp eq i64 %276, 0
  br i1 %277, label %281, label %278

278:                                              ; preds = %273, %269
  %279 = phi i64 [ %276, %273 ], [ 9223372036854775807, %269 ]
  %280 = tail call i8* @_Znwm(i64 %279) #11
  br label %281

281:                                              ; preds = %278, %273
  %282 = phi i64 [ %279, %278 ], [ 0, %273 ]
  %283 = phi i8* [ %280, %278 ], [ null, %273 ]
  %284 = getelementptr inbounds i8, i8* %283, i64 %264
  %285 = getelementptr inbounds i8, i8* %283, i64 %282
  %286 = ptrtoint i8* %285 to i64
  store i8 48, i8* %284, align 1
  %287 = getelementptr inbounds i8, i8* %284, i64 1
  %288 = ptrtoint i8* %287 to i64
  %289 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %248, i64 0, i32 0, i32 0
  %290 = load i8*, i8** %289, align 8
  %291 = load i64, i64* %261, align 8
  %292 = ptrtoint i8* %290 to i64
  %293 = sub i64 %291, %292
  %294 = sub i64 0, %293
  %295 = getelementptr inbounds i8, i8* %284, i64 %294
  %296 = ptrtoint i8* %295 to i64
  %297 = icmp sgt i64 %293, 0
  br i1 %297, label %298, label %300

298:                                              ; preds = %281
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %295, i8* align 1 %290, i64 %293, i1 false) #12
  %299 = load i8*, i8** %289, align 8
  br label %300

300:                                              ; preds = %298, %281
  %301 = phi i8* [ %290, %281 ], [ %299, %298 ]
  store i64 %296, i64* %262, align 8
  store i64 %288, i64* %261, align 8
  store i64 %286, i64* %270, align 8
  %302 = icmp eq i8* %301, null
  br i1 %302, label %305, label %303

303:                                              ; preds = %300
  tail call void @_ZdlPv(i8* nonnull %301) #11
  %304 = load i8*, i8** %249, align 8
  br label %305

305:                                              ; preds = %255, %300, %303
  %306 = phi i8* [ %256, %255 ], [ %287, %300 ], [ %304, %303 ]
  %307 = load i8*, i8** %251, align 8
  %308 = icmp ult i8* %306, %307
  %309 = ptrtoint i8* %307 to i64
  br i1 %308, label %310, label %314

310:                                              ; preds = %305
  store i8 48, i8* %306, align 1
  %311 = getelementptr inbounds i8, i8* %306, i64 1
  %312 = ptrtoint i8* %311 to i64
  %313 = bitcast i8** %249 to i64*
  store i64 %312, i64* %313, align 8
  br label %360

314:                                              ; preds = %305
  %315 = ptrtoint i8* %306 to i64
  %316 = bitcast i8** %249 to i64*
  %317 = bitcast %"class.std::__1::vector"* %248 to i64*
  %318 = load i64, i64* %317, align 8
  %319 = sub i64 %315, %318
  %320 = add i64 %319, 1
  %321 = icmp slt i64 %320, 0
  br i1 %321, label %322, label %324

322:                                              ; preds = %314
  %323 = bitcast %"class.std::__1::vector"* %248 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %323) #13
  unreachable

324:                                              ; preds = %314
  %325 = bitcast i8** %251 to i64*
  %326 = sub i64 %309, %318
  %327 = icmp ult i64 %326, 4611686018427387903
  br i1 %327, label %328, label %333

328:                                              ; preds = %324
  %329 = shl i64 %326, 1
  %330 = icmp ult i64 %329, %320
  %331 = select i1 %330, i64 %320, i64 %329
  %332 = icmp eq i64 %331, 0
  br i1 %332, label %336, label %333

333:                                              ; preds = %328, %324
  %334 = phi i64 [ %331, %328 ], [ 9223372036854775807, %324 ]
  %335 = tail call i8* @_Znwm(i64 %334) #11
  br label %336

336:                                              ; preds = %333, %328
  %337 = phi i64 [ %334, %333 ], [ 0, %328 ]
  %338 = phi i8* [ %335, %333 ], [ null, %328 ]
  %339 = getelementptr inbounds i8, i8* %338, i64 %319
  %340 = getelementptr inbounds i8, i8* %338, i64 %337
  %341 = ptrtoint i8* %340 to i64
  store i8 48, i8* %339, align 1
  %342 = getelementptr inbounds i8, i8* %339, i64 1
  %343 = ptrtoint i8* %342 to i64
  %344 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %248, i64 0, i32 0, i32 0
  %345 = load i8*, i8** %344, align 8
  %346 = load i64, i64* %316, align 8
  %347 = ptrtoint i8* %345 to i64
  %348 = sub i64 %346, %347
  %349 = sub i64 0, %348
  %350 = getelementptr inbounds i8, i8* %339, i64 %349
  %351 = ptrtoint i8* %350 to i64
  %352 = icmp sgt i64 %348, 0
  br i1 %352, label %353, label %355

353:                                              ; preds = %336
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %350, i8* align 1 %345, i64 %348, i1 false) #12
  %354 = load i8*, i8** %344, align 8
  br label %355

355:                                              ; preds = %353, %336
  %356 = phi i8* [ %345, %336 ], [ %354, %353 ]
  store i64 %351, i64* %317, align 8
  store i64 %343, i64* %316, align 8
  store i64 %341, i64* %325, align 8
  %357 = icmp eq i8* %356, null
  br i1 %357, label %360, label %358

358:                                              ; preds = %355
  tail call void @_ZdlPv(i8* nonnull %356) #11
  %359 = load i8*, i8** %249, align 8
  br label %360

360:                                              ; preds = %310, %355, %358
  %361 = phi i8* [ %311, %310 ], [ %342, %355 ], [ %359, %358 ]
  %362 = lshr i8 %143, 4
  %363 = or i8 %362, 48
  %364 = load i8*, i8** %251, align 8
  %365 = icmp ult i8* %361, %364
  %366 = ptrtoint i8* %364 to i64
  br i1 %365, label %367, label %371

367:                                              ; preds = %360
  store i8 %363, i8* %361, align 1
  %368 = getelementptr inbounds i8, i8* %361, i64 1
  %369 = ptrtoint i8* %368 to i64
  %370 = bitcast i8** %249 to i64*
  store i64 %369, i64* %370, align 8
  br label %417

371:                                              ; preds = %360
  %372 = ptrtoint i8* %361 to i64
  %373 = bitcast i8** %249 to i64*
  %374 = bitcast %"class.std::__1::vector"* %248 to i64*
  %375 = load i64, i64* %374, align 8
  %376 = sub i64 %372, %375
  %377 = add i64 %376, 1
  %378 = icmp slt i64 %377, 0
  br i1 %378, label %379, label %381

379:                                              ; preds = %371
  %380 = bitcast %"class.std::__1::vector"* %248 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %380) #13
  unreachable

381:                                              ; preds = %371
  %382 = bitcast i8** %251 to i64*
  %383 = sub i64 %366, %375
  %384 = icmp ult i64 %383, 4611686018427387903
  br i1 %384, label %385, label %390

385:                                              ; preds = %381
  %386 = shl i64 %383, 1
  %387 = icmp ult i64 %386, %377
  %388 = select i1 %387, i64 %377, i64 %386
  %389 = icmp eq i64 %388, 0
  br i1 %389, label %393, label %390

390:                                              ; preds = %385, %381
  %391 = phi i64 [ %388, %385 ], [ 9223372036854775807, %381 ]
  %392 = tail call i8* @_Znwm(i64 %391) #11
  br label %393

393:                                              ; preds = %390, %385
  %394 = phi i64 [ %391, %390 ], [ 0, %385 ]
  %395 = phi i8* [ %392, %390 ], [ null, %385 ]
  %396 = getelementptr inbounds i8, i8* %395, i64 %376
  %397 = getelementptr inbounds i8, i8* %395, i64 %394
  %398 = ptrtoint i8* %397 to i64
  store i8 %363, i8* %396, align 1
  %399 = getelementptr inbounds i8, i8* %396, i64 1
  %400 = ptrtoint i8* %399 to i64
  %401 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %248, i64 0, i32 0, i32 0
  %402 = load i8*, i8** %401, align 8
  %403 = load i64, i64* %373, align 8
  %404 = ptrtoint i8* %402 to i64
  %405 = sub i64 %403, %404
  %406 = sub i64 0, %405
  %407 = getelementptr inbounds i8, i8* %396, i64 %406
  %408 = ptrtoint i8* %407 to i64
  %409 = icmp sgt i64 %405, 0
  br i1 %409, label %410, label %412

410:                                              ; preds = %393
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %407, i8* align 1 %402, i64 %405, i1 false) #12
  %411 = load i8*, i8** %401, align 8
  br label %412

412:                                              ; preds = %410, %393
  %413 = phi i8* [ %402, %393 ], [ %411, %410 ]
  store i64 %408, i64* %374, align 8
  store i64 %400, i64* %373, align 8
  store i64 %398, i64* %382, align 8
  %414 = icmp eq i8* %413, null
  br i1 %414, label %417, label %415

415:                                              ; preds = %412
  tail call void @_ZdlPv(i8* nonnull %413) #11
  %416 = load i8*, i8** %249, align 8
  br label %417

417:                                              ; preds = %367, %412, %415
  %418 = phi i8* [ %368, %367 ], [ %399, %412 ], [ %416, %415 ]
  %419 = and i8 %143, 15
  %420 = icmp ult i8 %419, 10
  %421 = select i1 %420, i8 48, i8 87
  %422 = add nuw nsw i8 %421, %419
  %423 = load i8*, i8** %251, align 8
  %424 = icmp ult i8* %418, %423
  %425 = ptrtoint i8* %423 to i64
  br i1 %424, label %426, label %430

426:                                              ; preds = %417
  store i8 %422, i8* %418, align 1
  %427 = getelementptr inbounds i8, i8* %418, i64 1
  %428 = ptrtoint i8* %427 to i64
  %429 = bitcast i8** %249 to i64*
  store i64 %428, i64* %429, align 8
  br label %1259

430:                                              ; preds = %417
  %431 = ptrtoint i8* %418 to i64
  %432 = bitcast i8** %249 to i64*
  %433 = bitcast %"class.std::__1::vector"* %248 to i64*
  %434 = load i64, i64* %433, align 8
  %435 = sub i64 %431, %434
  %436 = add i64 %435, 1
  %437 = icmp slt i64 %436, 0
  br i1 %437, label %438, label %440

438:                                              ; preds = %430
  %439 = bitcast %"class.std::__1::vector"* %248 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %439) #13
  unreachable

440:                                              ; preds = %430
  %441 = bitcast i8** %251 to i64*
  %442 = sub i64 %425, %434
  %443 = icmp ult i64 %442, 4611686018427387903
  br i1 %443, label %444, label %449

444:                                              ; preds = %440
  %445 = shl i64 %442, 1
  %446 = icmp ult i64 %445, %436
  %447 = select i1 %446, i64 %436, i64 %445
  %448 = icmp eq i64 %447, 0
  br i1 %448, label %452, label %449

449:                                              ; preds = %444, %440
  %450 = phi i64 [ %447, %444 ], [ 9223372036854775807, %440 ]
  %451 = tail call i8* @_Znwm(i64 %450) #11
  br label %452

452:                                              ; preds = %449, %444
  %453 = phi i64 [ %450, %449 ], [ 0, %444 ]
  %454 = phi i8* [ %451, %449 ], [ null, %444 ]
  %455 = getelementptr inbounds i8, i8* %454, i64 %435
  %456 = getelementptr inbounds i8, i8* %454, i64 %453
  %457 = ptrtoint i8* %456 to i64
  store i8 %422, i8* %455, align 1
  %458 = getelementptr inbounds i8, i8* %455, i64 1
  %459 = ptrtoint i8* %458 to i64
  %460 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %248, i64 0, i32 0, i32 0
  %461 = load i8*, i8** %460, align 8
  %462 = load i64, i64* %432, align 8
  %463 = ptrtoint i8* %461 to i64
  %464 = sub i64 %462, %463
  %465 = sub i64 0, %464
  %466 = getelementptr inbounds i8, i8* %455, i64 %465
  %467 = ptrtoint i8* %466 to i64
  %468 = icmp sgt i64 %464, 0
  br i1 %468, label %469, label %471

469:                                              ; preds = %452
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %466, i8* align 1 %461, i64 %464, i1 false) #12
  %470 = load i8*, i8** %460, align 8
  br label %471

471:                                              ; preds = %469, %452
  %472 = phi i8* [ %461, %452 ], [ %470, %469 ]
  store i64 %467, i64* %433, align 8
  store i64 %459, i64* %432, align 8
  store i64 %457, i64* %441, align 8
  %473 = icmp eq i8* %472, null
  br i1 %473, label %1259, label %474

474:                                              ; preds = %471
  tail call void @_ZdlPv(i8* nonnull %472) #11
  br label %1259

475:                                              ; preds = %241
  %476 = and i32 %144, 224
  %477 = icmp eq i32 %476, 192
  br i1 %477, label %484, label %478

478:                                              ; preds = %475
  %479 = and i32 %144, 240
  %480 = icmp eq i32 %479, 224
  br i1 %480, label %484, label %481

481:                                              ; preds = %478
  %482 = and i32 %144, 248
  %483 = icmp eq i32 %482, 240
  br i1 %483, label %484, label %1259

484:                                              ; preds = %481, %478, %475
  %485 = phi i32 [ 31, %475 ], [ 15, %478 ], [ 7, %481 ]
  %486 = phi i32 [ 1, %475 ], [ 2, %478 ], [ 3, %481 ]
  %487 = zext i32 %486 to i64
  %488 = add i64 %141, %487
  %489 = icmp ult i64 %488, %2
  br i1 %489, label %490, label %1259

490:                                              ; preds = %484
  %491 = and i32 %485, %144
  %492 = add nsw i32 %486, -1
  %493 = zext i32 %492 to i64
  %494 = add i64 %141, 1
  %495 = getelementptr inbounds i8, i8* %1, i64 %494
  %496 = load i8, i8* %495, align 1
  %497 = zext i8 %496 to i32
  %498 = and i32 %497, 192
  %499 = icmp ne i32 %498, 128
  %500 = shl nuw nsw i32 %491, 6
  %501 = and i32 %497, 63
  %502 = or i32 %501, %500
  %503 = icmp ugt i32 %486, 1
  br i1 %503, label %1264, label %504

504:                                              ; preds = %1276, %1264, %490
  %505 = phi i32 [ %491, %490 ], [ %502, %1264 ], [ %1274, %1276 ]
  %506 = phi i8 [ %496, %490 ], [ %1267, %1264 ], [ %1279, %1276 ]
  %507 = phi i1 [ %499, %490 ], [ %1271, %1264 ], [ %1283, %1276 ]
  %508 = phi i32 [ %500, %490 ], [ %1272, %1264 ], [ %1284, %1276 ]
  %509 = phi i32 [ %502, %490 ], [ %1274, %1264 ], [ %1286, %1276 ]
  %510 = add i64 %141, 1
  %511 = add i64 %510, %493
  %512 = add i32 %509, -128
  %513 = icmp ugt i32 %512, 1113983
  %514 = or i1 %513, %507
  br i1 %514, label %1259, label %515

515:                                              ; preds = %504
  %516 = icmp ult i32 %509, 65536
  br i1 %516, label %517, label %766

517:                                              ; preds = %515
  %518 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %519 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %518, i64 0, i32 0, i32 1
  %520 = load i8*, i8** %519, align 8
  %521 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"* %518, i8* %520, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 2)) #12
  %522 = trunc i32 %508 to i16
  %523 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %524 = lshr i32 %505, 6
  %525 = and i32 %524, 15
  %526 = icmp ult i16 %522, -24576
  %527 = select i1 %526, i32 48, i32 87
  %528 = add nuw nsw i32 %527, %525
  %529 = trunc i32 %528 to i8
  %530 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %523, i64 0, i32 0, i32 1
  %531 = load i8*, i8** %530, align 8
  %532 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %523, i64 0, i32 0, i32 2, i32 0, i32 0
  %533 = load i8*, i8** %532, align 8
  %534 = icmp ult i8* %531, %533
  %535 = ptrtoint i8* %533 to i64
  br i1 %534, label %536, label %540

536:                                              ; preds = %517
  store i8 %529, i8* %531, align 1
  %537 = getelementptr inbounds i8, i8* %531, i64 1
  %538 = ptrtoint i8* %537 to i64
  %539 = bitcast i8** %530 to i64*
  store i64 %538, i64* %539, align 8
  br label %586

540:                                              ; preds = %517
  %541 = ptrtoint i8* %531 to i64
  %542 = bitcast i8** %530 to i64*
  %543 = bitcast %"class.std::__1::vector"* %523 to i64*
  %544 = load i64, i64* %543, align 8
  %545 = sub i64 %541, %544
  %546 = add i64 %545, 1
  %547 = icmp slt i64 %546, 0
  br i1 %547, label %548, label %550

548:                                              ; preds = %540
  %549 = bitcast %"class.std::__1::vector"* %523 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %549) #13
  unreachable

550:                                              ; preds = %540
  %551 = bitcast i8** %532 to i64*
  %552 = sub i64 %535, %544
  %553 = icmp ult i64 %552, 4611686018427387903
  br i1 %553, label %554, label %559

554:                                              ; preds = %550
  %555 = shl i64 %552, 1
  %556 = icmp ult i64 %555, %546
  %557 = select i1 %556, i64 %546, i64 %555
  %558 = icmp eq i64 %557, 0
  br i1 %558, label %562, label %559

559:                                              ; preds = %554, %550
  %560 = phi i64 [ %557, %554 ], [ 9223372036854775807, %550 ]
  %561 = tail call i8* @_Znwm(i64 %560) #11
  br label %562

562:                                              ; preds = %559, %554
  %563 = phi i64 [ %560, %559 ], [ 0, %554 ]
  %564 = phi i8* [ %561, %559 ], [ null, %554 ]
  %565 = getelementptr inbounds i8, i8* %564, i64 %545
  %566 = getelementptr inbounds i8, i8* %564, i64 %563
  %567 = ptrtoint i8* %566 to i64
  store i8 %529, i8* %565, align 1
  %568 = getelementptr inbounds i8, i8* %565, i64 1
  %569 = ptrtoint i8* %568 to i64
  %570 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %523, i64 0, i32 0, i32 0
  %571 = load i8*, i8** %570, align 8
  %572 = load i64, i64* %542, align 8
  %573 = ptrtoint i8* %571 to i64
  %574 = sub i64 %572, %573
  %575 = sub i64 0, %574
  %576 = getelementptr inbounds i8, i8* %565, i64 %575
  %577 = ptrtoint i8* %576 to i64
  %578 = icmp sgt i64 %574, 0
  br i1 %578, label %579, label %581

579:                                              ; preds = %562
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %576, i8* align 1 %571, i64 %574, i1 false) #12
  %580 = load i8*, i8** %570, align 8
  br label %581

581:                                              ; preds = %579, %562
  %582 = phi i8* [ %571, %562 ], [ %580, %579 ]
  store i64 %577, i64* %543, align 8
  store i64 %569, i64* %542, align 8
  store i64 %567, i64* %551, align 8
  %583 = icmp eq i8* %582, null
  br i1 %583, label %586, label %584

584:                                              ; preds = %581
  tail call void @_ZdlPv(i8* nonnull %582) #11
  %585 = load i8*, i8** %530, align 8
  br label %586

586:                                              ; preds = %536, %581, %584
  %587 = phi i8* [ %537, %536 ], [ %568, %581 ], [ %585, %584 ]
  %588 = lshr i32 %505, 2
  %589 = and i32 %588, 15
  %590 = icmp ult i32 %589, 10
  %591 = select i1 %590, i32 48, i32 87
  %592 = add nuw nsw i32 %591, %589
  %593 = trunc i32 %592 to i8
  %594 = load i8*, i8** %532, align 8
  %595 = icmp ult i8* %587, %594
  %596 = ptrtoint i8* %594 to i64
  br i1 %595, label %597, label %601

597:                                              ; preds = %586
  store i8 %593, i8* %587, align 1
  %598 = getelementptr inbounds i8, i8* %587, i64 1
  %599 = ptrtoint i8* %598 to i64
  %600 = bitcast i8** %530 to i64*
  store i64 %599, i64* %600, align 8
  br label %647

601:                                              ; preds = %586
  %602 = ptrtoint i8* %587 to i64
  %603 = bitcast i8** %530 to i64*
  %604 = bitcast %"class.std::__1::vector"* %523 to i64*
  %605 = load i64, i64* %604, align 8
  %606 = sub i64 %602, %605
  %607 = add i64 %606, 1
  %608 = icmp slt i64 %607, 0
  br i1 %608, label %609, label %611

609:                                              ; preds = %601
  %610 = bitcast %"class.std::__1::vector"* %523 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %610) #13
  unreachable

611:                                              ; preds = %601
  %612 = bitcast i8** %532 to i64*
  %613 = sub i64 %596, %605
  %614 = icmp ult i64 %613, 4611686018427387903
  br i1 %614, label %615, label %620

615:                                              ; preds = %611
  %616 = shl i64 %613, 1
  %617 = icmp ult i64 %616, %607
  %618 = select i1 %617, i64 %607, i64 %616
  %619 = icmp eq i64 %618, 0
  br i1 %619, label %623, label %620

620:                                              ; preds = %615, %611
  %621 = phi i64 [ %618, %615 ], [ 9223372036854775807, %611 ]
  %622 = tail call i8* @_Znwm(i64 %621) #11
  br label %623

623:                                              ; preds = %620, %615
  %624 = phi i64 [ %621, %620 ], [ 0, %615 ]
  %625 = phi i8* [ %622, %620 ], [ null, %615 ]
  %626 = getelementptr inbounds i8, i8* %625, i64 %606
  %627 = getelementptr inbounds i8, i8* %625, i64 %624
  %628 = ptrtoint i8* %627 to i64
  store i8 %593, i8* %626, align 1
  %629 = getelementptr inbounds i8, i8* %626, i64 1
  %630 = ptrtoint i8* %629 to i64
  %631 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %523, i64 0, i32 0, i32 0
  %632 = load i8*, i8** %631, align 8
  %633 = load i64, i64* %603, align 8
  %634 = ptrtoint i8* %632 to i64
  %635 = sub i64 %633, %634
  %636 = sub i64 0, %635
  %637 = getelementptr inbounds i8, i8* %626, i64 %636
  %638 = ptrtoint i8* %637 to i64
  %639 = icmp sgt i64 %635, 0
  br i1 %639, label %640, label %642

640:                                              ; preds = %623
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %637, i8* align 1 %632, i64 %635, i1 false) #12
  %641 = load i8*, i8** %631, align 8
  br label %642

642:                                              ; preds = %640, %623
  %643 = phi i8* [ %632, %623 ], [ %641, %640 ]
  store i64 %638, i64* %604, align 8
  store i64 %630, i64* %603, align 8
  store i64 %628, i64* %612, align 8
  %644 = icmp eq i8* %643, null
  br i1 %644, label %647, label %645

645:                                              ; preds = %642
  tail call void @_ZdlPv(i8* nonnull %643) #11
  %646 = load i8*, i8** %530, align 8
  br label %647

647:                                              ; preds = %597, %642, %645
  %648 = phi i8* [ %598, %597 ], [ %629, %642 ], [ %646, %645 ]
  %649 = lshr i32 %509, 4
  %650 = and i32 %649, 15
  %651 = icmp ult i32 %650, 10
  %652 = select i1 %651, i32 48, i32 87
  %653 = add nuw nsw i32 %652, %650
  %654 = trunc i32 %653 to i8
  %655 = load i8*, i8** %532, align 8
  %656 = icmp ult i8* %648, %655
  %657 = ptrtoint i8* %655 to i64
  br i1 %656, label %658, label %662

658:                                              ; preds = %647
  store i8 %654, i8* %648, align 1
  %659 = getelementptr inbounds i8, i8* %648, i64 1
  %660 = ptrtoint i8* %659 to i64
  %661 = bitcast i8** %530 to i64*
  store i64 %660, i64* %661, align 8
  br label %708

662:                                              ; preds = %647
  %663 = ptrtoint i8* %648 to i64
  %664 = bitcast i8** %530 to i64*
  %665 = bitcast %"class.std::__1::vector"* %523 to i64*
  %666 = load i64, i64* %665, align 8
  %667 = sub i64 %663, %666
  %668 = add i64 %667, 1
  %669 = icmp slt i64 %668, 0
  br i1 %669, label %670, label %672

670:                                              ; preds = %662
  %671 = bitcast %"class.std::__1::vector"* %523 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %671) #13
  unreachable

672:                                              ; preds = %662
  %673 = bitcast i8** %532 to i64*
  %674 = sub i64 %657, %666
  %675 = icmp ult i64 %674, 4611686018427387903
  br i1 %675, label %676, label %681

676:                                              ; preds = %672
  %677 = shl i64 %674, 1
  %678 = icmp ult i64 %677, %668
  %679 = select i1 %678, i64 %668, i64 %677
  %680 = icmp eq i64 %679, 0
  br i1 %680, label %684, label %681

681:                                              ; preds = %676, %672
  %682 = phi i64 [ %679, %676 ], [ 9223372036854775807, %672 ]
  %683 = tail call i8* @_Znwm(i64 %682) #11
  br label %684

684:                                              ; preds = %681, %676
  %685 = phi i64 [ %682, %681 ], [ 0, %676 ]
  %686 = phi i8* [ %683, %681 ], [ null, %676 ]
  %687 = getelementptr inbounds i8, i8* %686, i64 %667
  %688 = getelementptr inbounds i8, i8* %686, i64 %685
  %689 = ptrtoint i8* %688 to i64
  store i8 %654, i8* %687, align 1
  %690 = getelementptr inbounds i8, i8* %687, i64 1
  %691 = ptrtoint i8* %690 to i64
  %692 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %523, i64 0, i32 0, i32 0
  %693 = load i8*, i8** %692, align 8
  %694 = load i64, i64* %664, align 8
  %695 = ptrtoint i8* %693 to i64
  %696 = sub i64 %694, %695
  %697 = sub i64 0, %696
  %698 = getelementptr inbounds i8, i8* %687, i64 %697
  %699 = ptrtoint i8* %698 to i64
  %700 = icmp sgt i64 %696, 0
  br i1 %700, label %701, label %703

701:                                              ; preds = %684
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %698, i8* align 1 %693, i64 %696, i1 false) #12
  %702 = load i8*, i8** %692, align 8
  br label %703

703:                                              ; preds = %701, %684
  %704 = phi i8* [ %693, %684 ], [ %702, %701 ]
  store i64 %699, i64* %665, align 8
  store i64 %691, i64* %664, align 8
  store i64 %689, i64* %673, align 8
  %705 = icmp eq i8* %704, null
  br i1 %705, label %708, label %706

706:                                              ; preds = %703
  tail call void @_ZdlPv(i8* nonnull %704) #11
  %707 = load i8*, i8** %530, align 8
  br label %708

708:                                              ; preds = %658, %703, %706
  %709 = phi i8* [ %659, %658 ], [ %690, %703 ], [ %707, %706 ]
  %710 = and i8 %506, 15
  %711 = icmp ult i8 %710, 10
  %712 = select i1 %711, i8 48, i8 87
  %713 = add nuw i8 %712, %710
  %714 = load i8*, i8** %532, align 8
  %715 = icmp ult i8* %709, %714
  %716 = ptrtoint i8* %714 to i64
  br i1 %715, label %717, label %721

717:                                              ; preds = %708
  store i8 %713, i8* %709, align 1
  %718 = getelementptr inbounds i8, i8* %709, i64 1
  %719 = ptrtoint i8* %718 to i64
  %720 = bitcast i8** %530 to i64*
  store i64 %719, i64* %720, align 8
  br label %1259

721:                                              ; preds = %708
  %722 = ptrtoint i8* %709 to i64
  %723 = bitcast i8** %530 to i64*
  %724 = bitcast %"class.std::__1::vector"* %523 to i64*
  %725 = load i64, i64* %724, align 8
  %726 = sub i64 %722, %725
  %727 = add i64 %726, 1
  %728 = icmp slt i64 %727, 0
  br i1 %728, label %729, label %731

729:                                              ; preds = %721
  %730 = bitcast %"class.std::__1::vector"* %523 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %730) #13
  unreachable

731:                                              ; preds = %721
  %732 = bitcast i8** %532 to i64*
  %733 = sub i64 %716, %725
  %734 = icmp ult i64 %733, 4611686018427387903
  br i1 %734, label %735, label %740

735:                                              ; preds = %731
  %736 = shl i64 %733, 1
  %737 = icmp ult i64 %736, %727
  %738 = select i1 %737, i64 %727, i64 %736
  %739 = icmp eq i64 %738, 0
  br i1 %739, label %743, label %740

740:                                              ; preds = %735, %731
  %741 = phi i64 [ %738, %735 ], [ 9223372036854775807, %731 ]
  %742 = tail call i8* @_Znwm(i64 %741) #11
  br label %743

743:                                              ; preds = %740, %735
  %744 = phi i64 [ %741, %740 ], [ 0, %735 ]
  %745 = phi i8* [ %742, %740 ], [ null, %735 ]
  %746 = getelementptr inbounds i8, i8* %745, i64 %726
  %747 = getelementptr inbounds i8, i8* %745, i64 %744
  %748 = ptrtoint i8* %747 to i64
  store i8 %713, i8* %746, align 1
  %749 = getelementptr inbounds i8, i8* %746, i64 1
  %750 = ptrtoint i8* %749 to i64
  %751 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %523, i64 0, i32 0, i32 0
  %752 = load i8*, i8** %751, align 8
  %753 = load i64, i64* %723, align 8
  %754 = ptrtoint i8* %752 to i64
  %755 = sub i64 %753, %754
  %756 = sub i64 0, %755
  %757 = getelementptr inbounds i8, i8* %746, i64 %756
  %758 = ptrtoint i8* %757 to i64
  %759 = icmp sgt i64 %755, 0
  br i1 %759, label %760, label %762

760:                                              ; preds = %743
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %757, i8* align 1 %752, i64 %755, i1 false) #12
  %761 = load i8*, i8** %751, align 8
  br label %762

762:                                              ; preds = %760, %743
  %763 = phi i8* [ %752, %743 ], [ %761, %760 ]
  store i64 %758, i64* %724, align 8
  store i64 %750, i64* %723, align 8
  store i64 %748, i64* %732, align 8
  %764 = icmp eq i8* %763, null
  br i1 %764, label %1259, label %765

765:                                              ; preds = %762
  tail call void @_ZdlPv(i8* nonnull %763) #11
  br label %1259

766:                                              ; preds = %515
  %767 = add nsw i32 %509, -65536
  %768 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %769 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %768, i64 0, i32 0, i32 1
  %770 = load i8*, i8** %769, align 8
  %771 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"* %768, i8* %770, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 2)) #12
  %772 = lshr i32 %767, 10
  %773 = trunc i32 %772 to i16
  %774 = add nuw nsw i16 %773, -10240
  %775 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %776 = zext i16 %774 to i32
  %777 = lshr i16 %774, 12
  %778 = trunc i16 %777 to i8
  %779 = add nuw nsw i8 %778, 87
  %780 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %775, i64 0, i32 0, i32 1
  %781 = load i8*, i8** %780, align 8
  %782 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %775, i64 0, i32 0, i32 2, i32 0, i32 0
  %783 = load i8*, i8** %782, align 8
  %784 = icmp ult i8* %781, %783
  %785 = ptrtoint i8* %783 to i64
  br i1 %784, label %786, label %790

786:                                              ; preds = %766
  store i8 %779, i8* %781, align 1
  %787 = getelementptr inbounds i8, i8* %781, i64 1
  %788 = ptrtoint i8* %787 to i64
  %789 = bitcast i8** %780 to i64*
  store i64 %788, i64* %789, align 8
  br label %836

790:                                              ; preds = %766
  %791 = ptrtoint i8* %781 to i64
  %792 = bitcast i8** %780 to i64*
  %793 = bitcast %"class.std::__1::vector"* %775 to i64*
  %794 = load i64, i64* %793, align 8
  %795 = sub i64 %791, %794
  %796 = add i64 %795, 1
  %797 = icmp slt i64 %796, 0
  br i1 %797, label %798, label %800

798:                                              ; preds = %790
  %799 = bitcast %"class.std::__1::vector"* %775 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %799) #13
  unreachable

800:                                              ; preds = %790
  %801 = bitcast i8** %782 to i64*
  %802 = sub i64 %785, %794
  %803 = icmp ult i64 %802, 4611686018427387903
  br i1 %803, label %804, label %809

804:                                              ; preds = %800
  %805 = shl i64 %802, 1
  %806 = icmp ult i64 %805, %796
  %807 = select i1 %806, i64 %796, i64 %805
  %808 = icmp eq i64 %807, 0
  br i1 %808, label %812, label %809

809:                                              ; preds = %804, %800
  %810 = phi i64 [ %807, %804 ], [ 9223372036854775807, %800 ]
  %811 = tail call i8* @_Znwm(i64 %810) #11
  br label %812

812:                                              ; preds = %809, %804
  %813 = phi i64 [ %810, %809 ], [ 0, %804 ]
  %814 = phi i8* [ %811, %809 ], [ null, %804 ]
  %815 = getelementptr inbounds i8, i8* %814, i64 %795
  %816 = getelementptr inbounds i8, i8* %814, i64 %813
  %817 = ptrtoint i8* %816 to i64
  store i8 %779, i8* %815, align 1
  %818 = getelementptr inbounds i8, i8* %815, i64 1
  %819 = ptrtoint i8* %818 to i64
  %820 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %775, i64 0, i32 0, i32 0
  %821 = load i8*, i8** %820, align 8
  %822 = load i64, i64* %792, align 8
  %823 = ptrtoint i8* %821 to i64
  %824 = sub i64 %822, %823
  %825 = sub i64 0, %824
  %826 = getelementptr inbounds i8, i8* %815, i64 %825
  %827 = ptrtoint i8* %826 to i64
  %828 = icmp sgt i64 %824, 0
  br i1 %828, label %829, label %831

829:                                              ; preds = %812
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %826, i8* align 1 %821, i64 %824, i1 false) #12
  %830 = load i8*, i8** %820, align 8
  br label %831

831:                                              ; preds = %829, %812
  %832 = phi i8* [ %821, %812 ], [ %830, %829 ]
  store i64 %827, i64* %793, align 8
  store i64 %819, i64* %792, align 8
  store i64 %817, i64* %801, align 8
  %833 = icmp eq i8* %832, null
  br i1 %833, label %836, label %834

834:                                              ; preds = %831
  tail call void @_ZdlPv(i8* nonnull %832) #11
  %835 = load i8*, i8** %780, align 8
  br label %836

836:                                              ; preds = %786, %831, %834
  %837 = phi i8* [ %787, %786 ], [ %818, %831 ], [ %835, %834 ]
  %838 = lshr i32 %776, 8
  %839 = and i32 %838, 15
  %840 = icmp ult i32 %839, 10
  %841 = select i1 %840, i32 48, i32 87
  %842 = add nuw nsw i32 %841, %839
  %843 = trunc i32 %842 to i8
  %844 = load i8*, i8** %782, align 8
  %845 = icmp ult i8* %837, %844
  %846 = ptrtoint i8* %844 to i64
  br i1 %845, label %847, label %851

847:                                              ; preds = %836
  store i8 %843, i8* %837, align 1
  %848 = getelementptr inbounds i8, i8* %837, i64 1
  %849 = ptrtoint i8* %848 to i64
  %850 = bitcast i8** %780 to i64*
  store i64 %849, i64* %850, align 8
  br label %897

851:                                              ; preds = %836
  %852 = ptrtoint i8* %837 to i64
  %853 = bitcast i8** %780 to i64*
  %854 = bitcast %"class.std::__1::vector"* %775 to i64*
  %855 = load i64, i64* %854, align 8
  %856 = sub i64 %852, %855
  %857 = add i64 %856, 1
  %858 = icmp slt i64 %857, 0
  br i1 %858, label %859, label %861

859:                                              ; preds = %851
  %860 = bitcast %"class.std::__1::vector"* %775 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %860) #13
  unreachable

861:                                              ; preds = %851
  %862 = bitcast i8** %782 to i64*
  %863 = sub i64 %846, %855
  %864 = icmp ult i64 %863, 4611686018427387903
  br i1 %864, label %865, label %870

865:                                              ; preds = %861
  %866 = shl i64 %863, 1
  %867 = icmp ult i64 %866, %857
  %868 = select i1 %867, i64 %857, i64 %866
  %869 = icmp eq i64 %868, 0
  br i1 %869, label %873, label %870

870:                                              ; preds = %865, %861
  %871 = phi i64 [ %868, %865 ], [ 9223372036854775807, %861 ]
  %872 = tail call i8* @_Znwm(i64 %871) #11
  br label %873

873:                                              ; preds = %870, %865
  %874 = phi i64 [ %871, %870 ], [ 0, %865 ]
  %875 = phi i8* [ %872, %870 ], [ null, %865 ]
  %876 = getelementptr inbounds i8, i8* %875, i64 %856
  %877 = getelementptr inbounds i8, i8* %875, i64 %874
  %878 = ptrtoint i8* %877 to i64
  store i8 %843, i8* %876, align 1
  %879 = getelementptr inbounds i8, i8* %876, i64 1
  %880 = ptrtoint i8* %879 to i64
  %881 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %775, i64 0, i32 0, i32 0
  %882 = load i8*, i8** %881, align 8
  %883 = load i64, i64* %853, align 8
  %884 = ptrtoint i8* %882 to i64
  %885 = sub i64 %883, %884
  %886 = sub i64 0, %885
  %887 = getelementptr inbounds i8, i8* %876, i64 %886
  %888 = ptrtoint i8* %887 to i64
  %889 = icmp sgt i64 %885, 0
  br i1 %889, label %890, label %892

890:                                              ; preds = %873
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %887, i8* align 1 %882, i64 %885, i1 false) #12
  %891 = load i8*, i8** %881, align 8
  br label %892

892:                                              ; preds = %890, %873
  %893 = phi i8* [ %882, %873 ], [ %891, %890 ]
  store i64 %888, i64* %854, align 8
  store i64 %880, i64* %853, align 8
  store i64 %878, i64* %862, align 8
  %894 = icmp eq i8* %893, null
  br i1 %894, label %897, label %895

895:                                              ; preds = %892
  tail call void @_ZdlPv(i8* nonnull %893) #11
  %896 = load i8*, i8** %780, align 8
  br label %897

897:                                              ; preds = %847, %892, %895
  %898 = phi i8* [ %848, %847 ], [ %879, %892 ], [ %896, %895 ]
  %899 = lshr i32 %776, 4
  %900 = and i32 %899, 15
  %901 = icmp ult i32 %900, 10
  %902 = select i1 %901, i32 48, i32 87
  %903 = add nuw nsw i32 %902, %900
  %904 = trunc i32 %903 to i8
  %905 = load i8*, i8** %782, align 8
  %906 = icmp ult i8* %898, %905
  %907 = ptrtoint i8* %905 to i64
  br i1 %906, label %908, label %912

908:                                              ; preds = %897
  store i8 %904, i8* %898, align 1
  %909 = getelementptr inbounds i8, i8* %898, i64 1
  %910 = ptrtoint i8* %909 to i64
  %911 = bitcast i8** %780 to i64*
  store i64 %910, i64* %911, align 8
  br label %958

912:                                              ; preds = %897
  %913 = ptrtoint i8* %898 to i64
  %914 = bitcast i8** %780 to i64*
  %915 = bitcast %"class.std::__1::vector"* %775 to i64*
  %916 = load i64, i64* %915, align 8
  %917 = sub i64 %913, %916
  %918 = add i64 %917, 1
  %919 = icmp slt i64 %918, 0
  br i1 %919, label %920, label %922

920:                                              ; preds = %912
  %921 = bitcast %"class.std::__1::vector"* %775 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %921) #13
  unreachable

922:                                              ; preds = %912
  %923 = bitcast i8** %782 to i64*
  %924 = sub i64 %907, %916
  %925 = icmp ult i64 %924, 4611686018427387903
  br i1 %925, label %926, label %931

926:                                              ; preds = %922
  %927 = shl i64 %924, 1
  %928 = icmp ult i64 %927, %918
  %929 = select i1 %928, i64 %918, i64 %927
  %930 = icmp eq i64 %929, 0
  br i1 %930, label %934, label %931

931:                                              ; preds = %926, %922
  %932 = phi i64 [ %929, %926 ], [ 9223372036854775807, %922 ]
  %933 = tail call i8* @_Znwm(i64 %932) #11
  br label %934

934:                                              ; preds = %931, %926
  %935 = phi i64 [ %932, %931 ], [ 0, %926 ]
  %936 = phi i8* [ %933, %931 ], [ null, %926 ]
  %937 = getelementptr inbounds i8, i8* %936, i64 %917
  %938 = getelementptr inbounds i8, i8* %936, i64 %935
  %939 = ptrtoint i8* %938 to i64
  store i8 %904, i8* %937, align 1
  %940 = getelementptr inbounds i8, i8* %937, i64 1
  %941 = ptrtoint i8* %940 to i64
  %942 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %775, i64 0, i32 0, i32 0
  %943 = load i8*, i8** %942, align 8
  %944 = load i64, i64* %914, align 8
  %945 = ptrtoint i8* %943 to i64
  %946 = sub i64 %944, %945
  %947 = sub i64 0, %946
  %948 = getelementptr inbounds i8, i8* %937, i64 %947
  %949 = ptrtoint i8* %948 to i64
  %950 = icmp sgt i64 %946, 0
  br i1 %950, label %951, label %953

951:                                              ; preds = %934
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %948, i8* align 1 %943, i64 %946, i1 false) #12
  %952 = load i8*, i8** %942, align 8
  br label %953

953:                                              ; preds = %951, %934
  %954 = phi i8* [ %943, %934 ], [ %952, %951 ]
  store i64 %949, i64* %915, align 8
  store i64 %941, i64* %914, align 8
  store i64 %939, i64* %923, align 8
  %955 = icmp eq i8* %954, null
  br i1 %955, label %958, label %956

956:                                              ; preds = %953
  tail call void @_ZdlPv(i8* nonnull %954) #11
  %957 = load i8*, i8** %780, align 8
  br label %958

958:                                              ; preds = %908, %953, %956
  %959 = phi i8* [ %909, %908 ], [ %940, %953 ], [ %957, %956 ]
  %960 = and i32 %776, 15
  %961 = icmp ult i32 %960, 10
  %962 = select i1 %961, i32 48, i32 87
  %963 = add nuw nsw i32 %962, %960
  %964 = trunc i32 %963 to i8
  %965 = load i8*, i8** %782, align 8
  %966 = icmp ult i8* %959, %965
  %967 = ptrtoint i8* %965 to i64
  br i1 %966, label %968, label %972

968:                                              ; preds = %958
  store i8 %964, i8* %959, align 1
  %969 = getelementptr inbounds i8, i8* %959, i64 1
  %970 = ptrtoint i8* %969 to i64
  %971 = bitcast i8** %780 to i64*
  store i64 %970, i64* %971, align 8
  br label %1017

972:                                              ; preds = %958
  %973 = ptrtoint i8* %959 to i64
  %974 = bitcast i8** %780 to i64*
  %975 = bitcast %"class.std::__1::vector"* %775 to i64*
  %976 = load i64, i64* %975, align 8
  %977 = sub i64 %973, %976
  %978 = add i64 %977, 1
  %979 = icmp slt i64 %978, 0
  br i1 %979, label %980, label %982

980:                                              ; preds = %972
  %981 = bitcast %"class.std::__1::vector"* %775 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %981) #13
  unreachable

982:                                              ; preds = %972
  %983 = bitcast i8** %782 to i64*
  %984 = sub i64 %967, %976
  %985 = icmp ult i64 %984, 4611686018427387903
  br i1 %985, label %986, label %991

986:                                              ; preds = %982
  %987 = shl i64 %984, 1
  %988 = icmp ult i64 %987, %978
  %989 = select i1 %988, i64 %978, i64 %987
  %990 = icmp eq i64 %989, 0
  br i1 %990, label %994, label %991

991:                                              ; preds = %986, %982
  %992 = phi i64 [ %989, %986 ], [ 9223372036854775807, %982 ]
  %993 = tail call i8* @_Znwm(i64 %992) #11
  br label %994

994:                                              ; preds = %991, %986
  %995 = phi i64 [ %992, %991 ], [ 0, %986 ]
  %996 = phi i8* [ %993, %991 ], [ null, %986 ]
  %997 = getelementptr inbounds i8, i8* %996, i64 %977
  %998 = getelementptr inbounds i8, i8* %996, i64 %995
  %999 = ptrtoint i8* %998 to i64
  store i8 %964, i8* %997, align 1
  %1000 = getelementptr inbounds i8, i8* %997, i64 1
  %1001 = ptrtoint i8* %1000 to i64
  %1002 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %775, i64 0, i32 0, i32 0
  %1003 = load i8*, i8** %1002, align 8
  %1004 = load i64, i64* %974, align 8
  %1005 = ptrtoint i8* %1003 to i64
  %1006 = sub i64 %1004, %1005
  %1007 = sub i64 0, %1006
  %1008 = getelementptr inbounds i8, i8* %997, i64 %1007
  %1009 = ptrtoint i8* %1008 to i64
  %1010 = icmp sgt i64 %1006, 0
  br i1 %1010, label %1011, label %1013

1011:                                             ; preds = %994
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1008, i8* align 1 %1003, i64 %1006, i1 false) #12
  %1012 = load i8*, i8** %1002, align 8
  br label %1013

1013:                                             ; preds = %1011, %994
  %1014 = phi i8* [ %1003, %994 ], [ %1012, %1011 ]
  store i64 %1009, i64* %975, align 8
  store i64 %1001, i64* %974, align 8
  store i64 %999, i64* %983, align 8
  %1015 = icmp eq i8* %1014, null
  br i1 %1015, label %1017, label %1016

1016:                                             ; preds = %1013
  tail call void @_ZdlPv(i8* nonnull %1014) #11
  br label %1017

1017:                                             ; preds = %968, %1013, %1016
  %1018 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %1019 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1018, i64 0, i32 0, i32 1
  %1020 = load i8*, i8** %1019, align 8
  %1021 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"* %1018, i8* %1020, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 2)) #12
  %1022 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %1023 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1022, i64 0, i32 0, i32 1
  %1024 = load i8*, i8** %1023, align 8
  %1025 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1022, i64 0, i32 0, i32 2, i32 0, i32 0
  %1026 = load i8*, i8** %1025, align 8
  %1027 = icmp ult i8* %1024, %1026
  %1028 = ptrtoint i8* %1026 to i64
  br i1 %1027, label %1029, label %1033

1029:                                             ; preds = %1017
  store i8 100, i8* %1024, align 1
  %1030 = getelementptr inbounds i8, i8* %1024, i64 1
  %1031 = ptrtoint i8* %1030 to i64
  %1032 = bitcast i8** %1023 to i64*
  store i64 %1031, i64* %1032, align 8
  br label %1079

1033:                                             ; preds = %1017
  %1034 = ptrtoint i8* %1024 to i64
  %1035 = bitcast i8** %1023 to i64*
  %1036 = bitcast %"class.std::__1::vector"* %1022 to i64*
  %1037 = load i64, i64* %1036, align 8
  %1038 = sub i64 %1034, %1037
  %1039 = add i64 %1038, 1
  %1040 = icmp slt i64 %1039, 0
  br i1 %1040, label %1041, label %1043

1041:                                             ; preds = %1033
  %1042 = bitcast %"class.std::__1::vector"* %1022 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1042) #13
  unreachable

1043:                                             ; preds = %1033
  %1044 = bitcast i8** %1025 to i64*
  %1045 = sub i64 %1028, %1037
  %1046 = icmp ult i64 %1045, 4611686018427387903
  br i1 %1046, label %1047, label %1052

1047:                                             ; preds = %1043
  %1048 = shl i64 %1045, 1
  %1049 = icmp ult i64 %1048, %1039
  %1050 = select i1 %1049, i64 %1039, i64 %1048
  %1051 = icmp eq i64 %1050, 0
  br i1 %1051, label %1055, label %1052

1052:                                             ; preds = %1047, %1043
  %1053 = phi i64 [ %1050, %1047 ], [ 9223372036854775807, %1043 ]
  %1054 = tail call i8* @_Znwm(i64 %1053) #11
  br label %1055

1055:                                             ; preds = %1052, %1047
  %1056 = phi i64 [ %1053, %1052 ], [ 0, %1047 ]
  %1057 = phi i8* [ %1054, %1052 ], [ null, %1047 ]
  %1058 = getelementptr inbounds i8, i8* %1057, i64 %1038
  %1059 = getelementptr inbounds i8, i8* %1057, i64 %1056
  %1060 = ptrtoint i8* %1059 to i64
  store i8 100, i8* %1058, align 1
  %1061 = getelementptr inbounds i8, i8* %1058, i64 1
  %1062 = ptrtoint i8* %1061 to i64
  %1063 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1022, i64 0, i32 0, i32 0
  %1064 = load i8*, i8** %1063, align 8
  %1065 = load i64, i64* %1035, align 8
  %1066 = ptrtoint i8* %1064 to i64
  %1067 = sub i64 %1065, %1066
  %1068 = sub i64 0, %1067
  %1069 = getelementptr inbounds i8, i8* %1058, i64 %1068
  %1070 = ptrtoint i8* %1069 to i64
  %1071 = icmp sgt i64 %1067, 0
  br i1 %1071, label %1072, label %1074

1072:                                             ; preds = %1055
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1069, i8* align 1 %1064, i64 %1067, i1 false) #12
  %1073 = load i8*, i8** %1063, align 8
  br label %1074

1074:                                             ; preds = %1072, %1055
  %1075 = phi i8* [ %1064, %1055 ], [ %1073, %1072 ]
  store i64 %1070, i64* %1036, align 8
  store i64 %1062, i64* %1035, align 8
  store i64 %1060, i64* %1044, align 8
  %1076 = icmp eq i8* %1075, null
  br i1 %1076, label %1079, label %1077

1077:                                             ; preds = %1074
  tail call void @_ZdlPv(i8* nonnull %1075) #11
  %1078 = load i8*, i8** %1023, align 8
  br label %1079

1079:                                             ; preds = %1029, %1074, %1077
  %1080 = phi i8* [ %1030, %1029 ], [ %1061, %1074 ], [ %1078, %1077 ]
  %1081 = lshr i32 %767, 8
  %1082 = trunc i32 %1081 to i8
  %1083 = and i8 %1082, 3
  %1084 = or i8 %1083, 12
  %1085 = add nuw nsw i8 %1084, 87
  %1086 = load i8*, i8** %1025, align 8
  %1087 = icmp ult i8* %1080, %1086
  %1088 = ptrtoint i8* %1086 to i64
  br i1 %1087, label %1089, label %1093

1089:                                             ; preds = %1079
  store i8 %1085, i8* %1080, align 1
  %1090 = getelementptr inbounds i8, i8* %1080, i64 1
  %1091 = ptrtoint i8* %1090 to i64
  %1092 = bitcast i8** %1023 to i64*
  store i64 %1091, i64* %1092, align 8
  br label %1139

1093:                                             ; preds = %1079
  %1094 = ptrtoint i8* %1080 to i64
  %1095 = bitcast i8** %1023 to i64*
  %1096 = bitcast %"class.std::__1::vector"* %1022 to i64*
  %1097 = load i64, i64* %1096, align 8
  %1098 = sub i64 %1094, %1097
  %1099 = add i64 %1098, 1
  %1100 = icmp slt i64 %1099, 0
  br i1 %1100, label %1101, label %1103

1101:                                             ; preds = %1093
  %1102 = bitcast %"class.std::__1::vector"* %1022 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1102) #13
  unreachable

1103:                                             ; preds = %1093
  %1104 = bitcast i8** %1025 to i64*
  %1105 = sub i64 %1088, %1097
  %1106 = icmp ult i64 %1105, 4611686018427387903
  br i1 %1106, label %1107, label %1112

1107:                                             ; preds = %1103
  %1108 = shl i64 %1105, 1
  %1109 = icmp ult i64 %1108, %1099
  %1110 = select i1 %1109, i64 %1099, i64 %1108
  %1111 = icmp eq i64 %1110, 0
  br i1 %1111, label %1115, label %1112

1112:                                             ; preds = %1107, %1103
  %1113 = phi i64 [ %1110, %1107 ], [ 9223372036854775807, %1103 ]
  %1114 = tail call i8* @_Znwm(i64 %1113) #11
  br label %1115

1115:                                             ; preds = %1112, %1107
  %1116 = phi i64 [ %1113, %1112 ], [ 0, %1107 ]
  %1117 = phi i8* [ %1114, %1112 ], [ null, %1107 ]
  %1118 = getelementptr inbounds i8, i8* %1117, i64 %1098
  %1119 = getelementptr inbounds i8, i8* %1117, i64 %1116
  %1120 = ptrtoint i8* %1119 to i64
  store i8 %1085, i8* %1118, align 1
  %1121 = getelementptr inbounds i8, i8* %1118, i64 1
  %1122 = ptrtoint i8* %1121 to i64
  %1123 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1022, i64 0, i32 0, i32 0
  %1124 = load i8*, i8** %1123, align 8
  %1125 = load i64, i64* %1095, align 8
  %1126 = ptrtoint i8* %1124 to i64
  %1127 = sub i64 %1125, %1126
  %1128 = sub i64 0, %1127
  %1129 = getelementptr inbounds i8, i8* %1118, i64 %1128
  %1130 = ptrtoint i8* %1129 to i64
  %1131 = icmp sgt i64 %1127, 0
  br i1 %1131, label %1132, label %1134

1132:                                             ; preds = %1115
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1129, i8* align 1 %1124, i64 %1127, i1 false) #12
  %1133 = load i8*, i8** %1123, align 8
  br label %1134

1134:                                             ; preds = %1132, %1115
  %1135 = phi i8* [ %1124, %1115 ], [ %1133, %1132 ]
  store i64 %1130, i64* %1096, align 8
  store i64 %1122, i64* %1095, align 8
  store i64 %1120, i64* %1104, align 8
  %1136 = icmp eq i8* %1135, null
  br i1 %1136, label %1139, label %1137

1137:                                             ; preds = %1134
  tail call void @_ZdlPv(i8* nonnull %1135) #11
  %1138 = load i8*, i8** %1023, align 8
  br label %1139

1139:                                             ; preds = %1089, %1134, %1137
  %1140 = phi i8* [ %1090, %1089 ], [ %1121, %1134 ], [ %1138, %1137 ]
  %1141 = lshr i32 %767, 4
  %1142 = and i32 %1141, 15
  %1143 = icmp ult i32 %1142, 10
  %1144 = select i1 %1143, i32 48, i32 87
  %1145 = add nuw nsw i32 %1144, %1142
  %1146 = trunc i32 %1145 to i8
  %1147 = load i8*, i8** %1025, align 8
  %1148 = icmp ult i8* %1140, %1147
  %1149 = ptrtoint i8* %1147 to i64
  br i1 %1148, label %1150, label %1154

1150:                                             ; preds = %1139
  store i8 %1146, i8* %1140, align 1
  %1151 = getelementptr inbounds i8, i8* %1140, i64 1
  %1152 = ptrtoint i8* %1151 to i64
  %1153 = bitcast i8** %1023 to i64*
  store i64 %1152, i64* %1153, align 8
  br label %1200

1154:                                             ; preds = %1139
  %1155 = ptrtoint i8* %1140 to i64
  %1156 = bitcast i8** %1023 to i64*
  %1157 = bitcast %"class.std::__1::vector"* %1022 to i64*
  %1158 = load i64, i64* %1157, align 8
  %1159 = sub i64 %1155, %1158
  %1160 = add i64 %1159, 1
  %1161 = icmp slt i64 %1160, 0
  br i1 %1161, label %1162, label %1164

1162:                                             ; preds = %1154
  %1163 = bitcast %"class.std::__1::vector"* %1022 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1163) #13
  unreachable

1164:                                             ; preds = %1154
  %1165 = bitcast i8** %1025 to i64*
  %1166 = sub i64 %1149, %1158
  %1167 = icmp ult i64 %1166, 4611686018427387903
  br i1 %1167, label %1168, label %1173

1168:                                             ; preds = %1164
  %1169 = shl i64 %1166, 1
  %1170 = icmp ult i64 %1169, %1160
  %1171 = select i1 %1170, i64 %1160, i64 %1169
  %1172 = icmp eq i64 %1171, 0
  br i1 %1172, label %1176, label %1173

1173:                                             ; preds = %1168, %1164
  %1174 = phi i64 [ %1171, %1168 ], [ 9223372036854775807, %1164 ]
  %1175 = tail call i8* @_Znwm(i64 %1174) #11
  br label %1176

1176:                                             ; preds = %1173, %1168
  %1177 = phi i64 [ %1174, %1173 ], [ 0, %1168 ]
  %1178 = phi i8* [ %1175, %1173 ], [ null, %1168 ]
  %1179 = getelementptr inbounds i8, i8* %1178, i64 %1159
  %1180 = getelementptr inbounds i8, i8* %1178, i64 %1177
  %1181 = ptrtoint i8* %1180 to i64
  store i8 %1146, i8* %1179, align 1
  %1182 = getelementptr inbounds i8, i8* %1179, i64 1
  %1183 = ptrtoint i8* %1182 to i64
  %1184 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1022, i64 0, i32 0, i32 0
  %1185 = load i8*, i8** %1184, align 8
  %1186 = load i64, i64* %1156, align 8
  %1187 = ptrtoint i8* %1185 to i64
  %1188 = sub i64 %1186, %1187
  %1189 = sub i64 0, %1188
  %1190 = getelementptr inbounds i8, i8* %1179, i64 %1189
  %1191 = ptrtoint i8* %1190 to i64
  %1192 = icmp sgt i64 %1188, 0
  br i1 %1192, label %1193, label %1195

1193:                                             ; preds = %1176
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1190, i8* align 1 %1185, i64 %1188, i1 false) #12
  %1194 = load i8*, i8** %1184, align 8
  br label %1195

1195:                                             ; preds = %1193, %1176
  %1196 = phi i8* [ %1185, %1176 ], [ %1194, %1193 ]
  store i64 %1191, i64* %1157, align 8
  store i64 %1183, i64* %1156, align 8
  store i64 %1181, i64* %1165, align 8
  %1197 = icmp eq i8* %1196, null
  br i1 %1197, label %1200, label %1198

1198:                                             ; preds = %1195
  tail call void @_ZdlPv(i8* nonnull %1196) #11
  %1199 = load i8*, i8** %1023, align 8
  br label %1200

1200:                                             ; preds = %1150, %1195, %1198
  %1201 = phi i8* [ %1151, %1150 ], [ %1182, %1195 ], [ %1199, %1198 ]
  %1202 = and i32 %767, 15
  %1203 = icmp ult i32 %1202, 10
  %1204 = select i1 %1203, i32 48, i32 87
  %1205 = add nuw nsw i32 %1204, %1202
  %1206 = trunc i32 %1205 to i8
  %1207 = load i8*, i8** %1025, align 8
  %1208 = icmp ult i8* %1201, %1207
  %1209 = ptrtoint i8* %1207 to i64
  br i1 %1208, label %1210, label %1214

1210:                                             ; preds = %1200
  store i8 %1206, i8* %1201, align 1
  %1211 = getelementptr inbounds i8, i8* %1201, i64 1
  %1212 = ptrtoint i8* %1211 to i64
  %1213 = bitcast i8** %1023 to i64*
  store i64 %1212, i64* %1213, align 8
  br label %1259

1214:                                             ; preds = %1200
  %1215 = ptrtoint i8* %1201 to i64
  %1216 = bitcast i8** %1023 to i64*
  %1217 = bitcast %"class.std::__1::vector"* %1022 to i64*
  %1218 = load i64, i64* %1217, align 8
  %1219 = sub i64 %1215, %1218
  %1220 = add i64 %1219, 1
  %1221 = icmp slt i64 %1220, 0
  br i1 %1221, label %1222, label %1224

1222:                                             ; preds = %1214
  %1223 = bitcast %"class.std::__1::vector"* %1022 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1223) #13
  unreachable

1224:                                             ; preds = %1214
  %1225 = bitcast i8** %1025 to i64*
  %1226 = sub i64 %1209, %1218
  %1227 = icmp ult i64 %1226, 4611686018427387903
  br i1 %1227, label %1228, label %1233

1228:                                             ; preds = %1224
  %1229 = shl i64 %1226, 1
  %1230 = icmp ult i64 %1229, %1220
  %1231 = select i1 %1230, i64 %1220, i64 %1229
  %1232 = icmp eq i64 %1231, 0
  br i1 %1232, label %1236, label %1233

1233:                                             ; preds = %1228, %1224
  %1234 = phi i64 [ %1231, %1228 ], [ 9223372036854775807, %1224 ]
  %1235 = tail call i8* @_Znwm(i64 %1234) #11
  br label %1236

1236:                                             ; preds = %1233, %1228
  %1237 = phi i64 [ %1234, %1233 ], [ 0, %1228 ]
  %1238 = phi i8* [ %1235, %1233 ], [ null, %1228 ]
  %1239 = getelementptr inbounds i8, i8* %1238, i64 %1219
  %1240 = getelementptr inbounds i8, i8* %1238, i64 %1237
  %1241 = ptrtoint i8* %1240 to i64
  store i8 %1206, i8* %1239, align 1
  %1242 = getelementptr inbounds i8, i8* %1239, i64 1
  %1243 = ptrtoint i8* %1242 to i64
  %1244 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1022, i64 0, i32 0, i32 0
  %1245 = load i8*, i8** %1244, align 8
  %1246 = load i64, i64* %1216, align 8
  %1247 = ptrtoint i8* %1245 to i64
  %1248 = sub i64 %1246, %1247
  %1249 = sub i64 0, %1248
  %1250 = getelementptr inbounds i8, i8* %1239, i64 %1249
  %1251 = ptrtoint i8* %1250 to i64
  %1252 = icmp sgt i64 %1248, 0
  br i1 %1252, label %1253, label %1255

1253:                                             ; preds = %1236
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1250, i8* align 1 %1245, i64 %1248, i1 false) #12
  %1254 = load i8*, i8** %1244, align 8
  br label %1255

1255:                                             ; preds = %1253, %1236
  %1256 = phi i8* [ %1245, %1236 ], [ %1254, %1253 ]
  store i64 %1251, i64* %1217, align 8
  store i64 %1243, i64* %1216, align 8
  store i64 %1241, i64* %1225, align 8
  %1257 = icmp eq i8* %1256, null
  br i1 %1257, label %1259, label %1258

1258:                                             ; preds = %1255
  tail call void @_ZdlPv(i8* nonnull %1256) #11
  br label %1259

1259:                                             ; preds = %1258, %1255, %1210, %765, %762, %717, %474, %471, %426, %240, %237, %192, %481, %484, %504, %145, %155, %165, %175, %170, %160, %150
  %1260 = phi i64 [ %141, %145 ], [ %141, %150 ], [ %141, %155 ], [ %141, %160 ], [ %141, %165 ], [ %141, %170 ], [ %141, %175 ], [ %141, %481 ], [ %141, %484 ], [ %511, %504 ], [ %141, %192 ], [ %141, %237 ], [ %141, %240 ], [ %141, %426 ], [ %141, %471 ], [ %141, %474 ], [ %511, %717 ], [ %511, %762 ], [ %511, %765 ], [ %511, %1210 ], [ %511, %1255 ], [ %511, %1258 ]
  %1261 = add i64 %1260, 1
  %1262 = icmp ult i64 %1261, %2
  br i1 %1262, label %140, label %83

1263:                                             ; preds = %139, %136, %91, %3
  ret void

1264:                                             ; preds = %490
  %1265 = add i64 %141, 2
  %1266 = getelementptr inbounds i8, i8* %1, i64 %1265
  %1267 = load i8, i8* %1266, align 1
  %1268 = zext i8 %1267 to i32
  %1269 = and i32 %1268, 192
  %1270 = icmp ne i32 %1269, 128
  %1271 = or i1 %499, %1270
  %1272 = shl nuw nsw i32 %502, 6
  %1273 = and i32 %1268, 63
  %1274 = or i32 %1273, %1272
  %1275 = icmp eq i32 %486, 3
  br i1 %1275, label %1276, label %504

1276:                                             ; preds = %1264
  %1277 = add i64 %141, 3
  %1278 = getelementptr inbounds i8, i8* %1, i64 %1277
  %1279 = load i8, i8* %1278, align 1
  %1280 = zext i8 %1279 to i32
  %1281 = and i32 %1280, 192
  %1282 = icmp ne i32 %1281, 128
  %1283 = or i1 %1271, %1282
  %1284 = shl nuw nsw i32 %1274, 6
  %1285 = and i32 %1280, 63
  %1286 = or i32 %1285, %1284
  br label %504
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__16vectorIhNS3_9allocatorIhEEEEE14HandleString16ENS_4spanItEE(%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* nocapture readonly, i16*, i64) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 2
  %5 = load %"struct.v8_crdtp::Status"*, %"struct.v8_crdtp::Status"** %4, align 8
  %6 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %5, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %492

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 2, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = add i64 %11, -1
  %15 = add i64 %14, %13
  %16 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %17 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %16, align 8
  %18 = lshr i64 %15, 9
  %19 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %17, i64 %18
  %20 = load %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %19, align 8
  %21 = and i64 %15, 511
  %22 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %20, i64 %21
  %23 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 1
  %24 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  tail call fastcc void @_ZN8v8_crdtp4json12_GLOBAL__N_15State12StartElementEPNSt3__16vectorIhNS3_9allocatorIhEEEE(%"class.v8_crdtp::json::(anonymous namespace)::State"* %22, %"class.std::__1::vector"* %24)
  %25 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %26 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %25, i64 0, i32 0, i32 1
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %25, i64 0, i32 0, i32 2, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  %30 = icmp ult i8* %27, %29
  %31 = ptrtoint i8* %29 to i64
  br i1 %30, label %32, label %36

32:                                               ; preds = %9
  store i8 34, i8* %27, align 1
  %33 = getelementptr inbounds i8, i8* %27, i64 1
  %34 = ptrtoint i8* %33 to i64
  %35 = bitcast i8** %26 to i64*
  store i64 %34, i64* %35, align 8
  br label %81

36:                                               ; preds = %9
  %37 = ptrtoint i8* %27 to i64
  %38 = bitcast i8** %26 to i64*
  %39 = bitcast %"class.std::__1::vector"* %25 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %37, %40
  %42 = add i64 %41, 1
  %43 = icmp slt i64 %42, 0
  br i1 %43, label %44, label %46

44:                                               ; preds = %36
  %45 = bitcast %"class.std::__1::vector"* %25 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %45) #13
  unreachable

46:                                               ; preds = %36
  %47 = bitcast i8** %28 to i64*
  %48 = sub i64 %31, %40
  %49 = icmp ult i64 %48, 4611686018427387903
  br i1 %49, label %50, label %55

50:                                               ; preds = %46
  %51 = shl i64 %48, 1
  %52 = icmp ult i64 %51, %42
  %53 = select i1 %52, i64 %42, i64 %51
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %58, label %55

55:                                               ; preds = %50, %46
  %56 = phi i64 [ %53, %50 ], [ 9223372036854775807, %46 ]
  %57 = tail call i8* @_Znwm(i64 %56) #11
  br label %58

58:                                               ; preds = %55, %50
  %59 = phi i64 [ %56, %55 ], [ 0, %50 ]
  %60 = phi i8* [ %57, %55 ], [ null, %50 ]
  %61 = getelementptr inbounds i8, i8* %60, i64 %41
  %62 = getelementptr inbounds i8, i8* %60, i64 %59
  %63 = ptrtoint i8* %62 to i64
  store i8 34, i8* %61, align 1
  %64 = getelementptr inbounds i8, i8* %61, i64 1
  %65 = ptrtoint i8* %64 to i64
  %66 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %25, i64 0, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = load i64, i64* %38, align 8
  %69 = ptrtoint i8* %67 to i64
  %70 = sub i64 %68, %69
  %71 = sub i64 0, %70
  %72 = getelementptr inbounds i8, i8* %61, i64 %71
  %73 = ptrtoint i8* %72 to i64
  %74 = icmp sgt i64 %70, 0
  br i1 %74, label %75, label %77

75:                                               ; preds = %58
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %72, i8* align 1 %67, i64 %70, i1 false) #12
  %76 = load i8*, i8** %66, align 8
  br label %77

77:                                               ; preds = %75, %58
  %78 = phi i8* [ %67, %58 ], [ %76, %75 ]
  store i64 %73, i64* %39, align 8
  store i64 %65, i64* %38, align 8
  store i64 %63, i64* %47, align 8
  %79 = icmp eq i8* %78, null
  br i1 %79, label %81, label %80

80:                                               ; preds = %77
  tail call void @_ZdlPv(i8* nonnull %78) #11
  br label %81

81:                                               ; preds = %32, %77, %80
  %82 = getelementptr inbounds i16, i16* %1, i64 %2
  %83 = icmp eq i64 %2, 0
  br i1 %83, label %84, label %141

84:                                               ; preds = %489, %81
  %85 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %86 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %85, i64 0, i32 0, i32 1
  %87 = load i8*, i8** %86, align 8
  %88 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %85, i64 0, i32 0, i32 2, i32 0, i32 0
  %89 = load i8*, i8** %88, align 8
  %90 = icmp ult i8* %87, %89
  %91 = ptrtoint i8* %89 to i64
  br i1 %90, label %92, label %96

92:                                               ; preds = %84
  store i8 34, i8* %87, align 1
  %93 = getelementptr inbounds i8, i8* %87, i64 1
  %94 = ptrtoint i8* %93 to i64
  %95 = bitcast i8** %86 to i64*
  store i64 %94, i64* %95, align 8
  br label %492

96:                                               ; preds = %84
  %97 = ptrtoint i8* %87 to i64
  %98 = bitcast i8** %86 to i64*
  %99 = bitcast %"class.std::__1::vector"* %85 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = sub i64 %97, %100
  %102 = add i64 %101, 1
  %103 = icmp slt i64 %102, 0
  br i1 %103, label %104, label %106

104:                                              ; preds = %96
  %105 = bitcast %"class.std::__1::vector"* %85 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %105) #13
  unreachable

106:                                              ; preds = %96
  %107 = bitcast i8** %88 to i64*
  %108 = sub i64 %91, %100
  %109 = icmp ult i64 %108, 4611686018427387903
  br i1 %109, label %110, label %115

110:                                              ; preds = %106
  %111 = shl i64 %108, 1
  %112 = icmp ult i64 %111, %102
  %113 = select i1 %112, i64 %102, i64 %111
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %118, label %115

115:                                              ; preds = %110, %106
  %116 = phi i64 [ %113, %110 ], [ 9223372036854775807, %106 ]
  %117 = tail call i8* @_Znwm(i64 %116) #11
  br label %118

118:                                              ; preds = %115, %110
  %119 = phi i64 [ %116, %115 ], [ 0, %110 ]
  %120 = phi i8* [ %117, %115 ], [ null, %110 ]
  %121 = getelementptr inbounds i8, i8* %120, i64 %101
  %122 = getelementptr inbounds i8, i8* %120, i64 %119
  %123 = ptrtoint i8* %122 to i64
  store i8 34, i8* %121, align 1
  %124 = getelementptr inbounds i8, i8* %121, i64 1
  %125 = ptrtoint i8* %124 to i64
  %126 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %85, i64 0, i32 0, i32 0
  %127 = load i8*, i8** %126, align 8
  %128 = load i64, i64* %98, align 8
  %129 = ptrtoint i8* %127 to i64
  %130 = sub i64 %128, %129
  %131 = sub i64 0, %130
  %132 = getelementptr inbounds i8, i8* %121, i64 %131
  %133 = ptrtoint i8* %132 to i64
  %134 = icmp sgt i64 %130, 0
  br i1 %134, label %135, label %137

135:                                              ; preds = %118
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %132, i8* align 1 %127, i64 %130, i1 false) #12
  %136 = load i8*, i8** %126, align 8
  br label %137

137:                                              ; preds = %135, %118
  %138 = phi i8* [ %127, %118 ], [ %136, %135 ]
  store i64 %133, i64* %99, align 8
  store i64 %125, i64* %98, align 8
  store i64 %123, i64* %107, align 8
  %139 = icmp eq i8* %138, null
  br i1 %139, label %492, label %140

140:                                              ; preds = %137
  tail call void @_ZdlPv(i8* nonnull %138) #11
  br label %492

141:                                              ; preds = %81, %489
  %142 = phi i16* [ %490, %489 ], [ %1, %81 ]
  %143 = load i16, i16* %142, align 2
  switch i16 %143, label %179 [
    i16 34, label %144
    i16 92, label %149
    i16 8, label %154
    i16 12, label %159
    i16 10, label %164
    i16 13, label %169
    i16 9, label %174
  ]

144:                                              ; preds = %141
  %145 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %146 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %145, i64 0, i32 0, i32 1
  %147 = load i8*, i8** %146, align 8
  %148 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"* %145, i8* %147, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 2)) #12
  br label %489

149:                                              ; preds = %141
  %150 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %151 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %150, i64 0, i32 0, i32 1
  %152 = load i8*, i8** %151, align 8
  %153 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"* %150, i8* %152, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 2)) #12
  br label %489

154:                                              ; preds = %141
  %155 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %156 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %155, i64 0, i32 0, i32 1
  %157 = load i8*, i8** %156, align 8
  %158 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"* %155, i8* %157, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 2)) #12
  br label %489

159:                                              ; preds = %141
  %160 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %161 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %160, i64 0, i32 0, i32 1
  %162 = load i8*, i8** %161, align 8
  %163 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"* %160, i8* %162, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 2)) #12
  br label %489

164:                                              ; preds = %141
  %165 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %166 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %165, i64 0, i32 0, i32 1
  %167 = load i8*, i8** %166, align 8
  %168 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"* %165, i8* %167, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 2)) #12
  br label %489

169:                                              ; preds = %141
  %170 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %171 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %170, i64 0, i32 0, i32 1
  %172 = load i8*, i8** %171, align 8
  %173 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"* %170, i8* %172, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 2)) #12
  br label %489

174:                                              ; preds = %141
  %175 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %176 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %175, i64 0, i32 0, i32 1
  %177 = load i8*, i8** %176, align 8
  %178 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"* %175, i8* %177, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 2)) #12
  br label %489

179:                                              ; preds = %141
  %180 = add i16 %143, -32
  %181 = icmp ult i16 %180, 96
  br i1 %181, label %182, label %240

182:                                              ; preds = %179
  %183 = trunc i16 %143 to i8
  %184 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %185 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %184, i64 0, i32 0, i32 1
  %186 = load i8*, i8** %185, align 8
  %187 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %184, i64 0, i32 0, i32 2, i32 0, i32 0
  %188 = load i8*, i8** %187, align 8
  %189 = icmp ult i8* %186, %188
  %190 = ptrtoint i8* %188 to i64
  br i1 %189, label %191, label %195

191:                                              ; preds = %182
  store i8 %183, i8* %186, align 1
  %192 = getelementptr inbounds i8, i8* %186, i64 1
  %193 = ptrtoint i8* %192 to i64
  %194 = bitcast i8** %185 to i64*
  store i64 %193, i64* %194, align 8
  br label %489

195:                                              ; preds = %182
  %196 = ptrtoint i8* %186 to i64
  %197 = bitcast i8** %185 to i64*
  %198 = bitcast %"class.std::__1::vector"* %184 to i64*
  %199 = load i64, i64* %198, align 8
  %200 = sub i64 %196, %199
  %201 = add i64 %200, 1
  %202 = icmp slt i64 %201, 0
  br i1 %202, label %203, label %205

203:                                              ; preds = %195
  %204 = bitcast %"class.std::__1::vector"* %184 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %204) #13
  unreachable

205:                                              ; preds = %195
  %206 = bitcast i8** %187 to i64*
  %207 = sub i64 %190, %199
  %208 = icmp ult i64 %207, 4611686018427387903
  br i1 %208, label %209, label %214

209:                                              ; preds = %205
  %210 = shl i64 %207, 1
  %211 = icmp ult i64 %210, %201
  %212 = select i1 %211, i64 %201, i64 %210
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %217, label %214

214:                                              ; preds = %209, %205
  %215 = phi i64 [ %212, %209 ], [ 9223372036854775807, %205 ]
  %216 = tail call i8* @_Znwm(i64 %215) #11
  br label %217

217:                                              ; preds = %214, %209
  %218 = phi i64 [ %215, %214 ], [ 0, %209 ]
  %219 = phi i8* [ %216, %214 ], [ null, %209 ]
  %220 = getelementptr inbounds i8, i8* %219, i64 %200
  %221 = getelementptr inbounds i8, i8* %219, i64 %218
  %222 = ptrtoint i8* %221 to i64
  store i8 %183, i8* %220, align 1
  %223 = getelementptr inbounds i8, i8* %220, i64 1
  %224 = ptrtoint i8* %223 to i64
  %225 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %184, i64 0, i32 0, i32 0
  %226 = load i8*, i8** %225, align 8
  %227 = load i64, i64* %197, align 8
  %228 = ptrtoint i8* %226 to i64
  %229 = sub i64 %227, %228
  %230 = sub i64 0, %229
  %231 = getelementptr inbounds i8, i8* %220, i64 %230
  %232 = ptrtoint i8* %231 to i64
  %233 = icmp sgt i64 %229, 0
  br i1 %233, label %234, label %236

234:                                              ; preds = %217
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %231, i8* align 1 %226, i64 %229, i1 false) #12
  %235 = load i8*, i8** %225, align 8
  br label %236

236:                                              ; preds = %234, %217
  %237 = phi i8* [ %226, %217 ], [ %235, %234 ]
  store i64 %232, i64* %198, align 8
  store i64 %224, i64* %197, align 8
  store i64 %222, i64* %206, align 8
  %238 = icmp eq i8* %237, null
  br i1 %238, label %489, label %239

239:                                              ; preds = %236
  tail call void @_ZdlPv(i8* nonnull %237) #11
  br label %489

240:                                              ; preds = %179
  %241 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %242 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %241, i64 0, i32 0, i32 1
  %243 = load i8*, i8** %242, align 8
  %244 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"* %241, i8* %243, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 2)) #12
  %245 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %246 = zext i16 %143 to i32
  %247 = lshr i32 %246, 12
  %248 = icmp ult i16 %143, -24576
  %249 = select i1 %248, i32 48, i32 87
  %250 = add nuw nsw i32 %249, %247
  %251 = trunc i32 %250 to i8
  %252 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %245, i64 0, i32 0, i32 1
  %253 = load i8*, i8** %252, align 8
  %254 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %245, i64 0, i32 0, i32 2, i32 0, i32 0
  %255 = load i8*, i8** %254, align 8
  %256 = icmp ult i8* %253, %255
  %257 = ptrtoint i8* %255 to i64
  br i1 %256, label %258, label %262

258:                                              ; preds = %240
  store i8 %251, i8* %253, align 1
  %259 = getelementptr inbounds i8, i8* %253, i64 1
  %260 = ptrtoint i8* %259 to i64
  %261 = bitcast i8** %252 to i64*
  store i64 %260, i64* %261, align 8
  br label %308

262:                                              ; preds = %240
  %263 = ptrtoint i8* %253 to i64
  %264 = bitcast i8** %252 to i64*
  %265 = bitcast %"class.std::__1::vector"* %245 to i64*
  %266 = load i64, i64* %265, align 8
  %267 = sub i64 %263, %266
  %268 = add i64 %267, 1
  %269 = icmp slt i64 %268, 0
  br i1 %269, label %270, label %272

270:                                              ; preds = %262
  %271 = bitcast %"class.std::__1::vector"* %245 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %271) #13
  unreachable

272:                                              ; preds = %262
  %273 = bitcast i8** %254 to i64*
  %274 = sub i64 %257, %266
  %275 = icmp ult i64 %274, 4611686018427387903
  br i1 %275, label %276, label %281

276:                                              ; preds = %272
  %277 = shl i64 %274, 1
  %278 = icmp ult i64 %277, %268
  %279 = select i1 %278, i64 %268, i64 %277
  %280 = icmp eq i64 %279, 0
  br i1 %280, label %284, label %281

281:                                              ; preds = %276, %272
  %282 = phi i64 [ %279, %276 ], [ 9223372036854775807, %272 ]
  %283 = tail call i8* @_Znwm(i64 %282) #11
  br label %284

284:                                              ; preds = %281, %276
  %285 = phi i64 [ %282, %281 ], [ 0, %276 ]
  %286 = phi i8* [ %283, %281 ], [ null, %276 ]
  %287 = getelementptr inbounds i8, i8* %286, i64 %267
  %288 = getelementptr inbounds i8, i8* %286, i64 %285
  %289 = ptrtoint i8* %288 to i64
  store i8 %251, i8* %287, align 1
  %290 = getelementptr inbounds i8, i8* %287, i64 1
  %291 = ptrtoint i8* %290 to i64
  %292 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %245, i64 0, i32 0, i32 0
  %293 = load i8*, i8** %292, align 8
  %294 = load i64, i64* %264, align 8
  %295 = ptrtoint i8* %293 to i64
  %296 = sub i64 %294, %295
  %297 = sub i64 0, %296
  %298 = getelementptr inbounds i8, i8* %287, i64 %297
  %299 = ptrtoint i8* %298 to i64
  %300 = icmp sgt i64 %296, 0
  br i1 %300, label %301, label %303

301:                                              ; preds = %284
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %298, i8* align 1 %293, i64 %296, i1 false) #12
  %302 = load i8*, i8** %292, align 8
  br label %303

303:                                              ; preds = %301, %284
  %304 = phi i8* [ %293, %284 ], [ %302, %301 ]
  store i64 %299, i64* %265, align 8
  store i64 %291, i64* %264, align 8
  store i64 %289, i64* %273, align 8
  %305 = icmp eq i8* %304, null
  br i1 %305, label %308, label %306

306:                                              ; preds = %303
  tail call void @_ZdlPv(i8* nonnull %304) #11
  %307 = load i8*, i8** %252, align 8
  br label %308

308:                                              ; preds = %258, %303, %306
  %309 = phi i8* [ %259, %258 ], [ %290, %303 ], [ %307, %306 ]
  %310 = lshr i32 %246, 8
  %311 = and i32 %310, 15
  %312 = icmp ult i32 %311, 10
  %313 = select i1 %312, i32 48, i32 87
  %314 = add nuw nsw i32 %313, %311
  %315 = trunc i32 %314 to i8
  %316 = load i8*, i8** %254, align 8
  %317 = icmp ult i8* %309, %316
  %318 = ptrtoint i8* %316 to i64
  br i1 %317, label %319, label %323

319:                                              ; preds = %308
  store i8 %315, i8* %309, align 1
  %320 = getelementptr inbounds i8, i8* %309, i64 1
  %321 = ptrtoint i8* %320 to i64
  %322 = bitcast i8** %252 to i64*
  store i64 %321, i64* %322, align 8
  br label %369

323:                                              ; preds = %308
  %324 = ptrtoint i8* %309 to i64
  %325 = bitcast i8** %252 to i64*
  %326 = bitcast %"class.std::__1::vector"* %245 to i64*
  %327 = load i64, i64* %326, align 8
  %328 = sub i64 %324, %327
  %329 = add i64 %328, 1
  %330 = icmp slt i64 %329, 0
  br i1 %330, label %331, label %333

331:                                              ; preds = %323
  %332 = bitcast %"class.std::__1::vector"* %245 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %332) #13
  unreachable

333:                                              ; preds = %323
  %334 = bitcast i8** %254 to i64*
  %335 = sub i64 %318, %327
  %336 = icmp ult i64 %335, 4611686018427387903
  br i1 %336, label %337, label %342

337:                                              ; preds = %333
  %338 = shl i64 %335, 1
  %339 = icmp ult i64 %338, %329
  %340 = select i1 %339, i64 %329, i64 %338
  %341 = icmp eq i64 %340, 0
  br i1 %341, label %345, label %342

342:                                              ; preds = %337, %333
  %343 = phi i64 [ %340, %337 ], [ 9223372036854775807, %333 ]
  %344 = tail call i8* @_Znwm(i64 %343) #11
  br label %345

345:                                              ; preds = %342, %337
  %346 = phi i64 [ %343, %342 ], [ 0, %337 ]
  %347 = phi i8* [ %344, %342 ], [ null, %337 ]
  %348 = getelementptr inbounds i8, i8* %347, i64 %328
  %349 = getelementptr inbounds i8, i8* %347, i64 %346
  %350 = ptrtoint i8* %349 to i64
  store i8 %315, i8* %348, align 1
  %351 = getelementptr inbounds i8, i8* %348, i64 1
  %352 = ptrtoint i8* %351 to i64
  %353 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %245, i64 0, i32 0, i32 0
  %354 = load i8*, i8** %353, align 8
  %355 = load i64, i64* %325, align 8
  %356 = ptrtoint i8* %354 to i64
  %357 = sub i64 %355, %356
  %358 = sub i64 0, %357
  %359 = getelementptr inbounds i8, i8* %348, i64 %358
  %360 = ptrtoint i8* %359 to i64
  %361 = icmp sgt i64 %357, 0
  br i1 %361, label %362, label %364

362:                                              ; preds = %345
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %359, i8* align 1 %354, i64 %357, i1 false) #12
  %363 = load i8*, i8** %353, align 8
  br label %364

364:                                              ; preds = %362, %345
  %365 = phi i8* [ %354, %345 ], [ %363, %362 ]
  store i64 %360, i64* %326, align 8
  store i64 %352, i64* %325, align 8
  store i64 %350, i64* %334, align 8
  %366 = icmp eq i8* %365, null
  br i1 %366, label %369, label %367

367:                                              ; preds = %364
  tail call void @_ZdlPv(i8* nonnull %365) #11
  %368 = load i8*, i8** %252, align 8
  br label %369

369:                                              ; preds = %319, %364, %367
  %370 = phi i8* [ %320, %319 ], [ %351, %364 ], [ %368, %367 ]
  %371 = lshr i32 %246, 4
  %372 = and i32 %371, 15
  %373 = icmp ult i32 %372, 10
  %374 = select i1 %373, i32 48, i32 87
  %375 = add nuw nsw i32 %374, %372
  %376 = trunc i32 %375 to i8
  %377 = load i8*, i8** %254, align 8
  %378 = icmp ult i8* %370, %377
  %379 = ptrtoint i8* %377 to i64
  br i1 %378, label %380, label %384

380:                                              ; preds = %369
  store i8 %376, i8* %370, align 1
  %381 = getelementptr inbounds i8, i8* %370, i64 1
  %382 = ptrtoint i8* %381 to i64
  %383 = bitcast i8** %252 to i64*
  store i64 %382, i64* %383, align 8
  br label %430

384:                                              ; preds = %369
  %385 = ptrtoint i8* %370 to i64
  %386 = bitcast i8** %252 to i64*
  %387 = bitcast %"class.std::__1::vector"* %245 to i64*
  %388 = load i64, i64* %387, align 8
  %389 = sub i64 %385, %388
  %390 = add i64 %389, 1
  %391 = icmp slt i64 %390, 0
  br i1 %391, label %392, label %394

392:                                              ; preds = %384
  %393 = bitcast %"class.std::__1::vector"* %245 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %393) #13
  unreachable

394:                                              ; preds = %384
  %395 = bitcast i8** %254 to i64*
  %396 = sub i64 %379, %388
  %397 = icmp ult i64 %396, 4611686018427387903
  br i1 %397, label %398, label %403

398:                                              ; preds = %394
  %399 = shl i64 %396, 1
  %400 = icmp ult i64 %399, %390
  %401 = select i1 %400, i64 %390, i64 %399
  %402 = icmp eq i64 %401, 0
  br i1 %402, label %406, label %403

403:                                              ; preds = %398, %394
  %404 = phi i64 [ %401, %398 ], [ 9223372036854775807, %394 ]
  %405 = tail call i8* @_Znwm(i64 %404) #11
  br label %406

406:                                              ; preds = %403, %398
  %407 = phi i64 [ %404, %403 ], [ 0, %398 ]
  %408 = phi i8* [ %405, %403 ], [ null, %398 ]
  %409 = getelementptr inbounds i8, i8* %408, i64 %389
  %410 = getelementptr inbounds i8, i8* %408, i64 %407
  %411 = ptrtoint i8* %410 to i64
  store i8 %376, i8* %409, align 1
  %412 = getelementptr inbounds i8, i8* %409, i64 1
  %413 = ptrtoint i8* %412 to i64
  %414 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %245, i64 0, i32 0, i32 0
  %415 = load i8*, i8** %414, align 8
  %416 = load i64, i64* %386, align 8
  %417 = ptrtoint i8* %415 to i64
  %418 = sub i64 %416, %417
  %419 = sub i64 0, %418
  %420 = getelementptr inbounds i8, i8* %409, i64 %419
  %421 = ptrtoint i8* %420 to i64
  %422 = icmp sgt i64 %418, 0
  br i1 %422, label %423, label %425

423:                                              ; preds = %406
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %420, i8* align 1 %415, i64 %418, i1 false) #12
  %424 = load i8*, i8** %414, align 8
  br label %425

425:                                              ; preds = %423, %406
  %426 = phi i8* [ %415, %406 ], [ %424, %423 ]
  store i64 %421, i64* %387, align 8
  store i64 %413, i64* %386, align 8
  store i64 %411, i64* %395, align 8
  %427 = icmp eq i8* %426, null
  br i1 %427, label %430, label %428

428:                                              ; preds = %425
  tail call void @_ZdlPv(i8* nonnull %426) #11
  %429 = load i8*, i8** %252, align 8
  br label %430

430:                                              ; preds = %380, %425, %428
  %431 = phi i8* [ %381, %380 ], [ %412, %425 ], [ %429, %428 ]
  %432 = and i32 %246, 15
  %433 = icmp ult i32 %432, 10
  %434 = select i1 %433, i32 48, i32 87
  %435 = add nuw nsw i32 %434, %432
  %436 = trunc i32 %435 to i8
  %437 = load i8*, i8** %254, align 8
  %438 = icmp ult i8* %431, %437
  %439 = ptrtoint i8* %437 to i64
  br i1 %438, label %440, label %444

440:                                              ; preds = %430
  store i8 %436, i8* %431, align 1
  %441 = getelementptr inbounds i8, i8* %431, i64 1
  %442 = ptrtoint i8* %441 to i64
  %443 = bitcast i8** %252 to i64*
  store i64 %442, i64* %443, align 8
  br label %489

444:                                              ; preds = %430
  %445 = ptrtoint i8* %431 to i64
  %446 = bitcast i8** %252 to i64*
  %447 = bitcast %"class.std::__1::vector"* %245 to i64*
  %448 = load i64, i64* %447, align 8
  %449 = sub i64 %445, %448
  %450 = add i64 %449, 1
  %451 = icmp slt i64 %450, 0
  br i1 %451, label %452, label %454

452:                                              ; preds = %444
  %453 = bitcast %"class.std::__1::vector"* %245 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %453) #13
  unreachable

454:                                              ; preds = %444
  %455 = bitcast i8** %254 to i64*
  %456 = sub i64 %439, %448
  %457 = icmp ult i64 %456, 4611686018427387903
  br i1 %457, label %458, label %463

458:                                              ; preds = %454
  %459 = shl i64 %456, 1
  %460 = icmp ult i64 %459, %450
  %461 = select i1 %460, i64 %450, i64 %459
  %462 = icmp eq i64 %461, 0
  br i1 %462, label %466, label %463

463:                                              ; preds = %458, %454
  %464 = phi i64 [ %461, %458 ], [ 9223372036854775807, %454 ]
  %465 = tail call i8* @_Znwm(i64 %464) #11
  br label %466

466:                                              ; preds = %463, %458
  %467 = phi i64 [ %464, %463 ], [ 0, %458 ]
  %468 = phi i8* [ %465, %463 ], [ null, %458 ]
  %469 = getelementptr inbounds i8, i8* %468, i64 %449
  %470 = getelementptr inbounds i8, i8* %468, i64 %467
  %471 = ptrtoint i8* %470 to i64
  store i8 %436, i8* %469, align 1
  %472 = getelementptr inbounds i8, i8* %469, i64 1
  %473 = ptrtoint i8* %472 to i64
  %474 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %245, i64 0, i32 0, i32 0
  %475 = load i8*, i8** %474, align 8
  %476 = load i64, i64* %446, align 8
  %477 = ptrtoint i8* %475 to i64
  %478 = sub i64 %476, %477
  %479 = sub i64 0, %478
  %480 = getelementptr inbounds i8, i8* %469, i64 %479
  %481 = ptrtoint i8* %480 to i64
  %482 = icmp sgt i64 %478, 0
  br i1 %482, label %483, label %485

483:                                              ; preds = %466
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %480, i8* align 1 %475, i64 %478, i1 false) #12
  %484 = load i8*, i8** %474, align 8
  br label %485

485:                                              ; preds = %483, %466
  %486 = phi i8* [ %475, %466 ], [ %484, %483 ]
  store i64 %481, i64* %447, align 8
  store i64 %473, i64* %446, align 8
  store i64 %471, i64* %455, align 8
  %487 = icmp eq i8* %486, null
  br i1 %487, label %489, label %488

488:                                              ; preds = %485
  tail call void @_ZdlPv(i8* nonnull %486) #11
  br label %489

489:                                              ; preds = %488, %485, %440, %239, %236, %191, %149, %159, %169, %174, %164, %154, %144
  %490 = getelementptr inbounds i16, i16* %142, i64 1
  %491 = icmp eq i16* %490, %82
  br i1 %491, label %84, label %141

492:                                              ; preds = %140, %137, %92, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__16vectorIhNS3_9allocatorIhEEEEE12HandleBinaryENS_4spanIhEE(%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* nocapture readonly, i8*, i64) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 2
  %5 = load %"struct.v8_crdtp::Status"*, %"struct.v8_crdtp::Status"** %4, align 8
  %6 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %5, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %870

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 2, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = add i64 %11, -1
  %15 = add i64 %14, %13
  %16 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %17 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %16, align 8
  %18 = lshr i64 %15, 9
  %19 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %17, i64 %18
  %20 = load %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %19, align 8
  %21 = and i64 %15, 511
  %22 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %20, i64 %21
  %23 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 1
  %24 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  tail call fastcc void @_ZN8v8_crdtp4json12_GLOBAL__N_15State12StartElementEPNSt3__16vectorIhNS3_9allocatorIhEEEE(%"class.v8_crdtp::json::(anonymous namespace)::State"* %22, %"class.std::__1::vector"* %24)
  %25 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %26 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %25, i64 0, i32 0, i32 1
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %25, i64 0, i32 0, i32 2, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  %30 = icmp ult i8* %27, %29
  %31 = ptrtoint i8* %29 to i64
  br i1 %30, label %32, label %36

32:                                               ; preds = %9
  store i8 34, i8* %27, align 1
  %33 = getelementptr inbounds i8, i8* %27, i64 1
  %34 = ptrtoint i8* %33 to i64
  %35 = bitcast i8** %26 to i64*
  store i64 %34, i64* %35, align 8
  br label %81

36:                                               ; preds = %9
  %37 = ptrtoint i8* %27 to i64
  %38 = bitcast i8** %26 to i64*
  %39 = bitcast %"class.std::__1::vector"* %25 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %37, %40
  %42 = add i64 %41, 1
  %43 = icmp slt i64 %42, 0
  br i1 %43, label %44, label %46

44:                                               ; preds = %36
  %45 = bitcast %"class.std::__1::vector"* %25 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %45) #13
  unreachable

46:                                               ; preds = %36
  %47 = bitcast i8** %28 to i64*
  %48 = sub i64 %31, %40
  %49 = icmp ult i64 %48, 4611686018427387903
  br i1 %49, label %50, label %55

50:                                               ; preds = %46
  %51 = shl i64 %48, 1
  %52 = icmp ult i64 %51, %42
  %53 = select i1 %52, i64 %42, i64 %51
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %58, label %55

55:                                               ; preds = %50, %46
  %56 = phi i64 [ %53, %50 ], [ 9223372036854775807, %46 ]
  %57 = tail call i8* @_Znwm(i64 %56) #11
  br label %58

58:                                               ; preds = %55, %50
  %59 = phi i64 [ %56, %55 ], [ 0, %50 ]
  %60 = phi i8* [ %57, %55 ], [ null, %50 ]
  %61 = getelementptr inbounds i8, i8* %60, i64 %41
  %62 = getelementptr inbounds i8, i8* %60, i64 %59
  %63 = ptrtoint i8* %62 to i64
  store i8 34, i8* %61, align 1
  %64 = getelementptr inbounds i8, i8* %61, i64 1
  %65 = ptrtoint i8* %64 to i64
  %66 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %25, i64 0, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = load i64, i64* %38, align 8
  %69 = ptrtoint i8* %67 to i64
  %70 = sub i64 %68, %69
  %71 = sub i64 0, %70
  %72 = getelementptr inbounds i8, i8* %61, i64 %71
  %73 = ptrtoint i8* %72 to i64
  %74 = icmp sgt i64 %70, 0
  br i1 %74, label %75, label %77

75:                                               ; preds = %58
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %72, i8* align 1 %67, i64 %70, i1 false) #12
  %76 = load i8*, i8** %66, align 8
  br label %77

77:                                               ; preds = %75, %58
  %78 = phi i8* [ %67, %58 ], [ %76, %75 ]
  store i64 %73, i64* %39, align 8
  store i64 %65, i64* %38, align 8
  store i64 %63, i64* %47, align 8
  %79 = icmp eq i8* %78, null
  br i1 %79, label %81, label %80

80:                                               ; preds = %77
  tail call void @_ZdlPv(i8* nonnull %78) #11
  br label %81

81:                                               ; preds = %32, %77, %80
  %82 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %83 = icmp ult i64 %2, 3
  br i1 %83, label %328, label %84

84:                                               ; preds = %81
  %85 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %82, i64 0, i32 0, i32 1
  %86 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %82, i64 0, i32 0, i32 2, i32 0, i32 0
  %87 = bitcast i8** %85 to i64*
  %88 = bitcast %"class.std::__1::vector"* %82 to i64*
  %89 = bitcast i8** %86 to i64*
  %90 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %82, i64 0, i32 0, i32 0
  br label %91

91:                                               ; preds = %325, %84
  %92 = phi i64 [ 3, %84 ], [ %326, %325 ]
  %93 = phi i64 [ 0, %84 ], [ %92, %325 ]
  %94 = getelementptr inbounds i8, i8* %1, i64 %93
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i32
  %97 = shl nuw nsw i32 %96, 16
  %98 = add i64 %93, 1
  %99 = getelementptr inbounds i8, i8* %1, i64 %98
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %100 to i32
  %102 = shl nuw nsw i32 %101, 8
  %103 = or i32 %102, %97
  %104 = add i64 %93, 2
  %105 = getelementptr inbounds i8, i8* %1, i64 %104
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = or i32 %102, %107
  %109 = lshr i32 %96, 2
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds [65 x i8], [65 x i8]* @_ZN8v8_crdtp4json12_GLOBAL__N_112kBase64TableE, i64 0, i64 %110
  %112 = load i8, i8* %111, align 1
  %113 = load i8*, i8** %85, align 8
  %114 = load i8*, i8** %86, align 8
  %115 = icmp ult i8* %113, %114
  %116 = ptrtoint i8* %114 to i64
  br i1 %115, label %117, label %120

117:                                              ; preds = %91
  store i8 %112, i8* %113, align 1
  %118 = getelementptr inbounds i8, i8* %113, i64 1
  %119 = ptrtoint i8* %118 to i64
  store i64 %119, i64* %87, align 8
  br label %162

120:                                              ; preds = %91
  %121 = ptrtoint i8* %113 to i64
  %122 = load i64, i64* %88, align 8
  %123 = sub i64 %121, %122
  %124 = add i64 %123, 1
  %125 = icmp slt i64 %124, 0
  br i1 %125, label %126, label %128

126:                                              ; preds = %120
  %127 = bitcast %"class.std::__1::vector"* %82 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %127) #13
  unreachable

128:                                              ; preds = %120
  %129 = sub i64 %116, %122
  %130 = icmp ult i64 %129, 4611686018427387903
  br i1 %130, label %131, label %136

131:                                              ; preds = %128
  %132 = shl i64 %129, 1
  %133 = icmp ult i64 %132, %124
  %134 = select i1 %133, i64 %124, i64 %132
  %135 = icmp eq i64 %134, 0
  br i1 %135, label %139, label %136

136:                                              ; preds = %131, %128
  %137 = phi i64 [ %134, %131 ], [ 9223372036854775807, %128 ]
  %138 = tail call i8* @_Znwm(i64 %137) #11
  br label %139

139:                                              ; preds = %136, %131
  %140 = phi i64 [ %137, %136 ], [ 0, %131 ]
  %141 = phi i8* [ %138, %136 ], [ null, %131 ]
  %142 = getelementptr inbounds i8, i8* %141, i64 %123
  %143 = getelementptr inbounds i8, i8* %141, i64 %140
  %144 = ptrtoint i8* %143 to i64
  store i8 %112, i8* %142, align 1
  %145 = getelementptr inbounds i8, i8* %142, i64 1
  %146 = ptrtoint i8* %145 to i64
  %147 = load i8*, i8** %90, align 8
  %148 = load i64, i64* %87, align 8
  %149 = ptrtoint i8* %147 to i64
  %150 = sub i64 %148, %149
  %151 = sub i64 0, %150
  %152 = getelementptr inbounds i8, i8* %142, i64 %151
  %153 = ptrtoint i8* %152 to i64
  %154 = icmp sgt i64 %150, 0
  br i1 %154, label %155, label %157

155:                                              ; preds = %139
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %152, i8* align 1 %147, i64 %150, i1 false) #12
  %156 = load i8*, i8** %90, align 8
  br label %157

157:                                              ; preds = %155, %139
  %158 = phi i8* [ %147, %139 ], [ %156, %155 ]
  store i64 %153, i64* %88, align 8
  store i64 %146, i64* %87, align 8
  store i64 %144, i64* %89, align 8
  %159 = icmp eq i8* %158, null
  br i1 %159, label %162, label %160

160:                                              ; preds = %157
  tail call void @_ZdlPv(i8* nonnull %158) #11
  %161 = load i8*, i8** %85, align 8
  br label %162

162:                                              ; preds = %160, %157, %117
  %163 = phi i8* [ %118, %117 ], [ %145, %157 ], [ %161, %160 ]
  %164 = lshr i32 %103, 12
  %165 = and i32 %164, 63
  %166 = zext i32 %165 to i64
  %167 = getelementptr inbounds [65 x i8], [65 x i8]* @_ZN8v8_crdtp4json12_GLOBAL__N_112kBase64TableE, i64 0, i64 %166
  %168 = load i8, i8* %167, align 1
  %169 = load i8*, i8** %86, align 8
  %170 = icmp ult i8* %163, %169
  %171 = ptrtoint i8* %169 to i64
  br i1 %170, label %172, label %175

172:                                              ; preds = %162
  store i8 %168, i8* %163, align 1
  %173 = getelementptr inbounds i8, i8* %163, i64 1
  %174 = ptrtoint i8* %173 to i64
  store i64 %174, i64* %87, align 8
  br label %217

175:                                              ; preds = %162
  %176 = ptrtoint i8* %163 to i64
  %177 = load i64, i64* %88, align 8
  %178 = sub i64 %176, %177
  %179 = add i64 %178, 1
  %180 = icmp slt i64 %179, 0
  br i1 %180, label %181, label %183

181:                                              ; preds = %175
  %182 = bitcast %"class.std::__1::vector"* %82 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %182) #13
  unreachable

183:                                              ; preds = %175
  %184 = sub i64 %171, %177
  %185 = icmp ult i64 %184, 4611686018427387903
  br i1 %185, label %186, label %191

186:                                              ; preds = %183
  %187 = shl i64 %184, 1
  %188 = icmp ult i64 %187, %179
  %189 = select i1 %188, i64 %179, i64 %187
  %190 = icmp eq i64 %189, 0
  br i1 %190, label %194, label %191

191:                                              ; preds = %186, %183
  %192 = phi i64 [ %189, %186 ], [ 9223372036854775807, %183 ]
  %193 = tail call i8* @_Znwm(i64 %192) #11
  br label %194

194:                                              ; preds = %191, %186
  %195 = phi i64 [ %192, %191 ], [ 0, %186 ]
  %196 = phi i8* [ %193, %191 ], [ null, %186 ]
  %197 = getelementptr inbounds i8, i8* %196, i64 %178
  %198 = getelementptr inbounds i8, i8* %196, i64 %195
  %199 = ptrtoint i8* %198 to i64
  store i8 %168, i8* %197, align 1
  %200 = getelementptr inbounds i8, i8* %197, i64 1
  %201 = ptrtoint i8* %200 to i64
  %202 = load i8*, i8** %90, align 8
  %203 = load i64, i64* %87, align 8
  %204 = ptrtoint i8* %202 to i64
  %205 = sub i64 %203, %204
  %206 = sub i64 0, %205
  %207 = getelementptr inbounds i8, i8* %197, i64 %206
  %208 = ptrtoint i8* %207 to i64
  %209 = icmp sgt i64 %205, 0
  br i1 %209, label %210, label %212

210:                                              ; preds = %194
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %207, i8* align 1 %202, i64 %205, i1 false) #12
  %211 = load i8*, i8** %90, align 8
  br label %212

212:                                              ; preds = %210, %194
  %213 = phi i8* [ %202, %194 ], [ %211, %210 ]
  store i64 %208, i64* %88, align 8
  store i64 %201, i64* %87, align 8
  store i64 %199, i64* %89, align 8
  %214 = icmp eq i8* %213, null
  br i1 %214, label %217, label %215

215:                                              ; preds = %212
  tail call void @_ZdlPv(i8* nonnull %213) #11
  %216 = load i8*, i8** %85, align 8
  br label %217

217:                                              ; preds = %215, %212, %172
  %218 = phi i8* [ %173, %172 ], [ %200, %212 ], [ %216, %215 ]
  %219 = lshr i32 %108, 6
  %220 = and i32 %219, 63
  %221 = zext i32 %220 to i64
  %222 = getelementptr inbounds [65 x i8], [65 x i8]* @_ZN8v8_crdtp4json12_GLOBAL__N_112kBase64TableE, i64 0, i64 %221
  %223 = load i8, i8* %222, align 1
  %224 = load i8*, i8** %86, align 8
  %225 = icmp ult i8* %218, %224
  %226 = ptrtoint i8* %224 to i64
  br i1 %225, label %227, label %230

227:                                              ; preds = %217
  store i8 %223, i8* %218, align 1
  %228 = getelementptr inbounds i8, i8* %218, i64 1
  %229 = ptrtoint i8* %228 to i64
  store i64 %229, i64* %87, align 8
  br label %272

230:                                              ; preds = %217
  %231 = ptrtoint i8* %218 to i64
  %232 = load i64, i64* %88, align 8
  %233 = sub i64 %231, %232
  %234 = add i64 %233, 1
  %235 = icmp slt i64 %234, 0
  br i1 %235, label %236, label %238

236:                                              ; preds = %230
  %237 = bitcast %"class.std::__1::vector"* %82 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %237) #13
  unreachable

238:                                              ; preds = %230
  %239 = sub i64 %226, %232
  %240 = icmp ult i64 %239, 4611686018427387903
  br i1 %240, label %241, label %246

241:                                              ; preds = %238
  %242 = shl i64 %239, 1
  %243 = icmp ult i64 %242, %234
  %244 = select i1 %243, i64 %234, i64 %242
  %245 = icmp eq i64 %244, 0
  br i1 %245, label %249, label %246

246:                                              ; preds = %241, %238
  %247 = phi i64 [ %244, %241 ], [ 9223372036854775807, %238 ]
  %248 = tail call i8* @_Znwm(i64 %247) #11
  br label %249

249:                                              ; preds = %246, %241
  %250 = phi i64 [ %247, %246 ], [ 0, %241 ]
  %251 = phi i8* [ %248, %246 ], [ null, %241 ]
  %252 = getelementptr inbounds i8, i8* %251, i64 %233
  %253 = getelementptr inbounds i8, i8* %251, i64 %250
  %254 = ptrtoint i8* %253 to i64
  store i8 %223, i8* %252, align 1
  %255 = getelementptr inbounds i8, i8* %252, i64 1
  %256 = ptrtoint i8* %255 to i64
  %257 = load i8*, i8** %90, align 8
  %258 = load i64, i64* %87, align 8
  %259 = ptrtoint i8* %257 to i64
  %260 = sub i64 %258, %259
  %261 = sub i64 0, %260
  %262 = getelementptr inbounds i8, i8* %252, i64 %261
  %263 = ptrtoint i8* %262 to i64
  %264 = icmp sgt i64 %260, 0
  br i1 %264, label %265, label %267

265:                                              ; preds = %249
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %262, i8* align 1 %257, i64 %260, i1 false) #12
  %266 = load i8*, i8** %90, align 8
  br label %267

267:                                              ; preds = %265, %249
  %268 = phi i8* [ %257, %249 ], [ %266, %265 ]
  store i64 %263, i64* %88, align 8
  store i64 %256, i64* %87, align 8
  store i64 %254, i64* %89, align 8
  %269 = icmp eq i8* %268, null
  br i1 %269, label %272, label %270

270:                                              ; preds = %267
  tail call void @_ZdlPv(i8* nonnull %268) #11
  %271 = load i8*, i8** %85, align 8
  br label %272

272:                                              ; preds = %270, %267, %227
  %273 = phi i8* [ %228, %227 ], [ %255, %267 ], [ %271, %270 ]
  %274 = and i32 %107, 63
  %275 = zext i32 %274 to i64
  %276 = getelementptr inbounds [65 x i8], [65 x i8]* @_ZN8v8_crdtp4json12_GLOBAL__N_112kBase64TableE, i64 0, i64 %275
  %277 = load i8, i8* %276, align 1
  %278 = load i8*, i8** %86, align 8
  %279 = icmp ult i8* %273, %278
  %280 = ptrtoint i8* %278 to i64
  br i1 %279, label %281, label %284

281:                                              ; preds = %272
  store i8 %277, i8* %273, align 1
  %282 = getelementptr inbounds i8, i8* %273, i64 1
  %283 = ptrtoint i8* %282 to i64
  store i64 %283, i64* %87, align 8
  br label %325

284:                                              ; preds = %272
  %285 = ptrtoint i8* %273 to i64
  %286 = load i64, i64* %88, align 8
  %287 = sub i64 %285, %286
  %288 = add i64 %287, 1
  %289 = icmp slt i64 %288, 0
  br i1 %289, label %290, label %292

290:                                              ; preds = %284
  %291 = bitcast %"class.std::__1::vector"* %82 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %291) #13
  unreachable

292:                                              ; preds = %284
  %293 = sub i64 %280, %286
  %294 = icmp ult i64 %293, 4611686018427387903
  br i1 %294, label %295, label %300

295:                                              ; preds = %292
  %296 = shl i64 %293, 1
  %297 = icmp ult i64 %296, %288
  %298 = select i1 %297, i64 %288, i64 %296
  %299 = icmp eq i64 %298, 0
  br i1 %299, label %303, label %300

300:                                              ; preds = %295, %292
  %301 = phi i64 [ %298, %295 ], [ 9223372036854775807, %292 ]
  %302 = tail call i8* @_Znwm(i64 %301) #11
  br label %303

303:                                              ; preds = %300, %295
  %304 = phi i64 [ %301, %300 ], [ 0, %295 ]
  %305 = phi i8* [ %302, %300 ], [ null, %295 ]
  %306 = getelementptr inbounds i8, i8* %305, i64 %287
  %307 = getelementptr inbounds i8, i8* %305, i64 %304
  %308 = ptrtoint i8* %307 to i64
  store i8 %277, i8* %306, align 1
  %309 = getelementptr inbounds i8, i8* %306, i64 1
  %310 = ptrtoint i8* %309 to i64
  %311 = load i8*, i8** %90, align 8
  %312 = load i64, i64* %87, align 8
  %313 = ptrtoint i8* %311 to i64
  %314 = sub i64 %312, %313
  %315 = sub i64 0, %314
  %316 = getelementptr inbounds i8, i8* %306, i64 %315
  %317 = ptrtoint i8* %316 to i64
  %318 = icmp sgt i64 %314, 0
  br i1 %318, label %319, label %321

319:                                              ; preds = %303
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %316, i8* align 1 %311, i64 %314, i1 false) #12
  %320 = load i8*, i8** %90, align 8
  br label %321

321:                                              ; preds = %319, %303
  %322 = phi i8* [ %311, %303 ], [ %320, %319 ]
  store i64 %317, i64* %88, align 8
  store i64 %310, i64* %87, align 8
  store i64 %308, i64* %89, align 8
  %323 = icmp eq i8* %322, null
  br i1 %323, label %325, label %324

324:                                              ; preds = %321
  tail call void @_ZdlPv(i8* nonnull %322) #11
  br label %325

325:                                              ; preds = %324, %321, %281
  %326 = add i64 %92, 3
  %327 = icmp ugt i64 %326, %2
  br i1 %327, label %328, label %91

328:                                              ; preds = %325, %81
  %329 = phi i64 [ 0, %81 ], [ %92, %325 ]
  %330 = add i64 %329, 2
  %331 = icmp ugt i64 %330, %2
  br i1 %331, label %577, label %332

332:                                              ; preds = %328
  %333 = getelementptr inbounds i8, i8* %1, i64 %329
  %334 = load i8, i8* %333, align 1
  %335 = zext i8 %334 to i32
  %336 = shl nuw nsw i32 %335, 16
  %337 = add i64 %329, 1
  %338 = getelementptr inbounds i8, i8* %1, i64 %337
  %339 = load i8, i8* %338, align 1
  %340 = zext i8 %339 to i32
  %341 = shl nuw nsw i32 %340, 8
  %342 = or i32 %341, %336
  %343 = lshr i32 %335, 2
  %344 = zext i32 %343 to i64
  %345 = getelementptr inbounds [65 x i8], [65 x i8]* @_ZN8v8_crdtp4json12_GLOBAL__N_112kBase64TableE, i64 0, i64 %344
  %346 = load i8, i8* %345, align 1
  %347 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %82, i64 0, i32 0, i32 1
  %348 = load i8*, i8** %347, align 8
  %349 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %82, i64 0, i32 0, i32 2, i32 0, i32 0
  %350 = load i8*, i8** %349, align 8
  %351 = icmp ult i8* %348, %350
  %352 = ptrtoint i8* %350 to i64
  br i1 %351, label %353, label %357

353:                                              ; preds = %332
  store i8 %346, i8* %348, align 1
  %354 = getelementptr inbounds i8, i8* %348, i64 1
  %355 = ptrtoint i8* %354 to i64
  %356 = bitcast i8** %347 to i64*
  store i64 %355, i64* %356, align 8
  br label %403

357:                                              ; preds = %332
  %358 = ptrtoint i8* %348 to i64
  %359 = bitcast i8** %347 to i64*
  %360 = bitcast %"class.std::__1::vector"* %82 to i64*
  %361 = load i64, i64* %360, align 8
  %362 = sub i64 %358, %361
  %363 = add i64 %362, 1
  %364 = icmp slt i64 %363, 0
  br i1 %364, label %365, label %367

365:                                              ; preds = %357
  %366 = bitcast %"class.std::__1::vector"* %82 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %366) #13
  unreachable

367:                                              ; preds = %357
  %368 = bitcast i8** %349 to i64*
  %369 = sub i64 %352, %361
  %370 = icmp ult i64 %369, 4611686018427387903
  br i1 %370, label %371, label %376

371:                                              ; preds = %367
  %372 = shl i64 %369, 1
  %373 = icmp ult i64 %372, %363
  %374 = select i1 %373, i64 %363, i64 %372
  %375 = icmp eq i64 %374, 0
  br i1 %375, label %379, label %376

376:                                              ; preds = %371, %367
  %377 = phi i64 [ %374, %371 ], [ 9223372036854775807, %367 ]
  %378 = tail call i8* @_Znwm(i64 %377) #11
  br label %379

379:                                              ; preds = %376, %371
  %380 = phi i64 [ %377, %376 ], [ 0, %371 ]
  %381 = phi i8* [ %378, %376 ], [ null, %371 ]
  %382 = getelementptr inbounds i8, i8* %381, i64 %362
  %383 = getelementptr inbounds i8, i8* %381, i64 %380
  %384 = ptrtoint i8* %383 to i64
  store i8 %346, i8* %382, align 1
  %385 = getelementptr inbounds i8, i8* %382, i64 1
  %386 = ptrtoint i8* %385 to i64
  %387 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %82, i64 0, i32 0, i32 0
  %388 = load i8*, i8** %387, align 8
  %389 = load i64, i64* %359, align 8
  %390 = ptrtoint i8* %388 to i64
  %391 = sub i64 %389, %390
  %392 = sub i64 0, %391
  %393 = getelementptr inbounds i8, i8* %382, i64 %392
  %394 = ptrtoint i8* %393 to i64
  %395 = icmp sgt i64 %391, 0
  br i1 %395, label %396, label %398

396:                                              ; preds = %379
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %393, i8* align 1 %388, i64 %391, i1 false) #12
  %397 = load i8*, i8** %387, align 8
  br label %398

398:                                              ; preds = %396, %379
  %399 = phi i8* [ %388, %379 ], [ %397, %396 ]
  store i64 %394, i64* %360, align 8
  store i64 %386, i64* %359, align 8
  store i64 %384, i64* %368, align 8
  %400 = icmp eq i8* %399, null
  br i1 %400, label %403, label %401

401:                                              ; preds = %398
  tail call void @_ZdlPv(i8* nonnull %399) #11
  %402 = load i8*, i8** %347, align 8
  br label %403

403:                                              ; preds = %401, %398, %353
  %404 = phi i8* [ %354, %353 ], [ %385, %398 ], [ %402, %401 ]
  %405 = lshr i32 %342, 12
  %406 = and i32 %405, 63
  %407 = zext i32 %406 to i64
  %408 = getelementptr inbounds [65 x i8], [65 x i8]* @_ZN8v8_crdtp4json12_GLOBAL__N_112kBase64TableE, i64 0, i64 %407
  %409 = load i8, i8* %408, align 1
  %410 = load i8*, i8** %349, align 8
  %411 = icmp ult i8* %404, %410
  %412 = ptrtoint i8* %410 to i64
  br i1 %411, label %413, label %417

413:                                              ; preds = %403
  store i8 %409, i8* %404, align 1
  %414 = getelementptr inbounds i8, i8* %404, i64 1
  %415 = ptrtoint i8* %414 to i64
  %416 = bitcast i8** %347 to i64*
  store i64 %415, i64* %416, align 8
  br label %463

417:                                              ; preds = %403
  %418 = ptrtoint i8* %404 to i64
  %419 = bitcast i8** %347 to i64*
  %420 = bitcast %"class.std::__1::vector"* %82 to i64*
  %421 = load i64, i64* %420, align 8
  %422 = sub i64 %418, %421
  %423 = add i64 %422, 1
  %424 = icmp slt i64 %423, 0
  br i1 %424, label %425, label %427

425:                                              ; preds = %417
  %426 = bitcast %"class.std::__1::vector"* %82 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %426) #13
  unreachable

427:                                              ; preds = %417
  %428 = bitcast i8** %349 to i64*
  %429 = sub i64 %412, %421
  %430 = icmp ult i64 %429, 4611686018427387903
  br i1 %430, label %431, label %436

431:                                              ; preds = %427
  %432 = shl i64 %429, 1
  %433 = icmp ult i64 %432, %423
  %434 = select i1 %433, i64 %423, i64 %432
  %435 = icmp eq i64 %434, 0
  br i1 %435, label %439, label %436

436:                                              ; preds = %431, %427
  %437 = phi i64 [ %434, %431 ], [ 9223372036854775807, %427 ]
  %438 = tail call i8* @_Znwm(i64 %437) #11
  br label %439

439:                                              ; preds = %436, %431
  %440 = phi i64 [ %437, %436 ], [ 0, %431 ]
  %441 = phi i8* [ %438, %436 ], [ null, %431 ]
  %442 = getelementptr inbounds i8, i8* %441, i64 %422
  %443 = getelementptr inbounds i8, i8* %441, i64 %440
  %444 = ptrtoint i8* %443 to i64
  store i8 %409, i8* %442, align 1
  %445 = getelementptr inbounds i8, i8* %442, i64 1
  %446 = ptrtoint i8* %445 to i64
  %447 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %82, i64 0, i32 0, i32 0
  %448 = load i8*, i8** %447, align 8
  %449 = load i64, i64* %419, align 8
  %450 = ptrtoint i8* %448 to i64
  %451 = sub i64 %449, %450
  %452 = sub i64 0, %451
  %453 = getelementptr inbounds i8, i8* %442, i64 %452
  %454 = ptrtoint i8* %453 to i64
  %455 = icmp sgt i64 %451, 0
  br i1 %455, label %456, label %458

456:                                              ; preds = %439
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %453, i8* align 1 %448, i64 %451, i1 false) #12
  %457 = load i8*, i8** %447, align 8
  br label %458

458:                                              ; preds = %456, %439
  %459 = phi i8* [ %448, %439 ], [ %457, %456 ]
  store i64 %454, i64* %420, align 8
  store i64 %446, i64* %419, align 8
  store i64 %444, i64* %428, align 8
  %460 = icmp eq i8* %459, null
  br i1 %460, label %463, label %461

461:                                              ; preds = %458
  tail call void @_ZdlPv(i8* nonnull %459) #11
  %462 = load i8*, i8** %347, align 8
  br label %463

463:                                              ; preds = %461, %458, %413
  %464 = phi i8* [ %414, %413 ], [ %445, %458 ], [ %462, %461 ]
  %465 = shl nuw nsw i32 %340, 2
  %466 = and i32 %465, 60
  %467 = zext i32 %466 to i64
  %468 = getelementptr inbounds [65 x i8], [65 x i8]* @_ZN8v8_crdtp4json12_GLOBAL__N_112kBase64TableE, i64 0, i64 %467
  %469 = load i8, i8* %468, align 4
  %470 = load i8*, i8** %349, align 8
  %471 = icmp ult i8* %464, %470
  %472 = ptrtoint i8* %470 to i64
  br i1 %471, label %473, label %477

473:                                              ; preds = %463
  store i8 %469, i8* %464, align 1
  %474 = getelementptr inbounds i8, i8* %464, i64 1
  %475 = ptrtoint i8* %474 to i64
  %476 = bitcast i8** %347 to i64*
  store i64 %475, i64* %476, align 8
  br label %523

477:                                              ; preds = %463
  %478 = ptrtoint i8* %464 to i64
  %479 = bitcast i8** %347 to i64*
  %480 = bitcast %"class.std::__1::vector"* %82 to i64*
  %481 = load i64, i64* %480, align 8
  %482 = sub i64 %478, %481
  %483 = add i64 %482, 1
  %484 = icmp slt i64 %483, 0
  br i1 %484, label %485, label %487

485:                                              ; preds = %477
  %486 = bitcast %"class.std::__1::vector"* %82 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %486) #13
  unreachable

487:                                              ; preds = %477
  %488 = bitcast i8** %349 to i64*
  %489 = sub i64 %472, %481
  %490 = icmp ult i64 %489, 4611686018427387903
  br i1 %490, label %491, label %496

491:                                              ; preds = %487
  %492 = shl i64 %489, 1
  %493 = icmp ult i64 %492, %483
  %494 = select i1 %493, i64 %483, i64 %492
  %495 = icmp eq i64 %494, 0
  br i1 %495, label %499, label %496

496:                                              ; preds = %491, %487
  %497 = phi i64 [ %494, %491 ], [ 9223372036854775807, %487 ]
  %498 = tail call i8* @_Znwm(i64 %497) #11
  br label %499

499:                                              ; preds = %496, %491
  %500 = phi i64 [ %497, %496 ], [ 0, %491 ]
  %501 = phi i8* [ %498, %496 ], [ null, %491 ]
  %502 = getelementptr inbounds i8, i8* %501, i64 %482
  %503 = getelementptr inbounds i8, i8* %501, i64 %500
  %504 = ptrtoint i8* %503 to i64
  store i8 %469, i8* %502, align 1
  %505 = getelementptr inbounds i8, i8* %502, i64 1
  %506 = ptrtoint i8* %505 to i64
  %507 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %82, i64 0, i32 0, i32 0
  %508 = load i8*, i8** %507, align 8
  %509 = load i64, i64* %479, align 8
  %510 = ptrtoint i8* %508 to i64
  %511 = sub i64 %509, %510
  %512 = sub i64 0, %511
  %513 = getelementptr inbounds i8, i8* %502, i64 %512
  %514 = ptrtoint i8* %513 to i64
  %515 = icmp sgt i64 %511, 0
  br i1 %515, label %516, label %518

516:                                              ; preds = %499
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %513, i8* align 1 %508, i64 %511, i1 false) #12
  %517 = load i8*, i8** %507, align 8
  br label %518

518:                                              ; preds = %516, %499
  %519 = phi i8* [ %508, %499 ], [ %517, %516 ]
  store i64 %514, i64* %480, align 8
  store i64 %506, i64* %479, align 8
  store i64 %504, i64* %488, align 8
  %520 = icmp eq i8* %519, null
  br i1 %520, label %523, label %521

521:                                              ; preds = %518
  tail call void @_ZdlPv(i8* nonnull %519) #11
  %522 = load i8*, i8** %347, align 8
  br label %523

523:                                              ; preds = %521, %518, %473
  %524 = phi i8* [ %474, %473 ], [ %505, %518 ], [ %522, %521 ]
  %525 = load i8*, i8** %349, align 8
  %526 = icmp ult i8* %524, %525
  %527 = ptrtoint i8* %525 to i64
  br i1 %526, label %528, label %532

528:                                              ; preds = %523
  store i8 61, i8* %524, align 1
  %529 = getelementptr inbounds i8, i8* %524, i64 1
  %530 = ptrtoint i8* %529 to i64
  %531 = bitcast i8** %347 to i64*
  store i64 %530, i64* %531, align 8
  br label %813

532:                                              ; preds = %523
  %533 = ptrtoint i8* %524 to i64
  %534 = bitcast i8** %347 to i64*
  %535 = bitcast %"class.std::__1::vector"* %82 to i64*
  %536 = load i64, i64* %535, align 8
  %537 = sub i64 %533, %536
  %538 = add i64 %537, 1
  %539 = icmp slt i64 %538, 0
  br i1 %539, label %540, label %542

540:                                              ; preds = %532
  %541 = bitcast %"class.std::__1::vector"* %82 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %541) #13
  unreachable

542:                                              ; preds = %532
  %543 = bitcast i8** %349 to i64*
  %544 = sub i64 %527, %536
  %545 = icmp ult i64 %544, 4611686018427387903
  br i1 %545, label %546, label %551

546:                                              ; preds = %542
  %547 = shl i64 %544, 1
  %548 = icmp ult i64 %547, %538
  %549 = select i1 %548, i64 %538, i64 %547
  %550 = icmp eq i64 %549, 0
  br i1 %550, label %554, label %551

551:                                              ; preds = %546, %542
  %552 = phi i64 [ %549, %546 ], [ 9223372036854775807, %542 ]
  %553 = tail call i8* @_Znwm(i64 %552) #11
  br label %554

554:                                              ; preds = %551, %546
  %555 = phi i64 [ %552, %551 ], [ 0, %546 ]
  %556 = phi i8* [ %553, %551 ], [ null, %546 ]
  %557 = getelementptr inbounds i8, i8* %556, i64 %537
  %558 = getelementptr inbounds i8, i8* %556, i64 %555
  %559 = ptrtoint i8* %558 to i64
  store i8 61, i8* %557, align 1
  %560 = getelementptr inbounds i8, i8* %557, i64 1
  %561 = ptrtoint i8* %560 to i64
  %562 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %82, i64 0, i32 0, i32 0
  %563 = load i8*, i8** %562, align 8
  %564 = load i64, i64* %534, align 8
  %565 = ptrtoint i8* %563 to i64
  %566 = sub i64 %564, %565
  %567 = sub i64 0, %566
  %568 = getelementptr inbounds i8, i8* %557, i64 %567
  %569 = ptrtoint i8* %568 to i64
  %570 = icmp sgt i64 %566, 0
  br i1 %570, label %571, label %573

571:                                              ; preds = %554
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %568, i8* align 1 %563, i64 %566, i1 false) #12
  %572 = load i8*, i8** %562, align 8
  br label %573

573:                                              ; preds = %571, %554
  %574 = phi i8* [ %563, %554 ], [ %572, %571 ]
  store i64 %569, i64* %535, align 8
  store i64 %561, i64* %534, align 8
  store i64 %559, i64* %543, align 8
  %575 = icmp eq i8* %574, null
  br i1 %575, label %813, label %576

576:                                              ; preds = %573
  tail call void @_ZdlPv(i8* nonnull %574) #11
  br label %813

577:                                              ; preds = %328
  %578 = add i64 %329, 1
  %579 = icmp ugt i64 %578, %2
  br i1 %579, label %813, label %580

580:                                              ; preds = %577
  %581 = getelementptr inbounds i8, i8* %1, i64 %329
  %582 = load i8, i8* %581, align 1
  %583 = zext i8 %582 to i32
  %584 = shl nuw nsw i32 %583, 4
  %585 = lshr i32 %583, 2
  %586 = zext i32 %585 to i64
  %587 = getelementptr inbounds [65 x i8], [65 x i8]* @_ZN8v8_crdtp4json12_GLOBAL__N_112kBase64TableE, i64 0, i64 %586
  %588 = load i8, i8* %587, align 1
  %589 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %82, i64 0, i32 0, i32 1
  %590 = load i8*, i8** %589, align 8
  %591 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %82, i64 0, i32 0, i32 2, i32 0, i32 0
  %592 = load i8*, i8** %591, align 8
  %593 = icmp ult i8* %590, %592
  %594 = ptrtoint i8* %592 to i64
  br i1 %593, label %595, label %599

595:                                              ; preds = %580
  store i8 %588, i8* %590, align 1
  %596 = getelementptr inbounds i8, i8* %590, i64 1
  %597 = ptrtoint i8* %596 to i64
  %598 = bitcast i8** %589 to i64*
  store i64 %597, i64* %598, align 8
  br label %645

599:                                              ; preds = %580
  %600 = ptrtoint i8* %590 to i64
  %601 = bitcast i8** %589 to i64*
  %602 = bitcast %"class.std::__1::vector"* %82 to i64*
  %603 = load i64, i64* %602, align 8
  %604 = sub i64 %600, %603
  %605 = add i64 %604, 1
  %606 = icmp slt i64 %605, 0
  br i1 %606, label %607, label %609

607:                                              ; preds = %599
  %608 = bitcast %"class.std::__1::vector"* %82 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %608) #13
  unreachable

609:                                              ; preds = %599
  %610 = bitcast i8** %591 to i64*
  %611 = sub i64 %594, %603
  %612 = icmp ult i64 %611, 4611686018427387903
  br i1 %612, label %613, label %618

613:                                              ; preds = %609
  %614 = shl i64 %611, 1
  %615 = icmp ult i64 %614, %605
  %616 = select i1 %615, i64 %605, i64 %614
  %617 = icmp eq i64 %616, 0
  br i1 %617, label %621, label %618

618:                                              ; preds = %613, %609
  %619 = phi i64 [ %616, %613 ], [ 9223372036854775807, %609 ]
  %620 = tail call i8* @_Znwm(i64 %619) #11
  br label %621

621:                                              ; preds = %618, %613
  %622 = phi i64 [ %619, %618 ], [ 0, %613 ]
  %623 = phi i8* [ %620, %618 ], [ null, %613 ]
  %624 = getelementptr inbounds i8, i8* %623, i64 %604
  %625 = getelementptr inbounds i8, i8* %623, i64 %622
  %626 = ptrtoint i8* %625 to i64
  store i8 %588, i8* %624, align 1
  %627 = getelementptr inbounds i8, i8* %624, i64 1
  %628 = ptrtoint i8* %627 to i64
  %629 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %82, i64 0, i32 0, i32 0
  %630 = load i8*, i8** %629, align 8
  %631 = load i64, i64* %601, align 8
  %632 = ptrtoint i8* %630 to i64
  %633 = sub i64 %631, %632
  %634 = sub i64 0, %633
  %635 = getelementptr inbounds i8, i8* %624, i64 %634
  %636 = ptrtoint i8* %635 to i64
  %637 = icmp sgt i64 %633, 0
  br i1 %637, label %638, label %640

638:                                              ; preds = %621
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %635, i8* align 1 %630, i64 %633, i1 false) #12
  %639 = load i8*, i8** %629, align 8
  br label %640

640:                                              ; preds = %638, %621
  %641 = phi i8* [ %630, %621 ], [ %639, %638 ]
  store i64 %636, i64* %602, align 8
  store i64 %628, i64* %601, align 8
  store i64 %626, i64* %610, align 8
  %642 = icmp eq i8* %641, null
  br i1 %642, label %645, label %643

643:                                              ; preds = %640
  tail call void @_ZdlPv(i8* nonnull %641) #11
  %644 = load i8*, i8** %589, align 8
  br label %645

645:                                              ; preds = %643, %640, %595
  %646 = phi i8* [ %596, %595 ], [ %627, %640 ], [ %644, %643 ]
  %647 = and i32 %584, 48
  %648 = zext i32 %647 to i64
  %649 = getelementptr inbounds [65 x i8], [65 x i8]* @_ZN8v8_crdtp4json12_GLOBAL__N_112kBase64TableE, i64 0, i64 %648
  %650 = load i8, i8* %649, align 16
  %651 = load i8*, i8** %591, align 8
  %652 = icmp ult i8* %646, %651
  %653 = ptrtoint i8* %651 to i64
  br i1 %652, label %654, label %658

654:                                              ; preds = %645
  store i8 %650, i8* %646, align 1
  %655 = getelementptr inbounds i8, i8* %646, i64 1
  %656 = ptrtoint i8* %655 to i64
  %657 = bitcast i8** %589 to i64*
  store i64 %656, i64* %657, align 8
  br label %704

658:                                              ; preds = %645
  %659 = ptrtoint i8* %646 to i64
  %660 = bitcast i8** %589 to i64*
  %661 = bitcast %"class.std::__1::vector"* %82 to i64*
  %662 = load i64, i64* %661, align 8
  %663 = sub i64 %659, %662
  %664 = add i64 %663, 1
  %665 = icmp slt i64 %664, 0
  br i1 %665, label %666, label %668

666:                                              ; preds = %658
  %667 = bitcast %"class.std::__1::vector"* %82 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %667) #13
  unreachable

668:                                              ; preds = %658
  %669 = bitcast i8** %591 to i64*
  %670 = sub i64 %653, %662
  %671 = icmp ult i64 %670, 4611686018427387903
  br i1 %671, label %672, label %677

672:                                              ; preds = %668
  %673 = shl i64 %670, 1
  %674 = icmp ult i64 %673, %664
  %675 = select i1 %674, i64 %664, i64 %673
  %676 = icmp eq i64 %675, 0
  br i1 %676, label %680, label %677

677:                                              ; preds = %672, %668
  %678 = phi i64 [ %675, %672 ], [ 9223372036854775807, %668 ]
  %679 = tail call i8* @_Znwm(i64 %678) #11
  br label %680

680:                                              ; preds = %677, %672
  %681 = phi i64 [ %678, %677 ], [ 0, %672 ]
  %682 = phi i8* [ %679, %677 ], [ null, %672 ]
  %683 = getelementptr inbounds i8, i8* %682, i64 %663
  %684 = getelementptr inbounds i8, i8* %682, i64 %681
  %685 = ptrtoint i8* %684 to i64
  store i8 %650, i8* %683, align 1
  %686 = getelementptr inbounds i8, i8* %683, i64 1
  %687 = ptrtoint i8* %686 to i64
  %688 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %82, i64 0, i32 0, i32 0
  %689 = load i8*, i8** %688, align 8
  %690 = load i64, i64* %660, align 8
  %691 = ptrtoint i8* %689 to i64
  %692 = sub i64 %690, %691
  %693 = sub i64 0, %692
  %694 = getelementptr inbounds i8, i8* %683, i64 %693
  %695 = ptrtoint i8* %694 to i64
  %696 = icmp sgt i64 %692, 0
  br i1 %696, label %697, label %699

697:                                              ; preds = %680
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %694, i8* align 1 %689, i64 %692, i1 false) #12
  %698 = load i8*, i8** %688, align 8
  br label %699

699:                                              ; preds = %697, %680
  %700 = phi i8* [ %689, %680 ], [ %698, %697 ]
  store i64 %695, i64* %661, align 8
  store i64 %687, i64* %660, align 8
  store i64 %685, i64* %669, align 8
  %701 = icmp eq i8* %700, null
  br i1 %701, label %704, label %702

702:                                              ; preds = %699
  tail call void @_ZdlPv(i8* nonnull %700) #11
  %703 = load i8*, i8** %589, align 8
  br label %704

704:                                              ; preds = %702, %699, %654
  %705 = phi i8* [ %655, %654 ], [ %686, %699 ], [ %703, %702 ]
  %706 = load i8*, i8** %591, align 8
  %707 = icmp ult i8* %705, %706
  %708 = ptrtoint i8* %706 to i64
  br i1 %707, label %709, label %713

709:                                              ; preds = %704
  store i8 61, i8* %705, align 1
  %710 = getelementptr inbounds i8, i8* %705, i64 1
  %711 = ptrtoint i8* %710 to i64
  %712 = bitcast i8** %589 to i64*
  store i64 %711, i64* %712, align 8
  br label %759

713:                                              ; preds = %704
  %714 = ptrtoint i8* %705 to i64
  %715 = bitcast i8** %589 to i64*
  %716 = bitcast %"class.std::__1::vector"* %82 to i64*
  %717 = load i64, i64* %716, align 8
  %718 = sub i64 %714, %717
  %719 = add i64 %718, 1
  %720 = icmp slt i64 %719, 0
  br i1 %720, label %721, label %723

721:                                              ; preds = %713
  %722 = bitcast %"class.std::__1::vector"* %82 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %722) #13
  unreachable

723:                                              ; preds = %713
  %724 = bitcast i8** %591 to i64*
  %725 = sub i64 %708, %717
  %726 = icmp ult i64 %725, 4611686018427387903
  br i1 %726, label %727, label %732

727:                                              ; preds = %723
  %728 = shl i64 %725, 1
  %729 = icmp ult i64 %728, %719
  %730 = select i1 %729, i64 %719, i64 %728
  %731 = icmp eq i64 %730, 0
  br i1 %731, label %735, label %732

732:                                              ; preds = %727, %723
  %733 = phi i64 [ %730, %727 ], [ 9223372036854775807, %723 ]
  %734 = tail call i8* @_Znwm(i64 %733) #11
  br label %735

735:                                              ; preds = %732, %727
  %736 = phi i64 [ %733, %732 ], [ 0, %727 ]
  %737 = phi i8* [ %734, %732 ], [ null, %727 ]
  %738 = getelementptr inbounds i8, i8* %737, i64 %718
  %739 = getelementptr inbounds i8, i8* %737, i64 %736
  %740 = ptrtoint i8* %739 to i64
  store i8 61, i8* %738, align 1
  %741 = getelementptr inbounds i8, i8* %738, i64 1
  %742 = ptrtoint i8* %741 to i64
  %743 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %82, i64 0, i32 0, i32 0
  %744 = load i8*, i8** %743, align 8
  %745 = load i64, i64* %715, align 8
  %746 = ptrtoint i8* %744 to i64
  %747 = sub i64 %745, %746
  %748 = sub i64 0, %747
  %749 = getelementptr inbounds i8, i8* %738, i64 %748
  %750 = ptrtoint i8* %749 to i64
  %751 = icmp sgt i64 %747, 0
  br i1 %751, label %752, label %754

752:                                              ; preds = %735
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %749, i8* align 1 %744, i64 %747, i1 false) #12
  %753 = load i8*, i8** %743, align 8
  br label %754

754:                                              ; preds = %752, %735
  %755 = phi i8* [ %744, %735 ], [ %753, %752 ]
  store i64 %750, i64* %716, align 8
  store i64 %742, i64* %715, align 8
  store i64 %740, i64* %724, align 8
  %756 = icmp eq i8* %755, null
  br i1 %756, label %759, label %757

757:                                              ; preds = %754
  tail call void @_ZdlPv(i8* nonnull %755) #11
  %758 = load i8*, i8** %589, align 8
  br label %759

759:                                              ; preds = %757, %754, %709
  %760 = phi i8* [ %710, %709 ], [ %741, %754 ], [ %758, %757 ]
  %761 = load i8*, i8** %591, align 8
  %762 = icmp ult i8* %760, %761
  %763 = ptrtoint i8* %761 to i64
  br i1 %762, label %764, label %768

764:                                              ; preds = %759
  store i8 61, i8* %760, align 1
  %765 = getelementptr inbounds i8, i8* %760, i64 1
  %766 = ptrtoint i8* %765 to i64
  %767 = bitcast i8** %589 to i64*
  store i64 %766, i64* %767, align 8
  br label %813

768:                                              ; preds = %759
  %769 = ptrtoint i8* %760 to i64
  %770 = bitcast i8** %589 to i64*
  %771 = bitcast %"class.std::__1::vector"* %82 to i64*
  %772 = load i64, i64* %771, align 8
  %773 = sub i64 %769, %772
  %774 = add i64 %773, 1
  %775 = icmp slt i64 %774, 0
  br i1 %775, label %776, label %778

776:                                              ; preds = %768
  %777 = bitcast %"class.std::__1::vector"* %82 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %777) #13
  unreachable

778:                                              ; preds = %768
  %779 = bitcast i8** %591 to i64*
  %780 = sub i64 %763, %772
  %781 = icmp ult i64 %780, 4611686018427387903
  br i1 %781, label %782, label %787

782:                                              ; preds = %778
  %783 = shl i64 %780, 1
  %784 = icmp ult i64 %783, %774
  %785 = select i1 %784, i64 %774, i64 %783
  %786 = icmp eq i64 %785, 0
  br i1 %786, label %790, label %787

787:                                              ; preds = %782, %778
  %788 = phi i64 [ %785, %782 ], [ 9223372036854775807, %778 ]
  %789 = tail call i8* @_Znwm(i64 %788) #11
  br label %790

790:                                              ; preds = %787, %782
  %791 = phi i64 [ %788, %787 ], [ 0, %782 ]
  %792 = phi i8* [ %789, %787 ], [ null, %782 ]
  %793 = getelementptr inbounds i8, i8* %792, i64 %773
  %794 = getelementptr inbounds i8, i8* %792, i64 %791
  %795 = ptrtoint i8* %794 to i64
  store i8 61, i8* %793, align 1
  %796 = getelementptr inbounds i8, i8* %793, i64 1
  %797 = ptrtoint i8* %796 to i64
  %798 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %82, i64 0, i32 0, i32 0
  %799 = load i8*, i8** %798, align 8
  %800 = load i64, i64* %770, align 8
  %801 = ptrtoint i8* %799 to i64
  %802 = sub i64 %800, %801
  %803 = sub i64 0, %802
  %804 = getelementptr inbounds i8, i8* %793, i64 %803
  %805 = ptrtoint i8* %804 to i64
  %806 = icmp sgt i64 %802, 0
  br i1 %806, label %807, label %809

807:                                              ; preds = %790
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %804, i8* align 1 %799, i64 %802, i1 false) #12
  %808 = load i8*, i8** %798, align 8
  br label %809

809:                                              ; preds = %807, %790
  %810 = phi i8* [ %799, %790 ], [ %808, %807 ]
  store i64 %805, i64* %771, align 8
  store i64 %797, i64* %770, align 8
  store i64 %795, i64* %779, align 8
  %811 = icmp eq i8* %810, null
  br i1 %811, label %813, label %812

812:                                              ; preds = %809
  tail call void @_ZdlPv(i8* nonnull %810) #11
  br label %813

813:                                              ; preds = %528, %573, %576, %577, %764, %809, %812
  %814 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %815 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %814, i64 0, i32 0, i32 1
  %816 = load i8*, i8** %815, align 8
  %817 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %814, i64 0, i32 0, i32 2, i32 0, i32 0
  %818 = load i8*, i8** %817, align 8
  %819 = icmp ult i8* %816, %818
  %820 = ptrtoint i8* %818 to i64
  br i1 %819, label %821, label %825

821:                                              ; preds = %813
  store i8 34, i8* %816, align 1
  %822 = getelementptr inbounds i8, i8* %816, i64 1
  %823 = ptrtoint i8* %822 to i64
  %824 = bitcast i8** %815 to i64*
  store i64 %823, i64* %824, align 8
  br label %870

825:                                              ; preds = %813
  %826 = ptrtoint i8* %816 to i64
  %827 = bitcast i8** %815 to i64*
  %828 = bitcast %"class.std::__1::vector"* %814 to i64*
  %829 = load i64, i64* %828, align 8
  %830 = sub i64 %826, %829
  %831 = add i64 %830, 1
  %832 = icmp slt i64 %831, 0
  br i1 %832, label %833, label %835

833:                                              ; preds = %825
  %834 = bitcast %"class.std::__1::vector"* %814 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %834) #13
  unreachable

835:                                              ; preds = %825
  %836 = bitcast i8** %817 to i64*
  %837 = sub i64 %820, %829
  %838 = icmp ult i64 %837, 4611686018427387903
  br i1 %838, label %839, label %844

839:                                              ; preds = %835
  %840 = shl i64 %837, 1
  %841 = icmp ult i64 %840, %831
  %842 = select i1 %841, i64 %831, i64 %840
  %843 = icmp eq i64 %842, 0
  br i1 %843, label %847, label %844

844:                                              ; preds = %839, %835
  %845 = phi i64 [ %842, %839 ], [ 9223372036854775807, %835 ]
  %846 = tail call i8* @_Znwm(i64 %845) #11
  br label %847

847:                                              ; preds = %844, %839
  %848 = phi i64 [ %845, %844 ], [ 0, %839 ]
  %849 = phi i8* [ %846, %844 ], [ null, %839 ]
  %850 = getelementptr inbounds i8, i8* %849, i64 %830
  %851 = getelementptr inbounds i8, i8* %849, i64 %848
  %852 = ptrtoint i8* %851 to i64
  store i8 34, i8* %850, align 1
  %853 = getelementptr inbounds i8, i8* %850, i64 1
  %854 = ptrtoint i8* %853 to i64
  %855 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %814, i64 0, i32 0, i32 0
  %856 = load i8*, i8** %855, align 8
  %857 = load i64, i64* %827, align 8
  %858 = ptrtoint i8* %856 to i64
  %859 = sub i64 %857, %858
  %860 = sub i64 0, %859
  %861 = getelementptr inbounds i8, i8* %850, i64 %860
  %862 = ptrtoint i8* %861 to i64
  %863 = icmp sgt i64 %859, 0
  br i1 %863, label %864, label %866

864:                                              ; preds = %847
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %861, i8* align 1 %856, i64 %859, i1 false) #12
  %865 = load i8*, i8** %855, align 8
  br label %866

866:                                              ; preds = %864, %847
  %867 = phi i8* [ %856, %847 ], [ %865, %864 ]
  store i64 %862, i64* %828, align 8
  store i64 %854, i64* %827, align 8
  store i64 %852, i64* %836, align 8
  %868 = icmp eq i8* %867, null
  br i1 %868, label %870, label %869

869:                                              ; preds = %866
  tail call void @_ZdlPv(i8* nonnull %867) #11
  br label %870

870:                                              ; preds = %869, %866, %821, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__16vectorIhNS3_9allocatorIhEEEEE12HandleDoubleEd(%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* nocapture readonly, double) unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 2
  %6 = load %"struct.v8_crdtp::Status"*, %"struct.v8_crdtp::Status"** %5, align 8
  %7 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %6, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %179

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 2, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = add i64 %12, -1
  %16 = add i64 %15, %14
  %17 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %18 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %17, align 8
  %19 = lshr i64 %16, 9
  %20 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %18, i64 %19
  %21 = load %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %20, align 8
  %22 = and i64 %16, 511
  %23 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %21, i64 %22
  %24 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 1
  %25 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %24, align 8
  tail call fastcc void @_ZN8v8_crdtp4json12_GLOBAL__N_15State12StartElementEPNSt3__16vectorIhNS3_9allocatorIhEEEE(%"class.v8_crdtp::json::(anonymous namespace)::State"* %23, %"class.std::__1::vector"* %25)
  %26 = tail call double @llvm.fabs.f64(double %1) #14
  %27 = fcmp ueq double %26, 0x7FF0000000000000
  br i1 %27, label %28, label %33

28:                                               ; preds = %10
  %29 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %24, align 8
  %30 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %29, i64 0, i32 0, i32 1
  %31 = load i8*, i8** %30, align 8
  %32 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"* %29, i8* %31, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 4)) #12
  br label %179

33:                                               ; preds = %10
  %34 = fcmp olt double %1, 0x43E0000000000000
  br i1 %34, label %35, label %64

35:                                               ; preds = %33
  %36 = fcmp oge double %1, 0xC3E0000000000000
  %37 = tail call double @llvm.floor.f64(double %1)
  %38 = fcmp oeq double %37, %1
  %39 = and i1 %36, %38
  br i1 %39, label %40, label %64

40:                                               ; preds = %35
  %41 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %41) #12
  %42 = fptosi double %1 to i64
  call void @_ZNSt3__19to_stringEl(%"class.std::__1::basic_string"* nonnull sret %3, i64 %42) #12
  %43 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %24, align 8
  %44 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %43, i64 0, i32 0, i32 1
  %45 = load i8*, i8** %44, align 8
  %46 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %47 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %46, i64 0, i32 1, i32 0
  %48 = load i8, i8* %47, align 1
  %49 = icmp slt i8 %48, 0
  %50 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %53 = load i64, i64* %52, align 8
  %54 = zext i8 %48 to i64
  %55 = select i1 %49, i8* %51, i8* %41
  %56 = select i1 %49, i64 %53, i64 %54
  %57 = getelementptr inbounds i8, i8* %55, i64 %56
  %58 = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertINS_11__wrap_iterIPKcEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS5_IPhEEE4typeENS5_IPKhEESA_SA_(%"class.std::__1::vector"* %43, i8* %45, i8* %55, i8* %57) #12
  %59 = load i8, i8* %47, align 1
  %60 = icmp slt i8 %59, 0
  br i1 %60, label %61, label %63

61:                                               ; preds = %40
  %62 = load i8*, i8** %50, align 8
  call void @_ZdlPv(i8* %62) #11
  br label %63

63:                                               ; preds = %40, %61
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %41) #12
  br label %179

64:                                               ; preds = %35, %33
  %65 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %65) #12
  call void @_ZN8v8_crdtp4json8platform6DToStrEd(%"class.std::__1::basic_string"* nonnull sret %4, double %1) #12
  %66 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %67 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %66, i64 0, i32 1, i32 0
  %68 = load i8, i8* %67, align 1
  %69 = icmp slt i8 %68, 0
  %70 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %71 = load i8*, i8** %70, align 8
  %72 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %73 = load i64, i64* %72, align 8
  %74 = zext i8 %68 to i64
  %75 = select i1 %69, i8* %71, i8* %65
  %76 = select i1 %69, i64 %73, i64 %74
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %90, label %78

78:                                               ; preds = %64
  %79 = getelementptr inbounds i8, i8* %75, i64 %76
  br label %80

80:                                               ; preds = %180, %78
  %81 = phi i8* [ %181, %180 ], [ %75, %78 ]
  %82 = load i8, i8* %81, align 1
  switch i8 %82, label %180 [
    i8 46, label %83
    i8 101, label %83
    i8 69, label %83
  ]

83:                                               ; preds = %80, %80, %80
  %84 = icmp eq i8* %81, %79
  %85 = ptrtoint i8* %81 to i64
  %86 = ptrtoint i8* %75 to i64
  %87 = sub i64 %85, %86
  %88 = icmp eq i64 %87, -1
  %89 = or i1 %84, %88
  br i1 %89, label %90, label %94

90:                                               ; preds = %180, %83, %64
  %91 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0)) #12
  %92 = load i8, i8* %67, align 1
  %93 = load i8*, i8** %70, align 8
  br label %94

94:                                               ; preds = %83, %90
  %95 = phi i8* [ %71, %83 ], [ %93, %90 ]
  %96 = phi i8 [ %68, %83 ], [ %92, %90 ]
  %97 = icmp slt i8 %96, 0
  %98 = select i1 %97, i8* %95, i8* %65
  %99 = load i8, i8* %98, align 1
  switch i8 %99, label %166 [
    i8 46, label %100
    i8 45, label %157
  ]

100:                                              ; preds = %94
  %101 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %24, align 8
  %102 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %101, i64 0, i32 0, i32 1
  %103 = load i8*, i8** %102, align 8
  %104 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %101, i64 0, i32 0, i32 2, i32 0, i32 0
  %105 = load i8*, i8** %104, align 8
  %106 = icmp ult i8* %103, %105
  %107 = ptrtoint i8* %105 to i64
  br i1 %106, label %108, label %112

108:                                              ; preds = %100
  store i8 48, i8* %103, align 1
  %109 = getelementptr inbounds i8, i8* %103, i64 1
  %110 = ptrtoint i8* %109 to i64
  %111 = bitcast i8** %102 to i64*
  store i64 %110, i64* %111, align 8
  br label %166

112:                                              ; preds = %100
  %113 = ptrtoint i8* %103 to i64
  %114 = bitcast i8** %102 to i64*
  %115 = bitcast %"class.std::__1::vector"* %101 to i64*
  %116 = load i64, i64* %115, align 8
  %117 = sub i64 %113, %116
  %118 = add i64 %117, 1
  %119 = icmp slt i64 %118, 0
  br i1 %119, label %120, label %122

120:                                              ; preds = %112
  %121 = bitcast %"class.std::__1::vector"* %101 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %121) #13
  unreachable

122:                                              ; preds = %112
  %123 = bitcast i8** %104 to i64*
  %124 = sub i64 %107, %116
  %125 = icmp ult i64 %124, 4611686018427387903
  br i1 %125, label %126, label %131

126:                                              ; preds = %122
  %127 = shl i64 %124, 1
  %128 = icmp ult i64 %127, %118
  %129 = select i1 %128, i64 %118, i64 %127
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %134, label %131

131:                                              ; preds = %126, %122
  %132 = phi i64 [ %129, %126 ], [ 9223372036854775807, %122 ]
  %133 = call i8* @_Znwm(i64 %132) #11
  br label %134

134:                                              ; preds = %131, %126
  %135 = phi i64 [ %132, %131 ], [ 0, %126 ]
  %136 = phi i8* [ %133, %131 ], [ null, %126 ]
  %137 = getelementptr inbounds i8, i8* %136, i64 %117
  %138 = getelementptr inbounds i8, i8* %136, i64 %135
  %139 = ptrtoint i8* %138 to i64
  store i8 48, i8* %137, align 1
  %140 = getelementptr inbounds i8, i8* %137, i64 1
  %141 = ptrtoint i8* %140 to i64
  %142 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %101, i64 0, i32 0, i32 0
  %143 = load i8*, i8** %142, align 8
  %144 = load i64, i64* %114, align 8
  %145 = ptrtoint i8* %143 to i64
  %146 = sub i64 %144, %145
  %147 = sub i64 0, %146
  %148 = getelementptr inbounds i8, i8* %137, i64 %147
  %149 = ptrtoint i8* %148 to i64
  %150 = icmp sgt i64 %146, 0
  br i1 %150, label %151, label %153

151:                                              ; preds = %134
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %148, i8* align 1 %143, i64 %146, i1 false) #12
  %152 = load i8*, i8** %142, align 8
  br label %153

153:                                              ; preds = %151, %134
  %154 = phi i8* [ %143, %134 ], [ %152, %151 ]
  store i64 %149, i64* %115, align 8
  store i64 %141, i64* %114, align 8
  store i64 %139, i64* %123, align 8
  %155 = icmp eq i8* %154, null
  br i1 %155, label %166, label %156

156:                                              ; preds = %153
  call void @_ZdlPv(i8* nonnull %154) #11
  br label %166

157:                                              ; preds = %94
  %158 = getelementptr inbounds i8, i8* %98, i64 1
  %159 = load i8, i8* %158, align 1
  %160 = icmp eq i8 %159, 46
  br i1 %160, label %161, label %166

161:                                              ; preds = %157
  %162 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %24, align 8
  %163 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %162, i64 0, i32 0, i32 1
  %164 = load i8*, i8** %163, align 8
  %165 = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"* %162, i8* %164, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i64 0, i64 2)) #12
  br label %166

166:                                              ; preds = %156, %153, %108, %94, %157, %161
  %167 = phi i8* [ %158, %161 ], [ %98, %157 ], [ %98, %94 ], [ %98, %108 ], [ %98, %153 ], [ %98, %156 ]
  %168 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %24, align 8
  %169 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %168, i64 0, i32 0, i32 1
  %170 = load i8*, i8** %169, align 8
  %171 = call i64 @strlen(i8* %167) #15
  %172 = getelementptr inbounds i8, i8* %167, i64 %171
  %173 = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"* %168, i8* %170, i8* %167, i8* %172) #12
  %174 = load i8, i8* %67, align 1
  %175 = icmp slt i8 %174, 0
  br i1 %175, label %176, label %178

176:                                              ; preds = %166
  %177 = load i8*, i8** %70, align 8
  call void @_ZdlPv(i8* %177) #11
  br label %178

178:                                              ; preds = %166, %176
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %65) #12
  br label %179

179:                                              ; preds = %2, %178, %63, %28
  ret void

180:                                              ; preds = %80
  %181 = getelementptr inbounds i8, i8* %81, i64 1
  %182 = icmp eq i8* %181, %79
  br i1 %182, label %90, label %80
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__16vectorIhNS3_9allocatorIhEEEEE11HandleInt32Ei(%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* nocapture readonly, i32) unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 2
  %5 = load %"struct.v8_crdtp::Status"*, %"struct.v8_crdtp::Status"** %4, align 8
  %6 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %5, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %47

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 2, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = add i64 %11, -1
  %15 = add i64 %14, %13
  %16 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %17 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %16, align 8
  %18 = lshr i64 %15, 9
  %19 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %17, i64 %18
  %20 = load %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %19, align 8
  %21 = and i64 %15, 511
  %22 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %20, i64 %21
  %23 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 1
  %24 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  tail call fastcc void @_ZN8v8_crdtp4json12_GLOBAL__N_15State12StartElementEPNSt3__16vectorIhNS3_9allocatorIhEEEE(%"class.v8_crdtp::json::(anonymous namespace)::State"* %22, %"class.std::__1::vector"* %24)
  %25 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %25) #12
  call void @_ZNSt3__19to_stringEi(%"class.std::__1::basic_string"* nonnull sret %3, i32 %1) #12
  %26 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %23, align 8
  %27 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %26, i64 0, i32 0, i32 1
  %28 = load i8*, i8** %27, align 8
  %29 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %30 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %29, i64 0, i32 1, i32 0
  %31 = load i8, i8* %30, align 1
  %32 = icmp slt i8 %31, 0
  %33 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %36 = load i64, i64* %35, align 8
  %37 = zext i8 %31 to i64
  %38 = select i1 %32, i8* %34, i8* %25
  %39 = select i1 %32, i64 %36, i64 %37
  %40 = getelementptr inbounds i8, i8* %38, i64 %39
  %41 = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertINS_11__wrap_iterIPKcEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS5_IPhEEE4typeENS5_IPKhEESA_SA_(%"class.std::__1::vector"* %26, i8* %28, i8* %38, i8* %40) #12
  %42 = load i8, i8* %30, align 1
  %43 = icmp slt i8 %42, 0
  br i1 %43, label %44, label %46

44:                                               ; preds = %9
  %45 = load i8*, i8** %33, align 8
  call void @_ZdlPv(i8* %45) #11
  br label %46

46:                                               ; preds = %9, %44
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %25) #12
  br label %47

47:                                               ; preds = %2, %46
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__16vectorIhNS3_9allocatorIhEEEEE10HandleBoolEb(%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* nocapture readonly, i1 zeroext) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 2
  %4 = load %"struct.v8_crdtp::Status"*, %"struct.v8_crdtp::Status"** %3, align 8
  %5 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %4, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %31

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 2, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = add i64 %10, -1
  %14 = add i64 %13, %12
  %15 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %16 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %15, align 8
  %17 = lshr i64 %14, 9
  %18 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %16, i64 %17
  %19 = load %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %18, align 8
  %20 = and i64 %14, 511
  %21 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %19, i64 %20
  %22 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 1
  %23 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %22, align 8
  tail call fastcc void @_ZN8v8_crdtp4json12_GLOBAL__N_15State12StartElementEPNSt3__16vectorIhNS3_9allocatorIhEEEE(%"class.v8_crdtp::json::(anonymous namespace)::State"* %21, %"class.std::__1::vector"* %23)
  %24 = select i1 %1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i64 0, i64 0)
  %25 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %22, align 8
  %26 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %25, i64 0, i32 0, i32 1
  %27 = load i8*, i8** %26, align 8
  %28 = select i1 %1, i64 4, i64 5
  %29 = getelementptr inbounds i8, i8* %24, i64 %28
  %30 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"* %25, i8* %27, i8* %24, i8* %29) #12
  br label %31

31:                                               ; preds = %2, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__16vectorIhNS3_9allocatorIhEEEEE10HandleNullEv(%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 2
  %3 = load %"struct.v8_crdtp::Status"*, %"struct.v8_crdtp::Status"** %2, align 8
  %4 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %3, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %27

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 2, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = add i64 %9, -1
  %13 = add i64 %12, %11
  %14 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %15 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %14, align 8
  %16 = lshr i64 %13, 9
  %17 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %15, i64 %16
  %18 = load %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %17, align 8
  %19 = and i64 %13, 511
  %20 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %18, i64 %19
  %21 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 1
  %22 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %21, align 8
  tail call fastcc void @_ZN8v8_crdtp4json12_GLOBAL__N_15State12StartElementEPNSt3__16vectorIhNS3_9allocatorIhEEEE(%"class.v8_crdtp::json::(anonymous namespace)::State"* %20, %"class.std::__1::vector"* %22)
  %23 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %21, align 8
  %24 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %23, i64 0, i32 0, i32 1
  %25 = load i8*, i8** %24, align 8
  %26 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"* %23, i8* %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 4)) #12
  br label %27

27:                                               ; preds = %1, %7
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__16vectorIhNS3_9allocatorIhEEEEE11HandleErrorENS_6StatusE(%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* nocapture readonly, i32, i64) unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 2
  %5 = load %"struct.v8_crdtp::Status"*, %"struct.v8_crdtp::Status"** %4, align 8
  %6 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %5, i64 0, i32 0
  store i32 %1, i32* %6, align 8
  %7 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %5, i64 0, i32 1
  store i64 %2, i64* %7, align 8
  %8 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder"* %0, i64 0, i32 1
  %9 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %8, align 8
  %10 = bitcast %"class.std::__1::vector"* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %9, i64 0, i32 0, i32 1
  %13 = bitcast i8** %12 to i64*
  store i64 %11, i64* %13, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZNSt3__112__deque_baseIN8v8_crdtp4json12_GLOBAL__N_15StateENS_9allocatorIS4_EEED2Ev(%"class.std::__1::__deque_base"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 1
  %3 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %2, align 8
  %4 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 9
  %7 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %3, i64 %6
  %8 = getelementptr %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 2
  %9 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %8, align 8
  %10 = icmp eq %"class.v8_crdtp::json::(anonymous namespace)::State"** %9, %3
  %11 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %9 to i64
  %12 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %3 to i64
  br i1 %10, label %13, label %15

13:                                               ; preds = %1
  %14 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 2, i32 0, i32 0
  br label %28

15:                                               ; preds = %1
  %16 = load %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %7, align 8
  %17 = and i64 %5, 511
  %18 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %16, i64 %17
  %19 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 2, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %20, %5
  %22 = lshr i64 %21, 9
  %23 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %3, i64 %22
  %24 = load %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %23, align 8
  %25 = and i64 %21, 511
  %26 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %24, i64 %25
  %27 = icmp eq %"class.v8_crdtp::json::(anonymous namespace)::State"* %26, %18
  br i1 %27, label %28, label %34

28:                                               ; preds = %47, %15, %13
  %29 = phi i64* [ %14, %13 ], [ %19, %15 ], [ %19, %47 ]
  store i64 0, i64* %29, align 8
  %30 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"*** %8 to i64*
  %31 = sub i64 %11, %12
  %32 = ashr exact i64 %31, 3
  %33 = icmp ugt i64 %32, 2
  br i1 %33, label %52, label %65

34:                                               ; preds = %15, %47
  %35 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"* [ %50, %47 ], [ %18, %15 ]
  %36 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %48, %47 ], [ %7, %15 ]
  %37 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %35, i64 1
  %38 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"* %37 to i64
  %39 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %36 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %38, %40
  %42 = icmp eq i64 %41, 4096
  br i1 %42, label %43, label %47

43:                                               ; preds = %34
  %44 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %36, i64 1
  %45 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %44 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %43, %34
  %48 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %44, %43 ], [ %36, %34 ]
  %49 = phi i64 [ %46, %43 ], [ %38, %34 ]
  %50 = inttoptr i64 %49 to %"class.v8_crdtp::json::(anonymous namespace)::State"*
  %51 = icmp eq %"class.v8_crdtp::json::(anonymous namespace)::State"* %26, %50
  br i1 %51, label %28, label %34

52:                                               ; preds = %28, %52
  %53 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %57, %52 ], [ %3, %28 ]
  %54 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %53 to i8**
  %55 = load i8*, i8** %54, align 8
  tail call void @_ZdlPv(i8* %55) #11
  %56 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %2, align 8
  %57 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %56, i64 1
  store %"class.v8_crdtp::json::(anonymous namespace)::State"** %57, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %2, align 8
  %58 = load i64, i64* %30, align 8
  %59 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %57 to i64
  %60 = sub i64 %58, %59
  %61 = ashr exact i64 %60, 3
  %62 = icmp ugt i64 %61, 2
  br i1 %62, label %52, label %63

63:                                               ; preds = %52
  %64 = inttoptr i64 %58 to %"class.v8_crdtp::json::(anonymous namespace)::State"**
  br label %65

65:                                               ; preds = %63, %28
  %66 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %9, %28 ], [ %64, %63 ]
  %67 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %3, %28 ], [ %57, %63 ]
  %68 = phi i64 [ %32, %28 ], [ %61, %63 ]
  switch i64 %68, label %72 [
    i64 1, label %70
    i64 2, label %69
  ]

69:                                               ; preds = %65
  br label %70

70:                                               ; preds = %65, %69
  %71 = phi i64 [ 512, %69 ], [ 256, %65 ]
  store i64 %71, i64* %4, align 8
  br label %72

72:                                               ; preds = %70, %65
  %73 = icmp eq %"class.v8_crdtp::json::(anonymous namespace)::State"** %67, %66
  br i1 %73, label %83, label %74

74:                                               ; preds = %72, %74
  %75 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %78, %74 ], [ %67, %72 ]
  %76 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %75 to i8**
  %77 = load i8*, i8** %76, align 8
  tail call void @_ZdlPv(i8* %77) #11
  %78 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %75, i64 1
  %79 = icmp eq %"class.v8_crdtp::json::(anonymous namespace)::State"** %78, %66
  br i1 %79, label %80, label %74

80:                                               ; preds = %74
  %81 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %2, align 8
  %82 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %8, align 8
  br label %83

83:                                               ; preds = %80, %72
  %84 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %82, %80 ], [ %66, %72 ]
  %85 = phi %"class.v8_crdtp::json::(anonymous namespace)::State"** [ %81, %80 ], [ %66, %72 ]
  %86 = icmp eq %"class.v8_crdtp::json::(anonymous namespace)::State"** %84, %85
  br i1 %86, label %95, label %87

87:                                               ; preds = %83
  %88 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %85 to i64
  %89 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %84, i64 -1
  %90 = ptrtoint %"class.v8_crdtp::json::(anonymous namespace)::State"** %89 to i64
  %91 = sub i64 %90, %88
  %92 = lshr i64 %91, 3
  %93 = xor i64 %92, -1
  %94 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %84, i64 %93
  store %"class.v8_crdtp::json::(anonymous namespace)::State"** %94, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %8, align 8
  br label %95

95:                                               ; preds = %87, %83
  %96 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 0
  %97 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %96, align 8
  %98 = icmp eq %"class.v8_crdtp::json::(anonymous namespace)::State"** %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %95
  %100 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %97 to i8*
  tail call void @_ZdlPv(i8* %100) #11
  br label %101

101:                                              ; preds = %95, %99
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN8v8_crdtp4json12_GLOBAL__N_15State12StartElementEPNSt3__16vectorIhNS3_9allocatorIhEEEE(%"class.v8_crdtp::json::(anonymous namespace)::State"* nocapture, %"class.std::__1::vector"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %71, label %6

6:                                                ; preds = %2
  %7 = and i32 %4, 1
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %14, label %9

9:                                                ; preds = %6
  %10 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %0, i64 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 2
  %13 = select i1 %12, i8 44, i8 58
  br label %14

14:                                               ; preds = %9, %6
  %15 = phi i8 [ 44, %6 ], [ %13, %9 ]
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = icmp ult i8* %17, %19
  %21 = ptrtoint i8* %19 to i64
  br i1 %20, label %22, label %26

22:                                               ; preds = %14
  store i8 %15, i8* %17, align 1
  %23 = getelementptr inbounds i8, i8* %17, i64 1
  %24 = ptrtoint i8* %23 to i64
  %25 = bitcast i8** %16 to i64*
  store i64 %24, i64* %25, align 8
  br label %71

26:                                               ; preds = %14
  %27 = ptrtoint i8* %17 to i64
  %28 = bitcast i8** %16 to i64*
  %29 = bitcast %"class.std::__1::vector"* %1 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = sub i64 %27, %30
  %32 = add i64 %31, 1
  %33 = icmp slt i64 %32, 0
  br i1 %33, label %34, label %36

34:                                               ; preds = %26
  %35 = bitcast %"class.std::__1::vector"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %35) #13
  unreachable

36:                                               ; preds = %26
  %37 = bitcast i8** %18 to i64*
  %38 = sub i64 %21, %30
  %39 = icmp ult i64 %38, 4611686018427387903
  br i1 %39, label %40, label %45

40:                                               ; preds = %36
  %41 = shl i64 %38, 1
  %42 = icmp ult i64 %41, %32
  %43 = select i1 %42, i64 %32, i64 %41
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %48, label %45

45:                                               ; preds = %40, %36
  %46 = phi i64 [ %43, %40 ], [ 9223372036854775807, %36 ]
  %47 = tail call i8* @_Znwm(i64 %46) #11
  br label %48

48:                                               ; preds = %45, %40
  %49 = phi i64 [ %46, %45 ], [ 0, %40 ]
  %50 = phi i8* [ %47, %45 ], [ null, %40 ]
  %51 = getelementptr inbounds i8, i8* %50, i64 %31
  %52 = getelementptr inbounds i8, i8* %50, i64 %49
  %53 = ptrtoint i8* %52 to i64
  store i8 %15, i8* %51, align 1
  %54 = getelementptr inbounds i8, i8* %51, i64 1
  %55 = ptrtoint i8* %54 to i64
  %56 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %57 = load i8*, i8** %56, align 8
  %58 = load i64, i64* %28, align 8
  %59 = ptrtoint i8* %57 to i64
  %60 = sub i64 %58, %59
  %61 = sub i64 0, %60
  %62 = getelementptr inbounds i8, i8* %51, i64 %61
  %63 = ptrtoint i8* %62 to i64
  %64 = icmp sgt i64 %60, 0
  br i1 %64, label %65, label %67

65:                                               ; preds = %48
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %62, i8* align 1 %57, i64 %60, i1 false) #12
  %66 = load i8*, i8** %56, align 8
  br label %67

67:                                               ; preds = %65, %48
  %68 = phi i8* [ %57, %48 ], [ %66, %65 ]
  store i64 %63, i64* %29, align 8
  store i64 %55, i64* %28, align 8
  store i64 %53, i64* %37, align 8
  %69 = icmp eq i8* %68, null
  br i1 %69, label %71, label %70

70:                                               ; preds = %67
  tail call void @_ZdlPv(i8* nonnull %68) #11
  br label %71

71:                                               ; preds = %2, %22, %67, %70
  %72 = load i32, i32* %3, align 4
  %73 = add nsw i32 %72, 1
  store i32 %73, i32* %3, align 4
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"*, i8*, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint i8* %1 to i64
  %6 = ptrtoint i8* %2 to i64
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %8 = ptrtoint i8* %3 to i64
  %9 = sub i64 %8, %6
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %11, label %618

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %13 = bitcast i8** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = ptrtoint i8* %16 to i64
  %18 = sub i64 %14, %17
  %19 = icmp sgt i64 %9, %18
  %20 = bitcast i8** %15 to i64*
  br i1 %19, label %368, label %21

21:                                               ; preds = %11
  %22 = sub i64 %17, %5
  %23 = icmp sgt i64 %9, %22
  br i1 %23, label %24, label %141

24:                                               ; preds = %21
  %25 = getelementptr inbounds i8, i8* %2, i64 %22
  %26 = icmp eq i8* %25, %3
  br i1 %26, label %136, label %27

27:                                               ; preds = %24
  %28 = sub i64 %5, %6
  %29 = sub i64 %28, %17
  %30 = getelementptr i8, i8* %3, i64 %29
  %31 = ptrtoint i8* %30 to i64
  %32 = icmp ult i8* %30, inttoptr (i64 32 to i8*)
  br i1 %32, label %123, label %33

33:                                               ; preds = %27
  %34 = sub i64 %5, %6
  %35 = sub i64 %34, %17
  %36 = getelementptr i8, i8* %3, i64 %35
  %37 = ptrtoint i8* %36 to i64
  %38 = getelementptr i8, i8* %16, i64 %37
  %39 = icmp ult i8* %16, %3
  %40 = icmp ult i8* %25, %38
  %41 = and i1 %39, %40
  br i1 %41, label %123, label %42

42:                                               ; preds = %33
  %43 = and i64 %31, -32
  %44 = getelementptr i8, i8* %16, i64 %43
  %45 = getelementptr i8, i8* %25, i64 %43
  %46 = add i64 %43, -32
  %47 = lshr exact i64 %46, 5
  %48 = add nuw nsw i64 %47, 1
  %49 = and i64 %48, 3
  %50 = icmp ult i64 %46, 96
  br i1 %50, label %102, label %51

51:                                               ; preds = %42
  %52 = sub nsw i64 %48, %49
  br label %53

53:                                               ; preds = %53, %51
  %54 = phi i64 [ 0, %51 ], [ %99, %53 ]
  %55 = phi i64 [ %52, %51 ], [ %100, %53 ]
  %56 = getelementptr i8, i8* %16, i64 %54
  %57 = getelementptr i8, i8* %25, i64 %54
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1, !alias.scope !9
  %60 = getelementptr i8, i8* %57, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1, !alias.scope !9
  %63 = bitcast i8* %56 to <16 x i8>*
  store <16 x i8> %59, <16 x i8>* %63, align 1, !alias.scope !12, !noalias !9
  %64 = getelementptr i8, i8* %56, i64 16
  %65 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> %62, <16 x i8>* %65, align 1, !alias.scope !12, !noalias !9
  %66 = or i64 %54, 32
  %67 = getelementptr i8, i8* %16, i64 %66
  %68 = getelementptr i8, i8* %25, i64 %66
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1, !alias.scope !9
  %71 = getelementptr i8, i8* %68, i64 16
  %72 = bitcast i8* %71 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1, !alias.scope !9
  %74 = bitcast i8* %67 to <16 x i8>*
  store <16 x i8> %70, <16 x i8>* %74, align 1, !alias.scope !12, !noalias !9
  %75 = getelementptr i8, i8* %67, i64 16
  %76 = bitcast i8* %75 to <16 x i8>*
  store <16 x i8> %73, <16 x i8>* %76, align 1, !alias.scope !12, !noalias !9
  %77 = or i64 %54, 64
  %78 = getelementptr i8, i8* %16, i64 %77
  %79 = getelementptr i8, i8* %25, i64 %77
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1, !alias.scope !9
  %82 = getelementptr i8, i8* %79, i64 16
  %83 = bitcast i8* %82 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 1, !alias.scope !9
  %85 = bitcast i8* %78 to <16 x i8>*
  store <16 x i8> %81, <16 x i8>* %85, align 1, !alias.scope !12, !noalias !9
  %86 = getelementptr i8, i8* %78, i64 16
  %87 = bitcast i8* %86 to <16 x i8>*
  store <16 x i8> %84, <16 x i8>* %87, align 1, !alias.scope !12, !noalias !9
  %88 = or i64 %54, 96
  %89 = getelementptr i8, i8* %16, i64 %88
  %90 = getelementptr i8, i8* %25, i64 %88
  %91 = bitcast i8* %90 to <16 x i8>*
  %92 = load <16 x i8>, <16 x i8>* %91, align 1, !alias.scope !9
  %93 = getelementptr i8, i8* %90, i64 16
  %94 = bitcast i8* %93 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1, !alias.scope !9
  %96 = bitcast i8* %89 to <16 x i8>*
  store <16 x i8> %92, <16 x i8>* %96, align 1, !alias.scope !12, !noalias !9
  %97 = getelementptr i8, i8* %89, i64 16
  %98 = bitcast i8* %97 to <16 x i8>*
  store <16 x i8> %95, <16 x i8>* %98, align 1, !alias.scope !12, !noalias !9
  %99 = add i64 %54, 128
  %100 = add i64 %55, -4
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %53, !llvm.loop !14

102:                                              ; preds = %53, %42
  %103 = phi i64 [ 0, %42 ], [ %99, %53 ]
  %104 = icmp eq i64 %49, 0
  br i1 %104, label %121, label %105

105:                                              ; preds = %102, %105
  %106 = phi i64 [ %118, %105 ], [ %103, %102 ]
  %107 = phi i64 [ %119, %105 ], [ %49, %102 ]
  %108 = getelementptr i8, i8* %16, i64 %106
  %109 = getelementptr i8, i8* %25, i64 %106
  %110 = bitcast i8* %109 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1, !alias.scope !9
  %112 = getelementptr i8, i8* %109, i64 16
  %113 = bitcast i8* %112 to <16 x i8>*
  %114 = load <16 x i8>, <16 x i8>* %113, align 1, !alias.scope !9
  %115 = bitcast i8* %108 to <16 x i8>*
  store <16 x i8> %111, <16 x i8>* %115, align 1, !alias.scope !12, !noalias !9
  %116 = getelementptr i8, i8* %108, i64 16
  %117 = bitcast i8* %116 to <16 x i8>*
  store <16 x i8> %114, <16 x i8>* %117, align 1, !alias.scope !12, !noalias !9
  %118 = add i64 %106, 32
  %119 = add i64 %107, -1
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %121, label %105, !llvm.loop !16

121:                                              ; preds = %105, %102
  %122 = icmp eq i64 %43, %31
  br i1 %122, label %133, label %123

123:                                              ; preds = %121, %33, %27
  %124 = phi i8* [ %16, %33 ], [ %16, %27 ], [ %44, %121 ]
  %125 = phi i8* [ %25, %33 ], [ %25, %27 ], [ %45, %121 ]
  br label %126

126:                                              ; preds = %123, %126
  %127 = phi i8* [ %131, %126 ], [ %124, %123 ]
  %128 = phi i8* [ %130, %126 ], [ %125, %123 ]
  %129 = load i8, i8* %128, align 1
  store i8 %129, i8* %127, align 1
  %130 = getelementptr inbounds i8, i8* %128, i64 1
  %131 = getelementptr inbounds i8, i8* %127, i64 1
  %132 = icmp eq i8* %130, %3
  br i1 %132, label %133, label %126, !llvm.loop !17

133:                                              ; preds = %126, %121
  %134 = phi i8* [ %44, %121 ], [ %131, %126 ]
  %135 = ptrtoint i8* %134 to i64
  br label %136

136:                                              ; preds = %133, %24
  %137 = phi i64 [ %17, %24 ], [ %135, %133 ]
  store i64 %137, i64* %20, align 8
  %138 = icmp sgt i64 %22, 0
  br i1 %138, label %139, label %618

139:                                              ; preds = %136
  %140 = inttoptr i64 %137 to i8*
  br label %141

141:                                              ; preds = %139, %21
  %142 = phi i64 [ %137, %139 ], [ %17, %21 ]
  %143 = phi i8* [ %140, %139 ], [ %16, %21 ]
  %144 = phi i8* [ %25, %139 ], [ %3, %21 ]
  %145 = getelementptr inbounds i8, i8* %1, i64 %9
  %146 = ptrtoint i8* %145 to i64
  %147 = sub i64 %142, %146
  %148 = getelementptr inbounds i8, i8* %1, i64 %147
  %149 = icmp ult i8* %148, %16
  br i1 %149, label %150, label %250

150:                                              ; preds = %141
  %151 = sub i64 %9, %142
  %152 = getelementptr i8, i8* %16, i64 %151
  %153 = ptrtoint i8* %152 to i64
  %154 = icmp ult i8* %152, inttoptr (i64 32 to i8*)
  br i1 %154, label %155, label %158

155:                                              ; preds = %245, %158, %150
  %156 = phi i8* [ %148, %158 ], [ %148, %150 ], [ %168, %245 ]
  %157 = phi i8* [ %143, %158 ], [ %143, %150 ], [ %169, %245 ]
  br label %256

158:                                              ; preds = %150
  %159 = sub i64 %9, %142
  %160 = getelementptr i8, i8* %16, i64 %159
  %161 = ptrtoint i8* %160 to i64
  %162 = getelementptr i8, i8* %143, i64 %161
  %163 = icmp ult i8* %143, %16
  %164 = icmp ult i8* %148, %162
  %165 = and i1 %163, %164
  br i1 %165, label %155, label %166

166:                                              ; preds = %158
  %167 = and i64 %153, -32
  %168 = getelementptr i8, i8* %148, i64 %167
  %169 = getelementptr i8, i8* %143, i64 %167
  %170 = add i64 %167, -32
  %171 = lshr exact i64 %170, 5
  %172 = add nuw nsw i64 %171, 1
  %173 = and i64 %172, 3
  %174 = icmp ult i64 %170, 96
  br i1 %174, label %226, label %175

175:                                              ; preds = %166
  %176 = sub nsw i64 %172, %173
  br label %177

177:                                              ; preds = %177, %175
  %178 = phi i64 [ 0, %175 ], [ %223, %177 ]
  %179 = phi i64 [ %176, %175 ], [ %224, %177 ]
  %180 = getelementptr i8, i8* %148, i64 %178
  %181 = getelementptr i8, i8* %143, i64 %178
  %182 = bitcast i8* %180 to <16 x i8>*
  %183 = load <16 x i8>, <16 x i8>* %182, align 1, !alias.scope !18
  %184 = getelementptr i8, i8* %180, i64 16
  %185 = bitcast i8* %184 to <16 x i8>*
  %186 = load <16 x i8>, <16 x i8>* %185, align 1, !alias.scope !18
  %187 = bitcast i8* %181 to <16 x i8>*
  store <16 x i8> %183, <16 x i8>* %187, align 1, !alias.scope !21, !noalias !18
  %188 = getelementptr i8, i8* %181, i64 16
  %189 = bitcast i8* %188 to <16 x i8>*
  store <16 x i8> %186, <16 x i8>* %189, align 1, !alias.scope !21, !noalias !18
  %190 = or i64 %178, 32
  %191 = getelementptr i8, i8* %148, i64 %190
  %192 = getelementptr i8, i8* %143, i64 %190
  %193 = bitcast i8* %191 to <16 x i8>*
  %194 = load <16 x i8>, <16 x i8>* %193, align 1, !alias.scope !18
  %195 = getelementptr i8, i8* %191, i64 16
  %196 = bitcast i8* %195 to <16 x i8>*
  %197 = load <16 x i8>, <16 x i8>* %196, align 1, !alias.scope !18
  %198 = bitcast i8* %192 to <16 x i8>*
  store <16 x i8> %194, <16 x i8>* %198, align 1, !alias.scope !21, !noalias !18
  %199 = getelementptr i8, i8* %192, i64 16
  %200 = bitcast i8* %199 to <16 x i8>*
  store <16 x i8> %197, <16 x i8>* %200, align 1, !alias.scope !21, !noalias !18
  %201 = or i64 %178, 64
  %202 = getelementptr i8, i8* %148, i64 %201
  %203 = getelementptr i8, i8* %143, i64 %201
  %204 = bitcast i8* %202 to <16 x i8>*
  %205 = load <16 x i8>, <16 x i8>* %204, align 1, !alias.scope !18
  %206 = getelementptr i8, i8* %202, i64 16
  %207 = bitcast i8* %206 to <16 x i8>*
  %208 = load <16 x i8>, <16 x i8>* %207, align 1, !alias.scope !18
  %209 = bitcast i8* %203 to <16 x i8>*
  store <16 x i8> %205, <16 x i8>* %209, align 1, !alias.scope !21, !noalias !18
  %210 = getelementptr i8, i8* %203, i64 16
  %211 = bitcast i8* %210 to <16 x i8>*
  store <16 x i8> %208, <16 x i8>* %211, align 1, !alias.scope !21, !noalias !18
  %212 = or i64 %178, 96
  %213 = getelementptr i8, i8* %148, i64 %212
  %214 = getelementptr i8, i8* %143, i64 %212
  %215 = bitcast i8* %213 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1, !alias.scope !18
  %217 = getelementptr i8, i8* %213, i64 16
  %218 = bitcast i8* %217 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1, !alias.scope !18
  %220 = bitcast i8* %214 to <16 x i8>*
  store <16 x i8> %216, <16 x i8>* %220, align 1, !alias.scope !21, !noalias !18
  %221 = getelementptr i8, i8* %214, i64 16
  %222 = bitcast i8* %221 to <16 x i8>*
  store <16 x i8> %219, <16 x i8>* %222, align 1, !alias.scope !21, !noalias !18
  %223 = add i64 %178, 128
  %224 = add i64 %179, -4
  %225 = icmp eq i64 %224, 0
  br i1 %225, label %226, label %177, !llvm.loop !23

226:                                              ; preds = %177, %166
  %227 = phi i64 [ 0, %166 ], [ %223, %177 ]
  %228 = icmp eq i64 %173, 0
  br i1 %228, label %245, label %229

229:                                              ; preds = %226, %229
  %230 = phi i64 [ %242, %229 ], [ %227, %226 ]
  %231 = phi i64 [ %243, %229 ], [ %173, %226 ]
  %232 = getelementptr i8, i8* %148, i64 %230
  %233 = getelementptr i8, i8* %143, i64 %230
  %234 = bitcast i8* %232 to <16 x i8>*
  %235 = load <16 x i8>, <16 x i8>* %234, align 1, !alias.scope !18
  %236 = getelementptr i8, i8* %232, i64 16
  %237 = bitcast i8* %236 to <16 x i8>*
  %238 = load <16 x i8>, <16 x i8>* %237, align 1, !alias.scope !18
  %239 = bitcast i8* %233 to <16 x i8>*
  store <16 x i8> %235, <16 x i8>* %239, align 1, !alias.scope !21, !noalias !18
  %240 = getelementptr i8, i8* %233, i64 16
  %241 = bitcast i8* %240 to <16 x i8>*
  store <16 x i8> %238, <16 x i8>* %241, align 1, !alias.scope !21, !noalias !18
  %242 = add i64 %230, 32
  %243 = add i64 %231, -1
  %244 = icmp eq i64 %243, 0
  br i1 %244, label %245, label %229, !llvm.loop !24

245:                                              ; preds = %229, %226
  %246 = icmp eq i64 %167, %153
  br i1 %246, label %247, label %155

247:                                              ; preds = %256, %245
  %248 = phi i8* [ %169, %245 ], [ %261, %256 ]
  %249 = ptrtoint i8* %248 to i64
  br label %250

250:                                              ; preds = %247, %141
  %251 = phi i64 [ %249, %247 ], [ %142, %141 ]
  store i64 %251, i64* %20, align 8
  %252 = icmp eq i64 %147, 0
  br i1 %252, label %263, label %253

253:                                              ; preds = %250
  %254 = sub i64 0, %147
  %255 = getelementptr inbounds i8, i8* %143, i64 %254
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %255, i8* align 1 %1, i64 %147, i1 false) #12
  br label %263

256:                                              ; preds = %155, %256
  %257 = phi i8* [ %260, %256 ], [ %156, %155 ]
  %258 = phi i8* [ %261, %256 ], [ %157, %155 ]
  %259 = load i8, i8* %257, align 1
  store i8 %259, i8* %258, align 1
  %260 = getelementptr inbounds i8, i8* %257, i64 1
  %261 = getelementptr inbounds i8, i8* %258, i64 1
  %262 = icmp eq i8* %260, %16
  br i1 %262, label %247, label %256, !llvm.loop !25

263:                                              ; preds = %250, %253
  %264 = icmp eq i8* %144, %2
  br i1 %264, label %618, label %265

265:                                              ; preds = %263
  %266 = sub i64 0, %6
  %267 = getelementptr i8, i8* %144, i64 %266
  %268 = ptrtoint i8* %267 to i64
  %269 = icmp ult i8* %267, inttoptr (i64 32 to i8*)
  br i1 %269, label %358, label %270

270:                                              ; preds = %265
  %271 = ptrtoint i8* %1 to i64
  %272 = sub i64 %271, %6
  %273 = getelementptr i8, i8* %144, i64 %272
  %274 = icmp ugt i8* %144, %1
  %275 = icmp ugt i8* %273, %2
  %276 = and i1 %274, %275
  br i1 %276, label %358, label %277

277:                                              ; preds = %270
  %278 = and i64 %268, -32
  %279 = getelementptr i8, i8* %1, i64 %278
  %280 = getelementptr i8, i8* %2, i64 %278
  %281 = add i64 %278, -32
  %282 = lshr exact i64 %281, 5
  %283 = add nuw nsw i64 %282, 1
  %284 = and i64 %283, 3
  %285 = icmp ult i64 %281, 96
  br i1 %285, label %337, label %286

286:                                              ; preds = %277
  %287 = sub nsw i64 %283, %284
  br label %288

288:                                              ; preds = %288, %286
  %289 = phi i64 [ 0, %286 ], [ %334, %288 ]
  %290 = phi i64 [ %287, %286 ], [ %335, %288 ]
  %291 = getelementptr i8, i8* %1, i64 %289
  %292 = getelementptr i8, i8* %2, i64 %289
  %293 = bitcast i8* %292 to <16 x i8>*
  %294 = load <16 x i8>, <16 x i8>* %293, align 1, !alias.scope !26
  %295 = getelementptr i8, i8* %292, i64 16
  %296 = bitcast i8* %295 to <16 x i8>*
  %297 = load <16 x i8>, <16 x i8>* %296, align 1, !alias.scope !26
  %298 = bitcast i8* %291 to <16 x i8>*
  store <16 x i8> %294, <16 x i8>* %298, align 1, !alias.scope !29, !noalias !26
  %299 = getelementptr i8, i8* %291, i64 16
  %300 = bitcast i8* %299 to <16 x i8>*
  store <16 x i8> %297, <16 x i8>* %300, align 1, !alias.scope !29, !noalias !26
  %301 = or i64 %289, 32
  %302 = getelementptr i8, i8* %1, i64 %301
  %303 = getelementptr i8, i8* %2, i64 %301
  %304 = bitcast i8* %303 to <16 x i8>*
  %305 = load <16 x i8>, <16 x i8>* %304, align 1, !alias.scope !26
  %306 = getelementptr i8, i8* %303, i64 16
  %307 = bitcast i8* %306 to <16 x i8>*
  %308 = load <16 x i8>, <16 x i8>* %307, align 1, !alias.scope !26
  %309 = bitcast i8* %302 to <16 x i8>*
  store <16 x i8> %305, <16 x i8>* %309, align 1, !alias.scope !29, !noalias !26
  %310 = getelementptr i8, i8* %302, i64 16
  %311 = bitcast i8* %310 to <16 x i8>*
  store <16 x i8> %308, <16 x i8>* %311, align 1, !alias.scope !29, !noalias !26
  %312 = or i64 %289, 64
  %313 = getelementptr i8, i8* %1, i64 %312
  %314 = getelementptr i8, i8* %2, i64 %312
  %315 = bitcast i8* %314 to <16 x i8>*
  %316 = load <16 x i8>, <16 x i8>* %315, align 1, !alias.scope !26
  %317 = getelementptr i8, i8* %314, i64 16
  %318 = bitcast i8* %317 to <16 x i8>*
  %319 = load <16 x i8>, <16 x i8>* %318, align 1, !alias.scope !26
  %320 = bitcast i8* %313 to <16 x i8>*
  store <16 x i8> %316, <16 x i8>* %320, align 1, !alias.scope !29, !noalias !26
  %321 = getelementptr i8, i8* %313, i64 16
  %322 = bitcast i8* %321 to <16 x i8>*
  store <16 x i8> %319, <16 x i8>* %322, align 1, !alias.scope !29, !noalias !26
  %323 = or i64 %289, 96
  %324 = getelementptr i8, i8* %1, i64 %323
  %325 = getelementptr i8, i8* %2, i64 %323
  %326 = bitcast i8* %325 to <16 x i8>*
  %327 = load <16 x i8>, <16 x i8>* %326, align 1, !alias.scope !26
  %328 = getelementptr i8, i8* %325, i64 16
  %329 = bitcast i8* %328 to <16 x i8>*
  %330 = load <16 x i8>, <16 x i8>* %329, align 1, !alias.scope !26
  %331 = bitcast i8* %324 to <16 x i8>*
  store <16 x i8> %327, <16 x i8>* %331, align 1, !alias.scope !29, !noalias !26
  %332 = getelementptr i8, i8* %324, i64 16
  %333 = bitcast i8* %332 to <16 x i8>*
  store <16 x i8> %330, <16 x i8>* %333, align 1, !alias.scope !29, !noalias !26
  %334 = add i64 %289, 128
  %335 = add i64 %290, -4
  %336 = icmp eq i64 %335, 0
  br i1 %336, label %337, label %288, !llvm.loop !31

337:                                              ; preds = %288, %277
  %338 = phi i64 [ 0, %277 ], [ %334, %288 ]
  %339 = icmp eq i64 %284, 0
  br i1 %339, label %356, label %340

340:                                              ; preds = %337, %340
  %341 = phi i64 [ %353, %340 ], [ %338, %337 ]
  %342 = phi i64 [ %354, %340 ], [ %284, %337 ]
  %343 = getelementptr i8, i8* %1, i64 %341
  %344 = getelementptr i8, i8* %2, i64 %341
  %345 = bitcast i8* %344 to <16 x i8>*
  %346 = load <16 x i8>, <16 x i8>* %345, align 1, !alias.scope !26
  %347 = getelementptr i8, i8* %344, i64 16
  %348 = bitcast i8* %347 to <16 x i8>*
  %349 = load <16 x i8>, <16 x i8>* %348, align 1, !alias.scope !26
  %350 = bitcast i8* %343 to <16 x i8>*
  store <16 x i8> %346, <16 x i8>* %350, align 1, !alias.scope !29, !noalias !26
  %351 = getelementptr i8, i8* %343, i64 16
  %352 = bitcast i8* %351 to <16 x i8>*
  store <16 x i8> %349, <16 x i8>* %352, align 1, !alias.scope !29, !noalias !26
  %353 = add i64 %341, 32
  %354 = add i64 %342, -1
  %355 = icmp eq i64 %354, 0
  br i1 %355, label %356, label %340, !llvm.loop !32

356:                                              ; preds = %340, %337
  %357 = icmp eq i64 %278, %268
  br i1 %357, label %618, label %358

358:                                              ; preds = %356, %270, %265
  %359 = phi i8* [ %1, %270 ], [ %1, %265 ], [ %279, %356 ]
  %360 = phi i8* [ %2, %270 ], [ %2, %265 ], [ %280, %356 ]
  br label %361

361:                                              ; preds = %358, %361
  %362 = phi i8* [ %366, %361 ], [ %359, %358 ]
  %363 = phi i8* [ %365, %361 ], [ %360, %358 ]
  %364 = load i8, i8* %363, align 1
  store i8 %364, i8* %362, align 1
  %365 = getelementptr inbounds i8, i8* %363, i64 1
  %366 = getelementptr inbounds i8, i8* %362, i64 1
  %367 = icmp eq i8* %365, %144
  br i1 %367, label %618, label %361, !llvm.loop !33

368:                                              ; preds = %11
  %369 = bitcast %"class.std::__1::vector"* %0 to i64*
  %370 = load i64, i64* %369, align 8
  %371 = sub i64 %17, %370
  %372 = add i64 %371, %9
  %373 = icmp slt i64 %372, 0
  br i1 %373, label %374, label %376

374:                                              ; preds = %368
  %375 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %375) #13
  unreachable

376:                                              ; preds = %368
  %377 = sub i64 %14, %370
  %378 = icmp ult i64 %377, 4611686018427387903
  br i1 %378, label %381, label %379

379:                                              ; preds = %376
  %380 = sub i64 %5, %370
  br label %387

381:                                              ; preds = %376
  %382 = shl i64 %377, 1
  %383 = icmp ult i64 %382, %372
  %384 = select i1 %383, i64 %372, i64 %382
  %385 = sub i64 %5, %370
  %386 = icmp eq i64 %384, 0
  br i1 %386, label %391, label %387

387:                                              ; preds = %379, %381
  %388 = phi i64 [ %380, %379 ], [ %385, %381 ]
  %389 = phi i64 [ 9223372036854775807, %379 ], [ %384, %381 ]
  %390 = tail call i8* @_Znwm(i64 %389) #11
  br label %391

391:                                              ; preds = %381, %387
  %392 = phi i64 [ %388, %387 ], [ %385, %381 ]
  %393 = phi i64 [ %389, %387 ], [ 0, %381 ]
  %394 = phi i8* [ %390, %387 ], [ null, %381 ]
  %395 = getelementptr inbounds i8, i8* %394, i64 %392
  %396 = getelementptr inbounds i8, i8* %394, i64 %393
  %397 = getelementptr inbounds i8, i8* %395, i64 %9
  %398 = icmp ult i64 %9, 32
  br i1 %398, label %484, label %399

399:                                              ; preds = %391
  %400 = icmp ult i8* %395, %3
  %401 = icmp ugt i8* %397, %2
  %402 = and i1 %400, %401
  br i1 %402, label %484, label %403

403:                                              ; preds = %399
  %404 = and i64 %9, -32
  %405 = getelementptr i8, i8* %395, i64 %404
  %406 = getelementptr i8, i8* %2, i64 %404
  %407 = add i64 %404, -32
  %408 = lshr exact i64 %407, 5
  %409 = add nuw nsw i64 %408, 1
  %410 = and i64 %409, 3
  %411 = icmp ult i64 %407, 96
  br i1 %411, label %463, label %412

412:                                              ; preds = %403
  %413 = sub nsw i64 %409, %410
  br label %414

414:                                              ; preds = %414, %412
  %415 = phi i64 [ 0, %412 ], [ %460, %414 ]
  %416 = phi i64 [ %413, %412 ], [ %461, %414 ]
  %417 = getelementptr i8, i8* %395, i64 %415
  %418 = getelementptr i8, i8* %2, i64 %415
  %419 = bitcast i8* %418 to <16 x i8>*
  %420 = load <16 x i8>, <16 x i8>* %419, align 1, !alias.scope !34
  %421 = getelementptr i8, i8* %418, i64 16
  %422 = bitcast i8* %421 to <16 x i8>*
  %423 = load <16 x i8>, <16 x i8>* %422, align 1, !alias.scope !34
  %424 = bitcast i8* %417 to <16 x i8>*
  store <16 x i8> %420, <16 x i8>* %424, align 1, !alias.scope !37, !noalias !34
  %425 = getelementptr i8, i8* %417, i64 16
  %426 = bitcast i8* %425 to <16 x i8>*
  store <16 x i8> %423, <16 x i8>* %426, align 1, !alias.scope !37, !noalias !34
  %427 = or i64 %415, 32
  %428 = getelementptr i8, i8* %395, i64 %427
  %429 = getelementptr i8, i8* %2, i64 %427
  %430 = bitcast i8* %429 to <16 x i8>*
  %431 = load <16 x i8>, <16 x i8>* %430, align 1, !alias.scope !34
  %432 = getelementptr i8, i8* %429, i64 16
  %433 = bitcast i8* %432 to <16 x i8>*
  %434 = load <16 x i8>, <16 x i8>* %433, align 1, !alias.scope !34
  %435 = bitcast i8* %428 to <16 x i8>*
  store <16 x i8> %431, <16 x i8>* %435, align 1, !alias.scope !37, !noalias !34
  %436 = getelementptr i8, i8* %428, i64 16
  %437 = bitcast i8* %436 to <16 x i8>*
  store <16 x i8> %434, <16 x i8>* %437, align 1, !alias.scope !37, !noalias !34
  %438 = or i64 %415, 64
  %439 = getelementptr i8, i8* %395, i64 %438
  %440 = getelementptr i8, i8* %2, i64 %438
  %441 = bitcast i8* %440 to <16 x i8>*
  %442 = load <16 x i8>, <16 x i8>* %441, align 1, !alias.scope !34
  %443 = getelementptr i8, i8* %440, i64 16
  %444 = bitcast i8* %443 to <16 x i8>*
  %445 = load <16 x i8>, <16 x i8>* %444, align 1, !alias.scope !34
  %446 = bitcast i8* %439 to <16 x i8>*
  store <16 x i8> %442, <16 x i8>* %446, align 1, !alias.scope !37, !noalias !34
  %447 = getelementptr i8, i8* %439, i64 16
  %448 = bitcast i8* %447 to <16 x i8>*
  store <16 x i8> %445, <16 x i8>* %448, align 1, !alias.scope !37, !noalias !34
  %449 = or i64 %415, 96
  %450 = getelementptr i8, i8* %395, i64 %449
  %451 = getelementptr i8, i8* %2, i64 %449
  %452 = bitcast i8* %451 to <16 x i8>*
  %453 = load <16 x i8>, <16 x i8>* %452, align 1, !alias.scope !34
  %454 = getelementptr i8, i8* %451, i64 16
  %455 = bitcast i8* %454 to <16 x i8>*
  %456 = load <16 x i8>, <16 x i8>* %455, align 1, !alias.scope !34
  %457 = bitcast i8* %450 to <16 x i8>*
  store <16 x i8> %453, <16 x i8>* %457, align 1, !alias.scope !37, !noalias !34
  %458 = getelementptr i8, i8* %450, i64 16
  %459 = bitcast i8* %458 to <16 x i8>*
  store <16 x i8> %456, <16 x i8>* %459, align 1, !alias.scope !37, !noalias !34
  %460 = add i64 %415, 128
  %461 = add i64 %416, -4
  %462 = icmp eq i64 %461, 0
  br i1 %462, label %463, label %414, !llvm.loop !39

463:                                              ; preds = %414, %403
  %464 = phi i64 [ 0, %403 ], [ %460, %414 ]
  %465 = icmp eq i64 %410, 0
  br i1 %465, label %482, label %466

466:                                              ; preds = %463, %466
  %467 = phi i64 [ %479, %466 ], [ %464, %463 ]
  %468 = phi i64 [ %480, %466 ], [ %410, %463 ]
  %469 = getelementptr i8, i8* %395, i64 %467
  %470 = getelementptr i8, i8* %2, i64 %467
  %471 = bitcast i8* %470 to <16 x i8>*
  %472 = load <16 x i8>, <16 x i8>* %471, align 1, !alias.scope !34
  %473 = getelementptr i8, i8* %470, i64 16
  %474 = bitcast i8* %473 to <16 x i8>*
  %475 = load <16 x i8>, <16 x i8>* %474, align 1, !alias.scope !34
  %476 = bitcast i8* %469 to <16 x i8>*
  store <16 x i8> %472, <16 x i8>* %476, align 1, !alias.scope !37, !noalias !34
  %477 = getelementptr i8, i8* %469, i64 16
  %478 = bitcast i8* %477 to <16 x i8>*
  store <16 x i8> %475, <16 x i8>* %478, align 1, !alias.scope !37, !noalias !34
  %479 = add i64 %467, 32
  %480 = add i64 %468, -1
  %481 = icmp eq i64 %480, 0
  br i1 %481, label %482, label %466, !llvm.loop !40

482:                                              ; preds = %466, %463
  %483 = icmp eq i64 %9, %404
  br i1 %483, label %494, label %484

484:                                              ; preds = %482, %399, %391
  %485 = phi i8* [ %395, %399 ], [ %395, %391 ], [ %405, %482 ]
  %486 = phi i8* [ %2, %399 ], [ %2, %391 ], [ %406, %482 ]
  br label %487

487:                                              ; preds = %484, %487
  %488 = phi i8* [ %491, %487 ], [ %485, %484 ]
  %489 = phi i8* [ %492, %487 ], [ %486, %484 ]
  %490 = load i8, i8* %489, align 1
  store i8 %490, i8* %488, align 1
  %491 = getelementptr inbounds i8, i8* %488, i64 1
  %492 = getelementptr inbounds i8, i8* %489, i64 1
  %493 = icmp eq i8* %397, %491
  br i1 %493, label %494, label %487, !llvm.loop !41

494:                                              ; preds = %487, %482
  %495 = ptrtoint i8* %396 to i64
  %496 = load i8*, i8** %7, align 8
  %497 = ptrtoint i8* %496 to i64
  %498 = sub i64 %5, %497
  %499 = sub i64 0, %498
  %500 = getelementptr inbounds i8, i8* %395, i64 %499
  %501 = ptrtoint i8* %500 to i64
  %502 = icmp sgt i64 %498, 0
  br i1 %502, label %503, label %504

503:                                              ; preds = %494
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %500, i8* align 1 %496, i64 %498, i1 false) #12
  br label %504

504:                                              ; preds = %503, %494
  %505 = load i8*, i8** %15, align 8
  %506 = icmp eq i8* %505, %1
  br i1 %506, label %612, label %507

507:                                              ; preds = %504
  %508 = ptrtoint i8* %505 to i64
  %509 = sub i64 %508, %5
  %510 = icmp ult i64 %509, 32
  br i1 %510, label %602, label %511

511:                                              ; preds = %507
  %512 = add i64 %392, %8
  %513 = sub i64 %512, %5
  %514 = sub i64 %513, %6
  %515 = getelementptr i8, i8* %505, i64 %514
  %516 = ptrtoint i8* %515 to i64
  %517 = getelementptr i8, i8* %394, i64 %516
  %518 = icmp ult i8* %397, %505
  %519 = icmp ugt i8* %517, %1
  %520 = and i1 %518, %519
  br i1 %520, label %602, label %521

521:                                              ; preds = %511
  %522 = and i64 %509, -32
  %523 = getelementptr i8, i8* %397, i64 %522
  %524 = getelementptr i8, i8* %1, i64 %522
  %525 = add i64 %522, -32
  %526 = lshr exact i64 %525, 5
  %527 = add nuw nsw i64 %526, 1
  %528 = and i64 %527, 3
  %529 = icmp ult i64 %525, 96
  br i1 %529, label %581, label %530

530:                                              ; preds = %521
  %531 = sub nsw i64 %527, %528
  br label %532

532:                                              ; preds = %532, %530
  %533 = phi i64 [ 0, %530 ], [ %578, %532 ]
  %534 = phi i64 [ %531, %530 ], [ %579, %532 ]
  %535 = getelementptr i8, i8* %397, i64 %533
  %536 = getelementptr i8, i8* %1, i64 %533
  %537 = bitcast i8* %536 to <16 x i8>*
  %538 = load <16 x i8>, <16 x i8>* %537, align 1, !alias.scope !42
  %539 = getelementptr i8, i8* %536, i64 16
  %540 = bitcast i8* %539 to <16 x i8>*
  %541 = load <16 x i8>, <16 x i8>* %540, align 1, !alias.scope !42
  %542 = bitcast i8* %535 to <16 x i8>*
  store <16 x i8> %538, <16 x i8>* %542, align 1, !alias.scope !45, !noalias !42
  %543 = getelementptr i8, i8* %535, i64 16
  %544 = bitcast i8* %543 to <16 x i8>*
  store <16 x i8> %541, <16 x i8>* %544, align 1, !alias.scope !45, !noalias !42
  %545 = or i64 %533, 32
  %546 = getelementptr i8, i8* %397, i64 %545
  %547 = getelementptr i8, i8* %1, i64 %545
  %548 = bitcast i8* %547 to <16 x i8>*
  %549 = load <16 x i8>, <16 x i8>* %548, align 1, !alias.scope !42
  %550 = getelementptr i8, i8* %547, i64 16
  %551 = bitcast i8* %550 to <16 x i8>*
  %552 = load <16 x i8>, <16 x i8>* %551, align 1, !alias.scope !42
  %553 = bitcast i8* %546 to <16 x i8>*
  store <16 x i8> %549, <16 x i8>* %553, align 1, !alias.scope !45, !noalias !42
  %554 = getelementptr i8, i8* %546, i64 16
  %555 = bitcast i8* %554 to <16 x i8>*
  store <16 x i8> %552, <16 x i8>* %555, align 1, !alias.scope !45, !noalias !42
  %556 = or i64 %533, 64
  %557 = getelementptr i8, i8* %397, i64 %556
  %558 = getelementptr i8, i8* %1, i64 %556
  %559 = bitcast i8* %558 to <16 x i8>*
  %560 = load <16 x i8>, <16 x i8>* %559, align 1, !alias.scope !42
  %561 = getelementptr i8, i8* %558, i64 16
  %562 = bitcast i8* %561 to <16 x i8>*
  %563 = load <16 x i8>, <16 x i8>* %562, align 1, !alias.scope !42
  %564 = bitcast i8* %557 to <16 x i8>*
  store <16 x i8> %560, <16 x i8>* %564, align 1, !alias.scope !45, !noalias !42
  %565 = getelementptr i8, i8* %557, i64 16
  %566 = bitcast i8* %565 to <16 x i8>*
  store <16 x i8> %563, <16 x i8>* %566, align 1, !alias.scope !45, !noalias !42
  %567 = or i64 %533, 96
  %568 = getelementptr i8, i8* %397, i64 %567
  %569 = getelementptr i8, i8* %1, i64 %567
  %570 = bitcast i8* %569 to <16 x i8>*
  %571 = load <16 x i8>, <16 x i8>* %570, align 1, !alias.scope !42
  %572 = getelementptr i8, i8* %569, i64 16
  %573 = bitcast i8* %572 to <16 x i8>*
  %574 = load <16 x i8>, <16 x i8>* %573, align 1, !alias.scope !42
  %575 = bitcast i8* %568 to <16 x i8>*
  store <16 x i8> %571, <16 x i8>* %575, align 1, !alias.scope !45, !noalias !42
  %576 = getelementptr i8, i8* %568, i64 16
  %577 = bitcast i8* %576 to <16 x i8>*
  store <16 x i8> %574, <16 x i8>* %577, align 1, !alias.scope !45, !noalias !42
  %578 = add i64 %533, 128
  %579 = add i64 %534, -4
  %580 = icmp eq i64 %579, 0
  br i1 %580, label %581, label %532, !llvm.loop !47

581:                                              ; preds = %532, %521
  %582 = phi i64 [ 0, %521 ], [ %578, %532 ]
  %583 = icmp eq i64 %528, 0
  br i1 %583, label %600, label %584

584:                                              ; preds = %581, %584
  %585 = phi i64 [ %597, %584 ], [ %582, %581 ]
  %586 = phi i64 [ %598, %584 ], [ %528, %581 ]
  %587 = getelementptr i8, i8* %397, i64 %585
  %588 = getelementptr i8, i8* %1, i64 %585
  %589 = bitcast i8* %588 to <16 x i8>*
  %590 = load <16 x i8>, <16 x i8>* %589, align 1, !alias.scope !42
  %591 = getelementptr i8, i8* %588, i64 16
  %592 = bitcast i8* %591 to <16 x i8>*
  %593 = load <16 x i8>, <16 x i8>* %592, align 1, !alias.scope !42
  %594 = bitcast i8* %587 to <16 x i8>*
  store <16 x i8> %590, <16 x i8>* %594, align 1, !alias.scope !45, !noalias !42
  %595 = getelementptr i8, i8* %587, i64 16
  %596 = bitcast i8* %595 to <16 x i8>*
  store <16 x i8> %593, <16 x i8>* %596, align 1, !alias.scope !45, !noalias !42
  %597 = add i64 %585, 32
  %598 = add i64 %586, -1
  %599 = icmp eq i64 %598, 0
  br i1 %599, label %600, label %584, !llvm.loop !48

600:                                              ; preds = %584, %581
  %601 = icmp eq i64 %509, %522
  br i1 %601, label %612, label %602

602:                                              ; preds = %600, %511, %507
  %603 = phi i8* [ %397, %511 ], [ %397, %507 ], [ %523, %600 ]
  %604 = phi i8* [ %1, %511 ], [ %1, %507 ], [ %524, %600 ]
  br label %605

605:                                              ; preds = %602, %605
  %606 = phi i8* [ %610, %605 ], [ %603, %602 ]
  %607 = phi i8* [ %609, %605 ], [ %604, %602 ]
  %608 = load i8, i8* %607, align 1
  store i8 %608, i8* %606, align 1
  %609 = getelementptr inbounds i8, i8* %607, i64 1
  %610 = getelementptr inbounds i8, i8* %606, i64 1
  %611 = icmp eq i8* %609, %505
  br i1 %611, label %612, label %605, !llvm.loop !49

612:                                              ; preds = %605, %600, %504
  %613 = phi i8* [ %397, %504 ], [ %523, %600 ], [ %610, %605 ]
  %614 = ptrtoint i8* %613 to i64
  %615 = load i8*, i8** %7, align 8
  store i64 %501, i64* %369, align 8
  store i64 %614, i64* %20, align 8
  store i64 %495, i64* %13, align 8
  %616 = icmp eq i8* %615, null
  br i1 %616, label %618, label %617

617:                                              ; preds = %612
  tail call void @_ZdlPv(i8* nonnull %615) #11
  br label %618

618:                                              ; preds = %361, %356, %617, %612, %136, %263, %4
  %619 = phi i8* [ %1, %4 ], [ %1, %263 ], [ %1, %136 ], [ %395, %612 ], [ %395, %617 ], [ %1, %356 ], [ %1, %361 ]
  ret i8* %619
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #8

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #9

declare void @_ZNSt3__19to_stringEl(%"class.std::__1::basic_string"* sret, i64) local_unnamed_addr #10

declare void @_ZN8v8_crdtp4json8platform6DToStrEd(%"class.std::__1::basic_string"* sret, double) local_unnamed_addr #10

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"*, i8*) local_unnamed_addr #10

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertINS_11__wrap_iterIPKcEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS5_IPhEEE4typeENS5_IPKhEESA_SA_(%"class.std::__1::vector"*, i8*, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint i8* %1 to i64
  %6 = ptrtoint i8* %2 to i64
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %8 = ptrtoint i8* %3 to i64
  %9 = sub i64 %8, %6
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %11, label %618

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %13 = bitcast i8** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = ptrtoint i8* %16 to i64
  %18 = sub i64 %14, %17
  %19 = icmp sgt i64 %9, %18
  %20 = bitcast i8** %15 to i64*
  br i1 %19, label %368, label %21

21:                                               ; preds = %11
  %22 = sub i64 %17, %5
  %23 = icmp sgt i64 %9, %22
  br i1 %23, label %24, label %141

24:                                               ; preds = %21
  %25 = getelementptr inbounds i8, i8* %2, i64 %22
  %26 = icmp eq i8* %25, %3
  br i1 %26, label %136, label %27

27:                                               ; preds = %24
  %28 = sub i64 %5, %6
  %29 = sub i64 %28, %17
  %30 = getelementptr i8, i8* %3, i64 %29
  %31 = ptrtoint i8* %30 to i64
  %32 = icmp ult i8* %30, inttoptr (i64 32 to i8*)
  br i1 %32, label %123, label %33

33:                                               ; preds = %27
  %34 = sub i64 %5, %6
  %35 = sub i64 %34, %17
  %36 = getelementptr i8, i8* %3, i64 %35
  %37 = ptrtoint i8* %36 to i64
  %38 = getelementptr i8, i8* %16, i64 %37
  %39 = icmp ult i8* %16, %3
  %40 = icmp ult i8* %25, %38
  %41 = and i1 %39, %40
  br i1 %41, label %123, label %42

42:                                               ; preds = %33
  %43 = and i64 %31, -32
  %44 = getelementptr i8, i8* %16, i64 %43
  %45 = getelementptr i8, i8* %25, i64 %43
  %46 = add i64 %43, -32
  %47 = lshr exact i64 %46, 5
  %48 = add nuw nsw i64 %47, 1
  %49 = and i64 %48, 3
  %50 = icmp ult i64 %46, 96
  br i1 %50, label %102, label %51

51:                                               ; preds = %42
  %52 = sub nsw i64 %48, %49
  br label %53

53:                                               ; preds = %53, %51
  %54 = phi i64 [ 0, %51 ], [ %99, %53 ]
  %55 = phi i64 [ %52, %51 ], [ %100, %53 ]
  %56 = getelementptr i8, i8* %16, i64 %54
  %57 = getelementptr i8, i8* %25, i64 %54
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1, !alias.scope !50
  %60 = getelementptr i8, i8* %57, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1, !alias.scope !50
  %63 = bitcast i8* %56 to <16 x i8>*
  store <16 x i8> %59, <16 x i8>* %63, align 1, !alias.scope !53, !noalias !50
  %64 = getelementptr i8, i8* %56, i64 16
  %65 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> %62, <16 x i8>* %65, align 1, !alias.scope !53, !noalias !50
  %66 = or i64 %54, 32
  %67 = getelementptr i8, i8* %16, i64 %66
  %68 = getelementptr i8, i8* %25, i64 %66
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1, !alias.scope !50
  %71 = getelementptr i8, i8* %68, i64 16
  %72 = bitcast i8* %71 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1, !alias.scope !50
  %74 = bitcast i8* %67 to <16 x i8>*
  store <16 x i8> %70, <16 x i8>* %74, align 1, !alias.scope !53, !noalias !50
  %75 = getelementptr i8, i8* %67, i64 16
  %76 = bitcast i8* %75 to <16 x i8>*
  store <16 x i8> %73, <16 x i8>* %76, align 1, !alias.scope !53, !noalias !50
  %77 = or i64 %54, 64
  %78 = getelementptr i8, i8* %16, i64 %77
  %79 = getelementptr i8, i8* %25, i64 %77
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1, !alias.scope !50
  %82 = getelementptr i8, i8* %79, i64 16
  %83 = bitcast i8* %82 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 1, !alias.scope !50
  %85 = bitcast i8* %78 to <16 x i8>*
  store <16 x i8> %81, <16 x i8>* %85, align 1, !alias.scope !53, !noalias !50
  %86 = getelementptr i8, i8* %78, i64 16
  %87 = bitcast i8* %86 to <16 x i8>*
  store <16 x i8> %84, <16 x i8>* %87, align 1, !alias.scope !53, !noalias !50
  %88 = or i64 %54, 96
  %89 = getelementptr i8, i8* %16, i64 %88
  %90 = getelementptr i8, i8* %25, i64 %88
  %91 = bitcast i8* %90 to <16 x i8>*
  %92 = load <16 x i8>, <16 x i8>* %91, align 1, !alias.scope !50
  %93 = getelementptr i8, i8* %90, i64 16
  %94 = bitcast i8* %93 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1, !alias.scope !50
  %96 = bitcast i8* %89 to <16 x i8>*
  store <16 x i8> %92, <16 x i8>* %96, align 1, !alias.scope !53, !noalias !50
  %97 = getelementptr i8, i8* %89, i64 16
  %98 = bitcast i8* %97 to <16 x i8>*
  store <16 x i8> %95, <16 x i8>* %98, align 1, !alias.scope !53, !noalias !50
  %99 = add i64 %54, 128
  %100 = add i64 %55, -4
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %53, !llvm.loop !55

102:                                              ; preds = %53, %42
  %103 = phi i64 [ 0, %42 ], [ %99, %53 ]
  %104 = icmp eq i64 %49, 0
  br i1 %104, label %121, label %105

105:                                              ; preds = %102, %105
  %106 = phi i64 [ %118, %105 ], [ %103, %102 ]
  %107 = phi i64 [ %119, %105 ], [ %49, %102 ]
  %108 = getelementptr i8, i8* %16, i64 %106
  %109 = getelementptr i8, i8* %25, i64 %106
  %110 = bitcast i8* %109 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1, !alias.scope !50
  %112 = getelementptr i8, i8* %109, i64 16
  %113 = bitcast i8* %112 to <16 x i8>*
  %114 = load <16 x i8>, <16 x i8>* %113, align 1, !alias.scope !50
  %115 = bitcast i8* %108 to <16 x i8>*
  store <16 x i8> %111, <16 x i8>* %115, align 1, !alias.scope !53, !noalias !50
  %116 = getelementptr i8, i8* %108, i64 16
  %117 = bitcast i8* %116 to <16 x i8>*
  store <16 x i8> %114, <16 x i8>* %117, align 1, !alias.scope !53, !noalias !50
  %118 = add i64 %106, 32
  %119 = add i64 %107, -1
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %121, label %105, !llvm.loop !56

121:                                              ; preds = %105, %102
  %122 = icmp eq i64 %43, %31
  br i1 %122, label %133, label %123

123:                                              ; preds = %121, %33, %27
  %124 = phi i8* [ %16, %33 ], [ %16, %27 ], [ %44, %121 ]
  %125 = phi i8* [ %25, %33 ], [ %25, %27 ], [ %45, %121 ]
  br label %126

126:                                              ; preds = %123, %126
  %127 = phi i8* [ %131, %126 ], [ %124, %123 ]
  %128 = phi i8* [ %130, %126 ], [ %125, %123 ]
  %129 = load i8, i8* %128, align 1
  store i8 %129, i8* %127, align 1
  %130 = getelementptr inbounds i8, i8* %128, i64 1
  %131 = getelementptr inbounds i8, i8* %127, i64 1
  %132 = icmp eq i8* %130, %3
  br i1 %132, label %133, label %126, !llvm.loop !57

133:                                              ; preds = %126, %121
  %134 = phi i8* [ %44, %121 ], [ %131, %126 ]
  %135 = ptrtoint i8* %134 to i64
  br label %136

136:                                              ; preds = %133, %24
  %137 = phi i64 [ %17, %24 ], [ %135, %133 ]
  store i64 %137, i64* %20, align 8
  %138 = icmp sgt i64 %22, 0
  br i1 %138, label %139, label %618

139:                                              ; preds = %136
  %140 = inttoptr i64 %137 to i8*
  br label %141

141:                                              ; preds = %139, %21
  %142 = phi i64 [ %137, %139 ], [ %17, %21 ]
  %143 = phi i8* [ %140, %139 ], [ %16, %21 ]
  %144 = phi i8* [ %25, %139 ], [ %3, %21 ]
  %145 = getelementptr inbounds i8, i8* %1, i64 %9
  %146 = ptrtoint i8* %145 to i64
  %147 = sub i64 %142, %146
  %148 = getelementptr inbounds i8, i8* %1, i64 %147
  %149 = icmp ult i8* %148, %16
  br i1 %149, label %150, label %250

150:                                              ; preds = %141
  %151 = sub i64 %9, %142
  %152 = getelementptr i8, i8* %16, i64 %151
  %153 = ptrtoint i8* %152 to i64
  %154 = icmp ult i8* %152, inttoptr (i64 32 to i8*)
  br i1 %154, label %155, label %158

155:                                              ; preds = %245, %158, %150
  %156 = phi i8* [ %148, %158 ], [ %148, %150 ], [ %168, %245 ]
  %157 = phi i8* [ %143, %158 ], [ %143, %150 ], [ %169, %245 ]
  br label %256

158:                                              ; preds = %150
  %159 = sub i64 %9, %142
  %160 = getelementptr i8, i8* %16, i64 %159
  %161 = ptrtoint i8* %160 to i64
  %162 = getelementptr i8, i8* %143, i64 %161
  %163 = icmp ult i8* %143, %16
  %164 = icmp ult i8* %148, %162
  %165 = and i1 %163, %164
  br i1 %165, label %155, label %166

166:                                              ; preds = %158
  %167 = and i64 %153, -32
  %168 = getelementptr i8, i8* %148, i64 %167
  %169 = getelementptr i8, i8* %143, i64 %167
  %170 = add i64 %167, -32
  %171 = lshr exact i64 %170, 5
  %172 = add nuw nsw i64 %171, 1
  %173 = and i64 %172, 3
  %174 = icmp ult i64 %170, 96
  br i1 %174, label %226, label %175

175:                                              ; preds = %166
  %176 = sub nsw i64 %172, %173
  br label %177

177:                                              ; preds = %177, %175
  %178 = phi i64 [ 0, %175 ], [ %223, %177 ]
  %179 = phi i64 [ %176, %175 ], [ %224, %177 ]
  %180 = getelementptr i8, i8* %148, i64 %178
  %181 = getelementptr i8, i8* %143, i64 %178
  %182 = bitcast i8* %180 to <16 x i8>*
  %183 = load <16 x i8>, <16 x i8>* %182, align 1, !alias.scope !58
  %184 = getelementptr i8, i8* %180, i64 16
  %185 = bitcast i8* %184 to <16 x i8>*
  %186 = load <16 x i8>, <16 x i8>* %185, align 1, !alias.scope !58
  %187 = bitcast i8* %181 to <16 x i8>*
  store <16 x i8> %183, <16 x i8>* %187, align 1, !alias.scope !61, !noalias !58
  %188 = getelementptr i8, i8* %181, i64 16
  %189 = bitcast i8* %188 to <16 x i8>*
  store <16 x i8> %186, <16 x i8>* %189, align 1, !alias.scope !61, !noalias !58
  %190 = or i64 %178, 32
  %191 = getelementptr i8, i8* %148, i64 %190
  %192 = getelementptr i8, i8* %143, i64 %190
  %193 = bitcast i8* %191 to <16 x i8>*
  %194 = load <16 x i8>, <16 x i8>* %193, align 1, !alias.scope !58
  %195 = getelementptr i8, i8* %191, i64 16
  %196 = bitcast i8* %195 to <16 x i8>*
  %197 = load <16 x i8>, <16 x i8>* %196, align 1, !alias.scope !58
  %198 = bitcast i8* %192 to <16 x i8>*
  store <16 x i8> %194, <16 x i8>* %198, align 1, !alias.scope !61, !noalias !58
  %199 = getelementptr i8, i8* %192, i64 16
  %200 = bitcast i8* %199 to <16 x i8>*
  store <16 x i8> %197, <16 x i8>* %200, align 1, !alias.scope !61, !noalias !58
  %201 = or i64 %178, 64
  %202 = getelementptr i8, i8* %148, i64 %201
  %203 = getelementptr i8, i8* %143, i64 %201
  %204 = bitcast i8* %202 to <16 x i8>*
  %205 = load <16 x i8>, <16 x i8>* %204, align 1, !alias.scope !58
  %206 = getelementptr i8, i8* %202, i64 16
  %207 = bitcast i8* %206 to <16 x i8>*
  %208 = load <16 x i8>, <16 x i8>* %207, align 1, !alias.scope !58
  %209 = bitcast i8* %203 to <16 x i8>*
  store <16 x i8> %205, <16 x i8>* %209, align 1, !alias.scope !61, !noalias !58
  %210 = getelementptr i8, i8* %203, i64 16
  %211 = bitcast i8* %210 to <16 x i8>*
  store <16 x i8> %208, <16 x i8>* %211, align 1, !alias.scope !61, !noalias !58
  %212 = or i64 %178, 96
  %213 = getelementptr i8, i8* %148, i64 %212
  %214 = getelementptr i8, i8* %143, i64 %212
  %215 = bitcast i8* %213 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1, !alias.scope !58
  %217 = getelementptr i8, i8* %213, i64 16
  %218 = bitcast i8* %217 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1, !alias.scope !58
  %220 = bitcast i8* %214 to <16 x i8>*
  store <16 x i8> %216, <16 x i8>* %220, align 1, !alias.scope !61, !noalias !58
  %221 = getelementptr i8, i8* %214, i64 16
  %222 = bitcast i8* %221 to <16 x i8>*
  store <16 x i8> %219, <16 x i8>* %222, align 1, !alias.scope !61, !noalias !58
  %223 = add i64 %178, 128
  %224 = add i64 %179, -4
  %225 = icmp eq i64 %224, 0
  br i1 %225, label %226, label %177, !llvm.loop !63

226:                                              ; preds = %177, %166
  %227 = phi i64 [ 0, %166 ], [ %223, %177 ]
  %228 = icmp eq i64 %173, 0
  br i1 %228, label %245, label %229

229:                                              ; preds = %226, %229
  %230 = phi i64 [ %242, %229 ], [ %227, %226 ]
  %231 = phi i64 [ %243, %229 ], [ %173, %226 ]
  %232 = getelementptr i8, i8* %148, i64 %230
  %233 = getelementptr i8, i8* %143, i64 %230
  %234 = bitcast i8* %232 to <16 x i8>*
  %235 = load <16 x i8>, <16 x i8>* %234, align 1, !alias.scope !58
  %236 = getelementptr i8, i8* %232, i64 16
  %237 = bitcast i8* %236 to <16 x i8>*
  %238 = load <16 x i8>, <16 x i8>* %237, align 1, !alias.scope !58
  %239 = bitcast i8* %233 to <16 x i8>*
  store <16 x i8> %235, <16 x i8>* %239, align 1, !alias.scope !61, !noalias !58
  %240 = getelementptr i8, i8* %233, i64 16
  %241 = bitcast i8* %240 to <16 x i8>*
  store <16 x i8> %238, <16 x i8>* %241, align 1, !alias.scope !61, !noalias !58
  %242 = add i64 %230, 32
  %243 = add i64 %231, -1
  %244 = icmp eq i64 %243, 0
  br i1 %244, label %245, label %229, !llvm.loop !64

245:                                              ; preds = %229, %226
  %246 = icmp eq i64 %167, %153
  br i1 %246, label %247, label %155

247:                                              ; preds = %256, %245
  %248 = phi i8* [ %169, %245 ], [ %261, %256 ]
  %249 = ptrtoint i8* %248 to i64
  br label %250

250:                                              ; preds = %247, %141
  %251 = phi i64 [ %249, %247 ], [ %142, %141 ]
  store i64 %251, i64* %20, align 8
  %252 = icmp eq i64 %147, 0
  br i1 %252, label %263, label %253

253:                                              ; preds = %250
  %254 = sub i64 0, %147
  %255 = getelementptr inbounds i8, i8* %143, i64 %254
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %255, i8* align 1 %1, i64 %147, i1 false) #12
  br label %263

256:                                              ; preds = %155, %256
  %257 = phi i8* [ %260, %256 ], [ %156, %155 ]
  %258 = phi i8* [ %261, %256 ], [ %157, %155 ]
  %259 = load i8, i8* %257, align 1
  store i8 %259, i8* %258, align 1
  %260 = getelementptr inbounds i8, i8* %257, i64 1
  %261 = getelementptr inbounds i8, i8* %258, i64 1
  %262 = icmp eq i8* %260, %16
  br i1 %262, label %247, label %256, !llvm.loop !65

263:                                              ; preds = %250, %253
  %264 = icmp eq i8* %144, %2
  br i1 %264, label %618, label %265

265:                                              ; preds = %263
  %266 = sub i64 0, %6
  %267 = getelementptr i8, i8* %144, i64 %266
  %268 = ptrtoint i8* %267 to i64
  %269 = icmp ult i8* %267, inttoptr (i64 32 to i8*)
  br i1 %269, label %358, label %270

270:                                              ; preds = %265
  %271 = ptrtoint i8* %1 to i64
  %272 = sub i64 %271, %6
  %273 = getelementptr i8, i8* %144, i64 %272
  %274 = icmp ugt i8* %144, %1
  %275 = icmp ugt i8* %273, %2
  %276 = and i1 %274, %275
  br i1 %276, label %358, label %277

277:                                              ; preds = %270
  %278 = and i64 %268, -32
  %279 = getelementptr i8, i8* %1, i64 %278
  %280 = getelementptr i8, i8* %2, i64 %278
  %281 = add i64 %278, -32
  %282 = lshr exact i64 %281, 5
  %283 = add nuw nsw i64 %282, 1
  %284 = and i64 %283, 3
  %285 = icmp ult i64 %281, 96
  br i1 %285, label %337, label %286

286:                                              ; preds = %277
  %287 = sub nsw i64 %283, %284
  br label %288

288:                                              ; preds = %288, %286
  %289 = phi i64 [ 0, %286 ], [ %334, %288 ]
  %290 = phi i64 [ %287, %286 ], [ %335, %288 ]
  %291 = getelementptr i8, i8* %1, i64 %289
  %292 = getelementptr i8, i8* %2, i64 %289
  %293 = bitcast i8* %292 to <16 x i8>*
  %294 = load <16 x i8>, <16 x i8>* %293, align 1, !alias.scope !66
  %295 = getelementptr i8, i8* %292, i64 16
  %296 = bitcast i8* %295 to <16 x i8>*
  %297 = load <16 x i8>, <16 x i8>* %296, align 1, !alias.scope !66
  %298 = bitcast i8* %291 to <16 x i8>*
  store <16 x i8> %294, <16 x i8>* %298, align 1, !alias.scope !69, !noalias !66
  %299 = getelementptr i8, i8* %291, i64 16
  %300 = bitcast i8* %299 to <16 x i8>*
  store <16 x i8> %297, <16 x i8>* %300, align 1, !alias.scope !69, !noalias !66
  %301 = or i64 %289, 32
  %302 = getelementptr i8, i8* %1, i64 %301
  %303 = getelementptr i8, i8* %2, i64 %301
  %304 = bitcast i8* %303 to <16 x i8>*
  %305 = load <16 x i8>, <16 x i8>* %304, align 1, !alias.scope !66
  %306 = getelementptr i8, i8* %303, i64 16
  %307 = bitcast i8* %306 to <16 x i8>*
  %308 = load <16 x i8>, <16 x i8>* %307, align 1, !alias.scope !66
  %309 = bitcast i8* %302 to <16 x i8>*
  store <16 x i8> %305, <16 x i8>* %309, align 1, !alias.scope !69, !noalias !66
  %310 = getelementptr i8, i8* %302, i64 16
  %311 = bitcast i8* %310 to <16 x i8>*
  store <16 x i8> %308, <16 x i8>* %311, align 1, !alias.scope !69, !noalias !66
  %312 = or i64 %289, 64
  %313 = getelementptr i8, i8* %1, i64 %312
  %314 = getelementptr i8, i8* %2, i64 %312
  %315 = bitcast i8* %314 to <16 x i8>*
  %316 = load <16 x i8>, <16 x i8>* %315, align 1, !alias.scope !66
  %317 = getelementptr i8, i8* %314, i64 16
  %318 = bitcast i8* %317 to <16 x i8>*
  %319 = load <16 x i8>, <16 x i8>* %318, align 1, !alias.scope !66
  %320 = bitcast i8* %313 to <16 x i8>*
  store <16 x i8> %316, <16 x i8>* %320, align 1, !alias.scope !69, !noalias !66
  %321 = getelementptr i8, i8* %313, i64 16
  %322 = bitcast i8* %321 to <16 x i8>*
  store <16 x i8> %319, <16 x i8>* %322, align 1, !alias.scope !69, !noalias !66
  %323 = or i64 %289, 96
  %324 = getelementptr i8, i8* %1, i64 %323
  %325 = getelementptr i8, i8* %2, i64 %323
  %326 = bitcast i8* %325 to <16 x i8>*
  %327 = load <16 x i8>, <16 x i8>* %326, align 1, !alias.scope !66
  %328 = getelementptr i8, i8* %325, i64 16
  %329 = bitcast i8* %328 to <16 x i8>*
  %330 = load <16 x i8>, <16 x i8>* %329, align 1, !alias.scope !66
  %331 = bitcast i8* %324 to <16 x i8>*
  store <16 x i8> %327, <16 x i8>* %331, align 1, !alias.scope !69, !noalias !66
  %332 = getelementptr i8, i8* %324, i64 16
  %333 = bitcast i8* %332 to <16 x i8>*
  store <16 x i8> %330, <16 x i8>* %333, align 1, !alias.scope !69, !noalias !66
  %334 = add i64 %289, 128
  %335 = add i64 %290, -4
  %336 = icmp eq i64 %335, 0
  br i1 %336, label %337, label %288, !llvm.loop !71

337:                                              ; preds = %288, %277
  %338 = phi i64 [ 0, %277 ], [ %334, %288 ]
  %339 = icmp eq i64 %284, 0
  br i1 %339, label %356, label %340

340:                                              ; preds = %337, %340
  %341 = phi i64 [ %353, %340 ], [ %338, %337 ]
  %342 = phi i64 [ %354, %340 ], [ %284, %337 ]
  %343 = getelementptr i8, i8* %1, i64 %341
  %344 = getelementptr i8, i8* %2, i64 %341
  %345 = bitcast i8* %344 to <16 x i8>*
  %346 = load <16 x i8>, <16 x i8>* %345, align 1, !alias.scope !66
  %347 = getelementptr i8, i8* %344, i64 16
  %348 = bitcast i8* %347 to <16 x i8>*
  %349 = load <16 x i8>, <16 x i8>* %348, align 1, !alias.scope !66
  %350 = bitcast i8* %343 to <16 x i8>*
  store <16 x i8> %346, <16 x i8>* %350, align 1, !alias.scope !69, !noalias !66
  %351 = getelementptr i8, i8* %343, i64 16
  %352 = bitcast i8* %351 to <16 x i8>*
  store <16 x i8> %349, <16 x i8>* %352, align 1, !alias.scope !69, !noalias !66
  %353 = add i64 %341, 32
  %354 = add i64 %342, -1
  %355 = icmp eq i64 %354, 0
  br i1 %355, label %356, label %340, !llvm.loop !72

356:                                              ; preds = %340, %337
  %357 = icmp eq i64 %278, %268
  br i1 %357, label %618, label %358

358:                                              ; preds = %356, %270, %265
  %359 = phi i8* [ %1, %270 ], [ %1, %265 ], [ %279, %356 ]
  %360 = phi i8* [ %2, %270 ], [ %2, %265 ], [ %280, %356 ]
  br label %361

361:                                              ; preds = %358, %361
  %362 = phi i8* [ %366, %361 ], [ %359, %358 ]
  %363 = phi i8* [ %365, %361 ], [ %360, %358 ]
  %364 = load i8, i8* %363, align 1
  store i8 %364, i8* %362, align 1
  %365 = getelementptr inbounds i8, i8* %363, i64 1
  %366 = getelementptr inbounds i8, i8* %362, i64 1
  %367 = icmp eq i8* %365, %144
  br i1 %367, label %618, label %361, !llvm.loop !73

368:                                              ; preds = %11
  %369 = bitcast %"class.std::__1::vector"* %0 to i64*
  %370 = load i64, i64* %369, align 8
  %371 = sub i64 %17, %370
  %372 = add i64 %371, %9
  %373 = icmp slt i64 %372, 0
  br i1 %373, label %374, label %376

374:                                              ; preds = %368
  %375 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %375) #13
  unreachable

376:                                              ; preds = %368
  %377 = sub i64 %14, %370
  %378 = icmp ult i64 %377, 4611686018427387903
  br i1 %378, label %381, label %379

379:                                              ; preds = %376
  %380 = sub i64 %5, %370
  br label %387

381:                                              ; preds = %376
  %382 = shl i64 %377, 1
  %383 = icmp ult i64 %382, %372
  %384 = select i1 %383, i64 %372, i64 %382
  %385 = sub i64 %5, %370
  %386 = icmp eq i64 %384, 0
  br i1 %386, label %391, label %387

387:                                              ; preds = %379, %381
  %388 = phi i64 [ %380, %379 ], [ %385, %381 ]
  %389 = phi i64 [ 9223372036854775807, %379 ], [ %384, %381 ]
  %390 = tail call i8* @_Znwm(i64 %389) #11
  br label %391

391:                                              ; preds = %381, %387
  %392 = phi i64 [ %388, %387 ], [ %385, %381 ]
  %393 = phi i64 [ %389, %387 ], [ 0, %381 ]
  %394 = phi i8* [ %390, %387 ], [ null, %381 ]
  %395 = getelementptr inbounds i8, i8* %394, i64 %392
  %396 = getelementptr inbounds i8, i8* %394, i64 %393
  %397 = getelementptr inbounds i8, i8* %395, i64 %9
  %398 = icmp ult i64 %9, 32
  br i1 %398, label %484, label %399

399:                                              ; preds = %391
  %400 = icmp ult i8* %395, %3
  %401 = icmp ugt i8* %397, %2
  %402 = and i1 %400, %401
  br i1 %402, label %484, label %403

403:                                              ; preds = %399
  %404 = and i64 %9, -32
  %405 = getelementptr i8, i8* %395, i64 %404
  %406 = getelementptr i8, i8* %2, i64 %404
  %407 = add i64 %404, -32
  %408 = lshr exact i64 %407, 5
  %409 = add nuw nsw i64 %408, 1
  %410 = and i64 %409, 3
  %411 = icmp ult i64 %407, 96
  br i1 %411, label %463, label %412

412:                                              ; preds = %403
  %413 = sub nsw i64 %409, %410
  br label %414

414:                                              ; preds = %414, %412
  %415 = phi i64 [ 0, %412 ], [ %460, %414 ]
  %416 = phi i64 [ %413, %412 ], [ %461, %414 ]
  %417 = getelementptr i8, i8* %395, i64 %415
  %418 = getelementptr i8, i8* %2, i64 %415
  %419 = bitcast i8* %418 to <16 x i8>*
  %420 = load <16 x i8>, <16 x i8>* %419, align 1, !alias.scope !74
  %421 = getelementptr i8, i8* %418, i64 16
  %422 = bitcast i8* %421 to <16 x i8>*
  %423 = load <16 x i8>, <16 x i8>* %422, align 1, !alias.scope !74
  %424 = bitcast i8* %417 to <16 x i8>*
  store <16 x i8> %420, <16 x i8>* %424, align 1, !alias.scope !77, !noalias !74
  %425 = getelementptr i8, i8* %417, i64 16
  %426 = bitcast i8* %425 to <16 x i8>*
  store <16 x i8> %423, <16 x i8>* %426, align 1, !alias.scope !77, !noalias !74
  %427 = or i64 %415, 32
  %428 = getelementptr i8, i8* %395, i64 %427
  %429 = getelementptr i8, i8* %2, i64 %427
  %430 = bitcast i8* %429 to <16 x i8>*
  %431 = load <16 x i8>, <16 x i8>* %430, align 1, !alias.scope !74
  %432 = getelementptr i8, i8* %429, i64 16
  %433 = bitcast i8* %432 to <16 x i8>*
  %434 = load <16 x i8>, <16 x i8>* %433, align 1, !alias.scope !74
  %435 = bitcast i8* %428 to <16 x i8>*
  store <16 x i8> %431, <16 x i8>* %435, align 1, !alias.scope !77, !noalias !74
  %436 = getelementptr i8, i8* %428, i64 16
  %437 = bitcast i8* %436 to <16 x i8>*
  store <16 x i8> %434, <16 x i8>* %437, align 1, !alias.scope !77, !noalias !74
  %438 = or i64 %415, 64
  %439 = getelementptr i8, i8* %395, i64 %438
  %440 = getelementptr i8, i8* %2, i64 %438
  %441 = bitcast i8* %440 to <16 x i8>*
  %442 = load <16 x i8>, <16 x i8>* %441, align 1, !alias.scope !74
  %443 = getelementptr i8, i8* %440, i64 16
  %444 = bitcast i8* %443 to <16 x i8>*
  %445 = load <16 x i8>, <16 x i8>* %444, align 1, !alias.scope !74
  %446 = bitcast i8* %439 to <16 x i8>*
  store <16 x i8> %442, <16 x i8>* %446, align 1, !alias.scope !77, !noalias !74
  %447 = getelementptr i8, i8* %439, i64 16
  %448 = bitcast i8* %447 to <16 x i8>*
  store <16 x i8> %445, <16 x i8>* %448, align 1, !alias.scope !77, !noalias !74
  %449 = or i64 %415, 96
  %450 = getelementptr i8, i8* %395, i64 %449
  %451 = getelementptr i8, i8* %2, i64 %449
  %452 = bitcast i8* %451 to <16 x i8>*
  %453 = load <16 x i8>, <16 x i8>* %452, align 1, !alias.scope !74
  %454 = getelementptr i8, i8* %451, i64 16
  %455 = bitcast i8* %454 to <16 x i8>*
  %456 = load <16 x i8>, <16 x i8>* %455, align 1, !alias.scope !74
  %457 = bitcast i8* %450 to <16 x i8>*
  store <16 x i8> %453, <16 x i8>* %457, align 1, !alias.scope !77, !noalias !74
  %458 = getelementptr i8, i8* %450, i64 16
  %459 = bitcast i8* %458 to <16 x i8>*
  store <16 x i8> %456, <16 x i8>* %459, align 1, !alias.scope !77, !noalias !74
  %460 = add i64 %415, 128
  %461 = add i64 %416, -4
  %462 = icmp eq i64 %461, 0
  br i1 %462, label %463, label %414, !llvm.loop !79

463:                                              ; preds = %414, %403
  %464 = phi i64 [ 0, %403 ], [ %460, %414 ]
  %465 = icmp eq i64 %410, 0
  br i1 %465, label %482, label %466

466:                                              ; preds = %463, %466
  %467 = phi i64 [ %479, %466 ], [ %464, %463 ]
  %468 = phi i64 [ %480, %466 ], [ %410, %463 ]
  %469 = getelementptr i8, i8* %395, i64 %467
  %470 = getelementptr i8, i8* %2, i64 %467
  %471 = bitcast i8* %470 to <16 x i8>*
  %472 = load <16 x i8>, <16 x i8>* %471, align 1, !alias.scope !74
  %473 = getelementptr i8, i8* %470, i64 16
  %474 = bitcast i8* %473 to <16 x i8>*
  %475 = load <16 x i8>, <16 x i8>* %474, align 1, !alias.scope !74
  %476 = bitcast i8* %469 to <16 x i8>*
  store <16 x i8> %472, <16 x i8>* %476, align 1, !alias.scope !77, !noalias !74
  %477 = getelementptr i8, i8* %469, i64 16
  %478 = bitcast i8* %477 to <16 x i8>*
  store <16 x i8> %475, <16 x i8>* %478, align 1, !alias.scope !77, !noalias !74
  %479 = add i64 %467, 32
  %480 = add i64 %468, -1
  %481 = icmp eq i64 %480, 0
  br i1 %481, label %482, label %466, !llvm.loop !80

482:                                              ; preds = %466, %463
  %483 = icmp eq i64 %9, %404
  br i1 %483, label %494, label %484

484:                                              ; preds = %482, %399, %391
  %485 = phi i8* [ %395, %399 ], [ %395, %391 ], [ %405, %482 ]
  %486 = phi i8* [ %2, %399 ], [ %2, %391 ], [ %406, %482 ]
  br label %487

487:                                              ; preds = %484, %487
  %488 = phi i8* [ %491, %487 ], [ %485, %484 ]
  %489 = phi i8* [ %492, %487 ], [ %486, %484 ]
  %490 = load i8, i8* %489, align 1
  store i8 %490, i8* %488, align 1
  %491 = getelementptr inbounds i8, i8* %488, i64 1
  %492 = getelementptr inbounds i8, i8* %489, i64 1
  %493 = icmp eq i8* %397, %491
  br i1 %493, label %494, label %487, !llvm.loop !81

494:                                              ; preds = %487, %482
  %495 = ptrtoint i8* %396 to i64
  %496 = load i8*, i8** %7, align 8
  %497 = ptrtoint i8* %496 to i64
  %498 = sub i64 %5, %497
  %499 = sub i64 0, %498
  %500 = getelementptr inbounds i8, i8* %395, i64 %499
  %501 = ptrtoint i8* %500 to i64
  %502 = icmp sgt i64 %498, 0
  br i1 %502, label %503, label %504

503:                                              ; preds = %494
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %500, i8* align 1 %496, i64 %498, i1 false) #12
  br label %504

504:                                              ; preds = %503, %494
  %505 = load i8*, i8** %15, align 8
  %506 = icmp eq i8* %505, %1
  br i1 %506, label %612, label %507

507:                                              ; preds = %504
  %508 = ptrtoint i8* %505 to i64
  %509 = sub i64 %508, %5
  %510 = icmp ult i64 %509, 32
  br i1 %510, label %602, label %511

511:                                              ; preds = %507
  %512 = add i64 %392, %8
  %513 = sub i64 %512, %5
  %514 = sub i64 %513, %6
  %515 = getelementptr i8, i8* %505, i64 %514
  %516 = ptrtoint i8* %515 to i64
  %517 = getelementptr i8, i8* %394, i64 %516
  %518 = icmp ult i8* %397, %505
  %519 = icmp ugt i8* %517, %1
  %520 = and i1 %518, %519
  br i1 %520, label %602, label %521

521:                                              ; preds = %511
  %522 = and i64 %509, -32
  %523 = getelementptr i8, i8* %397, i64 %522
  %524 = getelementptr i8, i8* %1, i64 %522
  %525 = add i64 %522, -32
  %526 = lshr exact i64 %525, 5
  %527 = add nuw nsw i64 %526, 1
  %528 = and i64 %527, 3
  %529 = icmp ult i64 %525, 96
  br i1 %529, label %581, label %530

530:                                              ; preds = %521
  %531 = sub nsw i64 %527, %528
  br label %532

532:                                              ; preds = %532, %530
  %533 = phi i64 [ 0, %530 ], [ %578, %532 ]
  %534 = phi i64 [ %531, %530 ], [ %579, %532 ]
  %535 = getelementptr i8, i8* %397, i64 %533
  %536 = getelementptr i8, i8* %1, i64 %533
  %537 = bitcast i8* %536 to <16 x i8>*
  %538 = load <16 x i8>, <16 x i8>* %537, align 1, !alias.scope !82
  %539 = getelementptr i8, i8* %536, i64 16
  %540 = bitcast i8* %539 to <16 x i8>*
  %541 = load <16 x i8>, <16 x i8>* %540, align 1, !alias.scope !82
  %542 = bitcast i8* %535 to <16 x i8>*
  store <16 x i8> %538, <16 x i8>* %542, align 1, !alias.scope !85, !noalias !82
  %543 = getelementptr i8, i8* %535, i64 16
  %544 = bitcast i8* %543 to <16 x i8>*
  store <16 x i8> %541, <16 x i8>* %544, align 1, !alias.scope !85, !noalias !82
  %545 = or i64 %533, 32
  %546 = getelementptr i8, i8* %397, i64 %545
  %547 = getelementptr i8, i8* %1, i64 %545
  %548 = bitcast i8* %547 to <16 x i8>*
  %549 = load <16 x i8>, <16 x i8>* %548, align 1, !alias.scope !82
  %550 = getelementptr i8, i8* %547, i64 16
  %551 = bitcast i8* %550 to <16 x i8>*
  %552 = load <16 x i8>, <16 x i8>* %551, align 1, !alias.scope !82
  %553 = bitcast i8* %546 to <16 x i8>*
  store <16 x i8> %549, <16 x i8>* %553, align 1, !alias.scope !85, !noalias !82
  %554 = getelementptr i8, i8* %546, i64 16
  %555 = bitcast i8* %554 to <16 x i8>*
  store <16 x i8> %552, <16 x i8>* %555, align 1, !alias.scope !85, !noalias !82
  %556 = or i64 %533, 64
  %557 = getelementptr i8, i8* %397, i64 %556
  %558 = getelementptr i8, i8* %1, i64 %556
  %559 = bitcast i8* %558 to <16 x i8>*
  %560 = load <16 x i8>, <16 x i8>* %559, align 1, !alias.scope !82
  %561 = getelementptr i8, i8* %558, i64 16
  %562 = bitcast i8* %561 to <16 x i8>*
  %563 = load <16 x i8>, <16 x i8>* %562, align 1, !alias.scope !82
  %564 = bitcast i8* %557 to <16 x i8>*
  store <16 x i8> %560, <16 x i8>* %564, align 1, !alias.scope !85, !noalias !82
  %565 = getelementptr i8, i8* %557, i64 16
  %566 = bitcast i8* %565 to <16 x i8>*
  store <16 x i8> %563, <16 x i8>* %566, align 1, !alias.scope !85, !noalias !82
  %567 = or i64 %533, 96
  %568 = getelementptr i8, i8* %397, i64 %567
  %569 = getelementptr i8, i8* %1, i64 %567
  %570 = bitcast i8* %569 to <16 x i8>*
  %571 = load <16 x i8>, <16 x i8>* %570, align 1, !alias.scope !82
  %572 = getelementptr i8, i8* %569, i64 16
  %573 = bitcast i8* %572 to <16 x i8>*
  %574 = load <16 x i8>, <16 x i8>* %573, align 1, !alias.scope !82
  %575 = bitcast i8* %568 to <16 x i8>*
  store <16 x i8> %571, <16 x i8>* %575, align 1, !alias.scope !85, !noalias !82
  %576 = getelementptr i8, i8* %568, i64 16
  %577 = bitcast i8* %576 to <16 x i8>*
  store <16 x i8> %574, <16 x i8>* %577, align 1, !alias.scope !85, !noalias !82
  %578 = add i64 %533, 128
  %579 = add i64 %534, -4
  %580 = icmp eq i64 %579, 0
  br i1 %580, label %581, label %532, !llvm.loop !87

581:                                              ; preds = %532, %521
  %582 = phi i64 [ 0, %521 ], [ %578, %532 ]
  %583 = icmp eq i64 %528, 0
  br i1 %583, label %600, label %584

584:                                              ; preds = %581, %584
  %585 = phi i64 [ %597, %584 ], [ %582, %581 ]
  %586 = phi i64 [ %598, %584 ], [ %528, %581 ]
  %587 = getelementptr i8, i8* %397, i64 %585
  %588 = getelementptr i8, i8* %1, i64 %585
  %589 = bitcast i8* %588 to <16 x i8>*
  %590 = load <16 x i8>, <16 x i8>* %589, align 1, !alias.scope !82
  %591 = getelementptr i8, i8* %588, i64 16
  %592 = bitcast i8* %591 to <16 x i8>*
  %593 = load <16 x i8>, <16 x i8>* %592, align 1, !alias.scope !82
  %594 = bitcast i8* %587 to <16 x i8>*
  store <16 x i8> %590, <16 x i8>* %594, align 1, !alias.scope !85, !noalias !82
  %595 = getelementptr i8, i8* %587, i64 16
  %596 = bitcast i8* %595 to <16 x i8>*
  store <16 x i8> %593, <16 x i8>* %596, align 1, !alias.scope !85, !noalias !82
  %597 = add i64 %585, 32
  %598 = add i64 %586, -1
  %599 = icmp eq i64 %598, 0
  br i1 %599, label %600, label %584, !llvm.loop !88

600:                                              ; preds = %584, %581
  %601 = icmp eq i64 %509, %522
  br i1 %601, label %612, label %602

602:                                              ; preds = %600, %511, %507
  %603 = phi i8* [ %397, %511 ], [ %397, %507 ], [ %523, %600 ]
  %604 = phi i8* [ %1, %511 ], [ %1, %507 ], [ %524, %600 ]
  br label %605

605:                                              ; preds = %602, %605
  %606 = phi i8* [ %610, %605 ], [ %603, %602 ]
  %607 = phi i8* [ %609, %605 ], [ %604, %602 ]
  %608 = load i8, i8* %607, align 1
  store i8 %608, i8* %606, align 1
  %609 = getelementptr inbounds i8, i8* %607, i64 1
  %610 = getelementptr inbounds i8, i8* %606, i64 1
  %611 = icmp eq i8* %609, %505
  br i1 %611, label %612, label %605, !llvm.loop !89

612:                                              ; preds = %605, %600, %504
  %613 = phi i8* [ %397, %504 ], [ %523, %600 ], [ %610, %605 ]
  %614 = ptrtoint i8* %613 to i64
  %615 = load i8*, i8** %7, align 8
  store i64 %501, i64* %369, align 8
  store i64 %614, i64* %20, align 8
  store i64 %495, i64* %13, align 8
  %616 = icmp eq i8* %615, null
  br i1 %616, label %618, label %617

617:                                              ; preds = %612
  tail call void @_ZdlPv(i8* nonnull %615) #11
  br label %618

618:                                              ; preds = %361, %356, %617, %612, %136, %263, %4
  %619 = phi i8* [ %1, %4 ], [ %1, %263 ], [ %1, %136 ], [ %395, %612 ], [ %395, %617 ], [ %1, %356 ], [ %1, %361 ]
  ret i8* %619
}

declare void @_ZNSt3__19to_stringEi(%"class.std::__1::basic_string"* sret, i32) local_unnamed_addr #10

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEED2Ev(%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* nocapture) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0
  tail call fastcc void @_ZNSt3__112__deque_baseIN8v8_crdtp4json12_GLOBAL__N_15StateENS_9allocatorIS4_EEED2Ev(%"class.std::__1::__deque_base"* %3) #12
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEED0Ev(%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"*) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0
  tail call fastcc void @_ZNSt3__112__deque_baseIN8v8_crdtp4json12_GLOBAL__N_15StateENS_9allocatorIS4_EEED2Ev(%"class.std::__1::__deque_base"* %3) #12
  %4 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE14HandleMapBeginEv(%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* nocapture) unnamed_addr #0 align 2 {
  %2 = alloca i32, align 4
  %3 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 2
  %4 = load %"struct.v8_crdtp::Status"*, %"struct.v8_crdtp::Status"** %3, align 8
  %5 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %4, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %43

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3
  %10 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 2, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = add i64 %11, -1
  %15 = add i64 %14, %13
  %16 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %17 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %16, align 8
  %18 = lshr i64 %15, 9
  %19 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %17, i64 %18
  %20 = load %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %19, align 8
  %21 = and i64 %15, 511
  %22 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 1
  %23 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  %24 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %20, i64 %21, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %39, label %27

27:                                               ; preds = %8
  %28 = and i32 %25, 1
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %35, label %30

30:                                               ; preds = %27
  %31 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %20, i64 %21, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %32, 2
  %34 = select i1 %33, i8 44, i8 58
  br label %35

35:                                               ; preds = %30, %27
  %36 = phi i8 [ 44, %27 ], [ %34, %30 ]
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %23, i8 signext %36) #12
  %37 = load i32, i32* %24, align 4
  %38 = add i32 %37, 1
  br label %39

39:                                               ; preds = %8, %35
  %40 = phi i32 [ 1, %8 ], [ %38, %35 ]
  store i32 %40, i32* %24, align 4
  %41 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %41) #12
  store i32 1, i32* %2, align 4
  call fastcc void @_ZNSt3__15stackIN8v8_crdtp4json12_GLOBAL__N_15StateENS_5dequeIS4_NS_9allocatorIS4_EEEEE7emplaceIJNS3_9ContainerEEEEvDpOT_(%"class.std::__1::stack"* %9, i32* nonnull dereferenceable(4) %2)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %41) #12
  %42 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %42, i8 signext 123) #12
  br label %43

43:                                               ; preds = %1, %39
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE12HandleMapEndEv(%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 2
  %3 = load %"struct.v8_crdtp::Status"*, %"struct.v8_crdtp::Status"** %2, align 8
  %4 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %3, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %38

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 2, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, -1
  store i64 %10, i64* %8, align 8
  %11 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 2
  %12 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"*** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %15 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"*** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %13, %16
  %18 = icmp eq i64 %17, 0
  %19 = shl i64 %17, 6
  %20 = add i64 %19, -1
  %21 = select i1 %18, i64 0, i64 %20
  %22 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = sub i64 1, %9
  %25 = sub i64 %24, %23
  %26 = add i64 %25, %21
  %27 = icmp ugt i64 %26, 1023
  br i1 %27, label %28, label %35

28:                                               ; preds = %7
  %29 = inttoptr i64 %13 to %"class.v8_crdtp::json::(anonymous namespace)::State"**
  %30 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %29, i64 -1
  %31 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %30 to i8**
  %32 = load i8*, i8** %31, align 8
  tail call void @_ZdlPv(i8* %32) #11
  %33 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %11, align 8
  %34 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %33, i64 -1
  store %"class.v8_crdtp::json::(anonymous namespace)::State"** %34, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %11, align 8
  br label %35

35:                                               ; preds = %7, %28
  %36 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 1
  %37 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %36, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %37, i8 signext 125) #12
  br label %38

38:                                               ; preds = %1, %35
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE16HandleArrayBeginEv(%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* nocapture) unnamed_addr #0 align 2 {
  %2 = alloca i32, align 4
  %3 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 2
  %4 = load %"struct.v8_crdtp::Status"*, %"struct.v8_crdtp::Status"** %3, align 8
  %5 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %4, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %43

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3
  %10 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 2, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = add i64 %11, -1
  %15 = add i64 %14, %13
  %16 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %17 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %16, align 8
  %18 = lshr i64 %15, 9
  %19 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %17, i64 %18
  %20 = load %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %19, align 8
  %21 = and i64 %15, 511
  %22 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 1
  %23 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  %24 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %20, i64 %21, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %39, label %27

27:                                               ; preds = %8
  %28 = and i32 %25, 1
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %35, label %30

30:                                               ; preds = %27
  %31 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %20, i64 %21, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %32, 2
  %34 = select i1 %33, i8 44, i8 58
  br label %35

35:                                               ; preds = %30, %27
  %36 = phi i8 [ 44, %27 ], [ %34, %30 ]
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %23, i8 signext %36) #12
  %37 = load i32, i32* %24, align 4
  %38 = add i32 %37, 1
  br label %39

39:                                               ; preds = %8, %35
  %40 = phi i32 [ 1, %8 ], [ %38, %35 ]
  store i32 %40, i32* %24, align 4
  %41 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %41) #12
  store i32 2, i32* %2, align 4
  call fastcc void @_ZNSt3__15stackIN8v8_crdtp4json12_GLOBAL__N_15StateENS_5dequeIS4_NS_9allocatorIS4_EEEEE7emplaceIJNS3_9ContainerEEEEvDpOT_(%"class.std::__1::stack"* %9, i32* nonnull dereferenceable(4) %2)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %41) #12
  %42 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %42, i8 signext 91) #12
  br label %43

43:                                               ; preds = %1, %39
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE14HandleArrayEndEv(%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 2
  %3 = load %"struct.v8_crdtp::Status"*, %"struct.v8_crdtp::Status"** %2, align 8
  %4 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %3, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %38

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 2, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, -1
  store i64 %10, i64* %8, align 8
  %11 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 2
  %12 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"*** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %15 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"*** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %13, %16
  %18 = icmp eq i64 %17, 0
  %19 = shl i64 %17, 6
  %20 = add i64 %19, -1
  %21 = select i1 %18, i64 0, i64 %20
  %22 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = sub i64 1, %9
  %25 = sub i64 %24, %23
  %26 = add i64 %25, %21
  %27 = icmp ugt i64 %26, 1023
  br i1 %27, label %28, label %35

28:                                               ; preds = %7
  %29 = inttoptr i64 %13 to %"class.v8_crdtp::json::(anonymous namespace)::State"**
  %30 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %29, i64 -1
  %31 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::State"** %30 to i8**
  %32 = load i8*, i8** %31, align 8
  tail call void @_ZdlPv(i8* %32) #11
  %33 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %11, align 8
  %34 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %33, i64 -1
  store %"class.v8_crdtp::json::(anonymous namespace)::State"** %34, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %11, align 8
  br label %35

35:                                               ; preds = %7, %28
  %36 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 1
  %37 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %36, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %37, i8 signext 93) #12
  br label %38

38:                                               ; preds = %1, %35
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE13HandleString8ENS_4spanIhEE(%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* nocapture readonly, i8*, i64) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 2
  %5 = load %"struct.v8_crdtp::Status"*, %"struct.v8_crdtp::Status"** %4, align 8
  %6 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %5, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %386

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 2, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = add i64 %11, -1
  %15 = add i64 %14, %13
  %16 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %17 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %16, align 8
  %18 = lshr i64 %15, 9
  %19 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %17, i64 %18
  %20 = load %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %19, align 8
  %21 = and i64 %15, 511
  %22 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 1
  %23 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  %24 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %20, i64 %21, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %39, label %27

27:                                               ; preds = %9
  %28 = and i32 %25, 1
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %35, label %30

30:                                               ; preds = %27
  %31 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %20, i64 %21, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %32, 2
  %34 = select i1 %33, i8 44, i8 58
  br label %35

35:                                               ; preds = %30, %27
  %36 = phi i8 [ 44, %27 ], [ %34, %30 ]
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %23, i8 signext %36) #12
  %37 = load i32, i32* %24, align 4
  %38 = add i32 %37, 1
  br label %39

39:                                               ; preds = %9, %35
  %40 = phi i32 [ 1, %9 ], [ %38, %35 ]
  store i32 %40, i32* %24, align 4
  %41 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %41, i8 signext 34) #12
  %42 = icmp eq i64 %2, 0
  br i1 %42, label %43, label %45

43:                                               ; preds = %382, %39
  %44 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %44, i8 signext 34) #12
  br label %386

45:                                               ; preds = %39, %382
  %46 = phi i64 [ %384, %382 ], [ 0, %39 ]
  %47 = getelementptr inbounds i8, i8* %1, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  switch i8 %48, label %183 [
    i8 34, label %50
    i8 92, label %69
    i8 8, label %88
    i8 12, label %107
    i8 10, label %126
    i8 13, label %145
    i8 9, label %164
  ]

50:                                               ; preds = %45
  %51 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  %52 = bitcast %"class.std::__1::basic_string"* %51 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %53 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %52, i64 0, i32 1, i32 0
  %54 = load i8, i8* %53, align 1
  %55 = icmp slt i8 %54, 0
  br i1 %55, label %56, label %61

56:                                               ; preds = %50
  %57 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %51, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = load i8*, i8** %57, align 8
  %59 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %51, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %60 = load i64, i64* %59, align 8
  br label %64

61:                                               ; preds = %50
  %62 = bitcast %"class.std::__1::basic_string"* %51 to i8*
  %63 = zext i8 %54 to i64
  br label %64

64:                                               ; preds = %56, %61
  %65 = phi i8* [ %58, %56 ], [ %62, %61 ]
  %66 = phi i64 [ %60, %56 ], [ %63, %61 ]
  %67 = getelementptr inbounds i8, i8* %65, i64 %66
  %68 = tail call i8* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertIPKcEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueEE13_EnableIfImplINS_11__wrap_iterIPcEEEENSD_IS8_EESA_SA_(%"class.std::__1::basic_string"* %51, i8* %67, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 2)) #12
  br label %382

69:                                               ; preds = %45
  %70 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  %71 = bitcast %"class.std::__1::basic_string"* %70 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %72 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %71, i64 0, i32 1, i32 0
  %73 = load i8, i8* %72, align 1
  %74 = icmp slt i8 %73, 0
  br i1 %74, label %75, label %80

75:                                               ; preds = %69
  %76 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %70, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %77 = load i8*, i8** %76, align 8
  %78 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %70, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %79 = load i64, i64* %78, align 8
  br label %83

80:                                               ; preds = %69
  %81 = bitcast %"class.std::__1::basic_string"* %70 to i8*
  %82 = zext i8 %73 to i64
  br label %83

83:                                               ; preds = %75, %80
  %84 = phi i8* [ %77, %75 ], [ %81, %80 ]
  %85 = phi i64 [ %79, %75 ], [ %82, %80 ]
  %86 = getelementptr inbounds i8, i8* %84, i64 %85
  %87 = tail call i8* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertIPKcEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueEE13_EnableIfImplINS_11__wrap_iterIPcEEEENSD_IS8_EESA_SA_(%"class.std::__1::basic_string"* %70, i8* %86, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 2)) #12
  br label %382

88:                                               ; preds = %45
  %89 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  %90 = bitcast %"class.std::__1::basic_string"* %89 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %91 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %90, i64 0, i32 1, i32 0
  %92 = load i8, i8* %91, align 1
  %93 = icmp slt i8 %92, 0
  br i1 %93, label %94, label %99

94:                                               ; preds = %88
  %95 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %89, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %96 = load i8*, i8** %95, align 8
  %97 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %89, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %98 = load i64, i64* %97, align 8
  br label %102

99:                                               ; preds = %88
  %100 = bitcast %"class.std::__1::basic_string"* %89 to i8*
  %101 = zext i8 %92 to i64
  br label %102

102:                                              ; preds = %94, %99
  %103 = phi i8* [ %96, %94 ], [ %100, %99 ]
  %104 = phi i64 [ %98, %94 ], [ %101, %99 ]
  %105 = getelementptr inbounds i8, i8* %103, i64 %104
  %106 = tail call i8* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertIPKcEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueEE13_EnableIfImplINS_11__wrap_iterIPcEEEENSD_IS8_EESA_SA_(%"class.std::__1::basic_string"* %89, i8* %105, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 2)) #12
  br label %382

107:                                              ; preds = %45
  %108 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  %109 = bitcast %"class.std::__1::basic_string"* %108 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %110 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %109, i64 0, i32 1, i32 0
  %111 = load i8, i8* %110, align 1
  %112 = icmp slt i8 %111, 0
  br i1 %112, label %113, label %118

113:                                              ; preds = %107
  %114 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %108, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %115 = load i8*, i8** %114, align 8
  %116 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %108, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %117 = load i64, i64* %116, align 8
  br label %121

118:                                              ; preds = %107
  %119 = bitcast %"class.std::__1::basic_string"* %108 to i8*
  %120 = zext i8 %111 to i64
  br label %121

121:                                              ; preds = %113, %118
  %122 = phi i8* [ %115, %113 ], [ %119, %118 ]
  %123 = phi i64 [ %117, %113 ], [ %120, %118 ]
  %124 = getelementptr inbounds i8, i8* %122, i64 %123
  %125 = tail call i8* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertIPKcEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueEE13_EnableIfImplINS_11__wrap_iterIPcEEEENSD_IS8_EESA_SA_(%"class.std::__1::basic_string"* %108, i8* %124, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 2)) #12
  br label %382

126:                                              ; preds = %45
  %127 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  %128 = bitcast %"class.std::__1::basic_string"* %127 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %129 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %128, i64 0, i32 1, i32 0
  %130 = load i8, i8* %129, align 1
  %131 = icmp slt i8 %130, 0
  br i1 %131, label %132, label %137

132:                                              ; preds = %126
  %133 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %127, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %134 = load i8*, i8** %133, align 8
  %135 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %127, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %136 = load i64, i64* %135, align 8
  br label %140

137:                                              ; preds = %126
  %138 = bitcast %"class.std::__1::basic_string"* %127 to i8*
  %139 = zext i8 %130 to i64
  br label %140

140:                                              ; preds = %132, %137
  %141 = phi i8* [ %134, %132 ], [ %138, %137 ]
  %142 = phi i64 [ %136, %132 ], [ %139, %137 ]
  %143 = getelementptr inbounds i8, i8* %141, i64 %142
  %144 = tail call i8* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertIPKcEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueEE13_EnableIfImplINS_11__wrap_iterIPcEEEENSD_IS8_EESA_SA_(%"class.std::__1::basic_string"* %127, i8* %143, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 2)) #12
  br label %382

145:                                              ; preds = %45
  %146 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  %147 = bitcast %"class.std::__1::basic_string"* %146 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %148 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %147, i64 0, i32 1, i32 0
  %149 = load i8, i8* %148, align 1
  %150 = icmp slt i8 %149, 0
  br i1 %150, label %151, label %156

151:                                              ; preds = %145
  %152 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %146, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %153 = load i8*, i8** %152, align 8
  %154 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %146, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %155 = load i64, i64* %154, align 8
  br label %159

156:                                              ; preds = %145
  %157 = bitcast %"class.std::__1::basic_string"* %146 to i8*
  %158 = zext i8 %149 to i64
  br label %159

159:                                              ; preds = %151, %156
  %160 = phi i8* [ %153, %151 ], [ %157, %156 ]
  %161 = phi i64 [ %155, %151 ], [ %158, %156 ]
  %162 = getelementptr inbounds i8, i8* %160, i64 %161
  %163 = tail call i8* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertIPKcEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueEE13_EnableIfImplINS_11__wrap_iterIPcEEEENSD_IS8_EESA_SA_(%"class.std::__1::basic_string"* %146, i8* %162, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 2)) #12
  br label %382

164:                                              ; preds = %45
  %165 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  %166 = bitcast %"class.std::__1::basic_string"* %165 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %167 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %166, i64 0, i32 1, i32 0
  %168 = load i8, i8* %167, align 1
  %169 = icmp slt i8 %168, 0
  br i1 %169, label %170, label %175

170:                                              ; preds = %164
  %171 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %165, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %172 = load i8*, i8** %171, align 8
  %173 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %165, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %174 = load i64, i64* %173, align 8
  br label %178

175:                                              ; preds = %164
  %176 = bitcast %"class.std::__1::basic_string"* %165 to i8*
  %177 = zext i8 %168 to i64
  br label %178

178:                                              ; preds = %170, %175
  %179 = phi i8* [ %172, %170 ], [ %176, %175 ]
  %180 = phi i64 [ %174, %170 ], [ %177, %175 ]
  %181 = getelementptr inbounds i8, i8* %179, i64 %180
  %182 = tail call i8* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertIPKcEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueEE13_EnableIfImplINS_11__wrap_iterIPcEEEENSD_IS8_EESA_SA_(%"class.std::__1::basic_string"* %165, i8* %181, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 2)) #12
  br label %382

183:                                              ; preds = %45
  %184 = icmp ugt i8 %48, 31
  %185 = icmp sgt i8 %48, -1
  %186 = and i1 %184, %185
  br i1 %186, label %187, label %189

187:                                              ; preds = %183
  %188 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %188, i8 signext %48) #12
  br label %382

189:                                              ; preds = %183
  %190 = icmp ult i8 %48, 32
  br i1 %190, label %191, label %217

191:                                              ; preds = %189
  %192 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  %193 = bitcast %"class.std::__1::basic_string"* %192 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %194 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %193, i64 0, i32 1, i32 0
  %195 = load i8, i8* %194, align 1
  %196 = icmp slt i8 %195, 0
  br i1 %196, label %197, label %202

197:                                              ; preds = %191
  %198 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %192, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %199 = load i8*, i8** %198, align 8
  %200 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %192, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %201 = load i64, i64* %200, align 8
  br label %205

202:                                              ; preds = %191
  %203 = bitcast %"class.std::__1::basic_string"* %192 to i8*
  %204 = zext i8 %195 to i64
  br label %205

205:                                              ; preds = %197, %202
  %206 = phi i8* [ %199, %197 ], [ %203, %202 ]
  %207 = phi i64 [ %201, %197 ], [ %204, %202 ]
  %208 = getelementptr inbounds i8, i8* %206, i64 %207
  %209 = tail call i8* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertIPKcEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueEE13_EnableIfImplINS_11__wrap_iterIPcEEEENSD_IS8_EESA_SA_(%"class.std::__1::basic_string"* %192, i8* %208, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 2)) #12
  %210 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %210, i8 signext 48) #12
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %210, i8 signext 48) #12
  %211 = lshr i8 %48, 4
  %212 = or i8 %211, 48
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %210, i8 signext %212) #12
  %213 = and i8 %48, 15
  %214 = icmp ult i8 %213, 10
  %215 = select i1 %214, i8 48, i8 87
  %216 = add nuw nsw i8 %215, %213
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %210, i8 signext %216) #12
  br label %382

217:                                              ; preds = %189
  %218 = and i32 %49, 224
  %219 = icmp eq i32 %218, 192
  br i1 %219, label %226, label %220

220:                                              ; preds = %217
  %221 = and i32 %49, 240
  %222 = icmp eq i32 %221, 224
  br i1 %222, label %226, label %223

223:                                              ; preds = %220
  %224 = and i32 %49, 248
  %225 = icmp eq i32 %224, 240
  br i1 %225, label %226, label %382

226:                                              ; preds = %223, %220, %217
  %227 = phi i32 [ 31, %217 ], [ 15, %220 ], [ 7, %223 ]
  %228 = phi i32 [ 1, %217 ], [ 2, %220 ], [ 3, %223 ]
  %229 = zext i32 %228 to i64
  %230 = add i64 %46, %229
  %231 = icmp ult i64 %230, %2
  br i1 %231, label %232, label %382

232:                                              ; preds = %226
  %233 = and i32 %227, %49
  %234 = add nsw i32 %228, -1
  %235 = zext i32 %234 to i64
  %236 = add i64 %46, 1
  %237 = getelementptr inbounds i8, i8* %1, i64 %236
  %238 = load i8, i8* %237, align 1
  %239 = zext i8 %238 to i32
  %240 = and i32 %239, 192
  %241 = icmp ne i32 %240, 128
  %242 = shl nuw nsw i32 %233, 6
  %243 = and i32 %239, 63
  %244 = or i32 %243, %242
  %245 = icmp ugt i32 %228, 1
  br i1 %245, label %387, label %246

246:                                              ; preds = %399, %387, %232
  %247 = phi i32 [ %233, %232 ], [ %244, %387 ], [ %397, %399 ]
  %248 = phi i8 [ %238, %232 ], [ %390, %387 ], [ %402, %399 ]
  %249 = phi i1 [ %241, %232 ], [ %394, %387 ], [ %406, %399 ]
  %250 = phi i32 [ %242, %232 ], [ %395, %387 ], [ %407, %399 ]
  %251 = phi i32 [ %244, %232 ], [ %397, %387 ], [ %409, %399 ]
  %252 = add i64 %46, 1
  %253 = add i64 %252, %235
  %254 = add i32 %251, -128
  %255 = icmp ugt i32 %254, 1113983
  %256 = or i1 %255, %249
  br i1 %256, label %382, label %257

257:                                              ; preds = %246
  %258 = icmp ult i32 %251, 65536
  br i1 %258, label %259, label %302

259:                                              ; preds = %257
  %260 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  %261 = bitcast %"class.std::__1::basic_string"* %260 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %262 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %261, i64 0, i32 1, i32 0
  %263 = load i8, i8* %262, align 1
  %264 = icmp slt i8 %263, 0
  br i1 %264, label %265, label %270

265:                                              ; preds = %259
  %266 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %260, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %267 = load i8*, i8** %266, align 8
  %268 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %260, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %269 = load i64, i64* %268, align 8
  br label %273

270:                                              ; preds = %259
  %271 = bitcast %"class.std::__1::basic_string"* %260 to i8*
  %272 = zext i8 %263 to i64
  br label %273

273:                                              ; preds = %265, %270
  %274 = phi i8* [ %267, %265 ], [ %271, %270 ]
  %275 = phi i64 [ %269, %265 ], [ %272, %270 ]
  %276 = getelementptr inbounds i8, i8* %274, i64 %275
  %277 = tail call i8* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertIPKcEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueEE13_EnableIfImplINS_11__wrap_iterIPcEEEENSD_IS8_EESA_SA_(%"class.std::__1::basic_string"* %260, i8* %276, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 2)) #12
  %278 = trunc i32 %250 to i16
  %279 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  %280 = lshr i32 %247, 6
  %281 = and i32 %280, 15
  %282 = icmp ult i16 %278, -24576
  %283 = select i1 %282, i32 48, i32 87
  %284 = add nuw nsw i32 %283, %281
  %285 = trunc i32 %284 to i8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %279, i8 signext %285) #12
  %286 = lshr i32 %247, 2
  %287 = and i32 %286, 15
  %288 = icmp ult i32 %287, 10
  %289 = select i1 %288, i32 48, i32 87
  %290 = add nuw nsw i32 %289, %287
  %291 = trunc i32 %290 to i8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %279, i8 signext %291) #12
  %292 = lshr i32 %251, 4
  %293 = and i32 %292, 15
  %294 = icmp ult i32 %293, 10
  %295 = select i1 %294, i32 48, i32 87
  %296 = add nuw nsw i32 %295, %293
  %297 = trunc i32 %296 to i8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %279, i8 signext %297) #12
  %298 = and i8 %248, 15
  %299 = icmp ult i8 %298, 10
  %300 = select i1 %299, i8 48, i8 87
  %301 = add nuw i8 %300, %298
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %279, i8 signext %301) #12
  br label %382

302:                                              ; preds = %257
  %303 = add nsw i32 %251, -65536
  %304 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  %305 = bitcast %"class.std::__1::basic_string"* %304 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %306 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %305, i64 0, i32 1, i32 0
  %307 = load i8, i8* %306, align 1
  %308 = icmp slt i8 %307, 0
  br i1 %308, label %309, label %314

309:                                              ; preds = %302
  %310 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %304, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %311 = load i8*, i8** %310, align 8
  %312 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %304, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %313 = load i64, i64* %312, align 8
  br label %317

314:                                              ; preds = %302
  %315 = bitcast %"class.std::__1::basic_string"* %304 to i8*
  %316 = zext i8 %307 to i64
  br label %317

317:                                              ; preds = %309, %314
  %318 = phi i8* [ %311, %309 ], [ %315, %314 ]
  %319 = phi i64 [ %313, %309 ], [ %316, %314 ]
  %320 = getelementptr inbounds i8, i8* %318, i64 %319
  %321 = tail call i8* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertIPKcEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueEE13_EnableIfImplINS_11__wrap_iterIPcEEEENSD_IS8_EESA_SA_(%"class.std::__1::basic_string"* %304, i8* %320, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 2)) #12
  %322 = lshr i32 %303, 10
  %323 = trunc i32 %322 to i16
  %324 = add nuw nsw i16 %323, -10240
  %325 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  %326 = zext i16 %324 to i32
  %327 = lshr i16 %324, 12
  %328 = trunc i16 %327 to i8
  %329 = add nuw nsw i8 %328, 87
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %325, i8 signext %329) #12
  %330 = lshr i32 %326, 8
  %331 = and i32 %330, 15
  %332 = icmp ult i32 %331, 10
  %333 = select i1 %332, i32 48, i32 87
  %334 = add nuw nsw i32 %333, %331
  %335 = trunc i32 %334 to i8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %325, i8 signext %335) #12
  %336 = lshr i32 %326, 4
  %337 = and i32 %336, 15
  %338 = icmp ult i32 %337, 10
  %339 = select i1 %338, i32 48, i32 87
  %340 = add nuw nsw i32 %339, %337
  %341 = trunc i32 %340 to i8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %325, i8 signext %341) #12
  %342 = and i32 %326, 15
  %343 = icmp ult i32 %342, 10
  %344 = select i1 %343, i32 48, i32 87
  %345 = add nuw nsw i32 %344, %342
  %346 = trunc i32 %345 to i8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %325, i8 signext %346) #12
  %347 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  %348 = bitcast %"class.std::__1::basic_string"* %347 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %349 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %348, i64 0, i32 1, i32 0
  %350 = load i8, i8* %349, align 1
  %351 = icmp slt i8 %350, 0
  br i1 %351, label %352, label %357

352:                                              ; preds = %317
  %353 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %347, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %354 = load i8*, i8** %353, align 8
  %355 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %347, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %356 = load i64, i64* %355, align 8
  br label %360

357:                                              ; preds = %317
  %358 = bitcast %"class.std::__1::basic_string"* %347 to i8*
  %359 = zext i8 %350 to i64
  br label %360

360:                                              ; preds = %352, %357
  %361 = phi i8* [ %354, %352 ], [ %358, %357 ]
  %362 = phi i64 [ %356, %352 ], [ %359, %357 ]
  %363 = getelementptr inbounds i8, i8* %361, i64 %362
  %364 = tail call i8* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertIPKcEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueEE13_EnableIfImplINS_11__wrap_iterIPcEEEENSD_IS8_EESA_SA_(%"class.std::__1::basic_string"* %347, i8* %363, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 2)) #12
  %365 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %365, i8 signext 100) #12
  %366 = lshr i32 %303, 8
  %367 = trunc i32 %366 to i8
  %368 = and i8 %367, 3
  %369 = or i8 %368, 12
  %370 = add nuw nsw i8 %369, 87
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %365, i8 signext %370) #12
  %371 = lshr i32 %303, 4
  %372 = and i32 %371, 15
  %373 = icmp ult i32 %372, 10
  %374 = select i1 %373, i32 48, i32 87
  %375 = add nuw nsw i32 %374, %372
  %376 = trunc i32 %375 to i8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %365, i8 signext %376) #12
  %377 = and i32 %303, 15
  %378 = icmp ult i32 %377, 10
  %379 = select i1 %378, i32 48, i32 87
  %380 = add nuw nsw i32 %379, %377
  %381 = trunc i32 %380 to i8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %365, i8 signext %381) #12
  br label %382

382:                                              ; preds = %223, %226, %360, %273, %246, %64, %102, %140, %178, %205, %187, %159, %121, %83
  %383 = phi i64 [ %46, %64 ], [ %46, %83 ], [ %46, %102 ], [ %46, %121 ], [ %46, %140 ], [ %46, %159 ], [ %46, %178 ], [ %46, %187 ], [ %46, %205 ], [ %46, %223 ], [ %46, %226 ], [ %253, %246 ], [ %253, %360 ], [ %253, %273 ]
  %384 = add i64 %383, 1
  %385 = icmp ult i64 %384, %2
  br i1 %385, label %45, label %43

386:                                              ; preds = %3, %43
  ret void

387:                                              ; preds = %232
  %388 = add i64 %46, 2
  %389 = getelementptr inbounds i8, i8* %1, i64 %388
  %390 = load i8, i8* %389, align 1
  %391 = zext i8 %390 to i32
  %392 = and i32 %391, 192
  %393 = icmp ne i32 %392, 128
  %394 = or i1 %241, %393
  %395 = shl nuw nsw i32 %244, 6
  %396 = and i32 %391, 63
  %397 = or i32 %396, %395
  %398 = icmp eq i32 %228, 3
  br i1 %398, label %399, label %246

399:                                              ; preds = %387
  %400 = add i64 %46, 3
  %401 = getelementptr inbounds i8, i8* %1, i64 %400
  %402 = load i8, i8* %401, align 1
  %403 = zext i8 %402 to i32
  %404 = and i32 %403, 192
  %405 = icmp ne i32 %404, 128
  %406 = or i1 %394, %405
  %407 = shl nuw nsw i32 %397, 6
  %408 = and i32 %403, 63
  %409 = or i32 %408, %407
  br label %246
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE14HandleString16ENS_4spanItEE(%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* nocapture readonly, i16*, i64) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 2
  %5 = load %"struct.v8_crdtp::Status"*, %"struct.v8_crdtp::Status"** %4, align 8
  %6 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %5, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %234

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 2, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = add i64 %11, -1
  %15 = add i64 %14, %13
  %16 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %17 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %16, align 8
  %18 = lshr i64 %15, 9
  %19 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %17, i64 %18
  %20 = load %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %19, align 8
  %21 = and i64 %15, 511
  %22 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 1
  %23 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  %24 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %20, i64 %21, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %39, label %27

27:                                               ; preds = %9
  %28 = and i32 %25, 1
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %35, label %30

30:                                               ; preds = %27
  %31 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %20, i64 %21, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %32, 2
  %34 = select i1 %33, i8 44, i8 58
  br label %35

35:                                               ; preds = %30, %27
  %36 = phi i8 [ 44, %27 ], [ %34, %30 ]
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %23, i8 signext %36) #12
  %37 = load i32, i32* %24, align 4
  %38 = add i32 %37, 1
  br label %39

39:                                               ; preds = %9, %35
  %40 = phi i32 [ 1, %9 ], [ %38, %35 ]
  store i32 %40, i32* %24, align 4
  %41 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %41, i8 signext 34) #12
  %42 = getelementptr inbounds i16, i16* %1, i64 %2
  %43 = icmp eq i64 %2, 0
  br i1 %43, label %44, label %46

44:                                               ; preds = %231, %39
  %45 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %45, i8 signext 34) #12
  br label %234

46:                                               ; preds = %39, %231
  %47 = phi i16* [ %232, %231 ], [ %1, %39 ]
  %48 = load i16, i16* %47, align 2
  switch i16 %48, label %182 [
    i16 34, label %49
    i16 92, label %68
    i16 8, label %87
    i16 12, label %106
    i16 10, label %125
    i16 13, label %144
    i16 9, label %163
  ]

49:                                               ; preds = %46
  %50 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  %51 = bitcast %"class.std::__1::basic_string"* %50 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %52 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %51, i64 0, i32 1, i32 0
  %53 = load i8, i8* %52, align 1
  %54 = icmp slt i8 %53, 0
  br i1 %54, label %55, label %60

55:                                               ; preds = %49
  %56 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %50, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %57 = load i8*, i8** %56, align 8
  %58 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %50, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %59 = load i64, i64* %58, align 8
  br label %63

60:                                               ; preds = %49
  %61 = bitcast %"class.std::__1::basic_string"* %50 to i8*
  %62 = zext i8 %53 to i64
  br label %63

63:                                               ; preds = %55, %60
  %64 = phi i8* [ %57, %55 ], [ %61, %60 ]
  %65 = phi i64 [ %59, %55 ], [ %62, %60 ]
  %66 = getelementptr inbounds i8, i8* %64, i64 %65
  %67 = tail call i8* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertIPKcEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueEE13_EnableIfImplINS_11__wrap_iterIPcEEEENSD_IS8_EESA_SA_(%"class.std::__1::basic_string"* %50, i8* %66, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 2)) #12
  br label %231

68:                                               ; preds = %46
  %69 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  %70 = bitcast %"class.std::__1::basic_string"* %69 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %71 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %70, i64 0, i32 1, i32 0
  %72 = load i8, i8* %71, align 1
  %73 = icmp slt i8 %72, 0
  br i1 %73, label %74, label %79

74:                                               ; preds = %68
  %75 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %69, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %76 = load i8*, i8** %75, align 8
  %77 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %69, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %78 = load i64, i64* %77, align 8
  br label %82

79:                                               ; preds = %68
  %80 = bitcast %"class.std::__1::basic_string"* %69 to i8*
  %81 = zext i8 %72 to i64
  br label %82

82:                                               ; preds = %74, %79
  %83 = phi i8* [ %76, %74 ], [ %80, %79 ]
  %84 = phi i64 [ %78, %74 ], [ %81, %79 ]
  %85 = getelementptr inbounds i8, i8* %83, i64 %84
  %86 = tail call i8* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertIPKcEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueEE13_EnableIfImplINS_11__wrap_iterIPcEEEENSD_IS8_EESA_SA_(%"class.std::__1::basic_string"* %69, i8* %85, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 2)) #12
  br label %231

87:                                               ; preds = %46
  %88 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  %89 = bitcast %"class.std::__1::basic_string"* %88 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %90 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %89, i64 0, i32 1, i32 0
  %91 = load i8, i8* %90, align 1
  %92 = icmp slt i8 %91, 0
  br i1 %92, label %93, label %98

93:                                               ; preds = %87
  %94 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %88, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %95 = load i8*, i8** %94, align 8
  %96 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %88, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %97 = load i64, i64* %96, align 8
  br label %101

98:                                               ; preds = %87
  %99 = bitcast %"class.std::__1::basic_string"* %88 to i8*
  %100 = zext i8 %91 to i64
  br label %101

101:                                              ; preds = %93, %98
  %102 = phi i8* [ %95, %93 ], [ %99, %98 ]
  %103 = phi i64 [ %97, %93 ], [ %100, %98 ]
  %104 = getelementptr inbounds i8, i8* %102, i64 %103
  %105 = tail call i8* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertIPKcEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueEE13_EnableIfImplINS_11__wrap_iterIPcEEEENSD_IS8_EESA_SA_(%"class.std::__1::basic_string"* %88, i8* %104, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 2)) #12
  br label %231

106:                                              ; preds = %46
  %107 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  %108 = bitcast %"class.std::__1::basic_string"* %107 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %109 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %108, i64 0, i32 1, i32 0
  %110 = load i8, i8* %109, align 1
  %111 = icmp slt i8 %110, 0
  br i1 %111, label %112, label %117

112:                                              ; preds = %106
  %113 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %107, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %114 = load i8*, i8** %113, align 8
  %115 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %107, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %116 = load i64, i64* %115, align 8
  br label %120

117:                                              ; preds = %106
  %118 = bitcast %"class.std::__1::basic_string"* %107 to i8*
  %119 = zext i8 %110 to i64
  br label %120

120:                                              ; preds = %112, %117
  %121 = phi i8* [ %114, %112 ], [ %118, %117 ]
  %122 = phi i64 [ %116, %112 ], [ %119, %117 ]
  %123 = getelementptr inbounds i8, i8* %121, i64 %122
  %124 = tail call i8* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertIPKcEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueEE13_EnableIfImplINS_11__wrap_iterIPcEEEENSD_IS8_EESA_SA_(%"class.std::__1::basic_string"* %107, i8* %123, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 2)) #12
  br label %231

125:                                              ; preds = %46
  %126 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  %127 = bitcast %"class.std::__1::basic_string"* %126 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %128 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %127, i64 0, i32 1, i32 0
  %129 = load i8, i8* %128, align 1
  %130 = icmp slt i8 %129, 0
  br i1 %130, label %131, label %136

131:                                              ; preds = %125
  %132 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %133 = load i8*, i8** %132, align 8
  %134 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %135 = load i64, i64* %134, align 8
  br label %139

136:                                              ; preds = %125
  %137 = bitcast %"class.std::__1::basic_string"* %126 to i8*
  %138 = zext i8 %129 to i64
  br label %139

139:                                              ; preds = %131, %136
  %140 = phi i8* [ %133, %131 ], [ %137, %136 ]
  %141 = phi i64 [ %135, %131 ], [ %138, %136 ]
  %142 = getelementptr inbounds i8, i8* %140, i64 %141
  %143 = tail call i8* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertIPKcEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueEE13_EnableIfImplINS_11__wrap_iterIPcEEEENSD_IS8_EESA_SA_(%"class.std::__1::basic_string"* %126, i8* %142, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 2)) #12
  br label %231

144:                                              ; preds = %46
  %145 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  %146 = bitcast %"class.std::__1::basic_string"* %145 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %147 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %146, i64 0, i32 1, i32 0
  %148 = load i8, i8* %147, align 1
  %149 = icmp slt i8 %148, 0
  br i1 %149, label %150, label %155

150:                                              ; preds = %144
  %151 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %145, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %152 = load i8*, i8** %151, align 8
  %153 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %145, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %154 = load i64, i64* %153, align 8
  br label %158

155:                                              ; preds = %144
  %156 = bitcast %"class.std::__1::basic_string"* %145 to i8*
  %157 = zext i8 %148 to i64
  br label %158

158:                                              ; preds = %150, %155
  %159 = phi i8* [ %152, %150 ], [ %156, %155 ]
  %160 = phi i64 [ %154, %150 ], [ %157, %155 ]
  %161 = getelementptr inbounds i8, i8* %159, i64 %160
  %162 = tail call i8* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertIPKcEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueEE13_EnableIfImplINS_11__wrap_iterIPcEEEENSD_IS8_EESA_SA_(%"class.std::__1::basic_string"* %145, i8* %161, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 2)) #12
  br label %231

163:                                              ; preds = %46
  %164 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  %165 = bitcast %"class.std::__1::basic_string"* %164 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %166 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %165, i64 0, i32 1, i32 0
  %167 = load i8, i8* %166, align 1
  %168 = icmp slt i8 %167, 0
  br i1 %168, label %169, label %174

169:                                              ; preds = %163
  %170 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %164, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %171 = load i8*, i8** %170, align 8
  %172 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %164, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %173 = load i64, i64* %172, align 8
  br label %177

174:                                              ; preds = %163
  %175 = bitcast %"class.std::__1::basic_string"* %164 to i8*
  %176 = zext i8 %167 to i64
  br label %177

177:                                              ; preds = %169, %174
  %178 = phi i8* [ %171, %169 ], [ %175, %174 ]
  %179 = phi i64 [ %173, %169 ], [ %176, %174 ]
  %180 = getelementptr inbounds i8, i8* %178, i64 %179
  %181 = tail call i8* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertIPKcEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueEE13_EnableIfImplINS_11__wrap_iterIPcEEEENSD_IS8_EESA_SA_(%"class.std::__1::basic_string"* %164, i8* %180, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 2)) #12
  br label %231

182:                                              ; preds = %46
  %183 = add i16 %48, -32
  %184 = icmp ult i16 %183, 96
  br i1 %184, label %185, label %188

185:                                              ; preds = %182
  %186 = trunc i16 %48 to i8
  %187 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %187, i8 signext %186) #12
  br label %231

188:                                              ; preds = %182
  %189 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  %190 = bitcast %"class.std::__1::basic_string"* %189 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %191 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %190, i64 0, i32 1, i32 0
  %192 = load i8, i8* %191, align 1
  %193 = icmp slt i8 %192, 0
  br i1 %193, label %194, label %199

194:                                              ; preds = %188
  %195 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %189, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %196 = load i8*, i8** %195, align 8
  %197 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %189, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %198 = load i64, i64* %197, align 8
  br label %202

199:                                              ; preds = %188
  %200 = bitcast %"class.std::__1::basic_string"* %189 to i8*
  %201 = zext i8 %192 to i64
  br label %202

202:                                              ; preds = %194, %199
  %203 = phi i8* [ %196, %194 ], [ %200, %199 ]
  %204 = phi i64 [ %198, %194 ], [ %201, %199 ]
  %205 = getelementptr inbounds i8, i8* %203, i64 %204
  %206 = tail call i8* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertIPKcEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueEE13_EnableIfImplINS_11__wrap_iterIPcEEEENSD_IS8_EESA_SA_(%"class.std::__1::basic_string"* %189, i8* %205, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 2)) #12
  %207 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  %208 = zext i16 %48 to i32
  %209 = lshr i32 %208, 12
  %210 = icmp ult i16 %48, -24576
  %211 = select i1 %210, i32 48, i32 87
  %212 = add nuw nsw i32 %211, %209
  %213 = trunc i32 %212 to i8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %207, i8 signext %213) #12
  %214 = lshr i32 %208, 8
  %215 = and i32 %214, 15
  %216 = icmp ult i32 %215, 10
  %217 = select i1 %216, i32 48, i32 87
  %218 = add nuw nsw i32 %217, %215
  %219 = trunc i32 %218 to i8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %207, i8 signext %219) #12
  %220 = lshr i32 %208, 4
  %221 = and i32 %220, 15
  %222 = icmp ult i32 %221, 10
  %223 = select i1 %222, i32 48, i32 87
  %224 = add nuw nsw i32 %223, %221
  %225 = trunc i32 %224 to i8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %207, i8 signext %225) #12
  %226 = and i32 %208, 15
  %227 = icmp ult i32 %226, 10
  %228 = select i1 %227, i32 48, i32 87
  %229 = add nuw nsw i32 %228, %226
  %230 = trunc i32 %229 to i8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %207, i8 signext %230) #12
  br label %231

231:                                              ; preds = %82, %120, %158, %185, %202, %177, %139, %101, %63
  %232 = getelementptr inbounds i16, i16* %47, i64 1
  %233 = icmp eq i16* %232, %42
  br i1 %233, label %44, label %46

234:                                              ; preds = %3, %44
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE12HandleBinaryENS_4spanIhEE(%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* nocapture readonly, i8*, i64) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 2
  %5 = load %"struct.v8_crdtp::Status"*, %"struct.v8_crdtp::Status"** %4, align 8
  %6 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %5, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %131

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 2, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = add i64 %11, -1
  %15 = add i64 %14, %13
  %16 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %17 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %16, align 8
  %18 = lshr i64 %15, 9
  %19 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %17, i64 %18
  %20 = load %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %19, align 8
  %21 = and i64 %15, 511
  %22 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 1
  %23 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  %24 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %20, i64 %21, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %39, label %27

27:                                               ; preds = %9
  %28 = and i32 %25, 1
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %35, label %30

30:                                               ; preds = %27
  %31 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %20, i64 %21, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %32, 2
  %34 = select i1 %33, i8 44, i8 58
  br label %35

35:                                               ; preds = %30, %27
  %36 = phi i8 [ 44, %27 ], [ %34, %30 ]
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %23, i8 signext %36) #12
  %37 = load i32, i32* %24, align 4
  %38 = add i32 %37, 1
  br label %39

39:                                               ; preds = %9, %35
  %40 = phi i32 [ 1, %9 ], [ %38, %35 ]
  store i32 %40, i32* %24, align 4
  %41 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %41, i8 signext 34) #12
  %42 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  %43 = icmp ult i64 %2, 3
  br i1 %43, label %82, label %44

44:                                               ; preds = %39, %44
  %45 = phi i64 [ %80, %44 ], [ 3, %39 ]
  %46 = phi i64 [ %45, %44 ], [ 0, %39 ]
  %47 = getelementptr inbounds i8, i8* %1, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = shl nuw nsw i32 %49, 16
  %51 = add i64 %46, 1
  %52 = getelementptr inbounds i8, i8* %1, i64 %51
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = shl nuw nsw i32 %54, 8
  %56 = or i32 %55, %50
  %57 = add i64 %46, 2
  %58 = getelementptr inbounds i8, i8* %1, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = or i32 %55, %60
  %62 = lshr i32 %49, 2
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds [65 x i8], [65 x i8]* @_ZN8v8_crdtp4json12_GLOBAL__N_112kBase64TableE, i64 0, i64 %63
  %65 = load i8, i8* %64, align 1
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %42, i8 signext %65) #12
  %66 = lshr i32 %56, 12
  %67 = and i32 %66, 63
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds [65 x i8], [65 x i8]* @_ZN8v8_crdtp4json12_GLOBAL__N_112kBase64TableE, i64 0, i64 %68
  %70 = load i8, i8* %69, align 1
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %42, i8 signext %70) #12
  %71 = lshr i32 %61, 6
  %72 = and i32 %71, 63
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds [65 x i8], [65 x i8]* @_ZN8v8_crdtp4json12_GLOBAL__N_112kBase64TableE, i64 0, i64 %73
  %75 = load i8, i8* %74, align 1
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %42, i8 signext %75) #12
  %76 = and i32 %60, 63
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds [65 x i8], [65 x i8]* @_ZN8v8_crdtp4json12_GLOBAL__N_112kBase64TableE, i64 0, i64 %77
  %79 = load i8, i8* %78, align 1
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %42, i8 signext %79) #12
  %80 = add i64 %45, 3
  %81 = icmp ugt i64 %80, %2
  br i1 %81, label %82, label %44

82:                                               ; preds = %44, %39
  %83 = phi i64 [ 0, %39 ], [ %45, %44 ]
  %84 = add i64 %83, 2
  %85 = icmp ugt i64 %84, %2
  br i1 %85, label %111, label %86

86:                                               ; preds = %82
  %87 = getelementptr inbounds i8, i8* %1, i64 %83
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = shl nuw nsw i32 %89, 16
  %91 = add i64 %83, 1
  %92 = getelementptr inbounds i8, i8* %1, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = shl nuw nsw i32 %94, 8
  %96 = or i32 %95, %90
  %97 = lshr i32 %89, 2
  %98 = zext i32 %97 to i64
  %99 = getelementptr inbounds [65 x i8], [65 x i8]* @_ZN8v8_crdtp4json12_GLOBAL__N_112kBase64TableE, i64 0, i64 %98
  %100 = load i8, i8* %99, align 1
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %42, i8 signext %100) #12
  %101 = lshr i32 %96, 12
  %102 = and i32 %101, 63
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds [65 x i8], [65 x i8]* @_ZN8v8_crdtp4json12_GLOBAL__N_112kBase64TableE, i64 0, i64 %103
  %105 = load i8, i8* %104, align 1
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %42, i8 signext %105) #12
  %106 = shl nuw nsw i32 %94, 2
  %107 = and i32 %106, 60
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds [65 x i8], [65 x i8]* @_ZN8v8_crdtp4json12_GLOBAL__N_112kBase64TableE, i64 0, i64 %108
  %110 = load i8, i8* %109, align 4
  br label %127

111:                                              ; preds = %82
  %112 = add i64 %83, 1
  %113 = icmp ugt i64 %112, %2
  br i1 %113, label %129, label %114

114:                                              ; preds = %111
  %115 = getelementptr inbounds i8, i8* %1, i64 %83
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %116 to i32
  %118 = shl nuw nsw i32 %117, 4
  %119 = lshr i32 %117, 2
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds [65 x i8], [65 x i8]* @_ZN8v8_crdtp4json12_GLOBAL__N_112kBase64TableE, i64 0, i64 %120
  %122 = load i8, i8* %121, align 1
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %42, i8 signext %122) #12
  %123 = and i32 %118, 48
  %124 = zext i32 %123 to i64
  %125 = getelementptr inbounds [65 x i8], [65 x i8]* @_ZN8v8_crdtp4json12_GLOBAL__N_112kBase64TableE, i64 0, i64 %124
  %126 = load i8, i8* %125, align 16
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %42, i8 signext %126) #12
  br label %127

127:                                              ; preds = %114, %86
  %128 = phi i8 [ %110, %86 ], [ 61, %114 ]
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %42, i8 signext %128) #12
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %42, i8 signext 61) #12
  br label %129

129:                                              ; preds = %127, %111
  %130 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %130, i8 signext 34) #12
  br label %131

131:                                              ; preds = %3, %129
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE12HandleDoubleEd(%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* nocapture readonly, double) unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 2
  %6 = load %"struct.v8_crdtp::Status"*, %"struct.v8_crdtp::Status"** %5, align 8
  %7 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %6, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %196

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 2, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = add i64 %12, -1
  %16 = add i64 %15, %14
  %17 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %18 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %17, align 8
  %19 = lshr i64 %16, 9
  %20 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %18, i64 %19
  %21 = load %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %20, align 8
  %22 = and i64 %16, 511
  %23 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 1
  %24 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %23, align 8
  %25 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %21, i64 %22, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %40, label %28

28:                                               ; preds = %10
  %29 = and i32 %26, 1
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %36, label %31

31:                                               ; preds = %28
  %32 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %21, i64 %22, i32 0
  %33 = load i32, i32* %32, align 4
  %34 = icmp eq i32 %33, 2
  %35 = select i1 %34, i8 44, i8 58
  br label %36

36:                                               ; preds = %31, %28
  %37 = phi i8 [ 44, %28 ], [ %35, %31 ]
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %24, i8 signext %37) #12
  %38 = load i32, i32* %25, align 4
  %39 = add i32 %38, 1
  br label %40

40:                                               ; preds = %10, %36
  %41 = phi i32 [ 1, %10 ], [ %39, %36 ]
  store i32 %41, i32* %25, align 4
  %42 = tail call double @llvm.fabs.f64(double %1) #14
  %43 = fcmp ueq double %42, 0x7FF0000000000000
  br i1 %43, label %44, label %63

44:                                               ; preds = %40
  %45 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %23, align 8
  %46 = bitcast %"class.std::__1::basic_string"* %45 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %47 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %46, i64 0, i32 1, i32 0
  %48 = load i8, i8* %47, align 1
  %49 = icmp slt i8 %48, 0
  br i1 %49, label %50, label %55

50:                                               ; preds = %44
  %51 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %45, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %45, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %54 = load i64, i64* %53, align 8
  br label %58

55:                                               ; preds = %44
  %56 = bitcast %"class.std::__1::basic_string"* %45 to i8*
  %57 = zext i8 %48 to i64
  br label %58

58:                                               ; preds = %50, %55
  %59 = phi i8* [ %52, %50 ], [ %56, %55 ]
  %60 = phi i64 [ %54, %50 ], [ %57, %55 ]
  %61 = getelementptr inbounds i8, i8* %59, i64 %60
  %62 = tail call i8* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertIPKcEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueEE13_EnableIfImplINS_11__wrap_iterIPcEEEENSD_IS8_EESA_SA_(%"class.std::__1::basic_string"* %45, i8* %61, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 4)) #12
  br label %196

63:                                               ; preds = %40
  %64 = fcmp olt double %1, 0x43E0000000000000
  br i1 %64, label %65, label %108

65:                                               ; preds = %63
  %66 = fcmp oge double %1, 0xC3E0000000000000
  %67 = tail call double @llvm.floor.f64(double %1)
  %68 = fcmp oeq double %67, %1
  %69 = and i1 %66, %68
  br i1 %69, label %70, label %108

70:                                               ; preds = %65
  %71 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %71) #12
  %72 = fptosi double %1 to i64
  call void @_ZNSt3__19to_stringEl(%"class.std::__1::basic_string"* nonnull sret %3, i64 %72) #12
  %73 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %23, align 8
  %74 = bitcast %"class.std::__1::basic_string"* %73 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %75 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %74, i64 0, i32 1, i32 0
  %76 = load i8, i8* %75, align 1
  %77 = icmp slt i8 %76, 0
  br i1 %77, label %78, label %83

78:                                               ; preds = %70
  %79 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %73, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %80 = load i8*, i8** %79, align 8
  %81 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %73, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %82 = load i64, i64* %81, align 8
  br label %86

83:                                               ; preds = %70
  %84 = bitcast %"class.std::__1::basic_string"* %73 to i8*
  %85 = zext i8 %76 to i64
  br label %86

86:                                               ; preds = %78, %83
  %87 = phi i8* [ %80, %78 ], [ %84, %83 ]
  %88 = phi i64 [ %82, %78 ], [ %85, %83 ]
  %89 = getelementptr inbounds i8, i8* %87, i64 %88
  %90 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %91 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %90, i64 0, i32 1, i32 0
  %92 = load i8, i8* %91, align 1
  %93 = icmp slt i8 %92, 0
  %94 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %95 = load i8*, i8** %94, align 8
  %96 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %97 = load i64, i64* %96, align 8
  %98 = zext i8 %92 to i64
  %99 = select i1 %93, i8* %95, i8* %71
  %100 = select i1 %93, i64 %97, i64 %98
  %101 = getelementptr inbounds i8, i8* %99, i64 %100
  %102 = call i8* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertINS_11__wrap_iterIPKcEEEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueEE13_EnableIfImplINS7_IPcEEEESA_SC_SC_(%"class.std::__1::basic_string"* %73, i8* %89, i8* %99, i8* %101) #12
  %103 = load i8, i8* %91, align 1
  %104 = icmp slt i8 %103, 0
  br i1 %104, label %105, label %107

105:                                              ; preds = %86
  %106 = load i8*, i8** %94, align 8
  call void @_ZdlPv(i8* %106) #11
  br label %107

107:                                              ; preds = %86, %105
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %71) #12
  br label %196

108:                                              ; preds = %65, %63
  %109 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %109) #12
  call void @_ZN8v8_crdtp4json8platform6DToStrEd(%"class.std::__1::basic_string"* nonnull sret %4, double %1) #12
  %110 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %111 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %110, i64 0, i32 1, i32 0
  %112 = load i8, i8* %111, align 1
  %113 = icmp slt i8 %112, 0
  %114 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %115 = load i8*, i8** %114, align 8
  %116 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %117 = load i64, i64* %116, align 8
  %118 = zext i8 %112 to i64
  %119 = select i1 %113, i8* %115, i8* %109
  %120 = select i1 %113, i64 %117, i64 %118
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %134, label %122

122:                                              ; preds = %108
  %123 = getelementptr inbounds i8, i8* %119, i64 %120
  br label %124

124:                                              ; preds = %197, %122
  %125 = phi i8* [ %198, %197 ], [ %119, %122 ]
  %126 = load i8, i8* %125, align 1
  switch i8 %126, label %197 [
    i8 46, label %127
    i8 101, label %127
    i8 69, label %127
  ]

127:                                              ; preds = %124, %124, %124
  %128 = icmp eq i8* %125, %123
  %129 = ptrtoint i8* %125 to i64
  %130 = ptrtoint i8* %119 to i64
  %131 = sub i64 %129, %130
  %132 = icmp eq i64 %131, -1
  %133 = or i1 %128, %132
  br i1 %133, label %134, label %138

134:                                              ; preds = %197, %127, %108
  %135 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0)) #12
  %136 = load i8, i8* %111, align 1
  %137 = load i8*, i8** %114, align 8
  br label %138

138:                                              ; preds = %127, %134
  %139 = phi i8* [ %115, %127 ], [ %137, %134 ]
  %140 = phi i8 [ %112, %127 ], [ %136, %134 ]
  %141 = icmp slt i8 %140, 0
  %142 = select i1 %141, i8* %139, i8* %109
  %143 = load i8, i8* %142, align 1
  switch i8 %143, label %169 [
    i8 46, label %144
    i8 45, label %146
  ]

144:                                              ; preds = %138
  %145 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %23, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %145, i8 signext 48) #12
  br label %169

146:                                              ; preds = %138
  %147 = getelementptr inbounds i8, i8* %142, i64 1
  %148 = load i8, i8* %147, align 1
  %149 = icmp eq i8 %148, 46
  br i1 %149, label %150, label %169

150:                                              ; preds = %146
  %151 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %23, align 8
  %152 = bitcast %"class.std::__1::basic_string"* %151 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %153 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %152, i64 0, i32 1, i32 0
  %154 = load i8, i8* %153, align 1
  %155 = icmp slt i8 %154, 0
  br i1 %155, label %156, label %161

156:                                              ; preds = %150
  %157 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %151, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %158 = load i8*, i8** %157, align 8
  %159 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %151, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %160 = load i64, i64* %159, align 8
  br label %164

161:                                              ; preds = %150
  %162 = bitcast %"class.std::__1::basic_string"* %151 to i8*
  %163 = zext i8 %154 to i64
  br label %164

164:                                              ; preds = %156, %161
  %165 = phi i8* [ %158, %156 ], [ %162, %161 ]
  %166 = phi i64 [ %160, %156 ], [ %163, %161 ]
  %167 = getelementptr inbounds i8, i8* %165, i64 %166
  %168 = call i8* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertIPKcEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueEE13_EnableIfImplINS_11__wrap_iterIPcEEEENSD_IS8_EESA_SA_(%"class.std::__1::basic_string"* %151, i8* %167, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i64 0, i64 2)) #12
  br label %169

169:                                              ; preds = %138, %146, %164, %144
  %170 = phi i8* [ %142, %144 ], [ %147, %164 ], [ %142, %146 ], [ %142, %138 ]
  %171 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %23, align 8
  %172 = bitcast %"class.std::__1::basic_string"* %171 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %173 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %172, i64 0, i32 1, i32 0
  %174 = load i8, i8* %173, align 1
  %175 = icmp slt i8 %174, 0
  br i1 %175, label %176, label %181

176:                                              ; preds = %169
  %177 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %171, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %178 = load i8*, i8** %177, align 8
  %179 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %171, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %180 = load i64, i64* %179, align 8
  br label %184

181:                                              ; preds = %169
  %182 = bitcast %"class.std::__1::basic_string"* %171 to i8*
  %183 = zext i8 %174 to i64
  br label %184

184:                                              ; preds = %176, %181
  %185 = phi i8* [ %178, %176 ], [ %182, %181 ]
  %186 = phi i64 [ %180, %176 ], [ %183, %181 ]
  %187 = getelementptr inbounds i8, i8* %185, i64 %186
  %188 = call i64 @strlen(i8* %170) #15
  %189 = getelementptr inbounds i8, i8* %170, i64 %188
  %190 = call i8* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertIPKcEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueEE13_EnableIfImplINS_11__wrap_iterIPcEEEENSD_IS8_EESA_SA_(%"class.std::__1::basic_string"* %171, i8* %187, i8* %170, i8* %189) #12
  %191 = load i8, i8* %111, align 1
  %192 = icmp slt i8 %191, 0
  br i1 %192, label %193, label %195

193:                                              ; preds = %184
  %194 = load i8*, i8** %114, align 8
  call void @_ZdlPv(i8* %194) #11
  br label %195

195:                                              ; preds = %184, %193
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %109) #12
  br label %196

196:                                              ; preds = %2, %195, %107, %58
  ret void

197:                                              ; preds = %124
  %198 = getelementptr inbounds i8, i8* %125, i64 1
  %199 = icmp eq i8* %198, %123
  br i1 %199, label %134, label %124
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE11HandleInt32Ei(%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* nocapture readonly, i32) unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 2
  %5 = load %"struct.v8_crdtp::Status"*, %"struct.v8_crdtp::Status"** %4, align 8
  %6 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %5, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %77

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 2, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = add i64 %11, -1
  %15 = add i64 %14, %13
  %16 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %17 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %16, align 8
  %18 = lshr i64 %15, 9
  %19 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %17, i64 %18
  %20 = load %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %19, align 8
  %21 = and i64 %15, 511
  %22 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 1
  %23 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  %24 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %20, i64 %21, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %39, label %27

27:                                               ; preds = %9
  %28 = and i32 %25, 1
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %35, label %30

30:                                               ; preds = %27
  %31 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %20, i64 %21, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %32, 2
  %34 = select i1 %33, i8 44, i8 58
  br label %35

35:                                               ; preds = %30, %27
  %36 = phi i8 [ 44, %27 ], [ %34, %30 ]
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %23, i8 signext %36) #12
  %37 = load i32, i32* %24, align 4
  %38 = add i32 %37, 1
  br label %39

39:                                               ; preds = %9, %35
  %40 = phi i32 [ 1, %9 ], [ %38, %35 ]
  store i32 %40, i32* %24, align 4
  %41 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %41) #12
  call void @_ZNSt3__19to_stringEi(%"class.std::__1::basic_string"* nonnull sret %3, i32 %1) #12
  %42 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  %43 = bitcast %"class.std::__1::basic_string"* %42 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %44 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %43, i64 0, i32 1, i32 0
  %45 = load i8, i8* %44, align 1
  %46 = icmp slt i8 %45, 0
  br i1 %46, label %47, label %52

47:                                               ; preds = %39
  %48 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %42, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %42, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %51 = load i64, i64* %50, align 8
  br label %55

52:                                               ; preds = %39
  %53 = bitcast %"class.std::__1::basic_string"* %42 to i8*
  %54 = zext i8 %45 to i64
  br label %55

55:                                               ; preds = %47, %52
  %56 = phi i8* [ %49, %47 ], [ %53, %52 ]
  %57 = phi i64 [ %51, %47 ], [ %54, %52 ]
  %58 = getelementptr inbounds i8, i8* %56, i64 %57
  %59 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %60 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %59, i64 0, i32 1, i32 0
  %61 = load i8, i8* %60, align 1
  %62 = icmp slt i8 %61, 0
  %63 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load i8*, i8** %63, align 8
  %65 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %66 = load i64, i64* %65, align 8
  %67 = zext i8 %61 to i64
  %68 = select i1 %62, i8* %64, i8* %41
  %69 = select i1 %62, i64 %66, i64 %67
  %70 = getelementptr inbounds i8, i8* %68, i64 %69
  %71 = call i8* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertINS_11__wrap_iterIPKcEEEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueEE13_EnableIfImplINS7_IPcEEEESA_SC_SC_(%"class.std::__1::basic_string"* %42, i8* %58, i8* %68, i8* %70) #12
  %72 = load i8, i8* %60, align 1
  %73 = icmp slt i8 %72, 0
  br i1 %73, label %74, label %76

74:                                               ; preds = %55
  %75 = load i8*, i8** %63, align 8
  call void @_ZdlPv(i8* %75) #11
  br label %76

76:                                               ; preds = %55, %74
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %41) #12
  br label %77

77:                                               ; preds = %2, %76
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE10HandleBoolEb(%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* nocapture readonly, i1 zeroext) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 2
  %4 = load %"struct.v8_crdtp::Status"*, %"struct.v8_crdtp::Status"** %3, align 8
  %5 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %4, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %61

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 2, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = add i64 %10, -1
  %14 = add i64 %13, %12
  %15 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %16 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %15, align 8
  %17 = lshr i64 %14, 9
  %18 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %16, i64 %17
  %19 = load %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %18, align 8
  %20 = and i64 %14, 511
  %21 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 1
  %22 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %21, align 8
  %23 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %19, i64 %20, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %38, label %26

26:                                               ; preds = %8
  %27 = and i32 %24, 1
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %34, label %29

29:                                               ; preds = %26
  %30 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %19, i64 %20, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, 2
  %33 = select i1 %32, i8 44, i8 58
  br label %34

34:                                               ; preds = %29, %26
  %35 = phi i8 [ 44, %26 ], [ %33, %29 ]
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %22, i8 signext %35) #12
  %36 = load i32, i32* %23, align 4
  %37 = add i32 %36, 1
  br label %38

38:                                               ; preds = %8, %34
  %39 = phi i32 [ 1, %8 ], [ %37, %34 ]
  store i32 %39, i32* %23, align 4
  %40 = select i1 %1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i64 0, i64 0)
  %41 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %21, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %41 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %43 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %42, i64 0, i32 1, i32 0
  %44 = load i8, i8* %43, align 1
  %45 = icmp slt i8 %44, 0
  br i1 %45, label %46, label %51

46:                                               ; preds = %38
  %47 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %41, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %41, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %50 = load i64, i64* %49, align 8
  br label %54

51:                                               ; preds = %38
  %52 = bitcast %"class.std::__1::basic_string"* %41 to i8*
  %53 = zext i8 %44 to i64
  br label %54

54:                                               ; preds = %46, %51
  %55 = phi i8* [ %48, %46 ], [ %52, %51 ]
  %56 = phi i64 [ %50, %46 ], [ %53, %51 ]
  %57 = getelementptr inbounds i8, i8* %55, i64 %56
  %58 = select i1 %1, i64 4, i64 5
  %59 = getelementptr inbounds i8, i8* %40, i64 %58
  %60 = tail call i8* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertIPKcEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueEE13_EnableIfImplINS_11__wrap_iterIPcEEEENSD_IS8_EESA_SA_(%"class.std::__1::basic_string"* %41, i8* %57, i8* %40, i8* %59) #12
  br label %61

61:                                               ; preds = %2, %54
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE10HandleNullEv(%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 2
  %3 = load %"struct.v8_crdtp::Status"*, %"struct.v8_crdtp::Status"** %2, align 8
  %4 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %3, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %57

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 2, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = add i64 %9, -1
  %13 = add i64 %12, %11
  %14 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %15 = load %"class.v8_crdtp::json::(anonymous namespace)::State"**, %"class.v8_crdtp::json::(anonymous namespace)::State"*** %14, align 8
  %16 = lshr i64 %13, 9
  %17 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %15, i64 %16
  %18 = load %"class.v8_crdtp::json::(anonymous namespace)::State"*, %"class.v8_crdtp::json::(anonymous namespace)::State"** %17, align 8
  %19 = and i64 %13, 511
  %20 = getelementptr %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 1
  %21 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %20, align 8
  %22 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %18, i64 %19, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %37, label %25

25:                                               ; preds = %7
  %26 = and i32 %23, 1
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %33, label %28

28:                                               ; preds = %25
  %29 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::State", %"class.v8_crdtp::json::(anonymous namespace)::State"* %18, i64 %19, i32 0
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %30, 2
  %32 = select i1 %31, i8 44, i8 58
  br label %33

33:                                               ; preds = %28, %25
  %34 = phi i8 [ 44, %25 ], [ %32, %28 ]
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %21, i8 signext %34) #12
  %35 = load i32, i32* %22, align 4
  %36 = add i32 %35, 1
  br label %37

37:                                               ; preds = %7, %33
  %38 = phi i32 [ 1, %7 ], [ %36, %33 ]
  store i32 %38, i32* %22, align 4
  %39 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %20, align 8
  %40 = bitcast %"class.std::__1::basic_string"* %39 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %41 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %40, i64 0, i32 1, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = icmp slt i8 %42, 0
  br i1 %43, label %44, label %49

44:                                               ; preds = %37
  %45 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %39, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load i8*, i8** %45, align 8
  %47 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %39, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %48 = load i64, i64* %47, align 8
  br label %52

49:                                               ; preds = %37
  %50 = bitcast %"class.std::__1::basic_string"* %39 to i8*
  %51 = zext i8 %42 to i64
  br label %52

52:                                               ; preds = %44, %49
  %53 = phi i8* [ %46, %44 ], [ %50, %49 ]
  %54 = phi i64 [ %48, %44 ], [ %51, %49 ]
  %55 = getelementptr inbounds i8, i8* %53, i64 %54
  %56 = tail call i8* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertIPKcEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueEE13_EnableIfImplINS_11__wrap_iterIPcEEEENSD_IS8_EESA_SA_(%"class.std::__1::basic_string"* %39, i8* %55, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 4)) #12
  br label %57

57:                                               ; preds = %1, %52
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN8v8_crdtp4json12_GLOBAL__N_111JSONEncoderINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE11HandleErrorENS_6StatusE(%"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* nocapture readonly, i32, i64) unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 2
  %5 = load %"struct.v8_crdtp::Status"*, %"struct.v8_crdtp::Status"** %4, align 8
  %6 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %5, i64 0, i32 0
  store i32 %1, i32* %6, align 8
  %7 = getelementptr inbounds %"struct.v8_crdtp::Status", %"struct.v8_crdtp::Status"* %5, i64 0, i32 1
  store i64 %2, i64* %7, align 8
  %8 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19", %"class.v8_crdtp::json::(anonymous namespace)::JSONEncoder.19"* %0, i64 0, i32 1
  %9 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %8, align 8
  %10 = bitcast %"class.std::__1::basic_string"* %9 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %10, i64 0, i32 1, i32 0
  %12 = load i8, i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  br i1 %13, label %14, label %18

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 0, i64* %17, align 8
  br label %20

18:                                               ; preds = %3
  %19 = bitcast %"class.std::__1::basic_string"* %9 to i8*
  store i8 0, i8* %19, align 1
  store i8 0, i8* %11, align 1
  br label %20

20:                                               ; preds = %14, %18
  ret void
}

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"*, i8 signext) local_unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertIPKcEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueEE13_EnableIfImplINS_11__wrap_iterIPcEEEENSD_IS8_EESA_SA_(%"class.std::__1::basic_string"*, i8*, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint i8* %2 to i64
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = ptrtoint i8* %1 to i64
  %8 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %9 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %8, i64 0, i32 1, i32 0
  %10 = load i8, i8* %9, align 1
  %11 = icmp slt i8 %10, 0
  br i1 %11, label %12, label %15

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  br label %17

15:                                               ; preds = %4
  %16 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  br label %17

17:                                               ; preds = %12, %15
  %18 = phi i8* [ %14, %12 ], [ %16, %15 ]
  %19 = ptrtoint i8* %18 to i64
  %20 = sub i64 %7, %19
  %21 = ptrtoint i8* %3 to i64
  %22 = sub i64 %21, %5
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %327, label %24

24:                                               ; preds = %17
  br i1 %11, label %25, label %30

25:                                               ; preds = %24
  %26 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %29 = load i64, i64* %28, align 8
  br label %33

30:                                               ; preds = %24
  %31 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %32 = zext i8 %10 to i64
  br label %33

33:                                               ; preds = %25, %30
  %34 = phi i8* [ %27, %25 ], [ %31, %30 ]
  %35 = phi i64 [ %29, %25 ], [ %32, %30 ]
  %36 = getelementptr inbounds i8, i8* %34, i64 %35
  %37 = icmp ule i8* %34, %2
  %38 = icmp ugt i8* %36, %2
  %39 = and i1 %37, %38
  br i1 %39, label %40, label %176

40:                                               ; preds = %33
  %41 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %41) #12
  %42 = icmp ugt i64 %22, -17
  br i1 %42, label %43, label %45

43:                                               ; preds = %40
  %44 = bitcast %"class.std::__1::basic_string"* %6 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %44) #13
  unreachable

45:                                               ; preds = %40
  %46 = icmp ult i64 %22, 23
  br i1 %46, label %47, label %51

47:                                               ; preds = %45
  %48 = trunc i64 %22 to i8
  %49 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %50 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %49, i64 0, i32 1, i32 0
  store i8 %48, i8* %50, align 1
  br label %59

51:                                               ; preds = %45
  %52 = add nuw i64 %22, 16
  %53 = and i64 %52, -16
  %54 = tail call i8* @_Znwm(i64 %53) #11
  %55 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %54, i8** %55, align 8
  %56 = or i64 %53, -9223372036854775808
  %57 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %56, i64* %57, align 8
  %58 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %22, i64* %58, align 8
  br label %59

59:                                               ; preds = %51, %47
  %60 = phi i8* [ %41, %47 ], [ %54, %51 ]
  %61 = icmp eq i8* %2, %3
  br i1 %61, label %157, label %62

62:                                               ; preds = %59
  %63 = ptrtoint i8* %3 to i64
  %64 = sub i64 %63, %5
  %65 = icmp ult i64 %64, 32
  br i1 %65, label %147, label %66

66:                                               ; preds = %62
  %67 = and i64 %64, -32
  %68 = getelementptr i8, i8* %2, i64 %67
  %69 = getelementptr i8, i8* %60, i64 %67
  %70 = add i64 %67, -32
  %71 = lshr exact i64 %70, 5
  %72 = add nuw nsw i64 %71, 1
  %73 = and i64 %72, 3
  %74 = icmp ult i64 %70, 96
  br i1 %74, label %126, label %75

75:                                               ; preds = %66
  %76 = sub nsw i64 %72, %73
  br label %77

77:                                               ; preds = %77, %75
  %78 = phi i64 [ 0, %75 ], [ %123, %77 ]
  %79 = phi i64 [ %76, %75 ], [ %124, %77 ]
  %80 = getelementptr i8, i8* %2, i64 %78
  %81 = getelementptr i8, i8* %60, i64 %78
  %82 = bitcast i8* %80 to <16 x i8>*
  %83 = load <16 x i8>, <16 x i8>* %82, align 1
  %84 = getelementptr i8, i8* %80, i64 16
  %85 = bitcast i8* %84 to <16 x i8>*
  %86 = load <16 x i8>, <16 x i8>* %85, align 1
  %87 = bitcast i8* %81 to <16 x i8>*
  store <16 x i8> %83, <16 x i8>* %87, align 1
  %88 = getelementptr i8, i8* %81, i64 16
  %89 = bitcast i8* %88 to <16 x i8>*
  store <16 x i8> %86, <16 x i8>* %89, align 1
  %90 = or i64 %78, 32
  %91 = getelementptr i8, i8* %2, i64 %90
  %92 = getelementptr i8, i8* %60, i64 %90
  %93 = bitcast i8* %91 to <16 x i8>*
  %94 = load <16 x i8>, <16 x i8>* %93, align 1
  %95 = getelementptr i8, i8* %91, i64 16
  %96 = bitcast i8* %95 to <16 x i8>*
  %97 = load <16 x i8>, <16 x i8>* %96, align 1
  %98 = bitcast i8* %92 to <16 x i8>*
  store <16 x i8> %94, <16 x i8>* %98, align 1
  %99 = getelementptr i8, i8* %92, i64 16
  %100 = bitcast i8* %99 to <16 x i8>*
  store <16 x i8> %97, <16 x i8>* %100, align 1
  %101 = or i64 %78, 64
  %102 = getelementptr i8, i8* %2, i64 %101
  %103 = getelementptr i8, i8* %60, i64 %101
  %104 = bitcast i8* %102 to <16 x i8>*
  %105 = load <16 x i8>, <16 x i8>* %104, align 1
  %106 = getelementptr i8, i8* %102, i64 16
  %107 = bitcast i8* %106 to <16 x i8>*
  %108 = load <16 x i8>, <16 x i8>* %107, align 1
  %109 = bitcast i8* %103 to <16 x i8>*
  store <16 x i8> %105, <16 x i8>* %109, align 1
  %110 = getelementptr i8, i8* %103, i64 16
  %111 = bitcast i8* %110 to <16 x i8>*
  store <16 x i8> %108, <16 x i8>* %111, align 1
  %112 = or i64 %78, 96
  %113 = getelementptr i8, i8* %2, i64 %112
  %114 = getelementptr i8, i8* %60, i64 %112
  %115 = bitcast i8* %113 to <16 x i8>*
  %116 = load <16 x i8>, <16 x i8>* %115, align 1
  %117 = getelementptr i8, i8* %113, i64 16
  %118 = bitcast i8* %117 to <16 x i8>*
  %119 = load <16 x i8>, <16 x i8>* %118, align 1
  %120 = bitcast i8* %114 to <16 x i8>*
  store <16 x i8> %116, <16 x i8>* %120, align 1
  %121 = getelementptr i8, i8* %114, i64 16
  %122 = bitcast i8* %121 to <16 x i8>*
  store <16 x i8> %119, <16 x i8>* %122, align 1
  %123 = add i64 %78, 128
  %124 = add i64 %79, -4
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %126, label %77, !llvm.loop !90

126:                                              ; preds = %77, %66
  %127 = phi i64 [ 0, %66 ], [ %123, %77 ]
  %128 = icmp eq i64 %73, 0
  br i1 %128, label %145, label %129

129:                                              ; preds = %126, %129
  %130 = phi i64 [ %142, %129 ], [ %127, %126 ]
  %131 = phi i64 [ %143, %129 ], [ %73, %126 ]
  %132 = getelementptr i8, i8* %2, i64 %130
  %133 = getelementptr i8, i8* %60, i64 %130
  %134 = bitcast i8* %132 to <16 x i8>*
  %135 = load <16 x i8>, <16 x i8>* %134, align 1
  %136 = getelementptr i8, i8* %132, i64 16
  %137 = bitcast i8* %136 to <16 x i8>*
  %138 = load <16 x i8>, <16 x i8>* %137, align 1
  %139 = bitcast i8* %133 to <16 x i8>*
  store <16 x i8> %135, <16 x i8>* %139, align 1
  %140 = getelementptr i8, i8* %133, i64 16
  %141 = bitcast i8* %140 to <16 x i8>*
  store <16 x i8> %138, <16 x i8>* %141, align 1
  %142 = add i64 %130, 32
  %143 = add i64 %131, -1
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %145, label %129, !llvm.loop !91

145:                                              ; preds = %129, %126
  %146 = icmp eq i64 %64, %67
  br i1 %146, label %157, label %147

147:                                              ; preds = %145, %62
  %148 = phi i8* [ %2, %62 ], [ %68, %145 ]
  %149 = phi i8* [ %60, %62 ], [ %69, %145 ]
  br label %150

150:                                              ; preds = %147, %150
  %151 = phi i8* [ %154, %150 ], [ %148, %147 ]
  %152 = phi i8* [ %155, %150 ], [ %149, %147 ]
  %153 = load i8, i8* %151, align 1
  store i8 %153, i8* %152, align 1
  %154 = getelementptr inbounds i8, i8* %151, i64 1
  %155 = getelementptr inbounds i8, i8* %152, i64 1
  %156 = icmp eq i8* %154, %3
  br i1 %156, label %157, label %150, !llvm.loop !92

157:                                              ; preds = %150, %145, %59
  %158 = phi i8* [ %60, %59 ], [ %69, %145 ], [ %155, %150 ]
  store i8 0, i8* %158, align 1
  %159 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %160 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %159, i64 0, i32 1, i32 0
  %161 = load i8, i8* %160, align 1
  %162 = icmp slt i8 %161, 0
  %163 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %164 = load i8*, i8** %163, align 8
  %165 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %166 = load i64, i64* %165, align 8
  %167 = zext i8 %161 to i64
  %168 = select i1 %162, i8* %164, i8* %41
  %169 = select i1 %162, i64 %166, i64 %167
  %170 = getelementptr inbounds i8, i8* %168, i64 %169
  %171 = call i8* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertIPKcEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueEE13_EnableIfImplINS_11__wrap_iterIPcEEEENSD_IS8_EESA_SA_(%"class.std::__1::basic_string"* %0, i8* %1, i8* %168, i8* %170)
  %172 = load i8, i8* %160, align 1
  %173 = icmp slt i8 %172, 0
  br i1 %173, label %174, label %326

174:                                              ; preds = %157
  %175 = load i8*, i8** %163, align 8
  call void @_ZdlPv(i8* %175) #11
  br label %326

176:                                              ; preds = %33
  br i1 %11, label %179, label %177

177:                                              ; preds = %176
  %178 = zext i8 %10 to i64
  br label %186

179:                                              ; preds = %176
  %180 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %181 = load i64, i64* %180, align 8
  %182 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %183 = load i64, i64* %182, align 8
  %184 = and i64 %183, 9223372036854775807
  %185 = add nsw i64 %184, -1
  br label %186

186:                                              ; preds = %177, %179
  %187 = phi i64 [ %181, %179 ], [ %178, %177 ]
  %188 = phi i64 [ %185, %179 ], [ 22, %177 ]
  %189 = sub i64 %188, %187
  %190 = icmp ult i64 %189, %22
  br i1 %190, label %204, label %191

191:                                              ; preds = %186
  br i1 %11, label %192, label %195

192:                                              ; preds = %191
  %193 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %194 = load i8*, i8** %193, align 8
  br label %197

195:                                              ; preds = %191
  %196 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  br label %197

197:                                              ; preds = %192, %195
  %198 = phi i8* [ %194, %192 ], [ %196, %195 ]
  %199 = sub i64 %187, %20
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %209, label %201

201:                                              ; preds = %197
  %202 = getelementptr inbounds i8, i8* %198, i64 %20
  %203 = getelementptr inbounds i8, i8* %202, i64 %22
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %203, i8* align 1 %202, i64 %199, i1 false) #12
  br label %209

204:                                              ; preds = %186
  %205 = add i64 %187, %22
  %206 = sub i64 %205, %188
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string"* %0, i64 %188, i64 %206, i64 %187, i64 %20, i64 0, i64 %22) #12
  %207 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %208 = load i8*, i8** %207, align 8
  br label %209

209:                                              ; preds = %201, %197, %204
  %210 = phi i8* [ %208, %204 ], [ %198, %197 ], [ %198, %201 ]
  %211 = add i64 %187, %22
  %212 = load i8, i8* %9, align 1
  %213 = icmp slt i8 %212, 0
  br i1 %213, label %214, label %216

214:                                              ; preds = %209
  %215 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %211, i64* %215, align 8
  br label %218

216:                                              ; preds = %209
  %217 = trunc i64 %211 to i8
  store i8 %217, i8* %9, align 1
  br label %218

218:                                              ; preds = %214, %216
  %219 = getelementptr inbounds i8, i8* %210, i64 %211
  store i8 0, i8* %219, align 1
  %220 = icmp eq i8* %2, %3
  br i1 %220, label %327, label %221

221:                                              ; preds = %218
  %222 = getelementptr inbounds i8, i8* %210, i64 %20
  %223 = ptrtoint i8* %3 to i64
  %224 = sub i64 %223, %5
  %225 = icmp ult i64 %224, 32
  br i1 %225, label %316, label %226

226:                                              ; preds = %221
  %227 = sub i64 %7, %5
  %228 = sub i64 %227, %19
  %229 = getelementptr i8, i8* %3, i64 %228
  %230 = ptrtoint i8* %229 to i64
  %231 = getelementptr i8, i8* %210, i64 %230
  %232 = icmp ult i8* %222, %3
  %233 = icmp ugt i8* %231, %2
  %234 = and i1 %232, %233
  br i1 %234, label %316, label %235

235:                                              ; preds = %226
  %236 = and i64 %224, -32
  %237 = getelementptr i8, i8* %222, i64 %236
  %238 = getelementptr i8, i8* %2, i64 %236
  %239 = add i64 %236, -32
  %240 = lshr exact i64 %239, 5
  %241 = add nuw nsw i64 %240, 1
  %242 = and i64 %241, 3
  %243 = icmp ult i64 %239, 96
  br i1 %243, label %295, label %244

244:                                              ; preds = %235
  %245 = sub nsw i64 %241, %242
  br label %246

246:                                              ; preds = %246, %244
  %247 = phi i64 [ 0, %244 ], [ %292, %246 ]
  %248 = phi i64 [ %245, %244 ], [ %293, %246 ]
  %249 = getelementptr i8, i8* %222, i64 %247
  %250 = getelementptr i8, i8* %2, i64 %247
  %251 = bitcast i8* %250 to <16 x i8>*
  %252 = load <16 x i8>, <16 x i8>* %251, align 1, !alias.scope !94
  %253 = getelementptr i8, i8* %250, i64 16
  %254 = bitcast i8* %253 to <16 x i8>*
  %255 = load <16 x i8>, <16 x i8>* %254, align 1, !alias.scope !94
  %256 = bitcast i8* %249 to <16 x i8>*
  store <16 x i8> %252, <16 x i8>* %256, align 1, !alias.scope !97, !noalias !94
  %257 = getelementptr i8, i8* %249, i64 16
  %258 = bitcast i8* %257 to <16 x i8>*
  store <16 x i8> %255, <16 x i8>* %258, align 1, !alias.scope !97, !noalias !94
  %259 = or i64 %247, 32
  %260 = getelementptr i8, i8* %222, i64 %259
  %261 = getelementptr i8, i8* %2, i64 %259
  %262 = bitcast i8* %261 to <16 x i8>*
  %263 = load <16 x i8>, <16 x i8>* %262, align 1, !alias.scope !94
  %264 = getelementptr i8, i8* %261, i64 16
  %265 = bitcast i8* %264 to <16 x i8>*
  %266 = load <16 x i8>, <16 x i8>* %265, align 1, !alias.scope !94
  %267 = bitcast i8* %260 to <16 x i8>*
  store <16 x i8> %263, <16 x i8>* %267, align 1, !alias.scope !97, !noalias !94
  %268 = getelementptr i8, i8* %260, i64 16
  %269 = bitcast i8* %268 to <16 x i8>*
  store <16 x i8> %266, <16 x i8>* %269, align 1, !alias.scope !97, !noalias !94
  %270 = or i64 %247, 64
  %271 = getelementptr i8, i8* %222, i64 %270
  %272 = getelementptr i8, i8* %2, i64 %270
  %273 = bitcast i8* %272 to <16 x i8>*
  %274 = load <16 x i8>, <16 x i8>* %273, align 1, !alias.scope !94
  %275 = getelementptr i8, i8* %272, i64 16
  %276 = bitcast i8* %275 to <16 x i8>*
  %277 = load <16 x i8>, <16 x i8>* %276, align 1, !alias.scope !94
  %278 = bitcast i8* %271 to <16 x i8>*
  store <16 x i8> %274, <16 x i8>* %278, align 1, !alias.scope !97, !noalias !94
  %279 = getelementptr i8, i8* %271, i64 16
  %280 = bitcast i8* %279 to <16 x i8>*
  store <16 x i8> %277, <16 x i8>* %280, align 1, !alias.scope !97, !noalias !94
  %281 = or i64 %247, 96
  %282 = getelementptr i8, i8* %222, i64 %281
  %283 = getelementptr i8, i8* %2, i64 %281
  %284 = bitcast i8* %283 to <16 x i8>*
  %285 = load <16 x i8>, <16 x i8>* %284, align 1, !alias.scope !94
  %286 = getelementptr i8, i8* %283, i64 16
  %287 = bitcast i8* %286 to <16 x i8>*
  %288 = load <16 x i8>, <16 x i8>* %287, align 1, !alias.scope !94
  %289 = bitcast i8* %282 to <16 x i8>*
  store <16 x i8> %285, <16 x i8>* %289, align 1, !alias.scope !97, !noalias !94
  %290 = getelementptr i8, i8* %282, i64 16
  %291 = bitcast i8* %290 to <16 x i8>*
  store <16 x i8> %288, <16 x i8>* %291, align 1, !alias.scope !97, !noalias !94
  %292 = add i64 %247, 128
  %293 = add i64 %248, -4
  %294 = icmp eq i64 %293, 0
  br i1 %294, label %295, label %246, !llvm.loop !99

295:                                              ; preds = %246, %235
  %296 = phi i64 [ 0, %235 ], [ %292, %246 ]
  %297 = icmp eq i64 %242, 0
  br i1 %297, label %314, label %298

298:                                              ; preds = %295, %298
  %299 = phi i64 [ %311, %298 ], [ %296, %295 ]
  %300 = phi i64 [ %312, %298 ], [ %242, %295 ]
  %301 = getelementptr i8, i8* %222, i64 %299
  %302 = getelementptr i8, i8* %2, i64 %299
  %303 = bitcast i8* %302 to <16 x i8>*
  %304 = load <16 x i8>, <16 x i8>* %303, align 1, !alias.scope !94
  %305 = getelementptr i8, i8* %302, i64 16
  %306 = bitcast i8* %305 to <16 x i8>*
  %307 = load <16 x i8>, <16 x i8>* %306, align 1, !alias.scope !94
  %308 = bitcast i8* %301 to <16 x i8>*
  store <16 x i8> %304, <16 x i8>* %308, align 1, !alias.scope !97, !noalias !94
  %309 = getelementptr i8, i8* %301, i64 16
  %310 = bitcast i8* %309 to <16 x i8>*
  store <16 x i8> %307, <16 x i8>* %310, align 1, !alias.scope !97, !noalias !94
  %311 = add i64 %299, 32
  %312 = add i64 %300, -1
  %313 = icmp eq i64 %312, 0
  br i1 %313, label %314, label %298, !llvm.loop !100

314:                                              ; preds = %298, %295
  %315 = icmp eq i64 %224, %236
  br i1 %315, label %327, label %316

316:                                              ; preds = %314, %226, %221
  %317 = phi i8* [ %222, %226 ], [ %222, %221 ], [ %237, %314 ]
  %318 = phi i8* [ %2, %226 ], [ %2, %221 ], [ %238, %314 ]
  br label %319

319:                                              ; preds = %316, %319
  %320 = phi i8* [ %323, %319 ], [ %317, %316 ]
  %321 = phi i8* [ %324, %319 ], [ %318, %316 ]
  %322 = load i8, i8* %321, align 1
  store i8 %322, i8* %320, align 1
  %323 = getelementptr inbounds i8, i8* %320, i64 1
  %324 = getelementptr inbounds i8, i8* %321, i64 1
  %325 = icmp eq i8* %324, %3
  br i1 %325, label %327, label %319, !llvm.loop !101

326:                                              ; preds = %174, %157
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %41) #12
  br label %338

327:                                              ; preds = %319, %314, %218, %17
  %328 = load i8, i8* %9, align 1
  %329 = icmp slt i8 %328, 0
  br i1 %329, label %330, label %333

330:                                              ; preds = %327
  %331 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %332 = load i8*, i8** %331, align 8
  br label %335

333:                                              ; preds = %327
  %334 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  br label %335

335:                                              ; preds = %330, %333
  %336 = phi i8* [ %332, %330 ], [ %334, %333 ]
  %337 = getelementptr inbounds i8, i8* %336, i64 %20
  br label %338

338:                                              ; preds = %326, %335
  %339 = phi i8* [ %337, %335 ], [ %171, %326 ]
  ret i8* %339
}

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string"*, i64, i64, i64, i64, i64, i64) local_unnamed_addr #10

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertINS_11__wrap_iterIPKcEEEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueEE13_EnableIfImplINS7_IPcEEEESA_SC_SC_(%"class.std::__1::basic_string"*, i8*, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint i8* %2 to i64
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = ptrtoint i8* %1 to i64
  %8 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %9 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %8, i64 0, i32 1, i32 0
  %10 = load i8, i8* %9, align 1
  %11 = icmp slt i8 %10, 0
  br i1 %11, label %12, label %15

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  br label %17

15:                                               ; preds = %4
  %16 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  br label %17

17:                                               ; preds = %12, %15
  %18 = phi i8* [ %14, %12 ], [ %16, %15 ]
  %19 = ptrtoint i8* %18 to i64
  %20 = sub i64 %7, %19
  %21 = ptrtoint i8* %3 to i64
  %22 = sub i64 %21, %5
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %327, label %24

24:                                               ; preds = %17
  br i1 %11, label %25, label %30

25:                                               ; preds = %24
  %26 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %29 = load i64, i64* %28, align 8
  br label %33

30:                                               ; preds = %24
  %31 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %32 = zext i8 %10 to i64
  br label %33

33:                                               ; preds = %25, %30
  %34 = phi i8* [ %27, %25 ], [ %31, %30 ]
  %35 = phi i64 [ %29, %25 ], [ %32, %30 ]
  %36 = getelementptr inbounds i8, i8* %34, i64 %35
  %37 = icmp ule i8* %34, %2
  %38 = icmp ugt i8* %36, %2
  %39 = and i1 %37, %38
  br i1 %39, label %40, label %176

40:                                               ; preds = %33
  %41 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %41) #12
  %42 = icmp ugt i64 %22, -17
  br i1 %42, label %43, label %45

43:                                               ; preds = %40
  %44 = bitcast %"class.std::__1::basic_string"* %6 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %44) #13
  unreachable

45:                                               ; preds = %40
  %46 = icmp ult i64 %22, 23
  br i1 %46, label %47, label %51

47:                                               ; preds = %45
  %48 = trunc i64 %22 to i8
  %49 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %50 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %49, i64 0, i32 1, i32 0
  store i8 %48, i8* %50, align 1
  br label %59

51:                                               ; preds = %45
  %52 = add nuw i64 %22, 16
  %53 = and i64 %52, -16
  %54 = tail call i8* @_Znwm(i64 %53) #11
  %55 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %54, i8** %55, align 8
  %56 = or i64 %53, -9223372036854775808
  %57 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %56, i64* %57, align 8
  %58 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %22, i64* %58, align 8
  br label %59

59:                                               ; preds = %51, %47
  %60 = phi i8* [ %41, %47 ], [ %54, %51 ]
  %61 = icmp eq i8* %2, %3
  br i1 %61, label %157, label %62

62:                                               ; preds = %59
  %63 = ptrtoint i8* %3 to i64
  %64 = sub i64 %63, %5
  %65 = icmp ult i64 %64, 32
  br i1 %65, label %147, label %66

66:                                               ; preds = %62
  %67 = and i64 %64, -32
  %68 = getelementptr i8, i8* %60, i64 %67
  %69 = getelementptr i8, i8* %2, i64 %67
  %70 = add i64 %67, -32
  %71 = lshr exact i64 %70, 5
  %72 = add nuw nsw i64 %71, 1
  %73 = and i64 %72, 3
  %74 = icmp ult i64 %70, 96
  br i1 %74, label %126, label %75

75:                                               ; preds = %66
  %76 = sub nsw i64 %72, %73
  br label %77

77:                                               ; preds = %77, %75
  %78 = phi i64 [ 0, %75 ], [ %123, %77 ]
  %79 = phi i64 [ %76, %75 ], [ %124, %77 ]
  %80 = getelementptr i8, i8* %60, i64 %78
  %81 = getelementptr i8, i8* %2, i64 %78
  %82 = bitcast i8* %81 to <16 x i8>*
  %83 = load <16 x i8>, <16 x i8>* %82, align 1
  %84 = getelementptr i8, i8* %81, i64 16
  %85 = bitcast i8* %84 to <16 x i8>*
  %86 = load <16 x i8>, <16 x i8>* %85, align 1
  %87 = bitcast i8* %80 to <16 x i8>*
  store <16 x i8> %83, <16 x i8>* %87, align 1
  %88 = getelementptr i8, i8* %80, i64 16
  %89 = bitcast i8* %88 to <16 x i8>*
  store <16 x i8> %86, <16 x i8>* %89, align 1
  %90 = or i64 %78, 32
  %91 = getelementptr i8, i8* %60, i64 %90
  %92 = getelementptr i8, i8* %2, i64 %90
  %93 = bitcast i8* %92 to <16 x i8>*
  %94 = load <16 x i8>, <16 x i8>* %93, align 1
  %95 = getelementptr i8, i8* %92, i64 16
  %96 = bitcast i8* %95 to <16 x i8>*
  %97 = load <16 x i8>, <16 x i8>* %96, align 1
  %98 = bitcast i8* %91 to <16 x i8>*
  store <16 x i8> %94, <16 x i8>* %98, align 1
  %99 = getelementptr i8, i8* %91, i64 16
  %100 = bitcast i8* %99 to <16 x i8>*
  store <16 x i8> %97, <16 x i8>* %100, align 1
  %101 = or i64 %78, 64
  %102 = getelementptr i8, i8* %60, i64 %101
  %103 = getelementptr i8, i8* %2, i64 %101
  %104 = bitcast i8* %103 to <16 x i8>*
  %105 = load <16 x i8>, <16 x i8>* %104, align 1
  %106 = getelementptr i8, i8* %103, i64 16
  %107 = bitcast i8* %106 to <16 x i8>*
  %108 = load <16 x i8>, <16 x i8>* %107, align 1
  %109 = bitcast i8* %102 to <16 x i8>*
  store <16 x i8> %105, <16 x i8>* %109, align 1
  %110 = getelementptr i8, i8* %102, i64 16
  %111 = bitcast i8* %110 to <16 x i8>*
  store <16 x i8> %108, <16 x i8>* %111, align 1
  %112 = or i64 %78, 96
  %113 = getelementptr i8, i8* %60, i64 %112
  %114 = getelementptr i8, i8* %2, i64 %112
  %115 = bitcast i8* %114 to <16 x i8>*
  %116 = load <16 x i8>, <16 x i8>* %115, align 1
  %117 = getelementptr i8, i8* %114, i64 16
  %118 = bitcast i8* %117 to <16 x i8>*
  %119 = load <16 x i8>, <16 x i8>* %118, align 1
  %120 = bitcast i8* %113 to <16 x i8>*
  store <16 x i8> %116, <16 x i8>* %120, align 1
  %121 = getelementptr i8, i8* %113, i64 16
  %122 = bitcast i8* %121 to <16 x i8>*
  store <16 x i8> %119, <16 x i8>* %122, align 1
  %123 = add i64 %78, 128
  %124 = add i64 %79, -4
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %126, label %77, !llvm.loop !102

126:                                              ; preds = %77, %66
  %127 = phi i64 [ 0, %66 ], [ %123, %77 ]
  %128 = icmp eq i64 %73, 0
  br i1 %128, label %145, label %129

129:                                              ; preds = %126, %129
  %130 = phi i64 [ %142, %129 ], [ %127, %126 ]
  %131 = phi i64 [ %143, %129 ], [ %73, %126 ]
  %132 = getelementptr i8, i8* %60, i64 %130
  %133 = getelementptr i8, i8* %2, i64 %130
  %134 = bitcast i8* %133 to <16 x i8>*
  %135 = load <16 x i8>, <16 x i8>* %134, align 1
  %136 = getelementptr i8, i8* %133, i64 16
  %137 = bitcast i8* %136 to <16 x i8>*
  %138 = load <16 x i8>, <16 x i8>* %137, align 1
  %139 = bitcast i8* %132 to <16 x i8>*
  store <16 x i8> %135, <16 x i8>* %139, align 1
  %140 = getelementptr i8, i8* %132, i64 16
  %141 = bitcast i8* %140 to <16 x i8>*
  store <16 x i8> %138, <16 x i8>* %141, align 1
  %142 = add i64 %130, 32
  %143 = add i64 %131, -1
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %145, label %129, !llvm.loop !103

145:                                              ; preds = %129, %126
  %146 = icmp eq i64 %64, %67
  br i1 %146, label %157, label %147

147:                                              ; preds = %145, %62
  %148 = phi i8* [ %60, %62 ], [ %68, %145 ]
  %149 = phi i8* [ %2, %62 ], [ %69, %145 ]
  br label %150

150:                                              ; preds = %147, %150
  %151 = phi i8* [ %155, %150 ], [ %148, %147 ]
  %152 = phi i8* [ %154, %150 ], [ %149, %147 ]
  %153 = load i8, i8* %152, align 1
  store i8 %153, i8* %151, align 1
  %154 = getelementptr inbounds i8, i8* %152, i64 1
  %155 = getelementptr inbounds i8, i8* %151, i64 1
  %156 = icmp eq i8* %154, %3
  br i1 %156, label %157, label %150, !llvm.loop !104

157:                                              ; preds = %150, %145, %59
  %158 = phi i8* [ %60, %59 ], [ %68, %145 ], [ %155, %150 ]
  store i8 0, i8* %158, align 1
  %159 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %160 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %159, i64 0, i32 1, i32 0
  %161 = load i8, i8* %160, align 1
  %162 = icmp slt i8 %161, 0
  %163 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %164 = load i8*, i8** %163, align 8
  %165 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %166 = load i64, i64* %165, align 8
  %167 = zext i8 %161 to i64
  %168 = select i1 %162, i8* %164, i8* %41
  %169 = select i1 %162, i64 %166, i64 %167
  %170 = getelementptr inbounds i8, i8* %168, i64 %169
  %171 = call i8* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertIPKcEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueEE13_EnableIfImplINS_11__wrap_iterIPcEEEENSD_IS8_EESA_SA_(%"class.std::__1::basic_string"* %0, i8* %1, i8* %168, i8* %170)
  %172 = load i8, i8* %160, align 1
  %173 = icmp slt i8 %172, 0
  br i1 %173, label %174, label %326

174:                                              ; preds = %157
  %175 = load i8*, i8** %163, align 8
  call void @_ZdlPv(i8* %175) #11
  br label %326

176:                                              ; preds = %33
  br i1 %11, label %179, label %177

177:                                              ; preds = %176
  %178 = zext i8 %10 to i64
  br label %186

179:                                              ; preds = %176
  %180 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %181 = load i64, i64* %180, align 8
  %182 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %183 = load i64, i64* %182, align 8
  %184 = and i64 %183, 9223372036854775807
  %185 = add nsw i64 %184, -1
  br label %186

186:                                              ; preds = %177, %179
  %187 = phi i64 [ %181, %179 ], [ %178, %177 ]
  %188 = phi i64 [ %185, %179 ], [ 22, %177 ]
  %189 = sub i64 %188, %187
  %190 = icmp ult i64 %189, %22
  br i1 %190, label %204, label %191

191:                                              ; preds = %186
  br i1 %11, label %192, label %195

192:                                              ; preds = %191
  %193 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %194 = load i8*, i8** %193, align 8
  br label %197

195:                                              ; preds = %191
  %196 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  br label %197

197:                                              ; preds = %192, %195
  %198 = phi i8* [ %194, %192 ], [ %196, %195 ]
  %199 = sub i64 %187, %20
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %209, label %201

201:                                              ; preds = %197
  %202 = getelementptr inbounds i8, i8* %198, i64 %20
  %203 = getelementptr inbounds i8, i8* %202, i64 %22
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %203, i8* align 1 %202, i64 %199, i1 false) #12
  br label %209

204:                                              ; preds = %186
  %205 = add i64 %187, %22
  %206 = sub i64 %205, %188
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string"* %0, i64 %188, i64 %206, i64 %187, i64 %20, i64 0, i64 %22) #12
  %207 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %208 = load i8*, i8** %207, align 8
  br label %209

209:                                              ; preds = %201, %197, %204
  %210 = phi i8* [ %208, %204 ], [ %198, %197 ], [ %198, %201 ]
  %211 = add i64 %187, %22
  %212 = load i8, i8* %9, align 1
  %213 = icmp slt i8 %212, 0
  br i1 %213, label %214, label %216

214:                                              ; preds = %209
  %215 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %211, i64* %215, align 8
  br label %218

216:                                              ; preds = %209
  %217 = trunc i64 %211 to i8
  store i8 %217, i8* %9, align 1
  br label %218

218:                                              ; preds = %214, %216
  %219 = getelementptr inbounds i8, i8* %210, i64 %211
  store i8 0, i8* %219, align 1
  %220 = icmp eq i8* %2, %3
  br i1 %220, label %327, label %221

221:                                              ; preds = %218
  %222 = getelementptr inbounds i8, i8* %210, i64 %20
  %223 = ptrtoint i8* %3 to i64
  %224 = sub i64 %223, %5
  %225 = icmp ult i64 %224, 32
  br i1 %225, label %316, label %226

226:                                              ; preds = %221
  %227 = sub i64 %7, %5
  %228 = sub i64 %227, %19
  %229 = getelementptr i8, i8* %3, i64 %228
  %230 = ptrtoint i8* %229 to i64
  %231 = getelementptr i8, i8* %210, i64 %230
  %232 = icmp ult i8* %222, %3
  %233 = icmp ugt i8* %231, %2
  %234 = and i1 %232, %233
  br i1 %234, label %316, label %235

235:                                              ; preds = %226
  %236 = and i64 %224, -32
  %237 = getelementptr i8, i8* %222, i64 %236
  %238 = getelementptr i8, i8* %2, i64 %236
  %239 = add i64 %236, -32
  %240 = lshr exact i64 %239, 5
  %241 = add nuw nsw i64 %240, 1
  %242 = and i64 %241, 3
  %243 = icmp ult i64 %239, 96
  br i1 %243, label %295, label %244

244:                                              ; preds = %235
  %245 = sub nsw i64 %241, %242
  br label %246

246:                                              ; preds = %246, %244
  %247 = phi i64 [ 0, %244 ], [ %292, %246 ]
  %248 = phi i64 [ %245, %244 ], [ %293, %246 ]
  %249 = getelementptr i8, i8* %222, i64 %247
  %250 = getelementptr i8, i8* %2, i64 %247
  %251 = bitcast i8* %250 to <16 x i8>*
  %252 = load <16 x i8>, <16 x i8>* %251, align 1, !alias.scope !105
  %253 = getelementptr i8, i8* %250, i64 16
  %254 = bitcast i8* %253 to <16 x i8>*
  %255 = load <16 x i8>, <16 x i8>* %254, align 1, !alias.scope !105
  %256 = bitcast i8* %249 to <16 x i8>*
  store <16 x i8> %252, <16 x i8>* %256, align 1, !alias.scope !108, !noalias !105
  %257 = getelementptr i8, i8* %249, i64 16
  %258 = bitcast i8* %257 to <16 x i8>*
  store <16 x i8> %255, <16 x i8>* %258, align 1, !alias.scope !108, !noalias !105
  %259 = or i64 %247, 32
  %260 = getelementptr i8, i8* %222, i64 %259
  %261 = getelementptr i8, i8* %2, i64 %259
  %262 = bitcast i8* %261 to <16 x i8>*
  %263 = load <16 x i8>, <16 x i8>* %262, align 1, !alias.scope !105
  %264 = getelementptr i8, i8* %261, i64 16
  %265 = bitcast i8* %264 to <16 x i8>*
  %266 = load <16 x i8>, <16 x i8>* %265, align 1, !alias.scope !105
  %267 = bitcast i8* %260 to <16 x i8>*
  store <16 x i8> %263, <16 x i8>* %267, align 1, !alias.scope !108, !noalias !105
  %268 = getelementptr i8, i8* %260, i64 16
  %269 = bitcast i8* %268 to <16 x i8>*
  store <16 x i8> %266, <16 x i8>* %269, align 1, !alias.scope !108, !noalias !105
  %270 = or i64 %247, 64
  %271 = getelementptr i8, i8* %222, i64 %270
  %272 = getelementptr i8, i8* %2, i64 %270
  %273 = bitcast i8* %272 to <16 x i8>*
  %274 = load <16 x i8>, <16 x i8>* %273, align 1, !alias.scope !105
  %275 = getelementptr i8, i8* %272, i64 16
  %276 = bitcast i8* %275 to <16 x i8>*
  %277 = load <16 x i8>, <16 x i8>* %276, align 1, !alias.scope !105
  %278 = bitcast i8* %271 to <16 x i8>*
  store <16 x i8> %274, <16 x i8>* %278, align 1, !alias.scope !108, !noalias !105
  %279 = getelementptr i8, i8* %271, i64 16
  %280 = bitcast i8* %279 to <16 x i8>*
  store <16 x i8> %277, <16 x i8>* %280, align 1, !alias.scope !108, !noalias !105
  %281 = or i64 %247, 96
  %282 = getelementptr i8, i8* %222, i64 %281
  %283 = getelementptr i8, i8* %2, i64 %281
  %284 = bitcast i8* %283 to <16 x i8>*
  %285 = load <16 x i8>, <16 x i8>* %284, align 1, !alias.scope !105
  %286 = getelementptr i8, i8* %283, i64 16
  %287 = bitcast i8* %286 to <16 x i8>*
  %288 = load <16 x i8>, <16 x i8>* %287, align 1, !alias.scope !105
  %289 = bitcast i8* %282 to <16 x i8>*
  store <16 x i8> %285, <16 x i8>* %289, align 1, !alias.scope !108, !noalias !105
  %290 = getelementptr i8, i8* %282, i64 16
  %291 = bitcast i8* %290 to <16 x i8>*
  store <16 x i8> %288, <16 x i8>* %291, align 1, !alias.scope !108, !noalias !105
  %292 = add i64 %247, 128
  %293 = add i64 %248, -4
  %294 = icmp eq i64 %293, 0
  br i1 %294, label %295, label %246, !llvm.loop !110

295:                                              ; preds = %246, %235
  %296 = phi i64 [ 0, %235 ], [ %292, %246 ]
  %297 = icmp eq i64 %242, 0
  br i1 %297, label %314, label %298

298:                                              ; preds = %295, %298
  %299 = phi i64 [ %311, %298 ], [ %296, %295 ]
  %300 = phi i64 [ %312, %298 ], [ %242, %295 ]
  %301 = getelementptr i8, i8* %222, i64 %299
  %302 = getelementptr i8, i8* %2, i64 %299
  %303 = bitcast i8* %302 to <16 x i8>*
  %304 = load <16 x i8>, <16 x i8>* %303, align 1, !alias.scope !105
  %305 = getelementptr i8, i8* %302, i64 16
  %306 = bitcast i8* %305 to <16 x i8>*
  %307 = load <16 x i8>, <16 x i8>* %306, align 1, !alias.scope !105
  %308 = bitcast i8* %301 to <16 x i8>*
  store <16 x i8> %304, <16 x i8>* %308, align 1, !alias.scope !108, !noalias !105
  %309 = getelementptr i8, i8* %301, i64 16
  %310 = bitcast i8* %309 to <16 x i8>*
  store <16 x i8> %307, <16 x i8>* %310, align 1, !alias.scope !108, !noalias !105
  %311 = add i64 %299, 32
  %312 = add i64 %300, -1
  %313 = icmp eq i64 %312, 0
  br i1 %313, label %314, label %298, !llvm.loop !111

314:                                              ; preds = %298, %295
  %315 = icmp eq i64 %224, %236
  br i1 %315, label %327, label %316

316:                                              ; preds = %314, %226, %221
  %317 = phi i8* [ %222, %226 ], [ %222, %221 ], [ %237, %314 ]
  %318 = phi i8* [ %2, %226 ], [ %2, %221 ], [ %238, %314 ]
  br label %319

319:                                              ; preds = %316, %319
  %320 = phi i8* [ %323, %319 ], [ %317, %316 ]
  %321 = phi i8* [ %324, %319 ], [ %318, %316 ]
  %322 = load i8, i8* %321, align 1
  store i8 %322, i8* %320, align 1
  %323 = getelementptr inbounds i8, i8* %320, i64 1
  %324 = getelementptr inbounds i8, i8* %321, i64 1
  %325 = icmp eq i8* %324, %3
  br i1 %325, label %327, label %319, !llvm.loop !112

326:                                              ; preds = %174, %157
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %41) #12
  br label %338

327:                                              ; preds = %319, %314, %218, %17
  %328 = load i8, i8* %9, align 1
  %329 = icmp slt i8 %328, 0
  br i1 %329, label %330, label %333

330:                                              ; preds = %327
  %331 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %332 = load i8*, i8** %331, align 8
  br label %335

333:                                              ; preds = %327
  %334 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  br label %335

335:                                              ; preds = %330, %333
  %336 = phi i8* [ %332, %330 ], [ %334, %333 ]
  %337 = getelementptr inbounds i8, i8* %336, i64 %20
  br label %338

338:                                              ; preds = %326, %335
  %339 = phi i8* [ %337, %335 ], [ %171, %326 ]
  ret i8* %339
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserIhE10ParseValueEPKhS5_PS5_i(%"class.v8_crdtp::json::(anonymous namespace)::JsonParser"*, i8*, i8*, i8** nocapture, i32) unnamed_addr #0 align 2 {
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca double, align 8
  %10 = alloca %"class.std::__1::vector.36", align 8
  %11 = alloca %"class.std::__1::vector.36", align 8
  %12 = icmp sgt i32 %4, 300
  br i1 %12, label %13, label %28

13:                                               ; preds = %5
  %14 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %0, i64 0, i32 1
  %15 = load i8, i8* %14, align 8, !range !2
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %17, label %470

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %0, i64 0, i32 2
  %19 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %18, align 8
  %20 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %0 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = ptrtoint i8* %1 to i64
  %23 = sub i64 %22, %21
  %24 = bitcast %"class.v8_crdtp::ParserHandler"* %19 to void (%"class.v8_crdtp::ParserHandler"*, i32, i64)***
  %25 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %25, i64 13
  %27 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %26, align 8
  tail call void %27(%"class.v8_crdtp::ParserHandler"* %19, i32 2, i64 %23) #12
  store i8 1, i8* %14, align 8
  br label %470

28:                                               ; preds = %5
  %29 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #12
  store i8* null, i8** %7, align 8
  %30 = bitcast i8** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #12
  store i8* null, i8** %8, align 8
  %31 = call fastcc i32 @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserIhE10ParseTokenEPKhS5_PS5_S6_(i8* %1, i8* %2, i8** nonnull %7, i8** nonnull %8)
  switch i32 %31, label %409 [
    i32 12, label %32
    i32 11, label %48
    i32 8, label %64
    i32 6, label %71
    i32 7, label %78
    i32 5, label %85
    i32 4, label %172
    i32 2, label %226
    i32 0, label %284
  ]

32:                                               ; preds = %28
  %33 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %0, i64 0, i32 1
  %34 = load i8, i8* %33, align 8, !range !2
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %36, label %469

36:                                               ; preds = %32
  %37 = bitcast i8** %7 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %0, i64 0, i32 2
  %40 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %39, align 8
  %41 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %0 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = sub i64 %38, %42
  %44 = bitcast %"class.v8_crdtp::ParserHandler"* %40 to void (%"class.v8_crdtp::ParserHandler"*, i32, i64)***
  %45 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*** %44, align 8
  %46 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %45, i64 13
  %47 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %46, align 8
  tail call void %47(%"class.v8_crdtp::ParserHandler"* %40, i32 3, i64 %43) #12
  store i8 1, i8* %33, align 8
  br label %469

48:                                               ; preds = %28
  %49 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %0, i64 0, i32 1
  %50 = load i8, i8* %49, align 8, !range !2
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %52, label %469

52:                                               ; preds = %48
  %53 = bitcast i8** %7 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %0, i64 0, i32 2
  %56 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %55, align 8
  %57 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %0 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = sub i64 %54, %58
  %60 = bitcast %"class.v8_crdtp::ParserHandler"* %56 to void (%"class.v8_crdtp::ParserHandler"*, i32, i64)***
  %61 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*** %60, align 8
  %62 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %61, i64 13
  %63 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %62, align 8
  tail call void %63(%"class.v8_crdtp::ParserHandler"* %56, i32 4, i64 %59) #12
  store i8 1, i8* %49, align 8
  br label %469

64:                                               ; preds = %28
  %65 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %0, i64 0, i32 2
  %66 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %65, align 8
  %67 = bitcast %"class.v8_crdtp::ParserHandler"* %66 to void (%"class.v8_crdtp::ParserHandler"*)***
  %68 = load void (%"class.v8_crdtp::ParserHandler"*)**, void (%"class.v8_crdtp::ParserHandler"*)*** %67, align 8
  %69 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*)*, void (%"class.v8_crdtp::ParserHandler"*)** %68, i64 12
  %70 = load void (%"class.v8_crdtp::ParserHandler"*)*, void (%"class.v8_crdtp::ParserHandler"*)** %69, align 8
  tail call void %70(%"class.v8_crdtp::ParserHandler"* %66) #12
  br label %425

71:                                               ; preds = %28
  %72 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %0, i64 0, i32 2
  %73 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %72, align 8
  %74 = bitcast %"class.v8_crdtp::ParserHandler"* %73 to void (%"class.v8_crdtp::ParserHandler"*, i1)***
  %75 = load void (%"class.v8_crdtp::ParserHandler"*, i1)**, void (%"class.v8_crdtp::ParserHandler"*, i1)*** %74, align 8
  %76 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i1)*, void (%"class.v8_crdtp::ParserHandler"*, i1)** %75, i64 11
  %77 = load void (%"class.v8_crdtp::ParserHandler"*, i1)*, void (%"class.v8_crdtp::ParserHandler"*, i1)** %76, align 8
  tail call void %77(%"class.v8_crdtp::ParserHandler"* %73, i1 zeroext true) #12
  br label %425

78:                                               ; preds = %28
  %79 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %0, i64 0, i32 2
  %80 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %79, align 8
  %81 = bitcast %"class.v8_crdtp::ParserHandler"* %80 to void (%"class.v8_crdtp::ParserHandler"*, i1)***
  %82 = load void (%"class.v8_crdtp::ParserHandler"*, i1)**, void (%"class.v8_crdtp::ParserHandler"*, i1)*** %81, align 8
  %83 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i1)*, void (%"class.v8_crdtp::ParserHandler"*, i1)** %82, i64 11
  %84 = load void (%"class.v8_crdtp::ParserHandler"*, i1)*, void (%"class.v8_crdtp::ParserHandler"*, i1)** %83, align 8
  tail call void %84(%"class.v8_crdtp::ParserHandler"* %80, i1 zeroext false) #12
  br label %425

85:                                               ; preds = %28
  %86 = bitcast double* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %86) #12
  %87 = load i8*, i8** %7, align 8
  %88 = bitcast i8** %8 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = ptrtoint i8* %87 to i64
  %91 = sub i64 %89, %90
  %92 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %92) #12
  %93 = icmp ugt i64 %91, -17
  br i1 %93, label %94, label %96

94:                                               ; preds = %85
  %95 = bitcast %"class.std::__1::basic_string"* %6 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %95) #13
  unreachable

96:                                               ; preds = %85
  %97 = icmp ult i64 %91, 23
  br i1 %97, label %107, label %98

98:                                               ; preds = %96
  %99 = add nuw i64 %91, 16
  %100 = and i64 %99, -16
  %101 = tail call i8* @_Znwm(i64 %100) #11
  %102 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %101, i8** %102, align 8
  %103 = or i64 %100, -9223372036854775808
  %104 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %91, i64* %105, align 8
  %106 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %112

107:                                              ; preds = %96
  %108 = trunc i64 %91 to i8
  %109 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %110 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %109, i64 0, i32 1, i32 0
  store i8 %108, i8* %110, align 1
  %111 = icmp eq i64 %91, 0
  br i1 %111, label %115, label %112

112:                                              ; preds = %107, %98
  %113 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %109, %107 ], [ %106, %98 ]
  %114 = phi i8* [ %92, %107 ], [ %101, %98 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %114, i8* align 1 %87, i64 %91, i1 false) #12
  br label %115

115:                                              ; preds = %112, %107
  %116 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %109, %107 ], [ %113, %112 ]
  %117 = phi i8* [ %92, %107 ], [ %114, %112 ]
  %118 = getelementptr inbounds i8, i8* %117, i64 %91
  store i8 0, i8* %118, align 1
  %119 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %116, i64 0, i32 1, i32 0
  %120 = load i8, i8* %119, align 1
  %121 = icmp slt i8 %120, 0
  %122 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %123 = load i8*, i8** %122, align 8
  %124 = select i1 %121, i8* %123, i8* %92
  %125 = call zeroext i1 @_ZN8v8_crdtp4json8platform6StrToDEPKcPd(i8* %124, double* nonnull %9) #12
  %126 = load i8, i8* %119, align 1
  %127 = icmp slt i8 %126, 0
  br i1 %127, label %128, label %130

128:                                              ; preds = %115
  %129 = load i8*, i8** %122, align 8
  call void @_ZdlPv(i8* %129) #11
  br label %130

130:                                              ; preds = %115, %128
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %92) #12
  br i1 %125, label %148, label %131

131:                                              ; preds = %130
  %132 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %0, i64 0, i32 1
  %133 = load i8, i8* %132, align 8, !range !2
  %134 = icmp eq i8 %133, 0
  br i1 %134, label %135, label %147

135:                                              ; preds = %131
  %136 = bitcast i8** %7 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %0, i64 0, i32 2
  %139 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %138, align 8
  %140 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %0 to i64*
  %141 = load i64, i64* %140, align 8
  %142 = sub i64 %137, %141
  %143 = bitcast %"class.v8_crdtp::ParserHandler"* %139 to void (%"class.v8_crdtp::ParserHandler"*, i32, i64)***
  %144 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*** %143, align 8
  %145 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %144, i64 13
  %146 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %145, align 8
  call void %146(%"class.v8_crdtp::ParserHandler"* %139, i32 5, i64 %142) #12
  store i8 1, i8* %132, align 8
  br label %147

147:                                              ; preds = %131, %135
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %86) #12
  br label %469

148:                                              ; preds = %130
  %149 = load double, double* %9, align 8
  %150 = fcmp ult double %149, 0xC1E0000000000000
  %151 = fcmp ugt double %149, 0x41DFFFFFFFC00000
  %152 = or i1 %150, %151
  br i1 %152, label %164, label %153

153:                                              ; preds = %148
  %154 = fptosi double %149 to i32
  %155 = sitofp i32 %154 to double
  %156 = fcmp oeq double %149, %155
  br i1 %156, label %157, label %164

157:                                              ; preds = %153
  %158 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %0, i64 0, i32 2
  %159 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %158, align 8
  %160 = bitcast %"class.v8_crdtp::ParserHandler"* %159 to void (%"class.v8_crdtp::ParserHandler"*, i32)***
  %161 = load void (%"class.v8_crdtp::ParserHandler"*, i32)**, void (%"class.v8_crdtp::ParserHandler"*, i32)*** %160, align 8
  %162 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i32)*, void (%"class.v8_crdtp::ParserHandler"*, i32)** %161, i64 10
  %163 = load void (%"class.v8_crdtp::ParserHandler"*, i32)*, void (%"class.v8_crdtp::ParserHandler"*, i32)** %162, align 8
  call void %163(%"class.v8_crdtp::ParserHandler"* %159, i32 %154) #12
  br label %171

164:                                              ; preds = %148, %153
  %165 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %0, i64 0, i32 2
  %166 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %165, align 8
  %167 = bitcast %"class.v8_crdtp::ParserHandler"* %166 to void (%"class.v8_crdtp::ParserHandler"*, double)***
  %168 = load void (%"class.v8_crdtp::ParserHandler"*, double)**, void (%"class.v8_crdtp::ParserHandler"*, double)*** %167, align 8
  %169 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, double)*, void (%"class.v8_crdtp::ParserHandler"*, double)** %168, i64 9
  %170 = load void (%"class.v8_crdtp::ParserHandler"*, double)*, void (%"class.v8_crdtp::ParserHandler"*, double)** %169, align 8
  call void %170(%"class.v8_crdtp::ParserHandler"* %166, double %149) #12
  br label %171

171:                                              ; preds = %157, %164
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %86) #12
  br label %425

172:                                              ; preds = %28
  %173 = bitcast %"class.std::__1::vector.36"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %173) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %173, i8 0, i64 24, i1 false) #12
  %174 = load i8*, i8** %7, align 8
  %175 = getelementptr inbounds i8, i8* %174, i64 1
  %176 = load i8*, i8** %8, align 8
  %177 = getelementptr inbounds i8, i8* %176, i64 -1
  %178 = call fastcc zeroext i1 @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserIhE12DecodeStringEPKhS5_PNSt3__16vectorItNS6_9allocatorItEEEE(i8* %175, i8* %177, %"class.std::__1::vector.36"* nonnull %10)
  br i1 %178, label %205, label %179

179:                                              ; preds = %172
  %180 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %0, i64 0, i32 1
  %181 = load i8, i8* %180, align 8, !range !2
  %182 = icmp eq i8 %181, 0
  br i1 %182, label %183, label %195

183:                                              ; preds = %179
  %184 = bitcast i8** %7 to i64*
  %185 = load i64, i64* %184, align 8
  %186 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %0, i64 0, i32 2
  %187 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %186, align 8
  %188 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %0 to i64*
  %189 = load i64, i64* %188, align 8
  %190 = sub i64 %185, %189
  %191 = bitcast %"class.v8_crdtp::ParserHandler"* %187 to void (%"class.v8_crdtp::ParserHandler"*, i32, i64)***
  %192 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*** %191, align 8
  %193 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %192, i64 13
  %194 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %193, align 8
  call void %194(%"class.v8_crdtp::ParserHandler"* %187, i32 6, i64 %190) #12
  store i8 1, i8* %180, align 8
  br label %195

195:                                              ; preds = %179, %183
  %196 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %10, i64 0, i32 0, i32 0
  %197 = load i16*, i16** %196, align 8
  %198 = icmp eq i16* %197, null
  br i1 %198, label %204, label %199

199:                                              ; preds = %195
  %200 = ptrtoint i16* %197 to i64
  %201 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %10, i64 0, i32 0, i32 1
  %202 = bitcast i16** %201 to i64*
  store i64 %200, i64* %202, align 8
  %203 = bitcast i16* %197 to i8*
  call void @_ZdlPv(i8* %203) #11
  br label %204

204:                                              ; preds = %195, %199
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %173) #12
  br label %469

205:                                              ; preds = %172
  %206 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %0, i64 0, i32 2
  %207 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %206, align 8
  %208 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %10, i64 0, i32 0, i32 0
  %209 = load i16*, i16** %208, align 8
  %210 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %10, i64 0, i32 0, i32 1
  %211 = bitcast i16** %210 to i64*
  %212 = load i64, i64* %211, align 8
  %213 = ptrtoint i16* %209 to i64
  %214 = sub i64 %212, %213
  %215 = ashr exact i64 %214, 1
  %216 = bitcast %"class.v8_crdtp::ParserHandler"* %207 to void (%"class.v8_crdtp::ParserHandler"*, i16*, i64)***
  %217 = load void (%"class.v8_crdtp::ParserHandler"*, i16*, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i16*, i64)*** %216, align 8
  %218 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i16*, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i16*, i64)** %217, i64 7
  %219 = load void (%"class.v8_crdtp::ParserHandler"*, i16*, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i16*, i64)** %218, align 8
  call void %219(%"class.v8_crdtp::ParserHandler"* %207, i16* %209, i64 %215) #12
  %220 = load i16*, i16** %208, align 8
  %221 = icmp eq i16* %220, null
  br i1 %221, label %225, label %222

222:                                              ; preds = %205
  %223 = ptrtoint i16* %220 to i64
  store i64 %223, i64* %211, align 8
  %224 = bitcast i16* %220 to i8*
  call void @_ZdlPv(i8* %224) #11
  br label %225

225:                                              ; preds = %205, %222
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %173) #12
  br label %425

226:                                              ; preds = %28
  %227 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %0, i64 0, i32 2
  %228 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %227, align 8
  %229 = bitcast %"class.v8_crdtp::ParserHandler"* %228 to void (%"class.v8_crdtp::ParserHandler"*)***
  %230 = load void (%"class.v8_crdtp::ParserHandler"*)**, void (%"class.v8_crdtp::ParserHandler"*)*** %229, align 8
  %231 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*)*, void (%"class.v8_crdtp::ParserHandler"*)** %230, i64 4
  %232 = load void (%"class.v8_crdtp::ParserHandler"*)*, void (%"class.v8_crdtp::ParserHandler"*)** %231, align 8
  tail call void %232(%"class.v8_crdtp::ParserHandler"* %228) #12
  %233 = load i8*, i8** %8, align 8
  %234 = call fastcc i32 @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserIhE10ParseTokenEPKhS5_PS5_S6_(i8* %233, i8* %2, i8** nonnull %7, i8** nonnull %8)
  %235 = icmp eq i32 %234, 3
  br i1 %235, label %278, label %236

236:                                              ; preds = %226
  %237 = add nsw i32 %4, 1
  %238 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %0, i64 0, i32 1
  br label %239

239:                                              ; preds = %246, %236
  %240 = phi i8* [ %233, %236 ], [ %247, %246 ]
  call fastcc void @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserIhE10ParseValueEPKhS5_PS5_i(%"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %0, i8* %240, i8* %2, i8** nonnull %8, i32 %237)
  %241 = load i8, i8* %238, align 8, !range !2
  %242 = icmp eq i8 %241, 0
  br i1 %242, label %243, label %469

243:                                              ; preds = %239
  %244 = load i8*, i8** %8, align 8
  %245 = call fastcc i32 @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserIhE10ParseTokenEPKhS5_PS5_S6_(i8* %244, i8* %2, i8** nonnull %7, i8** nonnull %8)
  switch i32 %245, label %264 [
    i32 9, label %246
    i32 3, label %278
  ]

246:                                              ; preds = %243
  %247 = load i8*, i8** %8, align 8
  %248 = call fastcc i32 @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserIhE10ParseTokenEPKhS5_PS5_S6_(i8* %247, i8* %2, i8** nonnull %7, i8** nonnull %8)
  %249 = icmp eq i32 %248, 3
  br i1 %249, label %250, label %239

250:                                              ; preds = %246
  %251 = load i8, i8* %238, align 8, !range !2
  %252 = icmp eq i8 %251, 0
  br i1 %252, label %253, label %469

253:                                              ; preds = %250
  %254 = bitcast i8** %7 to i64*
  %255 = load i64, i64* %254, align 8
  %256 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %227, align 8
  %257 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %0 to i64*
  %258 = load i64, i64* %257, align 8
  %259 = sub i64 %255, %258
  %260 = bitcast %"class.v8_crdtp::ParserHandler"* %256 to void (%"class.v8_crdtp::ParserHandler"*, i32, i64)***
  %261 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*** %260, align 8
  %262 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %261, i64 13
  %263 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %262, align 8
  tail call void %263(%"class.v8_crdtp::ParserHandler"* %256, i32 7, i64 %259) #12
  store i8 1, i8* %238, align 8
  br label %469

264:                                              ; preds = %243
  %265 = load i8, i8* %238, align 8, !range !2
  %266 = icmp eq i8 %265, 0
  br i1 %266, label %267, label %469

267:                                              ; preds = %264
  %268 = bitcast i8** %7 to i64*
  %269 = load i64, i64* %268, align 8
  %270 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %227, align 8
  %271 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %0 to i64*
  %272 = load i64, i64* %271, align 8
  %273 = sub i64 %269, %272
  %274 = bitcast %"class.v8_crdtp::ParserHandler"* %270 to void (%"class.v8_crdtp::ParserHandler"*, i32, i64)***
  %275 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*** %274, align 8
  %276 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %275, i64 13
  %277 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %276, align 8
  tail call void %277(%"class.v8_crdtp::ParserHandler"* %270, i32 8, i64 %273) #12
  store i8 1, i8* %238, align 8
  br label %469

278:                                              ; preds = %243, %226
  %279 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %227, align 8
  %280 = bitcast %"class.v8_crdtp::ParserHandler"* %279 to void (%"class.v8_crdtp::ParserHandler"*)***
  %281 = load void (%"class.v8_crdtp::ParserHandler"*)**, void (%"class.v8_crdtp::ParserHandler"*)*** %280, align 8
  %282 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*)*, void (%"class.v8_crdtp::ParserHandler"*)** %281, i64 5
  %283 = load void (%"class.v8_crdtp::ParserHandler"*)*, void (%"class.v8_crdtp::ParserHandler"*)** %282, align 8
  tail call void %283(%"class.v8_crdtp::ParserHandler"* %279) #12
  br label %425

284:                                              ; preds = %28
  %285 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %0, i64 0, i32 2
  %286 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %285, align 8
  %287 = bitcast %"class.v8_crdtp::ParserHandler"* %286 to void (%"class.v8_crdtp::ParserHandler"*)***
  %288 = load void (%"class.v8_crdtp::ParserHandler"*)**, void (%"class.v8_crdtp::ParserHandler"*)*** %287, align 8
  %289 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*)*, void (%"class.v8_crdtp::ParserHandler"*)** %288, i64 2
  %290 = load void (%"class.v8_crdtp::ParserHandler"*)*, void (%"class.v8_crdtp::ParserHandler"*)** %289, align 8
  tail call void %290(%"class.v8_crdtp::ParserHandler"* %286) #12
  %291 = load i8*, i8** %8, align 8
  %292 = call fastcc i32 @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserIhE10ParseTokenEPKhS5_PS5_S6_(i8* %291, i8* %2, i8** nonnull %7, i8** nonnull %8)
  %293 = bitcast %"class.std::__1::vector.36"* %11 to i8*
  %294 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %0, i64 0, i32 1
  %295 = bitcast i8** %7 to i64*
  %296 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %0 to i64*
  %297 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %11, i64 0, i32 0, i32 0
  %298 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %11, i64 0, i32 0, i32 1
  %299 = bitcast i16** %298 to i64*
  %300 = add nsw i32 %4, 1
  br label %301

301:                                              ; preds = %402, %284
  %302 = phi i32 [ %292, %284 ], [ %395, %402 ]
  switch i32 %302, label %303 [
    i32 1, label %403
    i32 4, label %315
  ]

303:                                              ; preds = %301
  %304 = load i8, i8* %294, align 8, !range !2
  %305 = icmp eq i8 %304, 0
  br i1 %305, label %306, label %469

306:                                              ; preds = %303
  %307 = load i64, i64* %295, align 8
  %308 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %285, align 8
  %309 = load i64, i64* %296, align 8
  %310 = sub i64 %307, %309
  %311 = bitcast %"class.v8_crdtp::ParserHandler"* %308 to void (%"class.v8_crdtp::ParserHandler"*, i32, i64)***
  %312 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*** %311, align 8
  %313 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %312, i64 13
  %314 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %313, align 8
  call void %314(%"class.v8_crdtp::ParserHandler"* %308, i32 9, i64 %310) #12
  store i8 1, i8* %294, align 8
  br label %469

315:                                              ; preds = %301
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %293) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %293, i8 0, i64 24, i1 false) #12
  %316 = load i8*, i8** %7, align 8
  %317 = getelementptr inbounds i8, i8* %316, i64 1
  %318 = load i8*, i8** %8, align 8
  %319 = getelementptr inbounds i8, i8* %318, i64 -1
  %320 = call fastcc zeroext i1 @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserIhE12DecodeStringEPKhS5_PNSt3__16vectorItNS6_9allocatorItEEEE(i8* %317, i8* %319, %"class.std::__1::vector.36"* nonnull %11)
  br i1 %320, label %333, label %321

321:                                              ; preds = %315
  %322 = load i8, i8* %294, align 8, !range !2
  %323 = icmp eq i8 %322, 0
  br i1 %323, label %324, label %394

324:                                              ; preds = %321
  %325 = load i64, i64* %295, align 8
  %326 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %285, align 8
  %327 = load i64, i64* %296, align 8
  %328 = sub i64 %325, %327
  %329 = bitcast %"class.v8_crdtp::ParserHandler"* %326 to void (%"class.v8_crdtp::ParserHandler"*, i32, i64)***
  %330 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*** %329, align 8
  %331 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %330, i64 13
  %332 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %331, align 8
  call void %332(%"class.v8_crdtp::ParserHandler"* %326, i32 6, i64 %328) #12
  store i8 1, i8* %294, align 8
  br label %394

333:                                              ; preds = %315
  %334 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %285, align 8
  %335 = load i16*, i16** %297, align 8
  %336 = load i64, i64* %299, align 8
  %337 = ptrtoint i16* %335 to i64
  %338 = sub i64 %336, %337
  %339 = ashr exact i64 %338, 1
  %340 = bitcast %"class.v8_crdtp::ParserHandler"* %334 to void (%"class.v8_crdtp::ParserHandler"*, i16*, i64)***
  %341 = load void (%"class.v8_crdtp::ParserHandler"*, i16*, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i16*, i64)*** %340, align 8
  %342 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i16*, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i16*, i64)** %341, i64 7
  %343 = load void (%"class.v8_crdtp::ParserHandler"*, i16*, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i16*, i64)** %342, align 8
  call void %343(%"class.v8_crdtp::ParserHandler"* %334, i16* %335, i64 %339) #12
  %344 = load i8*, i8** %8, align 8
  %345 = call fastcc i32 @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserIhE10ParseTokenEPKhS5_PS5_S6_(i8* %344, i8* %2, i8** nonnull %7, i8** nonnull %8)
  %346 = icmp eq i32 %345, 10
  br i1 %346, label %359, label %347

347:                                              ; preds = %333
  %348 = load i8, i8* %294, align 8, !range !2
  %349 = icmp eq i8 %348, 0
  br i1 %349, label %350, label %394

350:                                              ; preds = %347
  %351 = load i64, i64* %295, align 8
  %352 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %285, align 8
  %353 = load i64, i64* %296, align 8
  %354 = sub i64 %351, %353
  %355 = bitcast %"class.v8_crdtp::ParserHandler"* %352 to void (%"class.v8_crdtp::ParserHandler"*, i32, i64)***
  %356 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*** %355, align 8
  %357 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %356, i64 13
  %358 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %357, align 8
  call void %358(%"class.v8_crdtp::ParserHandler"* %352, i32 10, i64 %354) #12
  store i8 1, i8* %294, align 8
  br label %394

359:                                              ; preds = %333
  %360 = load i8*, i8** %8, align 8
  call fastcc void @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserIhE10ParseValueEPKhS5_PS5_i(%"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %0, i8* %360, i8* %2, i8** nonnull %8, i32 %300)
  %361 = load i8, i8* %294, align 8, !range !2
  %362 = icmp eq i8 %361, 0
  br i1 %362, label %363, label %394

363:                                              ; preds = %359
  %364 = load i8*, i8** %8, align 8
  %365 = call fastcc i32 @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserIhE10ParseTokenEPKhS5_PS5_S6_(i8* %364, i8* %2, i8** nonnull %7, i8** nonnull %8)
  switch i32 %365, label %382 [
    i32 9, label %366
    i32 1, label %394
  ]

366:                                              ; preds = %363
  %367 = load i8*, i8** %8, align 8
  %368 = call fastcc i32 @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserIhE10ParseTokenEPKhS5_PS5_S6_(i8* %367, i8* %2, i8** nonnull %7, i8** nonnull %8)
  %369 = icmp eq i32 %368, 1
  br i1 %369, label %370, label %394

370:                                              ; preds = %366
  %371 = load i8, i8* %294, align 8, !range !2
  %372 = icmp eq i8 %371, 0
  br i1 %372, label %373, label %394

373:                                              ; preds = %370
  %374 = load i64, i64* %295, align 8
  %375 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %285, align 8
  %376 = load i64, i64* %296, align 8
  %377 = sub i64 %374, %376
  %378 = bitcast %"class.v8_crdtp::ParserHandler"* %375 to void (%"class.v8_crdtp::ParserHandler"*, i32, i64)***
  %379 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*** %378, align 8
  %380 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %379, i64 13
  %381 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %380, align 8
  call void %381(%"class.v8_crdtp::ParserHandler"* %375, i32 11, i64 %377) #12
  store i8 1, i8* %294, align 8
  br label %394

382:                                              ; preds = %363
  %383 = load i8, i8* %294, align 8, !range !2
  %384 = icmp eq i8 %383, 0
  br i1 %384, label %385, label %394

385:                                              ; preds = %382
  %386 = load i64, i64* %295, align 8
  %387 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %285, align 8
  %388 = load i64, i64* %296, align 8
  %389 = sub i64 %386, %388
  %390 = bitcast %"class.v8_crdtp::ParserHandler"* %387 to void (%"class.v8_crdtp::ParserHandler"*, i32, i64)***
  %391 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*** %390, align 8
  %392 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %391, i64 13
  %393 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %392, align 8
  call void %393(%"class.v8_crdtp::ParserHandler"* %387, i32 12, i64 %389) #12
  store i8 1, i8* %294, align 8
  br label %394

394:                                              ; preds = %385, %382, %373, %370, %350, %347, %324, %321, %366, %363, %359
  %395 = phi i32 [ 10, %359 ], [ %368, %366 ], [ %365, %363 ], [ 4, %321 ], [ 4, %324 ], [ %345, %347 ], [ %345, %350 ], [ 1, %370 ], [ 1, %373 ], [ %365, %382 ], [ %365, %385 ]
  %396 = phi i1 [ false, %359 ], [ true, %366 ], [ true, %363 ], [ false, %321 ], [ false, %324 ], [ false, %347 ], [ false, %350 ], [ false, %370 ], [ false, %373 ], [ false, %382 ], [ false, %385 ]
  %397 = load i16*, i16** %297, align 8
  %398 = icmp eq i16* %397, null
  br i1 %398, label %402, label %399

399:                                              ; preds = %394
  %400 = ptrtoint i16* %397 to i64
  store i64 %400, i64* %299, align 8
  %401 = bitcast i16* %397 to i8*
  call void @_ZdlPv(i8* %401) #11
  br label %402

402:                                              ; preds = %394, %399
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %293) #12
  br i1 %396, label %301, label %469

403:                                              ; preds = %301
  %404 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %285, align 8
  %405 = bitcast %"class.v8_crdtp::ParserHandler"* %404 to void (%"class.v8_crdtp::ParserHandler"*)***
  %406 = load void (%"class.v8_crdtp::ParserHandler"*)**, void (%"class.v8_crdtp::ParserHandler"*)*** %405, align 8
  %407 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*)*, void (%"class.v8_crdtp::ParserHandler"*)** %406, i64 3
  %408 = load void (%"class.v8_crdtp::ParserHandler"*)*, void (%"class.v8_crdtp::ParserHandler"*)** %407, align 8
  call void %408(%"class.v8_crdtp::ParserHandler"* %404) #12
  br label %425

409:                                              ; preds = %28
  %410 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %0, i64 0, i32 1
  %411 = load i8, i8* %410, align 8, !range !2
  %412 = icmp eq i8 %411, 0
  br i1 %412, label %413, label %469

413:                                              ; preds = %409
  %414 = bitcast i8** %7 to i64*
  %415 = load i64, i64* %414, align 8
  %416 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %0, i64 0, i32 2
  %417 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %416, align 8
  %418 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::JsonParser"* %0 to i64*
  %419 = load i64, i64* %418, align 8
  %420 = sub i64 %415, %419
  %421 = bitcast %"class.v8_crdtp::ParserHandler"* %417 to void (%"class.v8_crdtp::ParserHandler"*, i32, i64)***
  %422 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*** %421, align 8
  %423 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %422, i64 13
  %424 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %423, align 8
  tail call void %424(%"class.v8_crdtp::ParserHandler"* %417, i32 13, i64 %420) #12
  store i8 1, i8* %410, align 8
  br label %469

425:                                              ; preds = %225, %171, %403, %278, %78, %71, %64
  %426 = load i8*, i8** %8, align 8
  %427 = icmp ult i8* %426, %2
  br i1 %427, label %428, label %467

428:                                              ; preds = %425, %464
  %429 = phi i8* [ %465, %464 ], [ %426, %425 ]
  %430 = load i8, i8* %429, align 1
  switch i8 %430, label %467 [
    i8 32, label %431
    i8 10, label %431
    i8 11, label %431
    i8 12, label %431
    i8 13, label %431
    i8 9, label %431
    i8 47, label %433
  ]

431:                                              ; preds = %428, %428, %428, %428, %428, %428
  %432 = getelementptr inbounds i8, i8* %429, i64 1
  br label %464

433:                                              ; preds = %428
  %434 = icmp eq i8* %429, %2
  br i1 %434, label %467, label %435

435:                                              ; preds = %433
  %436 = getelementptr inbounds i8, i8* %429, i64 1
  %437 = icmp ult i8* %436, %2
  br i1 %437, label %438, label %467

438:                                              ; preds = %435
  %439 = load i8, i8* %436, align 1
  switch i8 %439, label %467 [
    i8 47, label %440
    i8 42, label %451
  ]

440:                                              ; preds = %438
  %441 = getelementptr inbounds i8, i8* %429, i64 2
  %442 = icmp ult i8* %441, %2
  br i1 %442, label %443, label %467

443:                                              ; preds = %440, %448
  %444 = phi i8* [ %449, %448 ], [ %441, %440 ]
  %445 = load i8, i8* %444, align 1
  switch i8 %445, label %448 [
    i8 10, label %446
    i8 13, label %446
  ]

446:                                              ; preds = %443, %443
  %447 = getelementptr inbounds i8, i8* %444, i64 1
  br label %464

448:                                              ; preds = %443
  %449 = getelementptr inbounds i8, i8* %444, i64 1
  %450 = icmp eq i8* %449, %2
  br i1 %450, label %467, label %443

451:                                              ; preds = %438
  %452 = getelementptr inbounds i8, i8* %429, i64 2
  %453 = icmp ult i8* %452, %2
  br i1 %453, label %454, label %467

454:                                              ; preds = %451, %462
  %455 = phi i8 [ %458, %462 ], [ 0, %451 ]
  %456 = phi i8* [ %461, %462 ], [ %452, %451 ]
  %457 = icmp eq i8 %455, 42
  %458 = load i8, i8* %456, align 1
  %459 = icmp eq i8 %458, 47
  %460 = and i1 %457, %459
  %461 = getelementptr inbounds i8, i8* %456, i64 1
  br i1 %460, label %464, label %462

462:                                              ; preds = %454
  %463 = icmp eq i8* %461, %2
  br i1 %463, label %467, label %454

464:                                              ; preds = %454, %446, %431
  %465 = phi i8* [ %432, %431 ], [ %447, %446 ], [ %461, %454 ]
  %466 = icmp ult i8* %465, %2
  br i1 %466, label %428, label %467

467:                                              ; preds = %428, %433, %435, %438, %440, %451, %464, %462, %448, %425
  %468 = phi i8* [ %426, %425 ], [ %2, %448 ], [ %429, %462 ], [ %429, %428 ], [ %429, %451 ], [ %429, %438 ], [ %429, %435 ], [ %2, %433 ], [ %465, %464 ], [ %2, %440 ]
  store i8* %468, i8** %3, align 8
  br label %469

469:                                              ; preds = %402, %239, %413, %409, %306, %303, %267, %264, %253, %250, %52, %48, %36, %32, %204, %147, %467
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #12
  br label %470

470:                                              ; preds = %17, %13, %469
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc i32 @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserIhE10ParseTokenEPKhS5_PS5_S6_(i8*, i8*, i8** nocapture, i8** nocapture) unnamed_addr #4 align 2 {
  %5 = icmp ult i8* %0, %1
  br i1 %5, label %6, label %46

6:                                                ; preds = %4, %42
  %7 = phi i8* [ %43, %42 ], [ %0, %4 ]
  %8 = load i8, i8* %7, align 1
  switch i8 %8, label %46 [
    i8 32, label %9
    i8 10, label %9
    i8 11, label %9
    i8 12, label %9
    i8 13, label %9
    i8 9, label %9
    i8 47, label %11
  ]

9:                                                ; preds = %6, %6, %6, %6, %6, %6
  %10 = getelementptr inbounds i8, i8* %7, i64 1
  br label %42

11:                                               ; preds = %6
  %12 = icmp eq i8* %7, %1
  br i1 %12, label %45, label %13

13:                                               ; preds = %11
  %14 = getelementptr inbounds i8, i8* %7, i64 1
  %15 = icmp ult i8* %14, %1
  br i1 %15, label %16, label %46

16:                                               ; preds = %13
  %17 = load i8, i8* %14, align 1
  switch i8 %17, label %46 [
    i8 47, label %18
    i8 42, label %29
  ]

18:                                               ; preds = %16
  %19 = getelementptr inbounds i8, i8* %7, i64 2
  %20 = icmp ult i8* %19, %1
  br i1 %20, label %21, label %45

21:                                               ; preds = %18, %26
  %22 = phi i8* [ %27, %26 ], [ %19, %18 ]
  %23 = load i8, i8* %22, align 1
  switch i8 %23, label %26 [
    i8 10, label %24
    i8 13, label %24
  ]

24:                                               ; preds = %21, %21
  %25 = getelementptr inbounds i8, i8* %22, i64 1
  br label %42

26:                                               ; preds = %21
  %27 = getelementptr inbounds i8, i8* %22, i64 1
  %28 = icmp eq i8* %27, %1
  br i1 %28, label %45, label %21

29:                                               ; preds = %16
  %30 = getelementptr inbounds i8, i8* %7, i64 2
  %31 = icmp ult i8* %30, %1
  br i1 %31, label %32, label %46

32:                                               ; preds = %29, %40
  %33 = phi i8 [ %36, %40 ], [ 0, %29 ]
  %34 = phi i8* [ %39, %40 ], [ %30, %29 ]
  %35 = icmp eq i8 %33, 42
  %36 = load i8, i8* %34, align 1
  %37 = icmp eq i8 %36, 47
  %38 = and i1 %35, %37
  %39 = getelementptr inbounds i8, i8* %34, i64 1
  br i1 %38, label %42, label %40

40:                                               ; preds = %32
  %41 = icmp eq i8* %39, %1
  br i1 %41, label %46, label %32

42:                                               ; preds = %32, %24, %9
  %43 = phi i8* [ %10, %9 ], [ %25, %24 ], [ %39, %32 ]
  %44 = icmp ult i8* %43, %1
  br i1 %44, label %6, label %46

45:                                               ; preds = %18, %11, %26
  store i8* %1, i8** %2, align 8
  br label %248

46:                                               ; preds = %6, %13, %16, %29, %42, %40, %4
  %47 = phi i8* [ %0, %4 ], [ %7, %40 ], [ %7, %6 ], [ %7, %29 ], [ %7, %16 ], [ %7, %13 ], [ %43, %42 ]
  store i8* %47, i8** %2, align 8
  %48 = icmp eq i8* %47, %1
  br i1 %48, label %248, label %49

49:                                               ; preds = %46
  %50 = load i8, i8* %47, align 1
  switch i8 %50, label %248 [
    i8 110, label %51
    i8 116, label %66
    i8 102, label %81
    i8 91, label %96
    i8 93, label %98
    i8 44, label %100
    i8 123, label %102
    i8 125, label %104
    i8 58, label %106
    i8 48, label %108
    i8 49, label %108
    i8 50, label %108
    i8 51, label %108
    i8 52, label %108
    i8 53, label %108
    i8 54, label %108
    i8 55, label %108
    i8 56, label %108
    i8 57, label %108
    i8 45, label %108
    i8 34, label %186
  ]

51:                                               ; preds = %49
  %52 = icmp ult i8* %47, %1
  br i1 %52, label %53, label %59

53:                                               ; preds = %51
  %54 = getelementptr inbounds i8, i8* %47, i64 1
  %55 = load i8, i8* %47, align 1
  %56 = icmp eq i8 %55, 110
  %57 = icmp ult i8* %54, %1
  %58 = and i1 %56, %57
  br i1 %58, label %250, label %59

59:                                               ; preds = %262, %256, %250, %53, %51
  %60 = phi i8* [ %47, %51 ], [ %54, %53 ], [ %251, %250 ], [ %257, %256 ], [ %263, %262 ]
  %61 = phi i8* [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 0), %51 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 1), %53 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 2), %250 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 3), %256 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 4), %262 ]
  %62 = load i8, i8* %61, align 1
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %64, label %248

64:                                               ; preds = %262, %59
  %65 = phi i8* [ %60, %59 ], [ %263, %262 ]
  store i8* %65, i8** %3, align 8
  br label %248

66:                                               ; preds = %49
  %67 = icmp ult i8* %47, %1
  br i1 %67, label %68, label %74

68:                                               ; preds = %66
  %69 = getelementptr inbounds i8, i8* %47, i64 1
  %70 = load i8, i8* %47, align 1
  %71 = icmp eq i8 %70, 116
  %72 = icmp ult i8* %69, %1
  %73 = and i1 %71, %72
  br i1 %73, label %268, label %74

74:                                               ; preds = %280, %274, %268, %68, %66
  %75 = phi i8* [ %47, %66 ], [ %69, %68 ], [ %269, %268 ], [ %275, %274 ], [ %281, %280 ]
  %76 = phi i8* [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i64 0, i64 0), %66 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i64 0, i64 1), %68 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i64 0, i64 2), %268 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i64 0, i64 3), %274 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i64 0, i64 4), %280 ]
  %77 = load i8, i8* %76, align 1
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %79, label %248

79:                                               ; preds = %280, %74
  %80 = phi i8* [ %75, %74 ], [ %281, %280 ]
  store i8* %80, i8** %3, align 8
  br label %248

81:                                               ; preds = %49
  %82 = icmp ult i8* %47, %1
  br i1 %82, label %83, label %89

83:                                               ; preds = %81
  %84 = getelementptr inbounds i8, i8* %47, i64 1
  %85 = load i8, i8* %47, align 1
  %86 = icmp eq i8 %85, 102
  %87 = icmp ult i8* %84, %1
  %88 = and i1 %86, %87
  br i1 %88, label %286, label %89

89:                                               ; preds = %304, %298, %292, %286, %83, %81
  %90 = phi i8* [ %47, %81 ], [ %84, %83 ], [ %287, %286 ], [ %293, %292 ], [ %299, %298 ], [ %305, %304 ]
  %91 = phi i8* [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i64 0, i64 0), %81 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i64 0, i64 1), %83 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i64 0, i64 2), %286 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i64 0, i64 3), %292 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i64 0, i64 4), %298 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i64 0, i64 5), %304 ]
  %92 = load i8, i8* %91, align 1
  %93 = icmp eq i8 %92, 0
  br i1 %93, label %94, label %248

94:                                               ; preds = %304, %89
  %95 = phi i8* [ %90, %89 ], [ %305, %304 ]
  store i8* %95, i8** %3, align 8
  br label %248

96:                                               ; preds = %49
  %97 = getelementptr inbounds i8, i8* %47, i64 1
  store i8* %97, i8** %3, align 8
  br label %248

98:                                               ; preds = %49
  %99 = getelementptr inbounds i8, i8* %47, i64 1
  store i8* %99, i8** %3, align 8
  br label %248

100:                                              ; preds = %49
  %101 = getelementptr inbounds i8, i8* %47, i64 1
  store i8* %101, i8** %3, align 8
  br label %248

102:                                              ; preds = %49
  %103 = getelementptr inbounds i8, i8* %47, i64 1
  store i8* %103, i8** %3, align 8
  br label %248

104:                                              ; preds = %49
  %105 = getelementptr inbounds i8, i8* %47, i64 1
  store i8* %105, i8** %3, align 8
  br label %248

106:                                              ; preds = %49
  %107 = getelementptr inbounds i8, i8* %47, i64 1
  store i8* %107, i8** %3, align 8
  br label %248

108:                                              ; preds = %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49
  %109 = icmp eq i8 %50, 45
  %110 = getelementptr inbounds i8, i8* %47, i64 1
  %111 = select i1 %109, i8* %110, i8* %47
  %112 = icmp eq i8* %111, %1
  br i1 %112, label %248, label %113

113:                                              ; preds = %108
  %114 = load i8, i8* %111, align 1
  %115 = icmp ne i8 %114, 48
  %116 = icmp ult i8* %111, %1
  %117 = add i8 %114, -48
  %118 = icmp ult i8 %117, 10
  %119 = and i1 %116, %118
  br i1 %119, label %120, label %248

120:                                              ; preds = %113, %125
  %121 = phi i8* [ %123, %125 ], [ %111, %113 ]
  %122 = phi i32 [ %126, %125 ], [ 0, %113 ]
  %123 = getelementptr inbounds i8, i8* %121, i64 1
  %124 = icmp eq i8* %123, %1
  br i1 %124, label %130, label %125

125:                                              ; preds = %120
  %126 = add nuw nsw i32 %122, 1
  %127 = load i8, i8* %123, align 1
  %128 = add i8 %127, -48
  %129 = icmp ult i8 %128, 10
  br i1 %129, label %120, label %130

130:                                              ; preds = %125, %120
  %131 = phi i8* [ %123, %125 ], [ %1, %120 ]
  %132 = icmp eq i32 %122, 0
  %133 = or i1 %115, %132
  br i1 %133, label %134, label %248

134:                                              ; preds = %130
  %135 = icmp eq i8* %131, %1
  br i1 %135, label %136, label %137

136:                                              ; preds = %134
  store i8* %1, i8** %3, align 8
  br label %248

137:                                              ; preds = %134
  %138 = load i8, i8* %131, align 1
  %139 = icmp eq i8 %138, 46
  br i1 %139, label %140, label %156

140:                                              ; preds = %137
  %141 = getelementptr inbounds i8, i8* %131, i64 1
  %142 = icmp ult i8* %141, %1
  br i1 %142, label %143, label %248

143:                                              ; preds = %140
  %144 = load i8, i8* %141, align 1
  %145 = add i8 %144, -48
  %146 = icmp ult i8 %145, 10
  br i1 %146, label %147, label %248

147:                                              ; preds = %143, %151
  %148 = phi i8* [ %149, %151 ], [ %141, %143 ]
  %149 = getelementptr inbounds i8, i8* %148, i64 1
  %150 = icmp eq i8* %149, %1
  br i1 %150, label %155, label %151

151:                                              ; preds = %147
  %152 = load i8, i8* %149, align 1
  %153 = add i8 %152, -48
  %154 = icmp ult i8 %153, 10
  br i1 %154, label %147, label %156

155:                                              ; preds = %147
  store i8* %1, i8** %3, align 8
  br label %248

156:                                              ; preds = %151, %137
  %157 = phi i8* [ %131, %137 ], [ %149, %151 ]
  %158 = phi i8 [ %138, %137 ], [ %152, %151 ]
  switch i8 %158, label %182 [
    i8 101, label %159
    i8 69, label %159
  ]

159:                                              ; preds = %156, %156
  %160 = getelementptr inbounds i8, i8* %157, i64 1
  %161 = icmp eq i8* %160, %1
  br i1 %161, label %248, label %162

162:                                              ; preds = %159
  %163 = load i8, i8* %160, align 1
  switch i8 %163, label %167 [
    i8 45, label %164
    i8 43, label %164
  ]

164:                                              ; preds = %162, %162
  %165 = getelementptr inbounds i8, i8* %157, i64 2
  %166 = icmp eq i8* %165, %1
  br i1 %166, label %248, label %167

167:                                              ; preds = %164, %162
  %168 = phi i8* [ %160, %162 ], [ %165, %164 ]
  %169 = icmp ult i8* %168, %1
  br i1 %169, label %170, label %248

170:                                              ; preds = %167
  %171 = load i8, i8* %168, align 1
  %172 = add i8 %171, -48
  %173 = icmp ult i8 %172, 10
  br i1 %173, label %174, label %248

174:                                              ; preds = %170, %178
  %175 = phi i8* [ %176, %178 ], [ %168, %170 ]
  %176 = getelementptr inbounds i8, i8* %175, i64 1
  %177 = icmp eq i8* %176, %1
  br i1 %177, label %182, label %178

178:                                              ; preds = %174
  %179 = load i8, i8* %176, align 1
  %180 = add i8 %179, -48
  %181 = icmp ult i8 %180, 10
  br i1 %181, label %174, label %182

182:                                              ; preds = %178, %174, %156
  %183 = phi i8* [ %157, %156 ], [ %176, %178 ], [ %1, %174 ]
  %184 = ptrtoint i8* %183 to i64
  %185 = bitcast i8** %3 to i64*
  store i64 %184, i64* %185, align 8
  br label %248

186:                                              ; preds = %49
  %187 = getelementptr inbounds i8, i8* %47, i64 1
  %188 = icmp ult i8* %187, %1
  br i1 %188, label %189, label %248

189:                                              ; preds = %186
  %190 = ptrtoint i8* %1 to i64
  br label %191

191:                                              ; preds = %230, %189
  %192 = phi i8* [ %187, %189 ], [ %231, %230 ]
  %193 = getelementptr inbounds i8, i8* %192, i64 1
  %194 = load i8, i8* %192, align 1
  switch i8 %194, label %230 [
    i8 92, label %195
    i8 34, label %247
  ]

195:                                              ; preds = %191
  %196 = icmp eq i8* %193, %1
  br i1 %196, label %248, label %197

197:                                              ; preds = %195
  %198 = getelementptr inbounds i8, i8* %192, i64 2
  %199 = load i8, i8* %193, align 1
  switch i8 %199, label %248 [
    i8 120, label %200
    i8 117, label %215
    i8 92, label %230
    i8 47, label %230
    i8 98, label %230
    i8 102, label %230
    i8 110, label %230
    i8 114, label %230
    i8 116, label %230
    i8 118, label %230
    i8 34, label %230
  ]

200:                                              ; preds = %197
  %201 = ptrtoint i8* %198 to i64
  %202 = sub i64 %190, %201
  %203 = icmp slt i64 %202, 2
  br i1 %203, label %248, label %204

204:                                              ; preds = %200
  %205 = getelementptr inbounds i8, i8* %192, i64 3
  %206 = load i8, i8* %198, align 1
  %207 = add i8 %206, -48
  %208 = icmp ult i8 %207, 10
  br i1 %208, label %210, label %209

209:                                              ; preds = %204
  switch i8 %206, label %248 [
    i8 102, label %210
    i8 101, label %210
    i8 100, label %210
    i8 99, label %210
    i8 98, label %210
    i8 97, label %210
    i8 70, label %210
    i8 69, label %210
    i8 68, label %210
    i8 67, label %210
    i8 66, label %210
    i8 65, label %210
  ]

210:                                              ; preds = %209, %209, %209, %209, %209, %209, %209, %209, %209, %209, %209, %209, %204
  %211 = getelementptr inbounds i8, i8* %192, i64 4
  %212 = load i8, i8* %205, align 1
  %213 = add i8 %212, -48
  %214 = icmp ult i8 %213, 10
  br i1 %214, label %230, label %246

215:                                              ; preds = %197
  %216 = ptrtoint i8* %198 to i64
  %217 = sub i64 %190, %216
  %218 = icmp slt i64 %217, 4
  br i1 %218, label %248, label %219

219:                                              ; preds = %215
  %220 = getelementptr inbounds i8, i8* %192, i64 3
  %221 = load i8, i8* %198, align 1
  %222 = add i8 %221, -48
  %223 = icmp ult i8 %222, 10
  br i1 %223, label %225, label %224

224:                                              ; preds = %219
  switch i8 %221, label %248 [
    i8 102, label %225
    i8 101, label %225
    i8 100, label %225
    i8 99, label %225
    i8 98, label %225
    i8 97, label %225
    i8 70, label %225
    i8 69, label %225
    i8 68, label %225
    i8 67, label %225
    i8 66, label %225
    i8 65, label %225
  ]

225:                                              ; preds = %224, %224, %224, %224, %224, %224, %224, %224, %224, %224, %224, %224, %219
  %226 = getelementptr inbounds i8, i8* %192, i64 4
  %227 = load i8, i8* %220, align 1
  %228 = add i8 %227, -48
  %229 = icmp ult i8 %228, 10
  br i1 %229, label %234, label %233

230:                                              ; preds = %246, %246, %246, %246, %246, %246, %246, %246, %246, %246, %246, %246, %245, %245, %245, %245, %245, %245, %245, %245, %245, %245, %245, %245, %240, %210, %197, %197, %197, %197, %197, %197, %197, %197, %197, %191
  %231 = phi i8* [ %193, %191 ], [ %198, %197 ], [ %198, %197 ], [ %198, %197 ], [ %198, %197 ], [ %198, %197 ], [ %198, %197 ], [ %198, %197 ], [ %198, %197 ], [ %198, %197 ], [ %241, %245 ], [ %241, %245 ], [ %241, %245 ], [ %241, %245 ], [ %241, %245 ], [ %241, %245 ], [ %241, %245 ], [ %241, %245 ], [ %241, %245 ], [ %241, %245 ], [ %241, %245 ], [ %241, %245 ], [ %241, %240 ], [ %211, %246 ], [ %211, %246 ], [ %211, %246 ], [ %211, %246 ], [ %211, %246 ], [ %211, %246 ], [ %211, %246 ], [ %211, %246 ], [ %211, %246 ], [ %211, %246 ], [ %211, %246 ], [ %211, %246 ], [ %211, %210 ]
  %232 = icmp ult i8* %231, %1
  br i1 %232, label %191, label %248

233:                                              ; preds = %225
  switch i8 %227, label %248 [
    i8 102, label %234
    i8 101, label %234
    i8 100, label %234
    i8 99, label %234
    i8 98, label %234
    i8 97, label %234
    i8 70, label %234
    i8 69, label %234
    i8 68, label %234
    i8 67, label %234
    i8 66, label %234
    i8 65, label %234
  ]

234:                                              ; preds = %233, %233, %233, %233, %233, %233, %233, %233, %233, %233, %233, %233, %225
  %235 = getelementptr inbounds i8, i8* %192, i64 5
  %236 = load i8, i8* %226, align 1
  %237 = add i8 %236, -48
  %238 = icmp ult i8 %237, 10
  br i1 %238, label %240, label %239

239:                                              ; preds = %234
  switch i8 %236, label %248 [
    i8 102, label %240
    i8 101, label %240
    i8 100, label %240
    i8 99, label %240
    i8 98, label %240
    i8 97, label %240
    i8 70, label %240
    i8 69, label %240
    i8 68, label %240
    i8 67, label %240
    i8 66, label %240
    i8 65, label %240
  ]

240:                                              ; preds = %239, %239, %239, %239, %239, %239, %239, %239, %239, %239, %239, %239, %234
  %241 = getelementptr inbounds i8, i8* %192, i64 6
  %242 = load i8, i8* %235, align 1
  %243 = add i8 %242, -48
  %244 = icmp ult i8 %243, 10
  br i1 %244, label %230, label %245

245:                                              ; preds = %240
  switch i8 %242, label %248 [
    i8 102, label %230
    i8 101, label %230
    i8 100, label %230
    i8 99, label %230
    i8 98, label %230
    i8 97, label %230
    i8 70, label %230
    i8 69, label %230
    i8 68, label %230
    i8 67, label %230
    i8 66, label %230
    i8 65, label %230
  ]

246:                                              ; preds = %210
  switch i8 %212, label %248 [
    i8 102, label %230
    i8 101, label %230
    i8 100, label %230
    i8 99, label %230
    i8 98, label %230
    i8 97, label %230
    i8 70, label %230
    i8 69, label %230
    i8 68, label %230
    i8 67, label %230
    i8 66, label %230
    i8 65, label %230
  ]

247:                                              ; preds = %191
  store i8* %193, i8** %3, align 8
  br label %248

248:                                              ; preds = %230, %195, %197, %200, %215, %224, %233, %239, %245, %209, %246, %186, %170, %143, %167, %140, %113, %130, %108, %164, %159, %49, %59, %74, %89, %247, %182, %155, %136, %94, %79, %64, %45, %46, %106, %104, %102, %100, %98, %96
  %249 = phi i32 [ 10, %106 ], [ 1, %104 ], [ 0, %102 ], [ 9, %100 ], [ 3, %98 ], [ 2, %96 ], [ 12, %46 ], [ 4, %247 ], [ 12, %45 ], [ 8, %64 ], [ 6, %79 ], [ 7, %94 ], [ 5, %136 ], [ 5, %155 ], [ 5, %182 ], [ 11, %89 ], [ 11, %74 ], [ 11, %59 ], [ 11, %49 ], [ 11, %159 ], [ 11, %164 ], [ 11, %108 ], [ 11, %130 ], [ 11, %113 ], [ 11, %140 ], [ 11, %167 ], [ 11, %143 ], [ 11, %170 ], [ 11, %186 ], [ 11, %246 ], [ 11, %209 ], [ 11, %245 ], [ 11, %239 ], [ 11, %233 ], [ 11, %224 ], [ 11, %215 ], [ 11, %200 ], [ 11, %197 ], [ 11, %195 ], [ 11, %230 ]
  ret i32 %249

250:                                              ; preds = %53
  %251 = getelementptr inbounds i8, i8* %47, i64 2
  %252 = load i8, i8* %54, align 1
  %253 = icmp eq i8 %252, 117
  %254 = icmp ult i8* %251, %1
  %255 = and i1 %253, %254
  br i1 %255, label %256, label %59

256:                                              ; preds = %250
  %257 = getelementptr inbounds i8, i8* %47, i64 3
  %258 = load i8, i8* %251, align 1
  %259 = icmp eq i8 %258, 108
  %260 = icmp ult i8* %257, %1
  %261 = and i1 %259, %260
  br i1 %261, label %262, label %59

262:                                              ; preds = %256
  %263 = getelementptr inbounds i8, i8* %47, i64 4
  %264 = load i8, i8* %257, align 1
  %265 = icmp eq i8 %264, 108
  %266 = icmp ult i8* %263, %1
  %267 = and i1 %265, %266
  br i1 %267, label %64, label %59

268:                                              ; preds = %68
  %269 = getelementptr inbounds i8, i8* %47, i64 2
  %270 = load i8, i8* %69, align 1
  %271 = icmp eq i8 %270, 114
  %272 = icmp ult i8* %269, %1
  %273 = and i1 %271, %272
  br i1 %273, label %274, label %74

274:                                              ; preds = %268
  %275 = getelementptr inbounds i8, i8* %47, i64 3
  %276 = load i8, i8* %269, align 1
  %277 = icmp eq i8 %276, 117
  %278 = icmp ult i8* %275, %1
  %279 = and i1 %277, %278
  br i1 %279, label %280, label %74

280:                                              ; preds = %274
  %281 = getelementptr inbounds i8, i8* %47, i64 4
  %282 = load i8, i8* %275, align 1
  %283 = icmp eq i8 %282, 101
  %284 = icmp ult i8* %281, %1
  %285 = and i1 %283, %284
  br i1 %285, label %79, label %74

286:                                              ; preds = %83
  %287 = getelementptr inbounds i8, i8* %47, i64 2
  %288 = load i8, i8* %84, align 1
  %289 = icmp eq i8 %288, 97
  %290 = icmp ult i8* %287, %1
  %291 = and i1 %289, %290
  br i1 %291, label %292, label %89

292:                                              ; preds = %286
  %293 = getelementptr inbounds i8, i8* %47, i64 3
  %294 = load i8, i8* %287, align 1
  %295 = icmp eq i8 %294, 108
  %296 = icmp ult i8* %293, %1
  %297 = and i1 %295, %296
  br i1 %297, label %298, label %89

298:                                              ; preds = %292
  %299 = getelementptr inbounds i8, i8* %47, i64 4
  %300 = load i8, i8* %293, align 1
  %301 = icmp eq i8 %300, 115
  %302 = icmp ult i8* %299, %1
  %303 = and i1 %301, %302
  br i1 %303, label %304, label %89

304:                                              ; preds = %298
  %305 = getelementptr inbounds i8, i8* %47, i64 5
  %306 = load i8, i8* %299, align 1
  %307 = icmp eq i8 %306, 101
  %308 = icmp ult i8* %305, %1
  %309 = and i1 %307, %308
  br i1 %309, label %94, label %89
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserIhE12DecodeStringEPKhS5_PNSt3__16vectorItNS6_9allocatorItEEEE(i8*, i8*, %"class.std::__1::vector.36"*) unnamed_addr #0 align 2 {
  %4 = icmp eq i8* %0, %1
  br i1 %4, label %487, label %5

5:                                                ; preds = %3
  %6 = icmp ugt i8* %0, %1
  br i1 %6, label %487, label %7

7:                                                ; preds = %5
  %8 = ptrtoint i8* %1 to i64
  %9 = ptrtoint i8* %0 to i64
  %10 = sub i64 %8, %9
  %11 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %12 = bitcast i16** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %"class.std::__1::vector.36"* %2 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = sub i64 %13, %15
  %17 = ashr exact i64 %16, 1
  %18 = icmp ult i64 %17, %10
  br i1 %18, label %19, label %43

19:                                               ; preds = %7
  %20 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %2, i64 0, i32 0, i32 1
  %21 = bitcast i16** %20 to i64*
  %22 = icmp slt i64 %10, 0
  br i1 %22, label %23, label %24

23:                                               ; preds = %19
  tail call void @abort() #13
  unreachable

24:                                               ; preds = %19
  %25 = load i64, i64* %21, align 8
  %26 = sub i64 %25, %15
  %27 = ashr exact i64 %26, 1
  %28 = shl i64 %10, 1
  %29 = tail call i8* @_Znwm(i64 %28) #11
  %30 = bitcast i8* %29 to i16*
  %31 = getelementptr inbounds i16, i16* %30, i64 %27
  %32 = ptrtoint i16* %31 to i64
  %33 = getelementptr inbounds i16, i16* %30, i64 %10
  %34 = ptrtoint i16* %33 to i64
  %35 = ptrtoint i8* %29 to i64
  %36 = icmp sgt i64 %26, 0
  br i1 %36, label %37, label %39

37:                                               ; preds = %24
  %38 = inttoptr i64 %15 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %29, i8* align 2 %38, i64 %26, i1 false) #12
  br label %39

39:                                               ; preds = %37, %24
  store i64 %35, i64* %14, align 8
  store i64 %32, i64* %21, align 8
  store i64 %34, i64* %12, align 8
  %40 = icmp eq i64 %15, 0
  br i1 %40, label %43, label %41

41:                                               ; preds = %39
  %42 = inttoptr i64 %15 to i8*
  tail call void @_ZdlPv(i8* %42) #11
  br label %43

43:                                               ; preds = %7, %39, %41
  %44 = icmp ult i8* %0, %1
  br i1 %44, label %45, label %487

45:                                               ; preds = %43
  %46 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %2, i64 0, i32 0, i32 1
  %47 = bitcast i16** %46 to i64*
  %48 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %2, i64 0, i32 0, i32 0
  br label %49

49:                                               ; preds = %45, %484
  %50 = phi i8* [ %0, %45 ], [ %485, %484 ]
  %51 = getelementptr inbounds i8, i8* %50, i64 1
  %52 = load i8, i8* %50, align 1
  %53 = zext i8 %52 to i16
  %54 = zext i8 %52 to i32
  %55 = icmp slt i8 %52, 0
  br i1 %55, label %56, label %270

56:                                               ; preds = %49
  %57 = and i32 %54, 224
  %58 = icmp eq i32 %57, 192
  br i1 %58, label %65, label %59

59:                                               ; preds = %56
  %60 = and i32 %54, 240
  %61 = icmp eq i32 %60, 224
  br i1 %61, label %65, label %62

62:                                               ; preds = %59
  %63 = and i32 %54, 248
  %64 = icmp eq i32 %63, 240
  br i1 %64, label %65, label %487

65:                                               ; preds = %62, %59, %56
  %66 = phi i32 [ 31, %56 ], [ 15, %59 ], [ 7, %62 ]
  %67 = phi i32 [ 1, %56 ], [ 2, %59 ], [ 3, %62 ]
  %68 = and i32 %66, %54
  %69 = zext i32 %67 to i64
  %70 = getelementptr inbounds i8, i8* %51, i64 %69
  %71 = icmp ugt i8* %70, %1
  br i1 %71, label %487, label %72

72:                                               ; preds = %65
  %73 = load i8, i8* %51, align 1
  %74 = zext i8 %73 to i32
  %75 = and i32 %74, 192
  %76 = icmp eq i32 %75, 128
  br i1 %76, label %77, label %487

77:                                               ; preds = %72
  %78 = getelementptr inbounds i8, i8* %50, i64 2
  %79 = shl nuw nsw i32 %68, 6
  %80 = and i32 %74, 63
  %81 = or i32 %80, %79
  %82 = icmp ugt i32 %67, 1
  br i1 %82, label %489, label %83

83:                                               ; preds = %505, %494, %77
  %84 = phi i8* [ %78, %77 ], [ %495, %494 ], [ %506, %505 ]
  %85 = phi i32 [ %81, %77 ], [ %498, %494 ], [ %509, %505 ]
  %86 = add i32 %85, -128
  %87 = icmp ugt i32 %86, 1113983
  br i1 %87, label %487, label %88

88:                                               ; preds = %83
  %89 = icmp ult i32 %85, 65536
  br i1 %89, label %90, label %148

90:                                               ; preds = %88
  %91 = trunc i32 %85 to i16
  %92 = load i16*, i16** %46, align 8
  %93 = load i16*, i16** %11, align 8
  %94 = icmp ult i16* %92, %93
  %95 = ptrtoint i16* %93 to i64
  br i1 %94, label %96, label %99

96:                                               ; preds = %90
  store i16 %91, i16* %92, align 2
  %97 = getelementptr inbounds i16, i16* %92, i64 1
  %98 = ptrtoint i16* %97 to i64
  store i64 %98, i64* %47, align 8
  br label %484

99:                                               ; preds = %90
  %100 = ptrtoint i16* %92 to i64
  %101 = load i64, i64* %14, align 8
  %102 = sub i64 %100, %101
  %103 = ashr exact i64 %102, 1
  %104 = add nsw i64 %103, 1
  %105 = icmp slt i64 %104, 0
  br i1 %105, label %106, label %108

106:                                              ; preds = %99
  %107 = bitcast %"class.std::__1::vector.36"* %2 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %107) #13
  unreachable

108:                                              ; preds = %99
  %109 = sub i64 %95, %101
  %110 = ashr exact i64 %109, 1
  %111 = icmp ult i64 %110, 4611686018427387903
  %112 = icmp ult i64 %109, %104
  %113 = select i1 %112, i64 %104, i64 %109
  %114 = select i1 %111, i64 %113, i64 9223372036854775807
  %115 = icmp eq i64 %114, 0
  br i1 %115, label %123, label %116

116:                                              ; preds = %108
  %117 = icmp slt i64 %114, 0
  br i1 %117, label %118, label %119

118:                                              ; preds = %116
  tail call void @abort() #13
  unreachable

119:                                              ; preds = %116
  %120 = shl i64 %114, 1
  %121 = tail call i8* @_Znwm(i64 %120) #11
  %122 = bitcast i8* %121 to i16*
  br label %123

123:                                              ; preds = %119, %108
  %124 = phi i16* [ %122, %119 ], [ null, %108 ]
  %125 = getelementptr inbounds i16, i16* %124, i64 %103
  %126 = getelementptr inbounds i16, i16* %124, i64 %114
  %127 = ptrtoint i16* %126 to i64
  store i16 %91, i16* %125, align 2
  %128 = getelementptr inbounds i16, i16* %125, i64 1
  %129 = ptrtoint i16* %128 to i64
  %130 = load i16*, i16** %48, align 8
  %131 = load i64, i64* %47, align 8
  %132 = ptrtoint i16* %130 to i64
  %133 = sub i64 %131, %132
  %134 = ashr exact i64 %133, 1
  %135 = sub nsw i64 0, %134
  %136 = getelementptr inbounds i16, i16* %125, i64 %135
  %137 = ptrtoint i16* %136 to i64
  %138 = icmp sgt i64 %133, 0
  br i1 %138, label %139, label %143

139:                                              ; preds = %123
  %140 = bitcast i16* %136 to i8*
  %141 = bitcast i16* %130 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %140, i8* align 2 %141, i64 %133, i1 false) #12
  %142 = load i16*, i16** %48, align 8
  br label %143

143:                                              ; preds = %139, %123
  %144 = phi i16* [ %130, %123 ], [ %142, %139 ]
  store i64 %137, i64* %14, align 8
  store i64 %129, i64* %47, align 8
  store i64 %127, i64* %12, align 8
  %145 = icmp eq i16* %144, null
  br i1 %145, label %484, label %146

146:                                              ; preds = %143
  %147 = bitcast i16* %144 to i8*
  tail call void @_ZdlPv(i8* %147) #11
  br label %484

148:                                              ; preds = %88
  %149 = add nsw i32 %85, -65536
  %150 = lshr i32 %149, 10
  %151 = trunc i32 %150 to i16
  %152 = add nuw nsw i16 %151, -10240
  %153 = load i16*, i16** %46, align 8
  %154 = load i16*, i16** %11, align 8
  %155 = icmp ult i16* %153, %154
  %156 = ptrtoint i16* %154 to i64
  br i1 %155, label %157, label %160

157:                                              ; preds = %148
  store i16 %152, i16* %153, align 2
  %158 = getelementptr inbounds i16, i16* %153, i64 1
  %159 = ptrtoint i16* %158 to i64
  store i64 %159, i64* %47, align 8
  br label %210

160:                                              ; preds = %148
  %161 = ptrtoint i16* %153 to i64
  %162 = load i64, i64* %14, align 8
  %163 = sub i64 %161, %162
  %164 = ashr exact i64 %163, 1
  %165 = add nsw i64 %164, 1
  %166 = icmp slt i64 %165, 0
  br i1 %166, label %167, label %169

167:                                              ; preds = %160
  %168 = bitcast %"class.std::__1::vector.36"* %2 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %168) #13
  unreachable

169:                                              ; preds = %160
  %170 = sub i64 %156, %162
  %171 = ashr exact i64 %170, 1
  %172 = icmp ult i64 %171, 4611686018427387903
  %173 = icmp ult i64 %170, %165
  %174 = select i1 %173, i64 %165, i64 %170
  %175 = select i1 %172, i64 %174, i64 9223372036854775807
  %176 = icmp eq i64 %175, 0
  br i1 %176, label %184, label %177

177:                                              ; preds = %169
  %178 = icmp slt i64 %175, 0
  br i1 %178, label %179, label %180

179:                                              ; preds = %177
  tail call void @abort() #13
  unreachable

180:                                              ; preds = %177
  %181 = shl i64 %175, 1
  %182 = tail call i8* @_Znwm(i64 %181) #11
  %183 = bitcast i8* %182 to i16*
  br label %184

184:                                              ; preds = %180, %169
  %185 = phi i16* [ %183, %180 ], [ null, %169 ]
  %186 = getelementptr inbounds i16, i16* %185, i64 %164
  %187 = getelementptr inbounds i16, i16* %185, i64 %175
  %188 = ptrtoint i16* %187 to i64
  store i16 %152, i16* %186, align 2
  %189 = getelementptr inbounds i16, i16* %186, i64 1
  %190 = ptrtoint i16* %189 to i64
  %191 = load i16*, i16** %48, align 8
  %192 = load i64, i64* %47, align 8
  %193 = ptrtoint i16* %191 to i64
  %194 = sub i64 %192, %193
  %195 = ashr exact i64 %194, 1
  %196 = sub nsw i64 0, %195
  %197 = getelementptr inbounds i16, i16* %186, i64 %196
  %198 = ptrtoint i16* %197 to i64
  %199 = icmp sgt i64 %194, 0
  br i1 %199, label %200, label %204

200:                                              ; preds = %184
  %201 = bitcast i16* %197 to i8*
  %202 = bitcast i16* %191 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %201, i8* align 2 %202, i64 %194, i1 false) #12
  %203 = load i16*, i16** %48, align 8
  br label %204

204:                                              ; preds = %200, %184
  %205 = phi i16* [ %191, %184 ], [ %203, %200 ]
  store i64 %198, i64* %14, align 8
  store i64 %190, i64* %47, align 8
  store i64 %188, i64* %12, align 8
  %206 = icmp eq i16* %205, null
  br i1 %206, label %210, label %207

207:                                              ; preds = %204
  %208 = bitcast i16* %205 to i8*
  tail call void @_ZdlPv(i8* %208) #11
  %209 = load i16*, i16** %46, align 8
  br label %210

210:                                              ; preds = %157, %204, %207
  %211 = phi i16* [ %158, %157 ], [ %189, %204 ], [ %209, %207 ]
  %212 = trunc i32 %149 to i16
  %213 = and i16 %212, 1023
  %214 = or i16 %213, -9216
  %215 = load i16*, i16** %11, align 8
  %216 = icmp ult i16* %211, %215
  %217 = ptrtoint i16* %215 to i64
  br i1 %216, label %218, label %221

218:                                              ; preds = %210
  store i16 %214, i16* %211, align 2
  %219 = getelementptr inbounds i16, i16* %211, i64 1
  %220 = ptrtoint i16* %219 to i64
  store i64 %220, i64* %47, align 8
  br label %484

221:                                              ; preds = %210
  %222 = ptrtoint i16* %211 to i64
  %223 = load i64, i64* %14, align 8
  %224 = sub i64 %222, %223
  %225 = ashr exact i64 %224, 1
  %226 = add nsw i64 %225, 1
  %227 = icmp slt i64 %226, 0
  br i1 %227, label %228, label %230

228:                                              ; preds = %221
  %229 = bitcast %"class.std::__1::vector.36"* %2 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %229) #13
  unreachable

230:                                              ; preds = %221
  %231 = sub i64 %217, %223
  %232 = ashr exact i64 %231, 1
  %233 = icmp ult i64 %232, 4611686018427387903
  %234 = icmp ult i64 %231, %226
  %235 = select i1 %234, i64 %226, i64 %231
  %236 = select i1 %233, i64 %235, i64 9223372036854775807
  %237 = icmp eq i64 %236, 0
  br i1 %237, label %245, label %238

238:                                              ; preds = %230
  %239 = icmp slt i64 %236, 0
  br i1 %239, label %240, label %241

240:                                              ; preds = %238
  tail call void @abort() #13
  unreachable

241:                                              ; preds = %238
  %242 = shl i64 %236, 1
  %243 = tail call i8* @_Znwm(i64 %242) #11
  %244 = bitcast i8* %243 to i16*
  br label %245

245:                                              ; preds = %241, %230
  %246 = phi i16* [ %244, %241 ], [ null, %230 ]
  %247 = getelementptr inbounds i16, i16* %246, i64 %225
  %248 = getelementptr inbounds i16, i16* %246, i64 %236
  %249 = ptrtoint i16* %248 to i64
  store i16 %214, i16* %247, align 2
  %250 = getelementptr inbounds i16, i16* %247, i64 1
  %251 = ptrtoint i16* %250 to i64
  %252 = load i16*, i16** %48, align 8
  %253 = load i64, i64* %47, align 8
  %254 = ptrtoint i16* %252 to i64
  %255 = sub i64 %253, %254
  %256 = ashr exact i64 %255, 1
  %257 = sub nsw i64 0, %256
  %258 = getelementptr inbounds i16, i16* %247, i64 %257
  %259 = ptrtoint i16* %258 to i64
  %260 = icmp sgt i64 %255, 0
  br i1 %260, label %261, label %265

261:                                              ; preds = %245
  %262 = bitcast i16* %258 to i8*
  %263 = bitcast i16* %252 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %262, i8* align 2 %263, i64 %255, i1 false) #12
  %264 = load i16*, i16** %48, align 8
  br label %265

265:                                              ; preds = %261, %245
  %266 = phi i16* [ %252, %245 ], [ %264, %261 ]
  store i64 %259, i64* %14, align 8
  store i64 %251, i64* %47, align 8
  store i64 %249, i64* %12, align 8
  %267 = icmp eq i16* %266, null
  br i1 %267, label %484, label %268

268:                                              ; preds = %265
  %269 = bitcast i16* %266 to i8*
  tail call void @_ZdlPv(i8* %269) #11
  br label %484

270:                                              ; preds = %49
  %271 = icmp eq i8 %52, 92
  br i1 %271, label %329, label %272

272:                                              ; preds = %270
  %273 = load i16*, i16** %46, align 8
  %274 = load i16*, i16** %11, align 8
  %275 = icmp eq i16* %273, %274
  %276 = ptrtoint i16* %274 to i64
  br i1 %275, label %280, label %277

277:                                              ; preds = %272
  store i16 %53, i16* %273, align 2
  %278 = getelementptr inbounds i16, i16* %273, i64 1
  %279 = ptrtoint i16* %278 to i64
  store i64 %279, i64* %47, align 8
  br label %484

280:                                              ; preds = %272
  %281 = ptrtoint i16* %273 to i64
  %282 = load i64, i64* %14, align 8
  %283 = sub i64 %281, %282
  %284 = ashr exact i64 %283, 1
  %285 = add nsw i64 %284, 1
  %286 = icmp slt i64 %285, 0
  br i1 %286, label %287, label %289

287:                                              ; preds = %280
  %288 = bitcast %"class.std::__1::vector.36"* %2 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %288) #13
  unreachable

289:                                              ; preds = %280
  %290 = sub i64 %276, %282
  %291 = ashr exact i64 %290, 1
  %292 = icmp ult i64 %291, 4611686018427387903
  %293 = icmp ult i64 %290, %285
  %294 = select i1 %293, i64 %285, i64 %290
  %295 = select i1 %292, i64 %294, i64 9223372036854775807
  %296 = icmp eq i64 %295, 0
  br i1 %296, label %304, label %297

297:                                              ; preds = %289
  %298 = icmp slt i64 %295, 0
  br i1 %298, label %299, label %300

299:                                              ; preds = %297
  tail call void @abort() #13
  unreachable

300:                                              ; preds = %297
  %301 = shl i64 %295, 1
  %302 = tail call i8* @_Znwm(i64 %301) #11
  %303 = bitcast i8* %302 to i16*
  br label %304

304:                                              ; preds = %300, %289
  %305 = phi i16* [ %303, %300 ], [ null, %289 ]
  %306 = getelementptr inbounds i16, i16* %305, i64 %284
  %307 = getelementptr inbounds i16, i16* %305, i64 %295
  %308 = ptrtoint i16* %307 to i64
  store i16 %53, i16* %306, align 2
  %309 = getelementptr inbounds i16, i16* %306, i64 1
  %310 = ptrtoint i16* %309 to i64
  %311 = load i16*, i16** %48, align 8
  %312 = load i64, i64* %47, align 8
  %313 = ptrtoint i16* %311 to i64
  %314 = sub i64 %312, %313
  %315 = ashr exact i64 %314, 1
  %316 = sub nsw i64 0, %315
  %317 = getelementptr inbounds i16, i16* %306, i64 %316
  %318 = ptrtoint i16* %317 to i64
  %319 = icmp sgt i64 %314, 0
  br i1 %319, label %320, label %324

320:                                              ; preds = %304
  %321 = bitcast i16* %317 to i8*
  %322 = bitcast i16* %311 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %321, i8* align 2 %322, i64 %314, i1 false) #12
  %323 = load i16*, i16** %48, align 8
  br label %324

324:                                              ; preds = %320, %304
  %325 = phi i16* [ %311, %304 ], [ %323, %320 ]
  store i64 %318, i64* %14, align 8
  store i64 %310, i64* %47, align 8
  store i64 %308, i64* %12, align 8
  %326 = icmp eq i16* %325, null
  br i1 %326, label %484, label %327

327:                                              ; preds = %324
  %328 = bitcast i16* %325 to i8*
  tail call void @_ZdlPv(i8* %328) #11
  br label %484

329:                                              ; preds = %270
  %330 = icmp eq i8* %51, %1
  br i1 %330, label %487, label %331

331:                                              ; preds = %329
  %332 = getelementptr inbounds i8, i8* %50, i64 2
  %333 = load i8, i8* %51, align 1
  %334 = zext i8 %333 to i16
  switch i8 %333, label %487 [
    i8 117, label %341
    i8 34, label %425
    i8 47, label %425
    i8 92, label %425
    i8 98, label %335
    i8 102, label %336
    i8 110, label %337
    i8 114, label %338
    i8 116, label %339
    i8 118, label %340
  ]

335:                                              ; preds = %331
  br label %425

336:                                              ; preds = %331
  br label %425

337:                                              ; preds = %331
  br label %425

338:                                              ; preds = %331
  br label %425

339:                                              ; preds = %331
  br label %425

340:                                              ; preds = %331
  br label %425

341:                                              ; preds = %331
  %342 = load i8, i8* %332, align 1
  %343 = zext i8 %342 to i32
  %344 = add i8 %342, -48
  %345 = icmp ult i8 %344, 10
  br i1 %345, label %346, label %348

346:                                              ; preds = %341
  %347 = add nsw i32 %343, -48
  br label %358

348:                                              ; preds = %341
  %349 = add i8 %342, -65
  %350 = icmp ult i8 %349, 6
  br i1 %350, label %351, label %353

351:                                              ; preds = %348
  %352 = add nsw i32 %343, -55
  br label %358

353:                                              ; preds = %348
  %354 = add i8 %342, -97
  %355 = icmp ult i8 %354, 6
  %356 = add nsw i32 %343, -87
  %357 = select i1 %355, i32 %356, i32 0
  br label %358

358:                                              ; preds = %346, %351, %353
  %359 = phi i32 [ %357, %353 ], [ %347, %346 ], [ %352, %351 ]
  %360 = shl nsw i32 %359, 12
  %361 = getelementptr inbounds i8, i8* %50, i64 3
  %362 = load i8, i8* %361, align 1
  %363 = zext i8 %362 to i32
  %364 = add i8 %362, -48
  %365 = icmp ult i8 %364, 10
  br i1 %365, label %366, label %368

366:                                              ; preds = %358
  %367 = add nsw i32 %363, -48
  br label %378

368:                                              ; preds = %358
  %369 = add i8 %362, -65
  %370 = icmp ult i8 %369, 6
  br i1 %370, label %371, label %373

371:                                              ; preds = %368
  %372 = add nsw i32 %363, -55
  br label %378

373:                                              ; preds = %368
  %374 = add i8 %362, -97
  %375 = icmp ult i8 %374, 6
  %376 = add nsw i32 %363, -87
  %377 = select i1 %375, i32 %376, i32 0
  br label %378

378:                                              ; preds = %366, %371, %373
  %379 = phi i32 [ %377, %373 ], [ %367, %366 ], [ %372, %371 ]
  %380 = shl nsw i32 %379, 8
  %381 = add nsw i32 %380, %360
  %382 = getelementptr inbounds i8, i8* %50, i64 4
  %383 = load i8, i8* %382, align 1
  %384 = zext i8 %383 to i32
  %385 = add i8 %383, -48
  %386 = icmp ult i8 %385, 10
  br i1 %386, label %387, label %389

387:                                              ; preds = %378
  %388 = add nsw i32 %384, -48
  br label %399

389:                                              ; preds = %378
  %390 = add i8 %383, -65
  %391 = icmp ult i8 %390, 6
  br i1 %391, label %392, label %394

392:                                              ; preds = %389
  %393 = add nsw i32 %384, -55
  br label %399

394:                                              ; preds = %389
  %395 = add i8 %383, -97
  %396 = icmp ult i8 %395, 6
  %397 = add nsw i32 %384, -87
  %398 = select i1 %396, i32 %397, i32 0
  br label %399

399:                                              ; preds = %387, %392, %394
  %400 = phi i32 [ %398, %394 ], [ %388, %387 ], [ %393, %392 ]
  %401 = shl nsw i32 %400, 4
  %402 = add nsw i32 %381, %401
  %403 = getelementptr inbounds i8, i8* %50, i64 5
  %404 = load i8, i8* %403, align 1
  %405 = zext i8 %404 to i32
  %406 = add i8 %404, -48
  %407 = icmp ult i8 %406, 10
  br i1 %407, label %408, label %410

408:                                              ; preds = %399
  %409 = add nsw i32 %405, -48
  br label %420

410:                                              ; preds = %399
  %411 = add i8 %404, -65
  %412 = icmp ult i8 %411, 6
  br i1 %412, label %413, label %415

413:                                              ; preds = %410
  %414 = add nsw i32 %405, -55
  br label %420

415:                                              ; preds = %410
  %416 = add i8 %404, -97
  %417 = icmp ult i8 %416, 6
  %418 = add nsw i32 %405, -87
  %419 = select i1 %417, i32 %418, i32 0
  br label %420

420:                                              ; preds = %408, %413, %415
  %421 = phi i32 [ %419, %415 ], [ %409, %408 ], [ %414, %413 ]
  %422 = add nsw i32 %402, %421
  %423 = trunc i32 %422 to i16
  %424 = getelementptr inbounds i8, i8* %50, i64 6
  br label %425

425:                                              ; preds = %331, %331, %331, %420, %340, %339, %338, %337, %336, %335
  %426 = phi i16 [ 11, %340 ], [ 9, %339 ], [ 13, %338 ], [ 10, %337 ], [ 12, %336 ], [ 8, %335 ], [ %334, %331 ], [ %334, %331 ], [ %334, %331 ], [ %423, %420 ]
  %427 = phi i8* [ %332, %340 ], [ %332, %339 ], [ %332, %338 ], [ %332, %337 ], [ %332, %336 ], [ %332, %335 ], [ %332, %331 ], [ %332, %331 ], [ %332, %331 ], [ %424, %420 ]
  %428 = load i16*, i16** %46, align 8
  %429 = load i16*, i16** %11, align 8
  %430 = icmp eq i16* %428, %429
  %431 = ptrtoint i16* %429 to i64
  br i1 %430, label %435, label %432

432:                                              ; preds = %425
  store i16 %426, i16* %428, align 2
  %433 = getelementptr inbounds i16, i16* %428, i64 1
  %434 = ptrtoint i16* %433 to i64
  store i64 %434, i64* %47, align 8
  br label %484

435:                                              ; preds = %425
  %436 = ptrtoint i16* %428 to i64
  %437 = load i64, i64* %14, align 8
  %438 = sub i64 %436, %437
  %439 = ashr exact i64 %438, 1
  %440 = add nsw i64 %439, 1
  %441 = icmp slt i64 %440, 0
  br i1 %441, label %442, label %444

442:                                              ; preds = %435
  %443 = bitcast %"class.std::__1::vector.36"* %2 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %443) #13
  unreachable

444:                                              ; preds = %435
  %445 = sub i64 %431, %437
  %446 = ashr exact i64 %445, 1
  %447 = icmp ult i64 %446, 4611686018427387903
  %448 = icmp ult i64 %445, %440
  %449 = select i1 %448, i64 %440, i64 %445
  %450 = select i1 %447, i64 %449, i64 9223372036854775807
  %451 = icmp eq i64 %450, 0
  br i1 %451, label %459, label %452

452:                                              ; preds = %444
  %453 = icmp slt i64 %450, 0
  br i1 %453, label %454, label %455

454:                                              ; preds = %452
  tail call void @abort() #13
  unreachable

455:                                              ; preds = %452
  %456 = shl i64 %450, 1
  %457 = tail call i8* @_Znwm(i64 %456) #11
  %458 = bitcast i8* %457 to i16*
  br label %459

459:                                              ; preds = %455, %444
  %460 = phi i16* [ %458, %455 ], [ null, %444 ]
  %461 = getelementptr inbounds i16, i16* %460, i64 %439
  %462 = getelementptr inbounds i16, i16* %460, i64 %450
  %463 = ptrtoint i16* %462 to i64
  store i16 %426, i16* %461, align 2
  %464 = getelementptr inbounds i16, i16* %461, i64 1
  %465 = ptrtoint i16* %464 to i64
  %466 = load i16*, i16** %48, align 8
  %467 = load i64, i64* %47, align 8
  %468 = ptrtoint i16* %466 to i64
  %469 = sub i64 %467, %468
  %470 = ashr exact i64 %469, 1
  %471 = sub nsw i64 0, %470
  %472 = getelementptr inbounds i16, i16* %461, i64 %471
  %473 = ptrtoint i16* %472 to i64
  %474 = icmp sgt i64 %469, 0
  br i1 %474, label %475, label %479

475:                                              ; preds = %459
  %476 = bitcast i16* %472 to i8*
  %477 = bitcast i16* %466 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %476, i8* align 2 %477, i64 %469, i1 false) #12
  %478 = load i16*, i16** %48, align 8
  br label %479

479:                                              ; preds = %475, %459
  %480 = phi i16* [ %466, %459 ], [ %478, %475 ]
  store i64 %473, i64* %14, align 8
  store i64 %465, i64* %47, align 8
  store i64 %463, i64* %12, align 8
  %481 = icmp eq i16* %480, null
  br i1 %481, label %484, label %482

482:                                              ; preds = %479
  %483 = bitcast i16* %480 to i8*
  tail call void @_ZdlPv(i8* %483) #11
  br label %484

484:                                              ; preds = %482, %479, %432, %327, %324, %277, %268, %265, %218, %146, %143, %96
  %485 = phi i8* [ %84, %96 ], [ %84, %143 ], [ %84, %146 ], [ %84, %218 ], [ %84, %265 ], [ %84, %268 ], [ %51, %277 ], [ %51, %324 ], [ %51, %327 ], [ %427, %432 ], [ %427, %479 ], [ %427, %482 ]
  %486 = icmp ult i8* %485, %1
  br i1 %486, label %49, label %487

487:                                              ; preds = %484, %62, %65, %83, %329, %331, %72, %489, %500, %43, %5, %3
  %488 = phi i1 [ true, %3 ], [ false, %5 ], [ true, %43 ], [ false, %500 ], [ false, %489 ], [ false, %72 ], [ true, %484 ], [ false, %62 ], [ false, %65 ], [ false, %83 ], [ false, %329 ], [ false, %331 ]
  ret i1 %488

489:                                              ; preds = %77
  %490 = load i8, i8* %78, align 1
  %491 = zext i8 %490 to i32
  %492 = and i32 %491, 192
  %493 = icmp eq i32 %492, 128
  br i1 %493, label %494, label %487

494:                                              ; preds = %489
  %495 = getelementptr inbounds i8, i8* %50, i64 3
  %496 = shl nuw nsw i32 %81, 6
  %497 = and i32 %491, 63
  %498 = or i32 %497, %496
  %499 = icmp eq i32 %67, 3
  br i1 %499, label %500, label %83

500:                                              ; preds = %494
  %501 = load i8, i8* %495, align 1
  %502 = zext i8 %501 to i32
  %503 = and i32 %502, 192
  %504 = icmp eq i32 %503, 128
  br i1 %504, label %505, label %487

505:                                              ; preds = %500
  %506 = getelementptr inbounds i8, i8* %50, i64 4
  %507 = shl nuw nsw i32 %498, 6
  %508 = and i32 %502, 63
  %509 = or i32 %508, %507
  br label %83
}

declare zeroext i1 @_ZN8v8_crdtp4json8platform6StrToDEPKcPd(i8*, double*) local_unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserItE10ParseValueEPKtS5_PS5_i(%"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"*, i16*, i16*, i16** nocapture, i32) unnamed_addr #0 align 2 {
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca i16*, align 8
  %8 = alloca i16*, align 8
  %9 = alloca double, align 8
  %10 = alloca %"class.std::__1::vector.36", align 8
  %11 = alloca %"class.std::__1::vector.36", align 8
  %12 = icmp sgt i32 %4, 300
  br i1 %12, label %13, label %29

13:                                               ; preds = %5
  %14 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %0, i64 0, i32 1
  %15 = load i8, i8* %14, align 8, !range !2
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %17, label %478

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %0, i64 0, i32 2
  %19 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %18, align 8
  %20 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %0 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = ptrtoint i16* %1 to i64
  %23 = sub i64 %22, %21
  %24 = ashr exact i64 %23, 1
  %25 = bitcast %"class.v8_crdtp::ParserHandler"* %19 to void (%"class.v8_crdtp::ParserHandler"*, i32, i64)***
  %26 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %26, i64 13
  %28 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %27, align 8
  tail call void %28(%"class.v8_crdtp::ParserHandler"* %19, i32 2, i64 %24) #12
  store i8 1, i8* %14, align 8
  br label %478

29:                                               ; preds = %5
  %30 = bitcast i16** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #12
  store i16* null, i16** %7, align 8
  %31 = bitcast i16** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #12
  store i16* null, i16** %8, align 8
  %32 = call fastcc i32 @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserItE10ParseTokenEPKtS5_PS5_S6_(i16* %1, i16* %2, i16** nonnull %7, i16** nonnull %8)
  switch i32 %32, label %416 [
    i32 12, label %33
    i32 11, label %50
    i32 8, label %67
    i32 6, label %74
    i32 7, label %81
    i32 5, label %88
    i32 4, label %171
    i32 2, label %226
    i32 0, label %286
  ]

33:                                               ; preds = %29
  %34 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %0, i64 0, i32 1
  %35 = load i8, i8* %34, align 8, !range !2
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %37, label %477

37:                                               ; preds = %33
  %38 = bitcast i16** %7 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %0, i64 0, i32 2
  %41 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %40, align 8
  %42 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %0 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = sub i64 %39, %43
  %45 = ashr exact i64 %44, 1
  %46 = bitcast %"class.v8_crdtp::ParserHandler"* %41 to void (%"class.v8_crdtp::ParserHandler"*, i32, i64)***
  %47 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*** %46, align 8
  %48 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %47, i64 13
  %49 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %48, align 8
  tail call void %49(%"class.v8_crdtp::ParserHandler"* %41, i32 3, i64 %45) #12
  store i8 1, i8* %34, align 8
  br label %477

50:                                               ; preds = %29
  %51 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %0, i64 0, i32 1
  %52 = load i8, i8* %51, align 8, !range !2
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %54, label %477

54:                                               ; preds = %50
  %55 = bitcast i16** %7 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %0, i64 0, i32 2
  %58 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %57, align 8
  %59 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %0 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = sub i64 %56, %60
  %62 = ashr exact i64 %61, 1
  %63 = bitcast %"class.v8_crdtp::ParserHandler"* %58 to void (%"class.v8_crdtp::ParserHandler"*, i32, i64)***
  %64 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*** %63, align 8
  %65 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %64, i64 13
  %66 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %65, align 8
  tail call void %66(%"class.v8_crdtp::ParserHandler"* %58, i32 4, i64 %62) #12
  store i8 1, i8* %51, align 8
  br label %477

67:                                               ; preds = %29
  %68 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %0, i64 0, i32 2
  %69 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %68, align 8
  %70 = bitcast %"class.v8_crdtp::ParserHandler"* %69 to void (%"class.v8_crdtp::ParserHandler"*)***
  %71 = load void (%"class.v8_crdtp::ParserHandler"*)**, void (%"class.v8_crdtp::ParserHandler"*)*** %70, align 8
  %72 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*)*, void (%"class.v8_crdtp::ParserHandler"*)** %71, i64 12
  %73 = load void (%"class.v8_crdtp::ParserHandler"*)*, void (%"class.v8_crdtp::ParserHandler"*)** %72, align 8
  tail call void %73(%"class.v8_crdtp::ParserHandler"* %69) #12
  br label %433

74:                                               ; preds = %29
  %75 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %0, i64 0, i32 2
  %76 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %75, align 8
  %77 = bitcast %"class.v8_crdtp::ParserHandler"* %76 to void (%"class.v8_crdtp::ParserHandler"*, i1)***
  %78 = load void (%"class.v8_crdtp::ParserHandler"*, i1)**, void (%"class.v8_crdtp::ParserHandler"*, i1)*** %77, align 8
  %79 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i1)*, void (%"class.v8_crdtp::ParserHandler"*, i1)** %78, i64 11
  %80 = load void (%"class.v8_crdtp::ParserHandler"*, i1)*, void (%"class.v8_crdtp::ParserHandler"*, i1)** %79, align 8
  tail call void %80(%"class.v8_crdtp::ParserHandler"* %76, i1 zeroext true) #12
  br label %433

81:                                               ; preds = %29
  %82 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %0, i64 0, i32 2
  %83 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %82, align 8
  %84 = bitcast %"class.v8_crdtp::ParserHandler"* %83 to void (%"class.v8_crdtp::ParserHandler"*, i1)***
  %85 = load void (%"class.v8_crdtp::ParserHandler"*, i1)**, void (%"class.v8_crdtp::ParserHandler"*, i1)*** %84, align 8
  %86 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i1)*, void (%"class.v8_crdtp::ParserHandler"*, i1)** %85, i64 11
  %87 = load void (%"class.v8_crdtp::ParserHandler"*, i1)*, void (%"class.v8_crdtp::ParserHandler"*, i1)** %86, align 8
  tail call void %87(%"class.v8_crdtp::ParserHandler"* %83, i1 zeroext false) #12
  br label %433

88:                                               ; preds = %29
  %89 = bitcast double* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %89) #12
  %90 = load i16*, i16** %7, align 8
  %91 = bitcast i16** %8 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = ptrtoint i16* %90 to i64
  %94 = sub i64 %92, %93
  %95 = ashr exact i64 %94, 1
  %96 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %96) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %96, i8 0, i64 24, i1 false) #12
  %97 = add nsw i64 %95, 1
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(%"class.std::__1::basic_string"* nonnull %6, i64 %97) #12
  %98 = icmp eq i64 %94, 0
  br i1 %98, label %108, label %99

99:                                               ; preds = %88, %104
  %100 = phi i64 [ %106, %104 ], [ 0, %88 ]
  %101 = getelementptr inbounds i16, i16* %90, i64 %100
  %102 = load i16, i16* %101, align 2
  %103 = icmp ult i16 %102, 128
  br i1 %103, label %104, label %117

104:                                              ; preds = %99
  %105 = trunc i16 %102 to i8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* nonnull %6, i8 signext %105) #12
  %106 = add nuw i64 %100, 1
  %107 = icmp eq i64 %106, %95
  br i1 %107, label %108, label %99

108:                                              ; preds = %104, %88
  %109 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %110 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %109, i64 0, i32 1, i32 0
  %111 = load i8, i8* %110, align 1
  %112 = icmp slt i8 %111, 0
  %113 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %114 = load i8*, i8** %113, align 8
  %115 = select i1 %112, i8* %114, i8* %96
  %116 = call zeroext i1 @_ZN8v8_crdtp4json8platform6StrToDEPKcPd(i8* %115, double* nonnull %9) #12
  br label %119

117:                                              ; preds = %99
  %118 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %119

119:                                              ; preds = %117, %108
  %120 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %118, %117 ], [ %109, %108 ]
  %121 = phi i1 [ false, %117 ], [ %116, %108 ]
  %122 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %120, i64 0, i32 1, i32 0
  %123 = load i8, i8* %122, align 1
  %124 = icmp slt i8 %123, 0
  br i1 %124, label %125, label %128

125:                                              ; preds = %119
  %126 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %127 = load i8*, i8** %126, align 8
  call void @_ZdlPv(i8* %127) #11
  br label %128

128:                                              ; preds = %119, %125
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %96) #12
  br i1 %121, label %147, label %129

129:                                              ; preds = %128
  %130 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %0, i64 0, i32 1
  %131 = load i8, i8* %130, align 8, !range !2
  %132 = icmp eq i8 %131, 0
  br i1 %132, label %133, label %146

133:                                              ; preds = %129
  %134 = bitcast i16** %7 to i64*
  %135 = load i64, i64* %134, align 8
  %136 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %0, i64 0, i32 2
  %137 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %136, align 8
  %138 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %0 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = sub i64 %135, %139
  %141 = ashr exact i64 %140, 1
  %142 = bitcast %"class.v8_crdtp::ParserHandler"* %137 to void (%"class.v8_crdtp::ParserHandler"*, i32, i64)***
  %143 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*** %142, align 8
  %144 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %143, i64 13
  %145 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %144, align 8
  call void %145(%"class.v8_crdtp::ParserHandler"* %137, i32 5, i64 %141) #12
  store i8 1, i8* %130, align 8
  br label %146

146:                                              ; preds = %129, %133
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %89) #12
  br label %477

147:                                              ; preds = %128
  %148 = load double, double* %9, align 8
  %149 = fcmp ult double %148, 0xC1E0000000000000
  %150 = fcmp ugt double %148, 0x41DFFFFFFFC00000
  %151 = or i1 %149, %150
  br i1 %151, label %163, label %152

152:                                              ; preds = %147
  %153 = fptosi double %148 to i32
  %154 = sitofp i32 %153 to double
  %155 = fcmp oeq double %148, %154
  br i1 %155, label %156, label %163

156:                                              ; preds = %152
  %157 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %0, i64 0, i32 2
  %158 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %157, align 8
  %159 = bitcast %"class.v8_crdtp::ParserHandler"* %158 to void (%"class.v8_crdtp::ParserHandler"*, i32)***
  %160 = load void (%"class.v8_crdtp::ParserHandler"*, i32)**, void (%"class.v8_crdtp::ParserHandler"*, i32)*** %159, align 8
  %161 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i32)*, void (%"class.v8_crdtp::ParserHandler"*, i32)** %160, i64 10
  %162 = load void (%"class.v8_crdtp::ParserHandler"*, i32)*, void (%"class.v8_crdtp::ParserHandler"*, i32)** %161, align 8
  call void %162(%"class.v8_crdtp::ParserHandler"* %158, i32 %153) #12
  br label %170

163:                                              ; preds = %147, %152
  %164 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %0, i64 0, i32 2
  %165 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %164, align 8
  %166 = bitcast %"class.v8_crdtp::ParserHandler"* %165 to void (%"class.v8_crdtp::ParserHandler"*, double)***
  %167 = load void (%"class.v8_crdtp::ParserHandler"*, double)**, void (%"class.v8_crdtp::ParserHandler"*, double)*** %166, align 8
  %168 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, double)*, void (%"class.v8_crdtp::ParserHandler"*, double)** %167, i64 9
  %169 = load void (%"class.v8_crdtp::ParserHandler"*, double)*, void (%"class.v8_crdtp::ParserHandler"*, double)** %168, align 8
  call void %169(%"class.v8_crdtp::ParserHandler"* %165, double %148) #12
  br label %170

170:                                              ; preds = %156, %163
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %89) #12
  br label %433

171:                                              ; preds = %29
  %172 = bitcast %"class.std::__1::vector.36"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %172) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %172, i8 0, i64 24, i1 false) #12
  %173 = load i16*, i16** %7, align 8
  %174 = getelementptr inbounds i16, i16* %173, i64 1
  %175 = load i16*, i16** %8, align 8
  %176 = getelementptr inbounds i16, i16* %175, i64 -1
  %177 = call fastcc zeroext i1 @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserItE12DecodeStringEPKtS5_PNSt3__16vectorItNS6_9allocatorItEEEE(i16* %174, i16* %176, %"class.std::__1::vector.36"* nonnull %10)
  br i1 %177, label %205, label %178

178:                                              ; preds = %171
  %179 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %0, i64 0, i32 1
  %180 = load i8, i8* %179, align 8, !range !2
  %181 = icmp eq i8 %180, 0
  br i1 %181, label %182, label %195

182:                                              ; preds = %178
  %183 = bitcast i16** %7 to i64*
  %184 = load i64, i64* %183, align 8
  %185 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %0, i64 0, i32 2
  %186 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %185, align 8
  %187 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %0 to i64*
  %188 = load i64, i64* %187, align 8
  %189 = sub i64 %184, %188
  %190 = ashr exact i64 %189, 1
  %191 = bitcast %"class.v8_crdtp::ParserHandler"* %186 to void (%"class.v8_crdtp::ParserHandler"*, i32, i64)***
  %192 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*** %191, align 8
  %193 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %192, i64 13
  %194 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %193, align 8
  call void %194(%"class.v8_crdtp::ParserHandler"* %186, i32 6, i64 %190) #12
  store i8 1, i8* %179, align 8
  br label %195

195:                                              ; preds = %178, %182
  %196 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %10, i64 0, i32 0, i32 0
  %197 = load i16*, i16** %196, align 8
  %198 = icmp eq i16* %197, null
  br i1 %198, label %204, label %199

199:                                              ; preds = %195
  %200 = ptrtoint i16* %197 to i64
  %201 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %10, i64 0, i32 0, i32 1
  %202 = bitcast i16** %201 to i64*
  store i64 %200, i64* %202, align 8
  %203 = bitcast i16* %197 to i8*
  call void @_ZdlPv(i8* %203) #11
  br label %204

204:                                              ; preds = %195, %199
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %172) #12
  br label %477

205:                                              ; preds = %171
  %206 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %0, i64 0, i32 2
  %207 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %206, align 8
  %208 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %10, i64 0, i32 0, i32 0
  %209 = load i16*, i16** %208, align 8
  %210 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %10, i64 0, i32 0, i32 1
  %211 = bitcast i16** %210 to i64*
  %212 = load i64, i64* %211, align 8
  %213 = ptrtoint i16* %209 to i64
  %214 = sub i64 %212, %213
  %215 = ashr exact i64 %214, 1
  %216 = bitcast %"class.v8_crdtp::ParserHandler"* %207 to void (%"class.v8_crdtp::ParserHandler"*, i16*, i64)***
  %217 = load void (%"class.v8_crdtp::ParserHandler"*, i16*, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i16*, i64)*** %216, align 8
  %218 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i16*, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i16*, i64)** %217, i64 7
  %219 = load void (%"class.v8_crdtp::ParserHandler"*, i16*, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i16*, i64)** %218, align 8
  call void %219(%"class.v8_crdtp::ParserHandler"* %207, i16* %209, i64 %215) #12
  %220 = load i16*, i16** %208, align 8
  %221 = icmp eq i16* %220, null
  br i1 %221, label %225, label %222

222:                                              ; preds = %205
  %223 = ptrtoint i16* %220 to i64
  store i64 %223, i64* %211, align 8
  %224 = bitcast i16* %220 to i8*
  call void @_ZdlPv(i8* %224) #11
  br label %225

225:                                              ; preds = %205, %222
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %172) #12
  br label %433

226:                                              ; preds = %29
  %227 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %0, i64 0, i32 2
  %228 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %227, align 8
  %229 = bitcast %"class.v8_crdtp::ParserHandler"* %228 to void (%"class.v8_crdtp::ParserHandler"*)***
  %230 = load void (%"class.v8_crdtp::ParserHandler"*)**, void (%"class.v8_crdtp::ParserHandler"*)*** %229, align 8
  %231 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*)*, void (%"class.v8_crdtp::ParserHandler"*)** %230, i64 4
  %232 = load void (%"class.v8_crdtp::ParserHandler"*)*, void (%"class.v8_crdtp::ParserHandler"*)** %231, align 8
  tail call void %232(%"class.v8_crdtp::ParserHandler"* %228) #12
  %233 = load i16*, i16** %8, align 8
  %234 = call fastcc i32 @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserItE10ParseTokenEPKtS5_PS5_S6_(i16* %233, i16* %2, i16** nonnull %7, i16** nonnull %8)
  %235 = icmp eq i32 %234, 3
  br i1 %235, label %280, label %236

236:                                              ; preds = %226
  %237 = add nsw i32 %4, 1
  %238 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %0, i64 0, i32 1
  br label %239

239:                                              ; preds = %246, %236
  %240 = phi i16* [ %233, %236 ], [ %247, %246 ]
  call fastcc void @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserItE10ParseValueEPKtS5_PS5_i(%"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %0, i16* %240, i16* %2, i16** nonnull %8, i32 %237)
  %241 = load i8, i8* %238, align 8, !range !2
  %242 = icmp eq i8 %241, 0
  br i1 %242, label %243, label %477

243:                                              ; preds = %239
  %244 = load i16*, i16** %8, align 8
  %245 = call fastcc i32 @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserItE10ParseTokenEPKtS5_PS5_S6_(i16* %244, i16* %2, i16** nonnull %7, i16** nonnull %8)
  switch i32 %245, label %265 [
    i32 9, label %246
    i32 3, label %280
  ]

246:                                              ; preds = %243
  %247 = load i16*, i16** %8, align 8
  %248 = call fastcc i32 @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserItE10ParseTokenEPKtS5_PS5_S6_(i16* %247, i16* %2, i16** nonnull %7, i16** nonnull %8)
  %249 = icmp eq i32 %248, 3
  br i1 %249, label %250, label %239

250:                                              ; preds = %246
  %251 = load i8, i8* %238, align 8, !range !2
  %252 = icmp eq i8 %251, 0
  br i1 %252, label %253, label %477

253:                                              ; preds = %250
  %254 = bitcast i16** %7 to i64*
  %255 = load i64, i64* %254, align 8
  %256 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %227, align 8
  %257 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %0 to i64*
  %258 = load i64, i64* %257, align 8
  %259 = sub i64 %255, %258
  %260 = ashr exact i64 %259, 1
  %261 = bitcast %"class.v8_crdtp::ParserHandler"* %256 to void (%"class.v8_crdtp::ParserHandler"*, i32, i64)***
  %262 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*** %261, align 8
  %263 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %262, i64 13
  %264 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %263, align 8
  tail call void %264(%"class.v8_crdtp::ParserHandler"* %256, i32 7, i64 %260) #12
  store i8 1, i8* %238, align 8
  br label %477

265:                                              ; preds = %243
  %266 = load i8, i8* %238, align 8, !range !2
  %267 = icmp eq i8 %266, 0
  br i1 %267, label %268, label %477

268:                                              ; preds = %265
  %269 = bitcast i16** %7 to i64*
  %270 = load i64, i64* %269, align 8
  %271 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %227, align 8
  %272 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %0 to i64*
  %273 = load i64, i64* %272, align 8
  %274 = sub i64 %270, %273
  %275 = ashr exact i64 %274, 1
  %276 = bitcast %"class.v8_crdtp::ParserHandler"* %271 to void (%"class.v8_crdtp::ParserHandler"*, i32, i64)***
  %277 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*** %276, align 8
  %278 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %277, i64 13
  %279 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %278, align 8
  tail call void %279(%"class.v8_crdtp::ParserHandler"* %271, i32 8, i64 %275) #12
  store i8 1, i8* %238, align 8
  br label %477

280:                                              ; preds = %243, %226
  %281 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %227, align 8
  %282 = bitcast %"class.v8_crdtp::ParserHandler"* %281 to void (%"class.v8_crdtp::ParserHandler"*)***
  %283 = load void (%"class.v8_crdtp::ParserHandler"*)**, void (%"class.v8_crdtp::ParserHandler"*)*** %282, align 8
  %284 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*)*, void (%"class.v8_crdtp::ParserHandler"*)** %283, i64 5
  %285 = load void (%"class.v8_crdtp::ParserHandler"*)*, void (%"class.v8_crdtp::ParserHandler"*)** %284, align 8
  tail call void %285(%"class.v8_crdtp::ParserHandler"* %281) #12
  br label %433

286:                                              ; preds = %29
  %287 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %0, i64 0, i32 2
  %288 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %287, align 8
  %289 = bitcast %"class.v8_crdtp::ParserHandler"* %288 to void (%"class.v8_crdtp::ParserHandler"*)***
  %290 = load void (%"class.v8_crdtp::ParserHandler"*)**, void (%"class.v8_crdtp::ParserHandler"*)*** %289, align 8
  %291 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*)*, void (%"class.v8_crdtp::ParserHandler"*)** %290, i64 2
  %292 = load void (%"class.v8_crdtp::ParserHandler"*)*, void (%"class.v8_crdtp::ParserHandler"*)** %291, align 8
  tail call void %292(%"class.v8_crdtp::ParserHandler"* %288) #12
  %293 = load i16*, i16** %8, align 8
  %294 = call fastcc i32 @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserItE10ParseTokenEPKtS5_PS5_S6_(i16* %293, i16* %2, i16** nonnull %7, i16** nonnull %8)
  %295 = bitcast %"class.std::__1::vector.36"* %11 to i8*
  %296 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %0, i64 0, i32 1
  %297 = bitcast i16** %7 to i64*
  %298 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %0 to i64*
  %299 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %11, i64 0, i32 0, i32 0
  %300 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %11, i64 0, i32 0, i32 1
  %301 = bitcast i16** %300 to i64*
  %302 = add nsw i32 %4, 1
  br label %303

303:                                              ; preds = %409, %286
  %304 = phi i32 [ %294, %286 ], [ %402, %409 ]
  switch i32 %304, label %305 [
    i32 1, label %410
    i32 4, label %318
  ]

305:                                              ; preds = %303
  %306 = load i8, i8* %296, align 8, !range !2
  %307 = icmp eq i8 %306, 0
  br i1 %307, label %308, label %477

308:                                              ; preds = %305
  %309 = load i64, i64* %297, align 8
  %310 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %287, align 8
  %311 = load i64, i64* %298, align 8
  %312 = sub i64 %309, %311
  %313 = ashr exact i64 %312, 1
  %314 = bitcast %"class.v8_crdtp::ParserHandler"* %310 to void (%"class.v8_crdtp::ParserHandler"*, i32, i64)***
  %315 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*** %314, align 8
  %316 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %315, i64 13
  %317 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %316, align 8
  call void %317(%"class.v8_crdtp::ParserHandler"* %310, i32 9, i64 %313) #12
  store i8 1, i8* %296, align 8
  br label %477

318:                                              ; preds = %303
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %295) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %295, i8 0, i64 24, i1 false) #12
  %319 = load i16*, i16** %7, align 8
  %320 = getelementptr inbounds i16, i16* %319, i64 1
  %321 = load i16*, i16** %8, align 8
  %322 = getelementptr inbounds i16, i16* %321, i64 -1
  %323 = call fastcc zeroext i1 @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserItE12DecodeStringEPKtS5_PNSt3__16vectorItNS6_9allocatorItEEEE(i16* %320, i16* %322, %"class.std::__1::vector.36"* nonnull %11)
  br i1 %323, label %337, label %324

324:                                              ; preds = %318
  %325 = load i8, i8* %296, align 8, !range !2
  %326 = icmp eq i8 %325, 0
  br i1 %326, label %327, label %401

327:                                              ; preds = %324
  %328 = load i64, i64* %297, align 8
  %329 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %287, align 8
  %330 = load i64, i64* %298, align 8
  %331 = sub i64 %328, %330
  %332 = ashr exact i64 %331, 1
  %333 = bitcast %"class.v8_crdtp::ParserHandler"* %329 to void (%"class.v8_crdtp::ParserHandler"*, i32, i64)***
  %334 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*** %333, align 8
  %335 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %334, i64 13
  %336 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %335, align 8
  call void %336(%"class.v8_crdtp::ParserHandler"* %329, i32 6, i64 %332) #12
  store i8 1, i8* %296, align 8
  br label %401

337:                                              ; preds = %318
  %338 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %287, align 8
  %339 = load i16*, i16** %299, align 8
  %340 = load i64, i64* %301, align 8
  %341 = ptrtoint i16* %339 to i64
  %342 = sub i64 %340, %341
  %343 = ashr exact i64 %342, 1
  %344 = bitcast %"class.v8_crdtp::ParserHandler"* %338 to void (%"class.v8_crdtp::ParserHandler"*, i16*, i64)***
  %345 = load void (%"class.v8_crdtp::ParserHandler"*, i16*, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i16*, i64)*** %344, align 8
  %346 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i16*, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i16*, i64)** %345, i64 7
  %347 = load void (%"class.v8_crdtp::ParserHandler"*, i16*, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i16*, i64)** %346, align 8
  call void %347(%"class.v8_crdtp::ParserHandler"* %338, i16* %339, i64 %343) #12
  %348 = load i16*, i16** %8, align 8
  %349 = call fastcc i32 @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserItE10ParseTokenEPKtS5_PS5_S6_(i16* %348, i16* %2, i16** nonnull %7, i16** nonnull %8)
  %350 = icmp eq i32 %349, 10
  br i1 %350, label %364, label %351

351:                                              ; preds = %337
  %352 = load i8, i8* %296, align 8, !range !2
  %353 = icmp eq i8 %352, 0
  br i1 %353, label %354, label %401

354:                                              ; preds = %351
  %355 = load i64, i64* %297, align 8
  %356 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %287, align 8
  %357 = load i64, i64* %298, align 8
  %358 = sub i64 %355, %357
  %359 = ashr exact i64 %358, 1
  %360 = bitcast %"class.v8_crdtp::ParserHandler"* %356 to void (%"class.v8_crdtp::ParserHandler"*, i32, i64)***
  %361 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*** %360, align 8
  %362 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %361, i64 13
  %363 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %362, align 8
  call void %363(%"class.v8_crdtp::ParserHandler"* %356, i32 10, i64 %359) #12
  store i8 1, i8* %296, align 8
  br label %401

364:                                              ; preds = %337
  %365 = load i16*, i16** %8, align 8
  call fastcc void @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserItE10ParseValueEPKtS5_PS5_i(%"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %0, i16* %365, i16* %2, i16** nonnull %8, i32 %302)
  %366 = load i8, i8* %296, align 8, !range !2
  %367 = icmp eq i8 %366, 0
  br i1 %367, label %368, label %401

368:                                              ; preds = %364
  %369 = load i16*, i16** %8, align 8
  %370 = call fastcc i32 @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserItE10ParseTokenEPKtS5_PS5_S6_(i16* %369, i16* %2, i16** nonnull %7, i16** nonnull %8)
  switch i32 %370, label %388 [
    i32 9, label %371
    i32 1, label %401
  ]

371:                                              ; preds = %368
  %372 = load i16*, i16** %8, align 8
  %373 = call fastcc i32 @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserItE10ParseTokenEPKtS5_PS5_S6_(i16* %372, i16* %2, i16** nonnull %7, i16** nonnull %8)
  %374 = icmp eq i32 %373, 1
  br i1 %374, label %375, label %401

375:                                              ; preds = %371
  %376 = load i8, i8* %296, align 8, !range !2
  %377 = icmp eq i8 %376, 0
  br i1 %377, label %378, label %401

378:                                              ; preds = %375
  %379 = load i64, i64* %297, align 8
  %380 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %287, align 8
  %381 = load i64, i64* %298, align 8
  %382 = sub i64 %379, %381
  %383 = ashr exact i64 %382, 1
  %384 = bitcast %"class.v8_crdtp::ParserHandler"* %380 to void (%"class.v8_crdtp::ParserHandler"*, i32, i64)***
  %385 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*** %384, align 8
  %386 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %385, i64 13
  %387 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %386, align 8
  call void %387(%"class.v8_crdtp::ParserHandler"* %380, i32 11, i64 %383) #12
  store i8 1, i8* %296, align 8
  br label %401

388:                                              ; preds = %368
  %389 = load i8, i8* %296, align 8, !range !2
  %390 = icmp eq i8 %389, 0
  br i1 %390, label %391, label %401

391:                                              ; preds = %388
  %392 = load i64, i64* %297, align 8
  %393 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %287, align 8
  %394 = load i64, i64* %298, align 8
  %395 = sub i64 %392, %394
  %396 = ashr exact i64 %395, 1
  %397 = bitcast %"class.v8_crdtp::ParserHandler"* %393 to void (%"class.v8_crdtp::ParserHandler"*, i32, i64)***
  %398 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*** %397, align 8
  %399 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %398, i64 13
  %400 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %399, align 8
  call void %400(%"class.v8_crdtp::ParserHandler"* %393, i32 12, i64 %396) #12
  store i8 1, i8* %296, align 8
  br label %401

401:                                              ; preds = %391, %388, %378, %375, %354, %351, %327, %324, %371, %368, %364
  %402 = phi i32 [ 10, %364 ], [ %373, %371 ], [ %370, %368 ], [ 4, %324 ], [ 4, %327 ], [ %349, %351 ], [ %349, %354 ], [ 1, %375 ], [ 1, %378 ], [ %370, %388 ], [ %370, %391 ]
  %403 = phi i1 [ false, %364 ], [ true, %371 ], [ true, %368 ], [ false, %324 ], [ false, %327 ], [ false, %351 ], [ false, %354 ], [ false, %375 ], [ false, %378 ], [ false, %388 ], [ false, %391 ]
  %404 = load i16*, i16** %299, align 8
  %405 = icmp eq i16* %404, null
  br i1 %405, label %409, label %406

406:                                              ; preds = %401
  %407 = ptrtoint i16* %404 to i64
  store i64 %407, i64* %301, align 8
  %408 = bitcast i16* %404 to i8*
  call void @_ZdlPv(i8* %408) #11
  br label %409

409:                                              ; preds = %401, %406
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %295) #12
  br i1 %403, label %303, label %477

410:                                              ; preds = %303
  %411 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %287, align 8
  %412 = bitcast %"class.v8_crdtp::ParserHandler"* %411 to void (%"class.v8_crdtp::ParserHandler"*)***
  %413 = load void (%"class.v8_crdtp::ParserHandler"*)**, void (%"class.v8_crdtp::ParserHandler"*)*** %412, align 8
  %414 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*)*, void (%"class.v8_crdtp::ParserHandler"*)** %413, i64 3
  %415 = load void (%"class.v8_crdtp::ParserHandler"*)*, void (%"class.v8_crdtp::ParserHandler"*)** %414, align 8
  call void %415(%"class.v8_crdtp::ParserHandler"* %411) #12
  br label %433

416:                                              ; preds = %29
  %417 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %0, i64 0, i32 1
  %418 = load i8, i8* %417, align 8, !range !2
  %419 = icmp eq i8 %418, 0
  br i1 %419, label %420, label %477

420:                                              ; preds = %416
  %421 = bitcast i16** %7 to i64*
  %422 = load i64, i64* %421, align 8
  %423 = getelementptr inbounds %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21", %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %0, i64 0, i32 2
  %424 = load %"class.v8_crdtp::ParserHandler"*, %"class.v8_crdtp::ParserHandler"** %423, align 8
  %425 = bitcast %"class.v8_crdtp::json::(anonymous namespace)::JsonParser.21"* %0 to i64*
  %426 = load i64, i64* %425, align 8
  %427 = sub i64 %422, %426
  %428 = ashr exact i64 %427, 1
  %429 = bitcast %"class.v8_crdtp::ParserHandler"* %424 to void (%"class.v8_crdtp::ParserHandler"*, i32, i64)***
  %430 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)**, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*** %429, align 8
  %431 = getelementptr inbounds void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %430, i64 13
  %432 = load void (%"class.v8_crdtp::ParserHandler"*, i32, i64)*, void (%"class.v8_crdtp::ParserHandler"*, i32, i64)** %431, align 8
  tail call void %432(%"class.v8_crdtp::ParserHandler"* %424, i32 13, i64 %428) #12
  store i8 1, i8* %417, align 8
  br label %477

433:                                              ; preds = %225, %170, %410, %280, %81, %74, %67
  %434 = load i16*, i16** %8, align 8
  %435 = icmp ult i16* %434, %2
  br i1 %435, label %436, label %475

436:                                              ; preds = %433, %472
  %437 = phi i16* [ %473, %472 ], [ %434, %433 ]
  %438 = load i16, i16* %437, align 2
  switch i16 %438, label %475 [
    i16 32, label %439
    i16 10, label %439
    i16 11, label %439
    i16 12, label %439
    i16 13, label %439
    i16 9, label %439
    i16 47, label %441
  ]

439:                                              ; preds = %436, %436, %436, %436, %436, %436
  %440 = getelementptr inbounds i16, i16* %437, i64 1
  br label %472

441:                                              ; preds = %436
  %442 = icmp eq i16* %437, %2
  br i1 %442, label %475, label %443

443:                                              ; preds = %441
  %444 = getelementptr inbounds i16, i16* %437, i64 1
  %445 = icmp ult i16* %444, %2
  br i1 %445, label %446, label %475

446:                                              ; preds = %443
  %447 = load i16, i16* %444, align 2
  switch i16 %447, label %475 [
    i16 47, label %448
    i16 42, label %459
  ]

448:                                              ; preds = %446
  %449 = getelementptr inbounds i16, i16* %437, i64 2
  %450 = icmp ult i16* %449, %2
  br i1 %450, label %451, label %475

451:                                              ; preds = %448, %456
  %452 = phi i16* [ %457, %456 ], [ %449, %448 ]
  %453 = load i16, i16* %452, align 2
  switch i16 %453, label %456 [
    i16 10, label %454
    i16 13, label %454
  ]

454:                                              ; preds = %451, %451
  %455 = getelementptr inbounds i16, i16* %452, i64 1
  br label %472

456:                                              ; preds = %451
  %457 = getelementptr inbounds i16, i16* %452, i64 1
  %458 = icmp ult i16* %457, %2
  br i1 %458, label %451, label %475

459:                                              ; preds = %446
  %460 = getelementptr inbounds i16, i16* %437, i64 2
  %461 = icmp ult i16* %460, %2
  br i1 %461, label %462, label %475

462:                                              ; preds = %459, %470
  %463 = phi i16 [ %466, %470 ], [ 0, %459 ]
  %464 = phi i16* [ %469, %470 ], [ %460, %459 ]
  %465 = icmp eq i16 %463, 42
  %466 = load i16, i16* %464, align 2
  %467 = icmp eq i16 %466, 47
  %468 = and i1 %465, %467
  %469 = getelementptr inbounds i16, i16* %464, i64 1
  br i1 %468, label %472, label %470

470:                                              ; preds = %462
  %471 = icmp ult i16* %469, %2
  br i1 %471, label %462, label %475

472:                                              ; preds = %462, %454, %439
  %473 = phi i16* [ %440, %439 ], [ %455, %454 ], [ %469, %462 ]
  %474 = icmp ult i16* %473, %2
  br i1 %474, label %436, label %475

475:                                              ; preds = %436, %441, %443, %446, %448, %459, %472, %470, %456, %433
  %476 = phi i16* [ %434, %433 ], [ %2, %456 ], [ %437, %470 ], [ %437, %436 ], [ %437, %459 ], [ %437, %446 ], [ %437, %443 ], [ %2, %441 ], [ %473, %472 ], [ %2, %448 ]
  store i16* %476, i16** %3, align 8
  br label %477

477:                                              ; preds = %409, %239, %420, %416, %308, %305, %268, %265, %253, %250, %54, %50, %37, %33, %204, %146, %475
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #12
  br label %478

478:                                              ; preds = %17, %13, %477
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc i32 @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserItE10ParseTokenEPKtS5_PS5_S6_(i16*, i16*, i16** nocapture, i16** nocapture) unnamed_addr #4 align 2 {
  %5 = icmp ult i16* %0, %1
  br i1 %5, label %6, label %46

6:                                                ; preds = %4, %42
  %7 = phi i16* [ %43, %42 ], [ %0, %4 ]
  %8 = load i16, i16* %7, align 2
  switch i16 %8, label %46 [
    i16 32, label %9
    i16 10, label %9
    i16 11, label %9
    i16 12, label %9
    i16 13, label %9
    i16 9, label %9
    i16 47, label %11
  ]

9:                                                ; preds = %6, %6, %6, %6, %6, %6
  %10 = getelementptr inbounds i16, i16* %7, i64 1
  br label %42

11:                                               ; preds = %6
  %12 = icmp eq i16* %7, %1
  br i1 %12, label %45, label %13

13:                                               ; preds = %11
  %14 = getelementptr inbounds i16, i16* %7, i64 1
  %15 = icmp ult i16* %14, %1
  br i1 %15, label %16, label %46

16:                                               ; preds = %13
  %17 = load i16, i16* %14, align 2
  switch i16 %17, label %46 [
    i16 47, label %18
    i16 42, label %29
  ]

18:                                               ; preds = %16
  %19 = getelementptr inbounds i16, i16* %7, i64 2
  %20 = icmp ult i16* %19, %1
  br i1 %20, label %21, label %45

21:                                               ; preds = %18, %26
  %22 = phi i16* [ %27, %26 ], [ %19, %18 ]
  %23 = load i16, i16* %22, align 2
  switch i16 %23, label %26 [
    i16 10, label %24
    i16 13, label %24
  ]

24:                                               ; preds = %21, %21
  %25 = getelementptr inbounds i16, i16* %22, i64 1
  br label %42

26:                                               ; preds = %21
  %27 = getelementptr inbounds i16, i16* %22, i64 1
  %28 = icmp ult i16* %27, %1
  br i1 %28, label %21, label %45

29:                                               ; preds = %16
  %30 = getelementptr inbounds i16, i16* %7, i64 2
  %31 = icmp ult i16* %30, %1
  br i1 %31, label %32, label %46

32:                                               ; preds = %29, %40
  %33 = phi i16 [ %36, %40 ], [ 0, %29 ]
  %34 = phi i16* [ %39, %40 ], [ %30, %29 ]
  %35 = icmp eq i16 %33, 42
  %36 = load i16, i16* %34, align 2
  %37 = icmp eq i16 %36, 47
  %38 = and i1 %35, %37
  %39 = getelementptr inbounds i16, i16* %34, i64 1
  br i1 %38, label %42, label %40

40:                                               ; preds = %32
  %41 = icmp ult i16* %39, %1
  br i1 %41, label %32, label %46

42:                                               ; preds = %32, %24, %9
  %43 = phi i16* [ %10, %9 ], [ %25, %24 ], [ %39, %32 ]
  %44 = icmp ult i16* %43, %1
  br i1 %44, label %6, label %46

45:                                               ; preds = %18, %11, %26
  store i16* %1, i16** %2, align 8
  br label %251

46:                                               ; preds = %6, %13, %16, %29, %42, %40, %4
  %47 = phi i16* [ %0, %4 ], [ %7, %40 ], [ %7, %6 ], [ %7, %29 ], [ %7, %16 ], [ %7, %13 ], [ %43, %42 ]
  store i16* %47, i16** %2, align 8
  %48 = icmp eq i16* %47, %1
  br i1 %48, label %251, label %49

49:                                               ; preds = %46
  %50 = load i16, i16* %47, align 2
  switch i16 %50, label %251 [
    i16 110, label %51
    i16 116, label %66
    i16 102, label %81
    i16 91, label %96
    i16 93, label %98
    i16 44, label %100
    i16 123, label %102
    i16 125, label %104
    i16 58, label %106
    i16 48, label %108
    i16 49, label %108
    i16 50, label %108
    i16 51, label %108
    i16 52, label %108
    i16 53, label %108
    i16 54, label %108
    i16 55, label %108
    i16 56, label %108
    i16 57, label %108
    i16 45, label %108
    i16 34, label %189
  ]

51:                                               ; preds = %49
  %52 = icmp ult i16* %47, %1
  br i1 %52, label %53, label %59

53:                                               ; preds = %51
  %54 = getelementptr inbounds i16, i16* %47, i64 1
  %55 = load i16, i16* %47, align 2
  %56 = icmp eq i16 %55, 110
  %57 = icmp ult i16* %54, %1
  %58 = and i1 %56, %57
  br i1 %58, label %253, label %59

59:                                               ; preds = %265, %259, %253, %53, %51
  %60 = phi i16* [ %47, %51 ], [ %54, %53 ], [ %254, %253 ], [ %260, %259 ], [ %266, %265 ]
  %61 = phi i8* [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 0), %51 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 1), %53 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 2), %253 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 3), %259 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 4), %265 ]
  %62 = load i8, i8* %61, align 1
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %64, label %251

64:                                               ; preds = %265, %59
  %65 = phi i16* [ %60, %59 ], [ %266, %265 ]
  store i16* %65, i16** %3, align 8
  br label %251

66:                                               ; preds = %49
  %67 = icmp ult i16* %47, %1
  br i1 %67, label %68, label %74

68:                                               ; preds = %66
  %69 = getelementptr inbounds i16, i16* %47, i64 1
  %70 = load i16, i16* %47, align 2
  %71 = icmp eq i16 %70, 116
  %72 = icmp ult i16* %69, %1
  %73 = and i1 %71, %72
  br i1 %73, label %271, label %74

74:                                               ; preds = %283, %277, %271, %68, %66
  %75 = phi i16* [ %47, %66 ], [ %69, %68 ], [ %272, %271 ], [ %278, %277 ], [ %284, %283 ]
  %76 = phi i8* [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i64 0, i64 0), %66 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i64 0, i64 1), %68 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i64 0, i64 2), %271 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i64 0, i64 3), %277 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i64 0, i64 4), %283 ]
  %77 = load i8, i8* %76, align 1
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %79, label %251

79:                                               ; preds = %283, %74
  %80 = phi i16* [ %75, %74 ], [ %284, %283 ]
  store i16* %80, i16** %3, align 8
  br label %251

81:                                               ; preds = %49
  %82 = icmp ult i16* %47, %1
  br i1 %82, label %83, label %89

83:                                               ; preds = %81
  %84 = getelementptr inbounds i16, i16* %47, i64 1
  %85 = load i16, i16* %47, align 2
  %86 = icmp eq i16 %85, 102
  %87 = icmp ult i16* %84, %1
  %88 = and i1 %86, %87
  br i1 %88, label %289, label %89

89:                                               ; preds = %307, %301, %295, %289, %83, %81
  %90 = phi i16* [ %47, %81 ], [ %84, %83 ], [ %290, %289 ], [ %296, %295 ], [ %302, %301 ], [ %308, %307 ]
  %91 = phi i8* [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i64 0, i64 0), %81 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i64 0, i64 1), %83 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i64 0, i64 2), %289 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i64 0, i64 3), %295 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i64 0, i64 4), %301 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i64 0, i64 5), %307 ]
  %92 = load i8, i8* %91, align 1
  %93 = icmp eq i8 %92, 0
  br i1 %93, label %94, label %251

94:                                               ; preds = %307, %89
  %95 = phi i16* [ %90, %89 ], [ %308, %307 ]
  store i16* %95, i16** %3, align 8
  br label %251

96:                                               ; preds = %49
  %97 = getelementptr inbounds i16, i16* %47, i64 1
  store i16* %97, i16** %3, align 8
  br label %251

98:                                               ; preds = %49
  %99 = getelementptr inbounds i16, i16* %47, i64 1
  store i16* %99, i16** %3, align 8
  br label %251

100:                                              ; preds = %49
  %101 = getelementptr inbounds i16, i16* %47, i64 1
  store i16* %101, i16** %3, align 8
  br label %251

102:                                              ; preds = %49
  %103 = getelementptr inbounds i16, i16* %47, i64 1
  store i16* %103, i16** %3, align 8
  br label %251

104:                                              ; preds = %49
  %105 = getelementptr inbounds i16, i16* %47, i64 1
  store i16* %105, i16** %3, align 8
  br label %251

106:                                              ; preds = %49
  %107 = getelementptr inbounds i16, i16* %47, i64 1
  store i16* %107, i16** %3, align 8
  br label %251

108:                                              ; preds = %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49
  %109 = icmp eq i16 %50, 45
  %110 = getelementptr inbounds i16, i16* %47, i64 1
  %111 = select i1 %109, i16* %110, i16* %47
  %112 = icmp eq i16* %111, %1
  br i1 %112, label %251, label %113

113:                                              ; preds = %108
  %114 = load i16, i16* %111, align 2
  %115 = icmp ne i16 %114, 48
  %116 = icmp ult i16* %111, %1
  %117 = add i16 %114, -48
  %118 = icmp ult i16 %117, 10
  %119 = and i1 %116, %118
  br i1 %119, label %120, label %251

120:                                              ; preds = %113, %125
  %121 = phi i16* [ %123, %125 ], [ %111, %113 ]
  %122 = phi i32 [ %126, %125 ], [ 0, %113 ]
  %123 = getelementptr inbounds i16, i16* %121, i64 1
  %124 = icmp ult i16* %123, %1
  br i1 %124, label %125, label %130

125:                                              ; preds = %120
  %126 = add nuw nsw i32 %122, 1
  %127 = load i16, i16* %123, align 2
  %128 = add i16 %127, -48
  %129 = icmp ult i16 %128, 10
  br i1 %129, label %120, label %130

130:                                              ; preds = %125, %120
  %131 = icmp eq i32 %122, 0
  %132 = or i1 %115, %131
  br i1 %132, label %133, label %251

133:                                              ; preds = %130
  %134 = icmp eq i16* %123, %1
  br i1 %134, label %135, label %136

135:                                              ; preds = %133
  store i16* %1, i16** %3, align 8
  br label %251

136:                                              ; preds = %133
  %137 = load i16, i16* %123, align 2
  %138 = icmp eq i16 %137, 46
  br i1 %138, label %139, label %159

139:                                              ; preds = %136
  %140 = getelementptr inbounds i16, i16* %121, i64 2
  %141 = icmp ult i16* %140, %1
  br i1 %141, label %142, label %251

142:                                              ; preds = %139
  %143 = load i16, i16* %140, align 2
  %144 = add i16 %143, -48
  %145 = icmp ult i16 %144, 10
  br i1 %145, label %146, label %251

146:                                              ; preds = %142, %150
  %147 = phi i16* [ %148, %150 ], [ %140, %142 ]
  %148 = getelementptr inbounds i16, i16* %147, i64 1
  %149 = icmp ult i16* %148, %1
  br i1 %149, label %150, label %154

150:                                              ; preds = %146
  %151 = load i16, i16* %148, align 2
  %152 = add i16 %151, -48
  %153 = icmp ult i16 %152, 10
  br i1 %153, label %146, label %154

154:                                              ; preds = %150, %146
  %155 = icmp eq i16* %148, %1
  br i1 %155, label %156, label %157

156:                                              ; preds = %154
  store i16* %1, i16** %3, align 8
  br label %251

157:                                              ; preds = %154
  %158 = load i16, i16* %148, align 2
  br label %159

159:                                              ; preds = %157, %136
  %160 = phi i16* [ %148, %157 ], [ %123, %136 ]
  %161 = phi i16 [ %158, %157 ], [ %137, %136 ]
  switch i16 %161, label %185 [
    i16 101, label %162
    i16 69, label %162
  ]

162:                                              ; preds = %159, %159
  %163 = getelementptr inbounds i16, i16* %160, i64 1
  %164 = icmp eq i16* %163, %1
  br i1 %164, label %251, label %165

165:                                              ; preds = %162
  %166 = load i16, i16* %163, align 2
  switch i16 %166, label %170 [
    i16 45, label %167
    i16 43, label %167
  ]

167:                                              ; preds = %165, %165
  %168 = getelementptr inbounds i16, i16* %160, i64 2
  %169 = icmp eq i16* %168, %1
  br i1 %169, label %251, label %170

170:                                              ; preds = %167, %165
  %171 = phi i16* [ %163, %165 ], [ %168, %167 ]
  %172 = icmp ult i16* %171, %1
  br i1 %172, label %173, label %251

173:                                              ; preds = %170
  %174 = load i16, i16* %171, align 2
  %175 = add i16 %174, -48
  %176 = icmp ult i16 %175, 10
  br i1 %176, label %177, label %251

177:                                              ; preds = %173, %181
  %178 = phi i16* [ %179, %181 ], [ %171, %173 ]
  %179 = getelementptr inbounds i16, i16* %178, i64 1
  %180 = icmp ult i16* %179, %1
  br i1 %180, label %181, label %185

181:                                              ; preds = %177
  %182 = load i16, i16* %179, align 2
  %183 = add i16 %182, -48
  %184 = icmp ult i16 %183, 10
  br i1 %184, label %177, label %185

185:                                              ; preds = %181, %177, %159
  %186 = phi i16* [ %160, %159 ], [ %179, %177 ], [ %179, %181 ]
  %187 = ptrtoint i16* %186 to i64
  %188 = bitcast i16** %3 to i64*
  store i64 %187, i64* %188, align 8
  br label %251

189:                                              ; preds = %49
  %190 = getelementptr inbounds i16, i16* %47, i64 1
  %191 = icmp ult i16* %190, %1
  br i1 %191, label %192, label %251

192:                                              ; preds = %189
  %193 = ptrtoint i16* %1 to i64
  br label %194

194:                                              ; preds = %233, %192
  %195 = phi i16* [ %190, %192 ], [ %234, %233 ]
  %196 = getelementptr inbounds i16, i16* %195, i64 1
  %197 = load i16, i16* %195, align 2
  switch i16 %197, label %233 [
    i16 92, label %198
    i16 34, label %250
  ]

198:                                              ; preds = %194
  %199 = icmp eq i16* %196, %1
  br i1 %199, label %251, label %200

200:                                              ; preds = %198
  %201 = getelementptr inbounds i16, i16* %195, i64 2
  %202 = load i16, i16* %196, align 2
  switch i16 %202, label %251 [
    i16 120, label %203
    i16 117, label %218
    i16 92, label %233
    i16 47, label %233
    i16 98, label %233
    i16 102, label %233
    i16 110, label %233
    i16 114, label %233
    i16 116, label %233
    i16 118, label %233
    i16 34, label %233
  ]

203:                                              ; preds = %200
  %204 = ptrtoint i16* %201 to i64
  %205 = sub i64 %193, %204
  %206 = icmp slt i64 %205, 4
  br i1 %206, label %251, label %207

207:                                              ; preds = %203
  %208 = getelementptr inbounds i16, i16* %195, i64 3
  %209 = load i16, i16* %201, align 2
  %210 = add i16 %209, -48
  %211 = icmp ult i16 %210, 10
  br i1 %211, label %213, label %212

212:                                              ; preds = %207
  switch i16 %209, label %251 [
    i16 102, label %213
    i16 101, label %213
    i16 100, label %213
    i16 99, label %213
    i16 98, label %213
    i16 97, label %213
    i16 70, label %213
    i16 69, label %213
    i16 68, label %213
    i16 67, label %213
    i16 66, label %213
    i16 65, label %213
  ]

213:                                              ; preds = %212, %212, %212, %212, %212, %212, %212, %212, %212, %212, %212, %212, %207
  %214 = getelementptr inbounds i16, i16* %195, i64 4
  %215 = load i16, i16* %208, align 2
  %216 = add i16 %215, -48
  %217 = icmp ult i16 %216, 10
  br i1 %217, label %233, label %249

218:                                              ; preds = %200
  %219 = ptrtoint i16* %201 to i64
  %220 = sub i64 %193, %219
  %221 = icmp slt i64 %220, 8
  br i1 %221, label %251, label %222

222:                                              ; preds = %218
  %223 = getelementptr inbounds i16, i16* %195, i64 3
  %224 = load i16, i16* %201, align 2
  %225 = add i16 %224, -48
  %226 = icmp ult i16 %225, 10
  br i1 %226, label %228, label %227

227:                                              ; preds = %222
  switch i16 %224, label %251 [
    i16 102, label %228
    i16 101, label %228
    i16 100, label %228
    i16 99, label %228
    i16 98, label %228
    i16 97, label %228
    i16 70, label %228
    i16 69, label %228
    i16 68, label %228
    i16 67, label %228
    i16 66, label %228
    i16 65, label %228
  ]

228:                                              ; preds = %227, %227, %227, %227, %227, %227, %227, %227, %227, %227, %227, %227, %222
  %229 = getelementptr inbounds i16, i16* %195, i64 4
  %230 = load i16, i16* %223, align 2
  %231 = add i16 %230, -48
  %232 = icmp ult i16 %231, 10
  br i1 %232, label %237, label %236

233:                                              ; preds = %249, %249, %249, %249, %249, %249, %249, %249, %249, %249, %249, %249, %248, %248, %248, %248, %248, %248, %248, %248, %248, %248, %248, %248, %243, %213, %200, %200, %200, %200, %200, %200, %200, %200, %200, %194
  %234 = phi i16* [ %196, %194 ], [ %201, %200 ], [ %201, %200 ], [ %201, %200 ], [ %201, %200 ], [ %201, %200 ], [ %201, %200 ], [ %201, %200 ], [ %201, %200 ], [ %201, %200 ], [ %244, %248 ], [ %244, %248 ], [ %244, %248 ], [ %244, %248 ], [ %244, %248 ], [ %244, %248 ], [ %244, %248 ], [ %244, %248 ], [ %244, %248 ], [ %244, %248 ], [ %244, %248 ], [ %244, %248 ], [ %244, %243 ], [ %214, %249 ], [ %214, %249 ], [ %214, %249 ], [ %214, %249 ], [ %214, %249 ], [ %214, %249 ], [ %214, %249 ], [ %214, %249 ], [ %214, %249 ], [ %214, %249 ], [ %214, %249 ], [ %214, %249 ], [ %214, %213 ]
  %235 = icmp ult i16* %234, %1
  br i1 %235, label %194, label %251

236:                                              ; preds = %228
  switch i16 %230, label %251 [
    i16 102, label %237
    i16 101, label %237
    i16 100, label %237
    i16 99, label %237
    i16 98, label %237
    i16 97, label %237
    i16 70, label %237
    i16 69, label %237
    i16 68, label %237
    i16 67, label %237
    i16 66, label %237
    i16 65, label %237
  ]

237:                                              ; preds = %236, %236, %236, %236, %236, %236, %236, %236, %236, %236, %236, %236, %228
  %238 = getelementptr inbounds i16, i16* %195, i64 5
  %239 = load i16, i16* %229, align 2
  %240 = add i16 %239, -48
  %241 = icmp ult i16 %240, 10
  br i1 %241, label %243, label %242

242:                                              ; preds = %237
  switch i16 %239, label %251 [
    i16 102, label %243
    i16 101, label %243
    i16 100, label %243
    i16 99, label %243
    i16 98, label %243
    i16 97, label %243
    i16 70, label %243
    i16 69, label %243
    i16 68, label %243
    i16 67, label %243
    i16 66, label %243
    i16 65, label %243
  ]

243:                                              ; preds = %242, %242, %242, %242, %242, %242, %242, %242, %242, %242, %242, %242, %237
  %244 = getelementptr inbounds i16, i16* %195, i64 6
  %245 = load i16, i16* %238, align 2
  %246 = add i16 %245, -48
  %247 = icmp ult i16 %246, 10
  br i1 %247, label %233, label %248

248:                                              ; preds = %243
  switch i16 %245, label %251 [
    i16 102, label %233
    i16 101, label %233
    i16 100, label %233
    i16 99, label %233
    i16 98, label %233
    i16 97, label %233
    i16 70, label %233
    i16 69, label %233
    i16 68, label %233
    i16 67, label %233
    i16 66, label %233
    i16 65, label %233
  ]

249:                                              ; preds = %213
  switch i16 %215, label %251 [
    i16 102, label %233
    i16 101, label %233
    i16 100, label %233
    i16 99, label %233
    i16 98, label %233
    i16 97, label %233
    i16 70, label %233
    i16 69, label %233
    i16 68, label %233
    i16 67, label %233
    i16 66, label %233
    i16 65, label %233
  ]

250:                                              ; preds = %194
  store i16* %196, i16** %3, align 8
  br label %251

251:                                              ; preds = %233, %198, %200, %203, %218, %227, %236, %242, %248, %212, %249, %189, %173, %142, %170, %139, %113, %130, %108, %167, %162, %49, %59, %74, %89, %250, %185, %156, %135, %94, %79, %64, %45, %46, %106, %104, %102, %100, %98, %96
  %252 = phi i32 [ 10, %106 ], [ 1, %104 ], [ 0, %102 ], [ 9, %100 ], [ 3, %98 ], [ 2, %96 ], [ 12, %46 ], [ 4, %250 ], [ 12, %45 ], [ 8, %64 ], [ 6, %79 ], [ 7, %94 ], [ 5, %135 ], [ 5, %156 ], [ 5, %185 ], [ 11, %89 ], [ 11, %74 ], [ 11, %59 ], [ 11, %49 ], [ 11, %162 ], [ 11, %167 ], [ 11, %108 ], [ 11, %130 ], [ 11, %113 ], [ 11, %139 ], [ 11, %170 ], [ 11, %142 ], [ 11, %173 ], [ 11, %189 ], [ 11, %249 ], [ 11, %212 ], [ 11, %248 ], [ 11, %242 ], [ 11, %236 ], [ 11, %227 ], [ 11, %218 ], [ 11, %203 ], [ 11, %200 ], [ 11, %198 ], [ 11, %233 ]
  ret i32 %252

253:                                              ; preds = %53
  %254 = getelementptr inbounds i16, i16* %47, i64 2
  %255 = load i16, i16* %54, align 2
  %256 = icmp eq i16 %255, 117
  %257 = icmp ult i16* %254, %1
  %258 = and i1 %256, %257
  br i1 %258, label %259, label %59

259:                                              ; preds = %253
  %260 = getelementptr inbounds i16, i16* %47, i64 3
  %261 = load i16, i16* %254, align 2
  %262 = icmp eq i16 %261, 108
  %263 = icmp ult i16* %260, %1
  %264 = and i1 %262, %263
  br i1 %264, label %265, label %59

265:                                              ; preds = %259
  %266 = getelementptr inbounds i16, i16* %47, i64 4
  %267 = load i16, i16* %260, align 2
  %268 = icmp eq i16 %267, 108
  %269 = icmp ult i16* %266, %1
  %270 = and i1 %268, %269
  br i1 %270, label %64, label %59

271:                                              ; preds = %68
  %272 = getelementptr inbounds i16, i16* %47, i64 2
  %273 = load i16, i16* %69, align 2
  %274 = icmp eq i16 %273, 114
  %275 = icmp ult i16* %272, %1
  %276 = and i1 %274, %275
  br i1 %276, label %277, label %74

277:                                              ; preds = %271
  %278 = getelementptr inbounds i16, i16* %47, i64 3
  %279 = load i16, i16* %272, align 2
  %280 = icmp eq i16 %279, 117
  %281 = icmp ult i16* %278, %1
  %282 = and i1 %280, %281
  br i1 %282, label %283, label %74

283:                                              ; preds = %277
  %284 = getelementptr inbounds i16, i16* %47, i64 4
  %285 = load i16, i16* %278, align 2
  %286 = icmp eq i16 %285, 101
  %287 = icmp ult i16* %284, %1
  %288 = and i1 %286, %287
  br i1 %288, label %79, label %74

289:                                              ; preds = %83
  %290 = getelementptr inbounds i16, i16* %47, i64 2
  %291 = load i16, i16* %84, align 2
  %292 = icmp eq i16 %291, 97
  %293 = icmp ult i16* %290, %1
  %294 = and i1 %292, %293
  br i1 %294, label %295, label %89

295:                                              ; preds = %289
  %296 = getelementptr inbounds i16, i16* %47, i64 3
  %297 = load i16, i16* %290, align 2
  %298 = icmp eq i16 %297, 108
  %299 = icmp ult i16* %296, %1
  %300 = and i1 %298, %299
  br i1 %300, label %301, label %89

301:                                              ; preds = %295
  %302 = getelementptr inbounds i16, i16* %47, i64 4
  %303 = load i16, i16* %296, align 2
  %304 = icmp eq i16 %303, 115
  %305 = icmp ult i16* %302, %1
  %306 = and i1 %304, %305
  br i1 %306, label %307, label %89

307:                                              ; preds = %301
  %308 = getelementptr inbounds i16, i16* %47, i64 5
  %309 = load i16, i16* %302, align 2
  %310 = icmp eq i16 %309, 101
  %311 = icmp ult i16* %308, %1
  %312 = and i1 %310, %311
  br i1 %312, label %94, label %89
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN8v8_crdtp4json12_GLOBAL__N_110JsonParserItE12DecodeStringEPKtS5_PNSt3__16vectorItNS6_9allocatorItEEEE(i16*, i16*, %"class.std::__1::vector.36"*) unnamed_addr #0 align 2 {
  %4 = icmp eq i16* %0, %1
  br i1 %4, label %255, label %5

5:                                                ; preds = %3
  %6 = icmp ugt i16* %0, %1
  br i1 %6, label %255, label %7

7:                                                ; preds = %5
  %8 = ptrtoint i16* %1 to i64
  %9 = ptrtoint i16* %0 to i64
  %10 = sub i64 %8, %9
  %11 = ashr exact i64 %10, 1
  %12 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %13 = bitcast i16** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::vector.36"* %2 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %14, %16
  %18 = ashr exact i64 %17, 1
  %19 = icmp ult i64 %18, %11
  br i1 %19, label %20, label %43

20:                                               ; preds = %7
  %21 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %2, i64 0, i32 0, i32 1
  %22 = bitcast i16** %21 to i64*
  %23 = icmp slt i64 %10, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %20
  tail call void @abort() #13
  unreachable

25:                                               ; preds = %20
  %26 = load i64, i64* %22, align 8
  %27 = sub i64 %26, %16
  %28 = ashr exact i64 %27, 1
  %29 = tail call i8* @_Znwm(i64 %10) #11
  %30 = bitcast i8* %29 to i16*
  %31 = getelementptr inbounds i16, i16* %30, i64 %28
  %32 = ptrtoint i16* %31 to i64
  %33 = getelementptr inbounds i16, i16* %30, i64 %11
  %34 = ptrtoint i16* %33 to i64
  %35 = ptrtoint i8* %29 to i64
  %36 = icmp sgt i64 %27, 0
  br i1 %36, label %37, label %39

37:                                               ; preds = %25
  %38 = inttoptr i64 %16 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %29, i8* align 2 %38, i64 %27, i1 false) #12
  br label %39

39:                                               ; preds = %37, %25
  store i64 %35, i64* %15, align 8
  store i64 %32, i64* %22, align 8
  store i64 %34, i64* %13, align 8
  %40 = icmp eq i64 %16, 0
  br i1 %40, label %43, label %41

41:                                               ; preds = %39
  %42 = inttoptr i64 %16 to i8*
  tail call void @_ZdlPv(i8* %42) #11
  br label %43

43:                                               ; preds = %7, %39, %41
  %44 = icmp ult i16* %0, %1
  br i1 %44, label %45, label %255

45:                                               ; preds = %43
  %46 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %2, i64 0, i32 0, i32 1
  %47 = bitcast i16** %46 to i64*
  %48 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %2, i64 0, i32 0, i32 0
  br label %49

49:                                               ; preds = %45, %252
  %50 = phi i16* [ %0, %45 ], [ %253, %252 ]
  %51 = getelementptr inbounds i16, i16* %50, i64 1
  %52 = load i16, i16* %50, align 2
  %53 = icmp eq i16 %52, 92
  br i1 %53, label %111, label %54

54:                                               ; preds = %49
  %55 = load i16*, i16** %46, align 8
  %56 = load i16*, i16** %12, align 8
  %57 = icmp eq i16* %55, %56
  %58 = ptrtoint i16* %56 to i64
  br i1 %57, label %62, label %59

59:                                               ; preds = %54
  store i16 %52, i16* %55, align 2
  %60 = getelementptr inbounds i16, i16* %55, i64 1
  %61 = ptrtoint i16* %60 to i64
  store i64 %61, i64* %47, align 8
  br label %252

62:                                               ; preds = %54
  %63 = ptrtoint i16* %55 to i64
  %64 = load i64, i64* %15, align 8
  %65 = sub i64 %63, %64
  %66 = ashr exact i64 %65, 1
  %67 = add nsw i64 %66, 1
  %68 = icmp slt i64 %67, 0
  br i1 %68, label %69, label %71

69:                                               ; preds = %62
  %70 = bitcast %"class.std::__1::vector.36"* %2 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %70) #13
  unreachable

71:                                               ; preds = %62
  %72 = sub i64 %58, %64
  %73 = ashr exact i64 %72, 1
  %74 = icmp ult i64 %73, 4611686018427387903
  %75 = icmp ult i64 %72, %67
  %76 = select i1 %75, i64 %67, i64 %72
  %77 = select i1 %74, i64 %76, i64 9223372036854775807
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %86, label %79

79:                                               ; preds = %71
  %80 = icmp slt i64 %77, 0
  br i1 %80, label %81, label %82

81:                                               ; preds = %79
  tail call void @abort() #13
  unreachable

82:                                               ; preds = %79
  %83 = shl i64 %77, 1
  %84 = tail call i8* @_Znwm(i64 %83) #11
  %85 = bitcast i8* %84 to i16*
  br label %86

86:                                               ; preds = %82, %71
  %87 = phi i16* [ %85, %82 ], [ null, %71 ]
  %88 = getelementptr inbounds i16, i16* %87, i64 %66
  %89 = getelementptr inbounds i16, i16* %87, i64 %77
  %90 = ptrtoint i16* %89 to i64
  store i16 %52, i16* %88, align 2
  %91 = getelementptr inbounds i16, i16* %88, i64 1
  %92 = ptrtoint i16* %91 to i64
  %93 = load i16*, i16** %48, align 8
  %94 = load i64, i64* %47, align 8
  %95 = ptrtoint i16* %93 to i64
  %96 = sub i64 %94, %95
  %97 = ashr exact i64 %96, 1
  %98 = sub nsw i64 0, %97
  %99 = getelementptr inbounds i16, i16* %88, i64 %98
  %100 = ptrtoint i16* %99 to i64
  %101 = icmp sgt i64 %96, 0
  br i1 %101, label %102, label %106

102:                                              ; preds = %86
  %103 = bitcast i16* %99 to i8*
  %104 = bitcast i16* %93 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %103, i8* align 2 %104, i64 %96, i1 false) #12
  %105 = load i16*, i16** %48, align 8
  br label %106

106:                                              ; preds = %102, %86
  %107 = phi i16* [ %93, %86 ], [ %105, %102 ]
  store i64 %100, i64* %15, align 8
  store i64 %92, i64* %47, align 8
  store i64 %90, i64* %13, align 8
  %108 = icmp eq i16* %107, null
  br i1 %108, label %252, label %109

109:                                              ; preds = %106
  %110 = bitcast i16* %107 to i8*
  tail call void @_ZdlPv(i8* %110) #11
  br label %252

111:                                              ; preds = %49
  %112 = icmp eq i16* %51, %1
  br i1 %112, label %255, label %113

113:                                              ; preds = %111
  %114 = getelementptr inbounds i16, i16* %50, i64 2
  %115 = load i16, i16* %51, align 2
  switch i16 %115, label %255 [
    i16 117, label %122
    i16 34, label %193
    i16 47, label %193
    i16 92, label %193
    i16 98, label %116
    i16 102, label %117
    i16 110, label %118
    i16 114, label %119
    i16 116, label %120
    i16 118, label %121
  ]

116:                                              ; preds = %113
  br label %193

117:                                              ; preds = %113
  br label %193

118:                                              ; preds = %113
  br label %193

119:                                              ; preds = %113
  br label %193

120:                                              ; preds = %113
  br label %193

121:                                              ; preds = %113
  br label %193

122:                                              ; preds = %113
  %123 = load i16, i16* %114, align 2
  %124 = add i16 %123, -48
  %125 = icmp ult i16 %124, 10
  br i1 %125, label %136, label %126

126:                                              ; preds = %122
  %127 = add i16 %123, -65
  %128 = icmp ult i16 %127, 6
  br i1 %128, label %129, label %131

129:                                              ; preds = %126
  %130 = add nsw i16 %123, -55
  br label %136

131:                                              ; preds = %126
  %132 = add i16 %123, -97
  %133 = icmp ult i16 %132, 6
  %134 = add i16 %123, -87
  %135 = select i1 %133, i16 %134, i16 0
  br label %136

136:                                              ; preds = %122, %129, %131
  %137 = phi i16 [ %135, %131 ], [ %130, %129 ], [ %124, %122 ]
  %138 = shl i16 %137, 12
  %139 = getelementptr inbounds i16, i16* %50, i64 3
  %140 = load i16, i16* %139, align 2
  %141 = add i16 %140, -48
  %142 = icmp ult i16 %141, 10
  br i1 %142, label %153, label %143

143:                                              ; preds = %136
  %144 = add i16 %140, -65
  %145 = icmp ult i16 %144, 6
  br i1 %145, label %146, label %148

146:                                              ; preds = %143
  %147 = add nsw i16 %140, -55
  br label %153

148:                                              ; preds = %143
  %149 = add i16 %140, -97
  %150 = icmp ult i16 %149, 6
  %151 = add i16 %140, -87
  %152 = select i1 %150, i16 %151, i16 0
  br label %153

153:                                              ; preds = %136, %146, %148
  %154 = phi i16 [ %152, %148 ], [ %147, %146 ], [ %141, %136 ]
  %155 = shl i16 %154, 8
  %156 = add i16 %155, %138
  %157 = getelementptr inbounds i16, i16* %50, i64 4
  %158 = load i16, i16* %157, align 2
  %159 = add i16 %158, -48
  %160 = icmp ult i16 %159, 10
  br i1 %160, label %171, label %161

161:                                              ; preds = %153
  %162 = add i16 %158, -65
  %163 = icmp ult i16 %162, 6
  br i1 %163, label %164, label %166

164:                                              ; preds = %161
  %165 = add nsw i16 %158, -55
  br label %171

166:                                              ; preds = %161
  %167 = add i16 %158, -97
  %168 = icmp ult i16 %167, 6
  %169 = add i16 %158, -87
  %170 = select i1 %168, i16 %169, i16 0
  br label %171

171:                                              ; preds = %153, %164, %166
  %172 = phi i16 [ %170, %166 ], [ %165, %164 ], [ %159, %153 ]
  %173 = shl i16 %172, 4
  %174 = add i16 %156, %173
  %175 = getelementptr inbounds i16, i16* %50, i64 5
  %176 = load i16, i16* %175, align 2
  %177 = add i16 %176, -48
  %178 = icmp ult i16 %177, 10
  br i1 %178, label %189, label %179

179:                                              ; preds = %171
  %180 = add i16 %176, -65
  %181 = icmp ult i16 %180, 6
  br i1 %181, label %182, label %184

182:                                              ; preds = %179
  %183 = add nsw i16 %176, -55
  br label %189

184:                                              ; preds = %179
  %185 = add i16 %176, -97
  %186 = icmp ult i16 %185, 6
  %187 = add i16 %176, -87
  %188 = select i1 %186, i16 %187, i16 0
  br label %189

189:                                              ; preds = %171, %182, %184
  %190 = phi i16 [ %188, %184 ], [ %183, %182 ], [ %177, %171 ]
  %191 = add i16 %174, %190
  %192 = getelementptr inbounds i16, i16* %50, i64 6
  br label %193

193:                                              ; preds = %113, %113, %113, %189, %121, %120, %119, %118, %117, %116
  %194 = phi i16 [ 11, %121 ], [ 9, %120 ], [ 13, %119 ], [ 10, %118 ], [ 12, %117 ], [ 8, %116 ], [ %115, %113 ], [ %115, %113 ], [ %115, %113 ], [ %191, %189 ]
  %195 = phi i16* [ %114, %121 ], [ %114, %120 ], [ %114, %119 ], [ %114, %118 ], [ %114, %117 ], [ %114, %116 ], [ %114, %113 ], [ %114, %113 ], [ %114, %113 ], [ %192, %189 ]
  %196 = load i16*, i16** %46, align 8
  %197 = load i16*, i16** %12, align 8
  %198 = icmp eq i16* %196, %197
  %199 = ptrtoint i16* %197 to i64
  br i1 %198, label %203, label %200

200:                                              ; preds = %193
  store i16 %194, i16* %196, align 2
  %201 = getelementptr inbounds i16, i16* %196, i64 1
  %202 = ptrtoint i16* %201 to i64
  store i64 %202, i64* %47, align 8
  br label %252

203:                                              ; preds = %193
  %204 = ptrtoint i16* %196 to i64
  %205 = load i64, i64* %15, align 8
  %206 = sub i64 %204, %205
  %207 = ashr exact i64 %206, 1
  %208 = add nsw i64 %207, 1
  %209 = icmp slt i64 %208, 0
  br i1 %209, label %210, label %212

210:                                              ; preds = %203
  %211 = bitcast %"class.std::__1::vector.36"* %2 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %211) #13
  unreachable

212:                                              ; preds = %203
  %213 = sub i64 %199, %205
  %214 = ashr exact i64 %213, 1
  %215 = icmp ult i64 %214, 4611686018427387903
  %216 = icmp ult i64 %213, %208
  %217 = select i1 %216, i64 %208, i64 %213
  %218 = select i1 %215, i64 %217, i64 9223372036854775807
  %219 = icmp eq i64 %218, 0
  br i1 %219, label %227, label %220

220:                                              ; preds = %212
  %221 = icmp slt i64 %218, 0
  br i1 %221, label %222, label %223

222:                                              ; preds = %220
  tail call void @abort() #13
  unreachable

223:                                              ; preds = %220
  %224 = shl i64 %218, 1
  %225 = tail call i8* @_Znwm(i64 %224) #11
  %226 = bitcast i8* %225 to i16*
  br label %227

227:                                              ; preds = %223, %212
  %228 = phi i16* [ %226, %223 ], [ null, %212 ]
  %229 = getelementptr inbounds i16, i16* %228, i64 %207
  %230 = getelementptr inbounds i16, i16* %228, i64 %218
  %231 = ptrtoint i16* %230 to i64
  store i16 %194, i16* %229, align 2
  %232 = getelementptr inbounds i16, i16* %229, i64 1
  %233 = ptrtoint i16* %232 to i64
  %234 = load i16*, i16** %48, align 8
  %235 = load i64, i64* %47, align 8
  %236 = ptrtoint i16* %234 to i64
  %237 = sub i64 %235, %236
  %238 = ashr exact i64 %237, 1
  %239 = sub nsw i64 0, %238
  %240 = getelementptr inbounds i16, i16* %229, i64 %239
  %241 = ptrtoint i16* %240 to i64
  %242 = icmp sgt i64 %237, 0
  br i1 %242, label %243, label %247

243:                                              ; preds = %227
  %244 = bitcast i16* %240 to i8*
  %245 = bitcast i16* %234 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %244, i8* align 2 %245, i64 %237, i1 false) #12
  %246 = load i16*, i16** %48, align 8
  br label %247

247:                                              ; preds = %243, %227
  %248 = phi i16* [ %234, %227 ], [ %246, %243 ]
  store i64 %241, i64* %15, align 8
  store i64 %233, i64* %47, align 8
  store i64 %231, i64* %13, align 8
  %249 = icmp eq i16* %248, null
  br i1 %249, label %252, label %250

250:                                              ; preds = %247
  %251 = bitcast i16* %248 to i8*
  tail call void @_ZdlPv(i8* %251) #11
  br label %252

252:                                              ; preds = %250, %247, %200, %109, %106, %59
  %253 = phi i16* [ %51, %59 ], [ %51, %106 ], [ %51, %109 ], [ %195, %200 ], [ %195, %247 ], [ %195, %250 ]
  %254 = icmp ult i16* %253, %1
  br i1 %254, label %49, label %255

255:                                              ; preds = %252, %111, %113, %43, %5, %3
  %256 = phi i1 [ true, %3 ], [ false, %5 ], [ true, %43 ], [ true, %252 ], [ false, %111 ], [ false, %113 ]
  ret i1 %256
}

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(%"class.std::__1::basic_string"*, i64) local_unnamed_addr #10

declare void @_ZN8v8_crdtp4cbor9ParseCBORENS_4spanIhEEPNS_13ParserHandlerE(i8*, i64, %"class.v8_crdtp::ParserHandler"*) local_unnamed_addr #10

declare %"class.v8_crdtp::ParserHandler"* @_ZN8v8_crdtp4cbor14NewCBOREncoderEPNSt3__16vectorIhNS1_9allocatorIhEEEEPNS_6StatusE(%"class.std::__1::vector"*, %"struct.v8_crdtp::Status"*) local_unnamed_addr #10

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { builtin nounwind }
attributes #12 = { nounwind }
attributes #13 = { noreturn nounwind }
attributes #14 = { nounwind readnone }
attributes #15 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
!5 = distinct !{!5, !4}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !4}
!8 = distinct !{!8, !4}
!9 = !{!10}
!10 = distinct !{!10, !11}
!11 = distinct !{!11, !"LVerDomain"}
!12 = !{!13}
!13 = distinct !{!13, !11}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.isvectorized", i32 1}
!16 = distinct !{!16, !4}
!17 = distinct !{!17, !15}
!18 = !{!19}
!19 = distinct !{!19, !20}
!20 = distinct !{!20, !"LVerDomain"}
!21 = !{!22}
!22 = distinct !{!22, !20}
!23 = distinct !{!23, !15}
!24 = distinct !{!24, !4}
!25 = distinct !{!25, !15}
!26 = !{!27}
!27 = distinct !{!27, !28}
!28 = distinct !{!28, !"LVerDomain"}
!29 = !{!30}
!30 = distinct !{!30, !28}
!31 = distinct !{!31, !15}
!32 = distinct !{!32, !4}
!33 = distinct !{!33, !15}
!34 = !{!35}
!35 = distinct !{!35, !36}
!36 = distinct !{!36, !"LVerDomain"}
!37 = !{!38}
!38 = distinct !{!38, !36}
!39 = distinct !{!39, !15}
!40 = distinct !{!40, !4}
!41 = distinct !{!41, !15}
!42 = !{!43}
!43 = distinct !{!43, !44}
!44 = distinct !{!44, !"LVerDomain"}
!45 = !{!46}
!46 = distinct !{!46, !44}
!47 = distinct !{!47, !15}
!48 = distinct !{!48, !4}
!49 = distinct !{!49, !15}
!50 = !{!51}
!51 = distinct !{!51, !52}
!52 = distinct !{!52, !"LVerDomain"}
!53 = !{!54}
!54 = distinct !{!54, !52}
!55 = distinct !{!55, !15}
!56 = distinct !{!56, !4}
!57 = distinct !{!57, !15}
!58 = !{!59}
!59 = distinct !{!59, !60}
!60 = distinct !{!60, !"LVerDomain"}
!61 = !{!62}
!62 = distinct !{!62, !60}
!63 = distinct !{!63, !15}
!64 = distinct !{!64, !4}
!65 = distinct !{!65, !15}
!66 = !{!67}
!67 = distinct !{!67, !68}
!68 = distinct !{!68, !"LVerDomain"}
!69 = !{!70}
!70 = distinct !{!70, !68}
!71 = distinct !{!71, !15}
!72 = distinct !{!72, !4}
!73 = distinct !{!73, !15}
!74 = !{!75}
!75 = distinct !{!75, !76}
!76 = distinct !{!76, !"LVerDomain"}
!77 = !{!78}
!78 = distinct !{!78, !76}
!79 = distinct !{!79, !15}
!80 = distinct !{!80, !4}
!81 = distinct !{!81, !15}
!82 = !{!83}
!83 = distinct !{!83, !84}
!84 = distinct !{!84, !"LVerDomain"}
!85 = !{!86}
!86 = distinct !{!86, !84}
!87 = distinct !{!87, !15}
!88 = distinct !{!88, !4}
!89 = distinct !{!89, !15}
!90 = distinct !{!90, !15}
!91 = distinct !{!91, !4}
!92 = distinct !{!92, !93, !15}
!93 = !{!"llvm.loop.unroll.runtime.disable"}
!94 = !{!95}
!95 = distinct !{!95, !96}
!96 = distinct !{!96, !"LVerDomain"}
!97 = !{!98}
!98 = distinct !{!98, !96}
!99 = distinct !{!99, !15}
!100 = distinct !{!100, !4}
!101 = distinct !{!101, !15}
!102 = distinct !{!102, !15}
!103 = distinct !{!103, !4}
!104 = distinct !{!104, !93, !15}
!105 = !{!106}
!106 = distinct !{!106, !107}
!107 = distinct !{!107, !"LVerDomain"}
!108 = !{!109}
!109 = distinct !{!109, !107}
!110 = distinct !{!110, !15}
!111 = distinct !{!111, !4}
!112 = distinct !{!112, !15}
