; ModuleID = '../../v8/src/numbers/fast-dtoa.cc'
source_filename = "../../v8/src/numbers/fast-dtoa.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::DiyFp" = type <{ i64, i32, [4 x i8] }>

@.str = private unnamed_addr constant [17 x i8] c"unreachable code\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal8FastDtoaEdNS0_12FastDtoaModeEiNS0_6VectorIcEEPiS4_(double, i32, i32, i8*, i64, i32* nocapture, i32* nocapture) local_unnamed_addr #0 {
  %8 = alloca { i64, i32 }, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca %"class.v8::internal::DiyFp", align 8
  %12 = alloca i32, align 4
  %13 = alloca { i64, i32 }, align 8
  %14 = alloca { i64, i32 }, align 8
  %15 = alloca { i64, i32 }, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca %"class.v8::internal::DiyFp", align 8
  %19 = alloca i32, align 4
  switch i32 %1, label %465 [
    i32 0, label %20
    i32 1, label %262
  ]

20:                                               ; preds = %7
  %21 = bitcast double %0 to i64
  %22 = and i64 %21, 4503599627370495
  %23 = and i64 %21, 9218868437227405312
  %24 = icmp eq i64 %23, 0
  %25 = or i64 %22, 4503599627370496
  %26 = select i1 %24, i64 %22, i64 %25
  br i1 %24, label %32, label %27

27:                                               ; preds = %20
  %28 = lshr i64 %21, 52
  %29 = trunc i64 %28 to i32
  %30 = and i32 %29, 2047
  %31 = add nsw i32 %30, -1075
  br label %32

32:                                               ; preds = %27, %20
  %33 = phi i32 [ %31, %27 ], [ -1074, %20 ]
  %34 = and i64 %26, 4503599627370496
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %36, label %43

36:                                               ; preds = %32, %36
  %37 = phi i32 [ %40, %36 ], [ %33, %32 ]
  %38 = phi i64 [ %39, %36 ], [ %26, %32 ]
  %39 = shl i64 %38, 1
  %40 = add nsw i32 %37, -1
  %41 = and i64 %38, 2251799813685248
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %36, label %43

43:                                               ; preds = %36, %32
  %44 = phi i64 [ %26, %32 ], [ %39, %36 ]
  %45 = phi i32 [ %33, %32 ], [ %40, %36 ]
  %46 = shl i64 %44, 11
  %47 = add nsw i32 %45, -11
  br i1 %24, label %53, label %48

48:                                               ; preds = %43
  %49 = lshr i64 %21, 52
  %50 = trunc i64 %49 to i32
  %51 = and i32 %50, 2047
  %52 = add nsw i32 %51, -1075
  br label %53

53:                                               ; preds = %48, %43
  %54 = phi i32 [ %52, %48 ], [ -1074, %43 ]
  %55 = shl nuw nsw i64 %26, 1
  %56 = or i64 %55, 1
  %57 = add nsw i32 %54, -1
  br label %61

58:                                               ; preds = %61
  %59 = icmp ne i64 %26, 4503599627370496
  %60 = icmp sgt i64 %64, -1
  br i1 %60, label %67, label %73

61:                                               ; preds = %61, %53
  %62 = phi i64 [ %64, %61 ], [ %56, %53 ]
  %63 = phi i32 [ %65, %61 ], [ %57, %53 ]
  %64 = shl i64 %62, 10
  %65 = add nsw i32 %63, -10
  %66 = icmp ult i64 %64, 18014398509481984
  br i1 %66, label %61, label %58

67:                                               ; preds = %58, %67
  %68 = phi i64 [ %70, %67 ], [ %64, %58 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %58 ]
  %70 = shl i64 %68, 1
  %71 = add nsw i32 %69, -1
  %72 = icmp sgt i64 %70, -1
  br i1 %72, label %67, label %73

73:                                               ; preds = %67, %58
  %74 = phi i32 [ %65, %58 ], [ %71, %67 ]
  %75 = phi i64 [ %64, %58 ], [ %70, %67 ]
  %76 = icmp eq i32 %54, -1074
  %77 = or i1 %59, %76
  %78 = add nsw i64 %55, -1
  %79 = add nsw i32 %54, -2
  %80 = select i1 %77, i64 %78, i64 18014398509481983
  %81 = select i1 %77, i32 %57, i32 %79
  %82 = sub nsw i32 %81, %74
  %83 = zext i32 %82 to i64
  %84 = shl i64 %80, %83
  %85 = bitcast %"class.v8::internal::DiyFp"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %85) #4
  %86 = getelementptr inbounds %"class.v8::internal::DiyFp", %"class.v8::internal::DiyFp"* %18, i64 0, i32 0
  store i64 0, i64* %86, align 8
  %87 = getelementptr inbounds %"class.v8::internal::DiyFp", %"class.v8::internal::DiyFp"* %18, i64 0, i32 1
  store i32 0, i32* %87, align 8
  %88 = bitcast i32* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %88) #4
  %89 = sub i32 -113, %45
  %90 = sub i32 -85, %45
  call void @_ZN2v88internal16PowersOfTenCache36GetCachedPowerForBinaryExponentRangeEiiPNS0_5DiyFpEPi(i32 %89, i32 %90, %"class.v8::internal::DiyFp"* nonnull %18, i32* nonnull %19) #4
  %91 = bitcast { i64, i32 }* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %91) #4
  %92 = bitcast { i64, i32 }* %13 to %"class.v8::internal::DiyFp"*
  %93 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %13, i64 0, i32 0
  store i64 %46, i64* %93, align 8
  %94 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %13, i64 0, i32 1
  store i32 %47, i32* %94, align 8
  call void @_ZN2v88internal5DiyFp8MultiplyERKS1_(%"class.v8::internal::DiyFp"* nonnull %92, %"class.v8::internal::DiyFp"* nonnull dereferenceable(16) %18) #4
  %95 = load i64, i64* %93, align 8
  %96 = load i32, i32* %94, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %91) #4
  %97 = bitcast { i64, i32 }* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %97) #4
  %98 = bitcast { i64, i32 }* %14 to %"class.v8::internal::DiyFp"*
  %99 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %14, i64 0, i32 0
  store i64 %84, i64* %99, align 8
  %100 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %14, i64 0, i32 1
  store i32 %74, i32* %100, align 8
  call void @_ZN2v88internal5DiyFp8MultiplyERKS1_(%"class.v8::internal::DiyFp"* nonnull %98, %"class.v8::internal::DiyFp"* nonnull dereferenceable(16) %18) #4
  %101 = load i64, i64* %99, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %97) #4
  %102 = bitcast { i64, i32 }* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %102) #4
  %103 = bitcast { i64, i32 }* %15 to %"class.v8::internal::DiyFp"*
  %104 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %15, i64 0, i32 0
  store i64 %75, i64* %104, align 8
  %105 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %15, i64 0, i32 1
  store i32 %74, i32* %105, align 8
  call void @_ZN2v88internal5DiyFp8MultiplyERKS1_(%"class.v8::internal::DiyFp"* nonnull %103, %"class.v8::internal::DiyFp"* nonnull dereferenceable(16) %18) #4
  %106 = load i64, i64* %104, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %102) #4
  %107 = add i64 %106, 1
  %108 = sub i64 1, %101
  %109 = add i64 %107, %108
  %110 = sub nsw i32 0, %96
  %111 = zext i32 %110 to i64
  %112 = shl i64 1, %111
  %113 = lshr i64 %107, %111
  %114 = trunc i64 %113 to i32
  %115 = add i64 %112, -1
  %116 = and i64 %107, %115
  %117 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %117) #4
  %118 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %118) #4
  %119 = add nsw i32 %96, 64
  call fastcc void @_ZN2v88internalL15BiggestPowerTenEjiPjPi(i32 %114, i32 %119, i32* nonnull %16, i32* nonnull %17) #4
  %120 = load i32, i32* %17, align 4
  %121 = add nsw i32 %120, 1
  store i32 0, i32* %5, align 4
  %122 = icmp sgt i32 %120, -1
  br i1 %122, label %126, label %123

123:                                              ; preds = %128, %73
  %124 = phi i32 [ 0, %73 ], [ %140, %128 ]
  %125 = phi i32 [ %121, %73 ], [ %142, %128 ]
  br label %197

126:                                              ; preds = %73
  %127 = load i32, i32* %16, align 4
  br label %129

128:                                              ; preds = %194
  store i32 %195, i32* %16, align 4
  br label %123

129:                                              ; preds = %194, %126
  %130 = phi i32 [ %121, %126 ], [ %142, %194 ]
  %131 = phi i32 [ 0, %126 ], [ %140, %194 ]
  %132 = phi i32 [ %127, %126 ], [ %195, %194 ]
  %133 = phi i32 [ %114, %126 ], [ %141, %194 ]
  %134 = udiv i32 %133, %132
  %135 = trunc i32 %134 to i8
  %136 = add i8 %135, 48
  %137 = sext i32 %131 to i64
  %138 = getelementptr inbounds i8, i8* %3, i64 %137
  store i8 %136, i8* %138, align 1
  %139 = load i32, i32* %5, align 4
  %140 = add nsw i32 %139, 1
  store i32 %140, i32* %5, align 4
  %141 = urem i32 %133, %132
  %142 = add nsw i32 %130, -1
  %143 = zext i32 %141 to i64
  %144 = shl i64 %143, %111
  %145 = add i64 %144, %116
  %146 = icmp ugt i64 %109, %145
  br i1 %146, label %147, label %194

147:                                              ; preds = %129
  store i32 %132, i32* %16, align 4
  %148 = sub i64 %107, %95
  %149 = zext i32 %132 to i64
  %150 = shl i64 %149, %111
  %151 = add i64 %148, -1
  %152 = add i64 %148, 1
  %153 = icmp ule i64 %151, %145
  %154 = sub i64 %109, %145
  %155 = icmp ult i64 %154, %150
  %156 = or i1 %153, %155
  br i1 %156, label %175, label %157

157:                                              ; preds = %147
  %158 = sext i32 %139 to i64
  %159 = getelementptr inbounds i8, i8* %3, i64 %158
  br label %160

160:                                              ; preds = %168, %157
  %161 = phi i64 [ %145, %157 ], [ %162, %168 ]
  %162 = add i64 %161, %150
  %163 = icmp ult i64 %162, %151
  br i1 %163, label %168, label %164

164:                                              ; preds = %160
  %165 = sub i64 %151, %161
  %166 = sub i64 %162, %151
  %167 = icmp ult i64 %165, %166
  br i1 %167, label %175, label %168

168:                                              ; preds = %164, %160
  %169 = load i8, i8* %159, align 1
  %170 = add i8 %169, -1
  store i8 %170, i8* %159, align 1
  %171 = icmp uge i64 %162, %151
  %172 = sub i64 %109, %162
  %173 = icmp ult i64 %172, %150
  %174 = or i1 %171, %173
  br i1 %174, label %175, label %160

175:                                              ; preds = %168, %164, %147
  %176 = phi i64 [ %145, %147 ], [ %161, %164 ], [ %162, %168 ]
  %177 = phi i1 [ %155, %147 ], [ false, %164 ], [ %173, %168 ]
  %178 = icmp ule i64 %152, %176
  %179 = or i1 %178, %177
  br i1 %179, label %189, label %180

180:                                              ; preds = %175
  %181 = add i64 %176, %150
  %182 = icmp ult i64 %181, %152
  br i1 %182, label %466, label %183

183:                                              ; preds = %180
  %184 = sub i64 %152, %176
  %185 = sub i64 %181, %152
  %186 = icmp ugt i64 %184, %185
  %187 = icmp ult i64 %176, 2
  %188 = or i1 %187, %186
  br i1 %188, label %466, label %191

189:                                              ; preds = %175
  %190 = icmp ult i64 %176, 2
  br i1 %190, label %466, label %191

191:                                              ; preds = %189, %183
  %192 = add i64 %109, -4
  %193 = icmp ule i64 %176, %192
  br label %466

194:                                              ; preds = %129
  %195 = udiv i32 %132, 10
  %196 = icmp sgt i32 %142, 0
  br i1 %196, label %129, label %128

197:                                              ; preds = %123, %197
  %198 = phi i32 [ %212, %197 ], [ %124, %123 ]
  %199 = phi i32 [ %214, %197 ], [ %125, %123 ]
  %200 = phi i64 [ %205, %197 ], [ %109, %123 ]
  %201 = phi i64 [ %213, %197 ], [ %116, %123 ]
  %202 = phi i64 [ %204, %197 ], [ 1, %123 ]
  %203 = mul i64 %201, 10
  %204 = mul i64 %202, 10
  %205 = mul i64 %200, 10
  %206 = lshr i64 %203, %111
  %207 = trunc i64 %206 to i8
  %208 = add i8 %207, 48
  %209 = sext i32 %198 to i64
  %210 = getelementptr inbounds i8, i8* %3, i64 %209
  store i8 %208, i8* %210, align 1
  %211 = load i32, i32* %5, align 4
  %212 = add nsw i32 %211, 1
  store i32 %212, i32* %5, align 4
  %213 = and i64 %203, %115
  %214 = add nsw i32 %199, -1
  %215 = icmp ugt i64 %205, %213
  br i1 %215, label %216, label %197

216:                                              ; preds = %197
  %217 = sub i64 %107, %95
  %218 = mul i64 %204, %217
  %219 = sub i64 %218, %204
  %220 = add i64 %218, %204
  %221 = icmp ule i64 %219, %213
  %222 = sub i64 %205, %213
  %223 = icmp ult i64 %222, %112
  %224 = or i1 %223, %221
  br i1 %224, label %243, label %225

225:                                              ; preds = %216
  %226 = sext i32 %211 to i64
  %227 = getelementptr inbounds i8, i8* %3, i64 %226
  br label %228

228:                                              ; preds = %236, %225
  %229 = phi i64 [ %213, %225 ], [ %230, %236 ]
  %230 = add i64 %229, %112
  %231 = icmp ult i64 %230, %219
  br i1 %231, label %236, label %232

232:                                              ; preds = %228
  %233 = sub i64 %219, %229
  %234 = sub i64 %230, %219
  %235 = icmp ult i64 %233, %234
  br i1 %235, label %243, label %236

236:                                              ; preds = %232, %228
  %237 = load i8, i8* %227, align 1
  %238 = add i8 %237, -1
  store i8 %238, i8* %227, align 1
  %239 = icmp uge i64 %230, %219
  %240 = sub i64 %205, %230
  %241 = icmp ult i64 %240, %112
  %242 = or i1 %239, %241
  br i1 %242, label %243, label %228

243:                                              ; preds = %236, %232, %216
  %244 = phi i64 [ %213, %216 ], [ %229, %232 ], [ %230, %236 ]
  %245 = phi i1 [ %223, %216 ], [ false, %232 ], [ %241, %236 ]
  %246 = icmp ule i64 %220, %244
  %247 = or i1 %246, %245
  br i1 %247, label %255, label %248

248:                                              ; preds = %243
  %249 = add i64 %244, %112
  %250 = icmp ult i64 %249, %220
  br i1 %250, label %466, label %251

251:                                              ; preds = %248
  %252 = sub i64 %220, %244
  %253 = sub i64 %249, %220
  %254 = icmp ugt i64 %252, %253
  br i1 %254, label %466, label %255

255:                                              ; preds = %251, %243
  %256 = mul i64 %202, 20
  %257 = icmp ugt i64 %256, %244
  br i1 %257, label %466, label %258

258:                                              ; preds = %255
  %259 = mul i64 %202, -40
  %260 = add i64 %259, %205
  %261 = icmp ule i64 %244, %260
  br label %466

262:                                              ; preds = %7
  %263 = bitcast double %0 to i64
  %264 = and i64 %263, 4503599627370495
  %265 = and i64 %263, 9218868437227405312
  %266 = icmp eq i64 %265, 0
  %267 = or i64 %264, 4503599627370496
  %268 = select i1 %266, i64 %264, i64 %267
  br i1 %266, label %274, label %269

269:                                              ; preds = %262
  %270 = lshr i64 %263, 52
  %271 = trunc i64 %270 to i32
  %272 = and i32 %271, 2047
  %273 = add nsw i32 %272, -1075
  br label %274

274:                                              ; preds = %269, %262
  %275 = phi i32 [ %273, %269 ], [ -1074, %262 ]
  %276 = and i64 %268, 4503599627370496
  %277 = icmp eq i64 %276, 0
  br i1 %277, label %278, label %285

278:                                              ; preds = %274, %278
  %279 = phi i32 [ %282, %278 ], [ %275, %274 ]
  %280 = phi i64 [ %281, %278 ], [ %268, %274 ]
  %281 = shl i64 %280, 1
  %282 = add nsw i32 %279, -1
  %283 = and i64 %280, 2251799813685248
  %284 = icmp eq i64 %283, 0
  br i1 %284, label %278, label %285

285:                                              ; preds = %278, %274
  %286 = phi i64 [ %268, %274 ], [ %281, %278 ]
  %287 = phi i32 [ %275, %274 ], [ %282, %278 ]
  %288 = shl i64 %286, 11
  %289 = add nsw i32 %287, -11
  %290 = bitcast %"class.v8::internal::DiyFp"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %290) #4
  %291 = getelementptr inbounds %"class.v8::internal::DiyFp", %"class.v8::internal::DiyFp"* %11, i64 0, i32 0
  store i64 0, i64* %291, align 8
  %292 = getelementptr inbounds %"class.v8::internal::DiyFp", %"class.v8::internal::DiyFp"* %11, i64 0, i32 1
  store i32 0, i32* %292, align 8
  %293 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %293) #4
  %294 = sub i32 -113, %287
  %295 = sub i32 -85, %287
  call void @_ZN2v88internal16PowersOfTenCache36GetCachedPowerForBinaryExponentRangeEiiPNS0_5DiyFpEPi(i32 %294, i32 %295, %"class.v8::internal::DiyFp"* nonnull %11, i32* nonnull %12) #4
  %296 = bitcast { i64, i32 }* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %296) #4
  %297 = bitcast { i64, i32 }* %8 to %"class.v8::internal::DiyFp"*
  %298 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %8, i64 0, i32 0
  store i64 %288, i64* %298, align 8
  %299 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %8, i64 0, i32 1
  store i32 %289, i32* %299, align 8
  call void @_ZN2v88internal5DiyFp8MultiplyERKS1_(%"class.v8::internal::DiyFp"* nonnull %297, %"class.v8::internal::DiyFp"* nonnull dereferenceable(16) %11) #4
  %300 = load i64, i64* %298, align 8
  %301 = load i32, i32* %299, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %296) #4
  %302 = sub nsw i32 0, %301
  %303 = zext i32 %302 to i64
  %304 = shl i64 1, %303
  %305 = lshr i64 %300, %303
  %306 = trunc i64 %305 to i32
  %307 = add i64 %304, -1
  %308 = and i64 %307, %300
  %309 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %309) #4
  %310 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %310) #4
  %311 = add nsw i32 %301, 64
  call fastcc void @_ZN2v88internalL15BiggestPowerTenEjiPjPi(i32 %306, i32 %311, i32* nonnull %9, i32* nonnull %10) #4
  %312 = load i32, i32* %10, align 4
  %313 = add nsw i32 %312, 1
  store i32 0, i32* %5, align 4
  %314 = icmp sgt i32 %312, -1
  br i1 %314, label %315, label %338

315:                                              ; preds = %285
  %316 = load i32, i32* %9, align 4
  br label %317

317:                                              ; preds = %334, %315
  %318 = phi i32 [ %313, %315 ], [ %332, %334 ]
  %319 = phi i32 [ 0, %315 ], [ %329, %334 ]
  %320 = phi i32 [ %316, %315 ], [ %335, %334 ]
  %321 = phi i32 [ %2, %315 ], [ %330, %334 ]
  %322 = phi i32 [ %306, %315 ], [ %331, %334 ]
  %323 = udiv i32 %322, %320
  %324 = trunc i32 %323 to i8
  %325 = add i8 %324, 48
  %326 = sext i32 %319 to i64
  %327 = getelementptr inbounds i8, i8* %3, i64 %326
  store i8 %325, i8* %327, align 1
  %328 = load i32, i32* %5, align 4
  %329 = add nsw i32 %328, 1
  store i32 %329, i32* %5, align 4
  %330 = add nsw i32 %321, -1
  %331 = urem i32 %322, %320
  %332 = add nsw i32 %318, -1
  %333 = icmp eq i32 %330, 0
  br i1 %333, label %349, label %334

334:                                              ; preds = %317
  %335 = udiv i32 %320, 10
  %336 = icmp sgt i32 %332, 0
  br i1 %336, label %317, label %337

337:                                              ; preds = %334
  store i32 %335, i32* %9, align 4
  br label %342

338:                                              ; preds = %285
  %339 = icmp eq i32 %2, 0
  br i1 %339, label %340, label %342

340:                                              ; preds = %338
  %341 = load i32, i32* %9, align 4
  br label %350

342:                                              ; preds = %338, %337
  %343 = phi i32 [ %329, %337 ], [ 0, %338 ]
  %344 = phi i32 [ %332, %337 ], [ %313, %338 ]
  %345 = phi i32 [ %330, %337 ], [ %2, %338 ]
  %346 = icmp sgt i32 %345, 0
  %347 = icmp ugt i64 %308, 1
  %348 = and i1 %347, %346
  br i1 %348, label %396, label %460

349:                                              ; preds = %317
  store i32 %320, i32* %9, align 4
  br label %350

350:                                              ; preds = %349, %340
  %351 = phi i32 [ %328, %349 ], [ -1, %340 ]
  %352 = phi i32 [ %332, %349 ], [ %313, %340 ]
  %353 = phi i32 [ %320, %349 ], [ %341, %340 ]
  %354 = phi i32 [ %331, %349 ], [ %306, %340 ]
  %355 = zext i32 %354 to i64
  %356 = shl i64 %355, %303
  %357 = add i64 %356, %308
  %358 = zext i32 %353 to i64
  %359 = shl i64 %358, %303
  %360 = icmp ult i64 %359, 3
  br i1 %360, label %460, label %361

361:                                              ; preds = %350
  %362 = sub i64 %359, %357
  %363 = icmp ugt i64 %362, %357
  br i1 %363, label %364, label %368

364:                                              ; preds = %361
  %365 = shl i64 %357, 1
  %366 = sub i64 %359, %365
  %367 = icmp ult i64 %366, 2
  br i1 %367, label %368, label %460

368:                                              ; preds = %364, %361
  %369 = icmp ugt i64 %357, 1
  br i1 %369, label %370, label %460

370:                                              ; preds = %368
  %371 = add i64 %357, -1
  %372 = sub i64 %359, %371
  %373 = icmp ugt i64 %372, %371
  br i1 %373, label %460, label %374

374:                                              ; preds = %370
  %375 = sext i32 %351 to i64
  %376 = getelementptr inbounds i8, i8* %3, i64 %375
  %377 = load i8, i8* %376, align 1
  %378 = add i8 %377, 1
  store i8 %378, i8* %376, align 1
  %379 = icmp sgt i32 %351, 0
  br i1 %379, label %380, label %391

380:                                              ; preds = %374, %384
  %381 = phi i8 [ %389, %384 ], [ %378, %374 ]
  %382 = phi i64 [ %386, %384 ], [ %375, %374 ]
  %383 = icmp eq i8 %381, 58
  br i1 %383, label %384, label %391

384:                                              ; preds = %380
  %385 = getelementptr inbounds i8, i8* %3, i64 %382
  store i8 48, i8* %385, align 1
  %386 = add nsw i64 %382, -1
  %387 = getelementptr inbounds i8, i8* %3, i64 %386
  %388 = load i8, i8* %387, align 1
  %389 = add i8 %388, 1
  store i8 %389, i8* %387, align 1
  %390 = icmp sgt i64 %386, 0
  br i1 %390, label %380, label %391

391:                                              ; preds = %384, %380, %374
  %392 = load i8, i8* %3, align 1
  %393 = icmp eq i8 %392, 58
  br i1 %393, label %394, label %460

394:                                              ; preds = %391
  store i8 49, i8* %3, align 1
  %395 = add nsw i32 %352, 1
  br label %460

396:                                              ; preds = %342, %396
  %397 = phi i32 [ %410, %396 ], [ %343, %342 ]
  %398 = phi i32 [ %413, %396 ], [ %344, %342 ]
  %399 = phi i32 [ %411, %396 ], [ %345, %342 ]
  %400 = phi i64 [ %403, %396 ], [ 1, %342 ]
  %401 = phi i64 [ %412, %396 ], [ %308, %342 ]
  %402 = mul i64 %401, 10
  %403 = mul i64 %400, 10
  %404 = lshr i64 %402, %303
  %405 = trunc i64 %404 to i8
  %406 = add i8 %405, 48
  %407 = sext i32 %397 to i64
  %408 = getelementptr inbounds i8, i8* %3, i64 %407
  store i8 %406, i8* %408, align 1
  %409 = load i32, i32* %5, align 4
  %410 = add nsw i32 %409, 1
  store i32 %410, i32* %5, align 4
  %411 = add nsw i32 %399, -1
  %412 = and i64 %402, %307
  %413 = add nsw i32 %398, -1
  %414 = icmp sgt i32 %411, 0
  %415 = icmp ugt i64 %412, %403
  %416 = and i1 %414, %415
  br i1 %416, label %396, label %417

417:                                              ; preds = %396
  %418 = icmp eq i32 %411, 0
  br i1 %418, label %419, label %460

419:                                              ; preds = %417
  %420 = icmp ugt i64 %304, %403
  %421 = sub i64 %304, %403
  %422 = icmp ugt i64 %421, %403
  %423 = and i1 %420, %422
  br i1 %423, label %424, label %460

424:                                              ; preds = %419
  %425 = sub i64 %304, %412
  %426 = icmp ugt i64 %425, %412
  br i1 %426, label %427, label %434

427:                                              ; preds = %424
  %428 = shl i64 %412, 1
  %429 = sub i64 %304, %428
  %430 = mul i64 %400, 20
  %431 = icmp uge i64 %429, %430
  %432 = xor i1 %415, true
  %433 = or i1 %431, %432
  br i1 %433, label %460, label %435

434:                                              ; preds = %424
  br i1 %415, label %435, label %460

435:                                              ; preds = %434, %427
  %436 = sub i64 %412, %403
  %437 = sub i64 %304, %436
  %438 = icmp ugt i64 %437, %436
  br i1 %438, label %460, label %439

439:                                              ; preds = %435
  %440 = sext i32 %409 to i64
  %441 = getelementptr inbounds i8, i8* %3, i64 %440
  %442 = load i8, i8* %441, align 1
  %443 = add i8 %442, 1
  store i8 %443, i8* %441, align 1
  %444 = icmp sgt i32 %409, 0
  br i1 %444, label %445, label %456

445:                                              ; preds = %439, %449
  %446 = phi i8 [ %454, %449 ], [ %443, %439 ]
  %447 = phi i64 [ %451, %449 ], [ %440, %439 ]
  %448 = icmp eq i8 %446, 58
  br i1 %448, label %449, label %456

449:                                              ; preds = %445
  %450 = getelementptr inbounds i8, i8* %3, i64 %447
  store i8 48, i8* %450, align 1
  %451 = add nsw i64 %447, -1
  %452 = getelementptr inbounds i8, i8* %3, i64 %451
  %453 = load i8, i8* %452, align 1
  %454 = add i8 %453, 1
  store i8 %454, i8* %452, align 1
  %455 = icmp sgt i64 %451, 0
  br i1 %455, label %445, label %456

456:                                              ; preds = %449, %445, %439
  %457 = load i8, i8* %3, align 1
  %458 = icmp eq i8 %457, 58
  br i1 %458, label %459, label %460

459:                                              ; preds = %456
  store i8 49, i8* %3, align 1
  br label %460

460:                                              ; preds = %342, %350, %364, %368, %370, %391, %394, %417, %419, %427, %434, %435, %456, %459
  %461 = phi i32 [ %352, %350 ], [ %352, %370 ], [ %395, %394 ], [ %352, %391 ], [ %352, %368 ], [ %352, %364 ], [ %413, %427 ], [ %413, %435 ], [ %398, %459 ], [ %413, %456 ], [ %413, %434 ], [ %413, %419 ], [ %413, %417 ], [ %344, %342 ]
  %462 = phi i1 [ false, %350 ], [ false, %370 ], [ true, %394 ], [ true, %391 ], [ false, %368 ], [ true, %364 ], [ %431, %427 ], [ false, %435 ], [ true, %459 ], [ true, %456 ], [ false, %434 ], [ false, %419 ], [ false, %417 ], [ false, %342 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %310) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %309) #4
  %463 = load i32, i32* %12, align 4
  %464 = sub i32 %461, %463
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %293) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %290) #4
  br i1 %462, label %471, label %478

465:                                              ; preds = %7
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #5
  unreachable

466:                                              ; preds = %258, %255, %251, %248, %191, %189, %183, %180
  %467 = phi i32 [ %142, %189 ], [ %142, %191 ], [ %142, %180 ], [ %142, %183 ], [ %214, %255 ], [ %214, %258 ], [ %214, %248 ], [ %214, %251 ]
  %468 = phi i1 [ false, %189 ], [ %193, %191 ], [ false, %180 ], [ false, %183 ], [ false, %255 ], [ %261, %258 ], [ false, %248 ], [ false, %251 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %118) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %117) #4
  %469 = load i32, i32* %19, align 4
  %470 = sub i32 %467, %469
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %88) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %85) #4
  br i1 %468, label %471, label %478

471:                                              ; preds = %460, %466
  %472 = phi i32 [ %464, %460 ], [ %470, %466 ]
  %473 = load i32, i32* %5, align 4
  %474 = add nsw i32 %473, %472
  store i32 %474, i32* %6, align 4
  %475 = load i32, i32* %5, align 4
  %476 = sext i32 %475 to i64
  %477 = getelementptr inbounds i8, i8* %3, i64 %476
  store i8 0, i8* %477, align 1
  br label %478

478:                                              ; preds = %460, %471, %466
  %479 = phi i1 [ false, %460 ], [ true, %471 ], [ false, %466 ]
  ret i1 %479
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN2v88internal16PowersOfTenCache36GetCachedPowerForBinaryExponentRangeEiiPNS0_5DiyFpEPi(i32, i32, %"class.v8::internal::DiyFp"*, i32*) local_unnamed_addr #3

declare void @_ZN2v88internal5DiyFp8MultiplyERKS1_(%"class.v8::internal::DiyFp"*, %"class.v8::internal::DiyFp"* dereferenceable(16)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2v88internalL15BiggestPowerTenEjiPjPi(i32, i32, i32* nocapture, i32* nocapture) unnamed_addr #0 {
  switch i32 %1, label %26 [
    i32 32, label %5
    i32 31, label %5
    i32 30, label %5
    i32 29, label %7
    i32 28, label %7
    i32 27, label %7
    i32 26, label %9
    i32 25, label %9
    i32 24, label %9
    i32 23, label %11
    i32 22, label %11
    i32 21, label %11
    i32 20, label %11
    i32 19, label %13
    i32 18, label %13
    i32 17, label %13
    i32 16, label %15
    i32 15, label %15
    i32 14, label %15
    i32 13, label %17
    i32 12, label %17
    i32 11, label %17
    i32 10, label %17
    i32 9, label %19
    i32 8, label %19
    i32 7, label %19
    i32 6, label %21
    i32 5, label %21
    i32 4, label %21
    i32 3, label %23
    i32 2, label %23
    i32 1, label %23
    i32 0, label %25
  ]

5:                                                ; preds = %4, %4, %4
  %6 = icmp ugt i32 %0, 999999999
  br i1 %6, label %27, label %7

7:                                                ; preds = %5, %4, %4, %4
  %8 = icmp ugt i32 %0, 99999999
  br i1 %8, label %27, label %9

9:                                                ; preds = %7, %4, %4, %4
  %10 = icmp ugt i32 %0, 9999999
  br i1 %10, label %27, label %11

11:                                               ; preds = %9, %4, %4, %4, %4
  %12 = icmp ugt i32 %0, 999999
  br i1 %12, label %27, label %13

13:                                               ; preds = %11, %4, %4, %4
  %14 = icmp ugt i32 %0, 99999
  br i1 %14, label %27, label %15

15:                                               ; preds = %13, %4, %4, %4
  %16 = icmp ugt i32 %0, 9999
  br i1 %16, label %27, label %17

17:                                               ; preds = %15, %4, %4, %4, %4
  %18 = icmp ugt i32 %0, 999
  br i1 %18, label %27, label %19

19:                                               ; preds = %17, %4, %4, %4
  %20 = icmp ugt i32 %0, 99
  br i1 %20, label %27, label %21

21:                                               ; preds = %19, %4, %4, %4
  %22 = icmp ugt i32 %0, 9
  br i1 %22, label %27, label %23

23:                                               ; preds = %21, %4, %4, %4
  %24 = icmp eq i32 %0, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %23, %4
  br label %27

26:                                               ; preds = %4
  store i32 0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #5
  unreachable

27:                                               ; preds = %23, %21, %19, %17, %15, %13, %11, %9, %7, %5, %25
  %28 = phi i32 [ 0, %25 ], [ 1000000000, %5 ], [ 100000000, %7 ], [ 10000000, %9 ], [ 1000000, %11 ], [ 100000, %13 ], [ 10000, %15 ], [ 1000, %17 ], [ 100, %19 ], [ 10, %21 ], [ 1, %23 ]
  %29 = phi i32 [ -1, %25 ], [ 9, %5 ], [ 8, %7 ], [ 7, %9 ], [ 6, %11 ], [ 5, %13 ], [ 4, %15 ], [ 3, %17 ], [ 2, %19 ], [ 1, %21 ], [ 0, %23 ]
  store i32 %28, i32* %2, align 4
  store i32 %29, i32* %3, align 4
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
