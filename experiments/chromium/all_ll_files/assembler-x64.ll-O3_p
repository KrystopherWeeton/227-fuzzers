; ModuleID = '../../v8/src/codegen/x64/assembler-x64.cc'
source_filename = "../../v8/src/codegen/x64/assembler-x64.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::Operand" = type { %"struct.v8::internal::Operand::Data" }
%"struct.v8::internal::Operand::Data" = type { i8, [9 x i8], i8, i8 }
%"class.v8::internal::Assembler" = type { %"class.v8::internal::AssemblerBase", %"class.v8::internal::RelocInfoWriter", %"class.std::__1::deque", i32, %"class.std::__1::deque", %"class.std::__1::map", %"class.v8::internal::ConstPool" }
%"class.v8::internal::AssemblerBase" = type { i32 (...)**, %"class.std::__1::unique_ptr", i8*, %"class.std::__1::forward_list", i8*, %"class.v8::internal::CodeCommentsWriter", %"class.std::__1::vector.14", %"class.std::__1::vector.21", %"class.std::__1::unordered_map", %"struct.v8::internal::AssemblerOptions", i64, i8, i8, %"class.v8::internal::JumpOptimizationInfo"* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::AssemblerBuffer"* }
%"class.std::__1::forward_list" = type { %"class.std::__1::__forward_list_base" }
%"class.std::__1::__forward_list_base" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::__forward_begin_node" }
%"struct.std::__1::__forward_begin_node" = type { %"struct.std::__1::__forward_list_node"* }
%"struct.std::__1::__forward_list_node" = type { %"struct.std::__1::__forward_begin_node", %"class.v8::internal::HeapObjectRequest" }
%"class.v8::internal::HeapObjectRequest" = type <{ i32, [4 x i8], %union.anon.81, i32, [4 x i8] }>
%union.anon.81 = type { double }
%"class.v8::internal::CodeCommentsWriter" = type { i32, %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.v8::internal::CodeCommentEntry"*, %"struct.v8::internal::CodeCommentEntry"*, %"class.std::__1::__compressed_pair.9" }
%"struct.v8::internal::CodeCommentEntry" = type { i32, %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"struct.v8::internal::CodeCommentEntry"* }
%"class.std::__1::vector.14" = type { %"class.std::__1::__vector_base.15" }
%"class.std::__1::__vector_base.15" = type { %"class.v8::internal::Handle"*, %"class.v8::internal::Handle"*, %"class.std::__1::__compressed_pair.16" }
%"class.v8::internal::Handle" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.v8::internal::Handle"* }
%"class.std::__1::vector.21" = type { %"class.std::__1::__vector_base.22" }
%"class.std::__1::__vector_base.22" = type { %"class.v8::internal::Handle.23"*, %"class.v8::internal::Handle.23"*, %"class.std::__1::__compressed_pair.24" }
%"class.v8::internal::Handle.23" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.v8::internal::Handle.23"* }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.29", %"class.std::__1::__compressed_pair.38", %"class.std::__1::__compressed_pair.43", %"class.std::__1::__compressed_pair.45", [4 x i8] }>
%"class.std::__1::unique_ptr.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31", %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { i64 }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { float }
%"struct.v8::internal::AssemblerOptions" = type <{ i8, i8, i8, i8, i8, i8, i8, i8, i64, i8, i8, i8, [5 x i8] }>
%"class.v8::internal::JumpOptimizationInfo" = type { i32, i8, %"class.std::__1::vector.48", i64 }
%"class.std::__1::vector.48" = type { %"class.std::__1::__vector_base.49" }
%"class.std::__1::__vector_base.49" = type { i32*, i32*, %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { i32* }
%"class.v8::internal::RelocInfoWriter" = type { i8*, i8* }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.60" }
%"struct.std::__1::__split_buffer" = type { i32**, i32**, i32**, %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { i32** }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.64", %"class.std::__1::__compressed_pair.69" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.v8::internal::ConstPool" = type { %"class.v8::internal::Assembler"*, %"class.std::__1::multimap" }
%"class.std::__1::multimap" = type { %"class.std::__1::__tree.71" }
%"class.std::__1::__tree.71" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.72", %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.v8::internal::AssemblerBuffer" = type { i32 (...)** }
%"class.v8::base::CPU" = type <{ [13 x i8], [3 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8] }>
%"class.v8::internal::RelocInfo" = type { i64, i8, i64, %"class.v8::internal::Code", i64 }
%"class.v8::internal::Code" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::HeapObject" = type { %"class.v8::internal::Object" }
%"class.v8::internal::Object" = type { %"class.v8::internal::TaggedImpl" }
%"class.v8::internal::TaggedImpl" = type { i64 }
%"class.v8::internal::Isolate" = type { %"class.v8::internal::IsolateData", %"class.std::__1::unique_ptr.85", %"class.v8::internal::Heap", %"class.v8::internal::ReadOnlyHeap"*, %"class.std::__1::shared_ptr.743", %"class.std::__1::unique_ptr.764", i32, %"class.v8::internal::Isolate::EntryStackItem"*, i32, %"class.v8::internal::StringStream"*, [13 x i64], %"class.v8::internal::Bootstrapper"*, %"class.v8::internal::RuntimeProfiler"*, %"class.v8::internal::CompilationCache"*, %"class.std::__1::shared_ptr.774", %"class.v8::base::RecursiveMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::internal::Logger"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::Deoptimizer"*, i8, %"class.v8::internal::MaterializedObjectStore"*, i8, i32, i32, %"class.v8::internal::DescriptorLookupCache"*, %"struct.v8::internal::HandleScopeData", %"class.v8::internal::HandleScopeImplementer"*, %"class.v8::internal::UnicodeCache"*, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::InnerPointerToCodeCache"*, %"class.v8::internal::GlobalHandles"*, %"class.v8::internal::EternalHandles"*, %"class.v8::internal::ThreadManager"*, %"class.v8::bigint::Processor"*, %"class.v8::internal::RuntimeState", %"class.v8::internal::Builtins", %"class.v8::internal::SetupIsolateDelegate"*, %"class.v8::internal::RegExpStack"*, %"class.std::__1::vector.967", %"class.v8::internal::DateCache"*, %"class.v8::base::RandomNumberGenerator"*, %"class.v8::base::RandomNumberGenerator"*, %"struct.std::__1::atomic.977", {}*, i8*, void (i32, %"class.v8::Promise"*, %"class.v8::Value"*)*, {}*, {}*, %"struct.std::__1::atomic.987", {}*, %"class.v8::base::Mutex", double, %"class.std::__1::basic_string", %"class.std::__1::unordered_map.992", %"struct.std::__1::atomic.250", i8, i8, i8, i8, i8, i8, double, %"class.v8::internal::Debug"*, %"class.v8::internal::HeapProfiler"*, %"class.std::__1::unique_ptr.1067", %"class.v8::internal::AstStringConstants"*, %"class.v8::internal::interpreter::Interpreter"*, %"class.v8::internal::compiler::PerIsolateCompilerCache"*, %"class.v8::internal::Zone"*, %"class.v8::internal::CompilerDispatcher"*, %"class.std::__1::queue", void (i8*, i8*)*, void (i8*, i1)*, void (i8*, i32)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*, i1)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::Context"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, %"class.v8::String"* (%"class.v8::Isolate"*, i8*)*, i1 (%"class.v8::Context"*)*, i1 (%"class.v8::Context"*)*, %"class.v8::internal::Relocatable"*, %"class.std::__1::vector.21"*, %"class.v8::internal::Object", i64*, %"class.v8::internal::AddressToIndexHashMap"*, %"class.v8::internal::HeapObjectToIndexHashMap"*, %"class.v8::internal::MicrotaskQueue"*, %"class.v8::internal::CompilationStatistics"*, %"class.v8::internal::CodeTracer"*, i32, void (%"class.v8::PromiseRejectMessage"*)*, %"class.v8::StartupData"*, i32, i32, i32, i64, i8, i8, i32, i8, i32, %"class.v8_inspector::V8Inspector"*, i8, i8, i8, i32, i32, %"class.v8::internal::compiler::NodeObserver"*, i8, [128 x i32], [256 x i32], [251 x i32], [251 x i32], %"class.v8::internal::OptimizingCompileDispatcher"*, %"class.std::__1::unique_ptr.1113", i32, i8, i8, i32, i32, %"class.std::__1::vector.1119", %"class.std::__1::vector.1119", void (%"class.v8::Isolate"*, i32)*, %"class.std::__1::shared_ptr.1126", i64, %"class.std::__1::unordered_map.1127", i64, %"struct.v8::metrics::LongTaskStats", %"class.std::__1::vector.639", %"class.v8::internal::BuiltinsConstantsTableBuilder"*, i8*, i32, i8*, i32, %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::shared_ptr.258", %"class.v8::internal::FutexWaitListNode", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::debug::ConsoleDelegate"*, %"class.v8::debug::AsyncEventDelegate"*, i32, i32, %"class.std::__1::unique_ptr.1183", i1 (%"class.v8::Isolate"*)*, i8, %"class.v8::base::Mutex", %"struct.v8::internal::ManagedPtrDestructor"*, i64, i64, %"class.v8::internal::wasm::WasmEngine"*, %"class.std::__1::unique_ptr.1221", %"class.v8::internal::EmbeddedFileWriterInterface"*, %"class.v8::Context::BackupIncumbentScope"*, {}*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate::ThreadDataTable", i8, %"class.v8::internal::Isolate"*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"struct.std::__1::atomic.1255", %"class.std::__1::vector.1259", %"class.std::__1::vector.1259", void (i32, %"class.std::__1::basic_string"*)* }
%"class.v8::internal::IsolateData" = type { [4 x i8*], i64, i64, i64, i64, i64, %"class.v8::internal::StackGuard", %"class.v8::internal::RootsTable", %"class.v8::internal::ExternalReferenceTable", %"class.v8::internal::ThreadLocalTop", [1711 x i64], [1711 x i64], i8, [15 x i8] }
%"class.v8::internal::StackGuard" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::StackGuard::ThreadLocal" }
%"class.v8::internal::StackGuard::ThreadLocal" = type { i64, i64, i64, i64, %"class.v8::internal::InterruptsScope"*, i64 }
%"class.v8::internal::InterruptsScope" = type { i32 (...)**, %"class.v8::internal::StackGuard"*, i64, i64, i32, %"class.v8::internal::InterruptsScope"* }
%"class.v8::internal::RootsTable" = type { [669 x i64] }
%"class.v8::internal::ExternalReferenceTable" = type { [1042 x i64], i32, i32 }
%"class.v8::internal::ThreadLocalTop" = type { %"class.v8::TryCatch"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Context", %"struct.std::__1::atomic", %"class.v8::internal::Object", %"class.v8::internal::Context", i64, i64, i64, i64, i64, %"class.v8::internal::Object", i8, i8, %"class.v8::internal::Object", i64, i64, i64, %"class.v8::internal::PromiseOnStack"*, %"class.v8::internal::Simulator"*, i64, %"class.v8::internal::ExternalCallbackScope"*, i32, void (%"class.v8::Object"*, i32, %"class.v8::Value"*)*, i64 }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { %"class.v8::internal::ThreadId" }
%"class.v8::internal::ThreadId" = type { i32 }
%"class.v8::internal::Context" = type { %"class.v8::internal::TorqueGeneratedContext" }
%"class.v8::internal::TorqueGeneratedContext" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::PromiseOnStack" = type { %"class.v8::internal::Handle.83", %"class.v8::internal::PromiseOnStack"* }
%"class.v8::internal::Handle.83" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::Simulator" = type opaque
%"class.v8::internal::ExternalCallbackScope" = type opaque
%"class.v8::Object" = type { i8 }
%"class.v8::Value" = type { i8 }
%"class.std::__1::unique_ptr.85" = type { %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %"class.v8::internal::IsolateAllocator"* }
%"class.v8::internal::IsolateAllocator" = type { i8*, %"class.v8::PageAllocator"* }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::internal::Heap" = type { %"class.std::__1::unordered_map.91", %"struct.std::__1::atomic.116", %"class.v8::internal::Heap::ExternalMemoryAccounting", %"class.v8::internal::Isolate"*, i64, i64, i64, i64, %"struct.std::__1::atomic.116", i64, i64, i64, i64, i64, i8, i64, i64, %"struct.std::__1::atomic.116", i64, i64, %"struct.std::__1::atomic.116", %"struct.std::__1::atomic.126", %"class.std::__1::vector.130", i32, %"class.v8::internal::NewSpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::CodeSpace"*, %"class.v8::internal::MapSpace"*, %"class.v8::internal::OldLargeObjectSpace"*, %"class.v8::internal::CodeLargeObjectSpace"*, %"class.v8::internal::NewLargeObjectSpace"*, %"class.v8::internal::ReadOnlySpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::MapSpace"*, %"class.std::__1::unique_ptr.244", %"class.std::__1::unique_ptr.244", [8 x %"class.v8::internal::Space"*], %"class.v8::internal::LocalHeap"*, %"class.v8::internal::ArrayBufferExtension"*, %"class.v8::internal::ArrayBufferExtension"*, i8, i64, %"struct.std::__1::atomic.259", i32, i32, i32, i32, %"class.v8::internal::AllocationObserver"*, %"class.v8::internal::StressScavengeObserver"*, double, i32, i32, i32, i64, i32, [128 x i64], %"struct.std::__1::atomic.116", i64, i8, %"struct.std::__1::atomic.116", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.std::__1::vector.263", %"class.std::__1::vector.263", i64 ()*, [113 x i32], i64, double, double, i64, i64, double, i32, i32, i32, i32, double, double, double, %"class.std::__1::unique_ptr.270", %"class.std::__1::unique_ptr.276", %"class.v8::internal::MinorMarkCompactCollector"*, %"class.std::__1::unique_ptr.406", %"class.std::__1::unique_ptr.412", %"class.std::__1::unique_ptr.418", %"class.std::__1::unique_ptr.457", %"class.std::__1::unique_ptr.496", %"class.std::__1::unique_ptr.526", %"class.std::__1::unique_ptr.532", %"class.std::__1::unique_ptr.542", %"class.std::__1::unique_ptr.548", %"class.std::__1::unique_ptr.548", %"class.std::__1::unique_ptr.554", %"class.std::__1::unique_ptr.560", %"class.std::__1::unique_ptr.560", %"class.std::__1::unique_ptr.566", %"class.std::__1::unique_ptr.572", %"class.std::__1::shared_ptr.578", %"class.v8::CppHeap"*, %"class.v8::EmbedderRootsHandler"*, %"class.v8::internal::StrongRootsEntry"*, %"class.v8::base::Mutex", i8, i64, i64, i64, i64, %"class.std::__1::unordered_map.601", %"class.std::__1::unique_ptr.627", [512 x i8], i8, i8, i64, i8, i32, i32, %"class.std::__1::unique_ptr.633", i8, %"class.v8::internal::Heap::ExternalStringTable", %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.646", i32, i8, i8, i8, i8, i8, %"class.v8::internal::HeapObject", %"class.v8::base::SharedMutex", %"class.v8::base::Mutex", %"class.std::__1::unordered_set.428", i8, [7 x i8], %"class.std::__1::unordered_map.652", %"class.std::__1::unordered_map.678", %"class.std::__1::unordered_map.652", %"class.std::__1::unordered_map.702", %"class.std::__1::vector.730", i8, %"class.std::__1::unique_ptr.737", i32, i32 }
%"class.std::__1::unordered_map.91" = type { %"class.std::__1::__hash_table.92" }
%"class.std::__1::__hash_table.92" = type <{ %"class.std::__1::unique_ptr.93", %"class.std::__1::__compressed_pair.103", %"class.std::__1::__compressed_pair.108", %"class.std::__1::__compressed_pair.111", [4 x i8] }>
%"class.std::__1::unique_ptr.93" = type { %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95", %"struct.std::__1::__compressed_pair_elem.97" }
%"struct.std::__1::__compressed_pair_elem.95" = type { %"struct.std::__1::__hash_node_base.96"** }
%"struct.std::__1::__hash_node_base.96" = type { %"struct.std::__1::__hash_node_base.96"* }
%"struct.std::__1::__compressed_pair_elem.97" = type { %"class.std::__1::__bucket_list_deallocator.98" }
%"class.std::__1::__bucket_list_deallocator.98" = type { %"class.std::__1::__compressed_pair.99" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.104" = type { %"struct.std::__1::__hash_node_base.96" }
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.111" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.v8::internal::Heap::ExternalMemoryAccounting" = type { %"struct.std::__1::atomic.121", %"struct.std::__1::atomic.121", %"struct.std::__1::atomic.121" }
%"struct.std::__1::atomic.121" = type { %"struct.std::__1::__atomic_base.122" }
%"struct.std::__1::__atomic_base.122" = type { %"struct.std::__1::__atomic_base.123" }
%"struct.std::__1::__atomic_base.123" = type { %"struct.std::__1::__cxx_atomic_impl.124" }
%"struct.std::__1::__cxx_atomic_impl.124" = type { %"struct.std::__1::__cxx_atomic_base_impl.125" }
%"struct.std::__1::__cxx_atomic_base_impl.125" = type { i64 }
%"struct.std::__1::atomic.126" = type { %"struct.std::__1::__atomic_base.127" }
%"struct.std::__1::__atomic_base.127" = type { %"struct.std::__1::__cxx_atomic_impl.128" }
%"struct.std::__1::__cxx_atomic_impl.128" = type { %"struct.std::__1::__cxx_atomic_base_impl.129" }
%"struct.std::__1::__cxx_atomic_base_impl.129" = type { i32 }
%"class.std::__1::vector.130" = type { %"class.std::__1::__vector_base.131" }
%"class.std::__1::__vector_base.131" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.132" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.132" = type { %"struct.std::__1::__compressed_pair_elem.133" }
%"struct.std::__1::__compressed_pair_elem.133" = type { %"struct.std::__1::pair"* }
%"class.v8::internal::NewSpace" = type { %"class.v8::internal::SpaceWithLinearArea", %"class.v8::base::Mutex", %"struct.std::__1::atomic.116", %"struct.std::__1::atomic.116", %"class.v8::internal::SemiSpace", %"class.v8::internal::SemiSpace", %"class.v8::internal::VirtualMemory", %"class.std::__1::vector.202" }
%"class.v8::internal::SpaceWithLinearArea" = type { %"class.v8::internal::Space", %"class.v8::internal::LinearAllocationArea", [3 x i64] }
%"class.v8::internal::Space" = type { %"class.v8::internal::BaseSpace", %"class.v8::internal::AllocationCounter", %"class.v8::internal::heap::List", %"struct.std::__1::atomic.116"*, %"class.std::__1::unique_ptr.196" }
%"class.v8::internal::BaseSpace" = type { i32 (...)**, %"class.v8::internal::Heap"*, i32, %"struct.std::__1::atomic.116", i64 }
%"class.v8::internal::AllocationCounter" = type <{ %"class.std::__1::vector.137", %"class.std::__1::vector.137", %"class.std::__1::unordered_set", i8, [7 x i8], i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector.137" = type { %"class.std::__1::__vector_base.138" }
%"class.std::__1::__vector_base.138" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"class.std::__1::__compressed_pair.139" }
%"struct.v8::internal::AllocationCounter::AllocationObserverCounter" = type { %"class.v8::internal::AllocationObserver"*, i64, i64 }
%"class.std::__1::__compressed_pair.139" = type { %"struct.std::__1::__compressed_pair_elem.140" }
%"struct.std::__1::__compressed_pair_elem.140" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"* }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.144" }
%"class.std::__1::__hash_table.144" = type <{ %"class.std::__1::unique_ptr.145", %"class.std::__1::__compressed_pair.155", %"class.std::__1::__compressed_pair.160", %"class.std::__1::__compressed_pair.162", [4 x i8] }>
%"class.std::__1::unique_ptr.145" = type { %"class.std::__1::__compressed_pair.146" }
%"class.std::__1::__compressed_pair.146" = type { %"struct.std::__1::__compressed_pair_elem.147", %"struct.std::__1::__compressed_pair_elem.149" }
%"struct.std::__1::__compressed_pair_elem.147" = type { %"struct.std::__1::__hash_node_base.148"** }
%"struct.std::__1::__hash_node_base.148" = type { %"struct.std::__1::__hash_node_base.148"* }
%"struct.std::__1::__compressed_pair_elem.149" = type { %"class.std::__1::__bucket_list_deallocator.150" }
%"class.std::__1::__bucket_list_deallocator.150" = type { %"class.std::__1::__compressed_pair.151" }
%"class.std::__1::__compressed_pair.151" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.155" = type { %"struct.std::__1::__compressed_pair_elem.156" }
%"struct.std::__1::__compressed_pair_elem.156" = type { %"struct.std::__1::__hash_node_base.148" }
%"class.std::__1::__compressed_pair.160" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.162" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.v8::internal::heap::List" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::MemoryChunk" = type { %"class.v8::internal::BasicMemoryChunk", [2 x %"class.v8::internal::SlotSet"*], %"struct.std::__1::atomic.116", %"struct.std::__1::atomic.121", %"class.v8::internal::SlotSet"*, [2 x %"class.v8::internal::TypedSlotSet"*], [2 x %"class.std::__1::set"*], %"class.v8::base::Mutex"*, %"struct.std::__1::atomic.185", %"class.v8::base::Mutex"*, i64, [2 x %"struct.std::__1::atomic.116"], %"class.v8::internal::heap::ListNode", %"class.v8::internal::FreeListCategory"**, %"struct.std::__1::atomic.121", %"class.v8::internal::Bitmap"*, %"class.v8::internal::CodeObjectRegistry"*, %"class.v8::internal::PossiblyEmptyBuckets" }
%"class.v8::internal::BasicMemoryChunk" = type { i64, i64, %"class.v8::internal::Heap"*, i64, i64, i64, i64, %"struct.std::__1::atomic.121", %"struct.std::__1::atomic.167", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.167" = type { %"struct.std::__1::__atomic_base.168" }
%"struct.std::__1::__atomic_base.168" = type { %"struct.std::__1::__cxx_atomic_impl.169" }
%"struct.std::__1::__cxx_atomic_impl.169" = type { %"struct.std::__1::__cxx_atomic_base_impl.170" }
%"struct.std::__1::__cxx_atomic_base_impl.170" = type { %"class.v8::internal::BaseSpace"* }
%"class.v8::internal::SlotSet" = type { i8 }
%"class.v8::internal::TypedSlotSet" = type { %"class.v8::internal::TypedSlots", i64 }
%"class.v8::internal::TypedSlots" = type { i32 (...)**, %"struct.v8::internal::TypedSlots::Chunk"*, %"struct.v8::internal::TypedSlots::Chunk"* }
%"struct.v8::internal::TypedSlots::Chunk" = type { %"struct.v8::internal::TypedSlots::Chunk"*, %"class.std::__1::vector.171" }
%"class.std::__1::vector.171" = type { %"class.std::__1::__vector_base.172" }
%"class.std::__1::__vector_base.172" = type { %"struct.v8::internal::TypedSlots::TypedSlot"*, %"struct.v8::internal::TypedSlots::TypedSlot"*, %"class.std::__1::__compressed_pair.173" }
%"struct.v8::internal::TypedSlots::TypedSlot" = type { i32 }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"struct.v8::internal::TypedSlots::TypedSlot"* }
%"class.std::__1::set" = type { %"class.std::__1::__tree.178" }
%"class.std::__1::__tree.178" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.179", %"class.std::__1::__compressed_pair.183" }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"class.std::__1::__compressed_pair.183" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::atomic.185" = type { %"struct.std::__1::__atomic_base.186" }
%"struct.std::__1::__atomic_base.186" = type { %"struct.std::__1::__cxx_atomic_impl.187" }
%"struct.std::__1::__cxx_atomic_impl.187" = type { %"struct.std::__1::__cxx_atomic_base_impl.188" }
%"struct.std::__1::__cxx_atomic_base_impl.188" = type { i64 }
%"class.v8::internal::heap::ListNode" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::FreeListCategory" = type { i32, i32, %"class.v8::internal::FreeSpace", %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"* }
%"class.v8::internal::FreeSpace" = type { %"class.v8::internal::TorqueGeneratedFreeSpace" }
%"class.v8::internal::TorqueGeneratedFreeSpace" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Bitmap" = type { i8 }
%"class.v8::internal::CodeObjectRegistry" = type <{ %"class.std::__1::vector.189", i8, [7 x i8] }>
%"class.std::__1::vector.189" = type { %"class.std::__1::__vector_base.190" }
%"class.std::__1::__vector_base.190" = type { i64*, i64*, %"class.std::__1::__compressed_pair.191" }
%"class.std::__1::__compressed_pair.191" = type { %"struct.std::__1::__compressed_pair_elem.192" }
%"struct.std::__1::__compressed_pair_elem.192" = type { i64* }
%"class.v8::internal::PossiblyEmptyBuckets" = type { i64 }
%"class.std::__1::unique_ptr.196" = type { %"class.std::__1::__compressed_pair.197" }
%"class.std::__1::__compressed_pair.197" = type { %"struct.std::__1::__compressed_pair_elem.198" }
%"struct.std::__1::__compressed_pair_elem.198" = type { %"class.v8::internal::FreeList"* }
%"class.v8::internal::FreeList" = type { i32 (...)**, i32, i32, i64, %"struct.std::__1::atomic.116", %"class.v8::internal::FreeListCategory"**, i64 }
%"class.v8::internal::LinearAllocationArea" = type { i64, i64, i64 }
%"class.v8::internal::SemiSpace" = type { %"class.v8::internal::Space", i64, i64, i64, i64, i64, i32, %"class.v8::internal::Page"* }
%"class.v8::internal::Page" = type { %"class.v8::internal::MemoryChunk" }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::vector.202" = type { %"class.std::__1::__vector_base.203" }
%"class.std::__1::__vector_base.203" = type { %"struct.std::__1::pair.204"*, %"struct.std::__1::pair.204"*, %"class.std::__1::__compressed_pair.205" }
%"struct.std::__1::pair.204" = type { i32, i64 }
%"class.std::__1::__compressed_pair.205" = type { %"struct.std::__1::__compressed_pair_elem.206" }
%"struct.std::__1::__compressed_pair_elem.206" = type { %"struct.std::__1::pair.204"* }
%"class.v8::internal::CodeSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::PagedSpace" = type { %"class.v8::internal::SpaceWithLinearArea", i32, i32, i64, %"class.v8::internal::AllocationStats", %"class.v8::base::Mutex", i64, i64 }
%"class.v8::internal::AllocationStats" = type { %"struct.std::__1::atomic.116", i64, %"struct.std::__1::atomic.116" }
%"class.v8::internal::OldLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace" }
%"class.v8::internal::LargeObjectSpace" = type { %"class.v8::internal::Space", %"struct.std::__1::atomic.116", i32, %"struct.std::__1::atomic.116", %"class.v8::base::Mutex", %"struct.std::__1::atomic.116" }
%"class.v8::internal::CodeLargeObjectSpace" = type { %"class.v8::internal::OldLargeObjectSpace", %"class.std::__1::unordered_map.210" }
%"class.std::__1::unordered_map.210" = type { %"class.std::__1::__hash_table.211" }
%"class.std::__1::__hash_table.211" = type <{ %"class.std::__1::unique_ptr.212", %"class.std::__1::__compressed_pair.222", %"class.std::__1::__compressed_pair.227", %"class.std::__1::__compressed_pair.232", [4 x i8] }>
%"class.std::__1::unique_ptr.212" = type { %"class.std::__1::__compressed_pair.213" }
%"class.std::__1::__compressed_pair.213" = type { %"struct.std::__1::__compressed_pair_elem.214", %"struct.std::__1::__compressed_pair_elem.216" }
%"struct.std::__1::__compressed_pair_elem.214" = type { %"struct.std::__1::__hash_node_base.215"** }
%"struct.std::__1::__hash_node_base.215" = type { %"struct.std::__1::__hash_node_base.215"* }
%"struct.std::__1::__compressed_pair_elem.216" = type { %"class.std::__1::__bucket_list_deallocator.217" }
%"class.std::__1::__bucket_list_deallocator.217" = type { %"class.std::__1::__compressed_pair.218" }
%"class.std::__1::__compressed_pair.218" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.222" = type { %"struct.std::__1::__compressed_pair_elem.223" }
%"struct.std::__1::__compressed_pair_elem.223" = type { %"struct.std::__1::__hash_node_base.215" }
%"class.std::__1::__compressed_pair.227" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.232" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.v8::internal::NewLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace", i64 }
%"class.v8::internal::ReadOnlySpace" = type { %"class.v8::internal::BaseSpace", i8, %"class.v8::internal::AllocationStats", %"class.std::__1::vector.237", i64, i64, i8, i64, i64 }
%"class.std::__1::vector.237" = type { %"class.std::__1::__vector_base.238" }
%"class.std::__1::__vector_base.238" = type { %"class.v8::internal::ReadOnlyPage"**, %"class.v8::internal::ReadOnlyPage"**, %"class.std::__1::__compressed_pair.239" }
%"class.v8::internal::ReadOnlyPage" = type { %"class.v8::internal::BasicMemoryChunk" }
%"class.std::__1::__compressed_pair.239" = type { %"struct.std::__1::__compressed_pair_elem.240" }
%"struct.std::__1::__compressed_pair_elem.240" = type { %"class.v8::internal::ReadOnlyPage"** }
%"class.v8::internal::OldSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::MapSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.std::__1::unique_ptr.244" = type { %"class.std::__1::__compressed_pair.245" }
%"class.std::__1::__compressed_pair.245" = type { %"struct.std::__1::__compressed_pair_elem.246" }
%"struct.std::__1::__compressed_pair_elem.246" = type { %"class.v8::internal::ConcurrentAllocator"* }
%"class.v8::internal::ConcurrentAllocator" = type { %"class.v8::internal::LocalHeap"*, %"class.v8::internal::PagedSpace"*, %"class.v8::internal::LocalAllocationBuffer" }
%"class.v8::internal::LocalAllocationBuffer" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::LinearAllocationArea" }
%"class.v8::internal::LocalHeap" = type { %"class.v8::internal::Heap"*, i8, %"struct.std::__1::atomic.1188", i8, i8, %"class.v8::internal::LocalHeap"*, %"class.v8::internal::LocalHeap"*, %"class.std::__1::unique_ptr.1192", %"class.std::__1::unique_ptr.1198", %"class.std::__1::unique_ptr.572", %"class.std::__1::vector.1204", %"class.v8::internal::ConcurrentAllocator" }
%"struct.std::__1::atomic.1188" = type { %"struct.std::__1::__atomic_base.1189" }
%"struct.std::__1::__atomic_base.1189" = type { %"struct.std::__1::__cxx_atomic_impl.1190" }
%"struct.std::__1::__cxx_atomic_impl.1190" = type { %"struct.std::__1::__cxx_atomic_base_impl.1191" }
%"struct.std::__1::__cxx_atomic_base_impl.1191" = type { i32 }
%"class.std::__1::unique_ptr.1192" = type { %"class.std::__1::__compressed_pair.1193" }
%"class.std::__1::__compressed_pair.1193" = type { %"struct.std::__1::__compressed_pair_elem.1194" }
%"struct.std::__1::__compressed_pair_elem.1194" = type { %"class.v8::internal::LocalHandles"* }
%"class.v8::internal::LocalHandles" = type { %"struct.v8::internal::HandleScopeData", %"class.std::__1::vector.960" }
%"class.std::__1::vector.960" = type { %"class.std::__1::__vector_base.961" }
%"class.std::__1::__vector_base.961" = type { i64**, i64**, %"class.std::__1::__compressed_pair.962" }
%"class.std::__1::__compressed_pair.962" = type { %"struct.std::__1::__compressed_pair_elem.963" }
%"struct.std::__1::__compressed_pair_elem.963" = type { i64** }
%"class.std::__1::unique_ptr.1198" = type { %"class.std::__1::__compressed_pair.1199" }
%"class.std::__1::__compressed_pair.1199" = type { %"struct.std::__1::__compressed_pair_elem.1200" }
%"struct.std::__1::__compressed_pair_elem.1200" = type { %"class.v8::internal::PersistentHandles"* }
%"class.v8::internal::PersistentHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::vector.960", i64*, i64*, %"class.v8::internal::PersistentHandles"*, %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.1204" = type { %"class.std::__1::__vector_base.1205" }
%"class.std::__1::__vector_base.1205" = type { %"struct.std::__1::pair.1206"*, %"struct.std::__1::pair.1206"*, %"class.std::__1::__compressed_pair.1207" }
%"struct.std::__1::pair.1206" = type opaque
%"class.std::__1::__compressed_pair.1207" = type { %"struct.std::__1::__compressed_pair_elem.1208" }
%"struct.std::__1::__compressed_pair_elem.1208" = type { %"struct.std::__1::pair.1206"* }
%"class.v8::internal::ArrayBufferExtension" = type { %"struct.std::__1::atomic.250", %"struct.std::__1::atomic.254", %"class.std::__1::shared_ptr", %"class.v8::internal::ArrayBufferExtension"*, %"struct.std::__1::atomic.116" }
%"struct.std::__1::atomic.254" = type { %"struct.std::__1::__atomic_base.255" }
%"struct.std::__1::__atomic_base.255" = type { %"struct.std::__1::__cxx_atomic_impl.256" }
%"struct.std::__1::__cxx_atomic_impl.256" = type { %"struct.std::__1::__cxx_atomic_base_impl.257" }
%"struct.std::__1::__cxx_atomic_base_impl.257" = type { i8 }
%"class.std::__1::shared_ptr" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::BackingStore" = type <{ i8*, %"struct.std::__1::atomic.116", i64, %"union.v8::internal::BackingStore::TypeSpecificData", i16, [6 x i8] }>
%"union.v8::internal::BackingStore::TypeSpecificData" = type { %"class.std::__1::shared_ptr.258" }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"struct.std::__1::atomic.259" = type { %"struct.std::__1::__atomic_base.260" }
%"struct.std::__1::__atomic_base.260" = type { %"struct.std::__1::__cxx_atomic_impl.261" }
%"struct.std::__1::__cxx_atomic_impl.261" = type { %"struct.std::__1::__cxx_atomic_base_impl.262" }
%"struct.std::__1::__cxx_atomic_base_impl.262" = type { i32 }
%"class.v8::internal::AllocationObserver" = type { i32 (...)**, i64 }
%"class.v8::internal::StressScavengeObserver" = type opaque
%"struct.std::__1::atomic.116" = type { %"struct.std::__1::__atomic_base.117" }
%"struct.std::__1::__atomic_base.117" = type { %"struct.std::__1::__atomic_base.118" }
%"struct.std::__1::__atomic_base.118" = type { %"struct.std::__1::__cxx_atomic_impl.119" }
%"struct.std::__1::__cxx_atomic_impl.119" = type { %"struct.std::__1::__cxx_atomic_base_impl.120" }
%"struct.std::__1::__cxx_atomic_base_impl.120" = type { i64 }
%"class.std::__1::vector.263" = type { %"class.std::__1::__vector_base.264" }
%"class.std::__1::__vector_base.264" = type { %"struct.v8::internal::Heap::GCCallbackTuple"*, %"struct.v8::internal::Heap::GCCallbackTuple"*, %"class.std::__1::__compressed_pair.265" }
%"struct.v8::internal::Heap::GCCallbackTuple" = type { void (%"class.v8::Isolate"*, i32, i32, i8*)*, i32, i8* }
%"class.v8::Isolate" = type { i8 }
%"class.std::__1::__compressed_pair.265" = type { %"struct.std::__1::__compressed_pair_elem.266" }
%"struct.std::__1::__compressed_pair_elem.266" = type { %"struct.v8::internal::Heap::GCCallbackTuple"* }
%"class.std::__1::unique_ptr.270" = type { %"class.std::__1::__compressed_pair.271" }
%"class.std::__1::__compressed_pair.271" = type { %"struct.std::__1::__compressed_pair_elem.272" }
%"struct.std::__1::__compressed_pair_elem.272" = type { %"class.v8::internal::GCTracer"* }
%"class.v8::internal::GCTracer" = type opaque
%"class.std::__1::unique_ptr.276" = type { %"class.std::__1::__compressed_pair.277" }
%"class.std::__1::__compressed_pair.277" = type { %"struct.std::__1::__compressed_pair_elem.278" }
%"struct.std::__1::__compressed_pair_elem.278" = type { %"class.v8::internal::MarkCompactCollector"* }
%"class.v8::internal::MarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::base::Mutex", %"class.v8::base::Semaphore", i8, i8, i8, i8, i8, i8, [2 x i8], %"class.v8::internal::MarkingWorklists", %"class.v8::internal::WeakObjects", %"struct.v8::internal::EphemeronMarking", %"class.std::__1::unique_ptr.318", %"class.std::__1::unique_ptr.324", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", %"class.std::__1::vector.378", %"class.std::__1::vector.378", %"class.std::__1::vector.378", %"class.std::__1::vector.385", %"class.v8::internal::Sweeper"*, %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", [2 x i8], i32, i32, [4 x i8] }>
%"class.v8::internal::MarkCompactCollectorBase" = type { i32 (...)**, %"class.v8::internal::Heap"* }
%"class.v8::base::Semaphore" = type { %union.sem_t }
%union.sem_t = type { i64, [24 x i8] }
%"class.v8::internal::MarkingWorklists" = type { %"class.heap::base::Worklist", %"class.heap::base::Worklist", %"class.heap::base::Worklist.279", %"class.std::__1::vector.280", %"class.std::__1::vector.287", %"class.heap::base::Worklist" }
%"class.heap::base::Worklist.279" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment"*, %"struct.std::__1::atomic.116" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment" = type opaque
%"class.std::__1::vector.280" = type { %"class.std::__1::__vector_base.281" }
%"class.std::__1::__vector_base.281" = type { %"struct.v8::internal::ContextWorklistPair"*, %"struct.v8::internal::ContextWorklistPair"*, %"class.std::__1::__compressed_pair.282" }
%"struct.v8::internal::ContextWorklistPair" = type { i64, %"class.heap::base::Worklist"* }
%"class.std::__1::__compressed_pair.282" = type { %"struct.std::__1::__compressed_pair_elem.283" }
%"struct.std::__1::__compressed_pair_elem.283" = type { %"struct.v8::internal::ContextWorklistPair"* }
%"class.std::__1::vector.287" = type { %"class.std::__1::__vector_base.288" }
%"class.std::__1::__vector_base.288" = type { %"class.std::__1::unique_ptr.289"*, %"class.std::__1::unique_ptr.289"*, %"class.std::__1::__compressed_pair.290" }
%"class.std::__1::unique_ptr.289" = type opaque
%"class.std::__1::__compressed_pair.290" = type { %"struct.std::__1::__compressed_pair_elem.291" }
%"struct.std::__1::__compressed_pair_elem.291" = type { %"class.std::__1::unique_ptr.289"* }
%"class.heap::base::Worklist" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment"*, %"struct.std::__1::atomic.116" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment" = type opaque
%"class.v8::internal::WeakObjects" = type { %"class.v8::internal::Worklist", %"class.v8::internal::Worklist.295", %"class.v8::internal::Worklist.297", %"class.v8::internal::Worklist.297", %"class.v8::internal::Worklist.297", %"class.v8::internal::Worklist.299", %"class.v8::internal::Worklist.301", %"class.v8::internal::Worklist.303", %"class.v8::internal::Worklist.305", %"class.v8::internal::Worklist.307", %"class.v8::internal::Worklist.309" }
%"class.v8::internal::Worklist" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"struct.std::__1::atomic.116" }
%"class.v8::internal::Worklist.295" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"struct.std::__1::atomic.116" }
%"class.v8::internal::Worklist.297" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"struct.std::__1::atomic.116" }
%"class.v8::internal::Worklist.299" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"struct.std::__1::atomic.116" }
%"class.v8::internal::Worklist.301" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"struct.std::__1::atomic.116" }
%"class.v8::internal::Worklist.303" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"struct.std::__1::atomic.116" }
%"class.v8::internal::Worklist.305" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"struct.std::__1::atomic.116" }
%"class.v8::internal::Worklist.307" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"struct.std::__1::atomic.116" }
%"class.v8::internal::Worklist.309" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"struct.std::__1::atomic.116" }
%"struct.v8::internal::EphemeronMarking" = type { %"class.std::__1::vector.311", i8, i64 }
%"class.std::__1::vector.311" = type { %"class.std::__1::__vector_base.312" }
%"class.std::__1::__vector_base.312" = type { %"class.v8::internal::HeapObject"*, %"class.v8::internal::HeapObject"*, %"class.std::__1::__compressed_pair.313" }
%"class.std::__1::__compressed_pair.313" = type { %"struct.std::__1::__compressed_pair_elem.314" }
%"struct.std::__1::__compressed_pair_elem.314" = type { %"class.v8::internal::HeapObject"* }
%"class.std::__1::unique_ptr.318" = type { %"class.std::__1::__compressed_pair.319" }
%"class.std::__1::__compressed_pair.319" = type { %"struct.std::__1::__compressed_pair_elem.320" }
%"struct.std::__1::__compressed_pair_elem.320" = type { %"class.v8::internal::MainMarkingVisitor"* }
%"class.v8::internal::MainMarkingVisitor" = type opaque
%"class.std::__1::unique_ptr.324" = type { %"class.std::__1::__compressed_pair.325" }
%"class.std::__1::__compressed_pair.325" = type { %"struct.std::__1::__compressed_pair_elem.326" }
%"struct.std::__1::__compressed_pair_elem.326" = type { %"class.v8::internal::MarkingWorklists::Local"* }
%"class.v8::internal::MarkingWorklists::Local" = type { %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", i64, %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local"*, i8, [7 x i8], %"class.std::__1::unordered_map.327" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local" = type { %"class.heap::base::Worklist.279"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.heap::base::internal::SegmentBase" = type { i16, i16 }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local" = type { %"class.heap::base::Worklist"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.std::__1::unordered_map.327" = type { %"class.std::__1::__hash_table.328" }
%"class.std::__1::__hash_table.328" = type <{ %"class.std::__1::unique_ptr.329", %"class.std::__1::__compressed_pair.339", %"class.std::__1::__compressed_pair.344", %"class.std::__1::__compressed_pair.347", [4 x i8] }>
%"class.std::__1::unique_ptr.329" = type { %"class.std::__1::__compressed_pair.330" }
%"class.std::__1::__compressed_pair.330" = type { %"struct.std::__1::__compressed_pair_elem.331", %"struct.std::__1::__compressed_pair_elem.333" }
%"struct.std::__1::__compressed_pair_elem.331" = type { %"struct.std::__1::__hash_node_base.332"** }
%"struct.std::__1::__hash_node_base.332" = type { %"struct.std::__1::__hash_node_base.332"* }
%"struct.std::__1::__compressed_pair_elem.333" = type { %"class.std::__1::__bucket_list_deallocator.334" }
%"class.std::__1::__bucket_list_deallocator.334" = type { %"class.std::__1::__compressed_pair.335" }
%"class.std::__1::__compressed_pair.335" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.339" = type { %"struct.std::__1::__compressed_pair_elem.340" }
%"struct.std::__1::__compressed_pair_elem.340" = type { %"struct.std::__1::__hash_node_base.332" }
%"class.std::__1::__compressed_pair.344" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.347" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.v8::internal::NativeContextInferrer" = type { i8 }
%"class.v8::internal::NativeContextStats" = type { %"class.std::__1::unordered_map.354" }
%"class.std::__1::unordered_map.354" = type { %"class.std::__1::__hash_table.355" }
%"class.std::__1::__hash_table.355" = type <{ %"class.std::__1::unique_ptr.356", %"class.std::__1::__compressed_pair.366", %"class.std::__1::__compressed_pair.371", %"class.std::__1::__compressed_pair.374", [4 x i8] }>
%"class.std::__1::unique_ptr.356" = type { %"class.std::__1::__compressed_pair.357" }
%"class.std::__1::__compressed_pair.357" = type { %"struct.std::__1::__compressed_pair_elem.358", %"struct.std::__1::__compressed_pair_elem.360" }
%"struct.std::__1::__compressed_pair_elem.358" = type { %"struct.std::__1::__hash_node_base.359"** }
%"struct.std::__1::__hash_node_base.359" = type { %"struct.std::__1::__hash_node_base.359"* }
%"struct.std::__1::__compressed_pair_elem.360" = type { %"class.std::__1::__bucket_list_deallocator.361" }
%"class.std::__1::__bucket_list_deallocator.361" = type { %"class.std::__1::__compressed_pair.362" }
%"class.std::__1::__compressed_pair.362" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.366" = type { %"struct.std::__1::__compressed_pair_elem.367" }
%"struct.std::__1::__compressed_pair_elem.367" = type { %"struct.std::__1::__hash_node_base.359" }
%"class.std::__1::__compressed_pair.371" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.374" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.std::__1::vector.378" = type { %"class.std::__1::__vector_base.379" }
%"class.std::__1::__vector_base.379" = type { %"class.v8::internal::Page"**, %"class.v8::internal::Page"**, %"class.std::__1::__compressed_pair.380" }
%"class.std::__1::__compressed_pair.380" = type { %"struct.std::__1::__compressed_pair_elem.381" }
%"struct.std::__1::__compressed_pair_elem.381" = type { %"class.v8::internal::Page"** }
%"class.std::__1::vector.385" = type { %"class.std::__1::__vector_base.386" }
%"class.std::__1::__vector_base.386" = type { %"struct.std::__1::pair.387"*, %"struct.std::__1::pair.387"*, %"class.std::__1::__compressed_pair.388" }
%"struct.std::__1::pair.387" = type opaque
%"class.std::__1::__compressed_pair.388" = type { %"struct.std::__1::__compressed_pair_elem.389" }
%"struct.std::__1::__compressed_pair_elem.389" = type { %"struct.std::__1::pair.387"* }
%"class.v8::internal::Sweeper" = type <{ %"class.v8::internal::Heap"*, %"class.v8::internal::MajorNonAtomicMarkingState"*, %"class.std::__1::unique_ptr.393", %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.378"], [3 x %"class.std::__1::vector.378"], i8, %"struct.std::__1::atomic.250", [6 x i8], %"class.std::__1::vector.378", i64, %"class.v8::base::Semaphore", i8, i8, i8, [5 x i8] }>
%"class.std::__1::unique_ptr.393" = type { %"class.std::__1::__compressed_pair.394" }
%"class.std::__1::__compressed_pair.394" = type { %"struct.std::__1::__compressed_pair_elem.395" }
%"struct.std::__1::__compressed_pair_elem.395" = type { %"class.v8::JobHandle"* }
%"class.v8::JobHandle" = type { i32 (...)** }
%"class.v8::internal::MajorMarkingState" = type { i8 }
%"class.v8::internal::MajorNonAtomicMarkingState" = type { i8 }
%"class.v8::internal::MinorMarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::internal::Worklist.403"*, %"class.v8::internal::YoungGenerationMarkingVisitor"*, %"class.v8::base::Semaphore", %"class.std::__1::vector.378", %"class.std::__1::vector.378", %"class.v8::internal::MinorMarkingState", %"class.v8::internal::MinorNonAtomicMarkingState", [6 x i8] }>
%"class.v8::internal::Worklist.403" = type opaque
%"class.v8::internal::YoungGenerationMarkingVisitor" = type opaque
%"class.v8::internal::MinorMarkingState" = type { i8 }
%"class.v8::internal::MinorNonAtomicMarkingState" = type { i8 }
%"class.std::__1::unique_ptr.406" = type { %"class.std::__1::__compressed_pair.407" }
%"class.std::__1::__compressed_pair.407" = type { %"struct.std::__1::__compressed_pair_elem.408" }
%"struct.std::__1::__compressed_pair_elem.408" = type { %"class.v8::internal::ScavengerCollector"* }
%"class.v8::internal::ScavengerCollector" = type opaque
%"class.std::__1::unique_ptr.412" = type { %"class.std::__1::__compressed_pair.413" }
%"class.std::__1::__compressed_pair.413" = type { %"struct.std::__1::__compressed_pair_elem.414" }
%"struct.std::__1::__compressed_pair_elem.414" = type { %"class.v8::internal::ArrayBufferSweeper"* }
%"class.v8::internal::ArrayBufferSweeper" = type opaque
%"class.std::__1::unique_ptr.418" = type { %"class.std::__1::__compressed_pair.419" }
%"class.std::__1::__compressed_pair.419" = type { %"struct.std::__1::__compressed_pair_elem.420" }
%"struct.std::__1::__compressed_pair_elem.420" = type { %"class.v8::internal::MemoryAllocator"* }
%"class.v8::internal::MemoryAllocator" = type { %"class.v8::internal::Isolate"*, %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"*, i64, %"struct.std::__1::atomic.116", %"struct.std::__1::atomic.116", %"struct.std::__1::atomic.116", %"struct.std::__1::atomic.116", %"class.v8::internal::VirtualMemory", %"class.v8::internal::MemoryAllocator::Unmapper", %"class.std::__1::unordered_set.428", %"class.v8::base::Mutex" }
%"class.v8::internal::MemoryAllocator::Unmapper" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MemoryAllocator"*, %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.421"], %"class.std::__1::unique_ptr.393" }
%"class.std::__1::vector.421" = type { %"class.std::__1::__vector_base.422" }
%"class.std::__1::__vector_base.422" = type { %"class.v8::internal::MemoryChunk"**, %"class.v8::internal::MemoryChunk"**, %"class.std::__1::__compressed_pair.423" }
%"class.std::__1::__compressed_pair.423" = type { %"struct.std::__1::__compressed_pair_elem.424" }
%"struct.std::__1::__compressed_pair_elem.424" = type { %"class.v8::internal::MemoryChunk"** }
%"class.std::__1::unique_ptr.457" = type { %"class.std::__1::__compressed_pair.458" }
%"class.std::__1::__compressed_pair.458" = type { %"struct.std::__1::__compressed_pair_elem.459" }
%"struct.std::__1::__compressed_pair_elem.459" = type { %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::IncrementalMarking" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MarkCompactCollector"*, %"class.v8::internal::WeakObjects"*, double, double, i64, i64, i64, i64, double, i64, %"struct.std::__1::atomic.460", i8, i8, i8, i8, [3 x i8], %"class.v8::internal::IncrementalMarkingJob", %"struct.std::__1::atomic.464", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorAtomicMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", %"class.v8::base::Mutex", %"class.std::__1::unordered_map.469" }
%"struct.std::__1::atomic.460" = type { %"struct.std::__1::__atomic_base.461" }
%"struct.std::__1::__atomic_base.461" = type { %"struct.std::__1::__cxx_atomic_impl.462" }
%"struct.std::__1::__cxx_atomic_impl.462" = type { %"struct.std::__1::__cxx_atomic_base_impl.463" }
%"struct.std::__1::__cxx_atomic_base_impl.463" = type { i8 }
%"class.v8::internal::IncrementalMarkingJob" = type <{ %"class.v8::base::Mutex", double, i8, i8, [6 x i8] }>
%"struct.std::__1::atomic.464" = type { %"struct.std::__1::__atomic_base.465" }
%"struct.std::__1::__atomic_base.465" = type { %"struct.std::__1::__cxx_atomic_impl.466" }
%"struct.std::__1::__cxx_atomic_impl.466" = type { %"struct.std::__1::__cxx_atomic_base_impl.467" }
%"struct.std::__1::__cxx_atomic_base_impl.467" = type { i32 }
%"class.v8::internal::IncrementalMarking::Observer" = type { %"class.v8::internal::AllocationObserver", %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::MajorAtomicMarkingState" = type { i8 }
%"class.std::__1::unordered_map.469" = type { %"class.std::__1::__hash_table.470" }
%"class.std::__1::__hash_table.470" = type <{ %"class.std::__1::unique_ptr.471", %"class.std::__1::__compressed_pair.481", %"class.std::__1::__compressed_pair.486", %"class.std::__1::__compressed_pair.489", [4 x i8] }>
%"class.std::__1::unique_ptr.471" = type { %"class.std::__1::__compressed_pair.472" }
%"class.std::__1::__compressed_pair.472" = type { %"struct.std::__1::__compressed_pair_elem.473", %"struct.std::__1::__compressed_pair_elem.475" }
%"struct.std::__1::__compressed_pair_elem.473" = type { %"struct.std::__1::__hash_node_base.474"** }
%"struct.std::__1::__hash_node_base.474" = type { %"struct.std::__1::__hash_node_base.474"* }
%"struct.std::__1::__compressed_pair_elem.475" = type { %"class.std::__1::__bucket_list_deallocator.476" }
%"class.std::__1::__bucket_list_deallocator.476" = type { %"class.std::__1::__compressed_pair.477" }
%"class.std::__1::__compressed_pair.477" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.481" = type { %"struct.std::__1::__compressed_pair_elem.482" }
%"struct.std::__1::__compressed_pair_elem.482" = type { %"struct.std::__1::__hash_node_base.474" }
%"class.std::__1::__compressed_pair.486" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.489" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.std::__1::unique_ptr.496" = type { %"class.std::__1::__compressed_pair.497" }
%"class.std::__1::__compressed_pair.497" = type { %"struct.std::__1::__compressed_pair_elem.498" }
%"struct.std::__1::__compressed_pair_elem.498" = type { %"class.v8::internal::ConcurrentMarking"* }
%"class.v8::internal::ConcurrentMarking" = type <{ %"class.std::__1::unique_ptr.393", %"class.v8::internal::Heap"*, %"class.v8::internal::MarkingWorklists"*, %"class.v8::internal::WeakObjects"*, [8 x %"struct.v8::internal::ConcurrentMarking::TaskState"], %"struct.std::__1::atomic.116", %"struct.std::__1::atomic.250", [7 x i8] }>
%"struct.v8::internal::ConcurrentMarking::TaskState" = type { i64, %"class.std::__1::unordered_map.499", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", [64 x i8] }
%"class.std::__1::unordered_map.499" = type { %"class.std::__1::__hash_table.500" }
%"class.std::__1::__hash_table.500" = type <{ %"class.std::__1::unique_ptr.501", %"class.std::__1::__compressed_pair.511", %"class.std::__1::__compressed_pair.516", %"class.std::__1::__compressed_pair.519", [4 x i8] }>
%"class.std::__1::unique_ptr.501" = type { %"class.std::__1::__compressed_pair.502" }
%"class.std::__1::__compressed_pair.502" = type { %"struct.std::__1::__compressed_pair_elem.503", %"struct.std::__1::__compressed_pair_elem.505" }
%"struct.std::__1::__compressed_pair_elem.503" = type { %"struct.std::__1::__hash_node_base.504"** }
%"struct.std::__1::__hash_node_base.504" = type { %"struct.std::__1::__hash_node_base.504"* }
%"struct.std::__1::__compressed_pair_elem.505" = type { %"class.std::__1::__bucket_list_deallocator.506" }
%"class.std::__1::__bucket_list_deallocator.506" = type { %"class.std::__1::__compressed_pair.507" }
%"class.std::__1::__compressed_pair.507" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.511" = type { %"struct.std::__1::__compressed_pair_elem.512" }
%"struct.std::__1::__compressed_pair_elem.512" = type { %"struct.std::__1::__hash_node_base.504" }
%"class.std::__1::__compressed_pair.516" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.519" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.std::__1::unique_ptr.526" = type { %"class.std::__1::__compressed_pair.527" }
%"class.std::__1::__compressed_pair.527" = type { %"struct.std::__1::__compressed_pair_elem.528" }
%"struct.std::__1::__compressed_pair_elem.528" = type { %"class.v8::internal::GCIdleTimeHandler"* }
%"class.v8::internal::GCIdleTimeHandler" = type opaque
%"class.std::__1::unique_ptr.532" = type { %"class.std::__1::__compressed_pair.533" }
%"class.std::__1::__compressed_pair.533" = type { %"struct.std::__1::__compressed_pair_elem.534" }
%"struct.std::__1::__compressed_pair_elem.534" = type { %"class.v8::internal::MemoryMeasurement"* }
%"class.v8::internal::MemoryMeasurement" = type { %"class.std::__1::list", %"class.std::__1::list", %"class.std::__1::list", %"class.v8::internal::Isolate"*, i8, i8, i8, %"class.v8::base::RandomNumberGenerator" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.535" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.535" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.v8::base::RandomNumberGenerator" = type { i64, i64, i64 }
%"class.std::__1::unique_ptr.542" = type { %"class.std::__1::__compressed_pair.543" }
%"class.std::__1::__compressed_pair.543" = type { %"struct.std::__1::__compressed_pair_elem.544" }
%"struct.std::__1::__compressed_pair_elem.544" = type { %"class.v8::internal::MemoryReducer"* }
%"class.v8::internal::MemoryReducer" = type opaque
%"class.std::__1::unique_ptr.548" = type { %"class.std::__1::__compressed_pair.549" }
%"class.std::__1::__compressed_pair.549" = type { %"struct.std::__1::__compressed_pair_elem.550" }
%"struct.std::__1::__compressed_pair_elem.550" = type { %"class.v8::internal::ObjectStats"* }
%"class.v8::internal::ObjectStats" = type opaque
%"class.std::__1::unique_ptr.554" = type { %"class.std::__1::__compressed_pair.555" }
%"class.std::__1::__compressed_pair.555" = type { %"struct.std::__1::__compressed_pair_elem.556" }
%"struct.std::__1::__compressed_pair_elem.556" = type { %"class.v8::internal::ScavengeJob"* }
%"class.v8::internal::ScavengeJob" = type opaque
%"class.std::__1::unique_ptr.560" = type { %"class.std::__1::__compressed_pair.561" }
%"class.std::__1::__compressed_pair.561" = type { %"struct.std::__1::__compressed_pair_elem.562" }
%"struct.std::__1::__compressed_pair_elem.562" = type { %"class.v8::internal::AllocationObserver"* }
%"class.std::__1::unique_ptr.566" = type { %"class.std::__1::__compressed_pair.567" }
%"class.std::__1::__compressed_pair.567" = type { %"struct.std::__1::__compressed_pair_elem.568" }
%"struct.std::__1::__compressed_pair_elem.568" = type { %"class.v8::internal::LocalEmbedderHeapTracer"* }
%"class.v8::internal::LocalEmbedderHeapTracer" = type opaque
%"class.std::__1::unique_ptr.572" = type { %"class.std::__1::__compressed_pair.573" }
%"class.std::__1::__compressed_pair.573" = type { %"struct.std::__1::__compressed_pair_elem.574" }
%"struct.std::__1::__compressed_pair_elem.574" = type { %"class.v8::internal::MarkingBarrier"* }
%"class.v8::internal::MarkingBarrier" = type opaque
%"class.std::__1::shared_ptr.578" = type { %"class.v8::internal::CodeRange"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::CodeRange" = type { %"class.v8::internal::VirtualMemoryCage", %"struct.std::__1::atomic.597", %"class.v8::base::Mutex" }
%"class.v8::internal::VirtualMemoryCage" = type { i32 (...)**, i64, %"class.std::__1::unique_ptr.579", %"class.v8::internal::VirtualMemory" }
%"class.std::__1::unique_ptr.579" = type { %"class.std::__1::__compressed_pair.580" }
%"class.std::__1::__compressed_pair.580" = type { %"struct.std::__1::__compressed_pair_elem.581" }
%"struct.std::__1::__compressed_pair_elem.581" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::base::Mutex", i64, i64, %"class.v8::PageAllocator"*, %"class.v8::base::RegionAllocator" }
%"class.v8::base::RegionAllocator" = type { %"class.v8::base::RegionAllocator::Region", i64, i64, i64, i64, %"class.std::__1::set.582", %"class.std::__1::set.590" }
%"class.v8::base::RegionAllocator::Region" = type <{ %"class.v8::base::AddressRegion", i32, [4 x i8] }>
%"class.std::__1::set.582" = type { %"class.std::__1::__tree.583" }
%"class.std::__1::__tree.583" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.584", %"class.std::__1::__compressed_pair.588" }
%"class.std::__1::__compressed_pair.584" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"class.std::__1::__compressed_pair.588" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::set.590" = type { %"class.std::__1::__tree.591" }
%"class.std::__1::__tree.591" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.584", %"class.std::__1::__compressed_pair.592" }
%"class.std::__1::__compressed_pair.592" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::atomic.597" = type { %"struct.std::__1::__atomic_base.598" }
%"struct.std::__1::__atomic_base.598" = type { %"struct.std::__1::__cxx_atomic_impl.599" }
%"struct.std::__1::__cxx_atomic_impl.599" = type { %"struct.std::__1::__cxx_atomic_base_impl.600" }
%"struct.std::__1::__cxx_atomic_base_impl.600" = type { i8* }
%"class.v8::CppHeap" = type opaque
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"class.v8::internal::StrongRootsEntry" = type { %"class.v8::internal::FullObjectSlot", %"class.v8::internal::FullObjectSlot", %"class.v8::internal::StrongRootsEntry"*, %"class.v8::internal::StrongRootsEntry"* }
%"class.v8::internal::FullObjectSlot" = type { %"class.v8::internal::SlotBase" }
%"class.v8::internal::SlotBase" = type { i64 }
%"class.std::__1::unordered_map.601" = type { %"class.std::__1::__hash_table.602" }
%"class.std::__1::__hash_table.602" = type <{ %"class.std::__1::unique_ptr.603", %"class.std::__1::__compressed_pair.613", %"class.std::__1::__compressed_pair.618", %"class.std::__1::__compressed_pair.621", [4 x i8] }>
%"class.std::__1::unique_ptr.603" = type { %"class.std::__1::__compressed_pair.604" }
%"class.std::__1::__compressed_pair.604" = type { %"struct.std::__1::__compressed_pair_elem.605", %"struct.std::__1::__compressed_pair_elem.607" }
%"struct.std::__1::__compressed_pair_elem.605" = type { %"struct.std::__1::__hash_node_base.606"** }
%"struct.std::__1::__hash_node_base.606" = type { %"struct.std::__1::__hash_node_base.606"* }
%"struct.std::__1::__compressed_pair_elem.607" = type { %"class.std::__1::__bucket_list_deallocator.608" }
%"class.std::__1::__bucket_list_deallocator.608" = type { %"class.std::__1::__compressed_pair.609" }
%"class.std::__1::__compressed_pair.609" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.613" = type { %"struct.std::__1::__compressed_pair_elem.614" }
%"struct.std::__1::__compressed_pair_elem.614" = type { %"struct.std::__1::__hash_node_base.606" }
%"class.std::__1::__compressed_pair.618" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.621" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.std::__1::unique_ptr.627" = type { %"class.std::__1::__compressed_pair.628" }
%"class.std::__1::__compressed_pair.628" = type { %"struct.std::__1::__compressed_pair_elem.629" }
%"struct.std::__1::__compressed_pair_elem.629" = type { %"class.v8::internal::GlobalHandleVector"* }
%"class.v8::internal::GlobalHandleVector" = type opaque
%"class.std::__1::unique_ptr.633" = type { %"class.std::__1::__compressed_pair.634" }
%"class.std::__1::__compressed_pair.634" = type { %"struct.std::__1::__compressed_pair_elem.635" }
%"struct.std::__1::__compressed_pair_elem.635" = type { %"class.v8::internal::GlobalSafepoint"* }
%"class.v8::internal::GlobalSafepoint" = type opaque
%"class.v8::internal::Heap::ExternalStringTable" = type { %"class.v8::internal::Heap"*, %"class.std::__1::vector.639", %"class.std::__1::vector.639" }
%"class.std::__1::unique_ptr.646" = type { %"class.std::__1::__compressed_pair.647" }
%"class.std::__1::__compressed_pair.647" = type { %"struct.std::__1::__compressed_pair_elem.648" }
%"struct.std::__1::__compressed_pair_elem.648" = type { %"class.v8::internal::CollectionBarrier"* }
%"class.v8::internal::CollectionBarrier" = type opaque
%"class.std::__1::unordered_set.428" = type { %"class.std::__1::__hash_table.429" }
%"class.std::__1::__hash_table.429" = type <{ %"class.std::__1::unique_ptr.430", %"class.std::__1::__compressed_pair.440", %"class.std::__1::__compressed_pair.445", %"class.std::__1::__compressed_pair.449", [4 x i8] }>
%"class.std::__1::unique_ptr.430" = type { %"class.std::__1::__compressed_pair.431" }
%"class.std::__1::__compressed_pair.431" = type { %"struct.std::__1::__compressed_pair_elem.432", %"struct.std::__1::__compressed_pair_elem.434" }
%"struct.std::__1::__compressed_pair_elem.432" = type { %"struct.std::__1::__hash_node_base.433"** }
%"struct.std::__1::__hash_node_base.433" = type { %"struct.std::__1::__hash_node_base.433"* }
%"struct.std::__1::__compressed_pair_elem.434" = type { %"class.std::__1::__bucket_list_deallocator.435" }
%"class.std::__1::__bucket_list_deallocator.435" = type { %"class.std::__1::__compressed_pair.436" }
%"class.std::__1::__compressed_pair.436" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.440" = type { %"struct.std::__1::__compressed_pair_elem.441" }
%"struct.std::__1::__compressed_pair_elem.441" = type { %"struct.std::__1::__hash_node_base.433" }
%"class.std::__1::__compressed_pair.445" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.449" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.std::__1::unordered_map.678" = type { %"class.std::__1::__hash_table.679" }
%"class.std::__1::__hash_table.679" = type <{ %"class.std::__1::unique_ptr.680", %"class.std::__1::__compressed_pair.690", %"class.std::__1::__compressed_pair.695", %"class.std::__1::__compressed_pair.698", [4 x i8] }>
%"class.std::__1::unique_ptr.680" = type { %"class.std::__1::__compressed_pair.681" }
%"class.std::__1::__compressed_pair.681" = type { %"struct.std::__1::__compressed_pair_elem.682", %"struct.std::__1::__compressed_pair_elem.684" }
%"struct.std::__1::__compressed_pair_elem.682" = type { %"struct.std::__1::__hash_node_base.683"** }
%"struct.std::__1::__hash_node_base.683" = type { %"struct.std::__1::__hash_node_base.683"* }
%"struct.std::__1::__compressed_pair_elem.684" = type { %"class.std::__1::__bucket_list_deallocator.685" }
%"class.std::__1::__bucket_list_deallocator.685" = type { %"class.std::__1::__compressed_pair.686" }
%"class.std::__1::__compressed_pair.686" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.690" = type { %"struct.std::__1::__compressed_pair_elem.691" }
%"struct.std::__1::__compressed_pair_elem.691" = type { %"struct.std::__1::__hash_node_base.683" }
%"class.std::__1::__compressed_pair.695" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.698" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.std::__1::unordered_map.652" = type { %"class.std::__1::__hash_table.653" }
%"class.std::__1::__hash_table.653" = type <{ %"class.std::__1::unique_ptr.654", %"class.std::__1::__compressed_pair.664", %"class.std::__1::__compressed_pair.669", %"class.std::__1::__compressed_pair.672", [4 x i8] }>
%"class.std::__1::unique_ptr.654" = type { %"class.std::__1::__compressed_pair.655" }
%"class.std::__1::__compressed_pair.655" = type { %"struct.std::__1::__compressed_pair_elem.656", %"struct.std::__1::__compressed_pair_elem.658" }
%"struct.std::__1::__compressed_pair_elem.656" = type { %"struct.std::__1::__hash_node_base.657"** }
%"struct.std::__1::__hash_node_base.657" = type { %"struct.std::__1::__hash_node_base.657"* }
%"struct.std::__1::__compressed_pair_elem.658" = type { %"class.std::__1::__bucket_list_deallocator.659" }
%"class.std::__1::__bucket_list_deallocator.659" = type { %"class.std::__1::__compressed_pair.660" }
%"class.std::__1::__compressed_pair.660" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.664" = type { %"struct.std::__1::__compressed_pair_elem.665" }
%"struct.std::__1::__compressed_pair_elem.665" = type { %"struct.std::__1::__hash_node_base.657" }
%"class.std::__1::__compressed_pair.669" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.672" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.std::__1::unordered_map.702" = type { %"class.std::__1::__hash_table.703" }
%"class.std::__1::__hash_table.703" = type <{ %"class.std::__1::unique_ptr.704", %"class.std::__1::__compressed_pair.714", %"class.std::__1::__compressed_pair.719", %"class.std::__1::__compressed_pair.724", [4 x i8] }>
%"class.std::__1::unique_ptr.704" = type { %"class.std::__1::__compressed_pair.705" }
%"class.std::__1::__compressed_pair.705" = type { %"struct.std::__1::__compressed_pair_elem.706", %"struct.std::__1::__compressed_pair_elem.708" }
%"struct.std::__1::__compressed_pair_elem.706" = type { %"struct.std::__1::__hash_node_base.707"** }
%"struct.std::__1::__hash_node_base.707" = type { %"struct.std::__1::__hash_node_base.707"* }
%"struct.std::__1::__compressed_pair_elem.708" = type { %"class.std::__1::__bucket_list_deallocator.709" }
%"class.std::__1::__bucket_list_deallocator.709" = type { %"class.std::__1::__compressed_pair.710" }
%"class.std::__1::__compressed_pair.710" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.714" = type { %"struct.std::__1::__compressed_pair_elem.715" }
%"struct.std::__1::__compressed_pair_elem.715" = type { %"struct.std::__1::__hash_node_base.707" }
%"class.std::__1::__compressed_pair.719" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.724" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.std::__1::vector.730" = type { %"class.std::__1::__vector_base.731" }
%"class.std::__1::__vector_base.731" = type { %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.std::__1::__compressed_pair.732" }
%"class.v8::internal::HeapObjectAllocationTracker" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.732" = type { %"struct.std::__1::__compressed_pair_elem.733" }
%"struct.std::__1::__compressed_pair_elem.733" = type { %"class.v8::internal::HeapObjectAllocationTracker"** }
%"class.std::__1::unique_ptr.737" = type { %"class.std::__1::__compressed_pair.738" }
%"class.std::__1::__compressed_pair.738" = type { %"struct.std::__1::__compressed_pair_elem.739" }
%"struct.std::__1::__compressed_pair_elem.739" = type { %"class.v8::internal::third_party_heap::Heap"* }
%"class.v8::internal::third_party_heap::Heap" = type { i8 }
%"class.v8::internal::ReadOnlyHeap" = type { i32 (...)**, i8, %"class.v8::internal::ReadOnlySpace"*, %"class.std::__1::vector.639" }
%"class.std::__1::shared_ptr.743" = type { %"class.v8::internal::ReadOnlyArtifacts"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::ReadOnlyArtifacts" = type { i32 (...)**, %"class.std::__1::vector.237", %"class.v8::internal::AllocationStats", %"class.std::__1::unique_ptr.744", %"class.std::__1::unique_ptr.758" }
%"class.std::__1::unique_ptr.744" = type { %"class.std::__1::__compressed_pair.745" }
%"class.std::__1::__compressed_pair.745" = type { %"struct.std::__1::__compressed_pair_elem.746" }
%"struct.std::__1::__compressed_pair_elem.746" = type { %"class.v8::internal::SharedReadOnlySpace"* }
%"class.v8::internal::SharedReadOnlySpace" = type { %"class.v8::internal::ReadOnlySpace", %"class.std::__1::vector.747" }
%"class.std::__1::vector.747" = type { %"class.std::__1::__vector_base.748" }
%"class.std::__1::__vector_base.748" = type { %"class.std::__1::unique_ptr.749"*, %"class.std::__1::unique_ptr.749"*, %"class.std::__1::__compressed_pair.750" }
%"class.std::__1::unique_ptr.749" = type { %"class.std::__1::__compressed_pair.1276" }
%"class.std::__1::__compressed_pair.1276" = type { %"struct.std::__1::__compressed_pair_elem.1277" }
%"struct.std::__1::__compressed_pair_elem.1277" = type { %"class.v8::PageAllocator::SharedMemoryMapping"* }
%"class.v8::PageAllocator::SharedMemoryMapping" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.750" = type { %"struct.std::__1::__compressed_pair_elem.751" }
%"struct.std::__1::__compressed_pair_elem.751" = type { %"class.std::__1::unique_ptr.749"* }
%"class.std::__1::unique_ptr.758" = type { %"class.std::__1::__compressed_pair.759" }
%"class.std::__1::__compressed_pair.759" = type { %"struct.std::__1::__compressed_pair_elem.760" }
%"struct.std::__1::__compressed_pair_elem.760" = type { %"class.v8::internal::ReadOnlyHeap"* }
%"class.std::__1::unique_ptr.764" = type { %"class.std::__1::__compressed_pair.765" }
%"class.std::__1::__compressed_pair.765" = type { %"struct.std::__1::__compressed_pair_elem.766" }
%"struct.std::__1::__compressed_pair_elem.766" = type { %"class.v8::internal::StringTable"* }
%"class.v8::internal::StringTable" = type { %"struct.std::__1::atomic.767", %"class.v8::base::Mutex" }
%"struct.std::__1::atomic.767" = type { %"struct.std::__1::__atomic_base.768" }
%"struct.std::__1::__atomic_base.768" = type { %"struct.std::__1::__cxx_atomic_impl.769" }
%"struct.std::__1::__cxx_atomic_impl.769" = type { %"struct.std::__1::__cxx_atomic_base_impl.770" }
%"struct.std::__1::__cxx_atomic_base_impl.770" = type { %"class.v8::internal::StringTable::Data"* }
%"class.v8::internal::StringTable::Data" = type opaque
%"class.v8::internal::Isolate::EntryStackItem" = type { i32, %"class.v8::internal::Isolate::PerIsolateThreadData"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate::EntryStackItem"* }
%"class.v8::internal::Isolate::PerIsolateThreadData" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::ThreadId", i64, %"class.v8::internal::ThreadState"* }
%"class.v8::internal::ThreadState" = type opaque
%"class.v8::internal::StringStream" = type opaque
%"class.v8::internal::Bootstrapper" = type { %"class.v8::internal::Isolate"*, i32, %"class.v8::internal::SourceCodeCache" }
%"class.v8::internal::SourceCodeCache" = type { i32, %"class.v8::internal::FixedArray" }
%"class.v8::internal::FixedArray" = type { %"class.v8::internal::TorqueGeneratedFixedArray" }
%"class.v8::internal::TorqueGeneratedFixedArray" = type { %"class.v8::internal::FixedArrayBase" }
%"class.v8::internal::FixedArrayBase" = type { %"class.v8::internal::TorqueGeneratedFixedArrayBase" }
%"class.v8::internal::TorqueGeneratedFixedArrayBase" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::RuntimeProfiler" = type opaque
%"class.v8::internal::CompilationCache" = type opaque
%"class.std::__1::shared_ptr.774" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::Counters" = type { %"class.std::__1::enable_shared_from_this", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::AggregatableHistogramTimer", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::RuntimeCallStats", %"class.v8::internal::WorkerThreadRuntimeCallStats", %"class.v8::internal::Isolate"*, %"class.v8::internal::StatsTable" }
%"class.std::__1::enable_shared_from_this" = type { %"class.std::__1::weak_ptr" }
%"class.std::__1::weak_ptr" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::HistogramTimer" = type { %"class.v8::internal::TimedHistogram.base", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::TimedHistogram.base" = type <{ %"class.v8::internal::Histogram", i32 }>
%"class.v8::base::ElapsedTimer" = type { %"class.v8::base::TimeTicks" }
%"class.v8::base::TimeTicks" = type { %"class.v8::base::time_internal::TimeBase" }
%"class.v8::base::time_internal::TimeBase" = type { i64 }
%"class.v8::internal::TimedHistogram" = type <{ %"class.v8::internal::Histogram", i32, [4 x i8] }>
%"class.v8::internal::AggregatableHistogramTimer" = type { %"class.v8::internal::Histogram", %"class.v8::base::TimeDelta" }
%"class.v8::base::TimeDelta" = type { i64 }
%"class.v8::internal::Histogram" = type { i8*, i32, i32, i32, i8*, %"class.v8::internal::Counters"* }
%"class.v8::internal::StatsCounterThreadSafe" = type { %"class.v8::internal::StatsCounterBase", %"class.v8::base::Mutex" }
%"class.v8::internal::StatsCounterBase" = type { %"class.v8::internal::Counters"*, i8*, i32* }
%"class.v8::internal::StatsCounter" = type <{ %"class.v8::internal::StatsCounterBase", i8, [7 x i8] }>
%"class.v8::internal::RuntimeCallStats" = type { %"class.v8::base::AtomicValue", %"class.v8::base::AtomicValue.775", i8, i32, %"class.v8::internal::ThreadId", [1370 x %"class.v8::internal::RuntimeCallCounter"] }
%"class.v8::base::AtomicValue" = type { i64 }
%"class.v8::base::AtomicValue.775" = type { i64 }
%"class.v8::internal::RuntimeCallCounter" = type { i8*, i64, i64 }
%"class.v8::internal::WorkerThreadRuntimeCallStats" = type <{ %"class.v8::base::Mutex", %"class.std::__1::vector.776", %"class.v8::base::Optional", %"class.v8::internal::ThreadId", [4 x i8] }>
%"class.std::__1::vector.776" = type { %"class.std::__1::__vector_base.777" }
%"class.std::__1::__vector_base.777" = type { %"class.std::__1::unique_ptr.778"*, %"class.std::__1::unique_ptr.778"*, %"class.std::__1::__compressed_pair.779" }
%"class.std::__1::unique_ptr.778" = type opaque
%"class.std::__1::__compressed_pair.779" = type { %"struct.std::__1::__compressed_pair_elem.780" }
%"struct.std::__1::__compressed_pair_elem.780" = type { %"class.std::__1::unique_ptr.778"* }
%"class.v8::base::Optional" = type { %"class.v8::base::internal::OptionalBase" }
%"class.v8::base::internal::OptionalBase" = type { %"struct.v8::base::internal::OptionalStorage" }
%"struct.v8::base::internal::OptionalStorage" = type { %"struct.v8::base::internal::OptionalStorageBase" }
%"struct.v8::base::internal::OptionalStorageBase" = type { i8, %union.anon.784 }
%union.anon.784 = type { i32 }
%"class.v8::internal::StatsTable" = type { i32* (i8*)*, i8* (i8*, i32, i32, i64)*, void (i8*, i32)* }
%"class.v8::base::RecursiveMutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::base::SharedMutex" = type { %union.pthread_rwlock_t }
%union.pthread_rwlock_t = type { %struct.__pthread_rwlock_arch_t }
%struct.__pthread_rwlock_arch_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%"class.v8::internal::Logger" = type { %"class.v8::internal::CodeEventListener", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.785", %"class.std::__1::unique_ptr.791", %"struct.std::__1::atomic.250", %"class.std::__1::unique_ptr.797", %"class.std::__1::unique_ptr.803", %"class.std::__1::unique_ptr.809", %"class.std::__1::unique_ptr.815", %"class.std::__1::unique_ptr.821", %"class.std::__1::set.827", i32, i8, %"class.v8::internal::ExistingCodeLogger", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::CodeEventListener" = type { i32 (...)** }
%"class.std::__1::unique_ptr.785" = type { %"class.std::__1::__compressed_pair.786" }
%"class.std::__1::__compressed_pair.786" = type { %"struct.std::__1::__compressed_pair_elem.787" }
%"struct.std::__1::__compressed_pair_elem.787" = type { %"class.v8::internal::Ticker"* }
%"class.v8::internal::Ticker" = type opaque
%"class.std::__1::unique_ptr.791" = type { %"class.std::__1::__compressed_pair.792" }
%"class.std::__1::__compressed_pair.792" = type { %"struct.std::__1::__compressed_pair_elem.793" }
%"struct.std::__1::__compressed_pair_elem.793" = type { %"class.v8::internal::Profiler"* }
%"class.v8::internal::Profiler" = type opaque
%"class.std::__1::unique_ptr.797" = type { %"class.std::__1::__compressed_pair.798" }
%"class.std::__1::__compressed_pair.798" = type { %"struct.std::__1::__compressed_pair_elem.799" }
%"struct.std::__1::__compressed_pair_elem.799" = type { %"class.v8::internal::Log"* }
%"class.v8::internal::Log" = type opaque
%"class.std::__1::unique_ptr.803" = type { %"class.std::__1::__compressed_pair.804" }
%"class.std::__1::__compressed_pair.804" = type { %"struct.std::__1::__compressed_pair_elem.805" }
%"struct.std::__1::__compressed_pair_elem.805" = type { %"class.v8::internal::PerfBasicLogger"* }
%"class.v8::internal::PerfBasicLogger" = type opaque
%"class.std::__1::unique_ptr.809" = type { %"class.std::__1::__compressed_pair.810" }
%"class.std::__1::__compressed_pair.810" = type { %"struct.std::__1::__compressed_pair_elem.811" }
%"struct.std::__1::__compressed_pair_elem.811" = type { %"class.v8::internal::PerfJitLogger"* }
%"class.v8::internal::PerfJitLogger" = type opaque
%"class.std::__1::unique_ptr.815" = type { %"class.std::__1::__compressed_pair.816" }
%"class.std::__1::__compressed_pair.816" = type { %"struct.std::__1::__compressed_pair_elem.817" }
%"struct.std::__1::__compressed_pair_elem.817" = type { %"class.v8::internal::LowLevelLogger"* }
%"class.v8::internal::LowLevelLogger" = type opaque
%"class.std::__1::unique_ptr.821" = type { %"class.std::__1::__compressed_pair.822" }
%"class.std::__1::__compressed_pair.822" = type { %"struct.std::__1::__compressed_pair_elem.823" }
%"struct.std::__1::__compressed_pair_elem.823" = type { %"class.v8::internal::JitLogger"* }
%"class.v8::internal::JitLogger" = type opaque
%"class.std::__1::set.827" = type { %"class.std::__1::__tree.828" }
%"class.std::__1::__tree.828" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.829", %"class.std::__1::__compressed_pair.833" }
%"class.std::__1::__compressed_pair.829" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"class.std::__1::__compressed_pair.833" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.v8::internal::ExistingCodeLogger" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::CodeEventListener"* }
%"class.v8::internal::StubCache" = type { [2048 x %"struct.v8::internal::StubCache::Entry"], [512 x %"struct.v8::internal::StubCache::Entry"], %"class.v8::internal::Isolate"* }
%"struct.v8::internal::StubCache::Entry" = type { %"class.v8::internal::StrongTaggedValue", %"class.v8::internal::TaggedValue", %"class.v8::internal::StrongTaggedValue" }
%"class.v8::internal::TaggedValue" = type { %"class.v8::internal::TaggedImpl.837" }
%"class.v8::internal::TaggedImpl.837" = type { i32 }
%"class.v8::internal::StrongTaggedValue" = type { %"class.v8::internal::TaggedImpl.836" }
%"class.v8::internal::TaggedImpl.836" = type { i32 }
%"class.v8::internal::Deoptimizer" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::JSFunction", %"class.v8::internal::Code", i32, i8, i64, i32, i8, i32, i32, %"class.v8::internal::FrameDescription"*, i32, %"class.v8::internal::FrameDescription"**, i64, i64, i64, i64, i32, i64, %"class.v8::internal::TranslatedState", %"class.std::__1::vector.877", %"class.std::__1::unique_ptr.884" }
%"class.v8::internal::JSFunction" = type { %"class.v8::internal::JSFunctionOrBoundFunction" }
%"class.v8::internal::JSFunctionOrBoundFunction" = type { %"class.v8::internal::TorqueGeneratedJSFunctionOrBoundFunction" }
%"class.v8::internal::TorqueGeneratedJSFunctionOrBoundFunction" = type { %"class.v8::internal::JSObject" }
%"class.v8::internal::JSObject" = type { %"class.v8::internal::TorqueGeneratedJSObject" }
%"class.v8::internal::TorqueGeneratedJSObject" = type { %"class.v8::internal::JSReceiver" }
%"class.v8::internal::JSReceiver" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::FrameDescription" = type { i64, i32, %"class.v8::internal::RegisterValues", i64, i64, i64, i64, i64, i64, [1 x i64] }
%"class.v8::internal::RegisterValues" = type { [16 x i64], [16 x %"class.v8::internal::Float64"] }
%"class.v8::internal::Float64" = type { i64 }
%"class.v8::internal::TranslatedState" = type <{ i32, [4 x i8], %"class.std::__1::vector.838", %"class.v8::internal::Isolate"*, i64, i32, i32, %"class.std::__1::deque.864", %"class.v8::internal::Handle.876", %"class.v8::internal::FeedbackVector", %"class.v8::internal::FeedbackSlot", [4 x i8] }>
%"class.std::__1::vector.838" = type { %"class.std::__1::__vector_base.839" }
%"class.std::__1::__vector_base.839" = type { %"class.v8::internal::TranslatedFrame"*, %"class.v8::internal::TranslatedFrame"*, %"class.std::__1::__compressed_pair.859" }
%"class.v8::internal::TranslatedFrame" = type <{ i32, %"class.v8::internal::BytecodeOffset", %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::Handle.840", i32, i32, i32, [4 x i8], %"class.std::__1::deque.841", %"class.v8::base::Optional.854", [6 x i8] }>
%"class.v8::internal::BytecodeOffset" = type { i32 }
%"class.v8::internal::SharedFunctionInfo" = type { %"class.v8::internal::TorqueGeneratedSharedFunctionInfo" }
%"class.v8::internal::TorqueGeneratedSharedFunctionInfo" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Handle.840" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::deque.841" = type { %"class.std::__1::__deque_base.842" }
%"class.std::__1::__deque_base.842" = type { %"struct.std::__1::__split_buffer.843", i64, %"class.std::__1::__compressed_pair.850" }
%"struct.std::__1::__split_buffer.843" = type { %"class.v8::internal::TranslatedValue"**, %"class.v8::internal::TranslatedValue"**, %"class.v8::internal::TranslatedValue"**, %"class.std::__1::__compressed_pair.845" }
%"class.v8::internal::TranslatedValue" = type { i8, i8, %"class.v8::internal::TranslatedState"*, %"class.v8::internal::Handle.23", %union.anon.844 }
%union.anon.844 = type { %"class.v8::internal::Object" }
%"class.std::__1::__compressed_pair.845" = type { %"struct.std::__1::__compressed_pair_elem.846" }
%"struct.std::__1::__compressed_pair_elem.846" = type { %"class.v8::internal::TranslatedValue"** }
%"class.std::__1::__compressed_pair.850" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.v8::base::Optional.854" = type { %"class.v8::base::internal::OptionalBase.855" }
%"class.v8::base::internal::OptionalBase.855" = type { %"struct.v8::base::internal::OptionalStorage.856" }
%"struct.v8::base::internal::OptionalStorage.856" = type { %"struct.v8::base::internal::OptionalStorageBase.857" }
%"struct.v8::base::internal::OptionalStorageBase.857" = type { i8, %union.anon.858 }
%union.anon.858 = type { i8 }
%"class.std::__1::__compressed_pair.859" = type { %"struct.std::__1::__compressed_pair_elem.860" }
%"struct.std::__1::__compressed_pair_elem.860" = type { %"class.v8::internal::TranslatedFrame"* }
%"class.std::__1::deque.864" = type { %"class.std::__1::__deque_base.865" }
%"class.std::__1::__deque_base.865" = type { %"struct.std::__1::__split_buffer.866", i64, %"class.std::__1::__compressed_pair.872" }
%"struct.std::__1::__split_buffer.866" = type { %"struct.v8::internal::TranslatedState::ObjectPosition"**, %"struct.v8::internal::TranslatedState::ObjectPosition"**, %"struct.v8::internal::TranslatedState::ObjectPosition"**, %"class.std::__1::__compressed_pair.867" }
%"struct.v8::internal::TranslatedState::ObjectPosition" = type { i32, i32 }
%"class.std::__1::__compressed_pair.867" = type { %"struct.std::__1::__compressed_pair_elem.868" }
%"struct.std::__1::__compressed_pair_elem.868" = type { %"struct.v8::internal::TranslatedState::ObjectPosition"** }
%"class.std::__1::__compressed_pair.872" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.v8::internal::Handle.876" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::FeedbackVector" = type { %"class.v8::internal::TorqueGeneratedFeedbackVector" }
%"class.v8::internal::TorqueGeneratedFeedbackVector" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::FeedbackSlot" = type { i32 }
%"class.std::__1::vector.877" = type { %"class.std::__1::__vector_base.878" }
%"class.std::__1::__vector_base.878" = type { %"struct.v8::internal::Deoptimizer::ValueToMaterialize"*, %"struct.v8::internal::Deoptimizer::ValueToMaterialize"*, %"class.std::__1::__compressed_pair.879" }
%"struct.v8::internal::Deoptimizer::ValueToMaterialize" = type { i64, %"class.v8::internal::TranslatedFrame::iterator" }
%"class.v8::internal::TranslatedFrame::iterator" = type <{ %"class.std::__1::__deque_iterator", i32, [4 x i8] }>
%"class.std::__1::__deque_iterator" = type { %"class.v8::internal::TranslatedValue"**, %"class.v8::internal::TranslatedValue"* }
%"class.std::__1::__compressed_pair.879" = type { %"struct.std::__1::__compressed_pair_elem.880" }
%"struct.std::__1::__compressed_pair_elem.880" = type { %"struct.v8::internal::Deoptimizer::ValueToMaterialize"* }
%"class.std::__1::unique_ptr.884" = type { %"class.std::__1::__compressed_pair.885" }
%"class.std::__1::__compressed_pair.885" = type { %"struct.std::__1::__compressed_pair_elem.886" }
%"struct.std::__1::__compressed_pair_elem.886" = type { %"class.v8::internal::CodeTracer::Scope"* }
%"class.v8::internal::CodeTracer::Scope" = type { %"class.v8::internal::CodeTracer"* }
%"class.v8::internal::MaterializedObjectStore" = type opaque
%"class.v8::internal::DescriptorLookupCache" = type { [64 x %"struct.v8::internal::DescriptorLookupCache::Key"], [64 x i32] }
%"struct.v8::internal::DescriptorLookupCache::Key" = type { %"class.v8::internal::Map", %"class.v8::internal::Name" }
%"class.v8::internal::Map" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Name" = type { %"class.v8::internal::TorqueGeneratedName" }
%"class.v8::internal::TorqueGeneratedName" = type { %"class.v8::internal::PrimitiveHeapObject" }
%"class.v8::internal::PrimitiveHeapObject" = type { %"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" }
%"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" = type { %"class.v8::internal::HeapObject" }
%"struct.v8::internal::HandleScopeData" = type { i64*, i64*, i32, i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::CanonicalHandleScope" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::OptimizedCompilationInfo"*, %"class.v8::internal::Zone"*, %"class.v8::internal::RootIndexMap"*, %"class.std::__1::unique_ptr.896", i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::OptimizedCompilationInfo" = type opaque
%"class.v8::internal::RootIndexMap" = type opaque
%"class.std::__1::unique_ptr.896" = type { %"class.std::__1::__compressed_pair.897" }
%"class.std::__1::__compressed_pair.897" = type { %"struct.std::__1::__compressed_pair_elem.898" }
%"struct.std::__1::__compressed_pair_elem.898" = type { %"class.v8::internal::IdentityMap"* }
%"class.v8::internal::IdentityMap" = type opaque
%"class.v8::internal::HandleScopeImplementer" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::DetachableVector", %"class.v8::internal::DetachableVector.902", %"class.v8::internal::DetachableVector.903", %"class.v8::internal::DetachableVector.902", i64*, i64*, %"struct.v8::internal::HandleScopeData" }
%"class.v8::internal::DetachableVector" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVectorBase" = type { i8*, i64, i64 }
%"class.v8::internal::DetachableVector.903" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVector.902" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::UnicodeCache" = type opaque
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic.116", %"struct.std::__1::atomic.116", %"class.std::__1::unique_ptr.890", %"class.std::__1::unique_ptr.579" }
%"class.std::__1::unique_ptr.890" = type { %"class.std::__1::__compressed_pair.891" }
%"class.std::__1::__compressed_pair.891" = type { %"struct.std::__1::__compressed_pair_elem.892" }
%"struct.std::__1::__compressed_pair_elem.892" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::InnerPointerToCodeCache" = type opaque
%"class.v8::internal::GlobalHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.904", %"class.std::__1::vector.910", %"class.std::__1::unique_ptr.917", %"class.std::__1::vector.924", %"class.std::__1::unique_ptr.931", i64, %"class.std::__1::vector.937", %"class.std::__1::vector.945", %"class.std::__1::vector.953", i8, i8, i32 }
%"class.std::__1::unique_ptr.904" = type { %"class.std::__1::__compressed_pair.905" }
%"class.std::__1::__compressed_pair.905" = type { %"struct.std::__1::__compressed_pair_elem.906" }
%"struct.std::__1::__compressed_pair_elem.906" = type { %"class.v8::internal::GlobalHandles::NodeSpace"* }
%"class.v8::internal::GlobalHandles::NodeSpace" = type opaque
%"class.std::__1::vector.910" = type { %"class.std::__1::__vector_base.911" }
%"class.std::__1::__vector_base.911" = type { %"class.v8::internal::GlobalHandles::Node"**, %"class.v8::internal::GlobalHandles::Node"**, %"class.std::__1::__compressed_pair.912" }
%"class.v8::internal::GlobalHandles::Node" = type opaque
%"class.std::__1::__compressed_pair.912" = type { %"struct.std::__1::__compressed_pair_elem.913" }
%"struct.std::__1::__compressed_pair_elem.913" = type { %"class.v8::internal::GlobalHandles::Node"** }
%"class.std::__1::unique_ptr.917" = type { %"class.std::__1::__compressed_pair.918" }
%"class.std::__1::__compressed_pair.918" = type { %"struct.std::__1::__compressed_pair_elem.919" }
%"struct.std::__1::__compressed_pair_elem.919" = type { %"class.v8::internal::GlobalHandles::NodeSpace.920"* }
%"class.v8::internal::GlobalHandles::NodeSpace.920" = type opaque
%"class.std::__1::vector.924" = type { %"class.std::__1::__vector_base.925" }
%"class.std::__1::__vector_base.925" = type { %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.std::__1::__compressed_pair.926" }
%"class.v8::internal::GlobalHandles::TracedNode" = type opaque
%"class.std::__1::__compressed_pair.926" = type { %"struct.std::__1::__compressed_pair_elem.927" }
%"struct.std::__1::__compressed_pair_elem.927" = type { %"class.v8::internal::GlobalHandles::TracedNode"** }
%"class.std::__1::unique_ptr.931" = type { %"class.std::__1::__compressed_pair.932" }
%"class.std::__1::__compressed_pair.932" = type { %"struct.std::__1::__compressed_pair_elem.933" }
%"struct.std::__1::__compressed_pair_elem.933" = type { %"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace"* }
%"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace" = type opaque
%"class.std::__1::vector.937" = type { %"class.std::__1::__vector_base.938" }
%"class.std::__1::__vector_base.938" = type { %"struct.std::__1::pair.939"*, %"struct.std::__1::pair.939"*, %"class.std::__1::__compressed_pair.940" }
%"struct.std::__1::pair.939" = type opaque
%"class.std::__1::__compressed_pair.940" = type { %"struct.std::__1::__compressed_pair_elem.941" }
%"struct.std::__1::__compressed_pair_elem.941" = type { %"struct.std::__1::pair.939"* }
%"class.std::__1::vector.945" = type { %"class.std::__1::__vector_base.946" }
%"class.std::__1::__vector_base.946" = type { %"struct.std::__1::pair.947"*, %"struct.std::__1::pair.947"*, %"class.std::__1::__compressed_pair.948" }
%"struct.std::__1::pair.947" = type opaque
%"class.std::__1::__compressed_pair.948" = type { %"struct.std::__1::__compressed_pair_elem.949" }
%"struct.std::__1::__compressed_pair_elem.949" = type { %"struct.std::__1::pair.947"* }
%"class.std::__1::vector.953" = type { %"class.std::__1::__vector_base.954" }
%"class.std::__1::__vector_base.954" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.std::__1::__compressed_pair.955" }
%"class.v8::internal::GlobalHandles::PendingPhantomCallback" = type { void (%"class.v8::WeakCallbackInfo"*)*, i8*, [2 x i8*] }
%"class.v8::WeakCallbackInfo" = type { %"class.v8::Isolate"*, i8*, {}**, [2 x i8*] }
%"class.std::__1::__compressed_pair.955" = type { %"struct.std::__1::__compressed_pair_elem.956" }
%"struct.std::__1::__compressed_pair_elem.956" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"* }
%"class.v8::internal::EternalHandles" = type { i32, %"class.std::__1::vector.960", %"class.std::__1::vector.967" }
%"class.v8::internal::ThreadManager" = type opaque
%"class.v8::bigint::Processor" = type opaque
%"class.v8::internal::RuntimeState" = type { %"class.std::__1::unique_ptr.971" }
%"class.std::__1::unique_ptr.971" = type { %"class.std::__1::__compressed_pair.972" }
%"class.std::__1::__compressed_pair.972" = type { %"struct.std::__1::__compressed_pair_elem.973" }
%"struct.std::__1::__compressed_pair_elem.973" = type { %"struct.v8::internal::Runtime::Function"* }
%"struct.v8::internal::Runtime::Function" = type { i32, i32, i8*, i64, i8, i8 }
%"class.v8::internal::Builtins" = type { %"class.v8::internal::Isolate"*, i8, i32 }
%"class.v8::internal::SetupIsolateDelegate" = type opaque
%"class.v8::internal::RegExpStack" = type opaque
%"class.std::__1::vector.967" = type { %"class.std::__1::__vector_base.968" }
%"class.std::__1::__vector_base.968" = type { i32*, i32*, %"class.std::__1::__compressed_pair.969" }
%"class.std::__1::__compressed_pair.969" = type { %"struct.std::__1::__compressed_pair_elem.970" }
%"struct.std::__1::__compressed_pair_elem.970" = type { i32* }
%"class.v8::internal::DateCache" = type opaque
%"struct.std::__1::atomic.977" = type { %"struct.std::__1::__atomic_base.978" }
%"struct.std::__1::__atomic_base.978" = type { %"struct.std::__1::__cxx_atomic_impl.979" }
%"struct.std::__1::__cxx_atomic_impl.979" = type { %"struct.std::__1::__cxx_atomic_base_impl.980" }
%"struct.std::__1::__cxx_atomic_base_impl.980" = type { i32 }
%"class.v8::Promise" = type { i8 }
%"struct.std::__1::atomic.987" = type { %"struct.std::__1::__atomic_base.988" }
%"struct.std::__1::__atomic_base.988" = type { %"struct.std::__1::__cxx_atomic_impl.989" }
%"struct.std::__1::__cxx_atomic_impl.989" = type { %"struct.std::__1::__cxx_atomic_base_impl.990" }
%"struct.std::__1::__cxx_atomic_base_impl.990" = type { i32 }
%"class.std::__1::unordered_map.992" = type { %"class.std::__1::__hash_table.993" }
%"class.std::__1::__hash_table.993" = type <{ %"class.std::__1::unique_ptr.994", %"class.std::__1::__compressed_pair.1004", %"class.std::__1::__compressed_pair.1009", %"class.std::__1::__compressed_pair.1012", [4 x i8] }>
%"class.std::__1::unique_ptr.994" = type { %"class.std::__1::__compressed_pair.995" }
%"class.std::__1::__compressed_pair.995" = type { %"struct.std::__1::__compressed_pair_elem.996", %"struct.std::__1::__compressed_pair_elem.998" }
%"struct.std::__1::__compressed_pair_elem.996" = type { %"struct.std::__1::__hash_node_base.997"** }
%"struct.std::__1::__hash_node_base.997" = type { %"struct.std::__1::__hash_node_base.997"* }
%"struct.std::__1::__compressed_pair_elem.998" = type { %"class.std::__1::__bucket_list_deallocator.999" }
%"class.std::__1::__bucket_list_deallocator.999" = type { %"class.std::__1::__compressed_pair.1000" }
%"class.std::__1::__compressed_pair.1000" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.1004" = type { %"struct.std::__1::__compressed_pair_elem.1005" }
%"struct.std::__1::__compressed_pair_elem.1005" = type { %"struct.std::__1::__hash_node_base.997" }
%"class.std::__1::__compressed_pair.1009" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.1012" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::atomic.250" = type { %"struct.std::__1::__atomic_base.251" }
%"struct.std::__1::__atomic_base.251" = type { %"struct.std::__1::__cxx_atomic_impl.252" }
%"struct.std::__1::__cxx_atomic_impl.252" = type { %"struct.std::__1::__cxx_atomic_base_impl.253" }
%"struct.std::__1::__cxx_atomic_base_impl.253" = type { i8 }
%"class.v8::internal::Debug" = type { %"class.v8::debug::DebugDelegate"*, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"class.v8::internal::DebugInfoListNode"*, %"class.std::__1::unique_ptr.1018", %"class.v8::internal::Handle.1024", %"class.v8::internal::DebugFeatureTracker", %"class.v8::internal::Debug::ThreadLocal", %"class.v8::internal::Handle.1025", %"class.v8::internal::Isolate"* }
%"class.v8::debug::DebugDelegate" = type { i32 (...)** }
%"class.v8::internal::DebugInfoListNode" = type { i64*, %"class.v8::internal::DebugInfoListNode"* }
%"class.std::__1::unique_ptr.1018" = type { %"class.std::__1::__compressed_pair.1019" }
%"class.std::__1::__compressed_pair.1019" = type { %"struct.std::__1::__compressed_pair_elem.1020" }
%"struct.std::__1::__compressed_pair_elem.1020" = type { %"class.v8::internal::Debug::TemporaryObjectsTracker"* }
%"class.v8::internal::Debug::TemporaryObjectsTracker" = type opaque
%"class.v8::internal::Handle.1024" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::DebugFeatureTracker" = type <{ %"class.v8::internal::Isolate"*, i32, [4 x i8] }>
%"class.v8::internal::Debug::ThreadLocal" = type <{ i64, i32, i8, [3 x i8], %"class.v8::internal::Object", i8, [3 x i8], i32, i32, i32, %"class.v8::internal::Object", %"class.v8::internal::Object", i32, i8, [3 x i8] }>
%"class.v8::internal::Handle.1025" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HeapProfiler" = type { %"class.v8::internal::HeapObjectAllocationTracker", %"class.std::__1::unique_ptr.1026", %"class.std::__1::vector.1032", %"class.std::__1::unique_ptr.1040", %"class.std::__1::unique_ptr.1046", i8, i8, %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.1052", %"class.std::__1::vector.1058", %"struct.std::__1::pair.1066" }
%"class.std::__1::unique_ptr.1026" = type { %"class.std::__1::__compressed_pair.1027" }
%"class.std::__1::__compressed_pair.1027" = type { %"struct.std::__1::__compressed_pair_elem.1028" }
%"struct.std::__1::__compressed_pair_elem.1028" = type { %"class.v8::internal::HeapObjectsMap"* }
%"class.v8::internal::HeapObjectsMap" = type opaque
%"class.std::__1::vector.1032" = type { %"class.std::__1::__vector_base.1033" }
%"class.std::__1::__vector_base.1033" = type { %"class.std::__1::unique_ptr.1034"*, %"class.std::__1::unique_ptr.1034"*, %"class.std::__1::__compressed_pair.1035" }
%"class.std::__1::unique_ptr.1034" = type opaque
%"class.std::__1::__compressed_pair.1035" = type { %"struct.std::__1::__compressed_pair_elem.1036" }
%"struct.std::__1::__compressed_pair_elem.1036" = type { %"class.std::__1::unique_ptr.1034"* }
%"class.std::__1::unique_ptr.1040" = type { %"class.std::__1::__compressed_pair.1041" }
%"class.std::__1::__compressed_pair.1041" = type { %"struct.std::__1::__compressed_pair_elem.1042" }
%"struct.std::__1::__compressed_pair_elem.1042" = type { %"class.v8::internal::StringsStorage"* }
%"class.v8::internal::StringsStorage" = type opaque
%"class.std::__1::unique_ptr.1046" = type { %"class.std::__1::__compressed_pair.1047" }
%"class.std::__1::__compressed_pair.1047" = type { %"struct.std::__1::__compressed_pair_elem.1048" }
%"struct.std::__1::__compressed_pair_elem.1048" = type { %"class.v8::internal::AllocationTracker"* }
%"class.v8::internal::AllocationTracker" = type opaque
%"class.std::__1::unique_ptr.1052" = type { %"class.std::__1::__compressed_pair.1053" }
%"class.std::__1::__compressed_pair.1053" = type { %"struct.std::__1::__compressed_pair_elem.1054" }
%"struct.std::__1::__compressed_pair_elem.1054" = type { %"class.v8::internal::SamplingHeapProfiler"* }
%"class.v8::internal::SamplingHeapProfiler" = type opaque
%"class.std::__1::vector.1058" = type { %"class.std::__1::__vector_base.1059" }
%"class.std::__1::__vector_base.1059" = type { %"struct.std::__1::pair.1060"*, %"struct.std::__1::pair.1060"*, %"class.std::__1::__compressed_pair.1061" }
%"struct.std::__1::pair.1060" = type opaque
%"class.std::__1::__compressed_pair.1061" = type { %"struct.std::__1::__compressed_pair_elem.1062" }
%"struct.std::__1::__compressed_pair_elem.1062" = type { %"struct.std::__1::pair.1060"* }
%"struct.std::__1::pair.1066" = type { i8 (%"class.v8::Isolate"*, %"class.v8::Local.84"*, i16, i8*)*, i8* }
%"class.v8::Local.84" = type { %"class.v8::Value"* }
%"class.std::__1::unique_ptr.1067" = type { %"class.std::__1::__compressed_pair.1068" }
%"class.std::__1::__compressed_pair.1068" = type { %"struct.std::__1::__compressed_pair_elem.1069" }
%"struct.std::__1::__compressed_pair_elem.1069" = type { %"class.v8::internal::CodeEventDispatcher"* }
%"class.v8::internal::CodeEventDispatcher" = type { %"class.v8::internal::CodeEventListener", %"class.std::__1::unordered_set.1070", %"class.v8::base::Mutex" }
%"class.std::__1::unordered_set.1070" = type { %"class.std::__1::__hash_table.1071" }
%"class.std::__1::__hash_table.1071" = type <{ %"class.std::__1::unique_ptr.1072", %"class.std::__1::__compressed_pair.1082", %"class.std::__1::__compressed_pair.1087", %"class.std::__1::__compressed_pair.1091", [4 x i8] }>
%"class.std::__1::unique_ptr.1072" = type { %"class.std::__1::__compressed_pair.1073" }
%"class.std::__1::__compressed_pair.1073" = type { %"struct.std::__1::__compressed_pair_elem.1074", %"struct.std::__1::__compressed_pair_elem.1076" }
%"struct.std::__1::__compressed_pair_elem.1074" = type { %"struct.std::__1::__hash_node_base.1075"** }
%"struct.std::__1::__hash_node_base.1075" = type { %"struct.std::__1::__hash_node_base.1075"* }
%"struct.std::__1::__compressed_pair_elem.1076" = type { %"class.std::__1::__bucket_list_deallocator.1077" }
%"class.std::__1::__bucket_list_deallocator.1077" = type { %"class.std::__1::__compressed_pair.1078" }
%"class.std::__1::__compressed_pair.1078" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.1082" = type { %"struct.std::__1::__compressed_pair_elem.1083" }
%"struct.std::__1::__compressed_pair_elem.1083" = type { %"struct.std::__1::__hash_node_base.1075" }
%"class.std::__1::__compressed_pair.1087" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.1091" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.v8::internal::AstStringConstants" = type opaque
%"class.v8::internal::interpreter::Interpreter" = type opaque
%"class.v8::internal::compiler::PerIsolateCompilerCache" = type opaque
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::internal::CompilerDispatcher" = type opaque
%"class.std::__1::queue" = type { %"class.std::__1::deque.1099" }
%"class.std::__1::deque.1099" = type { %"class.std::__1::__deque_base.1100" }
%"class.std::__1::__deque_base.1100" = type { %"struct.std::__1::__split_buffer.1101", i64, %"class.std::__1::__compressed_pair.1108" }
%"struct.std::__1::__split_buffer.1101" = type { %"struct.std::__1::pair.1102"**, %"struct.std::__1::pair.1102"**, %"struct.std::__1::pair.1102"**, %"class.std::__1::__compressed_pair.1103" }
%"struct.std::__1::pair.1102" = type opaque
%"class.std::__1::__compressed_pair.1103" = type { %"struct.std::__1::__compressed_pair_elem.1104" }
%"struct.std::__1::__compressed_pair_elem.1104" = type { %"struct.std::__1::pair.1102"** }
%"class.std::__1::__compressed_pair.1108" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.v8::String" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::FunctionCallbackInfo" = type <{ i64*, i64*, i32, [4 x i8] }>
%"class.v8::internal::Relocatable" = type { i32 (...)**, %"class.v8::internal::Isolate"*, %"class.v8::internal::Relocatable"* }
%"class.v8::internal::AddressToIndexHashMap" = type opaque
%"class.v8::internal::HeapObjectToIndexHashMap" = type opaque
%"class.v8::internal::MicrotaskQueue" = type opaque
%"class.v8::internal::CompilationStatistics" = type opaque
%"class.v8::internal::CodeTracer" = type <{ %"class.v8::internal::EmbeddedVector", %struct._IO_FILE*, i32, [4 x i8] }>
%"class.v8::internal::EmbeddedVector" = type { %"class.v8::internal::Vector", [128 x i8] }
%"class.v8::internal::Vector" = type { i8*, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.v8::PromiseRejectMessage" = type { %"class.v8::Local.982", i32, %"class.v8::Local.84" }
%"class.v8::Local.982" = type { %"class.v8::Promise"* }
%"class.v8::StartupData" = type { i8*, i32 }
%"class.v8_inspector::V8Inspector" = type opaque
%"class.v8::internal::compiler::NodeObserver" = type opaque
%"class.v8::internal::OptimizingCompileDispatcher" = type opaque
%"class.std::__1::unique_ptr.1113" = type { %"class.std::__1::__compressed_pair.1114" }
%"class.std::__1::__compressed_pair.1114" = type { %"struct.std::__1::__compressed_pair_elem.1115" }
%"struct.std::__1::__compressed_pair_elem.1115" = type { %"class.v8::internal::PersistentHandlesList"* }
%"class.v8::internal::PersistentHandlesList" = type { %"class.v8::base::Mutex", %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.1119" = type { %"class.std::__1::__vector_base.1120" }
%"class.std::__1::__vector_base.1120" = type { void (%"class.v8::Isolate"*)**, void (%"class.v8::Isolate"*)**, %"class.std::__1::__compressed_pair.1121" }
%"class.std::__1::__compressed_pair.1121" = type { %"struct.std::__1::__compressed_pair_elem.1122" }
%"struct.std::__1::__compressed_pair_elem.1122" = type { void (%"class.v8::Isolate"*)** }
%"class.std::__1::shared_ptr.1126" = type { %"class.v8::internal::metrics::Recorder"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::metrics::Recorder" = type opaque
%"class.std::__1::unordered_map.1127" = type { %"class.std::__1::__hash_table.1128" }
%"class.std::__1::__hash_table.1128" = type <{ %"class.std::__1::unique_ptr.1129", %"class.std::__1::__compressed_pair.1139", %"class.std::__1::__compressed_pair.1144", %"class.std::__1::__compressed_pair.1147", [4 x i8] }>
%"class.std::__1::unique_ptr.1129" = type { %"class.std::__1::__compressed_pair.1130" }
%"class.std::__1::__compressed_pair.1130" = type { %"struct.std::__1::__compressed_pair_elem.1131", %"struct.std::__1::__compressed_pair_elem.1133" }
%"struct.std::__1::__compressed_pair_elem.1131" = type { %"struct.std::__1::__hash_node_base.1132"** }
%"struct.std::__1::__hash_node_base.1132" = type { %"struct.std::__1::__hash_node_base.1132"* }
%"struct.std::__1::__compressed_pair_elem.1133" = type { %"class.std::__1::__bucket_list_deallocator.1134" }
%"class.std::__1::__bucket_list_deallocator.1134" = type { %"class.std::__1::__compressed_pair.1135" }
%"class.std::__1::__compressed_pair.1135" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.1139" = type { %"struct.std::__1::__compressed_pair_elem.1140" }
%"struct.std::__1::__compressed_pair_elem.1140" = type { %"struct.std::__1::__hash_node_base.1132" }
%"class.std::__1::__compressed_pair.1144" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.1147" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.v8::metrics::LongTaskStats" = type { i64, i64, i64 }
%"class.std::__1::vector.639" = type { %"class.std::__1::__vector_base.640" }
%"class.std::__1::__vector_base.640" = type { %"class.v8::internal::Object"*, %"class.v8::internal::Object"*, %"class.std::__1::__compressed_pair.641" }
%"class.std::__1::__compressed_pair.641" = type { %"struct.std::__1::__compressed_pair_elem.642" }
%"struct.std::__1::__compressed_pair_elem.642" = type { %"class.v8::internal::Object"* }
%"class.v8::internal::BuiltinsConstantsTableBuilder" = type opaque
%"class.v8::ArrayBuffer::Allocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.258" = type { %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::FutexWaitListNode" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::shared_ptr.1151", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::base::ConditionVariable", %"class.v8::internal::FutexWaitListNode"*, %"class.v8::internal::FutexWaitListNode"*, %"class.std::__1::weak_ptr.1180", i64, i8*, i8, i8, %"class.v8::Global", %"class.v8::Global.1181", %"class.v8::base::TimeTicks", i64 }
%"class.std::__1::shared_ptr.1151" = type { %"class.v8::TaskRunner"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::TaskRunner" = type { i32 (...)** }
%"class.v8::base::ConditionVariable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.1176, %union.anon.1178, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.1176 = type { i64 }
%union.anon.1178 = type { i64 }
%"class.std::__1::weak_ptr.1180" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::Global" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Promise"* }
%"class.v8::Global.1181" = type { %"class.v8::PersistentBase.1182" }
%"class.v8::PersistentBase.1182" = type { %"class.v8::Context"* }
%"class.v8::internal::CancelableTaskManager" = type <{ i64, %"class.std::__1::unordered_map.1152", %"class.v8::base::ConditionVariable", %"class.v8::base::Mutex", i8, [7 x i8] }>
%"class.std::__1::unordered_map.1152" = type { %"class.std::__1::__hash_table.1153" }
%"class.std::__1::__hash_table.1153" = type <{ %"class.std::__1::unique_ptr.1154", %"class.std::__1::__compressed_pair.1164", %"class.std::__1::__compressed_pair.1169", %"class.std::__1::__compressed_pair.1172", [4 x i8] }>
%"class.std::__1::unique_ptr.1154" = type { %"class.std::__1::__compressed_pair.1155" }
%"class.std::__1::__compressed_pair.1155" = type { %"struct.std::__1::__compressed_pair_elem.1156", %"struct.std::__1::__compressed_pair_elem.1158" }
%"struct.std::__1::__compressed_pair_elem.1156" = type { %"struct.std::__1::__hash_node_base.1157"** }
%"struct.std::__1::__hash_node_base.1157" = type { %"struct.std::__1::__hash_node_base.1157"* }
%"struct.std::__1::__compressed_pair_elem.1158" = type { %"class.std::__1::__bucket_list_deallocator.1159" }
%"class.std::__1::__bucket_list_deallocator.1159" = type { %"class.std::__1::__compressed_pair.1160" }
%"class.std::__1::__compressed_pair.1160" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.1164" = type { %"struct.std::__1::__compressed_pair_elem.1165" }
%"struct.std::__1::__compressed_pair_elem.1165" = type { %"struct.std::__1::__hash_node_base.1157" }
%"class.std::__1::__compressed_pair.1169" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.1172" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.v8::debug::ConsoleDelegate" = type { i32 (...)** }
%"class.v8::debug::AsyncEventDelegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr.1183" = type { %"class.std::__1::__compressed_pair.1184" }
%"class.std::__1::__compressed_pair.1184" = type { %"struct.std::__1::__compressed_pair_elem.1185" }
%"struct.std::__1::__compressed_pair_elem.1185" = type { %"class.v8::internal::LocalIsolate"* }
%"class.v8::internal::LocalIsolate" = type { %"class.v8::internal::HiddenLocalFactory", %"class.v8::internal::LocalHeap", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.1212", %"class.v8::internal::ThreadId", i64, %"class.v8::internal::RuntimeCallStats"* }
%"class.v8::internal::HiddenLocalFactory" = type { %"class.v8::internal::LocalFactory" }
%"class.v8::internal::LocalFactory" = type { %"class.v8::internal::ReadOnlyRoots" }
%"class.v8::internal::ReadOnlyRoots" = type { i64* }
%"class.std::__1::unique_ptr.1212" = type { %"class.std::__1::__compressed_pair.1213" }
%"class.std::__1::__compressed_pair.1213" = type { %"struct.std::__1::__compressed_pair_elem.1214" }
%"struct.std::__1::__compressed_pair_elem.1214" = type { %"class.v8::internal::LocalLogger"* }
%"class.v8::internal::LocalLogger" = type opaque
%"struct.v8::internal::ManagedPtrDestructor" = type { i64, %"struct.v8::internal::ManagedPtrDestructor"*, %"struct.v8::internal::ManagedPtrDestructor"*, i8*, void (i8*)*, i64* }
%"class.v8::internal::wasm::WasmEngine" = type opaque
%"class.std::__1::unique_ptr.1221" = type { %"class.std::__1::__compressed_pair.1222" }
%"class.std::__1::__compressed_pair.1222" = type { %"struct.std::__1::__compressed_pair_elem.1223" }
%"struct.std::__1::__compressed_pair_elem.1223" = type { %"class.v8::internal::TracingCpuProfilerImpl"* }
%"class.v8::internal::TracingCpuProfilerImpl" = type opaque
%"class.v8::internal::EmbeddedFileWriterInterface" = type opaque
%"class.v8::Context::BackupIncumbentScope" = type { %"class.v8::Local.983", i64, %"class.v8::Context::BackupIncumbentScope"* }
%"class.v8::Local.983" = type { %"class.v8::Context"* }
%"class.v8::internal::Isolate::ThreadDataTable" = type { %"class.std::__1::unordered_map.1229" }
%"class.std::__1::unordered_map.1229" = type { %"class.std::__1::__hash_table.1230" }
%"class.std::__1::__hash_table.1230" = type <{ %"class.std::__1::unique_ptr.1231", %"class.std::__1::__compressed_pair.1241", %"class.std::__1::__compressed_pair.1246", %"class.std::__1::__compressed_pair.1249", [4 x i8] }>
%"class.std::__1::unique_ptr.1231" = type { %"class.std::__1::__compressed_pair.1232" }
%"class.std::__1::__compressed_pair.1232" = type { %"struct.std::__1::__compressed_pair_elem.1233", %"struct.std::__1::__compressed_pair_elem.1235" }
%"struct.std::__1::__compressed_pair_elem.1233" = type { %"struct.std::__1::__hash_node_base.1234"** }
%"struct.std::__1::__hash_node_base.1234" = type { %"struct.std::__1::__hash_node_base.1234"* }
%"struct.std::__1::__compressed_pair_elem.1235" = type { %"class.std::__1::__bucket_list_deallocator.1236" }
%"class.std::__1::__bucket_list_deallocator.1236" = type { %"class.std::__1::__compressed_pair.1237" }
%"class.std::__1::__compressed_pair.1237" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.1241" = type { %"struct.std::__1::__compressed_pair_elem.1242" }
%"struct.std::__1::__compressed_pair_elem.1242" = type { %"struct.std::__1::__hash_node_base.1234" }
%"class.std::__1::__compressed_pair.1246" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.1249" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%"struct.std::__1::atomic.1255" = type { %"struct.std::__1::__atomic_base.1256" }
%"struct.std::__1::__atomic_base.1256" = type { %"struct.std::__1::__cxx_atomic_impl.1257" }
%"struct.std::__1::__cxx_atomic_impl.1257" = type { %"struct.std::__1::__cxx_atomic_base_impl.1258" }
%"struct.std::__1::__cxx_atomic_base_impl.1258" = type { %"class.std::__1::vector.1259"* }
%"class.std::__1::vector.1259" = type { %"class.std::__1::__vector_base.1260" }
%"class.std::__1::__vector_base.1260" = type { %"struct.v8::MemoryRange"*, %"struct.v8::MemoryRange"*, %"class.std::__1::__compressed_pair.1261" }
%"struct.v8::MemoryRange" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.1261" = type { %"struct.std::__1::__compressed_pair_elem.1262" }
%"struct.std::__1::__compressed_pair_elem.1262" = type { %"struct.v8::MemoryRange"* }
%"class.v8::internal::FactoryBase" = type { i8 }
%"class.v8::internal::StringConstantBase" = type { i32, %"class.v8::internal::Handle.82" }
%"class.v8::internal::Handle.82" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", [7 x i8], %"struct.std::__1::__value_type" }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>
%"struct.std::__1::__value_type" = type { %"struct.std::__1::pair.1269" }
%"struct.std::__1::pair.1269" = type <{ i64, i32, [4 x i8] }>
%"class.v8::internal::CodeDesc" = type { i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i32, %"class.v8::internal::Assembler"* }
%"class.v8::internal::SafepointTableBuilder" = type { %"class.v8::internal::ZoneChunkList", i32, i8, %"class.v8::internal::Zone"* }
%"class.v8::internal::ZoneChunkList" = type { %"class.v8::internal::Zone"*, i64, %"struct.v8::internal::ZoneChunkList<v8::internal::SafepointTableBuilder::DeoptimizationInfo>::Chunk"*, %"struct.v8::internal::ZoneChunkList<v8::internal::SafepointTableBuilder::DeoptimizationInfo>::Chunk"* }
%"struct.v8::internal::ZoneChunkList<v8::internal::SafepointTableBuilder::DeoptimizationInfo>::Chunk" = type { i32, i32, %"struct.v8::internal::ZoneChunkList<v8::internal::SafepointTableBuilder::DeoptimizationInfo>::Chunk"*, %"struct.v8::internal::ZoneChunkList<v8::internal::SafepointTableBuilder::DeoptimizationInfo>::Chunk"* }
%"class.v8::internal::Label" = type { i32, i32 }
%"class.std::__1::__tree_node.1297" = type { %"class.std::__1::__tree_node_base.base", %"struct.std::__1::__value_type.1298" }
%"struct.std::__1::__value_type.1298" = type { %"struct.std::__1::pair.1273" }
%"struct.std::__1::pair.1273" = type { %"class.v8::internal::Label"*, %"class.std::__1::vector.967" }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE = comdat any

$_ZN2v88internal9AssemblerD2Ev = comdat any

$_ZN2v88internal9AssemblerD0Ev = comdat any

$_ZN2v88internal13AssemblerBase21AbortedCodeGenerationEv = comdat any

$_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_ = comdat any

$_ZNSt3__16__treeINS_12__value_typeImiEENS_19__map_value_compareImS2_NS_4lessImEELb1EEENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE = comdat any

$_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEmRKj = comdat any

$_ZNSt3__15dequeIiNS_9allocatorIiEEE19__add_back_capacityEv = comdat any

$_ZNSt3__114__split_bufferIPiNS_9allocatorIS1_EEE9push_backEOS1_ = comdat any

$_ZNSt3__114__split_bufferIPiNS_9allocatorIS1_EEE10push_frontEOS1_ = comdat any

$_ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_ = comdat any

$_ZNSt3__112__deque_baseIiNS_9allocatorIiEEED2Ev = comdat any

$_ZNSt3__16__treeINS_12__value_typeIPN2v88internal5LabelENS_6vectorIiNS_9allocatorIiEEEEEENS_19__map_value_compareIS5_SA_NS_4lessIS5_EELb1EEENS7_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE = comdat any

$_ZTVN2v88internal9AssemblerE = comdat any

@_ZN2v88internal28FLAG_wasm_simd_ssse3_codegenE = external local_unnamed_addr global i8, align 1
@.str = private unnamed_addr constant [18 x i8] c"Check failed: %s.\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"cpu.has_sse2()\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"cpu.has_cmov()\00", align 1
@_ZN2v88internal16FLAG_enable_sahfE = external local_unnamed_addr global i8, align 1
@_ZN2v88internal16FLAG_enable_bmi1E = external local_unnamed_addr global i8, align 1
@_ZN2v88internal16FLAG_enable_bmi2E = external local_unnamed_addr global i8, align 1
@_ZN2v88internal17FLAG_enable_lzcntE = external local_unnamed_addr global i8, align 1
@_ZN2v88internal18FLAG_enable_popcntE = external local_unnamed_addr global i8, align 1
@_ZN2v88internal9FLAG_mcpuE = external local_unnamed_addr global i8*, align 8
@.str.3 = private unnamed_addr constant [5 x i8] c"auto\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"atom\00", align 1
@_ZN2v88internal16FLAG_enable_sse3E = external local_unnamed_addr global i8, align 1
@_ZN2v88internal17FLAG_enable_ssse3E = external local_unnamed_addr global i8, align 1
@_ZN2v88internal18FLAG_enable_sse4_1E = external local_unnamed_addr global i8, align 1
@_ZN2v88internal18FLAG_enable_sse4_2E = external local_unnamed_addr global i8, align 1
@_ZN2v88internal15FLAG_enable_avxE = external local_unnamed_addr global i8, align 1
@_ZN2v88internal16FLAG_enable_avx2E = external local_unnamed_addr global i8, align 1
@_ZN2v88internal16FLAG_enable_fma3E = external local_unnamed_addr global i8, align 1
@_ZN2v88internal11CpuFeatures23supports_wasm_simd_128_E = external local_unnamed_addr global i8, align 1
@.str.5 = private unnamed_addr constant [112 x i8] c"SSE3=%d SSSE3=%d SSE4_1=%d SSE4_2=%d SAHF=%d AVX=%d AVX2=%d FMA3=%d BMI1=%d BMI2=%d LZCNT=%d POPCNT=%d ATOM=%d\0A\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"(str) != nullptr\00", align 1
@_ZN2v88internal26FLAG_partial_constant_poolE = external local_unnamed_addr global i8, align 1
@_ZTVN2v88internal9AssemblerE = linkonce_odr hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.v8::internal::Assembler"*)* @_ZN2v88internal9AssemblerD2Ev to i8*), i8* bitcast (void (%"class.v8::internal::Assembler"*)* @_ZN2v88internal9AssemblerD0Ev to i8*), i8* bitcast (void (%"class.v8::internal::AssemblerBase"*)* @_ZN2v88internal13AssemblerBase21AbortedCodeGenerationEv to i8*)] }, comdat, align 8
@.str.7 = private unnamed_addr constant [14 x i8] c"is_int8(disp)\00", align 1
@.str.8 = private unnamed_addr constant [26 x i8] c"jump_opt->is_optimizing()\00", align 1
@.str.9 = private unnamed_addr constant [43 x i8] c"idx < static_cast<int>(bitmap.size() * 32)\00", align 1
@.str.10 = private unnamed_addr constant [22 x i8] c"Assembler::GrowBuffer\00", align 1
@.str.11 = private unnamed_addr constant [32 x i8] c"f\90\0F\1F\00\0F\1F@\00f\0F\1FD\00\00\0F\1F\80\00\00\00\00f\0F\1F\84\00\00\00\00\00\00", align 1
@_ZZN2v88internal9Assembler3NopEiE11kNopOffsets = internal unnamed_addr constant [10 x i8] c"\00\01\00\02\05\0A\09\0F\17\16", align 1
@_ZN2v88internal9RelocInfo10kApplyMaskE = hidden local_unnamed_addr constant i32 1346, align 4
@_ZN2v88internal11CpuFeatures10supported_E = external local_unnamed_addr global i32, align 4
@.str.14 = private unnamed_addr constant [17 x i8] c"unreachable code\00", align 1

@_ZN2v88internal7OperandC1ES1_i = hidden unnamed_addr alias void (%"class.v8::internal::Operand"*, i64, i32, i32), void (%"class.v8::internal::Operand"*, i64, i32, i32)* @_ZN2v88internal7OperandC2ES1_i
@_ZN2v88internal9AssemblerC1ERKNS0_16AssemblerOptionsENSt3__110unique_ptrINS0_15AssemblerBufferENS5_14default_deleteIS7_EEEE = hidden unnamed_addr alias void (%"class.v8::internal::Assembler"*, %"struct.v8::internal::AssemblerOptions"*, %"class.v8::internal::AssemblerBuffer"*), void (%"class.v8::internal::Assembler"*, %"struct.v8::internal::AssemblerOptions"*, %"class.v8::internal::AssemblerBuffer"*)* @_ZN2v88internal9AssemblerC2ERKNS0_16AssemblerOptionsENSt3__110unique_ptrINS0_15AssemblerBufferENS5_14default_deleteIS7_EEEE

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN2v88internal11CpuFeatures19SupportsWasmSimd128Ev() local_unnamed_addr #0 align 2 {
  %1 = load i32, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  %2 = and i32 %1, 2
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %10

4:                                                ; preds = %0
  %5 = load i8, i8* @_ZN2v88internal28FLAG_wasm_simd_ssse3_codegenE, align 1, !range !2
  %6 = icmp ne i8 %5, 0
  %7 = and i32 %1, 4
  %8 = icmp ne i32 %7, 0
  %9 = and i1 %8, %6
  ret i1 %9

10:                                               ; preds = %0
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal11CpuFeatures9ProbeImplEb(i1 zeroext) local_unnamed_addr #1 align 2 {
  %2 = alloca %"class.v8::base::CPU", align 4
  %3 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %2, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %3) #14
  call void @_ZN2v84base3CPUC1Ev(%"class.v8::base::CPU"* nonnull %2) #14
  %4 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %2, i64 0, i32 19
  %5 = load i8, i8* %4, align 1, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %8, !prof !3

7:                                                ; preds = %1
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0)) #15
  unreachable

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %2, i64 0, i32 15
  %10 = load i8, i8* %9, align 1, !range !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %13, !prof !3

12:                                               ; preds = %8
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0)) #15
  unreachable

13:                                               ; preds = %8
  br i1 %0, label %210, label %14

14:                                               ; preds = %13
  %15 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %2, i64 0, i32 23
  %16 = load i8, i8* %15, align 1, !range !2
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %21, label %18

18:                                               ; preds = %14
  %19 = load i32, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  %20 = or i32 %19, 1
  store i32 %20, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  br label %21

21:                                               ; preds = %14, %18
  %22 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %2, i64 0, i32 22
  %23 = load i8, i8* %22, align 4, !range !2
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %28, label %25

25:                                               ; preds = %21
  %26 = load i32, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  %27 = or i32 %26, 2
  store i32 %27, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  br label %28

28:                                               ; preds = %21, %25
  %29 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %2, i64 0, i32 21
  %30 = load i8, i8* %29, align 1, !range !2
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %35, label %32

32:                                               ; preds = %28
  %33 = load i32, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  %34 = or i32 %33, 4
  store i32 %34, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  br label %35

35:                                               ; preds = %28, %32
  %36 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %2, i64 0, i32 20
  %37 = load i8, i8* %36, align 2, !range !2
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %42, label %39

39:                                               ; preds = %35
  %40 = load i32, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  %41 = or i32 %40, 8
  store i32 %41, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  br label %42

42:                                               ; preds = %35, %39
  %43 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %2, i64 0, i32 26
  %44 = load i8, i8* %43, align 4, !range !2
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %70, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %2, i64 0, i32 25
  %48 = load i8, i8* %47, align 1, !range !2
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %70, label %50

50:                                               ; preds = %46
  %51 = call { i32, i32 } asm sideeffect ".byte 0x0F, 0x01, 0xD0", "={ax},={dx},{cx},~{dirflag},~{fpsr},~{flags}"(i32 0) #14, !srcloc !4
  %52 = extractvalue { i32, i32 } %51, 0
  %53 = and i32 %52, 6
  %54 = icmp eq i32 %53, 6
  br i1 %54, label %55, label %70

55:                                               ; preds = %50
  %56 = load i32, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  %57 = or i32 %56, 32
  store i32 %57, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  %58 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %2, i64 0, i32 27
  %59 = load i8, i8* %58, align 1, !range !2
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %63, label %61

61:                                               ; preds = %55
  %62 = or i32 %56, 96
  store i32 %62, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  br label %63

63:                                               ; preds = %55, %61
  %64 = phi i32 [ %57, %55 ], [ %62, %61 ]
  %65 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %2, i64 0, i32 28
  %66 = load i8, i8* %65, align 2, !range !2
  %67 = icmp eq i8 %66, 0
  br i1 %67, label %70, label %68

68:                                               ; preds = %63
  %69 = or i32 %64, 128
  store i32 %69, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  br label %70

70:                                               ; preds = %63, %46, %42, %68, %50
  %71 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %2, i64 0, i32 16
  %72 = load i8, i8* %71, align 2, !range !2
  %73 = icmp eq i8 %72, 0
  %74 = load i8, i8* @_ZN2v88internal16FLAG_enable_sahfE, align 1
  %75 = icmp eq i8 %74, 0
  %76 = or i1 %73, %75
  br i1 %76, label %80, label %77

77:                                               ; preds = %70
  %78 = load i32, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  %79 = or i32 %78, 16
  store i32 %79, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  br label %80

80:                                               ; preds = %70, %77
  %81 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %2, i64 0, i32 29
  %82 = load i8, i8* %81, align 1, !range !2
  %83 = icmp eq i8 %82, 0
  %84 = load i8, i8* @_ZN2v88internal16FLAG_enable_bmi1E, align 1
  %85 = icmp eq i8 %84, 0
  %86 = or i1 %83, %85
  br i1 %86, label %90, label %87

87:                                               ; preds = %80
  %88 = load i32, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  %89 = or i32 %88, 256
  store i32 %89, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  br label %90

90:                                               ; preds = %80, %87
  %91 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %2, i64 0, i32 30
  %92 = load i8, i8* %91, align 4, !range !2
  %93 = icmp eq i8 %92, 0
  %94 = load i8, i8* @_ZN2v88internal16FLAG_enable_bmi2E, align 1
  %95 = icmp eq i8 %94, 0
  %96 = or i1 %93, %95
  br i1 %96, label %100, label %97

97:                                               ; preds = %90
  %98 = load i32, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  %99 = or i32 %98, 512
  store i32 %99, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  br label %100

100:                                              ; preds = %90, %97
  %101 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %2, i64 0, i32 31
  %102 = load i8, i8* %101, align 1, !range !2
  %103 = icmp eq i8 %102, 0
  %104 = load i8, i8* @_ZN2v88internal17FLAG_enable_lzcntE, align 1
  %105 = icmp eq i8 %104, 0
  %106 = or i1 %103, %105
  br i1 %106, label %110, label %107

107:                                              ; preds = %100
  %108 = load i32, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  %109 = or i32 %108, 1024
  store i32 %109, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  br label %110

110:                                              ; preds = %100, %107
  %111 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %2, i64 0, i32 32
  %112 = load i8, i8* %111, align 2, !range !2
  %113 = icmp eq i8 %112, 0
  %114 = load i8, i8* @_ZN2v88internal18FLAG_enable_popcntE, align 1
  %115 = icmp eq i8 %114, 0
  %116 = or i1 %113, %115
  br i1 %116, label %120, label %117

117:                                              ; preds = %110
  %118 = load i32, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  %119 = or i32 %118, 2048
  store i32 %119, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  br label %120

120:                                              ; preds = %110, %117
  %121 = load i8*, i8** @_ZN2v88internal9FLAG_mcpuE, align 8
  %122 = call i32 @strcmp(i8* %121, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0)) #16
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %124, label %131

124:                                              ; preds = %120
  %125 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %2, i64 0, i32 24
  %126 = load i8, i8* %125, align 2, !range !2
  %127 = icmp eq i8 %126, 0
  br i1 %127, label %137, label %128

128:                                              ; preds = %124
  %129 = load i32, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  %130 = or i32 %129, 4096
  store i32 %130, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  br label %137

131:                                              ; preds = %120
  %132 = call i32 @strcmp(i8* %121, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0)) #16
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %137

134:                                              ; preds = %131
  %135 = load i32, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  %136 = or i32 %135, 4096
  store i32 %136, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  br label %137

137:                                              ; preds = %124, %131, %134, %128
  %138 = load i8, i8* @_ZN2v88internal16FLAG_enable_sse3E, align 1, !range !2
  %139 = icmp eq i8 %138, 0
  br i1 %139, label %140, label %143

140:                                              ; preds = %137
  %141 = load i32, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  %142 = and i32 %141, -9
  store i32 %142, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  br label %143

143:                                              ; preds = %137, %140
  %144 = load i8, i8* @_ZN2v88internal17FLAG_enable_ssse3E, align 1, !range !2
  %145 = icmp eq i8 %144, 0
  %146 = load i32, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  %147 = and i32 %146, 8
  %148 = icmp eq i32 %147, 0
  %149 = or i1 %145, %148
  br i1 %149, label %150, label %152

150:                                              ; preds = %143
  %151 = and i32 %146, -5
  store i32 %151, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  br label %152

152:                                              ; preds = %143, %150
  %153 = phi i32 [ %151, %150 ], [ %146, %143 ]
  %154 = load i8, i8* @_ZN2v88internal18FLAG_enable_sse4_1E, align 1, !range !2
  %155 = icmp eq i8 %154, 0
  %156 = and i32 %153, 4
  %157 = icmp eq i32 %156, 0
  %158 = or i1 %155, %157
  br i1 %158, label %159, label %161

159:                                              ; preds = %152
  %160 = and i32 %153, -3
  store i32 %160, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  br label %161

161:                                              ; preds = %152, %159
  %162 = phi i32 [ %160, %159 ], [ %153, %152 ]
  %163 = load i8, i8* @_ZN2v88internal18FLAG_enable_sse4_2E, align 1, !range !2
  %164 = icmp eq i8 %163, 0
  %165 = and i32 %162, 2
  %166 = icmp eq i32 %165, 0
  %167 = or i1 %164, %166
  br i1 %167, label %168, label %170

168:                                              ; preds = %161
  %169 = and i32 %162, -2
  store i32 %169, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  br label %170

170:                                              ; preds = %161, %168
  %171 = phi i32 [ %169, %168 ], [ %162, %161 ]
  %172 = load i8, i8* @_ZN2v88internal15FLAG_enable_avxE, align 1, !range !2
  %173 = icmp eq i8 %172, 0
  %174 = and i32 %171, 1
  %175 = icmp eq i32 %174, 0
  %176 = or i1 %173, %175
  br i1 %176, label %177, label %179

177:                                              ; preds = %170
  %178 = and i32 %171, -33
  store i32 %178, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  br label %179

179:                                              ; preds = %170, %177
  %180 = phi i32 [ %178, %177 ], [ %171, %170 ]
  %181 = load i8, i8* @_ZN2v88internal16FLAG_enable_avx2E, align 1, !range !2
  %182 = icmp eq i8 %181, 0
  %183 = and i32 %180, 32
  %184 = icmp eq i32 %183, 0
  %185 = or i1 %182, %184
  br i1 %185, label %186, label %188

186:                                              ; preds = %179
  %187 = and i32 %180, -65
  store i32 %187, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  br label %188

188:                                              ; preds = %179, %186
  %189 = phi i32 [ %187, %186 ], [ %180, %179 ]
  %190 = load i8, i8* @_ZN2v88internal16FLAG_enable_fma3E, align 1, !range !2
  %191 = icmp eq i8 %190, 0
  %192 = and i32 %189, 32
  %193 = icmp eq i32 %192, 0
  %194 = or i1 %191, %193
  br i1 %194, label %195, label %197

195:                                              ; preds = %188
  %196 = and i32 %189, -129
  store i32 %196, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  br label %197

197:                                              ; preds = %188, %195
  %198 = phi i32 [ %196, %195 ], [ %189, %188 ]
  %199 = and i32 %198, 2
  %200 = icmp eq i32 %199, 0
  br i1 %200, label %201, label %208

201:                                              ; preds = %197
  %202 = load i8, i8* @_ZN2v88internal28FLAG_wasm_simd_ssse3_codegenE, align 1, !range !2
  %203 = icmp ne i8 %202, 0
  %204 = and i32 %198, 4
  %205 = icmp ne i32 %204, 0
  %206 = and i1 %205, %203
  %207 = zext i1 %206 to i8
  br label %208

208:                                              ; preds = %197, %201
  %209 = phi i8 [ %207, %201 ], [ 1, %197 ]
  store i8 %209, i8* @_ZN2v88internal11CpuFeatures23supports_wasm_simd_128_E, align 1
  br label %210

210:                                              ; preds = %13, %208
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %3) #14
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN2v84base3CPUC1Ev(%"class.v8::base::CPU"*) unnamed_addr #3

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #4

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2v88internal11CpuFeatures11PrintTargetEv() local_unnamed_addr #6 align 2 {
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN2v88internal11CpuFeatures13PrintFeaturesEv() local_unnamed_addr #7 align 2 {
  %1 = load i32, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  %2 = lshr i32 %1, 3
  %3 = and i32 %2, 1
  %4 = lshr i32 %1, 2
  %5 = and i32 %4, 1
  %6 = lshr i32 %1, 1
  %7 = and i32 %6, 1
  %8 = and i32 %1, 1
  %9 = lshr i32 %1, 4
  %10 = and i32 %9, 1
  %11 = lshr i32 %1, 5
  %12 = and i32 %11, 1
  %13 = lshr i32 %1, 6
  %14 = and i32 %13, 1
  %15 = lshr i32 %1, 7
  %16 = and i32 %15, 1
  %17 = lshr i32 %1, 8
  %18 = and i32 %17, 1
  %19 = lshr i32 %1, 9
  %20 = and i32 %19, 1
  %21 = lshr i32 %1, 10
  %22 = and i32 %21, 1
  %23 = lshr i32 %1, 11
  %24 = and i32 %23, 1
  %25 = lshr i32 %1, 12
  %26 = and i32 %25, 1
  %27 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.5, i64 0, i64 0), i32 %3, i32 %5, i32 %7, i32 %8, i32 %10, i32 %12, i32 %14, i32 %16, i32 %18, i32 %20, i32 %22, i32 %24, i32 %26)
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #8

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2v88internal9RelocInfo13wasm_call_tagEv(%"class.v8::internal::RelocInfo"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = bitcast %"class.v8::internal::RelocInfo"* %0 to i32**
  %3 = load i32*, i32** %2, align 8
  %4 = load i32, i32* %3, align 1
  ret i32 %4
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal7OperandC2ES1_i(%"class.v8::internal::Operand"*, i64, i32, i32) unnamed_addr #9 align 2 {
  %5 = alloca %"class.v8::internal::Operand", align 8
  %6 = bitcast %"class.v8::internal::Operand"* %5 to i64*
  store i64 %1, i64* %6, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 7
  %8 = bitcast i8* %7 to i32*
  store i32 %2, i32* %8, align 1
  %9 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %0, i64 0, i32 0, i32 0
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %0, i64 0, i32 0, i32 2
  store i8 1, i8* %10, align 1
  %11 = lshr i64 %1, 8
  %12 = trunc i64 %11 to i8
  %13 = and i8 %12, 7
  %14 = icmp eq i8 %13, 4
  %15 = and i8 %12, -64
  %16 = select i1 %14, i32 2, i32 1
  %17 = lshr i64 %1, 16
  %18 = trunc i64 %17 to i8
  %19 = select i1 %14, i8 %18, i8 %12
  %20 = and i8 %19, 7
  %21 = icmp eq i8 %15, 0
  %22 = icmp eq i8 %20, 5
  %23 = and i1 %21, %22
  %24 = icmp eq i8 %15, -128
  %25 = or i1 %24, %23
  %26 = trunc i64 %1 to i8
  br i1 %25, label %27, label %32

27:                                               ; preds = %4
  %28 = zext i32 %16 to i64
  %29 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %28
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 1
  br label %39

32:                                               ; preds = %4
  %33 = icmp eq i8 %15, 64
  br i1 %33, label %34, label %39

34:                                               ; preds = %32
  %35 = zext i32 %16 to i64
  %36 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %35
  %37 = load i8, i8* %36, align 1
  %38 = sext i8 %37 to i32
  br label %39

39:                                               ; preds = %32, %34, %27
  %40 = phi i32 [ %31, %27 ], [ %38, %34 ], [ 0, %32 ]
  %41 = add nsw i32 %40, %3
  store i8 %26, i8* %9, align 1
  %42 = sext i32 %41 to i64
  %43 = add nsw i64 %42, 128
  %44 = icmp ugt i64 %43, 255
  %45 = or i1 %23, %44
  br i1 %45, label %46, label %56

46:                                               ; preds = %39
  %47 = and i8 %12, 63
  %48 = select i1 %23, i8 0, i8 -128
  %49 = or i8 %48, %47
  %50 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %0, i64 0, i32 0, i32 1, i64 0
  store i8 %49, i8* %50, align 1
  %51 = trunc i32 %16 to i8
  %52 = or i8 %51, 4
  store i8 %52, i8* %10, align 1
  %53 = zext i32 %16 to i64
  %54 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %0, i64 0, i32 0, i32 1, i64 %53
  %55 = bitcast i8* %54 to i32*
  store i32 %41, i32* %55, align 1
  br label %71

56:                                               ; preds = %39
  %57 = icmp ne i32 %41, 0
  %58 = or i1 %22, %57
  %59 = and i8 %12, 63
  br i1 %58, label %60, label %68

60:                                               ; preds = %56
  %61 = or i8 %59, 64
  %62 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %0, i64 0, i32 0, i32 1, i64 0
  store i8 %61, i8* %62, align 1
  %63 = trunc i32 %16 to i8
  %64 = add nuw nsw i8 %63, 1
  store i8 %64, i8* %10, align 1
  %65 = trunc i32 %41 to i8
  %66 = zext i32 %16 to i64
  %67 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %0, i64 0, i32 0, i32 1, i64 %66
  store i8 %65, i8* %67, align 1
  br label %71

68:                                               ; preds = %56
  %69 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %0, i64 0, i32 0, i32 1, i64 0
  store i8 %59, i8* %69, align 1
  %70 = trunc i32 %16 to i8
  store i8 %70, i8* %10, align 1
  br label %71

71:                                               ; preds = %60, %68, %46
  br i1 %14, label %72, label %74

72:                                               ; preds = %71
  %73 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %0, i64 0, i32 0, i32 1, i64 1
  store i8 %18, i8* %73, align 1
  br label %74

74:                                               ; preds = %72, %71
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal7Operand19AddressUsesRegisterENS0_8RegisterE(%"class.v8::internal::Operand"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %0, i64 0, i32 0, i32 1, i64 0
  %4 = load i8, i8* %3, align 1
  %5 = and i8 %4, 7
  %6 = icmp eq i8 %5, 4
  br i1 %6, label %7, label %32

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %0, i64 0, i32 0, i32 1, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = lshr i8 %9, 3
  %11 = and i8 %10, 7
  %12 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %0, i64 0, i32 0, i32 0
  %13 = load i8, i8* %12, align 1
  %14 = shl i8 %13, 2
  %15 = and i8 %14, 8
  %16 = or i8 %15, %11
  %17 = zext i8 %16 to i32
  %18 = icmp ne i8 %16, 4
  %19 = icmp eq i32 %17, %1
  %20 = and i1 %18, %19
  br i1 %20, label %43, label %21

21:                                               ; preds = %7
  %22 = and i8 %9, 7
  %23 = shl i8 %13, 3
  %24 = and i8 %23, 8
  %25 = or i8 %24, %22
  %26 = zext i8 %25 to i32
  %27 = icmp ne i8 %25, 5
  %28 = icmp ugt i8 %4, 63
  %29 = icmp eq i32 %26, %1
  %30 = or i1 %28, %27
  %31 = and i1 %29, %30
  ret i1 %31

32:                                               ; preds = %2
  %33 = and i8 %4, -57
  %34 = icmp eq i8 %33, 5
  br i1 %34, label %43, label %35

35:                                               ; preds = %32
  %36 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %0, i64 0, i32 0, i32 0
  %37 = load i8, i8* %36, align 1
  %38 = shl i8 %37, 3
  %39 = and i8 %38, 8
  %40 = or i8 %39, %5
  %41 = zext i8 %40 to i32
  %42 = icmp eq i32 %41, %1
  br label %43

43:                                               ; preds = %32, %7, %35
  %44 = phi i1 [ %42, %35 ], [ true, %7 ], [ false, %32 ]
  ret i1 %44
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler38AllocateAndInstallRequestedHeapObjectsEPNS0_7IsolateE(%"class.v8::internal::Assembler"* nocapture readonly, %"class.v8::internal::Isolate"*) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load %"struct.std::__1::__forward_list_node"*, %"struct.std::__1::__forward_list_node"** %3, align 8
  %5 = icmp eq %"struct.std::__1::__forward_list_node"* %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %8 = bitcast i8** %7 to i64*
  %9 = bitcast %"class.v8::internal::Isolate"* %1 to %"class.v8::internal::FactoryBase"*
  br label %11

10:                                               ; preds = %39, %2
  ret void

11:                                               ; preds = %6, %39
  %12 = phi %"struct.std::__1::__forward_list_node"* [ %4, %6 ], [ %41, %39 ]
  %13 = load i64, i64* %8, align 8
  %14 = getelementptr inbounds %"struct.std::__1::__forward_list_node", %"struct.std::__1::__forward_list_node"* %12, i64 0, i32 1, i32 3
  %15 = load i32, i32* %14, align 8
  %16 = sext i32 %15 to i64
  %17 = add i64 %13, %16
  %18 = getelementptr inbounds %"struct.std::__1::__forward_list_node", %"struct.std::__1::__forward_list_node"* %12, i64 0, i32 1, i32 0
  %19 = load i32, i32* %18, align 8
  switch i32 %19, label %39 [
    i32 0, label %20
    i32 1, label %28
  ]

20:                                               ; preds = %11
  %21 = getelementptr inbounds %"struct.std::__1::__forward_list_node", %"struct.std::__1::__forward_list_node"* %12, i64 0, i32 1, i32 2, i32 0
  %22 = bitcast double* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE13NewHeapNumberILNS0_14AllocationTypeE1EEENS0_6HandleINS0_10HeapNumberEEEv(%"class.v8::internal::FactoryBase"* %9) #14
  %25 = load i64, i64* %24, align 8
  %26 = add i64 %25, 3
  %27 = inttoptr i64 %26 to i64*
  store i64 %23, i64* %27, align 1
  br label %36

28:                                               ; preds = %11
  %29 = getelementptr inbounds %"struct.std::__1::__forward_list_node", %"struct.std::__1::__forward_list_node"* %12, i64 0, i32 1, i32 2
  %30 = bitcast %union.anon.81* %29 to %"class.v8::internal::StringConstantBase"**
  %31 = load %"class.v8::internal::StringConstantBase"*, %"class.v8::internal::StringConstantBase"** %30, align 8
  %32 = icmp eq %"class.v8::internal::StringConstantBase"* %31, null
  br i1 %32, label %33, label %34, !prof !3

33:                                               ; preds = %28
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0)) #15
  unreachable

34:                                               ; preds = %28
  %35 = tail call i64* @_ZNK2v88internal18StringConstantBase22AllocateStringConstantEPNS0_7IsolateE(%"class.v8::internal::StringConstantBase"* nonnull %31, %"class.v8::internal::Isolate"* %1) #14
  br label %36

36:                                               ; preds = %20, %34
  %37 = phi i64* [ %35, %34 ], [ %24, %20 ]
  %38 = inttoptr i64 %17 to i64**
  store i64* %37, i64** %38, align 1
  br label %39

39:                                               ; preds = %36, %11
  %40 = getelementptr inbounds %"struct.std::__1::__forward_list_node", %"struct.std::__1::__forward_list_node"* %12, i64 0, i32 0, i32 0
  %41 = load %"struct.std::__1::__forward_list_node"*, %"struct.std::__1::__forward_list_node"** %40, align 8
  %42 = icmp eq %"struct.std::__1::__forward_list_node"* %41, null
  br i1 %42, label %10, label %11
}

declare i64* @_ZNK2v88internal18StringConstantBase22AllocateStringConstantEPNS0_7IsolateE(%"class.v8::internal::StringConstantBase"*, %"class.v8::internal::Isolate"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal9ConstPool14AddSharedEntryEmi(%"class.v8::internal::ConstPool"*, i64, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::ConstPool", %"class.v8::internal::ConstPool"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.v8::internal::ConstPool", %"class.v8::internal::ConstPool"* %0, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0
  %6 = bitcast %"class.std::__1::__tree_end_node"* %5 to %"class.std::__1::__tree_node"**
  %7 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %6, align 8
  %8 = icmp eq %"class.std::__1::__tree_node"* %7, null
  br i1 %8, label %30, label %9

9:                                                ; preds = %3, %9
  %10 = phi %"class.std::__1::__tree_end_node"* [ %20, %9 ], [ %5, %3 ]
  %11 = phi %"class.std::__1::__tree_node"* [ %21, %9 ], [ %7, %3 ]
  %12 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %11, i64 0, i32 2, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = icmp ult i64 %13, %1
  %15 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %11, i64 0, i32 0, i32 1
  %16 = bitcast %"class.std::__1::__tree_node_base"** %15 to %"class.std::__1::__tree_node"**
  %17 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %11, i64 0, i32 0, i32 0
  %18 = bitcast %"class.std::__1::__tree_node"* %11 to %"class.std::__1::__tree_node"**
  %19 = select i1 %14, %"class.std::__1::__tree_node"** %16, %"class.std::__1::__tree_node"** %18
  %20 = select i1 %14, %"class.std::__1::__tree_end_node"* %10, %"class.std::__1::__tree_end_node"* %17
  %21 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %19, align 8
  %22 = icmp eq %"class.std::__1::__tree_node"* %21, null
  br i1 %22, label %23, label %9

23:                                               ; preds = %9
  %24 = icmp eq %"class.std::__1::__tree_end_node"* %20, %5
  br i1 %24, label %30, label %25

25:                                               ; preds = %23
  %26 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %20, i64 4
  %27 = bitcast %"class.std::__1::__tree_end_node"* %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = icmp ugt i64 %28, %1
  br i1 %29, label %30, label %77

30:                                               ; preds = %25, %23, %3
  %31 = add nsw i32 %2, 2
  %32 = tail call i8* @_Znwm(i64 48) #17, !noalias !5
  %33 = getelementptr inbounds i8, i8* %32, i64 32
  %34 = bitcast i8* %33 to i64*
  store i64 %1, i64* %34, align 8, !noalias !5
  %35 = getelementptr inbounds i8, i8* %32, i64 40
  %36 = bitcast i8* %35 to i32*
  store i32 %31, i32* %36, align 8, !noalias !5
  br i1 %8, label %59, label %37

37:                                               ; preds = %30, %56
  %38 = phi %"class.std::__1::__tree_node"* [ %58, %56 ], [ %7, %30 ]
  %39 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %38, i64 0, i32 2, i32 0, i32 0
  %40 = load i64, i64* %39, align 8
  %41 = icmp ugt i64 %40, %1
  br i1 %41, label %42, label %49

42:                                               ; preds = %37
  %43 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %38, i64 0, i32 0, i32 0, i32 0
  %44 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %43, align 8
  %45 = icmp eq %"class.std::__1::__tree_node_base"* %44, null
  br i1 %45, label %46, label %56

46:                                               ; preds = %42
  %47 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %38, i64 0, i32 0, i32 0, i32 0
  %48 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %38, i64 0, i32 0, i32 0
  br label %61

49:                                               ; preds = %37
  %50 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %38, i64 0, i32 0, i32 1
  %51 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %50, align 8
  %52 = icmp eq %"class.std::__1::__tree_node_base"* %51, null
  br i1 %52, label %53, label %56

53:                                               ; preds = %49
  %54 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %38, i64 0, i32 0, i32 1
  %55 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %38, i64 0, i32 0, i32 0
  br label %61

56:                                               ; preds = %49, %42
  %57 = phi %"class.std::__1::__tree_node_base"* [ %44, %42 ], [ %51, %49 ]
  %58 = bitcast %"class.std::__1::__tree_node_base"* %57 to %"class.std::__1::__tree_node"*
  br label %37

59:                                               ; preds = %30
  %60 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %5, i64 0, i32 0
  br label %61

61:                                               ; preds = %59, %53, %46
  %62 = phi %"class.std::__1::__tree_end_node"* [ %5, %59 ], [ %48, %46 ], [ %55, %53 ]
  %63 = phi %"class.std::__1::__tree_node_base"** [ %60, %59 ], [ %47, %46 ], [ %54, %53 ]
  %64 = bitcast i8* %32 to %"class.std::__1::__tree_node_base"*
  %65 = getelementptr inbounds i8, i8* %32, i64 16
  %66 = bitcast i8* %65 to %"class.std::__1::__tree_end_node"**
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %32, i8 0, i64 16, i1 false) #14
  store %"class.std::__1::__tree_end_node"* %62, %"class.std::__1::__tree_end_node"** %66, align 8
  %67 = bitcast %"class.std::__1::__tree_node_base"** %63 to i8**
  store i8* %32, i8** %67, align 8
  %68 = getelementptr inbounds %"class.std::__1::multimap", %"class.std::__1::multimap"* %4, i64 0, i32 0, i32 0
  %69 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %68, align 8
  %70 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %69, i64 0, i32 0
  %71 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %70, align 8
  %72 = icmp eq %"class.std::__1::__tree_node_base"* %71, null
  br i1 %72, label %120, label %73

73:                                               ; preds = %61
  %74 = ptrtoint %"class.std::__1::__tree_node_base"* %71 to i64
  %75 = bitcast %"class.std::__1::multimap"* %4 to i64*
  store i64 %74, i64* %75, align 8
  %76 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %63, align 8
  br label %120

77:                                               ; preds = %25
  %78 = add nsw i32 %2, 3
  %79 = tail call i8* @_Znwm(i64 48) #17, !noalias !8
  %80 = getelementptr inbounds i8, i8* %79, i64 32
  %81 = bitcast i8* %80 to i64*
  store i64 %1, i64* %81, align 8, !noalias !8
  %82 = getelementptr inbounds i8, i8* %79, i64 40
  %83 = bitcast i8* %82 to i32*
  store i32 %78, i32* %83, align 8, !noalias !8
  br label %84

84:                                               ; preds = %77, %101
  %85 = phi %"class.std::__1::__tree_node"* [ %103, %101 ], [ %7, %77 ]
  %86 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %85, i64 0, i32 2, i32 0, i32 0
  %87 = load i64, i64* %86, align 8
  %88 = icmp ugt i64 %87, %1
  br i1 %88, label %89, label %95

89:                                               ; preds = %84
  %90 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %85, i64 0, i32 0, i32 0, i32 0
  %91 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %90, align 8
  %92 = icmp eq %"class.std::__1::__tree_node_base"* %91, null
  br i1 %92, label %93, label %101

93:                                               ; preds = %89
  %94 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %85, i64 0, i32 0, i32 0, i32 0
  br label %104

95:                                               ; preds = %84
  %96 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %85, i64 0, i32 0, i32 1
  %97 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %96, align 8
  %98 = icmp eq %"class.std::__1::__tree_node_base"* %97, null
  br i1 %98, label %99, label %101

99:                                               ; preds = %95
  %100 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %85, i64 0, i32 0, i32 1
  br label %104

101:                                              ; preds = %95, %89
  %102 = phi %"class.std::__1::__tree_node_base"* [ %91, %89 ], [ %97, %95 ]
  %103 = bitcast %"class.std::__1::__tree_node_base"* %102 to %"class.std::__1::__tree_node"*
  br label %84

104:                                              ; preds = %99, %93
  %105 = phi %"class.std::__1::__tree_node_base"** [ %94, %93 ], [ %100, %99 ]
  %106 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %85, i64 0, i32 0, i32 0
  %107 = bitcast i8* %79 to %"class.std::__1::__tree_node_base"*
  %108 = getelementptr inbounds i8, i8* %79, i64 16
  %109 = bitcast i8* %108 to %"class.std::__1::__tree_end_node"**
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %79, i8 0, i64 16, i1 false) #14
  store %"class.std::__1::__tree_end_node"* %106, %"class.std::__1::__tree_end_node"** %109, align 8
  %110 = bitcast %"class.std::__1::__tree_node_base"** %105 to i8**
  store i8* %79, i8** %110, align 8
  %111 = getelementptr inbounds %"class.std::__1::multimap", %"class.std::__1::multimap"* %4, i64 0, i32 0, i32 0
  %112 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %111, align 8
  %113 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %112, i64 0, i32 0
  %114 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %113, align 8
  %115 = icmp eq %"class.std::__1::__tree_node_base"* %114, null
  br i1 %115, label %120, label %116

116:                                              ; preds = %104
  %117 = ptrtoint %"class.std::__1::__tree_node_base"* %114 to i64
  %118 = bitcast %"class.std::__1::multimap"* %4 to i64*
  store i64 %117, i64* %118, align 8
  %119 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %105, align 8
  br label %120

120:                                              ; preds = %116, %104, %73, %61
  %121 = phi %"class.std::__1::__tree_node_base"* [ %64, %61 ], [ %76, %73 ], [ %107, %104 ], [ %119, %116 ]
  %122 = phi i1 [ false, %61 ], [ false, %73 ], [ true, %104 ], [ true, %116 ]
  %123 = getelementptr inbounds %"class.v8::internal::ConstPool", %"class.v8::internal::ConstPool"* %0, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0
  %124 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %123, align 8
  tail call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %124, %"class.std::__1::__tree_node_base"* %121) #14
  %125 = getelementptr inbounds %"class.v8::internal::ConstPool", %"class.v8::internal::ConstPool"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %126 = load i64, i64* %125, align 8
  %127 = add i64 %126, 1
  store i64 %127, i64* %125, align 8
  ret i1 %122
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal9ConstPool14TryRecordEntryElNS0_9RelocInfo4ModeE(%"class.v8::internal::ConstPool"*, i64, i8 signext) local_unnamed_addr #1 align 2 {
  %4 = load i8, i8* @_ZN2v88internal26FLAG_partial_constant_poolE, align 1, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %23, label %6

6:                                                ; preds = %3
  %7 = icmp eq i8 %2, 0
  %8 = icmp sgt i8 %2, 5
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %23

10:                                               ; preds = %6
  switch i8 %2, label %23 [
    i8 0, label %11
    i8 9, label %11
    i8 12, label %11
  ]

11:                                               ; preds = %10, %10, %10
  %12 = bitcast %"class.v8::internal::ConstPool"* %0 to %"class.v8::internal::AssemblerBase"**
  %13 = load %"class.v8::internal::AssemblerBase"*, %"class.v8::internal::AssemblerBase"** %12, align 8
  %14 = getelementptr inbounds %"class.v8::internal::AssemblerBase", %"class.v8::internal::AssemblerBase"* %13, i64 0, i32 4
  %15 = bitcast i8** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.v8::internal::AssemblerBase", %"class.v8::internal::AssemblerBase"* %13, i64 0, i32 2
  %18 = bitcast i8** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %16, %19
  %21 = trunc i64 %20 to i32
  %22 = tail call zeroext i1 @_ZN2v88internal9ConstPool14AddSharedEntryEmi(%"class.v8::internal::ConstPool"* %0, i64 %1, i32 %21)
  br label %23

23:                                               ; preds = %10, %6, %3, %11
  %24 = phi i1 [ %22, %11 ], [ false, %3 ], [ false, %6 ], [ false, %10 ]
  ret i1 %24
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN2v88internal9ConstPool17IsMoveRipRelativeEm(%"class.v8::internal::ConstPool"* nocapture readnone, i64) local_unnamed_addr #0 align 2 {
  %3 = inttoptr i64 %1 to i32*
  %4 = load i32, i32* %3, align 1
  %5 = and i32 %4, 13107195
  %6 = icmp eq i32 %5, 363336
  ret i1 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9ConstPool5ClearEv(%"class.v8::internal::ConstPool"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ConstPool", %"class.v8::internal::ConstPool"* %0, i64 0, i32 1
  %3 = getelementptr inbounds %"class.std::__1::multimap", %"class.std::__1::multimap"* %2, i64 0, i32 0
  %4 = getelementptr inbounds %"class.v8::internal::ConstPool", %"class.v8::internal::ConstPool"* %0, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0
  %5 = bitcast %"class.std::__1::__tree_end_node"* %4 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  tail call void @_ZNSt3__16__treeINS_12__value_typeImiEENS_19__map_value_compareImS2_NS_4lessImEELb1EEENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree.71"* %3, %"class.std::__1::__tree_node"* %6) #14
  %7 = getelementptr inbounds %"class.v8::internal::ConstPool", %"class.v8::internal::ConstPool"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  store i64 0, i64* %7, align 8
  %8 = getelementptr inbounds %"class.std::__1::multimap", %"class.std::__1::multimap"* %2, i64 0, i32 0, i32 0
  store %"class.std::__1::__tree_end_node"* %4, %"class.std::__1::__tree_end_node"** %8, align 8
  %9 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %4, i64 0, i32 0
  store %"class.std::__1::__tree_node_base"* null, %"class.std::__1::__tree_node_base"** %9, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9ConstPool12PatchEntriesEv(%"class.v8::internal::ConstPool"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ConstPool", %"class.v8::internal::ConstPool"* %0, i64 0, i32 1
  %3 = getelementptr inbounds %"class.std::__1::multimap", %"class.std::__1::multimap"* %2, i64 0, i32 0, i32 0
  %4 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::ConstPool", %"class.v8::internal::ConstPool"* %0, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0
  %6 = icmp eq %"class.std::__1::__tree_end_node"* %4, %5
  br i1 %6, label %7, label %10

7:                                                ; preds = %1
  %8 = bitcast %"class.std::__1::__tree_end_node"* %4 to %"class.std::__1::__tree_node"**
  %9 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %8, align 8
  br label %14

10:                                               ; preds = %1
  %11 = bitcast %"class.std::__1::__tree_end_node"* %5 to %"class.std::__1::__tree_node"**
  %12 = getelementptr inbounds %"class.v8::internal::ConstPool", %"class.v8::internal::ConstPool"* %0, i64 0, i32 0
  %13 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %11, align 8
  br label %19

14:                                               ; preds = %98, %117, %7
  %15 = phi %"class.std::__1::__tree_node"* [ %9, %7 ], [ null, %98 ], [ %99, %117 ]
  %16 = getelementptr inbounds %"class.std::__1::multimap", %"class.std::__1::multimap"* %2, i64 0, i32 0
  tail call void @_ZNSt3__16__treeINS_12__value_typeImiEENS_19__map_value_compareImS2_NS_4lessImEELb1EEENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree.71"* %16, %"class.std::__1::__tree_node"* %15) #14
  %17 = getelementptr inbounds %"class.v8::internal::ConstPool", %"class.v8::internal::ConstPool"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  store i64 0, i64* %17, align 8
  store %"class.std::__1::__tree_end_node"* %5, %"class.std::__1::__tree_end_node"** %3, align 8
  %18 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %5, i64 0, i32 0
  store %"class.std::__1::__tree_node_base"* null, %"class.std::__1::__tree_node_base"** %18, align 8
  ret void

19:                                               ; preds = %10, %117
  %20 = phi %"class.std::__1::__tree_node"* [ %13, %10 ], [ %99, %117 ]
  %21 = phi %"class.std::__1::__tree_end_node"* [ %4, %10 ], [ %114, %117 ]
  %22 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %21, i64 4
  %23 = bitcast %"class.std::__1::__tree_end_node"* %22 to i64*
  %24 = icmp eq %"class.std::__1::__tree_node"* %20, null
  br i1 %24, label %89, label %25

25:                                               ; preds = %19
  %26 = load i64, i64* %23, align 8
  br label %27

27:                                               ; preds = %84, %25
  %28 = phi %"class.std::__1::__tree_node"* [ %20, %25 ], [ %87, %84 ]
  %29 = phi %"class.std::__1::__tree_end_node"* [ %5, %25 ], [ %85, %84 ]
  %30 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %28, i64 0, i32 2, i32 0, i32 0
  %31 = load i64, i64* %30, align 8
  %32 = icmp ult i64 %26, %31
  br i1 %32, label %33, label %36

33:                                               ; preds = %27
  %34 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %28, i64 0, i32 0, i32 0
  %35 = bitcast %"class.std::__1::__tree_node"* %28 to %"class.std::__1::__tree_node"**
  br label %84

36:                                               ; preds = %27
  %37 = icmp ult i64 %31, %26
  br i1 %37, label %38, label %41

38:                                               ; preds = %36
  %39 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %28, i64 0, i32 0, i32 1
  %40 = bitcast %"class.std::__1::__tree_node_base"** %39 to %"class.std::__1::__tree_node"**
  br label %84

41:                                               ; preds = %36
  %42 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %28, i64 0, i32 0, i32 0
  %43 = bitcast %"class.std::__1::__tree_node"* %28 to %"class.std::__1::__tree_node"**
  %44 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %43, align 8
  %45 = icmp eq %"class.std::__1::__tree_node"* %44, null
  br i1 %45, label %60, label %46

46:                                               ; preds = %41, %46
  %47 = phi %"class.std::__1::__tree_end_node"* [ %57, %46 ], [ %42, %41 ]
  %48 = phi %"class.std::__1::__tree_node"* [ %58, %46 ], [ %44, %41 ]
  %49 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %48, i64 0, i32 2, i32 0, i32 0
  %50 = load i64, i64* %49, align 8
  %51 = icmp ult i64 %50, %26
  %52 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %48, i64 0, i32 0, i32 1
  %53 = bitcast %"class.std::__1::__tree_node_base"** %52 to %"class.std::__1::__tree_node"**
  %54 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %48, i64 0, i32 0, i32 0
  %55 = bitcast %"class.std::__1::__tree_node"* %48 to %"class.std::__1::__tree_node"**
  %56 = select i1 %51, %"class.std::__1::__tree_node"** %53, %"class.std::__1::__tree_node"** %55
  %57 = select i1 %51, %"class.std::__1::__tree_end_node"* %47, %"class.std::__1::__tree_end_node"* %54
  %58 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %56, align 8
  %59 = icmp eq %"class.std::__1::__tree_node"* %58, null
  br i1 %59, label %60, label %46

60:                                               ; preds = %46, %41
  %61 = phi %"class.std::__1::__tree_end_node"* [ %42, %41 ], [ %57, %46 ]
  %62 = ptrtoint %"class.std::__1::__tree_end_node"* %61 to i64
  %63 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %28, i64 0, i32 0, i32 1
  %64 = bitcast %"class.std::__1::__tree_node_base"** %63 to %"class.std::__1::__tree_node"**
  %65 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %64, align 8
  %66 = icmp eq %"class.std::__1::__tree_node"* %65, null
  br i1 %66, label %81, label %67

67:                                               ; preds = %60, %67
  %68 = phi %"class.std::__1::__tree_end_node"* [ %78, %67 ], [ %29, %60 ]
  %69 = phi %"class.std::__1::__tree_node"* [ %79, %67 ], [ %65, %60 ]
  %70 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %69, i64 0, i32 2, i32 0, i32 0
  %71 = load i64, i64* %70, align 8
  %72 = icmp ult i64 %26, %71
  %73 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %69, i64 0, i32 0, i32 0
  %74 = bitcast %"class.std::__1::__tree_node"* %69 to %"class.std::__1::__tree_node"**
  %75 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %69, i64 0, i32 0, i32 1
  %76 = bitcast %"class.std::__1::__tree_node_base"** %75 to %"class.std::__1::__tree_node"**
  %77 = select i1 %72, %"class.std::__1::__tree_node"** %74, %"class.std::__1::__tree_node"** %76
  %78 = select i1 %72, %"class.std::__1::__tree_end_node"* %73, %"class.std::__1::__tree_end_node"* %68
  %79 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %77, align 8
  %80 = icmp eq %"class.std::__1::__tree_node"* %79, null
  br i1 %80, label %81, label %67

81:                                               ; preds = %67, %60
  %82 = phi %"class.std::__1::__tree_end_node"* [ %29, %60 ], [ %78, %67 ]
  %83 = ptrtoint %"class.std::__1::__tree_end_node"* %82 to i64
  br label %92

84:                                               ; preds = %38, %33
  %85 = phi %"class.std::__1::__tree_end_node"* [ %34, %33 ], [ %29, %38 ]
  %86 = phi %"class.std::__1::__tree_node"** [ %35, %33 ], [ %40, %38 ]
  %87 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %86, align 8
  %88 = icmp eq %"class.std::__1::__tree_node"* %87, null
  br i1 %88, label %89, label %27

89:                                               ; preds = %84, %19
  %90 = phi %"class.std::__1::__tree_end_node"* [ %5, %19 ], [ %85, %84 ]
  %91 = ptrtoint %"class.std::__1::__tree_end_node"* %90 to i64
  br label %92

92:                                               ; preds = %81, %89
  %93 = phi i64 [ %91, %89 ], [ %62, %81 ]
  %94 = phi i64 [ %91, %89 ], [ %83, %81 ]
  %95 = inttoptr i64 %93 to %"class.std::__1::__tree_end_node"*
  %96 = inttoptr i64 %94 to %"class.std::__1::__tree_end_node"*
  %97 = icmp eq %"class.std::__1::__tree_end_node"* %95, %96
  br i1 %97, label %98, label %119

98:                                               ; preds = %165, %92
  %99 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %11, align 8
  %100 = icmp eq %"class.std::__1::__tree_node"* %99, null
  br i1 %100, label %14, label %101

101:                                              ; preds = %98
  %102 = load i64, i64* %23, align 8
  br label %103

103:                                              ; preds = %103, %101
  %104 = phi %"class.std::__1::__tree_end_node"* [ %5, %101 ], [ %114, %103 ]
  %105 = phi %"class.std::__1::__tree_node"* [ %99, %101 ], [ %115, %103 ]
  %106 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %105, i64 0, i32 2, i32 0, i32 0
  %107 = load i64, i64* %106, align 8
  %108 = icmp ult i64 %102, %107
  %109 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %105, i64 0, i32 0, i32 0
  %110 = bitcast %"class.std::__1::__tree_node"* %105 to %"class.std::__1::__tree_node"**
  %111 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %105, i64 0, i32 0, i32 1
  %112 = bitcast %"class.std::__1::__tree_node_base"** %111 to %"class.std::__1::__tree_node"**
  %113 = select i1 %108, %"class.std::__1::__tree_node"** %110, %"class.std::__1::__tree_node"** %112
  %114 = select i1 %108, %"class.std::__1::__tree_end_node"* %109, %"class.std::__1::__tree_end_node"* %104
  %115 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %113, align 8
  %116 = icmp eq %"class.std::__1::__tree_node"* %115, null
  br i1 %116, label %117, label %103

117:                                              ; preds = %103
  %118 = icmp eq %"class.std::__1::__tree_end_node"* %114, %5
  br i1 %118, label %14, label %19

119:                                              ; preds = %92, %165
  %120 = phi %"class.std::__1::__tree_end_node"* [ %166, %165 ], [ %95, %92 ]
  %121 = phi i32 [ %137, %165 ], [ 0, %92 ]
  %122 = phi i64 [ %167, %165 ], [ %93, %92 ]
  %123 = icmp eq %"class.std::__1::__tree_end_node"* %120, %95
  %124 = inttoptr i64 %122 to %"class.std::__1::__tree_node"*
  %125 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %124, i64 0, i32 2, i32 0, i32 1
  %126 = load i32, i32* %125, align 8
  br i1 %123, label %136, label %127

127:                                              ; preds = %119
  %128 = add i32 %121, -4
  %129 = sub i32 %128, %126
  %130 = load %"class.v8::internal::Assembler"*, %"class.v8::internal::Assembler"** %12, align 8
  %131 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %130, i64 0, i32 0, i32 2
  %132 = load i8*, i8** %131, align 8
  %133 = sext i32 %126 to i64
  %134 = getelementptr inbounds i8, i8* %132, i64 %133
  %135 = bitcast i8* %134 to i32*
  store i32 %129, i32* %135, align 1
  br label %136

136:                                              ; preds = %119, %127
  %137 = phi i32 [ %121, %127 ], [ %126, %119 ]
  %138 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %120, i64 1, i32 0
  %139 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %138, align 8
  %140 = icmp eq %"class.std::__1::__tree_node_base"* %139, null
  br i1 %140, label %141, label %149

141:                                              ; preds = %136
  %142 = inttoptr i64 %122 to %"class.std::__1::__tree_node_base"*
  %143 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %120, i64 2
  %144 = bitcast %"class.std::__1::__tree_end_node"* %143 to %"class.std::__1::__tree_end_node"**
  %145 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %144, align 8
  %146 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %145, i64 0, i32 0
  %147 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %146, align 8
  %148 = icmp eq %"class.std::__1::__tree_node_base"* %147, %142
  br i1 %148, label %165, label %156

149:                                              ; preds = %136, %149
  %150 = phi %"class.std::__1::__tree_node_base"* [ %152, %149 ], [ %139, %136 ]
  %151 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %150, i64 0, i32 0, i32 0
  %152 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %151, align 8
  %153 = icmp eq %"class.std::__1::__tree_node_base"* %152, null
  br i1 %153, label %154, label %149

154:                                              ; preds = %149
  %155 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %150, i64 0, i32 0
  br label %165

156:                                              ; preds = %141, %156
  %157 = phi %"class.std::__1::__tree_end_node"** [ %160, %156 ], [ %144, %141 ]
  %158 = bitcast %"class.std::__1::__tree_end_node"** %157 to %"class.std::__1::__tree_node_base"**
  %159 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %158, align 8
  %160 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %159, i64 0, i32 2
  %161 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %160, align 8
  %162 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %161, i64 0, i32 0
  %163 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %162, align 8
  %164 = icmp eq %"class.std::__1::__tree_node_base"* %163, %159
  br i1 %164, label %165, label %156

165:                                              ; preds = %156, %141, %154
  %166 = phi %"class.std::__1::__tree_end_node"* [ %155, %154 ], [ %145, %141 ], [ %161, %156 ]
  %167 = ptrtoint %"class.std::__1::__tree_end_node"* %166 to i64
  %168 = icmp eq %"class.std::__1::__tree_end_node"* %166, %96
  br i1 %168, label %98, label %119
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler14PatchConstPoolEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 6, i32 1, i32 0, i32 2, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 6
  tail call void @_ZN2v88internal9ConstPool12PatchEntriesEv(%"class.v8::internal::ConstPool"* %6)
  br label %7

7:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN2v88internal9Assembler15UseConstPoolForENS0_9RelocInfo4ModeE(i8 signext) local_unnamed_addr #0 align 2 {
  %2 = load i8, i8* @_ZN2v88internal26FLAG_partial_constant_poolE, align 1, !range !2
  %3 = icmp ne i8 %2, 0
  %4 = icmp ult i8 %0, 13
  %5 = and i1 %3, %4
  br i1 %5, label %6, label %11

6:                                                ; preds = %1
  %7 = zext i8 %0 to i13
  %8 = lshr i13 -3583, %7
  %9 = and i13 %8, 1
  %10 = icmp ne i13 %9, 0
  ret i1 %10

11:                                               ; preds = %1
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9AssemblerC2ERKNS0_16AssemblerOptionsENSt3__110unique_ptrINS0_15AssemblerBufferENS5_14default_deleteIS7_EEEE(%"class.v8::internal::Assembler"*, %"struct.v8::internal::AssemblerOptions"* dereferenceable(24), %"class.v8::internal::AssemblerBuffer"*) unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0
  tail call void @_ZN2v88internal13AssemblerBaseC2ERKNS0_16AssemblerOptionsENSt3__110unique_ptrINS0_15AssemblerBufferENS5_14default_deleteIS7_EEEE(%"class.v8::internal::AssemblerBase"* %4, %"struct.v8::internal::AssemblerOptions"* dereferenceable(24) %1, %"class.v8::internal::AssemblerBuffer"* %2) #14
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN2v88internal9AssemblerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 4
  %8 = bitcast %"class.std::__1::deque"* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 48, i1 false) #14
  %9 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 5, i32 0, i32 1, i32 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 5, i32 0, i32 1, i32 0, i32 0
  %11 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 5, i32 0, i32 0
  %12 = bitcast %"class.std::__1::__tree_node_base"** %9 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 16, i1 false) #14
  %13 = bitcast %"class.v8::internal::RelocInfoWriter"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 68, i1 false)
  store %"class.std::__1::__tree_end_node"* %10, %"class.std::__1::__tree_end_node"** %11, align 8
  %14 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 6, i32 0
  store %"class.v8::internal::Assembler"* %0, %"class.v8::internal::Assembler"** %14, align 8
  %15 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 6, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0
  %16 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 6, i32 1, i32 0, i32 1, i32 0, i32 0
  %17 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %18 = bitcast %"class.std::__1::__tree_node_base"** %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 16, i1 false) #14
  store %"class.std::__1::__tree_end_node"* %16, %"class.std::__1::__tree_end_node"** %17, align 8
  %19 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %22 = load %"class.v8::internal::AssemblerBuffer"*, %"class.v8::internal::AssemblerBuffer"** %21, align 8
  %23 = bitcast %"class.v8::internal::AssemblerBuffer"* %22 to i32 (%"class.v8::internal::AssemblerBuffer"*)***
  %24 = load i32 (%"class.v8::internal::AssemblerBuffer"*)**, i32 (%"class.v8::internal::AssemblerBuffer"*)*** %23, align 8
  %25 = getelementptr inbounds i32 (%"class.v8::internal::AssemblerBuffer"*)*, i32 (%"class.v8::internal::AssemblerBuffer"*)** %24, i64 3
  %26 = load i32 (%"class.v8::internal::AssemblerBuffer"*)*, i32 (%"class.v8::internal::AssemblerBuffer"*)** %25, align 8
  %27 = tail call i32 %26(%"class.v8::internal::AssemblerBuffer"* %22) #14
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i8, i8* %20, i64 %28
  %30 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %31 = bitcast i8** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %"class.v8::internal::RelocInfoWriter", %"class.v8::internal::RelocInfoWriter"* %6, i64 0, i32 0
  store i8* %29, i8** %33, align 8
  %34 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 1
  %35 = bitcast i8** %34 to i64*
  store i64 %32, i64* %35, align 8
  %36 = load i32, i32* @_ZN2v88internal11CpuFeatures10supported_E, align 4
  %37 = and i32 %36, 1
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %43, label %39

39:                                               ; preds = %3
  %40 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 10
  %41 = load i64, i64* %40, align 8
  %42 = or i64 %41, 2
  store i64 %42, i64* %40, align 8
  br label %43

43:                                               ; preds = %3, %39
  %44 = and i32 %36, 2
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %50, label %46

46:                                               ; preds = %43
  %47 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 10
  %48 = load i64, i64* %47, align 8
  %49 = or i64 %48, 4
  store i64 %49, i64* %47, align 8
  br label %50

50:                                               ; preds = %43, %46
  ret void
}

declare void @_ZN2v88internal13AssemblerBaseC2ERKNS0_16AssemblerOptionsENSt3__110unique_ptrINS0_15AssemblerBufferENS5_14default_deleteIS7_EEEE(%"class.v8::internal::AssemblerBase"*, %"struct.v8::internal::AssemblerOptions"* dereferenceable(24), %"class.v8::internal::AssemblerBuffer"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7GetCodeEPNS0_7IsolateEPNS0_8CodeDescEPNS0_21SafepointTableBuilderEi(%"class.v8::internal::Assembler"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::CodeDesc"*, %"class.v8::internal::SafepointTableBuilder"*, i32) local_unnamed_addr #1 align 2 {
  tail call void @_ZN2v88internal9Assembler9DataAlignEi(%"class.v8::internal::Assembler"* %0, i32 4) #14
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 6, i32 1, i32 0, i32 2, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 6
  tail call void @_ZN2v88internal9ConstPool12PatchEntriesEv(%"class.v8::internal::ConstPool"* %10) #14
  br label %11

11:                                               ; preds = %5, %9
  %12 = tail call i32 @_ZN2v88internal9Assembler17WriteCodeCommentsEv(%"class.v8::internal::Assembler"* %0) #14
  %13 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load %"struct.std::__1::__forward_list_node"*, %"struct.std::__1::__forward_list_node"** %13, align 8
  %15 = icmp eq %"struct.std::__1::__forward_list_node"* %14, null
  br i1 %15, label %52, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %18 = bitcast i8** %17 to i64*
  %19 = bitcast %"class.v8::internal::Isolate"* %1 to %"class.v8::internal::FactoryBase"*
  br label %20

20:                                               ; preds = %48, %16
  %21 = phi %"struct.std::__1::__forward_list_node"* [ %14, %16 ], [ %50, %48 ]
  %22 = load i64, i64* %18, align 8
  %23 = getelementptr inbounds %"struct.std::__1::__forward_list_node", %"struct.std::__1::__forward_list_node"* %21, i64 0, i32 1, i32 3
  %24 = load i32, i32* %23, align 8
  %25 = sext i32 %24 to i64
  %26 = add i64 %22, %25
  %27 = getelementptr inbounds %"struct.std::__1::__forward_list_node", %"struct.std::__1::__forward_list_node"* %21, i64 0, i32 1, i32 0
  %28 = load i32, i32* %27, align 8
  switch i32 %28, label %48 [
    i32 0, label %29
    i32 1, label %37
  ]

29:                                               ; preds = %20
  %30 = getelementptr inbounds %"struct.std::__1::__forward_list_node", %"struct.std::__1::__forward_list_node"* %21, i64 0, i32 1, i32 2, i32 0
  %31 = bitcast double* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE13NewHeapNumberILNS0_14AllocationTypeE1EEENS0_6HandleINS0_10HeapNumberEEEv(%"class.v8::internal::FactoryBase"* %19) #14
  %34 = load i64, i64* %33, align 8
  %35 = add i64 %34, 3
  %36 = inttoptr i64 %35 to i64*
  store i64 %32, i64* %36, align 1
  br label %45

37:                                               ; preds = %20
  %38 = getelementptr inbounds %"struct.std::__1::__forward_list_node", %"struct.std::__1::__forward_list_node"* %21, i64 0, i32 1, i32 2
  %39 = bitcast %union.anon.81* %38 to %"class.v8::internal::StringConstantBase"**
  %40 = load %"class.v8::internal::StringConstantBase"*, %"class.v8::internal::StringConstantBase"** %39, align 8
  %41 = icmp eq %"class.v8::internal::StringConstantBase"* %40, null
  br i1 %41, label %42, label %43, !prof !3

42:                                               ; preds = %37
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0)) #15
  unreachable

43:                                               ; preds = %37
  %44 = tail call i64* @_ZNK2v88internal18StringConstantBase22AllocateStringConstantEPNS0_7IsolateE(%"class.v8::internal::StringConstantBase"* nonnull %40, %"class.v8::internal::Isolate"* %1) #14
  br label %45

45:                                               ; preds = %29, %43
  %46 = phi i64* [ %44, %43 ], [ %33, %29 ]
  %47 = inttoptr i64 %26 to i64**
  store i64* %46, i64** %47, align 1
  br label %48

48:                                               ; preds = %45, %20
  %49 = getelementptr inbounds %"struct.std::__1::__forward_list_node", %"struct.std::__1::__forward_list_node"* %21, i64 0, i32 0, i32 0
  %50 = load %"struct.std::__1::__forward_list_node"*, %"struct.std::__1::__forward_list_node"** %49, align 8
  %51 = icmp eq %"struct.std::__1::__forward_list_node"* %50, null
  br i1 %51, label %52, label %20

52:                                               ; preds = %48, %11
  %53 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %54 = bitcast i8** %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %57 = bitcast i8** %56 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = sub i64 %55, %58
  %60 = trunc i64 %59 to i32
  %61 = sub nsw i32 %60, %12
  %62 = icmp eq i32 %4, 0
  %63 = select i1 %62, i32 %61, i32 %4
  %64 = icmp eq %"class.v8::internal::SafepointTableBuilder"* %3, null
  br i1 %64, label %67, label %65

65:                                               ; preds = %52
  %66 = tail call i32 @_ZNK2v88internal21SafepointTableBuilder13GetCodeOffsetEv(%"class.v8::internal::SafepointTableBuilder"* nonnull %3) #14
  br label %67

67:                                               ; preds = %52, %65
  %68 = phi i32 [ %66, %65 ], [ %63, %52 ]
  %69 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %70 = bitcast i8** %69 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %73 = load %"class.v8::internal::AssemblerBuffer"*, %"class.v8::internal::AssemblerBuffer"** %72, align 8
  %74 = bitcast %"class.v8::internal::AssemblerBuffer"* %73 to i8* (%"class.v8::internal::AssemblerBuffer"*)***
  %75 = load i8* (%"class.v8::internal::AssemblerBuffer"*)**, i8* (%"class.v8::internal::AssemblerBuffer"*)*** %74, align 8
  %76 = getelementptr inbounds i8* (%"class.v8::internal::AssemblerBuffer"*)*, i8* (%"class.v8::internal::AssemblerBuffer"*)** %75, i64 2
  %77 = load i8* (%"class.v8::internal::AssemblerBuffer"*)*, i8* (%"class.v8::internal::AssemblerBuffer"*)** %76, align 8
  %78 = tail call i8* %77(%"class.v8::internal::AssemblerBuffer"* %73) #14
  %79 = ptrtoint i8* %78 to i64
  %80 = sub i64 %71, %79
  %81 = trunc i64 %80 to i32
  tail call void @_ZN2v88internal8CodeDesc10InitializeEPS1_PNS0_9AssemblerEiiiii(%"class.v8::internal::CodeDesc"* %2, %"class.v8::internal::Assembler"* %0, i32 %68, i32 %63, i32 %61, i32 %61, i32 %81) #14
  ret void
}

declare void @_ZN2v88internal9Assembler9DataAlignEi(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #3

declare i32 @_ZN2v88internal9Assembler17WriteCodeCommentsEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #3

declare i32 @_ZNK2v88internal21SafepointTableBuilder13GetCodeOffsetEv(%"class.v8::internal::SafepointTableBuilder"*) local_unnamed_addr #3

declare void @_ZN2v88internal8CodeDesc10InitializeEPS1_PNS0_9AssemblerEiiiii(%"class.v8::internal::CodeDesc"*, %"class.v8::internal::Assembler"*, i32, i32, i32, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler28FinalizeJumpOptimizationInfoEv(%"class.v8::internal::Assembler"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = alloca i32, align 4
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 13
  %4 = load %"class.v8::internal::JumpOptimizationInfo"*, %"class.v8::internal::JumpOptimizationInfo"** %3, align 8
  %5 = icmp eq %"class.v8::internal::JumpOptimizationInfo"* %4, null
  br i1 %5, label %84, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::JumpOptimizationInfo", %"class.v8::internal::JumpOptimizationInfo"* %4, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %84

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.v8::internal::JumpOptimizationInfo", %"class.v8::internal::JumpOptimizationInfo"* %4, i64 0, i32 2
  %12 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = trunc i64 %13 to i32
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %84, label %16

16:                                               ; preds = %10
  %17 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %11, i64 0, i32 0, i32 0
  %18 = load i32*, i32** %17, align 8
  %19 = getelementptr inbounds %"class.v8::internal::JumpOptimizationInfo", %"class.v8::internal::JumpOptimizationInfo"* %4, i64 0, i32 2, i32 0, i32 1
  %20 = load i32*, i32** %19, align 8
  %21 = icmp eq i32* %18, %20
  br i1 %21, label %22, label %84

22:                                               ; preds = %16
  %23 = ptrtoint i32* %18 to i64
  %24 = ptrtoint i32* %20 to i64
  %25 = add nsw i32 %14, 31
  %26 = sdiv i32 %25, 32
  %27 = sext i32 %26 to i64
  %28 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28) #14
  store i32 0, i32* %2, align 4
  %29 = sub i64 %24, %23
  %30 = ashr exact i64 %29, 2
  %31 = icmp ult i64 %30, %27
  br i1 %31, label %32, label %34

32:                                               ; preds = %22
  %33 = sub nsw i64 %27, %30
  call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEmRKj(%"class.std::__1::vector.48"* %11, i64 %33, i32* nonnull dereferenceable(4) %2) #14
  br label %38

34:                                               ; preds = %22
  %35 = icmp ugt i64 %30, %27
  br i1 %35, label %36, label %38

36:                                               ; preds = %34
  %37 = getelementptr inbounds i32, i32* %18, i64 %27
  store i32* %37, i32** %19, align 8
  br label %38

38:                                               ; preds = %32, %34, %36
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %28) #14
  %39 = icmp sgt i32 %14, 0
  br i1 %39, label %40, label %84

40:                                               ; preds = %38
  %41 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 4, i32 0, i32 1
  %42 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %43 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %44 = and i64 %13, 4294967295
  br label %48

45:                                               ; preds = %78
  %46 = and i8 %79, 1
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %84, label %82

48:                                               ; preds = %78, %40
  %49 = phi i64 [ 0, %40 ], [ %80, %78 ]
  %50 = phi i8 [ 0, %40 ], [ %79, %78 ]
  %51 = load i64, i64* %41, align 8
  %52 = add i64 %51, %49
  %53 = load i32**, i32*** %42, align 8
  %54 = lshr i64 %52, 10
  %55 = getelementptr inbounds i32*, i32** %53, i64 %54
  %56 = load i32*, i32** %55, align 8
  %57 = and i64 %52, 1023
  %58 = getelementptr inbounds i32, i32* %56, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = load i8*, i8** %43, align 8
  %61 = sext i32 %59 to i64
  %62 = getelementptr inbounds i8, i8* %60, i64 %61
  %63 = bitcast i8* %62 to i32*
  %64 = load i32, i32* %63, align 1
  %65 = sext i32 %64 to i64
  %66 = add nsw i64 %65, 128
  %67 = icmp ult i64 %66, 256
  br i1 %67, label %68, label %78

68:                                               ; preds = %48
  %69 = trunc i64 %49 to i32
  %70 = and i32 %69, 31
  %71 = shl i32 1, %70
  %72 = lshr i64 %49, 5
  %73 = and i64 %72, 134217727
  %74 = load i32*, i32** %17, align 8
  %75 = getelementptr inbounds i32, i32* %74, i64 %73
  %76 = load i32, i32* %75, align 4
  %77 = or i32 %76, %71
  store i32 %77, i32* %75, align 4
  br label %78

78:                                               ; preds = %68, %48
  %79 = phi i8 [ 1, %68 ], [ %50, %48 ]
  %80 = add nuw nsw i64 %49, 1
  %81 = icmp eq i64 %80, %44
  br i1 %81, label %45, label %48

82:                                               ; preds = %45
  %83 = getelementptr inbounds %"class.v8::internal::JumpOptimizationInfo", %"class.v8::internal::JumpOptimizationInfo"* %4, i64 0, i32 1
  store i8 1, i8* %83, align 4
  br label %84

84:                                               ; preds = %38, %16, %10, %45, %82, %1, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5AlignEi(%"class.v8::internal::Assembler"* nocapture, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = trunc i64 %9 to i32
  %11 = add nsw i32 %1, -1
  %12 = and i32 %11, %10
  %13 = sub nsw i32 %1, %12
  %14 = and i32 %13, %11
  %15 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %16 = inttoptr i64 %5 to i8*
  br label %17

17:                                               ; preds = %25, %2
  %18 = phi i8* [ %16, %2 ], [ %35, %25 ]
  %19 = phi i32 [ %14, %2 ], [ %36, %25 ]
  %20 = load i8*, i8** %15, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 -32
  %22 = icmp ult i8* %18, %21
  br i1 %22, label %25, label %23, !prof !11

23:                                               ; preds = %17
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %24 = load i8*, i8** %3, align 8
  br label %25

25:                                               ; preds = %23, %17
  %26 = phi i8* [ %18, %17 ], [ %24, %23 ]
  %27 = icmp slt i32 %19, 9
  %28 = select i1 %27, i32 %19, i32 9
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZZN2v88internal9Assembler3NopEiE11kNopOffsets, i64 0, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = sext i8 %31 to i64
  %33 = getelementptr inbounds [32 x i8], [32 x i8]* @.str.11, i64 0, i64 %32
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %26, i8* align 1 %33, i64 %29, i1 false) #14
  %34 = load i8*, i8** %3, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 %29
  store i8* %35, i8** %3, align 8
  %36 = sub nsw i32 %19, %28
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %17

38:                                               ; preds = %25
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler3NopEi(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %3, align 8
  br label %6

6:                                                ; preds = %14, %2
  %7 = phi i8* [ %5, %2 ], [ %24, %14 ]
  %8 = phi i32 [ %1, %2 ], [ %25, %14 ]
  %9 = load i8*, i8** %4, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %14, label %12, !prof !11

12:                                               ; preds = %6
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %13 = load i8*, i8** %3, align 8
  br label %14

14:                                               ; preds = %6, %12
  %15 = phi i8* [ %7, %6 ], [ %13, %12 ]
  %16 = icmp slt i32 %8, 9
  %17 = select i1 %16, i32 %8, i32 9
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZZN2v88internal9Assembler3NopEiE11kNopOffsets, i64 0, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = sext i8 %20 to i64
  %22 = getelementptr inbounds [32 x i8], [32 x i8]* @.str.11, i64 0, i64 %21
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %15, i8* align 1 %22, i64 %18, i1 false) #14
  %23 = load i8*, i8** %3, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 %18
  store i8* %24, i8** %3, align 8
  %25 = sub nsw i32 %8, %17
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %6

27:                                               ; preds = %14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler15CodeTargetAlignEv(%"class.v8::internal::Assembler"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = bitcast i8** %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %6 = bitcast i8** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %4, %7
  %9 = trunc i64 %8 to i32
  %10 = sub i32 0, %9
  %11 = and i32 %10, 15
  %12 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %13 = inttoptr i64 %4 to i8*
  br label %14

14:                                               ; preds = %22, %1
  %15 = phi i8* [ %13, %1 ], [ %32, %22 ]
  %16 = phi i32 [ %11, %1 ], [ %33, %22 ]
  %17 = load i8*, i8** %12, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 -32
  %19 = icmp ult i8* %15, %18
  br i1 %19, label %22, label %20, !prof !11

20:                                               ; preds = %14
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %21 = load i8*, i8** %2, align 8
  br label %22

22:                                               ; preds = %20, %14
  %23 = phi i8* [ %15, %14 ], [ %21, %20 ]
  %24 = icmp slt i32 %16, 9
  %25 = select i1 %24, i32 %16, i32 9
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZZN2v88internal9Assembler3NopEiE11kNopOffsets, i64 0, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = sext i8 %28 to i64
  %30 = getelementptr inbounds [32 x i8], [32 x i8]* @.str.11, i64 0, i64 %29
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* align 1 %30, i64 %26, i1 false) #14
  %31 = load i8*, i8** %2, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 %26
  store i8* %32, i8** %2, align 8
  %33 = sub nsw i32 %16, %25
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %14

35:                                               ; preds = %22
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN2v88internal9Assembler5IsNopEm(i64) local_unnamed_addr #0 align 2 {
  %2 = inttoptr i64 %0 to i8*
  br label %3

3:                                                ; preds = %6, %1
  %4 = phi i8* [ %2, %1 ], [ %7, %6 ]
  %5 = load i8, i8* %4, align 1
  switch i8 %5, label %12 [
    i8 102, label %6
    i8 -112, label %13
    i8 15, label %8
  ]

6:                                                ; preds = %3
  %7 = getelementptr inbounds i8, i8* %4, i64 1
  br label %3

8:                                                ; preds = %3
  %9 = getelementptr inbounds i8, i8* %4, i64 1
  %10 = load i8, i8* %9, align 1
  %11 = icmp eq i8 %10, 31
  br i1 %11, label %13, label %12

12:                                               ; preds = %3, %8
  br label %13

13:                                               ; preds = %3, %8, %12
  %14 = phi i1 [ false, %12 ], [ true, %8 ], [ true, %3 ]
  ret i1 %14
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7bind_toEPNS0_5LabelEi(%"class.v8::internal::Assembler"*, %"class.v8::internal::Label"*, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %157

7:                                                ; preds = %3
  %8 = add nsw i32 %5, -1
  %9 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %10 = load i8*, i8** %9, align 8
  %11 = sext i32 %8 to i64
  %12 = getelementptr inbounds i8, i8* %10, i64 %11
  %13 = sub nsw i32 1, %5
  %14 = bitcast i8* %12 to i32*
  %15 = load i32, i32* %14, align 1
  %16 = icmp eq i32 %15, %8
  %17 = icmp sgt i32 %8, 3
  br i1 %16, label %93, label %18

18:                                               ; preds = %7
  %19 = add i32 %2, -4
  %20 = sext i32 %2 to i64
  %21 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %22 = bitcast i32*** %21 to i64*
  %23 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %24 = bitcast i32*** %23 to i64*
  %25 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 2, i32 0, i32 1
  %26 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %27 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 2
  br label %28

28:                                               ; preds = %18, %84
  %29 = phi i8* [ %10, %18 ], [ %85, %84 ]
  %30 = phi i1 [ %17, %18 ], [ %92, %84 ]
  %31 = phi i32 [ %15, %18 ], [ %90, %84 ]
  %32 = phi i32 [ %13, %18 ], [ %88, %84 ]
  %33 = phi i32 [ %8, %18 ], [ %31, %84 ]
  br i1 %30, label %34, label %79

34:                                               ; preds = %28
  %35 = add nsw i32 %33, -4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %29, i64 %36
  %38 = bitcast i8* %37 to i32*
  %39 = load i32, i32* %38, align 1
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %79

41:                                               ; preds = %34
  %42 = getelementptr inbounds i8, i8* %29, i64 %20
  %43 = ptrtoint i8* %42 to i64
  %44 = bitcast i8* %37 to i64*
  store i64 %43, i64* %44, align 1
  %45 = load i64, i64* %22, align 8
  %46 = load i64, i64* %24, align 8
  %47 = sub i64 %45, %46
  %48 = icmp eq i64 %47, 0
  %49 = shl i64 %47, 7
  %50 = add i64 %49, -1
  %51 = select i1 %48, i64 0, i64 %50
  %52 = load i64, i64* %25, align 8
  %53 = load i64, i64* %26, align 8
  %54 = add i64 %53, %52
  %55 = icmp eq i64 %51, %54
  %56 = inttoptr i64 %46 to i32**
  %57 = inttoptr i64 %45 to i32**
  br i1 %55, label %58, label %64

58:                                               ; preds = %41
  tail call void @_ZNSt3__15dequeIiNS_9allocatorIiEEE19__add_back_capacityEv(%"class.std::__1::deque"* %27) #14
  %59 = load i64, i64* %26, align 8
  %60 = load i64, i64* %25, align 8
  %61 = load i32**, i32*** %23, align 8
  %62 = load i32**, i32*** %21, align 8
  %63 = add i64 %60, %59
  br label %64

64:                                               ; preds = %58, %41
  %65 = phi i64 [ %63, %58 ], [ %54, %41 ]
  %66 = phi i32** [ %62, %58 ], [ %57, %41 ]
  %67 = phi i32** [ %61, %58 ], [ %56, %41 ]
  %68 = icmp eq i32** %66, %67
  br i1 %68, label %75, label %69

69:                                               ; preds = %64
  %70 = lshr i64 %65, 10
  %71 = getelementptr inbounds i32*, i32** %67, i64 %70
  %72 = load i32*, i32** %71, align 8
  %73 = and i64 %65, 1023
  %74 = getelementptr inbounds i32, i32* %72, i64 %73
  br label %75

75:                                               ; preds = %64, %69
  %76 = phi i32* [ %74, %69 ], [ null, %64 ]
  store i32 %35, i32* %76, align 4
  %77 = load i64, i64* %26, align 8
  %78 = add i64 %77, 1
  store i64 %78, i64* %26, align 8
  br label %84

79:                                               ; preds = %34, %28
  %80 = add i32 %19, %32
  %81 = sext i32 %33 to i64
  %82 = getelementptr inbounds i8, i8* %29, i64 %81
  %83 = bitcast i8* %82 to i32*
  store i32 %80, i32* %83, align 1
  br label %84

84:                                               ; preds = %79, %75
  %85 = load i8*, i8** %9, align 8
  %86 = sext i32 %31 to i64
  %87 = getelementptr inbounds i8, i8* %85, i64 %86
  %88 = sub i32 0, %31
  %89 = bitcast i8* %87 to i32*
  %90 = load i32, i32* %89, align 1
  %91 = icmp eq i32 %90, %31
  %92 = icmp sgt i32 %31, 3
  br i1 %91, label %93, label %28

93:                                               ; preds = %84, %7
  %94 = phi i8* [ %10, %7 ], [ %85, %84 ]
  %95 = phi i32 [ %8, %7 ], [ %31, %84 ]
  %96 = phi i32 [ %13, %7 ], [ %88, %84 ]
  %97 = phi i1 [ %17, %7 ], [ %92, %84 ]
  br i1 %97, label %98, label %151

98:                                               ; preds = %93
  %99 = add nsw i32 %95, -4
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds i8, i8* %94, i64 %100
  %102 = bitcast i8* %101 to i32*
  %103 = load i32, i32* %102, align 1
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %151

105:                                              ; preds = %98
  %106 = sext i32 %2 to i64
  %107 = getelementptr inbounds i8, i8* %94, i64 %106
  %108 = ptrtoint i8* %107 to i64
  %109 = bitcast i8* %101 to i64*
  store i64 %108, i64* %109, align 1
  %110 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %111 = bitcast i32*** %110 to i64*
  %112 = load i64, i64* %111, align 8
  %113 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %114 = bitcast i32*** %113 to i64*
  %115 = load i64, i64* %114, align 8
  %116 = sub i64 %112, %115
  %117 = icmp eq i64 %116, 0
  %118 = shl i64 %116, 7
  %119 = add i64 %118, -1
  %120 = select i1 %117, i64 0, i64 %119
  %121 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 2, i32 0, i32 1
  %122 = load i64, i64* %121, align 8
  %123 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %124 = load i64, i64* %123, align 8
  %125 = add i64 %124, %122
  %126 = icmp eq i64 %120, %125
  %127 = inttoptr i64 %115 to i32**
  %128 = inttoptr i64 %112 to i32**
  br i1 %126, label %129, label %136

129:                                              ; preds = %105
  %130 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 2
  tail call void @_ZNSt3__15dequeIiNS_9allocatorIiEEE19__add_back_capacityEv(%"class.std::__1::deque"* %130) #14
  %131 = load i64, i64* %123, align 8
  %132 = load i64, i64* %121, align 8
  %133 = load i32**, i32*** %113, align 8
  %134 = load i32**, i32*** %110, align 8
  %135 = add i64 %132, %131
  br label %136

136:                                              ; preds = %129, %105
  %137 = phi i64 [ %135, %129 ], [ %125, %105 ]
  %138 = phi i32** [ %134, %129 ], [ %128, %105 ]
  %139 = phi i32** [ %133, %129 ], [ %127, %105 ]
  %140 = icmp eq i32** %138, %139
  br i1 %140, label %147, label %141

141:                                              ; preds = %136
  %142 = lshr i64 %137, 10
  %143 = getelementptr inbounds i32*, i32** %139, i64 %142
  %144 = load i32*, i32** %143, align 8
  %145 = and i64 %137, 1023
  %146 = getelementptr inbounds i32, i32* %144, i64 %145
  br label %147

147:                                              ; preds = %136, %141
  %148 = phi i32* [ %146, %141 ], [ null, %136 ]
  store i32 %99, i32* %148, align 4
  %149 = load i64, i64* %123, align 8
  %150 = add i64 %149, 1
  store i64 %150, i64* %123, align 8
  br label %157

151:                                              ; preds = %98, %93
  %152 = add i32 %2, -4
  %153 = add i32 %152, %96
  %154 = sext i32 %95 to i64
  %155 = getelementptr inbounds i8, i8* %94, i64 %154
  %156 = bitcast i8* %155 to i32*
  store i32 %153, i32* %156, align 1
  br label %157

157:                                              ; preds = %147, %151, %3
  %158 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %1, i64 0, i32 1
  %159 = load i32, i32* %158, align 4
  %160 = icmp sgt i32 %159, 0
  br i1 %160, label %161, label %182

161:                                              ; preds = %157
  %162 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  br label %163

163:                                              ; preds = %161, %175
  %164 = phi i32 [ %159, %161 ], [ %179, %175 ]
  %165 = add nsw i32 %164, -1
  %166 = load i8*, i8** %162, align 8
  %167 = sext i32 %165 to i64
  %168 = getelementptr inbounds i8, i8* %166, i64 %167
  %169 = load i8, i8* %168, align 1
  %170 = sub i32 %2, %164
  %171 = sext i32 %170 to i64
  %172 = add nsw i64 %171, 128
  %173 = icmp ult i64 %172, 256
  br i1 %173, label %175, label %174, !prof !11

174:                                              ; preds = %163
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i64 0, i64 0)) #15
  unreachable

175:                                              ; preds = %163
  %176 = sext i8 %169 to i32
  %177 = trunc i32 %170 to i8
  store i8 %177, i8* %168, align 1
  %178 = icmp slt i8 %169, 0
  %179 = add i32 %164, %176
  %180 = select i1 %178, i32 %179, i32 0
  store i32 %180, i32* %158, align 4
  %181 = icmp sgt i32 %180, 0
  br i1 %181, label %163, label %182

182:                                              ; preds = %175, %157
  %183 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 13
  %184 = load %"class.v8::internal::JumpOptimizationInfo"*, %"class.v8::internal::JumpOptimizationInfo"** %183, align 8
  %185 = icmp eq %"class.v8::internal::JumpOptimizationInfo"* %184, null
  br i1 %185, label %294, label %186

186:                                              ; preds = %182
  %187 = getelementptr inbounds %"class.v8::internal::JumpOptimizationInfo", %"class.v8::internal::JumpOptimizationInfo"* %184, i64 0, i32 0
  %188 = load i32, i32* %187, align 8
  %189 = icmp eq i32 %188, 1
  br i1 %189, label %190, label %294

190:                                              ; preds = %186
  %191 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 5
  %192 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 5, i32 0, i32 1, i32 0, i32 0
  %193 = bitcast %"class.std::__1::__tree_end_node"* %192 to %"class.std::__1::__tree_node.1297"**
  %194 = load %"class.std::__1::__tree_node.1297"*, %"class.std::__1::__tree_node.1297"** %193, align 8
  %195 = icmp eq %"class.std::__1::__tree_node.1297"* %194, null
  br i1 %195, label %294, label %196

196:                                              ; preds = %190, %196
  %197 = phi %"class.std::__1::__tree_end_node"* [ %207, %196 ], [ %192, %190 ]
  %198 = phi %"class.std::__1::__tree_node.1297"* [ %208, %196 ], [ %194, %190 ]
  %199 = getelementptr inbounds %"class.std::__1::__tree_node.1297", %"class.std::__1::__tree_node.1297"* %198, i64 0, i32 1, i32 0, i32 0
  %200 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %199, align 8
  %201 = icmp ult %"class.v8::internal::Label"* %200, %1
  %202 = getelementptr inbounds %"class.std::__1::__tree_node.1297", %"class.std::__1::__tree_node.1297"* %198, i64 0, i32 0, i32 1
  %203 = bitcast %"class.std::__1::__tree_node_base"** %202 to %"class.std::__1::__tree_node.1297"**
  %204 = getelementptr inbounds %"class.std::__1::__tree_node.1297", %"class.std::__1::__tree_node.1297"* %198, i64 0, i32 0, i32 0
  %205 = bitcast %"class.std::__1::__tree_node.1297"* %198 to %"class.std::__1::__tree_node.1297"**
  %206 = select i1 %201, %"class.std::__1::__tree_node.1297"** %203, %"class.std::__1::__tree_node.1297"** %205
  %207 = select i1 %201, %"class.std::__1::__tree_end_node"* %197, %"class.std::__1::__tree_end_node"* %204
  %208 = load %"class.std::__1::__tree_node.1297"*, %"class.std::__1::__tree_node.1297"** %206, align 8
  %209 = icmp eq %"class.std::__1::__tree_node.1297"* %208, null
  br i1 %209, label %210, label %196

210:                                              ; preds = %196
  %211 = icmp eq %"class.std::__1::__tree_end_node"* %207, %192
  br i1 %211, label %294, label %212

212:                                              ; preds = %210
  %213 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %207, i64 4
  %214 = bitcast %"class.std::__1::__tree_end_node"* %213 to %"class.v8::internal::Label"**
  %215 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %214, align 8
  %216 = icmp ugt %"class.v8::internal::Label"* %215, %1
  br i1 %216, label %294, label %217

217:                                              ; preds = %212
  %218 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %207, i64 5
  %219 = bitcast %"class.std::__1::__tree_end_node"* %218 to i32**
  %220 = load i32*, i32** %219, align 8
  %221 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %207, i64 6
  %222 = bitcast %"class.std::__1::__tree_end_node"* %221 to i32**
  %223 = load i32*, i32** %222, align 8
  %224 = icmp eq i32* %220, %223
  br i1 %224, label %227, label %225

225:                                              ; preds = %217
  %226 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  br label %278

227:                                              ; preds = %287, %217
  %228 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %207, i64 1, i32 0
  %229 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %228, align 8
  %230 = icmp eq %"class.std::__1::__tree_node_base"* %229, null
  br i1 %230, label %231, label %239

231:                                              ; preds = %227
  %232 = bitcast %"class.std::__1::__tree_end_node"* %207 to %"class.std::__1::__tree_node_base"*
  %233 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %207, i64 2
  %234 = bitcast %"class.std::__1::__tree_end_node"* %233 to %"class.std::__1::__tree_end_node"**
  %235 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %234, align 8
  %236 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %235, i64 0, i32 0
  %237 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %236, align 8
  %238 = icmp eq %"class.std::__1::__tree_node_base"* %237, %232
  br i1 %238, label %255, label %246

239:                                              ; preds = %227, %239
  %240 = phi %"class.std::__1::__tree_node_base"* [ %242, %239 ], [ %229, %227 ]
  %241 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %240, i64 0, i32 0, i32 0
  %242 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %241, align 8
  %243 = icmp eq %"class.std::__1::__tree_node_base"* %242, null
  br i1 %243, label %244, label %239

244:                                              ; preds = %239
  %245 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %240, i64 0, i32 0
  br label %255

246:                                              ; preds = %231, %246
  %247 = phi %"class.std::__1::__tree_end_node"** [ %250, %246 ], [ %234, %231 ]
  %248 = bitcast %"class.std::__1::__tree_end_node"** %247 to %"class.std::__1::__tree_node_base"**
  %249 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %248, align 8
  %250 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %249, i64 0, i32 2
  %251 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %250, align 8
  %252 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %251, i64 0, i32 0
  %253 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %252, align 8
  %254 = icmp eq %"class.std::__1::__tree_node_base"* %253, %249
  br i1 %254, label %255, label %246

255:                                              ; preds = %246, %244, %231
  %256 = phi %"class.std::__1::__tree_end_node"* [ %245, %244 ], [ %235, %231 ], [ %251, %246 ]
  %257 = getelementptr inbounds %"class.std::__1::map", %"class.std::__1::map"* %191, i64 0, i32 0, i32 0
  %258 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %257, align 8
  %259 = icmp eq %"class.std::__1::__tree_end_node"* %258, %207
  br i1 %259, label %260, label %263

260:                                              ; preds = %255
  %261 = ptrtoint %"class.std::__1::__tree_end_node"* %256 to i64
  %262 = bitcast %"class.std::__1::map"* %191 to i64*
  store i64 %261, i64* %262, align 8
  br label %263

263:                                              ; preds = %260, %255
  %264 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 5, i32 0, i32 2, i32 0, i32 0
  %265 = load i64, i64* %264, align 8
  %266 = add i64 %265, -1
  store i64 %266, i64* %264, align 8
  %267 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 5, i32 0, i32 1, i32 0, i32 0, i32 0
  %268 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %267, align 8
  %269 = bitcast %"class.std::__1::__tree_end_node"* %207 to %"class.std::__1::__tree_node_base"*
  tail call void @_ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %268, %"class.std::__1::__tree_node_base"* %269) #14
  %270 = load i32*, i32** %219, align 8
  %271 = icmp eq i32* %270, null
  br i1 %271, label %276, label %272

272:                                              ; preds = %263
  %273 = ptrtoint i32* %270 to i64
  %274 = bitcast %"class.std::__1::__tree_end_node"* %221 to i64*
  store i64 %273, i64* %274, align 8
  %275 = bitcast i32* %270 to i8*
  tail call void @_ZdlPv(i8* %275) #17
  br label %276

276:                                              ; preds = %263, %272
  %277 = bitcast %"class.std::__1::__tree_end_node"* %207 to i8*
  tail call void @_ZdlPv(i8* %277) #17
  br label %294

278:                                              ; preds = %225, %287
  %279 = phi i32* [ %220, %225 ], [ %292, %287 ]
  %280 = load i32, i32* %279, align 4
  %281 = xor i32 %280, -1
  %282 = add i32 %281, %2
  %283 = sext i32 %282 to i64
  %284 = add nsw i64 %283, 128
  %285 = icmp ult i64 %284, 256
  br i1 %285, label %287, label %286, !prof !11

286:                                              ; preds = %278
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i64 0, i64 0)) #15
  unreachable

287:                                              ; preds = %278
  %288 = trunc i32 %282 to i8
  %289 = load i8*, i8** %226, align 8
  %290 = sext i32 %280 to i64
  %291 = getelementptr inbounds i8, i8* %289, i64 %290
  store i8 %288, i8* %291, align 1
  %292 = getelementptr inbounds i32, i32* %279, i64 1
  %293 = icmp eq i32* %292, %223
  br i1 %293, label %227, label %278

294:                                              ; preds = %212, %210, %190, %276, %182, %186
  %295 = xor i32 %2, -1
  store i32 %295, i32* %4, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4bindEPNS0_5LabelE(%"class.v8::internal::Assembler"*, %"class.v8::internal::Label"*) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = trunc i64 %9 to i32
  tail call void @_ZN2v88internal9Assembler7bind_toEPNS0_5LabelEi(%"class.v8::internal::Assembler"* %0, %"class.v8::internal::Label"* %1, i32 %10)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler22record_farjmp_positionEPNS0_5LabelEi(%"class.v8::internal::Assembler"*, %"class.v8::internal::Label"*, i32) local_unnamed_addr #1 align 2 {
  %4 = ptrtoint %"class.v8::internal::Label"* %1 to i64
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 5
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 5, i32 0, i32 1, i32 0, i32 0
  %7 = bitcast %"class.std::__1::__tree_end_node"* %6 to %"class.std::__1::__tree_node.1297"**
  %8 = load %"class.std::__1::__tree_node.1297"*, %"class.std::__1::__tree_node.1297"** %7, align 8
  %9 = icmp eq %"class.std::__1::__tree_node.1297"* %8, null
  br i1 %9, label %38, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 5, i32 0, i32 1, i32 0, i32 0, i32 0
  br label %12

12:                                               ; preds = %34, %10
  %13 = phi %"class.std::__1::__tree_node.1297"* [ %37, %34 ], [ %8, %10 ]
  %14 = phi %"class.std::__1::__tree_node_base"** [ %36, %34 ], [ %11, %10 ]
  %15 = getelementptr inbounds %"class.std::__1::__tree_node.1297", %"class.std::__1::__tree_node.1297"* %13, i64 0, i32 1, i32 0, i32 0
  %16 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %15, align 8
  %17 = icmp ugt %"class.v8::internal::Label"* %16, %1
  br i1 %17, label %18, label %24

18:                                               ; preds = %12
  %19 = getelementptr inbounds %"class.std::__1::__tree_node.1297", %"class.std::__1::__tree_node.1297"* %13, i64 0, i32 0, i32 0, i32 0
  %20 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %19, align 8
  %21 = icmp eq %"class.std::__1::__tree_node_base"* %20, null
  br i1 %21, label %22, label %34

22:                                               ; preds = %18
  %23 = getelementptr inbounds %"class.std::__1::__tree_node.1297", %"class.std::__1::__tree_node.1297"* %13, i64 0, i32 0, i32 0
  br label %40

24:                                               ; preds = %12
  %25 = icmp ult %"class.v8::internal::Label"* %16, %1
  br i1 %25, label %26, label %32

26:                                               ; preds = %24
  %27 = getelementptr inbounds %"class.std::__1::__tree_node.1297", %"class.std::__1::__tree_node.1297"* %13, i64 0, i32 0, i32 1
  %28 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %27, align 8
  %29 = icmp eq %"class.std::__1::__tree_node_base"* %28, null
  br i1 %29, label %30, label %34

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.std::__1::__tree_node.1297", %"class.std::__1::__tree_node.1297"* %13, i64 0, i32 0, i32 0
  br label %40

32:                                               ; preds = %24
  %33 = getelementptr inbounds %"class.std::__1::__tree_node.1297", %"class.std::__1::__tree_node.1297"* %13, i64 0, i32 0, i32 0
  br label %40

34:                                               ; preds = %26, %18
  %35 = phi %"class.std::__1::__tree_node_base"* [ %20, %18 ], [ %28, %26 ]
  %36 = phi %"class.std::__1::__tree_node_base"** [ %19, %18 ], [ %27, %26 ]
  %37 = bitcast %"class.std::__1::__tree_node_base"* %35 to %"class.std::__1::__tree_node.1297"*
  br label %12

38:                                               ; preds = %3
  %39 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %6, i64 0, i32 0
  br label %40

40:                                               ; preds = %38, %32, %30, %22
  %41 = phi %"class.std::__1::__tree_end_node"* [ %6, %38 ], [ %23, %22 ], [ %31, %30 ], [ %33, %32 ]
  %42 = phi %"class.std::__1::__tree_node_base"** [ %39, %38 ], [ %19, %22 ], [ %27, %30 ], [ %14, %32 ]
  %43 = bitcast %"class.std::__1::__tree_node_base"** %42 to %"class.std::__1::__tree_node.1297"**
  %44 = load %"class.std::__1::__tree_node.1297"*, %"class.std::__1::__tree_node.1297"** %43, align 8
  %45 = icmp eq %"class.std::__1::__tree_node.1297"* %44, null
  br i1 %45, label %46, label %72

46:                                               ; preds = %40
  %47 = tail call i8* @_Znwm(i64 64) #17, !noalias !12
  %48 = getelementptr inbounds i8, i8* %47, i64 32
  %49 = bitcast i8* %48 to i64*
  store i64 %4, i64* %49, align 8, !noalias !12
  %50 = getelementptr inbounds i8, i8* %47, i64 40
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %50, i8 0, i64 24, i1 false) #14, !noalias !12
  %51 = bitcast i8* %47 to %"class.std::__1::__tree_node.1297"*
  %52 = bitcast i8* %47 to %"class.std::__1::__tree_node_base"*
  %53 = getelementptr inbounds i8, i8* %47, i64 16
  %54 = bitcast i8* %53 to %"class.std::__1::__tree_end_node"**
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %47, i8 0, i64 16, i1 false) #14
  store %"class.std::__1::__tree_end_node"* %41, %"class.std::__1::__tree_end_node"** %54, align 8
  %55 = bitcast %"class.std::__1::__tree_node_base"** %42 to i8**
  store i8* %47, i8** %55, align 8
  %56 = getelementptr inbounds %"class.std::__1::map", %"class.std::__1::map"* %5, i64 0, i32 0, i32 0
  %57 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %56, align 8
  %58 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %57, i64 0, i32 0
  %59 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %58, align 8
  %60 = icmp eq %"class.std::__1::__tree_node_base"* %59, null
  br i1 %60, label %65, label %61

61:                                               ; preds = %46
  %62 = ptrtoint %"class.std::__1::__tree_node_base"* %59 to i64
  %63 = bitcast %"class.std::__1::map"* %5 to i64*
  store i64 %62, i64* %63, align 8
  %64 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %42, align 8
  br label %65

65:                                               ; preds = %61, %46
  %66 = phi %"class.std::__1::__tree_node_base"* [ %52, %46 ], [ %64, %61 ]
  %67 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 5, i32 0, i32 1, i32 0, i32 0, i32 0
  %68 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %67, align 8
  tail call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %68, %"class.std::__1::__tree_node_base"* %66) #14
  %69 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 5, i32 0, i32 2, i32 0, i32 0
  %70 = load i64, i64* %69, align 8
  %71 = add i64 %70, 1
  store i64 %71, i64* %69, align 8
  br label %72

72:                                               ; preds = %40, %65
  %73 = phi %"class.std::__1::__tree_node.1297"* [ %51, %65 ], [ %44, %40 ]
  %74 = getelementptr inbounds %"class.std::__1::__tree_node.1297", %"class.std::__1::__tree_node.1297"* %73, i64 0, i32 1, i32 0, i32 1
  %75 = getelementptr inbounds %"class.std::__1::__tree_node.1297", %"class.std::__1::__tree_node.1297"* %73, i64 0, i32 1, i32 0, i32 1, i32 0, i32 1
  %76 = load i32*, i32** %75, align 8
  %77 = getelementptr inbounds %"class.std::__1::__tree_node.1297", %"class.std::__1::__tree_node.1297"* %73, i64 0, i32 1, i32 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %78 = load i32*, i32** %77, align 8
  %79 = icmp eq i32* %76, %78
  %80 = ptrtoint i32* %78 to i64
  br i1 %79, label %85, label %81

81:                                               ; preds = %72
  store i32 %2, i32* %76, align 4
  %82 = getelementptr inbounds i32, i32* %76, i64 1
  %83 = ptrtoint i32* %82 to i64
  %84 = bitcast i32** %75 to i64*
  store i64 %83, i64* %84, align 8
  br label %141

85:                                               ; preds = %72
  %86 = ptrtoint i32* %76 to i64
  %87 = bitcast i32** %75 to i64*
  %88 = bitcast %"class.std::__1::vector.967"* %74 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = sub i64 %86, %89
  %91 = ashr exact i64 %90, 2
  %92 = add nsw i64 %91, 1
  %93 = icmp ugt i64 %92, 4611686018427387903
  br i1 %93, label %94, label %96

94:                                               ; preds = %85
  %95 = bitcast %"class.std::__1::vector.967"* %74 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %95) #15
  unreachable

96:                                               ; preds = %85
  %97 = bitcast i32** %77 to i64*
  %98 = sub i64 %80, %89
  %99 = ashr exact i64 %98, 2
  %100 = icmp ult i64 %99, 2305843009213693951
  br i1 %100, label %101, label %109

101:                                              ; preds = %96
  %102 = ashr exact i64 %98, 1
  %103 = icmp ult i64 %102, %92
  %104 = select i1 %103, i64 %92, i64 %102
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %114, label %106

106:                                              ; preds = %101
  %107 = icmp ugt i64 %104, 4611686018427387903
  br i1 %107, label %108, label %109

108:                                              ; preds = %106
  tail call void @abort() #15
  unreachable

109:                                              ; preds = %106, %96
  %110 = phi i64 [ %104, %106 ], [ 4611686018427387903, %96 ]
  %111 = shl i64 %110, 2
  %112 = tail call i8* @_Znwm(i64 %111) #17
  %113 = bitcast i8* %112 to i32*
  br label %114

114:                                              ; preds = %109, %101
  %115 = phi i64 [ %110, %109 ], [ 0, %101 ]
  %116 = phi i32* [ %113, %109 ], [ null, %101 ]
  %117 = getelementptr inbounds i32, i32* %116, i64 %91
  %118 = getelementptr inbounds i32, i32* %116, i64 %115
  %119 = ptrtoint i32* %118 to i64
  store i32 %2, i32* %117, align 4
  %120 = getelementptr inbounds i32, i32* %117, i64 1
  %121 = ptrtoint i32* %120 to i64
  %122 = getelementptr inbounds %"class.std::__1::vector.967", %"class.std::__1::vector.967"* %74, i64 0, i32 0, i32 0
  %123 = load i32*, i32** %122, align 8
  %124 = load i64, i64* %87, align 8
  %125 = ptrtoint i32* %123 to i64
  %126 = sub i64 %124, %125
  %127 = ashr exact i64 %126, 2
  %128 = sub nsw i64 0, %127
  %129 = getelementptr inbounds i32, i32* %117, i64 %128
  %130 = ptrtoint i32* %129 to i64
  %131 = icmp sgt i64 %126, 0
  br i1 %131, label %132, label %136

132:                                              ; preds = %114
  %133 = bitcast i32* %129 to i8*
  %134 = bitcast i32* %123 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %133, i8* align 4 %134, i64 %126, i1 false) #14
  %135 = load i32*, i32** %122, align 8
  br label %136

136:                                              ; preds = %132, %114
  %137 = phi i32* [ %123, %114 ], [ %135, %132 ]
  store i64 %130, i64* %88, align 8
  store i64 %121, i64* %87, align 8
  store i64 %119, i64* %97, align 8
  %138 = icmp eq i32* %137, null
  br i1 %138, label %141, label %139

139:                                              ; preds = %136
  %140 = bitcast i32* %137 to i8*
  tail call void @_ZdlPv(i8* %140) #17
  br label %141

141:                                              ; preds = %81, %136, %139
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal9Assembler21is_optimizable_farjmpEi(%"class.v8::internal::Assembler"* nocapture readonly, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 11
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %36

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 13
  %8 = load %"class.v8::internal::JumpOptimizationInfo"*, %"class.v8::internal::JumpOptimizationInfo"** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::JumpOptimizationInfo", %"class.v8::internal::JumpOptimizationInfo"* %8, i64 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 1
  br i1 %11, label %13, label %12, !prof !11

12:                                               ; preds = %6
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.8, i64 0, i64 0)) #15
  unreachable

13:                                               ; preds = %6
  %14 = getelementptr inbounds %"class.v8::internal::JumpOptimizationInfo", %"class.v8::internal::JumpOptimizationInfo"* %8, i64 0, i32 2
  %15 = getelementptr inbounds %"class.v8::internal::JumpOptimizationInfo", %"class.v8::internal::JumpOptimizationInfo"* %8, i64 0, i32 2, i32 0, i32 1
  %16 = bitcast i32** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast %"class.std::__1::vector.48"* %14 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %17, %19
  %21 = trunc i64 %20 to i32
  %22 = shl i32 %21, 3
  %23 = and i32 %22, -32
  %24 = icmp sgt i32 %23, %1
  br i1 %24, label %26, label %25, !prof !11

25:                                               ; preds = %13
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.9, i64 0, i64 0)) #15
  unreachable

26:                                               ; preds = %13
  %27 = inttoptr i64 %19 to i32*
  %28 = sdiv i32 %1, 32
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i32, i32* %27, i64 %29
  %31 = load i32, i32* %30, align 4
  %32 = and i32 %1, 31
  %33 = shl i32 1, %32
  %34 = and i32 %31, %33
  %35 = icmp ne i32 %34, 0
  br label %36

36:                                               ; preds = %2, %26
  %37 = phi i1 [ %35, %26 ], [ false, %2 ]
  ret i1 %37
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 1
  %3 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %2, i64 0, i32 0, i32 0, i32 0
  %4 = load %"class.v8::internal::AssemblerBuffer"*, %"class.v8::internal::AssemblerBuffer"** %3, align 8
  %5 = bitcast %"class.v8::internal::AssemblerBuffer"* %4 to i32 (%"class.v8::internal::AssemblerBuffer"*)***
  %6 = load i32 (%"class.v8::internal::AssemblerBuffer"*)**, i32 (%"class.v8::internal::AssemblerBuffer"*)*** %5, align 8
  %7 = getelementptr inbounds i32 (%"class.v8::internal::AssemblerBuffer"*)*, i32 (%"class.v8::internal::AssemblerBuffer"*)** %6, i64 3
  %8 = load i32 (%"class.v8::internal::AssemblerBuffer"*)*, i32 (%"class.v8::internal::AssemblerBuffer"*)** %7, align 8
  %9 = tail call i32 %8(%"class.v8::internal::AssemblerBuffer"* %4) #14
  %10 = shl nsw i32 %9, 1
  %11 = icmp sgt i32 %9, 268435456
  br i1 %11, label %12, label %13

12:                                               ; preds = %1
  tail call void @_ZN2v88internal2V823FatalProcessOutOfMemoryEPNS0_7IsolateEPKcb(%"class.v8::internal::Isolate"* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i64 0, i64 0), i1 zeroext false) #15
  unreachable

13:                                               ; preds = %1
  %14 = load %"class.v8::internal::AssemblerBuffer"*, %"class.v8::internal::AssemblerBuffer"** %3, align 8
  %15 = bitcast %"class.v8::internal::AssemblerBuffer"* %14 to %"class.v8::internal::AssemblerBuffer"* (%"class.v8::internal::AssemblerBuffer"*, i32)***
  %16 = load %"class.v8::internal::AssemblerBuffer"* (%"class.v8::internal::AssemblerBuffer"*, i32)**, %"class.v8::internal::AssemblerBuffer"* (%"class.v8::internal::AssemblerBuffer"*, i32)*** %15, align 8
  %17 = getelementptr inbounds %"class.v8::internal::AssemblerBuffer"* (%"class.v8::internal::AssemblerBuffer"*, i32)*, %"class.v8::internal::AssemblerBuffer"* (%"class.v8::internal::AssemblerBuffer"*, i32)** %16, i64 4
  %18 = load %"class.v8::internal::AssemblerBuffer"* (%"class.v8::internal::AssemblerBuffer"*, i32)*, %"class.v8::internal::AssemblerBuffer"* (%"class.v8::internal::AssemblerBuffer"*, i32)** %17, align 8
  %19 = tail call %"class.v8::internal::AssemblerBuffer"* %18(%"class.v8::internal::AssemblerBuffer"* %14, i32 %10) #14
  %20 = ptrtoint %"class.v8::internal::AssemblerBuffer"* %19 to i64
  %21 = bitcast %"class.v8::internal::AssemblerBuffer"* %19 to i8* (%"class.v8::internal::AssemblerBuffer"*)***
  %22 = load i8* (%"class.v8::internal::AssemblerBuffer"*)**, i8* (%"class.v8::internal::AssemblerBuffer"*)*** %21, align 8
  %23 = getelementptr inbounds i8* (%"class.v8::internal::AssemblerBuffer"*)*, i8* (%"class.v8::internal::AssemblerBuffer"*)** %22, i64 2
  %24 = load i8* (%"class.v8::internal::AssemblerBuffer"*)*, i8* (%"class.v8::internal::AssemblerBuffer"*)** %23, align 8
  %25 = tail call i8* %24(%"class.v8::internal::AssemblerBuffer"* %19) #14
  %26 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %27 = load i8*, i8** %26, align 8
  %28 = ptrtoint i8* %25 to i64
  %29 = ptrtoint i8* %27 to i64
  %30 = sub i64 %28, %29
  %31 = sext i32 %10 to i64
  %32 = getelementptr inbounds i8, i8* %25, i64 %31
  %33 = sext i32 %9 to i64
  %34 = getelementptr inbounds i8, i8* %27, i64 %33
  %35 = ptrtoint i8* %32 to i64
  %36 = ptrtoint i8* %34 to i64
  %37 = sub i64 %35, %36
  %38 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1
  %39 = getelementptr inbounds %"class.v8::internal::RelocInfoWriter", %"class.v8::internal::RelocInfoWriter"* %38, i64 0, i32 0
  %40 = bitcast %"class.v8::internal::RelocInfoWriter"* %38 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %36, %41
  %43 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %44 = bitcast i8** %43 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = sub i64 %45, %29
  %47 = shl i64 %46, 32
  %48 = ashr exact i64 %47, 32
  switch i64 %48, label %75 [
    i64 1, label %49
    i64 2, label %51
    i64 3, label %55
    i64 4, label %56
    i64 5, label %60
    i64 6, label %61
    i64 7, label %62
    i64 8, label %63
    i64 9, label %67
    i64 10, label %68
    i64 11, label %69
    i64 12, label %70
    i64 13, label %71
    i64 14, label %72
    i64 15, label %73
    i64 16, label %74
  ]

49:                                               ; preds = %13
  %50 = load i8, i8* %27, align 1
  store i8 %50, i8* %25, align 1
  br label %76

51:                                               ; preds = %13
  %52 = bitcast i8* %27 to i16*
  %53 = bitcast i8* %25 to i16*
  %54 = load i16, i16* %52, align 1
  store i16 %54, i16* %53, align 1
  br label %76

55:                                               ; preds = %13
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %27, i64 3, i1 false) #14
  br label %76

56:                                               ; preds = %13
  %57 = bitcast i8* %27 to i32*
  %58 = bitcast i8* %25 to i32*
  %59 = load i32, i32* %57, align 1
  store i32 %59, i32* %58, align 1
  br label %76

60:                                               ; preds = %13
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %27, i64 5, i1 false) #14
  br label %76

61:                                               ; preds = %13
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %27, i64 6, i1 false) #14
  br label %76

62:                                               ; preds = %13
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %27, i64 7, i1 false) #14
  br label %76

63:                                               ; preds = %13
  %64 = bitcast i8* %27 to i64*
  %65 = bitcast i8* %25 to i64*
  %66 = load i64, i64* %64, align 1
  store i64 %66, i64* %65, align 1
  br label %76

67:                                               ; preds = %13
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %27, i64 9, i1 false) #14
  br label %76

68:                                               ; preds = %13
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %27, i64 10, i1 false) #14
  br label %76

69:                                               ; preds = %13
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %27, i64 11, i1 false) #14
  br label %76

70:                                               ; preds = %13
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %27, i64 12, i1 false) #14
  br label %76

71:                                               ; preds = %13
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %27, i64 13, i1 false) #14
  br label %76

72:                                               ; preds = %13
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %27, i64 14, i1 false) #14
  br label %76

73:                                               ; preds = %13
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %27, i64 15, i1 false) #14
  br label %76

74:                                               ; preds = %13
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %27, i64 16, i1 false) #14
  br label %76

75:                                               ; preds = %13
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %27, i64 %48, i1 false) #14
  br label %76

76:                                               ; preds = %49, %51, %55, %56, %60, %61, %62, %63, %67, %68, %69, %70, %71, %72, %73, %74, %75
  %77 = load i8*, i8** %39, align 8
  %78 = getelementptr inbounds i8, i8* %77, i64 %37
  switch i64 %42, label %105 [
    i64 1, label %79
    i64 2, label %81
    i64 3, label %85
    i64 4, label %86
    i64 5, label %90
    i64 6, label %91
    i64 7, label %92
    i64 8, label %93
    i64 9, label %97
    i64 10, label %98
    i64 11, label %99
    i64 12, label %100
    i64 13, label %101
    i64 14, label %102
    i64 15, label %103
    i64 16, label %104
  ]

79:                                               ; preds = %76
  %80 = load i8, i8* %77, align 1
  store i8 %80, i8* %78, align 1
  br label %106

81:                                               ; preds = %76
  %82 = bitcast i8* %77 to i16*
  %83 = bitcast i8* %78 to i16*
  %84 = load i16, i16* %82, align 1
  store i16 %84, i16* %83, align 1
  br label %106

85:                                               ; preds = %76
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %77, i64 3, i1 false) #14
  br label %106

86:                                               ; preds = %76
  %87 = bitcast i8* %77 to i32*
  %88 = bitcast i8* %78 to i32*
  %89 = load i32, i32* %87, align 1
  store i32 %89, i32* %88, align 1
  br label %106

90:                                               ; preds = %76
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %77, i64 5, i1 false) #14
  br label %106

91:                                               ; preds = %76
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %77, i64 6, i1 false) #14
  br label %106

92:                                               ; preds = %76
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %77, i64 7, i1 false) #14
  br label %106

93:                                               ; preds = %76
  %94 = bitcast i8* %77 to i64*
  %95 = bitcast i8* %78 to i64*
  %96 = load i64, i64* %94, align 1
  store i64 %96, i64* %95, align 1
  br label %106

97:                                               ; preds = %76
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %77, i64 9, i1 false) #14
  br label %106

98:                                               ; preds = %76
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %77, i64 10, i1 false) #14
  br label %106

99:                                               ; preds = %76
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %77, i64 11, i1 false) #14
  br label %106

100:                                              ; preds = %76
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %77, i64 12, i1 false) #14
  br label %106

101:                                              ; preds = %76
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %77, i64 13, i1 false) #14
  br label %106

102:                                              ; preds = %76
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %77, i64 14, i1 false) #14
  br label %106

103:                                              ; preds = %76
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %77, i64 15, i1 false) #14
  br label %106

104:                                              ; preds = %76
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %77, i64 16, i1 false) #14
  br label %106

105:                                              ; preds = %76
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %77, i64 %42, i1 false) #14
  br label %106

106:                                              ; preds = %79, %81, %85, %86, %90, %91, %92, %93, %97, %98, %99, %100, %101, %102, %103, %104, %105
  %107 = load %"class.v8::internal::AssemblerBuffer"*, %"class.v8::internal::AssemblerBuffer"** %3, align 8
  %108 = bitcast %"class.std::__1::unique_ptr"* %2 to i64*
  store i64 %20, i64* %108, align 8
  %109 = icmp eq %"class.v8::internal::AssemblerBuffer"* %107, null
  br i1 %109, label %115, label %110

110:                                              ; preds = %106
  %111 = bitcast %"class.v8::internal::AssemblerBuffer"* %107 to void (%"class.v8::internal::AssemblerBuffer"*)***
  %112 = load void (%"class.v8::internal::AssemblerBuffer"*)**, void (%"class.v8::internal::AssemblerBuffer"*)*** %111, align 8
  %113 = getelementptr inbounds void (%"class.v8::internal::AssemblerBuffer"*)*, void (%"class.v8::internal::AssemblerBuffer"*)** %112, i64 1
  %114 = load void (%"class.v8::internal::AssemblerBuffer"*)*, void (%"class.v8::internal::AssemblerBuffer"*)** %113, align 8
  tail call void %114(%"class.v8::internal::AssemblerBuffer"* nonnull %107) #14
  br label %115

115:                                              ; preds = %106, %110
  store i8* %25, i8** %26, align 8
  %116 = load i8*, i8** %43, align 8
  %117 = getelementptr inbounds i8, i8* %116, i64 %30
  store i8* %117, i8** %43, align 8
  %118 = load i8*, i8** %39, align 8
  %119 = getelementptr inbounds i8, i8* %118, i64 %37
  %120 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 1
  %121 = load i8*, i8** %120, align 8
  %122 = getelementptr inbounds i8, i8* %121, i64 %30
  store i8* %119, i8** %39, align 8
  store i8* %122, i8** %120, align 8
  %123 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %124 = load i32**, i32*** %123, align 8
  %125 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 2, i32 0, i32 1
  %126 = load i64, i64* %125, align 8
  %127 = lshr i64 %126, 10
  %128 = getelementptr inbounds i32*, i32** %124, i64 %127
  %129 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %130 = load i32**, i32*** %129, align 8
  %131 = icmp eq i32** %130, %124
  br i1 %131, label %145, label %132

132:                                              ; preds = %115
  %133 = load i32*, i32** %128, align 8
  %134 = and i64 %126, 1023
  %135 = getelementptr inbounds i32, i32* %133, i64 %134
  %136 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %137 = load i64, i64* %136, align 8
  %138 = add i64 %137, %126
  %139 = lshr i64 %138, 10
  %140 = getelementptr inbounds i32*, i32** %124, i64 %139
  %141 = load i32*, i32** %140, align 8
  %142 = and i64 %138, 1023
  %143 = getelementptr inbounds i32, i32* %141, i64 %142
  %144 = icmp eq i32* %143, %135
  br i1 %144, label %145, label %146

145:                                              ; preds = %166, %115, %132
  ret void

146:                                              ; preds = %132, %171
  %147 = phi i8* [ %172, %171 ], [ %25, %132 ]
  %148 = phi i32* [ %169, %171 ], [ %135, %132 ]
  %149 = phi i32** [ %167, %171 ], [ %128, %132 ]
  %150 = load i32, i32* %148, align 4
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds i8, i8* %147, i64 %151
  %153 = bitcast i8* %152 to i64*
  %154 = load i64, i64* %153, align 1
  %155 = add nsw i64 %154, %30
  store i64 %155, i64* %153, align 1
  %156 = getelementptr inbounds i32, i32* %148, i64 1
  %157 = ptrtoint i32* %156 to i64
  %158 = bitcast i32** %149 to i64*
  %159 = load i64, i64* %158, align 8
  %160 = sub i64 %157, %159
  %161 = icmp eq i64 %160, 4096
  br i1 %161, label %162, label %166

162:                                              ; preds = %146
  %163 = getelementptr inbounds i32*, i32** %149, i64 1
  %164 = bitcast i32** %163 to i64*
  %165 = load i64, i64* %164, align 8
  br label %166

166:                                              ; preds = %146, %162
  %167 = phi i32** [ %163, %162 ], [ %149, %146 ]
  %168 = phi i64 [ %165, %162 ], [ %157, %146 ]
  %169 = inttoptr i64 %168 to i32*
  %170 = icmp eq i32* %143, %169
  br i1 %170, label %145, label %171

171:                                              ; preds = %166
  %172 = load i8*, i8** %26, align 8
  br label %146
}

; Function Attrs: noreturn
declare void @_ZN2v88internal2V823FatalProcessOutOfMemoryEPNS0_7IsolateEPKcb(%"class.v8::internal::Isolate"*, i8*, i1 zeroext) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler12emit_operandEiNS0_7OperandE(%"class.v8::internal::Assembler"* nocapture, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = alloca %"class.v8::internal::Operand", align 8
  %6 = bitcast %"class.v8::internal::Operand"* %5 to i64*
  store i64 %2, i64* %6, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 7
  %8 = bitcast i8* %7 to i32*
  store i32 %3, i32* %8, align 1
  %9 = lshr i32 %3, 16
  %10 = and i32 %9, 255
  %11 = lshr i64 %2, 8
  %12 = trunc i64 %11 to i8
  %13 = trunc i32 %1 to i8
  %14 = shl i8 %13, 3
  %15 = or i8 %14, %12
  %16 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %16, align 8
  store i8 %15, i8* %17, align 1
  %19 = icmp eq i8 %12, 5
  %20 = lshr i64 %2, 16
  %21 = trunc i64 %20 to i8
  br i1 %19, label %37, label %22

22:                                               ; preds = %4
  %23 = trunc i32 %9 to i8
  %24 = icmp ugt i8 %23, 1
  br i1 %24, label %25, label %124

25:                                               ; preds = %22
  %26 = zext i32 %10 to i64
  %27 = load i8*, i8** %16, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %16, align 8
  store i8 %21, i8* %27, align 1
  %29 = icmp eq i32 %10, 2
  br i1 %29, label %124, label %30

30:                                               ; preds = %25
  %31 = add nsw i64 %26, -2
  %32 = add nsw i64 %26, -3
  %33 = and i64 %31, 3
  %34 = icmp ult i64 %32, 3
  br i1 %34, label %111, label %35

35:                                               ; preds = %30
  %36 = sub nsw i64 %31, %33
  br label %86

37:                                               ; preds = %4
  %38 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 1
  %39 = bitcast i8* %38 to %"class.v8::internal::Label"**
  %40 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %39, align 1
  %41 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %40, i64 0, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = icmp slt i32 %42, 0
  br i1 %43, label %44, label %59

44:                                               ; preds = %37
  %45 = bitcast i8** %16 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %48 = bitcast i8** %47 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = sub i64 %46, %49
  %51 = trunc i64 %50 to i32
  %52 = ashr i32 %3, 24
  %53 = sub nsw i32 -5, %42
  %54 = sub i32 %53, %51
  %55 = add i32 %54, %52
  %56 = inttoptr i64 %46 to i32*
  store i32 %55, i32* %56, align 1
  %57 = load i8*, i8** %16, align 8
  %58 = getelementptr inbounds i8, i8* %57, i64 4
  store i8* %58, i8** %16, align 8
  br label %124

59:                                               ; preds = %37
  %60 = icmp eq i32 %42, 0
  br i1 %60, label %74, label %61

61:                                               ; preds = %59
  %62 = add nsw i32 %42, -1
  %63 = bitcast i8** %16 to i32**
  %64 = load i32*, i32** %63, align 8
  store i32 %62, i32* %64, align 1
  %65 = load i8*, i8** %16, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 4
  store i8* %66, i8** %16, align 8
  %67 = ptrtoint i8* %66 to i64
  %68 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %69 = bitcast i8** %68 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = sub i64 %67, %70
  %72 = trunc i64 %71 to i32
  %73 = add i32 %72, -3
  store i32 %73, i32* %41, align 4
  br label %124

74:                                               ; preds = %59
  %75 = bitcast i8** %16 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %78 = bitcast i8** %77 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = sub i64 %76, %79
  %81 = trunc i64 %80 to i32
  %82 = inttoptr i64 %76 to i32*
  store i32 %81, i32* %82, align 1
  %83 = load i8*, i8** %16, align 8
  %84 = getelementptr inbounds i8, i8* %83, i64 4
  store i8* %84, i8** %16, align 8
  %85 = add nsw i32 %81, 1
  store i32 %85, i32* %41, align 4
  br label %124

86:                                               ; preds = %86, %35
  %87 = phi i64 [ 2, %35 ], [ %108, %86 ]
  %88 = phi i64 [ %36, %35 ], [ %109, %86 ]
  %89 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %87
  %90 = load i8, i8* %89, align 1
  %91 = load i8*, i8** %16, align 8
  %92 = getelementptr inbounds i8, i8* %91, i64 1
  store i8* %92, i8** %16, align 8
  store i8 %90, i8* %91, align 1
  %93 = or i64 %87, 1
  %94 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %93
  %95 = load i8, i8* %94, align 1
  %96 = load i8*, i8** %16, align 8
  %97 = getelementptr inbounds i8, i8* %96, i64 1
  store i8* %97, i8** %16, align 8
  store i8 %95, i8* %96, align 1
  %98 = add nuw nsw i64 %87, 2
  %99 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %98
  %100 = load i8, i8* %99, align 1
  %101 = load i8*, i8** %16, align 8
  %102 = getelementptr inbounds i8, i8* %101, i64 1
  store i8* %102, i8** %16, align 8
  store i8 %100, i8* %101, align 1
  %103 = add nuw nsw i64 %87, 3
  %104 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %103
  %105 = load i8, i8* %104, align 1
  %106 = load i8*, i8** %16, align 8
  %107 = getelementptr inbounds i8, i8* %106, i64 1
  store i8* %107, i8** %16, align 8
  store i8 %105, i8* %106, align 1
  %108 = add nuw nsw i64 %87, 4
  %109 = add i64 %88, -4
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %86

111:                                              ; preds = %86, %30
  %112 = phi i64 [ 2, %30 ], [ %108, %86 ]
  %113 = icmp eq i64 %33, 0
  br i1 %113, label %124, label %114

114:                                              ; preds = %111, %114
  %115 = phi i64 [ %121, %114 ], [ %112, %111 ]
  %116 = phi i64 [ %122, %114 ], [ %33, %111 ]
  %117 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %115
  %118 = load i8, i8* %117, align 1
  %119 = load i8*, i8** %16, align 8
  %120 = getelementptr inbounds i8, i8* %119, i64 1
  store i8* %120, i8** %16, align 8
  store i8 %118, i8* %119, align 1
  %121 = add nuw nsw i64 %115, 1
  %122 = add i64 %116, -1
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %124, label %114, !llvm.loop !15

124:                                              ; preds = %111, %114, %25, %22, %44, %74, %61
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler13arithmetic_opEhNS0_8RegisterENS0_7OperandEi(%"class.v8::internal::Assembler"*, i8 zeroext, i32, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 -32
  %12 = icmp ult i8* %8, %11
  br i1 %12, label %14, label %13, !prof !11

13:                                               ; preds = %6
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %14

14:                                               ; preds = %6, %13
  %15 = icmp eq i32 %5, 8
  %16 = trunc i64 %3 to i8
  %17 = lshr i32 %2, 1
  %18 = trunc i32 %17 to i8
  br i1 %15, label %19, label %25

19:                                               ; preds = %14
  %20 = and i8 %18, -76
  %21 = or i8 %20, %16
  %22 = or i8 %21, 72
  %23 = load i8*, i8** %7, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %7, align 8
  store i8 %22, i8* %23, align 1
  br label %33

25:                                               ; preds = %14
  %26 = and i8 %18, -4
  %27 = or i8 %26, %16
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %33, label %29

29:                                               ; preds = %25
  %30 = or i8 %27, 64
  %31 = load i8*, i8** %7, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %32, i8** %7, align 8
  store i8 %30, i8* %31, align 1
  br label %33

33:                                               ; preds = %19, %25, %29
  %34 = load i8*, i8** %7, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %7, align 8
  store i8 %1, i8* %34, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %2, i64 %3, i32 %4)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 comdat align 2 {
  %5 = alloca %"class.v8::internal::Operand", align 8
  %6 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %6)
  %7 = bitcast %"class.v8::internal::Operand"* %5 to i64*
  store i64 %2, i64* %7, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 7
  %9 = bitcast i8* %8 to i32*
  store i32 %3, i32* %9, align 1
  %10 = lshr i32 %3, 16
  %11 = and i32 %10, 255
  %12 = lshr i64 %2, 8
  %13 = trunc i64 %12 to i8
  %14 = trunc i32 %1 to i8
  %15 = shl i8 %14, 3
  %16 = and i8 %15, 56
  %17 = or i8 %16, %13
  %18 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 1
  store i8* %20, i8** %18, align 8
  store i8 %17, i8* %19, align 1
  %21 = icmp eq i8 %13, 5
  %22 = lshr i64 %2, 16
  %23 = trunc i64 %22 to i8
  br i1 %21, label %39, label %24

24:                                               ; preds = %4
  %25 = trunc i32 %10 to i8
  %26 = icmp ugt i8 %25, 1
  br i1 %26, label %27, label %126

27:                                               ; preds = %24
  %28 = zext i32 %11 to i64
  %29 = load i8*, i8** %18, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %18, align 8
  store i8 %23, i8* %29, align 1
  %31 = icmp eq i32 %11, 2
  br i1 %31, label %126, label %32

32:                                               ; preds = %27
  %33 = add nsw i64 %28, -2
  %34 = add nsw i64 %28, -3
  %35 = and i64 %33, 3
  %36 = icmp ult i64 %34, 3
  br i1 %36, label %113, label %37

37:                                               ; preds = %32
  %38 = sub nsw i64 %33, %35
  br label %88

39:                                               ; preds = %4
  %40 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 1
  %41 = bitcast i8* %40 to %"class.v8::internal::Label"**
  %42 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %41, align 1
  %43 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %42, i64 0, i32 0
  %44 = load i32, i32* %43, align 4
  %45 = icmp slt i32 %44, 0
  br i1 %45, label %46, label %61

46:                                               ; preds = %39
  %47 = bitcast i8** %18 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %50 = bitcast i8** %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = sub i64 %48, %51
  %53 = trunc i64 %52 to i32
  %54 = ashr i32 %3, 24
  %55 = add nsw i32 %54, -5
  %56 = sub i32 %55, %44
  %57 = sub i32 %56, %53
  %58 = inttoptr i64 %48 to i32*
  store i32 %57, i32* %58, align 1
  %59 = load i8*, i8** %18, align 8
  %60 = getelementptr inbounds i8, i8* %59, i64 4
  store i8* %60, i8** %18, align 8
  br label %126

61:                                               ; preds = %39
  %62 = icmp eq i32 %44, 0
  br i1 %62, label %76, label %63

63:                                               ; preds = %61
  %64 = add nsw i32 %44, -1
  %65 = bitcast i8** %18 to i32**
  %66 = load i32*, i32** %65, align 8
  store i32 %64, i32* %66, align 1
  %67 = load i8*, i8** %18, align 8
  %68 = getelementptr inbounds i8, i8* %67, i64 4
  store i8* %68, i8** %18, align 8
  %69 = ptrtoint i8* %68 to i64
  %70 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %71 = bitcast i8** %70 to i64*
  %72 = load i64, i64* %71, align 8
  %73 = sub i64 %69, %72
  %74 = trunc i64 %73 to i32
  %75 = add i32 %74, -3
  store i32 %75, i32* %43, align 4
  br label %126

76:                                               ; preds = %61
  %77 = bitcast i8** %18 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %80 = bitcast i8** %79 to i64*
  %81 = load i64, i64* %80, align 8
  %82 = sub i64 %78, %81
  %83 = trunc i64 %82 to i32
  %84 = inttoptr i64 %78 to i32*
  store i32 %83, i32* %84, align 1
  %85 = load i8*, i8** %18, align 8
  %86 = getelementptr inbounds i8, i8* %85, i64 4
  store i8* %86, i8** %18, align 8
  %87 = add nsw i32 %83, 1
  store i32 %87, i32* %43, align 4
  br label %126

88:                                               ; preds = %88, %37
  %89 = phi i64 [ 2, %37 ], [ %110, %88 ]
  %90 = phi i64 [ %38, %37 ], [ %111, %88 ]
  %91 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %89
  %92 = load i8, i8* %91, align 1
  %93 = load i8*, i8** %18, align 8
  %94 = getelementptr inbounds i8, i8* %93, i64 1
  store i8* %94, i8** %18, align 8
  store i8 %92, i8* %93, align 1
  %95 = or i64 %89, 1
  %96 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %95
  %97 = load i8, i8* %96, align 1
  %98 = load i8*, i8** %18, align 8
  %99 = getelementptr inbounds i8, i8* %98, i64 1
  store i8* %99, i8** %18, align 8
  store i8 %97, i8* %98, align 1
  %100 = add nuw nsw i64 %89, 2
  %101 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %100
  %102 = load i8, i8* %101, align 1
  %103 = load i8*, i8** %18, align 8
  %104 = getelementptr inbounds i8, i8* %103, i64 1
  store i8* %104, i8** %18, align 8
  store i8 %102, i8* %103, align 1
  %105 = add nuw nsw i64 %89, 3
  %106 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %105
  %107 = load i8, i8* %106, align 1
  %108 = load i8*, i8** %18, align 8
  %109 = getelementptr inbounds i8, i8* %108, i64 1
  store i8* %109, i8** %18, align 8
  store i8 %107, i8* %108, align 1
  %110 = add nuw nsw i64 %89, 4
  %111 = add i64 %90, -4
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %113, label %88

113:                                              ; preds = %88, %32
  %114 = phi i64 [ 2, %32 ], [ %110, %88 ]
  %115 = icmp eq i64 %35, 0
  br i1 %115, label %126, label %116

116:                                              ; preds = %113, %116
  %117 = phi i64 [ %123, %116 ], [ %114, %113 ]
  %118 = phi i64 [ %124, %116 ], [ %35, %113 ]
  %119 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %117
  %120 = load i8, i8* %119, align 1
  %121 = load i8*, i8** %18, align 8
  %122 = getelementptr inbounds i8, i8* %121, i64 1
  store i8* %122, i8** %18, align 8
  store i8 %120, i8* %121, align 1
  %123 = add nuw nsw i64 %117, 1
  %124 = add i64 %118, -1
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %126, label %116, !llvm.loop !17

126:                                              ; preds = %113, %116, %27, %24, %46, %63, %76
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler13arithmetic_opEhNS0_8RegisterES2_i(%"class.v8::internal::Assembler"*, i8 zeroext, i32, i32, i32) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %13, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %13

13:                                               ; preds = %5, %12
  %14 = and i32 %3, 7
  %15 = icmp eq i32 %14, 4
  %16 = icmp eq i32 %4, 8
  br i1 %15, label %17, label %48

17:                                               ; preds = %13
  %18 = ashr i32 %3, 3
  %19 = shl nsw i32 %18, 2
  br i1 %16, label %20, label %27

20:                                               ; preds = %17
  %21 = lshr i32 %2, 3
  %22 = or i32 %19, %21
  %23 = trunc i32 %22 to i8
  %24 = or i8 %23, 72
  %25 = load i8*, i8** %6, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %6, align 8
  store i8 %24, i8* %25, align 1
  br label %37

27:                                               ; preds = %17
  %28 = ashr i32 %2, 3
  %29 = or i32 %19, %28
  %30 = and i32 %29, 255
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %37, label %32

32:                                               ; preds = %27
  %33 = trunc i32 %29 to i8
  %34 = or i8 %33, 64
  %35 = load i8*, i8** %6, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 1
  store i8* %36, i8** %6, align 8
  store i8 %34, i8* %35, align 1
  br label %37

37:                                               ; preds = %20, %27, %32
  %38 = xor i8 %1, 2
  %39 = load i8*, i8** %6, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  store i8* %40, i8** %6, align 8
  store i8 %38, i8* %39, align 1
  %41 = shl i32 %3, 3
  %42 = and i32 %2, 7
  %43 = or i32 %41, %42
  %44 = trunc i32 %43 to i8
  %45 = or i8 %44, -64
  %46 = load i8*, i8** %6, align 8
  %47 = getelementptr inbounds i8, i8* %46, i64 1
  store i8* %47, i8** %6, align 8
  store i8 %45, i8* %46, align 1
  br label %77

48:                                               ; preds = %13
  %49 = ashr i32 %2, 3
  %50 = shl nsw i32 %49, 2
  br i1 %16, label %51, label %58

51:                                               ; preds = %48
  %52 = lshr i32 %3, 3
  %53 = or i32 %50, %52
  %54 = trunc i32 %53 to i8
  %55 = or i8 %54, 72
  %56 = load i8*, i8** %6, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 1
  store i8* %57, i8** %6, align 8
  store i8 %55, i8* %56, align 1
  br label %68

58:                                               ; preds = %48
  %59 = ashr i32 %3, 3
  %60 = or i32 %50, %59
  %61 = and i32 %60, 255
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %68, label %63

63:                                               ; preds = %58
  %64 = trunc i32 %60 to i8
  %65 = or i8 %64, 64
  %66 = load i8*, i8** %6, align 8
  %67 = getelementptr inbounds i8, i8* %66, i64 1
  store i8* %67, i8** %6, align 8
  store i8 %65, i8* %66, align 1
  br label %68

68:                                               ; preds = %51, %58, %63
  %69 = load i8*, i8** %6, align 8
  %70 = getelementptr inbounds i8, i8* %69, i64 1
  store i8* %70, i8** %6, align 8
  store i8 %1, i8* %69, align 1
  %71 = shl i32 %2, 3
  %72 = or i32 %14, %71
  %73 = trunc i32 %72 to i8
  %74 = or i8 %73, -64
  %75 = load i8*, i8** %6, align 8
  %76 = getelementptr inbounds i8, i8* %75, i64 1
  store i8* %76, i8** %6, align 8
  store i8 %74, i8* %75, align 1
  br label %77

77:                                               ; preds = %68, %37
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler16arithmetic_op_16EhNS0_8RegisterES2_(%"class.v8::internal::Assembler"*, i8 zeroext, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = and i32 %3, 7
  %16 = icmp eq i32 %15, 4
  %17 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %17, i8** %5, align 8
  store i8 102, i8* %14, align 1
  br i1 %16, label %18, label %41

18:                                               ; preds = %13
  %19 = ashr i32 %3, 3
  %20 = shl nsw i32 %19, 2
  %21 = ashr i32 %2, 3
  %22 = or i32 %20, %21
  %23 = and i32 %22, 255
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = trunc i32 %22 to i8
  %27 = or i8 %26, 64
  %28 = load i8*, i8** %5, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %5, align 8
  store i8 %27, i8* %28, align 1
  br label %30

30:                                               ; preds = %18, %25
  %31 = xor i8 %1, 2
  %32 = load i8*, i8** %5, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %5, align 8
  store i8 %31, i8* %32, align 1
  %34 = shl i32 %3, 3
  %35 = and i32 %2, 7
  %36 = or i32 %34, %35
  %37 = trunc i32 %36 to i8
  %38 = or i8 %37, -64
  %39 = load i8*, i8** %5, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  store i8* %40, i8** %5, align 8
  store i8 %38, i8* %39, align 1
  br label %62

41:                                               ; preds = %13
  %42 = ashr i32 %2, 3
  %43 = shl nsw i32 %42, 2
  %44 = ashr i32 %3, 3
  %45 = or i32 %43, %44
  %46 = and i32 %45, 255
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %41
  %49 = trunc i32 %45 to i8
  %50 = or i8 %49, 64
  %51 = load i8*, i8** %5, align 8
  %52 = getelementptr inbounds i8, i8* %51, i64 1
  store i8* %52, i8** %5, align 8
  store i8 %50, i8* %51, align 1
  br label %53

53:                                               ; preds = %41, %48
  %54 = load i8*, i8** %5, align 8
  %55 = getelementptr inbounds i8, i8* %54, i64 1
  store i8* %55, i8** %5, align 8
  store i8 %1, i8* %54, align 1
  %56 = shl i32 %2, 3
  %57 = or i32 %15, %56
  %58 = trunc i32 %57 to i8
  %59 = or i8 %58, -64
  %60 = load i8*, i8** %5, align 8
  %61 = getelementptr inbounds i8, i8* %60, i64 1
  store i8* %61, i8** %5, align 8
  store i8 %59, i8* %60, align 1
  br label %62

62:                                               ; preds = %53, %30
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler16arithmetic_op_16EhNS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i8 zeroext, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %14, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %13 = load i8*, i8** %6, align 8
  br label %14

14:                                               ; preds = %5, %12
  %15 = phi i8* [ %7, %5 ], [ %13, %12 ]
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %16, i8** %6, align 8
  store i8 102, i8* %15, align 1
  %17 = trunc i64 %3 to i8
  %18 = lshr i32 %2, 1
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, -4
  %21 = or i8 %20, %17
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %27, label %23

23:                                               ; preds = %14
  %24 = or i8 %21, 64
  %25 = load i8*, i8** %6, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %6, align 8
  store i8 %24, i8* %25, align 1
  br label %27

27:                                               ; preds = %14, %23
  %28 = load i8*, i8** %6, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %6, align 8
  store i8 %1, i8* %28, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %2, i64 %3, i32 %4)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler15arithmetic_op_8EhNS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i8 zeroext, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %13, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %13

13:                                               ; preds = %5, %12
  %14 = icmp slt i32 %2, 4
  %15 = trunc i64 %3 to i8
  %16 = lshr i32 %2, 1
  %17 = trunc i32 %16 to i8
  br i1 %14, label %24, label %18

18:                                               ; preds = %13
  %19 = and i8 %17, -68
  %20 = or i8 %19, %15
  %21 = or i8 %20, 64
  %22 = load i8*, i8** %6, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %6, align 8
  store i8 %21, i8* %22, align 1
  br label %32

24:                                               ; preds = %13
  %25 = and i8 %17, -4
  %26 = or i8 %25, %15
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %24
  %29 = or i8 %26, 64
  %30 = load i8*, i8** %6, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %6, align 8
  store i8 %29, i8* %30, align 1
  br label %32

32:                                               ; preds = %28, %24, %18
  %33 = load i8*, i8** %6, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %6, align 8
  store i8 %1, i8* %33, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %2, i64 %3, i32 %4)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler15arithmetic_op_8EhNS0_8RegisterES2_(%"class.v8::internal::Assembler"*, i8 zeroext, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %4, %11
  %13 = and i32 %3, 7
  %14 = icmp eq i32 %13, 4
  br i1 %14, label %15, label %39

15:                                               ; preds = %12
  %16 = icmp slt i32 %3, 4
  %17 = icmp slt i32 %2, 4
  %18 = and i1 %17, %16
  br i1 %18, label %28, label %19

19:                                               ; preds = %15
  %20 = ashr i32 %3, 3
  %21 = shl nsw i32 %20, 2
  %22 = lshr i32 %2, 3
  %23 = or i32 %21, %22
  %24 = trunc i32 %23 to i8
  %25 = or i8 %24, 64
  %26 = load i8*, i8** %5, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %5, align 8
  store i8 %25, i8* %26, align 1
  br label %28

28:                                               ; preds = %15, %19
  %29 = xor i8 %1, 2
  %30 = load i8*, i8** %5, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %5, align 8
  store i8 %29, i8* %30, align 1
  %32 = shl i32 %3, 3
  %33 = and i32 %2, 7
  %34 = or i32 %32, %33
  %35 = trunc i32 %34 to i8
  %36 = or i8 %35, -64
  %37 = load i8*, i8** %5, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  store i8* %38, i8** %5, align 8
  store i8 %36, i8* %37, align 1
  br label %61

39:                                               ; preds = %12
  %40 = icmp slt i32 %2, 4
  %41 = icmp slt i32 %3, 4
  %42 = and i1 %40, %41
  br i1 %42, label %52, label %43

43:                                               ; preds = %39
  %44 = ashr i32 %2, 3
  %45 = shl nsw i32 %44, 2
  %46 = lshr i32 %3, 3
  %47 = or i32 %45, %46
  %48 = trunc i32 %47 to i8
  %49 = or i8 %48, 64
  %50 = load i8*, i8** %5, align 8
  %51 = getelementptr inbounds i8, i8* %50, i64 1
  store i8* %51, i8** %5, align 8
  store i8 %49, i8* %50, align 1
  br label %52

52:                                               ; preds = %39, %43
  %53 = load i8*, i8** %5, align 8
  %54 = getelementptr inbounds i8, i8* %53, i64 1
  store i8* %54, i8** %5, align 8
  store i8 %1, i8* %53, align 1
  %55 = shl i32 %2, 3
  %56 = or i32 %13, %55
  %57 = trunc i32 %56 to i8
  %58 = or i8 %57, -64
  %59 = load i8*, i8** %5, align 8
  %60 = getelementptr inbounds i8, i8* %59, i64 1
  store i8* %60, i8** %5, align 8
  store i8 %58, i8* %59, align 1
  br label %61

61:                                               ; preds = %52, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler23immediate_arithmetic_opEhNS0_8RegisterENS0_9ImmediateEi(%"class.v8::internal::Assembler"*, i8 zeroext, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %6 = alloca %"class.v8::internal::RelocInfo", align 8
  %7 = alloca %"class.v8::internal::RelocInfo", align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 -32
  %13 = icmp ult i8* %9, %12
  br i1 %13, label %15, label %14, !prof !11

14:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %15

15:                                               ; preds = %5, %14
  %16 = icmp eq i32 %4, 8
  br i1 %16, label %17, label %23

17:                                               ; preds = %15
  %18 = lshr i32 %2, 3
  %19 = trunc i32 %18 to i8
  %20 = or i8 %19, 72
  %21 = load i8*, i8** %8, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %8, align 8
  store i8 %20, i8* %21, align 1
  br label %28

23:                                               ; preds = %15
  %24 = icmp ult i32 %2, 8
  br i1 %24, label %28, label %25

25:                                               ; preds = %23
  %26 = load i8*, i8** %8, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %8, align 8
  store i8 65, i8* %26, align 1
  br label %28

28:                                               ; preds = %17, %23, %25
  %29 = shl i64 %3, 32
  %30 = ashr exact i64 %29, 32
  %31 = add nsw i64 %30, 128
  %32 = icmp ult i64 %31, 256
  %33 = and i64 %3, 1095216660480
  %34 = icmp eq i64 %33, 0
  %35 = and i1 %34, %32
  br i1 %35, label %36, label %50

36:                                               ; preds = %28
  %37 = load i8*, i8** %8, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  store i8* %38, i8** %8, align 8
  store i8 -125, i8* %37, align 1
  %39 = zext i8 %1 to i32
  %40 = shl nuw nsw i32 %39, 3
  %41 = and i32 %2, 7
  %42 = or i32 %41, %40
  %43 = trunc i32 %42 to i8
  %44 = or i8 %43, -64
  %45 = load i8*, i8** %8, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 1
  store i8* %46, i8** %8, align 8
  store i8 %44, i8* %45, align 1
  %47 = trunc i64 %3 to i8
  %48 = load i8*, i8** %8, align 8
  %49 = getelementptr inbounds i8, i8* %48, i64 1
  store i8* %49, i8** %8, align 8
  store i8 %47, i8* %48, align 1
  br label %122

50:                                               ; preds = %28
  %51 = icmp eq i32 %2, 0
  br i1 %51, label %52, label %84

52:                                               ; preds = %50
  %53 = shl i8 %1, 3
  %54 = or i8 %53, 5
  %55 = load i8*, i8** %8, align 8
  %56 = getelementptr inbounds i8, i8* %55, i64 1
  store i8* %56, i8** %8, align 8
  store i8 %54, i8* %55, align 1
  %57 = trunc i64 %3 to i32
  %58 = lshr i64 %3, 32
  %59 = trunc i64 %58 to i8
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %79, label %61

61:                                               ; preds = %52
  %62 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 1
  %63 = load i8, i8* %62, align 1, !range !2
  %64 = icmp eq i8 %63, 0
  br i1 %64, label %65, label %79

65:                                               ; preds = %61
  switch i8 %59, label %70 [
    i8 12, label %66
    i8 9, label %66
  ]

66:                                               ; preds = %65, %65
  %67 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 0
  %68 = load i8, i8* %67, align 8, !range !2
  %69 = icmp eq i8 %68, 0
  br i1 %69, label %79, label %70

70:                                               ; preds = %66, %65
  %71 = bitcast %"class.v8::internal::RelocInfo"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %71) #14
  %72 = bitcast i8** %8 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %6, i64 0, i32 0
  store i64 %73, i64* %74, align 8
  %75 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %6, i64 0, i32 1
  store i8 %59, i8* %75, align 8
  %76 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %6, i64 0, i32 2
  %77 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1
  %78 = bitcast i64* %76 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %78, i8 0, i64 24, i1 false) #14
  call void @_ZN2v88internal15RelocInfoWriter5WriteEPKNS0_9RelocInfoE(%"class.v8::internal::RelocInfoWriter"* %77, %"class.v8::internal::RelocInfo"* nonnull %6) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %71) #14
  br label %79

79:                                               ; preds = %52, %61, %66, %70
  %80 = bitcast i8** %8 to i32**
  %81 = load i32*, i32** %80, align 8
  store i32 %57, i32* %81, align 1
  %82 = load i8*, i8** %8, align 8
  %83 = getelementptr inbounds i8, i8* %82, i64 4
  store i8* %83, i8** %8, align 8
  br label %122

84:                                               ; preds = %50
  %85 = load i8*, i8** %8, align 8
  %86 = getelementptr inbounds i8, i8* %85, i64 1
  store i8* %86, i8** %8, align 8
  store i8 -127, i8* %85, align 1
  %87 = zext i8 %1 to i32
  %88 = shl nuw nsw i32 %87, 3
  %89 = and i32 %2, 7
  %90 = or i32 %89, %88
  %91 = trunc i32 %90 to i8
  %92 = or i8 %91, -64
  %93 = load i8*, i8** %8, align 8
  %94 = getelementptr inbounds i8, i8* %93, i64 1
  store i8* %94, i8** %8, align 8
  store i8 %92, i8* %93, align 1
  %95 = trunc i64 %3 to i32
  %96 = lshr i64 %3, 32
  %97 = trunc i64 %96 to i8
  %98 = icmp eq i8 %97, 0
  br i1 %98, label %117, label %99

99:                                               ; preds = %84
  %100 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 1
  %101 = load i8, i8* %100, align 1, !range !2
  %102 = icmp eq i8 %101, 0
  br i1 %102, label %103, label %117

103:                                              ; preds = %99
  switch i8 %97, label %108 [
    i8 12, label %104
    i8 9, label %104
  ]

104:                                              ; preds = %103, %103
  %105 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 0
  %106 = load i8, i8* %105, align 8, !range !2
  %107 = icmp eq i8 %106, 0
  br i1 %107, label %117, label %108

108:                                              ; preds = %104, %103
  %109 = bitcast %"class.v8::internal::RelocInfo"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %109) #14
  %110 = bitcast i8** %8 to i64*
  %111 = load i64, i64* %110, align 8
  %112 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %7, i64 0, i32 0
  store i64 %111, i64* %112, align 8
  %113 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %7, i64 0, i32 1
  store i8 %97, i8* %113, align 8
  %114 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %7, i64 0, i32 2
  %115 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1
  %116 = bitcast i64* %114 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %116, i8 0, i64 24, i1 false) #14
  call void @_ZN2v88internal15RelocInfoWriter5WriteEPKNS0_9RelocInfoE(%"class.v8::internal::RelocInfoWriter"* %115, %"class.v8::internal::RelocInfo"* nonnull %7) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %109) #14
  br label %117

117:                                              ; preds = %84, %99, %104, %108
  %118 = bitcast i8** %8 to i32**
  %119 = load i32*, i32** %118, align 8
  store i32 %95, i32* %119, align 1
  %120 = load i8*, i8** %8, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 4
  store i8* %121, i8** %8, align 8
  br label %122

122:                                              ; preds = %79, %117, %36
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler23immediate_arithmetic_opEhNS0_7OperandENS0_9ImmediateEi(%"class.v8::internal::Assembler"*, i8 zeroext, i64, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %7 = alloca %"class.v8::internal::Operand", align 8
  %8 = alloca %"class.v8::internal::Operand", align 8
  %9 = alloca %"class.v8::internal::RelocInfo", align 8
  %10 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 -32
  %15 = icmp ult i8* %11, %14
  br i1 %15, label %17, label %16, !prof !11

16:                                               ; preds = %6
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %17

17:                                               ; preds = %6, %16
  %18 = icmp eq i32 %5, 8
  %19 = trunc i64 %2 to i8
  br i1 %18, label %20, label %24

20:                                               ; preds = %17
  %21 = or i8 %19, 72
  %22 = load i8*, i8** %10, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %10, align 8
  store i8 %21, i8* %22, align 1
  br label %30

24:                                               ; preds = %17
  %25 = icmp eq i8 %19, 0
  br i1 %25, label %30, label %26

26:                                               ; preds = %24
  %27 = or i8 %19, 64
  %28 = load i8*, i8** %10, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %10, align 8
  store i8 %27, i8* %28, align 1
  br label %30

30:                                               ; preds = %20, %24, %26
  %31 = shl i64 %4, 32
  %32 = ashr exact i64 %31, 32
  %33 = add nsw i64 %32, 128
  %34 = icmp ult i64 %33, 256
  %35 = and i64 %4, 1095216660480
  %36 = icmp eq i64 %35, 0
  %37 = and i1 %36, %34
  %38 = load i8*, i8** %10, align 8
  %39 = getelementptr inbounds i8, i8* %38, i64 1
  store i8* %39, i8** %10, align 8
  br i1 %37, label %40, label %162

40:                                               ; preds = %30
  store i8 -125, i8* %38, align 1
  %41 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %7, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %41)
  %42 = bitcast %"class.v8::internal::Operand"* %7 to i64*
  store i64 %2, i64* %42, align 8
  %43 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %7, i64 0, i32 0, i32 1, i64 7
  %44 = bitcast i8* %43 to i32*
  store i32 %3, i32* %44, align 1
  %45 = lshr i32 %3, 16
  %46 = and i32 %45, 255
  %47 = lshr i64 %2, 8
  %48 = trunc i64 %47 to i8
  %49 = shl i8 %1, 3
  %50 = or i8 %49, %48
  %51 = load i8*, i8** %10, align 8
  %52 = getelementptr inbounds i8, i8* %51, i64 1
  store i8* %52, i8** %10, align 8
  store i8 %50, i8* %51, align 1
  %53 = icmp eq i8 %48, 5
  %54 = lshr i64 %2, 16
  %55 = trunc i64 %54 to i8
  br i1 %53, label %71, label %56

56:                                               ; preds = %40
  %57 = trunc i32 %45 to i8
  %58 = icmp ugt i8 %57, 1
  br i1 %58, label %59, label %158

59:                                               ; preds = %56
  %60 = zext i32 %46 to i64
  %61 = load i8*, i8** %10, align 8
  %62 = getelementptr inbounds i8, i8* %61, i64 1
  store i8* %62, i8** %10, align 8
  store i8 %55, i8* %61, align 1
  %63 = icmp eq i32 %46, 2
  br i1 %63, label %158, label %64

64:                                               ; preds = %59
  %65 = add nsw i64 %60, -2
  %66 = add nsw i64 %60, -3
  %67 = and i64 %65, 3
  %68 = icmp ult i64 %66, 3
  br i1 %68, label %145, label %69

69:                                               ; preds = %64
  %70 = sub nsw i64 %65, %67
  br label %120

71:                                               ; preds = %40
  %72 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %7, i64 0, i32 0, i32 1, i64 1
  %73 = bitcast i8* %72 to %"class.v8::internal::Label"**
  %74 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %73, align 1
  %75 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %74, i64 0, i32 0
  %76 = load i32, i32* %75, align 4
  %77 = icmp slt i32 %76, 0
  br i1 %77, label %78, label %93

78:                                               ; preds = %71
  %79 = bitcast i8** %10 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %82 = bitcast i8** %81 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = sub i64 %80, %83
  %85 = trunc i64 %84 to i32
  %86 = ashr i32 %3, 24
  %87 = add nsw i32 %86, -5
  %88 = sub i32 %87, %76
  %89 = sub i32 %88, %85
  %90 = inttoptr i64 %80 to i32*
  store i32 %89, i32* %90, align 1
  %91 = load i8*, i8** %10, align 8
  %92 = getelementptr inbounds i8, i8* %91, i64 4
  store i8* %92, i8** %10, align 8
  br label %158

93:                                               ; preds = %71
  %94 = icmp eq i32 %76, 0
  br i1 %94, label %108, label %95

95:                                               ; preds = %93
  %96 = add nsw i32 %76, -1
  %97 = bitcast i8** %10 to i32**
  %98 = load i32*, i32** %97, align 8
  store i32 %96, i32* %98, align 1
  %99 = load i8*, i8** %10, align 8
  %100 = getelementptr inbounds i8, i8* %99, i64 4
  store i8* %100, i8** %10, align 8
  %101 = ptrtoint i8* %100 to i64
  %102 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %103 = bitcast i8** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = sub i64 %101, %104
  %106 = trunc i64 %105 to i32
  %107 = add i32 %106, -3
  store i32 %107, i32* %75, align 4
  br label %158

108:                                              ; preds = %93
  %109 = bitcast i8** %10 to i64*
  %110 = load i64, i64* %109, align 8
  %111 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %112 = bitcast i8** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = sub i64 %110, %113
  %115 = trunc i64 %114 to i32
  %116 = inttoptr i64 %110 to i32*
  store i32 %115, i32* %116, align 1
  %117 = load i8*, i8** %10, align 8
  %118 = getelementptr inbounds i8, i8* %117, i64 4
  store i8* %118, i8** %10, align 8
  %119 = add nsw i32 %115, 1
  store i32 %119, i32* %75, align 4
  br label %158

120:                                              ; preds = %120, %69
  %121 = phi i64 [ 2, %69 ], [ %142, %120 ]
  %122 = phi i64 [ %70, %69 ], [ %143, %120 ]
  %123 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %7, i64 0, i32 0, i32 1, i64 %121
  %124 = load i8, i8* %123, align 1
  %125 = load i8*, i8** %10, align 8
  %126 = getelementptr inbounds i8, i8* %125, i64 1
  store i8* %126, i8** %10, align 8
  store i8 %124, i8* %125, align 1
  %127 = or i64 %121, 1
  %128 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %7, i64 0, i32 0, i32 1, i64 %127
  %129 = load i8, i8* %128, align 1
  %130 = load i8*, i8** %10, align 8
  %131 = getelementptr inbounds i8, i8* %130, i64 1
  store i8* %131, i8** %10, align 8
  store i8 %129, i8* %130, align 1
  %132 = add nuw nsw i64 %121, 2
  %133 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %7, i64 0, i32 0, i32 1, i64 %132
  %134 = load i8, i8* %133, align 1
  %135 = load i8*, i8** %10, align 8
  %136 = getelementptr inbounds i8, i8* %135, i64 1
  store i8* %136, i8** %10, align 8
  store i8 %134, i8* %135, align 1
  %137 = add nuw nsw i64 %121, 3
  %138 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %7, i64 0, i32 0, i32 1, i64 %137
  %139 = load i8, i8* %138, align 1
  %140 = load i8*, i8** %10, align 8
  %141 = getelementptr inbounds i8, i8* %140, i64 1
  store i8* %141, i8** %10, align 8
  store i8 %139, i8* %140, align 1
  %142 = add nuw nsw i64 %121, 4
  %143 = add i64 %122, -4
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %145, label %120

145:                                              ; preds = %120, %64
  %146 = phi i64 [ 2, %64 ], [ %142, %120 ]
  %147 = icmp eq i64 %67, 0
  br i1 %147, label %158, label %148

148:                                              ; preds = %145, %148
  %149 = phi i64 [ %155, %148 ], [ %146, %145 ]
  %150 = phi i64 [ %156, %148 ], [ %67, %145 ]
  %151 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %7, i64 0, i32 0, i32 1, i64 %149
  %152 = load i8, i8* %151, align 1
  %153 = load i8*, i8** %10, align 8
  %154 = getelementptr inbounds i8, i8* %153, i64 1
  store i8* %154, i8** %10, align 8
  store i8 %152, i8* %153, align 1
  %155 = add nuw nsw i64 %149, 1
  %156 = add i64 %150, -1
  %157 = icmp eq i64 %156, 0
  br i1 %157, label %158, label %148, !llvm.loop !18

158:                                              ; preds = %145, %148, %59, %56, %78, %95, %108
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %41)
  %159 = trunc i64 %4 to i8
  %160 = load i8*, i8** %10, align 8
  %161 = getelementptr inbounds i8, i8* %160, i64 1
  store i8* %161, i8** %10, align 8
  store i8 %159, i8* %160, align 1
  br label %308

162:                                              ; preds = %30
  store i8 -127, i8* %38, align 1
  %163 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %8, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %163)
  %164 = bitcast %"class.v8::internal::Operand"* %8 to i64*
  store i64 %2, i64* %164, align 8
  %165 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %8, i64 0, i32 0, i32 1, i64 7
  %166 = bitcast i8* %165 to i32*
  store i32 %3, i32* %166, align 1
  %167 = lshr i32 %3, 16
  %168 = and i32 %167, 255
  %169 = lshr i64 %2, 8
  %170 = trunc i64 %169 to i8
  %171 = shl i8 %1, 3
  %172 = or i8 %171, %170
  %173 = load i8*, i8** %10, align 8
  %174 = getelementptr inbounds i8, i8* %173, i64 1
  store i8* %174, i8** %10, align 8
  store i8 %172, i8* %173, align 1
  %175 = icmp eq i8 %170, 5
  %176 = lshr i64 %2, 16
  %177 = trunc i64 %176 to i8
  br i1 %175, label %193, label %178

178:                                              ; preds = %162
  %179 = trunc i32 %167 to i8
  %180 = icmp ugt i8 %179, 1
  br i1 %180, label %181, label %280

181:                                              ; preds = %178
  %182 = zext i32 %168 to i64
  %183 = load i8*, i8** %10, align 8
  %184 = getelementptr inbounds i8, i8* %183, i64 1
  store i8* %184, i8** %10, align 8
  store i8 %177, i8* %183, align 1
  %185 = icmp eq i32 %168, 2
  br i1 %185, label %280, label %186

186:                                              ; preds = %181
  %187 = add nsw i64 %182, -2
  %188 = add nsw i64 %182, -3
  %189 = and i64 %187, 3
  %190 = icmp ult i64 %188, 3
  br i1 %190, label %267, label %191

191:                                              ; preds = %186
  %192 = sub nsw i64 %187, %189
  br label %242

193:                                              ; preds = %162
  %194 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %8, i64 0, i32 0, i32 1, i64 1
  %195 = bitcast i8* %194 to %"class.v8::internal::Label"**
  %196 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %195, align 1
  %197 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %196, i64 0, i32 0
  %198 = load i32, i32* %197, align 4
  %199 = icmp slt i32 %198, 0
  br i1 %199, label %200, label %215

200:                                              ; preds = %193
  %201 = bitcast i8** %10 to i64*
  %202 = load i64, i64* %201, align 8
  %203 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %204 = bitcast i8** %203 to i64*
  %205 = load i64, i64* %204, align 8
  %206 = sub i64 %202, %205
  %207 = trunc i64 %206 to i32
  %208 = ashr i32 %3, 24
  %209 = add nsw i32 %208, -5
  %210 = sub i32 %209, %198
  %211 = sub i32 %210, %207
  %212 = inttoptr i64 %202 to i32*
  store i32 %211, i32* %212, align 1
  %213 = load i8*, i8** %10, align 8
  %214 = getelementptr inbounds i8, i8* %213, i64 4
  store i8* %214, i8** %10, align 8
  br label %280

215:                                              ; preds = %193
  %216 = icmp eq i32 %198, 0
  br i1 %216, label %230, label %217

217:                                              ; preds = %215
  %218 = add nsw i32 %198, -1
  %219 = bitcast i8** %10 to i32**
  %220 = load i32*, i32** %219, align 8
  store i32 %218, i32* %220, align 1
  %221 = load i8*, i8** %10, align 8
  %222 = getelementptr inbounds i8, i8* %221, i64 4
  store i8* %222, i8** %10, align 8
  %223 = ptrtoint i8* %222 to i64
  %224 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %225 = bitcast i8** %224 to i64*
  %226 = load i64, i64* %225, align 8
  %227 = sub i64 %223, %226
  %228 = trunc i64 %227 to i32
  %229 = add i32 %228, -3
  store i32 %229, i32* %197, align 4
  br label %280

230:                                              ; preds = %215
  %231 = bitcast i8** %10 to i64*
  %232 = load i64, i64* %231, align 8
  %233 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %234 = bitcast i8** %233 to i64*
  %235 = load i64, i64* %234, align 8
  %236 = sub i64 %232, %235
  %237 = trunc i64 %236 to i32
  %238 = inttoptr i64 %232 to i32*
  store i32 %237, i32* %238, align 1
  %239 = load i8*, i8** %10, align 8
  %240 = getelementptr inbounds i8, i8* %239, i64 4
  store i8* %240, i8** %10, align 8
  %241 = add nsw i32 %237, 1
  store i32 %241, i32* %197, align 4
  br label %280

242:                                              ; preds = %242, %191
  %243 = phi i64 [ 2, %191 ], [ %264, %242 ]
  %244 = phi i64 [ %192, %191 ], [ %265, %242 ]
  %245 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %8, i64 0, i32 0, i32 1, i64 %243
  %246 = load i8, i8* %245, align 1
  %247 = load i8*, i8** %10, align 8
  %248 = getelementptr inbounds i8, i8* %247, i64 1
  store i8* %248, i8** %10, align 8
  store i8 %246, i8* %247, align 1
  %249 = or i64 %243, 1
  %250 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %8, i64 0, i32 0, i32 1, i64 %249
  %251 = load i8, i8* %250, align 1
  %252 = load i8*, i8** %10, align 8
  %253 = getelementptr inbounds i8, i8* %252, i64 1
  store i8* %253, i8** %10, align 8
  store i8 %251, i8* %252, align 1
  %254 = add nuw nsw i64 %243, 2
  %255 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %8, i64 0, i32 0, i32 1, i64 %254
  %256 = load i8, i8* %255, align 1
  %257 = load i8*, i8** %10, align 8
  %258 = getelementptr inbounds i8, i8* %257, i64 1
  store i8* %258, i8** %10, align 8
  store i8 %256, i8* %257, align 1
  %259 = add nuw nsw i64 %243, 3
  %260 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %8, i64 0, i32 0, i32 1, i64 %259
  %261 = load i8, i8* %260, align 1
  %262 = load i8*, i8** %10, align 8
  %263 = getelementptr inbounds i8, i8* %262, i64 1
  store i8* %263, i8** %10, align 8
  store i8 %261, i8* %262, align 1
  %264 = add nuw nsw i64 %243, 4
  %265 = add i64 %244, -4
  %266 = icmp eq i64 %265, 0
  br i1 %266, label %267, label %242

267:                                              ; preds = %242, %186
  %268 = phi i64 [ 2, %186 ], [ %264, %242 ]
  %269 = icmp eq i64 %189, 0
  br i1 %269, label %280, label %270

270:                                              ; preds = %267, %270
  %271 = phi i64 [ %277, %270 ], [ %268, %267 ]
  %272 = phi i64 [ %278, %270 ], [ %189, %267 ]
  %273 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %8, i64 0, i32 0, i32 1, i64 %271
  %274 = load i8, i8* %273, align 1
  %275 = load i8*, i8** %10, align 8
  %276 = getelementptr inbounds i8, i8* %275, i64 1
  store i8* %276, i8** %10, align 8
  store i8 %274, i8* %275, align 1
  %277 = add nuw nsw i64 %271, 1
  %278 = add i64 %272, -1
  %279 = icmp eq i64 %278, 0
  br i1 %279, label %280, label %270, !llvm.loop !19

280:                                              ; preds = %267, %270, %181, %178, %200, %217, %230
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %163)
  %281 = trunc i64 %4 to i32
  %282 = lshr i64 %4, 32
  %283 = trunc i64 %282 to i8
  %284 = icmp eq i8 %283, 0
  br i1 %284, label %303, label %285

285:                                              ; preds = %280
  %286 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 1
  %287 = load i8, i8* %286, align 1, !range !2
  %288 = icmp eq i8 %287, 0
  br i1 %288, label %289, label %303

289:                                              ; preds = %285
  switch i8 %283, label %294 [
    i8 12, label %290
    i8 9, label %290
  ]

290:                                              ; preds = %289, %289
  %291 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 0
  %292 = load i8, i8* %291, align 8, !range !2
  %293 = icmp eq i8 %292, 0
  br i1 %293, label %303, label %294

294:                                              ; preds = %290, %289
  %295 = bitcast %"class.v8::internal::RelocInfo"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %295) #14
  %296 = bitcast i8** %10 to i64*
  %297 = load i64, i64* %296, align 8
  %298 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %9, i64 0, i32 0
  store i64 %297, i64* %298, align 8
  %299 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %9, i64 0, i32 1
  store i8 %283, i8* %299, align 8
  %300 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %9, i64 0, i32 2
  %301 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1
  %302 = bitcast i64* %300 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %302, i8 0, i64 24, i1 false) #14
  call void @_ZN2v88internal15RelocInfoWriter5WriteEPKNS0_9RelocInfoE(%"class.v8::internal::RelocInfoWriter"* %301, %"class.v8::internal::RelocInfo"* nonnull %9) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %295) #14
  br label %303

303:                                              ; preds = %280, %285, %290, %294
  %304 = bitcast i8** %10 to i32**
  %305 = load i32*, i32** %304, align 8
  store i32 %281, i32* %305, align 1
  %306 = load i8*, i8** %10, align 8
  %307 = getelementptr inbounds i8, i8* %306, i64 4
  store i8* %307, i8** %10, align 8
  br label %308

308:                                              ; preds = %303, %158
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler26immediate_arithmetic_op_16EhNS0_8RegisterENS0_9ImmediateE(%"class.v8::internal::Assembler"*, i8 zeroext, i32, i64) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 102, i8* %14, align 1
  %16 = icmp ult i32 %2, 8
  br i1 %16, label %20, label %17

17:                                               ; preds = %13
  %18 = load i8*, i8** %5, align 8
  %19 = getelementptr inbounds i8, i8* %18, i64 1
  store i8* %19, i8** %5, align 8
  store i8 65, i8* %18, align 1
  br label %20

20:                                               ; preds = %13, %17
  %21 = shl i64 %3, 32
  %22 = ashr exact i64 %21, 32
  %23 = add nsw i64 %22, 128
  %24 = icmp ult i64 %23, 256
  br i1 %24, label %25, label %39

25:                                               ; preds = %20
  %26 = load i8*, i8** %5, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %5, align 8
  store i8 -125, i8* %26, align 1
  %28 = zext i8 %1 to i32
  %29 = shl nuw nsw i32 %28, 3
  %30 = and i32 %2, 7
  %31 = or i32 %30, %29
  %32 = trunc i32 %31 to i8
  %33 = or i8 %32, -64
  %34 = load i8*, i8** %5, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %5, align 8
  store i8 %33, i8* %34, align 1
  %36 = trunc i64 %3 to i8
  %37 = load i8*, i8** %5, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  store i8* %38, i8** %5, align 8
  store i8 %36, i8* %37, align 1
  br label %67

39:                                               ; preds = %20
  %40 = icmp eq i32 %2, 0
  br i1 %40, label %41, label %51

41:                                               ; preds = %39
  %42 = shl i8 %1, 3
  %43 = or i8 %42, 5
  %44 = load i8*, i8** %5, align 8
  %45 = getelementptr inbounds i8, i8* %44, i64 1
  store i8* %45, i8** %5, align 8
  store i8 %43, i8* %44, align 1
  %46 = trunc i64 %3 to i16
  %47 = bitcast i8** %5 to i16**
  %48 = load i16*, i16** %47, align 8
  store i16 %46, i16* %48, align 1
  %49 = load i8*, i8** %5, align 8
  %50 = getelementptr inbounds i8, i8* %49, i64 2
  store i8* %50, i8** %5, align 8
  br label %67

51:                                               ; preds = %39
  %52 = load i8*, i8** %5, align 8
  %53 = getelementptr inbounds i8, i8* %52, i64 1
  store i8* %53, i8** %5, align 8
  store i8 -127, i8* %52, align 1
  %54 = zext i8 %1 to i32
  %55 = shl nuw nsw i32 %54, 3
  %56 = and i32 %2, 7
  %57 = or i32 %56, %55
  %58 = trunc i32 %57 to i8
  %59 = or i8 %58, -64
  %60 = load i8*, i8** %5, align 8
  %61 = getelementptr inbounds i8, i8* %60, i64 1
  store i8* %61, i8** %5, align 8
  store i8 %59, i8* %60, align 1
  %62 = trunc i64 %3 to i16
  %63 = bitcast i8** %5 to i16**
  %64 = load i16*, i16** %63, align 8
  store i16 %62, i16* %64, align 1
  %65 = load i8*, i8** %5, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 2
  store i8* %66, i8** %5, align 8
  br label %67

67:                                               ; preds = %41, %51, %25
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler26immediate_arithmetic_op_16EhNS0_7OperandENS0_9ImmediateE(%"class.v8::internal::Assembler"*, i8 zeroext, i64, i32, i64) local_unnamed_addr #1 align 2 {
  %6 = alloca %"class.v8::internal::Operand", align 8
  %7 = alloca %"class.v8::internal::Operand", align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 -32
  %13 = icmp ult i8* %9, %12
  br i1 %13, label %16, label %14, !prof !11

14:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %15 = load i8*, i8** %8, align 8
  br label %16

16:                                               ; preds = %5, %14
  %17 = phi i8* [ %9, %5 ], [ %15, %14 ]
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %8, align 8
  store i8 102, i8* %17, align 1
  %19 = trunc i64 %2 to i8
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %25, label %21

21:                                               ; preds = %16
  %22 = or i8 %19, 64
  %23 = load i8*, i8** %8, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %8, align 8
  store i8 %22, i8* %23, align 1
  br label %25

25:                                               ; preds = %16, %21
  %26 = shl i64 %4, 32
  %27 = ashr exact i64 %26, 32
  %28 = add nsw i64 %27, 128
  %29 = icmp ult i64 %28, 256
  %30 = load i8*, i8** %8, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %8, align 8
  br i1 %29, label %32, label %154

32:                                               ; preds = %25
  store i8 -125, i8* %30, align 1
  %33 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %33)
  %34 = bitcast %"class.v8::internal::Operand"* %6 to i64*
  store i64 %2, i64* %34, align 8
  %35 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 7
  %36 = bitcast i8* %35 to i32*
  store i32 %3, i32* %36, align 1
  %37 = lshr i32 %3, 16
  %38 = and i32 %37, 255
  %39 = lshr i64 %2, 8
  %40 = trunc i64 %39 to i8
  %41 = shl i8 %1, 3
  %42 = or i8 %41, %40
  %43 = load i8*, i8** %8, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 1
  store i8* %44, i8** %8, align 8
  store i8 %42, i8* %43, align 1
  %45 = icmp eq i8 %40, 5
  %46 = lshr i64 %2, 16
  %47 = trunc i64 %46 to i8
  br i1 %45, label %63, label %48

48:                                               ; preds = %32
  %49 = trunc i32 %37 to i8
  %50 = icmp ugt i8 %49, 1
  br i1 %50, label %51, label %150

51:                                               ; preds = %48
  %52 = zext i32 %38 to i64
  %53 = load i8*, i8** %8, align 8
  %54 = getelementptr inbounds i8, i8* %53, i64 1
  store i8* %54, i8** %8, align 8
  store i8 %47, i8* %53, align 1
  %55 = icmp eq i32 %38, 2
  br i1 %55, label %150, label %56

56:                                               ; preds = %51
  %57 = add nsw i64 %52, -2
  %58 = add nsw i64 %52, -3
  %59 = and i64 %57, 3
  %60 = icmp ult i64 %58, 3
  br i1 %60, label %137, label %61

61:                                               ; preds = %56
  %62 = sub nsw i64 %57, %59
  br label %112

63:                                               ; preds = %32
  %64 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 1
  %65 = bitcast i8* %64 to %"class.v8::internal::Label"**
  %66 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %65, align 1
  %67 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %66, i64 0, i32 0
  %68 = load i32, i32* %67, align 4
  %69 = icmp slt i32 %68, 0
  br i1 %69, label %70, label %85

70:                                               ; preds = %63
  %71 = bitcast i8** %8 to i64*
  %72 = load i64, i64* %71, align 8
  %73 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %74 = bitcast i8** %73 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = sub i64 %72, %75
  %77 = trunc i64 %76 to i32
  %78 = ashr i32 %3, 24
  %79 = add nsw i32 %78, -5
  %80 = sub i32 %79, %68
  %81 = sub i32 %80, %77
  %82 = inttoptr i64 %72 to i32*
  store i32 %81, i32* %82, align 1
  %83 = load i8*, i8** %8, align 8
  %84 = getelementptr inbounds i8, i8* %83, i64 4
  store i8* %84, i8** %8, align 8
  br label %150

85:                                               ; preds = %63
  %86 = icmp eq i32 %68, 0
  br i1 %86, label %100, label %87

87:                                               ; preds = %85
  %88 = add nsw i32 %68, -1
  %89 = bitcast i8** %8 to i32**
  %90 = load i32*, i32** %89, align 8
  store i32 %88, i32* %90, align 1
  %91 = load i8*, i8** %8, align 8
  %92 = getelementptr inbounds i8, i8* %91, i64 4
  store i8* %92, i8** %8, align 8
  %93 = ptrtoint i8* %92 to i64
  %94 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %95 = bitcast i8** %94 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = sub i64 %93, %96
  %98 = trunc i64 %97 to i32
  %99 = add i32 %98, -3
  store i32 %99, i32* %67, align 4
  br label %150

100:                                              ; preds = %85
  %101 = bitcast i8** %8 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %104 = bitcast i8** %103 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = sub i64 %102, %105
  %107 = trunc i64 %106 to i32
  %108 = inttoptr i64 %102 to i32*
  store i32 %107, i32* %108, align 1
  %109 = load i8*, i8** %8, align 8
  %110 = getelementptr inbounds i8, i8* %109, i64 4
  store i8* %110, i8** %8, align 8
  %111 = add nsw i32 %107, 1
  store i32 %111, i32* %67, align 4
  br label %150

112:                                              ; preds = %112, %61
  %113 = phi i64 [ 2, %61 ], [ %134, %112 ]
  %114 = phi i64 [ %62, %61 ], [ %135, %112 ]
  %115 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 %113
  %116 = load i8, i8* %115, align 1
  %117 = load i8*, i8** %8, align 8
  %118 = getelementptr inbounds i8, i8* %117, i64 1
  store i8* %118, i8** %8, align 8
  store i8 %116, i8* %117, align 1
  %119 = or i64 %113, 1
  %120 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 %119
  %121 = load i8, i8* %120, align 1
  %122 = load i8*, i8** %8, align 8
  %123 = getelementptr inbounds i8, i8* %122, i64 1
  store i8* %123, i8** %8, align 8
  store i8 %121, i8* %122, align 1
  %124 = add nuw nsw i64 %113, 2
  %125 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 %124
  %126 = load i8, i8* %125, align 1
  %127 = load i8*, i8** %8, align 8
  %128 = getelementptr inbounds i8, i8* %127, i64 1
  store i8* %128, i8** %8, align 8
  store i8 %126, i8* %127, align 1
  %129 = add nuw nsw i64 %113, 3
  %130 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 %129
  %131 = load i8, i8* %130, align 1
  %132 = load i8*, i8** %8, align 8
  %133 = getelementptr inbounds i8, i8* %132, i64 1
  store i8* %133, i8** %8, align 8
  store i8 %131, i8* %132, align 1
  %134 = add nuw nsw i64 %113, 4
  %135 = add i64 %114, -4
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %137, label %112

137:                                              ; preds = %112, %56
  %138 = phi i64 [ 2, %56 ], [ %134, %112 ]
  %139 = icmp eq i64 %59, 0
  br i1 %139, label %150, label %140

140:                                              ; preds = %137, %140
  %141 = phi i64 [ %147, %140 ], [ %138, %137 ]
  %142 = phi i64 [ %148, %140 ], [ %59, %137 ]
  %143 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 %141
  %144 = load i8, i8* %143, align 1
  %145 = load i8*, i8** %8, align 8
  %146 = getelementptr inbounds i8, i8* %145, i64 1
  store i8* %146, i8** %8, align 8
  store i8 %144, i8* %145, align 1
  %147 = add nuw nsw i64 %141, 1
  %148 = add i64 %142, -1
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %150, label %140, !llvm.loop !20

150:                                              ; preds = %137, %140, %51, %48, %70, %87, %100
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %33)
  %151 = trunc i64 %4 to i8
  %152 = load i8*, i8** %8, align 8
  %153 = getelementptr inbounds i8, i8* %152, i64 1
  store i8* %153, i8** %8, align 8
  store i8 %151, i8* %152, align 1
  br label %278

154:                                              ; preds = %25
  store i8 -127, i8* %30, align 1
  %155 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %7, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %155)
  %156 = bitcast %"class.v8::internal::Operand"* %7 to i64*
  store i64 %2, i64* %156, align 8
  %157 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %7, i64 0, i32 0, i32 1, i64 7
  %158 = bitcast i8* %157 to i32*
  store i32 %3, i32* %158, align 1
  %159 = lshr i32 %3, 16
  %160 = and i32 %159, 255
  %161 = lshr i64 %2, 8
  %162 = trunc i64 %161 to i8
  %163 = shl i8 %1, 3
  %164 = or i8 %163, %162
  %165 = load i8*, i8** %8, align 8
  %166 = getelementptr inbounds i8, i8* %165, i64 1
  store i8* %166, i8** %8, align 8
  store i8 %164, i8* %165, align 1
  %167 = icmp eq i8 %162, 5
  %168 = lshr i64 %2, 16
  %169 = trunc i64 %168 to i8
  br i1 %167, label %185, label %170

170:                                              ; preds = %154
  %171 = trunc i32 %159 to i8
  %172 = icmp ugt i8 %171, 1
  br i1 %172, label %173, label %272

173:                                              ; preds = %170
  %174 = zext i32 %160 to i64
  %175 = load i8*, i8** %8, align 8
  %176 = getelementptr inbounds i8, i8* %175, i64 1
  store i8* %176, i8** %8, align 8
  store i8 %169, i8* %175, align 1
  %177 = icmp eq i32 %160, 2
  br i1 %177, label %272, label %178

178:                                              ; preds = %173
  %179 = add nsw i64 %174, -2
  %180 = add nsw i64 %174, -3
  %181 = and i64 %179, 3
  %182 = icmp ult i64 %180, 3
  br i1 %182, label %259, label %183

183:                                              ; preds = %178
  %184 = sub nsw i64 %179, %181
  br label %234

185:                                              ; preds = %154
  %186 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %7, i64 0, i32 0, i32 1, i64 1
  %187 = bitcast i8* %186 to %"class.v8::internal::Label"**
  %188 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %187, align 1
  %189 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %188, i64 0, i32 0
  %190 = load i32, i32* %189, align 4
  %191 = icmp slt i32 %190, 0
  br i1 %191, label %192, label %207

192:                                              ; preds = %185
  %193 = bitcast i8** %8 to i64*
  %194 = load i64, i64* %193, align 8
  %195 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %196 = bitcast i8** %195 to i64*
  %197 = load i64, i64* %196, align 8
  %198 = sub i64 %194, %197
  %199 = trunc i64 %198 to i32
  %200 = ashr i32 %3, 24
  %201 = add nsw i32 %200, -5
  %202 = sub i32 %201, %190
  %203 = sub i32 %202, %199
  %204 = inttoptr i64 %194 to i32*
  store i32 %203, i32* %204, align 1
  %205 = load i8*, i8** %8, align 8
  %206 = getelementptr inbounds i8, i8* %205, i64 4
  store i8* %206, i8** %8, align 8
  br label %272

207:                                              ; preds = %185
  %208 = icmp eq i32 %190, 0
  br i1 %208, label %222, label %209

209:                                              ; preds = %207
  %210 = add nsw i32 %190, -1
  %211 = bitcast i8** %8 to i32**
  %212 = load i32*, i32** %211, align 8
  store i32 %210, i32* %212, align 1
  %213 = load i8*, i8** %8, align 8
  %214 = getelementptr inbounds i8, i8* %213, i64 4
  store i8* %214, i8** %8, align 8
  %215 = ptrtoint i8* %214 to i64
  %216 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %217 = bitcast i8** %216 to i64*
  %218 = load i64, i64* %217, align 8
  %219 = sub i64 %215, %218
  %220 = trunc i64 %219 to i32
  %221 = add i32 %220, -3
  store i32 %221, i32* %189, align 4
  br label %272

222:                                              ; preds = %207
  %223 = bitcast i8** %8 to i64*
  %224 = load i64, i64* %223, align 8
  %225 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %226 = bitcast i8** %225 to i64*
  %227 = load i64, i64* %226, align 8
  %228 = sub i64 %224, %227
  %229 = trunc i64 %228 to i32
  %230 = inttoptr i64 %224 to i32*
  store i32 %229, i32* %230, align 1
  %231 = load i8*, i8** %8, align 8
  %232 = getelementptr inbounds i8, i8* %231, i64 4
  store i8* %232, i8** %8, align 8
  %233 = add nsw i32 %229, 1
  store i32 %233, i32* %189, align 4
  br label %272

234:                                              ; preds = %234, %183
  %235 = phi i64 [ 2, %183 ], [ %256, %234 ]
  %236 = phi i64 [ %184, %183 ], [ %257, %234 ]
  %237 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %7, i64 0, i32 0, i32 1, i64 %235
  %238 = load i8, i8* %237, align 1
  %239 = load i8*, i8** %8, align 8
  %240 = getelementptr inbounds i8, i8* %239, i64 1
  store i8* %240, i8** %8, align 8
  store i8 %238, i8* %239, align 1
  %241 = or i64 %235, 1
  %242 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %7, i64 0, i32 0, i32 1, i64 %241
  %243 = load i8, i8* %242, align 1
  %244 = load i8*, i8** %8, align 8
  %245 = getelementptr inbounds i8, i8* %244, i64 1
  store i8* %245, i8** %8, align 8
  store i8 %243, i8* %244, align 1
  %246 = add nuw nsw i64 %235, 2
  %247 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %7, i64 0, i32 0, i32 1, i64 %246
  %248 = load i8, i8* %247, align 1
  %249 = load i8*, i8** %8, align 8
  %250 = getelementptr inbounds i8, i8* %249, i64 1
  store i8* %250, i8** %8, align 8
  store i8 %248, i8* %249, align 1
  %251 = add nuw nsw i64 %235, 3
  %252 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %7, i64 0, i32 0, i32 1, i64 %251
  %253 = load i8, i8* %252, align 1
  %254 = load i8*, i8** %8, align 8
  %255 = getelementptr inbounds i8, i8* %254, i64 1
  store i8* %255, i8** %8, align 8
  store i8 %253, i8* %254, align 1
  %256 = add nuw nsw i64 %235, 4
  %257 = add i64 %236, -4
  %258 = icmp eq i64 %257, 0
  br i1 %258, label %259, label %234

259:                                              ; preds = %234, %178
  %260 = phi i64 [ 2, %178 ], [ %256, %234 ]
  %261 = icmp eq i64 %181, 0
  br i1 %261, label %272, label %262

262:                                              ; preds = %259, %262
  %263 = phi i64 [ %269, %262 ], [ %260, %259 ]
  %264 = phi i64 [ %270, %262 ], [ %181, %259 ]
  %265 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %7, i64 0, i32 0, i32 1, i64 %263
  %266 = load i8, i8* %265, align 1
  %267 = load i8*, i8** %8, align 8
  %268 = getelementptr inbounds i8, i8* %267, i64 1
  store i8* %268, i8** %8, align 8
  store i8 %266, i8* %267, align 1
  %269 = add nuw nsw i64 %263, 1
  %270 = add i64 %264, -1
  %271 = icmp eq i64 %270, 0
  br i1 %271, label %272, label %262, !llvm.loop !21

272:                                              ; preds = %259, %262, %173, %170, %192, %209, %222
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %155)
  %273 = trunc i64 %4 to i16
  %274 = bitcast i8** %8 to i16**
  %275 = load i16*, i16** %274, align 8
  store i16 %273, i16* %275, align 1
  %276 = load i8*, i8** %8, align 8
  %277 = getelementptr inbounds i8, i8* %276, i64 2
  store i8* %277, i8** %8, align 8
  br label %278

278:                                              ; preds = %272, %150
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler25immediate_arithmetic_op_8EhNS0_7OperandENS0_9ImmediateE(%"class.v8::internal::Assembler"*, i8 zeroext, i64, i32, i64) local_unnamed_addr #1 align 2 {
  %6 = alloca %"class.v8::internal::Operand", align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 -32
  %12 = icmp ult i8* %8, %11
  br i1 %12, label %14, label %13, !prof !11

13:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %14

14:                                               ; preds = %5, %13
  %15 = trunc i64 %2 to i8
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %21, label %17

17:                                               ; preds = %14
  %18 = or i8 %15, 64
  %19 = load i8*, i8** %7, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 1
  store i8* %20, i8** %7, align 8
  store i8 %18, i8* %19, align 1
  br label %21

21:                                               ; preds = %14, %17
  %22 = load i8*, i8** %7, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %7, align 8
  store i8 -128, i8* %22, align 1
  %24 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %24)
  %25 = bitcast %"class.v8::internal::Operand"* %6 to i64*
  store i64 %2, i64* %25, align 8
  %26 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 7
  %27 = bitcast i8* %26 to i32*
  store i32 %3, i32* %27, align 1
  %28 = lshr i32 %3, 16
  %29 = and i32 %28, 255
  %30 = lshr i64 %2, 8
  %31 = trunc i64 %30 to i8
  %32 = shl i8 %1, 3
  %33 = or i8 %32, %31
  %34 = load i8*, i8** %7, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %7, align 8
  store i8 %33, i8* %34, align 1
  %36 = icmp eq i8 %31, 5
  %37 = lshr i64 %2, 16
  %38 = trunc i64 %37 to i8
  br i1 %36, label %54, label %39

39:                                               ; preds = %21
  %40 = trunc i32 %28 to i8
  %41 = icmp ugt i8 %40, 1
  br i1 %41, label %42, label %141

42:                                               ; preds = %39
  %43 = zext i32 %29 to i64
  %44 = load i8*, i8** %7, align 8
  %45 = getelementptr inbounds i8, i8* %44, i64 1
  store i8* %45, i8** %7, align 8
  store i8 %38, i8* %44, align 1
  %46 = icmp eq i32 %29, 2
  br i1 %46, label %141, label %47

47:                                               ; preds = %42
  %48 = add nsw i64 %43, -2
  %49 = add nsw i64 %43, -3
  %50 = and i64 %48, 3
  %51 = icmp ult i64 %49, 3
  br i1 %51, label %128, label %52

52:                                               ; preds = %47
  %53 = sub nsw i64 %48, %50
  br label %103

54:                                               ; preds = %21
  %55 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 1
  %56 = bitcast i8* %55 to %"class.v8::internal::Label"**
  %57 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %56, align 1
  %58 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %57, i64 0, i32 0
  %59 = load i32, i32* %58, align 4
  %60 = icmp slt i32 %59, 0
  br i1 %60, label %61, label %76

61:                                               ; preds = %54
  %62 = bitcast i8** %7 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %65 = bitcast i8** %64 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = sub i64 %63, %66
  %68 = trunc i64 %67 to i32
  %69 = ashr i32 %3, 24
  %70 = add nsw i32 %69, -5
  %71 = sub i32 %70, %59
  %72 = sub i32 %71, %68
  %73 = inttoptr i64 %63 to i32*
  store i32 %72, i32* %73, align 1
  %74 = load i8*, i8** %7, align 8
  %75 = getelementptr inbounds i8, i8* %74, i64 4
  store i8* %75, i8** %7, align 8
  br label %141

76:                                               ; preds = %54
  %77 = icmp eq i32 %59, 0
  br i1 %77, label %91, label %78

78:                                               ; preds = %76
  %79 = add nsw i32 %59, -1
  %80 = bitcast i8** %7 to i32**
  %81 = load i32*, i32** %80, align 8
  store i32 %79, i32* %81, align 1
  %82 = load i8*, i8** %7, align 8
  %83 = getelementptr inbounds i8, i8* %82, i64 4
  store i8* %83, i8** %7, align 8
  %84 = ptrtoint i8* %83 to i64
  %85 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %86 = bitcast i8** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = sub i64 %84, %87
  %89 = trunc i64 %88 to i32
  %90 = add i32 %89, -3
  store i32 %90, i32* %58, align 4
  br label %141

91:                                               ; preds = %76
  %92 = bitcast i8** %7 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %95 = bitcast i8** %94 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = sub i64 %93, %96
  %98 = trunc i64 %97 to i32
  %99 = inttoptr i64 %93 to i32*
  store i32 %98, i32* %99, align 1
  %100 = load i8*, i8** %7, align 8
  %101 = getelementptr inbounds i8, i8* %100, i64 4
  store i8* %101, i8** %7, align 8
  %102 = add nsw i32 %98, 1
  store i32 %102, i32* %58, align 4
  br label %141

103:                                              ; preds = %103, %52
  %104 = phi i64 [ 2, %52 ], [ %125, %103 ]
  %105 = phi i64 [ %53, %52 ], [ %126, %103 ]
  %106 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 %104
  %107 = load i8, i8* %106, align 1
  %108 = load i8*, i8** %7, align 8
  %109 = getelementptr inbounds i8, i8* %108, i64 1
  store i8* %109, i8** %7, align 8
  store i8 %107, i8* %108, align 1
  %110 = or i64 %104, 1
  %111 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 %110
  %112 = load i8, i8* %111, align 1
  %113 = load i8*, i8** %7, align 8
  %114 = getelementptr inbounds i8, i8* %113, i64 1
  store i8* %114, i8** %7, align 8
  store i8 %112, i8* %113, align 1
  %115 = add nuw nsw i64 %104, 2
  %116 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = load i8*, i8** %7, align 8
  %119 = getelementptr inbounds i8, i8* %118, i64 1
  store i8* %119, i8** %7, align 8
  store i8 %117, i8* %118, align 1
  %120 = add nuw nsw i64 %104, 3
  %121 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 %120
  %122 = load i8, i8* %121, align 1
  %123 = load i8*, i8** %7, align 8
  %124 = getelementptr inbounds i8, i8* %123, i64 1
  store i8* %124, i8** %7, align 8
  store i8 %122, i8* %123, align 1
  %125 = add nuw nsw i64 %104, 4
  %126 = add i64 %105, -4
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %128, label %103

128:                                              ; preds = %103, %47
  %129 = phi i64 [ 2, %47 ], [ %125, %103 ]
  %130 = icmp eq i64 %50, 0
  br i1 %130, label %141, label %131

131:                                              ; preds = %128, %131
  %132 = phi i64 [ %138, %131 ], [ %129, %128 ]
  %133 = phi i64 [ %139, %131 ], [ %50, %128 ]
  %134 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 %132
  %135 = load i8, i8* %134, align 1
  %136 = load i8*, i8** %7, align 8
  %137 = getelementptr inbounds i8, i8* %136, i64 1
  store i8* %137, i8** %7, align 8
  store i8 %135, i8* %136, align 1
  %138 = add nuw nsw i64 %132, 1
  %139 = add i64 %133, -1
  %140 = icmp eq i64 %139, 0
  br i1 %140, label %141, label %131, !llvm.loop !22

141:                                              ; preds = %128, %131, %42, %39, %61, %78, %91
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %24)
  %142 = trunc i64 %4 to i8
  %143 = load i8*, i8** %7, align 8
  %144 = getelementptr inbounds i8, i8* %143, i64 1
  store i8* %144, i8** %7, align 8
  store i8 %142, i8* %143, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler25immediate_arithmetic_op_8EhNS0_8RegisterENS0_9ImmediateE(%"class.v8::internal::Assembler"*, i8 zeroext, i32, i64) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %4, %11
  %13 = icmp slt i32 %2, 4
  br i1 %13, label %20, label %14

14:                                               ; preds = %12
  %15 = lshr i32 %2, 3
  %16 = trunc i32 %15 to i8
  %17 = or i8 %16, 64
  %18 = load i8*, i8** %5, align 8
  %19 = getelementptr inbounds i8, i8* %18, i64 1
  store i8* %19, i8** %5, align 8
  store i8 %17, i8* %18, align 1
  br label %20

20:                                               ; preds = %14, %12
  %21 = load i8*, i8** %5, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %5, align 8
  store i8 -128, i8* %21, align 1
  %23 = zext i8 %1 to i32
  %24 = shl nuw nsw i32 %23, 3
  %25 = and i32 %2, 7
  %26 = or i32 %25, %24
  %27 = trunc i32 %26 to i8
  %28 = or i8 %27, -64
  %29 = load i8*, i8** %5, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %5, align 8
  store i8 %28, i8* %29, align 1
  %31 = trunc i64 %3 to i8
  %32 = load i8*, i8** %5, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %5, align 8
  store i8 %31, i8* %32, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5shiftENS0_8RegisterENS0_9ImmediateEii(%"class.v8::internal::Assembler"*, i32, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %6 = trunc i64 %2 to i32
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 -32
  %12 = icmp ult i8* %8, %11
  br i1 %12, label %14, label %13, !prof !11

13:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %14

14:                                               ; preds = %5, %13
  %15 = icmp eq i32 %6, 1
  %16 = icmp eq i32 %4, 8
  br i1 %16, label %17, label %23

17:                                               ; preds = %14
  %18 = lshr i32 %1, 3
  %19 = trunc i32 %18 to i8
  %20 = or i8 %19, 72
  %21 = load i8*, i8** %7, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %7, align 8
  store i8 %20, i8* %21, align 1
  br label %28

23:                                               ; preds = %14
  %24 = icmp ult i32 %1, 8
  br i1 %24, label %28, label %25

25:                                               ; preds = %23
  %26 = load i8*, i8** %7, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %7, align 8
  store i8 65, i8* %26, align 1
  br label %28

28:                                               ; preds = %17, %23, %25
  %29 = load i8*, i8** %7, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %7, align 8
  br i1 %15, label %31, label %39

31:                                               ; preds = %28
  store i8 -47, i8* %29, align 1
  %32 = shl i32 %3, 3
  %33 = and i32 %1, 7
  %34 = or i32 %32, %33
  %35 = trunc i32 %34 to i8
  %36 = or i8 %35, -64
  %37 = load i8*, i8** %7, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  store i8* %38, i8** %7, align 8
  store i8 %36, i8* %37, align 1
  br label %50

39:                                               ; preds = %28
  store i8 -63, i8* %29, align 1
  %40 = shl i32 %3, 3
  %41 = and i32 %1, 7
  %42 = or i32 %40, %41
  %43 = trunc i32 %42 to i8
  %44 = or i8 %43, -64
  %45 = load i8*, i8** %7, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 1
  store i8* %46, i8** %7, align 8
  store i8 %44, i8* %45, align 1
  %47 = trunc i64 %2 to i8
  %48 = load i8*, i8** %7, align 8
  %49 = getelementptr inbounds i8, i8* %48, i64 1
  store i8* %49, i8** %7, align 8
  store i8 %47, i8* %48, align 1
  br label %50

50:                                               ; preds = %39, %31
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5shiftENS0_7OperandENS0_9ImmediateEii(%"class.v8::internal::Assembler"*, i64, i32, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %7 = alloca %"class.v8::internal::Operand", align 8
  %8 = alloca %"class.v8::internal::Operand", align 8
  %9 = trunc i64 %3 to i32
  %10 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 -32
  %15 = icmp ult i8* %11, %14
  br i1 %15, label %17, label %16, !prof !11

16:                                               ; preds = %6
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %17

17:                                               ; preds = %6, %16
  %18 = icmp eq i32 %9, 1
  %19 = icmp eq i32 %5, 8
  %20 = trunc i64 %1 to i8
  br i1 %19, label %21, label %25

21:                                               ; preds = %17
  %22 = or i8 %20, 72
  %23 = load i8*, i8** %10, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %10, align 8
  store i8 %22, i8* %23, align 1
  br label %31

25:                                               ; preds = %17
  %26 = icmp eq i8 %20, 0
  br i1 %26, label %31, label %27

27:                                               ; preds = %25
  %28 = or i8 %20, 64
  %29 = load i8*, i8** %10, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %10, align 8
  store i8 %28, i8* %29, align 1
  br label %31

31:                                               ; preds = %21, %25, %27
  %32 = load i8*, i8** %10, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %10, align 8
  br i1 %18, label %34, label %154

34:                                               ; preds = %31
  store i8 -47, i8* %32, align 1
  %35 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %7, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %35)
  %36 = bitcast %"class.v8::internal::Operand"* %7 to i64*
  store i64 %1, i64* %36, align 8
  %37 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %7, i64 0, i32 0, i32 1, i64 7
  %38 = bitcast i8* %37 to i32*
  store i32 %2, i32* %38, align 1
  %39 = lshr i32 %2, 16
  %40 = and i32 %39, 255
  %41 = lshr i64 %1, 8
  %42 = trunc i64 %41 to i8
  %43 = trunc i32 %4 to i8
  %44 = shl i8 %43, 3
  %45 = or i8 %44, %42
  %46 = load i8*, i8** %10, align 8
  %47 = getelementptr inbounds i8, i8* %46, i64 1
  store i8* %47, i8** %10, align 8
  store i8 %45, i8* %46, align 1
  %48 = icmp eq i8 %42, 5
  %49 = lshr i64 %1, 16
  %50 = trunc i64 %49 to i8
  br i1 %48, label %66, label %51

51:                                               ; preds = %34
  %52 = trunc i32 %39 to i8
  %53 = icmp ugt i8 %52, 1
  br i1 %53, label %54, label %153

54:                                               ; preds = %51
  %55 = zext i32 %40 to i64
  %56 = load i8*, i8** %10, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 1
  store i8* %57, i8** %10, align 8
  store i8 %50, i8* %56, align 1
  %58 = icmp eq i32 %40, 2
  br i1 %58, label %153, label %59

59:                                               ; preds = %54
  %60 = add nsw i64 %55, -2
  %61 = add nsw i64 %55, -3
  %62 = and i64 %60, 3
  %63 = icmp ult i64 %61, 3
  br i1 %63, label %140, label %64

64:                                               ; preds = %59
  %65 = sub nsw i64 %60, %62
  br label %115

66:                                               ; preds = %34
  %67 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %7, i64 0, i32 0, i32 1, i64 1
  %68 = bitcast i8* %67 to %"class.v8::internal::Label"**
  %69 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %68, align 1
  %70 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %69, i64 0, i32 0
  %71 = load i32, i32* %70, align 4
  %72 = icmp slt i32 %71, 0
  br i1 %72, label %73, label %88

73:                                               ; preds = %66
  %74 = bitcast i8** %10 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %77 = bitcast i8** %76 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = sub i64 %75, %78
  %80 = trunc i64 %79 to i32
  %81 = ashr i32 %2, 24
  %82 = add nsw i32 %81, -5
  %83 = sub i32 %82, %71
  %84 = sub i32 %83, %80
  %85 = inttoptr i64 %75 to i32*
  store i32 %84, i32* %85, align 1
  %86 = load i8*, i8** %10, align 8
  %87 = getelementptr inbounds i8, i8* %86, i64 4
  store i8* %87, i8** %10, align 8
  br label %153

88:                                               ; preds = %66
  %89 = icmp eq i32 %71, 0
  br i1 %89, label %103, label %90

90:                                               ; preds = %88
  %91 = add nsw i32 %71, -1
  %92 = bitcast i8** %10 to i32**
  %93 = load i32*, i32** %92, align 8
  store i32 %91, i32* %93, align 1
  %94 = load i8*, i8** %10, align 8
  %95 = getelementptr inbounds i8, i8* %94, i64 4
  store i8* %95, i8** %10, align 8
  %96 = ptrtoint i8* %95 to i64
  %97 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %98 = bitcast i8** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = sub i64 %96, %99
  %101 = trunc i64 %100 to i32
  %102 = add i32 %101, -3
  store i32 %102, i32* %70, align 4
  br label %153

103:                                              ; preds = %88
  %104 = bitcast i8** %10 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %107 = bitcast i8** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = sub i64 %105, %108
  %110 = trunc i64 %109 to i32
  %111 = inttoptr i64 %105 to i32*
  store i32 %110, i32* %111, align 1
  %112 = load i8*, i8** %10, align 8
  %113 = getelementptr inbounds i8, i8* %112, i64 4
  store i8* %113, i8** %10, align 8
  %114 = add nsw i32 %110, 1
  store i32 %114, i32* %70, align 4
  br label %153

115:                                              ; preds = %115, %64
  %116 = phi i64 [ 2, %64 ], [ %137, %115 ]
  %117 = phi i64 [ %65, %64 ], [ %138, %115 ]
  %118 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %7, i64 0, i32 0, i32 1, i64 %116
  %119 = load i8, i8* %118, align 1
  %120 = load i8*, i8** %10, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 1
  store i8* %121, i8** %10, align 8
  store i8 %119, i8* %120, align 1
  %122 = or i64 %116, 1
  %123 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %7, i64 0, i32 0, i32 1, i64 %122
  %124 = load i8, i8* %123, align 1
  %125 = load i8*, i8** %10, align 8
  %126 = getelementptr inbounds i8, i8* %125, i64 1
  store i8* %126, i8** %10, align 8
  store i8 %124, i8* %125, align 1
  %127 = add nuw nsw i64 %116, 2
  %128 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %7, i64 0, i32 0, i32 1, i64 %127
  %129 = load i8, i8* %128, align 1
  %130 = load i8*, i8** %10, align 8
  %131 = getelementptr inbounds i8, i8* %130, i64 1
  store i8* %131, i8** %10, align 8
  store i8 %129, i8* %130, align 1
  %132 = add nuw nsw i64 %116, 3
  %133 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %7, i64 0, i32 0, i32 1, i64 %132
  %134 = load i8, i8* %133, align 1
  %135 = load i8*, i8** %10, align 8
  %136 = getelementptr inbounds i8, i8* %135, i64 1
  store i8* %136, i8** %10, align 8
  store i8 %134, i8* %135, align 1
  %137 = add nuw nsw i64 %116, 4
  %138 = add i64 %117, -4
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %140, label %115

140:                                              ; preds = %115, %59
  %141 = phi i64 [ 2, %59 ], [ %137, %115 ]
  %142 = icmp eq i64 %62, 0
  br i1 %142, label %153, label %143

143:                                              ; preds = %140, %143
  %144 = phi i64 [ %150, %143 ], [ %141, %140 ]
  %145 = phi i64 [ %151, %143 ], [ %62, %140 ]
  %146 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %7, i64 0, i32 0, i32 1, i64 %144
  %147 = load i8, i8* %146, align 1
  %148 = load i8*, i8** %10, align 8
  %149 = getelementptr inbounds i8, i8* %148, i64 1
  store i8* %149, i8** %10, align 8
  store i8 %147, i8* %148, align 1
  %150 = add nuw nsw i64 %144, 1
  %151 = add i64 %145, -1
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %153, label %143, !llvm.loop !23

153:                                              ; preds = %140, %143, %54, %51, %73, %90, %103
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %35)
  br label %277

154:                                              ; preds = %31
  store i8 -63, i8* %32, align 1
  %155 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %8, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %155)
  %156 = bitcast %"class.v8::internal::Operand"* %8 to i64*
  store i64 %1, i64* %156, align 8
  %157 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %8, i64 0, i32 0, i32 1, i64 7
  %158 = bitcast i8* %157 to i32*
  store i32 %2, i32* %158, align 1
  %159 = lshr i32 %2, 16
  %160 = and i32 %159, 255
  %161 = lshr i64 %1, 8
  %162 = trunc i64 %161 to i8
  %163 = trunc i32 %4 to i8
  %164 = shl i8 %163, 3
  %165 = or i8 %164, %162
  %166 = load i8*, i8** %10, align 8
  %167 = getelementptr inbounds i8, i8* %166, i64 1
  store i8* %167, i8** %10, align 8
  store i8 %165, i8* %166, align 1
  %168 = icmp eq i8 %162, 5
  %169 = lshr i64 %1, 16
  %170 = trunc i64 %169 to i8
  br i1 %168, label %186, label %171

171:                                              ; preds = %154
  %172 = trunc i32 %159 to i8
  %173 = icmp ugt i8 %172, 1
  br i1 %173, label %174, label %273

174:                                              ; preds = %171
  %175 = zext i32 %160 to i64
  %176 = load i8*, i8** %10, align 8
  %177 = getelementptr inbounds i8, i8* %176, i64 1
  store i8* %177, i8** %10, align 8
  store i8 %170, i8* %176, align 1
  %178 = icmp eq i32 %160, 2
  br i1 %178, label %273, label %179

179:                                              ; preds = %174
  %180 = add nsw i64 %175, -2
  %181 = add nsw i64 %175, -3
  %182 = and i64 %180, 3
  %183 = icmp ult i64 %181, 3
  br i1 %183, label %260, label %184

184:                                              ; preds = %179
  %185 = sub nsw i64 %180, %182
  br label %235

186:                                              ; preds = %154
  %187 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %8, i64 0, i32 0, i32 1, i64 1
  %188 = bitcast i8* %187 to %"class.v8::internal::Label"**
  %189 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %188, align 1
  %190 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %189, i64 0, i32 0
  %191 = load i32, i32* %190, align 4
  %192 = icmp slt i32 %191, 0
  br i1 %192, label %193, label %208

193:                                              ; preds = %186
  %194 = bitcast i8** %10 to i64*
  %195 = load i64, i64* %194, align 8
  %196 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %197 = bitcast i8** %196 to i64*
  %198 = load i64, i64* %197, align 8
  %199 = sub i64 %195, %198
  %200 = trunc i64 %199 to i32
  %201 = ashr i32 %2, 24
  %202 = add nsw i32 %201, -5
  %203 = sub i32 %202, %191
  %204 = sub i32 %203, %200
  %205 = inttoptr i64 %195 to i32*
  store i32 %204, i32* %205, align 1
  %206 = load i8*, i8** %10, align 8
  %207 = getelementptr inbounds i8, i8* %206, i64 4
  store i8* %207, i8** %10, align 8
  br label %273

208:                                              ; preds = %186
  %209 = icmp eq i32 %191, 0
  br i1 %209, label %223, label %210

210:                                              ; preds = %208
  %211 = add nsw i32 %191, -1
  %212 = bitcast i8** %10 to i32**
  %213 = load i32*, i32** %212, align 8
  store i32 %211, i32* %213, align 1
  %214 = load i8*, i8** %10, align 8
  %215 = getelementptr inbounds i8, i8* %214, i64 4
  store i8* %215, i8** %10, align 8
  %216 = ptrtoint i8* %215 to i64
  %217 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %218 = bitcast i8** %217 to i64*
  %219 = load i64, i64* %218, align 8
  %220 = sub i64 %216, %219
  %221 = trunc i64 %220 to i32
  %222 = add i32 %221, -3
  store i32 %222, i32* %190, align 4
  br label %273

223:                                              ; preds = %208
  %224 = bitcast i8** %10 to i64*
  %225 = load i64, i64* %224, align 8
  %226 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %227 = bitcast i8** %226 to i64*
  %228 = load i64, i64* %227, align 8
  %229 = sub i64 %225, %228
  %230 = trunc i64 %229 to i32
  %231 = inttoptr i64 %225 to i32*
  store i32 %230, i32* %231, align 1
  %232 = load i8*, i8** %10, align 8
  %233 = getelementptr inbounds i8, i8* %232, i64 4
  store i8* %233, i8** %10, align 8
  %234 = add nsw i32 %230, 1
  store i32 %234, i32* %190, align 4
  br label %273

235:                                              ; preds = %235, %184
  %236 = phi i64 [ 2, %184 ], [ %257, %235 ]
  %237 = phi i64 [ %185, %184 ], [ %258, %235 ]
  %238 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %8, i64 0, i32 0, i32 1, i64 %236
  %239 = load i8, i8* %238, align 1
  %240 = load i8*, i8** %10, align 8
  %241 = getelementptr inbounds i8, i8* %240, i64 1
  store i8* %241, i8** %10, align 8
  store i8 %239, i8* %240, align 1
  %242 = or i64 %236, 1
  %243 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %8, i64 0, i32 0, i32 1, i64 %242
  %244 = load i8, i8* %243, align 1
  %245 = load i8*, i8** %10, align 8
  %246 = getelementptr inbounds i8, i8* %245, i64 1
  store i8* %246, i8** %10, align 8
  store i8 %244, i8* %245, align 1
  %247 = add nuw nsw i64 %236, 2
  %248 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %8, i64 0, i32 0, i32 1, i64 %247
  %249 = load i8, i8* %248, align 1
  %250 = load i8*, i8** %10, align 8
  %251 = getelementptr inbounds i8, i8* %250, i64 1
  store i8* %251, i8** %10, align 8
  store i8 %249, i8* %250, align 1
  %252 = add nuw nsw i64 %236, 3
  %253 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %8, i64 0, i32 0, i32 1, i64 %252
  %254 = load i8, i8* %253, align 1
  %255 = load i8*, i8** %10, align 8
  %256 = getelementptr inbounds i8, i8* %255, i64 1
  store i8* %256, i8** %10, align 8
  store i8 %254, i8* %255, align 1
  %257 = add nuw nsw i64 %236, 4
  %258 = add i64 %237, -4
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %260, label %235

260:                                              ; preds = %235, %179
  %261 = phi i64 [ 2, %179 ], [ %257, %235 ]
  %262 = icmp eq i64 %182, 0
  br i1 %262, label %273, label %263

263:                                              ; preds = %260, %263
  %264 = phi i64 [ %270, %263 ], [ %261, %260 ]
  %265 = phi i64 [ %271, %263 ], [ %182, %260 ]
  %266 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %8, i64 0, i32 0, i32 1, i64 %264
  %267 = load i8, i8* %266, align 1
  %268 = load i8*, i8** %10, align 8
  %269 = getelementptr inbounds i8, i8* %268, i64 1
  store i8* %269, i8** %10, align 8
  store i8 %267, i8* %268, align 1
  %270 = add nuw nsw i64 %264, 1
  %271 = add i64 %265, -1
  %272 = icmp eq i64 %271, 0
  br i1 %272, label %273, label %263, !llvm.loop !24

273:                                              ; preds = %260, %263, %174, %171, %193, %210, %223
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %155)
  %274 = trunc i64 %3 to i8
  %275 = load i8*, i8** %10, align 8
  %276 = getelementptr inbounds i8, i8* %275, i64 1
  store i8* %276, i8** %10, align 8
  store i8 %274, i8* %275, align 1
  br label %277

277:                                              ; preds = %273, %153
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5shiftENS0_8RegisterEii(%"class.v8::internal::Assembler"*, i32, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %4, %11
  %13 = icmp eq i32 %3, 8
  br i1 %13, label %14, label %20

14:                                               ; preds = %12
  %15 = lshr i32 %1, 3
  %16 = trunc i32 %15 to i8
  %17 = or i8 %16, 72
  %18 = load i8*, i8** %5, align 8
  %19 = getelementptr inbounds i8, i8* %18, i64 1
  store i8* %19, i8** %5, align 8
  store i8 %17, i8* %18, align 1
  br label %25

20:                                               ; preds = %12
  %21 = icmp ult i32 %1, 8
  br i1 %21, label %25, label %22

22:                                               ; preds = %20
  %23 = load i8*, i8** %5, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %5, align 8
  store i8 65, i8* %23, align 1
  br label %25

25:                                               ; preds = %14, %20, %22
  %26 = load i8*, i8** %5, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %5, align 8
  store i8 -45, i8* %26, align 1
  %28 = shl i32 %2, 3
  %29 = and i32 %1, 7
  %30 = or i32 %28, %29
  %31 = trunc i32 %30 to i8
  %32 = or i8 %31, -64
  %33 = load i8*, i8** %5, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %5, align 8
  store i8 %32, i8* %33, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5shiftENS0_7OperandEii(%"class.v8::internal::Assembler"*, i64, i32, i32, i32) local_unnamed_addr #1 align 2 {
  %6 = alloca %"class.v8::internal::Operand", align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 -32
  %12 = icmp ult i8* %8, %11
  br i1 %12, label %14, label %13, !prof !11

13:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %14

14:                                               ; preds = %5, %13
  %15 = icmp eq i32 %4, 8
  %16 = trunc i64 %1 to i8
  br i1 %15, label %17, label %21

17:                                               ; preds = %14
  %18 = or i8 %16, 72
  %19 = load i8*, i8** %7, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 1
  store i8* %20, i8** %7, align 8
  store i8 %18, i8* %19, align 1
  br label %27

21:                                               ; preds = %14
  %22 = icmp eq i8 %16, 0
  br i1 %22, label %27, label %23

23:                                               ; preds = %21
  %24 = or i8 %16, 64
  %25 = load i8*, i8** %7, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %7, align 8
  store i8 %24, i8* %25, align 1
  br label %27

27:                                               ; preds = %17, %21, %23
  %28 = load i8*, i8** %7, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %7, align 8
  store i8 -45, i8* %28, align 1
  %30 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %30)
  %31 = bitcast %"class.v8::internal::Operand"* %6 to i64*
  store i64 %1, i64* %31, align 8
  %32 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 7
  %33 = bitcast i8* %32 to i32*
  store i32 %2, i32* %33, align 1
  %34 = lshr i32 %2, 16
  %35 = and i32 %34, 255
  %36 = lshr i64 %1, 8
  %37 = trunc i64 %36 to i8
  %38 = trunc i32 %3 to i8
  %39 = shl i8 %38, 3
  %40 = or i8 %39, %37
  %41 = load i8*, i8** %7, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %42, i8** %7, align 8
  store i8 %40, i8* %41, align 1
  %43 = icmp eq i8 %37, 5
  %44 = lshr i64 %1, 16
  %45 = trunc i64 %44 to i8
  br i1 %43, label %61, label %46

46:                                               ; preds = %27
  %47 = trunc i32 %34 to i8
  %48 = icmp ugt i8 %47, 1
  br i1 %48, label %49, label %148

49:                                               ; preds = %46
  %50 = zext i32 %35 to i64
  %51 = load i8*, i8** %7, align 8
  %52 = getelementptr inbounds i8, i8* %51, i64 1
  store i8* %52, i8** %7, align 8
  store i8 %45, i8* %51, align 1
  %53 = icmp eq i32 %35, 2
  br i1 %53, label %148, label %54

54:                                               ; preds = %49
  %55 = add nsw i64 %50, -2
  %56 = add nsw i64 %50, -3
  %57 = and i64 %55, 3
  %58 = icmp ult i64 %56, 3
  br i1 %58, label %135, label %59

59:                                               ; preds = %54
  %60 = sub nsw i64 %55, %57
  br label %110

61:                                               ; preds = %27
  %62 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 1
  %63 = bitcast i8* %62 to %"class.v8::internal::Label"**
  %64 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %63, align 1
  %65 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %64, i64 0, i32 0
  %66 = load i32, i32* %65, align 4
  %67 = icmp slt i32 %66, 0
  br i1 %67, label %68, label %83

68:                                               ; preds = %61
  %69 = bitcast i8** %7 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %72 = bitcast i8** %71 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = sub i64 %70, %73
  %75 = trunc i64 %74 to i32
  %76 = ashr i32 %2, 24
  %77 = add nsw i32 %76, -5
  %78 = sub i32 %77, %66
  %79 = sub i32 %78, %75
  %80 = inttoptr i64 %70 to i32*
  store i32 %79, i32* %80, align 1
  %81 = load i8*, i8** %7, align 8
  %82 = getelementptr inbounds i8, i8* %81, i64 4
  store i8* %82, i8** %7, align 8
  br label %148

83:                                               ; preds = %61
  %84 = icmp eq i32 %66, 0
  br i1 %84, label %98, label %85

85:                                               ; preds = %83
  %86 = add nsw i32 %66, -1
  %87 = bitcast i8** %7 to i32**
  %88 = load i32*, i32** %87, align 8
  store i32 %86, i32* %88, align 1
  %89 = load i8*, i8** %7, align 8
  %90 = getelementptr inbounds i8, i8* %89, i64 4
  store i8* %90, i8** %7, align 8
  %91 = ptrtoint i8* %90 to i64
  %92 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %93 = bitcast i8** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = sub i64 %91, %94
  %96 = trunc i64 %95 to i32
  %97 = add i32 %96, -3
  store i32 %97, i32* %65, align 4
  br label %148

98:                                               ; preds = %83
  %99 = bitcast i8** %7 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %102 = bitcast i8** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = sub i64 %100, %103
  %105 = trunc i64 %104 to i32
  %106 = inttoptr i64 %100 to i32*
  store i32 %105, i32* %106, align 1
  %107 = load i8*, i8** %7, align 8
  %108 = getelementptr inbounds i8, i8* %107, i64 4
  store i8* %108, i8** %7, align 8
  %109 = add nsw i32 %105, 1
  store i32 %109, i32* %65, align 4
  br label %148

110:                                              ; preds = %110, %59
  %111 = phi i64 [ 2, %59 ], [ %132, %110 ]
  %112 = phi i64 [ %60, %59 ], [ %133, %110 ]
  %113 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 %111
  %114 = load i8, i8* %113, align 1
  %115 = load i8*, i8** %7, align 8
  %116 = getelementptr inbounds i8, i8* %115, i64 1
  store i8* %116, i8** %7, align 8
  store i8 %114, i8* %115, align 1
  %117 = or i64 %111, 1
  %118 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = load i8*, i8** %7, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 1
  store i8* %121, i8** %7, align 8
  store i8 %119, i8* %120, align 1
  %122 = add nuw nsw i64 %111, 2
  %123 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 %122
  %124 = load i8, i8* %123, align 1
  %125 = load i8*, i8** %7, align 8
  %126 = getelementptr inbounds i8, i8* %125, i64 1
  store i8* %126, i8** %7, align 8
  store i8 %124, i8* %125, align 1
  %127 = add nuw nsw i64 %111, 3
  %128 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 %127
  %129 = load i8, i8* %128, align 1
  %130 = load i8*, i8** %7, align 8
  %131 = getelementptr inbounds i8, i8* %130, i64 1
  store i8* %131, i8** %7, align 8
  store i8 %129, i8* %130, align 1
  %132 = add nuw nsw i64 %111, 4
  %133 = add i64 %112, -4
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %135, label %110

135:                                              ; preds = %110, %54
  %136 = phi i64 [ 2, %54 ], [ %132, %110 ]
  %137 = icmp eq i64 %57, 0
  br i1 %137, label %148, label %138

138:                                              ; preds = %135, %138
  %139 = phi i64 [ %145, %138 ], [ %136, %135 ]
  %140 = phi i64 [ %146, %138 ], [ %57, %135 ]
  %141 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 %139
  %142 = load i8, i8* %141, align 1
  %143 = load i8*, i8** %7, align 8
  %144 = getelementptr inbounds i8, i8* %143, i64 1
  store i8* %144, i8** %7, align 8
  store i8 %142, i8* %143, align 1
  %145 = add nuw nsw i64 %139, 1
  %146 = add i64 %140, -1
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %148, label %138, !llvm.loop !25

148:                                              ; preds = %135, %138, %49, %46, %68, %85, %98
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %30)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6bswaplENS0_8RegisterE(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %11, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %10 = load i8*, i8** %3, align 8
  br label %11

11:                                               ; preds = %2, %9
  %12 = phi i8* [ %4, %2 ], [ %10, %9 ]
  %13 = lshr i32 %1, 3
  %14 = trunc i32 %13 to i8
  %15 = or i8 %14, 64
  %16 = getelementptr inbounds i8, i8* %12, i64 1
  store i8* %16, i8** %3, align 8
  store i8 %15, i8* %12, align 1
  %17 = load i8*, i8** %3, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %3, align 8
  store i8 15, i8* %17, align 1
  %19 = trunc i32 %1 to i8
  %20 = and i8 %19, 7
  %21 = or i8 %20, -56
  %22 = load i8*, i8** %3, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %3, align 8
  store i8 %21, i8* %22, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6bswapqENS0_8RegisterE(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %11, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %10 = load i8*, i8** %3, align 8
  br label %11

11:                                               ; preds = %2, %9
  %12 = phi i8* [ %4, %2 ], [ %10, %9 ]
  %13 = lshr i32 %1, 3
  %14 = trunc i32 %13 to i8
  %15 = or i8 %14, 72
  %16 = getelementptr inbounds i8, i8* %12, i64 1
  store i8* %16, i8** %3, align 8
  store i8 %15, i8* %12, align 1
  %17 = load i8*, i8** %3, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %3, align 8
  store i8 15, i8* %17, align 1
  %19 = trunc i32 %1 to i8
  %20 = and i8 %19, 7
  %21 = or i8 %20, -56
  %22 = load i8*, i8** %3, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %3, align 8
  store i8 %21, i8* %22, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler3btqENS0_7OperandENS0_8RegisterE(%"class.v8::internal::Assembler"*, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = trunc i64 %1 to i8
  %16 = lshr i32 %3, 1
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, -76
  %19 = or i8 %18, %15
  %20 = or i8 %19, 72
  %21 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %21, i8** %5, align 8
  store i8 %20, i8* %14, align 1
  %22 = load i8*, i8** %5, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %5, align 8
  store i8 15, i8* %22, align 1
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 -93, i8* %24, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %3, i64 %1, i32 %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4btsqENS0_7OperandENS0_8RegisterE(%"class.v8::internal::Assembler"*, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = trunc i64 %1 to i8
  %16 = lshr i32 %3, 1
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, -76
  %19 = or i8 %18, %15
  %20 = or i8 %19, 72
  %21 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %21, i8** %5, align 8
  store i8 %20, i8* %14, align 1
  %22 = load i8*, i8** %5, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %5, align 8
  store i8 15, i8* %22, align 1
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 -85, i8* %24, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %3, i64 %1, i32 %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4btsqENS0_8RegisterENS0_9ImmediateE(%"class.v8::internal::Assembler"*, i32, i64) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = lshr i32 %1, 3
  %15 = trunc i32 %14 to i8
  %16 = or i8 %15, 72
  %17 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %17, i8** %4, align 8
  store i8 %16, i8* %13, align 1
  %18 = load i8*, i8** %4, align 8
  %19 = getelementptr inbounds i8, i8* %18, i64 1
  store i8* %19, i8** %4, align 8
  store i8 15, i8* %18, align 1
  %20 = load i8*, i8** %4, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 1
  store i8* %21, i8** %4, align 8
  store i8 -70, i8* %20, align 1
  %22 = trunc i32 %1 to i8
  %23 = and i8 %22, 7
  %24 = or i8 %23, -24
  %25 = load i8*, i8** %4, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %4, align 8
  store i8 %24, i8* %25, align 1
  %27 = trunc i64 %2 to i8
  %28 = load i8*, i8** %4, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %4, align 8
  store i8 %27, i8* %28, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4btrqENS0_8RegisterENS0_9ImmediateE(%"class.v8::internal::Assembler"*, i32, i64) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = lshr i32 %1, 3
  %15 = trunc i32 %14 to i8
  %16 = or i8 %15, 72
  %17 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %17, i8** %4, align 8
  store i8 %16, i8* %13, align 1
  %18 = load i8*, i8** %4, align 8
  %19 = getelementptr inbounds i8, i8* %18, i64 1
  store i8* %19, i8** %4, align 8
  store i8 15, i8* %18, align 1
  %20 = load i8*, i8** %4, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 1
  store i8* %21, i8** %4, align 8
  store i8 -70, i8* %20, align 1
  %22 = trunc i32 %1 to i8
  %23 = and i8 %22, 7
  %24 = or i8 %23, -16
  %25 = load i8*, i8** %4, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %4, align 8
  store i8 %24, i8* %25, align 1
  %27 = trunc i64 %2 to i8
  %28 = load i8*, i8** %4, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %4, align 8
  store i8 %27, i8* %28, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4bsrlENS0_8RegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %11, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %11

11:                                               ; preds = %3, %10
  %12 = ashr i32 %1, 3
  %13 = shl nsw i32 %12, 2
  %14 = ashr i32 %2, 3
  %15 = or i32 %13, %14
  %16 = and i32 %15, 255
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %23, label %18

18:                                               ; preds = %11
  %19 = trunc i32 %15 to i8
  %20 = or i8 %19, 64
  %21 = load i8*, i8** %4, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %4, align 8
  store i8 %20, i8* %21, align 1
  br label %23

23:                                               ; preds = %11, %18
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 15, i8* %24, align 1
  %26 = load i8*, i8** %4, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %4, align 8
  store i8 -67, i8* %26, align 1
  %28 = shl i32 %1, 3
  %29 = and i32 %2, 7
  %30 = or i32 %29, %28
  %31 = trunc i32 %30 to i8
  %32 = or i8 %31, -64
  %33 = load i8*, i8** %4, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %4, align 8
  store i8 %32, i8* %33, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4bsrlENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %4, %11
  %13 = trunc i64 %2 to i8
  %14 = lshr i32 %1, 1
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, -4
  %17 = or i8 %16, %13
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %12
  %20 = or i8 %17, 64
  %21 = load i8*, i8** %5, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %5, align 8
  store i8 %20, i8* %21, align 1
  br label %23

23:                                               ; preds = %12, %19
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 15, i8* %24, align 1
  %26 = load i8*, i8** %5, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %5, align 8
  store i8 -67, i8* %26, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4bsrqENS0_8RegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = ashr i32 %1, 3
  %15 = shl nsw i32 %14, 2
  %16 = lshr i32 %2, 3
  %17 = or i32 %15, %16
  %18 = trunc i32 %17 to i8
  %19 = or i8 %18, 72
  %20 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %20, i8** %4, align 8
  store i8 %19, i8* %13, align 1
  %21 = load i8*, i8** %4, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %4, align 8
  store i8 15, i8* %21, align 1
  %23 = load i8*, i8** %4, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %4, align 8
  store i8 -67, i8* %23, align 1
  %25 = shl i32 %1, 3
  %26 = and i32 %2, 7
  %27 = or i32 %26, %25
  %28 = trunc i32 %27 to i8
  %29 = or i8 %28, -64
  %30 = load i8*, i8** %4, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %4, align 8
  store i8 %29, i8* %30, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4bsrqENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = trunc i64 %2 to i8
  %16 = lshr i32 %1, 1
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, -76
  %19 = or i8 %18, %15
  %20 = or i8 %19, 72
  %21 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %21, i8** %5, align 8
  store i8 %20, i8* %14, align 1
  %22 = load i8*, i8** %5, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %5, align 8
  store i8 15, i8* %22, align 1
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 -67, i8* %24, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4bsflENS0_8RegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %11, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %11

11:                                               ; preds = %3, %10
  %12 = ashr i32 %1, 3
  %13 = shl nsw i32 %12, 2
  %14 = ashr i32 %2, 3
  %15 = or i32 %13, %14
  %16 = and i32 %15, 255
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %23, label %18

18:                                               ; preds = %11
  %19 = trunc i32 %15 to i8
  %20 = or i8 %19, 64
  %21 = load i8*, i8** %4, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %4, align 8
  store i8 %20, i8* %21, align 1
  br label %23

23:                                               ; preds = %11, %18
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 15, i8* %24, align 1
  %26 = load i8*, i8** %4, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %4, align 8
  store i8 -68, i8* %26, align 1
  %28 = shl i32 %1, 3
  %29 = and i32 %2, 7
  %30 = or i32 %29, %28
  %31 = trunc i32 %30 to i8
  %32 = or i8 %31, -64
  %33 = load i8*, i8** %4, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %4, align 8
  store i8 %32, i8* %33, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4bsflENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %4, %11
  %13 = trunc i64 %2 to i8
  %14 = lshr i32 %1, 1
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, -4
  %17 = or i8 %16, %13
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %12
  %20 = or i8 %17, 64
  %21 = load i8*, i8** %5, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %5, align 8
  store i8 %20, i8* %21, align 1
  br label %23

23:                                               ; preds = %12, %19
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 15, i8* %24, align 1
  %26 = load i8*, i8** %5, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %5, align 8
  store i8 -68, i8* %26, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4bsfqENS0_8RegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = ashr i32 %1, 3
  %15 = shl nsw i32 %14, 2
  %16 = lshr i32 %2, 3
  %17 = or i32 %15, %16
  %18 = trunc i32 %17 to i8
  %19 = or i8 %18, 72
  %20 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %20, i8** %4, align 8
  store i8 %19, i8* %13, align 1
  %21 = load i8*, i8** %4, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %4, align 8
  store i8 15, i8* %21, align 1
  %23 = load i8*, i8** %4, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %4, align 8
  store i8 -68, i8* %23, align 1
  %25 = shl i32 %1, 3
  %26 = and i32 %2, 7
  %27 = or i32 %26, %25
  %28 = trunc i32 %27 to i8
  %29 = or i8 %28, -64
  %30 = load i8*, i8** %4, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %4, align 8
  store i8 %29, i8* %30, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4bsfqENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = trunc i64 %2 to i8
  %16 = lshr i32 %1, 1
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, -76
  %19 = or i8 %18, %15
  %20 = or i8 %19, 72
  %21 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %21, i8** %5, align 8
  store i8 %20, i8* %14, align 1
  %22 = load i8*, i8** %5, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %5, align 8
  store i8 15, i8* %22, align 1
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 -68, i8* %24, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7pblendwENS0_11XMMRegisterENS0_7OperandEh(%"class.v8::internal::Assembler"*, i32, i64, i32, i8 zeroext) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %14, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %13 = load i8*, i8** %6, align 8
  br label %14

14:                                               ; preds = %12, %5
  %15 = phi i8* [ %7, %5 ], [ %13, %12 ]
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %16, i8** %6, align 8
  store i8 102, i8* %15, align 1
  %17 = trunc i64 %2 to i8
  %18 = lshr i32 %1, 1
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 4
  %21 = or i8 %20, %17
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %27, label %23

23:                                               ; preds = %14
  %24 = or i8 %21, 64
  %25 = load i8*, i8** %6, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %6, align 8
  store i8 %24, i8* %25, align 1
  br label %27

27:                                               ; preds = %14, %23
  %28 = load i8*, i8** %6, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %6, align 8
  store i8 15, i8* %28, align 1
  %30 = load i8*, i8** %6, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %6, align 8
  store i8 58, i8* %30, align 1
  %32 = load i8*, i8** %6, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %6, align 8
  store i8 14, i8* %32, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  %34 = load i8*, i8** %6, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %6, align 8
  store i8 %4, i8* %34, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler10sse4_instrENS0_11XMMRegisterENS0_7OperandEhhhh(%"class.v8::internal::Assembler"*, i32, i64, i32, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext) local_unnamed_addr #1 align 2 {
  %9 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 -32
  %14 = icmp ult i8* %10, %13
  br i1 %14, label %17, label %15, !prof !11

15:                                               ; preds = %8
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %16 = load i8*, i8** %9, align 8
  br label %17

17:                                               ; preds = %8, %15
  %18 = phi i8* [ %10, %8 ], [ %16, %15 ]
  %19 = getelementptr inbounds i8, i8* %18, i64 1
  store i8* %19, i8** %9, align 8
  store i8 %4, i8* %18, align 1
  %20 = trunc i64 %2 to i8
  %21 = lshr i32 %1, 1
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 4
  %24 = or i8 %23, %20
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %30, label %26

26:                                               ; preds = %17
  %27 = or i8 %24, 64
  %28 = load i8*, i8** %9, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %9, align 8
  store i8 %27, i8* %28, align 1
  br label %30

30:                                               ; preds = %17, %26
  %31 = load i8*, i8** %9, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %32, i8** %9, align 8
  store i8 %5, i8* %31, align 1
  %33 = load i8*, i8** %9, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %9, align 8
  store i8 %6, i8* %33, align 1
  %35 = load i8*, i8** %9, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 1
  store i8* %36, i8** %9, align 8
  store i8 %7, i8* %35, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7pblendwENS0_11XMMRegisterES2_h(%"class.v8::internal::Assembler"* nocapture, i32, i32, i8 zeroext) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %11, %4
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 102, i8* %14, align 1
  %16 = lshr i32 %1, 1
  %17 = and i32 %16, 4
  %18 = lshr i32 %2, 3
  %19 = and i32 %18, 1
  %20 = or i32 %19, %17
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %13
  %23 = trunc i32 %20 to i8
  %24 = or i8 %23, 64
  %25 = load i8*, i8** %5, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %5, align 8
  store i8 %24, i8* %25, align 1
  br label %27

27:                                               ; preds = %13, %22
  %28 = load i8*, i8** %5, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %5, align 8
  store i8 15, i8* %28, align 1
  %30 = load i8*, i8** %5, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %5, align 8
  store i8 58, i8* %30, align 1
  %32 = load i8*, i8** %5, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %5, align 8
  store i8 14, i8* %32, align 1
  %34 = shl i32 %1, 3
  %35 = and i32 %2, 7
  %36 = or i32 %35, %34
  %37 = trunc i32 %36 to i8
  %38 = or i8 %37, -64
  %39 = load i8*, i8** %5, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  store i8* %40, i8** %5, align 8
  store i8 %38, i8* %39, align 1
  %41 = load i8*, i8** %5, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %42, i8** %5, align 8
  store i8 %3, i8* %41, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler10sse4_instrENS0_11XMMRegisterES2_hhhh(%"class.v8::internal::Assembler"*, i32, i32, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext) local_unnamed_addr #1 align 2 {
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 -32
  %13 = icmp ult i8* %9, %12
  br i1 %13, label %16, label %14, !prof !11

14:                                               ; preds = %7
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %15 = load i8*, i8** %8, align 8
  br label %16

16:                                               ; preds = %7, %14
  %17 = phi i8* [ %9, %7 ], [ %15, %14 ]
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %8, align 8
  store i8 %3, i8* %17, align 1
  %19 = lshr i32 %1, 1
  %20 = and i32 %19, 4
  %21 = lshr i32 %2, 3
  %22 = and i32 %21, 1
  %23 = or i32 %22, %20
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %30, label %25

25:                                               ; preds = %16
  %26 = trunc i32 %23 to i8
  %27 = or i8 %26, 64
  %28 = load i8*, i8** %8, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %8, align 8
  store i8 %27, i8* %28, align 1
  br label %30

30:                                               ; preds = %16, %25
  %31 = load i8*, i8** %8, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %32, i8** %8, align 8
  store i8 %4, i8* %31, align 1
  %33 = load i8*, i8** %8, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %8, align 8
  store i8 %5, i8* %33, align 1
  %35 = load i8*, i8** %8, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 1
  store i8* %36, i8** %8, align 8
  store i8 %6, i8* %35, align 1
  %37 = shl i32 %1, 3
  %38 = and i32 %2, 7
  %39 = or i32 %38, %37
  %40 = trunc i32 %39 to i8
  %41 = or i8 %40, -64
  %42 = load i8*, i8** %8, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 1
  store i8* %43, i8** %8, align 8
  store i8 %41, i8* %42, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7palignrENS0_11XMMRegisterENS0_7OperandEh(%"class.v8::internal::Assembler"*, i32, i64, i32, i8 zeroext) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %14, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %13 = load i8*, i8** %6, align 8
  br label %14

14:                                               ; preds = %12, %5
  %15 = phi i8* [ %7, %5 ], [ %13, %12 ]
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %16, i8** %6, align 8
  store i8 102, i8* %15, align 1
  %17 = trunc i64 %2 to i8
  %18 = lshr i32 %1, 1
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 4
  %21 = or i8 %20, %17
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %27, label %23

23:                                               ; preds = %14
  %24 = or i8 %21, 64
  %25 = load i8*, i8** %6, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %6, align 8
  store i8 %24, i8* %25, align 1
  br label %27

27:                                               ; preds = %14, %23
  %28 = load i8*, i8** %6, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %6, align 8
  store i8 15, i8* %28, align 1
  %30 = load i8*, i8** %6, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %6, align 8
  store i8 58, i8* %30, align 1
  %32 = load i8*, i8** %6, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %6, align 8
  store i8 15, i8* %32, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  %34 = load i8*, i8** %6, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %6, align 8
  store i8 %4, i8* %34, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler11ssse3_instrENS0_11XMMRegisterENS0_7OperandEhhhh(%"class.v8::internal::Assembler"*, i32, i64, i32, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext) local_unnamed_addr #1 align 2 {
  %9 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 -32
  %14 = icmp ult i8* %10, %13
  br i1 %14, label %17, label %15, !prof !11

15:                                               ; preds = %8
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %16 = load i8*, i8** %9, align 8
  br label %17

17:                                               ; preds = %8, %15
  %18 = phi i8* [ %10, %8 ], [ %16, %15 ]
  %19 = getelementptr inbounds i8, i8* %18, i64 1
  store i8* %19, i8** %9, align 8
  store i8 %4, i8* %18, align 1
  %20 = trunc i64 %2 to i8
  %21 = lshr i32 %1, 1
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 4
  %24 = or i8 %23, %20
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %30, label %26

26:                                               ; preds = %17
  %27 = or i8 %24, 64
  %28 = load i8*, i8** %9, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %9, align 8
  store i8 %27, i8* %28, align 1
  br label %30

30:                                               ; preds = %17, %26
  %31 = load i8*, i8** %9, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %32, i8** %9, align 8
  store i8 %5, i8* %31, align 1
  %33 = load i8*, i8** %9, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %9, align 8
  store i8 %6, i8* %33, align 1
  %35 = load i8*, i8** %9, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 1
  store i8* %36, i8** %9, align 8
  store i8 %7, i8* %35, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7palignrENS0_11XMMRegisterES2_h(%"class.v8::internal::Assembler"* nocapture, i32, i32, i8 zeroext) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %11, %4
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 102, i8* %14, align 1
  %16 = lshr i32 %1, 1
  %17 = and i32 %16, 4
  %18 = lshr i32 %2, 3
  %19 = and i32 %18, 1
  %20 = or i32 %19, %17
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %13
  %23 = trunc i32 %20 to i8
  %24 = or i8 %23, 64
  %25 = load i8*, i8** %5, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %5, align 8
  store i8 %24, i8* %25, align 1
  br label %27

27:                                               ; preds = %13, %22
  %28 = load i8*, i8** %5, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %5, align 8
  store i8 15, i8* %28, align 1
  %30 = load i8*, i8** %5, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %5, align 8
  store i8 58, i8* %30, align 1
  %32 = load i8*, i8** %5, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %5, align 8
  store i8 15, i8* %32, align 1
  %34 = shl i32 %1, 3
  %35 = and i32 %2, 7
  %36 = or i32 %35, %34
  %37 = trunc i32 %36 to i8
  %38 = or i8 %37, -64
  %39 = load i8*, i8** %5, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  store i8* %40, i8** %5, align 8
  store i8 %38, i8* %39, align 1
  %41 = load i8*, i8** %5, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %42, i8** %5, align 8
  store i8 %3, i8* %41, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler11ssse3_instrENS0_11XMMRegisterES2_hhhh(%"class.v8::internal::Assembler"*, i32, i32, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext) local_unnamed_addr #1 align 2 {
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 -32
  %13 = icmp ult i8* %9, %12
  br i1 %13, label %16, label %14, !prof !11

14:                                               ; preds = %7
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %15 = load i8*, i8** %8, align 8
  br label %16

16:                                               ; preds = %7, %14
  %17 = phi i8* [ %9, %7 ], [ %15, %14 ]
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %8, align 8
  store i8 %3, i8* %17, align 1
  %19 = lshr i32 %1, 1
  %20 = and i32 %19, 4
  %21 = lshr i32 %2, 3
  %22 = and i32 %21, 1
  %23 = or i32 %22, %20
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %30, label %25

25:                                               ; preds = %16
  %26 = trunc i32 %23 to i8
  %27 = or i8 %26, 64
  %28 = load i8*, i8** %8, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %8, align 8
  store i8 %27, i8* %28, align 1
  br label %30

30:                                               ; preds = %16, %25
  %31 = load i8*, i8** %8, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %32, i8** %8, align 8
  store i8 %4, i8* %31, align 1
  %33 = load i8*, i8** %8, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %8, align 8
  store i8 %5, i8* %33, align 1
  %35 = load i8*, i8** %8, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 1
  store i8* %36, i8** %8, align 8
  store i8 %6, i8* %35, align 1
  %37 = shl i32 %1, 3
  %38 = and i32 %2, 7
  %39 = or i32 %38, %37
  %40 = trunc i32 %39 to i8
  %41 = or i8 %40, -64
  %42 = load i8*, i8** %8, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 1
  store i8* %43, i8** %8, align 8
  store i8 %41, i8* %42, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4callEPNS0_5LabelE(%"class.v8::internal::Assembler"*, %"class.v8::internal::Label"* nocapture) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %11, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %10 = load i8*, i8** %3, align 8
  br label %11

11:                                               ; preds = %2, %9
  %12 = phi i8* [ %4, %2 ], [ %10, %9 ]
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  store i8* %13, i8** %3, align 8
  store i8 -24, i8* %12, align 1
  %14 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %1, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %17, label %30

17:                                               ; preds = %11
  %18 = bitcast i8** %3 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %21 = bitcast i8** %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %19, %22
  %24 = trunc i64 %23 to i32
  %25 = sub nsw i32 -5, %15
  %26 = sub i32 %25, %24
  %27 = inttoptr i64 %19 to i32*
  store i32 %26, i32* %27, align 1
  %28 = load i8*, i8** %3, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 4
  store i8* %29, i8** %3, align 8
  br label %57

30:                                               ; preds = %11
  %31 = icmp eq i32 %15, 0
  br i1 %31, label %45, label %32

32:                                               ; preds = %30
  %33 = add nsw i32 %15, -1
  %34 = bitcast i8** %3 to i32**
  %35 = load i32*, i32** %34, align 8
  store i32 %33, i32* %35, align 1
  %36 = load i8*, i8** %3, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 4
  store i8* %37, i8** %3, align 8
  %38 = ptrtoint i8* %37 to i64
  %39 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %40 = bitcast i8** %39 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %38, %41
  %43 = trunc i64 %42 to i32
  %44 = add i32 %43, -3
  store i32 %44, i32* %14, align 4
  br label %57

45:                                               ; preds = %30
  %46 = bitcast i8** %3 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %49 = bitcast i8** %48 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = sub i64 %47, %50
  %52 = trunc i64 %51 to i32
  %53 = inttoptr i64 %47 to i32*
  store i32 %52, i32* %53, align 1
  %54 = load i8*, i8** %3, align 8
  %55 = getelementptr inbounds i8, i8* %54, i64 4
  store i8* %55, i8** %3, align 8
  %56 = add nsw i32 %52, 1
  store i32 %56, i32* %14, align 4
  br label %57

57:                                               ; preds = %32, %45, %17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4callEmNS0_9RelocInfo4ModeE(%"class.v8::internal::Assembler"*, i64, i8 signext) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::RelocInfo", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %3, %11
  %14 = phi i8* [ %6, %3 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -24, i8* %14, align 1
  %16 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 1
  %17 = load i8, i8* %16, align 1, !range !2
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %19, label %33

19:                                               ; preds = %13
  switch i8 %2, label %24 [
    i8 12, label %20
    i8 9, label %20
  ]

20:                                               ; preds = %19, %19
  %21 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 0
  %22 = load i8, i8* %21, align 8, !range !2
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %33, label %24

24:                                               ; preds = %20, %19
  %25 = bitcast %"class.v8::internal::RelocInfo"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %25) #14
  %26 = bitcast i8** %5 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 0
  store i64 %27, i64* %28, align 8
  %29 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 1
  store i8 %2, i8* %29, align 8
  %30 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 2
  %31 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1
  %32 = bitcast i64* %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 24, i1 false) #14
  call void @_ZN2v88internal15RelocInfoWriter5WriteEPKNS0_9RelocInfoE(%"class.v8::internal::RelocInfoWriter"* %31, %"class.v8::internal::RelocInfo"* nonnull %4) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %25) #14
  br label %33

33:                                               ; preds = %13, %20, %24
  %34 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 8
  %35 = load i64, i64* %34, align 8
  %36 = sub i64 %1, %35
  %37 = trunc i64 %36 to i32
  %38 = bitcast i8** %5 to i32**
  %39 = load i32*, i32** %38, align 8
  store i32 %37, i32* %39, align 1
  %40 = load i8*, i8** %5, align 8
  %41 = getelementptr inbounds i8, i8* %40, i64 4
  store i8* %41, i8** %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4callENS0_6HandleINS0_4CodeEEENS0_9RelocInfo4ModeE(%"class.v8::internal::Assembler"*, i64*, i8 signext) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::RelocInfo", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %3, %11
  %14 = phi i8* [ %6, %3 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -24, i8* %14, align 1
  %16 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 1
  %17 = load i8, i8* %16, align 1, !range !2
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %19, label %33

19:                                               ; preds = %13
  switch i8 %2, label %24 [
    i8 12, label %20
    i8 9, label %20
  ]

20:                                               ; preds = %19, %19
  %21 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 0
  %22 = load i8, i8* %21, align 8, !range !2
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %33, label %24

24:                                               ; preds = %20, %19
  %25 = bitcast %"class.v8::internal::RelocInfo"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %25) #14
  %26 = bitcast i8** %5 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 0
  store i64 %27, i64* %28, align 8
  %29 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 1
  store i8 %2, i8* %29, align 8
  %30 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 2
  %31 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1
  %32 = bitcast i64* %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 24, i1 false)
  call void @_ZN2v88internal15RelocInfoWriter5WriteEPKNS0_9RelocInfoE(%"class.v8::internal::RelocInfoWriter"* %31, %"class.v8::internal::RelocInfo"* nonnull %4) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %25) #14
  br label %33

33:                                               ; preds = %13, %20, %24
  %34 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0
  %35 = call i32 @_ZN2v88internal13AssemblerBase13AddCodeTargetENS0_6HandleINS0_4CodeEEE(%"class.v8::internal::AssemblerBase"* %34, i64* %1) #14
  %36 = bitcast i8** %5 to i32**
  %37 = load i32*, i32** %36, align 8
  store i32 %35, i32* %37, align 1
  %38 = load i8*, i8** %5, align 8
  %39 = getelementptr inbounds i8, i8* %38, i64 4
  store i8* %39, i8** %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler15RecordRelocInfoENS0_9RelocInfo4ModeEl(%"class.v8::internal::Assembler"*, i8 signext, i64) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::RelocInfo", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 1
  %6 = load i8, i8* %5, align 1, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %24

8:                                                ; preds = %3
  switch i8 %1, label %13 [
    i8 12, label %9
    i8 9, label %9
  ]

9:                                                ; preds = %8, %8
  %10 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 0
  %11 = load i8, i8* %10, align 8, !range !2
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %24, label %13

13:                                               ; preds = %9, %8
  %14 = bitcast %"class.v8::internal::RelocInfo"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %14) #14
  %15 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %16 = bitcast i8** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 0
  store i64 %17, i64* %18, align 8
  %19 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 1
  store i8 %1, i8* %19, align 8
  %20 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 2
  store i64 %2, i64* %20, align 8
  %21 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %22 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1
  %23 = bitcast i64* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 16, i1 false)
  call void @_ZN2v88internal15RelocInfoWriter5WriteEPKNS0_9RelocInfoE(%"class.v8::internal::RelocInfoWriter"* %22, %"class.v8::internal::RelocInfo"* nonnull %4) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %14) #14
  br label %24

24:                                               ; preds = %9, %3, %13
  ret void
}

declare i32 @_ZN2v88internal13AssemblerBase13AddCodeTargetENS0_6HandleINS0_4CodeEEE(%"class.v8::internal::AssemblerBase"*, i64*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9near_callElNS0_9RelocInfo4ModeE(%"class.v8::internal::Assembler"*, i64, i8 signext) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::RelocInfo", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %3, %11
  %14 = phi i8* [ %6, %3 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -24, i8* %14, align 1
  %16 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 1
  %17 = load i8, i8* %16, align 1, !range !2
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %19, label %33

19:                                               ; preds = %13
  switch i8 %2, label %24 [
    i8 12, label %20
    i8 9, label %20
  ]

20:                                               ; preds = %19, %19
  %21 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 0
  %22 = load i8, i8* %21, align 8, !range !2
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %33, label %24

24:                                               ; preds = %20, %19
  %25 = bitcast %"class.v8::internal::RelocInfo"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %25) #14
  %26 = bitcast i8** %5 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 0
  store i64 %27, i64* %28, align 8
  %29 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 1
  store i8 %2, i8* %29, align 8
  %30 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 2
  %31 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1
  %32 = bitcast i64* %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 24, i1 false)
  call void @_ZN2v88internal15RelocInfoWriter5WriteEPKNS0_9RelocInfoE(%"class.v8::internal::RelocInfoWriter"* %31, %"class.v8::internal::RelocInfo"* nonnull %4) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %25) #14
  br label %33

33:                                               ; preds = %13, %20, %24
  %34 = trunc i64 %1 to i32
  %35 = bitcast i8** %5 to i32**
  %36 = load i32*, i32** %35, align 8
  store i32 %34, i32* %36, align 1
  %37 = load i8*, i8** %5, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 4
  store i8* %38, i8** %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8near_jmpElNS0_9RelocInfo4ModeE(%"class.v8::internal::Assembler"*, i64, i8 signext) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::RelocInfo", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %3, %11
  %14 = phi i8* [ %6, %3 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -23, i8* %14, align 1
  %16 = icmp eq i8 %2, 0
  br i1 %16, label %35, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 1
  %19 = load i8, i8* %18, align 1, !range !2
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %21, label %35

21:                                               ; preds = %17
  switch i8 %2, label %26 [
    i8 12, label %22
    i8 9, label %22
  ]

22:                                               ; preds = %21, %21
  %23 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 0
  %24 = load i8, i8* %23, align 8, !range !2
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %35, label %26

26:                                               ; preds = %22, %21
  %27 = bitcast %"class.v8::internal::RelocInfo"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %27) #14
  %28 = bitcast i8** %5 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 0
  store i64 %29, i64* %30, align 8
  %31 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 1
  store i8 %2, i8* %31, align 8
  %32 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 2
  %33 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1
  %34 = bitcast i64* %32 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %34, i8 0, i64 24, i1 false)
  call void @_ZN2v88internal15RelocInfoWriter5WriteEPKNS0_9RelocInfoE(%"class.v8::internal::RelocInfoWriter"* %33, %"class.v8::internal::RelocInfo"* nonnull %4) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %27) #14
  br label %35

35:                                               ; preds = %26, %22, %17, %13
  %36 = trunc i64 %1 to i32
  %37 = bitcast i8** %5 to i32**
  %38 = load i32*, i32** %37, align 8
  store i32 %36, i32* %38, align 1
  %39 = load i8*, i8** %5, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 4
  store i8* %40, i8** %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4callENS0_8RegisterE(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %10, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %10

10:                                               ; preds = %2, %9
  %11 = icmp ult i32 %1, 8
  br i1 %11, label %15, label %12

12:                                               ; preds = %10
  %13 = load i8*, i8** %3, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %3, align 8
  store i8 65, i8* %13, align 1
  br label %15

15:                                               ; preds = %10, %12
  %16 = load i8*, i8** %3, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %17, i8** %3, align 8
  store i8 -1, i8* %16, align 1
  %18 = trunc i32 %1 to i8
  %19 = and i8 %18, 7
  %20 = or i8 %19, -48
  %21 = load i8*, i8** %3, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %3, align 8
  store i8 %20, i8* %21, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4callENS0_7OperandE(%"class.v8::internal::Assembler"*, i64, i32) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::Operand", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %3, %11
  %13 = trunc i64 %1 to i8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %12
  %16 = or i8 %13, 64
  %17 = load i8*, i8** %5, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %5, align 8
  store i8 %16, i8* %17, align 1
  br label %19

19:                                               ; preds = %12, %15
  %20 = load i8*, i8** %5, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 1
  store i8* %21, i8** %5, align 8
  store i8 -1, i8* %20, align 1
  %22 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %22)
  %23 = bitcast %"class.v8::internal::Operand"* %4 to i64*
  store i64 %1, i64* %23, align 8
  %24 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 7
  %25 = bitcast i8* %24 to i32*
  store i32 %2, i32* %25, align 1
  %26 = lshr i32 %2, 16
  %27 = and i32 %26, 255
  %28 = lshr i64 %1, 8
  %29 = trunc i64 %28 to i8
  %30 = or i8 %29, 16
  %31 = load i8*, i8** %5, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %32, i8** %5, align 8
  store i8 %30, i8* %31, align 1
  %33 = icmp eq i8 %29, 5
  %34 = lshr i64 %1, 16
  %35 = trunc i64 %34 to i8
  br i1 %33, label %51, label %36

36:                                               ; preds = %19
  %37 = trunc i32 %26 to i8
  %38 = icmp ugt i8 %37, 1
  br i1 %38, label %39, label %138

39:                                               ; preds = %36
  %40 = zext i32 %27 to i64
  %41 = load i8*, i8** %5, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %42, i8** %5, align 8
  store i8 %35, i8* %41, align 1
  %43 = icmp eq i32 %27, 2
  br i1 %43, label %138, label %44

44:                                               ; preds = %39
  %45 = add nsw i64 %40, -2
  %46 = add nsw i64 %40, -3
  %47 = and i64 %45, 3
  %48 = icmp ult i64 %46, 3
  br i1 %48, label %125, label %49

49:                                               ; preds = %44
  %50 = sub nsw i64 %45, %47
  br label %100

51:                                               ; preds = %19
  %52 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 1
  %53 = bitcast i8* %52 to %"class.v8::internal::Label"**
  %54 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %53, align 1
  %55 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %54, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = icmp slt i32 %56, 0
  br i1 %57, label %58, label %73

58:                                               ; preds = %51
  %59 = bitcast i8** %5 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %62 = bitcast i8** %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = sub i64 %60, %63
  %65 = trunc i64 %64 to i32
  %66 = ashr i32 %2, 24
  %67 = add nsw i32 %66, -5
  %68 = sub i32 %67, %56
  %69 = sub i32 %68, %65
  %70 = inttoptr i64 %60 to i32*
  store i32 %69, i32* %70, align 1
  %71 = load i8*, i8** %5, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 4
  store i8* %72, i8** %5, align 8
  br label %138

73:                                               ; preds = %51
  %74 = icmp eq i32 %56, 0
  br i1 %74, label %88, label %75

75:                                               ; preds = %73
  %76 = add nsw i32 %56, -1
  %77 = bitcast i8** %5 to i32**
  %78 = load i32*, i32** %77, align 8
  store i32 %76, i32* %78, align 1
  %79 = load i8*, i8** %5, align 8
  %80 = getelementptr inbounds i8, i8* %79, i64 4
  store i8* %80, i8** %5, align 8
  %81 = ptrtoint i8* %80 to i64
  %82 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %83 = bitcast i8** %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = sub i64 %81, %84
  %86 = trunc i64 %85 to i32
  %87 = add i32 %86, -3
  store i32 %87, i32* %55, align 4
  br label %138

88:                                               ; preds = %73
  %89 = bitcast i8** %5 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %92 = bitcast i8** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = sub i64 %90, %93
  %95 = trunc i64 %94 to i32
  %96 = inttoptr i64 %90 to i32*
  store i32 %95, i32* %96, align 1
  %97 = load i8*, i8** %5, align 8
  %98 = getelementptr inbounds i8, i8* %97, i64 4
  store i8* %98, i8** %5, align 8
  %99 = add nsw i32 %95, 1
  store i32 %99, i32* %55, align 4
  br label %138

100:                                              ; preds = %100, %49
  %101 = phi i64 [ 2, %49 ], [ %122, %100 ]
  %102 = phi i64 [ %50, %49 ], [ %123, %100 ]
  %103 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %101
  %104 = load i8, i8* %103, align 1
  %105 = load i8*, i8** %5, align 8
  %106 = getelementptr inbounds i8, i8* %105, i64 1
  store i8* %106, i8** %5, align 8
  store i8 %104, i8* %105, align 1
  %107 = or i64 %101, 1
  %108 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = load i8*, i8** %5, align 8
  %111 = getelementptr inbounds i8, i8* %110, i64 1
  store i8* %111, i8** %5, align 8
  store i8 %109, i8* %110, align 1
  %112 = add nuw nsw i64 %101, 2
  %113 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = load i8*, i8** %5, align 8
  %116 = getelementptr inbounds i8, i8* %115, i64 1
  store i8* %116, i8** %5, align 8
  store i8 %114, i8* %115, align 1
  %117 = add nuw nsw i64 %101, 3
  %118 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = load i8*, i8** %5, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 1
  store i8* %121, i8** %5, align 8
  store i8 %119, i8* %120, align 1
  %122 = add nuw nsw i64 %101, 4
  %123 = add i64 %102, -4
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %100

125:                                              ; preds = %100, %44
  %126 = phi i64 [ 2, %44 ], [ %122, %100 ]
  %127 = icmp eq i64 %47, 0
  br i1 %127, label %138, label %128

128:                                              ; preds = %125, %128
  %129 = phi i64 [ %135, %128 ], [ %126, %125 ]
  %130 = phi i64 [ %136, %128 ], [ %47, %125 ]
  %131 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %129
  %132 = load i8, i8* %131, align 1
  %133 = load i8*, i8** %5, align 8
  %134 = getelementptr inbounds i8, i8* %133, i64 1
  store i8* %134, i8** %5, align 8
  store i8 %132, i8* %133, align 1
  %135 = add nuw nsw i64 %129, 1
  %136 = add i64 %130, -1
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %128, !llvm.loop !26

138:                                              ; preds = %125, %128, %39, %36, %58, %75, %88
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %22)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler3clcEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -8, i8* %11, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler3cldEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -4, i8* %11, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler3cdqEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -103, i8* %11, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5cmovqENS0_9ConditionENS0_8RegisterES3_(%"class.v8::internal::Assembler"*, i32, i32, i32) local_unnamed_addr #1 align 2 {
  switch i32 %1, label %51 [
    i32 16, label %5
    i32 17, label %82
  ]

5:                                                ; preds = %4
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %13, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %13

13:                                               ; preds = %12, %5
  %14 = and i32 %3, 7
  %15 = icmp eq i32 %14, 4
  br i1 %15, label %16, label %34

16:                                               ; preds = %13
  %17 = ashr i32 %3, 3
  %18 = shl nsw i32 %17, 2
  %19 = lshr i32 %2, 3
  %20 = or i32 %18, %19
  %21 = trunc i32 %20 to i8
  %22 = or i8 %21, 72
  %23 = load i8*, i8** %6, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %6, align 8
  store i8 %22, i8* %23, align 1
  %25 = load i8*, i8** %6, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %6, align 8
  store i8 -119, i8* %25, align 1
  %27 = shl i32 %3, 3
  %28 = and i32 %2, 7
  %29 = or i32 %27, %28
  %30 = trunc i32 %29 to i8
  %31 = or i8 %30, -64
  %32 = load i8*, i8** %6, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %6, align 8
  store i8 %31, i8* %32, align 1
  br label %51

34:                                               ; preds = %13
  %35 = ashr i32 %2, 3
  %36 = shl nsw i32 %35, 2
  %37 = lshr i32 %3, 3
  %38 = or i32 %36, %37
  %39 = trunc i32 %38 to i8
  %40 = or i8 %39, 72
  %41 = load i8*, i8** %6, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %42, i8** %6, align 8
  store i8 %40, i8* %41, align 1
  %43 = load i8*, i8** %6, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 1
  store i8* %44, i8** %6, align 8
  store i8 -117, i8* %43, align 1
  %45 = shl i32 %2, 3
  %46 = or i32 %14, %45
  %47 = trunc i32 %46 to i8
  %48 = or i8 %47, -64
  %49 = load i8*, i8** %6, align 8
  %50 = getelementptr inbounds i8, i8* %49, i64 1
  store i8* %50, i8** %6, align 8
  store i8 %48, i8* %49, align 1
  br label %51

51:                                               ; preds = %34, %16, %4
  %52 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %53 = load i8*, i8** %52, align 8
  %54 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds i8, i8* %55, i64 -32
  %57 = icmp ult i8* %53, %56
  br i1 %57, label %60, label %58, !prof !11

58:                                               ; preds = %51
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %59 = load i8*, i8** %52, align 8
  br label %60

60:                                               ; preds = %51, %58
  %61 = phi i8* [ %53, %51 ], [ %59, %58 ]
  %62 = ashr i32 %2, 3
  %63 = shl nsw i32 %62, 2
  %64 = lshr i32 %3, 3
  %65 = or i32 %63, %64
  %66 = trunc i32 %65 to i8
  %67 = or i8 %66, 72
  %68 = getelementptr inbounds i8, i8* %61, i64 1
  store i8* %68, i8** %52, align 8
  store i8 %67, i8* %61, align 1
  %69 = load i8*, i8** %52, align 8
  %70 = getelementptr inbounds i8, i8* %69, i64 1
  store i8* %70, i8** %52, align 8
  store i8 15, i8* %69, align 1
  %71 = trunc i32 %1 to i8
  %72 = add i8 %71, 64
  %73 = load i8*, i8** %52, align 8
  %74 = getelementptr inbounds i8, i8* %73, i64 1
  store i8* %74, i8** %52, align 8
  store i8 %72, i8* %73, align 1
  %75 = shl i32 %2, 3
  %76 = and i32 %3, 7
  %77 = or i32 %76, %75
  %78 = trunc i32 %77 to i8
  %79 = or i8 %78, -64
  %80 = load i8*, i8** %52, align 8
  %81 = getelementptr inbounds i8, i8* %80, i64 1
  store i8* %81, i8** %52, align 8
  store i8 %79, i8* %80, align 1
  br label %82

82:                                               ; preds = %4, %60
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5cmovqENS0_9ConditionENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i32, i64, i32) local_unnamed_addr #1 align 2 {
  switch i32 %1, label %26 [
    i32 16, label %6
    i32 17, label %50
  ]

6:                                                ; preds = %5
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 -32
  %12 = icmp ult i8* %8, %11
  br i1 %12, label %15, label %13, !prof !11

13:                                               ; preds = %6
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %14 = load i8*, i8** %7, align 8
  br label %15

15:                                               ; preds = %6, %13
  %16 = phi i8* [ %8, %6 ], [ %14, %13 ]
  %17 = trunc i64 %3 to i8
  %18 = lshr i32 %2, 1
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, -76
  %21 = or i8 %20, %17
  %22 = or i8 %21, 72
  %23 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %23, i8** %7, align 8
  store i8 %22, i8* %16, align 1
  %24 = load i8*, i8** %7, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %7, align 8
  store i8 -117, i8* %24, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %2, i64 %3, i32 %4) #14
  br label %26

26:                                               ; preds = %5, %15
  %27 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 -32
  %32 = icmp ult i8* %28, %31
  br i1 %32, label %35, label %33, !prof !11

33:                                               ; preds = %26
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %34 = load i8*, i8** %27, align 8
  br label %35

35:                                               ; preds = %26, %33
  %36 = phi i8* [ %28, %26 ], [ %34, %33 ]
  %37 = trunc i64 %3 to i8
  %38 = lshr i32 %2, 1
  %39 = trunc i32 %38 to i8
  %40 = and i8 %39, -76
  %41 = or i8 %40, %37
  %42 = or i8 %41, 72
  %43 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %43, i8** %27, align 8
  store i8 %42, i8* %36, align 1
  %44 = load i8*, i8** %27, align 8
  %45 = getelementptr inbounds i8, i8* %44, i64 1
  store i8* %45, i8** %27, align 8
  store i8 15, i8* %44, align 1
  %46 = trunc i32 %1 to i8
  %47 = add i8 %46, 64
  %48 = load i8*, i8** %27, align 8
  %49 = getelementptr inbounds i8, i8* %48, i64 1
  store i8* %49, i8** %27, align 8
  store i8 %47, i8* %48, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %2, i64 %3, i32 %4)
  br label %50

50:                                               ; preds = %5, %35
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5cmovlENS0_9ConditionENS0_8RegisterES3_(%"class.v8::internal::Assembler"*, i32, i32, i32) local_unnamed_addr #1 align 2 {
  switch i32 %1, label %59 [
    i32 16, label %5
    i32 17, label %93
  ]

5:                                                ; preds = %4
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %13, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %13

13:                                               ; preds = %12, %5
  %14 = and i32 %3, 7
  %15 = icmp eq i32 %14, 4
  br i1 %15, label %16, label %38

16:                                               ; preds = %13
  %17 = ashr i32 %3, 3
  %18 = shl nsw i32 %17, 2
  %19 = ashr i32 %2, 3
  %20 = or i32 %18, %19
  %21 = and i32 %20, 255
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %28, label %23

23:                                               ; preds = %16
  %24 = trunc i32 %20 to i8
  %25 = or i8 %24, 64
  %26 = load i8*, i8** %6, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %6, align 8
  store i8 %25, i8* %26, align 1
  br label %28

28:                                               ; preds = %23, %16
  %29 = load i8*, i8** %6, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %6, align 8
  store i8 -119, i8* %29, align 1
  %31 = shl i32 %3, 3
  %32 = and i32 %2, 7
  %33 = or i32 %31, %32
  %34 = trunc i32 %33 to i8
  %35 = or i8 %34, -64
  %36 = load i8*, i8** %6, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %6, align 8
  store i8 %35, i8* %36, align 1
  br label %59

38:                                               ; preds = %13
  %39 = ashr i32 %2, 3
  %40 = shl nsw i32 %39, 2
  %41 = ashr i32 %3, 3
  %42 = or i32 %40, %41
  %43 = and i32 %42, 255
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %50, label %45

45:                                               ; preds = %38
  %46 = trunc i32 %42 to i8
  %47 = or i8 %46, 64
  %48 = load i8*, i8** %6, align 8
  %49 = getelementptr inbounds i8, i8* %48, i64 1
  store i8* %49, i8** %6, align 8
  store i8 %47, i8* %48, align 1
  br label %50

50:                                               ; preds = %45, %38
  %51 = load i8*, i8** %6, align 8
  %52 = getelementptr inbounds i8, i8* %51, i64 1
  store i8* %52, i8** %6, align 8
  store i8 -117, i8* %51, align 1
  %53 = shl i32 %2, 3
  %54 = or i32 %14, %53
  %55 = trunc i32 %54 to i8
  %56 = or i8 %55, -64
  %57 = load i8*, i8** %6, align 8
  %58 = getelementptr inbounds i8, i8* %57, i64 1
  store i8* %58, i8** %6, align 8
  store i8 %56, i8* %57, align 1
  br label %59

59:                                               ; preds = %50, %28, %4
  %60 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %63 = load i8*, i8** %62, align 8
  %64 = getelementptr inbounds i8, i8* %63, i64 -32
  %65 = icmp ult i8* %61, %64
  br i1 %65, label %67, label %66, !prof !11

66:                                               ; preds = %59
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %67

67:                                               ; preds = %59, %66
  %68 = ashr i32 %2, 3
  %69 = shl nsw i32 %68, 2
  %70 = ashr i32 %3, 3
  %71 = or i32 %69, %70
  %72 = and i32 %71, 255
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %79, label %74

74:                                               ; preds = %67
  %75 = trunc i32 %71 to i8
  %76 = or i8 %75, 64
  %77 = load i8*, i8** %60, align 8
  %78 = getelementptr inbounds i8, i8* %77, i64 1
  store i8* %78, i8** %60, align 8
  store i8 %76, i8* %77, align 1
  br label %79

79:                                               ; preds = %67, %74
  %80 = load i8*, i8** %60, align 8
  %81 = getelementptr inbounds i8, i8* %80, i64 1
  store i8* %81, i8** %60, align 8
  store i8 15, i8* %80, align 1
  %82 = trunc i32 %1 to i8
  %83 = add i8 %82, 64
  %84 = load i8*, i8** %60, align 8
  %85 = getelementptr inbounds i8, i8* %84, i64 1
  store i8* %85, i8** %60, align 8
  store i8 %83, i8* %84, align 1
  %86 = shl i32 %2, 3
  %87 = and i32 %3, 7
  %88 = or i32 %87, %86
  %89 = trunc i32 %88 to i8
  %90 = or i8 %89, -64
  %91 = load i8*, i8** %60, align 8
  %92 = getelementptr inbounds i8, i8* %91, i64 1
  store i8* %92, i8** %60, align 8
  store i8 %90, i8* %91, align 1
  br label %93

93:                                               ; preds = %4, %79
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5cmovlENS0_9ConditionENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i32, i64, i32) local_unnamed_addr #1 align 2 {
  switch i32 %1, label %28 [
    i32 16, label %6
    i32 17, label %54
  ]

6:                                                ; preds = %5
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 -32
  %12 = icmp ult i8* %8, %11
  br i1 %12, label %14, label %13, !prof !11

13:                                               ; preds = %6
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %14

14:                                               ; preds = %13, %6
  %15 = trunc i64 %3 to i8
  %16 = lshr i32 %2, 1
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, -4
  %19 = or i8 %18, %15
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %25, label %21

21:                                               ; preds = %14
  %22 = or i8 %19, 64
  %23 = load i8*, i8** %7, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %7, align 8
  store i8 %22, i8* %23, align 1
  br label %25

25:                                               ; preds = %14, %21
  %26 = load i8*, i8** %7, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %7, align 8
  store i8 -117, i8* %26, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %2, i64 %3, i32 %4) #14
  br label %28

28:                                               ; preds = %5, %25
  %29 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 -32
  %34 = icmp ult i8* %30, %33
  br i1 %34, label %36, label %35, !prof !11

35:                                               ; preds = %28
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %36

36:                                               ; preds = %28, %35
  %37 = trunc i64 %3 to i8
  %38 = lshr i32 %2, 1
  %39 = trunc i32 %38 to i8
  %40 = and i8 %39, -4
  %41 = or i8 %40, %37
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %47, label %43

43:                                               ; preds = %36
  %44 = or i8 %41, 64
  %45 = load i8*, i8** %29, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 1
  store i8* %46, i8** %29, align 8
  store i8 %44, i8* %45, align 1
  br label %47

47:                                               ; preds = %36, %43
  %48 = load i8*, i8** %29, align 8
  %49 = getelementptr inbounds i8, i8* %48, i64 1
  store i8* %49, i8** %29, align 8
  store i8 15, i8* %48, align 1
  %50 = trunc i32 %1 to i8
  %51 = add i8 %50, 64
  %52 = load i8*, i8** %29, align 8
  %53 = getelementptr inbounds i8, i8* %52, i64 1
  store i8* %53, i8** %29, align 8
  store i8 %51, i8* %52, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %2, i64 %3, i32 %4)
  br label %54

54:                                               ; preds = %5, %47
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7cmpb_alENS0_9ImmediateE(%"class.v8::internal::Assembler"*, i64) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %11, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %10 = load i8*, i8** %3, align 8
  br label %11

11:                                               ; preds = %2, %9
  %12 = phi i8* [ %4, %2 ], [ %10, %9 ]
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  store i8* %13, i8** %3, align 8
  store i8 60, i8* %12, align 1
  %14 = trunc i64 %1 to i8
  %15 = load i8*, i8** %3, align 8
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %16, i8** %3, align 8
  store i8 %14, i8* %15, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4lockEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -16, i8* %11, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5xaddbENS0_7OperandENS0_8RegisterE(%"class.v8::internal::Assembler"*, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %4, %11
  %13 = icmp slt i32 %3, 4
  %14 = trunc i64 %1 to i8
  %15 = lshr i32 %3, 1
  %16 = trunc i32 %15 to i8
  br i1 %13, label %23, label %17

17:                                               ; preds = %12
  %18 = and i8 %16, -68
  %19 = or i8 %18, %14
  %20 = or i8 %19, 64
  %21 = load i8*, i8** %5, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %5, align 8
  store i8 %20, i8* %21, align 1
  br label %31

23:                                               ; preds = %12
  %24 = and i8 %16, -4
  %25 = or i8 %24, %14
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %31, label %27

27:                                               ; preds = %23
  %28 = or i8 %25, 64
  %29 = load i8*, i8** %5, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %5, align 8
  store i8 %28, i8* %29, align 1
  br label %31

31:                                               ; preds = %17, %23, %27
  %32 = load i8*, i8** %5, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %5, align 8
  store i8 15, i8* %32, align 1
  %34 = load i8*, i8** %5, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %5, align 8
  store i8 -64, i8* %34, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %3, i64 %1, i32 %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5xaddwENS0_7OperandENS0_8RegisterE(%"class.v8::internal::Assembler"*, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 102, i8* %14, align 1
  %16 = trunc i64 %1 to i8
  %17 = lshr i32 %3, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, -4
  %20 = or i8 %19, %16
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %13
  %23 = or i8 %20, 64
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %13, %22
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %5, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %5, align 8
  store i8 -63, i8* %29, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %3, i64 %1, i32 %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5xaddlENS0_7OperandENS0_8RegisterE(%"class.v8::internal::Assembler"*, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %4, %11
  %13 = trunc i64 %1 to i8
  %14 = lshr i32 %3, 1
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, -4
  %17 = or i8 %16, %13
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %12
  %20 = or i8 %17, 64
  %21 = load i8*, i8** %5, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %5, align 8
  store i8 %20, i8* %21, align 1
  br label %23

23:                                               ; preds = %12, %19
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 15, i8* %24, align 1
  %26 = load i8*, i8** %5, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %5, align 8
  store i8 -63, i8* %26, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %3, i64 %1, i32 %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5xaddqENS0_7OperandENS0_8RegisterE(%"class.v8::internal::Assembler"*, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = trunc i64 %1 to i8
  %16 = lshr i32 %3, 1
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, -76
  %19 = or i8 %18, %15
  %20 = or i8 %19, 72
  %21 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %21, i8** %5, align 8
  store i8 %20, i8* %14, align 1
  %22 = load i8*, i8** %5, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %5, align 8
  store i8 15, i8* %22, align 1
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 -63, i8* %24, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %3, i64 %1, i32 %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8cmpxchgbENS0_7OperandENS0_8RegisterE(%"class.v8::internal::Assembler"*, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %4, %11
  %13 = icmp slt i32 %3, 4
  %14 = trunc i64 %1 to i8
  %15 = lshr i32 %3, 1
  %16 = trunc i32 %15 to i8
  br i1 %13, label %23, label %17

17:                                               ; preds = %12
  %18 = and i8 %16, -68
  %19 = or i8 %18, %14
  %20 = or i8 %19, 64
  %21 = load i8*, i8** %5, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %5, align 8
  store i8 %20, i8* %21, align 1
  br label %31

23:                                               ; preds = %12
  %24 = and i8 %16, -4
  %25 = or i8 %24, %14
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %31, label %27

27:                                               ; preds = %23
  %28 = or i8 %25, 64
  %29 = load i8*, i8** %5, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %5, align 8
  store i8 %28, i8* %29, align 1
  br label %31

31:                                               ; preds = %27, %23, %17
  %32 = load i8*, i8** %5, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %5, align 8
  store i8 15, i8* %32, align 1
  %34 = load i8*, i8** %5, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %5, align 8
  store i8 -80, i8* %34, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %3, i64 %1, i32 %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8cmpxchgwENS0_7OperandENS0_8RegisterE(%"class.v8::internal::Assembler"*, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 102, i8* %14, align 1
  %16 = trunc i64 %1 to i8
  %17 = lshr i32 %3, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, -4
  %20 = or i8 %19, %16
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %13
  %23 = or i8 %20, 64
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %13, %22
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %5, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %5, align 8
  store i8 -79, i8* %29, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %3, i64 %1, i32 %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler12emit_cmpxchgENS0_7OperandENS0_8RegisterEi(%"class.v8::internal::Assembler"*, i64, i32, i32, i32) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %13, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %13

13:                                               ; preds = %5, %12
  %14 = icmp eq i32 %4, 8
  %15 = trunc i64 %1 to i8
  %16 = lshr i32 %3, 1
  %17 = trunc i32 %16 to i8
  br i1 %14, label %18, label %24

18:                                               ; preds = %13
  %19 = and i8 %17, -76
  %20 = or i8 %19, %15
  %21 = or i8 %20, 72
  %22 = load i8*, i8** %6, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %6, align 8
  store i8 %21, i8* %22, align 1
  br label %32

24:                                               ; preds = %13
  %25 = and i8 %17, -4
  %26 = or i8 %25, %15
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %24
  %29 = or i8 %26, 64
  %30 = load i8*, i8** %6, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %6, align 8
  store i8 %29, i8* %30, align 1
  br label %32

32:                                               ; preds = %18, %24, %28
  %33 = load i8*, i8** %6, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %6, align 8
  store i8 15, i8* %33, align 1
  %35 = load i8*, i8** %6, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 1
  store i8* %36, i8** %6, align 8
  store i8 -79, i8* %35, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %3, i64 %1, i32 %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6mfenceEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 15, i8* %11, align 1
  %13 = load i8*, i8** %2, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %2, align 8
  store i8 -82, i8* %13, align 1
  %15 = load i8*, i8** %2, align 8
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %16, i8** %2, align 8
  store i8 -16, i8* %15, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6lfenceEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 15, i8* %11, align 1
  %13 = load i8*, i8** %2, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %2, align 8
  store i8 -82, i8* %13, align 1
  %15 = load i8*, i8** %2, align 8
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %16, i8** %2, align 8
  store i8 -24, i8* %15, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5cpuidEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 15, i8* %11, align 1
  %13 = load i8*, i8** %2, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %2, align 8
  store i8 -94, i8* %13, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler3cqoEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 72, i8* %11, align 1
  %13 = load i8*, i8** %2, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %2, align 8
  store i8 -103, i8* %13, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8emit_decENS0_8RegisterEi(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %11, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %11

11:                                               ; preds = %3, %10
  %12 = icmp eq i32 %2, 8
  br i1 %12, label %13, label %19

13:                                               ; preds = %11
  %14 = lshr i32 %1, 3
  %15 = trunc i32 %14 to i8
  %16 = or i8 %15, 72
  %17 = load i8*, i8** %4, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %4, align 8
  store i8 %16, i8* %17, align 1
  br label %24

19:                                               ; preds = %11
  %20 = icmp ult i32 %1, 8
  br i1 %20, label %24, label %21

21:                                               ; preds = %19
  %22 = load i8*, i8** %4, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %4, align 8
  store i8 65, i8* %22, align 1
  br label %24

24:                                               ; preds = %13, %19, %21
  %25 = load i8*, i8** %4, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %4, align 8
  store i8 -1, i8* %25, align 1
  %27 = trunc i32 %1 to i8
  %28 = and i8 %27, 7
  %29 = or i8 %28, -56
  %30 = load i8*, i8** %4, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %4, align 8
  store i8 %29, i8* %30, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8emit_decENS0_7OperandEi(%"class.v8::internal::Assembler"*, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = alloca %"class.v8::internal::Operand", align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %13, label %12, !prof !11

12:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %13

13:                                               ; preds = %4, %12
  %14 = icmp eq i32 %3, 8
  %15 = trunc i64 %1 to i8
  br i1 %14, label %16, label %20

16:                                               ; preds = %13
  %17 = or i8 %15, 72
  %18 = load i8*, i8** %6, align 8
  %19 = getelementptr inbounds i8, i8* %18, i64 1
  store i8* %19, i8** %6, align 8
  store i8 %17, i8* %18, align 1
  br label %26

20:                                               ; preds = %13
  %21 = icmp eq i8 %15, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %20
  %23 = or i8 %15, 64
  %24 = load i8*, i8** %6, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %6, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %16, %20, %22
  %27 = load i8*, i8** %6, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %6, align 8
  store i8 -1, i8* %27, align 1
  %29 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %29)
  %30 = bitcast %"class.v8::internal::Operand"* %5 to i64*
  store i64 %1, i64* %30, align 8
  %31 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 7
  %32 = bitcast i8* %31 to i32*
  store i32 %2, i32* %32, align 1
  %33 = lshr i32 %2, 16
  %34 = and i32 %33, 255
  %35 = lshr i64 %1, 8
  %36 = trunc i64 %35 to i8
  %37 = or i8 %36, 8
  %38 = load i8*, i8** %6, align 8
  %39 = getelementptr inbounds i8, i8* %38, i64 1
  store i8* %39, i8** %6, align 8
  store i8 %37, i8* %38, align 1
  %40 = icmp eq i8 %36, 5
  %41 = lshr i64 %1, 16
  %42 = trunc i64 %41 to i8
  br i1 %40, label %58, label %43

43:                                               ; preds = %26
  %44 = trunc i32 %33 to i8
  %45 = icmp ugt i8 %44, 1
  br i1 %45, label %46, label %145

46:                                               ; preds = %43
  %47 = zext i32 %34 to i64
  %48 = load i8*, i8** %6, align 8
  %49 = getelementptr inbounds i8, i8* %48, i64 1
  store i8* %49, i8** %6, align 8
  store i8 %42, i8* %48, align 1
  %50 = icmp eq i32 %34, 2
  br i1 %50, label %145, label %51

51:                                               ; preds = %46
  %52 = add nsw i64 %47, -2
  %53 = add nsw i64 %47, -3
  %54 = and i64 %52, 3
  %55 = icmp ult i64 %53, 3
  br i1 %55, label %132, label %56

56:                                               ; preds = %51
  %57 = sub nsw i64 %52, %54
  br label %107

58:                                               ; preds = %26
  %59 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 1
  %60 = bitcast i8* %59 to %"class.v8::internal::Label"**
  %61 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %60, align 1
  %62 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %61, i64 0, i32 0
  %63 = load i32, i32* %62, align 4
  %64 = icmp slt i32 %63, 0
  br i1 %64, label %65, label %80

65:                                               ; preds = %58
  %66 = bitcast i8** %6 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %69 = bitcast i8** %68 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = sub i64 %67, %70
  %72 = trunc i64 %71 to i32
  %73 = ashr i32 %2, 24
  %74 = add nsw i32 %73, -5
  %75 = sub i32 %74, %63
  %76 = sub i32 %75, %72
  %77 = inttoptr i64 %67 to i32*
  store i32 %76, i32* %77, align 1
  %78 = load i8*, i8** %6, align 8
  %79 = getelementptr inbounds i8, i8* %78, i64 4
  store i8* %79, i8** %6, align 8
  br label %145

80:                                               ; preds = %58
  %81 = icmp eq i32 %63, 0
  br i1 %81, label %95, label %82

82:                                               ; preds = %80
  %83 = add nsw i32 %63, -1
  %84 = bitcast i8** %6 to i32**
  %85 = load i32*, i32** %84, align 8
  store i32 %83, i32* %85, align 1
  %86 = load i8*, i8** %6, align 8
  %87 = getelementptr inbounds i8, i8* %86, i64 4
  store i8* %87, i8** %6, align 8
  %88 = ptrtoint i8* %87 to i64
  %89 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %90 = bitcast i8** %89 to i64*
  %91 = load i64, i64* %90, align 8
  %92 = sub i64 %88, %91
  %93 = trunc i64 %92 to i32
  %94 = add i32 %93, -3
  store i32 %94, i32* %62, align 4
  br label %145

95:                                               ; preds = %80
  %96 = bitcast i8** %6 to i64*
  %97 = load i64, i64* %96, align 8
  %98 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %99 = bitcast i8** %98 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = sub i64 %97, %100
  %102 = trunc i64 %101 to i32
  %103 = inttoptr i64 %97 to i32*
  store i32 %102, i32* %103, align 1
  %104 = load i8*, i8** %6, align 8
  %105 = getelementptr inbounds i8, i8* %104, i64 4
  store i8* %105, i8** %6, align 8
  %106 = add nsw i32 %102, 1
  store i32 %106, i32* %62, align 4
  br label %145

107:                                              ; preds = %107, %56
  %108 = phi i64 [ 2, %56 ], [ %129, %107 ]
  %109 = phi i64 [ %57, %56 ], [ %130, %107 ]
  %110 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %108
  %111 = load i8, i8* %110, align 1
  %112 = load i8*, i8** %6, align 8
  %113 = getelementptr inbounds i8, i8* %112, i64 1
  store i8* %113, i8** %6, align 8
  store i8 %111, i8* %112, align 1
  %114 = or i64 %108, 1
  %115 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %114
  %116 = load i8, i8* %115, align 1
  %117 = load i8*, i8** %6, align 8
  %118 = getelementptr inbounds i8, i8* %117, i64 1
  store i8* %118, i8** %6, align 8
  store i8 %116, i8* %117, align 1
  %119 = add nuw nsw i64 %108, 2
  %120 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %119
  %121 = load i8, i8* %120, align 1
  %122 = load i8*, i8** %6, align 8
  %123 = getelementptr inbounds i8, i8* %122, i64 1
  store i8* %123, i8** %6, align 8
  store i8 %121, i8* %122, align 1
  %124 = add nuw nsw i64 %108, 3
  %125 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %124
  %126 = load i8, i8* %125, align 1
  %127 = load i8*, i8** %6, align 8
  %128 = getelementptr inbounds i8, i8* %127, i64 1
  store i8* %128, i8** %6, align 8
  store i8 %126, i8* %127, align 1
  %129 = add nuw nsw i64 %108, 4
  %130 = add i64 %109, -4
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %132, label %107

132:                                              ; preds = %107, %51
  %133 = phi i64 [ 2, %51 ], [ %129, %107 ]
  %134 = icmp eq i64 %54, 0
  br i1 %134, label %145, label %135

135:                                              ; preds = %132, %135
  %136 = phi i64 [ %142, %135 ], [ %133, %132 ]
  %137 = phi i64 [ %143, %135 ], [ %54, %132 ]
  %138 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %136
  %139 = load i8, i8* %138, align 1
  %140 = load i8*, i8** %6, align 8
  %141 = getelementptr inbounds i8, i8* %140, i64 1
  store i8* %141, i8** %6, align 8
  store i8 %139, i8* %140, align 1
  %142 = add nuw nsw i64 %136, 1
  %143 = add i64 %137, -1
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %145, label %135, !llvm.loop !27

145:                                              ; preds = %132, %135, %46, %43, %65, %82, %95
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %29)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4decbENS0_8RegisterE(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %10, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %10

10:                                               ; preds = %2, %9
  %11 = icmp slt i32 %1, 4
  br i1 %11, label %18, label %12

12:                                               ; preds = %10
  %13 = lshr i32 %1, 3
  %14 = trunc i32 %13 to i8
  %15 = or i8 %14, 64
  %16 = load i8*, i8** %3, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %17, i8** %3, align 8
  store i8 %15, i8* %16, align 1
  br label %18

18:                                               ; preds = %12, %10
  %19 = load i8*, i8** %3, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 1
  store i8* %20, i8** %3, align 8
  store i8 -2, i8* %19, align 1
  %21 = trunc i32 %1 to i8
  %22 = and i8 %21, 7
  %23 = or i8 %22, -56
  %24 = load i8*, i8** %3, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %3, align 8
  store i8 %23, i8* %24, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4decbENS0_7OperandE(%"class.v8::internal::Assembler"*, i64, i32) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::Operand", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %3, %11
  %13 = trunc i64 %1 to i8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %12
  %16 = or i8 %13, 64
  %17 = load i8*, i8** %5, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %5, align 8
  store i8 %16, i8* %17, align 1
  br label %19

19:                                               ; preds = %12, %15
  %20 = load i8*, i8** %5, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 1
  store i8* %21, i8** %5, align 8
  store i8 -2, i8* %20, align 1
  %22 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %22)
  %23 = bitcast %"class.v8::internal::Operand"* %4 to i64*
  store i64 %1, i64* %23, align 8
  %24 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 7
  %25 = bitcast i8* %24 to i32*
  store i32 %2, i32* %25, align 1
  %26 = lshr i32 %2, 16
  %27 = and i32 %26, 255
  %28 = lshr i64 %1, 8
  %29 = trunc i64 %28 to i8
  %30 = or i8 %29, 8
  %31 = load i8*, i8** %5, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %32, i8** %5, align 8
  store i8 %30, i8* %31, align 1
  %33 = icmp eq i8 %29, 5
  %34 = lshr i64 %1, 16
  %35 = trunc i64 %34 to i8
  br i1 %33, label %51, label %36

36:                                               ; preds = %19
  %37 = trunc i32 %26 to i8
  %38 = icmp ugt i8 %37, 1
  br i1 %38, label %39, label %138

39:                                               ; preds = %36
  %40 = zext i32 %27 to i64
  %41 = load i8*, i8** %5, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %42, i8** %5, align 8
  store i8 %35, i8* %41, align 1
  %43 = icmp eq i32 %27, 2
  br i1 %43, label %138, label %44

44:                                               ; preds = %39
  %45 = add nsw i64 %40, -2
  %46 = add nsw i64 %40, -3
  %47 = and i64 %45, 3
  %48 = icmp ult i64 %46, 3
  br i1 %48, label %125, label %49

49:                                               ; preds = %44
  %50 = sub nsw i64 %45, %47
  br label %100

51:                                               ; preds = %19
  %52 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 1
  %53 = bitcast i8* %52 to %"class.v8::internal::Label"**
  %54 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %53, align 1
  %55 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %54, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = icmp slt i32 %56, 0
  br i1 %57, label %58, label %73

58:                                               ; preds = %51
  %59 = bitcast i8** %5 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %62 = bitcast i8** %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = sub i64 %60, %63
  %65 = trunc i64 %64 to i32
  %66 = ashr i32 %2, 24
  %67 = add nsw i32 %66, -5
  %68 = sub i32 %67, %56
  %69 = sub i32 %68, %65
  %70 = inttoptr i64 %60 to i32*
  store i32 %69, i32* %70, align 1
  %71 = load i8*, i8** %5, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 4
  store i8* %72, i8** %5, align 8
  br label %138

73:                                               ; preds = %51
  %74 = icmp eq i32 %56, 0
  br i1 %74, label %88, label %75

75:                                               ; preds = %73
  %76 = add nsw i32 %56, -1
  %77 = bitcast i8** %5 to i32**
  %78 = load i32*, i32** %77, align 8
  store i32 %76, i32* %78, align 1
  %79 = load i8*, i8** %5, align 8
  %80 = getelementptr inbounds i8, i8* %79, i64 4
  store i8* %80, i8** %5, align 8
  %81 = ptrtoint i8* %80 to i64
  %82 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %83 = bitcast i8** %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = sub i64 %81, %84
  %86 = trunc i64 %85 to i32
  %87 = add i32 %86, -3
  store i32 %87, i32* %55, align 4
  br label %138

88:                                               ; preds = %73
  %89 = bitcast i8** %5 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %92 = bitcast i8** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = sub i64 %90, %93
  %95 = trunc i64 %94 to i32
  %96 = inttoptr i64 %90 to i32*
  store i32 %95, i32* %96, align 1
  %97 = load i8*, i8** %5, align 8
  %98 = getelementptr inbounds i8, i8* %97, i64 4
  store i8* %98, i8** %5, align 8
  %99 = add nsw i32 %95, 1
  store i32 %99, i32* %55, align 4
  br label %138

100:                                              ; preds = %100, %49
  %101 = phi i64 [ 2, %49 ], [ %122, %100 ]
  %102 = phi i64 [ %50, %49 ], [ %123, %100 ]
  %103 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %101
  %104 = load i8, i8* %103, align 1
  %105 = load i8*, i8** %5, align 8
  %106 = getelementptr inbounds i8, i8* %105, i64 1
  store i8* %106, i8** %5, align 8
  store i8 %104, i8* %105, align 1
  %107 = or i64 %101, 1
  %108 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = load i8*, i8** %5, align 8
  %111 = getelementptr inbounds i8, i8* %110, i64 1
  store i8* %111, i8** %5, align 8
  store i8 %109, i8* %110, align 1
  %112 = add nuw nsw i64 %101, 2
  %113 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = load i8*, i8** %5, align 8
  %116 = getelementptr inbounds i8, i8* %115, i64 1
  store i8* %116, i8** %5, align 8
  store i8 %114, i8* %115, align 1
  %117 = add nuw nsw i64 %101, 3
  %118 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = load i8*, i8** %5, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 1
  store i8* %121, i8** %5, align 8
  store i8 %119, i8* %120, align 1
  %122 = add nuw nsw i64 %101, 4
  %123 = add i64 %102, -4
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %100

125:                                              ; preds = %100, %44
  %126 = phi i64 [ 2, %44 ], [ %122, %100 ]
  %127 = icmp eq i64 %47, 0
  br i1 %127, label %138, label %128

128:                                              ; preds = %125, %128
  %129 = phi i64 [ %135, %128 ], [ %126, %125 ]
  %130 = phi i64 [ %136, %128 ], [ %47, %125 ]
  %131 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %129
  %132 = load i8, i8* %131, align 1
  %133 = load i8*, i8** %5, align 8
  %134 = getelementptr inbounds i8, i8* %133, i64 1
  store i8* %134, i8** %5, align 8
  store i8 %132, i8* %133, align 1
  %135 = add nuw nsw i64 %129, 1
  %136 = add i64 %130, -1
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %128, !llvm.loop !28

138:                                              ; preds = %125, %128, %39, %36, %58, %75, %88
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %22)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler3hltEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -12, i8* %11, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9emit_idivENS0_8RegisterEi(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %11, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %11

11:                                               ; preds = %3, %10
  %12 = icmp eq i32 %2, 8
  br i1 %12, label %13, label %19

13:                                               ; preds = %11
  %14 = lshr i32 %1, 3
  %15 = trunc i32 %14 to i8
  %16 = or i8 %15, 72
  %17 = load i8*, i8** %4, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %4, align 8
  store i8 %16, i8* %17, align 1
  br label %24

19:                                               ; preds = %11
  %20 = icmp ult i32 %1, 8
  br i1 %20, label %24, label %21

21:                                               ; preds = %19
  %22 = load i8*, i8** %4, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %4, align 8
  store i8 65, i8* %22, align 1
  br label %24

24:                                               ; preds = %13, %19, %21
  %25 = load i8*, i8** %4, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %4, align 8
  store i8 -9, i8* %25, align 1
  %27 = trunc i32 %1 to i8
  %28 = or i8 %27, -8
  %29 = load i8*, i8** %4, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %4, align 8
  store i8 %28, i8* %29, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8emit_divENS0_8RegisterEi(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %11, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %11

11:                                               ; preds = %3, %10
  %12 = icmp eq i32 %2, 8
  br i1 %12, label %13, label %19

13:                                               ; preds = %11
  %14 = lshr i32 %1, 3
  %15 = trunc i32 %14 to i8
  %16 = or i8 %15, 72
  %17 = load i8*, i8** %4, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %4, align 8
  store i8 %16, i8* %17, align 1
  br label %24

19:                                               ; preds = %11
  %20 = icmp ult i32 %1, 8
  br i1 %20, label %24, label %21

21:                                               ; preds = %19
  %22 = load i8*, i8** %4, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %4, align 8
  store i8 65, i8* %22, align 1
  br label %24

24:                                               ; preds = %13, %19, %21
  %25 = load i8*, i8** %4, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %4, align 8
  store i8 -9, i8* %25, align 1
  %27 = trunc i32 %1 to i8
  %28 = and i8 %27, 7
  %29 = or i8 %28, -16
  %30 = load i8*, i8** %4, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %4, align 8
  store i8 %29, i8* %30, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9emit_imulENS0_8RegisterEi(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %11, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %11

11:                                               ; preds = %3, %10
  %12 = icmp eq i32 %2, 8
  br i1 %12, label %13, label %19

13:                                               ; preds = %11
  %14 = lshr i32 %1, 3
  %15 = trunc i32 %14 to i8
  %16 = or i8 %15, 72
  %17 = load i8*, i8** %4, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %4, align 8
  store i8 %16, i8* %17, align 1
  br label %24

19:                                               ; preds = %11
  %20 = icmp ult i32 %1, 8
  br i1 %20, label %24, label %21

21:                                               ; preds = %19
  %22 = load i8*, i8** %4, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %4, align 8
  store i8 65, i8* %22, align 1
  br label %24

24:                                               ; preds = %13, %19, %21
  %25 = load i8*, i8** %4, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %4, align 8
  store i8 -9, i8* %25, align 1
  %27 = trunc i32 %1 to i8
  %28 = and i8 %27, 7
  %29 = or i8 %28, -24
  %30 = load i8*, i8** %4, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %4, align 8
  store i8 %29, i8* %30, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9emit_imulENS0_7OperandEi(%"class.v8::internal::Assembler"*, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = alloca %"class.v8::internal::Operand", align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %13, label %12, !prof !11

12:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %13

13:                                               ; preds = %4, %12
  %14 = icmp eq i32 %3, 8
  %15 = trunc i64 %1 to i8
  br i1 %14, label %16, label %20

16:                                               ; preds = %13
  %17 = or i8 %15, 72
  %18 = load i8*, i8** %6, align 8
  %19 = getelementptr inbounds i8, i8* %18, i64 1
  store i8* %19, i8** %6, align 8
  store i8 %17, i8* %18, align 1
  br label %26

20:                                               ; preds = %13
  %21 = icmp eq i8 %15, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %20
  %23 = or i8 %15, 64
  %24 = load i8*, i8** %6, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %6, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %16, %20, %22
  %27 = load i8*, i8** %6, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %6, align 8
  store i8 -9, i8* %27, align 1
  %29 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %29)
  %30 = bitcast %"class.v8::internal::Operand"* %5 to i64*
  store i64 %1, i64* %30, align 8
  %31 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 7
  %32 = bitcast i8* %31 to i32*
  store i32 %2, i32* %32, align 1
  %33 = lshr i32 %2, 16
  %34 = and i32 %33, 255
  %35 = lshr i64 %1, 8
  %36 = trunc i64 %35 to i8
  %37 = or i8 %36, 40
  %38 = load i8*, i8** %6, align 8
  %39 = getelementptr inbounds i8, i8* %38, i64 1
  store i8* %39, i8** %6, align 8
  store i8 %37, i8* %38, align 1
  %40 = icmp eq i8 %36, 5
  %41 = lshr i64 %1, 16
  %42 = trunc i64 %41 to i8
  br i1 %40, label %58, label %43

43:                                               ; preds = %26
  %44 = trunc i32 %33 to i8
  %45 = icmp ugt i8 %44, 1
  br i1 %45, label %46, label %145

46:                                               ; preds = %43
  %47 = zext i32 %34 to i64
  %48 = load i8*, i8** %6, align 8
  %49 = getelementptr inbounds i8, i8* %48, i64 1
  store i8* %49, i8** %6, align 8
  store i8 %42, i8* %48, align 1
  %50 = icmp eq i32 %34, 2
  br i1 %50, label %145, label %51

51:                                               ; preds = %46
  %52 = add nsw i64 %47, -2
  %53 = add nsw i64 %47, -3
  %54 = and i64 %52, 3
  %55 = icmp ult i64 %53, 3
  br i1 %55, label %132, label %56

56:                                               ; preds = %51
  %57 = sub nsw i64 %52, %54
  br label %107

58:                                               ; preds = %26
  %59 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 1
  %60 = bitcast i8* %59 to %"class.v8::internal::Label"**
  %61 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %60, align 1
  %62 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %61, i64 0, i32 0
  %63 = load i32, i32* %62, align 4
  %64 = icmp slt i32 %63, 0
  br i1 %64, label %65, label %80

65:                                               ; preds = %58
  %66 = bitcast i8** %6 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %69 = bitcast i8** %68 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = sub i64 %67, %70
  %72 = trunc i64 %71 to i32
  %73 = ashr i32 %2, 24
  %74 = add nsw i32 %73, -5
  %75 = sub i32 %74, %63
  %76 = sub i32 %75, %72
  %77 = inttoptr i64 %67 to i32*
  store i32 %76, i32* %77, align 1
  %78 = load i8*, i8** %6, align 8
  %79 = getelementptr inbounds i8, i8* %78, i64 4
  store i8* %79, i8** %6, align 8
  br label %145

80:                                               ; preds = %58
  %81 = icmp eq i32 %63, 0
  br i1 %81, label %95, label %82

82:                                               ; preds = %80
  %83 = add nsw i32 %63, -1
  %84 = bitcast i8** %6 to i32**
  %85 = load i32*, i32** %84, align 8
  store i32 %83, i32* %85, align 1
  %86 = load i8*, i8** %6, align 8
  %87 = getelementptr inbounds i8, i8* %86, i64 4
  store i8* %87, i8** %6, align 8
  %88 = ptrtoint i8* %87 to i64
  %89 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %90 = bitcast i8** %89 to i64*
  %91 = load i64, i64* %90, align 8
  %92 = sub i64 %88, %91
  %93 = trunc i64 %92 to i32
  %94 = add i32 %93, -3
  store i32 %94, i32* %62, align 4
  br label %145

95:                                               ; preds = %80
  %96 = bitcast i8** %6 to i64*
  %97 = load i64, i64* %96, align 8
  %98 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %99 = bitcast i8** %98 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = sub i64 %97, %100
  %102 = trunc i64 %101 to i32
  %103 = inttoptr i64 %97 to i32*
  store i32 %102, i32* %103, align 1
  %104 = load i8*, i8** %6, align 8
  %105 = getelementptr inbounds i8, i8* %104, i64 4
  store i8* %105, i8** %6, align 8
  %106 = add nsw i32 %102, 1
  store i32 %106, i32* %62, align 4
  br label %145

107:                                              ; preds = %107, %56
  %108 = phi i64 [ 2, %56 ], [ %129, %107 ]
  %109 = phi i64 [ %57, %56 ], [ %130, %107 ]
  %110 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %108
  %111 = load i8, i8* %110, align 1
  %112 = load i8*, i8** %6, align 8
  %113 = getelementptr inbounds i8, i8* %112, i64 1
  store i8* %113, i8** %6, align 8
  store i8 %111, i8* %112, align 1
  %114 = or i64 %108, 1
  %115 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %114
  %116 = load i8, i8* %115, align 1
  %117 = load i8*, i8** %6, align 8
  %118 = getelementptr inbounds i8, i8* %117, i64 1
  store i8* %118, i8** %6, align 8
  store i8 %116, i8* %117, align 1
  %119 = add nuw nsw i64 %108, 2
  %120 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %119
  %121 = load i8, i8* %120, align 1
  %122 = load i8*, i8** %6, align 8
  %123 = getelementptr inbounds i8, i8* %122, i64 1
  store i8* %123, i8** %6, align 8
  store i8 %121, i8* %122, align 1
  %124 = add nuw nsw i64 %108, 3
  %125 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %124
  %126 = load i8, i8* %125, align 1
  %127 = load i8*, i8** %6, align 8
  %128 = getelementptr inbounds i8, i8* %127, i64 1
  store i8* %128, i8** %6, align 8
  store i8 %126, i8* %127, align 1
  %129 = add nuw nsw i64 %108, 4
  %130 = add i64 %109, -4
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %132, label %107

132:                                              ; preds = %107, %51
  %133 = phi i64 [ 2, %51 ], [ %129, %107 ]
  %134 = icmp eq i64 %54, 0
  br i1 %134, label %145, label %135

135:                                              ; preds = %132, %135
  %136 = phi i64 [ %142, %135 ], [ %133, %132 ]
  %137 = phi i64 [ %143, %135 ], [ %54, %132 ]
  %138 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %136
  %139 = load i8, i8* %138, align 1
  %140 = load i8*, i8** %6, align 8
  %141 = getelementptr inbounds i8, i8* %140, i64 1
  store i8* %141, i8** %6, align 8
  store i8 %139, i8* %140, align 1
  %142 = add nuw nsw i64 %136, 1
  %143 = add i64 %137, -1
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %145, label %135, !llvm.loop !29

145:                                              ; preds = %132, %135, %46, %43, %65, %82, %95
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %29)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9emit_imulENS0_8RegisterES2_i(%"class.v8::internal::Assembler"*, i32, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %4, %11
  %13 = icmp eq i32 %3, 8
  %14 = ashr i32 %1, 3
  %15 = shl nsw i32 %14, 2
  br i1 %13, label %16, label %23

16:                                               ; preds = %12
  %17 = lshr i32 %2, 3
  %18 = or i32 %15, %17
  %19 = trunc i32 %18 to i8
  %20 = or i8 %19, 72
  %21 = load i8*, i8** %5, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %5, align 8
  store i8 %20, i8* %21, align 1
  br label %33

23:                                               ; preds = %12
  %24 = ashr i32 %2, 3
  %25 = or i32 %15, %24
  %26 = and i32 %25, 255
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %33, label %28

28:                                               ; preds = %23
  %29 = trunc i32 %25 to i8
  %30 = or i8 %29, 64
  %31 = load i8*, i8** %5, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %32, i8** %5, align 8
  store i8 %30, i8* %31, align 1
  br label %33

33:                                               ; preds = %16, %23, %28
  %34 = load i8*, i8** %5, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %5, align 8
  store i8 15, i8* %34, align 1
  %36 = load i8*, i8** %5, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %5, align 8
  store i8 -81, i8* %36, align 1
  %38 = shl i32 %1, 3
  %39 = and i32 %2, 7
  %40 = or i32 %39, %38
  %41 = trunc i32 %40 to i8
  %42 = or i8 %41, -64
  %43 = load i8*, i8** %5, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 1
  store i8* %44, i8** %5, align 8
  store i8 %42, i8* %43, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9emit_imulENS0_8RegisterENS0_7OperandEi(%"class.v8::internal::Assembler"*, i32, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %13, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %13

13:                                               ; preds = %5, %12
  %14 = icmp eq i32 %4, 8
  %15 = trunc i64 %2 to i8
  %16 = lshr i32 %1, 1
  %17 = trunc i32 %16 to i8
  br i1 %14, label %18, label %24

18:                                               ; preds = %13
  %19 = and i8 %17, -76
  %20 = or i8 %19, %15
  %21 = or i8 %20, 72
  %22 = load i8*, i8** %6, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %6, align 8
  store i8 %21, i8* %22, align 1
  br label %32

24:                                               ; preds = %13
  %25 = and i8 %17, -4
  %26 = or i8 %25, %15
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %24
  %29 = or i8 %26, 64
  %30 = load i8*, i8** %6, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %6, align 8
  store i8 %29, i8* %30, align 1
  br label %32

32:                                               ; preds = %18, %24, %28
  %33 = load i8*, i8** %6, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %6, align 8
  store i8 15, i8* %33, align 1
  %35 = load i8*, i8** %6, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 1
  store i8* %36, i8** %6, align 8
  store i8 -81, i8* %35, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9emit_imulENS0_8RegisterES2_NS0_9ImmediateEi(%"class.v8::internal::Assembler"*, i32, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %13, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %13

13:                                               ; preds = %5, %12
  %14 = icmp eq i32 %4, 8
  %15 = ashr i32 %1, 3
  %16 = shl nsw i32 %15, 2
  br i1 %14, label %17, label %24

17:                                               ; preds = %13
  %18 = lshr i32 %2, 3
  %19 = or i32 %16, %18
  %20 = trunc i32 %19 to i8
  %21 = or i8 %20, 72
  %22 = load i8*, i8** %6, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %6, align 8
  store i8 %21, i8* %22, align 1
  br label %34

24:                                               ; preds = %13
  %25 = ashr i32 %2, 3
  %26 = or i32 %16, %25
  %27 = and i32 %26, 255
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %34, label %29

29:                                               ; preds = %24
  %30 = trunc i32 %26 to i8
  %31 = or i8 %30, 64
  %32 = load i8*, i8** %6, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %6, align 8
  store i8 %31, i8* %32, align 1
  br label %34

34:                                               ; preds = %17, %24, %29
  %35 = shl i64 %3, 32
  %36 = ashr exact i64 %35, 32
  %37 = add nsw i64 %36, 128
  %38 = icmp ult i64 %37, 256
  br i1 %38, label %39, label %52

39:                                               ; preds = %34
  %40 = load i8*, i8** %6, align 8
  %41 = getelementptr inbounds i8, i8* %40, i64 1
  store i8* %41, i8** %6, align 8
  store i8 107, i8* %40, align 1
  %42 = shl i32 %1, 3
  %43 = and i32 %2, 7
  %44 = or i32 %43, %42
  %45 = trunc i32 %44 to i8
  %46 = or i8 %45, -64
  %47 = load i8*, i8** %6, align 8
  %48 = getelementptr inbounds i8, i8* %47, i64 1
  store i8* %48, i8** %6, align 8
  store i8 %46, i8* %47, align 1
  %49 = trunc i64 %3 to i8
  %50 = load i8*, i8** %6, align 8
  %51 = getelementptr inbounds i8, i8* %50, i64 1
  store i8* %51, i8** %6, align 8
  store i8 %49, i8* %50, align 1
  br label %67

52:                                               ; preds = %34
  %53 = trunc i64 %3 to i32
  %54 = load i8*, i8** %6, align 8
  %55 = getelementptr inbounds i8, i8* %54, i64 1
  store i8* %55, i8** %6, align 8
  store i8 105, i8* %54, align 1
  %56 = shl i32 %1, 3
  %57 = and i32 %2, 7
  %58 = or i32 %57, %56
  %59 = trunc i32 %58 to i8
  %60 = or i8 %59, -64
  %61 = load i8*, i8** %6, align 8
  %62 = getelementptr inbounds i8, i8* %61, i64 1
  store i8* %62, i8** %6, align 8
  store i8 %60, i8* %61, align 1
  %63 = bitcast i8** %6 to i32**
  %64 = load i32*, i32** %63, align 8
  store i32 %53, i32* %64, align 1
  %65 = load i8*, i8** %6, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 4
  store i8* %66, i8** %6, align 8
  br label %67

67:                                               ; preds = %52, %39
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9emit_imulENS0_8RegisterENS0_7OperandENS0_9ImmediateEi(%"class.v8::internal::Assembler"*, i32, i64, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 -32
  %12 = icmp ult i8* %8, %11
  br i1 %12, label %14, label %13, !prof !11

13:                                               ; preds = %6
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %14

14:                                               ; preds = %6, %13
  %15 = icmp eq i32 %5, 8
  %16 = trunc i64 %2 to i8
  %17 = lshr i32 %1, 1
  %18 = trunc i32 %17 to i8
  br i1 %15, label %19, label %25

19:                                               ; preds = %14
  %20 = and i8 %18, -76
  %21 = or i8 %20, %16
  %22 = or i8 %21, 72
  %23 = load i8*, i8** %7, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %7, align 8
  store i8 %22, i8* %23, align 1
  br label %33

25:                                               ; preds = %14
  %26 = and i8 %18, -4
  %27 = or i8 %26, %16
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %33, label %29

29:                                               ; preds = %25
  %30 = or i8 %27, 64
  %31 = load i8*, i8** %7, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %32, i8** %7, align 8
  store i8 %30, i8* %31, align 1
  br label %33

33:                                               ; preds = %19, %25, %29
  %34 = shl i64 %4, 32
  %35 = ashr exact i64 %34, 32
  %36 = add nsw i64 %35, 128
  %37 = icmp ult i64 %36, 256
  br i1 %37, label %38, label %44

38:                                               ; preds = %33
  %39 = load i8*, i8** %7, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  store i8* %40, i8** %7, align 8
  store i8 107, i8* %39, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3)
  %41 = trunc i64 %4 to i8
  %42 = load i8*, i8** %7, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 1
  store i8* %43, i8** %7, align 8
  store i8 %41, i8* %42, align 1
  br label %52

44:                                               ; preds = %33
  %45 = trunc i64 %4 to i32
  %46 = load i8*, i8** %7, align 8
  %47 = getelementptr inbounds i8, i8* %46, i64 1
  store i8* %47, i8** %7, align 8
  store i8 105, i8* %46, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3)
  %48 = bitcast i8** %7 to i32**
  %49 = load i32*, i32** %48, align 8
  store i32 %45, i32* %49, align 1
  %50 = load i8*, i8** %7, align 8
  %51 = getelementptr inbounds i8, i8* %50, i64 4
  store i8* %51, i8** %7, align 8
  br label %52

52:                                               ; preds = %44, %38
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8emit_incENS0_8RegisterEi(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %11, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %11

11:                                               ; preds = %3, %10
  %12 = icmp eq i32 %2, 8
  br i1 %12, label %13, label %19

13:                                               ; preds = %11
  %14 = lshr i32 %1, 3
  %15 = trunc i32 %14 to i8
  %16 = or i8 %15, 72
  %17 = load i8*, i8** %4, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %4, align 8
  store i8 %16, i8* %17, align 1
  br label %24

19:                                               ; preds = %11
  %20 = icmp ult i32 %1, 8
  br i1 %20, label %24, label %21

21:                                               ; preds = %19
  %22 = load i8*, i8** %4, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %4, align 8
  store i8 65, i8* %22, align 1
  br label %24

24:                                               ; preds = %13, %19, %21
  %25 = load i8*, i8** %4, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %4, align 8
  store i8 -1, i8* %25, align 1
  %27 = trunc i32 %1 to i8
  %28 = and i8 %27, 7
  %29 = or i8 %28, -64
  %30 = load i8*, i8** %4, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %4, align 8
  store i8 %29, i8* %30, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8emit_incENS0_7OperandEi(%"class.v8::internal::Assembler"*, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = alloca %"class.v8::internal::Operand", align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %13, label %12, !prof !11

12:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %13

13:                                               ; preds = %4, %12
  %14 = icmp eq i32 %3, 8
  %15 = trunc i64 %1 to i8
  br i1 %14, label %16, label %20

16:                                               ; preds = %13
  %17 = or i8 %15, 72
  %18 = load i8*, i8** %6, align 8
  %19 = getelementptr inbounds i8, i8* %18, i64 1
  store i8* %19, i8** %6, align 8
  store i8 %17, i8* %18, align 1
  br label %26

20:                                               ; preds = %13
  %21 = icmp eq i8 %15, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %20
  %23 = or i8 %15, 64
  %24 = load i8*, i8** %6, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %6, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %16, %20, %22
  %27 = load i8*, i8** %6, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %6, align 8
  store i8 -1, i8* %27, align 1
  %29 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %29)
  %30 = bitcast %"class.v8::internal::Operand"* %5 to i64*
  store i64 %1, i64* %30, align 8
  %31 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 7
  %32 = bitcast i8* %31 to i32*
  store i32 %2, i32* %32, align 1
  %33 = lshr i32 %2, 16
  %34 = and i32 %33, 255
  %35 = lshr i64 %1, 8
  %36 = trunc i64 %35 to i8
  %37 = load i8*, i8** %6, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  store i8* %38, i8** %6, align 8
  store i8 %36, i8* %37, align 1
  %39 = icmp eq i8 %36, 5
  %40 = lshr i64 %1, 16
  %41 = trunc i64 %40 to i8
  br i1 %39, label %57, label %42

42:                                               ; preds = %26
  %43 = trunc i32 %33 to i8
  %44 = icmp ugt i8 %43, 1
  br i1 %44, label %45, label %144

45:                                               ; preds = %42
  %46 = zext i32 %34 to i64
  %47 = load i8*, i8** %6, align 8
  %48 = getelementptr inbounds i8, i8* %47, i64 1
  store i8* %48, i8** %6, align 8
  store i8 %41, i8* %47, align 1
  %49 = icmp eq i32 %34, 2
  br i1 %49, label %144, label %50

50:                                               ; preds = %45
  %51 = add nsw i64 %46, -2
  %52 = add nsw i64 %46, -3
  %53 = and i64 %51, 3
  %54 = icmp ult i64 %52, 3
  br i1 %54, label %131, label %55

55:                                               ; preds = %50
  %56 = sub nsw i64 %51, %53
  br label %106

57:                                               ; preds = %26
  %58 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 1
  %59 = bitcast i8* %58 to %"class.v8::internal::Label"**
  %60 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %59, align 1
  %61 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %60, i64 0, i32 0
  %62 = load i32, i32* %61, align 4
  %63 = icmp slt i32 %62, 0
  br i1 %63, label %64, label %79

64:                                               ; preds = %57
  %65 = bitcast i8** %6 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %68 = bitcast i8** %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = sub i64 %66, %69
  %71 = trunc i64 %70 to i32
  %72 = ashr i32 %2, 24
  %73 = add nsw i32 %72, -5
  %74 = sub i32 %73, %62
  %75 = sub i32 %74, %71
  %76 = inttoptr i64 %66 to i32*
  store i32 %75, i32* %76, align 1
  %77 = load i8*, i8** %6, align 8
  %78 = getelementptr inbounds i8, i8* %77, i64 4
  store i8* %78, i8** %6, align 8
  br label %144

79:                                               ; preds = %57
  %80 = icmp eq i32 %62, 0
  br i1 %80, label %94, label %81

81:                                               ; preds = %79
  %82 = add nsw i32 %62, -1
  %83 = bitcast i8** %6 to i32**
  %84 = load i32*, i32** %83, align 8
  store i32 %82, i32* %84, align 1
  %85 = load i8*, i8** %6, align 8
  %86 = getelementptr inbounds i8, i8* %85, i64 4
  store i8* %86, i8** %6, align 8
  %87 = ptrtoint i8* %86 to i64
  %88 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %89 = bitcast i8** %88 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = sub i64 %87, %90
  %92 = trunc i64 %91 to i32
  %93 = add i32 %92, -3
  store i32 %93, i32* %61, align 4
  br label %144

94:                                               ; preds = %79
  %95 = bitcast i8** %6 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %98 = bitcast i8** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = sub i64 %96, %99
  %101 = trunc i64 %100 to i32
  %102 = inttoptr i64 %96 to i32*
  store i32 %101, i32* %102, align 1
  %103 = load i8*, i8** %6, align 8
  %104 = getelementptr inbounds i8, i8* %103, i64 4
  store i8* %104, i8** %6, align 8
  %105 = add nsw i32 %101, 1
  store i32 %105, i32* %61, align 4
  br label %144

106:                                              ; preds = %106, %55
  %107 = phi i64 [ 2, %55 ], [ %128, %106 ]
  %108 = phi i64 [ %56, %55 ], [ %129, %106 ]
  %109 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %107
  %110 = load i8, i8* %109, align 1
  %111 = load i8*, i8** %6, align 8
  %112 = getelementptr inbounds i8, i8* %111, i64 1
  store i8* %112, i8** %6, align 8
  store i8 %110, i8* %111, align 1
  %113 = or i64 %107, 1
  %114 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %113
  %115 = load i8, i8* %114, align 1
  %116 = load i8*, i8** %6, align 8
  %117 = getelementptr inbounds i8, i8* %116, i64 1
  store i8* %117, i8** %6, align 8
  store i8 %115, i8* %116, align 1
  %118 = add nuw nsw i64 %107, 2
  %119 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %118
  %120 = load i8, i8* %119, align 1
  %121 = load i8*, i8** %6, align 8
  %122 = getelementptr inbounds i8, i8* %121, i64 1
  store i8* %122, i8** %6, align 8
  store i8 %120, i8* %121, align 1
  %123 = add nuw nsw i64 %107, 3
  %124 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %123
  %125 = load i8, i8* %124, align 1
  %126 = load i8*, i8** %6, align 8
  %127 = getelementptr inbounds i8, i8* %126, i64 1
  store i8* %127, i8** %6, align 8
  store i8 %125, i8* %126, align 1
  %128 = add nuw nsw i64 %107, 4
  %129 = add i64 %108, -4
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %131, label %106

131:                                              ; preds = %106, %50
  %132 = phi i64 [ 2, %50 ], [ %128, %106 ]
  %133 = icmp eq i64 %53, 0
  br i1 %133, label %144, label %134

134:                                              ; preds = %131, %134
  %135 = phi i64 [ %141, %134 ], [ %132, %131 ]
  %136 = phi i64 [ %142, %134 ], [ %53, %131 ]
  %137 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %135
  %138 = load i8, i8* %137, align 1
  %139 = load i8*, i8** %6, align 8
  %140 = getelementptr inbounds i8, i8* %139, i64 1
  store i8* %140, i8** %6, align 8
  store i8 %138, i8* %139, align 1
  %141 = add nuw nsw i64 %135, 1
  %142 = add i64 %136, -1
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %144, label %134, !llvm.loop !30

144:                                              ; preds = %131, %134, %45, %42, %64, %81, %94
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %29)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4int3Ev(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -52, i8* %11, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler1jENS0_9ConditionEPNS0_5LabelENS3_8DistanceE(%"class.v8::internal::Assembler"*, i32, %"class.v8::internal::Label"*, i32) local_unnamed_addr #1 align 2 {
  switch i32 %1, label %6 [
    i32 16, label %5
    i32 17, label %232
  ]

5:                                                ; preds = %4
  tail call void @_ZN2v88internal9Assembler3jmpEPNS0_5LabelENS2_8DistanceE(%"class.v8::internal::Assembler"* %0, %"class.v8::internal::Label"* %2, i32 %3)
  br label %232

6:                                                ; preds = %4
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 -32
  %12 = icmp ult i8* %8, %11
  br i1 %12, label %14, label %13, !prof !11

13:                                               ; preds = %6
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %14

14:                                               ; preds = %6, %13
  %15 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %2, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = icmp slt i32 %16, 0
  br i1 %17, label %18, label %55

18:                                               ; preds = %14
  %19 = xor i32 %16, -1
  %20 = bitcast i8** %7 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %23 = bitcast i8** %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %21, %24
  %26 = trunc i64 %25 to i32
  %27 = sub nsw i32 %19, %26
  %28 = sext i32 %27 to i64
  %29 = add nsw i64 %28, 126
  %30 = icmp ult i64 %29, 256
  %31 = inttoptr i64 %21 to i8*
  br i1 %30, label %32, label %44

32:                                               ; preds = %18
  %33 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 11
  %34 = load i8, i8* %33, align 8, !range !2
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %36, label %44

36:                                               ; preds = %32
  %37 = trunc i32 %1 to i8
  %38 = or i8 %37, 112
  %39 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %39, i8** %7, align 8
  store i8 %38, i8* %31, align 1
  %40 = trunc i32 %27 to i8
  %41 = add i8 %40, -2
  %42 = load i8*, i8** %7, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 1
  store i8* %43, i8** %7, align 8
  store i8 %41, i8* %42, align 1
  br label %232

44:                                               ; preds = %32, %18
  %45 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %45, i8** %7, align 8
  store i8 15, i8* %31, align 1
  %46 = trunc i32 %1 to i8
  %47 = or i8 %46, -128
  %48 = load i8*, i8** %7, align 8
  %49 = getelementptr inbounds i8, i8* %48, i64 1
  store i8* %49, i8** %7, align 8
  store i8 %47, i8* %48, align 1
  %50 = add nsw i32 %27, -6
  %51 = bitcast i8** %7 to i32**
  %52 = load i32*, i32** %51, align 8
  store i32 %50, i32* %52, align 1
  %53 = load i8*, i8** %7, align 8
  %54 = getelementptr inbounds i8, i8* %53, i64 4
  store i8* %54, i8** %7, align 8
  br label %232

55:                                               ; preds = %14
  %56 = icmp eq i32 %3, 0
  br i1 %56, label %57, label %79

57:                                               ; preds = %55
  %58 = trunc i32 %1 to i8
  %59 = or i8 %58, 112
  %60 = load i8*, i8** %7, align 8
  %61 = getelementptr inbounds i8, i8* %60, i64 1
  store i8* %61, i8** %7, align 8
  store i8 %59, i8* %60, align 1
  %62 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %2, i64 0, i32 1
  %63 = load i32, i32* %62, align 4
  %64 = icmp sgt i32 %63, 0
  %65 = bitcast i8** %7 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %68 = bitcast i8** %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = sub i64 %66, %69
  %71 = trunc i64 %70 to i32
  %72 = xor i32 %71, 255
  %73 = add i32 %72, %63
  %74 = trunc i32 %73 to i8
  %75 = select i1 %64, i8 %74, i8 0
  %76 = add nsw i32 %71, 1
  store i32 %76, i32* %62, align 4
  %77 = load i8*, i8** %7, align 8
  %78 = getelementptr inbounds i8, i8* %77, i64 1
  store i8* %78, i8** %7, align 8
  store i8 %75, i8* %77, align 1
  br label %232

79:                                               ; preds = %55
  %80 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 13
  %81 = load %"class.v8::internal::JumpOptimizationInfo"*, %"class.v8::internal::JumpOptimizationInfo"** %80, align 8
  %82 = icmp eq %"class.v8::internal::JumpOptimizationInfo"* %81, null
  br i1 %82, label %188, label %83, !prof !11

83:                                               ; preds = %79
  %84 = getelementptr inbounds %"class.v8::internal::JumpOptimizationInfo", %"class.v8::internal::JumpOptimizationInfo"* %81, i64 0, i32 0
  %85 = load i32, i32* %84, align 8
  %86 = icmp eq i32 %85, 1
  br i1 %86, label %87, label %135

87:                                               ; preds = %83
  %88 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 3
  %89 = load i32, i32* %88, align 8
  %90 = add nsw i32 %89, 1
  store i32 %90, i32* %88, align 8
  %91 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 11
  %92 = load i8, i8* %91, align 8, !range !2
  %93 = icmp eq i8 %92, 0
  %94 = load i32, i32* %84, align 8
  br i1 %93, label %95, label %135

95:                                               ; preds = %87
  %96 = icmp eq i32 %94, 1
  br i1 %96, label %98, label %97, !prof !11

97:                                               ; preds = %95
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.8, i64 0, i64 0)) #15
  unreachable

98:                                               ; preds = %95
  %99 = getelementptr inbounds %"class.v8::internal::JumpOptimizationInfo", %"class.v8::internal::JumpOptimizationInfo"* %81, i64 0, i32 2
  %100 = getelementptr inbounds %"class.v8::internal::JumpOptimizationInfo", %"class.v8::internal::JumpOptimizationInfo"* %81, i64 0, i32 2, i32 0, i32 1
  %101 = bitcast i32** %100 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = bitcast %"class.std::__1::vector.48"* %99 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = sub i64 %102, %104
  %106 = trunc i64 %105 to i32
  %107 = shl i32 %106, 3
  %108 = and i32 %107, -32
  %109 = icmp sgt i32 %108, %89
  br i1 %109, label %111, label %110, !prof !11

110:                                              ; preds = %98
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.9, i64 0, i64 0)) #15
  unreachable

111:                                              ; preds = %98
  %112 = inttoptr i64 %104 to i32*
  %113 = sdiv i32 %89, 32
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds i32, i32* %112, i64 %114
  %116 = load i32, i32* %115, align 4
  %117 = and i32 %89, 31
  %118 = shl i32 1, %117
  %119 = and i32 %116, %118
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %188, label %121

121:                                              ; preds = %111
  %122 = trunc i32 %1 to i8
  %123 = or i8 %122, 112
  %124 = load i8*, i8** %7, align 8
  %125 = getelementptr inbounds i8, i8* %124, i64 1
  store i8* %125, i8** %7, align 8
  store i8 %123, i8* %124, align 1
  %126 = bitcast i8** %7 to i64*
  %127 = load i64, i64* %126, align 8
  %128 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %129 = bitcast i8** %128 to i64*
  %130 = load i64, i64* %129, align 8
  %131 = sub i64 %127, %130
  %132 = trunc i64 %131 to i32
  tail call void @_ZN2v88internal9Assembler22record_farjmp_positionEPNS0_5LabelEi(%"class.v8::internal::Assembler"* %0, %"class.v8::internal::Label"* %2, i32 %132)
  %133 = load i8*, i8** %7, align 8
  %134 = getelementptr inbounds i8, i8* %133, i64 1
  store i8* %134, i8** %7, align 8
  store i8 0, i8* %133, align 1
  br label %232

135:                                              ; preds = %87, %83
  %136 = phi i32 [ %85, %83 ], [ %94, %87 ]
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %138, label %188

138:                                              ; preds = %135
  %139 = bitcast i8** %7 to i64*
  %140 = load i64, i64* %139, align 8
  %141 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %142 = bitcast i8** %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = sub i64 %140, %143
  %145 = trunc i64 %144 to i32
  %146 = add nsw i32 %145, 2
  %147 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 4, i32 0, i32 0, i32 2
  %148 = bitcast i32*** %147 to i64*
  %149 = load i64, i64* %148, align 8
  %150 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %151 = bitcast i32*** %150 to i64*
  %152 = load i64, i64* %151, align 8
  %153 = sub i64 %149, %152
  %154 = icmp eq i64 %153, 0
  %155 = shl i64 %153, 7
  %156 = add i64 %155, -1
  %157 = select i1 %154, i64 0, i64 %156
  %158 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 4, i32 0, i32 1
  %159 = load i64, i64* %158, align 8
  %160 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %161 = load i64, i64* %160, align 8
  %162 = add i64 %161, %159
  %163 = icmp eq i64 %157, %162
  %164 = inttoptr i64 %152 to i32**
  %165 = inttoptr i64 %149 to i32**
  br i1 %163, label %166, label %173

166:                                              ; preds = %138
  %167 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 4
  tail call void @_ZNSt3__15dequeIiNS_9allocatorIiEEE19__add_back_capacityEv(%"class.std::__1::deque"* %167) #14
  %168 = load i64, i64* %160, align 8
  %169 = load i64, i64* %158, align 8
  %170 = load i32**, i32*** %150, align 8
  %171 = load i32**, i32*** %147, align 8
  %172 = add i64 %169, %168
  br label %173

173:                                              ; preds = %166, %138
  %174 = phi i64 [ %172, %166 ], [ %162, %138 ]
  %175 = phi i32** [ %171, %166 ], [ %165, %138 ]
  %176 = phi i32** [ %170, %166 ], [ %164, %138 ]
  %177 = icmp eq i32** %175, %176
  br i1 %177, label %184, label %178

178:                                              ; preds = %173
  %179 = lshr i64 %174, 10
  %180 = getelementptr inbounds i32*, i32** %176, i64 %179
  %181 = load i32*, i32** %180, align 8
  %182 = and i64 %174, 1023
  %183 = getelementptr inbounds i32, i32* %181, i64 %182
  br label %184

184:                                              ; preds = %173, %178
  %185 = phi i32* [ %183, %178 ], [ null, %173 ]
  store i32 %146, i32* %185, align 4
  %186 = load i64, i64* %160, align 8
  %187 = add i64 %186, 1
  store i64 %187, i64* %160, align 8
  br label %188

188:                                              ; preds = %111, %79, %135, %184
  %189 = load i32, i32* %15, align 4
  %190 = icmp sgt i32 %189, 0
  %191 = load i8*, i8** %7, align 8
  %192 = getelementptr inbounds i8, i8* %191, i64 1
  store i8* %192, i8** %7, align 8
  store i8 15, i8* %191, align 1
  %193 = trunc i32 %1 to i8
  %194 = or i8 %193, -128
  %195 = load i8*, i8** %7, align 8
  %196 = getelementptr inbounds i8, i8* %195, i64 1
  store i8* %196, i8** %7, align 8
  store i8 %194, i8* %195, align 1
  br i1 %190, label %197, label %220

197:                                              ; preds = %188
  %198 = load i32, i32* %15, align 4
  %199 = icmp slt i32 %198, 0
  br i1 %199, label %200, label %202

200:                                              ; preds = %197
  %201 = xor i32 %198, -1
  br label %207

202:                                              ; preds = %197
  %203 = icmp eq i32 %198, 0
  br i1 %203, label %206, label %204

204:                                              ; preds = %202
  %205 = add nsw i32 %198, -1
  br label %207

206:                                              ; preds = %202
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14, i64 0, i64 0)) #15
  unreachable

207:                                              ; preds = %200, %204
  %208 = phi i32 [ %201, %200 ], [ %205, %204 ]
  %209 = bitcast i8** %7 to i32**
  %210 = load i32*, i32** %209, align 8
  store i32 %208, i32* %210, align 1
  %211 = load i8*, i8** %7, align 8
  %212 = getelementptr inbounds i8, i8* %211, i64 4
  store i8* %212, i8** %7, align 8
  %213 = ptrtoint i8* %212 to i64
  %214 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %215 = bitcast i8** %214 to i64*
  %216 = load i64, i64* %215, align 8
  %217 = sub i64 %213, %216
  %218 = trunc i64 %217 to i32
  %219 = add i32 %218, -3
  store i32 %219, i32* %15, align 4
  br label %232

220:                                              ; preds = %188
  %221 = bitcast i8** %7 to i64*
  %222 = load i64, i64* %221, align 8
  %223 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %224 = bitcast i8** %223 to i64*
  %225 = load i64, i64* %224, align 8
  %226 = sub i64 %222, %225
  %227 = trunc i64 %226 to i32
  %228 = inttoptr i64 %222 to i32*
  store i32 %227, i32* %228, align 1
  %229 = load i8*, i8** %7, align 8
  %230 = getelementptr inbounds i8, i8* %229, i64 4
  store i8* %230, i8** %7, align 8
  %231 = add nsw i32 %227, 1
  store i32 %231, i32* %15, align 4
  br label %232

232:                                              ; preds = %121, %220, %207, %36, %44, %57, %4, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler3jmpEPNS0_5LabelENS2_8DistanceE(%"class.v8::internal::Assembler"*, %"class.v8::internal::Label"*, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = icmp slt i32 %5, 0
  br i1 %6, label %7, label %47

7:                                                ; preds = %3
  %8 = xor i32 %5, -1
  %9 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %10 = bitcast i8** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %13 = bitcast i8** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 %11, %14
  %16 = trunc i64 %15 to i32
  %17 = sub nsw i32 %8, %16
  %18 = inttoptr i64 %11 to i8*
  %19 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 -32
  %22 = icmp ugt i8* %21, %18
  br i1 %22, label %24, label %23, !prof !11

23:                                               ; preds = %7
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %24

24:                                               ; preds = %23, %7
  %25 = sext i32 %17 to i64
  %26 = add nsw i64 %25, 126
  %27 = icmp ult i64 %26, 256
  br i1 %27, label %28, label %39

28:                                               ; preds = %24
  %29 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 11
  %30 = load i8, i8* %29, align 8, !range !2
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %32, label %39

32:                                               ; preds = %28
  %33 = load i8*, i8** %9, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %9, align 8
  store i8 -21, i8* %33, align 1
  %35 = trunc i32 %17 to i8
  %36 = add i8 %35, -2
  %37 = load i8*, i8** %9, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  store i8* %38, i8** %9, align 8
  store i8 %36, i8* %37, align 1
  br label %224

39:                                               ; preds = %28, %24
  %40 = load i8*, i8** %9, align 8
  %41 = getelementptr inbounds i8, i8* %40, i64 1
  store i8* %41, i8** %9, align 8
  store i8 -23, i8* %40, align 1
  %42 = add nsw i32 %17, -5
  %43 = bitcast i8** %9 to i32**
  %44 = load i32*, i32** %43, align 8
  store i32 %42, i32* %44, align 1
  %45 = load i8*, i8** %9, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 4
  store i8* %46, i8** %9, align 8
  br label %224

47:                                               ; preds = %3
  %48 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr inbounds i8, i8* %51, i64 -32
  %53 = icmp ult i8* %49, %52
  br i1 %53, label %55, label %54, !prof !11

54:                                               ; preds = %47
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %55

55:                                               ; preds = %47, %54
  %56 = icmp eq i32 %2, 0
  br i1 %56, label %57, label %77

57:                                               ; preds = %55
  %58 = load i8*, i8** %48, align 8
  %59 = getelementptr inbounds i8, i8* %58, i64 1
  store i8* %59, i8** %48, align 8
  store i8 -21, i8* %58, align 1
  %60 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %1, i64 0, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = icmp sgt i32 %61, 0
  %63 = bitcast i8** %48 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %66 = bitcast i8** %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = sub i64 %64, %67
  %69 = trunc i64 %68 to i32
  %70 = xor i32 %69, 255
  %71 = add i32 %70, %61
  %72 = trunc i32 %71 to i8
  %73 = select i1 %62, i8 %72, i8 0
  %74 = add nsw i32 %69, 1
  store i32 %74, i32* %60, align 4
  %75 = load i8*, i8** %48, align 8
  %76 = getelementptr inbounds i8, i8* %75, i64 1
  store i8* %76, i8** %48, align 8
  store i8 %73, i8* %75, align 1
  br label %224

77:                                               ; preds = %55
  %78 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 13
  %79 = load %"class.v8::internal::JumpOptimizationInfo"*, %"class.v8::internal::JumpOptimizationInfo"** %78, align 8
  %80 = icmp eq %"class.v8::internal::JumpOptimizationInfo"* %79, null
  br i1 %80, label %184, label %81, !prof !11

81:                                               ; preds = %77
  %82 = getelementptr inbounds %"class.v8::internal::JumpOptimizationInfo", %"class.v8::internal::JumpOptimizationInfo"* %79, i64 0, i32 0
  %83 = load i32, i32* %82, align 8
  %84 = icmp eq i32 %83, 1
  br i1 %84, label %85, label %131

85:                                               ; preds = %81
  %86 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 3
  %87 = load i32, i32* %86, align 8
  %88 = add nsw i32 %87, 1
  store i32 %88, i32* %86, align 8
  %89 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 11
  %90 = load i8, i8* %89, align 8, !range !2
  %91 = icmp eq i8 %90, 0
  %92 = load i32, i32* %82, align 8
  br i1 %91, label %93, label %131

93:                                               ; preds = %85
  %94 = icmp eq i32 %92, 1
  br i1 %94, label %96, label %95, !prof !11

95:                                               ; preds = %93
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.8, i64 0, i64 0)) #15
  unreachable

96:                                               ; preds = %93
  %97 = getelementptr inbounds %"class.v8::internal::JumpOptimizationInfo", %"class.v8::internal::JumpOptimizationInfo"* %79, i64 0, i32 2
  %98 = getelementptr inbounds %"class.v8::internal::JumpOptimizationInfo", %"class.v8::internal::JumpOptimizationInfo"* %79, i64 0, i32 2, i32 0, i32 1
  %99 = bitcast i32** %98 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = bitcast %"class.std::__1::vector.48"* %97 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = sub i64 %100, %102
  %104 = trunc i64 %103 to i32
  %105 = shl i32 %104, 3
  %106 = and i32 %105, -32
  %107 = icmp sgt i32 %106, %87
  br i1 %107, label %109, label %108, !prof !11

108:                                              ; preds = %96
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.9, i64 0, i64 0)) #15
  unreachable

109:                                              ; preds = %96
  %110 = inttoptr i64 %102 to i32*
  %111 = sdiv i32 %87, 32
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds i32, i32* %110, i64 %112
  %114 = load i32, i32* %113, align 4
  %115 = and i32 %87, 31
  %116 = shl i32 1, %115
  %117 = and i32 %114, %116
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %184, label %119

119:                                              ; preds = %109
  %120 = load i8*, i8** %48, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 1
  store i8* %121, i8** %48, align 8
  store i8 -21, i8* %120, align 1
  %122 = bitcast i8** %48 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %125 = bitcast i8** %124 to i64*
  %126 = load i64, i64* %125, align 8
  %127 = sub i64 %123, %126
  %128 = trunc i64 %127 to i32
  tail call void @_ZN2v88internal9Assembler22record_farjmp_positionEPNS0_5LabelEi(%"class.v8::internal::Assembler"* %0, %"class.v8::internal::Label"* %1, i32 %128)
  %129 = load i8*, i8** %48, align 8
  %130 = getelementptr inbounds i8, i8* %129, i64 1
  store i8* %130, i8** %48, align 8
  store i8 0, i8* %129, align 1
  br label %224

131:                                              ; preds = %85, %81
  %132 = phi i32 [ %83, %81 ], [ %92, %85 ]
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %184

134:                                              ; preds = %131
  %135 = bitcast i8** %48 to i64*
  %136 = load i64, i64* %135, align 8
  %137 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %138 = bitcast i8** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = sub i64 %136, %139
  %141 = trunc i64 %140 to i32
  %142 = add nsw i32 %141, 1
  %143 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 4, i32 0, i32 0, i32 2
  %144 = bitcast i32*** %143 to i64*
  %145 = load i64, i64* %144, align 8
  %146 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %147 = bitcast i32*** %146 to i64*
  %148 = load i64, i64* %147, align 8
  %149 = sub i64 %145, %148
  %150 = icmp eq i64 %149, 0
  %151 = shl i64 %149, 7
  %152 = add i64 %151, -1
  %153 = select i1 %150, i64 0, i64 %152
  %154 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 4, i32 0, i32 1
  %155 = load i64, i64* %154, align 8
  %156 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %157 = load i64, i64* %156, align 8
  %158 = add i64 %157, %155
  %159 = icmp eq i64 %153, %158
  %160 = inttoptr i64 %148 to i32**
  %161 = inttoptr i64 %145 to i32**
  br i1 %159, label %162, label %169

162:                                              ; preds = %134
  %163 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 4
  tail call void @_ZNSt3__15dequeIiNS_9allocatorIiEEE19__add_back_capacityEv(%"class.std::__1::deque"* %163) #14
  %164 = load i64, i64* %156, align 8
  %165 = load i64, i64* %154, align 8
  %166 = load i32**, i32*** %146, align 8
  %167 = load i32**, i32*** %143, align 8
  %168 = add i64 %165, %164
  br label %169

169:                                              ; preds = %162, %134
  %170 = phi i64 [ %168, %162 ], [ %158, %134 ]
  %171 = phi i32** [ %167, %162 ], [ %161, %134 ]
  %172 = phi i32** [ %166, %162 ], [ %160, %134 ]
  %173 = icmp eq i32** %171, %172
  br i1 %173, label %180, label %174

174:                                              ; preds = %169
  %175 = lshr i64 %170, 10
  %176 = getelementptr inbounds i32*, i32** %172, i64 %175
  %177 = load i32*, i32** %176, align 8
  %178 = and i64 %170, 1023
  %179 = getelementptr inbounds i32, i32* %177, i64 %178
  br label %180

180:                                              ; preds = %169, %174
  %181 = phi i32* [ %179, %174 ], [ null, %169 ]
  store i32 %142, i32* %181, align 4
  %182 = load i64, i64* %156, align 8
  %183 = add i64 %182, 1
  store i64 %183, i64* %156, align 8
  br label %184

184:                                              ; preds = %109, %77, %131, %180
  %185 = load i32, i32* %4, align 4
  %186 = icmp sgt i32 %185, 0
  %187 = load i8*, i8** %48, align 8
  %188 = getelementptr inbounds i8, i8* %187, i64 1
  store i8* %188, i8** %48, align 8
  store i8 -23, i8* %187, align 1
  br i1 %186, label %189, label %212

189:                                              ; preds = %184
  %190 = load i32, i32* %4, align 4
  %191 = icmp slt i32 %190, 0
  br i1 %191, label %192, label %194

192:                                              ; preds = %189
  %193 = xor i32 %190, -1
  br label %199

194:                                              ; preds = %189
  %195 = icmp eq i32 %190, 0
  br i1 %195, label %198, label %196

196:                                              ; preds = %194
  %197 = add nsw i32 %190, -1
  br label %199

198:                                              ; preds = %194
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14, i64 0, i64 0)) #15
  unreachable

199:                                              ; preds = %192, %196
  %200 = phi i32 [ %193, %192 ], [ %197, %196 ]
  %201 = bitcast i8** %48 to i32**
  %202 = load i32*, i32** %201, align 8
  store i32 %200, i32* %202, align 1
  %203 = load i8*, i8** %48, align 8
  %204 = getelementptr inbounds i8, i8* %203, i64 4
  store i8* %204, i8** %48, align 8
  %205 = ptrtoint i8* %204 to i64
  %206 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %207 = bitcast i8** %206 to i64*
  %208 = load i64, i64* %207, align 8
  %209 = sub i64 %205, %208
  %210 = trunc i64 %209 to i32
  %211 = add nsw i32 %210, -3
  store i32 %211, i32* %4, align 4
  br label %224

212:                                              ; preds = %184
  %213 = bitcast i8** %48 to i64*
  %214 = load i64, i64* %213, align 8
  %215 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %216 = bitcast i8** %215 to i64*
  %217 = load i64, i64* %216, align 8
  %218 = sub i64 %214, %217
  %219 = trunc i64 %218 to i32
  %220 = inttoptr i64 %214 to i32*
  store i32 %219, i32* %220, align 1
  %221 = load i8*, i8** %48, align 8
  %222 = getelementptr inbounds i8, i8* %221, i64 4
  store i8* %222, i8** %48, align 8
  %223 = add nsw i32 %219, 1
  store i32 %223, i32* %4, align 4
  br label %224

224:                                              ; preds = %119, %212, %199, %57, %39, %32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler1jENS0_9ConditionEmNS0_9RelocInfo4ModeE(%"class.v8::internal::Assembler"*, i32, i64, i8 signext) local_unnamed_addr #1 align 2 {
  %5 = alloca %"class.v8::internal::RelocInfo", align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %14, label %12, !prof !11

12:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %13 = load i8*, i8** %6, align 8
  br label %14

14:                                               ; preds = %4, %12
  %15 = phi i8* [ %7, %4 ], [ %13, %12 ]
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %16, i8** %6, align 8
  store i8 15, i8* %15, align 1
  %17 = trunc i32 %1 to i8
  %18 = or i8 %17, -128
  %19 = load i8*, i8** %6, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 1
  store i8* %20, i8** %6, align 8
  store i8 %18, i8* %19, align 1
  %21 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 1
  %22 = load i8, i8* %21, align 1, !range !2
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %24, label %38

24:                                               ; preds = %14
  switch i8 %3, label %29 [
    i8 12, label %25
    i8 9, label %25
  ]

25:                                               ; preds = %24, %24
  %26 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 0
  %27 = load i8, i8* %26, align 8, !range !2
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %38, label %29

29:                                               ; preds = %25, %24
  %30 = bitcast %"class.v8::internal::RelocInfo"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %30) #14
  %31 = bitcast i8** %6 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %5, i64 0, i32 0
  store i64 %32, i64* %33, align 8
  %34 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %5, i64 0, i32 1
  store i8 %3, i8* %34, align 8
  %35 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %5, i64 0, i32 2
  %36 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1
  %37 = bitcast i64* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %37, i8 0, i64 24, i1 false)
  call void @_ZN2v88internal15RelocInfoWriter5WriteEPKNS0_9RelocInfoE(%"class.v8::internal::RelocInfoWriter"* %36, %"class.v8::internal::RelocInfo"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %30) #14
  br label %38

38:                                               ; preds = %14, %25, %29
  %39 = trunc i64 %2 to i32
  %40 = bitcast i8** %6 to i32**
  %41 = load i32*, i32** %40, align 8
  store i32 %39, i32* %41, align 1
  %42 = load i8*, i8** %6, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 4
  store i8* %43, i8** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler1jENS0_9ConditionENS0_6HandleINS0_4CodeEEENS0_9RelocInfo4ModeE(%"class.v8::internal::Assembler"*, i32, i64*, i8 signext) local_unnamed_addr #1 align 2 {
  %5 = alloca %"class.v8::internal::RelocInfo", align 8
  %6 = alloca %"class.v8::internal::RelocInfo", align 8
  switch i32 %1, label %36 [
    i32 16, label %7
    i32 17, label %77
  ]

7:                                                ; preds = %4
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 -32
  %13 = icmp ult i8* %9, %12
  br i1 %13, label %16, label %14, !prof !11

14:                                               ; preds = %7
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %15 = load i8*, i8** %8, align 8
  br label %16

16:                                               ; preds = %14, %7
  %17 = phi i8* [ %9, %7 ], [ %15, %14 ]
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %8, align 8
  store i8 -23, i8* %17, align 1
  %19 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 1
  %20 = load i8, i8* %19, align 1, !range !2
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %22, label %69

22:                                               ; preds = %16
  switch i8 %3, label %27 [
    i8 12, label %23
    i8 9, label %23
  ]

23:                                               ; preds = %22, %22
  %24 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 0
  %25 = load i8, i8* %24, align 8, !range !2
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %69, label %27

27:                                               ; preds = %23, %22
  %28 = bitcast %"class.v8::internal::RelocInfo"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %28) #14
  %29 = bitcast i8** %8 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %6, i64 0, i32 0
  store i64 %30, i64* %31, align 8
  %32 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %6, i64 0, i32 1
  store i8 %3, i8* %32, align 8
  %33 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %6, i64 0, i32 2
  %34 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1
  %35 = bitcast i64* %33 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 24, i1 false) #14
  call void @_ZN2v88internal15RelocInfoWriter5WriteEPKNS0_9RelocInfoE(%"class.v8::internal::RelocInfoWriter"* %34, %"class.v8::internal::RelocInfo"* nonnull %6) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %28) #14
  br label %69

36:                                               ; preds = %4
  %37 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %38 = load i8*, i8** %37, align 8
  %39 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %40 = load i8*, i8** %39, align 8
  %41 = getelementptr inbounds i8, i8* %40, i64 -32
  %42 = icmp ult i8* %38, %41
  br i1 %42, label %45, label %43, !prof !11

43:                                               ; preds = %36
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %44 = load i8*, i8** %37, align 8
  br label %45

45:                                               ; preds = %36, %43
  %46 = phi i8* [ %38, %36 ], [ %44, %43 ]
  %47 = getelementptr inbounds i8, i8* %46, i64 1
  store i8* %47, i8** %37, align 8
  store i8 15, i8* %46, align 1
  %48 = trunc i32 %1 to i8
  %49 = or i8 %48, -128
  %50 = load i8*, i8** %37, align 8
  %51 = getelementptr inbounds i8, i8* %50, i64 1
  store i8* %51, i8** %37, align 8
  store i8 %49, i8* %50, align 1
  %52 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 1
  %53 = load i8, i8* %52, align 1, !range !2
  %54 = icmp eq i8 %53, 0
  br i1 %54, label %55, label %69

55:                                               ; preds = %45
  switch i8 %3, label %60 [
    i8 12, label %56
    i8 9, label %56
  ]

56:                                               ; preds = %55, %55
  %57 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 0
  %58 = load i8, i8* %57, align 8, !range !2
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %69, label %60

60:                                               ; preds = %56, %55
  %61 = bitcast %"class.v8::internal::RelocInfo"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %61) #14
  %62 = bitcast i8** %37 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %5, i64 0, i32 0
  store i64 %63, i64* %64, align 8
  %65 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %5, i64 0, i32 1
  store i8 %3, i8* %65, align 8
  %66 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %5, i64 0, i32 2
  %67 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1
  %68 = bitcast i64* %66 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %68, i8 0, i64 24, i1 false)
  call void @_ZN2v88internal15RelocInfoWriter5WriteEPKNS0_9RelocInfoE(%"class.v8::internal::RelocInfoWriter"* %67, %"class.v8::internal::RelocInfo"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %61) #14
  br label %69

69:                                               ; preds = %60, %56, %45, %27, %23, %16
  %70 = phi i8** [ %8, %16 ], [ %8, %23 ], [ %8, %27 ], [ %37, %45 ], [ %37, %56 ], [ %37, %60 ]
  %71 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0
  %72 = call i32 @_ZN2v88internal13AssemblerBase13AddCodeTargetENS0_6HandleINS0_4CodeEEE(%"class.v8::internal::AssemblerBase"* %71, i64* %2) #14
  %73 = bitcast i8** %70 to i32**
  %74 = load i32*, i32** %73, align 8
  store i32 %72, i32* %74, align 1
  %75 = load i8*, i8** %70, align 8
  %76 = getelementptr inbounds i8, i8* %75, i64 4
  store i8* %76, i8** %70, align 8
  br label %77

77:                                               ; preds = %69, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler3jmpENS0_6HandleINS0_4CodeEEENS0_9RelocInfo4ModeE(%"class.v8::internal::Assembler"*, i64*, i8 signext) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::RelocInfo", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %3, %11
  %14 = phi i8* [ %6, %3 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -23, i8* %14, align 1
  %16 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 1
  %17 = load i8, i8* %16, align 1, !range !2
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %19, label %33

19:                                               ; preds = %13
  switch i8 %2, label %24 [
    i8 12, label %20
    i8 9, label %20
  ]

20:                                               ; preds = %19, %19
  %21 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 0
  %22 = load i8, i8* %21, align 8, !range !2
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %33, label %24

24:                                               ; preds = %20, %19
  %25 = bitcast %"class.v8::internal::RelocInfo"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %25) #14
  %26 = bitcast i8** %5 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 0
  store i64 %27, i64* %28, align 8
  %29 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 1
  store i8 %2, i8* %29, align 8
  %30 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 2
  %31 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1
  %32 = bitcast i64* %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 24, i1 false)
  call void @_ZN2v88internal15RelocInfoWriter5WriteEPKNS0_9RelocInfoE(%"class.v8::internal::RelocInfoWriter"* %31, %"class.v8::internal::RelocInfo"* nonnull %4) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %25) #14
  br label %33

33:                                               ; preds = %13, %20, %24
  %34 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0
  %35 = call i32 @_ZN2v88internal13AssemblerBase13AddCodeTargetENS0_6HandleINS0_4CodeEEE(%"class.v8::internal::AssemblerBase"* %34, i64* %1) #14
  %36 = bitcast i8** %5 to i32**
  %37 = load i32*, i32** %36, align 8
  store i32 %35, i32* %37, align 1
  %38 = load i8*, i8** %5, align 8
  %39 = getelementptr inbounds i8, i8* %38, i64 4
  store i8* %39, i8** %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler3jmpEmNS0_9RelocInfo4ModeE(%"class.v8::internal::Assembler"*, i64, i8 signext) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::RelocInfo", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %3, %11
  %14 = phi i8* [ %6, %3 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -23, i8* %14, align 1
  %16 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 1
  %17 = load i8, i8* %16, align 1, !range !2
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %19, label %33

19:                                               ; preds = %13
  switch i8 %2, label %24 [
    i8 12, label %20
    i8 9, label %20
  ]

20:                                               ; preds = %19, %19
  %21 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 0
  %22 = load i8, i8* %21, align 8, !range !2
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %33, label %24

24:                                               ; preds = %20, %19
  %25 = bitcast %"class.v8::internal::RelocInfo"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %25) #14
  %26 = bitcast i8** %5 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 0
  store i64 %27, i64* %28, align 8
  %29 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 1
  store i8 %2, i8* %29, align 8
  %30 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 2
  %31 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1
  %32 = bitcast i64* %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 24, i1 false) #14
  call void @_ZN2v88internal15RelocInfoWriter5WriteEPKNS0_9RelocInfoE(%"class.v8::internal::RelocInfoWriter"* %31, %"class.v8::internal::RelocInfo"* nonnull %4) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %25) #14
  br label %33

33:                                               ; preds = %13, %20, %24
  %34 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 8
  %35 = load i64, i64* %34, align 8
  %36 = sub i64 %1, %35
  %37 = trunc i64 %36 to i32
  %38 = bitcast i8** %5 to i32**
  %39 = load i32*, i32** %38, align 8
  store i32 %37, i32* %39, align 1
  %40 = load i8*, i8** %5, align 8
  %41 = getelementptr inbounds i8, i8* %40, i64 4
  store i8* %41, i8** %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7jmp_relEi(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %10, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %10

10:                                               ; preds = %2, %9
  %11 = sext i32 %1 to i64
  %12 = add nsw i64 %11, 126
  %13 = icmp ult i64 %12, 256
  br i1 %13, label %14, label %25

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 11
  %16 = load i8, i8* %15, align 8, !range !2
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %18, label %25

18:                                               ; preds = %14
  %19 = load i8*, i8** %3, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 1
  store i8* %20, i8** %3, align 8
  store i8 -21, i8* %19, align 1
  %21 = trunc i32 %1 to i8
  %22 = add i8 %21, -2
  %23 = load i8*, i8** %3, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %3, align 8
  store i8 %22, i8* %23, align 1
  br label %33

25:                                               ; preds = %14, %10
  %26 = load i8*, i8** %3, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %3, align 8
  store i8 -23, i8* %26, align 1
  %28 = add nsw i32 %1, -5
  %29 = bitcast i8** %3 to i32**
  %30 = load i32*, i32** %29, align 8
  store i32 %28, i32* %30, align 1
  %31 = load i8*, i8** %3, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 4
  store i8* %32, i8** %3, align 8
  br label %33

33:                                               ; preds = %25, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler3jmpENS0_8RegisterE(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %10, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %10

10:                                               ; preds = %2, %9
  %11 = icmp ult i32 %1, 8
  br i1 %11, label %15, label %12

12:                                               ; preds = %10
  %13 = load i8*, i8** %3, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %3, align 8
  store i8 65, i8* %13, align 1
  br label %15

15:                                               ; preds = %10, %12
  %16 = load i8*, i8** %3, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %17, i8** %3, align 8
  store i8 -1, i8* %16, align 1
  %18 = trunc i32 %1 to i8
  %19 = and i8 %18, 7
  %20 = or i8 %19, -32
  %21 = load i8*, i8** %3, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %3, align 8
  store i8 %20, i8* %21, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler3jmpENS0_7OperandE(%"class.v8::internal::Assembler"*, i64, i32) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::Operand", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %3, %11
  %13 = trunc i64 %1 to i8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %12
  %16 = or i8 %13, 64
  %17 = load i8*, i8** %5, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %5, align 8
  store i8 %16, i8* %17, align 1
  br label %19

19:                                               ; preds = %12, %15
  %20 = load i8*, i8** %5, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 1
  store i8* %21, i8** %5, align 8
  store i8 -1, i8* %20, align 1
  %22 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %22)
  %23 = bitcast %"class.v8::internal::Operand"* %4 to i64*
  store i64 %1, i64* %23, align 8
  %24 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 7
  %25 = bitcast i8* %24 to i32*
  store i32 %2, i32* %25, align 1
  %26 = lshr i32 %2, 16
  %27 = and i32 %26, 255
  %28 = lshr i64 %1, 8
  %29 = trunc i64 %28 to i8
  %30 = or i8 %29, 32
  %31 = load i8*, i8** %5, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %32, i8** %5, align 8
  store i8 %30, i8* %31, align 1
  %33 = icmp eq i8 %29, 5
  %34 = lshr i64 %1, 16
  %35 = trunc i64 %34 to i8
  br i1 %33, label %51, label %36

36:                                               ; preds = %19
  %37 = trunc i32 %26 to i8
  %38 = icmp ugt i8 %37, 1
  br i1 %38, label %39, label %138

39:                                               ; preds = %36
  %40 = zext i32 %27 to i64
  %41 = load i8*, i8** %5, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %42, i8** %5, align 8
  store i8 %35, i8* %41, align 1
  %43 = icmp eq i32 %27, 2
  br i1 %43, label %138, label %44

44:                                               ; preds = %39
  %45 = add nsw i64 %40, -2
  %46 = add nsw i64 %40, -3
  %47 = and i64 %45, 3
  %48 = icmp ult i64 %46, 3
  br i1 %48, label %125, label %49

49:                                               ; preds = %44
  %50 = sub nsw i64 %45, %47
  br label %100

51:                                               ; preds = %19
  %52 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 1
  %53 = bitcast i8* %52 to %"class.v8::internal::Label"**
  %54 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %53, align 1
  %55 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %54, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = icmp slt i32 %56, 0
  br i1 %57, label %58, label %73

58:                                               ; preds = %51
  %59 = bitcast i8** %5 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %62 = bitcast i8** %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = sub i64 %60, %63
  %65 = trunc i64 %64 to i32
  %66 = ashr i32 %2, 24
  %67 = add nsw i32 %66, -5
  %68 = sub i32 %67, %56
  %69 = sub i32 %68, %65
  %70 = inttoptr i64 %60 to i32*
  store i32 %69, i32* %70, align 1
  %71 = load i8*, i8** %5, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 4
  store i8* %72, i8** %5, align 8
  br label %138

73:                                               ; preds = %51
  %74 = icmp eq i32 %56, 0
  br i1 %74, label %88, label %75

75:                                               ; preds = %73
  %76 = add nsw i32 %56, -1
  %77 = bitcast i8** %5 to i32**
  %78 = load i32*, i32** %77, align 8
  store i32 %76, i32* %78, align 1
  %79 = load i8*, i8** %5, align 8
  %80 = getelementptr inbounds i8, i8* %79, i64 4
  store i8* %80, i8** %5, align 8
  %81 = ptrtoint i8* %80 to i64
  %82 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %83 = bitcast i8** %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = sub i64 %81, %84
  %86 = trunc i64 %85 to i32
  %87 = add i32 %86, -3
  store i32 %87, i32* %55, align 4
  br label %138

88:                                               ; preds = %73
  %89 = bitcast i8** %5 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %92 = bitcast i8** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = sub i64 %90, %93
  %95 = trunc i64 %94 to i32
  %96 = inttoptr i64 %90 to i32*
  store i32 %95, i32* %96, align 1
  %97 = load i8*, i8** %5, align 8
  %98 = getelementptr inbounds i8, i8* %97, i64 4
  store i8* %98, i8** %5, align 8
  %99 = add nsw i32 %95, 1
  store i32 %99, i32* %55, align 4
  br label %138

100:                                              ; preds = %100, %49
  %101 = phi i64 [ 2, %49 ], [ %122, %100 ]
  %102 = phi i64 [ %50, %49 ], [ %123, %100 ]
  %103 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %101
  %104 = load i8, i8* %103, align 1
  %105 = load i8*, i8** %5, align 8
  %106 = getelementptr inbounds i8, i8* %105, i64 1
  store i8* %106, i8** %5, align 8
  store i8 %104, i8* %105, align 1
  %107 = or i64 %101, 1
  %108 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = load i8*, i8** %5, align 8
  %111 = getelementptr inbounds i8, i8* %110, i64 1
  store i8* %111, i8** %5, align 8
  store i8 %109, i8* %110, align 1
  %112 = add nuw nsw i64 %101, 2
  %113 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = load i8*, i8** %5, align 8
  %116 = getelementptr inbounds i8, i8* %115, i64 1
  store i8* %116, i8** %5, align 8
  store i8 %114, i8* %115, align 1
  %117 = add nuw nsw i64 %101, 3
  %118 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = load i8*, i8** %5, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 1
  store i8* %121, i8** %5, align 8
  store i8 %119, i8* %120, align 1
  %122 = add nuw nsw i64 %101, 4
  %123 = add i64 %102, -4
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %100

125:                                              ; preds = %100, %44
  %126 = phi i64 [ 2, %44 ], [ %122, %100 ]
  %127 = icmp eq i64 %47, 0
  br i1 %127, label %138, label %128

128:                                              ; preds = %125, %128
  %129 = phi i64 [ %135, %128 ], [ %126, %125 ]
  %130 = phi i64 [ %136, %128 ], [ %47, %125 ]
  %131 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %129
  %132 = load i8, i8* %131, align 1
  %133 = load i8*, i8** %5, align 8
  %134 = getelementptr inbounds i8, i8* %133, i64 1
  store i8* %134, i8** %5, align 8
  store i8 %132, i8* %133, align 1
  %135 = add nuw nsw i64 %129, 1
  %136 = add i64 %130, -1
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %128, !llvm.loop !31

138:                                              ; preds = %125, %128, %39, %36, %58, %75, %88
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %22)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8emit_leaENS0_8RegisterENS0_7OperandEi(%"class.v8::internal::Assembler"*, i32, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %13, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %13

13:                                               ; preds = %5, %12
  %14 = icmp eq i32 %4, 8
  %15 = trunc i64 %2 to i8
  %16 = lshr i32 %1, 1
  %17 = trunc i32 %16 to i8
  br i1 %14, label %18, label %24

18:                                               ; preds = %13
  %19 = and i8 %17, -76
  %20 = or i8 %19, %15
  %21 = or i8 %20, 72
  %22 = load i8*, i8** %6, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %6, align 8
  store i8 %21, i8* %22, align 1
  br label %32

24:                                               ; preds = %13
  %25 = and i8 %17, -4
  %26 = or i8 %25, %15
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %24
  %29 = or i8 %26, 64
  %30 = load i8*, i8** %6, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %6, align 8
  store i8 %29, i8* %30, align 1
  br label %32

32:                                               ; preds = %18, %24, %28
  %33 = load i8*, i8** %6, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %6, align 8
  store i8 -115, i8* %33, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8load_raxEmNS0_9RelocInfo4ModeE(%"class.v8::internal::Assembler"*, i64, i8 signext) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::RelocInfo", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %3, %11
  %14 = phi i8* [ %6, %3 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 72, i8* %14, align 1
  %16 = load i8*, i8** %5, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %17, i8** %5, align 8
  store i8 -95, i8* %16, align 1
  %18 = icmp eq i8 %2, 0
  br i1 %18, label %37, label %19

19:                                               ; preds = %13
  %20 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 1
  %21 = load i8, i8* %20, align 1, !range !2
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %23, label %37

23:                                               ; preds = %19
  switch i8 %2, label %28 [
    i8 12, label %24
    i8 9, label %24
  ]

24:                                               ; preds = %23, %23
  %25 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 0
  %26 = load i8, i8* %25, align 8, !range !2
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %37, label %28

28:                                               ; preds = %24, %23
  %29 = bitcast %"class.v8::internal::RelocInfo"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %29) #14
  %30 = bitcast i8** %5 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 0
  store i64 %31, i64* %32, align 8
  %33 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 1
  store i8 %2, i8* %33, align 8
  %34 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 2
  %35 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1
  %36 = bitcast i64* %34 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 24, i1 false) #14
  call void @_ZN2v88internal15RelocInfoWriter5WriteEPKNS0_9RelocInfoE(%"class.v8::internal::RelocInfoWriter"* %35, %"class.v8::internal::RelocInfo"* nonnull %4) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %29) #14
  br label %37

37:                                               ; preds = %13, %19, %24, %28
  %38 = bitcast i8** %5 to i64**
  %39 = load i64*, i64** %38, align 8
  store i64 %1, i64* %39, align 1
  %40 = load i8*, i8** %5, align 8
  %41 = getelementptr inbounds i8, i8* %40, i64 8
  store i8* %41, i8** %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8load_raxENS0_17ExternalReferenceE(%"class.v8::internal::Assembler"*, i64) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.v8::internal::RelocInfo", align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %10, %2
  %13 = phi i8* [ %5, %2 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 72, i8* %13, align 1
  %15 = load i8*, i8** %4, align 8
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %16, i8** %4, align 8
  store i8 -95, i8* %15, align 1
  %17 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 1
  %18 = load i8, i8* %17, align 1, !range !2
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %20, label %33

20:                                               ; preds = %12
  %21 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 0
  %22 = load i8, i8* %21, align 8, !range !2
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %33, label %24

24:                                               ; preds = %20
  %25 = bitcast %"class.v8::internal::RelocInfo"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %25) #14
  %26 = bitcast i8** %4 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %3, i64 0, i32 0
  store i64 %27, i64* %28, align 8
  %29 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %3, i64 0, i32 1
  store i8 9, i8* %29, align 8
  %30 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %3, i64 0, i32 2
  %31 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1
  %32 = bitcast i64* %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 24, i1 false) #14
  call void @_ZN2v88internal15RelocInfoWriter5WriteEPKNS0_9RelocInfoE(%"class.v8::internal::RelocInfoWriter"* %31, %"class.v8::internal::RelocInfo"* nonnull %3) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %25) #14
  br label %33

33:                                               ; preds = %12, %20, %24
  %34 = bitcast i8** %4 to i64**
  %35 = load i64*, i64** %34, align 8
  store i64 %1, i64* %35, align 1
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 8
  store i8* %37, i8** %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5leaveEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -55, i8* %11, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4movbENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %4, %11
  %13 = icmp slt i32 %1, 4
  %14 = trunc i64 %2 to i8
  %15 = lshr i32 %1, 1
  %16 = trunc i32 %15 to i8
  br i1 %13, label %23, label %17

17:                                               ; preds = %12
  %18 = and i8 %16, -68
  %19 = or i8 %18, %14
  %20 = or i8 %19, 64
  %21 = load i8*, i8** %5, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %5, align 8
  store i8 %20, i8* %21, align 1
  br label %31

23:                                               ; preds = %12
  %24 = and i8 %16, -4
  %25 = or i8 %24, %14
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %31, label %27

27:                                               ; preds = %23
  %28 = or i8 %25, 64
  %29 = load i8*, i8** %5, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %5, align 8
  store i8 %28, i8* %29, align 1
  br label %31

31:                                               ; preds = %27, %23, %17
  %32 = load i8*, i8** %5, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %5, align 8
  store i8 -118, i8* %32, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4movbENS0_8RegisterENS0_9ImmediateE(%"class.v8::internal::Assembler"*, i32, i64) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %11, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %11

11:                                               ; preds = %3, %10
  %12 = icmp slt i32 %1, 4
  br i1 %12, label %19, label %13

13:                                               ; preds = %11
  %14 = lshr i32 %1, 3
  %15 = trunc i32 %14 to i8
  %16 = or i8 %15, 64
  %17 = load i8*, i8** %4, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %4, align 8
  store i8 %16, i8* %17, align 1
  br label %19

19:                                               ; preds = %13, %11
  %20 = trunc i32 %1 to i8
  %21 = and i8 %20, 7
  %22 = or i8 %21, -80
  %23 = load i8*, i8** %4, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %4, align 8
  store i8 %22, i8* %23, align 1
  %25 = trunc i64 %2 to i8
  %26 = load i8*, i8** %4, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %4, align 8
  store i8 %25, i8* %26, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4movbENS0_7OperandENS0_8RegisterE(%"class.v8::internal::Assembler"*, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %4, %11
  %13 = icmp slt i32 %3, 4
  %14 = trunc i64 %1 to i8
  %15 = lshr i32 %3, 1
  %16 = trunc i32 %15 to i8
  br i1 %13, label %23, label %17

17:                                               ; preds = %12
  %18 = and i8 %16, -68
  %19 = or i8 %18, %14
  %20 = or i8 %19, 64
  %21 = load i8*, i8** %5, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %5, align 8
  store i8 %20, i8* %21, align 1
  br label %31

23:                                               ; preds = %12
  %24 = and i8 %16, -4
  %25 = or i8 %24, %14
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %31, label %27

27:                                               ; preds = %23
  %28 = or i8 %25, 64
  %29 = load i8*, i8** %5, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %5, align 8
  store i8 %28, i8* %29, align 1
  br label %31

31:                                               ; preds = %27, %23, %17
  %32 = load i8*, i8** %5, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %5, align 8
  store i8 -120, i8* %32, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %3, i64 %1, i32 %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4movbENS0_7OperandENS0_9ImmediateE(%"class.v8::internal::Assembler"*, i64, i32, i64) local_unnamed_addr #1 align 2 {
  %5 = alloca %"class.v8::internal::Operand", align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %13, label %12, !prof !11

12:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %13

13:                                               ; preds = %4, %12
  %14 = trunc i64 %1 to i8
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %20, label %16

16:                                               ; preds = %13
  %17 = or i8 %14, 64
  %18 = load i8*, i8** %6, align 8
  %19 = getelementptr inbounds i8, i8* %18, i64 1
  store i8* %19, i8** %6, align 8
  store i8 %17, i8* %18, align 1
  br label %20

20:                                               ; preds = %13, %16
  %21 = load i8*, i8** %6, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %6, align 8
  store i8 -58, i8* %21, align 1
  %23 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %23)
  %24 = bitcast %"class.v8::internal::Operand"* %5 to i64*
  store i64 %1, i64* %24, align 8
  %25 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 7
  %26 = bitcast i8* %25 to i32*
  store i32 %2, i32* %26, align 1
  %27 = lshr i32 %2, 16
  %28 = and i32 %27, 255
  %29 = lshr i64 %1, 8
  %30 = trunc i64 %29 to i8
  %31 = load i8*, i8** %6, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %32, i8** %6, align 8
  store i8 %30, i8* %31, align 1
  %33 = icmp eq i8 %30, 5
  %34 = lshr i64 %1, 16
  %35 = trunc i64 %34 to i8
  br i1 %33, label %51, label %36

36:                                               ; preds = %20
  %37 = trunc i32 %27 to i8
  %38 = icmp ugt i8 %37, 1
  br i1 %38, label %39, label %138

39:                                               ; preds = %36
  %40 = zext i32 %28 to i64
  %41 = load i8*, i8** %6, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %42, i8** %6, align 8
  store i8 %35, i8* %41, align 1
  %43 = icmp eq i32 %28, 2
  br i1 %43, label %138, label %44

44:                                               ; preds = %39
  %45 = add nsw i64 %40, -2
  %46 = add nsw i64 %40, -3
  %47 = and i64 %45, 3
  %48 = icmp ult i64 %46, 3
  br i1 %48, label %125, label %49

49:                                               ; preds = %44
  %50 = sub nsw i64 %45, %47
  br label %100

51:                                               ; preds = %20
  %52 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 1
  %53 = bitcast i8* %52 to %"class.v8::internal::Label"**
  %54 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %53, align 1
  %55 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %54, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = icmp slt i32 %56, 0
  br i1 %57, label %58, label %73

58:                                               ; preds = %51
  %59 = bitcast i8** %6 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %62 = bitcast i8** %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = sub i64 %60, %63
  %65 = trunc i64 %64 to i32
  %66 = ashr i32 %2, 24
  %67 = add nsw i32 %66, -5
  %68 = sub i32 %67, %56
  %69 = sub i32 %68, %65
  %70 = inttoptr i64 %60 to i32*
  store i32 %69, i32* %70, align 1
  %71 = load i8*, i8** %6, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 4
  store i8* %72, i8** %6, align 8
  br label %138

73:                                               ; preds = %51
  %74 = icmp eq i32 %56, 0
  br i1 %74, label %88, label %75

75:                                               ; preds = %73
  %76 = add nsw i32 %56, -1
  %77 = bitcast i8** %6 to i32**
  %78 = load i32*, i32** %77, align 8
  store i32 %76, i32* %78, align 1
  %79 = load i8*, i8** %6, align 8
  %80 = getelementptr inbounds i8, i8* %79, i64 4
  store i8* %80, i8** %6, align 8
  %81 = ptrtoint i8* %80 to i64
  %82 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %83 = bitcast i8** %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = sub i64 %81, %84
  %86 = trunc i64 %85 to i32
  %87 = add i32 %86, -3
  store i32 %87, i32* %55, align 4
  br label %138

88:                                               ; preds = %73
  %89 = bitcast i8** %6 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %92 = bitcast i8** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = sub i64 %90, %93
  %95 = trunc i64 %94 to i32
  %96 = inttoptr i64 %90 to i32*
  store i32 %95, i32* %96, align 1
  %97 = load i8*, i8** %6, align 8
  %98 = getelementptr inbounds i8, i8* %97, i64 4
  store i8* %98, i8** %6, align 8
  %99 = add nsw i32 %95, 1
  store i32 %99, i32* %55, align 4
  br label %138

100:                                              ; preds = %100, %49
  %101 = phi i64 [ 2, %49 ], [ %122, %100 ]
  %102 = phi i64 [ %50, %49 ], [ %123, %100 ]
  %103 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %101
  %104 = load i8, i8* %103, align 1
  %105 = load i8*, i8** %6, align 8
  %106 = getelementptr inbounds i8, i8* %105, i64 1
  store i8* %106, i8** %6, align 8
  store i8 %104, i8* %105, align 1
  %107 = or i64 %101, 1
  %108 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = load i8*, i8** %6, align 8
  %111 = getelementptr inbounds i8, i8* %110, i64 1
  store i8* %111, i8** %6, align 8
  store i8 %109, i8* %110, align 1
  %112 = add nuw nsw i64 %101, 2
  %113 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = load i8*, i8** %6, align 8
  %116 = getelementptr inbounds i8, i8* %115, i64 1
  store i8* %116, i8** %6, align 8
  store i8 %114, i8* %115, align 1
  %117 = add nuw nsw i64 %101, 3
  %118 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = load i8*, i8** %6, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 1
  store i8* %121, i8** %6, align 8
  store i8 %119, i8* %120, align 1
  %122 = add nuw nsw i64 %101, 4
  %123 = add i64 %102, -4
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %100

125:                                              ; preds = %100, %44
  %126 = phi i64 [ 2, %44 ], [ %122, %100 ]
  %127 = icmp eq i64 %47, 0
  br i1 %127, label %138, label %128

128:                                              ; preds = %125, %128
  %129 = phi i64 [ %135, %128 ], [ %126, %125 ]
  %130 = phi i64 [ %136, %128 ], [ %47, %125 ]
  %131 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %129
  %132 = load i8, i8* %131, align 1
  %133 = load i8*, i8** %6, align 8
  %134 = getelementptr inbounds i8, i8* %133, i64 1
  store i8* %134, i8** %6, align 8
  store i8 %132, i8* %133, align 1
  %135 = add nuw nsw i64 %129, 1
  %136 = add i64 %130, -1
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %128, !llvm.loop !32

138:                                              ; preds = %125, %128, %39, %36, %58, %75, %88
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %23)
  %139 = trunc i64 %3 to i8
  %140 = load i8*, i8** %6, align 8
  %141 = getelementptr inbounds i8, i8* %140, i64 1
  store i8* %141, i8** %6, align 8
  store i8 %139, i8* %140, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4movwENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 102, i8* %14, align 1
  %16 = trunc i64 %2 to i8
  %17 = lshr i32 %1, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, -4
  %20 = or i8 %19, %16
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %13
  %23 = or i8 %20, 64
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %13, %22
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 -117, i8* %27, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4movwENS0_7OperandENS0_8RegisterE(%"class.v8::internal::Assembler"*, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 102, i8* %14, align 1
  %16 = trunc i64 %1 to i8
  %17 = lshr i32 %3, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, -4
  %20 = or i8 %19, %16
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %13
  %23 = or i8 %20, 64
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %13, %22
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 -119, i8* %27, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %3, i64 %1, i32 %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4movwENS0_7OperandENS0_9ImmediateE(%"class.v8::internal::Assembler"*, i64, i32, i64) local_unnamed_addr #1 align 2 {
  %5 = alloca %"class.v8::internal::Operand", align 8
  %6 = trunc i64 %3 to i32
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 -32
  %12 = icmp ult i8* %8, %11
  br i1 %12, label %15, label %13, !prof !11

13:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %14 = load i8*, i8** %7, align 8
  br label %15

15:                                               ; preds = %4, %13
  %16 = phi i8* [ %8, %4 ], [ %14, %13 ]
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %17, i8** %7, align 8
  store i8 102, i8* %16, align 1
  %18 = trunc i64 %1 to i8
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %24, label %20

20:                                               ; preds = %15
  %21 = or i8 %18, 64
  %22 = load i8*, i8** %7, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %7, align 8
  store i8 %21, i8* %22, align 1
  br label %24

24:                                               ; preds = %15, %20
  %25 = load i8*, i8** %7, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %7, align 8
  store i8 -57, i8* %25, align 1
  %27 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %27)
  %28 = bitcast %"class.v8::internal::Operand"* %5 to i64*
  store i64 %1, i64* %28, align 8
  %29 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 7
  %30 = bitcast i8* %29 to i32*
  store i32 %2, i32* %30, align 1
  %31 = lshr i32 %2, 16
  %32 = and i32 %31, 255
  %33 = lshr i64 %1, 8
  %34 = trunc i64 %33 to i8
  %35 = load i8*, i8** %7, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 1
  store i8* %36, i8** %7, align 8
  store i8 %34, i8* %35, align 1
  %37 = icmp eq i8 %34, 5
  %38 = lshr i64 %1, 16
  %39 = trunc i64 %38 to i8
  br i1 %37, label %55, label %40

40:                                               ; preds = %24
  %41 = trunc i32 %31 to i8
  %42 = icmp ugt i8 %41, 1
  br i1 %42, label %43, label %142

43:                                               ; preds = %40
  %44 = zext i32 %32 to i64
  %45 = load i8*, i8** %7, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 1
  store i8* %46, i8** %7, align 8
  store i8 %39, i8* %45, align 1
  %47 = icmp eq i32 %32, 2
  br i1 %47, label %142, label %48

48:                                               ; preds = %43
  %49 = add nsw i64 %44, -2
  %50 = add nsw i64 %44, -3
  %51 = and i64 %49, 3
  %52 = icmp ult i64 %50, 3
  br i1 %52, label %129, label %53

53:                                               ; preds = %48
  %54 = sub nsw i64 %49, %51
  br label %104

55:                                               ; preds = %24
  %56 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 1
  %57 = bitcast i8* %56 to %"class.v8::internal::Label"**
  %58 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %57, align 1
  %59 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %58, i64 0, i32 0
  %60 = load i32, i32* %59, align 4
  %61 = icmp slt i32 %60, 0
  br i1 %61, label %62, label %77

62:                                               ; preds = %55
  %63 = bitcast i8** %7 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %66 = bitcast i8** %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = sub i64 %64, %67
  %69 = trunc i64 %68 to i32
  %70 = ashr i32 %2, 24
  %71 = add nsw i32 %70, -5
  %72 = sub i32 %71, %60
  %73 = sub i32 %72, %69
  %74 = inttoptr i64 %64 to i32*
  store i32 %73, i32* %74, align 1
  %75 = load i8*, i8** %7, align 8
  %76 = getelementptr inbounds i8, i8* %75, i64 4
  store i8* %76, i8** %7, align 8
  br label %142

77:                                               ; preds = %55
  %78 = icmp eq i32 %60, 0
  br i1 %78, label %92, label %79

79:                                               ; preds = %77
  %80 = add nsw i32 %60, -1
  %81 = bitcast i8** %7 to i32**
  %82 = load i32*, i32** %81, align 8
  store i32 %80, i32* %82, align 1
  %83 = load i8*, i8** %7, align 8
  %84 = getelementptr inbounds i8, i8* %83, i64 4
  store i8* %84, i8** %7, align 8
  %85 = ptrtoint i8* %84 to i64
  %86 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %87 = bitcast i8** %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = sub i64 %85, %88
  %90 = trunc i64 %89 to i32
  %91 = add i32 %90, -3
  store i32 %91, i32* %59, align 4
  br label %142

92:                                               ; preds = %77
  %93 = bitcast i8** %7 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %96 = bitcast i8** %95 to i64*
  %97 = load i64, i64* %96, align 8
  %98 = sub i64 %94, %97
  %99 = trunc i64 %98 to i32
  %100 = inttoptr i64 %94 to i32*
  store i32 %99, i32* %100, align 1
  %101 = load i8*, i8** %7, align 8
  %102 = getelementptr inbounds i8, i8* %101, i64 4
  store i8* %102, i8** %7, align 8
  %103 = add nsw i32 %99, 1
  store i32 %103, i32* %59, align 4
  br label %142

104:                                              ; preds = %104, %53
  %105 = phi i64 [ 2, %53 ], [ %126, %104 ]
  %106 = phi i64 [ %54, %53 ], [ %127, %104 ]
  %107 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %105
  %108 = load i8, i8* %107, align 1
  %109 = load i8*, i8** %7, align 8
  %110 = getelementptr inbounds i8, i8* %109, i64 1
  store i8* %110, i8** %7, align 8
  store i8 %108, i8* %109, align 1
  %111 = or i64 %105, 1
  %112 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %111
  %113 = load i8, i8* %112, align 1
  %114 = load i8*, i8** %7, align 8
  %115 = getelementptr inbounds i8, i8* %114, i64 1
  store i8* %115, i8** %7, align 8
  store i8 %113, i8* %114, align 1
  %116 = add nuw nsw i64 %105, 2
  %117 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %116
  %118 = load i8, i8* %117, align 1
  %119 = load i8*, i8** %7, align 8
  %120 = getelementptr inbounds i8, i8* %119, i64 1
  store i8* %120, i8** %7, align 8
  store i8 %118, i8* %119, align 1
  %121 = add nuw nsw i64 %105, 3
  %122 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %121
  %123 = load i8, i8* %122, align 1
  %124 = load i8*, i8** %7, align 8
  %125 = getelementptr inbounds i8, i8* %124, i64 1
  store i8* %125, i8** %7, align 8
  store i8 %123, i8* %124, align 1
  %126 = add nuw nsw i64 %105, 4
  %127 = add i64 %106, -4
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %129, label %104

129:                                              ; preds = %104, %48
  %130 = phi i64 [ 2, %48 ], [ %126, %104 ]
  %131 = icmp eq i64 %51, 0
  br i1 %131, label %142, label %132

132:                                              ; preds = %129, %132
  %133 = phi i64 [ %139, %132 ], [ %130, %129 ]
  %134 = phi i64 [ %140, %132 ], [ %51, %129 ]
  %135 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %133
  %136 = load i8, i8* %135, align 1
  %137 = load i8*, i8** %7, align 8
  %138 = getelementptr inbounds i8, i8* %137, i64 1
  store i8* %138, i8** %7, align 8
  store i8 %136, i8* %137, align 1
  %139 = add nuw nsw i64 %133, 1
  %140 = add i64 %134, -1
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %142, label %132, !llvm.loop !33

142:                                              ; preds = %129, %132, %43, %40, %62, %79, %92
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %27)
  %143 = trunc i64 %3 to i8
  %144 = load i8*, i8** %7, align 8
  %145 = getelementptr inbounds i8, i8* %144, i64 1
  store i8* %145, i8** %7, align 8
  store i8 %143, i8* %144, align 1
  %146 = lshr i32 %6, 8
  %147 = trunc i32 %146 to i8
  %148 = load i8*, i8** %7, align 8
  %149 = getelementptr inbounds i8, i8* %148, i64 1
  store i8* %149, i8** %7, align 8
  store i8 %147, i8* %148, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8emit_movENS0_8RegisterENS0_7OperandEi(%"class.v8::internal::Assembler"*, i32, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %13, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %13

13:                                               ; preds = %5, %12
  %14 = icmp eq i32 %4, 8
  %15 = trunc i64 %2 to i8
  %16 = lshr i32 %1, 1
  %17 = trunc i32 %16 to i8
  br i1 %14, label %18, label %24

18:                                               ; preds = %13
  %19 = and i8 %17, -76
  %20 = or i8 %19, %15
  %21 = or i8 %20, 72
  %22 = load i8*, i8** %6, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %6, align 8
  store i8 %21, i8* %22, align 1
  br label %32

24:                                               ; preds = %13
  %25 = and i8 %17, -4
  %26 = or i8 %25, %15
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %24
  %29 = or i8 %26, 64
  %30 = load i8*, i8** %6, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %6, align 8
  store i8 %29, i8* %30, align 1
  br label %32

32:                                               ; preds = %18, %24, %28
  %33 = load i8*, i8** %6, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %6, align 8
  store i8 -117, i8* %33, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8emit_movENS0_8RegisterES2_i(%"class.v8::internal::Assembler"*, i32, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %4, %11
  %13 = and i32 %2, 7
  %14 = icmp eq i32 %13, 4
  %15 = icmp eq i32 %3, 8
  br i1 %14, label %16, label %46

16:                                               ; preds = %12
  %17 = ashr i32 %2, 3
  %18 = shl nsw i32 %17, 2
  br i1 %15, label %19, label %26

19:                                               ; preds = %16
  %20 = lshr i32 %1, 3
  %21 = or i32 %18, %20
  %22 = trunc i32 %21 to i8
  %23 = or i8 %22, 72
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 %23, i8* %24, align 1
  br label %36

26:                                               ; preds = %16
  %27 = ashr i32 %1, 3
  %28 = or i32 %18, %27
  %29 = and i32 %28, 255
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %36, label %31

31:                                               ; preds = %26
  %32 = trunc i32 %28 to i8
  %33 = or i8 %32, 64
  %34 = load i8*, i8** %5, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %5, align 8
  store i8 %33, i8* %34, align 1
  br label %36

36:                                               ; preds = %19, %26, %31
  %37 = load i8*, i8** %5, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  store i8* %38, i8** %5, align 8
  store i8 -119, i8* %37, align 1
  %39 = shl i32 %2, 3
  %40 = and i32 %1, 7
  %41 = or i32 %39, %40
  %42 = trunc i32 %41 to i8
  %43 = or i8 %42, -64
  %44 = load i8*, i8** %5, align 8
  %45 = getelementptr inbounds i8, i8* %44, i64 1
  store i8* %45, i8** %5, align 8
  store i8 %43, i8* %44, align 1
  br label %75

46:                                               ; preds = %12
  %47 = ashr i32 %1, 3
  %48 = shl nsw i32 %47, 2
  br i1 %15, label %49, label %56

49:                                               ; preds = %46
  %50 = lshr i32 %2, 3
  %51 = or i32 %48, %50
  %52 = trunc i32 %51 to i8
  %53 = or i8 %52, 72
  %54 = load i8*, i8** %5, align 8
  %55 = getelementptr inbounds i8, i8* %54, i64 1
  store i8* %55, i8** %5, align 8
  store i8 %53, i8* %54, align 1
  br label %66

56:                                               ; preds = %46
  %57 = ashr i32 %2, 3
  %58 = or i32 %48, %57
  %59 = and i32 %58, 255
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %66, label %61

61:                                               ; preds = %56
  %62 = trunc i32 %58 to i8
  %63 = or i8 %62, 64
  %64 = load i8*, i8** %5, align 8
  %65 = getelementptr inbounds i8, i8* %64, i64 1
  store i8* %65, i8** %5, align 8
  store i8 %63, i8* %64, align 1
  br label %66

66:                                               ; preds = %49, %56, %61
  %67 = load i8*, i8** %5, align 8
  %68 = getelementptr inbounds i8, i8* %67, i64 1
  store i8* %68, i8** %5, align 8
  store i8 -117, i8* %67, align 1
  %69 = shl i32 %1, 3
  %70 = or i32 %13, %69
  %71 = trunc i32 %70 to i8
  %72 = or i8 %71, -64
  %73 = load i8*, i8** %5, align 8
  %74 = getelementptr inbounds i8, i8* %73, i64 1
  store i8* %74, i8** %5, align 8
  store i8 %72, i8* %73, align 1
  br label %75

75:                                               ; preds = %66, %36
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8emit_movENS0_7OperandENS0_8RegisterEi(%"class.v8::internal::Assembler"*, i64, i32, i32, i32) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %13, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %13

13:                                               ; preds = %5, %12
  %14 = icmp eq i32 %4, 8
  %15 = trunc i64 %1 to i8
  %16 = lshr i32 %3, 1
  %17 = trunc i32 %16 to i8
  br i1 %14, label %18, label %24

18:                                               ; preds = %13
  %19 = and i8 %17, -76
  %20 = or i8 %19, %15
  %21 = or i8 %20, 72
  %22 = load i8*, i8** %6, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %6, align 8
  store i8 %21, i8* %22, align 1
  br label %32

24:                                               ; preds = %13
  %25 = and i8 %17, -4
  %26 = or i8 %25, %15
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %24
  %29 = or i8 %26, 64
  %30 = load i8*, i8** %6, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %6, align 8
  store i8 %29, i8* %30, align 1
  br label %32

32:                                               ; preds = %18, %24, %28
  %33 = load i8*, i8** %6, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %6, align 8
  store i8 -119, i8* %33, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %3, i64 %1, i32 %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8emit_movENS0_8RegisterENS0_9ImmediateEi(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = alloca %"class.v8::internal::RelocInfo", align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %13, label %12, !prof !11

12:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %13

13:                                               ; preds = %4, %12
  %14 = icmp eq i32 %3, 8
  br i1 %14, label %20, label %15

15:                                               ; preds = %13
  %16 = icmp ult i32 %1, 8
  br i1 %16, label %33, label %17

17:                                               ; preds = %15
  %18 = load i8*, i8** %6, align 8
  %19 = getelementptr inbounds i8, i8* %18, i64 1
  store i8* %19, i8** %6, align 8
  store i8 65, i8* %18, align 1
  br label %33

20:                                               ; preds = %13
  %21 = lshr i32 %1, 3
  %22 = trunc i32 %21 to i8
  %23 = or i8 %22, 72
  %24 = load i8*, i8** %6, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %6, align 8
  store i8 %23, i8* %24, align 1
  %26 = load i8*, i8** %6, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %6, align 8
  store i8 -57, i8* %26, align 1
  %28 = trunc i32 %1 to i8
  %29 = and i8 %28, 7
  %30 = or i8 %29, -64
  %31 = load i8*, i8** %6, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %32, i8** %6, align 8
  store i8 %30, i8* %31, align 1
  br label %39

33:                                               ; preds = %15, %17
  %34 = trunc i32 %1 to i8
  %35 = and i8 %34, 7
  %36 = or i8 %35, -72
  %37 = load i8*, i8** %6, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  store i8* %38, i8** %6, align 8
  store i8 %36, i8* %37, align 1
  br label %39

39:                                               ; preds = %33, %20
  %40 = trunc i64 %2 to i32
  %41 = lshr i64 %2, 32
  %42 = trunc i64 %41 to i8
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %62, label %44

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 1
  %46 = load i8, i8* %45, align 1, !range !2
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %48, label %62

48:                                               ; preds = %44
  switch i8 %42, label %53 [
    i8 12, label %49
    i8 9, label %49
  ]

49:                                               ; preds = %48, %48
  %50 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 0
  %51 = load i8, i8* %50, align 8, !range !2
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %62, label %53

53:                                               ; preds = %49, %48
  %54 = bitcast %"class.v8::internal::RelocInfo"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %54) #14
  %55 = bitcast i8** %6 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %5, i64 0, i32 0
  store i64 %56, i64* %57, align 8
  %58 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %5, i64 0, i32 1
  store i8 %42, i8* %58, align 8
  %59 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %5, i64 0, i32 2
  %60 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1
  %61 = bitcast i64* %59 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 24, i1 false) #14
  call void @_ZN2v88internal15RelocInfoWriter5WriteEPKNS0_9RelocInfoE(%"class.v8::internal::RelocInfoWriter"* %60, %"class.v8::internal::RelocInfo"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %54) #14
  br label %62

62:                                               ; preds = %39, %44, %49, %53
  %63 = bitcast i8** %6 to i32**
  %64 = load i32*, i32** %63, align 8
  store i32 %40, i32* %64, align 1
  %65 = load i8*, i8** %6, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 4
  store i8* %66, i8** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8emit_movENS0_7OperandENS0_9ImmediateEi(%"class.v8::internal::Assembler"*, i64, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %6 = alloca %"class.v8::internal::Operand", align 8
  %7 = alloca %"class.v8::internal::RelocInfo", align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 -32
  %13 = icmp ult i8* %9, %12
  br i1 %13, label %15, label %14, !prof !11

14:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %15

15:                                               ; preds = %5, %14
  %16 = icmp eq i32 %4, 8
  %17 = trunc i64 %1 to i8
  br i1 %16, label %18, label %22

18:                                               ; preds = %15
  %19 = or i8 %17, 72
  %20 = load i8*, i8** %8, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 1
  store i8* %21, i8** %8, align 8
  store i8 %19, i8* %20, align 1
  br label %28

22:                                               ; preds = %15
  %23 = icmp eq i8 %17, 0
  br i1 %23, label %28, label %24

24:                                               ; preds = %22
  %25 = or i8 %17, 64
  %26 = load i8*, i8** %8, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %8, align 8
  store i8 %25, i8* %26, align 1
  br label %28

28:                                               ; preds = %18, %22, %24
  %29 = load i8*, i8** %8, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %8, align 8
  store i8 -57, i8* %29, align 1
  %31 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %31)
  %32 = bitcast %"class.v8::internal::Operand"* %6 to i64*
  store i64 %1, i64* %32, align 8
  %33 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 7
  %34 = bitcast i8* %33 to i32*
  store i32 %2, i32* %34, align 1
  %35 = lshr i32 %2, 16
  %36 = and i32 %35, 255
  %37 = lshr i64 %1, 8
  %38 = trunc i64 %37 to i8
  %39 = load i8*, i8** %8, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  store i8* %40, i8** %8, align 8
  store i8 %38, i8* %39, align 1
  %41 = icmp eq i8 %38, 5
  %42 = lshr i64 %1, 16
  %43 = trunc i64 %42 to i8
  br i1 %41, label %59, label %44

44:                                               ; preds = %28
  %45 = trunc i32 %35 to i8
  %46 = icmp ugt i8 %45, 1
  br i1 %46, label %47, label %146

47:                                               ; preds = %44
  %48 = zext i32 %36 to i64
  %49 = load i8*, i8** %8, align 8
  %50 = getelementptr inbounds i8, i8* %49, i64 1
  store i8* %50, i8** %8, align 8
  store i8 %43, i8* %49, align 1
  %51 = icmp eq i32 %36, 2
  br i1 %51, label %146, label %52

52:                                               ; preds = %47
  %53 = add nsw i64 %48, -2
  %54 = add nsw i64 %48, -3
  %55 = and i64 %53, 3
  %56 = icmp ult i64 %54, 3
  br i1 %56, label %133, label %57

57:                                               ; preds = %52
  %58 = sub nsw i64 %53, %55
  br label %108

59:                                               ; preds = %28
  %60 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 1
  %61 = bitcast i8* %60 to %"class.v8::internal::Label"**
  %62 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %61, align 1
  %63 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %62, i64 0, i32 0
  %64 = load i32, i32* %63, align 4
  %65 = icmp slt i32 %64, 0
  br i1 %65, label %66, label %81

66:                                               ; preds = %59
  %67 = bitcast i8** %8 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %70 = bitcast i8** %69 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = sub i64 %68, %71
  %73 = trunc i64 %72 to i32
  %74 = ashr i32 %2, 24
  %75 = add nsw i32 %74, -5
  %76 = sub i32 %75, %64
  %77 = sub i32 %76, %73
  %78 = inttoptr i64 %68 to i32*
  store i32 %77, i32* %78, align 1
  %79 = load i8*, i8** %8, align 8
  %80 = getelementptr inbounds i8, i8* %79, i64 4
  store i8* %80, i8** %8, align 8
  br label %146

81:                                               ; preds = %59
  %82 = icmp eq i32 %64, 0
  br i1 %82, label %96, label %83

83:                                               ; preds = %81
  %84 = add nsw i32 %64, -1
  %85 = bitcast i8** %8 to i32**
  %86 = load i32*, i32** %85, align 8
  store i32 %84, i32* %86, align 1
  %87 = load i8*, i8** %8, align 8
  %88 = getelementptr inbounds i8, i8* %87, i64 4
  store i8* %88, i8** %8, align 8
  %89 = ptrtoint i8* %88 to i64
  %90 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %91 = bitcast i8** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = sub i64 %89, %92
  %94 = trunc i64 %93 to i32
  %95 = add i32 %94, -3
  store i32 %95, i32* %63, align 4
  br label %146

96:                                               ; preds = %81
  %97 = bitcast i8** %8 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %100 = bitcast i8** %99 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = sub i64 %98, %101
  %103 = trunc i64 %102 to i32
  %104 = inttoptr i64 %98 to i32*
  store i32 %103, i32* %104, align 1
  %105 = load i8*, i8** %8, align 8
  %106 = getelementptr inbounds i8, i8* %105, i64 4
  store i8* %106, i8** %8, align 8
  %107 = add nsw i32 %103, 1
  store i32 %107, i32* %63, align 4
  br label %146

108:                                              ; preds = %108, %57
  %109 = phi i64 [ 2, %57 ], [ %130, %108 ]
  %110 = phi i64 [ %58, %57 ], [ %131, %108 ]
  %111 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 %109
  %112 = load i8, i8* %111, align 1
  %113 = load i8*, i8** %8, align 8
  %114 = getelementptr inbounds i8, i8* %113, i64 1
  store i8* %114, i8** %8, align 8
  store i8 %112, i8* %113, align 1
  %115 = or i64 %109, 1
  %116 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = load i8*, i8** %8, align 8
  %119 = getelementptr inbounds i8, i8* %118, i64 1
  store i8* %119, i8** %8, align 8
  store i8 %117, i8* %118, align 1
  %120 = add nuw nsw i64 %109, 2
  %121 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 %120
  %122 = load i8, i8* %121, align 1
  %123 = load i8*, i8** %8, align 8
  %124 = getelementptr inbounds i8, i8* %123, i64 1
  store i8* %124, i8** %8, align 8
  store i8 %122, i8* %123, align 1
  %125 = add nuw nsw i64 %109, 3
  %126 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 %125
  %127 = load i8, i8* %126, align 1
  %128 = load i8*, i8** %8, align 8
  %129 = getelementptr inbounds i8, i8* %128, i64 1
  store i8* %129, i8** %8, align 8
  store i8 %127, i8* %128, align 1
  %130 = add nuw nsw i64 %109, 4
  %131 = add i64 %110, -4
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %133, label %108

133:                                              ; preds = %108, %52
  %134 = phi i64 [ 2, %52 ], [ %130, %108 ]
  %135 = icmp eq i64 %55, 0
  br i1 %135, label %146, label %136

136:                                              ; preds = %133, %136
  %137 = phi i64 [ %143, %136 ], [ %134, %133 ]
  %138 = phi i64 [ %144, %136 ], [ %55, %133 ]
  %139 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 %137
  %140 = load i8, i8* %139, align 1
  %141 = load i8*, i8** %8, align 8
  %142 = getelementptr inbounds i8, i8* %141, i64 1
  store i8* %142, i8** %8, align 8
  store i8 %140, i8* %141, align 1
  %143 = add nuw nsw i64 %137, 1
  %144 = add i64 %138, -1
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %146, label %136, !llvm.loop !34

146:                                              ; preds = %133, %136, %47, %44, %66, %83, %96
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %31)
  %147 = trunc i64 %3 to i32
  %148 = lshr i64 %3, 32
  %149 = trunc i64 %148 to i8
  %150 = icmp eq i8 %149, 0
  br i1 %150, label %169, label %151

151:                                              ; preds = %146
  %152 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 1
  %153 = load i8, i8* %152, align 1, !range !2
  %154 = icmp eq i8 %153, 0
  br i1 %154, label %155, label %169

155:                                              ; preds = %151
  switch i8 %149, label %160 [
    i8 12, label %156
    i8 9, label %156
  ]

156:                                              ; preds = %155, %155
  %157 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 0
  %158 = load i8, i8* %157, align 8, !range !2
  %159 = icmp eq i8 %158, 0
  br i1 %159, label %169, label %160

160:                                              ; preds = %156, %155
  %161 = bitcast %"class.v8::internal::RelocInfo"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %161) #14
  %162 = bitcast i8** %8 to i64*
  %163 = load i64, i64* %162, align 8
  %164 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %7, i64 0, i32 0
  store i64 %163, i64* %164, align 8
  %165 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %7, i64 0, i32 1
  store i8 %149, i8* %165, align 8
  %166 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %7, i64 0, i32 2
  %167 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1
  %168 = bitcast i64* %166 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %168, i8 0, i64 24, i1 false) #14
  call void @_ZN2v88internal15RelocInfoWriter5WriteEPKNS0_9RelocInfoE(%"class.v8::internal::RelocInfoWriter"* %167, %"class.v8::internal::RelocInfo"* nonnull %7) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %161) #14
  br label %169

169:                                              ; preds = %146, %151, %156, %160
  %170 = bitcast i8** %8 to i32**
  %171 = load i32*, i32** %170, align 8
  store i32 %147, i32* %171, align 1
  %172 = load i8*, i8** %8, align 8
  %173 = getelementptr inbounds i8, i8* %172, i64 4
  store i8* %173, i8** %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8emit_movENS0_8RegisterENS0_11Immediate64Ei(%"class.v8::internal::Assembler"*, i32, i64, i8, i32) local_unnamed_addr #1 align 2 {
  %6 = alloca %"class.v8::internal::RelocInfo", align 8
  %7 = alloca %"class.v8::internal::Label", align 4
  %8 = alloca %"struct.v8::internal::Operand::Data", align 8
  %9 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 6
  %10 = load i8, i8* @_ZN2v88internal26FLAG_partial_constant_poolE, align 1, !range !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %81, label %12

12:                                               ; preds = %5
  %13 = icmp eq i8 %3, 0
  %14 = icmp sgt i8 %3, 5
  %15 = or i1 %13, %14
  br i1 %15, label %16, label %81

16:                                               ; preds = %12
  switch i8 %3, label %81 [
    i8 0, label %17
    i8 9, label %17
    i8 12, label %17
  ]

17:                                               ; preds = %16, %16, %16
  %18 = bitcast %"class.v8::internal::ConstPool"* %9 to %"class.v8::internal::AssemblerBase"**
  %19 = load %"class.v8::internal::AssemblerBase"*, %"class.v8::internal::AssemblerBase"** %18, align 8
  %20 = getelementptr inbounds %"class.v8::internal::AssemblerBase", %"class.v8::internal::AssemblerBase"* %19, i64 0, i32 4
  %21 = bitcast i8** %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %"class.v8::internal::AssemblerBase", %"class.v8::internal::AssemblerBase"* %19, i64 0, i32 2
  %24 = bitcast i8** %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = sub i64 %22, %25
  %27 = trunc i64 %26 to i32
  %28 = tail call zeroext i1 @_ZN2v88internal9ConstPool14AddSharedEntryEmi(%"class.v8::internal::ConstPool"* %9, i64 %2, i32 %27) #14
  br i1 %28, label %29, label %81

29:                                               ; preds = %17
  %30 = bitcast %"class.v8::internal::Label"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #14
  %31 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %7, i64 0, i32 0
  store i32 0, i32* %31, align 4
  %32 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %7, i64 0, i32 1
  store i32 0, i32* %32, align 4
  %33 = getelementptr inbounds %"struct.v8::internal::Operand::Data", %"struct.v8::internal::Operand::Data"* %8, i64 0, i32 0
  store i8 0, i8* %33, align 8
  %34 = getelementptr inbounds %"struct.v8::internal::Operand::Data", %"struct.v8::internal::Operand::Data"* %8, i64 0, i32 3
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %"struct.v8::internal::Operand::Data", %"struct.v8::internal::Operand::Data"* %8, i64 0, i32 1, i64 0
  store i8 5, i8* %35, align 1
  %36 = ptrtoint %"class.v8::internal::Label"* %7 to i64
  %37 = getelementptr inbounds %"struct.v8::internal::Operand::Data", %"struct.v8::internal::Operand::Data"* %8, i64 0, i32 1, i64 1
  %38 = bitcast i8* %37 to i64*
  store i64 %36, i64* %38, align 2
  %39 = getelementptr inbounds %"struct.v8::internal::Operand::Data", %"struct.v8::internal::Operand::Data"* %8, i64 0, i32 2
  store i8 9, i8* %39, align 2
  %40 = bitcast %"struct.v8::internal::Operand::Data"* %8 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %"struct.v8::internal::Operand::Data", %"struct.v8::internal::Operand::Data"* %8, i64 0, i32 1, i64 7
  %43 = bitcast i8* %42 to i32*
  %44 = load i32, i32* %43, align 8
  %45 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %46 = load i8*, i8** %45, align 8
  %47 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = getelementptr inbounds i8, i8* %48, i64 -32
  %50 = icmp ult i8* %46, %49
  br i1 %50, label %52, label %51, !prof !11

51:                                               ; preds = %29
  call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %52

52:                                               ; preds = %51, %29
  %53 = icmp eq i32 %4, 8
  %54 = trunc i64 %41 to i8
  %55 = lshr i32 %1, 1
  %56 = trunc i32 %55 to i8
  br i1 %53, label %57, label %63

57:                                               ; preds = %52
  %58 = and i8 %56, -76
  %59 = or i8 %58, %54
  %60 = or i8 %59, 72
  %61 = load i8*, i8** %45, align 8
  %62 = getelementptr inbounds i8, i8* %61, i64 1
  store i8* %62, i8** %45, align 8
  store i8 %60, i8* %61, align 1
  br label %71

63:                                               ; preds = %52
  %64 = and i8 %56, -4
  %65 = or i8 %64, %54
  %66 = icmp eq i8 %65, 0
  br i1 %66, label %71, label %67

67:                                               ; preds = %63
  %68 = or i8 %65, 64
  %69 = load i8*, i8** %45, align 8
  %70 = getelementptr inbounds i8, i8* %69, i64 1
  store i8* %70, i8** %45, align 8
  store i8 %68, i8* %69, align 1
  br label %71

71:                                               ; preds = %57, %63, %67
  %72 = load i8*, i8** %45, align 8
  %73 = getelementptr inbounds i8, i8* %72, i64 1
  store i8* %73, i8** %45, align 8
  store i8 -117, i8* %72, align 1
  call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %41, i32 %44) #14
  %74 = bitcast i8** %45 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %77 = bitcast i8** %76 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = sub i64 %75, %78
  %80 = trunc i64 %79 to i32
  call void @_ZN2v88internal9Assembler7bind_toEPNS0_5LabelEi(%"class.v8::internal::Assembler"* %0, %"class.v8::internal::Label"* nonnull %7, i32 %80) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #14
  br label %132

81:                                               ; preds = %16, %12, %5, %17
  %82 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %83 = load i8*, i8** %82, align 8
  %84 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %85 = load i8*, i8** %84, align 8
  %86 = getelementptr inbounds i8, i8* %85, i64 -32
  %87 = icmp ult i8* %83, %86
  br i1 %87, label %89, label %88, !prof !11

88:                                               ; preds = %81
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %89

89:                                               ; preds = %81, %88
  %90 = icmp eq i32 %4, 8
  br i1 %90, label %91, label %97

91:                                               ; preds = %89
  %92 = lshr i32 %1, 3
  %93 = trunc i32 %92 to i8
  %94 = or i8 %93, 72
  %95 = load i8*, i8** %82, align 8
  %96 = getelementptr inbounds i8, i8* %95, i64 1
  store i8* %96, i8** %82, align 8
  store i8 %94, i8* %95, align 1
  br label %102

97:                                               ; preds = %89
  %98 = icmp ult i32 %1, 8
  br i1 %98, label %102, label %99

99:                                               ; preds = %97
  %100 = load i8*, i8** %82, align 8
  %101 = getelementptr inbounds i8, i8* %100, i64 1
  store i8* %101, i8** %82, align 8
  store i8 65, i8* %100, align 1
  br label %102

102:                                              ; preds = %91, %97, %99
  %103 = trunc i32 %1 to i8
  %104 = and i8 %103, 7
  %105 = or i8 %104, -72
  %106 = load i8*, i8** %82, align 8
  %107 = getelementptr inbounds i8, i8* %106, i64 1
  store i8* %107, i8** %82, align 8
  store i8 %105, i8* %106, align 1
  %108 = icmp eq i8 %3, 0
  br i1 %108, label %127, label %109

109:                                              ; preds = %102
  %110 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 1
  %111 = load i8, i8* %110, align 1, !range !2
  %112 = icmp eq i8 %111, 0
  br i1 %112, label %113, label %127

113:                                              ; preds = %109
  switch i8 %3, label %118 [
    i8 12, label %114
    i8 9, label %114
  ]

114:                                              ; preds = %113, %113
  %115 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 0
  %116 = load i8, i8* %115, align 8, !range !2
  %117 = icmp eq i8 %116, 0
  br i1 %117, label %127, label %118

118:                                              ; preds = %114, %113
  %119 = bitcast %"class.v8::internal::RelocInfo"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %119) #14
  %120 = bitcast i8** %82 to i64*
  %121 = load i64, i64* %120, align 8
  %122 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %6, i64 0, i32 0
  store i64 %121, i64* %122, align 8
  %123 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %6, i64 0, i32 1
  store i8 %3, i8* %123, align 8
  %124 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %6, i64 0, i32 2
  %125 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1
  %126 = bitcast i64* %124 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %126, i8 0, i64 24, i1 false) #14
  call void @_ZN2v88internal15RelocInfoWriter5WriteEPKNS0_9RelocInfoE(%"class.v8::internal::RelocInfoWriter"* %125, %"class.v8::internal::RelocInfo"* nonnull %6) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %119) #14
  br label %127

127:                                              ; preds = %102, %109, %114, %118
  %128 = bitcast i8** %82 to i64**
  %129 = load i64*, i64** %128, align 8
  store i64 %2, i64* %129, align 1
  %130 = load i8*, i8** %82, align 8
  %131 = getelementptr inbounds i8, i8* %130, i64 8
  store i8* %131, i8** %82, align 8
  br label %132

132:                                              ; preds = %127, %71
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler10movq_imm64ENS0_8RegisterEl(%"class.v8::internal::Assembler"*, i32, i64) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = lshr i32 %1, 3
  %15 = trunc i32 %14 to i8
  %16 = or i8 %15, 72
  %17 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %17, i8** %4, align 8
  store i8 %16, i8* %13, align 1
  %18 = trunc i32 %1 to i8
  %19 = and i8 %18, 7
  %20 = or i8 %19, -72
  %21 = load i8*, i8** %4, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %4, align 8
  store i8 %20, i8* %21, align 1
  %23 = bitcast i8** %4 to i64**
  %24 = load i64*, i64** %23, align 8
  store i64 %2, i64* %24, align 1
  %25 = load i8*, i8** %4, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 8
  store i8* %26, i8** %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler16movq_heap_numberENS0_8RegisterEd(%"class.v8::internal::Assembler"*, i32, double) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::RelocInfo", align 8
  %5 = alloca %"class.v8::internal::HeapObjectRequest", align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %14, label %12, !prof !11

12:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %13 = load i8*, i8** %6, align 8
  br label %14

14:                                               ; preds = %12, %3
  %15 = phi i8* [ %13, %12 ], [ %7, %3 ]
  %16 = lshr i32 %1, 3
  %17 = trunc i32 %16 to i8
  %18 = or i8 %17, 72
  %19 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %19, i8** %6, align 8
  store i8 %18, i8* %15, align 1
  %20 = trunc i32 %1 to i8
  %21 = and i8 %20, 7
  %22 = or i8 %21, -72
  %23 = load i8*, i8** %6, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %6, align 8
  store i8 %22, i8* %23, align 1
  %25 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0
  call void @_ZN2v88internal17HeapObjectRequestC1Edi(%"class.v8::internal::HeapObjectRequest"* nonnull %5, double %2, i32 -1) #14
  call void @_ZN2v88internal13AssemblerBase17RequestHeapObjectENS0_17HeapObjectRequestE(%"class.v8::internal::AssemblerBase"* %25, %"class.v8::internal::HeapObjectRequest"* nonnull byval(%"class.v8::internal::HeapObjectRequest") align 8 %5) #14
  %26 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 1
  %27 = load i8, i8* %26, align 1, !range !2
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %29, label %38

29:                                               ; preds = %14
  %30 = bitcast %"class.v8::internal::RelocInfo"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %30) #14
  %31 = bitcast i8** %6 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 0
  store i64 %32, i64* %33, align 8
  %34 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 1
  store i8 4, i8* %34, align 8
  %35 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 2
  %36 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1
  %37 = bitcast i64* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %37, i8 0, i64 24, i1 false) #14
  call void @_ZN2v88internal15RelocInfoWriter5WriteEPKNS0_9RelocInfoE(%"class.v8::internal::RelocInfoWriter"* %36, %"class.v8::internal::RelocInfo"* nonnull %4) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %30) #14
  br label %38

38:                                               ; preds = %14, %29
  %39 = bitcast i8** %6 to i64**
  %40 = load i64*, i64** %39, align 8
  store i64 0, i64* %40, align 1
  %41 = load i8*, i8** %6, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 8
  store i8* %42, i8** %6, align 8
  ret void
}

declare void @_ZN2v88internal13AssemblerBase17RequestHeapObjectENS0_17HeapObjectRequestE(%"class.v8::internal::AssemblerBase"*, %"class.v8::internal::HeapObjectRequest"* byval(%"class.v8::internal::HeapObjectRequest") align 8) local_unnamed_addr #3

declare void @_ZN2v88internal17HeapObjectRequestC1Edi(%"class.v8::internal::HeapObjectRequest"*, double, i32) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler11movq_stringENS0_8RegisterEPKNS0_18StringConstantBaseE(%"class.v8::internal::Assembler"*, i32, %"class.v8::internal::StringConstantBase"*) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::RelocInfo", align 8
  %5 = alloca %"class.v8::internal::HeapObjectRequest", align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %14, label %12, !prof !11

12:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %13 = load i8*, i8** %6, align 8
  br label %14

14:                                               ; preds = %12, %3
  %15 = phi i8* [ %13, %12 ], [ %7, %3 ]
  %16 = lshr i32 %1, 3
  %17 = trunc i32 %16 to i8
  %18 = or i8 %17, 72
  %19 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %19, i8** %6, align 8
  store i8 %18, i8* %15, align 1
  %20 = trunc i32 %1 to i8
  %21 = and i8 %20, 7
  %22 = or i8 %21, -72
  %23 = load i8*, i8** %6, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %6, align 8
  store i8 %22, i8* %23, align 1
  %25 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0
  call void @_ZN2v88internal17HeapObjectRequestC1EPKNS0_18StringConstantBaseEi(%"class.v8::internal::HeapObjectRequest"* nonnull %5, %"class.v8::internal::StringConstantBase"* %2, i32 -1) #14
  call void @_ZN2v88internal13AssemblerBase17RequestHeapObjectENS0_17HeapObjectRequestE(%"class.v8::internal::AssemblerBase"* %25, %"class.v8::internal::HeapObjectRequest"* nonnull byval(%"class.v8::internal::HeapObjectRequest") align 8 %5) #14
  %26 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 1
  %27 = load i8, i8* %26, align 1, !range !2
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %29, label %38

29:                                               ; preds = %14
  %30 = bitcast %"class.v8::internal::RelocInfo"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %30) #14
  %31 = bitcast i8** %6 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 0
  store i64 %32, i64* %33, align 8
  %34 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 1
  store i8 4, i8* %34, align 8
  %35 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 2
  %36 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1
  %37 = bitcast i64* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %37, i8 0, i64 24, i1 false) #14
  call void @_ZN2v88internal15RelocInfoWriter5WriteEPKNS0_9RelocInfoE(%"class.v8::internal::RelocInfoWriter"* %36, %"class.v8::internal::RelocInfo"* nonnull %4) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %30) #14
  br label %38

38:                                               ; preds = %14, %29
  %39 = bitcast i8** %6 to i64**
  %40 = load i64*, i64** %39, align 8
  store i64 0, i64* %40, align 1
  %41 = load i8*, i8** %6, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 8
  store i8* %42, i8** %6, align 8
  ret void
}

declare void @_ZN2v88internal17HeapObjectRequestC1EPKNS0_18StringConstantBaseEi(%"class.v8::internal::HeapObjectRequest"*, %"class.v8::internal::StringConstantBase"*, i32) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4movlENS0_7OperandEPNS0_5LabelE(%"class.v8::internal::Assembler"*, i64, i32, %"class.v8::internal::Label"* nocapture) local_unnamed_addr #1 align 2 {
  %5 = alloca %"class.v8::internal::Operand", align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %13, label %12, !prof !11

12:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %13

13:                                               ; preds = %4, %12
  %14 = trunc i64 %1 to i8
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %20, label %16

16:                                               ; preds = %13
  %17 = or i8 %14, 64
  %18 = load i8*, i8** %6, align 8
  %19 = getelementptr inbounds i8, i8* %18, i64 1
  store i8* %19, i8** %6, align 8
  store i8 %17, i8* %18, align 1
  br label %20

20:                                               ; preds = %13, %16
  %21 = load i8*, i8** %6, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %6, align 8
  store i8 -57, i8* %21, align 1
  %23 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %23)
  %24 = bitcast %"class.v8::internal::Operand"* %5 to i64*
  store i64 %1, i64* %24, align 8
  %25 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 7
  %26 = bitcast i8* %25 to i32*
  store i32 %2, i32* %26, align 1
  %27 = lshr i32 %2, 16
  %28 = and i32 %27, 255
  %29 = lshr i64 %1, 8
  %30 = trunc i64 %29 to i8
  %31 = load i8*, i8** %6, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %32, i8** %6, align 8
  store i8 %30, i8* %31, align 1
  %33 = icmp eq i8 %30, 5
  %34 = lshr i64 %1, 16
  %35 = trunc i64 %34 to i8
  br i1 %33, label %51, label %36

36:                                               ; preds = %20
  %37 = trunc i32 %27 to i8
  %38 = icmp ugt i8 %37, 1
  br i1 %38, label %39, label %138

39:                                               ; preds = %36
  %40 = zext i32 %28 to i64
  %41 = load i8*, i8** %6, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %42, i8** %6, align 8
  store i8 %35, i8* %41, align 1
  %43 = icmp eq i32 %28, 2
  br i1 %43, label %138, label %44

44:                                               ; preds = %39
  %45 = add nsw i64 %40, -2
  %46 = add nsw i64 %40, -3
  %47 = and i64 %45, 3
  %48 = icmp ult i64 %46, 3
  br i1 %48, label %125, label %49

49:                                               ; preds = %44
  %50 = sub nsw i64 %45, %47
  br label %100

51:                                               ; preds = %20
  %52 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 1
  %53 = bitcast i8* %52 to %"class.v8::internal::Label"**
  %54 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %53, align 1
  %55 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %54, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = icmp slt i32 %56, 0
  br i1 %57, label %58, label %73

58:                                               ; preds = %51
  %59 = bitcast i8** %6 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %62 = bitcast i8** %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = sub i64 %60, %63
  %65 = trunc i64 %64 to i32
  %66 = ashr i32 %2, 24
  %67 = add nsw i32 %66, -5
  %68 = sub i32 %67, %56
  %69 = sub i32 %68, %65
  %70 = inttoptr i64 %60 to i32*
  store i32 %69, i32* %70, align 1
  %71 = load i8*, i8** %6, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 4
  store i8* %72, i8** %6, align 8
  br label %138

73:                                               ; preds = %51
  %74 = icmp eq i32 %56, 0
  br i1 %74, label %88, label %75

75:                                               ; preds = %73
  %76 = add nsw i32 %56, -1
  %77 = bitcast i8** %6 to i32**
  %78 = load i32*, i32** %77, align 8
  store i32 %76, i32* %78, align 1
  %79 = load i8*, i8** %6, align 8
  %80 = getelementptr inbounds i8, i8* %79, i64 4
  store i8* %80, i8** %6, align 8
  %81 = ptrtoint i8* %80 to i64
  %82 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %83 = bitcast i8** %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = sub i64 %81, %84
  %86 = trunc i64 %85 to i32
  %87 = add i32 %86, -3
  store i32 %87, i32* %55, align 4
  br label %138

88:                                               ; preds = %73
  %89 = bitcast i8** %6 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %92 = bitcast i8** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = sub i64 %90, %93
  %95 = trunc i64 %94 to i32
  %96 = inttoptr i64 %90 to i32*
  store i32 %95, i32* %96, align 1
  %97 = load i8*, i8** %6, align 8
  %98 = getelementptr inbounds i8, i8* %97, i64 4
  store i8* %98, i8** %6, align 8
  %99 = add nsw i32 %95, 1
  store i32 %99, i32* %55, align 4
  br label %138

100:                                              ; preds = %100, %49
  %101 = phi i64 [ 2, %49 ], [ %122, %100 ]
  %102 = phi i64 [ %50, %49 ], [ %123, %100 ]
  %103 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %101
  %104 = load i8, i8* %103, align 1
  %105 = load i8*, i8** %6, align 8
  %106 = getelementptr inbounds i8, i8* %105, i64 1
  store i8* %106, i8** %6, align 8
  store i8 %104, i8* %105, align 1
  %107 = or i64 %101, 1
  %108 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = load i8*, i8** %6, align 8
  %111 = getelementptr inbounds i8, i8* %110, i64 1
  store i8* %111, i8** %6, align 8
  store i8 %109, i8* %110, align 1
  %112 = add nuw nsw i64 %101, 2
  %113 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = load i8*, i8** %6, align 8
  %116 = getelementptr inbounds i8, i8* %115, i64 1
  store i8* %116, i8** %6, align 8
  store i8 %114, i8* %115, align 1
  %117 = add nuw nsw i64 %101, 3
  %118 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = load i8*, i8** %6, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 1
  store i8* %121, i8** %6, align 8
  store i8 %119, i8* %120, align 1
  %122 = add nuw nsw i64 %101, 4
  %123 = add i64 %102, -4
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %100

125:                                              ; preds = %100, %44
  %126 = phi i64 [ 2, %44 ], [ %122, %100 ]
  %127 = icmp eq i64 %47, 0
  br i1 %127, label %138, label %128

128:                                              ; preds = %125, %128
  %129 = phi i64 [ %135, %128 ], [ %126, %125 ]
  %130 = phi i64 [ %136, %128 ], [ %47, %125 ]
  %131 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %129
  %132 = load i8, i8* %131, align 1
  %133 = load i8*, i8** %6, align 8
  %134 = getelementptr inbounds i8, i8* %133, i64 1
  store i8* %134, i8** %6, align 8
  store i8 %132, i8* %133, align 1
  %135 = add nuw nsw i64 %129, 1
  %136 = add i64 %130, -1
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %128, !llvm.loop !35

138:                                              ; preds = %125, %128, %39, %36, %58, %75, %88
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %23)
  %139 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %3, i64 0, i32 0
  %140 = load i32, i32* %139, align 4
  %141 = icmp slt i32 %140, 0
  br i1 %141, label %142, label %155

142:                                              ; preds = %138
  %143 = bitcast i8** %6 to i64*
  %144 = load i64, i64* %143, align 8
  %145 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %146 = bitcast i8** %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = sub i64 %144, %147
  %149 = trunc i64 %148 to i32
  %150 = sub nsw i32 -5, %140
  %151 = sub i32 %150, %149
  %152 = inttoptr i64 %144 to i32*
  store i32 %151, i32* %152, align 1
  %153 = load i8*, i8** %6, align 8
  %154 = getelementptr inbounds i8, i8* %153, i64 4
  store i8* %154, i8** %6, align 8
  br label %182

155:                                              ; preds = %138
  %156 = icmp eq i32 %140, 0
  br i1 %156, label %170, label %157

157:                                              ; preds = %155
  %158 = add nsw i32 %140, -1
  %159 = bitcast i8** %6 to i32**
  %160 = load i32*, i32** %159, align 8
  store i32 %158, i32* %160, align 1
  %161 = load i8*, i8** %6, align 8
  %162 = getelementptr inbounds i8, i8* %161, i64 4
  store i8* %162, i8** %6, align 8
  %163 = ptrtoint i8* %162 to i64
  %164 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %165 = bitcast i8** %164 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = sub i64 %163, %166
  %168 = trunc i64 %167 to i32
  %169 = add i32 %168, -3
  store i32 %169, i32* %139, align 4
  br label %182

170:                                              ; preds = %155
  %171 = bitcast i8** %6 to i64*
  %172 = load i64, i64* %171, align 8
  %173 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %174 = bitcast i8** %173 to i64*
  %175 = load i64, i64* %174, align 8
  %176 = sub i64 %172, %175
  %177 = trunc i64 %176 to i32
  %178 = inttoptr i64 %172 to i32*
  store i32 %177, i32* %178, align 1
  %179 = load i8*, i8** %6, align 8
  %180 = getelementptr inbounds i8, i8* %179, i64 4
  store i8* %180, i8** %6, align 8
  %181 = add nsw i32 %177, 1
  store i32 %181, i32* %139, align 4
  br label %182

182:                                              ; preds = %157, %170, %142
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7movsxblENS0_8RegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %11, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %11

11:                                               ; preds = %3, %10
  %12 = icmp slt i32 %2, 4
  %13 = ashr i32 %1, 3
  %14 = shl nsw i32 %13, 2
  br i1 %12, label %22, label %15

15:                                               ; preds = %11
  %16 = lshr i32 %2, 3
  %17 = or i32 %14, %16
  %18 = trunc i32 %17 to i8
  %19 = or i8 %18, 64
  %20 = load i8*, i8** %4, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 1
  store i8* %21, i8** %4, align 8
  store i8 %19, i8* %20, align 1
  br label %32

22:                                               ; preds = %11
  %23 = ashr i32 %2, 3
  %24 = or i32 %14, %23
  %25 = and i32 %24, 255
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %32, label %27

27:                                               ; preds = %22
  %28 = trunc i32 %24 to i8
  %29 = or i8 %28, 64
  %30 = load i8*, i8** %4, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %4, align 8
  store i8 %29, i8* %30, align 1
  br label %32

32:                                               ; preds = %27, %22, %15
  %33 = load i8*, i8** %4, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %4, align 8
  store i8 15, i8* %33, align 1
  %35 = load i8*, i8** %4, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 1
  store i8* %36, i8** %4, align 8
  store i8 -66, i8* %35, align 1
  %37 = shl i32 %1, 3
  %38 = and i32 %2, 7
  %39 = or i32 %38, %37
  %40 = trunc i32 %39 to i8
  %41 = or i8 %40, -64
  %42 = load i8*, i8** %4, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 1
  store i8* %43, i8** %4, align 8
  store i8 %41, i8* %42, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7movsxblENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %4, %11
  %13 = trunc i64 %2 to i8
  %14 = lshr i32 %1, 1
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, -4
  %17 = or i8 %16, %13
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %12
  %20 = or i8 %17, 64
  %21 = load i8*, i8** %5, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %5, align 8
  store i8 %20, i8* %21, align 1
  br label %23

23:                                               ; preds = %12, %19
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 15, i8* %24, align 1
  %26 = load i8*, i8** %5, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %5, align 8
  store i8 -66, i8* %26, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7movsxbqENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = trunc i64 %2 to i8
  %16 = lshr i32 %1, 1
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, -76
  %19 = or i8 %18, %15
  %20 = or i8 %19, 72
  %21 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %21, i8** %5, align 8
  store i8 %20, i8* %14, align 1
  %22 = load i8*, i8** %5, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %5, align 8
  store i8 15, i8* %22, align 1
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 -66, i8* %24, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7movsxbqENS0_8RegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = ashr i32 %1, 3
  %15 = shl nsw i32 %14, 2
  %16 = lshr i32 %2, 3
  %17 = or i32 %15, %16
  %18 = trunc i32 %17 to i8
  %19 = or i8 %18, 72
  %20 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %20, i8** %4, align 8
  store i8 %19, i8* %13, align 1
  %21 = load i8*, i8** %4, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %4, align 8
  store i8 15, i8* %21, align 1
  %23 = load i8*, i8** %4, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %4, align 8
  store i8 -66, i8* %23, align 1
  %25 = shl i32 %1, 3
  %26 = and i32 %2, 7
  %27 = or i32 %26, %25
  %28 = trunc i32 %27 to i8
  %29 = or i8 %28, -64
  %30 = load i8*, i8** %4, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %4, align 8
  store i8 %29, i8* %30, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7movsxwlENS0_8RegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %11, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %11

11:                                               ; preds = %3, %10
  %12 = ashr i32 %1, 3
  %13 = shl nsw i32 %12, 2
  %14 = ashr i32 %2, 3
  %15 = or i32 %13, %14
  %16 = and i32 %15, 255
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %23, label %18

18:                                               ; preds = %11
  %19 = trunc i32 %15 to i8
  %20 = or i8 %19, 64
  %21 = load i8*, i8** %4, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %4, align 8
  store i8 %20, i8* %21, align 1
  br label %23

23:                                               ; preds = %11, %18
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 15, i8* %24, align 1
  %26 = load i8*, i8** %4, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %4, align 8
  store i8 -65, i8* %26, align 1
  %28 = shl i32 %1, 3
  %29 = and i32 %2, 7
  %30 = or i32 %29, %28
  %31 = trunc i32 %30 to i8
  %32 = or i8 %31, -64
  %33 = load i8*, i8** %4, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %4, align 8
  store i8 %32, i8* %33, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7movsxwlENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %4, %11
  %13 = trunc i64 %2 to i8
  %14 = lshr i32 %1, 1
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, -4
  %17 = or i8 %16, %13
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %12
  %20 = or i8 %17, 64
  %21 = load i8*, i8** %5, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %5, align 8
  store i8 %20, i8* %21, align 1
  br label %23

23:                                               ; preds = %12, %19
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 15, i8* %24, align 1
  %26 = load i8*, i8** %5, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %5, align 8
  store i8 -65, i8* %26, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7movsxwqENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = trunc i64 %2 to i8
  %16 = lshr i32 %1, 1
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, -76
  %19 = or i8 %18, %15
  %20 = or i8 %19, 72
  %21 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %21, i8** %5, align 8
  store i8 %20, i8* %14, align 1
  %22 = load i8*, i8** %5, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %5, align 8
  store i8 15, i8* %22, align 1
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 -65, i8* %24, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7movsxwqENS0_8RegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = ashr i32 %1, 3
  %15 = shl nsw i32 %14, 2
  %16 = lshr i32 %2, 3
  %17 = or i32 %15, %16
  %18 = trunc i32 %17 to i8
  %19 = or i8 %18, 72
  %20 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %20, i8** %4, align 8
  store i8 %19, i8* %13, align 1
  %21 = load i8*, i8** %4, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %4, align 8
  store i8 15, i8* %21, align 1
  %23 = load i8*, i8** %4, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %4, align 8
  store i8 -65, i8* %23, align 1
  %25 = shl i32 %1, 3
  %26 = and i32 %2, 7
  %27 = or i32 %26, %25
  %28 = trunc i32 %27 to i8
  %29 = or i8 %28, -64
  %30 = load i8*, i8** %4, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %4, align 8
  store i8 %29, i8* %30, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7movsxlqENS0_8RegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = ashr i32 %1, 3
  %15 = shl nsw i32 %14, 2
  %16 = lshr i32 %2, 3
  %17 = or i32 %15, %16
  %18 = trunc i32 %17 to i8
  %19 = or i8 %18, 72
  %20 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %20, i8** %4, align 8
  store i8 %19, i8* %13, align 1
  %21 = load i8*, i8** %4, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %4, align 8
  store i8 99, i8* %21, align 1
  %23 = shl i32 %1, 3
  %24 = and i32 %2, 7
  %25 = or i32 %24, %23
  %26 = trunc i32 %25 to i8
  %27 = or i8 %26, -64
  %28 = load i8*, i8** %4, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %4, align 8
  store i8 %27, i8* %28, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7movsxlqENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = trunc i64 %2 to i8
  %16 = lshr i32 %1, 1
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, -76
  %19 = or i8 %18, %15
  %20 = or i8 %19, 72
  %21 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %21, i8** %5, align 8
  store i8 %20, i8* %14, align 1
  %22 = load i8*, i8** %5, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %5, align 8
  store i8 99, i8* %22, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler11emit_movzxbENS0_8RegisterENS0_7OperandEi(%"class.v8::internal::Assembler"*, i32, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %13, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %13

13:                                               ; preds = %5, %12
  %14 = trunc i64 %2 to i8
  %15 = lshr i32 %1, 1
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, -4
  %18 = or i8 %17, %14
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %24, label %20

20:                                               ; preds = %13
  %21 = or i8 %18, 64
  %22 = load i8*, i8** %6, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %6, align 8
  store i8 %21, i8* %22, align 1
  br label %24

24:                                               ; preds = %13, %20
  %25 = load i8*, i8** %6, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %6, align 8
  store i8 15, i8* %25, align 1
  %27 = load i8*, i8** %6, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %6, align 8
  store i8 -74, i8* %27, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler11emit_movzxbENS0_8RegisterES2_i(%"class.v8::internal::Assembler"*, i32, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %4, %11
  %13 = icmp slt i32 %2, 4
  %14 = ashr i32 %1, 3
  %15 = shl nsw i32 %14, 2
  br i1 %13, label %23, label %16

16:                                               ; preds = %12
  %17 = lshr i32 %2, 3
  %18 = or i32 %15, %17
  %19 = trunc i32 %18 to i8
  %20 = or i8 %19, 64
  %21 = load i8*, i8** %5, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %5, align 8
  store i8 %20, i8* %21, align 1
  br label %33

23:                                               ; preds = %12
  %24 = ashr i32 %2, 3
  %25 = or i32 %15, %24
  %26 = and i32 %25, 255
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %33, label %28

28:                                               ; preds = %23
  %29 = trunc i32 %25 to i8
  %30 = or i8 %29, 64
  %31 = load i8*, i8** %5, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %32, i8** %5, align 8
  store i8 %30, i8* %31, align 1
  br label %33

33:                                               ; preds = %28, %23, %16
  %34 = load i8*, i8** %5, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %5, align 8
  store i8 15, i8* %34, align 1
  %36 = load i8*, i8** %5, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %5, align 8
  store i8 -74, i8* %36, align 1
  %38 = shl i32 %1, 3
  %39 = and i32 %2, 7
  %40 = or i32 %39, %38
  %41 = trunc i32 %40 to i8
  %42 = or i8 %41, -64
  %43 = load i8*, i8** %5, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 1
  store i8* %44, i8** %5, align 8
  store i8 %42, i8* %43, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler11emit_movzxwENS0_8RegisterENS0_7OperandEi(%"class.v8::internal::Assembler"*, i32, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %13, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %13

13:                                               ; preds = %5, %12
  %14 = trunc i64 %2 to i8
  %15 = lshr i32 %1, 1
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, -4
  %18 = or i8 %17, %14
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %24, label %20

20:                                               ; preds = %13
  %21 = or i8 %18, 64
  %22 = load i8*, i8** %6, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %6, align 8
  store i8 %21, i8* %22, align 1
  br label %24

24:                                               ; preds = %13, %20
  %25 = load i8*, i8** %6, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %6, align 8
  store i8 15, i8* %25, align 1
  %27 = load i8*, i8** %6, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %6, align 8
  store i8 -73, i8* %27, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler11emit_movzxwENS0_8RegisterES2_i(%"class.v8::internal::Assembler"*, i32, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %4, %11
  %13 = ashr i32 %1, 3
  %14 = shl nsw i32 %13, 2
  %15 = ashr i32 %2, 3
  %16 = or i32 %14, %15
  %17 = and i32 %16, 255
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %24, label %19

19:                                               ; preds = %12
  %20 = trunc i32 %16 to i8
  %21 = or i8 %20, 64
  %22 = load i8*, i8** %5, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %5, align 8
  store i8 %21, i8* %22, align 1
  br label %24

24:                                               ; preds = %12, %19
  %25 = load i8*, i8** %5, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %5, align 8
  store i8 15, i8* %25, align 1
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 -73, i8* %27, align 1
  %29 = shl i32 %1, 3
  %30 = and i32 %2, 7
  %31 = or i32 %30, %29
  %32 = trunc i32 %31 to i8
  %33 = or i8 %32, -64
  %34 = load i8*, i8** %5, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %5, align 8
  store i8 %33, i8* %34, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8repmovsbEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -13, i8* %11, align 1
  %13 = load i8*, i8** %2, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %2, align 8
  store i8 -92, i8* %13, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8repmovswEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 102, i8* %11, align 1
  %13 = load i8*, i8** %2, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %2, align 8
  store i8 -13, i8* %13, align 1
  %15 = load i8*, i8** %2, align 8
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %16, i8** %2, align 8
  store i8 -92, i8* %15, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler12emit_repmovsEi(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %11, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %10 = load i8*, i8** %3, align 8
  br label %11

11:                                               ; preds = %2, %9
  %12 = phi i8* [ %4, %2 ], [ %10, %9 ]
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  store i8* %13, i8** %3, align 8
  store i8 -13, i8* %12, align 1
  %14 = icmp eq i32 %1, 8
  br i1 %14, label %15, label %18

15:                                               ; preds = %11
  %16 = load i8*, i8** %3, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %17, i8** %3, align 8
  store i8 72, i8* %16, align 1
  br label %18

18:                                               ; preds = %11, %15
  %19 = load i8*, i8** %3, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 1
  store i8* %20, i8** %3, align 8
  store i8 -91, i8* %19, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8repstoslEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -13, i8* %11, align 1
  %13 = load i8*, i8** %2, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %2, align 8
  store i8 -85, i8* %13, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8repstosqEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -13, i8* %11, align 1
  %13 = load i8*, i8** %2, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %2, align 8
  store i8 72, i8* %13, align 1
  %15 = load i8*, i8** %2, align 8
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %16, i8** %2, align 8
  store i8 -85, i8* %15, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4mullENS0_8RegisterE(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %10, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %10

10:                                               ; preds = %2, %9
  %11 = icmp ult i32 %1, 8
  br i1 %11, label %15, label %12

12:                                               ; preds = %10
  %13 = load i8*, i8** %3, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %3, align 8
  store i8 65, i8* %13, align 1
  br label %15

15:                                               ; preds = %10, %12
  %16 = load i8*, i8** %3, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %17, i8** %3, align 8
  store i8 -9, i8* %16, align 1
  %18 = trunc i32 %1 to i8
  %19 = and i8 %18, 7
  %20 = or i8 %19, -32
  %21 = load i8*, i8** %3, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %3, align 8
  store i8 %20, i8* %21, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4mullENS0_7OperandE(%"class.v8::internal::Assembler"*, i64, i32) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::Operand", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %3, %11
  %13 = trunc i64 %1 to i8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %12
  %16 = or i8 %13, 64
  %17 = load i8*, i8** %5, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %5, align 8
  store i8 %16, i8* %17, align 1
  br label %19

19:                                               ; preds = %12, %15
  %20 = load i8*, i8** %5, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 1
  store i8* %21, i8** %5, align 8
  store i8 -9, i8* %20, align 1
  %22 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %22)
  %23 = bitcast %"class.v8::internal::Operand"* %4 to i64*
  store i64 %1, i64* %23, align 8
  %24 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 7
  %25 = bitcast i8* %24 to i32*
  store i32 %2, i32* %25, align 1
  %26 = lshr i32 %2, 16
  %27 = and i32 %26, 255
  %28 = lshr i64 %1, 8
  %29 = trunc i64 %28 to i8
  %30 = or i8 %29, 32
  %31 = load i8*, i8** %5, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %32, i8** %5, align 8
  store i8 %30, i8* %31, align 1
  %33 = icmp eq i8 %29, 5
  %34 = lshr i64 %1, 16
  %35 = trunc i64 %34 to i8
  br i1 %33, label %51, label %36

36:                                               ; preds = %19
  %37 = trunc i32 %26 to i8
  %38 = icmp ugt i8 %37, 1
  br i1 %38, label %39, label %138

39:                                               ; preds = %36
  %40 = zext i32 %27 to i64
  %41 = load i8*, i8** %5, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %42, i8** %5, align 8
  store i8 %35, i8* %41, align 1
  %43 = icmp eq i32 %27, 2
  br i1 %43, label %138, label %44

44:                                               ; preds = %39
  %45 = add nsw i64 %40, -2
  %46 = add nsw i64 %40, -3
  %47 = and i64 %45, 3
  %48 = icmp ult i64 %46, 3
  br i1 %48, label %125, label %49

49:                                               ; preds = %44
  %50 = sub nsw i64 %45, %47
  br label %100

51:                                               ; preds = %19
  %52 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 1
  %53 = bitcast i8* %52 to %"class.v8::internal::Label"**
  %54 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %53, align 1
  %55 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %54, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = icmp slt i32 %56, 0
  br i1 %57, label %58, label %73

58:                                               ; preds = %51
  %59 = bitcast i8** %5 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %62 = bitcast i8** %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = sub i64 %60, %63
  %65 = trunc i64 %64 to i32
  %66 = ashr i32 %2, 24
  %67 = add nsw i32 %66, -5
  %68 = sub i32 %67, %56
  %69 = sub i32 %68, %65
  %70 = inttoptr i64 %60 to i32*
  store i32 %69, i32* %70, align 1
  %71 = load i8*, i8** %5, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 4
  store i8* %72, i8** %5, align 8
  br label %138

73:                                               ; preds = %51
  %74 = icmp eq i32 %56, 0
  br i1 %74, label %88, label %75

75:                                               ; preds = %73
  %76 = add nsw i32 %56, -1
  %77 = bitcast i8** %5 to i32**
  %78 = load i32*, i32** %77, align 8
  store i32 %76, i32* %78, align 1
  %79 = load i8*, i8** %5, align 8
  %80 = getelementptr inbounds i8, i8* %79, i64 4
  store i8* %80, i8** %5, align 8
  %81 = ptrtoint i8* %80 to i64
  %82 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %83 = bitcast i8** %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = sub i64 %81, %84
  %86 = trunc i64 %85 to i32
  %87 = add i32 %86, -3
  store i32 %87, i32* %55, align 4
  br label %138

88:                                               ; preds = %73
  %89 = bitcast i8** %5 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %92 = bitcast i8** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = sub i64 %90, %93
  %95 = trunc i64 %94 to i32
  %96 = inttoptr i64 %90 to i32*
  store i32 %95, i32* %96, align 1
  %97 = load i8*, i8** %5, align 8
  %98 = getelementptr inbounds i8, i8* %97, i64 4
  store i8* %98, i8** %5, align 8
  %99 = add nsw i32 %95, 1
  store i32 %99, i32* %55, align 4
  br label %138

100:                                              ; preds = %100, %49
  %101 = phi i64 [ 2, %49 ], [ %122, %100 ]
  %102 = phi i64 [ %50, %49 ], [ %123, %100 ]
  %103 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %101
  %104 = load i8, i8* %103, align 1
  %105 = load i8*, i8** %5, align 8
  %106 = getelementptr inbounds i8, i8* %105, i64 1
  store i8* %106, i8** %5, align 8
  store i8 %104, i8* %105, align 1
  %107 = or i64 %101, 1
  %108 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = load i8*, i8** %5, align 8
  %111 = getelementptr inbounds i8, i8* %110, i64 1
  store i8* %111, i8** %5, align 8
  store i8 %109, i8* %110, align 1
  %112 = add nuw nsw i64 %101, 2
  %113 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = load i8*, i8** %5, align 8
  %116 = getelementptr inbounds i8, i8* %115, i64 1
  store i8* %116, i8** %5, align 8
  store i8 %114, i8* %115, align 1
  %117 = add nuw nsw i64 %101, 3
  %118 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = load i8*, i8** %5, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 1
  store i8* %121, i8** %5, align 8
  store i8 %119, i8* %120, align 1
  %122 = add nuw nsw i64 %101, 4
  %123 = add i64 %102, -4
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %100

125:                                              ; preds = %100, %44
  %126 = phi i64 [ 2, %44 ], [ %122, %100 ]
  %127 = icmp eq i64 %47, 0
  br i1 %127, label %138, label %128

128:                                              ; preds = %125, %128
  %129 = phi i64 [ %135, %128 ], [ %126, %125 ]
  %130 = phi i64 [ %136, %128 ], [ %47, %125 ]
  %131 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %129
  %132 = load i8, i8* %131, align 1
  %133 = load i8*, i8** %5, align 8
  %134 = getelementptr inbounds i8, i8* %133, i64 1
  store i8* %134, i8** %5, align 8
  store i8 %132, i8* %133, align 1
  %135 = add nuw nsw i64 %129, 1
  %136 = add i64 %130, -1
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %128, !llvm.loop !36

138:                                              ; preds = %125, %128, %39, %36, %58, %75, %88
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %22)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4mulqENS0_8RegisterE(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %11, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %10 = load i8*, i8** %3, align 8
  br label %11

11:                                               ; preds = %2, %9
  %12 = phi i8* [ %4, %2 ], [ %10, %9 ]
  %13 = lshr i32 %1, 3
  %14 = trunc i32 %13 to i8
  %15 = or i8 %14, 72
  %16 = getelementptr inbounds i8, i8* %12, i64 1
  store i8* %16, i8** %3, align 8
  store i8 %15, i8* %12, align 1
  %17 = load i8*, i8** %3, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %3, align 8
  store i8 -9, i8* %17, align 1
  %19 = trunc i32 %1 to i8
  %20 = and i8 %19, 7
  %21 = or i8 %20, -32
  %22 = load i8*, i8** %3, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %3, align 8
  store i8 %21, i8* %22, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4negbENS0_8RegisterE(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %10, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %10

10:                                               ; preds = %2, %9
  %11 = icmp slt i32 %1, 4
  br i1 %11, label %18, label %12

12:                                               ; preds = %10
  %13 = lshr i32 %1, 3
  %14 = trunc i32 %13 to i8
  %15 = or i8 %14, 64
  %16 = load i8*, i8** %3, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %17, i8** %3, align 8
  store i8 %15, i8* %16, align 1
  br label %18

18:                                               ; preds = %10, %12
  %19 = load i8*, i8** %3, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 1
  store i8* %20, i8** %3, align 8
  store i8 -10, i8* %19, align 1
  %21 = trunc i32 %1 to i8
  %22 = and i8 %21, 7
  %23 = or i8 %22, -40
  %24 = load i8*, i8** %3, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %3, align 8
  store i8 %23, i8* %24, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4negwENS0_8RegisterE(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %11, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %10 = load i8*, i8** %3, align 8
  br label %11

11:                                               ; preds = %2, %9
  %12 = phi i8* [ %4, %2 ], [ %10, %9 ]
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  store i8* %13, i8** %3, align 8
  store i8 102, i8* %12, align 1
  %14 = icmp ult i32 %1, 8
  br i1 %14, label %18, label %15

15:                                               ; preds = %11
  %16 = load i8*, i8** %3, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %17, i8** %3, align 8
  store i8 65, i8* %16, align 1
  br label %18

18:                                               ; preds = %11, %15
  %19 = load i8*, i8** %3, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 1
  store i8* %20, i8** %3, align 8
  store i8 -9, i8* %19, align 1
  %21 = trunc i32 %1 to i8
  %22 = and i8 %21, 7
  %23 = or i8 %22, -40
  %24 = load i8*, i8** %3, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %3, align 8
  store i8 %23, i8* %24, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4neglENS0_8RegisterE(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %10, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %10

10:                                               ; preds = %2, %9
  %11 = icmp ult i32 %1, 8
  br i1 %11, label %15, label %12

12:                                               ; preds = %10
  %13 = load i8*, i8** %3, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %3, align 8
  store i8 65, i8* %13, align 1
  br label %15

15:                                               ; preds = %10, %12
  %16 = load i8*, i8** %3, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %17, i8** %3, align 8
  store i8 -9, i8* %16, align 1
  %18 = trunc i32 %1 to i8
  %19 = and i8 %18, 7
  %20 = or i8 %19, -40
  %21 = load i8*, i8** %3, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %3, align 8
  store i8 %20, i8* %21, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4negqENS0_8RegisterE(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %11, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %10 = load i8*, i8** %3, align 8
  br label %11

11:                                               ; preds = %2, %9
  %12 = phi i8* [ %4, %2 ], [ %10, %9 ]
  %13 = lshr i32 %1, 3
  %14 = trunc i32 %13 to i8
  %15 = or i8 %14, 72
  %16 = getelementptr inbounds i8, i8* %12, i64 1
  store i8* %16, i8** %3, align 8
  store i8 %15, i8* %12, align 1
  %17 = load i8*, i8** %3, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %3, align 8
  store i8 -9, i8* %17, align 1
  %19 = trunc i32 %1 to i8
  %20 = and i8 %19, 7
  %21 = or i8 %20, -40
  %22 = load i8*, i8** %3, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %3, align 8
  store i8 %21, i8* %22, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4negbENS0_7OperandE(%"class.v8::internal::Assembler"*, i64, i32) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::Operand", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %3, %11
  %13 = trunc i64 %1 to i8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %12
  %16 = or i8 %13, 64
  %17 = load i8*, i8** %5, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %5, align 8
  store i8 %16, i8* %17, align 1
  br label %19

19:                                               ; preds = %12, %15
  %20 = load i8*, i8** %5, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 1
  store i8* %21, i8** %5, align 8
  store i8 -10, i8* %20, align 1
  %22 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %22)
  %23 = bitcast %"class.v8::internal::Operand"* %4 to i64*
  store i64 %1, i64* %23, align 8
  %24 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 7
  %25 = bitcast i8* %24 to i32*
  store i32 %2, i32* %25, align 1
  %26 = lshr i32 %2, 16
  %27 = and i32 %26, 255
  %28 = lshr i64 %1, 8
  %29 = trunc i64 %28 to i8
  %30 = or i8 %29, 24
  %31 = load i8*, i8** %5, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %32, i8** %5, align 8
  store i8 %30, i8* %31, align 1
  %33 = icmp eq i8 %29, 5
  %34 = lshr i64 %1, 16
  %35 = trunc i64 %34 to i8
  br i1 %33, label %51, label %36

36:                                               ; preds = %19
  %37 = trunc i32 %26 to i8
  %38 = icmp ugt i8 %37, 1
  br i1 %38, label %39, label %138

39:                                               ; preds = %36
  %40 = zext i32 %27 to i64
  %41 = load i8*, i8** %5, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %42, i8** %5, align 8
  store i8 %35, i8* %41, align 1
  %43 = icmp eq i32 %27, 2
  br i1 %43, label %138, label %44

44:                                               ; preds = %39
  %45 = add nsw i64 %40, -2
  %46 = add nsw i64 %40, -3
  %47 = and i64 %45, 3
  %48 = icmp ult i64 %46, 3
  br i1 %48, label %125, label %49

49:                                               ; preds = %44
  %50 = sub nsw i64 %45, %47
  br label %100

51:                                               ; preds = %19
  %52 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 1
  %53 = bitcast i8* %52 to %"class.v8::internal::Label"**
  %54 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %53, align 1
  %55 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %54, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = icmp slt i32 %56, 0
  br i1 %57, label %58, label %73

58:                                               ; preds = %51
  %59 = bitcast i8** %5 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %62 = bitcast i8** %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = sub i64 %60, %63
  %65 = trunc i64 %64 to i32
  %66 = ashr i32 %2, 24
  %67 = add nsw i32 %66, -5
  %68 = sub i32 %67, %56
  %69 = sub i32 %68, %65
  %70 = inttoptr i64 %60 to i32*
  store i32 %69, i32* %70, align 1
  %71 = load i8*, i8** %5, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 4
  store i8* %72, i8** %5, align 8
  br label %138

73:                                               ; preds = %51
  %74 = icmp eq i32 %56, 0
  br i1 %74, label %88, label %75

75:                                               ; preds = %73
  %76 = add nsw i32 %56, -1
  %77 = bitcast i8** %5 to i32**
  %78 = load i32*, i32** %77, align 8
  store i32 %76, i32* %78, align 1
  %79 = load i8*, i8** %5, align 8
  %80 = getelementptr inbounds i8, i8* %79, i64 4
  store i8* %80, i8** %5, align 8
  %81 = ptrtoint i8* %80 to i64
  %82 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %83 = bitcast i8** %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = sub i64 %81, %84
  %86 = trunc i64 %85 to i32
  %87 = add i32 %86, -3
  store i32 %87, i32* %55, align 4
  br label %138

88:                                               ; preds = %73
  %89 = bitcast i8** %5 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %92 = bitcast i8** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = sub i64 %90, %93
  %95 = trunc i64 %94 to i32
  %96 = inttoptr i64 %90 to i32*
  store i32 %95, i32* %96, align 1
  %97 = load i8*, i8** %5, align 8
  %98 = getelementptr inbounds i8, i8* %97, i64 4
  store i8* %98, i8** %5, align 8
  %99 = add nsw i32 %95, 1
  store i32 %99, i32* %55, align 4
  br label %138

100:                                              ; preds = %100, %49
  %101 = phi i64 [ 2, %49 ], [ %122, %100 ]
  %102 = phi i64 [ %50, %49 ], [ %123, %100 ]
  %103 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %101
  %104 = load i8, i8* %103, align 1
  %105 = load i8*, i8** %5, align 8
  %106 = getelementptr inbounds i8, i8* %105, i64 1
  store i8* %106, i8** %5, align 8
  store i8 %104, i8* %105, align 1
  %107 = or i64 %101, 1
  %108 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = load i8*, i8** %5, align 8
  %111 = getelementptr inbounds i8, i8* %110, i64 1
  store i8* %111, i8** %5, align 8
  store i8 %109, i8* %110, align 1
  %112 = add nuw nsw i64 %101, 2
  %113 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = load i8*, i8** %5, align 8
  %116 = getelementptr inbounds i8, i8* %115, i64 1
  store i8* %116, i8** %5, align 8
  store i8 %114, i8* %115, align 1
  %117 = add nuw nsw i64 %101, 3
  %118 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = load i8*, i8** %5, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 1
  store i8* %121, i8** %5, align 8
  store i8 %119, i8* %120, align 1
  %122 = add nuw nsw i64 %101, 4
  %123 = add i64 %102, -4
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %100

125:                                              ; preds = %100, %44
  %126 = phi i64 [ 2, %44 ], [ %122, %100 ]
  %127 = icmp eq i64 %47, 0
  br i1 %127, label %138, label %128

128:                                              ; preds = %125, %128
  %129 = phi i64 [ %135, %128 ], [ %126, %125 ]
  %130 = phi i64 [ %136, %128 ], [ %47, %125 ]
  %131 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %129
  %132 = load i8, i8* %131, align 1
  %133 = load i8*, i8** %5, align 8
  %134 = getelementptr inbounds i8, i8* %133, i64 1
  store i8* %134, i8** %5, align 8
  store i8 %132, i8* %133, align 1
  %135 = add nuw nsw i64 %129, 1
  %136 = add i64 %130, -1
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %128, !llvm.loop !37

138:                                              ; preds = %125, %128, %39, %36, %58, %75, %88
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %22)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4negwENS0_7OperandE(%"class.v8::internal::Assembler"*, i64, i32) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::Operand", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %3, %11
  %14 = phi i8* [ %6, %3 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 102, i8* %14, align 1
  %16 = trunc i64 %1 to i8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %22, label %18

18:                                               ; preds = %13
  %19 = or i8 %16, 64
  %20 = load i8*, i8** %5, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 1
  store i8* %21, i8** %5, align 8
  store i8 %19, i8* %20, align 1
  br label %22

22:                                               ; preds = %13, %18
  %23 = load i8*, i8** %5, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %5, align 8
  store i8 -9, i8* %23, align 1
  %25 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %25)
  %26 = bitcast %"class.v8::internal::Operand"* %4 to i64*
  store i64 %1, i64* %26, align 8
  %27 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 7
  %28 = bitcast i8* %27 to i32*
  store i32 %2, i32* %28, align 1
  %29 = lshr i32 %2, 16
  %30 = and i32 %29, 255
  %31 = lshr i64 %1, 8
  %32 = trunc i64 %31 to i8
  %33 = or i8 %32, 24
  %34 = load i8*, i8** %5, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %5, align 8
  store i8 %33, i8* %34, align 1
  %36 = icmp eq i8 %32, 5
  %37 = lshr i64 %1, 16
  %38 = trunc i64 %37 to i8
  br i1 %36, label %54, label %39

39:                                               ; preds = %22
  %40 = trunc i32 %29 to i8
  %41 = icmp ugt i8 %40, 1
  br i1 %41, label %42, label %141

42:                                               ; preds = %39
  %43 = zext i32 %30 to i64
  %44 = load i8*, i8** %5, align 8
  %45 = getelementptr inbounds i8, i8* %44, i64 1
  store i8* %45, i8** %5, align 8
  store i8 %38, i8* %44, align 1
  %46 = icmp eq i32 %30, 2
  br i1 %46, label %141, label %47

47:                                               ; preds = %42
  %48 = add nsw i64 %43, -2
  %49 = add nsw i64 %43, -3
  %50 = and i64 %48, 3
  %51 = icmp ult i64 %49, 3
  br i1 %51, label %128, label %52

52:                                               ; preds = %47
  %53 = sub nsw i64 %48, %50
  br label %103

54:                                               ; preds = %22
  %55 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 1
  %56 = bitcast i8* %55 to %"class.v8::internal::Label"**
  %57 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %56, align 1
  %58 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %57, i64 0, i32 0
  %59 = load i32, i32* %58, align 4
  %60 = icmp slt i32 %59, 0
  br i1 %60, label %61, label %76

61:                                               ; preds = %54
  %62 = bitcast i8** %5 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %65 = bitcast i8** %64 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = sub i64 %63, %66
  %68 = trunc i64 %67 to i32
  %69 = ashr i32 %2, 24
  %70 = add nsw i32 %69, -5
  %71 = sub i32 %70, %59
  %72 = sub i32 %71, %68
  %73 = inttoptr i64 %63 to i32*
  store i32 %72, i32* %73, align 1
  %74 = load i8*, i8** %5, align 8
  %75 = getelementptr inbounds i8, i8* %74, i64 4
  store i8* %75, i8** %5, align 8
  br label %141

76:                                               ; preds = %54
  %77 = icmp eq i32 %59, 0
  br i1 %77, label %91, label %78

78:                                               ; preds = %76
  %79 = add nsw i32 %59, -1
  %80 = bitcast i8** %5 to i32**
  %81 = load i32*, i32** %80, align 8
  store i32 %79, i32* %81, align 1
  %82 = load i8*, i8** %5, align 8
  %83 = getelementptr inbounds i8, i8* %82, i64 4
  store i8* %83, i8** %5, align 8
  %84 = ptrtoint i8* %83 to i64
  %85 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %86 = bitcast i8** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = sub i64 %84, %87
  %89 = trunc i64 %88 to i32
  %90 = add i32 %89, -3
  store i32 %90, i32* %58, align 4
  br label %141

91:                                               ; preds = %76
  %92 = bitcast i8** %5 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %95 = bitcast i8** %94 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = sub i64 %93, %96
  %98 = trunc i64 %97 to i32
  %99 = inttoptr i64 %93 to i32*
  store i32 %98, i32* %99, align 1
  %100 = load i8*, i8** %5, align 8
  %101 = getelementptr inbounds i8, i8* %100, i64 4
  store i8* %101, i8** %5, align 8
  %102 = add nsw i32 %98, 1
  store i32 %102, i32* %58, align 4
  br label %141

103:                                              ; preds = %103, %52
  %104 = phi i64 [ 2, %52 ], [ %125, %103 ]
  %105 = phi i64 [ %53, %52 ], [ %126, %103 ]
  %106 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %104
  %107 = load i8, i8* %106, align 1
  %108 = load i8*, i8** %5, align 8
  %109 = getelementptr inbounds i8, i8* %108, i64 1
  store i8* %109, i8** %5, align 8
  store i8 %107, i8* %108, align 1
  %110 = or i64 %104, 1
  %111 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %110
  %112 = load i8, i8* %111, align 1
  %113 = load i8*, i8** %5, align 8
  %114 = getelementptr inbounds i8, i8* %113, i64 1
  store i8* %114, i8** %5, align 8
  store i8 %112, i8* %113, align 1
  %115 = add nuw nsw i64 %104, 2
  %116 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = load i8*, i8** %5, align 8
  %119 = getelementptr inbounds i8, i8* %118, i64 1
  store i8* %119, i8** %5, align 8
  store i8 %117, i8* %118, align 1
  %120 = add nuw nsw i64 %104, 3
  %121 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %120
  %122 = load i8, i8* %121, align 1
  %123 = load i8*, i8** %5, align 8
  %124 = getelementptr inbounds i8, i8* %123, i64 1
  store i8* %124, i8** %5, align 8
  store i8 %122, i8* %123, align 1
  %125 = add nuw nsw i64 %104, 4
  %126 = add i64 %105, -4
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %128, label %103

128:                                              ; preds = %103, %47
  %129 = phi i64 [ 2, %47 ], [ %125, %103 ]
  %130 = icmp eq i64 %50, 0
  br i1 %130, label %141, label %131

131:                                              ; preds = %128, %131
  %132 = phi i64 [ %138, %131 ], [ %129, %128 ]
  %133 = phi i64 [ %139, %131 ], [ %50, %128 ]
  %134 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %132
  %135 = load i8, i8* %134, align 1
  %136 = load i8*, i8** %5, align 8
  %137 = getelementptr inbounds i8, i8* %136, i64 1
  store i8* %137, i8** %5, align 8
  store i8 %135, i8* %136, align 1
  %138 = add nuw nsw i64 %132, 1
  %139 = add i64 %133, -1
  %140 = icmp eq i64 %139, 0
  br i1 %140, label %141, label %131, !llvm.loop !38

141:                                              ; preds = %128, %131, %42, %39, %61, %78, %91
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %25)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4neglENS0_7OperandE(%"class.v8::internal::Assembler"*, i64, i32) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::Operand", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %3, %11
  %13 = trunc i64 %1 to i8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %12
  %16 = or i8 %13, 64
  %17 = load i8*, i8** %5, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %5, align 8
  store i8 %16, i8* %17, align 1
  br label %19

19:                                               ; preds = %12, %15
  %20 = load i8*, i8** %5, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 1
  store i8* %21, i8** %5, align 8
  store i8 -9, i8* %20, align 1
  %22 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %22)
  %23 = bitcast %"class.v8::internal::Operand"* %4 to i64*
  store i64 %1, i64* %23, align 8
  %24 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 7
  %25 = bitcast i8* %24 to i32*
  store i32 %2, i32* %25, align 1
  %26 = lshr i32 %2, 16
  %27 = and i32 %26, 255
  %28 = lshr i64 %1, 8
  %29 = trunc i64 %28 to i8
  %30 = or i8 %29, 24
  %31 = load i8*, i8** %5, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %32, i8** %5, align 8
  store i8 %30, i8* %31, align 1
  %33 = icmp eq i8 %29, 5
  %34 = lshr i64 %1, 16
  %35 = trunc i64 %34 to i8
  br i1 %33, label %51, label %36

36:                                               ; preds = %19
  %37 = trunc i32 %26 to i8
  %38 = icmp ugt i8 %37, 1
  br i1 %38, label %39, label %138

39:                                               ; preds = %36
  %40 = zext i32 %27 to i64
  %41 = load i8*, i8** %5, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %42, i8** %5, align 8
  store i8 %35, i8* %41, align 1
  %43 = icmp eq i32 %27, 2
  br i1 %43, label %138, label %44

44:                                               ; preds = %39
  %45 = add nsw i64 %40, -2
  %46 = add nsw i64 %40, -3
  %47 = and i64 %45, 3
  %48 = icmp ult i64 %46, 3
  br i1 %48, label %125, label %49

49:                                               ; preds = %44
  %50 = sub nsw i64 %45, %47
  br label %100

51:                                               ; preds = %19
  %52 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 1
  %53 = bitcast i8* %52 to %"class.v8::internal::Label"**
  %54 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %53, align 1
  %55 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %54, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = icmp slt i32 %56, 0
  br i1 %57, label %58, label %73

58:                                               ; preds = %51
  %59 = bitcast i8** %5 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %62 = bitcast i8** %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = sub i64 %60, %63
  %65 = trunc i64 %64 to i32
  %66 = ashr i32 %2, 24
  %67 = add nsw i32 %66, -5
  %68 = sub i32 %67, %56
  %69 = sub i32 %68, %65
  %70 = inttoptr i64 %60 to i32*
  store i32 %69, i32* %70, align 1
  %71 = load i8*, i8** %5, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 4
  store i8* %72, i8** %5, align 8
  br label %138

73:                                               ; preds = %51
  %74 = icmp eq i32 %56, 0
  br i1 %74, label %88, label %75

75:                                               ; preds = %73
  %76 = add nsw i32 %56, -1
  %77 = bitcast i8** %5 to i32**
  %78 = load i32*, i32** %77, align 8
  store i32 %76, i32* %78, align 1
  %79 = load i8*, i8** %5, align 8
  %80 = getelementptr inbounds i8, i8* %79, i64 4
  store i8* %80, i8** %5, align 8
  %81 = ptrtoint i8* %80 to i64
  %82 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %83 = bitcast i8** %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = sub i64 %81, %84
  %86 = trunc i64 %85 to i32
  %87 = add i32 %86, -3
  store i32 %87, i32* %55, align 4
  br label %138

88:                                               ; preds = %73
  %89 = bitcast i8** %5 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %92 = bitcast i8** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = sub i64 %90, %93
  %95 = trunc i64 %94 to i32
  %96 = inttoptr i64 %90 to i32*
  store i32 %95, i32* %96, align 1
  %97 = load i8*, i8** %5, align 8
  %98 = getelementptr inbounds i8, i8* %97, i64 4
  store i8* %98, i8** %5, align 8
  %99 = add nsw i32 %95, 1
  store i32 %99, i32* %55, align 4
  br label %138

100:                                              ; preds = %100, %49
  %101 = phi i64 [ 2, %49 ], [ %122, %100 ]
  %102 = phi i64 [ %50, %49 ], [ %123, %100 ]
  %103 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %101
  %104 = load i8, i8* %103, align 1
  %105 = load i8*, i8** %5, align 8
  %106 = getelementptr inbounds i8, i8* %105, i64 1
  store i8* %106, i8** %5, align 8
  store i8 %104, i8* %105, align 1
  %107 = or i64 %101, 1
  %108 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = load i8*, i8** %5, align 8
  %111 = getelementptr inbounds i8, i8* %110, i64 1
  store i8* %111, i8** %5, align 8
  store i8 %109, i8* %110, align 1
  %112 = add nuw nsw i64 %101, 2
  %113 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = load i8*, i8** %5, align 8
  %116 = getelementptr inbounds i8, i8* %115, i64 1
  store i8* %116, i8** %5, align 8
  store i8 %114, i8* %115, align 1
  %117 = add nuw nsw i64 %101, 3
  %118 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = load i8*, i8** %5, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 1
  store i8* %121, i8** %5, align 8
  store i8 %119, i8* %120, align 1
  %122 = add nuw nsw i64 %101, 4
  %123 = add i64 %102, -4
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %100

125:                                              ; preds = %100, %44
  %126 = phi i64 [ 2, %44 ], [ %122, %100 ]
  %127 = icmp eq i64 %47, 0
  br i1 %127, label %138, label %128

128:                                              ; preds = %125, %128
  %129 = phi i64 [ %135, %128 ], [ %126, %125 ]
  %130 = phi i64 [ %136, %128 ], [ %47, %125 ]
  %131 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %129
  %132 = load i8, i8* %131, align 1
  %133 = load i8*, i8** %5, align 8
  %134 = getelementptr inbounds i8, i8* %133, i64 1
  store i8* %134, i8** %5, align 8
  store i8 %132, i8* %133, align 1
  %135 = add nuw nsw i64 %129, 1
  %136 = add i64 %130, -1
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %128, !llvm.loop !39

138:                                              ; preds = %125, %128, %39, %36, %58, %75, %88
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %22)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4negqENS0_7OperandE(%"class.v8::internal::Assembler"*, i64, i32) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::Operand", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %3, %11
  %14 = phi i8* [ %6, %3 ], [ %12, %11 ]
  %15 = trunc i64 %1 to i8
  %16 = or i8 %15, 72
  %17 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %17, i8** %5, align 8
  store i8 %16, i8* %14, align 1
  %18 = load i8*, i8** %5, align 8
  %19 = getelementptr inbounds i8, i8* %18, i64 1
  store i8* %19, i8** %5, align 8
  store i8 -9, i8* %18, align 1
  %20 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %20)
  %21 = bitcast %"class.v8::internal::Operand"* %4 to i64*
  store i64 %1, i64* %21, align 8
  %22 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 7
  %23 = bitcast i8* %22 to i32*
  store i32 %2, i32* %23, align 1
  %24 = lshr i32 %2, 16
  %25 = and i32 %24, 255
  %26 = lshr i64 %1, 8
  %27 = trunc i64 %26 to i8
  %28 = or i8 %27, 24
  %29 = load i8*, i8** %5, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %5, align 8
  store i8 %28, i8* %29, align 1
  %31 = icmp eq i8 %27, 5
  %32 = lshr i64 %1, 16
  %33 = trunc i64 %32 to i8
  br i1 %31, label %49, label %34

34:                                               ; preds = %13
  %35 = trunc i32 %24 to i8
  %36 = icmp ugt i8 %35, 1
  br i1 %36, label %37, label %136

37:                                               ; preds = %34
  %38 = zext i32 %25 to i64
  %39 = load i8*, i8** %5, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  store i8* %40, i8** %5, align 8
  store i8 %33, i8* %39, align 1
  %41 = icmp eq i32 %25, 2
  br i1 %41, label %136, label %42

42:                                               ; preds = %37
  %43 = add nsw i64 %38, -2
  %44 = add nsw i64 %38, -3
  %45 = and i64 %43, 3
  %46 = icmp ult i64 %44, 3
  br i1 %46, label %123, label %47

47:                                               ; preds = %42
  %48 = sub nsw i64 %43, %45
  br label %98

49:                                               ; preds = %13
  %50 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 1
  %51 = bitcast i8* %50 to %"class.v8::internal::Label"**
  %52 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %51, align 1
  %53 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %52, i64 0, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = icmp slt i32 %54, 0
  br i1 %55, label %56, label %71

56:                                               ; preds = %49
  %57 = bitcast i8** %5 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %60 = bitcast i8** %59 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = sub i64 %58, %61
  %63 = trunc i64 %62 to i32
  %64 = ashr i32 %2, 24
  %65 = add nsw i32 %64, -5
  %66 = sub i32 %65, %54
  %67 = sub i32 %66, %63
  %68 = inttoptr i64 %58 to i32*
  store i32 %67, i32* %68, align 1
  %69 = load i8*, i8** %5, align 8
  %70 = getelementptr inbounds i8, i8* %69, i64 4
  store i8* %70, i8** %5, align 8
  br label %136

71:                                               ; preds = %49
  %72 = icmp eq i32 %54, 0
  br i1 %72, label %86, label %73

73:                                               ; preds = %71
  %74 = add nsw i32 %54, -1
  %75 = bitcast i8** %5 to i32**
  %76 = load i32*, i32** %75, align 8
  store i32 %74, i32* %76, align 1
  %77 = load i8*, i8** %5, align 8
  %78 = getelementptr inbounds i8, i8* %77, i64 4
  store i8* %78, i8** %5, align 8
  %79 = ptrtoint i8* %78 to i64
  %80 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %81 = bitcast i8** %80 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = sub i64 %79, %82
  %84 = trunc i64 %83 to i32
  %85 = add i32 %84, -3
  store i32 %85, i32* %53, align 4
  br label %136

86:                                               ; preds = %71
  %87 = bitcast i8** %5 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %90 = bitcast i8** %89 to i64*
  %91 = load i64, i64* %90, align 8
  %92 = sub i64 %88, %91
  %93 = trunc i64 %92 to i32
  %94 = inttoptr i64 %88 to i32*
  store i32 %93, i32* %94, align 1
  %95 = load i8*, i8** %5, align 8
  %96 = getelementptr inbounds i8, i8* %95, i64 4
  store i8* %96, i8** %5, align 8
  %97 = add nsw i32 %93, 1
  store i32 %97, i32* %53, align 4
  br label %136

98:                                               ; preds = %98, %47
  %99 = phi i64 [ 2, %47 ], [ %120, %98 ]
  %100 = phi i64 [ %48, %47 ], [ %121, %98 ]
  %101 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %99
  %102 = load i8, i8* %101, align 1
  %103 = load i8*, i8** %5, align 8
  %104 = getelementptr inbounds i8, i8* %103, i64 1
  store i8* %104, i8** %5, align 8
  store i8 %102, i8* %103, align 1
  %105 = or i64 %99, 1
  %106 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %105
  %107 = load i8, i8* %106, align 1
  %108 = load i8*, i8** %5, align 8
  %109 = getelementptr inbounds i8, i8* %108, i64 1
  store i8* %109, i8** %5, align 8
  store i8 %107, i8* %108, align 1
  %110 = add nuw nsw i64 %99, 2
  %111 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %110
  %112 = load i8, i8* %111, align 1
  %113 = load i8*, i8** %5, align 8
  %114 = getelementptr inbounds i8, i8* %113, i64 1
  store i8* %114, i8** %5, align 8
  store i8 %112, i8* %113, align 1
  %115 = add nuw nsw i64 %99, 3
  %116 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = load i8*, i8** %5, align 8
  %119 = getelementptr inbounds i8, i8* %118, i64 1
  store i8* %119, i8** %5, align 8
  store i8 %117, i8* %118, align 1
  %120 = add nuw nsw i64 %99, 4
  %121 = add i64 %100, -4
  %122 = icmp eq i64 %121, 0
  br i1 %122, label %123, label %98

123:                                              ; preds = %98, %42
  %124 = phi i64 [ 2, %42 ], [ %120, %98 ]
  %125 = icmp eq i64 %45, 0
  br i1 %125, label %136, label %126

126:                                              ; preds = %123, %126
  %127 = phi i64 [ %133, %126 ], [ %124, %123 ]
  %128 = phi i64 [ %134, %126 ], [ %45, %123 ]
  %129 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %127
  %130 = load i8, i8* %129, align 1
  %131 = load i8*, i8** %5, align 8
  %132 = getelementptr inbounds i8, i8* %131, i64 1
  store i8* %132, i8** %5, align 8
  store i8 %130, i8* %131, align 1
  %133 = add nuw nsw i64 %127, 1
  %134 = add i64 %128, -1
  %135 = icmp eq i64 %134, 0
  br i1 %135, label %136, label %126, !llvm.loop !40

136:                                              ; preds = %123, %126, %37, %34, %56, %73, %86
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %20)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler3nopEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -112, i8* %11, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8emit_notENS0_8RegisterEi(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %11, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %11

11:                                               ; preds = %3, %10
  %12 = icmp eq i32 %2, 8
  br i1 %12, label %13, label %19

13:                                               ; preds = %11
  %14 = lshr i32 %1, 3
  %15 = trunc i32 %14 to i8
  %16 = or i8 %15, 72
  %17 = load i8*, i8** %4, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %4, align 8
  store i8 %16, i8* %17, align 1
  br label %24

19:                                               ; preds = %11
  %20 = icmp ult i32 %1, 8
  br i1 %20, label %24, label %21

21:                                               ; preds = %19
  %22 = load i8*, i8** %4, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %4, align 8
  store i8 65, i8* %22, align 1
  br label %24

24:                                               ; preds = %13, %19, %21
  %25 = load i8*, i8** %4, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %4, align 8
  store i8 -9, i8* %25, align 1
  %27 = trunc i32 %1 to i8
  %28 = and i8 %27, 7
  %29 = or i8 %28, -48
  %30 = load i8*, i8** %4, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %4, align 8
  store i8 %29, i8* %30, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8emit_notENS0_7OperandEi(%"class.v8::internal::Assembler"*, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = alloca %"class.v8::internal::Operand", align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %13, label %12, !prof !11

12:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %13

13:                                               ; preds = %4, %12
  %14 = icmp eq i32 %3, 8
  %15 = trunc i64 %1 to i8
  br i1 %14, label %16, label %20

16:                                               ; preds = %13
  %17 = or i8 %15, 72
  %18 = load i8*, i8** %6, align 8
  %19 = getelementptr inbounds i8, i8* %18, i64 1
  store i8* %19, i8** %6, align 8
  store i8 %17, i8* %18, align 1
  br label %26

20:                                               ; preds = %13
  %21 = icmp eq i8 %15, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %20
  %23 = or i8 %15, 64
  %24 = load i8*, i8** %6, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %6, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %16, %20, %22
  %27 = load i8*, i8** %6, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %6, align 8
  store i8 -9, i8* %27, align 1
  %29 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %29)
  %30 = bitcast %"class.v8::internal::Operand"* %5 to i64*
  store i64 %1, i64* %30, align 8
  %31 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 7
  %32 = bitcast i8* %31 to i32*
  store i32 %2, i32* %32, align 1
  %33 = lshr i32 %2, 16
  %34 = and i32 %33, 255
  %35 = lshr i64 %1, 8
  %36 = trunc i64 %35 to i8
  %37 = or i8 %36, 16
  %38 = load i8*, i8** %6, align 8
  %39 = getelementptr inbounds i8, i8* %38, i64 1
  store i8* %39, i8** %6, align 8
  store i8 %37, i8* %38, align 1
  %40 = icmp eq i8 %36, 5
  %41 = lshr i64 %1, 16
  %42 = trunc i64 %41 to i8
  br i1 %40, label %58, label %43

43:                                               ; preds = %26
  %44 = trunc i32 %33 to i8
  %45 = icmp ugt i8 %44, 1
  br i1 %45, label %46, label %145

46:                                               ; preds = %43
  %47 = zext i32 %34 to i64
  %48 = load i8*, i8** %6, align 8
  %49 = getelementptr inbounds i8, i8* %48, i64 1
  store i8* %49, i8** %6, align 8
  store i8 %42, i8* %48, align 1
  %50 = icmp eq i32 %34, 2
  br i1 %50, label %145, label %51

51:                                               ; preds = %46
  %52 = add nsw i64 %47, -2
  %53 = add nsw i64 %47, -3
  %54 = and i64 %52, 3
  %55 = icmp ult i64 %53, 3
  br i1 %55, label %132, label %56

56:                                               ; preds = %51
  %57 = sub nsw i64 %52, %54
  br label %107

58:                                               ; preds = %26
  %59 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 1
  %60 = bitcast i8* %59 to %"class.v8::internal::Label"**
  %61 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %60, align 1
  %62 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %61, i64 0, i32 0
  %63 = load i32, i32* %62, align 4
  %64 = icmp slt i32 %63, 0
  br i1 %64, label %65, label %80

65:                                               ; preds = %58
  %66 = bitcast i8** %6 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %69 = bitcast i8** %68 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = sub i64 %67, %70
  %72 = trunc i64 %71 to i32
  %73 = ashr i32 %2, 24
  %74 = add nsw i32 %73, -5
  %75 = sub i32 %74, %63
  %76 = sub i32 %75, %72
  %77 = inttoptr i64 %67 to i32*
  store i32 %76, i32* %77, align 1
  %78 = load i8*, i8** %6, align 8
  %79 = getelementptr inbounds i8, i8* %78, i64 4
  store i8* %79, i8** %6, align 8
  br label %145

80:                                               ; preds = %58
  %81 = icmp eq i32 %63, 0
  br i1 %81, label %95, label %82

82:                                               ; preds = %80
  %83 = add nsw i32 %63, -1
  %84 = bitcast i8** %6 to i32**
  %85 = load i32*, i32** %84, align 8
  store i32 %83, i32* %85, align 1
  %86 = load i8*, i8** %6, align 8
  %87 = getelementptr inbounds i8, i8* %86, i64 4
  store i8* %87, i8** %6, align 8
  %88 = ptrtoint i8* %87 to i64
  %89 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %90 = bitcast i8** %89 to i64*
  %91 = load i64, i64* %90, align 8
  %92 = sub i64 %88, %91
  %93 = trunc i64 %92 to i32
  %94 = add i32 %93, -3
  store i32 %94, i32* %62, align 4
  br label %145

95:                                               ; preds = %80
  %96 = bitcast i8** %6 to i64*
  %97 = load i64, i64* %96, align 8
  %98 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %99 = bitcast i8** %98 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = sub i64 %97, %100
  %102 = trunc i64 %101 to i32
  %103 = inttoptr i64 %97 to i32*
  store i32 %102, i32* %103, align 1
  %104 = load i8*, i8** %6, align 8
  %105 = getelementptr inbounds i8, i8* %104, i64 4
  store i8* %105, i8** %6, align 8
  %106 = add nsw i32 %102, 1
  store i32 %106, i32* %62, align 4
  br label %145

107:                                              ; preds = %107, %56
  %108 = phi i64 [ 2, %56 ], [ %129, %107 ]
  %109 = phi i64 [ %57, %56 ], [ %130, %107 ]
  %110 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %108
  %111 = load i8, i8* %110, align 1
  %112 = load i8*, i8** %6, align 8
  %113 = getelementptr inbounds i8, i8* %112, i64 1
  store i8* %113, i8** %6, align 8
  store i8 %111, i8* %112, align 1
  %114 = or i64 %108, 1
  %115 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %114
  %116 = load i8, i8* %115, align 1
  %117 = load i8*, i8** %6, align 8
  %118 = getelementptr inbounds i8, i8* %117, i64 1
  store i8* %118, i8** %6, align 8
  store i8 %116, i8* %117, align 1
  %119 = add nuw nsw i64 %108, 2
  %120 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %119
  %121 = load i8, i8* %120, align 1
  %122 = load i8*, i8** %6, align 8
  %123 = getelementptr inbounds i8, i8* %122, i64 1
  store i8* %123, i8** %6, align 8
  store i8 %121, i8* %122, align 1
  %124 = add nuw nsw i64 %108, 3
  %125 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %124
  %126 = load i8, i8* %125, align 1
  %127 = load i8*, i8** %6, align 8
  %128 = getelementptr inbounds i8, i8* %127, i64 1
  store i8* %128, i8** %6, align 8
  store i8 %126, i8* %127, align 1
  %129 = add nuw nsw i64 %108, 4
  %130 = add i64 %109, -4
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %132, label %107

132:                                              ; preds = %107, %51
  %133 = phi i64 [ 2, %51 ], [ %129, %107 ]
  %134 = icmp eq i64 %54, 0
  br i1 %134, label %145, label %135

135:                                              ; preds = %132, %135
  %136 = phi i64 [ %142, %135 ], [ %133, %132 ]
  %137 = phi i64 [ %143, %135 ], [ %54, %132 ]
  %138 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 %136
  %139 = load i8, i8* %138, align 1
  %140 = load i8*, i8** %6, align 8
  %141 = getelementptr inbounds i8, i8* %140, i64 1
  store i8* %141, i8** %6, align 8
  store i8 %139, i8* %140, align 1
  %142 = add nuw nsw i64 %136, 1
  %143 = add i64 %137, -1
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %145, label %135, !llvm.loop !41

145:                                              ; preds = %132, %135, %46, %43, %65, %82, %95
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %29)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4popqENS0_8RegisterE(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %10, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %10

10:                                               ; preds = %2, %9
  %11 = icmp ult i32 %1, 8
  br i1 %11, label %15, label %12

12:                                               ; preds = %10
  %13 = load i8*, i8** %3, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %3, align 8
  store i8 65, i8* %13, align 1
  br label %15

15:                                               ; preds = %10, %12
  %16 = trunc i32 %1 to i8
  %17 = and i8 %16, 7
  %18 = or i8 %17, 88
  %19 = load i8*, i8** %3, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 1
  store i8* %20, i8** %3, align 8
  store i8 %18, i8* %19, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4popqENS0_7OperandE(%"class.v8::internal::Assembler"*, i64, i32) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::Operand", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %3, %11
  %13 = trunc i64 %1 to i8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %12
  %16 = or i8 %13, 64
  %17 = load i8*, i8** %5, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %5, align 8
  store i8 %16, i8* %17, align 1
  br label %19

19:                                               ; preds = %12, %15
  %20 = load i8*, i8** %5, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 1
  store i8* %21, i8** %5, align 8
  store i8 -113, i8* %20, align 1
  %22 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %22)
  %23 = bitcast %"class.v8::internal::Operand"* %4 to i64*
  store i64 %1, i64* %23, align 8
  %24 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 7
  %25 = bitcast i8* %24 to i32*
  store i32 %2, i32* %25, align 1
  %26 = lshr i32 %2, 16
  %27 = and i32 %26, 255
  %28 = lshr i64 %1, 8
  %29 = trunc i64 %28 to i8
  %30 = load i8*, i8** %5, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %5, align 8
  store i8 %29, i8* %30, align 1
  %32 = icmp eq i8 %29, 5
  %33 = lshr i64 %1, 16
  %34 = trunc i64 %33 to i8
  br i1 %32, label %50, label %35

35:                                               ; preds = %19
  %36 = trunc i32 %26 to i8
  %37 = icmp ugt i8 %36, 1
  br i1 %37, label %38, label %137

38:                                               ; preds = %35
  %39 = zext i32 %27 to i64
  %40 = load i8*, i8** %5, align 8
  %41 = getelementptr inbounds i8, i8* %40, i64 1
  store i8* %41, i8** %5, align 8
  store i8 %34, i8* %40, align 1
  %42 = icmp eq i32 %27, 2
  br i1 %42, label %137, label %43

43:                                               ; preds = %38
  %44 = add nsw i64 %39, -2
  %45 = add nsw i64 %39, -3
  %46 = and i64 %44, 3
  %47 = icmp ult i64 %45, 3
  br i1 %47, label %124, label %48

48:                                               ; preds = %43
  %49 = sub nsw i64 %44, %46
  br label %99

50:                                               ; preds = %19
  %51 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 1
  %52 = bitcast i8* %51 to %"class.v8::internal::Label"**
  %53 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %52, align 1
  %54 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %53, i64 0, i32 0
  %55 = load i32, i32* %54, align 4
  %56 = icmp slt i32 %55, 0
  br i1 %56, label %57, label %72

57:                                               ; preds = %50
  %58 = bitcast i8** %5 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %61 = bitcast i8** %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = sub i64 %59, %62
  %64 = trunc i64 %63 to i32
  %65 = ashr i32 %2, 24
  %66 = add nsw i32 %65, -5
  %67 = sub i32 %66, %55
  %68 = sub i32 %67, %64
  %69 = inttoptr i64 %59 to i32*
  store i32 %68, i32* %69, align 1
  %70 = load i8*, i8** %5, align 8
  %71 = getelementptr inbounds i8, i8* %70, i64 4
  store i8* %71, i8** %5, align 8
  br label %137

72:                                               ; preds = %50
  %73 = icmp eq i32 %55, 0
  br i1 %73, label %87, label %74

74:                                               ; preds = %72
  %75 = add nsw i32 %55, -1
  %76 = bitcast i8** %5 to i32**
  %77 = load i32*, i32** %76, align 8
  store i32 %75, i32* %77, align 1
  %78 = load i8*, i8** %5, align 8
  %79 = getelementptr inbounds i8, i8* %78, i64 4
  store i8* %79, i8** %5, align 8
  %80 = ptrtoint i8* %79 to i64
  %81 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %82 = bitcast i8** %81 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = sub i64 %80, %83
  %85 = trunc i64 %84 to i32
  %86 = add i32 %85, -3
  store i32 %86, i32* %54, align 4
  br label %137

87:                                               ; preds = %72
  %88 = bitcast i8** %5 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %91 = bitcast i8** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = sub i64 %89, %92
  %94 = trunc i64 %93 to i32
  %95 = inttoptr i64 %89 to i32*
  store i32 %94, i32* %95, align 1
  %96 = load i8*, i8** %5, align 8
  %97 = getelementptr inbounds i8, i8* %96, i64 4
  store i8* %97, i8** %5, align 8
  %98 = add nsw i32 %94, 1
  store i32 %98, i32* %54, align 4
  br label %137

99:                                               ; preds = %99, %48
  %100 = phi i64 [ 2, %48 ], [ %121, %99 ]
  %101 = phi i64 [ %49, %48 ], [ %122, %99 ]
  %102 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %100
  %103 = load i8, i8* %102, align 1
  %104 = load i8*, i8** %5, align 8
  %105 = getelementptr inbounds i8, i8* %104, i64 1
  store i8* %105, i8** %5, align 8
  store i8 %103, i8* %104, align 1
  %106 = or i64 %100, 1
  %107 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %106
  %108 = load i8, i8* %107, align 1
  %109 = load i8*, i8** %5, align 8
  %110 = getelementptr inbounds i8, i8* %109, i64 1
  store i8* %110, i8** %5, align 8
  store i8 %108, i8* %109, align 1
  %111 = add nuw nsw i64 %100, 2
  %112 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %111
  %113 = load i8, i8* %112, align 1
  %114 = load i8*, i8** %5, align 8
  %115 = getelementptr inbounds i8, i8* %114, i64 1
  store i8* %115, i8** %5, align 8
  store i8 %113, i8* %114, align 1
  %116 = add nuw nsw i64 %100, 3
  %117 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %116
  %118 = load i8, i8* %117, align 1
  %119 = load i8*, i8** %5, align 8
  %120 = getelementptr inbounds i8, i8* %119, i64 1
  store i8* %120, i8** %5, align 8
  store i8 %118, i8* %119, align 1
  %121 = add nuw nsw i64 %100, 4
  %122 = add i64 %101, -4
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %124, label %99

124:                                              ; preds = %99, %43
  %125 = phi i64 [ 2, %43 ], [ %121, %99 ]
  %126 = icmp eq i64 %46, 0
  br i1 %126, label %137, label %127

127:                                              ; preds = %124, %127
  %128 = phi i64 [ %134, %127 ], [ %125, %124 ]
  %129 = phi i64 [ %135, %127 ], [ %46, %124 ]
  %130 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %128
  %131 = load i8, i8* %130, align 1
  %132 = load i8*, i8** %5, align 8
  %133 = getelementptr inbounds i8, i8* %132, i64 1
  store i8* %133, i8** %5, align 8
  store i8 %131, i8* %132, align 1
  %134 = add nuw nsw i64 %128, 1
  %135 = add i64 %129, -1
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %137, label %127, !llvm.loop !42

137:                                              ; preds = %124, %127, %38, %35, %57, %74, %87
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %22)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5popfqEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -99, i8* %11, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5pushqENS0_8RegisterE(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %10, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %10

10:                                               ; preds = %2, %9
  %11 = icmp ult i32 %1, 8
  br i1 %11, label %15, label %12

12:                                               ; preds = %10
  %13 = load i8*, i8** %3, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %3, align 8
  store i8 65, i8* %13, align 1
  br label %15

15:                                               ; preds = %10, %12
  %16 = trunc i32 %1 to i8
  %17 = and i8 %16, 7
  %18 = or i8 %17, 80
  %19 = load i8*, i8** %3, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 1
  store i8* %20, i8** %3, align 8
  store i8 %18, i8* %19, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5pushqENS0_7OperandE(%"class.v8::internal::Assembler"*, i64, i32) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::Operand", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %3, %11
  %13 = trunc i64 %1 to i8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %12
  %16 = or i8 %13, 64
  %17 = load i8*, i8** %5, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %5, align 8
  store i8 %16, i8* %17, align 1
  br label %19

19:                                               ; preds = %12, %15
  %20 = load i8*, i8** %5, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 1
  store i8* %21, i8** %5, align 8
  store i8 -1, i8* %20, align 1
  %22 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %22)
  %23 = bitcast %"class.v8::internal::Operand"* %4 to i64*
  store i64 %1, i64* %23, align 8
  %24 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 7
  %25 = bitcast i8* %24 to i32*
  store i32 %2, i32* %25, align 1
  %26 = lshr i32 %2, 16
  %27 = and i32 %26, 255
  %28 = lshr i64 %1, 8
  %29 = trunc i64 %28 to i8
  %30 = or i8 %29, 48
  %31 = load i8*, i8** %5, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %32, i8** %5, align 8
  store i8 %30, i8* %31, align 1
  %33 = icmp eq i8 %29, 5
  %34 = lshr i64 %1, 16
  %35 = trunc i64 %34 to i8
  br i1 %33, label %51, label %36

36:                                               ; preds = %19
  %37 = trunc i32 %26 to i8
  %38 = icmp ugt i8 %37, 1
  br i1 %38, label %39, label %138

39:                                               ; preds = %36
  %40 = zext i32 %27 to i64
  %41 = load i8*, i8** %5, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %42, i8** %5, align 8
  store i8 %35, i8* %41, align 1
  %43 = icmp eq i32 %27, 2
  br i1 %43, label %138, label %44

44:                                               ; preds = %39
  %45 = add nsw i64 %40, -2
  %46 = add nsw i64 %40, -3
  %47 = and i64 %45, 3
  %48 = icmp ult i64 %46, 3
  br i1 %48, label %125, label %49

49:                                               ; preds = %44
  %50 = sub nsw i64 %45, %47
  br label %100

51:                                               ; preds = %19
  %52 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 1
  %53 = bitcast i8* %52 to %"class.v8::internal::Label"**
  %54 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %53, align 1
  %55 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %54, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = icmp slt i32 %56, 0
  br i1 %57, label %58, label %73

58:                                               ; preds = %51
  %59 = bitcast i8** %5 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %62 = bitcast i8** %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = sub i64 %60, %63
  %65 = trunc i64 %64 to i32
  %66 = ashr i32 %2, 24
  %67 = add nsw i32 %66, -5
  %68 = sub i32 %67, %56
  %69 = sub i32 %68, %65
  %70 = inttoptr i64 %60 to i32*
  store i32 %69, i32* %70, align 1
  %71 = load i8*, i8** %5, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 4
  store i8* %72, i8** %5, align 8
  br label %138

73:                                               ; preds = %51
  %74 = icmp eq i32 %56, 0
  br i1 %74, label %88, label %75

75:                                               ; preds = %73
  %76 = add nsw i32 %56, -1
  %77 = bitcast i8** %5 to i32**
  %78 = load i32*, i32** %77, align 8
  store i32 %76, i32* %78, align 1
  %79 = load i8*, i8** %5, align 8
  %80 = getelementptr inbounds i8, i8* %79, i64 4
  store i8* %80, i8** %5, align 8
  %81 = ptrtoint i8* %80 to i64
  %82 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %83 = bitcast i8** %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = sub i64 %81, %84
  %86 = trunc i64 %85 to i32
  %87 = add i32 %86, -3
  store i32 %87, i32* %55, align 4
  br label %138

88:                                               ; preds = %73
  %89 = bitcast i8** %5 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %92 = bitcast i8** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = sub i64 %90, %93
  %95 = trunc i64 %94 to i32
  %96 = inttoptr i64 %90 to i32*
  store i32 %95, i32* %96, align 1
  %97 = load i8*, i8** %5, align 8
  %98 = getelementptr inbounds i8, i8* %97, i64 4
  store i8* %98, i8** %5, align 8
  %99 = add nsw i32 %95, 1
  store i32 %99, i32* %55, align 4
  br label %138

100:                                              ; preds = %100, %49
  %101 = phi i64 [ 2, %49 ], [ %122, %100 ]
  %102 = phi i64 [ %50, %49 ], [ %123, %100 ]
  %103 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %101
  %104 = load i8, i8* %103, align 1
  %105 = load i8*, i8** %5, align 8
  %106 = getelementptr inbounds i8, i8* %105, i64 1
  store i8* %106, i8** %5, align 8
  store i8 %104, i8* %105, align 1
  %107 = or i64 %101, 1
  %108 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = load i8*, i8** %5, align 8
  %111 = getelementptr inbounds i8, i8* %110, i64 1
  store i8* %111, i8** %5, align 8
  store i8 %109, i8* %110, align 1
  %112 = add nuw nsw i64 %101, 2
  %113 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = load i8*, i8** %5, align 8
  %116 = getelementptr inbounds i8, i8* %115, i64 1
  store i8* %116, i8** %5, align 8
  store i8 %114, i8* %115, align 1
  %117 = add nuw nsw i64 %101, 3
  %118 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = load i8*, i8** %5, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 1
  store i8* %121, i8** %5, align 8
  store i8 %119, i8* %120, align 1
  %122 = add nuw nsw i64 %101, 4
  %123 = add i64 %102, -4
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %100

125:                                              ; preds = %100, %44
  %126 = phi i64 [ 2, %44 ], [ %122, %100 ]
  %127 = icmp eq i64 %47, 0
  br i1 %127, label %138, label %128

128:                                              ; preds = %125, %128
  %129 = phi i64 [ %135, %128 ], [ %126, %125 ]
  %130 = phi i64 [ %136, %128 ], [ %47, %125 ]
  %131 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %129
  %132 = load i8, i8* %131, align 1
  %133 = load i8*, i8** %5, align 8
  %134 = getelementptr inbounds i8, i8* %133, i64 1
  store i8* %134, i8** %5, align 8
  store i8 %132, i8* %133, align 1
  %135 = add nuw nsw i64 %129, 1
  %136 = add i64 %130, -1
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %128, !llvm.loop !43

138:                                              ; preds = %125, %128, %39, %36, %58, %75, %88
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %22)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5pushqENS0_9ImmediateE(%"class.v8::internal::Assembler"*, i64) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %10, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %10

10:                                               ; preds = %2, %9
  %11 = shl i64 %1, 32
  %12 = ashr exact i64 %11, 32
  %13 = add nsw i64 %12, 128
  %14 = icmp ult i64 %13, 256
  br i1 %14, label %15, label %21

15:                                               ; preds = %10
  %16 = load i8*, i8** %3, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %17, i8** %3, align 8
  store i8 106, i8* %16, align 1
  %18 = trunc i64 %1 to i8
  %19 = load i8*, i8** %3, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 1
  store i8* %20, i8** %3, align 8
  store i8 %18, i8* %19, align 1
  br label %29

21:                                               ; preds = %10
  %22 = trunc i64 %1 to i32
  %23 = load i8*, i8** %3, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %3, align 8
  store i8 104, i8* %23, align 1
  %25 = bitcast i8** %3 to i32**
  %26 = load i32*, i32** %25, align 8
  store i32 %22, i32* %26, align 1
  %27 = load i8*, i8** %3, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 4
  store i8* %28, i8** %3, align 8
  br label %29

29:                                               ; preds = %21, %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler11pushq_imm32Ei(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %11, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %10 = load i8*, i8** %3, align 8
  br label %11

11:                                               ; preds = %2, %9
  %12 = phi i8* [ %4, %2 ], [ %10, %9 ]
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  store i8* %13, i8** %3, align 8
  store i8 104, i8* %12, align 1
  %14 = bitcast i8** %3 to i32**
  %15 = load i32*, i32** %14, align 8
  store i32 %1, i32* %15, align 1
  %16 = load i8*, i8** %3, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 4
  store i8* %17, i8** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6pushfqEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -100, i8* %11, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler3retEi(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %11, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %10 = load i8*, i8** %3, align 8
  br label %11

11:                                               ; preds = %2, %9
  %12 = phi i8* [ %4, %2 ], [ %10, %9 ]
  %13 = icmp eq i32 %1, 0
  %14 = getelementptr inbounds i8, i8* %12, i64 1
  store i8* %14, i8** %3, align 8
  br i1 %13, label %15, label %16

15:                                               ; preds = %11
  store i8 -61, i8* %12, align 1
  br label %24

16:                                               ; preds = %11
  store i8 -62, i8* %12, align 1
  %17 = trunc i32 %1 to i8
  %18 = load i8*, i8** %3, align 8
  %19 = getelementptr inbounds i8, i8* %18, i64 1
  store i8* %19, i8** %3, align 8
  store i8 %17, i8* %18, align 1
  %20 = lshr i32 %1, 8
  %21 = trunc i32 %20 to i8
  %22 = load i8*, i8** %3, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %3, align 8
  store i8 %21, i8* %22, align 1
  br label %24

24:                                               ; preds = %16, %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler3ud2Ev(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 15, i8* %11, align 1
  %13 = load i8*, i8** %2, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %2, align 8
  store i8 11, i8* %13, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5setccENS0_9ConditionENS0_8RegisterE(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = icmp sgt i32 %1, 15
  br i1 %4, label %5, label %31

5:                                                ; preds = %3
  %6 = icmp eq i32 %1, 16
  %7 = zext i1 %6 to i8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 -32
  %13 = icmp ult i8* %9, %12
  br i1 %13, label %15, label %14, !prof !11

14:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %15

15:                                               ; preds = %14, %5
  %16 = icmp slt i32 %2, 4
  br i1 %16, label %23, label %17

17:                                               ; preds = %15
  %18 = lshr i32 %2, 3
  %19 = trunc i32 %18 to i8
  %20 = or i8 %19, 64
  %21 = load i8*, i8** %8, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %8, align 8
  store i8 %20, i8* %21, align 1
  br label %23

23:                                               ; preds = %15, %17
  %24 = trunc i32 %2 to i8
  %25 = and i8 %24, 7
  %26 = or i8 %25, -80
  %27 = load i8*, i8** %8, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %8, align 8
  store i8 %26, i8* %27, align 1
  %29 = load i8*, i8** %8, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %8, align 8
  store i8 %7, i8* %29, align 1
  br label %59

31:                                               ; preds = %3
  %32 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 -32
  %37 = icmp ult i8* %33, %36
  br i1 %37, label %39, label %38, !prof !11

38:                                               ; preds = %31
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %39

39:                                               ; preds = %31, %38
  %40 = icmp slt i32 %2, 4
  br i1 %40, label %47, label %41

41:                                               ; preds = %39
  %42 = lshr i32 %2, 3
  %43 = trunc i32 %42 to i8
  %44 = or i8 %43, 64
  %45 = load i8*, i8** %32, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 1
  store i8* %46, i8** %32, align 8
  store i8 %44, i8* %45, align 1
  br label %47

47:                                               ; preds = %41, %39
  %48 = load i8*, i8** %32, align 8
  %49 = getelementptr inbounds i8, i8* %48, i64 1
  store i8* %49, i8** %32, align 8
  store i8 15, i8* %48, align 1
  %50 = trunc i32 %1 to i8
  %51 = or i8 %50, -112
  %52 = load i8*, i8** %32, align 8
  %53 = getelementptr inbounds i8, i8* %52, i64 1
  store i8* %53, i8** %32, align 8
  store i8 %51, i8* %52, align 1
  %54 = trunc i32 %2 to i8
  %55 = and i8 %54, 7
  %56 = or i8 %55, -64
  %57 = load i8*, i8** %32, align 8
  %58 = getelementptr inbounds i8, i8* %57, i64 1
  store i8* %58, i8** %32, align 8
  store i8 %56, i8* %57, align 1
  br label %59

59:                                               ; preds = %47, %23
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4shldENS0_8RegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = ashr i32 %2, 3
  %15 = shl nsw i32 %14, 2
  %16 = lshr i32 %1, 3
  %17 = or i32 %15, %16
  %18 = trunc i32 %17 to i8
  %19 = or i8 %18, 72
  %20 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %20, i8** %4, align 8
  store i8 %19, i8* %13, align 1
  %21 = load i8*, i8** %4, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %4, align 8
  store i8 15, i8* %21, align 1
  %23 = load i8*, i8** %4, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %4, align 8
  store i8 -91, i8* %23, align 1
  %25 = shl i32 %2, 3
  %26 = and i32 %1, 7
  %27 = or i32 %25, %26
  %28 = trunc i32 %27 to i8
  %29 = or i8 %28, -64
  %30 = load i8*, i8** %4, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %4, align 8
  store i8 %29, i8* %30, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4shrdENS0_8RegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = ashr i32 %2, 3
  %15 = shl nsw i32 %14, 2
  %16 = lshr i32 %1, 3
  %17 = or i32 %15, %16
  %18 = trunc i32 %17 to i8
  %19 = or i8 %18, 72
  %20 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %20, i8** %4, align 8
  store i8 %19, i8* %13, align 1
  %21 = load i8*, i8** %4, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %4, align 8
  store i8 15, i8* %21, align 1
  %23 = load i8*, i8** %4, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %4, align 8
  store i8 -83, i8* %23, align 1
  %25 = shl i32 %2, 3
  %26 = and i32 %1, 7
  %27 = or i32 %25, %26
  %28 = trunc i32 %27 to i8
  %29 = or i8 %28, -64
  %30 = load i8*, i8** %4, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %4, align 8
  store i8 %29, i8* %30, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5xchgbENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %4, %11
  %13 = icmp slt i32 %1, 4
  %14 = trunc i64 %2 to i8
  %15 = lshr i32 %1, 1
  %16 = trunc i32 %15 to i8
  br i1 %13, label %23, label %17

17:                                               ; preds = %12
  %18 = and i8 %16, -68
  %19 = or i8 %18, %14
  %20 = or i8 %19, 64
  %21 = load i8*, i8** %5, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %5, align 8
  store i8 %20, i8* %21, align 1
  br label %31

23:                                               ; preds = %12
  %24 = and i8 %16, -4
  %25 = or i8 %24, %14
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %31, label %27

27:                                               ; preds = %23
  %28 = or i8 %25, 64
  %29 = load i8*, i8** %5, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %5, align 8
  store i8 %28, i8* %29, align 1
  br label %31

31:                                               ; preds = %27, %23, %17
  %32 = load i8*, i8** %5, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %5, align 8
  store i8 -122, i8* %32, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5xchgwENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 102, i8* %14, align 1
  %16 = trunc i64 %2 to i8
  %17 = lshr i32 %1, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, -4
  %20 = or i8 %19, %16
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %13
  %23 = or i8 %20, 64
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %13, %22
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 -121, i8* %27, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9emit_xchgENS0_8RegisterES2_i(%"class.v8::internal::Assembler"*, i32, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %4, %11
  %13 = icmp eq i32 %2, 0
  %14 = icmp eq i32 %1, 0
  %15 = or i1 %14, %13
  br i1 %15, label %16, label %36

16:                                               ; preds = %12
  %17 = select i1 %13, i32 %1, i32 %2
  %18 = icmp eq i32 %3, 8
  br i1 %18, label %19, label %25

19:                                               ; preds = %16
  %20 = lshr i32 %17, 3
  %21 = trunc i32 %20 to i8
  %22 = or i8 %21, 72
  %23 = load i8*, i8** %5, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %5, align 8
  store i8 %22, i8* %23, align 1
  br label %30

25:                                               ; preds = %16
  %26 = icmp ult i32 %17, 8
  br i1 %26, label %30, label %27

27:                                               ; preds = %25
  %28 = load i8*, i8** %5, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %5, align 8
  store i8 65, i8* %28, align 1
  br label %30

30:                                               ; preds = %19, %25, %27
  %31 = trunc i32 %17 to i8
  %32 = and i8 %31, 7
  %33 = or i8 %32, -112
  %34 = load i8*, i8** %5, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %5, align 8
  store i8 %33, i8* %34, align 1
  br label %99

36:                                               ; preds = %12
  %37 = and i32 %1, 7
  %38 = icmp eq i32 %37, 4
  %39 = icmp eq i32 %3, 8
  br i1 %38, label %40, label %70

40:                                               ; preds = %36
  %41 = ashr i32 %1, 3
  %42 = shl nsw i32 %41, 2
  br i1 %39, label %43, label %50

43:                                               ; preds = %40
  %44 = lshr i32 %2, 3
  %45 = or i32 %42, %44
  %46 = trunc i32 %45 to i8
  %47 = or i8 %46, 72
  %48 = load i8*, i8** %5, align 8
  %49 = getelementptr inbounds i8, i8* %48, i64 1
  store i8* %49, i8** %5, align 8
  store i8 %47, i8* %48, align 1
  br label %60

50:                                               ; preds = %40
  %51 = ashr i32 %2, 3
  %52 = or i32 %42, %51
  %53 = and i32 %52, 255
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %60, label %55

55:                                               ; preds = %50
  %56 = trunc i32 %52 to i8
  %57 = or i8 %56, 64
  %58 = load i8*, i8** %5, align 8
  %59 = getelementptr inbounds i8, i8* %58, i64 1
  store i8* %59, i8** %5, align 8
  store i8 %57, i8* %58, align 1
  br label %60

60:                                               ; preds = %43, %50, %55
  %61 = load i8*, i8** %5, align 8
  %62 = getelementptr inbounds i8, i8* %61, i64 1
  store i8* %62, i8** %5, align 8
  store i8 -121, i8* %61, align 1
  %63 = shl i32 %1, 3
  %64 = and i32 %2, 7
  %65 = or i32 %64, %63
  %66 = trunc i32 %65 to i8
  %67 = or i8 %66, -64
  %68 = load i8*, i8** %5, align 8
  %69 = getelementptr inbounds i8, i8* %68, i64 1
  store i8* %69, i8** %5, align 8
  store i8 %67, i8* %68, align 1
  br label %99

70:                                               ; preds = %36
  %71 = ashr i32 %2, 3
  %72 = shl nsw i32 %71, 2
  br i1 %39, label %73, label %80

73:                                               ; preds = %70
  %74 = lshr i32 %1, 3
  %75 = or i32 %72, %74
  %76 = trunc i32 %75 to i8
  %77 = or i8 %76, 72
  %78 = load i8*, i8** %5, align 8
  %79 = getelementptr inbounds i8, i8* %78, i64 1
  store i8* %79, i8** %5, align 8
  store i8 %77, i8* %78, align 1
  br label %90

80:                                               ; preds = %70
  %81 = ashr i32 %1, 3
  %82 = or i32 %72, %81
  %83 = and i32 %82, 255
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %80
  %86 = trunc i32 %82 to i8
  %87 = or i8 %86, 64
  %88 = load i8*, i8** %5, align 8
  %89 = getelementptr inbounds i8, i8* %88, i64 1
  store i8* %89, i8** %5, align 8
  store i8 %87, i8* %88, align 1
  br label %90

90:                                               ; preds = %73, %80, %85
  %91 = load i8*, i8** %5, align 8
  %92 = getelementptr inbounds i8, i8* %91, i64 1
  store i8* %92, i8** %5, align 8
  store i8 -121, i8* %91, align 1
  %93 = shl i32 %2, 3
  %94 = or i32 %93, %37
  %95 = trunc i32 %94 to i8
  %96 = or i8 %95, -64
  %97 = load i8*, i8** %5, align 8
  %98 = getelementptr inbounds i8, i8* %97, i64 1
  store i8* %98, i8** %5, align 8
  store i8 %96, i8* %97, align 1
  br label %99

99:                                               ; preds = %60, %90, %30
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9emit_xchgENS0_8RegisterENS0_7OperandEi(%"class.v8::internal::Assembler"*, i32, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %13, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %13

13:                                               ; preds = %5, %12
  %14 = icmp eq i32 %4, 8
  %15 = trunc i64 %2 to i8
  %16 = lshr i32 %1, 1
  %17 = trunc i32 %16 to i8
  br i1 %14, label %18, label %24

18:                                               ; preds = %13
  %19 = and i8 %17, -76
  %20 = or i8 %19, %15
  %21 = or i8 %20, 72
  %22 = load i8*, i8** %6, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %6, align 8
  store i8 %21, i8* %22, align 1
  br label %32

24:                                               ; preds = %13
  %25 = and i8 %17, -4
  %26 = or i8 %25, %15
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %24
  %29 = or i8 %26, 64
  %30 = load i8*, i8** %6, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %6, align 8
  store i8 %29, i8* %30, align 1
  br label %32

32:                                               ; preds = %18, %24, %28
  %33 = load i8*, i8** %6, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %6, align 8
  store i8 -121, i8* %33, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9store_raxEmNS0_9RelocInfo4ModeE(%"class.v8::internal::Assembler"*, i64, i8 signext) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::RelocInfo", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %3, %11
  %14 = phi i8* [ %6, %3 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 72, i8* %14, align 1
  %16 = load i8*, i8** %5, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %17, i8** %5, align 8
  store i8 -93, i8* %16, align 1
  %18 = icmp eq i8 %2, 0
  br i1 %18, label %37, label %19

19:                                               ; preds = %13
  %20 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 1
  %21 = load i8, i8* %20, align 1, !range !2
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %23, label %37

23:                                               ; preds = %19
  switch i8 %2, label %28 [
    i8 12, label %24
    i8 9, label %24
  ]

24:                                               ; preds = %23, %23
  %25 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 0
  %26 = load i8, i8* %25, align 8, !range !2
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %37, label %28

28:                                               ; preds = %24, %23
  %29 = bitcast %"class.v8::internal::RelocInfo"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %29) #14
  %30 = bitcast i8** %5 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 0
  store i64 %31, i64* %32, align 8
  %33 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 1
  store i8 %2, i8* %33, align 8
  %34 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 2
  %35 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1
  %36 = bitcast i64* %34 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 24, i1 false) #14
  call void @_ZN2v88internal15RelocInfoWriter5WriteEPKNS0_9RelocInfoE(%"class.v8::internal::RelocInfoWriter"* %35, %"class.v8::internal::RelocInfo"* nonnull %4) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %29) #14
  br label %37

37:                                               ; preds = %13, %19, %24, %28
  %38 = bitcast i8** %5 to i64**
  %39 = load i64*, i64** %38, align 8
  store i64 %1, i64* %39, align 1
  %40 = load i8*, i8** %5, align 8
  %41 = getelementptr inbounds i8, i8* %40, i64 8
  store i8* %41, i8** %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9store_raxENS0_17ExternalReferenceE(%"class.v8::internal::Assembler"*, i64) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.v8::internal::RelocInfo", align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %10, %2
  %13 = phi i8* [ %5, %2 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 72, i8* %13, align 1
  %15 = load i8*, i8** %4, align 8
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %16, i8** %4, align 8
  store i8 -93, i8* %15, align 1
  %17 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 1
  %18 = load i8, i8* %17, align 1, !range !2
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %20, label %33

20:                                               ; preds = %12
  %21 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 0
  %22 = load i8, i8* %21, align 8, !range !2
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %33, label %24

24:                                               ; preds = %20
  %25 = bitcast %"class.v8::internal::RelocInfo"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %25) #14
  %26 = bitcast i8** %4 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %3, i64 0, i32 0
  store i64 %27, i64* %28, align 8
  %29 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %3, i64 0, i32 1
  store i8 9, i8* %29, align 8
  %30 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %3, i64 0, i32 2
  %31 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1
  %32 = bitcast i64* %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 24, i1 false) #14
  call void @_ZN2v88internal15RelocInfoWriter5WriteEPKNS0_9RelocInfoE(%"class.v8::internal::RelocInfoWriter"* %31, %"class.v8::internal::RelocInfo"* nonnull %3) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %25) #14
  br label %33

33:                                               ; preds = %12, %20, %24
  %34 = bitcast i8** %4 to i64**
  %35 = load i64*, i64** %34, align 8
  store i64 %1, i64* %35, align 1
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 8
  store i8* %37, i8** %4, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9sub_sp_32Ej(%"class.v8::internal::Assembler"* nocapture, i32) local_unnamed_addr #9 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds i8, i8* %4, i64 1
  store i8* %5, i8** %3, align 8
  store i8 72, i8* %4, align 1
  %6 = load i8*, i8** %3, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 1
  store i8* %7, i8** %3, align 8
  store i8 -127, i8* %6, align 1
  %8 = load i8*, i8** %3, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 1
  store i8* %9, i8** %3, align 8
  store i8 -20, i8* %8, align 1
  %10 = bitcast i8** %3 to i32**
  %11 = load i32*, i32** %10, align 8
  store i32 %1, i32* %11, align 1
  %12 = load i8*, i8** %3, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 4
  store i8* %13, i8** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5testbENS0_8RegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %13, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  %12 = load i8*, i8** %6, align 8
  br label %13

13:                                               ; preds = %3, %10
  %14 = phi i8* [ %7, %3 ], [ %12, %10 ]
  %15 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %16 = getelementptr inbounds i8, i8* %14, i64 -32
  %17 = icmp ult i8* %15, %16
  br i1 %17, label %19, label %18, !prof !11

18:                                               ; preds = %13
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %19

19:                                               ; preds = %18, %13
  %20 = and i32 %2, 7
  %21 = icmp eq i32 %20, 4
  %22 = select i1 %21, i32 %1, i32 %2
  %23 = select i1 %21, i32 %2, i32 %1
  %24 = icmp slt i32 %22, 4
  %25 = icmp slt i32 %23, 4
  %26 = and i1 %24, %25
  br i1 %26, label %36, label %27

27:                                               ; preds = %19
  %28 = ashr i32 %23, 3
  %29 = shl nsw i32 %28, 2
  %30 = lshr i32 %22, 3
  %31 = or i32 %29, %30
  %32 = trunc i32 %31 to i8
  %33 = or i8 %32, 64
  %34 = load i8*, i8** %4, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %4, align 8
  store i8 %33, i8* %34, align 1
  br label %36

36:                                               ; preds = %19, %27
  %37 = load i8*, i8** %4, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  store i8* %38, i8** %4, align 8
  store i8 -124, i8* %37, align 1
  %39 = shl i32 %23, 3
  %40 = and i32 %22, 7
  %41 = or i32 %40, %39
  %42 = trunc i32 %41 to i8
  %43 = or i8 %42, -64
  %44 = load i8*, i8** %4, align 8
  %45 = getelementptr inbounds i8, i8* %44, i64 1
  store i8* %45, i8** %4, align 8
  store i8 %43, i8* %44, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9emit_testENS0_8RegisterES2_i(%"class.v8::internal::Assembler"*, i32, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %4, %11
  %13 = and i32 %2, 7
  %14 = icmp eq i32 %13, 4
  %15 = select i1 %14, i32 %1, i32 %2
  %16 = select i1 %14, i32 %2, i32 %1
  switch i32 %3, label %35 [
    i32 2, label %17
    i32 1, label %22
  ]

17:                                               ; preds = %12
  %18 = load i8*, i8** %5, align 8
  %19 = getelementptr inbounds i8, i8* %18, i64 1
  store i8* %19, i8** %5, align 8
  store i8 102, i8* %18, align 1
  %20 = ashr i32 %16, 3
  %21 = shl nsw i32 %20, 2
  br label %46

22:                                               ; preds = %12
  %23 = icmp slt i32 %15, 4
  %24 = icmp slt i32 %16, 4
  %25 = and i1 %23, %24
  br i1 %25, label %57, label %26

26:                                               ; preds = %22
  %27 = ashr i32 %16, 3
  %28 = shl nsw i32 %27, 2
  %29 = lshr i32 %15, 3
  %30 = or i32 %28, %29
  %31 = trunc i32 %30 to i8
  %32 = or i8 %31, 64
  %33 = load i8*, i8** %5, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %5, align 8
  store i8 %32, i8* %33, align 1
  br label %57

35:                                               ; preds = %12
  %36 = icmp eq i32 %3, 8
  %37 = ashr i32 %16, 3
  %38 = shl nsw i32 %37, 2
  br i1 %36, label %39, label %46

39:                                               ; preds = %35
  %40 = lshr i32 %15, 3
  %41 = or i32 %38, %40
  %42 = trunc i32 %41 to i8
  %43 = or i8 %42, 72
  %44 = load i8*, i8** %5, align 8
  %45 = getelementptr inbounds i8, i8* %44, i64 1
  store i8* %45, i8** %5, align 8
  store i8 %43, i8* %44, align 1
  br label %57

46:                                               ; preds = %17, %35
  %47 = phi i32 [ %21, %17 ], [ %38, %35 ]
  %48 = ashr i32 %15, 3
  %49 = or i32 %47, %48
  %50 = and i32 %49, 255
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %57, label %52

52:                                               ; preds = %46
  %53 = trunc i32 %49 to i8
  %54 = or i8 %53, 64
  %55 = load i8*, i8** %5, align 8
  %56 = getelementptr inbounds i8, i8* %55, i64 1
  store i8* %56, i8** %5, align 8
  store i8 %54, i8* %55, align 1
  br label %57

57:                                               ; preds = %22, %52, %46, %39, %26
  %58 = phi i8 [ -124, %26 ], [ -123, %39 ], [ -123, %46 ], [ -123, %52 ], [ -124, %22 ]
  %59 = load i8*, i8** %5, align 8
  %60 = getelementptr inbounds i8, i8* %59, i64 1
  store i8* %60, i8** %5, align 8
  store i8 %58, i8* %59, align 1
  %61 = shl i32 %16, 3
  %62 = and i32 %15, 7
  %63 = or i32 %62, %61
  %64 = trunc i32 %63 to i8
  %65 = or i8 %64, -64
  %66 = load i8*, i8** %5, align 8
  %67 = getelementptr inbounds i8, i8* %66, i64 1
  store i8* %67, i8** %5, align 8
  store i8 %65, i8* %66, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5testbENS0_8RegisterENS0_9ImmediateE(%"class.v8::internal::Assembler"*, i32, i64) local_unnamed_addr #1 align 2 {
  tail call void @_ZN2v88internal9Assembler9emit_testENS0_8RegisterENS0_9ImmediateEi(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9emit_testENS0_8RegisterENS0_9ImmediateEi(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = alloca %"class.v8::internal::RelocInfo", align 8
  %6 = trunc i64 %2 to i32
  %7 = icmp ult i32 %6, 256
  %8 = icmp ult i32 %6, 65536
  %9 = select i1 %8, i32 2, i32 %3
  %10 = select i1 %7, i32 1, i32 %9
  %11 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 -32
  %16 = icmp ult i8* %12, %15
  br i1 %16, label %18, label %17, !prof !11

17:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %18

18:                                               ; preds = %4, %17
  %19 = icmp eq i32 %10, 2
  br i1 %19, label %20, label %23

20:                                               ; preds = %18
  %21 = load i8*, i8** %11, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %11, align 8
  store i8 102, i8* %21, align 1
  br label %38

23:                                               ; preds = %18
  switch i32 %10, label %38 [
    i32 1, label %24
    i32 8, label %32
  ]

24:                                               ; preds = %23
  %25 = icmp slt i32 %1, 4
  br i1 %25, label %43, label %26

26:                                               ; preds = %24
  %27 = lshr i32 %1, 3
  %28 = trunc i32 %27 to i8
  %29 = or i8 %28, 64
  %30 = load i8*, i8** %11, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %11, align 8
  store i8 %29, i8* %30, align 1
  br label %47

32:                                               ; preds = %23
  %33 = lshr i32 %1, 3
  %34 = trunc i32 %33 to i8
  %35 = or i8 %34, 72
  %36 = load i8*, i8** %11, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %11, align 8
  store i8 %35, i8* %36, align 1
  br label %43

38:                                               ; preds = %23, %20
  %39 = icmp ult i32 %1, 8
  br i1 %39, label %43, label %40

40:                                               ; preds = %38
  %41 = load i8*, i8** %11, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %42, i8** %11, align 8
  store i8 65, i8* %41, align 1
  br label %48

43:                                               ; preds = %38, %32, %24
  %44 = phi i1 [ true, %24 ], [ false, %32 ], [ false, %38 ]
  %45 = icmp eq i32 %1, 0
  br i1 %45, label %58, label %46

46:                                               ; preds = %43
  br i1 %44, label %47, label %48

47:                                               ; preds = %26, %46
  br label %48

48:                                               ; preds = %40, %46, %47
  %49 = phi i1 [ true, %47 ], [ false, %46 ], [ false, %40 ]
  %50 = phi i8 [ -10, %47 ], [ -9, %46 ], [ -9, %40 ]
  %51 = load i8*, i8** %11, align 8
  %52 = getelementptr inbounds i8, i8* %51, i64 1
  store i8* %52, i8** %11, align 8
  store i8 %50, i8* %51, align 1
  %53 = trunc i32 %1 to i8
  %54 = and i8 %53, 7
  %55 = or i8 %54, -64
  %56 = load i8*, i8** %11, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 1
  store i8* %57, i8** %11, align 8
  store i8 %55, i8* %56, align 1
  br i1 %49, label %62, label %66

58:                                               ; preds = %43
  %59 = select i1 %44, i8 -88, i8 -87
  %60 = load i8*, i8** %11, align 8
  %61 = getelementptr inbounds i8, i8* %60, i64 1
  store i8* %61, i8** %11, align 8
  store i8 %59, i8* %60, align 1
  br i1 %44, label %62, label %66

62:                                               ; preds = %48, %58
  %63 = trunc i64 %2 to i8
  %64 = load i8*, i8** %11, align 8
  %65 = getelementptr inbounds i8, i8* %64, i64 1
  store i8* %65, i8** %11, align 8
  store i8 %63, i8* %64, align 1
  br label %100

66:                                               ; preds = %48, %58
  br i1 %19, label %67, label %73

67:                                               ; preds = %66
  %68 = trunc i64 %2 to i16
  %69 = bitcast i8** %11 to i16**
  %70 = load i16*, i16** %69, align 8
  store i16 %68, i16* %70, align 1
  %71 = load i8*, i8** %11, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 2
  store i8* %72, i8** %11, align 8
  br label %100

73:                                               ; preds = %66
  %74 = lshr i64 %2, 32
  %75 = trunc i64 %74 to i8
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %95, label %77

77:                                               ; preds = %73
  %78 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 1
  %79 = load i8, i8* %78, align 1, !range !2
  %80 = icmp eq i8 %79, 0
  br i1 %80, label %81, label %95

81:                                               ; preds = %77
  switch i8 %75, label %86 [
    i8 12, label %82
    i8 9, label %82
  ]

82:                                               ; preds = %81, %81
  %83 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 0
  %84 = load i8, i8* %83, align 8, !range !2
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %95, label %86

86:                                               ; preds = %82, %81
  %87 = bitcast %"class.v8::internal::RelocInfo"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %87) #14
  %88 = bitcast i8** %11 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %5, i64 0, i32 0
  store i64 %89, i64* %90, align 8
  %91 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %5, i64 0, i32 1
  store i8 %75, i8* %91, align 8
  %92 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %5, i64 0, i32 2
  %93 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1
  %94 = bitcast i64* %92 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %94, i8 0, i64 24, i1 false) #14
  call void @_ZN2v88internal15RelocInfoWriter5WriteEPKNS0_9RelocInfoE(%"class.v8::internal::RelocInfoWriter"* %93, %"class.v8::internal::RelocInfo"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %87) #14
  br label %95

95:                                               ; preds = %73, %77, %82, %86
  %96 = bitcast i8** %11 to i32**
  %97 = load i32*, i32** %96, align 8
  store i32 %6, i32* %97, align 1
  %98 = load i8*, i8** %11, align 8
  %99 = getelementptr inbounds i8, i8* %98, i64 4
  store i8* %99, i8** %11, align 8
  br label %100

100:                                              ; preds = %67, %95, %62
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5testbENS0_7OperandENS0_9ImmediateE(%"class.v8::internal::Assembler"*, i64, i32, i64) local_unnamed_addr #1 align 2 {
  tail call void @_ZN2v88internal9Assembler9emit_testENS0_7OperandENS0_9ImmediateEi(%"class.v8::internal::Assembler"* %0, i64 %1, i32 %2, i64 %3, i32 1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9emit_testENS0_7OperandENS0_9ImmediateEi(%"class.v8::internal::Assembler"*, i64, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %6 = alloca %"class.v8::internal::Operand", align 8
  %7 = alloca %"class.v8::internal::RelocInfo", align 8
  %8 = trunc i64 %3 to i32
  %9 = icmp ult i32 %8, 256
  %10 = icmp ult i32 %8, 65536
  %11 = select i1 %10, i32 2, i32 %4
  %12 = select i1 %9, i32 1, i32 %11
  %13 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 -32
  %18 = icmp ult i8* %14, %17
  br i1 %18, label %20, label %19, !prof !11

19:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %20

20:                                               ; preds = %5, %19
  %21 = icmp eq i32 %12, 2
  br i1 %21, label %22, label %26

22:                                               ; preds = %20
  %23 = load i8*, i8** %13, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %13, align 8
  store i8 102, i8* %23, align 1
  %25 = trunc i64 %1 to i8
  br label %34

26:                                               ; preds = %20
  %27 = icmp eq i32 %12, 1
  %28 = icmp eq i32 %12, 8
  %29 = trunc i64 %1 to i8
  br i1 %28, label %30, label %34

30:                                               ; preds = %26
  %31 = or i8 %29, 72
  %32 = load i8*, i8** %13, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %13, align 8
  store i8 %31, i8* %32, align 1
  br label %42

34:                                               ; preds = %22, %26
  %35 = phi i8 [ %25, %22 ], [ %29, %26 ]
  %36 = phi i1 [ false, %22 ], [ %27, %26 ]
  %37 = icmp eq i8 %35, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %34
  %39 = or i8 %35, 64
  %40 = load i8*, i8** %13, align 8
  %41 = getelementptr inbounds i8, i8* %40, i64 1
  store i8* %41, i8** %13, align 8
  store i8 %39, i8* %40, align 1
  br label %42

42:                                               ; preds = %30, %34, %38
  %43 = phi i1 [ %27, %30 ], [ %36, %34 ], [ %36, %38 ]
  %44 = select i1 %43, i8 -10, i8 -9
  %45 = load i8*, i8** %13, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 1
  store i8* %46, i8** %13, align 8
  store i8 %44, i8* %45, align 1
  %47 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %47) #14
  %48 = bitcast %"class.v8::internal::Operand"* %6 to i64*
  store i64 %1, i64* %48, align 8
  %49 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 7
  %50 = bitcast i8* %49 to i32*
  store i32 %2, i32* %50, align 1
  %51 = lshr i32 %2, 16
  %52 = and i32 %51, 255
  %53 = lshr i64 %1, 8
  %54 = trunc i64 %53 to i8
  %55 = load i8*, i8** %13, align 8
  %56 = getelementptr inbounds i8, i8* %55, i64 1
  store i8* %56, i8** %13, align 8
  store i8 %54, i8* %55, align 1
  %57 = icmp eq i8 %54, 5
  %58 = lshr i64 %1, 16
  %59 = trunc i64 %58 to i8
  br i1 %57, label %75, label %60

60:                                               ; preds = %42
  %61 = trunc i32 %51 to i8
  %62 = icmp ugt i8 %61, 1
  br i1 %62, label %63, label %162

63:                                               ; preds = %60
  %64 = zext i32 %52 to i64
  %65 = load i8*, i8** %13, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 1
  store i8* %66, i8** %13, align 8
  store i8 %59, i8* %65, align 1
  %67 = icmp eq i32 %52, 2
  br i1 %67, label %162, label %68

68:                                               ; preds = %63
  %69 = add nsw i64 %64, -2
  %70 = add nsw i64 %64, -3
  %71 = and i64 %69, 3
  %72 = icmp ult i64 %70, 3
  br i1 %72, label %149, label %73

73:                                               ; preds = %68
  %74 = sub nsw i64 %69, %71
  br label %124

75:                                               ; preds = %42
  %76 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 1
  %77 = bitcast i8* %76 to %"class.v8::internal::Label"**
  %78 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %77, align 1
  %79 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %78, i64 0, i32 0
  %80 = load i32, i32* %79, align 4
  %81 = icmp slt i32 %80, 0
  br i1 %81, label %82, label %97

82:                                               ; preds = %75
  %83 = bitcast i8** %13 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %86 = bitcast i8** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = sub i64 %84, %87
  %89 = trunc i64 %88 to i32
  %90 = ashr i32 %2, 24
  %91 = add nsw i32 %90, -5
  %92 = sub i32 %91, %80
  %93 = sub i32 %92, %89
  %94 = inttoptr i64 %84 to i32*
  store i32 %93, i32* %94, align 1
  %95 = load i8*, i8** %13, align 8
  %96 = getelementptr inbounds i8, i8* %95, i64 4
  store i8* %96, i8** %13, align 8
  br label %162

97:                                               ; preds = %75
  %98 = icmp eq i32 %80, 0
  br i1 %98, label %112, label %99

99:                                               ; preds = %97
  %100 = add nsw i32 %80, -1
  %101 = bitcast i8** %13 to i32**
  %102 = load i32*, i32** %101, align 8
  store i32 %100, i32* %102, align 1
  %103 = load i8*, i8** %13, align 8
  %104 = getelementptr inbounds i8, i8* %103, i64 4
  store i8* %104, i8** %13, align 8
  %105 = ptrtoint i8* %104 to i64
  %106 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %107 = bitcast i8** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = sub i64 %105, %108
  %110 = trunc i64 %109 to i32
  %111 = add i32 %110, -3
  store i32 %111, i32* %79, align 4
  br label %162

112:                                              ; preds = %97
  %113 = bitcast i8** %13 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %116 = bitcast i8** %115 to i64*
  %117 = load i64, i64* %116, align 8
  %118 = sub i64 %114, %117
  %119 = trunc i64 %118 to i32
  %120 = inttoptr i64 %114 to i32*
  store i32 %119, i32* %120, align 1
  %121 = load i8*, i8** %13, align 8
  %122 = getelementptr inbounds i8, i8* %121, i64 4
  store i8* %122, i8** %13, align 8
  %123 = add nsw i32 %119, 1
  store i32 %123, i32* %79, align 4
  br label %162

124:                                              ; preds = %124, %73
  %125 = phi i64 [ 2, %73 ], [ %146, %124 ]
  %126 = phi i64 [ %74, %73 ], [ %147, %124 ]
  %127 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 %125
  %128 = load i8, i8* %127, align 1
  %129 = load i8*, i8** %13, align 8
  %130 = getelementptr inbounds i8, i8* %129, i64 1
  store i8* %130, i8** %13, align 8
  store i8 %128, i8* %129, align 1
  %131 = or i64 %125, 1
  %132 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 %131
  %133 = load i8, i8* %132, align 1
  %134 = load i8*, i8** %13, align 8
  %135 = getelementptr inbounds i8, i8* %134, i64 1
  store i8* %135, i8** %13, align 8
  store i8 %133, i8* %134, align 1
  %136 = add nuw nsw i64 %125, 2
  %137 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 %136
  %138 = load i8, i8* %137, align 1
  %139 = load i8*, i8** %13, align 8
  %140 = getelementptr inbounds i8, i8* %139, i64 1
  store i8* %140, i8** %13, align 8
  store i8 %138, i8* %139, align 1
  %141 = add nuw nsw i64 %125, 3
  %142 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 %141
  %143 = load i8, i8* %142, align 1
  %144 = load i8*, i8** %13, align 8
  %145 = getelementptr inbounds i8, i8* %144, i64 1
  store i8* %145, i8** %13, align 8
  store i8 %143, i8* %144, align 1
  %146 = add nuw nsw i64 %125, 4
  %147 = add i64 %126, -4
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %149, label %124

149:                                              ; preds = %124, %68
  %150 = phi i64 [ 2, %68 ], [ %146, %124 ]
  %151 = icmp eq i64 %71, 0
  br i1 %151, label %162, label %152

152:                                              ; preds = %149, %152
  %153 = phi i64 [ %159, %152 ], [ %150, %149 ]
  %154 = phi i64 [ %160, %152 ], [ %71, %149 ]
  %155 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %6, i64 0, i32 0, i32 1, i64 %153
  %156 = load i8, i8* %155, align 1
  %157 = load i8*, i8** %13, align 8
  %158 = getelementptr inbounds i8, i8* %157, i64 1
  store i8* %158, i8** %13, align 8
  store i8 %156, i8* %157, align 1
  %159 = add nuw nsw i64 %153, 1
  %160 = add i64 %154, -1
  %161 = icmp eq i64 %160, 0
  br i1 %161, label %162, label %152, !llvm.loop !44

162:                                              ; preds = %149, %152, %60, %63, %82, %99, %112
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %47) #14
  br i1 %43, label %163, label %167

163:                                              ; preds = %162
  %164 = trunc i64 %3 to i8
  %165 = load i8*, i8** %13, align 8
  %166 = getelementptr inbounds i8, i8* %165, i64 1
  store i8* %166, i8** %13, align 8
  store i8 %164, i8* %165, align 1
  br label %201

167:                                              ; preds = %162
  br i1 %21, label %168, label %174

168:                                              ; preds = %167
  %169 = trunc i64 %3 to i16
  %170 = bitcast i8** %13 to i16**
  %171 = load i16*, i16** %170, align 8
  store i16 %169, i16* %171, align 1
  %172 = load i8*, i8** %13, align 8
  %173 = getelementptr inbounds i8, i8* %172, i64 2
  store i8* %173, i8** %13, align 8
  br label %201

174:                                              ; preds = %167
  %175 = lshr i64 %3, 32
  %176 = trunc i64 %175 to i8
  %177 = icmp eq i8 %176, 0
  br i1 %177, label %196, label %178

178:                                              ; preds = %174
  %179 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 1
  %180 = load i8, i8* %179, align 1, !range !2
  %181 = icmp eq i8 %180, 0
  br i1 %181, label %182, label %196

182:                                              ; preds = %178
  switch i8 %176, label %187 [
    i8 12, label %183
    i8 9, label %183
  ]

183:                                              ; preds = %182, %182
  %184 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 0
  %185 = load i8, i8* %184, align 8, !range !2
  %186 = icmp eq i8 %185, 0
  br i1 %186, label %196, label %187

187:                                              ; preds = %183, %182
  %188 = bitcast %"class.v8::internal::RelocInfo"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %188) #14
  %189 = bitcast i8** %13 to i64*
  %190 = load i64, i64* %189, align 8
  %191 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %7, i64 0, i32 0
  store i64 %190, i64* %191, align 8
  %192 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %7, i64 0, i32 1
  store i8 %176, i8* %192, align 8
  %193 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %7, i64 0, i32 2
  %194 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1
  %195 = bitcast i64* %193 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %195, i8 0, i64 24, i1 false) #14
  call void @_ZN2v88internal15RelocInfoWriter5WriteEPKNS0_9RelocInfoE(%"class.v8::internal::RelocInfoWriter"* %194, %"class.v8::internal::RelocInfo"* nonnull %7) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %188) #14
  br label %196

196:                                              ; preds = %174, %178, %183, %187
  %197 = bitcast i8** %13 to i32**
  %198 = load i32*, i32** %197, align 8
  store i32 %8, i32* %198, align 1
  %199 = load i8*, i8** %13, align 8
  %200 = getelementptr inbounds i8, i8* %199, i64 4
  store i8* %200, i8** %13, align 8
  br label %201

201:                                              ; preds = %168, %196, %163
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5testbENS0_7OperandENS0_8RegisterE(%"class.v8::internal::Assembler"*, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %11, %4
  %13 = icmp slt i32 %3, 4
  %14 = trunc i64 %1 to i8
  %15 = lshr i32 %3, 1
  %16 = trunc i32 %15 to i8
  br i1 %13, label %23, label %17

17:                                               ; preds = %12
  %18 = and i8 %16, -68
  %19 = or i8 %18, %14
  %20 = or i8 %19, 64
  %21 = load i8*, i8** %5, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %5, align 8
  store i8 %20, i8* %21, align 1
  br label %31

23:                                               ; preds = %12
  %24 = and i8 %16, -4
  %25 = or i8 %24, %14
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %31, label %27

27:                                               ; preds = %23
  %28 = or i8 %25, 64
  %29 = load i8*, i8** %5, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %5, align 8
  store i8 %28, i8* %29, align 1
  br label %31

31:                                               ; preds = %17, %23, %27
  %32 = load i8*, i8** %5, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %5, align 8
  store i8 -124, i8* %32, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %3, i64 %1, i32 %2) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9emit_testENS0_7OperandENS0_8RegisterEi(%"class.v8::internal::Assembler"*, i64, i32, i32, i32) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %13, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %13

13:                                               ; preds = %5, %12
  switch i32 %4, label %39 [
    i32 2, label %14
    i32 1, label %20
  ]

14:                                               ; preds = %13
  %15 = load i8*, i8** %6, align 8
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %16, i8** %6, align 8
  store i8 102, i8* %15, align 1
  %17 = trunc i64 %1 to i8
  %18 = lshr i32 %3, 1
  %19 = trunc i32 %18 to i8
  br label %50

20:                                               ; preds = %13
  %21 = icmp slt i32 %3, 4
  %22 = trunc i64 %1 to i8
  %23 = lshr i32 %3, 1
  %24 = trunc i32 %23 to i8
  br i1 %21, label %31, label %25

25:                                               ; preds = %20
  %26 = and i8 %24, -68
  %27 = or i8 %26, %22
  %28 = or i8 %27, 64
  %29 = load i8*, i8** %6, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %6, align 8
  store i8 %28, i8* %29, align 1
  br label %60

31:                                               ; preds = %20
  %32 = and i8 %24, -4
  %33 = or i8 %32, %22
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %60, label %35

35:                                               ; preds = %31
  %36 = or i8 %33, 64
  %37 = load i8*, i8** %6, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  store i8* %38, i8** %6, align 8
  store i8 %36, i8* %37, align 1
  br label %60

39:                                               ; preds = %13
  %40 = icmp eq i32 %4, 8
  %41 = trunc i64 %1 to i8
  %42 = lshr i32 %3, 1
  %43 = trunc i32 %42 to i8
  br i1 %40, label %44, label %50

44:                                               ; preds = %39
  %45 = and i8 %43, -76
  %46 = or i8 %45, %41
  %47 = or i8 %46, 72
  %48 = load i8*, i8** %6, align 8
  %49 = getelementptr inbounds i8, i8* %48, i64 1
  store i8* %49, i8** %6, align 8
  store i8 %47, i8* %48, align 1
  br label %60

50:                                               ; preds = %14, %39
  %51 = phi i8 [ %19, %14 ], [ %43, %39 ]
  %52 = phi i8 [ %17, %14 ], [ %41, %39 ]
  %53 = and i8 %51, -4
  %54 = or i8 %53, %52
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %50
  %57 = or i8 %54, 64
  %58 = load i8*, i8** %6, align 8
  %59 = getelementptr inbounds i8, i8* %58, i64 1
  store i8* %59, i8** %6, align 8
  store i8 %57, i8* %58, align 1
  br label %60

60:                                               ; preds = %56, %50, %44, %35, %31, %25
  %61 = phi i8 [ -124, %25 ], [ -124, %31 ], [ -124, %35 ], [ -123, %44 ], [ -123, %50 ], [ -123, %56 ]
  %62 = load i8*, i8** %6, align 8
  %63 = getelementptr inbounds i8, i8* %62, i64 1
  store i8* %63, i8** %6, align 8
  store i8 %61, i8* %62, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %3, i64 %1, i32 %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5testwENS0_8RegisterES2_(%"class.v8::internal::Assembler"* nocapture, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %10, %3
  %13 = phi i8* [ %11, %10 ], [ %5, %3 ]
  %14 = and i32 %2, 7
  %15 = icmp eq i32 %14, 4
  %16 = select i1 %15, i32 %1, i32 %2
  %17 = select i1 %15, i32 %2, i32 %1
  %18 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %18, i8** %4, align 8
  store i8 102, i8* %13, align 1
  %19 = ashr i32 %17, 3
  %20 = shl nsw i32 %19, 2
  %21 = ashr i32 %16, 3
  %22 = or i32 %20, %21
  %23 = and i32 %22, 255
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %30, label %25

25:                                               ; preds = %12
  %26 = trunc i32 %22 to i8
  %27 = or i8 %26, 64
  %28 = load i8*, i8** %4, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %4, align 8
  store i8 %27, i8* %28, align 1
  br label %30

30:                                               ; preds = %12, %25
  %31 = load i8*, i8** %4, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %32, i8** %4, align 8
  store i8 -123, i8* %31, align 1
  %33 = shl i32 %17, 3
  %34 = and i32 %16, 7
  %35 = or i32 %34, %33
  %36 = trunc i32 %35 to i8
  %37 = or i8 %36, -64
  %38 = load i8*, i8** %4, align 8
  %39 = getelementptr inbounds i8, i8* %38, i64 1
  store i8* %39, i8** %4, align 8
  store i8 %37, i8* %38, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5testwENS0_8RegisterENS0_9ImmediateE(%"class.v8::internal::Assembler"*, i32, i64) local_unnamed_addr #1 align 2 {
  tail call void @_ZN2v88internal9Assembler9emit_testENS0_8RegisterENS0_9ImmediateEi(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5testwENS0_7OperandENS0_9ImmediateE(%"class.v8::internal::Assembler"*, i64, i32, i64) local_unnamed_addr #1 align 2 {
  tail call void @_ZN2v88internal9Assembler9emit_testENS0_7OperandENS0_9ImmediateEi(%"class.v8::internal::Assembler"* %0, i64 %1, i32 %2, i64 %3, i32 2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5testwENS0_7OperandENS0_8RegisterE(%"class.v8::internal::Assembler"*, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %11, %4
  %14 = phi i8* [ %12, %11 ], [ %6, %4 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 102, i8* %14, align 1
  %16 = trunc i64 %1 to i8
  %17 = lshr i32 %3, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, -4
  %20 = or i8 %19, %16
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %13
  %23 = or i8 %20, 64
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %13, %22
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 -123, i8* %27, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %3, i64 %1, i32 %2) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler3fldEi(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %11, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %10 = load i8*, i8** %3, align 8
  br label %11

11:                                               ; preds = %2, %9
  %12 = phi i8* [ %4, %2 ], [ %10, %9 ]
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  store i8* %13, i8** %3, align 8
  store i8 -39, i8* %12, align 1
  %14 = trunc i32 %1 to i8
  %15 = add i8 %14, -64
  %16 = load i8*, i8** %3, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %17, i8** %3, align 8
  store i8 %15, i8* %16, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler11emit_farithEiii(%"class.v8::internal::Assembler"* nocapture, i32, i32, i32) local_unnamed_addr #9 align 2 {
  %5 = trunc i32 %1 to i8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 1
  store i8* %8, i8** %6, align 8
  store i8 %5, i8* %7, align 1
  %9 = add nsw i32 %3, %2
  %10 = trunc i32 %9 to i8
  %11 = load i8*, i8** %6, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %6, align 8
  store i8 %10, i8* %11, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4fld1Ev(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -39, i8* %11, align 1
  %13 = load i8*, i8** %2, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %2, align 8
  store i8 -24, i8* %13, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4fldzEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -39, i8* %11, align 1
  %13 = load i8*, i8** %2, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %2, align 8
  store i8 -18, i8* %13, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5fldpiEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -39, i8* %11, align 1
  %13 = load i8*, i8** %2, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %2, align 8
  store i8 -21, i8* %13, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6fldln2Ev(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -39, i8* %11, align 1
  %13 = load i8*, i8** %2, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %2, align 8
  store i8 -19, i8* %13, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5fld_sENS0_7OperandE(%"class.v8::internal::Assembler"*, i64, i32) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::Operand", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %3, %11
  %13 = trunc i64 %1 to i8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %12
  %16 = or i8 %13, 64
  %17 = load i8*, i8** %5, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %5, align 8
  store i8 %16, i8* %17, align 1
  br label %19

19:                                               ; preds = %12, %15
  %20 = load i8*, i8** %5, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 1
  store i8* %21, i8** %5, align 8
  store i8 -39, i8* %20, align 1
  %22 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %22)
  %23 = bitcast %"class.v8::internal::Operand"* %4 to i64*
  store i64 %1, i64* %23, align 8
  %24 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 7
  %25 = bitcast i8* %24 to i32*
  store i32 %2, i32* %25, align 1
  %26 = lshr i32 %2, 16
  %27 = and i32 %26, 255
  %28 = lshr i64 %1, 8
  %29 = trunc i64 %28 to i8
  %30 = load i8*, i8** %5, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %5, align 8
  store i8 %29, i8* %30, align 1
  %32 = icmp eq i8 %29, 5
  %33 = lshr i64 %1, 16
  %34 = trunc i64 %33 to i8
  br i1 %32, label %50, label %35

35:                                               ; preds = %19
  %36 = trunc i32 %26 to i8
  %37 = icmp ugt i8 %36, 1
  br i1 %37, label %38, label %137

38:                                               ; preds = %35
  %39 = zext i32 %27 to i64
  %40 = load i8*, i8** %5, align 8
  %41 = getelementptr inbounds i8, i8* %40, i64 1
  store i8* %41, i8** %5, align 8
  store i8 %34, i8* %40, align 1
  %42 = icmp eq i32 %27, 2
  br i1 %42, label %137, label %43

43:                                               ; preds = %38
  %44 = add nsw i64 %39, -2
  %45 = add nsw i64 %39, -3
  %46 = and i64 %44, 3
  %47 = icmp ult i64 %45, 3
  br i1 %47, label %124, label %48

48:                                               ; preds = %43
  %49 = sub nsw i64 %44, %46
  br label %99

50:                                               ; preds = %19
  %51 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 1
  %52 = bitcast i8* %51 to %"class.v8::internal::Label"**
  %53 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %52, align 1
  %54 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %53, i64 0, i32 0
  %55 = load i32, i32* %54, align 4
  %56 = icmp slt i32 %55, 0
  br i1 %56, label %57, label %72

57:                                               ; preds = %50
  %58 = bitcast i8** %5 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %61 = bitcast i8** %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = sub i64 %59, %62
  %64 = trunc i64 %63 to i32
  %65 = ashr i32 %2, 24
  %66 = add nsw i32 %65, -5
  %67 = sub i32 %66, %55
  %68 = sub i32 %67, %64
  %69 = inttoptr i64 %59 to i32*
  store i32 %68, i32* %69, align 1
  %70 = load i8*, i8** %5, align 8
  %71 = getelementptr inbounds i8, i8* %70, i64 4
  store i8* %71, i8** %5, align 8
  br label %137

72:                                               ; preds = %50
  %73 = icmp eq i32 %55, 0
  br i1 %73, label %87, label %74

74:                                               ; preds = %72
  %75 = add nsw i32 %55, -1
  %76 = bitcast i8** %5 to i32**
  %77 = load i32*, i32** %76, align 8
  store i32 %75, i32* %77, align 1
  %78 = load i8*, i8** %5, align 8
  %79 = getelementptr inbounds i8, i8* %78, i64 4
  store i8* %79, i8** %5, align 8
  %80 = ptrtoint i8* %79 to i64
  %81 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %82 = bitcast i8** %81 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = sub i64 %80, %83
  %85 = trunc i64 %84 to i32
  %86 = add i32 %85, -3
  store i32 %86, i32* %54, align 4
  br label %137

87:                                               ; preds = %72
  %88 = bitcast i8** %5 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %91 = bitcast i8** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = sub i64 %89, %92
  %94 = trunc i64 %93 to i32
  %95 = inttoptr i64 %89 to i32*
  store i32 %94, i32* %95, align 1
  %96 = load i8*, i8** %5, align 8
  %97 = getelementptr inbounds i8, i8* %96, i64 4
  store i8* %97, i8** %5, align 8
  %98 = add nsw i32 %94, 1
  store i32 %98, i32* %54, align 4
  br label %137

99:                                               ; preds = %99, %48
  %100 = phi i64 [ 2, %48 ], [ %121, %99 ]
  %101 = phi i64 [ %49, %48 ], [ %122, %99 ]
  %102 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %100
  %103 = load i8, i8* %102, align 1
  %104 = load i8*, i8** %5, align 8
  %105 = getelementptr inbounds i8, i8* %104, i64 1
  store i8* %105, i8** %5, align 8
  store i8 %103, i8* %104, align 1
  %106 = or i64 %100, 1
  %107 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %106
  %108 = load i8, i8* %107, align 1
  %109 = load i8*, i8** %5, align 8
  %110 = getelementptr inbounds i8, i8* %109, i64 1
  store i8* %110, i8** %5, align 8
  store i8 %108, i8* %109, align 1
  %111 = add nuw nsw i64 %100, 2
  %112 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %111
  %113 = load i8, i8* %112, align 1
  %114 = load i8*, i8** %5, align 8
  %115 = getelementptr inbounds i8, i8* %114, i64 1
  store i8* %115, i8** %5, align 8
  store i8 %113, i8* %114, align 1
  %116 = add nuw nsw i64 %100, 3
  %117 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %116
  %118 = load i8, i8* %117, align 1
  %119 = load i8*, i8** %5, align 8
  %120 = getelementptr inbounds i8, i8* %119, i64 1
  store i8* %120, i8** %5, align 8
  store i8 %118, i8* %119, align 1
  %121 = add nuw nsw i64 %100, 4
  %122 = add i64 %101, -4
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %124, label %99

124:                                              ; preds = %99, %43
  %125 = phi i64 [ 2, %43 ], [ %121, %99 ]
  %126 = icmp eq i64 %46, 0
  br i1 %126, label %137, label %127

127:                                              ; preds = %124, %127
  %128 = phi i64 [ %134, %127 ], [ %125, %124 ]
  %129 = phi i64 [ %135, %127 ], [ %46, %124 ]
  %130 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %128
  %131 = load i8, i8* %130, align 1
  %132 = load i8*, i8** %5, align 8
  %133 = getelementptr inbounds i8, i8* %132, i64 1
  store i8* %133, i8** %5, align 8
  store i8 %131, i8* %132, align 1
  %134 = add nuw nsw i64 %128, 1
  %135 = add i64 %129, -1
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %137, label %127, !llvm.loop !45

137:                                              ; preds = %124, %127, %38, %35, %57, %74, %87
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %22)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5fld_dENS0_7OperandE(%"class.v8::internal::Assembler"*, i64, i32) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::Operand", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %3, %11
  %13 = trunc i64 %1 to i8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %12
  %16 = or i8 %13, 64
  %17 = load i8*, i8** %5, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %5, align 8
  store i8 %16, i8* %17, align 1
  br label %19

19:                                               ; preds = %12, %15
  %20 = load i8*, i8** %5, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 1
  store i8* %21, i8** %5, align 8
  store i8 -35, i8* %20, align 1
  %22 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %22)
  %23 = bitcast %"class.v8::internal::Operand"* %4 to i64*
  store i64 %1, i64* %23, align 8
  %24 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 7
  %25 = bitcast i8* %24 to i32*
  store i32 %2, i32* %25, align 1
  %26 = lshr i32 %2, 16
  %27 = and i32 %26, 255
  %28 = lshr i64 %1, 8
  %29 = trunc i64 %28 to i8
  %30 = load i8*, i8** %5, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %5, align 8
  store i8 %29, i8* %30, align 1
  %32 = icmp eq i8 %29, 5
  %33 = lshr i64 %1, 16
  %34 = trunc i64 %33 to i8
  br i1 %32, label %50, label %35

35:                                               ; preds = %19
  %36 = trunc i32 %26 to i8
  %37 = icmp ugt i8 %36, 1
  br i1 %37, label %38, label %137

38:                                               ; preds = %35
  %39 = zext i32 %27 to i64
  %40 = load i8*, i8** %5, align 8
  %41 = getelementptr inbounds i8, i8* %40, i64 1
  store i8* %41, i8** %5, align 8
  store i8 %34, i8* %40, align 1
  %42 = icmp eq i32 %27, 2
  br i1 %42, label %137, label %43

43:                                               ; preds = %38
  %44 = add nsw i64 %39, -2
  %45 = add nsw i64 %39, -3
  %46 = and i64 %44, 3
  %47 = icmp ult i64 %45, 3
  br i1 %47, label %124, label %48

48:                                               ; preds = %43
  %49 = sub nsw i64 %44, %46
  br label %99

50:                                               ; preds = %19
  %51 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 1
  %52 = bitcast i8* %51 to %"class.v8::internal::Label"**
  %53 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %52, align 1
  %54 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %53, i64 0, i32 0
  %55 = load i32, i32* %54, align 4
  %56 = icmp slt i32 %55, 0
  br i1 %56, label %57, label %72

57:                                               ; preds = %50
  %58 = bitcast i8** %5 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %61 = bitcast i8** %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = sub i64 %59, %62
  %64 = trunc i64 %63 to i32
  %65 = ashr i32 %2, 24
  %66 = add nsw i32 %65, -5
  %67 = sub i32 %66, %55
  %68 = sub i32 %67, %64
  %69 = inttoptr i64 %59 to i32*
  store i32 %68, i32* %69, align 1
  %70 = load i8*, i8** %5, align 8
  %71 = getelementptr inbounds i8, i8* %70, i64 4
  store i8* %71, i8** %5, align 8
  br label %137

72:                                               ; preds = %50
  %73 = icmp eq i32 %55, 0
  br i1 %73, label %87, label %74

74:                                               ; preds = %72
  %75 = add nsw i32 %55, -1
  %76 = bitcast i8** %5 to i32**
  %77 = load i32*, i32** %76, align 8
  store i32 %75, i32* %77, align 1
  %78 = load i8*, i8** %5, align 8
  %79 = getelementptr inbounds i8, i8* %78, i64 4
  store i8* %79, i8** %5, align 8
  %80 = ptrtoint i8* %79 to i64
  %81 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %82 = bitcast i8** %81 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = sub i64 %80, %83
  %85 = trunc i64 %84 to i32
  %86 = add i32 %85, -3
  store i32 %86, i32* %54, align 4
  br label %137

87:                                               ; preds = %72
  %88 = bitcast i8** %5 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %91 = bitcast i8** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = sub i64 %89, %92
  %94 = trunc i64 %93 to i32
  %95 = inttoptr i64 %89 to i32*
  store i32 %94, i32* %95, align 1
  %96 = load i8*, i8** %5, align 8
  %97 = getelementptr inbounds i8, i8* %96, i64 4
  store i8* %97, i8** %5, align 8
  %98 = add nsw i32 %94, 1
  store i32 %98, i32* %54, align 4
  br label %137

99:                                               ; preds = %99, %48
  %100 = phi i64 [ 2, %48 ], [ %121, %99 ]
  %101 = phi i64 [ %49, %48 ], [ %122, %99 ]
  %102 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %100
  %103 = load i8, i8* %102, align 1
  %104 = load i8*, i8** %5, align 8
  %105 = getelementptr inbounds i8, i8* %104, i64 1
  store i8* %105, i8** %5, align 8
  store i8 %103, i8* %104, align 1
  %106 = or i64 %100, 1
  %107 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %106
  %108 = load i8, i8* %107, align 1
  %109 = load i8*, i8** %5, align 8
  %110 = getelementptr inbounds i8, i8* %109, i64 1
  store i8* %110, i8** %5, align 8
  store i8 %108, i8* %109, align 1
  %111 = add nuw nsw i64 %100, 2
  %112 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %111
  %113 = load i8, i8* %112, align 1
  %114 = load i8*, i8** %5, align 8
  %115 = getelementptr inbounds i8, i8* %114, i64 1
  store i8* %115, i8** %5, align 8
  store i8 %113, i8* %114, align 1
  %116 = add nuw nsw i64 %100, 3
  %117 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %116
  %118 = load i8, i8* %117, align 1
  %119 = load i8*, i8** %5, align 8
  %120 = getelementptr inbounds i8, i8* %119, i64 1
  store i8* %120, i8** %5, align 8
  store i8 %118, i8* %119, align 1
  %121 = add nuw nsw i64 %100, 4
  %122 = add i64 %101, -4
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %124, label %99

124:                                              ; preds = %99, %43
  %125 = phi i64 [ 2, %43 ], [ %121, %99 ]
  %126 = icmp eq i64 %46, 0
  br i1 %126, label %137, label %127

127:                                              ; preds = %124, %127
  %128 = phi i64 [ %134, %127 ], [ %125, %124 ]
  %129 = phi i64 [ %135, %127 ], [ %46, %124 ]
  %130 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %128
  %131 = load i8, i8* %130, align 1
  %132 = load i8*, i8** %5, align 8
  %133 = getelementptr inbounds i8, i8* %132, i64 1
  store i8* %133, i8** %5, align 8
  store i8 %131, i8* %132, align 1
  %134 = add nuw nsw i64 %128, 1
  %135 = add i64 %129, -1
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %137, label %127, !llvm.loop !46

137:                                              ; preds = %124, %127, %38, %35, %57, %74, %87
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %22)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6fstp_sENS0_7OperandE(%"class.v8::internal::Assembler"*, i64, i32) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::Operand", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %3, %11
  %13 = trunc i64 %1 to i8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %12
  %16 = or i8 %13, 64
  %17 = load i8*, i8** %5, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %5, align 8
  store i8 %16, i8* %17, align 1
  br label %19

19:                                               ; preds = %12, %15
  %20 = load i8*, i8** %5, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 1
  store i8* %21, i8** %5, align 8
  store i8 -39, i8* %20, align 1
  %22 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %22)
  %23 = bitcast %"class.v8::internal::Operand"* %4 to i64*
  store i64 %1, i64* %23, align 8
  %24 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 7
  %25 = bitcast i8* %24 to i32*
  store i32 %2, i32* %25, align 1
  %26 = lshr i32 %2, 16
  %27 = and i32 %26, 255
  %28 = lshr i64 %1, 8
  %29 = trunc i64 %28 to i8
  %30 = or i8 %29, 24
  %31 = load i8*, i8** %5, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %32, i8** %5, align 8
  store i8 %30, i8* %31, align 1
  %33 = icmp eq i8 %29, 5
  %34 = lshr i64 %1, 16
  %35 = trunc i64 %34 to i8
  br i1 %33, label %51, label %36

36:                                               ; preds = %19
  %37 = trunc i32 %26 to i8
  %38 = icmp ugt i8 %37, 1
  br i1 %38, label %39, label %138

39:                                               ; preds = %36
  %40 = zext i32 %27 to i64
  %41 = load i8*, i8** %5, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %42, i8** %5, align 8
  store i8 %35, i8* %41, align 1
  %43 = icmp eq i32 %27, 2
  br i1 %43, label %138, label %44

44:                                               ; preds = %39
  %45 = add nsw i64 %40, -2
  %46 = add nsw i64 %40, -3
  %47 = and i64 %45, 3
  %48 = icmp ult i64 %46, 3
  br i1 %48, label %125, label %49

49:                                               ; preds = %44
  %50 = sub nsw i64 %45, %47
  br label %100

51:                                               ; preds = %19
  %52 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 1
  %53 = bitcast i8* %52 to %"class.v8::internal::Label"**
  %54 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %53, align 1
  %55 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %54, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = icmp slt i32 %56, 0
  br i1 %57, label %58, label %73

58:                                               ; preds = %51
  %59 = bitcast i8** %5 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %62 = bitcast i8** %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = sub i64 %60, %63
  %65 = trunc i64 %64 to i32
  %66 = ashr i32 %2, 24
  %67 = add nsw i32 %66, -5
  %68 = sub i32 %67, %56
  %69 = sub i32 %68, %65
  %70 = inttoptr i64 %60 to i32*
  store i32 %69, i32* %70, align 1
  %71 = load i8*, i8** %5, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 4
  store i8* %72, i8** %5, align 8
  br label %138

73:                                               ; preds = %51
  %74 = icmp eq i32 %56, 0
  br i1 %74, label %88, label %75

75:                                               ; preds = %73
  %76 = add nsw i32 %56, -1
  %77 = bitcast i8** %5 to i32**
  %78 = load i32*, i32** %77, align 8
  store i32 %76, i32* %78, align 1
  %79 = load i8*, i8** %5, align 8
  %80 = getelementptr inbounds i8, i8* %79, i64 4
  store i8* %80, i8** %5, align 8
  %81 = ptrtoint i8* %80 to i64
  %82 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %83 = bitcast i8** %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = sub i64 %81, %84
  %86 = trunc i64 %85 to i32
  %87 = add i32 %86, -3
  store i32 %87, i32* %55, align 4
  br label %138

88:                                               ; preds = %73
  %89 = bitcast i8** %5 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %92 = bitcast i8** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = sub i64 %90, %93
  %95 = trunc i64 %94 to i32
  %96 = inttoptr i64 %90 to i32*
  store i32 %95, i32* %96, align 1
  %97 = load i8*, i8** %5, align 8
  %98 = getelementptr inbounds i8, i8* %97, i64 4
  store i8* %98, i8** %5, align 8
  %99 = add nsw i32 %95, 1
  store i32 %99, i32* %55, align 4
  br label %138

100:                                              ; preds = %100, %49
  %101 = phi i64 [ 2, %49 ], [ %122, %100 ]
  %102 = phi i64 [ %50, %49 ], [ %123, %100 ]
  %103 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %101
  %104 = load i8, i8* %103, align 1
  %105 = load i8*, i8** %5, align 8
  %106 = getelementptr inbounds i8, i8* %105, i64 1
  store i8* %106, i8** %5, align 8
  store i8 %104, i8* %105, align 1
  %107 = or i64 %101, 1
  %108 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = load i8*, i8** %5, align 8
  %111 = getelementptr inbounds i8, i8* %110, i64 1
  store i8* %111, i8** %5, align 8
  store i8 %109, i8* %110, align 1
  %112 = add nuw nsw i64 %101, 2
  %113 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = load i8*, i8** %5, align 8
  %116 = getelementptr inbounds i8, i8* %115, i64 1
  store i8* %116, i8** %5, align 8
  store i8 %114, i8* %115, align 1
  %117 = add nuw nsw i64 %101, 3
  %118 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = load i8*, i8** %5, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 1
  store i8* %121, i8** %5, align 8
  store i8 %119, i8* %120, align 1
  %122 = add nuw nsw i64 %101, 4
  %123 = add i64 %102, -4
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %100

125:                                              ; preds = %100, %44
  %126 = phi i64 [ 2, %44 ], [ %122, %100 ]
  %127 = icmp eq i64 %47, 0
  br i1 %127, label %138, label %128

128:                                              ; preds = %125, %128
  %129 = phi i64 [ %135, %128 ], [ %126, %125 ]
  %130 = phi i64 [ %136, %128 ], [ %47, %125 ]
  %131 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %129
  %132 = load i8, i8* %131, align 1
  %133 = load i8*, i8** %5, align 8
  %134 = getelementptr inbounds i8, i8* %133, i64 1
  store i8* %134, i8** %5, align 8
  store i8 %132, i8* %133, align 1
  %135 = add nuw nsw i64 %129, 1
  %136 = add i64 %130, -1
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %128, !llvm.loop !47

138:                                              ; preds = %125, %128, %39, %36, %58, %75, %88
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %22)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6fstp_dENS0_7OperandE(%"class.v8::internal::Assembler"*, i64, i32) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::Operand", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %3, %11
  %13 = trunc i64 %1 to i8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %12
  %16 = or i8 %13, 64
  %17 = load i8*, i8** %5, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %5, align 8
  store i8 %16, i8* %17, align 1
  br label %19

19:                                               ; preds = %12, %15
  %20 = load i8*, i8** %5, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 1
  store i8* %21, i8** %5, align 8
  store i8 -35, i8* %20, align 1
  %22 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %22)
  %23 = bitcast %"class.v8::internal::Operand"* %4 to i64*
  store i64 %1, i64* %23, align 8
  %24 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 7
  %25 = bitcast i8* %24 to i32*
  store i32 %2, i32* %25, align 1
  %26 = lshr i32 %2, 16
  %27 = and i32 %26, 255
  %28 = lshr i64 %1, 8
  %29 = trunc i64 %28 to i8
  %30 = or i8 %29, 24
  %31 = load i8*, i8** %5, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %32, i8** %5, align 8
  store i8 %30, i8* %31, align 1
  %33 = icmp eq i8 %29, 5
  %34 = lshr i64 %1, 16
  %35 = trunc i64 %34 to i8
  br i1 %33, label %51, label %36

36:                                               ; preds = %19
  %37 = trunc i32 %26 to i8
  %38 = icmp ugt i8 %37, 1
  br i1 %38, label %39, label %138

39:                                               ; preds = %36
  %40 = zext i32 %27 to i64
  %41 = load i8*, i8** %5, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %42, i8** %5, align 8
  store i8 %35, i8* %41, align 1
  %43 = icmp eq i32 %27, 2
  br i1 %43, label %138, label %44

44:                                               ; preds = %39
  %45 = add nsw i64 %40, -2
  %46 = add nsw i64 %40, -3
  %47 = and i64 %45, 3
  %48 = icmp ult i64 %46, 3
  br i1 %48, label %125, label %49

49:                                               ; preds = %44
  %50 = sub nsw i64 %45, %47
  br label %100

51:                                               ; preds = %19
  %52 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 1
  %53 = bitcast i8* %52 to %"class.v8::internal::Label"**
  %54 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %53, align 1
  %55 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %54, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = icmp slt i32 %56, 0
  br i1 %57, label %58, label %73

58:                                               ; preds = %51
  %59 = bitcast i8** %5 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %62 = bitcast i8** %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = sub i64 %60, %63
  %65 = trunc i64 %64 to i32
  %66 = ashr i32 %2, 24
  %67 = add nsw i32 %66, -5
  %68 = sub i32 %67, %56
  %69 = sub i32 %68, %65
  %70 = inttoptr i64 %60 to i32*
  store i32 %69, i32* %70, align 1
  %71 = load i8*, i8** %5, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 4
  store i8* %72, i8** %5, align 8
  br label %138

73:                                               ; preds = %51
  %74 = icmp eq i32 %56, 0
  br i1 %74, label %88, label %75

75:                                               ; preds = %73
  %76 = add nsw i32 %56, -1
  %77 = bitcast i8** %5 to i32**
  %78 = load i32*, i32** %77, align 8
  store i32 %76, i32* %78, align 1
  %79 = load i8*, i8** %5, align 8
  %80 = getelementptr inbounds i8, i8* %79, i64 4
  store i8* %80, i8** %5, align 8
  %81 = ptrtoint i8* %80 to i64
  %82 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %83 = bitcast i8** %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = sub i64 %81, %84
  %86 = trunc i64 %85 to i32
  %87 = add i32 %86, -3
  store i32 %87, i32* %55, align 4
  br label %138

88:                                               ; preds = %73
  %89 = bitcast i8** %5 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %92 = bitcast i8** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = sub i64 %90, %93
  %95 = trunc i64 %94 to i32
  %96 = inttoptr i64 %90 to i32*
  store i32 %95, i32* %96, align 1
  %97 = load i8*, i8** %5, align 8
  %98 = getelementptr inbounds i8, i8* %97, i64 4
  store i8* %98, i8** %5, align 8
  %99 = add nsw i32 %95, 1
  store i32 %99, i32* %55, align 4
  br label %138

100:                                              ; preds = %100, %49
  %101 = phi i64 [ 2, %49 ], [ %122, %100 ]
  %102 = phi i64 [ %50, %49 ], [ %123, %100 ]
  %103 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %101
  %104 = load i8, i8* %103, align 1
  %105 = load i8*, i8** %5, align 8
  %106 = getelementptr inbounds i8, i8* %105, i64 1
  store i8* %106, i8** %5, align 8
  store i8 %104, i8* %105, align 1
  %107 = or i64 %101, 1
  %108 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = load i8*, i8** %5, align 8
  %111 = getelementptr inbounds i8, i8* %110, i64 1
  store i8* %111, i8** %5, align 8
  store i8 %109, i8* %110, align 1
  %112 = add nuw nsw i64 %101, 2
  %113 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = load i8*, i8** %5, align 8
  %116 = getelementptr inbounds i8, i8* %115, i64 1
  store i8* %116, i8** %5, align 8
  store i8 %114, i8* %115, align 1
  %117 = add nuw nsw i64 %101, 3
  %118 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = load i8*, i8** %5, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 1
  store i8* %121, i8** %5, align 8
  store i8 %119, i8* %120, align 1
  %122 = add nuw nsw i64 %101, 4
  %123 = add i64 %102, -4
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %100

125:                                              ; preds = %100, %44
  %126 = phi i64 [ 2, %44 ], [ %122, %100 ]
  %127 = icmp eq i64 %47, 0
  br i1 %127, label %138, label %128

128:                                              ; preds = %125, %128
  %129 = phi i64 [ %135, %128 ], [ %126, %125 ]
  %130 = phi i64 [ %136, %128 ], [ %47, %125 ]
  %131 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %129
  %132 = load i8, i8* %131, align 1
  %133 = load i8*, i8** %5, align 8
  %134 = getelementptr inbounds i8, i8* %133, i64 1
  store i8* %134, i8** %5, align 8
  store i8 %132, i8* %133, align 1
  %135 = add nuw nsw i64 %129, 1
  %136 = add i64 %130, -1
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %128, !llvm.loop !48

138:                                              ; preds = %125, %128, %39, %36, %58, %75, %88
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %22)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4fstpEi(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %11, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %10 = load i8*, i8** %3, align 8
  br label %11

11:                                               ; preds = %2, %9
  %12 = phi i8* [ %4, %2 ], [ %10, %9 ]
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  store i8* %13, i8** %3, align 8
  store i8 -35, i8* %12, align 1
  %14 = trunc i32 %1 to i8
  %15 = add i8 %14, -40
  %16 = load i8*, i8** %3, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %17, i8** %3, align 8
  store i8 %15, i8* %16, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6fild_sENS0_7OperandE(%"class.v8::internal::Assembler"*, i64, i32) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::Operand", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %3, %11
  %13 = trunc i64 %1 to i8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %12
  %16 = or i8 %13, 64
  %17 = load i8*, i8** %5, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %5, align 8
  store i8 %16, i8* %17, align 1
  br label %19

19:                                               ; preds = %12, %15
  %20 = load i8*, i8** %5, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 1
  store i8* %21, i8** %5, align 8
  store i8 -37, i8* %20, align 1
  %22 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %22)
  %23 = bitcast %"class.v8::internal::Operand"* %4 to i64*
  store i64 %1, i64* %23, align 8
  %24 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 7
  %25 = bitcast i8* %24 to i32*
  store i32 %2, i32* %25, align 1
  %26 = lshr i32 %2, 16
  %27 = and i32 %26, 255
  %28 = lshr i64 %1, 8
  %29 = trunc i64 %28 to i8
  %30 = load i8*, i8** %5, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %5, align 8
  store i8 %29, i8* %30, align 1
  %32 = icmp eq i8 %29, 5
  %33 = lshr i64 %1, 16
  %34 = trunc i64 %33 to i8
  br i1 %32, label %50, label %35

35:                                               ; preds = %19
  %36 = trunc i32 %26 to i8
  %37 = icmp ugt i8 %36, 1
  br i1 %37, label %38, label %137

38:                                               ; preds = %35
  %39 = zext i32 %27 to i64
  %40 = load i8*, i8** %5, align 8
  %41 = getelementptr inbounds i8, i8* %40, i64 1
  store i8* %41, i8** %5, align 8
  store i8 %34, i8* %40, align 1
  %42 = icmp eq i32 %27, 2
  br i1 %42, label %137, label %43

43:                                               ; preds = %38
  %44 = add nsw i64 %39, -2
  %45 = add nsw i64 %39, -3
  %46 = and i64 %44, 3
  %47 = icmp ult i64 %45, 3
  br i1 %47, label %124, label %48

48:                                               ; preds = %43
  %49 = sub nsw i64 %44, %46
  br label %99

50:                                               ; preds = %19
  %51 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 1
  %52 = bitcast i8* %51 to %"class.v8::internal::Label"**
  %53 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %52, align 1
  %54 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %53, i64 0, i32 0
  %55 = load i32, i32* %54, align 4
  %56 = icmp slt i32 %55, 0
  br i1 %56, label %57, label %72

57:                                               ; preds = %50
  %58 = bitcast i8** %5 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %61 = bitcast i8** %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = sub i64 %59, %62
  %64 = trunc i64 %63 to i32
  %65 = ashr i32 %2, 24
  %66 = add nsw i32 %65, -5
  %67 = sub i32 %66, %55
  %68 = sub i32 %67, %64
  %69 = inttoptr i64 %59 to i32*
  store i32 %68, i32* %69, align 1
  %70 = load i8*, i8** %5, align 8
  %71 = getelementptr inbounds i8, i8* %70, i64 4
  store i8* %71, i8** %5, align 8
  br label %137

72:                                               ; preds = %50
  %73 = icmp eq i32 %55, 0
  br i1 %73, label %87, label %74

74:                                               ; preds = %72
  %75 = add nsw i32 %55, -1
  %76 = bitcast i8** %5 to i32**
  %77 = load i32*, i32** %76, align 8
  store i32 %75, i32* %77, align 1
  %78 = load i8*, i8** %5, align 8
  %79 = getelementptr inbounds i8, i8* %78, i64 4
  store i8* %79, i8** %5, align 8
  %80 = ptrtoint i8* %79 to i64
  %81 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %82 = bitcast i8** %81 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = sub i64 %80, %83
  %85 = trunc i64 %84 to i32
  %86 = add i32 %85, -3
  store i32 %86, i32* %54, align 4
  br label %137

87:                                               ; preds = %72
  %88 = bitcast i8** %5 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %91 = bitcast i8** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = sub i64 %89, %92
  %94 = trunc i64 %93 to i32
  %95 = inttoptr i64 %89 to i32*
  store i32 %94, i32* %95, align 1
  %96 = load i8*, i8** %5, align 8
  %97 = getelementptr inbounds i8, i8* %96, i64 4
  store i8* %97, i8** %5, align 8
  %98 = add nsw i32 %94, 1
  store i32 %98, i32* %54, align 4
  br label %137

99:                                               ; preds = %99, %48
  %100 = phi i64 [ 2, %48 ], [ %121, %99 ]
  %101 = phi i64 [ %49, %48 ], [ %122, %99 ]
  %102 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %100
  %103 = load i8, i8* %102, align 1
  %104 = load i8*, i8** %5, align 8
  %105 = getelementptr inbounds i8, i8* %104, i64 1
  store i8* %105, i8** %5, align 8
  store i8 %103, i8* %104, align 1
  %106 = or i64 %100, 1
  %107 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %106
  %108 = load i8, i8* %107, align 1
  %109 = load i8*, i8** %5, align 8
  %110 = getelementptr inbounds i8, i8* %109, i64 1
  store i8* %110, i8** %5, align 8
  store i8 %108, i8* %109, align 1
  %111 = add nuw nsw i64 %100, 2
  %112 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %111
  %113 = load i8, i8* %112, align 1
  %114 = load i8*, i8** %5, align 8
  %115 = getelementptr inbounds i8, i8* %114, i64 1
  store i8* %115, i8** %5, align 8
  store i8 %113, i8* %114, align 1
  %116 = add nuw nsw i64 %100, 3
  %117 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %116
  %118 = load i8, i8* %117, align 1
  %119 = load i8*, i8** %5, align 8
  %120 = getelementptr inbounds i8, i8* %119, i64 1
  store i8* %120, i8** %5, align 8
  store i8 %118, i8* %119, align 1
  %121 = add nuw nsw i64 %100, 4
  %122 = add i64 %101, -4
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %124, label %99

124:                                              ; preds = %99, %43
  %125 = phi i64 [ 2, %43 ], [ %121, %99 ]
  %126 = icmp eq i64 %46, 0
  br i1 %126, label %137, label %127

127:                                              ; preds = %124, %127
  %128 = phi i64 [ %134, %127 ], [ %125, %124 ]
  %129 = phi i64 [ %135, %127 ], [ %46, %124 ]
  %130 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %128
  %131 = load i8, i8* %130, align 1
  %132 = load i8*, i8** %5, align 8
  %133 = getelementptr inbounds i8, i8* %132, i64 1
  store i8* %133, i8** %5, align 8
  store i8 %131, i8* %132, align 1
  %134 = add nuw nsw i64 %128, 1
  %135 = add i64 %129, -1
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %137, label %127, !llvm.loop !49

137:                                              ; preds = %124, %127, %38, %35, %57, %74, %87
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %22)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6fild_dENS0_7OperandE(%"class.v8::internal::Assembler"*, i64, i32) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::Operand", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %3, %11
  %13 = trunc i64 %1 to i8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %12
  %16 = or i8 %13, 64
  %17 = load i8*, i8** %5, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %5, align 8
  store i8 %16, i8* %17, align 1
  br label %19

19:                                               ; preds = %12, %15
  %20 = load i8*, i8** %5, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 1
  store i8* %21, i8** %5, align 8
  store i8 -33, i8* %20, align 1
  %22 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %22)
  %23 = bitcast %"class.v8::internal::Operand"* %4 to i64*
  store i64 %1, i64* %23, align 8
  %24 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 7
  %25 = bitcast i8* %24 to i32*
  store i32 %2, i32* %25, align 1
  %26 = lshr i32 %2, 16
  %27 = and i32 %26, 255
  %28 = lshr i64 %1, 8
  %29 = trunc i64 %28 to i8
  %30 = or i8 %29, 40
  %31 = load i8*, i8** %5, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %32, i8** %5, align 8
  store i8 %30, i8* %31, align 1
  %33 = icmp eq i8 %29, 5
  %34 = lshr i64 %1, 16
  %35 = trunc i64 %34 to i8
  br i1 %33, label %51, label %36

36:                                               ; preds = %19
  %37 = trunc i32 %26 to i8
  %38 = icmp ugt i8 %37, 1
  br i1 %38, label %39, label %138

39:                                               ; preds = %36
  %40 = zext i32 %27 to i64
  %41 = load i8*, i8** %5, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %42, i8** %5, align 8
  store i8 %35, i8* %41, align 1
  %43 = icmp eq i32 %27, 2
  br i1 %43, label %138, label %44

44:                                               ; preds = %39
  %45 = add nsw i64 %40, -2
  %46 = add nsw i64 %40, -3
  %47 = and i64 %45, 3
  %48 = icmp ult i64 %46, 3
  br i1 %48, label %125, label %49

49:                                               ; preds = %44
  %50 = sub nsw i64 %45, %47
  br label %100

51:                                               ; preds = %19
  %52 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 1
  %53 = bitcast i8* %52 to %"class.v8::internal::Label"**
  %54 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %53, align 1
  %55 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %54, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = icmp slt i32 %56, 0
  br i1 %57, label %58, label %73

58:                                               ; preds = %51
  %59 = bitcast i8** %5 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %62 = bitcast i8** %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = sub i64 %60, %63
  %65 = trunc i64 %64 to i32
  %66 = ashr i32 %2, 24
  %67 = add nsw i32 %66, -5
  %68 = sub i32 %67, %56
  %69 = sub i32 %68, %65
  %70 = inttoptr i64 %60 to i32*
  store i32 %69, i32* %70, align 1
  %71 = load i8*, i8** %5, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 4
  store i8* %72, i8** %5, align 8
  br label %138

73:                                               ; preds = %51
  %74 = icmp eq i32 %56, 0
  br i1 %74, label %88, label %75

75:                                               ; preds = %73
  %76 = add nsw i32 %56, -1
  %77 = bitcast i8** %5 to i32**
  %78 = load i32*, i32** %77, align 8
  store i32 %76, i32* %78, align 1
  %79 = load i8*, i8** %5, align 8
  %80 = getelementptr inbounds i8, i8* %79, i64 4
  store i8* %80, i8** %5, align 8
  %81 = ptrtoint i8* %80 to i64
  %82 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %83 = bitcast i8** %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = sub i64 %81, %84
  %86 = trunc i64 %85 to i32
  %87 = add i32 %86, -3
  store i32 %87, i32* %55, align 4
  br label %138

88:                                               ; preds = %73
  %89 = bitcast i8** %5 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %92 = bitcast i8** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = sub i64 %90, %93
  %95 = trunc i64 %94 to i32
  %96 = inttoptr i64 %90 to i32*
  store i32 %95, i32* %96, align 1
  %97 = load i8*, i8** %5, align 8
  %98 = getelementptr inbounds i8, i8* %97, i64 4
  store i8* %98, i8** %5, align 8
  %99 = add nsw i32 %95, 1
  store i32 %99, i32* %55, align 4
  br label %138

100:                                              ; preds = %100, %49
  %101 = phi i64 [ 2, %49 ], [ %122, %100 ]
  %102 = phi i64 [ %50, %49 ], [ %123, %100 ]
  %103 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %101
  %104 = load i8, i8* %103, align 1
  %105 = load i8*, i8** %5, align 8
  %106 = getelementptr inbounds i8, i8* %105, i64 1
  store i8* %106, i8** %5, align 8
  store i8 %104, i8* %105, align 1
  %107 = or i64 %101, 1
  %108 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = load i8*, i8** %5, align 8
  %111 = getelementptr inbounds i8, i8* %110, i64 1
  store i8* %111, i8** %5, align 8
  store i8 %109, i8* %110, align 1
  %112 = add nuw nsw i64 %101, 2
  %113 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = load i8*, i8** %5, align 8
  %116 = getelementptr inbounds i8, i8* %115, i64 1
  store i8* %116, i8** %5, align 8
  store i8 %114, i8* %115, align 1
  %117 = add nuw nsw i64 %101, 3
  %118 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = load i8*, i8** %5, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 1
  store i8* %121, i8** %5, align 8
  store i8 %119, i8* %120, align 1
  %122 = add nuw nsw i64 %101, 4
  %123 = add i64 %102, -4
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %100

125:                                              ; preds = %100, %44
  %126 = phi i64 [ 2, %44 ], [ %122, %100 ]
  %127 = icmp eq i64 %47, 0
  br i1 %127, label %138, label %128

128:                                              ; preds = %125, %128
  %129 = phi i64 [ %135, %128 ], [ %126, %125 ]
  %130 = phi i64 [ %136, %128 ], [ %47, %125 ]
  %131 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %129
  %132 = load i8, i8* %131, align 1
  %133 = load i8*, i8** %5, align 8
  %134 = getelementptr inbounds i8, i8* %133, i64 1
  store i8* %134, i8** %5, align 8
  store i8 %132, i8* %133, align 1
  %135 = add nuw nsw i64 %129, 1
  %136 = add i64 %130, -1
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %128, !llvm.loop !50

138:                                              ; preds = %125, %128, %39, %36, %58, %75, %88
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %22)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7fistp_sENS0_7OperandE(%"class.v8::internal::Assembler"*, i64, i32) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::Operand", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %3, %11
  %13 = trunc i64 %1 to i8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %12
  %16 = or i8 %13, 64
  %17 = load i8*, i8** %5, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %5, align 8
  store i8 %16, i8* %17, align 1
  br label %19

19:                                               ; preds = %12, %15
  %20 = load i8*, i8** %5, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 1
  store i8* %21, i8** %5, align 8
  store i8 -37, i8* %20, align 1
  %22 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %22)
  %23 = bitcast %"class.v8::internal::Operand"* %4 to i64*
  store i64 %1, i64* %23, align 8
  %24 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 7
  %25 = bitcast i8* %24 to i32*
  store i32 %2, i32* %25, align 1
  %26 = lshr i32 %2, 16
  %27 = and i32 %26, 255
  %28 = lshr i64 %1, 8
  %29 = trunc i64 %28 to i8
  %30 = or i8 %29, 24
  %31 = load i8*, i8** %5, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %32, i8** %5, align 8
  store i8 %30, i8* %31, align 1
  %33 = icmp eq i8 %29, 5
  %34 = lshr i64 %1, 16
  %35 = trunc i64 %34 to i8
  br i1 %33, label %51, label %36

36:                                               ; preds = %19
  %37 = trunc i32 %26 to i8
  %38 = icmp ugt i8 %37, 1
  br i1 %38, label %39, label %138

39:                                               ; preds = %36
  %40 = zext i32 %27 to i64
  %41 = load i8*, i8** %5, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %42, i8** %5, align 8
  store i8 %35, i8* %41, align 1
  %43 = icmp eq i32 %27, 2
  br i1 %43, label %138, label %44

44:                                               ; preds = %39
  %45 = add nsw i64 %40, -2
  %46 = add nsw i64 %40, -3
  %47 = and i64 %45, 3
  %48 = icmp ult i64 %46, 3
  br i1 %48, label %125, label %49

49:                                               ; preds = %44
  %50 = sub nsw i64 %45, %47
  br label %100

51:                                               ; preds = %19
  %52 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 1
  %53 = bitcast i8* %52 to %"class.v8::internal::Label"**
  %54 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %53, align 1
  %55 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %54, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = icmp slt i32 %56, 0
  br i1 %57, label %58, label %73

58:                                               ; preds = %51
  %59 = bitcast i8** %5 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %62 = bitcast i8** %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = sub i64 %60, %63
  %65 = trunc i64 %64 to i32
  %66 = ashr i32 %2, 24
  %67 = add nsw i32 %66, -5
  %68 = sub i32 %67, %56
  %69 = sub i32 %68, %65
  %70 = inttoptr i64 %60 to i32*
  store i32 %69, i32* %70, align 1
  %71 = load i8*, i8** %5, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 4
  store i8* %72, i8** %5, align 8
  br label %138

73:                                               ; preds = %51
  %74 = icmp eq i32 %56, 0
  br i1 %74, label %88, label %75

75:                                               ; preds = %73
  %76 = add nsw i32 %56, -1
  %77 = bitcast i8** %5 to i32**
  %78 = load i32*, i32** %77, align 8
  store i32 %76, i32* %78, align 1
  %79 = load i8*, i8** %5, align 8
  %80 = getelementptr inbounds i8, i8* %79, i64 4
  store i8* %80, i8** %5, align 8
  %81 = ptrtoint i8* %80 to i64
  %82 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %83 = bitcast i8** %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = sub i64 %81, %84
  %86 = trunc i64 %85 to i32
  %87 = add i32 %86, -3
  store i32 %87, i32* %55, align 4
  br label %138

88:                                               ; preds = %73
  %89 = bitcast i8** %5 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %92 = bitcast i8** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = sub i64 %90, %93
  %95 = trunc i64 %94 to i32
  %96 = inttoptr i64 %90 to i32*
  store i32 %95, i32* %96, align 1
  %97 = load i8*, i8** %5, align 8
  %98 = getelementptr inbounds i8, i8* %97, i64 4
  store i8* %98, i8** %5, align 8
  %99 = add nsw i32 %95, 1
  store i32 %99, i32* %55, align 4
  br label %138

100:                                              ; preds = %100, %49
  %101 = phi i64 [ 2, %49 ], [ %122, %100 ]
  %102 = phi i64 [ %50, %49 ], [ %123, %100 ]
  %103 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %101
  %104 = load i8, i8* %103, align 1
  %105 = load i8*, i8** %5, align 8
  %106 = getelementptr inbounds i8, i8* %105, i64 1
  store i8* %106, i8** %5, align 8
  store i8 %104, i8* %105, align 1
  %107 = or i64 %101, 1
  %108 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = load i8*, i8** %5, align 8
  %111 = getelementptr inbounds i8, i8* %110, i64 1
  store i8* %111, i8** %5, align 8
  store i8 %109, i8* %110, align 1
  %112 = add nuw nsw i64 %101, 2
  %113 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = load i8*, i8** %5, align 8
  %116 = getelementptr inbounds i8, i8* %115, i64 1
  store i8* %116, i8** %5, align 8
  store i8 %114, i8* %115, align 1
  %117 = add nuw nsw i64 %101, 3
  %118 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = load i8*, i8** %5, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 1
  store i8* %121, i8** %5, align 8
  store i8 %119, i8* %120, align 1
  %122 = add nuw nsw i64 %101, 4
  %123 = add i64 %102, -4
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %100

125:                                              ; preds = %100, %44
  %126 = phi i64 [ 2, %44 ], [ %122, %100 ]
  %127 = icmp eq i64 %47, 0
  br i1 %127, label %138, label %128

128:                                              ; preds = %125, %128
  %129 = phi i64 [ %135, %128 ], [ %126, %125 ]
  %130 = phi i64 [ %136, %128 ], [ %47, %125 ]
  %131 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %129
  %132 = load i8, i8* %131, align 1
  %133 = load i8*, i8** %5, align 8
  %134 = getelementptr inbounds i8, i8* %133, i64 1
  store i8* %134, i8** %5, align 8
  store i8 %132, i8* %133, align 1
  %135 = add nuw nsw i64 %129, 1
  %136 = add i64 %130, -1
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %128, !llvm.loop !51

138:                                              ; preds = %125, %128, %39, %36, %58, %75, %88
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %22)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8fisttp_sENS0_7OperandE(%"class.v8::internal::Assembler"*, i64, i32) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::Operand", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %3, %11
  %13 = trunc i64 %1 to i8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %12
  %16 = or i8 %13, 64
  %17 = load i8*, i8** %5, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %5, align 8
  store i8 %16, i8* %17, align 1
  br label %19

19:                                               ; preds = %12, %15
  %20 = load i8*, i8** %5, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 1
  store i8* %21, i8** %5, align 8
  store i8 -37, i8* %20, align 1
  %22 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %22)
  %23 = bitcast %"class.v8::internal::Operand"* %4 to i64*
  store i64 %1, i64* %23, align 8
  %24 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 7
  %25 = bitcast i8* %24 to i32*
  store i32 %2, i32* %25, align 1
  %26 = lshr i32 %2, 16
  %27 = and i32 %26, 255
  %28 = lshr i64 %1, 8
  %29 = trunc i64 %28 to i8
  %30 = or i8 %29, 8
  %31 = load i8*, i8** %5, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %32, i8** %5, align 8
  store i8 %30, i8* %31, align 1
  %33 = icmp eq i8 %29, 5
  %34 = lshr i64 %1, 16
  %35 = trunc i64 %34 to i8
  br i1 %33, label %51, label %36

36:                                               ; preds = %19
  %37 = trunc i32 %26 to i8
  %38 = icmp ugt i8 %37, 1
  br i1 %38, label %39, label %138

39:                                               ; preds = %36
  %40 = zext i32 %27 to i64
  %41 = load i8*, i8** %5, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %42, i8** %5, align 8
  store i8 %35, i8* %41, align 1
  %43 = icmp eq i32 %27, 2
  br i1 %43, label %138, label %44

44:                                               ; preds = %39
  %45 = add nsw i64 %40, -2
  %46 = add nsw i64 %40, -3
  %47 = and i64 %45, 3
  %48 = icmp ult i64 %46, 3
  br i1 %48, label %125, label %49

49:                                               ; preds = %44
  %50 = sub nsw i64 %45, %47
  br label %100

51:                                               ; preds = %19
  %52 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 1
  %53 = bitcast i8* %52 to %"class.v8::internal::Label"**
  %54 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %53, align 1
  %55 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %54, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = icmp slt i32 %56, 0
  br i1 %57, label %58, label %73

58:                                               ; preds = %51
  %59 = bitcast i8** %5 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %62 = bitcast i8** %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = sub i64 %60, %63
  %65 = trunc i64 %64 to i32
  %66 = ashr i32 %2, 24
  %67 = add nsw i32 %66, -5
  %68 = sub i32 %67, %56
  %69 = sub i32 %68, %65
  %70 = inttoptr i64 %60 to i32*
  store i32 %69, i32* %70, align 1
  %71 = load i8*, i8** %5, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 4
  store i8* %72, i8** %5, align 8
  br label %138

73:                                               ; preds = %51
  %74 = icmp eq i32 %56, 0
  br i1 %74, label %88, label %75

75:                                               ; preds = %73
  %76 = add nsw i32 %56, -1
  %77 = bitcast i8** %5 to i32**
  %78 = load i32*, i32** %77, align 8
  store i32 %76, i32* %78, align 1
  %79 = load i8*, i8** %5, align 8
  %80 = getelementptr inbounds i8, i8* %79, i64 4
  store i8* %80, i8** %5, align 8
  %81 = ptrtoint i8* %80 to i64
  %82 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %83 = bitcast i8** %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = sub i64 %81, %84
  %86 = trunc i64 %85 to i32
  %87 = add i32 %86, -3
  store i32 %87, i32* %55, align 4
  br label %138

88:                                               ; preds = %73
  %89 = bitcast i8** %5 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %92 = bitcast i8** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = sub i64 %90, %93
  %95 = trunc i64 %94 to i32
  %96 = inttoptr i64 %90 to i32*
  store i32 %95, i32* %96, align 1
  %97 = load i8*, i8** %5, align 8
  %98 = getelementptr inbounds i8, i8* %97, i64 4
  store i8* %98, i8** %5, align 8
  %99 = add nsw i32 %95, 1
  store i32 %99, i32* %55, align 4
  br label %138

100:                                              ; preds = %100, %49
  %101 = phi i64 [ 2, %49 ], [ %122, %100 ]
  %102 = phi i64 [ %50, %49 ], [ %123, %100 ]
  %103 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %101
  %104 = load i8, i8* %103, align 1
  %105 = load i8*, i8** %5, align 8
  %106 = getelementptr inbounds i8, i8* %105, i64 1
  store i8* %106, i8** %5, align 8
  store i8 %104, i8* %105, align 1
  %107 = or i64 %101, 1
  %108 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = load i8*, i8** %5, align 8
  %111 = getelementptr inbounds i8, i8* %110, i64 1
  store i8* %111, i8** %5, align 8
  store i8 %109, i8* %110, align 1
  %112 = add nuw nsw i64 %101, 2
  %113 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = load i8*, i8** %5, align 8
  %116 = getelementptr inbounds i8, i8* %115, i64 1
  store i8* %116, i8** %5, align 8
  store i8 %114, i8* %115, align 1
  %117 = add nuw nsw i64 %101, 3
  %118 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = load i8*, i8** %5, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 1
  store i8* %121, i8** %5, align 8
  store i8 %119, i8* %120, align 1
  %122 = add nuw nsw i64 %101, 4
  %123 = add i64 %102, -4
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %100

125:                                              ; preds = %100, %44
  %126 = phi i64 [ 2, %44 ], [ %122, %100 ]
  %127 = icmp eq i64 %47, 0
  br i1 %127, label %138, label %128

128:                                              ; preds = %125, %128
  %129 = phi i64 [ %135, %128 ], [ %126, %125 ]
  %130 = phi i64 [ %136, %128 ], [ %47, %125 ]
  %131 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %129
  %132 = load i8, i8* %131, align 1
  %133 = load i8*, i8** %5, align 8
  %134 = getelementptr inbounds i8, i8* %133, i64 1
  store i8* %134, i8** %5, align 8
  store i8 %132, i8* %133, align 1
  %135 = add nuw nsw i64 %129, 1
  %136 = add i64 %130, -1
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %128, !llvm.loop !52

138:                                              ; preds = %125, %128, %39, %36, %58, %75, %88
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %22)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8fisttp_dENS0_7OperandE(%"class.v8::internal::Assembler"*, i64, i32) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::Operand", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %3, %11
  %13 = trunc i64 %1 to i8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %12
  %16 = or i8 %13, 64
  %17 = load i8*, i8** %5, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %5, align 8
  store i8 %16, i8* %17, align 1
  br label %19

19:                                               ; preds = %12, %15
  %20 = load i8*, i8** %5, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 1
  store i8* %21, i8** %5, align 8
  store i8 -35, i8* %20, align 1
  %22 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %22)
  %23 = bitcast %"class.v8::internal::Operand"* %4 to i64*
  store i64 %1, i64* %23, align 8
  %24 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 7
  %25 = bitcast i8* %24 to i32*
  store i32 %2, i32* %25, align 1
  %26 = lshr i32 %2, 16
  %27 = and i32 %26, 255
  %28 = lshr i64 %1, 8
  %29 = trunc i64 %28 to i8
  %30 = or i8 %29, 8
  %31 = load i8*, i8** %5, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %32, i8** %5, align 8
  store i8 %30, i8* %31, align 1
  %33 = icmp eq i8 %29, 5
  %34 = lshr i64 %1, 16
  %35 = trunc i64 %34 to i8
  br i1 %33, label %51, label %36

36:                                               ; preds = %19
  %37 = trunc i32 %26 to i8
  %38 = icmp ugt i8 %37, 1
  br i1 %38, label %39, label %138

39:                                               ; preds = %36
  %40 = zext i32 %27 to i64
  %41 = load i8*, i8** %5, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %42, i8** %5, align 8
  store i8 %35, i8* %41, align 1
  %43 = icmp eq i32 %27, 2
  br i1 %43, label %138, label %44

44:                                               ; preds = %39
  %45 = add nsw i64 %40, -2
  %46 = add nsw i64 %40, -3
  %47 = and i64 %45, 3
  %48 = icmp ult i64 %46, 3
  br i1 %48, label %125, label %49

49:                                               ; preds = %44
  %50 = sub nsw i64 %45, %47
  br label %100

51:                                               ; preds = %19
  %52 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 1
  %53 = bitcast i8* %52 to %"class.v8::internal::Label"**
  %54 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %53, align 1
  %55 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %54, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = icmp slt i32 %56, 0
  br i1 %57, label %58, label %73

58:                                               ; preds = %51
  %59 = bitcast i8** %5 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %62 = bitcast i8** %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = sub i64 %60, %63
  %65 = trunc i64 %64 to i32
  %66 = ashr i32 %2, 24
  %67 = add nsw i32 %66, -5
  %68 = sub i32 %67, %56
  %69 = sub i32 %68, %65
  %70 = inttoptr i64 %60 to i32*
  store i32 %69, i32* %70, align 1
  %71 = load i8*, i8** %5, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 4
  store i8* %72, i8** %5, align 8
  br label %138

73:                                               ; preds = %51
  %74 = icmp eq i32 %56, 0
  br i1 %74, label %88, label %75

75:                                               ; preds = %73
  %76 = add nsw i32 %56, -1
  %77 = bitcast i8** %5 to i32**
  %78 = load i32*, i32** %77, align 8
  store i32 %76, i32* %78, align 1
  %79 = load i8*, i8** %5, align 8
  %80 = getelementptr inbounds i8, i8* %79, i64 4
  store i8* %80, i8** %5, align 8
  %81 = ptrtoint i8* %80 to i64
  %82 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %83 = bitcast i8** %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = sub i64 %81, %84
  %86 = trunc i64 %85 to i32
  %87 = add i32 %86, -3
  store i32 %87, i32* %55, align 4
  br label %138

88:                                               ; preds = %73
  %89 = bitcast i8** %5 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %92 = bitcast i8** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = sub i64 %90, %93
  %95 = trunc i64 %94 to i32
  %96 = inttoptr i64 %90 to i32*
  store i32 %95, i32* %96, align 1
  %97 = load i8*, i8** %5, align 8
  %98 = getelementptr inbounds i8, i8* %97, i64 4
  store i8* %98, i8** %5, align 8
  %99 = add nsw i32 %95, 1
  store i32 %99, i32* %55, align 4
  br label %138

100:                                              ; preds = %100, %49
  %101 = phi i64 [ 2, %49 ], [ %122, %100 ]
  %102 = phi i64 [ %50, %49 ], [ %123, %100 ]
  %103 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %101
  %104 = load i8, i8* %103, align 1
  %105 = load i8*, i8** %5, align 8
  %106 = getelementptr inbounds i8, i8* %105, i64 1
  store i8* %106, i8** %5, align 8
  store i8 %104, i8* %105, align 1
  %107 = or i64 %101, 1
  %108 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = load i8*, i8** %5, align 8
  %111 = getelementptr inbounds i8, i8* %110, i64 1
  store i8* %111, i8** %5, align 8
  store i8 %109, i8* %110, align 1
  %112 = add nuw nsw i64 %101, 2
  %113 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = load i8*, i8** %5, align 8
  %116 = getelementptr inbounds i8, i8* %115, i64 1
  store i8* %116, i8** %5, align 8
  store i8 %114, i8* %115, align 1
  %117 = add nuw nsw i64 %101, 3
  %118 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = load i8*, i8** %5, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 1
  store i8* %121, i8** %5, align 8
  store i8 %119, i8* %120, align 1
  %122 = add nuw nsw i64 %101, 4
  %123 = add i64 %102, -4
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %100

125:                                              ; preds = %100, %44
  %126 = phi i64 [ 2, %44 ], [ %122, %100 ]
  %127 = icmp eq i64 %47, 0
  br i1 %127, label %138, label %128

128:                                              ; preds = %125, %128
  %129 = phi i64 [ %135, %128 ], [ %126, %125 ]
  %130 = phi i64 [ %136, %128 ], [ %47, %125 ]
  %131 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %129
  %132 = load i8, i8* %131, align 1
  %133 = load i8*, i8** %5, align 8
  %134 = getelementptr inbounds i8, i8* %133, i64 1
  store i8* %134, i8** %5, align 8
  store i8 %132, i8* %133, align 1
  %135 = add nuw nsw i64 %129, 1
  %136 = add i64 %130, -1
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %128, !llvm.loop !53

138:                                              ; preds = %125, %128, %39, %36, %58, %75, %88
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %22)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6fist_sENS0_7OperandE(%"class.v8::internal::Assembler"*, i64, i32) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::Operand", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %3, %11
  %13 = trunc i64 %1 to i8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %12
  %16 = or i8 %13, 64
  %17 = load i8*, i8** %5, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %5, align 8
  store i8 %16, i8* %17, align 1
  br label %19

19:                                               ; preds = %12, %15
  %20 = load i8*, i8** %5, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 1
  store i8* %21, i8** %5, align 8
  store i8 -37, i8* %20, align 1
  %22 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %22)
  %23 = bitcast %"class.v8::internal::Operand"* %4 to i64*
  store i64 %1, i64* %23, align 8
  %24 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 7
  %25 = bitcast i8* %24 to i32*
  store i32 %2, i32* %25, align 1
  %26 = lshr i32 %2, 16
  %27 = and i32 %26, 255
  %28 = lshr i64 %1, 8
  %29 = trunc i64 %28 to i8
  %30 = or i8 %29, 16
  %31 = load i8*, i8** %5, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %32, i8** %5, align 8
  store i8 %30, i8* %31, align 1
  %33 = icmp eq i8 %29, 5
  %34 = lshr i64 %1, 16
  %35 = trunc i64 %34 to i8
  br i1 %33, label %51, label %36

36:                                               ; preds = %19
  %37 = trunc i32 %26 to i8
  %38 = icmp ugt i8 %37, 1
  br i1 %38, label %39, label %138

39:                                               ; preds = %36
  %40 = zext i32 %27 to i64
  %41 = load i8*, i8** %5, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %42, i8** %5, align 8
  store i8 %35, i8* %41, align 1
  %43 = icmp eq i32 %27, 2
  br i1 %43, label %138, label %44

44:                                               ; preds = %39
  %45 = add nsw i64 %40, -2
  %46 = add nsw i64 %40, -3
  %47 = and i64 %45, 3
  %48 = icmp ult i64 %46, 3
  br i1 %48, label %125, label %49

49:                                               ; preds = %44
  %50 = sub nsw i64 %45, %47
  br label %100

51:                                               ; preds = %19
  %52 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 1
  %53 = bitcast i8* %52 to %"class.v8::internal::Label"**
  %54 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %53, align 1
  %55 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %54, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = icmp slt i32 %56, 0
  br i1 %57, label %58, label %73

58:                                               ; preds = %51
  %59 = bitcast i8** %5 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %62 = bitcast i8** %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = sub i64 %60, %63
  %65 = trunc i64 %64 to i32
  %66 = ashr i32 %2, 24
  %67 = add nsw i32 %66, -5
  %68 = sub i32 %67, %56
  %69 = sub i32 %68, %65
  %70 = inttoptr i64 %60 to i32*
  store i32 %69, i32* %70, align 1
  %71 = load i8*, i8** %5, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 4
  store i8* %72, i8** %5, align 8
  br label %138

73:                                               ; preds = %51
  %74 = icmp eq i32 %56, 0
  br i1 %74, label %88, label %75

75:                                               ; preds = %73
  %76 = add nsw i32 %56, -1
  %77 = bitcast i8** %5 to i32**
  %78 = load i32*, i32** %77, align 8
  store i32 %76, i32* %78, align 1
  %79 = load i8*, i8** %5, align 8
  %80 = getelementptr inbounds i8, i8* %79, i64 4
  store i8* %80, i8** %5, align 8
  %81 = ptrtoint i8* %80 to i64
  %82 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %83 = bitcast i8** %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = sub i64 %81, %84
  %86 = trunc i64 %85 to i32
  %87 = add i32 %86, -3
  store i32 %87, i32* %55, align 4
  br label %138

88:                                               ; preds = %73
  %89 = bitcast i8** %5 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %92 = bitcast i8** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = sub i64 %90, %93
  %95 = trunc i64 %94 to i32
  %96 = inttoptr i64 %90 to i32*
  store i32 %95, i32* %96, align 1
  %97 = load i8*, i8** %5, align 8
  %98 = getelementptr inbounds i8, i8* %97, i64 4
  store i8* %98, i8** %5, align 8
  %99 = add nsw i32 %95, 1
  store i32 %99, i32* %55, align 4
  br label %138

100:                                              ; preds = %100, %49
  %101 = phi i64 [ 2, %49 ], [ %122, %100 ]
  %102 = phi i64 [ %50, %49 ], [ %123, %100 ]
  %103 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %101
  %104 = load i8, i8* %103, align 1
  %105 = load i8*, i8** %5, align 8
  %106 = getelementptr inbounds i8, i8* %105, i64 1
  store i8* %106, i8** %5, align 8
  store i8 %104, i8* %105, align 1
  %107 = or i64 %101, 1
  %108 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = load i8*, i8** %5, align 8
  %111 = getelementptr inbounds i8, i8* %110, i64 1
  store i8* %111, i8** %5, align 8
  store i8 %109, i8* %110, align 1
  %112 = add nuw nsw i64 %101, 2
  %113 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = load i8*, i8** %5, align 8
  %116 = getelementptr inbounds i8, i8* %115, i64 1
  store i8* %116, i8** %5, align 8
  store i8 %114, i8* %115, align 1
  %117 = add nuw nsw i64 %101, 3
  %118 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = load i8*, i8** %5, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 1
  store i8* %121, i8** %5, align 8
  store i8 %119, i8* %120, align 1
  %122 = add nuw nsw i64 %101, 4
  %123 = add i64 %102, -4
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %100

125:                                              ; preds = %100, %44
  %126 = phi i64 [ 2, %44 ], [ %122, %100 ]
  %127 = icmp eq i64 %47, 0
  br i1 %127, label %138, label %128

128:                                              ; preds = %125, %128
  %129 = phi i64 [ %135, %128 ], [ %126, %125 ]
  %130 = phi i64 [ %136, %128 ], [ %47, %125 ]
  %131 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %129
  %132 = load i8, i8* %131, align 1
  %133 = load i8*, i8** %5, align 8
  %134 = getelementptr inbounds i8, i8* %133, i64 1
  store i8* %134, i8** %5, align 8
  store i8 %132, i8* %133, align 1
  %135 = add nuw nsw i64 %129, 1
  %136 = add i64 %130, -1
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %128, !llvm.loop !54

138:                                              ; preds = %125, %128, %39, %36, %58, %75, %88
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %22)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7fistp_dENS0_7OperandE(%"class.v8::internal::Assembler"*, i64, i32) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::Operand", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %3, %11
  %13 = trunc i64 %1 to i8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %12
  %16 = or i8 %13, 64
  %17 = load i8*, i8** %5, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %5, align 8
  store i8 %16, i8* %17, align 1
  br label %19

19:                                               ; preds = %12, %15
  %20 = load i8*, i8** %5, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 1
  store i8* %21, i8** %5, align 8
  store i8 -33, i8* %20, align 1
  %22 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %22)
  %23 = bitcast %"class.v8::internal::Operand"* %4 to i64*
  store i64 %1, i64* %23, align 8
  %24 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 7
  %25 = bitcast i8* %24 to i32*
  store i32 %2, i32* %25, align 1
  %26 = lshr i32 %2, 16
  %27 = and i32 %26, 255
  %28 = lshr i64 %1, 8
  %29 = trunc i64 %28 to i8
  %30 = or i8 %29, 56
  %31 = load i8*, i8** %5, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %32, i8** %5, align 8
  store i8 %30, i8* %31, align 1
  %33 = icmp eq i8 %29, 5
  %34 = lshr i64 %1, 16
  %35 = trunc i64 %34 to i8
  br i1 %33, label %51, label %36

36:                                               ; preds = %19
  %37 = trunc i32 %26 to i8
  %38 = icmp ugt i8 %37, 1
  br i1 %38, label %39, label %138

39:                                               ; preds = %36
  %40 = zext i32 %27 to i64
  %41 = load i8*, i8** %5, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %42, i8** %5, align 8
  store i8 %35, i8* %41, align 1
  %43 = icmp eq i32 %27, 2
  br i1 %43, label %138, label %44

44:                                               ; preds = %39
  %45 = add nsw i64 %40, -2
  %46 = add nsw i64 %40, -3
  %47 = and i64 %45, 3
  %48 = icmp ult i64 %46, 3
  br i1 %48, label %125, label %49

49:                                               ; preds = %44
  %50 = sub nsw i64 %45, %47
  br label %100

51:                                               ; preds = %19
  %52 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 1
  %53 = bitcast i8* %52 to %"class.v8::internal::Label"**
  %54 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %53, align 1
  %55 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %54, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = icmp slt i32 %56, 0
  br i1 %57, label %58, label %73

58:                                               ; preds = %51
  %59 = bitcast i8** %5 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %62 = bitcast i8** %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = sub i64 %60, %63
  %65 = trunc i64 %64 to i32
  %66 = ashr i32 %2, 24
  %67 = add nsw i32 %66, -5
  %68 = sub i32 %67, %56
  %69 = sub i32 %68, %65
  %70 = inttoptr i64 %60 to i32*
  store i32 %69, i32* %70, align 1
  %71 = load i8*, i8** %5, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 4
  store i8* %72, i8** %5, align 8
  br label %138

73:                                               ; preds = %51
  %74 = icmp eq i32 %56, 0
  br i1 %74, label %88, label %75

75:                                               ; preds = %73
  %76 = add nsw i32 %56, -1
  %77 = bitcast i8** %5 to i32**
  %78 = load i32*, i32** %77, align 8
  store i32 %76, i32* %78, align 1
  %79 = load i8*, i8** %5, align 8
  %80 = getelementptr inbounds i8, i8* %79, i64 4
  store i8* %80, i8** %5, align 8
  %81 = ptrtoint i8* %80 to i64
  %82 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %83 = bitcast i8** %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = sub i64 %81, %84
  %86 = trunc i64 %85 to i32
  %87 = add i32 %86, -3
  store i32 %87, i32* %55, align 4
  br label %138

88:                                               ; preds = %73
  %89 = bitcast i8** %5 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %92 = bitcast i8** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = sub i64 %90, %93
  %95 = trunc i64 %94 to i32
  %96 = inttoptr i64 %90 to i32*
  store i32 %95, i32* %96, align 1
  %97 = load i8*, i8** %5, align 8
  %98 = getelementptr inbounds i8, i8* %97, i64 4
  store i8* %98, i8** %5, align 8
  %99 = add nsw i32 %95, 1
  store i32 %99, i32* %55, align 4
  br label %138

100:                                              ; preds = %100, %49
  %101 = phi i64 [ 2, %49 ], [ %122, %100 ]
  %102 = phi i64 [ %50, %49 ], [ %123, %100 ]
  %103 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %101
  %104 = load i8, i8* %103, align 1
  %105 = load i8*, i8** %5, align 8
  %106 = getelementptr inbounds i8, i8* %105, i64 1
  store i8* %106, i8** %5, align 8
  store i8 %104, i8* %105, align 1
  %107 = or i64 %101, 1
  %108 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = load i8*, i8** %5, align 8
  %111 = getelementptr inbounds i8, i8* %110, i64 1
  store i8* %111, i8** %5, align 8
  store i8 %109, i8* %110, align 1
  %112 = add nuw nsw i64 %101, 2
  %113 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = load i8*, i8** %5, align 8
  %116 = getelementptr inbounds i8, i8* %115, i64 1
  store i8* %116, i8** %5, align 8
  store i8 %114, i8* %115, align 1
  %117 = add nuw nsw i64 %101, 3
  %118 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = load i8*, i8** %5, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 1
  store i8* %121, i8** %5, align 8
  store i8 %119, i8* %120, align 1
  %122 = add nuw nsw i64 %101, 4
  %123 = add i64 %102, -4
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %100

125:                                              ; preds = %100, %44
  %126 = phi i64 [ 2, %44 ], [ %122, %100 ]
  %127 = icmp eq i64 %47, 0
  br i1 %127, label %138, label %128

128:                                              ; preds = %125, %128
  %129 = phi i64 [ %135, %128 ], [ %126, %125 ]
  %130 = phi i64 [ %136, %128 ], [ %47, %125 ]
  %131 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %129
  %132 = load i8, i8* %131, align 1
  %133 = load i8*, i8** %5, align 8
  %134 = getelementptr inbounds i8, i8* %133, i64 1
  store i8* %134, i8** %5, align 8
  store i8 %132, i8* %133, align 1
  %135 = add nuw nsw i64 %129, 1
  %136 = add i64 %130, -1
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %128, !llvm.loop !55

138:                                              ; preds = %125, %128, %39, %36, %58, %75, %88
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %22)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4fabsEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -39, i8* %11, align 1
  %13 = load i8*, i8** %2, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %2, align 8
  store i8 -31, i8* %13, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4fchsEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -39, i8* %11, align 1
  %13 = load i8*, i8** %2, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %2, align 8
  store i8 -32, i8* %13, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4fcosEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -39, i8* %11, align 1
  %13 = load i8*, i8** %2, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %2, align 8
  store i8 -1, i8* %13, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4fsinEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -39, i8* %11, align 1
  %13 = load i8*, i8** %2, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %2, align 8
  store i8 -2, i8* %13, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5fptanEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -39, i8* %11, align 1
  %13 = load i8*, i8** %2, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %2, align 8
  store i8 -14, i8* %13, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5fyl2xEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -39, i8* %11, align 1
  %13 = load i8*, i8** %2, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %2, align 8
  store i8 -15, i8* %13, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5f2xm1Ev(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -39, i8* %11, align 1
  %13 = load i8*, i8** %2, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %2, align 8
  store i8 -16, i8* %13, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6fscaleEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -39, i8* %11, align 1
  %13 = load i8*, i8** %2, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %2, align 8
  store i8 -3, i8* %13, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6fninitEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -37, i8* %11, align 1
  %13 = load i8*, i8** %2, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %2, align 8
  store i8 -29, i8* %13, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4faddEi(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %11, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %10 = load i8*, i8** %3, align 8
  br label %11

11:                                               ; preds = %2, %9
  %12 = phi i8* [ %4, %2 ], [ %10, %9 ]
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  store i8* %13, i8** %3, align 8
  store i8 -36, i8* %12, align 1
  %14 = trunc i32 %1 to i8
  %15 = add i8 %14, -64
  %16 = load i8*, i8** %3, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %17, i8** %3, align 8
  store i8 %15, i8* %16, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4fsubEi(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %11, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %10 = load i8*, i8** %3, align 8
  br label %11

11:                                               ; preds = %2, %9
  %12 = phi i8* [ %4, %2 ], [ %10, %9 ]
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  store i8* %13, i8** %3, align 8
  store i8 -36, i8* %12, align 1
  %14 = trunc i32 %1 to i8
  %15 = add i8 %14, -24
  %16 = load i8*, i8** %3, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %17, i8** %3, align 8
  store i8 %15, i8* %16, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7fisub_sENS0_7OperandE(%"class.v8::internal::Assembler"*, i64, i32) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::Operand", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %3, %11
  %13 = trunc i64 %1 to i8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %12
  %16 = or i8 %13, 64
  %17 = load i8*, i8** %5, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %5, align 8
  store i8 %16, i8* %17, align 1
  br label %19

19:                                               ; preds = %12, %15
  %20 = load i8*, i8** %5, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 1
  store i8* %21, i8** %5, align 8
  store i8 -38, i8* %20, align 1
  %22 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %22)
  %23 = bitcast %"class.v8::internal::Operand"* %4 to i64*
  store i64 %1, i64* %23, align 8
  %24 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 7
  %25 = bitcast i8* %24 to i32*
  store i32 %2, i32* %25, align 1
  %26 = lshr i32 %2, 16
  %27 = and i32 %26, 255
  %28 = lshr i64 %1, 8
  %29 = trunc i64 %28 to i8
  %30 = or i8 %29, 32
  %31 = load i8*, i8** %5, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %32, i8** %5, align 8
  store i8 %30, i8* %31, align 1
  %33 = icmp eq i8 %29, 5
  %34 = lshr i64 %1, 16
  %35 = trunc i64 %34 to i8
  br i1 %33, label %51, label %36

36:                                               ; preds = %19
  %37 = trunc i32 %26 to i8
  %38 = icmp ugt i8 %37, 1
  br i1 %38, label %39, label %138

39:                                               ; preds = %36
  %40 = zext i32 %27 to i64
  %41 = load i8*, i8** %5, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %42, i8** %5, align 8
  store i8 %35, i8* %41, align 1
  %43 = icmp eq i32 %27, 2
  br i1 %43, label %138, label %44

44:                                               ; preds = %39
  %45 = add nsw i64 %40, -2
  %46 = add nsw i64 %40, -3
  %47 = and i64 %45, 3
  %48 = icmp ult i64 %46, 3
  br i1 %48, label %125, label %49

49:                                               ; preds = %44
  %50 = sub nsw i64 %45, %47
  br label %100

51:                                               ; preds = %19
  %52 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 1
  %53 = bitcast i8* %52 to %"class.v8::internal::Label"**
  %54 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %53, align 1
  %55 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %54, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = icmp slt i32 %56, 0
  br i1 %57, label %58, label %73

58:                                               ; preds = %51
  %59 = bitcast i8** %5 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %62 = bitcast i8** %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = sub i64 %60, %63
  %65 = trunc i64 %64 to i32
  %66 = ashr i32 %2, 24
  %67 = add nsw i32 %66, -5
  %68 = sub i32 %67, %56
  %69 = sub i32 %68, %65
  %70 = inttoptr i64 %60 to i32*
  store i32 %69, i32* %70, align 1
  %71 = load i8*, i8** %5, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 4
  store i8* %72, i8** %5, align 8
  br label %138

73:                                               ; preds = %51
  %74 = icmp eq i32 %56, 0
  br i1 %74, label %88, label %75

75:                                               ; preds = %73
  %76 = add nsw i32 %56, -1
  %77 = bitcast i8** %5 to i32**
  %78 = load i32*, i32** %77, align 8
  store i32 %76, i32* %78, align 1
  %79 = load i8*, i8** %5, align 8
  %80 = getelementptr inbounds i8, i8* %79, i64 4
  store i8* %80, i8** %5, align 8
  %81 = ptrtoint i8* %80 to i64
  %82 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %83 = bitcast i8** %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = sub i64 %81, %84
  %86 = trunc i64 %85 to i32
  %87 = add i32 %86, -3
  store i32 %87, i32* %55, align 4
  br label %138

88:                                               ; preds = %73
  %89 = bitcast i8** %5 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %92 = bitcast i8** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = sub i64 %90, %93
  %95 = trunc i64 %94 to i32
  %96 = inttoptr i64 %90 to i32*
  store i32 %95, i32* %96, align 1
  %97 = load i8*, i8** %5, align 8
  %98 = getelementptr inbounds i8, i8* %97, i64 4
  store i8* %98, i8** %5, align 8
  %99 = add nsw i32 %95, 1
  store i32 %99, i32* %55, align 4
  br label %138

100:                                              ; preds = %100, %49
  %101 = phi i64 [ 2, %49 ], [ %122, %100 ]
  %102 = phi i64 [ %50, %49 ], [ %123, %100 ]
  %103 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %101
  %104 = load i8, i8* %103, align 1
  %105 = load i8*, i8** %5, align 8
  %106 = getelementptr inbounds i8, i8* %105, i64 1
  store i8* %106, i8** %5, align 8
  store i8 %104, i8* %105, align 1
  %107 = or i64 %101, 1
  %108 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = load i8*, i8** %5, align 8
  %111 = getelementptr inbounds i8, i8* %110, i64 1
  store i8* %111, i8** %5, align 8
  store i8 %109, i8* %110, align 1
  %112 = add nuw nsw i64 %101, 2
  %113 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = load i8*, i8** %5, align 8
  %116 = getelementptr inbounds i8, i8* %115, i64 1
  store i8* %116, i8** %5, align 8
  store i8 %114, i8* %115, align 1
  %117 = add nuw nsw i64 %101, 3
  %118 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = load i8*, i8** %5, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 1
  store i8* %121, i8** %5, align 8
  store i8 %119, i8* %120, align 1
  %122 = add nuw nsw i64 %101, 4
  %123 = add i64 %102, -4
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %100

125:                                              ; preds = %100, %44
  %126 = phi i64 [ 2, %44 ], [ %122, %100 ]
  %127 = icmp eq i64 %47, 0
  br i1 %127, label %138, label %128

128:                                              ; preds = %125, %128
  %129 = phi i64 [ %135, %128 ], [ %126, %125 ]
  %130 = phi i64 [ %136, %128 ], [ %47, %125 ]
  %131 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %4, i64 0, i32 0, i32 1, i64 %129
  %132 = load i8, i8* %131, align 1
  %133 = load i8*, i8** %5, align 8
  %134 = getelementptr inbounds i8, i8* %133, i64 1
  store i8* %134, i8** %5, align 8
  store i8 %132, i8* %133, align 1
  %135 = add nuw nsw i64 %129, 1
  %136 = add i64 %130, -1
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %128, !llvm.loop !56

138:                                              ; preds = %125, %128, %39, %36, %58, %75, %88
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %22)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4fmulEi(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %11, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %10 = load i8*, i8** %3, align 8
  br label %11

11:                                               ; preds = %2, %9
  %12 = phi i8* [ %4, %2 ], [ %10, %9 ]
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  store i8* %13, i8** %3, align 8
  store i8 -36, i8* %12, align 1
  %14 = trunc i32 %1 to i8
  %15 = add i8 %14, -56
  %16 = load i8*, i8** %3, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %17, i8** %3, align 8
  store i8 %15, i8* %16, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4fdivEi(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %11, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %10 = load i8*, i8** %3, align 8
  br label %11

11:                                               ; preds = %2, %9
  %12 = phi i8* [ %4, %2 ], [ %10, %9 ]
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  store i8* %13, i8** %3, align 8
  store i8 -36, i8* %12, align 1
  %14 = trunc i32 %1 to i8
  %15 = add i8 %14, -8
  %16 = load i8*, i8** %3, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %17, i8** %3, align 8
  store i8 %15, i8* %16, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5faddpEi(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %11, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %10 = load i8*, i8** %3, align 8
  br label %11

11:                                               ; preds = %2, %9
  %12 = phi i8* [ %4, %2 ], [ %10, %9 ]
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  store i8* %13, i8** %3, align 8
  store i8 -34, i8* %12, align 1
  %14 = trunc i32 %1 to i8
  %15 = add i8 %14, -64
  %16 = load i8*, i8** %3, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %17, i8** %3, align 8
  store i8 %15, i8* %16, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5fsubpEi(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %11, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %10 = load i8*, i8** %3, align 8
  br label %11

11:                                               ; preds = %2, %9
  %12 = phi i8* [ %4, %2 ], [ %10, %9 ]
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  store i8* %13, i8** %3, align 8
  store i8 -34, i8* %12, align 1
  %14 = trunc i32 %1 to i8
  %15 = add i8 %14, -24
  %16 = load i8*, i8** %3, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %17, i8** %3, align 8
  store i8 %15, i8* %16, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6fsubrpEi(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %11, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %10 = load i8*, i8** %3, align 8
  br label %11

11:                                               ; preds = %2, %9
  %12 = phi i8* [ %4, %2 ], [ %10, %9 ]
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  store i8* %13, i8** %3, align 8
  store i8 -34, i8* %12, align 1
  %14 = trunc i32 %1 to i8
  %15 = add i8 %14, -32
  %16 = load i8*, i8** %3, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %17, i8** %3, align 8
  store i8 %15, i8* %16, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5fmulpEi(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %11, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %10 = load i8*, i8** %3, align 8
  br label %11

11:                                               ; preds = %2, %9
  %12 = phi i8* [ %4, %2 ], [ %10, %9 ]
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  store i8* %13, i8** %3, align 8
  store i8 -34, i8* %12, align 1
  %14 = trunc i32 %1 to i8
  %15 = add i8 %14, -56
  %16 = load i8*, i8** %3, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %17, i8** %3, align 8
  store i8 %15, i8* %16, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5fdivpEi(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %11, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %10 = load i8*, i8** %3, align 8
  br label %11

11:                                               ; preds = %2, %9
  %12 = phi i8* [ %4, %2 ], [ %10, %9 ]
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  store i8* %13, i8** %3, align 8
  store i8 -34, i8* %12, align 1
  %14 = trunc i32 %1 to i8
  %15 = add i8 %14, -8
  %16 = load i8*, i8** %3, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %17, i8** %3, align 8
  store i8 %15, i8* %16, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5fpremEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -39, i8* %11, align 1
  %13 = load i8*, i8** %2, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %2, align 8
  store i8 -8, i8* %13, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6fprem1Ev(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -39, i8* %11, align 1
  %13 = load i8*, i8** %2, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %2, align 8
  store i8 -11, i8* %13, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4fxchEi(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %11, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %10 = load i8*, i8** %3, align 8
  br label %11

11:                                               ; preds = %2, %9
  %12 = phi i8* [ %4, %2 ], [ %10, %9 ]
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  store i8* %13, i8** %3, align 8
  store i8 -39, i8* %12, align 1
  %14 = trunc i32 %1 to i8
  %15 = add i8 %14, -56
  %16 = load i8*, i8** %3, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %17, i8** %3, align 8
  store i8 %15, i8* %16, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7fincstpEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -39, i8* %11, align 1
  %13 = load i8*, i8** %2, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %2, align 8
  store i8 -9, i8* %13, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5ffreeEi(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %11, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %10 = load i8*, i8** %3, align 8
  br label %11

11:                                               ; preds = %2, %9
  %12 = phi i8* [ %4, %2 ], [ %10, %9 ]
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  store i8* %13, i8** %3, align 8
  store i8 -35, i8* %12, align 1
  %14 = trunc i32 %1 to i8
  %15 = add i8 %14, -64
  %16 = load i8*, i8** %3, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %17, i8** %3, align 8
  store i8 %15, i8* %16, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4ftstEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -39, i8* %11, align 1
  %13 = load i8*, i8** %2, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %2, align 8
  store i8 -28, i8* %13, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6fucompEi(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %11, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %10 = load i8*, i8** %3, align 8
  br label %11

11:                                               ; preds = %2, %9
  %12 = phi i8* [ %4, %2 ], [ %10, %9 ]
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  store i8* %13, i8** %3, align 8
  store i8 -35, i8* %12, align 1
  %14 = trunc i32 %1 to i8
  %15 = add i8 %14, -24
  %16 = load i8*, i8** %3, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %17, i8** %3, align 8
  store i8 %15, i8* %16, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7fucomppEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -38, i8* %11, align 1
  %13 = load i8*, i8** %2, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %2, align 8
  store i8 -23, i8* %13, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6fucomiEi(%"class.v8::internal::Assembler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %11, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %10 = load i8*, i8** %3, align 8
  br label %11

11:                                               ; preds = %2, %9
  %12 = phi i8* [ %4, %2 ], [ %10, %9 ]
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  store i8* %13, i8** %3, align 8
  store i8 -37, i8* %12, align 1
  %14 = trunc i32 %1 to i8
  %15 = add i8 %14, -24
  %16 = load i8*, i8** %3, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %17, i8** %3, align 8
  store i8 %15, i8* %16, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7fucomipEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -33, i8* %11, align 1
  %13 = load i8*, i8** %2, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %2, align 8
  store i8 -23, i8* %13, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6fcomppEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -34, i8* %11, align 1
  %13 = load i8*, i8** %2, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %2, align 8
  store i8 -39, i8* %13, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9fnstsw_axEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -33, i8* %11, align 1
  %13 = load i8*, i8** %2, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %2, align 8
  store i8 -32, i8* %13, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5fwaitEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -101, i8* %11, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7frndintEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -39, i8* %11, align 1
  %13 = load i8*, i8** %2, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %2, align 8
  store i8 -4, i8* %13, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6fnclexEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -37, i8* %11, align 1
  %13 = load i8*, i8** %2, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %2, align 8
  store i8 -30, i8* %13, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4sahfEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 -32
  %7 = icmp ult i8* %3, %6
  br i1 %7, label %10, label %8, !prof !11

8:                                                ; preds = %1
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %9 = load i8*, i8** %2, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i8* [ %3, %1 ], [ %9, %8 ]
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %2, align 8
  store i8 -98, i8* %11, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4movdENS0_11XMMRegisterENS0_8RegisterE(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 102, i8* %13, align 1
  %15 = lshr i32 %1, 1
  %16 = and i32 %15, 4
  %17 = lshr i32 %2, 3
  %18 = and i32 %17, 1
  %19 = or i32 %18, %16
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %26, label %21

21:                                               ; preds = %12
  %22 = trunc i32 %19 to i8
  %23 = or i8 %22, 64
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %12, %21
  %27 = load i8*, i8** %4, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %4, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %4, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %4, align 8
  store i8 110, i8* %29, align 1
  %31 = shl i32 %1, 3
  %32 = and i32 %2, 7
  %33 = or i32 %32, %31
  %34 = trunc i32 %33 to i8
  %35 = or i8 %34, -64
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %4, align 8
  store i8 %35, i8* %36, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler16emit_sse_operandENS0_11XMMRegisterENS0_8RegisterE(%"class.v8::internal::Assembler"* nocapture, i32, i32) local_unnamed_addr #9 align 2 {
  %4 = shl i32 %1, 3
  %5 = and i32 %2, 7
  %6 = or i32 %5, %4
  %7 = trunc i32 %6 to i8
  %8 = or i8 %7, -64
  %9 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 1
  store i8* %11, i8** %9, align 8
  store i8 %8, i8* %10, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4movdENS0_11XMMRegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 102, i8* %14, align 1
  %16 = trunc i64 %2 to i8
  %17 = lshr i32 %1, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 4
  %20 = or i8 %19, %16
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %13
  %23 = or i8 %20, 64
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %13, %22
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %5, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %5, align 8
  store i8 110, i8* %29, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler16emit_sse_operandENS0_11XMMRegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4movdENS0_8RegisterENS0_11XMMRegisterE(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 102, i8* %13, align 1
  %15 = lshr i32 %2, 1
  %16 = and i32 %15, 4
  %17 = lshr i32 %1, 3
  %18 = and i32 %17, 1
  %19 = or i32 %16, %18
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %26, label %21

21:                                               ; preds = %12
  %22 = trunc i32 %19 to i8
  %23 = or i8 %22, 64
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %12, %21
  %27 = load i8*, i8** %4, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %4, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %4, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %4, align 8
  store i8 126, i8* %29, align 1
  %31 = shl i32 %2, 3
  %32 = and i32 %1, 7
  %33 = or i32 %31, %32
  %34 = trunc i32 %33 to i8
  %35 = or i8 %34, -64
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %4, align 8
  store i8 %35, i8* %36, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4movqENS0_11XMMRegisterENS0_8RegisterE(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 102, i8* %13, align 1
  %15 = lshr i32 %1, 1
  %16 = and i32 %15, 4
  %17 = lshr i32 %2, 3
  %18 = or i32 %16, %17
  %19 = trunc i32 %18 to i8
  %20 = or i8 %19, 72
  %21 = load i8*, i8** %4, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %4, align 8
  store i8 %20, i8* %21, align 1
  %23 = load i8*, i8** %4, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %4, align 8
  store i8 15, i8* %23, align 1
  %25 = load i8*, i8** %4, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %4, align 8
  store i8 110, i8* %25, align 1
  %27 = shl i32 %1, 3
  %28 = and i32 %2, 7
  %29 = or i32 %28, %27
  %30 = trunc i32 %29 to i8
  %31 = or i8 %30, -64
  %32 = load i8*, i8** %4, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %4, align 8
  store i8 %31, i8* %32, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4movqENS0_11XMMRegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 102, i8* %14, align 1
  %16 = trunc i64 %2 to i8
  %17 = lshr i32 %1, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 4
  %20 = or i8 %19, %16
  %21 = or i8 %20, 72
  %22 = load i8*, i8** %5, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %5, align 8
  store i8 %21, i8* %22, align 1
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 15, i8* %24, align 1
  %26 = load i8*, i8** %5, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %5, align 8
  store i8 110, i8* %26, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4movqENS0_8RegisterENS0_11XMMRegisterE(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 102, i8* %13, align 1
  %15 = lshr i32 %2, 1
  %16 = and i32 %15, 4
  %17 = lshr i32 %1, 3
  %18 = or i32 %16, %17
  %19 = trunc i32 %18 to i8
  %20 = or i8 %19, 72
  %21 = load i8*, i8** %4, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %4, align 8
  store i8 %20, i8* %21, align 1
  %23 = load i8*, i8** %4, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %4, align 8
  store i8 15, i8* %23, align 1
  %25 = load i8*, i8** %4, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %4, align 8
  store i8 126, i8* %25, align 1
  %27 = shl i32 %2, 3
  %28 = and i32 %1, 7
  %29 = or i32 %27, %28
  %30 = trunc i32 %29 to i8
  %31 = or i8 %30, -64
  %32 = load i8*, i8** %4, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %4, align 8
  store i8 %31, i8* %32, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler4movqENS0_11XMMRegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = and i32 %1, 7
  %15 = icmp eq i32 %14, 4
  %16 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %16, i8** %4, align 8
  br i1 %15, label %17, label %41

17:                                               ; preds = %12
  store i8 -13, i8* %13, align 1
  %18 = lshr i32 %1, 1
  %19 = and i32 %18, 4
  %20 = lshr i32 %2, 3
  %21 = and i32 %20, 1
  %22 = or i32 %21, %19
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %29, label %24

24:                                               ; preds = %17
  %25 = trunc i32 %22 to i8
  %26 = or i8 %25, 64
  %27 = load i8*, i8** %4, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %4, align 8
  store i8 %26, i8* %27, align 1
  br label %29

29:                                               ; preds = %17, %24
  %30 = load i8*, i8** %4, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %4, align 8
  store i8 15, i8* %30, align 1
  %32 = load i8*, i8** %4, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %4, align 8
  store i8 126, i8* %32, align 1
  %34 = shl i32 %1, 3
  %35 = and i32 %2, 7
  %36 = or i32 %35, %34
  %37 = trunc i32 %36 to i8
  %38 = or i8 %37, -64
  %39 = load i8*, i8** %4, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  store i8* %40, i8** %4, align 8
  store i8 %38, i8* %39, align 1
  br label %64

41:                                               ; preds = %12
  store i8 102, i8* %13, align 1
  %42 = lshr i32 %2, 1
  %43 = and i32 %42, 4
  %44 = lshr i32 %1, 3
  %45 = and i32 %44, 1
  %46 = or i32 %43, %45
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %41
  %49 = trunc i32 %46 to i8
  %50 = or i8 %49, 64
  %51 = load i8*, i8** %4, align 8
  %52 = getelementptr inbounds i8, i8* %51, i64 1
  store i8* %52, i8** %4, align 8
  store i8 %50, i8* %51, align 1
  br label %53

53:                                               ; preds = %41, %48
  %54 = load i8*, i8** %4, align 8
  %55 = getelementptr inbounds i8, i8* %54, i64 1
  store i8* %55, i8** %4, align 8
  store i8 15, i8* %54, align 1
  %56 = load i8*, i8** %4, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 1
  store i8* %57, i8** %4, align 8
  store i8 -42, i8* %56, align 1
  %58 = shl i32 %2, 3
  %59 = or i32 %58, %14
  %60 = trunc i32 %59 to i8
  %61 = or i8 %60, -64
  %62 = load i8*, i8** %4, align 8
  %63 = getelementptr inbounds i8, i8* %62, i64 1
  store i8* %63, i8** %4, align 8
  store i8 %61, i8* %62, align 1
  br label %64

64:                                               ; preds = %53, %29
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler16emit_sse_operandENS0_11XMMRegisterES2_(%"class.v8::internal::Assembler"* nocapture, i32, i32) local_unnamed_addr #9 align 2 {
  %4 = shl i32 %1, 3
  %5 = and i32 %2, 7
  %6 = or i32 %5, %4
  %7 = trunc i32 %6 to i8
  %8 = or i8 %7, -64
  %9 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 1
  store i8* %11, i8** %9, align 8
  store i8 %8, i8* %10, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6movdqaENS0_7OperandENS0_11XMMRegisterE(%"class.v8::internal::Assembler"*, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 102, i8* %14, align 1
  %16 = trunc i64 %1 to i8
  %17 = lshr i32 %3, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 4
  %20 = or i8 %19, %16
  %21 = or i8 %20, 72
  %22 = load i8*, i8** %5, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %5, align 8
  store i8 %21, i8* %22, align 1
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 15, i8* %24, align 1
  %26 = load i8*, i8** %5, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %5, align 8
  store i8 127, i8* %26, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %3, i64 %1, i32 %2) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6movdqaENS0_11XMMRegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 102, i8* %14, align 1
  %16 = trunc i64 %2 to i8
  %17 = lshr i32 %1, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 4
  %20 = or i8 %19, %16
  %21 = or i8 %20, 72
  %22 = load i8*, i8** %5, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %5, align 8
  store i8 %21, i8* %22, align 1
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 15, i8* %24, align 1
  %26 = load i8*, i8** %5, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %5, align 8
  store i8 111, i8* %26, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6movdqaENS0_11XMMRegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 102, i8* %13, align 1
  %15 = lshr i32 %2, 1
  %16 = and i32 %15, 4
  %17 = lshr i32 %1, 3
  %18 = or i32 %16, %17
  %19 = trunc i32 %18 to i8
  %20 = or i8 %19, 72
  %21 = load i8*, i8** %4, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %4, align 8
  store i8 %20, i8* %21, align 1
  %23 = load i8*, i8** %4, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %4, align 8
  store i8 15, i8* %23, align 1
  %25 = load i8*, i8** %4, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %4, align 8
  store i8 127, i8* %25, align 1
  %27 = shl i32 %2, 3
  %28 = and i32 %1, 7
  %29 = or i32 %27, %28
  %30 = trunc i32 %29 to i8
  %31 = or i8 %30, -64
  %32 = load i8*, i8** %4, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %4, align 8
  store i8 %31, i8* %32, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6movdquENS0_7OperandENS0_11XMMRegisterE(%"class.v8::internal::Assembler"*, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -13, i8* %14, align 1
  %16 = trunc i64 %1 to i8
  %17 = lshr i32 %3, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 4
  %20 = or i8 %19, %16
  %21 = or i8 %20, 72
  %22 = load i8*, i8** %5, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %5, align 8
  store i8 %21, i8* %22, align 1
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 15, i8* %24, align 1
  %26 = load i8*, i8** %5, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %5, align 8
  store i8 127, i8* %26, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %3, i64 %1, i32 %2) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6movdquENS0_11XMMRegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -13, i8* %14, align 1
  %16 = trunc i64 %2 to i8
  %17 = lshr i32 %1, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 4
  %20 = or i8 %19, %16
  %21 = or i8 %20, 72
  %22 = load i8*, i8** %5, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %5, align 8
  store i8 %21, i8* %22, align 1
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 15, i8* %24, align 1
  %26 = load i8*, i8** %5, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %5, align 8
  store i8 111, i8* %26, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6movdquENS0_11XMMRegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 -13, i8* %13, align 1
  %15 = lshr i32 %1, 1
  %16 = and i32 %15, 4
  %17 = lshr i32 %2, 3
  %18 = or i32 %16, %17
  %19 = trunc i32 %18 to i8
  %20 = or i8 %19, 72
  %21 = load i8*, i8** %4, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %4, align 8
  store i8 %20, i8* %21, align 1
  %23 = load i8*, i8** %4, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %4, align 8
  store i8 15, i8* %23, align 1
  %25 = load i8*, i8** %4, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %4, align 8
  store i8 111, i8* %25, align 1
  %27 = shl i32 %1, 3
  %28 = and i32 %2, 7
  %29 = or i32 %28, %27
  %30 = trunc i32 %29 to i8
  %31 = or i8 %30, -64
  %32 = load i8*, i8** %4, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %4, align 8
  store i8 %31, i8* %32, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6pinsrwENS0_11XMMRegisterENS0_8RegisterEh(%"class.v8::internal::Assembler"*, i32, i32, i8 zeroext) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 102, i8* %14, align 1
  %16 = lshr i32 %1, 1
  %17 = and i32 %16, 4
  %18 = lshr i32 %2, 3
  %19 = and i32 %18, 1
  %20 = or i32 %19, %17
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %13
  %23 = trunc i32 %20 to i8
  %24 = or i8 %23, 64
  %25 = load i8*, i8** %5, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %5, align 8
  store i8 %24, i8* %25, align 1
  br label %27

27:                                               ; preds = %13, %22
  %28 = load i8*, i8** %5, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %5, align 8
  store i8 15, i8* %28, align 1
  %30 = load i8*, i8** %5, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %5, align 8
  store i8 -60, i8* %30, align 1
  %32 = shl i32 %1, 3
  %33 = and i32 %2, 7
  %34 = or i32 %33, %32
  %35 = trunc i32 %34 to i8
  %36 = or i8 %35, -64
  %37 = load i8*, i8** %5, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  store i8* %38, i8** %5, align 8
  store i8 %36, i8* %37, align 1
  %39 = load i8*, i8** %5, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  store i8* %40, i8** %5, align 8
  store i8 %3, i8* %39, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6pinsrwENS0_11XMMRegisterENS0_7OperandEh(%"class.v8::internal::Assembler"*, i32, i64, i32, i8 zeroext) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %14, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %13 = load i8*, i8** %6, align 8
  br label %14

14:                                               ; preds = %5, %12
  %15 = phi i8* [ %7, %5 ], [ %13, %12 ]
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %16, i8** %6, align 8
  store i8 102, i8* %15, align 1
  %17 = trunc i64 %2 to i8
  %18 = lshr i32 %1, 1
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 4
  %21 = or i8 %20, %17
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %27, label %23

23:                                               ; preds = %14
  %24 = or i8 %21, 64
  %25 = load i8*, i8** %6, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %6, align 8
  store i8 %24, i8* %25, align 1
  br label %27

27:                                               ; preds = %14, %23
  %28 = load i8*, i8** %6, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %6, align 8
  store i8 15, i8* %28, align 1
  %30 = load i8*, i8** %6, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %6, align 8
  store i8 -60, i8* %30, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  %32 = load i8*, i8** %6, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %6, align 8
  store i8 %4, i8* %32, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6pextrqENS0_8RegisterENS0_11XMMRegisterEa(%"class.v8::internal::Assembler"*, i32, i32, i8 signext) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 102, i8* %14, align 1
  %16 = lshr i32 %2, 1
  %17 = and i32 %16, 4
  %18 = lshr i32 %1, 3
  %19 = or i32 %17, %18
  %20 = trunc i32 %19 to i8
  %21 = or i8 %20, 72
  %22 = load i8*, i8** %5, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %5, align 8
  store i8 %21, i8* %22, align 1
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 15, i8* %24, align 1
  %26 = load i8*, i8** %5, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %5, align 8
  store i8 58, i8* %26, align 1
  %28 = load i8*, i8** %5, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %5, align 8
  store i8 22, i8* %28, align 1
  %30 = shl i32 %2, 3
  %31 = and i32 %1, 7
  %32 = or i32 %30, %31
  %33 = trunc i32 %32 to i8
  %34 = or i8 %33, -64
  %35 = load i8*, i8** %5, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 1
  store i8* %36, i8** %5, align 8
  store i8 %34, i8* %35, align 1
  %37 = load i8*, i8** %5, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  store i8* %38, i8** %5, align 8
  store i8 %3, i8* %37, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6pinsrqENS0_11XMMRegisterENS0_8RegisterEh(%"class.v8::internal::Assembler"*, i32, i32, i8 zeroext) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 102, i8* %14, align 1
  %16 = lshr i32 %1, 1
  %17 = and i32 %16, 4
  %18 = lshr i32 %2, 3
  %19 = or i32 %17, %18
  %20 = trunc i32 %19 to i8
  %21 = or i8 %20, 72
  %22 = load i8*, i8** %5, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %5, align 8
  store i8 %21, i8* %22, align 1
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 15, i8* %24, align 1
  %26 = load i8*, i8** %5, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %5, align 8
  store i8 58, i8* %26, align 1
  %28 = load i8*, i8** %5, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %5, align 8
  store i8 34, i8* %28, align 1
  %30 = shl i32 %1, 3
  %31 = and i32 %2, 7
  %32 = or i32 %31, %30
  %33 = trunc i32 %32 to i8
  %34 = or i8 %33, -64
  %35 = load i8*, i8** %5, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 1
  store i8* %36, i8** %5, align 8
  store i8 %34, i8* %35, align 1
  %37 = load i8*, i8** %5, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  store i8* %38, i8** %5, align 8
  store i8 %3, i8* %37, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6pinsrqENS0_11XMMRegisterENS0_7OperandEh(%"class.v8::internal::Assembler"*, i32, i64, i32, i8 zeroext) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %14, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %13 = load i8*, i8** %6, align 8
  br label %14

14:                                               ; preds = %5, %12
  %15 = phi i8* [ %7, %5 ], [ %13, %12 ]
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %16, i8** %6, align 8
  store i8 102, i8* %15, align 1
  %17 = trunc i64 %2 to i8
  %18 = lshr i32 %1, 1
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 4
  %21 = or i8 %20, %17
  %22 = or i8 %21, 72
  %23 = load i8*, i8** %6, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %6, align 8
  store i8 %22, i8* %23, align 1
  %25 = load i8*, i8** %6, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %6, align 8
  store i8 15, i8* %25, align 1
  %27 = load i8*, i8** %6, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %6, align 8
  store i8 58, i8* %27, align 1
  %29 = load i8*, i8** %6, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %6, align 8
  store i8 34, i8* %29, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  %31 = load i8*, i8** %6, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %32, i8** %6, align 8
  store i8 %4, i8* %31, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6pinsrdENS0_11XMMRegisterENS0_8RegisterEh(%"class.v8::internal::Assembler"* nocapture, i32, i32, i8 zeroext) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %11, %4
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 102, i8* %14, align 1
  %16 = lshr i32 %1, 1
  %17 = and i32 %16, 4
  %18 = lshr i32 %2, 3
  %19 = and i32 %18, 1
  %20 = or i32 %19, %17
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %13
  %23 = trunc i32 %20 to i8
  %24 = or i8 %23, 64
  %25 = load i8*, i8** %5, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %5, align 8
  store i8 %24, i8* %25, align 1
  br label %27

27:                                               ; preds = %13, %22
  %28 = load i8*, i8** %5, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %5, align 8
  store i8 15, i8* %28, align 1
  %30 = load i8*, i8** %5, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %5, align 8
  store i8 58, i8* %30, align 1
  %32 = load i8*, i8** %5, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %5, align 8
  store i8 34, i8* %32, align 1
  %34 = shl i32 %1, 3
  %35 = and i32 %2, 7
  %36 = or i32 %35, %34
  %37 = trunc i32 %36 to i8
  %38 = or i8 %37, -64
  %39 = load i8*, i8** %5, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  store i8* %40, i8** %5, align 8
  store i8 %38, i8* %39, align 1
  %41 = load i8*, i8** %5, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %42, i8** %5, align 8
  store i8 %3, i8* %41, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler10sse4_instrENS0_11XMMRegisterENS0_8RegisterEhhhha(%"class.v8::internal::Assembler"*, i32, i32, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 signext) local_unnamed_addr #1 align 2 {
  %9 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 -32
  %14 = icmp ult i8* %10, %13
  br i1 %14, label %17, label %15, !prof !11

15:                                               ; preds = %8
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %16 = load i8*, i8** %9, align 8
  br label %17

17:                                               ; preds = %8, %15
  %18 = phi i8* [ %10, %8 ], [ %16, %15 ]
  %19 = getelementptr inbounds i8, i8* %18, i64 1
  store i8* %19, i8** %9, align 8
  store i8 %3, i8* %18, align 1
  %20 = lshr i32 %1, 1
  %21 = and i32 %20, 4
  %22 = lshr i32 %2, 3
  %23 = and i32 %22, 1
  %24 = or i32 %23, %21
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %17
  %27 = trunc i32 %24 to i8
  %28 = or i8 %27, 64
  %29 = load i8*, i8** %9, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %9, align 8
  store i8 %28, i8* %29, align 1
  br label %31

31:                                               ; preds = %17, %26
  %32 = load i8*, i8** %9, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %9, align 8
  store i8 %4, i8* %32, align 1
  %34 = load i8*, i8** %9, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %9, align 8
  store i8 %5, i8* %34, align 1
  %36 = load i8*, i8** %9, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %9, align 8
  store i8 %6, i8* %36, align 1
  %38 = shl i32 %1, 3
  %39 = and i32 %2, 7
  %40 = or i32 %39, %38
  %41 = trunc i32 %40 to i8
  %42 = or i8 %41, -64
  %43 = load i8*, i8** %9, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 1
  store i8* %44, i8** %9, align 8
  store i8 %42, i8* %43, align 1
  %45 = load i8*, i8** %9, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 1
  store i8* %46, i8** %9, align 8
  store i8 %7, i8* %45, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6pinsrdENS0_11XMMRegisterENS0_7OperandEh(%"class.v8::internal::Assembler"*, i32, i64, i32, i8 zeroext) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %14, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %13 = load i8*, i8** %6, align 8
  br label %14

14:                                               ; preds = %12, %5
  %15 = phi i8* [ %7, %5 ], [ %13, %12 ]
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %16, i8** %6, align 8
  store i8 102, i8* %15, align 1
  %17 = trunc i64 %2 to i8
  %18 = lshr i32 %1, 1
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 4
  %21 = or i8 %20, %17
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %27, label %23

23:                                               ; preds = %14
  %24 = or i8 %21, 64
  %25 = load i8*, i8** %6, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %6, align 8
  store i8 %24, i8* %25, align 1
  br label %27

27:                                               ; preds = %14, %23
  %28 = load i8*, i8** %6, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %6, align 8
  store i8 15, i8* %28, align 1
  %30 = load i8*, i8** %6, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %6, align 8
  store i8 58, i8* %30, align 1
  %32 = load i8*, i8** %6, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %6, align 8
  store i8 34, i8* %32, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  %34 = load i8*, i8** %6, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %6, align 8
  store i8 %4, i8* %34, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6pinsrbENS0_11XMMRegisterENS0_8RegisterEh(%"class.v8::internal::Assembler"* nocapture, i32, i32, i8 zeroext) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %11, %4
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 102, i8* %14, align 1
  %16 = lshr i32 %1, 1
  %17 = and i32 %16, 4
  %18 = lshr i32 %2, 3
  %19 = and i32 %18, 1
  %20 = or i32 %19, %17
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %13
  %23 = trunc i32 %20 to i8
  %24 = or i8 %23, 64
  %25 = load i8*, i8** %5, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %5, align 8
  store i8 %24, i8* %25, align 1
  br label %27

27:                                               ; preds = %13, %22
  %28 = load i8*, i8** %5, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %5, align 8
  store i8 15, i8* %28, align 1
  %30 = load i8*, i8** %5, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %5, align 8
  store i8 58, i8* %30, align 1
  %32 = load i8*, i8** %5, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %5, align 8
  store i8 32, i8* %32, align 1
  %34 = shl i32 %1, 3
  %35 = and i32 %2, 7
  %36 = or i32 %35, %34
  %37 = trunc i32 %36 to i8
  %38 = or i8 %37, -64
  %39 = load i8*, i8** %5, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  store i8* %40, i8** %5, align 8
  store i8 %38, i8* %39, align 1
  %41 = load i8*, i8** %5, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %42, i8** %5, align 8
  store i8 %3, i8* %41, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6pinsrbENS0_11XMMRegisterENS0_7OperandEh(%"class.v8::internal::Assembler"*, i32, i64, i32, i8 zeroext) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %14, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %13 = load i8*, i8** %6, align 8
  br label %14

14:                                               ; preds = %12, %5
  %15 = phi i8* [ %7, %5 ], [ %13, %12 ]
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %16, i8** %6, align 8
  store i8 102, i8* %15, align 1
  %17 = trunc i64 %2 to i8
  %18 = lshr i32 %1, 1
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 4
  %21 = or i8 %20, %17
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %27, label %23

23:                                               ; preds = %14
  %24 = or i8 %21, 64
  %25 = load i8*, i8** %6, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %6, align 8
  store i8 %24, i8* %25, align 1
  br label %27

27:                                               ; preds = %14, %23
  %28 = load i8*, i8** %6, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %6, align 8
  store i8 15, i8* %28, align 1
  %30 = load i8*, i8** %6, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %6, align 8
  store i8 58, i8* %30, align 1
  %32 = load i8*, i8** %6, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %6, align 8
  store i8 32, i8* %32, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  %34 = load i8*, i8** %6, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %6, align 8
  store i8 %4, i8* %34, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8insertpsENS0_11XMMRegisterES2_h(%"class.v8::internal::Assembler"* nocapture, i32, i32, i8 zeroext) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %11, %4
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 102, i8* %14, align 1
  %16 = lshr i32 %1, 1
  %17 = and i32 %16, 4
  %18 = lshr i32 %2, 3
  %19 = and i32 %18, 1
  %20 = or i32 %19, %17
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %13
  %23 = trunc i32 %20 to i8
  %24 = or i8 %23, 64
  %25 = load i8*, i8** %5, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %5, align 8
  store i8 %24, i8* %25, align 1
  br label %27

27:                                               ; preds = %13, %22
  %28 = load i8*, i8** %5, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %5, align 8
  store i8 15, i8* %28, align 1
  %30 = load i8*, i8** %5, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %5, align 8
  store i8 58, i8* %30, align 1
  %32 = load i8*, i8** %5, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %5, align 8
  store i8 33, i8* %32, align 1
  %34 = shl i32 %1, 3
  %35 = and i32 %2, 7
  %36 = or i32 %35, %34
  %37 = trunc i32 %36 to i8
  %38 = or i8 %37, -64
  %39 = load i8*, i8** %5, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  store i8* %40, i8** %5, align 8
  store i8 %38, i8* %39, align 1
  %41 = load i8*, i8** %5, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %42, i8** %5, align 8
  store i8 %3, i8* %41, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8insertpsENS0_11XMMRegisterENS0_7OperandEh(%"class.v8::internal::Assembler"*, i32, i64, i32, i8 zeroext) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %14, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %13 = load i8*, i8** %6, align 8
  br label %14

14:                                               ; preds = %12, %5
  %15 = phi i8* [ %7, %5 ], [ %13, %12 ]
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %16, i8** %6, align 8
  store i8 102, i8* %15, align 1
  %17 = trunc i64 %2 to i8
  %18 = lshr i32 %1, 1
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 4
  %21 = or i8 %20, %17
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %27, label %23

23:                                               ; preds = %14
  %24 = or i8 %21, 64
  %25 = load i8*, i8** %6, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %6, align 8
  store i8 %24, i8* %25, align 1
  br label %27

27:                                               ; preds = %14, %23
  %28 = load i8*, i8** %6, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %6, align 8
  store i8 15, i8* %28, align 1
  %30 = load i8*, i8** %6, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %6, align 8
  store i8 58, i8* %30, align 1
  %32 = load i8*, i8** %6, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %6, align 8
  store i8 33, i8* %32, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  %34 = load i8*, i8** %6, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %6, align 8
  store i8 %4, i8* %34, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5movsdENS0_7OperandENS0_11XMMRegisterE(%"class.v8::internal::Assembler"*, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -14, i8* %14, align 1
  %16 = trunc i64 %1 to i8
  %17 = lshr i32 %3, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 4
  %20 = or i8 %19, %16
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %13
  %23 = or i8 %20, 64
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %13, %22
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %5, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %5, align 8
  store i8 17, i8* %29, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %3, i64 %1, i32 %2) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5movsdENS0_11XMMRegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 -14, i8* %13, align 1
  %15 = lshr i32 %1, 1
  %16 = and i32 %15, 4
  %17 = lshr i32 %2, 3
  %18 = and i32 %17, 1
  %19 = or i32 %18, %16
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %26, label %21

21:                                               ; preds = %12
  %22 = trunc i32 %19 to i8
  %23 = or i8 %22, 64
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %12, %21
  %27 = load i8*, i8** %4, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %4, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %4, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %4, align 8
  store i8 16, i8* %29, align 1
  %31 = shl i32 %1, 3
  %32 = and i32 %2, 7
  %33 = or i32 %32, %31
  %34 = trunc i32 %33 to i8
  %35 = or i8 %34, -64
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %4, align 8
  store i8 %35, i8* %36, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5movsdENS0_11XMMRegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -14, i8* %14, align 1
  %16 = trunc i64 %2 to i8
  %17 = lshr i32 %1, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 4
  %20 = or i8 %19, %16
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %13
  %23 = or i8 %20, 64
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %13, %22
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %5, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %5, align 8
  store i8 16, i8* %29, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6movapsENS0_11XMMRegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %11, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %11

11:                                               ; preds = %3, %10
  %12 = and i32 %2, 7
  %13 = icmp eq i32 %12, 4
  br i1 %13, label %14, label %38

14:                                               ; preds = %11
  %15 = lshr i32 %2, 1
  %16 = and i32 %15, 4
  %17 = lshr i32 %1, 3
  %18 = and i32 %17, 1
  %19 = or i32 %16, %18
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %26, label %21

21:                                               ; preds = %14
  %22 = trunc i32 %19 to i8
  %23 = or i8 %22, 64
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %14, %21
  %27 = load i8*, i8** %4, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %4, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %4, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %4, align 8
  store i8 41, i8* %29, align 1
  %31 = shl i32 %2, 3
  %32 = and i32 %1, 7
  %33 = or i32 %31, %32
  %34 = trunc i32 %33 to i8
  %35 = or i8 %34, -64
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %4, align 8
  store i8 %35, i8* %36, align 1
  br label %61

38:                                               ; preds = %11
  %39 = lshr i32 %1, 1
  %40 = and i32 %39, 4
  %41 = lshr i32 %2, 3
  %42 = and i32 %41, 1
  %43 = or i32 %42, %40
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %50, label %45

45:                                               ; preds = %38
  %46 = trunc i32 %43 to i8
  %47 = or i8 %46, 64
  %48 = load i8*, i8** %4, align 8
  %49 = getelementptr inbounds i8, i8* %48, i64 1
  store i8* %49, i8** %4, align 8
  store i8 %47, i8* %48, align 1
  br label %50

50:                                               ; preds = %38, %45
  %51 = load i8*, i8** %4, align 8
  %52 = getelementptr inbounds i8, i8* %51, i64 1
  store i8* %52, i8** %4, align 8
  store i8 15, i8* %51, align 1
  %53 = load i8*, i8** %4, align 8
  %54 = getelementptr inbounds i8, i8* %53, i64 1
  store i8* %54, i8** %4, align 8
  store i8 40, i8* %53, align 1
  %55 = shl i32 %1, 3
  %56 = or i32 %12, %55
  %57 = trunc i32 %56 to i8
  %58 = or i8 %57, -64
  %59 = load i8*, i8** %4, align 8
  %60 = getelementptr inbounds i8, i8* %59, i64 1
  store i8* %60, i8** %4, align 8
  store i8 %58, i8* %59, align 1
  br label %61

61:                                               ; preds = %50, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6movapsENS0_11XMMRegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %4, %11
  %13 = trunc i64 %2 to i8
  %14 = lshr i32 %1, 1
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 4
  %17 = or i8 %16, %13
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %12
  %20 = or i8 %17, 64
  %21 = load i8*, i8** %5, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %5, align 8
  store i8 %20, i8* %21, align 1
  br label %23

23:                                               ; preds = %12, %19
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 15, i8* %24, align 1
  %26 = load i8*, i8** %5, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %5, align 8
  store i8 40, i8* %26, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6shufpsENS0_11XMMRegisterES2_h(%"class.v8::internal::Assembler"*, i32, i32, i8 zeroext) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %4, %11
  %13 = lshr i32 %1, 1
  %14 = and i32 %13, 4
  %15 = lshr i32 %2, 3
  %16 = and i32 %15, 1
  %17 = or i32 %16, %14
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %24, label %19

19:                                               ; preds = %12
  %20 = trunc i32 %17 to i8
  %21 = or i8 %20, 64
  %22 = load i8*, i8** %5, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %5, align 8
  store i8 %21, i8* %22, align 1
  br label %24

24:                                               ; preds = %12, %19
  %25 = load i8*, i8** %5, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %5, align 8
  store i8 15, i8* %25, align 1
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 -58, i8* %27, align 1
  %29 = shl i32 %1, 3
  %30 = and i32 %2, 7
  %31 = or i32 %30, %29
  %32 = trunc i32 %31 to i8
  %33 = or i8 %32, -64
  %34 = load i8*, i8** %5, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %5, align 8
  store i8 %33, i8* %34, align 1
  %36 = load i8*, i8** %5, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %5, align 8
  store i8 %3, i8* %36, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6movapdENS0_11XMMRegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = and i32 %2, 7
  %15 = icmp eq i32 %14, 4
  %16 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %16, i8** %4, align 8
  store i8 102, i8* %13, align 1
  br i1 %15, label %17, label %41

17:                                               ; preds = %12
  %18 = lshr i32 %2, 1
  %19 = and i32 %18, 4
  %20 = lshr i32 %1, 3
  %21 = and i32 %20, 1
  %22 = or i32 %19, %21
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %29, label %24

24:                                               ; preds = %17
  %25 = trunc i32 %22 to i8
  %26 = or i8 %25, 64
  %27 = load i8*, i8** %4, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %4, align 8
  store i8 %26, i8* %27, align 1
  br label %29

29:                                               ; preds = %17, %24
  %30 = load i8*, i8** %4, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %4, align 8
  store i8 15, i8* %30, align 1
  %32 = load i8*, i8** %4, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %4, align 8
  store i8 41, i8* %32, align 1
  %34 = shl i32 %2, 3
  %35 = and i32 %1, 7
  %36 = or i32 %34, %35
  %37 = trunc i32 %36 to i8
  %38 = or i8 %37, -64
  %39 = load i8*, i8** %4, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  store i8* %40, i8** %4, align 8
  store i8 %38, i8* %39, align 1
  br label %64

41:                                               ; preds = %12
  %42 = lshr i32 %1, 1
  %43 = and i32 %42, 4
  %44 = lshr i32 %2, 3
  %45 = and i32 %44, 1
  %46 = or i32 %45, %43
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %41
  %49 = trunc i32 %46 to i8
  %50 = or i8 %49, 64
  %51 = load i8*, i8** %4, align 8
  %52 = getelementptr inbounds i8, i8* %51, i64 1
  store i8* %52, i8** %4, align 8
  store i8 %50, i8* %51, align 1
  br label %53

53:                                               ; preds = %41, %48
  %54 = load i8*, i8** %4, align 8
  %55 = getelementptr inbounds i8, i8* %54, i64 1
  store i8* %55, i8** %4, align 8
  store i8 15, i8* %54, align 1
  %56 = load i8*, i8** %4, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 1
  store i8* %57, i8** %4, align 8
  store i8 40, i8* %56, align 1
  %58 = shl i32 %1, 3
  %59 = or i32 %14, %58
  %60 = trunc i32 %59 to i8
  %61 = or i8 %60, -64
  %62 = load i8*, i8** %4, align 8
  %63 = getelementptr inbounds i8, i8* %62, i64 1
  store i8* %63, i8** %4, align 8
  store i8 %61, i8* %62, align 1
  br label %64

64:                                               ; preds = %53, %29
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6movupdENS0_11XMMRegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 102, i8* %14, align 1
  %16 = trunc i64 %2 to i8
  %17 = lshr i32 %1, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 4
  %20 = or i8 %19, %16
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %13
  %23 = or i8 %20, 64
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %13, %22
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %5, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %5, align 8
  store i8 16, i8* %29, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6movupdENS0_7OperandENS0_11XMMRegisterE(%"class.v8::internal::Assembler"*, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 102, i8* %14, align 1
  %16 = trunc i64 %1 to i8
  %17 = lshr i32 %3, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 4
  %20 = or i8 %19, %16
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %13
  %23 = or i8 %20, 64
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %13, %22
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %5, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %5, align 8
  store i8 17, i8* %29, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %3, i64 %1, i32 %2) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7ucomissENS0_11XMMRegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %11, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %11

11:                                               ; preds = %3, %10
  %12 = lshr i32 %1, 1
  %13 = and i32 %12, 4
  %14 = lshr i32 %2, 3
  %15 = and i32 %14, 1
  %16 = or i32 %15, %13
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %23, label %18

18:                                               ; preds = %11
  %19 = trunc i32 %16 to i8
  %20 = or i8 %19, 64
  %21 = load i8*, i8** %4, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %4, align 8
  store i8 %20, i8* %21, align 1
  br label %23

23:                                               ; preds = %11, %18
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 15, i8* %24, align 1
  %26 = load i8*, i8** %4, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %4, align 8
  store i8 46, i8* %26, align 1
  %28 = shl i32 %1, 3
  %29 = and i32 %2, 7
  %30 = or i32 %29, %28
  %31 = trunc i32 %30 to i8
  %32 = or i8 %31, -64
  %33 = load i8*, i8** %4, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %4, align 8
  store i8 %32, i8* %33, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7ucomissENS0_11XMMRegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %4, %11
  %13 = trunc i64 %2 to i8
  %14 = lshr i32 %1, 1
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 4
  %17 = or i8 %16, %13
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %12
  %20 = or i8 %17, 64
  %21 = load i8*, i8** %5, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %5, align 8
  store i8 %20, i8* %21, align 1
  br label %23

23:                                               ; preds = %12, %19
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 15, i8* %24, align 1
  %26 = load i8*, i8** %5, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %5, align 8
  store i8 46, i8* %26, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5movssENS0_11XMMRegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 -13, i8* %13, align 1
  %15 = lshr i32 %1, 1
  %16 = and i32 %15, 4
  %17 = lshr i32 %2, 3
  %18 = and i32 %17, 1
  %19 = or i32 %18, %16
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %26, label %21

21:                                               ; preds = %12
  %22 = trunc i32 %19 to i8
  %23 = or i8 %22, 64
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %12, %21
  %27 = load i8*, i8** %4, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %4, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %4, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %4, align 8
  store i8 16, i8* %29, align 1
  %31 = shl i32 %1, 3
  %32 = and i32 %2, 7
  %33 = or i32 %32, %31
  %34 = trunc i32 %33 to i8
  %35 = or i8 %34, -64
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %4, align 8
  store i8 %35, i8* %36, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5movssENS0_11XMMRegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -13, i8* %14, align 1
  %16 = trunc i64 %2 to i8
  %17 = lshr i32 %1, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 4
  %20 = or i8 %19, %16
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %13
  %23 = or i8 %20, 64
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %13, %22
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %5, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %5, align 8
  store i8 16, i8* %29, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5movssENS0_7OperandENS0_11XMMRegisterE(%"class.v8::internal::Assembler"*, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -13, i8* %14, align 1
  %16 = trunc i64 %1 to i8
  %17 = lshr i32 %3, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 4
  %20 = or i8 %19, %16
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %13
  %23 = or i8 %20, 64
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %13, %22
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %5, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %5, align 8
  store i8 17, i8* %29, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %3, i64 %1, i32 %2) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6movlpsENS0_11XMMRegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %4, %11
  %13 = trunc i64 %2 to i8
  %14 = lshr i32 %1, 1
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 4
  %17 = or i8 %16, %13
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %12
  %20 = or i8 %17, 64
  %21 = load i8*, i8** %5, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %5, align 8
  store i8 %20, i8* %21, align 1
  br label %23

23:                                               ; preds = %12, %19
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 15, i8* %24, align 1
  %26 = load i8*, i8** %5, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %5, align 8
  store i8 18, i8* %26, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6movlpsENS0_7OperandENS0_11XMMRegisterE(%"class.v8::internal::Assembler"*, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %4, %11
  %13 = trunc i64 %1 to i8
  %14 = lshr i32 %3, 1
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 4
  %17 = or i8 %16, %13
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %12
  %20 = or i8 %17, 64
  %21 = load i8*, i8** %5, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %5, align 8
  store i8 %20, i8* %21, align 1
  br label %23

23:                                               ; preds = %12, %19
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 15, i8* %24, align 1
  %26 = load i8*, i8** %5, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %5, align 8
  store i8 19, i8* %26, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %3, i64 %1, i32 %2) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6movhpsENS0_11XMMRegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %4, %11
  %13 = trunc i64 %2 to i8
  %14 = lshr i32 %1, 1
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 4
  %17 = or i8 %16, %13
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %12
  %20 = or i8 %17, 64
  %21 = load i8*, i8** %5, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %5, align 8
  store i8 %20, i8* %21, align 1
  br label %23

23:                                               ; preds = %12, %19
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 15, i8* %24, align 1
  %26 = load i8*, i8** %5, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %5, align 8
  store i8 22, i8* %26, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6movhpsENS0_7OperandENS0_11XMMRegisterE(%"class.v8::internal::Assembler"*, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %4, %11
  %13 = trunc i64 %1 to i8
  %14 = lshr i32 %3, 1
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 4
  %17 = or i8 %16, %13
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %12
  %20 = or i8 %17, 64
  %21 = load i8*, i8** %5, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %5, align 8
  store i8 %20, i8* %21, align 1
  br label %23

23:                                               ; preds = %12, %19
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 15, i8* %24, align 1
  %26 = load i8*, i8** %5, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %5, align 8
  store i8 23, i8* %26, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %3, i64 %1, i32 %2) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5cmppsENS0_11XMMRegisterES2_a(%"class.v8::internal::Assembler"*, i32, i32, i8 signext) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %4, %11
  %13 = lshr i32 %1, 1
  %14 = and i32 %13, 4
  %15 = lshr i32 %2, 3
  %16 = and i32 %15, 1
  %17 = or i32 %16, %14
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %24, label %19

19:                                               ; preds = %12
  %20 = trunc i32 %17 to i8
  %21 = or i8 %20, 64
  %22 = load i8*, i8** %5, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %5, align 8
  store i8 %21, i8* %22, align 1
  br label %24

24:                                               ; preds = %12, %19
  %25 = load i8*, i8** %5, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %5, align 8
  store i8 15, i8* %25, align 1
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 -62, i8* %27, align 1
  %29 = shl i32 %1, 3
  %30 = and i32 %2, 7
  %31 = or i32 %30, %29
  %32 = trunc i32 %31 to i8
  %33 = or i8 %32, -64
  %34 = load i8*, i8** %5, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %5, align 8
  store i8 %33, i8* %34, align 1
  %36 = load i8*, i8** %5, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %5, align 8
  store i8 %3, i8* %36, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5cmppsENS0_11XMMRegisterENS0_7OperandEa(%"class.v8::internal::Assembler"*, i32, i64, i32, i8 signext) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %13, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %13

13:                                               ; preds = %5, %12
  %14 = trunc i64 %2 to i8
  %15 = lshr i32 %1, 1
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 4
  %18 = or i8 %17, %14
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %24, label %20

20:                                               ; preds = %13
  %21 = or i8 %18, 64
  %22 = load i8*, i8** %6, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %6, align 8
  store i8 %21, i8* %22, align 1
  br label %24

24:                                               ; preds = %13, %20
  %25 = load i8*, i8** %6, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %6, align 8
  store i8 15, i8* %25, align 1
  %27 = load i8*, i8** %6, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %6, align 8
  store i8 -62, i8* %27, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  %29 = load i8*, i8** %6, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %6, align 8
  store i8 %4, i8* %29, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5cmppdENS0_11XMMRegisterES2_a(%"class.v8::internal::Assembler"*, i32, i32, i8 signext) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 102, i8* %14, align 1
  %16 = lshr i32 %1, 1
  %17 = and i32 %16, 4
  %18 = lshr i32 %2, 3
  %19 = and i32 %18, 1
  %20 = or i32 %19, %17
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %13
  %23 = trunc i32 %20 to i8
  %24 = or i8 %23, 64
  %25 = load i8*, i8** %5, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %5, align 8
  store i8 %24, i8* %25, align 1
  br label %27

27:                                               ; preds = %13, %22
  %28 = load i8*, i8** %5, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %5, align 8
  store i8 15, i8* %28, align 1
  %30 = load i8*, i8** %5, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %5, align 8
  store i8 -62, i8* %30, align 1
  %32 = shl i32 %1, 3
  %33 = and i32 %2, 7
  %34 = or i32 %33, %32
  %35 = trunc i32 %34 to i8
  %36 = or i8 %35, -64
  %37 = load i8*, i8** %5, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  store i8* %38, i8** %5, align 8
  store i8 %36, i8* %37, align 1
  %39 = load i8*, i8** %5, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  store i8* %40, i8** %5, align 8
  store i8 %3, i8* %39, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5cmppdENS0_11XMMRegisterENS0_7OperandEa(%"class.v8::internal::Assembler"*, i32, i64, i32, i8 signext) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %14, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %13 = load i8*, i8** %6, align 8
  br label %14

14:                                               ; preds = %5, %12
  %15 = phi i8* [ %7, %5 ], [ %13, %12 ]
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %16, i8** %6, align 8
  store i8 102, i8* %15, align 1
  %17 = trunc i64 %2 to i8
  %18 = lshr i32 %1, 1
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 4
  %21 = or i8 %20, %17
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %27, label %23

23:                                               ; preds = %14
  %24 = or i8 %21, 64
  %25 = load i8*, i8** %6, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %6, align 8
  store i8 %24, i8* %25, align 1
  br label %27

27:                                               ; preds = %14, %23
  %28 = load i8*, i8** %6, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %6, align 8
  store i8 15, i8* %28, align 1
  %30 = load i8*, i8** %6, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %6, align 8
  store i8 -62, i8* %30, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  %32 = load i8*, i8** %6, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %6, align 8
  store i8 %4, i8* %32, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8cvtdq2pdENS0_11XMMRegisterES2_(%"class.v8::internal::Assembler"* nocapture, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %10, %3
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 -13, i8* %13, align 1
  %15 = lshr i32 %1, 1
  %16 = and i32 %15, 4
  %17 = lshr i32 %2, 3
  %18 = and i32 %17, 1
  %19 = or i32 %18, %16
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %26, label %21

21:                                               ; preds = %12
  %22 = trunc i32 %19 to i8
  %23 = or i8 %22, 64
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %12, %21
  %27 = load i8*, i8** %4, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %4, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %4, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %4, align 8
  store i8 -26, i8* %29, align 1
  %31 = shl i32 %1, 3
  %32 = and i32 %2, 7
  %33 = or i32 %32, %31
  %34 = trunc i32 %33 to i8
  %35 = or i8 %34, -64
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %4, align 8
  store i8 %35, i8* %36, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler10sse2_instrENS0_11XMMRegisterES2_hhh(%"class.v8::internal::Assembler"*, i32, i32, i8 zeroext, i8 zeroext, i8 zeroext) local_unnamed_addr #1 align 2 {
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 -32
  %12 = icmp ult i8* %8, %11
  br i1 %12, label %15, label %13, !prof !11

13:                                               ; preds = %6
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %14 = load i8*, i8** %7, align 8
  br label %15

15:                                               ; preds = %6, %13
  %16 = phi i8* [ %8, %6 ], [ %14, %13 ]
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %17, i8** %7, align 8
  store i8 %3, i8* %16, align 1
  %18 = lshr i32 %1, 1
  %19 = and i32 %18, 4
  %20 = lshr i32 %2, 3
  %21 = and i32 %20, 1
  %22 = or i32 %21, %19
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %29, label %24

24:                                               ; preds = %15
  %25 = trunc i32 %22 to i8
  %26 = or i8 %25, 64
  %27 = load i8*, i8** %7, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %7, align 8
  store i8 %26, i8* %27, align 1
  br label %29

29:                                               ; preds = %15, %24
  %30 = load i8*, i8** %7, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %7, align 8
  store i8 %4, i8* %30, align 1
  %32 = load i8*, i8** %7, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %7, align 8
  store i8 %5, i8* %32, align 1
  %34 = shl i32 %1, 3
  %35 = and i32 %2, 7
  %36 = or i32 %35, %34
  %37 = trunc i32 %36 to i8
  %38 = or i8 %37, -64
  %39 = load i8*, i8** %7, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  store i8* %40, i8** %7, align 8
  store i8 %38, i8* %39, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9cvttss2siENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -13, i8* %14, align 1
  %16 = trunc i64 %2 to i8
  %17 = lshr i32 %1, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, -4
  %20 = or i8 %19, %16
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %13
  %23 = or i8 %20, 64
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %13, %22
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %5, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %5, align 8
  store i8 44, i8* %29, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9cvttss2siENS0_8RegisterENS0_11XMMRegisterE(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 -13, i8* %13, align 1
  %15 = lshr i32 %1, 1
  %16 = and i32 %15, 4
  %17 = lshr i32 %2, 3
  %18 = and i32 %17, 1
  %19 = or i32 %18, %16
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %26, label %21

21:                                               ; preds = %12
  %22 = trunc i32 %19 to i8
  %23 = or i8 %22, 64
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %12, %21
  %27 = load i8*, i8** %4, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %4, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %4, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %4, align 8
  store i8 44, i8* %29, align 1
  %31 = shl i32 %1, 3
  %32 = and i32 %2, 7
  %33 = or i32 %32, %31
  %34 = trunc i32 %33 to i8
  %35 = or i8 %34, -64
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %4, align 8
  store i8 %35, i8* %36, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler16emit_sse_operandENS0_8RegisterENS0_11XMMRegisterE(%"class.v8::internal::Assembler"* nocapture, i32, i32) local_unnamed_addr #9 align 2 {
  %4 = shl i32 %1, 3
  %5 = and i32 %2, 7
  %6 = or i32 %5, %4
  %7 = trunc i32 %6 to i8
  %8 = or i8 %7, -64
  %9 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 1
  store i8* %11, i8** %9, align 8
  store i8 %8, i8* %10, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9cvttsd2siENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -14, i8* %14, align 1
  %16 = trunc i64 %2 to i8
  %17 = lshr i32 %1, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, -4
  %20 = or i8 %19, %16
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %13
  %23 = or i8 %20, 64
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %13, %22
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %5, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %5, align 8
  store i8 44, i8* %29, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9cvttsd2siENS0_8RegisterENS0_11XMMRegisterE(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 -14, i8* %13, align 1
  %15 = lshr i32 %1, 1
  %16 = and i32 %15, 4
  %17 = lshr i32 %2, 3
  %18 = and i32 %17, 1
  %19 = or i32 %18, %16
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %26, label %21

21:                                               ; preds = %12
  %22 = trunc i32 %19 to i8
  %23 = or i8 %22, 64
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %12, %21
  %27 = load i8*, i8** %4, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %4, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %4, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %4, align 8
  store i8 44, i8* %29, align 1
  %31 = shl i32 %1, 3
  %32 = and i32 %2, 7
  %33 = or i32 %32, %31
  %34 = trunc i32 %33 to i8
  %35 = or i8 %34, -64
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %4, align 8
  store i8 %35, i8* %36, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler10cvttss2siqENS0_8RegisterENS0_11XMMRegisterE(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 -13, i8* %13, align 1
  %15 = lshr i32 %1, 1
  %16 = and i32 %15, 4
  %17 = lshr i32 %2, 3
  %18 = or i32 %16, %17
  %19 = trunc i32 %18 to i8
  %20 = or i8 %19, 72
  %21 = load i8*, i8** %4, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %4, align 8
  store i8 %20, i8* %21, align 1
  %23 = load i8*, i8** %4, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %4, align 8
  store i8 15, i8* %23, align 1
  %25 = load i8*, i8** %4, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %4, align 8
  store i8 44, i8* %25, align 1
  %27 = shl i32 %1, 3
  %28 = and i32 %2, 7
  %29 = or i32 %28, %27
  %30 = trunc i32 %29 to i8
  %31 = or i8 %30, -64
  %32 = load i8*, i8** %4, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %4, align 8
  store i8 %31, i8* %32, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler10cvttss2siqENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -13, i8* %14, align 1
  %16 = trunc i64 %2 to i8
  %17 = lshr i32 %1, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, -76
  %20 = or i8 %19, %16
  %21 = or i8 %20, 72
  %22 = load i8*, i8** %5, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %5, align 8
  store i8 %21, i8* %22, align 1
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 15, i8* %24, align 1
  %26 = load i8*, i8** %5, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %5, align 8
  store i8 44, i8* %26, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler16emit_sse_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler10cvttsd2siqENS0_8RegisterENS0_11XMMRegisterE(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 -14, i8* %13, align 1
  %15 = lshr i32 %1, 1
  %16 = and i32 %15, 4
  %17 = lshr i32 %2, 3
  %18 = or i32 %16, %17
  %19 = trunc i32 %18 to i8
  %20 = or i8 %19, 72
  %21 = load i8*, i8** %4, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %4, align 8
  store i8 %20, i8* %21, align 1
  %23 = load i8*, i8** %4, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %4, align 8
  store i8 15, i8* %23, align 1
  %25 = load i8*, i8** %4, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %4, align 8
  store i8 44, i8* %25, align 1
  %27 = shl i32 %1, 3
  %28 = and i32 %2, 7
  %29 = or i32 %28, %27
  %30 = trunc i32 %29 to i8
  %31 = or i8 %30, -64
  %32 = load i8*, i8** %4, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %4, align 8
  store i8 %31, i8* %32, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler10cvttsd2siqENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -14, i8* %14, align 1
  %16 = trunc i64 %2 to i8
  %17 = lshr i32 %1, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, -76
  %20 = or i8 %19, %16
  %21 = or i8 %20, 72
  %22 = load i8*, i8** %5, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %5, align 8
  store i8 %21, i8* %22, align 1
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 15, i8* %24, align 1
  %26 = load i8*, i8** %5, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %5, align 8
  store i8 44, i8* %26, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9cvttps2dqENS0_11XMMRegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -13, i8* %14, align 1
  %16 = trunc i64 %2 to i8
  %17 = lshr i32 %1, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 4
  %20 = or i8 %19, %16
  %21 = or i8 %20, 72
  %22 = load i8*, i8** %5, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %5, align 8
  store i8 %21, i8* %22, align 1
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 15, i8* %24, align 1
  %26 = load i8*, i8** %5, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %5, align 8
  store i8 91, i8* %26, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9cvttps2dqENS0_11XMMRegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 -13, i8* %13, align 1
  %15 = lshr i32 %1, 1
  %16 = and i32 %15, 4
  %17 = lshr i32 %2, 3
  %18 = or i32 %16, %17
  %19 = trunc i32 %18 to i8
  %20 = or i8 %19, 72
  %21 = load i8*, i8** %4, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %4, align 8
  store i8 %20, i8* %21, align 1
  %23 = load i8*, i8** %4, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %4, align 8
  store i8 15, i8* %23, align 1
  %25 = load i8*, i8** %4, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %4, align 8
  store i8 91, i8* %25, align 1
  %27 = shl i32 %1, 3
  %28 = and i32 %2, 7
  %29 = or i32 %28, %27
  %30 = trunc i32 %29 to i8
  %31 = or i8 %30, -64
  %32 = load i8*, i8** %4, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %4, align 8
  store i8 %31, i8* %32, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9cvtlsi2sdENS0_11XMMRegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -14, i8* %14, align 1
  %16 = trunc i64 %2 to i8
  %17 = lshr i32 %1, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 4
  %20 = or i8 %19, %16
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %13
  %23 = or i8 %20, 64
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %13, %22
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %5, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %5, align 8
  store i8 42, i8* %29, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9cvtlsi2sdENS0_11XMMRegisterENS0_8RegisterE(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 -14, i8* %13, align 1
  %15 = lshr i32 %1, 1
  %16 = and i32 %15, 4
  %17 = lshr i32 %2, 3
  %18 = and i32 %17, 1
  %19 = or i32 %18, %16
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %26, label %21

21:                                               ; preds = %12
  %22 = trunc i32 %19 to i8
  %23 = or i8 %22, 64
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %12, %21
  %27 = load i8*, i8** %4, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %4, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %4, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %4, align 8
  store i8 42, i8* %29, align 1
  %31 = shl i32 %1, 3
  %32 = and i32 %2, 7
  %33 = or i32 %32, %31
  %34 = trunc i32 %33 to i8
  %35 = or i8 %34, -64
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %4, align 8
  store i8 %35, i8* %36, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9cvtlsi2ssENS0_11XMMRegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -13, i8* %14, align 1
  %16 = trunc i64 %2 to i8
  %17 = lshr i32 %1, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 4
  %20 = or i8 %19, %16
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %13
  %23 = or i8 %20, 64
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %13, %22
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %5, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %5, align 8
  store i8 42, i8* %29, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9cvtlsi2ssENS0_11XMMRegisterENS0_8RegisterE(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 -13, i8* %13, align 1
  %15 = lshr i32 %1, 1
  %16 = and i32 %15, 4
  %17 = lshr i32 %2, 3
  %18 = and i32 %17, 1
  %19 = or i32 %18, %16
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %26, label %21

21:                                               ; preds = %12
  %22 = trunc i32 %19 to i8
  %23 = or i8 %22, 64
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %12, %21
  %27 = load i8*, i8** %4, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %4, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %4, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %4, align 8
  store i8 42, i8* %29, align 1
  %31 = shl i32 %1, 3
  %32 = and i32 %2, 7
  %33 = or i32 %32, %31
  %34 = trunc i32 %33 to i8
  %35 = or i8 %34, -64
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %4, align 8
  store i8 %35, i8* %36, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9cvtqsi2ssENS0_11XMMRegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -13, i8* %14, align 1
  %16 = trunc i64 %2 to i8
  %17 = lshr i32 %1, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 4
  %20 = or i8 %19, %16
  %21 = or i8 %20, 72
  %22 = load i8*, i8** %5, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %5, align 8
  store i8 %21, i8* %22, align 1
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 15, i8* %24, align 1
  %26 = load i8*, i8** %5, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %5, align 8
  store i8 42, i8* %26, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9cvtqsi2ssENS0_11XMMRegisterENS0_8RegisterE(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 -13, i8* %13, align 1
  %15 = lshr i32 %1, 1
  %16 = and i32 %15, 4
  %17 = lshr i32 %2, 3
  %18 = or i32 %16, %17
  %19 = trunc i32 %18 to i8
  %20 = or i8 %19, 72
  %21 = load i8*, i8** %4, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %4, align 8
  store i8 %20, i8* %21, align 1
  %23 = load i8*, i8** %4, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %4, align 8
  store i8 15, i8* %23, align 1
  %25 = load i8*, i8** %4, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %4, align 8
  store i8 42, i8* %25, align 1
  %27 = shl i32 %1, 3
  %28 = and i32 %2, 7
  %29 = or i32 %28, %27
  %30 = trunc i32 %29 to i8
  %31 = or i8 %30, -64
  %32 = load i8*, i8** %4, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %4, align 8
  store i8 %31, i8* %32, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9cvtqsi2sdENS0_11XMMRegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -14, i8* %14, align 1
  %16 = trunc i64 %2 to i8
  %17 = lshr i32 %1, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 4
  %20 = or i8 %19, %16
  %21 = or i8 %20, 72
  %22 = load i8*, i8** %5, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %5, align 8
  store i8 %21, i8* %22, align 1
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 15, i8* %24, align 1
  %26 = load i8*, i8** %5, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %5, align 8
  store i8 42, i8* %26, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9cvtqsi2sdENS0_11XMMRegisterENS0_8RegisterE(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 -14, i8* %13, align 1
  %15 = lshr i32 %1, 1
  %16 = and i32 %15, 4
  %17 = lshr i32 %2, 3
  %18 = or i32 %16, %17
  %19 = trunc i32 %18 to i8
  %20 = or i8 %19, 72
  %21 = load i8*, i8** %4, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %4, align 8
  store i8 %20, i8* %21, align 1
  %23 = load i8*, i8** %4, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %4, align 8
  store i8 15, i8* %23, align 1
  %25 = load i8*, i8** %4, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %4, align 8
  store i8 42, i8* %25, align 1
  %27 = shl i32 %1, 3
  %28 = and i32 %2, 7
  %29 = or i32 %28, %27
  %30 = trunc i32 %29 to i8
  %31 = or i8 %30, -64
  %32 = load i8*, i8** %4, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %4, align 8
  store i8 %31, i8* %32, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8cvtss2sdENS0_11XMMRegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 -13, i8* %13, align 1
  %15 = lshr i32 %1, 1
  %16 = and i32 %15, 4
  %17 = lshr i32 %2, 3
  %18 = and i32 %17, 1
  %19 = or i32 %18, %16
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %26, label %21

21:                                               ; preds = %12
  %22 = trunc i32 %19 to i8
  %23 = or i8 %22, 64
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %12, %21
  %27 = load i8*, i8** %4, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %4, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %4, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %4, align 8
  store i8 90, i8* %29, align 1
  %31 = shl i32 %1, 3
  %32 = and i32 %2, 7
  %33 = or i32 %32, %31
  %34 = trunc i32 %33 to i8
  %35 = or i8 %34, -64
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %4, align 8
  store i8 %35, i8* %36, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8cvtss2sdENS0_11XMMRegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -13, i8* %14, align 1
  %16 = trunc i64 %2 to i8
  %17 = lshr i32 %1, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 4
  %20 = or i8 %19, %16
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %13
  %23 = or i8 %20, 64
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %13, %22
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %5, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %5, align 8
  store i8 90, i8* %29, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8cvtsd2siENS0_8RegisterENS0_11XMMRegisterE(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 -14, i8* %13, align 1
  %15 = lshr i32 %1, 1
  %16 = and i32 %15, 4
  %17 = lshr i32 %2, 3
  %18 = and i32 %17, 1
  %19 = or i32 %18, %16
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %26, label %21

21:                                               ; preds = %12
  %22 = trunc i32 %19 to i8
  %23 = or i8 %22, 64
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %12, %21
  %27 = load i8*, i8** %4, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %4, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %4, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %4, align 8
  store i8 45, i8* %29, align 1
  %31 = shl i32 %1, 3
  %32 = and i32 %2, 7
  %33 = or i32 %32, %31
  %34 = trunc i32 %33 to i8
  %35 = or i8 %34, -64
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %4, align 8
  store i8 %35, i8* %36, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9cvtsd2siqENS0_8RegisterENS0_11XMMRegisterE(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 -14, i8* %13, align 1
  %15 = lshr i32 %1, 1
  %16 = and i32 %15, 4
  %17 = lshr i32 %2, 3
  %18 = or i32 %16, %17
  %19 = trunc i32 %18 to i8
  %20 = or i8 %19, 72
  %21 = load i8*, i8** %4, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %4, align 8
  store i8 %20, i8* %21, align 1
  %23 = load i8*, i8** %4, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %4, align 8
  store i8 15, i8* %23, align 1
  %25 = load i8*, i8** %4, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %4, align 8
  store i8 45, i8* %25, align 1
  %27 = shl i32 %1, 3
  %28 = and i32 %2, 7
  %29 = or i32 %28, %27
  %30 = trunc i32 %29 to i8
  %31 = or i8 %30, -64
  %32 = load i8*, i8** %4, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %4, align 8
  store i8 %31, i8* %32, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6haddpsENS0_11XMMRegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 -14, i8* %13, align 1
  %15 = lshr i32 %1, 1
  %16 = and i32 %15, 4
  %17 = lshr i32 %2, 3
  %18 = and i32 %17, 1
  %19 = or i32 %18, %16
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %26, label %21

21:                                               ; preds = %12
  %22 = trunc i32 %19 to i8
  %23 = or i8 %22, 64
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %12, %21
  %27 = load i8*, i8** %4, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %4, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %4, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %4, align 8
  store i8 124, i8* %29, align 1
  %31 = shl i32 %1, 3
  %32 = and i32 %2, 7
  %33 = or i32 %32, %31
  %34 = trunc i32 %33 to i8
  %35 = or i8 %34, -64
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %4, align 8
  store i8 %35, i8* %36, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6haddpsENS0_11XMMRegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -14, i8* %14, align 1
  %16 = trunc i64 %2 to i8
  %17 = lshr i32 %1, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 4
  %20 = or i8 %19, %16
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %13
  %23 = or i8 %20, 64
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %13, %22
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %5, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %5, align 8
  store i8 124, i8* %29, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7cmpltsdENS0_11XMMRegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 -14, i8* %13, align 1
  %15 = lshr i32 %1, 1
  %16 = and i32 %15, 4
  %17 = lshr i32 %2, 3
  %18 = and i32 %17, 1
  %19 = or i32 %18, %16
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %26, label %21

21:                                               ; preds = %12
  %22 = trunc i32 %19 to i8
  %23 = or i8 %22, 64
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %12, %21
  %27 = load i8*, i8** %4, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %4, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %4, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %4, align 8
  store i8 -62, i8* %29, align 1
  %31 = shl i32 %1, 3
  %32 = and i32 %2, 7
  %33 = or i32 %32, %31
  %34 = trunc i32 %33 to i8
  %35 = or i8 %34, -64
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %4, align 8
  store i8 %35, i8* %36, align 1
  %38 = load i8*, i8** %4, align 8
  %39 = getelementptr inbounds i8, i8* %38, i64 1
  store i8* %39, i8** %4, align 8
  store i8 1, i8* %38, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7roundssENS0_11XMMRegisterES2_NS0_12RoundingModeE(%"class.v8::internal::Assembler"* nocapture, i32, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %11, %4
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 102, i8* %14, align 1
  %16 = lshr i32 %1, 1
  %17 = and i32 %16, 4
  %18 = lshr i32 %2, 3
  %19 = and i32 %18, 1
  %20 = or i32 %19, %17
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %13
  %23 = trunc i32 %20 to i8
  %24 = or i8 %23, 64
  %25 = load i8*, i8** %5, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %5, align 8
  store i8 %24, i8* %25, align 1
  br label %27

27:                                               ; preds = %13, %22
  %28 = load i8*, i8** %5, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %5, align 8
  store i8 15, i8* %28, align 1
  %30 = load i8*, i8** %5, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %5, align 8
  store i8 58, i8* %30, align 1
  %32 = load i8*, i8** %5, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %5, align 8
  store i8 10, i8* %32, align 1
  %34 = shl i32 %1, 3
  %35 = and i32 %2, 7
  %36 = or i32 %35, %34
  %37 = trunc i32 %36 to i8
  %38 = or i8 %37, -64
  %39 = load i8*, i8** %5, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  store i8* %40, i8** %5, align 8
  store i8 %38, i8* %39, align 1
  %41 = trunc i32 %3 to i8
  %42 = or i8 %41, 8
  %43 = load i8*, i8** %5, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 1
  store i8* %44, i8** %5, align 8
  store i8 %42, i8* %43, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7roundsdENS0_11XMMRegisterES2_NS0_12RoundingModeE(%"class.v8::internal::Assembler"* nocapture, i32, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %11, %4
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 102, i8* %14, align 1
  %16 = lshr i32 %1, 1
  %17 = and i32 %16, 4
  %18 = lshr i32 %2, 3
  %19 = and i32 %18, 1
  %20 = or i32 %19, %17
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %13
  %23 = trunc i32 %20 to i8
  %24 = or i8 %23, 64
  %25 = load i8*, i8** %5, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %5, align 8
  store i8 %24, i8* %25, align 1
  br label %27

27:                                               ; preds = %13, %22
  %28 = load i8*, i8** %5, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %5, align 8
  store i8 15, i8* %28, align 1
  %30 = load i8*, i8** %5, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %5, align 8
  store i8 58, i8* %30, align 1
  %32 = load i8*, i8** %5, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %5, align 8
  store i8 11, i8* %32, align 1
  %34 = shl i32 %1, 3
  %35 = and i32 %2, 7
  %36 = or i32 %35, %34
  %37 = trunc i32 %36 to i8
  %38 = or i8 %37, -64
  %39 = load i8*, i8** %5, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  store i8* %40, i8** %5, align 8
  store i8 %38, i8* %39, align 1
  %41 = trunc i32 %3 to i8
  %42 = or i8 %41, 8
  %43 = load i8*, i8** %5, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 1
  store i8* %44, i8** %5, align 8
  store i8 %42, i8* %43, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7roundpsENS0_11XMMRegisterES2_NS0_12RoundingModeE(%"class.v8::internal::Assembler"* nocapture, i32, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %11, %4
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 102, i8* %14, align 1
  %16 = lshr i32 %1, 1
  %17 = and i32 %16, 4
  %18 = lshr i32 %2, 3
  %19 = and i32 %18, 1
  %20 = or i32 %19, %17
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %13
  %23 = trunc i32 %20 to i8
  %24 = or i8 %23, 64
  %25 = load i8*, i8** %5, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %5, align 8
  store i8 %24, i8* %25, align 1
  br label %27

27:                                               ; preds = %13, %22
  %28 = load i8*, i8** %5, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %5, align 8
  store i8 15, i8* %28, align 1
  %30 = load i8*, i8** %5, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %5, align 8
  store i8 58, i8* %30, align 1
  %32 = load i8*, i8** %5, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %5, align 8
  store i8 8, i8* %32, align 1
  %34 = shl i32 %1, 3
  %35 = and i32 %2, 7
  %36 = or i32 %35, %34
  %37 = trunc i32 %36 to i8
  %38 = or i8 %37, -64
  %39 = load i8*, i8** %5, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  store i8* %40, i8** %5, align 8
  store i8 %38, i8* %39, align 1
  %41 = trunc i32 %3 to i8
  %42 = or i8 %41, 8
  %43 = load i8*, i8** %5, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 1
  store i8* %44, i8** %5, align 8
  store i8 %42, i8* %43, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7roundpdENS0_11XMMRegisterES2_NS0_12RoundingModeE(%"class.v8::internal::Assembler"* nocapture, i32, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %11, %4
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 102, i8* %14, align 1
  %16 = lshr i32 %1, 1
  %17 = and i32 %16, 4
  %18 = lshr i32 %2, 3
  %19 = and i32 %18, 1
  %20 = or i32 %19, %17
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %13
  %23 = trunc i32 %20 to i8
  %24 = or i8 %23, 64
  %25 = load i8*, i8** %5, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %5, align 8
  store i8 %24, i8* %25, align 1
  br label %27

27:                                               ; preds = %13, %22
  %28 = load i8*, i8** %5, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %5, align 8
  store i8 15, i8* %28, align 1
  %30 = load i8*, i8** %5, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %5, align 8
  store i8 58, i8* %30, align 1
  %32 = load i8*, i8** %5, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %5, align 8
  store i8 9, i8* %32, align 1
  %34 = shl i32 %1, 3
  %35 = and i32 %2, 7
  %36 = or i32 %35, %34
  %37 = trunc i32 %36 to i8
  %38 = or i8 %37, -64
  %39 = load i8*, i8** %5, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  store i8* %40, i8** %5, align 8
  store i8 %38, i8* %39, align 1
  %41 = trunc i32 %3 to i8
  %42 = or i8 %41, 8
  %43 = load i8*, i8** %5, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 1
  store i8* %44, i8** %5, align 8
  store i8 %42, i8* %43, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8movmskpdENS0_8RegisterENS0_11XMMRegisterE(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 102, i8* %13, align 1
  %15 = lshr i32 %1, 1
  %16 = and i32 %15, 4
  %17 = lshr i32 %2, 3
  %18 = and i32 %17, 1
  %19 = or i32 %18, %16
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %26, label %21

21:                                               ; preds = %12
  %22 = trunc i32 %19 to i8
  %23 = or i8 %22, 64
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %12, %21
  %27 = load i8*, i8** %4, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %4, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %4, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %4, align 8
  store i8 80, i8* %29, align 1
  %31 = shl i32 %1, 3
  %32 = and i32 %2, 7
  %33 = or i32 %32, %31
  %34 = trunc i32 %33 to i8
  %35 = or i8 %34, -64
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %4, align 8
  store i8 %35, i8* %36, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8movmskpsENS0_8RegisterENS0_11XMMRegisterE(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %11, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %11

11:                                               ; preds = %3, %10
  %12 = lshr i32 %1, 1
  %13 = and i32 %12, 4
  %14 = lshr i32 %2, 3
  %15 = and i32 %14, 1
  %16 = or i32 %15, %13
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %23, label %18

18:                                               ; preds = %11
  %19 = trunc i32 %16 to i8
  %20 = or i8 %19, 64
  %21 = load i8*, i8** %4, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %4, align 8
  store i8 %20, i8* %21, align 1
  br label %23

23:                                               ; preds = %11, %18
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 15, i8* %24, align 1
  %26 = load i8*, i8** %4, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %4, align 8
  store i8 80, i8* %26, align 1
  %28 = shl i32 %1, 3
  %29 = and i32 %2, 7
  %30 = or i32 %29, %28
  %31 = trunc i32 %30 to i8
  %32 = or i8 %31, -64
  %33 = load i8*, i8** %4, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %4, align 8
  store i8 %32, i8* %33, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8pmovmskbENS0_8RegisterENS0_11XMMRegisterE(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 102, i8* %13, align 1
  %15 = lshr i32 %1, 1
  %16 = and i32 %15, 4
  %17 = lshr i32 %2, 3
  %18 = and i32 %17, 1
  %19 = or i32 %18, %16
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %26, label %21

21:                                               ; preds = %12
  %22 = trunc i32 %19 to i8
  %23 = or i8 %22, 64
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %12, %21
  %27 = load i8*, i8** %4, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %4, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %4, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %4, align 8
  store i8 -41, i8* %29, align 1
  %31 = shl i32 %1, 3
  %32 = and i32 %2, 7
  %33 = or i32 %32, %31
  %34 = trunc i32 %33 to i8
  %35 = or i8 %34, -64
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %4, align 8
  store i8 %35, i8* %36, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8vmovddupENS0_11XMMRegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = icmp ugt i32 %2, 7
  %15 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %15, i8** %4, align 8
  br i1 %14, label %16, label %28

16:                                               ; preds = %12
  store i8 -60, i8* %13, align 1
  %17 = ashr i32 %1, 3
  %18 = shl nsw i32 %17, 2
  %19 = lshr i32 %2, 3
  %20 = or i32 %19, %18
  %21 = trunc i32 %20 to i8
  %22 = shl i8 %21, 5
  %23 = xor i8 %22, -31
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 %23, i8* %24, align 1
  %26 = load i8*, i8** %4, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %4, align 8
  store i8 123, i8* %26, align 1
  br label %35

28:                                               ; preds = %12
  store i8 -59, i8* %13, align 1
  %29 = lshr i32 %1, 3
  %30 = shl i32 %29, 7
  %31 = trunc i32 %30 to i8
  %32 = xor i8 %31, -5
  %33 = load i8*, i8** %4, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %4, align 8
  store i8 %32, i8* %33, align 1
  br label %35

35:                                               ; preds = %16, %28
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %4, align 8
  store i8 18, i8* %36, align 1
  %38 = shl i32 %1, 3
  %39 = and i32 %2, 7
  %40 = or i32 %39, %38
  %41 = trunc i32 %40 to i8
  %42 = or i8 %41, -64
  %43 = load i8*, i8** %4, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 1
  store i8* %44, i8** %4, align 8
  store i8 %42, i8* %43, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8vmovddupENS0_11XMMRegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = trunc i64 %2 to i8
  %16 = icmp eq i8 %15, 0
  %17 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %17, i8** %5, align 8
  br i1 %16, label %29, label %18

18:                                               ; preds = %13
  store i8 -60, i8* %14, align 1
  %19 = lshr i32 %1, 1
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 4
  %22 = or i8 %21, %15
  %23 = shl i8 %22, 5
  %24 = xor i8 %23, -31
  %25 = load i8*, i8** %5, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %5, align 8
  store i8 %24, i8* %25, align 1
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 123, i8* %27, align 1
  br label %36

29:                                               ; preds = %13
  store i8 -59, i8* %14, align 1
  %30 = lshr i32 %1, 3
  %31 = shl i32 %30, 7
  %32 = trunc i32 %31 to i8
  %33 = xor i8 %32, -5
  %34 = load i8*, i8** %5, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %5, align 8
  store i8 %33, i8* %34, align 1
  br label %36

36:                                               ; preds = %18, %29
  %37 = load i8*, i8** %5, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  store i8* %38, i8** %5, align 8
  store i8 18, i8* %37, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9vmovshdupENS0_11XMMRegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = icmp ugt i32 %2, 7
  %15 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %15, i8** %4, align 8
  br i1 %14, label %16, label %28

16:                                               ; preds = %12
  store i8 -60, i8* %13, align 1
  %17 = ashr i32 %1, 3
  %18 = shl nsw i32 %17, 2
  %19 = lshr i32 %2, 3
  %20 = or i32 %19, %18
  %21 = trunc i32 %20 to i8
  %22 = shl i8 %21, 5
  %23 = xor i8 %22, -31
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 %23, i8* %24, align 1
  %26 = load i8*, i8** %4, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %4, align 8
  store i8 122, i8* %26, align 1
  br label %35

28:                                               ; preds = %12
  store i8 -59, i8* %13, align 1
  %29 = lshr i32 %1, 3
  %30 = shl i32 %29, 7
  %31 = trunc i32 %30 to i8
  %32 = xor i8 %31, -6
  %33 = load i8*, i8** %4, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %4, align 8
  store i8 %32, i8* %33, align 1
  br label %35

35:                                               ; preds = %16, %28
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %4, align 8
  store i8 22, i8* %36, align 1
  %38 = shl i32 %1, 3
  %39 = and i32 %2, 7
  %40 = or i32 %39, %38
  %41 = trunc i32 %40 to i8
  %42 = or i8 %41, -64
  %43 = load i8*, i8** %4, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 1
  store i8* %44, i8** %4, align 8
  store i8 %42, i8* %43, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler12vbroadcastssENS0_11XMMRegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = trunc i64 %2 to i8
  %16 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %16, i8** %5, align 8
  store i8 -60, i8* %14, align 1
  %17 = lshr i32 %1, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 4
  %20 = or i8 %19, %15
  %21 = shl i8 %20, 5
  %22 = xor i8 %21, -30
  %23 = load i8*, i8** %5, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %5, align 8
  store i8 %22, i8* %23, align 1
  %25 = load i8*, i8** %5, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %5, align 8
  store i8 121, i8* %25, align 1
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 24, i8* %27, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler12vbroadcastssENS0_11XMMRegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 -60, i8* %13, align 1
  %15 = ashr i32 %1, 3
  %16 = shl nsw i32 %15, 2
  %17 = lshr i32 %2, 3
  %18 = or i32 %17, %16
  %19 = trunc i32 %18 to i8
  %20 = shl i8 %19, 5
  %21 = xor i8 %20, -30
  %22 = load i8*, i8** %4, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %4, align 8
  store i8 %21, i8* %22, align 1
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 121, i8* %24, align 1
  %26 = load i8*, i8** %4, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %4, align 8
  store i8 24, i8* %26, align 1
  %28 = shl i32 %1, 3
  %29 = and i32 %2, 7
  %30 = or i32 %29, %28
  %31 = trunc i32 %30 to i8
  %32 = or i8 %31, -64
  %33 = load i8*, i8** %4, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %4, align 8
  store i8 %32, i8* %33, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9fma_instrEhNS0_11XMMRegisterES2_S2_NS1_12VectorLengthENS1_10SIMDPrefixENS1_13LeadingOpcodeENS1_4VexWE(%"class.v8::internal::Assembler"*, i8 zeroext, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #1 align 2 {
  %10 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 -32
  %15 = icmp ult i8* %11, %14
  br i1 %15, label %18, label %16, !prof !11

16:                                               ; preds = %9
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %17 = load i8*, i8** %10, align 8
  br label %18

18:                                               ; preds = %9, %16
  %19 = phi i8* [ %11, %9 ], [ %17, %16 ]
  %20 = ashr i32 %4, 3
  %21 = icmp ne i32 %7, 1
  %22 = or i32 %20, %8
  %23 = icmp ne i32 %22, 0
  %24 = or i1 %21, %23
  %25 = getelementptr inbounds i8, i8* %19, i64 1
  store i8* %25, i8** %10, align 8
  br i1 %24, label %26, label %46

26:                                               ; preds = %18
  store i8 -60, i8* %19, align 1
  %27 = ashr i32 %2, 3
  %28 = shl nsw i32 %27, 2
  %29 = lshr i32 %4, 3
  %30 = or i32 %29, %28
  %31 = shl i32 %30, 5
  %32 = xor i32 %31, 224
  %33 = or i32 %32, %7
  %34 = trunc i32 %33 to i8
  %35 = load i8*, i8** %10, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 1
  store i8* %36, i8** %10, align 8
  store i8 %34, i8* %35, align 1
  %37 = shl i32 %3, 3
  %38 = and i32 %37, 120
  %39 = xor i32 %38, 120
  %40 = or i32 %6, %5
  %41 = or i32 %40, %39
  %42 = or i32 %41, %8
  %43 = trunc i32 %42 to i8
  %44 = load i8*, i8** %10, align 8
  %45 = getelementptr inbounds i8, i8* %44, i64 1
  store i8* %45, i8** %10, align 8
  store i8 %43, i8* %44, align 1
  br label %57

46:                                               ; preds = %18
  store i8 -59, i8* %19, align 1
  %47 = lshr i32 %2, 3
  %48 = shl i32 %47, 4
  %49 = or i32 %48, %3
  %50 = shl i32 %49, 3
  %51 = xor i32 %50, 248
  %52 = or i32 %6, %5
  %53 = or i32 %52, %51
  %54 = trunc i32 %53 to i8
  %55 = load i8*, i8** %10, align 8
  %56 = getelementptr inbounds i8, i8* %55, i64 1
  store i8* %56, i8** %10, align 8
  store i8 %54, i8* %55, align 1
  br label %57

57:                                               ; preds = %26, %46
  %58 = load i8*, i8** %10, align 8
  %59 = getelementptr inbounds i8, i8* %58, i64 1
  store i8* %59, i8** %10, align 8
  store i8 %1, i8* %58, align 1
  %60 = shl i32 %2, 3
  %61 = and i32 %4, 7
  %62 = or i32 %61, %60
  %63 = trunc i32 %62 to i8
  %64 = or i8 %63, -64
  %65 = load i8*, i8** %10, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 1
  store i8* %66, i8** %10, align 8
  store i8 %64, i8* %65, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9fma_instrEhNS0_11XMMRegisterES2_NS0_7OperandENS1_12VectorLengthENS1_10SIMDPrefixENS1_13LeadingOpcodeENS1_4VexWE(%"class.v8::internal::Assembler"*, i8 zeroext, i32, i32, i64, i32, i32, i32, i32, i32) local_unnamed_addr #1 align 2 {
  %11 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 -32
  %16 = icmp ult i8* %12, %15
  br i1 %16, label %19, label %17, !prof !11

17:                                               ; preds = %10
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %18 = load i8*, i8** %11, align 8
  br label %19

19:                                               ; preds = %10, %17
  %20 = phi i8* [ %12, %10 ], [ %18, %17 ]
  %21 = trunc i64 %4 to i8
  %22 = icmp ne i8 %21, 0
  %23 = icmp ne i32 %8, 1
  %24 = or i1 %22, %23
  %25 = icmp ne i32 %9, 0
  %26 = or i1 %24, %25
  %27 = getelementptr inbounds i8, i8* %20, i64 1
  store i8* %27, i8** %11, align 8
  br i1 %26, label %28, label %48

28:                                               ; preds = %19
  store i8 -60, i8* %20, align 1
  %29 = lshr i32 %2, 1
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 4
  %32 = or i8 %31, %21
  %33 = shl i8 %32, 5
  %34 = xor i8 %33, -32
  %35 = trunc i32 %8 to i8
  %36 = or i8 %34, %35
  %37 = load i8*, i8** %11, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  store i8* %38, i8** %11, align 8
  store i8 %36, i8* %37, align 1
  %39 = shl i32 %3, 3
  %40 = and i32 %39, 120
  %41 = xor i32 %40, 120
  %42 = or i32 %7, %6
  %43 = or i32 %42, %41
  %44 = or i32 %43, %9
  %45 = trunc i32 %44 to i8
  %46 = load i8*, i8** %11, align 8
  %47 = getelementptr inbounds i8, i8* %46, i64 1
  store i8* %47, i8** %11, align 8
  store i8 %45, i8* %46, align 1
  br label %59

48:                                               ; preds = %19
  store i8 -59, i8* %20, align 1
  %49 = lshr i32 %2, 3
  %50 = shl i32 %49, 4
  %51 = or i32 %50, %3
  %52 = shl i32 %51, 3
  %53 = xor i32 %52, 248
  %54 = or i32 %7, %6
  %55 = or i32 %54, %53
  %56 = trunc i32 %55 to i8
  %57 = load i8*, i8** %11, align 8
  %58 = getelementptr inbounds i8, i8* %57, i64 1
  store i8* %58, i8** %11, align 8
  store i8 %56, i8* %57, align 1
  br label %59

59:                                               ; preds = %28, %48
  %60 = load i8*, i8** %11, align 8
  %61 = getelementptr inbounds i8, i8* %60, i64 1
  store i8* %61, i8** %11, align 8
  store i8 %1, i8* %60, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %2, i64 %4, i32 %5) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5vmovdENS0_11XMMRegisterENS0_8RegisterE(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = icmp ugt i32 %2, 7
  %15 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %15, i8** %4, align 8
  br i1 %14, label %16, label %28

16:                                               ; preds = %12
  store i8 -60, i8* %13, align 1
  %17 = ashr i32 %1, 3
  %18 = shl nsw i32 %17, 2
  %19 = lshr i32 %2, 3
  %20 = or i32 %19, %18
  %21 = trunc i32 %20 to i8
  %22 = shl i8 %21, 5
  %23 = xor i8 %22, -31
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 %23, i8* %24, align 1
  %26 = load i8*, i8** %4, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %4, align 8
  store i8 121, i8* %26, align 1
  br label %35

28:                                               ; preds = %12
  store i8 -59, i8* %13, align 1
  %29 = lshr i32 %1, 3
  %30 = shl i32 %29, 7
  %31 = trunc i32 %30 to i8
  %32 = xor i8 %31, -7
  %33 = load i8*, i8** %4, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %4, align 8
  store i8 %32, i8* %33, align 1
  br label %35

35:                                               ; preds = %16, %28
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %4, align 8
  store i8 110, i8* %36, align 1
  %38 = shl i32 %1, 3
  %39 = and i32 %2, 7
  %40 = or i32 %39, %38
  %41 = trunc i32 %40 to i8
  %42 = or i8 %41, -64
  %43 = load i8*, i8** %4, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 1
  store i8* %44, i8** %4, align 8
  store i8 %42, i8* %43, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5vmovdENS0_11XMMRegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = trunc i64 %2 to i8
  %16 = icmp eq i8 %15, 0
  %17 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %17, i8** %5, align 8
  br i1 %16, label %29, label %18

18:                                               ; preds = %13
  store i8 -60, i8* %14, align 1
  %19 = lshr i32 %1, 1
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 4
  %22 = or i8 %21, %15
  %23 = shl i8 %22, 5
  %24 = xor i8 %23, -31
  %25 = load i8*, i8** %5, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %5, align 8
  store i8 %24, i8* %25, align 1
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 121, i8* %27, align 1
  br label %36

29:                                               ; preds = %13
  store i8 -59, i8* %14, align 1
  %30 = lshr i32 %1, 3
  %31 = shl i32 %30, 7
  %32 = trunc i32 %31 to i8
  %33 = xor i8 %32, -7
  %34 = load i8*, i8** %5, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %5, align 8
  store i8 %33, i8* %34, align 1
  br label %36

36:                                               ; preds = %18, %29
  %37 = load i8*, i8** %5, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  store i8* %38, i8** %5, align 8
  store i8 110, i8* %37, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5vmovdENS0_8RegisterENS0_11XMMRegisterE(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = icmp ugt i32 %1, 7
  %15 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %15, i8** %4, align 8
  br i1 %14, label %16, label %28

16:                                               ; preds = %12
  store i8 -60, i8* %13, align 1
  %17 = ashr i32 %2, 3
  %18 = shl nsw i32 %17, 2
  %19 = lshr i32 %1, 3
  %20 = or i32 %18, %19
  %21 = trunc i32 %20 to i8
  %22 = shl i8 %21, 5
  %23 = xor i8 %22, -31
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 %23, i8* %24, align 1
  %26 = load i8*, i8** %4, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %4, align 8
  store i8 121, i8* %26, align 1
  br label %35

28:                                               ; preds = %12
  store i8 -59, i8* %13, align 1
  %29 = lshr i32 %2, 3
  %30 = shl i32 %29, 7
  %31 = trunc i32 %30 to i8
  %32 = xor i8 %31, -7
  %33 = load i8*, i8** %4, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %4, align 8
  store i8 %32, i8* %33, align 1
  br label %35

35:                                               ; preds = %16, %28
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %4, align 8
  store i8 126, i8* %36, align 1
  %38 = shl i32 %2, 3
  %39 = and i32 %1, 7
  %40 = or i32 %38, %39
  %41 = trunc i32 %40 to i8
  %42 = or i8 %41, -64
  %43 = load i8*, i8** %4, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 1
  store i8* %44, i8** %4, align 8
  store i8 %42, i8* %43, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5vmovqENS0_11XMMRegisterENS0_8RegisterE(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 -60, i8* %13, align 1
  %15 = ashr i32 %1, 3
  %16 = shl nsw i32 %15, 2
  %17 = lshr i32 %2, 3
  %18 = or i32 %17, %16
  %19 = trunc i32 %18 to i8
  %20 = shl i8 %19, 5
  %21 = xor i8 %20, -31
  %22 = load i8*, i8** %4, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %4, align 8
  store i8 %21, i8* %22, align 1
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 -7, i8* %24, align 1
  %26 = load i8*, i8** %4, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %4, align 8
  store i8 110, i8* %26, align 1
  %28 = shl i32 %1, 3
  %29 = and i32 %2, 7
  %30 = or i32 %29, %28
  %31 = trunc i32 %30 to i8
  %32 = or i8 %31, -64
  %33 = load i8*, i8** %4, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %4, align 8
  store i8 %32, i8* %33, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5vmovqENS0_11XMMRegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = trunc i64 %2 to i8
  %16 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %16, i8** %5, align 8
  store i8 -60, i8* %14, align 1
  %17 = lshr i32 %1, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 4
  %20 = or i8 %19, %15
  %21 = shl i8 %20, 5
  %22 = xor i8 %21, -31
  %23 = load i8*, i8** %5, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %5, align 8
  store i8 %22, i8* %23, align 1
  %25 = load i8*, i8** %5, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %5, align 8
  store i8 -7, i8* %25, align 1
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 110, i8* %27, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5vmovqENS0_8RegisterENS0_11XMMRegisterE(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 -60, i8* %13, align 1
  %15 = ashr i32 %2, 3
  %16 = shl nsw i32 %15, 2
  %17 = lshr i32 %1, 3
  %18 = or i32 %16, %17
  %19 = trunc i32 %18 to i8
  %20 = shl i8 %19, 5
  %21 = xor i8 %20, -31
  %22 = load i8*, i8** %4, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %4, align 8
  store i8 %21, i8* %22, align 1
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 -7, i8* %24, align 1
  %26 = load i8*, i8** %4, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %4, align 8
  store i8 126, i8* %26, align 1
  %28 = shl i32 %2, 3
  %29 = and i32 %1, 7
  %30 = or i32 %28, %29
  %31 = trunc i32 %30 to i8
  %32 = or i8 %31, -64
  %33 = load i8*, i8** %4, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %4, align 8
  store i8 %32, i8* %33, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7vmovdqaENS0_11XMMRegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = trunc i64 %2 to i8
  %16 = icmp eq i8 %15, 0
  %17 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %17, i8** %5, align 8
  br i1 %16, label %29, label %18

18:                                               ; preds = %13
  store i8 -60, i8* %14, align 1
  %19 = lshr i32 %1, 1
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 4
  %22 = or i8 %21, %15
  %23 = shl i8 %22, 5
  %24 = xor i8 %23, -31
  %25 = load i8*, i8** %5, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %5, align 8
  store i8 %24, i8* %25, align 1
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 121, i8* %27, align 1
  br label %36

29:                                               ; preds = %13
  store i8 -59, i8* %14, align 1
  %30 = lshr i32 %1, 3
  %31 = shl i32 %30, 7
  %32 = trunc i32 %31 to i8
  %33 = xor i8 %32, -7
  %34 = load i8*, i8** %5, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %5, align 8
  store i8 %33, i8* %34, align 1
  br label %36

36:                                               ; preds = %18, %29
  %37 = load i8*, i8** %5, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  store i8* %38, i8** %5, align 8
  store i8 111, i8* %37, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7vmovdqaENS0_11XMMRegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = icmp ugt i32 %2, 7
  %15 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %15, i8** %4, align 8
  br i1 %14, label %16, label %28

16:                                               ; preds = %12
  store i8 -60, i8* %13, align 1
  %17 = ashr i32 %1, 3
  %18 = shl nsw i32 %17, 2
  %19 = lshr i32 %2, 3
  %20 = or i32 %19, %18
  %21 = trunc i32 %20 to i8
  %22 = shl i8 %21, 5
  %23 = xor i8 %22, -31
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 %23, i8* %24, align 1
  %26 = load i8*, i8** %4, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %4, align 8
  store i8 121, i8* %26, align 1
  br label %35

28:                                               ; preds = %12
  store i8 -59, i8* %13, align 1
  %29 = lshr i32 %1, 3
  %30 = shl i32 %29, 7
  %31 = trunc i32 %30 to i8
  %32 = xor i8 %31, -7
  %33 = load i8*, i8** %4, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %4, align 8
  store i8 %32, i8* %33, align 1
  br label %35

35:                                               ; preds = %16, %28
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %4, align 8
  store i8 111, i8* %36, align 1
  %38 = shl i32 %1, 3
  %39 = and i32 %2, 7
  %40 = or i32 %39, %38
  %41 = trunc i32 %40 to i8
  %42 = or i8 %41, -64
  %43 = load i8*, i8** %4, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 1
  store i8* %44, i8** %4, align 8
  store i8 %42, i8* %43, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7vmovdquENS0_11XMMRegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = trunc i64 %2 to i8
  %16 = icmp eq i8 %15, 0
  %17 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %17, i8** %5, align 8
  br i1 %16, label %29, label %18

18:                                               ; preds = %13
  store i8 -60, i8* %14, align 1
  %19 = lshr i32 %1, 1
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 4
  %22 = or i8 %21, %15
  %23 = shl i8 %22, 5
  %24 = xor i8 %23, -31
  %25 = load i8*, i8** %5, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %5, align 8
  store i8 %24, i8* %25, align 1
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 122, i8* %27, align 1
  br label %36

29:                                               ; preds = %13
  store i8 -59, i8* %14, align 1
  %30 = lshr i32 %1, 3
  %31 = shl i32 %30, 7
  %32 = trunc i32 %31 to i8
  %33 = xor i8 %32, -6
  %34 = load i8*, i8** %5, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %5, align 8
  store i8 %33, i8* %34, align 1
  br label %36

36:                                               ; preds = %18, %29
  %37 = load i8*, i8** %5, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  store i8* %38, i8** %5, align 8
  store i8 111, i8* %37, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7vmovdquENS0_7OperandENS0_11XMMRegisterE(%"class.v8::internal::Assembler"*, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = trunc i64 %1 to i8
  %16 = icmp eq i8 %15, 0
  %17 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %17, i8** %5, align 8
  br i1 %16, label %29, label %18

18:                                               ; preds = %13
  store i8 -60, i8* %14, align 1
  %19 = lshr i32 %3, 1
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 4
  %22 = or i8 %21, %15
  %23 = shl i8 %22, 5
  %24 = xor i8 %23, -31
  %25 = load i8*, i8** %5, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %5, align 8
  store i8 %24, i8* %25, align 1
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 122, i8* %27, align 1
  br label %36

29:                                               ; preds = %13
  store i8 -59, i8* %14, align 1
  %30 = lshr i32 %3, 3
  %31 = shl i32 %30, 7
  %32 = trunc i32 %31 to i8
  %33 = xor i8 %32, -6
  %34 = load i8*, i8** %5, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %5, align 8
  store i8 %33, i8* %34, align 1
  br label %36

36:                                               ; preds = %18, %29
  %37 = load i8*, i8** %5, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  store i8* %38, i8** %5, align 8
  store i8 127, i8* %37, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %3, i64 %1, i32 %2) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7vmovdquENS0_11XMMRegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = icmp ugt i32 %1, 7
  %15 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %15, i8** %4, align 8
  br i1 %14, label %16, label %28

16:                                               ; preds = %12
  store i8 -60, i8* %13, align 1
  %17 = ashr i32 %2, 3
  %18 = shl nsw i32 %17, 2
  %19 = lshr i32 %1, 3
  %20 = or i32 %18, %19
  %21 = trunc i32 %20 to i8
  %22 = shl i8 %21, 5
  %23 = xor i8 %22, -31
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 %23, i8* %24, align 1
  %26 = load i8*, i8** %4, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %4, align 8
  store i8 122, i8* %26, align 1
  br label %35

28:                                               ; preds = %12
  store i8 -59, i8* %13, align 1
  %29 = lshr i32 %2, 3
  %30 = shl i32 %29, 7
  %31 = trunc i32 %30 to i8
  %32 = xor i8 %31, -6
  %33 = load i8*, i8** %4, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %4, align 8
  store i8 %32, i8* %33, align 1
  br label %35

35:                                               ; preds = %16, %28
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %4, align 8
  store i8 127, i8* %36, align 1
  %38 = shl i32 %2, 3
  %39 = and i32 %1, 7
  %40 = or i32 %38, %39
  %41 = trunc i32 %40 to i8
  %42 = or i8 %41, -64
  %43 = load i8*, i8** %4, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 1
  store i8* %44, i8** %4, align 8
  store i8 %42, i8* %43, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7vmovlpsENS0_11XMMRegisterES2_NS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %14, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %13 = load i8*, i8** %6, align 8
  br label %14

14:                                               ; preds = %5, %12
  %15 = phi i8* [ %7, %5 ], [ %13, %12 ]
  %16 = trunc i64 %3 to i8
  %17 = icmp eq i8 %16, 0
  %18 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %18, i8** %6, align 8
  br i1 %17, label %34, label %19

19:                                               ; preds = %14
  store i8 -60, i8* %15, align 1
  %20 = lshr i32 %1, 1
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 4
  %23 = or i8 %22, %16
  %24 = shl i8 %23, 5
  %25 = xor i8 %24, -31
  %26 = load i8*, i8** %6, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %6, align 8
  store i8 %25, i8* %26, align 1
  %28 = trunc i32 %2 to i8
  %29 = shl i8 %28, 3
  %30 = and i8 %29, 120
  %31 = xor i8 %30, 120
  %32 = load i8*, i8** %6, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %6, align 8
  store i8 %31, i8* %32, align 1
  br label %43

34:                                               ; preds = %14
  store i8 -59, i8* %15, align 1
  %35 = lshr i32 %1, 3
  %36 = shl i32 %35, 4
  %37 = or i32 %36, %2
  %38 = trunc i32 %37 to i8
  %39 = shl i8 %38, 3
  %40 = xor i8 %39, -8
  %41 = load i8*, i8** %6, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %42, i8** %6, align 8
  store i8 %40, i8* %41, align 1
  br label %43

43:                                               ; preds = %19, %34
  %44 = load i8*, i8** %6, align 8
  %45 = getelementptr inbounds i8, i8* %44, i64 1
  store i8* %45, i8** %6, align 8
  store i8 18, i8* %44, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %3, i32 %4) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7vmovlpsENS0_7OperandENS0_11XMMRegisterE(%"class.v8::internal::Assembler"*, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = trunc i64 %1 to i8
  %16 = icmp eq i8 %15, 0
  %17 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %17, i8** %5, align 8
  br i1 %16, label %29, label %18

18:                                               ; preds = %13
  store i8 -60, i8* %14, align 1
  %19 = lshr i32 %3, 1
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 4
  %22 = or i8 %21, %15
  %23 = shl i8 %22, 5
  %24 = xor i8 %23, -31
  %25 = load i8*, i8** %5, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %5, align 8
  store i8 %24, i8* %25, align 1
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 120, i8* %27, align 1
  br label %36

29:                                               ; preds = %13
  store i8 -59, i8* %14, align 1
  %30 = lshr i32 %3, 3
  %31 = shl i32 %30, 7
  %32 = trunc i32 %31 to i8
  %33 = xor i8 %32, -8
  %34 = load i8*, i8** %5, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %5, align 8
  store i8 %33, i8* %34, align 1
  br label %36

36:                                               ; preds = %18, %29
  %37 = load i8*, i8** %5, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  store i8* %38, i8** %5, align 8
  store i8 19, i8* %37, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %3, i64 %1, i32 %2) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7vmovhpsENS0_11XMMRegisterES2_NS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %14, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %13 = load i8*, i8** %6, align 8
  br label %14

14:                                               ; preds = %5, %12
  %15 = phi i8* [ %7, %5 ], [ %13, %12 ]
  %16 = trunc i64 %3 to i8
  %17 = icmp eq i8 %16, 0
  %18 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %18, i8** %6, align 8
  br i1 %17, label %34, label %19

19:                                               ; preds = %14
  store i8 -60, i8* %15, align 1
  %20 = lshr i32 %1, 1
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 4
  %23 = or i8 %22, %16
  %24 = shl i8 %23, 5
  %25 = xor i8 %24, -31
  %26 = load i8*, i8** %6, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %6, align 8
  store i8 %25, i8* %26, align 1
  %28 = trunc i32 %2 to i8
  %29 = shl i8 %28, 3
  %30 = and i8 %29, 120
  %31 = xor i8 %30, 120
  %32 = load i8*, i8** %6, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %6, align 8
  store i8 %31, i8* %32, align 1
  br label %43

34:                                               ; preds = %14
  store i8 -59, i8* %15, align 1
  %35 = lshr i32 %1, 3
  %36 = shl i32 %35, 4
  %37 = or i32 %36, %2
  %38 = trunc i32 %37 to i8
  %39 = shl i8 %38, 3
  %40 = xor i8 %39, -8
  %41 = load i8*, i8** %6, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %42, i8** %6, align 8
  store i8 %40, i8* %41, align 1
  br label %43

43:                                               ; preds = %19, %34
  %44 = load i8*, i8** %6, align 8
  %45 = getelementptr inbounds i8, i8* %44, i64 1
  store i8* %45, i8** %6, align 8
  store i8 22, i8* %44, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %3, i32 %4) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7vmovhpsENS0_7OperandENS0_11XMMRegisterE(%"class.v8::internal::Assembler"*, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = trunc i64 %1 to i8
  %16 = icmp eq i8 %15, 0
  %17 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %17, i8** %5, align 8
  br i1 %16, label %29, label %18

18:                                               ; preds = %13
  store i8 -60, i8* %14, align 1
  %19 = lshr i32 %3, 1
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 4
  %22 = or i8 %21, %15
  %23 = shl i8 %22, 5
  %24 = xor i8 %23, -31
  %25 = load i8*, i8** %5, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %5, align 8
  store i8 %24, i8* %25, align 1
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 120, i8* %27, align 1
  br label %36

29:                                               ; preds = %13
  store i8 -59, i8* %14, align 1
  %30 = lshr i32 %3, 3
  %31 = shl i32 %30, 7
  %32 = trunc i32 %31 to i8
  %33 = xor i8 %32, -8
  %34 = load i8*, i8** %5, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %5, align 8
  store i8 %33, i8* %34, align 1
  br label %36

36:                                               ; preds = %18, %29
  %37 = load i8*, i8** %5, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  store i8* %38, i8** %5, align 8
  store i8 23, i8* %37, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %3, i64 %1, i32 %2) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6vinstrEhNS0_11XMMRegisterES2_S2_NS1_10SIMDPrefixENS1_13LeadingOpcodeENS1_4VexWENS0_10CpuFeatureE(%"class.v8::internal::Assembler"*, i8 zeroext, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #1 align 2 {
  %10 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 -32
  %15 = icmp ult i8* %11, %14
  br i1 %15, label %18, label %16, !prof !11

16:                                               ; preds = %9
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %17 = load i8*, i8** %10, align 8
  br label %18

18:                                               ; preds = %9, %16
  %19 = phi i8* [ %11, %9 ], [ %17, %16 ]
  %20 = ashr i32 %4, 3
  %21 = icmp ne i32 %6, 1
  %22 = or i32 %20, %7
  %23 = icmp ne i32 %22, 0
  %24 = or i1 %21, %23
  %25 = getelementptr inbounds i8, i8* %19, i64 1
  store i8* %25, i8** %10, align 8
  br i1 %24, label %26, label %45

26:                                               ; preds = %18
  store i8 -60, i8* %19, align 1
  %27 = ashr i32 %2, 3
  %28 = shl nsw i32 %27, 2
  %29 = lshr i32 %4, 3
  %30 = or i32 %29, %28
  %31 = shl i32 %30, 5
  %32 = xor i32 %31, 224
  %33 = or i32 %32, %6
  %34 = trunc i32 %33 to i8
  %35 = load i8*, i8** %10, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 1
  store i8* %36, i8** %10, align 8
  store i8 %34, i8* %35, align 1
  %37 = shl i32 %3, 3
  %38 = and i32 %37, 120
  %39 = xor i32 %38, 120
  %40 = or i32 %39, %5
  %41 = or i32 %40, %7
  %42 = trunc i32 %41 to i8
  %43 = load i8*, i8** %10, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 1
  store i8* %44, i8** %10, align 8
  store i8 %42, i8* %43, align 1
  br label %55

45:                                               ; preds = %18
  store i8 -59, i8* %19, align 1
  %46 = lshr i32 %2, 3
  %47 = shl i32 %46, 4
  %48 = or i32 %47, %3
  %49 = shl i32 %48, 3
  %50 = xor i32 %49, 248
  %51 = or i32 %50, %5
  %52 = trunc i32 %51 to i8
  %53 = load i8*, i8** %10, align 8
  %54 = getelementptr inbounds i8, i8* %53, i64 1
  store i8* %54, i8** %10, align 8
  store i8 %52, i8* %53, align 1
  br label %55

55:                                               ; preds = %26, %45
  %56 = load i8*, i8** %10, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 1
  store i8* %57, i8** %10, align 8
  store i8 %1, i8* %56, align 1
  %58 = shl i32 %2, 3
  %59 = and i32 %4, 7
  %60 = or i32 %59, %58
  %61 = trunc i32 %60 to i8
  %62 = or i8 %61, -64
  %63 = load i8*, i8** %10, align 8
  %64 = getelementptr inbounds i8, i8* %63, i64 1
  store i8* %64, i8** %10, align 8
  store i8 %62, i8* %63, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6vinstrEhNS0_11XMMRegisterES2_NS0_7OperandENS1_10SIMDPrefixENS1_13LeadingOpcodeENS1_4VexWENS0_10CpuFeatureE(%"class.v8::internal::Assembler"*, i8 zeroext, i32, i32, i64, i32, i32, i32, i32, i32) local_unnamed_addr #1 align 2 {
  %11 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 -32
  %16 = icmp ult i8* %12, %15
  br i1 %16, label %19, label %17, !prof !11

17:                                               ; preds = %10
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %18 = load i8*, i8** %11, align 8
  br label %19

19:                                               ; preds = %10, %17
  %20 = phi i8* [ %12, %10 ], [ %18, %17 ]
  %21 = trunc i64 %4 to i8
  %22 = icmp ne i8 %21, 0
  %23 = icmp ne i32 %7, 1
  %24 = or i1 %22, %23
  %25 = icmp ne i32 %8, 0
  %26 = or i1 %24, %25
  %27 = getelementptr inbounds i8, i8* %20, i64 1
  store i8* %27, i8** %11, align 8
  br i1 %26, label %28, label %47

28:                                               ; preds = %19
  store i8 -60, i8* %20, align 1
  %29 = lshr i32 %2, 1
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 4
  %32 = or i8 %31, %21
  %33 = shl i8 %32, 5
  %34 = xor i8 %33, -32
  %35 = trunc i32 %7 to i8
  %36 = or i8 %34, %35
  %37 = load i8*, i8** %11, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  store i8* %38, i8** %11, align 8
  store i8 %36, i8* %37, align 1
  %39 = shl i32 %3, 3
  %40 = and i32 %39, 120
  %41 = xor i32 %40, 120
  %42 = or i32 %41, %6
  %43 = or i32 %42, %8
  %44 = trunc i32 %43 to i8
  %45 = load i8*, i8** %11, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 1
  store i8* %46, i8** %11, align 8
  store i8 %44, i8* %45, align 1
  br label %57

47:                                               ; preds = %19
  store i8 -59, i8* %20, align 1
  %48 = lshr i32 %2, 3
  %49 = shl i32 %48, 4
  %50 = or i32 %49, %3
  %51 = shl i32 %50, 3
  %52 = xor i32 %51, 248
  %53 = or i32 %52, %6
  %54 = trunc i32 %53 to i8
  %55 = load i8*, i8** %11, align 8
  %56 = getelementptr inbounds i8, i8* %55, i64 1
  store i8* %56, i8** %11, align 8
  store i8 %54, i8* %55, align 1
  br label %57

57:                                               ; preds = %28, %47
  %58 = load i8*, i8** %11, align 8
  %59 = getelementptr inbounds i8, i8* %58, i64 1
  store i8* %59, i8** %11, align 8
  store i8 %1, i8* %58, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %2, i64 %4, i32 %5) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler3vpsEhNS0_11XMMRegisterES2_S2_(%"class.v8::internal::Assembler"*, i8 zeroext, i32, i32, i32) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %14, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %13 = load i8*, i8** %6, align 8
  br label %14

14:                                               ; preds = %5, %12
  %15 = phi i8* [ %7, %5 ], [ %13, %12 ]
  %16 = icmp ugt i32 %4, 7
  %17 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %17, i8** %6, align 8
  br i1 %16, label %18, label %34

18:                                               ; preds = %14
  store i8 -60, i8* %15, align 1
  %19 = ashr i32 %2, 3
  %20 = shl nsw i32 %19, 2
  %21 = lshr i32 %4, 3
  %22 = or i32 %21, %20
  %23 = trunc i32 %22 to i8
  %24 = shl i8 %23, 5
  %25 = xor i8 %24, -31
  %26 = load i8*, i8** %6, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %6, align 8
  store i8 %25, i8* %26, align 1
  %28 = trunc i32 %3 to i8
  %29 = shl i8 %28, 3
  %30 = and i8 %29, 120
  %31 = xor i8 %30, 120
  %32 = load i8*, i8** %6, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %6, align 8
  store i8 %31, i8* %32, align 1
  br label %43

34:                                               ; preds = %14
  store i8 -59, i8* %15, align 1
  %35 = lshr i32 %2, 3
  %36 = shl i32 %35, 4
  %37 = or i32 %36, %3
  %38 = trunc i32 %37 to i8
  %39 = shl i8 %38, 3
  %40 = xor i8 %39, -8
  %41 = load i8*, i8** %6, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %42, i8** %6, align 8
  store i8 %40, i8* %41, align 1
  br label %43

43:                                               ; preds = %18, %34
  %44 = load i8*, i8** %6, align 8
  %45 = getelementptr inbounds i8, i8* %44, i64 1
  store i8* %45, i8** %6, align 8
  store i8 %1, i8* %44, align 1
  %46 = shl i32 %2, 3
  %47 = and i32 %4, 7
  %48 = or i32 %47, %46
  %49 = trunc i32 %48 to i8
  %50 = or i8 %49, -64
  %51 = load i8*, i8** %6, align 8
  %52 = getelementptr inbounds i8, i8* %51, i64 1
  store i8* %52, i8** %6, align 8
  store i8 %50, i8* %51, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler3vpsEhNS0_11XMMRegisterES2_NS0_7OperandE(%"class.v8::internal::Assembler"*, i8 zeroext, i32, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 -32
  %12 = icmp ult i8* %8, %11
  br i1 %12, label %15, label %13, !prof !11

13:                                               ; preds = %6
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %14 = load i8*, i8** %7, align 8
  br label %15

15:                                               ; preds = %6, %13
  %16 = phi i8* [ %8, %6 ], [ %14, %13 ]
  %17 = trunc i64 %4 to i8
  %18 = icmp eq i8 %17, 0
  %19 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %19, i8** %7, align 8
  br i1 %18, label %35, label %20

20:                                               ; preds = %15
  store i8 -60, i8* %16, align 1
  %21 = lshr i32 %2, 1
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 4
  %24 = or i8 %23, %17
  %25 = shl i8 %24, 5
  %26 = xor i8 %25, -31
  %27 = load i8*, i8** %7, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %7, align 8
  store i8 %26, i8* %27, align 1
  %29 = trunc i32 %3 to i8
  %30 = shl i8 %29, 3
  %31 = and i8 %30, 120
  %32 = xor i8 %31, 120
  %33 = load i8*, i8** %7, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %7, align 8
  store i8 %32, i8* %33, align 1
  br label %44

35:                                               ; preds = %15
  store i8 -59, i8* %16, align 1
  %36 = lshr i32 %2, 3
  %37 = shl i32 %36, 4
  %38 = or i32 %37, %3
  %39 = trunc i32 %38 to i8
  %40 = shl i8 %39, 3
  %41 = xor i8 %40, -8
  %42 = load i8*, i8** %7, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 1
  store i8* %43, i8** %7, align 8
  store i8 %41, i8* %42, align 1
  br label %44

44:                                               ; preds = %20, %35
  %45 = load i8*, i8** %7, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 1
  store i8* %46, i8** %7, align 8
  store i8 %1, i8* %45, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %2, i64 %4, i32 %5) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler3vpsEhNS0_11XMMRegisterES2_S2_h(%"class.v8::internal::Assembler"*, i8 zeroext, i32, i32, i32, i8 zeroext) local_unnamed_addr #1 align 2 {
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 -32
  %12 = icmp ult i8* %8, %11
  br i1 %12, label %15, label %13, !prof !11

13:                                               ; preds = %6
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %14 = load i8*, i8** %7, align 8
  br label %15

15:                                               ; preds = %6, %13
  %16 = phi i8* [ %8, %6 ], [ %14, %13 ]
  %17 = icmp ugt i32 %4, 7
  %18 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %18, i8** %7, align 8
  br i1 %17, label %19, label %35

19:                                               ; preds = %15
  store i8 -60, i8* %16, align 1
  %20 = ashr i32 %2, 3
  %21 = shl nsw i32 %20, 2
  %22 = lshr i32 %4, 3
  %23 = or i32 %22, %21
  %24 = trunc i32 %23 to i8
  %25 = shl i8 %24, 5
  %26 = xor i8 %25, -31
  %27 = load i8*, i8** %7, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %7, align 8
  store i8 %26, i8* %27, align 1
  %29 = trunc i32 %3 to i8
  %30 = shl i8 %29, 3
  %31 = and i8 %30, 120
  %32 = xor i8 %31, 120
  %33 = load i8*, i8** %7, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %7, align 8
  store i8 %32, i8* %33, align 1
  br label %44

35:                                               ; preds = %15
  store i8 -59, i8* %16, align 1
  %36 = lshr i32 %2, 3
  %37 = shl i32 %36, 4
  %38 = or i32 %37, %3
  %39 = trunc i32 %38 to i8
  %40 = shl i8 %39, 3
  %41 = xor i8 %40, -8
  %42 = load i8*, i8** %7, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 1
  store i8* %43, i8** %7, align 8
  store i8 %41, i8* %42, align 1
  br label %44

44:                                               ; preds = %19, %35
  %45 = load i8*, i8** %7, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 1
  store i8* %46, i8** %7, align 8
  store i8 %1, i8* %45, align 1
  %47 = shl i32 %2, 3
  %48 = and i32 %4, 7
  %49 = or i32 %48, %47
  %50 = trunc i32 %49 to i8
  %51 = or i8 %50, -64
  %52 = load i8*, i8** %7, align 8
  %53 = getelementptr inbounds i8, i8* %52, i64 1
  store i8* %53, i8** %7, align 8
  store i8 %51, i8* %52, align 1
  %54 = load i8*, i8** %7, align 8
  %55 = getelementptr inbounds i8, i8* %54, i64 1
  store i8* %55, i8** %7, align 8
  store i8 %5, i8* %54, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler3vpdEhNS0_11XMMRegisterES2_S2_(%"class.v8::internal::Assembler"*, i8 zeroext, i32, i32, i32) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %14, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %13 = load i8*, i8** %6, align 8
  br label %14

14:                                               ; preds = %5, %12
  %15 = phi i8* [ %7, %5 ], [ %13, %12 ]
  %16 = icmp ugt i32 %4, 7
  %17 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %17, i8** %6, align 8
  br i1 %16, label %18, label %34

18:                                               ; preds = %14
  store i8 -60, i8* %15, align 1
  %19 = ashr i32 %2, 3
  %20 = shl nsw i32 %19, 2
  %21 = lshr i32 %4, 3
  %22 = or i32 %21, %20
  %23 = trunc i32 %22 to i8
  %24 = shl i8 %23, 5
  %25 = xor i8 %24, -31
  %26 = load i8*, i8** %6, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %6, align 8
  store i8 %25, i8* %26, align 1
  %28 = trunc i32 %3 to i8
  %29 = shl i8 %28, 3
  %30 = and i8 %29, 120
  %31 = xor i8 %30, 121
  %32 = load i8*, i8** %6, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %6, align 8
  store i8 %31, i8* %32, align 1
  br label %43

34:                                               ; preds = %14
  store i8 -59, i8* %15, align 1
  %35 = lshr i32 %2, 3
  %36 = shl i32 %35, 4
  %37 = or i32 %36, %3
  %38 = trunc i32 %37 to i8
  %39 = shl i8 %38, 3
  %40 = xor i8 %39, -7
  %41 = load i8*, i8** %6, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %42, i8** %6, align 8
  store i8 %40, i8* %41, align 1
  br label %43

43:                                               ; preds = %18, %34
  %44 = load i8*, i8** %6, align 8
  %45 = getelementptr inbounds i8, i8* %44, i64 1
  store i8* %45, i8** %6, align 8
  store i8 %1, i8* %44, align 1
  %46 = shl i32 %2, 3
  %47 = and i32 %4, 7
  %48 = or i32 %47, %46
  %49 = trunc i32 %48 to i8
  %50 = or i8 %49, -64
  %51 = load i8*, i8** %6, align 8
  %52 = getelementptr inbounds i8, i8* %51, i64 1
  store i8* %52, i8** %6, align 8
  store i8 %50, i8* %51, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler3vpdEhNS0_11XMMRegisterES2_NS0_7OperandE(%"class.v8::internal::Assembler"*, i8 zeroext, i32, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 -32
  %12 = icmp ult i8* %8, %11
  br i1 %12, label %15, label %13, !prof !11

13:                                               ; preds = %6
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %14 = load i8*, i8** %7, align 8
  br label %15

15:                                               ; preds = %6, %13
  %16 = phi i8* [ %8, %6 ], [ %14, %13 ]
  %17 = trunc i64 %4 to i8
  %18 = icmp eq i8 %17, 0
  %19 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %19, i8** %7, align 8
  br i1 %18, label %35, label %20

20:                                               ; preds = %15
  store i8 -60, i8* %16, align 1
  %21 = lshr i32 %2, 1
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 4
  %24 = or i8 %23, %17
  %25 = shl i8 %24, 5
  %26 = xor i8 %25, -31
  %27 = load i8*, i8** %7, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %7, align 8
  store i8 %26, i8* %27, align 1
  %29 = trunc i32 %3 to i8
  %30 = shl i8 %29, 3
  %31 = and i8 %30, 120
  %32 = xor i8 %31, 121
  %33 = load i8*, i8** %7, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %7, align 8
  store i8 %32, i8* %33, align 1
  br label %44

35:                                               ; preds = %15
  store i8 -59, i8* %16, align 1
  %36 = lshr i32 %2, 3
  %37 = shl i32 %36, 4
  %38 = or i32 %37, %3
  %39 = trunc i32 %38 to i8
  %40 = shl i8 %39, 3
  %41 = xor i8 %40, -7
  %42 = load i8*, i8** %7, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 1
  store i8* %43, i8** %7, align 8
  store i8 %41, i8* %42, align 1
  br label %44

44:                                               ; preds = %20, %35
  %45 = load i8*, i8** %7, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 1
  store i8* %46, i8** %7, align 8
  store i8 %1, i8* %45, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %2, i64 %4, i32 %5) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8vucomissENS0_11XMMRegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = icmp ugt i32 %2, 7
  %15 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %15, i8** %4, align 8
  br i1 %14, label %16, label %28

16:                                               ; preds = %12
  store i8 -60, i8* %13, align 1
  %17 = ashr i32 %1, 3
  %18 = shl nsw i32 %17, 2
  %19 = lshr i32 %2, 3
  %20 = or i32 %19, %18
  %21 = trunc i32 %20 to i8
  %22 = shl i8 %21, 5
  %23 = xor i8 %22, -31
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 %23, i8* %24, align 1
  %26 = load i8*, i8** %4, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %4, align 8
  store i8 120, i8* %26, align 1
  br label %35

28:                                               ; preds = %12
  store i8 -59, i8* %13, align 1
  %29 = lshr i32 %1, 3
  %30 = shl i32 %29, 7
  %31 = trunc i32 %30 to i8
  %32 = xor i8 %31, -8
  %33 = load i8*, i8** %4, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %4, align 8
  store i8 %32, i8* %33, align 1
  br label %35

35:                                               ; preds = %16, %28
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %4, align 8
  store i8 46, i8* %36, align 1
  %38 = shl i32 %1, 3
  %39 = and i32 %2, 7
  %40 = or i32 %39, %38
  %41 = trunc i32 %40 to i8
  %42 = or i8 %41, -64
  %43 = load i8*, i8** %4, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 1
  store i8* %44, i8** %4, align 8
  store i8 %42, i8* %43, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8vucomissENS0_11XMMRegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = trunc i64 %2 to i8
  %16 = icmp eq i8 %15, 0
  %17 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %17, i8** %5, align 8
  br i1 %16, label %29, label %18

18:                                               ; preds = %13
  store i8 -60, i8* %14, align 1
  %19 = lshr i32 %1, 1
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 4
  %22 = or i8 %21, %15
  %23 = shl i8 %22, 5
  %24 = xor i8 %23, -31
  %25 = load i8*, i8** %5, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %5, align 8
  store i8 %24, i8* %25, align 1
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 120, i8* %27, align 1
  br label %36

29:                                               ; preds = %13
  store i8 -59, i8* %14, align 1
  %30 = lshr i32 %1, 3
  %31 = shl i32 %30, 7
  %32 = trunc i32 %31 to i8
  %33 = xor i8 %32, -8
  %34 = load i8*, i8** %5, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %5, align 8
  store i8 %33, i8* %34, align 1
  br label %36

36:                                               ; preds = %18, %29
  %37 = load i8*, i8** %5, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  store i8* %38, i8** %5, align 8
  store i8 46, i8* %37, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9vpmovmskbENS0_8RegisterENS0_11XMMRegisterE(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = icmp ugt i32 %2, 7
  %15 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %15, i8** %4, align 8
  br i1 %14, label %16, label %28

16:                                               ; preds = %12
  store i8 -60, i8* %13, align 1
  %17 = ashr i32 %1, 3
  %18 = shl nsw i32 %17, 2
  %19 = lshr i32 %2, 3
  %20 = or i32 %19, %18
  %21 = trunc i32 %20 to i8
  %22 = shl i8 %21, 5
  %23 = xor i8 %22, -31
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 %23, i8* %24, align 1
  %26 = load i8*, i8** %4, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %4, align 8
  store i8 121, i8* %26, align 1
  br label %35

28:                                               ; preds = %12
  store i8 -59, i8* %13, align 1
  %29 = lshr i32 %1, 3
  %30 = shl i32 %29, 7
  %31 = trunc i32 %30 to i8
  %32 = xor i8 %31, -7
  %33 = load i8*, i8** %4, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %4, align 8
  store i8 %32, i8* %33, align 1
  br label %35

35:                                               ; preds = %16, %28
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %4, align 8
  store i8 -41, i8* %36, align 1
  %38 = shl i32 %1, 3
  %39 = and i32 %2, 7
  %40 = or i32 %39, %38
  %41 = trunc i32 %40 to i8
  %42 = or i8 %41, -64
  %43 = load i8*, i8** %4, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 1
  store i8* %44, i8** %4, align 8
  store i8 %42, i8* %43, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler3vssEhNS0_11XMMRegisterES2_S2_(%"class.v8::internal::Assembler"*, i8 zeroext, i32, i32, i32) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %14, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %13 = load i8*, i8** %6, align 8
  br label %14

14:                                               ; preds = %5, %12
  %15 = phi i8* [ %7, %5 ], [ %13, %12 ]
  %16 = icmp ugt i32 %4, 7
  %17 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %17, i8** %6, align 8
  br i1 %16, label %18, label %34

18:                                               ; preds = %14
  store i8 -60, i8* %15, align 1
  %19 = ashr i32 %2, 3
  %20 = shl nsw i32 %19, 2
  %21 = lshr i32 %4, 3
  %22 = or i32 %21, %20
  %23 = trunc i32 %22 to i8
  %24 = shl i8 %23, 5
  %25 = xor i8 %24, -31
  %26 = load i8*, i8** %6, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %6, align 8
  store i8 %25, i8* %26, align 1
  %28 = trunc i32 %3 to i8
  %29 = shl i8 %28, 3
  %30 = and i8 %29, 120
  %31 = xor i8 %30, 122
  %32 = load i8*, i8** %6, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %6, align 8
  store i8 %31, i8* %32, align 1
  br label %43

34:                                               ; preds = %14
  store i8 -59, i8* %15, align 1
  %35 = lshr i32 %2, 3
  %36 = shl i32 %35, 4
  %37 = or i32 %36, %3
  %38 = trunc i32 %37 to i8
  %39 = shl i8 %38, 3
  %40 = xor i8 %39, -6
  %41 = load i8*, i8** %6, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %42, i8** %6, align 8
  store i8 %40, i8* %41, align 1
  br label %43

43:                                               ; preds = %18, %34
  %44 = load i8*, i8** %6, align 8
  %45 = getelementptr inbounds i8, i8* %44, i64 1
  store i8* %45, i8** %6, align 8
  store i8 %1, i8* %44, align 1
  %46 = shl i32 %2, 3
  %47 = and i32 %4, 7
  %48 = or i32 %47, %46
  %49 = trunc i32 %48 to i8
  %50 = or i8 %49, -64
  %51 = load i8*, i8** %6, align 8
  %52 = getelementptr inbounds i8, i8* %51, i64 1
  store i8* %52, i8** %6, align 8
  store i8 %50, i8* %51, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler3vssEhNS0_11XMMRegisterES2_NS0_7OperandE(%"class.v8::internal::Assembler"*, i8 zeroext, i32, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 -32
  %12 = icmp ult i8* %8, %11
  br i1 %12, label %15, label %13, !prof !11

13:                                               ; preds = %6
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %14 = load i8*, i8** %7, align 8
  br label %15

15:                                               ; preds = %6, %13
  %16 = phi i8* [ %8, %6 ], [ %14, %13 ]
  %17 = trunc i64 %4 to i8
  %18 = icmp eq i8 %17, 0
  %19 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %19, i8** %7, align 8
  br i1 %18, label %35, label %20

20:                                               ; preds = %15
  store i8 -60, i8* %16, align 1
  %21 = lshr i32 %2, 1
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 4
  %24 = or i8 %23, %17
  %25 = shl i8 %24, 5
  %26 = xor i8 %25, -31
  %27 = load i8*, i8** %7, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %7, align 8
  store i8 %26, i8* %27, align 1
  %29 = trunc i32 %3 to i8
  %30 = shl i8 %29, 3
  %31 = and i8 %30, 120
  %32 = xor i8 %31, 122
  %33 = load i8*, i8** %7, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %7, align 8
  store i8 %32, i8* %33, align 1
  br label %44

35:                                               ; preds = %15
  store i8 -59, i8* %16, align 1
  %36 = lshr i32 %2, 3
  %37 = shl i32 %36, 4
  %38 = or i32 %37, %3
  %39 = trunc i32 %38 to i8
  %40 = shl i8 %39, 3
  %41 = xor i8 %40, -6
  %42 = load i8*, i8** %7, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 1
  store i8* %43, i8** %7, align 8
  store i8 %41, i8* %42, align 1
  br label %44

44:                                               ; preds = %20, %35
  %45 = load i8*, i8** %7, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 1
  store i8* %46, i8** %7, align 8
  store i8 %1, i8* %45, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %2, i64 %4, i32 %5) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5bmi1qEhNS0_8RegisterES2_S2_(%"class.v8::internal::Assembler"*, i8 zeroext, i32, i32, i32) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %14, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %13 = load i8*, i8** %6, align 8
  br label %14

14:                                               ; preds = %5, %12
  %15 = phi i8* [ %7, %5 ], [ %13, %12 ]
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %16, i8** %6, align 8
  store i8 -60, i8* %15, align 1
  %17 = ashr i32 %2, 3
  %18 = shl nsw i32 %17, 2
  %19 = lshr i32 %4, 3
  %20 = or i32 %19, %18
  %21 = trunc i32 %20 to i8
  %22 = shl i8 %21, 5
  %23 = xor i8 %22, -30
  %24 = load i8*, i8** %6, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %6, align 8
  store i8 %23, i8* %24, align 1
  %26 = trunc i32 %3 to i8
  %27 = shl i8 %26, 3
  %28 = and i8 %27, 120
  %29 = xor i8 %28, -8
  %30 = load i8*, i8** %6, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %6, align 8
  store i8 %29, i8* %30, align 1
  %32 = load i8*, i8** %6, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %6, align 8
  store i8 %1, i8* %32, align 1
  %34 = shl i32 %2, 3
  %35 = and i32 %4, 7
  %36 = or i32 %35, %34
  %37 = trunc i32 %36 to i8
  %38 = or i8 %37, -64
  %39 = load i8*, i8** %6, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  store i8* %40, i8** %6, align 8
  store i8 %38, i8* %39, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5bmi1qEhNS0_8RegisterES2_NS0_7OperandE(%"class.v8::internal::Assembler"*, i8 zeroext, i32, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 -32
  %12 = icmp ult i8* %8, %11
  br i1 %12, label %15, label %13, !prof !11

13:                                               ; preds = %6
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %14 = load i8*, i8** %7, align 8
  br label %15

15:                                               ; preds = %6, %13
  %16 = phi i8* [ %8, %6 ], [ %14, %13 ]
  %17 = trunc i64 %4 to i8
  %18 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %18, i8** %7, align 8
  store i8 -60, i8* %16, align 1
  %19 = lshr i32 %2, 1
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 4
  %22 = or i8 %21, %17
  %23 = shl i8 %22, 5
  %24 = xor i8 %23, -30
  %25 = load i8*, i8** %7, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %7, align 8
  store i8 %24, i8* %25, align 1
  %27 = trunc i32 %3 to i8
  %28 = shl i8 %27, 3
  %29 = and i8 %28, 120
  %30 = xor i8 %29, -8
  %31 = load i8*, i8** %7, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %32, i8** %7, align 8
  store i8 %30, i8* %31, align 1
  %33 = load i8*, i8** %7, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %7, align 8
  store i8 %1, i8* %33, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %2, i64 %4, i32 %5)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5bmi1lEhNS0_8RegisterES2_S2_(%"class.v8::internal::Assembler"*, i8 zeroext, i32, i32, i32) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %14, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %13 = load i8*, i8** %6, align 8
  br label %14

14:                                               ; preds = %5, %12
  %15 = phi i8* [ %7, %5 ], [ %13, %12 ]
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %16, i8** %6, align 8
  store i8 -60, i8* %15, align 1
  %17 = ashr i32 %2, 3
  %18 = shl nsw i32 %17, 2
  %19 = lshr i32 %4, 3
  %20 = or i32 %19, %18
  %21 = trunc i32 %20 to i8
  %22 = shl i8 %21, 5
  %23 = xor i8 %22, -30
  %24 = load i8*, i8** %6, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %6, align 8
  store i8 %23, i8* %24, align 1
  %26 = trunc i32 %3 to i8
  %27 = shl i8 %26, 3
  %28 = and i8 %27, 120
  %29 = xor i8 %28, 120
  %30 = load i8*, i8** %6, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %6, align 8
  store i8 %29, i8* %30, align 1
  %32 = load i8*, i8** %6, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %6, align 8
  store i8 %1, i8* %32, align 1
  %34 = shl i32 %2, 3
  %35 = and i32 %4, 7
  %36 = or i32 %35, %34
  %37 = trunc i32 %36 to i8
  %38 = or i8 %37, -64
  %39 = load i8*, i8** %6, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  store i8* %40, i8** %6, align 8
  store i8 %38, i8* %39, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5bmi1lEhNS0_8RegisterES2_NS0_7OperandE(%"class.v8::internal::Assembler"*, i8 zeroext, i32, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 -32
  %12 = icmp ult i8* %8, %11
  br i1 %12, label %15, label %13, !prof !11

13:                                               ; preds = %6
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %14 = load i8*, i8** %7, align 8
  br label %15

15:                                               ; preds = %6, %13
  %16 = phi i8* [ %8, %6 ], [ %14, %13 ]
  %17 = trunc i64 %4 to i8
  %18 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %18, i8** %7, align 8
  store i8 -60, i8* %16, align 1
  %19 = lshr i32 %2, 1
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 4
  %22 = or i8 %21, %17
  %23 = shl i8 %22, 5
  %24 = xor i8 %23, -30
  %25 = load i8*, i8** %7, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %7, align 8
  store i8 %24, i8* %25, align 1
  %27 = trunc i32 %3 to i8
  %28 = shl i8 %27, 3
  %29 = and i8 %28, 120
  %30 = xor i8 %29, 120
  %31 = load i8*, i8** %7, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %32, i8** %7, align 8
  store i8 %30, i8* %31, align 1
  %33 = load i8*, i8** %7, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %7, align 8
  store i8 %1, i8* %33, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %2, i64 %4, i32 %5)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6tzcntqENS0_8RegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 -13, i8* %13, align 1
  %15 = ashr i32 %1, 3
  %16 = shl nsw i32 %15, 2
  %17 = lshr i32 %2, 3
  %18 = or i32 %16, %17
  %19 = trunc i32 %18 to i8
  %20 = or i8 %19, 72
  %21 = load i8*, i8** %4, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %4, align 8
  store i8 %20, i8* %21, align 1
  %23 = load i8*, i8** %4, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %4, align 8
  store i8 15, i8* %23, align 1
  %25 = load i8*, i8** %4, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %4, align 8
  store i8 -68, i8* %25, align 1
  %27 = shl i32 %1, 3
  %28 = and i32 %2, 7
  %29 = or i32 %28, %27
  %30 = trunc i32 %29 to i8
  %31 = or i8 %30, -64
  %32 = load i8*, i8** %4, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %4, align 8
  store i8 %31, i8* %32, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6tzcntqENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -13, i8* %14, align 1
  %16 = trunc i64 %2 to i8
  %17 = lshr i32 %1, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, -76
  %20 = or i8 %19, %16
  %21 = or i8 %20, 72
  %22 = load i8*, i8** %5, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %5, align 8
  store i8 %21, i8* %22, align 1
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 15, i8* %24, align 1
  %26 = load i8*, i8** %5, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %5, align 8
  store i8 -68, i8* %26, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6tzcntlENS0_8RegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 -13, i8* %13, align 1
  %15 = ashr i32 %1, 3
  %16 = shl nsw i32 %15, 2
  %17 = ashr i32 %2, 3
  %18 = or i32 %16, %17
  %19 = and i32 %18, 255
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %26, label %21

21:                                               ; preds = %12
  %22 = trunc i32 %18 to i8
  %23 = or i8 %22, 64
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %12, %21
  %27 = load i8*, i8** %4, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %4, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %4, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %4, align 8
  store i8 -68, i8* %29, align 1
  %31 = shl i32 %1, 3
  %32 = and i32 %2, 7
  %33 = or i32 %32, %31
  %34 = trunc i32 %33 to i8
  %35 = or i8 %34, -64
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %4, align 8
  store i8 %35, i8* %36, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6tzcntlENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -13, i8* %14, align 1
  %16 = trunc i64 %2 to i8
  %17 = lshr i32 %1, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, -4
  %20 = or i8 %19, %16
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %13
  %23 = or i8 %20, 64
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %13, %22
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %5, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %5, align 8
  store i8 -68, i8* %29, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6lzcntqENS0_8RegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 -13, i8* %13, align 1
  %15 = ashr i32 %1, 3
  %16 = shl nsw i32 %15, 2
  %17 = lshr i32 %2, 3
  %18 = or i32 %16, %17
  %19 = trunc i32 %18 to i8
  %20 = or i8 %19, 72
  %21 = load i8*, i8** %4, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %4, align 8
  store i8 %20, i8* %21, align 1
  %23 = load i8*, i8** %4, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %4, align 8
  store i8 15, i8* %23, align 1
  %25 = load i8*, i8** %4, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %4, align 8
  store i8 -67, i8* %25, align 1
  %27 = shl i32 %1, 3
  %28 = and i32 %2, 7
  %29 = or i32 %28, %27
  %30 = trunc i32 %29 to i8
  %31 = or i8 %30, -64
  %32 = load i8*, i8** %4, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %4, align 8
  store i8 %31, i8* %32, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6lzcntqENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -13, i8* %14, align 1
  %16 = trunc i64 %2 to i8
  %17 = lshr i32 %1, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, -76
  %20 = or i8 %19, %16
  %21 = or i8 %20, 72
  %22 = load i8*, i8** %5, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %5, align 8
  store i8 %21, i8* %22, align 1
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 15, i8* %24, align 1
  %26 = load i8*, i8** %5, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %5, align 8
  store i8 -67, i8* %26, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6lzcntlENS0_8RegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 -13, i8* %13, align 1
  %15 = ashr i32 %1, 3
  %16 = shl nsw i32 %15, 2
  %17 = ashr i32 %2, 3
  %18 = or i32 %16, %17
  %19 = and i32 %18, 255
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %26, label %21

21:                                               ; preds = %12
  %22 = trunc i32 %18 to i8
  %23 = or i8 %22, 64
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %12, %21
  %27 = load i8*, i8** %4, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %4, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %4, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %4, align 8
  store i8 -67, i8* %29, align 1
  %31 = shl i32 %1, 3
  %32 = and i32 %2, 7
  %33 = or i32 %32, %31
  %34 = trunc i32 %33 to i8
  %35 = or i8 %34, -64
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %4, align 8
  store i8 %35, i8* %36, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6lzcntlENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -13, i8* %14, align 1
  %16 = trunc i64 %2 to i8
  %17 = lshr i32 %1, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, -4
  %20 = or i8 %19, %16
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %13
  %23 = or i8 %20, 64
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %13, %22
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %5, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %5, align 8
  store i8 -67, i8* %29, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7popcntqENS0_8RegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 -13, i8* %13, align 1
  %15 = ashr i32 %1, 3
  %16 = shl nsw i32 %15, 2
  %17 = lshr i32 %2, 3
  %18 = or i32 %16, %17
  %19 = trunc i32 %18 to i8
  %20 = or i8 %19, 72
  %21 = load i8*, i8** %4, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %4, align 8
  store i8 %20, i8* %21, align 1
  %23 = load i8*, i8** %4, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %4, align 8
  store i8 15, i8* %23, align 1
  %25 = load i8*, i8** %4, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %4, align 8
  store i8 -72, i8* %25, align 1
  %27 = shl i32 %1, 3
  %28 = and i32 %2, 7
  %29 = or i32 %28, %27
  %30 = trunc i32 %29 to i8
  %31 = or i8 %30, -64
  %32 = load i8*, i8** %4, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %4, align 8
  store i8 %31, i8* %32, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7popcntqENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -13, i8* %14, align 1
  %16 = trunc i64 %2 to i8
  %17 = lshr i32 %1, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, -76
  %20 = or i8 %19, %16
  %21 = or i8 %20, 72
  %22 = load i8*, i8** %5, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %5, align 8
  store i8 %21, i8* %22, align 1
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 15, i8* %24, align 1
  %26 = load i8*, i8** %5, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %5, align 8
  store i8 -72, i8* %26, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7popcntlENS0_8RegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 -13, i8* %13, align 1
  %15 = ashr i32 %1, 3
  %16 = shl nsw i32 %15, 2
  %17 = ashr i32 %2, 3
  %18 = or i32 %16, %17
  %19 = and i32 %18, 255
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %26, label %21

21:                                               ; preds = %12
  %22 = trunc i32 %18 to i8
  %23 = or i8 %22, 64
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %12, %21
  %27 = load i8*, i8** %4, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %4, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %4, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %4, align 8
  store i8 -72, i8* %29, align 1
  %31 = shl i32 %1, 3
  %32 = and i32 %2, 7
  %33 = or i32 %32, %31
  %34 = trunc i32 %33 to i8
  %35 = or i8 %34, -64
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %4, align 8
  store i8 %35, i8* %36, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7popcntlENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -13, i8* %14, align 1
  %16 = trunc i64 %2 to i8
  %17 = lshr i32 %1, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, -4
  %20 = or i8 %19, %16
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %13
  %23 = or i8 %20, 64
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %13, %22
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %5, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %5, align 8
  store i8 -72, i8* %29, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5bmi2qENS1_10SIMDPrefixEhNS0_8RegisterES3_S3_(%"class.v8::internal::Assembler"*, i32, i8 zeroext, i32, i32, i32) local_unnamed_addr #1 align 2 {
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 -32
  %12 = icmp ult i8* %8, %11
  br i1 %12, label %15, label %13, !prof !11

13:                                               ; preds = %6
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %14 = load i8*, i8** %7, align 8
  br label %15

15:                                               ; preds = %6, %13
  %16 = phi i8* [ %8, %6 ], [ %14, %13 ]
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %17, i8** %7, align 8
  store i8 -60, i8* %16, align 1
  %18 = ashr i32 %3, 3
  %19 = shl nsw i32 %18, 2
  %20 = lshr i32 %5, 3
  %21 = or i32 %20, %19
  %22 = trunc i32 %21 to i8
  %23 = shl i8 %22, 5
  %24 = xor i8 %23, -30
  %25 = load i8*, i8** %7, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %7, align 8
  store i8 %24, i8* %25, align 1
  %27 = shl i32 %4, 3
  %28 = xor i32 %27, 120
  %29 = or i32 %28, %1
  %30 = trunc i32 %29 to i8
  %31 = or i8 %30, -128
  %32 = load i8*, i8** %7, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %7, align 8
  store i8 %31, i8* %32, align 1
  %34 = load i8*, i8** %7, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %7, align 8
  store i8 %2, i8* %34, align 1
  %36 = shl i32 %3, 3
  %37 = and i32 %5, 7
  %38 = or i32 %37, %36
  %39 = trunc i32 %38 to i8
  %40 = or i8 %39, -64
  %41 = load i8*, i8** %7, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %42, i8** %7, align 8
  store i8 %40, i8* %41, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5bmi2qENS1_10SIMDPrefixEhNS0_8RegisterES3_NS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i8 zeroext, i32, i32, %"class.v8::internal::Operand"* nocapture readonly byval(%"class.v8::internal::Operand") align 8) local_unnamed_addr #1 align 2 {
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 -32
  %12 = icmp ult i8* %8, %11
  br i1 %12, label %15, label %13, !prof !11

13:                                               ; preds = %6
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %14 = load i8*, i8** %7, align 8
  br label %15

15:                                               ; preds = %6, %13
  %16 = phi i8* [ %8, %6 ], [ %14, %13 ]
  %17 = bitcast %"class.v8::internal::Operand"* %5 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 7
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 8
  %22 = trunc i64 %18 to i8
  %23 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %23, i8** %7, align 8
  store i8 -60, i8* %16, align 1
  %24 = lshr i32 %3, 1
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 4
  %27 = or i8 %26, %22
  %28 = shl i8 %27, 5
  %29 = xor i8 %28, -30
  %30 = load i8*, i8** %7, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %7, align 8
  store i8 %29, i8* %30, align 1
  %32 = shl i32 %4, 3
  %33 = xor i32 %32, 120
  %34 = or i32 %33, %1
  %35 = trunc i32 %34 to i8
  %36 = or i8 %35, -128
  %37 = load i8*, i8** %7, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  store i8* %38, i8** %7, align 8
  store i8 %36, i8* %37, align 1
  %39 = load i8*, i8** %7, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  store i8* %40, i8** %7, align 8
  store i8 %2, i8* %39, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %3, i64 %18, i32 %21)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5bmi2lENS1_10SIMDPrefixEhNS0_8RegisterES3_S3_(%"class.v8::internal::Assembler"*, i32, i8 zeroext, i32, i32, i32) local_unnamed_addr #1 align 2 {
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 -32
  %12 = icmp ult i8* %8, %11
  br i1 %12, label %15, label %13, !prof !11

13:                                               ; preds = %6
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %14 = load i8*, i8** %7, align 8
  br label %15

15:                                               ; preds = %6, %13
  %16 = phi i8* [ %8, %6 ], [ %14, %13 ]
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %17, i8** %7, align 8
  store i8 -60, i8* %16, align 1
  %18 = ashr i32 %3, 3
  %19 = shl nsw i32 %18, 2
  %20 = lshr i32 %5, 3
  %21 = or i32 %20, %19
  %22 = trunc i32 %21 to i8
  %23 = shl i8 %22, 5
  %24 = xor i8 %23, -30
  %25 = load i8*, i8** %7, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %7, align 8
  store i8 %24, i8* %25, align 1
  %27 = shl i32 %4, 3
  %28 = and i32 %27, 120
  %29 = xor i32 %28, 120
  %30 = or i32 %29, %1
  %31 = trunc i32 %30 to i8
  %32 = load i8*, i8** %7, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %7, align 8
  store i8 %31, i8* %32, align 1
  %34 = load i8*, i8** %7, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %7, align 8
  store i8 %2, i8* %34, align 1
  %36 = shl i32 %3, 3
  %37 = and i32 %5, 7
  %38 = or i32 %37, %36
  %39 = trunc i32 %38 to i8
  %40 = or i8 %39, -64
  %41 = load i8*, i8** %7, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %42, i8** %7, align 8
  store i8 %40, i8* %41, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5bmi2lENS1_10SIMDPrefixEhNS0_8RegisterES3_NS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i8 zeroext, i32, i32, %"class.v8::internal::Operand"* nocapture readonly byval(%"class.v8::internal::Operand") align 8) local_unnamed_addr #1 align 2 {
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 -32
  %12 = icmp ult i8* %8, %11
  br i1 %12, label %15, label %13, !prof !11

13:                                               ; preds = %6
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %14 = load i8*, i8** %7, align 8
  br label %15

15:                                               ; preds = %6, %13
  %16 = phi i8* [ %8, %6 ], [ %14, %13 ]
  %17 = bitcast %"class.v8::internal::Operand"* %5 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"class.v8::internal::Operand", %"class.v8::internal::Operand"* %5, i64 0, i32 0, i32 1, i64 7
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 8
  %22 = trunc i64 %18 to i8
  %23 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %23, i8** %7, align 8
  store i8 -60, i8* %16, align 1
  %24 = lshr i32 %3, 1
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 4
  %27 = or i8 %26, %22
  %28 = shl i8 %27, 5
  %29 = xor i8 %28, -30
  %30 = load i8*, i8** %7, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %7, align 8
  store i8 %29, i8* %30, align 1
  %32 = shl i32 %4, 3
  %33 = and i32 %32, 120
  %34 = xor i32 %33, 120
  %35 = or i32 %34, %1
  %36 = trunc i32 %35 to i8
  %37 = load i8*, i8** %7, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  store i8* %38, i8** %7, align 8
  store i8 %36, i8* %37, align 1
  %39 = load i8*, i8** %7, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  store i8* %40, i8** %7, align 8
  store i8 %2, i8* %39, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %3, i64 %18, i32 %21)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5rorxqENS0_8RegisterES2_h(%"class.v8::internal::Assembler"*, i32, i32, i8 zeroext) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -60, i8* %14, align 1
  %16 = ashr i32 %1, 3
  %17 = shl nsw i32 %16, 2
  %18 = lshr i32 %2, 3
  %19 = or i32 %18, %17
  %20 = trunc i32 %19 to i8
  %21 = shl i8 %20, 5
  %22 = xor i8 %21, -29
  %23 = load i8*, i8** %5, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %5, align 8
  store i8 %22, i8* %23, align 1
  %25 = load i8*, i8** %5, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %5, align 8
  store i8 -5, i8* %25, align 1
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 -16, i8* %27, align 1
  %29 = shl i32 %1, 3
  %30 = and i32 %2, 7
  %31 = or i32 %30, %29
  %32 = trunc i32 %31 to i8
  %33 = or i8 %32, -64
  %34 = load i8*, i8** %5, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %5, align 8
  store i8 %33, i8* %34, align 1
  %36 = load i8*, i8** %5, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %5, align 8
  store i8 %3, i8* %36, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5rorxqENS0_8RegisterENS0_7OperandEh(%"class.v8::internal::Assembler"*, i32, i64, i32, i8 zeroext) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %14, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %13 = load i8*, i8** %6, align 8
  br label %14

14:                                               ; preds = %5, %12
  %15 = phi i8* [ %7, %5 ], [ %13, %12 ]
  %16 = trunc i64 %2 to i8
  %17 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %17, i8** %6, align 8
  store i8 -60, i8* %15, align 1
  %18 = lshr i32 %1, 1
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 4
  %21 = or i8 %20, %16
  %22 = shl i8 %21, 5
  %23 = xor i8 %22, -29
  %24 = load i8*, i8** %6, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %6, align 8
  store i8 %23, i8* %24, align 1
  %26 = load i8*, i8** %6, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %6, align 8
  store i8 -5, i8* %26, align 1
  %28 = load i8*, i8** %6, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %6, align 8
  store i8 -16, i8* %28, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3)
  %30 = load i8*, i8** %6, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %6, align 8
  store i8 %4, i8* %30, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5rorxlENS0_8RegisterES2_h(%"class.v8::internal::Assembler"*, i32, i32, i8 zeroext) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -60, i8* %14, align 1
  %16 = ashr i32 %1, 3
  %17 = shl nsw i32 %16, 2
  %18 = lshr i32 %2, 3
  %19 = or i32 %18, %17
  %20 = trunc i32 %19 to i8
  %21 = shl i8 %20, 5
  %22 = xor i8 %21, -29
  %23 = load i8*, i8** %5, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %5, align 8
  store i8 %22, i8* %23, align 1
  %25 = load i8*, i8** %5, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %5, align 8
  store i8 123, i8* %25, align 1
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 -16, i8* %27, align 1
  %29 = shl i32 %1, 3
  %30 = and i32 %2, 7
  %31 = or i32 %30, %29
  %32 = trunc i32 %31 to i8
  %33 = or i8 %32, -64
  %34 = load i8*, i8** %5, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %5, align 8
  store i8 %33, i8* %34, align 1
  %36 = load i8*, i8** %5, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %5, align 8
  store i8 %3, i8* %36, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5rorxlENS0_8RegisterENS0_7OperandEh(%"class.v8::internal::Assembler"*, i32, i64, i32, i8 zeroext) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %14, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %13 = load i8*, i8** %6, align 8
  br label %14

14:                                               ; preds = %5, %12
  %15 = phi i8* [ %7, %5 ], [ %13, %12 ]
  %16 = trunc i64 %2 to i8
  %17 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %17, i8** %6, align 8
  store i8 -60, i8* %15, align 1
  %18 = lshr i32 %1, 1
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 4
  %21 = or i8 %20, %16
  %22 = shl i8 %21, 5
  %23 = xor i8 %22, -29
  %24 = load i8*, i8** %6, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %6, align 8
  store i8 %23, i8* %24, align 1
  %26 = load i8*, i8** %6, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %6, align 8
  store i8 123, i8* %26, align 1
  %28 = load i8*, i8** %6, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %6, align 8
  store i8 -16, i8* %28, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3)
  %30 = load i8*, i8** %6, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %6, align 8
  store i8 %4, i8* %30, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5pauseEv(%"class.v8::internal::Assembler"* nocapture) local_unnamed_addr #9 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds i8, i8* %3, i64 1
  store i8* %4, i8** %2, align 8
  store i8 -13, i8* %3, align 1
  %5 = load i8*, i8** %2, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 1
  store i8* %6, i8** %2, align 8
  store i8 -112, i8* %5, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6movupsENS0_11XMMRegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %11, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %11

11:                                               ; preds = %3, %10
  %12 = and i32 %2, 7
  %13 = icmp eq i32 %12, 4
  br i1 %13, label %14, label %38

14:                                               ; preds = %11
  %15 = lshr i32 %2, 1
  %16 = and i32 %15, 4
  %17 = lshr i32 %1, 3
  %18 = and i32 %17, 1
  %19 = or i32 %16, %18
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %26, label %21

21:                                               ; preds = %14
  %22 = trunc i32 %19 to i8
  %23 = or i8 %22, 64
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %14, %21
  %27 = load i8*, i8** %4, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %4, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %4, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %4, align 8
  store i8 17, i8* %29, align 1
  %31 = shl i32 %2, 3
  %32 = and i32 %1, 7
  %33 = or i32 %31, %32
  %34 = trunc i32 %33 to i8
  %35 = or i8 %34, -64
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %4, align 8
  store i8 %35, i8* %36, align 1
  br label %61

38:                                               ; preds = %11
  %39 = lshr i32 %1, 1
  %40 = and i32 %39, 4
  %41 = lshr i32 %2, 3
  %42 = and i32 %41, 1
  %43 = or i32 %42, %40
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %50, label %45

45:                                               ; preds = %38
  %46 = trunc i32 %43 to i8
  %47 = or i8 %46, 64
  %48 = load i8*, i8** %4, align 8
  %49 = getelementptr inbounds i8, i8* %48, i64 1
  store i8* %49, i8** %4, align 8
  store i8 %47, i8* %48, align 1
  br label %50

50:                                               ; preds = %38, %45
  %51 = load i8*, i8** %4, align 8
  %52 = getelementptr inbounds i8, i8* %51, i64 1
  store i8* %52, i8** %4, align 8
  store i8 15, i8* %51, align 1
  %53 = load i8*, i8** %4, align 8
  %54 = getelementptr inbounds i8, i8* %53, i64 1
  store i8* %54, i8** %4, align 8
  store i8 16, i8* %53, align 1
  %55 = shl i32 %1, 3
  %56 = or i32 %12, %55
  %57 = trunc i32 %56 to i8
  %58 = or i8 %57, -64
  %59 = load i8*, i8** %4, align 8
  %60 = getelementptr inbounds i8, i8* %59, i64 1
  store i8* %60, i8** %4, align 8
  store i8 %58, i8* %59, align 1
  br label %61

61:                                               ; preds = %50, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6movupsENS0_11XMMRegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %4, %11
  %13 = trunc i64 %2 to i8
  %14 = lshr i32 %1, 1
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 4
  %17 = or i8 %16, %13
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %12
  %20 = or i8 %17, 64
  %21 = load i8*, i8** %5, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %5, align 8
  store i8 %20, i8* %21, align 1
  br label %23

23:                                               ; preds = %12, %19
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 15, i8* %24, align 1
  %26 = load i8*, i8** %5, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %5, align 8
  store i8 16, i8* %26, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6movupsENS0_7OperandENS0_11XMMRegisterE(%"class.v8::internal::Assembler"*, i64, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %4, %11
  %13 = trunc i64 %1 to i8
  %14 = lshr i32 %3, 1
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 4
  %17 = or i8 %16, %13
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %12
  %20 = or i8 %17, 64
  %21 = load i8*, i8** %5, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8* %22, i8** %5, align 8
  store i8 %20, i8* %21, align 1
  br label %23

23:                                               ; preds = %12, %19
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 15, i8* %24, align 1
  %26 = load i8*, i8** %5, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %5, align 8
  store i8 17, i8* %26, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %3, i64 %1, i32 %2) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9sse_instrENS0_11XMMRegisterES2_hh(%"class.v8::internal::Assembler"*, i32, i32, i8 zeroext, i8 zeroext) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %13, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %13

13:                                               ; preds = %5, %12
  %14 = lshr i32 %1, 1
  %15 = and i32 %14, 4
  %16 = lshr i32 %2, 3
  %17 = and i32 %16, 1
  %18 = or i32 %17, %15
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %25, label %20

20:                                               ; preds = %13
  %21 = trunc i32 %18 to i8
  %22 = or i8 %21, 64
  %23 = load i8*, i8** %6, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %6, align 8
  store i8 %22, i8* %23, align 1
  br label %25

25:                                               ; preds = %13, %20
  %26 = load i8*, i8** %6, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %6, align 8
  store i8 %3, i8* %26, align 1
  %28 = load i8*, i8** %6, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %6, align 8
  store i8 %4, i8* %28, align 1
  %30 = shl i32 %1, 3
  %31 = and i32 %2, 7
  %32 = or i32 %31, %30
  %33 = trunc i32 %32 to i8
  %34 = or i8 %33, -64
  %35 = load i8*, i8** %6, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 1
  store i8* %36, i8** %6, align 8
  store i8 %34, i8* %35, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler9sse_instrENS0_11XMMRegisterENS0_7OperandEhh(%"class.v8::internal::Assembler"*, i32, i64, i32, i8 zeroext, i8 zeroext) local_unnamed_addr #1 align 2 {
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 -32
  %12 = icmp ult i8* %8, %11
  br i1 %12, label %14, label %13, !prof !11

13:                                               ; preds = %6
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %14

14:                                               ; preds = %6, %13
  %15 = trunc i64 %2 to i8
  %16 = lshr i32 %1, 1
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 4
  %19 = or i8 %18, %15
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %25, label %21

21:                                               ; preds = %14
  %22 = or i8 %19, 64
  %23 = load i8*, i8** %7, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %7, align 8
  store i8 %22, i8* %23, align 1
  br label %25

25:                                               ; preds = %14, %21
  %26 = load i8*, i8** %7, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %7, align 8
  store i8 %4, i8* %26, align 1
  %28 = load i8*, i8** %7, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %7, align 8
  store i8 %5, i8* %28, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler10sse2_instrENS0_11XMMRegisterENS0_7OperandEhhh(%"class.v8::internal::Assembler"*, i32, i64, i32, i8 zeroext, i8 zeroext, i8 zeroext) local_unnamed_addr #1 align 2 {
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 -32
  %13 = icmp ult i8* %9, %12
  br i1 %13, label %16, label %14, !prof !11

14:                                               ; preds = %7
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %15 = load i8*, i8** %8, align 8
  br label %16

16:                                               ; preds = %7, %14
  %17 = phi i8* [ %9, %7 ], [ %15, %14 ]
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %8, align 8
  store i8 %4, i8* %17, align 1
  %19 = trunc i64 %2 to i8
  %20 = lshr i32 %1, 1
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 4
  %23 = or i8 %22, %19
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %29, label %25

25:                                               ; preds = %16
  %26 = or i8 %23, 64
  %27 = load i8*, i8** %8, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %8, align 8
  store i8 %26, i8* %27, align 1
  br label %29

29:                                               ; preds = %16, %25
  %30 = load i8*, i8** %8, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %8, align 8
  store i8 %5, i8* %30, align 1
  %32 = load i8*, i8** %8, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %8, align 8
  store i8 %6, i8* %32, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler10sse4_instrENS0_8RegisterENS0_11XMMRegisterEhhhha(%"class.v8::internal::Assembler"*, i32, i32, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 signext) local_unnamed_addr #1 align 2 {
  %9 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 -32
  %14 = icmp ult i8* %10, %13
  br i1 %14, label %17, label %15, !prof !11

15:                                               ; preds = %8
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %16 = load i8*, i8** %9, align 8
  br label %17

17:                                               ; preds = %8, %15
  %18 = phi i8* [ %10, %8 ], [ %16, %15 ]
  %19 = getelementptr inbounds i8, i8* %18, i64 1
  store i8* %19, i8** %9, align 8
  store i8 %3, i8* %18, align 1
  %20 = lshr i32 %2, 1
  %21 = and i32 %20, 4
  %22 = lshr i32 %1, 3
  %23 = and i32 %22, 1
  %24 = or i32 %21, %23
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %17
  %27 = trunc i32 %24 to i8
  %28 = or i8 %27, 64
  %29 = load i8*, i8** %9, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %9, align 8
  store i8 %28, i8* %29, align 1
  br label %31

31:                                               ; preds = %17, %26
  %32 = load i8*, i8** %9, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %9, align 8
  store i8 %4, i8* %32, align 1
  %34 = load i8*, i8** %9, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %9, align 8
  store i8 %5, i8* %34, align 1
  %36 = load i8*, i8** %9, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %9, align 8
  store i8 %6, i8* %36, align 1
  %38 = shl i32 %2, 3
  %39 = and i32 %1, 7
  %40 = or i32 %38, %39
  %41 = trunc i32 %40 to i8
  %42 = or i8 %41, -64
  %43 = load i8*, i8** %9, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 1
  store i8* %44, i8** %9, align 8
  store i8 %42, i8* %43, align 1
  %45 = load i8*, i8** %9, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 1
  store i8* %46, i8** %9, align 8
  store i8 %7, i8* %45, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler10sse4_instrENS0_7OperandENS0_11XMMRegisterEhhhha(%"class.v8::internal::Assembler"*, i64, i32, i32, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 signext) local_unnamed_addr #1 align 2 {
  %10 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 -32
  %15 = icmp ult i8* %11, %14
  br i1 %15, label %18, label %16, !prof !11

16:                                               ; preds = %9
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %17 = load i8*, i8** %10, align 8
  br label %18

18:                                               ; preds = %9, %16
  %19 = phi i8* [ %11, %9 ], [ %17, %16 ]
  %20 = getelementptr inbounds i8, i8* %19, i64 1
  store i8* %20, i8** %10, align 8
  store i8 %4, i8* %19, align 1
  %21 = trunc i64 %1 to i8
  %22 = lshr i32 %3, 1
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 4
  %25 = or i8 %24, %21
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %31, label %27

27:                                               ; preds = %18
  %28 = or i8 %25, 64
  %29 = load i8*, i8** %10, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %10, align 8
  store i8 %28, i8* %29, align 1
  br label %31

31:                                               ; preds = %18, %27
  %32 = load i8*, i8** %10, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %10, align 8
  store i8 %5, i8* %32, align 1
  %34 = load i8*, i8** %10, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %35, i8** %10, align 8
  store i8 %6, i8* %34, align 1
  %36 = load i8*, i8** %10, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %10, align 8
  store i8 %7, i8* %36, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %3, i64 %1, i32 %2) #14
  %38 = load i8*, i8** %10, align 8
  %39 = getelementptr inbounds i8, i8* %38, i64 1
  store i8* %39, i8** %10, align 8
  store i8 %8, i8* %38, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler12sse4_2_instrENS0_11XMMRegisterES2_hhhh(%"class.v8::internal::Assembler"*, i32, i32, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext) local_unnamed_addr #1 align 2 {
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 -32
  %13 = icmp ult i8* %9, %12
  br i1 %13, label %16, label %14, !prof !11

14:                                               ; preds = %7
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %15 = load i8*, i8** %8, align 8
  br label %16

16:                                               ; preds = %7, %14
  %17 = phi i8* [ %9, %7 ], [ %15, %14 ]
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %8, align 8
  store i8 %3, i8* %17, align 1
  %19 = lshr i32 %1, 1
  %20 = and i32 %19, 4
  %21 = lshr i32 %2, 3
  %22 = and i32 %21, 1
  %23 = or i32 %22, %20
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %30, label %25

25:                                               ; preds = %16
  %26 = trunc i32 %23 to i8
  %27 = or i8 %26, 64
  %28 = load i8*, i8** %8, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %8, align 8
  store i8 %27, i8* %28, align 1
  br label %30

30:                                               ; preds = %16, %25
  %31 = load i8*, i8** %8, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %32, i8** %8, align 8
  store i8 %4, i8* %31, align 1
  %33 = load i8*, i8** %8, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %8, align 8
  store i8 %5, i8* %33, align 1
  %35 = load i8*, i8** %8, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 1
  store i8* %36, i8** %8, align 8
  store i8 %6, i8* %35, align 1
  %37 = shl i32 %1, 3
  %38 = and i32 %2, 7
  %39 = or i32 %38, %37
  %40 = trunc i32 %39 to i8
  %41 = or i8 %40, -64
  %42 = load i8*, i8** %8, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 1
  store i8* %43, i8** %8, align 8
  store i8 %41, i8* %42, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler12sse4_2_instrENS0_11XMMRegisterENS0_7OperandEhhhh(%"class.v8::internal::Assembler"*, i32, i64, i32, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext) local_unnamed_addr #1 align 2 {
  %9 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 -32
  %14 = icmp ult i8* %10, %13
  br i1 %14, label %17, label %15, !prof !11

15:                                               ; preds = %8
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %16 = load i8*, i8** %9, align 8
  br label %17

17:                                               ; preds = %8, %15
  %18 = phi i8* [ %10, %8 ], [ %16, %15 ]
  %19 = getelementptr inbounds i8, i8* %18, i64 1
  store i8* %19, i8** %9, align 8
  store i8 %4, i8* %18, align 1
  %20 = trunc i64 %2 to i8
  %21 = lshr i32 %1, 1
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 4
  %24 = or i8 %23, %20
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %30, label %26

26:                                               ; preds = %17
  %27 = or i8 %24, 64
  %28 = load i8*, i8** %9, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %9, align 8
  store i8 %27, i8* %28, align 1
  br label %30

30:                                               ; preds = %17, %26
  %31 = load i8*, i8** %9, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %32, i8** %9, align 8
  store i8 %5, i8* %31, align 1
  %33 = load i8*, i8** %9, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %34, i8** %9, align 8
  store i8 %6, i8* %33, align 1
  %35 = load i8*, i8** %9, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 1
  store i8* %36, i8** %9, align 8
  store i8 %7, i8* %35, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler5lddquENS0_11XMMRegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -14, i8* %14, align 1
  %16 = trunc i64 %2 to i8
  %17 = lshr i32 %1, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 4
  %20 = or i8 %19, %16
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %13
  %23 = or i8 %20, 64
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %13, %22
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %5, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %5, align 8
  store i8 -16, i8* %29, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7movddupENS0_11XMMRegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 -14, i8* %13, align 1
  %15 = lshr i32 %1, 1
  %16 = and i32 %15, 4
  %17 = lshr i32 %2, 3
  %18 = and i32 %17, 1
  %19 = or i32 %18, %16
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %26, label %21

21:                                               ; preds = %12
  %22 = trunc i32 %19 to i8
  %23 = or i8 %22, 64
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %12, %21
  %27 = load i8*, i8** %4, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %4, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %4, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %4, align 8
  store i8 18, i8* %29, align 1
  %31 = shl i32 %1, 3
  %32 = and i32 %2, 7
  %33 = or i32 %32, %31
  %34 = trunc i32 %33 to i8
  %35 = or i8 %34, -64
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %4, align 8
  store i8 %35, i8* %36, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7movddupENS0_11XMMRegisterENS0_7OperandE(%"class.v8::internal::Assembler"*, i32, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -14, i8* %14, align 1
  %16 = trunc i64 %2 to i8
  %17 = lshr i32 %1, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 4
  %20 = or i8 %19, %16
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %13
  %23 = or i8 %20, 64
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %5, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %13, %22
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %5, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %5, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %5, align 8
  store i8 18, i8* %29, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler8movshdupENS0_11XMMRegisterES2_(%"class.v8::internal::Assembler"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 -13, i8* %13, align 1
  %15 = lshr i32 %1, 1
  %16 = and i32 %15, 4
  %17 = lshr i32 %2, 3
  %18 = and i32 %17, 1
  %19 = or i32 %18, %16
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %26, label %21

21:                                               ; preds = %12
  %22 = trunc i32 %19 to i8
  %23 = or i8 %22, 64
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %25, i8** %4, align 8
  store i8 %23, i8* %24, align 1
  br label %26

26:                                               ; preds = %12, %21
  %27 = load i8*, i8** %4, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %4, align 8
  store i8 15, i8* %27, align 1
  %29 = load i8*, i8** %4, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %4, align 8
  store i8 22, i8* %29, align 1
  %31 = shl i32 %1, 3
  %32 = and i32 %2, 7
  %33 = or i32 %32, %31
  %34 = trunc i32 %33 to i8
  %35 = or i8 %34, -64
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %37, i8** %4, align 8
  store i8 %35, i8* %36, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6psrldqENS0_11XMMRegisterEh(%"class.v8::internal::Assembler"*, i32, i8 zeroext) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -32
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %12, label %10, !prof !11

10:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %3, %10
  %13 = phi i8* [ %5, %3 ], [ %11, %10 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %4, align 8
  store i8 102, i8* %13, align 1
  %15 = icmp ult i32 %1, 8
  br i1 %15, label %19, label %16

16:                                               ; preds = %12
  %17 = load i8*, i8** %4, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %4, align 8
  store i8 65, i8* %17, align 1
  br label %19

19:                                               ; preds = %12, %16
  %20 = load i8*, i8** %4, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 1
  store i8* %21, i8** %4, align 8
  store i8 15, i8* %20, align 1
  %22 = load i8*, i8** %4, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %23, i8** %4, align 8
  store i8 115, i8* %22, align 1
  %24 = trunc i32 %1 to i8
  %25 = and i8 %24, 7
  %26 = or i8 %25, -40
  %27 = load i8*, i8** %4, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %4, align 8
  store i8 %26, i8* %27, align 1
  %29 = load i8*, i8** %4, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %4, align 8
  store i8 %2, i8* %29, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler16emit_sse_operandENS0_11XMMRegisterE(%"class.v8::internal::Assembler"* nocapture, i32) local_unnamed_addr #9 align 2 {
  %3 = trunc i32 %1 to i8
  %4 = and i8 %3, 7
  %5 = or i8 %4, -40
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 1
  store i8* %8, i8** %6, align 8
  store i8 %5, i8* %7, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7pshufhwENS0_11XMMRegisterES2_h(%"class.v8::internal::Assembler"*, i32, i32, i8 zeroext) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -13, i8* %14, align 1
  %16 = lshr i32 %1, 1
  %17 = and i32 %16, 4
  %18 = lshr i32 %2, 3
  %19 = and i32 %18, 1
  %20 = or i32 %19, %17
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %13
  %23 = trunc i32 %20 to i8
  %24 = or i8 %23, 64
  %25 = load i8*, i8** %5, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %5, align 8
  store i8 %24, i8* %25, align 1
  br label %27

27:                                               ; preds = %13, %22
  %28 = load i8*, i8** %5, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %5, align 8
  store i8 15, i8* %28, align 1
  %30 = load i8*, i8** %5, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %5, align 8
  store i8 112, i8* %30, align 1
  %32 = shl i32 %1, 3
  %33 = and i32 %2, 7
  %34 = or i32 %33, %32
  %35 = trunc i32 %34 to i8
  %36 = or i8 %35, -64
  %37 = load i8*, i8** %5, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  store i8* %38, i8** %5, align 8
  store i8 %36, i8* %37, align 1
  %39 = load i8*, i8** %5, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  store i8* %40, i8** %5, align 8
  store i8 %3, i8* %39, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7pshufhwENS0_11XMMRegisterENS0_7OperandEh(%"class.v8::internal::Assembler"*, i32, i64, i32, i8 zeroext) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %14, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %13 = load i8*, i8** %6, align 8
  br label %14

14:                                               ; preds = %5, %12
  %15 = phi i8* [ %7, %5 ], [ %13, %12 ]
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %16, i8** %6, align 8
  store i8 -13, i8* %15, align 1
  %17 = trunc i64 %2 to i8
  %18 = lshr i32 %1, 1
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 4
  %21 = or i8 %20, %17
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %27, label %23

23:                                               ; preds = %14
  %24 = or i8 %21, 64
  %25 = load i8*, i8** %6, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %6, align 8
  store i8 %24, i8* %25, align 1
  br label %27

27:                                               ; preds = %14, %23
  %28 = load i8*, i8** %6, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %6, align 8
  store i8 15, i8* %28, align 1
  %30 = load i8*, i8** %6, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %6, align 8
  store i8 112, i8* %30, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  %32 = load i8*, i8** %6, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %6, align 8
  store i8 %4, i8* %32, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7pshuflwENS0_11XMMRegisterES2_h(%"class.v8::internal::Assembler"*, i32, i32, i8 zeroext) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 -14, i8* %14, align 1
  %16 = lshr i32 %1, 1
  %17 = and i32 %16, 4
  %18 = lshr i32 %2, 3
  %19 = and i32 %18, 1
  %20 = or i32 %19, %17
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %13
  %23 = trunc i32 %20 to i8
  %24 = or i8 %23, 64
  %25 = load i8*, i8** %5, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %5, align 8
  store i8 %24, i8* %25, align 1
  br label %27

27:                                               ; preds = %13, %22
  %28 = load i8*, i8** %5, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %5, align 8
  store i8 15, i8* %28, align 1
  %30 = load i8*, i8** %5, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %5, align 8
  store i8 112, i8* %30, align 1
  %32 = shl i32 %1, 3
  %33 = and i32 %2, 7
  %34 = or i32 %33, %32
  %35 = trunc i32 %34 to i8
  %36 = or i8 %35, -64
  %37 = load i8*, i8** %5, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  store i8* %38, i8** %5, align 8
  store i8 %36, i8* %37, align 1
  %39 = load i8*, i8** %5, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  store i8* %40, i8** %5, align 8
  store i8 %3, i8* %39, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler7pshuflwENS0_11XMMRegisterENS0_7OperandEh(%"class.v8::internal::Assembler"*, i32, i64, i32, i8 zeroext) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %14, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %13 = load i8*, i8** %6, align 8
  br label %14

14:                                               ; preds = %5, %12
  %15 = phi i8* [ %7, %5 ], [ %13, %12 ]
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %16, i8** %6, align 8
  store i8 -14, i8* %15, align 1
  %17 = trunc i64 %2 to i8
  %18 = lshr i32 %1, 1
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 4
  %21 = or i8 %20, %17
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %27, label %23

23:                                               ; preds = %14
  %24 = or i8 %21, 64
  %25 = load i8*, i8** %6, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %6, align 8
  store i8 %24, i8* %25, align 1
  br label %27

27:                                               ; preds = %14, %23
  %28 = load i8*, i8** %6, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %6, align 8
  store i8 15, i8* %28, align 1
  %30 = load i8*, i8** %6, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %6, align 8
  store i8 112, i8* %30, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  %32 = load i8*, i8** %6, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %6, align 8
  store i8 %4, i8* %32, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6pshufdENS0_11XMMRegisterES2_h(%"class.v8::internal::Assembler"*, i32, i32, i8 zeroext) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %13, label %11, !prof !11

11:                                               ; preds = %4
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %12 = load i8*, i8** %5, align 8
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i8* [ %6, %4 ], [ %12, %11 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %5, align 8
  store i8 102, i8* %14, align 1
  %16 = lshr i32 %1, 1
  %17 = and i32 %16, 4
  %18 = lshr i32 %2, 3
  %19 = and i32 %18, 1
  %20 = or i32 %19, %17
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %13
  %23 = trunc i32 %20 to i8
  %24 = or i8 %23, 64
  %25 = load i8*, i8** %5, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %5, align 8
  store i8 %24, i8* %25, align 1
  br label %27

27:                                               ; preds = %13, %22
  %28 = load i8*, i8** %5, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %5, align 8
  store i8 15, i8* %28, align 1
  %30 = load i8*, i8** %5, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %5, align 8
  store i8 112, i8* %30, align 1
  %32 = shl i32 %1, 3
  %33 = and i32 %2, 7
  %34 = or i32 %33, %32
  %35 = trunc i32 %34 to i8
  %36 = or i8 %35, -64
  %37 = load i8*, i8** %5, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  store i8* %38, i8** %5, align 8
  store i8 %36, i8* %37, align 1
  %39 = load i8*, i8** %5, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  store i8* %40, i8** %5, align 8
  store i8 %3, i8* %39, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler6pshufdENS0_11XMMRegisterENS0_7OperandEh(%"class.v8::internal::Assembler"*, i32, i64, i32, i8 zeroext) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 -32
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %14, label %12, !prof !11

12:                                               ; preds = %5
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %13 = load i8*, i8** %6, align 8
  br label %14

14:                                               ; preds = %5, %12
  %15 = phi i8* [ %7, %5 ], [ %13, %12 ]
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %16, i8** %6, align 8
  store i8 102, i8* %15, align 1
  %17 = trunc i64 %2 to i8
  %18 = lshr i32 %1, 1
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 4
  %21 = or i8 %20, %17
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %27, label %23

23:                                               ; preds = %14
  %24 = or i8 %21, 64
  %25 = load i8*, i8** %6, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %6, align 8
  store i8 %24, i8* %25, align 1
  br label %27

27:                                               ; preds = %14, %23
  %28 = load i8*, i8** %6, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %6, align 8
  store i8 15, i8* %28, align 1
  %30 = load i8*, i8** %6, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %6, align 8
  store i8 112, i8* %30, align 1
  tail call void @_ZN2v88internal9Assembler12emit_operandENS0_8RegisterENS0_7OperandE(%"class.v8::internal::Assembler"* %0, i32 %1, i64 %2, i32 %3) #14
  %32 = load i8*, i8** %6, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %33, i8** %6, align 8
  store i8 %4, i8* %32, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler2dbEh(%"class.v8::internal::Assembler"*, i8 zeroext) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 -32
  %8 = icmp ult i8* %4, %7
  br i1 %8, label %11, label %9, !prof !11

9:                                                ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  %10 = load i8*, i8** %3, align 8
  br label %11

11:                                               ; preds = %2, %9
  %12 = phi i8* [ %4, %2 ], [ %10, %9 ]
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  store i8* %13, i8** %3, align 8
  store i8 %1, i8* %12, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler2ddEjNS0_9RelocInfo4ModeE(%"class.v8::internal::Assembler"*, i32, i8 signext) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::RelocInfo", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %3, %11
  %13 = icmp eq i8 %2, 0
  br i1 %13, label %32, label %14

14:                                               ; preds = %12
  %15 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 1
  %16 = load i8, i8* %15, align 1, !range !2
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %18, label %32

18:                                               ; preds = %14
  switch i8 %2, label %23 [
    i8 12, label %19
    i8 9, label %19
  ]

19:                                               ; preds = %18, %18
  %20 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 0
  %21 = load i8, i8* %20, align 8, !range !2
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %32, label %23

23:                                               ; preds = %19, %18
  %24 = bitcast %"class.v8::internal::RelocInfo"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %24) #14
  %25 = bitcast i8** %5 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 0
  store i64 %26, i64* %27, align 8
  %28 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 1
  store i8 %2, i8* %28, align 8
  %29 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 2
  %30 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1
  %31 = bitcast i64* %29 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %31, i8 0, i64 24, i1 false)
  call void @_ZN2v88internal15RelocInfoWriter5WriteEPKNS0_9RelocInfoE(%"class.v8::internal::RelocInfoWriter"* %30, %"class.v8::internal::RelocInfo"* nonnull %4) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %24) #14
  br label %32

32:                                               ; preds = %23, %19, %14, %12
  %33 = bitcast i8** %5 to i32**
  %34 = load i32*, i32** %33, align 8
  store i32 %1, i32* %34, align 1
  %35 = load i8*, i8** %5, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 4
  store i8* %36, i8** %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler2dqEmNS0_9RelocInfo4ModeE(%"class.v8::internal::Assembler"*, i64, i8 signext) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::internal::RelocInfo", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %3
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %3, %11
  %13 = icmp eq i8 %2, 0
  br i1 %13, label %32, label %14

14:                                               ; preds = %12
  %15 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 1
  %16 = load i8, i8* %15, align 1, !range !2
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %18, label %32

18:                                               ; preds = %14
  switch i8 %2, label %23 [
    i8 12, label %19
    i8 9, label %19
  ]

19:                                               ; preds = %18, %18
  %20 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 0
  %21 = load i8, i8* %20, align 8, !range !2
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %32, label %23

23:                                               ; preds = %19, %18
  %24 = bitcast %"class.v8::internal::RelocInfo"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %24) #14
  %25 = bitcast i8** %5 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 0
  store i64 %26, i64* %27, align 8
  %28 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 1
  store i8 %2, i8* %28, align 8
  %29 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 2
  %30 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1
  %31 = bitcast i64* %29 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %31, i8 0, i64 24, i1 false)
  call void @_ZN2v88internal15RelocInfoWriter5WriteEPKNS0_9RelocInfoE(%"class.v8::internal::RelocInfoWriter"* %30, %"class.v8::internal::RelocInfo"* nonnull %4) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %24) #14
  br label %32

32:                                               ; preds = %23, %19, %14, %12
  %33 = bitcast i8** %5 to i64**
  %34 = load i64*, i64** %33, align 8
  store i64 %1, i64* %34, align 1
  %35 = load i8*, i8** %5, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 8
  store i8* %36, i8** %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9Assembler2dqEPNS0_5LabelE(%"class.v8::internal::Assembler"*, %"class.v8::internal::Label"* nocapture) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.v8::internal::RelocInfo", align 8
  %4 = alloca %"class.v8::internal::RelocInfo", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 -32
  %10 = icmp ult i8* %6, %9
  br i1 %10, label %12, label %11, !prof !11

11:                                               ; preds = %2
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %0) #14
  br label %12

12:                                               ; preds = %2, %11
  %13 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %1, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %16, label %95

16:                                               ; preds = %12
  %17 = bitcast i8** %5 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %20 = bitcast i8** %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %18, %21
  %23 = trunc i64 %22 to i32
  %24 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %25 = bitcast i32*** %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %28 = bitcast i32*** %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = sub i64 %26, %29
  %31 = icmp eq i64 %30, 0
  %32 = shl i64 %30, 7
  %33 = add i64 %32, -1
  %34 = select i1 %31, i64 0, i64 %33
  %35 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 2, i32 0, i32 1
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %38 = load i64, i64* %37, align 8
  %39 = add i64 %38, %36
  %40 = icmp eq i64 %34, %39
  %41 = inttoptr i64 %29 to i32**
  %42 = inttoptr i64 %26 to i32**
  br i1 %40, label %43, label %50

43:                                               ; preds = %16
  %44 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 2
  tail call void @_ZNSt3__15dequeIiNS_9allocatorIiEEE19__add_back_capacityEv(%"class.std::__1::deque"* %44) #14
  %45 = load i64, i64* %37, align 8
  %46 = load i64, i64* %35, align 8
  %47 = load i32**, i32*** %27, align 8
  %48 = load i32**, i32*** %24, align 8
  %49 = add i64 %46, %45
  br label %50

50:                                               ; preds = %43, %16
  %51 = phi i64 [ %49, %43 ], [ %39, %16 ]
  %52 = phi i32** [ %48, %43 ], [ %42, %16 ]
  %53 = phi i32** [ %47, %43 ], [ %41, %16 ]
  %54 = icmp eq i32** %52, %53
  br i1 %54, label %61, label %55

55:                                               ; preds = %50
  %56 = lshr i64 %51, 10
  %57 = getelementptr inbounds i32*, i32** %53, i64 %56
  %58 = load i32*, i32** %57, align 8
  %59 = and i64 %51, 1023
  %60 = getelementptr inbounds i32, i32* %58, i64 %59
  br label %61

61:                                               ; preds = %50, %55
  %62 = phi i32* [ %60, %55 ], [ null, %50 ]
  store i32 %23, i32* %62, align 4
  %63 = load i64, i64* %37, align 8
  %64 = add i64 %63, 1
  store i64 %64, i64* %37, align 8
  %65 = load i64, i64* %20, align 8
  %66 = load i32, i32* %13, align 4
  %67 = icmp slt i32 %66, 0
  br i1 %67, label %68, label %70

68:                                               ; preds = %61
  %69 = xor i32 %66, -1
  br label %75

70:                                               ; preds = %61
  %71 = icmp eq i32 %66, 0
  br i1 %71, label %74, label %72

72:                                               ; preds = %70
  %73 = add nsw i32 %66, -1
  br label %75

74:                                               ; preds = %70
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14, i64 0, i64 0)) #15
  unreachable

75:                                               ; preds = %72, %68
  %76 = phi i32 [ %69, %68 ], [ %73, %72 ]
  %77 = sext i32 %76 to i64
  %78 = add i64 %65, %77
  %79 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 1
  %80 = load i8, i8* %79, align 1, !range !2
  %81 = icmp eq i8 %80, 0
  br i1 %81, label %82, label %90

82:                                               ; preds = %75
  %83 = bitcast %"class.v8::internal::RelocInfo"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %83) #14
  %84 = load i64, i64* %17, align 8
  %85 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %3, i64 0, i32 0
  store i64 %84, i64* %85, align 8
  %86 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %3, i64 0, i32 1
  store i8 10, i8* %86, align 8
  %87 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %3, i64 0, i32 2
  %88 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1
  %89 = bitcast i64* %87 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %89, i8 0, i64 24, i1 false) #14
  call void @_ZN2v88internal15RelocInfoWriter5WriteEPKNS0_9RelocInfoE(%"class.v8::internal::RelocInfoWriter"* %88, %"class.v8::internal::RelocInfo"* nonnull %3) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %83) #14
  br label %90

90:                                               ; preds = %75, %82
  %91 = bitcast i8** %5 to i64**
  %92 = load i64*, i64** %91, align 8
  store i64 %78, i64* %92, align 1
  %93 = load i8*, i8** %5, align 8
  %94 = getelementptr inbounds i8, i8* %93, i64 8
  store i8* %94, i8** %5, align 8
  br label %138

95:                                               ; preds = %12
  %96 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 9, i32 1
  %97 = load i8, i8* %96, align 1, !range !2
  %98 = icmp eq i8 %97, 0
  br i1 %98, label %99, label %108

99:                                               ; preds = %95
  %100 = bitcast %"class.v8::internal::RelocInfo"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %100) #14
  %101 = bitcast i8** %5 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 0
  store i64 %102, i64* %103, align 8
  %104 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 1
  store i8 10, i8* %104, align 8
  %105 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %4, i64 0, i32 2
  %106 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 1
  %107 = bitcast i64* %105 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %107, i8 0, i64 24, i1 false)
  call void @_ZN2v88internal15RelocInfoWriter5WriteEPKNS0_9RelocInfoE(%"class.v8::internal::RelocInfoWriter"* %106, %"class.v8::internal::RelocInfo"* nonnull %4) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %100) #14
  br label %108

108:                                              ; preds = %95, %99
  %109 = bitcast i8** %5 to i32**
  %110 = load i32*, i32** %109, align 8
  store i32 0, i32* %110, align 1
  %111 = load i8*, i8** %5, align 8
  %112 = getelementptr inbounds i8, i8* %111, i64 4
  store i8* %112, i8** %5, align 8
  %113 = load i32, i32* %13, align 4
  %114 = icmp sgt i32 %113, 0
  br i1 %114, label %115, label %127

115:                                              ; preds = %108
  %116 = bitcast i8* %112 to i32*
  %117 = add nsw i32 %113, -1
  store i32 %117, i32* %116, align 1
  %118 = load i8*, i8** %5, align 8
  %119 = getelementptr inbounds i8, i8* %118, i64 4
  store i8* %119, i8** %5, align 8
  %120 = ptrtoint i8* %119 to i64
  %121 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %122 = bitcast i8** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = sub i64 %120, %123
  %125 = trunc i64 %124 to i32
  %126 = add i32 %125, -3
  store i32 %126, i32* %13, align 4
  br label %138

127:                                              ; preds = %108
  %128 = ptrtoint i8* %112 to i64
  %129 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 2
  %130 = bitcast i8** %129 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = sub i64 %128, %131
  %133 = trunc i64 %132 to i32
  %134 = bitcast i8* %112 to i32*
  store i32 %133, i32* %134, align 1
  %135 = load i8*, i8** %5, align 8
  %136 = getelementptr inbounds i8, i8* %135, i64 4
  store i8* %136, i8** %5, align 8
  %137 = add nsw i32 %133, 1
  store i32 %137, i32* %13, align 4
  br label %138

138:                                              ; preds = %115, %127, %90
  ret void
}

declare void @_ZN2v88internal15RelocInfoWriter5WriteEPKNS0_9RelocInfoE(%"class.v8::internal::RelocInfoWriter"*, %"class.v8::internal::RelocInfo"*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN2v88internal9RelocInfo16IsCodedSpeciallyEv(%"class.v8::internal::RelocInfo"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::RelocInfo", %"class.v8::internal::RelocInfo"* %0, i64 0, i32 1
  %3 = load i8, i8* %2, align 8
  %4 = sext i8 %3 to i32
  %5 = shl i32 1, %4
  %6 = and i32 %5, 1346
  %7 = icmp ne i32 %6, 0
  ret i1 %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN2v88internal9RelocInfo16IsInConstantPoolEv(%"class.v8::internal::RelocInfo"* nocapture readnone) local_unnamed_addr #6 align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal9AssemblerD2Ev(%"class.v8::internal::Assembler"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN2v88internal9AssemblerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 6, i32 1, i32 0
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 6, i32 1, i32 0, i32 1, i32 0, i32 0
  %5 = bitcast %"class.std::__1::__tree_end_node"* %4 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  tail call void @_ZNSt3__16__treeINS_12__value_typeImiEENS_19__map_value_compareImS2_NS_4lessImEELb1EEENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree.71"* %3, %"class.std::__1::__tree_node"* %6) #14
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 5, i32 0
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 5, i32 0, i32 1, i32 0, i32 0
  %9 = bitcast %"class.std::__1::__tree_end_node"* %8 to %"class.std::__1::__tree_node.1297"**
  %10 = load %"class.std::__1::__tree_node.1297"*, %"class.std::__1::__tree_node.1297"** %9, align 8
  tail call void @_ZNSt3__16__treeINS_12__value_typeIPN2v88internal5LabelENS_6vectorIiNS_9allocatorIiEEEEEENS_19__map_value_compareIS5_SA_NS_4lessIS5_EELb1EEENS7_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE(%"class.std::__1::__tree"* %7, %"class.std::__1::__tree_node.1297"* %10) #14
  %11 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 4, i32 0
  tail call void @_ZNSt3__112__deque_baseIiNS_9allocatorIiEEED2Ev(%"class.std::__1::__deque_base"* %11) #14
  %12 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 2, i32 0
  tail call void @_ZNSt3__112__deque_baseIiNS_9allocatorIiEEED2Ev(%"class.std::__1::__deque_base"* %12) #14
  %13 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0
  tail call void @_ZN2v88internal13AssemblerBaseD2Ev(%"class.v8::internal::AssemblerBase"* %13) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal9AssemblerD0Ev(%"class.v8::internal::Assembler"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN2v88internal9AssemblerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 6, i32 1, i32 0
  %4 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 6, i32 1, i32 0, i32 1, i32 0, i32 0
  %5 = bitcast %"class.std::__1::__tree_end_node"* %4 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  tail call void @_ZNSt3__16__treeINS_12__value_typeImiEENS_19__map_value_compareImS2_NS_4lessImEELb1EEENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree.71"* %3, %"class.std::__1::__tree_node"* %6) #14
  %7 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 5, i32 0
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 5, i32 0, i32 1, i32 0, i32 0
  %9 = bitcast %"class.std::__1::__tree_end_node"* %8 to %"class.std::__1::__tree_node.1297"**
  %10 = load %"class.std::__1::__tree_node.1297"*, %"class.std::__1::__tree_node.1297"** %9, align 8
  tail call void @_ZNSt3__16__treeINS_12__value_typeIPN2v88internal5LabelENS_6vectorIiNS_9allocatorIiEEEEEENS_19__map_value_compareIS5_SA_NS_4lessIS5_EELb1EEENS7_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE(%"class.std::__1::__tree"* %7, %"class.std::__1::__tree_node.1297"* %10) #14
  %11 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 4, i32 0
  tail call void @_ZNSt3__112__deque_baseIiNS_9allocatorIiEEED2Ev(%"class.std::__1::__deque_base"* %11) #14
  %12 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 2, i32 0
  tail call void @_ZNSt3__112__deque_baseIiNS_9allocatorIiEEED2Ev(%"class.std::__1::__deque_base"* %12) #14
  %13 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %0, i64 0, i32 0
  tail call void @_ZN2v88internal13AssemblerBaseD2Ev(%"class.v8::internal::AssemblerBase"* %13) #14
  %14 = bitcast %"class.v8::internal::Assembler"* %0 to i8*
  tail call void @_ZN2v88internal8MalloceddlEPv(i8* %14) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal13AssemblerBase21AbortedCodeGenerationEv(%"class.v8::internal::AssemblerBase"*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE13NewHeapNumberILNS0_14AllocationTypeE1EEENS0_6HandleINS0_10HeapNumberEEEv(%"class.v8::internal::FactoryBase"*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #10

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #11

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"*) local_unnamed_addr #1 comdat {
  %3 = icmp eq %"class.std::__1::__tree_node_base"* %1, %0
  %4 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 3
  %5 = zext i1 %3 to i8
  store i8 %5, i8* %4, align 8
  br i1 %3, label %156, label %6

6:                                                ; preds = %2, %149
  %7 = phi %"class.std::__1::__tree_node_base"* [ %20, %149 ], [ %1, %2 ]
  %8 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %9 = bitcast %"class.std::__1::__tree_end_node"** %8 to %"class.std::__1::__tree_node_base"**
  %10 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 3
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %156

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %16 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 0, i32 0
  %18 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %17, align 8
  %19 = icmp eq %"class.std::__1::__tree_node_base"* %18, %10
  %20 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  br i1 %19, label %21, label %87

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 1, i32 0
  %23 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %22, align 8
  %24 = icmp eq %"class.std::__1::__tree_node_base"* %23, null
  br i1 %24, label %29, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %23, i64 0, i32 3
  %27 = load i8, i8* %26, align 8, !range !2
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %149, label %29

29:                                               ; preds = %25, %21
  %30 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %31 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %32 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %33 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %32, align 8
  %34 = icmp eq %"class.std::__1::__tree_node_base"* %33, %7
  br i1 %34, label %61, label %35

35:                                               ; preds = %29
  %36 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %37 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 1
  %38 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %37, align 8
  %39 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0, i32 0
  %40 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %39, align 8
  store %"class.std::__1::__tree_node_base"* %40, %"class.std::__1::__tree_node_base"** %37, align 8
  %41 = icmp eq %"class.std::__1::__tree_node_base"* %40, null
  br i1 %41, label %47, label %42

42:                                               ; preds = %35
  %43 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %44 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %40, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %43, %"class.std::__1::__tree_end_node"** %44, align 8
  %45 = bitcast %"class.std::__1::__tree_end_node"** %30 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %35, %42
  %48 = phi i64 [ %46, %42 ], [ %36, %35 ]
  %49 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %50 = bitcast %"class.std::__1::__tree_end_node"** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %30, align 8
  %52 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 0, i32 0
  %53 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %52, align 8
  %54 = icmp eq %"class.std::__1::__tree_node_base"* %53, %10
  %55 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 1, i32 0
  %56 = select i1 %54, %"class.std::__1::__tree_node_base"** %52, %"class.std::__1::__tree_node_base"** %55
  store %"class.std::__1::__tree_node_base"* %38, %"class.std::__1::__tree_node_base"** %56, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %39, align 8
  %57 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %57, %"class.std::__1::__tree_end_node"** %30, align 8
  %58 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %59 = bitcast %"class.std::__1::__tree_end_node"** %58 to %"class.std::__1::__tree_node_base"**
  %60 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %59, align 8
  br label %61

61:                                               ; preds = %47, %29
  %62 = phi %"class.std::__1::__tree_node_base"* [ %31, %29 ], [ %60, %47 ]
  %63 = phi %"class.std::__1::__tree_node_base"* [ %10, %29 ], [ %38, %47 ]
  %64 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %63, i64 0, i32 3
  store i8 1, i8* %64, align 8
  %65 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 3
  store i8 0, i8* %65, align 8
  %66 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0, i32 0
  %67 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %66, align 8
  %68 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 1
  %69 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %68, align 8
  store %"class.std::__1::__tree_node_base"* %69, %"class.std::__1::__tree_node_base"** %66, align 8
  %70 = icmp eq %"class.std::__1::__tree_node_base"* %69, null
  br i1 %70, label %74, label %71

71:                                               ; preds = %61
  %72 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0
  %73 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %69, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %72, %"class.std::__1::__tree_end_node"** %73, align 8
  br label %74

74:                                               ; preds = %71, %61
  %75 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 2
  %76 = bitcast %"class.std::__1::__tree_end_node"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 2
  %79 = bitcast %"class.std::__1::__tree_end_node"** %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %75, align 8
  %81 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 0, i32 0
  %82 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %81, align 8
  %83 = icmp eq %"class.std::__1::__tree_node_base"* %82, %62
  %84 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 1, i32 0
  %85 = select i1 %83, %"class.std::__1::__tree_node_base"** %81, %"class.std::__1::__tree_node_base"** %84
  store %"class.std::__1::__tree_node_base"* %67, %"class.std::__1::__tree_node_base"** %85, align 8
  store %"class.std::__1::__tree_node_base"* %62, %"class.std::__1::__tree_node_base"** %68, align 8
  %86 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %86, %"class.std::__1::__tree_end_node"** %75, align 8
  br label %156

87:                                               ; preds = %14
  %88 = icmp eq %"class.std::__1::__tree_node_base"* %18, null
  br i1 %88, label %93, label %89

89:                                               ; preds = %87
  %90 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 3
  %91 = load i8, i8* %90, align 8, !range !2
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %149, label %93

93:                                               ; preds = %89, %87
  %94 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %95 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %96 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %97 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %96, align 8
  %98 = icmp eq %"class.std::__1::__tree_node_base"* %97, %7
  br i1 %98, label %99, label %123

99:                                               ; preds = %93
  %100 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %101 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %102 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 1
  %103 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %102, align 8
  store %"class.std::__1::__tree_node_base"* %103, %"class.std::__1::__tree_node_base"** %101, align 8
  %104 = icmp eq %"class.std::__1::__tree_node_base"* %103, null
  br i1 %104, label %110, label %105

105:                                              ; preds = %99
  %106 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %107 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %103, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %106, %"class.std::__1::__tree_end_node"** %107, align 8
  %108 = bitcast %"class.std::__1::__tree_end_node"** %94 to i64*
  %109 = load i64, i64* %108, align 8
  br label %110

110:                                              ; preds = %99, %105
  %111 = phi i64 [ %109, %105 ], [ %100, %99 ]
  %112 = bitcast %"class.std::__1::__tree_end_node"** %8 to i64*
  store i64 %111, i64* %112, align 8
  %113 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %94, align 8
  %114 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 0, i32 0
  %115 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %114, align 8
  %116 = icmp eq %"class.std::__1::__tree_node_base"* %115, %10
  %117 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 1, i32 0
  %118 = select i1 %116, %"class.std::__1::__tree_node_base"** %114, %"class.std::__1::__tree_node_base"** %117
  store %"class.std::__1::__tree_node_base"* %7, %"class.std::__1::__tree_node_base"** %118, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %102, align 8
  %119 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %119, %"class.std::__1::__tree_end_node"** %94, align 8
  %120 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %121 = bitcast %"class.std::__1::__tree_end_node"** %120 to %"class.std::__1::__tree_node_base"**
  %122 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %121, align 8
  br label %123

123:                                              ; preds = %93, %110
  %124 = phi %"class.std::__1::__tree_node_base"* [ %122, %110 ], [ %95, %93 ]
  %125 = phi %"class.std::__1::__tree_node_base"* [ %7, %110 ], [ %10, %93 ]
  %126 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %125, i64 0, i32 3
  store i8 1, i8* %126, align 8
  %127 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 3
  store i8 0, i8* %127, align 8
  %128 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 1
  %129 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %128, align 8
  %130 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0, i32 0
  %131 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %130, align 8
  store %"class.std::__1::__tree_node_base"* %131, %"class.std::__1::__tree_node_base"** %128, align 8
  %132 = icmp eq %"class.std::__1::__tree_node_base"* %131, null
  br i1 %132, label %136, label %133

133:                                              ; preds = %123
  %134 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 0
  %135 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %131, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %134, %"class.std::__1::__tree_end_node"** %135, align 8
  br label %136

136:                                              ; preds = %133, %123
  %137 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 2
  %138 = bitcast %"class.std::__1::__tree_end_node"** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 2
  %141 = bitcast %"class.std::__1::__tree_end_node"** %140 to i64*
  store i64 %139, i64* %141, align 8
  %142 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %137, align 8
  %143 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 0, i32 0
  %144 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %143, align 8
  %145 = icmp eq %"class.std::__1::__tree_node_base"* %144, %124
  %146 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 1, i32 0
  %147 = select i1 %145, %"class.std::__1::__tree_node_base"** %143, %"class.std::__1::__tree_node_base"** %146
  store %"class.std::__1::__tree_node_base"* %129, %"class.std::__1::__tree_node_base"** %147, align 8
  store %"class.std::__1::__tree_node_base"* %124, %"class.std::__1::__tree_node_base"** %130, align 8
  %148 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %148, %"class.std::__1::__tree_end_node"** %137, align 8
  br label %156

149:                                              ; preds = %89, %25
  %150 = phi i8* [ %26, %25 ], [ %90, %89 ]
  store i8 1, i8* %11, align 8
  %151 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  %152 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 3
  %153 = bitcast %"class.std::__1::__tree_end_node"* %152 to i8*
  %154 = zext i1 %151 to i8
  store i8 %154, i8* %153, align 8
  store i8 1, i8* %150, align 8
  %155 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  br i1 %155, label %156, label %6

156:                                              ; preds = %6, %149, %2, %136, %74
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #12

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__treeINS_12__value_typeImiEENS_19__map_value_compareImS2_NS_4lessImEELb1EEENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree.71"*, %"class.std::__1::__tree_node"*) local_unnamed_addr #1 comdat align 2 {
  %3 = icmp eq %"class.std::__1::__tree_node"* %1, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %2
  %5 = bitcast %"class.std::__1::__tree_node"* %1 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  tail call void @_ZNSt3__16__treeINS_12__value_typeImiEENS_19__map_value_compareImS2_NS_4lessImEELb1EEENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree.71"* %0, %"class.std::__1::__tree_node"* %6) #14
  %7 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::__tree_node_base"** %7 to %"class.std::__1::__tree_node"**
  %9 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %8, align 8
  tail call void @_ZNSt3__16__treeINS_12__value_typeImiEENS_19__map_value_compareImS2_NS_4lessImEELb1EEENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree.71"* %0, %"class.std::__1::__tree_node"* %9) #14
  %10 = bitcast %"class.std::__1::__tree_node"* %1 to i8*
  tail call void @_ZdlPv(i8* %10) #17
  ret void

11:                                               ; preds = %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEmRKj(%"class.std::__1::vector.48"*, i64, i32* dereferenceable(4)) local_unnamed_addr #1 comdat align 2 {
  %4 = bitcast i32* %2 to i8*
  %5 = bitcast i32* %2 to i8*
  %6 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %0, i64 0, i32 0, i32 1
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %8, %11
  %13 = ashr exact i64 %12, 2
  %14 = icmp ult i64 %13, %1
  br i1 %14, label %130, label %15

15:                                               ; preds = %3
  %16 = inttoptr i64 %11 to i32*
  %17 = inttoptr i64 %11 to i8*
  %18 = getelementptr inbounds i32, i32* %16, i64 %1
  %19 = icmp eq i64 %1, 0
  br i1 %19, label %128, label %20

20:                                               ; preds = %15
  %21 = shl nsw i64 %1, 2
  %22 = add i64 %21, -4
  %23 = lshr exact i64 %22, 2
  %24 = add nuw nsw i64 %23, 1
  %25 = icmp ult i64 %24, 8
  br i1 %25, label %26, label %47

26:                                               ; preds = %105, %47, %20
  %27 = phi i32* [ %16, %47 ], [ %16, %20 ], [ %59, %105 ]
  %28 = ptrtoint i32* %27 to i64
  %29 = add i64 %1, -1
  %30 = getelementptr i32, i32* %16, i64 %29
  %31 = ptrtoint i32* %30 to i64
  %32 = sub i64 %31, %28
  %33 = lshr i64 %32, 2
  %34 = add nuw nsw i64 %33, 1
  %35 = and i64 %34, 7
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %44, label %37

37:                                               ; preds = %26, %37
  %38 = phi i32* [ %41, %37 ], [ %27, %26 ]
  %39 = phi i64 [ %42, %37 ], [ %35, %26 ]
  %40 = load i32, i32* %2, align 4
  store i32 %40, i32* %38, align 4
  %41 = getelementptr inbounds i32, i32* %38, i64 1
  %42 = add i64 %39, -1
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %37, !llvm.loop !57

44:                                               ; preds = %37, %26
  %45 = phi i32* [ %27, %26 ], [ %41, %37 ]
  %46 = icmp ult i64 %32, 28
  br i1 %46, label %107, label %109

47:                                               ; preds = %20
  %48 = shl nsw i64 %1, 2
  %49 = add i64 %48, -4
  %50 = lshr exact i64 %49, 2
  %51 = add nuw nsw i64 %50, 1
  %52 = getelementptr i32, i32* %16, i64 %51
  %53 = getelementptr i8, i8* %5, i64 1
  %54 = icmp ugt i8* %53, %17
  %55 = icmp ugt i32* %52, %2
  %56 = and i1 %54, %55
  br i1 %56, label %26, label %57

57:                                               ; preds = %47
  %58 = and i64 %24, 9223372036854775800
  %59 = getelementptr i32, i32* %16, i64 %58
  %60 = add nsw i64 %58, -8
  %61 = lshr exact i64 %60, 3
  %62 = add nuw nsw i64 %61, 1
  %63 = and i64 %62, 1
  %64 = icmp eq i64 %60, 0
  br i1 %64, label %92, label %65

65:                                               ; preds = %57
  %66 = sub nuw nsw i64 %62, %63
  %67 = load i32, i32* %2, align 4, !alias.scope !58
  %68 = insertelement <4 x i32> undef, i32 %67, i32 0
  %69 = shufflevector <4 x i32> %68, <4 x i32> undef, <4 x i32> zeroinitializer
  %70 = insertelement <4 x i32> undef, i32 %67, i32 0
  %71 = shufflevector <4 x i32> %70, <4 x i32> undef, <4 x i32> zeroinitializer
  %72 = load i32, i32* %2, align 4, !alias.scope !58
  %73 = insertelement <4 x i32> undef, i32 %72, i32 0
  %74 = shufflevector <4 x i32> %73, <4 x i32> undef, <4 x i32> zeroinitializer
  %75 = insertelement <4 x i32> undef, i32 %72, i32 0
  %76 = shufflevector <4 x i32> %75, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %77

77:                                               ; preds = %77, %65
  %78 = phi i64 [ 0, %65 ], [ %89, %77 ]
  %79 = phi i64 [ %66, %65 ], [ %90, %77 ]
  %80 = getelementptr i32, i32* %16, i64 %78
  %81 = bitcast i32* %80 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %81, align 4, !alias.scope !61, !noalias !58
  %82 = getelementptr i32, i32* %80, i64 4
  %83 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %83, align 4, !alias.scope !61, !noalias !58
  %84 = or i64 %78, 8
  %85 = getelementptr i32, i32* %16, i64 %84
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %86, align 4, !alias.scope !61, !noalias !58
  %87 = getelementptr i32, i32* %85, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %76, <4 x i32>* %88, align 4, !alias.scope !61, !noalias !58
  %89 = add i64 %78, 16
  %90 = add i64 %79, -2
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %77, !llvm.loop !63

92:                                               ; preds = %77, %57
  %93 = phi i64 [ 0, %57 ], [ %89, %77 ]
  %94 = icmp eq i64 %63, 0
  br i1 %94, label %105, label %95

95:                                               ; preds = %92
  %96 = getelementptr i32, i32* %16, i64 %93
  %97 = load i32, i32* %2, align 4, !alias.scope !58
  %98 = insertelement <4 x i32> undef, i32 %97, i32 0
  %99 = shufflevector <4 x i32> %98, <4 x i32> undef, <4 x i32> zeroinitializer
  %100 = insertelement <4 x i32> undef, i32 %97, i32 0
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> zeroinitializer
  %102 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %99, <4 x i32>* %102, align 4, !alias.scope !61, !noalias !58
  %103 = getelementptr i32, i32* %96, i64 4
  %104 = bitcast i32* %103 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %104, align 4, !alias.scope !61, !noalias !58
  br label %105

105:                                              ; preds = %92, %95
  %106 = icmp eq i64 %24, %58
  br i1 %106, label %107, label %26

107:                                              ; preds = %44, %109, %105
  %108 = ptrtoint i32* %18 to i64
  br label %128

109:                                              ; preds = %44, %109
  %110 = phi i32* [ %126, %109 ], [ %45, %44 ]
  %111 = load i32, i32* %2, align 4
  store i32 %111, i32* %110, align 4
  %112 = getelementptr inbounds i32, i32* %110, i64 1
  %113 = load i32, i32* %2, align 4
  store i32 %113, i32* %112, align 4
  %114 = getelementptr inbounds i32, i32* %110, i64 2
  %115 = load i32, i32* %2, align 4
  store i32 %115, i32* %114, align 4
  %116 = getelementptr inbounds i32, i32* %110, i64 3
  %117 = load i32, i32* %2, align 4
  store i32 %117, i32* %116, align 4
  %118 = getelementptr inbounds i32, i32* %110, i64 4
  %119 = load i32, i32* %2, align 4
  store i32 %119, i32* %118, align 4
  %120 = getelementptr inbounds i32, i32* %110, i64 5
  %121 = load i32, i32* %2, align 4
  store i32 %121, i32* %120, align 4
  %122 = getelementptr inbounds i32, i32* %110, i64 6
  %123 = load i32, i32* %2, align 4
  store i32 %123, i32* %122, align 4
  %124 = getelementptr inbounds i32, i32* %110, i64 7
  %125 = load i32, i32* %2, align 4
  store i32 %125, i32* %124, align 4
  %126 = getelementptr inbounds i32, i32* %110, i64 8
  %127 = icmp eq i32* %126, %18
  br i1 %127, label %107, label %109, !llvm.loop !65

128:                                              ; preds = %15, %107
  %129 = phi i64 [ %108, %107 ], [ %11, %15 ]
  store i64 %129, i64* %10, align 8
  br label %292

130:                                              ; preds = %3
  %131 = bitcast %"class.std::__1::vector.48"* %0 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = sub i64 %11, %132
  %134 = ashr exact i64 %133, 2
  %135 = add i64 %134, %1
  %136 = icmp ugt i64 %135, 4611686018427387903
  br i1 %136, label %137, label %139

137:                                              ; preds = %130
  %138 = bitcast %"class.std::__1::vector.48"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %138) #15
  unreachable

139:                                              ; preds = %130
  %140 = sub i64 %8, %132
  %141 = ashr exact i64 %140, 2
  %142 = icmp ult i64 %141, 2305843009213693951
  br i1 %142, label %143, label %151

143:                                              ; preds = %139
  %144 = ashr exact i64 %140, 1
  %145 = icmp ult i64 %144, %135
  %146 = select i1 %145, i64 %135, i64 %144
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %156, label %148

148:                                              ; preds = %143
  %149 = icmp ugt i64 %146, 4611686018427387903
  br i1 %149, label %150, label %151

150:                                              ; preds = %148
  tail call void @abort() #15
  unreachable

151:                                              ; preds = %139, %148
  %152 = phi i64 [ %146, %148 ], [ 4611686018427387903, %139 ]
  %153 = shl i64 %152, 2
  %154 = tail call i8* @_Znwm(i64 %153) #17
  %155 = bitcast i8* %154 to i32*
  br label %156

156:                                              ; preds = %143, %151
  %157 = phi i64 [ %152, %151 ], [ 0, %143 ]
  %158 = phi i32* [ %155, %151 ], [ null, %143 ]
  %159 = getelementptr inbounds i32, i32* %158, i64 %134
  %160 = getelementptr inbounds i32, i32* %158, i64 %157
  %161 = getelementptr inbounds i32, i32* %159, i64 %1
  %162 = shl nsw i64 %1, 2
  %163 = add i64 %162, -4
  %164 = lshr exact i64 %163, 2
  %165 = add nuw nsw i64 %164, 1
  %166 = icmp ult i64 %165, 8
  br i1 %166, label %229, label %167

167:                                              ; preds = %156
  %168 = bitcast i32* %159 to i8*
  %169 = shl nsw i64 %1, 2
  %170 = add i64 %169, -4
  %171 = lshr exact i64 %170, 2
  %172 = add nsw i64 %134, %171
  %173 = add i64 %172, 1
  %174 = getelementptr i32, i32* %158, i64 %173
  %175 = getelementptr i8, i8* %4, i64 1
  %176 = icmp ugt i8* %175, %168
  %177 = icmp ugt i32* %174, %2
  %178 = and i1 %176, %177
  br i1 %178, label %229, label %179

179:                                              ; preds = %167
  %180 = and i64 %165, 9223372036854775800
  %181 = getelementptr i32, i32* %159, i64 %180
  %182 = add nsw i64 %180, -8
  %183 = lshr exact i64 %182, 3
  %184 = add nuw nsw i64 %183, 1
  %185 = and i64 %184, 1
  %186 = icmp eq i64 %182, 0
  br i1 %186, label %214, label %187

187:                                              ; preds = %179
  %188 = sub nuw nsw i64 %184, %185
  %189 = load i32, i32* %2, align 4, !alias.scope !66
  %190 = insertelement <4 x i32> undef, i32 %189, i32 0
  %191 = shufflevector <4 x i32> %190, <4 x i32> undef, <4 x i32> zeroinitializer
  %192 = insertelement <4 x i32> undef, i32 %189, i32 0
  %193 = shufflevector <4 x i32> %192, <4 x i32> undef, <4 x i32> zeroinitializer
  %194 = load i32, i32* %2, align 4, !alias.scope !66
  %195 = insertelement <4 x i32> undef, i32 %194, i32 0
  %196 = shufflevector <4 x i32> %195, <4 x i32> undef, <4 x i32> zeroinitializer
  %197 = insertelement <4 x i32> undef, i32 %194, i32 0
  %198 = shufflevector <4 x i32> %197, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %199

199:                                              ; preds = %199, %187
  %200 = phi i64 [ 0, %187 ], [ %211, %199 ]
  %201 = phi i64 [ %188, %187 ], [ %212, %199 ]
  %202 = getelementptr i32, i32* %159, i64 %200
  %203 = bitcast i32* %202 to <4 x i32>*
  store <4 x i32> %191, <4 x i32>* %203, align 4, !alias.scope !69, !noalias !66
  %204 = getelementptr i32, i32* %202, i64 4
  %205 = bitcast i32* %204 to <4 x i32>*
  store <4 x i32> %193, <4 x i32>* %205, align 4, !alias.scope !69, !noalias !66
  %206 = or i64 %200, 8
  %207 = getelementptr i32, i32* %159, i64 %206
  %208 = bitcast i32* %207 to <4 x i32>*
  store <4 x i32> %196, <4 x i32>* %208, align 4, !alias.scope !69, !noalias !66
  %209 = getelementptr i32, i32* %207, i64 4
  %210 = bitcast i32* %209 to <4 x i32>*
  store <4 x i32> %198, <4 x i32>* %210, align 4, !alias.scope !69, !noalias !66
  %211 = add i64 %200, 16
  %212 = add i64 %201, -2
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %214, label %199, !llvm.loop !71

214:                                              ; preds = %199, %179
  %215 = phi i64 [ 0, %179 ], [ %211, %199 ]
  %216 = icmp eq i64 %185, 0
  br i1 %216, label %227, label %217

217:                                              ; preds = %214
  %218 = getelementptr i32, i32* %159, i64 %215
  %219 = load i32, i32* %2, align 4, !alias.scope !66
  %220 = insertelement <4 x i32> undef, i32 %219, i32 0
  %221 = shufflevector <4 x i32> %220, <4 x i32> undef, <4 x i32> zeroinitializer
  %222 = insertelement <4 x i32> undef, i32 %219, i32 0
  %223 = shufflevector <4 x i32> %222, <4 x i32> undef, <4 x i32> zeroinitializer
  %224 = bitcast i32* %218 to <4 x i32>*
  store <4 x i32> %221, <4 x i32>* %224, align 4, !alias.scope !69, !noalias !66
  %225 = getelementptr i32, i32* %218, i64 4
  %226 = bitcast i32* %225 to <4 x i32>*
  store <4 x i32> %223, <4 x i32>* %226, align 4, !alias.scope !69, !noalias !66
  br label %227

227:                                              ; preds = %214, %217
  %228 = icmp eq i64 %165, %180
  br i1 %228, label %270, label %229

229:                                              ; preds = %227, %167, %156
  %230 = phi i32* [ %159, %167 ], [ %159, %156 ], [ %181, %227 ]
  %231 = ptrtoint i32* %230 to i64
  %232 = add i64 %134, %1
  %233 = add i64 %232, -1
  %234 = getelementptr i32, i32* %158, i64 %233
  %235 = ptrtoint i32* %234 to i64
  %236 = sub i64 %235, %231
  %237 = lshr i64 %236, 2
  %238 = add nuw nsw i64 %237, 1
  %239 = and i64 %238, 7
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %248, label %241

241:                                              ; preds = %229, %241
  %242 = phi i32* [ %245, %241 ], [ %230, %229 ]
  %243 = phi i64 [ %246, %241 ], [ %239, %229 ]
  %244 = load i32, i32* %2, align 4
  store i32 %244, i32* %242, align 4
  %245 = getelementptr inbounds i32, i32* %242, i64 1
  %246 = add i64 %243, -1
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %248, label %241, !llvm.loop !72

248:                                              ; preds = %241, %229
  %249 = phi i32* [ %230, %229 ], [ %245, %241 ]
  %250 = icmp ult i64 %236, 28
  br i1 %250, label %270, label %251

251:                                              ; preds = %248, %251
  %252 = phi i32* [ %268, %251 ], [ %249, %248 ]
  %253 = load i32, i32* %2, align 4
  store i32 %253, i32* %252, align 4
  %254 = getelementptr inbounds i32, i32* %252, i64 1
  %255 = load i32, i32* %2, align 4
  store i32 %255, i32* %254, align 4
  %256 = getelementptr inbounds i32, i32* %252, i64 2
  %257 = load i32, i32* %2, align 4
  store i32 %257, i32* %256, align 4
  %258 = getelementptr inbounds i32, i32* %252, i64 3
  %259 = load i32, i32* %2, align 4
  store i32 %259, i32* %258, align 4
  %260 = getelementptr inbounds i32, i32* %252, i64 4
  %261 = load i32, i32* %2, align 4
  store i32 %261, i32* %260, align 4
  %262 = getelementptr inbounds i32, i32* %252, i64 5
  %263 = load i32, i32* %2, align 4
  store i32 %263, i32* %262, align 4
  %264 = getelementptr inbounds i32, i32* %252, i64 6
  %265 = load i32, i32* %2, align 4
  store i32 %265, i32* %264, align 4
  %266 = getelementptr inbounds i32, i32* %252, i64 7
  %267 = load i32, i32* %2, align 4
  store i32 %267, i32* %266, align 4
  %268 = getelementptr inbounds i32, i32* %252, i64 8
  %269 = icmp eq i32* %161, %268
  br i1 %269, label %270, label %251, !llvm.loop !73

270:                                              ; preds = %248, %251, %227
  %271 = ptrtoint i32* %160 to i64
  %272 = ptrtoint i32* %161 to i64
  %273 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %0, i64 0, i32 0, i32 0
  %274 = load i32*, i32** %273, align 8
  %275 = load i64, i64* %10, align 8
  %276 = ptrtoint i32* %274 to i64
  %277 = sub i64 %275, %276
  %278 = ashr exact i64 %277, 2
  %279 = sub nsw i64 0, %278
  %280 = getelementptr inbounds i32, i32* %159, i64 %279
  %281 = ptrtoint i32* %280 to i64
  %282 = icmp sgt i64 %277, 0
  br i1 %282, label %283, label %287

283:                                              ; preds = %270
  %284 = bitcast i32* %280 to i8*
  %285 = bitcast i32* %274 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %284, i8* align 4 %285, i64 %277, i1 false) #14
  %286 = load i32*, i32** %273, align 8
  br label %287

287:                                              ; preds = %270, %283
  %288 = phi i32* [ %274, %270 ], [ %286, %283 ]
  store i64 %281, i64* %131, align 8
  store i64 %272, i64* %10, align 8
  store i64 %271, i64* %7, align 8
  %289 = icmp eq i32* %288, null
  br i1 %289, label %292, label %290

290:                                              ; preds = %287
  %291 = bitcast i32* %288 to i8*
  tail call void @_ZdlPv(i8* %291) #17
  br label %292

292:                                              ; preds = %290, %287, %128
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeIiNS_9allocatorIiEEE19__add_back_capacityEv(%"class.std::__1::deque"*) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp ugt i64 %5, 1023
  br i1 %6, label %7, label %161

7:                                                ; preds = %1
  %8 = add i64 %5, -1024
  store i64 %8, i64* %4, align 8
  %9 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %10 = load i32**, i32*** %9, align 8
  %11 = bitcast i32** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds i32*, i32** %10, i64 1
  store i32** %13, i32*** %9, align 8
  %14 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %15 = load i32**, i32*** %14, align 8
  %16 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %17 = load i32**, i32*** %16, align 8
  %18 = icmp eq i32** %15, %17
  %19 = ptrtoint i32** %17 to i64
  %20 = bitcast i32** %15 to i64*
  br i1 %18, label %21, label %157

21:                                               ; preds = %7
  %22 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %23 = load i32**, i32*** %22, align 8
  %24 = icmp ugt i32** %13, %23
  %25 = ptrtoint i32** %23 to i64
  br i1 %24, label %26, label %46

26:                                               ; preds = %21
  %27 = ptrtoint i32** %13 to i64
  %28 = sub i64 %27, %25
  %29 = ashr exact i64 %28, 3
  %30 = add nsw i64 %29, 1
  %31 = sdiv i64 %30, -2
  %32 = getelementptr inbounds i32*, i32** %13, i64 %31
  %33 = ptrtoint i32** %15 to i64
  %34 = sub i64 %33, %27
  %35 = ashr exact i64 %34, 3
  %36 = icmp eq i64 %34, 0
  br i1 %36, label %41, label %37

37:                                               ; preds = %26
  %38 = bitcast i32** %32 to i8*
  %39 = bitcast i32** %13 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %38, i8* align 8 %39, i64 %34, i1 false) #14
  %40 = load i32**, i32*** %9, align 8
  br label %41

41:                                               ; preds = %37, %26
  %42 = phi i32** [ %13, %26 ], [ %40, %37 ]
  %43 = getelementptr inbounds i32*, i32** %32, i64 %35
  store i32** %43, i32*** %14, align 8
  %44 = getelementptr inbounds i32*, i32** %42, i64 %31
  store i32** %44, i32*** %9, align 8
  %45 = bitcast i32** %43 to i64*
  br label %157

46:                                               ; preds = %21
  %47 = bitcast i32*** %16 to i64*
  %48 = bitcast %"class.std::__1::deque"* %0 to i64*
  %49 = sub i64 %19, %25
  %50 = ashr exact i64 %49, 2
  %51 = icmp eq i64 %49, 0
  %52 = select i1 %51, i64 1, i64 %50
  %53 = icmp ugt i64 %52, 2305843009213693951
  br i1 %53, label %54, label %55

54:                                               ; preds = %46
  tail call void @abort() #15
  unreachable

55:                                               ; preds = %46
  %56 = lshr i64 %52, 2
  %57 = shl i64 %52, 3
  %58 = tail call i8* @_Znwm(i64 %57) #17
  %59 = bitcast i8* %58 to i32**
  %60 = ptrtoint i8* %58 to i64
  %61 = getelementptr inbounds i32*, i32** %59, i64 %56
  %62 = ptrtoint i32** %61 to i64
  %63 = getelementptr inbounds i32*, i32** %59, i64 %52
  %64 = ptrtoint i32** %63 to i64
  %65 = ptrtoint i32** %13 to i64
  %66 = ptrtoint i32** %15 to i64
  %67 = sub i64 %66, %65
  %68 = ashr exact i64 %67, 3
  %69 = getelementptr inbounds i32*, i32** %61, i64 %68
  %70 = icmp eq i64 %67, 0
  br i1 %70, label %146, label %71

71:                                               ; preds = %55
  %72 = add i64 %67, -8
  %73 = lshr i64 %72, 3
  %74 = add nuw nsw i64 %73, 1
  %75 = and i64 %74, 7
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %92, label %77

77:                                               ; preds = %71, %77
  %78 = phi i32** [ %85, %77 ], [ %61, %71 ]
  %79 = phi i64 [ %86, %77 ], [ %62, %71 ]
  %80 = phi i32** [ %87, %77 ], [ %13, %71 ]
  %81 = phi i64 [ %88, %77 ], [ %75, %71 ]
  %82 = bitcast i32** %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = inttoptr i64 %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds i32*, i32** %78, i64 1
  %86 = ptrtoint i32** %85 to i64
  %87 = getelementptr inbounds i32*, i32** %80, i64 1
  %88 = add i64 %81, -1
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %90, label %77, !llvm.loop !74

90:                                               ; preds = %77
  %91 = ptrtoint i32** %85 to i64
  br label %92

92:                                               ; preds = %71, %90
  %93 = phi i32** [ %61, %71 ], [ %85, %90 ]
  %94 = phi i64 [ %62, %71 ], [ %91, %90 ]
  %95 = phi i32** [ %13, %71 ], [ %87, %90 ]
  %96 = icmp ult i64 %72, 56
  br i1 %96, label %143, label %97

97:                                               ; preds = %92, %97
  %98 = phi i32** [ %139, %97 ], [ %93, %92 ]
  %99 = phi i64 [ %140, %97 ], [ %94, %92 ]
  %100 = phi i32** [ %141, %97 ], [ %95, %92 ]
  %101 = bitcast i32** %100 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = inttoptr i64 %99 to i64*
  store i64 %102, i64* %103, align 8
  %104 = getelementptr inbounds i32*, i32** %98, i64 1
  %105 = getelementptr inbounds i32*, i32** %100, i64 1
  %106 = bitcast i32** %105 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = bitcast i32** %104 to i64*
  store i64 %107, i64* %108, align 8
  %109 = getelementptr inbounds i32*, i32** %98, i64 2
  %110 = getelementptr inbounds i32*, i32** %100, i64 2
  %111 = bitcast i32** %110 to i64*
  %112 = load i64, i64* %111, align 8
  %113 = bitcast i32** %109 to i64*
  store i64 %112, i64* %113, align 8
  %114 = getelementptr inbounds i32*, i32** %98, i64 3
  %115 = getelementptr inbounds i32*, i32** %100, i64 3
  %116 = bitcast i32** %115 to i64*
  %117 = load i64, i64* %116, align 8
  %118 = bitcast i32** %114 to i64*
  store i64 %117, i64* %118, align 8
  %119 = getelementptr inbounds i32*, i32** %98, i64 4
  %120 = getelementptr inbounds i32*, i32** %100, i64 4
  %121 = bitcast i32** %120 to i64*
  %122 = load i64, i64* %121, align 8
  %123 = bitcast i32** %119 to i64*
  store i64 %122, i64* %123, align 8
  %124 = getelementptr inbounds i32*, i32** %98, i64 5
  %125 = getelementptr inbounds i32*, i32** %100, i64 5
  %126 = bitcast i32** %125 to i64*
  %127 = load i64, i64* %126, align 8
  %128 = bitcast i32** %124 to i64*
  store i64 %127, i64* %128, align 8
  %129 = getelementptr inbounds i32*, i32** %98, i64 6
  %130 = getelementptr inbounds i32*, i32** %100, i64 6
  %131 = bitcast i32** %130 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = bitcast i32** %129 to i64*
  store i64 %132, i64* %133, align 8
  %134 = getelementptr inbounds i32*, i32** %98, i64 7
  %135 = getelementptr inbounds i32*, i32** %100, i64 7
  %136 = bitcast i32** %135 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = bitcast i32** %134 to i64*
  store i64 %137, i64* %138, align 8
  %139 = getelementptr inbounds i32*, i32** %98, i64 8
  %140 = ptrtoint i32** %139 to i64
  %141 = getelementptr inbounds i32*, i32** %100, i64 8
  %142 = icmp eq i32** %69, %139
  br i1 %142, label %143, label %97

143:                                              ; preds = %97, %92
  %144 = ptrtoint i32** %69 to i64
  %145 = load i32**, i32*** %22, align 8
  br label %146

146:                                              ; preds = %143, %55
  %147 = phi i32** [ %145, %143 ], [ %23, %55 ]
  %148 = phi i64 [ %144, %143 ], [ %62, %55 ]
  store i64 %60, i64* %48, align 8
  %149 = bitcast i32*** %9 to i64*
  store i64 %62, i64* %149, align 8
  %150 = bitcast i32*** %14 to i64*
  store i64 %148, i64* %150, align 8
  store i64 %64, i64* %47, align 8
  %151 = icmp eq i32** %147, null
  %152 = inttoptr i64 %148 to i64*
  br i1 %151, label %157, label %153

153:                                              ; preds = %146
  %154 = bitcast i32** %147 to i8*
  tail call void @_ZdlPv(i8* %154) #17
  %155 = bitcast i32*** %14 to i64**
  %156 = load i64*, i64** %155, align 8
  br label %157

157:                                              ; preds = %7, %41, %146, %153
  %158 = phi i64* [ %156, %153 ], [ %152, %146 ], [ %45, %41 ], [ %20, %7 ]
  store i64 %12, i64* %158, align 8
  %159 = load i32**, i32*** %14, align 8
  %160 = getelementptr inbounds i32*, i32** %159, i64 1
  store i32** %160, i32*** %14, align 8
  br label %549

161:                                              ; preds = %1
  %162 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0
  %163 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %164 = bitcast i32*** %163 to i64*
  %165 = load i64, i64* %164, align 8
  %166 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %167 = bitcast i32*** %166 to i64*
  %168 = load i64, i64* %167, align 8
  %169 = sub i64 %165, %168
  %170 = ashr exact i64 %169, 3
  %171 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %172 = bitcast i32*** %171 to i64*
  %173 = load i64, i64* %172, align 8
  %174 = bitcast %"class.std::__1::deque"* %0 to i64*
  %175 = load i64, i64* %174, align 8
  %176 = sub i64 %173, %175
  %177 = ashr exact i64 %176, 3
  %178 = icmp ult i64 %170, %177
  %179 = inttoptr i64 %165 to i32**
  %180 = inttoptr i64 %168 to i32**
  br i1 %178, label %181, label %336

181:                                              ; preds = %161
  %182 = icmp eq i64 %173, %165
  br i1 %182, label %187, label %183

183:                                              ; preds = %181
  %184 = bitcast i32** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %184) #14
  %185 = tail call i8* @_Znwm(i64 4096) #17
  %186 = bitcast i32** %2 to i8**
  store i8* %185, i8** %186, align 8
  call void @_ZNSt3__114__split_bufferIPiNS_9allocatorIS1_EEE9push_backEOS1_(%"struct.std::__1::__split_buffer"* %162, i32** nonnull dereferenceable(8) %2)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %184) #14
  br label %549

187:                                              ; preds = %181
  %188 = bitcast i32** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %188) #14
  %189 = tail call i8* @_Znwm(i64 4096) #17
  %190 = bitcast i32** %3 to i8**
  store i8* %189, i8** %190, align 8
  call void @_ZNSt3__114__split_bufferIPiNS_9allocatorIS1_EEE10push_frontEOS1_(%"struct.std::__1::__split_buffer"* %162, i32** nonnull dereferenceable(8) %3)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %188) #14
  %191 = load i32**, i32*** %166, align 8
  %192 = bitcast i32** %191 to i64*
  %193 = load i64, i64* %192, align 8
  %194 = getelementptr inbounds i32*, i32** %191, i64 1
  store i32** %194, i32*** %166, align 8
  %195 = load i32**, i32*** %163, align 8
  %196 = load i32**, i32*** %171, align 8
  %197 = icmp eq i32** %195, %196
  %198 = ptrtoint i32** %196 to i64
  %199 = bitcast i32** %195 to i64*
  br i1 %197, label %200, label %332

200:                                              ; preds = %187
  %201 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %202 = load i32**, i32*** %201, align 8
  %203 = icmp ugt i32** %194, %202
  %204 = ptrtoint i32** %202 to i64
  br i1 %203, label %205, label %225

205:                                              ; preds = %200
  %206 = ptrtoint i32** %194 to i64
  %207 = sub i64 %206, %204
  %208 = ashr exact i64 %207, 3
  %209 = add nsw i64 %208, 1
  %210 = sdiv i64 %209, -2
  %211 = getelementptr inbounds i32*, i32** %194, i64 %210
  %212 = ptrtoint i32** %195 to i64
  %213 = sub i64 %212, %206
  %214 = ashr exact i64 %213, 3
  %215 = icmp eq i64 %213, 0
  br i1 %215, label %220, label %216

216:                                              ; preds = %205
  %217 = bitcast i32** %211 to i8*
  %218 = bitcast i32** %194 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %217, i8* align 8 %218, i64 %213, i1 false) #14
  %219 = load i32**, i32*** %166, align 8
  br label %220

220:                                              ; preds = %216, %205
  %221 = phi i32** [ %194, %205 ], [ %219, %216 ]
  %222 = getelementptr inbounds i32*, i32** %211, i64 %214
  store i32** %222, i32*** %163, align 8
  %223 = getelementptr inbounds i32*, i32** %221, i64 %210
  store i32** %223, i32*** %166, align 8
  %224 = bitcast i32** %222 to i64*
  br label %332

225:                                              ; preds = %200
  %226 = sub i64 %198, %204
  %227 = ashr exact i64 %226, 2
  %228 = icmp eq i64 %226, 0
  %229 = select i1 %228, i64 1, i64 %227
  %230 = icmp ugt i64 %229, 2305843009213693951
  br i1 %230, label %231, label %232

231:                                              ; preds = %225
  call void @abort() #15
  unreachable

232:                                              ; preds = %225
  %233 = lshr i64 %229, 2
  %234 = shl i64 %229, 3
  %235 = call i8* @_Znwm(i64 %234) #17
  %236 = bitcast i8* %235 to i32**
  %237 = ptrtoint i8* %235 to i64
  %238 = getelementptr inbounds i32*, i32** %236, i64 %233
  %239 = ptrtoint i32** %238 to i64
  %240 = getelementptr inbounds i32*, i32** %236, i64 %229
  %241 = ptrtoint i32** %240 to i64
  %242 = ptrtoint i32** %194 to i64
  %243 = ptrtoint i32** %195 to i64
  %244 = sub i64 %243, %242
  %245 = ashr exact i64 %244, 3
  %246 = getelementptr inbounds i32*, i32** %238, i64 %245
  %247 = icmp eq i64 %244, 0
  br i1 %247, label %323, label %248

248:                                              ; preds = %232
  %249 = add i64 %244, -8
  %250 = lshr i64 %249, 3
  %251 = add nuw nsw i64 %250, 1
  %252 = and i64 %251, 7
  %253 = icmp eq i64 %252, 0
  br i1 %253, label %269, label %254

254:                                              ; preds = %248, %254
  %255 = phi i32** [ %262, %254 ], [ %238, %248 ]
  %256 = phi i64 [ %263, %254 ], [ %239, %248 ]
  %257 = phi i32** [ %264, %254 ], [ %194, %248 ]
  %258 = phi i64 [ %265, %254 ], [ %252, %248 ]
  %259 = bitcast i32** %257 to i64*
  %260 = load i64, i64* %259, align 8
  %261 = inttoptr i64 %256 to i64*
  store i64 %260, i64* %261, align 8
  %262 = getelementptr inbounds i32*, i32** %255, i64 1
  %263 = ptrtoint i32** %262 to i64
  %264 = getelementptr inbounds i32*, i32** %257, i64 1
  %265 = add i64 %258, -1
  %266 = icmp eq i64 %265, 0
  br i1 %266, label %267, label %254, !llvm.loop !75

267:                                              ; preds = %254
  %268 = ptrtoint i32** %262 to i64
  br label %269

269:                                              ; preds = %248, %267
  %270 = phi i32** [ %238, %248 ], [ %262, %267 ]
  %271 = phi i64 [ %239, %248 ], [ %268, %267 ]
  %272 = phi i32** [ %194, %248 ], [ %264, %267 ]
  %273 = icmp ult i64 %249, 56
  br i1 %273, label %320, label %274

274:                                              ; preds = %269, %274
  %275 = phi i32** [ %316, %274 ], [ %270, %269 ]
  %276 = phi i64 [ %317, %274 ], [ %271, %269 ]
  %277 = phi i32** [ %318, %274 ], [ %272, %269 ]
  %278 = bitcast i32** %277 to i64*
  %279 = load i64, i64* %278, align 8
  %280 = inttoptr i64 %276 to i64*
  store i64 %279, i64* %280, align 8
  %281 = getelementptr inbounds i32*, i32** %275, i64 1
  %282 = getelementptr inbounds i32*, i32** %277, i64 1
  %283 = bitcast i32** %282 to i64*
  %284 = load i64, i64* %283, align 8
  %285 = bitcast i32** %281 to i64*
  store i64 %284, i64* %285, align 8
  %286 = getelementptr inbounds i32*, i32** %275, i64 2
  %287 = getelementptr inbounds i32*, i32** %277, i64 2
  %288 = bitcast i32** %287 to i64*
  %289 = load i64, i64* %288, align 8
  %290 = bitcast i32** %286 to i64*
  store i64 %289, i64* %290, align 8
  %291 = getelementptr inbounds i32*, i32** %275, i64 3
  %292 = getelementptr inbounds i32*, i32** %277, i64 3
  %293 = bitcast i32** %292 to i64*
  %294 = load i64, i64* %293, align 8
  %295 = bitcast i32** %291 to i64*
  store i64 %294, i64* %295, align 8
  %296 = getelementptr inbounds i32*, i32** %275, i64 4
  %297 = getelementptr inbounds i32*, i32** %277, i64 4
  %298 = bitcast i32** %297 to i64*
  %299 = load i64, i64* %298, align 8
  %300 = bitcast i32** %296 to i64*
  store i64 %299, i64* %300, align 8
  %301 = getelementptr inbounds i32*, i32** %275, i64 5
  %302 = getelementptr inbounds i32*, i32** %277, i64 5
  %303 = bitcast i32** %302 to i64*
  %304 = load i64, i64* %303, align 8
  %305 = bitcast i32** %301 to i64*
  store i64 %304, i64* %305, align 8
  %306 = getelementptr inbounds i32*, i32** %275, i64 6
  %307 = getelementptr inbounds i32*, i32** %277, i64 6
  %308 = bitcast i32** %307 to i64*
  %309 = load i64, i64* %308, align 8
  %310 = bitcast i32** %306 to i64*
  store i64 %309, i64* %310, align 8
  %311 = getelementptr inbounds i32*, i32** %275, i64 7
  %312 = getelementptr inbounds i32*, i32** %277, i64 7
  %313 = bitcast i32** %312 to i64*
  %314 = load i64, i64* %313, align 8
  %315 = bitcast i32** %311 to i64*
  store i64 %314, i64* %315, align 8
  %316 = getelementptr inbounds i32*, i32** %275, i64 8
  %317 = ptrtoint i32** %316 to i64
  %318 = getelementptr inbounds i32*, i32** %277, i64 8
  %319 = icmp eq i32** %246, %316
  br i1 %319, label %320, label %274

320:                                              ; preds = %274, %269
  %321 = ptrtoint i32** %246 to i64
  %322 = load i32**, i32*** %201, align 8
  br label %323

323:                                              ; preds = %320, %232
  %324 = phi i32** [ %322, %320 ], [ %202, %232 ]
  %325 = phi i64 [ %321, %320 ], [ %239, %232 ]
  store i64 %237, i64* %174, align 8
  store i64 %239, i64* %167, align 8
  store i64 %325, i64* %164, align 8
  store i64 %241, i64* %172, align 8
  %326 = icmp eq i32** %324, null
  %327 = inttoptr i64 %325 to i64*
  br i1 %326, label %332, label %328

328:                                              ; preds = %323
  %329 = bitcast i32** %324 to i8*
  call void @_ZdlPv(i8* %329) #17
  %330 = bitcast i32*** %163 to i64**
  %331 = load i64*, i64** %330, align 8
  br label %332

332:                                              ; preds = %187, %220, %323, %328
  %333 = phi i64* [ %331, %328 ], [ %327, %323 ], [ %224, %220 ], [ %199, %187 ]
  store i64 %193, i64* %333, align 8
  %334 = load i32**, i32*** %163, align 8
  %335 = getelementptr inbounds i32*, i32** %334, i64 1
  store i32** %335, i32*** %163, align 8
  br label %549

336:                                              ; preds = %161
  %337 = ashr exact i64 %176, 2
  %338 = icmp eq i64 %176, 0
  %339 = select i1 %338, i64 1, i64 %337
  %340 = icmp ugt i64 %339, 2305843009213693951
  br i1 %340, label %341, label %342

341:                                              ; preds = %336
  tail call void @abort() #15
  unreachable

342:                                              ; preds = %336
  %343 = shl i64 %339, 3
  %344 = tail call i8* @_Znwm(i64 %343) #17
  %345 = bitcast i8* %344 to i32**
  %346 = ptrtoint i8* %344 to i64
  %347 = getelementptr inbounds i32*, i32** %345, i64 %170
  %348 = ptrtoint i32** %347 to i64
  %349 = getelementptr inbounds i32*, i32** %345, i64 %339
  %350 = ptrtoint i32** %349 to i64
  %351 = tail call i8* @_Znwm(i64 4096) #17
  %352 = ptrtoint i8* %351 to i64
  %353 = icmp eq i64 %170, %339
  br i1 %353, label %354, label %382

354:                                              ; preds = %342
  %355 = icmp ugt i32** %347, %345
  br i1 %355, label %356, label %363

356:                                              ; preds = %354
  %357 = sub i64 %348, %346
  %358 = ashr exact i64 %357, 3
  %359 = add nsw i64 %358, 1
  %360 = sdiv i64 %359, -2
  %361 = getelementptr inbounds i32*, i32** %347, i64 %360
  %362 = ptrtoint i32** %361 to i64
  br label %382

363:                                              ; preds = %354
  %364 = sub i64 %350, %346
  %365 = ashr exact i64 %364, 2
  %366 = icmp eq i64 %364, 0
  %367 = select i1 %366, i64 1, i64 %365
  %368 = icmp ugt i64 %367, 2305843009213693951
  br i1 %368, label %369, label %370

369:                                              ; preds = %363
  tail call void @abort() #15
  unreachable

370:                                              ; preds = %363
  %371 = lshr i64 %367, 2
  %372 = shl i64 %367, 3
  %373 = tail call i8* @_Znwm(i64 %372) #17
  %374 = bitcast i8* %373 to i32**
  %375 = ptrtoint i8* %373 to i64
  %376 = getelementptr inbounds i32*, i32** %374, i64 %371
  %377 = ptrtoint i32** %376 to i64
  %378 = getelementptr inbounds i32*, i32** %374, i64 %367
  %379 = ptrtoint i32** %378 to i64
  tail call void @_ZdlPv(i8* nonnull %344) #17
  %380 = load i32**, i32*** %163, align 8
  %381 = load i32**, i32*** %166, align 8
  br label %382

382:                                              ; preds = %342, %356, %370
  %383 = phi i32** [ %180, %356 ], [ %381, %370 ], [ %180, %342 ]
  %384 = phi i32** [ %179, %356 ], [ %380, %370 ], [ %179, %342 ]
  %385 = phi i64 [ %346, %356 ], [ %375, %370 ], [ %346, %342 ]
  %386 = phi i64 [ %362, %356 ], [ %377, %370 ], [ %348, %342 ]
  %387 = phi i32** [ %361, %356 ], [ %376, %370 ], [ %347, %342 ]
  %388 = phi i64 [ %350, %356 ], [ %379, %370 ], [ %350, %342 ]
  %389 = bitcast i32** %387 to i64*
  store i64 %352, i64* %389, align 8
  %390 = getelementptr inbounds i32*, i32** %387, i64 1
  %391 = ptrtoint i32** %390 to i64
  %392 = icmp eq i32** %384, %383
  br i1 %392, label %395, label %405

393:                                              ; preds = %537
  %394 = ptrtoint i32** %542 to i64
  br label %395

395:                                              ; preds = %393, %382
  %396 = phi i64 [ %385, %382 ], [ %538, %393 ]
  %397 = phi i64 [ %386, %382 ], [ %394, %393 ]
  %398 = phi i64 [ %391, %382 ], [ %539, %393 ]
  %399 = phi i64 [ %388, %382 ], [ %540, %393 ]
  %400 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %401 = load i32**, i32*** %400, align 8
  store i64 %396, i64* %174, align 8
  store i64 %397, i64* %167, align 8
  store i64 %398, i64* %164, align 8
  store i64 %399, i64* %172, align 8
  %402 = icmp eq i32** %401, null
  br i1 %402, label %549, label %403

403:                                              ; preds = %395
  %404 = bitcast i32** %401 to i8*
  tail call void @_ZdlPv(i8* %404) #17
  br label %549

405:                                              ; preds = %382, %537
  %406 = phi i32** [ %411, %537 ], [ %384, %382 ]
  %407 = phi i64 [ %540, %537 ], [ %388, %382 ]
  %408 = phi i64 [ %539, %537 ], [ %391, %382 ]
  %409 = phi i64 [ %546, %537 ], [ %386, %382 ]
  %410 = phi i64 [ %538, %537 ], [ %385, %382 ]
  %411 = getelementptr inbounds i32*, i32** %406, i64 -1
  %412 = inttoptr i64 %409 to i32**
  %413 = inttoptr i64 %410 to i32**
  %414 = icmp eq i32** %412, %413
  br i1 %414, label %415, label %537

415:                                              ; preds = %405
  %416 = inttoptr i64 %408 to i32**
  %417 = inttoptr i64 %407 to i32**
  %418 = icmp ult i32** %416, %417
  br i1 %418, label %419, label %436

419:                                              ; preds = %415
  %420 = sub i64 %407, %408
  %421 = ashr exact i64 %420, 3
  %422 = add nsw i64 %421, 1
  %423 = sdiv i64 %422, 2
  %424 = getelementptr inbounds i32*, i32** %416, i64 %423
  %425 = sub i64 %408, %409
  %426 = icmp eq i64 %425, 0
  br i1 %426, label %433, label %427

427:                                              ; preds = %419
  %428 = ashr exact i64 %425, 3
  %429 = sub nsw i64 0, %428
  %430 = getelementptr inbounds i32*, i32** %424, i64 %429
  %431 = bitcast i32** %430 to i8*
  %432 = inttoptr i64 %409 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %431, i8* align 8 %432, i64 %425, i1 false) #14
  br label %433

433:                                              ; preds = %427, %419
  %434 = phi i32** [ %430, %427 ], [ %424, %419 ]
  %435 = ptrtoint i32** %424 to i64
  br label %537

436:                                              ; preds = %415
  %437 = sub i64 %407, %410
  %438 = ashr exact i64 %437, 2
  %439 = icmp eq i64 %437, 0
  %440 = select i1 %439, i64 1, i64 %438
  %441 = icmp ugt i64 %440, 2305843009213693951
  br i1 %441, label %442, label %443

442:                                              ; preds = %436
  tail call void @abort() #15
  unreachable

443:                                              ; preds = %436
  %444 = add nuw nsw i64 %440, 3
  %445 = lshr i64 %444, 2
  %446 = shl i64 %440, 3
  %447 = tail call i8* @_Znwm(i64 %446) #17
  %448 = bitcast i8* %447 to i32**
  %449 = ptrtoint i8* %447 to i64
  %450 = getelementptr inbounds i32*, i32** %448, i64 %445
  %451 = ptrtoint i32** %450 to i64
  %452 = getelementptr inbounds i32*, i32** %448, i64 %440
  %453 = ptrtoint i32** %452 to i64
  %454 = sub i64 %408, %409
  %455 = ashr exact i64 %454, 3
  %456 = getelementptr inbounds i32*, i32** %450, i64 %455
  %457 = icmp eq i64 %454, 0
  br i1 %457, label %532, label %458

458:                                              ; preds = %443
  %459 = add i64 %454, -8
  %460 = lshr i64 %459, 3
  %461 = add nuw nsw i64 %460, 1
  %462 = and i64 %461, 7
  %463 = icmp eq i64 %462, 0
  br i1 %463, label %479, label %464

464:                                              ; preds = %458, %464
  %465 = phi i32** [ %472, %464 ], [ %450, %458 ]
  %466 = phi i64 [ %473, %464 ], [ %451, %458 ]
  %467 = phi i32** [ %474, %464 ], [ %412, %458 ]
  %468 = phi i64 [ %475, %464 ], [ %462, %458 ]
  %469 = bitcast i32** %467 to i64*
  %470 = load i64, i64* %469, align 8
  %471 = inttoptr i64 %466 to i64*
  store i64 %470, i64* %471, align 8
  %472 = getelementptr inbounds i32*, i32** %465, i64 1
  %473 = ptrtoint i32** %472 to i64
  %474 = getelementptr inbounds i32*, i32** %467, i64 1
  %475 = add i64 %468, -1
  %476 = icmp eq i64 %475, 0
  br i1 %476, label %477, label %464, !llvm.loop !76

477:                                              ; preds = %464
  %478 = ptrtoint i32** %472 to i64
  br label %479

479:                                              ; preds = %458, %477
  %480 = phi i32** [ %450, %458 ], [ %472, %477 ]
  %481 = phi i64 [ %451, %458 ], [ %478, %477 ]
  %482 = phi i32** [ %412, %458 ], [ %474, %477 ]
  %483 = icmp ult i64 %459, 56
  br i1 %483, label %530, label %484

484:                                              ; preds = %479, %484
  %485 = phi i32** [ %526, %484 ], [ %480, %479 ]
  %486 = phi i64 [ %527, %484 ], [ %481, %479 ]
  %487 = phi i32** [ %528, %484 ], [ %482, %479 ]
  %488 = bitcast i32** %487 to i64*
  %489 = load i64, i64* %488, align 8
  %490 = inttoptr i64 %486 to i64*
  store i64 %489, i64* %490, align 8
  %491 = getelementptr inbounds i32*, i32** %485, i64 1
  %492 = getelementptr inbounds i32*, i32** %487, i64 1
  %493 = bitcast i32** %492 to i64*
  %494 = load i64, i64* %493, align 8
  %495 = bitcast i32** %491 to i64*
  store i64 %494, i64* %495, align 8
  %496 = getelementptr inbounds i32*, i32** %485, i64 2
  %497 = getelementptr inbounds i32*, i32** %487, i64 2
  %498 = bitcast i32** %497 to i64*
  %499 = load i64, i64* %498, align 8
  %500 = bitcast i32** %496 to i64*
  store i64 %499, i64* %500, align 8
  %501 = getelementptr inbounds i32*, i32** %485, i64 3
  %502 = getelementptr inbounds i32*, i32** %487, i64 3
  %503 = bitcast i32** %502 to i64*
  %504 = load i64, i64* %503, align 8
  %505 = bitcast i32** %501 to i64*
  store i64 %504, i64* %505, align 8
  %506 = getelementptr inbounds i32*, i32** %485, i64 4
  %507 = getelementptr inbounds i32*, i32** %487, i64 4
  %508 = bitcast i32** %507 to i64*
  %509 = load i64, i64* %508, align 8
  %510 = bitcast i32** %506 to i64*
  store i64 %509, i64* %510, align 8
  %511 = getelementptr inbounds i32*, i32** %485, i64 5
  %512 = getelementptr inbounds i32*, i32** %487, i64 5
  %513 = bitcast i32** %512 to i64*
  %514 = load i64, i64* %513, align 8
  %515 = bitcast i32** %511 to i64*
  store i64 %514, i64* %515, align 8
  %516 = getelementptr inbounds i32*, i32** %485, i64 6
  %517 = getelementptr inbounds i32*, i32** %487, i64 6
  %518 = bitcast i32** %517 to i64*
  %519 = load i64, i64* %518, align 8
  %520 = bitcast i32** %516 to i64*
  store i64 %519, i64* %520, align 8
  %521 = getelementptr inbounds i32*, i32** %485, i64 7
  %522 = getelementptr inbounds i32*, i32** %487, i64 7
  %523 = bitcast i32** %522 to i64*
  %524 = load i64, i64* %523, align 8
  %525 = bitcast i32** %521 to i64*
  store i64 %524, i64* %525, align 8
  %526 = getelementptr inbounds i32*, i32** %485, i64 8
  %527 = ptrtoint i32** %526 to i64
  %528 = getelementptr inbounds i32*, i32** %487, i64 8
  %529 = icmp eq i32** %456, %526
  br i1 %529, label %530, label %484

530:                                              ; preds = %484, %479
  %531 = ptrtoint i32** %456 to i64
  br label %532

532:                                              ; preds = %530, %443
  %533 = phi i64 [ %531, %530 ], [ %451, %443 ]
  %534 = icmp eq i64 %409, 0
  br i1 %534, label %537, label %535

535:                                              ; preds = %532
  %536 = inttoptr i64 %409 to i8*
  tail call void @_ZdlPv(i8* %536) #17
  br label %537

537:                                              ; preds = %405, %433, %532, %535
  %538 = phi i64 [ %410, %433 ], [ %449, %532 ], [ %449, %535 ], [ %410, %405 ]
  %539 = phi i64 [ %435, %433 ], [ %533, %532 ], [ %533, %535 ], [ %408, %405 ]
  %540 = phi i64 [ %407, %433 ], [ %453, %532 ], [ %453, %535 ], [ %407, %405 ]
  %541 = phi i32** [ %434, %433 ], [ %450, %532 ], [ %450, %535 ], [ %412, %405 ]
  %542 = getelementptr inbounds i32*, i32** %541, i64 -1
  %543 = bitcast i32** %411 to i64*
  %544 = load i64, i64* %543, align 8
  %545 = bitcast i32** %542 to i64*
  store i64 %544, i64* %545, align 8
  %546 = ptrtoint i32** %542 to i64
  %547 = load i32**, i32*** %166, align 8
  %548 = icmp eq i32** %411, %547
  br i1 %548, label %393, label %405

549:                                              ; preds = %403, %395, %332, %183, %157
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPiNS_9allocatorIS1_EEE9push_backEOS1_(%"struct.std::__1::__split_buffer"*, i32** dereferenceable(8)) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %4 = load i32**, i32*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load i32**, i32*** %5, align 8
  %7 = icmp eq i32** %4, %6
  %8 = ptrtoint i32** %6 to i64
  %9 = bitcast i32** %4 to i64*
  br i1 %7, label %10, label %148

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %12 = load i32**, i32*** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %14 = load i32**, i32*** %13, align 8
  %15 = icmp ugt i32** %12, %14
  %16 = ptrtoint i32** %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint i32** %12 to i64
  %19 = sub i64 %18, %16
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds i32*, i32** %12, i64 %22
  %24 = ptrtoint i32** %4 to i64
  %25 = sub i64 %24, %18
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = bitcast i32** %23 to i8*
  %30 = bitcast i32** %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #14
  %31 = load i32**, i32*** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi i32** [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds i32*, i32** %23, i64 %26
  store i32** %34, i32*** %3, align 8
  %35 = getelementptr inbounds i32*, i32** %33, i64 %22
  store i32** %35, i32*** %11, align 8
  %36 = bitcast i32** %34 to i64*
  br label %148

37:                                               ; preds = %10
  %38 = bitcast i32*** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  tail call void @abort() #15
  unreachable

46:                                               ; preds = %37
  %47 = lshr i64 %43, 2
  %48 = shl i64 %43, 3
  %49 = tail call i8* @_Znwm(i64 %48) #17
  %50 = bitcast i8* %49 to i32**
  %51 = ptrtoint i8* %49 to i64
  %52 = getelementptr inbounds i32*, i32** %50, i64 %47
  %53 = ptrtoint i32** %52 to i64
  %54 = getelementptr inbounds i32*, i32** %50, i64 %43
  %55 = ptrtoint i32** %54 to i64
  %56 = ptrtoint i32** %12 to i64
  %57 = ptrtoint i32** %4 to i64
  %58 = sub i64 %57, %56
  %59 = ashr exact i64 %58, 3
  %60 = getelementptr inbounds i32*, i32** %52, i64 %59
  %61 = icmp eq i64 %58, 0
  br i1 %61, label %137, label %62

62:                                               ; preds = %46
  %63 = add i64 %58, -8
  %64 = lshr i64 %63, 3
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %83, label %68

68:                                               ; preds = %62, %68
  %69 = phi i32** [ %76, %68 ], [ %52, %62 ]
  %70 = phi i64 [ %77, %68 ], [ %53, %62 ]
  %71 = phi i32** [ %78, %68 ], [ %12, %62 ]
  %72 = phi i64 [ %79, %68 ], [ %66, %62 ]
  %73 = bitcast i32** %71 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = inttoptr i64 %70 to i64*
  store i64 %74, i64* %75, align 8
  %76 = getelementptr inbounds i32*, i32** %69, i64 1
  %77 = ptrtoint i32** %76 to i64
  %78 = getelementptr inbounds i32*, i32** %71, i64 1
  %79 = add i64 %72, -1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %68, !llvm.loop !77

81:                                               ; preds = %68
  %82 = ptrtoint i32** %76 to i64
  br label %83

83:                                               ; preds = %62, %81
  %84 = phi i32** [ %52, %62 ], [ %76, %81 ]
  %85 = phi i64 [ %53, %62 ], [ %82, %81 ]
  %86 = phi i32** [ %12, %62 ], [ %78, %81 ]
  %87 = icmp ult i64 %63, 56
  br i1 %87, label %134, label %88

88:                                               ; preds = %83, %88
  %89 = phi i32** [ %130, %88 ], [ %84, %83 ]
  %90 = phi i64 [ %131, %88 ], [ %85, %83 ]
  %91 = phi i32** [ %132, %88 ], [ %86, %83 ]
  %92 = bitcast i32** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = inttoptr i64 %90 to i64*
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds i32*, i32** %89, i64 1
  %96 = getelementptr inbounds i32*, i32** %91, i64 1
  %97 = bitcast i32** %96 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = bitcast i32** %95 to i64*
  store i64 %98, i64* %99, align 8
  %100 = getelementptr inbounds i32*, i32** %89, i64 2
  %101 = getelementptr inbounds i32*, i32** %91, i64 2
  %102 = bitcast i32** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast i32** %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds i32*, i32** %89, i64 3
  %106 = getelementptr inbounds i32*, i32** %91, i64 3
  %107 = bitcast i32** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast i32** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds i32*, i32** %89, i64 4
  %111 = getelementptr inbounds i32*, i32** %91, i64 4
  %112 = bitcast i32** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast i32** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds i32*, i32** %89, i64 5
  %116 = getelementptr inbounds i32*, i32** %91, i64 5
  %117 = bitcast i32** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast i32** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds i32*, i32** %89, i64 6
  %121 = getelementptr inbounds i32*, i32** %91, i64 6
  %122 = bitcast i32** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast i32** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds i32*, i32** %89, i64 7
  %126 = getelementptr inbounds i32*, i32** %91, i64 7
  %127 = bitcast i32** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast i32** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds i32*, i32** %89, i64 8
  %131 = ptrtoint i32** %130 to i64
  %132 = getelementptr inbounds i32*, i32** %91, i64 8
  %133 = icmp eq i32** %60, %130
  br i1 %133, label %134, label %88

134:                                              ; preds = %88, %83
  %135 = ptrtoint i32** %60 to i64
  %136 = load i32**, i32*** %13, align 8
  br label %137

137:                                              ; preds = %46, %134
  %138 = phi i32** [ %136, %134 ], [ %14, %46 ]
  %139 = phi i64 [ %135, %134 ], [ %53, %46 ]
  store i64 %51, i64* %39, align 8
  %140 = bitcast i32*** %11 to i64*
  store i64 %53, i64* %140, align 8
  %141 = bitcast i32*** %3 to i64*
  store i64 %139, i64* %141, align 8
  store i64 %55, i64* %38, align 8
  %142 = icmp eq i32** %138, null
  %143 = inttoptr i64 %139 to i64*
  br i1 %142, label %148, label %144

144:                                              ; preds = %137
  %145 = bitcast i32** %138 to i8*
  tail call void @_ZdlPv(i8* %145) #17
  %146 = bitcast i32*** %3 to i64**
  %147 = load i64*, i64** %146, align 8
  br label %148

148:                                              ; preds = %144, %137, %32, %2
  %149 = phi i64* [ %147, %144 ], [ %143, %137 ], [ %36, %32 ], [ %9, %2 ]
  %150 = bitcast i32** %1 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %149, align 8
  %152 = load i32**, i32*** %3, align 8
  %153 = getelementptr inbounds i32*, i32** %152, i64 1
  store i32** %153, i32*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPiNS_9allocatorIS1_EEE10push_frontEOS1_(%"struct.std::__1::__split_buffer"*, i32** dereferenceable(8)) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %4 = load i32**, i32*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %6 = load i32**, i32*** %5, align 8
  %7 = icmp eq i32** %4, %6
  %8 = ptrtoint i32** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %11 = load i32**, i32*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load i32**, i32*** %12, align 8
  %14 = icmp ult i32** %11, %13
  %15 = bitcast i32*** %12 to i64*
  %16 = ptrtoint i32** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint i32** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds i32*, i32** %11, i64 %22
  %24 = ptrtoint i32** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds i32*, i32** %23, i64 %29
  %31 = bitcast i32** %30 to i8*
  %32 = bitcast i32** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #14
  %33 = load i32**, i32*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi i32** [ %33, %27 ], [ %11, %17 ]
  %36 = phi i32** [ %30, %27 ], [ %23, %17 ]
  store i32** %36, i32*** %3, align 8
  %37 = getelementptr inbounds i32*, i32** %35, i64 %22
  store i32** %37, i32*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #15
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #17
  %51 = bitcast i8* %50 to i32**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds i32*, i32** %51, i64 %48
  %54 = ptrtoint i32** %53 to i64
  %55 = getelementptr inbounds i32*, i32** %51, i64 %43
  %56 = ptrtoint i32** %55 to i64
  %57 = ptrtoint i32** %4 to i64
  %58 = ptrtoint i32** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds i32*, i32** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi i32** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi i32** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast i32** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds i32*, i32** %70, i64 1
  %78 = ptrtoint i32** %77 to i64
  %79 = getelementptr inbounds i32*, i32** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !78

82:                                               ; preds = %69
  %83 = ptrtoint i32** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi i32** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi i32** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi i32** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi i32** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast i32** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds i32*, i32** %90, i64 1
  %97 = getelementptr inbounds i32*, i32** %92, i64 1
  %98 = bitcast i32** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast i32** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds i32*, i32** %90, i64 2
  %102 = getelementptr inbounds i32*, i32** %92, i64 2
  %103 = bitcast i32** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast i32** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds i32*, i32** %90, i64 3
  %107 = getelementptr inbounds i32*, i32** %92, i64 3
  %108 = bitcast i32** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast i32** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds i32*, i32** %90, i64 4
  %112 = getelementptr inbounds i32*, i32** %92, i64 4
  %113 = bitcast i32** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast i32** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds i32*, i32** %90, i64 5
  %117 = getelementptr inbounds i32*, i32** %92, i64 5
  %118 = bitcast i32** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast i32** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds i32*, i32** %90, i64 6
  %122 = getelementptr inbounds i32*, i32** %92, i64 6
  %123 = bitcast i32** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast i32** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds i32*, i32** %90, i64 7
  %127 = getelementptr inbounds i32*, i32** %92, i64 7
  %128 = bitcast i32** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast i32** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds i32*, i32** %90, i64 8
  %132 = ptrtoint i32** %131 to i64
  %133 = getelementptr inbounds i32*, i32** %92, i64 8
  %134 = icmp eq i32** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint i32** %61 to i64
  %137 = load i32**, i32*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi i32** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast i32*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast i32*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq i32** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast i32** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #17
  %146 = load i32**, i32*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi i32** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds i32*, i32** %148, i64 -1
  %150 = bitcast i32** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast i32** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load i32**, i32*** %3, align 8
  %154 = getelementptr inbounds i32*, i32** %153, i64 -1
  store i32** %154, i32*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"*) local_unnamed_addr #1 comdat {
  %3 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 0, i32 0
  %4 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %3, align 8
  %5 = icmp eq %"class.std::__1::__tree_node_base"* %4, null
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 1
  %8 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %7, align 8
  %9 = icmp eq %"class.std::__1::__tree_node_base"* %8, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %6, %10
  %11 = phi %"class.std::__1::__tree_node_base"* [ %13, %10 ], [ %8, %6 ]
  %12 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %11, i64 0, i32 0, i32 0
  %13 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %12, align 8
  %14 = icmp eq %"class.std::__1::__tree_node_base"* %13, null
  br i1 %14, label %17, label %10

15:                                               ; preds = %6
  %16 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 0, i32 0
  br label %23

17:                                               ; preds = %10, %2
  %18 = phi %"class.std::__1::__tree_node_base"* [ %1, %2 ], [ %11, %10 ]
  %19 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 1
  %21 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %20, align 8
  %22 = icmp eq %"class.std::__1::__tree_node_base"* %21, null
  br i1 %22, label %32, label %23

23:                                               ; preds = %15, %17
  %24 = phi %"class.std::__1::__tree_node_base"** [ %19, %17 ], [ %16, %15 ]
  %25 = phi %"class.std::__1::__tree_node_base"* [ %18, %17 ], [ %1, %15 ]
  %26 = phi %"class.std::__1::__tree_node_base"* [ %21, %17 ], [ %4, %15 ]
  %27 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %25, i64 0, i32 2
  %28 = bitcast %"class.std::__1::__tree_end_node"** %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %26, i64 0, i32 2
  %31 = bitcast %"class.std::__1::__tree_end_node"** %30 to i64*
  store i64 %29, i64* %31, align 8
  br label %32

32:                                               ; preds = %17, %23
  %33 = phi %"class.std::__1::__tree_node_base"** [ %24, %23 ], [ %19, %17 ]
  %34 = phi %"class.std::__1::__tree_node_base"* [ %25, %23 ], [ %18, %17 ]
  %35 = phi i1 [ true, %23 ], [ false, %17 ]
  %36 = phi %"class.std::__1::__tree_node_base"* [ %26, %23 ], [ null, %17 ]
  %37 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %34, i64 0, i32 2
  %38 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %37, align 8
  %39 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %38, i64 0, i32 0
  %40 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %39, align 8
  %41 = icmp eq %"class.std::__1::__tree_node_base"* %40, %34
  br i1 %41, label %42, label %48

42:                                               ; preds = %32
  store %"class.std::__1::__tree_node_base"* %36, %"class.std::__1::__tree_node_base"** %39, align 8
  %43 = icmp eq %"class.std::__1::__tree_node_base"* %34, %0
  br i1 %43, label %55, label %44

44:                                               ; preds = %42
  %45 = bitcast %"class.std::__1::__tree_end_node"** %37 to %"class.std::__1::__tree_node_base"**
  %46 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %45, align 8
  %47 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %46, i64 0, i32 1
  br label %52

48:                                               ; preds = %32
  %49 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %38, i64 1, i32 0
  store %"class.std::__1::__tree_node_base"* %36, %"class.std::__1::__tree_node_base"** %49, align 8
  %50 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %37, align 8
  %51 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %50, i64 0, i32 0
  br label %52

52:                                               ; preds = %48, %44
  %53 = phi %"class.std::__1::__tree_node_base"** [ %47, %44 ], [ %51, %48 ]
  %54 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %53, align 8
  br label %55

55:                                               ; preds = %52, %42
  %56 = phi %"class.std::__1::__tree_node_base"* [ null, %42 ], [ %54, %52 ]
  %57 = phi %"class.std::__1::__tree_node_base"* [ %36, %42 ], [ %0, %52 ]
  %58 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %34, i64 0, i32 3
  %59 = load i8, i8* %58, align 8, !range !2
  %60 = icmp ne i8 %59, 0
  %61 = icmp eq %"class.std::__1::__tree_node_base"* %34, %1
  br i1 %61, label %90, label %62

62:                                               ; preds = %55
  %63 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 2
  %64 = bitcast %"class.std::__1::__tree_end_node"** %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = bitcast %"class.std::__1::__tree_end_node"** %37 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %63, align 8
  %68 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %67, i64 0, i32 0
  %69 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %68, align 8
  %70 = icmp eq %"class.std::__1::__tree_node_base"* %69, %1
  %71 = inttoptr i64 %65 to %"class.std::__1::__tree_node_base"*
  %72 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %71, i64 0, i32 1
  %73 = inttoptr i64 %65 to %"class.std::__1::__tree_end_node"*
  %74 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %73, i64 0, i32 0
  %75 = select i1 %70, %"class.std::__1::__tree_node_base"** %74, %"class.std::__1::__tree_node_base"** %72
  store %"class.std::__1::__tree_node_base"* %34, %"class.std::__1::__tree_node_base"** %75, align 8
  %76 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %3, align 8
  store %"class.std::__1::__tree_node_base"* %76, %"class.std::__1::__tree_node_base"** %33, align 8
  %77 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %34, i64 0, i32 0
  %78 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %76, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %77, %"class.std::__1::__tree_end_node"** %78, align 8
  %79 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 1
  %80 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %79, align 8
  %81 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %34, i64 0, i32 1
  store %"class.std::__1::__tree_node_base"* %80, %"class.std::__1::__tree_node_base"** %81, align 8
  %82 = icmp eq %"class.std::__1::__tree_node_base"* %80, null
  br i1 %82, label %85, label %83

83:                                               ; preds = %62
  %84 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %80, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %77, %"class.std::__1::__tree_end_node"** %84, align 8
  br label %85

85:                                               ; preds = %62, %83
  %86 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 3
  %87 = load i8, i8* %86, align 8, !range !2
  store i8 %87, i8* %58, align 8
  %88 = icmp eq %"class.std::__1::__tree_node_base"* %57, %1
  %89 = select i1 %88, %"class.std::__1::__tree_node_base"* %34, %"class.std::__1::__tree_node_base"* %57
  br label %90

90:                                               ; preds = %85, %55
  %91 = phi %"class.std::__1::__tree_node_base"* [ %57, %55 ], [ %89, %85 ]
  %92 = icmp ne %"class.std::__1::__tree_node_base"* %91, null
  %93 = and i1 %60, %92
  br i1 %93, label %94, label %382

94:                                               ; preds = %90
  br i1 %35, label %95, label %97

95:                                               ; preds = %94
  %96 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %36, i64 0, i32 3
  store i8 1, i8* %96, align 8
  br label %382

97:                                               ; preds = %94, %371
  %98 = phi %"class.std::__1::__tree_node_base"* [ %381, %371 ], [ %56, %94 ]
  %99 = phi %"class.std::__1::__tree_node_base"* [ %373, %371 ], [ %91, %94 ]
  %100 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %98, i64 0, i32 2
  %101 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %100, align 8
  %102 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %101, i64 0, i32 0
  %103 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %102, align 8
  %104 = icmp eq %"class.std::__1::__tree_node_base"* %103, %98
  %105 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %98, i64 0, i32 3
  %106 = load i8, i8* %105, align 8, !range !2
  %107 = icmp ne i8 %106, 0
  br i1 %104, label %242, label %108

108:                                              ; preds = %97
  br i1 %107, label %141, label %109

109:                                              ; preds = %108
  store i8 1, i8* %105, align 8
  %110 = bitcast %"class.std::__1::__tree_end_node"** %100 to %"class.std::__1::__tree_node_base"**
  %111 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %101, i64 3
  %112 = bitcast %"class.std::__1::__tree_end_node"* %111 to i8*
  store i8 0, i8* %112, align 8
  %113 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %110, align 8
  %114 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %113, i64 0, i32 1
  %115 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %114, align 8
  %116 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %115, i64 0, i32 0, i32 0
  %117 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %116, align 8
  store %"class.std::__1::__tree_node_base"* %117, %"class.std::__1::__tree_node_base"** %114, align 8
  %118 = icmp eq %"class.std::__1::__tree_node_base"* %117, null
  br i1 %118, label %122, label %119

119:                                              ; preds = %109
  %120 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %113, i64 0, i32 0
  %121 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %117, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %120, %"class.std::__1::__tree_end_node"** %121, align 8
  br label %122

122:                                              ; preds = %119, %109
  %123 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %113, i64 0, i32 2
  %124 = bitcast %"class.std::__1::__tree_end_node"** %123 to i64*
  %125 = load i64, i64* %124, align 8
  %126 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %115, i64 0, i32 2
  %127 = bitcast %"class.std::__1::__tree_end_node"** %126 to i64*
  store i64 %125, i64* %127, align 8
  %128 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %123, align 8
  %129 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %128, i64 0, i32 0
  %130 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %129, align 8
  %131 = icmp eq %"class.std::__1::__tree_node_base"* %130, %113
  %132 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %128, i64 1, i32 0
  %133 = select i1 %131, %"class.std::__1::__tree_node_base"** %129, %"class.std::__1::__tree_node_base"** %132
  store %"class.std::__1::__tree_node_base"* %115, %"class.std::__1::__tree_node_base"** %133, align 8
  store %"class.std::__1::__tree_node_base"* %113, %"class.std::__1::__tree_node_base"** %116, align 8
  %134 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %115, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %134, %"class.std::__1::__tree_end_node"** %123, align 8
  %135 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %98, i64 0, i32 0, i32 0
  %136 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %135, align 8
  %137 = icmp eq %"class.std::__1::__tree_node_base"* %99, %136
  %138 = select i1 %137, %"class.std::__1::__tree_node_base"* %98, %"class.std::__1::__tree_node_base"* %99
  %139 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %136, i64 0, i32 1
  %140 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %139, align 8
  br label %141

141:                                              ; preds = %122, %108
  %142 = phi %"class.std::__1::__tree_node_base"* [ %98, %108 ], [ %140, %122 ]
  %143 = phi %"class.std::__1::__tree_node_base"* [ %99, %108 ], [ %138, %122 ]
  %144 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %142, i64 0, i32 0, i32 0
  %145 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %144, align 8
  %146 = icmp eq %"class.std::__1::__tree_node_base"* %145, null
  br i1 %146, label %151, label %147

147:                                              ; preds = %141
  %148 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %145, i64 0, i32 3
  %149 = load i8, i8* %148, align 8, !range !2
  %150 = icmp eq i8 %149, 0
  br i1 %150, label %172, label %151

151:                                              ; preds = %147, %141
  %152 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %142, i64 0, i32 1
  %153 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %152, align 8
  %154 = icmp eq %"class.std::__1::__tree_node_base"* %153, null
  br i1 %154, label %159, label %155

155:                                              ; preds = %151
  %156 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %153, i64 0, i32 3
  %157 = load i8, i8* %156, align 8, !range !2
  %158 = icmp eq i8 %157, 0
  br i1 %158, label %177, label %159

159:                                              ; preds = %155, %151
  %160 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %142, i64 0, i32 3
  store i8 0, i8* %160, align 8
  %161 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %142, i64 0, i32 2
  %162 = bitcast %"class.std::__1::__tree_end_node"** %161 to %"class.std::__1::__tree_node_base"**
  %163 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %162, align 8
  %164 = icmp eq %"class.std::__1::__tree_node_base"* %163, %143
  br i1 %164, label %169, label %165

165:                                              ; preds = %159
  %166 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %163, i64 0, i32 3
  %167 = load i8, i8* %166, align 8, !range !2
  %168 = icmp eq i8 %167, 0
  br i1 %168, label %169, label %371

169:                                              ; preds = %165, %159
  %170 = phi %"class.std::__1::__tree_node_base"* [ %163, %165 ], [ %143, %159 ]
  %171 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %170, i64 0, i32 3
  store i8 1, i8* %171, align 8
  br label %382

172:                                              ; preds = %147
  %173 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %142, i64 0, i32 0, i32 0
  %174 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %142, i64 0, i32 1
  %175 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %174, align 8
  %176 = icmp eq %"class.std::__1::__tree_node_base"* %175, null
  br i1 %176, label %185, label %179

177:                                              ; preds = %155
  %178 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %142, i64 0, i32 0, i32 0
  br label %179

179:                                              ; preds = %177, %172
  %180 = phi %"class.std::__1::__tree_node_base"** [ %173, %172 ], [ %178, %177 ]
  %181 = phi %"class.std::__1::__tree_node_base"* [ %175, %172 ], [ %153, %177 ]
  %182 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %181, i64 0, i32 3
  %183 = load i8, i8* %182, align 8, !range !2
  %184 = icmp eq i8 %183, 0
  br i1 %184, label %209, label %185

185:                                              ; preds = %179, %172
  %186 = phi %"class.std::__1::__tree_node_base"** [ %180, %179 ], [ %173, %172 ]
  %187 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %145, i64 0, i32 3
  store i8 1, i8* %187, align 8
  %188 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %142, i64 0, i32 3
  store i8 0, i8* %188, align 8
  %189 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %186, align 8
  %190 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %189, i64 0, i32 1
  %191 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %190, align 8
  store %"class.std::__1::__tree_node_base"* %191, %"class.std::__1::__tree_node_base"** %186, align 8
  %192 = icmp eq %"class.std::__1::__tree_node_base"* %191, null
  br i1 %192, label %196, label %193

193:                                              ; preds = %185
  %194 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %142, i64 0, i32 0
  %195 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %191, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %194, %"class.std::__1::__tree_end_node"** %195, align 8
  br label %196

196:                                              ; preds = %193, %185
  %197 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %142, i64 0, i32 2
  %198 = bitcast %"class.std::__1::__tree_end_node"** %197 to i64*
  %199 = load i64, i64* %198, align 8
  %200 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %189, i64 0, i32 2
  %201 = bitcast %"class.std::__1::__tree_end_node"** %200 to i64*
  store i64 %199, i64* %201, align 8
  %202 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %197, align 8
  %203 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %202, i64 0, i32 0
  %204 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %203, align 8
  %205 = icmp eq %"class.std::__1::__tree_node_base"* %204, %142
  %206 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %202, i64 1, i32 0
  %207 = select i1 %205, %"class.std::__1::__tree_node_base"** %203, %"class.std::__1::__tree_node_base"** %206
  store %"class.std::__1::__tree_node_base"* %189, %"class.std::__1::__tree_node_base"** %207, align 8
  store %"class.std::__1::__tree_node_base"* %142, %"class.std::__1::__tree_node_base"** %190, align 8
  %208 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %189, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %208, %"class.std::__1::__tree_end_node"** %197, align 8
  br label %209

209:                                              ; preds = %179, %196
  %210 = phi %"class.std::__1::__tree_node_base"* [ %189, %196 ], [ %142, %179 ]
  %211 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %210, i64 0, i32 2
  %212 = bitcast %"class.std::__1::__tree_end_node"** %211 to %"class.std::__1::__tree_node_base"**
  %213 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %212, align 8
  %214 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %213, i64 0, i32 3
  %215 = load i8, i8* %214, align 8, !range !2
  %216 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %210, i64 0, i32 3
  store i8 %215, i8* %216, align 8
  store i8 1, i8* %214, align 8
  %217 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %210, i64 0, i32 1
  %218 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %217, align 8
  %219 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %218, i64 0, i32 3
  store i8 1, i8* %219, align 8
  %220 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %212, align 8
  %221 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %220, i64 0, i32 1
  %222 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %221, align 8
  %223 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %222, i64 0, i32 0, i32 0
  %224 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %223, align 8
  store %"class.std::__1::__tree_node_base"* %224, %"class.std::__1::__tree_node_base"** %221, align 8
  %225 = icmp eq %"class.std::__1::__tree_node_base"* %224, null
  br i1 %225, label %229, label %226

226:                                              ; preds = %209
  %227 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %220, i64 0, i32 0
  %228 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %224, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %227, %"class.std::__1::__tree_end_node"** %228, align 8
  br label %229

229:                                              ; preds = %226, %209
  %230 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %220, i64 0, i32 2
  %231 = bitcast %"class.std::__1::__tree_end_node"** %230 to i64*
  %232 = load i64, i64* %231, align 8
  %233 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %222, i64 0, i32 2
  %234 = bitcast %"class.std::__1::__tree_end_node"** %233 to i64*
  store i64 %232, i64* %234, align 8
  %235 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %230, align 8
  %236 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %235, i64 0, i32 0
  %237 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %236, align 8
  %238 = icmp eq %"class.std::__1::__tree_node_base"* %237, %220
  %239 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %235, i64 1, i32 0
  %240 = select i1 %238, %"class.std::__1::__tree_node_base"** %236, %"class.std::__1::__tree_node_base"** %239
  store %"class.std::__1::__tree_node_base"* %222, %"class.std::__1::__tree_node_base"** %240, align 8
  store %"class.std::__1::__tree_node_base"* %220, %"class.std::__1::__tree_node_base"** %223, align 8
  %241 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %222, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %241, %"class.std::__1::__tree_end_node"** %230, align 8
  br label %382

242:                                              ; preds = %97
  br i1 %107, label %275, label %243

243:                                              ; preds = %242
  store i8 1, i8* %105, align 8
  %244 = bitcast %"class.std::__1::__tree_end_node"** %100 to %"class.std::__1::__tree_node_base"**
  %245 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %101, i64 3
  %246 = bitcast %"class.std::__1::__tree_end_node"* %245 to i8*
  store i8 0, i8* %246, align 8
  %247 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %244, align 8
  %248 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %247, i64 0, i32 0, i32 0
  %249 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %248, align 8
  %250 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %249, i64 0, i32 1
  %251 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %250, align 8
  store %"class.std::__1::__tree_node_base"* %251, %"class.std::__1::__tree_node_base"** %248, align 8
  %252 = icmp eq %"class.std::__1::__tree_node_base"* %251, null
  br i1 %252, label %256, label %253

253:                                              ; preds = %243
  %254 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %247, i64 0, i32 0
  %255 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %251, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %254, %"class.std::__1::__tree_end_node"** %255, align 8
  br label %256

256:                                              ; preds = %253, %243
  %257 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %247, i64 0, i32 2
  %258 = bitcast %"class.std::__1::__tree_end_node"** %257 to i64*
  %259 = load i64, i64* %258, align 8
  %260 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %249, i64 0, i32 2
  %261 = bitcast %"class.std::__1::__tree_end_node"** %260 to i64*
  store i64 %259, i64* %261, align 8
  %262 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %257, align 8
  %263 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %262, i64 0, i32 0
  %264 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %263, align 8
  %265 = icmp eq %"class.std::__1::__tree_node_base"* %264, %247
  %266 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %262, i64 1, i32 0
  %267 = select i1 %265, %"class.std::__1::__tree_node_base"** %263, %"class.std::__1::__tree_node_base"** %266
  store %"class.std::__1::__tree_node_base"* %249, %"class.std::__1::__tree_node_base"** %267, align 8
  store %"class.std::__1::__tree_node_base"* %247, %"class.std::__1::__tree_node_base"** %250, align 8
  %268 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %249, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %268, %"class.std::__1::__tree_end_node"** %257, align 8
  %269 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %98, i64 0, i32 1
  %270 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %269, align 8
  %271 = icmp eq %"class.std::__1::__tree_node_base"* %99, %270
  %272 = select i1 %271, %"class.std::__1::__tree_node_base"* %98, %"class.std::__1::__tree_node_base"* %99
  %273 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %270, i64 0, i32 0, i32 0
  %274 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %273, align 8
  br label %275

275:                                              ; preds = %256, %242
  %276 = phi %"class.std::__1::__tree_node_base"* [ %98, %242 ], [ %274, %256 ]
  %277 = phi %"class.std::__1::__tree_node_base"* [ %99, %242 ], [ %272, %256 ]
  %278 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %276, i64 0, i32 0, i32 0
  %279 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %278, align 8
  %280 = icmp eq %"class.std::__1::__tree_node_base"* %279, null
  br i1 %280, label %285, label %281

281:                                              ; preds = %275
  %282 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %279, i64 0, i32 3
  %283 = load i8, i8* %282, align 8, !range !2
  %284 = icmp eq i8 %283, 0
  br i1 %284, label %338, label %285

285:                                              ; preds = %281, %275
  %286 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %276, i64 0, i32 1
  %287 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %286, align 8
  %288 = icmp eq %"class.std::__1::__tree_node_base"* %287, null
  br i1 %288, label %293, label %289

289:                                              ; preds = %285
  %290 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %287, i64 0, i32 3
  %291 = load i8, i8* %290, align 8, !range !2
  %292 = icmp eq i8 %291, 0
  br i1 %292, label %305, label %293

293:                                              ; preds = %289, %285
  %294 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %276, i64 0, i32 3
  store i8 0, i8* %294, align 8
  %295 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %276, i64 0, i32 2
  %296 = bitcast %"class.std::__1::__tree_end_node"** %295 to %"class.std::__1::__tree_node_base"**
  %297 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %296, align 8
  %298 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %297, i64 0, i32 3
  %299 = load i8, i8* %298, align 8, !range !2
  %300 = icmp eq i8 %299, 0
  %301 = icmp eq %"class.std::__1::__tree_node_base"* %297, %277
  %302 = or i1 %301, %300
  br i1 %302, label %303, label %371

303:                                              ; preds = %293
  %304 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %297, i64 0, i32 3
  store i8 1, i8* %304, align 8
  br label %382

305:                                              ; preds = %289
  br i1 %280, label %313, label %306

306:                                              ; preds = %305
  %307 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %279, i64 0, i32 3
  %308 = load i8, i8* %307, align 8, !range !2
  %309 = icmp eq i8 %308, 0
  br i1 %309, label %338, label %310

310:                                              ; preds = %306
  %311 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %276, i64 0, i32 1
  %312 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %311, align 8
  br label %313

313:                                              ; preds = %310, %305
  %314 = phi %"class.std::__1::__tree_node_base"* [ %312, %310 ], [ %287, %305 ]
  %315 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %276, i64 0, i32 1
  %316 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %314, i64 0, i32 3
  store i8 1, i8* %316, align 8
  %317 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %276, i64 0, i32 3
  store i8 0, i8* %317, align 8
  %318 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %315, align 8
  %319 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %318, i64 0, i32 0, i32 0
  %320 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %319, align 8
  store %"class.std::__1::__tree_node_base"* %320, %"class.std::__1::__tree_node_base"** %315, align 8
  %321 = icmp eq %"class.std::__1::__tree_node_base"* %320, null
  br i1 %321, label %325, label %322

322:                                              ; preds = %313
  %323 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %276, i64 0, i32 0
  %324 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %320, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %323, %"class.std::__1::__tree_end_node"** %324, align 8
  br label %325

325:                                              ; preds = %322, %313
  %326 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %276, i64 0, i32 2
  %327 = bitcast %"class.std::__1::__tree_end_node"** %326 to i64*
  %328 = load i64, i64* %327, align 8
  %329 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %318, i64 0, i32 2
  %330 = bitcast %"class.std::__1::__tree_end_node"** %329 to i64*
  store i64 %328, i64* %330, align 8
  %331 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %326, align 8
  %332 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %331, i64 0, i32 0
  %333 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %332, align 8
  %334 = icmp eq %"class.std::__1::__tree_node_base"* %333, %276
  %335 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %331, i64 1, i32 0
  %336 = select i1 %334, %"class.std::__1::__tree_node_base"** %332, %"class.std::__1::__tree_node_base"** %335
  store %"class.std::__1::__tree_node_base"* %318, %"class.std::__1::__tree_node_base"** %336, align 8
  store %"class.std::__1::__tree_node_base"* %276, %"class.std::__1::__tree_node_base"** %319, align 8
  %337 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %318, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %337, %"class.std::__1::__tree_end_node"** %326, align 8
  br label %338

338:                                              ; preds = %281, %306, %325
  %339 = phi %"class.std::__1::__tree_node_base"* [ %318, %325 ], [ %276, %306 ], [ %276, %281 ]
  %340 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %339, i64 0, i32 2
  %341 = bitcast %"class.std::__1::__tree_end_node"** %340 to %"class.std::__1::__tree_node_base"**
  %342 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %341, align 8
  %343 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %342, i64 0, i32 3
  %344 = load i8, i8* %343, align 8, !range !2
  %345 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %339, i64 0, i32 3
  store i8 %344, i8* %345, align 8
  store i8 1, i8* %343, align 8
  %346 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %339, i64 0, i32 0, i32 0
  %347 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %346, align 8
  %348 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %347, i64 0, i32 3
  store i8 1, i8* %348, align 8
  %349 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %341, align 8
  %350 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %349, i64 0, i32 0, i32 0
  %351 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %350, align 8
  %352 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %351, i64 0, i32 1
  %353 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %352, align 8
  store %"class.std::__1::__tree_node_base"* %353, %"class.std::__1::__tree_node_base"** %350, align 8
  %354 = icmp eq %"class.std::__1::__tree_node_base"* %353, null
  br i1 %354, label %358, label %355

355:                                              ; preds = %338
  %356 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %349, i64 0, i32 0
  %357 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %353, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %356, %"class.std::__1::__tree_end_node"** %357, align 8
  br label %358

358:                                              ; preds = %355, %338
  %359 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %349, i64 0, i32 2
  %360 = bitcast %"class.std::__1::__tree_end_node"** %359 to i64*
  %361 = load i64, i64* %360, align 8
  %362 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %351, i64 0, i32 2
  %363 = bitcast %"class.std::__1::__tree_end_node"** %362 to i64*
  store i64 %361, i64* %363, align 8
  %364 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %359, align 8
  %365 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %364, i64 0, i32 0
  %366 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %365, align 8
  %367 = icmp eq %"class.std::__1::__tree_node_base"* %366, %349
  %368 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %364, i64 1, i32 0
  %369 = select i1 %367, %"class.std::__1::__tree_node_base"** %365, %"class.std::__1::__tree_node_base"** %368
  store %"class.std::__1::__tree_node_base"* %351, %"class.std::__1::__tree_node_base"** %369, align 8
  store %"class.std::__1::__tree_node_base"* %349, %"class.std::__1::__tree_node_base"** %352, align 8
  %370 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %351, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %370, %"class.std::__1::__tree_end_node"** %359, align 8
  br label %382

371:                                              ; preds = %293, %165
  %372 = phi %"class.std::__1::__tree_node_base"* [ %163, %165 ], [ %297, %293 ]
  %373 = phi %"class.std::__1::__tree_node_base"* [ %143, %165 ], [ %277, %293 ]
  %374 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %372, i64 0, i32 2
  %375 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %374, align 8
  %376 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %375, i64 0, i32 0
  %377 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %376, align 8
  %378 = icmp eq %"class.std::__1::__tree_node_base"* %377, %372
  %379 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %375, i64 1, i32 0
  %380 = select i1 %378, %"class.std::__1::__tree_node_base"** %379, %"class.std::__1::__tree_node_base"** %376
  %381 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %380, align 8
  br label %97

382:                                              ; preds = %95, %358, %303, %229, %169, %90
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112__deque_baseIiNS_9allocatorIiEEED2Ev(%"class.std::__1::__deque_base"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 1
  %3 = load i32**, i32*** %2, align 8
  %4 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 10
  %7 = getelementptr inbounds i32*, i32** %3, i64 %6
  %8 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 2
  %9 = load i32**, i32*** %8, align 8
  %10 = icmp eq i32** %9, %3
  %11 = ptrtoint i32** %9 to i64
  %12 = ptrtoint i32** %3 to i64
  br i1 %10, label %13, label %15

13:                                               ; preds = %1
  %14 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 2, i32 0, i32 0
  br label %28

15:                                               ; preds = %1
  %16 = load i32*, i32** %7, align 8
  %17 = and i64 %5, 1023
  %18 = getelementptr inbounds i32, i32* %16, i64 %17
  %19 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 2, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %20, %5
  %22 = lshr i64 %21, 10
  %23 = getelementptr inbounds i32*, i32** %3, i64 %22
  %24 = load i32*, i32** %23, align 8
  %25 = and i64 %21, 1023
  %26 = getelementptr inbounds i32, i32* %24, i64 %25
  %27 = icmp eq i32* %26, %18
  br i1 %27, label %28, label %34

28:                                               ; preds = %47, %15, %13
  %29 = phi i64* [ %14, %13 ], [ %19, %15 ], [ %19, %47 ]
  store i64 0, i64* %29, align 8
  %30 = bitcast i32*** %8 to i64*
  %31 = sub i64 %11, %12
  %32 = ashr exact i64 %31, 3
  %33 = icmp ugt i64 %32, 2
  br i1 %33, label %52, label %65

34:                                               ; preds = %15, %47
  %35 = phi i32* [ %50, %47 ], [ %18, %15 ]
  %36 = phi i32** [ %48, %47 ], [ %7, %15 ]
  %37 = getelementptr inbounds i32, i32* %35, i64 1
  %38 = ptrtoint i32* %37 to i64
  %39 = bitcast i32** %36 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %38, %40
  %42 = icmp eq i64 %41, 4096
  br i1 %42, label %43, label %47

43:                                               ; preds = %34
  %44 = getelementptr inbounds i32*, i32** %36, i64 1
  %45 = bitcast i32** %44 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %43, %34
  %48 = phi i32** [ %44, %43 ], [ %36, %34 ]
  %49 = phi i64 [ %46, %43 ], [ %38, %34 ]
  %50 = inttoptr i64 %49 to i32*
  %51 = icmp eq i32* %26, %50
  br i1 %51, label %28, label %34

52:                                               ; preds = %28, %52
  %53 = phi i32** [ %57, %52 ], [ %3, %28 ]
  %54 = bitcast i32** %53 to i8**
  %55 = load i8*, i8** %54, align 8
  tail call void @_ZdlPv(i8* %55) #17
  %56 = load i32**, i32*** %2, align 8
  %57 = getelementptr inbounds i32*, i32** %56, i64 1
  store i32** %57, i32*** %2, align 8
  %58 = load i64, i64* %30, align 8
  %59 = ptrtoint i32** %57 to i64
  %60 = sub i64 %58, %59
  %61 = ashr exact i64 %60, 3
  %62 = icmp ugt i64 %61, 2
  br i1 %62, label %52, label %63

63:                                               ; preds = %52
  %64 = inttoptr i64 %58 to i32**
  br label %65

65:                                               ; preds = %63, %28
  %66 = phi i32** [ %9, %28 ], [ %64, %63 ]
  %67 = phi i32** [ %3, %28 ], [ %57, %63 ]
  %68 = phi i64 [ %32, %28 ], [ %61, %63 ]
  switch i64 %68, label %72 [
    i64 1, label %70
    i64 2, label %69
  ]

69:                                               ; preds = %65
  br label %70

70:                                               ; preds = %65, %69
  %71 = phi i64 [ 1024, %69 ], [ 512, %65 ]
  store i64 %71, i64* %4, align 8
  br label %72

72:                                               ; preds = %70, %65
  %73 = icmp eq i32** %67, %66
  br i1 %73, label %83, label %74

74:                                               ; preds = %72, %74
  %75 = phi i32** [ %78, %74 ], [ %67, %72 ]
  %76 = bitcast i32** %75 to i8**
  %77 = load i8*, i8** %76, align 8
  tail call void @_ZdlPv(i8* %77) #17
  %78 = getelementptr inbounds i32*, i32** %75, i64 1
  %79 = icmp eq i32** %78, %66
  br i1 %79, label %80, label %74

80:                                               ; preds = %74
  %81 = load i32**, i32*** %2, align 8
  %82 = load i32**, i32*** %8, align 8
  br label %83

83:                                               ; preds = %80, %72
  %84 = phi i32** [ %82, %80 ], [ %66, %72 ]
  %85 = phi i32** [ %81, %80 ], [ %66, %72 ]
  %86 = icmp eq i32** %84, %85
  br i1 %86, label %95, label %87

87:                                               ; preds = %83
  %88 = ptrtoint i32** %85 to i64
  %89 = getelementptr i32*, i32** %84, i64 -1
  %90 = ptrtoint i32** %89 to i64
  %91 = sub i64 %90, %88
  %92 = lshr i64 %91, 3
  %93 = xor i64 %92, -1
  %94 = getelementptr i32*, i32** %84, i64 %93
  store i32** %94, i32*** %8, align 8
  br label %95

95:                                               ; preds = %87, %83
  %96 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 0
  %97 = load i32**, i32*** %96, align 8
  %98 = icmp eq i32** %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %95
  %100 = bitcast i32** %97 to i8*
  tail call void @_ZdlPv(i8* %100) #17
  br label %101

101:                                              ; preds = %95, %99
  ret void
}

; Function Attrs: nounwind
declare void @_ZN2v88internal13AssemblerBaseD2Ev(%"class.v8::internal::AssemblerBase"*) unnamed_addr #13

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__treeINS_12__value_typeIPN2v88internal5LabelENS_6vectorIiNS_9allocatorIiEEEEEENS_19__map_value_compareIS5_SA_NS_4lessIS5_EELb1EEENS7_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE(%"class.std::__1::__tree"*, %"class.std::__1::__tree_node.1297"*) local_unnamed_addr #1 comdat align 2 {
  %3 = icmp eq %"class.std::__1::__tree_node.1297"* %1, null
  br i1 %3, label %20, label %4

4:                                                ; preds = %2
  %5 = bitcast %"class.std::__1::__tree_node.1297"* %1 to %"class.std::__1::__tree_node.1297"**
  %6 = load %"class.std::__1::__tree_node.1297"*, %"class.std::__1::__tree_node.1297"** %5, align 8
  tail call void @_ZNSt3__16__treeINS_12__value_typeIPN2v88internal5LabelENS_6vectorIiNS_9allocatorIiEEEEEENS_19__map_value_compareIS5_SA_NS_4lessIS5_EELb1EEENS7_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node.1297"* %6) #14
  %7 = getelementptr inbounds %"class.std::__1::__tree_node.1297", %"class.std::__1::__tree_node.1297"* %1, i64 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::__tree_node_base"** %7 to %"class.std::__1::__tree_node.1297"**
  %9 = load %"class.std::__1::__tree_node.1297"*, %"class.std::__1::__tree_node.1297"** %8, align 8
  tail call void @_ZNSt3__16__treeINS_12__value_typeIPN2v88internal5LabelENS_6vectorIiNS_9allocatorIiEEEEEENS_19__map_value_compareIS5_SA_NS_4lessIS5_EELb1EEENS7_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node.1297"* %9) #14
  %10 = getelementptr inbounds %"class.std::__1::__tree_node.1297", %"class.std::__1::__tree_node.1297"* %1, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0
  %11 = load i32*, i32** %10, align 8
  %12 = icmp eq i32* %11, null
  br i1 %12, label %18, label %13

13:                                               ; preds = %4
  %14 = ptrtoint i32* %11 to i64
  %15 = getelementptr inbounds %"class.std::__1::__tree_node.1297", %"class.std::__1::__tree_node.1297"* %1, i64 0, i32 1, i32 0, i32 1, i32 0, i32 1
  %16 = bitcast i32** %15 to i64*
  store i64 %14, i64* %16, align 8
  %17 = bitcast i32* %11 to i8*
  tail call void @_ZdlPv(i8* %17) #17
  br label %18

18:                                               ; preds = %4, %13
  %19 = bitcast %"class.std::__1::__tree_node.1297"* %1 to i8*
  tail call void @_ZdlPv(i8* %19) #17
  br label %20

20:                                               ; preds = %2, %18
  ret void
}

; Function Attrs: nounwind
declare void @_ZN2v88internal8MalloceddlEPv(i8*) local_unnamed_addr #13

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nounwind }
attributes #15 = { noreturn nounwind }
attributes #16 = { nounwind readonly }
attributes #17 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{i32 1183}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZNSt3__16__treeINS_12__value_typeImiEENS_19__map_value_compareImS2_NS_4lessImEELb1EEENS_9allocatorIS2_EEE16__construct_nodeIJNS_4pairImiEEEEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS7_ISG_EEEEEEDpOT_: argument 0"}
!7 = distinct !{!7, !"_ZNSt3__16__treeINS_12__value_typeImiEENS_19__map_value_compareImS2_NS_4lessImEELb1EEENS_9allocatorIS2_EEE16__construct_nodeIJNS_4pairImiEEEEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS7_ISG_EEEEEEDpOT_"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZNSt3__16__treeINS_12__value_typeImiEENS_19__map_value_compareImS2_NS_4lessImEELb1EEENS_9allocatorIS2_EEE16__construct_nodeIJNS_4pairImiEEEEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS7_ISG_EEEEEEDpOT_: argument 0"}
!10 = distinct !{!10, !"_ZNSt3__16__treeINS_12__value_typeImiEENS_19__map_value_compareImS2_NS_4lessImEELb1EEENS_9allocatorIS2_EEE16__construct_nodeIJNS_4pairImiEEEEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS7_ISG_EEEEEEDpOT_"}
!11 = !{!"branch_weights", i32 2000, i32 1}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZNSt3__16__treeINS_12__value_typeIPN2v88internal5LabelENS_6vectorIiNS_9allocatorIiEEEEEENS_19__map_value_compareIS5_SA_NS_4lessIS5_EELb1EEENS7_ISA_EEE16__construct_nodeIJRKNS_21piecewise_construct_tENS_5tupleIJRKS5_EEENSL_IJEEEEEENS_10unique_ptrINS_11__tree_nodeISA_PvEENS_22__tree_node_destructorINS7_IST_EEEEEEDpOT_: argument 0"}
!14 = distinct !{!14, !"_ZNSt3__16__treeINS_12__value_typeIPN2v88internal5LabelENS_6vectorIiNS_9allocatorIiEEEEEENS_19__map_value_compareIS5_SA_NS_4lessIS5_EELb1EEENS7_ISA_EEE16__construct_nodeIJRKNS_21piecewise_construct_tENS_5tupleIJRKS5_EEENSL_IJEEEEEENS_10unique_ptrINS_11__tree_nodeISA_PvEENS_22__tree_node_destructorINS7_IST_EEEEEEDpOT_"}
!15 = distinct !{!15, !16}
!16 = !{!"llvm.loop.unroll.disable"}
!17 = distinct !{!17, !16}
!18 = distinct !{!18, !16}
!19 = distinct !{!19, !16}
!20 = distinct !{!20, !16}
!21 = distinct !{!21, !16}
!22 = distinct !{!22, !16}
!23 = distinct !{!23, !16}
!24 = distinct !{!24, !16}
!25 = distinct !{!25, !16}
!26 = distinct !{!26, !16}
!27 = distinct !{!27, !16}
!28 = distinct !{!28, !16}
!29 = distinct !{!29, !16}
!30 = distinct !{!30, !16}
!31 = distinct !{!31, !16}
!32 = distinct !{!32, !16}
!33 = distinct !{!33, !16}
!34 = distinct !{!34, !16}
!35 = distinct !{!35, !16}
!36 = distinct !{!36, !16}
!37 = distinct !{!37, !16}
!38 = distinct !{!38, !16}
!39 = distinct !{!39, !16}
!40 = distinct !{!40, !16}
!41 = distinct !{!41, !16}
!42 = distinct !{!42, !16}
!43 = distinct !{!43, !16}
!44 = distinct !{!44, !16}
!45 = distinct !{!45, !16}
!46 = distinct !{!46, !16}
!47 = distinct !{!47, !16}
!48 = distinct !{!48, !16}
!49 = distinct !{!49, !16}
!50 = distinct !{!50, !16}
!51 = distinct !{!51, !16}
!52 = distinct !{!52, !16}
!53 = distinct !{!53, !16}
!54 = distinct !{!54, !16}
!55 = distinct !{!55, !16}
!56 = distinct !{!56, !16}
!57 = distinct !{!57, !16}
!58 = !{!59}
!59 = distinct !{!59, !60}
!60 = distinct !{!60, !"LVerDomain"}
!61 = !{!62}
!62 = distinct !{!62, !60}
!63 = distinct !{!63, !64}
!64 = !{!"llvm.loop.isvectorized", i32 1}
!65 = distinct !{!65, !64}
!66 = !{!67}
!67 = distinct !{!67, !68}
!68 = distinct !{!68, !"LVerDomain"}
!69 = !{!70}
!70 = distinct !{!70, !68}
!71 = distinct !{!71, !64}
!72 = distinct !{!72, !16}
!73 = distinct !{!73, !64}
!74 = distinct !{!74, !16}
!75 = distinct !{!75, !16}
!76 = distinct !{!76, !16}
!77 = distinct !{!77, !16}
!78 = distinct !{!78, !16}
