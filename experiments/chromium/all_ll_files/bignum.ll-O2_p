; ModuleID = '../../base/third_party/double_conversion/double-conversion/bignum.cc'
source_filename = "../../base/third_party/double_conversion/double-conversion/bignum.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.double_conversion::Bignum" = type { i16, i16, [128 x i32] }

@_ZZN17double_conversion6Bignum20MultiplyByPowerOfTenEiE12kFive1_to_12 = internal unnamed_addr constant [12 x i32] [i32 5, i32 25, i32 125, i32 625, i32 3125, i32 15625, i32 78125, i32 390625, i32 1953125, i32 9765625, i32 48828125, i32 244140625], align 16

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden dereferenceable(4) i32* @_ZN17double_conversion6Bignum8RawBigitEi(%"class.double_conversion::Bignum"* readnone, i32) local_unnamed_addr #0 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %3
  ret i32* %4
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden dereferenceable(4) i32* @_ZNK17double_conversion6Bignum8RawBigitEi(%"class.double_conversion::Bignum"* readnone, i32) local_unnamed_addr #0 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %3
  ret i32* %4
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN17double_conversion6Bignum12AssignUInt16Et(%"class.double_conversion::Bignum"* nocapture, i16 zeroext) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 0
  store i16 0, i16* %3, align 4
  %4 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 1
  store i16 0, i16* %4, align 2
  %5 = icmp eq i16 %1, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %2
  %7 = zext i16 %1 to i32
  %8 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 0
  store i32 %7, i32* %8, align 4
  store i16 1, i16* %3, align 4
  br label %9

9:                                                ; preds = %2, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN17double_conversion6Bignum12AssignUInt64Em(%"class.double_conversion::Bignum"* nocapture, i64) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 0
  store i16 0, i16* %3, align 4
  %4 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 1
  store i16 0, i16* %4, align 2
  %5 = icmp eq i64 %1, 0
  br i1 %5, label %7, label %8

6:                                                ; preds = %8
  store i16 %16, i16* %3, align 4
  br label %7

7:                                                ; preds = %6, %2
  ret void

8:                                                ; preds = %2, %8
  %9 = phi i64 [ %17, %8 ], [ 0, %2 ]
  %10 = phi i16 [ %16, %8 ], [ 0, %2 ]
  %11 = phi i64 [ %15, %8 ], [ %1, %2 ]
  %12 = trunc i64 %11 to i32
  %13 = and i32 %12, 268435455
  %14 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %9
  store i32 %13, i32* %14, align 4
  %15 = lshr i64 %11, 28
  %16 = add i16 %10, 1
  %17 = add nuw nsw i64 %9, 1
  %18 = icmp eq i64 %15, 0
  br i1 %18, label %6, label %8
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN17double_conversion6Bignum12AssignBignumERKS0_(%"class.double_conversion::Bignum"* nocapture, %"class.double_conversion::Bignum"* nocapture readonly dereferenceable(516)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %1, i64 0, i32 1
  %4 = load i16, i16* %3, align 2
  %5 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 1
  store i16 %4, i16* %5, align 2
  %6 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %1, i64 0, i32 0
  %7 = load i16, i16* %6, align 4
  %8 = icmp sgt i16 %7, 0
  br i1 %8, label %12, label %9

9:                                                ; preds = %12, %2
  %10 = phi i16 [ %7, %2 ], [ %18, %12 ]
  %11 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 0
  store i16 %10, i16* %11, align 4
  ret void

12:                                               ; preds = %2, %12
  %13 = phi i64 [ %17, %12 ], [ 0, %2 ]
  %14 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %1, i64 0, i32 2, i64 %13
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %13
  store i32 %15, i32* %16, align 4
  %17 = add nuw nsw i64 %13, 1
  %18 = load i16, i16* %6, align 4
  %19 = sext i16 %18 to i64
  %20 = icmp slt i64 %17, %19
  br i1 %20, label %12, label %9
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17double_conversion6Bignum19AssignDecimalStringENS_6VectorIKcEE(%"class.double_conversion::Bignum"* nocapture, i8*, i32) local_unnamed_addr #4 align 2 {
  %4 = alloca %"class.double_conversion::Bignum", align 4
  %5 = alloca %"class.double_conversion::Bignum", align 4
  %6 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 0
  store i16 0, i16* %6, align 4
  %7 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 1
  store i16 0, i16* %7, align 2
  %8 = icmp sgt i32 %2, 18
  br i1 %8, label %9, label %52

9:                                                ; preds = %3
  %10 = bitcast %"class.double_conversion::Bignum"* %4 to i8*
  %11 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %4, i64 0, i32 2
  %12 = bitcast [128 x i32]* %11 to i8*
  %13 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %4, i64 0, i32 0
  %14 = bitcast %"class.double_conversion::Bignum"* %4 to i32*
  br label %15

15:                                               ; preds = %9, %48
  %16 = phi i64 [ 0, %9 ], [ %18, %48 ]
  %17 = phi i32 [ %2, %9 ], [ %33, %48 ]
  %18 = add nuw nsw i64 %16, 19
  %19 = shl i64 %18, 32
  %20 = ashr exact i64 %19, 32
  br label %21

21:                                               ; preds = %21, %15
  %22 = phi i64 [ %16, %15 ], [ %30, %21 ]
  %23 = phi i64 [ 0, %15 ], [ %29, %21 ]
  %24 = getelementptr inbounds i8, i8* %1, i64 %22
  %25 = load i8, i8* %24, align 1
  %26 = sext i8 %25 to i64
  %27 = mul i64 %23, 10
  %28 = add i64 %27, -48
  %29 = add i64 %28, %26
  %30 = add nuw nsw i64 %22, 1
  %31 = icmp slt i64 %30, %20
  br i1 %31, label %21, label %32

32:                                               ; preds = %21
  %33 = add nsw i32 %17, -19
  tail call void @_ZN17double_conversion6Bignum20MultiplyByPowerOfTenEi(%"class.double_conversion::Bignum"* %0, i32 19)
  %34 = icmp eq i64 %29, 0
  br i1 %34, label %48, label %35

35:                                               ; preds = %32
  call void @llvm.lifetime.start.p0i8(i64 516, i8* nonnull %10) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %12, i8 -86, i64 512, i1 false) #9
  store i32 0, i32* %14, align 4
  br label %36

36:                                               ; preds = %36, %35
  %37 = phi i64 [ %45, %36 ], [ 0, %35 ]
  %38 = phi i16 [ %44, %36 ], [ 0, %35 ]
  %39 = phi i64 [ %43, %36 ], [ %29, %35 ]
  %40 = trunc i64 %39 to i32
  %41 = and i32 %40, 268435455
  %42 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %4, i64 0, i32 2, i64 %37
  store i32 %41, i32* %42, align 4
  %43 = lshr i64 %39, 28
  %44 = add nuw nsw i16 %38, 1
  %45 = add nuw nsw i64 %37, 1
  %46 = icmp eq i64 %43, 0
  br i1 %46, label %47, label %36

47:                                               ; preds = %36
  store i16 %44, i16* %13, align 4
  call void @_ZN17double_conversion6Bignum9AddBignumERKS0_(%"class.double_conversion::Bignum"* %0, %"class.double_conversion::Bignum"* nonnull dereferenceable(516) %4) #9
  call void @llvm.lifetime.end.p0i8(i64 516, i8* nonnull %10) #9
  br label %48

48:                                               ; preds = %32, %47
  %49 = icmp sgt i32 %33, 18
  br i1 %49, label %15, label %50

50:                                               ; preds = %48
  %51 = trunc i64 %18 to i32
  br label %52

52:                                               ; preds = %50, %3
  %53 = phi i32 [ 0, %3 ], [ %51, %50 ]
  %54 = phi i32 [ %2, %3 ], [ %33, %50 ]
  %55 = icmp sgt i32 %54, 0
  br i1 %55, label %57, label %56

56:                                               ; preds = %52
  tail call void @_ZN17double_conversion6Bignum20MultiplyByPowerOfTenEi(%"class.double_conversion::Bignum"* %0, i32 %54)
  br label %92

57:                                               ; preds = %52
  %58 = add nsw i32 %54, %53
  %59 = sext i32 %53 to i64
  %60 = sext i32 %58 to i64
  br label %61

61:                                               ; preds = %61, %57
  %62 = phi i64 [ %59, %57 ], [ %70, %61 ]
  %63 = phi i64 [ 0, %57 ], [ %69, %61 ]
  %64 = getelementptr inbounds i8, i8* %1, i64 %62
  %65 = load i8, i8* %64, align 1
  %66 = sext i8 %65 to i64
  %67 = mul i64 %63, 10
  %68 = add i64 %67, -48
  %69 = add i64 %68, %66
  %70 = add nsw i64 %62, 1
  %71 = icmp slt i64 %70, %60
  br i1 %71, label %61, label %72

72:                                               ; preds = %61
  tail call void @_ZN17double_conversion6Bignum20MultiplyByPowerOfTenEi(%"class.double_conversion::Bignum"* %0, i32 %54)
  %73 = icmp eq i64 %69, 0
  br i1 %73, label %92, label %74

74:                                               ; preds = %72
  %75 = bitcast %"class.double_conversion::Bignum"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 516, i8* nonnull %75) #9
  %76 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %5, i64 0, i32 2
  %77 = bitcast [128 x i32]* %76 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %77, i8 -86, i64 512, i1 false) #9
  %78 = bitcast %"class.double_conversion::Bignum"* %5 to i32*
  store i32 0, i32* %78, align 4
  br label %79

79:                                               ; preds = %79, %74
  %80 = phi i64 [ %88, %79 ], [ 0, %74 ]
  %81 = phi i16 [ %87, %79 ], [ 0, %74 ]
  %82 = phi i64 [ %86, %79 ], [ %69, %74 ]
  %83 = trunc i64 %82 to i32
  %84 = and i32 %83, 268435455
  %85 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %5, i64 0, i32 2, i64 %80
  store i32 %84, i32* %85, align 4
  %86 = lshr i64 %82, 28
  %87 = add nuw nsw i16 %81, 1
  %88 = add nuw nsw i64 %80, 1
  %89 = icmp eq i64 %86, 0
  br i1 %89, label %90, label %79

90:                                               ; preds = %79
  %91 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %5, i64 0, i32 0
  store i16 %87, i16* %91, align 4
  call void @_ZN17double_conversion6Bignum9AddBignumERKS0_(%"class.double_conversion::Bignum"* %0, %"class.double_conversion::Bignum"* nonnull dereferenceable(516) %5) #9
  call void @llvm.lifetime.end.p0i8(i64 516, i8* nonnull %75) #9
  br label %92

92:                                               ; preds = %56, %72, %90
  %93 = load i16, i16* %6, align 4
  %94 = icmp sgt i16 %93, 0
  br i1 %94, label %95, label %108

95:                                               ; preds = %92
  %96 = sext i16 %93 to i64
  br label %97

97:                                               ; preds = %103, %95
  %98 = phi i64 [ %96, %95 ], [ %99, %103 ]
  %99 = add nsw i64 %98, -1
  %100 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %99
  %101 = load i32, i32* %100, align 4
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %112

103:                                              ; preds = %97
  %104 = trunc i64 %99 to i16
  store i16 %104, i16* %6, align 4
  %105 = icmp sgt i64 %99, 0
  br i1 %105, label %97, label %106

106:                                              ; preds = %103
  %107 = trunc i64 %99 to i16
  br label %108

108:                                              ; preds = %106, %92
  %109 = phi i16 [ %93, %92 ], [ %107, %106 ]
  %110 = icmp eq i16 %109, 0
  br i1 %110, label %111, label %112

111:                                              ; preds = %108
  store i16 0, i16* %7, align 2
  br label %112

112:                                              ; preds = %97, %108, %111
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17double_conversion6Bignum20MultiplyByPowerOfTenEi(%"class.double_conversion::Bignum"* nocapture, i32) local_unnamed_addr #4 align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %321, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 0
  %6 = load i16, i16* %5, align 4
  %7 = icmp eq i16 %6, 0
  br i1 %7, label %321, label %8

8:                                                ; preds = %4
  %9 = icmp sgt i32 %1, 26
  br i1 %9, label %14, label %10

10:                                               ; preds = %95, %8
  %11 = phi i16 [ %6, %8 ], [ %96, %95 ]
  %12 = phi i32 [ %1, %8 ], [ %97, %95 ]
  %13 = icmp sgt i32 %12, 12
  br i1 %13, label %99, label %169

14:                                               ; preds = %8, %95
  %15 = phi i16 [ %96, %95 ], [ %6, %8 ]
  %16 = phi i32 [ %97, %95 ], [ %1, %8 ]
  %17 = icmp sgt i16 %15, 0
  br i1 %17, label %18, label %95

18:                                               ; preds = %14
  %19 = sext i16 %15 to i64
  %20 = and i64 %19, 4294967295
  %21 = and i64 %19, 1
  %22 = icmp eq i64 %20, 1
  br i1 %22, label %25, label %23

23:                                               ; preds = %18
  %24 = sub nsw i64 %20, %21
  br label %47

25:                                               ; preds = %47, %18
  %26 = phi i64 [ undef, %18 ], [ %77, %47 ]
  %27 = phi i64 [ 0, %18 ], [ %78, %47 ]
  %28 = phi i64 [ 0, %18 ], [ %77, %47 ]
  %29 = icmp eq i64 %21, 0
  br i1 %29, label %44, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %27
  %32 = load i32, i32* %31, align 4
  %33 = zext i32 %32 to i64
  %34 = mul nuw i64 %33, 4195354525
  %35 = and i64 %28, 268435455
  %36 = add nuw i64 %34, %35
  %37 = trunc i64 %36 to i32
  %38 = and i32 %37, 268435455
  store i32 %38, i32* %31, align 4
  %39 = mul i64 %33, 27755575600
  %40 = lshr i64 %28, 28
  %41 = add i64 %39, %40
  %42 = lshr i64 %36, 28
  %43 = add i64 %41, %42
  br label %44

44:                                               ; preds = %25, %30
  %45 = phi i64 [ %26, %25 ], [ %43, %30 ]
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %95, label %81

47:                                               ; preds = %47, %23
  %48 = phi i64 [ 0, %23 ], [ %78, %47 ]
  %49 = phi i64 [ 0, %23 ], [ %77, %47 ]
  %50 = phi i64 [ %24, %23 ], [ %79, %47 ]
  %51 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %48
  %52 = load i32, i32* %51, align 4
  %53 = zext i32 %52 to i64
  %54 = mul nuw i64 %53, 4195354525
  %55 = and i64 %49, 268435455
  %56 = add nuw i64 %54, %55
  %57 = trunc i64 %56 to i32
  %58 = and i32 %57, 268435455
  store i32 %58, i32* %51, align 4
  %59 = lshr i64 %49, 28
  %60 = lshr i64 %56, 28
  %61 = mul i64 %53, 27755575600
  %62 = add i64 %61, %59
  %63 = add i64 %62, %60
  %64 = or i64 %48, 1
  %65 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = zext i32 %66 to i64
  %68 = mul nuw i64 %67, 4195354525
  %69 = and i64 %63, 268435455
  %70 = add nuw i64 %68, %69
  %71 = trunc i64 %70 to i32
  %72 = and i32 %71, 268435455
  store i32 %72, i32* %65, align 4
  %73 = lshr i64 %63, 28
  %74 = lshr i64 %70, 28
  %75 = mul i64 %67, 27755575600
  %76 = add i64 %75, %73
  %77 = add i64 %76, %74
  %78 = add nuw nsw i64 %48, 2
  %79 = add i64 %50, -2
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %25, label %47

81:                                               ; preds = %44, %86
  %82 = phi i16 [ %92, %86 ], [ %15, %44 ]
  %83 = phi i64 [ %93, %86 ], [ %45, %44 ]
  %84 = icmp sgt i16 %82, 127
  br i1 %84, label %85, label %86

85:                                               ; preds = %81
  tail call void @abort() #10
  unreachable

86:                                               ; preds = %81
  %87 = trunc i64 %83 to i32
  %88 = and i32 %87, 268435455
  %89 = sext i16 %82 to i64
  %90 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %89
  store i32 %88, i32* %90, align 4
  %91 = load i16, i16* %5, align 4
  %92 = add i16 %91, 1
  store i16 %92, i16* %5, align 4
  %93 = lshr i64 %83, 28
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %95, label %81

95:                                               ; preds = %86, %14, %44
  %96 = phi i16 [ %15, %14 ], [ %15, %44 ], [ %92, %86 ]
  %97 = add nsw i32 %16, -27
  %98 = icmp sgt i32 %97, 26
  br i1 %98, label %14, label %10

99:                                               ; preds = %10, %165
  %100 = phi i16 [ %166, %165 ], [ %11, %10 ]
  %101 = phi i32 [ %167, %165 ], [ %12, %10 ]
  %102 = icmp sgt i16 %100, 0
  br i1 %102, label %103, label %165

103:                                              ; preds = %99
  %104 = sext i16 %100 to i64
  %105 = and i64 %104, 4294967295
  %106 = and i64 %104, 1
  %107 = icmp eq i64 %105, 1
  br i1 %107, label %110, label %108

108:                                              ; preds = %103
  %109 = sub nsw i64 %105, %106
  br label %127

110:                                              ; preds = %127, %103
  %111 = phi i64 [ undef, %103 ], [ %147, %127 ]
  %112 = phi i64 [ 0, %103 ], [ %148, %127 ]
  %113 = phi i64 [ 0, %103 ], [ %147, %127 ]
  %114 = icmp eq i64 %106, 0
  br i1 %114, label %124, label %115

115:                                              ; preds = %110
  %116 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %112
  %117 = load i32, i32* %116, align 4
  %118 = zext i32 %117 to i64
  %119 = mul nuw nsw i64 %118, 1220703125
  %120 = add nuw i64 %119, %113
  %121 = trunc i64 %120 to i32
  %122 = and i32 %121, 268435455
  store i32 %122, i32* %116, align 4
  %123 = lshr i64 %120, 28
  br label %124

124:                                              ; preds = %110, %115
  %125 = phi i64 [ %111, %110 ], [ %123, %115 ]
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %165, label %151

127:                                              ; preds = %127, %108
  %128 = phi i64 [ 0, %108 ], [ %148, %127 ]
  %129 = phi i64 [ 0, %108 ], [ %147, %127 ]
  %130 = phi i64 [ %109, %108 ], [ %149, %127 ]
  %131 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %128
  %132 = load i32, i32* %131, align 4
  %133 = zext i32 %132 to i64
  %134 = mul nuw nsw i64 %133, 1220703125
  %135 = add nuw i64 %134, %129
  %136 = trunc i64 %135 to i32
  %137 = and i32 %136, 268435455
  store i32 %137, i32* %131, align 4
  %138 = lshr i64 %135, 28
  %139 = or i64 %128, 1
  %140 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %139
  %141 = load i32, i32* %140, align 4
  %142 = zext i32 %141 to i64
  %143 = mul nuw nsw i64 %142, 1220703125
  %144 = add nuw i64 %143, %138
  %145 = trunc i64 %144 to i32
  %146 = and i32 %145, 268435455
  store i32 %146, i32* %140, align 4
  %147 = lshr i64 %144, 28
  %148 = add nuw nsw i64 %128, 2
  %149 = add i64 %130, -2
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %110, label %127

151:                                              ; preds = %124, %156
  %152 = phi i16 [ %162, %156 ], [ %100, %124 ]
  %153 = phi i64 [ %163, %156 ], [ %125, %124 ]
  %154 = icmp sgt i16 %152, 127
  br i1 %154, label %155, label %156

155:                                              ; preds = %151
  tail call void @abort() #10
  unreachable

156:                                              ; preds = %151
  %157 = trunc i64 %153 to i32
  %158 = and i32 %157, 268435455
  %159 = sext i16 %152 to i64
  %160 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %159
  store i32 %158, i32* %160, align 4
  %161 = load i16, i16* %5, align 4
  %162 = add i16 %161, 1
  store i16 %162, i16* %5, align 4
  %163 = lshr i64 %153, 28
  %164 = icmp eq i64 %163, 0
  br i1 %164, label %165, label %151

165:                                              ; preds = %156, %99, %124
  %166 = phi i16 [ %100, %99 ], [ %100, %124 ], [ %162, %156 ]
  %167 = add nsw i32 %101, -13
  %168 = icmp sgt i32 %167, 12
  br i1 %168, label %99, label %169

169:                                              ; preds = %165, %10
  %170 = phi i16 [ %11, %10 ], [ %166, %165 ]
  %171 = phi i32 [ %12, %10 ], [ %167, %165 ]
  %172 = icmp sgt i32 %171, 0
  br i1 %172, label %173, label %245

173:                                              ; preds = %169
  %174 = add nsw i32 %171, -1
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds [12 x i32], [12 x i32]* @_ZZN17double_conversion6Bignum20MultiplyByPowerOfTenEiE12kFive1_to_12, i64 0, i64 %175
  %177 = load i32, i32* %176, align 4
  switch i32 %177, label %180 [
    i32 1, label %245
    i32 0, label %178
  ]

178:                                              ; preds = %173
  store i16 0, i16* %5, align 4
  %179 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 1
  store i16 0, i16* %179, align 2
  br label %321

180:                                              ; preds = %173
  %181 = icmp sgt i16 %170, 0
  br i1 %181, label %182, label %245

182:                                              ; preds = %180
  %183 = sext i16 %170 to i64
  %184 = zext i32 %177 to i64
  %185 = and i64 %183, 4294967295
  %186 = and i64 %183, 1
  %187 = icmp eq i64 %185, 1
  br i1 %187, label %190, label %188

188:                                              ; preds = %182
  %189 = sub nsw i64 %185, %186
  br label %207

190:                                              ; preds = %207, %182
  %191 = phi i64 [ undef, %182 ], [ %227, %207 ]
  %192 = phi i64 [ 0, %182 ], [ %228, %207 ]
  %193 = phi i64 [ 0, %182 ], [ %227, %207 ]
  %194 = icmp eq i64 %186, 0
  br i1 %194, label %204, label %195

195:                                              ; preds = %190
  %196 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %192
  %197 = load i32, i32* %196, align 4
  %198 = zext i32 %197 to i64
  %199 = mul nuw i64 %198, %184
  %200 = add i64 %199, %193
  %201 = trunc i64 %200 to i32
  %202 = and i32 %201, 268435455
  store i32 %202, i32* %196, align 4
  %203 = lshr i64 %200, 28
  br label %204

204:                                              ; preds = %190, %195
  %205 = phi i64 [ %191, %190 ], [ %203, %195 ]
  %206 = icmp eq i64 %205, 0
  br i1 %206, label %245, label %231

207:                                              ; preds = %207, %188
  %208 = phi i64 [ 0, %188 ], [ %228, %207 ]
  %209 = phi i64 [ 0, %188 ], [ %227, %207 ]
  %210 = phi i64 [ %189, %188 ], [ %229, %207 ]
  %211 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %208
  %212 = load i32, i32* %211, align 4
  %213 = zext i32 %212 to i64
  %214 = mul nuw i64 %213, %184
  %215 = add i64 %214, %209
  %216 = trunc i64 %215 to i32
  %217 = and i32 %216, 268435455
  store i32 %217, i32* %211, align 4
  %218 = lshr i64 %215, 28
  %219 = or i64 %208, 1
  %220 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %219
  %221 = load i32, i32* %220, align 4
  %222 = zext i32 %221 to i64
  %223 = mul nuw i64 %222, %184
  %224 = add i64 %223, %218
  %225 = trunc i64 %224 to i32
  %226 = and i32 %225, 268435455
  store i32 %226, i32* %220, align 4
  %227 = lshr i64 %224, 28
  %228 = add nuw nsw i64 %208, 2
  %229 = add i64 %210, -2
  %230 = icmp eq i64 %229, 0
  br i1 %230, label %190, label %207

231:                                              ; preds = %204, %236
  %232 = phi i16 [ %242, %236 ], [ %170, %204 ]
  %233 = phi i64 [ %243, %236 ], [ %205, %204 ]
  %234 = icmp sgt i16 %232, 127
  br i1 %234, label %235, label %236

235:                                              ; preds = %231
  tail call void @abort() #10
  unreachable

236:                                              ; preds = %231
  %237 = trunc i64 %233 to i32
  %238 = and i32 %237, 268435455
  %239 = sext i16 %232 to i64
  %240 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %239
  store i32 %238, i32* %240, align 4
  %241 = load i16, i16* %5, align 4
  %242 = add i16 %241, 1
  store i16 %242, i16* %5, align 4
  %243 = lshr i64 %233, 28
  %244 = icmp eq i64 %243, 0
  br i1 %244, label %245, label %231

245:                                              ; preds = %236, %204, %173, %169, %180
  %246 = phi i16 [ %170, %180 ], [ %170, %169 ], [ %170, %173 ], [ %170, %204 ], [ %242, %236 ]
  %247 = icmp eq i16 %246, 0
  br i1 %247, label %321, label %248

248:                                              ; preds = %245
  %249 = sdiv i32 %1, 28
  %250 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 1
  %251 = load i16, i16* %250, align 2
  %252 = trunc i32 %249 to i16
  %253 = add i16 %251, %252
  store i16 %253, i16* %250, align 2
  %254 = srem i32 %1, 28
  %255 = icmp sgt i16 %246, 127
  br i1 %255, label %256, label %257

256:                                              ; preds = %248
  tail call void @abort() #10
  unreachable

257:                                              ; preds = %248
  %258 = icmp sgt i16 %246, 0
  br i1 %258, label %259, label %321

259:                                              ; preds = %257
  %260 = sub nsw i32 28, %254
  %261 = sext i16 %246 to i64
  %262 = icmp ult i16 %246, 8
  br i1 %262, label %263, label %266

263:                                              ; preds = %299, %259
  %264 = phi i64 [ 0, %259 ], [ %267, %299 ]
  %265 = phi i32 [ 0, %259 ], [ %301, %299 ]
  br label %306

266:                                              ; preds = %259
  %267 = and i64 %261, -8
  %268 = insertelement <4 x i32> undef, i32 %260, i32 0
  %269 = shufflevector <4 x i32> %268, <4 x i32> undef, <4 x i32> zeroinitializer
  %270 = insertelement <4 x i32> undef, i32 %260, i32 0
  %271 = shufflevector <4 x i32> %270, <4 x i32> undef, <4 x i32> zeroinitializer
  %272 = insertelement <4 x i32> undef, i32 %254, i32 0
  %273 = shufflevector <4 x i32> %272, <4 x i32> undef, <4 x i32> zeroinitializer
  %274 = insertelement <4 x i32> undef, i32 %254, i32 0
  %275 = shufflevector <4 x i32> %274, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %276

276:                                              ; preds = %276, %266
  %277 = phi i64 [ 0, %266 ], [ %297, %276 ]
  %278 = phi <4 x i32> [ <i32 undef, i32 undef, i32 undef, i32 0>, %266 ], [ %286, %276 ]
  %279 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %277
  %280 = bitcast i32* %279 to <4 x i32>*
  %281 = load <4 x i32>, <4 x i32>* %280, align 4
  %282 = getelementptr inbounds i32, i32* %279, i64 4
  %283 = bitcast i32* %282 to <4 x i32>*
  %284 = load <4 x i32>, <4 x i32>* %283, align 4
  %285 = lshr <4 x i32> %281, %269
  %286 = lshr <4 x i32> %284, %271
  %287 = shufflevector <4 x i32> %278, <4 x i32> %285, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %288 = shufflevector <4 x i32> %285, <4 x i32> %286, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %289 = shl <4 x i32> %281, %273
  %290 = shl <4 x i32> %284, %275
  %291 = add <4 x i32> %289, %287
  %292 = add <4 x i32> %290, %288
  %293 = and <4 x i32> %291, <i32 268435455, i32 268435455, i32 268435455, i32 268435455>
  %294 = and <4 x i32> %292, <i32 268435455, i32 268435455, i32 268435455, i32 268435455>
  %295 = bitcast i32* %279 to <4 x i32>*
  store <4 x i32> %293, <4 x i32>* %295, align 4
  %296 = bitcast i32* %282 to <4 x i32>*
  store <4 x i32> %294, <4 x i32>* %296, align 4
  %297 = add i64 %277, 8
  %298 = icmp eq i64 %297, %267
  br i1 %298, label %299, label %276, !llvm.loop !2

299:                                              ; preds = %276
  %300 = icmp eq i64 %267, %261
  %301 = extractelement <4 x i32> %286, i32 3
  %302 = extractelement <4 x i32> %286, i32 3
  br i1 %300, label %303, label %263

303:                                              ; preds = %306, %299
  %304 = phi i32 [ %302, %299 ], [ %311, %306 ]
  %305 = icmp eq i32 %304, 0
  br i1 %305, label %321, label %317

306:                                              ; preds = %263, %306
  %307 = phi i64 [ %315, %306 ], [ %264, %263 ]
  %308 = phi i32 [ %311, %306 ], [ %265, %263 ]
  %309 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %307
  %310 = load i32, i32* %309, align 4
  %311 = lshr i32 %310, %260
  %312 = shl i32 %310, %254
  %313 = add i32 %312, %308
  %314 = and i32 %313, 268435455
  store i32 %314, i32* %309, align 4
  %315 = add nuw nsw i64 %307, 1
  %316 = icmp eq i64 %315, %261
  br i1 %316, label %303, label %306, !llvm.loop !4

317:                                              ; preds = %303
  %318 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %261
  store i32 %304, i32* %318, align 4
  %319 = load i16, i16* %5, align 4
  %320 = add i16 %319, 1
  store i16 %320, i16* %5, align 4
  br label %321

321:                                              ; preds = %317, %303, %257, %245, %178, %4, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17double_conversion6Bignum9AddUInt64Em(%"class.double_conversion::Bignum"* nocapture, i64) local_unnamed_addr #4 align 2 {
  %3 = alloca %"class.double_conversion::Bignum", align 4
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %23, label %5

5:                                                ; preds = %2
  %6 = bitcast %"class.double_conversion::Bignum"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 516, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %3, i64 0, i32 2
  %8 = bitcast [128 x i32]* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %8, i8 -86, i64 512, i1 false)
  %9 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %3, i64 0, i32 0
  %10 = bitcast %"class.double_conversion::Bignum"* %3 to i32*
  store i32 0, i32* %10, align 4
  br label %11

11:                                               ; preds = %5, %11
  %12 = phi i64 [ %20, %11 ], [ 0, %5 ]
  %13 = phi i16 [ %19, %11 ], [ 0, %5 ]
  %14 = phi i64 [ %18, %11 ], [ %1, %5 ]
  %15 = trunc i64 %14 to i32
  %16 = and i32 %15, 268435455
  %17 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %3, i64 0, i32 2, i64 %12
  store i32 %16, i32* %17, align 4
  %18 = lshr i64 %14, 28
  %19 = add nuw nsw i16 %13, 1
  %20 = add nuw nsw i64 %12, 1
  %21 = icmp eq i64 %18, 0
  br i1 %21, label %22, label %11

22:                                               ; preds = %11
  store i16 %19, i16* %9, align 4
  call void @_ZN17double_conversion6Bignum9AddBignumERKS0_(%"class.double_conversion::Bignum"* %0, %"class.double_conversion::Bignum"* nonnull dereferenceable(516) %3)
  call void @llvm.lifetime.end.p0i8(i64 516, i8* nonnull %6) #9
  br label %23

23:                                               ; preds = %2, %22
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN17double_conversion6Bignum5ClampEv(%"class.double_conversion::Bignum"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 0
  %3 = load i16, i16* %2, align 4
  %4 = icmp sgt i16 %3, 0
  br i1 %4, label %5, label %18

5:                                                ; preds = %1
  %6 = sext i16 %3 to i64
  br label %7

7:                                                ; preds = %5, %13
  %8 = phi i64 [ %6, %5 ], [ %9, %13 ]
  %9 = add nsw i64 %8, -1
  %10 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %9
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %23

13:                                               ; preds = %7
  %14 = trunc i64 %9 to i16
  store i16 %14, i16* %2, align 4
  %15 = icmp sgt i64 %9, 0
  br i1 %15, label %7, label %16

16:                                               ; preds = %13
  %17 = trunc i64 %9 to i16
  br label %18

18:                                               ; preds = %16, %1
  %19 = phi i16 [ %3, %1 ], [ %17, %16 ]
  %20 = icmp eq i16 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %18
  %22 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 1
  store i16 0, i16* %22, align 2
  br label %23

23:                                               ; preds = %7, %21, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17double_conversion6Bignum15AssignHexStringENS_6VectorIKcEE(%"class.double_conversion::Bignum"* nocapture, i8*, i32) local_unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 0
  store i16 0, i16* %4, align 4
  %5 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 1
  store i16 0, i16* %5, align 2
  %6 = icmp sgt i32 %2, 896
  br i1 %6, label %11, label %7

7:                                                ; preds = %3
  %8 = icmp eq i32 %2, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %7
  %10 = sext i32 %2 to i64
  br label %14

11:                                               ; preds = %3
  tail call void @abort() #10
  unreachable

12:                                               ; preds = %48
  %13 = icmp eq i64 %49, 0
  br i1 %13, label %58, label %52

14:                                               ; preds = %9, %48
  %15 = phi i64 [ %10, %9 ], [ %18, %48 ]
  %16 = phi i32 [ 0, %9 ], [ %50, %48 ]
  %17 = phi i64 [ 0, %9 ], [ %49, %48 ]
  %18 = add nsw i64 %15, -1
  %19 = getelementptr inbounds i8, i8* %1, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = sext i8 %20 to i32
  %22 = add nsw i32 %21, -48
  %23 = icmp ult i32 %22, 10
  br i1 %23, label %31, label %24

24:                                               ; preds = %14
  %25 = add nsw i32 %21, -97
  %26 = icmp ult i32 %25, 6
  br i1 %26, label %27, label %29

27:                                               ; preds = %24
  %28 = add nsw i32 %21, -87
  br label %31

29:                                               ; preds = %24
  %30 = add nsw i32 %21, -55
  br label %31

31:                                               ; preds = %14, %27, %29
  %32 = phi i32 [ %28, %27 ], [ %30, %29 ], [ %22, %14 ]
  %33 = sext i32 %32 to i64
  %34 = zext i32 %16 to i64
  %35 = shl i64 %33, %34
  %36 = or i64 %35, %17
  %37 = add nsw i32 %16, 4
  %38 = icmp sgt i32 %37, 27
  br i1 %38, label %39, label %48

39:                                               ; preds = %31
  %40 = trunc i64 %36 to i32
  %41 = and i32 %40, 268435455
  %42 = load i16, i16* %4, align 4
  %43 = add i16 %42, 1
  store i16 %43, i16* %4, align 4
  %44 = sext i16 %42 to i64
  %45 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %44
  store i32 %41, i32* %45, align 4
  %46 = add nsw i32 %16, -24
  %47 = lshr i64 %36, 28
  br label %48

48:                                               ; preds = %31, %39
  %49 = phi i64 [ %47, %39 ], [ %36, %31 ]
  %50 = phi i32 [ %46, %39 ], [ %37, %31 ]
  %51 = icmp eq i64 %18, 0
  br i1 %51, label %12, label %14

52:                                               ; preds = %12
  %53 = trunc i64 %49 to i32
  %54 = load i16, i16* %4, align 4
  %55 = add i16 %54, 1
  store i16 %55, i16* %4, align 4
  %56 = sext i16 %54 to i64
  %57 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %56
  store i32 %53, i32* %57, align 4
  br label %58

58:                                               ; preds = %7, %12, %52
  %59 = load i16, i16* %4, align 4
  %60 = icmp sgt i16 %59, 0
  br i1 %60, label %61, label %74

61:                                               ; preds = %58
  %62 = sext i16 %59 to i64
  br label %63

63:                                               ; preds = %69, %61
  %64 = phi i64 [ %62, %61 ], [ %65, %69 ]
  %65 = add nsw i64 %64, -1
  %66 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %65
  %67 = load i32, i32* %66, align 4
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %78

69:                                               ; preds = %63
  %70 = trunc i64 %65 to i16
  store i16 %70, i16* %4, align 4
  %71 = icmp sgt i64 %65, 0
  br i1 %71, label %63, label %72

72:                                               ; preds = %69
  %73 = trunc i64 %65 to i16
  br label %74

74:                                               ; preds = %72, %58
  %75 = phi i16 [ %59, %58 ], [ %73, %72 ]
  %76 = icmp eq i16 %75, 0
  br i1 %76, label %77, label %78

77:                                               ; preds = %74
  store i16 0, i16* %5, align 2
  br label %78

78:                                               ; preds = %63, %74, %77
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17double_conversion6Bignum9AddBignumERKS0_(%"class.double_conversion::Bignum"* nocapture, %"class.double_conversion::Bignum"* nocapture readonly dereferenceable(516)) local_unnamed_addr #4 align 2 {
  %3 = bitcast %"class.double_conversion::Bignum"* %0 to i8*
  %4 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 1
  %5 = load i16, i16* %4, align 2
  %6 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %1, i64 0, i32 1
  %7 = load i16, i16* %6, align 2
  %8 = icmp sgt i16 %5, %7
  br i1 %8, label %12, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 0
  %11 = load i16, i16* %10, align 4
  br label %188

12:                                               ; preds = %2
  %13 = sext i16 %5 to i32
  %14 = sext i16 %7 to i32
  %15 = sub nsw i32 %13, %14
  %16 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 0
  %17 = load i16, i16* %16, align 4
  %18 = sext i16 %17 to i32
  %19 = add nsw i32 %15, %18
  %20 = icmp sgt i32 %19, 128
  br i1 %20, label %159, label %21

21:                                               ; preds = %12
  %22 = icmp sgt i16 %17, 0
  br i1 %22, label %23, label %160

23:                                               ; preds = %21
  %24 = sext i16 %17 to i64
  %25 = icmp ult i16 %17, 8
  br i1 %25, label %26, label %29

26:                                               ; preds = %157, %59, %29, %23
  %27 = phi i64 [ %24, %59 ], [ %24, %29 ], [ %24, %23 ], [ %80, %157 ]
  %28 = phi i32 [ %18, %59 ], [ %18, %29 ], [ %18, %23 ], [ %82, %157 ]
  br label %170

29:                                               ; preds = %23
  %30 = add nsw i64 %24, -1
  %31 = add nsw i32 %18, %13
  %32 = xor i32 %14, -1
  %33 = add nsw i32 %31, %32
  %34 = trunc i64 %30 to i32
  %35 = sub i32 %33, %34
  %36 = icmp sgt i32 %35, %33
  %37 = icmp ugt i64 %30, 4294967295
  %38 = or i1 %36, %37
  %39 = sext i32 %33 to i64
  %40 = shl nsw i64 %39, 2
  %41 = add nsw i64 %40, 4
  %42 = getelementptr i8, i8* %3, i64 %41
  %43 = ptrtoint i8* %42 to i64
  %44 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %30, i64 4)
  %45 = extractvalue { i64, i1 } %44, 0
  %46 = extractvalue { i64, i1 } %44, 1
  %47 = icmp ugt i64 %45, %43
  %48 = or i1 %47, %46
  %49 = or i1 %38, %48
  %50 = shl nsw i64 %24, 2
  %51 = getelementptr i8, i8* %3, i64 %50
  %52 = ptrtoint i8* %51 to i64
  %53 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %30, i64 4)
  %54 = extractvalue { i64, i1 } %53, 0
  %55 = extractvalue { i64, i1 } %53, 1
  %56 = icmp ugt i64 %54, %52
  %57 = or i1 %56, %55
  %58 = or i1 %49, %57
  br i1 %58, label %26, label %59

59:                                               ; preds = %29
  %60 = add nsw i32 %18, %13
  %61 = xor i32 %14, -1
  %62 = add nsw i32 %60, %61
  %63 = sext i32 %62 to i64
  %64 = shl nsw i64 %63, 2
  %65 = add nsw i64 %64, 8
  %66 = shl nsw i64 %24, 2
  %67 = sub nsw i64 %65, %66
  %68 = getelementptr i8, i8* %3, i64 %67
  %69 = add nsw i64 %64, 8
  %70 = getelementptr i8, i8* %3, i64 %69
  %71 = getelementptr %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 0
  %72 = bitcast i32* %71 to i8*
  %73 = add nsw i64 %66, 4
  %74 = getelementptr i8, i8* %3, i64 %73
  %75 = icmp ult i8* %68, %74
  %76 = icmp ugt i8* %70, %72
  %77 = and i1 %75, %76
  br i1 %77, label %26, label %78

78:                                               ; preds = %59
  %79 = and i64 %24, -8
  %80 = sub nsw i64 %24, %79
  %81 = trunc i64 %79 to i32
  %82 = sub i32 %18, %81
  %83 = add nsw i64 %79, -8
  %84 = lshr exact i64 %83, 3
  %85 = add nuw nsw i64 %84, 1
  %86 = and i64 %85, 1
  %87 = icmp eq i64 %83, 0
  br i1 %87, label %134, label %88

88:                                               ; preds = %78
  %89 = sub nuw nsw i64 %85, %86
  br label %90

90:                                               ; preds = %90, %88
  %91 = phi i64 [ 0, %88 ], [ %131, %90 ]
  %92 = phi i64 [ %89, %88 ], [ %132, %90 ]
  %93 = trunc i64 %91 to i32
  %94 = xor i64 %91, -1
  %95 = add i64 %94, %24
  %96 = xor i32 %93, -1
  %97 = add i32 %96, %18
  %98 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %95
  %99 = getelementptr inbounds i32, i32* %98, i64 -3
  %100 = bitcast i32* %99 to <4 x i32>*
  %101 = load <4 x i32>, <4 x i32>* %100, align 4, !alias.scope !6
  %102 = getelementptr inbounds i32, i32* %98, i64 -7
  %103 = bitcast i32* %102 to <4 x i32>*
  %104 = load <4 x i32>, <4 x i32>* %103, align 4, !alias.scope !6
  %105 = add nsw i32 %97, %15
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %106
  %108 = getelementptr inbounds i32, i32* %107, i64 -3
  %109 = bitcast i32* %108 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %109, align 4, !alias.scope !9, !noalias !6
  %110 = getelementptr inbounds i32, i32* %107, i64 -7
  %111 = bitcast i32* %110 to <4 x i32>*
  store <4 x i32> %104, <4 x i32>* %111, align 4, !alias.scope !9, !noalias !6
  %112 = trunc i64 %91 to i32
  %113 = sub nuw nsw i64 -9, %91
  %114 = add i64 %113, %24
  %115 = xor i32 %112, -9
  %116 = add i32 %115, %18
  %117 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %114
  %118 = getelementptr inbounds i32, i32* %117, i64 -3
  %119 = bitcast i32* %118 to <4 x i32>*
  %120 = load <4 x i32>, <4 x i32>* %119, align 4, !alias.scope !6
  %121 = getelementptr inbounds i32, i32* %117, i64 -7
  %122 = bitcast i32* %121 to <4 x i32>*
  %123 = load <4 x i32>, <4 x i32>* %122, align 4, !alias.scope !6
  %124 = add nsw i32 %116, %15
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %125
  %127 = getelementptr inbounds i32, i32* %126, i64 -3
  %128 = bitcast i32* %127 to <4 x i32>*
  store <4 x i32> %120, <4 x i32>* %128, align 4, !alias.scope !9, !noalias !6
  %129 = getelementptr inbounds i32, i32* %126, i64 -7
  %130 = bitcast i32* %129 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %130, align 4, !alias.scope !9, !noalias !6
  %131 = add i64 %91, 16
  %132 = add i64 %92, -2
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %90, !llvm.loop !11

134:                                              ; preds = %90, %78
  %135 = phi i64 [ 0, %78 ], [ %131, %90 ]
  %136 = icmp eq i64 %86, 0
  br i1 %136, label %157, label %137

137:                                              ; preds = %134
  %138 = trunc i64 %135 to i32
  %139 = xor i64 %135, -1
  %140 = add i64 %139, %24
  %141 = xor i32 %138, -1
  %142 = add i32 %141, %18
  %143 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %140
  %144 = getelementptr inbounds i32, i32* %143, i64 -3
  %145 = bitcast i32* %144 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 4, !alias.scope !6
  %147 = getelementptr inbounds i32, i32* %143, i64 -7
  %148 = bitcast i32* %147 to <4 x i32>*
  %149 = load <4 x i32>, <4 x i32>* %148, align 4, !alias.scope !6
  %150 = add nsw i32 %142, %15
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %151
  %153 = getelementptr inbounds i32, i32* %152, i64 -3
  %154 = bitcast i32* %153 to <4 x i32>*
  store <4 x i32> %146, <4 x i32>* %154, align 4, !alias.scope !9, !noalias !6
  %155 = getelementptr inbounds i32, i32* %152, i64 -7
  %156 = bitcast i32* %155 to <4 x i32>*
  store <4 x i32> %149, <4 x i32>* %156, align 4, !alias.scope !9, !noalias !6
  br label %157

157:                                              ; preds = %134, %137
  %158 = icmp eq i64 %79, %24
  br i1 %158, label %160, label %26

159:                                              ; preds = %12
  tail call void @abort() #10
  unreachable

160:                                              ; preds = %170, %157, %21
  %161 = icmp sgt i32 %15, 0
  br i1 %161, label %162, label %181

162:                                              ; preds = %160
  %163 = getelementptr %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 0
  %164 = bitcast i32* %163 to i8*
  %165 = xor i32 %14, -1
  %166 = add nsw i32 %165, %13
  %167 = zext i32 %166 to i64
  %168 = shl nuw nsw i64 %167, 2
  %169 = add nuw nsw i64 %168, 4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %164, i8 0, i64 %169, i1 false) #9
  br label %181

170:                                              ; preds = %26, %170
  %171 = phi i64 [ %173, %170 ], [ %27, %26 ]
  %172 = phi i32 [ %174, %170 ], [ %28, %26 ]
  %173 = add nsw i64 %171, -1
  %174 = add nsw i32 %172, -1
  %175 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %173
  %176 = load i32, i32* %175, align 4
  %177 = add nsw i32 %174, %15
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %178
  store i32 %176, i32* %179, align 4
  %180 = icmp sgt i64 %173, 0
  br i1 %180, label %170, label %160, !llvm.loop !12

181:                                              ; preds = %162, %160
  %182 = load i16, i16* %16, align 4
  %183 = trunc i32 %15 to i16
  %184 = add i16 %182, %183
  store i16 %184, i16* %16, align 4
  %185 = load i16, i16* %4, align 2
  %186 = sub i16 %185, %183
  store i16 %186, i16* %4, align 2
  %187 = load i16, i16* %6, align 2
  br label %188

188:                                              ; preds = %9, %181
  %189 = phi i16 [ %7, %9 ], [ %187, %181 ]
  %190 = phi i16 [ %5, %9 ], [ %186, %181 ]
  %191 = phi i16 [ %11, %9 ], [ %184, %181 ]
  %192 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 0
  %193 = sext i16 %191 to i32
  %194 = sext i16 %190 to i32
  %195 = add nsw i32 %194, %193
  %196 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %1, i64 0, i32 0
  %197 = load i16, i16* %196, align 4
  %198 = sext i16 %197 to i32
  %199 = sext i16 %189 to i32
  %200 = add nsw i32 %199, %198
  %201 = icmp slt i32 %195, %200
  %202 = select i1 %201, i32 %200, i32 %195
  %203 = sub nsw i32 1, %194
  %204 = add nsw i32 %203, %202
  %205 = icmp sgt i32 %204, 128
  br i1 %205, label %206, label %207

206:                                              ; preds = %188
  tail call void @abort() #10
  unreachable

207:                                              ; preds = %188
  %208 = sub nsw i32 %199, %194
  %209 = icmp sgt i32 %208, %193
  br i1 %209, label %210, label %222

210:                                              ; preds = %207
  %211 = sext i16 %191 to i64
  %212 = shl nsw i64 %211, 2
  %213 = add nsw i64 %212, 4
  %214 = getelementptr i8, i8* %3, i64 %213
  %215 = xor i32 %194, -1
  %216 = add nsw i32 %215, %199
  %217 = sub nsw i32 %216, %193
  %218 = zext i32 %217 to i64
  %219 = shl nuw nsw i64 %218, 2
  %220 = add nuw nsw i64 %219, 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %214, i8 0, i64 %220, i1 false)
  %221 = load i16, i16* %196, align 4
  br label %222

222:                                              ; preds = %210, %207
  %223 = phi i16 [ %221, %210 ], [ %197, %207 ]
  %224 = icmp sgt i16 %223, 0
  br i1 %224, label %229, label %225

225:                                              ; preds = %222
  %226 = load i16, i16* %192, align 4
  %227 = sext i16 %226 to i32
  %228 = icmp slt i32 %208, %227
  br label %285

229:                                              ; preds = %222
  %230 = sext i32 %208 to i64
  br label %240

231:                                              ; preds = %250
  %232 = trunc i64 %259 to i32
  %233 = icmp eq i32 %258, 0
  %234 = load i16, i16* %192, align 4
  %235 = sext i16 %234 to i32
  %236 = icmp slt i32 %232, %235
  br i1 %233, label %285, label %237

237:                                              ; preds = %231
  %238 = shl i64 %259, 32
  %239 = ashr exact i64 %238, 32
  br label %264

240:                                              ; preds = %229, %250
  %241 = phi i64 [ %230, %229 ], [ %259, %250 ]
  %242 = phi i64 [ 0, %229 ], [ %260, %250 ]
  %243 = phi i32 [ 0, %229 ], [ %258, %250 ]
  %244 = load i16, i16* %192, align 4
  %245 = sext i16 %244 to i64
  %246 = icmp slt i64 %241, %245
  br i1 %246, label %247, label %250

247:                                              ; preds = %240
  %248 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %241
  %249 = load i32, i32* %248, align 4
  br label %250

250:                                              ; preds = %240, %247
  %251 = phi i32 [ %249, %247 ], [ 0, %240 ]
  %252 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %1, i64 0, i32 2, i64 %242
  %253 = load i32, i32* %252, align 4
  %254 = add i32 %251, %243
  %255 = add i32 %254, %253
  %256 = and i32 %255, 268435455
  %257 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %241
  store i32 %256, i32* %257, align 4
  %258 = lshr i32 %255, 28
  %259 = add nsw i64 %241, 1
  %260 = add nuw nsw i64 %242, 1
  %261 = load i16, i16* %196, align 4
  %262 = sext i16 %261 to i64
  %263 = icmp slt i64 %260, %262
  br i1 %263, label %240, label %231

264:                                              ; preds = %237, %271
  %265 = phi i64 [ %239, %237 ], [ %277, %271 ]
  %266 = phi i1 [ %236, %237 ], [ %281, %271 ]
  %267 = phi i32 [ %258, %237 ], [ %276, %271 ]
  br i1 %266, label %268, label %271

268:                                              ; preds = %264
  %269 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %265
  %270 = load i32, i32* %269, align 4
  br label %271

271:                                              ; preds = %264, %268
  %272 = phi i32 [ %270, %268 ], [ 0, %264 ]
  %273 = add i32 %272, %267
  %274 = and i32 %273, 268435455
  %275 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %265
  store i32 %274, i32* %275, align 4
  %276 = lshr i32 %273, 28
  %277 = add i64 %265, 1
  %278 = icmp eq i32 %276, 0
  %279 = load i16, i16* %192, align 4
  %280 = sext i16 %279 to i64
  %281 = icmp slt i64 %277, %280
  br i1 %278, label %282, label %264

282:                                              ; preds = %271
  %283 = sext i16 %279 to i32
  %284 = trunc i64 %277 to i32
  br label %285

285:                                              ; preds = %225, %282, %231
  %286 = phi i32 [ %284, %282 ], [ %232, %231 ], [ %208, %225 ]
  %287 = phi i32 [ %283, %282 ], [ %235, %231 ], [ %227, %225 ]
  %288 = phi i1 [ %281, %282 ], [ %236, %231 ], [ %228, %225 ]
  %289 = select i1 %288, i32 %287, i32 %286
  %290 = trunc i32 %289 to i16
  store i16 %290, i16* %192, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17double_conversion6Bignum5AlignERKS0_(%"class.double_conversion::Bignum"* nocapture, %"class.double_conversion::Bignum"* nocapture readonly dereferenceable(516)) local_unnamed_addr #4 align 2 {
  %3 = bitcast %"class.double_conversion::Bignum"* %0 to i8*
  %4 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 1
  %5 = load i16, i16* %4, align 2
  %6 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %1, i64 0, i32 1
  %7 = load i16, i16* %6, align 2
  %8 = icmp sgt i16 %5, %7
  br i1 %8, label %9, label %184

9:                                                ; preds = %2
  %10 = sext i16 %5 to i32
  %11 = sext i16 %7 to i32
  %12 = sub nsw i32 %10, %11
  %13 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 0
  %14 = load i16, i16* %13, align 4
  %15 = sext i16 %14 to i32
  %16 = add nsw i32 %12, %15
  %17 = icmp sgt i32 %16, 128
  br i1 %17, label %156, label %18

18:                                               ; preds = %9
  %19 = icmp sgt i16 %14, 0
  br i1 %19, label %20, label %157

20:                                               ; preds = %18
  %21 = sext i16 %14 to i64
  %22 = icmp ult i16 %14, 8
  br i1 %22, label %23, label %26

23:                                               ; preds = %154, %56, %26, %20
  %24 = phi i64 [ %21, %56 ], [ %21, %26 ], [ %21, %20 ], [ %77, %154 ]
  %25 = phi i32 [ %15, %56 ], [ %15, %26 ], [ %15, %20 ], [ %79, %154 ]
  br label %167

26:                                               ; preds = %20
  %27 = add nsw i64 %21, -1
  %28 = add nsw i32 %15, %10
  %29 = xor i32 %11, -1
  %30 = add nsw i32 %28, %29
  %31 = trunc i64 %27 to i32
  %32 = sub i32 %30, %31
  %33 = icmp sgt i32 %32, %30
  %34 = icmp ugt i64 %27, 4294967295
  %35 = or i1 %33, %34
  %36 = sext i32 %30 to i64
  %37 = shl nsw i64 %36, 2
  %38 = add nsw i64 %37, 4
  %39 = getelementptr i8, i8* %3, i64 %38
  %40 = ptrtoint i8* %39 to i64
  %41 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %27, i64 4)
  %42 = extractvalue { i64, i1 } %41, 0
  %43 = extractvalue { i64, i1 } %41, 1
  %44 = icmp ugt i64 %42, %40
  %45 = or i1 %44, %43
  %46 = or i1 %35, %45
  %47 = shl nsw i64 %21, 2
  %48 = getelementptr i8, i8* %3, i64 %47
  %49 = ptrtoint i8* %48 to i64
  %50 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %27, i64 4)
  %51 = extractvalue { i64, i1 } %50, 0
  %52 = extractvalue { i64, i1 } %50, 1
  %53 = icmp ugt i64 %51, %49
  %54 = or i1 %53, %52
  %55 = or i1 %46, %54
  br i1 %55, label %23, label %56

56:                                               ; preds = %26
  %57 = add nsw i32 %15, %10
  %58 = xor i32 %11, -1
  %59 = add nsw i32 %57, %58
  %60 = sext i32 %59 to i64
  %61 = shl nsw i64 %60, 2
  %62 = add nsw i64 %61, 8
  %63 = shl nsw i64 %21, 2
  %64 = sub nsw i64 %62, %63
  %65 = getelementptr i8, i8* %3, i64 %64
  %66 = add nsw i64 %61, 8
  %67 = getelementptr i8, i8* %3, i64 %66
  %68 = getelementptr %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 0
  %69 = bitcast i32* %68 to i8*
  %70 = add nsw i64 %63, 4
  %71 = getelementptr i8, i8* %3, i64 %70
  %72 = icmp ult i8* %65, %71
  %73 = icmp ugt i8* %67, %69
  %74 = and i1 %72, %73
  br i1 %74, label %23, label %75

75:                                               ; preds = %56
  %76 = and i64 %21, -8
  %77 = sub nsw i64 %21, %76
  %78 = trunc i64 %76 to i32
  %79 = sub i32 %15, %78
  %80 = add nsw i64 %76, -8
  %81 = lshr exact i64 %80, 3
  %82 = add nuw nsw i64 %81, 1
  %83 = and i64 %82, 1
  %84 = icmp eq i64 %80, 0
  br i1 %84, label %131, label %85

85:                                               ; preds = %75
  %86 = sub nuw nsw i64 %82, %83
  br label %87

87:                                               ; preds = %87, %85
  %88 = phi i64 [ 0, %85 ], [ %128, %87 ]
  %89 = phi i64 [ %86, %85 ], [ %129, %87 ]
  %90 = trunc i64 %88 to i32
  %91 = xor i64 %88, -1
  %92 = add i64 %91, %21
  %93 = xor i32 %90, -1
  %94 = add i32 %93, %15
  %95 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %92
  %96 = getelementptr inbounds i32, i32* %95, i64 -3
  %97 = bitcast i32* %96 to <4 x i32>*
  %98 = load <4 x i32>, <4 x i32>* %97, align 4, !alias.scope !13
  %99 = getelementptr inbounds i32, i32* %95, i64 -7
  %100 = bitcast i32* %99 to <4 x i32>*
  %101 = load <4 x i32>, <4 x i32>* %100, align 4, !alias.scope !13
  %102 = add nsw i32 %94, %12
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %103
  %105 = getelementptr inbounds i32, i32* %104, i64 -3
  %106 = bitcast i32* %105 to <4 x i32>*
  store <4 x i32> %98, <4 x i32>* %106, align 4, !alias.scope !16, !noalias !13
  %107 = getelementptr inbounds i32, i32* %104, i64 -7
  %108 = bitcast i32* %107 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %108, align 4, !alias.scope !16, !noalias !13
  %109 = trunc i64 %88 to i32
  %110 = sub nuw nsw i64 -9, %88
  %111 = add i64 %110, %21
  %112 = xor i32 %109, -9
  %113 = add i32 %112, %15
  %114 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %111
  %115 = getelementptr inbounds i32, i32* %114, i64 -3
  %116 = bitcast i32* %115 to <4 x i32>*
  %117 = load <4 x i32>, <4 x i32>* %116, align 4, !alias.scope !13
  %118 = getelementptr inbounds i32, i32* %114, i64 -7
  %119 = bitcast i32* %118 to <4 x i32>*
  %120 = load <4 x i32>, <4 x i32>* %119, align 4, !alias.scope !13
  %121 = add nsw i32 %113, %12
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %122
  %124 = getelementptr inbounds i32, i32* %123, i64 -3
  %125 = bitcast i32* %124 to <4 x i32>*
  store <4 x i32> %117, <4 x i32>* %125, align 4, !alias.scope !16, !noalias !13
  %126 = getelementptr inbounds i32, i32* %123, i64 -7
  %127 = bitcast i32* %126 to <4 x i32>*
  store <4 x i32> %120, <4 x i32>* %127, align 4, !alias.scope !16, !noalias !13
  %128 = add i64 %88, 16
  %129 = add i64 %89, -2
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %131, label %87, !llvm.loop !18

131:                                              ; preds = %87, %75
  %132 = phi i64 [ 0, %75 ], [ %128, %87 ]
  %133 = icmp eq i64 %83, 0
  br i1 %133, label %154, label %134

134:                                              ; preds = %131
  %135 = trunc i64 %132 to i32
  %136 = xor i64 %132, -1
  %137 = add i64 %136, %21
  %138 = xor i32 %135, -1
  %139 = add i32 %138, %15
  %140 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %137
  %141 = getelementptr inbounds i32, i32* %140, i64 -3
  %142 = bitcast i32* %141 to <4 x i32>*
  %143 = load <4 x i32>, <4 x i32>* %142, align 4, !alias.scope !13
  %144 = getelementptr inbounds i32, i32* %140, i64 -7
  %145 = bitcast i32* %144 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 4, !alias.scope !13
  %147 = add nsw i32 %139, %12
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %148
  %150 = getelementptr inbounds i32, i32* %149, i64 -3
  %151 = bitcast i32* %150 to <4 x i32>*
  store <4 x i32> %143, <4 x i32>* %151, align 4, !alias.scope !16, !noalias !13
  %152 = getelementptr inbounds i32, i32* %149, i64 -7
  %153 = bitcast i32* %152 to <4 x i32>*
  store <4 x i32> %146, <4 x i32>* %153, align 4, !alias.scope !16, !noalias !13
  br label %154

154:                                              ; preds = %131, %134
  %155 = icmp eq i64 %76, %21
  br i1 %155, label %157, label %23

156:                                              ; preds = %9
  tail call void @abort() #10
  unreachable

157:                                              ; preds = %167, %154, %18
  %158 = icmp sgt i32 %12, 0
  br i1 %158, label %159, label %178

159:                                              ; preds = %157
  %160 = getelementptr %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 0
  %161 = bitcast i32* %160 to i8*
  %162 = xor i32 %11, -1
  %163 = add nsw i32 %162, %10
  %164 = zext i32 %163 to i64
  %165 = shl nuw nsw i64 %164, 2
  %166 = add nuw nsw i64 %165, 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %161, i8 0, i64 %166, i1 false)
  br label %178

167:                                              ; preds = %23, %167
  %168 = phi i64 [ %170, %167 ], [ %24, %23 ]
  %169 = phi i32 [ %171, %167 ], [ %25, %23 ]
  %170 = add nsw i64 %168, -1
  %171 = add nsw i32 %169, -1
  %172 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %170
  %173 = load i32, i32* %172, align 4
  %174 = add nsw i32 %171, %12
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %175
  store i32 %173, i32* %176, align 4
  %177 = icmp sgt i64 %170, 0
  br i1 %177, label %167, label %157, !llvm.loop !19

178:                                              ; preds = %159, %157
  %179 = load i16, i16* %13, align 4
  %180 = trunc i32 %12 to i16
  %181 = add i16 %179, %180
  store i16 %181, i16* %13, align 4
  %182 = load i16, i16* %4, align 2
  %183 = sub i16 %182, %180
  store i16 %183, i16* %4, align 2
  br label %184

184:                                              ; preds = %178, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17double_conversion6Bignum14SubtractBignumERKS0_(%"class.double_conversion::Bignum"* nocapture, %"class.double_conversion::Bignum"* nocapture readonly dereferenceable(516)) local_unnamed_addr #4 align 2 {
  %3 = bitcast %"class.double_conversion::Bignum"* %0 to i8*
  %4 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 1
  %5 = load i16, i16* %4, align 2
  %6 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %1, i64 0, i32 1
  %7 = load i16, i16* %6, align 2
  %8 = icmp sgt i16 %5, %7
  br i1 %8, label %9, label %185

9:                                                ; preds = %2
  %10 = sext i16 %5 to i32
  %11 = sext i16 %7 to i32
  %12 = sub nsw i32 %10, %11
  %13 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 0
  %14 = load i16, i16* %13, align 4
  %15 = sext i16 %14 to i32
  %16 = add nsw i32 %12, %15
  %17 = icmp sgt i32 %16, 128
  br i1 %17, label %156, label %18

18:                                               ; preds = %9
  %19 = icmp sgt i16 %14, 0
  br i1 %19, label %20, label %157

20:                                               ; preds = %18
  %21 = sext i16 %14 to i64
  %22 = icmp ult i16 %14, 8
  br i1 %22, label %23, label %26

23:                                               ; preds = %154, %56, %26, %20
  %24 = phi i64 [ %21, %56 ], [ %21, %26 ], [ %21, %20 ], [ %77, %154 ]
  %25 = phi i32 [ %15, %56 ], [ %15, %26 ], [ %15, %20 ], [ %79, %154 ]
  br label %167

26:                                               ; preds = %20
  %27 = add nsw i64 %21, -1
  %28 = add nsw i32 %15, %10
  %29 = xor i32 %11, -1
  %30 = add nsw i32 %28, %29
  %31 = trunc i64 %27 to i32
  %32 = sub i32 %30, %31
  %33 = icmp sgt i32 %32, %30
  %34 = icmp ugt i64 %27, 4294967295
  %35 = or i1 %33, %34
  %36 = sext i32 %30 to i64
  %37 = shl nsw i64 %36, 2
  %38 = add nsw i64 %37, 4
  %39 = getelementptr i8, i8* %3, i64 %38
  %40 = ptrtoint i8* %39 to i64
  %41 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %27, i64 4)
  %42 = extractvalue { i64, i1 } %41, 0
  %43 = extractvalue { i64, i1 } %41, 1
  %44 = icmp ugt i64 %42, %40
  %45 = or i1 %44, %43
  %46 = or i1 %35, %45
  %47 = shl nsw i64 %21, 2
  %48 = getelementptr i8, i8* %3, i64 %47
  %49 = ptrtoint i8* %48 to i64
  %50 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %27, i64 4)
  %51 = extractvalue { i64, i1 } %50, 0
  %52 = extractvalue { i64, i1 } %50, 1
  %53 = icmp ugt i64 %51, %49
  %54 = or i1 %53, %52
  %55 = or i1 %46, %54
  br i1 %55, label %23, label %56

56:                                               ; preds = %26
  %57 = add nsw i32 %15, %10
  %58 = xor i32 %11, -1
  %59 = add nsw i32 %57, %58
  %60 = sext i32 %59 to i64
  %61 = shl nsw i64 %60, 2
  %62 = add nsw i64 %61, 8
  %63 = shl nsw i64 %21, 2
  %64 = sub nsw i64 %62, %63
  %65 = getelementptr i8, i8* %3, i64 %64
  %66 = add nsw i64 %61, 8
  %67 = getelementptr i8, i8* %3, i64 %66
  %68 = getelementptr %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 0
  %69 = bitcast i32* %68 to i8*
  %70 = add nsw i64 %63, 4
  %71 = getelementptr i8, i8* %3, i64 %70
  %72 = icmp ult i8* %65, %71
  %73 = icmp ugt i8* %67, %69
  %74 = and i1 %72, %73
  br i1 %74, label %23, label %75

75:                                               ; preds = %56
  %76 = and i64 %21, -8
  %77 = sub nsw i64 %21, %76
  %78 = trunc i64 %76 to i32
  %79 = sub i32 %15, %78
  %80 = add nsw i64 %76, -8
  %81 = lshr exact i64 %80, 3
  %82 = add nuw nsw i64 %81, 1
  %83 = and i64 %82, 1
  %84 = icmp eq i64 %80, 0
  br i1 %84, label %131, label %85

85:                                               ; preds = %75
  %86 = sub nuw nsw i64 %82, %83
  br label %87

87:                                               ; preds = %87, %85
  %88 = phi i64 [ 0, %85 ], [ %128, %87 ]
  %89 = phi i64 [ %86, %85 ], [ %129, %87 ]
  %90 = trunc i64 %88 to i32
  %91 = xor i64 %88, -1
  %92 = add i64 %91, %21
  %93 = xor i32 %90, -1
  %94 = add i32 %93, %15
  %95 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %92
  %96 = getelementptr inbounds i32, i32* %95, i64 -3
  %97 = bitcast i32* %96 to <4 x i32>*
  %98 = load <4 x i32>, <4 x i32>* %97, align 4, !alias.scope !20
  %99 = getelementptr inbounds i32, i32* %95, i64 -7
  %100 = bitcast i32* %99 to <4 x i32>*
  %101 = load <4 x i32>, <4 x i32>* %100, align 4, !alias.scope !20
  %102 = add nsw i32 %94, %12
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %103
  %105 = getelementptr inbounds i32, i32* %104, i64 -3
  %106 = bitcast i32* %105 to <4 x i32>*
  store <4 x i32> %98, <4 x i32>* %106, align 4, !alias.scope !23, !noalias !20
  %107 = getelementptr inbounds i32, i32* %104, i64 -7
  %108 = bitcast i32* %107 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %108, align 4, !alias.scope !23, !noalias !20
  %109 = trunc i64 %88 to i32
  %110 = sub nuw nsw i64 -9, %88
  %111 = add i64 %110, %21
  %112 = xor i32 %109, -9
  %113 = add i32 %112, %15
  %114 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %111
  %115 = getelementptr inbounds i32, i32* %114, i64 -3
  %116 = bitcast i32* %115 to <4 x i32>*
  %117 = load <4 x i32>, <4 x i32>* %116, align 4, !alias.scope !20
  %118 = getelementptr inbounds i32, i32* %114, i64 -7
  %119 = bitcast i32* %118 to <4 x i32>*
  %120 = load <4 x i32>, <4 x i32>* %119, align 4, !alias.scope !20
  %121 = add nsw i32 %113, %12
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %122
  %124 = getelementptr inbounds i32, i32* %123, i64 -3
  %125 = bitcast i32* %124 to <4 x i32>*
  store <4 x i32> %117, <4 x i32>* %125, align 4, !alias.scope !23, !noalias !20
  %126 = getelementptr inbounds i32, i32* %123, i64 -7
  %127 = bitcast i32* %126 to <4 x i32>*
  store <4 x i32> %120, <4 x i32>* %127, align 4, !alias.scope !23, !noalias !20
  %128 = add i64 %88, 16
  %129 = add i64 %89, -2
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %131, label %87, !llvm.loop !25

131:                                              ; preds = %87, %75
  %132 = phi i64 [ 0, %75 ], [ %128, %87 ]
  %133 = icmp eq i64 %83, 0
  br i1 %133, label %154, label %134

134:                                              ; preds = %131
  %135 = trunc i64 %132 to i32
  %136 = xor i64 %132, -1
  %137 = add i64 %136, %21
  %138 = xor i32 %135, -1
  %139 = add i32 %138, %15
  %140 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %137
  %141 = getelementptr inbounds i32, i32* %140, i64 -3
  %142 = bitcast i32* %141 to <4 x i32>*
  %143 = load <4 x i32>, <4 x i32>* %142, align 4, !alias.scope !20
  %144 = getelementptr inbounds i32, i32* %140, i64 -7
  %145 = bitcast i32* %144 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 4, !alias.scope !20
  %147 = add nsw i32 %139, %12
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %148
  %150 = getelementptr inbounds i32, i32* %149, i64 -3
  %151 = bitcast i32* %150 to <4 x i32>*
  store <4 x i32> %143, <4 x i32>* %151, align 4, !alias.scope !23, !noalias !20
  %152 = getelementptr inbounds i32, i32* %149, i64 -7
  %153 = bitcast i32* %152 to <4 x i32>*
  store <4 x i32> %146, <4 x i32>* %153, align 4, !alias.scope !23, !noalias !20
  br label %154

154:                                              ; preds = %131, %134
  %155 = icmp eq i64 %76, %21
  br i1 %155, label %157, label %23

156:                                              ; preds = %9
  tail call void @abort() #10
  unreachable

157:                                              ; preds = %167, %154, %18
  %158 = icmp sgt i32 %12, 0
  br i1 %158, label %159, label %178

159:                                              ; preds = %157
  %160 = getelementptr %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 0
  %161 = bitcast i32* %160 to i8*
  %162 = xor i32 %11, -1
  %163 = add nsw i32 %162, %10
  %164 = zext i32 %163 to i64
  %165 = shl nuw nsw i64 %164, 2
  %166 = add nuw nsw i64 %165, 4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %161, i8 0, i64 %166, i1 false) #9
  br label %178

167:                                              ; preds = %23, %167
  %168 = phi i64 [ %170, %167 ], [ %24, %23 ]
  %169 = phi i32 [ %171, %167 ], [ %25, %23 ]
  %170 = add nsw i64 %168, -1
  %171 = add nsw i32 %169, -1
  %172 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %170
  %173 = load i32, i32* %172, align 4
  %174 = add nsw i32 %171, %12
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %175
  store i32 %173, i32* %176, align 4
  %177 = icmp sgt i64 %170, 0
  br i1 %177, label %167, label %157, !llvm.loop !26

178:                                              ; preds = %159, %157
  %179 = load i16, i16* %13, align 4
  %180 = trunc i32 %12 to i16
  %181 = add i16 %179, %180
  store i16 %181, i16* %13, align 4
  %182 = load i16, i16* %4, align 2
  %183 = sub i16 %182, %180
  store i16 %183, i16* %4, align 2
  %184 = load i16, i16* %6, align 2
  br label %185

185:                                              ; preds = %2, %178
  %186 = phi i16 [ %5, %2 ], [ %183, %178 ]
  %187 = phi i16 [ %7, %2 ], [ %184, %178 ]
  %188 = sext i16 %187 to i32
  %189 = sext i16 %186 to i32
  %190 = sub nsw i32 %188, %189
  %191 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %1, i64 0, i32 0
  %192 = load i16, i16* %191, align 4
  %193 = icmp sgt i16 %192, 0
  br i1 %193, label %198, label %227

194:                                              ; preds = %198
  %195 = icmp eq i32 %211, 0
  br i1 %195, label %227, label %196

196:                                              ; preds = %194
  %197 = trunc i64 %212 to i32
  br label %217

198:                                              ; preds = %185, %198
  %199 = phi i64 [ %212, %198 ], [ 0, %185 ]
  %200 = phi i32 [ %211, %198 ], [ 0, %185 ]
  %201 = phi i32 [ %213, %198 ], [ 0, %185 ]
  %202 = add nsw i32 %201, %190
  %203 = sext i32 %202 to i64
  %204 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %203
  %205 = load i32, i32* %204, align 4
  %206 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %1, i64 0, i32 2, i64 %199
  %207 = load i32, i32* %206, align 4
  %208 = sub i32 %205, %207
  %209 = sub i32 %208, %200
  %210 = and i32 %209, 268435455
  store i32 %210, i32* %204, align 4
  %211 = lshr i32 %209, 31
  %212 = add nuw nsw i64 %199, 1
  %213 = add nuw nsw i32 %201, 1
  %214 = load i16, i16* %191, align 4
  %215 = sext i16 %214 to i64
  %216 = icmp slt i64 %212, %215
  br i1 %216, label %198, label %194

217:                                              ; preds = %196, %217
  %218 = phi i32 [ %225, %217 ], [ %197, %196 ]
  %219 = add nsw i32 %218, %190
  %220 = sext i32 %219 to i64
  %221 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %220
  %222 = load i32, i32* %221, align 4
  %223 = add i32 %222, -1
  %224 = and i32 %223, 268435455
  store i32 %224, i32* %221, align 4
  %225 = add nuw nsw i32 %218, 1
  %226 = icmp sgt i32 %223, -1
  br i1 %226, label %227, label %217

227:                                              ; preds = %217, %185, %194
  %228 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 0
  %229 = load i16, i16* %228, align 4
  %230 = icmp sgt i16 %229, 0
  br i1 %230, label %231, label %244

231:                                              ; preds = %227
  %232 = sext i16 %229 to i64
  br label %233

233:                                              ; preds = %239, %231
  %234 = phi i64 [ %232, %231 ], [ %235, %239 ]
  %235 = add nsw i64 %234, -1
  %236 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %235
  %237 = load i32, i32* %236, align 4
  %238 = icmp eq i32 %237, 0
  br i1 %238, label %239, label %248

239:                                              ; preds = %233
  %240 = trunc i64 %235 to i16
  store i16 %240, i16* %228, align 4
  %241 = icmp sgt i64 %235, 0
  br i1 %241, label %233, label %242

242:                                              ; preds = %239
  %243 = trunc i64 %235 to i16
  br label %244

244:                                              ; preds = %242, %227
  %245 = phi i16 [ %229, %227 ], [ %243, %242 ]
  %246 = icmp eq i16 %245, 0
  br i1 %246, label %247, label %248

247:                                              ; preds = %244
  store i16 0, i16* %4, align 2
  br label %248

248:                                              ; preds = %233, %244, %247
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17double_conversion6Bignum9ShiftLeftEi(%"class.double_conversion::Bignum"* nocapture, i32) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 0
  %4 = load i16, i16* %3, align 4
  %5 = icmp eq i16 %4, 0
  br i1 %5, label %79, label %6

6:                                                ; preds = %2
  %7 = sdiv i32 %1, 28
  %8 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 1
  %9 = load i16, i16* %8, align 2
  %10 = trunc i32 %7 to i16
  %11 = add i16 %9, %10
  store i16 %11, i16* %8, align 2
  %12 = srem i32 %1, 28
  %13 = icmp sgt i16 %4, 127
  br i1 %13, label %14, label %15

14:                                               ; preds = %6
  tail call void @abort() #10
  unreachable

15:                                               ; preds = %6
  %16 = icmp sgt i16 %4, 0
  br i1 %16, label %17, label %79

17:                                               ; preds = %15
  %18 = sub nsw i32 28, %12
  %19 = sext i16 %4 to i64
  %20 = icmp ult i16 %4, 8
  br i1 %20, label %21, label %24

21:                                               ; preds = %57, %17
  %22 = phi i64 [ 0, %17 ], [ %25, %57 ]
  %23 = phi i32 [ 0, %17 ], [ %59, %57 ]
  br label %64

24:                                               ; preds = %17
  %25 = and i64 %19, -8
  %26 = insertelement <4 x i32> undef, i32 %18, i32 0
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> zeroinitializer
  %28 = insertelement <4 x i32> undef, i32 %18, i32 0
  %29 = shufflevector <4 x i32> %28, <4 x i32> undef, <4 x i32> zeroinitializer
  %30 = insertelement <4 x i32> undef, i32 %12, i32 0
  %31 = shufflevector <4 x i32> %30, <4 x i32> undef, <4 x i32> zeroinitializer
  %32 = insertelement <4 x i32> undef, i32 %12, i32 0
  %33 = shufflevector <4 x i32> %32, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %34

34:                                               ; preds = %34, %24
  %35 = phi i64 [ 0, %24 ], [ %55, %34 ]
  %36 = phi <4 x i32> [ <i32 undef, i32 undef, i32 undef, i32 0>, %24 ], [ %44, %34 ]
  %37 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %35
  %38 = bitcast i32* %37 to <4 x i32>*
  %39 = load <4 x i32>, <4 x i32>* %38, align 4
  %40 = getelementptr inbounds i32, i32* %37, i64 4
  %41 = bitcast i32* %40 to <4 x i32>*
  %42 = load <4 x i32>, <4 x i32>* %41, align 4
  %43 = lshr <4 x i32> %39, %27
  %44 = lshr <4 x i32> %42, %29
  %45 = shufflevector <4 x i32> %36, <4 x i32> %43, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %46 = shufflevector <4 x i32> %43, <4 x i32> %44, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %47 = shl <4 x i32> %39, %31
  %48 = shl <4 x i32> %42, %33
  %49 = add <4 x i32> %47, %45
  %50 = add <4 x i32> %48, %46
  %51 = and <4 x i32> %49, <i32 268435455, i32 268435455, i32 268435455, i32 268435455>
  %52 = and <4 x i32> %50, <i32 268435455, i32 268435455, i32 268435455, i32 268435455>
  %53 = bitcast i32* %37 to <4 x i32>*
  store <4 x i32> %51, <4 x i32>* %53, align 4
  %54 = bitcast i32* %40 to <4 x i32>*
  store <4 x i32> %52, <4 x i32>* %54, align 4
  %55 = add i64 %35, 8
  %56 = icmp eq i64 %55, %25
  br i1 %56, label %57, label %34, !llvm.loop !27

57:                                               ; preds = %34
  %58 = icmp eq i64 %25, %19
  %59 = extractelement <4 x i32> %44, i32 3
  %60 = extractelement <4 x i32> %44, i32 3
  br i1 %58, label %61, label %21

61:                                               ; preds = %64, %57
  %62 = phi i32 [ %60, %57 ], [ %69, %64 ]
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %79, label %75

64:                                               ; preds = %21, %64
  %65 = phi i64 [ %73, %64 ], [ %22, %21 ]
  %66 = phi i32 [ %69, %64 ], [ %23, %21 ]
  %67 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %65
  %68 = load i32, i32* %67, align 4
  %69 = lshr i32 %68, %18
  %70 = shl i32 %68, %12
  %71 = add i32 %70, %66
  %72 = and i32 %71, 268435455
  store i32 %72, i32* %67, align 4
  %73 = add nuw nsw i64 %65, 1
  %74 = icmp eq i64 %73, %19
  br i1 %74, label %61, label %64, !llvm.loop !28

75:                                               ; preds = %61
  %76 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %19
  store i32 %62, i32* %76, align 4
  %77 = load i16, i16* %3, align 4
  %78 = add i16 %77, 1
  store i16 %78, i16* %3, align 4
  br label %79

79:                                               ; preds = %75, %61, %15, %2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN17double_conversion6Bignum15BigitsShiftLeftEi(%"class.double_conversion::Bignum"* nocapture, i32) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 0
  %4 = load i16, i16* %3, align 4
  %5 = icmp sgt i16 %4, 0
  br i1 %5, label %6, label %69

6:                                                ; preds = %2
  %7 = sub nsw i32 28, %1
  %8 = sext i16 %4 to i64
  %9 = icmp ult i16 %4, 8
  br i1 %9, label %10, label %13

10:                                               ; preds = %46, %6
  %11 = phi i64 [ 0, %6 ], [ %14, %46 ]
  %12 = phi i32 [ 0, %6 ], [ %48, %46 ]
  br label %53

13:                                               ; preds = %6
  %14 = and i64 %8, -8
  %15 = insertelement <4 x i32> undef, i32 %7, i32 0
  %16 = shufflevector <4 x i32> %15, <4 x i32> undef, <4 x i32> zeroinitializer
  %17 = insertelement <4 x i32> undef, i32 %7, i32 0
  %18 = shufflevector <4 x i32> %17, <4 x i32> undef, <4 x i32> zeroinitializer
  %19 = insertelement <4 x i32> undef, i32 %1, i32 0
  %20 = shufflevector <4 x i32> %19, <4 x i32> undef, <4 x i32> zeroinitializer
  %21 = insertelement <4 x i32> undef, i32 %1, i32 0
  %22 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %23

23:                                               ; preds = %23, %13
  %24 = phi i64 [ 0, %13 ], [ %44, %23 ]
  %25 = phi <4 x i32> [ <i32 undef, i32 undef, i32 undef, i32 0>, %13 ], [ %33, %23 ]
  %26 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %24
  %27 = bitcast i32* %26 to <4 x i32>*
  %28 = load <4 x i32>, <4 x i32>* %27, align 4
  %29 = getelementptr inbounds i32, i32* %26, i64 4
  %30 = bitcast i32* %29 to <4 x i32>*
  %31 = load <4 x i32>, <4 x i32>* %30, align 4
  %32 = lshr <4 x i32> %28, %16
  %33 = lshr <4 x i32> %31, %18
  %34 = shufflevector <4 x i32> %25, <4 x i32> %32, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %35 = shufflevector <4 x i32> %32, <4 x i32> %33, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %36 = shl <4 x i32> %28, %20
  %37 = shl <4 x i32> %31, %22
  %38 = add <4 x i32> %36, %34
  %39 = add <4 x i32> %37, %35
  %40 = and <4 x i32> %38, <i32 268435455, i32 268435455, i32 268435455, i32 268435455>
  %41 = and <4 x i32> %39, <i32 268435455, i32 268435455, i32 268435455, i32 268435455>
  %42 = bitcast i32* %26 to <4 x i32>*
  store <4 x i32> %40, <4 x i32>* %42, align 4
  %43 = bitcast i32* %29 to <4 x i32>*
  store <4 x i32> %41, <4 x i32>* %43, align 4
  %44 = add i64 %24, 8
  %45 = icmp eq i64 %44, %14
  br i1 %45, label %46, label %23, !llvm.loop !29

46:                                               ; preds = %23
  %47 = icmp eq i64 %14, %8
  %48 = extractelement <4 x i32> %33, i32 3
  %49 = extractelement <4 x i32> %33, i32 3
  br i1 %47, label %50, label %10

50:                                               ; preds = %53, %46
  %51 = phi i32 [ %49, %46 ], [ %58, %53 ]
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %69, label %64

53:                                               ; preds = %10, %53
  %54 = phi i64 [ %62, %53 ], [ %11, %10 ]
  %55 = phi i32 [ %58, %53 ], [ %12, %10 ]
  %56 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %54
  %57 = load i32, i32* %56, align 4
  %58 = lshr i32 %57, %7
  %59 = shl i32 %57, %1
  %60 = add i32 %59, %55
  %61 = and i32 %60, 268435455
  store i32 %61, i32* %56, align 4
  %62 = add nuw nsw i64 %54, 1
  %63 = icmp slt i64 %62, %8
  br i1 %63, label %53, label %50, !llvm.loop !30

64:                                               ; preds = %50
  %65 = sext i16 %4 to i64
  %66 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %65
  store i32 %51, i32* %66, align 4
  %67 = load i16, i16* %3, align 4
  %68 = add i16 %67, 1
  store i16 %68, i16* %3, align 4
  br label %69

69:                                               ; preds = %2, %50, %64
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17double_conversion6Bignum16MultiplyByUInt32Ej(%"class.double_conversion::Bignum"* nocapture, i32) local_unnamed_addr #4 align 2 {
  switch i32 %1, label %6 [
    i32 1, label %73
    i32 0, label %3
  ]

3:                                                ; preds = %2
  %4 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 0
  store i16 0, i16* %4, align 4
  %5 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 1
  store i16 0, i16* %5, align 2
  br label %73

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 0
  %8 = load i16, i16* %7, align 4
  %9 = icmp sgt i16 %8, 0
  br i1 %9, label %10, label %73

10:                                               ; preds = %6
  %11 = sext i16 %8 to i64
  %12 = zext i32 %1 to i64
  %13 = and i64 %11, 4294967295
  %14 = and i64 %11, 1
  %15 = icmp eq i64 %13, 1
  br i1 %15, label %18, label %16

16:                                               ; preds = %10
  %17 = sub nsw i64 %13, %14
  br label %35

18:                                               ; preds = %35, %10
  %19 = phi i64 [ undef, %10 ], [ %55, %35 ]
  %20 = phi i64 [ 0, %10 ], [ %56, %35 ]
  %21 = phi i64 [ 0, %10 ], [ %55, %35 ]
  %22 = icmp eq i64 %14, 0
  br i1 %22, label %32, label %23

23:                                               ; preds = %18
  %24 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %20
  %25 = load i32, i32* %24, align 4
  %26 = zext i32 %25 to i64
  %27 = mul nuw i64 %26, %12
  %28 = add i64 %27, %21
  %29 = trunc i64 %28 to i32
  %30 = and i32 %29, 268435455
  store i32 %30, i32* %24, align 4
  %31 = lshr i64 %28, 28
  br label %32

32:                                               ; preds = %18, %23
  %33 = phi i64 [ %19, %18 ], [ %31, %23 ]
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %73, label %59

35:                                               ; preds = %35, %16
  %36 = phi i64 [ 0, %16 ], [ %56, %35 ]
  %37 = phi i64 [ 0, %16 ], [ %55, %35 ]
  %38 = phi i64 [ %17, %16 ], [ %57, %35 ]
  %39 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %36
  %40 = load i32, i32* %39, align 4
  %41 = zext i32 %40 to i64
  %42 = mul nuw i64 %41, %12
  %43 = add i64 %42, %37
  %44 = trunc i64 %43 to i32
  %45 = and i32 %44, 268435455
  store i32 %45, i32* %39, align 4
  %46 = lshr i64 %43, 28
  %47 = or i64 %36, 1
  %48 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %47
  %49 = load i32, i32* %48, align 4
  %50 = zext i32 %49 to i64
  %51 = mul nuw i64 %50, %12
  %52 = add i64 %51, %46
  %53 = trunc i64 %52 to i32
  %54 = and i32 %53, 268435455
  store i32 %54, i32* %48, align 4
  %55 = lshr i64 %52, 28
  %56 = add nuw nsw i64 %36, 2
  %57 = add i64 %38, -2
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %18, label %35

59:                                               ; preds = %32, %64
  %60 = phi i16 [ %70, %64 ], [ %8, %32 ]
  %61 = phi i64 [ %71, %64 ], [ %33, %32 ]
  %62 = icmp sgt i16 %60, 127
  br i1 %62, label %63, label %64

63:                                               ; preds = %59
  tail call void @abort() #10
  unreachable

64:                                               ; preds = %59
  %65 = trunc i64 %61 to i32
  %66 = and i32 %65, 268435455
  %67 = sext i16 %60 to i64
  %68 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %67
  store i32 %66, i32* %68, align 4
  %69 = load i16, i16* %7, align 4
  %70 = add i16 %69, 1
  store i16 %70, i16* %7, align 4
  %71 = lshr i64 %61, 28
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %59

73:                                               ; preds = %64, %6, %32, %2, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17double_conversion6Bignum16MultiplyByUInt64Em(%"class.double_conversion::Bignum"* nocapture, i64) local_unnamed_addr #4 align 2 {
  switch i64 %1, label %6 [
    i64 1, label %92
    i64 0, label %3
  ]

3:                                                ; preds = %2
  %4 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 0
  store i16 0, i16* %4, align 4
  %5 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 1
  store i16 0, i16* %5, align 2
  br label %92

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 0
  %8 = load i16, i16* %7, align 4
  %9 = icmp eq i16 %8, 0
  br i1 %9, label %92, label %10

10:                                               ; preds = %6
  %11 = and i64 %1, 4294967295
  %12 = icmp sgt i16 %8, 0
  br i1 %12, label %13, label %92

13:                                               ; preds = %10
  %14 = sext i16 %8 to i64
  %15 = lshr i64 %1, 32
  %16 = shl nuw nsw i64 %15, 4
  %17 = and i64 %14, 4294967295
  %18 = and i64 %14, 1
  %19 = icmp eq i64 %17, 1
  br i1 %19, label %22, label %20

20:                                               ; preds = %13
  %21 = sub nsw i64 %17, %18
  br label %44

22:                                               ; preds = %44, %13
  %23 = phi i64 [ undef, %13 ], [ %74, %44 ]
  %24 = phi i64 [ 0, %13 ], [ %75, %44 ]
  %25 = phi i64 [ 0, %13 ], [ %74, %44 ]
  %26 = icmp eq i64 %18, 0
  br i1 %26, label %41, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %24
  %29 = load i32, i32* %28, align 4
  %30 = zext i32 %29 to i64
  %31 = mul nuw i64 %11, %30
  %32 = and i64 %25, 268435455
  %33 = add i64 %31, %32
  %34 = trunc i64 %33 to i32
  %35 = and i32 %34, 268435455
  store i32 %35, i32* %28, align 4
  %36 = mul i64 %16, %30
  %37 = lshr i64 %25, 28
  %38 = add i64 %36, %37
  %39 = lshr i64 %33, 28
  %40 = add i64 %38, %39
  br label %41

41:                                               ; preds = %22, %27
  %42 = phi i64 [ %23, %22 ], [ %40, %27 ]
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %92, label %78

44:                                               ; preds = %44, %20
  %45 = phi i64 [ 0, %20 ], [ %75, %44 ]
  %46 = phi i64 [ 0, %20 ], [ %74, %44 ]
  %47 = phi i64 [ %21, %20 ], [ %76, %44 ]
  %48 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %45
  %49 = load i32, i32* %48, align 4
  %50 = zext i32 %49 to i64
  %51 = mul nuw i64 %11, %50
  %52 = and i64 %46, 268435455
  %53 = add i64 %51, %52
  %54 = trunc i64 %53 to i32
  %55 = and i32 %54, 268435455
  store i32 %55, i32* %48, align 4
  %56 = lshr i64 %46, 28
  %57 = lshr i64 %53, 28
  %58 = mul i64 %16, %50
  %59 = add i64 %58, %56
  %60 = add i64 %59, %57
  %61 = or i64 %45, 1
  %62 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %61
  %63 = load i32, i32* %62, align 4
  %64 = zext i32 %63 to i64
  %65 = mul nuw i64 %11, %64
  %66 = and i64 %60, 268435455
  %67 = add i64 %65, %66
  %68 = trunc i64 %67 to i32
  %69 = and i32 %68, 268435455
  store i32 %69, i32* %62, align 4
  %70 = lshr i64 %60, 28
  %71 = lshr i64 %67, 28
  %72 = mul i64 %16, %64
  %73 = add i64 %72, %70
  %74 = add i64 %73, %71
  %75 = add nuw nsw i64 %45, 2
  %76 = add i64 %47, -2
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %22, label %44

78:                                               ; preds = %41, %83
  %79 = phi i16 [ %89, %83 ], [ %8, %41 ]
  %80 = phi i64 [ %90, %83 ], [ %42, %41 ]
  %81 = icmp sgt i16 %79, 127
  br i1 %81, label %82, label %83

82:                                               ; preds = %78
  tail call void @abort() #10
  unreachable

83:                                               ; preds = %78
  %84 = trunc i64 %80 to i32
  %85 = and i32 %84, 268435455
  %86 = sext i16 %79 to i64
  %87 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %86
  store i32 %85, i32* %87, align 4
  %88 = load i16, i16* %7, align 4
  %89 = add i16 %88, 1
  store i16 %89, i16* %7, align 4
  %90 = lshr i64 %80, 28
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %78

92:                                               ; preds = %83, %10, %41, %2, %6, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17double_conversion6Bignum6SquareEv(%"class.double_conversion::Bignum"* nocapture) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 0
  %3 = load i16, i16* %2, align 4
  %4 = sext i16 %3 to i32
  %5 = shl nsw i32 %4, 1
  %6 = icmp sgt i16 %3, 64
  br i1 %6, label %11, label %7

7:                                                ; preds = %1
  %8 = icmp sgt i16 %3, 0
  br i1 %8, label %9, label %36

9:                                                ; preds = %7
  %10 = sext i16 %3 to i64
  br label %18

11:                                               ; preds = %1
  tail call void @abort() #10
  unreachable

12:                                               ; preds = %18
  %13 = sext i16 %25 to i32
  %14 = icmp sgt i16 %25, 0
  br i1 %14, label %15, label %36

15:                                               ; preds = %12
  %16 = sext i16 %3 to i64
  %17 = zext i32 %13 to i64
  br label %28

18:                                               ; preds = %9, %18
  %19 = phi i64 [ 0, %9 ], [ %24, %18 ]
  %20 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %19
  %21 = load i32, i32* %20, align 4
  %22 = add nsw i64 %19, %10
  %23 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %22
  store i32 %21, i32* %23, align 4
  %24 = add nuw nsw i64 %19, 1
  %25 = load i16, i16* %2, align 4
  %26 = sext i16 %25 to i64
  %27 = icmp slt i64 %24, %26
  br i1 %27, label %18, label %12

28:                                               ; preds = %15, %95
  %29 = phi i64 [ 0, %15 ], [ %101, %95 ]
  %30 = phi i64 [ 0, %15 ], [ %100, %95 ]
  %31 = add nuw i64 %29, 1
  %32 = and i64 %31, 1
  %33 = icmp eq i64 %29, 0
  br i1 %33, label %78, label %34

34:                                               ; preds = %28
  %35 = sub nuw i64 %31, %32
  br label %47

36:                                               ; preds = %95, %7, %12
  %37 = phi i16 [ %25, %12 ], [ %3, %7 ], [ %25, %95 ]
  %38 = phi i32 [ %13, %12 ], [ %4, %7 ], [ %13, %95 ]
  %39 = phi i64 [ 0, %12 ], [ 0, %7 ], [ %100, %95 ]
  %40 = icmp sgt i32 %5, %38
  br i1 %40, label %41, label %103

41:                                               ; preds = %36
  %42 = sext i16 %3 to i64
  %43 = sext i16 %37 to i64
  %44 = sext i32 %5 to i64
  %45 = xor i32 %38, 1
  %46 = sub nsw i32 -2, %38
  br label %127

47:                                               ; preds = %47, %34
  %48 = phi i64 [ %29, %34 ], [ %74, %47 ]
  %49 = phi i64 [ 0, %34 ], [ %75, %47 ]
  %50 = phi i64 [ %30, %34 ], [ %73, %47 ]
  %51 = phi i64 [ %35, %34 ], [ %76, %47 ]
  %52 = add nsw i64 %48, %16
  %53 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %52
  %54 = load i32, i32* %53, align 4
  %55 = add nsw i64 %49, %16
  %56 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %55
  %57 = load i32, i32* %56, align 4
  %58 = zext i32 %54 to i64
  %59 = zext i32 %57 to i64
  %60 = mul nuw i64 %59, %58
  %61 = add i64 %60, %50
  %62 = add nsw i64 %48, -1
  %63 = or i64 %49, 1
  %64 = add nsw i64 %62, %16
  %65 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = add nsw i64 %63, %16
  %68 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %67
  %69 = load i32, i32* %68, align 4
  %70 = zext i32 %66 to i64
  %71 = zext i32 %69 to i64
  %72 = mul nuw i64 %71, %70
  %73 = add i64 %72, %61
  %74 = add nsw i64 %48, -2
  %75 = add nuw nsw i64 %49, 2
  %76 = add i64 %51, -2
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %78, label %47

78:                                               ; preds = %47, %28
  %79 = phi i64 [ undef, %28 ], [ %73, %47 ]
  %80 = phi i64 [ %29, %28 ], [ %74, %47 ]
  %81 = phi i64 [ 0, %28 ], [ %75, %47 ]
  %82 = phi i64 [ %30, %28 ], [ %73, %47 ]
  %83 = icmp eq i64 %32, 0
  br i1 %83, label %95, label %84

84:                                               ; preds = %78
  %85 = add nsw i64 %81, %16
  %86 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %85
  %87 = load i32, i32* %86, align 4
  %88 = zext i32 %87 to i64
  %89 = add nsw i64 %80, %16
  %90 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %89
  %91 = load i32, i32* %90, align 4
  %92 = zext i32 %91 to i64
  %93 = mul nuw i64 %88, %92
  %94 = add i64 %93, %82
  br label %95

95:                                               ; preds = %78, %84
  %96 = phi i64 [ %79, %78 ], [ %94, %84 ]
  %97 = trunc i64 %96 to i32
  %98 = and i32 %97, 268435455
  %99 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %29
  store i32 %98, i32* %99, align 4
  %100 = lshr i64 %96, 28
  %101 = add nuw nsw i64 %29, 1
  %102 = icmp eq i64 %101, %17
  br i1 %102, label %36, label %28

103:                                              ; preds = %198, %36
  %104 = trunc i32 %5 to i16
  store i16 %104, i16* %2, align 4
  %105 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 1
  %106 = load i16, i16* %105, align 2
  %107 = shl i16 %106, 1
  store i16 %107, i16* %105, align 2
  %108 = icmp sgt i16 %104, 0
  br i1 %108, label %109, label %122

109:                                              ; preds = %103
  %110 = sext i16 %104 to i64
  br label %111

111:                                              ; preds = %117, %109
  %112 = phi i64 [ %110, %109 ], [ %113, %117 ]
  %113 = add nsw i64 %112, -1
  %114 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %113
  %115 = load i32, i32* %114, align 4
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %117, label %126

117:                                              ; preds = %111
  %118 = trunc i64 %113 to i16
  store i16 %118, i16* %2, align 4
  %119 = icmp sgt i64 %113, 0
  br i1 %119, label %111, label %120

120:                                              ; preds = %117
  %121 = trunc i64 %113 to i16
  br label %122

122:                                              ; preds = %120, %103
  %123 = phi i16 [ %104, %103 ], [ %121, %120 ]
  %124 = icmp eq i16 %123, 0
  br i1 %124, label %125, label %126

125:                                              ; preds = %122
  store i16 0, i16* %105, align 2
  br label %126

126:                                              ; preds = %111, %122, %125
  ret void

127:                                              ; preds = %205, %41
  %128 = phi i32 [ %208, %205 ], [ 0, %41 ]
  %129 = phi i16 [ %207, %205 ], [ %37, %41 ]
  %130 = phi i64 [ %203, %205 ], [ %43, %41 ]
  %131 = phi i32 [ %133, %205 ], [ %38, %41 ]
  %132 = phi i64 [ %206, %205 ], [ %39, %41 ]
  %133 = add nsw i32 %131, 1
  %134 = sext i16 %129 to i32
  %135 = add nsw i32 %134, -1
  %136 = trunc i64 %130 to i32
  %137 = sub nsw i32 %136, %135
  %138 = icmp slt i32 %137, %134
  br i1 %138, label %139, label %198

139:                                              ; preds = %127
  %140 = sub i32 %46, %128
  %141 = sub i32 %45, %128
  %142 = sub i32 %133, %134
  %143 = sext i32 %142 to i64
  %144 = sext i16 %129 to i64
  %145 = shl nsw i32 %134, 1
  %146 = and i32 %141, 1
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %161, label %148

148:                                              ; preds = %139
  %149 = add nsw i64 %144, -1
  %150 = add nsw i64 %149, %42
  %151 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %150
  %152 = load i32, i32* %151, align 4
  %153 = add nsw i64 %143, %42
  %154 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %153
  %155 = load i32, i32* %154, align 4
  %156 = zext i32 %152 to i64
  %157 = zext i32 %155 to i64
  %158 = mul nuw i64 %157, %156
  %159 = add i64 %158, %132
  %160 = add nsw i64 %143, 1
  br label %161

161:                                              ; preds = %148, %139
  %162 = phi i64 [ %159, %148 ], [ undef, %139 ]
  %163 = phi i64 [ %149, %148 ], [ %144, %139 ]
  %164 = phi i64 [ %160, %148 ], [ %143, %139 ]
  %165 = phi i64 [ %159, %148 ], [ %132, %139 ]
  %166 = sub nsw i32 0, %145
  %167 = icmp eq i32 %140, %166
  br i1 %167, label %198, label %168

168:                                              ; preds = %161, %168
  %169 = phi i64 [ %184, %168 ], [ %163, %161 ]
  %170 = phi i64 [ %195, %168 ], [ %164, %161 ]
  %171 = phi i64 [ %194, %168 ], [ %165, %161 ]
  %172 = add i64 %169, -1
  %173 = add nsw i64 %172, %42
  %174 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %173
  %175 = load i32, i32* %174, align 4
  %176 = add nsw i64 %170, %42
  %177 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %176
  %178 = load i32, i32* %177, align 4
  %179 = zext i32 %175 to i64
  %180 = zext i32 %178 to i64
  %181 = mul nuw i64 %180, %179
  %182 = add i64 %181, %171
  %183 = add nsw i64 %170, 1
  %184 = add i64 %169, -2
  %185 = add nsw i64 %184, %42
  %186 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %185
  %187 = load i32, i32* %186, align 4
  %188 = add nsw i64 %183, %42
  %189 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %188
  %190 = load i32, i32* %189, align 4
  %191 = zext i32 %187 to i64
  %192 = zext i32 %190 to i64
  %193 = mul nuw i64 %192, %191
  %194 = add i64 %193, %182
  %195 = add nsw i64 %170, 2
  %196 = trunc i64 %195 to i32
  %197 = icmp eq i32 %196, %134
  br i1 %197, label %198, label %168

198:                                              ; preds = %161, %168, %127
  %199 = phi i64 [ %132, %127 ], [ %162, %161 ], [ %194, %168 ]
  %200 = trunc i64 %199 to i32
  %201 = and i32 %200, 268435455
  %202 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %130
  store i32 %201, i32* %202, align 4
  %203 = add nsw i64 %130, 1
  %204 = icmp eq i64 %203, %44
  br i1 %204, label %103, label %205

205:                                              ; preds = %198
  %206 = lshr i64 %199, 28
  %207 = load i16, i16* %2, align 4
  %208 = add i32 %128, 1
  br label %127
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17double_conversion6Bignum17AssignPowerUInt16Eti(%"class.double_conversion::Bignum"*, i16 zeroext, i32) local_unnamed_addr #4 align 2 {
  %4 = icmp eq i32 %2, 0
  %5 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 0
  store i16 0, i16* %5, align 4
  %6 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 1
  store i16 0, i16* %6, align 2
  br i1 %4, label %11, label %7

7:                                                ; preds = %3
  %8 = zext i16 %1 to i32
  %9 = and i32 %8, 1
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %18, label %13

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 0
  store i32 1, i32* %12, align 4
  store i16 1, i16* %5, align 4
  br label %311

13:                                               ; preds = %18, %7
  %14 = phi i32 [ 0, %7 ], [ %22, %18 ]
  %15 = phi i16 [ %1, %7 ], [ %21, %18 ]
  %16 = phi i32 [ %8, %7 ], [ %23, %18 ]
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %32, label %26

18:                                               ; preds = %7, %18
  %19 = phi i16 [ %21, %18 ], [ %1, %7 ]
  %20 = phi i32 [ %22, %18 ], [ 0, %7 ]
  %21 = lshr i16 %19, 1
  %22 = add nuw nsw i32 %20, 1
  %23 = zext i16 %21 to i32
  %24 = and i32 %23, 1
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %18, label %13

26:                                               ; preds = %13, %26
  %27 = phi i32 [ %30, %26 ], [ 0, %13 ]
  %28 = phi i32 [ %29, %26 ], [ %16, %13 ]
  %29 = ashr i32 %28, 1
  %30 = add nuw nsw i32 %27, 1
  %31 = icmp eq i32 %29, 0
  br i1 %31, label %32, label %26

32:                                               ; preds = %26, %13
  %33 = phi i32 [ 0, %13 ], [ %30, %26 ]
  %34 = mul nsw i32 %33, %2
  %35 = icmp sgt i32 %34, 3555
  br i1 %35, label %36, label %37

36:                                               ; preds = %32
  tail call void @abort() #10
  unreachable

37:                                               ; preds = %32, %37
  %38 = phi i32 [ %40, %37 ], [ 1, %32 ]
  %39 = icmp sgt i32 %38, %2
  %40 = shl i32 %38, 1
  br i1 %39, label %41, label %37

41:                                               ; preds = %37
  %42 = ashr i32 %38, 2
  %43 = zext i16 %15 to i64
  %44 = icmp eq i32 %42, 0
  br i1 %44, label %69, label %45

45:                                               ; preds = %41
  %46 = sub nsw i32 64, %33
  %47 = zext i32 %46 to i64
  %48 = shl nsw i64 -1, %47
  br label %49

49:                                               ; preds = %45, %62
  %50 = phi i8 [ 0, %45 ], [ %64, %62 ]
  %51 = phi i64 [ %43, %45 ], [ %63, %62 ]
  %52 = phi i32 [ %42, %45 ], [ %65, %62 ]
  %53 = mul i64 %51, %51
  %54 = and i32 %52, %2
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %62, label %56

56:                                               ; preds = %49
  %57 = and i64 %53, %48
  %58 = icmp eq i64 %57, 0
  %59 = select i1 %58, i64 %43, i64 1
  %60 = mul i64 %59, %53
  %61 = select i1 %58, i8 %50, i8 1
  br label %62

62:                                               ; preds = %56, %49
  %63 = phi i64 [ %53, %49 ], [ %60, %56 ]
  %64 = phi i8 [ %50, %49 ], [ %61, %56 ]
  %65 = ashr i32 %52, 1
  %66 = icmp ne i32 %65, 0
  %67 = icmp ult i64 %63, 4294967296
  %68 = and i1 %66, %67
  br i1 %68, label %49, label %69

69:                                               ; preds = %62, %41
  %70 = phi i32 [ 0, %41 ], [ %65, %62 ]
  %71 = phi i64 [ %43, %41 ], [ %63, %62 ]
  %72 = phi i8 [ 0, %41 ], [ %64, %62 ]
  store i16 0, i16* %5, align 4
  store i16 0, i16* %6, align 2
  %73 = icmp eq i64 %71, 0
  br i1 %73, label %86, label %75

74:                                               ; preds = %75
  store i16 %83, i16* %5, align 4
  br label %86

75:                                               ; preds = %69, %75
  %76 = phi i64 [ %84, %75 ], [ 0, %69 ]
  %77 = phi i16 [ %83, %75 ], [ 0, %69 ]
  %78 = phi i64 [ %82, %75 ], [ %71, %69 ]
  %79 = trunc i64 %78 to i32
  %80 = and i32 %79, 268435455
  %81 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %76
  store i32 %80, i32* %81, align 4
  %82 = lshr i64 %78, 28
  %83 = add nuw nsw i16 %77, 1
  %84 = add nuw nsw i64 %76, 1
  %85 = icmp eq i64 %82, 0
  br i1 %85, label %74, label %75

86:                                               ; preds = %69, %74
  %87 = phi i16 [ 0, %69 ], [ %83, %74 ]
  %88 = and i8 %72, 1
  %89 = icmp eq i8 %88, 0
  br i1 %89, label %156, label %90

90:                                               ; preds = %86
  switch i16 %15, label %92 [
    i16 1, label %156
    i16 0, label %91
  ]

91:                                               ; preds = %90
  store i16 0, i16* %5, align 4
  store i16 0, i16* %6, align 2
  br label %156

92:                                               ; preds = %90
  %93 = icmp sgt i16 %87, 0
  br i1 %93, label %94, label %156

94:                                               ; preds = %92
  %95 = sext i16 %87 to i64
  %96 = and i64 %95, 4294967295
  %97 = and i64 %95, 1
  %98 = icmp eq i64 %96, 1
  br i1 %98, label %101, label %99

99:                                               ; preds = %94
  %100 = sub nsw i64 %96, %97
  br label %118

101:                                              ; preds = %118, %94
  %102 = phi i64 [ undef, %94 ], [ %138, %118 ]
  %103 = phi i64 [ 0, %94 ], [ %139, %118 ]
  %104 = phi i64 [ 0, %94 ], [ %138, %118 ]
  %105 = icmp eq i64 %97, 0
  br i1 %105, label %115, label %106

106:                                              ; preds = %101
  %107 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %103
  %108 = load i32, i32* %107, align 4
  %109 = zext i32 %108 to i64
  %110 = mul nuw nsw i64 %109, %43
  %111 = add nuw nsw i64 %110, %104
  %112 = trunc i64 %111 to i32
  %113 = and i32 %112, 268435455
  store i32 %113, i32* %107, align 4
  %114 = lshr i64 %111, 28
  br label %115

115:                                              ; preds = %101, %106
  %116 = phi i64 [ %102, %101 ], [ %114, %106 ]
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %156, label %142

118:                                              ; preds = %118, %99
  %119 = phi i64 [ 0, %99 ], [ %139, %118 ]
  %120 = phi i64 [ 0, %99 ], [ %138, %118 ]
  %121 = phi i64 [ %100, %99 ], [ %140, %118 ]
  %122 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %119
  %123 = load i32, i32* %122, align 4
  %124 = zext i32 %123 to i64
  %125 = mul nuw nsw i64 %124, %43
  %126 = add nuw nsw i64 %125, %120
  %127 = trunc i64 %126 to i32
  %128 = and i32 %127, 268435455
  store i32 %128, i32* %122, align 4
  %129 = lshr i64 %126, 28
  %130 = or i64 %119, 1
  %131 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %130
  %132 = load i32, i32* %131, align 4
  %133 = zext i32 %132 to i64
  %134 = mul nuw nsw i64 %133, %43
  %135 = add nuw nsw i64 %134, %129
  %136 = trunc i64 %135 to i32
  %137 = and i32 %136, 268435455
  store i32 %137, i32* %131, align 4
  %138 = lshr i64 %135, 28
  %139 = add nuw nsw i64 %119, 2
  %140 = add i64 %121, -2
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %101, label %118

142:                                              ; preds = %115, %147
  %143 = phi i16 [ %153, %147 ], [ %87, %115 ]
  %144 = phi i64 [ %154, %147 ], [ %116, %115 ]
  %145 = icmp sgt i16 %143, 127
  br i1 %145, label %146, label %147

146:                                              ; preds = %142
  tail call void @abort() #10
  unreachable

147:                                              ; preds = %142
  %148 = trunc i64 %144 to i32
  %149 = and i32 %148, 268435455
  %150 = sext i16 %143 to i64
  %151 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %150
  store i32 %149, i32* %151, align 4
  %152 = load i16, i16* %5, align 4
  %153 = add i16 %152, 1
  store i16 %153, i16* %5, align 4
  %154 = lshr i64 %144, 28
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %142

156:                                              ; preds = %147, %115, %92, %91, %90, %86
  %157 = phi i16 [ %87, %115 ], [ %87, %92 ], [ 0, %91 ], [ %87, %90 ], [ %87, %86 ], [ %153, %147 ]
  %158 = icmp eq i32 %70, 0
  br i1 %158, label %235, label %159

159:                                              ; preds = %156, %230
  %160 = phi i32 [ %231, %230 ], [ %70, %156 ]
  tail call void @_ZN17double_conversion6Bignum6SquareEv(%"class.double_conversion::Bignum"* %0)
  %161 = and i32 %160, %2
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %230, label %163

163:                                              ; preds = %159
  switch i16 %15, label %165 [
    i16 1, label %230
    i16 0, label %164
  ]

164:                                              ; preds = %163
  store i16 0, i16* %5, align 4
  store i16 0, i16* %6, align 2
  br label %230

165:                                              ; preds = %163
  %166 = load i16, i16* %5, align 4
  %167 = icmp sgt i16 %166, 0
  br i1 %167, label %168, label %230

168:                                              ; preds = %165
  %169 = sext i16 %166 to i64
  %170 = and i64 %169, 4294967295
  %171 = and i64 %169, 1
  %172 = icmp eq i64 %170, 1
  br i1 %172, label %175, label %173

173:                                              ; preds = %168
  %174 = sub nsw i64 %170, %171
  br label %192

175:                                              ; preds = %192, %168
  %176 = phi i64 [ undef, %168 ], [ %212, %192 ]
  %177 = phi i64 [ 0, %168 ], [ %213, %192 ]
  %178 = phi i64 [ 0, %168 ], [ %212, %192 ]
  %179 = icmp eq i64 %171, 0
  br i1 %179, label %189, label %180

180:                                              ; preds = %175
  %181 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %177
  %182 = load i32, i32* %181, align 4
  %183 = zext i32 %182 to i64
  %184 = mul nuw nsw i64 %183, %43
  %185 = add nuw nsw i64 %184, %178
  %186 = trunc i64 %185 to i32
  %187 = and i32 %186, 268435455
  store i32 %187, i32* %181, align 4
  %188 = lshr i64 %185, 28
  br label %189

189:                                              ; preds = %175, %180
  %190 = phi i64 [ %176, %175 ], [ %188, %180 ]
  %191 = icmp eq i64 %190, 0
  br i1 %191, label %230, label %216

192:                                              ; preds = %192, %173
  %193 = phi i64 [ 0, %173 ], [ %213, %192 ]
  %194 = phi i64 [ 0, %173 ], [ %212, %192 ]
  %195 = phi i64 [ %174, %173 ], [ %214, %192 ]
  %196 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %193
  %197 = load i32, i32* %196, align 4
  %198 = zext i32 %197 to i64
  %199 = mul nuw nsw i64 %198, %43
  %200 = add nuw nsw i64 %199, %194
  %201 = trunc i64 %200 to i32
  %202 = and i32 %201, 268435455
  store i32 %202, i32* %196, align 4
  %203 = lshr i64 %200, 28
  %204 = or i64 %193, 1
  %205 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %204
  %206 = load i32, i32* %205, align 4
  %207 = zext i32 %206 to i64
  %208 = mul nuw nsw i64 %207, %43
  %209 = add nuw nsw i64 %208, %203
  %210 = trunc i64 %209 to i32
  %211 = and i32 %210, 268435455
  store i32 %211, i32* %205, align 4
  %212 = lshr i64 %209, 28
  %213 = add nuw nsw i64 %193, 2
  %214 = add i64 %195, -2
  %215 = icmp eq i64 %214, 0
  br i1 %215, label %175, label %192

216:                                              ; preds = %189, %221
  %217 = phi i16 [ %227, %221 ], [ %166, %189 ]
  %218 = phi i64 [ %228, %221 ], [ %190, %189 ]
  %219 = icmp sgt i16 %217, 127
  br i1 %219, label %220, label %221

220:                                              ; preds = %216
  tail call void @abort() #10
  unreachable

221:                                              ; preds = %216
  %222 = trunc i64 %218 to i32
  %223 = and i32 %222, 268435455
  %224 = sext i16 %217 to i64
  %225 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %224
  store i32 %223, i32* %225, align 4
  %226 = load i16, i16* %5, align 4
  %227 = add i16 %226, 1
  store i16 %227, i16* %5, align 4
  %228 = lshr i64 %218, 28
  %229 = icmp eq i64 %228, 0
  br i1 %229, label %230, label %216

230:                                              ; preds = %221, %189, %165, %164, %163, %159
  %231 = ashr i32 %160, 1
  %232 = icmp eq i32 %231, 0
  br i1 %232, label %233, label %159

233:                                              ; preds = %230
  %234 = load i16, i16* %5, align 4
  br label %235

235:                                              ; preds = %233, %156
  %236 = phi i16 [ %234, %233 ], [ %157, %156 ]
  %237 = mul nsw i32 %14, %2
  %238 = icmp eq i16 %236, 0
  br i1 %238, label %311, label %239

239:                                              ; preds = %235
  %240 = sdiv i32 %237, 28
  %241 = load i16, i16* %6, align 2
  %242 = trunc i32 %240 to i16
  %243 = add i16 %241, %242
  store i16 %243, i16* %6, align 2
  %244 = srem i32 %237, 28
  %245 = icmp sgt i16 %236, 127
  br i1 %245, label %246, label %247

246:                                              ; preds = %239
  tail call void @abort() #10
  unreachable

247:                                              ; preds = %239
  %248 = icmp sgt i16 %236, 0
  br i1 %248, label %249, label %311

249:                                              ; preds = %247
  %250 = sub nsw i32 28, %244
  %251 = sext i16 %236 to i64
  %252 = icmp ult i16 %236, 8
  br i1 %252, label %253, label %256

253:                                              ; preds = %289, %249
  %254 = phi i64 [ 0, %249 ], [ %257, %289 ]
  %255 = phi i32 [ 0, %249 ], [ %291, %289 ]
  br label %296

256:                                              ; preds = %249
  %257 = and i64 %251, -8
  %258 = insertelement <4 x i32> undef, i32 %250, i32 0
  %259 = shufflevector <4 x i32> %258, <4 x i32> undef, <4 x i32> zeroinitializer
  %260 = insertelement <4 x i32> undef, i32 %250, i32 0
  %261 = shufflevector <4 x i32> %260, <4 x i32> undef, <4 x i32> zeroinitializer
  %262 = insertelement <4 x i32> undef, i32 %244, i32 0
  %263 = shufflevector <4 x i32> %262, <4 x i32> undef, <4 x i32> zeroinitializer
  %264 = insertelement <4 x i32> undef, i32 %244, i32 0
  %265 = shufflevector <4 x i32> %264, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %266

266:                                              ; preds = %266, %256
  %267 = phi i64 [ 0, %256 ], [ %287, %266 ]
  %268 = phi <4 x i32> [ <i32 undef, i32 undef, i32 undef, i32 0>, %256 ], [ %276, %266 ]
  %269 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %267
  %270 = bitcast i32* %269 to <4 x i32>*
  %271 = load <4 x i32>, <4 x i32>* %270, align 4
  %272 = getelementptr inbounds i32, i32* %269, i64 4
  %273 = bitcast i32* %272 to <4 x i32>*
  %274 = load <4 x i32>, <4 x i32>* %273, align 4
  %275 = lshr <4 x i32> %271, %259
  %276 = lshr <4 x i32> %274, %261
  %277 = shufflevector <4 x i32> %268, <4 x i32> %275, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %278 = shufflevector <4 x i32> %275, <4 x i32> %276, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %279 = shl <4 x i32> %271, %263
  %280 = shl <4 x i32> %274, %265
  %281 = add <4 x i32> %279, %277
  %282 = add <4 x i32> %280, %278
  %283 = and <4 x i32> %281, <i32 268435455, i32 268435455, i32 268435455, i32 268435455>
  %284 = and <4 x i32> %282, <i32 268435455, i32 268435455, i32 268435455, i32 268435455>
  %285 = bitcast i32* %269 to <4 x i32>*
  store <4 x i32> %283, <4 x i32>* %285, align 4
  %286 = bitcast i32* %272 to <4 x i32>*
  store <4 x i32> %284, <4 x i32>* %286, align 4
  %287 = add i64 %267, 8
  %288 = icmp eq i64 %287, %257
  br i1 %288, label %289, label %266, !llvm.loop !31

289:                                              ; preds = %266
  %290 = icmp eq i64 %257, %251
  %291 = extractelement <4 x i32> %276, i32 3
  %292 = extractelement <4 x i32> %276, i32 3
  br i1 %290, label %293, label %253

293:                                              ; preds = %296, %289
  %294 = phi i32 [ %292, %289 ], [ %301, %296 ]
  %295 = icmp eq i32 %294, 0
  br i1 %295, label %311, label %307

296:                                              ; preds = %253, %296
  %297 = phi i64 [ %305, %296 ], [ %254, %253 ]
  %298 = phi i32 [ %301, %296 ], [ %255, %253 ]
  %299 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %297
  %300 = load i32, i32* %299, align 4
  %301 = lshr i32 %300, %250
  %302 = shl i32 %300, %244
  %303 = add i32 %302, %298
  %304 = and i32 %303, 268435455
  store i32 %304, i32* %299, align 4
  %305 = add nuw nsw i64 %297, 1
  %306 = icmp eq i64 %305, %251
  br i1 %306, label %293, label %296, !llvm.loop !32

307:                                              ; preds = %293
  %308 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %251
  store i32 %294, i32* %308, align 4
  %309 = load i16, i16* %5, align 4
  %310 = add i16 %309, 1
  store i16 %310, i16* %5, align 4
  br label %311

311:                                              ; preds = %307, %293, %247, %235, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i16 @_ZN17double_conversion6Bignum21DivideModuloIntBignumERKS0_(%"class.double_conversion::Bignum"*, %"class.double_conversion::Bignum"* nocapture readonly dereferenceable(516)) local_unnamed_addr #4 align 2 {
  %3 = bitcast %"class.double_conversion::Bignum"* %0 to i8*
  %4 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 0
  %5 = load i16, i16* %4, align 4
  %6 = sext i16 %5 to i32
  %7 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 1
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i32
  %10 = add nsw i32 %9, %6
  %11 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %1, i64 0, i32 0
  %12 = load i16, i16* %11, align 4
  %13 = sext i16 %12 to i32
  %14 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %1, i64 0, i32 1
  %15 = load i16, i16* %14, align 2
  %16 = sext i16 %15 to i32
  %17 = add nsw i32 %16, %13
  %18 = icmp slt i32 %10, %17
  br i1 %18, label %328, label %19

19:                                               ; preds = %2
  %20 = icmp sgt i16 %8, %15
  br i1 %20, label %21, label %199

21:                                               ; preds = %19
  %22 = sub nsw i32 %9, %16
  %23 = add nsw i32 %22, %6
  %24 = icmp sgt i32 %23, 128
  br i1 %24, label %163, label %25

25:                                               ; preds = %21
  %26 = icmp sgt i16 %5, 0
  br i1 %26, label %27, label %164

27:                                               ; preds = %25
  %28 = sext i16 %5 to i64
  %29 = icmp ult i16 %5, 8
  br i1 %29, label %30, label %33

30:                                               ; preds = %161, %63, %33, %27
  %31 = phi i64 [ %28, %63 ], [ %28, %33 ], [ %28, %27 ], [ %84, %161 ]
  %32 = phi i32 [ %6, %63 ], [ %6, %33 ], [ %6, %27 ], [ %86, %161 ]
  br label %174

33:                                               ; preds = %27
  %34 = add nsw i64 %28, -1
  %35 = add nsw i32 %6, %9
  %36 = xor i32 %16, -1
  %37 = add nsw i32 %35, %36
  %38 = trunc i64 %34 to i32
  %39 = sub i32 %37, %38
  %40 = icmp sgt i32 %39, %37
  %41 = icmp ugt i64 %34, 4294967295
  %42 = or i1 %40, %41
  %43 = sext i32 %37 to i64
  %44 = shl nsw i64 %43, 2
  %45 = add nsw i64 %44, 4
  %46 = getelementptr i8, i8* %3, i64 %45
  %47 = ptrtoint i8* %46 to i64
  %48 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %34, i64 4)
  %49 = extractvalue { i64, i1 } %48, 0
  %50 = extractvalue { i64, i1 } %48, 1
  %51 = icmp ugt i64 %49, %47
  %52 = or i1 %51, %50
  %53 = or i1 %42, %52
  %54 = shl nsw i64 %28, 2
  %55 = getelementptr i8, i8* %3, i64 %54
  %56 = ptrtoint i8* %55 to i64
  %57 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %34, i64 4)
  %58 = extractvalue { i64, i1 } %57, 0
  %59 = extractvalue { i64, i1 } %57, 1
  %60 = icmp ugt i64 %58, %56
  %61 = or i1 %60, %59
  %62 = or i1 %53, %61
  br i1 %62, label %30, label %63

63:                                               ; preds = %33
  %64 = add nsw i32 %6, %9
  %65 = xor i32 %16, -1
  %66 = add nsw i32 %64, %65
  %67 = sext i32 %66 to i64
  %68 = shl nsw i64 %67, 2
  %69 = add nsw i64 %68, 8
  %70 = shl nsw i64 %28, 2
  %71 = sub nsw i64 %69, %70
  %72 = getelementptr i8, i8* %3, i64 %71
  %73 = add nsw i64 %68, 8
  %74 = getelementptr i8, i8* %3, i64 %73
  %75 = getelementptr %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 0
  %76 = bitcast i32* %75 to i8*
  %77 = add nsw i64 %70, 4
  %78 = getelementptr i8, i8* %3, i64 %77
  %79 = icmp ult i8* %72, %78
  %80 = icmp ugt i8* %74, %76
  %81 = and i1 %79, %80
  br i1 %81, label %30, label %82

82:                                               ; preds = %63
  %83 = and i64 %28, -8
  %84 = sub nsw i64 %28, %83
  %85 = trunc i64 %83 to i32
  %86 = sub i32 %6, %85
  %87 = add nsw i64 %83, -8
  %88 = lshr exact i64 %87, 3
  %89 = add nuw nsw i64 %88, 1
  %90 = and i64 %89, 1
  %91 = icmp eq i64 %87, 0
  br i1 %91, label %138, label %92

92:                                               ; preds = %82
  %93 = sub nuw nsw i64 %89, %90
  br label %94

94:                                               ; preds = %94, %92
  %95 = phi i64 [ 0, %92 ], [ %135, %94 ]
  %96 = phi i64 [ %93, %92 ], [ %136, %94 ]
  %97 = trunc i64 %95 to i32
  %98 = xor i64 %95, -1
  %99 = add i64 %98, %28
  %100 = xor i32 %97, -1
  %101 = add i32 %100, %6
  %102 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %99
  %103 = getelementptr inbounds i32, i32* %102, i64 -3
  %104 = bitcast i32* %103 to <4 x i32>*
  %105 = load <4 x i32>, <4 x i32>* %104, align 4, !alias.scope !33
  %106 = getelementptr inbounds i32, i32* %102, i64 -7
  %107 = bitcast i32* %106 to <4 x i32>*
  %108 = load <4 x i32>, <4 x i32>* %107, align 4, !alias.scope !33
  %109 = add nsw i32 %101, %22
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %110
  %112 = getelementptr inbounds i32, i32* %111, i64 -3
  %113 = bitcast i32* %112 to <4 x i32>*
  store <4 x i32> %105, <4 x i32>* %113, align 4, !alias.scope !36, !noalias !33
  %114 = getelementptr inbounds i32, i32* %111, i64 -7
  %115 = bitcast i32* %114 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %115, align 4, !alias.scope !36, !noalias !33
  %116 = trunc i64 %95 to i32
  %117 = sub nuw nsw i64 -9, %95
  %118 = add i64 %117, %28
  %119 = xor i32 %116, -9
  %120 = add i32 %119, %6
  %121 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %118
  %122 = getelementptr inbounds i32, i32* %121, i64 -3
  %123 = bitcast i32* %122 to <4 x i32>*
  %124 = load <4 x i32>, <4 x i32>* %123, align 4, !alias.scope !33
  %125 = getelementptr inbounds i32, i32* %121, i64 -7
  %126 = bitcast i32* %125 to <4 x i32>*
  %127 = load <4 x i32>, <4 x i32>* %126, align 4, !alias.scope !33
  %128 = add nsw i32 %120, %22
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %129
  %131 = getelementptr inbounds i32, i32* %130, i64 -3
  %132 = bitcast i32* %131 to <4 x i32>*
  store <4 x i32> %124, <4 x i32>* %132, align 4, !alias.scope !36, !noalias !33
  %133 = getelementptr inbounds i32, i32* %130, i64 -7
  %134 = bitcast i32* %133 to <4 x i32>*
  store <4 x i32> %127, <4 x i32>* %134, align 4, !alias.scope !36, !noalias !33
  %135 = add i64 %95, 16
  %136 = add i64 %96, -2
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %94, !llvm.loop !38

138:                                              ; preds = %94, %82
  %139 = phi i64 [ 0, %82 ], [ %135, %94 ]
  %140 = icmp eq i64 %90, 0
  br i1 %140, label %161, label %141

141:                                              ; preds = %138
  %142 = trunc i64 %139 to i32
  %143 = xor i64 %139, -1
  %144 = add i64 %143, %28
  %145 = xor i32 %142, -1
  %146 = add i32 %145, %6
  %147 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %144
  %148 = getelementptr inbounds i32, i32* %147, i64 -3
  %149 = bitcast i32* %148 to <4 x i32>*
  %150 = load <4 x i32>, <4 x i32>* %149, align 4, !alias.scope !33
  %151 = getelementptr inbounds i32, i32* %147, i64 -7
  %152 = bitcast i32* %151 to <4 x i32>*
  %153 = load <4 x i32>, <4 x i32>* %152, align 4, !alias.scope !33
  %154 = add nsw i32 %146, %22
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %155
  %157 = getelementptr inbounds i32, i32* %156, i64 -3
  %158 = bitcast i32* %157 to <4 x i32>*
  store <4 x i32> %150, <4 x i32>* %158, align 4, !alias.scope !36, !noalias !33
  %159 = getelementptr inbounds i32, i32* %156, i64 -7
  %160 = bitcast i32* %159 to <4 x i32>*
  store <4 x i32> %153, <4 x i32>* %160, align 4, !alias.scope !36, !noalias !33
  br label %161

161:                                              ; preds = %138, %141
  %162 = icmp eq i64 %83, %28
  br i1 %162, label %164, label %30

163:                                              ; preds = %21
  tail call void @abort() #10
  unreachable

164:                                              ; preds = %174, %161, %25
  %165 = icmp sgt i32 %22, 0
  br i1 %165, label %166, label %185

166:                                              ; preds = %164
  %167 = getelementptr %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 0
  %168 = bitcast i32* %167 to i8*
  %169 = xor i32 %16, -1
  %170 = add nsw i32 %169, %9
  %171 = zext i32 %170 to i64
  %172 = shl nuw nsw i64 %171, 2
  %173 = add nuw nsw i64 %172, 4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %168, i8 0, i64 %173, i1 false) #9
  br label %185

174:                                              ; preds = %30, %174
  %175 = phi i64 [ %177, %174 ], [ %31, %30 ]
  %176 = phi i32 [ %178, %174 ], [ %32, %30 ]
  %177 = add nsw i64 %175, -1
  %178 = add nsw i32 %176, -1
  %179 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %177
  %180 = load i32, i32* %179, align 4
  %181 = add nsw i32 %178, %22
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %182
  store i32 %180, i32* %183, align 4
  %184 = icmp sgt i64 %177, 0
  br i1 %184, label %174, label %164, !llvm.loop !39

185:                                              ; preds = %166, %164
  %186 = load i16, i16* %4, align 4
  %187 = trunc i32 %22 to i16
  %188 = add i16 %186, %187
  store i16 %188, i16* %4, align 4
  %189 = load i16, i16* %7, align 2
  %190 = sub i16 %189, %187
  store i16 %190, i16* %7, align 2
  %191 = load i16, i16* %11, align 4
  %192 = load i16, i16* %14, align 2
  %193 = sext i16 %188 to i32
  %194 = sext i16 %190 to i32
  %195 = add nsw i32 %194, %193
  %196 = sext i16 %191 to i32
  %197 = sext i16 %192 to i32
  %198 = add nsw i32 %197, %196
  br label %199

199:                                              ; preds = %19, %185
  %200 = phi i32 [ %17, %19 ], [ %198, %185 ]
  %201 = phi i32 [ %13, %19 ], [ %196, %185 ]
  %202 = phi i32 [ %10, %19 ], [ %195, %185 ]
  %203 = phi i32 [ %6, %19 ], [ %193, %185 ]
  %204 = phi i16 [ %12, %19 ], [ %191, %185 ]
  %205 = icmp sgt i32 %202, %200
  %206 = add nsw i32 %203, -1
  %207 = sext i32 %206 to i64
  %208 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %207
  %209 = load i32, i32* %208, align 4
  br i1 %205, label %210, label %233

210:                                              ; preds = %199, %210
  %211 = phi i32 [ %229, %210 ], [ %209, %199 ]
  %212 = phi i32 [ %214, %210 ], [ 0, %199 ]
  %213 = add i32 %211, %212
  tail call void @_ZN17double_conversion6Bignum13SubtractTimesERKS0_i(%"class.double_conversion::Bignum"* %0, %"class.double_conversion::Bignum"* dereferenceable(516) %1, i32 %211)
  %214 = and i32 %213, 65535
  %215 = load i16, i16* %4, align 4
  %216 = sext i16 %215 to i32
  %217 = load i16, i16* %7, align 2
  %218 = sext i16 %217 to i32
  %219 = add nsw i32 %218, %216
  %220 = load i16, i16* %11, align 4
  %221 = sext i16 %220 to i32
  %222 = load i16, i16* %14, align 2
  %223 = sext i16 %222 to i32
  %224 = add nsw i32 %223, %221
  %225 = icmp sgt i32 %219, %224
  %226 = add nsw i32 %216, -1
  %227 = sext i32 %226 to i64
  %228 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %227
  %229 = load i32, i32* %228, align 4
  br i1 %225, label %210, label %230

230:                                              ; preds = %210
  %231 = sext i16 %220 to i32
  %232 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %227
  br label %233

233:                                              ; preds = %230, %199
  %234 = phi i32 [ 0, %199 ], [ %214, %230 ]
  %235 = phi i16 [ %204, %199 ], [ %220, %230 ]
  %236 = phi i32 [ %201, %199 ], [ %231, %230 ]
  %237 = phi i32* [ %208, %199 ], [ %232, %230 ]
  %238 = phi i32 [ %209, %199 ], [ %229, %230 ]
  %239 = add nsw i32 %236, -1
  %240 = sext i32 %239 to i64
  %241 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %1, i64 0, i32 2, i64 %240
  %242 = load i32, i32* %241, align 4
  %243 = icmp eq i16 %235, 1
  br i1 %243, label %244, label %269

244:                                              ; preds = %233
  %245 = udiv i32 %238, %242
  %246 = mul i32 %245, %242
  %247 = sub i32 %238, %246
  store i32 %247, i32* %237, align 4
  %248 = add i32 %245, %234
  %249 = trunc i32 %248 to i16
  %250 = load i16, i16* %4, align 4
  %251 = icmp sgt i16 %250, 0
  br i1 %251, label %252, label %265

252:                                              ; preds = %244
  %253 = sext i16 %250 to i64
  br label %254

254:                                              ; preds = %260, %252
  %255 = phi i64 [ %253, %252 ], [ %256, %260 ]
  %256 = add nsw i64 %255, -1
  %257 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %256
  %258 = load i32, i32* %257, align 4
  %259 = icmp eq i32 %258, 0
  br i1 %259, label %260, label %328

260:                                              ; preds = %254
  %261 = trunc i64 %256 to i16
  store i16 %261, i16* %4, align 4
  %262 = icmp sgt i64 %256, 0
  br i1 %262, label %254, label %263

263:                                              ; preds = %260
  %264 = trunc i64 %256 to i16
  br label %265

265:                                              ; preds = %263, %244
  %266 = phi i16 [ %250, %244 ], [ %264, %263 ]
  %267 = icmp eq i16 %266, 0
  br i1 %267, label %268, label %328

268:                                              ; preds = %265
  store i16 0, i16* %7, align 2
  br label %328

269:                                              ; preds = %233
  %270 = add i32 %242, 1
  %271 = udiv i32 %238, %270
  %272 = add i32 %271, %234
  %273 = trunc i32 %272 to i16
  tail call void @_ZN17double_conversion6Bignum13SubtractTimesERKS0_i(%"class.double_conversion::Bignum"* %0, %"class.double_conversion::Bignum"* dereferenceable(516) %1, i32 %271)
  %274 = add nsw i32 %271, 1
  %275 = mul i32 %274, %242
  %276 = icmp ugt i32 %275, %238
  br i1 %276, label %328, label %277

277:                                              ; preds = %269, %326
  %278 = phi i16 [ %327, %326 ], [ %273, %269 ]
  %279 = load i16, i16* %11, align 4
  %280 = sext i16 %279 to i32
  %281 = load i16, i16* %14, align 2
  %282 = sext i16 %281 to i32
  %283 = add nsw i32 %282, %280
  %284 = load i16, i16* %4, align 4
  %285 = sext i16 %284 to i32
  %286 = load i16, i16* %7, align 2
  %287 = sext i16 %286 to i32
  %288 = add nsw i32 %287, %285
  %289 = icmp slt i32 %283, %288
  br i1 %289, label %326, label %290

290:                                              ; preds = %277
  %291 = icmp sgt i32 %283, %288
  br i1 %291, label %328, label %292

292:                                              ; preds = %290
  %293 = icmp slt i16 %286, %281
  %294 = select i1 %293, i16 %286, i16 %281
  %295 = sext i32 %283 to i64
  %296 = sext i16 %286 to i64
  %297 = sext i16 %281 to i64
  %298 = sext i16 %294 to i64
  %299 = sext i32 %288 to i64
  br label %300

300:                                              ; preds = %324, %292
  %301 = phi i64 [ %295, %292 ], [ %302, %324 ]
  %302 = add nsw i64 %301, -1
  %303 = icmp sgt i64 %301, %298
  br i1 %303, label %304, label %326

304:                                              ; preds = %300
  %305 = icmp sgt i64 %301, %295
  %306 = icmp sle i64 %301, %297
  %307 = or i1 %306, %305
  br i1 %307, label %312, label %308

308:                                              ; preds = %304
  %309 = sub nsw i64 %302, %297
  %310 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %1, i64 0, i32 2, i64 %309
  %311 = load i32, i32* %310, align 4
  br label %312

312:                                              ; preds = %308, %304
  %313 = phi i32 [ %311, %308 ], [ 0, %304 ]
  %314 = icmp sgt i64 %301, %299
  %315 = icmp sle i64 %301, %296
  %316 = or i1 %315, %314
  br i1 %316, label %321, label %317

317:                                              ; preds = %312
  %318 = sub nsw i64 %302, %296
  %319 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %318
  %320 = load i32, i32* %319, align 4
  br label %321

321:                                              ; preds = %317, %312
  %322 = phi i32 [ %320, %317 ], [ 0, %312 ]
  %323 = icmp ult i32 %313, %322
  br i1 %323, label %326, label %324

324:                                              ; preds = %321
  %325 = icmp ugt i32 %313, %322
  br i1 %325, label %328, label %300

326:                                              ; preds = %321, %300, %277
  tail call void @_ZN17double_conversion6Bignum14SubtractBignumERKS0_(%"class.double_conversion::Bignum"* %0, %"class.double_conversion::Bignum"* dereferenceable(516) %1)
  %327 = add i16 %278, 1
  br label %277

328:                                              ; preds = %290, %324, %254, %268, %265, %269, %2
  %329 = phi i16 [ 0, %2 ], [ %273, %269 ], [ %249, %265 ], [ %249, %268 ], [ %249, %254 ], [ %278, %324 ], [ %278, %290 ]
  ret i16 %329
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17double_conversion6Bignum13SubtractTimesERKS0_i(%"class.double_conversion::Bignum"* nocapture, %"class.double_conversion::Bignum"* nocapture readonly dereferenceable(516), i32) local_unnamed_addr #4 align 2 {
  %4 = icmp slt i32 %2, 3
  br i1 %4, label %5, label %11

5:                                                ; preds = %3
  %6 = icmp sgt i32 %2, 0
  br i1 %6, label %7, label %98

7:                                                ; preds = %5, %7
  %8 = phi i32 [ %9, %7 ], [ 0, %5 ]
  tail call void @_ZN17double_conversion6Bignum14SubtractBignumERKS0_(%"class.double_conversion::Bignum"* %0, %"class.double_conversion::Bignum"* dereferenceable(516) %1)
  %9 = add nuw nsw i32 %8, 1
  %10 = icmp eq i32 %9, %2
  br i1 %10, label %98, label %7

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %1, i64 0, i32 1
  %13 = load i16, i16* %12, align 2
  %14 = sext i16 %13 to i32
  %15 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 1
  %16 = load i16, i16* %15, align 2
  %17 = sext i16 %16 to i32
  %18 = sub nsw i32 %14, %17
  %19 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %1, i64 0, i32 0
  %20 = load i16, i16* %19, align 4
  %21 = icmp sgt i16 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %11
  %23 = sext i32 %2 to i64
  br label %37

24:                                               ; preds = %37, %11
  %25 = phi i16 [ %20, %11 ], [ %61, %37 ]
  %26 = phi i32 [ 0, %11 ], [ %58, %37 ]
  %27 = sext i16 %25 to i32
  %28 = add nsw i32 %18, %27
  %29 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 0
  %30 = load i16, i16* %29, align 4
  %31 = sext i16 %30 to i32
  %32 = icmp slt i32 %28, %31
  br i1 %32, label %33, label %78

33:                                               ; preds = %24
  %34 = add nsw i32 %27, %14
  %35 = sub nsw i32 %34, %17
  %36 = sext i32 %35 to i64
  br label %64

37:                                               ; preds = %22, %37
  %38 = phi i64 [ 0, %22 ], [ %59, %37 ]
  %39 = phi i32 [ 0, %22 ], [ %58, %37 ]
  %40 = phi i32 [ 0, %22 ], [ %60, %37 ]
  %41 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %1, i64 0, i32 2, i64 %38
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  %44 = mul nsw i64 %43, %23
  %45 = zext i32 %39 to i64
  %46 = add nsw i64 %44, %45
  %47 = add nsw i32 %40, %18
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %48
  %50 = load i32, i32* %49, align 4
  %51 = trunc i64 %46 to i32
  %52 = and i32 %51, 268435455
  %53 = sub i32 %50, %52
  %54 = and i32 %53, 268435455
  store i32 %54, i32* %49, align 4
  %55 = lshr i32 %53, 31
  %56 = lshr i64 %46, 28
  %57 = trunc i64 %56 to i32
  %58 = add i32 %55, %57
  %59 = add nuw nsw i64 %38, 1
  %60 = add nuw nsw i32 %40, 1
  %61 = load i16, i16* %19, align 4
  %62 = sext i16 %61 to i64
  %63 = icmp slt i64 %59, %62
  br i1 %63, label %37, label %24

64:                                               ; preds = %33, %68
  %65 = phi i64 [ %36, %33 ], [ %74, %68 ]
  %66 = phi i32 [ %26, %33 ], [ %73, %68 ]
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %98, label %68

68:                                               ; preds = %64
  %69 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %65
  %70 = load i32, i32* %69, align 4
  %71 = sub i32 %70, %66
  %72 = and i32 %71, 268435455
  store i32 %72, i32* %69, align 4
  %73 = lshr i32 %71, 31
  %74 = add nsw i64 %65, 1
  %75 = load i16, i16* %29, align 4
  %76 = sext i16 %75 to i64
  %77 = icmp slt i64 %74, %76
  br i1 %77, label %64, label %78

78:                                               ; preds = %68, %24
  %79 = phi i16 [ %30, %24 ], [ %75, %68 ]
  %80 = icmp sgt i16 %79, 0
  br i1 %80, label %81, label %94

81:                                               ; preds = %78
  %82 = sext i16 %79 to i64
  br label %83

83:                                               ; preds = %89, %81
  %84 = phi i64 [ %82, %81 ], [ %85, %89 ]
  %85 = add nsw i64 %84, -1
  %86 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %85
  %87 = load i32, i32* %86, align 4
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %98

89:                                               ; preds = %83
  %90 = trunc i64 %85 to i16
  store i16 %90, i16* %29, align 4
  %91 = icmp sgt i64 %85, 0
  br i1 %91, label %83, label %92

92:                                               ; preds = %89
  %93 = trunc i64 %85 to i16
  br label %94

94:                                               ; preds = %92, %78
  %95 = phi i16 [ %79, %78 ], [ %93, %92 ]
  %96 = icmp eq i16 %95, 0
  br i1 %96, label %97, label %98

97:                                               ; preds = %94
  store i16 0, i16* %15, align 2
  br label %98

98:                                               ; preds = %64, %83, %7, %5, %97, %94
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZNK17double_conversion6Bignum11ToHexStringEPci(%"class.double_conversion::Bignum"* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 0
  %5 = load i16, i16* %4, align 4
  %6 = icmp eq i16 %5, 0
  br i1 %6, label %7, label %11

7:                                                ; preds = %3
  %8 = icmp slt i32 %2, 2
  br i1 %8, label %151, label %9

9:                                                ; preds = %7
  store i8 48, i8* %1, align 1
  %10 = getelementptr inbounds i8, i8* %1, i64 1
  store i8 0, i8* %10, align 1
  br label %151

11:                                               ; preds = %3
  %12 = sext i16 %5 to i32
  %13 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 1
  %14 = load i16, i16* %13, align 2
  %15 = sext i16 %14 to i32
  %16 = add nsw i32 %15, %12
  %17 = mul nsw i32 %16, 7
  %18 = add nsw i32 %17, -7
  %19 = add nsw i32 %12, -1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %20
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %30, label %24

24:                                               ; preds = %11, %24
  %25 = phi i32 [ %28, %24 ], [ 0, %11 ]
  %26 = phi i32 [ %27, %24 ], [ %22, %11 ]
  %27 = lshr i32 %26, 4
  %28 = add nuw nsw i32 %25, 1
  %29 = icmp eq i32 %27, 0
  br i1 %29, label %30, label %24

30:                                               ; preds = %24, %11
  %31 = phi i32 [ 0, %11 ], [ %28, %24 ]
  %32 = add nsw i32 %18, %31
  %33 = icmp slt i32 %32, %2
  br i1 %33, label %34, label %151

34:                                               ; preds = %30
  %35 = add nsw i32 %32, -1
  %36 = sext i32 %32 to i64
  %37 = getelementptr inbounds i8, i8* %1, i64 %36
  store i8 0, i8* %37, align 1
  %38 = load i16, i16* %13, align 2
  %39 = icmp sgt i16 %38, 0
  br i1 %39, label %40, label %57

40:                                               ; preds = %34
  %41 = getelementptr i8, i8* %1, i64 -6
  %42 = add i32 %31, %17
  %43 = add i32 %42, -8
  %44 = sext i32 %43 to i64
  br label %45

45:                                               ; preds = %40, %45
  %46 = phi i64 [ %44, %40 ], [ %53, %45 ]
  %47 = phi i32 [ 0, %40 ], [ %49, %45 ]
  %48 = getelementptr i8, i8* %41, i64 %46
  call void @llvm.memset.p0i8.i64(i8* align 1 %48, i8 48, i64 7, i1 false)
  %49 = add nuw nsw i32 %47, 1
  %50 = load i16, i16* %13, align 2
  %51 = sext i16 %50 to i32
  %52 = icmp slt i32 %49, %51
  %53 = add nsw i64 %46, -7
  br i1 %52, label %45, label %54

54:                                               ; preds = %45
  %55 = trunc i64 %46 to i32
  %56 = add i32 %55, -7
  br label %57

57:                                               ; preds = %54, %34
  %58 = phi i32 [ %35, %34 ], [ %56, %54 ]
  %59 = load i16, i16* %4, align 4
  %60 = sext i16 %59 to i32
  %61 = add nsw i32 %60, -1
  %62 = icmp sgt i32 %61, 0
  br i1 %62, label %73, label %63

63:                                               ; preds = %57
  %64 = sext i32 %61 to i64
  br label %65

65:                                               ; preds = %73, %63
  %66 = phi i64 [ %64, %63 ], [ %137, %73 ]
  %67 = phi i32 [ %58, %63 ], [ %132, %73 ]
  %68 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %66
  %69 = load i32, i32* %68, align 4
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %151, label %71

71:                                               ; preds = %65
  %72 = sext i32 %67 to i64
  br label %139

73:                                               ; preds = %57, %73
  %74 = phi i64 [ %134, %73 ], [ 0, %57 ]
  %75 = phi i32 [ %132, %73 ], [ %58, %57 ]
  %76 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %74
  %77 = load i32, i32* %76, align 4
  %78 = sext i32 %75 to i64
  %79 = and i32 %77, 15
  %80 = icmp ult i32 %79, 10
  %81 = trunc i32 %79 to i8
  %82 = select i1 %80, i8 48, i8 55
  %83 = add nuw nsw i8 %82, %81
  %84 = add nsw i64 %78, -1
  %85 = getelementptr inbounds i8, i8* %1, i64 %78
  store i8 %83, i8* %85, align 1
  %86 = lshr i32 %77, 4
  %87 = and i32 %86, 15
  %88 = icmp ult i32 %87, 10
  %89 = trunc i32 %87 to i8
  %90 = select i1 %88, i8 48, i8 55
  %91 = add nuw nsw i8 %90, %89
  %92 = add nsw i64 %78, -2
  %93 = getelementptr inbounds i8, i8* %1, i64 %84
  store i8 %91, i8* %93, align 1
  %94 = lshr i32 %77, 8
  %95 = and i32 %94, 15
  %96 = icmp ult i32 %95, 10
  %97 = trunc i32 %95 to i8
  %98 = select i1 %96, i8 48, i8 55
  %99 = add nuw nsw i8 %98, %97
  %100 = add nsw i64 %78, -3
  %101 = getelementptr inbounds i8, i8* %1, i64 %92
  store i8 %99, i8* %101, align 1
  %102 = lshr i32 %77, 12
  %103 = and i32 %102, 15
  %104 = icmp ult i32 %103, 10
  %105 = trunc i32 %103 to i8
  %106 = select i1 %104, i8 48, i8 55
  %107 = add nuw nsw i8 %106, %105
  %108 = add nsw i64 %78, -4
  %109 = getelementptr inbounds i8, i8* %1, i64 %100
  store i8 %107, i8* %109, align 1
  %110 = lshr i32 %77, 16
  %111 = and i32 %110, 15
  %112 = icmp ult i32 %111, 10
  %113 = trunc i32 %111 to i8
  %114 = select i1 %112, i8 48, i8 55
  %115 = add nuw nsw i8 %114, %113
  %116 = add nsw i64 %78, -5
  %117 = getelementptr inbounds i8, i8* %1, i64 %108
  store i8 %115, i8* %117, align 1
  %118 = lshr i32 %77, 20
  %119 = and i32 %118, 15
  %120 = icmp ult i32 %119, 10
  %121 = trunc i32 %119 to i8
  %122 = select i1 %120, i8 48, i8 55
  %123 = add nuw nsw i8 %122, %121
  %124 = add nsw i64 %78, -6
  %125 = getelementptr inbounds i8, i8* %1, i64 %116
  store i8 %123, i8* %125, align 1
  %126 = lshr i32 %77, 24
  %127 = and i32 %126, 15
  %128 = icmp ult i32 %127, 10
  %129 = trunc i32 %127 to i8
  %130 = select i1 %128, i8 48, i8 55
  %131 = add nuw nsw i8 %130, %129
  %132 = add i32 %75, -7
  %133 = getelementptr inbounds i8, i8* %1, i64 %124
  store i8 %131, i8* %133, align 1
  %134 = add nuw nsw i64 %74, 1
  %135 = load i16, i16* %4, align 4
  %136 = sext i16 %135 to i64
  %137 = add nsw i64 %136, -1
  %138 = icmp slt i64 %134, %137
  br i1 %138, label %73, label %65

139:                                              ; preds = %71, %139
  %140 = phi i64 [ %72, %71 ], [ %147, %139 ]
  %141 = phi i32 [ %69, %71 ], [ %149, %139 ]
  %142 = and i32 %141, 15
  %143 = icmp ult i32 %142, 10
  %144 = trunc i32 %142 to i8
  %145 = select i1 %143, i8 48, i8 55
  %146 = add nuw nsw i8 %145, %144
  %147 = add nsw i64 %140, -1
  %148 = getelementptr inbounds i8, i8* %1, i64 %140
  store i8 %146, i8* %148, align 1
  %149 = lshr i32 %141, 4
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %151, label %139

151:                                              ; preds = %139, %65, %30, %7, %9
  %152 = phi i1 [ true, %9 ], [ false, %7 ], [ false, %30 ], [ true, %65 ], [ true, %139 ]
  ret i1 %152
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK17double_conversion6Bignum11BigitOrZeroEi(%"class.double_conversion::Bignum"* nocapture readonly, i32) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 0
  %4 = load i16, i16* %3, align 4
  %5 = sext i16 %4 to i32
  %6 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 1
  %7 = load i16, i16* %6, align 2
  %8 = sext i16 %7 to i32
  %9 = add nsw i32 %8, %5
  %10 = icmp sle i32 %9, %1
  %11 = icmp sgt i32 %8, %1
  %12 = or i1 %11, %10
  br i1 %12, label %18, label %13

13:                                               ; preds = %2
  %14 = sub nsw i32 %1, %8
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %15
  %17 = load i32, i32* %16, align 4
  br label %18

18:                                               ; preds = %2, %13
  %19 = phi i32 [ %17, %13 ], [ 0, %2 ]
  ret i32 %19
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN17double_conversion6Bignum7CompareERKS0_S2_(%"class.double_conversion::Bignum"* nocapture readonly dereferenceable(516), %"class.double_conversion::Bignum"* nocapture readonly dereferenceable(516)) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 0
  %4 = load i16, i16* %3, align 4
  %5 = sext i16 %4 to i32
  %6 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 1
  %7 = load i16, i16* %6, align 2
  %8 = sext i16 %7 to i32
  %9 = add nsw i32 %8, %5
  %10 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %1, i64 0, i32 0
  %11 = load i16, i16* %10, align 4
  %12 = sext i16 %11 to i32
  %13 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %1, i64 0, i32 1
  %14 = load i16, i16* %13, align 2
  %15 = sext i16 %14 to i32
  %16 = add nsw i32 %15, %12
  %17 = icmp slt i32 %9, %16
  br i1 %17, label %54, label %18

18:                                               ; preds = %2
  %19 = icmp sgt i32 %9, %16
  br i1 %19, label %54, label %20

20:                                               ; preds = %18
  %21 = icmp slt i16 %14, %7
  %22 = select i1 %21, i16 %14, i16 %7
  %23 = sext i32 %9 to i64
  %24 = sext i16 %14 to i64
  %25 = sext i16 %7 to i64
  %26 = sext i16 %22 to i64
  %27 = sext i32 %16 to i64
  br label %28

28:                                               ; preds = %20, %52
  %29 = phi i64 [ %23, %20 ], [ %30, %52 ]
  %30 = add nsw i64 %29, -1
  %31 = icmp sgt i64 %29, %26
  br i1 %31, label %32, label %54

32:                                               ; preds = %28
  %33 = icmp sgt i64 %29, %23
  %34 = icmp sle i64 %29, %25
  %35 = or i1 %34, %33
  br i1 %35, label %40, label %36

36:                                               ; preds = %32
  %37 = sub nsw i64 %30, %25
  %38 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 2, i64 %37
  %39 = load i32, i32* %38, align 4
  br label %40

40:                                               ; preds = %32, %36
  %41 = phi i32 [ %39, %36 ], [ 0, %32 ]
  %42 = icmp sgt i64 %29, %27
  %43 = icmp sle i64 %29, %24
  %44 = or i1 %43, %42
  br i1 %44, label %49, label %45

45:                                               ; preds = %40
  %46 = sub nsw i64 %30, %24
  %47 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %1, i64 0, i32 2, i64 %46
  %48 = load i32, i32* %47, align 4
  br label %49

49:                                               ; preds = %40, %45
  %50 = phi i32 [ %48, %45 ], [ 0, %40 ]
  %51 = icmp ult i32 %41, %50
  br i1 %51, label %54, label %52

52:                                               ; preds = %49
  %53 = icmp ugt i32 %41, %50
  br i1 %53, label %54, label %28

54:                                               ; preds = %52, %28, %49, %2, %18
  %55 = phi i32 [ -1, %2 ], [ 1, %18 ], [ 1, %52 ], [ 0, %28 ], [ -1, %49 ]
  ret i32 %55
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_ZN17double_conversion6Bignum11PlusCompareERKS0_S2_S2_(%"class.double_conversion::Bignum"* nocapture readonly dereferenceable(516), %"class.double_conversion::Bignum"* nocapture readonly dereferenceable(516), %"class.double_conversion::Bignum"* nocapture readonly dereferenceable(516)) local_unnamed_addr #7 align 2 {
  %4 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 0
  %5 = load i16, i16* %4, align 4
  %6 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %0, i64 0, i32 1
  %7 = load i16, i16* %6, align 2
  br label %8

8:                                                ; preds = %8, %3
  %9 = phi i16 [ %7, %3 ], [ %20, %8 ]
  %10 = phi i16 [ %5, %3 ], [ %17, %8 ]
  %11 = phi %"class.double_conversion::Bignum"* [ %0, %3 ], [ %12, %8 ]
  %12 = phi %"class.double_conversion::Bignum"* [ %1, %3 ], [ %11, %8 ]
  %13 = sext i16 %10 to i32
  %14 = sext i16 %9 to i32
  %15 = add nsw i32 %14, %13
  %16 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %12, i64 0, i32 0
  %17 = load i16, i16* %16, align 4
  %18 = sext i16 %17 to i32
  %19 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %12, i64 0, i32 1
  %20 = load i16, i16* %19, align 2
  %21 = sext i16 %20 to i32
  %22 = add nsw i32 %21, %18
  %23 = icmp slt i32 %15, %22
  br i1 %23, label %8, label %24

24:                                               ; preds = %8
  %25 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %11, i64 0, i32 1
  %26 = add nsw i32 %15, 1
  %27 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %2, i64 0, i32 0
  %28 = load i16, i16* %27, align 4
  %29 = sext i16 %28 to i32
  %30 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %2, i64 0, i32 1
  %31 = load i16, i16* %30, align 2
  %32 = sext i16 %31 to i32
  %33 = add nsw i32 %32, %29
  %34 = icmp slt i32 %26, %33
  br i1 %34, label %97, label %35

35:                                               ; preds = %24
  %36 = icmp sgt i32 %15, %33
  br i1 %36, label %97, label %37

37:                                               ; preds = %35
  %38 = icmp sle i32 %22, %14
  %39 = icmp slt i32 %15, %33
  %40 = and i1 %38, %39
  br i1 %40, label %97, label %41

41:                                               ; preds = %37
  %42 = icmp slt i16 %20, %9
  %43 = load i16, i16* %25, align 2
  %44 = select i1 %42, i16 %20, i16 %43
  %45 = icmp slt i16 %31, %44
  %46 = select i1 %45, i16 %31, i16 %44
  %47 = sext i32 %33 to i64
  %48 = sext i16 %20 to i64
  %49 = sext i16 %9 to i64
  %50 = sext i16 %31 to i64
  %51 = sext i16 %46 to i64
  %52 = sext i32 %15 to i64
  %53 = sext i32 %22 to i64
  br label %54

54:                                               ; preds = %90, %41
  %55 = phi i64 [ %57, %90 ], [ %47, %41 ]
  %56 = phi i32 [ %93, %90 ], [ 0, %41 ]
  %57 = add nsw i64 %55, -1
  %58 = icmp sgt i64 %55, %51
  br i1 %58, label %59, label %94

59:                                               ; preds = %54
  %60 = icmp sgt i64 %55, %52
  %61 = icmp sle i64 %55, %49
  %62 = or i1 %61, %60
  br i1 %62, label %67, label %63

63:                                               ; preds = %59
  %64 = sub nsw i64 %57, %49
  %65 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %11, i64 0, i32 2, i64 %64
  %66 = load i32, i32* %65, align 4
  br label %67

67:                                               ; preds = %59, %63
  %68 = phi i32 [ %66, %63 ], [ 0, %59 ]
  %69 = icmp sgt i64 %55, %53
  %70 = icmp sle i64 %55, %48
  %71 = or i1 %70, %69
  br i1 %71, label %76, label %72

72:                                               ; preds = %67
  %73 = sub nsw i64 %57, %48
  %74 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %12, i64 0, i32 2, i64 %73
  %75 = load i32, i32* %74, align 4
  br label %76

76:                                               ; preds = %67, %72
  %77 = phi i32 [ %75, %72 ], [ 0, %67 ]
  %78 = icmp sgt i64 %55, %47
  %79 = icmp sle i64 %55, %50
  %80 = or i1 %79, %78
  br i1 %80, label %85, label %81

81:                                               ; preds = %76
  %82 = sub nsw i64 %57, %50
  %83 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %2, i64 0, i32 2, i64 %82
  %84 = load i32, i32* %83, align 4
  br label %85

85:                                               ; preds = %76, %81
  %86 = phi i32 [ %84, %81 ], [ 0, %76 ]
  %87 = add i32 %77, %68
  %88 = add i32 %86, %56
  %89 = icmp ult i32 %88, %87
  br i1 %89, label %97, label %90

90:                                               ; preds = %85
  %91 = sub i32 %88, %87
  %92 = icmp ugt i32 %91, 1
  %93 = shl i32 %91, 28
  br i1 %92, label %97, label %54

94:                                               ; preds = %54
  %95 = icmp ne i32 %56, 0
  %96 = sext i1 %95 to i32
  br label %97

97:                                               ; preds = %85, %90, %37, %94, %35, %24
  %98 = phi i32 [ -1, %24 ], [ 1, %35 ], [ %96, %94 ], [ -1, %37 ], [ -1, %90 ], [ 1, %85 ]
  ret i32 %98
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #8

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = !{!7}
!7 = distinct !{!7, !8}
!8 = distinct !{!8, !"LVerDomain"}
!9 = !{!10}
!10 = distinct !{!10, !8}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !3}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !3}
!19 = distinct !{!19, !3}
!20 = !{!21}
!21 = distinct !{!21, !22}
!22 = distinct !{!22, !"LVerDomain"}
!23 = !{!24}
!24 = distinct !{!24, !22}
!25 = distinct !{!25, !3}
!26 = distinct !{!26, !3}
!27 = distinct !{!27, !3}
!28 = distinct !{!28, !5, !3}
!29 = distinct !{!29, !3}
!30 = distinct !{!30, !5, !3}
!31 = distinct !{!31, !3}
!32 = distinct !{!32, !5, !3}
!33 = !{!34}
!34 = distinct !{!34, !35}
!35 = distinct !{!35, !"LVerDomain"}
!36 = !{!37}
!37 = distinct !{!37, !35}
!38 = distinct !{!38, !3}
!39 = distinct !{!39, !3}
