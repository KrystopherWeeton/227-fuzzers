; ModuleID = '../../components/viz/common/frame_sinks/copy_output_util.cc'
source_filename = "../../components/viz/common/frame_sinks/copy_output_util.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.viz::copy_output::RenderPassGeometry" = type { %"class.gfx::Rect", %"class.gfx::Rect", %"class.gfx::Rect", %"class.gfx::Vector2d" }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.gfx::Vector2d" = type { i32, i32 }

@_ZN3viz11copy_output18RenderPassGeometryC1Ev = hidden unnamed_addr alias void (%"struct.viz::copy_output::RenderPassGeometry"*), void (%"struct.viz::copy_output::RenderPassGeometry"*)* @_ZN3viz11copy_output18RenderPassGeometryC2Ev
@_ZN3viz11copy_output18RenderPassGeometryD1Ev = hidden unnamed_addr alias void (%"struct.viz::copy_output::RenderPassGeometry"*), void (%"struct.viz::copy_output::RenderPassGeometry"*)* @_ZN3viz11copy_output18RenderPassGeometryD2Ev

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZN3viz11copy_output17ComputeResultRectERKN3gfx4RectERKNS1_8Vector2dES7_(%"class.gfx::Rect"* nocapture readonly dereferenceable(16), %"class.gfx::Vector2d"* nocapture readonly dereferenceable(8), %"class.gfx::Vector2d"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.gfx::Vector2d", %"class.gfx::Vector2d"* %2, i64 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.gfx::Vector2d", %"class.gfx::Vector2d"* %1, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = icmp slt i32 %5, 0
  br i1 %10, label %11, label %26

11:                                               ; preds = %3
  %12 = sub nsw i32 0, %5
  %13 = sext i32 %12 to i64
  %14 = sext i32 %7 to i64
  %15 = mul nsw i64 %14, %13
  %16 = icmp sgt i64 %15, 0
  br i1 %16, label %17, label %21

17:                                               ; preds = %11
  %18 = add nsw i32 %9, -1
  %19 = sext i32 %18 to i64
  %20 = add nsw i64 %15, %19
  br label %21

21:                                               ; preds = %17, %11
  %22 = phi i64 [ %20, %17 ], [ %15, %11 ]
  %23 = sext i32 %9 to i64
  %24 = sdiv i64 %22, %23
  %25 = sub nsw i64 0, %24
  br label %32

26:                                               ; preds = %3
  %27 = sext i32 %5 to i64
  %28 = sext i32 %7 to i64
  %29 = mul nsw i64 %28, %27
  %30 = sext i32 %9 to i64
  %31 = sdiv i64 %29, %30
  br label %32

32:                                               ; preds = %21, %26
  %33 = phi i64 [ %25, %21 ], [ %31, %26 ]
  %34 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds %"class.gfx::Vector2d", %"class.gfx::Vector2d"* %2, i64 0, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds %"class.gfx::Vector2d", %"class.gfx::Vector2d"* %1, i64 0, i32 1
  %39 = load i32, i32* %38, align 4
  %40 = icmp slt i32 %35, 0
  br i1 %40, label %41, label %56

41:                                               ; preds = %32
  %42 = sub nsw i32 0, %35
  %43 = sext i32 %42 to i64
  %44 = sext i32 %37 to i64
  %45 = mul nsw i64 %44, %43
  %46 = icmp sgt i64 %45, 0
  br i1 %46, label %47, label %51

47:                                               ; preds = %41
  %48 = add nsw i32 %39, -1
  %49 = sext i32 %48 to i64
  %50 = add nsw i64 %45, %49
  br label %51

51:                                               ; preds = %47, %41
  %52 = phi i64 [ %50, %47 ], [ %45, %41 ]
  %53 = sext i32 %39 to i64
  %54 = sdiv i64 %52, %53
  %55 = sub nsw i64 0, %54
  br label %62

56:                                               ; preds = %32
  %57 = sext i32 %35 to i64
  %58 = sext i32 %37 to i64
  %59 = mul nsw i64 %58, %57
  %60 = sext i32 %39 to i64
  %61 = sdiv i64 %59, %60
  br label %62

62:                                               ; preds = %51, %56
  %63 = phi i64 [ %55, %51 ], [ %61, %56 ]
  %64 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 0
  %65 = load i32, i32* %64, align 4
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %82, label %67

67:                                               ; preds = %62
  %68 = add nsw i32 %65, %5
  %69 = sext i32 %68 to i64
  %70 = sext i32 %7 to i64
  %71 = mul nsw i64 %69, %70
  %72 = icmp sgt i64 %71, 0
  br i1 %72, label %73, label %77

73:                                               ; preds = %67
  %74 = add nsw i32 %9, -1
  %75 = sext i32 %74 to i64
  %76 = add nsw i64 %71, %75
  br label %77

77:                                               ; preds = %67, %73
  %78 = phi i64 [ %76, %73 ], [ %71, %67 ]
  %79 = sext i32 %9 to i64
  %80 = sdiv i64 %78, %79
  %81 = sub nsw i64 %80, %33
  br label %82

82:                                               ; preds = %62, %77
  %83 = phi i64 [ %81, %77 ], [ 0, %62 ]
  %84 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %85 = load i32, i32* %84, align 4
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %102, label %87

87:                                               ; preds = %82
  %88 = add nsw i32 %85, %35
  %89 = sext i32 %88 to i64
  %90 = sext i32 %37 to i64
  %91 = mul nsw i64 %89, %90
  %92 = icmp sgt i64 %91, 0
  br i1 %92, label %93, label %97

93:                                               ; preds = %87
  %94 = add nsw i32 %39, -1
  %95 = sext i32 %94 to i64
  %96 = add nsw i64 %91, %95
  br label %97

97:                                               ; preds = %87, %93
  %98 = phi i64 [ %96, %93 ], [ %91, %87 ]
  %99 = sext i32 %39 to i64
  %100 = sdiv i64 %98, %99
  %101 = sub nsw i64 %100, %63
  br label %102

102:                                              ; preds = %82, %97
  %103 = phi i64 [ %101, %97 ], [ 0, %82 ]
  %104 = add nsw i64 %33, 16777215
  %105 = icmp ugt i64 %104, 33554430
  %106 = add nsw i64 %63, 16777215
  %107 = icmp ugt i64 %106, 33554430
  %108 = or i1 %105, %107
  %109 = add i64 %83, -1
  %110 = icmp ugt i64 %109, 32766
  %111 = or i1 %108, %110
  %112 = add i64 %103, -1
  %113 = icmp ugt i64 %112, 32766
  %114 = or i1 %111, %113
  br i1 %114, label %144, label %115

115:                                              ; preds = %102
  %116 = trunc i64 %33 to i32
  %117 = trunc i64 %63 to i32
  %118 = trunc i64 %83 to i32
  %119 = trunc i64 %103 to i32
  %120 = icmp sgt i32 %116, 0
  %121 = icmp sgt i32 %118, 0
  %122 = and i1 %120, %121
  %123 = sub nuw nsw i32 2147483647, %116
  %124 = icmp ult i32 %123, %118
  %125 = and i1 %124, %122
  %126 = select i1 %125, i32 %123, i32 %118
  %127 = icmp sgt i32 %117, 0
  %128 = icmp sgt i32 %119, 0
  %129 = and i1 %127, %128
  %130 = sub nuw nsw i32 2147483647, %117
  %131 = icmp ult i32 %130, %119
  %132 = and i1 %131, %129
  %133 = select i1 %132, i32 %130, i32 %119
  %134 = icmp sgt i32 %126, 0
  %135 = select i1 %134, i32 %126, i32 0
  %136 = zext i32 %135 to i64
  %137 = icmp sgt i32 %133, 0
  %138 = select i1 %137, i32 %133, i32 0
  %139 = zext i32 %138 to i64
  %140 = shl nuw nsw i64 %139, 32
  %141 = or i64 %140, %136
  %142 = shl i64 %63, 32
  %143 = and i64 %33, 4294967295
  br label %144

144:                                              ; preds = %102, %115
  %145 = phi i64 [ %143, %115 ], [ 0, %102 ]
  %146 = phi i64 [ %142, %115 ], [ 0, %102 ]
  %147 = phi i64 [ %141, %115 ], [ 0, %102 ]
  %148 = or i64 %146, %145
  %149 = insertvalue { i64, i64 } undef, i64 %148, 0
  %150 = insertvalue { i64, i64 } %149, i64 %147, 1
  ret { i64, i64 } %150
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz11copy_output18RenderPassGeometryC2Ev(%"struct.viz::copy_output::RenderPassGeometry"* nocapture) unnamed_addr #2 align 2 {
  %2 = bitcast %"struct.viz::copy_output::RenderPassGeometry"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %2, i8 0, i64 56, i1 false)
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN3viz11copy_output18RenderPassGeometryD2Ev(%"struct.viz::copy_output::RenderPassGeometry"* nocapture) unnamed_addr #3 align 2 {
  ret void
}

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
