; ModuleID = '../../third_party/swiftshader/third_party/llvm-subzero/lib/Support/APInt.cpp'
source_filename = "../../third_party/swiftshader/third_party/llvm-subzero/lib/Support/APInt.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.llvm::APInt" = type { i32, %union.anon }
%union.anon = type { i64 }
%"class.llvm::FoldingSetNodeID" = type { %"class.llvm::SmallVector" }
%"class.llvm::SmallVector" = type { %"class.llvm::SmallVectorImpl.base", %"struct.llvm::SmallVectorStorage" }
%"class.llvm::SmallVectorImpl.base" = type { %"class.llvm::SmallVectorTemplateBase.base" }
%"class.llvm::SmallVectorTemplateBase.base" = type { %"class.llvm::SmallVectorTemplateCommon.base" }
%"class.llvm::SmallVectorTemplateCommon.base" = type <{ %"class.llvm::SmallVectorBase", %"struct.llvm::AlignedCharArrayUnion" }>
%"class.llvm::SmallVectorBase" = type { i8*, i8*, i8* }
%"struct.llvm::AlignedCharArrayUnion" = type { %"struct.llvm::AlignedCharArray" }
%"struct.llvm::AlignedCharArray" = type { [4 x i8] }
%"struct.llvm::SmallVectorStorage" = type { [31 x %"struct.llvm::AlignedCharArrayUnion"] }
%"struct.llvm::hashing::detail::hash_combine_recursive_helper" = type { [64 x i8], %"struct.llvm::hashing::detail::hash_state", i64 }
%"struct.llvm::hashing::detail::hash_state" = type { i64, i64, i64, i64, i64, i64, i64 }
%"struct.llvm::APInt::ms" = type <{ %"class.llvm::APInt", i32, [4 x i8] }>
%"struct.llvm::APInt::mu" = type { %"class.llvm::APInt", i8, i32 }
%"class.llvm::SmallVectorImpl.2" = type { %"class.llvm::SmallVectorTemplateBase.base.8", [7 x i8] }
%"class.llvm::SmallVectorTemplateBase.base.8" = type { %"class.llvm::SmallVectorTemplateCommon.base.7" }
%"class.llvm::SmallVectorTemplateCommon.base.7" = type <{ %"class.llvm::SmallVectorBase", %"struct.llvm::AlignedCharArrayUnion.5" }>
%"struct.llvm::AlignedCharArrayUnion.5" = type { %"struct.llvm::AlignedCharArray.6" }
%"struct.llvm::AlignedCharArray.6" = type { [1 x i8] }
%"class.llvm::SmallVectorTemplateBase.3" = type { %"class.llvm::SmallVectorTemplateCommon.base.7", [7 x i8] }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.10 }
%union.anon.10 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.llvm::SmallString" = type { %"class.llvm::SmallVector.12" }
%"class.llvm::SmallVector.12" = type { %"class.llvm::SmallVectorImpl.base.9", %"struct.llvm::SmallVectorStorage.13" }
%"class.llvm::SmallVectorImpl.base.9" = type { %"class.llvm::SmallVectorTemplateBase.base.8" }
%"struct.llvm::SmallVectorStorage.13" = type { [39 x %"struct.llvm::AlignedCharArrayUnion.5"] }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.llvm::raw_ostream" = type <{ i32 (...)**, i8*, i8*, i8*, i32, [4 x i8] }>

$_ZN4llvm5APInt15clearUnusedBitsEv = comdat any

$_ZN4llvm5APIntC2Ejmb = comdat any

$_ZN4llvm5APIntC2ERKS0_ = comdat any

$_ZNK4llvm5APInteqERKS0_ = comdat any

$_ZN4llvm5APIntlSEj = comdat any

$_ZNK4llvm5APIntanERKS0_ = comdat any

$_ZN4llvm5APIntaSERKS0_ = comdat any

$_ZNK4llvm5APInt3shlEj = comdat any

$_ZNK4llvm5APInt15getLimitedValueEm = comdat any

$_ZNK4llvm5APIntorERKS0_ = comdat any

$_ZN4llvm5APInt17getSignedMinValueEj = comdat any

$_ZNK4llvm5APInt3absEv = comdat any

$_ZN4llvm5APInt17getSignedMaxValueEj = comdat any

$_ZNK4llvm5APInt3ugtERKS0_ = comdat any

$_ZNK4llvm5APInt16isMinSignedValueEv = comdat any

$_ZNK4llvm5APInt14isAllOnesValueEv = comdat any

$_ZNK4llvm5APInt3ugtEm = comdat any

$_ZN4llvm5APInt11flipAllBitsEv = comdat any

$_ZN4llvm23SmallVectorTemplateBaseIcLb1EE9push_backERKc = comdat any

$_ZN4llvm15SmallVectorImplIcE6appendIPcEEvT_S4_ = comdat any

$_ZNK4llvm5APInt10isPowerOf2Ev = comdat any

$_ZNK4llvm5APInt3ultEm = comdat any

$_ZN4llvm11raw_ostreamlsENS_9StringRefE = comdat any

$_ZN4llvm7hashing6detail29hash_combine_recursive_helper7combineEmPcS3_ = comdat any

$_ZN4llvm7hashing6detail10hash_state6createEPKcm = comdat any

$_ZN4llvm7hashing6detail10hash_state3mixEPKc = comdat any

$_ZN4llvm7hashing6detail10hash_state12mix_32_bytesEPKcRmS5_ = comdat any

$_ZN4llvm7hashing6detail10hash_shortEPKcmm = comdat any

$_ZN4llvm7hashing6detail10hash_state8finalizeEm = comdat any

$_ZNSt3__112__rotate_gcdIPcEET_S2_S2_S2_ = comdat any

$_ZN4llvm7hashing6detail23hash_combine_range_implImEENSt3__19enable_ifIXsr16is_hashable_dataIT_EE5valueENS_9hash_codeEE4typeEPS5_S9_ = comdat any

$_ZZN4llvm7hashing6detail18get_execution_seedEvE4seed = comdat any

$_ZGVZN4llvm7hashing6detail18get_execution_seedEvE4seed = comdat any

@_ZZNK4llvm5APInt4sqrtEvE7results = internal unnamed_addr constant [32 x i8] c"\00\01\01\02\02\02\02\03\03\03\03\03\03\04\04\04\04\04\04\04\04\05\05\05\05\05\05\05\05\05\05\06", align 16
@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"0b\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"0x\00", align 1
@_ZZNK4llvm5APInt8toStringERNS_15SmallVectorImplIcEEjbbE6Digits = internal constant [37 x i8] c"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\00", align 16
@.str.8 = private unnamed_addr constant [7 x i8] c"APInt(\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"b, \00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"u \00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"s)\00", align 1
@_ZZN4llvm7hashing6detail18get_execution_seedEvE4seed = linkonce_odr hidden local_unnamed_addr global i64 0, comdat, align 8
@_ZGVZN4llvm7hashing6detail18get_execution_seedEvE4seed = linkonce_odr hidden global i64 0, comdat, align 8
@_ZN4llvm7hashing6detail19fixed_seed_overrideE = external local_unnamed_addr global i64, align 8
@_ZN4llvmL18BitReverseTable256E = internal unnamed_addr constant [256 x i8] c"\00\80@\C0 \A0`\E0\10\90P\D00\B0p\F0\08\88H\C8(\A8h\E8\18\98X\D88\B8x\F8\04\84D\C4$\A4d\E4\14\94T\D44\B4t\F4\0C\8CL\CC,\ACl\EC\1C\9C\5C\DC<\BC|\FC\02\82B\C2\22\A2b\E2\12\92R\D22\B2r\F2\0A\8AJ\CA*\AAj\EA\1A\9AZ\DA:\BAz\FA\06\86F\C6&\A6f\E6\16\96V\D66\B6v\F6\0E\8EN\CE.\AEn\EE\1E\9E^\DE>\BE~\FE\01\81A\C1!\A1a\E1\11\91Q\D11\B1q\F1\09\89I\C9)\A9i\E9\19\99Y\D99\B9y\F9\05\85E\C5%\A5e\E5\15\95U\D55\B5u\F5\0D\8DM\CD-\ADm\ED\1D\9D]\DD=\BD}\FD\03\83C\C3#\A3c\E3\13\93S\D33\B3s\F3\0B\8BK\CB+\ABk\EB\1B\9B[\DB;\BB{\FB\07\87G\C7'\A7g\E7\17\97W\D77\B7w\F7\0F\8FO\CF/\AFo\EF\1F\9F_\DF?\BF\7F\FF", align 16
@switch.table._ZNK4llvm5APInt8toStringERNS_15SmallVectorImplIcEEjbb = private unnamed_addr constant [8 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0)], align 8

@_ZN4llvm5APIntC1EjNS_8ArrayRefImEE = hidden unnamed_addr alias void (%"class.llvm::APInt"*, i32, i64*, i64), void (%"class.llvm::APInt"*, i32, i64*, i64)* @_ZN4llvm5APIntC2EjNS_8ArrayRefImEE
@_ZN4llvm5APIntC1EjjPKm = hidden unnamed_addr alias void (%"class.llvm::APInt"*, i32, i32, i64*), void (%"class.llvm::APInt"*, i32, i32, i64*)* @_ZN4llvm5APIntC2EjjPKm
@_ZN4llvm5APIntC1EjNS_9StringRefEh = hidden unnamed_addr alias void (%"class.llvm::APInt"*, i32, i8*, i64, i8), void (%"class.llvm::APInt"*, i32, i8*, i64, i8)* @_ZN4llvm5APIntC2EjNS_9StringRefEh

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm5APInt12initSlowCaseEmb(%"class.llvm::APInt"* nocapture, i64, i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = zext i32 %5 to i64
  %7 = add nuw nsw i64 %6, 63
  %8 = lshr i64 %7, 6
  %9 = shl nuw nsw i64 %8, 3
  %10 = tail call i8* @_Znam(i64 %9) #18
  %11 = bitcast i8* %10 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 0, i64 %9, i1 false) #17
  %12 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %13 = bitcast %union.anon* %12 to i64**
  %14 = bitcast %union.anon* %12 to i8**
  store i8* %10, i8** %14, align 8
  store i64 %1, i64* %11, align 8
  %15 = icmp slt i64 %1, 0
  %16 = and i1 %15, %2
  %17 = trunc i64 %8 to i32
  %18 = icmp ugt i32 %17, 1
  %19 = and i1 %16, %18
  br i1 %19, label %20, label %35

20:                                               ; preds = %3
  %21 = getelementptr inbounds i8, i8* %10, i64 8
  %22 = bitcast i8* %21 to i64*
  store i64 -1, i64* %22, align 8
  %23 = load i32, i32* %4, align 8
  %24 = icmp ugt i32 %23, 128
  br i1 %24, label %25, label %35

25:                                               ; preds = %20, %25
  %26 = phi i64 [ %29, %25 ], [ 2, %20 ]
  %27 = load i64*, i64** %13, align 8
  %28 = getelementptr inbounds i64, i64* %27, i64 %26
  store i64 -1, i64* %28, align 8
  %29 = add nuw nsw i64 %26, 1
  %30 = load i32, i32* %4, align 8
  %31 = zext i32 %30 to i64
  %32 = add nuw nsw i64 %31, 63
  %33 = lshr i64 %32, 6
  %34 = icmp ult i64 %29, %33
  br i1 %34, label %25, label %35

35:                                               ; preds = %25, %20, %3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm5APInt12initSlowCaseERKS0_(%"class.llvm::APInt"* nocapture, %"class.llvm::APInt"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = zext i32 %4 to i64
  %6 = add nuw nsw i64 %5, 63
  %7 = lshr i64 %6, 6
  %8 = shl nuw nsw i64 %7, 3
  %9 = tail call i8* @_Znam(i64 %8) #18
  %10 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %11 = bitcast %union.anon* %10 to i8**
  store i8* %9, i8** %11, align 8
  %12 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %13 = bitcast %union.anon* %12 to i8**
  %14 = load i8*, i8** %13, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %9, i8* align 8 %14, i64 %8, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm5APInt13initFromArrayENS_8ArrayRefImEE(%"class.llvm::APInt"*, i64*, i64) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp ult i32 %5, 65
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = load i64, i64* %1, align 8
  %9 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  store i64 %8, i64* %9, align 8
  br label %25

10:                                               ; preds = %3
  %11 = zext i32 %5 to i64
  %12 = add nuw nsw i64 %11, 63
  %13 = lshr i64 %12, 6
  %14 = trunc i64 %13 to i32
  %15 = shl nuw nsw i64 %13, 3
  %16 = tail call i8* @_Znam(i64 %15) #18
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 0, i64 %15, i1 false) #17
  %17 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %18 = bitcast %union.anon* %17 to i8**
  store i8* %16, i8** %18, align 8
  %19 = trunc i64 %2 to i32
  %20 = icmp ult i32 %14, %19
  %21 = select i1 %20, i64 %13, i64 %2
  %22 = bitcast i64* %1 to i8*
  %23 = shl i64 %21, 3
  %24 = and i64 %23, 4294967288
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %16, i8* align 8 %22, i64 %24, i1 false)
  br label %25

25:                                               ; preds = %10, %7
  %26 = tail call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APInt15clearUnusedBitsEv(%"class.llvm::APInt"* %0) #19
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APInt15clearUnusedBitsEv(%"class.llvm::APInt"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = and i32 %3, 63
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %27, label %6

6:                                                ; preds = %1
  %7 = sub nuw nsw i32 64, %4
  %8 = zext i32 %7 to i64
  %9 = lshr i64 -1, %8
  %10 = icmp ult i32 %3, 65
  %11 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  br i1 %10, label %12, label %14

12:                                               ; preds = %6
  %13 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  br label %23

14:                                               ; preds = %6
  %15 = bitcast %union.anon* %11 to i64**
  %16 = load i64*, i64** %15, align 8
  %17 = zext i32 %3 to i64
  %18 = add nuw nsw i64 %17, 63
  %19 = lshr i64 %18, 6
  %20 = add nuw nsw i64 %19, 4294967295
  %21 = and i64 %20, 4294967295
  %22 = getelementptr inbounds i64, i64* %16, i64 %21
  br label %23

23:                                               ; preds = %14, %12
  %24 = phi i64* [ %13, %12 ], [ %22, %14 ]
  %25 = load i64, i64* %24, align 8
  %26 = and i64 %25, %9
  store i64 %26, i64* %24, align 8
  br label %27

27:                                               ; preds = %23, %1
  ret %"class.llvm::APInt"* %0
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm5APIntC2EjNS_8ArrayRefImEE(%"class.llvm::APInt"*, i32, i64*, i64) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  store i32 %1, i32* %5, align 8
  %6 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  store i64 0, i64* %6, align 8
  tail call void @_ZN4llvm5APInt13initFromArrayENS_8ArrayRefImEE(%"class.llvm::APInt"* %0, i64* %2, i64 %3) #19
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm5APIntC2EjjPKm(%"class.llvm::APInt"*, i32, i32, i64*) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  store i32 %1, i32* %5, align 8
  %6 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  store i64 0, i64* %6, align 8
  %7 = zext i32 %2 to i64
  tail call void @_ZN4llvm5APInt13initFromArrayENS_8ArrayRefImEE(%"class.llvm::APInt"* %0, i64* %3, i64 %7) #19
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm5APIntC2EjNS_9StringRefEh(%"class.llvm::APInt"*, i32, i8*, i64, i8 zeroext) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  store i32 %1, i32* %6, align 8
  %7 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  store i64 0, i64* %7, align 8
  tail call void @_ZN4llvm5APInt10fromStringEjNS_9StringRefEh(%"class.llvm::APInt"* %0, i32 undef, i8* %2, i64 %3, i8 zeroext %4) #19
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm5APInt10fromStringEjNS_9StringRefEh(%"class.llvm::APInt"*, i32, i8*, i64, i8 zeroext) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.llvm::APInt", align 8
  %7 = alloca %"class.llvm::APInt", align 8
  %8 = load i8, i8* %2, align 1
  %9 = icmp eq i8 %8, 45
  %10 = icmp eq i8 %8, 43
  %11 = or i1 %9, %10
  %12 = getelementptr inbounds i8, i8* %2, i64 1
  %13 = select i1 %11, i8* %12, i8* %2
  %14 = zext i1 %11 to i64
  %15 = sub i64 %3, %14
  %16 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %17 = load i32, i32* %16, align 8
  %18 = icmp ult i32 %17, 65
  br i1 %18, label %27, label %19

19:                                               ; preds = %5
  %20 = zext i32 %17 to i64
  %21 = add nuw nsw i64 %20, 63
  %22 = lshr i64 %21, 6
  %23 = shl nuw nsw i64 %22, 3
  %24 = tail call i8* @_Znam(i64 %23) #18
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %24, i8 0, i64 %23, i1 false) #17
  %25 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %26 = bitcast %union.anon* %25 to i8**
  store i8* %24, i8** %26, align 8
  br label %27

27:                                               ; preds = %19, %5
  switch i8 %4, label %28 [
    i8 16, label %32
    i8 8, label %31
  ]

28:                                               ; preds = %27
  %29 = icmp eq i8 %4, 2
  %30 = zext i1 %29 to i32
  br label %32

31:                                               ; preds = %27
  br label %32

32:                                               ; preds = %27, %31, %28
  %33 = phi i32 [ 4, %27 ], [ %30, %28 ], [ 3, %31 ]
  %34 = bitcast %"class.llvm::APInt"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %34) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 16, i1 false)
  call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* nonnull %6, i32 %17, i64 0, i1 zeroext false) #19
  %35 = bitcast %"class.llvm::APInt"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %35) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 -86, i64 16, i1 false)
  %36 = load i32, i32* %16, align 8
  %37 = zext i8 %4 to i64
  call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* nonnull %7, i32 %36, i64 %37, i1 zeroext false) #19
  %38 = getelementptr inbounds i8, i8* %2, i64 %3
  %39 = icmp eq i8* %13, %38
  br i1 %39, label %49, label %40

40:                                               ; preds = %32
  %41 = zext i8 %4 to i32
  %42 = add nsw i32 %41, -11
  %43 = icmp ugt i64 %15, 1
  %44 = icmp eq i32 %33, 0
  %45 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 0
  %46 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 1
  %47 = bitcast %union.anon* %46 to i64**
  %48 = getelementptr inbounds %union.anon, %union.anon* %46, i64 0, i32 0
  br label %50

49:                                               ; preds = %82, %32
  br i1 %9, label %91, label %93

50:                                               ; preds = %40, %82
  %51 = phi i8* [ %13, %40 ], [ %89, %82 ]
  %52 = load i8, i8* %51, align 1
  switch i8 %4, label %53 [
    i8 16, label %56
    i8 36, label %56
  ]

53:                                               ; preds = %50
  %54 = sext i8 %52 to i32
  %55 = add nsw i32 %54, -48
  br label %70

56:                                               ; preds = %50, %50
  %57 = sext i8 %52 to i32
  %58 = add nsw i32 %57, -48
  %59 = icmp ult i32 %58, 10
  br i1 %59, label %75, label %60

60:                                               ; preds = %56
  %61 = add nsw i32 %57, -65
  %62 = icmp ugt i32 %61, %42
  br i1 %62, label %65, label %63

63:                                               ; preds = %60
  %64 = add nsw i32 %57, -55
  br label %75

65:                                               ; preds = %60
  %66 = add nsw i32 %57, -97
  %67 = icmp ugt i32 %66, %42
  br i1 %67, label %70, label %68

68:                                               ; preds = %65
  %69 = add nsw i32 %57, -87
  br label %75

70:                                               ; preds = %65, %53
  %71 = phi i32 [ %55, %53 ], [ %58, %65 ]
  %72 = phi i32 [ %41, %53 ], [ 10, %65 ]
  %73 = icmp ult i32 %71, %72
  %74 = select i1 %73, i32 %71, i32 -1
  br label %75

75:                                               ; preds = %56, %63, %68, %70
  %76 = phi i32 [ %64, %63 ], [ %69, %68 ], [ %58, %56 ], [ %74, %70 ]
  br i1 %43, label %77, label %82

77:                                               ; preds = %75
  br i1 %44, label %80, label %78

78:                                               ; preds = %77
  %79 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntlSEj(%"class.llvm::APInt"* %0, i32 %33) #19
  br label %82

80:                                               ; preds = %77
  %81 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntmLERKS0_(%"class.llvm::APInt"* %0, %"class.llvm::APInt"* nonnull dereferenceable(16) %7) #19
  br label %82

82:                                               ; preds = %78, %80, %75
  %83 = load i32, i32* %45, align 8
  %84 = icmp ult i32 %83, 65
  %85 = zext i32 %76 to i64
  %86 = load i64*, i64** %47, align 8
  %87 = select i1 %84, i64* %48, i64* %86
  store i64 %85, i64* %87, align 8
  %88 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLERKS0_(%"class.llvm::APInt"* %0, %"class.llvm::APInt"* nonnull dereferenceable(16) %6) #19
  %89 = getelementptr inbounds i8, i8* %51, i64 1
  %90 = icmp eq i8* %89, %38
  br i1 %90, label %49, label %50

91:                                               ; preds = %49
  %92 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntmmEv(%"class.llvm::APInt"* %0) #19
  call void @_ZN4llvm5APInt11flipAllBitsEv(%"class.llvm::APInt"* %0) #19
  br label %93

93:                                               ; preds = %91, %49
  %94 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %7, i64 0, i32 0
  %95 = load i32, i32* %94, align 8
  %96 = icmp ugt i32 %95, 64
  br i1 %96, label %97, label %104

97:                                               ; preds = %93
  %98 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %7, i64 0, i32 1
  %99 = bitcast %union.anon* %98 to i64**
  %100 = load i64*, i64** %99, align 8
  %101 = icmp eq i64* %100, null
  br i1 %101, label %104, label %102

102:                                              ; preds = %97
  %103 = bitcast i64* %100 to i8*
  call void @_ZdaPv(i8* %103) #18
  br label %104

104:                                              ; preds = %93, %97, %102
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %35) #17
  %105 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 0
  %106 = load i32, i32* %105, align 8
  %107 = icmp ugt i32 %106, 64
  br i1 %107, label %108, label %115

108:                                              ; preds = %104
  %109 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 1
  %110 = bitcast %union.anon* %109 to i64**
  %111 = load i64*, i64** %110, align 8
  %112 = icmp eq i64* %111, null
  br i1 %112, label %115, label %113

113:                                              ; preds = %108
  %114 = bitcast i64* %111 to i8*
  call void @_ZdaPv(i8* %114) #18
  br label %115

115:                                              ; preds = %104, %108, %113
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %34) #17
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APInt14AssignSlowCaseERKS0_(%"class.llvm::APInt"*, %"class.llvm::APInt"* readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = icmp eq %"class.llvm::APInt"* %0, %1
  br i1 %3, label %95, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %6, %8
  br i1 %9, label %10, label %21

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %12 = bitcast %union.anon* %11 to i8**
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %15 = bitcast %union.anon* %14 to i8**
  %16 = load i8*, i8** %15, align 8
  %17 = zext i32 %6 to i64
  %18 = add nuw nsw i64 %17, 63
  %19 = lshr i64 %18, 3
  %20 = and i64 %19, 1073741816
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %16, i64 %20, i1 false)
  br label %95

21:                                               ; preds = %4
  %22 = icmp ult i32 %6, 65
  br i1 %22, label %23, label %41

23:                                               ; preds = %21
  %24 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %25 = getelementptr inbounds %union.anon, %union.anon* %24, i64 0, i32 0
  store i64 0, i64* %25, align 8
  %26 = load i32, i32* %7, align 8
  %27 = zext i32 %26 to i64
  %28 = add nuw nsw i64 %27, 63
  %29 = lshr i64 %28, 6
  %30 = shl nuw nsw i64 %29, 3
  %31 = tail call i8* @_Znam(i64 %30) #18
  %32 = bitcast %union.anon* %24 to i8**
  store i8* %31, i8** %32, align 8
  %33 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %34 = bitcast %union.anon* %33 to i8**
  %35 = load i8*, i8** %34, align 8
  %36 = load i32, i32* %7, align 8
  %37 = zext i32 %36 to i64
  %38 = add nuw nsw i64 %37, 63
  %39 = lshr i64 %38, 3
  %40 = and i64 %39, 1073741816
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %31, i8* align 8 %35, i64 %40, i1 false)
  br label %92

41:                                               ; preds = %21
  %42 = zext i32 %6 to i64
  %43 = add nuw nsw i64 %42, 63
  %44 = lshr i64 %43, 6
  %45 = trunc i64 %44 to i32
  %46 = zext i32 %8 to i64
  %47 = add nuw nsw i64 %46, 63
  %48 = lshr i64 %47, 6
  %49 = trunc i64 %48 to i32
  %50 = icmp eq i32 %45, %49
  br i1 %50, label %51, label %59

51:                                               ; preds = %41
  %52 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %53 = bitcast %union.anon* %52 to i8**
  %54 = load i8*, i8** %53, align 8
  %55 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %56 = bitcast %union.anon* %55 to i8**
  %57 = load i8*, i8** %56, align 8
  %58 = shl nuw nsw i64 %48, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* align 8 %57, i64 %58, i1 false)
  br label %92

59:                                               ; preds = %41
  %60 = icmp ult i32 %8, 65
  %61 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %62 = bitcast %union.anon* %61 to i64**
  %63 = load i64*, i64** %62, align 8
  %64 = icmp eq i64* %63, null
  br i1 %60, label %65, label %72

65:                                               ; preds = %59
  br i1 %64, label %68, label %66

66:                                               ; preds = %65
  %67 = bitcast i64* %63 to i8*
  tail call void @_ZdaPv(i8* %67) #18
  br label %68

68:                                               ; preds = %66, %65
  %69 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds %union.anon, %union.anon* %61, i64 0, i32 0
  store i64 %70, i64* %71, align 8
  br label %92

72:                                               ; preds = %59
  br i1 %64, label %79, label %73

73:                                               ; preds = %72
  %74 = bitcast i64* %63 to i8*
  tail call void @_ZdaPv(i8* %74) #18
  %75 = load i32, i32* %7, align 8
  %76 = zext i32 %75 to i64
  %77 = add nuw nsw i64 %76, 63
  %78 = lshr i64 %77, 6
  br label %79

79:                                               ; preds = %73, %72
  %80 = phi i64 [ %78, %73 ], [ %48, %72 ]
  %81 = shl nuw nsw i64 %80, 3
  %82 = tail call i8* @_Znam(i64 %81) #18
  %83 = bitcast %union.anon* %61 to i8**
  store i8* %82, i8** %83, align 8
  %84 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %85 = bitcast %union.anon* %84 to i8**
  %86 = load i8*, i8** %85, align 8
  %87 = load i32, i32* %7, align 8
  %88 = zext i32 %87 to i64
  %89 = add nuw nsw i64 %88, 63
  %90 = lshr i64 %89, 3
  %91 = and i64 %90, 1073741816
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %82, i8* align 8 %86, i64 %91, i1 false)
  br label %92

92:                                               ; preds = %51, %79, %68, %23
  %93 = load i32, i32* %7, align 8
  store i32 %93, i32* %5, align 8
  %94 = tail call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APInt15clearUnusedBitsEv(%"class.llvm::APInt"* %0) #19
  br label %95

95:                                               ; preds = %2, %92, %10
  %96 = phi %"class.llvm::APInt"* [ %0, %10 ], [ %94, %92 ], [ %0, %2 ]
  ret %"class.llvm::APInt"* %96
}

; Function Attrs: nobuiltin nounwind optsize
declare void @_ZdaPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntaSEm(%"class.llvm::APInt"*, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 65
  %6 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  br i1 %5, label %7, label %9

7:                                                ; preds = %2
  %8 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  store i64 %1, i64* %8, align 8
  br label %22

9:                                                ; preds = %2
  %10 = bitcast %union.anon* %6 to i64**
  %11 = load i64*, i64** %10, align 8
  store i64 %1, i64* %11, align 8
  %12 = load i64*, i64** %10, align 8
  %13 = getelementptr inbounds i64, i64* %12, i64 1
  %14 = bitcast i64* %13 to i8*
  %15 = load i32, i32* %3, align 8
  %16 = zext i32 %15 to i64
  %17 = add nuw nsw i64 %16, 63
  %18 = lshr i64 %17, 3
  %19 = and i64 %18, 1073741816
  %20 = add nuw nsw i64 %19, 4294967288
  %21 = and i64 %20, 4294967288
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 %21, i1 false)
  br label %22

22:                                               ; preds = %9, %7
  %23 = tail call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APInt15clearUnusedBitsEv(%"class.llvm::APInt"* %0) #19
  ret %"class.llvm::APInt"* %23
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt7ProfileERNS_16FoldingSetNodeIDE(%"class.llvm::APInt"* nocapture readonly, %"class.llvm::FoldingSetNodeID"* dereferenceable(152)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  tail call void @_ZN4llvm16FoldingSetNodeID10AddIntegerEj(%"class.llvm::FoldingSetNodeID"* %1, i32 %4) #20
  %5 = load i32, i32* %3, align 8
  %6 = icmp ult i32 %5, 65
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %9 = load i64, i64* %8, align 8
  tail call void @_ZN4llvm16FoldingSetNodeID10AddIntegerEm(%"class.llvm::FoldingSetNodeID"* %1, i64 %9) #20
  br label %25

10:                                               ; preds = %2
  %11 = zext i32 %5 to i64
  %12 = add nuw nsw i64 %11, 63
  %13 = lshr i64 %12, 6
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %25, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %17 = bitcast %union.anon* %16 to i64**
  br label %18

18:                                               ; preds = %18, %15
  %19 = phi i64 [ 0, %15 ], [ %23, %18 ]
  %20 = load i64*, i64** %17, align 8
  %21 = getelementptr inbounds i64, i64* %20, i64 %19
  %22 = load i64, i64* %21, align 8
  tail call void @_ZN4llvm16FoldingSetNodeID10AddIntegerEm(%"class.llvm::FoldingSetNodeID"* %1, i64 %22) #20
  %23 = add nuw nsw i64 %19, 1
  %24 = icmp eq i64 %23, %13
  br i1 %24, label %25, label %18

25:                                               ; preds = %18, %10, %7
  ret void
}

; Function Attrs: optsize
declare void @_ZN4llvm16FoldingSetNodeID10AddIntegerEj(%"class.llvm::FoldingSetNodeID"*, i32) local_unnamed_addr #3

; Function Attrs: optsize
declare void @_ZN4llvm16FoldingSetNodeID10AddIntegerEm(%"class.llvm::FoldingSetNodeID"*, i64) local_unnamed_addr #3

; Function Attrs: nounwind optsize ssp uwtable
define hidden dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntppEv(%"class.llvm::APInt"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp ult i32 %3, 65
  %5 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  br i1 %4, label %6, label %10

6:                                                ; preds = %1
  %7 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = add i64 %8, 1
  store i64 %9, i64* %7, align 8
  br label %26

10:                                               ; preds = %1
  %11 = bitcast %union.anon* %5 to i64**
  %12 = load i64*, i64** %11, align 8
  %13 = zext i32 %3 to i64
  %14 = add nuw nsw i64 %13, 63
  %15 = lshr i64 %14, 6
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %10, %17
  %18 = phi i64 [ %23, %17 ], [ 0, %10 ]
  %19 = getelementptr inbounds i64, i64* %12, i64 %18
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %20, 1
  store i64 %21, i64* %19, align 8
  %22 = icmp eq i64 %21, 0
  %23 = add nuw nsw i64 %18, 1
  %24 = icmp ult i64 %23, %15
  %25 = and i1 %24, %22
  br i1 %25, label %17, label %26

26:                                               ; preds = %17, %10, %6
  %27 = tail call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APInt15clearUnusedBitsEv(%"class.llvm::APInt"* %0) #19
  ret %"class.llvm::APInt"* %27
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntmmEv(%"class.llvm::APInt"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp ult i32 %3, 65
  %5 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  br i1 %4, label %6, label %10

6:                                                ; preds = %1
  %7 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = add i64 %8, -1
  store i64 %9, i64* %7, align 8
  br label %26

10:                                               ; preds = %1
  %11 = bitcast %union.anon* %5 to i64**
  %12 = load i64*, i64** %11, align 8
  %13 = zext i32 %3 to i64
  %14 = add nuw nsw i64 %13, 63
  %15 = lshr i64 %14, 6
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %10, %17
  %18 = phi i64 [ %23, %17 ], [ 0, %10 ]
  %19 = getelementptr inbounds i64, i64* %12, i64 %18
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %20, -1
  store i64 %21, i64* %19, align 8
  %22 = icmp eq i64 %20, 0
  %23 = add nuw nsw i64 %18, 1
  %24 = icmp ult i64 %23, %15
  %25 = and i1 %22, %24
  br i1 %25, label %17, label %26

26:                                               ; preds = %17, %10, %6
  %27 = tail call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APInt15clearUnusedBitsEv(%"class.llvm::APInt"* %0) #19
  ret %"class.llvm::APInt"* %27
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLERKS0_(%"class.llvm::APInt"*, %"class.llvm::APInt"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 65
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = add i64 %10, %8
  store i64 %11, i64* %9, align 8
  br label %41

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %14 = bitcast %union.anon* %13 to i64**
  %15 = load i64*, i64** %14, align 8
  %16 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %17 = bitcast %union.anon* %16 to i64**
  %18 = load i64*, i64** %17, align 8
  %19 = zext i32 %4 to i64
  %20 = add nuw nsw i64 %19, 63
  %21 = lshr i64 %20, 6
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %41, label %23

23:                                               ; preds = %12, %23
  %24 = phi i64 [ %39, %23 ], [ 0, %12 ]
  %25 = phi i1 [ %38, %23 ], [ false, %12 ]
  %26 = getelementptr inbounds i64, i64* %15, i64 %24
  %27 = getelementptr inbounds i64, i64* %18, i64 %24
  %28 = load i64, i64* %27, align 8
  %29 = load i64, i64* %26, align 8
  %30 = icmp ult i64 %28, %29
  %31 = select i1 %30, i64 %28, i64 %29
  %32 = zext i1 %25 to i64
  %33 = add i64 %28, %32
  %34 = add i64 %33, %29
  store i64 %34, i64* %26, align 8
  %35 = icmp ult i64 %34, %31
  %36 = icmp eq i64 %34, %31
  %37 = and i1 %25, %36
  %38 = or i1 %35, %37
  %39 = add nuw nsw i64 %24, 1
  %40 = icmp eq i64 %39, %21
  br i1 %40, label %41, label %23

41:                                               ; preds = %23, %12, %6
  %42 = tail call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APInt15clearUnusedBitsEv(%"class.llvm::APInt"* %0) #19
  ret %"class.llvm::APInt"* %42
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLEm(%"class.llvm::APInt"*, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 65
  br i1 %5, label %6, label %10

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = add i64 %8, %1
  store i64 %9, i64* %7, align 8
  br label %28

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %12 = bitcast %union.anon* %11 to i64**
  %13 = load i64*, i64** %12, align 8
  %14 = zext i32 %4 to i64
  %15 = add nuw nsw i64 %14, 63
  %16 = lshr i64 %15, 6
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %28, label %18

18:                                               ; preds = %10, %18
  %19 = phi i64 [ %25, %18 ], [ 0, %10 ]
  %20 = phi i64 [ 1, %18 ], [ %1, %10 ]
  %21 = getelementptr inbounds i64, i64* %13, i64 %19
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %22, %20
  store i64 %23, i64* %21, align 8
  %24 = icmp ult i64 %23, %20
  %25 = add nuw nsw i64 %19, 1
  %26 = icmp ult i64 %25, %16
  %27 = and i1 %26, %24
  br i1 %27, label %18, label %28

28:                                               ; preds = %18, %10, %6
  %29 = tail call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APInt15clearUnusedBitsEv(%"class.llvm::APInt"* %0) #19
  ret %"class.llvm::APInt"* %29
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntmIERKS0_(%"class.llvm::APInt"*, %"class.llvm::APInt"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 65
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %10, %8
  store i64 %11, i64* %9, align 8
  br label %39

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %14 = bitcast %union.anon* %13 to i64**
  %15 = load i64*, i64** %14, align 8
  %16 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %17 = bitcast %union.anon* %16 to i64**
  %18 = load i64*, i64** %17, align 8
  %19 = zext i32 %4 to i64
  %20 = add nuw nsw i64 %19, 63
  %21 = lshr i64 %20, 6
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %39, label %23

23:                                               ; preds = %12, %23
  %24 = phi i64 [ %37, %23 ], [ 0, %12 ]
  %25 = phi i1 [ %35, %23 ], [ false, %12 ]
  %26 = getelementptr inbounds i64, i64* %15, i64 %24
  %27 = load i64, i64* %26, align 8
  %28 = zext i1 %25 to i64
  %29 = sub i64 %27, %28
  %30 = getelementptr inbounds i64, i64* %18, i64 %24
  %31 = load i64, i64* %30, align 8
  %32 = icmp ult i64 %29, %31
  %33 = icmp eq i64 %27, 0
  %34 = and i1 %25, %33
  %35 = or i1 %32, %34
  %36 = sub i64 %29, %31
  store i64 %36, i64* %26, align 8
  %37 = add nuw nsw i64 %24, 1
  %38 = icmp eq i64 %37, %21
  br i1 %38, label %39, label %23

39:                                               ; preds = %23, %12, %6
  %40 = tail call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APInt15clearUnusedBitsEv(%"class.llvm::APInt"* %0) #19
  ret %"class.llvm::APInt"* %40
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntmIEm(%"class.llvm::APInt"*, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 65
  br i1 %5, label %6, label %10

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %8, %1
  store i64 %9, i64* %7, align 8
  br label %28

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %12 = bitcast %union.anon* %11 to i64**
  %13 = load i64*, i64** %12, align 8
  %14 = zext i32 %4 to i64
  %15 = add nuw nsw i64 %14, 63
  %16 = lshr i64 %15, 6
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %28, label %18

18:                                               ; preds = %10, %18
  %19 = phi i64 [ %25, %18 ], [ 0, %10 ]
  %20 = phi i64 [ 1, %18 ], [ %1, %10 ]
  %21 = getelementptr inbounds i64, i64* %13, i64 %19
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %22, %20
  store i64 %23, i64* %21, align 8
  %24 = icmp ult i64 %22, %20
  %25 = add nuw nsw i64 %19, 1
  %26 = icmp ult i64 %25, %16
  %27 = and i1 %26, %24
  br i1 %27, label %18, label %28

28:                                               ; preds = %18, %10, %6
  %29 = tail call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APInt15clearUnusedBitsEv(%"class.llvm::APInt"* %0) #19
  ret %"class.llvm::APInt"* %29
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntmLERKS0_(%"class.llvm::APInt"* returned, %"class.llvm::APInt"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 65
  br i1 %5, label %6, label %13

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = mul i64 %10, %8
  store i64 %11, i64* %9, align 8
  %12 = tail call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APInt15clearUnusedBitsEv(%"class.llvm::APInt"* %0) #19
  br label %182

13:                                               ; preds = %2
  %14 = tail call i32 @_ZNK4llvm5APInt25countLeadingZerosSlowCaseEv(%"class.llvm::APInt"* %0) #20
  %15 = sub i32 %4, %14
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %182, label %17

17:                                               ; preds = %13
  %18 = add i32 %15, -1
  %19 = lshr i32 %18, 6
  %20 = add nuw nsw i32 %19, 1
  %21 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = icmp ult i32 %22, 65
  br i1 %23, label %24, label %31

24:                                               ; preds = %17
  %25 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = tail call i64 @llvm.ctlz.i64(i64 %26, i1 false) #17, !range !2
  %28 = trunc i64 %27 to i32
  %29 = add nsw i32 %22, -64
  %30 = add i32 %29, %28
  br label %33

31:                                               ; preds = %17
  %32 = tail call i32 @_ZNK4llvm5APInt25countLeadingZerosSlowCaseEv(%"class.llvm::APInt"* %1) #20
  br label %33

33:                                               ; preds = %24, %31
  %34 = phi i32 [ %30, %24 ], [ %32, %31 ]
  %35 = sub i32 %22, %34
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %57, label %37

37:                                               ; preds = %33
  %38 = add i32 %35, -1
  %39 = lshr i32 %38, 6
  %40 = add nuw nsw i32 %39, 1
  %41 = add nuw nsw i32 %40, %20
  %42 = shl nuw nsw i32 %41, 3
  %43 = zext i32 %42 to i64
  %44 = tail call i8* @_Znam(i64 %43) #18
  %45 = bitcast i8* %44 to i64*
  %46 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %47 = bitcast %union.anon* %46 to i64**
  %48 = load i64*, i64** %47, align 8
  %49 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %50 = bitcast %union.anon* %49 to i64**
  %51 = load i64*, i64** %50, align 8
  %52 = load i64, i64* %51, align 8
  %53 = and i64 %52, 4294967295
  %54 = lshr i64 %52, 32
  %55 = zext i32 %20 to i64
  %56 = bitcast i64* %48 to i8*
  br label %65

57:                                               ; preds = %33
  %58 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %59 = bitcast %union.anon* %58 to i8**
  %60 = load i8*, i8** %59, align 8
  %61 = zext i32 %4 to i64
  %62 = add nuw nsw i64 %61, 63
  %63 = lshr i64 %62, 3
  %64 = and i64 %63, 1073741816
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %60, i8 0, i64 %64, i1 false) #17
  br label %182

65:                                               ; preds = %65, %37
  %66 = phi i64 [ 0, %37 ], [ %101, %65 ]
  %67 = phi i64 [ 0, %37 ], [ %100, %65 ]
  %68 = getelementptr inbounds i64, i64* %48, i64 %66
  %69 = load i64, i64* %68, align 8
  %70 = and i64 %69, 4294967295
  %71 = lshr i64 %69, 32
  %72 = mul nuw i64 %70, %53
  %73 = add i64 %72, %67
  %74 = getelementptr inbounds i64, i64* %45, i64 %66
  %75 = icmp ult i64 %73, %67
  %76 = mul nuw i64 %71, %53
  %77 = lshr i64 %73, 32
  %78 = add i64 %77, %76
  %79 = select i1 %75, i64 4294967296, i64 0
  %80 = add i64 %78, %79
  %81 = icmp eq i64 %80, 0
  %82 = and i1 %75, %81
  %83 = mul nuw i64 %70, %54
  %84 = and i64 %83, 4294967295
  %85 = add i64 %80, %84
  %86 = shl i64 %85, 32
  %87 = and i64 %73, 4294967295
  %88 = or i64 %86, %87
  store i64 %88, i64* %74, align 8
  %89 = icmp ne i64 %85, 0
  %90 = xor i1 %81, %82
  %91 = or i1 %89, %90
  %92 = xor i1 %91, true
  %93 = or i1 %82, %92
  %94 = select i1 %93, i64 4294967296, i64 0
  %95 = lshr i64 %85, 32
  %96 = or i64 %94, %95
  %97 = lshr i64 %83, 32
  %98 = mul nuw i64 %71, %54
  %99 = add i64 %97, %98
  %100 = add i64 %99, %96
  %101 = add nuw nsw i64 %66, 1
  %102 = icmp eq i64 %101, %55
  br i1 %102, label %103, label %65

103:                                              ; preds = %65
  %104 = getelementptr inbounds i64, i64* %45, i64 %55
  store i64 %100, i64* %104, align 8
  %105 = icmp eq i32 %39, 0
  br i1 %105, label %165, label %106

106:                                              ; preds = %103
  %107 = zext i32 %40 to i64
  br label %108

108:                                              ; preds = %114, %106
  %109 = phi i64 [ 1, %106 ], [ %119, %114 ]
  %110 = getelementptr inbounds i64, i64* %51, i64 %109
  %111 = load i64, i64* %110, align 8
  %112 = and i64 %111, 4294967295
  %113 = lshr i64 %111, 32
  br label %121

114:                                              ; preds = %121
  %115 = trunc i64 %109 to i32
  %116 = add i32 %20, %115
  %117 = zext i32 %116 to i64
  %118 = getelementptr inbounds i64, i64* %45, i64 %117
  store i64 %162, i64* %118, align 8
  %119 = add nuw nsw i64 %109, 1
  %120 = icmp eq i64 %119, %107
  br i1 %120, label %165, label %108

121:                                              ; preds = %108, %121
  %122 = phi i64 [ %163, %121 ], [ 0, %108 ]
  %123 = phi i64 [ %162, %121 ], [ 0, %108 ]
  %124 = getelementptr inbounds i64, i64* %48, i64 %122
  %125 = load i64, i64* %124, align 8
  %126 = and i64 %125, 4294967295
  %127 = lshr i64 %125, 32
  %128 = mul nuw i64 %126, %112
  %129 = add i64 %128, %123
  %130 = icmp ult i64 %129, %123
  %131 = select i1 %130, i64 4294967296, i64 0
  %132 = mul nuw i64 %127, %112
  %133 = lshr i64 %129, 32
  %134 = add i64 %133, %132
  %135 = add i64 %134, %131
  %136 = icmp eq i64 %135, 0
  %137 = and i1 %130, %136
  %138 = mul nuw i64 %126, %113
  %139 = and i64 %138, 4294967295
  %140 = add i64 %135, %139
  %141 = shl i64 %140, 32
  %142 = and i64 %129, 4294967295
  %143 = or i64 %141, %142
  %144 = add nuw nsw i64 %122, %109
  %145 = getelementptr inbounds i64, i64* %45, i64 %144
  %146 = load i64, i64* %145, align 8
  %147 = add i64 %143, %146
  store i64 %147, i64* %145, align 8
  %148 = icmp ne i64 %140, 0
  %149 = xor i1 %136, %137
  %150 = or i1 %148, %149
  %151 = xor i1 %150, true
  %152 = or i1 %137, %151
  %153 = select i1 %152, i64 4294967296, i64 0
  %154 = lshr i64 %140, 32
  %155 = or i64 %153, %154
  %156 = icmp ult i64 %147, %143
  %157 = zext i1 %156 to i64
  %158 = lshr i64 %138, 32
  %159 = mul nuw i64 %127, %113
  %160 = add i64 %158, %159
  %161 = add i64 %160, %157
  %162 = add i64 %161, %155
  %163 = add nuw nsw i64 %122, 1
  %164 = icmp eq i64 %163, %55
  br i1 %164, label %114, label %121

165:                                              ; preds = %114, %103
  %166 = bitcast %union.anon* %46 to i8**
  %167 = zext i32 %4 to i64
  %168 = add nuw nsw i64 %167, 63
  %169 = lshr i64 %168, 3
  %170 = and i64 %169, 1073741816
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %56, i8 0, i64 %170, i1 false) #17
  %171 = load i32, i32* %3, align 8
  %172 = zext i32 %171 to i64
  %173 = add nuw nsw i64 %172, 63
  %174 = lshr i64 %173, 6
  %175 = trunc i64 %174 to i32
  %176 = icmp ult i32 %41, %175
  %177 = select i1 %176, i32 %41, i32 %175
  %178 = load i8*, i8** %166, align 8
  %179 = shl nuw nsw i32 %177, 3
  %180 = zext i32 %179 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %178, i8* nonnull align 8 %44, i64 %180, i1 false)
  %181 = tail call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APInt15clearUnusedBitsEv(%"class.llvm::APInt"* %0) #19
  tail call void @_ZdaPv(i8* nonnull %44) #18
  br label %182

182:                                              ; preds = %13, %165, %57, %6
  ret %"class.llvm::APInt"* %0
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntaNERKS0_(%"class.llvm::APInt"* returned, %"class.llvm::APInt"* nocapture readonly dereferenceable(16)) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 65
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = and i64 %10, %8
  store i64 %11, i64* %9, align 8
  br label %33

12:                                               ; preds = %2
  %13 = zext i32 %4 to i64
  %14 = add nuw nsw i64 %13, 63
  %15 = lshr i64 %14, 6
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %33, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %19 = bitcast %union.anon* %18 to i64**
  %20 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %21 = bitcast %union.anon* %20 to i64**
  br label %22

22:                                               ; preds = %22, %17
  %23 = phi i64 [ 0, %17 ], [ %31, %22 ]
  %24 = load i64*, i64** %19, align 8
  %25 = getelementptr inbounds i64, i64* %24, i64 %23
  %26 = load i64, i64* %25, align 8
  %27 = load i64*, i64** %21, align 8
  %28 = getelementptr inbounds i64, i64* %27, i64 %23
  %29 = load i64, i64* %28, align 8
  %30 = and i64 %29, %26
  store i64 %30, i64* %28, align 8
  %31 = add nuw nsw i64 %23, 1
  %32 = icmp eq i64 %31, %15
  br i1 %32, label %33, label %22

33:                                               ; preds = %22, %12, %6
  ret %"class.llvm::APInt"* %0
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntoRERKS0_(%"class.llvm::APInt"* returned, %"class.llvm::APInt"* nocapture readonly dereferenceable(16)) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 65
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = or i64 %10, %8
  store i64 %11, i64* %9, align 8
  br label %33

12:                                               ; preds = %2
  %13 = zext i32 %4 to i64
  %14 = add nuw nsw i64 %13, 63
  %15 = lshr i64 %14, 6
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %33, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %19 = bitcast %union.anon* %18 to i64**
  %20 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %21 = bitcast %union.anon* %20 to i64**
  br label %22

22:                                               ; preds = %22, %17
  %23 = phi i64 [ 0, %17 ], [ %31, %22 ]
  %24 = load i64*, i64** %19, align 8
  %25 = getelementptr inbounds i64, i64* %24, i64 %23
  %26 = load i64, i64* %25, align 8
  %27 = load i64*, i64** %21, align 8
  %28 = getelementptr inbounds i64, i64* %27, i64 %23
  %29 = load i64, i64* %28, align 8
  %30 = or i64 %29, %26
  store i64 %30, i64* %28, align 8
  %31 = add nuw nsw i64 %23, 1
  %32 = icmp eq i64 %31, %15
  br i1 %32, label %33, label %22

33:                                               ; preds = %22, %12, %6
  ret %"class.llvm::APInt"* %0
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APInteOERKS0_(%"class.llvm::APInt"*, %"class.llvm::APInt"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 65
  br i1 %5, label %6, label %13

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = xor i64 %10, %8
  store i64 %11, i64* %9, align 8
  %12 = tail call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APInt15clearUnusedBitsEv(%"class.llvm::APInt"* %0) #19
  br label %36

13:                                               ; preds = %2
  %14 = zext i32 %4 to i64
  %15 = add nuw nsw i64 %14, 63
  %16 = lshr i64 %15, 6
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %23, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %20 = bitcast %union.anon* %19 to i64**
  %21 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %22 = bitcast %union.anon* %21 to i64**
  br label %25

23:                                               ; preds = %25, %13
  %24 = tail call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APInt15clearUnusedBitsEv(%"class.llvm::APInt"* %0) #19
  br label %36

25:                                               ; preds = %25, %18
  %26 = phi i64 [ 0, %18 ], [ %34, %25 ]
  %27 = load i64*, i64** %20, align 8
  %28 = getelementptr inbounds i64, i64* %27, i64 %26
  %29 = load i64, i64* %28, align 8
  %30 = load i64*, i64** %22, align 8
  %31 = getelementptr inbounds i64, i64* %30, i64 %26
  %32 = load i64, i64* %31, align 8
  %33 = xor i64 %32, %29
  store i64 %33, i64* %31, align 8
  %34 = add nuw nsw i64 %26, 1
  %35 = icmp eq i64 %34, %16
  br i1 %35, label %23, label %25

36:                                               ; preds = %23, %6
  %37 = phi %"class.llvm::APInt"* [ %0, %6 ], [ %24, %23 ]
  ret %"class.llvm::APInt"* %37
}

; Function Attrs: nofree nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt11AndSlowCaseERKS0_(%"class.llvm::APInt"* noalias nocapture sret, %"class.llvm::APInt"* nocapture readonly, %"class.llvm::APInt"* nocapture readonly dereferenceable(16)) local_unnamed_addr #5 align 2 {
  %4 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = zext i32 %5 to i64
  %7 = add nuw nsw i64 %6, 63
  %8 = lshr i64 %7, 6
  %9 = shl nuw nsw i64 %8, 3
  %10 = tail call i8* @_Znam(i64 %9) #18
  %11 = bitcast i8* %10 to i64*
  %12 = icmp eq i64 %8, 0
  br i1 %12, label %20, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %15 = bitcast %union.anon* %14 to i64**
  %16 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1
  %17 = bitcast %union.anon* %16 to i64**
  %18 = load i64*, i64** %15, align 8
  %19 = load i64*, i64** %17, align 8
  br label %24

20:                                               ; preds = %24, %3
  %21 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  store i32 %5, i32* %21, align 8
  %22 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %23 = bitcast %union.anon* %22 to i8**
  store i8* %10, i8** %23, align 8
  ret void

24:                                               ; preds = %24, %13
  %25 = phi i64 [ 0, %13 ], [ %32, %24 ]
  %26 = getelementptr inbounds i64, i64* %18, i64 %25
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds i64, i64* %19, i64 %25
  %29 = load i64, i64* %28, align 8
  %30 = and i64 %29, %27
  %31 = getelementptr inbounds i64, i64* %11, i64 %25
  store i64 %30, i64* %31, align 8
  %32 = add nuw nsw i64 %25, 1
  %33 = icmp eq i64 %32, %8
  br i1 %33, label %20, label %24
}

; Function Attrs: nofree nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt10OrSlowCaseERKS0_(%"class.llvm::APInt"* noalias nocapture sret, %"class.llvm::APInt"* nocapture readonly, %"class.llvm::APInt"* nocapture readonly dereferenceable(16)) local_unnamed_addr #5 align 2 {
  %4 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = zext i32 %5 to i64
  %7 = add nuw nsw i64 %6, 63
  %8 = lshr i64 %7, 6
  %9 = shl nuw nsw i64 %8, 3
  %10 = tail call i8* @_Znam(i64 %9) #18
  %11 = bitcast i8* %10 to i64*
  %12 = icmp eq i64 %8, 0
  br i1 %12, label %20, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %15 = bitcast %union.anon* %14 to i64**
  %16 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1
  %17 = bitcast %union.anon* %16 to i64**
  %18 = load i64*, i64** %15, align 8
  %19 = load i64*, i64** %17, align 8
  br label %24

20:                                               ; preds = %24, %3
  %21 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  store i32 %5, i32* %21, align 8
  %22 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %23 = bitcast %union.anon* %22 to i8**
  store i8* %10, i8** %23, align 8
  ret void

24:                                               ; preds = %24, %13
  %25 = phi i64 [ 0, %13 ], [ %32, %24 ]
  %26 = getelementptr inbounds i64, i64* %18, i64 %25
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds i64, i64* %19, i64 %25
  %29 = load i64, i64* %28, align 8
  %30 = or i64 %29, %27
  %31 = getelementptr inbounds i64, i64* %11, i64 %25
  store i64 %30, i64* %31, align 8
  %32 = add nuw nsw i64 %25, 1
  %33 = icmp eq i64 %32, %8
  br i1 %33, label %20, label %24
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt11XorSlowCaseERKS0_(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"* nocapture readonly, %"class.llvm::APInt"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = zext i32 %5 to i64
  %7 = add nuw nsw i64 %6, 63
  %8 = lshr i64 %7, 6
  %9 = shl nuw nsw i64 %8, 3
  %10 = tail call i8* @_Znam(i64 %9) #18
  %11 = bitcast i8* %10 to i64*
  %12 = icmp eq i64 %8, 0
  br i1 %12, label %20, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %15 = bitcast %union.anon* %14 to i64**
  %16 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1
  %17 = bitcast %union.anon* %16 to i64**
  %18 = load i64*, i64** %15, align 8
  %19 = load i64*, i64** %17, align 8
  br label %26

20:                                               ; preds = %26, %3
  %21 = bitcast %"class.llvm::APInt"* %0 to i64*
  store i64 -6148914691236517206, i64* %21, align 8
  %22 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  store i32 %5, i32* %22, align 8
  %23 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %24 = bitcast %union.anon* %23 to i8**
  store i8* %10, i8** %24, align 8
  %25 = tail call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APInt15clearUnusedBitsEv(%"class.llvm::APInt"* %0) #19
  ret void

26:                                               ; preds = %26, %13
  %27 = phi i64 [ 0, %13 ], [ %34, %26 ]
  %28 = getelementptr inbounds i64, i64* %18, i64 %27
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds i64, i64* %19, i64 %27
  %31 = load i64, i64* %30, align 8
  %32 = xor i64 %31, %29
  %33 = getelementptr inbounds i64, i64* %11, i64 %27
  store i64 %32, i64* %33, align 8
  %34 = add nuw nsw i64 %27, 1
  %35 = icmp eq i64 %34, %8
  br i1 %35, label %20, label %26
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APIntmlERKS0_(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"* nocapture readonly, %"class.llvm::APInt"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.llvm::APInt", align 8
  %5 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp ult i32 %6, 65
  br i1 %7, label %8, label %14

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = mul i64 %12, %10
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %6, i64 %13, i1 zeroext false) #19
  br label %34

14:                                               ; preds = %3
  %15 = bitcast %"class.llvm::APInt"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %15) #17
  %16 = bitcast %"class.llvm::APInt"* %4 to i64*
  store i64 -6148914691236517206, i64* %16, align 8
  %17 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %4, i64 0, i32 0
  store i32 %6, i32* %17, align 8
  %18 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %4, i64 0, i32 1, i32 0
  %19 = zext i32 %6 to i64
  %20 = add nuw nsw i64 %19, 63
  %21 = lshr i64 %20, 6
  %22 = shl nuw nsw i64 %21, 3
  %23 = tail call i8* @_Znam(i64 %22) #18
  %24 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %4, i64 0, i32 1
  %25 = bitcast %union.anon* %24 to i8**
  store i8* %23, i8** %25, align 8
  %26 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %27 = bitcast %union.anon* %26 to i8**
  %28 = load i8*, i8** %27, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %23, i8* align 8 %28, i64 %22, i1 false) #17
  %29 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntmLERKS0_(%"class.llvm::APInt"* nonnull %4, %"class.llvm::APInt"* dereferenceable(16) %2) #19
  %30 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %31 = load i32, i32* %17, align 8
  store i32 %31, i32* %30, align 8
  %32 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %33 = load i64, i64* %18, align 8
  store i64 %33, i64* %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %15) #17
  br label %34

34:                                               ; preds = %14, %8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"*, i32, i64, i1 zeroext) unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  store i32 %1, i32* %5, align 8
  %6 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  store i64 0, i64* %6, align 8
  %7 = icmp ult i32 %1, 65
  br i1 %7, label %8, label %9

8:                                                ; preds = %4
  store i64 %2, i64* %6, align 8
  br label %10

9:                                                ; preds = %4
  tail call void @_ZN4llvm5APInt12initSlowCaseEmb(%"class.llvm::APInt"* %0, i64 %2, i1 zeroext %3) #19
  br label %10

10:                                               ; preds = %9, %8
  %11 = tail call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APInt15clearUnusedBitsEv(%"class.llvm::APInt"* %0) #19
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm5APIntC2ERKS0_(%"class.llvm::APInt"*, %"class.llvm::APInt"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  store i32 %5, i32* %3, align 8
  %6 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  store i64 0, i64* %6, align 8
  %7 = icmp ult i32 %5, 65
  br i1 %7, label %8, label %11

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %6, align 8
  br label %22

11:                                               ; preds = %2
  %12 = zext i32 %5 to i64
  %13 = add nuw nsw i64 %12, 63
  %14 = lshr i64 %13, 6
  %15 = shl nuw nsw i64 %14, 3
  %16 = tail call i8* @_Znam(i64 %15) #18
  %17 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %18 = bitcast %union.anon* %17 to i8**
  store i8* %16, i8** %18, align 8
  %19 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %20 = bitcast %union.anon* %19 to i8**
  %21 = load i8*, i8** %20, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %16, i8* align 8 %21, i64 %15, i1 false) #17
  br label %22

22:                                               ; preds = %11, %8
  ret void
}

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden zeroext i1 @_ZNK4llvm5APInt13EqualSlowCaseERKS0_(%"class.llvm::APInt"* nocapture readonly, %"class.llvm::APInt"* nocapture readonly dereferenceable(16)) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %4 = bitcast %union.anon* %3 to i64**
  %5 = load i64*, i64** %4, align 8
  %6 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = zext i32 %7 to i64
  %9 = add nuw nsw i64 %8, 63
  %10 = lshr i64 %9, 6
  %11 = getelementptr inbounds i64, i64* %5, i64 %10
  %12 = icmp eq i64 %10, 0
  br i1 %12, label %27, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %15 = bitcast %union.anon* %14 to i64**
  %16 = load i64*, i64** %15, align 8
  br label %17

17:                                               ; preds = %13, %23
  %18 = phi i64* [ %25, %23 ], [ %16, %13 ]
  %19 = phi i64* [ %24, %23 ], [ %5, %13 ]
  %20 = load i64, i64* %19, align 8
  %21 = load i64, i64* %18, align 8
  %22 = icmp eq i64 %20, %21
  br i1 %22, label %23, label %27

23:                                               ; preds = %17
  %24 = getelementptr inbounds i64, i64* %19, i64 1
  %25 = getelementptr inbounds i64, i64* %18, i64 1
  %26 = icmp eq i64* %24, %11
  br i1 %26, label %27, label %17

27:                                               ; preds = %17, %23, %2
  %28 = phi i1 [ true, %2 ], [ true, %23 ], [ false, %17 ]
  ret i1 %28
}

; Function Attrs: nounwind optsize readonly ssp uwtable
define hidden zeroext i1 @_ZNK4llvm5APInt13EqualSlowCaseEm(%"class.llvm::APInt"* nocapture readonly, i64) local_unnamed_addr #7 align 2 {
  %3 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 65
  br i1 %5, label %6, label %13

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = tail call i64 @llvm.ctlz.i64(i64 %8, i1 false) #17, !range !2
  %10 = trunc i64 %9 to i32
  %11 = add nsw i32 %4, -64
  %12 = add i32 %11, %10
  br label %15

13:                                               ; preds = %2
  %14 = tail call i32 @_ZNK4llvm5APInt25countLeadingZerosSlowCaseEv(%"class.llvm::APInt"* %0) #20
  br label %15

15:                                               ; preds = %6, %13
  %16 = phi i32 [ %12, %6 ], [ %14, %13 ]
  %17 = sub i32 %4, %16
  %18 = icmp ult i32 %17, 65
  br i1 %18, label %19, label %25

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %21 = bitcast %union.anon* %20 to i64**
  %22 = load i64*, i64** %21, align 8
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %23, %1
  br label %25

25:                                               ; preds = %15, %19
  %26 = phi i1 [ %24, %19 ], [ false, %15 ]
  ret i1 %26
}

; Function Attrs: nounwind optsize readonly ssp uwtable
define hidden zeroext i1 @_ZNK4llvm5APInt3ultERKS0_(%"class.llvm::APInt"* nocapture readonly, %"class.llvm::APInt"* nocapture readonly dereferenceable(16)) local_unnamed_addr #7 align 2 {
  %3 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 65
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp ult i64 %8, %10
  br label %69

12:                                               ; preds = %2
  %13 = tail call i32 @_ZNK4llvm5APInt25countLeadingZerosSlowCaseEv(%"class.llvm::APInt"* %0) #20
  %14 = sub i32 %4, %13
  %15 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = icmp ult i32 %16, 65
  br i1 %17, label %18, label %25

18:                                               ; preds = %12
  %19 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = tail call i64 @llvm.ctlz.i64(i64 %20, i1 false) #17, !range !2
  %22 = trunc i64 %21 to i32
  %23 = add nsw i32 %16, -64
  %24 = add i32 %23, %22
  br label %27

25:                                               ; preds = %12
  %26 = tail call i32 @_ZNK4llvm5APInt25countLeadingZerosSlowCaseEv(%"class.llvm::APInt"* %1) #20
  br label %27

27:                                               ; preds = %18, %25
  %28 = phi i32 [ %24, %18 ], [ %26, %25 ]
  %29 = sub i32 %16, %28
  %30 = icmp ult i32 %14, %29
  br i1 %30, label %69, label %31

31:                                               ; preds = %27
  %32 = icmp ult i32 %29, %14
  br i1 %32, label %69, label %33

33:                                               ; preds = %31
  %34 = icmp ult i32 %14, 65
  %35 = icmp ult i32 %29, 65
  %36 = and i1 %34, %35
  br i1 %36, label %37, label %47

37:                                               ; preds = %33
  %38 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %39 = bitcast %union.anon* %38 to i64**
  %40 = load i64*, i64** %39, align 8
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %43 = bitcast %union.anon* %42 to i64**
  %44 = load i64*, i64** %43, align 8
  %45 = load i64, i64* %44, align 8
  %46 = icmp ult i64 %41, %45
  br label %69

47:                                               ; preds = %33
  %48 = add i32 %14, -1
  %49 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %50 = bitcast %union.anon* %49 to i64**
  %51 = load i64*, i64** %50, align 8
  %52 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %53 = bitcast %union.anon* %52 to i64**
  %54 = load i64*, i64** %53, align 8
  %55 = lshr i32 %48, 6
  %56 = zext i32 %55 to i64
  br label %60

57:                                               ; preds = %67
  %58 = add nsw i64 %61, -1
  %59 = icmp sgt i64 %61, 0
  br i1 %59, label %60, label %69

60:                                               ; preds = %47, %57
  %61 = phi i64 [ %56, %47 ], [ %58, %57 ]
  %62 = getelementptr inbounds i64, i64* %51, i64 %61
  %63 = load i64, i64* %62, align 8
  %64 = getelementptr inbounds i64, i64* %54, i64 %61
  %65 = load i64, i64* %64, align 8
  %66 = icmp ugt i64 %63, %65
  br i1 %66, label %69, label %67

67:                                               ; preds = %60
  %68 = icmp ult i64 %63, %65
  br i1 %68, label %69, label %57

69:                                               ; preds = %67, %60, %57, %37, %27, %31, %6
  %70 = phi i1 [ %11, %6 ], [ %46, %37 ], [ true, %27 ], [ false, %31 ], [ false, %60 ], [ true, %67 ], [ false, %57 ]
  ret i1 %70
}

; Function Attrs: nounwind optsize readonly ssp uwtable
define hidden zeroext i1 @_ZNK4llvm5APInt3sltERKS0_(%"class.llvm::APInt"* nocapture readonly, %"class.llvm::APInt"* nocapture readonly dereferenceable(16)) local_unnamed_addr #7 align 2 {
  %3 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 65
  br i1 %5, label %6, label %18

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = sub nuw nsw i32 64, %4
  %10 = zext i32 %9 to i64
  %11 = shl i64 %8, %10
  %12 = ashr i64 %11, %10
  %13 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = shl i64 %14, %10
  %16 = ashr i64 %15, %10
  %17 = icmp slt i64 %12, %16
  br label %53

18:                                               ; preds = %2
  %19 = add i32 %4, -1
  %20 = and i32 %19, 63
  %21 = zext i32 %20 to i64
  %22 = shl i64 1, %21
  %23 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %24 = bitcast %union.anon* %23 to i64**
  %25 = load i64*, i64** %24, align 8
  %26 = lshr i32 %19, 6
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds i64, i64* %25, i64 %27
  %29 = load i64, i64* %28, align 8
  %30 = and i64 %29, %22
  %31 = icmp ne i64 %30, 0
  %32 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %33 = load i32, i32* %32, align 8
  %34 = add i32 %33, -1
  %35 = and i32 %34, 63
  %36 = zext i32 %35 to i64
  %37 = shl i64 1, %36
  %38 = icmp ult i32 %33, 65
  %39 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %40 = getelementptr inbounds %union.anon, %union.anon* %39, i64 0, i32 0
  %41 = bitcast %union.anon* %39 to i64**
  %42 = load i64*, i64** %41, align 8
  %43 = lshr i32 %34, 6
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds i64, i64* %42, i64 %44
  %46 = select i1 %38, i64* %40, i64* %45
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %37, %47
  %49 = icmp ne i64 %48, 0
  %50 = xor i1 %31, %49
  br i1 %50, label %53, label %51

51:                                               ; preds = %18
  %52 = tail call zeroext i1 @_ZNK4llvm5APInt3ultERKS0_(%"class.llvm::APInt"* %0, %"class.llvm::APInt"* dereferenceable(16) %1) #19
  br label %53

53:                                               ; preds = %51, %18, %6
  %54 = phi i1 [ %17, %6 ], [ %52, %51 ], [ %31, %18 ]
  ret i1 %54
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden void @_ZN4llvm5APInt6setBitEj(%"class.llvm::APInt"* nocapture, i32) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 65
  %6 = and i32 %1, 63
  %7 = zext i32 %6 to i64
  %8 = shl i64 1, %7
  %9 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  br i1 %5, label %10, label %12

10:                                               ; preds = %2
  %11 = getelementptr inbounds %union.anon, %union.anon* %9, i64 0, i32 0
  br label %18

12:                                               ; preds = %2
  %13 = bitcast %union.anon* %9 to i64**
  %14 = load i64*, i64** %13, align 8
  %15 = lshr i32 %1, 6
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds i64, i64* %14, i64 %16
  br label %18

18:                                               ; preds = %12, %10
  %19 = phi i64* [ %17, %12 ], [ %11, %10 ]
  %20 = load i64, i64* %19, align 8
  %21 = or i64 %20, %8
  store i64 %21, i64* %19, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden void @_ZN4llvm5APInt8clearBitEj(%"class.llvm::APInt"* nocapture, i32) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 65
  %6 = and i32 %1, 63
  %7 = zext i32 %6 to i64
  %8 = shl i64 1, %7
  %9 = xor i64 %8, -1
  %10 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  br i1 %5, label %11, label %13

11:                                               ; preds = %2
  %12 = getelementptr inbounds %union.anon, %union.anon* %10, i64 0, i32 0
  br label %19

13:                                               ; preds = %2
  %14 = bitcast %union.anon* %10 to i64**
  %15 = load i64*, i64** %14, align 8
  %16 = lshr i32 %1, 6
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds i64, i64* %15, i64 %17
  br label %19

19:                                               ; preds = %13, %11
  %20 = phi i64* [ %18, %13 ], [ %12, %11 ]
  %21 = load i64, i64* %20, align 8
  %22 = and i64 %21, %9
  store i64 %22, i64* %20, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden void @_ZN4llvm5APInt7flipBitEj(%"class.llvm::APInt"* nocapture, i32) local_unnamed_addr #4 align 2 {
  %3 = and i32 %1, 63
  %4 = zext i32 %3 to i64
  %5 = shl i64 1, %4
  %6 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp ult i32 %7, 65
  %9 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  br i1 %8, label %10, label %12

10:                                               ; preds = %2
  %11 = getelementptr inbounds %union.anon, %union.anon* %9, i64 0, i32 0
  br label %18

12:                                               ; preds = %2
  %13 = bitcast %union.anon* %9 to i64**
  %14 = load i64*, i64** %13, align 8
  %15 = lshr i32 %1, 6
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds i64, i64* %14, i64 %16
  br label %18

18:                                               ; preds = %10, %12
  %19 = phi i64* [ %11, %10 ], [ %17, %12 ]
  %20 = load i64, i64* %19, align 8
  %21 = and i64 %20, %5
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %37, label %23

23:                                               ; preds = %18
  %24 = xor i64 %5, -1
  br i1 %8, label %25, label %29

25:                                               ; preds = %23
  %26 = getelementptr inbounds %union.anon, %union.anon* %9, i64 0, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = and i64 %27, %24
  store i64 %28, i64* %26, align 8
  br label %50

29:                                               ; preds = %23
  %30 = bitcast %union.anon* %9 to i64**
  %31 = load i64*, i64** %30, align 8
  %32 = lshr i32 %1, 6
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds i64, i64* %31, i64 %33
  %35 = load i64, i64* %34, align 8
  %36 = and i64 %35, %24
  store i64 %36, i64* %34, align 8
  br label %50

37:                                               ; preds = %18
  br i1 %8, label %38, label %42

38:                                               ; preds = %37
  %39 = getelementptr inbounds %union.anon, %union.anon* %9, i64 0, i32 0
  %40 = load i64, i64* %39, align 8
  %41 = or i64 %40, %5
  store i64 %41, i64* %39, align 8
  br label %50

42:                                               ; preds = %37
  %43 = bitcast %union.anon* %9 to i64**
  %44 = load i64*, i64** %43, align 8
  %45 = lshr i32 %1, 6
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds i64, i64* %44, i64 %46
  %48 = load i64, i64* %47, align 8
  %49 = or i64 %48, %5
  store i64 %49, i64* %47, align 8
  br label %50

50:                                               ; preds = %42, %38, %29, %25
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN4llvm5APInt13getBitsNeededENS_9StringRefEh(i8*, i64, i8 zeroext) local_unnamed_addr #0 align 2 {
  %4 = alloca <2 x i64>, align 16
  %5 = bitcast <2 x i64>* %4 to %"class.llvm::APInt"*
  %6 = load i8, i8* %0, align 1
  %7 = icmp eq i8 %6, 45
  %8 = icmp eq i8 %6, 43
  %9 = or i1 %7, %8
  %10 = getelementptr inbounds i8, i8* %0, i64 1
  %11 = zext i1 %9 to i64
  %12 = sub i64 %1, %11
  %13 = select i1 %9, i8* %10, i8* %0
  switch i8 %2, label %28 [
    i8 2, label %14
    i8 8, label %18
    i8 16, label %23
  ]

14:                                               ; preds = %3
  %15 = zext i1 %7 to i64
  %16 = add i64 %12, %15
  %17 = trunc i64 %16 to i32
  br label %72

18:                                               ; preds = %3
  %19 = mul i64 %12, 3
  %20 = zext i1 %7 to i64
  %21 = add i64 %19, %20
  %22 = trunc i64 %21 to i32
  br label %72

23:                                               ; preds = %3
  %24 = shl i64 %12, 2
  %25 = zext i1 %7 to i64
  %26 = or i64 %24, %25
  %27 = trunc i64 %26 to i32
  br label %72

28:                                               ; preds = %3
  %29 = icmp eq i8 %2, 10
  %30 = icmp eq i64 %12, 1
  br i1 %29, label %31, label %35

31:                                               ; preds = %28
  br i1 %30, label %39, label %32

32:                                               ; preds = %31
  %33 = shl i64 %12, 6
  %34 = udiv i64 %33, 18
  br label %39

35:                                               ; preds = %28
  br i1 %30, label %39, label %36

36:                                               ; preds = %35
  %37 = shl i64 %12, 4
  %38 = udiv i64 %37, 3
  br label %39

39:                                               ; preds = %36, %35, %32, %31
  %40 = phi i64 [ %34, %32 ], [ 4, %31 ], [ %38, %36 ], [ 7, %35 ]
  %41 = trunc i64 %40 to i32
  %42 = bitcast <2 x i64>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %42) #17
  %43 = bitcast <2 x i64>* %4 to i32*
  store <2 x i64> <i64 -6148914691236517206, i64 0>, <2 x i64>* %4, align 16
  store i32 %41, i32* %43, align 16
  call void @_ZN4llvm5APInt10fromStringEjNS_9StringRefEh(%"class.llvm::APInt"* nonnull %5, i32 undef, i8* %13, i64 %12, i8 zeroext %2) #20
  %44 = load i32, i32* %43, align 16
  %45 = icmp ult i32 %44, 65
  br i1 %45, label %46, label %53

46:                                               ; preds = %39
  %47 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1, i32 0
  %48 = load i64, i64* %47, align 8
  %49 = call i64 @llvm.ctlz.i64(i64 %48, i1 false) #17, !range !2
  %50 = trunc i64 %49 to i32
  %51 = add nsw i32 %44, -64
  %52 = add i32 %51, %50
  br label %55

53:                                               ; preds = %39
  %54 = call i32 @_ZNK4llvm5APInt25countLeadingZerosSlowCaseEv(%"class.llvm::APInt"* nonnull %5) #20
  br label %55

55:                                               ; preds = %46, %53
  %56 = phi i32 [ %52, %46 ], [ %54, %53 ]
  %57 = xor i32 %56, -1
  %58 = add i32 %44, %57
  %59 = icmp eq i32 %58, -1
  %60 = select i1 %59, i32 0, i32 %58
  %61 = select i1 %7, i32 2, i32 1
  %62 = add i32 %61, %60
  %63 = icmp ugt i32 %44, 64
  br i1 %63, label %64, label %71

64:                                               ; preds = %55
  %65 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1
  %66 = bitcast %union.anon* %65 to i64**
  %67 = load i64*, i64** %66, align 8
  %68 = icmp eq i64* %67, null
  br i1 %68, label %71, label %69

69:                                               ; preds = %64
  %70 = bitcast i64* %67 to i8*
  call void @_ZdaPv(i8* %70) #18
  br label %71

71:                                               ; preds = %55, %64, %69
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %42) #17
  br label %72

72:                                               ; preds = %71, %23, %18, %14
  %73 = phi i32 [ %17, %14 ], [ %22, %18 ], [ %27, %23 ], [ %62, %71 ]
  ret i32 %73
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i64 @_ZN4llvm10hash_valueERKNS_5APIntE(%"class.llvm::APInt"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 {
  %2 = alloca %"struct.llvm::hashing::detail::hash_combine_recursive_helper", align 8
  %3 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 65
  %6 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  br i1 %5, label %7, label %27

7:                                                ; preds = %1
  %8 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %9 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_combine_recursive_helper", %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %2, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %9) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 120, i1 false) #17
  %10 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_combine_recursive_helper", %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %2, i64 0, i32 2
  %11 = load atomic i8, i8* bitcast (i64* @_ZGVZN4llvm7hashing6detail18get_execution_seedEvE4seed to i8*) acquire, align 8
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %20, !prof !3

13:                                               ; preds = %7
  %14 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN4llvm7hashing6detail18get_execution_seedEvE4seed) #17
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %20, label %16

16:                                               ; preds = %13
  %17 = load i64, i64* @_ZN4llvm7hashing6detail19fixed_seed_overrideE, align 8
  %18 = icmp eq i64 %17, 0
  %19 = select i1 %18, i64 -49064778989728563, i64 %17
  store i64 %19, i64* @_ZZN4llvm7hashing6detail18get_execution_seedEvE4seed, align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN4llvm7hashing6detail18get_execution_seedEvE4seed) #17
  br label %20

20:                                               ; preds = %7, %13, %16
  %21 = load i64, i64* @_ZZN4llvm7hashing6detail18get_execution_seedEvE4seed, align 8
  store i64 %21, i64* %10, align 8
  %22 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_combine_recursive_helper", %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %2, i64 0, i32 0, i64 64
  %23 = load i64, i64* %8, align 8
  %24 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_combine_recursive_helper", %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %2, i64 0, i32 0, i64 8
  %25 = bitcast %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %2 to i64*
  store i64 %23, i64* %25, align 8
  %26 = call i64 @_ZN4llvm7hashing6detail29hash_combine_recursive_helper7combineEmPcS3_(%"struct.llvm::hashing::detail::hash_combine_recursive_helper"* nonnull %2, i64 0, i8* %24, i8* %22) #20
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %9) #17
  br label %35

27:                                               ; preds = %1
  %28 = bitcast %union.anon* %6 to i64**
  %29 = load i64*, i64** %28, align 8
  %30 = zext i32 %4 to i64
  %31 = add nuw nsw i64 %30, 63
  %32 = lshr i64 %31, 6
  %33 = getelementptr inbounds i64, i64* %29, i64 %32
  %34 = tail call i64 @_ZN4llvm7hashing6detail23hash_combine_range_implImEENSt3__19enable_ifIXsr16is_hashable_dataIT_EE5valueENS_9hash_codeEE4typeEPS5_S9_(i64* %29, i64* %33) #20
  br label %35

35:                                               ; preds = %27, %20
  %36 = phi i64 [ %26, %20 ], [ %34, %27 ]
  ret i64 %36
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZNK4llvm5APInt7isSplatEj(%"class.llvm::APInt"*, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.llvm::APInt", align 8
  %4 = bitcast %"class.llvm::APInt"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #17
  call void @_ZNK4llvm5APInt4rotlEj(%"class.llvm::APInt"* nonnull sret %3, %"class.llvm::APInt"* %0, i32 %1) #19
  %5 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp ult i32 %6, 65
  br i1 %7, label %8, label %14

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 1, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %10, %12
  br label %37

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %16 = bitcast %union.anon* %15 to i64**
  %17 = load i64*, i64** %16, align 8
  %18 = zext i32 %6 to i64
  %19 = add nuw nsw i64 %18, 63
  %20 = lshr i64 %19, 6
  %21 = getelementptr inbounds i64, i64* %17, i64 %20
  %22 = icmp eq i64 %20, 0
  br i1 %22, label %37, label %23

23:                                               ; preds = %14
  %24 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 1
  %25 = bitcast %union.anon* %24 to i64**
  %26 = load i64*, i64** %25, align 8
  br label %27

27:                                               ; preds = %33, %23
  %28 = phi i64* [ %35, %33 ], [ %26, %23 ]
  %29 = phi i64* [ %34, %33 ], [ %17, %23 ]
  %30 = load i64, i64* %29, align 8
  %31 = load i64, i64* %28, align 8
  %32 = icmp eq i64 %30, %31
  br i1 %32, label %33, label %37

33:                                               ; preds = %27
  %34 = getelementptr inbounds i64, i64* %29, i64 1
  %35 = getelementptr inbounds i64, i64* %28, i64 1
  %36 = icmp eq i64* %34, %21
  br i1 %36, label %37, label %27

37:                                               ; preds = %27, %33, %8, %14
  %38 = phi i1 [ %13, %8 ], [ true, %14 ], [ true, %33 ], [ false, %27 ]
  %39 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 0
  %40 = load i32, i32* %39, align 8
  %41 = icmp ugt i32 %40, 64
  br i1 %41, label %42, label %49

42:                                               ; preds = %37
  %43 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 1
  %44 = bitcast %union.anon* %43 to i64**
  %45 = load i64*, i64** %44, align 8
  %46 = icmp eq i64* %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %42
  %48 = bitcast i64* %45 to i8*
  call void @_ZdaPv(i8* %48) #18
  br label %49

49:                                               ; preds = %37, %42, %47
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #17
  ret i1 %38
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4llvm5APInteqERKS0_(%"class.llvm::APInt"*, %"class.llvm::APInt"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 65
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp eq i64 %8, %10
  br label %35

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %14 = bitcast %union.anon* %13 to i64**
  %15 = load i64*, i64** %14, align 8
  %16 = zext i32 %4 to i64
  %17 = add nuw nsw i64 %16, 63
  %18 = lshr i64 %17, 6
  %19 = getelementptr inbounds i64, i64* %15, i64 %18
  %20 = icmp eq i64 %18, 0
  br i1 %20, label %35, label %21

21:                                               ; preds = %12
  %22 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %23 = bitcast %union.anon* %22 to i64**
  %24 = load i64*, i64** %23, align 8
  br label %25

25:                                               ; preds = %31, %21
  %26 = phi i64* [ %33, %31 ], [ %24, %21 ]
  %27 = phi i64* [ %32, %31 ], [ %15, %21 ]
  %28 = load i64, i64* %27, align 8
  %29 = load i64, i64* %26, align 8
  %30 = icmp eq i64 %28, %29
  br i1 %30, label %31, label %35

31:                                               ; preds = %25
  %32 = getelementptr inbounds i64, i64* %27, i64 1
  %33 = getelementptr inbounds i64, i64* %26, i64 1
  %34 = icmp eq i64* %32, %19
  br i1 %34, label %35, label %25

35:                                               ; preds = %31, %25, %12, %6
  %36 = phi i1 [ %11, %6 ], [ true, %12 ], [ false, %25 ], [ true, %31 ]
  ret i1 %36
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt4rotlEj(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"*, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.llvm::APInt", align 8
  %5 = alloca %"class.llvm::APInt", align 8
  %6 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = urem i32 %2, %7
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %3
  tail call void @_ZN4llvm5APIntC2ERKS0_(%"class.llvm::APInt"* %0, %"class.llvm::APInt"* dereferenceable(16) %1) #19
  br label %38

11:                                               ; preds = %3
  %12 = bitcast %"class.llvm::APInt"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %12) #17
  call void @_ZNK4llvm5APInt3shlEj(%"class.llvm::APInt"* nonnull sret %4, %"class.llvm::APInt"* %1, i32 %8) #19
  %13 = bitcast %"class.llvm::APInt"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #17
  %14 = load i32, i32* %6, align 8
  %15 = sub i32 %14, %8
  call void @_ZNK4llvm5APInt4lshrEj(%"class.llvm::APInt"* nonnull sret %5, %"class.llvm::APInt"* %1, i32 %15) #19
  call void @_ZNK4llvm5APIntorERKS0_(%"class.llvm::APInt"* sret %0, %"class.llvm::APInt"* nonnull %4, %"class.llvm::APInt"* nonnull dereferenceable(16) %5) #19
  %16 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 0
  %17 = load i32, i32* %16, align 8
  %18 = icmp ugt i32 %17, 64
  br i1 %18, label %19, label %26

19:                                               ; preds = %11
  %20 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1
  %21 = bitcast %union.anon* %20 to i64**
  %22 = load i64*, i64** %21, align 8
  %23 = icmp eq i64* %22, null
  br i1 %23, label %26, label %24

24:                                               ; preds = %19
  %25 = bitcast i64* %22 to i8*
  call void @_ZdaPv(i8* %25) #18
  br label %26

26:                                               ; preds = %11, %19, %24
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #17
  %27 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %4, i64 0, i32 0
  %28 = load i32, i32* %27, align 8
  %29 = icmp ugt i32 %28, 64
  br i1 %29, label %30, label %37

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %4, i64 0, i32 1
  %32 = bitcast %union.anon* %31 to i64**
  %33 = load i64*, i64** %32, align 8
  %34 = icmp eq i64* %33, null
  br i1 %34, label %37, label %35

35:                                               ; preds = %30
  %36 = bitcast i64* %33 to i8*
  call void @_ZdaPv(i8* %36) #18
  br label %37

37:                                               ; preds = %26, %30, %35
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %12) #17
  br label %38

38:                                               ; preds = %37, %10
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt9getHiBitsEj(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"*, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = sub i32 %5, %2
  tail call void @_ZNK4llvm5APInt4lshrEj(%"class.llvm::APInt"* sret %0, %"class.llvm::APInt"* %1, i32 %6) #20
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt9getLoBitsEj(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"*, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.llvm::APInt", align 8
  %5 = bitcast %"class.llvm::APInt"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #17
  %6 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = sub i32 %7, %2
  call void @_ZNK4llvm5APInt3shlEj(%"class.llvm::APInt"* nonnull sret %4, %"class.llvm::APInt"* %1, i32 %8) #20
  %9 = load i32, i32* %6, align 8
  %10 = sub i32 %9, %2
  call void @_ZNK4llvm5APInt4lshrEj(%"class.llvm::APInt"* sret %0, %"class.llvm::APInt"* nonnull %4, i32 %10) #20
  %11 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %4, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = icmp ugt i32 %12, 64
  br i1 %13, label %14, label %21

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %4, i64 0, i32 1
  %16 = bitcast %union.anon* %15 to i64**
  %17 = load i64*, i64** %16, align 8
  %18 = icmp eq i64* %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %14
  %20 = bitcast i64* %17 to i8*
  call void @_ZdaPv(i8* %20) #18
  br label %21

21:                                               ; preds = %3, %14, %19
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #17
  ret void
}

; Function Attrs: nounwind optsize readonly ssp uwtable
define hidden i32 @_ZNK4llvm5APInt25countLeadingZerosSlowCaseEv(%"class.llvm::APInt"* nocapture readonly) local_unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = zext i32 %3 to i64
  %5 = add nuw nsw i64 %4, 63
  %6 = lshr i64 %5, 6
  %7 = trunc i64 %6 to i32
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %29, label %9

9:                                                ; preds = %1
  %10 = add nsw i32 %7, -1
  %11 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %12 = bitcast %union.anon* %11 to i64**
  %13 = load i64*, i64** %12, align 8
  br label %14

14:                                               ; preds = %9, %25
  %15 = phi i32 [ %10, %9 ], [ %27, %25 ]
  %16 = phi i32 [ 0, %9 ], [ %26, %25 ]
  %17 = sext i32 %15 to i64
  %18 = getelementptr inbounds i64, i64* %13, i64 %17
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %25, label %21

21:                                               ; preds = %14
  %22 = tail call i64 @llvm.ctlz.i64(i64 %19, i1 true) #17, !range !2
  %23 = trunc i64 %22 to i32
  %24 = or i32 %16, %23
  br label %29

25:                                               ; preds = %14
  %26 = add i32 %16, 64
  %27 = add i32 %15, -1
  %28 = icmp sgt i32 %27, -1
  br i1 %28, label %14, label %29

29:                                               ; preds = %25, %1, %21
  %30 = phi i32 [ %24, %21 ], [ 0, %1 ], [ %26, %25 ]
  %31 = and i32 %3, 63
  %32 = icmp eq i32 %31, 0
  %33 = sub nuw nsw i32 64, %31
  %34 = select i1 %32, i32 0, i32 %33
  %35 = sub i32 %30, %34
  ret i32 %35
}

; Function Attrs: nounwind optsize readonly ssp uwtable
define hidden i32 @_ZNK4llvm5APInt16countLeadingOnesEv(%"class.llvm::APInt"* nocapture readonly) local_unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp ult i32 %3, 65
  br i1 %4, label %5, label %16

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = sub nuw nsw i32 64, %3
  %9 = zext i32 %8 to i64
  %10 = shl i64 %7, %9
  %11 = xor i64 %10, -1
  %12 = icmp eq i64 %10, -1
  %13 = tail call i64 @llvm.ctlz.i64(i64 %11, i1 true) #17, !range !2
  %14 = select i1 %12, i64 64, i64 %13
  %15 = trunc i64 %14 to i32
  br label %59

16:                                               ; preds = %1
  %17 = and i32 %3, 63
  %18 = icmp eq i32 %17, 0
  %19 = sub nuw nsw i32 64, %17
  %20 = select i1 %18, i32 64, i32 %17
  %21 = select i1 %18, i32 0, i32 %19
  %22 = zext i32 %21 to i64
  %23 = zext i32 %3 to i64
  %24 = add nuw nsw i64 %23, 63
  %25 = lshr i64 %24, 6
  %26 = add nsw i64 %25, -1
  %27 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %28 = bitcast %union.anon* %27 to i64**
  %29 = load i64*, i64** %28, align 8
  %30 = getelementptr inbounds i64, i64* %29, i64 %26
  %31 = load i64, i64* %30, align 8
  %32 = shl i64 %31, %22
  %33 = xor i64 %32, -1
  %34 = icmp eq i64 %32, -1
  %35 = tail call i64 @llvm.ctlz.i64(i64 %33, i1 true) #17, !range !2
  %36 = select i1 %34, i64 64, i64 %35
  %37 = trunc i64 %36 to i32
  %38 = icmp eq i32 %20, %37
  br i1 %38, label %39, label %59

39:                                               ; preds = %16
  %40 = trunc i64 %25 to i32
  %41 = icmp ugt i32 %40, 1
  br i1 %41, label %42, label %59

42:                                               ; preds = %39
  %43 = add nsw i64 %25, -2
  br label %44

44:                                               ; preds = %42, %50
  %45 = phi i64 [ %43, %42 ], [ %52, %50 ]
  %46 = phi i32 [ %20, %42 ], [ %51, %50 ]
  %47 = getelementptr inbounds i64, i64* %29, i64 %45
  %48 = load i64, i64* %47, align 8
  %49 = icmp eq i64 %48, -1
  br i1 %49, label %50, label %54

50:                                               ; preds = %44
  %51 = add i32 %46, 64
  %52 = add nsw i64 %45, -1
  %53 = icmp sgt i64 %45, 0
  br i1 %53, label %44, label %59

54:                                               ; preds = %44
  %55 = xor i64 %48, -1
  %56 = tail call i64 @llvm.ctlz.i64(i64 %55, i1 true) #17, !range !2
  %57 = trunc i64 %56 to i32
  %58 = add i32 %46, %57
  br label %59

59:                                               ; preds = %50, %39, %16, %54, %5
  %60 = phi i32 [ %15, %5 ], [ %58, %54 ], [ %37, %16 ], [ %20, %39 ], [ %51, %50 ]
  ret i32 %60
}

; Function Attrs: nounwind optsize readonly ssp uwtable
define hidden i32 @_ZNK4llvm5APInt18countTrailingZerosEv(%"class.llvm::APInt"* nocapture readonly) local_unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp ult i32 %3, 65
  br i1 %4, label %14, label %5

5:                                                ; preds = %1
  %6 = zext i32 %3 to i64
  %7 = add nuw nsw i64 %6, 63
  %8 = lshr i64 %7, 6
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %36, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %12 = bitcast %union.anon* %11 to i64**
  %13 = load i64*, i64** %12, align 8
  br label %19

14:                                               ; preds = %1
  %15 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %16 = load i64, i64* %15, align 8
  %17 = tail call i64 @llvm.cttz.i64(i64 %16, i1 false) #17, !range !2
  %18 = trunc i64 %17 to i32
  br label %36

19:                                               ; preds = %25, %10
  %20 = phi i64 [ 0, %10 ], [ %27, %25 ]
  %21 = phi i32 [ 0, %10 ], [ %26, %25 ]
  %22 = getelementptr inbounds i64, i64* %13, i64 %20
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %29

25:                                               ; preds = %19
  %26 = add i32 %21, 64
  %27 = add nuw nsw i64 %20, 1
  %28 = icmp eq i64 %27, %8
  br i1 %28, label %36, label %19

29:                                               ; preds = %19
  %30 = and i64 %20, 4294967295
  %31 = getelementptr inbounds i64, i64* %13, i64 %30
  %32 = load i64, i64* %31, align 8
  %33 = tail call i64 @llvm.cttz.i64(i64 %32, i1 false) #17, !range !2
  %34 = trunc i64 %33 to i32
  %35 = add i32 %21, %34
  br label %36

36:                                               ; preds = %25, %29, %5, %14
  %37 = phi i32 [ %18, %14 ], [ %35, %29 ], [ 0, %5 ], [ %26, %25 ]
  %38 = icmp ult i32 %3, %37
  %39 = select i1 %38, i32 %3, i32 %37
  ret i32 %39
}

; Function Attrs: nounwind optsize readonly ssp uwtable
define hidden i32 @_ZNK4llvm5APInt25countTrailingOnesSlowCaseEv(%"class.llvm::APInt"* nocapture readonly) local_unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = zext i32 %3 to i64
  %5 = add nuw nsw i64 %4, 63
  %6 = and i64 %5, 8589934528
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %33, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %10 = bitcast %union.anon* %9 to i64**
  %11 = load i64*, i64** %10, align 8
  %12 = lshr i64 %5, 6
  br label %13

13:                                               ; preds = %8, %19
  %14 = phi i64 [ 0, %8 ], [ %21, %19 ]
  %15 = phi i32 [ 0, %8 ], [ %20, %19 ]
  %16 = getelementptr inbounds i64, i64* %11, i64 %14
  %17 = load i64, i64* %16, align 8
  %18 = icmp eq i64 %17, -1
  br i1 %18, label %19, label %23

19:                                               ; preds = %13
  %20 = add i32 %15, 64
  %21 = add nuw nsw i64 %14, 1
  %22 = icmp ult i64 %21, %12
  br i1 %22, label %13, label %33

23:                                               ; preds = %13
  %24 = and i64 %14, 4294967295
  %25 = getelementptr inbounds i64, i64* %11, i64 %24
  %26 = load i64, i64* %25, align 8
  %27 = xor i64 %26, -1
  %28 = icmp eq i64 %26, -1
  %29 = tail call i64 @llvm.cttz.i64(i64 %27, i1 true) #17, !range !2
  %30 = select i1 %28, i64 64, i64 %29
  %31 = trunc i64 %30 to i32
  %32 = add i32 %15, %31
  br label %33

33:                                               ; preds = %19, %1, %23
  %34 = phi i32 [ %32, %23 ], [ 0, %1 ], [ %20, %19 ]
  %35 = icmp ult i32 %3, %34
  %36 = select i1 %35, i32 %3, i32 %34
  ret i32 %36
}

; Function Attrs: nounwind optsize readonly ssp uwtable
define hidden i32 @_ZNK4llvm5APInt23countPopulationSlowCaseEv(%"class.llvm::APInt"* nocapture readonly) local_unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = zext i32 %3 to i64
  %5 = add nuw nsw i64 %4, 63
  %6 = and i64 %5, 8589934528
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %13, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %10 = bitcast %union.anon* %9 to i64**
  %11 = load i64*, i64** %10, align 8
  %12 = lshr i64 %5, 6
  br label %15

13:                                               ; preds = %15, %1
  %14 = phi i32 [ 0, %1 ], [ %22, %15 ]
  ret i32 %14

15:                                               ; preds = %8, %15
  %16 = phi i64 [ 0, %8 ], [ %23, %15 ]
  %17 = phi i32 [ 0, %8 ], [ %22, %15 ]
  %18 = getelementptr inbounds i64, i64* %11, i64 %16
  %19 = load i64, i64* %18, align 8
  %20 = tail call i64 @llvm.ctpop.i64(i64 %19) #17, !range !2
  %21 = trunc i64 %20 to i32
  %22 = add i32 %17, %21
  %23 = add nuw nsw i64 %16, 1
  %24 = icmp ult i64 %23, %12
  br i1 %24, label %15, label %13
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt8byteSwapEv(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.llvm::APInt", align 8
  %4 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = add i32 %5, -16
  %7 = lshr i32 %6, 4
  %8 = shl i32 %6, 28
  %9 = or i32 %7, %8
  switch i32 %9, label %47 [
    i32 0, label %10
    i32 1, label %19
    i32 2, label %28
    i32 3, label %40
  ]

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = trunc i64 %12 to i16
  %14 = tail call i16 @llvm.bswap.i16(i16 %13) #17
  %15 = zext i16 %14 to i64
  %16 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  store i32 16, i32* %16, align 8
  %17 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  store i64 %15, i64* %17, align 8
  %18 = tail call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APInt15clearUnusedBitsEv(%"class.llvm::APInt"* %0) #20
  br label %122

19:                                               ; preds = %2
  %20 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = trunc i64 %21 to i32
  %23 = tail call i32 @llvm.bswap.i32(i32 %22) #17
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  store i32 32, i32* %25, align 8
  %26 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  store i64 %24, i64* %26, align 8
  %27 = tail call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APInt15clearUnusedBitsEv(%"class.llvm::APInt"* %0) #20
  br label %122

28:                                               ; preds = %2
  %29 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %30 = load i64, i64* %29, align 8
  %31 = lshr i64 %30, 16
  %32 = trunc i64 %31 to i32
  %33 = tail call i32 @llvm.bswap.i32(i32 %32) #17
  %34 = trunc i64 %30 to i16
  %35 = tail call i16 @llvm.bswap.i16(i16 %34) #17
  %36 = zext i16 %35 to i64
  %37 = shl nuw nsw i64 %36, 32
  %38 = zext i32 %33 to i64
  %39 = or i64 %37, %38
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %5, i64 %39, i1 zeroext false) #19
  br label %122

40:                                               ; preds = %2
  %41 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = tail call i64 @llvm.bswap.i64(i64 %42) #17
  %44 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  store i32 64, i32* %44, align 8
  %45 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  store i64 %43, i64* %45, align 8
  %46 = tail call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APInt15clearUnusedBitsEv(%"class.llvm::APInt"* %0) #20
  br label %122

47:                                               ; preds = %2
  %48 = bitcast %"class.llvm::APInt"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %48) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %48, i8 -86, i64 16, i1 false)
  %49 = add i32 %5, 63
  %50 = and i32 %49, -64
  call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* nonnull %3, i32 %50, i64 0, i1 zeroext false) #19
  %51 = load i32, i32* %4, align 8
  %52 = zext i32 %51 to i64
  %53 = add nuw nsw i64 %52, 63
  %54 = lshr i64 %53, 6
  %55 = trunc i64 %54 to i32
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %64, label %57

57:                                               ; preds = %47
  %58 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %59 = bitcast %union.anon* %58 to i64**
  %60 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 1
  %61 = bitcast %union.anon* %60 to i64**
  br label %69

62:                                               ; preds = %69
  %63 = load i32, i32* %4, align 8
  br label %64

64:                                               ; preds = %62, %47
  %65 = phi i32 [ %63, %62 ], [ %51, %47 ]
  %66 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 0
  %67 = load i32, i32* %66, align 8
  %68 = icmp eq i32 %67, %65
  br i1 %68, label %116, label %84

69:                                               ; preds = %57, %69
  %70 = phi i64 [ 0, %57 ], [ %81, %69 ]
  %71 = phi i32 [ 0, %57 ], [ %82, %69 ]
  %72 = load i64*, i64** %59, align 8
  %73 = xor i32 %71, -1
  %74 = add nsw i32 %73, %55
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds i64, i64* %72, i64 %75
  %77 = load i64, i64* %76, align 8
  %78 = call i64 @llvm.bswap.i64(i64 %77) #17
  %79 = load i64*, i64** %61, align 8
  %80 = getelementptr inbounds i64, i64* %79, i64 %70
  store i64 %78, i64* %80, align 8
  %81 = add nuw nsw i64 %70, 1
  %82 = add nuw nsw i32 %71, 1
  %83 = icmp eq i64 %81, %54
  br i1 %83, label %62, label %69

84:                                               ; preds = %64
  %85 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 1
  %86 = bitcast %union.anon* %85 to i64**
  %87 = load i64*, i64** %86, align 8
  %88 = zext i32 %65 to i64
  %89 = add nuw nsw i64 %88, 63
  %90 = lshr i64 %89, 6
  %91 = trunc i64 %90 to i32
  %92 = sub i32 %67, %65
  %93 = add nsw i32 %91, -1
  %94 = icmp eq i32 %91, 0
  br i1 %94, label %114, label %95

95:                                               ; preds = %84
  %96 = zext i32 %92 to i64
  %97 = sub i32 64, %92
  %98 = zext i32 %97 to i64
  %99 = sext i32 %93 to i64
  br label %100

100:                                              ; preds = %100, %95
  %101 = phi i64 [ %99, %95 ], [ %111, %100 ]
  %102 = phi i32 [ %93, %95 ], [ %109, %100 ]
  %103 = phi i64 [ 0, %95 ], [ %108, %100 ]
  %104 = getelementptr inbounds i64, i64* %87, i64 %101
  %105 = load i64, i64* %104, align 8
  %106 = lshr i64 %105, %96
  %107 = or i64 %106, %103
  store i64 %107, i64* %104, align 8
  %108 = shl i64 %105, %98
  %109 = add nsw i32 %102, -1
  %110 = icmp sgt i32 %102, 0
  %111 = add nsw i64 %101, -1
  br i1 %110, label %100, label %112

112:                                              ; preds = %100
  %113 = load i32, i32* %4, align 8
  br label %114

114:                                              ; preds = %112, %84
  %115 = phi i32 [ %113, %112 ], [ %65, %84 ]
  store i32 %115, i32* %66, align 8
  br label %116

116:                                              ; preds = %114, %64
  %117 = phi i32 [ %115, %114 ], [ %65, %64 ]
  %118 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  store i32 %117, i32* %118, align 8
  %119 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %120 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 1, i32 0
  %121 = load i64, i64* %120, align 8
  store i64 %121, i64* %119, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %48) #17
  br label %122

122:                                              ; preds = %116, %40, %28, %19, %10
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt11reverseBitsEv(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to %"class.llvm::APInt"*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to %"class.llvm::APInt"*
  %13 = alloca %"class.llvm::APInt", align 8
  %14 = alloca %"class.llvm::APInt", align 8
  %15 = alloca %"class.llvm::APInt", align 8
  %16 = alloca %"class.llvm::APInt", align 8
  %17 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %18 = load i32, i32* %17, align 8
  %19 = add i32 %18, -8
  %20 = lshr i32 %19, 3
  %21 = shl i32 %19, 29
  %22 = or i32 %20, %21
  switch i32 %22, label %95 [
    i32 7, label %23
    i32 3, label %43
    i32 1, label %65
    i32 0, label %88
  ]

23:                                               ; preds = %2
  %24 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = bitcast i64* %7 to [8 x i8]*
  %27 = bitcast i64* %8 to [8 x i8]*
  %28 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #17
  %29 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #17
  store i64 -6148914691236517206, i64* %8, align 8
  store i64 %25, i64* %7, align 8
  br label %30

30:                                               ; preds = %30, %23
  %31 = phi i64 [ 0, %23 ], [ %39, %30 ]
  %32 = getelementptr inbounds [8 x i8], [8 x i8]* %26, i64 0, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i64
  %35 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4llvmL18BitReverseTable256E, i64 0, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = sub nuw nsw i64 7, %31
  %38 = getelementptr inbounds [8 x i8], [8 x i8]* %27, i64 0, i64 %37
  store i8 %36, i8* %38, align 1
  %39 = add nuw nsw i64 %31, 1
  %40 = icmp eq i64 %39, 8
  br i1 %40, label %41, label %30

41:                                               ; preds = %30
  %42 = load i64, i64* %8, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #17
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #17
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %18, i64 %42, i1 zeroext false) #19
  br label %247

43:                                               ; preds = %2
  %44 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %45 = load i64, i64* %44, align 8
  %46 = trunc i64 %45 to i32
  %47 = bitcast i32* %5 to [4 x i8]*
  %48 = bitcast i32* %6 to [4 x i8]*
  %49 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %49) #17
  %50 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %50) #17
  store i32 -1431655766, i32* %6, align 4
  store i32 %46, i32* %5, align 4
  br label %51

51:                                               ; preds = %51, %43
  %52 = phi i64 [ 0, %43 ], [ %60, %51 ]
  %53 = getelementptr inbounds [4 x i8], [4 x i8]* %47, i64 0, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i64
  %56 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4llvmL18BitReverseTable256E, i64 0, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = sub nuw nsw i64 3, %52
  %59 = getelementptr inbounds [4 x i8], [4 x i8]* %48, i64 0, i64 %58
  store i8 %57, i8* %59, align 1
  %60 = add nuw nsw i64 %52, 1
  %61 = icmp eq i64 %60, 4
  br i1 %61, label %62, label %51

62:                                               ; preds = %51
  %63 = load i32, i32* %6, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %50) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %49) #17
  %64 = zext i32 %63 to i64
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %18, i64 %64, i1 zeroext false) #19
  br label %247

65:                                               ; preds = %2
  %66 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %67 = load i64, i64* %66, align 8
  %68 = trunc i64 %67 to i16
  %69 = bitcast i16* %3 to [2 x i8]*
  %70 = bitcast i16* %4 to [2 x i8]*
  %71 = bitcast i16* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %71) #17
  %72 = bitcast i16* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %72) #17
  store i8 -86, i8* %72, align 2
  %73 = getelementptr inbounds [2 x i8], [2 x i8]* %70, i64 0, i64 1
  store i8 -86, i8* %73, align 1
  store i16 %68, i16* %3, align 2
  br label %74

74:                                               ; preds = %74, %65
  %75 = phi i64 [ 0, %65 ], [ %83, %74 ]
  %76 = getelementptr inbounds [2 x i8], [2 x i8]* %69, i64 0, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i64
  %79 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4llvmL18BitReverseTable256E, i64 0, i64 %78
  %80 = load i8, i8* %79, align 1
  %81 = sub nuw nsw i64 1, %75
  %82 = getelementptr inbounds [2 x i8], [2 x i8]* %70, i64 0, i64 %81
  store i8 %80, i8* %82, align 1
  %83 = add nuw nsw i64 %75, 1
  %84 = icmp eq i64 %83, 2
  br i1 %84, label %85, label %74

85:                                               ; preds = %74
  %86 = load i16, i16* %4, align 2
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %72) #17
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %71) #17
  %87 = zext i16 %86 to i64
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %18, i64 %87, i1 zeroext false) #19
  br label %247

88:                                               ; preds = %2
  %89 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %90 = load i64, i64* %89, align 8
  %91 = and i64 %90, 255
  %92 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4llvmL18BitReverseTable256E, i64 0, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i64
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %18, i64 %94, i1 zeroext false) #19
  br label %247

95:                                               ; preds = %2
  %96 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %96) #17
  %97 = bitcast <2 x i64>* %9 to i32*
  %98 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %10, i64 0, i32 1, i32 0
  store <2 x i64> <i64 -6148914691236517206, i64 0>, <2 x i64>* %9, align 16
  store i32 %18, i32* %97, align 16
  %99 = icmp ult i32 %18, 65
  br i1 %99, label %100, label %104

100:                                              ; preds = %95
  %101 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %102 = load i64, i64* %101, align 8
  store i64 %102, i64* %98, align 8
  %103 = inttoptr i64 %102 to i8*
  br label %116

104:                                              ; preds = %95
  %105 = zext i32 %18 to i64
  %106 = add nuw nsw i64 %105, 63
  %107 = lshr i64 %106, 6
  %108 = shl nuw nsw i64 %107, 3
  %109 = tail call i8* @_Znam(i64 %108) #18
  %110 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %10, i64 0, i32 1
  %111 = bitcast %union.anon* %110 to i8**
  store i8* %109, i8** %111, align 8
  %112 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %113 = bitcast %union.anon* %112 to i8**
  %114 = load i8*, i8** %113, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %109, i8* align 8 %114, i64 %108, i1 false) #17
  %115 = ptrtoint i8* %114 to i64
  br label %116

116:                                              ; preds = %100, %104
  %117 = phi i64 [ %102, %100 ], [ %115, %104 ]
  %118 = phi i8* [ %103, %100 ], [ %114, %104 ]
  %119 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %119) #17
  %120 = bitcast <2 x i64>* %11 to i32*
  %121 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %12, i64 0, i32 1, i32 0
  store <2 x i64> <i64 -6148914691236517206, i64 0>, <2 x i64>* %11, align 16
  store i32 %18, i32* %120, align 16
  br i1 %99, label %122, label %123

122:                                              ; preds = %116
  store i64 %117, i64* %121, align 8
  br label %131

123:                                              ; preds = %116
  %124 = zext i32 %18 to i64
  %125 = add nuw nsw i64 %124, 63
  %126 = lshr i64 %125, 6
  %127 = shl nuw nsw i64 %126, 3
  %128 = tail call i8* @_Znam(i64 %127) #18
  %129 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %12, i64 0, i32 1
  %130 = bitcast %union.anon* %129 to i8**
  store i8* %128, i8** %130, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %128, i8* align 8 %118, i64 %127, i1 false) #17
  br label %131

131:                                              ; preds = %122, %123
  %132 = bitcast %"class.llvm::APInt"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %132) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %132, i8 -86, i64 16, i1 false)
  call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* nonnull %13, i32 %18, i64 1, i1 zeroext false) #19
  %133 = bitcast %"class.llvm::APInt"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %133) #17
  call void @_ZNK4llvm5APInt4lshrEj(%"class.llvm::APInt"* nonnull sret %14, %"class.llvm::APInt"* nonnull %10, i32 1) #19
  %134 = load i32, i32* %97, align 16
  %135 = icmp ult i32 %134, 65
  br i1 %135, label %143, label %136

136:                                              ; preds = %131
  %137 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %10, i64 0, i32 1
  %138 = bitcast %union.anon* %137 to i64**
  %139 = load i64*, i64** %138, align 8
  %140 = icmp eq i64* %139, null
  br i1 %140, label %143, label %141

141:                                              ; preds = %136
  %142 = bitcast i64* %139 to i8*
  call void @_ZdaPv(i8* %142) #18
  br label %143

143:                                              ; preds = %131, %141, %136
  %144 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %14, i64 0, i32 1, i32 0
  %145 = load i64, i64* %144, align 8
  store i64 %145, i64* %98, align 8
  %146 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %14, i64 0, i32 0
  %147 = load i32, i32* %146, align 8
  store i32 %147, i32* %97, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %133) #17
  %148 = bitcast %"class.llvm::APInt"* %15 to i8*
  %149 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %15, i64 0, i32 1
  %150 = bitcast %union.anon* %149 to i64**
  %151 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %12, i64 0, i32 1
  %152 = bitcast %union.anon* %151 to i64**
  %153 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %15, i64 0, i32 1, i32 0
  %154 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %15, i64 0, i32 0
  %155 = bitcast %"class.llvm::APInt"* %16 to i8*
  %156 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %10, i64 0, i32 1
  %157 = bitcast %union.anon* %156 to i64**
  %158 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %16, i64 0, i32 1, i32 0
  %159 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %16, i64 0, i32 0
  br label %160

160:                                              ; preds = %210, %143
  %161 = phi i64 [ %211, %210 ], [ %145, %143 ]
  %162 = phi i32 [ %212, %210 ], [ %147, %143 ]
  %163 = phi i32 [ %164, %210 ], [ %18, %143 ]
  %164 = add i32 %163, -1
  %165 = icmp ult i32 %162, 65
  br i1 %165, label %166, label %168

166:                                              ; preds = %160
  %167 = icmp eq i64 %161, 0
  br i1 %167, label %213, label %170

168:                                              ; preds = %160
  %169 = call zeroext i1 @_ZNK4llvm5APInt13EqualSlowCaseEm(%"class.llvm::APInt"* nonnull %10, i64 0) #20
  br i1 %169, label %213, label %170

170:                                              ; preds = %166, %168
  %171 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntlSEj(%"class.llvm::APInt"* nonnull %12, i32 1) #19
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %148) #17
  call void @_ZNK4llvm5APIntanERKS0_(%"class.llvm::APInt"* nonnull sret %15, %"class.llvm::APInt"* nonnull %10, %"class.llvm::APInt"* nonnull dereferenceable(16) %13) #19
  %172 = load i32, i32* %120, align 16
  %173 = icmp ult i32 %172, 65
  br i1 %173, label %174, label %178

174:                                              ; preds = %170
  %175 = load i64, i64* %153, align 8
  %176 = load i64, i64* %121, align 8
  %177 = or i64 %176, %175
  store i64 %177, i64* %121, align 8
  br label %194

178:                                              ; preds = %170
  %179 = zext i32 %172 to i64
  %180 = add nuw nsw i64 %179, 63
  %181 = lshr i64 %180, 6
  %182 = icmp eq i64 %181, 0
  br i1 %182, label %194, label %183

183:                                              ; preds = %178, %183
  %184 = phi i64 [ %192, %183 ], [ 0, %178 ]
  %185 = load i64*, i64** %150, align 8
  %186 = getelementptr inbounds i64, i64* %185, i64 %184
  %187 = load i64, i64* %186, align 8
  %188 = load i64*, i64** %152, align 8
  %189 = getelementptr inbounds i64, i64* %188, i64 %184
  %190 = load i64, i64* %189, align 8
  %191 = or i64 %190, %187
  store i64 %191, i64* %189, align 8
  %192 = add nuw nsw i64 %184, 1
  %193 = icmp eq i64 %192, %181
  br i1 %193, label %194, label %183

194:                                              ; preds = %183, %174, %178
  %195 = load i32, i32* %154, align 8
  %196 = icmp ugt i32 %195, 64
  br i1 %196, label %197, label %202

197:                                              ; preds = %194
  %198 = load i64*, i64** %150, align 8
  %199 = icmp eq i64* %198, null
  br i1 %199, label %202, label %200

200:                                              ; preds = %197
  %201 = bitcast i64* %198 to i8*
  call void @_ZdaPv(i8* %201) #18
  br label %202

202:                                              ; preds = %194, %197, %200
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %148) #17
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %155) #17
  call void @_ZNK4llvm5APInt4lshrEj(%"class.llvm::APInt"* nonnull sret %16, %"class.llvm::APInt"* nonnull %10, i32 1) #19
  %203 = load i32, i32* %97, align 16
  %204 = icmp ult i32 %203, 65
  br i1 %204, label %210, label %205

205:                                              ; preds = %202
  %206 = load i64*, i64** %157, align 8
  %207 = icmp eq i64* %206, null
  br i1 %207, label %210, label %208

208:                                              ; preds = %205
  %209 = bitcast i64* %206 to i8*
  call void @_ZdaPv(i8* %209) #18
  br label %210

210:                                              ; preds = %208, %205, %202
  %211 = load i64, i64* %158, align 8
  store i64 %211, i64* %98, align 8
  %212 = load i32, i32* %159, align 8
  store i32 %212, i32* %97, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %155) #17
  br label %160

213:                                              ; preds = %166, %168
  %214 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntlSEj(%"class.llvm::APInt"* nonnull %12, i32 %164) #19
  %215 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %216 = load i32, i32* %120, align 16
  store i32 %216, i32* %215, align 8
  %217 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %218 = load i64, i64* %121, align 8
  store i64 %218, i64* %217, align 8
  store i32 0, i32* %120, align 16
  %219 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %13, i64 0, i32 0
  %220 = load i32, i32* %219, align 8
  %221 = icmp ugt i32 %220, 64
  br i1 %221, label %223, label %222

222:                                              ; preds = %213
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %132) #17
  br label %238

223:                                              ; preds = %213
  %224 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %13, i64 0, i32 1
  %225 = bitcast %union.anon* %224 to i64**
  %226 = load i64*, i64** %225, align 8
  %227 = icmp eq i64* %226, null
  br i1 %227, label %228, label %229

228:                                              ; preds = %223
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %132) #17
  br label %238

229:                                              ; preds = %223
  %230 = bitcast i64* %226 to i8*
  call void @_ZdaPv(i8* %230) #18
  %231 = load i32, i32* %120, align 16
  %232 = icmp ugt i32 %231, 64
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %132) #17
  br i1 %232, label %233, label %238

233:                                              ; preds = %229
  %234 = load i64*, i64** %152, align 8
  %235 = icmp eq i64* %234, null
  br i1 %235, label %238, label %236

236:                                              ; preds = %233
  %237 = bitcast i64* %234 to i8*
  call void @_ZdaPv(i8* %237) #18
  br label %238

238:                                              ; preds = %228, %222, %229, %233, %236
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %119) #17
  %239 = load i32, i32* %97, align 16
  %240 = icmp ugt i32 %239, 64
  br i1 %240, label %241, label %246

241:                                              ; preds = %238
  %242 = load i64*, i64** %157, align 8
  %243 = icmp eq i64* %242, null
  br i1 %243, label %246, label %244

244:                                              ; preds = %241
  %245 = bitcast i64* %242 to i8*
  call void @_ZdaPv(i8* %245) #18
  br label %246

246:                                              ; preds = %238, %241, %244
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %96) #17
  br label %247

247:                                              ; preds = %246, %88, %85, %62, %41
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt4lshrEj(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"*, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp ult i32 %5, 65
  %7 = icmp ule i32 %5, %2
  br i1 %6, label %8, label %15

8:                                                ; preds = %3
  br i1 %7, label %9, label %10

9:                                                ; preds = %8
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %5, i64 0, i1 zeroext false) #19
  br label %156

10:                                               ; preds = %8
  %11 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = zext i32 %2 to i64
  %14 = lshr i64 %12, %13
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %5, i64 %14, i1 zeroext false) #19
  br label %156

15:                                               ; preds = %3
  br i1 %7, label %16, label %17

16:                                               ; preds = %15
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %5, i64 0, i1 zeroext false) #19
  br label %156

17:                                               ; preds = %15
  %18 = icmp eq i32 %2, 0
  br i1 %18, label %19, label %20

19:                                               ; preds = %17
  tail call void @_ZN4llvm5APIntC2ERKS0_(%"class.llvm::APInt"* %0, %"class.llvm::APInt"* dereferenceable(16) %1) #19
  br label %156

20:                                               ; preds = %17
  %21 = zext i32 %5 to i64
  %22 = add nuw nsw i64 %21, 63
  %23 = lshr i64 %22, 6
  %24 = trunc i64 %23 to i32
  %25 = shl nuw nsw i64 %23, 3
  %26 = tail call i8* @_Znam(i64 %25) #18
  %27 = bitcast i8* %26 to i64*
  %28 = icmp ult i32 %2, 64
  br i1 %28, label %29, label %57

29:                                               ; preds = %20
  %30 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %31 = bitcast %union.anon* %30 to i64**
  %32 = load i64*, i64** %31, align 8
  %33 = add nsw i32 %24, -1
  %34 = zext i32 %2 to i64
  %35 = sub nuw nsw i32 64, %2
  %36 = zext i32 %35 to i64
  %37 = sext i32 %33 to i64
  br label %38

38:                                               ; preds = %38, %29
  %39 = phi i64 [ %37, %29 ], [ %50, %38 ]
  %40 = phi i32 [ %33, %29 ], [ %48, %38 ]
  %41 = phi i64 [ 0, %29 ], [ %47, %38 ]
  %42 = getelementptr inbounds i64, i64* %32, i64 %39
  %43 = load i64, i64* %42, align 8
  %44 = lshr i64 %43, %34
  %45 = or i64 %44, %41
  %46 = getelementptr inbounds i64, i64* %27, i64 %39
  store i64 %45, i64* %46, align 8
  %47 = shl i64 %43, %36
  %48 = add nsw i32 %40, -1
  %49 = icmp sgt i32 %40, 0
  %50 = add nsw i64 %39, -1
  br i1 %49, label %38, label %51

51:                                               ; preds = %38
  %52 = bitcast %"class.llvm::APInt"* %0 to i64*
  store i64 -6148914691236517206, i64* %52, align 8
  %53 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  store i32 %5, i32* %53, align 8
  %54 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %55 = bitcast %union.anon* %54 to i8**
  store i8* %26, i8** %55, align 8
  %56 = tail call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APInt15clearUnusedBitsEv(%"class.llvm::APInt"* %0) #19
  br label %156

57:                                               ; preds = %20
  %58 = and i32 %2, 63
  %59 = lshr i32 %2, 6
  %60 = icmp eq i32 %58, 0
  %61 = sub nsw i32 %24, %59
  br i1 %60, label %62, label %95

62:                                               ; preds = %57
  %63 = icmp eq i32 %61, 0
  br i1 %63, label %69, label %64

64:                                               ; preds = %62
  %65 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %66 = bitcast %union.anon* %65 to i64**
  %67 = zext i32 %61 to i64
  %68 = load i64*, i64** %66, align 8
  br label %79

69:                                               ; preds = %79, %62
  %70 = icmp ult i32 %61, %24
  br i1 %70, label %71, label %89

71:                                               ; preds = %69
  %72 = zext i32 %61 to i64
  %73 = shl nuw nsw i64 %72, 3
  %74 = getelementptr i8, i8* %26, i64 %73
  %75 = add nsw i32 %59, -1
  %76 = zext i32 %75 to i64
  %77 = shl nuw nsw i64 %76, 3
  %78 = add nuw nsw i64 %77, 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %74, i8 0, i64 %78, i1 false)
  br label %89

79:                                               ; preds = %79, %64
  %80 = phi i64 [ 0, %64 ], [ %87, %79 ]
  %81 = trunc i64 %80 to i32
  %82 = add i32 %59, %81
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds i64, i64* %68, i64 %83
  %85 = load i64, i64* %84, align 8
  %86 = getelementptr inbounds i64, i64* %27, i64 %80
  store i64 %85, i64* %86, align 8
  %87 = add nuw nsw i64 %80, 1
  %88 = icmp eq i64 %87, %67
  br i1 %88, label %69, label %79

89:                                               ; preds = %71, %69
  %90 = bitcast %"class.llvm::APInt"* %0 to i64*
  store i64 -6148914691236517206, i64* %90, align 8
  %91 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  store i32 %5, i32* %91, align 8
  %92 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %93 = bitcast %union.anon* %92 to i8**
  store i8* %26, i8** %93, align 8
  %94 = tail call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APInt15clearUnusedBitsEv(%"class.llvm::APInt"* %0) #19
  br label %156

95:                                               ; preds = %57
  %96 = add nsw i32 %61, -1
  %97 = icmp eq i32 %96, 0
  %98 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %99 = bitcast %union.anon* %98 to i64**
  %100 = load i64*, i64** %99, align 8
  %101 = zext i32 %58 to i64
  br i1 %97, label %108, label %102

102:                                              ; preds = %95
  %103 = sub nuw nsw i32 64, %58
  %104 = zext i32 %103 to i64
  %105 = xor i32 %59, -1
  %106 = add nsw i32 %105, %24
  %107 = zext i32 %106 to i64
  br label %125

108:                                              ; preds = %125, %95
  %109 = add nuw nsw i64 %23, 4294967295
  %110 = and i64 %109, 4294967295
  %111 = getelementptr inbounds i64, i64* %100, i64 %110
  %112 = load i64, i64* %111, align 8
  %113 = lshr i64 %112, %101
  %114 = zext i32 %96 to i64
  %115 = getelementptr inbounds i64, i64* %27, i64 %114
  store i64 %113, i64* %115, align 8
  %116 = icmp ult i32 %61, %24
  br i1 %116, label %117, label %142

117:                                              ; preds = %108
  %118 = zext i32 %61 to i64
  %119 = shl nuw nsw i64 %118, 3
  %120 = getelementptr i8, i8* %26, i64 %119
  %121 = add nsw i32 %59, -1
  %122 = zext i32 %121 to i64
  %123 = shl nuw nsw i64 %122, 3
  %124 = add nuw nsw i64 %123, 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %120, i8 0, i64 %124, i1 false)
  br label %142

125:                                              ; preds = %125, %102
  %126 = phi i64 [ 0, %102 ], [ %140, %125 ]
  %127 = trunc i64 %126 to i32
  %128 = add i32 %59, %127
  %129 = zext i32 %128 to i64
  %130 = getelementptr inbounds i64, i64* %100, i64 %129
  %131 = load i64, i64* %130, align 8
  %132 = lshr i64 %131, %101
  %133 = add i32 %128, 1
  %134 = zext i32 %133 to i64
  %135 = getelementptr inbounds i64, i64* %100, i64 %134
  %136 = load i64, i64* %135, align 8
  %137 = shl i64 %136, %104
  %138 = or i64 %137, %132
  %139 = getelementptr inbounds i64, i64* %27, i64 %126
  store i64 %138, i64* %139, align 8
  %140 = add nuw nsw i64 %126, 1
  %141 = icmp eq i64 %140, %107
  br i1 %141, label %108, label %125

142:                                              ; preds = %117, %108
  %143 = ptrtoint i8* %26 to i64
  %144 = and i32 %5, 63
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %153, label %146

146:                                              ; preds = %142
  %147 = sub nuw nsw i32 64, %144
  %148 = zext i32 %147 to i64
  %149 = lshr i64 -1, %148
  %150 = getelementptr inbounds i64, i64* %27, i64 %110
  %151 = load i64, i64* %150, align 8
  %152 = and i64 %151, %149
  store i64 %152, i64* %150, align 8
  br label %153

153:                                              ; preds = %146, %142
  %154 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  store i32 %5, i32* %154, align 8
  %155 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  store i64 %143, i64* %155, align 8
  br label %156

156:                                              ; preds = %51, %89, %153, %19, %16, %10, %9
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntlSEj(%"class.llvm::APInt"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.llvm::APInt", align 8
  %4 = bitcast %"class.llvm::APInt"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #17
  call void @_ZNK4llvm5APInt3shlEj(%"class.llvm::APInt"* nonnull sret %3, %"class.llvm::APInt"* %0, i32 %1) #19
  %5 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp ult i32 %6, 65
  br i1 %7, label %17, label %8

8:                                                ; preds = %2
  %9 = icmp eq %"class.llvm::APInt"* %3, %0
  br i1 %9, label %23, label %10

10:                                               ; preds = %8
  %11 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %12 = bitcast %union.anon* %11 to i64**
  %13 = load i64*, i64** %12, align 8
  %14 = icmp eq i64* %13, null
  br i1 %14, label %17, label %15

15:                                               ; preds = %10
  %16 = bitcast i64* %13 to i8*
  call void @_ZdaPv(i8* %16) #18
  br label %17

17:                                               ; preds = %2, %10, %15
  %18 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %19 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 1, i32 0
  %20 = load i64, i64* %19, align 8
  store i64 %20, i64* %18, align 8
  %21 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 0
  %22 = load i32, i32* %21, align 8
  store i32 0, i32* %21, align 8
  store i32 %22, i32* %5, align 8
  br label %30

23:                                               ; preds = %8
  %24 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 1
  %25 = bitcast %union.anon* %24 to i64**
  %26 = load i64*, i64** %25, align 8
  %27 = icmp eq i64* %26, null
  br i1 %27, label %30, label %28

28:                                               ; preds = %23
  %29 = bitcast i64* %26 to i8*
  call void @_ZdaPv(i8* %29) #18
  br label %30

30:                                               ; preds = %17, %23, %28
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #17
  ret %"class.llvm::APInt"* %0
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNK4llvm5APIntanERKS0_(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"*, %"class.llvm::APInt"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp ult i32 %5, 65
  br i1 %6, label %7, label %13

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = and i64 %11, %9
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %5, i64 %12, i1 zeroext false) #19
  br label %14

13:                                               ; preds = %3
  tail call void @_ZNK4llvm5APInt11AndSlowCaseERKS0_(%"class.llvm::APInt"* sret %0, %"class.llvm::APInt"* %1, %"class.llvm::APInt"* dereferenceable(16) %2) #19
  br label %14

14:                                               ; preds = %13, %7
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm8APIntOps21GreatestCommonDivisorERKNS_5APIntES3_(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"* dereferenceable(16), %"class.llvm::APInt"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 {
  %4 = alloca <2 x i64>, align 16
  %5 = bitcast <2 x i64>* %4 to %"class.llvm::APInt"*
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to %"class.llvm::APInt"*
  %8 = alloca %"class.llvm::APInt", align 8
  %9 = bitcast %"class.llvm::APInt"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 -86, i64 16, i1 false)
  tail call void @_ZN4llvm5APIntC2ERKS0_(%"class.llvm::APInt"* %0, %"class.llvm::APInt"* dereferenceable(16) %1) #19
  %10 = bitcast <2 x i64>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #17
  %11 = bitcast <2 x i64>* %4 to i32*
  %12 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1, i32 0
  store <2 x i64> <i64 -6148914691236517206, i64 0>, <2 x i64>* %4, align 16
  store i32 %13, i32* %11, align 16
  %15 = icmp ult i32 %13, 65
  br i1 %15, label %16, label %19

16:                                               ; preds = %3
  %17 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1, i32 0
  %18 = load i64, i64* %17, align 8
  store i64 %18, i64* %14, align 8
  br label %30

19:                                               ; preds = %3
  %20 = zext i32 %13 to i64
  %21 = add nuw nsw i64 %20, 63
  %22 = lshr i64 %21, 6
  %23 = shl nuw nsw i64 %22, 3
  %24 = tail call i8* @_Znam(i64 %23) #18
  %25 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1
  %26 = bitcast %union.anon* %25 to i8**
  store i8* %24, i8** %26, align 8
  %27 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1
  %28 = bitcast %union.anon* %27 to i8**
  %29 = load i8*, i8** %28, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %24, i8* align 8 %29, i64 %23, i1 false) #17
  br label %30

30:                                               ; preds = %16, %19
  %31 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1
  %32 = bitcast %union.anon* %31 to i64**
  %33 = bitcast <2 x i64>* %6 to i8*
  %34 = bitcast <2 x i64>* %6 to i32*
  %35 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %7, i64 0, i32 1, i32 0
  %36 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %7, i64 0, i32 1
  %37 = bitcast %union.anon* %36 to i8**
  %38 = bitcast %"class.llvm::APInt"* %8 to i8*
  %39 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %8, i64 0, i32 1, i32 0
  %40 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %8, i64 0, i32 0
  %41 = bitcast %union.anon* %36 to i64**
  br label %42

42:                                               ; preds = %94, %30
  %43 = phi i32 [ %95, %94 ], [ %13, %30 ]
  %44 = icmp ult i32 %43, 65
  br i1 %44, label %62, label %45

45:                                               ; preds = %42
  %46 = zext i32 %43 to i64
  %47 = add nuw nsw i64 %46, 63
  %48 = lshr i64 %47, 6
  %49 = icmp eq i64 %48, 0
  %50 = load i64*, i64** %32, align 8
  br i1 %49, label %100, label %51

51:                                               ; preds = %45
  %52 = bitcast i64* %50 to i8*
  %53 = ptrtoint i64* %50 to i64
  br label %56

54:                                               ; preds = %56
  %55 = icmp eq i64 %61, %48
  br i1 %55, label %96, label %56

56:                                               ; preds = %54, %51
  %57 = phi i64 [ %61, %54 ], [ 0, %51 ]
  %58 = getelementptr inbounds i64, i64* %50, i64 %57
  %59 = load i64, i64* %58, align 8
  %60 = icmp eq i64 %59, 0
  %61 = add nuw nsw i64 %57, 1
  br i1 %60, label %54, label %66

62:                                               ; preds = %42
  %63 = load i64, i64* %14, align 8
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %104, label %65

65:                                               ; preds = %62
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %33) #17
  store <2 x i64> <i64 -6148914691236517206, i64 0>, <2 x i64>* %6, align 16
  store i32 %43, i32* %34, align 16
  br label %67

66:                                               ; preds = %56
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %33) #17
  store <2 x i64> <i64 -6148914691236517206, i64 0>, <2 x i64>* %6, align 16
  store i32 %43, i32* %34, align 16
  br i1 %44, label %67, label %69

67:                                               ; preds = %65, %66
  %68 = phi i64 [ %63, %65 ], [ %53, %66 ]
  store i64 %68, i64* %35, align 8
  br label %75

69:                                               ; preds = %66
  %70 = zext i32 %43 to i64
  %71 = add nuw nsw i64 %70, 63
  %72 = lshr i64 %71, 6
  %73 = shl nuw nsw i64 %72, 3
  %74 = call i8* @_Znam(i64 %73) #18
  store i8* %74, i8** %37, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %74, i8* align 8 %52, i64 %73, i1 false) #17
  br label %75

75:                                               ; preds = %67, %69
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %38) #17
  call void @_ZNK4llvm5APInt4uremERKS0_(%"class.llvm::APInt"* nonnull sret %8, %"class.llvm::APInt"* %0, %"class.llvm::APInt"* nonnull dereferenceable(16) %5) #20
  %76 = load i32, i32* %11, align 16
  %77 = icmp ult i32 %76, 65
  br i1 %77, label %83, label %78

78:                                               ; preds = %75
  %79 = load i64*, i64** %32, align 8
  %80 = icmp eq i64* %79, null
  br i1 %80, label %83, label %81

81:                                               ; preds = %78
  %82 = bitcast i64* %79 to i8*
  call void @_ZdaPv(i8* %82) #18
  br label %83

83:                                               ; preds = %81, %78, %75
  %84 = load i64, i64* %39, align 8
  store i64 %84, i64* %14, align 8
  %85 = load i32, i32* %40, align 8
  store i32 %85, i32* %11, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %38) #17
  %86 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntaSERKS0_(%"class.llvm::APInt"* %0, %"class.llvm::APInt"* nonnull dereferenceable(16) %7) #19
  %87 = load i32, i32* %34, align 16
  %88 = icmp ugt i32 %87, 64
  br i1 %88, label %89, label %94

89:                                               ; preds = %83
  %90 = load i64*, i64** %41, align 8
  %91 = icmp eq i64* %90, null
  br i1 %91, label %94, label %92

92:                                               ; preds = %89
  %93 = bitcast i64* %90 to i8*
  call void @_ZdaPv(i8* %93) #18
  br label %94

94:                                               ; preds = %83, %89, %92
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %33) #17
  %95 = load i32, i32* %11, align 16
  br label %42

96:                                               ; preds = %54
  %97 = icmp ult i32 %43, 65
  %98 = icmp eq i64* %50, null
  %99 = or i1 %97, %98
  br i1 %99, label %104, label %102

100:                                              ; preds = %45
  %101 = icmp eq i64* %50, null
  br i1 %101, label %104, label %102

102:                                              ; preds = %96, %100
  %103 = bitcast i64* %50 to i8*
  call void @_ZdaPv(i8* %103) #18
  br label %104

104:                                              ; preds = %62, %96, %100, %102
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #17
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntaSERKS0_(%"class.llvm::APInt"*, %"class.llvm::APInt"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 65
  br i1 %5, label %6, label %16

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 65
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  store i64 %12, i64* %13, align 8
  %14 = load i32, i32* %7, align 8
  store i32 %14, i32* %3, align 8
  %15 = tail call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APInt15clearUnusedBitsEv(%"class.llvm::APInt"* %0) #19
  br label %18

16:                                               ; preds = %6, %2
  %17 = tail call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APInt14AssignSlowCaseERKS0_(%"class.llvm::APInt"* %0, %"class.llvm::APInt"* dereferenceable(16) %1) #19
  br label %18

18:                                               ; preds = %16, %10
  %19 = phi %"class.llvm::APInt"* [ %15, %10 ], [ %17, %16 ]
  ret %"class.llvm::APInt"* %19
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm8APIntOps18RoundDoubleToAPIntEdj(%"class.llvm::APInt"* noalias sret, double, i32) local_unnamed_addr #0 {
  %4 = alloca %"class.llvm::APInt", align 8
  %5 = alloca %"class.llvm::APInt", align 8
  %6 = alloca %"class.llvm::APInt", align 8
  %7 = alloca %"class.llvm::APInt", align 8
  %8 = bitcast double %1 to i64
  %9 = icmp slt i64 %8, 0
  %10 = lshr i64 %8, 52
  %11 = and i64 %10, 2047
  %12 = add nsw i64 %11, -1023
  %13 = icmp slt i64 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %3
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %2, i64 0, i1 zeroext false) #19
  br label %100

15:                                               ; preds = %3
  %16 = and i64 %8, 4503599627370495
  %17 = or i64 %16, 4503599627370496
  %18 = icmp slt i64 %12, 52
  br i1 %18, label %19, label %31

19:                                               ; preds = %15
  %20 = sub nuw nsw i64 1075, %11
  %21 = lshr i64 %17, %20
  br i1 %9, label %22, label %30

22:                                               ; preds = %19
  call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* nonnull %4, i32 %2, i64 %21, i1 zeroext false) #19
  call void @_ZN4llvm5APInt11flipAllBitsEv(%"class.llvm::APInt"* nonnull %4) #20, !noalias !4
  %23 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntppEv(%"class.llvm::APInt"* nonnull %4) #20, !noalias !4
  %24 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %25 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %4, i64 0, i32 0
  %26 = load i32, i32* %25, align 8, !noalias !4
  store i32 %26, i32* %24, align 8, !alias.scope !4
  %27 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %28 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %4, i64 0, i32 1, i32 0
  %29 = load i64, i64* %28, align 8, !noalias !4
  store i64 %29, i64* %27, align 8, !alias.scope !4
  store i32 0, i32* %25, align 8, !noalias !4
  br label %100

30:                                               ; preds = %19
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %2, i64 %21, i1 zeroext false) #19
  br label %100

31:                                               ; preds = %15
  %32 = zext i32 %2 to i64
  %33 = add nsw i64 %11, -1075
  %34 = icmp slt i64 %33, %32
  br i1 %34, label %36, label %35

35:                                               ; preds = %31
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %2, i64 0, i1 zeroext false) #19
  br label %100

36:                                               ; preds = %31
  %37 = bitcast %"class.llvm::APInt"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %37) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %37, i8 -86, i64 16, i1 false)
  call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* nonnull %5, i32 %2, i64 %17, i1 zeroext false) #19
  %38 = bitcast %"class.llvm::APInt"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %38) #17
  %39 = trunc i64 %12 to i32
  %40 = add nsw i32 %39, -52
  call void @_ZNK4llvm5APInt3shlEj(%"class.llvm::APInt"* nonnull sret %6, %"class.llvm::APInt"* nonnull %5, i32 %40) #19
  %41 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 0
  %42 = load i32, i32* %41, align 8
  %43 = icmp ult i32 %42, 65
  br i1 %43, label %51, label %44

44:                                               ; preds = %36
  %45 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1
  %46 = bitcast %union.anon* %45 to i64**
  %47 = load i64*, i64** %46, align 8
  %48 = icmp eq i64* %47, null
  br i1 %48, label %51, label %49

49:                                               ; preds = %44
  %50 = bitcast i64* %47 to i8*
  call void @_ZdaPv(i8* %50) #18
  br label %51

51:                                               ; preds = %49, %44, %36
  %52 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1, i32 0
  %53 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 1, i32 0
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %52, align 8
  %55 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 0
  %56 = load i32, i32* %55, align 8
  store i32 %56, i32* %41, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %38) #17
  %57 = inttoptr i64 %54 to i8*
  br i1 %9, label %58, label %71

58:                                               ; preds = %51
  %59 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %7, i64 0, i32 0
  store i32 %56, i32* %59, align 8
  %60 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %7, i64 0, i32 1, i32 0
  store i64 0, i64* %60, align 8
  %61 = icmp ult i32 %56, 65
  br i1 %61, label %62, label %63

62:                                               ; preds = %58
  store i64 %54, i64* %60, align 8
  br label %84

63:                                               ; preds = %58
  %64 = zext i32 %56 to i64
  %65 = add nuw nsw i64 %64, 63
  %66 = lshr i64 %65, 6
  %67 = shl nuw nsw i64 %66, 3
  %68 = call i8* @_Znam(i64 %67) #18
  %69 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %7, i64 0, i32 1
  %70 = bitcast %union.anon* %69 to i8**
  store i8* %68, i8** %70, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %68, i8* align 8 %57, i64 %67, i1 false) #17
  br label %84

71:                                               ; preds = %51
  %72 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  store i32 %56, i32* %72, align 8
  %73 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  store i64 0, i64* %73, align 8
  %74 = icmp ult i32 %56, 65
  br i1 %74, label %75, label %76

75:                                               ; preds = %71
  store i64 %54, i64* %73, align 8
  br label %99

76:                                               ; preds = %71
  %77 = zext i32 %56 to i64
  %78 = add nuw nsw i64 %77, 63
  %79 = lshr i64 %78, 6
  %80 = shl nuw nsw i64 %79, 3
  %81 = call i8* @_Znam(i64 %80) #18
  %82 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %83 = bitcast %union.anon* %82 to i8**
  store i8* %81, i8** %83, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %81, i8* align 8 %57, i64 %80, i1 false) #17
  br label %92

84:                                               ; preds = %62, %63
  call void @_ZN4llvm5APInt11flipAllBitsEv(%"class.llvm::APInt"* nonnull %7) #20, !noalias !7
  %85 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntppEv(%"class.llvm::APInt"* nonnull %7) #20, !noalias !7
  %86 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %87 = load i32, i32* %59, align 8, !noalias !7
  store i32 %87, i32* %86, align 8, !alias.scope !7
  %88 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %89 = load i64, i64* %60, align 8, !noalias !7
  store i64 %89, i64* %88, align 8, !alias.scope !7
  store i32 0, i32* %59, align 8, !noalias !7
  %90 = load i32, i32* %41, align 8
  %91 = icmp ugt i32 %90, 64
  br i1 %91, label %92, label %99

92:                                               ; preds = %76, %84
  %93 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1
  %94 = bitcast %union.anon* %93 to i64**
  %95 = load i64*, i64** %94, align 8
  %96 = icmp eq i64* %95, null
  br i1 %96, label %99, label %97

97:                                               ; preds = %92
  %98 = bitcast i64* %95 to i8*
  call void @_ZdaPv(i8* %98) #18
  br label %99

99:                                               ; preds = %75, %84, %92, %97
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %37) #17
  br label %100

100:                                              ; preds = %35, %99, %30, %22, %14
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNK4llvm5APInt3shlEj(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"*, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp ult i32 %5, 65
  br i1 %6, label %7, label %15

7:                                                ; preds = %3
  %8 = icmp ugt i32 %5, %2
  br i1 %8, label %10, label %9

9:                                                ; preds = %7
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %5, i64 0, i1 zeroext false) #19
  br label %16

10:                                               ; preds = %7
  %11 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = zext i32 %2 to i64
  %14 = shl i64 %12, %13
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %5, i64 %14, i1 zeroext false) #19
  br label %16

15:                                               ; preds = %3
  tail call void @_ZNK4llvm5APInt11shlSlowCaseEj(%"class.llvm::APInt"* sret %0, %"class.llvm::APInt"* %1, i32 %2) #19
  br label %16

16:                                               ; preds = %15, %10, %9
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden double @_ZNK4llvm5APInt13roundToDoubleEb(%"class.llvm::APInt"* nocapture readonly, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.llvm::APInt", align 8
  %4 = alloca %"class.llvm::APInt", align 8
  %5 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp ult i32 %6, 65
  br i1 %7, label %12, label %8

8:                                                ; preds = %2
  %9 = tail call i32 @_ZNK4llvm5APInt25countLeadingZerosSlowCaseEv(%"class.llvm::APInt"* %0) #20
  %10 = sub i32 %6, %9
  %11 = icmp ult i32 %10, 65
  br i1 %11, label %14, label %29

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  br label %18

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %16 = bitcast %union.anon* %15 to i64**
  %17 = load i64*, i64** %16, align 8
  br label %18

18:                                               ; preds = %12, %14
  %19 = phi i64* [ %13, %12 ], [ %17, %14 ]
  %20 = load i64, i64* %19, align 8
  br i1 %1, label %21, label %27

21:                                               ; preds = %18
  %22 = sub i32 64, %6
  %23 = zext i32 %22 to i64
  %24 = shl i64 %20, %23
  %25 = ashr i64 %24, %23
  %26 = sitofp i64 %25 to double
  br label %145

27:                                               ; preds = %18
  %28 = uitofp i64 %20 to double
  br label %145

29:                                               ; preds = %8
  br i1 %1, label %32, label %30

30:                                               ; preds = %29
  %31 = bitcast %"class.llvm::APInt"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %31) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %31, i8 -86, i64 16, i1 false)
  br label %47

32:                                               ; preds = %29
  %33 = add i32 %6, -1
  %34 = and i32 %33, 63
  %35 = zext i32 %34 to i64
  %36 = shl i64 1, %35
  %37 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %38 = bitcast %union.anon* %37 to i64**
  %39 = load i64*, i64** %38, align 8
  %40 = lshr i32 %33, 6
  %41 = zext i32 %40 to i64
  %42 = getelementptr inbounds i64, i64* %39, i64 %41
  %43 = load i64, i64* %42, align 8
  %44 = and i64 %43, %36
  %45 = icmp eq i64 %44, 0
  %46 = bitcast %"class.llvm::APInt"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %46) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %46, i8 -86, i64 16, i1 false)
  br i1 %45, label %47, label %61

47:                                               ; preds = %30, %32
  %48 = phi i8* [ %31, %30 ], [ %46, %32 ]
  %49 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 0
  store i32 %6, i32* %49, align 8
  %50 = zext i32 %6 to i64
  %51 = add nuw nsw i64 %50, 63
  %52 = lshr i64 %51, 6
  %53 = shl nuw nsw i64 %52, 3
  %54 = tail call i8* @_Znam(i64 %53) #18
  %55 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 1
  %56 = bitcast %union.anon* %55 to i8**
  store i8* %54, i8** %56, align 8
  %57 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %58 = bitcast %union.anon* %57 to i8**
  %59 = load i8*, i8** %58, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %54, i8* align 8 %59, i64 %53, i1 false) #17
  %60 = bitcast i8* %54 to i64*
  br label %84

61:                                               ; preds = %32
  %62 = bitcast i64* %39 to i8*
  %63 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %4, i64 0, i32 0
  store i32 %6, i32* %63, align 8
  %64 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %4, i64 0, i32 1, i32 0
  %65 = zext i32 %6 to i64
  %66 = add nuw nsw i64 %65, 63
  %67 = lshr i64 %66, 6
  %68 = shl nuw nsw i64 %67, 3
  %69 = tail call i8* @_Znam(i64 %68) #18
  %70 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %4, i64 0, i32 1
  %71 = bitcast %union.anon* %70 to i8**
  store i8* %69, i8** %71, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %69, i8* align 8 %62, i64 %68, i1 false) #17
  call void @_ZN4llvm5APInt11flipAllBitsEv(%"class.llvm::APInt"* nonnull %4) #20, !noalias !10
  %72 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntppEv(%"class.llvm::APInt"* nonnull %4) #20, !noalias !10
  %73 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 0
  %74 = load i32, i32* %63, align 8, !noalias !10
  store i32 %74, i32* %73, align 8, !alias.scope !10
  %75 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 1, i32 0
  %76 = load i64, i64* %64, align 8, !noalias !10
  store i64 %76, i64* %75, align 8, !alias.scope !10
  store i32 0, i32* %63, align 8, !noalias !10
  %77 = inttoptr i64 %76 to i64*
  %78 = icmp ult i32 %74, 65
  br i1 %78, label %79, label %84

79:                                               ; preds = %61
  %80 = call i64 @llvm.ctlz.i64(i64 %76, i1 false) #17, !range !2
  %81 = trunc i64 %80 to i32
  %82 = add nsw i32 %74, -64
  %83 = add i32 %82, %81
  br label %90

84:                                               ; preds = %47, %61
  %85 = phi i1 [ false, %47 ], [ true, %61 ]
  %86 = phi i8* [ %48, %47 ], [ %46, %61 ]
  %87 = phi i32 [ %6, %47 ], [ %74, %61 ]
  %88 = phi i64* [ %60, %47 ], [ %77, %61 ]
  %89 = call i32 @_ZNK4llvm5APInt25countLeadingZerosSlowCaseEv(%"class.llvm::APInt"* nonnull %3) #20
  br label %90

90:                                               ; preds = %79, %84
  %91 = phi i1 [ true, %79 ], [ %85, %84 ]
  %92 = phi i8* [ %46, %79 ], [ %86, %84 ]
  %93 = phi i32 [ %74, %79 ], [ %87, %84 ]
  %94 = phi i64* [ %77, %79 ], [ %88, %84 ]
  %95 = phi i32 [ %83, %79 ], [ %89, %84 ]
  %96 = sub i32 %93, %95
  %97 = icmp ugt i32 %96, 1023
  br i1 %97, label %98, label %101

98:                                               ; preds = %90
  %99 = and i1 %91, %1
  %100 = select i1 %99, double 0xFFF0000000000000, double 0x7FF0000000000000
  br label %137

101:                                              ; preds = %90
  %102 = zext i32 %96 to i64
  %103 = add nsw i32 %96, -1
  %104 = lshr i32 %103, 6
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %106, label %113

106:                                              ; preds = %101
  %107 = load i64, i64* %94, align 8
  %108 = icmp ugt i32 %96, 52
  br i1 %108, label %109, label %129

109:                                              ; preds = %106
  %110 = add nsw i32 %96, -52
  %111 = zext i32 %110 to i64
  %112 = lshr i64 %107, %111
  br label %129

113:                                              ; preds = %101
  %114 = zext i32 %104 to i64
  %115 = getelementptr inbounds i64, i64* %94, i64 %114
  %116 = load i64, i64* %115, align 8
  %117 = and i32 %96, 63
  %118 = sub nsw i32 52, %117
  %119 = zext i32 %118 to i64
  %120 = shl i64 %116, %119
  %121 = add nsw i32 %104, -1
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds i64, i64* %94, i64 %122
  %124 = load i64, i64* %123, align 8
  %125 = add nuw nsw i32 %117, 11
  %126 = zext i32 %125 to i64
  %127 = lshr i64 %124, %126
  %128 = or i64 %127, %120
  br label %129

129:                                              ; preds = %106, %109, %113
  %130 = phi i64 [ %112, %109 ], [ %107, %106 ], [ %128, %113 ]
  %131 = select i1 %91, i64 -9223372036854775808, i64 0
  %132 = shl i64 %102, 52
  %133 = add nuw nsw i64 %132, 4607182418800017408
  %134 = or i64 %133, %131
  %135 = or i64 %134, %130
  %136 = bitcast i64 %135 to double
  br label %137

137:                                              ; preds = %98, %129
  %138 = phi double [ %136, %129 ], [ %100, %98 ]
  %139 = icmp ult i32 %93, 65
  %140 = icmp eq i64* %94, null
  %141 = or i1 %139, %140
  br i1 %141, label %144, label %142

142:                                              ; preds = %137
  %143 = bitcast i64* %94 to i8*
  call void @_ZdaPv(i8* %143) #18
  br label %144

144:                                              ; preds = %137, %142
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %92) #17
  br label %145

145:                                              ; preds = %144, %27, %21
  %146 = phi double [ %26, %21 ], [ %28, %27 ], [ %138, %144 ]
  ret double %146
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt5truncEj(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %4 = icmp ult i32 %2, 65
  br i1 %4, label %5, label %18

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp ult i32 %7, 65
  %9 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  br i1 %8, label %10, label %12

10:                                               ; preds = %5
  %11 = getelementptr inbounds %union.anon, %union.anon* %9, i64 0, i32 0
  br label %15

12:                                               ; preds = %5
  %13 = bitcast %union.anon* %9 to i64**
  %14 = load i64*, i64** %13, align 8
  br label %15

15:                                               ; preds = %10, %12
  %16 = phi i64* [ %11, %10 ], [ %14, %12 ]
  %17 = load i64, i64* %16, align 8
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %2, i64 %17, i1 zeroext false) #19
  br label %60

18:                                               ; preds = %3
  %19 = zext i32 %2 to i64
  %20 = add nuw nsw i64 %19, 63
  %21 = lshr i64 %20, 6
  %22 = shl nuw nsw i64 %21, 3
  %23 = tail call i8* @_Znam(i64 %22) #18
  %24 = bitcast i8* %23 to i64*
  %25 = ptrtoint i8* %23 to i64
  %26 = lshr i32 %2, 6
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %42, label %28

28:                                               ; preds = %18
  %29 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %30 = bitcast %union.anon* %29 to i64**
  %31 = zext i32 %26 to i64
  %32 = load i64*, i64** %30, align 8
  br label %33

33:                                               ; preds = %28, %33
  %34 = phi i64 [ 0, %28 ], [ %38, %33 ]
  %35 = getelementptr inbounds i64, i64* %32, i64 %34
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds i64, i64* %24, i64 %34
  store i64 %36, i64* %37, align 8
  %38 = add nuw nsw i64 %34, 1
  %39 = icmp eq i64 %38, %31
  br i1 %39, label %40, label %33

40:                                               ; preds = %33
  %41 = zext i32 %26 to i64
  br label %42

42:                                               ; preds = %40, %18
  %43 = phi i64 [ 0, %18 ], [ %41, %40 ]
  %44 = sub i32 0, %2
  %45 = and i32 %44, 63
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %57, label %47

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %49 = bitcast %union.anon* %48 to i64**
  %50 = load i64*, i64** %49, align 8
  %51 = getelementptr inbounds i64, i64* %50, i64 %43
  %52 = load i64, i64* %51, align 8
  %53 = zext i32 %45 to i64
  %54 = lshr i64 -1, %53
  %55 = and i64 %52, %54
  %56 = getelementptr inbounds i64, i64* %24, i64 %43
  store i64 %55, i64* %56, align 8
  br label %57

57:                                               ; preds = %47, %42
  %58 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  store i32 %2, i32* %58, align 8
  %59 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  store i64 %25, i64* %59, align 8
  br label %60

60:                                               ; preds = %57, %15
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt4sextEj(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %4 = icmp ult i32 %2, 65
  br i1 %4, label %5, label %19

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = sub i32 64, %9
  %11 = zext i32 %10 to i64
  %12 = shl i64 %7, %11
  %13 = sub i32 %2, %9
  %14 = zext i32 %13 to i64
  %15 = ashr i64 %12, %14
  %16 = sub nuw nsw i32 64, %2
  %17 = zext i32 %16 to i64
  %18 = lshr i64 %15, %17
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %2, i64 %18, i1 zeroext false) #19
  br label %99

19:                                               ; preds = %3
  %20 = zext i32 %2 to i64
  %21 = add nuw nsw i64 %20, 63
  %22 = lshr i64 %21, 6
  %23 = shl nuw nsw i64 %22, 3
  %24 = tail call i8* @_Znam(i64 %23) #18
  %25 = bitcast i8* %24 to i64*
  %26 = ptrtoint i8* %24 to i64
  %27 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %28 = load i32, i32* %27, align 8
  %29 = icmp ult i32 %28, 64
  br i1 %29, label %50, label %30

30:                                               ; preds = %19
  %31 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %32 = bitcast %union.anon* %31 to i64**
  %33 = getelementptr inbounds %union.anon, %union.anon* %31, i64 0, i32 0
  %34 = icmp eq i32 %28, 64
  %35 = lshr i32 %28, 6
  br label %36

36:                                               ; preds = %30, %40
  %37 = phi i32 [ 0, %30 ], [ %46, %40 ]
  br i1 %34, label %40, label %38

38:                                               ; preds = %36
  %39 = load i64*, i64** %32, align 8
  br label %40

40:                                               ; preds = %36, %38
  %41 = phi i64* [ %39, %38 ], [ %33, %36 ]
  %42 = zext i32 %37 to i64
  %43 = getelementptr inbounds i64, i64* %41, i64 %42
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds i64, i64* %25, i64 %42
  store i64 %44, i64* %45, align 8
  %46 = add i32 %37, 1
  %47 = icmp eq i32 %46, %35
  br i1 %47, label %48, label %36

48:                                               ; preds = %40
  %49 = ashr i64 %44, 63
  br label %50

50:                                               ; preds = %48, %19
  %51 = phi i32 [ %46, %48 ], [ 0, %19 ]
  %52 = phi i64 [ %49, %48 ], [ 0, %19 ]
  %53 = sub i32 0, %28
  %54 = and i32 %53, 63
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %72, label %56

56:                                               ; preds = %50
  %57 = icmp ult i32 %28, 65
  %58 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  br i1 %57, label %59, label %61

59:                                               ; preds = %56
  %60 = getelementptr inbounds %union.anon, %union.anon* %58, i64 0, i32 0
  br label %64

61:                                               ; preds = %56
  %62 = bitcast %union.anon* %58 to i64**
  %63 = load i64*, i64** %62, align 8
  br label %64

64:                                               ; preds = %59, %61
  %65 = phi i64* [ %60, %59 ], [ %63, %61 ]
  %66 = zext i32 %51 to i64
  %67 = getelementptr inbounds i64, i64* %65, i64 %66
  %68 = load i64, i64* %67, align 8
  %69 = zext i32 %54 to i64
  %70 = shl i64 %68, %69
  %71 = ashr i64 %70, %69
  br label %72

72:                                               ; preds = %50, %64
  %73 = phi i64 [ %71, %64 ], [ %52, %50 ]
  %74 = lshr i32 %2, 6
  %75 = icmp eq i32 %51, %74
  br i1 %75, label %84, label %76

76:                                               ; preds = %72, %76
  %77 = phi i64 [ %81, %76 ], [ %73, %72 ]
  %78 = phi i32 [ %82, %76 ], [ %51, %72 ]
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds i64, i64* %25, i64 %79
  store i64 %77, i64* %80, align 8
  %81 = ashr i64 %77, 63
  %82 = add i32 %78, 1
  %83 = icmp eq i32 %82, %74
  br i1 %83, label %84, label %76

84:                                               ; preds = %76, %72
  %85 = phi i32 [ %51, %72 ], [ %74, %76 ]
  %86 = phi i64 [ %73, %72 ], [ %81, %76 ]
  %87 = sub i32 0, %2
  %88 = and i32 %87, 63
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %96, label %90

90:                                               ; preds = %84
  %91 = zext i32 %88 to i64
  %92 = lshr i64 -1, %91
  %93 = and i64 %86, %92
  %94 = zext i32 %85 to i64
  %95 = getelementptr inbounds i64, i64* %25, i64 %94
  store i64 %93, i64* %95, align 8
  br label %96

96:                                               ; preds = %90, %84
  %97 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  store i32 %2, i32* %97, align 8
  %98 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  store i64 %26, i64* %98, align 8
  br label %99

99:                                               ; preds = %96, %5
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt4zextEj(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %4 = icmp ult i32 %2, 65
  br i1 %4, label %5, label %8

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %7 = load i64, i64* %6, align 8
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %2, i64 %7, i1 zeroext false) #19
  br label %52

8:                                                ; preds = %3
  %9 = zext i32 %2 to i64
  %10 = add nuw nsw i64 %9, 63
  %11 = lshr i64 %10, 6
  %12 = trunc i64 %11 to i32
  %13 = shl nuw nsw i64 %11, 3
  %14 = tail call i8* @_Znam(i64 %13) #18
  %15 = bitcast i8* %14 to i64*
  %16 = ptrtoint i8* %14 to i64
  %17 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %18 = load i32, i32* %17, align 8
  %19 = zext i32 %18 to i64
  %20 = add nuw nsw i64 %19, 63
  %21 = and i64 %20, 8589934528
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %42, label %23

23:                                               ; preds = %8
  %24 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %25 = bitcast %union.anon* %24 to i64**
  %26 = getelementptr inbounds %union.anon, %union.anon* %24, i64 0, i32 0
  %27 = icmp ult i32 %18, 65
  %28 = lshr i64 %20, 6
  %29 = trunc i64 %28 to i32
  br label %30

30:                                               ; preds = %23, %34
  %31 = phi i32 [ 0, %23 ], [ %40, %34 ]
  br i1 %27, label %34, label %32

32:                                               ; preds = %30
  %33 = load i64*, i64** %25, align 8
  br label %34

34:                                               ; preds = %30, %32
  %35 = phi i64* [ %33, %32 ], [ %26, %30 ]
  %36 = zext i32 %31 to i64
  %37 = getelementptr inbounds i64, i64* %35, i64 %36
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds i64, i64* %15, i64 %36
  store i64 %38, i64* %39, align 8
  %40 = add i32 %31, 1
  %41 = icmp eq i32 %40, %29
  br i1 %41, label %42, label %30

42:                                               ; preds = %34, %8
  %43 = phi i32 [ 0, %8 ], [ %40, %34 ]
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds i64, i64* %15, i64 %44
  %46 = bitcast i64* %45 to i8*
  %47 = sub i32 %12, %43
  %48 = shl i32 %47, 3
  %49 = zext i32 %48 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %46, i8 0, i64 %49, i1 false)
  %50 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  store i32 %2, i32* %50, align 8
  %51 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  store i64 %16, i64* %51, align 8
  br label %52

52:                                               ; preds = %42, %5
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt11zextOrTruncEj(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"*, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp ult i32 %5, %2
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  tail call void @_ZNK4llvm5APInt4zextEj(%"class.llvm::APInt"* sret %0, %"class.llvm::APInt"* %1, i32 %2) #19
  br label %12

8:                                                ; preds = %3
  %9 = icmp ugt i32 %5, %2
  br i1 %9, label %10, label %11

10:                                               ; preds = %8
  tail call void @_ZNK4llvm5APInt5truncEj(%"class.llvm::APInt"* sret %0, %"class.llvm::APInt"* %1, i32 %2) #19
  br label %12

11:                                               ; preds = %8
  tail call void @_ZN4llvm5APIntC2ERKS0_(%"class.llvm::APInt"* %0, %"class.llvm::APInt"* dereferenceable(16) %1) #19
  br label %12

12:                                               ; preds = %11, %10, %7
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt11sextOrTruncEj(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"*, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp ult i32 %5, %2
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  tail call void @_ZNK4llvm5APInt4sextEj(%"class.llvm::APInt"* sret %0, %"class.llvm::APInt"* %1, i32 %2) #19
  br label %12

8:                                                ; preds = %3
  %9 = icmp ugt i32 %5, %2
  br i1 %9, label %10, label %11

10:                                               ; preds = %8
  tail call void @_ZNK4llvm5APInt5truncEj(%"class.llvm::APInt"* sret %0, %"class.llvm::APInt"* %1, i32 %2) #19
  br label %12

11:                                               ; preds = %8
  tail call void @_ZN4llvm5APIntC2ERKS0_(%"class.llvm::APInt"* %0, %"class.llvm::APInt"* dereferenceable(16) %1) #19
  br label %12

12:                                               ; preds = %11, %10, %7
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt10zextOrSelfEj(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"*, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp ult i32 %5, %2
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  tail call void @_ZNK4llvm5APInt4zextEj(%"class.llvm::APInt"* sret %0, %"class.llvm::APInt"* %1, i32 %2) #19
  br label %9

8:                                                ; preds = %3
  tail call void @_ZN4llvm5APIntC2ERKS0_(%"class.llvm::APInt"* %0, %"class.llvm::APInt"* dereferenceable(16) %1) #19
  br label %9

9:                                                ; preds = %8, %7
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt10sextOrSelfEj(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"*, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp ult i32 %5, %2
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  tail call void @_ZNK4llvm5APInt4sextEj(%"class.llvm::APInt"* sret %0, %"class.llvm::APInt"* %1, i32 %2) #19
  br label %9

8:                                                ; preds = %3
  tail call void @_ZN4llvm5APIntC2ERKS0_(%"class.llvm::APInt"* %0, %"class.llvm::APInt"* dereferenceable(16) %1) #19
  br label %9

9:                                                ; preds = %8, %7
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt4ashrERKS0_(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"*, %"class.llvm::APInt"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = zext i32 %5 to i64
  %7 = tail call i64 @_ZNK4llvm5APInt15getLimitedValueEm(%"class.llvm::APInt"* %2, i64 %6) #19
  %8 = trunc i64 %7 to i32
  tail call void @_ZNK4llvm5APInt4ashrEj(%"class.llvm::APInt"* sret %0, %"class.llvm::APInt"* %1, i32 %8) #19
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt4ashrEj(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"*, i32) local_unnamed_addr #0 align 2 {
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %5, label %6

5:                                                ; preds = %3
  tail call void @_ZN4llvm5APIntC2ERKS0_(%"class.llvm::APInt"* %0, %"class.llvm::APInt"* dereferenceable(16) %1) #19
  br label %185

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 65
  %10 = icmp eq i32 %8, %2
  br i1 %9, label %11, label %22

11:                                               ; preds = %6
  br i1 %10, label %12, label %13

12:                                               ; preds = %11
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %2, i64 0, i1 zeroext false) #19
  br label %185

13:                                               ; preds = %11
  %14 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = sub nuw nsw i32 64, %8
  %17 = zext i32 %16 to i64
  %18 = shl i64 %15, %17
  %19 = ashr i64 %18, %17
  %20 = zext i32 %2 to i64
  %21 = ashr i64 %19, %20
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %8, i64 %21, i1 zeroext false) #19
  br label %185

22:                                               ; preds = %6
  br i1 %10, label %23, label %39

23:                                               ; preds = %22
  %24 = add i32 %2, -1
  %25 = and i32 %24, 63
  %26 = zext i32 %25 to i64
  %27 = shl i64 1, %26
  %28 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %29 = bitcast %union.anon* %28 to i64**
  %30 = load i64*, i64** %29, align 8
  %31 = lshr i32 %24, 6
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds i64, i64* %30, i64 %32
  %34 = load i64, i64* %33, align 8
  %35 = and i64 %34, %27
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %38, label %37

37:                                               ; preds = %23
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %2, i64 -1, i1 zeroext true) #19
  br label %185

38:                                               ; preds = %23
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %2, i64 0, i1 zeroext false) #19
  br label %185

39:                                               ; preds = %22
  %40 = zext i32 %8 to i64
  %41 = add nuw nsw i64 %40, 63
  %42 = lshr i64 %41, 6
  %43 = trunc i64 %42 to i32
  %44 = shl nuw nsw i64 %42, 3
  %45 = tail call i8* @_Znam(i64 %44) #18
  %46 = bitcast i8* %45 to i64*
  %47 = and i32 %2, 63
  %48 = lshr i32 %2, 6
  %49 = add nsw i32 %43, -1
  %50 = sub nsw i32 %49, %48
  %51 = and i32 %8, 63
  %52 = icmp eq i32 %51, 0
  %53 = select i1 %52, i32 64, i32 %51
  %54 = icmp eq i32 %47, 0
  br i1 %54, label %65, label %55

55:                                               ; preds = %39
  %56 = icmp eq i32 %50, 0
  %57 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %58 = bitcast %union.anon* %57 to i64**
  %59 = load i64*, i64** %58, align 8
  %60 = zext i32 %47 to i64
  br i1 %56, label %99, label %61

61:                                               ; preds = %55
  %62 = sub nuw nsw i32 64, %47
  %63 = zext i32 %62 to i64
  %64 = zext i32 %50 to i64
  br label %116

65:                                               ; preds = %39
  %66 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %67 = bitcast %union.anon* %66 to i64**
  %68 = load i64*, i64** %67, align 8
  br label %82

69:                                               ; preds = %82
  %70 = add i32 %8, -1
  %71 = and i32 %70, 63
  %72 = zext i32 %71 to i64
  %73 = shl i64 1, %72
  %74 = lshr i32 %70, 6
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds i64, i64* %68, i64 %75
  %77 = load i64, i64* %76, align 8
  %78 = and i64 %77, %73
  %79 = icmp ne i64 %78, 0
  %80 = icmp ult i32 %53, 64
  %81 = and i1 %80, %79
  br i1 %81, label %92, label %152

82:                                               ; preds = %65, %82
  %83 = phi i32 [ 0, %65 ], [ %90, %82 ]
  %84 = add i32 %83, %48
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds i64, i64* %68, i64 %85
  %87 = load i64, i64* %86, align 8
  %88 = zext i32 %83 to i64
  %89 = getelementptr inbounds i64, i64* %46, i64 %88
  store i64 %87, i64* %89, align 8
  %90 = add i32 %83, 1
  %91 = icmp ugt i32 %90, %50
  br i1 %91, label %69, label %82

92:                                               ; preds = %69
  %93 = zext i32 %53 to i64
  %94 = shl i64 -1, %93
  %95 = zext i32 %50 to i64
  %96 = getelementptr inbounds i64, i64* %46, i64 %95
  %97 = load i64, i64* %96, align 8
  %98 = or i64 %97, %94
  store i64 %98, i64* %96, align 8
  br label %152

99:                                               ; preds = %116, %55
  %100 = phi i64 [ 0, %55 ], [ %64, %116 ]
  %101 = zext i32 %49 to i64
  %102 = getelementptr inbounds i64, i64* %59, i64 %101
  %103 = load i64, i64* %102, align 8
  %104 = lshr i64 %103, %60
  %105 = getelementptr inbounds i64, i64* %46, i64 %100
  store i64 %104, i64* %105, align 8
  %106 = add i32 %8, -1
  %107 = and i32 %106, 63
  %108 = zext i32 %107 to i64
  %109 = shl i64 1, %108
  %110 = lshr i32 %106, 6
  %111 = zext i32 %110 to i64
  %112 = getelementptr inbounds i64, i64* %59, i64 %111
  %113 = load i64, i64* %112, align 8
  %114 = and i64 %113, %109
  %115 = icmp eq i64 %114, 0
  br i1 %115, label %152, label %133

116:                                              ; preds = %116, %61
  %117 = phi i64 [ 0, %61 ], [ %131, %116 ]
  %118 = trunc i64 %117 to i32
  %119 = add i32 %48, %118
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds i64, i64* %59, i64 %120
  %122 = load i64, i64* %121, align 8
  %123 = lshr i64 %122, %60
  %124 = add i32 %119, 1
  %125 = zext i32 %124 to i64
  %126 = getelementptr inbounds i64, i64* %59, i64 %125
  %127 = load i64, i64* %126, align 8
  %128 = shl i64 %127, %63
  %129 = or i64 %128, %123
  %130 = getelementptr inbounds i64, i64* %46, i64 %117
  store i64 %129, i64* %130, align 8
  %131 = add nuw nsw i64 %117, 1
  %132 = icmp eq i64 %131, %64
  br i1 %132, label %99, label %116

133:                                              ; preds = %99
  %134 = icmp ult i32 %53, %47
  br i1 %134, label %135, label %147

135:                                              ; preds = %133
  br i1 %56, label %146, label %136

136:                                              ; preds = %135
  %137 = sub nuw nsw i32 64, %47
  %138 = add nuw nsw i32 %137, %53
  %139 = zext i32 %138 to i64
  %140 = shl i64 -1, %139
  %141 = add nsw i32 %50, -1
  %142 = zext i32 %141 to i64
  %143 = getelementptr inbounds i64, i64* %46, i64 %142
  %144 = load i64, i64* %143, align 8
  %145 = or i64 %144, %140
  store i64 %145, i64* %143, align 8
  br label %146

146:                                              ; preds = %135, %136
  store i64 -1, i64* %105, align 8
  br label %152

147:                                              ; preds = %133
  %148 = sub nsw i32 %53, %47
  %149 = zext i32 %148 to i64
  %150 = shl i64 -1, %149
  %151 = or i64 %104, %150
  store i64 %151, i64* %105, align 8
  br label %152

152:                                              ; preds = %99, %147, %146, %69, %92
  %153 = phi i64 [ %109, %99 ], [ %109, %147 ], [ %109, %146 ], [ %73, %69 ], [ %73, %92 ]
  %154 = phi i64 [ %111, %99 ], [ %111, %147 ], [ %111, %146 ], [ %75, %69 ], [ %75, %92 ]
  %155 = phi i64* [ %59, %99 ], [ %59, %147 ], [ %59, %146 ], [ %68, %69 ], [ %68, %92 ]
  %156 = getelementptr inbounds i64, i64* %155, i64 %154
  %157 = load i64, i64* %156, align 8
  %158 = and i64 %157, %153
  %159 = icmp ne i64 %158, 0
  %160 = sext i1 %159 to i64
  %161 = add nsw i32 %50, 1
  %162 = icmp ult i32 %161, %43
  br i1 %162, label %163, label %166

163:                                              ; preds = %152
  %164 = sub nsw i32 %43, %48
  %165 = zext i32 %164 to i64
  br label %180

166:                                              ; preds = %180, %152
  %167 = ptrtoint i8* %45 to i64
  br i1 %52, label %177, label %168

168:                                              ; preds = %166
  %169 = sub nuw nsw i32 64, %51
  %170 = zext i32 %169 to i64
  %171 = lshr i64 -1, %170
  %172 = add nuw nsw i64 %42, 4294967295
  %173 = and i64 %172, 4294967295
  %174 = getelementptr inbounds i64, i64* %46, i64 %173
  %175 = load i64, i64* %174, align 8
  %176 = and i64 %175, %171
  store i64 %176, i64* %174, align 8
  br label %177

177:                                              ; preds = %168, %166
  %178 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  store i32 %8, i32* %178, align 8
  %179 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  store i64 %167, i64* %179, align 8
  br label %185

180:                                              ; preds = %180, %163
  %181 = phi i64 [ %165, %163 ], [ %183, %180 ]
  %182 = getelementptr inbounds i64, i64* %46, i64 %181
  store i64 %160, i64* %182, align 8
  %183 = add nuw nsw i64 %181, 1
  %184 = icmp eq i64 %183, %42
  br i1 %184, label %166, label %180

185:                                              ; preds = %177, %38, %37, %13, %12, %5
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden i64 @_ZNK4llvm5APInt15getLimitedValueEm(%"class.llvm::APInt"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 65
  br i1 %5, label %6, label %13

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = tail call i64 @llvm.ctlz.i64(i64 %8, i1 false) #17, !range !2
  %10 = trunc i64 %9 to i32
  %11 = add nsw i32 %4, -64
  %12 = add i32 %11, %10
  br label %15

13:                                               ; preds = %2
  %14 = tail call i32 @_ZNK4llvm5APInt25countLeadingZerosSlowCaseEv(%"class.llvm::APInt"* %0) #20
  br label %15

15:                                               ; preds = %6, %13
  %16 = phi i32 [ %12, %6 ], [ %14, %13 ]
  %17 = sub i32 %4, %16
  %18 = icmp ugt i32 %17, 64
  br i1 %18, label %39, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  br i1 %5, label %21, label %23

21:                                               ; preds = %19
  %22 = getelementptr inbounds %union.anon, %union.anon* %20, i64 0, i32 0
  br label %26

23:                                               ; preds = %19
  %24 = bitcast %union.anon* %20 to i64**
  %25 = load i64*, i64** %24, align 8
  br label %26

26:                                               ; preds = %21, %23
  %27 = phi i64* [ %22, %21 ], [ %25, %23 ]
  %28 = load i64, i64* %27, align 8
  %29 = icmp ugt i64 %28, %1
  br i1 %29, label %39, label %30

30:                                               ; preds = %26
  br i1 %5, label %31, label %33

31:                                               ; preds = %30
  %32 = getelementptr inbounds %union.anon, %union.anon* %20, i64 0, i32 0
  br label %36

33:                                               ; preds = %30
  %34 = bitcast %union.anon* %20 to i64**
  %35 = load i64*, i64** %34, align 8
  br label %36

36:                                               ; preds = %31, %33
  %37 = phi i64* [ %32, %31 ], [ %35, %33 ]
  %38 = load i64, i64* %37, align 8
  br label %39

39:                                               ; preds = %15, %26, %36
  %40 = phi i64 [ %38, %36 ], [ %1, %26 ], [ %1, %15 ]
  ret i64 %40
}

; Function Attrs: nobuiltin nofree optsize
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #8

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt4lshrERKS0_(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"*, %"class.llvm::APInt"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = zext i32 %5 to i64
  %7 = tail call i64 @_ZNK4llvm5APInt15getLimitedValueEm(%"class.llvm::APInt"* %2, i64 %6) #19
  %8 = trunc i64 %7 to i32
  tail call void @_ZNK4llvm5APInt4lshrEj(%"class.llvm::APInt"* sret %0, %"class.llvm::APInt"* %1, i32 %8) #19
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt3shlERKS0_(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"*, %"class.llvm::APInt"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = zext i32 %5 to i64
  %7 = tail call i64 @_ZNK4llvm5APInt15getLimitedValueEm(%"class.llvm::APInt"* %2, i64 %6) #19
  %8 = trunc i64 %7 to i32
  tail call void @_ZNK4llvm5APInt3shlEj(%"class.llvm::APInt"* sret %0, %"class.llvm::APInt"* %1, i32 %8) #19
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt11shlSlowCaseEj(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"*, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, %2
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %2, i64 0, i1 zeroext false) #19
  br label %145

8:                                                ; preds = %3
  %9 = icmp eq i32 %2, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %8
  tail call void @_ZN4llvm5APIntC2ERKS0_(%"class.llvm::APInt"* %0, %"class.llvm::APInt"* dereferenceable(16) %1) #19
  br label %145

11:                                               ; preds = %8
  %12 = zext i32 %5 to i64
  %13 = add nuw nsw i64 %12, 63
  %14 = lshr i64 %13, 6
  %15 = trunc i64 %14 to i32
  %16 = shl nuw nsw i64 %14, 3
  %17 = tail call i8* @_Znam(i64 %16) #18
  %18 = bitcast i8* %17 to i64*
  %19 = icmp ult i32 %2, 64
  br i1 %19, label %20, label %47

20:                                               ; preds = %11
  %21 = icmp eq i32 %15, 0
  br i1 %21, label %29, label %22

22:                                               ; preds = %20
  %23 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %24 = bitcast %union.anon* %23 to i64**
  %25 = zext i32 %2 to i64
  %26 = sub nuw nsw i32 64, %2
  %27 = zext i32 %26 to i64
  %28 = load i64*, i64** %24, align 8
  br label %35

29:                                               ; preds = %35, %20
  %30 = bitcast %"class.llvm::APInt"* %0 to i64*
  store i64 -6148914691236517206, i64* %30, align 8
  %31 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  store i32 %5, i32* %31, align 8
  %32 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %33 = bitcast %union.anon* %32 to i8**
  store i8* %17, i8** %33, align 8
  %34 = tail call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APInt15clearUnusedBitsEv(%"class.llvm::APInt"* %0) #19
  br label %145

35:                                               ; preds = %35, %22
  %36 = phi i64 [ 0, %22 ], [ %45, %35 ]
  %37 = phi i64 [ 0, %22 ], [ %44, %35 ]
  %38 = getelementptr inbounds i64, i64* %28, i64 %36
  %39 = load i64, i64* %38, align 8
  %40 = shl i64 %39, %25
  %41 = or i64 %40, %37
  %42 = getelementptr inbounds i64, i64* %18, i64 %36
  store i64 %41, i64* %42, align 8
  %43 = load i64, i64* %38, align 8
  %44 = lshr i64 %43, %27
  %45 = add nuw nsw i64 %36, 1
  %46 = icmp eq i64 %45, %14
  br i1 %46, label %29, label %35

47:                                               ; preds = %11
  %48 = and i32 %2, 63
  %49 = lshr i32 %2, 6
  %50 = icmp eq i32 %48, 0
  br i1 %50, label %67, label %51

51:                                               ; preds = %47
  %52 = add nsw i32 %15, -1
  %53 = icmp ugt i32 %52, %49
  %54 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %55 = bitcast %union.anon* %54 to i64**
  %56 = load i64*, i64** %55, align 8
  %57 = zext i32 %48 to i64
  br i1 %53, label %63, label %58

58:                                               ; preds = %51
  %59 = load i64, i64* %56, align 8
  %60 = shl i64 %59, %57
  %61 = zext i32 %49 to i64
  %62 = getelementptr inbounds i64, i64* %18, i64 %61
  store i64 %60, i64* %62, align 8
  br label %120

63:                                               ; preds = %51
  %64 = sub nuw nsw i32 64, %48
  %65 = zext i32 %64 to i64
  %66 = zext i32 %52 to i64
  br label %96

67:                                               ; preds = %47
  %68 = lshr i32 %2, 6
  %69 = shl nuw nsw i32 %68, 3
  %70 = zext i32 %69 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 0, i64 %70, i1 false)
  %71 = icmp ult i32 %49, %15
  br i1 %71, label %72, label %82

72:                                               ; preds = %67
  %73 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %74 = bitcast %union.anon* %73 to i64**
  %75 = lshr i32 %2, 6
  %76 = zext i32 %75 to i64
  %77 = zext i32 %49 to i64
  %78 = add nuw nsw i32 %75, %15
  %79 = sub nsw i32 %78, %49
  %80 = zext i32 %79 to i64
  %81 = load i64*, i64** %74, align 8
  br label %88

82:                                               ; preds = %88, %67
  %83 = bitcast %"class.llvm::APInt"* %0 to i64*
  store i64 -6148914691236517206, i64* %83, align 8
  %84 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  store i32 %5, i32* %84, align 8
  %85 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %86 = bitcast %union.anon* %85 to i8**
  store i8* %17, i8** %86, align 8
  %87 = tail call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APInt15clearUnusedBitsEv(%"class.llvm::APInt"* %0) #19
  br label %145

88:                                               ; preds = %88, %72
  %89 = phi i64 [ %76, %72 ], [ %94, %88 ]
  %90 = sub nuw nsw i64 %89, %77
  %91 = getelementptr inbounds i64, i64* %81, i64 %90
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds i64, i64* %18, i64 %89
  store i64 %92, i64* %93, align 8
  %94 = add nuw nsw i64 %89, 1
  %95 = icmp eq i64 %94, %80
  br i1 %95, label %82, label %88

96:                                               ; preds = %63, %96
  %97 = phi i64 [ %66, %63 ], [ %113, %96 ]
  %98 = trunc i64 %97 to i32
  %99 = sub i32 %98, %49
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds i64, i64* %56, i64 %100
  %102 = load i64, i64* %101, align 8
  %103 = shl i64 %102, %57
  %104 = add i32 %99, -1
  %105 = zext i32 %104 to i64
  %106 = getelementptr inbounds i64, i64* %56, i64 %105
  %107 = load i64, i64* %106, align 8
  %108 = lshr i64 %107, %65
  %109 = or i64 %108, %103
  %110 = getelementptr inbounds i64, i64* %18, i64 %97
  store i64 %109, i64* %110, align 8
  %111 = add i32 %98, -1
  %112 = icmp ugt i32 %111, %49
  %113 = add nsw i64 %97, -1
  br i1 %112, label %96, label %114

114:                                              ; preds = %96
  %115 = load i64, i64* %56, align 8
  %116 = shl i64 %115, %57
  %117 = zext i32 %49 to i64
  %118 = getelementptr inbounds i64, i64* %18, i64 %117
  store i64 %116, i64* %118, align 8
  %119 = icmp eq i32 %49, 0
  br i1 %119, label %124, label %120

120:                                              ; preds = %58, %114
  %121 = lshr i32 %2, 6
  %122 = shl nuw nsw i32 %121, 3
  %123 = zext i32 %122 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 0, i64 %123, i1 false)
  br label %124

124:                                              ; preds = %120, %114
  %125 = ptrtoint i8* %17 to i64
  %126 = and i32 %5, 63
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %141, label %128

128:                                              ; preds = %124
  %129 = sub nuw nsw i32 64, %126
  %130 = zext i32 %129 to i64
  %131 = lshr i64 -1, %130
  %132 = icmp ult i32 %5, 65
  br i1 %132, label %133, label %135

133:                                              ; preds = %128
  %134 = and i64 %131, %125
  br label %141

135:                                              ; preds = %128
  %136 = add nuw nsw i64 %14, 4294967295
  %137 = and i64 %136, 4294967295
  %138 = getelementptr inbounds i64, i64* %18, i64 %137
  %139 = load i64, i64* %138, align 8
  %140 = and i64 %139, %131
  store i64 %140, i64* %138, align 8
  br label %141

141:                                              ; preds = %135, %133, %124
  %142 = phi i64 [ %125, %124 ], [ %134, %133 ], [ %125, %135 ]
  %143 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  store i32 %5, i32* %143, align 8
  %144 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  store i64 %142, i64* %144, align 8
  br label %145

145:                                              ; preds = %29, %82, %141, %10, %7
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt4rotlERKS0_(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"*, %"class.llvm::APInt"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = zext i32 %5 to i64
  %7 = tail call i64 @_ZNK4llvm5APInt15getLimitedValueEm(%"class.llvm::APInt"* %2, i64 %6) #19
  %8 = trunc i64 %7 to i32
  tail call void @_ZNK4llvm5APInt4rotlEj(%"class.llvm::APInt"* sret %0, %"class.llvm::APInt"* %1, i32 %8) #19
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNK4llvm5APIntorERKS0_(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"*, %"class.llvm::APInt"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp ult i32 %5, 65
  br i1 %6, label %7, label %13

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = or i64 %11, %9
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %5, i64 %12, i1 zeroext false) #19
  br label %14

13:                                               ; preds = %3
  tail call void @_ZNK4llvm5APInt10OrSlowCaseERKS0_(%"class.llvm::APInt"* sret %0, %"class.llvm::APInt"* %1, %"class.llvm::APInt"* dereferenceable(16) %2) #19
  br label %14

14:                                               ; preds = %13, %7
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt4rotrERKS0_(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"*, %"class.llvm::APInt"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = zext i32 %5 to i64
  %7 = tail call i64 @_ZNK4llvm5APInt15getLimitedValueEm(%"class.llvm::APInt"* %2, i64 %6) #19
  %8 = trunc i64 %7 to i32
  tail call void @_ZNK4llvm5APInt4rotrEj(%"class.llvm::APInt"* sret %0, %"class.llvm::APInt"* %1, i32 %8) #19
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt4rotrEj(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"*, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.llvm::APInt", align 8
  %5 = alloca %"class.llvm::APInt", align 8
  %6 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = urem i32 %2, %7
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %3
  tail call void @_ZN4llvm5APIntC2ERKS0_(%"class.llvm::APInt"* %0, %"class.llvm::APInt"* dereferenceable(16) %1) #19
  br label %38

11:                                               ; preds = %3
  %12 = bitcast %"class.llvm::APInt"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %12) #17
  call void @_ZNK4llvm5APInt4lshrEj(%"class.llvm::APInt"* nonnull sret %4, %"class.llvm::APInt"* %1, i32 %8) #19
  %13 = bitcast %"class.llvm::APInt"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #17
  %14 = load i32, i32* %6, align 8
  %15 = sub i32 %14, %8
  call void @_ZNK4llvm5APInt3shlEj(%"class.llvm::APInt"* nonnull sret %5, %"class.llvm::APInt"* %1, i32 %15) #19
  call void @_ZNK4llvm5APIntorERKS0_(%"class.llvm::APInt"* sret %0, %"class.llvm::APInt"* nonnull %4, %"class.llvm::APInt"* nonnull dereferenceable(16) %5) #19
  %16 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 0
  %17 = load i32, i32* %16, align 8
  %18 = icmp ugt i32 %17, 64
  br i1 %18, label %19, label %26

19:                                               ; preds = %11
  %20 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1
  %21 = bitcast %union.anon* %20 to i64**
  %22 = load i64*, i64** %21, align 8
  %23 = icmp eq i64* %22, null
  br i1 %23, label %26, label %24

24:                                               ; preds = %19
  %25 = bitcast i64* %22 to i8*
  call void @_ZdaPv(i8* %25) #18
  br label %26

26:                                               ; preds = %11, %19, %24
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #17
  %27 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %4, i64 0, i32 0
  %28 = load i32, i32* %27, align 8
  %29 = icmp ugt i32 %28, 64
  br i1 %29, label %30, label %37

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %4, i64 0, i32 1
  %32 = bitcast %union.anon* %31 to i64**
  %33 = load i64*, i64** %32, align 8
  %34 = icmp eq i64* %33, null
  br i1 %34, label %37, label %35

35:                                               ; preds = %30
  %36 = bitcast i64* %33 to i8*
  call void @_ZdaPv(i8* %36) #18
  br label %37

37:                                               ; preds = %26, %30, %35
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %12) #17
  br label %38

38:                                               ; preds = %37, %10
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt4sqrtEv(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.llvm::APInt", align 8
  %4 = alloca %"class.llvm::APInt", align 8
  %5 = alloca %"class.llvm::APInt", align 8
  %6 = alloca %"class.llvm::APInt", align 8
  %7 = alloca %"class.llvm::APInt", align 8
  %8 = alloca %"class.llvm::APInt", align 8
  %9 = alloca %"class.llvm::APInt", align 8
  %10 = alloca %"class.llvm::APInt", align 8
  %11 = alloca %"class.llvm::APInt", align 8
  %12 = alloca %"class.llvm::APInt", align 8
  %13 = alloca %"class.llvm::APInt", align 8
  %14 = alloca %"class.llvm::APInt", align 8
  %15 = alloca %"class.llvm::APInt", align 8
  %16 = alloca %"class.llvm::APInt", align 8
  %17 = alloca %"class.llvm::APInt", align 8
  %18 = alloca %"class.llvm::APInt", align 8
  %19 = alloca %"class.llvm::APInt", align 8
  %20 = alloca %"class.llvm::APInt", align 8
  %21 = alloca %"class.llvm::APInt", align 8
  %22 = alloca %"class.llvm::APInt", align 8
  %23 = alloca %"class.llvm::APInt", align 8
  %24 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %25 = load i32, i32* %24, align 8
  %26 = icmp ult i32 %25, 65
  br i1 %26, label %27, label %34

27:                                               ; preds = %2
  %28 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %29 = load i64, i64* %28, align 8
  %30 = tail call i64 @llvm.ctlz.i64(i64 %29, i1 false) #17, !range !2
  %31 = trunc i64 %30 to i32
  %32 = add nsw i32 %25, -64
  %33 = add i32 %32, %31
  br label %36

34:                                               ; preds = %2
  %35 = tail call i32 @_ZNK4llvm5APInt25countLeadingZerosSlowCaseEv(%"class.llvm::APInt"* %1) #20
  br label %36

36:                                               ; preds = %27, %34
  %37 = phi i32 [ %33, %27 ], [ %35, %34 ]
  %38 = sub i32 %25, %37
  %39 = icmp ult i32 %38, 6
  br i1 %39, label %40, label %53

40:                                               ; preds = %36
  %41 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  br i1 %26, label %42, label %44

42:                                               ; preds = %40
  %43 = getelementptr inbounds %union.anon, %union.anon* %41, i64 0, i32 0
  br label %47

44:                                               ; preds = %40
  %45 = bitcast %union.anon* %41 to i64**
  %46 = load i64*, i64** %45, align 8
  br label %47

47:                                               ; preds = %44, %42
  %48 = phi i64* [ %43, %42 ], [ %46, %44 ]
  %49 = load i64, i64* %48, align 8
  %50 = getelementptr inbounds [32 x i8], [32 x i8]* @_ZZNK4llvm5APInt4sqrtEvE7results, i64 0, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i64
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %25, i64 %52, i1 zeroext false) #19
  br label %493

53:                                               ; preds = %36
  %54 = icmp ult i32 %38, 52
  br i1 %54, label %55, label %69

55:                                               ; preds = %53
  %56 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  br i1 %26, label %57, label %59

57:                                               ; preds = %55
  %58 = getelementptr inbounds %union.anon, %union.anon* %56, i64 0, i32 0
  br label %62

59:                                               ; preds = %55
  %60 = bitcast %union.anon* %56 to i64**
  %61 = load i64*, i64** %60, align 8
  br label %62

62:                                               ; preds = %59, %57
  %63 = phi i64* [ %58, %57 ], [ %61, %59 ]
  %64 = load i64, i64* %63, align 8
  %65 = uitofp i64 %64 to double
  %66 = tail call double @sqrt(double %65) #20
  %67 = tail call double @llvm.round.f64(double %66)
  %68 = fptoui double %67 to i64
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %25, i64 %68, i1 zeroext false) #19
  br label %493

69:                                               ; preds = %53
  %70 = bitcast %"class.llvm::APInt"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %70) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %70, i8 -86, i64 16, i1 false)
  call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* nonnull %3, i32 %25, i64 16, i1 zeroext false) #19
  %71 = bitcast %"class.llvm::APInt"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %71) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %71, i8 -86, i64 16, i1 false)
  %72 = load i32, i32* %24, align 8
  call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* nonnull %4, i32 %72, i64 1, i1 zeroext false) #19
  %73 = bitcast %"class.llvm::APInt"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %73) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %73, i8 -86, i64 16, i1 false)
  %74 = load i32, i32* %24, align 8
  call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* nonnull %5, i32 %74, i64 0, i1 zeroext false) #19
  %75 = bitcast %"class.llvm::APInt"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %75) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %75, i8 -86, i64 16, i1 false)
  %76 = load i32, i32* %24, align 8
  call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* nonnull %6, i32 %76, i64 2, i1 zeroext false) #19
  %77 = icmp ugt i32 %25, 4
  br i1 %77, label %78, label %118

78:                                               ; preds = %69
  %79 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %80 = bitcast %union.anon* %79 to i64**
  %81 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 1
  %82 = bitcast %union.anon* %81 to i64**
  %83 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %84 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 1, i32 0
  %85 = bitcast %"class.llvm::APInt"* %8 to i8*
  %86 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 0
  %87 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %8, i64 0, i32 1, i32 0
  %88 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %8, i64 0, i32 0
  br label %89

89:                                               ; preds = %78, %165
  %90 = phi i32 [ 4, %78 ], [ %157, %165 ]
  %91 = call zeroext i1 @_ZNK4llvm5APInt3ultERKS0_(%"class.llvm::APInt"* %1, %"class.llvm::APInt"* nonnull dereferenceable(16) %3) #20
  br i1 %91, label %118, label %92

92:                                               ; preds = %89
  %93 = load i32, i32* %24, align 8
  %94 = icmp ult i32 %93, 65
  br i1 %94, label %114, label %95

95:                                               ; preds = %92
  %96 = load i64*, i64** %80, align 8
  %97 = zext i32 %93 to i64
  %98 = add nuw nsw i64 %97, 63
  %99 = lshr i64 %98, 6
  %100 = getelementptr inbounds i64, i64* %96, i64 %99
  %101 = icmp eq i64 %99, 0
  br i1 %101, label %118, label %102

102:                                              ; preds = %95
  %103 = load i64*, i64** %82, align 8
  br label %104

104:                                              ; preds = %110, %102
  %105 = phi i64* [ %112, %110 ], [ %103, %102 ]
  %106 = phi i64* [ %111, %110 ], [ %96, %102 ]
  %107 = load i64, i64* %106, align 8
  %108 = load i64, i64* %105, align 8
  %109 = icmp eq i64 %107, %108
  br i1 %109, label %110, label %156

110:                                              ; preds = %104
  %111 = getelementptr inbounds i64, i64* %106, i64 1
  %112 = getelementptr inbounds i64, i64* %105, i64 1
  %113 = icmp eq i64* %111, %100
  br i1 %113, label %118, label %104

114:                                              ; preds = %92
  %115 = load i64, i64* %83, align 8
  %116 = load i64, i64* %84, align 8
  %117 = icmp eq i64 %115, %116
  br i1 %117, label %118, label %156

118:                                              ; preds = %114, %165, %89, %95, %110, %69
  %119 = phi i32 [ 4, %69 ], [ %90, %110 ], [ %90, %114 ], [ %157, %165 ], [ %90, %89 ], [ %90, %95 ]
  %120 = bitcast %"class.llvm::APInt"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %120) #17
  %121 = lshr exact i32 %119, 1
  call void @_ZNK4llvm5APInt3shlEj(%"class.llvm::APInt"* nonnull sret %7, %"class.llvm::APInt"* nonnull %4, i32 %121) #19
  %122 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %4, i64 0, i32 0
  %123 = load i32, i32* %122, align 8
  %124 = icmp ult i32 %123, 65
  br i1 %124, label %132, label %125

125:                                              ; preds = %118
  %126 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %4, i64 0, i32 1
  %127 = bitcast %union.anon* %126 to i64**
  %128 = load i64*, i64** %127, align 8
  %129 = icmp eq i64* %128, null
  br i1 %129, label %132, label %130

130:                                              ; preds = %125
  %131 = bitcast i64* %128 to i8*
  call void @_ZdaPv(i8* %131) #18
  br label %132

132:                                              ; preds = %118, %130, %125
  %133 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %4, i64 0, i32 1, i32 0
  %134 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %7, i64 0, i32 1, i32 0
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %133, align 8
  %136 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %7, i64 0, i32 0
  %137 = load i32, i32* %136, align 8
  store i32 %137, i32* %122, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %120) #17
  %138 = bitcast %"class.llvm::APInt"* %9 to i8*
  %139 = bitcast %"class.llvm::APInt"* %10 to i8*
  %140 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %10, i64 0, i32 0
  %141 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %11, i64 0, i32 0
  %142 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %10, i64 0, i32 1, i32 0
  %143 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %11, i64 0, i32 1, i32 0
  %144 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 0
  %145 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1
  %146 = bitcast %union.anon* %145 to i64**
  %147 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1, i32 0
  %148 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %9, i64 0, i32 1, i32 0
  %149 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %9, i64 0, i32 0
  %150 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %10, i64 0, i32 1
  %151 = bitcast %union.anon* %150 to i64**
  %152 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %11, i64 0, i32 1
  %153 = bitcast %union.anon* %152 to i64**
  %154 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %4, i64 0, i32 1
  %155 = bitcast %union.anon* %154 to i64**
  br label %169

156:                                              ; preds = %104, %114
  %157 = add i32 %90, 2
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %85) #17
  call void @_ZNK4llvm5APInt3shlEj(%"class.llvm::APInt"* nonnull sret %8, %"class.llvm::APInt"* nonnull %3, i32 2) #19
  %158 = load i32, i32* %86, align 8
  %159 = icmp ult i32 %158, 65
  br i1 %159, label %165, label %160

160:                                              ; preds = %156
  %161 = load i64*, i64** %82, align 8
  %162 = icmp eq i64* %161, null
  br i1 %162, label %165, label %163

163:                                              ; preds = %160
  %164 = bitcast i64* %161 to i8*
  call void @_ZdaPv(i8* %164) #18
  br label %165

165:                                              ; preds = %163, %160, %156
  %166 = load i64, i64* %87, align 8
  store i64 %166, i64* %84, align 8
  %167 = load i32, i32* %88, align 8
  store i32 %167, i32* %86, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %85) #17
  %168 = icmp ult i32 %157, %25
  br i1 %168, label %89, label %118

169:                                              ; preds = %226, %132
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %138) #17
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %139) #17
  call void @_ZNK4llvm5APInt4udivERKS0_(%"class.llvm::APInt"* nonnull sret %11, %"class.llvm::APInt"* %1, %"class.llvm::APInt"* nonnull dereferenceable(16) %4) #19
  %170 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLERKS0_(%"class.llvm::APInt"* nonnull %11, %"class.llvm::APInt"* nonnull dereferenceable(16) %4) #20, !noalias !13
  %171 = load i32, i32* %141, align 8, !noalias !13
  store i32 %171, i32* %140, align 8, !alias.scope !13
  %172 = load i64, i64* %143, align 8, !noalias !13
  store i64 %172, i64* %142, align 8, !alias.scope !13
  store i32 0, i32* %141, align 8, !noalias !13
  call void @_ZNK4llvm5APInt4udivERKS0_(%"class.llvm::APInt"* nonnull sret %9, %"class.llvm::APInt"* nonnull %10, %"class.llvm::APInt"* nonnull dereferenceable(16) %6) #19
  %173 = load i32, i32* %144, align 8
  %174 = icmp ult i32 %173, 65
  br i1 %174, label %180, label %175

175:                                              ; preds = %169
  %176 = load i64*, i64** %146, align 8
  %177 = icmp eq i64* %176, null
  br i1 %177, label %180, label %178

178:                                              ; preds = %175
  %179 = bitcast i64* %176 to i8*
  call void @_ZdaPv(i8* %179) #18
  br label %180

180:                                              ; preds = %178, %175, %169
  %181 = load i64, i64* %148, align 8
  store i64 %181, i64* %147, align 8
  %182 = load i32, i32* %149, align 8
  store i32 0, i32* %149, align 8
  store i32 %182, i32* %144, align 8
  %183 = load i32, i32* %140, align 8
  %184 = icmp ugt i32 %183, 64
  br i1 %184, label %185, label %190

185:                                              ; preds = %180
  %186 = load i64*, i64** %151, align 8
  %187 = icmp eq i64* %186, null
  br i1 %187, label %190, label %188

188:                                              ; preds = %185
  %189 = bitcast i64* %186 to i8*
  call void @_ZdaPv(i8* %189) #18
  br label %190

190:                                              ; preds = %180, %185, %188
  %191 = load i32, i32* %141, align 8
  %192 = icmp ugt i32 %191, 64
  br i1 %192, label %193, label %198

193:                                              ; preds = %190
  %194 = load i64*, i64** %153, align 8
  %195 = icmp eq i64* %194, null
  br i1 %195, label %198, label %196

196:                                              ; preds = %193
  %197 = bitcast i64* %194 to i8*
  call void @_ZdaPv(i8* %197) #18
  br label %198

198:                                              ; preds = %190, %193, %196
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %139) #17
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %138) #17
  %199 = call zeroext i1 @_ZNK4llvm5APInt3ultERKS0_(%"class.llvm::APInt"* nonnull %4, %"class.llvm::APInt"* nonnull dereferenceable(16) %5) #20
  br i1 %199, label %228, label %200

200:                                              ; preds = %198
  %201 = load i32, i32* %122, align 8
  %202 = icmp ult i32 %201, 65
  br i1 %202, label %222, label %203

203:                                              ; preds = %200
  %204 = load i64*, i64** %155, align 8
  %205 = zext i32 %201 to i64
  %206 = add nuw nsw i64 %205, 63
  %207 = lshr i64 %206, 6
  %208 = getelementptr inbounds i64, i64* %204, i64 %207
  %209 = icmp eq i64 %207, 0
  br i1 %209, label %228, label %210

210:                                              ; preds = %203
  %211 = load i64*, i64** %146, align 8
  br label %212

212:                                              ; preds = %218, %210
  %213 = phi i64* [ %220, %218 ], [ %211, %210 ]
  %214 = phi i64* [ %219, %218 ], [ %204, %210 ]
  %215 = load i64, i64* %214, align 8
  %216 = load i64, i64* %213, align 8
  %217 = icmp eq i64 %215, %216
  br i1 %217, label %218, label %226

218:                                              ; preds = %212
  %219 = getelementptr inbounds i64, i64* %214, i64 1
  %220 = getelementptr inbounds i64, i64* %213, i64 1
  %221 = icmp eq i64* %219, %208
  br i1 %221, label %228, label %212

222:                                              ; preds = %200
  %223 = load i64, i64* %133, align 8
  %224 = load i64, i64* %147, align 8
  %225 = icmp eq i64 %223, %224
  br i1 %225, label %228, label %226

226:                                              ; preds = %212, %222
  %227 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntaSERKS0_(%"class.llvm::APInt"* nonnull %4, %"class.llvm::APInt"* nonnull dereferenceable(16) %5) #19
  br label %169

228:                                              ; preds = %203, %198, %222, %218
  %229 = bitcast %"class.llvm::APInt"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %229) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %229, i8 -86, i64 16, i1 false)
  call void @_ZNK4llvm5APIntmlERKS0_(%"class.llvm::APInt"* nonnull sret %12, %"class.llvm::APInt"* nonnull %4, %"class.llvm::APInt"* nonnull dereferenceable(16) %4) #19
  %230 = bitcast %"class.llvm::APInt"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %230) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %230, i8 -86, i64 16, i1 false)
  %231 = bitcast %"class.llvm::APInt"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %231) #17
  %232 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %15, i64 0, i32 0
  %233 = load i32, i32* %122, align 8
  store i32 %233, i32* %232, align 8
  %234 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %15, i64 0, i32 1, i32 0
  store i64 0, i64* %234, align 8
  %235 = icmp ult i32 %233, 65
  br i1 %235, label %236, label %238

236:                                              ; preds = %228
  %237 = load i64, i64* %133, align 8
  store i64 %237, i64* %234, align 8
  br label %248

238:                                              ; preds = %228
  %239 = zext i32 %233 to i64
  %240 = add nuw nsw i64 %239, 63
  %241 = lshr i64 %240, 6
  %242 = shl nuw nsw i64 %241, 3
  %243 = call i8* @_Znam(i64 %242) #18
  %244 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %15, i64 0, i32 1
  %245 = bitcast %union.anon* %244 to i8**
  store i8* %243, i8** %245, align 8
  %246 = bitcast %union.anon* %154 to i8**
  %247 = load i8*, i8** %246, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %243, i8* align 8 %247, i64 %242, i1 false) #17
  br label %248

248:                                              ; preds = %236, %238
  %249 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLEm(%"class.llvm::APInt"* nonnull %15, i64 1) #20, !noalias !16
  %250 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %14, i64 0, i32 0
  %251 = load i32, i32* %232, align 8, !noalias !16
  store i32 %251, i32* %250, align 8, !alias.scope !16
  %252 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %14, i64 0, i32 1, i32 0
  %253 = load i64, i64* %234, align 8, !noalias !16
  store i64 %253, i64* %252, align 8, !alias.scope !16
  store i32 0, i32* %232, align 8, !noalias !16
  %254 = bitcast %"class.llvm::APInt"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %254) #17
  %255 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %17, i64 0, i32 0
  %256 = load i32, i32* %122, align 8
  store i32 %256, i32* %255, align 8
  %257 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %17, i64 0, i32 1, i32 0
  store i64 0, i64* %257, align 8
  %258 = icmp ult i32 %256, 65
  br i1 %258, label %259, label %261

259:                                              ; preds = %248
  %260 = load i64, i64* %133, align 8
  store i64 %260, i64* %257, align 8
  br label %271

261:                                              ; preds = %248
  %262 = zext i32 %256 to i64
  %263 = add nuw nsw i64 %262, 63
  %264 = lshr i64 %263, 6
  %265 = shl nuw nsw i64 %264, 3
  %266 = call i8* @_Znam(i64 %265) #18
  %267 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %17, i64 0, i32 1
  %268 = bitcast %union.anon* %267 to i8**
  store i8* %266, i8** %268, align 8
  %269 = bitcast %union.anon* %154 to i8**
  %270 = load i8*, i8** %269, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %266, i8* align 8 %270, i64 %265, i1 false) #17
  br label %271

271:                                              ; preds = %259, %261
  %272 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLEm(%"class.llvm::APInt"* nonnull %17, i64 1) #20, !noalias !19
  %273 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %16, i64 0, i32 0
  %274 = load i32, i32* %255, align 8, !noalias !19
  store i32 %274, i32* %273, align 8, !alias.scope !19
  %275 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %16, i64 0, i32 1, i32 0
  %276 = load i64, i64* %257, align 8, !noalias !19
  store i64 %276, i64* %275, align 8, !alias.scope !19
  store i32 0, i32* %255, align 8, !noalias !19
  call void @_ZNK4llvm5APIntmlERKS0_(%"class.llvm::APInt"* nonnull sret %13, %"class.llvm::APInt"* nonnull %14, %"class.llvm::APInt"* nonnull dereferenceable(16) %16) #19
  %277 = icmp ult i32 %274, 65
  %278 = icmp eq i64 %276, 0
  %279 = or i1 %277, %278
  br i1 %279, label %282, label %280

280:                                              ; preds = %271
  %281 = inttoptr i64 %276 to i8*
  call void @_ZdaPv(i8* %281) #18
  br label %282

282:                                              ; preds = %271, %280
  %283 = load i32, i32* %255, align 8
  %284 = icmp ugt i32 %283, 64
  br i1 %284, label %285, label %292

285:                                              ; preds = %282
  %286 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %17, i64 0, i32 1
  %287 = bitcast %union.anon* %286 to i64**
  %288 = load i64*, i64** %287, align 8
  %289 = icmp eq i64* %288, null
  br i1 %289, label %292, label %290

290:                                              ; preds = %285
  %291 = bitcast i64* %288 to i8*
  call void @_ZdaPv(i8* %291) #18
  br label %292

292:                                              ; preds = %282, %285, %290
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %254) #17
  %293 = icmp ult i32 %251, 65
  %294 = icmp eq i64 %253, 0
  %295 = or i1 %293, %294
  br i1 %295, label %298, label %296

296:                                              ; preds = %292
  %297 = inttoptr i64 %253 to i8*
  call void @_ZdaPv(i8* %297) #18
  br label %298

298:                                              ; preds = %292, %296
  %299 = load i32, i32* %232, align 8
  %300 = icmp ugt i32 %299, 64
  br i1 %300, label %301, label %308

301:                                              ; preds = %298
  %302 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %15, i64 0, i32 1
  %303 = bitcast %union.anon* %302 to i64**
  %304 = load i64*, i64** %303, align 8
  %305 = icmp eq i64* %304, null
  br i1 %305, label %308, label %306

306:                                              ; preds = %301
  %307 = bitcast i64* %304 to i8*
  call void @_ZdaPv(i8* %307) #18
  br label %308

308:                                              ; preds = %298, %301, %306
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %231) #17
  %309 = call zeroext i1 @_ZNK4llvm5APInt3ultERKS0_(%"class.llvm::APInt"* %1, %"class.llvm::APInt"* nonnull dereferenceable(16) %12) #19
  br i1 %309, label %310, label %315

310:                                              ; preds = %308
  %311 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %312 = load i32, i32* %122, align 8
  store i32 %312, i32* %311, align 8
  %313 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %314 = load i64, i64* %133, align 8
  store i64 %314, i64* %313, align 8
  store i32 0, i32* %122, align 8
  br label %432

315:                                              ; preds = %308
  %316 = bitcast %"class.llvm::APInt"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %316) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %316, i8 -86, i64 16, i1 false)
  %317 = bitcast %"class.llvm::APInt"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %317) #17
  %318 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %20, i64 0, i32 0
  %319 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %13, i64 0, i32 0
  %320 = load i32, i32* %319, align 8
  store i32 %320, i32* %318, align 8
  %321 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %20, i64 0, i32 1, i32 0
  store i64 0, i64* %321, align 8
  %322 = icmp ult i32 %320, 65
  br i1 %322, label %323, label %326

323:                                              ; preds = %315
  %324 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %13, i64 0, i32 1, i32 0
  %325 = load i64, i64* %324, align 8
  store i64 %325, i64* %321, align 8
  br label %337

326:                                              ; preds = %315
  %327 = zext i32 %320 to i64
  %328 = add nuw nsw i64 %327, 63
  %329 = lshr i64 %328, 6
  %330 = shl nuw nsw i64 %329, 3
  %331 = call i8* @_Znam(i64 %330) #18
  %332 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %20, i64 0, i32 1
  %333 = bitcast %union.anon* %332 to i8**
  store i8* %331, i8** %333, align 8
  %334 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %13, i64 0, i32 1
  %335 = bitcast %union.anon* %334 to i8**
  %336 = load i8*, i8** %335, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %331, i8* align 8 %336, i64 %330, i1 false) #17
  br label %337

337:                                              ; preds = %323, %326
  %338 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntmIERKS0_(%"class.llvm::APInt"* nonnull %20, %"class.llvm::APInt"* nonnull dereferenceable(16) %12) #20, !noalias !22
  %339 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %19, i64 0, i32 0
  %340 = load i32, i32* %318, align 8, !noalias !22
  store i32 %340, i32* %339, align 8, !alias.scope !22
  %341 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %19, i64 0, i32 1, i32 0
  %342 = load i64, i64* %321, align 8, !noalias !22
  store i64 %342, i64* %341, align 8, !alias.scope !22
  store i32 0, i32* %318, align 8, !noalias !22
  call void @_ZNK4llvm5APInt4udivERKS0_(%"class.llvm::APInt"* nonnull sret %18, %"class.llvm::APInt"* nonnull %19, %"class.llvm::APInt"* nonnull dereferenceable(16) %6) #19
  %343 = load i32, i32* %339, align 8
  %344 = icmp ugt i32 %343, 64
  br i1 %344, label %345, label %352

345:                                              ; preds = %337
  %346 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %19, i64 0, i32 1
  %347 = bitcast %union.anon* %346 to i64**
  %348 = load i64*, i64** %347, align 8
  %349 = icmp eq i64* %348, null
  br i1 %349, label %352, label %350

350:                                              ; preds = %345
  %351 = bitcast i64* %348 to i8*
  call void @_ZdaPv(i8* %351) #18
  br label %352

352:                                              ; preds = %337, %345, %350
  %353 = load i32, i32* %318, align 8
  %354 = icmp ugt i32 %353, 64
  br i1 %354, label %355, label %362

355:                                              ; preds = %352
  %356 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %20, i64 0, i32 1
  %357 = bitcast %union.anon* %356 to i64**
  %358 = load i64*, i64** %357, align 8
  %359 = icmp eq i64* %358, null
  br i1 %359, label %362, label %360

360:                                              ; preds = %355
  %361 = bitcast i64* %358 to i8*
  call void @_ZdaPv(i8* %361) #18
  br label %362

362:                                              ; preds = %352, %355, %360
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %317) #17
  %363 = bitcast %"class.llvm::APInt"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %363) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %363, i8 -86, i64 16, i1 false)
  %364 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %22, i64 0, i32 0
  %365 = load i32, i32* %24, align 8
  store i32 %365, i32* %364, align 8
  %366 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %22, i64 0, i32 1, i32 0
  store i64 0, i64* %366, align 8
  %367 = icmp ult i32 %365, 65
  br i1 %367, label %368, label %371

368:                                              ; preds = %362
  %369 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %370 = load i64, i64* %369, align 8
  store i64 %370, i64* %366, align 8
  br label %382

371:                                              ; preds = %362
  %372 = zext i32 %365 to i64
  %373 = add nuw nsw i64 %372, 63
  %374 = lshr i64 %373, 6
  %375 = shl nuw nsw i64 %374, 3
  %376 = call i8* @_Znam(i64 %375) #18
  %377 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %22, i64 0, i32 1
  %378 = bitcast %union.anon* %377 to i8**
  store i8* %376, i8** %378, align 8
  %379 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %380 = bitcast %union.anon* %379 to i8**
  %381 = load i8*, i8** %380, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %376, i8* align 8 %381, i64 %375, i1 false) #17
  br label %382

382:                                              ; preds = %371, %368
  %383 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntmIERKS0_(%"class.llvm::APInt"* nonnull %22, %"class.llvm::APInt"* nonnull dereferenceable(16) %12) #20, !noalias !25
  %384 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %21, i64 0, i32 0
  %385 = load i32, i32* %364, align 8, !noalias !25
  store i32 %385, i32* %384, align 8, !alias.scope !25
  %386 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %21, i64 0, i32 1, i32 0
  %387 = load i64, i64* %366, align 8, !noalias !25
  store i64 %387, i64* %386, align 8, !alias.scope !25
  store i32 0, i32* %364, align 8, !noalias !25
  %388 = call zeroext i1 @_ZNK4llvm5APInt3ultERKS0_(%"class.llvm::APInt"* nonnull %21, %"class.llvm::APInt"* nonnull dereferenceable(16) %18) #19
  br i1 %388, label %408, label %389

389:                                              ; preds = %382
  %390 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %23, i64 0, i32 0
  %391 = load i32, i32* %122, align 8
  store i32 %391, i32* %390, align 8
  %392 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %23, i64 0, i32 1, i32 0
  store i64 0, i64* %392, align 8
  %393 = icmp ult i32 %391, 65
  br i1 %393, label %394, label %396

394:                                              ; preds = %389
  %395 = load i64, i64* %133, align 8
  store i64 %395, i64* %392, align 8
  br label %406

396:                                              ; preds = %389
  %397 = zext i32 %391 to i64
  %398 = add nuw nsw i64 %397, 63
  %399 = lshr i64 %398, 6
  %400 = shl nuw nsw i64 %399, 3
  %401 = call i8* @_Znam(i64 %400) #18
  %402 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %23, i64 0, i32 1
  %403 = bitcast %union.anon* %402 to i8**
  store i8* %401, i8** %403, align 8
  %404 = bitcast %union.anon* %154 to i8**
  %405 = load i8*, i8** %404, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %401, i8* align 8 %405, i64 %400, i1 false) #17
  br label %406

406:                                              ; preds = %396, %394
  %407 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLEm(%"class.llvm::APInt"* nonnull %23, i64 1) #20, !noalias !28
  br label %408

408:                                              ; preds = %382, %406
  %409 = phi i32* [ %390, %406 ], [ %122, %382 ]
  %410 = phi i64* [ %392, %406 ], [ %133, %382 ]
  %411 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %412 = load i32, i32* %409, align 8
  store i32 %412, i32* %411, align 8
  %413 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %414 = load i64, i64* %410, align 8
  store i64 %414, i64* %413, align 8
  store i32 0, i32* %409, align 8
  %415 = icmp ult i32 %385, 65
  %416 = icmp eq i64 %387, 0
  %417 = or i1 %415, %416
  br i1 %417, label %420, label %418

418:                                              ; preds = %408
  %419 = inttoptr i64 %387 to i8*
  call void @_ZdaPv(i8* %419) #18
  br label %420

420:                                              ; preds = %408, %418
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %363) #17
  %421 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %18, i64 0, i32 0
  %422 = load i32, i32* %421, align 8
  %423 = icmp ugt i32 %422, 64
  br i1 %423, label %424, label %431

424:                                              ; preds = %420
  %425 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %18, i64 0, i32 1
  %426 = bitcast %union.anon* %425 to i64**
  %427 = load i64*, i64** %426, align 8
  %428 = icmp eq i64* %427, null
  br i1 %428, label %431, label %429

429:                                              ; preds = %424
  %430 = bitcast i64* %427 to i8*
  call void @_ZdaPv(i8* %430) #18
  br label %431

431:                                              ; preds = %420, %424, %429
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %316) #17
  br label %432

432:                                              ; preds = %431, %310
  %433 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %13, i64 0, i32 0
  %434 = load i32, i32* %433, align 8
  %435 = icmp ugt i32 %434, 64
  br i1 %435, label %436, label %443

436:                                              ; preds = %432
  %437 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %13, i64 0, i32 1
  %438 = bitcast %union.anon* %437 to i64**
  %439 = load i64*, i64** %438, align 8
  %440 = icmp eq i64* %439, null
  br i1 %440, label %443, label %441

441:                                              ; preds = %436
  %442 = bitcast i64* %439 to i8*
  call void @_ZdaPv(i8* %442) #18
  br label %443

443:                                              ; preds = %432, %436, %441
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %230) #17
  %444 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %12, i64 0, i32 0
  %445 = load i32, i32* %444, align 8
  %446 = icmp ugt i32 %445, 64
  br i1 %446, label %447, label %454

447:                                              ; preds = %443
  %448 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %12, i64 0, i32 1
  %449 = bitcast %union.anon* %448 to i64**
  %450 = load i64*, i64** %449, align 8
  %451 = icmp eq i64* %450, null
  br i1 %451, label %454, label %452

452:                                              ; preds = %447
  %453 = bitcast i64* %450 to i8*
  call void @_ZdaPv(i8* %453) #18
  br label %454

454:                                              ; preds = %443, %447, %452
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %229) #17
  %455 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 0
  %456 = load i32, i32* %455, align 8
  %457 = icmp ugt i32 %456, 64
  br i1 %457, label %458, label %465

458:                                              ; preds = %454
  %459 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 1
  %460 = bitcast %union.anon* %459 to i64**
  %461 = load i64*, i64** %460, align 8
  %462 = icmp eq i64* %461, null
  br i1 %462, label %465, label %463

463:                                              ; preds = %458
  %464 = bitcast i64* %461 to i8*
  call void @_ZdaPv(i8* %464) #18
  br label %465

465:                                              ; preds = %454, %458, %463
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %75) #17
  %466 = load i32, i32* %144, align 8
  %467 = icmp ugt i32 %466, 64
  br i1 %467, label %468, label %473

468:                                              ; preds = %465
  %469 = load i64*, i64** %146, align 8
  %470 = icmp eq i64* %469, null
  br i1 %470, label %473, label %471

471:                                              ; preds = %468
  %472 = bitcast i64* %469 to i8*
  call void @_ZdaPv(i8* %472) #18
  br label %473

473:                                              ; preds = %465, %468, %471
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %73) #17
  %474 = load i32, i32* %122, align 8
  %475 = icmp ugt i32 %474, 64
  br i1 %475, label %476, label %481

476:                                              ; preds = %473
  %477 = load i64*, i64** %155, align 8
  %478 = icmp eq i64* %477, null
  br i1 %478, label %481, label %479

479:                                              ; preds = %476
  %480 = bitcast i64* %477 to i8*
  call void @_ZdaPv(i8* %480) #18
  br label %481

481:                                              ; preds = %473, %476, %479
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %71) #17
  %482 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 0
  %483 = load i32, i32* %482, align 8
  %484 = icmp ugt i32 %483, 64
  br i1 %484, label %485, label %492

485:                                              ; preds = %481
  %486 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 1
  %487 = bitcast %union.anon* %486 to i64**
  %488 = load i64*, i64** %487, align 8
  %489 = icmp eq i64* %488, null
  br i1 %489, label %492, label %490

490:                                              ; preds = %485
  %491 = bitcast i64* %488 to i8*
  call void @_ZdaPv(i8* %491) #18
  br label %492

492:                                              ; preds = %481, %485, %490
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %70) #17
  br label %493

493:                                              ; preds = %492, %62, %47
  ret void
}

; Function Attrs: nofree nounwind optsize
declare double @sqrt(double) local_unnamed_addr #9

; Function Attrs: nounwind readnone speculatable
declare double @llvm.round.f64(double) #10

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt4udivERKS0_(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"*, %"class.llvm::APInt"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %4 = alloca <2 x i64>, align 16
  %5 = bitcast <2 x i64>* %4 to %"class.llvm::APInt"*
  %6 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp ult i32 %7, 65
  br i1 %8, label %9, label %15

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = udiv i64 %11, %13
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %7, i64 %14, i1 zeroext false) #19
  br label %77

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 0
  %17 = load i32, i32* %16, align 8
  %18 = icmp ult i32 %17, 65
  br i1 %18, label %19, label %26

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = tail call i64 @llvm.ctlz.i64(i64 %21, i1 false) #17, !range !2
  %23 = trunc i64 %22 to i32
  %24 = add nsw i32 %17, -64
  %25 = add i32 %24, %23
  br label %28

26:                                               ; preds = %15
  %27 = tail call i32 @_ZNK4llvm5APInt25countLeadingZerosSlowCaseEv(%"class.llvm::APInt"* %2) #20
  br label %28

28:                                               ; preds = %19, %26
  %29 = phi i32 [ %25, %19 ], [ %27, %26 ]
  %30 = sub i32 %17, %29
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %36, label %32

32:                                               ; preds = %28
  %33 = add i32 %30, -1
  %34 = lshr i32 %33, 6
  %35 = add nuw nsw i32 %34, 1
  br label %36

36:                                               ; preds = %28, %32
  %37 = phi i32 [ %35, %32 ], [ 0, %28 ]
  %38 = tail call i32 @_ZNK4llvm5APInt25countLeadingZerosSlowCaseEv(%"class.llvm::APInt"* %1) #20
  %39 = sub i32 %7, %38
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %46, label %41

41:                                               ; preds = %36
  %42 = add i32 %39, -1
  %43 = lshr i32 %42, 6
  %44 = add nuw nsw i32 %43, 1
  %45 = icmp ult i32 %44, %37
  br i1 %45, label %49, label %47

46:                                               ; preds = %36
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %7, i64 0, i1 zeroext false) #19
  br label %77

47:                                               ; preds = %41
  %48 = tail call zeroext i1 @_ZNK4llvm5APInt3ultERKS0_(%"class.llvm::APInt"* %1, %"class.llvm::APInt"* dereferenceable(16) %2) #19
  br i1 %48, label %49, label %50

49:                                               ; preds = %47, %41
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %7, i64 0, i1 zeroext false) #19
  br label %77

50:                                               ; preds = %47
  %51 = tail call zeroext i1 @_ZNK4llvm5APInteqERKS0_(%"class.llvm::APInt"* %1, %"class.llvm::APInt"* dereferenceable(16) %2) #19
  br i1 %51, label %52, label %54

52:                                               ; preds = %50
  %53 = load i32, i32* %6, align 8
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %53, i64 1, i1 zeroext false) #19
  br label %77

54:                                               ; preds = %50
  %55 = icmp eq i32 %43, 0
  %56 = icmp eq i32 %37, 1
  %57 = and i1 %56, %55
  br i1 %57, label %58, label %69

58:                                               ; preds = %54
  %59 = load i32, i32* %6, align 8
  %60 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %61 = bitcast %union.anon* %60 to i64**
  %62 = load i64*, i64** %61, align 8
  %63 = load i64, i64* %62, align 8
  %64 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1
  %65 = bitcast %union.anon* %64 to i64**
  %66 = load i64*, i64** %65, align 8
  %67 = load i64, i64* %66, align 8
  %68 = udiv i64 %63, %67
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %59, i64 %68, i1 zeroext false) #19
  br label %77

69:                                               ; preds = %54
  %70 = bitcast <2 x i64>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %70) #17
  %71 = bitcast <2 x i64>* %4 to i32*
  %72 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1, i32 0
  store <2 x i64> <i64 -6148914691236517206, i64 0>, <2 x i64>* %4, align 16
  store i32 1, i32* %71, align 16
  call void @_ZN4llvm5APInt6divideERKS0_jS2_jPS0_S3_(%"class.llvm::APInt"* dereferenceable(16) %1, i32 %44, %"class.llvm::APInt"* dereferenceable(16) %2, i32 %37, %"class.llvm::APInt"* nonnull %5, %"class.llvm::APInt"* null) #19
  %73 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %74 = load i32, i32* %71, align 16
  store i32 %74, i32* %73, align 8
  %75 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %76 = load i64, i64* %72, align 8
  store i64 %76, i64* %75, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %70) #17
  br label %77

77:                                               ; preds = %46, %49, %52, %58, %69, %9
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt21multiplicativeInverseERKS0_(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"* nocapture readonly, %"class.llvm::APInt"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %4 = alloca [2 x %"class.llvm::APInt"], align 16
  %5 = alloca [2 x %"class.llvm::APInt"], align 16
  %6 = alloca %"class.llvm::APInt", align 8
  %7 = alloca %"class.llvm::APInt", align 8
  %8 = alloca %"class.llvm::APInt", align 8
  %9 = bitcast [2 x %"class.llvm::APInt"]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 32, i1 false)
  %10 = getelementptr inbounds [2 x %"class.llvm::APInt"], [2 x %"class.llvm::APInt"]* %4, i64 0, i64 0
  %11 = getelementptr inbounds [2 x %"class.llvm::APInt"], [2 x %"class.llvm::APInt"]* %4, i64 0, i64 0, i32 0
  %12 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 0
  %13 = load i32, i32* %12, align 8
  store i32 %13, i32* %11, align 16
  %14 = getelementptr inbounds [2 x %"class.llvm::APInt"], [2 x %"class.llvm::APInt"]* %4, i64 0, i64 0, i32 1, i32 0
  store i64 0, i64* %14, align 8
  %15 = icmp ult i32 %13, 65
  br i1 %15, label %16, label %19

16:                                               ; preds = %3
  %17 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1, i32 0
  %18 = load i64, i64* %17, align 8
  store i64 %18, i64* %14, align 8
  br label %30

19:                                               ; preds = %3
  %20 = zext i32 %13 to i64
  %21 = add nuw nsw i64 %20, 63
  %22 = lshr i64 %21, 6
  %23 = shl nuw nsw i64 %22, 3
  %24 = tail call i8* @_Znam(i64 %23) #18
  %25 = getelementptr inbounds [2 x %"class.llvm::APInt"], [2 x %"class.llvm::APInt"]* %4, i64 0, i64 0, i32 1
  %26 = bitcast %union.anon* %25 to i8**
  store i8* %24, i8** %26, align 8
  %27 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1
  %28 = bitcast %union.anon* %27 to i8**
  %29 = load i8*, i8** %28, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %24, i8* align 8 %29, i64 %23, i1 false) #17
  br label %30

30:                                               ; preds = %16, %19
  %31 = getelementptr inbounds [2 x %"class.llvm::APInt"], [2 x %"class.llvm::APInt"]* %4, i64 0, i64 1, i32 0
  %32 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %33 = load i32, i32* %32, align 8
  store i32 %33, i32* %31, align 16
  %34 = getelementptr inbounds [2 x %"class.llvm::APInt"], [2 x %"class.llvm::APInt"]* %4, i64 0, i64 1, i32 1, i32 0
  store i64 0, i64* %34, align 8
  %35 = icmp ult i32 %33, 65
  br i1 %35, label %36, label %39

36:                                               ; preds = %30
  %37 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %34, align 8
  br label %50

39:                                               ; preds = %30
  %40 = zext i32 %33 to i64
  %41 = add nuw nsw i64 %40, 63
  %42 = lshr i64 %41, 6
  %43 = shl nuw nsw i64 %42, 3
  %44 = tail call i8* @_Znam(i64 %43) #18
  %45 = getelementptr inbounds [2 x %"class.llvm::APInt"], [2 x %"class.llvm::APInt"]* %4, i64 0, i64 1, i32 1
  %46 = bitcast %union.anon* %45 to i8**
  store i8* %44, i8** %46, align 8
  %47 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %48 = bitcast %union.anon* %47 to i8**
  %49 = load i8*, i8** %48, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %44, i8* align 8 %49, i64 %43, i1 false) #17
  br label %50

50:                                               ; preds = %36, %39
  %51 = bitcast [2 x %"class.llvm::APInt"]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %51) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %51, i8 -86, i64 32, i1 false)
  %52 = getelementptr inbounds [2 x %"class.llvm::APInt"], [2 x %"class.llvm::APInt"]* %5, i64 0, i64 0
  call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* nonnull %52, i32 %33, i64 0, i1 zeroext false) #19
  %53 = getelementptr inbounds [2 x %"class.llvm::APInt"], [2 x %"class.llvm::APInt"]* %5, i64 0, i64 1
  %54 = load i32, i32* %32, align 8
  call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %53, i32 %54, i64 1, i1 zeroext false) #19
  %55 = bitcast %"class.llvm::APInt"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %55) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %55, i8 -86, i64 16, i1 false)
  %56 = load i32, i32* %32, align 8
  call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* nonnull %6, i32 %56, i64 0, i1 zeroext false) #19
  %57 = bitcast %"class.llvm::APInt"* %7 to i8*
  %58 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %7, i64 0, i32 0
  %59 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %7, i64 0, i32 1
  %60 = bitcast %union.anon* %59 to i64**
  br label %61

61:                                               ; preds = %92, %50
  %62 = phi i32 [ 0, %50 ], [ %63, %92 ]
  %63 = xor i32 %62, 1
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds [2 x %"class.llvm::APInt"], [2 x %"class.llvm::APInt"]* %4, i64 0, i64 %64
  %66 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %65, i64 0, i32 0
  %67 = load i32, i32* %66, align 16
  %68 = icmp ult i32 %67, 65
  br i1 %68, label %69, label %75

69:                                               ; preds = %61
  %70 = getelementptr inbounds [2 x %"class.llvm::APInt"], [2 x %"class.llvm::APInt"]* %4, i64 0, i64 %64, i32 1, i32 0
  %71 = load i64, i64* %70, align 8
  %72 = icmp eq i64 %71, 0
  %73 = zext i32 %62 to i64
  %74 = getelementptr inbounds [2 x %"class.llvm::APInt"], [2 x %"class.llvm::APInt"]* %4, i64 0, i64 %73
  br i1 %72, label %93, label %79

75:                                               ; preds = %61
  %76 = call zeroext i1 @_ZNK4llvm5APInt13EqualSlowCaseEm(%"class.llvm::APInt"* %65, i64 0) #20
  %77 = zext i32 %62 to i64
  %78 = getelementptr inbounds [2 x %"class.llvm::APInt"], [2 x %"class.llvm::APInt"]* %4, i64 0, i64 %77
  br i1 %76, label %93, label %79

79:                                               ; preds = %69, %75
  %80 = phi %"class.llvm::APInt"* [ %74, %69 ], [ %78, %75 ]
  %81 = phi i64 [ %73, %69 ], [ %77, %75 ]
  call void @_ZN4llvm5APInt7udivremERKS0_S2_RS0_S3_(%"class.llvm::APInt"* dereferenceable(16) %80, %"class.llvm::APInt"* dereferenceable(16) %65, %"class.llvm::APInt"* nonnull dereferenceable(16) %6, %"class.llvm::APInt"* dereferenceable(16) %80) #19
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %57) #17
  %82 = getelementptr inbounds [2 x %"class.llvm::APInt"], [2 x %"class.llvm::APInt"]* %5, i64 0, i64 %64
  call void @_ZNK4llvm5APIntmlERKS0_(%"class.llvm::APInt"* nonnull sret %7, %"class.llvm::APInt"* %82, %"class.llvm::APInt"* nonnull dereferenceable(16) %6) #19
  %83 = getelementptr inbounds [2 x %"class.llvm::APInt"], [2 x %"class.llvm::APInt"]* %5, i64 0, i64 %81
  %84 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntmIERKS0_(%"class.llvm::APInt"* %83, %"class.llvm::APInt"* nonnull dereferenceable(16) %7) #19
  %85 = load i32, i32* %58, align 8
  %86 = icmp ugt i32 %85, 64
  br i1 %86, label %87, label %92

87:                                               ; preds = %79
  %88 = load i64*, i64** %60, align 8
  %89 = icmp eq i64* %88, null
  br i1 %89, label %92, label %90

90:                                               ; preds = %87
  %91 = bitcast i64* %88 to i8*
  call void @_ZdaPv(i8* %91) #18
  br label %92

92:                                               ; preds = %79, %87, %90
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %57) #17
  br label %61

93:                                               ; preds = %75, %69
  %94 = phi %"class.llvm::APInt"* [ %74, %69 ], [ %78, %75 ]
  %95 = zext i32 %62 to i64
  %96 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %94, i64 0, i32 0
  %97 = load i32, i32* %96, align 16
  %98 = icmp ult i32 %97, 65
  br i1 %98, label %99, label %103

99:                                               ; preds = %93
  %100 = getelementptr inbounds [2 x %"class.llvm::APInt"], [2 x %"class.llvm::APInt"]* %4, i64 0, i64 %95, i32 1, i32 0
  %101 = load i64, i64* %100, align 8
  %102 = icmp eq i64 %101, 1
  br i1 %102, label %107, label %105

103:                                              ; preds = %93
  %104 = call zeroext i1 @_ZNK4llvm5APInt13EqualSlowCaseEm(%"class.llvm::APInt"* %94, i64 1) #20
  br i1 %104, label %107, label %105

105:                                              ; preds = %99, %103
  %106 = load i32, i32* %32, align 8
  call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %106, i64 0, i1 zeroext false) #19
  br label %153

107:                                              ; preds = %99, %103
  %108 = getelementptr inbounds [2 x %"class.llvm::APInt"], [2 x %"class.llvm::APInt"]* %5, i64 0, i64 %95
  %109 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %108, i64 0, i32 0
  %110 = load i32, i32* %109, align 16
  %111 = add i32 %110, -1
  %112 = and i32 %111, 63
  %113 = zext i32 %112 to i64
  %114 = shl i64 1, %113
  %115 = icmp ult i32 %110, 65
  %116 = getelementptr inbounds [2 x %"class.llvm::APInt"], [2 x %"class.llvm::APInt"]* %5, i64 0, i64 %95, i32 1
  br i1 %115, label %117, label %119

117:                                              ; preds = %107
  %118 = getelementptr inbounds %union.anon, %union.anon* %116, i64 0, i32 0
  br label %125

119:                                              ; preds = %107
  %120 = bitcast %union.anon* %116 to i64**
  %121 = load i64*, i64** %120, align 8
  %122 = lshr i32 %111, 6
  %123 = zext i32 %122 to i64
  %124 = getelementptr inbounds i64, i64* %121, i64 %123
  br label %125

125:                                              ; preds = %117, %119
  %126 = phi i64* [ %118, %117 ], [ %124, %119 ]
  %127 = load i64, i64* %126, align 8
  %128 = and i64 %127, %114
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %152, label %130

130:                                              ; preds = %125
  %131 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %8, i64 0, i32 0
  store i32 %110, i32* %131, align 8
  %132 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %8, i64 0, i32 1, i32 0
  store i64 0, i64* %132, align 8
  br i1 %115, label %133, label %136

133:                                              ; preds = %130
  %134 = getelementptr inbounds [2 x %"class.llvm::APInt"], [2 x %"class.llvm::APInt"]* %5, i64 0, i64 %95, i32 1, i32 0
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %132, align 8
  br label %146

136:                                              ; preds = %130
  %137 = zext i32 %110 to i64
  %138 = add nuw nsw i64 %137, 63
  %139 = lshr i64 %138, 6
  %140 = shl nuw nsw i64 %139, 3
  %141 = call i8* @_Znam(i64 %140) #18
  %142 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %8, i64 0, i32 1
  %143 = bitcast %union.anon* %142 to i8**
  store i8* %141, i8** %143, align 8
  %144 = bitcast %union.anon* %116 to i8**
  %145 = load i8*, i8** %144, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %141, i8* align 8 %145, i64 %140, i1 false) #17
  br label %146

146:                                              ; preds = %136, %133
  %147 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLERKS0_(%"class.llvm::APInt"* nonnull %8, %"class.llvm::APInt"* dereferenceable(16) %2) #20, !noalias !31
  %148 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %149 = load i32, i32* %131, align 8, !noalias !31
  store i32 %149, i32* %148, align 8, !alias.scope !31
  %150 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %151 = load i64, i64* %132, align 8, !noalias !31
  store i64 %151, i64* %150, align 8, !alias.scope !31
  store i32 0, i32* %131, align 8, !noalias !31
  br label %153

152:                                              ; preds = %125
  call void @_ZN4llvm5APIntC2ERKS0_(%"class.llvm::APInt"* %0, %"class.llvm::APInt"* dereferenceable(16) %108) #19
  br label %153

153:                                              ; preds = %146, %152, %105
  %154 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 0
  %155 = load i32, i32* %154, align 8
  %156 = icmp ugt i32 %155, 64
  br i1 %156, label %157, label %164

157:                                              ; preds = %153
  %158 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 1
  %159 = bitcast %union.anon* %158 to i64**
  %160 = load i64*, i64** %159, align 8
  %161 = icmp eq i64* %160, null
  br i1 %161, label %164, label %162

162:                                              ; preds = %157
  %163 = bitcast i64* %160 to i8*
  call void @_ZdaPv(i8* %163) #18
  br label %164

164:                                              ; preds = %153, %157, %162
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %55) #17
  %165 = getelementptr inbounds [2 x %"class.llvm::APInt"], [2 x %"class.llvm::APInt"]* %5, i64 0, i64 2
  br label %166

166:                                              ; preds = %179, %164
  %167 = phi %"class.llvm::APInt"* [ %165, %164 ], [ %168, %179 ]
  %168 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %167, i64 -1
  %169 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %168, i64 0, i32 0
  %170 = load i32, i32* %169, align 8
  %171 = icmp ugt i32 %170, 64
  br i1 %171, label %172, label %179

172:                                              ; preds = %166
  %173 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %167, i64 -1, i32 1
  %174 = bitcast %union.anon* %173 to i64**
  %175 = load i64*, i64** %174, align 8
  %176 = icmp eq i64* %175, null
  br i1 %176, label %179, label %177

177:                                              ; preds = %172
  %178 = bitcast i64* %175 to i8*
  call void @_ZdaPv(i8* %178) #18
  br label %179

179:                                              ; preds = %166, %172, %177
  %180 = icmp eq %"class.llvm::APInt"* %168, %52
  br i1 %180, label %181, label %166

181:                                              ; preds = %179
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %51) #17
  %182 = getelementptr inbounds [2 x %"class.llvm::APInt"], [2 x %"class.llvm::APInt"]* %4, i64 0, i64 2
  br label %183

183:                                              ; preds = %196, %181
  %184 = phi %"class.llvm::APInt"* [ %182, %181 ], [ %185, %196 ]
  %185 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %184, i64 -1
  %186 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %185, i64 0, i32 0
  %187 = load i32, i32* %186, align 8
  %188 = icmp ugt i32 %187, 64
  br i1 %188, label %189, label %196

189:                                              ; preds = %183
  %190 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %184, i64 -1, i32 1
  %191 = bitcast %union.anon* %190 to i64**
  %192 = load i64*, i64** %191, align 8
  %193 = icmp eq i64* %192, null
  br i1 %193, label %196, label %194

194:                                              ; preds = %189
  %195 = bitcast i64* %192 to i8*
  call void @_ZdaPv(i8* %195) #18
  br label %196

196:                                              ; preds = %183, %189, %194
  %197 = icmp eq %"class.llvm::APInt"* %185, %10
  br i1 %197, label %198, label %183

198:                                              ; preds = %196
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #17
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm5APInt7udivremERKS0_S2_RS0_S3_(%"class.llvm::APInt"* dereferenceable(16), %"class.llvm::APInt"* dereferenceable(16), %"class.llvm::APInt"* dereferenceable(16), %"class.llvm::APInt"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.llvm::APInt", align 8
  %6 = alloca %"class.llvm::APInt", align 8
  %7 = alloca %"class.llvm::APInt", align 8
  %8 = alloca %"class.llvm::APInt", align 8
  %9 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = icmp ult i32 %10, 65
  br i1 %11, label %12, label %74

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %16 = load i64, i64* %15, align 8
  %17 = udiv i64 %14, %16
  %18 = urem i64 %14, %16
  %19 = bitcast %"class.llvm::APInt"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19) #17
  call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* nonnull %5, i32 %10, i64 %17, i1 zeroext false) #19
  %20 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 0
  %21 = load i32, i32* %20, align 8
  %22 = icmp ult i32 %21, 65
  br i1 %22, label %32, label %23

23:                                               ; preds = %12
  %24 = icmp eq %"class.llvm::APInt"* %5, %2
  br i1 %24, label %38, label %25

25:                                               ; preds = %23
  %26 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1
  %27 = bitcast %union.anon* %26 to i64**
  %28 = load i64*, i64** %27, align 8
  %29 = icmp eq i64* %28, null
  br i1 %29, label %32, label %30

30:                                               ; preds = %25
  %31 = bitcast i64* %28 to i8*
  call void @_ZdaPv(i8* %31) #18
  br label %32

32:                                               ; preds = %12, %25, %30
  %33 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1, i32 0
  %34 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1, i32 0
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %33, align 8
  %36 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 0
  %37 = load i32, i32* %36, align 8
  store i32 0, i32* %36, align 8
  store i32 %37, i32* %20, align 8
  br label %45

38:                                               ; preds = %23
  %39 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1
  %40 = bitcast %union.anon* %39 to i64**
  %41 = load i64*, i64** %40, align 8
  %42 = icmp eq i64* %41, null
  br i1 %42, label %45, label %43

43:                                               ; preds = %38
  %44 = bitcast i64* %41 to i8*
  call void @_ZdaPv(i8* %44) #18
  br label %45

45:                                               ; preds = %32, %38, %43
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #17
  %46 = bitcast %"class.llvm::APInt"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %46) #17
  %47 = load i32, i32* %9, align 8
  call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* nonnull %6, i32 %47, i64 %18, i1 zeroext false) #19
  %48 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 0
  %49 = load i32, i32* %48, align 8
  %50 = icmp ult i32 %49, 65
  br i1 %50, label %60, label %51

51:                                               ; preds = %45
  %52 = icmp eq %"class.llvm::APInt"* %6, %3
  br i1 %52, label %66, label %53

53:                                               ; preds = %51
  %54 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 1
  %55 = bitcast %union.anon* %54 to i64**
  %56 = load i64*, i64** %55, align 8
  %57 = icmp eq i64* %56, null
  br i1 %57, label %60, label %58

58:                                               ; preds = %53
  %59 = bitcast i64* %56 to i8*
  call void @_ZdaPv(i8* %59) #18
  br label %60

60:                                               ; preds = %45, %53, %58
  %61 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 1, i32 0
  %62 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 1, i32 0
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %61, align 8
  %64 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 0
  %65 = load i32, i32* %64, align 8
  store i32 0, i32* %64, align 8
  store i32 %65, i32* %48, align 8
  br label %73

66:                                               ; preds = %51
  %67 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 1
  %68 = bitcast %union.anon* %67 to i64**
  %69 = load i64*, i64** %68, align 8
  %70 = icmp eq i64* %69, null
  br i1 %70, label %73, label %71

71:                                               ; preds = %66
  %72 = bitcast i64* %69 to i8*
  call void @_ZdaPv(i8* %72) #18
  br label %73

73:                                               ; preds = %60, %66, %71
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %46) #17
  br label %201

74:                                               ; preds = %4
  %75 = tail call i32 @_ZNK4llvm5APInt25countLeadingZerosSlowCaseEv(%"class.llvm::APInt"* %0) #20
  %76 = sub i32 %10, %75
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %82, label %78

78:                                               ; preds = %74
  %79 = add i32 %76, -1
  %80 = lshr i32 %79, 6
  %81 = add nuw nsw i32 %80, 1
  br label %82

82:                                               ; preds = %74, %78
  %83 = phi i32 [ %81, %78 ], [ 0, %74 ]
  %84 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %85 = load i32, i32* %84, align 8
  %86 = icmp ult i32 %85, 65
  br i1 %86, label %87, label %94

87:                                               ; preds = %82
  %88 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %89 = load i64, i64* %88, align 8
  %90 = tail call i64 @llvm.ctlz.i64(i64 %89, i1 false) #17, !range !2
  %91 = trunc i64 %90 to i32
  %92 = add nsw i32 %85, -64
  %93 = add i32 %92, %91
  br label %96

94:                                               ; preds = %82
  %95 = tail call i32 @_ZNK4llvm5APInt25countLeadingZerosSlowCaseEv(%"class.llvm::APInt"* %1) #20
  br label %96

96:                                               ; preds = %87, %94
  %97 = phi i32 [ %93, %87 ], [ %95, %94 ]
  %98 = sub i32 %85, %97
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %104, label %100

100:                                              ; preds = %96
  %101 = add i32 %98, -1
  %102 = lshr i32 %101, 6
  %103 = add nuw nsw i32 %102, 1
  br label %104

104:                                              ; preds = %96, %100
  %105 = phi i32 [ %103, %100 ], [ 0, %96 ]
  %106 = icmp eq i32 %83, 0
  br i1 %106, label %107, label %110

107:                                              ; preds = %104
  %108 = tail call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntaSEm(%"class.llvm::APInt"* %2, i64 0) #19
  %109 = tail call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntaSEm(%"class.llvm::APInt"* %3, i64 0) #19
  br label %201

110:                                              ; preds = %104
  %111 = icmp ult i32 %83, %105
  br i1 %111, label %114, label %112

112:                                              ; preds = %110
  %113 = tail call zeroext i1 @_ZNK4llvm5APInt3ultERKS0_(%"class.llvm::APInt"* %0, %"class.llvm::APInt"* dereferenceable(16) %1) #19
  br i1 %113, label %114, label %117

114:                                              ; preds = %112, %110
  %115 = tail call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntaSERKS0_(%"class.llvm::APInt"* %3, %"class.llvm::APInt"* dereferenceable(16) %0) #19
  %116 = tail call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntaSEm(%"class.llvm::APInt"* %2, i64 0) #19
  br label %201

117:                                              ; preds = %112
  %118 = tail call zeroext i1 @_ZNK4llvm5APInteqERKS0_(%"class.llvm::APInt"* %0, %"class.llvm::APInt"* dereferenceable(16) %1) #19
  br i1 %118, label %119, label %122

119:                                              ; preds = %117
  %120 = tail call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntaSEm(%"class.llvm::APInt"* %2, i64 1) #19
  %121 = tail call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntaSEm(%"class.llvm::APInt"* %3, i64 0) #19
  br label %201

122:                                              ; preds = %117
  %123 = icmp eq i32 %83, 1
  %124 = icmp eq i32 %105, 1
  %125 = and i1 %123, %124
  br i1 %125, label %126, label %200

126:                                              ; preds = %122
  %127 = load i32, i32* %9, align 8
  %128 = icmp ult i32 %127, 65
  %129 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %130 = getelementptr inbounds %union.anon, %union.anon* %129, i64 0, i32 0
  %131 = bitcast %union.anon* %129 to i64**
  %132 = load i64*, i64** %131, align 8
  %133 = select i1 %128, i64* %130, i64* %132
  %134 = load i64, i64* %133, align 8
  %135 = load i32, i32* %84, align 8
  %136 = icmp ult i32 %135, 65
  %137 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %138 = getelementptr inbounds %union.anon, %union.anon* %137, i64 0, i32 0
  %139 = bitcast %union.anon* %137 to i64**
  %140 = load i64*, i64** %139, align 8
  %141 = select i1 %136, i64* %138, i64* %140
  %142 = load i64, i64* %141, align 8
  %143 = bitcast %"class.llvm::APInt"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %143) #17
  %144 = udiv i64 %134, %142
  %145 = urem i64 %134, %142
  call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* nonnull %7, i32 %127, i64 %144, i1 zeroext false) #19
  %146 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 0
  %147 = load i32, i32* %146, align 8
  %148 = icmp ult i32 %147, 65
  br i1 %148, label %158, label %149

149:                                              ; preds = %126
  %150 = icmp eq %"class.llvm::APInt"* %7, %2
  br i1 %150, label %164, label %151

151:                                              ; preds = %149
  %152 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1
  %153 = bitcast %union.anon* %152 to i64**
  %154 = load i64*, i64** %153, align 8
  %155 = icmp eq i64* %154, null
  br i1 %155, label %158, label %156

156:                                              ; preds = %151
  %157 = bitcast i64* %154 to i8*
  call void @_ZdaPv(i8* %157) #18
  br label %158

158:                                              ; preds = %126, %151, %156
  %159 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1, i32 0
  %160 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %7, i64 0, i32 1, i32 0
  %161 = load i64, i64* %160, align 8
  store i64 %161, i64* %159, align 8
  %162 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %7, i64 0, i32 0
  %163 = load i32, i32* %162, align 8
  store i32 0, i32* %162, align 8
  store i32 %163, i32* %146, align 8
  br label %171

164:                                              ; preds = %149
  %165 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %7, i64 0, i32 1
  %166 = bitcast %union.anon* %165 to i64**
  %167 = load i64*, i64** %166, align 8
  %168 = icmp eq i64* %167, null
  br i1 %168, label %171, label %169

169:                                              ; preds = %164
  %170 = bitcast i64* %167 to i8*
  call void @_ZdaPv(i8* %170) #18
  br label %171

171:                                              ; preds = %158, %164, %169
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %143) #17
  %172 = bitcast %"class.llvm::APInt"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %172) #17
  %173 = load i32, i32* %9, align 8
  call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* nonnull %8, i32 %173, i64 %145, i1 zeroext false) #19
  %174 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 0
  %175 = load i32, i32* %174, align 8
  %176 = icmp ult i32 %175, 65
  br i1 %176, label %186, label %177

177:                                              ; preds = %171
  %178 = icmp eq %"class.llvm::APInt"* %8, %3
  br i1 %178, label %192, label %179

179:                                              ; preds = %177
  %180 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 1
  %181 = bitcast %union.anon* %180 to i64**
  %182 = load i64*, i64** %181, align 8
  %183 = icmp eq i64* %182, null
  br i1 %183, label %186, label %184

184:                                              ; preds = %179
  %185 = bitcast i64* %182 to i8*
  call void @_ZdaPv(i8* %185) #18
  br label %186

186:                                              ; preds = %171, %179, %184
  %187 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 1, i32 0
  %188 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %8, i64 0, i32 1, i32 0
  %189 = load i64, i64* %188, align 8
  store i64 %189, i64* %187, align 8
  %190 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %8, i64 0, i32 0
  %191 = load i32, i32* %190, align 8
  store i32 0, i32* %190, align 8
  store i32 %191, i32* %174, align 8
  br label %199

192:                                              ; preds = %177
  %193 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %8, i64 0, i32 1
  %194 = bitcast %union.anon* %193 to i64**
  %195 = load i64*, i64** %194, align 8
  %196 = icmp eq i64* %195, null
  br i1 %196, label %199, label %197

197:                                              ; preds = %192
  %198 = bitcast i64* %195 to i8*
  call void @_ZdaPv(i8* %198) #18
  br label %199

199:                                              ; preds = %186, %192, %197
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %172) #17
  br label %201

200:                                              ; preds = %122
  tail call void @_ZN4llvm5APInt6divideERKS0_jS2_jPS0_S3_(%"class.llvm::APInt"* dereferenceable(16) %0, i32 %83, %"class.llvm::APInt"* dereferenceable(16) %1, i32 %105, %"class.llvm::APInt"* %2, %"class.llvm::APInt"* %3) #19
  br label %201

201:                                              ; preds = %107, %114, %119, %199, %200, %73
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt5magicEv(%"struct.llvm::APInt::ms"* noalias sret, %"class.llvm::APInt"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.llvm::APInt", align 8
  %4 = alloca %"class.llvm::APInt", align 8
  %5 = alloca %"class.llvm::APInt", align 8
  %6 = alloca %"class.llvm::APInt", align 8
  %7 = alloca <2 x i64>, align 16
  %8 = bitcast <2 x i64>* %7 to %"class.llvm::APInt"*
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to %"class.llvm::APInt"*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to %"class.llvm::APInt"*
  %13 = alloca <2 x i64>, align 16
  %14 = bitcast <2 x i64>* %13 to %"class.llvm::APInt"*
  %15 = alloca <2 x i64>, align 16
  %16 = bitcast <2 x i64>* %15 to %"class.llvm::APInt"*
  %17 = alloca <2 x i64>, align 16
  %18 = bitcast <2 x i64>* %17 to %"class.llvm::APInt"*
  %19 = alloca <2 x i64>, align 16
  %20 = bitcast <2 x i64>* %19 to %"class.llvm::APInt"*
  %21 = alloca %"class.llvm::APInt", align 8
  %22 = alloca %"class.llvm::APInt", align 8
  %23 = alloca %"class.llvm::APInt", align 8
  %24 = alloca %"class.llvm::APInt", align 8
  %25 = alloca %"class.llvm::APInt", align 8
  %26 = alloca %"class.llvm::APInt", align 8
  %27 = alloca %"class.llvm::APInt", align 8
  %28 = alloca %"class.llvm::APInt", align 8
  %29 = alloca %"class.llvm::APInt", align 8
  %30 = alloca %"class.llvm::APInt", align 8
  %31 = alloca %"class.llvm::APInt", align 8
  %32 = alloca %"class.llvm::APInt", align 8
  %33 = alloca %"class.llvm::APInt", align 8
  %34 = alloca %"class.llvm::APInt", align 8
  %35 = alloca %"class.llvm::APInt", align 8
  %36 = alloca %"class.llvm::APInt", align 8
  %37 = alloca %"class.llvm::APInt", align 8
  %38 = alloca %"class.llvm::APInt", align 8
  %39 = alloca %"class.llvm::APInt", align 8
  %40 = alloca %"class.llvm::APInt", align 8
  %41 = alloca %"class.llvm::APInt", align 8
  %42 = bitcast %"class.llvm::APInt"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %42) #17
  %43 = bitcast %"class.llvm::APInt"* %6 to i64*
  store i64 -6148914691236517206, i64* %43, align 8
  %44 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 0
  %45 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 1, i32 0
  %46 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %46) #17
  %47 = bitcast <2 x i64>* %7 to i32*
  %48 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %8, i64 0, i32 1, i32 0
  store <2 x i64> <i64 -6148914691236517206, i64 0>, <2 x i64>* %7, align 16
  store i32 1, i32* %47, align 16
  %49 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %49) #17
  %50 = bitcast <2 x i64>* %9 to i32*
  %51 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %10, i64 0, i32 1, i32 0
  store <2 x i64> <i64 -6148914691236517206, i64 0>, <2 x i64>* %9, align 16
  store i32 1, i32* %50, align 16
  %52 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %52) #17
  %53 = bitcast <2 x i64>* %11 to i32*
  %54 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %12, i64 0, i32 1, i32 0
  store <2 x i64> <i64 -6148914691236517206, i64 0>, <2 x i64>* %11, align 16
  store i32 1, i32* %53, align 16
  %55 = bitcast <2 x i64>* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %55) #17
  %56 = bitcast <2 x i64>* %13 to i32*
  %57 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %14, i64 0, i32 1, i32 0
  store <2 x i64> <i64 -6148914691236517206, i64 0>, <2 x i64>* %13, align 16
  store i32 1, i32* %56, align 16
  %58 = bitcast <2 x i64>* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %58) #17
  %59 = bitcast <2 x i64>* %15 to i32*
  %60 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %16, i64 0, i32 1, i32 0
  store <2 x i64> <i64 -6148914691236517206, i64 0>, <2 x i64>* %15, align 16
  store i32 1, i32* %59, align 16
  %61 = bitcast <2 x i64>* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %61) #17
  %62 = bitcast <2 x i64>* %17 to i32*
  %63 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %18, i64 0, i32 1, i32 0
  store <2 x i64> <i64 -6148914691236517206, i64 0>, <2 x i64>* %17, align 16
  store i32 1, i32* %62, align 16
  %64 = bitcast <2 x i64>* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %64) #17
  %65 = bitcast <2 x i64>* %19 to i32*
  %66 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %20, i64 0, i32 1, i32 0
  store <2 x i64> <i64 -6148914691236517206, i64 0>, <2 x i64>* %19, align 16
  store i32 1, i32* %65, align 16
  %67 = bitcast %"class.llvm::APInt"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %67) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %67, i8 -86, i64 16, i1 false)
  %68 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %69 = load i32, i32* %68, align 8
  call void @_ZN4llvm5APInt17getSignedMinValueEj(%"class.llvm::APInt"* nonnull sret %21, i32 %69) #19
  %70 = bitcast %"struct.llvm::APInt::ms"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %70, i8 -86, i64 24, i1 false)
  %71 = getelementptr inbounds %"struct.llvm::APInt::ms", %"struct.llvm::APInt::ms"* %0, i64 0, i32 0, i32 0
  store i32 1, i32* %71, align 8
  %72 = getelementptr inbounds %"struct.llvm::APInt::ms", %"struct.llvm::APInt::ms"* %0, i64 0, i32 0, i32 1, i32 0
  store i64 0, i64* %72, align 8
  %73 = bitcast %"class.llvm::APInt"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %73) #17
  call void @_ZNK4llvm5APInt3absEv(%"class.llvm::APInt"* nonnull sret %22, %"class.llvm::APInt"* %1) #19
  %74 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %22, i64 0, i32 1, i32 0
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %45, align 8
  %76 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %22, i64 0, i32 0
  %77 = load i32, i32* %76, align 8
  store i32 %77, i32* %44, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %73) #17
  %78 = bitcast %"class.llvm::APInt"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %78) #17
  %79 = load i32, i32* %68, align 8
  %80 = add i32 %79, -1
  call void @_ZNK4llvm5APInt4lshrEj(%"class.llvm::APInt"* nonnull sret %23, %"class.llvm::APInt"* %1, i32 %80) #19
  %81 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLERKS0_(%"class.llvm::APInt"* nonnull %23, %"class.llvm::APInt"* nonnull dereferenceable(16) %21) #20, !noalias !34
  %82 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %23, i64 0, i32 0
  %83 = load i32, i32* %82, align 8, !noalias !34
  %84 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %23, i64 0, i32 1, i32 0
  %85 = load i64, i64* %84, align 8, !noalias !34
  store i32 0, i32* %82, align 8, !noalias !34
  %86 = load i32, i32* %65, align 16
  %87 = icmp ult i32 %86, 65
  br i1 %87, label %88, label %89

88:                                               ; preds = %2
  store i64 %85, i64* %66, align 8
  store i32 %83, i32* %65, align 16
  br label %107

89:                                               ; preds = %2
  %90 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %20, i64 0, i32 1
  %91 = bitcast %union.anon* %90 to i64**
  %92 = load i64*, i64** %91, align 8
  %93 = icmp eq i64* %92, null
  br i1 %93, label %94, label %95

94:                                               ; preds = %89
  store i64 %85, i64* %66, align 8
  store i32 %83, i32* %65, align 16
  br label %107

95:                                               ; preds = %89
  %96 = bitcast i64* %92 to i8*
  call void @_ZdaPv(i8* %96) #18
  %97 = load i32, i32* %82, align 8
  store i64 %85, i64* %66, align 8
  store i32 %83, i32* %65, align 16
  %98 = icmp ugt i32 %97, 64
  br i1 %98, label %99, label %107

99:                                               ; preds = %95
  %100 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %23, i64 0, i32 1
  %101 = bitcast %union.anon* %100 to i64**
  %102 = load i64*, i64** %101, align 8
  %103 = icmp eq i64* %102, null
  br i1 %103, label %107, label %104

104:                                              ; preds = %99
  %105 = bitcast i64* %102 to i8*
  call void @_ZdaPv(i8* %105) #18
  %106 = load i32, i32* %65, align 16
  br label %107

107:                                              ; preds = %99, %104, %94, %88, %95
  %108 = phi i32 [ %83, %88 ], [ %83, %95 ], [ %83, %94 ], [ %106, %104 ], [ %83, %99 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %78) #17
  %109 = bitcast %"class.llvm::APInt"* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %109) #17
  %110 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %25, i64 0, i32 0
  store i32 %108, i32* %110, align 8
  %111 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %25, i64 0, i32 1, i32 0
  store i64 0, i64* %111, align 8
  %112 = icmp ult i32 %108, 65
  br i1 %112, label %113, label %115

113:                                              ; preds = %107
  %114 = load i64, i64* %66, align 8
  store i64 %114, i64* %111, align 8
  br label %126

115:                                              ; preds = %107
  %116 = zext i32 %108 to i64
  %117 = add nuw nsw i64 %116, 63
  %118 = lshr i64 %117, 6
  %119 = shl nuw nsw i64 %118, 3
  %120 = call i8* @_Znam(i64 %119) #18
  %121 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %25, i64 0, i32 1
  %122 = bitcast %union.anon* %121 to i8**
  store i8* %120, i8** %122, align 8
  %123 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %20, i64 0, i32 1
  %124 = bitcast %union.anon* %123 to i8**
  %125 = load i8*, i8** %124, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %120, i8* align 8 %125, i64 %119, i1 false) #17
  br label %126

126:                                              ; preds = %113, %115
  %127 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntmIEm(%"class.llvm::APInt"* nonnull %25, i64 1) #20, !noalias !37
  %128 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %24, i64 0, i32 0
  %129 = load i32, i32* %110, align 8, !noalias !37
  store i32 %129, i32* %128, align 8, !alias.scope !37
  %130 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %24, i64 0, i32 1, i32 0
  %131 = load i64, i64* %111, align 8, !noalias !37
  store i64 %131, i64* %130, align 8, !alias.scope !37
  store i32 0, i32* %110, align 8, !noalias !37
  %132 = bitcast %"class.llvm::APInt"* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %132) #17
  call void @_ZNK4llvm5APInt4uremERKS0_(%"class.llvm::APInt"* nonnull sret %26, %"class.llvm::APInt"* nonnull %20, %"class.llvm::APInt"* nonnull dereferenceable(16) %6) #19
  %133 = bitcast %"class.llvm::APInt"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %133)
  %134 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 0
  %135 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %26, i64 0, i32 0
  %136 = load i32, i32* %135, align 8, !noalias !40
  store i32 %136, i32* %134, align 8, !noalias !40
  %137 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1, i32 0
  %138 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %26, i64 0, i32 1, i32 0
  %139 = load i64, i64* %138, align 8, !noalias !40
  store i64 %139, i64* %137, align 8, !noalias !40
  store i32 0, i32* %135, align 8, !noalias !40
  call void @_ZN4llvm5APInt11flipAllBitsEv(%"class.llvm::APInt"* nonnull %5) #20, !noalias !43
  %140 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntppEv(%"class.llvm::APInt"* nonnull %5) #20, !noalias !43
  %141 = load i32, i32* %134, align 8, !noalias !43
  %142 = load i64, i64* %137, align 8, !noalias !43
  store i32 0, i32* %134, align 8, !noalias !43
  %143 = load i32, i32* %135, align 8, !noalias !40
  %144 = icmp ult i32 %143, 65
  br i1 %144, label %150, label %145

145:                                              ; preds = %126
  %146 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %26, i64 0, i32 1
  %147 = bitcast %union.anon* %146 to i64**
  %148 = load i64*, i64** %147, align 8, !noalias !40
  %149 = icmp eq i64* %148, null
  br i1 %149, label %150, label %151

150:                                              ; preds = %145, %126
  store i64 %142, i64* %138, align 8, !noalias !40
  store i32 %141, i32* %135, align 8, !noalias !40
  br label %162

151:                                              ; preds = %145
  %152 = bitcast i64* %148 to i8*
  call void @_ZdaPv(i8* %152) #18, !noalias !40
  %153 = load i32, i32* %134, align 8, !noalias !40
  %154 = icmp ugt i32 %153, 64
  store i64 %142, i64* %138, align 8, !noalias !40
  store i32 %141, i32* %135, align 8, !noalias !40
  br i1 %154, label %155, label %162

155:                                              ; preds = %151
  %156 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1
  %157 = bitcast %union.anon* %156 to i64**
  %158 = load i64*, i64** %157, align 8, !noalias !40
  %159 = icmp eq i64* %158, null
  br i1 %159, label %162, label %160

160:                                              ; preds = %155
  %161 = bitcast i64* %158 to i8*
  call void @_ZdaPv(i8* %161) #18, !noalias !40
  br label %162

162:                                              ; preds = %150, %151, %155, %160
  %163 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLERKS0_(%"class.llvm::APInt"* nonnull %26, %"class.llvm::APInt"* nonnull dereferenceable(16) %24) #20, !noalias !40
  %164 = load i32, i32* %135, align 8, !noalias !40
  %165 = load i64, i64* %138, align 8, !noalias !40
  store i32 0, i32* %135, align 8, !noalias !40
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %133)
  %166 = load i32, i32* %47, align 16
  %167 = icmp ult i32 %166, 65
  br i1 %167, label %168, label %169

168:                                              ; preds = %162
  store i64 %165, i64* %48, align 8
  store i32 %164, i32* %47, align 16
  br label %186

169:                                              ; preds = %162
  %170 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %8, i64 0, i32 1
  %171 = bitcast %union.anon* %170 to i64**
  %172 = load i64*, i64** %171, align 8
  %173 = icmp eq i64* %172, null
  br i1 %173, label %174, label %175

174:                                              ; preds = %169
  store i64 %165, i64* %48, align 8
  store i32 %164, i32* %47, align 16
  br label %186

175:                                              ; preds = %169
  %176 = bitcast i64* %172 to i8*
  call void @_ZdaPv(i8* %176) #18
  %177 = load i32, i32* %135, align 8
  store i64 %165, i64* %48, align 8
  store i32 %164, i32* %47, align 16
  %178 = icmp ugt i32 %177, 64
  br i1 %178, label %179, label %186

179:                                              ; preds = %175
  %180 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %26, i64 0, i32 1
  %181 = bitcast %union.anon* %180 to i64**
  %182 = load i64*, i64** %181, align 8
  %183 = icmp eq i64* %182, null
  br i1 %183, label %186, label %184

184:                                              ; preds = %179
  %185 = bitcast i64* %182 to i8*
  call void @_ZdaPv(i8* %185) #18
  br label %186

186:                                              ; preds = %174, %168, %175, %179, %184
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %132) #17
  %187 = icmp ult i32 %129, 65
  %188 = icmp eq i64 %131, 0
  %189 = or i1 %187, %188
  br i1 %189, label %192, label %190

190:                                              ; preds = %186
  %191 = inttoptr i64 %131 to i8*
  call void @_ZdaPv(i8* %191) #18
  br label %192

192:                                              ; preds = %186, %190
  %193 = load i32, i32* %110, align 8
  %194 = icmp ugt i32 %193, 64
  br i1 %194, label %195, label %202

195:                                              ; preds = %192
  %196 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %25, i64 0, i32 1
  %197 = bitcast %union.anon* %196 to i64**
  %198 = load i64*, i64** %197, align 8
  %199 = icmp eq i64* %198, null
  br i1 %199, label %202, label %200

200:                                              ; preds = %195
  %201 = bitcast i64* %198 to i8*
  call void @_ZdaPv(i8* %201) #18
  br label %202

202:                                              ; preds = %192, %195, %200
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %109) #17
  %203 = load i32, i32* %68, align 8
  %204 = add i32 %203, -1
  %205 = bitcast %"class.llvm::APInt"* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %205) #17
  call void @_ZNK4llvm5APInt4udivERKS0_(%"class.llvm::APInt"* nonnull sret %27, %"class.llvm::APInt"* nonnull %21, %"class.llvm::APInt"* nonnull dereferenceable(16) %8) #19
  %206 = load i32, i32* %53, align 16
  %207 = icmp ult i32 %206, 65
  br i1 %207, label %215, label %208

208:                                              ; preds = %202
  %209 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %12, i64 0, i32 1
  %210 = bitcast %union.anon* %209 to i64**
  %211 = load i64*, i64** %210, align 8
  %212 = icmp eq i64* %211, null
  br i1 %212, label %215, label %213

213:                                              ; preds = %208
  %214 = bitcast i64* %211 to i8*
  call void @_ZdaPv(i8* %214) #18
  br label %215

215:                                              ; preds = %213, %208, %202
  %216 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %27, i64 0, i32 1, i32 0
  %217 = load i64, i64* %216, align 8
  store i64 %217, i64* %54, align 8
  %218 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %27, i64 0, i32 0
  %219 = load i32, i32* %218, align 8
  store i32 %219, i32* %53, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %205) #17
  %220 = bitcast %"class.llvm::APInt"* %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %220) #17
  call void @_ZNK4llvm5APIntmlERKS0_(%"class.llvm::APInt"* nonnull sret %28, %"class.llvm::APInt"* nonnull %12, %"class.llvm::APInt"* nonnull dereferenceable(16) %8) #19
  %221 = bitcast %"class.llvm::APInt"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %221)
  %222 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %4, i64 0, i32 0
  %223 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %28, i64 0, i32 0
  %224 = load i32, i32* %223, align 8, !noalias !46
  store i32 %224, i32* %222, align 8, !noalias !46
  %225 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %4, i64 0, i32 1, i32 0
  %226 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %28, i64 0, i32 1, i32 0
  %227 = load i64, i64* %226, align 8, !noalias !46
  store i64 %227, i64* %225, align 8, !noalias !46
  store i32 0, i32* %223, align 8, !noalias !46
  call void @_ZN4llvm5APInt11flipAllBitsEv(%"class.llvm::APInt"* nonnull %4) #20, !noalias !49
  %228 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntppEv(%"class.llvm::APInt"* nonnull %4) #20, !noalias !49
  %229 = load i32, i32* %222, align 8, !noalias !49
  %230 = load i64, i64* %225, align 8, !noalias !49
  store i32 0, i32* %222, align 8, !noalias !49
  %231 = load i32, i32* %223, align 8, !noalias !46
  %232 = icmp ult i32 %231, 65
  br i1 %232, label %238, label %233

233:                                              ; preds = %215
  %234 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %28, i64 0, i32 1
  %235 = bitcast %union.anon* %234 to i64**
  %236 = load i64*, i64** %235, align 8, !noalias !46
  %237 = icmp eq i64* %236, null
  br i1 %237, label %238, label %239

238:                                              ; preds = %233, %215
  store i64 %230, i64* %226, align 8, !noalias !46
  store i32 %229, i32* %223, align 8, !noalias !46
  br label %250

239:                                              ; preds = %233
  %240 = bitcast i64* %236 to i8*
  call void @_ZdaPv(i8* %240) #18, !noalias !46
  %241 = load i32, i32* %222, align 8, !noalias !46
  %242 = icmp ugt i32 %241, 64
  store i64 %230, i64* %226, align 8, !noalias !46
  store i32 %229, i32* %223, align 8, !noalias !46
  br i1 %242, label %243, label %250

243:                                              ; preds = %239
  %244 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %4, i64 0, i32 1
  %245 = bitcast %union.anon* %244 to i64**
  %246 = load i64*, i64** %245, align 8, !noalias !46
  %247 = icmp eq i64* %246, null
  br i1 %247, label %250, label %248

248:                                              ; preds = %243
  %249 = bitcast i64* %246 to i8*
  call void @_ZdaPv(i8* %249) #18, !noalias !46
  br label %250

250:                                              ; preds = %238, %239, %243, %248
  %251 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLERKS0_(%"class.llvm::APInt"* nonnull %28, %"class.llvm::APInt"* nonnull dereferenceable(16) %21) #20, !noalias !46
  %252 = load i32, i32* %223, align 8, !noalias !46
  %253 = load i64, i64* %226, align 8, !noalias !46
  store i32 0, i32* %223, align 8, !noalias !46
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %221)
  %254 = load i32, i32* %56, align 16
  %255 = icmp ult i32 %254, 65
  br i1 %255, label %256, label %257

256:                                              ; preds = %250
  store i64 %253, i64* %57, align 8
  store i32 %252, i32* %56, align 16
  br label %274

257:                                              ; preds = %250
  %258 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %14, i64 0, i32 1
  %259 = bitcast %union.anon* %258 to i64**
  %260 = load i64*, i64** %259, align 8
  %261 = icmp eq i64* %260, null
  br i1 %261, label %262, label %263

262:                                              ; preds = %257
  store i64 %253, i64* %57, align 8
  store i32 %252, i32* %56, align 16
  br label %274

263:                                              ; preds = %257
  %264 = bitcast i64* %260 to i8*
  call void @_ZdaPv(i8* %264) #18
  %265 = load i32, i32* %223, align 8
  store i64 %253, i64* %57, align 8
  store i32 %252, i32* %56, align 16
  %266 = icmp ugt i32 %265, 64
  br i1 %266, label %267, label %274

267:                                              ; preds = %263
  %268 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %28, i64 0, i32 1
  %269 = bitcast %union.anon* %268 to i64**
  %270 = load i64*, i64** %269, align 8
  %271 = icmp eq i64* %270, null
  br i1 %271, label %274, label %272

272:                                              ; preds = %267
  %273 = bitcast i64* %270 to i8*
  call void @_ZdaPv(i8* %273) #18
  br label %274

274:                                              ; preds = %262, %256, %263, %267, %272
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %220) #17
  %275 = bitcast %"class.llvm::APInt"* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %275) #17
  call void @_ZNK4llvm5APInt4udivERKS0_(%"class.llvm::APInt"* nonnull sret %29, %"class.llvm::APInt"* nonnull %21, %"class.llvm::APInt"* nonnull dereferenceable(16) %6) #19
  %276 = load i32, i32* %59, align 16
  %277 = icmp ult i32 %276, 65
  br i1 %277, label %285, label %278

278:                                              ; preds = %274
  %279 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %16, i64 0, i32 1
  %280 = bitcast %union.anon* %279 to i64**
  %281 = load i64*, i64** %280, align 8
  %282 = icmp eq i64* %281, null
  br i1 %282, label %285, label %283

283:                                              ; preds = %278
  %284 = bitcast i64* %281 to i8*
  call void @_ZdaPv(i8* %284) #18
  br label %285

285:                                              ; preds = %283, %278, %274
  %286 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %29, i64 0, i32 1, i32 0
  %287 = load i64, i64* %286, align 8
  store i64 %287, i64* %60, align 8
  %288 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %29, i64 0, i32 0
  %289 = load i32, i32* %288, align 8
  store i32 %289, i32* %59, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %275) #17
  %290 = bitcast %"class.llvm::APInt"* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %290) #17
  call void @_ZNK4llvm5APIntmlERKS0_(%"class.llvm::APInt"* nonnull sret %30, %"class.llvm::APInt"* nonnull %16, %"class.llvm::APInt"* nonnull dereferenceable(16) %6) #19
  %291 = bitcast %"class.llvm::APInt"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %291)
  %292 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 0
  %293 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %30, i64 0, i32 0
  %294 = load i32, i32* %293, align 8, !noalias !52
  store i32 %294, i32* %292, align 8, !noalias !52
  %295 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 1, i32 0
  %296 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %30, i64 0, i32 1, i32 0
  %297 = load i64, i64* %296, align 8, !noalias !52
  store i64 %297, i64* %295, align 8, !noalias !52
  store i32 0, i32* %293, align 8, !noalias !52
  call void @_ZN4llvm5APInt11flipAllBitsEv(%"class.llvm::APInt"* nonnull %3) #20, !noalias !55
  %298 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntppEv(%"class.llvm::APInt"* nonnull %3) #20, !noalias !55
  %299 = load i32, i32* %292, align 8, !noalias !55
  %300 = load i64, i64* %295, align 8, !noalias !55
  store i32 0, i32* %292, align 8, !noalias !55
  %301 = load i32, i32* %293, align 8, !noalias !52
  %302 = icmp ult i32 %301, 65
  br i1 %302, label %308, label %303

303:                                              ; preds = %285
  %304 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %30, i64 0, i32 1
  %305 = bitcast %union.anon* %304 to i64**
  %306 = load i64*, i64** %305, align 8, !noalias !52
  %307 = icmp eq i64* %306, null
  br i1 %307, label %308, label %309

308:                                              ; preds = %303, %285
  store i64 %300, i64* %296, align 8, !noalias !52
  store i32 %299, i32* %293, align 8, !noalias !52
  br label %320

309:                                              ; preds = %303
  %310 = bitcast i64* %306 to i8*
  call void @_ZdaPv(i8* %310) #18, !noalias !52
  %311 = load i32, i32* %292, align 8, !noalias !52
  %312 = icmp ugt i32 %311, 64
  store i64 %300, i64* %296, align 8, !noalias !52
  store i32 %299, i32* %293, align 8, !noalias !52
  br i1 %312, label %313, label %320

313:                                              ; preds = %309
  %314 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 1
  %315 = bitcast %union.anon* %314 to i64**
  %316 = load i64*, i64** %315, align 8, !noalias !52
  %317 = icmp eq i64* %316, null
  br i1 %317, label %320, label %318

318:                                              ; preds = %313
  %319 = bitcast i64* %316 to i8*
  call void @_ZdaPv(i8* %319) #18, !noalias !52
  br label %320

320:                                              ; preds = %308, %309, %313, %318
  %321 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLERKS0_(%"class.llvm::APInt"* nonnull %30, %"class.llvm::APInt"* nonnull dereferenceable(16) %21) #20, !noalias !52
  %322 = load i32, i32* %293, align 8, !noalias !52
  %323 = load i64, i64* %296, align 8, !noalias !52
  store i32 0, i32* %293, align 8, !noalias !52
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %291)
  %324 = load i32, i32* %62, align 16
  %325 = icmp ult i32 %324, 65
  br i1 %325, label %326, label %327

326:                                              ; preds = %320
  store i64 %323, i64* %63, align 8
  store i32 %322, i32* %62, align 16
  br label %344

327:                                              ; preds = %320
  %328 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %18, i64 0, i32 1
  %329 = bitcast %union.anon* %328 to i64**
  %330 = load i64*, i64** %329, align 8
  %331 = icmp eq i64* %330, null
  br i1 %331, label %332, label %333

332:                                              ; preds = %327
  store i64 %323, i64* %63, align 8
  store i32 %322, i32* %62, align 16
  br label %344

333:                                              ; preds = %327
  %334 = bitcast i64* %330 to i8*
  call void @_ZdaPv(i8* %334) #18
  %335 = load i32, i32* %293, align 8
  store i64 %323, i64* %63, align 8
  store i32 %322, i32* %62, align 16
  %336 = icmp ugt i32 %335, 64
  br i1 %336, label %337, label %344

337:                                              ; preds = %333
  %338 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %30, i64 0, i32 1
  %339 = bitcast %union.anon* %338 to i64**
  %340 = load i64*, i64** %339, align 8
  %341 = icmp eq i64* %340, null
  br i1 %341, label %344, label %342

342:                                              ; preds = %337
  %343 = bitcast i64* %340 to i8*
  call void @_ZdaPv(i8* %343) #18
  br label %344

344:                                              ; preds = %332, %326, %333, %337, %342
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %290) #17
  %345 = bitcast %"class.llvm::APInt"* %31 to i8*
  %346 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %12, i64 0, i32 1
  %347 = bitcast %union.anon* %346 to i64**
  %348 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %31, i64 0, i32 1, i32 0
  %349 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %31, i64 0, i32 0
  %350 = bitcast %"class.llvm::APInt"* %32 to i8*
  %351 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %14, i64 0, i32 1
  %352 = bitcast %union.anon* %351 to i64**
  %353 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %32, i64 0, i32 1, i32 0
  %354 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %32, i64 0, i32 0
  %355 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %33, i64 0, i32 0
  %356 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %33, i64 0, i32 1, i32 0
  %357 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %33, i64 0, i32 1
  %358 = bitcast %union.anon* %357 to i8**
  %359 = bitcast %union.anon* %346 to i8**
  %360 = bitcast %union.anon* %357 to i64**
  %361 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %34, i64 0, i32 0
  %362 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %34, i64 0, i32 1, i32 0
  %363 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %34, i64 0, i32 1
  %364 = bitcast %union.anon* %363 to i8**
  %365 = bitcast %union.anon* %351 to i8**
  %366 = bitcast %union.anon* %363 to i64**
  %367 = bitcast %"class.llvm::APInt"* %35 to i8*
  %368 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %16, i64 0, i32 1
  %369 = bitcast %union.anon* %368 to i64**
  %370 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %35, i64 0, i32 1, i32 0
  %371 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %35, i64 0, i32 0
  %372 = bitcast %"class.llvm::APInt"* %36 to i8*
  %373 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %18, i64 0, i32 1
  %374 = bitcast %union.anon* %373 to i64**
  %375 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %36, i64 0, i32 1, i32 0
  %376 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %36, i64 0, i32 0
  %377 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %37, i64 0, i32 0
  %378 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %37, i64 0, i32 1, i32 0
  %379 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %37, i64 0, i32 1
  %380 = bitcast %union.anon* %379 to i8**
  %381 = bitcast %union.anon* %368 to i8**
  %382 = bitcast %union.anon* %379 to i64**
  %383 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %38, i64 0, i32 0
  %384 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %38, i64 0, i32 1, i32 0
  %385 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %38, i64 0, i32 1
  %386 = bitcast %union.anon* %385 to i8**
  %387 = bitcast %union.anon* %373 to i8**
  %388 = bitcast %union.anon* %385 to i64**
  %389 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %39, i64 0, i32 0
  %390 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %39, i64 0, i32 1, i32 0
  %391 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %39, i64 0, i32 1
  %392 = bitcast %union.anon* %391 to i8**
  %393 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 1
  %394 = bitcast %union.anon* %393 to i8**
  %395 = bitcast %union.anon* %391 to i64**
  br label %396

396:                                              ; preds = %639, %344
  %397 = phi i64* [ null, %344 ], [ %606, %639 ]
  %398 = phi i32 [ 1, %344 ], [ %586, %639 ]
  %399 = phi i32 [ %204, %344 ], [ %400, %639 ]
  %400 = add i32 %399, 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %345) #17
  call void @_ZNK4llvm5APInt3shlEj(%"class.llvm::APInt"* nonnull sret %31, %"class.llvm::APInt"* nonnull %12, i32 1) #20
  %401 = load i32, i32* %53, align 16
  %402 = icmp ult i32 %401, 65
  br i1 %402, label %408, label %403

403:                                              ; preds = %396
  %404 = load i64*, i64** %347, align 8
  %405 = icmp eq i64* %404, null
  br i1 %405, label %408, label %406

406:                                              ; preds = %403
  %407 = bitcast i64* %404 to i8*
  call void @_ZdaPv(i8* %407) #18
  br label %408

408:                                              ; preds = %406, %403, %396
  %409 = load i64, i64* %348, align 8
  store i64 %409, i64* %54, align 8
  %410 = load i32, i32* %349, align 8
  store i32 %410, i32* %53, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %345) #17
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %350) #17
  call void @_ZNK4llvm5APInt3shlEj(%"class.llvm::APInt"* nonnull sret %32, %"class.llvm::APInt"* nonnull %14, i32 1) #20
  %411 = load i32, i32* %56, align 16
  %412 = icmp ult i32 %411, 65
  br i1 %412, label %418, label %413

413:                                              ; preds = %408
  %414 = load i64*, i64** %352, align 8
  %415 = icmp eq i64* %414, null
  br i1 %415, label %418, label %416

416:                                              ; preds = %413
  %417 = bitcast i64* %414 to i8*
  call void @_ZdaPv(i8* %417) #18
  br label %418

418:                                              ; preds = %416, %413, %408
  %419 = load i64, i64* %353, align 8
  store i64 %419, i64* %57, align 8
  %420 = load i32, i32* %354, align 8
  store i32 %420, i32* %56, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %350) #17
  %421 = call zeroext i1 @_ZNK4llvm5APInt3ultERKS0_(%"class.llvm::APInt"* nonnull %14, %"class.llvm::APInt"* nonnull dereferenceable(16) %8) #20
  br i1 %421, label %486, label %422

422:                                              ; preds = %418
  %423 = load i32, i32* %53, align 16
  store i32 %423, i32* %355, align 8
  store i64 0, i64* %356, align 8
  %424 = icmp ult i32 %423, 65
  br i1 %424, label %425, label %427

425:                                              ; preds = %422
  %426 = load i64, i64* %54, align 8
  store i64 %426, i64* %356, align 8
  br label %434

427:                                              ; preds = %422
  %428 = zext i32 %423 to i64
  %429 = add nuw nsw i64 %428, 63
  %430 = lshr i64 %429, 6
  %431 = shl nuw nsw i64 %430, 3
  %432 = call i8* @_Znam(i64 %431) #18
  store i8* %432, i8** %358, align 8
  %433 = load i8*, i8** %359, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %432, i8* align 8 %433, i64 %431, i1 false) #17
  br label %434

434:                                              ; preds = %425, %427
  %435 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLEm(%"class.llvm::APInt"* nonnull %33, i64 1) #20, !noalias !58
  %436 = load i32, i32* %355, align 8, !noalias !58
  %437 = load i64, i64* %356, align 8, !noalias !58
  store i32 0, i32* %355, align 8, !noalias !58
  %438 = load i32, i32* %53, align 16
  %439 = icmp ult i32 %438, 65
  br i1 %439, label %440, label %441

440:                                              ; preds = %434
  store i64 %437, i64* %54, align 8
  store i32 %436, i32* %53, align 16
  br label %454

441:                                              ; preds = %434
  %442 = load i64*, i64** %347, align 8
  %443 = icmp eq i64* %442, null
  br i1 %443, label %444, label %445

444:                                              ; preds = %441
  store i64 %437, i64* %54, align 8
  store i32 %436, i32* %53, align 16
  br label %454

445:                                              ; preds = %441
  %446 = bitcast i64* %442 to i8*
  call void @_ZdaPv(i8* %446) #18
  %447 = load i32, i32* %355, align 8
  store i64 %437, i64* %54, align 8
  store i32 %436, i32* %53, align 16
  %448 = icmp ugt i32 %447, 64
  br i1 %448, label %449, label %454

449:                                              ; preds = %445
  %450 = load i64*, i64** %360, align 8
  %451 = icmp eq i64* %450, null
  br i1 %451, label %454, label %452

452:                                              ; preds = %449
  %453 = bitcast i64* %450 to i8*
  call void @_ZdaPv(i8* %453) #18
  br label %454

454:                                              ; preds = %444, %440, %445, %449, %452
  %455 = load i32, i32* %56, align 16
  store i32 %455, i32* %361, align 8
  store i64 0, i64* %362, align 8
  %456 = icmp ult i32 %455, 65
  br i1 %456, label %457, label %459

457:                                              ; preds = %454
  %458 = load i64, i64* %57, align 8
  store i64 %458, i64* %362, align 8
  br label %466

459:                                              ; preds = %454
  %460 = zext i32 %455 to i64
  %461 = add nuw nsw i64 %460, 63
  %462 = lshr i64 %461, 6
  %463 = shl nuw nsw i64 %462, 3
  %464 = call i8* @_Znam(i64 %463) #18
  store i8* %464, i8** %364, align 8
  %465 = load i8*, i8** %365, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %464, i8* align 8 %465, i64 %463, i1 false) #17
  br label %466

466:                                              ; preds = %457, %459
  %467 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntmIERKS0_(%"class.llvm::APInt"* nonnull %34, %"class.llvm::APInt"* nonnull dereferenceable(16) %8) #20, !noalias !61
  %468 = load i32, i32* %361, align 8, !noalias !61
  %469 = load i64, i64* %362, align 8, !noalias !61
  store i32 0, i32* %361, align 8, !noalias !61
  %470 = load i32, i32* %56, align 16
  %471 = icmp ult i32 %470, 65
  br i1 %471, label %472, label %473

472:                                              ; preds = %466
  store i64 %469, i64* %57, align 8
  store i32 %468, i32* %56, align 16
  br label %486

473:                                              ; preds = %466
  %474 = load i64*, i64** %352, align 8
  %475 = icmp eq i64* %474, null
  br i1 %475, label %476, label %477

476:                                              ; preds = %473
  store i64 %469, i64* %57, align 8
  store i32 %468, i32* %56, align 16
  br label %486

477:                                              ; preds = %473
  %478 = bitcast i64* %474 to i8*
  call void @_ZdaPv(i8* %478) #18
  %479 = load i32, i32* %361, align 8
  store i64 %469, i64* %57, align 8
  store i32 %468, i32* %56, align 16
  %480 = icmp ugt i32 %479, 64
  br i1 %480, label %481, label %486

481:                                              ; preds = %477
  %482 = load i64*, i64** %366, align 8
  %483 = icmp eq i64* %482, null
  br i1 %483, label %486, label %484

484:                                              ; preds = %481
  %485 = bitcast i64* %482 to i8*
  call void @_ZdaPv(i8* %485) #18
  br label %486

486:                                              ; preds = %476, %418, %484, %481, %477, %472
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %367) #17
  call void @_ZNK4llvm5APInt3shlEj(%"class.llvm::APInt"* nonnull sret %35, %"class.llvm::APInt"* nonnull %16, i32 1) #20
  %487 = load i32, i32* %59, align 16
  %488 = icmp ult i32 %487, 65
  br i1 %488, label %494, label %489

489:                                              ; preds = %486
  %490 = load i64*, i64** %369, align 8
  %491 = icmp eq i64* %490, null
  br i1 %491, label %494, label %492

492:                                              ; preds = %489
  %493 = bitcast i64* %490 to i8*
  call void @_ZdaPv(i8* %493) #18
  br label %494

494:                                              ; preds = %492, %489, %486
  %495 = load i64, i64* %370, align 8
  store i64 %495, i64* %60, align 8
  %496 = load i32, i32* %371, align 8
  store i32 %496, i32* %59, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %367) #17
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %372) #17
  call void @_ZNK4llvm5APInt3shlEj(%"class.llvm::APInt"* nonnull sret %36, %"class.llvm::APInt"* nonnull %18, i32 1) #20
  %497 = load i32, i32* %62, align 16
  %498 = icmp ult i32 %497, 65
  br i1 %498, label %504, label %499

499:                                              ; preds = %494
  %500 = load i64*, i64** %374, align 8
  %501 = icmp eq i64* %500, null
  br i1 %501, label %504, label %502

502:                                              ; preds = %499
  %503 = bitcast i64* %500 to i8*
  call void @_ZdaPv(i8* %503) #18
  br label %504

504:                                              ; preds = %502, %499, %494
  %505 = load i64, i64* %375, align 8
  store i64 %505, i64* %63, align 8
  %506 = load i32, i32* %376, align 8
  store i32 %506, i32* %62, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %372) #17
  %507 = call zeroext i1 @_ZNK4llvm5APInt3ultERKS0_(%"class.llvm::APInt"* nonnull %18, %"class.llvm::APInt"* nonnull dereferenceable(16) %6) #20
  br i1 %507, label %572, label %508

508:                                              ; preds = %504
  %509 = load i32, i32* %59, align 16
  store i32 %509, i32* %377, align 8
  store i64 0, i64* %378, align 8
  %510 = icmp ult i32 %509, 65
  br i1 %510, label %511, label %513

511:                                              ; preds = %508
  %512 = load i64, i64* %60, align 8
  store i64 %512, i64* %378, align 8
  br label %520

513:                                              ; preds = %508
  %514 = zext i32 %509 to i64
  %515 = add nuw nsw i64 %514, 63
  %516 = lshr i64 %515, 6
  %517 = shl nuw nsw i64 %516, 3
  %518 = call i8* @_Znam(i64 %517) #18
  store i8* %518, i8** %380, align 8
  %519 = load i8*, i8** %381, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %518, i8* align 8 %519, i64 %517, i1 false) #17
  br label %520

520:                                              ; preds = %511, %513
  %521 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLEm(%"class.llvm::APInt"* nonnull %37, i64 1) #20, !noalias !64
  %522 = load i32, i32* %377, align 8, !noalias !64
  %523 = load i64, i64* %378, align 8, !noalias !64
  store i32 0, i32* %377, align 8, !noalias !64
  %524 = load i32, i32* %59, align 16
  %525 = icmp ult i32 %524, 65
  br i1 %525, label %526, label %527

526:                                              ; preds = %520
  store i64 %523, i64* %60, align 8
  store i32 %522, i32* %59, align 16
  br label %540

527:                                              ; preds = %520
  %528 = load i64*, i64** %369, align 8
  %529 = icmp eq i64* %528, null
  br i1 %529, label %530, label %531

530:                                              ; preds = %527
  store i64 %523, i64* %60, align 8
  store i32 %522, i32* %59, align 16
  br label %540

531:                                              ; preds = %527
  %532 = bitcast i64* %528 to i8*
  call void @_ZdaPv(i8* %532) #18
  %533 = load i32, i32* %377, align 8
  store i64 %523, i64* %60, align 8
  store i32 %522, i32* %59, align 16
  %534 = icmp ugt i32 %533, 64
  br i1 %534, label %535, label %540

535:                                              ; preds = %531
  %536 = load i64*, i64** %382, align 8
  %537 = icmp eq i64* %536, null
  br i1 %537, label %540, label %538

538:                                              ; preds = %535
  %539 = bitcast i64* %536 to i8*
  call void @_ZdaPv(i8* %539) #18
  br label %540

540:                                              ; preds = %530, %526, %531, %535, %538
  %541 = load i32, i32* %62, align 16
  store i32 %541, i32* %383, align 8
  store i64 0, i64* %384, align 8
  %542 = icmp ult i32 %541, 65
  br i1 %542, label %543, label %545

543:                                              ; preds = %540
  %544 = load i64, i64* %63, align 8
  store i64 %544, i64* %384, align 8
  br label %552

545:                                              ; preds = %540
  %546 = zext i32 %541 to i64
  %547 = add nuw nsw i64 %546, 63
  %548 = lshr i64 %547, 6
  %549 = shl nuw nsw i64 %548, 3
  %550 = call i8* @_Znam(i64 %549) #18
  store i8* %550, i8** %386, align 8
  %551 = load i8*, i8** %387, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %550, i8* align 8 %551, i64 %549, i1 false) #17
  br label %552

552:                                              ; preds = %543, %545
  %553 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntmIERKS0_(%"class.llvm::APInt"* nonnull %38, %"class.llvm::APInt"* nonnull dereferenceable(16) %6) #20, !noalias !67
  %554 = load i32, i32* %383, align 8, !noalias !67
  %555 = load i64, i64* %384, align 8, !noalias !67
  store i32 0, i32* %383, align 8, !noalias !67
  %556 = load i32, i32* %62, align 16
  %557 = icmp ult i32 %556, 65
  br i1 %557, label %558, label %559

558:                                              ; preds = %552
  store i64 %555, i64* %63, align 8
  store i32 %554, i32* %62, align 16
  br label %572

559:                                              ; preds = %552
  %560 = load i64*, i64** %374, align 8
  %561 = icmp eq i64* %560, null
  br i1 %561, label %562, label %563

562:                                              ; preds = %559
  store i64 %555, i64* %63, align 8
  store i32 %554, i32* %62, align 16
  br label %572

563:                                              ; preds = %559
  %564 = bitcast i64* %560 to i8*
  call void @_ZdaPv(i8* %564) #18
  %565 = load i32, i32* %383, align 8
  store i64 %555, i64* %63, align 8
  store i32 %554, i32* %62, align 16
  %566 = icmp ugt i32 %565, 64
  br i1 %566, label %567, label %572

567:                                              ; preds = %563
  %568 = load i64*, i64** %388, align 8
  %569 = icmp eq i64* %568, null
  br i1 %569, label %572, label %570

570:                                              ; preds = %567
  %571 = bitcast i64* %568 to i8*
  call void @_ZdaPv(i8* %571) #18
  br label %572

572:                                              ; preds = %562, %504, %570, %567, %563, %558
  %573 = load i32, i32* %44, align 8
  store i32 %573, i32* %389, align 8
  store i64 0, i64* %390, align 8
  %574 = icmp ult i32 %573, 65
  br i1 %574, label %575, label %577

575:                                              ; preds = %572
  %576 = load i64, i64* %45, align 8
  store i64 %576, i64* %390, align 8
  br label %584

577:                                              ; preds = %572
  %578 = zext i32 %573 to i64
  %579 = add nuw nsw i64 %578, 63
  %580 = lshr i64 %579, 6
  %581 = shl nuw nsw i64 %580, 3
  %582 = call i8* @_Znam(i64 %581) #18
  store i8* %582, i8** %392, align 8
  %583 = load i8*, i8** %394, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %582, i8* align 8 %583, i64 %581, i1 false) #17
  br label %584

584:                                              ; preds = %575, %577
  %585 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntmIERKS0_(%"class.llvm::APInt"* nonnull %39, %"class.llvm::APInt"* nonnull dereferenceable(16) %18) #20, !noalias !70
  %586 = load i32, i32* %389, align 8, !noalias !70
  %587 = load i64, i64* %390, align 8, !noalias !70
  store i32 0, i32* %389, align 8, !noalias !70
  %588 = icmp ult i32 %398, 65
  br i1 %588, label %589, label %591

589:                                              ; preds = %584
  store i64 %587, i64* %51, align 8
  store i32 %586, i32* %50, align 16
  %590 = inttoptr i64 %587 to i64*
  br label %605

591:                                              ; preds = %584
  %592 = icmp eq i64* %397, null
  br i1 %592, label %593, label %595

593:                                              ; preds = %591
  store i64 %587, i64* %51, align 8
  store i32 %586, i32* %50, align 16
  %594 = inttoptr i64 %587 to i64*
  br label %605

595:                                              ; preds = %591
  %596 = bitcast i64* %397 to i8*
  call void @_ZdaPv(i8* %596) #18
  %597 = load i32, i32* %389, align 8
  store i64 %587, i64* %51, align 8
  store i32 %586, i32* %50, align 16
  %598 = icmp ugt i32 %597, 64
  %599 = inttoptr i64 %587 to i64*
  br i1 %598, label %600, label %605

600:                                              ; preds = %595
  %601 = load i64*, i64** %395, align 8
  %602 = icmp eq i64* %601, null
  br i1 %602, label %605, label %603

603:                                              ; preds = %600
  %604 = bitcast i64* %601 to i8*
  call void @_ZdaPv(i8* %604) #18
  br label %605

605:                                              ; preds = %593, %589, %595, %600, %603
  %606 = phi i64* [ %590, %589 ], [ %599, %595 ], [ %599, %600 ], [ %599, %603 ], [ %594, %593 ]
  %607 = call zeroext i1 @_ZNK4llvm5APInt3ultERKS0_(%"class.llvm::APInt"* nonnull %12, %"class.llvm::APInt"* nonnull dereferenceable(16) %10) #19
  br i1 %607, label %639, label %608

608:                                              ; preds = %605
  %609 = load i32, i32* %53, align 16
  %610 = icmp ult i32 %609, 65
  br i1 %610, label %628, label %611

611:                                              ; preds = %608
  %612 = load i64*, i64** %347, align 8
  %613 = zext i32 %609 to i64
  %614 = add nuw nsw i64 %613, 63
  %615 = lshr i64 %614, 6
  %616 = getelementptr inbounds i64, i64* %612, i64 %615
  %617 = icmp eq i64 %615, 0
  br i1 %617, label %631, label %618

618:                                              ; preds = %611, %624
  %619 = phi i64* [ %626, %624 ], [ %606, %611 ]
  %620 = phi i64* [ %625, %624 ], [ %612, %611 ]
  %621 = load i64, i64* %620, align 8
  %622 = load i64, i64* %619, align 8
  %623 = icmp eq i64 %621, %622
  br i1 %623, label %624, label %640

624:                                              ; preds = %618
  %625 = getelementptr inbounds i64, i64* %620, i64 1
  %626 = getelementptr inbounds i64, i64* %619, i64 1
  %627 = icmp eq i64* %625, %616
  br i1 %627, label %631, label %618

628:                                              ; preds = %608
  %629 = load i64, i64* %54, align 8
  %630 = icmp eq i64 %629, %587
  br i1 %630, label %631, label %640

631:                                              ; preds = %624, %611, %628
  %632 = load i32, i32* %56, align 16
  %633 = icmp ult i32 %632, 65
  br i1 %633, label %634, label %637

634:                                              ; preds = %631
  %635 = load i64, i64* %57, align 8
  %636 = icmp eq i64 %635, 0
  br i1 %636, label %639, label %640

637:                                              ; preds = %631
  %638 = call zeroext i1 @_ZNK4llvm5APInt13EqualSlowCaseEm(%"class.llvm::APInt"* nonnull %14, i64 0) #20
  br i1 %638, label %639, label %640

639:                                              ; preds = %637, %605, %634
  br label %396

640:                                              ; preds = %634, %628, %637, %618
  %641 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %40, i64 0, i32 0
  %642 = load i32, i32* %59, align 16
  store i32 %642, i32* %641, align 8
  %643 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %40, i64 0, i32 1, i32 0
  store i64 0, i64* %643, align 8
  %644 = icmp ult i32 %642, 65
  br i1 %644, label %645, label %647

645:                                              ; preds = %640
  %646 = load i64, i64* %60, align 8
  store i64 %646, i64* %643, align 8
  br label %656

647:                                              ; preds = %640
  %648 = zext i32 %642 to i64
  %649 = add nuw nsw i64 %648, 63
  %650 = lshr i64 %649, 6
  %651 = shl nuw nsw i64 %650, 3
  %652 = call i8* @_Znam(i64 %651) #18
  %653 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %40, i64 0, i32 1
  %654 = bitcast %union.anon* %653 to i8**
  store i8* %652, i8** %654, align 8
  %655 = load i8*, i8** %381, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %652, i8* align 8 %655, i64 %651, i1 false) #17
  br label %656

656:                                              ; preds = %645, %647
  %657 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLEm(%"class.llvm::APInt"* nonnull %40, i64 1) #20, !noalias !73
  %658 = load i32, i32* %641, align 8, !noalias !73
  %659 = load i64, i64* %643, align 8, !noalias !73
  store i32 0, i32* %641, align 8, !noalias !73
  store i64 %659, i64* %72, align 8
  store i32 %658, i32* %71, align 8
  %660 = inttoptr i64 %659 to i8*
  %661 = load i32, i32* %68, align 8
  %662 = add i32 %661, -1
  %663 = and i32 %662, 63
  %664 = zext i32 %663 to i64
  %665 = shl i64 1, %664
  %666 = icmp ult i32 %661, 65
  %667 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  br i1 %666, label %668, label %670

668:                                              ; preds = %656
  %669 = getelementptr inbounds %union.anon, %union.anon* %667, i64 0, i32 0
  br label %676

670:                                              ; preds = %656
  %671 = bitcast %union.anon* %667 to i64**
  %672 = load i64*, i64** %671, align 8
  %673 = lshr i32 %662, 6
  %674 = zext i32 %673 to i64
  %675 = getelementptr inbounds i64, i64* %672, i64 %674
  br label %676

676:                                              ; preds = %668, %670
  %677 = phi i64* [ %669, %668 ], [ %675, %670 ]
  %678 = load i64, i64* %677, align 8
  %679 = and i64 %678, %665
  %680 = icmp eq i64 %679, 0
  br i1 %680, label %714, label %681

681:                                              ; preds = %676
  %682 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %41, i64 0, i32 0
  store i32 %658, i32* %682, align 8
  %683 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %41, i64 0, i32 1, i32 0
  store i64 0, i64* %683, align 8
  %684 = icmp ult i32 %658, 65
  br i1 %684, label %685, label %686

685:                                              ; preds = %681
  store i64 %659, i64* %683, align 8
  br label %694

686:                                              ; preds = %681
  %687 = zext i32 %658 to i64
  %688 = add nuw nsw i64 %687, 63
  %689 = lshr i64 %688, 6
  %690 = shl nuw nsw i64 %689, 3
  %691 = call i8* @_Znam(i64 %690) #18
  %692 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %41, i64 0, i32 1
  %693 = bitcast %union.anon* %692 to i8**
  store i8* %691, i8** %693, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %691, i8* align 8 %660, i64 %690, i1 false) #17
  br label %694

694:                                              ; preds = %685, %686
  call void @_ZN4llvm5APInt11flipAllBitsEv(%"class.llvm::APInt"* nonnull %41) #20, !noalias !76
  %695 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntppEv(%"class.llvm::APInt"* nonnull %41) #20, !noalias !76
  %696 = load i32, i32* %682, align 8, !noalias !76
  %697 = load i64, i64* %683, align 8, !noalias !76
  store i32 0, i32* %682, align 8, !noalias !76
  %698 = icmp eq i64 %659, 0
  %699 = or i1 %684, %698
  br i1 %699, label %700, label %701

700:                                              ; preds = %694
  store i64 %697, i64* %72, align 8
  store i32 %696, i32* %71, align 8
  br label %712

701:                                              ; preds = %694
  %702 = inttoptr i64 %659 to i8*
  call void @_ZdaPv(i8* %702) #18
  %703 = load i32, i32* %682, align 8
  store i64 %697, i64* %72, align 8
  store i32 %696, i32* %71, align 8
  %704 = icmp ugt i32 %703, 64
  br i1 %704, label %705, label %712

705:                                              ; preds = %701
  %706 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %41, i64 0, i32 1
  %707 = bitcast %union.anon* %706 to i64**
  %708 = load i64*, i64** %707, align 8
  %709 = icmp eq i64* %708, null
  br i1 %709, label %712, label %710

710:                                              ; preds = %705
  %711 = bitcast i64* %708 to i8*
  call void @_ZdaPv(i8* %711) #18
  br label %712

712:                                              ; preds = %700, %701, %705, %710
  %713 = load i32, i32* %68, align 8
  br label %714

714:                                              ; preds = %676, %712
  %715 = phi i32 [ %661, %676 ], [ %713, %712 ]
  %716 = sub i32 %400, %715
  %717 = getelementptr inbounds %"struct.llvm::APInt::ms", %"struct.llvm::APInt::ms"* %0, i64 0, i32 1
  store i32 %716, i32* %717, align 8
  %718 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %21, i64 0, i32 0
  %719 = load i32, i32* %718, align 8
  %720 = icmp ugt i32 %719, 64
  br i1 %720, label %721, label %728

721:                                              ; preds = %714
  %722 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %21, i64 0, i32 1
  %723 = bitcast %union.anon* %722 to i64**
  %724 = load i64*, i64** %723, align 8
  %725 = icmp eq i64* %724, null
  br i1 %725, label %728, label %726

726:                                              ; preds = %721
  %727 = bitcast i64* %724 to i8*
  call void @_ZdaPv(i8* %727) #18
  br label %728

728:                                              ; preds = %714, %721, %726
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %67) #17
  %729 = load i32, i32* %65, align 16
  %730 = icmp ugt i32 %729, 64
  br i1 %730, label %731, label %738

731:                                              ; preds = %728
  %732 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %20, i64 0, i32 1
  %733 = bitcast %union.anon* %732 to i64**
  %734 = load i64*, i64** %733, align 8
  %735 = icmp eq i64* %734, null
  br i1 %735, label %738, label %736

736:                                              ; preds = %731
  %737 = bitcast i64* %734 to i8*
  call void @_ZdaPv(i8* %737) #18
  br label %738

738:                                              ; preds = %728, %731, %736
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %64) #17
  %739 = load i32, i32* %62, align 16
  %740 = icmp ugt i32 %739, 64
  br i1 %740, label %741, label %746

741:                                              ; preds = %738
  %742 = load i64*, i64** %374, align 8
  %743 = icmp eq i64* %742, null
  br i1 %743, label %746, label %744

744:                                              ; preds = %741
  %745 = bitcast i64* %742 to i8*
  call void @_ZdaPv(i8* %745) #18
  br label %746

746:                                              ; preds = %738, %741, %744
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %61) #17
  %747 = load i32, i32* %59, align 16
  %748 = icmp ugt i32 %747, 64
  br i1 %748, label %749, label %754

749:                                              ; preds = %746
  %750 = load i64*, i64** %369, align 8
  %751 = icmp eq i64* %750, null
  br i1 %751, label %754, label %752

752:                                              ; preds = %749
  %753 = bitcast i64* %750 to i8*
  call void @_ZdaPv(i8* %753) #18
  br label %754

754:                                              ; preds = %746, %749, %752
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %58) #17
  %755 = load i32, i32* %56, align 16
  %756 = icmp ugt i32 %755, 64
  br i1 %756, label %757, label %762

757:                                              ; preds = %754
  %758 = load i64*, i64** %352, align 8
  %759 = icmp eq i64* %758, null
  br i1 %759, label %762, label %760

760:                                              ; preds = %757
  %761 = bitcast i64* %758 to i8*
  call void @_ZdaPv(i8* %761) #18
  br label %762

762:                                              ; preds = %754, %757, %760
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %55) #17
  %763 = load i32, i32* %53, align 16
  %764 = icmp ugt i32 %763, 64
  br i1 %764, label %765, label %770

765:                                              ; preds = %762
  %766 = load i64*, i64** %347, align 8
  %767 = icmp eq i64* %766, null
  br i1 %767, label %770, label %768

768:                                              ; preds = %765
  %769 = bitcast i64* %766 to i8*
  call void @_ZdaPv(i8* %769) #18
  br label %770

770:                                              ; preds = %762, %765, %768
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %52) #17
  %771 = icmp ult i32 %586, 65
  %772 = icmp eq i64* %606, null
  %773 = or i1 %771, %772
  br i1 %773, label %776, label %774

774:                                              ; preds = %770
  %775 = bitcast i64* %606 to i8*
  call void @_ZdaPv(i8* %775) #18
  br label %776

776:                                              ; preds = %770, %774
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %49) #17
  %777 = load i32, i32* %47, align 16
  %778 = icmp ugt i32 %777, 64
  br i1 %778, label %779, label %786

779:                                              ; preds = %776
  %780 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %8, i64 0, i32 1
  %781 = bitcast %union.anon* %780 to i64**
  %782 = load i64*, i64** %781, align 8
  %783 = icmp eq i64* %782, null
  br i1 %783, label %786, label %784

784:                                              ; preds = %779
  %785 = bitcast i64* %782 to i8*
  call void @_ZdaPv(i8* %785) #18
  br label %786

786:                                              ; preds = %776, %779, %784
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %46) #17
  %787 = load i32, i32* %44, align 8
  %788 = icmp ugt i32 %787, 64
  br i1 %788, label %789, label %795

789:                                              ; preds = %786
  %790 = bitcast %union.anon* %393 to i64**
  %791 = load i64*, i64** %790, align 8
  %792 = icmp eq i64* %791, null
  br i1 %792, label %795, label %793

793:                                              ; preds = %789
  %794 = bitcast i64* %791 to i8*
  call void @_ZdaPv(i8* %794) #18
  br label %795

795:                                              ; preds = %786, %789, %793
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %42) #17
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm5APInt17getSignedMinValueEj(%"class.llvm::APInt"* noalias sret, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.llvm::APInt"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 -86, i64 16, i1 false)
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %1, i64 0, i1 zeroext false) #19
  %4 = add i32 %1, -1
  %5 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp ult i32 %6, 65
  %8 = and i32 %4, 63
  %9 = zext i32 %8 to i64
  %10 = shl i64 1, %9
  %11 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %13 = bitcast %union.anon* %11 to i64**
  %14 = load i64*, i64** %13, align 8
  %15 = lshr i32 %4, 6
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds i64, i64* %14, i64 %16
  %18 = select i1 %7, i64* %12, i64* %17
  %19 = select i1 %7, i64* %12, i64* %17
  %20 = load i64, i64* %18, align 8
  %21 = or i64 %20, %10
  store i64 %21, i64* %19, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNK4llvm5APInt3absEv(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.llvm::APInt", align 8
  %4 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = add i32 %5, -1
  %7 = and i32 %6, 63
  %8 = zext i32 %7 to i64
  %9 = shl i64 1, %8
  %10 = icmp ult i32 %5, 65
  %11 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  br i1 %10, label %12, label %14

12:                                               ; preds = %2
  %13 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  br label %20

14:                                               ; preds = %2
  %15 = bitcast %union.anon* %11 to i64**
  %16 = load i64*, i64** %15, align 8
  %17 = lshr i32 %6, 6
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds i64, i64* %16, i64 %18
  br label %20

20:                                               ; preds = %12, %14
  %21 = phi i64* [ %13, %12 ], [ %19, %14 ]
  %22 = load i64, i64* %21, align 8
  %23 = and i64 %22, %9
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %47, label %25

25:                                               ; preds = %20
  %26 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 0
  store i32 %5, i32* %26, align 8
  %27 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 1, i32 0
  store i64 0, i64* %27, align 8
  br i1 %10, label %28, label %31

28:                                               ; preds = %25
  %29 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %27, align 8
  br label %41

31:                                               ; preds = %25
  %32 = zext i32 %5 to i64
  %33 = add nuw nsw i64 %32, 63
  %34 = lshr i64 %33, 6
  %35 = shl nuw nsw i64 %34, 3
  %36 = tail call i8* @_Znam(i64 %35) #18
  %37 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 1
  %38 = bitcast %union.anon* %37 to i8**
  store i8* %36, i8** %38, align 8
  %39 = bitcast %union.anon* %11 to i8**
  %40 = load i8*, i8** %39, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %36, i8* align 8 %40, i64 %35, i1 false) #17
  br label %41

41:                                               ; preds = %31, %28
  call void @_ZN4llvm5APInt11flipAllBitsEv(%"class.llvm::APInt"* nonnull %3) #20, !noalias !79
  %42 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntppEv(%"class.llvm::APInt"* nonnull %3) #20, !noalias !79
  %43 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %44 = load i32, i32* %26, align 8, !noalias !79
  store i32 %44, i32* %43, align 8, !alias.scope !79
  %45 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %46 = load i64, i64* %27, align 8, !noalias !79
  store i64 %46, i64* %45, align 8, !alias.scope !79
  store i32 0, i32* %26, align 8, !noalias !79
  br label %48

47:                                               ; preds = %20
  tail call void @_ZN4llvm5APIntC2ERKS0_(%"class.llvm::APInt"* %0, %"class.llvm::APInt"* dereferenceable(16) %1) #19
  br label %48

48:                                               ; preds = %47, %41
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt4uremERKS0_(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"*, %"class.llvm::APInt"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %4 = alloca <2 x i64>, align 16
  %5 = bitcast <2 x i64>* %4 to %"class.llvm::APInt"*
  %6 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp ult i32 %7, 65
  br i1 %8, label %9, label %15

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = urem i64 %11, %13
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %7, i64 %14, i1 zeroext false) #19
  br label %79

15:                                               ; preds = %3
  %16 = tail call i32 @_ZNK4llvm5APInt25countLeadingZerosSlowCaseEv(%"class.llvm::APInt"* %1) #20
  %17 = sub i32 %7, %16
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %15
  %20 = add i32 %17, -1
  %21 = lshr i32 %20, 6
  %22 = add nuw nsw i32 %21, 1
  br label %23

23:                                               ; preds = %15, %19
  %24 = phi i32 [ %22, %19 ], [ 0, %15 ]
  %25 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 0
  %26 = load i32, i32* %25, align 8
  %27 = icmp ult i32 %26, 65
  br i1 %27, label %28, label %35

28:                                               ; preds = %23
  %29 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1, i32 0
  %30 = load i64, i64* %29, align 8
  %31 = tail call i64 @llvm.ctlz.i64(i64 %30, i1 false) #17, !range !2
  %32 = trunc i64 %31 to i32
  %33 = add nsw i32 %26, -64
  %34 = add i32 %33, %32
  br label %37

35:                                               ; preds = %23
  %36 = tail call i32 @_ZNK4llvm5APInt25countLeadingZerosSlowCaseEv(%"class.llvm::APInt"* %2) #20
  br label %37

37:                                               ; preds = %28, %35
  %38 = phi i32 [ %34, %28 ], [ %36, %35 ]
  %39 = sub i32 %26, %38
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %45, label %41

41:                                               ; preds = %37
  %42 = add i32 %39, -1
  %43 = lshr i32 %42, 6
  %44 = add nuw nsw i32 %43, 1
  br label %45

45:                                               ; preds = %37, %41
  %46 = phi i32 [ %44, %41 ], [ 0, %37 ]
  %47 = icmp eq i32 %24, 0
  br i1 %47, label %48, label %49

48:                                               ; preds = %45
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %7, i64 0, i1 zeroext false) #19
  br label %79

49:                                               ; preds = %45
  %50 = icmp ult i32 %24, %46
  br i1 %50, label %53, label %51

51:                                               ; preds = %49
  %52 = tail call zeroext i1 @_ZNK4llvm5APInt3ultERKS0_(%"class.llvm::APInt"* %1, %"class.llvm::APInt"* dereferenceable(16) %2) #19
  br i1 %52, label %53, label %54

53:                                               ; preds = %51, %49
  tail call void @_ZN4llvm5APIntC2ERKS0_(%"class.llvm::APInt"* %0, %"class.llvm::APInt"* dereferenceable(16) %1) #19
  br label %79

54:                                               ; preds = %51
  %55 = tail call zeroext i1 @_ZNK4llvm5APInteqERKS0_(%"class.llvm::APInt"* %1, %"class.llvm::APInt"* dereferenceable(16) %2) #19
  br i1 %55, label %56, label %58

56:                                               ; preds = %54
  %57 = load i32, i32* %6, align 8
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %57, i64 0, i1 zeroext false) #19
  br label %79

58:                                               ; preds = %54
  %59 = icmp eq i32 %24, 1
  br i1 %59, label %60, label %71

60:                                               ; preds = %58
  %61 = load i32, i32* %6, align 8
  %62 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %63 = bitcast %union.anon* %62 to i64**
  %64 = load i64*, i64** %63, align 8
  %65 = load i64, i64* %64, align 8
  %66 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1
  %67 = bitcast %union.anon* %66 to i64**
  %68 = load i64*, i64** %67, align 8
  %69 = load i64, i64* %68, align 8
  %70 = urem i64 %65, %69
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %61, i64 %70, i1 zeroext false) #19
  br label %79

71:                                               ; preds = %58
  %72 = bitcast <2 x i64>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %72) #17
  %73 = bitcast <2 x i64>* %4 to i32*
  %74 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1, i32 0
  store <2 x i64> <i64 -6148914691236517206, i64 0>, <2 x i64>* %4, align 16
  store i32 1, i32* %73, align 16
  call void @_ZN4llvm5APInt6divideERKS0_jS2_jPS0_S3_(%"class.llvm::APInt"* dereferenceable(16) %1, i32 %24, %"class.llvm::APInt"* dereferenceable(16) %2, i32 %46, %"class.llvm::APInt"* null, %"class.llvm::APInt"* nonnull %5) #19
  %75 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %76 = load i32, i32* %73, align 16
  store i32 %76, i32* %75, align 8
  %77 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %78 = load i64, i64* %74, align 8
  store i64 %78, i64* %77, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %72) #17
  br label %79

79:                                               ; preds = %48, %53, %56, %60, %71, %9
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt6magicuEj(%"struct.llvm::APInt::mu"* noalias sret, %"class.llvm::APInt"*, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.llvm::APInt", align 8
  %5 = alloca %"class.llvm::APInt", align 8
  %6 = alloca %"class.llvm::APInt", align 8
  %7 = alloca <2 x i64>, align 16
  %8 = bitcast <2 x i64>* %7 to %"class.llvm::APInt"*
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to %"class.llvm::APInt"*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to %"class.llvm::APInt"*
  %13 = alloca <2 x i64>, align 16
  %14 = bitcast <2 x i64>* %13 to %"class.llvm::APInt"*
  %15 = alloca <2 x i64>, align 16
  %16 = bitcast <2 x i64>* %15 to %"class.llvm::APInt"*
  %17 = alloca <2 x i64>, align 16
  %18 = bitcast <2 x i64>* %17 to %"class.llvm::APInt"*
  %19 = alloca %"class.llvm::APInt", align 8
  %20 = alloca %"class.llvm::APInt", align 8
  %21 = alloca %"class.llvm::APInt", align 8
  %22 = alloca %"class.llvm::APInt", align 8
  %23 = alloca %"class.llvm::APInt", align 8
  %24 = alloca %"class.llvm::APInt", align 8
  %25 = alloca %"class.llvm::APInt", align 8
  %26 = alloca %"class.llvm::APInt", align 8
  %27 = alloca %"class.llvm::APInt", align 8
  %28 = alloca %"class.llvm::APInt", align 8
  %29 = alloca %"class.llvm::APInt", align 8
  %30 = alloca %"class.llvm::APInt", align 8
  %31 = alloca %"class.llvm::APInt", align 8
  %32 = alloca %"class.llvm::APInt", align 8
  %33 = alloca %"class.llvm::APInt", align 8
  %34 = alloca %"class.llvm::APInt", align 8
  %35 = alloca %"class.llvm::APInt", align 8
  %36 = alloca %"class.llvm::APInt", align 8
  %37 = alloca %"class.llvm::APInt", align 8
  %38 = alloca %"class.llvm::APInt", align 8
  %39 = alloca %"class.llvm::APInt", align 8
  %40 = alloca %"class.llvm::APInt", align 8
  %41 = alloca %"class.llvm::APInt", align 8
  %42 = alloca %"class.llvm::APInt", align 8
  %43 = alloca %"class.llvm::APInt", align 8
  %44 = alloca %"class.llvm::APInt", align 8
  %45 = alloca %"class.llvm::APInt", align 8
  %46 = alloca %"class.llvm::APInt", align 8
  %47 = alloca %"class.llvm::APInt", align 8
  %48 = alloca %"class.llvm::APInt", align 8
  %49 = alloca %"class.llvm::APInt", align 8
  %50 = alloca %"class.llvm::APInt", align 8
  %51 = alloca %"class.llvm::APInt", align 8
  %52 = alloca %"class.llvm::APInt", align 8
  %53 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %53) #17
  %54 = bitcast <2 x i64>* %7 to i32*
  %55 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %8, i64 0, i32 1, i32 0
  store <2 x i64> <i64 -6148914691236517206, i64 0>, <2 x i64>* %7, align 16
  store i32 1, i32* %54, align 16
  %56 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %56) #17
  %57 = bitcast <2 x i64>* %9 to i32*
  %58 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %10, i64 0, i32 1, i32 0
  store <2 x i64> <i64 -6148914691236517206, i64 0>, <2 x i64>* %9, align 16
  store i32 1, i32* %57, align 16
  %59 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %59) #17
  %60 = bitcast <2 x i64>* %11 to i32*
  %61 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %12, i64 0, i32 1, i32 0
  store <2 x i64> <i64 -6148914691236517206, i64 0>, <2 x i64>* %11, align 16
  store i32 1, i32* %60, align 16
  %62 = bitcast <2 x i64>* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %62) #17
  %63 = bitcast <2 x i64>* %13 to i32*
  %64 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %14, i64 0, i32 1, i32 0
  store <2 x i64> <i64 -6148914691236517206, i64 0>, <2 x i64>* %13, align 16
  store i32 1, i32* %63, align 16
  %65 = bitcast <2 x i64>* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %65) #17
  %66 = bitcast <2 x i64>* %15 to i32*
  %67 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %16, i64 0, i32 1, i32 0
  store <2 x i64> <i64 -6148914691236517206, i64 0>, <2 x i64>* %15, align 16
  store i32 1, i32* %66, align 16
  %68 = bitcast <2 x i64>* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %68) #17
  %69 = bitcast <2 x i64>* %17 to i32*
  %70 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %18, i64 0, i32 1, i32 0
  store <2 x i64> <i64 -6148914691236517206, i64 0>, <2 x i64>* %17, align 16
  store i32 1, i32* %69, align 16
  %71 = bitcast %"struct.llvm::APInt::mu"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %71, i8 -86, i64 24, i1 false)
  %72 = getelementptr inbounds %"struct.llvm::APInt::mu", %"struct.llvm::APInt::mu"* %0, i64 0, i32 0, i32 0
  store i32 1, i32* %72, align 8
  %73 = getelementptr inbounds %"struct.llvm::APInt::mu", %"struct.llvm::APInt::mu"* %0, i64 0, i32 0, i32 1, i32 0
  store i64 0, i64* %73, align 8
  %74 = getelementptr inbounds %"struct.llvm::APInt::mu", %"struct.llvm::APInt::mu"* %0, i64 0, i32 1
  store i8 0, i8* %74, align 8
  %75 = bitcast %"class.llvm::APInt"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %75) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %75, i8 -86, i64 16, i1 false)
  %76 = bitcast %"class.llvm::APInt"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %76) #17
  %77 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %78 = load i32, i32* %77, align 8
  call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* nonnull %20, i32 %78, i64 -1, i1 zeroext true) #20
  call void @_ZNK4llvm5APInt4lshrEj(%"class.llvm::APInt"* nonnull sret %19, %"class.llvm::APInt"* nonnull %20, i32 %2) #19
  %79 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %20, i64 0, i32 0
  %80 = load i32, i32* %79, align 8
  %81 = icmp ugt i32 %80, 64
  br i1 %81, label %82, label %89

82:                                               ; preds = %3
  %83 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %20, i64 0, i32 1
  %84 = bitcast %union.anon* %83 to i64**
  %85 = load i64*, i64** %84, align 8
  %86 = icmp eq i64* %85, null
  br i1 %86, label %89, label %87

87:                                               ; preds = %82
  %88 = bitcast i64* %85 to i8*
  call void @_ZdaPv(i8* %88) #18
  br label %89

89:                                               ; preds = %3, %82, %87
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %76) #17
  %90 = bitcast %"class.llvm::APInt"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %90) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %90, i8 -86, i64 16, i1 false)
  %91 = load i32, i32* %77, align 8
  call void @_ZN4llvm5APInt17getSignedMinValueEj(%"class.llvm::APInt"* nonnull sret %21, i32 %91) #19
  %92 = bitcast %"class.llvm::APInt"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %92) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %92, i8 -86, i64 16, i1 false)
  %93 = load i32, i32* %77, align 8
  call void @_ZN4llvm5APInt17getSignedMaxValueEj(%"class.llvm::APInt"* nonnull sret %22, i32 %93) #19
  %94 = bitcast %"class.llvm::APInt"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %94) #17
  %95 = bitcast %"class.llvm::APInt"* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %95) #17
  %96 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %25, i64 0, i32 0
  %97 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %19, i64 0, i32 0
  %98 = load i32, i32* %97, align 8
  store i32 %98, i32* %96, align 8
  %99 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %25, i64 0, i32 1, i32 0
  store i64 0, i64* %99, align 8
  %100 = icmp ult i32 %98, 65
  br i1 %100, label %101, label %104

101:                                              ; preds = %89
  %102 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %19, i64 0, i32 1, i32 0
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %99, align 8
  br label %115

104:                                              ; preds = %89
  %105 = zext i32 %98 to i64
  %106 = add nuw nsw i64 %105, 63
  %107 = lshr i64 %106, 6
  %108 = shl nuw nsw i64 %107, 3
  %109 = call i8* @_Znam(i64 %108) #18
  %110 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %25, i64 0, i32 1
  %111 = bitcast %union.anon* %110 to i8**
  store i8* %109, i8** %111, align 8
  %112 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %19, i64 0, i32 1
  %113 = bitcast %union.anon* %112 to i8**
  %114 = load i8*, i8** %113, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %109, i8* align 8 %114, i64 %108, i1 false) #17
  br label %115

115:                                              ; preds = %101, %104
  %116 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntmIERKS0_(%"class.llvm::APInt"* nonnull %25, %"class.llvm::APInt"* dereferenceable(16) %1) #20, !noalias !82
  %117 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %24, i64 0, i32 0
  %118 = load i32, i32* %96, align 8, !noalias !82
  store i32 %118, i32* %117, align 8, !alias.scope !82
  %119 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %24, i64 0, i32 1, i32 0
  %120 = load i64, i64* %99, align 8, !noalias !82
  store i64 %120, i64* %119, align 8, !alias.scope !82
  store i32 0, i32* %96, align 8, !noalias !82
  call void @_ZNK4llvm5APInt4uremERKS0_(%"class.llvm::APInt"* nonnull sret %23, %"class.llvm::APInt"* nonnull %24, %"class.llvm::APInt"* dereferenceable(16) %1) #19
  %121 = bitcast %"class.llvm::APInt"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %121)
  %122 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 0
  %123 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %23, i64 0, i32 0
  %124 = load i32, i32* %123, align 8, !noalias !85
  store i32 %124, i32* %122, align 8, !noalias !85
  %125 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 1, i32 0
  %126 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %23, i64 0, i32 1, i32 0
  %127 = load i64, i64* %126, align 8, !noalias !85
  store i64 %127, i64* %125, align 8, !noalias !85
  store i32 0, i32* %123, align 8, !noalias !85
  call void @_ZN4llvm5APInt11flipAllBitsEv(%"class.llvm::APInt"* nonnull %6) #20, !noalias !88
  %128 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntppEv(%"class.llvm::APInt"* nonnull %6) #20, !noalias !88
  %129 = load i32, i32* %122, align 8, !noalias !88
  %130 = load i64, i64* %125, align 8, !noalias !88
  store i32 0, i32* %122, align 8, !noalias !88
  %131 = load i32, i32* %123, align 8, !noalias !85
  %132 = icmp ult i32 %131, 65
  br i1 %132, label %138, label %133

133:                                              ; preds = %115
  %134 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %23, i64 0, i32 1
  %135 = bitcast %union.anon* %134 to i64**
  %136 = load i64*, i64** %135, align 8, !noalias !85
  %137 = icmp eq i64* %136, null
  br i1 %137, label %138, label %139

138:                                              ; preds = %133, %115
  store i64 %130, i64* %126, align 8, !noalias !85
  store i32 %129, i32* %123, align 8, !noalias !85
  br label %150

139:                                              ; preds = %133
  %140 = bitcast i64* %136 to i8*
  call void @_ZdaPv(i8* %140) #18, !noalias !85
  %141 = load i32, i32* %122, align 8, !noalias !85
  %142 = icmp ugt i32 %141, 64
  store i64 %130, i64* %126, align 8, !noalias !85
  store i32 %129, i32* %123, align 8, !noalias !85
  br i1 %142, label %143, label %150

143:                                              ; preds = %139
  %144 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 1
  %145 = bitcast %union.anon* %144 to i64**
  %146 = load i64*, i64** %145, align 8, !noalias !85
  %147 = icmp eq i64* %146, null
  br i1 %147, label %150, label %148

148:                                              ; preds = %143
  %149 = bitcast i64* %146 to i8*
  call void @_ZdaPv(i8* %149) #18, !noalias !85
  br label %150

150:                                              ; preds = %138, %139, %143, %148
  %151 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLERKS0_(%"class.llvm::APInt"* nonnull %23, %"class.llvm::APInt"* nonnull dereferenceable(16) %19) #20, !noalias !85
  %152 = load i32, i32* %123, align 8, !noalias !85
  %153 = load i64, i64* %126, align 8, !noalias !85
  store i32 0, i32* %123, align 8, !noalias !85
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %121)
  %154 = load i32, i32* %54, align 16
  %155 = icmp ult i32 %154, 65
  br i1 %155, label %156, label %157

156:                                              ; preds = %150
  store i64 %153, i64* %55, align 8
  store i32 %152, i32* %54, align 16
  br label %174

157:                                              ; preds = %150
  %158 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %8, i64 0, i32 1
  %159 = bitcast %union.anon* %158 to i64**
  %160 = load i64*, i64** %159, align 8
  %161 = icmp eq i64* %160, null
  br i1 %161, label %162, label %163

162:                                              ; preds = %157
  store i64 %153, i64* %55, align 8
  store i32 %152, i32* %54, align 16
  br label %174

163:                                              ; preds = %157
  %164 = bitcast i64* %160 to i8*
  call void @_ZdaPv(i8* %164) #18
  %165 = load i32, i32* %123, align 8
  store i64 %153, i64* %55, align 8
  store i32 %152, i32* %54, align 16
  %166 = icmp ugt i32 %165, 64
  br i1 %166, label %167, label %174

167:                                              ; preds = %163
  %168 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %23, i64 0, i32 1
  %169 = bitcast %union.anon* %168 to i64**
  %170 = load i64*, i64** %169, align 8
  %171 = icmp eq i64* %170, null
  br i1 %171, label %174, label %172

172:                                              ; preds = %167
  %173 = bitcast i64* %170 to i8*
  call void @_ZdaPv(i8* %173) #18
  br label %174

174:                                              ; preds = %162, %156, %163, %167, %172
  %175 = load i32, i32* %117, align 8
  %176 = icmp ugt i32 %175, 64
  br i1 %176, label %177, label %184

177:                                              ; preds = %174
  %178 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %24, i64 0, i32 1
  %179 = bitcast %union.anon* %178 to i64**
  %180 = load i64*, i64** %179, align 8
  %181 = icmp eq i64* %180, null
  br i1 %181, label %184, label %182

182:                                              ; preds = %177
  %183 = bitcast i64* %180 to i8*
  call void @_ZdaPv(i8* %183) #18
  br label %184

184:                                              ; preds = %174, %177, %182
  %185 = load i32, i32* %96, align 8
  %186 = icmp ugt i32 %185, 64
  br i1 %186, label %187, label %194

187:                                              ; preds = %184
  %188 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %25, i64 0, i32 1
  %189 = bitcast %union.anon* %188 to i64**
  %190 = load i64*, i64** %189, align 8
  %191 = icmp eq i64* %190, null
  br i1 %191, label %194, label %192

192:                                              ; preds = %187
  %193 = bitcast i64* %190 to i8*
  call void @_ZdaPv(i8* %193) #18
  br label %194

194:                                              ; preds = %192, %187, %184
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %95) #17
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %94) #17
  %195 = load i32, i32* %77, align 8
  %196 = add i32 %195, -1
  %197 = bitcast %"class.llvm::APInt"* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %197) #17
  call void @_ZNK4llvm5APInt4udivERKS0_(%"class.llvm::APInt"* nonnull sret %26, %"class.llvm::APInt"* nonnull %21, %"class.llvm::APInt"* nonnull dereferenceable(16) %8) #19
  %198 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %26, i64 0, i32 1, i32 0
  %199 = load i64, i64* %198, align 8
  store i64 %199, i64* %61, align 8
  %200 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %26, i64 0, i32 0
  %201 = load i32, i32* %200, align 8
  store i32 %201, i32* %60, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %197) #17
  %202 = bitcast %"class.llvm::APInt"* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %202) #17
  call void @_ZNK4llvm5APIntmlERKS0_(%"class.llvm::APInt"* nonnull sret %27, %"class.llvm::APInt"* nonnull %12, %"class.llvm::APInt"* nonnull dereferenceable(16) %8) #19
  %203 = bitcast %"class.llvm::APInt"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %203)
  %204 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 0
  %205 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %27, i64 0, i32 0
  %206 = load i32, i32* %205, align 8, !noalias !91
  store i32 %206, i32* %204, align 8, !noalias !91
  %207 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1, i32 0
  %208 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %27, i64 0, i32 1, i32 0
  %209 = load i64, i64* %208, align 8, !noalias !91
  store i64 %209, i64* %207, align 8, !noalias !91
  store i32 0, i32* %205, align 8, !noalias !91
  call void @_ZN4llvm5APInt11flipAllBitsEv(%"class.llvm::APInt"* nonnull %5) #20, !noalias !94
  %210 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntppEv(%"class.llvm::APInt"* nonnull %5) #20, !noalias !94
  %211 = load i32, i32* %204, align 8, !noalias !94
  %212 = load i64, i64* %207, align 8, !noalias !94
  store i32 0, i32* %204, align 8, !noalias !94
  %213 = load i32, i32* %205, align 8, !noalias !91
  %214 = icmp ult i32 %213, 65
  br i1 %214, label %220, label %215

215:                                              ; preds = %194
  %216 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %27, i64 0, i32 1
  %217 = bitcast %union.anon* %216 to i64**
  %218 = load i64*, i64** %217, align 8, !noalias !91
  %219 = icmp eq i64* %218, null
  br i1 %219, label %220, label %221

220:                                              ; preds = %215, %194
  store i64 %212, i64* %208, align 8, !noalias !91
  store i32 %211, i32* %205, align 8, !noalias !91
  br label %232

221:                                              ; preds = %215
  %222 = bitcast i64* %218 to i8*
  call void @_ZdaPv(i8* %222) #18, !noalias !91
  %223 = load i32, i32* %204, align 8, !noalias !91
  %224 = icmp ugt i32 %223, 64
  store i64 %212, i64* %208, align 8, !noalias !91
  store i32 %211, i32* %205, align 8, !noalias !91
  br i1 %224, label %225, label %232

225:                                              ; preds = %221
  %226 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1
  %227 = bitcast %union.anon* %226 to i64**
  %228 = load i64*, i64** %227, align 8, !noalias !91
  %229 = icmp eq i64* %228, null
  br i1 %229, label %232, label %230

230:                                              ; preds = %225
  %231 = bitcast i64* %228 to i8*
  call void @_ZdaPv(i8* %231) #18, !noalias !91
  br label %232

232:                                              ; preds = %230, %225, %221, %220
  %233 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLERKS0_(%"class.llvm::APInt"* nonnull %27, %"class.llvm::APInt"* nonnull dereferenceable(16) %21) #20, !noalias !91
  %234 = load i32, i32* %205, align 8, !noalias !91
  %235 = load i64, i64* %208, align 8, !noalias !91
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %203)
  store i64 %235, i64* %64, align 8
  store i32 %234, i32* %63, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %202) #17
  %236 = bitcast %"class.llvm::APInt"* %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %236) #17
  call void @_ZNK4llvm5APInt4udivERKS0_(%"class.llvm::APInt"* nonnull sret %28, %"class.llvm::APInt"* nonnull %22, %"class.llvm::APInt"* dereferenceable(16) %1) #19
  %237 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %28, i64 0, i32 1, i32 0
  %238 = load i64, i64* %237, align 8
  store i64 %238, i64* %67, align 8
  %239 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %28, i64 0, i32 0
  %240 = load i32, i32* %239, align 8
  store i32 %240, i32* %66, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %236) #17
  %241 = bitcast %"class.llvm::APInt"* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %241) #17
  call void @_ZNK4llvm5APIntmlERKS0_(%"class.llvm::APInt"* nonnull sret %29, %"class.llvm::APInt"* nonnull %16, %"class.llvm::APInt"* dereferenceable(16) %1) #19
  %242 = bitcast %"class.llvm::APInt"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %242)
  %243 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %4, i64 0, i32 0
  %244 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %29, i64 0, i32 0
  %245 = load i32, i32* %244, align 8, !noalias !97
  store i32 %245, i32* %243, align 8, !noalias !97
  %246 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %4, i64 0, i32 1, i32 0
  %247 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %29, i64 0, i32 1, i32 0
  %248 = load i64, i64* %247, align 8, !noalias !97
  store i64 %248, i64* %246, align 8, !noalias !97
  store i32 0, i32* %244, align 8, !noalias !97
  call void @_ZN4llvm5APInt11flipAllBitsEv(%"class.llvm::APInt"* nonnull %4) #20, !noalias !100
  %249 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntppEv(%"class.llvm::APInt"* nonnull %4) #20, !noalias !100
  %250 = load i32, i32* %243, align 8, !noalias !100
  %251 = load i64, i64* %246, align 8, !noalias !100
  store i32 0, i32* %243, align 8, !noalias !100
  %252 = load i32, i32* %244, align 8, !noalias !97
  %253 = icmp ult i32 %252, 65
  br i1 %253, label %259, label %254

254:                                              ; preds = %232
  %255 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %29, i64 0, i32 1
  %256 = bitcast %union.anon* %255 to i64**
  %257 = load i64*, i64** %256, align 8, !noalias !97
  %258 = icmp eq i64* %257, null
  br i1 %258, label %259, label %260

259:                                              ; preds = %254, %232
  store i64 %251, i64* %247, align 8, !noalias !97
  store i32 %250, i32* %244, align 8, !noalias !97
  br label %271

260:                                              ; preds = %254
  %261 = bitcast i64* %257 to i8*
  call void @_ZdaPv(i8* %261) #18, !noalias !97
  %262 = load i32, i32* %243, align 8, !noalias !97
  %263 = icmp ugt i32 %262, 64
  store i64 %251, i64* %247, align 8, !noalias !97
  store i32 %250, i32* %244, align 8, !noalias !97
  br i1 %263, label %264, label %271

264:                                              ; preds = %260
  %265 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %4, i64 0, i32 1
  %266 = bitcast %union.anon* %265 to i64**
  %267 = load i64*, i64** %266, align 8, !noalias !97
  %268 = icmp eq i64* %267, null
  br i1 %268, label %271, label %269

269:                                              ; preds = %264
  %270 = bitcast i64* %267 to i8*
  call void @_ZdaPv(i8* %270) #18, !noalias !97
  br label %271

271:                                              ; preds = %259, %260, %264, %269
  %272 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLERKS0_(%"class.llvm::APInt"* nonnull %29, %"class.llvm::APInt"* nonnull dereferenceable(16) %22) #20, !noalias !97
  %273 = load i32, i32* %244, align 8, !noalias !97
  %274 = load i64, i64* %247, align 8, !noalias !97
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %242)
  store i64 %274, i64* %70, align 8
  store i32 %273, i32* %69, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %241) #17
  %275 = bitcast %"class.llvm::APInt"* %30 to i8*
  %276 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %31, i64 0, i32 0
  %277 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %31, i64 0, i32 1, i32 0
  %278 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %31, i64 0, i32 1
  %279 = bitcast %union.anon* %278 to i8**
  %280 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %8, i64 0, i32 1
  %281 = bitcast %union.anon* %280 to i8**
  %282 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %30, i64 0, i32 0
  %283 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %30, i64 0, i32 1, i32 0
  %284 = bitcast %union.anon* %278 to i64**
  %285 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %33, i64 0, i32 0
  %286 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %33, i64 0, i32 1, i32 0
  %287 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %33, i64 0, i32 1
  %288 = bitcast %union.anon* %287 to i8**
  %289 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %12, i64 0, i32 1
  %290 = bitcast %union.anon* %289 to i8**
  %291 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %32, i64 0, i32 0
  %292 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %32, i64 0, i32 1, i32 0
  %293 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %32, i64 0, i32 1
  %294 = bitcast %union.anon* %293 to i64**
  %295 = bitcast %union.anon* %287 to i64**
  %296 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %35, i64 0, i32 0
  %297 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %35, i64 0, i32 1, i32 0
  %298 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %35, i64 0, i32 1
  %299 = bitcast %union.anon* %298 to i8**
  %300 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %14, i64 0, i32 1
  %301 = bitcast %union.anon* %300 to i8**
  %302 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %34, i64 0, i32 0
  %303 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %34, i64 0, i32 1, i32 0
  %304 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %34, i64 0, i32 1
  %305 = bitcast %union.anon* %304 to i64**
  %306 = bitcast %union.anon* %298 to i64**
  %307 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %36, i64 0, i32 0
  %308 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %36, i64 0, i32 1, i32 0
  %309 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %36, i64 0, i32 1
  %310 = bitcast %union.anon* %309 to i8**
  %311 = bitcast %union.anon* %309 to i64**
  %312 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %37, i64 0, i32 0
  %313 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %37, i64 0, i32 1, i32 0
  %314 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %37, i64 0, i32 1
  %315 = bitcast %union.anon* %314 to i8**
  %316 = bitcast %union.anon* %314 to i64**
  %317 = bitcast %"class.llvm::APInt"* %38 to i8*
  %318 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %39, i64 0, i32 0
  %319 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %39, i64 0, i32 1, i32 0
  %320 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %39, i64 0, i32 1
  %321 = bitcast %union.anon* %320 to i8**
  %322 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %18, i64 0, i32 1
  %323 = bitcast %union.anon* %322 to i8**
  %324 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %38, i64 0, i32 0
  %325 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %38, i64 0, i32 1, i32 0
  %326 = bitcast %"class.llvm::APInt"* %40 to i8*
  %327 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %41, i64 0, i32 0
  %328 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %41, i64 0, i32 1, i32 0
  %329 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %41, i64 0, i32 1
  %330 = bitcast %union.anon* %329 to i8**
  %331 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %332 = bitcast %union.anon* %331 to i8**
  %333 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %334 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %40, i64 0, i32 0
  %335 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %40, i64 0, i32 1, i32 0
  %336 = bitcast %union.anon* %329 to i64**
  %337 = bitcast %union.anon* %320 to i64**
  %338 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %43, i64 0, i32 0
  %339 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %43, i64 0, i32 1, i32 0
  %340 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %43, i64 0, i32 1
  %341 = bitcast %union.anon* %340 to i8**
  %342 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %16, i64 0, i32 1
  %343 = bitcast %union.anon* %342 to i8**
  %344 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %42, i64 0, i32 0
  %345 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %42, i64 0, i32 1, i32 0
  %346 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %42, i64 0, i32 1
  %347 = bitcast %union.anon* %346 to i64**
  %348 = bitcast %union.anon* %340 to i64**
  %349 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %46, i64 0, i32 0
  %350 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %46, i64 0, i32 1, i32 0
  %351 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %46, i64 0, i32 1
  %352 = bitcast %union.anon* %351 to i8**
  %353 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %45, i64 0, i32 0
  %354 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %45, i64 0, i32 1, i32 0
  %355 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %44, i64 0, i32 0
  %356 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %44, i64 0, i32 1, i32 0
  %357 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %44, i64 0, i32 1
  %358 = bitcast %union.anon* %357 to i64**
  %359 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %45, i64 0, i32 1
  %360 = bitcast %union.anon* %359 to i64**
  %361 = bitcast %union.anon* %351 to i64**
  %362 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %47, i64 0, i32 0
  %363 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %47, i64 0, i32 1, i32 0
  %364 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %47, i64 0, i32 1
  %365 = bitcast %union.anon* %364 to i8**
  %366 = bitcast %union.anon* %364 to i64**
  %367 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %49, i64 0, i32 0
  %368 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %49, i64 0, i32 1, i32 0
  %369 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %49, i64 0, i32 1
  %370 = bitcast %union.anon* %369 to i8**
  %371 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %48, i64 0, i32 0
  %372 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %48, i64 0, i32 1, i32 0
  %373 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %48, i64 0, i32 1
  %374 = bitcast %union.anon* %373 to i64**
  %375 = bitcast %union.anon* %369 to i64**
  %376 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %51, i64 0, i32 0
  %377 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %51, i64 0, i32 1, i32 0
  %378 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %51, i64 0, i32 1
  %379 = bitcast %union.anon* %378 to i8**
  %380 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %50, i64 0, i32 0
  %381 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %50, i64 0, i32 1, i32 0
  %382 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %10, i64 0, i32 1
  %383 = bitcast %union.anon* %382 to i64**
  %384 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %50, i64 0, i32 1
  %385 = bitcast %union.anon* %384 to i64**
  %386 = bitcast %union.anon* %378 to i64**
  br label %387

387:                                              ; preds = %928, %271
  %388 = phi i32 [ %196, %271 ], [ %389, %928 ]
  %389 = add i32 %388, 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %275) #17
  %390 = load i32, i32* %54, align 16
  store i32 %390, i32* %276, align 8
  store i64 0, i64* %277, align 8
  %391 = icmp ult i32 %390, 65
  br i1 %391, label %392, label %394

392:                                              ; preds = %387
  %393 = load i64, i64* %55, align 8
  store i64 %393, i64* %277, align 8
  br label %401

394:                                              ; preds = %387
  %395 = zext i32 %390 to i64
  %396 = add nuw nsw i64 %395, 63
  %397 = lshr i64 %396, 6
  %398 = shl nuw nsw i64 %397, 3
  %399 = call i8* @_Znam(i64 %398) #18
  store i8* %399, i8** %279, align 8
  %400 = load i8*, i8** %281, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %399, i8* align 8 %400, i64 %398, i1 false) #17
  br label %401

401:                                              ; preds = %392, %394
  %402 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntmIERKS0_(%"class.llvm::APInt"* nonnull %31, %"class.llvm::APInt"* nonnull dereferenceable(16) %14) #20, !noalias !103
  %403 = load i32, i32* %276, align 8, !noalias !103
  store i32 %403, i32* %282, align 8, !alias.scope !103
  %404 = load i64, i64* %277, align 8, !noalias !103
  store i64 %404, i64* %283, align 8, !alias.scope !103
  store i32 0, i32* %276, align 8, !noalias !103
  %405 = call zeroext i1 @_ZNK4llvm5APInt3ultERKS0_(%"class.llvm::APInt"* nonnull %14, %"class.llvm::APInt"* nonnull dereferenceable(16) %30) #20
  %406 = icmp ult i32 %403, 65
  %407 = icmp eq i64 %404, 0
  %408 = or i1 %406, %407
  br i1 %408, label %418, label %409

409:                                              ; preds = %401
  %410 = inttoptr i64 %404 to i8*
  call void @_ZdaPv(i8* %410) #18
  %411 = load i32, i32* %276, align 8
  %412 = icmp ugt i32 %411, 64
  br i1 %412, label %413, label %418

413:                                              ; preds = %409
  %414 = load i64*, i64** %284, align 8
  %415 = icmp eq i64* %414, null
  br i1 %415, label %418, label %416

416:                                              ; preds = %413
  %417 = bitcast i64* %414 to i8*
  call void @_ZdaPv(i8* %417) #18
  br label %418

418:                                              ; preds = %401, %409, %413, %416
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %275) #17
  %419 = load i32, i32* %60, align 16
  br i1 %405, label %513, label %420

420:                                              ; preds = %418
  store i32 %419, i32* %285, align 8
  store i64 0, i64* %286, align 8
  %421 = icmp ult i32 %419, 65
  br i1 %421, label %422, label %425

422:                                              ; preds = %420
  %423 = load i64, i64* %61, align 8
  store i64 %423, i64* %286, align 8
  %424 = inttoptr i64 %423 to i64*
  br label %433

425:                                              ; preds = %420
  %426 = zext i32 %419 to i64
  %427 = add nuw nsw i64 %426, 63
  %428 = lshr i64 %427, 6
  %429 = shl nuw nsw i64 %428, 3
  %430 = call i8* @_Znam(i64 %429) #18
  store i8* %430, i8** %288, align 8
  %431 = load i8*, i8** %290, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %430, i8* align 8 %431, i64 %429, i1 false) #17
  %432 = bitcast i8* %431 to i64*
  br label %433

433:                                              ; preds = %422, %425
  %434 = phi i64* [ %424, %422 ], [ %432, %425 ]
  %435 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLERKS0_(%"class.llvm::APInt"* nonnull %33, %"class.llvm::APInt"* nonnull dereferenceable(16) %12) #20, !noalias !106
  %436 = load i32, i32* %285, align 8, !noalias !106
  store i32 %436, i32* %291, align 8, !alias.scope !106
  %437 = load i64, i64* %286, align 8, !noalias !106
  store i64 %437, i64* %292, align 8, !alias.scope !106
  store i32 0, i32* %285, align 8, !noalias !106
  %438 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLEm(%"class.llvm::APInt"* nonnull %32, i64 1) #20, !noalias !109
  %439 = load i32, i32* %291, align 8, !noalias !109
  %440 = load i64, i64* %292, align 8, !noalias !109
  store i32 0, i32* %291, align 8, !noalias !109
  br i1 %421, label %441, label %443

441:                                              ; preds = %433
  store i64 %440, i64* %61, align 8
  store i32 %439, i32* %60, align 16
  %442 = inttoptr i64 %440 to i64*
  br label %457

443:                                              ; preds = %433
  %444 = icmp eq i64* %434, null
  br i1 %444, label %445, label %447

445:                                              ; preds = %443
  store i64 %440, i64* %61, align 8
  store i32 %439, i32* %60, align 16
  %446 = inttoptr i64 %440 to i64*
  br label %457

447:                                              ; preds = %443
  %448 = bitcast i64* %434 to i8*
  call void @_ZdaPv(i8* %448) #18
  %449 = load i32, i32* %291, align 8
  store i64 %440, i64* %61, align 8
  store i32 %439, i32* %60, align 16
  %450 = icmp ugt i32 %449, 64
  %451 = inttoptr i64 %440 to i64*
  br i1 %450, label %452, label %457

452:                                              ; preds = %447
  %453 = load i64*, i64** %294, align 8
  %454 = icmp eq i64* %453, null
  br i1 %454, label %457, label %455

455:                                              ; preds = %452
  %456 = bitcast i64* %453 to i8*
  call void @_ZdaPv(i8* %456) #18
  br label %457

457:                                              ; preds = %445, %441, %447, %452, %455
  %458 = phi i64* [ %442, %441 ], [ %451, %447 ], [ %451, %452 ], [ %451, %455 ], [ %446, %445 ]
  %459 = load i32, i32* %285, align 8
  %460 = icmp ugt i32 %459, 64
  br i1 %460, label %461, label %466

461:                                              ; preds = %457
  %462 = load i64*, i64** %295, align 8
  %463 = icmp eq i64* %462, null
  br i1 %463, label %466, label %464

464:                                              ; preds = %461
  %465 = bitcast i64* %462 to i8*
  call void @_ZdaPv(i8* %465) #18
  br label %466

466:                                              ; preds = %457, %461, %464
  %467 = load i32, i32* %63, align 16
  store i32 %467, i32* %296, align 8
  store i64 0, i64* %297, align 8
  %468 = icmp ult i32 %467, 65
  br i1 %468, label %469, label %472

469:                                              ; preds = %466
  %470 = load i64, i64* %64, align 8
  store i64 %470, i64* %297, align 8
  %471 = inttoptr i64 %470 to i64*
  br label %480

472:                                              ; preds = %466
  %473 = zext i32 %467 to i64
  %474 = add nuw nsw i64 %473, 63
  %475 = lshr i64 %474, 6
  %476 = shl nuw nsw i64 %475, 3
  %477 = call i8* @_Znam(i64 %476) #18
  store i8* %477, i8** %299, align 8
  %478 = load i8*, i8** %301, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %477, i8* align 8 %478, i64 %476, i1 false) #17
  %479 = bitcast i8* %478 to i64*
  br label %480

480:                                              ; preds = %469, %472
  %481 = phi i64* [ %471, %469 ], [ %479, %472 ]
  %482 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLERKS0_(%"class.llvm::APInt"* nonnull %35, %"class.llvm::APInt"* nonnull dereferenceable(16) %14) #20, !noalias !112
  %483 = load i32, i32* %296, align 8, !noalias !112
  store i32 %483, i32* %302, align 8, !alias.scope !112
  %484 = load i64, i64* %297, align 8, !noalias !112
  store i64 %484, i64* %303, align 8, !alias.scope !112
  store i32 0, i32* %296, align 8, !noalias !112
  %485 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntmIERKS0_(%"class.llvm::APInt"* nonnull %34, %"class.llvm::APInt"* nonnull dereferenceable(16) %8) #20, !noalias !115
  %486 = load i32, i32* %302, align 8, !noalias !115
  %487 = load i64, i64* %303, align 8, !noalias !115
  store i32 0, i32* %302, align 8, !noalias !115
  br i1 %468, label %488, label %490

488:                                              ; preds = %480
  store i64 %487, i64* %64, align 8
  store i32 %486, i32* %63, align 16
  %489 = inttoptr i64 %487 to i64*
  br label %504

490:                                              ; preds = %480
  %491 = icmp eq i64* %481, null
  br i1 %491, label %492, label %494

492:                                              ; preds = %490
  store i64 %487, i64* %64, align 8
  store i32 %486, i32* %63, align 16
  %493 = inttoptr i64 %487 to i64*
  br label %504

494:                                              ; preds = %490
  %495 = bitcast i64* %481 to i8*
  call void @_ZdaPv(i8* %495) #18
  %496 = load i32, i32* %302, align 8
  store i64 %487, i64* %64, align 8
  store i32 %486, i32* %63, align 16
  %497 = icmp ugt i32 %496, 64
  %498 = inttoptr i64 %487 to i64*
  br i1 %497, label %499, label %504

499:                                              ; preds = %494
  %500 = load i64*, i64** %305, align 8
  %501 = icmp eq i64* %500, null
  br i1 %501, label %504, label %502

502:                                              ; preds = %499
  %503 = bitcast i64* %500 to i8*
  call void @_ZdaPv(i8* %503) #18
  br label %504

504:                                              ; preds = %492, %488, %494, %499, %502
  %505 = phi i64* [ %489, %488 ], [ %498, %494 ], [ %498, %499 ], [ %498, %502 ], [ %493, %492 ]
  %506 = load i32, i32* %296, align 8
  %507 = icmp ugt i32 %506, 64
  br i1 %507, label %508, label %583

508:                                              ; preds = %504
  %509 = load i64*, i64** %306, align 8
  %510 = icmp eq i64* %509, null
  br i1 %510, label %583, label %511

511:                                              ; preds = %508
  %512 = bitcast i64* %509 to i8*
  call void @_ZdaPv(i8* %512) #18
  br label %583

513:                                              ; preds = %418
  store i32 %419, i32* %307, align 8
  store i64 0, i64* %308, align 8
  %514 = icmp ult i32 %419, 65
  br i1 %514, label %515, label %518

515:                                              ; preds = %513
  %516 = load i64, i64* %61, align 8
  store i64 %516, i64* %308, align 8
  %517 = inttoptr i64 %516 to i64*
  br label %526

518:                                              ; preds = %513
  %519 = zext i32 %419 to i64
  %520 = add nuw nsw i64 %519, 63
  %521 = lshr i64 %520, 6
  %522 = shl nuw nsw i64 %521, 3
  %523 = call i8* @_Znam(i64 %522) #18
  store i8* %523, i8** %310, align 8
  %524 = load i8*, i8** %290, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %523, i8* align 8 %524, i64 %522, i1 false) #17
  %525 = bitcast i8* %524 to i64*
  br label %526

526:                                              ; preds = %515, %518
  %527 = phi i64* [ %517, %515 ], [ %525, %518 ]
  %528 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLERKS0_(%"class.llvm::APInt"* nonnull %36, %"class.llvm::APInt"* nonnull dereferenceable(16) %12) #20, !noalias !118
  %529 = load i32, i32* %307, align 8, !noalias !118
  %530 = load i64, i64* %308, align 8, !noalias !118
  store i32 0, i32* %307, align 8, !noalias !118
  br i1 %514, label %531, label %533

531:                                              ; preds = %526
  store i64 %530, i64* %61, align 8
  store i32 %529, i32* %60, align 16
  %532 = inttoptr i64 %530 to i64*
  br label %547

533:                                              ; preds = %526
  %534 = icmp eq i64* %527, null
  br i1 %534, label %535, label %537

535:                                              ; preds = %533
  store i64 %530, i64* %61, align 8
  store i32 %529, i32* %60, align 16
  %536 = inttoptr i64 %530 to i64*
  br label %547

537:                                              ; preds = %533
  %538 = bitcast i64* %527 to i8*
  call void @_ZdaPv(i8* %538) #18
  %539 = load i32, i32* %307, align 8
  store i64 %530, i64* %61, align 8
  store i32 %529, i32* %60, align 16
  %540 = icmp ugt i32 %539, 64
  %541 = inttoptr i64 %530 to i64*
  br i1 %540, label %542, label %547

542:                                              ; preds = %537
  %543 = load i64*, i64** %311, align 8
  %544 = icmp eq i64* %543, null
  br i1 %544, label %547, label %545

545:                                              ; preds = %542
  %546 = bitcast i64* %543 to i8*
  call void @_ZdaPv(i8* %546) #18
  br label %547

547:                                              ; preds = %535, %531, %537, %542, %545
  %548 = phi i64* [ %532, %531 ], [ %541, %537 ], [ %541, %542 ], [ %541, %545 ], [ %536, %535 ]
  %549 = load i32, i32* %63, align 16
  store i32 %549, i32* %312, align 8
  store i64 0, i64* %313, align 8
  %550 = icmp ult i32 %549, 65
  br i1 %550, label %551, label %554

551:                                              ; preds = %547
  %552 = load i64, i64* %64, align 8
  store i64 %552, i64* %313, align 8
  %553 = inttoptr i64 %552 to i64*
  br label %562

554:                                              ; preds = %547
  %555 = zext i32 %549 to i64
  %556 = add nuw nsw i64 %555, 63
  %557 = lshr i64 %556, 6
  %558 = shl nuw nsw i64 %557, 3
  %559 = call i8* @_Znam(i64 %558) #18
  store i8* %559, i8** %315, align 8
  %560 = load i8*, i8** %301, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %559, i8* align 8 %560, i64 %558, i1 false) #17
  %561 = bitcast i8* %560 to i64*
  br label %562

562:                                              ; preds = %551, %554
  %563 = phi i64* [ %553, %551 ], [ %561, %554 ]
  %564 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLERKS0_(%"class.llvm::APInt"* nonnull %37, %"class.llvm::APInt"* nonnull dereferenceable(16) %14) #20, !noalias !121
  %565 = load i32, i32* %312, align 8, !noalias !121
  %566 = load i64, i64* %313, align 8, !noalias !121
  store i32 0, i32* %312, align 8, !noalias !121
  br i1 %550, label %567, label %569

567:                                              ; preds = %562
  store i64 %566, i64* %64, align 8
  store i32 %565, i32* %63, align 16
  %568 = inttoptr i64 %566 to i64*
  br label %583

569:                                              ; preds = %562
  %570 = icmp eq i64* %563, null
  br i1 %570, label %571, label %573

571:                                              ; preds = %569
  store i64 %566, i64* %64, align 8
  store i32 %565, i32* %63, align 16
  %572 = inttoptr i64 %566 to i64*
  br label %583

573:                                              ; preds = %569
  %574 = bitcast i64* %563 to i8*
  call void @_ZdaPv(i8* %574) #18
  %575 = load i32, i32* %312, align 8
  store i64 %566, i64* %64, align 8
  store i32 %565, i32* %63, align 16
  %576 = icmp ugt i32 %575, 64
  %577 = inttoptr i64 %566 to i64*
  br i1 %576, label %578, label %583

578:                                              ; preds = %573
  %579 = load i64*, i64** %316, align 8
  %580 = icmp eq i64* %579, null
  br i1 %580, label %583, label %581

581:                                              ; preds = %578
  %582 = bitcast i64* %579 to i8*
  call void @_ZdaPv(i8* %582) #18
  br label %583

583:                                              ; preds = %571, %581, %578, %573, %567, %511, %508, %504
  %584 = phi i64* [ %548, %581 ], [ %548, %578 ], [ %548, %573 ], [ %548, %567 ], [ %458, %511 ], [ %458, %508 ], [ %458, %504 ], [ %548, %571 ]
  %585 = phi i64* [ %577, %581 ], [ %577, %578 ], [ %577, %573 ], [ %568, %567 ], [ %505, %511 ], [ %505, %508 ], [ %505, %504 ], [ %572, %571 ]
  %586 = phi i64 [ %566, %581 ], [ %566, %578 ], [ %566, %573 ], [ %566, %567 ], [ %487, %511 ], [ %487, %508 ], [ %487, %504 ], [ %566, %571 ]
  %587 = phi i32 [ %565, %581 ], [ %565, %578 ], [ %565, %573 ], [ %565, %567 ], [ %486, %511 ], [ %486, %508 ], [ %486, %504 ], [ %565, %571 ]
  %588 = phi i64 [ %530, %581 ], [ %530, %578 ], [ %530, %573 ], [ %530, %567 ], [ %440, %511 ], [ %440, %508 ], [ %440, %504 ], [ %530, %571 ]
  %589 = phi i32 [ %529, %581 ], [ %529, %578 ], [ %529, %573 ], [ %529, %567 ], [ %439, %511 ], [ %439, %508 ], [ %439, %504 ], [ %529, %571 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %317) #17
  %590 = load i32, i32* %69, align 16
  store i32 %590, i32* %318, align 8
  store i64 0, i64* %319, align 8
  %591 = icmp ult i32 %590, 65
  br i1 %591, label %592, label %596

592:                                              ; preds = %583
  %593 = load i64, i64* %70, align 8
  store i64 %593, i64* %319, align 8
  %594 = inttoptr i64 %593 to i8*
  %595 = inttoptr i64 %593 to i64*
  br label %605

596:                                              ; preds = %583
  %597 = zext i32 %590 to i64
  %598 = add nuw nsw i64 %597, 63
  %599 = lshr i64 %598, 6
  %600 = shl nuw nsw i64 %599, 3
  %601 = call i8* @_Znam(i64 %600) #18
  store i8* %601, i8** %321, align 8
  %602 = load i8*, i8** %323, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %601, i8* align 8 %602, i64 %600, i1 false) #17
  %603 = ptrtoint i8* %602 to i64
  %604 = bitcast i8* %602 to i64*
  br label %605

605:                                              ; preds = %592, %596
  %606 = phi i64* [ %595, %592 ], [ %604, %596 ]
  %607 = phi i64 [ %593, %592 ], [ %603, %596 ]
  %608 = phi i8* [ %594, %592 ], [ %602, %596 ]
  %609 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLEm(%"class.llvm::APInt"* nonnull %39, i64 1) #20, !noalias !124
  %610 = load i32, i32* %318, align 8, !noalias !124
  store i32 %610, i32* %324, align 8, !alias.scope !124
  %611 = load i64, i64* %319, align 8, !noalias !124
  store i64 %611, i64* %325, align 8, !alias.scope !124
  store i32 0, i32* %318, align 8, !noalias !124
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %326) #17
  %612 = load i32, i32* %77, align 8
  store i32 %612, i32* %327, align 8
  store i64 0, i64* %328, align 8
  %613 = icmp ult i32 %612, 65
  br i1 %613, label %614, label %616

614:                                              ; preds = %605
  %615 = load i64, i64* %333, align 8
  store i64 %615, i64* %328, align 8
  br label %623

616:                                              ; preds = %605
  %617 = zext i32 %612 to i64
  %618 = add nuw nsw i64 %617, 63
  %619 = lshr i64 %618, 6
  %620 = shl nuw nsw i64 %619, 3
  %621 = call i8* @_Znam(i64 %620) #18
  store i8* %621, i8** %330, align 8
  %622 = load i8*, i8** %332, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %621, i8* align 8 %622, i64 %620, i1 false) #17
  br label %623

623:                                              ; preds = %614, %616
  %624 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntmIERKS0_(%"class.llvm::APInt"* nonnull %41, %"class.llvm::APInt"* nonnull dereferenceable(16) %18) #20, !noalias !127
  %625 = load i32, i32* %327, align 8, !noalias !127
  store i32 %625, i32* %334, align 8, !alias.scope !127
  %626 = load i64, i64* %328, align 8, !noalias !127
  store i64 %626, i64* %335, align 8, !alias.scope !127
  store i32 0, i32* %327, align 8, !noalias !127
  %627 = call zeroext i1 @_ZNK4llvm5APInt3ultERKS0_(%"class.llvm::APInt"* nonnull %38, %"class.llvm::APInt"* nonnull dereferenceable(16) %40) #20
  %628 = icmp ult i32 %625, 65
  %629 = icmp eq i64 %626, 0
  %630 = or i1 %628, %629
  br i1 %630, label %640, label %631

631:                                              ; preds = %623
  %632 = inttoptr i64 %626 to i8*
  call void @_ZdaPv(i8* %632) #18
  %633 = load i32, i32* %327, align 8
  %634 = icmp ugt i32 %633, 64
  br i1 %634, label %635, label %640

635:                                              ; preds = %631
  %636 = load i64*, i64** %336, align 8
  %637 = icmp eq i64* %636, null
  br i1 %637, label %640, label %638

638:                                              ; preds = %635
  %639 = bitcast i64* %636 to i8*
  call void @_ZdaPv(i8* %639) #18
  br label %640

640:                                              ; preds = %623, %631, %635, %638
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %326) #17
  %641 = icmp ult i32 %610, 65
  %642 = icmp eq i64 %611, 0
  %643 = or i1 %641, %642
  br i1 %643, label %646, label %644

644:                                              ; preds = %640
  %645 = inttoptr i64 %611 to i8*
  call void @_ZdaPv(i8* %645) #18
  br label %646

646:                                              ; preds = %640, %644
  %647 = load i32, i32* %318, align 8
  %648 = icmp ugt i32 %647, 64
  br i1 %648, label %649, label %654

649:                                              ; preds = %646
  %650 = load i64*, i64** %337, align 8
  %651 = icmp eq i64* %650, null
  br i1 %651, label %654, label %652

652:                                              ; preds = %649
  %653 = bitcast i64* %650 to i8*
  call void @_ZdaPv(i8* %653) #18
  br label %654

654:                                              ; preds = %646, %649, %652
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %317) #17
  br i1 %627, label %760, label %655

655:                                              ; preds = %654
  %656 = call zeroext i1 @_ZNK4llvm5APInt3ultERKS0_(%"class.llvm::APInt"* nonnull %16, %"class.llvm::APInt"* nonnull dereferenceable(16) %22) #20
  br i1 %656, label %658, label %657

657:                                              ; preds = %655
  store i8 1, i8* %74, align 8
  br label %658

658:                                              ; preds = %655, %657
  %659 = load i32, i32* %66, align 16
  store i32 %659, i32* %338, align 8
  store i64 0, i64* %339, align 8
  %660 = icmp ult i32 %659, 65
  br i1 %660, label %661, label %664

661:                                              ; preds = %658
  %662 = load i64, i64* %67, align 8
  store i64 %662, i64* %339, align 8
  %663 = inttoptr i64 %662 to i64*
  br label %672

664:                                              ; preds = %658
  %665 = zext i32 %659 to i64
  %666 = add nuw nsw i64 %665, 63
  %667 = lshr i64 %666, 6
  %668 = shl nuw nsw i64 %667, 3
  %669 = call i8* @_Znam(i64 %668) #18
  store i8* %669, i8** %341, align 8
  %670 = load i8*, i8** %343, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %669, i8* align 8 %670, i64 %668, i1 false) #17
  %671 = bitcast i8* %670 to i64*
  br label %672

672:                                              ; preds = %661, %664
  %673 = phi i64* [ %663, %661 ], [ %671, %664 ]
  %674 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLERKS0_(%"class.llvm::APInt"* nonnull %43, %"class.llvm::APInt"* nonnull dereferenceable(16) %16) #20, !noalias !130
  %675 = load i32, i32* %338, align 8, !noalias !130
  store i32 %675, i32* %344, align 8, !alias.scope !130
  %676 = load i64, i64* %339, align 8, !noalias !130
  store i64 %676, i64* %345, align 8, !alias.scope !130
  store i32 0, i32* %338, align 8, !noalias !130
  %677 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLEm(%"class.llvm::APInt"* nonnull %42, i64 1) #20, !noalias !133
  %678 = load i32, i32* %344, align 8, !noalias !133
  %679 = load i64, i64* %345, align 8, !noalias !133
  store i32 0, i32* %344, align 8, !noalias !133
  br i1 %660, label %680, label %683

680:                                              ; preds = %672
  store i64 %679, i64* %67, align 8
  store i32 %678, i32* %66, align 16
  %681 = inttoptr i64 %679 to i8*
  %682 = inttoptr i64 %679 to i64*
  br label %699

683:                                              ; preds = %672
  %684 = icmp eq i64* %673, null
  br i1 %684, label %685, label %688

685:                                              ; preds = %683
  store i64 %679, i64* %67, align 8
  store i32 %678, i32* %66, align 16
  %686 = inttoptr i64 %679 to i8*
  %687 = inttoptr i64 %679 to i64*
  br label %699

688:                                              ; preds = %683
  %689 = bitcast i64* %673 to i8*
  call void @_ZdaPv(i8* %689) #18
  %690 = load i32, i32* %344, align 8
  store i64 %679, i64* %67, align 8
  store i32 %678, i32* %66, align 16
  %691 = icmp ugt i32 %690, 64
  %692 = inttoptr i64 %679 to i8*
  %693 = inttoptr i64 %679 to i64*
  br i1 %691, label %694, label %699

694:                                              ; preds = %688
  %695 = load i64*, i64** %347, align 8
  %696 = icmp eq i64* %695, null
  br i1 %696, label %699, label %697

697:                                              ; preds = %694
  %698 = bitcast i64* %695 to i8*
  call void @_ZdaPv(i8* %698) #18
  br label %699

699:                                              ; preds = %685, %680, %688, %694, %697
  %700 = phi i64* [ %682, %680 ], [ %693, %688 ], [ %693, %694 ], [ %693, %697 ], [ %687, %685 ]
  %701 = phi i8* [ %681, %680 ], [ %692, %688 ], [ %692, %694 ], [ %692, %697 ], [ %686, %685 ]
  %702 = load i32, i32* %338, align 8
  %703 = icmp ugt i32 %702, 64
  br i1 %703, label %704, label %709

704:                                              ; preds = %699
  %705 = load i64*, i64** %348, align 8
  %706 = icmp eq i64* %705, null
  br i1 %706, label %709, label %707

707:                                              ; preds = %704
  %708 = bitcast i64* %705 to i8*
  call void @_ZdaPv(i8* %708) #18
  br label %709

709:                                              ; preds = %699, %704, %707
  store i32 %590, i32* %349, align 8
  store i64 0, i64* %350, align 8
  br i1 %591, label %710, label %711

710:                                              ; preds = %709
  store i64 %607, i64* %350, align 8
  br label %717

711:                                              ; preds = %709
  %712 = zext i32 %590 to i64
  %713 = add nuw nsw i64 %712, 63
  %714 = lshr i64 %713, 6
  %715 = shl nuw nsw i64 %714, 3
  %716 = call i8* @_Znam(i64 %715) #18
  store i8* %716, i8** %352, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %716, i8* align 8 %608, i64 %715, i1 false) #17
  br label %717

717:                                              ; preds = %710, %711
  %718 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLERKS0_(%"class.llvm::APInt"* nonnull %46, %"class.llvm::APInt"* nonnull dereferenceable(16) %18) #20, !noalias !136
  %719 = load i32, i32* %349, align 8, !noalias !136
  store i32 %719, i32* %353, align 8, !alias.scope !136
  %720 = load i64, i64* %350, align 8, !noalias !136
  store i64 %720, i64* %354, align 8, !alias.scope !136
  store i32 0, i32* %349, align 8, !noalias !136
  %721 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLEm(%"class.llvm::APInt"* nonnull %45, i64 1) #20, !noalias !139
  %722 = load i32, i32* %353, align 8, !noalias !139
  store i32 %722, i32* %355, align 8, !alias.scope !139
  %723 = load i64, i64* %354, align 8, !noalias !139
  store i64 %723, i64* %356, align 8, !alias.scope !139
  store i32 0, i32* %353, align 8, !noalias !139
  %724 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntmIERKS0_(%"class.llvm::APInt"* nonnull %44, %"class.llvm::APInt"* dereferenceable(16) %1) #20, !noalias !142
  %725 = load i32, i32* %355, align 8, !noalias !142
  %726 = load i64, i64* %356, align 8, !noalias !142
  store i32 0, i32* %355, align 8, !noalias !142
  br i1 %591, label %727, label %729

727:                                              ; preds = %717
  store i64 %726, i64* %70, align 8
  store i32 %725, i32* %69, align 16
  %728 = inttoptr i64 %726 to i64*
  br label %743

729:                                              ; preds = %717
  %730 = icmp eq i64* %606, null
  br i1 %730, label %731, label %733

731:                                              ; preds = %729
  store i64 %726, i64* %70, align 8
  store i32 %725, i32* %69, align 16
  %732 = inttoptr i64 %726 to i64*
  br label %743

733:                                              ; preds = %729
  %734 = bitcast i64* %606 to i8*
  call void @_ZdaPv(i8* %734) #18
  %735 = load i32, i32* %355, align 8
  store i64 %726, i64* %70, align 8
  store i32 %725, i32* %69, align 16
  %736 = icmp ugt i32 %735, 64
  %737 = inttoptr i64 %726 to i64*
  br i1 %736, label %738, label %743

738:                                              ; preds = %733
  %739 = load i64*, i64** %358, align 8
  %740 = icmp eq i64* %739, null
  br i1 %740, label %743, label %741

741:                                              ; preds = %738
  %742 = bitcast i64* %739 to i8*
  call void @_ZdaPv(i8* %742) #18
  br label %743

743:                                              ; preds = %731, %727, %733, %738, %741
  %744 = phi i64* [ %728, %727 ], [ %737, %733 ], [ %737, %738 ], [ %737, %741 ], [ %732, %731 ]
  %745 = load i32, i32* %353, align 8
  %746 = icmp ugt i32 %745, 64
  br i1 %746, label %747, label %752

747:                                              ; preds = %743
  %748 = load i64*, i64** %360, align 8
  %749 = icmp eq i64* %748, null
  br i1 %749, label %752, label %750

750:                                              ; preds = %747
  %751 = bitcast i64* %748 to i8*
  call void @_ZdaPv(i8* %751) #18
  br label %752

752:                                              ; preds = %743, %747, %750
  %753 = load i32, i32* %349, align 8
  %754 = icmp ugt i32 %753, 64
  br i1 %754, label %755, label %843

755:                                              ; preds = %752
  %756 = load i64*, i64** %361, align 8
  %757 = icmp eq i64* %756, null
  br i1 %757, label %843, label %758

758:                                              ; preds = %755
  %759 = bitcast i64* %756 to i8*
  call void @_ZdaPv(i8* %759) #18
  br label %843

760:                                              ; preds = %654
  %761 = call zeroext i1 @_ZNK4llvm5APInt3ultERKS0_(%"class.llvm::APInt"* nonnull %16, %"class.llvm::APInt"* nonnull dereferenceable(16) %21) #20
  br i1 %761, label %763, label %762

762:                                              ; preds = %760
  store i8 1, i8* %74, align 8
  br label %763

763:                                              ; preds = %760, %762
  %764 = load i32, i32* %66, align 16
  store i32 %764, i32* %362, align 8
  store i64 0, i64* %363, align 8
  %765 = icmp ult i32 %764, 65
  br i1 %765, label %766, label %769

766:                                              ; preds = %763
  %767 = load i64, i64* %67, align 8
  store i64 %767, i64* %363, align 8
  %768 = inttoptr i64 %767 to i64*
  br label %777

769:                                              ; preds = %763
  %770 = zext i32 %764 to i64
  %771 = add nuw nsw i64 %770, 63
  %772 = lshr i64 %771, 6
  %773 = shl nuw nsw i64 %772, 3
  %774 = call i8* @_Znam(i64 %773) #18
  store i8* %774, i8** %365, align 8
  %775 = load i8*, i8** %343, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %774, i8* align 8 %775, i64 %773, i1 false) #17
  %776 = bitcast i8* %775 to i64*
  br label %777

777:                                              ; preds = %766, %769
  %778 = phi i64* [ %768, %766 ], [ %776, %769 ]
  %779 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLERKS0_(%"class.llvm::APInt"* nonnull %47, %"class.llvm::APInt"* nonnull dereferenceable(16) %16) #20, !noalias !145
  %780 = load i32, i32* %362, align 8, !noalias !145
  %781 = load i64, i64* %363, align 8, !noalias !145
  store i32 0, i32* %362, align 8, !noalias !145
  br i1 %765, label %782, label %785

782:                                              ; preds = %777
  store i64 %781, i64* %67, align 8
  store i32 %780, i32* %66, align 16
  %783 = inttoptr i64 %781 to i8*
  %784 = inttoptr i64 %781 to i64*
  br label %801

785:                                              ; preds = %777
  %786 = icmp eq i64* %778, null
  br i1 %786, label %787, label %790

787:                                              ; preds = %785
  store i64 %781, i64* %67, align 8
  store i32 %780, i32* %66, align 16
  %788 = inttoptr i64 %781 to i8*
  %789 = inttoptr i64 %781 to i64*
  br label %801

790:                                              ; preds = %785
  %791 = bitcast i64* %778 to i8*
  call void @_ZdaPv(i8* %791) #18
  %792 = load i32, i32* %362, align 8
  store i64 %781, i64* %67, align 8
  store i32 %780, i32* %66, align 16
  %793 = icmp ugt i32 %792, 64
  %794 = inttoptr i64 %781 to i8*
  %795 = inttoptr i64 %781 to i64*
  br i1 %793, label %796, label %801

796:                                              ; preds = %790
  %797 = load i64*, i64** %366, align 8
  %798 = icmp eq i64* %797, null
  br i1 %798, label %801, label %799

799:                                              ; preds = %796
  %800 = bitcast i64* %797 to i8*
  call void @_ZdaPv(i8* %800) #18
  br label %801

801:                                              ; preds = %787, %782, %790, %796, %799
  %802 = phi i64* [ %784, %782 ], [ %795, %790 ], [ %795, %796 ], [ %795, %799 ], [ %789, %787 ]
  %803 = phi i8* [ %783, %782 ], [ %794, %790 ], [ %794, %796 ], [ %794, %799 ], [ %788, %787 ]
  store i32 %590, i32* %367, align 8
  store i64 0, i64* %368, align 8
  br i1 %591, label %804, label %805

804:                                              ; preds = %801
  store i64 %607, i64* %368, align 8
  br label %811

805:                                              ; preds = %801
  %806 = zext i32 %590 to i64
  %807 = add nuw nsw i64 %806, 63
  %808 = lshr i64 %807, 6
  %809 = shl nuw nsw i64 %808, 3
  %810 = call i8* @_Znam(i64 %809) #18
  store i8* %810, i8** %370, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %810, i8* align 8 %608, i64 %809, i1 false) #17
  br label %811

811:                                              ; preds = %804, %805
  %812 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLERKS0_(%"class.llvm::APInt"* nonnull %49, %"class.llvm::APInt"* nonnull dereferenceable(16) %18) #20, !noalias !148
  %813 = load i32, i32* %367, align 8, !noalias !148
  store i32 %813, i32* %371, align 8, !alias.scope !148
  %814 = load i64, i64* %368, align 8, !noalias !148
  store i64 %814, i64* %372, align 8, !alias.scope !148
  store i32 0, i32* %367, align 8, !noalias !148
  %815 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLEm(%"class.llvm::APInt"* nonnull %48, i64 1) #20, !noalias !151
  %816 = load i32, i32* %371, align 8, !noalias !151
  %817 = load i64, i64* %372, align 8, !noalias !151
  store i32 0, i32* %371, align 8, !noalias !151
  br i1 %591, label %818, label %820

818:                                              ; preds = %811
  store i64 %817, i64* %70, align 8
  store i32 %816, i32* %69, align 16
  %819 = inttoptr i64 %817 to i64*
  br label %834

820:                                              ; preds = %811
  %821 = icmp eq i64* %606, null
  br i1 %821, label %822, label %824

822:                                              ; preds = %820
  store i64 %817, i64* %70, align 8
  store i32 %816, i32* %69, align 16
  %823 = inttoptr i64 %817 to i64*
  br label %834

824:                                              ; preds = %820
  %825 = bitcast i64* %606 to i8*
  call void @_ZdaPv(i8* %825) #18
  %826 = load i32, i32* %371, align 8
  store i64 %817, i64* %70, align 8
  store i32 %816, i32* %69, align 16
  %827 = icmp ugt i32 %826, 64
  %828 = inttoptr i64 %817 to i64*
  br i1 %827, label %829, label %834

829:                                              ; preds = %824
  %830 = load i64*, i64** %374, align 8
  %831 = icmp eq i64* %830, null
  br i1 %831, label %834, label %832

832:                                              ; preds = %829
  %833 = bitcast i64* %830 to i8*
  call void @_ZdaPv(i8* %833) #18
  br label %834

834:                                              ; preds = %822, %818, %824, %829, %832
  %835 = phi i64* [ %819, %818 ], [ %828, %824 ], [ %828, %829 ], [ %828, %832 ], [ %823, %822 ]
  %836 = load i32, i32* %367, align 8
  %837 = icmp ugt i32 %836, 64
  br i1 %837, label %838, label %843

838:                                              ; preds = %834
  %839 = load i64*, i64** %375, align 8
  %840 = icmp eq i64* %839, null
  br i1 %840, label %843, label %841

841:                                              ; preds = %838
  %842 = bitcast i64* %839 to i8*
  call void @_ZdaPv(i8* %842) #18
  br label %843

843:                                              ; preds = %841, %838, %834, %758, %755, %752
  %844 = phi i64* [ %802, %841 ], [ %802, %838 ], [ %802, %834 ], [ %700, %758 ], [ %700, %755 ], [ %700, %752 ]
  %845 = phi i64* [ %835, %841 ], [ %835, %838 ], [ %835, %834 ], [ %744, %758 ], [ %744, %755 ], [ %744, %752 ]
  %846 = phi i32 [ %816, %841 ], [ %816, %838 ], [ %816, %834 ], [ %725, %758 ], [ %725, %755 ], [ %725, %752 ]
  %847 = phi i64 [ %781, %841 ], [ %781, %838 ], [ %781, %834 ], [ %679, %758 ], [ %679, %755 ], [ %679, %752 ]
  %848 = phi i8* [ %803, %841 ], [ %803, %838 ], [ %803, %834 ], [ %701, %758 ], [ %701, %755 ], [ %701, %752 ]
  %849 = phi i32 [ %780, %841 ], [ %780, %838 ], [ %780, %834 ], [ %678, %758 ], [ %678, %755 ], [ %678, %752 ]
  %850 = load i32, i32* %77, align 8
  store i32 %850, i32* %376, align 8
  store i64 0, i64* %377, align 8
  %851 = icmp ult i32 %850, 65
  br i1 %851, label %852, label %854

852:                                              ; preds = %843
  %853 = load i64, i64* %333, align 8
  store i64 %853, i64* %377, align 8
  br label %861

854:                                              ; preds = %843
  %855 = zext i32 %850 to i64
  %856 = add nuw nsw i64 %855, 63
  %857 = lshr i64 %856, 6
  %858 = shl nuw nsw i64 %857, 3
  %859 = call i8* @_Znam(i64 %858) #18
  store i8* %859, i8** %379, align 8
  %860 = load i8*, i8** %332, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %859, i8* align 8 %860, i64 %858, i1 false) #17
  br label %861

861:                                              ; preds = %852, %854
  %862 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntmIEm(%"class.llvm::APInt"* nonnull %51, i64 1) #20, !noalias !154
  %863 = load i32, i32* %376, align 8, !noalias !154
  store i32 %863, i32* %380, align 8, !alias.scope !154
  %864 = load i64, i64* %377, align 8, !noalias !154
  store i64 %864, i64* %381, align 8, !alias.scope !154
  store i32 0, i32* %376, align 8, !noalias !154
  %865 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntmIERKS0_(%"class.llvm::APInt"* nonnull %50, %"class.llvm::APInt"* nonnull dereferenceable(16) %18) #20, !noalias !157
  %866 = load i32, i32* %380, align 8, !noalias !157
  %867 = load i64, i64* %381, align 8, !noalias !157
  store i32 0, i32* %380, align 8, !noalias !157
  %868 = load i32, i32* %57, align 16
  %869 = icmp ult i32 %868, 65
  br i1 %869, label %870, label %872

870:                                              ; preds = %861
  store i64 %867, i64* %58, align 8
  store i32 %866, i32* %57, align 16
  %871 = inttoptr i64 %867 to i64*
  br label %887

872:                                              ; preds = %861
  %873 = load i64*, i64** %383, align 8
  %874 = icmp eq i64* %873, null
  br i1 %874, label %875, label %877

875:                                              ; preds = %872
  store i64 %867, i64* %58, align 8
  store i32 %866, i32* %57, align 16
  %876 = inttoptr i64 %867 to i64*
  br label %887

877:                                              ; preds = %872
  %878 = bitcast i64* %873 to i8*
  call void @_ZdaPv(i8* %878) #18
  %879 = load i32, i32* %380, align 8
  store i64 %867, i64* %58, align 8
  store i32 %866, i32* %57, align 16
  %880 = icmp ugt i32 %879, 64
  %881 = inttoptr i64 %867 to i64*
  br i1 %880, label %882, label %887

882:                                              ; preds = %877
  %883 = load i64*, i64** %385, align 8
  %884 = icmp eq i64* %883, null
  br i1 %884, label %887, label %885

885:                                              ; preds = %882
  %886 = bitcast i64* %883 to i8*
  call void @_ZdaPv(i8* %886) #18
  br label %887

887:                                              ; preds = %875, %870, %877, %882, %885
  %888 = phi i64* [ %871, %870 ], [ %881, %877 ], [ %881, %882 ], [ %881, %885 ], [ %876, %875 ]
  %889 = load i32, i32* %376, align 8
  %890 = icmp ugt i32 %889, 64
  br i1 %890, label %891, label %896

891:                                              ; preds = %887
  %892 = load i64*, i64** %386, align 8
  %893 = icmp eq i64* %892, null
  br i1 %893, label %896, label %894

894:                                              ; preds = %891
  %895 = bitcast i64* %892 to i8*
  call void @_ZdaPv(i8* %895) #18
  br label %896

896:                                              ; preds = %887, %891, %894
  %897 = load i32, i32* %77, align 8
  %898 = shl i32 %897, 1
  %899 = icmp ult i32 %389, %898
  br i1 %899, label %900, label %929

900:                                              ; preds = %896
  %901 = call zeroext i1 @_ZNK4llvm5APInt3ultERKS0_(%"class.llvm::APInt"* nonnull %12, %"class.llvm::APInt"* nonnull dereferenceable(16) %10) #19
  br i1 %901, label %928, label %902

902:                                              ; preds = %900
  %903 = icmp ult i32 %589, 65
  br i1 %903, label %920, label %904

904:                                              ; preds = %902
  %905 = zext i32 %589 to i64
  %906 = add nuw nsw i64 %905, 63
  %907 = lshr i64 %906, 6
  %908 = getelementptr inbounds i64, i64* %584, i64 %907
  %909 = icmp eq i64 %907, 0
  br i1 %909, label %922, label %910

910:                                              ; preds = %904, %916
  %911 = phi i64* [ %918, %916 ], [ %888, %904 ]
  %912 = phi i64* [ %917, %916 ], [ %584, %904 ]
  %913 = load i64, i64* %912, align 8
  %914 = load i64, i64* %911, align 8
  %915 = icmp eq i64 %913, %914
  br i1 %915, label %916, label %929

916:                                              ; preds = %910
  %917 = getelementptr inbounds i64, i64* %912, i64 1
  %918 = getelementptr inbounds i64, i64* %911, i64 1
  %919 = icmp eq i64* %917, %908
  br i1 %919, label %922, label %910

920:                                              ; preds = %902
  %921 = icmp eq i64 %588, %867
  br i1 %921, label %922, label %929

922:                                              ; preds = %916, %904, %920
  %923 = icmp ult i32 %587, 65
  br i1 %923, label %924, label %926

924:                                              ; preds = %922
  %925 = icmp eq i64 %586, 0
  br i1 %925, label %928, label %929

926:                                              ; preds = %922
  %927 = call zeroext i1 @_ZNK4llvm5APInt13EqualSlowCaseEm(%"class.llvm::APInt"* nonnull %14, i64 0) #20
  br i1 %927, label %928, label %929

928:                                              ; preds = %926, %900, %924
  br label %387

929:                                              ; preds = %924, %920, %896, %926, %910
  %930 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %52, i64 0, i32 0
  store i32 %849, i32* %930, align 8
  %931 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %52, i64 0, i32 1, i32 0
  store i64 0, i64* %931, align 8
  %932 = icmp ult i32 %849, 65
  br i1 %932, label %933, label %934

933:                                              ; preds = %929
  store i64 %847, i64* %931, align 8
  br label %942

934:                                              ; preds = %929
  %935 = zext i32 %849 to i64
  %936 = add nuw nsw i64 %935, 63
  %937 = lshr i64 %936, 6
  %938 = shl nuw nsw i64 %937, 3
  %939 = call i8* @_Znam(i64 %938) #18
  %940 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %52, i64 0, i32 1
  %941 = bitcast %union.anon* %940 to i8**
  store i8* %939, i8** %941, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %939, i8* align 8 %848, i64 %938, i1 false) #17
  br label %942

942:                                              ; preds = %933, %934
  %943 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLEm(%"class.llvm::APInt"* nonnull %52, i64 1) #20, !noalias !160
  %944 = load i32, i32* %930, align 8, !noalias !160
  %945 = load i64, i64* %931, align 8, !noalias !160
  store i32 0, i32* %930, align 8, !noalias !160
  %946 = load i32, i32* %72, align 8
  %947 = icmp ult i32 %946, 65
  br i1 %947, label %953, label %948

948:                                              ; preds = %942
  %949 = getelementptr inbounds %"struct.llvm::APInt::mu", %"struct.llvm::APInt::mu"* %0, i64 0, i32 0, i32 1
  %950 = bitcast %union.anon* %949 to i64**
  %951 = load i64*, i64** %950, align 8
  %952 = icmp eq i64* %951, null
  br i1 %952, label %953, label %954

953:                                              ; preds = %942, %948
  store i64 %945, i64* %73, align 8
  store i32 %944, i32* %72, align 8
  br label %965

954:                                              ; preds = %948
  %955 = bitcast i64* %951 to i8*
  call void @_ZdaPv(i8* %955) #18
  %956 = load i32, i32* %930, align 8
  %957 = icmp ugt i32 %956, 64
  store i64 %945, i64* %73, align 8
  store i32 %944, i32* %72, align 8
  br i1 %957, label %958, label %965

958:                                              ; preds = %954
  %959 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %52, i64 0, i32 1
  %960 = bitcast %union.anon* %959 to i64**
  %961 = load i64*, i64** %960, align 8
  %962 = icmp eq i64* %961, null
  br i1 %962, label %965, label %963

963:                                              ; preds = %958
  %964 = bitcast i64* %961 to i8*
  call void @_ZdaPv(i8* %964) #18
  br label %965

965:                                              ; preds = %953, %954, %958, %963
  %966 = load i32, i32* %77, align 8
  %967 = sub i32 %389, %966
  %968 = getelementptr inbounds %"struct.llvm::APInt::mu", %"struct.llvm::APInt::mu"* %0, i64 0, i32 2
  store i32 %967, i32* %968, align 4
  %969 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %22, i64 0, i32 0
  %970 = load i32, i32* %969, align 8
  %971 = icmp ugt i32 %970, 64
  br i1 %971, label %972, label %979

972:                                              ; preds = %965
  %973 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %22, i64 0, i32 1
  %974 = bitcast %union.anon* %973 to i64**
  %975 = load i64*, i64** %974, align 8
  %976 = icmp eq i64* %975, null
  br i1 %976, label %979, label %977

977:                                              ; preds = %972
  %978 = bitcast i64* %975 to i8*
  call void @_ZdaPv(i8* %978) #18
  br label %979

979:                                              ; preds = %965, %972, %977
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %92) #17
  %980 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %21, i64 0, i32 0
  %981 = load i32, i32* %980, align 8
  %982 = icmp ugt i32 %981, 64
  br i1 %982, label %983, label %990

983:                                              ; preds = %979
  %984 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %21, i64 0, i32 1
  %985 = bitcast %union.anon* %984 to i64**
  %986 = load i64*, i64** %985, align 8
  %987 = icmp eq i64* %986, null
  br i1 %987, label %990, label %988

988:                                              ; preds = %983
  %989 = bitcast i64* %986 to i8*
  call void @_ZdaPv(i8* %989) #18
  br label %990

990:                                              ; preds = %979, %983, %988
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %90) #17
  %991 = load i32, i32* %97, align 8
  %992 = icmp ugt i32 %991, 64
  br i1 %992, label %993, label %1000

993:                                              ; preds = %990
  %994 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %19, i64 0, i32 1
  %995 = bitcast %union.anon* %994 to i64**
  %996 = load i64*, i64** %995, align 8
  %997 = icmp eq i64* %996, null
  br i1 %997, label %1000, label %998

998:                                              ; preds = %993
  %999 = bitcast i64* %996 to i8*
  call void @_ZdaPv(i8* %999) #18
  br label %1000

1000:                                             ; preds = %990, %993, %998
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %75) #17
  %1001 = icmp ult i32 %846, 65
  %1002 = icmp eq i64* %845, null
  %1003 = or i1 %1001, %1002
  br i1 %1003, label %1006, label %1004

1004:                                             ; preds = %1000
  %1005 = bitcast i64* %845 to i8*
  call void @_ZdaPv(i8* %1005) #18
  br label %1006

1006:                                             ; preds = %1000, %1004
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %68) #17
  %1007 = icmp ult i32 %849, 65
  %1008 = icmp eq i64* %844, null
  %1009 = or i1 %1007, %1008
  br i1 %1009, label %1012, label %1010

1010:                                             ; preds = %1006
  %1011 = bitcast i64* %844 to i8*
  call void @_ZdaPv(i8* %1011) #18
  br label %1012

1012:                                             ; preds = %1006, %1010
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %65) #17
  %1013 = icmp ult i32 %587, 65
  %1014 = icmp eq i64* %585, null
  %1015 = or i1 %1013, %1014
  br i1 %1015, label %1018, label %1016

1016:                                             ; preds = %1012
  %1017 = bitcast i64* %585 to i8*
  call void @_ZdaPv(i8* %1017) #18
  br label %1018

1018:                                             ; preds = %1012, %1016
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %62) #17
  %1019 = icmp ult i32 %589, 65
  %1020 = icmp eq i64* %584, null
  %1021 = or i1 %1019, %1020
  br i1 %1021, label %1024, label %1022

1022:                                             ; preds = %1018
  %1023 = bitcast i64* %584 to i8*
  call void @_ZdaPv(i8* %1023) #18
  br label %1024

1024:                                             ; preds = %1018, %1022
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %59) #17
  %1025 = icmp ult i32 %866, 65
  %1026 = icmp eq i64* %888, null
  %1027 = or i1 %1025, %1026
  br i1 %1027, label %1030, label %1028

1028:                                             ; preds = %1024
  %1029 = bitcast i64* %888 to i8*
  call void @_ZdaPv(i8* %1029) #18
  br label %1030

1030:                                             ; preds = %1024, %1028
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %56) #17
  %1031 = load i32, i32* %54, align 16
  %1032 = icmp ugt i32 %1031, 64
  br i1 %1032, label %1033, label %1039

1033:                                             ; preds = %1030
  %1034 = bitcast %union.anon* %280 to i64**
  %1035 = load i64*, i64** %1034, align 8
  %1036 = icmp eq i64* %1035, null
  br i1 %1036, label %1039, label %1037

1037:                                             ; preds = %1033
  %1038 = bitcast i64* %1035 to i8*
  call void @_ZdaPv(i8* %1038) #18
  br label %1039

1039:                                             ; preds = %1030, %1033, %1037
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %53) #17
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm5APInt17getSignedMaxValueEj(%"class.llvm::APInt"* noalias sret, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.llvm::APInt"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 -86, i64 16, i1 false)
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %1, i64 -1, i1 zeroext true) #20
  %4 = add i32 %1, -1
  %5 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp ult i32 %6, 65
  %8 = and i32 %4, 63
  %9 = zext i32 %8 to i64
  %10 = shl i64 1, %9
  %11 = xor i64 %10, -1
  %12 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %13 = getelementptr inbounds %union.anon, %union.anon* %12, i64 0, i32 0
  %14 = bitcast %union.anon* %12 to i64**
  %15 = load i64*, i64** %14, align 8
  %16 = lshr i32 %4, 6
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds i64, i64* %15, i64 %17
  %19 = select i1 %7, i64* %13, i64* %18
  %20 = select i1 %7, i64* %13, i64* %18
  %21 = load i64, i64* %19, align 8
  %22 = and i64 %21, %11
  store i64 %22, i64* %20, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm5APInt6divideERKS0_jS2_jPS0_S3_(%"class.llvm::APInt"* nocapture readonly dereferenceable(16), i32, %"class.llvm::APInt"* nocapture readonly dereferenceable(16), i32, %"class.llvm::APInt"*, %"class.llvm::APInt"*) local_unnamed_addr #0 align 2 {
  %7 = alloca [128 x i32], align 16
  %8 = shl i32 %3, 1
  %9 = shl i32 %1, 1
  %10 = sub i32 %9, %8
  %11 = bitcast [128 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %11) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 512, i1 false)
  %12 = icmp ne %"class.llvm::APInt"* %5, null
  %13 = select i1 %12, i32 4, i32 3
  %14 = mul i32 %13, %8
  %15 = shl i32 %10, 1
  %16 = add i32 %14, %15
  %17 = or i32 %16, 1
  %18 = icmp ult i32 %17, 129
  br i1 %18, label %19, label %31

19:                                               ; preds = %6
  %20 = getelementptr inbounds [128 x i32], [128 x i32]* %7, i64 0, i64 0
  %21 = or i32 %9, 1
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds [128 x i32], [128 x i32]* %7, i64 0, i64 %22
  %24 = add i32 %8, %21
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds [128 x i32], [128 x i32]* %7, i64 0, i64 %25
  br i1 %12, label %27, label %48

27:                                               ; preds = %19
  %28 = add i32 %24, %9
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds [128 x i32], [128 x i32]* %7, i64 0, i64 %29
  br label %48

31:                                               ; preds = %6
  %32 = or i32 %9, 1
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 2
  %35 = tail call i8* @_Znam(i64 %34) #18
  %36 = bitcast i8* %35 to i32*
  %37 = zext i32 %8 to i64
  %38 = shl nuw nsw i64 %37, 2
  %39 = tail call i8* @_Znam(i64 %38) #18
  %40 = bitcast i8* %39 to i32*
  %41 = zext i32 %9 to i64
  %42 = shl nuw nsw i64 %41, 2
  %43 = tail call i8* @_Znam(i64 %42) #18
  %44 = bitcast i8* %43 to i32*
  br i1 %12, label %45, label %48

45:                                               ; preds = %31
  %46 = tail call i8* @_Znam(i64 %38) #18
  %47 = bitcast i8* %46 to i32*
  br label %48

48:                                               ; preds = %31, %45, %19, %27
  %49 = phi i64 [ %33, %31 ], [ %33, %45 ], [ %22, %19 ], [ %22, %27 ]
  %50 = phi i32* [ %36, %31 ], [ %36, %45 ], [ %20, %19 ], [ %20, %27 ]
  %51 = phi i32* [ %40, %31 ], [ %40, %45 ], [ %23, %19 ], [ %23, %27 ]
  %52 = phi i32* [ %44, %31 ], [ %44, %45 ], [ %26, %19 ], [ %26, %27 ]
  %53 = phi i32* [ null, %31 ], [ %47, %45 ], [ null, %19 ], [ %30, %27 ]
  %54 = bitcast i32* %50 to i8*
  %55 = shl nuw nsw i64 %49, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %54, i8 0, i64 %55, i1 false)
  %56 = icmp eq i32 %1, 0
  br i1 %56, label %69, label %57

57:                                               ; preds = %48
  %58 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %59 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %60 = getelementptr inbounds %union.anon, %union.anon* %59, i64 0, i32 0
  %61 = bitcast %union.anon* %59 to i64**
  %62 = zext i32 %1 to i64
  %63 = load i32, i32* %58, align 8
  %64 = load i64*, i64** %61, align 8
  %65 = zext i32 %63 to i64
  %66 = add nuw nsw i64 %65, 63
  %67 = and i64 %66, 8589934528
  %68 = icmp eq i64 %67, 64
  br label %88

69:                                               ; preds = %88, %48
  %70 = zext i32 %9 to i64
  %71 = getelementptr inbounds i32, i32* %50, i64 %70
  store i32 0, i32* %71, align 4
  %72 = bitcast i32* %51 to i8*
  %73 = zext i32 %8 to i64
  %74 = shl nuw nsw i64 %73, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %72, i8 0, i64 %74, i1 false)
  %75 = icmp eq i32 %3, 0
  br i1 %75, label %105, label %76

76:                                               ; preds = %69
  %77 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 0
  %78 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1
  %79 = getelementptr inbounds %union.anon, %union.anon* %78, i64 0, i32 0
  %80 = bitcast %union.anon* %78 to i64**
  %81 = zext i32 %3 to i64
  %82 = load i32, i32* %77, align 8
  %83 = load i64*, i64** %80, align 8
  %84 = zext i32 %82 to i64
  %85 = add nuw nsw i64 %84, 63
  %86 = and i64 %85, 8589934528
  %87 = icmp eq i64 %86, 64
  br label %108

88:                                               ; preds = %88, %57
  %89 = phi i64 [ 0, %57 ], [ %103, %88 ]
  %90 = getelementptr inbounds i64, i64* %64, i64 %89
  %91 = select i1 %68, i64* %60, i64* %90
  %92 = load i64, i64* %91, align 8
  %93 = trunc i64 %92 to i32
  %94 = trunc i64 %89 to i32
  %95 = shl i32 %94, 1
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds i32, i32* %50, i64 %96
  store i32 %93, i32* %97, align 4
  %98 = lshr i64 %92, 32
  %99 = trunc i64 %98 to i32
  %100 = or i32 %95, 1
  %101 = zext i32 %100 to i64
  %102 = getelementptr inbounds i32, i32* %50, i64 %101
  store i32 %99, i32* %102, align 4
  %103 = add nuw nsw i64 %89, 1
  %104 = icmp eq i64 %103, %62
  br i1 %104, label %69, label %88

105:                                              ; preds = %108, %69
  %106 = bitcast i32* %52 to i8*
  %107 = shl nuw nsw i64 %70, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %106, i8 0, i64 %107, i1 false)
  br i1 %12, label %125, label %127

108:                                              ; preds = %108, %76
  %109 = phi i64 [ 0, %76 ], [ %123, %108 ]
  %110 = getelementptr inbounds i64, i64* %83, i64 %109
  %111 = select i1 %87, i64* %79, i64* %110
  %112 = load i64, i64* %111, align 8
  %113 = trunc i64 %112 to i32
  %114 = trunc i64 %109 to i32
  %115 = shl i32 %114, 1
  %116 = zext i32 %115 to i64
  %117 = getelementptr inbounds i32, i32* %51, i64 %116
  store i32 %113, i32* %117, align 4
  %118 = lshr i64 %112, 32
  %119 = trunc i64 %118 to i32
  %120 = or i32 %115, 1
  %121 = zext i32 %120 to i64
  %122 = getelementptr inbounds i32, i32* %51, i64 %121
  store i32 %119, i32* %122, align 4
  %123 = add nuw nsw i64 %109, 1
  %124 = icmp eq i64 %123, %81
  br i1 %124, label %105, label %108

125:                                              ; preds = %105
  %126 = bitcast i32* %53 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %126, i8 0, i64 %74, i1 false)
  br label %127

127:                                              ; preds = %125, %105
  %128 = icmp eq i32 %8, 0
  br i1 %128, label %137, label %129

129:                                              ; preds = %127, %144
  %130 = phi i32 [ %132, %144 ], [ %8, %127 ]
  %131 = phi i32 [ %145, %144 ], [ %10, %127 ]
  %132 = add i32 %130, -1
  %133 = zext i32 %132 to i64
  %134 = getelementptr inbounds i32, i32* %51, i64 %133
  %135 = load i32, i32* %134, align 4
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %144, label %137

137:                                              ; preds = %129, %144, %127
  %138 = phi i32 [ %10, %127 ], [ %145, %144 ], [ %131, %129 ]
  %139 = phi i32 [ 0, %127 ], [ 0, %144 ], [ %130, %129 ]
  %140 = add i32 %139, %138
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %156, label %142

142:                                              ; preds = %137
  %143 = zext i32 %140 to i64
  br label %147

144:                                              ; preds = %129
  %145 = add i32 %131, 1
  %146 = icmp eq i32 %132, 0
  br i1 %146, label %137, label %129

147:                                              ; preds = %142, %159
  %148 = phi i64 [ %143, %142 ], [ %162, %159 ]
  %149 = phi i32 [ %138, %142 ], [ %160, %159 ]
  %150 = trunc i64 %148 to i32
  %151 = add i32 %150, -1
  %152 = zext i32 %151 to i64
  %153 = getelementptr inbounds i32, i32* %50, i64 %152
  %154 = load i32, i32* %153, align 4
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %159, label %156

156:                                              ; preds = %147, %159, %137
  %157 = phi i32 [ %138, %137 ], [ %160, %159 ], [ %149, %147 ]
  %158 = icmp eq i32 %139, 1
  br i1 %158, label %163, label %203

159:                                              ; preds = %147
  %160 = add i32 %149, -1
  %161 = icmp eq i32 %151, 0
  %162 = add nsw i64 %148, -1
  br i1 %161, label %156, label %147

163:                                              ; preds = %156
  %164 = load i32, i32* %51, align 4
  %165 = icmp sgt i32 %157, -1
  br i1 %165, label %166, label %169

166:                                              ; preds = %163
  %167 = zext i32 %164 to i64
  %168 = sext i32 %157 to i64
  br label %172

169:                                              ; preds = %198, %163
  %170 = phi i32 [ 0, %163 ], [ %199, %198 ]
  %171 = icmp eq i32* %53, null
  br i1 %171, label %403, label %202

172:                                              ; preds = %166, %198
  %173 = phi i64 [ %168, %166 ], [ %200, %198 ]
  %174 = phi i32 [ 0, %166 ], [ %199, %198 ]
  %175 = zext i32 %174 to i64
  %176 = shl nuw i64 %175, 32
  %177 = getelementptr inbounds i32, i32* %50, i64 %173
  %178 = load i32, i32* %177, align 4
  %179 = zext i32 %178 to i64
  %180 = or i64 %176, %179
  %181 = icmp eq i64 %180, 0
  br i1 %181, label %182, label %184

182:                                              ; preds = %172
  %183 = getelementptr inbounds i32, i32* %52, i64 %173
  store i32 0, i32* %183, align 4
  br label %198

184:                                              ; preds = %172
  %185 = icmp ult i64 %180, %167
  br i1 %185, label %186, label %188

186:                                              ; preds = %184
  %187 = getelementptr inbounds i32, i32* %52, i64 %173
  store i32 0, i32* %187, align 4
  br label %198

188:                                              ; preds = %184
  %189 = icmp eq i64 %180, %167
  br i1 %189, label %190, label %192

190:                                              ; preds = %188
  %191 = getelementptr inbounds i32, i32* %52, i64 %173
  store i32 1, i32* %191, align 4
  br label %198

192:                                              ; preds = %188
  %193 = udiv i64 %180, %167
  %194 = trunc i64 %193 to i32
  %195 = getelementptr inbounds i32, i32* %52, i64 %173
  store i32 %194, i32* %195, align 4
  %196 = mul i32 %164, %194
  %197 = sub i32 %178, %196
  br label %198

198:                                              ; preds = %186, %192, %190, %182
  %199 = phi i32 [ 0, %182 ], [ %178, %186 ], [ 0, %190 ], [ %197, %192 ]
  %200 = add nsw i64 %173, -1
  %201 = icmp sgt i64 %173, 0
  br i1 %201, label %172, label %169

202:                                              ; preds = %169
  store i32 %170, i32* %53, align 4
  br label %403

203:                                              ; preds = %156
  %204 = add i32 %139, -1
  %205 = zext i32 %204 to i64
  %206 = getelementptr inbounds i32, i32* %51, i64 %205
  %207 = load i32, i32* %206, align 4
  %208 = tail call i32 @llvm.ctlz.i32(i32 %207, i1 false) #17, !range !163
  %209 = icmp ne i32 %208, 0
  %210 = add i32 %157, %139
  br i1 %209, label %211, label %242

211:                                              ; preds = %203
  %212 = icmp eq i32 %210, 0
  br i1 %212, label %216, label %213

213:                                              ; preds = %211
  %214 = sub nuw nsw i32 32, %208
  %215 = zext i32 %210 to i64
  br label %222

216:                                              ; preds = %222, %211
  %217 = phi i32 [ 0, %211 ], [ %227, %222 ]
  %218 = icmp eq i32 %139, 0
  br i1 %218, label %242, label %219

219:                                              ; preds = %216
  %220 = sub nuw nsw i32 32, %208
  %221 = zext i32 %139 to i64
  br label %232

222:                                              ; preds = %222, %213
  %223 = phi i64 [ 0, %213 ], [ %230, %222 ]
  %224 = phi i32 [ 0, %213 ], [ %227, %222 ]
  %225 = getelementptr inbounds i32, i32* %50, i64 %223
  %226 = load i32, i32* %225, align 4
  %227 = lshr i32 %226, %214
  %228 = shl i32 %226, %208
  %229 = or i32 %228, %224
  store i32 %229, i32* %225, align 4
  %230 = add nuw nsw i64 %223, 1
  %231 = icmp eq i64 %230, %215
  br i1 %231, label %216, label %222

232:                                              ; preds = %232, %219
  %233 = phi i64 [ 0, %219 ], [ %240, %232 ]
  %234 = phi i32 [ 0, %219 ], [ %237, %232 ]
  %235 = getelementptr inbounds i32, i32* %51, i64 %233
  %236 = load i32, i32* %235, align 4
  %237 = lshr i32 %236, %220
  %238 = shl i32 %236, %208
  %239 = or i32 %238, %234
  store i32 %239, i32* %235, align 4
  %240 = add nuw nsw i64 %233, 1
  %241 = icmp eq i64 %240, %221
  br i1 %241, label %242, label %232

242:                                              ; preds = %232, %216, %203
  %243 = phi i32 [ %217, %216 ], [ 0, %203 ], [ %217, %232 ]
  %244 = zext i32 %210 to i64
  %245 = getelementptr inbounds i32, i32* %50, i64 %244
  store i32 %243, i32* %245, align 4
  %246 = add i32 %139, -2
  %247 = zext i32 %246 to i64
  %248 = getelementptr inbounds i32, i32* %51, i64 %247
  %249 = icmp eq i32 %139, 0
  %250 = sext i32 %157 to i64
  %251 = zext i32 %139 to i64
  br label %252

252:                                              ; preds = %370, %242
  %253 = phi i64 [ %371, %370 ], [ %250, %242 ]
  %254 = trunc i64 %253 to i32
  %255 = add i32 %139, %254
  %256 = zext i32 %255 to i64
  %257 = getelementptr inbounds i32, i32* %50, i64 %256
  %258 = load i32, i32* %257, align 4
  %259 = zext i32 %258 to i64
  %260 = shl nuw i64 %259, 32
  %261 = add i32 %255, -1
  %262 = zext i32 %261 to i64
  %263 = getelementptr inbounds i32, i32* %50, i64 %262
  %264 = load i32, i32* %263, align 4
  %265 = zext i32 %264 to i64
  %266 = or i64 %260, %265
  %267 = load i32, i32* %206, align 4
  %268 = zext i32 %267 to i64
  %269 = udiv i64 %266, %268
  %270 = urem i64 %266, %268
  %271 = icmp eq i64 %269, 4294967296
  br i1 %271, label %284, label %272

272:                                              ; preds = %252
  %273 = load i32, i32* %248, align 4
  %274 = zext i32 %273 to i64
  %275 = mul i64 %269, %274
  %276 = shl nuw i64 %270, 32
  %277 = add i32 %255, -2
  %278 = zext i32 %277 to i64
  %279 = getelementptr inbounds i32, i32* %50, i64 %278
  %280 = load i32, i32* %279, align 4
  %281 = zext i32 %280 to i64
  %282 = or i64 %276, %281
  %283 = icmp ugt i64 %275, %282
  br i1 %283, label %284, label %304

284:                                              ; preds = %272, %252
  %285 = add i64 %269, -1
  %286 = add nuw nsw i64 %270, %268
  %287 = icmp ult i64 %286, 4294967296
  br i1 %287, label %288, label %304

288:                                              ; preds = %284
  %289 = icmp eq i64 %285, 4294967296
  br i1 %289, label %302, label %290

290:                                              ; preds = %288
  %291 = load i32, i32* %248, align 4
  %292 = zext i32 %291 to i64
  %293 = mul i64 %285, %292
  %294 = shl i64 %286, 32
  %295 = add i32 %255, -2
  %296 = zext i32 %295 to i64
  %297 = getelementptr inbounds i32, i32* %50, i64 %296
  %298 = load i32, i32* %297, align 4
  %299 = zext i32 %298 to i64
  %300 = or i64 %294, %299
  %301 = icmp ugt i64 %293, %300
  br i1 %301, label %302, label %304

302:                                              ; preds = %290, %288
  %303 = add i64 %269, -2
  br label %304

304:                                              ; preds = %302, %290, %284, %272
  %305 = phi i64 [ %303, %302 ], [ %285, %290 ], [ %285, %284 ], [ %269, %272 ]
  br i1 %249, label %309, label %318

306:                                              ; preds = %318
  %307 = load i32, i32* %257, align 4
  %308 = zext i32 %307 to i64
  br label %309

309:                                              ; preds = %306, %304
  %310 = phi i64 [ %308, %306 ], [ %259, %304 ]
  %311 = phi i32 [ %307, %306 ], [ %258, %304 ]
  %312 = phi i64 [ %336, %306 ], [ 0, %304 ]
  %313 = icmp sgt i64 %312, %310
  %314 = trunc i64 %312 to i32
  %315 = sub i32 %311, %314
  store i32 %315, i32* %257, align 4
  %316 = trunc i64 %305 to i32
  %317 = getelementptr inbounds i32, i32* %52, i64 %253
  store i32 %316, i32* %317, align 4
  br i1 %313, label %339, label %370

318:                                              ; preds = %304, %318
  %319 = phi i64 [ %337, %318 ], [ 0, %304 ]
  %320 = phi i64 [ %336, %318 ], [ 0, %304 ]
  %321 = getelementptr inbounds i32, i32* %51, i64 %319
  %322 = load i32, i32* %321, align 4
  %323 = zext i32 %322 to i64
  %324 = mul i64 %305, %323
  %325 = add nsw i64 %319, %253
  %326 = and i64 %325, 4294967295
  %327 = getelementptr inbounds i32, i32* %50, i64 %326
  %328 = load i32, i32* %327, align 4
  %329 = zext i32 %328 to i64
  %330 = sub nsw i64 %329, %320
  %331 = and i64 %324, 4294967295
  %332 = sub nsw i64 %330, %331
  %333 = trunc i64 %332 to i32
  store i32 %333, i32* %327, align 4
  %334 = lshr i64 %324, 32
  %335 = ashr i64 %332, 32
  %336 = sub nsw i64 %334, %335
  %337 = add nuw nsw i64 %319, 1
  %338 = icmp eq i64 %337, %251
  br i1 %338, label %306, label %318

339:                                              ; preds = %309
  %340 = add i32 %316, -1
  store i32 %340, i32* %317, align 4
  br i1 %249, label %341, label %346

341:                                              ; preds = %365, %339
  %342 = phi i8 [ 0, %339 ], [ %367, %365 ]
  %343 = zext i8 %342 to i32
  %344 = load i32, i32* %257, align 4
  %345 = add i32 %344, %343
  store i32 %345, i32* %257, align 4
  br label %370

346:                                              ; preds = %339, %365
  %347 = phi i64 [ %368, %365 ], [ 0, %339 ]
  %348 = phi i8 [ %367, %365 ], [ 0, %339 ]
  %349 = add nsw i64 %347, %253
  %350 = and i64 %349, 4294967295
  %351 = getelementptr inbounds i32, i32* %50, i64 %350
  %352 = getelementptr inbounds i32, i32* %51, i64 %347
  %353 = load i32, i32* %352, align 4
  %354 = load i32, i32* %351, align 4
  %355 = icmp ult i32 %353, %354
  %356 = select i1 %355, i32 %353, i32 %354
  %357 = zext i8 %348 to i32
  %358 = add i32 %353, %357
  %359 = add i32 %358, %354
  store i32 %359, i32* %351, align 4
  %360 = icmp ult i32 %359, %356
  br i1 %360, label %365, label %361

361:                                              ; preds = %346
  %362 = icmp ne i8 %348, 0
  %363 = icmp eq i32 %359, %356
  %364 = and i1 %362, %363
  br label %365

365:                                              ; preds = %361, %346
  %366 = phi i1 [ true, %346 ], [ %364, %361 ]
  %367 = zext i1 %366 to i8
  %368 = add nuw nsw i64 %347, 1
  %369 = icmp eq i64 %368, %251
  br i1 %369, label %341, label %346

370:                                              ; preds = %341, %309
  %371 = add nsw i64 %253, -1
  %372 = icmp sgt i64 %253, 0
  br i1 %372, label %252, label %373

373:                                              ; preds = %370
  %374 = icmp eq i32* %53, null
  br i1 %374, label %403, label %375

375:                                              ; preds = %373
  %376 = icmp sgt i32 %204, -1
  br i1 %209, label %380, label %377

377:                                              ; preds = %375
  br i1 %376, label %378, label %403

378:                                              ; preds = %377
  %379 = sext i32 %204 to i64
  br label %396

380:                                              ; preds = %375
  br i1 %376, label %381, label %403

381:                                              ; preds = %380
  %382 = sub nuw nsw i32 32, %208
  %383 = sext i32 %204 to i64
  br label %384

384:                                              ; preds = %384, %381
  %385 = phi i64 [ %383, %381 ], [ %394, %384 ]
  %386 = phi i32 [ 0, %381 ], [ %393, %384 ]
  %387 = getelementptr inbounds i32, i32* %50, i64 %385
  %388 = load i32, i32* %387, align 4
  %389 = lshr i32 %388, %208
  %390 = or i32 %389, %386
  %391 = getelementptr inbounds i32, i32* %53, i64 %385
  store i32 %390, i32* %391, align 4
  %392 = load i32, i32* %387, align 4
  %393 = shl i32 %392, %382
  %394 = add nsw i64 %385, -1
  %395 = icmp sgt i64 %385, 0
  br i1 %395, label %384, label %403

396:                                              ; preds = %396, %378
  %397 = phi i64 [ %379, %378 ], [ %401, %396 ]
  %398 = getelementptr inbounds i32, i32* %50, i64 %397
  %399 = load i32, i32* %398, align 4
  %400 = getelementptr inbounds i32, i32* %53, i64 %397
  store i32 %399, i32* %400, align 4
  %401 = add nsw i64 %397, -1
  %402 = icmp sgt i64 %397, 0
  br i1 %402, label %396, label %403

403:                                              ; preds = %396, %384, %380, %377, %373, %202, %169
  %404 = icmp eq %"class.llvm::APInt"* %4, null
  br i1 %404, label %482, label %405

405:                                              ; preds = %403
  %406 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %4, i64 0, i32 0
  %407 = load i32, i32* %406, align 8
  %408 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %409 = load i32, i32* %408, align 8
  %410 = icmp eq i32 %407, %409
  %411 = icmp ult i32 %407, 65
  %412 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %4, i64 0, i32 1
  br i1 %410, label %432, label %413

413:                                              ; preds = %405
  br i1 %411, label %414, label %416

414:                                              ; preds = %413
  %415 = getelementptr inbounds %union.anon, %union.anon* %412, i64 0, i32 0
  store i64 0, i64* %415, align 8
  br label %422

416:                                              ; preds = %413
  %417 = bitcast %union.anon* %412 to i64**
  %418 = load i64*, i64** %417, align 8
  %419 = icmp eq i64* %418, null
  br i1 %419, label %422, label %420

420:                                              ; preds = %416
  %421 = bitcast i64* %418 to i8*
  call void @_ZdaPv(i8* %421) #18
  br label %422

422:                                              ; preds = %416, %420, %414
  %423 = load i32, i32* %408, align 8
  store i32 %423, i32* %406, align 8
  %424 = icmp ult i32 %423, 65
  br i1 %424, label %442, label %425

425:                                              ; preds = %422
  %426 = zext i32 %423 to i64
  %427 = add nuw nsw i64 %426, 63
  %428 = lshr i64 %427, 6
  %429 = shl nuw nsw i64 %428, 3
  %430 = call i8* @_Znam(i64 %429) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %430, i8 0, i64 %429, i1 false) #17
  %431 = bitcast %union.anon* %412 to i8**
  store i8* %430, i8** %431, align 8
  br label %442

432:                                              ; preds = %405
  br i1 %411, label %433, label %435

433:                                              ; preds = %432
  %434 = getelementptr inbounds %union.anon, %union.anon* %412, i64 0, i32 0
  store i64 0, i64* %434, align 8
  br label %442

435:                                              ; preds = %432
  %436 = bitcast %union.anon* %412 to i8**
  %437 = load i8*, i8** %436, align 8
  %438 = zext i32 %407 to i64
  %439 = add nuw nsw i64 %438, 63
  %440 = lshr i64 %439, 3
  %441 = and i64 %440, 1073741816
  call void @llvm.memset.p0i8.i64(i8* align 8 %437, i8 0, i64 %441, i1 false) #17
  br label %442

442:                                              ; preds = %435, %433, %422, %425
  %443 = icmp eq i32 %1, 1
  br i1 %443, label %448, label %444

444:                                              ; preds = %442
  br i1 %56, label %482, label %445

445:                                              ; preds = %444
  %446 = bitcast %union.anon* %412 to i64**
  %447 = zext i32 %1 to i64
  br label %463

448:                                              ; preds = %442
  %449 = load i32, i32* %52, align 4
  %450 = zext i32 %449 to i64
  %451 = getelementptr inbounds i32, i32* %52, i64 1
  %452 = load i32, i32* %451, align 4
  %453 = zext i32 %452 to i64
  %454 = shl nuw i64 %453, 32
  %455 = or i64 %454, %450
  %456 = load i32, i32* %406, align 8
  %457 = icmp ult i32 %456, 65
  br i1 %457, label %458, label %460

458:                                              ; preds = %448
  %459 = getelementptr inbounds %union.anon, %union.anon* %412, i64 0, i32 0
  store i64 %455, i64* %459, align 8
  br label %482

460:                                              ; preds = %448
  %461 = bitcast %union.anon* %412 to i64**
  %462 = load i64*, i64** %461, align 8
  store i64 %455, i64* %462, align 8
  br label %482

463:                                              ; preds = %463, %445
  %464 = phi i64 [ 0, %445 ], [ %480, %463 ]
  %465 = trunc i64 %464 to i32
  %466 = shl i32 %465, 1
  %467 = zext i32 %466 to i64
  %468 = getelementptr inbounds i32, i32* %52, i64 %467
  %469 = load i32, i32* %468, align 4
  %470 = zext i32 %469 to i64
  %471 = or i32 %466, 1
  %472 = zext i32 %471 to i64
  %473 = getelementptr inbounds i32, i32* %52, i64 %472
  %474 = load i32, i32* %473, align 4
  %475 = zext i32 %474 to i64
  %476 = shl nuw i64 %475, 32
  %477 = or i64 %476, %470
  %478 = load i64*, i64** %446, align 8
  %479 = getelementptr inbounds i64, i64* %478, i64 %464
  store i64 %477, i64* %479, align 8
  %480 = add nuw nsw i64 %464, 1
  %481 = icmp eq i64 %480, %447
  br i1 %481, label %482, label %463

482:                                              ; preds = %463, %444, %458, %460, %403
  br i1 %12, label %483, label %560

483:                                              ; preds = %482
  %484 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 0
  %485 = load i32, i32* %484, align 8
  %486 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 0
  %487 = load i32, i32* %486, align 8
  %488 = icmp eq i32 %485, %487
  %489 = icmp ult i32 %485, 65
  %490 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1
  br i1 %488, label %510, label %491

491:                                              ; preds = %483
  br i1 %489, label %492, label %494

492:                                              ; preds = %491
  %493 = getelementptr inbounds %union.anon, %union.anon* %490, i64 0, i32 0
  store i64 0, i64* %493, align 8
  br label %500

494:                                              ; preds = %491
  %495 = bitcast %union.anon* %490 to i64**
  %496 = load i64*, i64** %495, align 8
  %497 = icmp eq i64* %496, null
  br i1 %497, label %500, label %498

498:                                              ; preds = %494
  %499 = bitcast i64* %496 to i8*
  call void @_ZdaPv(i8* %499) #18
  br label %500

500:                                              ; preds = %494, %498, %492
  %501 = load i32, i32* %486, align 8
  store i32 %501, i32* %484, align 8
  %502 = icmp ult i32 %501, 65
  br i1 %502, label %520, label %503

503:                                              ; preds = %500
  %504 = zext i32 %501 to i64
  %505 = add nuw nsw i64 %504, 63
  %506 = lshr i64 %505, 6
  %507 = shl nuw nsw i64 %506, 3
  %508 = call i8* @_Znam(i64 %507) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %508, i8 0, i64 %507, i1 false) #17
  %509 = bitcast %union.anon* %490 to i8**
  store i8* %508, i8** %509, align 8
  br label %520

510:                                              ; preds = %483
  br i1 %489, label %511, label %513

511:                                              ; preds = %510
  %512 = getelementptr inbounds %union.anon, %union.anon* %490, i64 0, i32 0
  store i64 0, i64* %512, align 8
  br label %520

513:                                              ; preds = %510
  %514 = bitcast %union.anon* %490 to i8**
  %515 = load i8*, i8** %514, align 8
  %516 = zext i32 %485 to i64
  %517 = add nuw nsw i64 %516, 63
  %518 = lshr i64 %517, 3
  %519 = and i64 %518, 1073741816
  call void @llvm.memset.p0i8.i64(i8* align 8 %515, i8 0, i64 %519, i1 false) #17
  br label %520

520:                                              ; preds = %513, %511, %500, %503
  %521 = icmp eq i32 %3, 1
  br i1 %521, label %526, label %522

522:                                              ; preds = %520
  br i1 %75, label %560, label %523

523:                                              ; preds = %522
  %524 = bitcast %union.anon* %490 to i64**
  %525 = zext i32 %3 to i64
  br label %541

526:                                              ; preds = %520
  %527 = load i32, i32* %53, align 4
  %528 = zext i32 %527 to i64
  %529 = getelementptr inbounds i32, i32* %53, i64 1
  %530 = load i32, i32* %529, align 4
  %531 = zext i32 %530 to i64
  %532 = shl nuw i64 %531, 32
  %533 = or i64 %532, %528
  %534 = load i32, i32* %484, align 8
  %535 = icmp ult i32 %534, 65
  br i1 %535, label %536, label %538

536:                                              ; preds = %526
  %537 = getelementptr inbounds %union.anon, %union.anon* %490, i64 0, i32 0
  store i64 %533, i64* %537, align 8
  br label %560

538:                                              ; preds = %526
  %539 = bitcast %union.anon* %490 to i64**
  %540 = load i64*, i64** %539, align 8
  store i64 %533, i64* %540, align 8
  br label %560

541:                                              ; preds = %541, %523
  %542 = phi i64 [ 0, %523 ], [ %558, %541 ]
  %543 = trunc i64 %542 to i32
  %544 = shl i32 %543, 1
  %545 = zext i32 %544 to i64
  %546 = getelementptr inbounds i32, i32* %53, i64 %545
  %547 = load i32, i32* %546, align 4
  %548 = zext i32 %547 to i64
  %549 = or i32 %544, 1
  %550 = zext i32 %549 to i64
  %551 = getelementptr inbounds i32, i32* %53, i64 %550
  %552 = load i32, i32* %551, align 4
  %553 = zext i32 %552 to i64
  %554 = shl nuw i64 %553, 32
  %555 = or i64 %554, %548
  %556 = load i64*, i64** %524, align 8
  %557 = getelementptr inbounds i64, i64* %556, i64 %542
  store i64 %555, i64* %557, align 8
  %558 = add nuw nsw i64 %542, 1
  %559 = icmp eq i64 %558, %525
  br i1 %559, label %560, label %541

560:                                              ; preds = %541, %522, %536, %538, %482
  %561 = getelementptr inbounds [128 x i32], [128 x i32]* %7, i64 0, i64 0
  %562 = icmp eq i32* %50, %561
  br i1 %562, label %573, label %563

563:                                              ; preds = %560
  call void @_ZdaPv(i8* %54) #18
  %564 = icmp eq i32* %51, null
  br i1 %564, label %566, label %565

565:                                              ; preds = %563
  call void @_ZdaPv(i8* %72) #18
  br label %566

566:                                              ; preds = %565, %563
  %567 = icmp eq i32* %52, null
  br i1 %567, label %569, label %568

568:                                              ; preds = %566
  call void @_ZdaPv(i8* %106) #18
  br label %569

569:                                              ; preds = %568, %566
  %570 = icmp eq i32* %53, null
  br i1 %570, label %573, label %571

571:                                              ; preds = %569
  %572 = bitcast i32* %53 to i8*
  call void @_ZdaPv(i8* %572) #18
  br label %573

573:                                              ; preds = %560, %569, %571
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %11) #17
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt4sdivERKS0_(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"*, %"class.llvm::APInt"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.llvm::APInt", align 8
  %5 = alloca %"class.llvm::APInt", align 8
  %6 = alloca %"class.llvm::APInt", align 8
  %7 = alloca %"class.llvm::APInt", align 8
  %8 = alloca %"class.llvm::APInt", align 8
  %9 = alloca %"class.llvm::APInt", align 8
  %10 = alloca %"class.llvm::APInt", align 8
  %11 = alloca %"class.llvm::APInt", align 8
  %12 = alloca %"class.llvm::APInt", align 8
  %13 = alloca %"class.llvm::APInt", align 8
  %14 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = add i32 %15, -1
  %17 = and i32 %16, 63
  %18 = zext i32 %17 to i64
  %19 = shl i64 1, %18
  %20 = icmp ult i32 %15, 65
  %21 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  br i1 %20, label %22, label %24

22:                                               ; preds = %3
  %23 = getelementptr inbounds %union.anon, %union.anon* %21, i64 0, i32 0
  br label %30

24:                                               ; preds = %3
  %25 = bitcast %union.anon* %21 to i64**
  %26 = load i64*, i64** %25, align 8
  %27 = lshr i32 %16, 6
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds i64, i64* %26, i64 %28
  br label %30

30:                                               ; preds = %22, %24
  %31 = phi i64* [ %23, %22 ], [ %29, %24 ]
  %32 = load i64, i64* %31, align 8
  %33 = and i64 %32, %19
  %34 = icmp eq i64 %33, 0
  %35 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 0
  %36 = load i32, i32* %35, align 8
  %37 = add i32 %36, -1
  %38 = and i32 %37, 63
  %39 = zext i32 %38 to i64
  %40 = shl i64 1, %39
  %41 = icmp ult i32 %36, 65
  %42 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1
  %43 = getelementptr inbounds %union.anon, %union.anon* %42, i64 0, i32 0
  %44 = bitcast %union.anon* %42 to i64**
  %45 = load i64*, i64** %44, align 8
  %46 = lshr i32 %37, 6
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds i64, i64* %45, i64 %47
  %49 = select i1 %41, i64* %43, i64* %48
  %50 = load i64, i64* %49, align 8
  %51 = and i64 %40, %50
  %52 = icmp ne i64 %51, 0
  %53 = bitcast i64* %45 to i8*
  %54 = ptrtoint i64* %45 to i64
  br i1 %34, label %193, label %55

55:                                               ; preds = %30
  br i1 %52, label %56, label %143

56:                                               ; preds = %55
  %57 = bitcast %"class.llvm::APInt"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %57) #17
  %58 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 0
  store i32 %15, i32* %58, align 8
  %59 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1, i32 0
  store i64 0, i64* %59, align 8
  br i1 %20, label %60, label %63

60:                                               ; preds = %56
  %61 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %62 = load i64, i64* %61, align 8
  store i64 %62, i64* %59, align 8
  br label %73

63:                                               ; preds = %56
  %64 = zext i32 %15 to i64
  %65 = add nuw nsw i64 %64, 63
  %66 = lshr i64 %65, 6
  %67 = shl nuw nsw i64 %66, 3
  %68 = tail call i8* @_Znam(i64 %67) #18
  %69 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1
  %70 = bitcast %union.anon* %69 to i8**
  store i8* %68, i8** %70, align 8
  %71 = bitcast %union.anon* %21 to i8**
  %72 = load i8*, i8** %71, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %68, i8* align 8 %72, i64 %67, i1 false) #17
  br label %73

73:                                               ; preds = %60, %63
  call void @_ZN4llvm5APInt11flipAllBitsEv(%"class.llvm::APInt"* nonnull %5) #20, !noalias !164
  %74 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntppEv(%"class.llvm::APInt"* nonnull %5) #20, !noalias !164
  %75 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %4, i64 0, i32 0
  %76 = load i32, i32* %58, align 8, !noalias !164
  store i32 %76, i32* %75, align 8, !alias.scope !164
  %77 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %4, i64 0, i32 1, i32 0
  %78 = load i64, i64* %59, align 8, !noalias !164
  store i64 %78, i64* %77, align 8, !alias.scope !164
  store i32 0, i32* %58, align 8, !noalias !164
  %79 = bitcast %"class.llvm::APInt"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %79) #17
  %80 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %7, i64 0, i32 0
  %81 = load i32, i32* %35, align 8
  store i32 %81, i32* %80, align 8
  %82 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %7, i64 0, i32 1, i32 0
  store i64 0, i64* %82, align 8
  %83 = icmp ult i32 %81, 65
  br i1 %83, label %84, label %87

84:                                               ; preds = %73
  %85 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1, i32 0
  %86 = load i64, i64* %85, align 8
  store i64 %86, i64* %82, align 8
  br label %97

87:                                               ; preds = %73
  %88 = zext i32 %81 to i64
  %89 = add nuw nsw i64 %88, 63
  %90 = lshr i64 %89, 6
  %91 = shl nuw nsw i64 %90, 3
  %92 = call i8* @_Znam(i64 %91) #18
  %93 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %7, i64 0, i32 1
  %94 = bitcast %union.anon* %93 to i8**
  store i8* %92, i8** %94, align 8
  %95 = bitcast %union.anon* %42 to i8**
  %96 = load i8*, i8** %95, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %92, i8* align 8 %96, i64 %91, i1 false) #17
  br label %97

97:                                               ; preds = %84, %87
  call void @_ZN4llvm5APInt11flipAllBitsEv(%"class.llvm::APInt"* nonnull %7) #20, !noalias !167
  %98 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntppEv(%"class.llvm::APInt"* nonnull %7) #20, !noalias !167
  %99 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 0
  %100 = load i32, i32* %80, align 8, !noalias !167
  store i32 %100, i32* %99, align 8, !alias.scope !167
  %101 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 1, i32 0
  %102 = load i64, i64* %82, align 8, !noalias !167
  store i64 %102, i64* %101, align 8, !alias.scope !167
  store i32 0, i32* %80, align 8, !noalias !167
  call void @_ZNK4llvm5APInt4udivERKS0_(%"class.llvm::APInt"* sret %0, %"class.llvm::APInt"* nonnull %4, %"class.llvm::APInt"* nonnull dereferenceable(16) %6) #19
  %103 = load i32, i32* %99, align 8
  %104 = icmp ugt i32 %103, 64
  br i1 %104, label %105, label %112

105:                                              ; preds = %97
  %106 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 1
  %107 = bitcast %union.anon* %106 to i64**
  %108 = load i64*, i64** %107, align 8
  %109 = icmp eq i64* %108, null
  br i1 %109, label %112, label %110

110:                                              ; preds = %105
  %111 = bitcast i64* %108 to i8*
  call void @_ZdaPv(i8* %111) #18
  br label %112

112:                                              ; preds = %97, %105, %110
  %113 = load i32, i32* %80, align 8
  %114 = icmp ugt i32 %113, 64
  br i1 %114, label %115, label %122

115:                                              ; preds = %112
  %116 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %7, i64 0, i32 1
  %117 = bitcast %union.anon* %116 to i64**
  %118 = load i64*, i64** %117, align 8
  %119 = icmp eq i64* %118, null
  br i1 %119, label %122, label %120

120:                                              ; preds = %115
  %121 = bitcast i64* %118 to i8*
  call void @_ZdaPv(i8* %121) #18
  br label %122

122:                                              ; preds = %112, %115, %120
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %79) #17
  %123 = load i32, i32* %75, align 8
  %124 = icmp ugt i32 %123, 64
  br i1 %124, label %125, label %132

125:                                              ; preds = %122
  %126 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %4, i64 0, i32 1
  %127 = bitcast %union.anon* %126 to i64**
  %128 = load i64*, i64** %127, align 8
  %129 = icmp eq i64* %128, null
  br i1 %129, label %132, label %130

130:                                              ; preds = %125
  %131 = bitcast i64* %128 to i8*
  call void @_ZdaPv(i8* %131) #18
  br label %132

132:                                              ; preds = %122, %125, %130
  %133 = load i32, i32* %58, align 8
  %134 = icmp ugt i32 %133, 64
  br i1 %134, label %135, label %142

135:                                              ; preds = %132
  %136 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1
  %137 = bitcast %union.anon* %136 to i64**
  %138 = load i64*, i64** %137, align 8
  %139 = icmp eq i64* %138, null
  br i1 %139, label %142, label %140

140:                                              ; preds = %135
  %141 = bitcast i64* %138 to i8*
  call void @_ZdaPv(i8* %141) #18
  br label %142

142:                                              ; preds = %132, %135, %140
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %57) #17
  br label %241

143:                                              ; preds = %55
  %144 = bitcast %"class.llvm::APInt"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %144) #17
  %145 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %10, i64 0, i32 0
  store i32 %15, i32* %145, align 8
  %146 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %10, i64 0, i32 1, i32 0
  store i64 0, i64* %146, align 8
  br i1 %20, label %147, label %150

147:                                              ; preds = %143
  %148 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %149 = load i64, i64* %148, align 8
  store i64 %149, i64* %146, align 8
  br label %160

150:                                              ; preds = %143
  %151 = zext i32 %15 to i64
  %152 = add nuw nsw i64 %151, 63
  %153 = lshr i64 %152, 6
  %154 = shl nuw nsw i64 %153, 3
  %155 = tail call i8* @_Znam(i64 %154) #18
  %156 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %10, i64 0, i32 1
  %157 = bitcast %union.anon* %156 to i8**
  store i8* %155, i8** %157, align 8
  %158 = bitcast %union.anon* %21 to i8**
  %159 = load i8*, i8** %158, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %155, i8* align 8 %159, i64 %154, i1 false) #17
  br label %160

160:                                              ; preds = %150, %147
  call void @_ZN4llvm5APInt11flipAllBitsEv(%"class.llvm::APInt"* nonnull %10) #20, !noalias !170
  %161 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntppEv(%"class.llvm::APInt"* nonnull %10) #20, !noalias !170
  %162 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %9, i64 0, i32 0
  %163 = load i32, i32* %145, align 8, !noalias !170
  store i32 %163, i32* %162, align 8, !alias.scope !170
  %164 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %9, i64 0, i32 1, i32 0
  %165 = load i64, i64* %146, align 8, !noalias !170
  store i64 %165, i64* %164, align 8, !alias.scope !170
  store i32 0, i32* %145, align 8, !noalias !170
  call void @_ZNK4llvm5APInt4udivERKS0_(%"class.llvm::APInt"* nonnull sret %8, %"class.llvm::APInt"* nonnull %9, %"class.llvm::APInt"* dereferenceable(16) %2) #19
  call void @_ZN4llvm5APInt11flipAllBitsEv(%"class.llvm::APInt"* nonnull %8) #20, !noalias !173
  %166 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntppEv(%"class.llvm::APInt"* nonnull %8) #20, !noalias !173
  %167 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %168 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %8, i64 0, i32 0
  %169 = load i32, i32* %168, align 8, !noalias !173
  store i32 %169, i32* %167, align 8, !alias.scope !173
  %170 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %171 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %8, i64 0, i32 1, i32 0
  %172 = load i64, i64* %171, align 8, !noalias !173
  store i64 %172, i64* %170, align 8, !alias.scope !173
  store i32 0, i32* %168, align 8, !noalias !173
  %173 = load i32, i32* %162, align 8
  %174 = icmp ugt i32 %173, 64
  br i1 %174, label %175, label %182

175:                                              ; preds = %160
  %176 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %9, i64 0, i32 1
  %177 = bitcast %union.anon* %176 to i64**
  %178 = load i64*, i64** %177, align 8
  %179 = icmp eq i64* %178, null
  br i1 %179, label %182, label %180

180:                                              ; preds = %175
  %181 = bitcast i64* %178 to i8*
  call void @_ZdaPv(i8* %181) #18
  br label %182

182:                                              ; preds = %160, %175, %180
  %183 = load i32, i32* %145, align 8
  %184 = icmp ugt i32 %183, 64
  br i1 %184, label %185, label %192

185:                                              ; preds = %182
  %186 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %10, i64 0, i32 1
  %187 = bitcast %union.anon* %186 to i64**
  %188 = load i64*, i64** %187, align 8
  %189 = icmp eq i64* %188, null
  br i1 %189, label %192, label %190

190:                                              ; preds = %185
  %191 = bitcast i64* %188 to i8*
  call void @_ZdaPv(i8* %191) #18
  br label %192

192:                                              ; preds = %182, %185, %190
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %144) #17
  br label %241

193:                                              ; preds = %30
  br i1 %52, label %194, label %240

194:                                              ; preds = %193
  %195 = bitcast %"class.llvm::APInt"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %195) #17
  %196 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %13, i64 0, i32 0
  store i32 %36, i32* %196, align 8
  %197 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %13, i64 0, i32 1, i32 0
  store i64 0, i64* %197, align 8
  br i1 %41, label %198, label %199

198:                                              ; preds = %194
  store i64 %54, i64* %197, align 8
  br label %207

199:                                              ; preds = %194
  %200 = zext i32 %36 to i64
  %201 = add nuw nsw i64 %200, 63
  %202 = lshr i64 %201, 6
  %203 = shl nuw nsw i64 %202, 3
  %204 = tail call i8* @_Znam(i64 %203) #18
  %205 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %13, i64 0, i32 1
  %206 = bitcast %union.anon* %205 to i8**
  store i8* %204, i8** %206, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %204, i8* align 8 %53, i64 %203, i1 false) #17
  br label %207

207:                                              ; preds = %199, %198
  call void @_ZN4llvm5APInt11flipAllBitsEv(%"class.llvm::APInt"* nonnull %13) #20, !noalias !176
  %208 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntppEv(%"class.llvm::APInt"* nonnull %13) #20, !noalias !176
  %209 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %12, i64 0, i32 0
  %210 = load i32, i32* %196, align 8, !noalias !176
  store i32 %210, i32* %209, align 8, !alias.scope !176
  %211 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %12, i64 0, i32 1, i32 0
  %212 = load i64, i64* %197, align 8, !noalias !176
  store i64 %212, i64* %211, align 8, !alias.scope !176
  store i32 0, i32* %196, align 8, !noalias !176
  call void @_ZNK4llvm5APInt4udivERKS0_(%"class.llvm::APInt"* nonnull sret %11, %"class.llvm::APInt"* %1, %"class.llvm::APInt"* nonnull dereferenceable(16) %12) #19
  call void @_ZN4llvm5APInt11flipAllBitsEv(%"class.llvm::APInt"* nonnull %11) #20, !noalias !179
  %213 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntppEv(%"class.llvm::APInt"* nonnull %11) #20, !noalias !179
  %214 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %215 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %11, i64 0, i32 0
  %216 = load i32, i32* %215, align 8, !noalias !179
  store i32 %216, i32* %214, align 8, !alias.scope !179
  %217 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %218 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %11, i64 0, i32 1, i32 0
  %219 = load i64, i64* %218, align 8, !noalias !179
  store i64 %219, i64* %217, align 8, !alias.scope !179
  store i32 0, i32* %215, align 8, !noalias !179
  %220 = load i32, i32* %209, align 8
  %221 = icmp ugt i32 %220, 64
  br i1 %221, label %222, label %229

222:                                              ; preds = %207
  %223 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %12, i64 0, i32 1
  %224 = bitcast %union.anon* %223 to i64**
  %225 = load i64*, i64** %224, align 8
  %226 = icmp eq i64* %225, null
  br i1 %226, label %229, label %227

227:                                              ; preds = %222
  %228 = bitcast i64* %225 to i8*
  call void @_ZdaPv(i8* %228) #18
  br label %229

229:                                              ; preds = %207, %222, %227
  %230 = load i32, i32* %196, align 8
  %231 = icmp ugt i32 %230, 64
  br i1 %231, label %232, label %239

232:                                              ; preds = %229
  %233 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %13, i64 0, i32 1
  %234 = bitcast %union.anon* %233 to i64**
  %235 = load i64*, i64** %234, align 8
  %236 = icmp eq i64* %235, null
  br i1 %236, label %239, label %237

237:                                              ; preds = %232
  %238 = bitcast i64* %235 to i8*
  call void @_ZdaPv(i8* %238) #18
  br label %239

239:                                              ; preds = %229, %232, %237
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %195) #17
  br label %241

240:                                              ; preds = %193
  tail call void @_ZNK4llvm5APInt4udivERKS0_(%"class.llvm::APInt"* sret %0, %"class.llvm::APInt"* %1, %"class.llvm::APInt"* dereferenceable(16) %2) #19
  br label %241

241:                                              ; preds = %240, %239, %192, %142
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt4sremERKS0_(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"*, %"class.llvm::APInt"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.llvm::APInt", align 8
  %5 = alloca %"class.llvm::APInt", align 8
  %6 = alloca %"class.llvm::APInt", align 8
  %7 = alloca %"class.llvm::APInt", align 8
  %8 = alloca %"class.llvm::APInt", align 8
  %9 = alloca %"class.llvm::APInt", align 8
  %10 = alloca %"class.llvm::APInt", align 8
  %11 = alloca %"class.llvm::APInt", align 8
  %12 = alloca %"class.llvm::APInt", align 8
  %13 = alloca %"class.llvm::APInt", align 8
  %14 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = add i32 %15, -1
  %17 = and i32 %16, 63
  %18 = zext i32 %17 to i64
  %19 = shl i64 1, %18
  %20 = icmp ult i32 %15, 65
  %21 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  br i1 %20, label %22, label %24

22:                                               ; preds = %3
  %23 = getelementptr inbounds %union.anon, %union.anon* %21, i64 0, i32 0
  br label %30

24:                                               ; preds = %3
  %25 = bitcast %union.anon* %21 to i64**
  %26 = load i64*, i64** %25, align 8
  %27 = lshr i32 %16, 6
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds i64, i64* %26, i64 %28
  br label %30

30:                                               ; preds = %22, %24
  %31 = phi i64* [ %23, %22 ], [ %29, %24 ]
  %32 = load i64, i64* %31, align 8
  %33 = and i64 %32, %19
  %34 = icmp eq i64 %33, 0
  %35 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 0
  %36 = load i32, i32* %35, align 8
  %37 = add i32 %36, -1
  %38 = and i32 %37, 63
  %39 = zext i32 %38 to i64
  %40 = shl i64 1, %39
  %41 = icmp ult i32 %36, 65
  %42 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1
  %43 = getelementptr inbounds %union.anon, %union.anon* %42, i64 0, i32 0
  %44 = bitcast %union.anon* %42 to i64**
  %45 = load i64*, i64** %44, align 8
  %46 = lshr i32 %37, 6
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds i64, i64* %45, i64 %47
  %49 = select i1 %41, i64* %43, i64* %48
  %50 = load i64, i64* %49, align 8
  %51 = and i64 %40, %50
  %52 = icmp ne i64 %51, 0
  %53 = bitcast i64* %45 to i8*
  %54 = ptrtoint i64* %45 to i64
  br i1 %34, label %200, label %55

55:                                               ; preds = %30
  br i1 %52, label %56, label %150

56:                                               ; preds = %55
  %57 = bitcast %"class.llvm::APInt"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %57) #17
  %58 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 0
  store i32 %15, i32* %58, align 8
  %59 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 1, i32 0
  store i64 0, i64* %59, align 8
  br i1 %20, label %60, label %63

60:                                               ; preds = %56
  %61 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %62 = load i64, i64* %61, align 8
  store i64 %62, i64* %59, align 8
  br label %73

63:                                               ; preds = %56
  %64 = zext i32 %15 to i64
  %65 = add nuw nsw i64 %64, 63
  %66 = lshr i64 %65, 6
  %67 = shl nuw nsw i64 %66, 3
  %68 = tail call i8* @_Znam(i64 %67) #18
  %69 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 1
  %70 = bitcast %union.anon* %69 to i8**
  store i8* %68, i8** %70, align 8
  %71 = bitcast %union.anon* %21 to i8**
  %72 = load i8*, i8** %71, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %68, i8* align 8 %72, i64 %67, i1 false) #17
  br label %73

73:                                               ; preds = %60, %63
  call void @_ZN4llvm5APInt11flipAllBitsEv(%"class.llvm::APInt"* nonnull %6) #20, !noalias !182
  %74 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntppEv(%"class.llvm::APInt"* nonnull %6) #20, !noalias !182
  %75 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 0
  %76 = load i32, i32* %58, align 8, !noalias !182
  store i32 %76, i32* %75, align 8, !alias.scope !182
  %77 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1, i32 0
  %78 = load i64, i64* %59, align 8, !noalias !182
  store i64 %78, i64* %77, align 8, !alias.scope !182
  store i32 0, i32* %58, align 8, !noalias !182
  %79 = bitcast %"class.llvm::APInt"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %79) #17
  %80 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %8, i64 0, i32 0
  %81 = load i32, i32* %35, align 8
  store i32 %81, i32* %80, align 8
  %82 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %8, i64 0, i32 1, i32 0
  store i64 0, i64* %82, align 8
  %83 = icmp ult i32 %81, 65
  br i1 %83, label %84, label %87

84:                                               ; preds = %73
  %85 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1, i32 0
  %86 = load i64, i64* %85, align 8
  store i64 %86, i64* %82, align 8
  br label %97

87:                                               ; preds = %73
  %88 = zext i32 %81 to i64
  %89 = add nuw nsw i64 %88, 63
  %90 = lshr i64 %89, 6
  %91 = shl nuw nsw i64 %90, 3
  %92 = call i8* @_Znam(i64 %91) #18
  %93 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %8, i64 0, i32 1
  %94 = bitcast %union.anon* %93 to i8**
  store i8* %92, i8** %94, align 8
  %95 = bitcast %union.anon* %42 to i8**
  %96 = load i8*, i8** %95, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %92, i8* align 8 %96, i64 %91, i1 false) #17
  br label %97

97:                                               ; preds = %87, %84
  call void @_ZN4llvm5APInt11flipAllBitsEv(%"class.llvm::APInt"* nonnull %8) #20, !noalias !185
  %98 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntppEv(%"class.llvm::APInt"* nonnull %8) #20, !noalias !185
  %99 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %7, i64 0, i32 0
  %100 = load i32, i32* %80, align 8, !noalias !185
  store i32 %100, i32* %99, align 8, !alias.scope !185
  %101 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %7, i64 0, i32 1, i32 0
  %102 = load i64, i64* %82, align 8, !noalias !185
  store i64 %102, i64* %101, align 8, !alias.scope !185
  store i32 0, i32* %80, align 8, !noalias !185
  call void @_ZNK4llvm5APInt4uremERKS0_(%"class.llvm::APInt"* nonnull sret %4, %"class.llvm::APInt"* nonnull %5, %"class.llvm::APInt"* nonnull dereferenceable(16) %7) #19
  call void @_ZN4llvm5APInt11flipAllBitsEv(%"class.llvm::APInt"* nonnull %4) #20, !noalias !188
  %103 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntppEv(%"class.llvm::APInt"* nonnull %4) #20, !noalias !188
  %104 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %105 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %4, i64 0, i32 0
  %106 = load i32, i32* %105, align 8, !noalias !188
  store i32 %106, i32* %104, align 8, !alias.scope !188
  %107 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %108 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %4, i64 0, i32 1, i32 0
  %109 = load i64, i64* %108, align 8, !noalias !188
  store i64 %109, i64* %107, align 8, !alias.scope !188
  store i32 0, i32* %105, align 8, !noalias !188
  %110 = load i32, i32* %99, align 8
  %111 = icmp ugt i32 %110, 64
  br i1 %111, label %112, label %119

112:                                              ; preds = %97
  %113 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %7, i64 0, i32 1
  %114 = bitcast %union.anon* %113 to i64**
  %115 = load i64*, i64** %114, align 8
  %116 = icmp eq i64* %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %112
  %118 = bitcast i64* %115 to i8*
  call void @_ZdaPv(i8* %118) #18
  br label %119

119:                                              ; preds = %97, %112, %117
  %120 = load i32, i32* %80, align 8
  %121 = icmp ugt i32 %120, 64
  br i1 %121, label %122, label %129

122:                                              ; preds = %119
  %123 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %8, i64 0, i32 1
  %124 = bitcast %union.anon* %123 to i64**
  %125 = load i64*, i64** %124, align 8
  %126 = icmp eq i64* %125, null
  br i1 %126, label %129, label %127

127:                                              ; preds = %122
  %128 = bitcast i64* %125 to i8*
  call void @_ZdaPv(i8* %128) #18
  br label %129

129:                                              ; preds = %119, %122, %127
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %79) #17
  %130 = load i32, i32* %75, align 8
  %131 = icmp ugt i32 %130, 64
  br i1 %131, label %132, label %139

132:                                              ; preds = %129
  %133 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1
  %134 = bitcast %union.anon* %133 to i64**
  %135 = load i64*, i64** %134, align 8
  %136 = icmp eq i64* %135, null
  br i1 %136, label %139, label %137

137:                                              ; preds = %132
  %138 = bitcast i64* %135 to i8*
  call void @_ZdaPv(i8* %138) #18
  br label %139

139:                                              ; preds = %129, %132, %137
  %140 = load i32, i32* %58, align 8
  %141 = icmp ugt i32 %140, 64
  br i1 %141, label %142, label %149

142:                                              ; preds = %139
  %143 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 1
  %144 = bitcast %union.anon* %143 to i64**
  %145 = load i64*, i64** %144, align 8
  %146 = icmp eq i64* %145, null
  br i1 %146, label %149, label %147

147:                                              ; preds = %142
  %148 = bitcast i64* %145 to i8*
  call void @_ZdaPv(i8* %148) #18
  br label %149

149:                                              ; preds = %139, %142, %147
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %57) #17
  br label %241

150:                                              ; preds = %55
  %151 = bitcast %"class.llvm::APInt"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %151) #17
  %152 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %11, i64 0, i32 0
  store i32 %15, i32* %152, align 8
  %153 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %11, i64 0, i32 1, i32 0
  store i64 0, i64* %153, align 8
  br i1 %20, label %154, label %157

154:                                              ; preds = %150
  %155 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %156 = load i64, i64* %155, align 8
  store i64 %156, i64* %153, align 8
  br label %167

157:                                              ; preds = %150
  %158 = zext i32 %15 to i64
  %159 = add nuw nsw i64 %158, 63
  %160 = lshr i64 %159, 6
  %161 = shl nuw nsw i64 %160, 3
  %162 = tail call i8* @_Znam(i64 %161) #18
  %163 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %11, i64 0, i32 1
  %164 = bitcast %union.anon* %163 to i8**
  store i8* %162, i8** %164, align 8
  %165 = bitcast %union.anon* %21 to i8**
  %166 = load i8*, i8** %165, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %162, i8* align 8 %166, i64 %161, i1 false) #17
  br label %167

167:                                              ; preds = %157, %154
  call void @_ZN4llvm5APInt11flipAllBitsEv(%"class.llvm::APInt"* nonnull %11) #20, !noalias !191
  %168 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntppEv(%"class.llvm::APInt"* nonnull %11) #20, !noalias !191
  %169 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %10, i64 0, i32 0
  %170 = load i32, i32* %152, align 8, !noalias !191
  store i32 %170, i32* %169, align 8, !alias.scope !191
  %171 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %10, i64 0, i32 1, i32 0
  %172 = load i64, i64* %153, align 8, !noalias !191
  store i64 %172, i64* %171, align 8, !alias.scope !191
  store i32 0, i32* %152, align 8, !noalias !191
  call void @_ZNK4llvm5APInt4uremERKS0_(%"class.llvm::APInt"* nonnull sret %9, %"class.llvm::APInt"* nonnull %10, %"class.llvm::APInt"* dereferenceable(16) %2) #19
  call void @_ZN4llvm5APInt11flipAllBitsEv(%"class.llvm::APInt"* nonnull %9) #20, !noalias !194
  %173 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntppEv(%"class.llvm::APInt"* nonnull %9) #20, !noalias !194
  %174 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %175 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %9, i64 0, i32 0
  %176 = load i32, i32* %175, align 8, !noalias !194
  store i32 %176, i32* %174, align 8, !alias.scope !194
  %177 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %178 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %9, i64 0, i32 1, i32 0
  %179 = load i64, i64* %178, align 8, !noalias !194
  store i64 %179, i64* %177, align 8, !alias.scope !194
  store i32 0, i32* %175, align 8, !noalias !194
  %180 = load i32, i32* %169, align 8
  %181 = icmp ugt i32 %180, 64
  br i1 %181, label %182, label %189

182:                                              ; preds = %167
  %183 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %10, i64 0, i32 1
  %184 = bitcast %union.anon* %183 to i64**
  %185 = load i64*, i64** %184, align 8
  %186 = icmp eq i64* %185, null
  br i1 %186, label %189, label %187

187:                                              ; preds = %182
  %188 = bitcast i64* %185 to i8*
  call void @_ZdaPv(i8* %188) #18
  br label %189

189:                                              ; preds = %167, %182, %187
  %190 = load i32, i32* %152, align 8
  %191 = icmp ugt i32 %190, 64
  br i1 %191, label %192, label %199

192:                                              ; preds = %189
  %193 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %11, i64 0, i32 1
  %194 = bitcast %union.anon* %193 to i64**
  %195 = load i64*, i64** %194, align 8
  %196 = icmp eq i64* %195, null
  br i1 %196, label %199, label %197

197:                                              ; preds = %192
  %198 = bitcast i64* %195 to i8*
  call void @_ZdaPv(i8* %198) #18
  br label %199

199:                                              ; preds = %189, %192, %197
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %151) #17
  br label %241

200:                                              ; preds = %30
  br i1 %52, label %201, label %240

201:                                              ; preds = %200
  %202 = bitcast %"class.llvm::APInt"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %202) #17
  %203 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %13, i64 0, i32 0
  store i32 %36, i32* %203, align 8
  %204 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %13, i64 0, i32 1, i32 0
  store i64 0, i64* %204, align 8
  br i1 %41, label %205, label %206

205:                                              ; preds = %201
  store i64 %54, i64* %204, align 8
  br label %214

206:                                              ; preds = %201
  %207 = zext i32 %36 to i64
  %208 = add nuw nsw i64 %207, 63
  %209 = lshr i64 %208, 6
  %210 = shl nuw nsw i64 %209, 3
  %211 = tail call i8* @_Znam(i64 %210) #18
  %212 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %13, i64 0, i32 1
  %213 = bitcast %union.anon* %212 to i8**
  store i8* %211, i8** %213, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %211, i8* align 8 %53, i64 %210, i1 false) #17
  br label %214

214:                                              ; preds = %205, %206
  call void @_ZN4llvm5APInt11flipAllBitsEv(%"class.llvm::APInt"* nonnull %13) #20, !noalias !197
  %215 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntppEv(%"class.llvm::APInt"* nonnull %13) #20, !noalias !197
  %216 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %12, i64 0, i32 0
  %217 = load i32, i32* %203, align 8, !noalias !197
  store i32 %217, i32* %216, align 8, !alias.scope !197
  %218 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %12, i64 0, i32 1, i32 0
  %219 = load i64, i64* %204, align 8, !noalias !197
  store i64 %219, i64* %218, align 8, !alias.scope !197
  store i32 0, i32* %203, align 8, !noalias !197
  call void @_ZNK4llvm5APInt4uremERKS0_(%"class.llvm::APInt"* sret %0, %"class.llvm::APInt"* %1, %"class.llvm::APInt"* nonnull dereferenceable(16) %12) #19
  %220 = load i32, i32* %216, align 8
  %221 = icmp ugt i32 %220, 64
  br i1 %221, label %222, label %229

222:                                              ; preds = %214
  %223 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %12, i64 0, i32 1
  %224 = bitcast %union.anon* %223 to i64**
  %225 = load i64*, i64** %224, align 8
  %226 = icmp eq i64* %225, null
  br i1 %226, label %229, label %227

227:                                              ; preds = %222
  %228 = bitcast i64* %225 to i8*
  call void @_ZdaPv(i8* %228) #18
  br label %229

229:                                              ; preds = %214, %222, %227
  %230 = load i32, i32* %203, align 8
  %231 = icmp ugt i32 %230, 64
  br i1 %231, label %232, label %239

232:                                              ; preds = %229
  %233 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %13, i64 0, i32 1
  %234 = bitcast %union.anon* %233 to i64**
  %235 = load i64*, i64** %234, align 8
  %236 = icmp eq i64* %235, null
  br i1 %236, label %239, label %237

237:                                              ; preds = %232
  %238 = bitcast i64* %235 to i8*
  call void @_ZdaPv(i8* %238) #18
  br label %239

239:                                              ; preds = %229, %232, %237
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %202) #17
  br label %241

240:                                              ; preds = %200
  tail call void @_ZNK4llvm5APInt4uremERKS0_(%"class.llvm::APInt"* sret %0, %"class.llvm::APInt"* %1, %"class.llvm::APInt"* dereferenceable(16) %2) #19
  br label %241

241:                                              ; preds = %240, %239, %199, %149
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm5APInt7sdivremERKS0_S2_RS0_S3_(%"class.llvm::APInt"* dereferenceable(16), %"class.llvm::APInt"* dereferenceable(16), %"class.llvm::APInt"* dereferenceable(16), %"class.llvm::APInt"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.llvm::APInt", align 8
  %6 = alloca %"class.llvm::APInt", align 8
  %7 = alloca %"class.llvm::APInt", align 8
  %8 = alloca %"class.llvm::APInt", align 8
  %9 = alloca %"class.llvm::APInt", align 8
  %10 = alloca %"class.llvm::APInt", align 8
  %11 = alloca %"class.llvm::APInt", align 8
  %12 = alloca %"class.llvm::APInt", align 8
  %13 = alloca %"class.llvm::APInt", align 8
  %14 = alloca %"class.llvm::APInt", align 8
  %15 = alloca %"class.llvm::APInt", align 8
  %16 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %17 = load i32, i32* %16, align 8
  %18 = add i32 %17, -1
  %19 = and i32 %18, 63
  %20 = zext i32 %19 to i64
  %21 = shl i64 1, %20
  %22 = icmp ult i32 %17, 65
  %23 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %24 = getelementptr inbounds %union.anon, %union.anon* %23, i64 0, i32 0
  %25 = bitcast %union.anon* %23 to i64**
  %26 = load i64*, i64** %25, align 8
  %27 = lshr i32 %18, 6
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds i64, i64* %26, i64 %28
  %30 = select i1 %22, i64* %24, i64* %29
  %31 = load i64, i64* %30, align 8
  %32 = and i64 %21, %31
  %33 = icmp eq i64 %32, 0
  %34 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %35 = load i32, i32* %34, align 8
  %36 = add i32 %35, -1
  %37 = and i32 %36, 63
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = icmp ult i32 %35, 65
  %41 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %42 = getelementptr inbounds %union.anon, %union.anon* %41, i64 0, i32 0
  %43 = bitcast %union.anon* %41 to i64**
  %44 = load i64*, i64** %43, align 8
  %45 = lshr i32 %36, 6
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds i64, i64* %44, i64 %46
  %48 = select i1 %40, i64* %42, i64* %47
  %49 = load i64, i64* %48, align 8
  %50 = and i64 %39, %49
  %51 = icmp ne i64 %50, 0
  %52 = bitcast i64* %26 to i8*
  %53 = ptrtoint i64* %26 to i64
  %54 = bitcast i64* %44 to i8*
  %55 = ptrtoint i64* %44 to i64
  br i1 %33, label %268, label %56

56:                                               ; preds = %4
  br i1 %51, label %57, label %140

57:                                               ; preds = %56
  %58 = bitcast %"class.llvm::APInt"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %58) #17
  %59 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 0
  store i32 %17, i32* %59, align 8
  %60 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 1, i32 0
  store i64 0, i64* %60, align 8
  br i1 %22, label %61, label %62

61:                                               ; preds = %57
  store i64 %53, i64* %60, align 8
  br label %70

62:                                               ; preds = %57
  %63 = zext i32 %17 to i64
  %64 = add nuw nsw i64 %63, 63
  %65 = lshr i64 %64, 6
  %66 = shl nuw nsw i64 %65, 3
  %67 = tail call i8* @_Znam(i64 %66) #18
  %68 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 1
  %69 = bitcast %union.anon* %68 to i8**
  store i8* %67, i8** %69, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %67, i8* align 8 %52, i64 %66, i1 false) #17
  br label %70

70:                                               ; preds = %61, %62
  call void @_ZN4llvm5APInt11flipAllBitsEv(%"class.llvm::APInt"* nonnull %6) #20, !noalias !200
  %71 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntppEv(%"class.llvm::APInt"* nonnull %6) #20, !noalias !200
  %72 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 0
  %73 = load i32, i32* %59, align 8, !noalias !200
  store i32 %73, i32* %72, align 8, !alias.scope !200
  %74 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1, i32 0
  %75 = load i64, i64* %60, align 8, !noalias !200
  store i64 %75, i64* %74, align 8, !alias.scope !200
  store i32 0, i32* %59, align 8, !noalias !200
  %76 = bitcast %"class.llvm::APInt"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %76) #17
  %77 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %8, i64 0, i32 0
  %78 = load i32, i32* %34, align 8
  store i32 %78, i32* %77, align 8
  %79 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %8, i64 0, i32 1, i32 0
  store i64 0, i64* %79, align 8
  %80 = icmp ult i32 %78, 65
  br i1 %80, label %81, label %84

81:                                               ; preds = %70
  %82 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %79, align 8
  br label %94

84:                                               ; preds = %70
  %85 = zext i32 %78 to i64
  %86 = add nuw nsw i64 %85, 63
  %87 = lshr i64 %86, 6
  %88 = shl nuw nsw i64 %87, 3
  %89 = call i8* @_Znam(i64 %88) #18
  %90 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %8, i64 0, i32 1
  %91 = bitcast %union.anon* %90 to i8**
  store i8* %89, i8** %91, align 8
  %92 = bitcast %union.anon* %41 to i8**
  %93 = load i8*, i8** %92, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %89, i8* align 8 %93, i64 %88, i1 false) #17
  br label %94

94:                                               ; preds = %81, %84
  call void @_ZN4llvm5APInt11flipAllBitsEv(%"class.llvm::APInt"* nonnull %8) #20, !noalias !203
  %95 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntppEv(%"class.llvm::APInt"* nonnull %8) #20, !noalias !203
  %96 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %7, i64 0, i32 0
  %97 = load i32, i32* %77, align 8, !noalias !203
  store i32 %97, i32* %96, align 8, !alias.scope !203
  %98 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %7, i64 0, i32 1, i32 0
  %99 = load i64, i64* %79, align 8, !noalias !203
  store i64 %99, i64* %98, align 8, !alias.scope !203
  store i32 0, i32* %77, align 8, !noalias !203
  call void @_ZN4llvm5APInt7udivremERKS0_S2_RS0_S3_(%"class.llvm::APInt"* nonnull dereferenceable(16) %5, %"class.llvm::APInt"* nonnull dereferenceable(16) %7, %"class.llvm::APInt"* dereferenceable(16) %2, %"class.llvm::APInt"* dereferenceable(16) %3) #19
  %100 = load i32, i32* %96, align 8
  %101 = icmp ugt i32 %100, 64
  br i1 %101, label %102, label %109

102:                                              ; preds = %94
  %103 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %7, i64 0, i32 1
  %104 = bitcast %union.anon* %103 to i64**
  %105 = load i64*, i64** %104, align 8
  %106 = icmp eq i64* %105, null
  br i1 %106, label %109, label %107

107:                                              ; preds = %102
  %108 = bitcast i64* %105 to i8*
  call void @_ZdaPv(i8* %108) #18
  br label %109

109:                                              ; preds = %94, %102, %107
  %110 = load i32, i32* %77, align 8
  %111 = icmp ugt i32 %110, 64
  br i1 %111, label %112, label %119

112:                                              ; preds = %109
  %113 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %8, i64 0, i32 1
  %114 = bitcast %union.anon* %113 to i64**
  %115 = load i64*, i64** %114, align 8
  %116 = icmp eq i64* %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %112
  %118 = bitcast i64* %115 to i8*
  call void @_ZdaPv(i8* %118) #18
  br label %119

119:                                              ; preds = %109, %112, %117
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %76) #17
  %120 = load i32, i32* %72, align 8
  %121 = icmp ugt i32 %120, 64
  br i1 %121, label %122, label %129

122:                                              ; preds = %119
  %123 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1
  %124 = bitcast %union.anon* %123 to i64**
  %125 = load i64*, i64** %124, align 8
  %126 = icmp eq i64* %125, null
  br i1 %126, label %129, label %127

127:                                              ; preds = %122
  %128 = bitcast i64* %125 to i8*
  call void @_ZdaPv(i8* %128) #18
  br label %129

129:                                              ; preds = %119, %122, %127
  %130 = load i32, i32* %59, align 8
  %131 = icmp ugt i32 %130, 64
  br i1 %131, label %132, label %139

132:                                              ; preds = %129
  %133 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 1
  %134 = bitcast %union.anon* %133 to i64**
  %135 = load i64*, i64** %134, align 8
  %136 = icmp eq i64* %135, null
  br i1 %136, label %139, label %137

137:                                              ; preds = %132
  %138 = bitcast i64* %135 to i8*
  call void @_ZdaPv(i8* %138) #18
  br label %139

139:                                              ; preds = %129, %132, %137
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %58) #17
  br label %223

140:                                              ; preds = %56
  %141 = bitcast %"class.llvm::APInt"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %141) #17
  %142 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %10, i64 0, i32 0
  store i32 %17, i32* %142, align 8
  %143 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %10, i64 0, i32 1, i32 0
  store i64 0, i64* %143, align 8
  br i1 %22, label %144, label %145

144:                                              ; preds = %140
  store i64 %53, i64* %143, align 8
  br label %153

145:                                              ; preds = %140
  %146 = zext i32 %17 to i64
  %147 = add nuw nsw i64 %146, 63
  %148 = lshr i64 %147, 6
  %149 = shl nuw nsw i64 %148, 3
  %150 = tail call i8* @_Znam(i64 %149) #18
  %151 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %10, i64 0, i32 1
  %152 = bitcast %union.anon* %151 to i8**
  store i8* %150, i8** %152, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %150, i8* align 8 %52, i64 %149, i1 false) #17
  br label %153

153:                                              ; preds = %144, %145
  call void @_ZN4llvm5APInt11flipAllBitsEv(%"class.llvm::APInt"* nonnull %10) #20, !noalias !206
  %154 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntppEv(%"class.llvm::APInt"* nonnull %10) #20, !noalias !206
  %155 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %9, i64 0, i32 0
  %156 = load i32, i32* %142, align 8, !noalias !206
  store i32 %156, i32* %155, align 8, !alias.scope !206
  %157 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %9, i64 0, i32 1, i32 0
  %158 = load i64, i64* %143, align 8, !noalias !206
  store i64 %158, i64* %157, align 8, !alias.scope !206
  store i32 0, i32* %142, align 8, !noalias !206
  call void @_ZN4llvm5APInt7udivremERKS0_S2_RS0_S3_(%"class.llvm::APInt"* nonnull dereferenceable(16) %9, %"class.llvm::APInt"* dereferenceable(16) %1, %"class.llvm::APInt"* dereferenceable(16) %2, %"class.llvm::APInt"* dereferenceable(16) %3) #19
  %159 = load i32, i32* %155, align 8
  %160 = icmp ugt i32 %159, 64
  br i1 %160, label %161, label %168

161:                                              ; preds = %153
  %162 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %9, i64 0, i32 1
  %163 = bitcast %union.anon* %162 to i64**
  %164 = load i64*, i64** %163, align 8
  %165 = icmp eq i64* %164, null
  br i1 %165, label %168, label %166

166:                                              ; preds = %161
  %167 = bitcast i64* %164 to i8*
  call void @_ZdaPv(i8* %167) #18
  br label %168

168:                                              ; preds = %153, %161, %166
  %169 = load i32, i32* %142, align 8
  %170 = icmp ugt i32 %169, 64
  br i1 %170, label %171, label %178

171:                                              ; preds = %168
  %172 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %10, i64 0, i32 1
  %173 = bitcast %union.anon* %172 to i64**
  %174 = load i64*, i64** %173, align 8
  %175 = icmp eq i64* %174, null
  br i1 %175, label %178, label %176

176:                                              ; preds = %171
  %177 = bitcast i64* %174 to i8*
  call void @_ZdaPv(i8* %177) #18
  br label %178

178:                                              ; preds = %168, %171, %176
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %141) #17
  %179 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %11, i64 0, i32 0
  %180 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 0
  %181 = load i32, i32* %180, align 8
  store i32 %181, i32* %179, align 8
  %182 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %11, i64 0, i32 1, i32 0
  store i64 0, i64* %182, align 8
  %183 = icmp ult i32 %181, 65
  br i1 %183, label %184, label %187

184:                                              ; preds = %178
  %185 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1, i32 0
  %186 = load i64, i64* %185, align 8
  store i64 %186, i64* %182, align 8
  br label %198

187:                                              ; preds = %178
  %188 = zext i32 %181 to i64
  %189 = add nuw nsw i64 %188, 63
  %190 = lshr i64 %189, 6
  %191 = shl nuw nsw i64 %190, 3
  %192 = call i8* @_Znam(i64 %191) #18
  %193 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %11, i64 0, i32 1
  %194 = bitcast %union.anon* %193 to i8**
  store i8* %192, i8** %194, align 8
  %195 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1
  %196 = bitcast %union.anon* %195 to i8**
  %197 = load i8*, i8** %196, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %192, i8* align 8 %197, i64 %191, i1 false) #17
  br label %198

198:                                              ; preds = %184, %187
  call void @_ZN4llvm5APInt11flipAllBitsEv(%"class.llvm::APInt"* nonnull %11) #20, !noalias !209
  %199 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntppEv(%"class.llvm::APInt"* nonnull %11) #20, !noalias !209
  %200 = load i32, i32* %179, align 8, !noalias !209
  %201 = load i64, i64* %182, align 8, !noalias !209
  store i32 0, i32* %179, align 8, !noalias !209
  %202 = load i32, i32* %180, align 8
  %203 = icmp ult i32 %202, 65
  br i1 %203, label %209, label %204

204:                                              ; preds = %198
  %205 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1
  %206 = bitcast %union.anon* %205 to i64**
  %207 = load i64*, i64** %206, align 8
  %208 = icmp eq i64* %207, null
  br i1 %208, label %209, label %211

209:                                              ; preds = %198, %204
  %210 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1, i32 0
  store i64 %201, i64* %210, align 8
  store i32 %200, i32* %180, align 8
  br label %223

211:                                              ; preds = %204
  %212 = bitcast i64* %207 to i8*
  call void @_ZdaPv(i8* %212) #18
  %213 = load i32, i32* %179, align 8
  %214 = icmp ugt i32 %213, 64
  %215 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1, i32 0
  store i64 %201, i64* %215, align 8
  store i32 %200, i32* %180, align 8
  br i1 %214, label %216, label %223

216:                                              ; preds = %211
  %217 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %11, i64 0, i32 1
  %218 = bitcast %union.anon* %217 to i64**
  %219 = load i64*, i64** %218, align 8
  %220 = icmp eq i64* %219, null
  br i1 %220, label %223, label %221

221:                                              ; preds = %216
  %222 = bitcast i64* %219 to i8*
  call void @_ZdaPv(i8* %222) #18
  br label %223

223:                                              ; preds = %221, %216, %211, %209, %139
  %224 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %12, i64 0, i32 0
  %225 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 0
  %226 = load i32, i32* %225, align 8
  store i32 %226, i32* %224, align 8
  %227 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %12, i64 0, i32 1, i32 0
  store i64 0, i64* %227, align 8
  %228 = icmp ult i32 %226, 65
  br i1 %228, label %229, label %232

229:                                              ; preds = %223
  %230 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 1, i32 0
  %231 = load i64, i64* %230, align 8
  store i64 %231, i64* %227, align 8
  br label %243

232:                                              ; preds = %223
  %233 = zext i32 %226 to i64
  %234 = add nuw nsw i64 %233, 63
  %235 = lshr i64 %234, 6
  %236 = shl nuw nsw i64 %235, 3
  %237 = call i8* @_Znam(i64 %236) #18
  %238 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %12, i64 0, i32 1
  %239 = bitcast %union.anon* %238 to i8**
  store i8* %237, i8** %239, align 8
  %240 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 1
  %241 = bitcast %union.anon* %240 to i8**
  %242 = load i8*, i8** %241, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %237, i8* align 8 %242, i64 %236, i1 false) #17
  br label %243

243:                                              ; preds = %229, %232
  call void @_ZN4llvm5APInt11flipAllBitsEv(%"class.llvm::APInt"* nonnull %12) #20, !noalias !212
  %244 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntppEv(%"class.llvm::APInt"* nonnull %12) #20, !noalias !212
  %245 = load i32, i32* %224, align 8, !noalias !212
  %246 = load i64, i64* %227, align 8, !noalias !212
  store i32 0, i32* %224, align 8, !noalias !212
  %247 = load i32, i32* %225, align 8
  %248 = icmp ult i32 %247, 65
  br i1 %248, label %254, label %249

249:                                              ; preds = %243
  %250 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 1
  %251 = bitcast %union.anon* %250 to i64**
  %252 = load i64*, i64** %251, align 8
  %253 = icmp eq i64* %252, null
  br i1 %253, label %254, label %256

254:                                              ; preds = %243, %249
  %255 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 1, i32 0
  store i64 %246, i64* %255, align 8
  store i32 %245, i32* %225, align 8
  br label %353

256:                                              ; preds = %249
  %257 = bitcast i64* %252 to i8*
  call void @_ZdaPv(i8* %257) #18
  %258 = load i32, i32* %224, align 8
  %259 = icmp ugt i32 %258, 64
  %260 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %3, i64 0, i32 1, i32 0
  store i64 %246, i64* %260, align 8
  store i32 %245, i32* %225, align 8
  br i1 %259, label %261, label %353

261:                                              ; preds = %256
  %262 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %12, i64 0, i32 1
  %263 = bitcast %union.anon* %262 to i64**
  %264 = load i64*, i64** %263, align 8
  %265 = icmp eq i64* %264, null
  br i1 %265, label %353, label %266

266:                                              ; preds = %261
  %267 = bitcast i64* %264 to i8*
  call void @_ZdaPv(i8* %267) #18
  br label %353

268:                                              ; preds = %4
  br i1 %51, label %269, label %352

269:                                              ; preds = %268
  %270 = bitcast %"class.llvm::APInt"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %270) #17
  %271 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %14, i64 0, i32 0
  store i32 %35, i32* %271, align 8
  %272 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %14, i64 0, i32 1, i32 0
  store i64 0, i64* %272, align 8
  br i1 %40, label %273, label %274

273:                                              ; preds = %269
  store i64 %55, i64* %272, align 8
  br label %282

274:                                              ; preds = %269
  %275 = zext i32 %35 to i64
  %276 = add nuw nsw i64 %275, 63
  %277 = lshr i64 %276, 6
  %278 = shl nuw nsw i64 %277, 3
  %279 = tail call i8* @_Znam(i64 %278) #18
  %280 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %14, i64 0, i32 1
  %281 = bitcast %union.anon* %280 to i8**
  store i8* %279, i8** %281, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %279, i8* align 8 %54, i64 %278, i1 false) #17
  br label %282

282:                                              ; preds = %273, %274
  call void @_ZN4llvm5APInt11flipAllBitsEv(%"class.llvm::APInt"* nonnull %14) #20, !noalias !215
  %283 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntppEv(%"class.llvm::APInt"* nonnull %14) #20, !noalias !215
  %284 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %13, i64 0, i32 0
  %285 = load i32, i32* %271, align 8, !noalias !215
  store i32 %285, i32* %284, align 8, !alias.scope !215
  %286 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %13, i64 0, i32 1, i32 0
  %287 = load i64, i64* %272, align 8, !noalias !215
  store i64 %287, i64* %286, align 8, !alias.scope !215
  store i32 0, i32* %271, align 8, !noalias !215
  call void @_ZN4llvm5APInt7udivremERKS0_S2_RS0_S3_(%"class.llvm::APInt"* dereferenceable(16) %0, %"class.llvm::APInt"* nonnull dereferenceable(16) %13, %"class.llvm::APInt"* dereferenceable(16) %2, %"class.llvm::APInt"* dereferenceable(16) %3) #19
  %288 = load i32, i32* %284, align 8
  %289 = icmp ugt i32 %288, 64
  br i1 %289, label %290, label %297

290:                                              ; preds = %282
  %291 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %13, i64 0, i32 1
  %292 = bitcast %union.anon* %291 to i64**
  %293 = load i64*, i64** %292, align 8
  %294 = icmp eq i64* %293, null
  br i1 %294, label %297, label %295

295:                                              ; preds = %290
  %296 = bitcast i64* %293 to i8*
  call void @_ZdaPv(i8* %296) #18
  br label %297

297:                                              ; preds = %282, %290, %295
  %298 = load i32, i32* %271, align 8
  %299 = icmp ugt i32 %298, 64
  br i1 %299, label %300, label %307

300:                                              ; preds = %297
  %301 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %14, i64 0, i32 1
  %302 = bitcast %union.anon* %301 to i64**
  %303 = load i64*, i64** %302, align 8
  %304 = icmp eq i64* %303, null
  br i1 %304, label %307, label %305

305:                                              ; preds = %300
  %306 = bitcast i64* %303 to i8*
  call void @_ZdaPv(i8* %306) #18
  br label %307

307:                                              ; preds = %297, %300, %305
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %270) #17
  %308 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %15, i64 0, i32 0
  %309 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 0
  %310 = load i32, i32* %309, align 8
  store i32 %310, i32* %308, align 8
  %311 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %15, i64 0, i32 1, i32 0
  store i64 0, i64* %311, align 8
  %312 = icmp ult i32 %310, 65
  br i1 %312, label %313, label %316

313:                                              ; preds = %307
  %314 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1, i32 0
  %315 = load i64, i64* %314, align 8
  store i64 %315, i64* %311, align 8
  br label %327

316:                                              ; preds = %307
  %317 = zext i32 %310 to i64
  %318 = add nuw nsw i64 %317, 63
  %319 = lshr i64 %318, 6
  %320 = shl nuw nsw i64 %319, 3
  %321 = call i8* @_Znam(i64 %320) #18
  %322 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %15, i64 0, i32 1
  %323 = bitcast %union.anon* %322 to i8**
  store i8* %321, i8** %323, align 8
  %324 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1
  %325 = bitcast %union.anon* %324 to i8**
  %326 = load i8*, i8** %325, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %321, i8* align 8 %326, i64 %320, i1 false) #17
  br label %327

327:                                              ; preds = %313, %316
  call void @_ZN4llvm5APInt11flipAllBitsEv(%"class.llvm::APInt"* nonnull %15) #20, !noalias !218
  %328 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntppEv(%"class.llvm::APInt"* nonnull %15) #20, !noalias !218
  %329 = load i32, i32* %308, align 8, !noalias !218
  %330 = load i64, i64* %311, align 8, !noalias !218
  store i32 0, i32* %308, align 8, !noalias !218
  %331 = load i32, i32* %309, align 8
  %332 = icmp ult i32 %331, 65
  br i1 %332, label %338, label %333

333:                                              ; preds = %327
  %334 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1
  %335 = bitcast %union.anon* %334 to i64**
  %336 = load i64*, i64** %335, align 8
  %337 = icmp eq i64* %336, null
  br i1 %337, label %338, label %340

338:                                              ; preds = %327, %333
  %339 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1, i32 0
  store i64 %330, i64* %339, align 8
  store i32 %329, i32* %309, align 8
  br label %353

340:                                              ; preds = %333
  %341 = bitcast i64* %336 to i8*
  call void @_ZdaPv(i8* %341) #18
  %342 = load i32, i32* %308, align 8
  %343 = icmp ugt i32 %342, 64
  %344 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1, i32 0
  store i64 %330, i64* %344, align 8
  store i32 %329, i32* %309, align 8
  br i1 %343, label %345, label %353

345:                                              ; preds = %340
  %346 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %15, i64 0, i32 1
  %347 = bitcast %union.anon* %346 to i64**
  %348 = load i64*, i64** %347, align 8
  %349 = icmp eq i64* %348, null
  br i1 %349, label %353, label %350

350:                                              ; preds = %345
  %351 = bitcast i64* %348 to i8*
  call void @_ZdaPv(i8* %351) #18
  br label %353

352:                                              ; preds = %268
  tail call void @_ZN4llvm5APInt7udivremERKS0_S2_RS0_S3_(%"class.llvm::APInt"* dereferenceable(16) %0, %"class.llvm::APInt"* dereferenceable(16) %1, %"class.llvm::APInt"* dereferenceable(16) %2, %"class.llvm::APInt"* dereferenceable(16) %3) #19
  br label %353

353:                                              ; preds = %350, %345, %340, %338, %266, %261, %256, %254, %352
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt7sadd_ovERKS0_Rb(%"class.llvm::APInt"* noalias nocapture sret, %"class.llvm::APInt"* nocapture readonly, %"class.llvm::APInt"* nocapture readonly dereferenceable(16), i8* nocapture dereferenceable(1)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.llvm::APInt", align 8
  %6 = bitcast %"class.llvm::APInt"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 -86, i64 16, i1 false)
  %7 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 0
  %8 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  store i32 %9, i32* %7, align 8
  %10 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1, i32 0
  store i64 0, i64* %10, align 8
  %11 = icmp ult i32 %9, 65
  br i1 %11, label %12, label %15

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %14 = load i64, i64* %13, align 8
  store i64 %14, i64* %10, align 8
  br label %26

15:                                               ; preds = %4
  %16 = zext i32 %9 to i64
  %17 = add nuw nsw i64 %16, 63
  %18 = lshr i64 %17, 6
  %19 = shl nuw nsw i64 %18, 3
  %20 = tail call i8* @_Znam(i64 %19) #18
  %21 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1
  %22 = bitcast %union.anon* %21 to i8**
  store i8* %20, i8** %22, align 8
  %23 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %24 = bitcast %union.anon* %23 to i8**
  %25 = load i8*, i8** %24, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %20, i8* align 8 %25, i64 %19, i1 false) #17
  br label %26

26:                                               ; preds = %15, %12
  %27 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLERKS0_(%"class.llvm::APInt"* nonnull %5, %"class.llvm::APInt"* dereferenceable(16) %2) #20, !noalias !221
  %28 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %29 = load i32, i32* %7, align 8, !noalias !221
  store i32 %29, i32* %28, align 8, !alias.scope !221
  %30 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %31 = load i64, i64* %10, align 8, !noalias !221
  store i64 %31, i64* %30, align 8, !alias.scope !221
  store i32 0, i32* %7, align 8, !noalias !221
  %32 = load i32, i32* %8, align 8
  %33 = add i32 %32, -1
  %34 = and i32 %33, 63
  %35 = zext i32 %34 to i64
  %36 = shl i64 1, %35
  %37 = icmp ult i32 %32, 65
  %38 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %39 = inttoptr i64 %31 to i64*
  br i1 %37, label %40, label %42

40:                                               ; preds = %26
  %41 = getelementptr inbounds %union.anon, %union.anon* %38, i64 0, i32 0
  br label %48

42:                                               ; preds = %26
  %43 = bitcast %union.anon* %38 to i64**
  %44 = load i64*, i64** %43, align 8
  %45 = lshr i32 %33, 6
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds i64, i64* %44, i64 %46
  br label %48

48:                                               ; preds = %40, %42
  %49 = phi i64* [ %41, %40 ], [ %47, %42 ]
  %50 = load i64, i64* %49, align 8
  %51 = and i64 %50, %36
  %52 = icmp eq i64 %51, 0
  %53 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 0
  %54 = load i32, i32* %53, align 8
  %55 = add i32 %54, -1
  %56 = and i32 %55, 63
  %57 = zext i32 %56 to i64
  %58 = shl i64 1, %57
  %59 = icmp ult i32 %54, 65
  %60 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1
  %61 = getelementptr inbounds %union.anon, %union.anon* %60, i64 0, i32 0
  %62 = bitcast %union.anon* %60 to i64**
  %63 = load i64*, i64** %62, align 8
  %64 = lshr i32 %55, 6
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds i64, i64* %63, i64 %65
  %67 = select i1 %59, i64* %61, i64* %66
  %68 = load i64, i64* %67, align 8
  %69 = and i64 %58, %68
  %70 = icmp eq i64 %69, 0
  %71 = xor i1 %52, %70
  br i1 %71, label %101, label %72

72:                                               ; preds = %48
  %73 = add i32 %29, -1
  %74 = and i32 %73, 63
  %75 = zext i32 %74 to i64
  %76 = shl i64 1, %75
  %77 = icmp ult i32 %29, 65
  %78 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %79 = lshr i32 %73, 6
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds i64, i64* %39, i64 %80
  %82 = select i1 %77, i64* %78, i64* %81
  %83 = load i64, i64* %82, align 8
  %84 = and i64 %83, %76
  %85 = icmp eq i64 %84, 0
  br i1 %37, label %86, label %88

86:                                               ; preds = %72
  %87 = getelementptr inbounds %union.anon, %union.anon* %38, i64 0, i32 0
  br label %94

88:                                               ; preds = %72
  %89 = bitcast %union.anon* %38 to i64**
  %90 = load i64*, i64** %89, align 8
  %91 = lshr i32 %33, 6
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds i64, i64* %90, i64 %92
  br label %94

94:                                               ; preds = %86, %88
  %95 = phi i64* [ %87, %86 ], [ %93, %88 ]
  %96 = load i64, i64* %95, align 8
  %97 = and i64 %96, %36
  %98 = icmp eq i64 %97, 0
  %99 = xor i1 %85, %98
  %100 = zext i1 %99 to i8
  br label %101

101:                                              ; preds = %48, %94
  %102 = phi i8 [ 0, %48 ], [ %100, %94 ]
  store i8 %102, i8* %3, align 1
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt7uadd_ovERKS0_Rb(%"class.llvm::APInt"* noalias nocapture sret, %"class.llvm::APInt"* nocapture readonly, %"class.llvm::APInt"* nocapture readonly dereferenceable(16), i8* nocapture dereferenceable(1)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.llvm::APInt", align 8
  %6 = bitcast %"class.llvm::APInt"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 -86, i64 16, i1 false)
  %7 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 0
  %8 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  store i32 %9, i32* %7, align 8
  %10 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1, i32 0
  store i64 0, i64* %10, align 8
  %11 = icmp ult i32 %9, 65
  br i1 %11, label %12, label %15

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %14 = load i64, i64* %13, align 8
  store i64 %14, i64* %10, align 8
  br label %26

15:                                               ; preds = %4
  %16 = zext i32 %9 to i64
  %17 = add nuw nsw i64 %16, 63
  %18 = lshr i64 %17, 6
  %19 = shl nuw nsw i64 %18, 3
  %20 = tail call i8* @_Znam(i64 %19) #18
  %21 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1
  %22 = bitcast %union.anon* %21 to i8**
  store i8* %20, i8** %22, align 8
  %23 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %24 = bitcast %union.anon* %23 to i8**
  %25 = load i8*, i8** %24, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %20, i8* align 8 %25, i64 %19, i1 false) #17
  br label %26

26:                                               ; preds = %15, %12
  %27 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntpLERKS0_(%"class.llvm::APInt"* nonnull %5, %"class.llvm::APInt"* dereferenceable(16) %2) #20, !noalias !224
  %28 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %29 = load i32, i32* %7, align 8, !noalias !224
  store i32 %29, i32* %28, align 8, !alias.scope !224
  %30 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %31 = load i64, i64* %10, align 8, !noalias !224
  store i64 %31, i64* %30, align 8, !alias.scope !224
  store i32 0, i32* %7, align 8, !noalias !224
  %32 = call zeroext i1 @_ZNK4llvm5APInt3ultERKS0_(%"class.llvm::APInt"* %0, %"class.llvm::APInt"* dereferenceable(16) %2) #19
  %33 = zext i1 %32 to i8
  store i8 %33, i8* %3, align 1
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt7ssub_ovERKS0_Rb(%"class.llvm::APInt"* noalias nocapture sret, %"class.llvm::APInt"* nocapture readonly, %"class.llvm::APInt"* nocapture readonly dereferenceable(16), i8* nocapture dereferenceable(1)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.llvm::APInt", align 8
  %6 = bitcast %"class.llvm::APInt"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 -86, i64 16, i1 false)
  %7 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 0
  %8 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  store i32 %9, i32* %7, align 8
  %10 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1, i32 0
  store i64 0, i64* %10, align 8
  %11 = icmp ult i32 %9, 65
  br i1 %11, label %12, label %15

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %14 = load i64, i64* %13, align 8
  store i64 %14, i64* %10, align 8
  br label %26

15:                                               ; preds = %4
  %16 = zext i32 %9 to i64
  %17 = add nuw nsw i64 %16, 63
  %18 = lshr i64 %17, 6
  %19 = shl nuw nsw i64 %18, 3
  %20 = tail call i8* @_Znam(i64 %19) #18
  %21 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1
  %22 = bitcast %union.anon* %21 to i8**
  store i8* %20, i8** %22, align 8
  %23 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %24 = bitcast %union.anon* %23 to i8**
  %25 = load i8*, i8** %24, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %20, i8* align 8 %25, i64 %19, i1 false) #17
  br label %26

26:                                               ; preds = %15, %12
  %27 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntmIERKS0_(%"class.llvm::APInt"* nonnull %5, %"class.llvm::APInt"* dereferenceable(16) %2) #20, !noalias !227
  %28 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %29 = load i32, i32* %7, align 8, !noalias !227
  store i32 %29, i32* %28, align 8, !alias.scope !227
  %30 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %31 = load i64, i64* %10, align 8, !noalias !227
  store i64 %31, i64* %30, align 8, !alias.scope !227
  store i32 0, i32* %7, align 8, !noalias !227
  %32 = load i32, i32* %8, align 8
  %33 = add i32 %32, -1
  %34 = and i32 %33, 63
  %35 = zext i32 %34 to i64
  %36 = shl i64 1, %35
  %37 = icmp ult i32 %32, 65
  %38 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %39 = inttoptr i64 %31 to i64*
  br i1 %37, label %40, label %42

40:                                               ; preds = %26
  %41 = getelementptr inbounds %union.anon, %union.anon* %38, i64 0, i32 0
  br label %48

42:                                               ; preds = %26
  %43 = bitcast %union.anon* %38 to i64**
  %44 = load i64*, i64** %43, align 8
  %45 = lshr i32 %33, 6
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds i64, i64* %44, i64 %46
  br label %48

48:                                               ; preds = %40, %42
  %49 = phi i64* [ %41, %40 ], [ %47, %42 ]
  %50 = load i64, i64* %49, align 8
  %51 = and i64 %50, %36
  %52 = icmp eq i64 %51, 0
  %53 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 0
  %54 = load i32, i32* %53, align 8
  %55 = add i32 %54, -1
  %56 = and i32 %55, 63
  %57 = zext i32 %56 to i64
  %58 = shl i64 1, %57
  %59 = icmp ult i32 %54, 65
  %60 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1
  %61 = getelementptr inbounds %union.anon, %union.anon* %60, i64 0, i32 0
  %62 = bitcast %union.anon* %60 to i64**
  %63 = load i64*, i64** %62, align 8
  %64 = lshr i32 %55, 6
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds i64, i64* %63, i64 %65
  %67 = select i1 %59, i64* %61, i64* %66
  %68 = load i64, i64* %67, align 8
  %69 = and i64 %58, %68
  %70 = icmp eq i64 %69, 0
  %71 = xor i1 %52, %70
  br i1 %71, label %72, label %101

72:                                               ; preds = %48
  %73 = add i32 %29, -1
  %74 = and i32 %73, 63
  %75 = zext i32 %74 to i64
  %76 = shl i64 1, %75
  %77 = icmp ult i32 %29, 65
  %78 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %79 = lshr i32 %73, 6
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds i64, i64* %39, i64 %80
  %82 = select i1 %77, i64* %78, i64* %81
  %83 = load i64, i64* %82, align 8
  %84 = and i64 %83, %76
  %85 = icmp eq i64 %84, 0
  br i1 %37, label %86, label %88

86:                                               ; preds = %72
  %87 = getelementptr inbounds %union.anon, %union.anon* %38, i64 0, i32 0
  br label %94

88:                                               ; preds = %72
  %89 = bitcast %union.anon* %38 to i64**
  %90 = load i64*, i64** %89, align 8
  %91 = lshr i32 %33, 6
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds i64, i64* %90, i64 %92
  br label %94

94:                                               ; preds = %86, %88
  %95 = phi i64* [ %87, %86 ], [ %93, %88 ]
  %96 = load i64, i64* %95, align 8
  %97 = and i64 %96, %36
  %98 = icmp eq i64 %97, 0
  %99 = xor i1 %85, %98
  %100 = zext i1 %99 to i8
  br label %101

101:                                              ; preds = %94, %48
  %102 = phi i8 [ 0, %48 ], [ %100, %94 ]
  store i8 %102, i8* %3, align 1
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt7usub_ovERKS0_Rb(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"*, %"class.llvm::APInt"* nocapture readonly dereferenceable(16), i8* nocapture dereferenceable(1)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.llvm::APInt", align 8
  %6 = bitcast %"class.llvm::APInt"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 -86, i64 16, i1 false)
  %7 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 0
  %8 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  store i32 %9, i32* %7, align 8
  %10 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1, i32 0
  store i64 0, i64* %10, align 8
  %11 = icmp ult i32 %9, 65
  br i1 %11, label %12, label %15

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %14 = load i64, i64* %13, align 8
  store i64 %14, i64* %10, align 8
  br label %26

15:                                               ; preds = %4
  %16 = zext i32 %9 to i64
  %17 = add nuw nsw i64 %16, 63
  %18 = lshr i64 %17, 6
  %19 = shl nuw nsw i64 %18, 3
  %20 = tail call i8* @_Znam(i64 %19) #18
  %21 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1
  %22 = bitcast %union.anon* %21 to i8**
  store i8* %20, i8** %22, align 8
  %23 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %24 = bitcast %union.anon* %23 to i8**
  %25 = load i8*, i8** %24, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %20, i8* align 8 %25, i64 %19, i1 false) #17
  br label %26

26:                                               ; preds = %15, %12
  %27 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntmIERKS0_(%"class.llvm::APInt"* nonnull %5, %"class.llvm::APInt"* dereferenceable(16) %2) #20, !noalias !230
  %28 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %29 = load i32, i32* %7, align 8, !noalias !230
  store i32 %29, i32* %28, align 8, !alias.scope !230
  %30 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %31 = load i64, i64* %10, align 8, !noalias !230
  store i64 %31, i64* %30, align 8, !alias.scope !230
  store i32 0, i32* %7, align 8, !noalias !230
  %32 = call zeroext i1 @_ZNK4llvm5APInt3ugtERKS0_(%"class.llvm::APInt"* %0, %"class.llvm::APInt"* dereferenceable(16) %1) #19
  %33 = zext i1 %32 to i8
  store i8 %33, i8* %3, align 1
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4llvm5APInt3ugtERKS0_(%"class.llvm::APInt"*, %"class.llvm::APInt"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = tail call zeroext i1 @_ZNK4llvm5APInt3ultERKS0_(%"class.llvm::APInt"* %0, %"class.llvm::APInt"* dereferenceable(16) %1) #19
  br i1 %3, label %7, label %4

4:                                                ; preds = %2
  %5 = tail call zeroext i1 @_ZNK4llvm5APInteqERKS0_(%"class.llvm::APInt"* %0, %"class.llvm::APInt"* dereferenceable(16) %1) #20
  %6 = xor i1 %5, true
  br label %7

7:                                                ; preds = %4, %2
  %8 = phi i1 [ false, %2 ], [ %6, %4 ]
  ret i1 %8
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt7sdiv_ovERKS0_Rb(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"*, %"class.llvm::APInt"* dereferenceable(16), i8* nocapture dereferenceable(1)) local_unnamed_addr #0 align 2 {
  %5 = tail call zeroext i1 @_ZNK4llvm5APInt16isMinSignedValueEv(%"class.llvm::APInt"* %1) #19
  br i1 %5, label %6, label %9

6:                                                ; preds = %4
  %7 = tail call zeroext i1 @_ZNK4llvm5APInt14isAllOnesValueEv(%"class.llvm::APInt"* %2) #19
  %8 = zext i1 %7 to i8
  br label %9

9:                                                ; preds = %6, %4
  %10 = phi i8 [ 0, %4 ], [ %8, %6 ]
  store i8 %10, i8* %3, align 1
  tail call void @_ZNK4llvm5APInt4sdivERKS0_(%"class.llvm::APInt"* sret %0, %"class.llvm::APInt"* %1, %"class.llvm::APInt"* dereferenceable(16) %2) #19
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4llvm5APInt16isMinSignedValueEv(%"class.llvm::APInt"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = add i32 %3, -1
  %5 = and i32 %4, 63
  %6 = zext i32 %5 to i64
  %7 = shl i64 1, %6
  %8 = icmp ult i32 %3, 65
  %9 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  br i1 %8, label %10, label %12

10:                                               ; preds = %1
  %11 = getelementptr inbounds %union.anon, %union.anon* %9, i64 0, i32 0
  br label %18

12:                                               ; preds = %1
  %13 = bitcast %union.anon* %9 to i64**
  %14 = load i64*, i64** %13, align 8
  %15 = lshr i32 %4, 6
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds i64, i64* %14, i64 %16
  br label %18

18:                                               ; preds = %10, %12
  %19 = phi i64* [ %11, %10 ], [ %17, %12 ]
  %20 = load i64, i64* %19, align 8
  %21 = and i64 %20, %7
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %25, label %23

23:                                               ; preds = %18
  %24 = tail call zeroext i1 @_ZNK4llvm5APInt10isPowerOf2Ev(%"class.llvm::APInt"* %0) #19
  br label %25

25:                                               ; preds = %18, %23
  %26 = phi i1 [ false, %18 ], [ %24, %23 ]
  ret i1 %26
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4llvm5APInt14isAllOnesValueEv(%"class.llvm::APInt"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp ult i32 %3, 65
  br i1 %4, label %5, label %12

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = sub nuw nsw i32 64, %3
  %9 = zext i32 %8 to i64
  %10 = lshr i64 -1, %9
  %11 = icmp eq i64 %7, %10
  br label %35

12:                                               ; preds = %1
  %13 = zext i32 %3 to i64
  %14 = add nuw nsw i64 %13, 63
  %15 = and i64 %14, 8589934528
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %32, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %19 = bitcast %union.anon* %18 to i64**
  %20 = load i64*, i64** %19, align 8
  %21 = lshr i64 %14, 6
  br label %22

22:                                               ; preds = %22, %17
  %23 = phi i64 [ 0, %17 ], [ %30, %22 ]
  %24 = phi i32 [ 0, %17 ], [ %29, %22 ]
  %25 = getelementptr inbounds i64, i64* %20, i64 %23
  %26 = load i64, i64* %25, align 8
  %27 = tail call i64 @llvm.ctpop.i64(i64 %26) #17, !range !2
  %28 = trunc i64 %27 to i32
  %29 = add i32 %24, %28
  %30 = add nuw nsw i64 %23, 1
  %31 = icmp ult i64 %30, %21
  br i1 %31, label %22, label %32

32:                                               ; preds = %22, %12
  %33 = phi i32 [ 0, %12 ], [ %29, %22 ]
  %34 = icmp eq i32 %33, %3
  br label %35

35:                                               ; preds = %32, %5
  %36 = phi i1 [ %11, %5 ], [ %34, %32 ]
  ret i1 %36
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt7smul_ovERKS0_Rb(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"*, %"class.llvm::APInt"* dereferenceable(16), i8* nocapture dereferenceable(1)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.llvm::APInt", align 8
  %6 = alloca %"class.llvm::APInt", align 8
  %7 = bitcast %"class.llvm::APInt"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 -86, i64 16, i1 false)
  tail call void @_ZNK4llvm5APIntmlERKS0_(%"class.llvm::APInt"* sret %0, %"class.llvm::APInt"* %1, %"class.llvm::APInt"* dereferenceable(16) %2) #19
  %8 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = icmp ult i32 %9, 65
  br i1 %10, label %11, label %15

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %119, label %17

15:                                               ; preds = %4
  %16 = tail call zeroext i1 @_ZNK4llvm5APInt13EqualSlowCaseEm(%"class.llvm::APInt"* %1, i64 0) #20
  br i1 %16, label %119, label %17

17:                                               ; preds = %11, %15
  %18 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 0
  %19 = load i32, i32* %18, align 8
  %20 = icmp ult i32 %19, 65
  br i1 %20, label %21, label %25

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %119, label %27

25:                                               ; preds = %17
  %26 = tail call zeroext i1 @_ZNK4llvm5APInt13EqualSlowCaseEm(%"class.llvm::APInt"* %2, i64 0) #20
  br i1 %26, label %119, label %27

27:                                               ; preds = %21, %25
  %28 = bitcast %"class.llvm::APInt"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %28) #17
  call void @_ZNK4llvm5APInt4sdivERKS0_(%"class.llvm::APInt"* nonnull sret %5, %"class.llvm::APInt"* %0, %"class.llvm::APInt"* dereferenceable(16) %2) #19
  %29 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 0
  %30 = load i32, i32* %29, align 8
  %31 = icmp ult i32 %30, 65
  br i1 %31, label %55, label %32

32:                                               ; preds = %27
  %33 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1
  %34 = bitcast %union.anon* %33 to i64**
  %35 = load i64*, i64** %34, align 8
  %36 = zext i32 %30 to i64
  %37 = add nuw nsw i64 %36, 63
  %38 = lshr i64 %37, 6
  %39 = getelementptr inbounds i64, i64* %35, i64 %38
  %40 = icmp eq i64 %38, 0
  br i1 %40, label %61, label %41

41:                                               ; preds = %32
  %42 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %43 = bitcast %union.anon* %42 to i64**
  %44 = load i64*, i64** %43, align 8
  br label %45

45:                                               ; preds = %51, %41
  %46 = phi i64* [ %53, %51 ], [ %44, %41 ]
  %47 = phi i64* [ %52, %51 ], [ %35, %41 ]
  %48 = load i64, i64* %47, align 8
  %49 = load i64, i64* %46, align 8
  %50 = icmp eq i64 %48, %49
  br i1 %50, label %51, label %107

51:                                               ; preds = %45
  %52 = getelementptr inbounds i64, i64* %47, i64 1
  %53 = getelementptr inbounds i64, i64* %46, i64 1
  %54 = icmp eq i64* %52, %39
  br i1 %54, label %61, label %45

55:                                               ; preds = %27
  %56 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1, i32 0
  %57 = load i64, i64* %56, align 8
  %58 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %59 = load i64, i64* %58, align 8
  %60 = icmp eq i64 %57, %59
  br i1 %60, label %61, label %107

61:                                               ; preds = %51, %55, %32
  %62 = bitcast %"class.llvm::APInt"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %62) #17
  call void @_ZNK4llvm5APInt4sdivERKS0_(%"class.llvm::APInt"* nonnull sret %6, %"class.llvm::APInt"* %0, %"class.llvm::APInt"* dereferenceable(16) %1) #19
  %63 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 0
  %64 = load i32, i32* %63, align 8
  %65 = icmp ult i32 %64, 65
  br i1 %65, label %66, label %73

66:                                               ; preds = %61
  %67 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 1, i32 0
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1, i32 0
  %70 = load i64, i64* %69, align 8
  %71 = icmp ne i64 %68, %70
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %3, align 1
  br label %105

73:                                               ; preds = %61
  %74 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 1
  %75 = bitcast %union.anon* %74 to i64**
  %76 = load i64*, i64** %75, align 8
  %77 = zext i32 %64 to i64
  %78 = add nuw nsw i64 %77, 63
  %79 = lshr i64 %78, 6
  %80 = getelementptr inbounds i64, i64* %76, i64 %79
  %81 = icmp eq i64 %79, 0
  br i1 %81, label %82, label %84

82:                                               ; preds = %73
  store i8 0, i8* %3, align 1
  %83 = icmp eq i64* %76, null
  br i1 %83, label %105, label %103

84:                                               ; preds = %73
  %85 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1
  %86 = bitcast %union.anon* %85 to i64**
  %87 = load i64*, i64** %86, align 8
  br label %88

88:                                               ; preds = %94, %84
  %89 = phi i64* [ %96, %94 ], [ %87, %84 ]
  %90 = phi i64* [ %95, %94 ], [ %76, %84 ]
  %91 = load i64, i64* %90, align 8
  %92 = load i64, i64* %89, align 8
  %93 = icmp eq i64 %91, %92
  br i1 %93, label %94, label %98

94:                                               ; preds = %88
  %95 = getelementptr inbounds i64, i64* %90, i64 1
  %96 = getelementptr inbounds i64, i64* %89, i64 1
  %97 = icmp eq i64* %95, %80
  br i1 %97, label %98, label %88

98:                                               ; preds = %88, %94
  %99 = phi i8 [ 1, %88 ], [ 0, %94 ]
  store i8 %99, i8* %3, align 1
  %100 = icmp ult i32 %64, 65
  %101 = icmp eq i64* %76, null
  %102 = or i1 %100, %101
  br i1 %102, label %105, label %103

103:                                              ; preds = %98, %82
  %104 = bitcast i64* %76 to i8*
  call void @_ZdaPv(i8* %104) #18
  br label %105

105:                                              ; preds = %98, %66, %82, %103
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %62) #17
  %106 = load i32, i32* %29, align 8
  br label %108

107:                                              ; preds = %45, %55
  store i8 1, i8* %3, align 1
  br label %108

108:                                              ; preds = %107, %105
  %109 = phi i32 [ %30, %107 ], [ %106, %105 ]
  %110 = icmp ugt i32 %109, 64
  br i1 %110, label %111, label %118

111:                                              ; preds = %108
  %112 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1
  %113 = bitcast %union.anon* %112 to i64**
  %114 = load i64*, i64** %113, align 8
  %115 = icmp eq i64* %114, null
  br i1 %115, label %118, label %116

116:                                              ; preds = %111
  %117 = bitcast i64* %114 to i8*
  call void @_ZdaPv(i8* %117) #18
  br label %118

118:                                              ; preds = %108, %111, %116
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %28) #17
  br label %120

119:                                              ; preds = %21, %11, %25, %15
  store i8 0, i8* %3, align 1
  br label %120

120:                                              ; preds = %118, %119
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt7umul_ovERKS0_Rb(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"*, %"class.llvm::APInt"* dereferenceable(16), i8* nocapture dereferenceable(1)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.llvm::APInt", align 8
  %6 = alloca %"class.llvm::APInt", align 8
  %7 = bitcast %"class.llvm::APInt"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 -86, i64 16, i1 false)
  tail call void @_ZNK4llvm5APIntmlERKS0_(%"class.llvm::APInt"* sret %0, %"class.llvm::APInt"* %1, %"class.llvm::APInt"* dereferenceable(16) %2) #19
  %8 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = icmp ult i32 %9, 65
  br i1 %10, label %11, label %15

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %119, label %17

15:                                               ; preds = %4
  %16 = tail call zeroext i1 @_ZNK4llvm5APInt13EqualSlowCaseEm(%"class.llvm::APInt"* %1, i64 0) #20
  br i1 %16, label %119, label %17

17:                                               ; preds = %11, %15
  %18 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 0
  %19 = load i32, i32* %18, align 8
  %20 = icmp ult i32 %19, 65
  br i1 %20, label %21, label %25

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %119, label %27

25:                                               ; preds = %17
  %26 = tail call zeroext i1 @_ZNK4llvm5APInt13EqualSlowCaseEm(%"class.llvm::APInt"* %2, i64 0) #20
  br i1 %26, label %119, label %27

27:                                               ; preds = %21, %25
  %28 = bitcast %"class.llvm::APInt"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %28) #17
  call void @_ZNK4llvm5APInt4udivERKS0_(%"class.llvm::APInt"* nonnull sret %5, %"class.llvm::APInt"* %0, %"class.llvm::APInt"* dereferenceable(16) %2) #19
  %29 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 0
  %30 = load i32, i32* %29, align 8
  %31 = icmp ult i32 %30, 65
  br i1 %31, label %55, label %32

32:                                               ; preds = %27
  %33 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1
  %34 = bitcast %union.anon* %33 to i64**
  %35 = load i64*, i64** %34, align 8
  %36 = zext i32 %30 to i64
  %37 = add nuw nsw i64 %36, 63
  %38 = lshr i64 %37, 6
  %39 = getelementptr inbounds i64, i64* %35, i64 %38
  %40 = icmp eq i64 %38, 0
  br i1 %40, label %61, label %41

41:                                               ; preds = %32
  %42 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  %43 = bitcast %union.anon* %42 to i64**
  %44 = load i64*, i64** %43, align 8
  br label %45

45:                                               ; preds = %51, %41
  %46 = phi i64* [ %53, %51 ], [ %44, %41 ]
  %47 = phi i64* [ %52, %51 ], [ %35, %41 ]
  %48 = load i64, i64* %47, align 8
  %49 = load i64, i64* %46, align 8
  %50 = icmp eq i64 %48, %49
  br i1 %50, label %51, label %107

51:                                               ; preds = %45
  %52 = getelementptr inbounds i64, i64* %47, i64 1
  %53 = getelementptr inbounds i64, i64* %46, i64 1
  %54 = icmp eq i64* %52, %39
  br i1 %54, label %61, label %45

55:                                               ; preds = %27
  %56 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1, i32 0
  %57 = load i64, i64* %56, align 8
  %58 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %59 = load i64, i64* %58, align 8
  %60 = icmp eq i64 %57, %59
  br i1 %60, label %61, label %107

61:                                               ; preds = %51, %55, %32
  %62 = bitcast %"class.llvm::APInt"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %62) #17
  call void @_ZNK4llvm5APInt4udivERKS0_(%"class.llvm::APInt"* nonnull sret %6, %"class.llvm::APInt"* %0, %"class.llvm::APInt"* dereferenceable(16) %1) #19
  %63 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 0
  %64 = load i32, i32* %63, align 8
  %65 = icmp ult i32 %64, 65
  br i1 %65, label %66, label %73

66:                                               ; preds = %61
  %67 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 1, i32 0
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1, i32 0
  %70 = load i64, i64* %69, align 8
  %71 = icmp ne i64 %68, %70
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %3, align 1
  br label %105

73:                                               ; preds = %61
  %74 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %6, i64 0, i32 1
  %75 = bitcast %union.anon* %74 to i64**
  %76 = load i64*, i64** %75, align 8
  %77 = zext i32 %64 to i64
  %78 = add nuw nsw i64 %77, 63
  %79 = lshr i64 %78, 6
  %80 = getelementptr inbounds i64, i64* %76, i64 %79
  %81 = icmp eq i64 %79, 0
  br i1 %81, label %82, label %84

82:                                               ; preds = %73
  store i8 0, i8* %3, align 1
  %83 = icmp eq i64* %76, null
  br i1 %83, label %105, label %103

84:                                               ; preds = %73
  %85 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %2, i64 0, i32 1
  %86 = bitcast %union.anon* %85 to i64**
  %87 = load i64*, i64** %86, align 8
  br label %88

88:                                               ; preds = %94, %84
  %89 = phi i64* [ %96, %94 ], [ %87, %84 ]
  %90 = phi i64* [ %95, %94 ], [ %76, %84 ]
  %91 = load i64, i64* %90, align 8
  %92 = load i64, i64* %89, align 8
  %93 = icmp eq i64 %91, %92
  br i1 %93, label %94, label %98

94:                                               ; preds = %88
  %95 = getelementptr inbounds i64, i64* %90, i64 1
  %96 = getelementptr inbounds i64, i64* %89, i64 1
  %97 = icmp eq i64* %95, %80
  br i1 %97, label %98, label %88

98:                                               ; preds = %88, %94
  %99 = phi i8 [ 1, %88 ], [ 0, %94 ]
  store i8 %99, i8* %3, align 1
  %100 = icmp ult i32 %64, 65
  %101 = icmp eq i64* %76, null
  %102 = or i1 %100, %101
  br i1 %102, label %105, label %103

103:                                              ; preds = %98, %82
  %104 = bitcast i64* %76 to i8*
  call void @_ZdaPv(i8* %104) #18
  br label %105

105:                                              ; preds = %98, %66, %82, %103
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %62) #17
  %106 = load i32, i32* %29, align 8
  br label %108

107:                                              ; preds = %45, %55
  store i8 1, i8* %3, align 1
  br label %108

108:                                              ; preds = %107, %105
  %109 = phi i32 [ %30, %107 ], [ %106, %105 ]
  %110 = icmp ugt i32 %109, 64
  br i1 %110, label %111, label %118

111:                                              ; preds = %108
  %112 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %5, i64 0, i32 1
  %113 = bitcast %union.anon* %112 to i64**
  %114 = load i64*, i64** %113, align 8
  %115 = icmp eq i64* %114, null
  br i1 %115, label %118, label %116

116:                                              ; preds = %111
  %117 = bitcast i64* %114 to i8*
  call void @_ZdaPv(i8* %117) #18
  br label %118

118:                                              ; preds = %108, %111, %116
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %28) #17
  br label %120

119:                                              ; preds = %21, %11, %25, %15
  store i8 0, i8* %3, align 1
  br label %120

120:                                              ; preds = %118, %119
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt7sshl_ovERKS0_Rb(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"*, %"class.llvm::APInt"* dereferenceable(16), i8* nocapture dereferenceable(1)) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = zext i32 %6 to i64
  %8 = tail call zeroext i1 @_ZNK4llvm5APInt3ultEm(%"class.llvm::APInt"* %2, i64 %7) #20
  %9 = xor i1 %8, true
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %3, align 1
  %11 = load i32, i32* %5, align 8
  br i1 %8, label %13, label %12

12:                                               ; preds = %4
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %11, i64 0, i1 zeroext false) #19
  br label %55

13:                                               ; preds = %4
  %14 = add i32 %11, -1
  %15 = and i32 %14, 63
  %16 = zext i32 %15 to i64
  %17 = shl i64 1, %16
  %18 = icmp ult i32 %11, 65
  %19 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1
  br i1 %18, label %20, label %22

20:                                               ; preds = %13
  %21 = getelementptr inbounds %union.anon, %union.anon* %19, i64 0, i32 0
  br label %28

22:                                               ; preds = %13
  %23 = bitcast %union.anon* %19 to i64**
  %24 = load i64*, i64** %23, align 8
  %25 = lshr i32 %14, 6
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds i64, i64* %24, i64 %26
  br label %28

28:                                               ; preds = %20, %22
  %29 = phi i64* [ %21, %20 ], [ %27, %22 ]
  %30 = load i64, i64* %29, align 8
  %31 = and i64 %30, %17
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %33, label %43

33:                                               ; preds = %28
  br i1 %18, label %34, label %41

34:                                               ; preds = %33
  %35 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %36 = load i64, i64* %35, align 8
  %37 = tail call i64 @llvm.ctlz.i64(i64 %36, i1 false) #17, !range !2
  %38 = trunc i64 %37 to i32
  %39 = add nsw i32 %11, -64
  %40 = add i32 %39, %38
  br label %45

41:                                               ; preds = %33
  %42 = tail call i32 @_ZNK4llvm5APInt25countLeadingZerosSlowCaseEv(%"class.llvm::APInt"* %1) #20
  br label %45

43:                                               ; preds = %28
  %44 = tail call i32 @_ZNK4llvm5APInt16countLeadingOnesEv(%"class.llvm::APInt"* %1) #19
  br label %45

45:                                               ; preds = %41, %34, %43
  %46 = phi i32 [ %44, %43 ], [ %40, %34 ], [ %42, %41 ]
  %47 = zext i32 %46 to i64
  %48 = tail call zeroext i1 @_ZNK4llvm5APInt3ultEm(%"class.llvm::APInt"* %2, i64 %47) #20
  %49 = xor i1 %48, true
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %3, align 1
  %51 = load i32, i32* %5, align 8, !noalias !233
  %52 = zext i32 %51 to i64
  %53 = tail call i64 @_ZNK4llvm5APInt15getLimitedValueEm(%"class.llvm::APInt"* %2, i64 %52) #20, !noalias !233
  %54 = trunc i64 %53 to i32
  tail call void @_ZNK4llvm5APInt3shlEj(%"class.llvm::APInt"* sret %0, %"class.llvm::APInt"* %1, i32 %54) #20
  br label %55

55:                                               ; preds = %45, %12
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt7ushl_ovERKS0_Rb(%"class.llvm::APInt"* noalias sret, %"class.llvm::APInt"*, %"class.llvm::APInt"* dereferenceable(16), i8* nocapture dereferenceable(1)) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = zext i32 %6 to i64
  %8 = tail call zeroext i1 @_ZNK4llvm5APInt3ultEm(%"class.llvm::APInt"* %2, i64 %7) #20
  %9 = xor i1 %8, true
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %3, align 1
  %11 = load i32, i32* %5, align 8
  br i1 %8, label %13, label %12

12:                                               ; preds = %4
  tail call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* %0, i32 %11, i64 0, i1 zeroext false) #19
  br label %33

13:                                               ; preds = %4
  %14 = icmp ult i32 %11, 65
  br i1 %14, label %15, label %22

15:                                               ; preds = %13
  %16 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %1, i64 0, i32 1, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = tail call i64 @llvm.ctlz.i64(i64 %17, i1 false) #17, !range !2
  %19 = trunc i64 %18 to i32
  %20 = add nsw i32 %11, -64
  %21 = add i32 %20, %19
  br label %24

22:                                               ; preds = %13
  %23 = tail call i32 @_ZNK4llvm5APInt25countLeadingZerosSlowCaseEv(%"class.llvm::APInt"* %1) #20
  br label %24

24:                                               ; preds = %15, %22
  %25 = phi i32 [ %21, %15 ], [ %23, %22 ]
  %26 = zext i32 %25 to i64
  %27 = tail call zeroext i1 @_ZNK4llvm5APInt3ugtEm(%"class.llvm::APInt"* %2, i64 %26) #19
  %28 = zext i1 %27 to i8
  store i8 %28, i8* %3, align 1
  %29 = load i32, i32* %5, align 8, !noalias !238
  %30 = zext i32 %29 to i64
  %31 = tail call i64 @_ZNK4llvm5APInt15getLimitedValueEm(%"class.llvm::APInt"* %2, i64 %30) #20, !noalias !238
  %32 = trunc i64 %31 to i32
  tail call void @_ZNK4llvm5APInt3shlEj(%"class.llvm::APInt"* sret %0, %"class.llvm::APInt"* %1, i32 %32) #20
  br label %33

33:                                               ; preds = %24, %12
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4llvm5APInt3ugtEm(%"class.llvm::APInt"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 65
  br i1 %5, label %6, label %13

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = tail call i64 @llvm.ctlz.i64(i64 %8, i1 false) #17, !range !2
  %10 = trunc i64 %9 to i32
  %11 = add nsw i32 %4, -64
  %12 = add i32 %11, %10
  br label %15

13:                                               ; preds = %2
  %14 = tail call i32 @_ZNK4llvm5APInt25countLeadingZerosSlowCaseEv(%"class.llvm::APInt"* %0) #20
  br label %15

15:                                               ; preds = %6, %13
  %16 = phi i32 [ %12, %6 ], [ %14, %13 ]
  %17 = sub i32 %4, %16
  %18 = icmp ugt i32 %17, 64
  br i1 %18, label %30, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  br i1 %5, label %21, label %23

21:                                               ; preds = %19
  %22 = getelementptr inbounds %union.anon, %union.anon* %20, i64 0, i32 0
  br label %26

23:                                               ; preds = %19
  %24 = bitcast %union.anon* %20 to i64**
  %25 = load i64*, i64** %24, align 8
  br label %26

26:                                               ; preds = %21, %23
  %27 = phi i64* [ %22, %21 ], [ %25, %23 ]
  %28 = load i64, i64* %27, align 8
  %29 = icmp ugt i64 %28, %1
  br label %30

30:                                               ; preds = %15, %26
  %31 = phi i1 [ %29, %26 ], [ true, %15 ]
  ret i1 %31
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm5APInt11flipAllBitsEv(%"class.llvm::APInt"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp ult i32 %3, 65
  br i1 %4, label %13, label %5

5:                                                ; preds = %1
  %6 = zext i32 %3 to i64
  %7 = add nuw nsw i64 %6, 63
  %8 = and i64 %7, 8589934528
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %29, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %12 = bitcast %union.anon* %11 to i64**
  br label %17

13:                                               ; preds = %1
  %14 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = xor i64 %15, -1
  store i64 %16, i64* %14, align 8
  br label %29

17:                                               ; preds = %10, %17
  %18 = phi i64 [ 0, %10 ], [ %23, %17 ]
  %19 = load i64*, i64** %12, align 8
  %20 = getelementptr inbounds i64, i64* %19, i64 %18
  %21 = load i64, i64* %20, align 8
  %22 = xor i64 %21, -1
  store i64 %22, i64* %20, align 8
  %23 = add nuw nsw i64 %18, 1
  %24 = load i32, i32* %2, align 8
  %25 = zext i32 %24 to i64
  %26 = add nuw nsw i64 %25, 63
  %27 = lshr i64 %26, 6
  %28 = icmp ult i64 %23, %27
  br i1 %28, label %17, label %29

29:                                               ; preds = %17, %5, %13
  %30 = tail call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APInt15clearUnusedBitsEv(%"class.llvm::APInt"* %0) #19
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt8toStringERNS_15SmallVectorImplIcEEjbb(%"class.llvm::APInt"* nocapture readonly, %"class.llvm::SmallVectorImpl.2"* dereferenceable(32), i32, i1 zeroext, i1 zeroext) local_unnamed_addr #0 align 2 {
  %6 = alloca i8, align 1
  %7 = alloca [65 x i8], align 16
  %8 = alloca i8, align 1
  %9 = alloca %"class.llvm::APInt", align 8
  %10 = alloca i8, align 1
  %11 = alloca %"class.llvm::APInt", align 8
  %12 = alloca %"class.llvm::APInt", align 8
  %13 = alloca <2 x i64>, align 16
  %14 = bitcast <2 x i64>* %13 to %"class.llvm::APInt"*
  %15 = alloca %"class.llvm::APInt", align 8
  br i1 %4, label %16, label %28

16:                                               ; preds = %5
  %17 = add i32 %2, -2
  %18 = lshr i32 %17, 1
  %19 = shl i32 %17, 31
  %20 = or i32 %18, %19
  %21 = trunc i32 %18 to i8
  %22 = lshr i8 -103, %21
  %23 = and i8 %22, 1
  %24 = icmp ne i8 %23, 0
  call void @llvm.assume(i1 %24)
  %25 = sext i32 %20 to i64
  %26 = getelementptr inbounds [8 x i8*], [8 x i8*]* @switch.table._ZNK4llvm5APInt8toStringERNS_15SmallVectorImplIcEEjbb, i64 0, i64 %25
  %27 = load i8*, i8** %26, align 8
  br label %28

28:                                               ; preds = %16, %5
  %29 = phi i8* [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), %5 ], [ %27, %16 ]
  %30 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %31 = load i32, i32* %30, align 8
  %32 = icmp ult i32 %31, 65
  br i1 %32, label %33, label %37

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %35 = load i64, i64* %34, align 8
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %39, label %49

37:                                               ; preds = %28
  %38 = tail call zeroext i1 @_ZNK4llvm5APInt13EqualSlowCaseEm(%"class.llvm::APInt"* %0, i64 0) #20
  br i1 %38, label %39, label %87

39:                                               ; preds = %37, %33
  %40 = load i8, i8* %29, align 1
  %41 = icmp eq i8 %40, 0
  %42 = bitcast %"class.llvm::SmallVectorImpl.2"* %1 to %"class.llvm::SmallVectorTemplateBase.3"*
  br i1 %41, label %48, label %43

43:                                               ; preds = %39, %43
  %44 = phi i8* [ %45, %43 ], [ %29, %39 ]
  tail call void @_ZN4llvm23SmallVectorTemplateBaseIcLb1EE9push_backERKc(%"class.llvm::SmallVectorTemplateBase.3"* %42, i8* dereferenceable(1) %44) #19
  %45 = getelementptr inbounds i8, i8* %44, i64 1
  %46 = load i8, i8* %45, align 1
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %48, label %43

48:                                               ; preds = %43, %39
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %6) #17
  store i8 48, i8* %6, align 1
  call void @_ZN4llvm23SmallVectorTemplateBaseIcLb1EE9push_backERKc(%"class.llvm::SmallVectorTemplateBase.3"* %42, i8* nonnull dereferenceable(1) %6) #19
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #17
  br label %271

49:                                               ; preds = %33
  %50 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 65, i8* nonnull %50) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %50, i8 -86, i64 65, i1 false)
  %51 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i64 65
  br i1 %3, label %52, label %61

52:                                               ; preds = %49
  %53 = sub nuw nsw i32 64, %31
  %54 = zext i32 %53 to i64
  %55 = shl i64 %35, %54
  %56 = ashr i64 %55, %54
  %57 = icmp sgt i64 %56, -1
  br i1 %57, label %61, label %58

58:                                               ; preds = %52
  %59 = bitcast %"class.llvm::SmallVectorImpl.2"* %1 to %"class.llvm::SmallVectorTemplateBase.3"*
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %8) #17
  store i8 45, i8* %8, align 1
  call void @_ZN4llvm23SmallVectorTemplateBaseIcLb1EE9push_backERKc(%"class.llvm::SmallVectorTemplateBase.3"* %59, i8* nonnull dereferenceable(1) %8) #19
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %8) #17
  %60 = sub i64 0, %56
  br label %61

61:                                               ; preds = %49, %58, %52
  %62 = phi i64 [ %60, %58 ], [ %56, %52 ], [ %35, %49 ]
  %63 = load i8, i8* %29, align 1
  %64 = icmp eq i8 %63, 0
  br i1 %64, label %67, label %65

65:                                               ; preds = %61
  %66 = bitcast %"class.llvm::SmallVectorImpl.2"* %1 to %"class.llvm::SmallVectorTemplateBase.3"*
  br label %71

67:                                               ; preds = %71, %61
  %68 = icmp eq i64 %62, 0
  br i1 %68, label %85, label %69

69:                                               ; preds = %67
  %70 = zext i32 %2 to i64
  br label %76

71:                                               ; preds = %65, %71
  %72 = phi i8* [ %29, %65 ], [ %73, %71 ]
  call void @_ZN4llvm23SmallVectorTemplateBaseIcLb1EE9push_backERKc(%"class.llvm::SmallVectorTemplateBase.3"* %66, i8* dereferenceable(1) %72) #19
  %73 = getelementptr inbounds i8, i8* %72, i64 1
  %74 = load i8, i8* %73, align 1
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %67, label %71

76:                                               ; preds = %69, %76
  %77 = phi i64 [ %62, %69 ], [ %83, %76 ]
  %78 = phi i8* [ %51, %69 ], [ %82, %76 ]
  %79 = urem i64 %77, %70
  %80 = getelementptr inbounds [37 x i8], [37 x i8]* @_ZZNK4llvm5APInt8toStringERNS_15SmallVectorImplIcEEjbbE6Digits, i64 0, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = getelementptr inbounds i8, i8* %78, i64 -1
  store i8 %81, i8* %82, align 1
  %83 = udiv i64 %77, %70
  %84 = icmp ult i64 %77, %70
  br i1 %84, label %85, label %76

85:                                               ; preds = %76, %67
  %86 = phi i8* [ %51, %67 ], [ %82, %76 ]
  call void @_ZN4llvm15SmallVectorImplIcE6appendIPcEEvT_S4_(%"class.llvm::SmallVectorImpl.2"* %1, i8* %86, i8* %51) #19
  call void @llvm.lifetime.end.p0i8(i64 65, i8* nonnull %50) #17
  br label %271

87:                                               ; preds = %37
  %88 = bitcast %"class.llvm::APInt"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %88) #17
  %89 = bitcast %"class.llvm::APInt"* %9 to i64*
  store i64 -6148914691236517206, i64* %89, align 8
  %90 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %9, i64 0, i32 0
  store i32 %31, i32* %90, align 8
  %91 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %9, i64 0, i32 1, i32 0
  %92 = zext i32 %31 to i64
  %93 = add nuw nsw i64 %92, 63
  %94 = lshr i64 %93, 6
  %95 = shl nuw nsw i64 %94, 3
  %96 = tail call i8* @_Znam(i64 %95) #18
  %97 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %9, i64 0, i32 1
  %98 = bitcast %union.anon* %97 to i8**
  store i8* %96, i8** %98, align 8
  %99 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %100 = bitcast %union.anon* %99 to i8**
  %101 = load i8*, i8** %100, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %96, i8* align 8 %101, i64 %95, i1 false) #17
  br i1 %3, label %102, label %117

102:                                              ; preds = %87
  %103 = bitcast i8* %101 to i64*
  %104 = add i32 %31, -1
  %105 = and i32 %104, 63
  %106 = zext i32 %105 to i64
  %107 = shl i64 1, %106
  %108 = lshr i32 %104, 6
  %109 = zext i32 %108 to i64
  %110 = getelementptr inbounds i64, i64* %103, i64 %109
  %111 = load i64, i64* %110, align 8
  %112 = and i64 %111, %107
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %117, label %114

114:                                              ; preds = %102
  call void @_ZN4llvm5APInt11flipAllBitsEv(%"class.llvm::APInt"* nonnull %9) #19
  %115 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntppEv(%"class.llvm::APInt"* nonnull %9) #19
  %116 = bitcast %"class.llvm::SmallVectorImpl.2"* %1 to %"class.llvm::SmallVectorTemplateBase.3"*
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %10) #17
  store i8 45, i8* %10, align 1
  call void @_ZN4llvm23SmallVectorTemplateBaseIcLb1EE9push_backERKc(%"class.llvm::SmallVectorTemplateBase.3"* %116, i8* nonnull dereferenceable(1) %10) #19
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %10) #17
  br label %117

117:                                              ; preds = %102, %114, %87
  %118 = load i8, i8* %29, align 1
  %119 = icmp eq i8 %118, 0
  br i1 %119, label %127, label %120

120:                                              ; preds = %117
  %121 = bitcast %"class.llvm::SmallVectorImpl.2"* %1 to %"class.llvm::SmallVectorTemplateBase.3"*
  br label %122

122:                                              ; preds = %120, %122
  %123 = phi i8* [ %29, %120 ], [ %124, %122 ]
  call void @_ZN4llvm23SmallVectorTemplateBaseIcLb1EE9push_backERKc(%"class.llvm::SmallVectorTemplateBase.3"* %121, i8* dereferenceable(1) %123) #19
  %124 = getelementptr inbounds i8, i8* %123, i64 1
  %125 = load i8, i8* %124, align 1
  %126 = icmp eq i8 %125, 0
  br i1 %126, label %127, label %122

127:                                              ; preds = %122, %117
  %128 = getelementptr inbounds %"class.llvm::SmallVectorImpl.2", %"class.llvm::SmallVectorImpl.2"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %129 = bitcast i8** %128 to i64*
  %130 = load i64, i64* %129, align 8
  %131 = bitcast %"class.llvm::SmallVectorImpl.2"* %1 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = sub i64 %130, %132
  switch i32 %2, label %173 [
    i32 16, label %137
    i32 2, label %134
    i32 8, label %134
  ]

134:                                              ; preds = %127, %127
  %135 = icmp eq i32 %2, 8
  %136 = select i1 %135, i32 3, i32 1
  br label %137

137:                                              ; preds = %127, %134
  %138 = phi i32 [ %136, %134 ], [ 4, %127 ]
  %139 = add nsw i32 %2, -1
  %140 = load i32, i32* %90, align 8
  %141 = getelementptr inbounds %union.anon, %union.anon* %97, i64 0, i32 0
  %142 = bitcast %union.anon* %97 to i64**
  %143 = bitcast %"class.llvm::SmallVectorImpl.2"* %1 to %"class.llvm::SmallVectorTemplateBase.3"*
  %144 = bitcast %"class.llvm::APInt"* %11 to i8*
  %145 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %11, i64 0, i32 1, i32 0
  %146 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %11, i64 0, i32 0
  br label %147

147:                                              ; preds = %170, %137
  %148 = phi i32 [ %172, %170 ], [ %140, %137 ]
  %149 = icmp ult i32 %148, 65
  br i1 %149, label %150, label %153

150:                                              ; preds = %147
  %151 = load i64, i64* %91, align 8
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %243, label %155

153:                                              ; preds = %147
  %154 = call zeroext i1 @_ZNK4llvm5APInt13EqualSlowCaseEm(%"class.llvm::APInt"* nonnull %9, i64 0) #20
  br i1 %154, label %243, label %155

155:                                              ; preds = %150, %153
  %156 = load i64*, i64** %142, align 8
  %157 = select i1 %149, i64* %141, i64* %156
  %158 = load i64, i64* %157, align 8
  %159 = trunc i64 %158 to i32
  %160 = and i32 %139, %159
  %161 = zext i32 %160 to i64
  %162 = getelementptr inbounds [37 x i8], [37 x i8]* @_ZZNK4llvm5APInt8toStringERNS_15SmallVectorImplIcEEjbbE6Digits, i64 0, i64 %161
  call void @_ZN4llvm23SmallVectorTemplateBaseIcLb1EE9push_backERKc(%"class.llvm::SmallVectorTemplateBase.3"* %143, i8* dereferenceable(1) %162) #19
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %144) #17
  call void @_ZNK4llvm5APInt4lshrEj(%"class.llvm::APInt"* nonnull sret %11, %"class.llvm::APInt"* nonnull %9, i32 %138) #19
  %163 = load i32, i32* %90, align 8
  %164 = icmp ult i32 %163, 65
  br i1 %164, label %170, label %165

165:                                              ; preds = %155
  %166 = load i64*, i64** %142, align 8
  %167 = icmp eq i64* %166, null
  br i1 %167, label %170, label %168

168:                                              ; preds = %165
  %169 = bitcast i64* %166 to i8*
  call void @_ZdaPv(i8* %169) #18
  br label %170

170:                                              ; preds = %168, %165, %155
  %171 = load i64, i64* %145, align 8
  store i64 %171, i64* %91, align 8
  %172 = load i32, i32* %146, align 8
  store i32 %172, i32* %90, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %144) #17
  br label %147

173:                                              ; preds = %127
  %174 = bitcast %"class.llvm::APInt"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %174) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %174, i8 -86, i64 16, i1 false)
  %175 = icmp eq i32 %2, 10
  %176 = select i1 %175, i32 4, i32 8
  %177 = zext i32 %2 to i64
  call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* nonnull %12, i32 %176, i64 %177, i1 zeroext false) #19
  %178 = bitcast <2 x i64>* %13 to i8*
  %179 = bitcast <2 x i64>* %13 to i32*
  %180 = bitcast %"class.llvm::APInt"* %15 to i8*
  %181 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %12, i64 0, i32 0
  %182 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %14, i64 0, i32 1
  %183 = getelementptr inbounds %union.anon, %union.anon* %182, i64 0, i32 0
  %184 = bitcast %union.anon* %182 to i64**
  %185 = bitcast %"class.llvm::SmallVectorImpl.2"* %1 to %"class.llvm::SmallVectorTemplateBase.3"*
  %186 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %15, i64 0, i32 0
  %187 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %15, i64 0, i32 1
  %188 = bitcast %union.anon* %187 to i64**
  br label %189

189:                                              ; preds = %231, %173
  %190 = load i32, i32* %90, align 8
  %191 = icmp ult i32 %190, 65
  br i1 %191, label %192, label %195

192:                                              ; preds = %189
  %193 = load i64, i64* %91, align 8
  %194 = icmp eq i64 %193, 0
  br i1 %194, label %232, label %197

195:                                              ; preds = %189
  %196 = call zeroext i1 @_ZNK4llvm5APInt13EqualSlowCaseEm(%"class.llvm::APInt"* nonnull %9, i64 0) #20
  br i1 %196, label %232, label %197

197:                                              ; preds = %192, %195
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %178) #17
  store <2 x i64> <i64 -6148914691236517206, i64 0>, <2 x i64>* %13, align 16
  store i32 1, i32* %179, align 16
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %180) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %180, i8 -86, i64 16, i1 false)
  call void @_ZN4llvm5APIntC2Ejmb(%"class.llvm::APInt"* nonnull %15, i32 %190, i64 0, i1 zeroext false) #19
  %198 = load i32, i32* %90, align 8
  %199 = zext i32 %198 to i64
  %200 = add nuw nsw i64 %199, 63
  %201 = lshr i64 %200, 6
  %202 = trunc i64 %201 to i32
  %203 = load i32, i32* %181, align 8
  %204 = zext i32 %203 to i64
  %205 = add nuw nsw i64 %204, 63
  %206 = lshr i64 %205, 6
  %207 = trunc i64 %206 to i32
  call void @_ZN4llvm5APInt6divideERKS0_jS2_jPS0_S3_(%"class.llvm::APInt"* nonnull dereferenceable(16) %9, i32 %202, %"class.llvm::APInt"* nonnull dereferenceable(16) %12, i32 %207, %"class.llvm::APInt"* nonnull %15, %"class.llvm::APInt"* nonnull %14) #19
  %208 = load i32, i32* %179, align 16
  %209 = icmp ult i32 %208, 65
  %210 = load i64*, i64** %184, align 8
  %211 = select i1 %209, i64* %183, i64* %210
  %212 = load i64, i64* %211, align 8
  %213 = and i64 %212, 4294967295
  %214 = getelementptr inbounds [37 x i8], [37 x i8]* @_ZZNK4llvm5APInt8toStringERNS_15SmallVectorImplIcEEjbbE6Digits, i64 0, i64 %213
  call void @_ZN4llvm23SmallVectorTemplateBaseIcLb1EE9push_backERKc(%"class.llvm::SmallVectorTemplateBase.3"* %185, i8* dereferenceable(1) %214) #19
  %215 = call dereferenceable(16) %"class.llvm::APInt"* @_ZN4llvm5APIntaSERKS0_(%"class.llvm::APInt"* nonnull %9, %"class.llvm::APInt"* nonnull dereferenceable(16) %15) #19
  %216 = load i32, i32* %186, align 8
  %217 = icmp ugt i32 %216, 64
  br i1 %217, label %218, label %223

218:                                              ; preds = %197
  %219 = load i64*, i64** %188, align 8
  %220 = icmp eq i64* %219, null
  br i1 %220, label %223, label %221

221:                                              ; preds = %218
  %222 = bitcast i64* %219 to i8*
  call void @_ZdaPv(i8* %222) #18
  br label %223

223:                                              ; preds = %197, %218, %221
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %180) #17
  %224 = load i32, i32* %179, align 16
  %225 = icmp ugt i32 %224, 64
  br i1 %225, label %226, label %231

226:                                              ; preds = %223
  %227 = load i64*, i64** %184, align 8
  %228 = icmp eq i64* %227, null
  br i1 %228, label %231, label %229

229:                                              ; preds = %226
  %230 = bitcast i64* %227 to i8*
  call void @_ZdaPv(i8* %230) #18
  br label %231

231:                                              ; preds = %223, %226, %229
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %178) #17
  br label %189

232:                                              ; preds = %192, %195
  %233 = load i32, i32* %181, align 8
  %234 = icmp ugt i32 %233, 64
  br i1 %234, label %235, label %242

235:                                              ; preds = %232
  %236 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %12, i64 0, i32 1
  %237 = bitcast %union.anon* %236 to i64**
  %238 = load i64*, i64** %237, align 8
  %239 = icmp eq i64* %238, null
  br i1 %239, label %242, label %240

240:                                              ; preds = %235
  %241 = bitcast i64* %238 to i8*
  call void @_ZdaPv(i8* %241) #18
  br label %242

242:                                              ; preds = %232, %235, %240
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %174) #17
  br label %243

243:                                              ; preds = %153, %150, %242
  %244 = getelementptr inbounds %"class.llvm::SmallVectorImpl.2", %"class.llvm::SmallVectorImpl.2"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %245 = load i8*, i8** %244, align 8
  %246 = and i64 %133, 4294967295
  %247 = getelementptr inbounds i8, i8* %245, i64 %246
  %248 = load i8*, i8** %128, align 8
  %249 = icmp eq i8* %247, %248
  br i1 %249, label %261, label %250

250:                                              ; preds = %243
  %251 = getelementptr inbounds i8, i8* %248, i64 -1
  %252 = icmp ugt i8* %251, %247
  br i1 %252, label %253, label %261

253:                                              ; preds = %250, %253
  %254 = phi i8* [ %259, %253 ], [ %251, %250 ]
  %255 = phi i8* [ %258, %253 ], [ %247, %250 ]
  %256 = load i8, i8* %255, align 1
  %257 = load i8, i8* %254, align 1
  store i8 %257, i8* %255, align 1
  store i8 %256, i8* %254, align 1
  %258 = getelementptr inbounds i8, i8* %255, i64 1
  %259 = getelementptr inbounds i8, i8* %254, i64 -1
  %260 = icmp ult i8* %258, %259
  br i1 %260, label %253, label %261

261:                                              ; preds = %253, %243, %250
  %262 = load i32, i32* %90, align 8
  %263 = icmp ugt i32 %262, 64
  br i1 %263, label %264, label %270

264:                                              ; preds = %261
  %265 = bitcast %union.anon* %97 to i64**
  %266 = load i64*, i64** %265, align 8
  %267 = icmp eq i64* %266, null
  br i1 %267, label %270, label %268

268:                                              ; preds = %264
  %269 = bitcast i64* %266 to i8*
  call void @_ZdaPv(i8* %269) #18
  br label %270

270:                                              ; preds = %261, %264, %268
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %88) #17
  br label %271

271:                                              ; preds = %270, %85, %48
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm23SmallVectorTemplateBaseIcLb1EE9push_backERKc(%"class.llvm::SmallVectorTemplateBase.3"*, i8* dereferenceable(1)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase.3", %"class.llvm::SmallVectorTemplateBase.3"* %0, i64 0, i32 0, i32 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase.3", %"class.llvm::SmallVectorTemplateBase.3"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i8*, i8** %5, align 8
  %7 = icmp ult i8* %4, %6
  br i1 %7, label %12, label %8, !prof !243

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase.3", %"class.llvm::SmallVectorTemplateBase.3"* %0, i64 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase.3", %"class.llvm::SmallVectorTemplateBase.3"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i64 0
  tail call void @_ZN4llvm15SmallVectorBase8grow_podEPvmm(%"class.llvm::SmallVectorBase"* %9, i8* %10, i64 0, i64 1) #20
  %11 = load i8*, i8** %3, align 8
  br label %12

12:                                               ; preds = %2, %8
  %13 = phi i8* [ %4, %2 ], [ %11, %8 ]
  %14 = load i8, i8* %1, align 1
  store i8 %14, i8* %13, align 1
  %15 = load i8*, i8** %3, align 8
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %16, i8** %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm15SmallVectorImplIcE6appendIPcEEvT_S4_(%"class.llvm::SmallVectorImpl.2"*, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint i8* %2 to i64
  %5 = ptrtoint i8* %1 to i64
  %6 = sub i64 %4, %5
  %7 = getelementptr inbounds %"class.llvm::SmallVectorImpl.2", %"class.llvm::SmallVectorImpl.2"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %8 = bitcast i8** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.llvm::SmallVectorImpl.2", %"class.llvm::SmallVectorImpl.2"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %11 = bitcast i8** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %9, %12
  %14 = icmp ugt i64 %6, %13
  br i1 %14, label %15, label %22

15:                                               ; preds = %3
  %16 = bitcast %"class.llvm::SmallVectorImpl.2"* %0 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = add i64 %12, %6
  %19 = sub i64 %18, %17
  %20 = getelementptr inbounds %"class.llvm::SmallVectorImpl.2", %"class.llvm::SmallVectorImpl.2"* %0, i64 0, i32 0, i32 0, i32 0
  %21 = getelementptr inbounds %"class.llvm::SmallVectorImpl.2", %"class.llvm::SmallVectorImpl.2"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  tail call void @_ZN4llvm15SmallVectorBase8grow_podEPvmm(%"class.llvm::SmallVectorBase"* %20, i8* %21, i64 %19, i64 1) #20
  br label %22

22:                                               ; preds = %15, %3
  %23 = icmp eq i8* %1, %2
  br i1 %23, label %26, label %24

24:                                               ; preds = %22
  %25 = load i8*, i8** %10, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %1, i64 %6, i1 false) #17
  br label %26

26:                                               ; preds = %22, %24
  %27 = load i8*, i8** %10, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 %6
  store i8* %28, i8** %10, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt8toStringEjb(%"class.std::__1::basic_string"* noalias sret, %"class.llvm::APInt"* nocapture readonly, i32, i1 zeroext) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.llvm::SmallString", align 8
  %6 = bitcast %"class.llvm::SmallString"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #17
  %7 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 40, i1 false)
  %8 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  %9 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %8, i8** %9, align 8
  %10 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i8* %8, i8** %10, align 8
  %11 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %12 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %5, i64 1, i32 0
  %13 = bitcast i8** %11 to %"class.llvm::SmallVector.12"**
  store %"class.llvm::SmallVector.12"* %12, %"class.llvm::SmallVector.12"** %13, align 8
  %14 = bitcast %"class.llvm::SmallString"* %5 to %"class.llvm::SmallVectorImpl.2"*
  call void @_ZNK4llvm5APInt8toStringERNS_15SmallVectorImplIcEEjbb(%"class.llvm::APInt"* %1, %"class.llvm::SmallVectorImpl.2"* nonnull dereferenceable(32) %14, i32 %2, i1 zeroext %3, i1 zeroext false) #19
  %15 = load i8*, i8** %9, align 8
  %16 = bitcast i8** %10 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = ptrtoint i8* %15 to i64
  %19 = sub i64 %17, %18
  %20 = icmp eq i8* %15, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %4
  %22 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 24, i1 false) #17, !alias.scope !244
  br label %48

23:                                               ; preds = %4
  %24 = icmp ugt i64 %19, -17
  br i1 %24, label %25, label %27

25:                                               ; preds = %23
  %26 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %26) #21
  unreachable

27:                                               ; preds = %23
  %28 = icmp ult i64 %19, 23
  br i1 %28, label %37, label %29

29:                                               ; preds = %27
  %30 = add nuw i64 %19, 16
  %31 = and i64 %30, -16
  %32 = call i8* @_Znwm(i64 %31) #18
  %33 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %32, i8** %33, align 8
  %34 = or i64 %31, -9223372036854775808
  %35 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %34, i64* %35, align 8
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %19, i64* %36, align 8
  br label %43

37:                                               ; preds = %27
  %38 = trunc i64 %19 to i8
  %39 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %40 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %39, i64 0, i32 1, i32 0
  store i8 %38, i8* %40, align 1
  %41 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %42 = icmp eq i64 %19, 0
  br i1 %42, label %45, label %43

43:                                               ; preds = %37, %29
  %44 = phi i8* [ %32, %29 ], [ %41, %37 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %44, i8* nonnull align 1 %15, i64 %19, i1 false) #17
  br label %45

45:                                               ; preds = %37, %43
  %46 = phi i8* [ %41, %37 ], [ %44, %43 ]
  %47 = getelementptr inbounds i8, i8* %46, i64 %19
  store i8 0, i8* %47, align 1
  br label %48

48:                                               ; preds = %21, %45
  %49 = icmp eq i8* %15, %8
  br i1 %49, label %51, label %50

50:                                               ; preds = %48
  call void @free(i8* %15) #20
  br label %51

51:                                               ; preds = %48, %50
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #17
  ret void
}

; Function Attrs: noinline nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt4dumpEv(%"class.llvm::APInt"* nocapture readonly) local_unnamed_addr #11 align 2 {
  %2 = alloca %"class.llvm::SmallString", align 8
  %3 = alloca %"class.llvm::SmallString", align 8
  %4 = bitcast %"class.llvm::SmallString"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #17
  %5 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 40, i1 false)
  %6 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  %7 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %6, i8** %7, align 8
  %8 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i8* %6, i8** %8, align 8
  %9 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %10 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %2, i64 1, i32 0
  %11 = bitcast i8** %9 to %"class.llvm::SmallVector.12"**
  store %"class.llvm::SmallVector.12"* %10, %"class.llvm::SmallVector.12"** %11, align 8
  %12 = bitcast %"class.llvm::SmallString"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %12) #17
  %13 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 40, i1 false)
  %14 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  %15 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %14, i8** %15, align 8
  %16 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i8* %14, i8** %16, align 8
  %17 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %18 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %3, i64 1, i32 0
  %19 = bitcast i8** %17 to %"class.llvm::SmallVector.12"**
  store %"class.llvm::SmallVector.12"* %18, %"class.llvm::SmallVector.12"** %19, align 8
  %20 = bitcast %"class.llvm::SmallString"* %3 to %"class.llvm::SmallVectorImpl.2"*
  call void @_ZNK4llvm5APInt8toStringERNS_15SmallVectorImplIcEEjbb(%"class.llvm::APInt"* %0, %"class.llvm::SmallVectorImpl.2"* nonnull dereferenceable(32) %20, i32 10, i1 zeroext false, i1 zeroext false) #20
  %21 = bitcast %"class.llvm::SmallString"* %2 to %"class.llvm::SmallVectorImpl.2"*
  call void @_ZNK4llvm5APInt8toStringERNS_15SmallVectorImplIcEEjbb(%"class.llvm::APInt"* %0, %"class.llvm::SmallVectorImpl.2"* nonnull dereferenceable(32) %21, i32 10, i1 zeroext true, i1 zeroext false) #20
  %22 = call dereferenceable(40) %"class.llvm::raw_ostream"* @_ZN4llvm4dbgsEv() #20
  %23 = call dereferenceable(40) %"class.llvm::raw_ostream"* @_ZN4llvm11raw_ostreamlsENS_9StringRefE(%"class.llvm::raw_ostream"* %22, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0), i64 6) #20
  %24 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %25 = load i32, i32* %24, align 8
  %26 = zext i32 %25 to i64
  %27 = call dereferenceable(40) %"class.llvm::raw_ostream"* @_ZN4llvm11raw_ostreamlsEm(%"class.llvm::raw_ostream"* %23, i64 %26) #20
  %28 = call dereferenceable(40) %"class.llvm::raw_ostream"* @_ZN4llvm11raw_ostreamlsENS_9StringRefE(%"class.llvm::raw_ostream"* %27, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i64 0, i64 0), i64 3) #20
  %29 = load i8*, i8** %15, align 8
  %30 = bitcast i8** %16 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = ptrtoint i8* %29 to i64
  %33 = sub i64 %31, %32
  %34 = call dereferenceable(40) %"class.llvm::raw_ostream"* @_ZN4llvm11raw_ostream5writeEPKcm(%"class.llvm::raw_ostream"* %28, i8* %29, i64 %33) #20
  %35 = call dereferenceable(40) %"class.llvm::raw_ostream"* @_ZN4llvm11raw_ostreamlsENS_9StringRefE(%"class.llvm::raw_ostream"* %34, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i64 0, i64 0), i64 2) #20
  %36 = load i8*, i8** %7, align 8
  %37 = bitcast i8** %8 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = ptrtoint i8* %36 to i64
  %40 = sub i64 %38, %39
  %41 = call dereferenceable(40) %"class.llvm::raw_ostream"* @_ZN4llvm11raw_ostream5writeEPKcm(%"class.llvm::raw_ostream"* %35, i8* %36, i64 %40) #20
  %42 = call dereferenceable(40) %"class.llvm::raw_ostream"* @_ZN4llvm11raw_ostreamlsENS_9StringRefE(%"class.llvm::raw_ostream"* %41, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0), i64 2) #20
  %43 = load i8*, i8** %15, align 8
  %44 = icmp eq i8* %43, %14
  br i1 %44, label %46, label %45

45:                                               ; preds = %1
  call void @free(i8* %43) #20
  br label %46

46:                                               ; preds = %1, %45
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %12) #17
  %47 = load i8*, i8** %7, align 8
  %48 = icmp eq i8* %47, %6
  br i1 %48, label %50, label %49

49:                                               ; preds = %46
  call void @free(i8* %47) #20
  br label %50

50:                                               ; preds = %46, %49
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #17
  ret void
}

; Function Attrs: optsize
declare dereferenceable(40) %"class.llvm::raw_ostream"* @_ZN4llvm4dbgsEv() local_unnamed_addr #3

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm5APInt5printERNS_11raw_ostreamEb(%"class.llvm::APInt"* nocapture readonly, %"class.llvm::raw_ostream"* dereferenceable(40), i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.llvm::SmallString", align 8
  %5 = bitcast %"class.llvm::SmallString"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %5) #17
  %6 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 40, i1 false)
  %7 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  %8 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %7, i8** %8, align 8
  %9 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i8* %7, i8** %9, align 8
  %10 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %11 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %4, i64 1, i32 0
  %12 = bitcast i8** %10 to %"class.llvm::SmallVector.12"**
  store %"class.llvm::SmallVector.12"* %11, %"class.llvm::SmallVector.12"** %12, align 8
  %13 = bitcast %"class.llvm::SmallString"* %4 to %"class.llvm::SmallVectorImpl.2"*
  call void @_ZNK4llvm5APInt8toStringERNS_15SmallVectorImplIcEEjbb(%"class.llvm::APInt"* %0, %"class.llvm::SmallVectorImpl.2"* nonnull dereferenceable(32) %13, i32 10, i1 zeroext %2, i1 zeroext false) #19
  %14 = load i8*, i8** %8, align 8
  %15 = bitcast i8** %9 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = ptrtoint i8* %14 to i64
  %18 = sub i64 %16, %17
  %19 = call dereferenceable(40) %"class.llvm::raw_ostream"* @_ZN4llvm11raw_ostream5writeEPKcm(%"class.llvm::raw_ostream"* %1, i8* %14, i64 %18) #20
  %20 = load i8*, i8** %8, align 8
  %21 = icmp eq i8* %20, %7
  br i1 %21, label %23, label %22

22:                                               ; preds = %3
  call void @free(i8* %20) #20
  br label %23

23:                                               ; preds = %3, %22
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %5) #17
  ret void
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable writeonly
define hidden void @_ZN4llvm5APInt5tcSetEPmmj(i64* nocapture, i64, i32) local_unnamed_addr #12 align 2 {
  store i64 %1, i64* %0, align 8
  %4 = icmp ugt i32 %2, 1
  br i1 %4, label %5, label %12

5:                                                ; preds = %3
  %6 = getelementptr i64, i64* %0, i64 1
  %7 = bitcast i64* %6 to i8*
  %8 = add i32 %2, -2
  %9 = zext i32 %8 to i64
  %10 = shl nuw nsw i64 %9, 3
  %11 = add nuw nsw i64 %10, 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 %11, i1 false)
  br label %12

12:                                               ; preds = %5, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden void @_ZN4llvm5APInt8tcAssignEPmPKmj(i64* nocapture, i64* nocapture readonly, i32) local_unnamed_addr #4 align 2 {
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %14, label %5

5:                                                ; preds = %3
  %6 = zext i32 %2 to i64
  br label %7

7:                                                ; preds = %7, %5
  %8 = phi i64 [ 0, %5 ], [ %12, %7 ]
  %9 = getelementptr inbounds i64, i64* %1, i64 %8
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds i64, i64* %0, i64 %8
  store i64 %10, i64* %11, align 8
  %12 = add nuw nsw i64 %8, 1
  %13 = icmp eq i64 %12, %6
  br i1 %13, label %14, label %7

14:                                               ; preds = %7, %3
  ret void
}

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden zeroext i1 @_ZN4llvm5APInt8tcIsZeroEPKmj(i64* nocapture readonly, i32) local_unnamed_addr #6 align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %14, label %4

4:                                                ; preds = %2
  %5 = zext i32 %1 to i64
  br label %8

6:                                                ; preds = %8
  %7 = icmp eq i64 %13, %5
  br i1 %7, label %14, label %8

8:                                                ; preds = %6, %4
  %9 = phi i64 [ 0, %4 ], [ %13, %6 ]
  %10 = getelementptr inbounds i64, i64* %0, i64 %9
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %11, 0
  %13 = add nuw nsw i64 %9, 1
  br i1 %12, label %6, label %14

14:                                               ; preds = %8, %6, %2
  %15 = phi i1 [ true, %2 ], [ true, %6 ], [ false, %8 ]
  ret i1 %15
}

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden i32 @_ZN4llvm5APInt12tcExtractBitEPKmj(i64* nocapture readonly, i32) local_unnamed_addr #6 align 2 {
  %3 = lshr i32 %1, 6
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds i64, i64* %0, i64 %4
  %6 = load i64, i64* %5, align 8
  %7 = and i32 %1, 63
  %8 = zext i32 %7 to i64
  %9 = shl i64 1, %8
  %10 = and i64 %6, %9
  %11 = icmp ne i64 %10, 0
  %12 = zext i1 %11 to i32
  ret i32 %12
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden void @_ZN4llvm5APInt8tcSetBitEPmj(i64* nocapture, i32) local_unnamed_addr #4 align 2 {
  %3 = and i32 %1, 63
  %4 = zext i32 %3 to i64
  %5 = shl i64 1, %4
  %6 = lshr i32 %1, 6
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds i64, i64* %0, i64 %7
  %9 = load i64, i64* %8, align 8
  %10 = or i64 %9, %5
  store i64 %10, i64* %8, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden void @_ZN4llvm5APInt10tcClearBitEPmj(i64* nocapture, i32) local_unnamed_addr #4 align 2 {
  %3 = and i32 %1, 63
  %4 = zext i32 %3 to i64
  %5 = shl i64 1, %4
  %6 = xor i64 %5, -1
  %7 = lshr i32 %1, 6
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds i64, i64* %0, i64 %8
  %10 = load i64, i64* %9, align 8
  %11 = and i64 %10, %6
  store i64 %11, i64* %9, align 8
  ret void
}

; Function Attrs: nounwind optsize readonly ssp uwtable
define hidden i32 @_ZN4llvm5APInt5tcLSBEPKmj(i64* nocapture readonly, i32) local_unnamed_addr #7 align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %20, label %4

4:                                                ; preds = %2
  %5 = zext i32 %1 to i64
  br label %6

6:                                                ; preds = %17, %4
  %7 = phi i64 [ 0, %4 ], [ %18, %17 ]
  %8 = getelementptr inbounds i64, i64* %0, i64 %7
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %17, label %11

11:                                               ; preds = %6
  %12 = trunc i64 %7 to i32
  %13 = tail call i64 @llvm.cttz.i64(i64 %9, i1 true) #17, !range !2
  %14 = trunc i64 %13 to i32
  %15 = shl i32 %12, 6
  %16 = or i32 %15, %14
  br label %20

17:                                               ; preds = %6
  %18 = add nuw nsw i64 %7, 1
  %19 = icmp eq i64 %18, %5
  br i1 %19, label %20, label %6

20:                                               ; preds = %17, %2, %11
  %21 = phi i32 [ %16, %11 ], [ -1, %2 ], [ -1, %17 ]
  ret i32 %21
}

; Function Attrs: nounwind optsize readonly ssp uwtable
define hidden i32 @_ZN4llvm5APInt5tcMSBEPKmj(i64* nocapture readonly, i32) local_unnamed_addr #7 align 2 {
  br label %3

3:                                                ; preds = %16, %2
  %4 = phi i32 [ %1, %2 ], [ %5, %16 ]
  %5 = add i32 %4, -1
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds i64, i64* %0, i64 %6
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %16, label %10

10:                                               ; preds = %3
  %11 = tail call i64 @llvm.ctlz.i64(i64 %8, i1 true) #17, !range !2
  %12 = trunc i64 %11 to i32
  %13 = shl i32 %5, 6
  %14 = or i32 %13, %12
  %15 = xor i32 %14, 63
  br label %18

16:                                               ; preds = %3
  %17 = icmp eq i32 %5, 0
  br i1 %17, label %18, label %3

18:                                               ; preds = %16, %10
  %19 = phi i32 [ %15, %10 ], [ -1, %16 ]
  ret i32 %19
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden void @_ZN4llvm5APInt9tcExtractEPmjPKmjj(i64* nocapture, i32, i64* nocapture readonly, i32, i32) local_unnamed_addr #4 align 2 {
  %6 = add i32 %3, 63
  %7 = lshr i32 %6, 6
  %8 = lshr i32 %4, 6
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds i64, i64* %2, i64 %9
  %11 = icmp eq i32 %7, 0
  br i1 %11, label %21, label %12

12:                                               ; preds = %5
  %13 = zext i32 %7 to i64
  br label %14

14:                                               ; preds = %14, %12
  %15 = phi i64 [ 0, %12 ], [ %19, %14 ]
  %16 = getelementptr inbounds i64, i64* %10, i64 %15
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds i64, i64* %0, i64 %15
  store i64 %17, i64* %18, align 8
  %19 = add nuw nsw i64 %15, 1
  %20 = icmp eq i64 %19, %13
  br i1 %20, label %21, label %14

21:                                               ; preds = %14, %5
  %22 = and i32 %4, 63
  tail call void @_ZN4llvm5APInt12tcShiftRightEPmjj(i64* %0, i32 %7, i32 %22) #19
  %23 = and i32 %6, -64
  %24 = sub i32 %23, %22
  %25 = icmp ult i32 %24, %3
  br i1 %25, label %26, label %44

26:                                               ; preds = %21
  %27 = sub i32 64, %3
  %28 = add i32 %27, %24
  %29 = zext i32 %28 to i64
  %30 = lshr i64 -1, %29
  %31 = add nuw nsw i32 %8, %7
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds i64, i64* %2, i64 %32
  %34 = load i64, i64* %33, align 8
  %35 = and i64 %34, %30
  %36 = and i32 %24, 63
  %37 = zext i32 %36 to i64
  %38 = shl i64 %35, %37
  %39 = add nsw i32 %7, -1
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds i64, i64* %0, i64 %40
  %42 = load i64, i64* %41, align 8
  %43 = or i64 %38, %42
  store i64 %43, i64* %41, align 8
  br label %58

44:                                               ; preds = %21
  %45 = icmp ugt i32 %24, %3
  br i1 %45, label %46, label %58

46:                                               ; preds = %44
  %47 = and i32 %3, 63
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %58, label %49

49:                                               ; preds = %46
  %50 = sub nuw nsw i32 64, %47
  %51 = zext i32 %50 to i64
  %52 = lshr i64 -1, %51
  %53 = add nsw i32 %7, -1
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds i64, i64* %0, i64 %54
  %56 = load i64, i64* %55, align 8
  %57 = and i64 %56, %52
  store i64 %57, i64* %55, align 8
  br label %58

58:                                               ; preds = %46, %44, %49, %26
  %59 = icmp ult i32 %7, %1
  br i1 %59, label %60, label %70

60:                                               ; preds = %58
  %61 = lshr i32 %6, 6
  %62 = zext i32 %61 to i64
  %63 = getelementptr i64, i64* %0, i64 %62
  %64 = bitcast i64* %63 to i8*
  %65 = xor i32 %7, -1
  %66 = add i32 %65, %1
  %67 = zext i32 %66 to i64
  %68 = shl nuw nsw i64 %67, 3
  %69 = add nuw nsw i64 %68, 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %64, i8 0, i64 %69, i1 false)
  br label %70

70:                                               ; preds = %60, %58
  ret void
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden void @_ZN4llvm5APInt12tcShiftRightEPmjj(i64* nocapture, i32, i32) local_unnamed_addr #4 align 2 {
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %39, label %5

5:                                                ; preds = %3
  %6 = lshr i32 %2, 6
  %7 = and i32 %2, 63
  %8 = icmp eq i32 %1, 0
  br i1 %8, label %39, label %9

9:                                                ; preds = %5
  %10 = icmp eq i32 %7, 0
  %11 = zext i32 %7 to i64
  %12 = sub nuw nsw i32 64, %7
  %13 = zext i32 %12 to i64
  %14 = zext i32 %1 to i64
  br label %15

15:                                               ; preds = %34, %9
  %16 = phi i64 [ 0, %9 ], [ %37, %34 ]
  %17 = trunc i64 %16 to i32
  %18 = add i32 %6, %17
  %19 = icmp ult i32 %18, %1
  br i1 %19, label %20, label %34

20:                                               ; preds = %15
  %21 = zext i32 %18 to i64
  %22 = getelementptr inbounds i64, i64* %0, i64 %21
  %23 = load i64, i64* %22, align 8
  br i1 %10, label %34, label %24

24:                                               ; preds = %20
  %25 = lshr i64 %23, %11
  %26 = add nuw i32 %18, 1
  %27 = icmp ult i32 %26, %1
  br i1 %27, label %28, label %34

28:                                               ; preds = %24
  %29 = zext i32 %26 to i64
  %30 = getelementptr inbounds i64, i64* %0, i64 %29
  %31 = load i64, i64* %30, align 8
  %32 = shl i64 %31, %13
  %33 = or i64 %32, %25
  br label %34

34:                                               ; preds = %15, %20, %28, %24
  %35 = phi i64 [ %33, %28 ], [ %25, %24 ], [ %23, %20 ], [ 0, %15 ]
  %36 = getelementptr inbounds i64, i64* %0, i64 %16
  store i64 %35, i64* %36, align 8
  %37 = add nuw nsw i64 %16, 1
  %38 = icmp eq i64 %37, %14
  br i1 %38, label %39, label %15

39:                                               ; preds = %34, %5, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden i64 @_ZN4llvm5APInt5tcAddEPmPKmmj(i64* nocapture, i64* nocapture readonly, i64, i32) local_unnamed_addr #4 align 2 {
  %5 = icmp eq i32 %3, 0
  br i1 %5, label %27, label %6

6:                                                ; preds = %4
  %7 = zext i32 %3 to i64
  br label %8

8:                                                ; preds = %22, %6
  %9 = phi i64 [ 0, %6 ], [ %25, %22 ]
  %10 = phi i64 [ %2, %6 ], [ %24, %22 ]
  %11 = getelementptr inbounds i64, i64* %0, i64 %9
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %10, 0
  %14 = getelementptr inbounds i64, i64* %1, i64 %9
  %15 = load i64, i64* %14, align 8
  %16 = add i64 %15, %12
  br i1 %13, label %20, label %17

17:                                               ; preds = %8
  %18 = add i64 %16, 1
  store i64 %18, i64* %11, align 8
  %19 = icmp ule i64 %18, %12
  br label %22

20:                                               ; preds = %8
  store i64 %16, i64* %11, align 8
  %21 = icmp ult i64 %16, %12
  br label %22

22:                                               ; preds = %20, %17
  %23 = phi i1 [ %19, %17 ], [ %21, %20 ]
  %24 = zext i1 %23 to i64
  %25 = add nuw nsw i64 %9, 1
  %26 = icmp eq i64 %25, %7
  br i1 %26, label %27, label %8

27:                                               ; preds = %22, %4
  %28 = phi i64 [ %2, %4 ], [ %24, %22 ]
  ret i64 %28
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden i64 @_ZN4llvm5APInt10tcSubtractEPmPKmmj(i64* nocapture, i64* nocapture readonly, i64, i32) local_unnamed_addr #4 align 2 {
  %5 = icmp eq i32 %3, 0
  br i1 %5, label %28, label %6

6:                                                ; preds = %4
  %7 = zext i32 %3 to i64
  br label %8

8:                                                ; preds = %23, %6
  %9 = phi i64 [ 0, %6 ], [ %26, %23 ]
  %10 = phi i64 [ %2, %6 ], [ %25, %23 ]
  %11 = getelementptr inbounds i64, i64* %0, i64 %9
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %10, 0
  %14 = getelementptr inbounds i64, i64* %1, i64 %9
  %15 = load i64, i64* %14, align 8
  br i1 %13, label %20, label %16

16:                                               ; preds = %8
  %17 = xor i64 %15, -1
  %18 = add i64 %12, %17
  store i64 %18, i64* %11, align 8
  %19 = icmp uge i64 %18, %12
  br label %23

20:                                               ; preds = %8
  %21 = sub i64 %12, %15
  store i64 %21, i64* %11, align 8
  %22 = icmp ult i64 %12, %15
  br label %23

23:                                               ; preds = %20, %16
  %24 = phi i1 [ %19, %16 ], [ %22, %20 ]
  %25 = zext i1 %24 to i64
  %26 = add nuw nsw i64 %9, 1
  %27 = icmp eq i64 %26, %7
  br i1 %27, label %28, label %8

28:                                               ; preds = %23, %4
  %29 = phi i64 [ %2, %4 ], [ %25, %23 ]
  ret i64 %29
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden void @_ZN4llvm5APInt8tcNegateEPmj(i64* nocapture, i32) local_unnamed_addr #4 align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %22, label %4

4:                                                ; preds = %2
  %5 = zext i32 %1 to i64
  br label %6

6:                                                ; preds = %6, %4
  %7 = phi i64 [ 0, %4 ], [ %11, %6 ]
  %8 = getelementptr inbounds i64, i64* %0, i64 %7
  %9 = load i64, i64* %8, align 8
  %10 = xor i64 %9, -1
  store i64 %10, i64* %8, align 8
  %11 = add nuw nsw i64 %7, 1
  %12 = icmp eq i64 %11, %5
  br i1 %12, label %13, label %6

13:                                               ; preds = %6, %19
  %14 = phi i64 [ %20, %19 ], [ 0, %6 ]
  %15 = getelementptr inbounds i64, i64* %0, i64 %14
  %16 = load i64, i64* %15, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %15, align 8
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %19, label %22

19:                                               ; preds = %13
  %20 = add nuw nsw i64 %14, 1
  %21 = icmp eq i64 %20, %5
  br i1 %21, label %22, label %13

22:                                               ; preds = %13, %19, %2
  ret void
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden void @_ZN4llvm5APInt12tcComplementEPmj(i64* nocapture, i32) local_unnamed_addr #4 align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %13, label %4

4:                                                ; preds = %2
  %5 = zext i32 %1 to i64
  br label %6

6:                                                ; preds = %6, %4
  %7 = phi i64 [ 0, %4 ], [ %11, %6 ]
  %8 = getelementptr inbounds i64, i64* %0, i64 %7
  %9 = load i64, i64* %8, align 8
  %10 = xor i64 %9, -1
  store i64 %10, i64* %8, align 8
  %11 = add nuw nsw i64 %7, 1
  %12 = icmp eq i64 %11, %5
  br i1 %12, label %13, label %6

13:                                               ; preds = %6, %2
  ret void
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden i64 @_ZN4llvm5APInt11tcIncrementEPmj(i64* nocapture, i32) local_unnamed_addr #4 align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %19, label %4

4:                                                ; preds = %2
  %5 = zext i32 %1 to i64
  br label %6

6:                                                ; preds = %13, %4
  %7 = phi i64 [ 0, %4 ], [ %14, %13 ]
  %8 = phi i32 [ 0, %4 ], [ %15, %13 ]
  %9 = getelementptr inbounds i64, i64* %0, i64 %7
  %10 = load i64, i64* %9, align 8
  %11 = add i64 %10, 1
  store i64 %11, i64* %9, align 8
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %13, label %17

13:                                               ; preds = %6
  %14 = add nuw nsw i64 %7, 1
  %15 = add nuw i32 %8, 1
  %16 = icmp eq i64 %14, %5
  br i1 %16, label %19, label %6

17:                                               ; preds = %6
  %18 = trunc i64 %7 to i32
  br label %19

19:                                               ; preds = %13, %17, %2
  %20 = phi i32 [ 0, %2 ], [ %18, %17 ], [ %15, %13 ]
  %21 = icmp eq i32 %20, %1
  %22 = zext i1 %21 to i64
  ret i64 %22
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden i32 @_ZN4llvm5APInt14tcMultiplyPartEPmPKmmmjjb(i64* nocapture, i64* nocapture readonly, i64, i64, i32, i32, i1 zeroext) local_unnamed_addr #4 align 2 {
  %8 = icmp ult i32 %5, %4
  %9 = select i1 %8, i32 %5, i32 %4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %66, label %11

11:                                               ; preds = %7
  %12 = icmp eq i64 %2, 0
  %13 = and i64 %2, 4294967295
  %14 = lshr i64 %2, 32
  %15 = zext i32 %9 to i64
  br label %16

16:                                               ; preds = %11, %59
  %17 = phi i64 [ 0, %11 ], [ %62, %59 ]
  %18 = phi i64 [ %3, %11 ], [ %61, %59 ]
  %19 = getelementptr inbounds i64, i64* %1, i64 %17
  %20 = load i64, i64* %19, align 8
  %21 = icmp eq i64 %20, 0
  %22 = or i1 %12, %21
  br i1 %22, label %48, label %23

23:                                               ; preds = %16
  %24 = and i64 %20, 4294967295
  %25 = mul nuw i64 %24, %13
  %26 = lshr i64 %20, 32
  %27 = mul nuw i64 %26, %14
  %28 = mul nuw i64 %24, %14
  %29 = lshr i64 %28, 32
  %30 = add nuw i64 %29, %27
  %31 = shl i64 %28, 32
  %32 = add i64 %31, %25
  %33 = icmp ult i64 %32, %25
  %34 = zext i1 %33 to i64
  %35 = mul nuw i64 %26, %13
  %36 = lshr i64 %35, 32
  %37 = shl i64 %35, 32
  %38 = add i64 %32, %37
  %39 = icmp ult i64 %38, %32
  %40 = zext i1 %39 to i64
  %41 = add i64 %38, %18
  %42 = icmp ult i64 %41, %38
  %43 = zext i1 %42 to i64
  %44 = add i64 %30, %36
  %45 = add i64 %44, %34
  %46 = add i64 %45, %40
  %47 = add i64 %46, %43
  br label %48

48:                                               ; preds = %16, %23
  %49 = phi i64 [ %41, %23 ], [ %18, %16 ]
  %50 = phi i64 [ %47, %23 ], [ 0, %16 ]
  %51 = getelementptr inbounds i64, i64* %0, i64 %17
  br i1 %6, label %52, label %59

52:                                               ; preds = %48
  %53 = load i64, i64* %51, align 8
  %54 = xor i64 %49, -1
  %55 = icmp ugt i64 %53, %54
  %56 = zext i1 %55 to i64
  %57 = add i64 %50, %56
  %58 = add i64 %53, %49
  br label %59

59:                                               ; preds = %48, %52
  %60 = phi i64 [ %58, %52 ], [ %49, %48 ]
  %61 = phi i64 [ %57, %52 ], [ %50, %48 ]
  store i64 %60, i64* %51, align 8
  %62 = add nuw nsw i64 %17, 1
  %63 = icmp ult i64 %62, %15
  br i1 %63, label %16, label %64

64:                                               ; preds = %59
  %65 = trunc i64 %62 to i32
  br label %66

66:                                               ; preds = %64, %7
  %67 = phi i64 [ %3, %7 ], [ %61, %64 ]
  %68 = phi i32 [ 0, %7 ], [ %65, %64 ]
  %69 = icmp ult i32 %68, %5
  br i1 %69, label %70, label %73

70:                                               ; preds = %66
  %71 = zext i32 %68 to i64
  %72 = getelementptr inbounds i64, i64* %0, i64 %71
  store i64 %67, i64* %72, align 8
  br label %90

73:                                               ; preds = %66
  %74 = icmp eq i64 %67, 0
  br i1 %74, label %75, label %90

75:                                               ; preds = %73
  %76 = icmp ne i64 %2, 0
  %77 = icmp ult i32 %68, %4
  %78 = and i1 %76, %77
  br i1 %78, label %79, label %90

79:                                               ; preds = %75
  %80 = zext i32 %68 to i64
  br label %84

81:                                               ; preds = %84
  %82 = trunc i64 %89 to i32
  %83 = icmp eq i32 %82, %4
  br i1 %83, label %90, label %84

84:                                               ; preds = %81, %79
  %85 = phi i64 [ %80, %79 ], [ %89, %81 ]
  %86 = getelementptr inbounds i64, i64* %1, i64 %85
  %87 = load i64, i64* %86, align 8
  %88 = icmp eq i64 %87, 0
  %89 = add nuw nsw i64 %85, 1
  br i1 %88, label %81, label %90

90:                                               ; preds = %84, %81, %75, %73, %70
  %91 = phi i32 [ 0, %70 ], [ 1, %73 ], [ 0, %75 ], [ 1, %84 ], [ 0, %81 ]
  ret i32 %91
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN4llvm5APInt10tcMultiplyEPmPKmS3_j(i64* nocapture, i64* nocapture readonly, i64* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  store i64 0, i64* %0, align 8
  %5 = icmp ugt i32 %3, 1
  br i1 %5, label %6, label %13

6:                                                ; preds = %4
  %7 = getelementptr i64, i64* %0, i64 1
  %8 = bitcast i64* %7 to i8*
  %9 = add i32 %3, -2
  %10 = zext i32 %9 to i64
  %11 = shl nuw nsw i64 %10, 3
  %12 = add nuw nsw i64 %11, 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 %12, i1 false) #17
  br label %15

13:                                               ; preds = %4
  %14 = icmp eq i32 %3, 0
  br i1 %14, label %29, label %15

15:                                               ; preds = %6, %13
  %16 = zext i32 %3 to i64
  br label %17

17:                                               ; preds = %17, %15
  %18 = phi i64 [ 0, %15 ], [ %27, %17 ]
  %19 = phi i32 [ 0, %15 ], [ %26, %17 ]
  %20 = getelementptr inbounds i64, i64* %0, i64 %18
  %21 = getelementptr inbounds i64, i64* %2, i64 %18
  %22 = load i64, i64* %21, align 8
  %23 = trunc i64 %18 to i32
  %24 = sub i32 %3, %23
  %25 = tail call i32 @_ZN4llvm5APInt14tcMultiplyPartEPmPKmmmjjb(i64* %20, i64* %1, i64 %22, i64 0, i32 %3, i32 %24, i1 zeroext true) #19
  %26 = or i32 %25, %19
  %27 = add nuw nsw i64 %18, 1
  %28 = icmp eq i64 %27, %16
  br i1 %28, label %29, label %17

29:                                               ; preds = %17, %13
  %30 = phi i32 [ 0, %13 ], [ %26, %17 ]
  ret i32 %30
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN4llvm5APInt14tcFullMultiplyEPmPKmS3_jj(i64* nocapture, i64* nocapture readonly, i64* nocapture readonly, i32, i32) local_unnamed_addr #0 align 2 {
  br label %6

6:                                                ; preds = %6, %5
  %7 = phi i64* [ %1, %5 ], [ %8, %6 ]
  %8 = phi i64* [ %2, %5 ], [ %7, %6 ]
  %9 = phi i32 [ %3, %5 ], [ %10, %6 ]
  %10 = phi i32 [ %4, %5 ], [ %9, %6 ]
  %11 = icmp ugt i32 %9, %10
  br i1 %11, label %6, label %12

12:                                               ; preds = %6
  store i64 0, i64* %0, align 8
  %13 = icmp ugt i32 %10, 1
  br i1 %13, label %14, label %21

14:                                               ; preds = %12
  %15 = getelementptr i64, i64* %0, i64 1
  %16 = bitcast i64* %15 to i8*
  %17 = add i32 %10, -2
  %18 = zext i32 %17 to i64
  %19 = shl nuw nsw i64 %18, 3
  %20 = add nuw nsw i64 %19, 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 %20, i1 false) #17
  br label %21

21:                                               ; preds = %12, %14
  %22 = icmp eq i32 %9, 0
  br i1 %22, label %34, label %23

23:                                               ; preds = %21
  %24 = add i32 %10, 1
  %25 = zext i32 %9 to i64
  br label %26

26:                                               ; preds = %26, %23
  %27 = phi i64 [ 0, %23 ], [ %32, %26 ]
  %28 = getelementptr inbounds i64, i64* %0, i64 %27
  %29 = getelementptr inbounds i64, i64* %7, i64 %27
  %30 = load i64, i64* %29, align 8
  %31 = tail call i32 @_ZN4llvm5APInt14tcMultiplyPartEPmPKmmmjjb(i64* %28, i64* %8, i64 %30, i64 0, i32 %10, i32 %24, i1 zeroext true) #19
  %32 = add nuw nsw i64 %27, 1
  %33 = icmp eq i64 %32, %25
  br i1 %33, label %34, label %26

34:                                               ; preds = %26, %21
  %35 = add i32 %10, %9
  %36 = add i32 %35, -1
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds i64, i64* %0, i64 %37
  %39 = load i64, i64* %38, align 8
  %40 = icmp eq i64 %39, 0
  %41 = zext i1 %40 to i32
  %42 = sub i32 %35, %41
  ret i32 %42
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN4llvm5APInt8tcDivideEPmPKmS1_S1_j(i64* nocapture, i64* nocapture readonly, i64* nocapture, i64* nocapture, i32) local_unnamed_addr #0 align 2 {
  br label %6

6:                                                ; preds = %13, %5
  %7 = phi i32 [ %4, %5 ], [ %8, %13 ]
  %8 = add i32 %7, -1
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds i64, i64* %1, i64 %9
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %13, label %15

13:                                               ; preds = %6
  %14 = icmp eq i32 %8, 0
  br i1 %14, label %135, label %6

15:                                               ; preds = %6
  %16 = tail call i64 @llvm.ctlz.i64(i64 %11, i1 true) #17, !range !2
  %17 = trunc i64 %16 to i32
  %18 = shl i32 %8, 6
  %19 = or i32 %18, %17
  %20 = xor i32 %19, 63
  %21 = add i32 %20, 1
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %135, label %23

23:                                               ; preds = %15
  %24 = shl i32 %4, 6
  %25 = sub i32 %24, %21
  %26 = lshr i32 %25, 6
  %27 = and i32 %25, 63
  %28 = zext i32 %27 to i64
  %29 = shl i64 1, %28
  %30 = icmp eq i32 %4, 0
  br i1 %30, label %48, label %31

31:                                               ; preds = %23
  %32 = zext i32 %4 to i64
  br label %33

33:                                               ; preds = %33, %31
  %34 = phi i64 [ 0, %31 ], [ %38, %33 ]
  %35 = getelementptr inbounds i64, i64* %1, i64 %34
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds i64, i64* %3, i64 %34
  store i64 %36, i64* %37, align 8
  %38 = add nuw nsw i64 %34, 1
  %39 = icmp eq i64 %38, %32
  br i1 %39, label %40, label %33

40:                                               ; preds = %33
  tail call void @_ZN4llvm5APInt11tcShiftLeftEPmjj(i64* %3, i32 %4, i32 %25) #19
  br label %41

41:                                               ; preds = %41, %40
  %42 = phi i64 [ 0, %40 ], [ %46, %41 ]
  %43 = getelementptr inbounds i64, i64* %0, i64 %42
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds i64, i64* %2, i64 %42
  store i64 %44, i64* %45, align 8
  %46 = add nuw nsw i64 %42, 1
  %47 = icmp eq i64 %46, %32
  br i1 %47, label %49, label %41

48:                                               ; preds = %23
  tail call void @_ZN4llvm5APInt11tcShiftLeftEPmjj(i64* %3, i32 0, i32 %25) #19
  store i64 0, i64* %0, align 8
  br label %58

49:                                               ; preds = %41
  store i64 0, i64* %0, align 8
  %50 = icmp ugt i32 %4, 1
  br i1 %50, label %51, label %58

51:                                               ; preds = %49
  %52 = getelementptr i64, i64* %0, i64 1
  %53 = bitcast i64* %52 to i8*
  %54 = add i32 %4, -2
  %55 = zext i32 %54 to i64
  %56 = shl nuw nsw i64 %55, 3
  %57 = add nuw nsw i64 %56, 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %53, i8 0, i64 %57, i1 false) #17
  br label %58

58:                                               ; preds = %48, %49, %51
  %59 = phi i64 [ 0, %48 ], [ %32, %49 ], [ %32, %51 ]
  br label %60

60:                                               ; preds = %129, %58
  %61 = phi i32 [ %26, %58 ], [ %133, %129 ]
  %62 = phi i32 [ %25, %58 ], [ %107, %129 ]
  %63 = phi i64 [ %29, %58 ], [ %134, %129 ]
  br label %64

64:                                               ; preds = %67, %60
  %65 = phi i64 [ %75, %67 ], [ %59, %60 ]
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %78, label %67

67:                                               ; preds = %64
  %68 = add nuw nsw i64 %65, 4294967295
  %69 = and i64 %68, 4294967295
  %70 = getelementptr inbounds i64, i64* %2, i64 %69
  %71 = load i64, i64* %70, align 8
  %72 = getelementptr inbounds i64, i64* %3, i64 %69
  %73 = load i64, i64* %72, align 8
  %74 = icmp eq i64 %71, %73
  %75 = add nsw i64 %65, -1
  br i1 %74, label %64, label %76

76:                                               ; preds = %67
  %77 = icmp ugt i64 %71, %73
  br i1 %77, label %78, label %104

78:                                               ; preds = %64, %76
  br i1 %30, label %99, label %79

79:                                               ; preds = %78, %94
  %80 = phi i64 [ %97, %94 ], [ 0, %78 ]
  %81 = phi i64 [ %96, %94 ], [ 0, %78 ]
  %82 = getelementptr inbounds i64, i64* %2, i64 %80
  %83 = load i64, i64* %82, align 8
  %84 = icmp eq i64 %81, 0
  %85 = getelementptr inbounds i64, i64* %3, i64 %80
  %86 = load i64, i64* %85, align 8
  br i1 %84, label %91, label %87

87:                                               ; preds = %79
  %88 = xor i64 %86, -1
  %89 = add i64 %83, %88
  store i64 %89, i64* %82, align 8
  %90 = icmp uge i64 %89, %83
  br label %94

91:                                               ; preds = %79
  %92 = sub i64 %83, %86
  store i64 %92, i64* %82, align 8
  %93 = icmp ult i64 %83, %86
  br label %94

94:                                               ; preds = %91, %87
  %95 = phi i1 [ %90, %87 ], [ %93, %91 ]
  %96 = zext i1 %95 to i64
  %97 = add nuw nsw i64 %80, 1
  %98 = icmp eq i64 %97, %59
  br i1 %98, label %99, label %79

99:                                               ; preds = %94, %78
  %100 = zext i32 %61 to i64
  %101 = getelementptr inbounds i64, i64* %0, i64 %100
  %102 = load i64, i64* %101, align 8
  %103 = or i64 %102, %63
  store i64 %103, i64* %101, align 8
  br label %104

104:                                              ; preds = %76, %99
  %105 = icmp eq i32 %62, 0
  br i1 %105, label %135, label %106

106:                                              ; preds = %104
  %107 = add i32 %62, -1
  br i1 %30, label %129, label %108

108:                                              ; preds = %106, %124
  %109 = phi i64 [ %127, %124 ], [ 0, %106 ]
  %110 = trunc i64 %109 to i32
  %111 = icmp ult i32 %110, %4
  br i1 %111, label %112, label %124

112:                                              ; preds = %108
  %113 = getelementptr inbounds i64, i64* %3, i64 %109
  %114 = load i64, i64* %113, align 8
  %115 = lshr i64 %114, 1
  %116 = add nuw i32 %110, 1
  %117 = icmp ult i32 %116, %4
  br i1 %117, label %118, label %124

118:                                              ; preds = %112
  %119 = zext i32 %116 to i64
  %120 = getelementptr inbounds i64, i64* %3, i64 %119
  %121 = load i64, i64* %120, align 8
  %122 = shl i64 %121, 63
  %123 = or i64 %122, %115
  br label %124

124:                                              ; preds = %118, %112, %108
  %125 = phi i64 [ %123, %118 ], [ %115, %112 ], [ 0, %108 ]
  %126 = getelementptr inbounds i64, i64* %3, i64 %109
  store i64 %125, i64* %126, align 8
  %127 = add nuw nsw i64 %109, 1
  %128 = icmp eq i64 %127, %59
  br i1 %128, label %129, label %108

129:                                              ; preds = %124, %106
  %130 = lshr i64 %63, 1
  %131 = icmp eq i64 %130, 0
  %132 = zext i1 %131 to i32
  %133 = sub i32 %61, %132
  %134 = select i1 %131, i64 -9223372036854775808, i64 %130
  br label %60

135:                                              ; preds = %13, %104, %15
  %136 = phi i32 [ 1, %15 ], [ 0, %104 ], [ 1, %13 ]
  ret i32 %136
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden void @_ZN4llvm5APInt11tcShiftLeftEPmjj(i64* nocapture, i32, i32) local_unnamed_addr #4 align 2 {
  %4 = bitcast i64* %0 to i8*
  %5 = icmp eq i32 %2, 0
  br i1 %5, label %46, label %6

6:                                                ; preds = %3
  %7 = lshr i32 %2, 6
  %8 = and i32 %2, 63
  %9 = icmp ult i32 %7, %1
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = icmp eq i32 %8, 0
  %12 = zext i32 %8 to i64
  %13 = sub nuw nsw i32 64, %8
  %14 = zext i32 %13 to i64
  %15 = zext i32 %1 to i64
  br label %22

16:                                               ; preds = %40, %6
  %17 = phi i32 [ %1, %6 ], [ %25, %40 ]
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %46, label %19

19:                                               ; preds = %16
  %20 = zext i32 %17 to i64
  %21 = shl nuw nsw i64 %20, 3
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 %21, i1 false)
  br label %46

22:                                               ; preds = %10, %40
  %23 = phi i64 [ %15, %10 ], [ %45, %40 ]
  %24 = trunc i64 %23 to i32
  %25 = add i32 %24, -1
  %26 = sub i32 %25, %7
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds i64, i64* %0, i64 %27
  %29 = load i64, i64* %28, align 8
  br i1 %11, label %40, label %30

30:                                               ; preds = %22
  %31 = shl i64 %29, %12
  %32 = icmp ugt i32 %25, %7
  br i1 %32, label %33, label %40

33:                                               ; preds = %30
  %34 = add i32 %26, -1
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i64, i64* %0, i64 %35
  %37 = load i64, i64* %36, align 8
  %38 = lshr i64 %37, %14
  %39 = or i64 %38, %31
  br label %40

40:                                               ; preds = %22, %30, %33
  %41 = phi i64 [ %39, %33 ], [ %31, %30 ], [ %29, %22 ]
  %42 = zext i32 %25 to i64
  %43 = getelementptr inbounds i64, i64* %0, i64 %42
  store i64 %41, i64* %43, align 8
  %44 = icmp ugt i32 %25, %7
  %45 = add nsw i64 %23, -1
  br i1 %44, label %22, label %16

46:                                               ; preds = %19, %16, %3
  ret void
}

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden i32 @_ZN4llvm5APInt9tcCompareEPKmS2_j(i64* nocapture readonly, i64* nocapture readonly, i32) local_unnamed_addr #6 align 2 {
  %4 = zext i32 %2 to i64
  br label %5

5:                                                ; preds = %8, %3
  %6 = phi i64 [ %16, %8 ], [ %4, %3 ]
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %20, label %8

8:                                                ; preds = %5
  %9 = add i64 %6, 4294967295
  %10 = and i64 %9, 4294967295
  %11 = getelementptr inbounds i64, i64* %0, i64 %10
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds i64, i64* %1, i64 %10
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %12, %14
  %16 = add nsw i64 %6, -1
  br i1 %15, label %5, label %17

17:                                               ; preds = %8
  %18 = icmp ugt i64 %12, %14
  %19 = select i1 %18, i32 1, i32 -1
  br label %20

20:                                               ; preds = %5, %17
  %21 = phi i32 [ %19, %17 ], [ 0, %5 ]
  ret i32 %21
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden void @_ZN4llvm5APInt5tcAndEPmPKmj(i64* nocapture, i64* nocapture readonly, i32) local_unnamed_addr #4 align 2 {
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %16, label %5

5:                                                ; preds = %3
  %6 = zext i32 %2 to i64
  br label %7

7:                                                ; preds = %7, %5
  %8 = phi i64 [ 0, %5 ], [ %14, %7 ]
  %9 = getelementptr inbounds i64, i64* %1, i64 %8
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds i64, i64* %0, i64 %8
  %12 = load i64, i64* %11, align 8
  %13 = and i64 %12, %10
  store i64 %13, i64* %11, align 8
  %14 = add nuw nsw i64 %8, 1
  %15 = icmp eq i64 %14, %6
  br i1 %15, label %16, label %7

16:                                               ; preds = %7, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden void @_ZN4llvm5APInt4tcOrEPmPKmj(i64* nocapture, i64* nocapture readonly, i32) local_unnamed_addr #4 align 2 {
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %16, label %5

5:                                                ; preds = %3
  %6 = zext i32 %2 to i64
  br label %7

7:                                                ; preds = %7, %5
  %8 = phi i64 [ 0, %5 ], [ %14, %7 ]
  %9 = getelementptr inbounds i64, i64* %1, i64 %8
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds i64, i64* %0, i64 %8
  %12 = load i64, i64* %11, align 8
  %13 = or i64 %12, %10
  store i64 %13, i64* %11, align 8
  %14 = add nuw nsw i64 %8, 1
  %15 = icmp eq i64 %14, %6
  br i1 %15, label %16, label %7

16:                                               ; preds = %7, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden void @_ZN4llvm5APInt5tcXorEPmPKmj(i64* nocapture, i64* nocapture readonly, i32) local_unnamed_addr #4 align 2 {
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %16, label %5

5:                                                ; preds = %3
  %6 = zext i32 %2 to i64
  br label %7

7:                                                ; preds = %7, %5
  %8 = phi i64 [ 0, %5 ], [ %14, %7 ]
  %9 = getelementptr inbounds i64, i64* %1, i64 %8
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds i64, i64* %0, i64 %8
  %12 = load i64, i64* %11, align 8
  %13 = xor i64 %12, %10
  store i64 %13, i64* %11, align 8
  %14 = add nuw nsw i64 %8, 1
  %15 = icmp eq i64 %14, %6
  br i1 %15, label %16, label %7

16:                                               ; preds = %7, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden i64 @_ZN4llvm5APInt11tcDecrementEPmj(i64* nocapture, i32) local_unnamed_addr #4 align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %15, label %4

4:                                                ; preds = %2
  %5 = zext i32 %1 to i64
  br label %8

6:                                                ; preds = %8
  %7 = icmp eq i64 %14, %5
  br i1 %7, label %15, label %8

8:                                                ; preds = %6, %4
  %9 = phi i64 [ 0, %4 ], [ %14, %6 ]
  %10 = getelementptr inbounds i64, i64* %0, i64 %9
  %11 = load i64, i64* %10, align 8
  %12 = add i64 %11, -1
  store i64 %12, i64* %10, align 8
  %13 = icmp eq i64 %11, 0
  %14 = add nuw nsw i64 %9, 1
  br i1 %13, label %6, label %15

15:                                               ; preds = %8, %6, %2
  %16 = phi i64 [ 1, %2 ], [ 1, %6 ], [ 0, %8 ]
  ret i64 %16
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable writeonly
define hidden void @_ZN4llvm5APInt25tcSetLeastSignificantBitsEPmjj(i64* nocapture, i32, i32) local_unnamed_addr #12 align 2 {
  %4 = icmp ugt i32 %2, 64
  br i1 %4, label %5, label %23

5:                                                ; preds = %3
  %6 = bitcast i64* %0 to i8*
  %7 = add i32 %2, -65
  %8 = lshr i32 %7, 6
  %9 = and i32 %7, -64
  %10 = add nuw nsw i32 %8, 1
  %11 = zext i32 %10 to i64
  %12 = lshr i32 %7, 6
  %13 = shl nuw nsw i32 %12, 3
  %14 = add nuw nsw i32 %13, 8
  %15 = zext i32 %14 to i64
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 -1, i64 %15, i1 false)
  br label %16

16:                                               ; preds = %16, %5
  %17 = phi i64 [ 0, %5 ], [ %18, %16 ]
  %18 = add nuw nsw i64 %17, 1
  %19 = icmp eq i64 %18, %11
  br i1 %19, label %20, label %16

20:                                               ; preds = %16
  %21 = add i32 %2, -64
  %22 = sub i32 %21, %9
  br label %23

23:                                               ; preds = %20, %3
  %24 = phi i32 [ %2, %3 ], [ %22, %20 ]
  %25 = phi i32 [ 0, %3 ], [ %10, %20 ]
  %26 = icmp eq i32 %24, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %23
  %28 = sub nuw nsw i32 64, %24
  %29 = zext i32 %28 to i64
  %30 = lshr i64 -1, %29
  %31 = add nsw i32 %25, 1
  %32 = zext i32 %25 to i64
  %33 = getelementptr inbounds i64, i64* %0, i64 %32
  store i64 %30, i64* %33, align 8
  br label %34

34:                                               ; preds = %23, %27
  %35 = phi i32 [ %31, %27 ], [ %25, %23 ]
  %36 = icmp ult i32 %35, %1
  br i1 %36, label %37, label %46

37:                                               ; preds = %34
  %38 = zext i32 %35 to i64
  %39 = getelementptr i64, i64* %0, i64 %38
  %40 = bitcast i64* %39 to i8*
  %41 = xor i32 %35, -1
  %42 = add i32 %41, %1
  %43 = zext i32 %42 to i64
  %44 = shl nuw nsw i64 %43, 3
  %45 = add nuw nsw i64 %44, 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 0, i64 %45, i1 false)
  br label %46

46:                                               ; preds = %37, %34
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #10

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.bswap.i64(i64) #10

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #10

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4llvm5APInt10isPowerOf2Ev(%"class.llvm::APInt"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp ult i32 %3, 65
  br i1 %4, label %5, label %10

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = tail call i64 @llvm.ctpop.i64(i64 %7) #17, !range !2
  %9 = icmp eq i64 %8, 1
  br label %32

10:                                               ; preds = %1
  %11 = zext i32 %3 to i64
  %12 = add nuw nsw i64 %11, 63
  %13 = and i64 %12, 8589934528
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %32, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  %17 = bitcast %union.anon* %16 to i64**
  %18 = load i64*, i64** %17, align 8
  %19 = lshr i64 %12, 6
  br label %20

20:                                               ; preds = %20, %15
  %21 = phi i64 [ 0, %15 ], [ %28, %20 ]
  %22 = phi i32 [ 0, %15 ], [ %27, %20 ]
  %23 = getelementptr inbounds i64, i64* %18, i64 %21
  %24 = load i64, i64* %23, align 8
  %25 = tail call i64 @llvm.ctpop.i64(i64 %24) #17, !range !2
  %26 = trunc i64 %25 to i32
  %27 = add i32 %22, %26
  %28 = add nuw nsw i64 %21, 1
  %29 = icmp ult i64 %28, %19
  br i1 %29, label %20, label %30

30:                                               ; preds = %20
  %31 = icmp eq i32 %27, 1
  br label %32

32:                                               ; preds = %10, %30, %5
  %33 = phi i1 [ %9, %5 ], [ false, %10 ], [ %31, %30 ]
  ret i1 %33
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4llvm5APInt3ultEm(%"class.llvm::APInt"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 65
  br i1 %5, label %6, label %13

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = tail call i64 @llvm.ctlz.i64(i64 %8, i1 false) #17, !range !2
  %10 = trunc i64 %9 to i32
  %11 = add nsw i32 %4, -64
  %12 = add i32 %11, %10
  br label %15

13:                                               ; preds = %2
  %14 = tail call i32 @_ZNK4llvm5APInt25countLeadingZerosSlowCaseEv(%"class.llvm::APInt"* %0) #20
  br label %15

15:                                               ; preds = %6, %13
  %16 = phi i32 [ %12, %6 ], [ %14, %13 ]
  %17 = sub i32 %4, %16
  %18 = icmp ugt i32 %17, 64
  br i1 %18, label %30, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.llvm::APInt", %"class.llvm::APInt"* %0, i64 0, i32 1
  br i1 %5, label %21, label %23

21:                                               ; preds = %19
  %22 = getelementptr inbounds %union.anon, %union.anon* %20, i64 0, i32 0
  br label %26

23:                                               ; preds = %19
  %24 = bitcast %union.anon* %20 to i64**
  %25 = load i64*, i64** %24, align 8
  br label %26

26:                                               ; preds = %21, %23
  %27 = phi i64* [ %22, %21 ], [ %25, %23 ]
  %28 = load i64, i64* %27, align 8
  %29 = icmp ult i64 %28, %1
  br label %30

30:                                               ; preds = %15, %26
  %31 = phi i1 [ %29, %26 ], [ false, %15 ]
  ret i1 %31
}

; Function Attrs: noreturn optsize
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #13

; Function Attrs: nobuiltin nofree optsize
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: nounwind optsize
declare void @free(i8* nocapture) local_unnamed_addr #14

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden dereferenceable(40) %"class.llvm::raw_ostream"* @_ZN4llvm11raw_ostreamlsENS_9StringRefE(%"class.llvm::raw_ostream"*, i8*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.llvm::raw_ostream", %"class.llvm::raw_ostream"* %0, i64 0, i32 2
  %5 = bitcast i8** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.llvm::raw_ostream", %"class.llvm::raw_ostream"* %0, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = ptrtoint i8* %8 to i64
  %10 = sub i64 %6, %9
  %11 = icmp ult i64 %10, %2
  br i1 %11, label %12, label %14

12:                                               ; preds = %3
  %13 = tail call dereferenceable(40) %"class.llvm::raw_ostream"* @_ZN4llvm11raw_ostream5writeEPKcm(%"class.llvm::raw_ostream"* %0, i8* %1, i64 %2) #20
  br label %19

14:                                               ; preds = %3
  %15 = icmp eq i64 %2, 0
  br i1 %15, label %19, label %16

16:                                               ; preds = %14
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %1, i64 %2, i1 false)
  %17 = load i8*, i8** %7, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 %2
  store i8* %18, i8** %7, align 8
  br label %19

19:                                               ; preds = %16, %14, %12
  %20 = phi %"class.llvm::raw_ostream"* [ %13, %12 ], [ %0, %14 ], [ %0, %16 ]
  ret %"class.llvm::raw_ostream"* %20
}

; Function Attrs: optsize
declare dereferenceable(40) %"class.llvm::raw_ostream"* @_ZN4llvm11raw_ostream5writeEPKcm(%"class.llvm::raw_ostream"*, i8*, i64) local_unnamed_addr #3

; Function Attrs: optsize
declare dereferenceable(40) %"class.llvm::raw_ostream"* @_ZN4llvm11raw_ostreamlsEm(%"class.llvm::raw_ostream"*, i64) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #10

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctpop.i64(i64) #10

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #15

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #15

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden i64 @_ZN4llvm7hashing6detail29hash_combine_recursive_helper7combineEmPcS3_(%"struct.llvm::hashing::detail::hash_combine_recursive_helper"*, i64, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = icmp eq i64 %1, 0
  %6 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_combine_recursive_helper", %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %0, i64 0, i32 0, i64 0
  br i1 %5, label %7, label %14

7:                                                ; preds = %4
  %8 = ptrtoint i8* %2 to i64
  %9 = ptrtoint %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %0 to i64
  %10 = sub i64 %8, %9
  %11 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_combine_recursive_helper", %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %0, i64 0, i32 2
  %12 = load i64, i64* %11, align 8
  %13 = tail call i64 @_ZN4llvm7hashing6detail10hash_shortEPKcmm(i8* %6, i64 %10, i64 %12) #19
  br label %53

14:                                               ; preds = %4
  %15 = icmp eq i8* %6, %2
  %16 = icmp eq i8* %2, %3
  %17 = or i1 %15, %16
  br i1 %17, label %46, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_combine_recursive_helper", %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %0, i64 0, i32 0, i64 1
  %20 = icmp eq i8* %19, %2
  br i1 %20, label %21, label %30

21:                                               ; preds = %18
  %22 = load i8, i8* %6, align 1
  %23 = ptrtoint i8* %3 to i64
  %24 = ptrtoint i8* %2 to i64
  %25 = sub i64 %23, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %28, label %27

27:                                               ; preds = %21
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %2, i64 %25, i1 false) #17
  br label %28

28:                                               ; preds = %27, %21
  %29 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_combine_recursive_helper", %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %0, i64 0, i32 0, i64 %25
  store i8 %22, i8* %29, align 1
  br label %46

30:                                               ; preds = %18
  %31 = getelementptr inbounds i8, i8* %2, i64 1
  %32 = icmp eq i8* %31, %3
  br i1 %32, label %33, label %44

33:                                               ; preds = %30
  %34 = getelementptr inbounds i8, i8* %3, i64 -1
  %35 = load i8, i8* %34, align 1
  %36 = ptrtoint i8* %34 to i64
  %37 = ptrtoint %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %0 to i64
  %38 = sub i64 %36, %37
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %43, label %40

40:                                               ; preds = %33
  %41 = sub i64 0, %38
  %42 = getelementptr inbounds i8, i8* %3, i64 %41
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %42, i8* align 1 %6, i64 %38, i1 false) #17
  br label %43

43:                                               ; preds = %40, %33
  store i8 %35, i8* %6, align 1
  br label %46

44:                                               ; preds = %30
  %45 = tail call i8* @_ZNSt3__112__rotate_gcdIPcEET_S2_S2_S2_(i8* %6, i8* %2, i8* %3) #20
  br label %46

46:                                               ; preds = %14, %28, %43, %44
  %47 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_combine_recursive_helper", %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %0, i64 0, i32 1
  tail call void @_ZN4llvm7hashing6detail10hash_state3mixEPKc(%"struct.llvm::hashing::detail::hash_state"* %47, i8* %6) #19
  %48 = ptrtoint i8* %2 to i64
  %49 = ptrtoint %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %0 to i64
  %50 = sub i64 %1, %49
  %51 = add i64 %50, %48
  %52 = tail call i64 @_ZN4llvm7hashing6detail10hash_state8finalizeEm(%"struct.llvm::hashing::detail::hash_state"* %47, i64 %51) #19
  br label %53

53:                                               ; preds = %46, %7
  %54 = phi i64 [ %13, %7 ], [ %52, %46 ]
  ret i64 %54
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm7hashing6detail10hash_state6createEPKcm(%"struct.llvm::hashing::detail::hash_state"* noalias sret, i8*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 0
  store i64 0, i64* %4, align 8
  %5 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 1
  store i64 %2, i64* %5, align 8
  %6 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 2
  %7 = xor i64 %2, -5435081209227447693
  %8 = mul i64 %7, -7070675565921424023
  %9 = lshr i64 %8, 47
  %10 = xor i64 %8, -5435081209227447693
  %11 = xor i64 %10, %9
  %12 = mul i64 %11, -7070675565921424023
  %13 = lshr i64 %12, 47
  %14 = xor i64 %13, %12
  %15 = mul i64 %14, -7070675565921424023
  store i64 %15, i64* %6, align 8
  %16 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 3
  %17 = lshr i64 %7, 49
  %18 = shl i64 %7, 15
  %19 = or i64 %18, %17
  store i64 %19, i64* %16, align 8
  %20 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 4
  %21 = mul i64 %2, -5435081209227447693
  store i64 %21, i64* %20, align 8
  %22 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 5
  %23 = lshr i64 %2, 47
  %24 = xor i64 %23, %2
  store i64 %24, i64* %22, align 8
  %25 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 6
  %26 = xor i64 %24, %21
  %27 = mul i64 %26, -7070675565921424023
  %28 = lshr i64 %27, 47
  %29 = xor i64 %27, %24
  %30 = xor i64 %29, %28
  %31 = mul i64 %30, -7070675565921424023
  %32 = lshr i64 %31, 47
  %33 = xor i64 %32, %31
  %34 = mul i64 %33, -7070675565921424023
  store i64 %34, i64* %25, align 8
  tail call void @_ZN4llvm7hashing6detail10hash_state3mixEPKc(%"struct.llvm::hashing::detail::hash_state"* %0, i8* %1) #19
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm7hashing6detail10hash_state3mixEPKc(%"struct.llvm::hashing::detail::hash_state"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, %4
  %8 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 3
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %7, %9
  %11 = getelementptr inbounds i8, i8* %1, i64 8
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = add i64 %10, %13
  %15 = lshr i64 %14, 37
  %16 = shl i64 %14, 27
  %17 = or i64 %16, %15
  %18 = mul i64 %17, -5435081209227447693
  store i64 %18, i64* %3, align 8
  %19 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 4
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %20, %6
  %22 = getelementptr inbounds i8, i8* %1, i64 48
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 1
  %25 = add i64 %21, %24
  %26 = lshr i64 %25, 42
  %27 = shl i64 %25, 22
  %28 = or i64 %27, %26
  %29 = mul i64 %28, -5435081209227447693
  store i64 %29, i64* %5, align 8
  %30 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 6
  %31 = load i64, i64* %30, align 8
  %32 = xor i64 %31, %18
  store i64 %32, i64* %3, align 8
  %33 = getelementptr inbounds i8, i8* %1, i64 40
  %34 = bitcast i8* %33 to i64*
  %35 = load i64, i64* %34, align 1
  %36 = add i64 %35, %9
  %37 = add i64 %36, %29
  store i64 %37, i64* %5, align 8
  %38 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 2
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 5
  %41 = load i64, i64* %40, align 8
  %42 = add i64 %41, %39
  %43 = lshr i64 %42, 33
  %44 = shl i64 %42, 31
  %45 = or i64 %44, %43
  %46 = mul i64 %45, -5435081209227447693
  store i64 %46, i64* %38, align 8
  %47 = mul i64 %20, -5435081209227447693
  store i64 %47, i64* %8, align 8
  %48 = add i64 %41, %32
  store i64 %48, i64* %19, align 8
  tail call void @_ZN4llvm7hashing6detail10hash_state12mix_32_bytesEPKcRmS5_(i8* %1, i64* dereferenceable(8) %8, i64* dereferenceable(8) %19) #19
  %49 = load i64, i64* %38, align 8
  %50 = load i64, i64* %30, align 8
  %51 = add i64 %50, %49
  store i64 %51, i64* %40, align 8
  %52 = load i64, i64* %5, align 8
  %53 = getelementptr inbounds i8, i8* %1, i64 16
  %54 = bitcast i8* %53 to i64*
  %55 = load i64, i64* %54, align 1
  %56 = add i64 %55, %52
  store i64 %56, i64* %30, align 8
  %57 = getelementptr inbounds i8, i8* %1, i64 32
  tail call void @_ZN4llvm7hashing6detail10hash_state12mix_32_bytesEPKcRmS5_(i8* %57, i64* dereferenceable(8) %40, i64* dereferenceable(8) %30) #19
  %58 = load i64, i64* %38, align 8
  %59 = load i64, i64* %3, align 8
  store i64 %59, i64* %38, align 8
  store i64 %58, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm7hashing6detail10hash_state12mix_32_bytesEPKcRmS5_(i8*, i64* dereferenceable(8), i64* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = bitcast i8* %0 to i64*
  %5 = load i64, i64* %4, align 1
  %6 = load i64, i64* %1, align 8
  %7 = add i64 %6, %5
  store i64 %7, i64* %1, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 24
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = load i64, i64* %2, align 8
  %12 = add i64 %10, %7
  %13 = add i64 %12, %11
  %14 = lshr i64 %13, 21
  %15 = shl i64 %13, 43
  %16 = or i64 %15, %14
  store i64 %16, i64* %2, align 8
  %17 = load i64, i64* %1, align 8
  %18 = getelementptr inbounds i8, i8* %0, i64 8
  %19 = bitcast i8* %18 to i64*
  %20 = load i64, i64* %19, align 1
  %21 = getelementptr inbounds i8, i8* %0, i64 16
  %22 = bitcast i8* %21 to i64*
  %23 = load i64, i64* %22, align 1
  %24 = add i64 %20, %17
  %25 = add i64 %24, %23
  store i64 %25, i64* %1, align 8
  %26 = lshr i64 %25, 44
  %27 = shl i64 %25, 20
  %28 = or i64 %27, %26
  %29 = load i64, i64* %2, align 8
  %30 = add i64 %29, %17
  %31 = add i64 %30, %28
  store i64 %31, i64* %2, align 8
  %32 = load i64, i64* %1, align 8
  %33 = add i64 %32, %10
  store i64 %33, i64* %1, align 8
  ret void
}

; Function Attrs: inlinehint nounwind optsize ssp uwtable
define linkonce_odr hidden i64 @_ZN4llvm7hashing6detail10hash_shortEPKcmm(i8*, i64, i64) local_unnamed_addr #16 comdat {
  %4 = add i64 %1, -4
  %5 = icmp ult i64 %4, 5
  br i1 %5, label %6, label %27

6:                                                ; preds = %3
  %7 = bitcast i8* %0 to i32*
  %8 = load i32, i32* %7, align 1
  %9 = zext i32 %8 to i64
  %10 = shl nuw nsw i64 %9, 3
  %11 = add nuw nsw i64 %10, %1
  %12 = getelementptr inbounds i8, i8* %0, i64 %1
  %13 = getelementptr inbounds i8, i8* %12, i64 -4
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %14, align 1
  %16 = zext i32 %15 to i64
  %17 = xor i64 %16, %2
  %18 = xor i64 %17, %11
  %19 = mul i64 %18, -7070675565921424023
  %20 = lshr i64 %19, 47
  %21 = xor i64 %19, %17
  %22 = xor i64 %21, %20
  %23 = mul i64 %22, -7070675565921424023
  %24 = lshr i64 %23, 47
  %25 = xor i64 %24, %23
  %26 = mul i64 %25, -7070675565921424023
  br label %208

27:                                               ; preds = %3
  %28 = add i64 %1, -9
  %29 = icmp ult i64 %28, 8
  br i1 %29, label %30, label %53

30:                                               ; preds = %27
  %31 = bitcast i8* %0 to i64*
  %32 = load i64, i64* %31, align 1
  %33 = getelementptr inbounds i8, i8* %0, i64 %1
  %34 = getelementptr inbounds i8, i8* %33, i64 -8
  %35 = bitcast i8* %34 to i64*
  %36 = load i64, i64* %35, align 1
  %37 = xor i64 %32, %2
  %38 = add i64 %36, %1
  %39 = lshr i64 %38, %1
  %40 = sub nuw nsw i64 64, %1
  %41 = shl i64 %38, %40
  %42 = or i64 %41, %39
  %43 = xor i64 %37, %42
  %44 = mul i64 %43, -7070675565921424023
  %45 = lshr i64 %44, 47
  %46 = xor i64 %44, %42
  %47 = xor i64 %46, %45
  %48 = mul i64 %47, -7070675565921424023
  %49 = lshr i64 %48, 47
  %50 = xor i64 %49, %48
  %51 = mul i64 %50, -7070675565921424023
  %52 = xor i64 %51, %36
  br label %208

53:                                               ; preds = %27
  %54 = add i64 %1, -17
  %55 = icmp ult i64 %54, 16
  br i1 %55, label %56, label %99

56:                                               ; preds = %53
  %57 = bitcast i8* %0 to i64*
  %58 = load i64, i64* %57, align 1
  %59 = mul i64 %58, -5435081209227447693
  %60 = getelementptr inbounds i8, i8* %0, i64 8
  %61 = bitcast i8* %60 to i64*
  %62 = load i64, i64* %61, align 1
  %63 = getelementptr inbounds i8, i8* %0, i64 %1
  %64 = getelementptr inbounds i8, i8* %63, i64 -8
  %65 = bitcast i8* %64 to i64*
  %66 = load i64, i64* %65, align 1
  %67 = mul i64 %66, -7286425919675154353
  %68 = getelementptr inbounds i8, i8* %63, i64 -16
  %69 = bitcast i8* %68 to i64*
  %70 = load i64, i64* %69, align 1
  %71 = mul i64 %70, -4348849565147123417
  %72 = sub i64 %59, %62
  %73 = lshr i64 %72, 43
  %74 = shl i64 %72, 21
  %75 = or i64 %74, %73
  %76 = xor i64 %67, %2
  %77 = lshr i64 %76, 30
  %78 = shl i64 %76, 34
  %79 = or i64 %78, %77
  %80 = add i64 %71, %75
  %81 = add i64 %80, %79
  %82 = xor i64 %62, -3942382747735136937
  %83 = lshr i64 %82, 20
  %84 = shl i64 %82, 44
  %85 = or i64 %84, %83
  %86 = add i64 %2, %1
  %87 = add i64 %86, %59
  %88 = sub i64 %87, %67
  %89 = add i64 %88, %85
  %90 = xor i64 %81, %89
  %91 = mul i64 %90, -7070675565921424023
  %92 = lshr i64 %91, 47
  %93 = xor i64 %91, %89
  %94 = xor i64 %93, %92
  %95 = mul i64 %94, -7070675565921424023
  %96 = lshr i64 %95, 47
  %97 = xor i64 %96, %95
  %98 = mul i64 %97, -7070675565921424023
  br label %208

99:                                               ; preds = %53
  %100 = icmp ugt i64 %1, 32
  br i1 %100, label %101, label %181

101:                                              ; preds = %99
  %102 = getelementptr inbounds i8, i8* %0, i64 24
  %103 = bitcast i8* %102 to i64*
  %104 = load i64, i64* %103, align 1
  %105 = bitcast i8* %0 to i64*
  %106 = load i64, i64* %105, align 1
  %107 = getelementptr inbounds i8, i8* %0, i64 %1
  %108 = getelementptr inbounds i8, i8* %107, i64 -16
  %109 = bitcast i8* %108 to i64*
  %110 = load i64, i64* %109, align 1
  %111 = add i64 %110, %1
  %112 = mul i64 %111, -4348849565147123417
  %113 = add i64 %112, %106
  %114 = add i64 %113, %104
  %115 = lshr i64 %114, 52
  %116 = shl i64 %114, 12
  %117 = or i64 %116, %115
  %118 = lshr i64 %113, 37
  %119 = shl i64 %113, 27
  %120 = or i64 %119, %118
  %121 = getelementptr inbounds i8, i8* %0, i64 8
  %122 = bitcast i8* %121 to i64*
  %123 = load i64, i64* %122, align 1
  %124 = add i64 %113, %123
  %125 = lshr i64 %124, 7
  %126 = shl i64 %124, 57
  %127 = or i64 %126, %125
  %128 = getelementptr inbounds i8, i8* %0, i64 16
  %129 = bitcast i8* %128 to i64*
  %130 = load i64, i64* %129, align 1
  %131 = add i64 %124, %130
  %132 = lshr i64 %131, 31
  %133 = shl i64 %131, 33
  %134 = or i64 %133, %132
  %135 = add i64 %127, %120
  %136 = add i64 %135, %117
  %137 = add i64 %136, %134
  %138 = getelementptr inbounds i8, i8* %107, i64 -32
  %139 = bitcast i8* %138 to i64*
  %140 = load i64, i64* %139, align 1
  %141 = add i64 %140, %130
  %142 = getelementptr inbounds i8, i8* %107, i64 -8
  %143 = bitcast i8* %142 to i64*
  %144 = load i64, i64* %143, align 1
  %145 = add i64 %141, %144
  %146 = lshr i64 %145, 52
  %147 = shl i64 %145, 12
  %148 = or i64 %147, %146
  %149 = lshr i64 %141, 37
  %150 = shl i64 %141, 27
  %151 = or i64 %150, %149
  %152 = getelementptr inbounds i8, i8* %107, i64 -24
  %153 = bitcast i8* %152 to i64*
  %154 = load i64, i64* %153, align 1
  %155 = add i64 %154, %141
  %156 = lshr i64 %155, 7
  %157 = shl i64 %155, 57
  %158 = or i64 %157, %156
  %159 = add i64 %155, %110
  %160 = add i64 %159, %144
  %161 = lshr i64 %159, 31
  %162 = shl i64 %159, 33
  %163 = or i64 %162, %161
  %164 = add i64 %131, %104
  %165 = add i64 %164, %151
  %166 = add i64 %165, %148
  %167 = add i64 %166, %158
  %168 = add i64 %167, %163
  %169 = mul i64 %168, -7286425919675154353
  %170 = add i64 %160, %137
  %171 = mul i64 %170, -4348849565147123417
  %172 = add i64 %169, %171
  %173 = lshr i64 %172, 47
  %174 = xor i64 %173, %172
  %175 = mul i64 %174, -4348849565147123417
  %176 = xor i64 %175, %2
  %177 = add i64 %176, %137
  %178 = lshr i64 %177, 47
  %179 = xor i64 %178, %177
  %180 = mul i64 %179, -7286425919675154353
  br label %208

181:                                              ; preds = %99
  %182 = icmp eq i64 %1, 0
  br i1 %182, label %206, label %183

183:                                              ; preds = %181
  %184 = load i8, i8* %0, align 1
  %185 = lshr i64 %1, 1
  %186 = getelementptr inbounds i8, i8* %0, i64 %185
  %187 = load i8, i8* %186, align 1
  %188 = add nsw i64 %1, -1
  %189 = getelementptr inbounds i8, i8* %0, i64 %188
  %190 = load i8, i8* %189, align 1
  %191 = zext i8 %184 to i64
  %192 = zext i8 %187 to i64
  %193 = shl nuw nsw i64 %192, 8
  %194 = or i64 %193, %191
  %195 = zext i8 %190 to i64
  %196 = shl nuw nsw i64 %195, 2
  %197 = add nuw nsw i64 %196, %1
  %198 = mul i64 %194, -7286425919675154353
  %199 = and i64 %197, 4294967295
  %200 = mul i64 %199, -3942382747735136937
  %201 = xor i64 %198, %2
  %202 = xor i64 %201, %200
  %203 = lshr i64 %202, 47
  %204 = xor i64 %203, %202
  %205 = mul i64 %204, -7286425919675154353
  br label %208

206:                                              ; preds = %181
  %207 = xor i64 %2, -7286425919675154353
  br label %208

208:                                              ; preds = %206, %183, %101, %56, %30, %6
  %209 = phi i64 [ %26, %6 ], [ %52, %30 ], [ %98, %56 ], [ %180, %101 ], [ %205, %183 ], [ %207, %206 ]
  ret i64 %209
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden i64 @_ZN4llvm7hashing6detail10hash_state8finalizeEm(%"struct.llvm::hashing::detail::hash_state"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 5
  %6 = load i64, i64* %5, align 8
  %7 = xor i64 %6, %4
  %8 = mul i64 %7, -7070675565921424023
  %9 = lshr i64 %8, 47
  %10 = xor i64 %8, %6
  %11 = xor i64 %10, %9
  %12 = mul i64 %11, -7070675565921424023
  %13 = lshr i64 %12, 47
  %14 = xor i64 %13, %12
  %15 = mul i64 %14, -7070675565921424023
  %16 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = lshr i64 %17, 47
  %19 = xor i64 %18, %17
  %20 = mul i64 %19, -5435081209227447693
  %21 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 2
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %20, %22
  %24 = add i64 %23, %15
  %25 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 4
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 6
  %28 = load i64, i64* %27, align 8
  %29 = xor i64 %28, %26
  %30 = mul i64 %29, -7070675565921424023
  %31 = lshr i64 %30, 47
  %32 = xor i64 %30, %28
  %33 = xor i64 %32, %31
  %34 = mul i64 %33, -7070675565921424023
  %35 = lshr i64 %34, 47
  %36 = xor i64 %35, %34
  %37 = mul i64 %36, -7070675565921424023
  %38 = lshr i64 %1, 47
  %39 = xor i64 %38, %1
  %40 = mul i64 %39, -5435081209227447693
  %41 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, %40
  %44 = add i64 %43, %37
  %45 = xor i64 %44, %24
  %46 = mul i64 %45, -7070675565921424023
  %47 = lshr i64 %46, 47
  %48 = xor i64 %46, %44
  %49 = xor i64 %48, %47
  %50 = mul i64 %49, -7070675565921424023
  %51 = lshr i64 %50, 47
  %52 = xor i64 %51, %50
  %53 = mul i64 %52, -7070675565921424023
  ret i64 %53
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__112__rotate_gcdIPcEET_S2_S2_S2_(i8*, i8*, i8*) local_unnamed_addr #0 comdat {
  %4 = ptrtoint i8* %1 to i64
  %5 = ptrtoint i8* %0 to i64
  %6 = sub i64 %4, %5
  %7 = ptrtoint i8* %2 to i64
  %8 = sub i64 %7, %4
  %9 = icmp eq i64 %6, %8
  br i1 %9, label %10, label %20

10:                                               ; preds = %3
  %11 = icmp eq i8* %0, %1
  br i1 %11, label %50, label %12

12:                                               ; preds = %10, %12
  %13 = phi i8* [ %18, %12 ], [ %1, %10 ]
  %14 = phi i8* [ %17, %12 ], [ %0, %10 ]
  %15 = load i8, i8* %14, align 1
  %16 = load i8, i8* %13, align 1
  store i8 %16, i8* %14, align 1
  store i8 %15, i8* %13, align 1
  %17 = getelementptr inbounds i8, i8* %14, i64 1
  %18 = getelementptr inbounds i8, i8* %13, i64 1
  %19 = icmp eq i8* %17, %1
  br i1 %19, label %50, label %12

20:                                               ; preds = %3, %20
  %21 = phi i64 [ %23, %20 ], [ %8, %3 ]
  %22 = phi i64 [ %21, %20 ], [ %6, %3 ]
  %23 = srem i64 %22, %21
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %20

25:                                               ; preds = %20
  %26 = icmp eq i64 %21, 0
  br i1 %26, label %29, label %27

27:                                               ; preds = %25
  %28 = getelementptr inbounds i8, i8* %0, i64 %21
  br label %31

29:                                               ; preds = %48, %25
  %30 = getelementptr inbounds i8, i8* %0, i64 %8
  br label %50

31:                                               ; preds = %27, %48
  %32 = phi i8* [ %33, %48 ], [ %28, %27 ]
  %33 = getelementptr inbounds i8, i8* %32, i64 -1
  %34 = load i8, i8* %33, align 1
  %35 = getelementptr inbounds i8, i8* %33, i64 %6
  br label %36

36:                                               ; preds = %36, %31
  %37 = phi i8* [ %33, %31 ], [ %38, %36 ]
  %38 = phi i8* [ %35, %31 ], [ %46, %36 ]
  %39 = load i8, i8* %38, align 1
  store i8 %39, i8* %37, align 1
  %40 = ptrtoint i8* %38 to i64
  %41 = sub i64 %7, %40
  %42 = icmp slt i64 %6, %41
  %43 = getelementptr inbounds i8, i8* %38, i64 %6
  %44 = sub nsw i64 %6, %41
  %45 = getelementptr inbounds i8, i8* %0, i64 %44
  %46 = select i1 %42, i8* %43, i8* %45
  %47 = icmp eq i8* %46, %33
  br i1 %47, label %48, label %36

48:                                               ; preds = %36
  store i8 %34, i8* %38, align 1
  %49 = icmp eq i8* %33, %0
  br i1 %49, label %29, label %31

50:                                               ; preds = %12, %10, %29
  %51 = phi i8* [ %30, %29 ], [ %1, %10 ], [ %1, %12 ]
  ret i8* %51
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden i64 @_ZN4llvm7hashing6detail23hash_combine_range_implImEENSt3__19enable_ifIXsr16is_hashable_dataIT_EE5valueENS_9hash_codeEE4typeEPS5_S9_(i64*, i64*) local_unnamed_addr #0 comdat {
  %3 = alloca %"struct.llvm::hashing::detail::hash_state", align 8
  %4 = load atomic i8, i8* bitcast (i64* @_ZGVZN4llvm7hashing6detail18get_execution_seedEvE4seed to i8*) acquire, align 8
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %13, !prof !3

6:                                                ; preds = %2
  %7 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN4llvm7hashing6detail18get_execution_seedEvE4seed) #17
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %13, label %9

9:                                                ; preds = %6
  %10 = load i64, i64* @_ZN4llvm7hashing6detail19fixed_seed_overrideE, align 8
  %11 = icmp eq i64 %10, 0
  %12 = select i1 %11, i64 -49064778989728563, i64 %10
  store i64 %12, i64* @_ZZN4llvm7hashing6detail18get_execution_seedEvE4seed, align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN4llvm7hashing6detail18get_execution_seedEvE4seed) #17
  br label %13

13:                                               ; preds = %2, %6, %9
  %14 = load i64, i64* @_ZZN4llvm7hashing6detail18get_execution_seedEvE4seed, align 8
  %15 = bitcast i64* %0 to i8*
  %16 = ptrtoint i64* %1 to i64
  %17 = ptrtoint i64* %0 to i64
  %18 = sub i64 %16, %17
  %19 = icmp ult i64 %18, 65
  br i1 %19, label %20, label %22

20:                                               ; preds = %13
  %21 = tail call i64 @_ZN4llvm7hashing6detail10hash_shortEPKcmm(i8* %15, i64 %18, i64 %14) #19
  br label %41

22:                                               ; preds = %13
  %23 = and i64 %18, -64
  %24 = getelementptr inbounds i8, i8* %15, i64 %23
  %25 = bitcast %"struct.llvm::hashing::detail::hash_state"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %25) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 -86, i64 56, i1 false)
  call void @_ZN4llvm7hashing6detail10hash_state6createEPKcm(%"struct.llvm::hashing::detail::hash_state"* nonnull sret %3, i8* %15, i64 %14) #19
  %26 = getelementptr inbounds i64, i64* %0, i64 8
  %27 = bitcast i64* %26 to i8*
  %28 = icmp eq i8* %24, %27
  br i1 %28, label %33, label %29

29:                                               ; preds = %22, %29
  %30 = phi i8* [ %31, %29 ], [ %27, %22 ]
  call void @_ZN4llvm7hashing6detail10hash_state3mixEPKc(%"struct.llvm::hashing::detail::hash_state"* nonnull %3, i8* %30) #19
  %31 = getelementptr inbounds i8, i8* %30, i64 64
  %32 = icmp eq i8* %31, %24
  br i1 %32, label %33, label %29

33:                                               ; preds = %29, %22
  %34 = and i64 %18, 63
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %39, label %36

36:                                               ; preds = %33
  %37 = getelementptr inbounds i64, i64* %1, i64 -8
  %38 = bitcast i64* %37 to i8*
  call void @_ZN4llvm7hashing6detail10hash_state3mixEPKc(%"struct.llvm::hashing::detail::hash_state"* nonnull %3, i8* %38) #19
  br label %39

39:                                               ; preds = %33, %36
  %40 = call i64 @_ZN4llvm7hashing6detail10hash_state8finalizeEm(%"struct.llvm::hashing::detail::hash_state"* nonnull %3, i64 %18) #19
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %25) #17
  br label %41

41:                                               ; preds = %39, %20
  %42 = phi i64 [ %21, %20 ], [ %40, %39 ]
  ret i64 %42
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.cttz.i64(i64, i1 immarg) #10

; Function Attrs: optsize
declare void @_ZN4llvm15SmallVectorBase8grow_podEPvmm(%"class.llvm::SmallVectorBase"*, i8*, i64, i64) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #10

; Function Attrs: nounwind
declare void @llvm.assume(i1) #17

attributes #0 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind optsize readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind optsize readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind readnone speculatable }
attributes #11 = { noinline nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nofree norecurse nounwind optsize ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noreturn optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { nofree nounwind }
attributes #16 = { inlinehint nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { nounwind }
attributes #18 = { builtin nounwind optsize }
attributes #19 = { optsize }
attributes #20 = { nounwind optsize }
attributes #21 = { noreturn nounwind optsize }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i64 0, i64 65}
!3 = !{!"branch_weights", i32 1, i32 1048575}
!4 = !{!5}
!5 = distinct !{!5, !6, !"_ZN4llvmngENS_5APIntE: argument 0"}
!6 = distinct !{!6, !"_ZN4llvmngENS_5APIntE"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZN4llvmngENS_5APIntE: argument 0"}
!9 = distinct !{!9, !"_ZN4llvmngENS_5APIntE"}
!10 = !{!11}
!11 = distinct !{!11, !12, !"_ZN4llvmngENS_5APIntE: argument 0"}
!12 = distinct !{!12, !"_ZN4llvmngENS_5APIntE"}
!13 = !{!14}
!14 = distinct !{!14, !15, !"_ZN4llvmplENS_5APIntERKS0_: argument 0"}
!15 = distinct !{!15, !"_ZN4llvmplENS_5APIntERKS0_"}
!16 = !{!17}
!17 = distinct !{!17, !18, !"_ZN4llvmplENS_5APIntEm: argument 0"}
!18 = distinct !{!18, !"_ZN4llvmplENS_5APIntEm"}
!19 = !{!20}
!20 = distinct !{!20, !21, !"_ZN4llvmplENS_5APIntEm: argument 0"}
!21 = distinct !{!21, !"_ZN4llvmplENS_5APIntEm"}
!22 = !{!23}
!23 = distinct !{!23, !24, !"_ZN4llvmmiENS_5APIntERKS0_: argument 0"}
!24 = distinct !{!24, !"_ZN4llvmmiENS_5APIntERKS0_"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"_ZN4llvmmiENS_5APIntERKS0_: argument 0"}
!27 = distinct !{!27, !"_ZN4llvmmiENS_5APIntERKS0_"}
!28 = !{!29}
!29 = distinct !{!29, !30, !"_ZN4llvmplENS_5APIntEm: argument 0"}
!30 = distinct !{!30, !"_ZN4llvmplENS_5APIntEm"}
!31 = !{!32}
!32 = distinct !{!32, !33, !"_ZN4llvmplENS_5APIntERKS0_: argument 0"}
!33 = distinct !{!33, !"_ZN4llvmplENS_5APIntERKS0_"}
!34 = !{!35}
!35 = distinct !{!35, !36, !"_ZN4llvmplERKNS_5APIntEOS0_: argument 0"}
!36 = distinct !{!36, !"_ZN4llvmplERKNS_5APIntEOS0_"}
!37 = !{!38}
!38 = distinct !{!38, !39, !"_ZN4llvmmiENS_5APIntEm: argument 0"}
!39 = distinct !{!39, !"_ZN4llvmmiENS_5APIntEm"}
!40 = !{!41}
!41 = distinct !{!41, !42, !"_ZN4llvmmiERKNS_5APIntEOS0_: argument 0"}
!42 = distinct !{!42, !"_ZN4llvmmiERKNS_5APIntEOS0_"}
!43 = !{!44, !41}
!44 = distinct !{!44, !45, !"_ZN4llvmngENS_5APIntE: argument 0"}
!45 = distinct !{!45, !"_ZN4llvmngENS_5APIntE"}
!46 = !{!47}
!47 = distinct !{!47, !48, !"_ZN4llvmmiERKNS_5APIntEOS0_: argument 0"}
!48 = distinct !{!48, !"_ZN4llvmmiERKNS_5APIntEOS0_"}
!49 = !{!50, !47}
!50 = distinct !{!50, !51, !"_ZN4llvmngENS_5APIntE: argument 0"}
!51 = distinct !{!51, !"_ZN4llvmngENS_5APIntE"}
!52 = !{!53}
!53 = distinct !{!53, !54, !"_ZN4llvmmiERKNS_5APIntEOS0_: argument 0"}
!54 = distinct !{!54, !"_ZN4llvmmiERKNS_5APIntEOS0_"}
!55 = !{!56, !53}
!56 = distinct !{!56, !57, !"_ZN4llvmngENS_5APIntE: argument 0"}
!57 = distinct !{!57, !"_ZN4llvmngENS_5APIntE"}
!58 = !{!59}
!59 = distinct !{!59, !60, !"_ZN4llvmplENS_5APIntEm: argument 0"}
!60 = distinct !{!60, !"_ZN4llvmplENS_5APIntEm"}
!61 = !{!62}
!62 = distinct !{!62, !63, !"_ZN4llvmmiENS_5APIntERKS0_: argument 0"}
!63 = distinct !{!63, !"_ZN4llvmmiENS_5APIntERKS0_"}
!64 = !{!65}
!65 = distinct !{!65, !66, !"_ZN4llvmplENS_5APIntEm: argument 0"}
!66 = distinct !{!66, !"_ZN4llvmplENS_5APIntEm"}
!67 = !{!68}
!68 = distinct !{!68, !69, !"_ZN4llvmmiENS_5APIntERKS0_: argument 0"}
!69 = distinct !{!69, !"_ZN4llvmmiENS_5APIntERKS0_"}
!70 = !{!71}
!71 = distinct !{!71, !72, !"_ZN4llvmmiENS_5APIntERKS0_: argument 0"}
!72 = distinct !{!72, !"_ZN4llvmmiENS_5APIntERKS0_"}
!73 = !{!74}
!74 = distinct !{!74, !75, !"_ZN4llvmplENS_5APIntEm: argument 0"}
!75 = distinct !{!75, !"_ZN4llvmplENS_5APIntEm"}
!76 = !{!77}
!77 = distinct !{!77, !78, !"_ZN4llvmngENS_5APIntE: argument 0"}
!78 = distinct !{!78, !"_ZN4llvmngENS_5APIntE"}
!79 = !{!80}
!80 = distinct !{!80, !81, !"_ZN4llvmngENS_5APIntE: argument 0"}
!81 = distinct !{!81, !"_ZN4llvmngENS_5APIntE"}
!82 = !{!83}
!83 = distinct !{!83, !84, !"_ZN4llvmmiENS_5APIntERKS0_: argument 0"}
!84 = distinct !{!84, !"_ZN4llvmmiENS_5APIntERKS0_"}
!85 = !{!86}
!86 = distinct !{!86, !87, !"_ZN4llvmmiERKNS_5APIntEOS0_: argument 0"}
!87 = distinct !{!87, !"_ZN4llvmmiERKNS_5APIntEOS0_"}
!88 = !{!89, !86}
!89 = distinct !{!89, !90, !"_ZN4llvmngENS_5APIntE: argument 0"}
!90 = distinct !{!90, !"_ZN4llvmngENS_5APIntE"}
!91 = !{!92}
!92 = distinct !{!92, !93, !"_ZN4llvmmiERKNS_5APIntEOS0_: argument 0"}
!93 = distinct !{!93, !"_ZN4llvmmiERKNS_5APIntEOS0_"}
!94 = !{!95, !92}
!95 = distinct !{!95, !96, !"_ZN4llvmngENS_5APIntE: argument 0"}
!96 = distinct !{!96, !"_ZN4llvmngENS_5APIntE"}
!97 = !{!98}
!98 = distinct !{!98, !99, !"_ZN4llvmmiERKNS_5APIntEOS0_: argument 0"}
!99 = distinct !{!99, !"_ZN4llvmmiERKNS_5APIntEOS0_"}
!100 = !{!101, !98}
!101 = distinct !{!101, !102, !"_ZN4llvmngENS_5APIntE: argument 0"}
!102 = distinct !{!102, !"_ZN4llvmngENS_5APIntE"}
!103 = !{!104}
!104 = distinct !{!104, !105, !"_ZN4llvmmiENS_5APIntERKS0_: argument 0"}
!105 = distinct !{!105, !"_ZN4llvmmiENS_5APIntERKS0_"}
!106 = !{!107}
!107 = distinct !{!107, !108, !"_ZN4llvmplENS_5APIntERKS0_: argument 0"}
!108 = distinct !{!108, !"_ZN4llvmplENS_5APIntERKS0_"}
!109 = !{!110}
!110 = distinct !{!110, !111, !"_ZN4llvmplENS_5APIntEm: argument 0"}
!111 = distinct !{!111, !"_ZN4llvmplENS_5APIntEm"}
!112 = !{!113}
!113 = distinct !{!113, !114, !"_ZN4llvmplENS_5APIntERKS0_: argument 0"}
!114 = distinct !{!114, !"_ZN4llvmplENS_5APIntERKS0_"}
!115 = !{!116}
!116 = distinct !{!116, !117, !"_ZN4llvmmiENS_5APIntERKS0_: argument 0"}
!117 = distinct !{!117, !"_ZN4llvmmiENS_5APIntERKS0_"}
!118 = !{!119}
!119 = distinct !{!119, !120, !"_ZN4llvmplENS_5APIntERKS0_: argument 0"}
!120 = distinct !{!120, !"_ZN4llvmplENS_5APIntERKS0_"}
!121 = !{!122}
!122 = distinct !{!122, !123, !"_ZN4llvmplENS_5APIntERKS0_: argument 0"}
!123 = distinct !{!123, !"_ZN4llvmplENS_5APIntERKS0_"}
!124 = !{!125}
!125 = distinct !{!125, !126, !"_ZN4llvmplENS_5APIntEm: argument 0"}
!126 = distinct !{!126, !"_ZN4llvmplENS_5APIntEm"}
!127 = !{!128}
!128 = distinct !{!128, !129, !"_ZN4llvmmiENS_5APIntERKS0_: argument 0"}
!129 = distinct !{!129, !"_ZN4llvmmiENS_5APIntERKS0_"}
!130 = !{!131}
!131 = distinct !{!131, !132, !"_ZN4llvmplENS_5APIntERKS0_: argument 0"}
!132 = distinct !{!132, !"_ZN4llvmplENS_5APIntERKS0_"}
!133 = !{!134}
!134 = distinct !{!134, !135, !"_ZN4llvmplENS_5APIntEm: argument 0"}
!135 = distinct !{!135, !"_ZN4llvmplENS_5APIntEm"}
!136 = !{!137}
!137 = distinct !{!137, !138, !"_ZN4llvmplENS_5APIntERKS0_: argument 0"}
!138 = distinct !{!138, !"_ZN4llvmplENS_5APIntERKS0_"}
!139 = !{!140}
!140 = distinct !{!140, !141, !"_ZN4llvmplENS_5APIntEm: argument 0"}
!141 = distinct !{!141, !"_ZN4llvmplENS_5APIntEm"}
!142 = !{!143}
!143 = distinct !{!143, !144, !"_ZN4llvmmiENS_5APIntERKS0_: argument 0"}
!144 = distinct !{!144, !"_ZN4llvmmiENS_5APIntERKS0_"}
!145 = !{!146}
!146 = distinct !{!146, !147, !"_ZN4llvmplENS_5APIntERKS0_: argument 0"}
!147 = distinct !{!147, !"_ZN4llvmplENS_5APIntERKS0_"}
!148 = !{!149}
!149 = distinct !{!149, !150, !"_ZN4llvmplENS_5APIntERKS0_: argument 0"}
!150 = distinct !{!150, !"_ZN4llvmplENS_5APIntERKS0_"}
!151 = !{!152}
!152 = distinct !{!152, !153, !"_ZN4llvmplENS_5APIntEm: argument 0"}
!153 = distinct !{!153, !"_ZN4llvmplENS_5APIntEm"}
!154 = !{!155}
!155 = distinct !{!155, !156, !"_ZN4llvmmiENS_5APIntEm: argument 0"}
!156 = distinct !{!156, !"_ZN4llvmmiENS_5APIntEm"}
!157 = !{!158}
!158 = distinct !{!158, !159, !"_ZN4llvmmiENS_5APIntERKS0_: argument 0"}
!159 = distinct !{!159, !"_ZN4llvmmiENS_5APIntERKS0_"}
!160 = !{!161}
!161 = distinct !{!161, !162, !"_ZN4llvmplENS_5APIntEm: argument 0"}
!162 = distinct !{!162, !"_ZN4llvmplENS_5APIntEm"}
!163 = !{i32 0, i32 33}
!164 = !{!165}
!165 = distinct !{!165, !166, !"_ZN4llvmngENS_5APIntE: argument 0"}
!166 = distinct !{!166, !"_ZN4llvmngENS_5APIntE"}
!167 = !{!168}
!168 = distinct !{!168, !169, !"_ZN4llvmngENS_5APIntE: argument 0"}
!169 = distinct !{!169, !"_ZN4llvmngENS_5APIntE"}
!170 = !{!171}
!171 = distinct !{!171, !172, !"_ZN4llvmngENS_5APIntE: argument 0"}
!172 = distinct !{!172, !"_ZN4llvmngENS_5APIntE"}
!173 = !{!174}
!174 = distinct !{!174, !175, !"_ZN4llvmngENS_5APIntE: argument 0"}
!175 = distinct !{!175, !"_ZN4llvmngENS_5APIntE"}
!176 = !{!177}
!177 = distinct !{!177, !178, !"_ZN4llvmngENS_5APIntE: argument 0"}
!178 = distinct !{!178, !"_ZN4llvmngENS_5APIntE"}
!179 = !{!180}
!180 = distinct !{!180, !181, !"_ZN4llvmngENS_5APIntE: argument 0"}
!181 = distinct !{!181, !"_ZN4llvmngENS_5APIntE"}
!182 = !{!183}
!183 = distinct !{!183, !184, !"_ZN4llvmngENS_5APIntE: argument 0"}
!184 = distinct !{!184, !"_ZN4llvmngENS_5APIntE"}
!185 = !{!186}
!186 = distinct !{!186, !187, !"_ZN4llvmngENS_5APIntE: argument 0"}
!187 = distinct !{!187, !"_ZN4llvmngENS_5APIntE"}
!188 = !{!189}
!189 = distinct !{!189, !190, !"_ZN4llvmngENS_5APIntE: argument 0"}
!190 = distinct !{!190, !"_ZN4llvmngENS_5APIntE"}
!191 = !{!192}
!192 = distinct !{!192, !193, !"_ZN4llvmngENS_5APIntE: argument 0"}
!193 = distinct !{!193, !"_ZN4llvmngENS_5APIntE"}
!194 = !{!195}
!195 = distinct !{!195, !196, !"_ZN4llvmngENS_5APIntE: argument 0"}
!196 = distinct !{!196, !"_ZN4llvmngENS_5APIntE"}
!197 = !{!198}
!198 = distinct !{!198, !199, !"_ZN4llvmngENS_5APIntE: argument 0"}
!199 = distinct !{!199, !"_ZN4llvmngENS_5APIntE"}
!200 = !{!201}
!201 = distinct !{!201, !202, !"_ZN4llvmngENS_5APIntE: argument 0"}
!202 = distinct !{!202, !"_ZN4llvmngENS_5APIntE"}
!203 = !{!204}
!204 = distinct !{!204, !205, !"_ZN4llvmngENS_5APIntE: argument 0"}
!205 = distinct !{!205, !"_ZN4llvmngENS_5APIntE"}
!206 = !{!207}
!207 = distinct !{!207, !208, !"_ZN4llvmngENS_5APIntE: argument 0"}
!208 = distinct !{!208, !"_ZN4llvmngENS_5APIntE"}
!209 = !{!210}
!210 = distinct !{!210, !211, !"_ZN4llvmngENS_5APIntE: argument 0"}
!211 = distinct !{!211, !"_ZN4llvmngENS_5APIntE"}
!212 = !{!213}
!213 = distinct !{!213, !214, !"_ZN4llvmngENS_5APIntE: argument 0"}
!214 = distinct !{!214, !"_ZN4llvmngENS_5APIntE"}
!215 = !{!216}
!216 = distinct !{!216, !217, !"_ZN4llvmngENS_5APIntE: argument 0"}
!217 = distinct !{!217, !"_ZN4llvmngENS_5APIntE"}
!218 = !{!219}
!219 = distinct !{!219, !220, !"_ZN4llvmngENS_5APIntE: argument 0"}
!220 = distinct !{!220, !"_ZN4llvmngENS_5APIntE"}
!221 = !{!222}
!222 = distinct !{!222, !223, !"_ZN4llvmplENS_5APIntERKS0_: argument 0"}
!223 = distinct !{!223, !"_ZN4llvmplENS_5APIntERKS0_"}
!224 = !{!225}
!225 = distinct !{!225, !226, !"_ZN4llvmplENS_5APIntERKS0_: argument 0"}
!226 = distinct !{!226, !"_ZN4llvmplENS_5APIntERKS0_"}
!227 = !{!228}
!228 = distinct !{!228, !229, !"_ZN4llvmmiENS_5APIntERKS0_: argument 0"}
!229 = distinct !{!229, !"_ZN4llvmmiENS_5APIntERKS0_"}
!230 = !{!231}
!231 = distinct !{!231, !232, !"_ZN4llvmmiENS_5APIntERKS0_: argument 0"}
!232 = distinct !{!232, !"_ZN4llvmmiENS_5APIntERKS0_"}
!233 = !{!234, !236}
!234 = distinct !{!234, !235, !"_ZNK4llvm5APInt3shlERKS0_: argument 0"}
!235 = distinct !{!235, !"_ZNK4llvm5APInt3shlERKS0_"}
!236 = distinct !{!236, !237, !"_ZNK4llvm5APIntlsERKS0_: argument 0"}
!237 = distinct !{!237, !"_ZNK4llvm5APIntlsERKS0_"}
!238 = !{!239, !241}
!239 = distinct !{!239, !240, !"_ZNK4llvm5APInt3shlERKS0_: argument 0"}
!240 = distinct !{!240, !"_ZNK4llvm5APInt3shlERKS0_"}
!241 = distinct !{!241, !242, !"_ZNK4llvm5APIntlsERKS0_: argument 0"}
!242 = distinct !{!242, !"_ZNK4llvm5APIntlsERKS0_"}
!243 = !{!"branch_weights", i32 2000, i32 1}
!244 = !{!245, !247}
!245 = distinct !{!245, !246, !"_ZNK4llvm9StringRef3strEv: argument 0"}
!246 = distinct !{!246, !"_ZNK4llvm9StringRef3strEv"}
!247 = distinct !{!247, !248, !"_ZNK4llvm9StringRefcvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEv: argument 0"}
!248 = distinct !{!248, !"_ZNK4llvm9StringRefcvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEv"}
