; ModuleID = '../../third_party/freetype/src/src/base/ftbbox.c'
source_filename = "../../third_party/freetype/src/src/base/ftbbox.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.FT_Outline_Funcs_ = type { i32 (%struct.FT_Vector_*, i8*)*, i32 (%struct.FT_Vector_*, i8*)*, i32 (%struct.FT_Vector_*, %struct.FT_Vector_*, i8*)*, i32 (%struct.FT_Vector_*, %struct.FT_Vector_*, %struct.FT_Vector_*, i8*)*, i32, i64 }
%struct.FT_Vector_ = type { i64, i64 }
%struct.FT_Outline_ = type { i16, i16, %struct.FT_Vector_*, i8*, i16*, i32 }
%struct.FT_BBox_ = type { i64, i64, i64, i64 }
%struct.TBBox_Rec_ = type { %struct.FT_Vector_, %struct.FT_BBox_ }

@bbox_interface = internal constant %struct.FT_Outline_Funcs_ { i32 (%struct.FT_Vector_*, i8*)* bitcast (i32 (%struct.FT_Vector_*, %struct.TBBox_Rec_*)* @BBox_Move_To to i32 (%struct.FT_Vector_*, i8*)*), i32 (%struct.FT_Vector_*, i8*)* bitcast (i32 (%struct.FT_Vector_*, %struct.TBBox_Rec_*)* @BBox_Line_To to i32 (%struct.FT_Vector_*, i8*)*), i32 (%struct.FT_Vector_*, %struct.FT_Vector_*, i8*)* bitcast (i32 (%struct.FT_Vector_*, %struct.FT_Vector_*, %struct.TBBox_Rec_*)* @BBox_Conic_To to i32 (%struct.FT_Vector_*, %struct.FT_Vector_*, i8*)*), i32 (%struct.FT_Vector_*, %struct.FT_Vector_*, %struct.FT_Vector_*, i8*)* bitcast (i32 (%struct.FT_Vector_*, %struct.FT_Vector_*, %struct.FT_Vector_*, %struct.TBBox_Rec_*)* @BBox_Cubic_To to i32 (%struct.FT_Vector_*, %struct.FT_Vector_*, %struct.FT_Vector_*, i8*)*), i32 0, i64 0 }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @FT_Outline_Get_BBox(%struct.FT_Outline_*, %struct.FT_BBox_*) local_unnamed_addr #0 {
  %3 = alloca %struct.TBBox_Rec_, align 8
  %4 = icmp eq %struct.FT_BBox_* %1, null
  br i1 %4, label %106, label %5

5:                                                ; preds = %2
  %6 = icmp eq %struct.FT_Outline_* %0, null
  br i1 %6, label %106, label %7

7:                                                ; preds = %5
  %8 = getelementptr inbounds %struct.FT_Outline_, %struct.FT_Outline_* %0, i64 0, i32 1
  %9 = load i16, i16* %8, align 2
  %10 = icmp eq i16 %9, 0
  br i1 %10, label %15, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.FT_Outline_, %struct.FT_Outline_* %0, i64 0, i32 0
  %13 = load i16, i16* %12, align 8
  %14 = icmp slt i16 %13, 1
  br i1 %14, label %15, label %17

15:                                               ; preds = %11, %7
  %16 = bitcast %struct.FT_BBox_* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 0, i64 32, i1 false)
  br label %106

17:                                               ; preds = %11
  %18 = sext i16 %9 to i32
  %19 = icmp sgt i16 %9, 0
  br i1 %19, label %20, label %71

20:                                               ; preds = %17
  %21 = getelementptr inbounds %struct.FT_Outline_, %struct.FT_Outline_* %0, i64 0, i32 2
  %22 = load %struct.FT_Vector_*, %struct.FT_Vector_** %21, align 8
  %23 = getelementptr inbounds %struct.FT_Outline_, %struct.FT_Outline_* %0, i64 0, i32 3
  %24 = load i8*, i8** %23, align 8
  br label %25

25:                                               ; preds = %20, %62
  %26 = phi i16 [ 0, %20 ], [ %68, %62 ]
  %27 = phi %struct.FT_Vector_* [ %22, %20 ], [ %67, %62 ]
  %28 = phi i64 [ 2147483647, %20 ], [ %66, %62 ]
  %29 = phi i64 [ 2147483647, %20 ], [ %65, %62 ]
  %30 = phi i64 [ -2147483647, %20 ], [ %64, %62 ]
  %31 = phi i64 [ -2147483647, %20 ], [ %63, %62 ]
  %32 = phi i64 [ 2147483647, %20 ], [ %39, %62 ]
  %33 = phi i64 [ 2147483647, %20 ], [ %45, %62 ]
  %34 = phi i64 [ -2147483647, %20 ], [ %41, %62 ]
  %35 = phi i64 [ -2147483647, %20 ], [ %47, %62 ]
  %36 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %27, i64 0, i32 0
  %37 = load i64, i64* %36, align 8
  %38 = icmp slt i64 %37, %32
  %39 = select i1 %38, i64 %37, i64 %32
  %40 = icmp sgt i64 %37, %34
  %41 = select i1 %40, i64 %37, i64 %34
  %42 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %27, i64 0, i32 1
  %43 = load i64, i64* %42, align 8
  %44 = icmp slt i64 %43, %33
  %45 = select i1 %44, i64 %43, i64 %33
  %46 = icmp sgt i64 %43, %35
  %47 = select i1 %46, i64 %43, i64 %35
  %48 = zext i16 %26 to i64
  %49 = getelementptr inbounds i8, i8* %24, i64 %48
  %50 = load i8, i8* %49, align 1
  %51 = and i8 %50, 3
  %52 = icmp eq i8 %51, 1
  br i1 %52, label %53, label %62

53:                                               ; preds = %25
  %54 = icmp slt i64 %37, %28
  %55 = select i1 %54, i64 %37, i64 %28
  %56 = icmp sgt i64 %37, %30
  %57 = select i1 %56, i64 %37, i64 %30
  %58 = icmp slt i64 %43, %29
  %59 = select i1 %58, i64 %43, i64 %29
  %60 = icmp sgt i64 %43, %31
  %61 = select i1 %60, i64 %43, i64 %31
  br label %62

62:                                               ; preds = %53, %25
  %63 = phi i64 [ %31, %25 ], [ %61, %53 ]
  %64 = phi i64 [ %30, %25 ], [ %57, %53 ]
  %65 = phi i64 [ %29, %25 ], [ %59, %53 ]
  %66 = phi i64 [ %28, %25 ], [ %55, %53 ]
  %67 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %27, i64 1
  %68 = add i16 %26, 1
  %69 = zext i16 %68 to i32
  %70 = icmp slt i32 %69, %18
  br i1 %70, label %25, label %71

71:                                               ; preds = %62, %17
  %72 = phi i64 [ -2147483647, %17 ], [ %47, %62 ]
  %73 = phi i64 [ -2147483647, %17 ], [ %41, %62 ]
  %74 = phi i64 [ 2147483647, %17 ], [ %45, %62 ]
  %75 = phi i64 [ 2147483647, %17 ], [ %39, %62 ]
  %76 = phi i64 [ -2147483647, %17 ], [ %63, %62 ]
  %77 = phi i64 [ -2147483647, %17 ], [ %64, %62 ]
  %78 = phi i64 [ 2147483647, %17 ], [ %65, %62 ]
  %79 = phi i64 [ 2147483647, %17 ], [ %66, %62 ]
  %80 = icmp slt i64 %75, %79
  %81 = icmp sgt i64 %73, %77
  %82 = or i1 %81, %80
  %83 = icmp slt i64 %74, %78
  %84 = or i1 %83, %82
  %85 = icmp sgt i64 %72, %76
  %86 = or i1 %85, %84
  br i1 %86, label %87, label %101

87:                                               ; preds = %71
  %88 = bitcast %struct.TBBox_Rec_* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %88) #5
  %89 = getelementptr inbounds %struct.TBBox_Rec_, %struct.TBBox_Rec_* %3, i64 0, i32 1, i32 1
  %90 = getelementptr inbounds %struct.TBBox_Rec_, %struct.TBBox_Rec_* %3, i64 0, i32 1, i32 2
  %91 = getelementptr inbounds %struct.TBBox_Rec_, %struct.TBBox_Rec_* %3, i64 0, i32 1, i32 3
  %92 = getelementptr inbounds %struct.TBBox_Rec_, %struct.TBBox_Rec_* %3, i64 0, i32 1, i32 0
  %93 = bitcast %struct.TBBox_Rec_* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %93, i8 -86, i64 16, i1 false)
  store i64 %79, i64* %92, align 8
  store i64 %78, i64* %89, align 8
  store i64 %77, i64* %90, align 8
  store i64 %76, i64* %91, align 8
  %94 = call i32 @FT_Outline_Decompose(%struct.FT_Outline_* nonnull %0, %struct.FT_Outline_Funcs_* nonnull @bbox_interface, i8* nonnull %88) #5
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %100

96:                                               ; preds = %87
  %97 = getelementptr inbounds %struct.TBBox_Rec_, %struct.TBBox_Rec_* %3, i64 0, i32 1
  %98 = bitcast %struct.FT_BBox_* %1 to i8*
  %99 = bitcast %struct.FT_BBox_* %97 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %98, i8* align 8 %99, i64 32, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %88) #5
  br label %106

100:                                              ; preds = %87
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %88) #5
  br label %106

101:                                              ; preds = %71
  %102 = getelementptr inbounds %struct.FT_BBox_, %struct.FT_BBox_* %1, i64 0, i32 0
  store i64 %79, i64* %102, align 8
  %103 = getelementptr inbounds %struct.FT_BBox_, %struct.FT_BBox_* %1, i64 0, i32 1
  store i64 %78, i64* %103, align 8
  %104 = getelementptr inbounds %struct.FT_BBox_, %struct.FT_BBox_* %1, i64 0, i32 2
  store i64 %77, i64* %104, align 8
  %105 = getelementptr inbounds %struct.FT_BBox_, %struct.FT_BBox_* %1, i64 0, i32 3
  store i64 %76, i64* %105, align 8
  br label %106

106:                                              ; preds = %101, %96, %100, %5, %2, %15
  %107 = phi i32 [ 0, %15 ], [ %94, %100 ], [ 6, %2 ], [ 20, %5 ], [ 0, %96 ], [ 0, %101 ]
  ret i32 %107
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @FT_Outline_Decompose(%struct.FT_Outline_*, %struct.FT_Outline_Funcs_*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @BBox_Move_To(%struct.FT_Vector_* nocapture readonly, %struct.TBBox_Rec_* nocapture) #0 {
  %3 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.TBBox_Rec_, %struct.TBBox_Rec_* %1, i64 0, i32 1, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = icmp slt i64 %4, %6
  br i1 %7, label %8, label %10

8:                                                ; preds = %2
  store i64 %4, i64* %5, align 8
  %9 = load i64, i64* %3, align 8
  br label %10

10:                                               ; preds = %8, %2
  %11 = phi i64 [ %9, %8 ], [ %4, %2 ]
  %12 = getelementptr inbounds %struct.TBBox_Rec_, %struct.TBBox_Rec_* %1, i64 0, i32 1, i32 2
  %13 = load i64, i64* %12, align 8
  %14 = icmp sgt i64 %11, %13
  br i1 %14, label %15, label %16

15:                                               ; preds = %10
  store i64 %11, i64* %12, align 8
  br label %16

16:                                               ; preds = %15, %10
  %17 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %0, i64 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %struct.TBBox_Rec_, %struct.TBBox_Rec_* %1, i64 0, i32 1, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = icmp slt i64 %18, %20
  br i1 %21, label %22, label %24

22:                                               ; preds = %16
  store i64 %18, i64* %19, align 8
  %23 = load i64, i64* %17, align 8
  br label %24

24:                                               ; preds = %22, %16
  %25 = phi i64 [ %23, %22 ], [ %18, %16 ]
  %26 = getelementptr inbounds %struct.TBBox_Rec_, %struct.TBBox_Rec_* %1, i64 0, i32 1, i32 3
  %27 = load i64, i64* %26, align 8
  %28 = icmp sgt i64 %25, %27
  br i1 %28, label %29, label %30

29:                                               ; preds = %24
  store i64 %25, i64* %26, align 8
  br label %30

30:                                               ; preds = %24, %29
  %31 = bitcast %struct.TBBox_Rec_* %1 to i8*
  %32 = bitcast %struct.FT_Vector_* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 16, i1 false)
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @BBox_Line_To(%struct.FT_Vector_* nocapture readonly, %struct.TBBox_Rec_* nocapture) #0 {
  %3 = bitcast %struct.TBBox_Rec_* %1 to i8*
  %4 = bitcast %struct.FT_Vector_* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 16, i1 false)
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @BBox_Conic_To(%struct.FT_Vector_* nocapture readonly, %struct.FT_Vector_* nocapture readonly, %struct.TBBox_Rec_* nocapture) #0 {
  %4 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %1, i64 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %struct.TBBox_Rec_, %struct.TBBox_Rec_* %2, i64 0, i32 1, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = icmp slt i64 %5, %7
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  store i64 %5, i64* %6, align 8
  %10 = load i64, i64* %4, align 8
  br label %11

11:                                               ; preds = %9, %3
  %12 = phi i64 [ %5, %9 ], [ %7, %3 ]
  %13 = phi i64 [ %10, %9 ], [ %5, %3 ]
  %14 = getelementptr inbounds %struct.TBBox_Rec_, %struct.TBBox_Rec_* %2, i64 0, i32 1, i32 2
  %15 = load i64, i64* %14, align 8
  %16 = icmp sgt i64 %13, %15
  br i1 %16, label %17, label %18

17:                                               ; preds = %11
  store i64 %13, i64* %14, align 8
  br label %18

18:                                               ; preds = %17, %11
  %19 = phi i64 [ %13, %17 ], [ %15, %11 ]
  %20 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %1, i64 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %struct.TBBox_Rec_, %struct.TBBox_Rec_* %2, i64 0, i32 1, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = icmp slt i64 %21, %23
  br i1 %24, label %25, label %27

25:                                               ; preds = %18
  store i64 %21, i64* %22, align 8
  %26 = load i64, i64* %20, align 8
  br label %27

27:                                               ; preds = %25, %18
  %28 = phi i64 [ %26, %25 ], [ %21, %18 ]
  %29 = getelementptr inbounds %struct.TBBox_Rec_, %struct.TBBox_Rec_* %2, i64 0, i32 1, i32 3
  %30 = load i64, i64* %29, align 8
  %31 = icmp sgt i64 %28, %30
  br i1 %31, label %32, label %33

32:                                               ; preds = %27
  store i64 %28, i64* %29, align 8
  br label %33

33:                                               ; preds = %27, %32
  %34 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %0, i64 0, i32 0
  %35 = load i64, i64* %34, align 8
  %36 = icmp slt i64 %35, %12
  %37 = icmp sgt i64 %35, %19
  %38 = or i1 %36, %37
  br i1 %38, label %39, label %55

39:                                               ; preds = %33
  %40 = getelementptr inbounds %struct.TBBox_Rec_, %struct.TBBox_Rec_* %2, i64 0, i32 0, i32 0
  %41 = load i64, i64* %40, align 8
  %42 = load i64, i64* %4, align 8
  %43 = sub nsw i64 %41, %35
  %44 = sub nsw i64 %42, %35
  %45 = add nsw i64 %44, %43
  %46 = tail call i64 @FT_MulDiv(i64 %43, i64 %44, i64 %45) #5
  %47 = add nsw i64 %46, %35
  %48 = load i64, i64* %6, align 8
  %49 = icmp slt i64 %47, %48
  br i1 %49, label %50, label %51

50:                                               ; preds = %39
  store i64 %47, i64* %6, align 8
  br label %51

51:                                               ; preds = %50, %39
  %52 = load i64, i64* %14, align 8
  %53 = icmp sgt i64 %47, %52
  br i1 %53, label %54, label %55

54:                                               ; preds = %51
  store i64 %47, i64* %14, align 8
  br label %55

55:                                               ; preds = %33, %54, %51
  %56 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %0, i64 0, i32 1
  %57 = load i64, i64* %56, align 8
  %58 = load i64, i64* %22, align 8
  %59 = icmp slt i64 %57, %58
  br i1 %59, label %63, label %60

60:                                               ; preds = %55
  %61 = load i64, i64* %29, align 8
  %62 = icmp sgt i64 %57, %61
  br i1 %62, label %63, label %79

63:                                               ; preds = %60, %55
  %64 = getelementptr inbounds %struct.TBBox_Rec_, %struct.TBBox_Rec_* %2, i64 0, i32 0, i32 1
  %65 = load i64, i64* %64, align 8
  %66 = load i64, i64* %20, align 8
  %67 = sub nsw i64 %65, %57
  %68 = sub nsw i64 %66, %57
  %69 = add nsw i64 %68, %67
  %70 = tail call i64 @FT_MulDiv(i64 %67, i64 %68, i64 %69) #5
  %71 = add nsw i64 %70, %57
  %72 = load i64, i64* %22, align 8
  %73 = icmp slt i64 %71, %72
  br i1 %73, label %74, label %75

74:                                               ; preds = %63
  store i64 %71, i64* %22, align 8
  br label %75

75:                                               ; preds = %74, %63
  %76 = load i64, i64* %29, align 8
  %77 = icmp sgt i64 %71, %76
  br i1 %77, label %78, label %79

78:                                               ; preds = %75
  store i64 %71, i64* %29, align 8
  br label %79

79:                                               ; preds = %78, %75, %60
  %80 = bitcast %struct.TBBox_Rec_* %2 to i8*
  %81 = bitcast %struct.FT_Vector_* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %80, i8* align 8 %81, i64 16, i1 false)
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @BBox_Cubic_To(%struct.FT_Vector_* nocapture readonly, %struct.FT_Vector_* nocapture readonly, %struct.FT_Vector_* nocapture readonly, %struct.TBBox_Rec_* nocapture) #0 {
  %5 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %0, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %struct.TBBox_Rec_, %struct.TBBox_Rec_* %3, i64 0, i32 1, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = icmp sgt i64 %8, %6
  %10 = getelementptr inbounds %struct.TBBox_Rec_, %struct.TBBox_Rec_* %3, i64 0, i32 1, i32 2
  %11 = load i64, i64* %10, align 8
  %12 = icmp sgt i64 %6, %11
  %13 = or i1 %9, %12
  br i1 %13, label %20, label %14

14:                                               ; preds = %4
  %15 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %1, i64 0, i32 0
  %16 = load i64, i64* %15, align 8
  %17 = icmp slt i64 %16, %8
  %18 = icmp sgt i64 %16, %11
  %19 = or i1 %17, %18
  br i1 %19, label %20, label %48

20:                                               ; preds = %4, %14
  %21 = getelementptr inbounds %struct.TBBox_Rec_, %struct.TBBox_Rec_* %3, i64 0, i32 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %1, i64 0, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %2, i64 0, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = icmp sgt i64 %6, %11
  %28 = icmp sgt i64 %24, %11
  %29 = or i1 %27, %28
  br i1 %29, label %30, label %38

30:                                               ; preds = %20
  %31 = getelementptr inbounds %struct.TBBox_Rec_, %struct.TBBox_Rec_* %3, i64 0, i32 1, i32 2
  %32 = sub nsw i64 %22, %11
  %33 = sub nsw i64 %6, %11
  %34 = sub nsw i64 %24, %11
  %35 = sub nsw i64 %26, %11
  %36 = tail call fastcc i64 @cubic_peak(i64 %32, i64 %33, i64 %34, i64 %35) #5
  %37 = add nsw i64 %36, %11
  store i64 %37, i64* %31, align 8
  br label %38

38:                                               ; preds = %30, %20
  %39 = icmp sgt i64 %8, %24
  %40 = or i1 %9, %39
  br i1 %40, label %41, label %48

41:                                               ; preds = %38
  %42 = sub nsw i64 %8, %22
  %43 = sub nsw i64 %8, %6
  %44 = sub nsw i64 %8, %24
  %45 = sub nsw i64 %8, %26
  %46 = tail call fastcc i64 @cubic_peak(i64 %42, i64 %43, i64 %44, i64 %45) #5
  %47 = sub nsw i64 %8, %46
  store i64 %47, i64* %7, align 8
  br label %48

48:                                               ; preds = %41, %38, %14
  %49 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %0, i64 0, i32 1
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds %struct.TBBox_Rec_, %struct.TBBox_Rec_* %3, i64 0, i32 1, i32 1
  %52 = load i64, i64* %51, align 8
  %53 = icmp sgt i64 %52, %50
  %54 = getelementptr inbounds %struct.TBBox_Rec_, %struct.TBBox_Rec_* %3, i64 0, i32 1, i32 3
  %55 = load i64, i64* %54, align 8
  %56 = icmp sgt i64 %50, %55
  %57 = or i1 %53, %56
  br i1 %57, label %64, label %58

58:                                               ; preds = %48
  %59 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %1, i64 0, i32 1
  %60 = load i64, i64* %59, align 8
  %61 = icmp slt i64 %60, %52
  %62 = icmp sgt i64 %60, %55
  %63 = or i1 %61, %62
  br i1 %63, label %64, label %92

64:                                               ; preds = %48, %58
  %65 = getelementptr inbounds %struct.TBBox_Rec_, %struct.TBBox_Rec_* %3, i64 0, i32 0, i32 1
  %66 = load i64, i64* %65, align 8
  %67 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %1, i64 0, i32 1
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %2, i64 0, i32 1
  %70 = load i64, i64* %69, align 8
  %71 = icmp sgt i64 %50, %55
  %72 = icmp sgt i64 %68, %55
  %73 = or i1 %71, %72
  br i1 %73, label %74, label %82

74:                                               ; preds = %64
  %75 = getelementptr inbounds %struct.TBBox_Rec_, %struct.TBBox_Rec_* %3, i64 0, i32 1, i32 3
  %76 = sub nsw i64 %66, %55
  %77 = sub nsw i64 %50, %55
  %78 = sub nsw i64 %68, %55
  %79 = sub nsw i64 %70, %55
  %80 = tail call fastcc i64 @cubic_peak(i64 %76, i64 %77, i64 %78, i64 %79) #5
  %81 = add nsw i64 %80, %55
  store i64 %81, i64* %75, align 8
  br label %82

82:                                               ; preds = %74, %64
  %83 = icmp sgt i64 %52, %68
  %84 = or i1 %53, %83
  br i1 %84, label %85, label %92

85:                                               ; preds = %82
  %86 = sub nsw i64 %52, %66
  %87 = sub nsw i64 %52, %50
  %88 = sub nsw i64 %52, %68
  %89 = sub nsw i64 %52, %70
  %90 = tail call fastcc i64 @cubic_peak(i64 %86, i64 %87, i64 %88, i64 %89) #5
  %91 = sub nsw i64 %52, %90
  store i64 %91, i64* %51, align 8
  br label %92

92:                                               ; preds = %85, %82, %58
  %93 = bitcast %struct.TBBox_Rec_* %3 to i8*
  %94 = bitcast %struct.FT_Vector_* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %93, i8* align 8 %94, i64 16, i1 false)
  ret i32 0
}

declare i64 @FT_MulDiv(i64, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind readnone ssp uwtable
define internal fastcc i64 @cubic_peak(i64, i64, i64, i64) unnamed_addr #3 {
  %5 = icmp slt i64 %0, 0
  %6 = sub nsw i64 0, %0
  %7 = select i1 %5, i64 %6, i64 %0
  %8 = icmp slt i64 %1, 0
  %9 = sub nsw i64 0, %1
  %10 = select i1 %8, i64 %9, i64 %1
  %11 = or i64 %10, %7
  %12 = icmp slt i64 %2, 0
  %13 = sub nsw i64 0, %2
  %14 = select i1 %12, i64 %13, i64 %2
  %15 = or i64 %11, %14
  %16 = icmp slt i64 %3, 0
  %17 = sub nsw i64 0, %3
  %18 = select i1 %16, i64 %17, i64 %3
  %19 = or i64 %15, %18
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.ctlz.i32(i32 %20, i1 true), !range !2
  %22 = xor i32 %21, 31
  %23 = sub nsw i32 27, %22
  %24 = icmp ult i32 %22, 27
  br i1 %24, label %25, label %34

25:                                               ; preds = %4
  %26 = icmp ult i32 %22, 25
  %27 = select i1 %26, i32 2, i32 %23
  %28 = shl i32 1, %27
  %29 = sext i32 %28 to i64
  %30 = mul nsw i64 %29, %0
  %31 = mul nsw i64 %29, %1
  %32 = mul nsw i64 %29, %2
  %33 = mul nsw i64 %29, %3
  br label %41

34:                                               ; preds = %4
  %35 = add nsw i32 %22, -27
  %36 = zext i32 %35 to i64
  %37 = ashr i64 %0, %36
  %38 = ashr i64 %1, %36
  %39 = ashr i64 %2, %36
  %40 = ashr i64 %3, %36
  br label %41

41:                                               ; preds = %34, %25
  %42 = phi i64 [ %30, %25 ], [ %37, %34 ]
  %43 = phi i64 [ %31, %25 ], [ %38, %34 ]
  %44 = phi i64 [ %32, %25 ], [ %39, %34 ]
  %45 = phi i64 [ %33, %25 ], [ %40, %34 ]
  %46 = phi i32 [ %27, %25 ], [ %23, %34 ]
  br label %47

47:                                               ; preds = %82, %41
  %48 = phi i64 [ %42, %41 ], [ %75, %82 ]
  %49 = phi i64 [ %43, %41 ], [ %76, %82 ]
  %50 = phi i64 [ %44, %41 ], [ %77, %82 ]
  %51 = phi i64 [ %45, %41 ], [ %78, %82 ]
  %52 = icmp sgt i64 %49, 0
  %53 = icmp sgt i64 %50, 0
  %54 = or i1 %52, %53
  br i1 %54, label %55, label %86

55:                                               ; preds = %47
  %56 = add nsw i64 %49, %48
  %57 = add nsw i64 %51, %50
  %58 = icmp sgt i64 %56, %57
  %59 = add nsw i64 %50, %49
  br i1 %58, label %60, label %67

60:                                               ; preds = %55
  %61 = add nsw i64 %57, %59
  %62 = add nsw i64 %59, %56
  %63 = add nsw i64 %61, %62
  %64 = ashr i64 %63, 3
  %65 = ashr i64 %62, 2
  %66 = ashr i64 %56, 1
  br label %74

67:                                               ; preds = %55
  %68 = add nsw i64 %59, %56
  %69 = add nsw i64 %57, %59
  %70 = add nsw i64 %68, %69
  %71 = ashr i64 %70, 3
  %72 = ashr i64 %69, 2
  %73 = ashr i64 %57, 1
  br label %74

74:                                               ; preds = %67, %60
  %75 = phi i64 [ %48, %60 ], [ %71, %67 ]
  %76 = phi i64 [ %66, %60 ], [ %72, %67 ]
  %77 = phi i64 [ %65, %60 ], [ %73, %67 ]
  %78 = phi i64 [ %64, %60 ], [ %51, %67 ]
  %79 = icmp ne i64 %75, %76
  %80 = icmp slt i64 %75, %77
  %81 = or i1 %79, %80
  br i1 %81, label %82, label %86

82:                                               ; preds = %74
  %83 = icmp ne i64 %77, %78
  %84 = icmp sgt i64 %76, %78
  %85 = or i1 %83, %84
  br i1 %85, label %47, label %86

86:                                               ; preds = %82, %74, %47
  %87 = phi i64 [ 0, %47 ], [ %75, %74 ], [ %77, %82 ]
  %88 = icmp sgt i32 %46, 0
  %89 = zext i32 %46 to i64
  %90 = ashr i64 %87, %89
  %91 = sub nsw i32 0, %46
  %92 = zext i32 %91 to i64
  %93 = shl i64 %87, %92
  %94 = select i1 %88, i64 %90, i64 %93
  ret i64 %94
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
