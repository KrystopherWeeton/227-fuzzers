; ModuleID = '../../extensions/common/features/complex_feature.cc'
source_filename = "../../extensions/common/features/complex_feature.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.extensions::ComplexFeature" = type { %"class.extensions::Feature.base", %"class.std::__1::vector" }
%"class.extensions::Feature.base" = type <{ i32 (...)**, %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8 }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.extensions::Feature"* }
%"class.extensions::Feature" = type <{ i32 (...)**, %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.9" = type { %"class.std::__1::__vector_base.10" }
%"class.std::__1::__vector_base.10" = type { %"class.extensions::Feature"**, %"class.extensions::Feature"**, %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.extensions::Feature"** }
%"class.extensions::Feature::Availability" = type { i32, %"class.std::__1::basic_string" }
%"class.extensions::HashedExtensionId" = type { %"class.std::__1::basic_string" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.extensions::Extension" = type { %"class.base::RefCountedThreadSafe", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, %"class.base::FilePath", %"class.extensions::URLPatternSet", %"class.std::__1::unique_ptr.26", %"class.std::__1::unique_ptr.32", %"class.std::__1::vector.38", %class.GURL, %"class.base::Version", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, %"class.std::__1::basic_string", %"class.std::__1::unique_ptr.58", %"class.std::__1::map", i8, %"class.base::ThreadChecker", i8, i8, i8, i32, %"class.base::GUID" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.17" }
%"struct.std::__1::__atomic_base.17" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::FilePath" = type { %"class.std::__1::basic_string" }
%"class.extensions::URLPatternSet" = type { %"class.std::__1::set" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.18", %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { i64 }
%"class.std::__1::unique_ptr.26" = type { %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"class.extensions::PermissionsParser"* }
%"class.extensions::PermissionsParser" = type opaque
%"class.std::__1::unique_ptr.32" = type { %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"class.extensions::PermissionsData"* }
%"class.extensions::PermissionsData" = type opaque
%"class.std::__1::vector.38" = type { %"class.std::__1::__vector_base.39" }
%"class.std::__1::__vector_base.39" = type { %"struct.extensions::InstallWarning"*, %"struct.extensions::InstallWarning"*, %"class.std::__1::__compressed_pair.40" }
%"struct.extensions::InstallWarning" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"struct.extensions::InstallWarning"* }
%class.GURL = type { %"class.std::__1::basic_string", i8, %"struct.url::Parsed", %"class.std::__1::unique_ptr.45" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr.45" = type { %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %class.GURL* }
%"class.base::Version" = type { %"class.std::__1::vector.51" }
%"class.std::__1::vector.51" = type { %"class.std::__1::__vector_base.52" }
%"class.std::__1::__vector_base.52" = type { i32*, i32*, %"class.std::__1::__compressed_pair.53" }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { i32* }
%"class.std::__1::unique_ptr.58" = type { %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %"class.extensions::Manifest"* }
%"class.extensions::Manifest" = type { %"class.std::__1::basic_string", %"class.extensions::HashedExtensionId", i32, %"class.std::__1::unique_ptr.61", %"class.std::__1::unique_ptr.61", i32, i32 }
%"class.std::__1::unique_ptr.61" = type { %"class.std::__1::__compressed_pair.62" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"class.base::DictionaryValue"* }
%"class.base::DictionaryValue" = type { %"class.base::Value" }
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.64" }
%"union.absl::variant_internal::DestructibleUnionImpl.64" = type { %"union.absl::variant_internal::DestructibleUnionImpl.65" }
%"union.absl::variant_internal::DestructibleUnionImpl.65" = type { %"union.absl::variant_internal::DestructibleUnionImpl.66" }
%"union.absl::variant_internal::DestructibleUnionImpl.66" = type { %"union.absl::variant_internal::DestructibleUnionImpl.67" }
%"union.absl::variant_internal::DestructibleUnionImpl.67" = type { %"class.std::__1::basic_string" }
%"class.std::__1::map" = type { %"class.std::__1::__tree.99" }
%"class.std::__1::__tree.99" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.100", %"class.std::__1::__compressed_pair.104" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"class.base::ThreadChecker" = type { i8 }
%"class.base::GUID" = type { %"class.std::__1::basic_string" }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorINS_10unique_ptrIN10extensions7FeatureENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE21__push_back_slow_pathIS6_EEvOT_ = comdat any

@_ZTVN10extensions14ComplexFeatureE = hidden unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.extensions::ComplexFeature"*)* @_ZN10extensions14ComplexFeatureD2Ev to i8*), i8* bitcast (void (%"class.extensions::ComplexFeature"*)* @_ZN10extensions14ComplexFeatureD0Ev to i8*), i8* bitcast (i1 (%"class.extensions::ComplexFeature"*)* @_ZNK10extensions14ComplexFeature10IsInternalEv to i8*), i8* bitcast (void (%"class.extensions::Feature::Availability"*, %"class.extensions::ComplexFeature"*, %"class.extensions::HashedExtensionId"*, i32, i32, i32, i32)* @_ZNK10extensions14ComplexFeature21IsAvailableToManifestERKNS_17HashedExtensionIdENS_8Manifest4TypeENS_5mojom16ManifestLocationEiNS_7Feature8PlatformE to i8*), i8* bitcast (void (%"class.extensions::Feature::Availability"*, %"class.extensions::ComplexFeature"*, %"class.extensions::Extension"*, i32, %class.GURL*, i32)* @_ZNK10extensions14ComplexFeature20IsAvailableToContextEPKNS_9ExtensionENS_7Feature7ContextERK4GURLNS4_8PlatformE to i8*), i8* bitcast (void (%"class.extensions::Feature::Availability"*, %"class.extensions::ComplexFeature"*)* @_ZNK10extensions14ComplexFeature24IsAvailableToEnvironmentEv to i8*), i8* bitcast (i1 (%"class.extensions::ComplexFeature"*, %"class.extensions::HashedExtensionId"*)* @_ZNK10extensions14ComplexFeature15IsIdInBlocklistERKNS_17HashedExtensionIdE to i8*), i8* bitcast (i1 (%"class.extensions::ComplexFeature"*, %"class.extensions::HashedExtensionId"*)* @_ZNK10extensions14ComplexFeature15IsIdInAllowlistERKNS_17HashedExtensionIdE to i8*)] }, align 8

@_ZN10extensions14ComplexFeatureC1EPNSt3__16vectorIPNS_7FeatureENS1_9allocatorIS4_EEEE = hidden unnamed_addr alias void (%"class.extensions::ComplexFeature"*, %"class.std::__1::vector.9"*), void (%"class.extensions::ComplexFeature"*, %"class.std::__1::vector.9"*)* @_ZN10extensions14ComplexFeatureC2EPNSt3__16vectorIPNS_7FeatureENS1_9allocatorIS4_EEEE
@_ZN10extensions14ComplexFeatureD1Ev = hidden unnamed_addr alias void (%"class.extensions::ComplexFeature"*), void (%"class.extensions::ComplexFeature"*)* @_ZN10extensions14ComplexFeatureD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions14ComplexFeatureC2EPNSt3__16vectorIPNS_7FeatureENS1_9allocatorIS4_EEEE(%"class.extensions::ComplexFeature"*, %"class.std::__1::vector.9"* nocapture) unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::unique_ptr", align 8
  %4 = bitcast %"class.extensions::ComplexFeature"* %0 to %"class.extensions::Feature"*
  tail call void @_ZN10extensions7FeatureC2Ev(%"class.extensions::Feature"* %4) #9
  %5 = getelementptr inbounds %"class.extensions::ComplexFeature", %"class.extensions::ComplexFeature"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN10extensions14ComplexFeatureE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.extensions::ComplexFeature", %"class.extensions::ComplexFeature"* %0, i64 0, i32 1
  %7 = bitcast %"class.std::__1::vector"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false) #9
  %8 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %1, i64 0, i32 0, i32 0
  %9 = load %"class.extensions::Feature"**, %"class.extensions::Feature"*** %8, align 8
  %10 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %1, i64 0, i32 0, i32 1
  %11 = load %"class.extensions::Feature"**, %"class.extensions::Feature"*** %10, align 8
  %12 = icmp eq %"class.extensions::Feature"** %9, %11
  br i1 %12, label %13, label %15

13:                                               ; preds = %2
  %14 = ptrtoint %"class.extensions::Feature"** %9 to i64
  br label %25

15:                                               ; preds = %2
  %16 = bitcast %"class.std::__1::unique_ptr"* %3 to i8*
  %17 = bitcast %"class.std::__1::unique_ptr"* %3 to i64*
  %18 = getelementptr inbounds %"class.extensions::ComplexFeature", %"class.extensions::ComplexFeature"* %0, i64 0, i32 1, i32 0, i32 1
  %19 = getelementptr inbounds %"class.extensions::ComplexFeature", %"class.extensions::ComplexFeature"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %20 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %3, i64 0, i32 0, i32 0, i32 0
  %21 = bitcast %"class.std::__1::unique_ptr"** %18 to i64*
  br label %35

22:                                               ; preds = %55
  %23 = bitcast %"class.std::__1::vector.9"* %1 to i64*
  %24 = load i64, i64* %23, align 8
  br label %25

25:                                               ; preds = %13, %22
  %26 = phi i64 [ %24, %22 ], [ %14, %13 ]
  %27 = bitcast %"class.extensions::Feature"*** %10 to i64*
  store i64 %26, i64* %27, align 8
  %28 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %29 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %28, align 8
  %30 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %29, i64 0, i32 0, i32 0, i32 0
  %31 = load %"class.extensions::Feature"*, %"class.extensions::Feature"** %30, align 8
  %32 = getelementptr inbounds %"class.extensions::Feature", %"class.extensions::Feature"* %31, i64 0, i32 4
  %33 = load i8, i8* %32, align 8, !range !2
  %34 = getelementptr inbounds %"class.extensions::ComplexFeature", %"class.extensions::ComplexFeature"* %0, i64 0, i32 0, i32 4
  store i8 %33, i8* %34, align 8
  ret void

35:                                               ; preds = %58, %15
  %36 = phi %"class.std::__1::unique_ptr"* [ null, %15 ], [ %60, %58 ]
  %37 = phi %"class.std::__1::unique_ptr"* [ null, %15 ], [ %59, %58 ]
  %38 = phi %"class.extensions::Feature"** [ %9, %15 ], [ %56, %58 ]
  %39 = bitcast %"class.extensions::Feature"** %38 to i64*
  %40 = load i64, i64* %39, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #9
  store i64 %40, i64* %17, align 8
  %41 = icmp ult %"class.std::__1::unique_ptr"* %37, %36
  br i1 %41, label %42, label %46

42:                                               ; preds = %35
  store %"class.extensions::Feature"* null, %"class.extensions::Feature"** %20, align 8
  %43 = bitcast %"class.std::__1::unique_ptr"* %37 to i64*
  store i64 %40, i64* %43, align 8
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %37, i64 1
  %45 = ptrtoint %"class.std::__1::unique_ptr"* %44 to i64
  store i64 %45, i64* %21, align 8
  br label %47

46:                                               ; preds = %35
  call void @_ZNSt3__16vectorINS_10unique_ptrIN10extensions7FeatureENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE21__push_back_slow_pathIS6_EEvOT_(%"class.std::__1::vector"* %6, %"class.std::__1::unique_ptr"* nonnull dereferenceable(8) %3) #9
  br label %47

47:                                               ; preds = %42, %46
  %48 = load %"class.extensions::Feature"*, %"class.extensions::Feature"** %20, align 8
  store %"class.extensions::Feature"* null, %"class.extensions::Feature"** %20, align 8
  %49 = icmp eq %"class.extensions::Feature"* %48, null
  br i1 %49, label %55, label %50

50:                                               ; preds = %47
  %51 = bitcast %"class.extensions::Feature"* %48 to void (%"class.extensions::Feature"*)***
  %52 = load void (%"class.extensions::Feature"*)**, void (%"class.extensions::Feature"*)*** %51, align 8
  %53 = getelementptr inbounds void (%"class.extensions::Feature"*)*, void (%"class.extensions::Feature"*)** %52, i64 1
  %54 = load void (%"class.extensions::Feature"*)*, void (%"class.extensions::Feature"*)** %53, align 8
  call void %54(%"class.extensions::Feature"* nonnull %48) #9
  br label %55

55:                                               ; preds = %47, %50
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #9
  %56 = getelementptr inbounds %"class.extensions::Feature"*, %"class.extensions::Feature"** %38, i64 1
  %57 = icmp eq %"class.extensions::Feature"** %56, %11
  br i1 %57, label %22, label %58

58:                                               ; preds = %55
  %59 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %18, align 8
  %60 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %19, align 8
  br label %35
}

declare void @_ZN10extensions7FeatureC2Ev(%"class.extensions::Feature"*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions14ComplexFeatureD2Ev(%"class.extensions::ComplexFeature"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.extensions::ComplexFeature", %"class.extensions::ComplexFeature"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN10extensions14ComplexFeatureE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.extensions::ComplexFeature", %"class.extensions::ComplexFeature"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %4, align 8
  %6 = icmp eq %"class.std::__1::unique_ptr"* %5, null
  br i1 %6, label %30, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.std::__1::unique_ptr"* %5 to i8*
  %9 = getelementptr inbounds %"class.extensions::ComplexFeature", %"class.extensions::ComplexFeature"* %0, i64 0, i32 1, i32 0, i32 1
  %10 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %9, align 8
  %11 = icmp eq %"class.std::__1::unique_ptr"* %10, %5
  br i1 %11, label %28, label %12

12:                                               ; preds = %7, %23
  %13 = phi %"class.std::__1::unique_ptr"* [ %14, %23 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %13, i64 -1
  %15 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %14, i64 0, i32 0, i32 0, i32 0
  %16 = load %"class.extensions::Feature"*, %"class.extensions::Feature"** %15, align 8
  store %"class.extensions::Feature"* null, %"class.extensions::Feature"** %15, align 8
  %17 = icmp eq %"class.extensions::Feature"* %16, null
  br i1 %17, label %23, label %18

18:                                               ; preds = %12
  %19 = bitcast %"class.extensions::Feature"* %16 to void (%"class.extensions::Feature"*)***
  %20 = load void (%"class.extensions::Feature"*)**, void (%"class.extensions::Feature"*)*** %19, align 8
  %21 = getelementptr inbounds void (%"class.extensions::Feature"*)*, void (%"class.extensions::Feature"*)** %20, i64 1
  %22 = load void (%"class.extensions::Feature"*)*, void (%"class.extensions::Feature"*)** %21, align 8
  tail call void %22(%"class.extensions::Feature"* nonnull %16) #9
  br label %23

23:                                               ; preds = %18, %12
  %24 = icmp eq %"class.std::__1::unique_ptr"* %14, %5
  br i1 %24, label %25, label %12

25:                                               ; preds = %23
  %26 = bitcast %"class.std::__1::vector"* %3 to i8**
  %27 = load i8*, i8** %26, align 8
  br label %28

28:                                               ; preds = %25, %7
  %29 = phi i8* [ %27, %25 ], [ %8, %7 ]
  store %"class.std::__1::unique_ptr"* %5, %"class.std::__1::unique_ptr"** %9, align 8
  tail call void @_ZdlPv(i8* %29) #10
  br label %30

30:                                               ; preds = %1, %28
  %31 = bitcast %"class.extensions::ComplexFeature"* %0 to %"class.extensions::Feature"*
  tail call void @_ZN10extensions7FeatureD2Ev(%"class.extensions::Feature"* %31) #9
  ret void
}

; Function Attrs: nounwind
declare void @_ZN10extensions7FeatureD2Ev(%"class.extensions::Feature"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions14ComplexFeatureD0Ev(%"class.extensions::ComplexFeature"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.extensions::ComplexFeature", %"class.extensions::ComplexFeature"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN10extensions14ComplexFeatureE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.extensions::ComplexFeature", %"class.extensions::ComplexFeature"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %4, align 8
  %6 = icmp eq %"class.std::__1::unique_ptr"* %5, null
  br i1 %6, label %30, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.std::__1::unique_ptr"* %5 to i8*
  %9 = getelementptr inbounds %"class.extensions::ComplexFeature", %"class.extensions::ComplexFeature"* %0, i64 0, i32 1, i32 0, i32 1
  %10 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %9, align 8
  %11 = icmp eq %"class.std::__1::unique_ptr"* %10, %5
  br i1 %11, label %28, label %12

12:                                               ; preds = %7, %23
  %13 = phi %"class.std::__1::unique_ptr"* [ %14, %23 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %13, i64 -1
  %15 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %14, i64 0, i32 0, i32 0, i32 0
  %16 = load %"class.extensions::Feature"*, %"class.extensions::Feature"** %15, align 8
  store %"class.extensions::Feature"* null, %"class.extensions::Feature"** %15, align 8
  %17 = icmp eq %"class.extensions::Feature"* %16, null
  br i1 %17, label %23, label %18

18:                                               ; preds = %12
  %19 = bitcast %"class.extensions::Feature"* %16 to void (%"class.extensions::Feature"*)***
  %20 = load void (%"class.extensions::Feature"*)**, void (%"class.extensions::Feature"*)*** %19, align 8
  %21 = getelementptr inbounds void (%"class.extensions::Feature"*)*, void (%"class.extensions::Feature"*)** %20, i64 1
  %22 = load void (%"class.extensions::Feature"*)*, void (%"class.extensions::Feature"*)** %21, align 8
  tail call void %22(%"class.extensions::Feature"* nonnull %16) #9
  br label %23

23:                                               ; preds = %18, %12
  %24 = icmp eq %"class.std::__1::unique_ptr"* %14, %5
  br i1 %24, label %25, label %12

25:                                               ; preds = %23
  %26 = bitcast %"class.std::__1::vector"* %3 to i8**
  %27 = load i8*, i8** %26, align 8
  br label %28

28:                                               ; preds = %25, %7
  %29 = phi i8* [ %27, %25 ], [ %8, %7 ]
  store %"class.std::__1::unique_ptr"* %5, %"class.std::__1::unique_ptr"** %9, align 8
  tail call void @_ZdlPv(i8* %29) #10
  br label %30

30:                                               ; preds = %1, %28
  %31 = bitcast %"class.extensions::ComplexFeature"* %0 to %"class.extensions::Feature"*
  tail call void @_ZN10extensions7FeatureD2Ev(%"class.extensions::Feature"* %31) #9
  %32 = bitcast %"class.extensions::ComplexFeature"* %0 to i8*
  tail call void @_ZdlPv(i8* %32) #10
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK10extensions14ComplexFeature21IsAvailableToManifestERKNS_17HashedExtensionIdENS_8Manifest4TypeENS_5mojom16ManifestLocationEiNS_7Feature8PlatformE(%"class.extensions::Feature::Availability"* noalias sret, %"class.extensions::ComplexFeature"* nocapture readonly, %"class.extensions::HashedExtensionId"* dereferenceable(24), i32, i32, i32, i32) unnamed_addr #0 align 2 {
  %8 = alloca %"class.extensions::Feature::Availability", align 8
  %9 = bitcast %"class.extensions::Feature::Availability"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 32, i1 false)
  %10 = getelementptr inbounds %"class.extensions::ComplexFeature", %"class.extensions::ComplexFeature"* %1, i64 0, i32 1, i32 0, i32 0
  %11 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %10, align 8
  %12 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %11, i64 0, i32 0, i32 0, i32 0
  %13 = load %"class.extensions::Feature"*, %"class.extensions::Feature"** %12, align 8
  %14 = bitcast %"class.extensions::Feature"* %13 to void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*, %"class.extensions::HashedExtensionId"*, i32, i32, i32, i32)***
  %15 = load void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*, %"class.extensions::HashedExtensionId"*, i32, i32, i32, i32)**, void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*, %"class.extensions::HashedExtensionId"*, i32, i32, i32, i32)*** %14, align 8
  %16 = getelementptr inbounds void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*, %"class.extensions::HashedExtensionId"*, i32, i32, i32, i32)*, void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*, %"class.extensions::HashedExtensionId"*, i32, i32, i32, i32)** %15, i64 3
  %17 = load void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*, %"class.extensions::HashedExtensionId"*, i32, i32, i32, i32)*, void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*, %"class.extensions::HashedExtensionId"*, i32, i32, i32, i32)** %16, align 8
  call void %17(%"class.extensions::Feature::Availability"* nonnull sret %8, %"class.extensions::Feature"* %13, %"class.extensions::HashedExtensionId"* dereferenceable(24) %2, i32 %3, i32 %4, i32 %5, i32 %6) #9
  %18 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %8, i64 0, i32 0
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %37

21:                                               ; preds = %7
  %22 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %0, i64 0, i32 0
  store i32 0, i32* %22, align 8
  %23 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %0, i64 0, i32 1
  %24 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %8, i64 0, i32 1
  %25 = bitcast %"class.std::__1::basic_string"* %24 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %26 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %25, i64 0, i32 1, i32 0
  %27 = load i8, i8* %26, align 1
  %28 = icmp slt i8 %27, 0
  br i1 %28, label %32, label %29

29:                                               ; preds = %21
  %30 = bitcast %"class.std::__1::basic_string"* %23 to i8*
  %31 = bitcast %"class.std::__1::basic_string"* %24 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 %31, i64 24, i1 false) #9
  br label %83

32:                                               ; preds = %21
  %33 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %24, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %8, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %36 = load i64, i64* %35, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %23, i8* %34, i64 %36) #9
  br label %83

37:                                               ; preds = %7
  %38 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %10, align 8
  %39 = getelementptr inbounds %"class.extensions::ComplexFeature", %"class.extensions::ComplexFeature"* %1, i64 0, i32 1, i32 0, i32 1
  %40 = bitcast %"class.extensions::Feature::Availability"* %0 to i8*
  %41 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %0, i64 0, i32 0
  %42 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %0, i64 0, i32 1
  %43 = bitcast %"class.std::__1::basic_string"* %42 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %44 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %43, i64 0, i32 1, i32 0
  %45 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %42, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %38, i64 1
  %47 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %39, align 8
  %48 = icmp eq %"class.std::__1::unique_ptr"* %46, %47
  br i1 %48, label %68, label %49

49:                                               ; preds = %37, %64
  %50 = phi %"class.std::__1::unique_ptr"* [ %65, %64 ], [ %46, %37 ]
  call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 -86, i64 32, i1 false)
  %51 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %50, i64 0, i32 0, i32 0, i32 0
  %52 = load %"class.extensions::Feature"*, %"class.extensions::Feature"** %51, align 8
  %53 = bitcast %"class.extensions::Feature"* %52 to void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*, %"class.extensions::HashedExtensionId"*, i32, i32, i32, i32)***
  %54 = load void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*, %"class.extensions::HashedExtensionId"*, i32, i32, i32, i32)**, void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*, %"class.extensions::HashedExtensionId"*, i32, i32, i32, i32)*** %53, align 8
  %55 = getelementptr inbounds void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*, %"class.extensions::HashedExtensionId"*, i32, i32, i32, i32)*, void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*, %"class.extensions::HashedExtensionId"*, i32, i32, i32, i32)** %54, i64 3
  %56 = load void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*, %"class.extensions::HashedExtensionId"*, i32, i32, i32, i32)*, void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*, %"class.extensions::HashedExtensionId"*, i32, i32, i32, i32)** %55, align 8
  call void %56(%"class.extensions::Feature::Availability"* sret %0, %"class.extensions::Feature"* %52, %"class.extensions::HashedExtensionId"* dereferenceable(24) %2, i32 %3, i32 %4, i32 %5, i32 %6) #9
  %57 = load i32, i32* %41, align 8
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %83, label %59

59:                                               ; preds = %49
  %60 = load i8, i8* %44, align 1
  %61 = icmp slt i8 %60, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %59
  %63 = load i8*, i8** %45, align 8
  call void @_ZdlPv(i8* %63) #10
  br label %64

64:                                               ; preds = %62, %59
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %50, i64 1
  %66 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %39, align 8
  %67 = icmp eq %"class.std::__1::unique_ptr"* %65, %66
  br i1 %67, label %68, label %49

68:                                               ; preds = %64, %37
  %69 = load i32, i32* %18, align 8
  store i32 %69, i32* %41, align 8
  %70 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %8, i64 0, i32 1
  %71 = bitcast %"class.std::__1::basic_string"* %70 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %72 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %71, i64 0, i32 1, i32 0
  %73 = load i8, i8* %72, align 1
  %74 = icmp slt i8 %73, 0
  br i1 %74, label %78, label %75

75:                                               ; preds = %68
  %76 = bitcast %"class.std::__1::basic_string"* %42 to i8*
  %77 = bitcast %"class.std::__1::basic_string"* %70 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %77, i64 24, i1 false) #9
  br label %83

78:                                               ; preds = %68
  %79 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %70, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %80 = load i8*, i8** %79, align 8
  %81 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %8, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %82 = load i64, i64* %81, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %42, i8* %80, i64 %82) #9
  br label %83

83:                                               ; preds = %49, %78, %75, %32, %29
  %84 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %8, i64 0, i32 1
  %85 = bitcast %"class.std::__1::basic_string"* %84 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %86 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %85, i64 0, i32 1, i32 0
  %87 = load i8, i8* %86, align 1
  %88 = icmp slt i8 %87, 0
  br i1 %88, label %89, label %92

89:                                               ; preds = %83
  %90 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %84, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %91 = load i8*, i8** %90, align 8
  call void @_ZdlPv(i8* %91) #10
  br label %92

92:                                               ; preds = %83, %89
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK10extensions14ComplexFeature20IsAvailableToContextEPKNS_9ExtensionENS_7Feature7ContextERK4GURLNS4_8PlatformE(%"class.extensions::Feature::Availability"* noalias sret, %"class.extensions::ComplexFeature"* nocapture readonly, %"class.extensions::Extension"*, i32, %class.GURL* dereferenceable(120), i32) unnamed_addr #0 align 2 {
  %7 = alloca %"class.extensions::Feature::Availability", align 8
  %8 = bitcast %"class.extensions::Feature::Availability"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 32, i1 false)
  %9 = getelementptr inbounds %"class.extensions::ComplexFeature", %"class.extensions::ComplexFeature"* %1, i64 0, i32 1, i32 0, i32 0
  %10 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %10, i64 0, i32 0, i32 0, i32 0
  %12 = load %"class.extensions::Feature"*, %"class.extensions::Feature"** %11, align 8
  %13 = bitcast %"class.extensions::Feature"* %12 to void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*, %"class.extensions::Extension"*, i32, %class.GURL*, i32)***
  %14 = load void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*, %"class.extensions::Extension"*, i32, %class.GURL*, i32)**, void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*, %"class.extensions::Extension"*, i32, %class.GURL*, i32)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*, %"class.extensions::Extension"*, i32, %class.GURL*, i32)*, void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*, %"class.extensions::Extension"*, i32, %class.GURL*, i32)** %14, i64 4
  %16 = load void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*, %"class.extensions::Extension"*, i32, %class.GURL*, i32)*, void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*, %"class.extensions::Extension"*, i32, %class.GURL*, i32)** %15, align 8
  call void %16(%"class.extensions::Feature::Availability"* nonnull sret %7, %"class.extensions::Feature"* %12, %"class.extensions::Extension"* %2, i32 %3, %class.GURL* dereferenceable(120) %4, i32 %5) #9
  %17 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %7, i64 0, i32 0
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %36

20:                                               ; preds = %6
  %21 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %0, i64 0, i32 0
  store i32 0, i32* %21, align 8
  %22 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %0, i64 0, i32 1
  %23 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %7, i64 0, i32 1
  %24 = bitcast %"class.std::__1::basic_string"* %23 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %25 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %24, i64 0, i32 1, i32 0
  %26 = load i8, i8* %25, align 1
  %27 = icmp slt i8 %26, 0
  br i1 %27, label %31, label %28

28:                                               ; preds = %20
  %29 = bitcast %"class.std::__1::basic_string"* %22 to i8*
  %30 = bitcast %"class.std::__1::basic_string"* %23 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 24, i1 false) #9
  br label %82

31:                                               ; preds = %20
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %7, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %35 = load i64, i64* %34, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %22, i8* %33, i64 %35) #9
  br label %82

36:                                               ; preds = %6
  %37 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %9, align 8
  %38 = getelementptr inbounds %"class.extensions::ComplexFeature", %"class.extensions::ComplexFeature"* %1, i64 0, i32 1, i32 0, i32 1
  %39 = bitcast %"class.extensions::Feature::Availability"* %0 to i8*
  %40 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %0, i64 0, i32 0
  %41 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %0, i64 0, i32 1
  %42 = bitcast %"class.std::__1::basic_string"* %41 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %43 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %42, i64 0, i32 1, i32 0
  %44 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %41, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %37, i64 1
  %46 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %38, align 8
  %47 = icmp eq %"class.std::__1::unique_ptr"* %45, %46
  br i1 %47, label %67, label %48

48:                                               ; preds = %36, %63
  %49 = phi %"class.std::__1::unique_ptr"* [ %64, %63 ], [ %45, %36 ]
  call void @llvm.memset.p0i8.i64(i8* align 8 %39, i8 -86, i64 32, i1 false)
  %50 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %49, i64 0, i32 0, i32 0, i32 0
  %51 = load %"class.extensions::Feature"*, %"class.extensions::Feature"** %50, align 8
  %52 = bitcast %"class.extensions::Feature"* %51 to void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*, %"class.extensions::Extension"*, i32, %class.GURL*, i32)***
  %53 = load void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*, %"class.extensions::Extension"*, i32, %class.GURL*, i32)**, void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*, %"class.extensions::Extension"*, i32, %class.GURL*, i32)*** %52, align 8
  %54 = getelementptr inbounds void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*, %"class.extensions::Extension"*, i32, %class.GURL*, i32)*, void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*, %"class.extensions::Extension"*, i32, %class.GURL*, i32)** %53, i64 4
  %55 = load void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*, %"class.extensions::Extension"*, i32, %class.GURL*, i32)*, void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*, %"class.extensions::Extension"*, i32, %class.GURL*, i32)** %54, align 8
  call void %55(%"class.extensions::Feature::Availability"* sret %0, %"class.extensions::Feature"* %51, %"class.extensions::Extension"* %2, i32 %3, %class.GURL* dereferenceable(120) %4, i32 %5) #9
  %56 = load i32, i32* %40, align 8
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %82, label %58

58:                                               ; preds = %48
  %59 = load i8, i8* %43, align 1
  %60 = icmp slt i8 %59, 0
  br i1 %60, label %61, label %63

61:                                               ; preds = %58
  %62 = load i8*, i8** %44, align 8
  call void @_ZdlPv(i8* %62) #10
  br label %63

63:                                               ; preds = %61, %58
  %64 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %49, i64 1
  %65 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %38, align 8
  %66 = icmp eq %"class.std::__1::unique_ptr"* %64, %65
  br i1 %66, label %67, label %48

67:                                               ; preds = %63, %36
  %68 = load i32, i32* %17, align 8
  store i32 %68, i32* %40, align 8
  %69 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %7, i64 0, i32 1
  %70 = bitcast %"class.std::__1::basic_string"* %69 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %71 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %70, i64 0, i32 1, i32 0
  %72 = load i8, i8* %71, align 1
  %73 = icmp slt i8 %72, 0
  br i1 %73, label %77, label %74

74:                                               ; preds = %67
  %75 = bitcast %"class.std::__1::basic_string"* %41 to i8*
  %76 = bitcast %"class.std::__1::basic_string"* %69 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %75, i8* align 8 %76, i64 24, i1 false) #9
  br label %82

77:                                               ; preds = %67
  %78 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %69, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %79 = load i8*, i8** %78, align 8
  %80 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %7, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %81 = load i64, i64* %80, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %41, i8* %79, i64 %81) #9
  br label %82

82:                                               ; preds = %48, %77, %74, %31, %28
  %83 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %7, i64 0, i32 1
  %84 = bitcast %"class.std::__1::basic_string"* %83 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %85 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %84, i64 0, i32 1, i32 0
  %86 = load i8, i8* %85, align 1
  %87 = icmp slt i8 %86, 0
  br i1 %87, label %88, label %91

88:                                               ; preds = %82
  %89 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %83, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %90 = load i8*, i8** %89, align 8
  call void @_ZdlPv(i8* %90) #10
  br label %91

91:                                               ; preds = %82, %88
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK10extensions14ComplexFeature24IsAvailableToEnvironmentEv(%"class.extensions::Feature::Availability"* noalias sret, %"class.extensions::ComplexFeature"* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = alloca %"class.extensions::Feature::Availability", align 8
  %4 = bitcast %"class.extensions::Feature::Availability"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 32, i1 false)
  %5 = getelementptr inbounds %"class.extensions::ComplexFeature", %"class.extensions::ComplexFeature"* %1, i64 0, i32 1, i32 0, i32 0
  %6 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %6, i64 0, i32 0, i32 0, i32 0
  %8 = load %"class.extensions::Feature"*, %"class.extensions::Feature"** %7, align 8
  %9 = bitcast %"class.extensions::Feature"* %8 to void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*)***
  %10 = load void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*)**, void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*)*** %9, align 8
  %11 = getelementptr inbounds void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*)*, void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*)** %10, i64 5
  %12 = load void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*)*, void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*)** %11, align 8
  call void %12(%"class.extensions::Feature::Availability"* nonnull sret %3, %"class.extensions::Feature"* %8) #9
  %13 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %3, i64 0, i32 0
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %32

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %0, i64 0, i32 0
  store i32 0, i32* %17, align 8
  %18 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %0, i64 0, i32 1
  %19 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %3, i64 0, i32 1
  %20 = bitcast %"class.std::__1::basic_string"* %19 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %21 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %20, i64 0, i32 1, i32 0
  %22 = load i8, i8* %21, align 1
  %23 = icmp slt i8 %22, 0
  br i1 %23, label %27, label %24

24:                                               ; preds = %16
  %25 = bitcast %"class.std::__1::basic_string"* %18 to i8*
  %26 = bitcast %"class.std::__1::basic_string"* %19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 24, i1 false) #9
  br label %78

27:                                               ; preds = %16
  %28 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  %30 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %3, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %31 = load i64, i64* %30, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %18, i8* %29, i64 %31) #9
  br label %78

32:                                               ; preds = %2
  %33 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %5, align 8
  %34 = getelementptr inbounds %"class.extensions::ComplexFeature", %"class.extensions::ComplexFeature"* %1, i64 0, i32 1, i32 0, i32 1
  %35 = bitcast %"class.extensions::Feature::Availability"* %0 to i8*
  %36 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %0, i64 0, i32 0
  %37 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %0, i64 0, i32 1
  %38 = bitcast %"class.std::__1::basic_string"* %37 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %39 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %38, i64 0, i32 1, i32 0
  %40 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %37, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %33, i64 1
  %42 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %34, align 8
  %43 = icmp eq %"class.std::__1::unique_ptr"* %41, %42
  br i1 %43, label %63, label %44

44:                                               ; preds = %32, %59
  %45 = phi %"class.std::__1::unique_ptr"* [ %60, %59 ], [ %41, %32 ]
  call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 -86, i64 32, i1 false)
  %46 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %45, i64 0, i32 0, i32 0, i32 0
  %47 = load %"class.extensions::Feature"*, %"class.extensions::Feature"** %46, align 8
  %48 = bitcast %"class.extensions::Feature"* %47 to void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*)***
  %49 = load void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*)**, void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*)*** %48, align 8
  %50 = getelementptr inbounds void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*)*, void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*)** %49, i64 5
  %51 = load void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*)*, void (%"class.extensions::Feature::Availability"*, %"class.extensions::Feature"*)** %50, align 8
  call void %51(%"class.extensions::Feature::Availability"* sret %0, %"class.extensions::Feature"* %47) #9
  %52 = load i32, i32* %36, align 8
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %78, label %54

54:                                               ; preds = %44
  %55 = load i8, i8* %39, align 1
  %56 = icmp slt i8 %55, 0
  br i1 %56, label %57, label %59

57:                                               ; preds = %54
  %58 = load i8*, i8** %40, align 8
  call void @_ZdlPv(i8* %58) #10
  br label %59

59:                                               ; preds = %57, %54
  %60 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %45, i64 1
  %61 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %34, align 8
  %62 = icmp eq %"class.std::__1::unique_ptr"* %60, %61
  br i1 %62, label %63, label %44

63:                                               ; preds = %59, %32
  %64 = load i32, i32* %13, align 8
  store i32 %64, i32* %36, align 8
  %65 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %3, i64 0, i32 1
  %66 = bitcast %"class.std::__1::basic_string"* %65 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %67 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %66, i64 0, i32 1, i32 0
  %68 = load i8, i8* %67, align 1
  %69 = icmp slt i8 %68, 0
  br i1 %69, label %73, label %70

70:                                               ; preds = %63
  %71 = bitcast %"class.std::__1::basic_string"* %37 to i8*
  %72 = bitcast %"class.std::__1::basic_string"* %65 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %71, i8* align 8 %72, i64 24, i1 false) #9
  br label %78

73:                                               ; preds = %63
  %74 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %65, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %75 = load i8*, i8** %74, align 8
  %76 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %3, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %77 = load i64, i64* %76, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %37, i8* %75, i64 %77) #9
  br label %78

78:                                               ; preds = %44, %73, %70, %27, %24
  %79 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %3, i64 0, i32 1
  %80 = bitcast %"class.std::__1::basic_string"* %79 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %81 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %80, i64 0, i32 1, i32 0
  %82 = load i8, i8* %81, align 1
  %83 = icmp slt i8 %82, 0
  br i1 %83, label %84, label %87

84:                                               ; preds = %78
  %85 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %79, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %86 = load i8*, i8** %85, align 8
  call void @_ZdlPv(i8* %86) #10
  br label %87

87:                                               ; preds = %78, %84
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK10extensions14ComplexFeature15IsIdInBlocklistERKNS_17HashedExtensionIdE(%"class.extensions::ComplexFeature"* nocapture readonly, %"class.extensions::HashedExtensionId"* dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.extensions::ComplexFeature", %"class.extensions::ComplexFeature"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %3, align 8
  %5 = getelementptr inbounds %"class.extensions::ComplexFeature", %"class.extensions::ComplexFeature"* %0, i64 0, i32 1, i32 0, i32 1
  %6 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %5, align 8
  %7 = icmp eq %"class.std::__1::unique_ptr"* %4, %6
  br i1 %7, label %21, label %11

8:                                                ; preds = %11
  %9 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %5, align 8
  %10 = icmp eq %"class.std::__1::unique_ptr"* %20, %9
  br i1 %10, label %21, label %11

11:                                               ; preds = %2, %8
  %12 = phi %"class.std::__1::unique_ptr"* [ %20, %8 ], [ %4, %2 ]
  %13 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %12, i64 0, i32 0, i32 0, i32 0
  %14 = load %"class.extensions::Feature"*, %"class.extensions::Feature"** %13, align 8
  %15 = bitcast %"class.extensions::Feature"* %14 to i1 (%"class.extensions::Feature"*, %"class.extensions::HashedExtensionId"*)***
  %16 = load i1 (%"class.extensions::Feature"*, %"class.extensions::HashedExtensionId"*)**, i1 (%"class.extensions::Feature"*, %"class.extensions::HashedExtensionId"*)*** %15, align 8
  %17 = getelementptr inbounds i1 (%"class.extensions::Feature"*, %"class.extensions::HashedExtensionId"*)*, i1 (%"class.extensions::Feature"*, %"class.extensions::HashedExtensionId"*)** %16, i64 6
  %18 = load i1 (%"class.extensions::Feature"*, %"class.extensions::HashedExtensionId"*)*, i1 (%"class.extensions::Feature"*, %"class.extensions::HashedExtensionId"*)** %17, align 8
  %19 = tail call zeroext i1 %18(%"class.extensions::Feature"* %14, %"class.extensions::HashedExtensionId"* dereferenceable(24) %1) #9
  %20 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %12, i64 1
  br i1 %19, label %21, label %8

21:                                               ; preds = %11, %8, %2
  %22 = phi i1 [ false, %2 ], [ false, %8 ], [ true, %11 ]
  ret i1 %22
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK10extensions14ComplexFeature15IsIdInAllowlistERKNS_17HashedExtensionIdE(%"class.extensions::ComplexFeature"* nocapture readonly, %"class.extensions::HashedExtensionId"* dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.extensions::ComplexFeature", %"class.extensions::ComplexFeature"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %3, align 8
  %5 = getelementptr inbounds %"class.extensions::ComplexFeature", %"class.extensions::ComplexFeature"* %0, i64 0, i32 1, i32 0, i32 1
  %6 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %5, align 8
  %7 = icmp eq %"class.std::__1::unique_ptr"* %4, %6
  br i1 %7, label %21, label %11

8:                                                ; preds = %11
  %9 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %5, align 8
  %10 = icmp eq %"class.std::__1::unique_ptr"* %20, %9
  br i1 %10, label %21, label %11

11:                                               ; preds = %2, %8
  %12 = phi %"class.std::__1::unique_ptr"* [ %20, %8 ], [ %4, %2 ]
  %13 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %12, i64 0, i32 0, i32 0, i32 0
  %14 = load %"class.extensions::Feature"*, %"class.extensions::Feature"** %13, align 8
  %15 = bitcast %"class.extensions::Feature"* %14 to i1 (%"class.extensions::Feature"*, %"class.extensions::HashedExtensionId"*)***
  %16 = load i1 (%"class.extensions::Feature"*, %"class.extensions::HashedExtensionId"*)**, i1 (%"class.extensions::Feature"*, %"class.extensions::HashedExtensionId"*)*** %15, align 8
  %17 = getelementptr inbounds i1 (%"class.extensions::Feature"*, %"class.extensions::HashedExtensionId"*)*, i1 (%"class.extensions::Feature"*, %"class.extensions::HashedExtensionId"*)** %16, i64 7
  %18 = load i1 (%"class.extensions::Feature"*, %"class.extensions::HashedExtensionId"*)*, i1 (%"class.extensions::Feature"*, %"class.extensions::HashedExtensionId"*)** %17, align 8
  %19 = tail call zeroext i1 %18(%"class.extensions::Feature"* %14, %"class.extensions::HashedExtensionId"* dereferenceable(24) %1) #9
  %20 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %12, i64 1
  br i1 %19, label %21, label %8

21:                                               ; preds = %11, %8, %2
  %22 = phi i1 [ false, %2 ], [ false, %8 ], [ true, %11 ]
  ret i1 %22
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK10extensions14ComplexFeature10IsInternalEv(%"class.extensions::ComplexFeature"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.extensions::ComplexFeature", %"class.extensions::ComplexFeature"* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %2, align 8
  %4 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %3, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.extensions::Feature"*, %"class.extensions::Feature"** %4, align 8
  %6 = bitcast %"class.extensions::Feature"* %5 to i1 (%"class.extensions::Feature"*)***
  %7 = load i1 (%"class.extensions::Feature"*)**, i1 (%"class.extensions::Feature"*)*** %6, align 8
  %8 = getelementptr inbounds i1 (%"class.extensions::Feature"*)*, i1 (%"class.extensions::Feature"*)** %7, i64 2
  %9 = load i1 (%"class.extensions::Feature"*)*, i1 (%"class.extensions::Feature"*)** %8, align 8
  %10 = tail call zeroext i1 %9(%"class.extensions::Feature"* %5) #9
  ret i1 %10
}

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_10unique_ptrIN10extensions7FeatureENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE21__push_back_slow_pathIS6_EEvOT_(%"class.std::__1::vector"*, %"class.std::__1::unique_ptr"* dereferenceable(8)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::unique_ptr"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 2305843009213693951
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #11
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::unique_ptr"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, 1152921504606846975
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 2
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #11
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 2305843009213693951, %14 ]
  %31 = shl i64 %30, 3
  %32 = tail call i8* @_Znwm(i64 %31) #10
  %33 = bitcast i8* %32 to %"class.std::__1::unique_ptr"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.std::__1::unique_ptr"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %36, i64 %9
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %36, i64 %35
  %39 = ptrtoint %"class.std::__1::unique_ptr"* %38 to i64
  %40 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %1, i64 0, i32 0, i32 0, i32 0
  %41 = bitcast %"class.std::__1::unique_ptr"* %1 to i64*
  %42 = load i64, i64* %41, align 8
  store %"class.extensions::Feature"* null, %"class.extensions::Feature"** %40, align 8
  %43 = bitcast %"class.std::__1::unique_ptr"* %37 to i64*
  store i64 %42, i64* %43, align 8
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %37, i64 1
  %45 = ptrtoint %"class.std::__1::unique_ptr"* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %47 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %46, align 8
  %48 = ptrtoint %"class.std::__1::unique_ptr"* %47 to i64
  %49 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %3, align 8
  %50 = icmp eq %"class.std::__1::unique_ptr"* %49, %47
  br i1 %50, label %132, label %51

51:                                               ; preds = %34
  %52 = getelementptr %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %49, i64 -1, i32 0, i32 0, i32 0
  %53 = ptrtoint %"class.extensions::Feature"** %52 to i64
  %54 = sub i64 %53, %48
  %55 = lshr i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 7
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %51, %59
  %60 = phi %"class.std::__1::unique_ptr"* [ %63, %59 ], [ %37, %51 ]
  %61 = phi %"class.std::__1::unique_ptr"* [ %64, %59 ], [ %49, %51 ]
  %62 = phi i64 [ %69, %59 ], [ %57, %51 ]
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %60, i64 -1
  %64 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %61, i64 -1
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = bitcast %"class.std::__1::unique_ptr"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  store %"class.extensions::Feature"* null, %"class.extensions::Feature"** %65, align 8
  %68 = bitcast %"class.std::__1::unique_ptr"* %63 to i64*
  store i64 %67, i64* %68, align 8
  %69 = add i64 %62, -1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %59, !llvm.loop !3

71:                                               ; preds = %59, %51
  %72 = phi %"class.std::__1::unique_ptr"* [ undef, %51 ], [ %63, %59 ]
  %73 = phi %"class.std::__1::unique_ptr"* [ %37, %51 ], [ %63, %59 ]
  %74 = phi %"class.std::__1::unique_ptr"* [ %49, %51 ], [ %64, %59 ]
  %75 = icmp ult i64 %54, 56
  br i1 %75, label %128, label %76

76:                                               ; preds = %71, %76
  %77 = phi %"class.std::__1::unique_ptr"* [ %121, %76 ], [ %73, %71 ]
  %78 = phi %"class.std::__1::unique_ptr"* [ %122, %76 ], [ %74, %71 ]
  %79 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -1
  %81 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %80, i64 0, i32 0, i32 0, i32 0
  %82 = bitcast %"class.std::__1::unique_ptr"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  store %"class.extensions::Feature"* null, %"class.extensions::Feature"** %81, align 8
  %84 = bitcast %"class.std::__1::unique_ptr"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -2
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -2
  %87 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %86, i64 0, i32 0, i32 0, i32 0
  %88 = bitcast %"class.std::__1::unique_ptr"* %86 to i64*
  %89 = load i64, i64* %88, align 8
  store %"class.extensions::Feature"* null, %"class.extensions::Feature"** %87, align 8
  %90 = bitcast %"class.std::__1::unique_ptr"* %85 to i64*
  store i64 %89, i64* %90, align 8
  %91 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -3
  %92 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -3
  %93 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %92, i64 0, i32 0, i32 0, i32 0
  %94 = bitcast %"class.std::__1::unique_ptr"* %92 to i64*
  %95 = load i64, i64* %94, align 8
  store %"class.extensions::Feature"* null, %"class.extensions::Feature"** %93, align 8
  %96 = bitcast %"class.std::__1::unique_ptr"* %91 to i64*
  store i64 %95, i64* %96, align 8
  %97 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -4
  %98 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -4
  %99 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %98, i64 0, i32 0, i32 0, i32 0
  %100 = bitcast %"class.std::__1::unique_ptr"* %98 to i64*
  %101 = load i64, i64* %100, align 8
  store %"class.extensions::Feature"* null, %"class.extensions::Feature"** %99, align 8
  %102 = bitcast %"class.std::__1::unique_ptr"* %97 to i64*
  store i64 %101, i64* %102, align 8
  %103 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -5
  %104 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -5
  %105 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %104, i64 0, i32 0, i32 0, i32 0
  %106 = bitcast %"class.std::__1::unique_ptr"* %104 to i64*
  %107 = load i64, i64* %106, align 8
  store %"class.extensions::Feature"* null, %"class.extensions::Feature"** %105, align 8
  %108 = bitcast %"class.std::__1::unique_ptr"* %103 to i64*
  store i64 %107, i64* %108, align 8
  %109 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -6
  %110 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -6
  %111 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %110, i64 0, i32 0, i32 0, i32 0
  %112 = bitcast %"class.std::__1::unique_ptr"* %110 to i64*
  %113 = load i64, i64* %112, align 8
  store %"class.extensions::Feature"* null, %"class.extensions::Feature"** %111, align 8
  %114 = bitcast %"class.std::__1::unique_ptr"* %109 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -7
  %116 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -7
  %117 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %116, i64 0, i32 0, i32 0, i32 0
  %118 = bitcast %"class.std::__1::unique_ptr"* %116 to i64*
  %119 = load i64, i64* %118, align 8
  store %"class.extensions::Feature"* null, %"class.extensions::Feature"** %117, align 8
  %120 = bitcast %"class.std::__1::unique_ptr"* %115 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -8
  %122 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -8
  %123 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %122, i64 0, i32 0, i32 0, i32 0
  %124 = bitcast %"class.std::__1::unique_ptr"* %122 to i64*
  %125 = load i64, i64* %124, align 8
  store %"class.extensions::Feature"* null, %"class.extensions::Feature"** %123, align 8
  %126 = bitcast %"class.std::__1::unique_ptr"* %121 to i64*
  store i64 %125, i64* %126, align 8
  %127 = icmp eq %"class.std::__1::unique_ptr"* %122, %47
  br i1 %127, label %128, label %76

128:                                              ; preds = %76, %71
  %129 = phi %"class.std::__1::unique_ptr"* [ %72, %71 ], [ %121, %76 ]
  %130 = load i64, i64* %6, align 8
  %131 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %3, align 8
  br label %132

132:                                              ; preds = %34, %128
  %133 = phi %"class.std::__1::unique_ptr"* [ %131, %128 ], [ %47, %34 ]
  %134 = phi %"class.std::__1::unique_ptr"* [ %129, %128 ], [ %37, %34 ]
  %135 = phi i64 [ %130, %128 ], [ %48, %34 ]
  %136 = ptrtoint %"class.std::__1::unique_ptr"* %134 to i64
  store i64 %136, i64* %6, align 8
  store i64 %45, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %137 = inttoptr i64 %135 to %"class.std::__1::unique_ptr"*
  %138 = icmp eq %"class.std::__1::unique_ptr"* %133, %137
  br i1 %138, label %152, label %139

139:                                              ; preds = %132, %150
  %140 = phi %"class.std::__1::unique_ptr"* [ %141, %150 ], [ %133, %132 ]
  %141 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %140, i64 -1
  %142 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %141, i64 0, i32 0, i32 0, i32 0
  %143 = load %"class.extensions::Feature"*, %"class.extensions::Feature"** %142, align 8
  store %"class.extensions::Feature"* null, %"class.extensions::Feature"** %142, align 8
  %144 = icmp eq %"class.extensions::Feature"* %143, null
  br i1 %144, label %150, label %145

145:                                              ; preds = %139
  %146 = bitcast %"class.extensions::Feature"* %143 to void (%"class.extensions::Feature"*)***
  %147 = load void (%"class.extensions::Feature"*)**, void (%"class.extensions::Feature"*)*** %146, align 8
  %148 = getelementptr inbounds void (%"class.extensions::Feature"*)*, void (%"class.extensions::Feature"*)** %147, i64 1
  %149 = load void (%"class.extensions::Feature"*)*, void (%"class.extensions::Feature"*)** %148, align 8
  tail call void %149(%"class.extensions::Feature"* nonnull %143) #9
  br label %150

150:                                              ; preds = %145, %139
  %151 = icmp eq %"class.std::__1::unique_ptr"* %141, %137
  br i1 %151, label %152, label %139

152:                                              ; preds = %150, %132
  %153 = icmp eq i64 %135, 0
  br i1 %153, label %156, label %154

154:                                              ; preds = %152
  %155 = inttoptr i64 %135 to i8*
  tail call void @_ZdlPv(i8* %155) #10
  br label %156

156:                                              ; preds = %152, %154
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
