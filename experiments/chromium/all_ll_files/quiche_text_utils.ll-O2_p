; ModuleID = '../../net/third_party/quiche/src/common/quiche_text_utils.cc'
source_filename = "../../net/third_party/quiche/src/common/quiche_text_utils.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.1 }
%union.anon.1 = type { %"class.std::__1::basic_string" }
%"class.absl::str_format_internal::FormatArgImpl" = type { %"union.absl::str_format_internal::FormatArgImpl::Data", i1 (i8*, i64, i32, i8*)* }
%"union.absl::str_format_internal::FormatArgImpl::Data" = type { i8* }
%"class.absl::AlphaNum" = type { %"class.absl::string_view", [32 x i8] }
%"class.absl::string_view" = type { i8*, i64 }

@.str = private unnamed_addr constant [10 x i8] c"0x%04x:  \00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%02x\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6quiche15QuicheTextUtils12Base64EncodeEPKhmPNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE(i8* nocapture readonly, i64, %"class.std::__1::basic_string"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #7
  %6 = icmp ugt i64 %1, -17
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = bitcast %"class.std::__1::basic_string"* %4 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %8) #8
  unreachable

9:                                                ; preds = %3
  %10 = icmp ult i64 %1, 23
  br i1 %10, label %20, label %11

11:                                               ; preds = %9
  %12 = add nuw i64 %1, 16
  %13 = and i64 %12, -16
  %14 = tail call i8* @_Znwm(i64 %13) #9
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %14, i8** %15, align 8
  %16 = or i64 %13, -9223372036854775808
  %17 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %16, i64* %17, align 8
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %1, i64* %18, align 8
  %19 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %25

20:                                               ; preds = %9
  %21 = trunc i64 %1 to i8
  %22 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %23 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %22, i64 0, i32 1, i32 0
  store i8 %21, i8* %23, align 1
  %24 = icmp eq i64 %1, 0
  br i1 %24, label %28, label %25

25:                                               ; preds = %20, %11
  %26 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %22, %20 ], [ %19, %11 ]
  %27 = phi i8* [ %5, %20 ], [ %14, %11 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %27, i8* align 1 %0, i64 %1, i1 false) #7
  br label %28

28:                                               ; preds = %20, %25
  %29 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %22, %20 ], [ %26, %25 ]
  %30 = phi i8* [ %5, %20 ], [ %27, %25 ]
  %31 = getelementptr inbounds i8, i8* %30, i64 %1
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %29, i64 0, i32 1, i32 0
  %33 = load i8, i8* %32, align 1
  %34 = icmp slt i8 %33, 0
  br i1 %34, label %38, label %35

35:                                               ; preds = %28
  %36 = zext i8 %33 to i64
  %37 = ptrtoint %"class.std::__1::basic_string"* %4 to i64
  br label %45

38:                                               ; preds = %28
  %39 = bitcast %"class.std::__1::basic_string"* %4 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %42 = load i64, i64* %41, align 8
  %43 = icmp sgt i64 %42, -1
  br i1 %43, label %45, label %44, !prof !2

44:                                               ; preds = %38
  tail call void @llvm.trap() #7
  unreachable

45:                                               ; preds = %35, %38
  %46 = phi i64 [ %40, %38 ], [ %37, %35 ]
  %47 = phi i64 [ %42, %38 ], [ %36, %35 ]
  %48 = inttoptr i64 %46 to i8*
  call void @_ZN4absl12Base64EscapeENS_11string_viewEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(i8* %48, i64 %47, %"class.std::__1::basic_string"* %2) #7
  %49 = load i8, i8* %32, align 1
  %50 = icmp slt i8 %49, 0
  br i1 %50, label %51, label %54

51:                                               ; preds = %45
  %52 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %53 = load i8*, i8** %52, align 8
  call void @_ZdlPv(i8* %53) #9
  br label %54

54:                                               ; preds = %45, %51
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #7
  %55 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %56 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %55, i64 0, i32 1, i32 0
  %57 = load i8, i8* %56, align 1
  %58 = icmp slt i8 %57, 0
  br i1 %58, label %59, label %62

59:                                               ; preds = %54
  %60 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %61 = load i64, i64* %60, align 8
  br label %64

62:                                               ; preds = %54
  %63 = zext i8 %57 to i64
  br label %64

64:                                               ; preds = %59, %62
  %65 = phi i64 [ %61, %59 ], [ %63, %62 ]
  %66 = icmp ugt i64 %65, 1
  br i1 %66, label %67, label %92

67:                                               ; preds = %64
  %68 = add i64 %65, -1
  br i1 %58, label %69, label %72

69:                                               ; preds = %67
  %70 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %71 = load i8*, i8** %70, align 8
  br label %74

72:                                               ; preds = %67
  %73 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  br label %74

74:                                               ; preds = %69, %72
  %75 = phi i8* [ %71, %69 ], [ %73, %72 ]
  %76 = getelementptr inbounds i8, i8* %75, i64 %68
  %77 = load i8, i8* %76, align 1
  %78 = icmp eq i8 %77, 61
  br i1 %78, label %79, label %92

79:                                               ; preds = %74
  %80 = add i64 %65, -2
  br i1 %58, label %81, label %84

81:                                               ; preds = %79
  %82 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %83 = load i8*, i8** %82, align 8
  br label %86

84:                                               ; preds = %79
  %85 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  br label %86

86:                                               ; preds = %81, %84
  %87 = phi i8* [ %83, %81 ], [ %85, %84 ]
  %88 = getelementptr inbounds i8, i8* %87, i64 %80
  %89 = load i8, i8* %88, align 1
  %90 = icmp eq i8 %89, 61
  %91 = select i1 %90, i64 %80, i64 %68
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"* %2, i64 %91, i8 signext 0) #7
  br label %92

92:                                               ; preds = %74, %86, %64
  ret void
}

declare void @_ZN4absl12Base64EscapeENS_11string_viewEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(i8*, i64, %"class.std::__1::basic_string"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6quiche15QuicheTextUtils12Base64DecodeEN4absl11string_viewE(%"class.absl::optional"* noalias nocapture sret, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #7
  %6 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 24, i1 false) #7
  %7 = call zeroext i1 @_ZN4absl14Base64UnescapeENS_11string_viewEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(i8* %1, i64 %2, %"class.std::__1::basic_string"* nonnull %4) #7
  %8 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  br i1 %7, label %9, label %12

9:                                                ; preds = %3
  store i8 1, i8* %8, align 8
  %10 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %11 = bitcast %"class.std::__1::basic_string"* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* nonnull align 8 %5, i64 24, i1 false) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 24, i1 false) #7
  br label %21

12:                                               ; preds = %3
  store i8 0, i8* %8, align 8
  %13 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %14 = bitcast %union.anon.1* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 24, i1 false) #7
  %15 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %16 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %15, i64 0, i32 1, i32 0
  %17 = load i8, i8* %16, align 1
  %18 = icmp slt i8 %17, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %12
  %20 = load i8*, i8** %6, align 8
  call void @_ZdlPv(i8* %20) #9
  br label %21

21:                                               ; preds = %9, %12, %19
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #7
  ret void
}

declare zeroext i1 @_ZN4absl14Base64UnescapeENS_11string_viewEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(i8*, i64, %"class.std::__1::basic_string"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6quiche15QuicheTextUtils7HexDumpEN4absl11string_viewE(%"class.std::__1::basic_string"* noalias sret, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca [1 x %"class.absl::str_format_internal::FormatArgImpl"], align 8
  %5 = alloca %"class.absl::AlphaNum", align 8
  %6 = alloca %"class.absl::AlphaNum", align 8
  %7 = alloca %"class.absl::AlphaNum", align 8
  %8 = alloca %"class.absl::AlphaNum", align 8
  %9 = trunc i64 %2 to i32
  %10 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 24, i1 false) #7
  %11 = icmp sgt i32 %9, 0
  br i1 %11, label %12, label %74

12:                                               ; preds = %3
  %13 = bitcast [1 x %"class.absl::str_format_internal::FormatArgImpl"]* %4 to i8*
  %14 = getelementptr inbounds [1 x %"class.absl::str_format_internal::FormatArgImpl"], [1 x %"class.absl::str_format_internal::FormatArgImpl"]* %4, i64 0, i64 0
  %15 = getelementptr inbounds [1 x %"class.absl::str_format_internal::FormatArgImpl"], [1 x %"class.absl::str_format_internal::FormatArgImpl"]* %4, i64 0, i64 0, i32 0, i32 0
  %16 = getelementptr inbounds [1 x %"class.absl::str_format_internal::FormatArgImpl"], [1 x %"class.absl::str_format_internal::FormatArgImpl"]* %4, i64 0, i64 0, i32 1
  %17 = bitcast %"class.absl::AlphaNum"* %5 to i8*
  %18 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %5, i64 0, i32 0, i32 0
  %19 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %5, i64 0, i32 0, i32 1
  %20 = bitcast %"class.absl::AlphaNum"* %6 to i8*
  %21 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %6, i64 0, i32 0, i32 0
  %22 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %6, i64 0, i32 0, i32 1
  %23 = bitcast %"class.absl::AlphaNum"* %7 to i8*
  %24 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %7, i64 0, i32 0, i32 0
  %25 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %7, i64 0, i32 0, i32 1
  %26 = bitcast %"class.absl::AlphaNum"* %8 to i8*
  %27 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %8, i64 0, i32 0, i32 0
  %28 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %8, i64 0, i32 0, i32 1
  br label %29

29:                                               ; preds = %12, %60
  %30 = phi i8* [ %1, %12 ], [ %61, %60 ]
  %31 = phi i32 [ 0, %12 ], [ %62, %60 ]
  %32 = phi i32 [ %9, %12 ], [ %63, %60 ]
  %33 = icmp slt i32 %32, 16
  %34 = select i1 %33, i32 %32, i32 16
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #7
  %35 = zext i32 %31 to i64
  %36 = or i64 %35, -6148914694099828736
  %37 = inttoptr i64 %36 to i8*
  store i8* %37, i8** %15, align 8
  store i1 (i8*, i64, i32, i8*)* @_ZN4absl19str_format_internal13FormatArgImpl8DispatchIiEEbNS1_4DataENS0_24FormatConversionSpecImplEPv, i1 (i8*, i64, i32, i8*)** %16, align 8
  %38 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4absl19str_format_internal10AppendPackEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS0_21UntypedFormatSpecImplENS_4SpanIKNS0_13FormatArgImplEEE(%"class.std::__1::basic_string"* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i64 9, %"class.absl::str_format_internal::FormatArgImpl"* nonnull %14, i64 1) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #7
  %39 = sext i32 %34 to i64
  br label %42

40:                                               ; preds = %57
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %23) #7
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0), i8** %24, align 8
  store i64 1, i64* %25, align 8
  call void @_ZN4absl9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS_8AlphaNumE(%"class.std::__1::basic_string"* %0, %"class.absl::AlphaNum"* nonnull dereferenceable(48) %7) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %23) #7
  %41 = icmp sgt i32 %32, 0
  br i1 %41, label %65, label %60

42:                                               ; preds = %57, %29
  %43 = phi i64 [ 0, %29 ], [ %58, %57 ]
  %44 = icmp slt i64 %43, %39
  br i1 %44, label %45, label %52

45:                                               ; preds = %42
  %46 = getelementptr inbounds i8, i8* %30, i64 %43
  %47 = load i8, i8* %46, align 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #7
  %48 = zext i8 %47 to i64
  %49 = or i64 %48, -6148914691236517376
  %50 = inttoptr i64 %49 to i8*
  store i8* %50, i8** %15, align 8
  store i1 (i8*, i64, i32, i8*)* @_ZN4absl19str_format_internal13FormatArgImpl8DispatchIhEEbNS1_4DataENS0_24FormatConversionSpecImplEPv, i1 (i8*, i64, i32, i8*)** %16, align 8
  %51 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4absl19str_format_internal10AppendPackEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS0_21UntypedFormatSpecImplENS_4SpanIKNS0_13FormatArgImplEEE(%"class.std::__1::basic_string"* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 4, %"class.absl::str_format_internal::FormatArgImpl"* nonnull %14, i64 1) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #7
  br label %53

52:                                               ; preds = %42
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %17) #7
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i8** %18, align 8
  store i64 2, i64* %19, align 8
  call void @_ZN4absl9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS_8AlphaNumE(%"class.std::__1::basic_string"* %0, %"class.absl::AlphaNum"* nonnull dereferenceable(48) %5) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %17) #7
  br label %53

53:                                               ; preds = %52, %45
  %54 = and i64 %43, 1
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %57, label %56

56:                                               ; preds = %53
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %20) #7
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0), i8** %21, align 8
  store i64 1, i64* %22, align 8
  call void @_ZN4absl9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS_8AlphaNumE(%"class.std::__1::basic_string"* %0, %"class.absl::AlphaNum"* nonnull dereferenceable(48) %6) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %20) #7
  br label %57

57:                                               ; preds = %53, %56
  %58 = add nuw nsw i64 %43, 1
  %59 = icmp eq i64 %58, 16
  br i1 %59, label %40, label %42

60:                                               ; preds = %65, %40
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %26) #7
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0), i8** %27, align 8
  %61 = getelementptr inbounds i8, i8* %30, i64 %39
  %62 = add nsw i32 %34, %31
  %63 = sub nsw i32 %32, %34
  store i64 1, i64* %28, align 8
  call void @_ZN4absl9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS_8AlphaNumE(%"class.std::__1::basic_string"* %0, %"class.absl::AlphaNum"* nonnull dereferenceable(48) %8) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %26) #7
  %64 = icmp sgt i32 %63, 0
  br i1 %64, label %29, label %74

65:                                               ; preds = %40, %65
  %66 = phi i64 [ %72, %65 ], [ 0, %40 ]
  %67 = getelementptr inbounds i8, i8* %30, i64 %66
  %68 = load i8, i8* %67, align 1
  %69 = add i8 %68, -33
  %70 = icmp ult i8 %69, 94
  %71 = select i1 %70, i8 %68, i8 46
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %0, i8 signext %71) #7
  %72 = add nuw nsw i64 %66, 1
  %73 = icmp slt i64 %72, %39
  br i1 %73, label %65, label %60

74:                                               ; preds = %60, %3
  ret void
}

declare void @_ZN4absl9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS_8AlphaNumE(%"class.std::__1::basic_string"*, %"class.absl::AlphaNum"* dereferenceable(48)) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"*, i64, i8 signext) local_unnamed_addr #1

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4absl19str_format_internal10AppendPackEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS0_21UntypedFormatSpecImplENS_4SpanIKNS0_13FormatArgImplEEE(%"class.std::__1::basic_string"*, i8*, i64, %"class.absl::str_format_internal::FormatArgImpl"*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
declare zeroext i1 @_ZN4absl19str_format_internal13FormatArgImpl8DispatchIiEEbNS1_4DataENS0_24FormatConversionSpecImplEPv(i8*, i64, i32, i8*) #0 align 2

; Function Attrs: nounwind ssp uwtable
declare zeroext i1 @_ZN4absl19str_format_internal13FormatArgImpl8DispatchIhEEbNS1_4DataENS0_24FormatConversionSpecImplEPv(i8*, i64, i32, i8*) #0 align 2

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"*, i8 signext) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
