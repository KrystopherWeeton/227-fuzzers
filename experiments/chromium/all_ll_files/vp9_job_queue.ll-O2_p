; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/decoder/vp9_job_queue.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/decoder/vp9_job_queue.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.JobQueueRowMt = type { i8*, i8*, i8*, i8*, i32, %union.pthread_mutex_t, %union.pthread_cond_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon.0, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%union.anon.0 = type { i64 }
%union.pthread_mutexattr_t = type { i32 }
%union.pthread_condattr_t = type { i32 }

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_jobq_init(%struct.JobQueueRowMt*, i8*, i64) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.JobQueueRowMt, %struct.JobQueueRowMt* %0, i64 0, i32 5
  %5 = tail call i32 @pthread_mutex_init(%union.pthread_mutex_t* %4, %union.pthread_mutexattr_t* null) #4
  %6 = getelementptr inbounds %struct.JobQueueRowMt, %struct.JobQueueRowMt* %0, i64 0, i32 6
  %7 = tail call i32 @pthread_cond_init(%union.pthread_cond_t* %6, %union.pthread_condattr_t* null) #4
  %8 = getelementptr inbounds %struct.JobQueueRowMt, %struct.JobQueueRowMt* %0, i64 0, i32 0
  store i8* %1, i8** %8, align 8
  %9 = getelementptr inbounds %struct.JobQueueRowMt, %struct.JobQueueRowMt* %0, i64 0, i32 1
  store volatile i8* %1, i8** %9, align 8
  %10 = getelementptr inbounds %struct.JobQueueRowMt, %struct.JobQueueRowMt* %0, i64 0, i32 2
  store volatile i8* %1, i8** %10, align 8
  %11 = getelementptr inbounds i8, i8* %1, i64 %2
  %12 = getelementptr inbounds %struct.JobQueueRowMt, %struct.JobQueueRowMt* %0, i64 0, i32 3
  store i8* %11, i8** %12, align 8
  %13 = getelementptr inbounds %struct.JobQueueRowMt, %struct.JobQueueRowMt* %0, i64 0, i32 4
  store i32 0, i32* %13, align 8
  ret void
}

; Function Attrs: nounwind
declare i32 @pthread_mutex_init(%union.pthread_mutex_t*, %union.pthread_mutexattr_t*) local_unnamed_addr #1

; Function Attrs: nounwind
declare i32 @pthread_cond_init(%union.pthread_cond_t*, %union.pthread_condattr_t*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_jobq_reset(%struct.JobQueueRowMt*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.JobQueueRowMt, %struct.JobQueueRowMt* %0, i64 0, i32 5
  %3 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %2) #4
  %4 = bitcast %struct.JobQueueRowMt* %0 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %struct.JobQueueRowMt, %struct.JobQueueRowMt* %0, i64 0, i32 1
  %7 = bitcast i8** %6 to i64*
  store volatile i64 %5, i64* %7, align 8
  %8 = getelementptr inbounds %struct.JobQueueRowMt, %struct.JobQueueRowMt* %0, i64 0, i32 2
  %9 = bitcast i8** %8 to i64*
  store volatile i64 %5, i64* %9, align 8
  %10 = getelementptr inbounds %struct.JobQueueRowMt, %struct.JobQueueRowMt* %0, i64 0, i32 4
  store i32 0, i32* %10, align 8
  %11 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %2) #4
  ret void
}

; Function Attrs: nounwind
declare i32 @pthread_mutex_lock(%union.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_jobq_deinit(%struct.JobQueueRowMt*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.JobQueueRowMt, %struct.JobQueueRowMt* %0, i64 0, i32 5
  %3 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %2) #4
  %4 = bitcast %struct.JobQueueRowMt* %0 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %struct.JobQueueRowMt, %struct.JobQueueRowMt* %0, i64 0, i32 1
  %7 = bitcast i8** %6 to i64*
  store volatile i64 %5, i64* %7, align 8
  %8 = getelementptr inbounds %struct.JobQueueRowMt, %struct.JobQueueRowMt* %0, i64 0, i32 2
  %9 = bitcast i8** %8 to i64*
  store volatile i64 %5, i64* %9, align 8
  %10 = getelementptr inbounds %struct.JobQueueRowMt, %struct.JobQueueRowMt* %0, i64 0, i32 4
  store i32 0, i32* %10, align 8
  %11 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %2) #4
  %12 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* %2) #4
  %13 = getelementptr inbounds %struct.JobQueueRowMt, %struct.JobQueueRowMt* %0, i64 0, i32 6
  %14 = tail call i32 @pthread_cond_destroy(%union.pthread_cond_t* %13) #4
  ret void
}

; Function Attrs: nounwind
declare i32 @pthread_mutex_destroy(%union.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
declare i32 @pthread_cond_destroy(%union.pthread_cond_t*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_jobq_terminate(%struct.JobQueueRowMt*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.JobQueueRowMt, %struct.JobQueueRowMt* %0, i64 0, i32 5
  %3 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %2) #4
  %4 = getelementptr inbounds %struct.JobQueueRowMt, %struct.JobQueueRowMt* %0, i64 0, i32 4
  store i32 1, i32* %4, align 8
  %5 = getelementptr inbounds %struct.JobQueueRowMt, %struct.JobQueueRowMt* %0, i64 0, i32 6
  %6 = tail call i32 @pthread_cond_broadcast(%union.pthread_cond_t* %5) #4
  %7 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %2) #4
  ret void
}

; Function Attrs: nounwind
declare i32 @pthread_cond_broadcast(%union.pthread_cond_t*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp9_jobq_queue(%struct.JobQueueRowMt*, i8* nocapture readonly, i64) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.JobQueueRowMt, %struct.JobQueueRowMt* %0, i64 0, i32 5
  %5 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %4) #4
  %6 = getelementptr inbounds %struct.JobQueueRowMt, %struct.JobQueueRowMt* %0, i64 0, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %struct.JobQueueRowMt, %struct.JobQueueRowMt* %0, i64 0, i32 1
  %9 = load volatile i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 %2
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %18, label %12

12:                                               ; preds = %3
  %13 = load volatile i8*, i8** %8, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 1 %1, i64 %2, i1 false)
  %14 = load volatile i8*, i8** %8, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 %2
  store volatile i8* %15, i8** %8, align 8
  %16 = getelementptr inbounds %struct.JobQueueRowMt, %struct.JobQueueRowMt* %0, i64 0, i32 6
  %17 = tail call i32 @pthread_cond_signal(%union.pthread_cond_t* %16) #4
  br label %18

18:                                               ; preds = %3, %12
  %19 = phi i32 [ 0, %12 ], [ 1, %3 ]
  %20 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %4) #4
  ret i32 %19
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind
declare i32 @pthread_cond_signal(%union.pthread_cond_t*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp9_jobq_dequeue(%struct.JobQueueRowMt*, i8* nocapture, i64, i32) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.JobQueueRowMt, %struct.JobQueueRowMt* %0, i64 0, i32 5
  %6 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %5) #4
  %7 = getelementptr inbounds %struct.JobQueueRowMt, %struct.JobQueueRowMt* %0, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %struct.JobQueueRowMt, %struct.JobQueueRowMt* %0, i64 0, i32 2
  %10 = load volatile i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 %2
  %12 = icmp ult i8* %8, %11
  br i1 %12, label %37, label %13

13:                                               ; preds = %4
  %14 = getelementptr inbounds %struct.JobQueueRowMt, %struct.JobQueueRowMt* %0, i64 0, i32 1
  %15 = load volatile i8*, i8** %14, align 8
  %16 = load volatile i8*, i8** %9, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 %2
  %18 = icmp ult i8* %15, %17
  br i1 %18, label %19, label %23

19:                                               ; preds = %13
  %20 = getelementptr inbounds %struct.JobQueueRowMt, %struct.JobQueueRowMt* %0, i64 0, i32 4
  %21 = icmp eq i32 %3, 1
  %22 = getelementptr inbounds %struct.JobQueueRowMt, %struct.JobQueueRowMt* %0, i64 0, i32 6
  br label %27

23:                                               ; preds = %31, %13
  %24 = load volatile i8*, i8** %9, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %24, i64 %2, i1 false)
  %25 = load volatile i8*, i8** %9, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 %2
  store volatile i8* %26, i8** %9, align 8
  br label %37

27:                                               ; preds = %19, %31
  %28 = load i32, i32* %20, align 8
  %29 = icmp ne i32 %28, 1
  %30 = and i1 %21, %29
  br i1 %30, label %31, label %37

31:                                               ; preds = %27
  %32 = tail call i32 @pthread_cond_wait(%union.pthread_cond_t* %22, %union.pthread_mutex_t* %5) #4
  %33 = load volatile i8*, i8** %14, align 8
  %34 = load volatile i8*, i8** %9, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 %2
  %36 = icmp ult i8* %33, %35
  br i1 %36, label %27, label %23

37:                                               ; preds = %27, %4, %23
  %38 = phi i32 [ 0, %23 ], [ 1, %4 ], [ 1, %27 ]
  %39 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %5) #4
  ret i32 %38
}

declare i32 @pthread_cond_wait(%union.pthread_cond_t*, %union.pthread_mutex_t*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
