; ModuleID = '../../third_party/pdfium/xfa/fxfa/cxfa_ffline.cpp'
source_filename = "../../third_party/pdfium/xfa/fxfa/cxfa_ffline.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CXFA_FFLine = type { %class.CXFA_FFWidget }
%class.CXFA_FFWidget = type { %"class.CFWL_Widget::AdapterIface", %"class.cppgc::internal::BasicMember", %"class.cppgc::internal::BasicMember.0", %"class.cppgc::internal::BasicMember.1", %"class.cppgc::internal::BasicMember.2", %class.CFX_RectF }
%"class.CFWL_Widget::AdapterIface" = type { %"class.cppgc::GarbageCollectedMixin" }
%"class.cppgc::GarbageCollectedMixin" = type { i32 (...)** }
%"class.cppgc::internal::BasicMember" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::MemberBase" = type { i8* }
%"class.cppgc::internal::BasicMember.0" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::BasicMember.1" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::BasicMember.2" = type { %"class.cppgc::internal::MemberBase" }
%class.CFX_RectF = type { float, float, float, float }
%class.CXFA_Node = type { %class.CXFA_Object, %"class.fxjs::GCedTreeNodeMixin", i32, i8, i8, i8, %"class.pdfium::span.6", %"class.pdfium::span.8", i32, %"class.fxcrt::UnownedPtr.10", i8, i8, i8, i32, %"class.cppgc::internal::BasicMember.2", %"class.std::__1::vector", %"class.cppgc::internal::BasicMember.12", %"class.cppgc::internal::BasicMember.13" }
%class.CXFA_Object = type { i32 (...)**, i32, i16, %"class.fxcrt::StringViewTemplate", i32, %"class.cppgc::internal::BasicMember.4", %"class.cppgc::internal::BasicMember.5" }
%"class.fxcrt::StringViewTemplate" = type { %"class.pdfium::span" }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr", i64 }
%"class.fxcrt::UnownedPtr" = type { i8* }
%"class.cppgc::internal::BasicMember.4" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::BasicMember.5" = type { %"class.cppgc::internal::MemberBase" }
%"class.fxjs::GCedTreeNodeMixin" = type { %"class.cppgc::GarbageCollectedMixin", %"class.fxcrt::TreeNode" }
%"class.fxcrt::TreeNode" = type { i32 (...)**, %"class.cppgc::internal::BasicMember.2", %"class.cppgc::internal::BasicMember.2", %"class.cppgc::internal::BasicMember.2", %"class.cppgc::internal::BasicMember.2", %"class.cppgc::internal::BasicMember.2" }
%"class.pdfium::span.6" = type { %"class.fxcrt::UnownedPtr.7", i64 }
%"class.fxcrt::UnownedPtr.7" = type { %"struct.CXFA_Node::PropertyData"* }
%"struct.CXFA_Node::PropertyData" = type { i16, i8, i8 }
%"class.pdfium::span.8" = type { %"class.fxcrt::UnownedPtr.9", i64 }
%"class.fxcrt::UnownedPtr.9" = type { %"struct.CXFA_Node::AttributeData"* }
%"struct.CXFA_Node::AttributeData" = type { i16, i8, i8* }
%"class.fxcrt::UnownedPtr.10" = type { %class.CFX_XMLNode* }
%class.CFX_XMLNode = type opaque
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.cppgc::internal::BasicMember.2"*, %"class.cppgc::internal::BasicMember.2"*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.cppgc::internal::BasicMember.2"* }
%"class.cppgc::internal::BasicMember.12" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::BasicMember.13" = type { %"class.cppgc::internal::MemberBase" }
%class.CFGAS_GEGraphics = type { %"class.fxcrt::UnownedPtr.14", %"struct.CFGAS_GEGraphics::TInfo", %"class.std::__1::vector.24" }
%"class.fxcrt::UnownedPtr.14" = type { %class.CFX_RenderDevice* }
%class.CFX_RenderDevice = type opaque
%"struct.CFGAS_GEGraphics::TInfo" = type { %class.CFX_GraphStateData, %class.CFX_Matrix, i8, %class.CFGAS_GEColor, %class.CFGAS_GEColor }
%class.CFX_GraphStateData = type { i8, i8, float, float, float, %"class.std::__1::vector.15" }
%"class.std::__1::vector.15" = type { %"class.std::__1::__vector_base.16" }
%"class.std::__1::__vector_base.16" = type { float*, float*, %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { float* }
%class.CFX_Matrix = type { float, float, float, float, float, float }
%class.CFGAS_GEColor = type { i32, i32, %"class.fxcrt::UnownedPtr.22", %"class.fxcrt::UnownedPtr.23" }
%"class.fxcrt::UnownedPtr.22" = type { %class.CFGAS_GEPattern* }
%class.CFGAS_GEPattern = type opaque
%"class.fxcrt::UnownedPtr.23" = type { %class.CFGAS_GEShading* }
%class.CFGAS_GEShading = type opaque
%"class.std::__1::vector.24" = type { %"class.std::__1::__vector_base.25" }
%"class.std::__1::__vector_base.25" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"class.std::__1::unique_ptr"* }
%class.CFGAS_GEPath = type { %class.CFX_PathData }
%class.CFX_PathData = type { %"class.std::__1::vector.31" }
%"class.std::__1::vector.31" = type { %"class.std::__1::__vector_base.32" }
%"class.std::__1::__vector_base.32" = type { %class.FX_PATHPOINT*, %class.FX_PATHPOINT*, %"class.std::__1::__compressed_pair.33" }
%class.FX_PATHPOINT = type <{ %class.CFX_PTemplate, i8, i8, [2 x i8] }>
%class.CFX_PTemplate = type { float, float }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %class.FX_PATHPOINT* }
%class.CXFA_Value = type { %class.CXFA_Node }
%class.CXFA_Line = type { %class.CXFA_Node }
%class.CXFA_Edge = type { %class.CXFA_Stroke }
%class.CXFA_Stroke = type { %class.CXFA_Node }
%class.CXFA_Margin = type opaque
%"class.cppgc::Visitor" = type { i32 (...)** }
%class.CXFA_FFField = type opaque
%class.CFX_VTemplate = type opaque
%"class.fxcrt::WideString" = type { %"class.fxcrt::RetainPtr" }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr.38" }
%"class.std::__1::unique_ptr.38" = type { %"class.std::__1::__compressed_pair.39" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i32], [4 x i8] }>

@_ZTV11CXFA_FFLine = hidden unnamed_addr constant { [53 x i8*] } { [53 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CXFA_FFWidget*, %"class.cppgc::Visitor"*)* @_ZNK13CXFA_FFWidget5TraceEPN5cppgc7VisitorE to i8*), i8* bitcast (void (%class.CXFA_FFLine*)* @_ZN11CXFA_FFLineD2Ev to i8*), i8* bitcast (void (%class.CXFA_FFLine*)* @_ZN11CXFA_FFLineD0Ev to i8*), i8* bitcast (void (%class.CFX_Matrix*, %class.CXFA_FFWidget*)* @_ZN13CXFA_FFWidget15GetRotateMatrixEv to i8*), i8* bitcast (void (%class.CXFA_FFWidget*, i1, %class.CFX_RectF*)* @_ZN13CXFA_FFWidget12DisplayCaretEbPK9CFX_RectF to i8*), i8* bitcast (void (%class.CXFA_FFWidget*, i32*, float*)* @_ZN13CXFA_FFWidget26GetBorderColorAndThicknessEPjPf to i8*), i8* bitcast (void (%class.CXFA_FFWidget*)* @_ZN13CXFA_FFWidget11PreFinalizeEv to i8*), i8* bitcast (%class.CXFA_FFField* (%class.CXFA_FFWidget*)* @_ZN13CXFA_FFWidget7AsFieldEv to i8*), i8* bitcast ({ <2 x float>, <2 x float> } (%class.CXFA_FFWidget*, i32)* @_ZN13CXFA_FFWidget7GetBBoxENS_11FocusOptionE to i8*), i8* bitcast (void (%class.CXFA_FFLine*, %class.CFGAS_GEGraphics*, %class.CFX_Matrix*, i32)* @_ZN11CXFA_FFLine12RenderWidgetEP16CFGAS_GEGraphicsRK10CFX_MatrixN13CXFA_FFWidget15HighlightOptionE to i8*), i8* bitcast (i1 (%class.CXFA_FFWidget*)* @_ZN13CXFA_FFWidget8IsLoadedEv to i8*), i8* bitcast (i1 (%class.CXFA_FFWidget*)* @_ZN13CXFA_FFWidget10LoadWidgetEv to i8*), i8* bitcast (i1 (%class.CXFA_FFWidget*)* @_ZN13CXFA_FFWidget13PerformLayoutEv to i8*), i8* bitcast (i1 (%class.CXFA_FFWidget*)* @_ZN13CXFA_FFWidget13UpdateFWLDataEv to i8*), i8* bitcast (void (%class.CXFA_FFWidget*)* @_ZN13CXFA_FFWidget20UpdateWidgetPropertyEv to i8*), i8* bitcast (i1 (%class.CXFA_FFWidget*, i32, %class.CFX_PTemplate*, i8)* @_ZN13CXFA_FFWidget24AcceptsFocusOnButtonDownEjRK13CFX_PTemplateIfE16FWL_MouseCommand to i8*), i8* bitcast (i1 (%class.CXFA_FFWidget*)* @_ZN13CXFA_FFWidget12OnMouseEnterEv to i8*), i8* bitcast (i1 (%class.CXFA_FFWidget*)* @_ZN13CXFA_FFWidget11OnMouseExitEv to i8*), i8* bitcast (i1 (%class.CXFA_FFWidget*, i32, %class.CFX_PTemplate*)* @_ZN13CXFA_FFWidget13OnLButtonDownEjRK13CFX_PTemplateIfE to i8*), i8* bitcast (i1 (%class.CXFA_FFWidget*, i32, %class.CFX_PTemplate*)* @_ZN13CXFA_FFWidget11OnLButtonUpEjRK13CFX_PTemplateIfE to i8*), i8* bitcast (i1 (%class.CXFA_FFWidget*, i32, %class.CFX_PTemplate*)* @_ZN13CXFA_FFWidget15OnLButtonDblClkEjRK13CFX_PTemplateIfE to i8*), i8* bitcast (i1 (%class.CXFA_FFWidget*, i32, %class.CFX_PTemplate*)* @_ZN13CXFA_FFWidget11OnMouseMoveEjRK13CFX_PTemplateIfE to i8*), i8* bitcast (i1 (%class.CXFA_FFWidget*, i32, %class.CFX_PTemplate*, %class.CFX_VTemplate*)* @_ZN13CXFA_FFWidget12OnMouseWheelEjRK13CFX_PTemplateIfERK13CFX_VTemplateIiE to i8*), i8* bitcast (i1 (%class.CXFA_FFWidget*, i32, %class.CFX_PTemplate*)* @_ZN13CXFA_FFWidget13OnRButtonDownEjRK13CFX_PTemplateIfE to i8*), i8* bitcast (i1 (%class.CXFA_FFWidget*, i32, %class.CFX_PTemplate*)* @_ZN13CXFA_FFWidget11OnRButtonUpEjRK13CFX_PTemplateIfE to i8*), i8* bitcast (i1 (%class.CXFA_FFWidget*, i32, %class.CFX_PTemplate*)* @_ZN13CXFA_FFWidget15OnRButtonDblClkEjRK13CFX_PTemplateIfE to i8*), i8* bitcast (i1 (%class.CXFA_FFWidget*, %class.CXFA_FFWidget*)* @_ZN13CXFA_FFWidget10OnSetFocusEPS_ to i8*), i8* bitcast (i1 (%class.CXFA_FFWidget*, %class.CXFA_FFWidget*)* @_ZN13CXFA_FFWidget11OnKillFocusEPS_ to i8*), i8* bitcast (i1 (%class.CXFA_FFWidget*, i32, i32)* @_ZN13CXFA_FFWidget9OnKeyDownEjj to i8*), i8* bitcast (i1 (%class.CXFA_FFWidget*, i32, i32)* @_ZN13CXFA_FFWidget7OnKeyUpEjj to i8*), i8* bitcast (i1 (%class.CXFA_FFWidget*, i32, i32)* @_ZN13CXFA_FFWidget6OnCharEjj to i8*), i8* bitcast (i32 (%class.CXFA_FFWidget*, %class.CFX_PTemplate*)* @_ZN13CXFA_FFWidget7HitTestERK13CFX_PTemplateIfE to i8*), i8* bitcast (i1 (%class.CXFA_FFWidget*)* @_ZN13CXFA_FFWidget7CanUndoEv to i8*), i8* bitcast (i1 (%class.CXFA_FFWidget*)* @_ZN13CXFA_FFWidget7CanRedoEv to i8*), i8* bitcast (i1 (%class.CXFA_FFWidget*)* @_ZN13CXFA_FFWidget7CanCopyEv to i8*), i8* bitcast (i1 (%class.CXFA_FFWidget*)* @_ZN13CXFA_FFWidget6CanCutEv to i8*), i8* bitcast (i1 (%class.CXFA_FFWidget*)* @_ZN13CXFA_FFWidget8CanPasteEv to i8*), i8* bitcast (i1 (%class.CXFA_FFWidget*)* @_ZN13CXFA_FFWidget12CanSelectAllEv to i8*), i8* bitcast (i1 (%class.CXFA_FFWidget*)* @_ZN13CXFA_FFWidget9CanDeleteEv to i8*), i8* bitcast (i1 (%class.CXFA_FFWidget*)* @_ZN13CXFA_FFWidget11CanDeSelectEv to i8*), i8* bitcast (i1 (%class.CXFA_FFWidget*)* @_ZN13CXFA_FFWidget4UndoEv to i8*), i8* bitcast (i1 (%class.CXFA_FFWidget*)* @_ZN13CXFA_FFWidget4RedoEv to i8*), i8* bitcast (void ()* @_ZN13CXFA_FFWidget4CopyEv to i8*), i8* bitcast (void ()* @_ZN13CXFA_FFWidget3CutEv to i8*), i8* bitcast (i1 (%class.CXFA_FFWidget*, %"class.fxcrt::WideString"*)* @_ZN13CXFA_FFWidget5PasteERKN5fxcrt10WideStringE to i8*), i8* bitcast (void (%class.CXFA_FFWidget*)* @_ZN13CXFA_FFWidget9SelectAllEv to i8*), i8* bitcast (void (%class.CXFA_FFWidget*)* @_ZN13CXFA_FFWidget6DeleteEv to i8*), i8* bitcast (void (%class.CXFA_FFWidget*)* @_ZN13CXFA_FFWidget8DeSelectEv to i8*), i8* bitcast (void (%"class.fxcrt::WideString"*, %class.CXFA_FFWidget*)* @_ZN13CXFA_FFWidget7GetTextEv to i8*), i8* bitcast (i8 (%class.CXFA_FFWidget*)* @_ZN13CXFA_FFWidget16GetFormFieldTypeEv to i8*), i8* bitcast (i1 (%class.CXFA_FFWidget*, %class.CFX_PTemplate*)* @_ZN13CXFA_FFWidget14PtInActiveRectERK13CFX_PTemplateIfE to i8*)] }, align 8

@_ZN11CXFA_FFLineC1EP9CXFA_Node = hidden unnamed_addr alias void (%class.CXFA_FFLine*, %class.CXFA_Node*), void (%class.CXFA_FFLine*, %class.CXFA_Node*)* @_ZN11CXFA_FFLineC2EP9CXFA_Node
@_ZN11CXFA_FFLineD1Ev = hidden unnamed_addr alias void (%class.CXFA_FFLine*), void (%class.CXFA_FFLine*)* @_ZN11CXFA_FFLineD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11CXFA_FFLineC2EP9CXFA_Node(%class.CXFA_FFLine*, %class.CXFA_Node*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CXFA_FFLine, %class.CXFA_FFLine* %0, i64 0, i32 0
  tail call void @_ZN13CXFA_FFWidgetC2EP9CXFA_Node(%class.CXFA_FFWidget* %3, %class.CXFA_Node* %1) #5
  %4 = getelementptr inbounds %class.CXFA_FFLine, %class.CXFA_FFLine* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [53 x i8*] }, { [53 x i8*] }* @_ZTV11CXFA_FFLine, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  ret void
}

declare void @_ZN13CXFA_FFWidgetC2EP9CXFA_Node(%class.CXFA_FFWidget*, %class.CXFA_Node*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN13CXFA_FFWidgetD2Ev(%class.CXFA_FFWidget*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11CXFA_FFLineD2Ev(%class.CXFA_FFLine*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CXFA_FFLine, %class.CXFA_FFLine* %0, i64 0, i32 0
  tail call void @_ZN13CXFA_FFWidgetD2Ev(%class.CXFA_FFWidget* %2) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11CXFA_FFLineD0Ev(%class.CXFA_FFLine*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CXFA_FFLine, %class.CXFA_FFLine* %0, i64 0, i32 0
  tail call void @_ZN13CXFA_FFWidgetD2Ev(%class.CXFA_FFWidget* %2) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN11CXFA_FFLine15GetRectFromHandER9CFX_RectF18XFA_AttributeValuef(%class.CXFA_FFLine* nocapture readnone, %class.CFX_RectF* nocapture dereferenceable(16), i16 zeroext, float) local_unnamed_addr #3 align 2 {
  %5 = fmul float %3, 5.000000e-01
  %6 = getelementptr inbounds %class.CFX_RectF, %class.CFX_RectF* %1, i64 0, i32 3
  %7 = load float, float* %6, align 4
  %8 = fcmp olt float %7, 1.000000e+00
  br i1 %8, label %9, label %18

9:                                                ; preds = %4
  switch i16 %2, label %52 [
    i16 252, label %10
    i16 54, label %14
  ]

10:                                               ; preds = %9
  %11 = getelementptr inbounds %class.CFX_RectF, %class.CFX_RectF* %1, i64 0, i32 1
  %12 = load float, float* %11, align 4
  %13 = fsub float %12, %5
  store float %13, float* %11, align 4
  br label %52

14:                                               ; preds = %9
  %15 = getelementptr inbounds %class.CFX_RectF, %class.CFX_RectF* %1, i64 0, i32 1
  %16 = load float, float* %15, align 4
  %17 = fadd float %5, %16
  store float %17, float* %15, align 4
  br label %52

18:                                               ; preds = %4
  %19 = getelementptr inbounds %class.CFX_RectF, %class.CFX_RectF* %1, i64 0, i32 2
  %20 = load float, float* %19, align 4
  %21 = fcmp olt float %20, 1.000000e+00
  br i1 %21, label %22, label %31

22:                                               ; preds = %18
  switch i16 %2, label %52 [
    i16 252, label %23
    i16 54, label %27
  ]

23:                                               ; preds = %22
  %24 = getelementptr inbounds %class.CFX_RectF, %class.CFX_RectF* %1, i64 0, i32 0
  %25 = load float, float* %24, align 4
  %26 = fadd float %5, %25
  store float %26, float* %24, align 4
  br label %52

27:                                               ; preds = %22
  %28 = getelementptr inbounds %class.CFX_RectF, %class.CFX_RectF* %1, i64 0, i32 0
  %29 = load float, float* %28, align 4
  %30 = fadd float %5, %29
  store float %30, float* %28, align 4
  br label %52

31:                                               ; preds = %18
  switch i16 %2, label %52 [
    i16 252, label %32
    i16 54, label %42
  ]

32:                                               ; preds = %31
  %33 = getelementptr inbounds %class.CFX_RectF, %class.CFX_RectF* %1, i64 0, i32 0
  %34 = load float, float* %33, align 4
  %35 = fsub float %34, %5
  store float %35, float* %33, align 4
  %36 = fmul float %5, 2.000000e+00
  %37 = fadd float %36, %20
  store float %37, float* %19, align 4
  %38 = getelementptr inbounds %class.CFX_RectF, %class.CFX_RectF* %1, i64 0, i32 1
  %39 = load float, float* %38, align 4
  %40 = fsub float %39, %5
  store float %40, float* %38, align 4
  %41 = fadd float %36, %7
  store float %41, float* %6, align 4
  br label %52

42:                                               ; preds = %31
  %43 = getelementptr inbounds %class.CFX_RectF, %class.CFX_RectF* %1, i64 0, i32 0
  %44 = load float, float* %43, align 4
  %45 = fadd float %5, %44
  store float %45, float* %43, align 4
  %46 = fmul float %5, 2.000000e+00
  %47 = fsub float %20, %46
  store float %47, float* %19, align 4
  %48 = getelementptr inbounds %class.CFX_RectF, %class.CFX_RectF* %1, i64 0, i32 1
  %49 = load float, float* %48, align 4
  %50 = fadd float %5, %49
  store float %50, float* %48, align 4
  %51 = fsub float %7, %46
  store float %51, float* %6, align 4
  br label %52

52:                                               ; preds = %22, %27, %23, %31, %42, %32, %10, %14, %9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11CXFA_FFLine12RenderWidgetEP16CFGAS_GEGraphicsRK10CFX_MatrixN13CXFA_FFWidget15HighlightOptionE(%class.CXFA_FFLine*, %class.CFGAS_GEGraphics*, %class.CFX_Matrix* nocapture readonly dereferenceable(24), i32) unnamed_addr #0 align 2 {
  %5 = alloca %class.CFX_Matrix, align 16
  %6 = alloca { <2 x float>, <2 x float> }, align 8
  %7 = bitcast { <2 x float>, <2 x float> }* %6 to %class.CFX_RectF*
  %8 = alloca %class.CFGAS_GEPath, align 8
  %9 = alloca %class.CFX_PTemplate, align 4
  %10 = alloca %class.CFX_PTemplate, align 4
  %11 = alloca %class.CFX_PTemplate, align 4
  %12 = alloca %class.CFX_PTemplate, align 4
  %13 = alloca %class.CFGAS_GEColor, align 8
  %14 = getelementptr inbounds %class.CXFA_FFLine, %class.CXFA_FFLine* %0, i64 0, i32 0
  %15 = tail call zeroext i1 @_ZNK13CXFA_FFWidget16HasVisibleStatusEv(%class.CXFA_FFWidget* %14) #5
  br i1 %15, label %16, label %196

16:                                               ; preds = %4
  %17 = getelementptr inbounds %class.CXFA_FFLine, %class.CXFA_FFLine* %0, i64 0, i32 0, i32 4
  %18 = bitcast %"class.cppgc::internal::BasicMember.2"* %17 to %class.CXFA_Node**
  %19 = load %class.CXFA_Node*, %class.CXFA_Node** %18, align 8
  %20 = tail call %class.CXFA_Value* @_ZNK9CXFA_Node20GetFormValueIfExistsEv(%class.CXFA_Node* %19) #5
  %21 = icmp eq %class.CXFA_Value* %20, null
  br i1 %21, label %196, label %22

22:                                               ; preds = %16
  %23 = tail call %class.CXFA_Line* @_ZNK10CXFA_Value15GetLineIfExistsEv(%class.CXFA_Value* nonnull %20) #5
  %24 = icmp ne %class.CXFA_Line* %23, null
  br i1 %24, label %25, label %36

25:                                               ; preds = %22
  %26 = tail call %class.CXFA_Edge* @_ZN9CXFA_Line15GetEdgeIfExistsEv(%class.CXFA_Line* nonnull %23) #5
  %27 = icmp eq %class.CXFA_Edge* %26, null
  br i1 %27, label %36, label %28

28:                                               ; preds = %25
  %29 = getelementptr inbounds %class.CXFA_Edge, %class.CXFA_Edge* %26, i64 0, i32 0
  %30 = tail call zeroext i1 @_ZN11CXFA_Stroke9IsVisibleEv(%class.CXFA_Stroke* %29) #5
  br i1 %30, label %31, label %196

31:                                               ; preds = %28
  %32 = tail call i32 @_ZN11CXFA_Stroke8GetColorEv(%class.CXFA_Stroke* %29) #5
  %33 = tail call zeroext i16 @_ZN11CXFA_Stroke13GetStrokeTypeEv(%class.CXFA_Stroke* %29) #5
  %34 = tail call float @_ZNK11CXFA_Stroke12GetThicknessEv(%class.CXFA_Stroke* %29) #5
  %35 = tail call zeroext i16 @_ZN11CXFA_Stroke10GetCapTypeEv(%class.CXFA_Stroke* %29) #5
  br label %36

36:                                               ; preds = %25, %31, %22
  %37 = phi i32 [ -16777216, %22 ], [ -16777216, %25 ], [ %32, %31 ]
  %38 = phi float [ 1.000000e+00, %22 ], [ 1.000000e+00, %25 ], [ %34, %31 ]
  %39 = phi i16 [ 165, %22 ], [ 165, %25 ], [ %33, %31 ]
  %40 = phi i16 [ 165, %22 ], [ 165, %25 ], [ %35, %31 ]
  %41 = bitcast %class.CFX_Matrix* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %41) #5
  %42 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %5, i64 0, i32 0
  %43 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %5, i64 0, i32 1
  %44 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %5, i64 0, i32 2
  %45 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %5, i64 0, i32 3
  %46 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %5, i64 0, i32 4
  %47 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %5, i64 0, i32 5
  %48 = bitcast %class.CFX_Matrix* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %48, i8 -1, i64 24, i1 false)
  call void @_ZN13CXFA_FFWidget15GetRotateMatrixEv(%class.CFX_Matrix* nonnull sret %5, %class.CXFA_FFWidget* %14) #5
  %49 = load float, float* %42, align 16, !noalias !2
  %50 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %2, i64 0, i32 0
  %51 = load float, float* %50, align 4, !noalias !2
  %52 = load float, float* %43, align 4, !noalias !2
  %53 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %2, i64 0, i32 2
  %54 = load float, float* %53, align 4, !noalias !2
  %55 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %2, i64 0, i32 1
  %56 = load float, float* %55, align 4, !noalias !2
  %57 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %2, i64 0, i32 3
  %58 = load float, float* %57, align 4, !noalias !2
  %59 = load float, float* %44, align 8, !noalias !2
  %60 = load float, float* %45, align 4, !noalias !2
  %61 = insertelement <4 x float> undef, float %49, i32 0
  %62 = insertelement <4 x float> %61, float %49, i32 1
  %63 = insertelement <4 x float> %62, float %51, i32 2
  %64 = insertelement <4 x float> %63, float %56, i32 3
  %65 = insertelement <4 x float> undef, float %51, i32 0
  %66 = insertelement <4 x float> %65, float %56, i32 1
  %67 = insertelement <4 x float> %66, float %59, i32 2
  %68 = insertelement <4 x float> %67, float %59, i32 3
  %69 = fmul <4 x float> %64, %68
  %70 = insertelement <4 x float> undef, float %52, i32 0
  %71 = insertelement <4 x float> %70, float %52, i32 1
  %72 = insertelement <4 x float> %71, float %54, i32 2
  %73 = insertelement <4 x float> %72, float %58, i32 3
  %74 = insertelement <4 x float> undef, float %54, i32 0
  %75 = insertelement <4 x float> %74, float %58, i32 1
  %76 = insertelement <4 x float> %75, float %60, i32 2
  %77 = insertelement <4 x float> %76, float %60, i32 3
  %78 = fmul <4 x float> %73, %77
  %79 = fadd <4 x float> %69, %78
  %80 = load float, float* %46, align 16, !noalias !2
  %81 = fmul float %51, %80
  %82 = load float, float* %47, align 4, !noalias !2
  %83 = fmul float %54, %82
  %84 = fadd float %81, %83
  %85 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %2, i64 0, i32 4
  %86 = load float, float* %85, align 4, !noalias !2
  %87 = fadd float %86, %84
  %88 = fmul float %56, %80
  %89 = fmul float %58, %82
  %90 = fadd float %88, %89
  %91 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %2, i64 0, i32 5
  %92 = load float, float* %91, align 4, !noalias !2
  %93 = fadd float %90, %92
  %94 = bitcast %class.CFX_Matrix* %5 to <4 x float>*
  store <4 x float> %79, <4 x float>* %94, align 16
  store float %87, float* %46, align 16
  store float %93, float* %47, align 4
  %95 = bitcast { <2 x float>, <2 x float> }* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %95) #5
  %96 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 0, i64 0
  %97 = getelementptr inbounds %class.CFX_RectF, %class.CFX_RectF* %7, i64 0, i32 1
  %98 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 1, i64 0
  %99 = getelementptr inbounds %class.CFX_RectF, %class.CFX_RectF* %7, i64 0, i32 3
  %100 = call { <2 x float>, <2 x float> } @_ZN13CXFA_FFWidget20GetRectWithoutRotateEv(%class.CXFA_FFWidget* %14) #5
  %101 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 0
  %102 = extractvalue { <2 x float>, <2 x float> } %100, 0
  store <2 x float> %102, <2 x float>* %101, align 8
  %103 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 1
  %104 = extractvalue { <2 x float>, <2 x float> } %100, 1
  store <2 x float> %104, <2 x float>* %103, align 8
  %105 = load %class.CXFA_Node*, %class.CXFA_Node** %18, align 8
  %106 = call %class.CXFA_Margin* @_ZNK9CXFA_Node17GetMarginIfExistsEv(%class.CXFA_Node* %105) #5
  call void @_Z21XFA_RectWithoutMarginP9CFX_RectFPK11CXFA_Margin(%class.CFX_RectF* nonnull %7, %class.CXFA_Margin* %106) #5
  br i1 %24, label %107, label %109

107:                                              ; preds = %36
  %108 = call zeroext i16 @_ZN9CXFA_Line7GetHandEv(%class.CXFA_Line* nonnull %23) #5
  br label %109

109:                                              ; preds = %36, %107
  %110 = phi i16 [ %108, %107 ], [ 252, %36 ]
  %111 = fmul float %38, 5.000000e-01
  %112 = load float, float* %99, align 4
  %113 = fcmp olt float %112, 1.000000e+00
  br i1 %113, label %114, label %121

114:                                              ; preds = %109
  switch i16 %110, label %148 [
    i16 252, label %115
    i16 54, label %118
  ]

115:                                              ; preds = %114
  %116 = load float, float* %97, align 4
  %117 = fsub float %116, %111
  store float %117, float* %97, align 4
  br label %148

118:                                              ; preds = %114
  %119 = load float, float* %97, align 4
  %120 = fadd float %111, %119
  store float %120, float* %97, align 4
  br label %148

121:                                              ; preds = %109
  %122 = load float, float* %98, align 8
  %123 = fcmp olt float %122, 1.000000e+00
  br i1 %123, label %124, label %131

124:                                              ; preds = %121
  switch i16 %110, label %148 [
    i16 252, label %125
    i16 54, label %128
  ]

125:                                              ; preds = %124
  %126 = load float, float* %96, align 8
  %127 = fadd float %111, %126
  store float %127, float* %96, align 8
  br label %148

128:                                              ; preds = %124
  %129 = load float, float* %96, align 8
  %130 = fadd float %111, %129
  store float %130, float* %96, align 8
  br label %148

131:                                              ; preds = %121
  switch i16 %110, label %148 [
    i16 252, label %132
    i16 54, label %140
  ]

132:                                              ; preds = %131
  %133 = load float, float* %96, align 8
  %134 = fsub float %133, %111
  store float %134, float* %96, align 8
  %135 = fmul float %111, 2.000000e+00
  %136 = fadd float %135, %122
  store float %136, float* %98, align 8
  %137 = load float, float* %97, align 4
  %138 = fsub float %137, %111
  store float %138, float* %97, align 4
  %139 = fadd float %135, %112
  store float %139, float* %99, align 4
  br label %148

140:                                              ; preds = %131
  %141 = load float, float* %96, align 8
  %142 = fadd float %111, %141
  store float %142, float* %96, align 8
  %143 = fmul float %111, 2.000000e+00
  %144 = fsub float %122, %143
  store float %144, float* %98, align 8
  %145 = load float, float* %97, align 4
  %146 = fadd float %111, %145
  store float %146, float* %97, align 4
  %147 = fsub float %112, %143
  store float %147, float* %99, align 4
  br label %148

148:                                              ; preds = %114, %115, %118, %124, %125, %128, %131, %132, %140
  %149 = bitcast %class.CFGAS_GEPath* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %149) #5
  %150 = bitcast %class.CFGAS_GEPath* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %150, i8 -86, i64 24, i1 false)
  call void @_ZN12CFGAS_GEPathC1Ev(%class.CFGAS_GEPath* nonnull %8) #5
  br i1 %24, label %151, label %170

151:                                              ; preds = %148
  %152 = call zeroext i1 @_ZN9CXFA_Line8GetSlopeEv(%class.CXFA_Line* nonnull %23) #5
  br i1 %152, label %153, label %170

153:                                              ; preds = %151
  %154 = load float, float* %96, align 8
  %155 = load float, float* %98, align 8
  %156 = fadd float %154, %155
  %157 = fcmp ogt float %156, 0.000000e+00
  br i1 %157, label %158, label %170

158:                                              ; preds = %153
  %159 = load float, float* %97, align 4
  %160 = load float, float* %99, align 4
  %161 = fadd float %159, %160
  %162 = fcmp ogt float %161, 0.000000e+00
  br i1 %162, label %163, label %170

163:                                              ; preds = %158
  %164 = bitcast %class.CFX_PTemplate* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %164) #5
  %165 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %9, i64 0, i32 0
  store float %156, float* %165, align 4, !alias.scope !5
  %166 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %9, i64 0, i32 1
  store float %159, float* %166, align 4, !alias.scope !5
  %167 = bitcast %class.CFX_PTemplate* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %167) #5
  %168 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %10, i64 0, i32 0
  store float %154, float* %168, align 4, !alias.scope !8
  %169 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %10, i64 0, i32 1
  store float %161, float* %169, align 4, !alias.scope !8
  call void @_ZN12CFGAS_GEPath7AddLineERK13CFX_PTemplateIfES3_(%class.CFGAS_GEPath* nonnull %8, %class.CFX_PTemplate* nonnull dereferenceable(8) %9, %class.CFX_PTemplate* nonnull dereferenceable(8) %10) #5
  br label %188

170:                                              ; preds = %158, %153, %151, %148
  %171 = bitcast %class.CFX_PTemplate* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %171) #5
  %172 = bitcast { <2 x float>, <2 x float> }* %6 to i32*
  %173 = load i32, i32* %172, align 8, !noalias !11
  %174 = bitcast float* %97 to i32*
  %175 = load i32, i32* %174, align 4, !noalias !11
  %176 = bitcast %class.CFX_PTemplate* %11 to i32*
  store i32 %173, i32* %176, align 4, !alias.scope !11
  %177 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %11, i64 0, i32 1
  %178 = bitcast float* %177 to i32*
  store i32 %175, i32* %178, align 4, !alias.scope !11
  %179 = bitcast %class.CFX_PTemplate* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %179) #5
  %180 = bitcast i32 %173 to float
  %181 = load float, float* %98, align 8, !noalias !14
  %182 = fadd float %181, %180
  %183 = bitcast i32 %175 to float
  %184 = load float, float* %99, align 4, !noalias !14
  %185 = fadd float %184, %183
  %186 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %12, i64 0, i32 0
  store float %182, float* %186, align 4, !alias.scope !14
  %187 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %12, i64 0, i32 1
  store float %185, float* %187, align 4, !alias.scope !14
  call void @_ZN12CFGAS_GEPath7AddLineERK13CFX_PTemplateIfES3_(%class.CFGAS_GEPath* nonnull %8, %class.CFX_PTemplate* nonnull dereferenceable(8) %11, %class.CFX_PTemplate* nonnull dereferenceable(8) %12) #5
  br label %188

188:                                              ; preds = %170, %163
  %189 = phi i8* [ %179, %170 ], [ %167, %163 ]
  %190 = phi i8* [ %171, %170 ], [ %164, %163 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %189) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %190) #5
  call void @_ZN16CFGAS_GEGraphics14SaveGraphStateEv(%class.CFGAS_GEGraphics* %1) #5
  call void @_ZN16CFGAS_GEGraphics12SetLineWidthEf(%class.CFGAS_GEGraphics* %1, float %38) #5
  call void @_ZN16CFGAS_GEGraphics15EnableActOnDashEv(%class.CFGAS_GEGraphics* %1) #5
  call void @_Z25XFA_StrokeTypeSetLineDashP16CFGAS_GEGraphics18XFA_AttributeValueS1_(%class.CFGAS_GEGraphics* %1, i16 zeroext %39, i16 zeroext %40) #5
  %191 = bitcast %class.CFGAS_GEColor* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %191) #5
  call void @_ZN13CFGAS_GEColorC1Ej(%class.CFGAS_GEColor* nonnull %13, i32 %37) #5
  call void @_ZN16CFGAS_GEGraphics14SetStrokeColorERK13CFGAS_GEColor(%class.CFGAS_GEGraphics* %1, %class.CFGAS_GEColor* nonnull dereferenceable(24) %13) #5
  call void @_ZN13CFGAS_GEColorD1Ev(%class.CFGAS_GEColor* nonnull %13) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %191) #5
  %192 = icmp eq i16 %40, 189
  %193 = select i1 %192, i8 0, i8 2
  %194 = icmp eq i16 %40, 93
  %195 = select i1 %194, i8 1, i8 %193
  call void @_ZN16CFGAS_GEGraphics10SetLineCapEN18CFX_GraphStateData7LineCapE(%class.CFGAS_GEGraphics* %1, i8 zeroext %195) #5
  call void @_ZN16CFGAS_GEGraphics10StrokePathERK12CFGAS_GEPathRK10CFX_Matrix(%class.CFGAS_GEGraphics* %1, %class.CFGAS_GEPath* nonnull dereferenceable(24) %8, %class.CFX_Matrix* nonnull dereferenceable(24) %5) #5
  call void @_ZN16CFGAS_GEGraphics17RestoreGraphStateEv(%class.CFGAS_GEGraphics* %1) #5
  call void @_ZN12CFGAS_GEPathD1Ev(%class.CFGAS_GEPath* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %149) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %95) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %41) #5
  br label %196

196:                                              ; preds = %28, %16, %188, %4
  ret void
}

declare zeroext i1 @_ZNK13CXFA_FFWidget16HasVisibleStatusEv(%class.CXFA_FFWidget*) local_unnamed_addr #1

declare %class.CXFA_Value* @_ZNK9CXFA_Node20GetFormValueIfExistsEv(%class.CXFA_Node*) local_unnamed_addr #1

declare %class.CXFA_Line* @_ZNK10CXFA_Value15GetLineIfExistsEv(%class.CXFA_Value*) local_unnamed_addr #1

declare %class.CXFA_Edge* @_ZN9CXFA_Line15GetEdgeIfExistsEv(%class.CXFA_Line*) local_unnamed_addr #1

declare zeroext i1 @_ZN11CXFA_Stroke9IsVisibleEv(%class.CXFA_Stroke*) local_unnamed_addr #1

declare i32 @_ZN11CXFA_Stroke8GetColorEv(%class.CXFA_Stroke*) local_unnamed_addr #1

declare zeroext i16 @_ZN11CXFA_Stroke13GetStrokeTypeEv(%class.CXFA_Stroke*) local_unnamed_addr #1

declare float @_ZNK11CXFA_Stroke12GetThicknessEv(%class.CXFA_Stroke*) local_unnamed_addr #1

declare zeroext i16 @_ZN11CXFA_Stroke10GetCapTypeEv(%class.CXFA_Stroke*) local_unnamed_addr #1

declare void @_ZN13CXFA_FFWidget15GetRotateMatrixEv(%class.CFX_Matrix* sret, %class.CXFA_FFWidget*) unnamed_addr #1

declare { <2 x float>, <2 x float> } @_ZN13CXFA_FFWidget20GetRectWithoutRotateEv(%class.CXFA_FFWidget*) local_unnamed_addr #1

declare %class.CXFA_Margin* @_ZNK9CXFA_Node17GetMarginIfExistsEv(%class.CXFA_Node*) local_unnamed_addr #1

declare void @_Z21XFA_RectWithoutMarginP9CFX_RectFPK11CXFA_Margin(%class.CFX_RectF*, %class.CXFA_Margin*) local_unnamed_addr #1

declare zeroext i16 @_ZN9CXFA_Line7GetHandEv(%class.CXFA_Line*) local_unnamed_addr #1

declare void @_ZN12CFGAS_GEPathC1Ev(%class.CFGAS_GEPath*) unnamed_addr #1

declare zeroext i1 @_ZN9CXFA_Line8GetSlopeEv(%class.CXFA_Line*) local_unnamed_addr #1

declare void @_ZN12CFGAS_GEPath7AddLineERK13CFX_PTemplateIfES3_(%class.CFGAS_GEPath*, %class.CFX_PTemplate* dereferenceable(8), %class.CFX_PTemplate* dereferenceable(8)) local_unnamed_addr #1

declare void @_ZN16CFGAS_GEGraphics14SaveGraphStateEv(%class.CFGAS_GEGraphics*) local_unnamed_addr #1

declare void @_ZN16CFGAS_GEGraphics12SetLineWidthEf(%class.CFGAS_GEGraphics*, float) local_unnamed_addr #1

declare void @_ZN16CFGAS_GEGraphics15EnableActOnDashEv(%class.CFGAS_GEGraphics*) local_unnamed_addr #1

declare void @_Z25XFA_StrokeTypeSetLineDashP16CFGAS_GEGraphics18XFA_AttributeValueS1_(%class.CFGAS_GEGraphics*, i16 zeroext, i16 zeroext) local_unnamed_addr #1

declare void @_ZN16CFGAS_GEGraphics14SetStrokeColorERK13CFGAS_GEColor(%class.CFGAS_GEGraphics*, %class.CFGAS_GEColor* dereferenceable(24)) local_unnamed_addr #1

declare void @_ZN13CFGAS_GEColorC1Ej(%class.CFGAS_GEColor*, i32) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN13CFGAS_GEColorD1Ev(%class.CFGAS_GEColor*) unnamed_addr #2

declare void @_ZN16CFGAS_GEGraphics10SetLineCapEN18CFX_GraphStateData7LineCapE(%class.CFGAS_GEGraphics*, i8 zeroext) local_unnamed_addr #1

declare void @_ZN16CFGAS_GEGraphics10StrokePathERK12CFGAS_GEPathRK10CFX_Matrix(%class.CFGAS_GEGraphics*, %class.CFGAS_GEPath* dereferenceable(24), %class.CFX_Matrix* dereferenceable(24)) local_unnamed_addr #1

declare void @_ZN16CFGAS_GEGraphics17RestoreGraphStateEv(%class.CFGAS_GEGraphics*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN12CFGAS_GEPathD1Ev(%class.CFGAS_GEPath*) unnamed_addr #2

declare void @_ZNK13CXFA_FFWidget5TraceEPN5cppgc7VisitorE(%class.CXFA_FFWidget*, %"class.cppgc::Visitor"*) unnamed_addr #1

declare void @_ZN13CXFA_FFWidget12DisplayCaretEbPK9CFX_RectF(%class.CXFA_FFWidget*, i1 zeroext, %class.CFX_RectF*) unnamed_addr #1

declare void @_ZN13CXFA_FFWidget26GetBorderColorAndThicknessEPjPf(%class.CXFA_FFWidget*, i32*, float*) unnamed_addr #1

declare void @_ZN13CXFA_FFWidget11PreFinalizeEv(%class.CXFA_FFWidget*) unnamed_addr #1

declare %class.CXFA_FFField* @_ZN13CXFA_FFWidget7AsFieldEv(%class.CXFA_FFWidget*) unnamed_addr #1

declare { <2 x float>, <2 x float> } @_ZN13CXFA_FFWidget7GetBBoxENS_11FocusOptionE(%class.CXFA_FFWidget*, i32) unnamed_addr #1

declare zeroext i1 @_ZN13CXFA_FFWidget8IsLoadedEv(%class.CXFA_FFWidget*) unnamed_addr #1

declare zeroext i1 @_ZN13CXFA_FFWidget10LoadWidgetEv(%class.CXFA_FFWidget*) unnamed_addr #1

declare zeroext i1 @_ZN13CXFA_FFWidget13PerformLayoutEv(%class.CXFA_FFWidget*) unnamed_addr #1

declare zeroext i1 @_ZN13CXFA_FFWidget13UpdateFWLDataEv(%class.CXFA_FFWidget*) unnamed_addr #1

declare void @_ZN13CXFA_FFWidget20UpdateWidgetPropertyEv(%class.CXFA_FFWidget*) unnamed_addr #1

declare zeroext i1 @_ZN13CXFA_FFWidget24AcceptsFocusOnButtonDownEjRK13CFX_PTemplateIfE16FWL_MouseCommand(%class.CXFA_FFWidget*, i32, %class.CFX_PTemplate* dereferenceable(8), i8 zeroext) unnamed_addr #1

declare zeroext i1 @_ZN13CXFA_FFWidget12OnMouseEnterEv(%class.CXFA_FFWidget*) unnamed_addr #1

declare zeroext i1 @_ZN13CXFA_FFWidget11OnMouseExitEv(%class.CXFA_FFWidget*) unnamed_addr #1

declare zeroext i1 @_ZN13CXFA_FFWidget13OnLButtonDownEjRK13CFX_PTemplateIfE(%class.CXFA_FFWidget*, i32, %class.CFX_PTemplate* dereferenceable(8)) unnamed_addr #1

declare zeroext i1 @_ZN13CXFA_FFWidget11OnLButtonUpEjRK13CFX_PTemplateIfE(%class.CXFA_FFWidget*, i32, %class.CFX_PTemplate* dereferenceable(8)) unnamed_addr #1

declare zeroext i1 @_ZN13CXFA_FFWidget15OnLButtonDblClkEjRK13CFX_PTemplateIfE(%class.CXFA_FFWidget*, i32, %class.CFX_PTemplate* dereferenceable(8)) unnamed_addr #1

declare zeroext i1 @_ZN13CXFA_FFWidget11OnMouseMoveEjRK13CFX_PTemplateIfE(%class.CXFA_FFWidget*, i32, %class.CFX_PTemplate* dereferenceable(8)) unnamed_addr #1

declare zeroext i1 @_ZN13CXFA_FFWidget12OnMouseWheelEjRK13CFX_PTemplateIfERK13CFX_VTemplateIiE(%class.CXFA_FFWidget*, i32, %class.CFX_PTemplate* dereferenceable(8), %class.CFX_VTemplate*) unnamed_addr #1

declare zeroext i1 @_ZN13CXFA_FFWidget13OnRButtonDownEjRK13CFX_PTemplateIfE(%class.CXFA_FFWidget*, i32, %class.CFX_PTemplate* dereferenceable(8)) unnamed_addr #1

declare zeroext i1 @_ZN13CXFA_FFWidget11OnRButtonUpEjRK13CFX_PTemplateIfE(%class.CXFA_FFWidget*, i32, %class.CFX_PTemplate* dereferenceable(8)) unnamed_addr #1

declare zeroext i1 @_ZN13CXFA_FFWidget15OnRButtonDblClkEjRK13CFX_PTemplateIfE(%class.CXFA_FFWidget*, i32, %class.CFX_PTemplate* dereferenceable(8)) unnamed_addr #1

declare zeroext i1 @_ZN13CXFA_FFWidget10OnSetFocusEPS_(%class.CXFA_FFWidget*, %class.CXFA_FFWidget*) unnamed_addr #1

declare zeroext i1 @_ZN13CXFA_FFWidget11OnKillFocusEPS_(%class.CXFA_FFWidget*, %class.CXFA_FFWidget*) unnamed_addr #1

declare zeroext i1 @_ZN13CXFA_FFWidget9OnKeyDownEjj(%class.CXFA_FFWidget*, i32, i32) unnamed_addr #1

declare zeroext i1 @_ZN13CXFA_FFWidget7OnKeyUpEjj(%class.CXFA_FFWidget*, i32, i32) unnamed_addr #1

declare zeroext i1 @_ZN13CXFA_FFWidget6OnCharEjj(%class.CXFA_FFWidget*, i32, i32) unnamed_addr #1

declare i32 @_ZN13CXFA_FFWidget7HitTestERK13CFX_PTemplateIfE(%class.CXFA_FFWidget*, %class.CFX_PTemplate* dereferenceable(8)) unnamed_addr #1

declare zeroext i1 @_ZN13CXFA_FFWidget7CanUndoEv(%class.CXFA_FFWidget*) unnamed_addr #1

declare zeroext i1 @_ZN13CXFA_FFWidget7CanRedoEv(%class.CXFA_FFWidget*) unnamed_addr #1

declare zeroext i1 @_ZN13CXFA_FFWidget7CanCopyEv(%class.CXFA_FFWidget*) unnamed_addr #1

declare zeroext i1 @_ZN13CXFA_FFWidget6CanCutEv(%class.CXFA_FFWidget*) unnamed_addr #1

declare zeroext i1 @_ZN13CXFA_FFWidget8CanPasteEv(%class.CXFA_FFWidget*) unnamed_addr #1

declare zeroext i1 @_ZN13CXFA_FFWidget12CanSelectAllEv(%class.CXFA_FFWidget*) unnamed_addr #1

declare zeroext i1 @_ZN13CXFA_FFWidget9CanDeleteEv(%class.CXFA_FFWidget*) unnamed_addr #1

declare zeroext i1 @_ZN13CXFA_FFWidget11CanDeSelectEv(%class.CXFA_FFWidget*) unnamed_addr #1

declare zeroext i1 @_ZN13CXFA_FFWidget4UndoEv(%class.CXFA_FFWidget*) unnamed_addr #1

declare zeroext i1 @_ZN13CXFA_FFWidget4RedoEv(%class.CXFA_FFWidget*) unnamed_addr #1

declare void @_ZN13CXFA_FFWidget4CopyEv() unnamed_addr

declare void @_ZN13CXFA_FFWidget3CutEv() unnamed_addr

declare zeroext i1 @_ZN13CXFA_FFWidget5PasteERKN5fxcrt10WideStringE(%class.CXFA_FFWidget*, %"class.fxcrt::WideString"* dereferenceable(8)) unnamed_addr #1

declare void @_ZN13CXFA_FFWidget9SelectAllEv(%class.CXFA_FFWidget*) unnamed_addr #1

declare void @_ZN13CXFA_FFWidget6DeleteEv(%class.CXFA_FFWidget*) unnamed_addr #1

declare void @_ZN13CXFA_FFWidget8DeSelectEv(%class.CXFA_FFWidget*) unnamed_addr #1

declare void @_ZN13CXFA_FFWidget7GetTextEv(%"class.fxcrt::WideString"* sret, %class.CXFA_FFWidget*) unnamed_addr #1

declare zeroext i8 @_ZN13CXFA_FFWidget16GetFormFieldTypeEv(%class.CXFA_FFWidget*) unnamed_addr #1

declare zeroext i1 @_ZN13CXFA_FFWidget14PtInActiveRectERK13CFX_PTemplateIfE(%class.CXFA_FFWidget*, %class.CFX_PTemplate* dereferenceable(8)) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK10CFX_MatrixmlERKS_: argument 0"}
!4 = distinct !{!4, !"_ZNK10CFX_MatrixmlERKS_"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZNK9CFX_RectF8TopRightEv: argument 0"}
!7 = distinct !{!7, !"_ZNK9CFX_RectF8TopRightEv"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZNK9CFX_RectF10BottomLeftEv: argument 0"}
!10 = distinct !{!10, !"_ZNK9CFX_RectF10BottomLeftEv"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZNK9CFX_RectF7TopLeftEv: argument 0"}
!13 = distinct !{!13, !"_ZNK9CFX_RectF7TopLeftEv"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZNK9CFX_RectF11BottomRightEv: argument 0"}
!16 = distinct !{!16, !"_ZNK9CFX_RectF11BottomRightEv"}
