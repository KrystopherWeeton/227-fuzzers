; ModuleID = '../../net/ssl/cert_compression.cc'
source_filename = "../../net/ssl/cert_compression.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ssl_ctx_st = type opaque
%struct.ssl_st = type opaque
%struct.cbb_st = type { %struct.cbb_buffer_st*, %struct.cbb_st*, i64, i8, i8, i8 }
%struct.cbb_buffer_st = type { i8*, i64, i64, i8, i8 }
%struct.crypto_buffer_st = type opaque

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net31ConfigureCertificateCompressionEP10ssl_ctx_st(%struct.ssl_ctx_st*) local_unnamed_addr #0 {
  %2 = tail call i32 @SSL_CTX_add_cert_compression_alg(%struct.ssl_ctx_st* %0, i16 zeroext 2, i32 (%struct.ssl_st*, %struct.cbb_st*, i8*, i64)* null, i32 (%struct.ssl_st*, %struct.crypto_buffer_st**, i64, i8*, i64)* nonnull @_ZN3net12_GLOBAL__N_120DecompressBrotliCertEP6ssl_stPP16crypto_buffer_stmPKhm) #3
  ret void
}

declare i32 @SSL_CTX_add_cert_compression_alg(%struct.ssl_ctx_st*, i16 zeroext, i32 (%struct.ssl_st*, %struct.cbb_st*, i8*, i64)*, i32 (%struct.ssl_st*, %struct.crypto_buffer_st**, i64, i8*, i64)*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3net12_GLOBAL__N_120DecompressBrotliCertEP6ssl_stPP16crypto_buffer_stmPKhm(%struct.ssl_st* nocapture readnone, %struct.crypto_buffer_st** nocapture, i64, i8*, i64) #0 {
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #3
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %9 = call %struct.crypto_buffer_st* @CRYPTO_BUFFER_alloc(i8** nonnull %6, i64 %2) #3
  %10 = ptrtoint %struct.crypto_buffer_st* %9 to i64
  %11 = icmp eq %struct.crypto_buffer_st* %9, null
  br i1 %11, label %24, label %12

12:                                               ; preds = %5
  %13 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #3
  store i64 %2, i64* %7, align 8
  %14 = load i8*, i8** %6, align 8
  %15 = call i32 @BrotliDecoderDecompress(i64 %4, i8* %3, i64* nonnull %7, i8* %14) #3
  %16 = icmp eq i32 %15, 1
  %17 = load i64, i64* %7, align 8
  %18 = icmp eq i64 %17, %2
  %19 = and i1 %16, %18
  br i1 %19, label %20, label %21

20:                                               ; preds = %12
  store %struct.crypto_buffer_st* %9, %struct.crypto_buffer_st** %1, align 8
  br label %21

21:                                               ; preds = %12, %20
  %22 = phi i64 [ 0, %20 ], [ %10, %12 ]
  %23 = phi i32 [ 1, %20 ], [ 0, %12 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #3
  br label %24

24:                                               ; preds = %5, %21
  %25 = phi i64 [ %22, %21 ], [ %10, %5 ]
  %26 = phi i32 [ %23, %21 ], [ 0, %5 ]
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %30, label %28

28:                                               ; preds = %24
  %29 = inttoptr i64 %25 to %struct.crypto_buffer_st*
  call void @CRYPTO_BUFFER_free(%struct.crypto_buffer_st* nonnull %29) #3
  br label %30

30:                                               ; preds = %24, %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #3
  ret i32 %26
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare %struct.crypto_buffer_st* @CRYPTO_BUFFER_alloc(i8**, i64) local_unnamed_addr #1

declare i32 @BrotliDecoderDecompress(i64, i8*, i64*, i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare void @CRYPTO_BUFFER_free(%struct.crypto_buffer_st*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
