; ModuleID = '../../third_party/libzip/src/lib/zip_name_locate.c'
source_filename = "../../third_party/libzip/src/lib/zip_name_locate.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque
%struct.zip_progress = type opaque

; Function Attrs: nounwind ssp uwtable
define hidden i64 @zip_name_locate(%struct.zip*, i8*, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  %5 = tail call i64 @_zip_name_locate(%struct.zip* %0, i8* %1, i32 %2, %struct.zip_error* %4)
  ret i64 %5
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_zip_name_locate(%struct.zip*, i8*, i32, %struct.zip_error*) local_unnamed_addr #0 {
  %5 = icmp eq %struct.zip* %0, null
  br i1 %5, label %46, label %6

6:                                                ; preds = %4
  %7 = icmp eq i8* %1, null
  br i1 %7, label %8, label %9

8:                                                ; preds = %6
  tail call void @zip_error_set(%struct.zip_error* %3, i32 18, i32 0) #3
  br label %46

9:                                                ; preds = %6
  %10 = and i32 %2, 4099
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %42, label %12

12:                                               ; preds = %9
  %13 = and i32 %2, 1
  %14 = icmp eq i32 %13, 0
  %15 = select i1 %14, i32 (i8*, i8*)* @strcmp, i32 (i8*, i8*)* @strcasecmp
  %16 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 9
  %17 = load i64, i64* %16, align 8
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %41, label %19

19:                                               ; preds = %12
  %20 = and i32 %2, 2
  %21 = icmp eq i32 %20, 0
  br label %22

22:                                               ; preds = %19, %37
  %23 = phi i64 [ 0, %19 ], [ %38, %37 ]
  %24 = tail call i8* @_zip_get_name(%struct.zip* nonnull %0, i64 %23, i32 %2, %struct.zip_error* %3) #3
  %25 = icmp eq i8* %24, null
  br i1 %25, label %37, label %26

26:                                               ; preds = %22
  br i1 %21, label %32, label %27

27:                                               ; preds = %26
  %28 = tail call i8* @strrchr(i8* nonnull %24, i32 47) #4
  %29 = icmp eq i8* %28, null
  %30 = getelementptr inbounds i8, i8* %28, i64 1
  %31 = select i1 %29, i8* %24, i8* %30
  br label %32

32:                                               ; preds = %27, %26
  %33 = phi i8* [ %24, %26 ], [ %31, %27 ]
  %34 = tail call i32 %15(i8* nonnull %1, i8* %33) #3, !callees !2
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %32
  tail call void @_zip_error_clear(%struct.zip_error* %3) #3
  br label %46

37:                                               ; preds = %32, %22
  %38 = add nuw i64 %23, 1
  %39 = load i64, i64* %16, align 8
  %40 = icmp ult i64 %38, %39
  br i1 %40, label %22, label %41

41:                                               ; preds = %37, %12
  tail call void @zip_error_set(%struct.zip_error* %3, i32 9, i32 0) #3
  br label %46

42:                                               ; preds = %9
  %43 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 15
  %44 = load %struct.zip_hash*, %struct.zip_hash** %43, align 8
  %45 = tail call i64 @_zip_hash_lookup(%struct.zip_hash* %44, i8* nonnull %1, i32 %2, %struct.zip_error* %3) #3
  br label %46

46:                                               ; preds = %4, %42, %41, %36, %8
  %47 = phi i64 [ -1, %8 ], [ %23, %36 ], [ -1, %41 ], [ %45, %42 ], [ -1, %4 ]
  ret i64 %47
}

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #1

; Function Attrs: nofree nounwind readonly
declare i32 @strcasecmp(i8* nocapture, i8* nocapture) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #2

declare i8* @_zip_get_name(%struct.zip*, i64, i32, %struct.zip_error*) local_unnamed_addr #1

; Function Attrs: nofree nounwind readonly
declare i8* @strrchr(i8*, i32) local_unnamed_addr #2

declare void @_zip_error_clear(%struct.zip_error*) local_unnamed_addr #1

declare i64 @_zip_hash_lookup(%struct.zip_hash*, i8*, i32, %struct.zip_error*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 (i8*, i8*)* @strcasecmp, i32 (i8*, i8*)* @strcmp}
