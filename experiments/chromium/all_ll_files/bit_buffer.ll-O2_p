; ModuleID = '../../third_party/webrtc/rtc_base/bit_buffer.cc'
source_filename = "../../third_party/webrtc/rtc_base/bit_buffer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.rtc::BitBuffer" = type { i8*, i64, i64, i64 }
%"class.rtc::BitBufferWriter" = type { %"class.rtc::BitBuffer", i8* }

$_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t = comdat any

@.str = private unnamed_addr constant [48 x i8] c"../../third_party/webrtc/rtc_base/bit_buffer.cc\00", align 1
@.str.1 = private unnamed_addr constant [48 x i8] c"Seek(original_byte_offset, original_bit_offset)\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"out_byte_offset != nullptr\00", align 1
@.str.3 = private unnamed_addr constant [26 x i8] c"out_bit_offset != nullptr\00", align 1
@_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t = linkonce_odr hidden constant [1 x i8] zeroinitializer, comdat, align 1

@_ZN3rtc9BitBufferC1EPKhm = hidden unnamed_addr alias void (%"class.rtc::BitBuffer"*, i8*, i64), void (%"class.rtc::BitBuffer"*, i8*, i64)* @_ZN3rtc9BitBufferC2EPKhm
@_ZN3rtc15BitBufferWriterC1EPhm = hidden unnamed_addr alias void (%"class.rtc::BitBufferWriter"*, i8*, i64), void (%"class.rtc::BitBufferWriter"*, i8*, i64)* @_ZN3rtc15BitBufferWriterC2EPhm

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3rtc9BitBufferC2EPKhm(%"class.rtc::BitBuffer"* nocapture, i8*, i64) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 0
  store i8* %1, i8** %4, align 8
  %5 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 1
  store i64 %2, i64* %5, align 8
  %6 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 2
  %7 = bitcast i64* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK3rtc9BitBuffer17RemainingBitCountEv(%"class.rtc::BitBuffer"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = sub i64 %3, %5
  %7 = shl i64 %6, 3
  %8 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 3
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  ret i64 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3rtc9BitBuffer9ReadUInt8ERh(%"class.rtc::BitBuffer"* nocapture, i8* nocapture dereferenceable(1)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  %8 = shl i64 %7, 3
  %9 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 3
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %8, %10
  %12 = icmp ult i64 %11, 8
  br i1 %12, label %60, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds i8, i8* %15, i64 %6
  %17 = load i8, i8* %16, align 1
  %18 = trunc i64 %10 to i32
  %19 = sub i32 8, %18
  %20 = shl nsw i32 -1, %19
  %21 = trunc i32 %20 to i8
  %22 = xor i8 %21, -1
  %23 = and i8 %17, %22
  %24 = icmp ugt i64 %10, 8
  br i1 %24, label %25, label %33

25:                                               ; preds = %13
  %26 = sub i32 0, %18
  %27 = and i32 %26, 255
  %28 = shl i32 255, %27
  %29 = zext i8 %23 to i32
  %30 = and i32 %28, %29
  %31 = lshr i32 %30, %27
  %32 = and i32 %31, 255
  br label %53

33:                                               ; preds = %13
  %34 = zext i8 %23 to i32
  %35 = getelementptr inbounds i8, i8* %16, i64 1
  switch i64 %10, label %41 [
    i64 8, label %36
    i64 0, label %53
  ]

36:                                               ; preds = %33
  %37 = shl nuw nsw i32 %34, 8
  %38 = load i8, i8* %35, align 1
  %39 = zext i8 %38 to i32
  %40 = or i32 %37, %39
  br label %53

41:                                               ; preds = %33
  %42 = trunc i64 %10 to i32
  %43 = shl i32 %34, %42
  %44 = load i8, i8* %35, align 1
  %45 = sub nuw nsw i32 8, %42
  %46 = and i32 %45, 255
  %47 = shl i32 255, %46
  %48 = zext i8 %44 to i32
  %49 = and i32 %47, %48
  %50 = lshr i32 %49, %46
  %51 = and i32 %50, 255
  %52 = or i32 %51, %43
  br label %53

53:                                               ; preds = %33, %41, %36, %25
  %54 = phi i32 [ %32, %25 ], [ %52, %41 ], [ %40, %36 ], [ %34, %33 ]
  %55 = add i64 %10, 8
  %56 = lshr i64 %55, 3
  %57 = add i64 %56, %6
  store i64 %57, i64* %5, align 8
  %58 = and i64 %55, 7
  store i64 %58, i64* %9, align 8
  %59 = trunc i32 %54 to i8
  store i8 %59, i8* %1, align 1
  br label %60

60:                                               ; preds = %2, %53
  %61 = phi i1 [ true, %53 ], [ false, %2 ]
  ret i1 %61
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN3rtc9BitBuffer8ReadBitsEmRj(%"class.rtc::BitBuffer"* nocapture, i64, i32* nocapture dereferenceable(4)) local_unnamed_addr #4 align 2 {
  %4 = tail call zeroext i1 @_ZN3rtc9BitBuffer8PeekBitsEmRj(%"class.rtc::BitBuffer"* %0, i64 %1, i32* dereferenceable(4) %2)
  br i1 %4, label %5, label %21

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = shl i64 %10, 3
  %12 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 3
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = icmp ult i64 %14, %1
  br i1 %15, label %21, label %16

16:                                               ; preds = %5
  %17 = add i64 %13, %1
  %18 = lshr i64 %17, 3
  %19 = add i64 %18, %9
  store i64 %19, i64* %8, align 8
  %20 = and i64 %17, 7
  store i64 %20, i64* %12, align 8
  br label %21

21:                                               ; preds = %16, %5, %3
  %22 = phi i1 [ false, %3 ], [ true, %16 ], [ false, %5 ]
  ret i1 %22
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3rtc9BitBuffer10ReadUInt16ERt(%"class.rtc::BitBuffer"* nocapture, i16* nocapture dereferenceable(2)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  %8 = shl i64 %7, 3
  %9 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 3
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %8, %10
  %12 = icmp ult i64 %11, 16
  br i1 %12, label %120, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds i8, i8* %15, i64 %6
  %17 = sub i64 8, %10
  %18 = load i8, i8* %16, align 1
  %19 = trunc i64 %17 to i32
  %20 = shl nsw i32 -1, %19
  %21 = trunc i32 %20 to i8
  %22 = xor i8 %21, -1
  %23 = and i8 %18, %22
  %24 = icmp ugt i64 %17, 16
  br i1 %24, label %25, label %34

25:                                               ; preds = %13
  %26 = trunc i64 %10 to i32
  %27 = sub i32 248, %26
  %28 = and i32 %27, 255
  %29 = shl i32 255, %28
  %30 = zext i8 %23 to i32
  %31 = and i32 %29, %30
  %32 = lshr i32 %31, %28
  %33 = and i32 %32, 255
  br label %113

34:                                               ; preds = %13
  %35 = zext i8 %23 to i32
  %36 = add i64 %10, 8
  %37 = getelementptr inbounds i8, i8* %16, i64 1
  %38 = icmp ugt i64 %36, 7
  br i1 %38, label %39, label %96

39:                                               ; preds = %34
  %40 = add i64 %6, 2
  %41 = lshr i64 %10, 3
  %42 = add nuw nsw i64 %41, 1
  %43 = and i64 %42, 3
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %58, label %45

45:                                               ; preds = %39, %45
  %46 = phi i8* [ %55, %45 ], [ %37, %39 ]
  %47 = phi i32 [ %53, %45 ], [ %35, %39 ]
  %48 = phi i64 [ %54, %45 ], [ %36, %39 ]
  %49 = phi i64 [ %56, %45 ], [ %43, %39 ]
  %50 = shl i32 %47, 8
  %51 = load i8, i8* %46, align 1
  %52 = zext i8 %51 to i32
  %53 = or i32 %50, %52
  %54 = add i64 %48, -8
  %55 = getelementptr inbounds i8, i8* %46, i64 1
  %56 = add i64 %49, -1
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %45, !llvm.loop !2

58:                                               ; preds = %45, %39
  %59 = phi i8* [ %37, %39 ], [ %55, %45 ]
  %60 = phi i32 [ %35, %39 ], [ %53, %45 ]
  %61 = phi i64 [ %36, %39 ], [ %54, %45 ]
  %62 = phi i32 [ undef, %39 ], [ %53, %45 ]
  %63 = icmp ult i64 %10, 24
  br i1 %63, label %90, label %64

64:                                               ; preds = %58, %64
  %65 = phi i8* [ %88, %64 ], [ %59, %58 ]
  %66 = phi i32 [ %86, %64 ], [ %60, %58 ]
  %67 = phi i64 [ %87, %64 ], [ %61, %58 ]
  %68 = shl i32 %66, 8
  %69 = load i8, i8* %65, align 1
  %70 = zext i8 %69 to i32
  %71 = or i32 %68, %70
  %72 = getelementptr inbounds i8, i8* %65, i64 1
  %73 = shl i32 %71, 8
  %74 = load i8, i8* %72, align 1
  %75 = zext i8 %74 to i32
  %76 = or i32 %73, %75
  %77 = getelementptr inbounds i8, i8* %65, i64 2
  %78 = shl i32 %76, 8
  %79 = load i8, i8* %77, align 1
  %80 = zext i8 %79 to i32
  %81 = or i32 %78, %80
  %82 = getelementptr inbounds i8, i8* %65, i64 3
  %83 = shl i32 %81, 8
  %84 = load i8, i8* %82, align 1
  %85 = zext i8 %84 to i32
  %86 = or i32 %83, %85
  %87 = add i64 %67, -32
  %88 = getelementptr inbounds i8, i8* %65, i64 4
  %89 = icmp ugt i64 %87, 7
  br i1 %89, label %64, label %90

90:                                               ; preds = %64, %58
  %91 = phi i32 [ %62, %58 ], [ %86, %64 ]
  %92 = lshr i64 %10, 3
  %93 = add i64 %40, %92
  %94 = and i64 %10, 7
  %95 = getelementptr i8, i8* %15, i64 %93
  br label %96

96:                                               ; preds = %90, %34
  %97 = phi i64 [ %36, %34 ], [ %94, %90 ]
  %98 = phi i32 [ %35, %34 ], [ %91, %90 ]
  %99 = phi i8* [ %37, %34 ], [ %95, %90 ]
  %100 = icmp eq i64 %97, 0
  br i1 %100, label %113, label %101

101:                                              ; preds = %96
  %102 = trunc i64 %97 to i32
  %103 = shl i32 %98, %102
  %104 = load i8, i8* %99, align 1
  %105 = sub nuw nsw i32 8, %102
  %106 = and i32 %105, 255
  %107 = shl i32 255, %106
  %108 = zext i8 %104 to i32
  %109 = and i32 %107, %108
  %110 = lshr i32 %109, %106
  %111 = and i32 %110, 255
  %112 = or i32 %111, %103
  br label %113

113:                                              ; preds = %96, %101, %25
  %114 = phi i32 [ %33, %25 ], [ %98, %96 ], [ %112, %101 ]
  %115 = add i64 %10, 16
  %116 = lshr i64 %115, 3
  %117 = add i64 %116, %6
  store i64 %117, i64* %5, align 8
  %118 = and i64 %115, 7
  store i64 %118, i64* %9, align 8
  %119 = trunc i32 %114 to i16
  store i16 %119, i16* %1, align 2
  br label %120

120:                                              ; preds = %2, %113
  %121 = phi i1 [ true, %113 ], [ false, %2 ]
  ret i1 %121
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN3rtc9BitBuffer10ReadUInt32ERj(%"class.rtc::BitBuffer"* nocapture, i32* nocapture dereferenceable(4)) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  %8 = shl i64 %7, 3
  %9 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 3
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %8, %10
  %12 = icmp ult i64 %11, 32
  br i1 %12, label %128, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds i8, i8* %15, i64 %6
  %17 = sub i64 8, %10
  %18 = load i8, i8* %16, align 1
  %19 = trunc i64 %17 to i32
  %20 = shl nsw i32 -1, %19
  %21 = trunc i32 %20 to i8
  %22 = xor i8 %21, -1
  %23 = and i8 %18, %22
  %24 = icmp ugt i64 %17, 32
  br i1 %24, label %25, label %34

25:                                               ; preds = %13
  %26 = trunc i64 %10 to i32
  %27 = sub i32 232, %26
  %28 = and i32 %27, 255
  %29 = shl i32 255, %28
  %30 = zext i8 %23 to i32
  %31 = and i32 %29, %30
  %32 = lshr i32 %31, %28
  %33 = and i32 %32, 255
  br label %114

34:                                               ; preds = %13
  %35 = zext i8 %23 to i32
  %36 = add i64 %10, 24
  %37 = getelementptr inbounds i8, i8* %16, i64 1
  %38 = icmp ugt i64 %36, 7
  br i1 %38, label %39, label %97

39:                                               ; preds = %34
  %40 = add i64 %10, 16
  %41 = add i64 %6, 2
  %42 = lshr i64 %40, 3
  %43 = add nuw nsw i64 %42, 1
  %44 = and i64 %43, 3
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %59, label %46

46:                                               ; preds = %39, %46
  %47 = phi i8* [ %56, %46 ], [ %37, %39 ]
  %48 = phi i32 [ %54, %46 ], [ %35, %39 ]
  %49 = phi i64 [ %55, %46 ], [ %36, %39 ]
  %50 = phi i64 [ %57, %46 ], [ %44, %39 ]
  %51 = shl i32 %48, 8
  %52 = load i8, i8* %47, align 1
  %53 = zext i8 %52 to i32
  %54 = or i32 %51, %53
  %55 = add i64 %49, -8
  %56 = getelementptr inbounds i8, i8* %47, i64 1
  %57 = add i64 %50, -1
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %46, !llvm.loop !4

59:                                               ; preds = %46, %39
  %60 = phi i8* [ %37, %39 ], [ %56, %46 ]
  %61 = phi i32 [ %35, %39 ], [ %54, %46 ]
  %62 = phi i64 [ %36, %39 ], [ %55, %46 ]
  %63 = phi i32 [ undef, %39 ], [ %54, %46 ]
  %64 = icmp ult i64 %40, 24
  br i1 %64, label %91, label %65

65:                                               ; preds = %59, %65
  %66 = phi i8* [ %89, %65 ], [ %60, %59 ]
  %67 = phi i32 [ %87, %65 ], [ %61, %59 ]
  %68 = phi i64 [ %88, %65 ], [ %62, %59 ]
  %69 = shl i32 %67, 8
  %70 = load i8, i8* %66, align 1
  %71 = zext i8 %70 to i32
  %72 = or i32 %69, %71
  %73 = getelementptr inbounds i8, i8* %66, i64 1
  %74 = shl i32 %72, 8
  %75 = load i8, i8* %73, align 1
  %76 = zext i8 %75 to i32
  %77 = or i32 %74, %76
  %78 = getelementptr inbounds i8, i8* %66, i64 2
  %79 = shl i32 %77, 8
  %80 = load i8, i8* %78, align 1
  %81 = zext i8 %80 to i32
  %82 = or i32 %79, %81
  %83 = getelementptr inbounds i8, i8* %66, i64 3
  %84 = shl i32 %82, 8
  %85 = load i8, i8* %83, align 1
  %86 = zext i8 %85 to i32
  %87 = or i32 %84, %86
  %88 = add i64 %68, -32
  %89 = getelementptr inbounds i8, i8* %66, i64 4
  %90 = icmp ugt i64 %88, 7
  br i1 %90, label %65, label %91

91:                                               ; preds = %65, %59
  %92 = phi i32 [ %63, %59 ], [ %87, %65 ]
  %93 = lshr i64 %40, 3
  %94 = add i64 %41, %93
  %95 = and i64 %40, 7
  %96 = getelementptr i8, i8* %15, i64 %94
  br label %97

97:                                               ; preds = %91, %34
  %98 = phi i64 [ %36, %34 ], [ %95, %91 ]
  %99 = phi i32 [ %35, %34 ], [ %92, %91 ]
  %100 = phi i8* [ %37, %34 ], [ %96, %91 ]
  %101 = icmp eq i64 %98, 0
  br i1 %101, label %114, label %102

102:                                              ; preds = %97
  %103 = trunc i64 %98 to i32
  %104 = shl i32 %99, %103
  %105 = load i8, i8* %100, align 1
  %106 = sub nuw nsw i32 8, %103
  %107 = and i32 %106, 255
  %108 = shl i32 255, %107
  %109 = zext i8 %105 to i32
  %110 = and i32 %108, %109
  %111 = lshr i32 %110, %107
  %112 = and i32 %111, 255
  %113 = or i32 %112, %104
  br label %114

114:                                              ; preds = %25, %97, %102
  %115 = phi i32 [ %33, %25 ], [ %113, %102 ], [ %99, %97 ]
  store i32 %115, i32* %1, align 4
  %116 = load i64, i64* %3, align 8
  %117 = load i64, i64* %5, align 8
  %118 = sub i64 %116, %117
  %119 = shl i64 %118, 3
  %120 = load i64, i64* %9, align 8
  %121 = sub i64 %119, %120
  %122 = icmp ult i64 %121, 32
  br i1 %122, label %128, label %123

123:                                              ; preds = %114
  %124 = add i64 %120, 32
  %125 = lshr i64 %124, 3
  %126 = add i64 %125, %117
  store i64 %126, i64* %5, align 8
  %127 = and i64 %124, 7
  store i64 %127, i64* %9, align 8
  br label %128

128:                                              ; preds = %2, %114, %123
  %129 = phi i1 [ true, %123 ], [ false, %114 ], [ false, %2 ]
  ret i1 %129
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN3rtc9BitBuffer8PeekBitsEmRj(%"class.rtc::BitBuffer"* nocapture readonly, i64, i32* nocapture dereferenceable(4)) local_unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = shl i64 %8, 3
  %10 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 3
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = icmp ult i64 %12, %1
  %14 = icmp ugt i64 %1, 32
  %15 = or i1 %14, %13
  br i1 %15, label %120, label %16

16:                                               ; preds = %3
  %17 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds i8, i8* %18, i64 %7
  %20 = sub i64 8, %11
  %21 = load i8, i8* %19, align 1
  %22 = trunc i64 %20 to i32
  %23 = shl nsw i32 -1, %22
  %24 = trunc i32 %23 to i8
  %25 = xor i8 %24, -1
  %26 = and i8 %21, %25
  %27 = icmp ugt i64 %20, %1
  br i1 %27, label %28, label %38

28:                                               ; preds = %16
  %29 = add i64 %11, %1
  %30 = trunc i64 %29 to i32
  %31 = sub i32 8, %30
  %32 = and i32 %31, 255
  %33 = shl i32 255, %32
  %34 = zext i8 %26 to i32
  %35 = and i32 %33, %34
  %36 = lshr i32 %35, %32
  %37 = and i32 %36, 255
  br label %118

38:                                               ; preds = %16
  %39 = zext i8 %26 to i32
  %40 = sub i64 %1, %20
  %41 = getelementptr inbounds i8, i8* %19, i64 1
  %42 = icmp ugt i64 %40, 7
  br i1 %42, label %43, label %101

43:                                               ; preds = %38
  %44 = add i64 %11, %1
  %45 = add i64 %44, -16
  %46 = lshr i64 %45, 3
  %47 = add i64 %7, %46
  %48 = add i64 %47, 2
  %49 = add nuw nsw i64 %46, 1
  %50 = and i64 %49, 3
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %65, label %52

52:                                               ; preds = %43, %52
  %53 = phi i8* [ %62, %52 ], [ %41, %43 ]
  %54 = phi i32 [ %60, %52 ], [ %39, %43 ]
  %55 = phi i64 [ %61, %52 ], [ %40, %43 ]
  %56 = phi i64 [ %63, %52 ], [ %50, %43 ]
  %57 = shl i32 %54, 8
  %58 = load i8, i8* %53, align 1
  %59 = zext i8 %58 to i32
  %60 = or i32 %57, %59
  %61 = add i64 %55, -8
  %62 = getelementptr inbounds i8, i8* %53, i64 1
  %63 = add i64 %56, -1
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %65, label %52, !llvm.loop !5

65:                                               ; preds = %52, %43
  %66 = phi i8* [ %41, %43 ], [ %62, %52 ]
  %67 = phi i32 [ %39, %43 ], [ %60, %52 ]
  %68 = phi i64 [ %40, %43 ], [ %61, %52 ]
  %69 = phi i32 [ undef, %43 ], [ %60, %52 ]
  %70 = icmp ult i64 %45, 24
  br i1 %70, label %97, label %71

71:                                               ; preds = %65, %71
  %72 = phi i8* [ %95, %71 ], [ %66, %65 ]
  %73 = phi i32 [ %93, %71 ], [ %67, %65 ]
  %74 = phi i64 [ %94, %71 ], [ %68, %65 ]
  %75 = shl i32 %73, 8
  %76 = load i8, i8* %72, align 1
  %77 = zext i8 %76 to i32
  %78 = or i32 %75, %77
  %79 = getelementptr inbounds i8, i8* %72, i64 1
  %80 = shl i32 %78, 8
  %81 = load i8, i8* %79, align 1
  %82 = zext i8 %81 to i32
  %83 = or i32 %80, %82
  %84 = getelementptr inbounds i8, i8* %72, i64 2
  %85 = shl i32 %83, 8
  %86 = load i8, i8* %84, align 1
  %87 = zext i8 %86 to i32
  %88 = or i32 %85, %87
  %89 = getelementptr inbounds i8, i8* %72, i64 3
  %90 = shl i32 %88, 8
  %91 = load i8, i8* %89, align 1
  %92 = zext i8 %91 to i32
  %93 = or i32 %90, %92
  %94 = add i64 %74, -32
  %95 = getelementptr inbounds i8, i8* %72, i64 4
  %96 = icmp ugt i64 %94, 7
  br i1 %96, label %71, label %97

97:                                               ; preds = %71, %65
  %98 = phi i32 [ %69, %65 ], [ %93, %71 ]
  %99 = and i64 %45, 7
  %100 = getelementptr i8, i8* %18, i64 %48
  br label %101

101:                                              ; preds = %97, %38
  %102 = phi i64 [ %40, %38 ], [ %99, %97 ]
  %103 = phi i32 [ %39, %38 ], [ %98, %97 ]
  %104 = phi i8* [ %41, %38 ], [ %100, %97 ]
  %105 = icmp eq i64 %102, 0
  br i1 %105, label %118, label %106

106:                                              ; preds = %101
  %107 = trunc i64 %102 to i32
  %108 = shl i32 %103, %107
  %109 = load i8, i8* %104, align 1
  %110 = sub nuw nsw i32 8, %107
  %111 = and i32 %110, 255
  %112 = shl i32 255, %111
  %113 = zext i8 %109 to i32
  %114 = and i32 %112, %113
  %115 = lshr i32 %114, %111
  %116 = and i32 %115, 255
  %117 = or i32 %116, %108
  br label %118

118:                                              ; preds = %106, %101, %28
  %119 = phi i32 [ %37, %28 ], [ %117, %106 ], [ %103, %101 ]
  store i32 %119, i32* %2, align 4
  br label %120

120:                                              ; preds = %3, %118
  %121 = phi i1 [ true, %118 ], [ false, %3 ]
  ret i1 %121
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN3rtc9BitBuffer8PeekBitsEmRm(%"class.rtc::BitBuffer"* nocapture readonly, i64, i64* nocapture dereferenceable(8)) local_unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = shl i64 %8, 3
  %10 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 3
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = icmp ult i64 %12, %1
  %14 = icmp ugt i64 %1, 64
  %15 = or i1 %14, %13
  br i1 %15, label %122, label %16

16:                                               ; preds = %3
  %17 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds i8, i8* %18, i64 %7
  %20 = sub i64 8, %11
  %21 = load i8, i8* %19, align 1
  %22 = trunc i64 %20 to i32
  %23 = shl nsw i32 -1, %22
  %24 = trunc i32 %23 to i8
  %25 = xor i8 %24, -1
  %26 = and i8 %21, %25
  %27 = icmp ugt i64 %20, %1
  br i1 %27, label %28, label %39

28:                                               ; preds = %16
  %29 = add i64 %11, %1
  %30 = trunc i64 %29 to i32
  %31 = sub i32 8, %30
  %32 = and i32 %31, 255
  %33 = shl i32 255, %32
  %34 = zext i8 %26 to i32
  %35 = and i32 %33, %34
  %36 = lshr i32 %35, %32
  %37 = and i32 %36, 255
  %38 = zext i32 %37 to i64
  br label %120

39:                                               ; preds = %16
  %40 = zext i8 %26 to i64
  %41 = sub i64 %1, %20
  %42 = getelementptr inbounds i8, i8* %19, i64 1
  %43 = icmp ugt i64 %41, 7
  br i1 %43, label %44, label %102

44:                                               ; preds = %39
  %45 = add i64 %11, %1
  %46 = add i64 %45, -16
  %47 = lshr i64 %46, 3
  %48 = add i64 %7, %47
  %49 = add i64 %48, 2
  %50 = add nuw nsw i64 %47, 1
  %51 = and i64 %50, 3
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %66, label %53

53:                                               ; preds = %44, %53
  %54 = phi i8* [ %63, %53 ], [ %42, %44 ]
  %55 = phi i64 [ %61, %53 ], [ %40, %44 ]
  %56 = phi i64 [ %62, %53 ], [ %41, %44 ]
  %57 = phi i64 [ %64, %53 ], [ %51, %44 ]
  %58 = shl i64 %55, 8
  %59 = load i8, i8* %54, align 1
  %60 = zext i8 %59 to i64
  %61 = or i64 %58, %60
  %62 = add i64 %56, -8
  %63 = getelementptr inbounds i8, i8* %54, i64 1
  %64 = add i64 %57, -1
  %65 = icmp eq i64 %64, 0
  br i1 %65, label %66, label %53, !llvm.loop !6

66:                                               ; preds = %53, %44
  %67 = phi i8* [ %42, %44 ], [ %63, %53 ]
  %68 = phi i64 [ %40, %44 ], [ %61, %53 ]
  %69 = phi i64 [ %41, %44 ], [ %62, %53 ]
  %70 = phi i64 [ undef, %44 ], [ %61, %53 ]
  %71 = icmp ult i64 %46, 24
  br i1 %71, label %98, label %72

72:                                               ; preds = %66, %72
  %73 = phi i8* [ %96, %72 ], [ %67, %66 ]
  %74 = phi i64 [ %94, %72 ], [ %68, %66 ]
  %75 = phi i64 [ %95, %72 ], [ %69, %66 ]
  %76 = shl i64 %74, 8
  %77 = load i8, i8* %73, align 1
  %78 = zext i8 %77 to i64
  %79 = or i64 %76, %78
  %80 = getelementptr inbounds i8, i8* %73, i64 1
  %81 = shl i64 %79, 8
  %82 = load i8, i8* %80, align 1
  %83 = zext i8 %82 to i64
  %84 = or i64 %81, %83
  %85 = getelementptr inbounds i8, i8* %73, i64 2
  %86 = shl i64 %84, 8
  %87 = load i8, i8* %85, align 1
  %88 = zext i8 %87 to i64
  %89 = or i64 %86, %88
  %90 = getelementptr inbounds i8, i8* %73, i64 3
  %91 = shl i64 %89, 8
  %92 = load i8, i8* %90, align 1
  %93 = zext i8 %92 to i64
  %94 = or i64 %91, %93
  %95 = add i64 %75, -32
  %96 = getelementptr inbounds i8, i8* %73, i64 4
  %97 = icmp ugt i64 %95, 7
  br i1 %97, label %72, label %98

98:                                               ; preds = %72, %66
  %99 = phi i64 [ %70, %66 ], [ %94, %72 ]
  %100 = and i64 %46, 7
  %101 = getelementptr i8, i8* %18, i64 %49
  br label %102

102:                                              ; preds = %98, %39
  %103 = phi i64 [ %41, %39 ], [ %100, %98 ]
  %104 = phi i64 [ %40, %39 ], [ %99, %98 ]
  %105 = phi i8* [ %42, %39 ], [ %101, %98 ]
  %106 = icmp eq i64 %103, 0
  br i1 %106, label %120, label %107

107:                                              ; preds = %102
  %108 = shl i64 %104, %103
  %109 = load i8, i8* %105, align 1
  %110 = trunc i64 %103 to i32
  %111 = sub nuw nsw i32 8, %110
  %112 = and i32 %111, 255
  %113 = shl i32 255, %112
  %114 = zext i8 %109 to i32
  %115 = and i32 %113, %114
  %116 = lshr i32 %115, %112
  %117 = and i32 %116, 255
  %118 = zext i32 %117 to i64
  %119 = or i64 %108, %118
  br label %120

120:                                              ; preds = %107, %102, %28
  %121 = phi i64 [ %38, %28 ], [ %119, %107 ], [ %104, %102 ]
  store i64 %121, i64* %2, align 8
  br label %122

122:                                              ; preds = %3, %120
  %123 = phi i1 [ true, %120 ], [ false, %3 ]
  ret i1 %123
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN3rtc9BitBuffer11ConsumeBitsEm(%"class.rtc::BitBuffer"* nocapture, i64) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  %8 = shl i64 %7, 3
  %9 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 3
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %8, %10
  %12 = icmp ult i64 %11, %1
  br i1 %12, label %18, label %13

13:                                               ; preds = %2
  %14 = add i64 %10, %1
  %15 = lshr i64 %14, 3
  %16 = add i64 %15, %6
  store i64 %16, i64* %5, align 8
  %17 = and i64 %14, 7
  store i64 %17, i64* %9, align 8
  br label %18

18:                                               ; preds = %2, %13
  %19 = phi i1 [ true, %13 ], [ false, %2 ]
  ret i1 %19
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN3rtc9BitBuffer8ReadBitsEmRm(%"class.rtc::BitBuffer"* nocapture, i64, i64* nocapture dereferenceable(8)) local_unnamed_addr #4 align 2 {
  %4 = tail call zeroext i1 @_ZN3rtc9BitBuffer8PeekBitsEmRm(%"class.rtc::BitBuffer"* %0, i64 %1, i64* dereferenceable(8) %2)
  br i1 %4, label %5, label %21

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = shl i64 %10, 3
  %12 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 3
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = icmp ult i64 %14, %1
  br i1 %15, label %21, label %16

16:                                               ; preds = %5
  %17 = add i64 %13, %1
  %18 = lshr i64 %17, 3
  %19 = add i64 %18, %9
  store i64 %19, i64* %8, align 8
  %20 = and i64 %17, 7
  store i64 %20, i64* %12, align 8
  br label %21

21:                                               ; preds = %16, %5, %3
  %22 = phi i1 [ false, %3 ], [ true, %16 ], [ false, %5 ]
  ret i1 %22
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN3rtc9BitBuffer12ConsumeBytesEm(%"class.rtc::BitBuffer"* nocapture, i64) local_unnamed_addr #4 align 2 {
  %3 = shl i64 %1, 3
  %4 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = shl i64 %8, 3
  %10 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 3
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = icmp ult i64 %12, %3
  br i1 %13, label %19, label %14

14:                                               ; preds = %2
  %15 = add i64 %11, %3
  %16 = lshr i64 %15, 3
  %17 = add i64 %16, %7
  store i64 %17, i64* %6, align 8
  %18 = and i64 %15, 7
  store i64 %18, i64* %10, align 8
  br label %19

19:                                               ; preds = %2, %14
  %20 = phi i1 [ true, %14 ], [ false, %2 ]
  ret i1 %20
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3rtc9BitBuffer16ReadNonSymmetricEjRj(%"class.rtc::BitBuffer"* nocapture, i32, i32* nocapture dereferenceable(4)) local_unnamed_addr #2 align 2 {
  switch i32 %1, label %5 [
    i32 1, label %4
    i32 0, label %9
  ]

4:                                                ; preds = %3
  store i32 0, i32* %2, align 4
  br label %70

5:                                                ; preds = %3
  %6 = zext i32 %1 to i64
  %7 = tail call i64 @llvm.ctlz.i64(i64 %6, i1 true) #8, !range !7
  %8 = sub nuw nsw i64 64, %7
  br label %9

9:                                                ; preds = %3, %5
  %10 = phi i64 [ %8, %5 ], [ 0, %3 ]
  %11 = trunc i64 %10 to i32
  %12 = shl i32 1, %11
  %13 = sub i32 %12, %1
  %14 = add nsw i64 %10, -1
  %15 = tail call zeroext i1 @_ZN3rtc9BitBuffer8PeekBitsEmRj(%"class.rtc::BitBuffer"* %0, i64 %14, i32* dereferenceable(4) %2) #8
  br i1 %15, label %16, label %70

16:                                               ; preds = %9
  %17 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 2
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %18, %20
  %22 = shl i64 %21, 3
  %23 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 3
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %22, %24
  %26 = icmp ult i64 %25, %14
  br i1 %26, label %70, label %27

27:                                               ; preds = %16
  %28 = add i64 %24, %14
  %29 = lshr i64 %28, 3
  %30 = add i64 %29, %20
  store i64 %30, i64* %19, align 8
  %31 = and i64 %28, 7
  store i64 %31, i64* %23, align 8
  %32 = load i32, i32* %2, align 4
  %33 = icmp ult i32 %32, %13
  br i1 %33, label %70, label %34

34:                                               ; preds = %27
  %35 = sub i64 %18, %30
  %36 = shl i64 %35, 3
  %37 = icmp eq i64 %36, %31
  br i1 %37, label %70, label %38

38:                                               ; preds = %34
  %39 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 0
  %40 = load i8*, i8** %39, align 8
  %41 = getelementptr inbounds i8, i8* %40, i64 %30
  %42 = load i8, i8* %41, align 1
  %43 = trunc i64 %31 to i32
  %44 = sub nuw nsw i32 8, %43
  %45 = shl nsw i32 -1, %44
  %46 = trunc i32 %45 to i8
  %47 = xor i8 %46, -1
  %48 = and i8 %42, %47
  %49 = icmp eq i64 %31, 7
  br i1 %49, label %58, label %50

50:                                               ; preds = %38
  %51 = trunc i64 %31 to i32
  %52 = xor i32 %51, 7
  %53 = shl i32 255, %52
  %54 = zext i8 %48 to i32
  %55 = and i32 %53, %54
  %56 = lshr i32 %55, %52
  %57 = and i32 %56, 255
  br label %60

58:                                               ; preds = %38
  %59 = zext i8 %48 to i32
  br label %60

60:                                               ; preds = %58, %50
  %61 = phi i32 [ %57, %50 ], [ %59, %58 ]
  %62 = add nuw nsw i64 %31, 1
  %63 = lshr i64 %62, 3
  %64 = add i64 %63, %30
  store i64 %64, i64* %19, align 8
  %65 = and i64 %62, 7
  store i64 %65, i64* %23, align 8
  %66 = load i32, i32* %2, align 4
  %67 = shl i32 %66, 1
  %68 = sub i32 %61, %13
  %69 = add i32 %68, %67
  store i32 %69, i32* %2, align 4
  br label %70

70:                                               ; preds = %34, %16, %9, %60, %27, %4
  %71 = phi i1 [ true, %4 ], [ true, %27 ], [ true, %60 ], [ false, %9 ], [ false, %16 ], [ false, %34 ]
  ret i1 %71
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3rtc9BitBuffer21ReadExponentialGolombERj(%"class.rtc::BitBuffer"* nocapture, i32* nocapture dereferenceable(4)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %8, %4
  %10 = shl i64 %9, 3
  %11 = icmp eq i64 %10, %6
  br i1 %11, label %132, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  br label %15

15:                                               ; preds = %12, %120
  %16 = phi i64 [ %6, %12 ], [ %124, %120 ]
  %17 = phi i64 [ %4, %12 ], [ %123, %120 ]
  %18 = phi i64 [ 1, %12 ], [ %125, %120 ]
  %19 = getelementptr inbounds i8, i8* %14, i64 %17
  %20 = sub i64 8, %16
  %21 = load i8, i8* %19, align 1
  %22 = trunc i64 %20 to i32
  %23 = shl nsw i32 -1, %22
  %24 = trunc i32 %23 to i8
  %25 = xor i8 %24, -1
  %26 = and i8 %21, %25
  %27 = icmp ugt i64 %20, 1
  br i1 %27, label %28, label %37

28:                                               ; preds = %15
  %29 = trunc i64 %16 to i32
  %30 = sub i32 7, %29
  %31 = and i32 %30, 255
  %32 = shl i32 255, %31
  %33 = zext i8 %26 to i32
  %34 = and i32 %32, %33
  %35 = lshr i32 %34, %31
  %36 = and i32 %35, 255
  br label %117

37:                                               ; preds = %15
  %38 = zext i8 %26 to i32
  %39 = add i64 %16, -7
  %40 = getelementptr inbounds i8, i8* %19, i64 1
  %41 = icmp ugt i64 %39, 7
  br i1 %41, label %42, label %100

42:                                               ; preds = %37
  %43 = add i64 %16, -15
  %44 = add i64 %17, 2
  %45 = lshr i64 %43, 3
  %46 = add nuw nsw i64 %45, 1
  %47 = and i64 %46, 3
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %62, label %49

49:                                               ; preds = %42, %49
  %50 = phi i8* [ %59, %49 ], [ %40, %42 ]
  %51 = phi i32 [ %57, %49 ], [ %38, %42 ]
  %52 = phi i64 [ %58, %49 ], [ %39, %42 ]
  %53 = phi i64 [ %60, %49 ], [ %47, %42 ]
  %54 = shl i32 %51, 8
  %55 = load i8, i8* %50, align 1
  %56 = zext i8 %55 to i32
  %57 = or i32 %54, %56
  %58 = add i64 %52, -8
  %59 = getelementptr inbounds i8, i8* %50, i64 1
  %60 = add i64 %53, -1
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %62, label %49, !llvm.loop !8

62:                                               ; preds = %49, %42
  %63 = phi i8* [ %40, %42 ], [ %59, %49 ]
  %64 = phi i32 [ %38, %42 ], [ %57, %49 ]
  %65 = phi i64 [ %39, %42 ], [ %58, %49 ]
  %66 = phi i32 [ undef, %42 ], [ %57, %49 ]
  %67 = icmp ult i64 %43, 24
  br i1 %67, label %94, label %68

68:                                               ; preds = %62, %68
  %69 = phi i8* [ %92, %68 ], [ %63, %62 ]
  %70 = phi i32 [ %90, %68 ], [ %64, %62 ]
  %71 = phi i64 [ %91, %68 ], [ %65, %62 ]
  %72 = shl i32 %70, 8
  %73 = load i8, i8* %69, align 1
  %74 = zext i8 %73 to i32
  %75 = or i32 %72, %74
  %76 = getelementptr inbounds i8, i8* %69, i64 1
  %77 = shl i32 %75, 8
  %78 = load i8, i8* %76, align 1
  %79 = zext i8 %78 to i32
  %80 = or i32 %77, %79
  %81 = getelementptr inbounds i8, i8* %69, i64 2
  %82 = shl i32 %80, 8
  %83 = load i8, i8* %81, align 1
  %84 = zext i8 %83 to i32
  %85 = or i32 %82, %84
  %86 = getelementptr inbounds i8, i8* %69, i64 3
  %87 = shl i32 %85, 8
  %88 = load i8, i8* %86, align 1
  %89 = zext i8 %88 to i32
  %90 = or i32 %87, %89
  %91 = add i64 %71, -32
  %92 = getelementptr inbounds i8, i8* %69, i64 4
  %93 = icmp ugt i64 %91, 7
  br i1 %93, label %68, label %94

94:                                               ; preds = %68, %62
  %95 = phi i32 [ %66, %62 ], [ %90, %68 ]
  %96 = lshr i64 %43, 3
  %97 = add i64 %44, %96
  %98 = and i64 %43, 7
  %99 = getelementptr i8, i8* %14, i64 %97
  br label %100

100:                                              ; preds = %94, %37
  %101 = phi i64 [ %39, %37 ], [ %98, %94 ]
  %102 = phi i32 [ %38, %37 ], [ %95, %94 ]
  %103 = phi i8* [ %40, %37 ], [ %99, %94 ]
  %104 = icmp eq i64 %101, 0
  br i1 %104, label %117, label %105

105:                                              ; preds = %100
  %106 = trunc i64 %101 to i32
  %107 = shl i32 %102, %106
  %108 = load i8, i8* %103, align 1
  %109 = sub nuw nsw i32 8, %106
  %110 = and i32 %109, 255
  %111 = shl i32 255, %110
  %112 = zext i8 %108 to i32
  %113 = and i32 %111, %112
  %114 = lshr i32 %113, %110
  %115 = and i32 %114, 255
  %116 = or i32 %115, %107
  br label %117

117:                                              ; preds = %28, %100, %105
  %118 = phi i32 [ %36, %28 ], [ %116, %105 ], [ %102, %100 ]
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %129

120:                                              ; preds = %117
  %121 = add i64 %16, 1
  %122 = lshr i64 %121, 3
  %123 = add i64 %122, %17
  store i64 %123, i64* %3, align 8
  %124 = and i64 %121, 7
  store i64 %124, i64* %5, align 8
  %125 = add i64 %18, 1
  %126 = sub i64 %8, %123
  %127 = shl i64 %126, 3
  %128 = icmp eq i64 %127, %124
  br i1 %128, label %129, label %15

129:                                              ; preds = %117, %120
  %130 = phi i64 [ %18, %117 ], [ %125, %120 ]
  %131 = icmp ugt i64 %130, 32
  br i1 %131, label %143, label %132

132:                                              ; preds = %2, %129
  %133 = phi i64 [ %130, %129 ], [ 1, %2 ]
  %134 = tail call zeroext i1 @_ZN3rtc9BitBuffer8PeekBitsEmRj(%"class.rtc::BitBuffer"* %0, i64 %133, i32* dereferenceable(4) %1) #8
  %135 = load i64, i64* %7, align 8
  br i1 %134, label %136, label %143

136:                                              ; preds = %132
  %137 = load i64, i64* %3, align 8
  %138 = sub i64 %135, %137
  %139 = shl i64 %138, 3
  %140 = load i64, i64* %5, align 8
  %141 = sub i64 %139, %140
  %142 = icmp ult i64 %141, %133
  br i1 %142, label %143, label %154

143:                                              ; preds = %132, %136, %129
  %144 = phi i64 [ %135, %136 ], [ %8, %129 ], [ %135, %132 ]
  %145 = icmp ult i64 %144, %4
  %146 = icmp ugt i64 %6, 7
  %147 = or i1 %146, %145
  br i1 %147, label %152, label %148

148:                                              ; preds = %143
  %149 = icmp eq i64 %144, %4
  %150 = icmp ne i64 %6, 0
  %151 = and i1 %150, %149
  br i1 %151, label %152, label %153

152:                                              ; preds = %148, %143
  tail call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 251, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, i64 0, i64 0)) #9
  unreachable

153:                                              ; preds = %148
  store i64 %4, i64* %3, align 8
  store i64 %6, i64* %5, align 8
  br label %161

154:                                              ; preds = %136
  %155 = add i64 %140, %133
  %156 = lshr i64 %155, 3
  %157 = add i64 %156, %137
  store i64 %157, i64* %3, align 8
  %158 = and i64 %155, 7
  store i64 %158, i64* %5, align 8
  %159 = load i32, i32* %1, align 4
  %160 = add i32 %159, -1
  store i32 %160, i32* %1, align 4
  br label %161

161:                                              ; preds = %154, %153
  %162 = phi i1 [ false, %153 ], [ true, %154 ]
  ret i1 %162
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN3rtc9BitBuffer4SeekEmm(%"class.rtc::BitBuffer"* nocapture, i64, i64) local_unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %5, %1
  %7 = icmp ugt i64 %2, 7
  %8 = or i1 %7, %6
  br i1 %8, label %16, label %9

9:                                                ; preds = %3
  %10 = icmp eq i64 %5, %1
  %11 = icmp ne i64 %2, 0
  %12 = and i1 %11, %10
  br i1 %12, label %16, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 2
  store i64 %1, i64* %14, align 8
  %15 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 3
  store i64 %2, i64* %15, align 8
  br label %16

16:                                               ; preds = %3, %9, %13
  %17 = phi i1 [ true, %13 ], [ false, %9 ], [ false, %3 ]
  ret i1 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3rtc9BitBuffer27ReadSignedExponentialGolombERi(%"class.rtc::BitBuffer"* nocapture, i32* nocapture dereferenceable(4)) local_unnamed_addr #2 align 2 {
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #8
  store i32 -1431655766, i32* %3, align 4
  %5 = call zeroext i1 @_ZN3rtc9BitBuffer21ReadExponentialGolombERj(%"class.rtc::BitBuffer"* %0, i32* nonnull dereferenceable(4) %3)
  br i1 %5, label %6, label %15

6:                                                ; preds = %2
  %7 = load i32, i32* %3, align 4
  %8 = and i32 %7, 1
  %9 = icmp eq i32 %8, 0
  %10 = add i32 %7, 1
  %11 = lshr i32 %10, 1
  %12 = lshr i32 %7, 1
  %13 = sub nsw i32 0, %12
  %14 = select i1 %9, i32 %13, i32 %11
  store i32 %14, i32* %1, align 4
  br label %15

15:                                               ; preds = %2, %6
  %16 = phi i1 [ true, %6 ], [ false, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #8
  ret i1 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3rtc9BitBuffer16GetCurrentOffsetEPmS1_(%"class.rtc::BitBuffer"* nocapture readonly, i64*, i64*) local_unnamed_addr #2 align 2 {
  %4 = icmp eq i64* %1, null
  br i1 %4, label %5, label %6

5:                                                ; preds = %3
  tail call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 273, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, i64 0, i64 0)) #9
  unreachable

6:                                                ; preds = %3
  %7 = icmp eq i64* %2, null
  br i1 %7, label %8, label %9

8:                                                ; preds = %6
  tail call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 274, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, i64 0, i64 0)) #9
  unreachable

9:                                                ; preds = %6
  %10 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 2
  %11 = load i64, i64* %10, align 8
  store i64 %11, i64* %1, align 8
  %12 = getelementptr inbounds %"class.rtc::BitBuffer", %"class.rtc::BitBuffer"* %0, i64 0, i32 3
  %13 = load i64, i64* %12, align 8
  store i64 %13, i64* %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3rtc15BitBufferWriterC2EPhm(%"class.rtc::BitBufferWriter"* nocapture, i8*, i64) unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.rtc::BitBufferWriter", %"class.rtc::BitBufferWriter"* %0, i64 0, i32 0, i32 0
  store i8* %1, i8** %4, align 8
  %5 = getelementptr inbounds %"class.rtc::BitBufferWriter", %"class.rtc::BitBufferWriter"* %0, i64 0, i32 0, i32 1
  store i64 %2, i64* %5, align 8
  %6 = getelementptr inbounds %"class.rtc::BitBufferWriter", %"class.rtc::BitBufferWriter"* %0, i64 0, i32 0, i32 2
  %7 = bitcast i64* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 16, i1 false) #8
  %8 = getelementptr inbounds %"class.rtc::BitBufferWriter", %"class.rtc::BitBufferWriter"* %0, i64 0, i32 1
  store i8* %1, i8** %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3rtc15BitBufferWriter10WriteUInt8Eh(%"class.rtc::BitBufferWriter"* nocapture, i8 zeroext) local_unnamed_addr #2 align 2 {
  %3 = zext i8 %1 to i64
  %4 = tail call zeroext i1 @_ZN3rtc15BitBufferWriter9WriteBitsEmm(%"class.rtc::BitBufferWriter"* %0, i64 %3, i64 8)
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3rtc15BitBufferWriter9WriteBitsEmm(%"class.rtc::BitBufferWriter"* nocapture, i64, i64) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.rtc::BitBufferWriter", %"class.rtc::BitBufferWriter"* %0, i64 0, i32 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.rtc::BitBufferWriter", %"class.rtc::BitBufferWriter"* %0, i64 0, i32 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = shl i64 %8, 3
  %10 = getelementptr inbounds %"class.rtc::BitBufferWriter", %"class.rtc::BitBufferWriter"* %0, i64 0, i32 0, i32 3
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = icmp ult i64 %12, %2
  br i1 %13, label %136, label %14

14:                                               ; preds = %3
  %15 = sub i64 64, %2
  %16 = shl i64 %1, %15
  %17 = getelementptr inbounds %"class.rtc::BitBufferWriter", %"class.rtc::BitBufferWriter"* %0, i64 0, i32 1
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds i8, i8* %18, i64 %7
  %20 = sub i64 8, %11
  %21 = icmp ult i64 %20, %2
  %22 = select i1 %21, i64 %20, i64 %2
  %23 = lshr i64 %16, 56
  %24 = trunc i64 %23 to i32
  %25 = load i8, i8* %19, align 1
  %26 = trunc i64 %22 to i32
  %27 = sub i32 8, %26
  %28 = shl i32 255, %27
  %29 = and i32 %28, 255
  %30 = trunc i64 %11 to i32
  %31 = lshr i32 %29, %30
  %32 = zext i8 %25 to i32
  %33 = xor i32 %31, 255
  %34 = and i32 %33, %32
  %35 = lshr i32 %24, %30
  %36 = or i32 %34, %35
  %37 = trunc i32 %36 to i8
  store i8 %37, i8* %19, align 1
  br i1 %21, label %51, label %38

38:                                               ; preds = %14
  %39 = load i64, i64* %4, align 8
  %40 = load i64, i64* %6, align 8
  %41 = sub i64 %39, %40
  %42 = shl i64 %41, 3
  %43 = load i64, i64* %10, align 8
  %44 = sub i64 %42, %43
  %45 = icmp ult i64 %44, %2
  br i1 %45, label %136, label %46

46:                                               ; preds = %38
  %47 = add i64 %43, %2
  %48 = lshr i64 %47, 3
  %49 = add i64 %48, %40
  store i64 %49, i64* %6, align 8
  %50 = and i64 %47, 7
  store i64 %50, i64* %10, align 8
  br label %136

51:                                               ; preds = %14
  %52 = shl i64 %16, %22
  %53 = sub i64 %2, %22
  %54 = getelementptr inbounds i8, i8* %19, i64 1
  %55 = icmp ugt i64 %53, 7
  br i1 %55, label %56, label %106

56:                                               ; preds = %51
  %57 = sub i64 %2, %22
  %58 = add i64 %2, -8
  %59 = sub i64 %58, %22
  %60 = lshr i64 %59, 3
  %61 = add nuw nsw i64 %60, 1
  %62 = and i64 %61, 3
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %76, label %64

64:                                               ; preds = %56, %64
  %65 = phi i8* [ %73, %64 ], [ %54, %56 ]
  %66 = phi i64 [ %71, %64 ], [ %52, %56 ]
  %67 = phi i64 [ %72, %64 ], [ %53, %56 ]
  %68 = phi i64 [ %74, %64 ], [ %62, %56 ]
  %69 = lshr i64 %66, 56
  %70 = trunc i64 %69 to i8
  store i8 %70, i8* %65, align 1
  %71 = shl i64 %66, 8
  %72 = add i64 %67, -8
  %73 = getelementptr inbounds i8, i8* %65, i64 1
  %74 = add i64 %68, -1
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %76, label %64, !llvm.loop !9

76:                                               ; preds = %64, %56
  %77 = phi i8* [ %54, %56 ], [ %73, %64 ]
  %78 = phi i64 [ %52, %56 ], [ %71, %64 ]
  %79 = phi i64 [ %53, %56 ], [ %72, %64 ]
  %80 = phi i64 [ undef, %56 ], [ %71, %64 ]
  %81 = phi i8* [ undef, %56 ], [ %73, %64 ]
  %82 = icmp ult i64 %59, 24
  br i1 %82, label %102, label %83

83:                                               ; preds = %76, %83
  %84 = phi i8* [ %100, %83 ], [ %77, %76 ]
  %85 = phi i64 [ %89, %83 ], [ %78, %76 ]
  %86 = phi i64 [ %99, %83 ], [ %79, %76 ]
  %87 = lshr i64 %85, 56
  %88 = trunc i64 %87 to i8
  store i8 %88, i8* %84, align 1
  %89 = shl i64 %85, 32
  %90 = getelementptr inbounds i8, i8* %84, i64 1
  %91 = lshr i64 %85, 48
  %92 = trunc i64 %91 to i8
  store i8 %92, i8* %90, align 1
  %93 = getelementptr inbounds i8, i8* %84, i64 2
  %94 = lshr i64 %85, 40
  %95 = trunc i64 %94 to i8
  store i8 %95, i8* %93, align 1
  %96 = getelementptr inbounds i8, i8* %84, i64 3
  %97 = lshr i64 %85, 32
  %98 = trunc i64 %97 to i8
  store i8 %98, i8* %96, align 1
  %99 = add i64 %86, -32
  %100 = getelementptr inbounds i8, i8* %84, i64 4
  %101 = icmp ugt i64 %99, 7
  br i1 %101, label %83, label %102

102:                                              ; preds = %83, %76
  %103 = phi i64 [ %80, %76 ], [ %89, %83 ]
  %104 = phi i8* [ %81, %76 ], [ %100, %83 ]
  %105 = and i64 %57, 7
  br label %106

106:                                              ; preds = %102, %51
  %107 = phi i64 [ %53, %51 ], [ %105, %102 ]
  %108 = phi i64 [ %52, %51 ], [ %103, %102 ]
  %109 = phi i8* [ %54, %51 ], [ %104, %102 ]
  %110 = icmp eq i64 %107, 0
  br i1 %110, label %123, label %111

111:                                              ; preds = %106
  %112 = lshr i64 %108, 56
  %113 = trunc i64 %112 to i32
  %114 = load i8, i8* %109, align 1
  %115 = trunc i64 %107 to i32
  %116 = sub nuw nsw i32 8, %115
  %117 = shl i32 255, %116
  %118 = zext i8 %114 to i32
  %119 = xor i32 %117, 255
  %120 = and i32 %119, %118
  %121 = or i32 %120, %113
  %122 = trunc i32 %121 to i8
  store i8 %122, i8* %109, align 1
  br label %123

123:                                              ; preds = %106, %111
  %124 = load i64, i64* %4, align 8
  %125 = load i64, i64* %6, align 8
  %126 = sub i64 %124, %125
  %127 = shl i64 %126, 3
  %128 = load i64, i64* %10, align 8
  %129 = sub i64 %127, %128
  %130 = icmp ult i64 %129, %2
  br i1 %130, label %136, label %131

131:                                              ; preds = %123
  %132 = add i64 %128, %2
  %133 = lshr i64 %132, 3
  %134 = add i64 %133, %125
  store i64 %134, i64* %6, align 8
  %135 = and i64 %132, 7
  store i64 %135, i64* %10, align 8
  br label %136

136:                                              ; preds = %38, %46, %123, %131, %3
  %137 = phi i1 [ false, %3 ], [ true, %46 ], [ false, %38 ], [ true, %131 ], [ false, %123 ]
  ret i1 %137
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3rtc15BitBufferWriter11WriteUInt16Et(%"class.rtc::BitBufferWriter"* nocapture, i16 zeroext) local_unnamed_addr #2 align 2 {
  %3 = zext i16 %1 to i64
  %4 = tail call zeroext i1 @_ZN3rtc15BitBufferWriter9WriteBitsEmm(%"class.rtc::BitBufferWriter"* %0, i64 %3, i64 16)
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3rtc15BitBufferWriter11WriteUInt32Ej(%"class.rtc::BitBufferWriter"* nocapture, i32) local_unnamed_addr #2 align 2 {
  %3 = zext i32 %1 to i64
  %4 = tail call zeroext i1 @_ZN3rtc15BitBufferWriter9WriteBitsEmm(%"class.rtc::BitBufferWriter"* %0, i64 %3, i64 32)
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3rtc15BitBufferWriter17WriteNonSymmetricEjj(%"class.rtc::BitBufferWriter"* nocapture, i32, i32) local_unnamed_addr #2 align 2 {
  switch i32 %2, label %4 [
    i32 1, label %22
    i32 0, label %8
  ]

4:                                                ; preds = %3
  %5 = zext i32 %2 to i64
  %6 = tail call i64 @llvm.ctlz.i64(i64 %5, i1 true) #8, !range !7
  %7 = sub nuw nsw i64 64, %6
  br label %8

8:                                                ; preds = %3, %4
  %9 = phi i64 [ %7, %4 ], [ 0, %3 ]
  %10 = trunc i64 %9 to i32
  %11 = shl i32 1, %10
  %12 = sub i32 %11, %2
  %13 = icmp ugt i32 %12, %1
  br i1 %13, label %14, label %18

14:                                               ; preds = %8
  %15 = zext i32 %1 to i64
  %16 = add nsw i64 %9, -1
  %17 = tail call zeroext i1 @_ZN3rtc15BitBufferWriter9WriteBitsEmm(%"class.rtc::BitBufferWriter"* %0, i64 %15, i64 %16)
  br label %22

18:                                               ; preds = %8
  %19 = add i32 %12, %1
  %20 = zext i32 %19 to i64
  %21 = tail call zeroext i1 @_ZN3rtc15BitBufferWriter9WriteBitsEmm(%"class.rtc::BitBufferWriter"* %0, i64 %20, i64 %9)
  br label %22

22:                                               ; preds = %3, %14, %18
  %23 = phi i1 [ true, %3 ], [ %17, %14 ], [ %21, %18 ]
  ret i1 %23
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden i64 @_ZN3rtc15BitBufferWriter20SizeNonSymmetricBitsEjj(i32, i32) local_unnamed_addr #5 align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %8, label %4

4:                                                ; preds = %2
  %5 = zext i32 %1 to i64
  %6 = tail call i64 @llvm.ctlz.i64(i64 %5, i1 true) #8, !range !7
  %7 = sub nuw nsw i64 64, %6
  br label %8

8:                                                ; preds = %2, %4
  %9 = phi i64 [ 0, %2 ], [ %7, %4 ]
  %10 = trunc i64 %9 to i32
  %11 = shl i32 1, %10
  %12 = sub i32 %11, %1
  %13 = icmp ugt i32 %12, %0
  %14 = zext i1 %13 to i64
  %15 = sub nsw i64 %9, %14
  ret i64 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3rtc15BitBufferWriter22WriteExponentialGolombEj(%"class.rtc::BitBufferWriter"* nocapture, i32) local_unnamed_addr #2 align 2 {
  %3 = icmp eq i32 %1, -1
  br i1 %3, label %11, label %4

4:                                                ; preds = %2
  %5 = zext i32 %1 to i64
  %6 = add nuw nsw i64 %5, 1
  %7 = tail call i64 @llvm.ctlz.i64(i64 %6, i1 true) #8, !range !7
  %8 = shl nuw nsw i64 %7, 1
  %9 = xor i64 %8, 127
  %10 = tail call zeroext i1 @_ZN3rtc15BitBufferWriter9WriteBitsEmm(%"class.rtc::BitBufferWriter"* %0, i64 %6, i64 %9)
  br label %11

11:                                               ; preds = %2, %4
  %12 = phi i1 [ %10, %4 ], [ false, %2 ]
  ret i1 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3rtc15BitBufferWriter28WriteSignedExponentialGolombEi(%"class.rtc::BitBufferWriter"* nocapture, i32) local_unnamed_addr #2 align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %6

4:                                                ; preds = %2
  %5 = tail call zeroext i1 @_ZN3rtc15BitBufferWriter9WriteBitsEmm(%"class.rtc::BitBufferWriter"* %0, i64 1, i64 1) #8
  br label %30

6:                                                ; preds = %2
  %7 = icmp sgt i32 %1, 0
  br i1 %7, label %8, label %19

8:                                                ; preds = %6
  %9 = shl i32 %1, 1
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %30, label %11

11:                                               ; preds = %8
  %12 = add i32 %9, -1
  %13 = zext i32 %12 to i64
  %14 = add nuw nsw i64 %13, 1
  %15 = tail call i64 @llvm.ctlz.i64(i64 %14, i1 true) #8, !range !7
  %16 = shl nuw nsw i64 %15, 1
  %17 = xor i64 %16, 127
  %18 = tail call zeroext i1 @_ZN3rtc15BitBufferWriter9WriteBitsEmm(%"class.rtc::BitBufferWriter"* %0, i64 %14, i64 %17) #8
  br label %30

19:                                               ; preds = %6
  %20 = icmp eq i32 %1, -2147483648
  br i1 %20, label %30, label %21

21:                                               ; preds = %19
  %22 = shl i32 %1, 1
  %23 = sub i32 0, %22
  %24 = or i32 %23, 1
  %25 = zext i32 %24 to i64
  %26 = tail call i64 @llvm.ctlz.i64(i64 %25, i1 true) #8, !range !7
  %27 = shl nuw nsw i64 %26, 1
  %28 = xor i64 %27, 127
  %29 = tail call zeroext i1 @_ZN3rtc15BitBufferWriter9WriteBitsEmm(%"class.rtc::BitBufferWriter"* %0, i64 %25, i64 %28) #8
  br label %30

30:                                               ; preds = %11, %8, %19, %21, %4
  %31 = phi i1 [ %5, %4 ], [ %29, %21 ], [ false, %19 ], [ %18, %11 ], [ false, %8 ]
  ret i1 %31
}

; Function Attrs: noreturn
declare void @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8*, i32, i8*, i8*, ...) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #7

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = !{i64 0, i64 65}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !3}
