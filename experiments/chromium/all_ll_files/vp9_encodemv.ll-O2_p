; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_encodemv.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_encodemv.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.vp9_token = type { i32, i32 }
%struct.VP9Common = type { %struct.vpx_internal_error_info, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], [8 x i32], [3 x %struct.RefBuffer], i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], i32, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, i32 (%struct.VP9Common*, i32)*, void (%struct.VP9Common*)*, void (%struct.VP9Common*)*, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, i32, i32, i32, [2 x i8*], i8*, i8*, i32, i8, [11 x i8], %struct.loop_filter_info_n, i32, [4 x i32], %struct.loopfilter, %struct.segmentation, i8, [2 x i8], i32, %struct.frame_contexts*, %struct.frame_contexts*, i32, %struct.FRAME_COUNTS, i32, i32, i32, i32, i32, %struct.postproc_state, i32, i32, i32, i32, i32, i32, %struct.BufferPool*, i8*, i8*, i32, i32, [8 x i8] }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.RefCntBuffer = type { i32, %struct.MV_REF*, i32, i32, i8, i32, i32, %struct.vpx_codec_frame_buffer, %struct.yv12_buffer_config }
%struct.MV_REF = type { [2 x %union.int_mv], [2 x i8] }
%union.int_mv = type { i32 }
%struct.vpx_codec_frame_buffer = type { i8*, i64, i8* }
%struct.RefBuffer = type { i32, %struct.yv12_buffer_config*, %struct.scale_factors }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)*, [2 x [2 x [2 x void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*]]], [2 x [2 x [2 x void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*]]] }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MODE_INFO = type { i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x %union.int_mv], [4 x %struct.b_mode_info] }
%struct.b_mode_info = type { i8, [2 x %union.int_mv] }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [8 x [4 x [2 x i8]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { i32, i32, i32, i32, i8, i8, [4 x i8], [4 x i8], [2 x i8], [2 x i8], %struct.LOOP_FILTER_MASK*, i32 }
%struct.LOOP_FILTER_MASK = type { [4 x i64], [4 x i64], i64, [4 x i16], [4 x i16], i16, [64 x i8] }
%struct.segmentation = type { i8, i8, i8, i8, i8, [7 x i8], [3 x i8], [8 x [4 x i16]], [8 x i32], i32 }
%struct.frame_contexts = type { [4 x [9 x i8]], [10 x [9 x i8]], [16 x [3 x i8]], [4 x [2 x [2 x [6 x [6 x [3 x i8]]]]]], [4 x [2 x i8]], [7 x [3 x i8]], [4 x i8], [5 x i8], [5 x [2 x i8]], [5 x i8], %struct.tx_probs, [3 x i8], %struct.nmv_context, i32 }
%struct.tx_probs = type { [2 x [3 x i8]], [2 x [2 x i8]], [2 x [1 x i8]] }
%struct.nmv_context = type { [3 x i8], [2 x %struct.nmv_component] }
%struct.nmv_component = type { i8, [10 x i8], [1 x i8], [10 x i8], [2 x [3 x i8]], [3 x i8], i8, i8 }
%struct.FRAME_COUNTS = type { [4 x [10 x i32]], [10 x [10 x i32]], [16 x [4 x i32]], [4 x [2 x [2 x [6 x [6 x [4 x i32]]]]]], [4 x [2 x [2 x [6 x [6 x i32]]]]], [4 x [3 x i32]], [7 x [4 x i32]], [4 x [2 x i32]], [5 x [2 x i32]], [5 x [2 x [2 x i32]]], [5 x [2 x i32]], %struct.tx_counts, [3 x [2 x i32]], %struct.nmv_context_counts }
%struct.tx_counts = type { [2 x [4 x i32]], [2 x [3 x i32]], [2 x [2 x i32]], [4 x i32] }
%struct.nmv_context_counts = type { [4 x i32], [2 x %struct.nmv_component_counts] }
%struct.nmv_component_counts = type { [2 x i32], [11 x i32], [2 x i32], [10 x [2 x i32]], [2 x [4 x i32]], [4 x i32], [2 x i32], [2 x i32] }
%struct.postproc_state = type { i32, i32, i32, i32, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i8*, i8* }
%struct.BufferPool = type { i8*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)*, [12 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.vpx_writer = type { i32, i32, i32, i32, i8* }
%struct.VP9_COMP = type { %struct.FRAME_INFO, [8 x i8], %struct.QUANTS, %struct.ThreadData, %struct.MB_MODE_INFO_EXT*, [8 x i8], [256 x [8 x i16]], [256 x [8 x i16]], %struct.VP9Common, %struct.VP9EncoderConfig, %struct.lookahead_ctx*, %struct.lookahead_entry*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i8, [50 x %struct.TplDepFrame], [8 x %struct.yv12_buffer_config*], [8 x %struct.EncFrameBuf], %union.pthread_mutex_t, i32, %struct.KMEANS_DATA*, i32, i32, [8 x double], [8 x double], [8 x i32], i32, %struct.TileDataEnc*, i32, i32, [3 x i32], i32, i32, i32, [8 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64*, i32, i32, double*, %struct.yv12_buffer_config, [4 x [64 x %struct.TOKENEXTRA*]], [4 x [64 x %struct.TOKENLIST*]], i64, %struct.RD_OPT, %struct.CODING_CONTEXT, [2 x i32*], [2 x i32*], [2 x i32*], [2 x i32*], i64, i64, i64, %struct.RATE_CONTROL, double, [8 x [4 x i32]], %struct.vpx_codec_pkt_list*, [25 x %struct.MBGRAPH_FRAME_STATS], i32, i32, i32, %struct.SPEED_FEATURES, i32, i32, i32, i32, i32, i8*, i8*, [8 x i32], %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i32 (%struct.macroblock*, %struct.mv*, %struct.mv*, i32, i32, %struct.vp9_variance_vtable*, i32, i32, i32*, i32*, i32**, i32*, i32*, i8*, i32, i32, i32)*, %struct.scale_factors, i32 (%struct.macroblock*, %struct.search_site_config*, %struct.mv*, %struct.mv*, i32, i32, i32*, %struct.vp9_variance_vtable*, %struct.mv*)*, [13 x %struct.vp9_variance_vtable], i64, i64, i64, i64, %struct.TWO_PASS, i8, %struct.yv12_buffer_config, %struct.ALT_REF_AQ*, i32, i32, i32, i32, i32, i32, %struct.SVC, %struct.diff*, i32, i32, i32, %struct.search_site_config, [10 x i32], [7 x [4 x i32]], [2 x [10 x [10 x i32]]], [10 x [10 x [10 x i32]]], [4 x [3 x i32]], [16 x [4 x i32]], [3 x [2 x [4 x i32]]], %struct.vp9_denoiser, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.noise_estimate, i8*, [4 x i64], i64, i64, i64, i8, i32, %struct.VPxWorker*, %struct.EncWorkerData*, %struct.VP9LfSyncData, %struct.VP9BitstreamWorkerData*, i32, %struct.Vp9LevelInfo, %struct.MultiThreadHandle, void (%struct.VP9RowMTSyncData*, i32, i32)*, void (%struct.VP9RowMTSyncData*, i32, i32, i32)*, %struct.ARNRFilterData, i32, i32, i8*, i8*, i8*, i8*, i8, i8, i8*, i32, %struct.LevelConstraint, i8*, i8*, i32, %struct.vpx_roi_map, i32, %struct.EXT_RATECTRL, [8 x i8] }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PICK_MODE_CONTEXT*, %struct.PC_TREE*, %struct.PC_TREE*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], %struct.macroblockd, %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, [4 x i32], [4 x i32], i32, [4 x i32], [4 x i32], [4 x i32], [2 x i32*], [2 x i32*], i32**, [4 x i32], [2 x i32*], [2 x i32*], i32**, i32, i32, %struct.MvLimits, [4 x [256 x i8]], [4 x i32], i32, i32, [4 x [2 x [2 x [6 x [2 x [6 x [12 x i32]]]]]]], i32, i32, i32, i32, i32, [12 x i8], [12 x i64], [4 x %struct.mv], [2 x i8], i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, [25 x i8], i8, i8, void (i16*, i32*, i32)*, void (i32*, i8*, i32, i32)*, void (i32*, i16*, i32, i32, i32)*, [8 x i8], [4096 x i8], %struct.scale_factors*, [8 x i8] }
%struct.macroblock_plane = type { [4096 x i16], i32*, i32*, i16*, %struct.buf_2d, [8 x i8], [8 x i16], i16*, i16*, i16*, i16*, i16*, [2 x i64], [8 x i8] }
%struct.buf_2d = type { i8*, i32 }
%struct.macroblockd = type { [3 x %struct.macroblockd_plane], i8, i8, %struct.FRAME_COUNTS*, %struct.TileInfo, i32, %struct.MODE_INFO**, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i32, [3 x i8]*, i32, i32, i32, i32, %struct.frame_contexts*, [2 x %struct.RefBuffer*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [16 x i8]], i8*, [8 x i8], i32, i32, i32, %struct.vpx_internal_error_info*, i32* }
%struct.macroblockd_plane = type { i32*, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i16, i16, i8, i8, i16*, i32* }
%struct.TileInfo = type { i32, i32, i32, i32 }
%struct.MvLimits = type { i32, i32, i32, i32 }
%struct.mv = type { i16, i16 }
%struct.RD_COUNTS = type { [4 x [2 x [2 x [6 x [6 x [12 x i32]]]]]], [3 x i64], [4 x i64] }
%struct.PICK_MODE_CONTEXT = type { %struct.MODE_INFO, %struct.MB_MODE_INFO_EXT, i8*, [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], i32, i32, i32, i32, i32, [12 x i8], i32, i32, i32, i32, [4 x i64], i32, i64, i64, i32, i32, i32, i8, %union.int_mv, i8, i8, i32, [4 x %struct.mv], i8, i32, i8 }
%struct.MB_MODE_INFO_EXT = type { [4 x [2 x %union.int_mv]], [4 x i8] }
%struct.PC_TREE = type { i32, i32, i8, %struct.PICK_MODE_CONTEXT, [2 x %struct.PICK_MODE_CONTEXT], [2 x %struct.PICK_MODE_CONTEXT], %union.anon, %struct.mv }
%union.anon = type { [4 x %struct.PC_TREE*] }
%struct.VP9EncoderConfig = type { i32, i32, i32, i32, i32, double, %struct.vpx_rational, %struct.vpx_rational64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [12 x i32], [5 x i32], [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.vpx_rational = type { i32, i32 }
%struct.vpx_rational64 = type { i64, i32 }
%struct.vpx_fixed_buf = type { i8*, i64 }
%struct.lookahead_ctx = type { i32, i32, i32, i32, i32, %struct.lookahead_entry* }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, i32, i32, i32, i32, i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, i64, i32, %union.int_mv }
%struct.EncFrameBuf = type { i32, i32, %struct.yv12_buffer_config }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.KMEANS_DATA = type { double, i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [13 x [30 x i32]], [13 x [30 x i8]], %struct.FIRSTPASS_DATA, %struct.VP9RowMTSyncData, i32* }
%struct.FIRSTPASS_DATA = type { double, double, i64, i64, i64, i64, i32, i32, double, double, double, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32 }
%struct.VP9RowMTSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32 }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.0, %union.anon.1, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.0 = type { i64 }
%union.anon.1 = type { i64 }
%struct.TOKENEXTRA = type { i8*, i16, i32 }
%struct.TOKENLIST = type { %struct.TOKENEXTRA*, %struct.TOKENEXTRA*, i32 }
%struct.RD_OPT = type { [30 x i32], [6 x i32], [8 x [13 x [30 x i32]]], [4 x [3 x i64]], [4 x [4 x i64]], i32, i32, double }
%struct.CODING_CONTEXT = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [3 x i8], i8*, [4 x i8], [2 x i8], %struct.frame_contexts }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, [2 x i32], i32, i32, i32, i32, i32, [5 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, [2 x i32], [2 x i32], [5 x i32], i32, i32, [25 x i64], i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, [5 x i32], double, i32, i32, i32, i32 }
%struct.vpx_codec_pkt_list = type { i32, i32, [1 x %struct.vpx_codec_cx_pkt] }
%struct.vpx_codec_cx_pkt = type { i32, %union.anon.3 }
%union.anon.3 = type { %struct.anon.4, [40 x i8] }
%struct.anon.4 = type { i8*, i64, i64, i64, i32, i32, [5 x i32], [5 x i32], [5 x i8] }
%struct.MBGRAPH_FRAME_STATS = type { %struct.MBGRAPH_MB_STATS* }
%struct.MBGRAPH_MB_STATS = type { [4 x %struct.anon.5] }
%struct.anon.5 = type { i32, %union.anon.6 }
%union.anon.6 = type { %union.int_mv }
%struct.SPEED_FEATURES = type { %struct.MV_SPEED_FEATURES, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i8, i8, i32, i32, i8, i8, i8, i32, i32, i32, i32, i32, i32, [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], [4 x i32], [13 x i32], i32, i32, i32, i32, i32, [13 x i32], i32, i32, i32, i8, i32, i32, i32, i8, i32, i32, i32, %struct.PARTITION_SEARCH_BREAKOUT_THR, %struct.anon.7, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, %struct.ADAPT_SUBPEL_FORCE_STOP, i32 }
%struct.ADAPT_SUBPEL_FORCE_STOP = type { i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.PARTITION_SEARCH_BREAKOUT_THR = type { i64, i32 }
%struct.anon.7 = type { i32, [3 x float], i32, i32, [4 x i32] }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, double, [3 x i32], i32, double, i32, i32, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.vp9_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)* }
%struct.TWO_PASS = type { i32, i32, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRST_PASS_INFO, %struct.FIRSTPASS_STATS, i32, i64, double, double, double, double, %struct.FP_MB_FLOAT_STATS*, i32, i64, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [6 x i32], %struct.GF_GROUP }
%struct.FIRST_PASS_INFO = type { %struct.FIRSTPASS_STATS*, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64 }
%struct.FP_MB_FLOAT_STATS = type { double, double, double }
%struct.GF_GROUP = type { i8, [252 x i32], [252 x i32], [252 x i8], [252 x i8], [252 x i8], [252 x i32], [252 x i32], i32, i32, [50 x i32], i32, i32, i32, i32, i32, i32 }
%struct.ALT_REF_AQ = type opaque
%struct.SVC = type { i32, i32, i32, i32, i32, i32, %struct.lookahead_entry, i32, [25 x %struct.yv12_buffer_config], %struct.yv12_buffer_config, i32, i32, [12 x %struct.LAYER_CONTEXT], i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [2 x %struct.BUFFER_LONGTERM_REF], i32, i32, i32, i32, [5 x i8], [5 x i32], i8*, [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, i32, i32, [5 x i32], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i32], [8 x i8], [8 x i8], [5 x i32], i8, i8, i8, [8 x i8], i32, [5 x i32], i32, [5 x i64], i64, i64, [5 x i64], i32, i32, i32, i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, %struct.TWO_PASS, %struct.vpx_fixed_buf, i32, i32, i32, i32, %struct.lookahead_entry*, i32, i32, i32, i64, i32, i8*, i8*, i8*, i32, i32, i32, i8, i32 }
%struct.BUFFER_LONGTERM_REF = type { i32, i32 }
%struct.diff = type { i32, i32, i32 }
%struct.search_site_config = type { [88 x %struct.mv], [88 x i64], i32, i32 }
%struct.vp9_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VPxWorker = type { %struct.VPxWorkerImpl*, i32, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.VPxWorkerImpl = type opaque
%struct.EncWorkerData = type { %struct.VP9_COMP*, %struct.ThreadData*, i32, i32, [64 x i32] }
%struct.VP9LfSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, %struct.LoopFilterWorkerData*, i32, i32, %union.pthread_mutex_t*, %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.VP9Common*, [3 x %struct.macroblockd_plane], i32, i32, i32 }
%struct.VP9BitstreamWorkerData = type opaque
%struct.Vp9LevelInfo = type { %struct.Vp9LevelStats, %struct.Vp9LevelSpec }
%struct.Vp9LevelStats = type { i8, i32, i64, i64, double, %struct.FrameWindowBuffer, i32 }
%struct.FrameWindowBuffer = type { [128 x %struct.FrameRecord], i8, i8 }
%struct.FrameRecord = type { i64, i32, i32 }
%struct.Vp9LevelSpec = type { i32, i64, i32, i32, double, double, double, i8, i32, i8 }
%struct.MultiThreadHandle = type { i32, i32, i32, [4 x i32], %struct.JobQueue*, i32, [64 x %struct.RowMTInfo], [80 x i32] }
%struct.JobQueue = type { i8*, %struct.JobNode }
%struct.JobNode = type { i32, i32, i32 }
%struct.RowMTInfo = type { %struct.JobQueueHandle, %union.pthread_mutex_t }
%struct.JobQueueHandle = type { i8*, i32 }
%struct.ARNRFilterData = type { [25 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors }
%struct.LevelConstraint = type { i8, i8, i32, double }
%struct.vpx_roi_map = type { i8, i8*, i32, i32, [8 x i32], [8 x i32], [8 x i32], [8 x i32], [4 x i32] }
%struct.EXT_RATECTRL = type { i32, i8*, %struct.vpx_rc_funcs, %struct.vpx_rc_config, %struct.vpx_rc_firstpass_stats }
%struct.vpx_rc_funcs = type { i32 (i8*, %struct.vpx_rc_config*, i8**)*, i32 (i8*, %struct.vpx_rc_firstpass_stats*)*, i32 (i8*, %struct.vpx_rc_encodeframe_info*, %struct.vpx_rc_encodeframe_decision*)*, i32 (i8*, %struct.vpx_rc_encodeframe_result*)*, i32 (i8*)*, i8* }
%struct.vpx_rc_encodeframe_info = type { i32, i32, i32, i32, [3 x i32], [3 x i32] }
%struct.vpx_rc_encodeframe_decision = type { i32 }
%struct.vpx_rc_encodeframe_result = type { i64, i64, i64 }
%struct.vpx_rc_config = type { i32, i32, i32, i32, i32, i32 }
%struct.vpx_rc_firstpass_stats = type { %struct.vpx_rc_frame_stats*, i32 }
%struct.vpx_rc_frame_stats = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }

@mv_joint_encodings = internal global [4 x %struct.vp9_token] zeroinitializer, align 16
@vp9_mv_joint_tree = external constant [0 x i8], align 1
@mv_class_encodings = internal global [11 x %struct.vp9_token] zeroinitializer, align 16
@vp9_mv_class_tree = external constant [0 x i8], align 1
@mv_fp_encodings = internal global [4 x %struct.vp9_token] zeroinitializer, align 16
@vp9_mv_fp_tree = external constant [0 x i8], align 1
@vp9_mv_class0_tree = external constant [0 x i8], align 1
@num_4x4_blocks_wide_lookup = external local_unnamed_addr constant [13 x i8], align 1
@num_4x4_blocks_high_lookup = external local_unnamed_addr constant [13 x i8], align 1
@vp9_prob_cost = external local_unnamed_addr constant [256 x i16], align 16
@vpx_norm = external local_unnamed_addr constant [256 x i8], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_entropy_mv_init() local_unnamed_addr #0 {
  tail call void @vp9_tokens_from_tree(%struct.vp9_token* getelementptr inbounds ([4 x %struct.vp9_token], [4 x %struct.vp9_token]* @mv_joint_encodings, i64 0, i64 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp9_mv_joint_tree, i64 0, i64 0)) #4
  tail call void @vp9_tokens_from_tree(%struct.vp9_token* getelementptr inbounds ([11 x %struct.vp9_token], [11 x %struct.vp9_token]* @mv_class_encodings, i64 0, i64 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp9_mv_class_tree, i64 0, i64 0)) #4
  tail call void @vp9_tokens_from_tree(%struct.vp9_token* getelementptr inbounds ([4 x %struct.vp9_token], [4 x %struct.vp9_token]* @mv_fp_encodings, i64 0, i64 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp9_mv_fp_tree, i64 0, i64 0)) #4
  ret void
}

declare void @vp9_tokens_from_tree(%struct.vp9_token*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_write_nmv_probs(%struct.VP9Common* nocapture readonly, i32, %struct.vpx_writer* nocapture, %struct.nmv_context_counts*) local_unnamed_addr #0 {
  %5 = alloca [32 x [2 x i32]], align 16
  %6 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 73
  %7 = load %struct.frame_contexts*, %struct.frame_contexts** %6, align 8
  %8 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %3, i64 0, i32 0, i64 0
  %9 = bitcast [32 x [2 x i32]]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %9) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 256, i1 false) #4
  %10 = getelementptr inbounds [32 x [2 x i32]], [32 x [2 x i32]]* %5, i64 0, i64 0
  call void @vp9_tree_probs_from_distribution(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp9_mv_joint_tree, i64 0, i64 0), [2 x i32]* nonnull %10, i32* %8) #4
  %11 = getelementptr inbounds [32 x [2 x i32]], [32 x [2 x i32]]* %5, i64 0, i64 0, i64 0
  %12 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 0, i64 0
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* nonnull %11, i8* %12) #4
  %13 = getelementptr inbounds [32 x [2 x i32]], [32 x [2 x i32]]* %5, i64 0, i64 1, i64 0
  %14 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 0, i64 1
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %13, i8* %14) #4
  %15 = getelementptr inbounds [32 x [2 x i32]], [32 x [2 x i32]]* %5, i64 0, i64 2, i64 0
  %16 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 0, i64 2
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %15, i8* %16) #4
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %9) #4
  %17 = getelementptr inbounds [32 x [2 x i32]], [32 x [2 x i32]]* %5, i64 0, i64 3, i64 0
  %18 = getelementptr inbounds [32 x [2 x i32]], [32 x [2 x i32]]* %5, i64 0, i64 4, i64 0
  %19 = getelementptr inbounds [32 x [2 x i32]], [32 x [2 x i32]]* %5, i64 0, i64 5, i64 0
  %20 = getelementptr inbounds [32 x [2 x i32]], [32 x [2 x i32]]* %5, i64 0, i64 6, i64 0
  %21 = getelementptr inbounds [32 x [2 x i32]], [32 x [2 x i32]]* %5, i64 0, i64 7, i64 0
  %22 = getelementptr inbounds [32 x [2 x i32]], [32 x [2 x i32]]* %5, i64 0, i64 8, i64 0
  %23 = getelementptr inbounds [32 x [2 x i32]], [32 x [2 x i32]]* %5, i64 0, i64 9, i64 0
  br label %24

24:                                               ; preds = %24, %4
  %25 = phi i64 [ 0, %4 ], [ %61, %24 ]
  %26 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %3, i64 0, i32 1, i64 %25, i32 0, i64 0
  %27 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 %25, i32 0
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %26, i8* %27)
  %28 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %3, i64 0, i32 1, i64 %25, i32 1, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %9) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 256, i1 false) #4
  call void @vp9_tree_probs_from_distribution(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp9_mv_class_tree, i64 0, i64 0), [2 x i32]* nonnull %10, i32* %28) #4
  %29 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 %25, i32 1, i64 0
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* nonnull %11, i8* %29) #4
  %30 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 %25, i32 1, i64 1
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %13, i8* %30) #4
  %31 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 %25, i32 1, i64 2
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %15, i8* %31) #4
  %32 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 %25, i32 1, i64 3
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %17, i8* %32) #4
  %33 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 %25, i32 1, i64 4
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %18, i8* %33) #4
  %34 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 %25, i32 1, i64 5
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %19, i8* %34) #4
  %35 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 %25, i32 1, i64 6
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %20, i8* %35) #4
  %36 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 %25, i32 1, i64 7
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %21, i8* %36) #4
  %37 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 %25, i32 1, i64 8
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %22, i8* %37) #4
  %38 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 %25, i32 1, i64 9
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %23, i8* %38) #4
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %9) #4
  %39 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %3, i64 0, i32 1, i64 %25, i32 2, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %9) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 256, i1 false) #4
  call void @vp9_tree_probs_from_distribution(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp9_mv_class0_tree, i64 0, i64 0), [2 x i32]* nonnull %10, i32* %39) #4
  %40 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 %25, i32 2, i64 0
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* nonnull %11, i8* %40) #4
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %9) #4
  %41 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %3, i64 0, i32 1, i64 %25, i32 3, i64 0, i64 0
  %42 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 %25, i32 3, i64 0
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %41, i8* %42)
  %43 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %3, i64 0, i32 1, i64 %25, i32 3, i64 1, i64 0
  %44 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 %25, i32 3, i64 1
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %43, i8* %44)
  %45 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %3, i64 0, i32 1, i64 %25, i32 3, i64 2, i64 0
  %46 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 %25, i32 3, i64 2
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %45, i8* %46)
  %47 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %3, i64 0, i32 1, i64 %25, i32 3, i64 3, i64 0
  %48 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 %25, i32 3, i64 3
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %47, i8* %48)
  %49 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %3, i64 0, i32 1, i64 %25, i32 3, i64 4, i64 0
  %50 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 %25, i32 3, i64 4
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %49, i8* %50)
  %51 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %3, i64 0, i32 1, i64 %25, i32 3, i64 5, i64 0
  %52 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 %25, i32 3, i64 5
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %51, i8* %52)
  %53 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %3, i64 0, i32 1, i64 %25, i32 3, i64 6, i64 0
  %54 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 %25, i32 3, i64 6
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %53, i8* %54)
  %55 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %3, i64 0, i32 1, i64 %25, i32 3, i64 7, i64 0
  %56 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 %25, i32 3, i64 7
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %55, i8* %56)
  %57 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %3, i64 0, i32 1, i64 %25, i32 3, i64 8, i64 0
  %58 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 %25, i32 3, i64 8
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %57, i8* %58)
  %59 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %3, i64 0, i32 1, i64 %25, i32 3, i64 9, i64 0
  %60 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 %25, i32 3, i64 9
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %59, i8* %60)
  %61 = add nuw nsw i64 %25, 1
  %62 = icmp eq i64 %61, 2
  br i1 %62, label %63, label %24

63:                                               ; preds = %24
  %64 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %3, i64 0, i32 1, i64 0, i32 4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %9) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 256, i1 false) #4
  call void @vp9_tree_probs_from_distribution(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp9_mv_fp_tree, i64 0, i64 0), [2 x i32]* nonnull %10, i32* %64) #4
  %65 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 0, i32 4, i64 0, i64 0
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* nonnull %11, i8* %65) #4
  %66 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 0, i32 4, i64 0, i64 1
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %13, i8* %66) #4
  %67 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 0, i32 4, i64 0, i64 2
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %15, i8* %67) #4
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %9) #4
  %68 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %3, i64 0, i32 1, i64 0, i32 4, i64 1, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %9) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 256, i1 false) #4
  call void @vp9_tree_probs_from_distribution(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp9_mv_fp_tree, i64 0, i64 0), [2 x i32]* nonnull %10, i32* %68) #4
  %69 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 0, i32 4, i64 1, i64 0
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* nonnull %11, i8* %69) #4
  %70 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 0, i32 4, i64 1, i64 1
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %13, i8* %70) #4
  %71 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 0, i32 4, i64 1, i64 2
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %15, i8* %71) #4
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %9) #4
  %72 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %3, i64 0, i32 1, i64 0, i32 5, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %9) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 256, i1 false) #4
  call void @vp9_tree_probs_from_distribution(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp9_mv_fp_tree, i64 0, i64 0), [2 x i32]* nonnull %10, i32* %72) #4
  %73 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 0, i32 5, i64 0
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* nonnull %11, i8* %73) #4
  %74 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 0, i32 5, i64 1
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %13, i8* %74) #4
  %75 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 0, i32 5, i64 2
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %15, i8* %75) #4
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %9) #4
  %76 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %3, i64 0, i32 1, i64 1, i32 4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %9) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 256, i1 false) #4
  call void @vp9_tree_probs_from_distribution(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp9_mv_fp_tree, i64 0, i64 0), [2 x i32]* nonnull %10, i32* %76) #4
  %77 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 1, i32 4, i64 0, i64 0
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* nonnull %11, i8* %77) #4
  %78 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 1, i32 4, i64 0, i64 1
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %13, i8* %78) #4
  %79 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 1, i32 4, i64 0, i64 2
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %15, i8* %79) #4
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %9) #4
  %80 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %3, i64 0, i32 1, i64 1, i32 4, i64 1, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %9) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 256, i1 false) #4
  call void @vp9_tree_probs_from_distribution(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp9_mv_fp_tree, i64 0, i64 0), [2 x i32]* nonnull %10, i32* %80) #4
  %81 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 1, i32 4, i64 1, i64 0
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* nonnull %11, i8* %81) #4
  %82 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 1, i32 4, i64 1, i64 1
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %13, i8* %82) #4
  %83 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 1, i32 4, i64 1, i64 2
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %15, i8* %83) #4
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %9) #4
  %84 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %3, i64 0, i32 1, i64 1, i32 5, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %9) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 256, i1 false) #4
  call void @vp9_tree_probs_from_distribution(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp9_mv_fp_tree, i64 0, i64 0), [2 x i32]* nonnull %10, i32* %84) #4
  %85 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 1, i32 5, i64 0
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* nonnull %11, i8* %85) #4
  %86 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 1, i32 5, i64 1
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %13, i8* %86) #4
  %87 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 1, i32 5, i64 2
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %15, i8* %87) #4
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %9) #4
  %88 = icmp eq i32 %1, 0
  br i1 %88, label %98, label %89

89:                                               ; preds = %63
  %90 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %3, i64 0, i32 1, i64 0, i32 6, i64 0
  %91 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 0, i32 6
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %90, i8* %91)
  %92 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %3, i64 0, i32 1, i64 0, i32 7, i64 0
  %93 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 0, i32 7
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %92, i8* %93)
  %94 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %3, i64 0, i32 1, i64 1, i32 6, i64 0
  %95 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 1, i32 6
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %94, i8* %95)
  %96 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %3, i64 0, i32 1, i64 1, i32 7, i64 0
  %97 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 12, i32 1, i64 1, i32 7
  call fastcc void @update_mv(%struct.vpx_writer* %2, i32* %96, i8* %97)
  br label %98

98:                                               ; preds = %89, %63
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @update_mv(%struct.vpx_writer* nocapture, i32* nocapture readonly, i8* nocapture) unnamed_addr #3 {
  %4 = load i32, i32* %1, align 4
  %5 = getelementptr inbounds i32, i32* %1, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = add i32 %6, %4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %22, label %9

9:                                                ; preds = %3
  %10 = zext i32 %4 to i64
  %11 = shl nuw nsw i64 %10, 8
  %12 = lshr i32 %7, 1
  %13 = zext i32 %12 to i64
  %14 = add nuw nsw i64 %11, %13
  %15 = zext i32 %7 to i64
  %16 = udiv i64 %14, %15
  %17 = trunc i64 %16 to i32
  %18 = sub nsw i32 255, %17
  %19 = lshr i32 %18, 23
  %20 = or i32 %19, %17
  %21 = trunc i32 %20 to i8
  br label %22

22:                                               ; preds = %3, %9
  %23 = phi i8 [ %21, %9 ], [ -128, %3 ]
  %24 = or i8 %23, 1
  %25 = load i8, i8* %2, align 1
  %26 = zext i8 %25 to i64
  %27 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %26
  %28 = load i16, i16* %27, align 2
  %29 = zext i16 %28 to i32
  %30 = mul i32 %4, %29
  %31 = sub nuw nsw i64 256, %26
  %32 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %31
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = mul i32 %6, %34
  %36 = add i32 %35, %30
  %37 = load i16, i16* getelementptr inbounds ([256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 252), align 8
  %38 = zext i16 %37 to i32
  %39 = add i32 %36, %38
  %40 = zext i8 %24 to i64
  %41 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %40
  %42 = load i16, i16* %41, align 2
  %43 = zext i16 %42 to i32
  %44 = mul i32 %4, %43
  %45 = sub nuw nsw i64 256, %40
  %46 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %45
  %47 = load i16, i16* %46, align 2
  %48 = zext i16 %47 to i32
  %49 = mul i32 %6, %48
  %50 = load i16, i16* getelementptr inbounds ([256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 4), align 8
  %51 = zext i16 %50 to i32
  %52 = add i32 %44, 3584
  %53 = add i32 %52, %49
  %54 = add i32 %53, %51
  %55 = icmp ugt i32 %39, %54
  %56 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 2
  %57 = load i32, i32* %56, align 8
  %58 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 1
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 0
  %61 = load i32, i32* %60, align 8
  %62 = mul i32 %59, 252
  %63 = add i32 %62, -252
  %64 = lshr i32 %63, 8
  %65 = add nuw nsw i32 %64, 1
  %66 = sub i32 %59, %65
  %67 = select i1 %55, i32 %66, i32 %65
  %68 = select i1 %55, i32 %65, i32 0
  %69 = add i32 %68, %61
  %70 = zext i32 %67 to i64
  %71 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = shl i32 %67, %73
  %75 = add nsw i32 %57, %73
  %76 = icmp sgt i32 %75, -1
  br i1 %76, label %77, label %124

77:                                               ; preds = %22
  %78 = sub i32 0, %57
  %79 = xor i32 %57, -1
  %80 = shl i32 %69, %79
  %81 = icmp slt i32 %80, 0
  br i1 %81, label %82, label %110

82:                                               ; preds = %77
  %83 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 3
  %84 = load i32, i32* %83, align 4
  %85 = add i32 %84, -1
  %86 = icmp sgt i32 %85, -1
  %87 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 4
  %88 = load i8*, i8** %87, align 8
  %89 = sext i32 %85 to i64
  %90 = getelementptr inbounds i8, i8* %88, i64 %89
  br i1 %86, label %91, label %106

91:                                               ; preds = %82, %98
  %92 = phi i8* [ %102, %98 ], [ %88, %82 ]
  %93 = phi i64 [ %105, %98 ], [ %89, %82 ]
  %94 = phi i8* [ %104, %98 ], [ %90, %82 ]
  %95 = load i8, i8* %94, align 1
  %96 = icmp eq i8 %95, -1
  %97 = getelementptr inbounds i8, i8* %92, i64 %93
  br i1 %96, label %98, label %106

98:                                               ; preds = %91
  store i8 0, i8* %97, align 1
  %99 = trunc i64 %93 to i32
  %100 = add i32 %99, -1
  %101 = icmp sgt i32 %100, -1
  %102 = load i8*, i8** %87, align 8
  %103 = sext i32 %100 to i64
  %104 = getelementptr inbounds i8, i8* %102, i64 %103
  %105 = add nsw i64 %93, -1
  br i1 %101, label %91, label %106

106:                                              ; preds = %98, %91, %82
  %107 = phi i8* [ %90, %82 ], [ %97, %91 ], [ %104, %98 ]
  %108 = load i8, i8* %107, align 1
  %109 = add i8 %108, 1
  store i8 %109, i8* %107, align 1
  br label %110

110:                                              ; preds = %106, %77
  %111 = add i32 %57, 24
  %112 = lshr i32 %69, %111
  %113 = trunc i32 %112 to i8
  %114 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 4
  %115 = load i8*, i8** %114, align 8
  %116 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 3
  %117 = load i32, i32* %116, align 4
  %118 = add i32 %117, 1
  store i32 %118, i32* %116, align 4
  %119 = zext i32 %117 to i64
  %120 = getelementptr inbounds i8, i8* %115, i64 %119
  store i8 %113, i8* %120, align 1
  %121 = shl i32 %69, %78
  %122 = and i32 %121, 16777215
  %123 = add nsw i32 %75, -8
  br label %124

124:                                              ; preds = %22, %110
  %125 = phi i32 [ %123, %110 ], [ %75, %22 ]
  %126 = phi i32 [ %122, %110 ], [ %69, %22 ]
  %127 = phi i32 [ %75, %110 ], [ %73, %22 ]
  %128 = shl i32 %126, %127
  store i32 %125, i32* %56, align 8
  store i32 %128, i32* %60, align 8
  store i32 %74, i32* %58, align 4
  br i1 %55, label %129, label %210

129:                                              ; preds = %124
  store i8 %24, i8* %2, align 1
  %130 = lshr i8 %23, 1
  %131 = zext i8 %130 to i32
  %132 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 3
  %133 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 4
  %134 = load i32, i32* %56, align 8
  %135 = load i32, i32* %58, align 4
  %136 = load i32, i32* %60, align 8
  br label %137

137:                                              ; preds = %203, %129
  %138 = phi i32 [ %136, %129 ], [ %207, %203 ]
  %139 = phi i32 [ %135, %129 ], [ %157, %203 ]
  %140 = phi i32 [ %134, %129 ], [ %204, %203 ]
  %141 = phi i32 [ 6, %129 ], [ %208, %203 ]
  %142 = shl i32 %139, 7
  %143 = add i32 %142, -128
  %144 = lshr i32 %143, 8
  %145 = add nuw nsw i32 %144, 1
  %146 = shl i32 1, %141
  %147 = and i32 %146, %131
  %148 = icmp eq i32 %147, 0
  %149 = sub i32 %139, %145
  %150 = select i1 %148, i32 %145, i32 %149
  %151 = select i1 %148, i32 0, i32 %145
  %152 = add i32 %151, %138
  %153 = zext i32 %150 to i64
  %154 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %153
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i32
  %157 = shl i32 %150, %156
  %158 = add nsw i32 %140, %156
  %159 = icmp sgt i32 %158, -1
  br i1 %159, label %160, label %203

160:                                              ; preds = %137
  %161 = sub i32 0, %140
  %162 = xor i32 %140, -1
  %163 = shl i32 %152, %162
  %164 = icmp slt i32 %163, 0
  br i1 %164, label %165, label %191

165:                                              ; preds = %160
  %166 = load i32, i32* %132, align 4
  %167 = add i32 %166, -1
  %168 = icmp sgt i32 %167, -1
  %169 = load i8*, i8** %133, align 8
  %170 = sext i32 %167 to i64
  %171 = getelementptr inbounds i8, i8* %169, i64 %170
  br i1 %168, label %172, label %187

172:                                              ; preds = %165, %179
  %173 = phi i8* [ %183, %179 ], [ %169, %165 ]
  %174 = phi i64 [ %186, %179 ], [ %170, %165 ]
  %175 = phi i8* [ %185, %179 ], [ %171, %165 ]
  %176 = load i8, i8* %175, align 1
  %177 = icmp eq i8 %176, -1
  %178 = getelementptr inbounds i8, i8* %173, i64 %174
  br i1 %177, label %179, label %187

179:                                              ; preds = %172
  store i8 0, i8* %178, align 1
  %180 = trunc i64 %174 to i32
  %181 = add i32 %180, -1
  %182 = icmp sgt i32 %181, -1
  %183 = load i8*, i8** %133, align 8
  %184 = sext i32 %181 to i64
  %185 = getelementptr inbounds i8, i8* %183, i64 %184
  %186 = add nsw i64 %174, -1
  br i1 %182, label %172, label %187

187:                                              ; preds = %179, %172, %165
  %188 = phi i8* [ %171, %165 ], [ %178, %172 ], [ %185, %179 ]
  %189 = load i8, i8* %188, align 1
  %190 = add i8 %189, 1
  store i8 %190, i8* %188, align 1
  br label %191

191:                                              ; preds = %187, %160
  %192 = add i32 %140, 24
  %193 = lshr i32 %152, %192
  %194 = trunc i32 %193 to i8
  %195 = load i8*, i8** %133, align 8
  %196 = load i32, i32* %132, align 4
  %197 = add i32 %196, 1
  store i32 %197, i32* %132, align 4
  %198 = zext i32 %196 to i64
  %199 = getelementptr inbounds i8, i8* %195, i64 %198
  store i8 %194, i8* %199, align 1
  %200 = shl i32 %152, %161
  %201 = and i32 %200, 16777215
  %202 = add nsw i32 %158, -8
  br label %203

203:                                              ; preds = %191, %137
  %204 = phi i32 [ %202, %191 ], [ %158, %137 ]
  %205 = phi i32 [ %201, %191 ], [ %152, %137 ]
  %206 = phi i32 [ %158, %191 ], [ %156, %137 ]
  %207 = shl i32 %205, %206
  store i32 %204, i32* %56, align 8
  store i32 %207, i32* %60, align 8
  store i32 %157, i32* %58, align 4
  %208 = add nsw i32 %141, -1
  %209 = icmp eq i32 %141, 0
  br i1 %209, label %210, label %137

210:                                              ; preds = %203, %124
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_encode_mv(%struct.VP9_COMP* nocapture readonly, %struct.vpx_writer*, %struct.mv* nocapture readonly, %struct.mv* nocapture readonly, %struct.nmv_context* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #0 {
  %8 = getelementptr inbounds %struct.mv, %struct.mv* %2, i64 0, i32 0
  %9 = load i16, i16* %8, align 2
  %10 = getelementptr inbounds %struct.mv, %struct.mv* %3, i64 0, i32 0
  %11 = load i16, i16* %10, align 2
  %12 = sub i16 %9, %11
  %13 = getelementptr inbounds %struct.mv, %struct.mv* %2, i64 0, i32 1
  %14 = load i16, i16* %13, align 2
  %15 = getelementptr inbounds %struct.mv, %struct.mv* %3, i64 0, i32 1
  %16 = load i16, i16* %15, align 2
  %17 = sub i16 %14, %16
  %18 = icmp eq i16 %12, 0
  %19 = icmp eq i16 %17, 0
  %20 = xor i1 %19, true
  %21 = zext i1 %20 to i32
  %22 = select i1 %19, i32 2, i32 3
  %23 = select i1 %18, i32 %21, i32 %22
  %24 = icmp eq i32 %5, 0
  br i1 %24, label %38, label %25

25:                                               ; preds = %7
  %26 = sext i16 %11 to i32
  %27 = icmp slt i32 %26, 0
  %28 = sub nsw i32 0, %26
  %29 = select i1 %27, i32 %28, i32 %26
  %30 = icmp slt i32 %29, 64
  br i1 %30, label %31, label %38

31:                                               ; preds = %25
  %32 = sext i16 %16 to i32
  %33 = icmp slt i32 %32, 0
  %34 = sub nsw i32 0, %32
  %35 = select i1 %33, i32 %34, i32 %32
  %36 = icmp slt i32 %35, 64
  %37 = zext i1 %36 to i32
  br label %38

38:                                               ; preds = %31, %25, %7
  %39 = phi i32 [ 0, %7 ], [ 0, %25 ], [ %37, %31 ]
  %40 = zext i32 %23 to i64
  %41 = getelementptr inbounds [4 x %struct.vp9_token], [4 x %struct.vp9_token]* @mv_joint_encodings, i64 0, i64 %40, i32 0
  %42 = load i32, i32* %41, align 8
  %43 = getelementptr inbounds [4 x %struct.vp9_token], [4 x %struct.vp9_token]* @mv_joint_encodings, i64 0, i64 %40, i32 1
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %1, i64 0, i32 2
  %46 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %1, i64 0, i32 1
  %47 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %1, i64 0, i32 0
  %48 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %1, i64 0, i32 3
  %49 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %1, i64 0, i32 4
  %50 = load i32, i32* %45, align 8
  %51 = load i32, i32* %46, align 4
  %52 = load i32, i32* %47, align 8
  br label %53

53:                                               ; preds = %127, %38
  %54 = phi i32 [ %52, %38 ], [ %131, %127 ]
  %55 = phi i32 [ %51, %38 ], [ %81, %127 ]
  %56 = phi i32 [ %50, %38 ], [ %128, %127 ]
  %57 = phi i8 [ 0, %38 ], [ %135, %127 ]
  %58 = phi i32 [ %44, %38 ], [ %59, %127 ]
  %59 = add nsw i32 %58, -1
  %60 = lshr i32 %42, %59
  %61 = and i32 %60, 1
  %62 = sext i8 %57 to i32
  %63 = ashr i32 %62, 1
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds %struct.nmv_context, %struct.nmv_context* %4, i64 0, i32 0, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = add i32 %55, -1
  %69 = mul i32 %68, %67
  %70 = lshr i32 %69, 8
  %71 = add nuw nsw i32 %70, 1
  %72 = icmp eq i32 %61, 0
  %73 = sub i32 %55, %71
  %74 = select i1 %72, i32 %71, i32 %73
  %75 = select i1 %72, i32 0, i32 %71
  %76 = add i32 %75, %54
  %77 = zext i32 %74 to i64
  %78 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = shl i32 %74, %80
  %82 = add nsw i32 %56, %80
  %83 = icmp sgt i32 %82, -1
  br i1 %83, label %84, label %127

84:                                               ; preds = %53
  %85 = sub i32 0, %56
  %86 = xor i32 %56, -1
  %87 = shl i32 %76, %86
  %88 = icmp slt i32 %87, 0
  br i1 %88, label %89, label %115

89:                                               ; preds = %84
  %90 = load i32, i32* %48, align 4
  %91 = add i32 %90, -1
  %92 = icmp sgt i32 %91, -1
  %93 = load i8*, i8** %49, align 8
  %94 = sext i32 %91 to i64
  %95 = getelementptr inbounds i8, i8* %93, i64 %94
  br i1 %92, label %96, label %111

96:                                               ; preds = %89, %103
  %97 = phi i8* [ %107, %103 ], [ %93, %89 ]
  %98 = phi i64 [ %110, %103 ], [ %94, %89 ]
  %99 = phi i8* [ %109, %103 ], [ %95, %89 ]
  %100 = load i8, i8* %99, align 1
  %101 = icmp eq i8 %100, -1
  %102 = getelementptr inbounds i8, i8* %97, i64 %98
  br i1 %101, label %103, label %111

103:                                              ; preds = %96
  store i8 0, i8* %102, align 1
  %104 = trunc i64 %98 to i32
  %105 = add i32 %104, -1
  %106 = icmp sgt i32 %105, -1
  %107 = load i8*, i8** %49, align 8
  %108 = sext i32 %105 to i64
  %109 = getelementptr inbounds i8, i8* %107, i64 %108
  %110 = add nsw i64 %98, -1
  br i1 %106, label %96, label %111

111:                                              ; preds = %103, %96, %89
  %112 = phi i8* [ %95, %89 ], [ %102, %96 ], [ %109, %103 ]
  %113 = load i8, i8* %112, align 1
  %114 = add i8 %113, 1
  store i8 %114, i8* %112, align 1
  br label %115

115:                                              ; preds = %111, %84
  %116 = add i32 %56, 24
  %117 = lshr i32 %76, %116
  %118 = trunc i32 %117 to i8
  %119 = load i8*, i8** %49, align 8
  %120 = load i32, i32* %48, align 4
  %121 = add i32 %120, 1
  store i32 %121, i32* %48, align 4
  %122 = zext i32 %120 to i64
  %123 = getelementptr inbounds i8, i8* %119, i64 %122
  store i8 %118, i8* %123, align 1
  %124 = shl i32 %76, %85
  %125 = and i32 %124, 16777215
  %126 = add nsw i32 %82, -8
  br label %127

127:                                              ; preds = %115, %53
  %128 = phi i32 [ %126, %115 ], [ %82, %53 ]
  %129 = phi i32 [ %125, %115 ], [ %76, %53 ]
  %130 = phi i32 [ %82, %115 ], [ %80, %53 ]
  %131 = shl i32 %129, %130
  store i32 %128, i32* %45, align 8
  store i32 %131, i32* %47, align 8
  store i32 %81, i32* %46, align 4
  %132 = add nsw i32 %61, %62
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds [0 x i8], [0 x i8]* @vp9_mv_joint_tree, i64 0, i64 %133
  %135 = load i8, i8* %134, align 1
  %136 = icmp eq i32 %59, 0
  br i1 %136, label %137, label %53

137:                                              ; preds = %127
  %138 = or i32 %23, 1
  %139 = icmp eq i32 %138, 3
  br i1 %139, label %140, label %143

140:                                              ; preds = %137
  %141 = sext i16 %12 to i32
  %142 = getelementptr inbounds %struct.nmv_context, %struct.nmv_context* %4, i64 0, i32 1, i64 0
  tail call fastcc void @encode_mv_component(%struct.vpx_writer* %1, i32 %141, %struct.nmv_component* %142, i32 %39)
  br label %143

143:                                              ; preds = %137, %140
  %144 = or i32 %23, 2
  %145 = icmp eq i32 %144, 3
  br i1 %145, label %146, label %149

146:                                              ; preds = %143
  %147 = sext i16 %17 to i32
  %148 = getelementptr inbounds %struct.nmv_context, %struct.nmv_context* %4, i64 0, i32 1, i64 1
  tail call fastcc void @encode_mv_component(%struct.vpx_writer* %1, i32 %147, %struct.nmv_component* %148, i32 %39)
  br label %149

149:                                              ; preds = %143, %146
  %150 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 0, i32 2
  %151 = load i32, i32* %150, align 8
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %170, label %153

153:                                              ; preds = %149
  %154 = load i16, i16* %8, align 2
  %155 = sext i16 %154 to i32
  %156 = icmp slt i32 %155, 0
  %157 = sub nsw i32 0, %155
  %158 = select i1 %156, i32 %157, i32 %155
  %159 = load i16, i16* %13, align 2
  %160 = sext i16 %159 to i32
  %161 = icmp slt i32 %160, 0
  %162 = sub nsw i32 0, %160
  %163 = select i1 %161, i32 %162, i32 %160
  %164 = icmp sgt i32 %158, %163
  %165 = select i1 %164, i32 %158, i32 %163
  %166 = lshr i32 %165, 3
  %167 = load i32, i32* %6, align 4
  %168 = icmp ugt i32 %166, %167
  %169 = select i1 %168, i32 %166, i32 %167
  store i32 %169, i32* %6, align 4
  br label %170

170:                                              ; preds = %149, %153
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @encode_mv_component(%struct.vpx_writer*, i32, %struct.nmv_component* nocapture readonly, i32) unnamed_addr #0 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #4
  store i32 -1431655766, i32* %5, align 4
  %7 = icmp slt i32 %1, 0
  %8 = sub nsw i32 0, %1
  %9 = select i1 %7, i32 %8, i32 %1
  %10 = add nsw i32 %9, -1
  %11 = call i32 @vp9_get_mv_class(i32 %10, i32* nonnull %5) #4
  %12 = load i32, i32* %5, align 4
  %13 = ashr i32 %12, 3
  %14 = lshr i32 %12, 1
  %15 = and i32 %14, 3
  %16 = and i32 %12, 1
  %17 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %2, i64 0, i32 0
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 2
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 0
  %25 = load i32, i32* %24, align 8
  %26 = add i32 %23, -1
  %27 = mul i32 %26, %19
  %28 = lshr i32 %27, 8
  %29 = add nuw nsw i32 %28, 1
  %30 = icmp sgt i32 %1, -1
  %31 = sub i32 %23, %29
  %32 = select i1 %30, i32 %29, i32 %31
  %33 = select i1 %30, i32 0, i32 %29
  %34 = add i32 %33, %25
  %35 = zext i32 %32 to i64
  %36 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %35
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = shl i32 %32, %38
  %40 = add nsw i32 %21, %38
  %41 = icmp sgt i32 %40, -1
  br i1 %41, label %42, label %89

42:                                               ; preds = %4
  %43 = sub i32 0, %21
  %44 = xor i32 %21, -1
  %45 = shl i32 %34, %44
  %46 = icmp slt i32 %45, 0
  br i1 %46, label %47, label %75

47:                                               ; preds = %42
  %48 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 3
  %49 = load i32, i32* %48, align 4
  %50 = add i32 %49, -1
  %51 = icmp sgt i32 %50, -1
  %52 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 4
  %53 = load i8*, i8** %52, align 8
  %54 = sext i32 %50 to i64
  %55 = getelementptr inbounds i8, i8* %53, i64 %54
  br i1 %51, label %56, label %71

56:                                               ; preds = %47, %63
  %57 = phi i8* [ %67, %63 ], [ %53, %47 ]
  %58 = phi i64 [ %70, %63 ], [ %54, %47 ]
  %59 = phi i8* [ %69, %63 ], [ %55, %47 ]
  %60 = load i8, i8* %59, align 1
  %61 = icmp eq i8 %60, -1
  %62 = getelementptr inbounds i8, i8* %57, i64 %58
  br i1 %61, label %63, label %71

63:                                               ; preds = %56
  store i8 0, i8* %62, align 1
  %64 = trunc i64 %58 to i32
  %65 = add i32 %64, -1
  %66 = icmp sgt i32 %65, -1
  %67 = load i8*, i8** %52, align 8
  %68 = sext i32 %65 to i64
  %69 = getelementptr inbounds i8, i8* %67, i64 %68
  %70 = add nsw i64 %58, -1
  br i1 %66, label %56, label %71

71:                                               ; preds = %63, %56, %47
  %72 = phi i8* [ %55, %47 ], [ %62, %56 ], [ %69, %63 ]
  %73 = load i8, i8* %72, align 1
  %74 = add i8 %73, 1
  store i8 %74, i8* %72, align 1
  br label %75

75:                                               ; preds = %71, %42
  %76 = add i32 %21, 24
  %77 = lshr i32 %34, %76
  %78 = trunc i32 %77 to i8
  %79 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 4
  %80 = load i8*, i8** %79, align 8
  %81 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 3
  %82 = load i32, i32* %81, align 4
  %83 = add i32 %82, 1
  store i32 %83, i32* %81, align 4
  %84 = zext i32 %82 to i64
  %85 = getelementptr inbounds i8, i8* %80, i64 %84
  store i8 %78, i8* %85, align 1
  %86 = shl i32 %34, %43
  %87 = and i32 %86, 16777215
  %88 = add nsw i32 %40, -8
  br label %89

89:                                               ; preds = %4, %75
  %90 = phi i32 [ %88, %75 ], [ %40, %4 ]
  %91 = phi i32 [ %87, %75 ], [ %34, %4 ]
  %92 = phi i32 [ %40, %75 ], [ %38, %4 ]
  %93 = shl i32 %91, %92
  store i32 %90, i32* %20, align 8
  store i32 %93, i32* %24, align 8
  store i32 %39, i32* %22, align 4
  %94 = sext i32 %11 to i64
  %95 = getelementptr inbounds [11 x %struct.vp9_token], [11 x %struct.vp9_token]* @mv_class_encodings, i64 0, i64 %94, i32 0
  %96 = load i32, i32* %95, align 8
  %97 = getelementptr inbounds [11 x %struct.vp9_token], [11 x %struct.vp9_token]* @mv_class_encodings, i64 0, i64 %94, i32 1
  %98 = load i32, i32* %97, align 4
  %99 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 3
  %100 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 4
  br label %101

101:                                              ; preds = %175, %89
  %102 = phi i32 [ %93, %89 ], [ %179, %175 ]
  %103 = phi i32 [ %39, %89 ], [ %129, %175 ]
  %104 = phi i32 [ %90, %89 ], [ %176, %175 ]
  %105 = phi i8 [ 0, %89 ], [ %183, %175 ]
  %106 = phi i32 [ %98, %89 ], [ %107, %175 ]
  %107 = add nsw i32 %106, -1
  %108 = lshr i32 %96, %107
  %109 = and i32 %108, 1
  %110 = sext i8 %105 to i32
  %111 = ashr i32 %110, 1
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %2, i64 0, i32 1, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = add i32 %103, -1
  %117 = mul i32 %116, %115
  %118 = lshr i32 %117, 8
  %119 = add nuw nsw i32 %118, 1
  %120 = icmp eq i32 %109, 0
  %121 = sub i32 %103, %119
  %122 = select i1 %120, i32 %119, i32 %121
  %123 = select i1 %120, i32 0, i32 %119
  %124 = add i32 %123, %102
  %125 = zext i32 %122 to i64
  %126 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %125
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i32
  %129 = shl i32 %122, %128
  %130 = add nsw i32 %104, %128
  %131 = icmp sgt i32 %130, -1
  br i1 %131, label %132, label %175

132:                                              ; preds = %101
  %133 = sub i32 0, %104
  %134 = xor i32 %104, -1
  %135 = shl i32 %124, %134
  %136 = icmp slt i32 %135, 0
  br i1 %136, label %137, label %163

137:                                              ; preds = %132
  %138 = load i32, i32* %99, align 4
  %139 = add i32 %138, -1
  %140 = icmp sgt i32 %139, -1
  %141 = load i8*, i8** %100, align 8
  %142 = sext i32 %139 to i64
  %143 = getelementptr inbounds i8, i8* %141, i64 %142
  br i1 %140, label %144, label %159

144:                                              ; preds = %137, %151
  %145 = phi i8* [ %155, %151 ], [ %141, %137 ]
  %146 = phi i64 [ %158, %151 ], [ %142, %137 ]
  %147 = phi i8* [ %157, %151 ], [ %143, %137 ]
  %148 = load i8, i8* %147, align 1
  %149 = icmp eq i8 %148, -1
  %150 = getelementptr inbounds i8, i8* %145, i64 %146
  br i1 %149, label %151, label %159

151:                                              ; preds = %144
  store i8 0, i8* %150, align 1
  %152 = trunc i64 %146 to i32
  %153 = add i32 %152, -1
  %154 = icmp sgt i32 %153, -1
  %155 = load i8*, i8** %100, align 8
  %156 = sext i32 %153 to i64
  %157 = getelementptr inbounds i8, i8* %155, i64 %156
  %158 = add nsw i64 %146, -1
  br i1 %154, label %144, label %159

159:                                              ; preds = %151, %144, %137
  %160 = phi i8* [ %143, %137 ], [ %150, %144 ], [ %157, %151 ]
  %161 = load i8, i8* %160, align 1
  %162 = add i8 %161, 1
  store i8 %162, i8* %160, align 1
  br label %163

163:                                              ; preds = %159, %132
  %164 = add i32 %104, 24
  %165 = lshr i32 %124, %164
  %166 = trunc i32 %165 to i8
  %167 = load i8*, i8** %100, align 8
  %168 = load i32, i32* %99, align 4
  %169 = add i32 %168, 1
  store i32 %169, i32* %99, align 4
  %170 = zext i32 %168 to i64
  %171 = getelementptr inbounds i8, i8* %167, i64 %170
  store i8 %166, i8* %171, align 1
  %172 = shl i32 %124, %133
  %173 = and i32 %172, 16777215
  %174 = add nsw i32 %130, -8
  br label %175

175:                                              ; preds = %163, %101
  %176 = phi i32 [ %174, %163 ], [ %130, %101 ]
  %177 = phi i32 [ %173, %163 ], [ %124, %101 ]
  %178 = phi i32 [ %130, %163 ], [ %128, %101 ]
  %179 = shl i32 %177, %178
  store i32 %176, i32* %20, align 8
  store i32 %179, i32* %24, align 8
  store i32 %129, i32* %22, align 4
  %180 = add nsw i32 %109, %110
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds [0 x i8], [0 x i8]* @vp9_mv_class_tree, i64 0, i64 %181
  %183 = load i8, i8* %182, align 1
  %184 = icmp eq i32 %107, 0
  br i1 %184, label %185, label %101

185:                                              ; preds = %175
  %186 = icmp eq i32 %11, 0
  br i1 %186, label %191, label %187

187:                                              ; preds = %185
  %188 = icmp sgt i32 %11, 0
  br i1 %188, label %189, label %336

189:                                              ; preds = %187
  %190 = zext i32 %11 to i64
  br label %259

191:                                              ; preds = %185
  %192 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %2, i64 0, i32 2, i64 0
  %193 = load i8, i8* %192, align 1
  %194 = zext i8 %193 to i32
  %195 = add i32 %129, -1
  %196 = mul i32 %195, %194
  %197 = lshr i32 %196, 8
  %198 = add nuw nsw i32 %197, 1
  %199 = icmp eq i32 %13, 0
  %200 = sub i32 %129, %198
  %201 = select i1 %199, i32 %198, i32 %200
  %202 = select i1 %199, i32 0, i32 %198
  %203 = add i32 %202, %179
  %204 = zext i32 %201 to i64
  %205 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %204
  %206 = load i8, i8* %205, align 1
  %207 = zext i8 %206 to i32
  %208 = shl i32 %201, %207
  %209 = add nsw i32 %176, %207
  %210 = icmp sgt i32 %209, -1
  br i1 %210, label %211, label %254

211:                                              ; preds = %191
  %212 = sub i32 0, %176
  %213 = xor i32 %176, -1
  %214 = shl i32 %203, %213
  %215 = icmp slt i32 %214, 0
  br i1 %215, label %216, label %242

216:                                              ; preds = %211
  %217 = load i32, i32* %99, align 4
  %218 = add i32 %217, -1
  %219 = icmp sgt i32 %218, -1
  %220 = load i8*, i8** %100, align 8
  %221 = sext i32 %218 to i64
  %222 = getelementptr inbounds i8, i8* %220, i64 %221
  br i1 %219, label %223, label %238

223:                                              ; preds = %216, %230
  %224 = phi i8* [ %234, %230 ], [ %220, %216 ]
  %225 = phi i64 [ %237, %230 ], [ %221, %216 ]
  %226 = phi i8* [ %236, %230 ], [ %222, %216 ]
  %227 = load i8, i8* %226, align 1
  %228 = icmp eq i8 %227, -1
  %229 = getelementptr inbounds i8, i8* %224, i64 %225
  br i1 %228, label %230, label %238

230:                                              ; preds = %223
  store i8 0, i8* %229, align 1
  %231 = trunc i64 %225 to i32
  %232 = add i32 %231, -1
  %233 = icmp sgt i32 %232, -1
  %234 = load i8*, i8** %100, align 8
  %235 = sext i32 %232 to i64
  %236 = getelementptr inbounds i8, i8* %234, i64 %235
  %237 = add nsw i64 %225, -1
  br i1 %233, label %223, label %238

238:                                              ; preds = %230, %223, %216
  %239 = phi i8* [ %222, %216 ], [ %229, %223 ], [ %236, %230 ]
  %240 = load i8, i8* %239, align 1
  %241 = add i8 %240, 1
  store i8 %241, i8* %239, align 1
  br label %242

242:                                              ; preds = %238, %211
  %243 = add i32 %176, 24
  %244 = lshr i32 %203, %243
  %245 = trunc i32 %244 to i8
  %246 = load i8*, i8** %100, align 8
  %247 = load i32, i32* %99, align 4
  %248 = add i32 %247, 1
  store i32 %248, i32* %99, align 4
  %249 = zext i32 %247 to i64
  %250 = getelementptr inbounds i8, i8* %246, i64 %249
  store i8 %245, i8* %250, align 1
  %251 = shl i32 %203, %212
  %252 = and i32 %251, 16777215
  %253 = add nsw i32 %209, -8
  br label %254

254:                                              ; preds = %191, %242
  %255 = phi i32 [ %253, %242 ], [ %209, %191 ]
  %256 = phi i32 [ %252, %242 ], [ %203, %191 ]
  %257 = phi i32 [ %209, %242 ], [ %207, %191 ]
  %258 = shl i32 %256, %257
  store i32 %255, i32* %20, align 8
  store i32 %258, i32* %24, align 8
  store i32 %208, i32* %22, align 4
  br label %336

259:                                              ; preds = %329, %189
  %260 = phi i32 [ %179, %189 ], [ %333, %329 ]
  %261 = phi i32 [ %129, %189 ], [ %283, %329 ]
  %262 = phi i32 [ %176, %189 ], [ %330, %329 ]
  %263 = phi i64 [ 0, %189 ], [ %334, %329 ]
  %264 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %2, i64 0, i32 3, i64 %263
  %265 = load i8, i8* %264, align 1
  %266 = zext i8 %265 to i32
  %267 = add i32 %261, -1
  %268 = mul i32 %267, %266
  %269 = lshr i32 %268, 8
  %270 = add nuw nsw i32 %269, 1
  %271 = trunc i64 %263 to i32
  %272 = shl i32 1, %271
  %273 = and i32 %272, %13
  %274 = icmp eq i32 %273, 0
  %275 = sub i32 %261, %270
  %276 = select i1 %274, i32 %270, i32 %275
  %277 = select i1 %274, i32 0, i32 %270
  %278 = add i32 %277, %260
  %279 = zext i32 %276 to i64
  %280 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %279
  %281 = load i8, i8* %280, align 1
  %282 = zext i8 %281 to i32
  %283 = shl i32 %276, %282
  %284 = add nsw i32 %262, %282
  %285 = icmp sgt i32 %284, -1
  br i1 %285, label %286, label %329

286:                                              ; preds = %259
  %287 = sub i32 0, %262
  %288 = xor i32 %262, -1
  %289 = shl i32 %278, %288
  %290 = icmp slt i32 %289, 0
  br i1 %290, label %291, label %317

291:                                              ; preds = %286
  %292 = load i32, i32* %99, align 4
  %293 = add i32 %292, -1
  %294 = icmp sgt i32 %293, -1
  %295 = load i8*, i8** %100, align 8
  %296 = sext i32 %293 to i64
  %297 = getelementptr inbounds i8, i8* %295, i64 %296
  br i1 %294, label %298, label %313

298:                                              ; preds = %291, %305
  %299 = phi i8* [ %309, %305 ], [ %295, %291 ]
  %300 = phi i64 [ %312, %305 ], [ %296, %291 ]
  %301 = phi i8* [ %311, %305 ], [ %297, %291 ]
  %302 = load i8, i8* %301, align 1
  %303 = icmp eq i8 %302, -1
  %304 = getelementptr inbounds i8, i8* %299, i64 %300
  br i1 %303, label %305, label %313

305:                                              ; preds = %298
  store i8 0, i8* %304, align 1
  %306 = trunc i64 %300 to i32
  %307 = add i32 %306, -1
  %308 = icmp sgt i32 %307, -1
  %309 = load i8*, i8** %100, align 8
  %310 = sext i32 %307 to i64
  %311 = getelementptr inbounds i8, i8* %309, i64 %310
  %312 = add nsw i64 %300, -1
  br i1 %308, label %298, label %313

313:                                              ; preds = %305, %298, %291
  %314 = phi i8* [ %297, %291 ], [ %304, %298 ], [ %311, %305 ]
  %315 = load i8, i8* %314, align 1
  %316 = add i8 %315, 1
  store i8 %316, i8* %314, align 1
  br label %317

317:                                              ; preds = %313, %286
  %318 = add i32 %262, 24
  %319 = lshr i32 %278, %318
  %320 = trunc i32 %319 to i8
  %321 = load i8*, i8** %100, align 8
  %322 = load i32, i32* %99, align 4
  %323 = add i32 %322, 1
  store i32 %323, i32* %99, align 4
  %324 = zext i32 %322 to i64
  %325 = getelementptr inbounds i8, i8* %321, i64 %324
  store i8 %320, i8* %325, align 1
  %326 = shl i32 %278, %287
  %327 = and i32 %326, 16777215
  %328 = add nsw i32 %284, -8
  br label %329

329:                                              ; preds = %259, %317
  %330 = phi i32 [ %328, %317 ], [ %284, %259 ]
  %331 = phi i32 [ %327, %317 ], [ %278, %259 ]
  %332 = phi i32 [ %284, %317 ], [ %282, %259 ]
  %333 = shl i32 %331, %332
  store i32 %330, i32* %20, align 8
  store i32 %333, i32* %24, align 8
  store i32 %283, i32* %22, align 4
  %334 = add nuw nsw i64 %263, 1
  %335 = icmp eq i64 %334, %190
  br i1 %335, label %336, label %259

336:                                              ; preds = %329, %187, %254
  %337 = phi i32 [ %179, %187 ], [ %258, %254 ], [ %333, %329 ]
  %338 = phi i32 [ %129, %187 ], [ %208, %254 ], [ %283, %329 ]
  %339 = phi i32 [ %176, %187 ], [ %255, %254 ], [ %330, %329 ]
  %340 = sext i32 %13 to i64
  %341 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %2, i64 0, i32 4, i64 %340, i64 0
  %342 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %2, i64 0, i32 5, i64 0
  %343 = select i1 %186, i8* %341, i8* %342
  %344 = zext i32 %15 to i64
  %345 = getelementptr inbounds [4 x %struct.vp9_token], [4 x %struct.vp9_token]* @mv_fp_encodings, i64 0, i64 %344, i32 0
  %346 = load i32, i32* %345, align 8
  %347 = getelementptr inbounds [4 x %struct.vp9_token], [4 x %struct.vp9_token]* @mv_fp_encodings, i64 0, i64 %344, i32 1
  %348 = load i32, i32* %347, align 4
  br label %349

349:                                              ; preds = %423, %336
  %350 = phi i32 [ %337, %336 ], [ %427, %423 ]
  %351 = phi i32 [ %338, %336 ], [ %377, %423 ]
  %352 = phi i32 [ %339, %336 ], [ %424, %423 ]
  %353 = phi i8 [ 0, %336 ], [ %431, %423 ]
  %354 = phi i32 [ %348, %336 ], [ %355, %423 ]
  %355 = add nsw i32 %354, -1
  %356 = lshr i32 %346, %355
  %357 = and i32 %356, 1
  %358 = sext i8 %353 to i32
  %359 = ashr i32 %358, 1
  %360 = sext i32 %359 to i64
  %361 = getelementptr inbounds i8, i8* %343, i64 %360
  %362 = load i8, i8* %361, align 1
  %363 = zext i8 %362 to i32
  %364 = add i32 %351, -1
  %365 = mul i32 %364, %363
  %366 = lshr i32 %365, 8
  %367 = add nuw nsw i32 %366, 1
  %368 = icmp eq i32 %357, 0
  %369 = sub i32 %351, %367
  %370 = select i1 %368, i32 %367, i32 %369
  %371 = select i1 %368, i32 0, i32 %367
  %372 = add i32 %371, %350
  %373 = zext i32 %370 to i64
  %374 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %373
  %375 = load i8, i8* %374, align 1
  %376 = zext i8 %375 to i32
  %377 = shl i32 %370, %376
  %378 = add nsw i32 %352, %376
  %379 = icmp sgt i32 %378, -1
  br i1 %379, label %380, label %423

380:                                              ; preds = %349
  %381 = sub i32 0, %352
  %382 = xor i32 %352, -1
  %383 = shl i32 %372, %382
  %384 = icmp slt i32 %383, 0
  br i1 %384, label %385, label %411

385:                                              ; preds = %380
  %386 = load i32, i32* %99, align 4
  %387 = add i32 %386, -1
  %388 = icmp sgt i32 %387, -1
  %389 = load i8*, i8** %100, align 8
  %390 = sext i32 %387 to i64
  %391 = getelementptr inbounds i8, i8* %389, i64 %390
  br i1 %388, label %392, label %407

392:                                              ; preds = %385, %399
  %393 = phi i8* [ %403, %399 ], [ %389, %385 ]
  %394 = phi i64 [ %406, %399 ], [ %390, %385 ]
  %395 = phi i8* [ %405, %399 ], [ %391, %385 ]
  %396 = load i8, i8* %395, align 1
  %397 = icmp eq i8 %396, -1
  %398 = getelementptr inbounds i8, i8* %393, i64 %394
  br i1 %397, label %399, label %407

399:                                              ; preds = %392
  store i8 0, i8* %398, align 1
  %400 = trunc i64 %394 to i32
  %401 = add i32 %400, -1
  %402 = icmp sgt i32 %401, -1
  %403 = load i8*, i8** %100, align 8
  %404 = sext i32 %401 to i64
  %405 = getelementptr inbounds i8, i8* %403, i64 %404
  %406 = add nsw i64 %394, -1
  br i1 %402, label %392, label %407

407:                                              ; preds = %399, %392, %385
  %408 = phi i8* [ %391, %385 ], [ %398, %392 ], [ %405, %399 ]
  %409 = load i8, i8* %408, align 1
  %410 = add i8 %409, 1
  store i8 %410, i8* %408, align 1
  br label %411

411:                                              ; preds = %407, %380
  %412 = add i32 %352, 24
  %413 = lshr i32 %372, %412
  %414 = trunc i32 %413 to i8
  %415 = load i8*, i8** %100, align 8
  %416 = load i32, i32* %99, align 4
  %417 = add i32 %416, 1
  store i32 %417, i32* %99, align 4
  %418 = zext i32 %416 to i64
  %419 = getelementptr inbounds i8, i8* %415, i64 %418
  store i8 %414, i8* %419, align 1
  %420 = shl i32 %372, %381
  %421 = and i32 %420, 16777215
  %422 = add nsw i32 %378, -8
  br label %423

423:                                              ; preds = %411, %349
  %424 = phi i32 [ %422, %411 ], [ %378, %349 ]
  %425 = phi i32 [ %421, %411 ], [ %372, %349 ]
  %426 = phi i32 [ %378, %411 ], [ %376, %349 ]
  %427 = shl i32 %425, %426
  store i32 %424, i32* %20, align 8
  store i32 %427, i32* %24, align 8
  store i32 %377, i32* %22, align 4
  %428 = add nsw i32 %357, %358
  %429 = sext i32 %428 to i64
  %430 = getelementptr inbounds [0 x i8], [0 x i8]* @vp9_mv_fp_tree, i64 0, i64 %429
  %431 = load i8, i8* %430, align 1
  %432 = icmp eq i32 %355, 0
  br i1 %432, label %433, label %349

433:                                              ; preds = %423
  %434 = icmp eq i32 %3, 0
  br i1 %434, label %505, label %435

435:                                              ; preds = %433
  %436 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %2, i64 0, i32 6
  %437 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %2, i64 0, i32 7
  %438 = select i1 %186, i8* %436, i8* %437
  %439 = load i8, i8* %438, align 1
  %440 = zext i8 %439 to i32
  %441 = add i32 %377, -1
  %442 = mul i32 %441, %440
  %443 = lshr i32 %442, 8
  %444 = add nuw nsw i32 %443, 1
  %445 = icmp eq i32 %16, 0
  %446 = sub i32 %377, %444
  %447 = select i1 %445, i32 %444, i32 %446
  %448 = select i1 %445, i32 0, i32 %444
  %449 = add i32 %448, %427
  %450 = zext i32 %447 to i64
  %451 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %450
  %452 = load i8, i8* %451, align 1
  %453 = zext i8 %452 to i32
  %454 = shl i32 %447, %453
  %455 = add nsw i32 %424, %453
  %456 = icmp sgt i32 %455, -1
  br i1 %456, label %457, label %500

457:                                              ; preds = %435
  %458 = sub i32 0, %424
  %459 = xor i32 %424, -1
  %460 = shl i32 %449, %459
  %461 = icmp slt i32 %460, 0
  br i1 %461, label %462, label %488

462:                                              ; preds = %457
  %463 = load i32, i32* %99, align 4
  %464 = add i32 %463, -1
  %465 = icmp sgt i32 %464, -1
  %466 = load i8*, i8** %100, align 8
  %467 = sext i32 %464 to i64
  %468 = getelementptr inbounds i8, i8* %466, i64 %467
  br i1 %465, label %469, label %484

469:                                              ; preds = %462, %476
  %470 = phi i8* [ %480, %476 ], [ %466, %462 ]
  %471 = phi i64 [ %483, %476 ], [ %467, %462 ]
  %472 = phi i8* [ %482, %476 ], [ %468, %462 ]
  %473 = load i8, i8* %472, align 1
  %474 = icmp eq i8 %473, -1
  %475 = getelementptr inbounds i8, i8* %470, i64 %471
  br i1 %474, label %476, label %484

476:                                              ; preds = %469
  store i8 0, i8* %475, align 1
  %477 = trunc i64 %471 to i32
  %478 = add i32 %477, -1
  %479 = icmp sgt i32 %478, -1
  %480 = load i8*, i8** %100, align 8
  %481 = sext i32 %478 to i64
  %482 = getelementptr inbounds i8, i8* %480, i64 %481
  %483 = add nsw i64 %471, -1
  br i1 %479, label %469, label %484

484:                                              ; preds = %476, %469, %462
  %485 = phi i8* [ %468, %462 ], [ %475, %469 ], [ %482, %476 ]
  %486 = load i8, i8* %485, align 1
  %487 = add i8 %486, 1
  store i8 %487, i8* %485, align 1
  br label %488

488:                                              ; preds = %484, %457
  %489 = add i32 %424, 24
  %490 = lshr i32 %449, %489
  %491 = trunc i32 %490 to i8
  %492 = load i8*, i8** %100, align 8
  %493 = load i32, i32* %99, align 4
  %494 = add i32 %493, 1
  store i32 %494, i32* %99, align 4
  %495 = zext i32 %493 to i64
  %496 = getelementptr inbounds i8, i8* %492, i64 %495
  store i8 %491, i8* %496, align 1
  %497 = shl i32 %449, %458
  %498 = and i32 %497, 16777215
  %499 = add nsw i32 %455, -8
  br label %500

500:                                              ; preds = %435, %488
  %501 = phi i32 [ %499, %488 ], [ %455, %435 ]
  %502 = phi i32 [ %498, %488 ], [ %449, %435 ]
  %503 = phi i32 [ %455, %488 ], [ %453, %435 ]
  %504 = shl i32 %502, %503
  store i32 %501, i32* %20, align 8
  store i32 %504, i32* %24, align 8
  store i32 %454, i32* %22, align 4
  br label %505

505:                                              ; preds = %433, %500
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_build_nmv_cost_table(i32*, i32** nocapture readonly, %struct.nmv_context*, i32) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.nmv_context, %struct.nmv_context* %2, i64 0, i32 0, i64 0
  tail call void @vp9_cost_tokens(i32* %0, i8* %5, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp9_mv_joint_tree, i64 0, i64 0)) #4
  %6 = load i32*, i32** %1, align 8
  %7 = getelementptr inbounds %struct.nmv_context, %struct.nmv_context* %2, i64 0, i32 1, i64 0
  tail call fastcc void @build_nmv_component_cost_table(i32* %6, %struct.nmv_component* %7, i32 %3)
  %8 = getelementptr inbounds i32*, i32** %1, i64 1
  %9 = load i32*, i32** %8, align 8
  %10 = getelementptr inbounds %struct.nmv_context, %struct.nmv_context* %2, i64 0, i32 1, i64 1
  tail call fastcc void @build_nmv_component_cost_table(i32* %9, %struct.nmv_component* %10, i32 %3)
  ret void
}

declare void @vp9_cost_tokens(i32*, i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @build_nmv_component_cost_table(i32* nocapture, %struct.nmv_component*, i32) unnamed_addr #0 {
  %4 = alloca [11 x i32], align 16
  %5 = alloca [2 x i32], align 4
  %6 = alloca [10 x [2 x i32]], align 16
  %7 = alloca [2 x [4 x i32]], align 16
  %8 = alloca [4 x i32], align 16
  %9 = alloca [2 x i32], align 4
  %10 = bitcast [11 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 44, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 44, i1 false)
  %11 = bitcast [2 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #4
  %12 = getelementptr inbounds [2 x i32], [2 x i32]* %5, i64 0, i64 0
  store i32 -1431655766, i32* %12, align 4
  %13 = getelementptr inbounds [2 x i32], [2 x i32]* %5, i64 0, i64 1
  store i32 -1431655766, i32* %13, align 4
  %14 = bitcast [10 x [2 x i32]]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 80, i1 false)
  %15 = bitcast [2 x [4 x i32]]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %15) #4
  %16 = getelementptr inbounds [2 x [4 x i32]], [2 x [4 x i32]]* %7, i64 0, i64 0, i64 0
  %17 = getelementptr inbounds [2 x [4 x i32]], [2 x [4 x i32]]* %7, i64 0, i64 1, i64 0
  %18 = bitcast [4 x i32]* %8 to i8*
  %19 = bitcast [2 x [4 x i32]]* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %19, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %18) #4
  %20 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 0
  %21 = bitcast [2 x i32]* %9 to i8*
  %22 = bitcast [4 x i32]* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %22, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #4
  %23 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 0
  store i32 -1431655766, i32* %23, align 4
  %24 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 1
  store i32 -1431655766, i32* %24, align 4
  %25 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %1, i64 0, i32 0
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i64
  %28 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %27
  %29 = load i16, i16* %28, align 2
  %30 = sub nuw nsw i64 256, %27
  %31 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %30
  %32 = load i16, i16* %31, align 2
  %33 = getelementptr inbounds [11 x i32], [11 x i32]* %4, i64 0, i64 0
  %34 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %1, i64 0, i32 1, i64 0
  call void @vp9_cost_tokens(i32* nonnull %33, i8* %34, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp9_mv_class_tree, i64 0, i64 0)) #4
  %35 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %1, i64 0, i32 2, i64 0
  call void @vp9_cost_tokens(i32* nonnull %12, i8* %35, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp9_mv_class0_tree, i64 0, i64 0)) #4
  %36 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %1, i64 0, i32 3, i64 0
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i64
  %39 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %38
  %40 = load i16, i16* %39, align 2
  %41 = zext i16 %40 to i32
  %42 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %6, i64 0, i64 0, i64 0
  store i32 %41, i32* %42, align 16
  %43 = sub nuw nsw i64 256, %38
  %44 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %43
  %45 = load i16, i16* %44, align 2
  %46 = zext i16 %45 to i32
  %47 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %6, i64 0, i64 0, i64 1
  store i32 %46, i32* %47, align 4
  %48 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %1, i64 0, i32 3, i64 1
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i64
  %51 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %50
  %52 = load i16, i16* %51, align 2
  %53 = zext i16 %52 to i32
  %54 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %6, i64 0, i64 1, i64 0
  store i32 %53, i32* %54, align 8
  %55 = sub nuw nsw i64 256, %50
  %56 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %55
  %57 = load i16, i16* %56, align 2
  %58 = zext i16 %57 to i32
  %59 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %6, i64 0, i64 1, i64 1
  store i32 %58, i32* %59, align 4
  %60 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %1, i64 0, i32 3, i64 2
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i64
  %63 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %62
  %64 = load i16, i16* %63, align 2
  %65 = zext i16 %64 to i32
  %66 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %6, i64 0, i64 2, i64 0
  store i32 %65, i32* %66, align 16
  %67 = sub nuw nsw i64 256, %62
  %68 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %67
  %69 = load i16, i16* %68, align 2
  %70 = zext i16 %69 to i32
  %71 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %6, i64 0, i64 2, i64 1
  store i32 %70, i32* %71, align 4
  %72 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %1, i64 0, i32 3, i64 3
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i64
  %75 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %74
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %6, i64 0, i64 3, i64 0
  store i32 %77, i32* %78, align 8
  %79 = sub nuw nsw i64 256, %74
  %80 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %79
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %6, i64 0, i64 3, i64 1
  store i32 %82, i32* %83, align 4
  %84 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %1, i64 0, i32 3, i64 4
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i64
  %87 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %86
  %88 = load i16, i16* %87, align 2
  %89 = zext i16 %88 to i32
  %90 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %6, i64 0, i64 4, i64 0
  store i32 %89, i32* %90, align 16
  %91 = sub nuw nsw i64 256, %86
  %92 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %91
  %93 = load i16, i16* %92, align 2
  %94 = zext i16 %93 to i32
  %95 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %6, i64 0, i64 4, i64 1
  store i32 %94, i32* %95, align 4
  %96 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %1, i64 0, i32 3, i64 5
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i64
  %99 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %98
  %100 = load i16, i16* %99, align 2
  %101 = zext i16 %100 to i32
  %102 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %6, i64 0, i64 5, i64 0
  store i32 %101, i32* %102, align 8
  %103 = sub nuw nsw i64 256, %98
  %104 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %103
  %105 = load i16, i16* %104, align 2
  %106 = zext i16 %105 to i32
  %107 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %6, i64 0, i64 5, i64 1
  store i32 %106, i32* %107, align 4
  %108 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %1, i64 0, i32 3, i64 6
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i64
  %111 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %110
  %112 = load i16, i16* %111, align 2
  %113 = zext i16 %112 to i32
  %114 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %6, i64 0, i64 6, i64 0
  store i32 %113, i32* %114, align 16
  %115 = sub nuw nsw i64 256, %110
  %116 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %115
  %117 = load i16, i16* %116, align 2
  %118 = zext i16 %117 to i32
  %119 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %6, i64 0, i64 6, i64 1
  store i32 %118, i32* %119, align 4
  %120 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %1, i64 0, i32 3, i64 7
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i64
  %123 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %122
  %124 = load i16, i16* %123, align 2
  %125 = zext i16 %124 to i32
  %126 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %6, i64 0, i64 7, i64 0
  store i32 %125, i32* %126, align 8
  %127 = sub nuw nsw i64 256, %122
  %128 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %127
  %129 = load i16, i16* %128, align 2
  %130 = zext i16 %129 to i32
  %131 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %6, i64 0, i64 7, i64 1
  store i32 %130, i32* %131, align 4
  %132 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %1, i64 0, i32 3, i64 8
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i64
  %135 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %134
  %136 = load i16, i16* %135, align 2
  %137 = zext i16 %136 to i32
  %138 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %6, i64 0, i64 8, i64 0
  store i32 %137, i32* %138, align 16
  %139 = sub nuw nsw i64 256, %134
  %140 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %139
  %141 = load i16, i16* %140, align 2
  %142 = zext i16 %141 to i32
  %143 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %6, i64 0, i64 8, i64 1
  store i32 %142, i32* %143, align 4
  %144 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %1, i64 0, i32 3, i64 9
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i64
  %147 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %146
  %148 = load i16, i16* %147, align 2
  %149 = zext i16 %148 to i32
  %150 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %6, i64 0, i64 9, i64 0
  store i32 %149, i32* %150, align 8
  %151 = sub nuw nsw i64 256, %146
  %152 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %151
  %153 = load i16, i16* %152, align 2
  %154 = zext i16 %153 to i32
  %155 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %6, i64 0, i64 9, i64 1
  store i32 %154, i32* %155, align 4
  %156 = zext i16 %29 to i32
  %157 = zext i16 %32 to i32
  %158 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %1, i64 0, i32 4, i64 0, i64 0
  call void @vp9_cost_tokens(i32* nonnull %16, i8* %158, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp9_mv_fp_tree, i64 0, i64 0)) #4
  %159 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %1, i64 0, i32 4, i64 1, i64 0
  call void @vp9_cost_tokens(i32* %17, i8* %159, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp9_mv_fp_tree, i64 0, i64 0)) #4
  %160 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %1, i64 0, i32 5, i64 0
  call void @vp9_cost_tokens(i32* nonnull %20, i8* %160, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp9_mv_fp_tree, i64 0, i64 0)) #4
  %161 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %1, i64 0, i32 6
  %162 = load i8, i8* %161, align 1
  %163 = zext i8 %162 to i64
  %164 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %163
  %165 = load i16, i16* %164, align 2
  %166 = zext i16 %165 to i32
  store i32 %166, i32* %23, align 4
  %167 = sub nuw nsw i64 256, %163
  %168 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %167
  %169 = load i16, i16* %168, align 2
  %170 = zext i16 %169 to i32
  store i32 %170, i32* %24, align 4
  %171 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %1, i64 0, i32 7
  %172 = load i8, i8* %171, align 1
  %173 = zext i8 %172 to i64
  %174 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %173
  %175 = load i16, i16* %174, align 2
  %176 = sub nuw nsw i64 256, %173
  %177 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %176
  %178 = load i16, i16* %177, align 2
  store i32 0, i32* %0, align 4
  %179 = load i32, i32* %33, align 16
  %180 = icmp eq i32 %2, 0
  br label %184

181:                                              ; preds = %202
  %182 = zext i16 %175 to i32
  %183 = zext i16 %178 to i32
  br label %210

184:                                              ; preds = %202, %3
  %185 = phi i64 [ 0, %3 ], [ %186, %202 ]
  %186 = add nuw nsw i64 %185, 1
  %187 = lshr i64 %185, 3
  %188 = lshr i64 %185, 1
  %189 = and i64 %188, 3
  %190 = and i64 %187, 536870911
  %191 = getelementptr inbounds [2 x i32], [2 x i32]* %5, i64 0, i64 %190
  %192 = load i32, i32* %191, align 4
  %193 = add nsw i32 %192, %179
  %194 = getelementptr inbounds [2 x [4 x i32]], [2 x [4 x i32]]* %7, i64 0, i64 %190, i64 %189
  %195 = load i32, i32* %194, align 4
  %196 = add nsw i32 %193, %195
  br i1 %180, label %202, label %197

197:                                              ; preds = %184
  %198 = and i64 %185, 1
  %199 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 %198
  %200 = load i32, i32* %199, align 4
  %201 = add nsw i32 %200, %196
  br label %202

202:                                              ; preds = %184, %197
  %203 = phi i32 [ %201, %197 ], [ %196, %184 ]
  %204 = add nsw i32 %203, %156
  %205 = getelementptr inbounds i32, i32* %0, i64 %186
  store i32 %204, i32* %205, align 4
  %206 = add nsw i32 %203, %157
  %207 = xor i64 %185, -1
  %208 = getelementptr inbounds i32, i32* %0, i64 %207
  store i32 %206, i32* %208, align 4
  %209 = icmp eq i64 %186, 16
  br i1 %209, label %181, label %184

210:                                              ; preds = %181, %336
  %211 = phi i64 [ 0, %181 ], [ %339, %336 ]
  %212 = phi i64 [ 1, %181 ], [ %337, %336 ]
  %213 = add i64 %211, 1
  %214 = trunc i64 %212 to i32
  %215 = shl i32 1, %214
  %216 = getelementptr inbounds [11 x i32], [11 x i32]* %4, i64 0, i64 %212
  %217 = load i32, i32* %216, align 4
  %218 = shl i32 8, %214
  %219 = sext i32 %215 to i64
  %220 = and i64 %213, 3
  %221 = icmp ult i64 %211, 3
  %222 = sub i64 %213, %220
  %223 = icmp eq i64 %220, 0
  br label %224

224:                                              ; preds = %210, %333
  %225 = phi i64 [ 0, %210 ], [ %334, %333 ]
  %226 = trunc i64 %225 to i32
  br i1 %221, label %227, label %251

227:                                              ; preds = %251, %224
  %228 = phi i32 [ undef, %224 ], [ %285, %251 ]
  %229 = phi i64 [ 0, %224 ], [ %286, %251 ]
  %230 = phi i32 [ %217, %224 ], [ %285, %251 ]
  br i1 %223, label %245, label %231

231:                                              ; preds = %227, %231
  %232 = phi i64 [ %242, %231 ], [ %229, %227 ]
  %233 = phi i32 [ %241, %231 ], [ %230, %227 ]
  %234 = phi i64 [ %243, %231 ], [ %220, %227 ]
  %235 = trunc i64 %232 to i32
  %236 = lshr i32 %226, %235
  %237 = and i32 %236, 1
  %238 = zext i32 %237 to i64
  %239 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %6, i64 0, i64 %232, i64 %238
  %240 = load i32, i32* %239, align 4
  %241 = add nsw i32 %240, %233
  %242 = add nuw nsw i64 %232, 1
  %243 = add i64 %234, -1
  %244 = icmp eq i64 %243, 0
  br i1 %244, label %245, label %231, !llvm.loop !2

245:                                              ; preds = %231, %227
  %246 = phi i32 [ %228, %227 ], [ %241, %231 ]
  %247 = trunc i64 %225 to i32
  %248 = shl i32 %247, 3
  %249 = add nsw i32 %248, %218
  %250 = sext i32 %249 to i64
  br label %289

251:                                              ; preds = %224, %251
  %252 = phi i64 [ %286, %251 ], [ 0, %224 ]
  %253 = phi i32 [ %285, %251 ], [ %217, %224 ]
  %254 = phi i64 [ %287, %251 ], [ %222, %224 ]
  %255 = trunc i64 %252 to i32
  %256 = lshr i32 %226, %255
  %257 = and i32 %256, 1
  %258 = zext i32 %257 to i64
  %259 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %6, i64 0, i64 %252, i64 %258
  %260 = load i32, i32* %259, align 4
  %261 = add nsw i32 %260, %253
  %262 = or i64 %252, 1
  %263 = trunc i64 %262 to i32
  %264 = lshr i32 %226, %263
  %265 = and i32 %264, 1
  %266 = zext i32 %265 to i64
  %267 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %6, i64 0, i64 %262, i64 %266
  %268 = load i32, i32* %267, align 4
  %269 = add nsw i32 %268, %261
  %270 = or i64 %252, 2
  %271 = trunc i64 %270 to i32
  %272 = lshr i32 %226, %271
  %273 = and i32 %272, 1
  %274 = zext i32 %273 to i64
  %275 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %6, i64 0, i64 %270, i64 %274
  %276 = load i32, i32* %275, align 4
  %277 = add nsw i32 %276, %269
  %278 = or i64 %252, 3
  %279 = trunc i64 %278 to i32
  %280 = lshr i32 %226, %279
  %281 = and i32 %280, 1
  %282 = zext i32 %281 to i64
  %283 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %6, i64 0, i64 %278, i64 %282
  %284 = load i32, i32* %283, align 4
  %285 = add nsw i32 %284, %277
  %286 = add nuw nsw i64 %252, 4
  %287 = add i64 %254, -4
  %288 = icmp eq i64 %287, 0
  br i1 %288, label %227, label %251

289:                                              ; preds = %325, %245
  %290 = phi i64 [ 0, %245 ], [ %331, %325 ]
  %291 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 %290
  %292 = load i32, i32* %291, align 4
  %293 = add nsw i32 %292, %246
  %294 = shl nuw nsw i64 %290, 1
  %295 = add nsw i64 %294, %250
  %296 = add nsw i64 %295, 1
  br i1 %180, label %313, label %297

297:                                              ; preds = %289
  %298 = add nsw i32 %293, %182
  %299 = add nsw i32 %298, %156
  %300 = getelementptr inbounds i32, i32* %0, i64 %296
  store i32 %299, i32* %300, align 4
  %301 = add nsw i32 %298, %157
  %302 = shl i64 %295, 32
  %303 = ashr exact i64 %302, 32
  %304 = xor i64 %303, -1
  %305 = getelementptr inbounds i32, i32* %0, i64 %304
  store i32 %301, i32* %305, align 4
  %306 = add nsw i64 %295, 2
  %307 = icmp sgt i64 %306, 16383
  br i1 %307, label %333, label %308

308:                                              ; preds = %297
  %309 = add nsw i32 %293, %183
  %310 = add nsw i32 %309, %156
  %311 = getelementptr inbounds i32, i32* %0, i64 %306
  store i32 %310, i32* %311, align 4
  %312 = add nsw i32 %309, %157
  br label %325

313:                                              ; preds = %289
  %314 = add nsw i32 %293, %156
  %315 = getelementptr inbounds i32, i32* %0, i64 %296
  store i32 %314, i32* %315, align 4
  %316 = add nsw i32 %293, %157
  %317 = shl i64 %295, 32
  %318 = ashr exact i64 %317, 32
  %319 = xor i64 %318, -1
  %320 = getelementptr inbounds i32, i32* %0, i64 %319
  store i32 %316, i32* %320, align 4
  %321 = add nsw i64 %295, 2
  %322 = icmp sgt i64 %321, 16383
  br i1 %322, label %333, label %323

323:                                              ; preds = %313
  %324 = getelementptr inbounds i32, i32* %0, i64 %321
  store i32 %314, i32* %324, align 4
  br label %325

325:                                              ; preds = %323, %308
  %326 = phi i32 [ %316, %323 ], [ %312, %308 ]
  %327 = shl i64 %295, 32
  %328 = sub i64 -8589934592, %327
  %329 = ashr exact i64 %328, 32
  %330 = getelementptr inbounds i32, i32* %0, i64 %329
  store i32 %326, i32* %330, align 4
  %331 = add nuw nsw i64 %290, 1
  %332 = icmp eq i64 %331, 4
  br i1 %332, label %333, label %289

333:                                              ; preds = %325, %313, %297
  %334 = add nuw nsw i64 %225, 1
  %335 = icmp slt i64 %334, %219
  br i1 %335, label %224, label %336

336:                                              ; preds = %333
  %337 = add nuw nsw i64 %212, 1
  %338 = icmp eq i64 %337, 11
  %339 = add i64 %211, 1
  br i1 %338, label %340, label %210

340:                                              ; preds = %336
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %15) #4
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 44, i8* nonnull %10) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_update_mv_count(%struct.ThreadData* nocapture readonly) local_unnamed_addr #0 {
  %2 = alloca %struct.mv, align 2
  %3 = alloca %struct.mv, align 2
  %4 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %0, i64 0, i32 0, i32 1, i32 6
  %5 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %4, align 8
  %6 = load %struct.MODE_INFO*, %struct.MODE_INFO** %5, align 8
  %7 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %0, i64 0, i32 0, i32 2
  %8 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %7, align 16
  %9 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %6, i64 0, i32 0
  %10 = load i8, i8* %9, align 4
  %11 = icmp ult i8 %10, 3
  br i1 %11, label %12, label %67

12:                                               ; preds = %1
  %13 = zext i8 %10 to i64
  %14 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_wide_lookup, i64 0, i64 %13
  %15 = load i8, i8* %14, align 1
  %16 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_high_lookup, i64 0, i64 %13
  %17 = load i8, i8* %16, align 1
  %18 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %0, i64 0, i32 2
  %19 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %6, i64 0, i32 8, i64 1
  %20 = bitcast %struct.mv* %3 to i8*
  %21 = getelementptr inbounds %struct.mv, %struct.mv* %3, i64 0, i32 0
  %22 = getelementptr inbounds %struct.mv, %struct.mv* %3, i64 0, i32 1
  %23 = zext i8 %15 to i64
  %24 = zext i8 %17 to i64
  br label %25

25:                                               ; preds = %12, %64
  %26 = phi i64 [ 0, %12 ], [ %65, %64 ]
  %27 = shl nuw nsw i64 %26, 1
  br label %28

28:                                               ; preds = %25, %61
  %29 = phi i64 [ 0, %25 ], [ %62, %61 ]
  %30 = add nuw nsw i64 %29, %27
  %31 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %6, i64 0, i32 10, i64 %30, i32 0
  %32 = load i8, i8* %31, align 4
  %33 = icmp eq i8 %32, 13
  br i1 %33, label %34, label %61

34:                                               ; preds = %28
  %35 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %18, align 8
  %36 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %35, i64 0, i32 13
  br label %37

37:                                               ; preds = %37, %34
  %38 = phi i64 [ %56, %37 ], [ 0, %34 ]
  %39 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %6, i64 0, i32 8, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = sext i8 %40 to i64
  %42 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %8, i64 0, i32 0, i64 %41, i64 0
  %43 = bitcast %union.int_mv* %42 to %struct.mv*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #4
  %44 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %6, i64 0, i32 10, i64 %30, i32 1, i64 %38
  %45 = bitcast %union.int_mv* %44 to %struct.mv*
  %46 = bitcast %union.int_mv* %44 to i16*
  %47 = load i16, i16* %46, align 4
  %48 = bitcast %union.int_mv* %42 to i16*
  %49 = load i16, i16* %48, align 2
  %50 = sub i16 %47, %49
  store i16 %50, i16* %21, align 2
  %51 = getelementptr inbounds %struct.mv, %struct.mv* %45, i64 0, i32 1
  %52 = load i16, i16* %51, align 2
  %53 = getelementptr inbounds %struct.mv, %struct.mv* %43, i64 0, i32 1
  %54 = load i16, i16* %53, align 2
  %55 = sub i16 %52, %54
  store i16 %55, i16* %22, align 2
  call void @vp9_inc_mv(%struct.mv* nonnull %3, %struct.nmv_context_counts* %36) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #4
  %56 = add nuw nsw i64 %38, 1
  %57 = load i8, i8* %19, align 1
  %58 = icmp sgt i8 %57, 0
  %59 = zext i1 %58 to i64
  %60 = icmp ult i64 %38, %59
  br i1 %60, label %37, label %61

61:                                               ; preds = %37, %28
  %62 = add i64 %29, %23
  %63 = icmp ult i64 %62, 2
  br i1 %63, label %28, label %64

64:                                               ; preds = %61
  %65 = add i64 %26, %24
  %66 = icmp ult i64 %65, 2
  br i1 %66, label %25, label %103

67:                                               ; preds = %1
  %68 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %6, i64 0, i32 1
  %69 = load i8, i8* %68, align 1
  %70 = icmp eq i8 %69, 13
  br i1 %70, label %71, label %103

71:                                               ; preds = %67
  %72 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %0, i64 0, i32 2
  %73 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %72, align 8
  %74 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %73, i64 0, i32 13
  %75 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %6, i64 0, i32 8, i64 1
  %76 = bitcast %struct.mv* %2 to i8*
  %77 = getelementptr inbounds %struct.mv, %struct.mv* %2, i64 0, i32 0
  %78 = getelementptr inbounds %struct.mv, %struct.mv* %2, i64 0, i32 1
  br label %79

79:                                               ; preds = %79, %71
  %80 = phi i64 [ %98, %79 ], [ 0, %71 ]
  %81 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %6, i64 0, i32 8, i64 %80
  %82 = load i8, i8* %81, align 1
  %83 = sext i8 %82 to i64
  %84 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %8, i64 0, i32 0, i64 %83, i64 0
  %85 = bitcast %union.int_mv* %84 to %struct.mv*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %76) #4
  %86 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %6, i64 0, i32 9, i64 %80
  %87 = bitcast %union.int_mv* %86 to %struct.mv*
  %88 = bitcast %union.int_mv* %86 to i16*
  %89 = load i16, i16* %88, align 4
  %90 = bitcast %union.int_mv* %84 to i16*
  %91 = load i16, i16* %90, align 2
  %92 = sub i16 %89, %91
  store i16 %92, i16* %77, align 2
  %93 = getelementptr inbounds %struct.mv, %struct.mv* %87, i64 0, i32 1
  %94 = load i16, i16* %93, align 2
  %95 = getelementptr inbounds %struct.mv, %struct.mv* %85, i64 0, i32 1
  %96 = load i16, i16* %95, align 2
  %97 = sub i16 %94, %96
  store i16 %97, i16* %78, align 2
  call void @vp9_inc_mv(%struct.mv* nonnull %2, %struct.nmv_context_counts* %74) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %76) #4
  %98 = add nuw nsw i64 %80, 1
  %99 = load i8, i8* %75, align 1
  %100 = icmp sgt i8 %99, 0
  %101 = zext i1 %100 to i64
  %102 = icmp ult i64 %80, %101
  br i1 %102, label %79, label %103

103:                                              ; preds = %79, %64, %67
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @vp9_tree_probs_from_distribution(i8*, [2 x i32]*, i32*) local_unnamed_addr #1

declare i32 @vp9_get_mv_class(i32, i32*) local_unnamed_addr #1

declare void @vp9_inc_mv(%struct.mv*, %struct.nmv_context_counts*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
