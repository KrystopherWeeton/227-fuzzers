; ModuleID = '../../third_party/blink/renderer/core/svg/svg_parser_utilities.cc'
source_filename = "../../third_party/blink/renderer/core/svg/svg_parser_utilities.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink11ParseNumberERPKhS1_RfNS_14WhitespaceModeE(i8** nocapture dereferenceable(8), i8*, float* nocapture dereferenceable(4), i32) local_unnamed_addr #0 {
  %5 = and i32 %3, 1
  %6 = icmp ne i32 %5, 0
  %7 = load i8*, i8** %0, align 8
  %8 = icmp ult i8* %7, %1
  %9 = and i1 %6, %8
  br i1 %9, label %10, label %18

10:                                               ; preds = %4, %15
  %11 = phi i8* [ %16, %15 ], [ %7, %4 ]
  %12 = load i8, i8* %11, align 1
  %13 = icmp ult i8 %12, 33
  br i1 %13, label %14, label %18

14:                                               ; preds = %10
  switch i8 %12, label %18 [
    i8 32, label %15
    i8 10, label %15
    i8 9, label %15
    i8 13, label %15
    i8 12, label %15
  ]

15:                                               ; preds = %14, %14, %14, %14, %14
  %16 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %16, i8** %0, align 8
  %17 = icmp eq i8* %16, %1
  br i1 %17, label %209, label %10

18:                                               ; preds = %14, %10, %4
  %19 = phi i8* [ %7, %4 ], [ %11, %10 ], [ %11, %14 ]
  %20 = icmp ult i8* %19, %1
  br i1 %20, label %21, label %31

21:                                               ; preds = %18
  %22 = load i8, i8* %19, align 1
  %23 = icmp eq i8 %22, 43
  br i1 %23, label %24, label %26

24:                                               ; preds = %21
  %25 = getelementptr inbounds i8, i8* %19, i64 1
  br label %31

26:                                               ; preds = %21
  %27 = icmp eq i8 %22, 45
  %28 = getelementptr inbounds i8, i8* %19, i64 1
  %29 = select i1 %27, i8* %28, i8* %19
  %30 = select i1 %27, float -1.000000e+00, float 1.000000e+00
  br label %31

31:                                               ; preds = %26, %24, %18
  %32 = phi i8* [ %25, %24 ], [ %29, %26 ], [ %19, %18 ]
  %33 = phi float [ 1.000000e+00, %24 ], [ %30, %26 ], [ 1.000000e+00, %18 ]
  %34 = icmp eq i8* %32, %1
  br i1 %34, label %209, label %35

35:                                               ; preds = %31
  %36 = load i8, i8* %32, align 1
  %37 = add i8 %36, -48
  %38 = icmp ult i8 %37, 10
  %39 = icmp eq i8 %36, 46
  %40 = or i1 %39, %38
  br i1 %40, label %41, label %209

41:                                               ; preds = %35
  %42 = icmp ult i8* %32, %1
  br i1 %42, label %43, label %110

43:                                               ; preds = %41
  br i1 %38, label %44, label %81

44:                                               ; preds = %43, %48
  %45 = phi i8* [ %46, %48 ], [ %32, %43 ]
  %46 = getelementptr inbounds i8, i8* %45, i64 1
  %47 = icmp eq i8* %46, %1
  br i1 %47, label %54, label %48

48:                                               ; preds = %44
  %49 = load i8, i8* %46, align 1
  %50 = add i8 %49, -48
  %51 = icmp ult i8 %50, 10
  br i1 %51, label %44, label %52

52:                                               ; preds = %48
  %53 = icmp ult i8* %46, %1
  br label %54

54:                                               ; preds = %44, %52
  %55 = phi i8* [ %46, %52 ], [ %1, %44 ]
  %56 = phi i1 [ %53, %52 ], [ false, %44 ]
  %57 = icmp eq i8* %55, %32
  br i1 %57, label %79, label %58

58:                                               ; preds = %54
  %59 = getelementptr inbounds i8, i8* %55, i64 -1
  %60 = icmp ult i8* %59, %32
  br i1 %60, label %74, label %61

61:                                               ; preds = %58, %61
  %62 = phi i8* [ %72, %61 ], [ %59, %58 ]
  %63 = phi float [ %71, %61 ], [ 1.000000e+00, %58 ]
  %64 = phi float [ %70, %61 ], [ 0.000000e+00, %58 ]
  %65 = load i8, i8* %62, align 1
  %66 = zext i8 %65 to i32
  %67 = add nsw i32 %66, -48
  %68 = sitofp i32 %67 to float
  %69 = fmul float %63, %68
  %70 = fadd float %64, %69
  %71 = fmul float %63, 1.000000e+01
  %72 = getelementptr inbounds i8, i8* %62, i64 -1
  %73 = icmp ult i8* %72, %32
  br i1 %73, label %74, label %61

74:                                               ; preds = %61, %58
  %75 = phi float [ 0.000000e+00, %58 ], [ %70, %61 ]
  %76 = fcmp oge float %75, 0xC7EFFFFFE0000000
  %77 = fcmp ole float %75, 0x47EFFFFFE0000000
  %78 = and i1 %76, %77
  br i1 %78, label %79, label %209

79:                                               ; preds = %74, %54
  %80 = phi float [ %75, %74 ], [ 0.000000e+00, %54 ]
  br i1 %56, label %81, label %110

81:                                               ; preds = %43, %79
  %82 = phi float [ %80, %79 ], [ 0.000000e+00, %43 ]
  %83 = phi i8* [ %55, %79 ], [ %32, %43 ]
  %84 = load i8, i8* %83, align 1
  %85 = icmp eq i8 %84, 46
  br i1 %85, label %86, label %110

86:                                               ; preds = %81
  %87 = getelementptr inbounds i8, i8* %83, i64 1
  %88 = icmp ult i8* %87, %1
  br i1 %88, label %89, label %209

89:                                               ; preds = %86
  %90 = load i8, i8* %87, align 1
  %91 = add i8 %90, -48
  %92 = icmp ugt i8 %91, 9
  br i1 %92, label %209, label %93

93:                                               ; preds = %89, %106
  %94 = phi i8* [ %100, %106 ], [ %87, %89 ]
  %95 = phi float [ %104, %106 ], [ 0.000000e+00, %89 ]
  %96 = phi float [ %99, %106 ], [ 1.000000e+00, %89 ]
  %97 = phi i8 [ %107, %106 ], [ %90, %89 ]
  %98 = zext i8 %97 to i32
  %99 = fmul float %96, 0x3FB99999A0000000
  %100 = getelementptr inbounds i8, i8* %94, i64 1
  %101 = add nsw i32 %98, -48
  %102 = sitofp i32 %101 to float
  %103 = fmul float %99, %102
  %104 = fadd float %95, %103
  %105 = icmp eq i8* %100, %1
  br i1 %105, label %110, label %106

106:                                              ; preds = %93
  %107 = load i8, i8* %100, align 1
  %108 = add i8 %107, -48
  %109 = icmp ult i8 %108, 10
  br i1 %109, label %93, label %110

110:                                              ; preds = %106, %93, %81, %79, %41
  %111 = phi float [ %82, %81 ], [ %80, %79 ], [ 0.000000e+00, %41 ], [ %82, %93 ], [ %82, %106 ]
  %112 = phi i8* [ %83, %81 ], [ %55, %79 ], [ %32, %41 ], [ %100, %106 ], [ %1, %93 ]
  %113 = phi float [ 0.000000e+00, %81 ], [ 0.000000e+00, %79 ], [ 0.000000e+00, %41 ], [ %104, %93 ], [ %104, %106 ]
  %114 = fadd float %111, %113
  %115 = fmul float %33, %114
  store float %115, float* %2, align 4
  %116 = getelementptr inbounds i8, i8* %112, i64 1
  %117 = icmp ult i8* %116, %1
  br i1 %117, label %118, label %162

118:                                              ; preds = %110
  %119 = load i8, i8* %112, align 1
  switch i8 %119, label %162 [
    i8 101, label %120
    i8 69, label %120
  ]

120:                                              ; preds = %118, %118
  %121 = load i8, i8* %116, align 1
  switch i8 %121, label %126 [
    i8 120, label %162
    i8 109, label %162
    i8 43, label %122
    i8 45, label %124
  ]

122:                                              ; preds = %120
  %123 = getelementptr inbounds i8, i8* %112, i64 2
  br label %126

124:                                              ; preds = %120
  %125 = getelementptr inbounds i8, i8* %112, i64 2
  br label %126

126:                                              ; preds = %124, %122, %120
  %127 = phi i8* [ %123, %122 ], [ %125, %124 ], [ %116, %120 ]
  %128 = phi i1 [ false, %122 ], [ true, %124 ], [ false, %120 ]
  %129 = icmp ult i8* %127, %1
  br i1 %129, label %130, label %209

130:                                              ; preds = %126
  %131 = load i8, i8* %127, align 1
  %132 = add i8 %131, -48
  %133 = icmp ugt i8 %132, 9
  br i1 %133, label %209, label %134

134:                                              ; preds = %130, %145
  %135 = phi i8* [ %143, %145 ], [ %127, %130 ]
  %136 = phi float [ %142, %145 ], [ 0.000000e+00, %130 ]
  %137 = phi i8 [ %146, %145 ], [ %131, %130 ]
  %138 = zext i8 %137 to i32
  %139 = fmul float %136, 1.000000e+01
  %140 = add nsw i32 %138, -48
  %141 = sitofp i32 %140 to float
  %142 = fadd float %139, %141
  %143 = getelementptr inbounds i8, i8* %135, i64 1
  %144 = icmp eq i8* %143, %1
  br i1 %144, label %149, label %145

145:                                              ; preds = %134
  %146 = load i8, i8* %143, align 1
  %147 = add i8 %146, -48
  %148 = icmp ult i8 %147, 10
  br i1 %148, label %134, label %149

149:                                              ; preds = %145, %134
  %150 = phi i8* [ %143, %145 ], [ %1, %134 ]
  %151 = fsub float -0.000000e+00, %142
  %152 = select i1 %128, float %151, float %142
  %153 = fcmp ogt float %152, 3.800000e+01
  br i1 %153, label %209, label %154

154:                                              ; preds = %149
  %155 = fcmp une float %152, 0.000000e+00
  br i1 %155, label %156, label %162

156:                                              ; preds = %154
  %157 = fpext float %152 to double
  %158 = tail call double @pow(double 1.000000e+01, double %157) #5
  %159 = fptrunc double %158 to float
  %160 = load float, float* %2, align 4
  %161 = fmul float %160, %159
  store float %161, float* %2, align 4
  br label %162

162:                                              ; preds = %156, %154, %120, %120, %118, %110
  %163 = phi float [ %115, %120 ], [ %115, %110 ], [ %115, %118 ], [ %115, %120 ], [ %115, %154 ], [ %161, %156 ]
  %164 = phi i8* [ %112, %120 ], [ %112, %110 ], [ %112, %118 ], [ %112, %120 ], [ %150, %154 ], [ %150, %156 ]
  %165 = fcmp oge float %163, 0xC7EFFFFFE0000000
  %166 = fcmp ole float %163, 0x47EFFFFFE0000000
  %167 = and i1 %165, %166
  br i1 %167, label %168, label %209

168:                                              ; preds = %162
  store i8* %164, i8** %0, align 8
  %169 = and i32 %3, 2
  %170 = icmp ne i32 %169, 0
  %171 = icmp ult i8* %164, %1
  %172 = and i1 %170, %171
  br i1 %172, label %173, label %209

173:                                              ; preds = %168
  %174 = load i8, i8* %164, align 1
  %175 = icmp ult i8 %174, 33
  br i1 %175, label %176, label %178

176:                                              ; preds = %173
  switch i8 %174, label %209 [
    i8 32, label %177
    i8 10, label %177
    i8 9, label %177
    i8 13, label %177
    i8 12, label %177
  ]

177:                                              ; preds = %176, %176, %176, %176, %176
  br label %183

178:                                              ; preds = %173
  %179 = icmp eq i8 %174, 44
  br i1 %179, label %197, label %209

180:                                              ; preds = %187
  %181 = load i8, i8* %188, align 1
  %182 = icmp ult i8 %181, 33
  br i1 %182, label %183, label %191

183:                                              ; preds = %177, %180
  %184 = phi i8 [ %181, %180 ], [ %174, %177 ]
  %185 = phi i8* [ %188, %180 ], [ %164, %177 ]
  %186 = phi i1 [ %189, %180 ], [ true, %177 ]
  switch i8 %184, label %191 [
    i8 32, label %187
    i8 10, label %187
    i8 9, label %187
    i8 13, label %187
    i8 12, label %187
  ]

187:                                              ; preds = %183, %183, %183, %183, %183
  %188 = getelementptr inbounds i8, i8* %185, i64 1
  store i8* %188, i8** %0, align 8
  %189 = icmp ult i8* %188, %1
  %190 = icmp eq i8* %188, %1
  br i1 %190, label %191, label %180

191:                                              ; preds = %187, %183, %180
  %192 = phi i8* [ %188, %180 ], [ %185, %183 ], [ %1, %187 ]
  %193 = phi i1 [ %189, %180 ], [ %186, %183 ], [ %189, %187 ]
  br i1 %193, label %194, label %209

194:                                              ; preds = %191
  %195 = load i8, i8* %192, align 1
  %196 = icmp eq i8 %195, 44
  br i1 %196, label %197, label %209

197:                                              ; preds = %194, %178
  %198 = phi i8* [ %192, %194 ], [ %164, %178 ]
  %199 = getelementptr inbounds i8, i8* %198, i64 1
  store i8* %199, i8** %0, align 8
  %200 = icmp ult i8* %199, %1
  br i1 %200, label %201, label %209

201:                                              ; preds = %197, %206
  %202 = phi i8* [ %207, %206 ], [ %199, %197 ]
  %203 = load i8, i8* %202, align 1
  %204 = icmp ult i8 %203, 33
  br i1 %204, label %205, label %209

205:                                              ; preds = %201
  switch i8 %203, label %209 [
    i8 32, label %206
    i8 10, label %206
    i8 9, label %206
    i8 13, label %206
    i8 12, label %206
  ]

206:                                              ; preds = %205, %205, %205, %205, %205
  %207 = getelementptr inbounds i8, i8* %202, i64 1
  store i8* %207, i8** %0, align 8
  %208 = icmp eq i8* %207, %1
  br i1 %208, label %209, label %201

209:                                              ; preds = %15, %201, %205, %206, %31, %35, %74, %86, %89, %126, %130, %149, %162, %168, %176, %178, %191, %194, %197
  %210 = phi i1 [ false, %31 ], [ false, %74 ], [ false, %86 ], [ false, %89 ], [ false, %162 ], [ true, %168 ], [ true, %178 ], [ false, %126 ], [ false, %130 ], [ false, %149 ], [ false, %35 ], [ true, %176 ], [ true, %197 ], [ true, %194 ], [ true, %191 ], [ true, %206 ], [ true, %205 ], [ true, %201 ], [ false, %15 ]
  ret i1 %210
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink11ParseNumberERPKDsS1_RfNS_14WhitespaceModeE(i16** nocapture dereferenceable(8), i16* readnone, float* nocapture dereferenceable(4), i32) local_unnamed_addr #0 {
  %5 = and i32 %3, 1
  %6 = icmp ne i32 %5, 0
  %7 = load i16*, i16** %0, align 8
  %8 = icmp ult i16* %7, %1
  %9 = and i1 %6, %8
  br i1 %9, label %10, label %18

10:                                               ; preds = %4, %15
  %11 = phi i16* [ %16, %15 ], [ %7, %4 ]
  %12 = load i16, i16* %11, align 2
  %13 = icmp ult i16 %12, 33
  br i1 %13, label %14, label %18

14:                                               ; preds = %10
  switch i16 %12, label %18 [
    i16 32, label %15
    i16 10, label %15
    i16 9, label %15
    i16 13, label %15
    i16 12, label %15
  ]

15:                                               ; preds = %14, %14, %14, %14, %14
  %16 = getelementptr inbounds i16, i16* %11, i64 1
  store i16* %16, i16** %0, align 8
  %17 = icmp ult i16* %16, %1
  br i1 %17, label %10, label %18

18:                                               ; preds = %15, %14, %10, %4
  %19 = phi i16* [ %7, %4 ], [ %11, %10 ], [ %11, %14 ], [ %16, %15 ]
  %20 = icmp ult i16* %19, %1
  br i1 %20, label %21, label %31

21:                                               ; preds = %18
  %22 = load i16, i16* %19, align 2
  %23 = icmp eq i16 %22, 43
  br i1 %23, label %24, label %26

24:                                               ; preds = %21
  %25 = getelementptr inbounds i16, i16* %19, i64 1
  br label %31

26:                                               ; preds = %21
  %27 = icmp eq i16 %22, 45
  %28 = getelementptr inbounds i16, i16* %19, i64 1
  %29 = select i1 %27, i16* %28, i16* %19
  %30 = select i1 %27, float -1.000000e+00, float 1.000000e+00
  br label %31

31:                                               ; preds = %26, %24, %18
  %32 = phi i16* [ %25, %24 ], [ %29, %26 ], [ %19, %18 ]
  %33 = phi float [ 1.000000e+00, %24 ], [ %30, %26 ], [ 1.000000e+00, %18 ]
  %34 = icmp eq i16* %32, %1
  br i1 %34, label %198, label %35

35:                                               ; preds = %31
  %36 = load i16, i16* %32, align 2
  %37 = add i16 %36, -48
  %38 = icmp ult i16 %37, 10
  %39 = icmp eq i16 %36, 46
  %40 = or i1 %39, %38
  br i1 %40, label %41, label %198

41:                                               ; preds = %35
  %42 = icmp ult i16* %32, %1
  br i1 %42, label %43, label %106

43:                                               ; preds = %41
  br i1 %38, label %44, label %77

44:                                               ; preds = %43, %48
  %45 = phi i16* [ %46, %48 ], [ %32, %43 ]
  %46 = getelementptr inbounds i16, i16* %45, i64 1
  %47 = icmp ult i16* %46, %1
  br i1 %47, label %48, label %52

48:                                               ; preds = %44
  %49 = load i16, i16* %46, align 2
  %50 = add i16 %49, -48
  %51 = icmp ult i16 %50, 10
  br i1 %51, label %44, label %52

52:                                               ; preds = %48, %44
  %53 = phi i1 [ true, %48 ], [ false, %44 ]
  %54 = icmp eq i16* %46, %32
  br i1 %54, label %75, label %55

55:                                               ; preds = %52
  %56 = icmp ult i16* %45, %32
  br i1 %56, label %70, label %57

57:                                               ; preds = %55, %57
  %58 = phi i16* [ %68, %57 ], [ %45, %55 ]
  %59 = phi float [ %67, %57 ], [ 1.000000e+00, %55 ]
  %60 = phi float [ %66, %57 ], [ 0.000000e+00, %55 ]
  %61 = load i16, i16* %58, align 2
  %62 = zext i16 %61 to i32
  %63 = add nsw i32 %62, -48
  %64 = sitofp i32 %63 to float
  %65 = fmul float %59, %64
  %66 = fadd float %60, %65
  %67 = fmul float %59, 1.000000e+01
  %68 = getelementptr inbounds i16, i16* %58, i64 -1
  %69 = icmp ult i16* %68, %32
  br i1 %69, label %70, label %57

70:                                               ; preds = %57, %55
  %71 = phi float [ 0.000000e+00, %55 ], [ %66, %57 ]
  %72 = fcmp oge float %71, 0xC7EFFFFFE0000000
  %73 = fcmp ole float %71, 0x47EFFFFFE0000000
  %74 = and i1 %72, %73
  br i1 %74, label %75, label %198

75:                                               ; preds = %70, %52
  %76 = phi float [ %71, %70 ], [ 0.000000e+00, %52 ]
  br i1 %53, label %77, label %106

77:                                               ; preds = %43, %75
  %78 = phi float [ %76, %75 ], [ 0.000000e+00, %43 ]
  %79 = phi i16* [ %46, %75 ], [ %32, %43 ]
  %80 = load i16, i16* %79, align 2
  %81 = icmp eq i16 %80, 46
  br i1 %81, label %82, label %106

82:                                               ; preds = %77
  %83 = getelementptr inbounds i16, i16* %79, i64 1
  %84 = icmp ult i16* %83, %1
  br i1 %84, label %85, label %198

85:                                               ; preds = %82
  %86 = load i16, i16* %83, align 2
  %87 = add i16 %86, -48
  %88 = icmp ugt i16 %87, 9
  br i1 %88, label %198, label %89

89:                                               ; preds = %85, %102
  %90 = phi i16* [ %96, %102 ], [ %83, %85 ]
  %91 = phi float [ %100, %102 ], [ 0.000000e+00, %85 ]
  %92 = phi float [ %95, %102 ], [ 1.000000e+00, %85 ]
  %93 = phi i16 [ %103, %102 ], [ %86, %85 ]
  %94 = zext i16 %93 to i32
  %95 = fmul float %92, 0x3FB99999A0000000
  %96 = getelementptr inbounds i16, i16* %90, i64 1
  %97 = add nsw i32 %94, -48
  %98 = sitofp i32 %97 to float
  %99 = fmul float %95, %98
  %100 = fadd float %91, %99
  %101 = icmp ult i16* %96, %1
  br i1 %101, label %102, label %106

102:                                              ; preds = %89
  %103 = load i16, i16* %96, align 2
  %104 = add i16 %103, -48
  %105 = icmp ult i16 %104, 10
  br i1 %105, label %89, label %106

106:                                              ; preds = %102, %89, %77, %75, %41
  %107 = phi float [ %78, %77 ], [ %76, %75 ], [ 0.000000e+00, %41 ], [ %78, %89 ], [ %78, %102 ]
  %108 = phi i16* [ %79, %77 ], [ %46, %75 ], [ %32, %41 ], [ %96, %89 ], [ %96, %102 ]
  %109 = phi float [ 0.000000e+00, %77 ], [ 0.000000e+00, %75 ], [ 0.000000e+00, %41 ], [ %100, %89 ], [ %100, %102 ]
  %110 = fadd float %107, %109
  %111 = fmul float %33, %110
  store float %111, float* %2, align 4
  %112 = getelementptr inbounds i16, i16* %108, i64 1
  %113 = icmp ult i16* %112, %1
  br i1 %113, label %114, label %157

114:                                              ; preds = %106
  %115 = load i16, i16* %108, align 2
  switch i16 %115, label %157 [
    i16 101, label %116
    i16 69, label %116
  ]

116:                                              ; preds = %114, %114
  %117 = load i16, i16* %112, align 2
  switch i16 %117, label %122 [
    i16 120, label %157
    i16 109, label %157
    i16 43, label %118
    i16 45, label %120
  ]

118:                                              ; preds = %116
  %119 = getelementptr inbounds i16, i16* %108, i64 2
  br label %122

120:                                              ; preds = %116
  %121 = getelementptr inbounds i16, i16* %108, i64 2
  br label %122

122:                                              ; preds = %120, %118, %116
  %123 = phi i16* [ %119, %118 ], [ %121, %120 ], [ %112, %116 ]
  %124 = phi i1 [ false, %118 ], [ true, %120 ], [ false, %116 ]
  %125 = icmp ult i16* %123, %1
  br i1 %125, label %126, label %198

126:                                              ; preds = %122
  %127 = load i16, i16* %123, align 2
  %128 = add i16 %127, -48
  %129 = icmp ugt i16 %128, 9
  br i1 %129, label %198, label %130

130:                                              ; preds = %126, %141
  %131 = phi i16* [ %139, %141 ], [ %123, %126 ]
  %132 = phi float [ %138, %141 ], [ 0.000000e+00, %126 ]
  %133 = phi i16 [ %142, %141 ], [ %127, %126 ]
  %134 = zext i16 %133 to i32
  %135 = fmul float %132, 1.000000e+01
  %136 = add nsw i32 %134, -48
  %137 = sitofp i32 %136 to float
  %138 = fadd float %135, %137
  %139 = getelementptr inbounds i16, i16* %131, i64 1
  %140 = icmp ult i16* %139, %1
  br i1 %140, label %141, label %145

141:                                              ; preds = %130
  %142 = load i16, i16* %139, align 2
  %143 = add i16 %142, -48
  %144 = icmp ult i16 %143, 10
  br i1 %144, label %130, label %145

145:                                              ; preds = %141, %130
  %146 = fsub float -0.000000e+00, %138
  %147 = select i1 %124, float %146, float %138
  %148 = fcmp ogt float %147, 3.800000e+01
  br i1 %148, label %198, label %149

149:                                              ; preds = %145
  %150 = fcmp une float %147, 0.000000e+00
  br i1 %150, label %151, label %157

151:                                              ; preds = %149
  %152 = fpext float %147 to double
  %153 = tail call double @pow(double 1.000000e+01, double %152) #5
  %154 = fptrunc double %153 to float
  %155 = load float, float* %2, align 4
  %156 = fmul float %155, %154
  store float %156, float* %2, align 4
  br label %157

157:                                              ; preds = %151, %149, %116, %116, %114, %106
  %158 = phi float [ %111, %116 ], [ %111, %106 ], [ %111, %114 ], [ %111, %116 ], [ %111, %149 ], [ %156, %151 ]
  %159 = phi i16* [ %108, %116 ], [ %108, %106 ], [ %108, %114 ], [ %108, %116 ], [ %139, %149 ], [ %139, %151 ]
  %160 = fcmp oge float %158, 0xC7EFFFFFE0000000
  %161 = fcmp ole float %158, 0x47EFFFFFE0000000
  %162 = and i1 %160, %161
  br i1 %162, label %163, label %198

163:                                              ; preds = %157
  store i16* %159, i16** %0, align 8
  %164 = and i32 %3, 2
  %165 = icmp ne i32 %164, 0
  %166 = icmp ult i16* %159, %1
  %167 = and i1 %165, %166
  br i1 %167, label %168, label %198

168:                                              ; preds = %163
  %169 = load i16, i16* %159, align 2
  %170 = icmp ult i16 %169, 33
  br i1 %170, label %171, label %173

171:                                              ; preds = %168
  switch i16 %169, label %198 [
    i16 32, label %172
    i16 10, label %172
    i16 9, label %172
    i16 13, label %172
    i16 12, label %172
  ]

172:                                              ; preds = %171, %171, %171, %171, %171
  br label %175

173:                                              ; preds = %168
  %174 = icmp eq i16 %169, 44
  br i1 %174, label %186, label %198

175:                                              ; preds = %172, %181
  %176 = phi i16* [ %179, %181 ], [ %159, %172 ]
  %177 = phi i16 [ %182, %181 ], [ %169, %172 ]
  switch i16 %177, label %198 [
    i16 32, label %178
    i16 10, label %178
    i16 9, label %178
    i16 13, label %178
    i16 12, label %178
    i16 44, label %186
  ]

178:                                              ; preds = %175, %175, %175, %175, %175
  %179 = getelementptr inbounds i16, i16* %176, i64 1
  store i16* %179, i16** %0, align 8
  %180 = icmp ult i16* %179, %1
  br i1 %180, label %181, label %198

181:                                              ; preds = %178
  %182 = load i16, i16* %179, align 2
  %183 = icmp ult i16 %182, 33
  br i1 %183, label %175, label %184

184:                                              ; preds = %181
  %185 = icmp eq i16 %182, 44
  br i1 %185, label %186, label %198

186:                                              ; preds = %175, %184, %173
  %187 = phi i16* [ %179, %184 ], [ %159, %173 ], [ %176, %175 ]
  %188 = getelementptr inbounds i16, i16* %187, i64 1
  store i16* %188, i16** %0, align 8
  %189 = icmp ult i16* %188, %1
  br i1 %189, label %190, label %198

190:                                              ; preds = %186, %195
  %191 = phi i16* [ %196, %195 ], [ %188, %186 ]
  %192 = load i16, i16* %191, align 2
  %193 = icmp ult i16 %192, 33
  br i1 %193, label %194, label %198

194:                                              ; preds = %190
  switch i16 %192, label %198 [
    i16 32, label %195
    i16 10, label %195
    i16 9, label %195
    i16 13, label %195
    i16 12, label %195
  ]

195:                                              ; preds = %194, %194, %194, %194, %194
  %196 = getelementptr inbounds i16, i16* %191, i64 1
  store i16* %196, i16** %0, align 8
  %197 = icmp ult i16* %196, %1
  br i1 %197, label %190, label %198

198:                                              ; preds = %175, %178, %190, %194, %195, %31, %35, %70, %82, %85, %122, %126, %145, %157, %163, %171, %173, %184, %186
  %199 = phi i1 [ false, %31 ], [ false, %70 ], [ false, %82 ], [ false, %85 ], [ false, %157 ], [ true, %163 ], [ true, %173 ], [ false, %122 ], [ false, %126 ], [ false, %145 ], [ false, %35 ], [ true, %171 ], [ true, %186 ], [ true, %184 ], [ true, %195 ], [ true, %194 ], [ true, %190 ], [ true, %178 ], [ true, %175 ]
  ret i1 %199
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink12ParseArcFlagERPKhS1_Rb(i8** nocapture dereferenceable(8), i8*, i8* nocapture dereferenceable(1)) local_unnamed_addr #1 {
  %4 = load i8*, i8** %0, align 8
  %5 = icmp ult i8* %4, %1
  br i1 %5, label %6, label %50

6:                                                ; preds = %3
  %7 = load i8, i8* %4, align 1
  switch i8 %7, label %50 [
    i8 48, label %9
    i8 49, label %8
  ]

8:                                                ; preds = %6
  br label %9

9:                                                ; preds = %8, %6
  %10 = phi i8 [ 1, %8 ], [ 0, %6 ]
  store i8 %10, i8* %2, align 1
  %11 = load i8*, i8** %0, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %0, align 8
  %13 = icmp ult i8* %12, %1
  br i1 %13, label %14, label %50

14:                                               ; preds = %9
  %15 = load i8, i8* %12, align 1
  %16 = icmp ult i8 %15, 33
  br i1 %16, label %17, label %19

17:                                               ; preds = %14
  switch i8 %15, label %50 [
    i8 32, label %18
    i8 10, label %18
    i8 9, label %18
    i8 13, label %18
    i8 12, label %18
  ]

18:                                               ; preds = %17, %17, %17, %17, %17
  br label %24

19:                                               ; preds = %14
  %20 = icmp eq i8 %15, 44
  br i1 %20, label %38, label %50

21:                                               ; preds = %28
  %22 = load i8, i8* %29, align 1
  %23 = icmp ult i8 %22, 33
  br i1 %23, label %24, label %32

24:                                               ; preds = %18, %21
  %25 = phi i8 [ %22, %21 ], [ %15, %18 ]
  %26 = phi i8* [ %29, %21 ], [ %12, %18 ]
  %27 = phi i1 [ %30, %21 ], [ true, %18 ]
  switch i8 %25, label %32 [
    i8 32, label %28
    i8 10, label %28
    i8 9, label %28
    i8 13, label %28
    i8 12, label %28
  ]

28:                                               ; preds = %24, %24, %24, %24, %24
  %29 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %29, i8** %0, align 8
  %30 = icmp ult i8* %29, %1
  %31 = icmp eq i8* %29, %1
  br i1 %31, label %32, label %21

32:                                               ; preds = %28, %24, %21
  %33 = phi i8* [ %29, %21 ], [ %26, %24 ], [ %1, %28 ]
  %34 = phi i1 [ %30, %21 ], [ %27, %24 ], [ %30, %28 ]
  br i1 %34, label %35, label %50

35:                                               ; preds = %32
  %36 = load i8, i8* %33, align 1
  %37 = icmp eq i8 %36, 44
  br i1 %37, label %38, label %50

38:                                               ; preds = %35, %19
  %39 = phi i8* [ %33, %35 ], [ %12, %19 ]
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  store i8* %40, i8** %0, align 8
  %41 = icmp ult i8* %40, %1
  br i1 %41, label %42, label %50

42:                                               ; preds = %38, %47
  %43 = phi i8* [ %48, %47 ], [ %40, %38 ]
  %44 = load i8, i8* %43, align 1
  %45 = icmp ult i8 %44, 33
  br i1 %45, label %46, label %50

46:                                               ; preds = %42
  switch i8 %44, label %50 [
    i8 32, label %47
    i8 10, label %47
    i8 9, label %47
    i8 13, label %47
    i8 12, label %47
  ]

47:                                               ; preds = %46, %46, %46, %46, %46
  %48 = getelementptr inbounds i8, i8* %43, i64 1
  store i8* %48, i8** %0, align 8
  %49 = icmp eq i8* %48, %1
  br i1 %49, label %50, label %42

50:                                               ; preds = %42, %46, %47, %3, %6, %9, %17, %19, %32, %35, %38
  %51 = phi i1 [ false, %3 ], [ false, %6 ], [ true, %19 ], [ true, %17 ], [ true, %38 ], [ true, %35 ], [ true, %32 ], [ true, %9 ], [ true, %47 ], [ true, %46 ], [ true, %42 ]
  ret i1 %51
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink12ParseArcFlagERPKDsS1_Rb(i16** nocapture dereferenceable(8), i16* readnone, i8* nocapture dereferenceable(1)) local_unnamed_addr #1 {
  %4 = load i16*, i16** %0, align 8
  %5 = icmp ult i16* %4, %1
  br i1 %5, label %6, label %44

6:                                                ; preds = %3
  %7 = load i16, i16* %4, align 2
  switch i16 %7, label %44 [
    i16 48, label %9
    i16 49, label %8
  ]

8:                                                ; preds = %6
  br label %9

9:                                                ; preds = %8, %6
  %10 = phi i8 [ 1, %8 ], [ 0, %6 ]
  store i8 %10, i8* %2, align 1
  %11 = load i16*, i16** %0, align 8
  %12 = getelementptr inbounds i16, i16* %11, i64 1
  store i16* %12, i16** %0, align 8
  %13 = icmp ult i16* %12, %1
  br i1 %13, label %14, label %44

14:                                               ; preds = %9
  %15 = load i16, i16* %12, align 2
  %16 = icmp ult i16 %15, 33
  br i1 %16, label %17, label %19

17:                                               ; preds = %14
  switch i16 %15, label %44 [
    i16 32, label %18
    i16 10, label %18
    i16 9, label %18
    i16 13, label %18
    i16 12, label %18
  ]

18:                                               ; preds = %17, %17, %17, %17, %17
  br label %21

19:                                               ; preds = %14
  %20 = icmp eq i16 %15, 44
  br i1 %20, label %32, label %44

21:                                               ; preds = %18, %27
  %22 = phi i16* [ %25, %27 ], [ %12, %18 ]
  %23 = phi i16 [ %28, %27 ], [ %15, %18 ]
  switch i16 %23, label %44 [
    i16 32, label %24
    i16 10, label %24
    i16 9, label %24
    i16 13, label %24
    i16 12, label %24
    i16 44, label %32
  ]

24:                                               ; preds = %21, %21, %21, %21, %21
  %25 = getelementptr inbounds i16, i16* %22, i64 1
  store i16* %25, i16** %0, align 8
  %26 = icmp ult i16* %25, %1
  br i1 %26, label %27, label %44

27:                                               ; preds = %24
  %28 = load i16, i16* %25, align 2
  %29 = icmp ult i16 %28, 33
  br i1 %29, label %21, label %30

30:                                               ; preds = %27
  %31 = icmp eq i16 %28, 44
  br i1 %31, label %32, label %44

32:                                               ; preds = %21, %30, %19
  %33 = phi i16* [ %25, %30 ], [ %12, %19 ], [ %22, %21 ]
  %34 = getelementptr inbounds i16, i16* %33, i64 1
  store i16* %34, i16** %0, align 8
  %35 = icmp ult i16* %34, %1
  br i1 %35, label %36, label %44

36:                                               ; preds = %32, %41
  %37 = phi i16* [ %42, %41 ], [ %34, %32 ]
  %38 = load i16, i16* %37, align 2
  %39 = icmp ult i16 %38, 33
  br i1 %39, label %40, label %44

40:                                               ; preds = %36
  switch i16 %38, label %44 [
    i16 32, label %41
    i16 10, label %41
    i16 9, label %41
    i16 13, label %41
    i16 12, label %41
  ]

41:                                               ; preds = %40, %40, %40, %40, %40
  %42 = getelementptr inbounds i16, i16* %37, i64 1
  store i16* %42, i16** %0, align 8
  %43 = icmp ult i16* %42, %1
  br i1 %43, label %36, label %44

44:                                               ; preds = %21, %24, %36, %40, %41, %3, %6, %9, %17, %19, %30, %32
  %45 = phi i1 [ false, %3 ], [ false, %6 ], [ true, %19 ], [ true, %17 ], [ true, %32 ], [ true, %30 ], [ true, %9 ], [ true, %41 ], [ true, %40 ], [ true, %36 ], [ true, %24 ], [ true, %21 ]
  ret i1 %45
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink25ParseNumberOptionalNumberERKN3WTF6StringERfS4_(%"class.WTF::String"* nocapture readonly dereferenceable(8), float* dereferenceable(4), float* dereferenceable(4)) local_unnamed_addr #2 {
  %4 = alloca i8*, align 8
  %5 = alloca i16*, align 8
  %6 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 0, i32 0, i32 0
  %7 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %8 = icmp eq %"class.WTF::StringImpl"* %7, null
  br i1 %8, label %65, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %65, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = and i32 %15, 1
  %17 = icmp eq i32 %16, 0
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 1
  br i1 %17, label %42, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.WTF::StringImpl"* %18 to i8*
  %21 = zext i32 %11 to i64
  %22 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #5
  %23 = bitcast i8** %4 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %18, %"class.WTF::StringImpl"** %23, align 8
  %24 = getelementptr inbounds i8, i8* %20, i64 %21
  %25 = call zeroext i1 @_ZN5blink11ParseNumberERPKhS1_RfNS_14WhitespaceModeE(i8** nonnull dereferenceable(8) %4, i8* %24, float* dereferenceable(4) %1, i32 3) #5
  br i1 %25, label %26, label %40

26:                                               ; preds = %19
  %27 = load i8*, i8** %4, align 8
  %28 = icmp eq i8* %27, %24
  br i1 %28, label %29, label %33

29:                                               ; preds = %26
  %30 = bitcast float* %1 to i32*
  %31 = load i32, i32* %30, align 4
  %32 = bitcast float* %2 to i32*
  store i32 %31, i32* %32, align 4
  br label %37

33:                                               ; preds = %26
  %34 = call zeroext i1 @_ZN5blink11ParseNumberERPKhS1_RfNS_14WhitespaceModeE(i8** nonnull dereferenceable(8) %4, i8* %24, float* dereferenceable(4) %2, i32 3) #5
  br i1 %34, label %35, label %40

35:                                               ; preds = %33
  %36 = load i8*, i8** %4, align 8
  br label %37

37:                                               ; preds = %35, %29
  %38 = phi i8* [ %36, %35 ], [ %24, %29 ]
  %39 = icmp eq i8* %38, %24
  br label %40

40:                                               ; preds = %37, %33, %19
  %41 = phi i1 [ %39, %37 ], [ false, %19 ], [ false, %33 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #5
  br label %65

42:                                               ; preds = %13
  %43 = bitcast %"class.WTF::StringImpl"* %18 to i16*
  %44 = zext i32 %11 to i64
  %45 = bitcast i16** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %45) #5
  %46 = bitcast i16** %5 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %18, %"class.WTF::StringImpl"** %46, align 8
  %47 = getelementptr inbounds i16, i16* %43, i64 %44
  %48 = call zeroext i1 @_ZN5blink11ParseNumberERPKDsS1_RfNS_14WhitespaceModeE(i16** nonnull dereferenceable(8) %5, i16* %47, float* dereferenceable(4) %1, i32 3) #5
  br i1 %48, label %49, label %63

49:                                               ; preds = %42
  %50 = load i16*, i16** %5, align 8
  %51 = icmp eq i16* %50, %47
  br i1 %51, label %52, label %56

52:                                               ; preds = %49
  %53 = bitcast float* %1 to i32*
  %54 = load i32, i32* %53, align 4
  %55 = bitcast float* %2 to i32*
  store i32 %54, i32* %55, align 4
  br label %60

56:                                               ; preds = %49
  %57 = call zeroext i1 @_ZN5blink11ParseNumberERPKDsS1_RfNS_14WhitespaceModeE(i16** nonnull dereferenceable(8) %5, i16* %47, float* dereferenceable(4) %2, i32 3) #5
  br i1 %57, label %58, label %63

58:                                               ; preds = %56
  %59 = load i16*, i16** %5, align 8
  br label %60

60:                                               ; preds = %58, %52
  %61 = phi i16* [ %59, %58 ], [ %47, %52 ]
  %62 = icmp eq i16* %61, %47
  br label %63

63:                                               ; preds = %60, %56, %42
  %64 = phi i1 [ %62, %60 ], [ false, %42 ], [ false, %56 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %45) #5
  br label %65

65:                                               ; preds = %3, %63, %40, %9
  %66 = phi i1 [ false, %9 ], [ %41, %40 ], [ %64, %63 ], [ false, %3 ]
  ret i1 %66
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nofree nounwind
declare double @pow(double, double) local_unnamed_addr #4

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
