; ModuleID = '../../third_party/blink/renderer/core/animation/css/css_timing_data.cc'
source_filename = "../../third_party/blink/renderer/core/animation/css/css_timing_data.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::AnimationTimeDelta" = type { double }
%union.anon = type { %"class.blink::AnimationTimeDelta" }
%class.scoped_refptr = type { %"class.blink::TimingFunction"* }
%"class.blink::TimingFunction" = type { i32 (...)**, %"class.WTF::ThreadSafeRefCounted", i32 }
%"class.WTF::ThreadSafeRefCounted" = type { %"class.base::RefCountedThreadSafe" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::LinearTimingFunction" = type { %"class.blink::TimingFunction" }
%"class.blink::CSSTimingData" = type { %"class.WTF::Vector", %"class.WTF::Vector", %"class.WTF::Vector.0" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { double*, i32, i32 }
%"class.WTF::Vector.0" = type { %"class.WTF::VectorBuffer.1" }
%"class.WTF::VectorBuffer.1" = type { %"class.WTF::VectorBufferBase.2" }
%"class.WTF::VectorBufferBase.2" = type { %class.scoped_refptr*, i32, i32 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.9 }
%union.anon.9 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::CubicBezierTimingFunction" = type { %"class.blink::TimingFunction", %"class.std::__1::unique_ptr", double, double, double, double }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.gfx::CubicBezierTimingFunction"* }
%"class.gfx::CubicBezierTimingFunction" = type <{ %"class.gfx::TimingFunction", %"class.gfx::CubicBezier", i32, [4 x i8] }>
%"class.gfx::TimingFunction" = type { i32 (...)** }
%"class.gfx::CubicBezier" = type { double, double, double, double, double, double, double, double, double, double, [11 x double] }
%"struct.blink::Timing" = type <{ %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta", i32, [4 x i8], double, double, %"class.absl::optional", i32, [4 x i8], %class.scoped_refptr, i16, [6 x i8] }>
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%"class.logging::CheckOpResult" = type { i8* }

$_ZN3WTF6VectorI13scoped_refptrIN5blink14TimingFunctionEELj0ENS_18PartitionAllocatorEEC2ERKS6_ = comdat any

$_ZNK3WTF6VectorI13scoped_refptrIN5blink14TimingFunctionEELj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN5blink20LinearTimingFunction6SharedEv = comdat any

$_ZN3WTF6VectorIdLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIdEEvOT_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIdEEmm = comdat any

$_ZN3WTF6VectorI13scoped_refptrIN5blink14TimingFunctionEELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS4_EEvOT_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeI13scoped_refptrIN5blink14TimingFunctionEEEEmm = comdat any

$_ZNK3WTF6VectorIdLj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZZN5blink20LinearTimingFunction6SharedEvE6linear = comdat any

$_ZGVZN5blink20LinearTimingFunction6SharedEvE6linear = comdat any

@__const._ZNK5blink13CSSTimingData15ConvertToTimingEm.timing = private unnamed_addr constant <{ %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta", i32, [4 x i8], double, double, { { { { i8, [7 x i8], %union.anon } } } }, i32, [4 x i8], %class.scoped_refptr, i16, [6 x i8] }> <{ %"class.blink::AnimationTimeDelta" { double 0xFFFFFFFFFFFFFFFF }, %"class.blink::AnimationTimeDelta" { double 0xFFFFFFFFFFFFFFFF }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, { { { { i8, [7 x i8], %union.anon } } } } { { { { i8, [7 x i8], %union.anon } } } { { { i8, [7 x i8], %union.anon } } { { i8, [7 x i8], %union.anon } { i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", %union.anon { %"class.blink::AnimationTimeDelta" { double 0xFFFFFFFFFFFFFFFF } } } } } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %class.scoped_refptr { %"class.blink::TimingFunction"* inttoptr (i64 -6148914691236517206 to %"class.blink::TimingFunction"*) }, i16 -21846, [6 x i8] c"\AA\AA\AA\AA\AA\AA" }>, align 8
@.str = private unnamed_addr constant [32 x i8] c"../../base/memory/ref_counted.h\00", align 1
@.str.1 = private unnamed_addr constant [27 x i8] c"ref_count_.Increment() > 0\00", align 1
@_ZZN5blink20LinearTimingFunction6SharedEvE6linear = linkonce_odr hidden local_unnamed_addr global %"class.blink::LinearTimingFunction"* null, comdat, align 8
@_ZGVZN5blink20LinearTimingFunction6SharedEvE6linear = linkonce_odr hidden global i64 0, comdat, align 8
@_ZTVN5blink20LinearTimingFunctionE = external unnamed_addr constant { [9 x i8*] }, align 8
@.str.2 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.4 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.5 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIdEEPKcv = private unnamed_addr constant [54 x i8] c"const char *WTF::GetStringWithTypeName() [T = double]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameI13scoped_refptrIN5blink14TimingFunctionEEEEPKcv = private unnamed_addr constant [84 x i8] c"const char *WTF::GetStringWithTypeName() [T = scoped_refptr<blink::TimingFunction>]\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1

@_ZN5blink13CSSTimingDataC1Ev = hidden unnamed_addr alias void (%"class.blink::CSSTimingData"*), void (%"class.blink::CSSTimingData"*)* @_ZN5blink13CSSTimingDataC2Ev
@_ZN5blink13CSSTimingDataC1ERKS0_ = hidden unnamed_addr alias void (%"class.blink::CSSTimingData"*, %"class.blink::CSSTimingData"*), void (%"class.blink::CSSTimingData"*, %"class.blink::CSSTimingData"*)* @_ZN5blink13CSSTimingDataC2ERKS0_

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13CSSTimingDataC2Ev(%"class.blink::CSSTimingData"*) unnamed_addr #0 align 2 {
  %2 = alloca %"class.logging::CheckError", align 8
  %3 = alloca double, align 8
  %4 = alloca double, align 8
  %5 = alloca %class.scoped_refptr, align 8
  %6 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %0, i64 0, i32 2
  %8 = bitcast double* %3 to i8*
  %9 = bitcast %"class.blink::CSSTimingData"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 48, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #8
  store double 0.000000e+00, double* %3, align 8
  %10 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %0, i64 0, i32 0
  call void @_ZN3WTF6VectorIdLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIdEEvOT_(%"class.WTF::Vector"* %10, double* nonnull dereferenceable(8) %3) #8
  %11 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %14 = load i32, i32* %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #8
  %15 = bitcast double* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #8
  store double 0.000000e+00, double* %4, align 8
  %16 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %17 = icmp eq i32 %12, %14
  br i1 %17, label %26, label %18, !prof !2

18:                                               ; preds = %1
  %19 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %6, i64 0, i32 0, i32 0, i32 0
  %20 = load double*, double** %19, align 8
  %21 = zext i32 %12 to i64
  %22 = getelementptr inbounds double, double* %20, i64 %21
  %23 = bitcast double* %22 to i64*
  store i64 0, i64* %23, align 8
  %24 = load i32, i32* %16, align 4
  %25 = add i32 %24, 1
  store i32 %25, i32* %16, align 4
  br label %27

26:                                               ; preds = %1
  call void @_ZN3WTF6VectorIdLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIdEEvOT_(%"class.WTF::Vector"* %6, double* nonnull dereferenceable(8) %4) #8
  br label %27

27:                                               ; preds = %18, %26
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #8
  %28 = bitcast %class.scoped_refptr* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #8
  %29 = call %"class.blink::CubicBezierTimingFunction"* @_ZN5blink25CubicBezierTimingFunction6PresetEN3gfx25CubicBezierTimingFunction8EaseTypeE(i32 0) #8
  %30 = getelementptr inbounds %"class.blink::CubicBezierTimingFunction", %"class.blink::CubicBezierTimingFunction"* %29, i64 0, i32 0
  %31 = icmp eq %"class.blink::CubicBezierTimingFunction"* %29, null
  br i1 %31, label %39, label %32

32:                                               ; preds = %27
  %33 = getelementptr inbounds %"class.blink::CubicBezierTimingFunction", %"class.blink::CubicBezierTimingFunction"* %29, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = atomicrmw add i32* %33, i32 1 monotonic
  %35 = icmp sgt i32 %34, 0
  br i1 %35, label %39, label %36

36:                                               ; preds = %32
  %37 = bitcast %"class.logging::CheckError"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37) #8
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %2, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0), i32 211, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0)) #8
  %38 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %2) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %2) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37) #8
  br label %39

39:                                               ; preds = %27, %32, %36
  %40 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %5, i64 0, i32 0
  store %"class.blink::TimingFunction"* %30, %"class.blink::TimingFunction"** %40, align 8
  %41 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %44 = load i32, i32* %43, align 8
  %45 = icmp eq i32 %42, %44
  br i1 %45, label %55, label %46, !prof !2

46:                                               ; preds = %39
  %47 = ptrtoint %"class.blink::CubicBezierTimingFunction"* %29 to i64
  %48 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %7, i64 0, i32 0, i32 0, i32 0
  %49 = load %class.scoped_refptr*, %class.scoped_refptr** %48, align 8
  %50 = zext i32 %42 to i64
  %51 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %49, i64 %50
  %52 = bitcast %class.scoped_refptr* %51 to i64*
  store i64 %47, i64* %52, align 8
  store %"class.blink::TimingFunction"* null, %"class.blink::TimingFunction"** %40, align 8
  %53 = load i32, i32* %41, align 4
  %54 = add i32 %53, 1
  store i32 %54, i32* %41, align 4
  br label %70

55:                                               ; preds = %39
  call void @_ZN3WTF6VectorI13scoped_refptrIN5blink14TimingFunctionEELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS4_EEvOT_(%"class.WTF::Vector.0"* %7, %class.scoped_refptr* nonnull dereferenceable(8) %5) #8
  %56 = load %"class.blink::TimingFunction"*, %"class.blink::TimingFunction"** %40, align 8
  %57 = icmp eq %"class.blink::TimingFunction"* %56, null
  br i1 %57, label %70, label %58

58:                                               ; preds = %55
  %59 = getelementptr inbounds %"class.blink::TimingFunction", %"class.blink::TimingFunction"* %56, i64 0, i32 1, i32 0
  %60 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %59, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %61 = atomicrmw sub i32* %60, i32 1 acq_rel
  %62 = icmp eq i32 %61, 1
  br i1 %62, label %63, label %70

63:                                               ; preds = %58
  %64 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %59, i64 -2
  %65 = bitcast %"class.base::RefCountedThreadSafe"* %64 to %"class.blink::TimingFunction"*
  %66 = bitcast %"class.base::RefCountedThreadSafe"* %64 to void (%"class.blink::TimingFunction"*)***
  %67 = load void (%"class.blink::TimingFunction"*)**, void (%"class.blink::TimingFunction"*)*** %66, align 8
  %68 = getelementptr inbounds void (%"class.blink::TimingFunction"*)*, void (%"class.blink::TimingFunction"*)** %67, i64 1
  %69 = load void (%"class.blink::TimingFunction"*)*, void (%"class.blink::TimingFunction"*)** %68, align 8
  call void %69(%"class.blink::TimingFunction"* nonnull %65) #8
  br label %70

70:                                               ; preds = %46, %55, %58, %63
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13CSSTimingDataC2ERKS0_(%"class.blink::CSSTimingData"*, %"class.blink::CSSTimingData"* dereferenceable(48)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store double* null, double** %5, align 8
  %6 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  store i32 0, i32* %6, align 8
  %7 = icmp eq i32 %4, 0
  br i1 %7, label %17, label %8

8:                                                ; preds = %2
  %9 = zext i32 %4 to i64
  %10 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIdEEmm(i64 %9) #8
  %11 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %10, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIdEEPKcv, i64 0, i64 0)) #8
  %12 = ptrtoint i8* %11 to i64
  %13 = bitcast %"class.blink::CSSTimingData"* %0 to i64*
  store atomic i64 %12, i64* %13 monotonic, align 8
  %14 = lshr i64 %10, 3
  %15 = trunc i64 %14 to i32
  store i32 %15, i32* %6, align 8
  %16 = icmp ne i8* %11, null
  br label %17

17:                                               ; preds = %8, %2
  %18 = phi i8* [ null, %2 ], [ %11, %8 ]
  %19 = phi i1 [ false, %2 ], [ %16, %8 ]
  %20 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %1, i64 0, i32 0, i32 0, i32 0, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  store i32 %21, i32* %22, align 4
  %23 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %24 = load double*, double** %23, align 8
  %25 = icmp ne double* %24, null
  %26 = and i1 %19, %25
  br i1 %26, label %27, label %32, !prof !3

27:                                               ; preds = %17
  %28 = load i32, i32* %20, align 4
  %29 = zext i32 %28 to i64
  %30 = bitcast double* %24 to i8*
  %31 = shl nuw nsw i64 %29, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %18, i8* nonnull align 8 %30, i64 %31, i1 false) #8
  br label %32

32:                                               ; preds = %17, %27
  %33 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %0, i64 0, i32 1
  %34 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %1, i64 0, i32 1, i32 0, i32 0, i32 1
  %35 = load i32, i32* %34, align 8
  %36 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %33, i64 0, i32 0, i32 0, i32 0
  store double* null, double** %36, align 8
  %37 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  store i32 0, i32* %37, align 8
  %38 = icmp eq i32 %35, 0
  br i1 %38, label %48, label %39

39:                                               ; preds = %32
  %40 = zext i32 %35 to i64
  %41 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIdEEmm(i64 %40) #8
  %42 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %41, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIdEEPKcv, i64 0, i64 0)) #8
  %43 = ptrtoint i8* %42 to i64
  %44 = bitcast %"class.WTF::Vector"* %33 to i64*
  store atomic i64 %43, i64* %44 monotonic, align 8
  %45 = lshr i64 %41, 3
  %46 = trunc i64 %45 to i32
  store i32 %46, i32* %37, align 8
  %47 = icmp ne i8* %42, null
  br label %48

48:                                               ; preds = %39, %32
  %49 = phi i8* [ null, %32 ], [ %42, %39 ]
  %50 = phi i1 [ false, %32 ], [ %47, %39 ]
  %51 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %1, i64 0, i32 1, i32 0, i32 0, i32 2
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  store i32 %52, i32* %53, align 4
  %54 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %1, i64 0, i32 1, i32 0, i32 0, i32 0
  %55 = load double*, double** %54, align 8
  %56 = icmp ne double* %55, null
  %57 = and i1 %50, %56
  br i1 %57, label %58, label %63, !prof !3

58:                                               ; preds = %48
  %59 = load i32, i32* %51, align 4
  %60 = zext i32 %59 to i64
  %61 = bitcast double* %55 to i8*
  %62 = shl nuw nsw i64 %60, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %49, i8* nonnull align 8 %61, i64 %62, i1 false) #8
  br label %63

63:                                               ; preds = %48, %58
  %64 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %0, i64 0, i32 2
  %65 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %1, i64 0, i32 2
  tail call void @_ZN3WTF6VectorI13scoped_refptrIN5blink14TimingFunctionEELj0ENS_18PartitionAllocatorEEC2ERKS6_(%"class.WTF::Vector.0"* %64, %"class.WTF::Vector.0"* dereferenceable(16) %65)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorI13scoped_refptrIN5blink14TimingFunctionEELj0ENS_18PartitionAllocatorEEC2ERKS6_(%"class.WTF::Vector.0"*, %"class.WTF::Vector.0"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %1, i64 0, i32 0, i32 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 0
  store %class.scoped_refptr* null, %class.scoped_refptr** %6, align 8
  %7 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %7, align 8
  %8 = icmp eq i32 %5, 0
  br i1 %8, label %18, label %9

9:                                                ; preds = %2
  %10 = zext i32 %5 to i64
  %11 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeI13scoped_refptrIN5blink14TimingFunctionEEEEmm(i64 %10) #8
  %12 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %11, i8* getelementptr inbounds ([84 x i8], [84 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameI13scoped_refptrIN5blink14TimingFunctionEEEEPKcv, i64 0, i64 0)) #8
  %13 = ptrtoint i8* %12 to i64
  %14 = bitcast %"class.WTF::Vector.0"* %0 to i64*
  store atomic i64 %13, i64* %14 monotonic, align 8
  %15 = lshr i64 %11, 3
  %16 = trunc i64 %15 to i32
  store i32 %16, i32* %7, align 8
  %17 = bitcast i8* %12 to %class.scoped_refptr*
  br label %18

18:                                               ; preds = %2, %9
  %19 = phi %class.scoped_refptr* [ null, %2 ], [ %17, %9 ]
  %20 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %1, i64 0, i32 0, i32 0, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 2
  store i32 %21, i32* %22, align 4
  %23 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %1, i64 0, i32 0, i32 0, i32 0
  %24 = load %class.scoped_refptr*, %class.scoped_refptr** %23, align 8
  %25 = load i32, i32* %20, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %24, i64 %26
  %28 = icmp eq i32 %25, 0
  br i1 %28, label %48, label %29

29:                                               ; preds = %18
  %30 = bitcast %"class.logging::CheckError"* %3 to i8*
  br label %31

31:                                               ; preds = %44, %29
  %32 = phi %class.scoped_refptr* [ %19, %29 ], [ %45, %44 ]
  %33 = phi %class.scoped_refptr* [ %24, %29 ], [ %46, %44 ]
  %34 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %33, i64 0, i32 0
  %35 = load %"class.blink::TimingFunction"*, %"class.blink::TimingFunction"** %34, align 8
  %36 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %32, i64 0, i32 0
  store %"class.blink::TimingFunction"* %35, %"class.blink::TimingFunction"** %36, align 8
  %37 = icmp eq %"class.blink::TimingFunction"* %35, null
  br i1 %37, label %44, label %38

38:                                               ; preds = %31
  %39 = getelementptr inbounds %"class.blink::TimingFunction", %"class.blink::TimingFunction"* %35, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = atomicrmw add i32* %39, i32 1 monotonic
  %41 = icmp sgt i32 %40, 0
  br i1 %41, label %44, label %42

42:                                               ; preds = %38
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #8
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0), i32 211, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0)) #8
  %43 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #8
  br label %44

44:                                               ; preds = %42, %38, %31
  %45 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %32, i64 1
  %46 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %33, i64 1
  %47 = icmp eq %class.scoped_refptr* %46, %27
  br i1 %47, label %48, label %31

48:                                               ; preds = %44, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink13CSSTimingData15ConvertToTimingEm(%"struct.blink::Timing"* noalias nocapture sret, %"class.blink::CSSTimingData"*, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"struct.blink::Timing"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 bitcast (<{ %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta", i32, [4 x i8], double, double, { { { { i8, [7 x i8], %union.anon } } } }, i32, [4 x i8], %class.scoped_refptr, i16, [6 x i8] }>* @__const._ZNK5blink13CSSTimingData15ConvertToTimingEm.timing to i8*), i64 80, i1 false)
  %7 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 2
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 16, i1 false) #8
  store i32 4, i32* %7, align 8
  %8 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 4
  %9 = bitcast double* %8 to <2 x double>*
  store <2 x double> <double 0.000000e+00, double 1.000000e+00>, <2 x double>* %9, align 8
  %10 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %10, align 8
  %11 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 7
  store i32 0, i32* %11, align 8
  %12 = tail call %"class.blink::LinearTimingFunction"* @_ZN5blink20LinearTimingFunction6SharedEv() #8
  %13 = getelementptr inbounds %"class.blink::LinearTimingFunction", %"class.blink::LinearTimingFunction"* %12, i64 0, i32 0
  %14 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 9, i32 0
  store %"class.blink::TimingFunction"* %13, %"class.blink::TimingFunction"** %14, align 8
  %15 = icmp eq %"class.blink::LinearTimingFunction"* %12, null
  br i1 %15, label %23, label %16

16:                                               ; preds = %3
  %17 = getelementptr inbounds %"class.blink::LinearTimingFunction", %"class.blink::LinearTimingFunction"* %12, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = atomicrmw add i32* %17, i32 1 monotonic
  %19 = icmp sgt i32 %18, 0
  br i1 %19, label %23, label %20

20:                                               ; preds = %16
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #8
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0), i32 211, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0)) #8
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #8
  br label %23

23:                                               ; preds = %3, %16, %20
  %24 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 10
  store i16 0, i16* %24, align 8
  %25 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %1, i64 0, i32 0
  %26 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %1, i64 0, i32 0, i32 0, i32 0, i32 2
  %27 = load i32, i32* %26, align 4
  %28 = zext i32 %27 to i64
  %29 = urem i64 %2, %28
  %30 = trunc i64 %29 to i32
  %31 = call dereferenceable(8) double* @_ZNK3WTF6VectorIdLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %25, i32 %30) #8
  %32 = bitcast double* %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = bitcast %"struct.blink::Timing"* %0 to i64*
  store i64 %33, i64* %34, align 8
  %35 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %1, i64 0, i32 1
  %36 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %1, i64 0, i32 1, i32 0, i32 0, i32 2
  %37 = load i32, i32* %36, align 4
  %38 = zext i32 %37 to i64
  %39 = urem i64 %2, %38
  %40 = trunc i64 %39 to i32
  %41 = call dereferenceable(8) double* @_ZNK3WTF6VectorIdLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %35, i32 %40) #8
  %42 = load double, double* %41, align 8
  %43 = fcmp ord double %42, 0.000000e+00
  %44 = zext i1 %43 to i8
  store i8 %44, i8* %10, align 8
  %45 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store double %42, double* %45, align 8
  %46 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %1, i64 0, i32 2
  %47 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %1, i64 0, i32 2, i32 0, i32 0, i32 2
  %48 = load i32, i32* %47, align 4
  %49 = zext i32 %48 to i64
  %50 = urem i64 %2, %49
  %51 = trunc i64 %50 to i32
  %52 = call dereferenceable(8) %class.scoped_refptr* @_ZNK3WTF6VectorI13scoped_refptrIN5blink14TimingFunctionEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"* %46, i32 %51) #8
  %53 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %52, i64 0, i32 0
  %54 = load %"class.blink::TimingFunction"*, %"class.blink::TimingFunction"** %53, align 8
  %55 = icmp eq %"class.blink::TimingFunction"* %54, null
  br i1 %55, label %63, label %56

56:                                               ; preds = %23
  %57 = getelementptr inbounds %"class.blink::TimingFunction", %"class.blink::TimingFunction"* %54, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = atomicrmw add i32* %57, i32 1 monotonic
  %59 = icmp sgt i32 %58, 0
  br i1 %59, label %63, label %60

60:                                               ; preds = %56
  %61 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %61) #8
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0), i32 211, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0)) #8
  %62 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %61) #8
  br label %63

63:                                               ; preds = %23, %56, %60
  %64 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 9
  %65 = ptrtoint %"class.blink::TimingFunction"* %54 to i64
  %66 = bitcast %class.scoped_refptr* %64 to i64*
  store i64 %65, i64* %66, align 8
  %67 = icmp eq %"class.blink::LinearTimingFunction"* %12, null
  br i1 %67, label %80, label %68

68:                                               ; preds = %63
  %69 = getelementptr inbounds %"class.blink::LinearTimingFunction", %"class.blink::LinearTimingFunction"* %12, i64 0, i32 0, i32 1, i32 0
  %70 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %69, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %71 = atomicrmw sub i32* %70, i32 1 acq_rel
  %72 = icmp eq i32 %71, 1
  br i1 %72, label %73, label %80

73:                                               ; preds = %68
  %74 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %69, i64 -2
  %75 = bitcast %"class.base::RefCountedThreadSafe"* %74 to %"class.blink::TimingFunction"*
  %76 = bitcast %"class.base::RefCountedThreadSafe"* %74 to void (%"class.blink::TimingFunction"*)***
  %77 = load void (%"class.blink::TimingFunction"*)**, void (%"class.blink::TimingFunction"*)*** %76, align 8
  %78 = getelementptr inbounds void (%"class.blink::TimingFunction"*)*, void (%"class.blink::TimingFunction"*)** %77, i64 1
  %79 = load void (%"class.blink::TimingFunction"*)*, void (%"class.blink::TimingFunction"*)** %78, align 8
  call void %79(%"class.blink::TimingFunction"* nonnull %75) #8
  br label %80

80:                                               ; preds = %63, %68, %73
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink13CSSTimingData25TimingMatchForStyleRecalcERKS0_(%"class.blink::CSSTimingData"*, %"class.blink::CSSTimingData"* dereferenceable(48)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %1, i64 0, i32 0, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %4, %6
  br i1 %7, label %8, label %67

8:                                                ; preds = %2
  %9 = icmp eq i32 %4, 0
  br i1 %9, label %19, label %10

10:                                               ; preds = %8
  %11 = bitcast %"class.blink::CSSTimingData"* %0 to i8**
  %12 = load i8*, i8** %11, align 8
  %13 = bitcast %"class.blink::CSSTimingData"* %1 to i8**
  %14 = load i8*, i8** %13, align 8
  %15 = zext i32 %4 to i64
  %16 = shl nuw nsw i64 %15, 3
  %17 = tail call i32 @bcmp(i8* %12, i8* %14, i64 %16) #8
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %67

19:                                               ; preds = %10, %8
  %20 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %0, i64 0, i32 1
  %21 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %1, i64 0, i32 1
  %22 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %1, i64 0, i32 1, i32 0, i32 0, i32 2
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %23, %25
  br i1 %26, label %27, label %67

27:                                               ; preds = %19
  %28 = icmp eq i32 %23, 0
  br i1 %28, label %38, label %29

29:                                               ; preds = %27
  %30 = bitcast %"class.WTF::Vector"* %20 to i8**
  %31 = load i8*, i8** %30, align 8
  %32 = bitcast %"class.WTF::Vector"* %21 to i8**
  %33 = load i8*, i8** %32, align 8
  %34 = zext i32 %23 to i64
  %35 = shl nuw nsw i64 %34, 3
  %36 = tail call i32 @bcmp(i8* %31, i8* %33, i64 %35) #8
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %67

38:                                               ; preds = %29, %27
  %39 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %0, i64 0, i32 2
  %40 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %1, i64 0, i32 2
  %43 = getelementptr inbounds %"class.blink::CSSTimingData", %"class.blink::CSSTimingData"* %1, i64 0, i32 2, i32 0, i32 0, i32 2
  %44 = load i32, i32* %43, align 4
  %45 = icmp eq i32 %41, %44
  br i1 %45, label %46, label %67

46:                                               ; preds = %38
  %47 = icmp eq i32 %41, 0
  br i1 %47, label %67, label %48

48:                                               ; preds = %46, %63
  %49 = phi i32 [ %64, %63 ], [ 0, %46 ]
  %50 = tail call dereferenceable(8) %class.scoped_refptr* @_ZNK3WTF6VectorI13scoped_refptrIN5blink14TimingFunctionEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"* %39, i32 %49)
  %51 = tail call dereferenceable(8) %class.scoped_refptr* @_ZNK3WTF6VectorI13scoped_refptrIN5blink14TimingFunctionEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"* %42, i32 %49)
  %52 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %50, i64 0, i32 0
  %53 = load %"class.blink::TimingFunction"*, %"class.blink::TimingFunction"** %52, align 8
  %54 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %51, i64 0, i32 0
  %55 = load %"class.blink::TimingFunction"*, %"class.blink::TimingFunction"** %54, align 8
  %56 = icmp eq %"class.blink::TimingFunction"* %53, %55
  br i1 %56, label %63, label %57

57:                                               ; preds = %48
  %58 = icmp ne %"class.blink::TimingFunction"* %53, null
  %59 = icmp ne %"class.blink::TimingFunction"* %55, null
  %60 = and i1 %58, %59
  br i1 %60, label %61, label %67

61:                                               ; preds = %57
  %62 = tail call zeroext i1 @_ZN5blinkeqERKNS_14TimingFunctionES2_(%"class.blink::TimingFunction"* nonnull dereferenceable(16) %53, %"class.blink::TimingFunction"* nonnull dereferenceable(16) %55) #8
  br i1 %62, label %63, label %67

63:                                               ; preds = %48, %61
  %64 = add nuw i32 %49, 1
  %65 = load i32, i32* %40, align 4
  %66 = icmp ult i32 %64, %65
  br i1 %66, label %48, label %67

67:                                               ; preds = %63, %61, %57, %46, %29, %10, %38, %2, %19
  %68 = phi i1 [ false, %19 ], [ false, %2 ], [ false, %38 ], [ false, %29 ], [ false, %10 ], [ true, %46 ], [ true, %63 ], [ false, %61 ], [ false, %57 ]
  ret i1 %68
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %class.scoped_refptr* @_ZNK3WTF6VectorI13scoped_refptrIN5blink14TimingFunctionEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #8
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #8
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i8* %14, i8* %15) #8
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.2, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #8
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #8
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #8
  %23 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %class.scoped_refptr*, %class.scoped_refptr** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %24, i64 %25
  ret %class.scoped_refptr* %26
}

declare %"class.blink::CubicBezierTimingFunction"* @_ZN5blink25CubicBezierTimingFunction6PresetEN3gfx25CubicBezierTimingFunction8EaseTypeE(i32) local_unnamed_addr #2

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::LinearTimingFunction"* @_ZN5blink20LinearTimingFunction6SharedEv() local_unnamed_addr #0 comdat align 2 {
  %1 = alloca %"class.logging::CheckError", align 8
  %2 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink20LinearTimingFunction6SharedEvE6linear to i8*) acquire, align 8
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %4, label %31, !prof !4

4:                                                ; preds = %0
  %5 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink20LinearTimingFunction6SharedEvE6linear) #8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %31, label %7

7:                                                ; preds = %4
  %8 = tail call noalias i8* @malloc(i64 16) #8
  %9 = getelementptr inbounds i8, i8* %8, i64 8
  %10 = bitcast i8* %9 to i32*
  store i32 1, i32* %10, align 4
  %11 = bitcast i8* %8 to i32 (...)***
  %12 = getelementptr inbounds i8, i8* %8, i64 12
  %13 = bitcast i8* %12 to i32*
  store i32 0, i32* %13, align 4
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN5blink20LinearTimingFunctionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8
  %14 = icmp eq i8* %8, null
  br i1 %14, label %30, label %15

15:                                               ; preds = %7
  %16 = atomicrmw add i32* %10, i32 1 monotonic
  %17 = icmp sgt i32 %16, 0
  br i1 %17, label %21, label %18

18:                                               ; preds = %15
  %19 = bitcast %"class.logging::CheckError"* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #8
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %1, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0), i32 211, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0)) #8
  %20 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %1) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %1) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #8
  br label %21

21:                                               ; preds = %18, %15
  %22 = atomicrmw sub i32* %10, i32 1 acq_rel
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %24, label %30

24:                                               ; preds = %21
  %25 = bitcast i8* %8 to %"class.blink::TimingFunction"*
  %26 = bitcast i8* %8 to void (%"class.blink::TimingFunction"*)***
  %27 = load void (%"class.blink::TimingFunction"*)**, void (%"class.blink::TimingFunction"*)*** %26, align 8
  %28 = getelementptr inbounds void (%"class.blink::TimingFunction"*)*, void (%"class.blink::TimingFunction"*)** %27, i64 1
  %29 = load void (%"class.blink::TimingFunction"*)*, void (%"class.blink::TimingFunction"*)** %28, align 8
  call void %29(%"class.blink::TimingFunction"* nonnull %25) #8
  br label %30

30:                                               ; preds = %7, %21, %24
  store i8* %8, i8** bitcast (%"class.blink::LinearTimingFunction"** @_ZZN5blink20LinearTimingFunction6SharedEvE6linear to i8**), align 8
  call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink20LinearTimingFunction6SharedEvE6linear) #8
  br label %31

31:                                               ; preds = %4, %30, %0
  %32 = load %"class.blink::LinearTimingFunction"*, %"class.blink::LinearTimingFunction"** @_ZZN5blink20LinearTimingFunction6SharedEvE6linear, align 8
  ret %"class.blink::LinearTimingFunction"* %32
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #5

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIdLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIdEEvOT_(%"class.WTF::Vector"*, double* dereferenceable(8)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load double*, double** %6, align 8
  %8 = icmp ugt double* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds double, double* %7, i64 %10
  %12 = icmp ugt double* %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !3

24:                                               ; preds = %13
  %25 = icmp eq double* %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIdEEmm(i64 %26) #8
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIdEEPKcv, i64 0, i64 0)) #8
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 3
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to double*
  br label %99

35:                                               ; preds = %24
  %36 = lshr i64 %27, 3
  %37 = ptrtoint i8* %28 to i64
  %38 = load double*, double** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne double* %38, null
  %41 = and i1 %39, %40
  %42 = bitcast double* %38 to i8*
  br i1 %41, label %43, label %49, !prof !3

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* nonnull align 8 %42, i64 %46, i1 false) #8
  %47 = bitcast %"class.WTF::Vector"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #8
  %51 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to double*
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint double* %1 to i64
  %56 = ptrtoint double* %7 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 3
  %59 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !3

69:                                               ; preds = %54
  %70 = icmp eq double* %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIdEEmm(i64 %71) #8
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIdEEPKcv, i64 0, i64 0)) #8
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load double*, double** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne double* %78, null
  %81 = and i1 %79, %80
  %82 = bitcast double* %78 to i8*
  br i1 %81, label %83, label %89, !prof !3

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %73, i8* nonnull align 8 %82, i64 %86, i1 false) #8
  %87 = bitcast %"class.WTF::Vector"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #8
  %91 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = lshr i64 %72, 3
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to double*
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi double* [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds double, double* %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi double* [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi double* [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds double, double* %100, i64 %103
  %105 = bitcast double* %101 to i64*
  %106 = load i64, i64* %105, align 8
  %107 = bitcast double* %104 to i64*
  store i64 %106, i64* %107, align 8
  %108 = load i32, i32* %3, align 4
  %109 = add i32 %108, 1
  store i32 %109, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIdEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #8
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.4, i64 0, i64 0), i8* %11, i8* %12) #8
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.5, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #8
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #8
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorI13scoped_refptrIN5blink14TimingFunctionEELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS4_EEvOT_(%"class.WTF::Vector.0"*, %class.scoped_refptr* dereferenceable(8)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %class.scoped_refptr*, %class.scoped_refptr** %6, align 8
  %8 = icmp ugt %class.scoped_refptr* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %7, i64 %10
  %12 = icmp ugt %class.scoped_refptr* %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !3

24:                                               ; preds = %13
  %25 = icmp eq %class.scoped_refptr* %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeI13scoped_refptrIN5blink14TimingFunctionEEEEmm(i64 %26) #8
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([84 x i8], [84 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameI13scoped_refptrIN5blink14TimingFunctionEEEEPKcv, i64 0, i64 0)) #8
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector.0"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 3
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to %class.scoped_refptr*
  br label %99

35:                                               ; preds = %24
  %36 = lshr i64 %27, 3
  %37 = ptrtoint i8* %28 to i64
  %38 = load %class.scoped_refptr*, %class.scoped_refptr** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne %class.scoped_refptr* %38, null
  %41 = and i1 %39, %40
  %42 = bitcast %class.scoped_refptr* %38 to i8*
  br i1 %41, label %43, label %49, !prof !3

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* nonnull align 8 %42, i64 %46, i1 false) #8
  %47 = bitcast %"class.WTF::Vector.0"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #8
  %51 = bitcast %"class.WTF::Vector.0"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to %class.scoped_refptr*
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint %class.scoped_refptr* %1 to i64
  %56 = ptrtoint %class.scoped_refptr* %7 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 3
  %59 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !3

69:                                               ; preds = %54
  %70 = icmp eq %class.scoped_refptr* %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeI13scoped_refptrIN5blink14TimingFunctionEEEEmm(i64 %71) #8
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([84 x i8], [84 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameI13scoped_refptrIN5blink14TimingFunctionEEEEPKcv, i64 0, i64 0)) #8
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector.0"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load %class.scoped_refptr*, %class.scoped_refptr** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne %class.scoped_refptr* %78, null
  %81 = and i1 %79, %80
  %82 = bitcast %class.scoped_refptr* %78 to i8*
  br i1 %81, label %83, label %89, !prof !3

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %73, i8* nonnull align 8 %82, i64 %86, i1 false) #8
  %87 = bitcast %"class.WTF::Vector.0"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #8
  %91 = bitcast %"class.WTF::Vector.0"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = lshr i64 %72, 3
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to %class.scoped_refptr*
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi %class.scoped_refptr* [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi %class.scoped_refptr* [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi %class.scoped_refptr* [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %100, i64 %103
  %105 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %101, i64 0, i32 0
  %106 = bitcast %class.scoped_refptr* %101 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = bitcast %class.scoped_refptr* %104 to i64*
  store i64 %107, i64* %108, align 8
  store %"class.blink::TimingFunction"* null, %"class.blink::TimingFunction"** %105, align 8
  %109 = load i32, i32* %3, align 4
  %110 = add i32 %109, 1
  store i32 %110, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeI13scoped_refptrIN5blink14TimingFunctionEEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #8
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.4, i64 0, i64 0), i8* %11, i8* %12) #8
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.5, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #8
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #8
  ret i64 %21
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) double* @_ZNK3WTF6VectorIdLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #8
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #8
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i8* %14, i8* %15) #8
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.2, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #8
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #8
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #8
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load double*, double** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds double, double* %24, i64 %25
  ret double* %26
}

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #2

declare zeroext i1 @_ZN5blinkeqERKNS_14TimingFunctionES2_(%"class.blink::TimingFunction"* dereferenceable(16), %"class.blink::TimingFunction"* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind readonly }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{!"branch_weights", i32 1, i32 1048575}
