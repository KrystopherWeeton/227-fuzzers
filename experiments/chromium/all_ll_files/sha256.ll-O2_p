; ModuleID = '../../third_party/unrar/src/sha256.cpp'
source_filename = "../../third_party/unrar/src/sha256.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"
module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%struct.sha256_context = type { [8 x i32], i64, [64 x i8] }

@_ZL1K = internal unnamed_addr constant [64 x i32] [i32 1116352408, i32 1899447441, i32 -1245643825, i32 -373957723, i32 961987163, i32 1508970993, i32 -1841331548, i32 -1424204075, i32 -670586216, i32 310598401, i32 607225278, i32 1426881987, i32 1925078388, i32 -2132889090, i32 -1680079193, i32 -1046744716, i32 -459576895, i32 -272742522, i32 264347078, i32 604807628, i32 770255983, i32 1249150122, i32 1555081692, i32 1996064986, i32 -1740746414, i32 -1473132947, i32 -1341970488, i32 -1084653625, i32 -958395405, i32 -710438585, i32 113926993, i32 338241895, i32 666307205, i32 773529912, i32 1294757372, i32 1396182291, i32 1695183700, i32 1986661051, i32 -2117940946, i32 -1838011259, i32 -1564481375, i32 -1474664885, i32 -1035236496, i32 -949202525, i32 -778901479, i32 -694614492, i32 -200395387, i32 275423344, i32 430227734, i32 506948616, i32 659060556, i32 883997877, i32 958139571, i32 1322822218, i32 1537002063, i32 1747873779, i32 1955562222, i32 2024104815, i32 -2067236844, i32 -1933114872, i32 -1866530822, i32 -1538233109, i32 -1090935817, i32 -965641998], align 16

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_Z11sha256_initP14sha256_context(%struct.sha256_context* nocapture) local_unnamed_addr #0 {
  %2 = bitcast %struct.sha256_context* %0 to <4 x i32>*
  store <4 x i32> <i32 1779033703, i32 -1150833019, i32 1013904242, i32 -1521486534>, <4 x i32>* %2, align 8
  %3 = getelementptr inbounds %struct.sha256_context, %struct.sha256_context* %0, i64 0, i32 0, i64 4
  %4 = bitcast i32* %3 to <4 x i32>*
  store <4 x i32> <i32 1359893119, i32 -1694144372, i32 528734635, i32 1541459225>, <4 x i32>* %4, align 8
  %5 = getelementptr inbounds %struct.sha256_context, %struct.sha256_context* %0, i64 0, i32 1
  store i64 0, i64* %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z14sha256_processP14sha256_contextPKvm(%struct.sha256_context* nocapture, i8* nocapture readonly, i64) local_unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.sha256_context, %struct.sha256_context* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, %2
  store i64 %6, i64* %4, align 8
  %7 = icmp eq i64 %2, 0
  br i1 %7, label %26, label %8

8:                                                ; preds = %3
  %9 = and i64 %5, 63
  br label %10

10:                                               ; preds = %8, %23
  %11 = phi i64 [ %20, %23 ], [ %2, %8 ]
  %12 = phi i8* [ %18, %23 ], [ %1, %8 ]
  %13 = phi i64 [ %24, %23 ], [ %9, %8 ]
  %14 = sub i64 64, %13
  %15 = icmp ugt i64 %11, %14
  %16 = select i1 %15, i64 %14, i64 %11
  %17 = getelementptr inbounds %struct.sha256_context, %struct.sha256_context* %0, i64 0, i32 2, i64 %13
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* align 1 %12, i64 %16, i1 false)
  %18 = getelementptr inbounds i8, i8* %12, i64 %16
  %19 = add i64 %16, %13
  %20 = sub i64 %11, %16
  %21 = icmp eq i64 %19, 64
  br i1 %21, label %22, label %23

22:                                               ; preds = %10
  tail call fastcc void @_ZL16sha256_transformP14sha256_context(%struct.sha256_context* %0)
  br label %23

23:                                               ; preds = %22, %10
  %24 = phi i64 [ 0, %22 ], [ %19, %10 ]
  %25 = icmp eq i64 %20, 0
  br i1 %25, label %26, label %10

26:                                               ; preds = %23, %3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZL16sha256_transformP14sha256_context(%struct.sha256_context* nocapture) unnamed_addr #1 {
  %2 = alloca [64 x i32], align 16
  %3 = bitcast [64 x i32]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %3) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %3, i8 -86, i64 256, i1 false)
  %4 = getelementptr inbounds %struct.sha256_context, %struct.sha256_context* %0, i64 0, i32 2, i64 0
  %5 = bitcast i8* %4 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 1
  %7 = shufflevector <16 x i8> %6, <16 x i8> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %8 = shufflevector <16 x i8> %6, <16 x i8> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %9 = shufflevector <16 x i8> %6, <16 x i8> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %10 = shufflevector <16 x i8> %6, <16 x i8> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %11 = zext <4 x i8> %7 to <4 x i32>
  %12 = shl nuw <4 x i32> %11, <i32 24, i32 24, i32 24, i32 24>
  %13 = zext <4 x i8> %8 to <4 x i32>
  %14 = shl nuw nsw <4 x i32> %13, <i32 16, i32 16, i32 16, i32 16>
  %15 = or <4 x i32> %14, %12
  %16 = zext <4 x i8> %9 to <4 x i32>
  %17 = shl nuw nsw <4 x i32> %16, <i32 8, i32 8, i32 8, i32 8>
  %18 = or <4 x i32> %15, %17
  %19 = zext <4 x i8> %10 to <4 x i32>
  %20 = or <4 x i32> %18, %19
  %21 = bitcast [64 x i32]* %2 to <4 x i32>*
  store <4 x i32> %20, <4 x i32>* %21, align 16
  %22 = getelementptr inbounds %struct.sha256_context, %struct.sha256_context* %0, i64 0, i32 2, i64 16
  %23 = bitcast i8* %22 to <16 x i8>*
  %24 = load <16 x i8>, <16 x i8>* %23, align 1
  %25 = shufflevector <16 x i8> %24, <16 x i8> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %26 = shufflevector <16 x i8> %24, <16 x i8> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %27 = shufflevector <16 x i8> %24, <16 x i8> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %28 = shufflevector <16 x i8> %24, <16 x i8> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %29 = zext <4 x i8> %25 to <4 x i32>
  %30 = shl nuw <4 x i32> %29, <i32 24, i32 24, i32 24, i32 24>
  %31 = zext <4 x i8> %26 to <4 x i32>
  %32 = shl nuw nsw <4 x i32> %31, <i32 16, i32 16, i32 16, i32 16>
  %33 = or <4 x i32> %32, %30
  %34 = zext <4 x i8> %27 to <4 x i32>
  %35 = shl nuw nsw <4 x i32> %34, <i32 8, i32 8, i32 8, i32 8>
  %36 = or <4 x i32> %33, %35
  %37 = zext <4 x i8> %28 to <4 x i32>
  %38 = or <4 x i32> %36, %37
  %39 = getelementptr inbounds [64 x i32], [64 x i32]* %2, i64 0, i64 4
  %40 = bitcast i32* %39 to <4 x i32>*
  store <4 x i32> %38, <4 x i32>* %40, align 16
  %41 = getelementptr inbounds %struct.sha256_context, %struct.sha256_context* %0, i64 0, i32 2, i64 32
  %42 = bitcast i8* %41 to <16 x i8>*
  %43 = load <16 x i8>, <16 x i8>* %42, align 1
  %44 = shufflevector <16 x i8> %43, <16 x i8> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %45 = shufflevector <16 x i8> %43, <16 x i8> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %46 = shufflevector <16 x i8> %43, <16 x i8> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %47 = shufflevector <16 x i8> %43, <16 x i8> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %48 = zext <4 x i8> %44 to <4 x i32>
  %49 = shl nuw <4 x i32> %48, <i32 24, i32 24, i32 24, i32 24>
  %50 = zext <4 x i8> %45 to <4 x i32>
  %51 = shl nuw nsw <4 x i32> %50, <i32 16, i32 16, i32 16, i32 16>
  %52 = or <4 x i32> %51, %49
  %53 = zext <4 x i8> %46 to <4 x i32>
  %54 = shl nuw nsw <4 x i32> %53, <i32 8, i32 8, i32 8, i32 8>
  %55 = or <4 x i32> %52, %54
  %56 = zext <4 x i8> %47 to <4 x i32>
  %57 = or <4 x i32> %55, %56
  %58 = getelementptr inbounds [64 x i32], [64 x i32]* %2, i64 0, i64 8
  %59 = bitcast i32* %58 to <4 x i32>*
  store <4 x i32> %57, <4 x i32>* %59, align 16
  %60 = getelementptr inbounds %struct.sha256_context, %struct.sha256_context* %0, i64 0, i32 2, i64 48
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1
  %63 = shufflevector <16 x i8> %62, <16 x i8> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %64 = shufflevector <16 x i8> %62, <16 x i8> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %65 = shufflevector <16 x i8> %62, <16 x i8> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %66 = shufflevector <16 x i8> %62, <16 x i8> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %67 = zext <4 x i8> %63 to <4 x i32>
  %68 = shl nuw <4 x i32> %67, <i32 24, i32 24, i32 24, i32 24>
  %69 = zext <4 x i8> %64 to <4 x i32>
  %70 = shl nuw nsw <4 x i32> %69, <i32 16, i32 16, i32 16, i32 16>
  %71 = or <4 x i32> %70, %68
  %72 = zext <4 x i8> %65 to <4 x i32>
  %73 = shl nuw nsw <4 x i32> %72, <i32 8, i32 8, i32 8, i32 8>
  %74 = or <4 x i32> %71, %73
  %75 = zext <4 x i8> %66 to <4 x i32>
  %76 = or <4 x i32> %74, %75
  %77 = getelementptr inbounds [64 x i32], [64 x i32]* %2, i64 0, i64 12
  %78 = bitcast i32* %77 to <4 x i32>*
  store <4 x i32> %76, <4 x i32>* %78, align 16
  %79 = getelementptr inbounds [64 x i32], [64 x i32]* %2, i64 0, i64 0
  %80 = load i32, i32* %79, align 16
  br label %95

81:                                               ; preds = %95
  %82 = bitcast %struct.sha256_context* %0 to <4 x i32>*
  %83 = load <4 x i32>, <4 x i32>* %82, align 4
  %84 = getelementptr inbounds %struct.sha256_context, %struct.sha256_context* %0, i64 0, i32 0, i64 4
  %85 = bitcast i32* %84 to <4 x i32>*
  %86 = load <4 x i32>, <4 x i32>* %85, align 4
  %87 = extractelement <4 x i32> %83, i32 0
  %88 = extractelement <4 x i32> %83, i32 1
  %89 = extractelement <4 x i32> %83, i32 2
  %90 = extractelement <4 x i32> %83, i32 3
  %91 = extractelement <4 x i32> %86, i32 0
  %92 = extractelement <4 x i32> %86, i32 1
  %93 = extractelement <4 x i32> %86, i32 2
  %94 = extractelement <4 x i32> %86, i32 3
  br label %144

95:                                               ; preds = %95, %1
  %96 = phi i32 [ %80, %1 ], [ %115, %95 ]
  %97 = phi i64 [ 16, %1 ], [ %129, %95 ]
  %98 = add nsw i64 %97, -2
  %99 = getelementptr inbounds [64 x i32], [64 x i32]* %2, i64 0, i64 %98
  %100 = load i32, i32* %99, align 4
  %101 = lshr i32 %100, 17
  %102 = shl i32 %100, 15
  %103 = or i32 %101, %102
  %104 = lshr i32 %100, 19
  %105 = shl i32 %100, 13
  %106 = or i32 %104, %105
  %107 = lshr i32 %100, 10
  %108 = xor i32 %106, %107
  %109 = xor i32 %108, %103
  %110 = add nsw i64 %97, -7
  %111 = getelementptr inbounds [64 x i32], [64 x i32]* %2, i64 0, i64 %110
  %112 = load i32, i32* %111, align 4
  %113 = add nsw i64 %97, -15
  %114 = getelementptr inbounds [64 x i32], [64 x i32]* %2, i64 0, i64 %113
  %115 = load i32, i32* %114, align 4
  %116 = lshr i32 %115, 7
  %117 = shl i32 %115, 25
  %118 = or i32 %116, %117
  %119 = lshr i32 %115, 18
  %120 = shl i32 %115, 14
  %121 = or i32 %119, %120
  %122 = lshr i32 %115, 3
  %123 = xor i32 %121, %122
  %124 = xor i32 %123, %118
  %125 = add i32 %96, %112
  %126 = add i32 %125, %109
  %127 = add i32 %126, %124
  %128 = getelementptr inbounds [64 x i32], [64 x i32]* %2, i64 0, i64 %97
  store i32 %127, i32* %128, align 4
  %129 = add nuw nsw i64 %97, 1
  %130 = icmp eq i64 %129, 64
  br i1 %130, label %81, label %95

131:                                              ; preds = %144
  %132 = insertelement <4 x i32> undef, i32 %194, i32 0
  %133 = insertelement <4 x i32> %132, i32 %148, i32 1
  %134 = insertelement <4 x i32> %133, i32 %149, i32 2
  %135 = insertelement <4 x i32> %134, i32 %150, i32 3
  %136 = add <4 x i32> %135, %83
  %137 = bitcast %struct.sha256_context* %0 to <4 x i32>*
  store <4 x i32> %136, <4 x i32>* %137, align 4
  %138 = insertelement <4 x i32> undef, i32 %177, i32 0
  %139 = insertelement <4 x i32> %138, i32 %152, i32 1
  %140 = insertelement <4 x i32> %139, i32 %153, i32 2
  %141 = insertelement <4 x i32> %140, i32 %147, i32 3
  %142 = add <4 x i32> %141, %86
  %143 = bitcast i32* %84 to <4 x i32>*
  store <4 x i32> %142, <4 x i32>* %143, align 4
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %3) #3
  ret void

144:                                              ; preds = %144, %81
  %145 = phi i64 [ 0, %81 ], [ %195, %144 ]
  %146 = phi i32 [ %94, %81 ], [ %147, %144 ]
  %147 = phi i32 [ %93, %81 ], [ %153, %144 ]
  %148 = phi i32 [ %87, %81 ], [ %194, %144 ]
  %149 = phi i32 [ %88, %81 ], [ %148, %144 ]
  %150 = phi i32 [ %89, %81 ], [ %149, %144 ]
  %151 = phi i32 [ %90, %81 ], [ %150, %144 ]
  %152 = phi i32 [ %91, %81 ], [ %177, %144 ]
  %153 = phi i32 [ %92, %81 ], [ %152, %144 ]
  %154 = lshr i32 %152, 6
  %155 = shl i32 %152, 26
  %156 = or i32 %154, %155
  %157 = lshr i32 %152, 11
  %158 = shl i32 %152, 21
  %159 = or i32 %157, %158
  %160 = xor i32 %156, %159
  %161 = lshr i32 %152, 25
  %162 = shl i32 %152, 7
  %163 = or i32 %161, %162
  %164 = xor i32 %160, %163
  %165 = add i32 %146, %164
  %166 = and i32 %152, %153
  %167 = xor i32 %152, -1
  %168 = and i32 %147, %167
  %169 = or i32 %168, %166
  %170 = add i32 %165, %169
  %171 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZL1K, i64 0, i64 %145
  %172 = load i32, i32* %171, align 4
  %173 = add i32 %170, %172
  %174 = getelementptr inbounds [64 x i32], [64 x i32]* %2, i64 0, i64 %145
  %175 = load i32, i32* %174, align 4
  %176 = add i32 %173, %175
  %177 = add i32 %176, %151
  %178 = lshr i32 %148, 2
  %179 = shl i32 %148, 30
  %180 = or i32 %178, %179
  %181 = lshr i32 %148, 13
  %182 = shl i32 %148, 19
  %183 = or i32 %181, %182
  %184 = xor i32 %180, %183
  %185 = lshr i32 %148, 22
  %186 = shl i32 %148, 10
  %187 = or i32 %185, %186
  %188 = xor i32 %184, %187
  %189 = xor i32 %149, %150
  %190 = and i32 %148, %189
  %191 = and i32 %149, %150
  %192 = xor i32 %190, %191
  %193 = add i32 %188, %192
  %194 = add i32 %193, %176
  %195 = add nuw nsw i64 %145, 1
  %196 = icmp eq i64 %195, 64
  br i1 %196, label %131, label %144
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z11sha256_doneP14sha256_contextPh(%struct.sha256_context*, i8* nocapture) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.sha256_context, %struct.sha256_context* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = trunc i64 %4 to i32
  %6 = and i32 %5, 63
  %7 = add nuw nsw i32 %6, 1
  %8 = zext i32 %6 to i64
  %9 = getelementptr inbounds %struct.sha256_context, %struct.sha256_context* %0, i64 0, i32 2, i64 %8
  store i8 -128, i8* %9, align 1
  %10 = icmp eq i32 %7, 56
  br i1 %10, label %31, label %11

11:                                               ; preds = %2
  %12 = icmp ugt i32 %6, 55
  br i1 %12, label %13, label %25

13:                                               ; preds = %11
  %14 = icmp ult i32 %7, 64
  br i1 %14, label %15, label %24

15:                                               ; preds = %13
  %16 = and i64 %4, 63
  %17 = add nuw nsw i64 %16, 1
  %18 = getelementptr %struct.sha256_context, %struct.sha256_context* %0, i64 0, i32 0, i64 10
  %19 = bitcast i32* %18 to i8*
  %20 = getelementptr i8, i8* %19, i64 %17
  %21 = sub nuw nsw i32 62, %6
  %22 = zext i32 %21 to i64
  %23 = add nuw nsw i64 %22, 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %20, i8 0, i64 %23, i1 false)
  br label %24

24:                                               ; preds = %15, %13
  tail call fastcc void @_ZL16sha256_transformP14sha256_context(%struct.sha256_context* %0)
  br label %25

25:                                               ; preds = %11, %24
  %26 = phi i32 [ 0, %24 ], [ %7, %11 ]
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds %struct.sha256_context, %struct.sha256_context* %0, i64 0, i32 2, i64 %27
  %29 = sub nsw i32 56, %26
  %30 = zext i32 %29 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 0, i64 %30, i1 false)
  br label %31

31:                                               ; preds = %2, %25
  %32 = lshr i64 %4, 29
  %33 = getelementptr inbounds %struct.sha256_context, %struct.sha256_context* %0, i64 0, i32 2, i64 56
  %34 = lshr i64 %4, 53
  %35 = trunc i64 %34 to i8
  store i8 %35, i8* %33, align 1
  %36 = lshr i64 %4, 45
  %37 = trunc i64 %36 to i8
  %38 = getelementptr inbounds %struct.sha256_context, %struct.sha256_context* %0, i64 0, i32 2, i64 57
  store i8 %37, i8* %38, align 1
  %39 = lshr i64 %4, 37
  %40 = trunc i64 %39 to i8
  %41 = getelementptr inbounds %struct.sha256_context, %struct.sha256_context* %0, i64 0, i32 2, i64 58
  store i8 %40, i8* %41, align 1
  %42 = trunc i64 %32 to i8
  %43 = getelementptr inbounds %struct.sha256_context, %struct.sha256_context* %0, i64 0, i32 2, i64 59
  store i8 %42, i8* %43, align 1
  %44 = getelementptr inbounds %struct.sha256_context, %struct.sha256_context* %0, i64 0, i32 2, i64 60
  %45 = lshr i32 %5, 21
  %46 = trunc i32 %45 to i8
  store i8 %46, i8* %44, align 1
  %47 = lshr i32 %5, 13
  %48 = trunc i32 %47 to i8
  %49 = getelementptr inbounds %struct.sha256_context, %struct.sha256_context* %0, i64 0, i32 2, i64 61
  store i8 %48, i8* %49, align 1
  %50 = lshr i32 %5, 5
  %51 = trunc i32 %50 to i8
  %52 = getelementptr inbounds %struct.sha256_context, %struct.sha256_context* %0, i64 0, i32 2, i64 62
  store i8 %51, i8* %52, align 1
  %53 = trunc i64 %4 to i8
  %54 = shl i8 %53, 3
  %55 = getelementptr inbounds %struct.sha256_context, %struct.sha256_context* %0, i64 0, i32 2, i64 63
  store i8 %54, i8* %55, align 1
  tail call fastcc void @_ZL16sha256_transformP14sha256_context(%struct.sha256_context* %0)
  %56 = getelementptr inbounds %struct.sha256_context, %struct.sha256_context* %0, i64 0, i32 0, i64 0
  %57 = load i32, i32* %56, align 8
  %58 = lshr i32 %57, 24
  %59 = trunc i32 %58 to i8
  store i8 %59, i8* %1, align 1
  %60 = lshr i32 %57, 16
  %61 = trunc i32 %60 to i8
  %62 = getelementptr inbounds i8, i8* %1, i64 1
  store i8 %61, i8* %62, align 1
  %63 = lshr i32 %57, 8
  %64 = trunc i32 %63 to i8
  %65 = getelementptr inbounds i8, i8* %1, i64 2
  store i8 %64, i8* %65, align 1
  %66 = trunc i32 %57 to i8
  %67 = getelementptr inbounds i8, i8* %1, i64 3
  store i8 %66, i8* %67, align 1
  %68 = getelementptr inbounds %struct.sha256_context, %struct.sha256_context* %0, i64 0, i32 0, i64 1
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds i8, i8* %1, i64 4
  %71 = lshr i32 %69, 24
  %72 = trunc i32 %71 to i8
  store i8 %72, i8* %70, align 1
  %73 = lshr i32 %69, 16
  %74 = trunc i32 %73 to i8
  %75 = getelementptr inbounds i8, i8* %1, i64 5
  store i8 %74, i8* %75, align 1
  %76 = lshr i32 %69, 8
  %77 = trunc i32 %76 to i8
  %78 = getelementptr inbounds i8, i8* %1, i64 6
  store i8 %77, i8* %78, align 1
  %79 = trunc i32 %69 to i8
  %80 = getelementptr inbounds i8, i8* %1, i64 7
  store i8 %79, i8* %80, align 1
  %81 = getelementptr inbounds %struct.sha256_context, %struct.sha256_context* %0, i64 0, i32 0, i64 2
  %82 = load i32, i32* %81, align 8
  %83 = getelementptr inbounds i8, i8* %1, i64 8
  %84 = lshr i32 %82, 24
  %85 = trunc i32 %84 to i8
  store i8 %85, i8* %83, align 1
  %86 = lshr i32 %82, 16
  %87 = trunc i32 %86 to i8
  %88 = getelementptr inbounds i8, i8* %1, i64 9
  store i8 %87, i8* %88, align 1
  %89 = lshr i32 %82, 8
  %90 = trunc i32 %89 to i8
  %91 = getelementptr inbounds i8, i8* %1, i64 10
  store i8 %90, i8* %91, align 1
  %92 = trunc i32 %82 to i8
  %93 = getelementptr inbounds i8, i8* %1, i64 11
  store i8 %92, i8* %93, align 1
  %94 = getelementptr inbounds %struct.sha256_context, %struct.sha256_context* %0, i64 0, i32 0, i64 3
  %95 = load i32, i32* %94, align 4
  %96 = getelementptr inbounds i8, i8* %1, i64 12
  %97 = lshr i32 %95, 24
  %98 = trunc i32 %97 to i8
  store i8 %98, i8* %96, align 1
  %99 = lshr i32 %95, 16
  %100 = trunc i32 %99 to i8
  %101 = getelementptr inbounds i8, i8* %1, i64 13
  store i8 %100, i8* %101, align 1
  %102 = lshr i32 %95, 8
  %103 = trunc i32 %102 to i8
  %104 = getelementptr inbounds i8, i8* %1, i64 14
  store i8 %103, i8* %104, align 1
  %105 = trunc i32 %95 to i8
  %106 = getelementptr inbounds i8, i8* %1, i64 15
  store i8 %105, i8* %106, align 1
  %107 = getelementptr inbounds %struct.sha256_context, %struct.sha256_context* %0, i64 0, i32 0, i64 4
  %108 = load i32, i32* %107, align 8
  %109 = getelementptr inbounds i8, i8* %1, i64 16
  %110 = lshr i32 %108, 24
  %111 = trunc i32 %110 to i8
  store i8 %111, i8* %109, align 1
  %112 = lshr i32 %108, 16
  %113 = trunc i32 %112 to i8
  %114 = getelementptr inbounds i8, i8* %1, i64 17
  store i8 %113, i8* %114, align 1
  %115 = lshr i32 %108, 8
  %116 = trunc i32 %115 to i8
  %117 = getelementptr inbounds i8, i8* %1, i64 18
  store i8 %116, i8* %117, align 1
  %118 = trunc i32 %108 to i8
  %119 = getelementptr inbounds i8, i8* %1, i64 19
  store i8 %118, i8* %119, align 1
  %120 = getelementptr inbounds %struct.sha256_context, %struct.sha256_context* %0, i64 0, i32 0, i64 5
  %121 = load i32, i32* %120, align 4
  %122 = getelementptr inbounds i8, i8* %1, i64 20
  %123 = lshr i32 %121, 24
  %124 = trunc i32 %123 to i8
  store i8 %124, i8* %122, align 1
  %125 = lshr i32 %121, 16
  %126 = trunc i32 %125 to i8
  %127 = getelementptr inbounds i8, i8* %1, i64 21
  store i8 %126, i8* %127, align 1
  %128 = lshr i32 %121, 8
  %129 = trunc i32 %128 to i8
  %130 = getelementptr inbounds i8, i8* %1, i64 22
  store i8 %129, i8* %130, align 1
  %131 = trunc i32 %121 to i8
  %132 = getelementptr inbounds i8, i8* %1, i64 23
  store i8 %131, i8* %132, align 1
  %133 = getelementptr inbounds %struct.sha256_context, %struct.sha256_context* %0, i64 0, i32 0, i64 6
  %134 = load i32, i32* %133, align 8
  %135 = getelementptr inbounds i8, i8* %1, i64 24
  %136 = lshr i32 %134, 24
  %137 = trunc i32 %136 to i8
  store i8 %137, i8* %135, align 1
  %138 = lshr i32 %134, 16
  %139 = trunc i32 %138 to i8
  %140 = getelementptr inbounds i8, i8* %1, i64 25
  store i8 %139, i8* %140, align 1
  %141 = lshr i32 %134, 8
  %142 = trunc i32 %141 to i8
  %143 = getelementptr inbounds i8, i8* %1, i64 26
  store i8 %142, i8* %143, align 1
  %144 = trunc i32 %134 to i8
  %145 = getelementptr inbounds i8, i8* %1, i64 27
  store i8 %144, i8* %145, align 1
  %146 = getelementptr inbounds %struct.sha256_context, %struct.sha256_context* %0, i64 0, i32 0, i64 7
  %147 = load i32, i32* %146, align 4
  %148 = getelementptr inbounds i8, i8* %1, i64 28
  %149 = lshr i32 %147, 24
  %150 = trunc i32 %149 to i8
  store i8 %150, i8* %148, align 1
  %151 = lshr i32 %147, 16
  %152 = trunc i32 %151 to i8
  %153 = getelementptr inbounds i8, i8* %1, i64 29
  store i8 %152, i8* %153, align 1
  %154 = lshr i32 %147, 8
  %155 = trunc i32 %154 to i8
  %156 = getelementptr inbounds i8, i8* %1, i64 30
  store i8 %155, i8* %156, align 1
  %157 = trunc i32 %147 to i8
  %158 = getelementptr inbounds i8, i8* %1, i64 31
  store i8 %157, i8* %158, align 1
  %159 = bitcast %struct.sha256_context* %0 to <4 x i32>*
  store <4 x i32> <i32 1779033703, i32 -1150833019, i32 1013904242, i32 -1521486534>, <4 x i32>* %159, align 8
  %160 = bitcast i32* %107 to <4 x i32>*
  store <4 x i32> <i32 1359893119, i32 -1694144372, i32 528734635, i32 1541459225>, <4 x i32>* %160, align 8
  store i64 0, i64* %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
