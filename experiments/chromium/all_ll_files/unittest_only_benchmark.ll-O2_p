; ModuleID = '../../cc/benchmarks/unittest_only_benchmark.cc'
source_filename = "../../cc/benchmarks/unittest_only_benchmark.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.cc::UnittestOnlyBenchmark" = type { %"class.cc::MicroBenchmark", i8, %"class.base::WeakPtrFactory" }
%"class.cc::MicroBenchmark" = type { i32 (...)**, %"class.base::OnceCallback", i8, i8, i32 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.1 }
%class.scoped_refptr.1 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.2", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.2" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.3" }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.9" }
%"union.absl::variant_internal::DestructibleUnionImpl.9" = type { %"union.absl::variant_internal::DestructibleUnionImpl.10" }
%"union.absl::variant_internal::DestructibleUnionImpl.10" = type { %"union.absl::variant_internal::DestructibleUnionImpl.11" }
%"union.absl::variant_internal::DestructibleUnionImpl.11" = type { %"union.absl::variant_internal::DestructibleUnionImpl.12" }
%"union.absl::variant_internal::DestructibleUnionImpl.12" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::DictionaryValue" = type { %"class.base::Value" }
%"class.cc::LayerTreeHost" = type opaque
%"class.cc::MicroBenchmarkImpl" = type { i32 (...)**, %"class.base::OnceCallback", i8, %class.scoped_refptr.41 }
%class.scoped_refptr.41 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.42" }>
%"class.base::RefCountedThreadSafe.42" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.52 }
%class.scoped_refptr.52 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.cc::UnittestOnlyBenchmarkImpl" = type { %"class.cc::MicroBenchmarkImpl" }
%"class.base::TaskRunner" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.42", [4 x i8] }>
%"class.cc::PictureLayer" = type opaque
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::Value"* }

$_ZN4base8internal7InvokerINS0_9BindStateIMN2cc21UnittestOnlyBenchmarkEFvNSt3__110unique_ptrINS_5ValueENS5_14default_deleteIS7_EEEEEJNS_7WeakPtrIS4_EEEEEFvSA_EE7RunOnceEPNS0_13BindStateBaseEOSA_ = comdat any

$_ZN4base8internal9BindStateIMN2cc21UnittestOnlyBenchmarkEFvNSt3__110unique_ptrINS_5ValueENS4_14default_deleteIS6_EEEEEJNS_7WeakPtrIS3_EEEE7DestroyEPKNS0_13BindStateBaseE = comdat any

$_ZN4base8internal23QueryCancellationTraitsINS0_9BindStateIMN2cc21UnittestOnlyBenchmarkEFvNSt3__110unique_ptrINS_5ValueENS5_14default_deleteIS7_EEEEEJNS_7WeakPtrIS4_EEEEEEEbPKNS0_13BindStateBaseENSG_21CancellationQueryModeE = comdat any

@_ZTVN2cc21UnittestOnlyBenchmarkE = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.cc::UnittestOnlyBenchmark"*)* @_ZN2cc21UnittestOnlyBenchmarkD2Ev to i8*), i8* bitcast (void (%"class.cc::UnittestOnlyBenchmark"*)* @_ZN2cc21UnittestOnlyBenchmarkD0Ev to i8*), i8* bitcast (void (%"class.cc::UnittestOnlyBenchmark"*, %"class.cc::LayerTreeHost"*)* @_ZN2cc21UnittestOnlyBenchmark15DidUpdateLayersEPNS_13LayerTreeHostE to i8*), i8* bitcast (void (%"class.cc::MicroBenchmark"*, %"class.cc::PictureLayer"*)* @_ZN2cc14MicroBenchmark10RunOnLayerEPNS_12PictureLayerE to i8*), i8* bitcast (i1 (%"class.cc::UnittestOnlyBenchmark"*, %"class.base::Value"*)* @_ZN2cc21UnittestOnlyBenchmark14ProcessMessageENSt3__110unique_ptrIN4base5ValueENS1_14default_deleteIS4_EEEE to i8*), i8* bitcast (%"class.cc::MicroBenchmarkImpl"* (%"class.cc::UnittestOnlyBenchmark"*, %"class.base::SingleThreadTaskRunner"*)* @_ZN2cc21UnittestOnlyBenchmark19CreateBenchmarkImplE13scoped_refptrIN4base22SingleThreadTaskRunnerEE to i8*)] }, align 8
@.str = private unnamed_addr constant [19 x i8] c"run_benchmark_impl\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"can_handle\00", align 1
@.str.4 = private unnamed_addr constant [29 x i8] c"../../base/memory/weak_ptr.h\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"ref_.IsValid()\00", align 1

@_ZN2cc21UnittestOnlyBenchmarkC1ENSt3__110unique_ptrIN4base5ValueENS1_14default_deleteIS4_EEEENS3_12OnceCallbackIFvS7_EEE = hidden unnamed_addr alias void (%"class.cc::UnittestOnlyBenchmark"*, %"class.base::Value"*, %"class.base::OnceCallback"*), void (%"class.cc::UnittestOnlyBenchmark"*, %"class.base::Value"*, %"class.base::OnceCallback"*)* @_ZN2cc21UnittestOnlyBenchmarkC2ENSt3__110unique_ptrIN4base5ValueENS1_14default_deleteIS4_EEEENS3_12OnceCallbackIFvS7_EEE
@_ZN2cc21UnittestOnlyBenchmarkD1Ev = hidden unnamed_addr alias void (%"class.cc::UnittestOnlyBenchmark"*), void (%"class.cc::UnittestOnlyBenchmark"*)* @_ZN2cc21UnittestOnlyBenchmarkD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc21UnittestOnlyBenchmarkC2ENSt3__110unique_ptrIN4base5ValueENS1_14default_deleteIS4_EEEENS3_12OnceCallbackIFvS7_EEE(%"class.cc::UnittestOnlyBenchmark"*, %"class.base::Value"*, %"class.base::OnceCallback"* nocapture) unnamed_addr #0 align 2 {
  %4 = alloca %"class.base::OnceCallback", align 8
  %5 = alloca %"class.base::DictionaryValue"*, align 8
  %6 = getelementptr inbounds %"class.cc::UnittestOnlyBenchmark", %"class.cc::UnittestOnlyBenchmark"* %0, i64 0, i32 0
  %7 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0, i32 0, i32 0
  %8 = bitcast %"class.base::OnceCallback"* %2 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.base::OnceCallback"* %4 to i64*
  store i64 %9, i64* %10, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %7, align 8
  call void @_ZN2cc14MicroBenchmarkC2EN4base12OnceCallbackIFvNSt3__110unique_ptrINS1_5ValueENS3_14default_deleteIS5_EEEEEEE(%"class.cc::MicroBenchmark"* %6, %"class.base::OnceCallback"* nonnull %4) #6
  %11 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %4, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %11) #6
  %12 = getelementptr inbounds %"class.cc::UnittestOnlyBenchmark", %"class.cc::UnittestOnlyBenchmark"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN2cc21UnittestOnlyBenchmarkE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %12, align 8
  %13 = getelementptr inbounds %"class.cc::UnittestOnlyBenchmark", %"class.cc::UnittestOnlyBenchmark"* %0, i64 0, i32 1
  store i8 0, i8* %13, align 8
  %14 = getelementptr inbounds %"class.cc::UnittestOnlyBenchmark", %"class.cc::UnittestOnlyBenchmark"* %0, i64 0, i32 2, i32 0
  %15 = ptrtoint %"class.cc::UnittestOnlyBenchmark"* %0 to i64
  call void @_ZN4base8internal18WeakPtrFactoryBaseC2Em(%"class.base::internal::WeakPtrFactoryBase"* %14, i64 %15) #6
  %16 = icmp eq %"class.base::Value"* %1, null
  br i1 %16, label %29, label %17

17:                                               ; preds = %3
  %18 = bitcast %"class.base::DictionaryValue"** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #6
  store %"class.base::DictionaryValue"* null, %"class.base::DictionaryValue"** %5, align 8
  %19 = call zeroext i1 @_ZN4base5Value15GetAsDictionaryEPPNS_15DictionaryValueE(%"class.base::Value"* nonnull %1, %"class.base::DictionaryValue"** nonnull %5) #6
  %20 = load %"class.base::DictionaryValue"*, %"class.base::DictionaryValue"** %5, align 8
  %21 = icmp eq %"class.base::DictionaryValue"* %20, null
  br i1 %21, label %27, label %22

22:                                               ; preds = %17
  %23 = call zeroext i1 @_ZNK4base15DictionaryValue6HasKeyENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.base::DictionaryValue"* nonnull %20, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), i64 18) #6
  br i1 %23, label %24, label %27

24:                                               ; preds = %22
  %25 = load %"class.base::DictionaryValue"*, %"class.base::DictionaryValue"** %5, align 8
  %26 = call zeroext i1 @_ZNK4base15DictionaryValue10GetBooleanENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPb(%"class.base::DictionaryValue"* %25, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), i64 18, i8* %13) #6
  br label %27

27:                                               ; preds = %17, %24, %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #6
  call void @_ZN4base5ValueD1Ev(%"class.base::Value"* nonnull %1) #6
  %28 = bitcast %"class.base::Value"* %1 to i8*
  call void @_ZdlPv(i8* %28) #7
  br label %29

29:                                               ; preds = %3, %27
  ret void
}

declare void @_ZN2cc14MicroBenchmarkC2EN4base12OnceCallbackIFvNSt3__110unique_ptrINS1_5ValueENS3_14default_deleteIS5_EEEEEEE(%"class.cc::MicroBenchmark"*, %"class.base::OnceCallback"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare zeroext i1 @_ZN4base5Value15GetAsDictionaryEPPNS_15DictionaryValueE(%"class.base::Value"*, %"class.base::DictionaryValue"**) local_unnamed_addr #1

declare zeroext i1 @_ZNK4base15DictionaryValue6HasKeyENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.base::DictionaryValue"*, i8*, i64) local_unnamed_addr #1

declare zeroext i1 @_ZNK4base15DictionaryValue10GetBooleanENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPb(%"class.base::DictionaryValue"*, i8*, i64, i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc21UnittestOnlyBenchmarkD2Ev(%"class.cc::UnittestOnlyBenchmark"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::UnittestOnlyBenchmark", %"class.cc::UnittestOnlyBenchmark"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN2cc21UnittestOnlyBenchmarkE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.cc::UnittestOnlyBenchmark", %"class.cc::UnittestOnlyBenchmark"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"class.base::WeakPtrFactory", %"class.base::WeakPtrFactory"* %3, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal18WeakReferenceOwner10InvalidateEv(%"class.base::internal::WeakReferenceOwner"* %4) #6
  %5 = getelementptr inbounds %"class.base::WeakPtrFactory", %"class.base::WeakPtrFactory"* %3, i64 0, i32 0
  tail call void @_ZN4base8internal18WeakPtrFactoryBaseD2Ev(%"class.base::internal::WeakPtrFactoryBase"* %5) #6
  %6 = getelementptr inbounds %"class.cc::UnittestOnlyBenchmark", %"class.cc::UnittestOnlyBenchmark"* %0, i64 0, i32 0
  tail call void @_ZN2cc14MicroBenchmarkD2Ev(%"class.cc::MicroBenchmark"* %6) #6
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal18WeakPtrFactoryBaseD2Ev(%"class.base::internal::WeakPtrFactoryBase"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2cc14MicroBenchmarkD2Ev(%"class.cc::MicroBenchmark"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc21UnittestOnlyBenchmarkD0Ev(%"class.cc::UnittestOnlyBenchmark"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::UnittestOnlyBenchmark", %"class.cc::UnittestOnlyBenchmark"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN2cc21UnittestOnlyBenchmarkE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.cc::UnittestOnlyBenchmark", %"class.cc::UnittestOnlyBenchmark"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"class.base::WeakPtrFactory", %"class.base::WeakPtrFactory"* %3, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal18WeakReferenceOwner10InvalidateEv(%"class.base::internal::WeakReferenceOwner"* %4) #6
  %5 = getelementptr inbounds %"class.base::WeakPtrFactory", %"class.base::WeakPtrFactory"* %3, i64 0, i32 0
  tail call void @_ZN4base8internal18WeakPtrFactoryBaseD2Ev(%"class.base::internal::WeakPtrFactoryBase"* %5) #6
  %6 = getelementptr inbounds %"class.cc::UnittestOnlyBenchmark", %"class.cc::UnittestOnlyBenchmark"* %0, i64 0, i32 0
  tail call void @_ZN2cc14MicroBenchmarkD2Ev(%"class.cc::MicroBenchmark"* %6) #6
  %7 = bitcast %"class.cc::UnittestOnlyBenchmark"* %0 to i8*
  tail call void @_ZdlPv(i8* %7) #7
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc21UnittestOnlyBenchmark15DidUpdateLayersEPNS_13LayerTreeHostE(%"class.cc::UnittestOnlyBenchmark"*, %"class.cc::LayerTreeHost"* nocapture readnone) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::UnittestOnlyBenchmark", %"class.cc::UnittestOnlyBenchmark"* %0, i64 0, i32 0
  tail call void @_ZN2cc14MicroBenchmark10NotifyDoneENSt3__110unique_ptrIN4base5ValueENS1_14default_deleteIS4_EEEE(%"class.cc::MicroBenchmark"* %3, %"class.base::Value"* null) #6
  ret void
}

declare void @_ZN2cc14MicroBenchmark10NotifyDoneENSt3__110unique_ptrIN4base5ValueENS1_14default_deleteIS4_EEEE(%"class.cc::MicroBenchmark"*, %"class.base::Value"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2cc21UnittestOnlyBenchmark14ProcessMessageENSt3__110unique_ptrIN4base5ValueENS1_14default_deleteIS4_EEEE(%"class.cc::UnittestOnlyBenchmark"* nocapture readnone, %"class.base::Value"*) unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::DictionaryValue"*, align 8
  %4 = alloca i8, align 1
  %5 = bitcast %"class.base::DictionaryValue"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #6
  store %"class.base::DictionaryValue"* null, %"class.base::DictionaryValue"** %3, align 8
  %6 = call zeroext i1 @_ZN4base5Value15GetAsDictionaryEPPNS_15DictionaryValueE(%"class.base::Value"* %1, %"class.base::DictionaryValue"** nonnull %3) #6
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #6
  store i8 -86, i8* %4, align 1
  %7 = load %"class.base::DictionaryValue"*, %"class.base::DictionaryValue"** %3, align 8
  %8 = call zeroext i1 @_ZNK4base15DictionaryValue6HasKeyENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.base::DictionaryValue"* %7, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i64 10) #6
  br i1 %8, label %9, label %14

9:                                                ; preds = %2
  %10 = load %"class.base::DictionaryValue"*, %"class.base::DictionaryValue"** %3, align 8
  %11 = call zeroext i1 @_ZNK4base15DictionaryValue10GetBooleanENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPb(%"class.base::DictionaryValue"* %10, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i64 10, i8* nonnull %4) #6
  %12 = load i8, i8* %4, align 1, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %9, %2
  br label %15

15:                                               ; preds = %9, %14
  %16 = phi i1 [ false, %14 ], [ true, %9 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #6
  %17 = icmp eq %"class.base::Value"* %1, null
  br i1 %17, label %20, label %18

18:                                               ; preds = %15
  call void @_ZN4base5ValueD1Ev(%"class.base::Value"* nonnull %1) #6
  %19 = bitcast %"class.base::Value"* %1 to i8*
  call void @_ZdlPv(i8* %19) #7
  br label %20

20:                                               ; preds = %15, %18
  ret i1 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc21UnittestOnlyBenchmark17RecordImplResultsENSt3__110unique_ptrIN4base5ValueENS1_14default_deleteIS4_EEEE(%"class.cc::UnittestOnlyBenchmark"*, %"class.base::Value"*) #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::UnittestOnlyBenchmark", %"class.cc::UnittestOnlyBenchmark"* %0, i64 0, i32 0
  tail call void @_ZN2cc14MicroBenchmark10NotifyDoneENSt3__110unique_ptrIN4base5ValueENS1_14default_deleteIS4_EEEE(%"class.cc::MicroBenchmark"* %3, %"class.base::Value"* %1) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.cc::MicroBenchmarkImpl"* @_ZN2cc21UnittestOnlyBenchmark19CreateBenchmarkImplE13scoped_refptrIN4base22SingleThreadTaskRunnerEE(%"class.cc::UnittestOnlyBenchmark"*, %"class.base::SingleThreadTaskRunner"*) unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::internal::WeakReference", align 8
  %4 = alloca %"class.base::OnceCallback", align 8
  %5 = alloca %"class.base::WeakPtr", align 8
  %6 = getelementptr inbounds %"class.cc::UnittestOnlyBenchmark", %"class.cc::UnittestOnlyBenchmark"* %0, i64 0, i32 1
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %37, label %9

9:                                                ; preds = %2
  %10 = tail call i8* @_Znwm(i64 32) #7
  %11 = bitcast i8* %10 to %"class.cc::UnittestOnlyBenchmarkImpl"*
  %12 = icmp eq %"class.base::SingleThreadTaskRunner"* %1, null
  br i1 %12, label %16, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %1, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = atomicrmw add i32* %14, i32 1 monotonic
  br label %16

16:                                               ; preds = %13, %9
  %17 = bitcast %"class.base::WeakPtr"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17) #6
  %18 = bitcast %"class.base::internal::WeakReference"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #6, !noalias !3
  %19 = getelementptr inbounds %"class.cc::UnittestOnlyBenchmark", %"class.cc::UnittestOnlyBenchmark"* %0, i64 0, i32 2, i32 0, i32 0
  call void @_ZNK4base8internal18WeakReferenceOwner6GetRefEv(%"class.base::internal::WeakReference"* nonnull sret %3, %"class.base::internal::WeakReferenceOwner"* %19) #6, !noalias !3
  %20 = getelementptr inbounds %"class.cc::UnittestOnlyBenchmark", %"class.cc::UnittestOnlyBenchmark"* %0, i64 0, i32 2, i32 0, i32 1
  %21 = load i64, i64* %20, align 8, !noalias !3
  %22 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %5, i64 0, i32 0
  call void @_ZN4base8internal11WeakPtrBaseC2ERKNS0_13WeakReferenceEm(%"class.base::internal::WeakPtrBase"* nonnull %22, %"class.base::internal::WeakReference"* nonnull dereferenceable(8) %3, i64 %21) #6
  call void @_ZN4base8internal13WeakReferenceD1Ev(%"class.base::internal::WeakReference"* nonnull %3) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #6, !noalias !3
  %23 = call i8* @_Znwm(i64 64) #7, !noalias !6
  %24 = bitcast i8* %23 to %"class.base::internal::BindStateBase"*
  call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_EPFbS5_NS1_21CancellationQueryModeEE(%"class.base::internal::BindStateBase"* nonnull %24, void ()* bitcast (void (%"class.base::internal::BindStateBase"*, %"class.std::__1::unique_ptr"*)* @_ZN4base8internal7InvokerINS0_9BindStateIMN2cc21UnittestOnlyBenchmarkEFvNSt3__110unique_ptrINS_5ValueENS5_14default_deleteIS7_EEEEEJNS_7WeakPtrIS4_EEEEEFvSA_EE7RunOnceEPNS0_13BindStateBaseEOSA_ to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIMN2cc21UnittestOnlyBenchmarkEFvNSt3__110unique_ptrINS_5ValueENS4_14default_deleteIS6_EEEEEJNS_7WeakPtrIS3_EEEE7DestroyEPKNS0_13BindStateBaseE, i1 (%"class.base::internal::BindStateBase"*, i32)* nonnull @_ZN4base8internal23QueryCancellationTraitsINS0_9BindStateIMN2cc21UnittestOnlyBenchmarkEFvNSt3__110unique_ptrINS_5ValueENS5_14default_deleteIS7_EEEEEJNS_7WeakPtrIS4_EEEEEEEbPKNS0_13BindStateBaseENSG_21CancellationQueryModeE) #6, !noalias !6
  %25 = getelementptr inbounds i8, i8* %23, i64 32
  %26 = bitcast i8* %25 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint (void (%"class.cc::UnittestOnlyBenchmark"*, %"class.base::Value"*)* @_ZN2cc21UnittestOnlyBenchmark17RecordImplResultsENSt3__110unique_ptrIN4base5ValueENS1_14default_deleteIS4_EEEE to i64), i64 0>, <2 x i64>* %26, align 8, !noalias !6
  %27 = getelementptr inbounds i8, i8* %23, i64 48
  %28 = bitcast i8* %27 to %"class.base::internal::WeakReference"*
  %29 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %5, i64 0, i32 0, i32 0
  call void @_ZN4base8internal13WeakReferenceC1EOS1_(%"class.base::internal::WeakReference"* %28, %"class.base::internal::WeakReference"* nonnull dereferenceable(8) %29) #6, !noalias !6
  %30 = getelementptr inbounds i8, i8* %23, i64 56
  %31 = bitcast i8* %30 to i64*
  %32 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %5, i64 0, i32 0, i32 1
  %33 = load i64, i64* %32, align 8, !noalias !6
  store i64 %33, i64* %31, align 8, !noalias !6
  %34 = bitcast %"class.base::OnceCallback"* %4 to i8**
  store i8* %23, i8** %34, align 8, !alias.scope !6
  call void @_ZN2cc25UnittestOnlyBenchmarkImplC1E13scoped_refptrIN4base22SingleThreadTaskRunnerEEPNS2_5ValueENS2_12OnceCallbackIFvNSt3__110unique_ptrIS5_NS8_14default_deleteIS5_EEEEEEE(%"class.cc::UnittestOnlyBenchmarkImpl"* nonnull %11, %"class.base::SingleThreadTaskRunner"* %1, %"class.base::Value"* null, %"class.base::OnceCallback"* nonnull %4) #6
  %35 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %4, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %35) #6
  call void @_ZN4base8internal11WeakPtrBaseD2Ev(%"class.base::internal::WeakPtrBase"* nonnull %22) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17) #6
  %36 = bitcast i8* %10 to %"class.cc::MicroBenchmarkImpl"*
  br label %37

37:                                               ; preds = %2, %16
  %38 = phi %"class.cc::MicroBenchmarkImpl"* [ %36, %16 ], [ null, %2 ]
  %39 = icmp eq %"class.base::SingleThreadTaskRunner"* %1, null
  br i1 %39, label %48, label %40

40:                                               ; preds = %37
  %41 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %1, i64 0, i32 0, i32 0, i32 1
  %42 = getelementptr inbounds %"class.base::RefCountedThreadSafe.42", %"class.base::RefCountedThreadSafe.42"* %41, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = atomicrmw sub i32* %42, i32 1 acq_rel
  %44 = icmp eq i32 %43, 1
  br i1 %44, label %45, label %48

45:                                               ; preds = %40
  %46 = getelementptr inbounds %"class.base::RefCountedThreadSafe.42", %"class.base::RefCountedThreadSafe.42"* %41, i64 -2
  %47 = bitcast %"class.base::RefCountedThreadSafe.42"* %46 to %"class.base::TaskRunner"*
  call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %47) #6
  br label %48

48:                                               ; preds = %37, %40, %45
  ret %"class.cc::MicroBenchmarkImpl"* %38
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

declare void @_ZN2cc25UnittestOnlyBenchmarkImplC1E13scoped_refptrIN4base22SingleThreadTaskRunnerEEPNS2_5ValueENS2_12OnceCallbackIFvNSt3__110unique_ptrIS5_NS8_14default_deleteIS5_EEEEEEE(%"class.cc::UnittestOnlyBenchmarkImpl"*, %"class.base::SingleThreadTaskRunner"*, %"class.base::Value"*, %"class.base::OnceCallback"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base8internal11WeakPtrBaseD2Ev(%"class.base::internal::WeakPtrBase"*) unnamed_addr #2

declare void @_ZN2cc14MicroBenchmark10RunOnLayerEPNS_12PictureLayerE(%"class.cc::MicroBenchmark"*, %"class.cc::PictureLayer"*) unnamed_addr #1

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #2

declare void @_ZN4base8internal18WeakPtrFactoryBaseC2Em(%"class.base::internal::WeakPtrFactoryBase"*, i64) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base5ValueD1Ev(%"class.base::Value"*) unnamed_addr #2

declare void @_ZN4base8internal18WeakReferenceOwner10InvalidateEv(%"class.base::internal::WeakReferenceOwner"*) local_unnamed_addr #1

declare void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"*) local_unnamed_addr #1

declare void @_ZNK4base8internal18WeakReferenceOwner6GetRefEv(%"class.base::internal::WeakReference"* sret, %"class.base::internal::WeakReferenceOwner"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base8internal13WeakReferenceD1Ev(%"class.base::internal::WeakReference"*) unnamed_addr #2

declare void @_ZN4base8internal11WeakPtrBaseC2ERKNS0_13WeakReferenceEm(%"class.base::internal::WeakPtrBase"*, %"class.base::internal::WeakReference"* dereferenceable(8), i64) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal7InvokerINS0_9BindStateIMN2cc21UnittestOnlyBenchmarkEFvNSt3__110unique_ptrINS_5ValueENS5_14default_deleteIS7_EEEEEJNS_7WeakPtrIS4_EEEEEFvSA_EE7RunOnceEPNS0_13BindStateBaseEOSA_(%"class.base::internal::BindStateBase"*, %"class.std::__1::unique_ptr"* dereferenceable(8)) #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1
  %5 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 2
  %6 = bitcast void (%"class.base::internal::BindStateBase"*)** %5 to %"class.base::internal::WeakReference"*
  %7 = tail call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %6) #6
  br i1 %7, label %8, label %45

8:                                                ; preds = %2
  %9 = getelementptr inbounds void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %5, i64 1
  %10 = bitcast void (%"class.base::internal::BindStateBase"*)** %9 to %"class.cc::UnittestOnlyBenchmark"**
  %11 = load %"class.cc::UnittestOnlyBenchmark"*, %"class.cc::UnittestOnlyBenchmark"** %10, align 8
  %12 = icmp eq %"class.cc::UnittestOnlyBenchmark"* %11, null
  br i1 %12, label %45, label %13

13:                                               ; preds = %8
  %14 = bitcast %"class.base::internal::BindStateBase"* %4 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %17 = bitcast void ()** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = tail call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %6) #6
  br i1 %19, label %23, label %20

20:                                               ; preds = %13
  %21 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #6
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i64 0, i64 0), i32 251, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0)) #6
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #6
  br label %23

23:                                               ; preds = %20, %13
  %24 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %6) #6
  %25 = bitcast void (%"class.base::internal::BindStateBase"*)** %9 to i8**
  %26 = load i8*, i8** %25, align 8
  %27 = select i1 %24, i8* %26, i8* null
  %28 = getelementptr inbounds i8, i8* %27, i64 %18
  %29 = bitcast i8* %28 to %"class.cc::UnittestOnlyBenchmark"*
  %30 = and i64 %15, 1
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %39, label %32

32:                                               ; preds = %23
  %33 = bitcast i8* %28 to i8**
  %34 = load i8*, i8** %33, align 8
  %35 = add i64 %15, -1
  %36 = getelementptr i8, i8* %34, i64 %35
  %37 = bitcast i8* %36 to void (%"class.cc::UnittestOnlyBenchmark"*, %"class.base::Value"*)**
  %38 = load void (%"class.cc::UnittestOnlyBenchmark"*, %"class.base::Value"*)*, void (%"class.cc::UnittestOnlyBenchmark"*, %"class.base::Value"*)** %37, align 8
  br label %41

39:                                               ; preds = %23
  %40 = inttoptr i64 %15 to void (%"class.cc::UnittestOnlyBenchmark"*, %"class.base::Value"*)*
  br label %41

41:                                               ; preds = %39, %32
  %42 = phi void (%"class.cc::UnittestOnlyBenchmark"*, %"class.base::Value"*)* [ %38, %32 ], [ %40, %39 ]
  %43 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %1, i64 0, i32 0, i32 0, i32 0
  %44 = load %"class.base::Value"*, %"class.base::Value"** %43, align 8
  store %"class.base::Value"* null, %"class.base::Value"** %43, align 8
  call void %42(%"class.cc::UnittestOnlyBenchmark"* %29, %"class.base::Value"* %44) #6
  br label %45

45:                                               ; preds = %2, %8, %41
  ret void
}

declare zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal9BindStateIMN2cc21UnittestOnlyBenchmarkEFvNSt3__110unique_ptrINS_5ValueENS4_14default_deleteIS6_EEEEEJNS_7WeakPtrIS3_EEEE7DestroyEPKNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 comdat align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %7, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 2
  %5 = bitcast void (%"class.base::internal::BindStateBase"*)** %4 to %"class.base::internal::WeakPtrBase"*
  tail call void @_ZN4base8internal11WeakPtrBaseD2Ev(%"class.base::internal::WeakPtrBase"* %5) #6
  %6 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %6) #7
  br label %7

7:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN4base8internal23QueryCancellationTraitsINS0_9BindStateIMN2cc21UnittestOnlyBenchmarkEFvNSt3__110unique_ptrINS_5ValueENS5_14default_deleteIS7_EEEEEJNS_7WeakPtrIS4_EEEEEEEbPKNS0_13BindStateBaseENSG_21CancellationQueryModeE(%"class.base::internal::BindStateBase"*, i32) #0 comdat {
  %3 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 2
  switch i32 %1, label %16 [
    i32 0, label %4
    i32 1, label %13
  ]

4:                                                ; preds = %2
  %5 = bitcast void (%"class.base::internal::BindStateBase"*)** %3 to %"class.base::internal::WeakReference"*
  %6 = tail call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %5) #6
  %7 = getelementptr inbounds void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %3, i64 1
  %8 = bitcast void (%"class.base::internal::BindStateBase"*)** %7 to %"class.cc::UnittestOnlyBenchmark"**
  %9 = load %"class.cc::UnittestOnlyBenchmark"*, %"class.cc::UnittestOnlyBenchmark"** %8, align 8
  %10 = icmp ne %"class.cc::UnittestOnlyBenchmark"* %9, null
  %11 = and i1 %6, %10
  %12 = xor i1 %11, true
  br label %16

13:                                               ; preds = %2
  %14 = bitcast void (%"class.base::internal::BindStateBase"*)** %3 to %"class.base::internal::WeakReference"*
  %15 = tail call zeroext i1 @_ZNK4base8internal13WeakReference10MaybeValidEv(%"class.base::internal::WeakReference"* %14) #6
  br label %16

16:                                               ; preds = %2, %4, %13
  %17 = phi i1 [ %15, %13 ], [ %12, %4 ], [ false, %2 ]
  ret i1 %17
}

declare void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_EPFbS5_NS1_21CancellationQueryModeEE(%"class.base::internal::BindStateBase"*, void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)*) unnamed_addr #1

declare zeroext i1 @_ZNK4base8internal13WeakReference10MaybeValidEv(%"class.base::internal::WeakReference"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base8internal13WeakReferenceC1EOS1_(%"class.base::internal::WeakReference"*, %"class.base::internal::WeakReference"* dereferenceable(8)) unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZNK4base14WeakPtrFactoryIN2cc21UnittestOnlyBenchmarkEE10GetWeakPtrEv: argument 0"}
!5 = distinct !{!5, !"_ZNK4base14WeakPtrFactoryIN2cc21UnittestOnlyBenchmarkEE10GetWeakPtrEv"}
!6 = !{!7, !9}
!7 = distinct !{!7, !8, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMN2cc21UnittestOnlyBenchmarkEFvNSt3__110unique_ptrINS_5ValueENS5_14default_deleteIS7_EEEEEJNS_7WeakPtrIS4_EEEEEDcOT0_DpOT1_: argument 0"}
!8 = distinct !{!8, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMN2cc21UnittestOnlyBenchmarkEFvNSt3__110unique_ptrINS_5ValueENS5_14default_deleteIS7_EEEEEJNS_7WeakPtrIS4_EEEEEDcOT0_DpOT1_"}
!9 = distinct !{!9, !10, !"_ZN4base8BindOnceIMN2cc21UnittestOnlyBenchmarkEFvNSt3__110unique_ptrINS_5ValueENS3_14default_deleteIS5_EEEEEJNS_7WeakPtrIS2_EEEEENS_12OnceCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSG_DpOSH_: argument 0"}
!10 = distinct !{!10, !"_ZN4base8BindOnceIMN2cc21UnittestOnlyBenchmarkEFvNSt3__110unique_ptrINS_5ValueENS3_14default_deleteIS5_EEEEEJNS_7WeakPtrIS2_EEEEENS_12OnceCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSG_DpOSH_"}
