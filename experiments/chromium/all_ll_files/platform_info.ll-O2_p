; ModuleID = '../../components/nacl/renderer/platform_info.cc'
source_filename = "../../components/nacl/renderer/platform_info.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.std::__1::__compressed_pair.1" }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.base::BasicStringPiece"* }
%"class.base::CPU" = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@.str = private unnamed_addr constant [7 x i8] c"x86-64\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"+sse4.1\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"+ssse3\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"+sse2\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"+popcnt\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c",\00", align 1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @_ZN4nacl14GetSandboxArchEv() local_unnamed_addr #0 {
  ret i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4nacl14GetCpuFeaturesEv(%"class.std::__1::basic_string"* noalias sret) local_unnamed_addr #1 {
  %2 = alloca %"class.std::__1::vector", align 8
  %3 = alloca %"class.base::CPU", align 8
  %4 = bitcast %"class.std::__1::vector"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #8
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 24, i1 false) #8
  %8 = bitcast %"class.base::CPU"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %8) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 96, i1 false)
  call void @_ZN4base3CPUC1Ev(%"class.base::CPU"* nonnull %3) #8
  %9 = getelementptr inbounds %"class.base::CPU", %"class.base::CPU"* %3, i64 0, i32 14
  %10 = load i8, i8* %9, align 2, !range !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %25, label %12

12:                                               ; preds = %1
  %13 = bitcast %"class.base::BasicStringPiece"** %6 to i64*
  %14 = bitcast %"class.std::__1::vector"* %2 to i64*
  %15 = bitcast %"class.base::BasicStringPiece"** %7 to i64*
  %16 = call i8* @_Znwm(i64 16) #9
  %17 = bitcast i8* %16 to %"class.base::BasicStringPiece"*
  %18 = getelementptr inbounds i8, i8* %16, i64 16
  %19 = bitcast i8* %18 to %"class.base::BasicStringPiece"*
  %20 = ptrtoint i8* %18 to i64
  %21 = bitcast i8* %16 to i8**
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i8** %21, align 8
  %22 = getelementptr inbounds i8, i8* %16, i64 8
  %23 = bitcast i8* %22 to i64*
  store i64 7, i64* %23, align 8
  %24 = ptrtoint i8* %16 to i64
  store i64 %24, i64* %14, align 8
  store i64 %20, i64* %13, align 8
  store i64 %20, i64* %15, align 8
  br label %59

25:                                               ; preds = %1
  %26 = getelementptr inbounds %"class.base::CPU", %"class.base::CPU"* %3, i64 0, i32 13
  %27 = load i8, i8* %26, align 1, !range !2
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %42, label %29

29:                                               ; preds = %25
  %30 = bitcast %"class.base::BasicStringPiece"** %6 to i64*
  %31 = bitcast %"class.std::__1::vector"* %2 to i64*
  %32 = bitcast %"class.base::BasicStringPiece"** %7 to i64*
  %33 = call i8* @_Znwm(i64 16) #9
  %34 = bitcast i8* %33 to %"class.base::BasicStringPiece"*
  %35 = getelementptr inbounds i8, i8* %33, i64 16
  %36 = bitcast i8* %35 to %"class.base::BasicStringPiece"*
  %37 = ptrtoint i8* %35 to i64
  %38 = bitcast i8* %33 to i8**
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i8** %38, align 8
  %39 = getelementptr inbounds i8, i8* %33, i64 8
  %40 = bitcast i8* %39 to i64*
  store i64 6, i64* %40, align 8
  %41 = ptrtoint i8* %33 to i64
  store i64 %41, i64* %31, align 8
  store i64 %37, i64* %30, align 8
  store i64 %37, i64* %32, align 8
  br label %59

42:                                               ; preds = %25
  %43 = getelementptr inbounds %"class.base::CPU", %"class.base::CPU"* %3, i64 0, i32 11
  %44 = load i8, i8* %43, align 1, !range !2
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %59, label %46

46:                                               ; preds = %42
  %47 = bitcast %"class.base::BasicStringPiece"** %6 to i64*
  %48 = bitcast %"class.std::__1::vector"* %2 to i64*
  %49 = bitcast %"class.base::BasicStringPiece"** %7 to i64*
  %50 = call i8* @_Znwm(i64 16) #9
  %51 = bitcast i8* %50 to %"class.base::BasicStringPiece"*
  %52 = getelementptr inbounds i8, i8* %50, i64 16
  %53 = bitcast i8* %52 to %"class.base::BasicStringPiece"*
  %54 = ptrtoint i8* %52 to i64
  %55 = bitcast i8* %50 to i8**
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i8** %55, align 8
  %56 = getelementptr inbounds i8, i8* %50, i64 8
  %57 = bitcast i8* %56 to i64*
  store i64 5, i64* %57, align 8
  %58 = ptrtoint i8* %50 to i64
  store i64 %58, i64* %48, align 8
  store i64 %54, i64* %47, align 8
  store i64 %54, i64* %49, align 8
  br label %59

59:                                               ; preds = %46, %29, %12, %42
  %60 = phi i64 [ 0, %42 ], [ %54, %46 ], [ %37, %29 ], [ %20, %12 ]
  %61 = phi i8* [ null, %42 ], [ %50, %46 ], [ %33, %29 ], [ %16, %12 ]
  %62 = phi %"class.base::BasicStringPiece"* [ null, %42 ], [ %51, %46 ], [ %34, %29 ], [ %17, %12 ]
  %63 = phi i64 [ 0, %42 ], [ %58, %46 ], [ %41, %29 ], [ %24, %12 ]
  %64 = phi %"class.base::BasicStringPiece"* [ null, %42 ], [ %53, %46 ], [ %36, %29 ], [ %19, %12 ]
  %65 = getelementptr inbounds %"class.base::CPU", %"class.base::CPU"* %3, i64 0, i32 16
  %66 = load i8, i8* %65, align 8, !range !2
  %67 = icmp eq i8 %66, 0
  br i1 %67, label %68, label %70

68:                                               ; preds = %59
  %69 = bitcast %"class.base::BasicStringPiece"** %6 to i64*
  br label %122

70:                                               ; preds = %59
  %71 = ptrtoint %"class.base::BasicStringPiece"* %64 to i64
  %72 = bitcast %"class.base::BasicStringPiece"** %6 to i64*
  %73 = bitcast %"class.std::__1::vector"* %2 to i64*
  %74 = sub i64 %71, %63
  %75 = ashr exact i64 %74, 4
  %76 = add nsw i64 %75, 1
  %77 = icmp ugt i64 %76, 1152921504606846975
  br i1 %77, label %78, label %80

78:                                               ; preds = %70
  %79 = bitcast %"class.std::__1::vector"* %2 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %79) #10
  unreachable

80:                                               ; preds = %70
  %81 = ptrtoint %"class.base::BasicStringPiece"* %64 to i64
  %82 = bitcast %"class.base::BasicStringPiece"** %7 to i64*
  %83 = sub i64 %81, %63
  %84 = ashr exact i64 %83, 4
  %85 = icmp ult i64 %84, 576460752303423487
  br i1 %85, label %86, label %94

86:                                               ; preds = %80
  %87 = ashr exact i64 %83, 3
  %88 = icmp ult i64 %87, %76
  %89 = select i1 %88, i64 %76, i64 %87
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %99, label %91

91:                                               ; preds = %86
  %92 = icmp ugt i64 %89, 1152921504606846975
  br i1 %92, label %93, label %94

93:                                               ; preds = %91
  call void @abort() #10
  unreachable

94:                                               ; preds = %91, %80
  %95 = phi i64 [ %89, %91 ], [ 1152921504606846975, %80 ]
  %96 = shl i64 %95, 4
  %97 = call i8* @_Znwm(i64 %96) #9
  %98 = bitcast i8* %97 to %"class.base::BasicStringPiece"*
  br label %99

99:                                               ; preds = %94, %86
  %100 = phi i64 [ %95, %94 ], [ 0, %86 ]
  %101 = phi %"class.base::BasicStringPiece"* [ %98, %94 ], [ null, %86 ]
  %102 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %101, i64 %75
  %103 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %101, i64 %100
  %104 = ptrtoint %"class.base::BasicStringPiece"* %103 to i64
  %105 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %102, i64 0, i32 0
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0), i8** %105, align 8
  %106 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %101, i64 %75, i32 1
  store i64 7, i64* %106, align 8
  %107 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %102, i64 1
  %108 = ptrtoint %"class.base::BasicStringPiece"* %107 to i64
  %109 = ptrtoint %"class.base::BasicStringPiece"* %62 to i64
  %110 = sub i64 %60, %109
  %111 = ashr exact i64 %110, 4
  %112 = sub nsw i64 0, %111
  %113 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %102, i64 %112
  %114 = ptrtoint %"class.base::BasicStringPiece"* %113 to i64
  %115 = icmp sgt i64 %110, 0
  br i1 %115, label %116, label %118

116:                                              ; preds = %99
  %117 = bitcast %"class.base::BasicStringPiece"* %113 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %117, i8* align 8 %61, i64 %110, i1 false) #8
  br label %118

118:                                              ; preds = %116, %99
  store i64 %114, i64* %73, align 8
  store i64 %108, i64* %72, align 8
  store i64 %104, i64* %82, align 8
  %119 = icmp eq %"class.base::BasicStringPiece"* %62, null
  br i1 %119, label %122, label %120

120:                                              ; preds = %118
  call void @_ZdlPv(i8* %61) #9
  %121 = load i64, i64* %72, align 8
  br label %122

122:                                              ; preds = %68, %120, %118
  %123 = phi i64* [ %69, %68 ], [ %72, %120 ], [ %72, %118 ]
  %124 = phi i64 [ %60, %68 ], [ %121, %120 ], [ %108, %118 ]
  %125 = bitcast %"class.std::__1::vector"* %2 to i64*
  %126 = load i64, i64* %125, align 8
  %127 = sub i64 %124, %126
  %128 = ashr exact i64 %127, 4
  %129 = inttoptr i64 %126 to %"class.base::BasicStringPiece"*
  call void @_ZN4base10JoinStringENS_4spanIKNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEELm18446744073709551615EEES5_(%"class.std::__1::basic_string"* sret %0, i64 %128, %"class.base::BasicStringPiece"* %129, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i64 1) #8
  %130 = getelementptr inbounds %"class.base::CPU", %"class.base::CPU"* %3, i64 0, i32 25
  %131 = bitcast %"class.std::__1::basic_string"* %130 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %132 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %131, i64 0, i32 1, i32 0
  %133 = load i8, i8* %132, align 1
  %134 = icmp slt i8 %133, 0
  br i1 %134, label %135, label %138

135:                                              ; preds = %122
  %136 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %130, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %137 = load i8*, i8** %136, align 8
  call void @_ZdlPv(i8* %137) #9
  br label %138

138:                                              ; preds = %135, %122
  %139 = getelementptr inbounds %"class.base::CPU", %"class.base::CPU"* %3, i64 0, i32 24
  %140 = bitcast %"class.std::__1::basic_string"* %139 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %141 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %140, i64 0, i32 1, i32 0
  %142 = load i8, i8* %141, align 1
  %143 = icmp slt i8 %142, 0
  br i1 %143, label %144, label %147

144:                                              ; preds = %138
  %145 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %139, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %146 = load i8*, i8** %145, align 8
  call void @_ZdlPv(i8* %146) #9
  br label %147

147:                                              ; preds = %138, %144
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %8) #8
  %148 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %5, align 8
  %149 = icmp eq %"class.base::BasicStringPiece"* %148, null
  br i1 %149, label %153, label %150

150:                                              ; preds = %147
  %151 = ptrtoint %"class.base::BasicStringPiece"* %148 to i64
  store i64 %151, i64* %123, align 8
  %152 = bitcast %"class.base::BasicStringPiece"* %148 to i8*
  call void @_ZdlPv(i8* %152) #9
  br label %153

153:                                              ; preds = %147, %150
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN4base3CPUC1Ev(%"class.base::CPU"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN4base10JoinStringENS_4spanIKNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEELm18446744073709551615EEES5_(%"class.std::__1::basic_string"* sret, i64, %"class.base::BasicStringPiece"*, i8*, i64) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
