; ModuleID = '../../third_party/webrtc/modules/audio_processing/aec3/alignment_mixer.cc'
source_filename = "../../third_party/webrtc/modules/audio_processing/aec3/alignment_mixer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.webrtc::AlignmentMixer" = type { i64, float, float, i8, i32, %"struct.std::__1::array", %"class.std::__1::vector", i32, i64 }
%"struct.std::__1::array" = type { [2 x i64] }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { float*, float*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { float* }
%"struct.webrtc::EchoCanceller3Config::Delay::AlignmentMixing" = type { i8, i8, float, i8 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm = comdat any

@_ZN6webrtc14AlignmentMixerC1EmRKNS_20EchoCanceller3Config5Delay15AlignmentMixingE = hidden unnamed_addr alias void (%"class.webrtc::AlignmentMixer"*, i64, %"struct.webrtc::EchoCanceller3Config::Delay::AlignmentMixing"*), void (%"class.webrtc::AlignmentMixer"*, i64, %"struct.webrtc::EchoCanceller3Config::Delay::AlignmentMixing"*)* @_ZN6webrtc14AlignmentMixerC2EmRKNS_20EchoCanceller3Config5Delay15AlignmentMixingE
@_ZN6webrtc14AlignmentMixerC1Embbfb = hidden unnamed_addr alias void (%"class.webrtc::AlignmentMixer"*, i64, i1, i1, float, i1), void (%"class.webrtc::AlignmentMixer"*, i64, i1, i1, float, i1)* @_ZN6webrtc14AlignmentMixerC2Embbfb

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc14AlignmentMixerC2EmRKNS_20EchoCanceller3Config5Delay15AlignmentMixingE(%"class.webrtc::AlignmentMixer"*, i64, %"struct.webrtc::EchoCanceller3Config::Delay::AlignmentMixing"* nocapture readonly dereferenceable(12)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"struct.webrtc::EchoCanceller3Config::Delay::AlignmentMixing", %"struct.webrtc::EchoCanceller3Config::Delay::AlignmentMixing"* %2, i64 0, i32 0
  %5 = load i8, i8* %4, align 4, !range !2
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %"struct.webrtc::EchoCanceller3Config::Delay::AlignmentMixing", %"struct.webrtc::EchoCanceller3Config::Delay::AlignmentMixing"* %2, i64 0, i32 1
  %8 = load i8, i8* %7, align 1, !range !2
  %9 = icmp eq i8 %8, 0
  %10 = getelementptr inbounds %"struct.webrtc::EchoCanceller3Config::Delay::AlignmentMixing", %"struct.webrtc::EchoCanceller3Config::Delay::AlignmentMixing"* %2, i64 0, i32 2
  %11 = load float, float* %10, align 4
  %12 = getelementptr inbounds %"struct.webrtc::EchoCanceller3Config::Delay::AlignmentMixing", %"struct.webrtc::EchoCanceller3Config::Delay::AlignmentMixing"* %2, i64 0, i32 3
  %13 = load i8, i8* %12, align 4, !range !2
  %14 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 0
  store i64 %1, i64* %14, align 8
  %15 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 1
  %16 = uitofp i64 %1 to float
  %17 = fdiv float 1.000000e+00, %16
  store float %17, float* %15, align 8
  %18 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 2
  %19 = fmul float %11, 6.400000e+01
  store float %19, float* %18, align 4
  %20 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 3
  store i8 %13, i8* %20, align 8
  %21 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 4
  %22 = trunc i64 %1 to i32
  %23 = icmp eq i32 %22, 1
  %24 = select i1 %9, i32 2, i32 1
  %25 = select i1 %6, i32 %24, i32 0
  %26 = select i1 %23, i32 2, i32 %25
  store i32 %26, i32* %21, align 4
  %27 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 6
  %28 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 8
  store i64 0, i64* %28, align 8
  %29 = icmp eq i32 %26, 1
  %30 = bitcast %"class.std::__1::vector"* %27 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 28, i1 false) #7
  br i1 %29, label %31, label %55

31:                                               ; preds = %3
  %32 = getelementptr %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 5, i32 0, i64 0
  %33 = bitcast i64* %32 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 16, i1 false) #7
  %34 = icmp eq i64 %1, 0
  br i1 %34, label %43, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 6, i32 0, i32 1
  %37 = bitcast float** %36 to i64*
  tail call void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm(%"class.std::__1::vector"* %27, i64 %1) #7
  %38 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %27, i64 0, i32 0, i32 0
  %39 = load float*, float** %38, align 8
  %40 = bitcast float* %39 to i8*
  %41 = load i64, i64* %37, align 8
  %42 = ptrtoint float* %39 to i64
  br label %43

43:                                               ; preds = %35, %31
  %44 = phi i64 [ %41, %35 ], [ 0, %31 ]
  %45 = phi i8* [ %40, %35 ], [ null, %31 ]
  %46 = phi i64 [ %42, %35 ], [ 0, %31 ]
  %47 = sub i64 %44, %46
  %48 = icmp sgt i64 %47, 0
  br i1 %48, label %49, label %55

49:                                               ; preds = %43
  %50 = and i64 %47, -4
  %51 = icmp ult i64 %47, 4
  %52 = sext i1 %51 to i64
  %53 = shl nsw i64 %52, 2
  %54 = sub i64 %50, %53
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %45, i8 0, i64 %54, i1 false) #7
  br label %55

55:                                               ; preds = %3, %43, %49
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc14AlignmentMixerC2Embbfb(%"class.webrtc::AlignmentMixer"*, i64, i1 zeroext, i1 zeroext, float, i1 zeroext) unnamed_addr #0 align 2 {
  %7 = zext i1 %5 to i8
  %8 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 0
  store i64 %1, i64* %8, align 8
  %9 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 1
  %10 = uitofp i64 %1 to float
  %11 = fdiv float 1.000000e+00, %10
  store float %11, float* %9, align 8
  %12 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 2
  %13 = fmul float %4, 6.400000e+01
  store float %13, float* %12, align 4
  %14 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 3
  store i8 %7, i8* %14, align 8
  %15 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 4
  %16 = trunc i64 %1 to i32
  %17 = icmp eq i32 %16, 1
  %18 = select i1 %3, i32 1, i32 2
  %19 = select i1 %2, i32 0, i32 %18
  %20 = select i1 %17, i32 2, i32 %19
  store i32 %20, i32* %15, align 4
  %21 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 6
  %22 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 8
  store i64 0, i64* %22, align 8
  %23 = icmp eq i32 %20, 1
  %24 = bitcast %"class.std::__1::vector"* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 28, i1 false)
  br i1 %23, label %25, label %49

25:                                               ; preds = %6
  %26 = getelementptr %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 5, i32 0, i64 0
  %27 = bitcast i64* %26 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %27, i8 0, i64 16, i1 false)
  %28 = icmp eq i64 %1, 0
  br i1 %28, label %37, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 6, i32 0, i32 1
  %31 = bitcast float** %30 to i64*
  tail call void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm(%"class.std::__1::vector"* %21, i64 %1) #7
  %32 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %21, i64 0, i32 0, i32 0
  %33 = load float*, float** %32, align 8
  %34 = bitcast float* %33 to i8*
  %35 = load i64, i64* %31, align 8
  %36 = ptrtoint float* %33 to i64
  br label %37

37:                                               ; preds = %25, %29
  %38 = phi i64 [ %35, %29 ], [ 0, %25 ]
  %39 = phi i8* [ %34, %29 ], [ null, %25 ]
  %40 = phi i64 [ %36, %29 ], [ 0, %25 ]
  %41 = sub i64 %38, %40
  %42 = icmp sgt i64 %41, 0
  br i1 %42, label %43, label %49

43:                                               ; preds = %37
  %44 = and i64 %41, -4
  %45 = icmp ult i64 %41, 4
  %46 = sext i1 %45 to i64
  %47 = shl nsw i64 %46, 2
  %48 = sub i64 %44, %47
  call void @llvm.memset.p0i8.i64(i8* align 4 %39, i8 0, i64 %48, i1 false)
  br label %49

49:                                               ; preds = %43, %37, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc14AlignmentMixer13ProduceOutputEN3rtc9ArrayViewIKNSt3__16vectorIfNS3_9allocatorIfEEEELln4711EEENS2_IfLl64EEE(%"class.webrtc::AlignmentMixer"* nocapture, %"class.std::__1::vector"*, i64, float*) local_unnamed_addr #0 align 2 {
  %5 = bitcast float* %3 to i8*
  %6 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 4
  %7 = load i32, i32* %6, align 4
  switch i32 %7, label %209 [
    i32 0, label %8
    i32 2, label %214
  ]

8:                                                ; preds = %4
  %9 = icmp eq i64 %2, 0
  %10 = select i1 %9, %"class.std::__1::vector"* null, %"class.std::__1::vector"* %1
  %11 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %10, i64 0, i32 0, i32 0
  %12 = load float*, float** %11, align 8
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %10, i64 0, i32 0, i32 1
  %14 = bitcast float** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = ptrtoint float* %12 to i64
  %17 = sub i64 %15, %16
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %21, label %19

19:                                               ; preds = %8
  %20 = bitcast float* %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %5, i8* align 4 %20, i64 %17, i1 false) #7
  br label %21

21:                                               ; preds = %19, %8
  %22 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = icmp ugt i64 %23, 1
  br i1 %24, label %25, label %28

25:                                               ; preds = %21, %165
  %26 = phi i64 [ %166, %165 ], [ 1, %21 ]
  %27 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %10, i64 %26, i32 0, i32 0
  br label %169

28:                                               ; preds = %165, %21
  %29 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 1
  %30 = getelementptr float, float* %3, i64 64
  %31 = getelementptr %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 1
  %32 = bitcast float* %31 to i8*
  %33 = getelementptr i8, i8* %32, i64 1
  %34 = icmp ugt i8* %33, %5
  %35 = icmp ult float* %29, %30
  %36 = and i1 %34, %35
  br i1 %36, label %186, label %37

37:                                               ; preds = %28
  %38 = load float, float* %29, align 8, !alias.scope !3
  %39 = insertelement <4 x float> undef, float %38, i32 0
  %40 = shufflevector <4 x float> %39, <4 x float> undef, <4 x i32> zeroinitializer
  %41 = bitcast float* %3 to <4 x float>*
  %42 = load <4 x float>, <4 x float>* %41, align 4, !alias.scope !6, !noalias !3
  %43 = fmul <4 x float> %40, %42
  %44 = bitcast float* %3 to <4 x float>*
  store <4 x float> %43, <4 x float>* %44, align 4, !alias.scope !6, !noalias !3
  %45 = load float, float* %29, align 8, !alias.scope !3
  %46 = insertelement <4 x float> undef, float %45, i32 0
  %47 = shufflevector <4 x float> %46, <4 x float> undef, <4 x i32> zeroinitializer
  %48 = getelementptr inbounds float, float* %3, i64 4
  %49 = bitcast float* %48 to <4 x float>*
  %50 = load <4 x float>, <4 x float>* %49, align 4, !alias.scope !6, !noalias !3
  %51 = fmul <4 x float> %47, %50
  %52 = bitcast float* %48 to <4 x float>*
  store <4 x float> %51, <4 x float>* %52, align 4, !alias.scope !6, !noalias !3
  %53 = load float, float* %29, align 8, !alias.scope !3
  %54 = insertelement <4 x float> undef, float %53, i32 0
  %55 = shufflevector <4 x float> %54, <4 x float> undef, <4 x i32> zeroinitializer
  %56 = getelementptr inbounds float, float* %3, i64 8
  %57 = bitcast float* %56 to <4 x float>*
  %58 = load <4 x float>, <4 x float>* %57, align 4, !alias.scope !6, !noalias !3
  %59 = fmul <4 x float> %55, %58
  %60 = bitcast float* %56 to <4 x float>*
  store <4 x float> %59, <4 x float>* %60, align 4, !alias.scope !6, !noalias !3
  %61 = load float, float* %29, align 8, !alias.scope !3
  %62 = insertelement <4 x float> undef, float %61, i32 0
  %63 = shufflevector <4 x float> %62, <4 x float> undef, <4 x i32> zeroinitializer
  %64 = getelementptr inbounds float, float* %3, i64 12
  %65 = bitcast float* %64 to <4 x float>*
  %66 = load <4 x float>, <4 x float>* %65, align 4, !alias.scope !6, !noalias !3
  %67 = fmul <4 x float> %63, %66
  %68 = bitcast float* %64 to <4 x float>*
  store <4 x float> %67, <4 x float>* %68, align 4, !alias.scope !6, !noalias !3
  %69 = load float, float* %29, align 8, !alias.scope !3
  %70 = insertelement <4 x float> undef, float %69, i32 0
  %71 = shufflevector <4 x float> %70, <4 x float> undef, <4 x i32> zeroinitializer
  %72 = getelementptr inbounds float, float* %3, i64 16
  %73 = bitcast float* %72 to <4 x float>*
  %74 = load <4 x float>, <4 x float>* %73, align 4, !alias.scope !6, !noalias !3
  %75 = fmul <4 x float> %71, %74
  %76 = bitcast float* %72 to <4 x float>*
  store <4 x float> %75, <4 x float>* %76, align 4, !alias.scope !6, !noalias !3
  %77 = load float, float* %29, align 8, !alias.scope !3
  %78 = insertelement <4 x float> undef, float %77, i32 0
  %79 = shufflevector <4 x float> %78, <4 x float> undef, <4 x i32> zeroinitializer
  %80 = getelementptr inbounds float, float* %3, i64 20
  %81 = bitcast float* %80 to <4 x float>*
  %82 = load <4 x float>, <4 x float>* %81, align 4, !alias.scope !6, !noalias !3
  %83 = fmul <4 x float> %79, %82
  %84 = bitcast float* %80 to <4 x float>*
  store <4 x float> %83, <4 x float>* %84, align 4, !alias.scope !6, !noalias !3
  %85 = load float, float* %29, align 8, !alias.scope !3
  %86 = insertelement <4 x float> undef, float %85, i32 0
  %87 = shufflevector <4 x float> %86, <4 x float> undef, <4 x i32> zeroinitializer
  %88 = getelementptr inbounds float, float* %3, i64 24
  %89 = bitcast float* %88 to <4 x float>*
  %90 = load <4 x float>, <4 x float>* %89, align 4, !alias.scope !6, !noalias !3
  %91 = fmul <4 x float> %87, %90
  %92 = bitcast float* %88 to <4 x float>*
  store <4 x float> %91, <4 x float>* %92, align 4, !alias.scope !6, !noalias !3
  %93 = load float, float* %29, align 8, !alias.scope !3
  %94 = insertelement <4 x float> undef, float %93, i32 0
  %95 = shufflevector <4 x float> %94, <4 x float> undef, <4 x i32> zeroinitializer
  %96 = getelementptr inbounds float, float* %3, i64 28
  %97 = bitcast float* %96 to <4 x float>*
  %98 = load <4 x float>, <4 x float>* %97, align 4, !alias.scope !6, !noalias !3
  %99 = fmul <4 x float> %95, %98
  %100 = bitcast float* %96 to <4 x float>*
  store <4 x float> %99, <4 x float>* %100, align 4, !alias.scope !6, !noalias !3
  %101 = load float, float* %29, align 8, !alias.scope !3
  %102 = insertelement <4 x float> undef, float %101, i32 0
  %103 = shufflevector <4 x float> %102, <4 x float> undef, <4 x i32> zeroinitializer
  %104 = getelementptr inbounds float, float* %3, i64 32
  %105 = bitcast float* %104 to <4 x float>*
  %106 = load <4 x float>, <4 x float>* %105, align 4, !alias.scope !6, !noalias !3
  %107 = fmul <4 x float> %103, %106
  %108 = bitcast float* %104 to <4 x float>*
  store <4 x float> %107, <4 x float>* %108, align 4, !alias.scope !6, !noalias !3
  %109 = load float, float* %29, align 8, !alias.scope !3
  %110 = insertelement <4 x float> undef, float %109, i32 0
  %111 = shufflevector <4 x float> %110, <4 x float> undef, <4 x i32> zeroinitializer
  %112 = getelementptr inbounds float, float* %3, i64 36
  %113 = bitcast float* %112 to <4 x float>*
  %114 = load <4 x float>, <4 x float>* %113, align 4, !alias.scope !6, !noalias !3
  %115 = fmul <4 x float> %111, %114
  %116 = bitcast float* %112 to <4 x float>*
  store <4 x float> %115, <4 x float>* %116, align 4, !alias.scope !6, !noalias !3
  %117 = load float, float* %29, align 8, !alias.scope !3
  %118 = insertelement <4 x float> undef, float %117, i32 0
  %119 = shufflevector <4 x float> %118, <4 x float> undef, <4 x i32> zeroinitializer
  %120 = getelementptr inbounds float, float* %3, i64 40
  %121 = bitcast float* %120 to <4 x float>*
  %122 = load <4 x float>, <4 x float>* %121, align 4, !alias.scope !6, !noalias !3
  %123 = fmul <4 x float> %119, %122
  %124 = bitcast float* %120 to <4 x float>*
  store <4 x float> %123, <4 x float>* %124, align 4, !alias.scope !6, !noalias !3
  %125 = load float, float* %29, align 8, !alias.scope !3
  %126 = insertelement <4 x float> undef, float %125, i32 0
  %127 = shufflevector <4 x float> %126, <4 x float> undef, <4 x i32> zeroinitializer
  %128 = getelementptr inbounds float, float* %3, i64 44
  %129 = bitcast float* %128 to <4 x float>*
  %130 = load <4 x float>, <4 x float>* %129, align 4, !alias.scope !6, !noalias !3
  %131 = fmul <4 x float> %127, %130
  %132 = bitcast float* %128 to <4 x float>*
  store <4 x float> %131, <4 x float>* %132, align 4, !alias.scope !6, !noalias !3
  %133 = load float, float* %29, align 8, !alias.scope !3
  %134 = insertelement <4 x float> undef, float %133, i32 0
  %135 = shufflevector <4 x float> %134, <4 x float> undef, <4 x i32> zeroinitializer
  %136 = getelementptr inbounds float, float* %3, i64 48
  %137 = bitcast float* %136 to <4 x float>*
  %138 = load <4 x float>, <4 x float>* %137, align 4, !alias.scope !6, !noalias !3
  %139 = fmul <4 x float> %135, %138
  %140 = bitcast float* %136 to <4 x float>*
  store <4 x float> %139, <4 x float>* %140, align 4, !alias.scope !6, !noalias !3
  %141 = load float, float* %29, align 8, !alias.scope !3
  %142 = insertelement <4 x float> undef, float %141, i32 0
  %143 = shufflevector <4 x float> %142, <4 x float> undef, <4 x i32> zeroinitializer
  %144 = getelementptr inbounds float, float* %3, i64 52
  %145 = bitcast float* %144 to <4 x float>*
  %146 = load <4 x float>, <4 x float>* %145, align 4, !alias.scope !6, !noalias !3
  %147 = fmul <4 x float> %143, %146
  %148 = bitcast float* %144 to <4 x float>*
  store <4 x float> %147, <4 x float>* %148, align 4, !alias.scope !6, !noalias !3
  %149 = load float, float* %29, align 8, !alias.scope !3
  %150 = insertelement <4 x float> undef, float %149, i32 0
  %151 = shufflevector <4 x float> %150, <4 x float> undef, <4 x i32> zeroinitializer
  %152 = getelementptr inbounds float, float* %3, i64 56
  %153 = bitcast float* %152 to <4 x float>*
  %154 = load <4 x float>, <4 x float>* %153, align 4, !alias.scope !6, !noalias !3
  %155 = fmul <4 x float> %151, %154
  %156 = bitcast float* %152 to <4 x float>*
  store <4 x float> %155, <4 x float>* %156, align 4, !alias.scope !6, !noalias !3
  %157 = load float, float* %29, align 8, !alias.scope !3
  %158 = insertelement <4 x float> undef, float %157, i32 0
  %159 = shufflevector <4 x float> %158, <4 x float> undef, <4 x i32> zeroinitializer
  %160 = getelementptr inbounds float, float* %3, i64 60
  %161 = bitcast float* %160 to <4 x float>*
  %162 = load <4 x float>, <4 x float>* %161, align 4, !alias.scope !6, !noalias !3
  %163 = fmul <4 x float> %159, %162
  %164 = bitcast float* %160 to <4 x float>*
  store <4 x float> %163, <4 x float>* %164, align 4, !alias.scope !6, !noalias !3
  br label %227

165:                                              ; preds = %169
  %166 = add nuw i64 %26, 1
  %167 = load i64, i64* %22, align 8
  %168 = icmp ult i64 %166, %167
  br i1 %168, label %25, label %28

169:                                              ; preds = %169, %25
  %170 = phi i64 [ 0, %25 ], [ %184, %169 ]
  %171 = load float*, float** %27, align 8
  %172 = getelementptr inbounds float, float* %171, i64 %170
  %173 = load float, float* %172, align 4
  %174 = getelementptr inbounds float, float* %3, i64 %170
  %175 = load float, float* %174, align 4
  %176 = fadd float %173, %175
  store float %176, float* %174, align 4
  %177 = or i64 %170, 1
  %178 = load float*, float** %27, align 8
  %179 = getelementptr inbounds float, float* %178, i64 %177
  %180 = load float, float* %179, align 4
  %181 = getelementptr inbounds float, float* %3, i64 %177
  %182 = load float, float* %181, align 4
  %183 = fadd float %180, %182
  store float %183, float* %181, align 4
  %184 = add nuw nsw i64 %170, 2
  %185 = icmp eq i64 %184, 64
  br i1 %185, label %165, label %169

186:                                              ; preds = %28, %186
  %187 = phi i64 [ %207, %186 ], [ 0, %28 ]
  %188 = load float, float* %29, align 8
  %189 = getelementptr inbounds float, float* %3, i64 %187
  %190 = load float, float* %189, align 4
  %191 = fmul float %188, %190
  store float %191, float* %189, align 4
  %192 = or i64 %187, 1
  %193 = load float, float* %29, align 8
  %194 = getelementptr inbounds float, float* %3, i64 %192
  %195 = load float, float* %194, align 4
  %196 = fmul float %193, %195
  store float %196, float* %194, align 4
  %197 = or i64 %187, 2
  %198 = load float, float* %29, align 8
  %199 = getelementptr inbounds float, float* %3, i64 %197
  %200 = load float, float* %199, align 4
  %201 = fmul float %198, %200
  store float %201, float* %199, align 4
  %202 = or i64 %187, 3
  %203 = load float, float* %29, align 8
  %204 = getelementptr inbounds float, float* %3, i64 %202
  %205 = load float, float* %204, align 4
  %206 = fmul float %203, %205
  store float %206, float* %204, align 4
  %207 = add nuw nsw i64 %187, 4
  %208 = icmp eq i64 %207, 64
  br i1 %208, label %227, label %186, !llvm.loop !8

209:                                              ; preds = %4
  %210 = icmp eq i64 %2, 0
  %211 = select i1 %210, %"class.std::__1::vector"* null, %"class.std::__1::vector"* %1
  %212 = tail call i32 @_ZN6webrtc14AlignmentMixer13SelectChannelEN3rtc9ArrayViewIKNSt3__16vectorIfNS3_9allocatorIfEEEELln4711EEE(%"class.webrtc::AlignmentMixer"* %0, %"class.std::__1::vector"* %211, i64 %2)
  %213 = sext i32 %212 to i64
  br label %214

214:                                              ; preds = %4, %209
  %215 = phi i64 [ %213, %209 ], [ 0, %4 ]
  %216 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 %215, i32 0, i32 0
  %217 = load float*, float** %216, align 8
  %218 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 %215, i32 0, i32 1
  %219 = bitcast float** %218 to i64*
  %220 = load i64, i64* %219, align 8
  %221 = ptrtoint float* %217 to i64
  %222 = sub i64 %220, %221
  %223 = icmp eq i64 %222, 0
  br i1 %223, label %227, label %224

224:                                              ; preds = %214
  %225 = bitcast float* %3 to i8*
  %226 = bitcast float* %217 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %225, i8* align 4 %226, i64 %222, i1 false) #7
  br label %227

227:                                              ; preds = %186, %37, %224, %214
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6webrtc14AlignmentMixer7DownmixEN3rtc9ArrayViewIKNSt3__16vectorIfNS3_9allocatorIfEEEELln4711EEENS2_IfLl64EEE(%"class.webrtc::AlignmentMixer"* nocapture readonly, %"class.std::__1::vector"*, i64, float*) local_unnamed_addr #0 align 2 {
  %5 = bitcast float* %3 to i8*
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %9 = bitcast float** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = ptrtoint float* %7 to i64
  %12 = sub i64 %10, %11
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %16, label %14

14:                                               ; preds = %4
  %15 = bitcast float* %7 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %5, i8* align 4 %15, i64 %12, i1 false) #7
  br label %16

16:                                               ; preds = %4, %14
  %17 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = icmp ugt i64 %18, 1
  br i1 %19, label %20, label %23

20:                                               ; preds = %16, %160
  %21 = phi i64 [ %161, %160 ], [ 1, %16 ]
  %22 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 %21, i32 0, i32 0
  br label %164

23:                                               ; preds = %160, %16
  %24 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 1
  %25 = getelementptr float, float* %3, i64 64
  %26 = getelementptr %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 1
  %27 = bitcast float* %26 to i8*
  %28 = getelementptr i8, i8* %27, i64 1
  %29 = icmp ugt i8* %28, %5
  %30 = icmp ult float* %24, %25
  %31 = and i1 %29, %30
  br i1 %31, label %182, label %32

32:                                               ; preds = %23
  %33 = load float, float* %24, align 8, !alias.scope !10
  %34 = insertelement <4 x float> undef, float %33, i32 0
  %35 = shufflevector <4 x float> %34, <4 x float> undef, <4 x i32> zeroinitializer
  %36 = bitcast float* %3 to <4 x float>*
  %37 = load <4 x float>, <4 x float>* %36, align 4, !alias.scope !13, !noalias !10
  %38 = fmul <4 x float> %35, %37
  %39 = bitcast float* %3 to <4 x float>*
  store <4 x float> %38, <4 x float>* %39, align 4, !alias.scope !13, !noalias !10
  %40 = load float, float* %24, align 8, !alias.scope !10
  %41 = insertelement <4 x float> undef, float %40, i32 0
  %42 = shufflevector <4 x float> %41, <4 x float> undef, <4 x i32> zeroinitializer
  %43 = getelementptr inbounds float, float* %3, i64 4
  %44 = bitcast float* %43 to <4 x float>*
  %45 = load <4 x float>, <4 x float>* %44, align 4, !alias.scope !13, !noalias !10
  %46 = fmul <4 x float> %42, %45
  %47 = bitcast float* %43 to <4 x float>*
  store <4 x float> %46, <4 x float>* %47, align 4, !alias.scope !13, !noalias !10
  %48 = load float, float* %24, align 8, !alias.scope !10
  %49 = insertelement <4 x float> undef, float %48, i32 0
  %50 = shufflevector <4 x float> %49, <4 x float> undef, <4 x i32> zeroinitializer
  %51 = getelementptr inbounds float, float* %3, i64 8
  %52 = bitcast float* %51 to <4 x float>*
  %53 = load <4 x float>, <4 x float>* %52, align 4, !alias.scope !13, !noalias !10
  %54 = fmul <4 x float> %50, %53
  %55 = bitcast float* %51 to <4 x float>*
  store <4 x float> %54, <4 x float>* %55, align 4, !alias.scope !13, !noalias !10
  %56 = load float, float* %24, align 8, !alias.scope !10
  %57 = insertelement <4 x float> undef, float %56, i32 0
  %58 = shufflevector <4 x float> %57, <4 x float> undef, <4 x i32> zeroinitializer
  %59 = getelementptr inbounds float, float* %3, i64 12
  %60 = bitcast float* %59 to <4 x float>*
  %61 = load <4 x float>, <4 x float>* %60, align 4, !alias.scope !13, !noalias !10
  %62 = fmul <4 x float> %58, %61
  %63 = bitcast float* %59 to <4 x float>*
  store <4 x float> %62, <4 x float>* %63, align 4, !alias.scope !13, !noalias !10
  %64 = load float, float* %24, align 8, !alias.scope !10
  %65 = insertelement <4 x float> undef, float %64, i32 0
  %66 = shufflevector <4 x float> %65, <4 x float> undef, <4 x i32> zeroinitializer
  %67 = getelementptr inbounds float, float* %3, i64 16
  %68 = bitcast float* %67 to <4 x float>*
  %69 = load <4 x float>, <4 x float>* %68, align 4, !alias.scope !13, !noalias !10
  %70 = fmul <4 x float> %66, %69
  %71 = bitcast float* %67 to <4 x float>*
  store <4 x float> %70, <4 x float>* %71, align 4, !alias.scope !13, !noalias !10
  %72 = load float, float* %24, align 8, !alias.scope !10
  %73 = insertelement <4 x float> undef, float %72, i32 0
  %74 = shufflevector <4 x float> %73, <4 x float> undef, <4 x i32> zeroinitializer
  %75 = getelementptr inbounds float, float* %3, i64 20
  %76 = bitcast float* %75 to <4 x float>*
  %77 = load <4 x float>, <4 x float>* %76, align 4, !alias.scope !13, !noalias !10
  %78 = fmul <4 x float> %74, %77
  %79 = bitcast float* %75 to <4 x float>*
  store <4 x float> %78, <4 x float>* %79, align 4, !alias.scope !13, !noalias !10
  %80 = load float, float* %24, align 8, !alias.scope !10
  %81 = insertelement <4 x float> undef, float %80, i32 0
  %82 = shufflevector <4 x float> %81, <4 x float> undef, <4 x i32> zeroinitializer
  %83 = getelementptr inbounds float, float* %3, i64 24
  %84 = bitcast float* %83 to <4 x float>*
  %85 = load <4 x float>, <4 x float>* %84, align 4, !alias.scope !13, !noalias !10
  %86 = fmul <4 x float> %82, %85
  %87 = bitcast float* %83 to <4 x float>*
  store <4 x float> %86, <4 x float>* %87, align 4, !alias.scope !13, !noalias !10
  %88 = load float, float* %24, align 8, !alias.scope !10
  %89 = insertelement <4 x float> undef, float %88, i32 0
  %90 = shufflevector <4 x float> %89, <4 x float> undef, <4 x i32> zeroinitializer
  %91 = getelementptr inbounds float, float* %3, i64 28
  %92 = bitcast float* %91 to <4 x float>*
  %93 = load <4 x float>, <4 x float>* %92, align 4, !alias.scope !13, !noalias !10
  %94 = fmul <4 x float> %90, %93
  %95 = bitcast float* %91 to <4 x float>*
  store <4 x float> %94, <4 x float>* %95, align 4, !alias.scope !13, !noalias !10
  %96 = load float, float* %24, align 8, !alias.scope !10
  %97 = insertelement <4 x float> undef, float %96, i32 0
  %98 = shufflevector <4 x float> %97, <4 x float> undef, <4 x i32> zeroinitializer
  %99 = getelementptr inbounds float, float* %3, i64 32
  %100 = bitcast float* %99 to <4 x float>*
  %101 = load <4 x float>, <4 x float>* %100, align 4, !alias.scope !13, !noalias !10
  %102 = fmul <4 x float> %98, %101
  %103 = bitcast float* %99 to <4 x float>*
  store <4 x float> %102, <4 x float>* %103, align 4, !alias.scope !13, !noalias !10
  %104 = load float, float* %24, align 8, !alias.scope !10
  %105 = insertelement <4 x float> undef, float %104, i32 0
  %106 = shufflevector <4 x float> %105, <4 x float> undef, <4 x i32> zeroinitializer
  %107 = getelementptr inbounds float, float* %3, i64 36
  %108 = bitcast float* %107 to <4 x float>*
  %109 = load <4 x float>, <4 x float>* %108, align 4, !alias.scope !13, !noalias !10
  %110 = fmul <4 x float> %106, %109
  %111 = bitcast float* %107 to <4 x float>*
  store <4 x float> %110, <4 x float>* %111, align 4, !alias.scope !13, !noalias !10
  %112 = load float, float* %24, align 8, !alias.scope !10
  %113 = insertelement <4 x float> undef, float %112, i32 0
  %114 = shufflevector <4 x float> %113, <4 x float> undef, <4 x i32> zeroinitializer
  %115 = getelementptr inbounds float, float* %3, i64 40
  %116 = bitcast float* %115 to <4 x float>*
  %117 = load <4 x float>, <4 x float>* %116, align 4, !alias.scope !13, !noalias !10
  %118 = fmul <4 x float> %114, %117
  %119 = bitcast float* %115 to <4 x float>*
  store <4 x float> %118, <4 x float>* %119, align 4, !alias.scope !13, !noalias !10
  %120 = load float, float* %24, align 8, !alias.scope !10
  %121 = insertelement <4 x float> undef, float %120, i32 0
  %122 = shufflevector <4 x float> %121, <4 x float> undef, <4 x i32> zeroinitializer
  %123 = getelementptr inbounds float, float* %3, i64 44
  %124 = bitcast float* %123 to <4 x float>*
  %125 = load <4 x float>, <4 x float>* %124, align 4, !alias.scope !13, !noalias !10
  %126 = fmul <4 x float> %122, %125
  %127 = bitcast float* %123 to <4 x float>*
  store <4 x float> %126, <4 x float>* %127, align 4, !alias.scope !13, !noalias !10
  %128 = load float, float* %24, align 8, !alias.scope !10
  %129 = insertelement <4 x float> undef, float %128, i32 0
  %130 = shufflevector <4 x float> %129, <4 x float> undef, <4 x i32> zeroinitializer
  %131 = getelementptr inbounds float, float* %3, i64 48
  %132 = bitcast float* %131 to <4 x float>*
  %133 = load <4 x float>, <4 x float>* %132, align 4, !alias.scope !13, !noalias !10
  %134 = fmul <4 x float> %130, %133
  %135 = bitcast float* %131 to <4 x float>*
  store <4 x float> %134, <4 x float>* %135, align 4, !alias.scope !13, !noalias !10
  %136 = load float, float* %24, align 8, !alias.scope !10
  %137 = insertelement <4 x float> undef, float %136, i32 0
  %138 = shufflevector <4 x float> %137, <4 x float> undef, <4 x i32> zeroinitializer
  %139 = getelementptr inbounds float, float* %3, i64 52
  %140 = bitcast float* %139 to <4 x float>*
  %141 = load <4 x float>, <4 x float>* %140, align 4, !alias.scope !13, !noalias !10
  %142 = fmul <4 x float> %138, %141
  %143 = bitcast float* %139 to <4 x float>*
  store <4 x float> %142, <4 x float>* %143, align 4, !alias.scope !13, !noalias !10
  %144 = load float, float* %24, align 8, !alias.scope !10
  %145 = insertelement <4 x float> undef, float %144, i32 0
  %146 = shufflevector <4 x float> %145, <4 x float> undef, <4 x i32> zeroinitializer
  %147 = getelementptr inbounds float, float* %3, i64 56
  %148 = bitcast float* %147 to <4 x float>*
  %149 = load <4 x float>, <4 x float>* %148, align 4, !alias.scope !13, !noalias !10
  %150 = fmul <4 x float> %146, %149
  %151 = bitcast float* %147 to <4 x float>*
  store <4 x float> %150, <4 x float>* %151, align 4, !alias.scope !13, !noalias !10
  %152 = load float, float* %24, align 8, !alias.scope !10
  %153 = insertelement <4 x float> undef, float %152, i32 0
  %154 = shufflevector <4 x float> %153, <4 x float> undef, <4 x i32> zeroinitializer
  %155 = getelementptr inbounds float, float* %3, i64 60
  %156 = bitcast float* %155 to <4 x float>*
  %157 = load <4 x float>, <4 x float>* %156, align 4, !alias.scope !13, !noalias !10
  %158 = fmul <4 x float> %154, %157
  %159 = bitcast float* %155 to <4 x float>*
  store <4 x float> %158, <4 x float>* %159, align 4, !alias.scope !13, !noalias !10
  br label %181

160:                                              ; preds = %164
  %161 = add nuw i64 %21, 1
  %162 = load i64, i64* %17, align 8
  %163 = icmp ult i64 %161, %162
  br i1 %163, label %20, label %23

164:                                              ; preds = %164, %20
  %165 = phi i64 [ 0, %20 ], [ %179, %164 ]
  %166 = load float*, float** %22, align 8
  %167 = getelementptr inbounds float, float* %166, i64 %165
  %168 = load float, float* %167, align 4
  %169 = getelementptr inbounds float, float* %3, i64 %165
  %170 = load float, float* %169, align 4
  %171 = fadd float %168, %170
  store float %171, float* %169, align 4
  %172 = or i64 %165, 1
  %173 = load float*, float** %22, align 8
  %174 = getelementptr inbounds float, float* %173, i64 %172
  %175 = load float, float* %174, align 4
  %176 = getelementptr inbounds float, float* %3, i64 %172
  %177 = load float, float* %176, align 4
  %178 = fadd float %175, %177
  store float %178, float* %176, align 4
  %179 = add nuw nsw i64 %165, 2
  %180 = icmp eq i64 %179, 64
  br i1 %180, label %160, label %164

181:                                              ; preds = %182, %32
  ret void

182:                                              ; preds = %23, %182
  %183 = phi i64 [ %203, %182 ], [ 0, %23 ]
  %184 = load float, float* %24, align 8
  %185 = getelementptr inbounds float, float* %3, i64 %183
  %186 = load float, float* %185, align 4
  %187 = fmul float %184, %186
  store float %187, float* %185, align 4
  %188 = or i64 %183, 1
  %189 = load float, float* %24, align 8
  %190 = getelementptr inbounds float, float* %3, i64 %188
  %191 = load float, float* %190, align 4
  %192 = fmul float %189, %191
  store float %192, float* %190, align 4
  %193 = or i64 %183, 2
  %194 = load float, float* %24, align 8
  %195 = getelementptr inbounds float, float* %3, i64 %193
  %196 = load float, float* %195, align 4
  %197 = fmul float %194, %196
  store float %197, float* %195, align 4
  %198 = or i64 %183, 3
  %199 = load float, float* %24, align 8
  %200 = getelementptr inbounds float, float* %3, i64 %198
  %201 = load float, float* %200, align 4
  %202 = fmul float %199, %201
  store float %202, float* %200, align 4
  %203 = add nuw nsw i64 %183, 4
  %204 = icmp eq i64 %203, 64
  br i1 %204, label %181, label %182, !llvm.loop !15
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN6webrtc14AlignmentMixer13SelectChannelEN3rtc9ArrayViewIKNSt3__16vectorIfNS3_9allocatorIfEEEELln4711EEE(%"class.webrtc::AlignmentMixer"* nocapture, %"class.std::__1::vector"*, i64) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 3
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %19, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 5, i32 0, i64 0
  %9 = load i64, i64* %8, align 8
  %10 = icmp ugt i64 %9, 125
  br i1 %10, label %15, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 5, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = icmp ugt i64 %13, 125
  br i1 %14, label %15, label %19

15:                                               ; preds = %11, %7
  %16 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 8
  %17 = load i64, i64* %16, align 8
  %18 = add i64 %17, 1
  store i64 %18, i64* %16, align 8
  br label %27

19:                                               ; preds = %11, %3
  %20 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = trunc i64 %21 to i32
  %23 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 8
  %24 = load i64, i64* %23, align 8
  %25 = add i64 %24, 1
  store i64 %25, i64* %23, align 8
  %26 = icmp sgt i32 %22, 0
  br i1 %26, label %27, label %163

27:                                               ; preds = %15, %19
  %28 = phi i64* [ %16, %15 ], [ %23, %19 ]
  %29 = phi i32 [ 2, %15 ], [ %22, %19 ]
  %30 = phi i1 [ true, %15 ], [ false, %19 ]
  %31 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 2
  %32 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 6, i32 0, i32 0
  %33 = zext i32 %29 to i64
  br label %34

34:                                               ; preds = %82, %27
  %35 = phi i64 [ 0, %27 ], [ %92, %82 ]
  %36 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 %35, i32 0, i32 0
  %37 = load float*, float** %36, align 8
  br label %51

38:                                               ; preds = %82
  %39 = load i64, i64* %28, align 8
  %40 = icmp eq i64 %39, 15000
  br i1 %40, label %41, label %132

41:                                               ; preds = %38
  %42 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 6, i32 0, i32 0
  %43 = zext i32 %29 to i64
  %44 = add nsw i64 %43, -1
  %45 = and i64 %43, 3
  %46 = icmp ult i64 %44, 3
  br i1 %46, label %119, label %47

47:                                               ; preds = %41
  %48 = sub nsw i64 %43, %45
  br label %94

49:                                               ; preds = %51
  %50 = icmp ult i64 %35, 2
  br i1 %50, label %75, label %82

51:                                               ; preds = %51, %34
  %52 = phi i64 [ 0, %34 ], [ %73, %51 ]
  %53 = phi float [ 0.000000e+00, %34 ], [ %72, %51 ]
  %54 = getelementptr inbounds float, float* %37, i64 %52
  %55 = load float, float* %54, align 4
  %56 = fmul float %55, %55
  %57 = fadd float %53, %56
  %58 = or i64 %52, 1
  %59 = getelementptr inbounds float, float* %37, i64 %58
  %60 = load float, float* %59, align 4
  %61 = fmul float %60, %60
  %62 = fadd float %57, %61
  %63 = or i64 %52, 2
  %64 = getelementptr inbounds float, float* %37, i64 %63
  %65 = load float, float* %64, align 4
  %66 = fmul float %65, %65
  %67 = fadd float %62, %66
  %68 = or i64 %52, 3
  %69 = getelementptr inbounds float, float* %37, i64 %68
  %70 = load float, float* %69, align 4
  %71 = fmul float %70, %70
  %72 = fadd float %67, %71
  %73 = add nuw nsw i64 %52, 4
  %74 = icmp eq i64 %73, 64
  br i1 %74, label %49, label %51

75:                                               ; preds = %49
  %76 = load float, float* %31, align 4
  %77 = fcmp ogt float %72, %76
  br i1 %77, label %78, label %82

78:                                               ; preds = %75
  %79 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 5, i32 0, i64 %35
  %80 = load i64, i64* %79, align 8
  %81 = add i64 %80, 1
  store i64 %81, i64* %79, align 8
  br label %82

82:                                               ; preds = %78, %75, %49
  %83 = load i64, i64* %28, align 8
  %84 = icmp ult i64 %83, 15001
  %85 = load float*, float** %32, align 8
  %86 = getelementptr inbounds float, float* %85, i64 %35
  %87 = load float, float* %86, align 4
  %88 = fsub float %72, %87
  %89 = fmul float %88, 0x3F3A36E2E0000000
  %90 = select i1 %84, float %72, float %89
  %91 = fadd float %87, %90
  store float %91, float* %86, align 4
  %92 = add nuw nsw i64 %35, 1
  %93 = icmp eq i64 %92, %33
  br i1 %93, label %38, label %34

94:                                               ; preds = %94, %47
  %95 = phi i64 [ 0, %47 ], [ %116, %94 ]
  %96 = phi i64 [ %48, %47 ], [ %117, %94 ]
  %97 = load float*, float** %42, align 8
  %98 = getelementptr inbounds float, float* %97, i64 %95
  %99 = load float, float* %98, align 4
  %100 = fmul float %99, 0x3F1179ECA0000000
  store float %100, float* %98, align 4
  %101 = or i64 %95, 1
  %102 = load float*, float** %42, align 8
  %103 = getelementptr inbounds float, float* %102, i64 %101
  %104 = load float, float* %103, align 4
  %105 = fmul float %104, 0x3F1179ECA0000000
  store float %105, float* %103, align 4
  %106 = or i64 %95, 2
  %107 = load float*, float** %42, align 8
  %108 = getelementptr inbounds float, float* %107, i64 %106
  %109 = load float, float* %108, align 4
  %110 = fmul float %109, 0x3F1179ECA0000000
  store float %110, float* %108, align 4
  %111 = or i64 %95, 3
  %112 = load float*, float** %42, align 8
  %113 = getelementptr inbounds float, float* %112, i64 %111
  %114 = load float, float* %113, align 4
  %115 = fmul float %114, 0x3F1179ECA0000000
  store float %115, float* %113, align 4
  %116 = add nuw nsw i64 %95, 4
  %117 = add i64 %96, -4
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %119, label %94

119:                                              ; preds = %94, %41
  %120 = phi i64 [ 0, %41 ], [ %116, %94 ]
  %121 = icmp eq i64 %45, 0
  br i1 %121, label %132, label %122

122:                                              ; preds = %119, %122
  %123 = phi i64 [ %129, %122 ], [ %120, %119 ]
  %124 = phi i64 [ %130, %122 ], [ %45, %119 ]
  %125 = load float*, float** %42, align 8
  %126 = getelementptr inbounds float, float* %125, i64 %123
  %127 = load float, float* %126, align 4
  %128 = fmul float %127, 0x3F1179ECA0000000
  store float %128, float* %126, align 4
  %129 = add nuw nsw i64 %123, 1
  %130 = add i64 %124, -1
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %132, label %122, !llvm.loop !16

132:                                              ; preds = %119, %122, %38
  %133 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 6, i32 0, i32 0
  %134 = load float*, float** %133, align 8
  %135 = zext i32 %29 to i64
  %136 = add nsw i64 %135, -1
  %137 = and i64 %135, 3
  %138 = icmp ult i64 %136, 3
  br i1 %138, label %141, label %139

139:                                              ; preds = %132
  %140 = sub nsw i64 %135, %137
  br label %167

141:                                              ; preds = %167, %132
  %142 = phi i32 [ undef, %132 ], [ %205, %167 ]
  %143 = phi i64 [ 0, %132 ], [ %206, %167 ]
  %144 = phi i32 [ 0, %132 ], [ %205, %167 ]
  %145 = icmp eq i64 %137, 0
  br i1 %145, label %161, label %146

146:                                              ; preds = %141, %146
  %147 = phi i64 [ %158, %146 ], [ %143, %141 ]
  %148 = phi i32 [ %157, %146 ], [ %144, %141 ]
  %149 = phi i64 [ %159, %146 ], [ %137, %141 ]
  %150 = getelementptr inbounds float, float* %134, i64 %147
  %151 = load float, float* %150, align 4
  %152 = sext i32 %148 to i64
  %153 = getelementptr inbounds float, float* %134, i64 %152
  %154 = load float, float* %153, align 4
  %155 = fcmp ogt float %151, %154
  %156 = trunc i64 %147 to i32
  %157 = select i1 %155, i32 %156, i32 %148
  %158 = add nuw nsw i64 %147, 1
  %159 = add i64 %149, -1
  %160 = icmp eq i64 %159, 0
  br i1 %160, label %161, label %146, !llvm.loop !18

161:                                              ; preds = %146, %141
  %162 = phi i32 [ %142, %141 ], [ %157, %146 ]
  br i1 %30, label %209, label %163

163:                                              ; preds = %19, %161
  %164 = phi i32 [ %162, %161 ], [ 0, %19 ]
  %165 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 7
  %166 = load i32, i32* %165, align 8
  br label %213

167:                                              ; preds = %167, %139
  %168 = phi i64 [ 0, %139 ], [ %206, %167 ]
  %169 = phi i32 [ 0, %139 ], [ %205, %167 ]
  %170 = phi i64 [ %140, %139 ], [ %207, %167 ]
  %171 = getelementptr inbounds float, float* %134, i64 %168
  %172 = load float, float* %171, align 4
  %173 = sext i32 %169 to i64
  %174 = getelementptr inbounds float, float* %134, i64 %173
  %175 = load float, float* %174, align 4
  %176 = fcmp ogt float %172, %175
  %177 = trunc i64 %168 to i32
  %178 = select i1 %176, i32 %177, i32 %169
  %179 = or i64 %168, 1
  %180 = getelementptr inbounds float, float* %134, i64 %179
  %181 = load float, float* %180, align 4
  %182 = sext i32 %178 to i64
  %183 = getelementptr inbounds float, float* %134, i64 %182
  %184 = load float, float* %183, align 4
  %185 = fcmp ogt float %181, %184
  %186 = trunc i64 %179 to i32
  %187 = select i1 %185, i32 %186, i32 %178
  %188 = or i64 %168, 2
  %189 = getelementptr inbounds float, float* %134, i64 %188
  %190 = load float, float* %189, align 4
  %191 = sext i32 %187 to i64
  %192 = getelementptr inbounds float, float* %134, i64 %191
  %193 = load float, float* %192, align 4
  %194 = fcmp ogt float %190, %193
  %195 = trunc i64 %188 to i32
  %196 = select i1 %194, i32 %195, i32 %187
  %197 = or i64 %168, 3
  %198 = getelementptr inbounds float, float* %134, i64 %197
  %199 = load float, float* %198, align 4
  %200 = sext i32 %196 to i64
  %201 = getelementptr inbounds float, float* %134, i64 %200
  %202 = load float, float* %201, align 4
  %203 = fcmp ogt float %199, %202
  %204 = trunc i64 %197 to i32
  %205 = select i1 %203, i32 %204, i32 %196
  %206 = add nuw nsw i64 %168, 4
  %207 = add i64 %170, -4
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %141, label %167

209:                                              ; preds = %161
  %210 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 7
  %211 = load i32, i32* %210, align 8
  %212 = icmp sgt i32 %211, 1
  br i1 %212, label %226, label %213

213:                                              ; preds = %163, %209
  %214 = phi i32 [ %164, %163 ], [ %162, %209 ]
  %215 = phi i32 [ %166, %163 ], [ %211, %209 ]
  %216 = sext i32 %214 to i64
  %217 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 6, i32 0, i32 0
  %218 = load float*, float** %217, align 8
  %219 = getelementptr inbounds float, float* %218, i64 %216
  %220 = load float, float* %219, align 4
  %221 = sext i32 %215 to i64
  %222 = getelementptr inbounds float, float* %218, i64 %221
  %223 = load float, float* %222, align 4
  %224 = fmul float %223, 2.000000e+00
  %225 = fcmp ogt float %220, %224
  br i1 %225, label %226, label %229

226:                                              ; preds = %213, %209
  %227 = phi i32 [ %214, %213 ], [ %162, %209 ]
  %228 = getelementptr inbounds %"class.webrtc::AlignmentMixer", %"class.webrtc::AlignmentMixer"* %0, i64 0, i32 7
  store i32 %227, i32* %228, align 8
  br label %229

229:                                              ; preds = %226, %213
  %230 = phi i32 [ %227, %226 ], [ %215, %213 ]
  ret i32 %230
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast float** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast float** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to float*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds float, float* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr float, float* %13, i64 %18
  %20 = bitcast float* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #7
  %26 = ptrtoint float* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #8
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #8
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #9
  %54 = bitcast i8* %53 to float*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi float* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds float, float* %57, i64 %33
  %59 = getelementptr inbounds float, float* %57, i64 %56
  %60 = getelementptr inbounds float, float* %58, i64 %1
  %61 = bitcast float* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #7
  %63 = ptrtoint float* %59 to i64
  %64 = ptrtoint float* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %66 = load float*, float** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint float* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds float, float* %58, i64 %71
  %73 = ptrtoint float* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast float* %72 to i8*
  %77 = bitcast float* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #7
  %78 = load float*, float** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi float* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq float* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast float* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #9
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !9}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.unroll.disable"}
!18 = distinct !{!18, !17}
