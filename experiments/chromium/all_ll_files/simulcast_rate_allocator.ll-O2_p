; ModuleID = '../../third_party/webrtc/modules/video_coding/utility/simulcast_rate_allocator.cc'
source_filename = "../../third_party/webrtc/modules/video_coding/utility/simulcast_rate_allocator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.std::nothrow_t" = type { i8 }
%"class.webrtc::SimulcastRateAllocator" = type <{ %"class.webrtc::VideoBitrateAllocator", %"class.webrtc::VideoCodec", %"class.webrtc::StableTargetRateExperiment", %"class.webrtc::RateControlSettings", %"class.std::__1::vector.20", i8, [7 x i8] }>
%"class.webrtc::VideoBitrateAllocator" = type { i32 (...)** }
%"class.webrtc::VideoCodec" = type { i32, i16, i16, i32, i32, i32, i32, i8, i32, i8, [3 x %"struct.webrtc::SpatialLayer"], [5 x %"struct.webrtc::SpatialLayer"], i32, i8, %"class.absl::optional", %"struct.webrtc::VideoCodec::TimingFrameTriggerThresholds", i8, %"union.webrtc::VideoCodecUnion", %"class.std::__1::basic_string" }
%"struct.webrtc::SpatialLayer" = type { i16, i16, float, i8, i32, i32, i32, i32, i8 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i32 }
%"struct.webrtc::VideoCodec::TimingFrameTriggerThresholds" = type { i64, i16 }
%"union.webrtc::VideoCodecUnion" = type { %"struct.webrtc::VideoCodecVP9" }
%"struct.webrtc::VideoCodecVP9" = type { i32, i8, i8, i8, i32, i8, i8, i8, i8, i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.2 }
%union.anon.2 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.webrtc::StableTargetRateExperiment" = type { %"class.webrtc::FieldTrialParameter", %"class.webrtc::FieldTrialParameter.9", %"class.webrtc::FieldTrialParameter.9" }
%"class.webrtc::FieldTrialParameter" = type { %"class.webrtc::FieldTrialParameterInterface.base", i8, [6 x i8] }
%"class.webrtc::FieldTrialParameterInterface.base" = type <{ i32 (...)**, %"class.std::__1::vector", %"class.std::__1::basic_string", i8 }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.webrtc::FieldTrialParameterInterface"**, %"class.webrtc::FieldTrialParameterInterface"**, %"class.std::__1::__compressed_pair.4" }
%"class.webrtc::FieldTrialParameterInterface" = type <{ i32 (...)**, %"class.std::__1::vector", %"class.std::__1::basic_string", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.webrtc::FieldTrialParameterInterface"** }
%"class.webrtc::FieldTrialParameter.9" = type { %"class.webrtc::FieldTrialParameterInterface.base", double }
%"class.webrtc::RateControlSettings" = type { %"struct.webrtc::CongestionWindowConfig", %"struct.webrtc::VideoRateControlConfig" }
%"struct.webrtc::CongestionWindowConfig" = type <{ %"class.absl::optional", %"class.absl::optional", %"class.absl::optional.10", i8, [7 x i8] }>
%"class.absl::optional.10" = type { %"class.absl::optional_internal::optional_data.11" }
%"class.absl::optional_internal::optional_data.11" = type { %"class.absl::optional_internal::optional_data_base.12" }
%"class.absl::optional_internal::optional_data_base.12" = type { %"class.absl::optional_internal::optional_data_dtor_base.13" }
%"class.absl::optional_internal::optional_data_dtor_base.13" = type { i8, %union.anon.14 }
%union.anon.14 = type { %"class.webrtc::DataSize" }
%"class.webrtc::DataSize" = type { %"class.webrtc::rtc_units_impl::RelativeUnit" }
%"class.webrtc::rtc_units_impl::RelativeUnit" = type { %"class.webrtc::rtc_units_impl::UnitBase" }
%"class.webrtc::rtc_units_impl::UnitBase" = type { i64 }
%"struct.webrtc::VideoRateControlConfig" = type <{ %"class.absl::optional.15", i8, [3 x i8], %"class.absl::optional", %"class.absl::optional", i8, i8, [2 x i8], double, double, i8, i8, i8, i8, i8, [3 x i8] }>
%"class.absl::optional.15" = type { %"class.absl::optional_internal::optional_data.16" }
%"class.absl::optional_internal::optional_data.16" = type { %"class.absl::optional_internal::optional_data_base.17" }
%"class.absl::optional_internal::optional_data_base.17" = type { %"class.absl::optional_internal::optional_data_dtor_base.18" }
%"class.absl::optional_internal::optional_data_dtor_base.18" = type { i8, %union.anon.19 }
%union.anon.19 = type { double }
%"class.std::__1::vector.20" = type { i64*, i64, %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.webrtc::VideoBitrateAllocation" = type <{ i32, [5 x [4 x %"class.absl::optional.26"]], i8, [3 x i8] }>
%"class.absl::optional.26" = type { %"class.absl::optional_internal::optional_data.27" }
%"class.absl::optional_internal::optional_data.27" = type { %"class.absl::optional_internal::optional_data_base.28" }
%"class.absl::optional_internal::optional_data_base.28" = type { %"class.absl::optional_internal::optional_data_dtor_base.29" }
%"class.absl::optional_internal::optional_data_dtor_base.29" = type { i8, %union.anon.30 }
%union.anon.30 = type { i32 }
%"struct.webrtc::VideoBitrateAllocationParameters" = type { %"class.webrtc::DataRate", %"class.webrtc::DataRate", double }
%"class.webrtc::DataRate" = type { %"class.webrtc::rtc_units_impl::RelativeUnit.31" }
%"class.webrtc::rtc_units_impl::RelativeUnit.31" = type { %"class.webrtc::rtc_units_impl::UnitBase.32" }
%"class.webrtc::rtc_units_impl::UnitBase.32" = type { i64 }
%class.anon = type { %"class.webrtc::SimulcastRateAllocator"* }
%"class.std::__1::vector.37" = type { %"class.std::__1::__vector_base.38" }
%"class.std::__1::__vector_base.38" = type { i32*, i32*, %"class.std::__1::__compressed_pair.39" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { i32* }
%"struct.webrtc::VideoCodecVP8" = type { i32, i8, i8, i8, i8, i32 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::__bit_iterator" = type <{ i64*, i32, [4 x i8] }>

$_ZNSt3__16vectorIbNS_9allocatorIbEEE6resizeEmb = comdat any

$_ZNSt3__16vectorIbNS_9allocatorIbEEE7reserveEm = comdat any

$_ZNSt3__16vectorIbNS_9allocatorIbEEE18__construct_at_endINS_14__bit_iteratorIS3_Lb0ELm0EEEEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES8_S8_ = comdat any

$_ZNSt3__116__copy_unalignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_ = comdat any

$_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm = comdat any

$_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_EEEvPKciS8_DpRKT_E1t = comdat any

@.str = private unnamed_addr constant [82 x i8] c"../../third_party/webrtc/modules/video_coding/utility/simulcast_rate_allocator.cc\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"num_layers > 0\00", align 1
@.str.2 = private unnamed_addr constant [34 x i8] c"num_layers <= kMaxTemporalStreams\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"temporal_id >= 0\00", align 1
@.str.4 = private unnamed_addr constant [25 x i8] c"temporal_id < num_layers\00", align 1
@_ZN6webrtc12_GLOBAL__N_127kBaseHeavy3TlRateAllocationE = internal unnamed_addr constant [4 x float] [float 0x3FE3333340000000, float 0x3FE99999A0000000, float 1.000000e+00, float 1.000000e+00], align 16
@_ZN6webrtc12_GLOBAL__N_120kLayerRateAllocationE = internal unnamed_addr constant [4 x [4 x float]] [[4 x float] [float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00], [4 x float] [float 0x3FE3333340000000, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00], [4 x float] [float 0x3FD99999A0000000, float 0x3FE3333340000000, float 1.000000e+00, float 1.000000e+00], [4 x float] [float 2.500000e-01, float 0x3FD99999A0000000, float 0x3FE3333340000000, float 1.000000e+00]], align 16
@_ZTVN6webrtc22SimulcastRateAllocatorE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.webrtc::SimulcastRateAllocator"*)* @_ZN6webrtc22SimulcastRateAllocatorD2Ev to i8*), i8* bitcast (void (%"class.webrtc::SimulcastRateAllocator"*)* @_ZN6webrtc22SimulcastRateAllocatorD0Ev to i8*), i8* bitcast (void (%"class.webrtc::VideoBitrateAllocation"*, %"class.webrtc::VideoBitrateAllocator"*, i32, i32)* @_ZN6webrtc21VideoBitrateAllocator13GetAllocationEjj to i8*), i8* bitcast (void (%"class.webrtc::VideoBitrateAllocation"*, %"class.webrtc::SimulcastRateAllocator"*, %"struct.webrtc::VideoBitrateAllocationParameters"*)* @_ZN6webrtc22SimulcastRateAllocator8AllocateENS_32VideoBitrateAllocationParametersE to i8*), i8* bitcast (void (%"class.webrtc::SimulcastRateAllocator"*, i1)* @_ZN6webrtc22SimulcastRateAllocator23SetLegacyConferenceModeEb to i8*)] }, align 8
@_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_EEEvPKciS8_DpRKT_E1t = linkonce_odr hidden constant [4 x i8] c"\0D\01\01\00", comdat, align 1
@_ZSt7nothrow = external global %"struct.std::nothrow_t", align 1

@_ZN6webrtc22SimulcastRateAllocatorC1ERKNS_10VideoCodecE = hidden unnamed_addr alias void (%"class.webrtc::SimulcastRateAllocator"*, %"class.webrtc::VideoCodec"*), void (%"class.webrtc::SimulcastRateAllocator"*, %"class.webrtc::VideoCodec"*)* @_ZN6webrtc22SimulcastRateAllocatorC2ERKNS_10VideoCodecE
@_ZN6webrtc22SimulcastRateAllocatorD1Ev = hidden unnamed_addr alias void (%"class.webrtc::SimulcastRateAllocator"*), void (%"class.webrtc::SimulcastRateAllocator"*)* @_ZN6webrtc22SimulcastRateAllocatorD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN6webrtc22SimulcastRateAllocator25GetTemporalRateAllocationEiib(i32, i32, i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = icmp sgt i32 %0, 0
  br i1 %4, label %6, label %5

5:                                                ; preds = %3
  tail call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str, i64 0, i64 0), i32 51, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_EEEvPKciS8_DpRKT_E1t, i64 0, i64 0), i32 %0, i32 0) #12
  unreachable

6:                                                ; preds = %3
  %7 = icmp slt i32 %0, 5
  br i1 %7, label %9, label %8

8:                                                ; preds = %6
  tail call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str, i64 0, i64 0), i32 52, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_EEEvPKciS8_DpRKT_E1t, i64 0, i64 0), i32 %0, i32 4) #12
  unreachable

9:                                                ; preds = %6
  %10 = icmp sgt i32 %1, -1
  br i1 %10, label %12, label %11

11:                                               ; preds = %9
  tail call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str, i64 0, i64 0), i32 53, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_EEEvPKciS8_DpRKT_E1t, i64 0, i64 0), i32 %1, i32 0) #12
  unreachable

12:                                               ; preds = %9
  %13 = icmp slt i32 %1, %0
  br i1 %13, label %15, label %14

14:                                               ; preds = %12
  tail call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str, i64 0, i64 0), i32 54, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_EEEvPKciS8_DpRKT_E1t, i64 0, i64 0), i32 %1, i32 %0) #12
  unreachable

15:                                               ; preds = %12
  %16 = icmp ne i32 %0, 3
  %17 = xor i1 %2, true
  %18 = or i1 %16, %17
  br i1 %18, label %22, label %19

19:                                               ; preds = %15
  %20 = sext i32 %1 to i64
  %21 = getelementptr inbounds [4 x float], [4 x float]* @_ZN6webrtc12_GLOBAL__N_127kBaseHeavy3TlRateAllocationE, i64 0, i64 %20
  br label %27

22:                                               ; preds = %15
  %23 = add nsw i32 %0, -1
  %24 = sext i32 %23 to i64
  %25 = sext i32 %1 to i64
  %26 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* @_ZN6webrtc12_GLOBAL__N_120kLayerRateAllocationE, i64 0, i64 %24, i64 %25
  br label %27

27:                                               ; preds = %22, %19
  %28 = phi float* [ %21, %19 ], [ %26, %22 ]
  %29 = load float, float* %28, align 4
  ret float %29
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc22SimulcastRateAllocatorC2ERKNS_10VideoCodecE(%"class.webrtc::SimulcastRateAllocator"*, %"class.webrtc::VideoCodec"* nocapture readonly dereferenceable(376)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN6webrtc22SimulcastRateAllocatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 1
  %5 = bitcast %"class.webrtc::VideoCodec"* %4 to i8*
  %6 = bitcast %"class.webrtc::VideoCodec"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 352, i1 false) #13
  %7 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 1, i32 18
  %8 = getelementptr inbounds %"class.webrtc::VideoCodec", %"class.webrtc::VideoCodec"* %1, i64 0, i32 18
  %9 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %10 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %9, i64 0, i32 1, i32 0
  %11 = load i8, i8* %10, align 1
  %12 = icmp slt i8 %11, 0
  br i1 %12, label %16, label %13

13:                                               ; preds = %2
  %14 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  %15 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 24, i1 false) #13
  br label %21

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds %"class.webrtc::VideoCodec", %"class.webrtc::VideoCodec"* %1, i64 0, i32 18, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %7, i8* %18, i64 %20) #13
  br label %21

21:                                               ; preds = %13, %16
  %22 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 2
  tail call void @_ZN6webrtc26StableTargetRateExperiment20ParseFromFieldTrialsEv(%"class.webrtc::StableTargetRateExperiment"* sret %22) #13
  %23 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 3
  tail call void @_ZN6webrtc19RateControlSettings20ParseFromFieldTrialsEv(%"class.webrtc::RateControlSettings"* sret %23) #13
  %24 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 4
  %25 = bitcast %"class.std::__1::vector.20"* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 25, i1 false)
  ret void
}

declare void @_ZN6webrtc26StableTargetRateExperiment20ParseFromFieldTrialsEv(%"class.webrtc::StableTargetRateExperiment"* sret) local_unnamed_addr #2

declare void @_ZN6webrtc19RateControlSettings20ParseFromFieldTrialsEv(%"class.webrtc::RateControlSettings"* sret) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc22SimulcastRateAllocatorD2Ev(%"class.webrtc::SimulcastRateAllocator"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN6webrtc22SimulcastRateAllocatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 4, i32 0
  %4 = load i64*, i64** %3, align 8
  %5 = icmp eq i64* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = bitcast i64* %4 to i8*
  tail call void @_ZdlPv(i8* %7) #14
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 3
  tail call void @_ZN6webrtc19RateControlSettingsD1Ev(%"class.webrtc::RateControlSettings"* %9) #13
  %10 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 2
  %11 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 2, i32 2
  %12 = bitcast %"class.webrtc::FieldTrialParameter.9"* %11 to %"class.webrtc::FieldTrialParameterInterface"*
  tail call void @_ZN6webrtc28FieldTrialParameterInterfaceD2Ev(%"class.webrtc::FieldTrialParameterInterface"* %12) #13
  %13 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 2, i32 1
  %14 = bitcast %"class.webrtc::FieldTrialParameter.9"* %13 to %"class.webrtc::FieldTrialParameterInterface"*
  tail call void @_ZN6webrtc28FieldTrialParameterInterfaceD2Ev(%"class.webrtc::FieldTrialParameterInterface"* %14) #13
  %15 = bitcast %"class.webrtc::StableTargetRateExperiment"* %10 to %"class.webrtc::FieldTrialParameterInterface"*
  tail call void @_ZN6webrtc28FieldTrialParameterInterfaceD2Ev(%"class.webrtc::FieldTrialParameterInterface"* %15) #13
  %16 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 1, i32 18
  %17 = bitcast %"class.std::__1::basic_string"* %16 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %18 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %17, i64 0, i32 1, i32 0
  %19 = load i8, i8* %18, align 1
  %20 = icmp slt i8 %19, 0
  br i1 %20, label %21, label %24

21:                                               ; preds = %8
  %22 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  tail call void @_ZdlPv(i8* %23) #14
  br label %24

24:                                               ; preds = %8, %21
  ret void
}

; Function Attrs: nounwind
declare void @_ZN6webrtc19RateControlSettingsD1Ev(%"class.webrtc::RateControlSettings"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc22SimulcastRateAllocatorD0Ev(%"class.webrtc::SimulcastRateAllocator"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN6webrtc22SimulcastRateAllocatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 4, i32 0
  %4 = load i64*, i64** %3, align 8
  %5 = icmp eq i64* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = bitcast i64* %4 to i8*
  tail call void @_ZdlPv(i8* %7) #14
  br label %8

8:                                                ; preds = %6, %1
  %9 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 3
  tail call void @_ZN6webrtc19RateControlSettingsD1Ev(%"class.webrtc::RateControlSettings"* %9) #13
  %10 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 2
  %11 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 2, i32 2
  %12 = bitcast %"class.webrtc::FieldTrialParameter.9"* %11 to %"class.webrtc::FieldTrialParameterInterface"*
  tail call void @_ZN6webrtc28FieldTrialParameterInterfaceD2Ev(%"class.webrtc::FieldTrialParameterInterface"* %12) #13
  %13 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 2, i32 1
  %14 = bitcast %"class.webrtc::FieldTrialParameter.9"* %13 to %"class.webrtc::FieldTrialParameterInterface"*
  tail call void @_ZN6webrtc28FieldTrialParameterInterfaceD2Ev(%"class.webrtc::FieldTrialParameterInterface"* %14) #13
  %15 = bitcast %"class.webrtc::StableTargetRateExperiment"* %10 to %"class.webrtc::FieldTrialParameterInterface"*
  tail call void @_ZN6webrtc28FieldTrialParameterInterfaceD2Ev(%"class.webrtc::FieldTrialParameterInterface"* %15) #13
  %16 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 1, i32 18
  %17 = bitcast %"class.std::__1::basic_string"* %16 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %18 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %17, i64 0, i32 1, i32 0
  %19 = load i8, i8* %18, align 1
  %20 = icmp slt i8 %19, 0
  br i1 %20, label %21, label %24

21:                                               ; preds = %8
  %22 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  tail call void @_ZdlPv(i8* %23) #14
  br label %24

24:                                               ; preds = %8, %21
  %25 = bitcast %"class.webrtc::SimulcastRateAllocator"* %0 to i8*
  tail call void @_ZdlPv(i8* %25) #14
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc22SimulcastRateAllocator8AllocateENS_32VideoBitrateAllocationParametersE(%"class.webrtc::VideoBitrateAllocation"* noalias sret, %"class.webrtc::SimulcastRateAllocator"*, %"struct.webrtc::VideoBitrateAllocationParameters"* nocapture readonly) unnamed_addr #0 align 2 {
  %4 = bitcast %"class.webrtc::VideoBitrateAllocation"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %4, i8 -86, i64 168, i1 false)
  tail call void @_ZN6webrtc22VideoBitrateAllocationC1Ev(%"class.webrtc::VideoBitrateAllocation"* %0) #13
  %5 = getelementptr inbounds %"struct.webrtc::VideoBitrateAllocationParameters", %"struct.webrtc::VideoBitrateAllocationParameters"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %1, i64 0, i32 2
  %8 = tail call zeroext i1 @_ZNK6webrtc26StableTargetRateExperiment9IsEnabledEv(%"class.webrtc::StableTargetRateExperiment"* %7) #13
  br i1 %8, label %9, label %21

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"struct.webrtc::VideoBitrateAllocationParameters", %"struct.webrtc::VideoBitrateAllocationParameters"* %2, i64 0, i32 1
  %11 = getelementptr inbounds %"class.webrtc::DataRate", %"class.webrtc::DataRate"* %10, i64 0, i32 0, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = icmp sgt i64 %12, 0
  br i1 %13, label %14, label %21

14:                                               ; preds = %9
  %15 = getelementptr inbounds %"struct.webrtc::VideoBitrateAllocationParameters", %"struct.webrtc::VideoBitrateAllocationParameters"* %2, i64 0, i32 0
  %16 = load i64, i64* %5, align 8
  %17 = icmp slt i64 %16, %12
  %18 = select i1 %17, %"class.webrtc::DataRate"* %15, %"class.webrtc::DataRate"* %10
  %19 = getelementptr inbounds %"class.webrtc::DataRate", %"class.webrtc::DataRate"* %18, i64 0, i32 0, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  br label %21

21:                                               ; preds = %3, %14, %9
  %22 = phi i64 [ %20, %14 ], [ %6, %9 ], [ %6, %3 ]
  %23 = load i64, i64* %5, align 8
  tail call void @_ZN6webrtc22SimulcastRateAllocator37DistributeAllocationToSimulcastLayersENS_8DataRateES1_PNS_22VideoBitrateAllocationE(%"class.webrtc::SimulcastRateAllocator"* %1, i64 %23, i64 %22, %"class.webrtc::VideoBitrateAllocation"* %0)
  tail call void @_ZNK6webrtc22SimulcastRateAllocator36DistributeAllocationToTemporalLayersEPNS_22VideoBitrateAllocationE(%"class.webrtc::SimulcastRateAllocator"* %1, %"class.webrtc::VideoBitrateAllocation"* %0)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN6webrtc22VideoBitrateAllocationC1Ev(%"class.webrtc::VideoBitrateAllocation"*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare zeroext i1 @_ZNK6webrtc26StableTargetRateExperiment9IsEnabledEv(%"class.webrtc::StableTargetRateExperiment"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc22SimulcastRateAllocator37DistributeAllocationToSimulcastLayersENS_8DataRateES1_PNS_22VideoBitrateAllocationE(%"class.webrtc::SimulcastRateAllocator"*, i64, i64, %"class.webrtc::VideoBitrateAllocation"*) local_unnamed_addr #0 align 2 {
  %5 = alloca %class.anon, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12)
  store i64 %1, i64* %6, align 8
  %13 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13)
  store i64 %2, i64* %7, align 8
  %14 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 1, i32 4
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %32, label %17

17:                                               ; preds = %4
  %18 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = zext i32 %15 to i64
  %20 = mul nuw nsw i64 %19, 1000
  store i64 %20, i64* %8, align 8
  %21 = icmp slt i64 %20, %1
  %22 = bitcast i64* %8 to %"class.webrtc::DataRate"*
  %23 = bitcast i64* %6 to %"class.webrtc::DataRate"*
  %24 = select i1 %21, %"class.webrtc::DataRate"* %22, %"class.webrtc::DataRate"* %23
  %25 = getelementptr inbounds %"class.webrtc::DataRate", %"class.webrtc::DataRate"* %24, i64 0, i32 0, i32 0, i32 0
  %26 = load i64, i64* %25, align 8
  store i64 %26, i64* %6, align 8
  %27 = icmp slt i64 %20, %2
  %28 = bitcast i64* %7 to %"class.webrtc::DataRate"*
  %29 = select i1 %27, %"class.webrtc::DataRate"* %22, %"class.webrtc::DataRate"* %28
  %30 = getelementptr inbounds %"class.webrtc::DataRate", %"class.webrtc::DataRate"* %29, i64 0, i32 0, i32 0, i32 0
  %31 = load i64, i64* %30, align 8
  store i64 %31, i64* %7, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  br label %32

32:                                               ; preds = %4, %17
  %33 = phi i64 [ %2, %4 ], [ %31, %17 ]
  %34 = phi i64 [ %1, %4 ], [ %26, %17 ]
  %35 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 1, i32 9
  %36 = load i8, i8* %35, align 8
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %38, label %51

38:                                               ; preds = %32
  %39 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 1, i32 7
  %40 = load i8, i8* %39, align 8, !range !2
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %386, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 1, i32 5
  %44 = load i32, i32* %43, align 8
  %45 = zext i32 %44 to i64
  %46 = mul nuw nsw i64 %45, 1000
  %47 = icmp slt i64 %46, %34
  %48 = select i1 %47, i64 %34, i64 %46
  %49 = trunc i64 %48 to i32
  %50 = tail call zeroext i1 @_ZN6webrtc22VideoBitrateAllocation10SetBitrateEmmj(%"class.webrtc::VideoBitrateAllocation"* %3, i64 0, i64 0, i32 %49) #13
  br label %386

51:                                               ; preds = %32
  %52 = zext i8 %36 to i64
  %53 = shl nuw nsw i64 %52, 3
  %54 = tail call i8* @_Znwm(i64 %53) #14
  %55 = bitcast i8* %54 to i64*
  %56 = ptrtoint i8* %54 to i64
  %57 = getelementptr inbounds i64, i64* %55, i64 %52
  %58 = add nsw i64 %52, -1
  %59 = getelementptr i64, i64* %55, i64 %58
  %60 = ptrtoint i64* %59 to i64
  %61 = sub i64 8, %56
  %62 = add i64 %61, %60
  %63 = and i64 %62, -8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %54, i8 0, i64 %63, i1 false) #13
  %64 = ptrtoint i64* %57 to i64
  %65 = icmp eq i64* %57, %55
  br i1 %65, label %144, label %66

66:                                               ; preds = %51
  %67 = shl nuw nsw i64 %52, 3
  %68 = add nsw i64 %67, -8
  %69 = lshr exact i64 %68, 3
  %70 = add nuw nsw i64 %69, 1
  %71 = icmp ult i64 %70, 4
  br i1 %71, label %135, label %72

72:                                               ; preds = %66
  %73 = and i64 %70, 4611686018427387900
  %74 = getelementptr i64, i64* %55, i64 %73
  %75 = add nsw i64 %73, -4
  %76 = lshr exact i64 %75, 2
  %77 = add nuw nsw i64 %76, 1
  %78 = and i64 %77, 3
  %79 = icmp ult i64 %75, 12
  br i1 %79, label %116, label %80

80:                                               ; preds = %72
  %81 = sub nsw i64 %77, %78
  br label %82

82:                                               ; preds = %82, %80
  %83 = phi i64 [ 0, %80 ], [ %112, %82 ]
  %84 = phi <2 x i64> [ <i64 0, i64 1>, %80 ], [ %113, %82 ]
  %85 = phi i64 [ %81, %80 ], [ %114, %82 ]
  %86 = add <2 x i64> %84, <i64 2, i64 2>
  %87 = getelementptr i64, i64* %55, i64 %83
  %88 = bitcast i64* %87 to <2 x i64>*
  store <2 x i64> %84, <2 x i64>* %88, align 8
  %89 = getelementptr i64, i64* %87, i64 2
  %90 = bitcast i64* %89 to <2 x i64>*
  store <2 x i64> %86, <2 x i64>* %90, align 8
  %91 = or i64 %83, 4
  %92 = add <2 x i64> %84, <i64 4, i64 4>
  %93 = add <2 x i64> %84, <i64 6, i64 6>
  %94 = getelementptr i64, i64* %55, i64 %91
  %95 = bitcast i64* %94 to <2 x i64>*
  store <2 x i64> %92, <2 x i64>* %95, align 8
  %96 = getelementptr i64, i64* %94, i64 2
  %97 = bitcast i64* %96 to <2 x i64>*
  store <2 x i64> %93, <2 x i64>* %97, align 8
  %98 = or i64 %83, 8
  %99 = add <2 x i64> %84, <i64 8, i64 8>
  %100 = add <2 x i64> %84, <i64 10, i64 10>
  %101 = getelementptr i64, i64* %55, i64 %98
  %102 = bitcast i64* %101 to <2 x i64>*
  store <2 x i64> %99, <2 x i64>* %102, align 8
  %103 = getelementptr i64, i64* %101, i64 2
  %104 = bitcast i64* %103 to <2 x i64>*
  store <2 x i64> %100, <2 x i64>* %104, align 8
  %105 = or i64 %83, 12
  %106 = add <2 x i64> %84, <i64 12, i64 12>
  %107 = add <2 x i64> %84, <i64 14, i64 14>
  %108 = getelementptr i64, i64* %55, i64 %105
  %109 = bitcast i64* %108 to <2 x i64>*
  store <2 x i64> %106, <2 x i64>* %109, align 8
  %110 = getelementptr i64, i64* %108, i64 2
  %111 = bitcast i64* %110 to <2 x i64>*
  store <2 x i64> %107, <2 x i64>* %111, align 8
  %112 = add i64 %83, 16
  %113 = add <2 x i64> %84, <i64 16, i64 16>
  %114 = add i64 %85, -4
  %115 = icmp eq i64 %114, 0
  br i1 %115, label %116, label %82, !llvm.loop !3

116:                                              ; preds = %82, %72
  %117 = phi i64 [ 0, %72 ], [ %112, %82 ]
  %118 = phi <2 x i64> [ <i64 0, i64 1>, %72 ], [ %113, %82 ]
  %119 = icmp eq i64 %78, 0
  br i1 %119, label %133, label %120

120:                                              ; preds = %116, %120
  %121 = phi i64 [ %129, %120 ], [ %117, %116 ]
  %122 = phi <2 x i64> [ %130, %120 ], [ %118, %116 ]
  %123 = phi i64 [ %131, %120 ], [ %78, %116 ]
  %124 = add <2 x i64> %122, <i64 2, i64 2>
  %125 = getelementptr i64, i64* %55, i64 %121
  %126 = bitcast i64* %125 to <2 x i64>*
  store <2 x i64> %122, <2 x i64>* %126, align 8
  %127 = getelementptr i64, i64* %125, i64 2
  %128 = bitcast i64* %127 to <2 x i64>*
  store <2 x i64> %124, <2 x i64>* %128, align 8
  %129 = add i64 %121, 4
  %130 = add <2 x i64> %122, <i64 4, i64 4>
  %131 = add i64 %123, -1
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %133, label %120, !llvm.loop !5

133:                                              ; preds = %120, %116
  %134 = icmp eq i64 %70, %73
  br i1 %134, label %144, label %135

135:                                              ; preds = %133, %66
  %136 = phi i64 [ 0, %66 ], [ %73, %133 ]
  %137 = phi i64* [ %55, %66 ], [ %74, %133 ]
  br label %138

138:                                              ; preds = %135, %138
  %139 = phi i64 [ %142, %138 ], [ %136, %135 ]
  %140 = phi i64* [ %141, %138 ], [ %137, %135 ]
  store i64 %139, i64* %140, align 8
  %141 = getelementptr inbounds i64, i64* %140, i64 1
  %142 = add nuw nsw i64 %139, 1
  %143 = icmp eq i64* %141, %57
  br i1 %143, label %144, label %138, !llvm.loop !7

144:                                              ; preds = %138, %133, %51
  %145 = bitcast %class.anon* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %145)
  %146 = getelementptr inbounds %class.anon, %class.anon* %5, i64 0, i32 0
  store %"class.webrtc::SimulcastRateAllocator"* %0, %"class.webrtc::SimulcastRateAllocator"** %146, align 8
  %147 = sub i64 %64, %56
  %148 = ashr exact i64 %147, 3
  %149 = icmp sgt i64 %147, 1024
  br i1 %149, label %150, label %161

150:                                              ; preds = %144
  %151 = icmp slt i64 %148, 1152921504606846975
  %152 = select i1 %151, i64 %148, i64 1152921504606846975
  br label %153

153:                                              ; preds = %158, %150
  %154 = phi i64 [ %159, %158 ], [ %152, %150 ]
  %155 = shl i64 %154, 3
  %156 = tail call noalias i8* @_ZnwmRKSt9nothrow_t(i64 %155, %"struct.std::nothrow_t"* nonnull dereferenceable(1) @_ZSt7nothrow) #13
  %157 = icmp eq i8* %156, null
  br i1 %157, label %158, label %162

158:                                              ; preds = %153
  %159 = lshr i64 %154, 1
  %160 = icmp eq i64 %159, 0
  br i1 %160, label %161, label %153

161:                                              ; preds = %158, %144
  call fastcc void @"_ZNSt3__113__stable_sortIRZN6webrtc22SimulcastRateAllocator37DistributeAllocationToSimulcastLayersENS1_8DataRateES3_PNS1_22VideoBitrateAllocationEE3$_1NS_11__wrap_iterIPmEEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeEPNSE_10value_typeEl"(i64* nonnull %55, i64* %57, %class.anon* nonnull dereferenceable(8) %5, i64 %148, i64* null, i64 0) #13
  br label %164

162:                                              ; preds = %153
  %163 = bitcast i8* %156 to i64*
  call fastcc void @"_ZNSt3__113__stable_sortIRZN6webrtc22SimulcastRateAllocator37DistributeAllocationToSimulcastLayersENS1_8DataRateES3_PNS1_22VideoBitrateAllocationEE3$_1NS_11__wrap_iterIPmEEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeEPNSE_10value_typeEl"(i64* nonnull %55, i64* %57, %class.anon* nonnull dereferenceable(8) %5, i64 %148, i64* nonnull %163, i64 %154) #13
  call void @_ZdlPv(i8* nonnull %156) #14
  br label %164

164:                                              ; preds = %161, %162
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %145)
  %165 = load i8, i8* %35, align 8
  %166 = zext i8 %165 to i64
  %167 = icmp eq i8 %165, 0
  br i1 %167, label %178, label %168

168:                                              ; preds = %164, %175
  %169 = phi i64 [ %176, %175 ], [ 0, %164 ]
  %170 = getelementptr inbounds i64, i64* %55, i64 %169
  %171 = load i64, i64* %170, align 8
  %172 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 1, i32 10, i64 %171, i32 8
  %173 = load i8, i8* %172, align 4, !range !2
  %174 = icmp eq i8 %173, 0
  br i1 %174, label %175, label %178

175:                                              ; preds = %168
  %176 = add nuw nsw i64 %169, 1
  %177 = icmp ult i64 %176, %166
  br i1 %177, label %168, label %178

178:                                              ; preds = %168, %175, %164
  %179 = phi i64 [ 0, %164 ], [ %169, %168 ], [ %176, %175 ]
  %180 = icmp eq i64 %179, %166
  br i1 %180, label %385, label %181

181:                                              ; preds = %178
  %182 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %182)
  %183 = getelementptr inbounds i64, i64* %55, i64 %179
  %184 = load i64, i64* %183, align 8
  %185 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 1, i32 10, i64 %184, i32 6
  %186 = load i32, i32* %185, align 4
  %187 = zext i32 %186 to i64
  %188 = mul nuw nsw i64 %187, 1000
  store i64 %188, i64* %9, align 8
  %189 = icmp slt i64 %34, %188
  %190 = bitcast i64* %9 to %"class.webrtc::DataRate"*
  %191 = bitcast i64* %6 to %"class.webrtc::DataRate"*
  %192 = select i1 %189, %"class.webrtc::DataRate"* %190, %"class.webrtc::DataRate"* %191
  %193 = getelementptr inbounds %"class.webrtc::DataRate", %"class.webrtc::DataRate"* %192, i64 0, i32 0, i32 0, i32 0
  %194 = load i64, i64* %193, align 8
  store i64 %194, i64* %6, align 8
  %195 = icmp slt i64 %33, %188
  %196 = bitcast i64* %7 to %"class.webrtc::DataRate"*
  %197 = select i1 %195, %"class.webrtc::DataRate"* %190, %"class.webrtc::DataRate"* %196
  %198 = getelementptr inbounds %"class.webrtc::DataRate", %"class.webrtc::DataRate"* %197, i64 0, i32 0, i32 0, i32 0
  %199 = load i64, i64* %198, align 8
  store i64 %199, i64* %7, align 8
  %200 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 4
  %201 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 4, i32 1
  %202 = load i64, i64* %201, align 8
  %203 = icmp eq i64 %202, 0
  br i1 %203, label %204, label %207

204:                                              ; preds = %181
  call void @_ZNSt3__16vectorIbNS_9allocatorIbEEE6resizeEmb(%"class.std::__1::vector.20"* %200, i64 %166, i1 zeroext false)
  %205 = load i8, i8* %35, align 8
  %206 = zext i8 %205 to i64
  br label %207

207:                                              ; preds = %204, %181
  %208 = phi i64 [ %206, %204 ], [ %166, %181 ]
  %209 = phi i1 [ true, %204 ], [ false, %181 ]
  %210 = icmp ult i64 %179, %208
  br i1 %210, label %211, label %335

211:                                              ; preds = %207
  %212 = bitcast i64* %10 to i8*
  %213 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 1, i32 12
  %214 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 2
  %215 = getelementptr inbounds %"class.std::__1::vector.20", %"class.std::__1::vector.20"* %200, i64 0, i32 0
  %216 = bitcast i64* %10 to %"class.webrtc::DataRate"*
  br label %217

217:                                              ; preds = %211, %325
  %218 = phi i64 [ %194, %211 ], [ %326, %325 ]
  %219 = phi i64 [ %199, %211 ], [ %327, %325 ]
  %220 = phi i64 [ %179, %211 ], [ %329, %325 ]
  %221 = phi i64 [ %179, %211 ], [ %328, %325 ]
  %222 = getelementptr inbounds i64, i64* %55, i64 %220
  %223 = load i64, i64* %222, align 8
  %224 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 1, i32 10, i64 %223, i32 8
  %225 = load i8, i8* %224, align 4, !range !2
  %226 = icmp eq i8 %225, 0
  br i1 %226, label %227, label %236

227:                                              ; preds = %217
  %228 = load i64*, i64** %215, align 8
  %229 = lshr i64 %223, 6
  %230 = getelementptr inbounds i64, i64* %228, i64 %229
  %231 = and i64 %223, 63
  %232 = shl i64 1, %231
  %233 = xor i64 %232, -1
  %234 = load i64, i64* %230, align 8
  %235 = and i64 %234, %233
  store i64 %235, i64* %230, align 8
  br label %325

236:                                              ; preds = %217
  %237 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 1, i32 10, i64 %223, i32 6
  %238 = load i32, i32* %237, align 4
  %239 = zext i32 %238 to i64
  %240 = mul nuw nsw i64 %239, 1000
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %212)
  %241 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 1, i32 10, i64 %223, i32 5
  %242 = load i32, i32* %241, align 4
  %243 = zext i32 %242 to i64
  %244 = mul nuw nsw i64 %243, 1000
  store i64 %244, i64* %10, align 8
  %245 = load i32, i32* %213, align 4
  %246 = icmp eq i32 %245, 0
  br i1 %246, label %247, label %249

247:                                              ; preds = %236
  %248 = call double @_ZNK6webrtc26StableTargetRateExperiment24GetVideoHysteresisFactorEv(%"class.webrtc::StableTargetRateExperiment"* %214) #13
  br label %251

249:                                              ; preds = %236
  %250 = call double @_ZNK6webrtc26StableTargetRateExperiment30GetScreenshareHysteresisFactorEv(%"class.webrtc::StableTargetRateExperiment"* %214) #13
  br label %251

251:                                              ; preds = %249, %247
  %252 = phi double [ %248, %247 ], [ %250, %249 ]
  br i1 %209, label %276, label %253

253:                                              ; preds = %251
  %254 = load i64, i64* %222, align 8
  %255 = load i64*, i64** %215, align 8
  %256 = lshr i64 %254, 6
  %257 = getelementptr inbounds i64, i64* %255, i64 %256
  %258 = and i64 %254, 63
  %259 = shl i64 1, %258
  %260 = load i64, i64* %257, align 8
  %261 = and i64 %259, %260
  %262 = icmp eq i64 %261, 0
  br i1 %262, label %263, label %276

263:                                              ; preds = %253
  %264 = sitofp i64 %240 to double
  %265 = fmul double %252, %264
  %266 = call double @llvm.round.f64(double %265) #13
  %267 = fcmp oeq double %266, 0x7FF0000000000000
  br i1 %267, label %272, label %268

268:                                              ; preds = %263
  %269 = fcmp oeq double %266, 0xFFF0000000000000
  br i1 %269, label %272, label %270

270:                                              ; preds = %268
  %271 = fptosi double %266 to i64
  br label %272

272:                                              ; preds = %263, %268, %270
  %273 = phi i64 [ %271, %270 ], [ 9223372036854775807, %263 ], [ -9223372036854775808, %268 ]
  %274 = icmp slt i64 %244, %273
  %275 = select i1 %274, i64 %244, i64 %273
  br label %276

276:                                              ; preds = %253, %251, %272
  %277 = phi i64 [ %240, %253 ], [ %275, %272 ], [ %240, %251 ]
  %278 = icmp slt i64 %219, %277
  br i1 %278, label %279, label %283

279:                                              ; preds = %276
  %280 = getelementptr inbounds %"class.webrtc::VideoBitrateAllocation", %"class.webrtc::VideoBitrateAllocation"* %3, i64 0, i32 2
  store i8 1, i8* %280, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %212)
  %281 = load i8, i8* %35, align 8
  %282 = zext i8 %281 to i64
  br label %335

283:                                              ; preds = %276
  %284 = load i64, i64* %222, align 8
  %285 = load i64*, i64** %215, align 8
  %286 = lshr i64 %284, 6
  %287 = getelementptr inbounds i64, i64* %285, i64 %286
  %288 = and i64 %284, 63
  %289 = shl i64 1, %288
  %290 = load i64, i64* %287, align 8
  %291 = or i64 %290, %289
  store i64 %291, i64* %287, align 8
  %292 = icmp slt i64 %244, %218
  %293 = select i1 %292, %"class.webrtc::DataRate"* %216, %"class.webrtc::DataRate"* %191
  %294 = getelementptr inbounds %"class.webrtc::DataRate", %"class.webrtc::DataRate"* %293, i64 0, i32 0, i32 0, i32 0
  %295 = load i64, i64* %294, align 8
  %296 = load i64, i64* %222, align 8
  %297 = trunc i64 %295 to i32
  %298 = call zeroext i1 @_ZN6webrtc22VideoBitrateAllocation10SetBitrateEmmj(%"class.webrtc::VideoBitrateAllocation"* %3, i64 %296, i64 0, i32 %297) #13
  %299 = icmp eq i64 %218, 9223372036854775807
  %300 = icmp eq i64 %295, -9223372036854775808
  %301 = or i1 %299, %300
  br i1 %301, label %308, label %302

302:                                              ; preds = %283
  %303 = icmp eq i64 %218, -9223372036854775808
  %304 = icmp eq i64 %295, 9223372036854775807
  %305 = or i1 %303, %304
  %306 = sub nsw i64 %218, %295
  %307 = select i1 %305, i64 -9223372036854775808, i64 %306
  br label %308

308:                                              ; preds = %283, %302
  %309 = phi i64 [ %307, %302 ], [ 9223372036854775807, %283 ]
  store i64 %309, i64* %6, align 8
  %310 = icmp slt i64 %244, %219
  %311 = select i1 %310, %"class.webrtc::DataRate"* %216, %"class.webrtc::DataRate"* %196
  %312 = getelementptr inbounds %"class.webrtc::DataRate", %"class.webrtc::DataRate"* %311, i64 0, i32 0, i32 0, i32 0
  %313 = load i64, i64* %312, align 8
  %314 = icmp eq i64 %219, 9223372036854775807
  %315 = icmp eq i64 %313, -9223372036854775808
  %316 = or i1 %314, %315
  br i1 %316, label %323, label %317

317:                                              ; preds = %308
  %318 = icmp eq i64 %219, -9223372036854775808
  %319 = icmp eq i64 %313, 9223372036854775807
  %320 = or i1 %318, %319
  %321 = sub nsw i64 %219, %313
  %322 = select i1 %320, i64 -9223372036854775808, i64 %321
  br label %323

323:                                              ; preds = %317, %308
  %324 = phi i64 [ %322, %317 ], [ 9223372036854775807, %308 ]
  store i64 %324, i64* %7, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %212)
  br label %325

325:                                              ; preds = %323, %227
  %326 = phi i64 [ %218, %227 ], [ %309, %323 ]
  %327 = phi i64 [ %219, %227 ], [ %324, %323 ]
  %328 = phi i64 [ %221, %227 ], [ %284, %323 ]
  %329 = add nuw nsw i64 %220, 1
  %330 = load i8, i8* %35, align 8
  %331 = zext i8 %330 to i64
  %332 = icmp ult i64 %329, %331
  br i1 %332, label %217, label %333

333:                                              ; preds = %325
  %334 = zext i8 %330 to i64
  br label %335

335:                                              ; preds = %333, %207, %279
  %336 = phi i64 [ %208, %207 ], [ %282, %279 ], [ %334, %333 ]
  %337 = phi i64 [ %194, %207 ], [ %218, %279 ], [ %326, %333 ]
  %338 = phi i64 [ %179, %207 ], [ %221, %279 ], [ %328, %333 ]
  %339 = phi i64 [ %179, %207 ], [ %220, %279 ], [ %329, %333 ]
  %340 = icmp ult i64 %339, %336
  br i1 %340, label %341, label %359

341:                                              ; preds = %335
  %342 = getelementptr inbounds %"class.std::__1::vector.20", %"class.std::__1::vector.20"* %200, i64 0, i32 0
  br label %343

343:                                              ; preds = %341, %343
  %344 = phi i64 [ %339, %341 ], [ %355, %343 ]
  %345 = getelementptr inbounds i64, i64* %55, i64 %344
  %346 = load i64, i64* %345, align 8
  %347 = load i64*, i64** %342, align 8
  %348 = lshr i64 %346, 6
  %349 = getelementptr inbounds i64, i64* %347, i64 %348
  %350 = and i64 %346, 63
  %351 = shl i64 1, %350
  %352 = xor i64 %351, -1
  %353 = load i64, i64* %349, align 8
  %354 = and i64 %353, %352
  store i64 %354, i64* %349, align 8
  %355 = add nuw nsw i64 %344, 1
  %356 = load i8, i8* %35, align 8
  %357 = zext i8 %356 to i64
  %358 = icmp ult i64 %355, %357
  br i1 %358, label %343, label %359

359:                                              ; preds = %343, %335
  %360 = icmp sgt i64 %337, 0
  br i1 %360, label %361, label %384

361:                                              ; preds = %359
  %362 = call i32 @_ZNK6webrtc22VideoBitrateAllocation18GetSpatialLayerSumEm(%"class.webrtc::VideoBitrateAllocation"* %3, i64 %338) #13
  %363 = zext i32 %362 to i64
  %364 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %364)
  %365 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 1, i32 10, i64 %338, i32 4
  %366 = load i32, i32* %365, align 4
  %367 = zext i32 %366 to i64
  %368 = mul nuw nsw i64 %367, 1000
  %369 = sub nsw i64 %368, %363
  store i64 %369, i64* %11, align 8
  %370 = icmp slt i64 %369, %337
  %371 = bitcast i64* %11 to %"class.webrtc::DataRate"*
  %372 = select i1 %370, %"class.webrtc::DataRate"* %371, %"class.webrtc::DataRate"* %191
  %373 = getelementptr inbounds %"class.webrtc::DataRate", %"class.webrtc::DataRate"* %372, i64 0, i32 0, i32 0, i32 0
  %374 = load i64, i64* %373, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %364)
  %375 = icmp eq i64 %374, 9223372036854775807
  br i1 %375, label %381, label %376

376:                                              ; preds = %361
  %377 = icmp eq i64 %374, -9223372036854775808
  %378 = add nsw i64 %374, %363
  %379 = select i1 %377, i64 0, i64 %378
  %380 = trunc i64 %379 to i32
  br label %381

381:                                              ; preds = %361, %376
  %382 = phi i32 [ %380, %376 ], [ -1, %361 ]
  %383 = call zeroext i1 @_ZN6webrtc22VideoBitrateAllocation10SetBitrateEmmj(%"class.webrtc::VideoBitrateAllocation"* %3, i64 %338, i64 0, i32 %382) #13
  br label %384

384:                                              ; preds = %381, %359
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %182)
  br label %385

385:                                              ; preds = %384, %178
  call void @_ZdlPv(i8* nonnull %54) #14
  br label %386

386:                                              ; preds = %385, %42, %38
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6webrtc22SimulcastRateAllocator36DistributeAllocationToTemporalLayersEPNS_22VideoBitrateAllocationE(%"class.webrtc::SimulcastRateAllocator"*, %"class.webrtc::VideoBitrateAllocation"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::vector.37", align 8
  %4 = alloca %"class.std::__1::vector.37", align 8
  %5 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 1, i32 9
  %6 = load i8, i8* %5, align 8
  %7 = zext i8 %6 to i32
  %8 = icmp ugt i32 %7, 1
  %9 = select i1 %8, i32 %7, i32 1
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %31

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 1
  %13 = getelementptr inbounds %"class.webrtc::VideoCodec", %"class.webrtc::VideoCodec"* %12, i64 0, i32 0
  %14 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 1, i32 12
  %15 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 5
  %16 = icmp ult i8 %6, 2
  %17 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 1, i32 4
  %18 = bitcast %"class.std::__1::vector.37"* %3 to i8*
  %19 = getelementptr inbounds %"class.std::__1::vector.37", %"class.std::__1::vector.37"* %3, i64 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.std::__1::vector.37", %"class.std::__1::vector.37"* %3, i64 0, i32 0, i32 1
  %21 = getelementptr inbounds %"class.std::__1::vector.37", %"class.std::__1::vector.37"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  %22 = bitcast %"class.std::__1::vector.37"* %4 to i8*
  %23 = bitcast i32** %20 to i64*
  %24 = bitcast %"class.std::__1::vector.37"* %4 to i64*
  %25 = bitcast %"class.std::__1::vector.37"* %3 to i64*
  %26 = getelementptr inbounds %"class.std::__1::vector.37", %"class.std::__1::vector.37"* %4, i64 0, i32 0, i32 1
  %27 = bitcast i32** %21 to i64*
  %28 = zext i32 %9 to i64
  %29 = bitcast i32** %26 to <2 x i64>*
  %30 = bitcast i32** %20 to <2 x i64>*
  br label %32

31:                                               ; preds = %152, %2
  ret void

32:                                               ; preds = %11, %152
  %33 = phi i64 [ 0, %11 ], [ %153, %152 ]
  %34 = call i32 @_ZNK6webrtc22VideoBitrateAllocation10GetBitrateEmm(%"class.webrtc::VideoBitrateAllocation"* %1, i64 %33, i64 0) #13
  %35 = udiv i32 %34, 1000
  %36 = icmp ult i32 %34, 1000
  br i1 %36, label %152, label %37

37:                                               ; preds = %32
  %38 = load i32, i32* %13, align 8
  %39 = icmp eq i32 %38, 1
  br i1 %39, label %40, label %46

40:                                               ; preds = %37
  %41 = load i8, i8* %5, align 8
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %43, label %46

43:                                               ; preds = %40
  %44 = call dereferenceable(12) %"struct.webrtc::VideoCodecVP8"* @_ZNK6webrtc10VideoCodec3VP8Ev(%"class.webrtc::VideoCodec"* %12) #13
  %45 = getelementptr inbounds %"struct.webrtc::VideoCodecVP8", %"struct.webrtc::VideoCodecVP8"* %44, i64 0, i32 1
  br label %48

46:                                               ; preds = %40, %37
  %47 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 1, i32 10, i64 %33, i32 3
  br label %48

48:                                               ; preds = %43, %46
  %49 = phi i8* [ %45, %43 ], [ %47, %46 ]
  %50 = load i8, i8* %49, align 1
  %51 = icmp ult i8 %50, 2
  %52 = load i32, i32* %14, align 4
  %53 = icmp eq i32 %52, 1
  br i1 %53, label %54, label %64

54:                                               ; preds = %48
  %55 = load i8, i8* %15, align 8, !range !2
  %56 = icmp ne i8 %55, 0
  %57 = icmp eq i64 %33, 0
  %58 = and i1 %57, %56
  br i1 %58, label %59, label %64

59:                                               ; preds = %54
  %60 = icmp ult i32 %35, 1000
  %61 = select i1 %60, i32 %35, i32 1000
  %62 = icmp ult i32 %35, 200
  %63 = select i1 %62, i32 %35, i32 200
  br label %70

64:                                               ; preds = %54, %48
  br i1 %16, label %65, label %67

65:                                               ; preds = %64
  %66 = load i32, i32* %17, align 4
  br label %70

67:                                               ; preds = %64
  %68 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 1, i32 10, i64 %33, i32 4
  %69 = load i32, i32* %68, align 4
  br label %70

70:                                               ; preds = %65, %67, %59
  %71 = phi i32 [ %63, %59 ], [ %35, %65 ], [ %35, %67 ]
  %72 = phi i32 [ %61, %59 ], [ %66, %65 ], [ %69, %67 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %18) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 0, i64 24, i1 false) #13
  br i1 %51, label %73, label %79

73:                                               ; preds = %70
  %74 = call i8* @_Znwm(i64 4) #14
  %75 = bitcast i8* %74 to i32*
  %76 = getelementptr inbounds i8, i8* %74, i64 4
  %77 = ptrtoint i8* %76 to i64
  store i32 %71, i32* %75, align 4
  %78 = ptrtoint i8* %74 to i64
  store i64 %78, i64* %25, align 8
  store i64 %77, i64* %23, align 8
  store i64 %77, i64* %27, align 8
  br label %123

79:                                               ; preds = %70
  br i1 %53, label %80, label %109

80:                                               ; preds = %79
  %81 = load i8, i8* %15, align 8, !range !2
  %82 = icmp ne i8 %81, 0
  %83 = icmp eq i64 %33, 0
  %84 = and i1 %83, %82
  br i1 %84, label %85, label %109

85:                                               ; preds = %80
  %86 = call i8* @_Znwm(i64 4) #14
  %87 = bitcast i8* %86 to i32*
  store i32 %71, i32* %87, align 4, !noalias !9
  %88 = icmp sgt i32 %72, %71
  br i1 %88, label %93, label %89

89:                                               ; preds = %85
  %90 = getelementptr inbounds i8, i8* %86, i64 4
  %91 = ptrtoint i8* %86 to i64
  %92 = ptrtoint i8* %90 to i64
  br label %106

93:                                               ; preds = %85
  %94 = sub nsw i32 %72, %71
  %95 = call i8* @_Znwm(i64 8) #14
  %96 = bitcast i8* %95 to i32*
  %97 = getelementptr inbounds i8, i8* %95, i64 4
  %98 = bitcast i8* %97 to i32*
  %99 = getelementptr inbounds i8, i8* %95, i64 8
  store i32 %94, i32* %98, align 4, !noalias !9
  store i32 %71, i32* %96, align 4, !noalias !9
  call void @_ZdlPv(i8* nonnull %86) #14
  %100 = load i32*, i32** %19, align 8
  %101 = ptrtoint i8* %95 to i64
  %102 = ptrtoint i8* %99 to i64
  %103 = icmp eq i32* %100, null
  br i1 %103, label %106, label %104

104:                                              ; preds = %93
  %105 = bitcast i32* %100 to i8*
  call void @_ZdlPv(i8* %105) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 0, i64 24, i1 false) #13
  br label %106

106:                                              ; preds = %104, %93, %89
  %107 = phi i64 [ %92, %89 ], [ %102, %93 ], [ %102, %104 ]
  %108 = phi i64 [ %91, %89 ], [ %101, %93 ], [ %101, %104 ]
  store i64 %108, i64* %25, align 8
  store i64 %107, i64* %23, align 8
  store i64 %107, i64* %27, align 8
  br label %119

109:                                              ; preds = %80, %79
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %22) #13
  %110 = trunc i64 %33 to i32
  call void @_ZNK6webrtc22SimulcastRateAllocator30DefaultTemporalLayerAllocationEiii(%"class.std::__1::vector.37"* nonnull sret %4, %"class.webrtc::SimulcastRateAllocator"* %0, i32 %71, i32 undef, i32 %110)
  %111 = load i32*, i32** %19, align 8
  %112 = icmp eq i32* %111, null
  br i1 %112, label %115, label %113

113:                                              ; preds = %109
  %114 = bitcast i32* %111 to i8*
  call void @_ZdlPv(i8* %114) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 0, i64 24, i1 false) #13
  br label %115

115:                                              ; preds = %113, %109
  %116 = load i64, i64* %24, align 8
  store i64 %116, i64* %25, align 8
  %117 = load <2 x i64>, <2 x i64>* %29, align 8
  store <2 x i64> %117, <2 x i64>* %30, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %22) #13
  %118 = extractelement <2 x i64> %117, i32 0
  br label %119

119:                                              ; preds = %106, %115
  %120 = phi i64 [ %108, %106 ], [ %116, %115 ]
  %121 = phi i64 [ %107, %106 ], [ %118, %115 ]
  %122 = icmp eq i64 %121, %120
  br i1 %122, label %126, label %123

123:                                              ; preds = %73, %119
  %124 = phi i64 [ %120, %119 ], [ %78, %73 ]
  %125 = phi i64 [ %121, %119 ], [ %77, %73 ]
  br label %132

126:                                              ; preds = %145, %119
  %127 = phi i64 [ %120, %119 ], [ %146, %145 ]
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %131, label %129

129:                                              ; preds = %126
  store i64 %127, i64* %23, align 8
  %130 = inttoptr i64 %127 to i8*
  call void @_ZdlPv(i8* %130) #14
  br label %131

131:                                              ; preds = %126, %129
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18) #13
  br label %152

132:                                              ; preds = %123, %145
  %133 = phi i64 [ %146, %145 ], [ %124, %123 ]
  %134 = phi i64 [ %147, %145 ], [ %125, %123 ]
  %135 = phi i64 [ %148, %145 ], [ 0, %123 ]
  %136 = inttoptr i64 %133 to i32*
  %137 = getelementptr inbounds i32, i32* %136, i64 %135
  %138 = load i32, i32* %137, align 4
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %145, label %140

140:                                              ; preds = %132
  %141 = mul i32 %138, 1000
  %142 = call zeroext i1 @_ZN6webrtc22VideoBitrateAllocation10SetBitrateEmmj(%"class.webrtc::VideoBitrateAllocation"* %1, i64 %33, i64 %135, i32 %141) #13
  %143 = load i64, i64* %23, align 8
  %144 = load i64, i64* %25, align 8
  br label %145

145:                                              ; preds = %132, %140
  %146 = phi i64 [ %133, %132 ], [ %144, %140 ]
  %147 = phi i64 [ %134, %132 ], [ %143, %140 ]
  %148 = add nuw i64 %135, 1
  %149 = sub i64 %147, %146
  %150 = ashr exact i64 %149, 2
  %151 = icmp ult i64 %148, %150
  br i1 %151, label %132, label %126

152:                                              ; preds = %32, %131
  %153 = add nuw nsw i64 %33, 1
  %154 = icmp ult i64 %153, %28
  br i1 %154, label %32, label %31
}

declare zeroext i1 @_ZN6webrtc22VideoBitrateAllocation10SetBitrateEmmj(%"class.webrtc::VideoBitrateAllocation"*, i64, i64, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIbNS_9allocatorIbEEE6resizeEmb(%"class.std::__1::vector.20"*, i64, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.std::__1::vector.20", align 16
  %5 = getelementptr inbounds %"class.std::__1::vector.20", %"class.std::__1::vector.20"* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp ult i64 %6, %1
  br i1 %7, label %8, label %159

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.std::__1::vector.20", %"class.std::__1::vector.20"* %0, i64 0, i32 2, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = shl i64 %10, 6
  %12 = sub i64 %1, %6
  %13 = icmp ult i64 %11, %12
  %14 = sub i64 %11, %12
  %15 = icmp ugt i64 %6, %14
  %16 = or i1 %13, %15
  br i1 %16, label %25, label %17

17:                                               ; preds = %8
  %18 = getelementptr inbounds %"class.std::__1::vector.20", %"class.std::__1::vector.20"* %0, i64 0, i32 0
  %19 = load i64*, i64** %18, align 8, !noalias !12
  %20 = lshr i64 %6, 6
  %21 = getelementptr inbounds i64, i64* %19, i64 %20
  %22 = trunc i64 %6 to i32
  %23 = and i32 %22, 63
  %24 = ptrtoint i64* %21 to i64
  store i64 %1, i64* %5, align 8
  br label %86

25:                                               ; preds = %8
  %26 = bitcast %"class.std::__1::vector.20"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %26) #13
  %27 = getelementptr inbounds %"class.std::__1::vector.20", %"class.std::__1::vector.20"* %4, i64 0, i32 1
  %28 = getelementptr inbounds %"class.std::__1::vector.20", %"class.std::__1::vector.20"* %4, i64 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 0, i64 24, i1 false) #13
  %29 = icmp slt i64 %1, 0
  br i1 %29, label %30, label %32

30:                                               ; preds = %25
  %31 = bitcast %"class.std::__1::vector.20"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %31) #12
  unreachable

32:                                               ; preds = %25
  %33 = icmp ult i64 %11, 4611686018427387903
  br i1 %33, label %34, label %40

34:                                               ; preds = %32
  %35 = shl i64 %10, 7
  %36 = add nuw i64 %1, 63
  %37 = and i64 %36, -64
  %38 = icmp ult i64 %35, %37
  %39 = select i1 %38, i64 %37, i64 %35
  br label %40

40:                                               ; preds = %34, %32
  %41 = phi i64 [ %39, %34 ], [ 9223372036854775807, %32 ]
  call void @_ZNSt3__16vectorIbNS_9allocatorIbEEE7reserveEm(%"class.std::__1::vector.20"* nonnull %4, i64 %41)
  %42 = load i64, i64* %5, align 8
  %43 = add i64 %42, %12
  store i64 %43, i64* %27, align 8
  %44 = getelementptr inbounds %"class.std::__1::vector.20", %"class.std::__1::vector.20"* %0, i64 0, i32 0
  %45 = load i64*, i64** %44, align 8
  %46 = bitcast %"class.std::__1::vector.20"* %4 to i64*
  %47 = load i64, i64* %46, align 16, !noalias !17
  %48 = icmp sgt i64 %42, 0
  br i1 %48, label %49, label %70

49:                                               ; preds = %40
  %50 = inttoptr i64 %47 to i8*
  %51 = lshr i64 %42, 6
  %52 = bitcast i64* %45 to i8*
  %53 = shl nuw nsw i64 %51, 3
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %52, i64 %53, i1 false) #13, !noalias !22
  %54 = and i64 %42, 63
  %55 = inttoptr i64 %47 to i64*
  %56 = getelementptr inbounds i64, i64* %55, i64 %51
  %57 = ptrtoint i64* %56 to i64
  %58 = icmp eq i64 %54, 0
  br i1 %58, label %70, label %59

59:                                               ; preds = %49
  %60 = getelementptr inbounds i64, i64* %45, i64 %51
  %61 = sub nuw nsw i64 64, %54
  %62 = lshr i64 -1, %61
  %63 = load i64, i64* %60, align 8, !noalias !25
  %64 = and i64 %63, %62
  %65 = xor i64 %62, -1
  %66 = load i64, i64* %56, align 8, !noalias !22
  %67 = and i64 %66, %65
  %68 = or i64 %67, %64
  store i64 %68, i64* %56, align 8, !noalias !22
  %69 = trunc i64 %54 to i32
  br label %70

70:                                               ; preds = %49, %40, %59
  %71 = phi i32 [ %69, %59 ], [ 0, %49 ], [ 0, %40 ]
  %72 = phi i64 [ %57, %59 ], [ %57, %49 ], [ %47, %40 ]
  %73 = bitcast %"class.std::__1::vector.20"* %4 to <2 x i64>*
  %74 = load <2 x i64>, <2 x i64>* %73, align 16
  %75 = bitcast %"class.std::__1::vector.20"* %0 to <2 x i64>*
  %76 = load <2 x i64>, <2 x i64>* %75, align 8
  %77 = bitcast %"class.std::__1::vector.20"* %0 to <2 x i64>*
  store <2 x i64> %74, <2 x i64>* %77, align 8
  %78 = bitcast %"class.std::__1::vector.20"* %4 to <2 x i64>*
  store <2 x i64> %76, <2 x i64>* %78, align 16
  %79 = load i64, i64* %9, align 8
  %80 = load i64, i64* %28, align 16
  store i64 %80, i64* %9, align 8
  store i64 %79, i64* %28, align 16
  %81 = extractelement <2 x i64> %76, i32 0
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %85, label %83

83:                                               ; preds = %70
  %84 = inttoptr i64 %81 to i8*
  call void @_ZdlPv(i8* %84) #14
  br label %85

85:                                               ; preds = %70, %83
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %26) #13
  br label %86

86:                                               ; preds = %85, %17
  %87 = phi i64 [ %72, %85 ], [ %24, %17 ]
  %88 = phi i32 [ %71, %85 ], [ %23, %17 ]
  %89 = inttoptr i64 %87 to i64*
  %90 = icmp eq i64 %12, 0
  br i1 %90, label %160, label %91

91:                                               ; preds = %86
  %92 = icmp eq i32 %88, 0
  br i1 %2, label %93, label %125

93:                                               ; preds = %91
  br i1 %92, label %94, label %96

94:                                               ; preds = %93
  %95 = inttoptr i64 %87 to i8*
  br label %111

96:                                               ; preds = %93
  %97 = sub nuw nsw i32 64, %88
  %98 = zext i32 %97 to i64
  %99 = icmp ult i64 %12, %98
  %100 = select i1 %99, i64 %12, i64 %98
  %101 = zext i32 %88 to i64
  %102 = shl i64 -1, %101
  %103 = sub nsw i64 %98, %100
  %104 = lshr i64 -1, %103
  %105 = and i64 %104, %102
  %106 = load i64, i64* %89, align 8
  %107 = or i64 %106, %105
  store i64 %107, i64* %89, align 8
  %108 = sub i64 %12, %100
  %109 = getelementptr inbounds i64, i64* %89, i64 1
  %110 = bitcast i64* %109 to i8*
  br label %111

111:                                              ; preds = %96, %94
  %112 = phi i64* [ %89, %94 ], [ %109, %96 ]
  %113 = phi i8* [ %95, %94 ], [ %110, %96 ]
  %114 = phi i64 [ %12, %94 ], [ %108, %96 ]
  %115 = lshr i64 %114, 6
  %116 = shl nuw nsw i64 %115, 3
  call void @llvm.memset.p0i8.i64(i8* align 8 %113, i8 -1, i64 %116, i1 false) #13
  %117 = and i64 %114, 63
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %160, label %119

119:                                              ; preds = %111
  %120 = getelementptr inbounds i64, i64* %112, i64 %115
  %121 = sub nuw nsw i64 64, %117
  %122 = lshr i64 -1, %121
  %123 = load i64, i64* %120, align 8
  %124 = or i64 %123, %122
  store i64 %124, i64* %120, align 8
  br label %160

125:                                              ; preds = %91
  br i1 %92, label %126, label %128

126:                                              ; preds = %125
  %127 = inttoptr i64 %87 to i8*
  br label %144

128:                                              ; preds = %125
  %129 = sub nuw nsw i32 64, %88
  %130 = zext i32 %129 to i64
  %131 = icmp ult i64 %12, %130
  %132 = select i1 %131, i64 %12, i64 %130
  %133 = zext i32 %88 to i64
  %134 = shl i64 -1, %133
  %135 = sub nsw i64 %130, %132
  %136 = lshr i64 -1, %135
  %137 = and i64 %136, %134
  %138 = xor i64 %137, -1
  %139 = load i64, i64* %89, align 8
  %140 = and i64 %139, %138
  store i64 %140, i64* %89, align 8
  %141 = sub i64 %12, %132
  %142 = getelementptr inbounds i64, i64* %89, i64 1
  %143 = bitcast i64* %142 to i8*
  br label %144

144:                                              ; preds = %128, %126
  %145 = phi i64* [ %89, %126 ], [ %142, %128 ]
  %146 = phi i8* [ %127, %126 ], [ %143, %128 ]
  %147 = phi i64 [ %12, %126 ], [ %141, %128 ]
  %148 = lshr i64 %147, 6
  %149 = shl nuw nsw i64 %148, 3
  call void @llvm.memset.p0i8.i64(i8* align 8 %146, i8 0, i64 %149, i1 false) #13
  %150 = and i64 %147, 63
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %160, label %152

152:                                              ; preds = %144
  %153 = getelementptr inbounds i64, i64* %145, i64 %148
  %154 = sub nuw nsw i64 64, %150
  %155 = lshr i64 -1, %154
  %156 = xor i64 %155, -1
  %157 = load i64, i64* %153, align 8
  %158 = and i64 %157, %156
  store i64 %158, i64* %153, align 8
  br label %160

159:                                              ; preds = %3
  store i64 %1, i64* %5, align 8
  br label %160

160:                                              ; preds = %152, %144, %119, %111, %86, %159
  ret void
}

declare double @_ZNK6webrtc26StableTargetRateExperiment24GetVideoHysteresisFactorEv(%"class.webrtc::StableTargetRateExperiment"*) local_unnamed_addr #2

declare double @_ZNK6webrtc26StableTargetRateExperiment30GetScreenshareHysteresisFactorEv(%"class.webrtc::StableTargetRateExperiment"*) local_unnamed_addr #2

declare i32 @_ZNK6webrtc22VideoBitrateAllocation18GetSpatialLayerSumEm(%"class.webrtc::VideoBitrateAllocation"*, i64) local_unnamed_addr #2

declare i32 @_ZNK6webrtc22VideoBitrateAllocation10GetBitrateEmm(%"class.webrtc::VideoBitrateAllocation"*, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK6webrtc22SimulcastRateAllocator18NumTemporalStreamsEm(%"class.webrtc::SimulcastRateAllocator"*, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.webrtc::VideoCodec", %"class.webrtc::VideoCodec"* %3, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 1
  br i1 %6, label %7, label %14

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 1, i32 9
  %9 = load i8, i8* %8, align 8
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %7
  %12 = tail call dereferenceable(12) %"struct.webrtc::VideoCodecVP8"* @_ZNK6webrtc10VideoCodec3VP8Ev(%"class.webrtc::VideoCodec"* %3) #13
  %13 = getelementptr inbounds %"struct.webrtc::VideoCodecVP8", %"struct.webrtc::VideoCodecVP8"* %12, i64 0, i32 1
  br label %16

14:                                               ; preds = %7, %2
  %15 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 1, i32 10, i64 %1, i32 3
  br label %16

16:                                               ; preds = %14, %11
  %17 = phi i8* [ %13, %11 ], [ %15, %14 ]
  %18 = load i8, i8* %17, align 1
  %19 = icmp ugt i8 %18, 1
  %20 = select i1 %19, i8 %18, i8 1
  %21 = zext i8 %20 to i32
  ret i32 %21
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6webrtc22SimulcastRateAllocator34ScreenshareTemporalLayerAllocationEiii(%"class.std::__1::vector.37"* noalias sret, %"class.webrtc::SimulcastRateAllocator"*, i32, i32, i32) local_unnamed_addr #0 align 2 {
  %6 = icmp sgt i32 %4, 0
  br i1 %6, label %7, label %8

7:                                                ; preds = %5
  tail call void @_ZNK6webrtc22SimulcastRateAllocator30DefaultTemporalLayerAllocationEiii(%"class.std::__1::vector.37"* sret %0, %"class.webrtc::SimulcastRateAllocator"* %1, i32 %2, i32 undef, i32 %4)
  br label %35

8:                                                ; preds = %5
  %9 = tail call i8* @_Znwm(i64 4) #14
  %10 = bitcast i8* %9 to i32*
  %11 = getelementptr inbounds i8, i8* %9, i64 4
  %12 = ptrtoint i8* %11 to i64
  store i32 %2, i32* %10, align 4
  %13 = icmp sgt i32 %3, %2
  %14 = insertelement <2 x i64> undef, i64 %12, i32 0
  %15 = shufflevector <2 x i64> %14, <2 x i64> undef, <2 x i32> zeroinitializer
  br i1 %13, label %16, label %28

16:                                               ; preds = %8
  %17 = sub nsw i32 %3, %2
  %18 = tail call i8* @_Znwm(i64 8) #14
  %19 = bitcast i8* %18 to i32*
  %20 = getelementptr inbounds i8, i8* %18, i64 4
  %21 = bitcast i8* %20 to i32*
  store i32 %17, i32* %21, align 4
  %22 = insertelement <2 x i8*> undef, i8* %18, i32 0
  %23 = shufflevector <2 x i8*> %22, <2 x i8*> undef, <2 x i32> zeroinitializer
  %24 = getelementptr i8, <2 x i8*> %23, <2 x i64> <i64 8, i64 8>
  %25 = ptrtoint <2 x i8*> %24 to <2 x i64>
  %26 = bitcast i8* %9 to i32*
  %27 = load i32, i32* %26, align 4
  store i32 %27, i32* %19, align 4
  tail call void @_ZdlPv(i8* nonnull %9) #14
  br label %28

28:                                               ; preds = %16, %8
  %29 = phi i8* [ %18, %16 ], [ %9, %8 ]
  %30 = phi <2 x i64> [ %25, %16 ], [ %15, %8 ]
  %31 = ptrtoint i8* %29 to i64
  %32 = bitcast %"class.std::__1::vector.37"* %0 to i64*
  store i64 %31, i64* %32, align 8
  %33 = getelementptr inbounds %"class.std::__1::vector.37", %"class.std::__1::vector.37"* %0, i64 0, i32 0, i32 1
  %34 = bitcast i32** %33 to <2 x i64>*
  store <2 x i64> %30, <2 x i64>* %34, align 8
  br label %35

35:                                               ; preds = %28, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6webrtc22SimulcastRateAllocator30DefaultTemporalLayerAllocationEiii(%"class.std::__1::vector.37"* noalias sret, %"class.webrtc::SimulcastRateAllocator"*, i32, i32, i32) local_unnamed_addr #0 align 2 {
  %6 = sext i32 %4 to i64
  %7 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %1, i64 0, i32 1
  %8 = getelementptr inbounds %"class.webrtc::VideoCodec", %"class.webrtc::VideoCodec"* %7, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %18

11:                                               ; preds = %5
  %12 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %1, i64 0, i32 1, i32 9
  %13 = load i8, i8* %12, align 8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %11
  %16 = tail call dereferenceable(12) %"struct.webrtc::VideoCodecVP8"* @_ZNK6webrtc10VideoCodec3VP8Ev(%"class.webrtc::VideoCodec"* %7) #13
  %17 = getelementptr inbounds %"struct.webrtc::VideoCodecVP8", %"struct.webrtc::VideoCodecVP8"* %16, i64 0, i32 1
  br label %20

18:                                               ; preds = %11, %5
  %19 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %1, i64 0, i32 1, i32 10, i64 %6, i32 3
  br label %20

20:                                               ; preds = %15, %18
  %21 = phi i8* [ %17, %15 ], [ %19, %18 ]
  %22 = load i8, i8* %21, align 1
  %23 = icmp ugt i8 %22, 1
  %24 = select i1 %23, i8 %22, i8 1
  %25 = zext i8 %24 to i32
  %26 = zext i8 %24 to i64
  %27 = getelementptr inbounds %"class.std::__1::vector.37", %"class.std::__1::vector.37"* %0, i64 0, i32 0, i32 0
  %28 = getelementptr inbounds %"class.std::__1::vector.37", %"class.std::__1::vector.37"* %0, i64 0, i32 0, i32 1
  %29 = getelementptr inbounds %"class.std::__1::vector.37", %"class.std::__1::vector.37"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %30 = bitcast %"class.std::__1::vector.37"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 24, i1 false) #13
  %31 = sitofp i32 %2 to float
  %32 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %1, i64 0, i32 3
  %33 = bitcast i32** %28 to i64*
  %34 = bitcast %"class.std::__1::vector.37"* %0 to i64*
  %35 = bitcast i32** %29 to i64*
  br label %36

36:                                               ; preds = %103, %20
  %37 = phi i64 [ 0, %20 ], [ %106, %103 ]
  %38 = phi i32* [ null, %20 ], [ %105, %103 ]
  %39 = phi i32* [ null, %20 ], [ %104, %103 ]
  %40 = phi i64 [ 0, %20 ], [ %101, %103 ]
  %41 = trunc i64 %40 to i32
  %42 = tail call zeroext i1 @_ZNK6webrtc19RateControlSettings29Vp8BaseHeavyTl3RateAllocationEv(%"class.webrtc::RateControlSettings"* %32) #13
  %43 = tail call float @_ZN6webrtc22SimulcastRateAllocator25GetTemporalRateAllocationEiib(i32 %25, i32 %41, i1 zeroext %42)
  %44 = fmul float %43, %31
  %45 = fpext float %44 to double
  %46 = fadd double %45, 5.000000e-01
  %47 = fptoui double %46 to i32
  %48 = icmp ult i32* %39, %38
  %49 = ptrtoint i32* %38 to i64
  br i1 %48, label %50, label %53

50:                                               ; preds = %36
  store i32 %47, i32* %39, align 4
  %51 = getelementptr inbounds i32, i32* %39, i64 1
  %52 = ptrtoint i32* %51 to i64
  store i64 %52, i64* %33, align 8
  br label %100

53:                                               ; preds = %36
  %54 = ptrtoint i32* %39 to i64
  %55 = load i64, i64* %34, align 8
  %56 = sub i64 %54, %55
  %57 = ashr exact i64 %56, 2
  %58 = add nsw i64 %57, 1
  %59 = icmp ugt i64 %58, 4611686018427387903
  br i1 %59, label %60, label %62

60:                                               ; preds = %53
  %61 = bitcast %"class.std::__1::vector.37"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %61) #12
  unreachable

62:                                               ; preds = %53
  %63 = sub i64 %49, %55
  %64 = ashr exact i64 %63, 2
  %65 = icmp ult i64 %64, 2305843009213693951
  br i1 %65, label %66, label %74

66:                                               ; preds = %62
  %67 = ashr exact i64 %63, 1
  %68 = icmp ult i64 %67, %58
  %69 = select i1 %68, i64 %58, i64 %67
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %79, label %71

71:                                               ; preds = %66
  %72 = icmp ugt i64 %69, 4611686018427387903
  br i1 %72, label %73, label %74

73:                                               ; preds = %71
  tail call void @abort() #12
  unreachable

74:                                               ; preds = %71, %62
  %75 = phi i64 [ %69, %71 ], [ 4611686018427387903, %62 ]
  %76 = shl i64 %75, 2
  %77 = tail call i8* @_Znwm(i64 %76) #14
  %78 = bitcast i8* %77 to i32*
  br label %79

79:                                               ; preds = %74, %66
  %80 = phi i64 [ %75, %74 ], [ 0, %66 ]
  %81 = phi i32* [ %78, %74 ], [ null, %66 ]
  %82 = getelementptr inbounds i32, i32* %81, i64 %57
  %83 = getelementptr inbounds i32, i32* %81, i64 %80
  %84 = ptrtoint i32* %83 to i64
  store i32 %47, i32* %82, align 4
  %85 = getelementptr inbounds i32, i32* %82, i64 1
  %86 = ptrtoint i32* %85 to i64
  %87 = sub i64 %37, %55
  %88 = ashr exact i64 %87, 2
  %89 = sub nsw i64 0, %88
  %90 = getelementptr inbounds i32, i32* %82, i64 %89
  %91 = ptrtoint i32* %90 to i64
  %92 = icmp sgt i64 %87, 0
  br i1 %92, label %93, label %96

93:                                               ; preds = %79
  %94 = bitcast i32* %90 to i8*
  %95 = inttoptr i64 %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %94, i8* align 4 %95, i64 %87, i1 false) #13
  br label %96

96:                                               ; preds = %93, %79
  store i64 %91, i64* %34, align 8
  store i64 %86, i64* %33, align 8
  store i64 %84, i64* %35, align 8
  %97 = icmp eq i64 %55, 0
  br i1 %97, label %100, label %98

98:                                               ; preds = %96
  %99 = inttoptr i64 %55 to i8*
  tail call void @_ZdlPv(i8* %99) #14
  br label %100

100:                                              ; preds = %50, %96, %98
  %101 = add nuw nsw i64 %40, 1
  %102 = icmp ult i64 %101, %26
  br i1 %102, label %103, label %107

103:                                              ; preds = %100
  %104 = load i32*, i32** %28, align 8
  %105 = load i32*, i32** %29, align 8
  %106 = ptrtoint i32* %104 to i64
  br label %36

107:                                              ; preds = %100, %111
  %108 = phi i32 [ %114, %111 ], [ 0, %100 ]
  %109 = phi i64 [ %117, %111 ], [ 0, %100 ]
  %110 = icmp ult i64 %109, %26
  br i1 %110, label %111, label %131

111:                                              ; preds = %107
  %112 = load i32*, i32** %27, align 8
  %113 = getelementptr inbounds i32, i32* %112, i64 %109
  %114 = load i32, i32* %113, align 4
  %115 = sub i32 %114, %108
  store i32 %115, i32* %113, align 4
  %116 = icmp ult i32 %114, %2
  %117 = add nuw nsw i64 %109, 1
  br i1 %116, label %107, label %118

118:                                              ; preds = %111
  %119 = load i64, i64* %33, align 8
  %120 = load i64, i64* %34, align 8
  %121 = sub i64 %119, %120
  %122 = ashr exact i64 %121, 2
  %123 = icmp ult i64 %109, %122
  %124 = inttoptr i64 %120 to i32*
  br i1 %123, label %127, label %125

125:                                              ; preds = %118
  %126 = sub i64 %117, %122
  tail call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector.37"* %0, i64 %126) #13
  br label %131

127:                                              ; preds = %118
  %128 = icmp ult i64 %117, %122
  br i1 %128, label %129, label %131

129:                                              ; preds = %127
  %130 = getelementptr inbounds i32, i32* %124, i64 %117
  store i32* %130, i32** %28, align 8
  br label %131

131:                                              ; preds = %107, %129, %127, %125
  ret void
}

declare zeroext i1 @_ZNK6webrtc19RateControlSettings29Vp8BaseHeavyTl3RateAllocationEv(%"class.webrtc::RateControlSettings"*) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden dereferenceable(376) %"class.webrtc::VideoCodec"* @_ZNK6webrtc22SimulcastRateAllocator8GetCodecEv(%"class.webrtc::SimulcastRateAllocator"* readnone) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 1
  ret %"class.webrtc::VideoCodec"* %2
}

declare dereferenceable(12) %"struct.webrtc::VideoCodecVP8"* @_ZNK6webrtc10VideoCodec3VP8Ev(%"class.webrtc::VideoCodec"*) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6webrtc22SimulcastRateAllocator23SetLegacyConferenceModeEb(%"class.webrtc::SimulcastRateAllocator"* nocapture, i1 zeroext) unnamed_addr #6 align 2 {
  %3 = zext i1 %1 to i8
  %4 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %0, i64 0, i32 5
  store i8 %3, i8* %4, align 8
  ret void
}

declare void @_ZN6webrtc21VideoBitrateAllocator13GetAllocationEjj(%"class.webrtc::VideoBitrateAllocation"* sret, %"class.webrtc::VideoBitrateAllocator"*, i32, i32) unnamed_addr #2

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN6webrtc28FieldTrialParameterInterfaceD2Ev(%"class.webrtc::FieldTrialParameterInterface"*) unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare double @llvm.round.f64(double) #7

; Function Attrs: noreturn
declare void @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8*, i32, i8*, i8*, ...) local_unnamed_addr #8

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #9

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @"_ZNSt3__113__stable_sortIRZN6webrtc22SimulcastRateAllocator37DistributeAllocationToSimulcastLayersENS1_8DataRateES3_PNS1_22VideoBitrateAllocationEE3$_1NS_11__wrap_iterIPmEEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeEPNSE_10value_typeEl"(i64*, i64*, %class.anon* dereferenceable(8), i64, i64*, i64) unnamed_addr #0 {
  switch i64 %3, label %19 [
    i64 0, label %396
    i64 1, label %396
    i64 2, label %7
  ]

7:                                                ; preds = %6
  %8 = getelementptr inbounds i64, i64* %1, i64 -1
  %9 = load i64, i64* %8, align 8
  %10 = load i64, i64* %0, align 8
  %11 = getelementptr inbounds %class.anon, %class.anon* %2, i64 0, i32 0
  %12 = load %"class.webrtc::SimulcastRateAllocator"*, %"class.webrtc::SimulcastRateAllocator"** %11, align 8
  %13 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %12, i64 0, i32 1, i32 10, i64 %9, i32 4
  %14 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %12, i64 0, i32 1, i32 10, i64 %10, i32 4
  %15 = load i32, i32* %13, align 4
  %16 = load i32, i32* %14, align 4
  %17 = icmp ult i32 %15, %16
  br i1 %17, label %18, label %396

18:                                               ; preds = %7
  store i64 %9, i64* %0, align 8
  store i64 %10, i64* %8, align 8
  br label %396

19:                                               ; preds = %6
  %20 = icmp slt i64 %3, 129
  br i1 %20, label %21, label %48

21:                                               ; preds = %19
  %22 = icmp eq i64* %0, %1
  br i1 %22, label %396, label %23

23:                                               ; preds = %21
  %24 = getelementptr inbounds i64, i64* %0, i64 1
  %25 = icmp eq i64* %24, %1
  br i1 %25, label %396, label %26

26:                                               ; preds = %23
  %27 = getelementptr inbounds %class.anon, %class.anon* %2, i64 0, i32 0
  br label %28

28:                                               ; preds = %42, %26
  %29 = phi i64* [ %24, %26 ], [ %44, %42 ]
  %30 = load i64, i64* %29, align 8
  %31 = icmp eq i64* %29, %0
  br i1 %31, label %42, label %32

32:                                               ; preds = %28, %46
  %33 = phi i64* [ %34, %46 ], [ %29, %28 ]
  %34 = getelementptr inbounds i64, i64* %33, i64 -1
  %35 = load i64, i64* %34, align 8
  %36 = load %"class.webrtc::SimulcastRateAllocator"*, %"class.webrtc::SimulcastRateAllocator"** %27, align 8
  %37 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %36, i64 0, i32 1, i32 10, i64 %30, i32 4
  %38 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %36, i64 0, i32 1, i32 10, i64 %35, i32 4
  %39 = load i32, i32* %37, align 4
  %40 = load i32, i32* %38, align 4
  %41 = icmp ult i32 %39, %40
  br i1 %41, label %46, label %42

42:                                               ; preds = %46, %32, %28
  %43 = phi i64* [ %0, %28 ], [ %33, %32 ], [ %0, %46 ]
  store i64 %30, i64* %43, align 8
  %44 = getelementptr inbounds i64, i64* %29, i64 1
  %45 = icmp eq i64* %44, %1
  br i1 %45, label %396, label %28

46:                                               ; preds = %32
  store i64 %35, i64* %33, align 8
  %47 = icmp eq i64* %34, %0
  br i1 %47, label %42, label %32

48:                                               ; preds = %19
  %49 = lshr i64 %3, 1
  %50 = getelementptr inbounds i64, i64* %0, i64 %49
  %51 = icmp sgt i64 %3, %5
  br i1 %51, label %394, label %52

52:                                               ; preds = %48
  tail call fastcc void @"_ZNSt3__118__stable_sort_moveIRZN6webrtc22SimulcastRateAllocator37DistributeAllocationToSimulcastLayersENS1_8DataRateES3_PNS1_22VideoBitrateAllocationEE3$_1NS_11__wrap_iterIPmEEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeEPNSE_10value_typeE"(i64* %0, i64* %50, %class.anon* dereferenceable(8) %2, i64 %49, i64* %4)
  %53 = sub nsw i64 %3, %49
  %54 = getelementptr inbounds i64, i64* %4, i64 %49
  tail call fastcc void @"_ZNSt3__118__stable_sort_moveIRZN6webrtc22SimulcastRateAllocator37DistributeAllocationToSimulcastLayersENS1_8DataRateES3_PNS1_22VideoBitrateAllocationEE3$_1NS_11__wrap_iterIPmEEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeEPNSE_10value_typeE"(i64* %50, i64* %1, %class.anon* dereferenceable(8) %2, i64 %53, i64* %54)
  %55 = getelementptr inbounds i64, i64* %4, i64 %3
  %56 = getelementptr inbounds %class.anon, %class.anon* %2, i64 0, i32 0
  br label %186

57:                                               ; preds = %361
  %58 = ptrtoint i64* %362 to i64
  %59 = icmp eq i64* %362, %55
  br i1 %59, label %396, label %60

60:                                               ; preds = %57
  %61 = add i64 %3, -1
  %62 = getelementptr i64, i64* %4, i64 %61
  %63 = ptrtoint i64* %62 to i64
  %64 = sub i64 %63, %58
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = icmp ult i64 %66, 4
  br i1 %67, label %68, label %93

68:                                               ; preds = %184, %93, %60
  %69 = phi i64* [ %362, %93 ], [ %362, %60 ], [ %107, %184 ]
  %70 = phi i64* [ %364, %93 ], [ %364, %60 ], [ %108, %184 ]
  %71 = ptrtoint i64* %69 to i64
  %72 = add i64 %3, -1
  %73 = getelementptr i64, i64* %4, i64 %72
  %74 = ptrtoint i64* %73 to i64
  %75 = sub i64 %74, %71
  %76 = lshr i64 %75, 3
  %77 = add nuw nsw i64 %76, 1
  %78 = and i64 %77, 7
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %89, label %80

80:                                               ; preds = %68, %80
  %81 = phi i64* [ %85, %80 ], [ %69, %68 ]
  %82 = phi i64* [ %86, %80 ], [ %70, %68 ]
  %83 = phi i64 [ %87, %80 ], [ %78, %68 ]
  %84 = load i64, i64* %81, align 8
  store i64 %84, i64* %82, align 8
  %85 = getelementptr inbounds i64, i64* %81, i64 1
  %86 = getelementptr inbounds i64, i64* %82, i64 1
  %87 = add i64 %83, -1
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %89, label %80, !llvm.loop !28

89:                                               ; preds = %80, %68
  %90 = phi i64* [ %69, %68 ], [ %85, %80 ]
  %91 = phi i64* [ %70, %68 ], [ %86, %80 ]
  %92 = icmp ult i64 %75, 56
  br i1 %92, label %396, label %366

93:                                               ; preds = %60
  %94 = add i64 %3, -1
  %95 = getelementptr i64, i64* %4, i64 %94
  %96 = ptrtoint i64* %95 to i64
  %97 = sub i64 %96, %58
  %98 = lshr i64 %97, 3
  %99 = add nuw nsw i64 %98, 1
  %100 = getelementptr i64, i64* %364, i64 %99
  %101 = getelementptr i64, i64* %362, i64 %99
  %102 = icmp ult i64* %364, %101
  %103 = icmp ult i64* %362, %100
  %104 = and i1 %102, %103
  br i1 %104, label %68, label %105

105:                                              ; preds = %93
  %106 = and i64 %66, 4611686018427387900
  %107 = getelementptr i64, i64* %362, i64 %106
  %108 = getelementptr i64, i64* %364, i64 %106
  %109 = add nsw i64 %106, -4
  %110 = lshr exact i64 %109, 2
  %111 = add nuw nsw i64 %110, 1
  %112 = and i64 %111, 3
  %113 = icmp ult i64 %109, 12
  br i1 %113, label %165, label %114

114:                                              ; preds = %105
  %115 = sub nsw i64 %111, %112
  br label %116

116:                                              ; preds = %116, %114
  %117 = phi i64 [ 0, %114 ], [ %162, %116 ]
  %118 = phi i64 [ %115, %114 ], [ %163, %116 ]
  %119 = getelementptr i64, i64* %362, i64 %117
  %120 = getelementptr i64, i64* %364, i64 %117
  %121 = bitcast i64* %119 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 8, !alias.scope !29
  %123 = getelementptr i64, i64* %119, i64 2
  %124 = bitcast i64* %123 to <2 x i64>*
  %125 = load <2 x i64>, <2 x i64>* %124, align 8, !alias.scope !29
  %126 = bitcast i64* %120 to <2 x i64>*
  store <2 x i64> %122, <2 x i64>* %126, align 8, !alias.scope !32, !noalias !29
  %127 = getelementptr i64, i64* %120, i64 2
  %128 = bitcast i64* %127 to <2 x i64>*
  store <2 x i64> %125, <2 x i64>* %128, align 8, !alias.scope !32, !noalias !29
  %129 = or i64 %117, 4
  %130 = getelementptr i64, i64* %362, i64 %129
  %131 = getelementptr i64, i64* %364, i64 %129
  %132 = bitcast i64* %130 to <2 x i64>*
  %133 = load <2 x i64>, <2 x i64>* %132, align 8, !alias.scope !29
  %134 = getelementptr i64, i64* %130, i64 2
  %135 = bitcast i64* %134 to <2 x i64>*
  %136 = load <2 x i64>, <2 x i64>* %135, align 8, !alias.scope !29
  %137 = bitcast i64* %131 to <2 x i64>*
  store <2 x i64> %133, <2 x i64>* %137, align 8, !alias.scope !32, !noalias !29
  %138 = getelementptr i64, i64* %131, i64 2
  %139 = bitcast i64* %138 to <2 x i64>*
  store <2 x i64> %136, <2 x i64>* %139, align 8, !alias.scope !32, !noalias !29
  %140 = or i64 %117, 8
  %141 = getelementptr i64, i64* %362, i64 %140
  %142 = getelementptr i64, i64* %364, i64 %140
  %143 = bitcast i64* %141 to <2 x i64>*
  %144 = load <2 x i64>, <2 x i64>* %143, align 8, !alias.scope !29
  %145 = getelementptr i64, i64* %141, i64 2
  %146 = bitcast i64* %145 to <2 x i64>*
  %147 = load <2 x i64>, <2 x i64>* %146, align 8, !alias.scope !29
  %148 = bitcast i64* %142 to <2 x i64>*
  store <2 x i64> %144, <2 x i64>* %148, align 8, !alias.scope !32, !noalias !29
  %149 = getelementptr i64, i64* %142, i64 2
  %150 = bitcast i64* %149 to <2 x i64>*
  store <2 x i64> %147, <2 x i64>* %150, align 8, !alias.scope !32, !noalias !29
  %151 = or i64 %117, 12
  %152 = getelementptr i64, i64* %362, i64 %151
  %153 = getelementptr i64, i64* %364, i64 %151
  %154 = bitcast i64* %152 to <2 x i64>*
  %155 = load <2 x i64>, <2 x i64>* %154, align 8, !alias.scope !29
  %156 = getelementptr i64, i64* %152, i64 2
  %157 = bitcast i64* %156 to <2 x i64>*
  %158 = load <2 x i64>, <2 x i64>* %157, align 8, !alias.scope !29
  %159 = bitcast i64* %153 to <2 x i64>*
  store <2 x i64> %155, <2 x i64>* %159, align 8, !alias.scope !32, !noalias !29
  %160 = getelementptr i64, i64* %153, i64 2
  %161 = bitcast i64* %160 to <2 x i64>*
  store <2 x i64> %158, <2 x i64>* %161, align 8, !alias.scope !32, !noalias !29
  %162 = add i64 %117, 16
  %163 = add i64 %118, -4
  %164 = icmp eq i64 %163, 0
  br i1 %164, label %165, label %116, !llvm.loop !34

165:                                              ; preds = %116, %105
  %166 = phi i64 [ 0, %105 ], [ %162, %116 ]
  %167 = icmp eq i64 %112, 0
  br i1 %167, label %184, label %168

168:                                              ; preds = %165, %168
  %169 = phi i64 [ %181, %168 ], [ %166, %165 ]
  %170 = phi i64 [ %182, %168 ], [ %112, %165 ]
  %171 = getelementptr i64, i64* %362, i64 %169
  %172 = getelementptr i64, i64* %364, i64 %169
  %173 = bitcast i64* %171 to <2 x i64>*
  %174 = load <2 x i64>, <2 x i64>* %173, align 8, !alias.scope !29
  %175 = getelementptr i64, i64* %171, i64 2
  %176 = bitcast i64* %175 to <2 x i64>*
  %177 = load <2 x i64>, <2 x i64>* %176, align 8, !alias.scope !29
  %178 = bitcast i64* %172 to <2 x i64>*
  store <2 x i64> %174, <2 x i64>* %178, align 8, !alias.scope !32, !noalias !29
  %179 = getelementptr i64, i64* %172, i64 2
  %180 = bitcast i64* %179 to <2 x i64>*
  store <2 x i64> %177, <2 x i64>* %180, align 8, !alias.scope !32, !noalias !29
  %181 = add i64 %169, 4
  %182 = add i64 %170, -1
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %184, label %168, !llvm.loop !35

184:                                              ; preds = %168, %165
  %185 = icmp eq i64 %66, %106
  br i1 %185, label %396, label %68

186:                                              ; preds = %361, %52
  %187 = phi i64* [ %4, %52 ], [ %363, %361 ]
  %188 = phi i64* [ %54, %52 ], [ %362, %361 ]
  %189 = phi i64* [ %0, %52 ], [ %364, %361 ]
  %190 = icmp eq i64* %188, %55
  br i1 %190, label %191, label %348

191:                                              ; preds = %186
  %192 = ptrtoint i64* %187 to i64
  %193 = icmp eq i64* %187, %54
  br i1 %193, label %396, label %194

194:                                              ; preds = %191
  %195 = add nsw i64 %49, -1
  %196 = getelementptr i64, i64* %4, i64 %195
  %197 = ptrtoint i64* %196 to i64
  %198 = sub i64 %197, %192
  %199 = lshr i64 %198, 3
  %200 = add nuw nsw i64 %199, 1
  %201 = icmp ult i64 %200, 4
  br i1 %201, label %295, label %202

202:                                              ; preds = %194
  %203 = add nsw i64 %49, -1
  %204 = getelementptr i64, i64* %4, i64 %203
  %205 = ptrtoint i64* %204 to i64
  %206 = sub i64 %205, %192
  %207 = lshr i64 %206, 3
  %208 = add nuw nsw i64 %207, 1
  %209 = getelementptr i64, i64* %189, i64 %208
  %210 = getelementptr i64, i64* %187, i64 %208
  %211 = icmp ult i64* %189, %210
  %212 = icmp ult i64* %187, %209
  %213 = and i1 %211, %212
  br i1 %213, label %295, label %214

214:                                              ; preds = %202
  %215 = and i64 %200, 4611686018427387900
  %216 = getelementptr i64, i64* %187, i64 %215
  %217 = getelementptr i64, i64* %189, i64 %215
  %218 = add nsw i64 %215, -4
  %219 = lshr exact i64 %218, 2
  %220 = add nuw nsw i64 %219, 1
  %221 = and i64 %220, 3
  %222 = icmp ult i64 %218, 12
  br i1 %222, label %274, label %223

223:                                              ; preds = %214
  %224 = sub nsw i64 %220, %221
  br label %225

225:                                              ; preds = %225, %223
  %226 = phi i64 [ 0, %223 ], [ %271, %225 ]
  %227 = phi i64 [ %224, %223 ], [ %272, %225 ]
  %228 = getelementptr i64, i64* %187, i64 %226
  %229 = getelementptr i64, i64* %189, i64 %226
  %230 = bitcast i64* %228 to <2 x i64>*
  %231 = load <2 x i64>, <2 x i64>* %230, align 8, !alias.scope !36
  %232 = getelementptr i64, i64* %228, i64 2
  %233 = bitcast i64* %232 to <2 x i64>*
  %234 = load <2 x i64>, <2 x i64>* %233, align 8, !alias.scope !36
  %235 = bitcast i64* %229 to <2 x i64>*
  store <2 x i64> %231, <2 x i64>* %235, align 8, !alias.scope !39, !noalias !36
  %236 = getelementptr i64, i64* %229, i64 2
  %237 = bitcast i64* %236 to <2 x i64>*
  store <2 x i64> %234, <2 x i64>* %237, align 8, !alias.scope !39, !noalias !36
  %238 = or i64 %226, 4
  %239 = getelementptr i64, i64* %187, i64 %238
  %240 = getelementptr i64, i64* %189, i64 %238
  %241 = bitcast i64* %239 to <2 x i64>*
  %242 = load <2 x i64>, <2 x i64>* %241, align 8, !alias.scope !36
  %243 = getelementptr i64, i64* %239, i64 2
  %244 = bitcast i64* %243 to <2 x i64>*
  %245 = load <2 x i64>, <2 x i64>* %244, align 8, !alias.scope !36
  %246 = bitcast i64* %240 to <2 x i64>*
  store <2 x i64> %242, <2 x i64>* %246, align 8, !alias.scope !39, !noalias !36
  %247 = getelementptr i64, i64* %240, i64 2
  %248 = bitcast i64* %247 to <2 x i64>*
  store <2 x i64> %245, <2 x i64>* %248, align 8, !alias.scope !39, !noalias !36
  %249 = or i64 %226, 8
  %250 = getelementptr i64, i64* %187, i64 %249
  %251 = getelementptr i64, i64* %189, i64 %249
  %252 = bitcast i64* %250 to <2 x i64>*
  %253 = load <2 x i64>, <2 x i64>* %252, align 8, !alias.scope !36
  %254 = getelementptr i64, i64* %250, i64 2
  %255 = bitcast i64* %254 to <2 x i64>*
  %256 = load <2 x i64>, <2 x i64>* %255, align 8, !alias.scope !36
  %257 = bitcast i64* %251 to <2 x i64>*
  store <2 x i64> %253, <2 x i64>* %257, align 8, !alias.scope !39, !noalias !36
  %258 = getelementptr i64, i64* %251, i64 2
  %259 = bitcast i64* %258 to <2 x i64>*
  store <2 x i64> %256, <2 x i64>* %259, align 8, !alias.scope !39, !noalias !36
  %260 = or i64 %226, 12
  %261 = getelementptr i64, i64* %187, i64 %260
  %262 = getelementptr i64, i64* %189, i64 %260
  %263 = bitcast i64* %261 to <2 x i64>*
  %264 = load <2 x i64>, <2 x i64>* %263, align 8, !alias.scope !36
  %265 = getelementptr i64, i64* %261, i64 2
  %266 = bitcast i64* %265 to <2 x i64>*
  %267 = load <2 x i64>, <2 x i64>* %266, align 8, !alias.scope !36
  %268 = bitcast i64* %262 to <2 x i64>*
  store <2 x i64> %264, <2 x i64>* %268, align 8, !alias.scope !39, !noalias !36
  %269 = getelementptr i64, i64* %262, i64 2
  %270 = bitcast i64* %269 to <2 x i64>*
  store <2 x i64> %267, <2 x i64>* %270, align 8, !alias.scope !39, !noalias !36
  %271 = add i64 %226, 16
  %272 = add i64 %227, -4
  %273 = icmp eq i64 %272, 0
  br i1 %273, label %274, label %225, !llvm.loop !41

274:                                              ; preds = %225, %214
  %275 = phi i64 [ 0, %214 ], [ %271, %225 ]
  %276 = icmp eq i64 %221, 0
  br i1 %276, label %293, label %277

277:                                              ; preds = %274, %277
  %278 = phi i64 [ %290, %277 ], [ %275, %274 ]
  %279 = phi i64 [ %291, %277 ], [ %221, %274 ]
  %280 = getelementptr i64, i64* %187, i64 %278
  %281 = getelementptr i64, i64* %189, i64 %278
  %282 = bitcast i64* %280 to <2 x i64>*
  %283 = load <2 x i64>, <2 x i64>* %282, align 8, !alias.scope !36
  %284 = getelementptr i64, i64* %280, i64 2
  %285 = bitcast i64* %284 to <2 x i64>*
  %286 = load <2 x i64>, <2 x i64>* %285, align 8, !alias.scope !36
  %287 = bitcast i64* %281 to <2 x i64>*
  store <2 x i64> %283, <2 x i64>* %287, align 8, !alias.scope !39, !noalias !36
  %288 = getelementptr i64, i64* %281, i64 2
  %289 = bitcast i64* %288 to <2 x i64>*
  store <2 x i64> %286, <2 x i64>* %289, align 8, !alias.scope !39, !noalias !36
  %290 = add i64 %278, 4
  %291 = add i64 %279, -1
  %292 = icmp eq i64 %291, 0
  br i1 %292, label %293, label %277, !llvm.loop !42

293:                                              ; preds = %277, %274
  %294 = icmp eq i64 %200, %215
  br i1 %294, label %396, label %295

295:                                              ; preds = %293, %202, %194
  %296 = phi i64* [ %187, %202 ], [ %187, %194 ], [ %216, %293 ]
  %297 = phi i64* [ %189, %202 ], [ %189, %194 ], [ %217, %293 ]
  %298 = ptrtoint i64* %296 to i64
  %299 = add nsw i64 %49, -1
  %300 = getelementptr i64, i64* %4, i64 %299
  %301 = ptrtoint i64* %300 to i64
  %302 = sub i64 %301, %298
  %303 = lshr i64 %302, 3
  %304 = add nuw nsw i64 %303, 1
  %305 = and i64 %304, 7
  %306 = icmp eq i64 %305, 0
  br i1 %306, label %316, label %307

307:                                              ; preds = %295, %307
  %308 = phi i64* [ %312, %307 ], [ %296, %295 ]
  %309 = phi i64* [ %313, %307 ], [ %297, %295 ]
  %310 = phi i64 [ %314, %307 ], [ %305, %295 ]
  %311 = load i64, i64* %308, align 8
  store i64 %311, i64* %309, align 8
  %312 = getelementptr inbounds i64, i64* %308, i64 1
  %313 = getelementptr inbounds i64, i64* %309, i64 1
  %314 = add i64 %310, -1
  %315 = icmp eq i64 %314, 0
  br i1 %315, label %316, label %307, !llvm.loop !43

316:                                              ; preds = %307, %295
  %317 = phi i64* [ %296, %295 ], [ %312, %307 ]
  %318 = phi i64* [ %297, %295 ], [ %313, %307 ]
  %319 = icmp ult i64 %302, 56
  br i1 %319, label %396, label %320

320:                                              ; preds = %316, %320
  %321 = phi i64* [ %345, %320 ], [ %317, %316 ]
  %322 = phi i64* [ %346, %320 ], [ %318, %316 ]
  %323 = load i64, i64* %321, align 8
  store i64 %323, i64* %322, align 8
  %324 = getelementptr inbounds i64, i64* %321, i64 1
  %325 = getelementptr inbounds i64, i64* %322, i64 1
  %326 = load i64, i64* %324, align 8
  store i64 %326, i64* %325, align 8
  %327 = getelementptr inbounds i64, i64* %321, i64 2
  %328 = getelementptr inbounds i64, i64* %322, i64 2
  %329 = load i64, i64* %327, align 8
  store i64 %329, i64* %328, align 8
  %330 = getelementptr inbounds i64, i64* %321, i64 3
  %331 = getelementptr inbounds i64, i64* %322, i64 3
  %332 = load i64, i64* %330, align 8
  store i64 %332, i64* %331, align 8
  %333 = getelementptr inbounds i64, i64* %321, i64 4
  %334 = getelementptr inbounds i64, i64* %322, i64 4
  %335 = load i64, i64* %333, align 8
  store i64 %335, i64* %334, align 8
  %336 = getelementptr inbounds i64, i64* %321, i64 5
  %337 = getelementptr inbounds i64, i64* %322, i64 5
  %338 = load i64, i64* %336, align 8
  store i64 %338, i64* %337, align 8
  %339 = getelementptr inbounds i64, i64* %321, i64 6
  %340 = getelementptr inbounds i64, i64* %322, i64 6
  %341 = load i64, i64* %339, align 8
  store i64 %341, i64* %340, align 8
  %342 = getelementptr inbounds i64, i64* %321, i64 7
  %343 = getelementptr inbounds i64, i64* %322, i64 7
  %344 = load i64, i64* %342, align 8
  store i64 %344, i64* %343, align 8
  %345 = getelementptr inbounds i64, i64* %321, i64 8
  %346 = getelementptr inbounds i64, i64* %322, i64 8
  %347 = icmp eq i64* %345, %54
  br i1 %347, label %396, label %320, !llvm.loop !44

348:                                              ; preds = %186
  %349 = load i64, i64* %188, align 8
  %350 = load i64, i64* %187, align 8
  %351 = load %"class.webrtc::SimulcastRateAllocator"*, %"class.webrtc::SimulcastRateAllocator"** %56, align 8
  %352 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %351, i64 0, i32 1, i32 10, i64 %349, i32 4
  %353 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %351, i64 0, i32 1, i32 10, i64 %350, i32 4
  %354 = load i32, i32* %352, align 4
  %355 = load i32, i32* %353, align 4
  %356 = icmp ult i32 %354, %355
  br i1 %356, label %357, label %359

357:                                              ; preds = %348
  store i64 %349, i64* %189, align 8
  %358 = getelementptr inbounds i64, i64* %188, i64 1
  br label %361

359:                                              ; preds = %348
  store i64 %350, i64* %189, align 8
  %360 = getelementptr inbounds i64, i64* %187, i64 1
  br label %361

361:                                              ; preds = %359, %357
  %362 = phi i64* [ %358, %357 ], [ %188, %359 ]
  %363 = phi i64* [ %187, %357 ], [ %360, %359 ]
  %364 = getelementptr inbounds i64, i64* %189, i64 1
  %365 = icmp eq i64* %363, %54
  br i1 %365, label %57, label %186

366:                                              ; preds = %89, %366
  %367 = phi i64* [ %391, %366 ], [ %90, %89 ]
  %368 = phi i64* [ %392, %366 ], [ %91, %89 ]
  %369 = load i64, i64* %367, align 8
  store i64 %369, i64* %368, align 8
  %370 = getelementptr inbounds i64, i64* %367, i64 1
  %371 = getelementptr inbounds i64, i64* %368, i64 1
  %372 = load i64, i64* %370, align 8
  store i64 %372, i64* %371, align 8
  %373 = getelementptr inbounds i64, i64* %367, i64 2
  %374 = getelementptr inbounds i64, i64* %368, i64 2
  %375 = load i64, i64* %373, align 8
  store i64 %375, i64* %374, align 8
  %376 = getelementptr inbounds i64, i64* %367, i64 3
  %377 = getelementptr inbounds i64, i64* %368, i64 3
  %378 = load i64, i64* %376, align 8
  store i64 %378, i64* %377, align 8
  %379 = getelementptr inbounds i64, i64* %367, i64 4
  %380 = getelementptr inbounds i64, i64* %368, i64 4
  %381 = load i64, i64* %379, align 8
  store i64 %381, i64* %380, align 8
  %382 = getelementptr inbounds i64, i64* %367, i64 5
  %383 = getelementptr inbounds i64, i64* %368, i64 5
  %384 = load i64, i64* %382, align 8
  store i64 %384, i64* %383, align 8
  %385 = getelementptr inbounds i64, i64* %367, i64 6
  %386 = getelementptr inbounds i64, i64* %368, i64 6
  %387 = load i64, i64* %385, align 8
  store i64 %387, i64* %386, align 8
  %388 = getelementptr inbounds i64, i64* %367, i64 7
  %389 = getelementptr inbounds i64, i64* %368, i64 7
  %390 = load i64, i64* %388, align 8
  store i64 %390, i64* %389, align 8
  %391 = getelementptr inbounds i64, i64* %367, i64 8
  %392 = getelementptr inbounds i64, i64* %368, i64 8
  %393 = icmp eq i64* %391, %55
  br i1 %393, label %396, label %366, !llvm.loop !45

394:                                              ; preds = %48
  tail call fastcc void @"_ZNSt3__113__stable_sortIRZN6webrtc22SimulcastRateAllocator37DistributeAllocationToSimulcastLayersENS1_8DataRateES3_PNS1_22VideoBitrateAllocationEE3$_1NS_11__wrap_iterIPmEEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeEPNSE_10value_typeEl"(i64* %0, i64* %50, %class.anon* dereferenceable(8) %2, i64 %49, i64* %4, i64 %5)
  %395 = sub nsw i64 %3, %49
  tail call fastcc void @"_ZNSt3__113__stable_sortIRZN6webrtc22SimulcastRateAllocator37DistributeAllocationToSimulcastLayersENS1_8DataRateES3_PNS1_22VideoBitrateAllocationEE3$_1NS_11__wrap_iterIPmEEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeEPNSE_10value_typeEl"(i64* %50, i64* %1, %class.anon* dereferenceable(8) %2, i64 %395, i64* %4, i64 %5)
  tail call fastcc void @"_ZNSt3__115__inplace_mergeIRZN6webrtc22SimulcastRateAllocator37DistributeAllocationToSimulcastLayersENS1_8DataRateES3_PNS1_22VideoBitrateAllocationEE3$_1NS_11__wrap_iterIPmEEEEvT0_SB_SB_T_NS_15iterator_traitsISB_E15difference_typeESF_PNSE_10value_typeEl"(i64* %0, i64* %50, i64* %1, %class.anon* dereferenceable(8) %2, i64 %49, i64 %395, i64* %4, i64 %5)
  ret void

396:                                              ; preds = %89, %366, %316, %320, %42, %184, %293, %191, %57, %23, %21, %7, %18, %6, %6
  ret void
}

; Function Attrs: nobuiltin nofree nounwind
declare noalias i8* @_ZnwmRKSt9nothrow_t(i64, %"struct.std::nothrow_t"* dereferenceable(1)) local_unnamed_addr #11

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @"_ZNSt3__118__stable_sort_moveIRZN6webrtc22SimulcastRateAllocator37DistributeAllocationToSimulcastLayersENS1_8DataRateES3_PNS1_22VideoBitrateAllocationEE3$_1NS_11__wrap_iterIPmEEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeEPNSE_10value_typeE"(i64*, i64*, %class.anon* dereferenceable(8), i64, i64*) unnamed_addr #0 {
  switch i64 %3, label %25 [
    i64 0, label %415
    i64 1, label %6
    i64 2, label %8
  ]

6:                                                ; preds = %5
  %7 = load i64, i64* %0, align 8
  store i64 %7, i64* %4, align 8
  br label %415

8:                                                ; preds = %5
  %9 = getelementptr inbounds i64, i64* %1, i64 -1
  %10 = load i64, i64* %9, align 8
  %11 = load i64, i64* %0, align 8
  %12 = getelementptr inbounds %class.anon, %class.anon* %2, i64 0, i32 0
  %13 = load %"class.webrtc::SimulcastRateAllocator"*, %"class.webrtc::SimulcastRateAllocator"** %12, align 8
  %14 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %13, i64 0, i32 1, i32 10, i64 %10, i32 4
  %15 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %13, i64 0, i32 1, i32 10, i64 %11, i32 4
  %16 = load i32, i32* %14, align 4
  %17 = load i32, i32* %15, align 4
  %18 = icmp ult i32 %16, %17
  br i1 %18, label %19, label %22

19:                                               ; preds = %8
  store i64 %10, i64* %4, align 8
  %20 = getelementptr inbounds i64, i64* %4, i64 1
  %21 = load i64, i64* %0, align 8
  store i64 %21, i64* %20, align 8
  br label %415

22:                                               ; preds = %8
  store i64 %11, i64* %4, align 8
  %23 = getelementptr inbounds i64, i64* %4, i64 1
  %24 = load i64, i64* %9, align 8
  store i64 %24, i64* %23, align 8
  br label %415

25:                                               ; preds = %5
  %26 = icmp slt i64 %3, 9
  br i1 %26, label %27, label %71

27:                                               ; preds = %25
  %28 = icmp eq i64* %0, %1
  br i1 %28, label %415, label %29

29:                                               ; preds = %27
  %30 = load i64, i64* %0, align 8
  store i64 %30, i64* %4, align 8
  %31 = getelementptr inbounds i64, i64* %0, i64 1
  %32 = icmp eq i64* %31, %1
  br i1 %32, label %415, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds %class.anon, %class.anon* %2, i64 0, i32 0
  br label %35

35:                                               ; preds = %69, %33
  %36 = phi i64 [ %30, %33 ], [ %70, %69 ]
  %37 = phi i64* [ %31, %33 ], [ %67, %69 ]
  %38 = phi i64* [ %4, %33 ], [ %39, %69 ]
  %39 = getelementptr inbounds i64, i64* %38, i64 1
  %40 = load i64, i64* %37, align 8
  %41 = load %"class.webrtc::SimulcastRateAllocator"*, %"class.webrtc::SimulcastRateAllocator"** %34, align 8
  %42 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %41, i64 0, i32 1, i32 10, i64 %40, i32 4
  %43 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %41, i64 0, i32 1, i32 10, i64 %36, i32 4
  %44 = load i32, i32* %42, align 4
  %45 = load i32, i32* %43, align 4
  %46 = icmp ult i32 %44, %45
  br i1 %46, label %47, label %65

47:                                               ; preds = %35
  store i64 %36, i64* %39, align 8
  %48 = icmp eq i64* %38, %4
  br i1 %48, label %62, label %49

49:                                               ; preds = %47, %60
  %50 = phi i64* [ %52, %60 ], [ %38, %47 ]
  %51 = load i64, i64* %37, align 8
  %52 = getelementptr inbounds i64, i64* %50, i64 -1
  %53 = load i64, i64* %52, align 8
  %54 = load %"class.webrtc::SimulcastRateAllocator"*, %"class.webrtc::SimulcastRateAllocator"** %34, align 8
  %55 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %54, i64 0, i32 1, i32 10, i64 %51, i32 4
  %56 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %54, i64 0, i32 1, i32 10, i64 %53, i32 4
  %57 = load i32, i32* %55, align 4
  %58 = load i32, i32* %56, align 4
  %59 = icmp ult i32 %57, %58
  br i1 %59, label %60, label %62

60:                                               ; preds = %49
  store i64 %53, i64* %50, align 8
  %61 = icmp eq i64* %52, %4
  br i1 %61, label %62, label %49

62:                                               ; preds = %60, %49, %47
  %63 = phi i64* [ %4, %47 ], [ %50, %49 ], [ %4, %60 ]
  %64 = load i64, i64* %37, align 8
  store i64 %64, i64* %63, align 8
  br label %66

65:                                               ; preds = %35
  store i64 %40, i64* %39, align 8
  br label %66

66:                                               ; preds = %65, %62
  %67 = getelementptr inbounds i64, i64* %37, i64 1
  %68 = icmp eq i64* %67, %1
  br i1 %68, label %415, label %69

69:                                               ; preds = %66
  %70 = load i64, i64* %39, align 8
  br label %35

71:                                               ; preds = %25
  %72 = lshr i64 %3, 1
  %73 = getelementptr inbounds i64, i64* %0, i64 %72
  tail call fastcc void @"_ZNSt3__113__stable_sortIRZN6webrtc22SimulcastRateAllocator37DistributeAllocationToSimulcastLayersENS1_8DataRateES3_PNS1_22VideoBitrateAllocationEE3$_1NS_11__wrap_iterIPmEEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeEPNSE_10value_typeEl"(i64* %0, i64* %73, %class.anon* dereferenceable(8) %2, i64 %72, i64* %4, i64 %72)
  %74 = sub nsw i64 %3, %72
  %75 = getelementptr inbounds i64, i64* %4, i64 %72
  tail call fastcc void @"_ZNSt3__113__stable_sortIRZN6webrtc22SimulcastRateAllocator37DistributeAllocationToSimulcastLayersENS1_8DataRateES3_PNS1_22VideoBitrateAllocationEE3$_1NS_11__wrap_iterIPmEEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeEPNSE_10value_typeEl"(i64* %73, i64* %1, %class.anon* dereferenceable(8) %2, i64 %74, i64* %75, i64 %74)
  %76 = icmp eq i64 %72, 0
  br i1 %76, label %79, label %77

77:                                               ; preds = %71
  %78 = getelementptr inbounds %class.anon, %class.anon* %2, i64 0, i32 0
  br label %235

79:                                               ; preds = %410, %71
  %80 = phi i64* [ %73, %71 ], [ %411, %410 ]
  %81 = phi i64* [ %4, %71 ], [ %413, %410 ]
  %82 = ptrtoint i64* %80 to i64
  %83 = icmp eq i64* %80, %1
  br i1 %83, label %415, label %84

84:                                               ; preds = %79
  %85 = getelementptr i64, i64* %1, i64 -1
  %86 = ptrtoint i64* %85 to i64
  %87 = sub i64 %86, %82
  %88 = lshr i64 %87, 3
  %89 = add nuw nsw i64 %88, 1
  %90 = icmp ult i64 %89, 4
  br i1 %90, label %183, label %91

91:                                               ; preds = %84
  %92 = getelementptr i64, i64* %1, i64 -1
  %93 = ptrtoint i64* %92 to i64
  %94 = sub i64 %93, %82
  %95 = lshr i64 %94, 3
  %96 = add nuw nsw i64 %95, 1
  %97 = getelementptr i64, i64* %81, i64 %96
  %98 = getelementptr i64, i64* %80, i64 %96
  %99 = icmp ult i64* %81, %98
  %100 = icmp ult i64* %80, %97
  %101 = and i1 %99, %100
  br i1 %101, label %183, label %102

102:                                              ; preds = %91
  %103 = and i64 %89, 4611686018427387900
  %104 = getelementptr i64, i64* %81, i64 %103
  %105 = getelementptr i64, i64* %80, i64 %103
  %106 = add nsw i64 %103, -4
  %107 = lshr exact i64 %106, 2
  %108 = add nuw nsw i64 %107, 1
  %109 = and i64 %108, 3
  %110 = icmp ult i64 %106, 12
  br i1 %110, label %162, label %111

111:                                              ; preds = %102
  %112 = sub nsw i64 %108, %109
  br label %113

113:                                              ; preds = %113, %111
  %114 = phi i64 [ 0, %111 ], [ %159, %113 ]
  %115 = phi i64 [ %112, %111 ], [ %160, %113 ]
  %116 = getelementptr i64, i64* %81, i64 %114
  %117 = getelementptr i64, i64* %80, i64 %114
  %118 = bitcast i64* %117 to <2 x i64>*
  %119 = load <2 x i64>, <2 x i64>* %118, align 8, !alias.scope !46
  %120 = getelementptr i64, i64* %117, i64 2
  %121 = bitcast i64* %120 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 8, !alias.scope !46
  %123 = bitcast i64* %116 to <2 x i64>*
  store <2 x i64> %119, <2 x i64>* %123, align 8, !alias.scope !49, !noalias !46
  %124 = getelementptr i64, i64* %116, i64 2
  %125 = bitcast i64* %124 to <2 x i64>*
  store <2 x i64> %122, <2 x i64>* %125, align 8, !alias.scope !49, !noalias !46
  %126 = or i64 %114, 4
  %127 = getelementptr i64, i64* %81, i64 %126
  %128 = getelementptr i64, i64* %80, i64 %126
  %129 = bitcast i64* %128 to <2 x i64>*
  %130 = load <2 x i64>, <2 x i64>* %129, align 8, !alias.scope !46
  %131 = getelementptr i64, i64* %128, i64 2
  %132 = bitcast i64* %131 to <2 x i64>*
  %133 = load <2 x i64>, <2 x i64>* %132, align 8, !alias.scope !46
  %134 = bitcast i64* %127 to <2 x i64>*
  store <2 x i64> %130, <2 x i64>* %134, align 8, !alias.scope !49, !noalias !46
  %135 = getelementptr i64, i64* %127, i64 2
  %136 = bitcast i64* %135 to <2 x i64>*
  store <2 x i64> %133, <2 x i64>* %136, align 8, !alias.scope !49, !noalias !46
  %137 = or i64 %114, 8
  %138 = getelementptr i64, i64* %81, i64 %137
  %139 = getelementptr i64, i64* %80, i64 %137
  %140 = bitcast i64* %139 to <2 x i64>*
  %141 = load <2 x i64>, <2 x i64>* %140, align 8, !alias.scope !46
  %142 = getelementptr i64, i64* %139, i64 2
  %143 = bitcast i64* %142 to <2 x i64>*
  %144 = load <2 x i64>, <2 x i64>* %143, align 8, !alias.scope !46
  %145 = bitcast i64* %138 to <2 x i64>*
  store <2 x i64> %141, <2 x i64>* %145, align 8, !alias.scope !49, !noalias !46
  %146 = getelementptr i64, i64* %138, i64 2
  %147 = bitcast i64* %146 to <2 x i64>*
  store <2 x i64> %144, <2 x i64>* %147, align 8, !alias.scope !49, !noalias !46
  %148 = or i64 %114, 12
  %149 = getelementptr i64, i64* %81, i64 %148
  %150 = getelementptr i64, i64* %80, i64 %148
  %151 = bitcast i64* %150 to <2 x i64>*
  %152 = load <2 x i64>, <2 x i64>* %151, align 8, !alias.scope !46
  %153 = getelementptr i64, i64* %150, i64 2
  %154 = bitcast i64* %153 to <2 x i64>*
  %155 = load <2 x i64>, <2 x i64>* %154, align 8, !alias.scope !46
  %156 = bitcast i64* %149 to <2 x i64>*
  store <2 x i64> %152, <2 x i64>* %156, align 8, !alias.scope !49, !noalias !46
  %157 = getelementptr i64, i64* %149, i64 2
  %158 = bitcast i64* %157 to <2 x i64>*
  store <2 x i64> %155, <2 x i64>* %158, align 8, !alias.scope !49, !noalias !46
  %159 = add i64 %114, 16
  %160 = add i64 %115, -4
  %161 = icmp eq i64 %160, 0
  br i1 %161, label %162, label %113, !llvm.loop !51

162:                                              ; preds = %113, %102
  %163 = phi i64 [ 0, %102 ], [ %159, %113 ]
  %164 = icmp eq i64 %109, 0
  br i1 %164, label %181, label %165

165:                                              ; preds = %162, %165
  %166 = phi i64 [ %178, %165 ], [ %163, %162 ]
  %167 = phi i64 [ %179, %165 ], [ %109, %162 ]
  %168 = getelementptr i64, i64* %81, i64 %166
  %169 = getelementptr i64, i64* %80, i64 %166
  %170 = bitcast i64* %169 to <2 x i64>*
  %171 = load <2 x i64>, <2 x i64>* %170, align 8, !alias.scope !46
  %172 = getelementptr i64, i64* %169, i64 2
  %173 = bitcast i64* %172 to <2 x i64>*
  %174 = load <2 x i64>, <2 x i64>* %173, align 8, !alias.scope !46
  %175 = bitcast i64* %168 to <2 x i64>*
  store <2 x i64> %171, <2 x i64>* %175, align 8, !alias.scope !49, !noalias !46
  %176 = getelementptr i64, i64* %168, i64 2
  %177 = bitcast i64* %176 to <2 x i64>*
  store <2 x i64> %174, <2 x i64>* %177, align 8, !alias.scope !49, !noalias !46
  %178 = add i64 %166, 4
  %179 = add i64 %167, -1
  %180 = icmp eq i64 %179, 0
  br i1 %180, label %181, label %165, !llvm.loop !52

181:                                              ; preds = %165, %162
  %182 = icmp eq i64 %89, %103
  br i1 %182, label %415, label %183

183:                                              ; preds = %181, %91, %84
  %184 = phi i64* [ %81, %91 ], [ %81, %84 ], [ %104, %181 ]
  %185 = phi i64* [ %80, %91 ], [ %80, %84 ], [ %105, %181 ]
  %186 = ptrtoint i64* %185 to i64
  %187 = getelementptr i64, i64* %1, i64 -1
  %188 = ptrtoint i64* %187 to i64
  %189 = sub i64 %188, %186
  %190 = lshr i64 %189, 3
  %191 = add nuw nsw i64 %190, 1
  %192 = and i64 %191, 7
  %193 = icmp eq i64 %192, 0
  br i1 %193, label %203, label %194

194:                                              ; preds = %183, %194
  %195 = phi i64* [ %200, %194 ], [ %184, %183 ]
  %196 = phi i64* [ %199, %194 ], [ %185, %183 ]
  %197 = phi i64 [ %201, %194 ], [ %192, %183 ]
  %198 = load i64, i64* %196, align 8
  store i64 %198, i64* %195, align 8
  %199 = getelementptr inbounds i64, i64* %196, i64 1
  %200 = getelementptr inbounds i64, i64* %195, i64 1
  %201 = add i64 %197, -1
  %202 = icmp eq i64 %201, 0
  br i1 %202, label %203, label %194, !llvm.loop !53

203:                                              ; preds = %194, %183
  %204 = phi i64* [ %184, %183 ], [ %200, %194 ]
  %205 = phi i64* [ %185, %183 ], [ %199, %194 ]
  %206 = icmp ult i64 %189, 56
  br i1 %206, label %415, label %207

207:                                              ; preds = %203, %207
  %208 = phi i64* [ %233, %207 ], [ %204, %203 ]
  %209 = phi i64* [ %232, %207 ], [ %205, %203 ]
  %210 = load i64, i64* %209, align 8
  store i64 %210, i64* %208, align 8
  %211 = getelementptr inbounds i64, i64* %209, i64 1
  %212 = getelementptr inbounds i64, i64* %208, i64 1
  %213 = load i64, i64* %211, align 8
  store i64 %213, i64* %212, align 8
  %214 = getelementptr inbounds i64, i64* %209, i64 2
  %215 = getelementptr inbounds i64, i64* %208, i64 2
  %216 = load i64, i64* %214, align 8
  store i64 %216, i64* %215, align 8
  %217 = getelementptr inbounds i64, i64* %209, i64 3
  %218 = getelementptr inbounds i64, i64* %208, i64 3
  %219 = load i64, i64* %217, align 8
  store i64 %219, i64* %218, align 8
  %220 = getelementptr inbounds i64, i64* %209, i64 4
  %221 = getelementptr inbounds i64, i64* %208, i64 4
  %222 = load i64, i64* %220, align 8
  store i64 %222, i64* %221, align 8
  %223 = getelementptr inbounds i64, i64* %209, i64 5
  %224 = getelementptr inbounds i64, i64* %208, i64 5
  %225 = load i64, i64* %223, align 8
  store i64 %225, i64* %224, align 8
  %226 = getelementptr inbounds i64, i64* %209, i64 6
  %227 = getelementptr inbounds i64, i64* %208, i64 6
  %228 = load i64, i64* %226, align 8
  store i64 %228, i64* %227, align 8
  %229 = getelementptr inbounds i64, i64* %209, i64 7
  %230 = getelementptr inbounds i64, i64* %208, i64 7
  %231 = load i64, i64* %229, align 8
  store i64 %231, i64* %230, align 8
  %232 = getelementptr inbounds i64, i64* %209, i64 8
  %233 = getelementptr inbounds i64, i64* %208, i64 8
  %234 = icmp eq i64* %232, %1
  br i1 %234, label %415, label %207, !llvm.loop !54

235:                                              ; preds = %410, %77
  %236 = phi i64* [ %4, %77 ], [ %413, %410 ]
  %237 = phi i64* [ %0, %77 ], [ %412, %410 ]
  %238 = phi i64* [ %73, %77 ], [ %411, %410 ]
  %239 = icmp eq i64* %238, %1
  br i1 %239, label %240, label %397

240:                                              ; preds = %235
  %241 = ptrtoint i64* %237 to i64
  %242 = icmp eq i64* %237, %73
  br i1 %242, label %415, label %243

243:                                              ; preds = %240
  %244 = add nsw i64 %72, -1
  %245 = getelementptr i64, i64* %0, i64 %244
  %246 = ptrtoint i64* %245 to i64
  %247 = sub i64 %246, %241
  %248 = lshr i64 %247, 3
  %249 = add nuw nsw i64 %248, 1
  %250 = icmp ult i64 %249, 4
  br i1 %250, label %344, label %251

251:                                              ; preds = %243
  %252 = add nsw i64 %72, -1
  %253 = getelementptr i64, i64* %0, i64 %252
  %254 = ptrtoint i64* %253 to i64
  %255 = sub i64 %254, %241
  %256 = lshr i64 %255, 3
  %257 = add nuw nsw i64 %256, 1
  %258 = getelementptr i64, i64* %236, i64 %257
  %259 = getelementptr i64, i64* %237, i64 %257
  %260 = icmp ult i64* %236, %259
  %261 = icmp ult i64* %237, %258
  %262 = and i1 %260, %261
  br i1 %262, label %344, label %263

263:                                              ; preds = %251
  %264 = and i64 %249, 4611686018427387900
  %265 = getelementptr i64, i64* %236, i64 %264
  %266 = getelementptr i64, i64* %237, i64 %264
  %267 = add nsw i64 %264, -4
  %268 = lshr exact i64 %267, 2
  %269 = add nuw nsw i64 %268, 1
  %270 = and i64 %269, 3
  %271 = icmp ult i64 %267, 12
  br i1 %271, label %323, label %272

272:                                              ; preds = %263
  %273 = sub nsw i64 %269, %270
  br label %274

274:                                              ; preds = %274, %272
  %275 = phi i64 [ 0, %272 ], [ %320, %274 ]
  %276 = phi i64 [ %273, %272 ], [ %321, %274 ]
  %277 = getelementptr i64, i64* %236, i64 %275
  %278 = getelementptr i64, i64* %237, i64 %275
  %279 = bitcast i64* %278 to <2 x i64>*
  %280 = load <2 x i64>, <2 x i64>* %279, align 8, !alias.scope !55
  %281 = getelementptr i64, i64* %278, i64 2
  %282 = bitcast i64* %281 to <2 x i64>*
  %283 = load <2 x i64>, <2 x i64>* %282, align 8, !alias.scope !55
  %284 = bitcast i64* %277 to <2 x i64>*
  store <2 x i64> %280, <2 x i64>* %284, align 8, !alias.scope !58, !noalias !55
  %285 = getelementptr i64, i64* %277, i64 2
  %286 = bitcast i64* %285 to <2 x i64>*
  store <2 x i64> %283, <2 x i64>* %286, align 8, !alias.scope !58, !noalias !55
  %287 = or i64 %275, 4
  %288 = getelementptr i64, i64* %236, i64 %287
  %289 = getelementptr i64, i64* %237, i64 %287
  %290 = bitcast i64* %289 to <2 x i64>*
  %291 = load <2 x i64>, <2 x i64>* %290, align 8, !alias.scope !55
  %292 = getelementptr i64, i64* %289, i64 2
  %293 = bitcast i64* %292 to <2 x i64>*
  %294 = load <2 x i64>, <2 x i64>* %293, align 8, !alias.scope !55
  %295 = bitcast i64* %288 to <2 x i64>*
  store <2 x i64> %291, <2 x i64>* %295, align 8, !alias.scope !58, !noalias !55
  %296 = getelementptr i64, i64* %288, i64 2
  %297 = bitcast i64* %296 to <2 x i64>*
  store <2 x i64> %294, <2 x i64>* %297, align 8, !alias.scope !58, !noalias !55
  %298 = or i64 %275, 8
  %299 = getelementptr i64, i64* %236, i64 %298
  %300 = getelementptr i64, i64* %237, i64 %298
  %301 = bitcast i64* %300 to <2 x i64>*
  %302 = load <2 x i64>, <2 x i64>* %301, align 8, !alias.scope !55
  %303 = getelementptr i64, i64* %300, i64 2
  %304 = bitcast i64* %303 to <2 x i64>*
  %305 = load <2 x i64>, <2 x i64>* %304, align 8, !alias.scope !55
  %306 = bitcast i64* %299 to <2 x i64>*
  store <2 x i64> %302, <2 x i64>* %306, align 8, !alias.scope !58, !noalias !55
  %307 = getelementptr i64, i64* %299, i64 2
  %308 = bitcast i64* %307 to <2 x i64>*
  store <2 x i64> %305, <2 x i64>* %308, align 8, !alias.scope !58, !noalias !55
  %309 = or i64 %275, 12
  %310 = getelementptr i64, i64* %236, i64 %309
  %311 = getelementptr i64, i64* %237, i64 %309
  %312 = bitcast i64* %311 to <2 x i64>*
  %313 = load <2 x i64>, <2 x i64>* %312, align 8, !alias.scope !55
  %314 = getelementptr i64, i64* %311, i64 2
  %315 = bitcast i64* %314 to <2 x i64>*
  %316 = load <2 x i64>, <2 x i64>* %315, align 8, !alias.scope !55
  %317 = bitcast i64* %310 to <2 x i64>*
  store <2 x i64> %313, <2 x i64>* %317, align 8, !alias.scope !58, !noalias !55
  %318 = getelementptr i64, i64* %310, i64 2
  %319 = bitcast i64* %318 to <2 x i64>*
  store <2 x i64> %316, <2 x i64>* %319, align 8, !alias.scope !58, !noalias !55
  %320 = add i64 %275, 16
  %321 = add i64 %276, -4
  %322 = icmp eq i64 %321, 0
  br i1 %322, label %323, label %274, !llvm.loop !60

323:                                              ; preds = %274, %263
  %324 = phi i64 [ 0, %263 ], [ %320, %274 ]
  %325 = icmp eq i64 %270, 0
  br i1 %325, label %342, label %326

326:                                              ; preds = %323, %326
  %327 = phi i64 [ %339, %326 ], [ %324, %323 ]
  %328 = phi i64 [ %340, %326 ], [ %270, %323 ]
  %329 = getelementptr i64, i64* %236, i64 %327
  %330 = getelementptr i64, i64* %237, i64 %327
  %331 = bitcast i64* %330 to <2 x i64>*
  %332 = load <2 x i64>, <2 x i64>* %331, align 8, !alias.scope !55
  %333 = getelementptr i64, i64* %330, i64 2
  %334 = bitcast i64* %333 to <2 x i64>*
  %335 = load <2 x i64>, <2 x i64>* %334, align 8, !alias.scope !55
  %336 = bitcast i64* %329 to <2 x i64>*
  store <2 x i64> %332, <2 x i64>* %336, align 8, !alias.scope !58, !noalias !55
  %337 = getelementptr i64, i64* %329, i64 2
  %338 = bitcast i64* %337 to <2 x i64>*
  store <2 x i64> %335, <2 x i64>* %338, align 8, !alias.scope !58, !noalias !55
  %339 = add i64 %327, 4
  %340 = add i64 %328, -1
  %341 = icmp eq i64 %340, 0
  br i1 %341, label %342, label %326, !llvm.loop !61

342:                                              ; preds = %326, %323
  %343 = icmp eq i64 %249, %264
  br i1 %343, label %415, label %344

344:                                              ; preds = %342, %251, %243
  %345 = phi i64* [ %236, %251 ], [ %236, %243 ], [ %265, %342 ]
  %346 = phi i64* [ %237, %251 ], [ %237, %243 ], [ %266, %342 ]
  %347 = ptrtoint i64* %346 to i64
  %348 = add nsw i64 %72, -1
  %349 = getelementptr i64, i64* %0, i64 %348
  %350 = ptrtoint i64* %349 to i64
  %351 = sub i64 %350, %347
  %352 = lshr i64 %351, 3
  %353 = add nuw nsw i64 %352, 1
  %354 = and i64 %353, 7
  %355 = icmp eq i64 %354, 0
  br i1 %355, label %365, label %356

356:                                              ; preds = %344, %356
  %357 = phi i64* [ %362, %356 ], [ %345, %344 ]
  %358 = phi i64* [ %361, %356 ], [ %346, %344 ]
  %359 = phi i64 [ %363, %356 ], [ %354, %344 ]
  %360 = load i64, i64* %358, align 8
  store i64 %360, i64* %357, align 8
  %361 = getelementptr inbounds i64, i64* %358, i64 1
  %362 = getelementptr inbounds i64, i64* %357, i64 1
  %363 = add i64 %359, -1
  %364 = icmp eq i64 %363, 0
  br i1 %364, label %365, label %356, !llvm.loop !62

365:                                              ; preds = %356, %344
  %366 = phi i64* [ %345, %344 ], [ %362, %356 ]
  %367 = phi i64* [ %346, %344 ], [ %361, %356 ]
  %368 = icmp ult i64 %351, 56
  br i1 %368, label %415, label %369

369:                                              ; preds = %365, %369
  %370 = phi i64* [ %395, %369 ], [ %366, %365 ]
  %371 = phi i64* [ %394, %369 ], [ %367, %365 ]
  %372 = load i64, i64* %371, align 8
  store i64 %372, i64* %370, align 8
  %373 = getelementptr inbounds i64, i64* %371, i64 1
  %374 = getelementptr inbounds i64, i64* %370, i64 1
  %375 = load i64, i64* %373, align 8
  store i64 %375, i64* %374, align 8
  %376 = getelementptr inbounds i64, i64* %371, i64 2
  %377 = getelementptr inbounds i64, i64* %370, i64 2
  %378 = load i64, i64* %376, align 8
  store i64 %378, i64* %377, align 8
  %379 = getelementptr inbounds i64, i64* %371, i64 3
  %380 = getelementptr inbounds i64, i64* %370, i64 3
  %381 = load i64, i64* %379, align 8
  store i64 %381, i64* %380, align 8
  %382 = getelementptr inbounds i64, i64* %371, i64 4
  %383 = getelementptr inbounds i64, i64* %370, i64 4
  %384 = load i64, i64* %382, align 8
  store i64 %384, i64* %383, align 8
  %385 = getelementptr inbounds i64, i64* %371, i64 5
  %386 = getelementptr inbounds i64, i64* %370, i64 5
  %387 = load i64, i64* %385, align 8
  store i64 %387, i64* %386, align 8
  %388 = getelementptr inbounds i64, i64* %371, i64 6
  %389 = getelementptr inbounds i64, i64* %370, i64 6
  %390 = load i64, i64* %388, align 8
  store i64 %390, i64* %389, align 8
  %391 = getelementptr inbounds i64, i64* %371, i64 7
  %392 = getelementptr inbounds i64, i64* %370, i64 7
  %393 = load i64, i64* %391, align 8
  store i64 %393, i64* %392, align 8
  %394 = getelementptr inbounds i64, i64* %371, i64 8
  %395 = getelementptr inbounds i64, i64* %370, i64 8
  %396 = icmp eq i64* %394, %73
  br i1 %396, label %415, label %369, !llvm.loop !63

397:                                              ; preds = %235
  %398 = load i64, i64* %238, align 8
  %399 = load i64, i64* %237, align 8
  %400 = load %"class.webrtc::SimulcastRateAllocator"*, %"class.webrtc::SimulcastRateAllocator"** %78, align 8
  %401 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %400, i64 0, i32 1, i32 10, i64 %398, i32 4
  %402 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %400, i64 0, i32 1, i32 10, i64 %399, i32 4
  %403 = load i32, i32* %401, align 4
  %404 = load i32, i32* %402, align 4
  %405 = icmp ult i32 %403, %404
  br i1 %405, label %406, label %408

406:                                              ; preds = %397
  store i64 %398, i64* %236, align 8
  %407 = getelementptr inbounds i64, i64* %238, i64 1
  br label %410

408:                                              ; preds = %397
  store i64 %399, i64* %236, align 8
  %409 = getelementptr inbounds i64, i64* %237, i64 1
  br label %410

410:                                              ; preds = %408, %406
  %411 = phi i64* [ %407, %406 ], [ %238, %408 ]
  %412 = phi i64* [ %237, %406 ], [ %409, %408 ]
  %413 = getelementptr inbounds i64, i64* %236, i64 1
  %414 = icmp eq i64* %412, %73
  br i1 %414, label %79, label %235

415:                                              ; preds = %365, %369, %203, %207, %66, %342, %181, %240, %79, %29, %27, %19, %22, %5, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @"_ZNSt3__115__inplace_mergeIRZN6webrtc22SimulcastRateAllocator37DistributeAllocationToSimulcastLayersENS1_8DataRateES3_PNS1_22VideoBitrateAllocationEE3$_1NS_11__wrap_iterIPmEEEEvT0_SB_SB_T_NS_15iterator_traitsISB_E15difference_typeESF_PNSE_10value_typeEl"(i64*, i64*, i64*, %class.anon* readonly dereferenceable(8), i64, i64, i64*, i64) unnamed_addr #0 {
  %9 = ptrtoint i64* %6 to i64
  %10 = icmp eq i64 %5, 0
  br i1 %10, label %911, label %11

11:                                               ; preds = %8
  %12 = ptrtoint i64* %1 to i64
  %13 = ptrtoint i64* %0 to i64
  %14 = getelementptr inbounds %class.anon, %class.anon* %3, i64 0, i32 0
  br label %15

15:                                               ; preds = %11, %904
  %16 = phi i64* [ %2, %11 ], [ %909, %904 ]
  %17 = phi i64 [ %4, %11 ], [ %908, %904 ]
  %18 = phi i64 [ %5, %11 ], [ %907, %904 ]
  %19 = phi i64 [ %12, %11 ], [ %906, %904 ]
  %20 = phi i64 [ %13, %11 ], [ %905, %904 ]
  %21 = icmp sgt i64 %17, %7
  %22 = icmp sgt i64 %18, %7
  %23 = and i1 %22, %21
  br i1 %23, label %24, label %32

24:                                               ; preds = %15
  %25 = icmp eq i64 %17, 0
  br i1 %25, label %911, label %26

26:                                               ; preds = %24
  %27 = inttoptr i64 %19 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = load %"class.webrtc::SimulcastRateAllocator"*, %"class.webrtc::SimulcastRateAllocator"** %14, align 8
  %30 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %29, i64 0, i32 1, i32 10, i64 %28, i32 4
  %31 = load i32, i32* %30, align 4
  br label %562

32:                                               ; preds = %15
  %33 = inttoptr i64 %20 to i64*
  %34 = inttoptr i64 %20 to i8*
  %35 = inttoptr i64 %19 to i64*
  %36 = inttoptr i64 %19 to i8*
  %37 = icmp sgt i64 %17, %18
  br i1 %37, label %169, label %38

38:                                               ; preds = %32
  %39 = icmp eq i64* %33, %35
  br i1 %39, label %911, label %40

40:                                               ; preds = %38
  %41 = getelementptr i64, i64* %35, i64 -1
  %42 = bitcast i64* %41 to i8*
  %43 = sub i64 0, %20
  %44 = getelementptr i8, i8* %42, i64 %43
  %45 = ptrtoint i8* %44 to i64
  %46 = lshr i64 %45, 3
  %47 = add nuw nsw i64 %46, 1
  %48 = icmp ult i64 %47, 4
  br i1 %48, label %49, label %74

49:                                               ; preds = %167, %74, %40
  %50 = phi i64* [ %6, %74 ], [ %6, %40 ], [ %90, %167 ]
  %51 = phi i64* [ %33, %74 ], [ %33, %40 ], [ %91, %167 ]
  %52 = ptrtoint i64* %51 to i64
  %53 = getelementptr i64, i64* %35, i64 -1
  %54 = ptrtoint i64* %53 to i64
  %55 = sub i64 %54, %52
  %56 = lshr i64 %55, 3
  %57 = add nuw nsw i64 %56, 1
  %58 = and i64 %57, 7
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %69, label %60

60:                                               ; preds = %49, %60
  %61 = phi i64* [ %66, %60 ], [ %50, %49 ]
  %62 = phi i64* [ %65, %60 ], [ %51, %49 ]
  %63 = phi i64 [ %67, %60 ], [ %58, %49 ]
  %64 = load i64, i64* %62, align 8
  store i64 %64, i64* %61, align 8
  %65 = getelementptr inbounds i64, i64* %62, i64 1
  %66 = getelementptr inbounds i64, i64* %61, i64 1
  %67 = add i64 %63, -1
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %60, !llvm.loop !64

69:                                               ; preds = %60, %49
  %70 = phi i64* [ undef, %49 ], [ %66, %60 ]
  %71 = phi i64* [ %50, %49 ], [ %66, %60 ]
  %72 = phi i64* [ %51, %49 ], [ %65, %60 ]
  %73 = icmp ult i64 %55, 56
  br i1 %73, label %300, label %334

74:                                               ; preds = %40
  %75 = getelementptr i64, i64* %35, i64 -1
  %76 = bitcast i64* %75 to i8*
  %77 = sub i64 0, %20
  %78 = getelementptr i8, i8* %76, i64 %77
  %79 = ptrtoint i8* %78 to i64
  %80 = lshr i64 %79, 3
  %81 = add nuw nsw i64 %80, 1
  %82 = getelementptr i64, i64* %6, i64 %81
  %83 = bitcast i64* %82 to i8*
  %84 = getelementptr i64, i64* %33, i64 %81
  %85 = icmp ugt i64* %84, %6
  %86 = icmp ult i8* %34, %83
  %87 = and i1 %85, %86
  br i1 %87, label %49, label %88

88:                                               ; preds = %74
  %89 = and i64 %47, 4611686018427387900
  %90 = getelementptr i64, i64* %6, i64 %89
  %91 = getelementptr i64, i64* %33, i64 %89
  %92 = add nsw i64 %89, -4
  %93 = lshr exact i64 %92, 2
  %94 = add nuw nsw i64 %93, 1
  %95 = and i64 %94, 3
  %96 = icmp ult i64 %92, 12
  br i1 %96, label %148, label %97

97:                                               ; preds = %88
  %98 = sub nsw i64 %94, %95
  br label %99

99:                                               ; preds = %99, %97
  %100 = phi i64 [ 0, %97 ], [ %145, %99 ]
  %101 = phi i64 [ %98, %97 ], [ %146, %99 ]
  %102 = getelementptr i64, i64* %6, i64 %100
  %103 = getelementptr i64, i64* %33, i64 %100
  %104 = bitcast i64* %103 to <2 x i64>*
  %105 = load <2 x i64>, <2 x i64>* %104, align 8, !alias.scope !65
  %106 = getelementptr i64, i64* %103, i64 2
  %107 = bitcast i64* %106 to <2 x i64>*
  %108 = load <2 x i64>, <2 x i64>* %107, align 8, !alias.scope !65
  %109 = bitcast i64* %102 to <2 x i64>*
  store <2 x i64> %105, <2 x i64>* %109, align 8, !alias.scope !68, !noalias !65
  %110 = getelementptr i64, i64* %102, i64 2
  %111 = bitcast i64* %110 to <2 x i64>*
  store <2 x i64> %108, <2 x i64>* %111, align 8, !alias.scope !68, !noalias !65
  %112 = or i64 %100, 4
  %113 = getelementptr i64, i64* %6, i64 %112
  %114 = getelementptr i64, i64* %33, i64 %112
  %115 = bitcast i64* %114 to <2 x i64>*
  %116 = load <2 x i64>, <2 x i64>* %115, align 8, !alias.scope !65
  %117 = getelementptr i64, i64* %114, i64 2
  %118 = bitcast i64* %117 to <2 x i64>*
  %119 = load <2 x i64>, <2 x i64>* %118, align 8, !alias.scope !65
  %120 = bitcast i64* %113 to <2 x i64>*
  store <2 x i64> %116, <2 x i64>* %120, align 8, !alias.scope !68, !noalias !65
  %121 = getelementptr i64, i64* %113, i64 2
  %122 = bitcast i64* %121 to <2 x i64>*
  store <2 x i64> %119, <2 x i64>* %122, align 8, !alias.scope !68, !noalias !65
  %123 = or i64 %100, 8
  %124 = getelementptr i64, i64* %6, i64 %123
  %125 = getelementptr i64, i64* %33, i64 %123
  %126 = bitcast i64* %125 to <2 x i64>*
  %127 = load <2 x i64>, <2 x i64>* %126, align 8, !alias.scope !65
  %128 = getelementptr i64, i64* %125, i64 2
  %129 = bitcast i64* %128 to <2 x i64>*
  %130 = load <2 x i64>, <2 x i64>* %129, align 8, !alias.scope !65
  %131 = bitcast i64* %124 to <2 x i64>*
  store <2 x i64> %127, <2 x i64>* %131, align 8, !alias.scope !68, !noalias !65
  %132 = getelementptr i64, i64* %124, i64 2
  %133 = bitcast i64* %132 to <2 x i64>*
  store <2 x i64> %130, <2 x i64>* %133, align 8, !alias.scope !68, !noalias !65
  %134 = or i64 %100, 12
  %135 = getelementptr i64, i64* %6, i64 %134
  %136 = getelementptr i64, i64* %33, i64 %134
  %137 = bitcast i64* %136 to <2 x i64>*
  %138 = load <2 x i64>, <2 x i64>* %137, align 8, !alias.scope !65
  %139 = getelementptr i64, i64* %136, i64 2
  %140 = bitcast i64* %139 to <2 x i64>*
  %141 = load <2 x i64>, <2 x i64>* %140, align 8, !alias.scope !65
  %142 = bitcast i64* %135 to <2 x i64>*
  store <2 x i64> %138, <2 x i64>* %142, align 8, !alias.scope !68, !noalias !65
  %143 = getelementptr i64, i64* %135, i64 2
  %144 = bitcast i64* %143 to <2 x i64>*
  store <2 x i64> %141, <2 x i64>* %144, align 8, !alias.scope !68, !noalias !65
  %145 = add i64 %100, 16
  %146 = add i64 %101, -4
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %148, label %99, !llvm.loop !70

148:                                              ; preds = %99, %88
  %149 = phi i64 [ 0, %88 ], [ %145, %99 ]
  %150 = icmp eq i64 %95, 0
  br i1 %150, label %167, label %151

151:                                              ; preds = %148, %151
  %152 = phi i64 [ %164, %151 ], [ %149, %148 ]
  %153 = phi i64 [ %165, %151 ], [ %95, %148 ]
  %154 = getelementptr i64, i64* %6, i64 %152
  %155 = getelementptr i64, i64* %33, i64 %152
  %156 = bitcast i64* %155 to <2 x i64>*
  %157 = load <2 x i64>, <2 x i64>* %156, align 8, !alias.scope !65
  %158 = getelementptr i64, i64* %155, i64 2
  %159 = bitcast i64* %158 to <2 x i64>*
  %160 = load <2 x i64>, <2 x i64>* %159, align 8, !alias.scope !65
  %161 = bitcast i64* %154 to <2 x i64>*
  store <2 x i64> %157, <2 x i64>* %161, align 8, !alias.scope !68, !noalias !65
  %162 = getelementptr i64, i64* %154, i64 2
  %163 = bitcast i64* %162 to <2 x i64>*
  store <2 x i64> %160, <2 x i64>* %163, align 8, !alias.scope !68, !noalias !65
  %164 = add i64 %152, 4
  %165 = add i64 %153, -1
  %166 = icmp eq i64 %165, 0
  br i1 %166, label %167, label %151, !llvm.loop !71

167:                                              ; preds = %151, %148
  %168 = icmp eq i64 %47, %89
  br i1 %168, label %300, label %49

169:                                              ; preds = %32
  %170 = icmp eq i64* %16, %35
  br i1 %170, label %911, label %171

171:                                              ; preds = %169
  %172 = getelementptr i64, i64* %16, i64 -1
  %173 = bitcast i64* %172 to i8*
  %174 = sub i64 0, %19
  %175 = getelementptr i8, i8* %173, i64 %174
  %176 = ptrtoint i8* %175 to i64
  %177 = lshr i64 %176, 3
  %178 = add nuw nsw i64 %177, 1
  %179 = icmp ult i64 %178, 4
  br i1 %179, label %180, label %205

180:                                              ; preds = %298, %205, %171
  %181 = phi i64* [ %6, %205 ], [ %6, %171 ], [ %221, %298 ]
  %182 = phi i64* [ %35, %205 ], [ %35, %171 ], [ %222, %298 ]
  %183 = ptrtoint i64* %182 to i64
  %184 = getelementptr i64, i64* %16, i64 -1
  %185 = ptrtoint i64* %184 to i64
  %186 = sub i64 %185, %183
  %187 = lshr i64 %186, 3
  %188 = add nuw nsw i64 %187, 1
  %189 = and i64 %188, 7
  %190 = icmp eq i64 %189, 0
  br i1 %190, label %200, label %191

191:                                              ; preds = %180, %191
  %192 = phi i64* [ %197, %191 ], [ %181, %180 ]
  %193 = phi i64* [ %196, %191 ], [ %182, %180 ]
  %194 = phi i64 [ %198, %191 ], [ %189, %180 ]
  %195 = load i64, i64* %193, align 8
  store i64 %195, i64* %192, align 8
  %196 = getelementptr inbounds i64, i64* %193, i64 1
  %197 = getelementptr inbounds i64, i64* %192, i64 1
  %198 = add i64 %194, -1
  %199 = icmp eq i64 %198, 0
  br i1 %199, label %200, label %191, !llvm.loop !72

200:                                              ; preds = %191, %180
  %201 = phi i64* [ undef, %180 ], [ %197, %191 ]
  %202 = phi i64* [ %181, %180 ], [ %197, %191 ]
  %203 = phi i64* [ %182, %180 ], [ %196, %191 ]
  %204 = icmp ult i64 %186, 56
  br i1 %204, label %362, label %534

205:                                              ; preds = %171
  %206 = getelementptr i64, i64* %16, i64 -1
  %207 = bitcast i64* %206 to i8*
  %208 = sub i64 0, %19
  %209 = getelementptr i8, i8* %207, i64 %208
  %210 = ptrtoint i8* %209 to i64
  %211 = lshr i64 %210, 3
  %212 = add nuw nsw i64 %211, 1
  %213 = getelementptr i64, i64* %6, i64 %212
  %214 = bitcast i64* %213 to i8*
  %215 = getelementptr i64, i64* %35, i64 %212
  %216 = icmp ugt i64* %215, %6
  %217 = icmp ult i8* %36, %214
  %218 = and i1 %216, %217
  br i1 %218, label %180, label %219

219:                                              ; preds = %205
  %220 = and i64 %178, 4611686018427387900
  %221 = getelementptr i64, i64* %6, i64 %220
  %222 = getelementptr i64, i64* %35, i64 %220
  %223 = add nsw i64 %220, -4
  %224 = lshr exact i64 %223, 2
  %225 = add nuw nsw i64 %224, 1
  %226 = and i64 %225, 3
  %227 = icmp ult i64 %223, 12
  br i1 %227, label %279, label %228

228:                                              ; preds = %219
  %229 = sub nsw i64 %225, %226
  br label %230

230:                                              ; preds = %230, %228
  %231 = phi i64 [ 0, %228 ], [ %276, %230 ]
  %232 = phi i64 [ %229, %228 ], [ %277, %230 ]
  %233 = getelementptr i64, i64* %6, i64 %231
  %234 = getelementptr i64, i64* %35, i64 %231
  %235 = bitcast i64* %234 to <2 x i64>*
  %236 = load <2 x i64>, <2 x i64>* %235, align 8, !alias.scope !73
  %237 = getelementptr i64, i64* %234, i64 2
  %238 = bitcast i64* %237 to <2 x i64>*
  %239 = load <2 x i64>, <2 x i64>* %238, align 8, !alias.scope !73
  %240 = bitcast i64* %233 to <2 x i64>*
  store <2 x i64> %236, <2 x i64>* %240, align 8, !alias.scope !76, !noalias !73
  %241 = getelementptr i64, i64* %233, i64 2
  %242 = bitcast i64* %241 to <2 x i64>*
  store <2 x i64> %239, <2 x i64>* %242, align 8, !alias.scope !76, !noalias !73
  %243 = or i64 %231, 4
  %244 = getelementptr i64, i64* %6, i64 %243
  %245 = getelementptr i64, i64* %35, i64 %243
  %246 = bitcast i64* %245 to <2 x i64>*
  %247 = load <2 x i64>, <2 x i64>* %246, align 8, !alias.scope !73
  %248 = getelementptr i64, i64* %245, i64 2
  %249 = bitcast i64* %248 to <2 x i64>*
  %250 = load <2 x i64>, <2 x i64>* %249, align 8, !alias.scope !73
  %251 = bitcast i64* %244 to <2 x i64>*
  store <2 x i64> %247, <2 x i64>* %251, align 8, !alias.scope !76, !noalias !73
  %252 = getelementptr i64, i64* %244, i64 2
  %253 = bitcast i64* %252 to <2 x i64>*
  store <2 x i64> %250, <2 x i64>* %253, align 8, !alias.scope !76, !noalias !73
  %254 = or i64 %231, 8
  %255 = getelementptr i64, i64* %6, i64 %254
  %256 = getelementptr i64, i64* %35, i64 %254
  %257 = bitcast i64* %256 to <2 x i64>*
  %258 = load <2 x i64>, <2 x i64>* %257, align 8, !alias.scope !73
  %259 = getelementptr i64, i64* %256, i64 2
  %260 = bitcast i64* %259 to <2 x i64>*
  %261 = load <2 x i64>, <2 x i64>* %260, align 8, !alias.scope !73
  %262 = bitcast i64* %255 to <2 x i64>*
  store <2 x i64> %258, <2 x i64>* %262, align 8, !alias.scope !76, !noalias !73
  %263 = getelementptr i64, i64* %255, i64 2
  %264 = bitcast i64* %263 to <2 x i64>*
  store <2 x i64> %261, <2 x i64>* %264, align 8, !alias.scope !76, !noalias !73
  %265 = or i64 %231, 12
  %266 = getelementptr i64, i64* %6, i64 %265
  %267 = getelementptr i64, i64* %35, i64 %265
  %268 = bitcast i64* %267 to <2 x i64>*
  %269 = load <2 x i64>, <2 x i64>* %268, align 8, !alias.scope !73
  %270 = getelementptr i64, i64* %267, i64 2
  %271 = bitcast i64* %270 to <2 x i64>*
  %272 = load <2 x i64>, <2 x i64>* %271, align 8, !alias.scope !73
  %273 = bitcast i64* %266 to <2 x i64>*
  store <2 x i64> %269, <2 x i64>* %273, align 8, !alias.scope !76, !noalias !73
  %274 = getelementptr i64, i64* %266, i64 2
  %275 = bitcast i64* %274 to <2 x i64>*
  store <2 x i64> %272, <2 x i64>* %275, align 8, !alias.scope !76, !noalias !73
  %276 = add i64 %231, 16
  %277 = add i64 %232, -4
  %278 = icmp eq i64 %277, 0
  br i1 %278, label %279, label %230, !llvm.loop !78

279:                                              ; preds = %230, %219
  %280 = phi i64 [ 0, %219 ], [ %276, %230 ]
  %281 = icmp eq i64 %226, 0
  br i1 %281, label %298, label %282

282:                                              ; preds = %279, %282
  %283 = phi i64 [ %295, %282 ], [ %280, %279 ]
  %284 = phi i64 [ %296, %282 ], [ %226, %279 ]
  %285 = getelementptr i64, i64* %6, i64 %283
  %286 = getelementptr i64, i64* %35, i64 %283
  %287 = bitcast i64* %286 to <2 x i64>*
  %288 = load <2 x i64>, <2 x i64>* %287, align 8, !alias.scope !73
  %289 = getelementptr i64, i64* %286, i64 2
  %290 = bitcast i64* %289 to <2 x i64>*
  %291 = load <2 x i64>, <2 x i64>* %290, align 8, !alias.scope !73
  %292 = bitcast i64* %285 to <2 x i64>*
  store <2 x i64> %288, <2 x i64>* %292, align 8, !alias.scope !76, !noalias !73
  %293 = getelementptr i64, i64* %285, i64 2
  %294 = bitcast i64* %293 to <2 x i64>*
  store <2 x i64> %291, <2 x i64>* %294, align 8, !alias.scope !76, !noalias !73
  %295 = add i64 %283, 4
  %296 = add i64 %284, -1
  %297 = icmp eq i64 %296, 0
  br i1 %297, label %298, label %282, !llvm.loop !79

298:                                              ; preds = %282, %279
  %299 = icmp eq i64 %178, %220
  br i1 %299, label %362, label %180

300:                                              ; preds = %69, %334, %167
  %301 = phi i64* [ %90, %167 ], [ %70, %69 ], [ %360, %334 ]
  %302 = icmp eq i64* %301, %6
  br i1 %302, label %911, label %303

303:                                              ; preds = %300, %329
  %304 = phi i64* [ %331, %329 ], [ %6, %300 ]
  %305 = phi i64* [ %332, %329 ], [ %33, %300 ]
  %306 = phi i64* [ %330, %329 ], [ %35, %300 ]
  %307 = icmp eq i64* %306, %16
  br i1 %307, label %308, label %316

308:                                              ; preds = %303
  %309 = ptrtoint i64* %301 to i64
  %310 = ptrtoint i64* %304 to i64
  %311 = sub i64 %309, %310
  %312 = icmp eq i64 %311, 0
  br i1 %312, label %911, label %313

313:                                              ; preds = %308
  %314 = bitcast i64* %305 to i8*
  %315 = bitcast i64* %304 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %314, i8* align 8 %315, i64 %311, i1 false) #13
  br label %911

316:                                              ; preds = %303
  %317 = load i64, i64* %306, align 8
  %318 = load i64, i64* %304, align 8
  %319 = load %"class.webrtc::SimulcastRateAllocator"*, %"class.webrtc::SimulcastRateAllocator"** %14, align 8
  %320 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %319, i64 0, i32 1, i32 10, i64 %317, i32 4
  %321 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %319, i64 0, i32 1, i32 10, i64 %318, i32 4
  %322 = load i32, i32* %320, align 4
  %323 = load i32, i32* %321, align 4
  %324 = icmp ult i32 %322, %323
  br i1 %324, label %325, label %327

325:                                              ; preds = %316
  store i64 %317, i64* %305, align 8
  %326 = getelementptr inbounds i64, i64* %306, i64 1
  br label %329

327:                                              ; preds = %316
  store i64 %318, i64* %305, align 8
  %328 = getelementptr inbounds i64, i64* %304, i64 1
  br label %329

329:                                              ; preds = %327, %325
  %330 = phi i64* [ %326, %325 ], [ %306, %327 ]
  %331 = phi i64* [ %304, %325 ], [ %328, %327 ]
  %332 = getelementptr inbounds i64, i64* %305, i64 1
  %333 = icmp eq i64* %331, %301
  br i1 %333, label %911, label %303

334:                                              ; preds = %69, %334
  %335 = phi i64* [ %360, %334 ], [ %71, %69 ]
  %336 = phi i64* [ %359, %334 ], [ %72, %69 ]
  %337 = load i64, i64* %336, align 8
  store i64 %337, i64* %335, align 8
  %338 = getelementptr inbounds i64, i64* %336, i64 1
  %339 = getelementptr inbounds i64, i64* %335, i64 1
  %340 = load i64, i64* %338, align 8
  store i64 %340, i64* %339, align 8
  %341 = getelementptr inbounds i64, i64* %336, i64 2
  %342 = getelementptr inbounds i64, i64* %335, i64 2
  %343 = load i64, i64* %341, align 8
  store i64 %343, i64* %342, align 8
  %344 = getelementptr inbounds i64, i64* %336, i64 3
  %345 = getelementptr inbounds i64, i64* %335, i64 3
  %346 = load i64, i64* %344, align 8
  store i64 %346, i64* %345, align 8
  %347 = getelementptr inbounds i64, i64* %336, i64 4
  %348 = getelementptr inbounds i64, i64* %335, i64 4
  %349 = load i64, i64* %347, align 8
  store i64 %349, i64* %348, align 8
  %350 = getelementptr inbounds i64, i64* %336, i64 5
  %351 = getelementptr inbounds i64, i64* %335, i64 5
  %352 = load i64, i64* %350, align 8
  store i64 %352, i64* %351, align 8
  %353 = getelementptr inbounds i64, i64* %336, i64 6
  %354 = getelementptr inbounds i64, i64* %335, i64 6
  %355 = load i64, i64* %353, align 8
  store i64 %355, i64* %354, align 8
  %356 = getelementptr inbounds i64, i64* %336, i64 7
  %357 = getelementptr inbounds i64, i64* %335, i64 7
  %358 = load i64, i64* %356, align 8
  store i64 %358, i64* %357, align 8
  %359 = getelementptr inbounds i64, i64* %336, i64 8
  %360 = getelementptr inbounds i64, i64* %335, i64 8
  %361 = icmp eq i64* %359, %35
  br i1 %361, label %300, label %334, !llvm.loop !80

362:                                              ; preds = %200, %534, %298
  %363 = phi i64* [ %221, %298 ], [ %201, %200 ], [ %560, %534 ]
  %364 = icmp eq i64* %363, %6
  br i1 %364, label %911, label %365

365:                                              ; preds = %362, %518
  %366 = phi i64* [ %529, %518 ], [ %16, %362 ]
  %367 = phi i64* [ %532, %518 ], [ %363, %362 ]
  %368 = phi i64* [ %531, %518 ], [ %35, %362 ]
  %369 = icmp eq i64* %368, %33
  br i1 %369, label %370, label %518

370:                                              ; preds = %365
  %371 = getelementptr i64, i64* %367, i64 -1
  %372 = ptrtoint i64* %371 to i64
  %373 = sub i64 %372, %9
  %374 = lshr i64 %373, 3
  %375 = add nuw nsw i64 %374, 1
  %376 = icmp ult i64 %375, 4
  br i1 %376, label %467, label %377

377:                                              ; preds = %370
  %378 = getelementptr i64, i64* %367, i64 -1
  %379 = ptrtoint i64* %378 to i64
  %380 = sub i64 %379, %9
  %381 = lshr i64 %380, 3
  %382 = xor i64 %381, -1
  %383 = getelementptr i64, i64* %366, i64 %382
  %384 = getelementptr i64, i64* %367, i64 %382
  %385 = icmp ult i64* %383, %367
  %386 = icmp ult i64* %384, %366
  %387 = and i1 %385, %386
  br i1 %387, label %467, label %388

388:                                              ; preds = %377
  %389 = and i64 %375, 4611686018427387900
  %390 = sub nsw i64 0, %389
  %391 = getelementptr i64, i64* %367, i64 %390
  %392 = sub nsw i64 0, %389
  %393 = getelementptr i64, i64* %366, i64 %392
  %394 = add nsw i64 %389, -4
  %395 = lshr exact i64 %394, 2
  %396 = add nuw nsw i64 %395, 1
  %397 = and i64 %396, 1
  %398 = icmp eq i64 %394, 0
  br i1 %398, label %445, label %399

399:                                              ; preds = %388
  %400 = sub nuw nsw i64 %396, %397
  %401 = getelementptr i64, i64* %367, i64 -1
  %402 = getelementptr i64, i64* %366, i64 -1
  %403 = getelementptr i64, i64* %367, i64 -1
  %404 = getelementptr i64, i64* %366, i64 -1
  br label %405

405:                                              ; preds = %405, %399
  %406 = phi i64 [ 0, %399 ], [ %440, %405 ]
  %407 = phi i64 [ %400, %399 ], [ %441, %405 ]
  %408 = sub i64 0, %406
  %409 = sub i64 0, %406
  %410 = getelementptr inbounds i64, i64* %401, i64 %408
  %411 = getelementptr inbounds i64, i64* %410, i64 -1
  %412 = bitcast i64* %411 to <2 x i64>*
  %413 = load <2 x i64>, <2 x i64>* %412, align 8, !alias.scope !81
  %414 = getelementptr inbounds i64, i64* %410, i64 -2
  %415 = getelementptr inbounds i64, i64* %414, i64 -1
  %416 = bitcast i64* %415 to <2 x i64>*
  %417 = load <2 x i64>, <2 x i64>* %416, align 8, !alias.scope !81
  %418 = getelementptr inbounds i64, i64* %402, i64 %409
  %419 = getelementptr inbounds i64, i64* %418, i64 -1
  %420 = bitcast i64* %419 to <2 x i64>*
  store <2 x i64> %413, <2 x i64>* %420, align 8, !alias.scope !84, !noalias !81
  %421 = getelementptr inbounds i64, i64* %418, i64 -2
  %422 = getelementptr inbounds i64, i64* %421, i64 -1
  %423 = bitcast i64* %422 to <2 x i64>*
  store <2 x i64> %417, <2 x i64>* %423, align 8, !alias.scope !84, !noalias !81
  %424 = sub nuw nsw i64 -4, %406
  %425 = sub nuw nsw i64 -4, %406
  %426 = getelementptr inbounds i64, i64* %403, i64 %424
  %427 = getelementptr inbounds i64, i64* %426, i64 -1
  %428 = bitcast i64* %427 to <2 x i64>*
  %429 = load <2 x i64>, <2 x i64>* %428, align 8, !alias.scope !81
  %430 = getelementptr inbounds i64, i64* %426, i64 -2
  %431 = getelementptr inbounds i64, i64* %430, i64 -1
  %432 = bitcast i64* %431 to <2 x i64>*
  %433 = load <2 x i64>, <2 x i64>* %432, align 8, !alias.scope !81
  %434 = getelementptr inbounds i64, i64* %404, i64 %425
  %435 = getelementptr inbounds i64, i64* %434, i64 -1
  %436 = bitcast i64* %435 to <2 x i64>*
  store <2 x i64> %429, <2 x i64>* %436, align 8, !alias.scope !84, !noalias !81
  %437 = getelementptr inbounds i64, i64* %434, i64 -2
  %438 = getelementptr inbounds i64, i64* %437, i64 -1
  %439 = bitcast i64* %438 to <2 x i64>*
  store <2 x i64> %433, <2 x i64>* %439, align 8, !alias.scope !84, !noalias !81
  %440 = add i64 %406, 8
  %441 = add i64 %407, -2
  %442 = icmp eq i64 %441, 0
  br i1 %442, label %443, label %405, !llvm.loop !86

443:                                              ; preds = %405
  %444 = sub nuw nsw i64 -8, %406
  br label %445

445:                                              ; preds = %443, %388
  %446 = phi i64 [ 0, %388 ], [ %444, %443 ]
  %447 = icmp eq i64 %397, 0
  br i1 %447, label %465, label %448

448:                                              ; preds = %445
  %449 = getelementptr i64, i64* %367, i64 -1
  %450 = getelementptr i64, i64* %366, i64 -1
  %451 = getelementptr inbounds i64, i64* %449, i64 %446
  %452 = getelementptr inbounds i64, i64* %451, i64 -1
  %453 = bitcast i64* %452 to <2 x i64>*
  %454 = load <2 x i64>, <2 x i64>* %453, align 8, !alias.scope !81
  %455 = getelementptr inbounds i64, i64* %451, i64 -2
  %456 = getelementptr inbounds i64, i64* %455, i64 -1
  %457 = bitcast i64* %456 to <2 x i64>*
  %458 = load <2 x i64>, <2 x i64>* %457, align 8, !alias.scope !81
  %459 = getelementptr inbounds i64, i64* %450, i64 %446
  %460 = getelementptr inbounds i64, i64* %459, i64 -1
  %461 = bitcast i64* %460 to <2 x i64>*
  store <2 x i64> %454, <2 x i64>* %461, align 8, !alias.scope !84, !noalias !81
  %462 = getelementptr inbounds i64, i64* %459, i64 -2
  %463 = getelementptr inbounds i64, i64* %462, i64 -1
  %464 = bitcast i64* %463 to <2 x i64>*
  store <2 x i64> %458, <2 x i64>* %464, align 8, !alias.scope !84, !noalias !81
  br label %465

465:                                              ; preds = %445, %448
  %466 = icmp eq i64 %375, %389
  br i1 %466, label %911, label %467

467:                                              ; preds = %465, %377, %370
  %468 = phi i64* [ %367, %377 ], [ %367, %370 ], [ %391, %465 ]
  %469 = phi i64* [ %366, %377 ], [ %366, %370 ], [ %393, %465 ]
  %470 = getelementptr i64, i64* %468, i64 -1
  %471 = ptrtoint i64* %470 to i64
  %472 = sub i64 %471, %9
  %473 = lshr i64 %472, 3
  %474 = add nuw nsw i64 %473, 1
  %475 = and i64 %474, 7
  %476 = icmp eq i64 %475, 0
  br i1 %476, label %486, label %477

477:                                              ; preds = %467, %477
  %478 = phi i64* [ %481, %477 ], [ %468, %467 ]
  %479 = phi i64* [ %483, %477 ], [ %469, %467 ]
  %480 = phi i64 [ %484, %477 ], [ %475, %467 ]
  %481 = getelementptr inbounds i64, i64* %478, i64 -1
  %482 = load i64, i64* %481, align 8
  %483 = getelementptr inbounds i64, i64* %479, i64 -1
  store i64 %482, i64* %483, align 8
  %484 = add i64 %480, -1
  %485 = icmp eq i64 %484, 0
  br i1 %485, label %486, label %477, !llvm.loop !87

486:                                              ; preds = %477, %467
  %487 = phi i64* [ %468, %467 ], [ %481, %477 ]
  %488 = phi i64* [ %469, %467 ], [ %483, %477 ]
  %489 = icmp ult i64 %472, 56
  br i1 %489, label %911, label %490

490:                                              ; preds = %486, %490
  %491 = phi i64* [ %514, %490 ], [ %487, %486 ]
  %492 = phi i64* [ %516, %490 ], [ %488, %486 ]
  %493 = getelementptr inbounds i64, i64* %491, i64 -1
  %494 = load i64, i64* %493, align 8
  %495 = getelementptr inbounds i64, i64* %492, i64 -1
  store i64 %494, i64* %495, align 8
  %496 = getelementptr inbounds i64, i64* %491, i64 -2
  %497 = load i64, i64* %496, align 8
  %498 = getelementptr inbounds i64, i64* %492, i64 -2
  store i64 %497, i64* %498, align 8
  %499 = getelementptr inbounds i64, i64* %491, i64 -3
  %500 = load i64, i64* %499, align 8
  %501 = getelementptr inbounds i64, i64* %492, i64 -3
  store i64 %500, i64* %501, align 8
  %502 = getelementptr inbounds i64, i64* %491, i64 -4
  %503 = load i64, i64* %502, align 8
  %504 = getelementptr inbounds i64, i64* %492, i64 -4
  store i64 %503, i64* %504, align 8
  %505 = getelementptr inbounds i64, i64* %491, i64 -5
  %506 = load i64, i64* %505, align 8
  %507 = getelementptr inbounds i64, i64* %492, i64 -5
  store i64 %506, i64* %507, align 8
  %508 = getelementptr inbounds i64, i64* %491, i64 -6
  %509 = load i64, i64* %508, align 8
  %510 = getelementptr inbounds i64, i64* %492, i64 -6
  store i64 %509, i64* %510, align 8
  %511 = getelementptr inbounds i64, i64* %491, i64 -7
  %512 = load i64, i64* %511, align 8
  %513 = getelementptr inbounds i64, i64* %492, i64 -7
  store i64 %512, i64* %513, align 8
  %514 = getelementptr inbounds i64, i64* %491, i64 -8
  %515 = load i64, i64* %514, align 8
  %516 = getelementptr inbounds i64, i64* %492, i64 -8
  store i64 %515, i64* %516, align 8
  %517 = icmp eq i64* %514, %6
  br i1 %517, label %911, label %490, !llvm.loop !88

518:                                              ; preds = %365
  %519 = getelementptr inbounds i64, i64* %368, i64 -1
  %520 = getelementptr inbounds i64, i64* %367, i64 -1
  %521 = load i64, i64* %520, align 8
  %522 = load i64, i64* %519, align 8
  %523 = load %"class.webrtc::SimulcastRateAllocator"*, %"class.webrtc::SimulcastRateAllocator"** %14, align 8
  %524 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %523, i64 0, i32 1, i32 10, i64 %521, i32 4
  %525 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %523, i64 0, i32 1, i32 10, i64 %522, i32 4
  %526 = load i32, i32* %524, align 4
  %527 = load i32, i32* %525, align 4
  %528 = icmp ult i32 %526, %527
  %529 = getelementptr inbounds i64, i64* %366, i64 -1
  %530 = select i1 %528, i64 %522, i64 %521
  %531 = select i1 %528, i64* %519, i64* %368
  %532 = select i1 %528, i64* %367, i64* %520
  store i64 %530, i64* %529, align 8
  %533 = icmp eq i64* %532, %6
  br i1 %533, label %911, label %365

534:                                              ; preds = %200, %534
  %535 = phi i64* [ %560, %534 ], [ %202, %200 ]
  %536 = phi i64* [ %559, %534 ], [ %203, %200 ]
  %537 = load i64, i64* %536, align 8
  store i64 %537, i64* %535, align 8
  %538 = getelementptr inbounds i64, i64* %536, i64 1
  %539 = getelementptr inbounds i64, i64* %535, i64 1
  %540 = load i64, i64* %538, align 8
  store i64 %540, i64* %539, align 8
  %541 = getelementptr inbounds i64, i64* %536, i64 2
  %542 = getelementptr inbounds i64, i64* %535, i64 2
  %543 = load i64, i64* %541, align 8
  store i64 %543, i64* %542, align 8
  %544 = getelementptr inbounds i64, i64* %536, i64 3
  %545 = getelementptr inbounds i64, i64* %535, i64 3
  %546 = load i64, i64* %544, align 8
  store i64 %546, i64* %545, align 8
  %547 = getelementptr inbounds i64, i64* %536, i64 4
  %548 = getelementptr inbounds i64, i64* %535, i64 4
  %549 = load i64, i64* %547, align 8
  store i64 %549, i64* %548, align 8
  %550 = getelementptr inbounds i64, i64* %536, i64 5
  %551 = getelementptr inbounds i64, i64* %535, i64 5
  %552 = load i64, i64* %550, align 8
  store i64 %552, i64* %551, align 8
  %553 = getelementptr inbounds i64, i64* %536, i64 6
  %554 = getelementptr inbounds i64, i64* %535, i64 6
  %555 = load i64, i64* %553, align 8
  store i64 %555, i64* %554, align 8
  %556 = getelementptr inbounds i64, i64* %536, i64 7
  %557 = getelementptr inbounds i64, i64* %535, i64 7
  %558 = load i64, i64* %556, align 8
  store i64 %558, i64* %557, align 8
  %559 = getelementptr inbounds i64, i64* %536, i64 8
  %560 = getelementptr inbounds i64, i64* %535, i64 8
  %561 = icmp eq i64* %559, %16
  br i1 %561, label %362, label %534, !llvm.loop !89

562:                                              ; preds = %26, %570
  %563 = phi i64 [ %17, %26 ], [ %573, %570 ]
  %564 = phi i64 [ %20, %26 ], [ %572, %570 ]
  %565 = inttoptr i64 %564 to i64*
  %566 = load i64, i64* %565, align 8
  %567 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %29, i64 0, i32 1, i32 10, i64 %566, i32 4
  %568 = load i32, i32* %567, align 4
  %569 = icmp ult i32 %31, %568
  br i1 %569, label %575, label %570

570:                                              ; preds = %562
  %571 = getelementptr inbounds i64, i64* %565, i64 1
  %572 = ptrtoint i64* %571 to i64
  %573 = add nsw i64 %563, -1
  %574 = icmp eq i64 %573, 0
  br i1 %574, label %911, label %562

575:                                              ; preds = %562
  %576 = inttoptr i64 %564 to i64*
  %577 = icmp slt i64 %563, %18
  br i1 %577, label %578, label %609

578:                                              ; preds = %575
  %579 = sdiv i64 %18, 2
  %580 = getelementptr inbounds i64, i64* %27, i64 %579
  %581 = ptrtoint i64* %580 to i64
  %582 = sub i64 %19, %564
  %583 = icmp eq i64 %582, 0
  br i1 %583, label %604, label %584

584:                                              ; preds = %578
  %585 = ashr exact i64 %582, 3
  %586 = load i64, i64* %580, align 8
  %587 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %29, i64 0, i32 1, i32 10, i64 %586, i32 4
  %588 = load i32, i32* %587, align 4
  br label %589

589:                                              ; preds = %589, %584
  %590 = phi i64* [ %576, %584 ], [ %602, %589 ]
  %591 = phi i64 [ %585, %584 ], [ %601, %589 ]
  %592 = lshr i64 %591, 1
  %593 = getelementptr inbounds i64, i64* %590, i64 %592
  %594 = load i64, i64* %593, align 8
  %595 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %29, i64 0, i32 1, i32 10, i64 %594, i32 4
  %596 = load i32, i32* %595, align 4
  %597 = icmp ult i32 %588, %596
  %598 = getelementptr inbounds i64, i64* %593, i64 1
  %599 = xor i64 %592, -1
  %600 = add i64 %591, %599
  %601 = select i1 %597, i64 %592, i64 %600
  %602 = select i1 %597, i64* %590, i64* %598
  %603 = icmp eq i64 %601, 0
  br i1 %603, label %604, label %589

604:                                              ; preds = %589, %578
  %605 = phi i64* [ %576, %578 ], [ %602, %589 ]
  %606 = ptrtoint i64* %605 to i64
  %607 = sub i64 %606, %564
  %608 = ashr exact i64 %607, 3
  br label %646

609:                                              ; preds = %575
  %610 = icmp eq i64 %563, 1
  br i1 %610, label %611, label %614

611:                                              ; preds = %609
  %612 = inttoptr i64 %19 to i64*
  %613 = inttoptr i64 %564 to i64*
  store i64 %28, i64* %613, align 8
  store i64 %566, i64* %612, align 8
  br label %911

614:                                              ; preds = %609
  %615 = sdiv i64 %563, 2
  %616 = getelementptr inbounds i64, i64* %576, i64 %615
  %617 = ptrtoint i64* %616 to i64
  %618 = ptrtoint i64* %16 to i64
  %619 = sub i64 %618, %19
  %620 = icmp eq i64 %619, 0
  br i1 %620, label %641, label %621

621:                                              ; preds = %614
  %622 = ashr exact i64 %619, 3
  %623 = load i64, i64* %616, align 8
  %624 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %29, i64 0, i32 1, i32 10, i64 %623, i32 4
  %625 = load i32, i32* %624, align 4
  br label %626

626:                                              ; preds = %626, %621
  %627 = phi i64* [ %27, %621 ], [ %639, %626 ]
  %628 = phi i64 [ %622, %621 ], [ %638, %626 ]
  %629 = lshr i64 %628, 1
  %630 = getelementptr inbounds i64, i64* %627, i64 %629
  %631 = load i64, i64* %630, align 8
  %632 = getelementptr inbounds %"class.webrtc::SimulcastRateAllocator", %"class.webrtc::SimulcastRateAllocator"* %29, i64 0, i32 1, i32 10, i64 %631, i32 4
  %633 = load i32, i32* %632, align 4
  %634 = icmp ult i32 %633, %625
  %635 = getelementptr inbounds i64, i64* %630, i64 1
  %636 = xor i64 %629, -1
  %637 = add i64 %628, %636
  %638 = select i1 %634, i64 %637, i64 %629
  %639 = select i1 %634, i64* %635, i64* %627
  %640 = icmp eq i64 %638, 0
  br i1 %640, label %641, label %626

641:                                              ; preds = %626, %614
  %642 = phi i64* [ %27, %614 ], [ %639, %626 ]
  %643 = ptrtoint i64* %642 to i64
  %644 = sub i64 %643, %19
  %645 = ashr exact i64 %644, 3
  br label %646

646:                                              ; preds = %641, %604
  %647 = phi i64 [ %606, %604 ], [ %617, %641 ]
  %648 = phi i64 [ %581, %604 ], [ %643, %641 ]
  %649 = phi i64 [ %579, %604 ], [ %645, %641 ]
  %650 = phi i64 [ %608, %604 ], [ %615, %641 ]
  %651 = sub nsw i64 %563, %650
  %652 = sub nsw i64 %18, %649
  %653 = inttoptr i64 %647 to i64*
  %654 = inttoptr i64 %648 to i64*
  %655 = inttoptr i64 %647 to i8*
  %656 = inttoptr i64 %19 to i8*
  %657 = icmp eq i64* %653, %27
  br i1 %657, label %896, label %658

658:                                              ; preds = %646
  %659 = icmp eq i64* %27, %654
  br i1 %659, label %896, label %660

660:                                              ; preds = %658
  %661 = getelementptr inbounds i64, i64* %653, i64 1
  %662 = icmp eq i64* %661, %27
  br i1 %662, label %663, label %671

663:                                              ; preds = %660
  %664 = load i64, i64* %653, align 8
  %665 = sub i64 %648, %19
  %666 = ashr exact i64 %665, 3
  %667 = icmp eq i64 %665, 0
  br i1 %667, label %669, label %668

668:                                              ; preds = %663
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %655, i8* align 8 %656, i64 %665, i1 false) #13
  br label %669

669:                                              ; preds = %668, %663
  %670 = getelementptr inbounds i64, i64* %653, i64 %666
  store i64 %664, i64* %670, align 8
  br label %896

671:                                              ; preds = %660
  %672 = getelementptr inbounds i64, i64* %27, i64 1
  %673 = icmp eq i64* %672, %654
  br i1 %673, label %674, label %687

674:                                              ; preds = %671
  %675 = getelementptr inbounds i64, i64* %654, i64 -1
  %676 = load i64, i64* %675, align 8
  %677 = ptrtoint i64* %675 to i64
  %678 = sub i64 %677, %647
  %679 = icmp eq i64 %678, 0
  br i1 %679, label %685, label %680

680:                                              ; preds = %674
  %681 = ashr exact i64 %678, 3
  %682 = sub nsw i64 0, %681
  %683 = getelementptr inbounds i64, i64* %654, i64 %682
  %684 = bitcast i64* %683 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %684, i8* align 8 %655, i64 %678, i1 false) #13
  br label %685

685:                                              ; preds = %680, %674
  %686 = phi i64* [ %683, %680 ], [ %654, %674 ]
  store i64 %676, i64* %653, align 8
  br label %896

687:                                              ; preds = %671
  %688 = sub i64 %19, %647
  %689 = ashr exact i64 %688, 3
  %690 = sub i64 %648, %19
  %691 = ashr exact i64 %690, 3
  %692 = icmp eq i64 %689, %691
  br i1 %692, label %693, label %838

693:                                              ; preds = %687
  %694 = load i64, i64* %653, align 8
  store i64 %28, i64* %653, align 8
  store i64 %694, i64* %27, align 8
  %695 = getelementptr inbounds i64, i64* %653, i64 1
  %696 = getelementptr inbounds i64, i64* %27, i64 1
  %697 = icmp eq i64* %695, %27
  br i1 %697, label %896, label %698

698:                                              ; preds = %693
  %699 = getelementptr i64, i64* %27, i64 -2
  %700 = bitcast i64* %699 to i8*
  %701 = sub i64 0, %647
  %702 = getelementptr i8, i8* %700, i64 %701
  %703 = ptrtoint i8* %702 to i64
  %704 = lshr i64 %703, 3
  %705 = add nuw nsw i64 %704, 1
  %706 = icmp ult i64 %705, 4
  br i1 %706, label %793, label %707

707:                                              ; preds = %698
  %708 = getelementptr i64, i64* %653, i64 2
  %709 = getelementptr i64, i64* %27, i64 -2
  %710 = bitcast i64* %709 to i8*
  %711 = sub i64 0, %647
  %712 = getelementptr i8, i8* %710, i64 %711
  %713 = ptrtoint i8* %712 to i64
  %714 = lshr i64 %713, 3
  %715 = getelementptr i64, i64* %708, i64 %714
  %716 = getelementptr i64, i64* %27, i64 2
  %717 = getelementptr i64, i64* %716, i64 %714
  %718 = icmp ult i64* %695, %717
  %719 = icmp ult i64* %696, %715
  %720 = and i1 %718, %719
  br i1 %720, label %793, label %721

721:                                              ; preds = %707
  %722 = and i64 %705, 4611686018427387900
  %723 = getelementptr i64, i64* %696, i64 %722
  %724 = getelementptr i64, i64* %695, i64 %722
  %725 = add nsw i64 %722, -4
  %726 = lshr exact i64 %725, 2
  %727 = add nuw nsw i64 %726, 1
  %728 = and i64 %727, 1
  %729 = icmp eq i64 %725, 0
  br i1 %729, label %771, label %730

730:                                              ; preds = %721
  %731 = sub nuw nsw i64 %727, %728
  br label %732

732:                                              ; preds = %732, %730
  %733 = phi i64 [ 0, %730 ], [ %768, %732 ]
  %734 = phi i64 [ %731, %730 ], [ %769, %732 ]
  %735 = getelementptr i64, i64* %696, i64 %733
  %736 = getelementptr i64, i64* %695, i64 %733
  %737 = bitcast i64* %735 to <2 x i64>*
  %738 = load <2 x i64>, <2 x i64>* %737, align 8, !alias.scope !90
  %739 = getelementptr i64, i64* %735, i64 2
  %740 = bitcast i64* %739 to <2 x i64>*
  %741 = load <2 x i64>, <2 x i64>* %740, align 8, !alias.scope !90
  %742 = bitcast i64* %736 to <2 x i64>*
  %743 = load <2 x i64>, <2 x i64>* %742, align 8, !alias.scope !93, !noalias !90
  %744 = getelementptr i64, i64* %736, i64 2
  %745 = bitcast i64* %744 to <2 x i64>*
  %746 = load <2 x i64>, <2 x i64>* %745, align 8, !alias.scope !93, !noalias !90
  %747 = bitcast i64* %736 to <2 x i64>*
  store <2 x i64> %738, <2 x i64>* %747, align 8, !alias.scope !93, !noalias !90
  %748 = bitcast i64* %744 to <2 x i64>*
  store <2 x i64> %741, <2 x i64>* %748, align 8, !alias.scope !93, !noalias !90
  %749 = bitcast i64* %735 to <2 x i64>*
  store <2 x i64> %743, <2 x i64>* %749, align 8, !alias.scope !90
  %750 = bitcast i64* %739 to <2 x i64>*
  store <2 x i64> %746, <2 x i64>* %750, align 8, !alias.scope !90
  %751 = or i64 %733, 4
  %752 = getelementptr i64, i64* %696, i64 %751
  %753 = getelementptr i64, i64* %695, i64 %751
  %754 = bitcast i64* %752 to <2 x i64>*
  %755 = load <2 x i64>, <2 x i64>* %754, align 8, !alias.scope !90
  %756 = getelementptr i64, i64* %752, i64 2
  %757 = bitcast i64* %756 to <2 x i64>*
  %758 = load <2 x i64>, <2 x i64>* %757, align 8, !alias.scope !90
  %759 = bitcast i64* %753 to <2 x i64>*
  %760 = load <2 x i64>, <2 x i64>* %759, align 8, !alias.scope !93, !noalias !90
  %761 = getelementptr i64, i64* %753, i64 2
  %762 = bitcast i64* %761 to <2 x i64>*
  %763 = load <2 x i64>, <2 x i64>* %762, align 8, !alias.scope !93, !noalias !90
  %764 = bitcast i64* %753 to <2 x i64>*
  store <2 x i64> %755, <2 x i64>* %764, align 8, !alias.scope !93, !noalias !90
  %765 = bitcast i64* %761 to <2 x i64>*
  store <2 x i64> %758, <2 x i64>* %765, align 8, !alias.scope !93, !noalias !90
  %766 = bitcast i64* %752 to <2 x i64>*
  store <2 x i64> %760, <2 x i64>* %766, align 8, !alias.scope !90
  %767 = bitcast i64* %756 to <2 x i64>*
  store <2 x i64> %763, <2 x i64>* %767, align 8, !alias.scope !90
  %768 = add i64 %733, 8
  %769 = add i64 %734, -2
  %770 = icmp eq i64 %769, 0
  br i1 %770, label %771, label %732, !llvm.loop !95

771:                                              ; preds = %732, %721
  %772 = phi i64 [ 0, %721 ], [ %768, %732 ]
  %773 = icmp eq i64 %728, 0
  br i1 %773, label %791, label %774

774:                                              ; preds = %771
  %775 = getelementptr i64, i64* %696, i64 %772
  %776 = getelementptr i64, i64* %695, i64 %772
  %777 = bitcast i64* %775 to <2 x i64>*
  %778 = load <2 x i64>, <2 x i64>* %777, align 8, !alias.scope !90
  %779 = getelementptr i64, i64* %775, i64 2
  %780 = bitcast i64* %779 to <2 x i64>*
  %781 = load <2 x i64>, <2 x i64>* %780, align 8, !alias.scope !90
  %782 = bitcast i64* %776 to <2 x i64>*
  %783 = load <2 x i64>, <2 x i64>* %782, align 8, !alias.scope !93, !noalias !90
  %784 = getelementptr i64, i64* %776, i64 2
  %785 = bitcast i64* %784 to <2 x i64>*
  %786 = load <2 x i64>, <2 x i64>* %785, align 8, !alias.scope !93, !noalias !90
  %787 = bitcast i64* %776 to <2 x i64>*
  store <2 x i64> %778, <2 x i64>* %787, align 8, !alias.scope !93, !noalias !90
  %788 = bitcast i64* %784 to <2 x i64>*
  store <2 x i64> %781, <2 x i64>* %788, align 8, !alias.scope !93, !noalias !90
  %789 = bitcast i64* %775 to <2 x i64>*
  store <2 x i64> %783, <2 x i64>* %789, align 8, !alias.scope !90
  %790 = bitcast i64* %779 to <2 x i64>*
  store <2 x i64> %786, <2 x i64>* %790, align 8, !alias.scope !90
  br label %791

791:                                              ; preds = %771, %774
  %792 = icmp eq i64 %705, %722
  br i1 %792, label %896, label %793

793:                                              ; preds = %791, %707, %698
  %794 = phi i64* [ %696, %707 ], [ %696, %698 ], [ %723, %791 ]
  %795 = phi i64* [ %695, %707 ], [ %695, %698 ], [ %724, %791 ]
  %796 = ptrtoint i64* %795 to i64
  %797 = getelementptr i64, i64* %27, i64 -1
  %798 = ptrtoint i64* %797 to i64
  %799 = sub i64 %798, %796
  %800 = lshr i64 %799, 3
  %801 = add nuw nsw i64 %800, 1
  %802 = and i64 %801, 3
  %803 = icmp eq i64 %802, 0
  br i1 %803, label %814, label %804

804:                                              ; preds = %793, %804
  %805 = phi i64* [ %811, %804 ], [ %794, %793 ]
  %806 = phi i64* [ %810, %804 ], [ %795, %793 ]
  %807 = phi i64 [ %812, %804 ], [ %802, %793 ]
  %808 = load i64, i64* %805, align 8
  %809 = load i64, i64* %806, align 8
  store i64 %808, i64* %806, align 8
  store i64 %809, i64* %805, align 8
  %810 = getelementptr inbounds i64, i64* %806, i64 1
  %811 = getelementptr inbounds i64, i64* %805, i64 1
  %812 = add i64 %807, -1
  %813 = icmp eq i64 %812, 0
  br i1 %813, label %814, label %804, !llvm.loop !96

814:                                              ; preds = %804, %793
  %815 = phi i64* [ %794, %793 ], [ %811, %804 ]
  %816 = phi i64* [ %795, %793 ], [ %810, %804 ]
  %817 = icmp ult i64 %799, 24
  br i1 %817, label %896, label %818

818:                                              ; preds = %814, %818
  %819 = phi i64* [ %836, %818 ], [ %815, %814 ]
  %820 = phi i64* [ %835, %818 ], [ %816, %814 ]
  %821 = load i64, i64* %819, align 8
  %822 = load i64, i64* %820, align 8
  store i64 %821, i64* %820, align 8
  store i64 %822, i64* %819, align 8
  %823 = getelementptr inbounds i64, i64* %820, i64 1
  %824 = getelementptr inbounds i64, i64* %819, i64 1
  %825 = load i64, i64* %824, align 8
  %826 = load i64, i64* %823, align 8
  store i64 %825, i64* %823, align 8
  store i64 %826, i64* %824, align 8
  %827 = getelementptr inbounds i64, i64* %820, i64 2
  %828 = getelementptr inbounds i64, i64* %819, i64 2
  %829 = load i64, i64* %828, align 8
  %830 = load i64, i64* %827, align 8
  store i64 %829, i64* %827, align 8
  store i64 %830, i64* %828, align 8
  %831 = getelementptr inbounds i64, i64* %820, i64 3
  %832 = getelementptr inbounds i64, i64* %819, i64 3
  %833 = load i64, i64* %832, align 8
  %834 = load i64, i64* %831, align 8
  store i64 %833, i64* %831, align 8
  store i64 %834, i64* %832, align 8
  %835 = getelementptr inbounds i64, i64* %820, i64 4
  %836 = getelementptr inbounds i64, i64* %819, i64 4
  %837 = icmp eq i64* %835, %27
  br i1 %837, label %896, label %818, !llvm.loop !97

838:                                              ; preds = %687, %838
  %839 = phi i64 [ %841, %838 ], [ %691, %687 ]
  %840 = phi i64 [ %839, %838 ], [ %689, %687 ]
  %841 = srem i64 %840, %839
  %842 = icmp eq i64 %841, 0
  br i1 %842, label %843, label %838

843:                                              ; preds = %838
  %844 = icmp eq i64 %839, 0
  br i1 %844, label %872, label %845

845:                                              ; preds = %843
  %846 = getelementptr inbounds i64, i64* %653, i64 %839
  %847 = shl nsw i64 %839, 3
  %848 = add i64 %847, -8
  %849 = and i64 %848, 8
  %850 = icmp eq i64 %849, 0
  br i1 %850, label %851, label %869

851:                                              ; preds = %845
  %852 = getelementptr inbounds i64, i64* %846, i64 -1
  %853 = load i64, i64* %852, align 8
  %854 = getelementptr inbounds i64, i64* %852, i64 %689
  br label %855

855:                                              ; preds = %855, %851
  %856 = phi i64* [ %852, %851 ], [ %857, %855 ]
  %857 = phi i64* [ %854, %851 ], [ %866, %855 ]
  %858 = ptrtoint i64* %857 to i64
  %859 = load i64, i64* %857, align 8
  store i64 %859, i64* %856, align 8
  %860 = sub i64 %648, %858
  %861 = ashr exact i64 %860, 3
  %862 = icmp slt i64 %689, %861
  %863 = getelementptr inbounds i64, i64* %857, i64 %689
  %864 = sub nsw i64 %689, %861
  %865 = getelementptr inbounds i64, i64* %653, i64 %864
  %866 = select i1 %862, i64* %863, i64* %865
  %867 = icmp eq i64* %866, %852
  br i1 %867, label %868, label %855

868:                                              ; preds = %855
  store i64 %853, i64* %857, align 8
  br label %869

869:                                              ; preds = %868, %845
  %870 = phi i64* [ %852, %868 ], [ %846, %845 ]
  %871 = icmp eq i64 %848, 0
  br i1 %871, label %872, label %874

872:                                              ; preds = %869, %925, %843
  %873 = getelementptr inbounds i64, i64* %653, i64 %691
  br label %896

874:                                              ; preds = %869, %925
  %875 = phi i64* [ %893, %925 ], [ %870, %869 ]
  %876 = getelementptr inbounds i64, i64* %875, i64 -1
  %877 = load i64, i64* %876, align 8
  %878 = getelementptr inbounds i64, i64* %876, i64 %689
  br label %879

879:                                              ; preds = %879, %874
  %880 = phi i64* [ %876, %874 ], [ %881, %879 ]
  %881 = phi i64* [ %878, %874 ], [ %890, %879 ]
  %882 = ptrtoint i64* %881 to i64
  %883 = load i64, i64* %881, align 8
  store i64 %883, i64* %880, align 8
  %884 = sub i64 %648, %882
  %885 = ashr exact i64 %884, 3
  %886 = icmp slt i64 %689, %885
  %887 = getelementptr inbounds i64, i64* %881, i64 %689
  %888 = sub nsw i64 %689, %885
  %889 = getelementptr inbounds i64, i64* %653, i64 %888
  %890 = select i1 %886, i64* %887, i64* %889
  %891 = icmp eq i64* %890, %876
  br i1 %891, label %892, label %879

892:                                              ; preds = %879
  store i64 %877, i64* %881, align 8
  %893 = getelementptr inbounds i64, i64* %875, i64 -2
  %894 = load i64, i64* %893, align 8
  %895 = getelementptr inbounds i64, i64* %893, i64 %689
  br label %912

896:                                              ; preds = %814, %818, %693, %791, %646, %658, %669, %685, %872
  %897 = phi i64* [ %653, %658 ], [ %654, %646 ], [ %670, %669 ], [ %686, %685 ], [ %873, %872 ], [ %27, %791 ], [ %27, %693 ], [ %27, %818 ], [ %27, %814 ]
  %898 = add nsw i64 %650, %649
  %899 = add nsw i64 %651, %652
  %900 = icmp slt i64 %898, %899
  br i1 %900, label %901, label %903

901:                                              ; preds = %896
  %902 = ptrtoint i64* %897 to i64
  tail call fastcc void @"_ZNSt3__115__inplace_mergeIRZN6webrtc22SimulcastRateAllocator37DistributeAllocationToSimulcastLayersENS1_8DataRateES3_PNS1_22VideoBitrateAllocationEE3$_1NS_11__wrap_iterIPmEEEEvT0_SB_SB_T_NS_15iterator_traitsISB_E15difference_typeESF_PNSE_10value_typeEl"(i64* %576, i64* %653, i64* %897, %class.anon* dereferenceable(8) %3, i64 %650, i64 %649, i64* %6, i64 %7)
  br label %904

903:                                              ; preds = %896
  tail call fastcc void @"_ZNSt3__115__inplace_mergeIRZN6webrtc22SimulcastRateAllocator37DistributeAllocationToSimulcastLayersENS1_8DataRateES3_PNS1_22VideoBitrateAllocationEE3$_1NS_11__wrap_iterIPmEEEEvT0_SB_SB_T_NS_15iterator_traitsISB_E15difference_typeESF_PNSE_10value_typeEl"(i64* %897, i64* %654, i64* %16, %class.anon* dereferenceable(8) %3, i64 %651, i64 %652, i64* %6, i64 %7)
  br label %904

904:                                              ; preds = %901, %903
  %905 = phi i64 [ %902, %901 ], [ %564, %903 ]
  %906 = phi i64 [ %648, %901 ], [ %647, %903 ]
  %907 = phi i64 [ %652, %901 ], [ %649, %903 ]
  %908 = phi i64 [ %651, %901 ], [ %650, %903 ]
  %909 = phi i64* [ %16, %901 ], [ %897, %903 ]
  %910 = icmp eq i64 %907, 0
  br i1 %910, label %911, label %15

911:                                              ; preds = %904, %24, %570, %329, %518, %486, %490, %465, %8, %611, %362, %313, %308, %300, %169, %38
  ret void

912:                                              ; preds = %912, %892
  %913 = phi i64* [ %893, %892 ], [ %914, %912 ]
  %914 = phi i64* [ %895, %892 ], [ %923, %912 ]
  %915 = ptrtoint i64* %914 to i64
  %916 = load i64, i64* %914, align 8
  store i64 %916, i64* %913, align 8
  %917 = sub i64 %648, %915
  %918 = ashr exact i64 %917, 3
  %919 = icmp slt i64 %689, %918
  %920 = getelementptr inbounds i64, i64* %914, i64 %689
  %921 = sub nsw i64 %689, %918
  %922 = getelementptr inbounds i64, i64* %653, i64 %921
  %923 = select i1 %919, i64* %920, i64* %922
  %924 = icmp eq i64* %923, %893
  br i1 %924, label %925, label %912

925:                                              ; preds = %912
  store i64 %894, i64* %914, align 8
  %926 = icmp eq i64* %893, %653
  br i1 %926, label %872, label %874
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIbNS_9allocatorIbEEE7reserveEm(%"class.std::__1::vector.20"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.std::__1::vector.20", align 16
  %4 = alloca %"class.std::__1::__bit_iterator", align 8
  %5 = alloca %"class.std::__1::__bit_iterator", align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.20", %"class.std::__1::vector.20"* %0, i64 0, i32 2, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = shl i64 %7, 6
  %9 = icmp ult i64 %8, %1
  br i1 %9, label %10, label %49

10:                                               ; preds = %2
  %11 = bitcast %"class.std::__1::vector.20"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #13
  %12 = getelementptr inbounds %"class.std::__1::vector.20", %"class.std::__1::vector.20"* %3, i64 0, i32 1
  %13 = getelementptr inbounds %"class.std::__1::vector.20", %"class.std::__1::vector.20"* %3, i64 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 0, i64 24, i1 false) #13
  %14 = icmp slt i64 %1, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %10
  %16 = bitcast %"class.std::__1::vector.20"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %16) #12
  unreachable

17:                                               ; preds = %10
  %18 = add nsw i64 %1, -1
  %19 = lshr i64 %18, 6
  %20 = add nuw nsw i64 %19, 1
  %21 = shl nuw nsw i64 %20, 3
  %22 = tail call i8* @_Znwm(i64 %21) #14
  %23 = bitcast %"class.std::__1::vector.20"* %3 to i8**
  store i8* %22, i8** %23, align 16
  store i64 0, i64* %12, align 8
  store i64 %20, i64* %13, align 16
  %24 = bitcast %"class.std::__1::vector.20"* %0 to i64*
  %25 = load i64, i64* %24, align 8, !noalias !98
  %26 = bitcast %"class.std::__1::__bit_iterator"* %4 to i64*
  store i64 %25, i64* %26, align 8, !alias.scope !98
  %27 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %4, i64 0, i32 1
  store i32 0, i32* %27, align 8, !alias.scope !98
  %28 = getelementptr inbounds %"class.std::__1::vector.20", %"class.std::__1::vector.20"* %0, i64 0, i32 1
  %29 = load i64, i64* %28, align 8, !noalias !103
  %30 = inttoptr i64 %25 to i64*
  %31 = lshr i64 %29, 6
  %32 = getelementptr inbounds i64, i64* %30, i64 %31
  %33 = trunc i64 %29 to i32
  %34 = and i32 %33, 63
  %35 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %5, i64 0, i32 0
  store i64* %32, i64** %35, align 8, !alias.scope !106
  %36 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %5, i64 0, i32 1
  store i32 %34, i32* %36, align 8, !alias.scope !106
  call void @_ZNSt3__16vectorIbNS_9allocatorIbEEE18__construct_at_endINS_14__bit_iteratorIS3_Lb0ELm0EEEEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES8_S8_(%"class.std::__1::vector.20"* nonnull %3, %"class.std::__1::__bit_iterator"* nonnull %4, %"class.std::__1::__bit_iterator"* nonnull %5)
  %37 = load i64, i64* %24, align 8
  %38 = bitcast %"class.std::__1::vector.20"* %3 to i64*
  %39 = bitcast %"class.std::__1::vector.20"* %3 to <2 x i64>*
  %40 = load <2 x i64>, <2 x i64>* %39, align 16
  store i64 %37, i64* %38, align 16
  %41 = load i64, i64* %28, align 8
  %42 = bitcast %"class.std::__1::vector.20"* %0 to <2 x i64>*
  store <2 x i64> %40, <2 x i64>* %42, align 8
  store i64 %41, i64* %12, align 8
  %43 = load i64, i64* %6, align 8
  %44 = load i64, i64* %13, align 16
  store i64 %44, i64* %6, align 8
  store i64 %43, i64* %13, align 16
  %45 = icmp eq i64 %37, 0
  br i1 %45, label %48, label %46

46:                                               ; preds = %17
  %47 = inttoptr i64 %37 to i8*
  call void @_ZdlPv(i8* %47) #14
  br label %48

48:                                               ; preds = %17, %46
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #13
  br label %49

49:                                               ; preds = %48, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIbNS_9allocatorIbEEE18__construct_at_endINS_14__bit_iteratorIS3_Lb0ELm0EEEEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES8_S8_(%"class.std::__1::vector.20"*, %"class.std::__1::__bit_iterator"*, %"class.std::__1::__bit_iterator"*) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.std::__1::__bit_iterator", align 8
  %5 = alloca %"class.std::__1::__bit_iterator", align 8
  %6 = alloca %"class.std::__1::__bit_iterator", align 8
  %7 = alloca %"class.std::__1::__bit_iterator", align 8
  %8 = getelementptr inbounds %"class.std::__1::vector.20", %"class.std::__1::vector.20"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::__bit_iterator"* %1 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %1, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = bitcast %"class.std::__1::__bit_iterator"* %2 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %2, i64 0, i32 1
  %17 = load i32, i32* %16, align 8
  %18 = sub i64 %15, %11
  %19 = shl i64 %18, 3
  %20 = zext i32 %17 to i64
  %21 = zext i32 %13 to i64
  %22 = sub i64 %9, %21
  %23 = add i64 %22, %20
  %24 = add i64 %23, %19
  store i64 %24, i64* %8, align 8
  %25 = icmp eq i64 %9, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %3
  %27 = add i64 %9, -1
  %28 = add i64 %24, -1
  %29 = xor i64 %28, %27
  %30 = icmp ugt i64 %29, 63
  br i1 %30, label %31, label %39

31:                                               ; preds = %26, %3
  %32 = icmp ult i64 %24, 65
  %33 = getelementptr inbounds %"class.std::__1::vector.20", %"class.std::__1::vector.20"* %0, i64 0, i32 0
  %34 = load i64*, i64** %33, align 8
  %35 = add i64 %24, -1
  %36 = lshr i64 %35, 6
  %37 = getelementptr inbounds i64, i64* %34, i64 %36
  %38 = select i1 %32, i64* %34, i64* %37
  store i64 0, i64* %38, align 8
  br label %39

39:                                               ; preds = %31, %26
  %40 = load i64, i64* %10, align 8
  %41 = load i32, i32* %12, align 8
  %42 = load i64, i64* %14, align 8
  %43 = load i32, i32* %16, align 8
  %44 = getelementptr inbounds %"class.std::__1::vector.20", %"class.std::__1::vector.20"* %0, i64 0, i32 0
  %45 = load i64*, i64** %44, align 8, !noalias !109
  %46 = lshr i64 %9, 6
  %47 = getelementptr inbounds i64, i64* %45, i64 %46
  %48 = trunc i64 %9 to i32
  %49 = and i32 %48, 63
  %50 = ptrtoint i64* %47 to i64
  %51 = bitcast %"class.std::__1::__bit_iterator"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %51) #13
  %52 = bitcast %"class.std::__1::__bit_iterator"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %52)
  %53 = bitcast %"class.std::__1::__bit_iterator"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %53)
  %54 = bitcast %"class.std::__1::__bit_iterator"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %54)
  %55 = icmp eq i32 %41, %49
  br i1 %55, label %56, label %123

56:                                               ; preds = %39
  %57 = sub i64 %42, %40
  %58 = shl i64 %57, 3
  %59 = zext i32 %43 to i64
  %60 = zext i32 %41 to i64
  %61 = sub nsw i64 %59, %60
  %62 = add i64 %61, %58
  %63 = icmp sgt i64 %62, 0
  %64 = inttoptr i64 %40 to i64*
  br i1 %63, label %65, label %118

65:                                               ; preds = %56
  %66 = inttoptr i64 %40 to i8*
  %67 = icmp eq i32 %41, 0
  br i1 %67, label %92, label %68

68:                                               ; preds = %65
  %69 = sub i32 64, %41
  %70 = zext i32 %69 to i64
  %71 = icmp slt i64 %62, %70
  %72 = select i1 %71, i64 %62, i64 %70
  %73 = sub nsw i64 %62, %72
  %74 = shl i64 -1, %60
  %75 = sub nsw i64 %70, %72
  %76 = lshr i64 -1, %75
  %77 = and i64 %76, %74
  %78 = load i64, i64* %64, align 8, !noalias !112
  %79 = and i64 %78, %77
  %80 = xor i64 %77, -1
  %81 = load i64, i64* %47, align 8, !noalias !112
  %82 = and i64 %81, %80
  %83 = or i64 %82, %79
  store i64 %83, i64* %47, align 8, !noalias !112
  %84 = add nuw nsw i64 %72, %60
  %85 = sdiv i64 %84, 64
  %86 = getelementptr inbounds i64, i64* %47, i64 %85
  %87 = ptrtoint i64* %86 to i64
  %88 = srem i64 %84, 64
  %89 = trunc i64 %88 to i32
  %90 = getelementptr inbounds i64, i64* %64, i64 1
  %91 = bitcast i64* %90 to i8*
  br label %92

92:                                               ; preds = %68, %65
  %93 = phi i64* [ %64, %65 ], [ %90, %68 ]
  %94 = phi i32 [ 0, %65 ], [ %89, %68 ]
  %95 = phi i64 [ %50, %65 ], [ %87, %68 ]
  %96 = phi i8* [ %66, %65 ], [ %91, %68 ]
  %97 = phi i64 [ %62, %65 ], [ %73, %68 ]
  %98 = sdiv i64 %97, 64
  %99 = inttoptr i64 %95 to i8*
  %100 = shl nsw i64 %98, 3
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %99, i8* align 8 %96, i64 %100, i1 false) #13, !noalias !112
  %101 = shl nsw i64 %98, 6
  %102 = sub i64 %97, %101
  %103 = inttoptr i64 %95 to i64*
  %104 = getelementptr inbounds i64, i64* %103, i64 %98
  %105 = ptrtoint i64* %104 to i64
  %106 = icmp sgt i64 %102, 0
  br i1 %106, label %107, label %118

107:                                              ; preds = %92
  %108 = getelementptr inbounds i64, i64* %93, i64 %98
  %109 = sub nsw i64 64, %102
  %110 = lshr i64 -1, %109
  %111 = load i64, i64* %108, align 8, !noalias !112
  %112 = and i64 %111, %110
  %113 = xor i64 %110, -1
  %114 = load i64, i64* %104, align 8, !noalias !112
  %115 = and i64 %114, %113
  %116 = or i64 %115, %112
  store i64 %116, i64* %104, align 8, !noalias !112
  %117 = trunc i64 %102 to i32
  br label %118

118:                                              ; preds = %107, %92, %56
  %119 = phi i32 [ %117, %107 ], [ %94, %92 ], [ %41, %56 ]
  %120 = phi i64 [ %105, %107 ], [ %105, %92 ], [ %50, %56 ]
  %121 = bitcast %"class.std::__1::__bit_iterator"* %7 to i64*
  store i64 %120, i64* %121, align 8, !alias.scope !115
  %122 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %7, i64 0, i32 1
  store i32 %119, i32* %122, align 8, !alias.scope !115
  br label %130

123:                                              ; preds = %39
  %124 = bitcast %"class.std::__1::__bit_iterator"* %4 to i64*
  store i64 %40, i64* %124, align 8, !noalias !118
  %125 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %4, i64 0, i32 1
  store i32 %41, i32* %125, align 8, !noalias !118
  %126 = bitcast %"class.std::__1::__bit_iterator"* %5 to i64*
  store i64 %42, i64* %126, align 8, !noalias !118
  %127 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %5, i64 0, i32 1
  store i32 %43, i32* %127, align 8, !noalias !118
  %128 = bitcast %"class.std::__1::__bit_iterator"* %6 to i64*
  store i64 %50, i64* %128, align 8, !noalias !118
  %129 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %6, i64 0, i32 1
  store i32 %49, i32* %129, align 8, !noalias !118
  call void @_ZNSt3__116__copy_unalignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_(%"class.std::__1::__bit_iterator"* nonnull sret %7, %"class.std::__1::__bit_iterator"* nonnull %4, %"class.std::__1::__bit_iterator"* nonnull %5, %"class.std::__1::__bit_iterator"* nonnull %6) #13
  br label %130

130:                                              ; preds = %118, %123
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %52)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %53)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %54)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %51) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__116__copy_unalignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_(%"class.std::__1::__bit_iterator"* noalias sret, %"class.std::__1::__bit_iterator"*, %"class.std::__1::__bit_iterator"*, %"class.std::__1::__bit_iterator"*) local_unnamed_addr #0 comdat {
  %5 = bitcast %"class.std::__1::__bit_iterator"* %2 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::__bit_iterator"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = shl i64 %9, 3
  %11 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %2, i64 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = zext i32 %12 to i64
  %14 = add nsw i64 %10, %13
  %15 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %1, i64 0, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = zext i32 %16 to i64
  %18 = sub i64 %14, %17
  %19 = icmp sgt i64 %18, 0
  %20 = inttoptr i64 %8 to i64*
  br i1 %19, label %21, label %185

21:                                               ; preds = %4
  %22 = icmp eq i32 %16, 0
  br i1 %22, label %93, label %23

23:                                               ; preds = %21
  %24 = sub i32 64, %16
  %25 = zext i32 %24 to i64
  %26 = icmp slt i64 %18, %25
  %27 = select i1 %26, i64 %18, i64 %25
  %28 = sub nsw i64 %18, %27
  %29 = shl i64 -1, %17
  %30 = sub nsw i64 %25, %27
  %31 = lshr i64 -1, %30
  %32 = and i64 %31, %29
  %33 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %1, i64 0, i32 0
  %34 = load i64, i64* %20, align 8
  %35 = and i64 %32, %34
  %36 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 1
  %37 = load i32, i32* %36, align 8
  %38 = sub i32 64, %37
  %39 = zext i32 %38 to i64
  %40 = icmp ugt i64 %27, %39
  %41 = select i1 %40, i64 %39, i64 %27
  %42 = zext i32 %37 to i64
  %43 = shl i64 -1, %42
  %44 = sub nsw i64 %39, %41
  %45 = lshr i64 -1, %44
  %46 = and i64 %45, %43
  %47 = xor i64 %46, -1
  %48 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 0
  %49 = load i64*, i64** %48, align 8
  %50 = load i64, i64* %49, align 8
  %51 = and i64 %50, %47
  store i64 %51, i64* %49, align 8
  %52 = load i32, i32* %36, align 8
  %53 = load i32, i32* %15, align 8
  %54 = icmp ugt i32 %52, %53
  %55 = sub i32 %53, %52
  %56 = zext i32 %55 to i64
  %57 = lshr i64 %35, %56
  %58 = sub i32 %52, %53
  %59 = zext i32 %58 to i64
  %60 = shl i64 %35, %59
  %61 = select i1 %54, i64 %60, i64 %57
  %62 = load i64*, i64** %48, align 8
  %63 = load i64, i64* %62, align 8
  %64 = or i64 %63, %61
  store i64 %64, i64* %62, align 8
  %65 = load i32, i32* %36, align 8
  %66 = zext i32 %65 to i64
  %67 = add nuw nsw i64 %41, %66
  %68 = lshr i64 %67, 6
  %69 = load i64*, i64** %48, align 8
  %70 = getelementptr inbounds i64, i64* %69, i64 %68
  store i64* %70, i64** %48, align 8
  %71 = trunc i64 %41 to i32
  %72 = add i32 %65, %71
  %73 = and i32 %72, 63
  store i32 %73, i32* %36, align 8
  %74 = sub i64 %27, %41
  %75 = icmp sgt i64 %74, 0
  br i1 %75, label %76, label %90

76:                                               ; preds = %23
  %77 = sub nsw i64 64, %74
  %78 = lshr i64 -1, %77
  %79 = xor i64 %78, -1
  %80 = load i64, i64* %70, align 8
  %81 = and i64 %80, %79
  store i64 %81, i64* %70, align 8
  %82 = load i32, i32* %15, align 8
  %83 = zext i32 %82 to i64
  %84 = add nuw nsw i64 %41, %83
  %85 = lshr i64 %35, %84
  %86 = load i64*, i64** %48, align 8
  %87 = load i64, i64* %86, align 8
  %88 = or i64 %85, %87
  store i64 %88, i64* %86, align 8
  %89 = trunc i64 %74 to i32
  store i32 %89, i32* %36, align 8
  br label %90

90:                                               ; preds = %76, %23
  %91 = load i64*, i64** %33, align 8
  %92 = getelementptr inbounds i64, i64* %91, i64 1
  store i64* %92, i64** %33, align 8
  br label %93

93:                                               ; preds = %21, %90
  %94 = phi i64* [ %20, %21 ], [ %92, %90 ]
  %95 = phi i64 [ %18, %21 ], [ %28, %90 ]
  %96 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 1
  %97 = load i32, i32* %96, align 8
  %98 = sub i32 64, %97
  %99 = zext i32 %97 to i64
  %100 = shl i64 -1, %99
  %101 = icmp sgt i64 %95, 63
  br i1 %101, label %102, label %134

102:                                              ; preds = %93
  %103 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %1, i64 0, i32 0
  %104 = xor i64 %100, -1
  %105 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 0
  %106 = zext i32 %98 to i64
  br label %107

107:                                              ; preds = %102, %107
  %108 = phi i64* [ %94, %102 ], [ %130, %107 ]
  %109 = phi i64 [ %95, %102 ], [ %128, %107 ]
  %110 = load i64, i64* %108, align 8
  %111 = load i64*, i64** %105, align 8
  %112 = load i64, i64* %111, align 8
  %113 = and i64 %112, %104
  store i64 %113, i64* %111, align 8
  %114 = load i32, i32* %96, align 8
  %115 = zext i32 %114 to i64
  %116 = shl i64 %110, %115
  %117 = load i64*, i64** %105, align 8
  %118 = load i64, i64* %117, align 8
  %119 = or i64 %118, %116
  store i64 %119, i64* %117, align 8
  %120 = load i64*, i64** %105, align 8
  %121 = getelementptr inbounds i64, i64* %120, i64 1
  store i64* %121, i64** %105, align 8
  %122 = load i64, i64* %121, align 8
  %123 = and i64 %122, %100
  store i64 %123, i64* %121, align 8
  %124 = lshr i64 %110, %106
  %125 = load i64*, i64** %105, align 8
  %126 = load i64, i64* %125, align 8
  %127 = or i64 %126, %124
  store i64 %127, i64* %125, align 8
  %128 = add nsw i64 %109, -64
  %129 = load i64*, i64** %103, align 8
  %130 = getelementptr inbounds i64, i64* %129, i64 1
  store i64* %130, i64** %103, align 8
  %131 = icmp sgt i64 %128, 63
  br i1 %131, label %107, label %132

132:                                              ; preds = %107
  %133 = and i64 %95, 63
  br label %134

134:                                              ; preds = %132, %93
  %135 = phi i64* [ %94, %93 ], [ %130, %132 ]
  %136 = phi i64 [ %95, %93 ], [ %133, %132 ]
  %137 = icmp sgt i64 %136, 0
  br i1 %137, label %138, label %185

138:                                              ; preds = %134
  %139 = sub nuw nsw i64 64, %136
  %140 = lshr i64 -1, %139
  %141 = load i64, i64* %135, align 8
  %142 = and i64 %141, %140
  %143 = zext i32 %98 to i64
  %144 = icmp sgt i64 %136, %143
  %145 = select i1 %144, i64 %143, i64 %136
  %146 = load i32, i32* %96, align 8
  %147 = zext i32 %146 to i64
  %148 = shl i64 -1, %147
  %149 = sub nsw i64 %143, %145
  %150 = lshr i64 -1, %149
  %151 = and i64 %148, %150
  %152 = xor i64 %151, -1
  %153 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 0
  %154 = load i64*, i64** %153, align 8
  %155 = load i64, i64* %154, align 8
  %156 = and i64 %155, %152
  store i64 %156, i64* %154, align 8
  %157 = load i32, i32* %96, align 8
  %158 = zext i32 %157 to i64
  %159 = shl i64 %142, %158
  %160 = load i64*, i64** %153, align 8
  %161 = load i64, i64* %160, align 8
  %162 = or i64 %161, %159
  store i64 %162, i64* %160, align 8
  %163 = load i32, i32* %96, align 8
  %164 = zext i32 %163 to i64
  %165 = add nuw nsw i64 %145, %164
  %166 = lshr i64 %165, 6
  %167 = load i64*, i64** %153, align 8
  %168 = getelementptr inbounds i64, i64* %167, i64 %166
  store i64* %168, i64** %153, align 8
  %169 = trunc i64 %145 to i32
  %170 = add i32 %163, %169
  %171 = and i32 %170, 63
  store i32 %171, i32* %96, align 8
  %172 = sub nsw i64 %136, %145
  %173 = icmp sgt i64 %172, 0
  br i1 %173, label %174, label %185

174:                                              ; preds = %138
  %175 = sub nuw nsw i64 64, %172
  %176 = lshr i64 -1, %175
  %177 = xor i64 %176, -1
  %178 = load i64, i64* %168, align 8
  %179 = and i64 %178, %177
  store i64 %179, i64* %168, align 8
  %180 = lshr i64 %142, %145
  %181 = load i64*, i64** %153, align 8
  %182 = load i64, i64* %181, align 8
  %183 = or i64 %182, %180
  store i64 %183, i64* %181, align 8
  %184 = trunc i64 %172 to i32
  store i32 %184, i32* %96, align 8
  br label %185

185:                                              ; preds = %134, %174, %138, %4
  %186 = bitcast %"class.std::__1::__bit_iterator"* %3 to i64*
  %187 = load i64, i64* %186, align 8
  %188 = bitcast %"class.std::__1::__bit_iterator"* %0 to i64*
  store i64 %187, i64* %188, align 8
  %189 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %0, i64 0, i32 1
  %190 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 1
  %191 = load i32, i32* %190, align 8
  store i32 %191, i32* %189, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector.37"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.37", %"class.std::__1::vector.37"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.37", %"class.std::__1::vector.37"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #13
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.37"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.37"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #12
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #12
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #14
  %54 = bitcast i8* %53 to i32*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i32* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %33
  %59 = getelementptr inbounds i32, i32* %57, i64 %56
  %60 = getelementptr inbounds i32, i32* %58, i64 %1
  %61 = bitcast i32* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #13
  %63 = ptrtoint i32* %59 to i64
  %64 = ptrtoint i32* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.37", %"class.std::__1::vector.37"* %0, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i32* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i32, i32* %58, i64 %71
  %73 = ptrtoint i32* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i32* %72 to i8*
  %77 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #13
  %78 = load i32*, i32** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i32* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #14
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind }
attributes #13 = { nounwind }
attributes #14 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.isvectorized", i32 1}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.unroll.disable"}
!7 = distinct !{!7, !8, !4}
!8 = !{!"llvm.loop.unroll.runtime.disable"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZNK6webrtc22SimulcastRateAllocator34ScreenshareTemporalLayerAllocationEiii: argument 0"}
!11 = distinct !{!11, !"_ZNK6webrtc22SimulcastRateAllocator34ScreenshareTemporalLayerAllocationEiii"}
!12 = !{!13, !15}
!13 = distinct !{!13, !14, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm: argument 0"}
!14 = distinct !{!14, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm"}
!15 = distinct !{!15, !16, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE3endEv: argument 0"}
!16 = distinct !{!16, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE3endEv"}
!17 = !{!18, !20}
!18 = distinct !{!18, !19, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm: argument 0"}
!19 = distinct !{!19, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm"}
!20 = distinct !{!20, !21, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE5beginEv: argument 0"}
!21 = distinct !{!21, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE5beginEv"}
!22 = !{!23}
!23 = distinct !{!23, !24, !"_ZNSt3__114__copy_alignedINS_6vectorIbNS_9allocatorIbEEEELb1EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_: argument 0"}
!24 = distinct !{!24, !"_ZNSt3__114__copy_alignedINS_6vectorIbNS_9allocatorIbEEEELb1EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_"}
!25 = !{!23, !26}
!26 = distinct !{!26, !27, !"_ZNSt3__14copyINS_6vectorIbNS_9allocatorIbEEEELb1EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_: argument 0"}
!27 = distinct !{!27, !"_ZNSt3__14copyINS_6vectorIbNS_9allocatorIbEEEELb1EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_"}
!28 = distinct !{!28, !6}
!29 = !{!30}
!30 = distinct !{!30, !31}
!31 = distinct !{!31, !"LVerDomain"}
!32 = !{!33}
!33 = distinct !{!33, !31}
!34 = distinct !{!34, !4}
!35 = distinct !{!35, !6}
!36 = !{!37}
!37 = distinct !{!37, !38}
!38 = distinct !{!38, !"LVerDomain"}
!39 = !{!40}
!40 = distinct !{!40, !38}
!41 = distinct !{!41, !4}
!42 = distinct !{!42, !6}
!43 = distinct !{!43, !6}
!44 = distinct !{!44, !4}
!45 = distinct !{!45, !4}
!46 = !{!47}
!47 = distinct !{!47, !48}
!48 = distinct !{!48, !"LVerDomain"}
!49 = !{!50}
!50 = distinct !{!50, !48}
!51 = distinct !{!51, !4}
!52 = distinct !{!52, !6}
!53 = distinct !{!53, !6}
!54 = distinct !{!54, !4}
!55 = !{!56}
!56 = distinct !{!56, !57}
!57 = distinct !{!57, !"LVerDomain"}
!58 = !{!59}
!59 = distinct !{!59, !57}
!60 = distinct !{!60, !4}
!61 = distinct !{!61, !6}
!62 = distinct !{!62, !6}
!63 = distinct !{!63, !4}
!64 = distinct !{!64, !6}
!65 = !{!66}
!66 = distinct !{!66, !67}
!67 = distinct !{!67, !"LVerDomain"}
!68 = !{!69}
!69 = distinct !{!69, !67}
!70 = distinct !{!70, !4}
!71 = distinct !{!71, !6}
!72 = distinct !{!72, !6}
!73 = !{!74}
!74 = distinct !{!74, !75}
!75 = distinct !{!75, !"LVerDomain"}
!76 = !{!77}
!77 = distinct !{!77, !75}
!78 = distinct !{!78, !4}
!79 = distinct !{!79, !6}
!80 = distinct !{!80, !4}
!81 = !{!82}
!82 = distinct !{!82, !83}
!83 = distinct !{!83, !"LVerDomain"}
!84 = !{!85}
!85 = distinct !{!85, !83}
!86 = distinct !{!86, !4}
!87 = distinct !{!87, !6}
!88 = distinct !{!88, !4}
!89 = distinct !{!89, !4}
!90 = !{!91}
!91 = distinct !{!91, !92}
!92 = distinct !{!92, !"LVerDomain"}
!93 = !{!94}
!94 = distinct !{!94, !92}
!95 = distinct !{!95, !4}
!96 = distinct !{!96, !6}
!97 = distinct !{!97, !4}
!98 = !{!99, !101}
!99 = distinct !{!99, !100, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm: argument 0"}
!100 = distinct !{!100, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm"}
!101 = distinct !{!101, !102, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE5beginEv: argument 0"}
!102 = distinct !{!102, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE5beginEv"}
!103 = !{!104}
!104 = distinct !{!104, !105, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE3endEv: argument 0"}
!105 = distinct !{!105, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE3endEv"}
!106 = !{!107, !104}
!107 = distinct !{!107, !108, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm: argument 0"}
!108 = distinct !{!108, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm"}
!109 = !{!110}
!110 = distinct !{!110, !111, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm: argument 0"}
!111 = distinct !{!111, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm"}
!112 = !{!113}
!113 = distinct !{!113, !114, !"_ZNSt3__114__copy_alignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_: argument 0"}
!114 = distinct !{!114, !"_ZNSt3__114__copy_alignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_"}
!115 = !{!113, !116}
!116 = distinct !{!116, !117, !"_ZNSt3__14copyINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_: argument 0"}
!117 = distinct !{!117, !"_ZNSt3__14copyINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_"}
!118 = !{!116}
