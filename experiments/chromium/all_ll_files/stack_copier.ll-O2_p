; ModuleID = '../../base/profiler/stack_copier.cc'
source_filename = "../../base/profiler/stack_copier.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::StackCopier" = type { i32 (...)** }

@_ZTVN4base11StackCopierE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.base::StackCopier"*)* @_ZN4base11StackCopierD2Ev to i8*), i8* bitcast (void (%"class.base::StackCopier"*)* @_ZN4base11StackCopierD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8

@_ZN4base11StackCopierD1Ev = hidden unnamed_addr alias void (%"class.base::StackCopier"*), void (%"class.base::StackCopier"*)* @_ZN4base11StackCopierD2Ev

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN4base11StackCopierD2Ev(%"class.base::StackCopier"* nocapture) unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN4base11StackCopierD0Ev(%"class.base::StackCopier"* nocapture readnone) unnamed_addr #1 align 2 {
  tail call void @llvm.trap() #4
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZN4base11StackCopier31RewritePointerIfInOriginalStackEPKhPKmS2_m(i8*, i64*, i8*, i64) local_unnamed_addr #0 align 2 {
  %5 = ptrtoint i8* %0 to i64
  %6 = ptrtoint i8* %2 to i64
  %7 = icmp ule i64 %5, %3
  %8 = ptrtoint i64* %1 to i64
  %9 = icmp ugt i64 %8, %3
  %10 = and i1 %7, %9
  %11 = sub i64 %3, %5
  %12 = add i64 %11, %6
  %13 = select i1 %10, i64 %12, i64 %3
  ret i64 %13
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i8* @_ZN4base11StackCopier35CopyStackContentsAndRewritePointersEPKhPKmiPm(i8*, i64*, i32, i64*) local_unnamed_addr #3 align 2 {
  %5 = bitcast i64* %3 to i8*
  %6 = bitcast i64* %1 to i8*
  %7 = ptrtoint i8* %0 to i64
  %8 = add i64 %7, 7
  %9 = and i64 %8, -8
  %10 = inttoptr i64 %9 to i8*
  %11 = sext i32 %2 to i64
  %12 = add nsw i64 %11, -1
  %13 = and i64 %12, %7
  %14 = getelementptr inbounds i8, i8* %5, i64 %13
  %15 = icmp ugt i8* %10, %0
  br i1 %15, label %16, label %119

16:                                               ; preds = %4
  %17 = sub i64 %9, %7
  %18 = icmp ult i64 %17, 32
  br i1 %18, label %109, label %19

19:                                               ; preds = %16
  %20 = getelementptr i8, i8* %5, i64 %13
  %21 = sub i64 %13, %7
  %22 = getelementptr i8, i8* %5, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = getelementptr i8, i8* %10, i64 %23
  %25 = icmp ult i8* %20, %10
  %26 = icmp ugt i8* %24, %0
  %27 = and i1 %25, %26
  br i1 %27, label %109, label %28

28:                                               ; preds = %19
  %29 = and i64 %17, -32
  %30 = getelementptr i8, i8* %14, i64 %29
  %31 = getelementptr i8, i8* %0, i64 %29
  %32 = add i64 %29, -32
  %33 = lshr exact i64 %32, 5
  %34 = add nuw nsw i64 %33, 1
  %35 = and i64 %34, 3
  %36 = icmp ult i64 %32, 96
  br i1 %36, label %88, label %37

37:                                               ; preds = %28
  %38 = sub nsw i64 %34, %35
  br label %39

39:                                               ; preds = %39, %37
  %40 = phi i64 [ 0, %37 ], [ %85, %39 ]
  %41 = phi i64 [ %38, %37 ], [ %86, %39 ]
  %42 = getelementptr i8, i8* %14, i64 %40
  %43 = getelementptr i8, i8* %0, i64 %40
  %44 = bitcast i8* %43 to <16 x i8>*
  %45 = load <16 x i8>, <16 x i8>* %44, align 1, !alias.scope !2
  %46 = getelementptr i8, i8* %43, i64 16
  %47 = bitcast i8* %46 to <16 x i8>*
  %48 = load <16 x i8>, <16 x i8>* %47, align 1, !alias.scope !2
  %49 = bitcast i8* %42 to <16 x i8>*
  store <16 x i8> %45, <16 x i8>* %49, align 1, !alias.scope !5, !noalias !2
  %50 = getelementptr i8, i8* %42, i64 16
  %51 = bitcast i8* %50 to <16 x i8>*
  store <16 x i8> %48, <16 x i8>* %51, align 1, !alias.scope !5, !noalias !2
  %52 = or i64 %40, 32
  %53 = getelementptr i8, i8* %14, i64 %52
  %54 = getelementptr i8, i8* %0, i64 %52
  %55 = bitcast i8* %54 to <16 x i8>*
  %56 = load <16 x i8>, <16 x i8>* %55, align 1, !alias.scope !2
  %57 = getelementptr i8, i8* %54, i64 16
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1, !alias.scope !2
  %60 = bitcast i8* %53 to <16 x i8>*
  store <16 x i8> %56, <16 x i8>* %60, align 1, !alias.scope !5, !noalias !2
  %61 = getelementptr i8, i8* %53, i64 16
  %62 = bitcast i8* %61 to <16 x i8>*
  store <16 x i8> %59, <16 x i8>* %62, align 1, !alias.scope !5, !noalias !2
  %63 = or i64 %40, 64
  %64 = getelementptr i8, i8* %14, i64 %63
  %65 = getelementptr i8, i8* %0, i64 %63
  %66 = bitcast i8* %65 to <16 x i8>*
  %67 = load <16 x i8>, <16 x i8>* %66, align 1, !alias.scope !2
  %68 = getelementptr i8, i8* %65, i64 16
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1, !alias.scope !2
  %71 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> %67, <16 x i8>* %71, align 1, !alias.scope !5, !noalias !2
  %72 = getelementptr i8, i8* %64, i64 16
  %73 = bitcast i8* %72 to <16 x i8>*
  store <16 x i8> %70, <16 x i8>* %73, align 1, !alias.scope !5, !noalias !2
  %74 = or i64 %40, 96
  %75 = getelementptr i8, i8* %14, i64 %74
  %76 = getelementptr i8, i8* %0, i64 %74
  %77 = bitcast i8* %76 to <16 x i8>*
  %78 = load <16 x i8>, <16 x i8>* %77, align 1, !alias.scope !2
  %79 = getelementptr i8, i8* %76, i64 16
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1, !alias.scope !2
  %82 = bitcast i8* %75 to <16 x i8>*
  store <16 x i8> %78, <16 x i8>* %82, align 1, !alias.scope !5, !noalias !2
  %83 = getelementptr i8, i8* %75, i64 16
  %84 = bitcast i8* %83 to <16 x i8>*
  store <16 x i8> %81, <16 x i8>* %84, align 1, !alias.scope !5, !noalias !2
  %85 = add i64 %40, 128
  %86 = add i64 %41, -4
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %39, !llvm.loop !7

88:                                               ; preds = %39, %28
  %89 = phi i64 [ 0, %28 ], [ %85, %39 ]
  %90 = icmp eq i64 %35, 0
  br i1 %90, label %107, label %91

91:                                               ; preds = %88, %91
  %92 = phi i64 [ %104, %91 ], [ %89, %88 ]
  %93 = phi i64 [ %105, %91 ], [ %35, %88 ]
  %94 = getelementptr i8, i8* %14, i64 %92
  %95 = getelementptr i8, i8* %0, i64 %92
  %96 = bitcast i8* %95 to <16 x i8>*
  %97 = load <16 x i8>, <16 x i8>* %96, align 1, !alias.scope !2
  %98 = getelementptr i8, i8* %95, i64 16
  %99 = bitcast i8* %98 to <16 x i8>*
  %100 = load <16 x i8>, <16 x i8>* %99, align 1, !alias.scope !2
  %101 = bitcast i8* %94 to <16 x i8>*
  store <16 x i8> %97, <16 x i8>* %101, align 1, !alias.scope !5, !noalias !2
  %102 = getelementptr i8, i8* %94, i64 16
  %103 = bitcast i8* %102 to <16 x i8>*
  store <16 x i8> %100, <16 x i8>* %103, align 1, !alias.scope !5, !noalias !2
  %104 = add i64 %92, 32
  %105 = add i64 %93, -1
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %107, label %91, !llvm.loop !9

107:                                              ; preds = %91, %88
  %108 = icmp eq i64 %17, %29
  br i1 %108, label %119, label %109

109:                                              ; preds = %107, %19, %16
  %110 = phi i8* [ %14, %19 ], [ %14, %16 ], [ %30, %107 ]
  %111 = phi i8* [ %0, %19 ], [ %0, %16 ], [ %31, %107 ]
  br label %112

112:                                              ; preds = %109, %112
  %113 = phi i8* [ %117, %112 ], [ %110, %109 ]
  %114 = phi i8* [ %116, %112 ], [ %111, %109 ]
  %115 = load i8, i8* %114, align 1
  store i8 %115, i8* %113, align 1
  %116 = getelementptr inbounds i8, i8* %114, i64 1
  %117 = getelementptr inbounds i8, i8* %113, i64 1
  %118 = icmp eq i8* %116, %10
  br i1 %118, label %119, label %112, !llvm.loop !11

119:                                              ; preds = %112, %107, %4
  %120 = phi i8* [ %0, %4 ], [ %10, %107 ], [ %10, %112 ]
  %121 = phi i8* [ %14, %4 ], [ %30, %107 ], [ %117, %112 ]
  %122 = bitcast i8* %120 to i64*
  %123 = icmp ult i64* %122, %1
  br i1 %123, label %124, label %170

124:                                              ; preds = %119
  %125 = ptrtoint i8* %120 to i64
  %126 = bitcast i8* %121 to i64*
  %127 = ptrtoint i8* %14 to i64
  %128 = ptrtoint i64* %1 to i64
  %129 = sub i64 %127, %7
  %130 = xor i64 %125, -1
  %131 = getelementptr i8, i8* %6, i64 %130
  %132 = ptrtoint i8* %131 to i64
  %133 = and i64 %132, 8
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %135, label %146

135:                                              ; preds = %124
  %136 = load i64, i64* %122, align 8
  %137 = icmp uge i64 %136, %7
  %138 = icmp ult i64 %136, %128
  %139 = and i1 %137, %138
  %140 = select i1 %139, i64 %129, i64 0
  %141 = add i64 %136, %140
  store i64 %141, i64* %126, align 8
  %142 = getelementptr inbounds i8, i8* %120, i64 8
  %143 = bitcast i8* %142 to i64*
  %144 = getelementptr inbounds i8, i8* %121, i64 8
  %145 = bitcast i8* %144 to i64*
  br label %146

146:                                              ; preds = %135, %124
  %147 = phi i64* [ %126, %124 ], [ %145, %135 ]
  %148 = phi i64* [ %122, %124 ], [ %143, %135 ]
  %149 = icmp ult i8* %131, inttoptr (i64 8 to i8*)
  br i1 %149, label %170, label %150

150:                                              ; preds = %146, %150
  %151 = phi i64* [ %168, %150 ], [ %147, %146 ]
  %152 = phi i64* [ %167, %150 ], [ %148, %146 ]
  %153 = load i64, i64* %152, align 8
  %154 = icmp uge i64 %153, %7
  %155 = icmp ult i64 %153, %128
  %156 = and i1 %154, %155
  %157 = select i1 %156, i64 %129, i64 0
  %158 = add i64 %153, %157
  store i64 %158, i64* %151, align 8
  %159 = getelementptr inbounds i64, i64* %152, i64 1
  %160 = getelementptr inbounds i64, i64* %151, i64 1
  %161 = load i64, i64* %159, align 8
  %162 = icmp uge i64 %161, %7
  %163 = icmp ult i64 %161, %128
  %164 = and i1 %162, %163
  %165 = select i1 %164, i64 %129, i64 0
  %166 = add i64 %161, %165
  store i64 %166, i64* %160, align 8
  %167 = getelementptr inbounds i64, i64* %152, i64 2
  %168 = getelementptr inbounds i64, i64* %151, i64 2
  %169 = icmp ult i64* %167, %1
  br i1 %169, label %150, label %170

170:                                              ; preds = %146, %150, %119
  ret i8* %14
}

declare void @__cxa_pure_virtual() unnamed_addr

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { cold noreturn nounwind }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
