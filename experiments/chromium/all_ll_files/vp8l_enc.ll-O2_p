; ModuleID = '../../third_party/libwebp/src/enc/vp8l_enc.c'
source_filename = "../../third_party/libwebp/src/enc/vp8l_enc.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.WebPAuxStats = type { i32, [5 x float], [3 x i32], [2 x i32], [3 x [4 x i32]], [4 x i32], [4 x i32], [4 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32] }
%struct.VP8LPrefixCode = type { i8, i8 }
%struct.WebPConfig = type { i32, float, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.WebPPicture = type { i32, i32, i32, i32, i8*, i8*, i8*, i32, i32, i8*, i32, [2 x i32], i32*, i32, [3 x i32], i32 (i8*, i64, %struct.WebPPicture*)*, i8*, i32, i8*, %struct.WebPAuxStats*, i32, i32 (i32, %struct.WebPPicture*)*, i8*, [3 x i32], i8*, i8*, [8 x i32], i8*, i8*, [2 x i8*] }
%struct.VP8LBitWriter = type { i64, i32, i8*, i8*, i8*, i32 }
%struct.CrunchConfig = type { i32, [2 x %struct.CrunchSubConfig], i32 }
%struct.CrunchSubConfig = type { i32, i32 }
%struct.WebPWorker = type { i8*, i32, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.StreamEncodeContext = type { %struct.WebPConfig*, %struct.WebPPicture*, %struct.VP8LBitWriter*, %struct.VP8LEncoder*, i32, [6 x %struct.CrunchConfig], i32, i32, i32, %struct.WebPAuxStats* }
%struct.VP8LEncoder = type { %struct.WebPConfig*, %struct.WebPPicture*, i32*, i32, i32*, i32*, i32*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, [256 x i32], [4 x %struct.VP8LBackwardRefs], %struct.VP8LHashChain }
%struct.VP8LBackwardRefs = type { i32, i32, %struct.PixOrCopyBlock*, %struct.PixOrCopyBlock**, %struct.PixOrCopyBlock*, %struct.PixOrCopyBlock* }
%struct.PixOrCopyBlock = type opaque
%struct.VP8LHashChain = type { i32*, i32 }
%struct.WebPWorkerInterface = type { void (%struct.WebPWorker*)*, i32 (%struct.WebPWorker*)*, i32 (%struct.WebPWorker*)*, void (%struct.WebPWorker*)*, void (%struct.WebPWorker*)*, void (%struct.WebPWorker*)* }
%struct.HuffmanTree = type { i32, i32, i32, i32 }
%struct.VP8LHistogramSet = type { i32, i32, %struct.VP8LHistogram** }
%struct.VP8LHistogram = type { i32*, [256 x i32], [256 x i32], [256 x i32], [40 x i32], i32, i32, double, double, double, double, [5 x i8] }
%struct.HuffmanTreeCode = type { i32, i8*, i16* }
%struct.HuffmanTreeToken = type { i8, i8 }
%struct.VP8LRefsCursor = type { %struct.PixOrCopy*, %struct.PixOrCopyBlock*, %struct.PixOrCopy* }
%struct.PixOrCopy = type { i8, i16, i32 }

@__const.VP8LEncodeStream.stats_side = private unnamed_addr constant %struct.WebPAuxStats { i32 -1431655766, [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [3 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766], [2 x i32] [i32 -1431655766, i32 -1431655766], [3 x [4 x i32]] [[4 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], [4 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], [4 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766]], [4 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], [4 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], [4 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, [2 x i32] [i32 -1431655766, i32 -1431655766] }, align 4
@AnalyzeEntropy.kHistoPairs = internal unnamed_addr constant [5 x [2 x i8]] [[2 x i8] c"\04\06", [2 x i8] c"\05\07", [2 x i8] c"\08\0A", [2 x i8] c"\09\0B", [2 x i8] c"\04\06"], align 1
@kLog2Table = external local_unnamed_addr constant [256 x float], align 16
@EncodeImageNoHuffman.histogram_symbols = internal constant [1 x i16] zeroinitializer, align 2
@StoreHuffmanTreeOfHuffmanTreeToBitMask.kStorageOrder = internal unnamed_addr constant [19 x i8] c"\11\12\00\01\02\03\04\05\10\06\07\08\09\0A\0B\0C\0D\0E\0F", align 16
@kPrefixEncodeCode = external local_unnamed_addr constant [512 x %struct.VP8LPrefixCode], align 16
@kPrefixEncodeExtraBitsValue = external local_unnamed_addr constant [512 x i8], align 16
@VP8LBundleColorMap = external local_unnamed_addr global void (i8*, i32, i32, i32*)*, align 8
@VP8LSubtractGreenFromBlueAndRed = external local_unnamed_addr global void (i32*, i32)*, align 8
@WriteImage.pad_byte = internal constant [1 x i8] zeroinitializer, align 1
@__const.WriteRiffHeader.riff = private unnamed_addr constant [21 x i8] c"RIFF\00\00\00\00WEBPVP8L\00\00\00\00/", align 16

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8LEncodeStream(%struct.WebPConfig*, %struct.WebPPicture*, %struct.VP8LBitWriter*, i32) local_unnamed_addr #0 {
  %5 = alloca [6 x double], align 16
  %6 = alloca [6 x %struct.CrunchConfig], align 16
  %7 = alloca %struct.WebPWorker, align 8
  %8 = alloca %struct.WebPWorker, align 8
  %9 = alloca %struct.StreamEncodeContext, align 8
  %10 = alloca %struct.StreamEncodeContext, align 8
  %11 = alloca %struct.WebPAuxStats, align 4
  %12 = alloca %struct.VP8LBitWriter, align 8
  %13 = tail call i8* @WebPSafeCalloc(i64 1, i64 1304) #6
  %14 = icmp eq i8* %13, null
  br i1 %14, label %15, label %17

15:                                               ; preds = %4
  %16 = tail call i32 @WebPEncodingSetError(%struct.WebPPicture* %1, i32 1) #6
  br label %24

17:                                               ; preds = %4
  %18 = bitcast i8* %13 to %struct.VP8LEncoder*
  %19 = bitcast i8* %13 to %struct.WebPConfig**
  store %struct.WebPConfig* %0, %struct.WebPConfig** %19, align 8
  %20 = getelementptr inbounds i8, i8* %13, i64 8
  %21 = bitcast i8* %20 to %struct.WebPPicture**
  store %struct.WebPPicture* %1, %struct.WebPPicture** %21, align 8
  %22 = getelementptr inbounds i8, i8* %13, i64 24
  %23 = bitcast i8* %22 to i32*
  store i32 0, i32* %23, align 8
  tail call void @VP8LEncDspInit() #6
  br label %24

24:                                               ; preds = %15, %17
  %25 = phi %struct.VP8LEncoder* [ null, %15 ], [ %18, %17 ]
  %26 = bitcast [6 x %struct.CrunchConfig]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %26) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 -86, i64 144, i1 false)
  %27 = bitcast %struct.WebPWorker* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %27) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 -86, i64 48, i1 false)
  %28 = bitcast %struct.WebPWorker* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %28) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %28, i8 -86, i64 48, i1 false)
  %29 = bitcast %struct.StreamEncodeContext* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %29) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %29, i8 -86, i64 200, i1 false)
  %30 = bitcast %struct.StreamEncodeContext* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %30) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %30, i8 -86, i64 200, i1 false)
  %31 = bitcast %struct.WebPAuxStats* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 188, i8* nonnull %31) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %31, i8* align 4 bitcast (%struct.WebPAuxStats* @__const.VP8LEncodeStream.stats_side to i8*), i64 188, i1 false)
  %32 = bitcast %struct.VP8LBitWriter* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %32) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %32, i8 -86, i64 48, i1 false)
  %33 = tail call %struct.WebPWorkerInterface* @WebPGetWorkerInterface() #6
  %34 = icmp eq %struct.VP8LEncoder* %25, null
  br i1 %34, label %853, label %35

35:                                               ; preds = %24
  %36 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %25, i64 0, i32 1
  %37 = load %struct.WebPPicture*, %struct.WebPPicture** %36, align 8
  %38 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %37, i64 0, i32 2
  %39 = load i32, i32* %38, align 8
  %40 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %37, i64 0, i32 3
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %25, i64 0, i32 0
  %43 = load %struct.WebPConfig*, %struct.WebPConfig** %42, align 8
  %44 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %43, i64 0, i32 2
  %45 = load i32, i32* %44, align 4
  %46 = icmp eq i32 %45, 0
  %47 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %25, i64 0, i32 17, i64 0
  %48 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %25, i64 0, i32 16
  %49 = tail call i32 @WebPGetColorPalette(%struct.WebPPicture* %37, i32* %47) #6
  %50 = icmp sgt i32 %49, 256
  br i1 %50, label %51, label %52

51:                                               ; preds = %35
  store i32 0, i32* %48, align 4
  br label %240

52:                                               ; preds = %35
  store i32 %49, i32* %48, align 4
  %53 = bitcast i32* %47 to i8*
  %54 = sext i32 %49 to i64
  tail call void @qsort(i8* %53, i64 %54, i64 4, i32 (i8*, i8*)* nonnull @PaletteCompareColorsForQsort) #6
  %55 = xor i1 %46, true
  %56 = icmp sgt i32 %49, 0
  %57 = and i1 %56, %55
  br i1 %57, label %58, label %240

58:                                               ; preds = %52
  %59 = zext i32 %49 to i64
  %60 = icmp ult i32 %49, 8
  br i1 %60, label %139, label %61

61:                                               ; preds = %58
  %62 = and i64 %59, 4294967288
  br label %63

63:                                               ; preds = %63, %61
  %64 = phi i64 [ 0, %61 ], [ %128, %63 ]
  %65 = phi <4 x i32> [ <i32 undef, i32 undef, i32 undef, i32 0>, %61 ], [ %73, %63 ]
  %66 = phi <4 x i8> [ zeroinitializer, %61 ], [ %125, %63 ]
  %67 = phi <4 x i8> [ zeroinitializer, %61 ], [ %127, %63 ]
  %68 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %25, i64 0, i32 17, i64 %64
  %69 = bitcast i32* %68 to <4 x i32>*
  %70 = load <4 x i32>, <4 x i32>* %69, align 4
  %71 = getelementptr inbounds i32, i32* %68, i64 4
  %72 = bitcast i32* %71 to <4 x i32>*
  %73 = load <4 x i32>, <4 x i32>* %72, align 4
  %74 = shufflevector <4 x i32> %65, <4 x i32> %70, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %75 = shufflevector <4 x i32> %70, <4 x i32> %73, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %76 = or <4 x i32> %70, <i32 255, i32 255, i32 255, i32 255>
  %77 = or <4 x i32> %73, <i32 255, i32 255, i32 255, i32 255>
  %78 = and <4 x i32> %74, <i32 65280, i32 65280, i32 65280, i32 65280>
  %79 = and <4 x i32> %75, <i32 65280, i32 65280, i32 65280, i32 65280>
  %80 = sub <4 x i32> %76, %78
  %81 = sub <4 x i32> %77, %79
  %82 = or <4 x i32> %70, <i32 65280, i32 65280, i32 65280, i32 65280>
  %83 = or <4 x i32> %73, <i32 65280, i32 65280, i32 65280, i32 65280>
  %84 = and <4 x i32> %74, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %85 = and <4 x i32> %75, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %86 = sub <4 x i32> %82, %84
  %87 = sub <4 x i32> %83, %85
  %88 = lshr <4 x i32> %86, <i32 16, i32 16, i32 16, i32 16>
  %89 = lshr <4 x i32> %87, <i32 16, i32 16, i32 16, i32 16>
  %90 = lshr <4 x i32> %80, <i32 8, i32 8, i32 8, i32 8>
  %91 = lshr <4 x i32> %81, <i32 8, i32 8, i32 8, i32 8>
  %92 = and <4 x i32> %88, <i32 255, i32 255, i32 255, i32 255>
  %93 = and <4 x i32> %89, <i32 255, i32 255, i32 255, i32 255>
  %94 = icmp eq <4 x i32> %92, zeroinitializer
  %95 = icmp eq <4 x i32> %93, zeroinitializer
  %96 = icmp ult <4 x i32> %92, <i32 128, i32 128, i32 128, i32 128>
  %97 = icmp ult <4 x i32> %93, <i32 128, i32 128, i32 128, i32 128>
  %98 = select <4 x i1> %96, <4 x i8> <i8 1, i8 1, i8 1, i8 1>, <4 x i8> <i8 2, i8 2, i8 2, i8 2>
  %99 = select <4 x i1> %97, <4 x i8> <i8 1, i8 1, i8 1, i8 1>, <4 x i8> <i8 2, i8 2, i8 2, i8 2>
  %100 = select <4 x i1> %94, <4 x i8> zeroinitializer, <4 x i8> %98
  %101 = or <4 x i8> %66, %100
  %102 = select <4 x i1> %95, <4 x i8> zeroinitializer, <4 x i8> %99
  %103 = or <4 x i8> %67, %102
  %104 = and <4 x i32> %90, <i32 255, i32 255, i32 255, i32 255>
  %105 = and <4 x i32> %91, <i32 255, i32 255, i32 255, i32 255>
  %106 = icmp eq <4 x i32> %104, zeroinitializer
  %107 = icmp eq <4 x i32> %105, zeroinitializer
  %108 = icmp ult <4 x i32> %104, <i32 128, i32 128, i32 128, i32 128>
  %109 = icmp ult <4 x i32> %105, <i32 128, i32 128, i32 128, i32 128>
  %110 = select <4 x i1> %108, <4 x i8> <i8 8, i8 8, i8 8, i8 8>, <4 x i8> <i8 16, i8 16, i8 16, i8 16>
  %111 = select <4 x i1> %109, <4 x i8> <i8 8, i8 8, i8 8, i8 8>, <4 x i8> <i8 16, i8 16, i8 16, i8 16>
  %112 = select <4 x i1> %106, <4 x i8> zeroinitializer, <4 x i8> %110
  %113 = or <4 x i8> %101, %112
  %114 = select <4 x i1> %107, <4 x i8> zeroinitializer, <4 x i8> %111
  %115 = or <4 x i8> %103, %114
  %116 = and <4 x i32> %86, <i32 255, i32 255, i32 255, i32 255>
  %117 = and <4 x i32> %87, <i32 255, i32 255, i32 255, i32 255>
  %118 = icmp eq <4 x i32> %116, zeroinitializer
  %119 = icmp eq <4 x i32> %117, zeroinitializer
  %120 = icmp ult <4 x i32> %116, <i32 128, i32 128, i32 128, i32 128>
  %121 = icmp ult <4 x i32> %117, <i32 128, i32 128, i32 128, i32 128>
  %122 = select <4 x i1> %120, <4 x i8> <i8 64, i8 64, i8 64, i8 64>, <4 x i8> <i8 -128, i8 -128, i8 -128, i8 -128>
  %123 = select <4 x i1> %121, <4 x i8> <i8 64, i8 64, i8 64, i8 64>, <4 x i8> <i8 -128, i8 -128, i8 -128, i8 -128>
  %124 = select <4 x i1> %118, <4 x i8> zeroinitializer, <4 x i8> %122
  %125 = or <4 x i8> %113, %124
  %126 = select <4 x i1> %119, <4 x i8> zeroinitializer, <4 x i8> %123
  %127 = or <4 x i8> %115, %126
  %128 = add i64 %64, 8
  %129 = icmp eq i64 %128, %62
  br i1 %129, label %130, label %63, !llvm.loop !2

130:                                              ; preds = %63
  %131 = or <4 x i8> %127, %125
  %132 = shufflevector <4 x i8> %131, <4 x i8> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %133 = or <4 x i8> %131, %132
  %134 = shufflevector <4 x i8> %133, <4 x i8> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %135 = or <4 x i8> %133, %134
  %136 = extractelement <4 x i8> %135, i32 0
  %137 = icmp eq i64 %62, %59
  %138 = extractelement <4 x i32> %73, i32 3
  br i1 %137, label %183, label %139

139:                                              ; preds = %130, %58
  %140 = phi i64 [ 0, %58 ], [ %62, %130 ]
  %141 = phi i32 [ 0, %58 ], [ %138, %130 ]
  %142 = phi i8 [ 0, %58 ], [ %136, %130 ]
  br label %143

143:                                              ; preds = %139, %179
  %144 = phi i64 [ %181, %179 ], [ %140, %139 ]
  %145 = phi i32 [ %148, %179 ], [ %141, %139 ]
  %146 = phi i8 [ %180, %179 ], [ %142, %139 ]
  %147 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %25, i64 0, i32 17, i64 %144
  %148 = load i32, i32* %147, align 4
  %149 = or i32 %148, 255
  %150 = and i32 %145, 65280
  %151 = sub i32 %149, %150
  %152 = or i32 %148, 65280
  %153 = and i32 %145, 16711935
  %154 = sub i32 %152, %153
  %155 = lshr i32 %154, 16
  %156 = lshr i32 %151, 8
  %157 = and i32 %155, 255
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %163, label %159

159:                                              ; preds = %143
  %160 = icmp ult i32 %157, 128
  %161 = select i1 %160, i8 1, i8 2
  %162 = or i8 %161, %146
  br label %163

163:                                              ; preds = %159, %143
  %164 = phi i8 [ %162, %159 ], [ %146, %143 ]
  %165 = and i32 %156, 255
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %171, label %167

167:                                              ; preds = %163
  %168 = icmp ult i32 %165, 128
  %169 = select i1 %168, i8 8, i8 16
  %170 = or i8 %164, %169
  br label %171

171:                                              ; preds = %167, %163
  %172 = phi i8 [ %170, %167 ], [ %164, %163 ]
  %173 = and i32 %154, 255
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %179, label %175

175:                                              ; preds = %171
  %176 = icmp ult i32 %173, 128
  %177 = select i1 %176, i8 64, i8 -128
  %178 = or i8 %172, %177
  br label %179

179:                                              ; preds = %175, %171
  %180 = phi i8 [ %178, %175 ], [ %172, %171 ]
  %181 = add nuw nsw i64 %144, 1
  %182 = icmp eq i64 %181, %59
  br i1 %182, label %183, label %143, !llvm.loop !4

183:                                              ; preds = %179, %130
  %184 = phi i8 [ %136, %130 ], [ %180, %179 ]
  %185 = shl i8 %184, 1
  %186 = and i8 %185, %184
  %187 = icmp eq i8 %186, 0
  br i1 %187, label %240, label %188

188:                                              ; preds = %183, %232
  %189 = phi i64 [ %238, %232 ], [ 0, %183 ]
  %190 = phi i32 [ %236, %232 ], [ 0, %183 ]
  %191 = trunc i64 %189 to i32
  %192 = and i32 %190, -16711936
  %193 = and i32 %190, 16711935
  br label %194

194:                                              ; preds = %194, %188
  %195 = phi i64 [ %189, %188 ], [ %230, %194 ]
  %196 = phi i32 [ -1, %188 ], [ %229, %194 ]
  %197 = phi i32 [ %191, %188 ], [ %228, %194 ]
  %198 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %25, i64 0, i32 17, i64 %195
  %199 = load i32, i32* %198, align 4
  %200 = or i32 %199, 16711935
  %201 = sub i32 %200, %192
  %202 = or i32 %199, 65280
  %203 = sub i32 %202, %193
  %204 = and i32 %203, 255
  %205 = icmp ult i32 %204, 129
  %206 = sub nuw nsw i32 256, %204
  %207 = select i1 %205, i32 %204, i32 %206
  %208 = lshr i32 %201, 8
  %209 = and i32 %208, 255
  %210 = icmp ult i32 %209, 129
  %211 = sub nuw nsw i32 256, %209
  %212 = select i1 %210, i32 %209, i32 %211
  %213 = add nuw nsw i32 %212, %207
  %214 = lshr i32 %203, 16
  %215 = and i32 %214, 255
  %216 = icmp ult i32 %215, 129
  %217 = sub nuw nsw i32 256, %215
  %218 = select i1 %216, i32 %215, i32 %217
  %219 = add nuw nsw i32 %213, %218
  %220 = mul nuw nsw i32 %219, 9
  %221 = lshr i32 %201, 24
  %222 = icmp ult i32 %201, -2130706432
  %223 = sub nuw nsw i32 256, %221
  %224 = select i1 %222, i32 %221, i32 %223
  %225 = add nuw nsw i32 %220, %224
  %226 = icmp ugt i32 %196, %225
  %227 = trunc i64 %195 to i32
  %228 = select i1 %226, i32 %227, i32 %197
  %229 = select i1 %226, i32 %225, i32 %196
  %230 = add nuw nsw i64 %195, 1
  %231 = icmp eq i64 %230, %59
  br i1 %231, label %232, label %194

232:                                              ; preds = %194
  %233 = sext i32 %228 to i64
  %234 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %25, i64 0, i32 17, i64 %233
  %235 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %25, i64 0, i32 17, i64 %189
  %236 = load i32, i32* %234, align 4
  %237 = load i32, i32* %235, align 4
  store i32 %237, i32* %234, align 4
  store i32 %236, i32* %235, align 4
  %238 = add nuw nsw i64 %189, 1
  %239 = icmp eq i64 %238, %59
  br i1 %239, label %240, label %188

240:                                              ; preds = %232, %183, %52, %51
  %241 = phi i32 [ 0, %51 ], [ 1, %183 ], [ 1, %52 ], [ 1, %232 ]
  %242 = load i32, i32* %38, align 8
  %243 = load i32, i32* %40, align 4
  %244 = icmp eq i32 %241, 0
  %245 = select i1 %244, i32 7, i32 9
  %246 = sub nsw i32 %245, %45
  br label %247

247:                                              ; preds = %247, %240
  %248 = phi i32 [ %246, %240 ], [ %259, %247 ]
  %249 = shl nsw i32 -1, %248
  %250 = xor i32 %249, -1
  %251 = add i32 %242, %250
  %252 = lshr i32 %251, %248
  %253 = add i32 %243, %250
  %254 = lshr i32 %253, %248
  %255 = mul i32 %252, %254
  %256 = icmp slt i32 %255, 2601
  %257 = xor i1 %256, true
  %258 = zext i1 %257 to i32
  %259 = add nsw i32 %248, %258
  br i1 %256, label %260, label %247

260:                                              ; preds = %247
  %261 = icmp slt i32 %259, 9
  %262 = select i1 %261, i32 %259, i32 9
  %263 = icmp sgt i32 %262, 2
  %264 = select i1 %263, i32 %262, i32 2
  %265 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %25, i64 0, i32 9
  store i32 %264, i32* %265, align 4
  %266 = icmp slt i32 %45, 4
  %267 = icmp eq i32 %45, 4
  %268 = select i1 %267, i32 5, i32 4
  %269 = select i1 %266, i32 6, i32 %268
  %270 = icmp slt i32 %269, %264
  %271 = select i1 %270, i32 %269, i32 %264
  %272 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %25, i64 0, i32 10
  store i32 %271, i32* %272, align 8
  br i1 %46, label %273, label %276

273:                                              ; preds = %260
  %274 = select i1 %244, i32 3, i32 4
  %275 = getelementptr inbounds [6 x %struct.CrunchConfig], [6 x %struct.CrunchConfig]* %6, i64 0, i64 0, i32 0
  store i32 %274, i32* %275, align 16
  br label %609

276:                                              ; preds = %260
  %277 = load i32, i32* %48, align 8
  %278 = icmp sgt i32 %277, 0
  %279 = icmp sgt i32 %277, 16
  %280 = select i1 %279, i32 1, i32 2
  %281 = select i1 %278, i32 %280, i32 1
  %282 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %37, i64 0, i32 12
  %283 = load i32*, i32** %282, align 8
  %284 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %37, i64 0, i32 13
  %285 = load i32, i32* %284, align 8
  %286 = icmp ne i32 %241, 0
  %287 = icmp slt i32 %277, 17
  %288 = and i1 %286, %287
  br i1 %288, label %590, label %289

289:                                              ; preds = %276
  %290 = tail call i8* @WebPSafeCalloc(i64 13, i64 1024) #6
  %291 = bitcast i8* %290 to i32*
  %292 = icmp eq i8* %290, null
  br i1 %292, label %853, label %293

293:                                              ; preds = %289
  %294 = icmp sgt i32 %41, 0
  br i1 %294, label %295, label %439

295:                                              ; preds = %293
  %296 = load i32, i32* %283, align 4
  %297 = icmp sgt i32 %39, 0
  %298 = getelementptr inbounds i8, i8* %290, i64 4096
  %299 = bitcast i8* %298 to i32*
  %300 = getelementptr inbounds i8, i8* %290, i64 2048
  %301 = bitcast i8* %300 to i32*
  %302 = getelementptr inbounds i8, i8* %290, i64 6144
  %303 = bitcast i8* %302 to i32*
  %304 = getelementptr inbounds i8, i8* %290, i64 1024
  %305 = bitcast i8* %304 to i32*
  %306 = getelementptr inbounds i8, i8* %290, i64 5120
  %307 = bitcast i8* %306 to i32*
  %308 = getelementptr inbounds i8, i8* %290, i64 3072
  %309 = bitcast i8* %308 to i32*
  %310 = getelementptr inbounds i8, i8* %290, i64 7168
  %311 = bitcast i8* %310 to i32*
  %312 = getelementptr inbounds i8, i8* %290, i64 8192
  %313 = bitcast i8* %312 to i32*
  %314 = getelementptr inbounds i8, i8* %290, i64 10240
  %315 = bitcast i8* %314 to i32*
  %316 = getelementptr inbounds i8, i8* %290, i64 9216
  %317 = bitcast i8* %316 to i32*
  %318 = getelementptr inbounds i8, i8* %290, i64 11264
  %319 = bitcast i8* %318 to i32*
  %320 = sext i32 %285 to i64
  %321 = zext i32 %39 to i64
  br label %322

322:                                              ; preds = %434, %295
  %323 = phi i32 [ %296, %295 ], [ %435, %434 ]
  %324 = phi i32* [ %283, %295 ], [ %436, %434 ]
  %325 = phi i32* [ null, %295 ], [ %324, %434 ]
  %326 = phi i32 [ 0, %295 ], [ %437, %434 ]
  br i1 %297, label %327, label %434

327:                                              ; preds = %322
  %328 = icmp eq i32* %325, null
  br label %329

329:                                              ; preds = %431, %327
  %330 = phi i64 [ 0, %327 ], [ %432, %431 ]
  %331 = phi i32 [ %323, %327 ], [ %333, %431 ]
  %332 = getelementptr inbounds i32, i32* %324, i64 %330
  %333 = load i32, i32* %332, align 4
  %334 = or i32 %333, 16711935
  %335 = and i32 %331, -16711936
  %336 = sub i32 %334, %335
  %337 = or i32 %333, 65280
  %338 = and i32 %331, 16711935
  %339 = sub i32 %337, %338
  %340 = and i32 %336, -16711936
  %341 = and i32 %339, 16711935
  %342 = or i32 %340, %341
  %343 = icmp eq i32 %342, 0
  br i1 %343, label %431, label %344

344:                                              ; preds = %329
  br i1 %328, label %349, label %345

345:                                              ; preds = %344
  %346 = getelementptr inbounds i32, i32* %325, i64 %330
  %347 = load i32, i32* %346, align 4
  %348 = icmp eq i32 %333, %347
  br i1 %348, label %431, label %349

349:                                              ; preds = %345, %344
  %350 = lshr i32 %333, 24
  %351 = zext i32 %350 to i64
  %352 = getelementptr inbounds i32, i32* %291, i64 %351
  %353 = load i32, i32* %352, align 4
  %354 = add i32 %353, 1
  store i32 %354, i32* %352, align 4
  %355 = lshr i32 %333, 16
  %356 = and i32 %355, 255
  %357 = zext i32 %356 to i64
  %358 = getelementptr inbounds i32, i32* %299, i64 %357
  %359 = load i32, i32* %358, align 4
  %360 = add i32 %359, 1
  store i32 %360, i32* %358, align 4
  %361 = lshr i32 %333, 8
  %362 = and i32 %361, 255
  %363 = zext i32 %362 to i64
  %364 = getelementptr inbounds i32, i32* %301, i64 %363
  %365 = load i32, i32* %364, align 4
  %366 = add i32 %365, 1
  store i32 %366, i32* %364, align 4
  %367 = and i32 %333, 255
  %368 = zext i32 %367 to i64
  %369 = getelementptr inbounds i32, i32* %303, i64 %368
  %370 = load i32, i32* %369, align 4
  %371 = add i32 %370, 1
  store i32 %371, i32* %369, align 4
  %372 = lshr i32 %336, 24
  %373 = zext i32 %372 to i64
  %374 = getelementptr inbounds i32, i32* %305, i64 %373
  %375 = load i32, i32* %374, align 4
  %376 = add i32 %375, 1
  store i32 %376, i32* %374, align 4
  %377 = lshr i32 %342, 16
  %378 = and i32 %377, 255
  %379 = zext i32 %378 to i64
  %380 = getelementptr inbounds i32, i32* %307, i64 %379
  %381 = load i32, i32* %380, align 4
  %382 = add i32 %381, 1
  store i32 %382, i32* %380, align 4
  %383 = lshr i32 %336, 8
  %384 = and i32 %383, 255
  %385 = zext i32 %384 to i64
  %386 = getelementptr inbounds i32, i32* %309, i64 %385
  %387 = load i32, i32* %386, align 4
  %388 = add i32 %387, 1
  store i32 %388, i32* %386, align 4
  %389 = and i32 %339, 255
  %390 = zext i32 %389 to i64
  %391 = getelementptr inbounds i32, i32* %311, i64 %390
  %392 = load i32, i32* %391, align 4
  %393 = add i32 %392, 1
  store i32 %393, i32* %391, align 4
  %394 = ashr i32 %333, 8
  %395 = sub nsw i32 %355, %394
  %396 = and i32 %395, 255
  %397 = zext i32 %396 to i64
  %398 = getelementptr inbounds i32, i32* %313, i64 %397
  %399 = load i32, i32* %398, align 4
  %400 = add i32 %399, 1
  store i32 %400, i32* %398, align 4
  %401 = sub nsw i32 %333, %394
  %402 = and i32 %401, 255
  %403 = zext i32 %402 to i64
  %404 = getelementptr inbounds i32, i32* %315, i64 %403
  %405 = load i32, i32* %404, align 4
  %406 = add i32 %405, 1
  store i32 %406, i32* %404, align 4
  %407 = ashr i32 %342, 8
  %408 = sub nsw i32 %377, %407
  %409 = and i32 %408, 255
  %410 = zext i32 %409 to i64
  %411 = getelementptr inbounds i32, i32* %317, i64 %410
  %412 = load i32, i32* %411, align 4
  %413 = add i32 %412, 1
  store i32 %413, i32* %411, align 4
  %414 = sub i32 %339, %407
  %415 = and i32 %414, 255
  %416 = zext i32 %415 to i64
  %417 = getelementptr inbounds i32, i32* %319, i64 %416
  %418 = load i32, i32* %417, align 4
  %419 = add i32 %418, 1
  store i32 %419, i32* %417, align 4
  %420 = zext i32 %333 to i64
  %421 = lshr i32 %333, 19
  %422 = zext i32 %421 to i64
  %423 = add nuw nsw i64 %422, %420
  %424 = mul nuw nsw i64 %423, 969276327
  %425 = lshr i64 %424, 24
  %426 = and i64 %425, 255
  %427 = or i64 %426, 3072
  %428 = getelementptr inbounds i32, i32* %291, i64 %427
  %429 = load i32, i32* %428, align 4
  %430 = add i32 %429, 1
  store i32 %430, i32* %428, align 4
  br label %431

431:                                              ; preds = %349, %345, %329
  %432 = add nuw nsw i64 %330, 1
  %433 = icmp eq i64 %432, %321
  br i1 %433, label %434, label %329

434:                                              ; preds = %431, %322
  %435 = phi i32 [ %323, %322 ], [ %333, %431 ]
  %436 = getelementptr inbounds i32, i32* %324, i64 %320
  %437 = add nuw nsw i32 %326, 1
  %438 = icmp eq i32 %437, %41
  br i1 %438, label %439, label %322

439:                                              ; preds = %434, %293
  %440 = bitcast [6 x double]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %440) #6
  %441 = getelementptr inbounds [6 x double], [6 x double]* %5, i64 0, i64 2
  %442 = getelementptr inbounds [6 x double], [6 x double]* %5, i64 0, i64 4
  %443 = getelementptr inbounds i8, i8* %290, i64 9216
  %444 = bitcast i8* %443 to i32*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %440, i8 -1, i64 48, i1 false) #6
  %445 = load i32, i32* %444, align 4
  %446 = add i32 %445, 1
  store i32 %446, i32* %444, align 4
  %447 = getelementptr inbounds i8, i8* %290, i64 11264
  %448 = bitcast i8* %447 to i32*
  %449 = load i32, i32* %448, align 4
  %450 = add i32 %449, 1
  store i32 %450, i32* %448, align 4
  %451 = getelementptr inbounds i8, i8* %290, i64 5120
  %452 = bitcast i8* %451 to i32*
  %453 = load i32, i32* %452, align 4
  %454 = add i32 %453, 1
  store i32 %454, i32* %452, align 4
  %455 = getelementptr inbounds i8, i8* %290, i64 3072
  %456 = bitcast i8* %455 to i32*
  %457 = load i32, i32* %456, align 4
  %458 = add i32 %457, 1
  store i32 %458, i32* %456, align 4
  %459 = getelementptr inbounds i8, i8* %290, i64 7168
  %460 = bitcast i8* %459 to i32*
  %461 = load i32, i32* %460, align 4
  %462 = add i32 %461, 1
  store i32 %462, i32* %460, align 4
  %463 = getelementptr inbounds i8, i8* %290, i64 1024
  %464 = bitcast i8* %463 to i32*
  %465 = load i32, i32* %464, align 4
  %466 = add i32 %465, 1
  store i32 %466, i32* %464, align 4
  %467 = tail call double @VP8LBitsEntropy(i32* nonnull %291, i32 256) #6
  %468 = tail call double @VP8LBitsEntropy(i32* %464, i32 256) #6
  %469 = getelementptr inbounds i8, i8* %290, i64 2048
  %470 = bitcast i8* %469 to i32*
  %471 = tail call double @VP8LBitsEntropy(i32* %470, i32 256) #6
  %472 = tail call double @VP8LBitsEntropy(i32* %456, i32 256) #6
  %473 = getelementptr inbounds i8, i8* %290, i64 4096
  %474 = bitcast i8* %473 to i32*
  %475 = tail call double @VP8LBitsEntropy(i32* %474, i32 256) #6
  %476 = tail call double @VP8LBitsEntropy(i32* %452, i32 256) #6
  %477 = getelementptr inbounds i8, i8* %290, i64 6144
  %478 = bitcast i8* %477 to i32*
  %479 = tail call double @VP8LBitsEntropy(i32* %478, i32 256) #6
  %480 = tail call double @VP8LBitsEntropy(i32* %460, i32 256) #6
  %481 = getelementptr inbounds i8, i8* %290, i64 8192
  %482 = bitcast i8* %481 to i32*
  %483 = tail call double @VP8LBitsEntropy(i32* %482, i32 256) #6
  %484 = tail call double @VP8LBitsEntropy(i32* %444, i32 256) #6
  %485 = getelementptr inbounds i8, i8* %290, i64 10240
  %486 = bitcast i8* %485 to i32*
  %487 = tail call double @VP8LBitsEntropy(i32* %486, i32 256) #6
  %488 = tail call double @VP8LBitsEntropy(i32* %448, i32 256) #6
  %489 = getelementptr inbounds i8, i8* %290, i64 12288
  %490 = bitcast i8* %489 to i32*
  %491 = tail call double @VP8LBitsEntropy(i32* %490, i32 256) #6
  %492 = fadd double %468, %476
  %493 = insertelement <2 x double> undef, double %467, i32 0
  %494 = insertelement <2 x double> %493, double %472, i32 1
  %495 = insertelement <2 x double> undef, double %475, i32 0
  %496 = insertelement <2 x double> %495, double %492, i32 1
  %497 = fadd <2 x double> %494, %496
  %498 = insertelement <2 x double> undef, double %471, i32 0
  %499 = insertelement <2 x double> %498, double %480, i32 1
  %500 = fadd <2 x double> %499, %497
  %501 = fadd double %468, %484
  %502 = insertelement <2 x double> undef, double %483, i32 0
  %503 = insertelement <2 x double> %502, double %501, i32 1
  %504 = fadd <2 x double> %494, %503
  %505 = insertelement <2 x double> %498, double %488, i32 1
  %506 = fadd <2 x double> %505, %504
  %507 = shl nsw i32 -1, %271
  %508 = xor i32 %507, -1
  %509 = add i32 %39, %508
  %510 = lshr i32 %509, %271
  %511 = add i32 %41, %508
  %512 = lshr i32 %511, %271
  %513 = mul i32 %510, %512
  %514 = uitofp i32 %513 to float
  %515 = load float, float* getelementptr inbounds ([256 x float], [256 x float]* @kLog2Table, i64 0, i64 14), align 8
  %516 = fmul float %515, %514
  %517 = fpext float %516 to double
  %518 = insertelement <2 x double> undef, double %479, i32 0
  %519 = insertelement <2 x double> %518, double %517, i32 1
  %520 = fadd <2 x double> %500, %519
  %521 = bitcast [6 x double]* %5 to <2 x double>*
  store <2 x double> %520, <2 x double>* %521, align 16
  %522 = load float, float* getelementptr inbounds ([256 x float], [256 x float]* @kLog2Table, i64 0, i64 24), align 16
  %523 = fmul float %522, %514
  %524 = fpext float %523 to double
  %525 = insertelement <2 x double> undef, double %487, i32 0
  %526 = insertelement <2 x double> %525, double %524, i32 1
  %527 = fadd <2 x double> %526, %506
  %528 = bitcast double* %441 to <2 x double>*
  store <2 x double> %527, <2 x double>* %528, align 16
  %529 = shl nsw i32 %277, 3
  %530 = sitofp i32 %529 to double
  %531 = fadd double %491, %530
  store double %531, double* %442, align 16
  %532 = extractelement <2 x double> %520, i32 0
  %533 = extractelement <2 x double> %520, i32 1
  %534 = fcmp ogt double %532, %533
  %535 = zext i1 %534 to i32
  %536 = zext i1 %534 to i64
  %537 = getelementptr inbounds [6 x double], [6 x double]* %5, i64 0, i64 %536
  %538 = load double, double* %537, align 8
  %539 = extractelement <2 x double> %527, i32 0
  %540 = fcmp ogt double %538, %539
  %541 = select i1 %540, i32 2, i32 %535
  %542 = select i1 %540, i32 2, i32 %535
  %543 = zext i32 %542 to i64
  %544 = getelementptr inbounds [6 x double], [6 x double]* %5, i64 0, i64 %543
  %545 = load double, double* %544, align 8
  %546 = extractelement <2 x double> %527, i32 1
  %547 = fcmp ogt double %545, %546
  %548 = select i1 %547, i32 3, i32 %541
  br i1 %286, label %549, label %558

549:                                              ; preds = %439
  %550 = getelementptr inbounds [6 x double], [6 x double]* %5, i64 0, i64 4
  %551 = load double, double* %550, align 16
  %552 = zext i32 %542 to i64
  %553 = select i1 %547, i64 3, i64 %552
  %554 = getelementptr inbounds [6 x double], [6 x double]* %5, i64 0, i64 %553
  %555 = load double, double* %554, align 8
  %556 = fcmp ogt double %555, %551
  %557 = select i1 %556, i32 4, i32 %548
  br label %558

558:                                              ; preds = %549, %439
  %559 = phi i32 [ %548, %439 ], [ %557, %549 ]
  %560 = zext i32 %559 to i64
  %561 = getelementptr inbounds [5 x [2 x i8]], [5 x [2 x i8]]* @AnalyzeEntropy.kHistoPairs, i64 0, i64 %560, i64 0
  %562 = load i8, i8* %561, align 1
  %563 = zext i8 %562 to i64
  %564 = shl nuw nsw i64 %563, 8
  %565 = getelementptr inbounds i32, i32* %291, i64 %564
  %566 = getelementptr inbounds [5 x [2 x i8]], [5 x [2 x i8]]* @AnalyzeEntropy.kHistoPairs, i64 0, i64 %560, i64 1
  %567 = load i8, i8* %566, align 1
  %568 = zext i8 %567 to i64
  %569 = shl nuw nsw i64 %568, 8
  %570 = getelementptr inbounds i32, i32* %291, i64 %569
  br label %579

571:                                              ; preds = %579
  %572 = getelementptr inbounds i32, i32* %565, i64 %587
  %573 = load i32, i32* %572, align 4
  %574 = getelementptr inbounds i32, i32* %570, i64 %587
  %575 = load i32, i32* %574, align 4
  %576 = or i32 %575, %573
  %577 = icmp eq i32 %576, 0
  %578 = add nuw nsw i64 %580, 2
  br i1 %577, label %874, label %588

579:                                              ; preds = %882, %558
  %580 = phi i64 [ 1, %558 ], [ %881, %882 ]
  %581 = getelementptr inbounds i32, i32* %565, i64 %580
  %582 = load i32, i32* %581, align 4
  %583 = getelementptr inbounds i32, i32* %570, i64 %580
  %584 = load i32, i32* %583, align 4
  %585 = or i32 %584, %582
  %586 = icmp eq i32 %585, 0
  %587 = add nuw nsw i64 %580, 1
  br i1 %586, label %571, label %588

588:                                              ; preds = %882, %874, %571, %579
  %589 = phi i32 [ 0, %579 ], [ 0, %571 ], [ 0, %874 ], [ 1, %882 ]
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %440) #6
  tail call void @WebPSafeFree(i8* nonnull %290) #6
  br label %590

590:                                              ; preds = %276, %588
  %591 = phi i32 [ %589, %588 ], [ 1, %276 ]
  %592 = phi i32 [ %559, %588 ], [ 4, %276 ]
  %593 = icmp eq i32 %45, 6
  %594 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %43, i64 0, i32 1
  %595 = load float, float* %594, align 4
  br i1 %593, label %596, label %600

596:                                              ; preds = %590
  %597 = fcmp oeq float %595, 1.000000e+02
  %598 = getelementptr inbounds [6 x %struct.CrunchConfig], [6 x %struct.CrunchConfig]* %6, i64 0, i64 0, i32 0
  br i1 %597, label %624, label %599

599:                                              ; preds = %596
  store i32 %592, i32* %598, align 16
  br label %609

600:                                              ; preds = %590
  %601 = getelementptr inbounds [6 x %struct.CrunchConfig], [6 x %struct.CrunchConfig]* %6, i64 0, i64 0, i32 0
  store i32 %592, i32* %601, align 16
  %602 = fcmp oge float %595, 7.500000e+01
  %603 = icmp eq i32 %45, 5
  %604 = and i1 %603, %602
  br i1 %604, label %605, label %609

605:                                              ; preds = %600
  %606 = icmp eq i32 %592, 4
  br i1 %606, label %607, label %609

607:                                              ; preds = %605
  %608 = getelementptr inbounds [6 x %struct.CrunchConfig], [6 x %struct.CrunchConfig]* %6, i64 0, i64 1, i32 0
  store i32 5, i32* %608, align 8
  br label %609

609:                                              ; preds = %599, %600, %605, %607, %624, %628, %273
  %610 = phi i32 [ 1, %273 ], [ 6, %628 ], [ 4, %624 ], [ 2, %607 ], [ 1, %605 ], [ 1, %600 ], [ 1, %599 ]
  %611 = phi i32 [ 0, %273 ], [ %591, %628 ], [ %591, %624 ], [ %591, %607 ], [ %591, %605 ], [ %591, %600 ], [ %591, %599 ]
  %612 = phi i32 [ 0, %273 ], [ 1, %628 ], [ 1, %624 ], [ 1, %607 ], [ 1, %605 ], [ 0, %600 ], [ 0, %599 ]
  %613 = phi i32 [ 1, %273 ], [ %281, %628 ], [ %281, %624 ], [ %281, %607 ], [ %281, %605 ], [ %281, %600 ], [ %281, %599 ]
  %614 = zext i32 %610 to i64
  %615 = icmp sgt i32 %613, 1
  br label %616

616:                                              ; preds = %620, %609
  %617 = phi i64 [ 0, %609 ], [ %622, %620 ]
  %618 = getelementptr inbounds [6 x %struct.CrunchConfig], [6 x %struct.CrunchConfig]* %6, i64 0, i64 %617, i32 1, i64 0, i32 0
  store i32 3, i32* %618, align 4
  %619 = getelementptr inbounds [6 x %struct.CrunchConfig], [6 x %struct.CrunchConfig]* %6, i64 0, i64 %617, i32 1, i64 0, i32 1
  store i32 %612, i32* %619, align 4
  br i1 %615, label %871, label %620

620:                                              ; preds = %871, %616
  %621 = getelementptr inbounds [6 x %struct.CrunchConfig], [6 x %struct.CrunchConfig]* %6, i64 0, i64 %617, i32 2
  store i32 %613, i32* %621, align 4
  %622 = add nuw nsw i64 %617, 1
  %623 = icmp eq i64 %622, %614
  br i1 %623, label %631, label %616

624:                                              ; preds = %596
  store i32 0, i32* %598, align 16
  %625 = getelementptr inbounds [6 x %struct.CrunchConfig], [6 x %struct.CrunchConfig]* %6, i64 0, i64 1, i32 0
  store i32 1, i32* %625, align 8
  %626 = getelementptr inbounds [6 x %struct.CrunchConfig], [6 x %struct.CrunchConfig]* %6, i64 0, i64 2, i32 0
  store i32 2, i32* %626, align 16
  %627 = getelementptr inbounds [6 x %struct.CrunchConfig], [6 x %struct.CrunchConfig]* %6, i64 0, i64 3, i32 0
  store i32 3, i32* %627, align 8
  br i1 %286, label %628, label %609

628:                                              ; preds = %624
  %629 = getelementptr inbounds [6 x %struct.CrunchConfig], [6 x %struct.CrunchConfig]* %6, i64 0, i64 4, i32 0
  store i32 4, i32* %629, align 16
  %630 = getelementptr inbounds [6 x %struct.CrunchConfig], [6 x %struct.CrunchConfig]* %6, i64 0, i64 5, i32 0
  store i32 5, i32* %630, align 8
  br label %609

631:                                              ; preds = %620
  %632 = load %struct.WebPPicture*, %struct.WebPPicture** %36, align 8
  %633 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %632, i64 0, i32 2
  %634 = load i32, i32* %633, align 8
  %635 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %632, i64 0, i32 3
  %636 = load i32, i32* %635, align 4
  %637 = mul nsw i32 %636, %634
  %638 = add nsw i32 %637, -1
  %639 = sdiv i32 %638, 16
  %640 = add nsw i32 %639, 1
  %641 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %25, i64 0, i32 19
  %642 = tail call i32 @VP8LHashChainInit(%struct.VP8LHashChain* %641, i32 %637) #6
  %643 = icmp eq i32 %642, 0
  br i1 %643, label %853, label %644

644:                                              ; preds = %631
  %645 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %25, i64 0, i32 18, i64 0
  tail call void @VP8LBackwardRefsInit(%struct.VP8LBackwardRefs* %645, i32 %640) #6
  %646 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %25, i64 0, i32 18, i64 1
  tail call void @VP8LBackwardRefsInit(%struct.VP8LBackwardRefs* %646, i32 %640) #6
  %647 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %25, i64 0, i32 18, i64 2
  tail call void @VP8LBackwardRefsInit(%struct.VP8LBackwardRefs* %647, i32 %640) #6
  %648 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %25, i64 0, i32 18, i64 3
  tail call void @VP8LBackwardRefsInit(%struct.VP8LBackwardRefs* %648, i32 %640) #6
  %649 = call i32 @VP8LBitWriterInit(%struct.VP8LBitWriter* nonnull %12, i64 0) #6
  %650 = icmp eq i32 %649, 0
  br i1 %650, label %853, label %651

651:                                              ; preds = %644
  %652 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %0, i64 0, i32 21
  %653 = load i32, i32* %652, align 4
  %654 = icmp sgt i32 %653, 0
  br i1 %654, label %655, label %668

655:                                              ; preds = %651
  %656 = lshr i32 %610, 1
  %657 = icmp eq i32 %656, 0
  br i1 %657, label %666, label %658

658:                                              ; preds = %655
  %659 = sub nsw i32 %610, %656
  %660 = getelementptr inbounds %struct.StreamEncodeContext, %struct.StreamEncodeContext* %10, i64 0, i32 5, i64 0
  %661 = sext i32 %659 to i64
  %662 = getelementptr inbounds [6 x %struct.CrunchConfig], [6 x %struct.CrunchConfig]* %6, i64 0, i64 %661
  %663 = bitcast %struct.CrunchConfig* %660 to i8*
  %664 = bitcast %struct.CrunchConfig* %662 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %663, i8* align 8 %664, i64 24, i1 false)
  %665 = icmp eq i32 %656, 1
  br i1 %665, label %666, label %856

666:                                              ; preds = %658, %856, %864, %655
  %667 = getelementptr inbounds %struct.StreamEncodeContext, %struct.StreamEncodeContext* %10, i64 0, i32 6
  store i32 %656, i32* %667, align 4
  br label %668

668:                                              ; preds = %666, %651
  %669 = phi i32 [ %656, %666 ], [ 0, %651 ]
  %670 = sub nsw i32 %610, %669
  %671 = icmp sgt i32 %670, 0
  br i1 %671, label %672, label %701

672:                                              ; preds = %668
  %673 = zext i32 %670 to i64
  %674 = and i64 %673, 1
  %675 = icmp eq i32 %670, 1
  br i1 %675, label %693, label %676

676:                                              ; preds = %672
  %677 = sub nsw i64 %673, %674
  br label %678

678:                                              ; preds = %678, %676
  %679 = phi i64 [ 0, %676 ], [ %690, %678 ]
  %680 = phi i64 [ %677, %676 ], [ %691, %678 ]
  %681 = getelementptr inbounds %struct.StreamEncodeContext, %struct.StreamEncodeContext* %9, i64 0, i32 5, i64 %679
  %682 = getelementptr inbounds [6 x %struct.CrunchConfig], [6 x %struct.CrunchConfig]* %6, i64 0, i64 %679
  %683 = bitcast %struct.CrunchConfig* %681 to i8*
  %684 = bitcast %struct.CrunchConfig* %682 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %683, i8* align 16 %684, i64 24, i1 false)
  %685 = or i64 %679, 1
  %686 = getelementptr inbounds %struct.StreamEncodeContext, %struct.StreamEncodeContext* %9, i64 0, i32 5, i64 %685
  %687 = getelementptr inbounds [6 x %struct.CrunchConfig], [6 x %struct.CrunchConfig]* %6, i64 0, i64 %685
  %688 = bitcast %struct.CrunchConfig* %686 to i8*
  %689 = bitcast %struct.CrunchConfig* %687 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %688, i8* align 8 %689, i64 24, i1 false)
  %690 = add nuw nsw i64 %679, 2
  %691 = add i64 %680, -2
  %692 = icmp eq i64 %691, 0
  br i1 %692, label %693, label %678

693:                                              ; preds = %678, %672
  %694 = phi i64 [ 0, %672 ], [ %690, %678 ]
  %695 = icmp eq i64 %674, 0
  br i1 %695, label %701, label %696

696:                                              ; preds = %693
  %697 = getelementptr inbounds %struct.StreamEncodeContext, %struct.StreamEncodeContext* %9, i64 0, i32 5, i64 %694
  %698 = getelementptr inbounds [6 x %struct.CrunchConfig], [6 x %struct.CrunchConfig]* %6, i64 0, i64 %694
  %699 = bitcast %struct.CrunchConfig* %697 to i8*
  %700 = bitcast %struct.CrunchConfig* %698 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %699, i8* align 8 %700, i64 24, i1 false)
  br label %701

701:                                              ; preds = %696, %693, %668
  %702 = getelementptr inbounds %struct.StreamEncodeContext, %struct.StreamEncodeContext* %9, i64 0, i32 6
  store i32 %670, i32* %702, align 4
  %703 = icmp eq i32 %669, 0
  %704 = select i1 %703, i32 1, i32 2
  %705 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %1, i64 0, i32 19
  %706 = bitcast i32* %47 to i8*
  %707 = getelementptr inbounds %struct.WebPWorkerInterface, %struct.WebPWorkerInterface* %33, i64 0, i32 0
  br label %708

708:                                              ; preds = %701, %776
  %709 = phi i32 [ 0, %701 ], [ %783, %776 ]
  %710 = phi %struct.VP8LEncoder* [ null, %701 ], [ %777, %776 ]
  %711 = icmp eq i32 %709, 0
  %712 = select i1 %711, %struct.WebPWorker* %7, %struct.WebPWorker* %8
  %713 = select i1 %711, %struct.StreamEncodeContext* %9, %struct.StreamEncodeContext* %10
  %714 = getelementptr inbounds %struct.StreamEncodeContext, %struct.StreamEncodeContext* %713, i64 0, i32 0
  store %struct.WebPConfig* %0, %struct.WebPConfig** %714, align 8
  %715 = getelementptr inbounds %struct.StreamEncodeContext, %struct.StreamEncodeContext* %713, i64 0, i32 1
  store %struct.WebPPicture* %1, %struct.WebPPicture** %715, align 8
  %716 = getelementptr inbounds %struct.StreamEncodeContext, %struct.StreamEncodeContext* %713, i64 0, i32 4
  store i32 %3, i32* %716, align 8
  %717 = getelementptr inbounds %struct.StreamEncodeContext, %struct.StreamEncodeContext* %713, i64 0, i32 7
  store i32 %611, i32* %717, align 8
  %718 = load %struct.WebPAuxStats*, %struct.WebPAuxStats** %705, align 8
  br i1 %711, label %719, label %723

719:                                              ; preds = %708
  %720 = getelementptr inbounds %struct.StreamEncodeContext, %struct.StreamEncodeContext* %713, i64 0, i32 9
  store %struct.WebPAuxStats* %718, %struct.WebPAuxStats** %720, align 8
  %721 = getelementptr inbounds %struct.StreamEncodeContext, %struct.StreamEncodeContext* %713, i64 0, i32 2
  store %struct.VP8LBitWriter* %2, %struct.VP8LBitWriter** %721, align 8
  %722 = getelementptr inbounds %struct.StreamEncodeContext, %struct.StreamEncodeContext* %713, i64 0, i32 3
  store %struct.VP8LEncoder* %25, %struct.VP8LEncoder** %722, align 8
  br label %776

723:                                              ; preds = %708
  %724 = icmp eq %struct.WebPAuxStats* %718, null
  %725 = select i1 %724, %struct.WebPAuxStats* null, %struct.WebPAuxStats* %11
  %726 = getelementptr inbounds %struct.StreamEncodeContext, %struct.StreamEncodeContext* %713, i64 0, i32 9
  store %struct.WebPAuxStats* %725, %struct.WebPAuxStats** %726, align 8
  %727 = call i32 @VP8LBitWriterClone(%struct.VP8LBitWriter* %2, %struct.VP8LBitWriter* nonnull %12) #6
  %728 = icmp eq i32 %727, 0
  br i1 %728, label %853, label %729

729:                                              ; preds = %723
  %730 = getelementptr inbounds %struct.StreamEncodeContext, %struct.StreamEncodeContext* %713, i64 0, i32 2
  store %struct.VP8LBitWriter* %12, %struct.VP8LBitWriter** %730, align 8
  %731 = call i8* @WebPSafeCalloc(i64 1, i64 1304) #6
  %732 = icmp eq i8* %731, null
  br i1 %732, label %733, label %735

733:                                              ; preds = %729
  %734 = call i32 @WebPEncodingSetError(%struct.WebPPicture* %1, i32 1) #6
  br label %853

735:                                              ; preds = %729
  %736 = bitcast i8* %731 to %struct.WebPConfig**
  store %struct.WebPConfig* %0, %struct.WebPConfig** %736, align 8
  %737 = getelementptr inbounds i8, i8* %731, i64 8
  %738 = bitcast i8* %737 to %struct.WebPPicture**
  store %struct.WebPPicture* %1, %struct.WebPPicture** %738, align 8
  %739 = getelementptr inbounds i8, i8* %731, i64 24
  %740 = bitcast i8* %739 to i32*
  store i32 0, i32* %740, align 8
  call void @VP8LEncDspInit() #6
  %741 = load %struct.WebPPicture*, %struct.WebPPicture** %738, align 8
  %742 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %741, i64 0, i32 2
  %743 = load i32, i32* %742, align 8
  %744 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %741, i64 0, i32 3
  %745 = load i32, i32* %744, align 4
  %746 = mul nsw i32 %745, %743
  %747 = add nsw i32 %746, -1
  %748 = sdiv i32 %747, 16
  %749 = add nsw i32 %748, 1
  %750 = getelementptr inbounds i8, i8* %731, i64 1288
  %751 = bitcast i8* %750 to %struct.VP8LHashChain*
  %752 = call i32 @VP8LHashChainInit(%struct.VP8LHashChain* %751, i32 %746) #6
  %753 = icmp eq i32 %752, 0
  %754 = bitcast i8* %731 to %struct.VP8LEncoder*
  br i1 %753, label %851, label %755

755:                                              ; preds = %735
  %756 = getelementptr inbounds i8, i8* %731, i64 1128
  %757 = bitcast i8* %756 to %struct.VP8LBackwardRefs*
  call void @VP8LBackwardRefsInit(%struct.VP8LBackwardRefs* %757, i32 %749) #6
  %758 = getelementptr inbounds i8, i8* %731, i64 1168
  %759 = bitcast i8* %758 to %struct.VP8LBackwardRefs*
  call void @VP8LBackwardRefsInit(%struct.VP8LBackwardRefs* %759, i32 %749) #6
  %760 = getelementptr inbounds i8, i8* %731, i64 1208
  %761 = bitcast i8* %760 to %struct.VP8LBackwardRefs*
  call void @VP8LBackwardRefsInit(%struct.VP8LBackwardRefs* %761, i32 %749) #6
  %762 = getelementptr inbounds i8, i8* %731, i64 1248
  %763 = bitcast i8* %762 to %struct.VP8LBackwardRefs*
  call void @VP8LBackwardRefsInit(%struct.VP8LBackwardRefs* %763, i32 %749) #6
  %764 = load i32, i32* %265, align 4
  %765 = getelementptr inbounds i8, i8* %731, i64 68
  %766 = bitcast i8* %765 to i32*
  store i32 %764, i32* %766, align 4
  %767 = load i32, i32* %272, align 8
  %768 = getelementptr inbounds i8, i8* %731, i64 72
  %769 = bitcast i8* %768 to i32*
  store i32 %767, i32* %769, align 8
  %770 = load i32, i32* %48, align 8
  %771 = getelementptr inbounds i8, i8* %731, i64 96
  %772 = bitcast i8* %771 to i32*
  store i32 %770, i32* %772, align 8
  %773 = getelementptr inbounds i8, i8* %731, i64 100
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %773, i8* align 4 %706, i64 1024, i1 false)
  %774 = getelementptr inbounds %struct.StreamEncodeContext, %struct.StreamEncodeContext* %713, i64 0, i32 3
  %775 = bitcast %struct.VP8LEncoder** %774 to i8**
  store i8* %731, i8** %775, align 8
  br label %776

776:                                              ; preds = %755, %719
  %777 = phi %struct.VP8LEncoder* [ %710, %719 ], [ %754, %755 ]
  %778 = load void (%struct.WebPWorker*)*, void (%struct.WebPWorker*)** %707, align 8
  call void %778(%struct.WebPWorker* nonnull %712) #6
  %779 = getelementptr inbounds %struct.WebPWorker, %struct.WebPWorker* %712, i64 0, i32 3
  %780 = bitcast i8** %779 to %struct.StreamEncodeContext**
  store %struct.StreamEncodeContext* %713, %struct.StreamEncodeContext** %780, align 8
  %781 = getelementptr inbounds %struct.WebPWorker, %struct.WebPWorker* %712, i64 0, i32 4
  store i8* null, i8** %781, align 8
  %782 = getelementptr inbounds %struct.WebPWorker, %struct.WebPWorker* %712, i64 0, i32 2
  store i32 (i8*, i8*)* @EncodeStreamHook, i32 (i8*, i8*)** %782, align 8
  %783 = add nuw nsw i32 %709, 1
  %784 = icmp ult i32 %783, %704
  br i1 %784, label %708, label %785

785:                                              ; preds = %776
  %786 = icmp ne i32 %669, 0
  br i1 %786, label %787, label %796

787:                                              ; preds = %785
  %788 = getelementptr inbounds %struct.WebPWorkerInterface, %struct.WebPWorkerInterface* %33, i64 0, i32 1
  %789 = load i32 (%struct.WebPWorker*)*, i32 (%struct.WebPWorker*)** %788, align 8
  %790 = call i32 %789(%struct.WebPWorker* nonnull %8) #6
  %791 = icmp eq i32 %790, 0
  br i1 %791, label %853, label %792

792:                                              ; preds = %787
  %793 = getelementptr inbounds %struct.StreamEncodeContext, %struct.StreamEncodeContext* %10, i64 0, i32 8
  store i32 0, i32* %793, align 4
  %794 = getelementptr inbounds %struct.WebPWorkerInterface, %struct.WebPWorkerInterface* %33, i64 0, i32 3
  %795 = load void (%struct.WebPWorker*)*, void (%struct.WebPWorker*)** %794, align 8
  call void %795(%struct.WebPWorker* nonnull %8) #6
  br label %796

796:                                              ; preds = %792, %785
  %797 = getelementptr inbounds %struct.WebPWorkerInterface, %struct.WebPWorkerInterface* %33, i64 0, i32 4
  %798 = load void (%struct.WebPWorker*)*, void (%struct.WebPWorker*)** %797, align 8
  call void %798(%struct.WebPWorker* nonnull %7) #6
  %799 = getelementptr inbounds %struct.WebPWorkerInterface, %struct.WebPWorkerInterface* %33, i64 0, i32 2
  %800 = load i32 (%struct.WebPWorker*)*, i32 (%struct.WebPWorker*)** %799, align 8
  %801 = call i32 %800(%struct.WebPWorker* nonnull %7) #6
  %802 = getelementptr inbounds %struct.WebPWorkerInterface, %struct.WebPWorkerInterface* %33, i64 0, i32 5
  %803 = load void (%struct.WebPWorker*)*, void (%struct.WebPWorker*)** %802, align 8
  call void %803(%struct.WebPWorker* nonnull %7) #6
  br i1 %786, label %804, label %846

804:                                              ; preds = %796
  %805 = load i32 (%struct.WebPWorker*)*, i32 (%struct.WebPWorker*)** %799, align 8
  %806 = call i32 %805(%struct.WebPWorker* nonnull %8) #6
  %807 = load void (%struct.WebPWorker*)*, void (%struct.WebPWorker*)** %802, align 8
  call void %807(%struct.WebPWorker* nonnull %8) #6
  %808 = icmp ne i32 %801, 0
  %809 = icmp ne i32 %806, 0
  %810 = and i1 %808, %809
  br i1 %810, label %817, label %811

811:                                              ; preds = %804
  %812 = getelementptr inbounds %struct.StreamEncodeContext, %struct.StreamEncodeContext* %10, i64 0, i32 8
  %813 = load i32, i32* %812, align 4
  %814 = getelementptr inbounds %struct.StreamEncodeContext, %struct.StreamEncodeContext* %9, i64 0, i32 8
  %815 = load i32, i32* %814, align 4
  %816 = select i1 %808, i32 %813, i32 %815
  br label %853

817:                                              ; preds = %804
  %818 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %12, i64 0, i32 3
  %819 = bitcast i8** %818 to i64*
  %820 = load i64, i64* %819, align 8
  %821 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %12, i64 0, i32 2
  %822 = bitcast i8** %821 to i64*
  %823 = load i64, i64* %822, align 8
  %824 = sub i64 %820, %823
  %825 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %12, i64 0, i32 1
  %826 = load i32, i32* %825, align 8
  %827 = add nsw i32 %826, 7
  %828 = ashr i32 %827, 3
  %829 = sext i32 %828 to i64
  %830 = add nsw i64 %824, %829
  %831 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %2, i64 0, i32 3
  %832 = bitcast i8** %831 to i64*
  %833 = load i64, i64* %832, align 8
  %834 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %2, i64 0, i32 2
  %835 = bitcast i8** %834 to i64*
  %836 = load i64, i64* %835, align 8
  %837 = sub i64 %833, %836
  %838 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %2, i64 0, i32 1
  %839 = load i32, i32* %838, align 8
  %840 = add nsw i32 %839, 7
  %841 = ashr i32 %840, 3
  %842 = sext i32 %841 to i64
  %843 = add nsw i64 %837, %842
  %844 = icmp ult i64 %830, %843
  br i1 %844, label %845, label %853

845:                                              ; preds = %817
  call void @VP8LBitWriterSwap(%struct.VP8LBitWriter* %2, %struct.VP8LBitWriter* nonnull %12) #6
  br label %853

846:                                              ; preds = %796
  %847 = icmp eq i32 %801, 0
  br i1 %847, label %848, label %853

848:                                              ; preds = %846
  %849 = getelementptr inbounds %struct.StreamEncodeContext, %struct.StreamEncodeContext* %9, i64 0, i32 8
  %850 = load i32, i32* %849, align 4
  br label %853

851:                                              ; preds = %735
  %852 = bitcast i8* %731 to %struct.VP8LEncoder*
  br label %853

853:                                              ; preds = %851, %723, %631, %289, %848, %846, %644, %24, %787, %817, %845, %811, %733
  %854 = phi i32 [ 0, %846 ], [ %850, %848 ], [ 1, %644 ], [ 1, %24 ], [ 1, %787 ], [ %816, %811 ], [ 0, %845 ], [ 0, %817 ], [ 1, %733 ], [ 1, %289 ], [ 1, %631 ], [ 1, %723 ], [ 1, %851 ]
  %855 = phi %struct.VP8LEncoder* [ %777, %846 ], [ %777, %848 ], [ null, %644 ], [ null, %24 ], [ %777, %787 ], [ %777, %811 ], [ %777, %845 ], [ %777, %817 ], [ null, %733 ], [ null, %289 ], [ null, %631 ], [ %852, %851 ], [ %710, %723 ]
  call void @VP8LBitWriterWipeOut(%struct.VP8LBitWriter* nonnull %12) #6
  call fastcc void @VP8LEncoderDelete(%struct.VP8LEncoder* %25)
  call fastcc void @VP8LEncoderDelete(%struct.VP8LEncoder* %855)
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %32) #6
  call void @llvm.lifetime.end.p0i8(i64 188, i8* nonnull %31) #6
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %30) #6
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %29) #6
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %28) #6
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %27) #6
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %26) #6
  ret i32 %854

856:                                              ; preds = %658
  %857 = getelementptr inbounds %struct.StreamEncodeContext, %struct.StreamEncodeContext* %10, i64 0, i32 5, i64 1
  %858 = add nsw i32 %659, 1
  %859 = sext i32 %858 to i64
  %860 = getelementptr inbounds [6 x %struct.CrunchConfig], [6 x %struct.CrunchConfig]* %6, i64 0, i64 %859
  %861 = bitcast %struct.CrunchConfig* %857 to i8*
  %862 = bitcast %struct.CrunchConfig* %860 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %861, i8* align 8 %862, i64 24, i1 false)
  %863 = icmp eq i32 %656, 2
  br i1 %863, label %666, label %864

864:                                              ; preds = %856
  %865 = getelementptr inbounds %struct.StreamEncodeContext, %struct.StreamEncodeContext* %10, i64 0, i32 5, i64 2
  %866 = add nsw i32 %659, 2
  %867 = sext i32 %866 to i64
  %868 = getelementptr inbounds [6 x %struct.CrunchConfig], [6 x %struct.CrunchConfig]* %6, i64 0, i64 %867
  %869 = bitcast %struct.CrunchConfig* %865 to i8*
  %870 = bitcast %struct.CrunchConfig* %868 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %869, i8* align 8 %870, i64 24, i1 false)
  br label %666

871:                                              ; preds = %616
  %872 = getelementptr inbounds [6 x %struct.CrunchConfig], [6 x %struct.CrunchConfig]* %6, i64 0, i64 %617, i32 1, i64 1, i32 0
  store i32 4, i32* %872, align 4
  %873 = getelementptr inbounds [6 x %struct.CrunchConfig], [6 x %struct.CrunchConfig]* %6, i64 0, i64 %617, i32 1, i64 1, i32 1
  store i32 %612, i32* %873, align 4
  br label %620

874:                                              ; preds = %571
  %875 = getelementptr inbounds i32, i32* %565, i64 %578
  %876 = load i32, i32* %875, align 4
  %877 = getelementptr inbounds i32, i32* %570, i64 %578
  %878 = load i32, i32* %877, align 4
  %879 = or i32 %878, %876
  %880 = icmp eq i32 %879, 0
  %881 = add nuw nsw i64 %580, 3
  br i1 %880, label %882, label %588

882:                                              ; preds = %874
  %883 = icmp eq i64 %881, 256
  br i1 %883, label %588, label %579
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare %struct.WebPWorkerInterface* @WebPGetWorkerInterface() local_unnamed_addr #2

declare i32 @VP8LBitWriterInit(%struct.VP8LBitWriter*, i64) local_unnamed_addr #2

declare i32 @VP8LBitWriterClone(%struct.VP8LBitWriter*, %struct.VP8LBitWriter*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal i32 @EncodeStreamHook(i8* nocapture, i8* nocapture readnone) #0 {
  %3 = alloca [2048 x i16], align 16
  %4 = alloca [256 x i32], align 16
  %5 = alloca [256 x i32], align 16
  %6 = alloca %struct.VP8LBitWriter, align 8
  %7 = alloca %struct.VP8LBitWriter, align 8
  %8 = alloca %struct.VP8LHashChain, align 8
  %9 = alloca i32, align 4
  %10 = alloca %struct.VP8LBitWriter, align 8
  %11 = alloca %struct.VP8LBitWriter, align 8
  %12 = bitcast i8* %0 to %struct.WebPConfig**
  %13 = load %struct.WebPConfig*, %struct.WebPConfig** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 8
  %15 = bitcast i8* %14 to %struct.WebPPicture**
  %16 = load %struct.WebPPicture*, %struct.WebPPicture** %15, align 8
  %17 = getelementptr inbounds i8, i8* %0, i64 16
  %18 = bitcast i8* %17 to %struct.VP8LBitWriter**
  %19 = load %struct.VP8LBitWriter*, %struct.VP8LBitWriter** %18, align 8
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %struct.VP8LEncoder**
  %22 = load %struct.VP8LEncoder*, %struct.VP8LEncoder** %21, align 8
  %23 = getelementptr inbounds i8, i8* %0, i64 32
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds i8, i8* %0, i64 36
  %27 = bitcast i8* %26 to %struct.CrunchConfig*
  %28 = getelementptr inbounds i8, i8* %0, i64 180
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds i8, i8* %0, i64 184
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 8
  %34 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %13, i64 0, i32 1
  %35 = load float, float* %34, align 4
  %36 = fptosi float %35 to i32
  %37 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %13, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 0
  %40 = zext i1 %39 to i32
  %41 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %16, i64 0, i32 3
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %19, i64 0, i32 3
  %44 = bitcast i8** %43 to i64*
  %45 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %19, i64 0, i32 2
  %46 = bitcast i8** %45 to i64*
  %47 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %19, i64 0, i32 1
  %48 = bitcast %struct.VP8LBitWriter* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %48) #6
  %49 = bitcast %struct.VP8LBitWriter* %19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %48, i8* align 8 %49, i64 48, i1 false)
  %50 = bitcast %struct.VP8LBitWriter* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %50) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %50, i8 -86, i64 48, i1 false)
  %51 = call i32 @VP8LBitWriterInit(%struct.VP8LBitWriter* nonnull %11, i64 0) #6
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %1318, label %53

53:                                               ; preds = %2
  %54 = icmp sgt i32 %30, 1
  br i1 %54, label %55, label %58

55:                                               ; preds = %53
  %56 = call i32 @VP8LBitWriterClone(%struct.VP8LBitWriter* %19, %struct.VP8LBitWriter* nonnull %11) #6
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %1318, label %60

58:                                               ; preds = %53
  %59 = icmp eq i32 %30, 1
  br i1 %59, label %60, label %1317

60:                                               ; preds = %55, %58
  %61 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %22, i64 0, i32 15
  %62 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %22, i64 0, i32 13
  %63 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %22, i64 0, i32 14
  %64 = icmp eq i32 %33, 0
  %65 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %22, i64 0, i32 12
  %66 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %22, i64 0, i32 11
  %67 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %22, i64 0, i32 18, i64 0
  %68 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %22, i64 0, i32 18, i64 1
  %69 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %22, i64 0, i32 3
  %70 = bitcast [256 x i32]* %5 to i8*
  %71 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %22, i64 0, i32 16
  %72 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %22, i64 0, i32 17, i64 0
  %73 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %19, i64 0, i32 0
  %74 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 0
  %75 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %22, i64 0, i32 19
  %76 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %22, i64 0, i32 1
  %77 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %22, i64 0, i32 2
  %78 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %22, i64 0, i32 8
  %79 = bitcast [2048 x i16]* %3 to i8*
  %80 = bitcast [256 x i32]* %4 to i8*
  %81 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 0
  %82 = bitcast i32* %72 to i8*
  %83 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %22, i64 0, i32 17, i64 1
  %84 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %22, i64 0, i32 17, i64 2
  %85 = icmp eq i32 %25, 0
  %86 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %22, i64 0, i32 10
  %87 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %22, i64 0, i32 0
  %88 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %22, i64 0, i32 4
  %89 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %22, i64 0, i32 5
  %90 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %22, i64 0, i32 9
  %91 = bitcast %struct.VP8LBitWriter* %6 to i8*
  %92 = bitcast %struct.VP8LBitWriter* %7 to i8*
  %93 = bitcast %struct.VP8LHashChain* %8 to i8*
  %94 = bitcast i32* %9 to i8*
  %95 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %22, i64 0, i32 18, i64 2
  %96 = zext i32 %30 to i64
  %97 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 1
  %98 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 1
  %99 = getelementptr %struct.VP8LEncoder, %struct.VP8LEncoder* %22, i64 0, i32 17, i64 0
  %100 = xor i1 %39, true
  %101 = bitcast i32* %65 to <4 x i32>*
  br label %102

102:                                              ; preds = %1314, %60
  %103 = phi i64 [ 0, %60 ], [ %1315, %1314 ]
  %104 = phi i64 [ -1, %60 ], [ %1312, %1314 ]
  %105 = getelementptr inbounds %struct.CrunchConfig, %struct.CrunchConfig* %27, i64 %103, i32 0
  %106 = load i32, i32* %105, align 4
  %107 = or i32 %106, 1
  %108 = icmp eq i32 %107, 5
  %109 = icmp eq i32 %107, 3
  %110 = or i32 %106, 2
  %111 = icmp eq i32 %110, 3
  %112 = icmp eq i32 %106, 5
  %113 = or i1 %112, %111
  %114 = and i1 %64, %113
  %115 = and i1 %114, %100
  %116 = insertelement <4 x i1> undef, i1 %115, i32 0
  %117 = insertelement <4 x i1> %116, i1 %109, i32 1
  %118 = insertelement <4 x i1> %117, i1 %113, i32 2
  %119 = insertelement <4 x i1> %118, i1 %108, i32 3
  %120 = zext <4 x i1> %119 to <4 x i32>
  store <4 x i32> %120, <4 x i32>* %101, align 8
  store i32 0, i32* %66, align 4
  call void @VP8LBackwardRefsClear(%struct.VP8LBackwardRefs* %67) #6
  call void @VP8LBackwardRefsClear(%struct.VP8LBackwardRefs* %68) #6
  store i32 0, i32* %69, align 8
  %121 = load i32, i32* %61, align 4
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %711, label %123

123:                                              ; preds = %102
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %70) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %70, i8 -86, i64 1024, i1 false) #6
  %124 = load i32, i32* %71, align 8
  %125 = load i32, i32* %47, align 8
  %126 = icmp sgt i32 %125, 31
  br i1 %126, label %127, label %129

127:                                              ; preds = %123
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %19) #6
  %128 = load i32, i32* %47, align 8
  br label %129

129:                                              ; preds = %127, %123
  %130 = phi i32 [ %128, %127 ], [ %125, %123 ]
  %131 = zext i32 %130 to i64
  %132 = shl i64 1, %131
  %133 = load i64, i64* %73, align 8
  %134 = or i64 %132, %133
  store i64 %134, i64* %73, align 8
  %135 = add nsw i32 %130, 1
  store i32 %135, i32* %47, align 8
  %136 = icmp sgt i32 %130, 30
  br i1 %136, label %137, label %140

137:                                              ; preds = %129
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %19) #6
  %138 = load i32, i32* %47, align 8
  %139 = load i64, i64* %73, align 8
  br label %140

140:                                              ; preds = %137, %129
  %141 = phi i64 [ %139, %137 ], [ %134, %129 ]
  %142 = phi i32 [ %138, %137 ], [ %135, %129 ]
  %143 = zext i32 %142 to i64
  %144 = shl i64 3, %143
  %145 = or i64 %144, %141
  store i64 %145, i64* %73, align 8
  %146 = add nsw i32 %142, 2
  store i32 %146, i32* %47, align 8
  %147 = add i32 %124, -1
  %148 = icmp sgt i32 %146, 31
  br i1 %148, label %149, label %152

149:                                              ; preds = %140
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %19) #6
  %150 = load i32, i32* %47, align 8
  %151 = load i64, i64* %73, align 8
  br label %152

152:                                              ; preds = %149, %140
  %153 = phi i64 [ %151, %149 ], [ %145, %140 ]
  %154 = phi i32 [ %150, %149 ], [ %146, %140 ]
  %155 = zext i32 %147 to i64
  %156 = zext i32 %154 to i64
  %157 = shl i64 %155, %156
  %158 = or i64 %157, %153
  store i64 %158, i64* %73, align 8
  %159 = add nsw i32 %154, 8
  store i32 %159, i32* %47, align 8
  %160 = icmp sgt i32 %147, 0
  br i1 %160, label %161, label %242

161:                                              ; preds = %152
  %162 = sext i32 %147 to i64
  %163 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %22, i64 0, i32 17, i64 %162
  %164 = load i32, i32* %163, align 4
  %165 = icmp ult i32 %147, 8
  br i1 %165, label %222, label %166

166:                                              ; preds = %161
  %167 = getelementptr i32, i32* %98, i64 %162
  %168 = getelementptr %struct.VP8LEncoder, %struct.VP8LEncoder* %22, i64 0, i32 17, i64 %162
  %169 = icmp ult i32* %97, %168
  %170 = icmp ult i32* %99, %167
  %171 = and i1 %169, %170
  br i1 %171, label %222, label %172

172:                                              ; preds = %166
  %173 = and i64 %162, -8
  %174 = sub nsw i64 %162, %173
  %175 = insertelement <4 x i32> undef, i32 %164, i32 3
  br label %176

176:                                              ; preds = %176, %172
  %177 = phi i64 [ 0, %172 ], [ %217, %176 ]
  %178 = phi <4 x i32> [ %175, %172 ], [ %189, %176 ]
  %179 = sub i64 %162, %177
  %180 = add nsw i64 %179, -1
  %181 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %22, i64 0, i32 17, i64 %180
  %182 = getelementptr inbounds i32, i32* %181, i64 -3
  %183 = bitcast i32* %182 to <4 x i32>*
  %184 = load <4 x i32>, <4 x i32>* %183, align 4, !alias.scope !6
  %185 = shufflevector <4 x i32> %184, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %186 = getelementptr inbounds i32, i32* %181, i64 -7
  %187 = bitcast i32* %186 to <4 x i32>*
  %188 = load <4 x i32>, <4 x i32>* %187, align 4, !alias.scope !6
  %189 = shufflevector <4 x i32> %188, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %190 = shufflevector <4 x i32> %178, <4 x i32> %185, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %191 = shufflevector <4 x i32> %185, <4 x i32> %189, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %192 = or <4 x i32> %190, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %193 = or <4 x i32> %191, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %194 = and <4 x i32> %185, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %195 = and <4 x i32> %189, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %196 = sub <4 x i32> %192, %194
  %197 = sub <4 x i32> %193, %195
  %198 = or <4 x i32> %190, <i32 65280, i32 65280, i32 65280, i32 65280>
  %199 = or <4 x i32> %191, <i32 65280, i32 65280, i32 65280, i32 65280>
  %200 = and <4 x i32> %185, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %201 = and <4 x i32> %189, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %202 = sub <4 x i32> %198, %200
  %203 = sub <4 x i32> %199, %201
  %204 = and <4 x i32> %196, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %205 = and <4 x i32> %197, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %206 = and <4 x i32> %202, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %207 = and <4 x i32> %203, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %208 = or <4 x i32> %204, %206
  %209 = or <4 x i32> %205, %207
  %210 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %179
  %211 = shufflevector <4 x i32> %208, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %212 = getelementptr inbounds i32, i32* %210, i64 -3
  %213 = bitcast i32* %212 to <4 x i32>*
  store <4 x i32> %211, <4 x i32>* %213, align 4, !alias.scope !9, !noalias !6
  %214 = shufflevector <4 x i32> %209, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %215 = getelementptr inbounds i32, i32* %210, i64 -7
  %216 = bitcast i32* %215 to <4 x i32>*
  store <4 x i32> %214, <4 x i32>* %216, align 4, !alias.scope !9, !noalias !6
  %217 = add i64 %177, 8
  %218 = icmp eq i64 %217, %173
  br i1 %218, label %219, label %176, !llvm.loop !11

219:                                              ; preds = %176
  %220 = icmp eq i64 %173, %162
  %221 = extractelement <4 x i32> %188, i32 0
  br i1 %220, label %242, label %222

222:                                              ; preds = %219, %166, %161
  %223 = phi i32 [ %164, %161 ], [ %164, %166 ], [ %221, %219 ]
  %224 = phi i64 [ %162, %161 ], [ %162, %166 ], [ %174, %219 ]
  br label %225

225:                                              ; preds = %222, %225
  %226 = phi i32 [ %230, %225 ], [ %223, %222 ]
  %227 = phi i64 [ %228, %225 ], [ %224, %222 ]
  %228 = add nsw i64 %227, -1
  %229 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %22, i64 0, i32 17, i64 %228
  %230 = load i32, i32* %229, align 4
  %231 = or i32 %226, 16711935
  %232 = and i32 %230, -16711936
  %233 = sub i32 %231, %232
  %234 = or i32 %226, 65280
  %235 = and i32 %230, 16711935
  %236 = sub i32 %234, %235
  %237 = and i32 %233, -16711936
  %238 = and i32 %236, 16711935
  %239 = or i32 %237, %238
  %240 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %227
  store i32 %239, i32* %240, align 4
  %241 = icmp sgt i64 %228, 0
  br i1 %241, label %225, label %242, !llvm.loop !12

242:                                              ; preds = %225, %219, %152
  %243 = load i32, i32* %72, align 4
  store i32 %243, i32* %74, align 16
  %244 = call fastcc i32 @EncodeImageNoHuffman(%struct.VP8LBitWriter* %19, i32* nonnull %74, %struct.VP8LHashChain* %75, %struct.VP8LBackwardRefs* %67, i32 %124, i32 1, i32 20, i32 %40) #6
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %70) #6
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %246, label %1318

246:                                              ; preds = %242
  %247 = load %struct.WebPPicture*, %struct.WebPPicture** %76, align 8
  %248 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %247, i64 0, i32 2
  %249 = load i32, i32* %248, align 8
  %250 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %247, i64 0, i32 3
  %251 = load i32, i32* %250, align 4
  %252 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %247, i64 0, i32 12
  %253 = load i32*, i32** %252, align 8
  %254 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %247, i64 0, i32 13
  %255 = load i32, i32* %254, align 8
  %256 = load i32, i32* %71, align 8
  %257 = icmp slt i32 %256, 5
  %258 = icmp slt i32 %256, 3
  %259 = select i1 %258, i32 3, i32 2
  %260 = icmp slt i32 %256, 17
  %261 = zext i1 %260 to i32
  %262 = select i1 %257, i32 %259, i32 %261
  %263 = shl i32 1, %262
  %264 = add i32 %249, -1
  %265 = add i32 %264, %263
  %266 = lshr i32 %265, %262
  %267 = call fastcc i32 @AllocateTransformBuffer(%struct.VP8LEncoder* %22, i32 %266, i32 %251) #6
  %268 = icmp eq i32 %267, 0
  br i1 %268, label %269, label %1318

269:                                              ; preds = %246
  %270 = load i32*, i32** %77, align 8
  %271 = load i32, i32* %78, align 8
  %272 = sext i32 %249 to i64
  %273 = call i8* @WebPSafeMalloc(i64 %272, i64 1) #6
  %274 = icmp eq i8* %273, null
  br i1 %274, label %703, label %275

275:                                              ; preds = %269
  %276 = icmp slt i32 %256, 4
  br i1 %276, label %277, label %323

277:                                              ; preds = %275
  %278 = icmp sgt i32 %251, 0
  br i1 %278, label %279, label %704

279:                                              ; preds = %277
  %280 = load i32, i32* %72, align 4
  %281 = icmp sgt i32 %249, 0
  %282 = zext i32 %255 to i64
  %283 = zext i32 %271 to i64
  %284 = zext i32 %249 to i64
  br label %285

285:                                              ; preds = %315, %279
  %286 = phi i32 [ 0, %279 ], [ %317, %315 ]
  %287 = phi i32 [ %280, %279 ], [ %316, %315 ]
  %288 = phi i32 [ 0, %279 ], [ %321, %315 ]
  %289 = phi i32* [ %253, %279 ], [ %319, %315 ]
  %290 = phi i32* [ %270, %279 ], [ %320, %315 ]
  br i1 %281, label %291, label %315

291:                                              ; preds = %285, %308
  %292 = phi i64 [ %313, %308 ], [ 0, %285 ]
  %293 = phi i32 [ %310, %308 ], [ %286, %285 ]
  %294 = phi i32 [ %309, %308 ], [ %287, %285 ]
  %295 = getelementptr inbounds i32, i32* %289, i64 %292
  %296 = load i32, i32* %295, align 4
  %297 = icmp eq i32 %296, %294
  br i1 %297, label %308, label %298

298:                                              ; preds = %291
  %299 = load i32, i32* %72, align 4
  %300 = icmp eq i32 %299, %296
  br i1 %300, label %308, label %301

301:                                              ; preds = %298
  %302 = load i32, i32* %83, align 4
  %303 = icmp eq i32 %302, %296
  br i1 %303, label %308, label %304

304:                                              ; preds = %301
  %305 = load i32, i32* %84, align 4
  %306 = icmp eq i32 %305, %296
  %307 = select i1 %306, i32 2, i32 3
  br label %308

308:                                              ; preds = %304, %301, %298, %291
  %309 = phi i32 [ %294, %291 ], [ %296, %298 ], [ %296, %301 ], [ %296, %304 ]
  %310 = phi i32 [ %293, %291 ], [ 0, %298 ], [ 1, %301 ], [ %307, %304 ]
  %311 = trunc i32 %310 to i8
  %312 = getelementptr inbounds i8, i8* %273, i64 %292
  store i8 %311, i8* %312, align 1
  %313 = add nuw nsw i64 %292, 1
  %314 = icmp eq i64 %313, %284
  br i1 %314, label %315, label %291

315:                                              ; preds = %308, %285
  %316 = phi i32 [ %287, %285 ], [ %309, %308 ]
  %317 = phi i32 [ %286, %285 ], [ %310, %308 ]
  %318 = load void (i8*, i32, i32, i32*)*, void (i8*, i32, i32, i32*)** @VP8LBundleColorMap, align 8
  call void %318(i8* nonnull %273, i32 %249, i32 %262, i32* %290) #6
  %319 = getelementptr inbounds i32, i32* %289, i64 %282
  %320 = getelementptr inbounds i32, i32* %290, i64 %283
  %321 = add nuw nsw i32 %288, 1
  %322 = icmp eq i32 %321, %251
  br i1 %322, label %704, label %285

323:                                              ; preds = %275
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %79) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %79, i8 -1, i64 4096, i1 false) #6
  %324 = zext i32 %256 to i64
  br label %325

325:                                              ; preds = %335, %323
  %326 = phi i64 [ 0, %323 ], [ %337, %335 ]
  %327 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %22, i64 0, i32 17, i64 %326
  %328 = load i32, i32* %327, align 4
  %329 = lshr i32 %328, 8
  %330 = and i32 %329, 255
  %331 = zext i32 %330 to i64
  %332 = getelementptr inbounds [2048 x i16], [2048 x i16]* %3, i64 0, i64 %331
  %333 = load i16, i16* %332, align 2
  %334 = icmp eq i16 %333, -1
  br i1 %334, label %335, label %671

335:                                              ; preds = %325
  %336 = trunc i64 %326 to i16
  store i16 %336, i16* %332, align 2
  %337 = add nuw nsw i64 %326, 1
  %338 = icmp eq i64 %337, %324
  br i1 %338, label %339, label %325

339:                                              ; preds = %335
  %340 = icmp sgt i32 %251, 0
  br i1 %340, label %341, label %670

341:                                              ; preds = %339
  %342 = load i32, i32* %72, align 4
  %343 = icmp sgt i32 %249, 0
  %344 = zext i32 %255 to i64
  %345 = zext i32 %271 to i64
  %346 = zext i32 %249 to i64
  %347 = and i64 %346, 1
  %348 = icmp eq i32 %249, 1
  %349 = sub nsw i64 %346, %347
  %350 = icmp eq i64 %347, 0
  br label %351

351:                                              ; preds = %404, %341
  %352 = phi i32 [ 0, %341 ], [ %406, %404 ]
  %353 = phi i32 [ %342, %341 ], [ %405, %404 ]
  %354 = phi i32 [ 0, %341 ], [ %410, %404 ]
  %355 = phi i32* [ %253, %341 ], [ %408, %404 ]
  %356 = phi i32* [ %270, %341 ], [ %409, %404 ]
  br i1 %343, label %357, label %404

357:                                              ; preds = %351
  br i1 %348, label %382, label %358

358:                                              ; preds = %357, %1363
  %359 = phi i64 [ %1368, %1363 ], [ 0, %357 ]
  %360 = phi i32 [ %1365, %1363 ], [ %352, %357 ]
  %361 = phi i32 [ %1364, %1363 ], [ %353, %357 ]
  %362 = phi i64 [ %1369, %1363 ], [ %349, %357 ]
  %363 = getelementptr inbounds i32, i32* %355, i64 %359
  %364 = load i32, i32* %363, align 4
  %365 = icmp eq i32 %364, %361
  br i1 %365, label %373, label %366

366:                                              ; preds = %358
  %367 = lshr i32 %364, 8
  %368 = and i32 %367, 255
  %369 = zext i32 %368 to i64
  %370 = getelementptr inbounds [2048 x i16], [2048 x i16]* %3, i64 0, i64 %369
  %371 = load i16, i16* %370, align 2
  %372 = zext i16 %371 to i32
  br label %373

373:                                              ; preds = %366, %358
  %374 = phi i32 [ %364, %366 ], [ %361, %358 ]
  %375 = phi i32 [ %372, %366 ], [ %360, %358 ]
  %376 = trunc i32 %375 to i8
  %377 = getelementptr inbounds i8, i8* %273, i64 %359
  store i8 %376, i8* %377, align 1
  %378 = or i64 %359, 1
  %379 = getelementptr inbounds i32, i32* %355, i64 %378
  %380 = load i32, i32* %379, align 4
  %381 = icmp eq i32 %380, %374
  br i1 %381, label %1363, label %1356

382:                                              ; preds = %1363, %357
  %383 = phi i32 [ undef, %357 ], [ %1364, %1363 ]
  %384 = phi i32 [ undef, %357 ], [ %1365, %1363 ]
  %385 = phi i64 [ 0, %357 ], [ %1368, %1363 ]
  %386 = phi i32 [ %352, %357 ], [ %1365, %1363 ]
  %387 = phi i32 [ %353, %357 ], [ %1364, %1363 ]
  br i1 %350, label %404, label %388

388:                                              ; preds = %382
  %389 = getelementptr inbounds i32, i32* %355, i64 %385
  %390 = load i32, i32* %389, align 4
  %391 = icmp eq i32 %390, %387
  br i1 %391, label %399, label %392

392:                                              ; preds = %388
  %393 = lshr i32 %390, 8
  %394 = and i32 %393, 255
  %395 = zext i32 %394 to i64
  %396 = getelementptr inbounds [2048 x i16], [2048 x i16]* %3, i64 0, i64 %395
  %397 = load i16, i16* %396, align 2
  %398 = zext i16 %397 to i32
  br label %399

399:                                              ; preds = %392, %388
  %400 = phi i32 [ %390, %392 ], [ %387, %388 ]
  %401 = phi i32 [ %398, %392 ], [ %386, %388 ]
  %402 = trunc i32 %401 to i8
  %403 = getelementptr inbounds i8, i8* %273, i64 %385
  store i8 %402, i8* %403, align 1
  br label %404

404:                                              ; preds = %399, %382, %351
  %405 = phi i32 [ %353, %351 ], [ %383, %382 ], [ %400, %399 ]
  %406 = phi i32 [ %352, %351 ], [ %384, %382 ], [ %401, %399 ]
  %407 = load void (i8*, i32, i32, i32*)*, void (i8*, i32, i32, i32*)** @VP8LBundleColorMap, align 8
  call void %407(i8* nonnull %273, i32 %249, i32 %262, i32* %356) #6
  %408 = getelementptr inbounds i32, i32* %355, i64 %344
  %409 = getelementptr inbounds i32, i32* %356, i64 %345
  %410 = add nuw nsw i32 %354, 1
  %411 = icmp eq i32 %410, %251
  br i1 %411, label %670, label %351

412:                                              ; preds = %683
  %413 = icmp sgt i32 %251, 0
  br i1 %413, label %414, label %670

414:                                              ; preds = %412
  %415 = load i32, i32* %72, align 4
  %416 = icmp sgt i32 %249, 0
  %417 = zext i32 %255 to i64
  %418 = zext i32 %271 to i64
  %419 = zext i32 %249 to i64
  %420 = and i64 %419, 1
  %421 = icmp eq i32 %249, 1
  %422 = sub nsw i64 %419, %420
  %423 = icmp eq i64 %420, 0
  br label %424

424:                                              ; preds = %479, %414
  %425 = phi i32 [ 0, %414 ], [ %481, %479 ]
  %426 = phi i32 [ %415, %414 ], [ %480, %479 ]
  %427 = phi i32 [ 0, %414 ], [ %485, %479 ]
  %428 = phi i32* [ %253, %414 ], [ %483, %479 ]
  %429 = phi i32* [ %270, %414 ], [ %484, %479 ]
  br i1 %416, label %430, label %479

430:                                              ; preds = %424
  br i1 %421, label %456, label %431

431:                                              ; preds = %430, %1348
  %432 = phi i64 [ %1353, %1348 ], [ 0, %430 ]
  %433 = phi i32 [ %1350, %1348 ], [ %425, %430 ]
  %434 = phi i32 [ %1349, %1348 ], [ %426, %430 ]
  %435 = phi i64 [ %1354, %1348 ], [ %422, %430 ]
  %436 = getelementptr inbounds i32, i32* %428, i64 %432
  %437 = load i32, i32* %436, align 4
  %438 = icmp eq i32 %437, %434
  br i1 %438, label %447, label %439

439:                                              ; preds = %431
  %440 = and i32 %437, 16777215
  %441 = mul i32 %440, -72723225
  %442 = lshr i32 %441, 21
  %443 = zext i32 %442 to i64
  %444 = getelementptr inbounds [2048 x i16], [2048 x i16]* %3, i64 0, i64 %443
  %445 = load i16, i16* %444, align 2
  %446 = zext i16 %445 to i32
  br label %447

447:                                              ; preds = %439, %431
  %448 = phi i32 [ %437, %439 ], [ %434, %431 ]
  %449 = phi i32 [ %446, %439 ], [ %433, %431 ]
  %450 = trunc i32 %449 to i8
  %451 = getelementptr inbounds i8, i8* %273, i64 %432
  store i8 %450, i8* %451, align 1
  %452 = or i64 %432, 1
  %453 = getelementptr inbounds i32, i32* %428, i64 %452
  %454 = load i32, i32* %453, align 4
  %455 = icmp eq i32 %454, %448
  br i1 %455, label %1348, label %1340

456:                                              ; preds = %1348, %430
  %457 = phi i32 [ undef, %430 ], [ %1349, %1348 ]
  %458 = phi i32 [ undef, %430 ], [ %1350, %1348 ]
  %459 = phi i64 [ 0, %430 ], [ %1353, %1348 ]
  %460 = phi i32 [ %425, %430 ], [ %1350, %1348 ]
  %461 = phi i32 [ %426, %430 ], [ %1349, %1348 ]
  br i1 %423, label %479, label %462

462:                                              ; preds = %456
  %463 = getelementptr inbounds i32, i32* %428, i64 %459
  %464 = load i32, i32* %463, align 4
  %465 = icmp eq i32 %464, %461
  br i1 %465, label %474, label %466

466:                                              ; preds = %462
  %467 = and i32 %464, 16777215
  %468 = mul i32 %467, -72723225
  %469 = lshr i32 %468, 21
  %470 = zext i32 %469 to i64
  %471 = getelementptr inbounds [2048 x i16], [2048 x i16]* %3, i64 0, i64 %470
  %472 = load i16, i16* %471, align 2
  %473 = zext i16 %472 to i32
  br label %474

474:                                              ; preds = %466, %462
  %475 = phi i32 [ %464, %466 ], [ %461, %462 ]
  %476 = phi i32 [ %473, %466 ], [ %460, %462 ]
  %477 = trunc i32 %476 to i8
  %478 = getelementptr inbounds i8, i8* %273, i64 %459
  store i8 %477, i8* %478, align 1
  br label %479

479:                                              ; preds = %474, %456, %424
  %480 = phi i32 [ %426, %424 ], [ %457, %456 ], [ %475, %474 ]
  %481 = phi i32 [ %425, %424 ], [ %458, %456 ], [ %476, %474 ]
  %482 = load void (i8*, i32, i32, i32*)*, void (i8*, i32, i32, i32*)** @VP8LBundleColorMap, align 8
  call void %482(i8* nonnull %273, i32 %249, i32 %262, i32* %429) #6
  %483 = getelementptr inbounds i32, i32* %428, i64 %417
  %484 = getelementptr inbounds i32, i32* %429, i64 %418
  %485 = add nuw nsw i32 %427, 1
  %486 = icmp eq i32 %485, %251
  br i1 %486, label %670, label %424

487:                                              ; preds = %699
  %488 = icmp sgt i32 %251, 0
  br i1 %488, label %489, label %670

489:                                              ; preds = %487
  %490 = load i32, i32* %72, align 4
  %491 = icmp sgt i32 %249, 0
  %492 = zext i32 %255 to i64
  %493 = zext i32 %271 to i64
  %494 = zext i32 %249 to i64
  %495 = and i64 %494, 1
  %496 = icmp eq i32 %249, 1
  %497 = sub nsw i64 %494, %495
  %498 = icmp eq i64 %495, 0
  br label %499

499:                                              ; preds = %554, %489
  %500 = phi i32 [ 0, %489 ], [ %556, %554 ]
  %501 = phi i32 [ %490, %489 ], [ %555, %554 ]
  %502 = phi i32 [ 0, %489 ], [ %560, %554 ]
  %503 = phi i32* [ %253, %489 ], [ %558, %554 ]
  %504 = phi i32* [ %270, %489 ], [ %559, %554 ]
  br i1 %491, label %505, label %554

505:                                              ; preds = %499
  br i1 %496, label %531, label %506

506:                                              ; preds = %505, %1332
  %507 = phi i64 [ %1337, %1332 ], [ 0, %505 ]
  %508 = phi i32 [ %1334, %1332 ], [ %500, %505 ]
  %509 = phi i32 [ %1333, %1332 ], [ %501, %505 ]
  %510 = phi i64 [ %1338, %1332 ], [ %497, %505 ]
  %511 = getelementptr inbounds i32, i32* %503, i64 %507
  %512 = load i32, i32* %511, align 4
  %513 = icmp eq i32 %512, %509
  br i1 %513, label %522, label %514

514:                                              ; preds = %506
  %515 = and i32 %512, 16777215
  %516 = mul i32 %515, 2147483647
  %517 = lshr i32 %516, 21
  %518 = zext i32 %517 to i64
  %519 = getelementptr inbounds [2048 x i16], [2048 x i16]* %3, i64 0, i64 %518
  %520 = load i16, i16* %519, align 2
  %521 = zext i16 %520 to i32
  br label %522

522:                                              ; preds = %514, %506
  %523 = phi i32 [ %512, %514 ], [ %509, %506 ]
  %524 = phi i32 [ %521, %514 ], [ %508, %506 ]
  %525 = trunc i32 %524 to i8
  %526 = getelementptr inbounds i8, i8* %273, i64 %507
  store i8 %525, i8* %526, align 1
  %527 = or i64 %507, 1
  %528 = getelementptr inbounds i32, i32* %503, i64 %527
  %529 = load i32, i32* %528, align 4
  %530 = icmp eq i32 %529, %523
  br i1 %530, label %1332, label %1324

531:                                              ; preds = %1332, %505
  %532 = phi i32 [ undef, %505 ], [ %1333, %1332 ]
  %533 = phi i32 [ undef, %505 ], [ %1334, %1332 ]
  %534 = phi i64 [ 0, %505 ], [ %1337, %1332 ]
  %535 = phi i32 [ %500, %505 ], [ %1334, %1332 ]
  %536 = phi i32 [ %501, %505 ], [ %1333, %1332 ]
  br i1 %498, label %554, label %537

537:                                              ; preds = %531
  %538 = getelementptr inbounds i32, i32* %503, i64 %534
  %539 = load i32, i32* %538, align 4
  %540 = icmp eq i32 %539, %536
  br i1 %540, label %549, label %541

541:                                              ; preds = %537
  %542 = and i32 %539, 16777215
  %543 = mul i32 %542, 2147483647
  %544 = lshr i32 %543, 21
  %545 = zext i32 %544 to i64
  %546 = getelementptr inbounds [2048 x i16], [2048 x i16]* %3, i64 0, i64 %545
  %547 = load i16, i16* %546, align 2
  %548 = zext i16 %547 to i32
  br label %549

549:                                              ; preds = %541, %537
  %550 = phi i32 [ %539, %541 ], [ %536, %537 ]
  %551 = phi i32 [ %548, %541 ], [ %535, %537 ]
  %552 = trunc i32 %551 to i8
  %553 = getelementptr inbounds i8, i8* %273, i64 %534
  store i8 %552, i8* %553, align 1
  br label %554

554:                                              ; preds = %549, %531, %499
  %555 = phi i32 [ %501, %499 ], [ %532, %531 ], [ %550, %549 ]
  %556 = phi i32 [ %500, %499 ], [ %533, %531 ], [ %551, %549 ]
  %557 = load void (i8*, i32, i32, i32*)*, void (i8*, i32, i32, i32*)** @VP8LBundleColorMap, align 8
  call void %557(i8* nonnull %273, i32 %249, i32 %262, i32* %504) #6
  %558 = getelementptr inbounds i32, i32* %503, i64 %492
  %559 = getelementptr inbounds i32, i32* %504, i64 %493
  %560 = add nuw nsw i32 %502, 1
  %561 = icmp eq i32 %560, %251
  br i1 %561, label %670, label %499

562:                                              ; preds = %688
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %70) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %70, i8 -86, i64 1024, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %80) #6
  %563 = sext i32 %256 to i64
  %564 = shl nsw i64 %563, 2
  %565 = icmp ugt i64 %564, 1023
  %566 = sub nsw i64 1024, %564
  %567 = select i1 %565, i64 0, i64 %566
  %568 = getelementptr [256 x i32], [256 x i32]* %4, i64 0, i64 %563
  %569 = bitcast i32* %568 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %569, i8 -86, i64 %567, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %80, i8* align 4 %82, i64 %564, i1 false) #6
  call void @qsort(i8* nonnull %80, i64 %563, i64 4, i32 (i8*, i8*)* nonnull @PaletteCompareColorsForQsort) #6
  %570 = icmp sgt i32 %256, 0
  br i1 %570, label %571, label %605

571:                                              ; preds = %562
  %572 = lshr i32 %256, 1
  %573 = zext i32 %572 to i64
  %574 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %573
  %575 = load i32, i32* %81, align 16
  br label %576

576:                                              ; preds = %598, %571
  %577 = phi i64 [ 0, %571 ], [ %603, %598 ]
  %578 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %22, i64 0, i32 17, i64 %577
  %579 = load i32, i32* %578, align 4
  %580 = icmp eq i32 %575, %579
  br i1 %580, label %598, label %581

581:                                              ; preds = %576
  %582 = load i32, i32* %574, align 4
  %583 = icmp eq i32 %582, %579
  br i1 %583, label %598, label %584

584:                                              ; preds = %581, %584
  %585 = phi i32 [ %596, %584 ], [ %582, %581 ]
  %586 = phi i32 [ %593, %584 ], [ %572, %581 ]
  %587 = phi i32 [ %591, %584 ], [ 0, %581 ]
  %588 = phi i32 [ %590, %584 ], [ %256, %581 ]
  %589 = icmp ult i32 %585, %579
  %590 = select i1 %589, i32 %588, i32 %586
  %591 = select i1 %589, i32 %586, i32 %587
  %592 = add nsw i32 %590, %591
  %593 = ashr i32 %592, 1
  %594 = sext i32 %593 to i64
  %595 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %594
  %596 = load i32, i32* %595, align 4
  %597 = icmp eq i32 %596, %579
  br i1 %597, label %598, label %584

598:                                              ; preds = %584, %581, %576
  %599 = phi i32 [ %572, %581 ], [ 0, %576 ], [ %593, %584 ]
  %600 = sext i32 %599 to i64
  %601 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %600
  %602 = trunc i64 %577 to i32
  store i32 %602, i32* %601, align 4
  %603 = add nuw nsw i64 %577, 1
  %604 = icmp eq i64 %603, %324
  br i1 %604, label %605, label %576

605:                                              ; preds = %598, %562
  %606 = icmp sgt i32 %251, 0
  br i1 %606, label %607, label %669

607:                                              ; preds = %605
  %608 = load i32, i32* %72, align 4
  %609 = icmp sgt i32 %249, 0
  %610 = ashr i32 %256, 1
  %611 = sext i32 %610 to i64
  %612 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %611
  %613 = zext i32 %255 to i64
  %614 = zext i32 %271 to i64
  %615 = zext i32 %249 to i64
  br label %616

616:                                              ; preds = %661, %607
  %617 = phi i32 [ 0, %607 ], [ %663, %661 ]
  %618 = phi i32 [ %608, %607 ], [ %662, %661 ]
  %619 = phi i32 [ 0, %607 ], [ %667, %661 ]
  %620 = phi i32* [ %253, %607 ], [ %665, %661 ]
  %621 = phi i32* [ %270, %607 ], [ %666, %661 ]
  br i1 %609, label %622, label %661

622:                                              ; preds = %616, %654
  %623 = phi i64 [ %659, %654 ], [ 0, %616 ]
  %624 = phi i32 [ %656, %654 ], [ %617, %616 ]
  %625 = phi i32 [ %655, %654 ], [ %618, %616 ]
  %626 = getelementptr inbounds i32, i32* %620, i64 %623
  %627 = load i32, i32* %626, align 4
  %628 = icmp eq i32 %627, %625
  br i1 %628, label %654, label %629

629:                                              ; preds = %622
  %630 = load i32, i32* %81, align 16
  %631 = icmp eq i32 %630, %627
  br i1 %631, label %649, label %632

632:                                              ; preds = %629
  %633 = load i32, i32* %612, align 4
  %634 = icmp eq i32 %633, %627
  br i1 %634, label %649, label %635

635:                                              ; preds = %632, %635
  %636 = phi i32 [ %647, %635 ], [ %633, %632 ]
  %637 = phi i32 [ %644, %635 ], [ %610, %632 ]
  %638 = phi i32 [ %642, %635 ], [ 0, %632 ]
  %639 = phi i32 [ %641, %635 ], [ %256, %632 ]
  %640 = icmp ult i32 %636, %627
  %641 = select i1 %640, i32 %639, i32 %637
  %642 = select i1 %640, i32 %637, i32 %638
  %643 = add nsw i32 %641, %642
  %644 = ashr i32 %643, 1
  %645 = sext i32 %644 to i64
  %646 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %645
  %647 = load i32, i32* %646, align 4
  %648 = icmp eq i32 %647, %627
  br i1 %648, label %649, label %635

649:                                              ; preds = %635, %629, %632
  %650 = phi i32 [ %610, %632 ], [ 0, %629 ], [ %644, %635 ]
  %651 = sext i32 %650 to i64
  %652 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %651
  %653 = load i32, i32* %652, align 4
  br label %654

654:                                              ; preds = %649, %622
  %655 = phi i32 [ %627, %649 ], [ %625, %622 ]
  %656 = phi i32 [ %653, %649 ], [ %624, %622 ]
  %657 = trunc i32 %656 to i8
  %658 = getelementptr inbounds i8, i8* %273, i64 %623
  store i8 %657, i8* %658, align 1
  %659 = add nuw nsw i64 %623, 1
  %660 = icmp eq i64 %659, %615
  br i1 %660, label %661, label %622

661:                                              ; preds = %654, %616
  %662 = phi i32 [ %618, %616 ], [ %655, %654 ]
  %663 = phi i32 [ %617, %616 ], [ %656, %654 ]
  %664 = load void (i8*, i32, i32, i32*)*, void (i8*, i32, i32, i32*)** @VP8LBundleColorMap, align 8
  call void %664(i8* nonnull %273, i32 %249, i32 %262, i32* %621) #6
  %665 = getelementptr inbounds i32, i32* %620, i64 %613
  %666 = getelementptr inbounds i32, i32* %621, i64 %614
  %667 = add nuw nsw i32 %619, 1
  %668 = icmp eq i32 %667, %251
  br i1 %668, label %669, label %616

669:                                              ; preds = %661, %605
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %80) #6
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %70) #6
  br label %670

670:                                              ; preds = %554, %479, %404, %669, %487, %412, %339
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %79) #6
  br label %704

671:                                              ; preds = %325
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %79, i8 -1, i64 4096, i1 false) #6
  br label %672

672:                                              ; preds = %683, %671
  %673 = phi i64 [ 0, %671 ], [ %685, %683 ]
  %674 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %22, i64 0, i32 17, i64 %673
  %675 = load i32, i32* %674, align 4
  %676 = and i32 %675, 16777215
  %677 = mul i32 %676, -72723225
  %678 = lshr i32 %677, 21
  %679 = zext i32 %678 to i64
  %680 = getelementptr inbounds [2048 x i16], [2048 x i16]* %3, i64 0, i64 %679
  %681 = load i16, i16* %680, align 2
  %682 = icmp eq i16 %681, -1
  br i1 %682, label %683, label %687

683:                                              ; preds = %672
  %684 = trunc i64 %673 to i16
  store i16 %684, i16* %680, align 2
  %685 = add nuw nsw i64 %673, 1
  %686 = icmp eq i64 %685, %324
  br i1 %686, label %412, label %672

687:                                              ; preds = %672
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %79, i8 -1, i64 4096, i1 false) #6
  br label %688

688:                                              ; preds = %699, %687
  %689 = phi i64 [ 0, %687 ], [ %701, %699 ]
  %690 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %22, i64 0, i32 17, i64 %689
  %691 = load i32, i32* %690, align 4
  %692 = and i32 %691, 16777215
  %693 = mul i32 %692, 2147483647
  %694 = lshr i32 %693, 21
  %695 = zext i32 %694 to i64
  %696 = getelementptr inbounds [2048 x i16], [2048 x i16]* %3, i64 0, i64 %695
  %697 = load i16, i16* %696, align 2
  %698 = icmp eq i16 %697, -1
  br i1 %698, label %699, label %562

699:                                              ; preds = %688
  %700 = trunc i64 %689 to i16
  store i16 %700, i16* %696, align 2
  %701 = add nuw nsw i64 %689, 1
  %702 = icmp eq i64 %701, %324
  br i1 %702, label %487, label %688

703:                                              ; preds = %269
  store i32 3, i32* %69, align 8
  br label %1318

704:                                              ; preds = %315, %277, %670
  call void @WebPSafeFree(i8* nonnull %273) #6
  store i32 3, i32* %69, align 8
  br i1 %85, label %783, label %705

705:                                              ; preds = %704
  %706 = load i32, i32* %71, align 8
  %707 = icmp slt i32 %706, 1024
  br i1 %707, label %708, label %783

708:                                              ; preds = %705
  %709 = call i32 @llvm.ctlz.i32(i32 %706, i1 true) #6, !range !13
  %710 = sub nuw nsw i32 32, %709
  store i32 %710, i32* %66, align 4
  br label %783

711:                                              ; preds = %102
  %712 = load %struct.WebPPicture*, %struct.WebPPicture** %76, align 8
  %713 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %712, i64 0, i32 2
  %714 = load i32, i32* %713, align 8
  %715 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %712, i64 0, i32 3
  %716 = load i32, i32* %715, align 4
  %717 = call fastcc i32 @AllocateTransformBuffer(%struct.VP8LEncoder* %22, i32 %714, i32 %716) #6
  %718 = icmp eq i32 %717, 0
  br i1 %718, label %719, label %1318

719:                                              ; preds = %711
  %720 = load i32, i32* %69, align 8
  %721 = icmp eq i32 %720, 1
  br i1 %721, label %783, label %722

722:                                              ; preds = %719
  %723 = icmp sgt i32 %716, 0
  br i1 %723, label %724, label %782

724:                                              ; preds = %722
  %725 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %712, i64 0, i32 12
  %726 = load i32*, i32** %725, align 8
  %727 = load i32*, i32** %77, align 8
  %728 = sext i32 %714 to i64
  %729 = shl nsw i64 %728, 2
  %730 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %712, i64 0, i32 13
  %731 = add i32 %716, -1
  %732 = and i32 %716, 3
  %733 = icmp ult i32 %731, 3
  br i1 %733, label %766, label %734

734:                                              ; preds = %724
  %735 = sub i32 %716, %732
  br label %736

736:                                              ; preds = %736, %734
  %737 = phi i32* [ %726, %734 ], [ %763, %736 ]
  %738 = phi i32* [ %727, %734 ], [ %760, %736 ]
  %739 = phi i32 [ %735, %734 ], [ %764, %736 ]
  %740 = bitcast i32* %738 to i8*
  %741 = bitcast i32* %737 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %740, i8* align 4 %741, i64 %729, i1 false) #6
  %742 = getelementptr inbounds i32, i32* %738, i64 %728
  %743 = load i32, i32* %730, align 8
  %744 = sext i32 %743 to i64
  %745 = getelementptr inbounds i32, i32* %737, i64 %744
  %746 = bitcast i32* %742 to i8*
  %747 = bitcast i32* %745 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %746, i8* align 4 %747, i64 %729, i1 false) #6
  %748 = getelementptr inbounds i32, i32* %742, i64 %728
  %749 = load i32, i32* %730, align 8
  %750 = sext i32 %749 to i64
  %751 = getelementptr inbounds i32, i32* %745, i64 %750
  %752 = bitcast i32* %748 to i8*
  %753 = bitcast i32* %751 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %752, i8* align 4 %753, i64 %729, i1 false) #6
  %754 = getelementptr inbounds i32, i32* %748, i64 %728
  %755 = load i32, i32* %730, align 8
  %756 = sext i32 %755 to i64
  %757 = getelementptr inbounds i32, i32* %751, i64 %756
  %758 = bitcast i32* %754 to i8*
  %759 = bitcast i32* %757 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %758, i8* align 4 %759, i64 %729, i1 false) #6
  %760 = getelementptr inbounds i32, i32* %754, i64 %728
  %761 = load i32, i32* %730, align 8
  %762 = sext i32 %761 to i64
  %763 = getelementptr inbounds i32, i32* %757, i64 %762
  %764 = add i32 %739, -4
  %765 = icmp eq i32 %764, 0
  br i1 %765, label %766, label %736

766:                                              ; preds = %736, %724
  %767 = phi i32* [ %726, %724 ], [ %763, %736 ]
  %768 = phi i32* [ %727, %724 ], [ %760, %736 ]
  %769 = icmp eq i32 %732, 0
  br i1 %769, label %782, label %770

770:                                              ; preds = %766, %770
  %771 = phi i32* [ %779, %770 ], [ %767, %766 ]
  %772 = phi i32* [ %776, %770 ], [ %768, %766 ]
  %773 = phi i32 [ %780, %770 ], [ %732, %766 ]
  %774 = bitcast i32* %772 to i8*
  %775 = bitcast i32* %771 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %774, i8* align 4 %775, i64 %729, i1 false) #6
  %776 = getelementptr inbounds i32, i32* %772, i64 %728
  %777 = load i32, i32* %730, align 8
  %778 = sext i32 %777 to i64
  %779 = getelementptr inbounds i32, i32* %771, i64 %778
  %780 = add i32 %773, -1
  %781 = icmp eq i32 %780, 0
  br i1 %781, label %782, label %770, !llvm.loop !14

782:                                              ; preds = %766, %770, %722
  store i32 1, i32* %69, align 8
  br label %783

783:                                              ; preds = %704, %705, %708, %719, %782
  %784 = load i32, i32* %62, align 4
  %785 = icmp eq i32 %784, 0
  br i1 %785, label %813, label %786

786:                                              ; preds = %783
  %787 = load i32, i32* %78, align 8
  %788 = load i32, i32* %47, align 8
  %789 = icmp sgt i32 %788, 31
  br i1 %789, label %790, label %792

790:                                              ; preds = %786
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %19) #6
  %791 = load i32, i32* %47, align 8
  br label %792

792:                                              ; preds = %790, %786
  %793 = phi i32 [ %791, %790 ], [ %788, %786 ]
  %794 = zext i32 %793 to i64
  %795 = shl i64 1, %794
  %796 = load i64, i64* %73, align 8
  %797 = or i64 %795, %796
  store i64 %797, i64* %73, align 8
  %798 = add nsw i32 %793, 1
  store i32 %798, i32* %47, align 8
  %799 = icmp sgt i32 %793, 30
  br i1 %799, label %800, label %803

800:                                              ; preds = %792
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %19) #6
  %801 = load i32, i32* %47, align 8
  %802 = load i64, i64* %73, align 8
  br label %803

803:                                              ; preds = %792, %800
  %804 = phi i64 [ %802, %800 ], [ %797, %792 ]
  %805 = phi i32 [ %801, %800 ], [ %798, %792 ]
  %806 = zext i32 %805 to i64
  %807 = shl i64 2, %806
  %808 = or i64 %807, %804
  store i64 %808, i64* %73, align 8
  %809 = add nsw i32 %805, 2
  store i32 %809, i32* %47, align 8
  %810 = load void (i32*, i32)*, void (i32*, i32)** @VP8LSubtractGreenFromBlueAndRed, align 8
  %811 = load i32*, i32** %77, align 8
  %812 = mul nsw i32 %787, %42
  call void %810(i32* %811, i32 %812) #6
  br label %813

813:                                              ; preds = %783, %803
  %814 = load i32, i32* %63, align 8
  %815 = icmp eq i32 %814, 0
  br i1 %815, label %871, label %816

816:                                              ; preds = %813
  %817 = load i32, i32* %78, align 8
  %818 = load i32, i32* %62, align 4
  %819 = load i32, i32* %86, align 8
  %820 = shl nsw i32 -1, %819
  %821 = xor i32 %820, -1
  %822 = add i32 %817, %821
  %823 = lshr i32 %822, %819
  %824 = add i32 %42, %821
  %825 = lshr i32 %824, %819
  %826 = load i32, i32* %61, align 4
  %827 = icmp eq i32 %826, 0
  %828 = load %struct.WebPConfig*, %struct.WebPConfig** %87, align 8
  br i1 %827, label %829, label %832

829:                                              ; preds = %816
  %830 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %828, i64 0, i32 23
  %831 = load i32, i32* %830, align 4
  br label %832

832:                                              ; preds = %829, %816
  %833 = phi i32 [ %831, %829 ], [ 100, %816 ]
  %834 = load i32*, i32** %77, align 8
  %835 = load i32*, i32** %88, align 8
  %836 = load i32*, i32** %89, align 8
  %837 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %828, i64 0, i32 24
  %838 = load i32, i32* %837, align 4
  call void @VP8LResidualImage(i32 %817, i32 %42, i32 %819, i32 %40, i32* %834, i32* %835, i32* %836, i32 %833, i32 %838, i32 %818) #6
  %839 = load i32, i32* %47, align 8
  %840 = icmp sgt i32 %839, 31
  br i1 %840, label %841, label %843

841:                                              ; preds = %832
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %19) #6
  %842 = load i32, i32* %47, align 8
  br label %843

843:                                              ; preds = %841, %832
  %844 = phi i32 [ %842, %841 ], [ %839, %832 ]
  %845 = zext i32 %844 to i64
  %846 = shl i64 1, %845
  %847 = load i64, i64* %73, align 8
  %848 = or i64 %846, %847
  store i64 %848, i64* %73, align 8
  %849 = add nsw i32 %844, 1
  store i32 %849, i32* %47, align 8
  %850 = icmp sgt i32 %844, 30
  br i1 %850, label %851, label %853

851:                                              ; preds = %843
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %19) #6
  %852 = load i32, i32* %47, align 8
  br label %853

853:                                              ; preds = %851, %843
  %854 = phi i32 [ %852, %851 ], [ %849, %843 ]
  %855 = add nsw i32 %854, 2
  store i32 %855, i32* %47, align 8
  %856 = add nsw i32 %819, -2
  %857 = icmp sgt i32 %855, 31
  br i1 %857, label %858, label %860

858:                                              ; preds = %853
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %19) #6
  %859 = load i32, i32* %47, align 8
  br label %860

860:                                              ; preds = %853, %858
  %861 = phi i32 [ %859, %858 ], [ %855, %853 ]
  %862 = zext i32 %856 to i64
  %863 = zext i32 %861 to i64
  %864 = shl i64 %862, %863
  %865 = load i64, i64* %73, align 8
  %866 = or i64 %864, %865
  store i64 %866, i64* %73, align 8
  %867 = add nsw i32 %861, 3
  store i32 %867, i32* %47, align 8
  %868 = load i32*, i32** %89, align 8
  %869 = call fastcc i32 @EncodeImageNoHuffman(%struct.VP8LBitWriter* %19, i32* %868, %struct.VP8LHashChain* %75, %struct.VP8LBackwardRefs* %67, i32 %823, i32 %825, i32 %36, i32 %40) #6
  %870 = icmp eq i32 %869, 0
  br i1 %870, label %871, label %1318

871:                                              ; preds = %860, %813
  %872 = load i32, i32* %65, align 8
  %873 = icmp eq i32 %872, 0
  br i1 %873, label %923, label %874

874:                                              ; preds = %871
  %875 = load i32, i32* %78, align 8
  %876 = load i32, i32* %86, align 8
  %877 = shl nsw i32 -1, %876
  %878 = xor i32 %877, -1
  %879 = add i32 %875, %878
  %880 = lshr i32 %879, %876
  %881 = add i32 %42, %878
  %882 = lshr i32 %881, %876
  %883 = load i32*, i32** %77, align 8
  %884 = load i32*, i32** %89, align 8
  call void @VP8LColorSpaceTransform(i32 %875, i32 %42, i32 %876, i32 %36, i32* %883, i32* %884) #6
  %885 = load i32, i32* %47, align 8
  %886 = icmp sgt i32 %885, 31
  br i1 %886, label %887, label %889

887:                                              ; preds = %874
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %19) #6
  %888 = load i32, i32* %47, align 8
  br label %889

889:                                              ; preds = %887, %874
  %890 = phi i32 [ %888, %887 ], [ %885, %874 ]
  %891 = zext i32 %890 to i64
  %892 = shl i64 1, %891
  %893 = load i64, i64* %73, align 8
  %894 = or i64 %892, %893
  store i64 %894, i64* %73, align 8
  %895 = add nsw i32 %890, 1
  store i32 %895, i32* %47, align 8
  %896 = icmp sgt i32 %890, 30
  br i1 %896, label %897, label %900

897:                                              ; preds = %889
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %19) #6
  %898 = load i32, i32* %47, align 8
  %899 = load i64, i64* %73, align 8
  br label %900

900:                                              ; preds = %897, %889
  %901 = phi i64 [ %899, %897 ], [ %894, %889 ]
  %902 = phi i32 [ %898, %897 ], [ %895, %889 ]
  %903 = zext i32 %902 to i64
  %904 = shl i64 1, %903
  %905 = or i64 %904, %901
  store i64 %905, i64* %73, align 8
  %906 = add nsw i32 %902, 2
  store i32 %906, i32* %47, align 8
  %907 = add nsw i32 %876, -2
  %908 = icmp sgt i32 %906, 31
  br i1 %908, label %909, label %912

909:                                              ; preds = %900
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %19) #6
  %910 = load i32, i32* %47, align 8
  %911 = load i64, i64* %73, align 8
  br label %912

912:                                              ; preds = %900, %909
  %913 = phi i64 [ %911, %909 ], [ %905, %900 ]
  %914 = phi i32 [ %910, %909 ], [ %906, %900 ]
  %915 = zext i32 %907 to i64
  %916 = zext i32 %914 to i64
  %917 = shl i64 %915, %916
  %918 = or i64 %917, %913
  store i64 %918, i64* %73, align 8
  %919 = add nsw i32 %914, 3
  store i32 %919, i32* %47, align 8
  %920 = load i32*, i32** %89, align 8
  %921 = call fastcc i32 @EncodeImageNoHuffman(%struct.VP8LBitWriter* %19, i32* %920, %struct.VP8LHashChain* %75, %struct.VP8LBackwardRefs* %67, i32 %880, i32 %882, i32 %36, i32 %40) #6
  %922 = icmp eq i32 %921, 0
  br i1 %922, label %923, label %1318

923:                                              ; preds = %912, %871
  %924 = load i32, i32* %47, align 8
  %925 = icmp sgt i32 %924, 31
  br i1 %925, label %926, label %928

926:                                              ; preds = %923
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %19) #6
  %927 = load i32, i32* %47, align 8
  br label %928

928:                                              ; preds = %923, %926
  %929 = phi i32 [ %927, %926 ], [ %924, %923 ]
  %930 = add nsw i32 %929, 1
  store i32 %930, i32* %47, align 8
  %931 = load i32*, i32** %77, align 8
  %932 = load i32, i32* %78, align 8
  %933 = load i32, i32* %90, align 4
  %934 = shl nsw i32 -1, %933
  %935 = xor i32 %934, -1
  %936 = add i32 %932, %935
  %937 = lshr i32 %936, %933
  %938 = add i32 %42, %935
  %939 = lshr i32 %938, %933
  %940 = mul i32 %937, %939
  %941 = call i8* @WebPSafeMalloc(i64 57, i64 16) #6
  %942 = bitcast i8* %941 to %struct.HuffmanTree*
  %943 = zext i32 %940 to i64
  %944 = call i8* @WebPSafeMalloc(i64 %943, i64 2) #6
  %945 = bitcast i8* %944 to i16*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %91) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %91, i8* align 8 %49, i64 48, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %92) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %92, i8 -86, i64 48, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %93) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %93, i8 0, i64 16, i1 false) #6
  %946 = icmp eq i8* %941, null
  %947 = icmp eq i8* %944, null
  %948 = or i1 %946, %947
  br i1 %948, label %1285, label %949

949:                                              ; preds = %928
  %950 = call i32 @VP8LHashChainInit(%struct.VP8LHashChain* nonnull %8, i32 %940) #6
  %951 = icmp eq i32 %950, 0
  br i1 %951, label %1285, label %952

952:                                              ; preds = %949
  %953 = call i32 @VP8LHashChainFill(%struct.VP8LHashChain* %75, i32 %36, i32* %931, i32 %932, i32 %42, i32 %40) #6
  %954 = icmp eq i32 %953, 0
  br i1 %954, label %1285, label %955

955:                                              ; preds = %952
  br i1 %85, label %960, label %956

956:                                              ; preds = %955
  %957 = load i32, i32* %66, align 4
  %958 = icmp eq i32 %957, 0
  %959 = select i1 %958, i32 10, i32 %957
  br label %960

960:                                              ; preds = %956, %955
  %961 = phi i32 [ %959, %956 ], [ 0, %955 ]
  %962 = call i32 @VP8LBitWriterInit(%struct.VP8LBitWriter* nonnull %7, i64 0) #6
  %963 = icmp eq i32 %962, 0
  br i1 %963, label %1285, label %964

964:                                              ; preds = %960
  %965 = getelementptr inbounds %struct.CrunchConfig, %struct.CrunchConfig* %27, i64 %103, i32 2
  %966 = load i32, i32* %965, align 4
  %967 = icmp sgt i32 %966, 1
  br i1 %967, label %972, label %968

968:                                              ; preds = %964
  %969 = getelementptr inbounds %struct.CrunchConfig, %struct.CrunchConfig* %27, i64 %103, i32 1, i64 0, i32 1
  %970 = load i32, i32* %969, align 4
  %971 = icmp eq i32 %970, 0
  br i1 %971, label %977, label %972

972:                                              ; preds = %968, %964
  %973 = call i32 @VP8LBitWriterClone(%struct.VP8LBitWriter* %19, %struct.VP8LBitWriter* nonnull %7) #6
  %974 = icmp eq i32 %973, 0
  br i1 %974, label %1285, label %975

975:                                              ; preds = %972
  %976 = load i32, i32* %965, align 4
  br label %977

977:                                              ; preds = %975, %968
  %978 = phi i32 [ %976, %975 ], [ %966, %968 ]
  %979 = icmp sgt i32 %978, 0
  br i1 %979, label %980, label %1284

980:                                              ; preds = %977
  %981 = add nsw i32 %933, -2
  %982 = zext i32 %981 to i64
  %983 = and i64 %943, 1
  %984 = icmp eq i32 %940, 1
  %985 = sub nsw i64 %943, %983
  %986 = icmp eq i64 %983, 0
  br label %987

987:                                              ; preds = %1278, %980
  %988 = phi i64 [ 0, %980 ], [ %1280, %1278 ]
  %989 = phi i64 [ -1, %980 ], [ %1279, %1278 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %94) #6
  store i32 -1431655766, i32* %9, align 4
  %990 = getelementptr inbounds %struct.CrunchConfig, %struct.CrunchConfig* %27, i64 %103, i32 1, i64 %988, i32 0
  %991 = load i32, i32* %990, align 4
  %992 = getelementptr inbounds %struct.CrunchConfig, %struct.CrunchConfig* %27, i64 %103, i32 1, i64 %988, i32 1
  %993 = load i32, i32* %992, align 4
  %994 = call i32 @VP8LGetBackwardReferences(i32 %932, i32 %42, i32* %931, i32 %36, i32 %40, i32 %991, i32 %961, i32 %993, %struct.VP8LHashChain* %75, %struct.VP8LBackwardRefs* %67, i32* nonnull %9) #6
  %995 = icmp eq i32 %994, 0
  br i1 %995, label %996, label %1271

996:                                              ; preds = %987, %1250
  %997 = phi i64 [ %1255, %1250 ], [ 0, %987 ]
  %998 = phi i64 [ %1251, %1250 ], [ %989, %987 ]
  %999 = icmp eq i64 %997, 0
  %1000 = load i32, i32* %9, align 4
  %1001 = select i1 %999, i32 %1000, i32 0
  %1002 = icmp eq i64 %997, 1
  %1003 = icmp eq i32 %1000, 0
  %1004 = and i1 %1002, %1003
  br i1 %1004, label %1278, label %1005

1005:                                             ; preds = %996
  call void @VP8LBitWriterReset(%struct.VP8LBitWriter* nonnull %6, %struct.VP8LBitWriter* %19) #6
  %1006 = call %struct.VP8LHistogramSet* @VP8LAllocateHistogramSet(i32 %940, i32 %1001) #6
  %1007 = call %struct.VP8LHistogram* @VP8LAllocateHistogram(i32 %1001) #6
  %1008 = icmp eq %struct.VP8LHistogramSet* %1006, null
  %1009 = icmp eq %struct.VP8LHistogram* %1007, null
  %1010 = or i1 %1008, %1009
  br i1 %1010, label %1271, label %1011

1011:                                             ; preds = %1005
  %1012 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %22, i64 0, i32 18, i64 %997
  %1013 = call i32 @VP8LGetHistoImageSymbols(i32 %932, i32 %42, %struct.VP8LBackwardRefs* %1012, i32 %36, i32 %40, i32 %933, i32 %1001, %struct.VP8LHistogramSet* nonnull %1006, %struct.VP8LHistogram* nonnull %1007, i16* %945) #6
  %1014 = icmp eq i32 %1013, 0
  br i1 %1014, label %1271, label %1015

1015:                                             ; preds = %1011
  %1016 = getelementptr inbounds %struct.VP8LHistogramSet, %struct.VP8LHistogramSet* %1006, i64 0, i32 0
  %1017 = load i32, i32* %1016, align 8
  %1018 = mul nsw i32 %1017, 5
  %1019 = sext i32 %1018 to i64
  %1020 = call i8* @WebPSafeCalloc(i64 %1019, i64 24) #6
  %1021 = bitcast i8* %1020 to %struct.HuffmanTreeCode*
  %1022 = icmp eq i8* %1020, null
  br i1 %1022, label %1271, label %1023

1023:                                             ; preds = %1015
  %1024 = call fastcc i32 @GetHuffBitLengthsAndCodes(%struct.VP8LHistogramSet* nonnull %1006, %struct.HuffmanTreeCode* nonnull %1021) #6
  %1025 = icmp eq i32 %1024, 0
  br i1 %1025, label %1260, label %1026

1026:                                             ; preds = %1023
  call void @VP8LFreeHistogramSet(%struct.VP8LHistogramSet* nonnull %1006) #6
  call void @VP8LFreeHistogram(%struct.VP8LHistogram* nonnull %1007) #6
  %1027 = icmp sgt i32 %1001, 0
  %1028 = load i32, i32* %47, align 8
  %1029 = icmp sgt i32 %1028, 31
  br i1 %1027, label %1030, label %1052

1030:                                             ; preds = %1026
  br i1 %1029, label %1031, label %1033

1031:                                             ; preds = %1030
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %19) #6
  %1032 = load i32, i32* %47, align 8
  br label %1033

1033:                                             ; preds = %1031, %1030
  %1034 = phi i32 [ %1032, %1031 ], [ %1028, %1030 ]
  %1035 = zext i32 %1034 to i64
  %1036 = shl i64 1, %1035
  %1037 = load i64, i64* %73, align 8
  %1038 = or i64 %1036, %1037
  store i64 %1038, i64* %73, align 8
  %1039 = add nsw i32 %1034, 1
  store i32 %1039, i32* %47, align 8
  %1040 = icmp sgt i32 %1034, 30
  br i1 %1040, label %1041, label %1044

1041:                                             ; preds = %1033
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %19) #6
  %1042 = load i32, i32* %47, align 8
  %1043 = load i64, i64* %73, align 8
  br label %1044

1044:                                             ; preds = %1041, %1033
  %1045 = phi i64 [ %1043, %1041 ], [ %1038, %1033 ]
  %1046 = phi i32 [ %1042, %1041 ], [ %1039, %1033 ]
  %1047 = zext i32 %1001 to i64
  %1048 = zext i32 %1046 to i64
  %1049 = shl i64 %1047, %1048
  %1050 = or i64 %1049, %1045
  store i64 %1050, i64* %73, align 8
  %1051 = add nsw i32 %1046, 4
  br label %1058

1052:                                             ; preds = %1026
  br i1 %1029, label %1053, label %1055

1053:                                             ; preds = %1052
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %19) #6
  %1054 = load i32, i32* %47, align 8
  br label %1055

1055:                                             ; preds = %1053, %1052
  %1056 = phi i32 [ %1054, %1053 ], [ %1028, %1052 ]
  %1057 = add nsw i32 %1056, 1
  br label %1058

1058:                                             ; preds = %1055, %1044
  %1059 = phi i32 [ %1057, %1055 ], [ %1051, %1044 ]
  store i32 %1059, i32* %47, align 8
  %1060 = icmp sgt i32 %1017, 1
  %1061 = icmp sgt i32 %1059, 31
  br i1 %1061, label %1062, label %1064

1062:                                             ; preds = %1058
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %19) #6
  %1063 = load i32, i32* %47, align 8
  br label %1064

1064:                                             ; preds = %1062, %1058
  %1065 = phi i32 [ %1063, %1062 ], [ %1059, %1058 ]
  %1066 = zext i1 %1060 to i64
  %1067 = zext i32 %1065 to i64
  %1068 = shl i64 %1066, %1067
  %1069 = load i64, i64* %73, align 8
  %1070 = or i64 %1068, %1069
  store i64 %1070, i64* %73, align 8
  %1071 = add nsw i32 %1065, 1
  store i32 %1071, i32* %47, align 8
  br i1 %1060, label %1072, label %1131

1072:                                             ; preds = %1064
  %1073 = call i8* @WebPSafeMalloc(i64 %943, i64 4) #6
  %1074 = bitcast i8* %1073 to i32*
  %1075 = icmp eq i8* %1073, null
  br i1 %1075, label %1267, label %1076

1076:                                             ; preds = %1072
  switch i32 %940, label %1077 [
    i32 0, label %1114
    i32 1, label %1101
  ]

1077:                                             ; preds = %1076, %1077
  %1078 = phi i64 [ %1098, %1077 ], [ 0, %1076 ]
  %1079 = phi i32 [ %1097, %1077 ], [ 0, %1076 ]
  %1080 = phi i64 [ %1099, %1077 ], [ %985, %1076 ]
  %1081 = getelementptr inbounds i16, i16* %945, i64 %1078
  %1082 = load i16, i16* %1081, align 2
  %1083 = zext i16 %1082 to i32
  %1084 = shl nuw nsw i32 %1083, 8
  %1085 = getelementptr inbounds i32, i32* %1074, i64 %1078
  store i32 %1084, i32* %1085, align 4
  %1086 = icmp sgt i32 %1079, %1083
  %1087 = add nuw nsw i32 %1083, 1
  %1088 = select i1 %1086, i32 %1079, i32 %1087
  %1089 = or i64 %1078, 1
  %1090 = getelementptr inbounds i16, i16* %945, i64 %1089
  %1091 = load i16, i16* %1090, align 2
  %1092 = zext i16 %1091 to i32
  %1093 = shl nuw nsw i32 %1092, 8
  %1094 = getelementptr inbounds i32, i32* %1074, i64 %1089
  store i32 %1093, i32* %1094, align 4
  %1095 = icmp sgt i32 %1088, %1092
  %1096 = add nuw nsw i32 %1092, 1
  %1097 = select i1 %1095, i32 %1088, i32 %1096
  %1098 = add nuw nsw i64 %1078, 2
  %1099 = add i64 %1080, -2
  %1100 = icmp eq i64 %1099, 0
  br i1 %1100, label %1101, label %1077

1101:                                             ; preds = %1077, %1076
  %1102 = phi i32 [ undef, %1076 ], [ %1097, %1077 ]
  %1103 = phi i64 [ 0, %1076 ], [ %1098, %1077 ]
  %1104 = phi i32 [ 0, %1076 ], [ %1097, %1077 ]
  br i1 %986, label %1114, label %1105

1105:                                             ; preds = %1101
  %1106 = getelementptr inbounds i16, i16* %945, i64 %1103
  %1107 = load i16, i16* %1106, align 2
  %1108 = zext i16 %1107 to i32
  %1109 = shl nuw nsw i32 %1108, 8
  %1110 = getelementptr inbounds i32, i32* %1074, i64 %1103
  store i32 %1109, i32* %1110, align 4
  %1111 = icmp sgt i32 %1104, %1108
  %1112 = add nuw nsw i32 %1108, 1
  %1113 = select i1 %1111, i32 %1104, i32 %1112
  br label %1114

1114:                                             ; preds = %1105, %1101, %1076
  %1115 = phi i32 [ 0, %1076 ], [ %1102, %1101 ], [ %1113, %1105 ]
  %1116 = load i32, i32* %47, align 8
  %1117 = icmp sgt i32 %1116, 31
  br i1 %1117, label %1118, label %1120

1118:                                             ; preds = %1114
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %19) #6
  %1119 = load i32, i32* %47, align 8
  br label %1120

1120:                                             ; preds = %1118, %1114
  %1121 = phi i32 [ %1119, %1118 ], [ %1116, %1114 ]
  %1122 = zext i32 %1121 to i64
  %1123 = shl i64 %982, %1122
  %1124 = load i64, i64* %73, align 8
  %1125 = or i64 %1123, %1124
  store i64 %1125, i64* %73, align 8
  %1126 = add nsw i32 %1121, 3
  store i32 %1126, i32* %47, align 8
  %1127 = call fastcc i32 @EncodeImageNoHuffman(%struct.VP8LBitWriter* %19, i32* nonnull %1074, %struct.VP8LHashChain* nonnull %8, %struct.VP8LBackwardRefs* %95, i32 %937, i32 %939, i32 %36, i32 %40) #6
  call void @WebPSafeFree(i8* nonnull %1073) #6
  %1128 = icmp eq i32 %1127, 0
  br i1 %1128, label %1129, label %1269

1129:                                             ; preds = %1120
  %1130 = mul nsw i32 %1115, 5
  br label %1131

1131:                                             ; preds = %1129, %1064
  %1132 = phi i32 [ %1130, %1129 ], [ %1018, %1064 ]
  %1133 = phi i32 [ %1115, %1129 ], [ %1017, %1064 ]
  %1134 = icmp sgt i32 %1133, 0
  br i1 %1134, label %1135, label %1186

1135:                                             ; preds = %1131
  %1136 = sext i32 %1132 to i64
  %1137 = icmp sgt i64 %1136, 1
  %1138 = select i1 %1137, i64 %1136, i64 1
  %1139 = icmp ult i64 %1138, 9
  br i1 %1139, label %1174, label %1140

1140:                                             ; preds = %1135
  %1141 = and i64 %1138, 7
  %1142 = icmp eq i64 %1141, 0
  %1143 = select i1 %1142, i64 8, i64 %1141
  %1144 = sub nsw i64 %1138, %1143
  br label %1145

1145:                                             ; preds = %1145, %1140
  %1146 = phi i64 [ 0, %1140 ], [ %1162, %1145 ]
  %1147 = phi <4 x i32> [ zeroinitializer, %1140 ], [ %1160, %1145 ]
  %1148 = phi <4 x i32> [ zeroinitializer, %1140 ], [ %1161, %1145 ]
  %1149 = or i64 %1146, 4
  %1150 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %1021, i64 %1146, i32 0
  %1151 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %1021, i64 %1149, i32 0
  %1152 = bitcast i32* %1150 to <24 x i32>*
  %1153 = bitcast i32* %1151 to <24 x i32>*
  %1154 = load <24 x i32>, <24 x i32>* %1152, align 8
  %1155 = load <24 x i32>, <24 x i32>* %1153, align 8
  %1156 = shufflevector <24 x i32> %1154, <24 x i32> undef, <4 x i32> <i32 0, i32 6, i32 12, i32 18>
  %1157 = shufflevector <24 x i32> %1155, <24 x i32> undef, <4 x i32> <i32 0, i32 6, i32 12, i32 18>
  %1158 = icmp slt <4 x i32> %1147, %1156
  %1159 = icmp slt <4 x i32> %1148, %1157
  %1160 = select <4 x i1> %1158, <4 x i32> %1156, <4 x i32> %1147
  %1161 = select <4 x i1> %1159, <4 x i32> %1157, <4 x i32> %1148
  %1162 = add i64 %1146, 8
  %1163 = icmp eq i64 %1162, %1144
  br i1 %1163, label %1164, label %1145, !llvm.loop !16

1164:                                             ; preds = %1145
  %1165 = icmp sgt <4 x i32> %1160, %1161
  %1166 = select <4 x i1> %1165, <4 x i32> %1160, <4 x i32> %1161
  %1167 = shufflevector <4 x i32> %1166, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1168 = icmp sgt <4 x i32> %1166, %1167
  %1169 = select <4 x i1> %1168, <4 x i32> %1166, <4 x i32> %1167
  %1170 = shufflevector <4 x i32> %1169, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1171 = icmp sgt <4 x i32> %1169, %1170
  %1172 = select <4 x i1> %1171, <4 x i32> %1169, <4 x i32> %1170
  %1173 = extractelement <4 x i32> %1172, i32 0
  br label %1174

1174:                                             ; preds = %1164, %1135
  %1175 = phi i64 [ 0, %1135 ], [ %1144, %1164 ]
  %1176 = phi i32 [ 0, %1135 ], [ %1173, %1164 ]
  br label %1177

1177:                                             ; preds = %1174, %1177
  %1178 = phi i64 [ %1184, %1177 ], [ %1175, %1174 ]
  %1179 = phi i32 [ %1183, %1177 ], [ %1176, %1174 ]
  %1180 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %1021, i64 %1178, i32 0
  %1181 = load i32, i32* %1180, align 8
  %1182 = icmp slt i32 %1179, %1181
  %1183 = select i1 %1182, i32 %1181, i32 %1179
  %1184 = add nuw nsw i64 %1178, 1
  %1185 = icmp slt i64 %1184, %1136
  br i1 %1185, label %1177, label %1186, !llvm.loop !17

1186:                                             ; preds = %1177, %1131
  %1187 = phi i32 [ 0, %1131 ], [ %1183, %1177 ]
  %1188 = sext i32 %1187 to i64
  %1189 = call i8* @WebPSafeMalloc(i64 %1188, i64 2) #6
  %1190 = bitcast i8* %1189 to %struct.HuffmanTreeToken*
  %1191 = icmp eq i8* %1189, null
  br i1 %1191, label %1265, label %1192

1192:                                             ; preds = %1186
  br i1 %1134, label %1193, label %1236

1193:                                             ; preds = %1192
  %1194 = sext i32 %1132 to i64
  br label %1195

1195:                                             ; preds = %1233, %1193
  %1196 = phi i64 [ 0, %1193 ], [ %1234, %1233 ]
  %1197 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %1021, i64 %1196
  call fastcc void @StoreHuffmanCode(%struct.VP8LBitWriter* %19, %struct.HuffmanTree* %942, %struct.HuffmanTreeToken* nonnull %1190, %struct.HuffmanTreeCode* %1197) #6
  %1198 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %1197, i64 0, i32 0
  %1199 = load i32, i32* %1198, align 8
  %1200 = icmp sgt i32 %1199, 0
  br i1 %1200, label %1201, label %1233

1201:                                             ; preds = %1195
  %1202 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %1021, i64 %1196, i32 1
  %1203 = load i8*, i8** %1202, align 8
  %1204 = sext i32 %1199 to i64
  br label %1210

1205:                                             ; preds = %1219
  %1206 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %1021, i64 %1196, i32 2
  store i8 0, i8* %1203, align 1
  %1207 = load i16*, i16** %1206, align 8
  store i16 0, i16* %1207, align 2
  %1208 = load i32, i32* %1198, align 8
  %1209 = icmp sgt i32 %1208, 1
  br i1 %1209, label %1223, label %1233

1210:                                             ; preds = %1219, %1201
  %1211 = phi i64 [ 0, %1201 ], [ %1221, %1219 ]
  %1212 = phi i32 [ 0, %1201 ], [ %1220, %1219 ]
  %1213 = getelementptr inbounds i8, i8* %1203, i64 %1211
  %1214 = load i8, i8* %1213, align 1
  %1215 = icmp eq i8 %1214, 0
  br i1 %1215, label %1219, label %1216

1216:                                             ; preds = %1210
  %1217 = add nsw i32 %1212, 1
  %1218 = icmp sgt i32 %1212, 0
  br i1 %1218, label %1233, label %1219

1219:                                             ; preds = %1216, %1210
  %1220 = phi i32 [ %1217, %1216 ], [ %1212, %1210 ]
  %1221 = add nuw nsw i64 %1211, 1
  %1222 = icmp eq i64 %1221, %1204
  br i1 %1222, label %1205, label %1210

1223:                                             ; preds = %1205, %1223
  %1224 = phi i64 [ %1229, %1223 ], [ 1, %1205 ]
  %1225 = load i8*, i8** %1202, align 8
  %1226 = getelementptr inbounds i8, i8* %1225, i64 %1224
  store i8 0, i8* %1226, align 1
  %1227 = load i16*, i16** %1206, align 8
  %1228 = getelementptr inbounds i16, i16* %1227, i64 %1224
  store i16 0, i16* %1228, align 2
  %1229 = add nuw nsw i64 %1224, 1
  %1230 = load i32, i32* %1198, align 8
  %1231 = sext i32 %1230 to i64
  %1232 = icmp slt i64 %1229, %1231
  br i1 %1232, label %1223, label %1233

1233:                                             ; preds = %1216, %1223, %1205, %1195
  %1234 = add nuw nsw i64 %1196, 1
  %1235 = icmp slt i64 %1234, %1194
  br i1 %1235, label %1195, label %1236

1236:                                             ; preds = %1233, %1192
  %1237 = call fastcc i32 @StoreImageToBitMask(%struct.VP8LBitWriter* %19, i32 %932, i32 %933, %struct.VP8LBackwardRefs* %1012, i16* %945, %struct.HuffmanTreeCode* nonnull %1021) #6
  %1238 = icmp eq i32 %1237, 0
  br i1 %1238, label %1239, label %1262

1239:                                             ; preds = %1236
  %1240 = load i64, i64* %44, align 8
  %1241 = load i64, i64* %46, align 8
  %1242 = sub i64 %1240, %1241
  %1243 = load i32, i32* %47, align 8
  %1244 = add nsw i32 %1243, 7
  %1245 = ashr i32 %1244, 3
  %1246 = sext i32 %1245 to i64
  %1247 = add nsw i64 %1242, %1246
  %1248 = icmp ult i64 %1247, %998
  br i1 %1248, label %1249, label %1250

1249:                                             ; preds = %1239
  store i32 %1001, i32* %66, align 4
  call void @VP8LBitWriterSwap(%struct.VP8LBitWriter* %19, %struct.VP8LBitWriter* nonnull %7) #6
  br label %1250

1250:                                             ; preds = %1249, %1239
  %1251 = phi i64 [ %1247, %1249 ], [ %998, %1239 ]
  call void @WebPSafeFree(i8* nonnull %1189) #6
  %1252 = getelementptr inbounds i8, i8* %1020, i64 16
  %1253 = bitcast i8* %1252 to i8**
  %1254 = load i8*, i8** %1253, align 8
  call void @WebPSafeFree(i8* %1254) #6
  call void @WebPSafeFree(i8* nonnull %1020) #6
  %1255 = add nuw nsw i64 %997, 1
  %1256 = load i32, i32* %992, align 4
  %1257 = icmp eq i32 %1256, 0
  %1258 = select i1 %1257, i64 1, i64 2
  %1259 = icmp ult i64 %1255, %1258
  br i1 %1259, label %996, label %1278

1260:                                             ; preds = %1023
  %1261 = bitcast i8* %1020 to %struct.HuffmanTreeCode*
  br label %1271

1262:                                             ; preds = %1236
  %1263 = bitcast i8* %1020 to %struct.HuffmanTreeCode*
  %1264 = bitcast i8* %1189 to %struct.HuffmanTreeToken*
  br label %1271

1265:                                             ; preds = %1186
  %1266 = bitcast i8* %1020 to %struct.HuffmanTreeCode*
  br label %1271

1267:                                             ; preds = %1072
  %1268 = bitcast i8* %1020 to %struct.HuffmanTreeCode*
  br label %1271

1269:                                             ; preds = %1120
  %1270 = bitcast i8* %1020 to %struct.HuffmanTreeCode*
  br label %1271

1271:                                             ; preds = %987, %1015, %1011, %1005, %1260, %1262, %1265, %1267, %1269
  %1272 = phi i32 [ 0, %1260 ], [ %1237, %1262 ], [ 0, %1265 ], [ 0, %1267 ], [ %1127, %1269 ], [ 0, %1005 ], [ 0, %1011 ], [ 0, %1015 ], [ %994, %987 ]
  %1273 = phi %struct.VP8LHistogramSet* [ %1006, %1260 ], [ null, %1262 ], [ null, %1265 ], [ null, %1267 ], [ null, %1269 ], [ %1006, %1005 ], [ %1006, %1011 ], [ %1006, %1015 ], [ null, %987 ]
  %1274 = phi %struct.VP8LHistogram* [ %1007, %1260 ], [ null, %1262 ], [ null, %1265 ], [ null, %1267 ], [ null, %1269 ], [ %1007, %1005 ], [ %1007, %1011 ], [ %1007, %1015 ], [ null, %987 ]
  %1275 = phi %struct.HuffmanTreeToken* [ null, %1260 ], [ %1264, %1262 ], [ null, %1265 ], [ null, %1267 ], [ null, %1269 ], [ null, %1005 ], [ null, %1011 ], [ null, %1015 ], [ null, %987 ]
  %1276 = phi i8* [ %1020, %1260 ], [ %1020, %1262 ], [ %1020, %1265 ], [ %1020, %1267 ], [ %1020, %1269 ], [ null, %1005 ], [ null, %1011 ], [ null, %1015 ], [ null, %987 ]
  %1277 = phi %struct.HuffmanTreeCode* [ %1261, %1260 ], [ %1263, %1262 ], [ %1266, %1265 ], [ %1268, %1267 ], [ %1270, %1269 ], [ null, %1005 ], [ null, %1011 ], [ null, %1015 ], [ null, %987 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %94) #6
  br label %1285

1278:                                             ; preds = %1250, %996
  %1279 = phi i64 [ %998, %996 ], [ %1251, %1250 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %94) #6
  %1280 = add nuw nsw i64 %988, 1
  %1281 = load i32, i32* %965, align 4
  %1282 = sext i32 %1281 to i64
  %1283 = icmp slt i64 %1280, %1282
  br i1 %1283, label %987, label %1284

1284:                                             ; preds = %1278, %977
  call void @VP8LBitWriterSwap(%struct.VP8LBitWriter* %19, %struct.VP8LBitWriter* nonnull %7) #6
  br label %1285

1285:                                             ; preds = %1284, %1271, %972, %960, %952, %949, %928
  %1286 = phi i32 [ 1, %928 ], [ %1272, %1271 ], [ 0, %1284 ], [ 1, %972 ], [ 1, %960 ], [ 1, %952 ], [ 1, %949 ]
  %1287 = phi %struct.VP8LHistogramSet* [ null, %928 ], [ %1273, %1271 ], [ null, %1284 ], [ null, %972 ], [ null, %960 ], [ null, %952 ], [ null, %949 ]
  %1288 = phi %struct.VP8LHistogram* [ null, %928 ], [ %1274, %1271 ], [ null, %1284 ], [ null, %972 ], [ null, %960 ], [ null, %952 ], [ null, %949 ]
  %1289 = phi %struct.HuffmanTreeToken* [ null, %928 ], [ %1275, %1271 ], [ null, %1284 ], [ null, %972 ], [ null, %960 ], [ null, %952 ], [ null, %949 ]
  %1290 = phi i8* [ null, %928 ], [ %1276, %1271 ], [ null, %1284 ], [ null, %972 ], [ null, %960 ], [ null, %952 ], [ null, %949 ]
  %1291 = phi %struct.HuffmanTreeCode* [ null, %928 ], [ %1277, %1271 ], [ null, %1284 ], [ null, %972 ], [ null, %960 ], [ null, %952 ], [ null, %949 ]
  %1292 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %1289, i64 0, i32 0
  call void @WebPSafeFree(i8* %1292) #6
  call void @WebPSafeFree(i8* %941) #6
  call void @VP8LFreeHistogramSet(%struct.VP8LHistogramSet* %1287) #6
  call void @VP8LFreeHistogram(%struct.VP8LHistogram* %1288) #6
  call void @VP8LHashChainClear(%struct.VP8LHashChain* nonnull %8) #6
  %1293 = icmp eq %struct.HuffmanTreeCode* %1291, null
  br i1 %1293, label %1298, label %1294

1294:                                             ; preds = %1285
  %1295 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %1291, i64 0, i32 2
  %1296 = bitcast i16** %1295 to i8**
  %1297 = load i8*, i8** %1296, align 8
  call void @WebPSafeFree(i8* %1297) #6
  call void @WebPSafeFree(i8* %1290) #6
  br label %1298

1298:                                             ; preds = %1285, %1294
  call void @WebPSafeFree(i8* %944) #6
  call void @VP8LBitWriterWipeOut(%struct.VP8LBitWriter* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %93) #6
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %92) #6
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %91) #6
  %1299 = icmp eq i32 %1286, 0
  br i1 %1299, label %1300, label %1318

1300:                                             ; preds = %1298
  %1301 = load i64, i64* %44, align 8
  %1302 = load i64, i64* %46, align 8
  %1303 = sub i64 %1301, %1302
  %1304 = load i32, i32* %47, align 8
  %1305 = add nsw i32 %1304, 7
  %1306 = ashr i32 %1305, 3
  %1307 = sext i32 %1306 to i64
  %1308 = add nsw i64 %1303, %1307
  %1309 = icmp ult i64 %1308, %104
  br i1 %1309, label %1310, label %1311

1310:                                             ; preds = %1300
  call void @VP8LBitWriterSwap(%struct.VP8LBitWriter* %19, %struct.VP8LBitWriter* nonnull %11) #6
  br label %1311

1311:                                             ; preds = %1310, %1300
  %1312 = phi i64 [ %1308, %1310 ], [ %104, %1300 ]
  br i1 %54, label %1313, label %1314

1313:                                             ; preds = %1311
  call void @VP8LBitWriterReset(%struct.VP8LBitWriter* nonnull %10, %struct.VP8LBitWriter* %19) #6
  br label %1314

1314:                                             ; preds = %1313, %1311
  %1315 = add nuw nsw i64 %103, 1
  %1316 = icmp eq i64 %1315, %96
  br i1 %1316, label %1317, label %102

1317:                                             ; preds = %1314, %58
  call void @VP8LBitWriterSwap(%struct.VP8LBitWriter* nonnull %11, %struct.VP8LBitWriter* %19) #6
  br label %1318

1318:                                             ; preds = %246, %711, %1298, %912, %860, %242, %703, %2, %55, %1317
  %1319 = phi i32 [ 0, %1317 ], [ 1, %55 ], [ 1, %2 ], [ 1, %703 ], [ %267, %246 ], [ %244, %242 ], [ %869, %860 ], [ %921, %912 ], [ %1286, %1298 ], [ %717, %711 ]
  call void @VP8LBitWriterWipeOut(%struct.VP8LBitWriter* nonnull %11) #6
  %1320 = getelementptr inbounds i8, i8* %0, i64 188
  %1321 = bitcast i8* %1320 to i32*
  store i32 %1319, i32* %1321, align 4
  %1322 = icmp eq i32 %1319, 0
  %1323 = zext i1 %1322 to i32
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %50) #6
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %48) #6
  ret i32 %1323

1324:                                             ; preds = %522
  %1325 = and i32 %529, 16777215
  %1326 = mul i32 %1325, 2147483647
  %1327 = lshr i32 %1326, 21
  %1328 = zext i32 %1327 to i64
  %1329 = getelementptr inbounds [2048 x i16], [2048 x i16]* %3, i64 0, i64 %1328
  %1330 = load i16, i16* %1329, align 2
  %1331 = zext i16 %1330 to i32
  br label %1332

1332:                                             ; preds = %1324, %522
  %1333 = phi i32 [ %529, %1324 ], [ %523, %522 ]
  %1334 = phi i32 [ %1331, %1324 ], [ %524, %522 ]
  %1335 = trunc i32 %1334 to i8
  %1336 = getelementptr inbounds i8, i8* %273, i64 %527
  store i8 %1335, i8* %1336, align 1
  %1337 = add nuw nsw i64 %507, 2
  %1338 = add i64 %510, -2
  %1339 = icmp eq i64 %1338, 0
  br i1 %1339, label %531, label %506

1340:                                             ; preds = %447
  %1341 = and i32 %454, 16777215
  %1342 = mul i32 %1341, -72723225
  %1343 = lshr i32 %1342, 21
  %1344 = zext i32 %1343 to i64
  %1345 = getelementptr inbounds [2048 x i16], [2048 x i16]* %3, i64 0, i64 %1344
  %1346 = load i16, i16* %1345, align 2
  %1347 = zext i16 %1346 to i32
  br label %1348

1348:                                             ; preds = %1340, %447
  %1349 = phi i32 [ %454, %1340 ], [ %448, %447 ]
  %1350 = phi i32 [ %1347, %1340 ], [ %449, %447 ]
  %1351 = trunc i32 %1350 to i8
  %1352 = getelementptr inbounds i8, i8* %273, i64 %452
  store i8 %1351, i8* %1352, align 1
  %1353 = add nuw nsw i64 %432, 2
  %1354 = add i64 %435, -2
  %1355 = icmp eq i64 %1354, 0
  br i1 %1355, label %456, label %431

1356:                                             ; preds = %373
  %1357 = lshr i32 %380, 8
  %1358 = and i32 %1357, 255
  %1359 = zext i32 %1358 to i64
  %1360 = getelementptr inbounds [2048 x i16], [2048 x i16]* %3, i64 0, i64 %1359
  %1361 = load i16, i16* %1360, align 2
  %1362 = zext i16 %1361 to i32
  br label %1363

1363:                                             ; preds = %1356, %373
  %1364 = phi i32 [ %380, %1356 ], [ %374, %373 ]
  %1365 = phi i32 [ %1362, %1356 ], [ %375, %373 ]
  %1366 = trunc i32 %1365 to i8
  %1367 = getelementptr inbounds i8, i8* %273, i64 %378
  store i8 %1366, i8* %1367, align 1
  %1368 = add nuw nsw i64 %359, 2
  %1369 = add i64 %362, -2
  %1370 = icmp eq i64 %1369, 0
  br i1 %1370, label %382, label %358
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @VP8LBitWriterSwap(%struct.VP8LBitWriter*, %struct.VP8LBitWriter*) local_unnamed_addr #2

declare void @VP8LBitWriterWipeOut(%struct.VP8LBitWriter*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @VP8LEncoderDelete(%struct.VP8LEncoder*) unnamed_addr #0 {
  %2 = icmp eq %struct.VP8LEncoder* %0, null
  br i1 %2, label %14, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %0, i64 0, i32 19
  tail call void @VP8LHashChainClear(%struct.VP8LHashChain* %4) #6
  %5 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %0, i64 0, i32 18, i64 0
  tail call void @VP8LBackwardRefsClear(%struct.VP8LBackwardRefs* %5) #6
  %6 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %0, i64 0, i32 18, i64 1
  tail call void @VP8LBackwardRefsClear(%struct.VP8LBackwardRefs* %6) #6
  %7 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %0, i64 0, i32 18, i64 2
  tail call void @VP8LBackwardRefsClear(%struct.VP8LBackwardRefs* %7) #6
  %8 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %0, i64 0, i32 18, i64 3
  tail call void @VP8LBackwardRefsClear(%struct.VP8LBackwardRefs* %8) #6
  %9 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %0, i64 0, i32 6
  %10 = bitcast i32** %9 to i8**
  %11 = load i8*, i8** %10, align 8
  tail call void @WebPSafeFree(i8* %11) #6
  %12 = bitcast i32** %9 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 16, i1 false) #6
  %13 = bitcast %struct.VP8LEncoder* %0 to i8*
  tail call void @WebPSafeFree(i8* nonnull %13) #6
  br label %14

14:                                               ; preds = %1, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8LEncodeImage(%struct.WebPConfig*, %struct.WebPPicture*) local_unnamed_addr #0 {
  %3 = alloca [21 x i8], align 16
  %4 = alloca i32, align 4
  %5 = alloca %struct.VP8LBitWriter, align 8
  %6 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #6
  store i32 0, i32* %4, align 4
  %7 = bitcast %struct.VP8LBitWriter* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %7) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 48, i1 false)
  %8 = icmp eq %struct.WebPPicture* %1, null
  br i1 %8, label %188, label %9

9:                                                ; preds = %2
  %10 = icmp eq %struct.WebPConfig* %0, null
  br i1 %10, label %15, label %11

11:                                               ; preds = %9
  %12 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %1, i64 0, i32 12
  %13 = load i32*, i32** %12, align 8
  %14 = icmp eq i32* %13, null
  br i1 %14, label %15, label %17

15:                                               ; preds = %11, %9
  %16 = tail call i32 @WebPEncodingSetError(%struct.WebPPicture* nonnull %1, i32 3) #6
  br label %188

17:                                               ; preds = %11
  %18 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %1, i64 0, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %1, i64 0, i32 3
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %0, i64 0, i32 3
  %23 = load i32, i32* %22, align 4
  %24 = icmp ne i32 %23, 3
  %25 = mul nsw i32 %21, %19
  %26 = zext i1 %24 to i32
  %27 = shl nsw i32 %25, %26
  %28 = sext i32 %27 to i64
  %29 = call i32 @VP8LBitWriterInit(%struct.VP8LBitWriter* nonnull %5, i64 %28) #6
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %179, label %31

31:                                               ; preds = %17
  %32 = call i32 @WebPReportProgress(%struct.WebPPicture* nonnull %1, i32 1, i32* nonnull %4) #6
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %179, label %34

34:                                               ; preds = %31
  %35 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %1, i64 0, i32 19
  %36 = load %struct.WebPAuxStats*, %struct.WebPAuxStats** %35, align 8
  %37 = icmp eq %struct.WebPAuxStats* %36, null
  br i1 %37, label %43, label %38

38:                                               ; preds = %34
  %39 = bitcast %struct.WebPAuxStats* %36 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %39, i8 0, i64 188, i1 false)
  %40 = getelementptr inbounds %struct.WebPAuxStats, %struct.WebPAuxStats* %36, i64 0, i32 1, i64 0
  %41 = bitcast float* %40 to <4 x float>*
  store <4 x float> <float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01>, <4 x float>* %41, align 4
  %42 = getelementptr inbounds %struct.WebPAuxStats, %struct.WebPAuxStats* %36, i64 0, i32 1, i64 4
  store float 9.900000e+01, float* %42, align 4
  br label %43

43:                                               ; preds = %34, %38
  %44 = load i32, i32* %18, align 8
  %45 = add nsw i32 %44, -1
  %46 = load i32, i32* %20, align 4
  %47 = add nsw i32 %46, -1
  %48 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %5, i64 0, i32 1
  %49 = load i32, i32* %48, align 8
  %50 = icmp sgt i32 %49, 31
  br i1 %50, label %51, label %53

51:                                               ; preds = %43
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* nonnull %5) #6
  %52 = load i32, i32* %48, align 8
  br label %53

53:                                               ; preds = %51, %43
  %54 = phi i32 [ %52, %51 ], [ %49, %43 ]
  %55 = zext i32 %45 to i64
  %56 = zext i32 %54 to i64
  %57 = shl i64 %55, %56
  %58 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %5, i64 0, i32 0
  %59 = load i64, i64* %58, align 8
  %60 = or i64 %57, %59
  store i64 %60, i64* %58, align 8
  %61 = add nsw i32 %54, 14
  store i32 %61, i32* %48, align 8
  %62 = icmp sgt i32 %61, 31
  br i1 %62, label %63, label %66

63:                                               ; preds = %53
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* nonnull %5) #6
  %64 = load i32, i32* %48, align 8
  %65 = load i64, i64* %58, align 8
  br label %66

66:                                               ; preds = %53, %63
  %67 = phi i64 [ %65, %63 ], [ %60, %53 ]
  %68 = phi i32 [ %64, %63 ], [ %61, %53 ]
  %69 = zext i32 %47 to i64
  %70 = zext i32 %68 to i64
  %71 = shl i64 %69, %70
  %72 = or i64 %71, %67
  store i64 %72, i64* %58, align 8
  %73 = add nsw i32 %68, 14
  store i32 %73, i32* %48, align 8
  %74 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %5, i64 0, i32 5
  %75 = load i32, i32* %74, align 8
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %179

77:                                               ; preds = %66
  %78 = call i32 @WebPPictureHasTransparency(%struct.WebPPicture* nonnull %1) #6
  %79 = load i32, i32* %48, align 8
  %80 = icmp sgt i32 %79, 31
  br i1 %80, label %81, label %83

81:                                               ; preds = %77
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* nonnull %5) #6
  %82 = load i32, i32* %48, align 8
  br label %83

83:                                               ; preds = %81, %77
  %84 = phi i32 [ %82, %81 ], [ %79, %77 ]
  %85 = zext i32 %78 to i64
  %86 = zext i32 %84 to i64
  %87 = shl i64 %85, %86
  %88 = load i64, i64* %58, align 8
  %89 = or i64 %87, %88
  store i64 %89, i64* %58, align 8
  %90 = add nsw i32 %84, 1
  store i32 %90, i32* %48, align 8
  %91 = icmp sgt i32 %84, 30
  br i1 %91, label %92, label %94

92:                                               ; preds = %83
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* nonnull %5) #6
  %93 = load i32, i32* %48, align 8
  br label %94

94:                                               ; preds = %83, %92
  %95 = phi i32 [ %93, %92 ], [ %90, %83 ]
  %96 = add nsw i32 %95, 3
  store i32 %96, i32* %48, align 8
  %97 = load i32, i32* %74, align 8
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %179

99:                                               ; preds = %94
  %100 = call i32 @WebPReportProgress(%struct.WebPPicture* nonnull %1, i32 5, i32* nonnull %4) #6
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %179, label %102

102:                                              ; preds = %99
  %103 = call i32 @VP8LEncodeStream(%struct.WebPConfig* nonnull %0, %struct.WebPPicture* nonnull %1, %struct.VP8LBitWriter* nonnull %5, i32 1)
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %179

105:                                              ; preds = %102
  %106 = call i32 @WebPReportProgress(%struct.WebPPicture* nonnull %1, i32 90, i32* nonnull %4) #6
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %179, label %108

108:                                              ; preds = %105
  %109 = call i8* @VP8LBitWriterFinish(%struct.VP8LBitWriter* nonnull %5) #6
  %110 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %5, i64 0, i32 3
  %111 = bitcast i8** %110 to i64*
  %112 = load i64, i64* %111, align 8
  %113 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %5, i64 0, i32 2
  %114 = bitcast i8** %113 to i64*
  %115 = load i64, i64* %114, align 8
  %116 = sub i64 %112, %115
  %117 = load i32, i32* %48, align 8
  %118 = add nsw i32 %117, 7
  %119 = ashr i32 %118, 3
  %120 = sext i32 %119 to i64
  %121 = add nsw i64 %116, %120
  %122 = add i64 %121, 1
  %123 = and i64 %122, 1
  %124 = add i64 %121, 13
  %125 = add i64 %124, %123
  %126 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %126) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %126, i8* align 16 getelementptr inbounds ([21 x i8], [21 x i8]* @__const.WriteRiffHeader.riff, i64 0, i64 0), i64 21, i1 false) #6
  %127 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i64 0, i64 4
  %128 = trunc i64 %125 to i32
  %129 = trunc i64 %125 to i8
  store i8 %129, i8* %127, align 4
  %130 = lshr i32 %128, 8
  %131 = trunc i32 %130 to i8
  %132 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i64 0, i64 5
  store i8 %131, i8* %132, align 1
  %133 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i64 0, i64 6
  %134 = lshr i32 %128, 16
  %135 = trunc i32 %134 to i8
  store i8 %135, i8* %133, align 2
  %136 = lshr i32 %128, 24
  %137 = trunc i32 %136 to i8
  %138 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i64 0, i64 7
  store i8 %137, i8* %138, align 1
  %139 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i64 0, i64 16
  %140 = trunc i64 %122 to i32
  %141 = trunc i64 %122 to i8
  store i8 %141, i8* %139, align 16
  %142 = lshr i32 %140, 8
  %143 = trunc i32 %142 to i8
  %144 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i64 0, i64 17
  store i8 %143, i8* %144, align 1
  %145 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i64 0, i64 18
  %146 = lshr i32 %140, 16
  %147 = trunc i32 %146 to i8
  store i8 %147, i8* %145, align 2
  %148 = lshr i32 %140, 24
  %149 = trunc i32 %148 to i8
  %150 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i64 0, i64 19
  store i8 %149, i8* %150, align 1
  %151 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %1, i64 0, i32 15
  %152 = load i32 (i8*, i64, %struct.WebPPicture*)*, i32 (i8*, i64, %struct.WebPPicture*)** %151, align 8
  %153 = call i32 %152(i8* nonnull %126, i64 21, %struct.WebPPicture* nonnull %1) #6
  %154 = icmp eq i32 %153, 0
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %126) #6
  br i1 %154, label %179, label %155

155:                                              ; preds = %108
  %156 = load i32 (i8*, i64, %struct.WebPPicture*)*, i32 (i8*, i64, %struct.WebPPicture*)** %151, align 8
  %157 = call i32 %156(i8* %109, i64 %121, %struct.WebPPicture* nonnull %1) #6
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %179, label %159

159:                                              ; preds = %155
  %160 = icmp eq i64 %123, 0
  br i1 %160, label %165, label %161

161:                                              ; preds = %159
  %162 = load i32 (i8*, i64, %struct.WebPPicture*)*, i32 (i8*, i64, %struct.WebPPicture*)** %151, align 8
  %163 = call i32 %162(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @WriteImage.pad_byte, i64 0, i64 0), i64 1, %struct.WebPPicture* nonnull %1) #6
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %179, label %165

165:                                              ; preds = %161, %159
  %166 = call i32 @WebPReportProgress(%struct.WebPPicture* nonnull %1, i32 100, i32* nonnull %4) #6
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %179, label %168

168:                                              ; preds = %165
  %169 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %1, i64 0, i32 18
  %170 = load i8*, i8** %169, align 8
  %171 = icmp eq i8* %170, null
  br i1 %171, label %179, label %172

172:                                              ; preds = %168
  %173 = add nsw i32 %19, 15
  %174 = ashr i32 %173, 4
  %175 = add nsw i32 %21, 15
  %176 = ashr i32 %175, 4
  %177 = mul nsw i32 %176, %174
  %178 = sext i32 %177 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %170, i8 0, i64 %178, i1 false)
  br label %179

179:                                              ; preds = %94, %66, %161, %155, %108, %31, %99, %105, %165, %17, %168, %102, %172
  %180 = phi i32 [ %103, %102 ], [ 0, %172 ], [ 0, %168 ], [ 1, %17 ], [ 10, %165 ], [ 10, %105 ], [ 10, %99 ], [ 10, %31 ], [ 1, %66 ], [ 1, %94 ], [ 8, %108 ], [ 8, %155 ], [ 8, %161 ]
  %181 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %5, i64 0, i32 5
  %182 = load i32, i32* %181, align 8
  %183 = icmp eq i32 %182, 0
  %184 = select i1 %183, i32 %180, i32 1
  call void @VP8LBitWriterWipeOut(%struct.VP8LBitWriter* nonnull %5) #6
  %185 = icmp eq i32 %184, 0
  br i1 %185, label %188, label %186

186:                                              ; preds = %179
  %187 = call i32 @WebPEncodingSetError(%struct.WebPPicture* nonnull %1, i32 %184) #6
  br label %188

188:                                              ; preds = %179, %2, %186, %15
  %189 = phi i32 [ 0, %15 ], [ 0, %186 ], [ 0, %2 ], [ 1, %179 ]
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #6
  ret i32 %189
}

declare i32 @WebPEncodingSetError(%struct.WebPPicture*, i32) local_unnamed_addr #2

declare i32 @WebPReportProgress(%struct.WebPPicture*, i32, i32*) local_unnamed_addr #2

declare i32 @WebPPictureHasTransparency(%struct.WebPPicture*) local_unnamed_addr #2

declare i8* @WebPSafeCalloc(i64, i64) local_unnamed_addr #2

declare void @VP8LEncDspInit() local_unnamed_addr #2

declare i32 @WebPGetColorPalette(%struct.WebPPicture*, i32*) local_unnamed_addr #2

; Function Attrs: nofree
declare void @qsort(i8*, i64, i64, i32 (i8*, i8*)* nocapture) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @PaletteCompareColorsForQsort(i8* nocapture readonly, i8* nocapture readonly) #4 {
  %3 = bitcast i8* %0 to i32*
  %4 = load i32, i32* %3, align 1
  %5 = bitcast i8* %1 to i32*
  %6 = load i32, i32* %5, align 1
  %7 = icmp ult i32 %4, %6
  %8 = select i1 %7, i32 -1, i32 1
  ret i32 %8
}

declare double @VP8LBitsEntropy(i32*, i32) local_unnamed_addr #2

declare void @WebPSafeFree(i8*) local_unnamed_addr #2

declare i32 @VP8LHashChainInit(%struct.VP8LHashChain*, i32) local_unnamed_addr #2

declare void @VP8LBackwardRefsInit(%struct.VP8LBackwardRefs*, i32) local_unnamed_addr #2

declare void @VP8LBackwardRefsClear(%struct.VP8LBackwardRefs*) local_unnamed_addr #2

declare void @VP8LBitWriterReset(%struct.VP8LBitWriter*, %struct.VP8LBitWriter*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @EncodeImageNoHuffman(%struct.VP8LBitWriter*, i32*, %struct.VP8LHashChain*, %struct.VP8LBackwardRefs*, i32, i32, i32, i32) unnamed_addr #0 {
  %9 = alloca [5 x %struct.HuffmanTreeCode], align 16
  %10 = alloca i32, align 4
  %11 = bitcast [5 x %struct.HuffmanTreeCode]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %11) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 0, i64 120, i1 false)
  %12 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #6
  store i32 0, i32* %10, align 4
  %13 = tail call i8* @WebPSafeMalloc(i64 57, i64 16) #6
  %14 = bitcast i8* %13 to %struct.HuffmanTree*
  %15 = icmp eq i8* %13, null
  br i1 %15, label %109, label %16

16:                                               ; preds = %8
  %17 = tail call i32 @VP8LHashChainFill(%struct.VP8LHashChain* %2, i32 %6, i32* %1, i32 %4, i32 %5, i32 %7) #6
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %109, label %19

19:                                               ; preds = %16
  %20 = call i32 @VP8LGetBackwardReferences(i32 %4, i32 %5, i32* %1, i32 %6, i32 0, i32 3, i32 0, i32 0, %struct.VP8LHashChain* %2, %struct.VP8LBackwardRefs* %3, i32* nonnull %10) #6
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %109

22:                                               ; preds = %19
  %23 = load i32, i32* %10, align 4
  %24 = call %struct.VP8LHistogramSet* @VP8LAllocateHistogramSet(i32 1, i32 %23) #6
  %25 = icmp eq %struct.VP8LHistogramSet* %24, null
  br i1 %25, label %109, label %26

26:                                               ; preds = %22
  call void @VP8LHistogramSetClear(%struct.VP8LHistogramSet* nonnull %24) #6
  %27 = getelementptr inbounds %struct.VP8LHistogramSet, %struct.VP8LHistogramSet* %24, i64 0, i32 2
  %28 = load %struct.VP8LHistogram**, %struct.VP8LHistogram*** %27, align 8
  %29 = load %struct.VP8LHistogram*, %struct.VP8LHistogram** %28, align 8
  call void @VP8LHistogramStoreRefs(%struct.VP8LBackwardRefs* %3, %struct.VP8LHistogram* %29) #6
  %30 = getelementptr inbounds [5 x %struct.HuffmanTreeCode], [5 x %struct.HuffmanTreeCode]* %9, i64 0, i64 0
  %31 = call fastcc i32 @GetHuffBitLengthsAndCodes(%struct.VP8LHistogramSet* nonnull %24, %struct.HuffmanTreeCode* nonnull %30)
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %109, label %33

33:                                               ; preds = %26
  %34 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 1
  %35 = load i32, i32* %34, align 8
  %36 = icmp sgt i32 %35, 31
  br i1 %36, label %37, label %39

37:                                               ; preds = %33
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %0) #6
  %38 = load i32, i32* %34, align 8
  br label %39

39:                                               ; preds = %33, %37
  %40 = phi i32 [ %38, %37 ], [ %35, %33 ]
  %41 = add nsw i32 %40, 1
  store i32 %41, i32* %34, align 8
  %42 = getelementptr inbounds [5 x %struct.HuffmanTreeCode], [5 x %struct.HuffmanTreeCode]* %9, i64 0, i64 0, i32 0
  %43 = load i32, i32* %42, align 16
  %44 = icmp sgt i32 %43, 0
  %45 = select i1 %44, i32 %43, i32 0
  %46 = getelementptr inbounds [5 x %struct.HuffmanTreeCode], [5 x %struct.HuffmanTreeCode]* %9, i64 0, i64 1, i32 0
  %47 = load i32, i32* %46, align 8
  %48 = icmp slt i32 %45, %47
  %49 = select i1 %48, i32 %47, i32 %45
  %50 = getelementptr inbounds [5 x %struct.HuffmanTreeCode], [5 x %struct.HuffmanTreeCode]* %9, i64 0, i64 2, i32 0
  %51 = load i32, i32* %50, align 16
  %52 = icmp slt i32 %49, %51
  %53 = select i1 %52, i32 %51, i32 %49
  %54 = getelementptr inbounds [5 x %struct.HuffmanTreeCode], [5 x %struct.HuffmanTreeCode]* %9, i64 0, i64 3, i32 0
  %55 = load i32, i32* %54, align 8
  %56 = icmp slt i32 %53, %55
  %57 = select i1 %56, i32 %55, i32 %53
  %58 = getelementptr inbounds [5 x %struct.HuffmanTreeCode], [5 x %struct.HuffmanTreeCode]* %9, i64 0, i64 4, i32 0
  %59 = load i32, i32* %58, align 16
  %60 = icmp slt i32 %57, %59
  %61 = select i1 %60, i32 %59, i32 %57
  %62 = zext i32 %61 to i64
  %63 = call i8* @WebPSafeMalloc(i64 %62, i64 2) #6
  %64 = bitcast i8* %63 to %struct.HuffmanTreeToken*
  %65 = icmp eq i8* %63, null
  br i1 %65, label %109, label %66

66:                                               ; preds = %39, %104
  %67 = phi i64 [ %105, %104 ], [ 0, %39 ]
  %68 = getelementptr inbounds [5 x %struct.HuffmanTreeCode], [5 x %struct.HuffmanTreeCode]* %9, i64 0, i64 %67
  call fastcc void @StoreHuffmanCode(%struct.VP8LBitWriter* %0, %struct.HuffmanTree* nonnull %14, %struct.HuffmanTreeToken* nonnull %64, %struct.HuffmanTreeCode* %68)
  %69 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %68, i64 0, i32 0
  %70 = load i32, i32* %69, align 8
  %71 = icmp sgt i32 %70, 0
  br i1 %71, label %72, label %104

72:                                               ; preds = %66
  %73 = getelementptr inbounds [5 x %struct.HuffmanTreeCode], [5 x %struct.HuffmanTreeCode]* %9, i64 0, i64 %67, i32 1
  %74 = load i8*, i8** %73, align 8
  %75 = sext i32 %70 to i64
  br label %81

76:                                               ; preds = %90
  %77 = getelementptr inbounds [5 x %struct.HuffmanTreeCode], [5 x %struct.HuffmanTreeCode]* %9, i64 0, i64 %67, i32 2
  store i8 0, i8* %74, align 1
  %78 = load i16*, i16** %77, align 8
  store i16 0, i16* %78, align 2
  %79 = load i32, i32* %69, align 8
  %80 = icmp sgt i32 %79, 1
  br i1 %80, label %94, label %104

81:                                               ; preds = %90, %72
  %82 = phi i64 [ 0, %72 ], [ %92, %90 ]
  %83 = phi i32 [ 0, %72 ], [ %91, %90 ]
  %84 = getelementptr inbounds i8, i8* %74, i64 %82
  %85 = load i8, i8* %84, align 1
  %86 = icmp eq i8 %85, 0
  br i1 %86, label %90, label %87

87:                                               ; preds = %81
  %88 = add nsw i32 %83, 1
  %89 = icmp sgt i32 %83, 0
  br i1 %89, label %104, label %90

90:                                               ; preds = %87, %81
  %91 = phi i32 [ %88, %87 ], [ %83, %81 ]
  %92 = add nuw nsw i64 %82, 1
  %93 = icmp eq i64 %92, %75
  br i1 %93, label %76, label %81

94:                                               ; preds = %76, %94
  %95 = phi i64 [ %100, %94 ], [ 1, %76 ]
  %96 = load i8*, i8** %73, align 8
  %97 = getelementptr inbounds i8, i8* %96, i64 %95
  store i8 0, i8* %97, align 1
  %98 = load i16*, i16** %77, align 8
  %99 = getelementptr inbounds i16, i16* %98, i64 %95
  store i16 0, i16* %99, align 2
  %100 = add nuw nsw i64 %95, 1
  %101 = load i32, i32* %69, align 8
  %102 = sext i32 %101 to i64
  %103 = icmp slt i64 %100, %102
  br i1 %103, label %94, label %104

104:                                              ; preds = %87, %94, %76, %66
  %105 = add nuw nsw i64 %67, 1
  %106 = icmp eq i64 %105, 5
  br i1 %106, label %107, label %66

107:                                              ; preds = %104
  %108 = call fastcc i32 @StoreImageToBitMask(%struct.VP8LBitWriter* %0, i32 %4, i32 0, %struct.VP8LBackwardRefs* %3, i16* getelementptr inbounds ([1 x i16], [1 x i16]* @EncodeImageNoHuffman.histogram_symbols, i64 0, i64 0), %struct.HuffmanTreeCode* nonnull %30)
  br label %109

109:                                              ; preds = %39, %26, %22, %16, %8, %19, %107
  %110 = phi i32 [ %20, %19 ], [ %108, %107 ], [ 1, %8 ], [ 1, %16 ], [ 1, %22 ], [ 1, %26 ], [ 1, %39 ]
  %111 = phi %struct.HuffmanTreeToken* [ null, %19 ], [ %64, %107 ], [ null, %8 ], [ null, %16 ], [ null, %22 ], [ null, %26 ], [ null, %39 ]
  %112 = phi %struct.VP8LHistogramSet* [ null, %19 ], [ %24, %107 ], [ null, %8 ], [ null, %16 ], [ null, %22 ], [ %24, %26 ], [ %24, %39 ]
  %113 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %111, i64 0, i32 0
  call void @WebPSafeFree(i8* %113) #6
  call void @WebPSafeFree(i8* %13) #6
  call void @VP8LFreeHistogramSet(%struct.VP8LHistogramSet* %112) #6
  %114 = getelementptr inbounds [5 x %struct.HuffmanTreeCode], [5 x %struct.HuffmanTreeCode]* %9, i64 0, i64 0, i32 2
  %115 = bitcast i16** %114 to i8**
  %116 = load i8*, i8** %115, align 16
  call void @WebPSafeFree(i8* %116) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #6
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %11) #6
  ret i32 %110
}

declare i8* @WebPSafeMalloc(i64, i64) local_unnamed_addr #2

declare i32 @VP8LHashChainFill(%struct.VP8LHashChain*, i32, i32*, i32, i32, i32) local_unnamed_addr #2

declare i32 @VP8LGetBackwardReferences(i32, i32, i32*, i32, i32, i32, i32, i32, %struct.VP8LHashChain*, %struct.VP8LBackwardRefs*, i32*) local_unnamed_addr #2

declare %struct.VP8LHistogramSet* @VP8LAllocateHistogramSet(i32, i32) local_unnamed_addr #2

declare void @VP8LHistogramSetClear(%struct.VP8LHistogramSet*) local_unnamed_addr #2

declare void @VP8LHistogramStoreRefs(%struct.VP8LBackwardRefs*, %struct.VP8LHistogram*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @GetHuffBitLengthsAndCodes(%struct.VP8LHistogramSet* nocapture readonly, %struct.HuffmanTreeCode*) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.VP8LHistogramSet, %struct.VP8LHistogramSet* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.VP8LHistogramSet, %struct.VP8LHistogramSet* %0, i64 0, i32 2
  %8 = zext i32 %4 to i64
  br label %86

9:                                                ; preds = %86, %2
  %10 = phi i64 [ 0, %2 ], [ %112, %86 ]
  %11 = tail call i8* @WebPSafeCalloc(i64 %10, i64 3) #6
  %12 = icmp eq i8* %11, null
  br i1 %12, label %75, label %13

13:                                               ; preds = %9
  %14 = bitcast i8* %11 to i16*
  br i1 %5, label %15, label %38

15:                                               ; preds = %13
  %16 = mul nsw i32 %4, 5
  %17 = getelementptr inbounds i16, i16* %14, i64 %10
  %18 = bitcast i16* %17 to i8*
  %19 = sext i32 %16 to i64
  br label %20

20:                                               ; preds = %15, %20
  %21 = phi i64 [ 0, %15 ], [ %34, %20 ]
  %22 = phi i8* [ %18, %15 ], [ %31, %20 ]
  %23 = phi i16* [ %14, %15 ], [ %30, %20 ]
  %24 = phi i32 [ 0, %15 ], [ %33, %20 ]
  %25 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %1, i64 %21, i32 0
  %26 = load i32, i32* %25, align 8
  %27 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %1, i64 %21, i32 2
  store i16* %23, i16** %27, align 8
  %28 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %1, i64 %21, i32 1
  store i8* %22, i8** %28, align 8
  %29 = sext i32 %26 to i64
  %30 = getelementptr inbounds i16, i16* %23, i64 %29
  %31 = getelementptr inbounds i8, i8* %22, i64 %29
  %32 = icmp slt i32 %24, %26
  %33 = select i1 %32, i32 %26, i32 %24
  %34 = add nuw nsw i64 %21, 1
  %35 = icmp slt i64 %34, %19
  br i1 %35, label %20, label %36

36:                                               ; preds = %20
  %37 = sext i32 %33 to i64
  br label %38

38:                                               ; preds = %36, %13
  %39 = phi i64 [ 0, %13 ], [ %37, %36 ]
  %40 = tail call i8* @WebPSafeMalloc(i64 1, i64 %39) #6
  %41 = mul nsw i64 %39, 3
  %42 = tail call i8* @WebPSafeMalloc(i64 %41, i64 16) #6
  %43 = bitcast i8* %42 to %struct.HuffmanTree*
  %44 = icmp eq i8* %40, null
  %45 = icmp eq i8* %42, null
  %46 = or i1 %44, %45
  %47 = xor i1 %5, true
  %48 = or i1 %46, %47
  %49 = or i1 %44, %45
  %50 = xor i1 %49, true
  %51 = zext i1 %50 to i32
  br i1 %48, label %75, label %52

52:                                               ; preds = %38
  %53 = getelementptr inbounds %struct.VP8LHistogramSet, %struct.VP8LHistogramSet* %0, i64 0, i32 2
  %54 = zext i32 %4 to i64
  br label %55

55:                                               ; preds = %55, %52
  %56 = phi i64 [ 0, %52 ], [ %73, %55 ]
  %57 = mul i64 %56, 5
  %58 = and i64 %57, 4294967295
  %59 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %1, i64 %58
  %60 = load %struct.VP8LHistogram**, %struct.VP8LHistogram*** %53, align 8
  %61 = getelementptr inbounds %struct.VP8LHistogram*, %struct.VP8LHistogram** %60, i64 %56
  %62 = load %struct.VP8LHistogram*, %struct.VP8LHistogram** %61, align 8
  %63 = getelementptr inbounds %struct.VP8LHistogram, %struct.VP8LHistogram* %62, i64 0, i32 0
  %64 = load i32*, i32** %63, align 8
  tail call void @VP8LCreateHuffmanTree(i32* %64, i32 15, i8* %40, %struct.HuffmanTree* %43, %struct.HuffmanTreeCode* %59) #6
  %65 = getelementptr inbounds %struct.VP8LHistogram, %struct.VP8LHistogram* %62, i64 0, i32 1, i64 0
  %66 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %59, i64 1
  tail call void @VP8LCreateHuffmanTree(i32* %65, i32 15, i8* %40, %struct.HuffmanTree* %43, %struct.HuffmanTreeCode* %66) #6
  %67 = getelementptr inbounds %struct.VP8LHistogram, %struct.VP8LHistogram* %62, i64 0, i32 2, i64 0
  %68 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %59, i64 2
  tail call void @VP8LCreateHuffmanTree(i32* %67, i32 15, i8* %40, %struct.HuffmanTree* %43, %struct.HuffmanTreeCode* %68) #6
  %69 = getelementptr inbounds %struct.VP8LHistogram, %struct.VP8LHistogram* %62, i64 0, i32 3, i64 0
  %70 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %59, i64 3
  tail call void @VP8LCreateHuffmanTree(i32* %69, i32 15, i8* %40, %struct.HuffmanTree* %43, %struct.HuffmanTreeCode* %70) #6
  %71 = getelementptr inbounds %struct.VP8LHistogram, %struct.VP8LHistogram* %62, i64 0, i32 4, i64 0
  %72 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %59, i64 4
  tail call void @VP8LCreateHuffmanTree(i32* %71, i32 15, i8* %40, %struct.HuffmanTree* %43, %struct.HuffmanTreeCode* %72) #6
  %73 = add nuw nsw i64 %56, 1
  %74 = icmp eq i64 %73, %54
  br i1 %74, label %75, label %55

75:                                               ; preds = %55, %38, %9
  %76 = phi i32 [ %51, %38 ], [ 0, %9 ], [ 1, %55 ]
  %77 = phi i8* [ %40, %38 ], [ null, %9 ], [ %40, %55 ]
  %78 = phi i8* [ %42, %38 ], [ null, %9 ], [ %42, %55 ]
  tail call void @WebPSafeFree(i8* %78) #6
  tail call void @WebPSafeFree(i8* %77) #6
  %79 = icmp eq i32 %76, 0
  br i1 %79, label %80, label %85

80:                                               ; preds = %75
  tail call void @WebPSafeFree(i8* %11) #6
  %81 = bitcast %struct.HuffmanTreeCode* %1 to i8*
  %82 = mul nsw i32 %4, 5
  %83 = sext i32 %82 to i64
  %84 = mul nsw i64 %83, 24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 %84, i1 false)
  br label %85

85:                                               ; preds = %80, %75
  ret i32 %76

86:                                               ; preds = %86, %6
  %87 = phi i64 [ 0, %6 ], [ %113, %86 ]
  %88 = phi i64 [ 0, %6 ], [ %112, %86 ]
  %89 = mul i64 %87, 5
  %90 = and i64 %89, 4294967295
  %91 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %1, i64 %90
  %92 = load %struct.VP8LHistogram**, %struct.VP8LHistogram*** %7, align 8
  %93 = getelementptr inbounds %struct.VP8LHistogram*, %struct.VP8LHistogram** %92, i64 %87
  %94 = load %struct.VP8LHistogram*, %struct.VP8LHistogram** %93, align 8
  %95 = getelementptr inbounds %struct.VP8LHistogram, %struct.VP8LHistogram* %94, i64 0, i32 5
  %96 = load i32, i32* %95, align 8
  %97 = icmp sgt i32 %96, 0
  %98 = shl i32 1, %96
  %99 = add i32 %98, 280
  %100 = select i1 %97, i32 %99, i32 280
  %101 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %91, i64 0, i32 0
  store i32 %100, i32* %101, align 8
  %102 = sext i32 %100 to i64
  %103 = add i64 %88, %102
  %104 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %91, i64 1
  %105 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %104, i64 0, i32 0
  store i32 256, i32* %105, align 8
  %106 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %91, i64 2
  %107 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %106, i64 0, i32 0
  store i32 256, i32* %107, align 8
  %108 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %91, i64 3
  %109 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %108, i64 0, i32 0
  store i32 256, i32* %109, align 8
  %110 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %91, i64 4
  %111 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %110, i64 0, i32 0
  store i32 40, i32* %111, align 8
  %112 = add i64 %103, 808
  %113 = add nuw nsw i64 %87, 1
  %114 = icmp eq i64 %113, %8
  br i1 %114, label %9, label %86
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @StoreHuffmanCode(%struct.VP8LBitWriter*, %struct.HuffmanTree*, %struct.HuffmanTreeToken*, %struct.HuffmanTreeCode*) unnamed_addr #0 {
  %5 = alloca [19 x i8], align 16
  %6 = alloca [19 x i16], align 16
  %7 = alloca %struct.HuffmanTreeCode, align 8
  %8 = alloca [19 x i32], align 16
  %9 = alloca [19 x i8], align 16
  %10 = alloca i64, align 8
  %11 = bitcast i64* %10 to [2 x i32]*
  %12 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #6
  store i64 0, i64* %10, align 8
  %13 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %3, i64 0, i32 0
  %14 = load i32, i32* %13, align 8
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %16, label %42

16:                                               ; preds = %4
  %17 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %3, i64 0, i32 1
  %18 = load i8*, i8** %17, align 8
  %19 = sext i32 %14 to i64
  br label %20

20:                                               ; preds = %16, %34
  %21 = phi i64 [ 0, %16 ], [ %36, %34 ]
  %22 = phi i32 [ 0, %16 ], [ %35, %34 ]
  %23 = getelementptr inbounds i8, i8* %18, i64 %21
  %24 = load i8, i8* %23, align 1
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %20
  %27 = icmp slt i32 %22, 2
  br i1 %27, label %28, label %32

28:                                               ; preds = %26
  %29 = sext i32 %22 to i64
  %30 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 %29
  %31 = trunc i64 %21 to i32
  store i32 %31, i32* %30, align 4
  br label %32

32:                                               ; preds = %28, %26
  %33 = add nsw i32 %22, 1
  br label %34

34:                                               ; preds = %20, %32
  %35 = phi i32 [ %33, %32 ], [ %22, %20 ]
  %36 = add nuw nsw i64 %21, 1
  %37 = icmp slt i64 %36, %19
  %38 = icmp slt i32 %35, 3
  %39 = and i1 %38, %37
  br i1 %39, label %20, label %40

40:                                               ; preds = %34
  %41 = icmp eq i32 %35, 0
  br i1 %41, label %42, label %56

42:                                               ; preds = %4, %40
  %43 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 1
  %44 = load i32, i32* %43, align 8
  %45 = icmp sgt i32 %44, 31
  br i1 %45, label %46, label %48

46:                                               ; preds = %42
  tail call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %0) #6
  %47 = load i32, i32* %43, align 8
  br label %48

48:                                               ; preds = %42, %46
  %49 = phi i32 [ %47, %46 ], [ %44, %42 ]
  %50 = zext i32 %49 to i64
  %51 = shl i64 1, %50
  %52 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 0
  %53 = load i64, i64* %52, align 8
  %54 = or i64 %51, %53
  store i64 %54, i64* %52, align 8
  %55 = add nsw i32 %49, 4
  store i32 %55, i32* %43, align 8
  br label %478

56:                                               ; preds = %40
  br i1 %38, label %57, label %151

57:                                               ; preds = %56
  %58 = bitcast i64* %10 to i32*
  %59 = load i32, i32* %58, align 8
  %60 = icmp slt i32 %59, 256
  br i1 %60, label %61, label %151

61:                                               ; preds = %57
  %62 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 1
  %63 = load i32, i32* %62, align 4
  %64 = icmp slt i32 %63, 256
  br i1 %64, label %65, label %151

65:                                               ; preds = %61
  %66 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 1
  %67 = load i32, i32* %66, align 8
  %68 = icmp sgt i32 %67, 31
  br i1 %68, label %69, label %71

69:                                               ; preds = %65
  tail call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %0) #6
  %70 = load i32, i32* %66, align 8
  br label %71

71:                                               ; preds = %65, %69
  %72 = phi i32 [ %70, %69 ], [ %67, %65 ]
  %73 = zext i32 %72 to i64
  %74 = shl i64 1, %73
  %75 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 0
  %76 = load i64, i64* %75, align 8
  %77 = or i64 %74, %76
  store i64 %77, i64* %75, align 8
  %78 = add nsw i32 %72, 1
  store i32 %78, i32* %66, align 8
  %79 = add nsw i32 %35, -1
  %80 = icmp sgt i32 %72, 30
  br i1 %80, label %81, label %84

81:                                               ; preds = %71
  tail call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %0) #6
  %82 = load i32, i32* %66, align 8
  %83 = load i64, i64* %75, align 8
  br label %84

84:                                               ; preds = %71, %81
  %85 = phi i64 [ %83, %81 ], [ %77, %71 ]
  %86 = phi i32 [ %82, %81 ], [ %78, %71 ]
  %87 = zext i32 %79 to i64
  %88 = zext i32 %86 to i64
  %89 = shl i64 %87, %88
  %90 = or i64 %89, %85
  store i64 %90, i64* %75, align 8
  %91 = add nsw i32 %86, 1
  store i32 %91, i32* %66, align 8
  %92 = icmp slt i32 %59, 2
  %93 = icmp sgt i32 %86, 30
  br i1 %92, label %94, label %111

94:                                               ; preds = %84
  br i1 %93, label %95, label %97

95:                                               ; preds = %94
  tail call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %0) #6
  %96 = load i32, i32* %66, align 8
  br label %97

97:                                               ; preds = %94, %95
  %98 = phi i32 [ %96, %95 ], [ %91, %94 ]
  %99 = add nsw i32 %98, 1
  store i32 %99, i32* %66, align 8
  %100 = icmp sgt i32 %98, 30
  br i1 %100, label %101, label %103

101:                                              ; preds = %97
  tail call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %0) #6
  %102 = load i32, i32* %66, align 8
  br label %103

103:                                              ; preds = %97, %101
  %104 = phi i32 [ %102, %101 ], [ %99, %97 ]
  %105 = zext i32 %59 to i64
  %106 = zext i32 %104 to i64
  %107 = shl i64 %105, %106
  %108 = load i64, i64* %75, align 8
  %109 = or i64 %107, %108
  store i64 %109, i64* %75, align 8
  %110 = add nsw i32 %104, 1
  br label %134

111:                                              ; preds = %84
  br i1 %93, label %112, label %115

112:                                              ; preds = %111
  tail call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %0) #6
  %113 = load i32, i32* %66, align 8
  %114 = load i64, i64* %75, align 8
  br label %115

115:                                              ; preds = %111, %112
  %116 = phi i64 [ %114, %112 ], [ %90, %111 ]
  %117 = phi i32 [ %113, %112 ], [ %91, %111 ]
  %118 = zext i32 %117 to i64
  %119 = shl i64 1, %118
  %120 = or i64 %119, %116
  store i64 %120, i64* %75, align 8
  %121 = add nsw i32 %117, 1
  store i32 %121, i32* %66, align 8
  %122 = icmp sgt i32 %117, 30
  br i1 %122, label %123, label %126

123:                                              ; preds = %115
  tail call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %0) #6
  %124 = load i32, i32* %66, align 8
  %125 = load i64, i64* %75, align 8
  br label %126

126:                                              ; preds = %115, %123
  %127 = phi i64 [ %125, %123 ], [ %120, %115 ]
  %128 = phi i32 [ %124, %123 ], [ %121, %115 ]
  %129 = zext i32 %59 to i64
  %130 = zext i32 %128 to i64
  %131 = shl i64 %129, %130
  %132 = or i64 %131, %127
  store i64 %132, i64* %75, align 8
  %133 = add nsw i32 %128, 8
  br label %134

134:                                              ; preds = %126, %103
  %135 = phi i64 [ %132, %126 ], [ %109, %103 ]
  %136 = phi i32 [ %133, %126 ], [ %110, %103 ]
  store i32 %136, i32* %66, align 8
  %137 = icmp eq i32 %35, 2
  br i1 %137, label %138, label %478

138:                                              ; preds = %134
  %139 = icmp sgt i32 %136, 31
  br i1 %139, label %140, label %143

140:                                              ; preds = %138
  tail call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %0) #6
  %141 = load i32, i32* %66, align 8
  %142 = load i64, i64* %75, align 8
  br label %143

143:                                              ; preds = %138, %140
  %144 = phi i64 [ %142, %140 ], [ %135, %138 ]
  %145 = phi i32 [ %141, %140 ], [ %136, %138 ]
  %146 = zext i32 %63 to i64
  %147 = zext i32 %145 to i64
  %148 = shl i64 %146, %147
  %149 = or i64 %148, %144
  store i64 %149, i64* %75, align 8
  %150 = add nsw i32 %145, 8
  store i32 %150, i32* %66, align 8
  br label %478

151:                                              ; preds = %61, %57, %56
  %152 = getelementptr inbounds [19 x i8], [19 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 19, i8* nonnull %152) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %152, i8 0, i64 19, i1 false) #6
  %153 = bitcast [19 x i16]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 38, i8* nonnull %153) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %153, i8 0, i64 38, i1 false) #6
  %154 = bitcast %struct.HuffmanTreeCode* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %154) #6
  %155 = bitcast %struct.HuffmanTreeCode* %7 to i64*
  store i64 -6148914694099828717, i64* %155, align 8
  %156 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %7, i64 0, i32 0
  %157 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %7, i64 0, i32 1
  store i8* %152, i8** %157, align 8
  %158 = getelementptr inbounds [19 x i16], [19 x i16]* %6, i64 0, i64 0
  %159 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %7, i64 0, i32 2
  store i16* %158, i16** %159, align 8
  %160 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 1
  %161 = load i32, i32* %160, align 8
  %162 = icmp sgt i32 %161, 31
  br i1 %162, label %163, label %165

163:                                              ; preds = %151
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %0) #6
  %164 = load i32, i32* %160, align 8
  br label %165

165:                                              ; preds = %163, %151
  %166 = phi i32 [ %164, %163 ], [ %161, %151 ]
  %167 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 0
  %168 = add nsw i32 %166, 1
  store i32 %168, i32* %160, align 8
  %169 = call i32 @VP8LCreateCompressedHuffmanTree(%struct.HuffmanTreeCode* %3, %struct.HuffmanTreeToken* %2, i32 %14) #6
  %170 = bitcast [19 x i32]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 76, i8* nonnull %170) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %170, i8 0, i64 76, i1 false) #6
  %171 = getelementptr inbounds [19 x i8], [19 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 19, i8* nonnull %171) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %171, i8 0, i64 19, i1 false) #6
  %172 = icmp sgt i32 %169, 0
  br i1 %172, label %173, label %228

173:                                              ; preds = %165
  %174 = zext i32 %169 to i64
  %175 = add nsw i64 %174, -1
  %176 = and i64 %174, 3
  %177 = icmp ult i64 %175, 3
  br i1 %177, label %213, label %178

178:                                              ; preds = %173
  %179 = sub nsw i64 %174, %176
  br label %180

180:                                              ; preds = %180, %178
  %181 = phi i64 [ 0, %178 ], [ %210, %180 ]
  %182 = phi i64 [ %179, %178 ], [ %211, %180 ]
  %183 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %2, i64 %181, i32 0
  %184 = load i8, i8* %183, align 1
  %185 = zext i8 %184 to i64
  %186 = getelementptr inbounds [19 x i32], [19 x i32]* %8, i64 0, i64 %185
  %187 = load i32, i32* %186, align 4
  %188 = add i32 %187, 1
  store i32 %188, i32* %186, align 4
  %189 = or i64 %181, 1
  %190 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %2, i64 %189, i32 0
  %191 = load i8, i8* %190, align 1
  %192 = zext i8 %191 to i64
  %193 = getelementptr inbounds [19 x i32], [19 x i32]* %8, i64 0, i64 %192
  %194 = load i32, i32* %193, align 4
  %195 = add i32 %194, 1
  store i32 %195, i32* %193, align 4
  %196 = or i64 %181, 2
  %197 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %2, i64 %196, i32 0
  %198 = load i8, i8* %197, align 1
  %199 = zext i8 %198 to i64
  %200 = getelementptr inbounds [19 x i32], [19 x i32]* %8, i64 0, i64 %199
  %201 = load i32, i32* %200, align 4
  %202 = add i32 %201, 1
  store i32 %202, i32* %200, align 4
  %203 = or i64 %181, 3
  %204 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %2, i64 %203, i32 0
  %205 = load i8, i8* %204, align 1
  %206 = zext i8 %205 to i64
  %207 = getelementptr inbounds [19 x i32], [19 x i32]* %8, i64 0, i64 %206
  %208 = load i32, i32* %207, align 4
  %209 = add i32 %208, 1
  store i32 %209, i32* %207, align 4
  %210 = add nuw nsw i64 %181, 4
  %211 = add i64 %182, -4
  %212 = icmp eq i64 %211, 0
  br i1 %212, label %213, label %180

213:                                              ; preds = %180, %173
  %214 = phi i64 [ 0, %173 ], [ %210, %180 ]
  %215 = icmp eq i64 %176, 0
  br i1 %215, label %228, label %216

216:                                              ; preds = %213, %216
  %217 = phi i64 [ %225, %216 ], [ %214, %213 ]
  %218 = phi i64 [ %226, %216 ], [ %176, %213 ]
  %219 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %2, i64 %217, i32 0
  %220 = load i8, i8* %219, align 1
  %221 = zext i8 %220 to i64
  %222 = getelementptr inbounds [19 x i32], [19 x i32]* %8, i64 0, i64 %221
  %223 = load i32, i32* %222, align 4
  %224 = add i32 %223, 1
  store i32 %224, i32* %222, align 4
  %225 = add nuw nsw i64 %217, 1
  %226 = add i64 %218, -1
  %227 = icmp eq i64 %226, 0
  br i1 %227, label %228, label %216, !llvm.loop !18

228:                                              ; preds = %213, %216, %165
  %229 = getelementptr inbounds [19 x i32], [19 x i32]* %8, i64 0, i64 0
  call void @VP8LCreateHuffmanTree(i32* nonnull %229, i32 7, i8* nonnull %171, %struct.HuffmanTree* %1, %struct.HuffmanTreeCode* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 19, i8* nonnull %171) #6
  call void @llvm.lifetime.end.p0i8(i64 76, i8* nonnull %170) #6
  br label %230

230:                                              ; preds = %233, %228
  %231 = phi i64 [ %234, %233 ], [ 19, %228 ]
  %232 = icmp ugt i64 %231, 4
  br i1 %232, label %233, label %241

233:                                              ; preds = %230
  %234 = add nsw i64 %231, -1
  %235 = getelementptr inbounds [19 x i8], [19 x i8]* @StoreHuffmanTreeOfHuffmanTreeToBitMask.kStorageOrder, i64 0, i64 %234
  %236 = load i8, i8* %235, align 1
  %237 = zext i8 %236 to i64
  %238 = getelementptr inbounds [19 x i8], [19 x i8]* %5, i64 0, i64 %237
  %239 = load i8, i8* %238, align 1
  %240 = icmp eq i8 %239, 0
  br i1 %240, label %230, label %241

241:                                              ; preds = %233, %230
  %242 = trunc i64 %231 to i32
  %243 = add i64 %231, 4294967292
  %244 = load i32, i32* %160, align 8
  %245 = icmp sgt i32 %244, 31
  br i1 %245, label %246, label %248

246:                                              ; preds = %241
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %0) #6
  %247 = load i32, i32* %160, align 8
  br label %248

248:                                              ; preds = %246, %241
  %249 = phi i32 [ %247, %246 ], [ %244, %241 ]
  %250 = and i64 %243, 4294967295
  %251 = zext i32 %249 to i64
  %252 = shl i64 %250, %251
  %253 = load i64, i64* %167, align 8
  %254 = or i64 %252, %253
  store i64 %254, i64* %167, align 8
  %255 = add nsw i32 %249, 4
  store i32 %255, i32* %160, align 8
  %256 = icmp sgt i32 %242, 0
  br i1 %256, label %257, label %282

257:                                              ; preds = %248
  %258 = and i64 %231, 4294967295
  br label %259

259:                                              ; preds = %272, %257
  %260 = phi i64 [ %254, %257 ], [ %278, %272 ]
  %261 = phi i32 [ %255, %257 ], [ %279, %272 ]
  %262 = phi i64 [ 0, %257 ], [ %280, %272 ]
  %263 = getelementptr inbounds [19 x i8], [19 x i8]* @StoreHuffmanTreeOfHuffmanTreeToBitMask.kStorageOrder, i64 0, i64 %262
  %264 = load i8, i8* %263, align 1
  %265 = zext i8 %264 to i64
  %266 = getelementptr inbounds [19 x i8], [19 x i8]* %5, i64 0, i64 %265
  %267 = load i8, i8* %266, align 1
  %268 = icmp sgt i32 %261, 31
  br i1 %268, label %269, label %272

269:                                              ; preds = %259
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %0) #6
  %270 = load i32, i32* %160, align 8
  %271 = load i64, i64* %167, align 8
  br label %272

272:                                              ; preds = %269, %259
  %273 = phi i64 [ %271, %269 ], [ %260, %259 ]
  %274 = phi i32 [ %270, %269 ], [ %261, %259 ]
  %275 = zext i8 %267 to i64
  %276 = zext i32 %274 to i64
  %277 = shl i64 %275, %276
  %278 = or i64 %277, %273
  store i64 %278, i64* %167, align 8
  %279 = add nsw i32 %274, 3
  store i32 %279, i32* %160, align 8
  %280 = add nuw nsw i64 %262, 1
  %281 = icmp eq i64 %280, %258
  br i1 %281, label %282, label %259

282:                                              ; preds = %272, %248
  %283 = load i32, i32* %156, align 8
  %284 = icmp sgt i32 %283, 0
  br i1 %284, label %285, label %315

285:                                              ; preds = %282
  %286 = load i8*, i8** %157, align 8
  %287 = sext i32 %283 to i64
  br label %288

288:                                              ; preds = %297, %285
  %289 = phi i64 [ 0, %285 ], [ %299, %297 ]
  %290 = phi i32 [ 0, %285 ], [ %298, %297 ]
  %291 = getelementptr inbounds i8, i8* %286, i64 %289
  %292 = load i8, i8* %291, align 1
  %293 = icmp eq i8 %292, 0
  br i1 %293, label %297, label %294

294:                                              ; preds = %288
  %295 = add nsw i32 %290, 1
  %296 = icmp sgt i32 %290, 0
  br i1 %296, label %315, label %297

297:                                              ; preds = %294, %288
  %298 = phi i32 [ %295, %294 ], [ %290, %288 ]
  %299 = add nuw nsw i64 %289, 1
  %300 = icmp eq i64 %299, %287
  br i1 %300, label %301, label %288

301:                                              ; preds = %297
  store i8 0, i8* %286, align 1
  %302 = load i16*, i16** %159, align 8
  store i16 0, i16* %302, align 2
  %303 = load i32, i32* %156, align 8
  %304 = icmp sgt i32 %303, 1
  br i1 %304, label %305, label %315

305:                                              ; preds = %301, %305
  %306 = phi i64 [ %311, %305 ], [ 1, %301 ]
  %307 = load i8*, i8** %157, align 8
  %308 = getelementptr inbounds i8, i8* %307, i64 %306
  store i8 0, i8* %308, align 1
  %309 = load i16*, i16** %159, align 8
  %310 = getelementptr inbounds i16, i16* %309, i64 %306
  store i16 0, i16* %310, align 2
  %311 = add nuw nsw i64 %306, 1
  %312 = load i32, i32* %156, align 8
  %313 = sext i32 %312 to i64
  %314 = icmp slt i64 %311, %313
  br i1 %314, label %305, label %315

315:                                              ; preds = %294, %305, %301, %282
  br i1 %172, label %316, label %339

316:                                              ; preds = %315
  %317 = sext i32 %169 to i64
  br label %318

318:                                              ; preds = %336, %316
  %319 = phi i64 [ %317, %316 ], [ %322, %336 ]
  %320 = phi i32 [ %169, %316 ], [ %323, %336 ]
  %321 = phi i32 [ 0, %316 ], [ %337, %336 ]
  %322 = add nsw i64 %319, -1
  %323 = add nsw i32 %320, -1
  %324 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %2, i64 %322, i32 0
  %325 = load i8, i8* %324, align 1
  switch i8 %325, label %339 [
    i8 18, label %326
    i8 17, label %326
    i8 0, label %326
  ]

326:                                              ; preds = %318, %318, %318
  %327 = zext i8 %325 to i64
  %328 = getelementptr inbounds [19 x i8], [19 x i8]* %5, i64 0, i64 %327
  %329 = load i8, i8* %328, align 1
  %330 = zext i8 %329 to i32
  %331 = add nsw i32 %321, %330
  switch i8 %325, label %336 [
    i8 17, label %332
    i8 18, label %334
  ]

332:                                              ; preds = %326
  %333 = add nsw i32 %331, 3
  br label %336

334:                                              ; preds = %326
  %335 = add nsw i32 %331, 7
  br label %336

336:                                              ; preds = %334, %332, %326
  %337 = phi i32 [ %333, %332 ], [ %335, %334 ], [ %331, %326 ]
  %338 = icmp sgt i64 %322, 0
  br i1 %338, label %318, label %339

339:                                              ; preds = %336, %318, %315
  %340 = phi i32 [ 0, %315 ], [ %337, %336 ], [ %321, %318 ]
  %341 = phi i32 [ %169, %315 ], [ %323, %336 ], [ %320, %318 ]
  %342 = icmp sgt i32 %341, 1
  %343 = icmp sgt i32 %340, 12
  %344 = and i1 %343, %342
  %345 = select i1 %344, i32 %341, i32 %169
  %346 = load i32, i32* %160, align 8
  %347 = icmp sgt i32 %346, 31
  br i1 %347, label %348, label %350

348:                                              ; preds = %339
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %0) #6
  %349 = load i32, i32* %160, align 8
  br label %350

350:                                              ; preds = %348, %339
  %351 = phi i32 [ %349, %348 ], [ %346, %339 ]
  %352 = zext i1 %344 to i64
  %353 = zext i32 %351 to i64
  %354 = shl i64 %352, %353
  %355 = load i64, i64* %167, align 8
  %356 = or i64 %354, %355
  store i64 %356, i64* %167, align 8
  %357 = add nsw i32 %351, 1
  store i32 %357, i32* %160, align 8
  br i1 %344, label %358, label %400

358:                                              ; preds = %350
  %359 = icmp eq i32 %341, 2
  br i1 %359, label %360, label %367

360:                                              ; preds = %358
  %361 = icmp sgt i32 %351, 30
  br i1 %361, label %362, label %364

362:                                              ; preds = %360
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %0) #6
  %363 = load i32, i32* %160, align 8
  br label %364

364:                                              ; preds = %362, %360
  %365 = phi i32 [ %363, %362 ], [ %357, %360 ]
  %366 = add nsw i32 %365, 5
  br label %398

367:                                              ; preds = %358
  %368 = add nsw i32 %341, -2
  %369 = call i32 @llvm.ctlz.i32(i32 %368, i1 true) #6, !range !13
  %370 = lshr i32 %369, 1
  %371 = xor i32 %370, 15
  %372 = icmp sgt i32 %351, 30
  br i1 %372, label %373, label %376

373:                                              ; preds = %367
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %0) #6
  %374 = load i32, i32* %160, align 8
  %375 = load i64, i64* %167, align 8
  br label %376

376:                                              ; preds = %373, %367
  %377 = phi i64 [ %375, %373 ], [ %356, %367 ]
  %378 = phi i32 [ %374, %373 ], [ %357, %367 ]
  %379 = zext i32 %371 to i64
  %380 = zext i32 %378 to i64
  %381 = shl i64 %379, %380
  %382 = or i64 %381, %377
  store i64 %382, i64* %167, align 8
  %383 = add nsw i32 %378, 3
  store i32 %383, i32* %160, align 8
  %384 = shl nuw nsw i32 %371, 1
  %385 = add nuw nsw i32 %384, 2
  %386 = icmp sgt i32 %383, 31
  br i1 %386, label %387, label %390

387:                                              ; preds = %376
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %0) #6
  %388 = load i32, i32* %160, align 8
  %389 = load i64, i64* %167, align 8
  br label %390

390:                                              ; preds = %387, %376
  %391 = phi i64 [ %389, %387 ], [ %382, %376 ]
  %392 = phi i32 [ %388, %387 ], [ %383, %376 ]
  %393 = zext i32 %368 to i64
  %394 = zext i32 %392 to i64
  %395 = shl i64 %393, %394
  %396 = or i64 %395, %391
  store i64 %396, i64* %167, align 8
  %397 = add nsw i32 %385, %392
  br label %398

398:                                              ; preds = %364, %390
  %399 = phi i32 [ %397, %390 ], [ %366, %364 ]
  store i32 %399, i32* %160, align 8
  br label %400

400:                                              ; preds = %398, %350
  %401 = phi i32 [ %357, %350 ], [ %399, %398 ]
  %402 = icmp sgt i32 %345, 0
  br i1 %402, label %403, label %477

403:                                              ; preds = %400
  %404 = zext i32 %345 to i64
  br label %405

405:                                              ; preds = %473, %403
  %406 = phi i32 [ %401, %403 ], [ %474, %473 ]
  %407 = phi i64 [ 0, %403 ], [ %475, %473 ]
  %408 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %2, i64 %407, i32 0
  %409 = load i8, i8* %408, align 1
  %410 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %2, i64 %407, i32 1
  %411 = load i8, i8* %410, align 1
  %412 = load i16*, i16** %159, align 8
  %413 = zext i8 %409 to i64
  %414 = getelementptr inbounds i16, i16* %412, i64 %413
  %415 = load i16, i16* %414, align 2
  %416 = load i8*, i8** %157, align 8
  %417 = getelementptr inbounds i8, i8* %416, i64 %413
  %418 = load i8, i8* %417, align 1
  %419 = zext i8 %418 to i32
  %420 = icmp eq i8 %418, 0
  br i1 %420, label %433, label %421

421:                                              ; preds = %405
  %422 = icmp sgt i32 %406, 31
  br i1 %422, label %423, label %425

423:                                              ; preds = %421
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %0) #6
  %424 = load i32, i32* %160, align 8
  br label %425

425:                                              ; preds = %423, %421
  %426 = phi i32 [ %424, %423 ], [ %406, %421 ]
  %427 = zext i16 %415 to i64
  %428 = zext i32 %426 to i64
  %429 = shl i64 %427, %428
  %430 = load i64, i64* %167, align 8
  %431 = or i64 %429, %430
  store i64 %431, i64* %167, align 8
  %432 = add nsw i32 %426, %419
  store i32 %432, i32* %160, align 8
  br label %433

433:                                              ; preds = %425, %405
  %434 = phi i32 [ %432, %425 ], [ %406, %405 ]
  switch i8 %409, label %473 [
    i8 16, label %435
    i8 17, label %447
    i8 18, label %459
  ]

435:                                              ; preds = %433
  %436 = icmp sgt i32 %434, 31
  br i1 %436, label %437, label %439

437:                                              ; preds = %435
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %0) #6
  %438 = load i32, i32* %160, align 8
  br label %439

439:                                              ; preds = %437, %435
  %440 = phi i32 [ %438, %437 ], [ %434, %435 ]
  %441 = zext i8 %411 to i64
  %442 = zext i32 %440 to i64
  %443 = shl i64 %441, %442
  %444 = load i64, i64* %167, align 8
  %445 = or i64 %443, %444
  store i64 %445, i64* %167, align 8
  %446 = add nsw i32 %440, 2
  br label %471

447:                                              ; preds = %433
  %448 = icmp sgt i32 %434, 31
  br i1 %448, label %449, label %451

449:                                              ; preds = %447
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %0) #6
  %450 = load i32, i32* %160, align 8
  br label %451

451:                                              ; preds = %449, %447
  %452 = phi i32 [ %450, %449 ], [ %434, %447 ]
  %453 = zext i8 %411 to i64
  %454 = zext i32 %452 to i64
  %455 = shl i64 %453, %454
  %456 = load i64, i64* %167, align 8
  %457 = or i64 %455, %456
  store i64 %457, i64* %167, align 8
  %458 = add nsw i32 %452, 3
  br label %471

459:                                              ; preds = %433
  %460 = icmp sgt i32 %434, 31
  br i1 %460, label %461, label %463

461:                                              ; preds = %459
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %0) #6
  %462 = load i32, i32* %160, align 8
  br label %463

463:                                              ; preds = %461, %459
  %464 = phi i32 [ %462, %461 ], [ %434, %459 ]
  %465 = zext i8 %411 to i64
  %466 = zext i32 %464 to i64
  %467 = shl i64 %465, %466
  %468 = load i64, i64* %167, align 8
  %469 = or i64 %467, %468
  store i64 %469, i64* %167, align 8
  %470 = add nsw i32 %464, 7
  br label %471

471:                                              ; preds = %439, %451, %463
  %472 = phi i32 [ %470, %463 ], [ %458, %451 ], [ %446, %439 ]
  store i32 %472, i32* %160, align 8
  br label %473

473:                                              ; preds = %471, %433
  %474 = phi i32 [ %434, %433 ], [ %472, %471 ]
  %475 = add nuw nsw i64 %407, 1
  %476 = icmp eq i64 %475, %404
  br i1 %476, label %477, label %405

477:                                              ; preds = %473, %400
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %154) #6
  call void @llvm.lifetime.end.p0i8(i64 38, i8* nonnull %153) #6
  call void @llvm.lifetime.end.p0i8(i64 19, i8* nonnull %152) #6
  br label %478

478:                                              ; preds = %477, %143, %134, %48
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @StoreImageToBitMask(%struct.VP8LBitWriter*, i32, i32, %struct.VP8LBackwardRefs*, i16* nocapture readonly, %struct.HuffmanTreeCode* nocapture readonly) unnamed_addr #0 {
  %7 = alloca %struct.VP8LRefsCursor, align 8
  %8 = icmp eq i32 %2, 0
  br i1 %8, label %14, label %9

9:                                                ; preds = %6
  %10 = shl i32 1, %2
  %11 = add i32 %1, -1
  %12 = add i32 %11, %10
  %13 = lshr i32 %12, %2
  br label %14

14:                                               ; preds = %6, %9
  %15 = phi i32 [ %13, %9 ], [ 1, %6 ]
  %16 = shl i32 -1, %2
  %17 = select i1 %8, i32 0, i32 %16
  %18 = load i16, i16* %4, align 2
  %19 = bitcast %struct.VP8LRefsCursor* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %19) #6
  %20 = getelementptr inbounds %struct.VP8LRefsCursor, %struct.VP8LRefsCursor* %7, i64 0, i32 0
  %21 = getelementptr inbounds %struct.VP8LRefsCursor, %struct.VP8LRefsCursor* %7, i64 0, i32 2
  %22 = bitcast %struct.VP8LRefsCursor* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 -86, i64 24, i1 false)
  call void @VP8LRefsCursorInit(%struct.VP8LRefsCursor* nonnull sret %7, %struct.VP8LBackwardRefs* %3) #6
  %23 = load %struct.PixOrCopy*, %struct.PixOrCopy** %20, align 8
  %24 = icmp eq %struct.PixOrCopy* %23, null
  br i1 %24, label %289, label %25

25:                                               ; preds = %14
  %26 = zext i16 %18 to i64
  %27 = mul nuw nsw i64 %26, 5
  %28 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %5, i64 %27
  %29 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 1
  %30 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 0
  br label %31

31:                                               ; preds = %25, %286
  %32 = phi %struct.PixOrCopy* [ %23, %25 ], [ %287, %286 ]
  %33 = phi i32 [ 0, %25 ], [ %279, %286 ]
  %34 = phi i32 [ 0, %25 ], [ %278, %286 ]
  %35 = phi %struct.HuffmanTreeCode* [ %28, %25 ], [ %57, %286 ]
  %36 = phi i32 [ 0, %25 ], [ %56, %286 ]
  %37 = phi i32 [ 0, %25 ], [ %55, %286 ]
  %38 = and i32 %33, %17
  %39 = icmp eq i32 %37, %38
  %40 = and i32 %34, %17
  %41 = icmp eq i32 %36, %40
  %42 = and i1 %41, %39
  br i1 %42, label %54, label %43

43:                                               ; preds = %31
  %44 = ashr i32 %34, %2
  %45 = mul nsw i32 %44, %15
  %46 = ashr i32 %33, %2
  %47 = add nsw i32 %45, %46
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds i16, i16* %4, i64 %48
  %50 = load i16, i16* %49, align 2
  %51 = zext i16 %50 to i64
  %52 = mul nuw nsw i64 %51, 5
  %53 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %5, i64 %52
  br label %54

54:                                               ; preds = %31, %43
  %55 = phi i32 [ %38, %43 ], [ %37, %31 ]
  %56 = phi i32 [ %40, %43 ], [ %36, %31 ]
  %57 = phi %struct.HuffmanTreeCode* [ %53, %43 ], [ %35, %31 ]
  %58 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %32, i64 0, i32 0
  %59 = load i8, i8* %58, align 4
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %61, label %106

61:                                               ; preds = %54
  %62 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %32, i64 0, i32 2
  %63 = load i32, i32* %62, align 4
  %64 = lshr i32 %63, 8
  %65 = and i32 %64, 255
  %66 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %57, i64 0, i32 1
  %67 = load i8*, i8** %66, align 8
  %68 = zext i32 %65 to i64
  %69 = getelementptr inbounds i8, i8* %67, i64 %68
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i32
  %72 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %57, i64 0, i32 2
  %73 = load i16*, i16** %72, align 8
  %74 = getelementptr inbounds i16, i16* %73, i64 %68
  %75 = load i16, i16* %74, align 2
  %76 = icmp eq i8 %70, 0
  br i1 %76, label %91, label %77

77:                                               ; preds = %61
  %78 = load i32, i32* %29, align 8
  %79 = icmp sgt i32 %78, 31
  br i1 %79, label %80, label %82

80:                                               ; preds = %77
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %0) #6
  %81 = load i32, i32* %29, align 8
  br label %82

82:                                               ; preds = %80, %77
  %83 = phi i32 [ %81, %80 ], [ %78, %77 ]
  %84 = zext i16 %75 to i64
  %85 = zext i32 %83 to i64
  %86 = shl i64 %84, %85
  %87 = load i64, i64* %30, align 8
  %88 = or i64 %86, %87
  store i64 %88, i64* %30, align 8
  %89 = add nsw i32 %83, %71
  store i32 %89, i32* %29, align 8
  %90 = load i32, i32* %62, align 4
  br label %91

91:                                               ; preds = %61, %82
  %92 = phi i32 [ %63, %61 ], [ %90, %82 ]
  %93 = lshr i32 %92, 16
  %94 = and i32 %93, 255
  %95 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %57, i64 1, i32 1
  %96 = load i8*, i8** %95, align 8
  %97 = zext i32 %94 to i64
  %98 = getelementptr inbounds i8, i8* %96, i64 %97
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %57, i64 1, i32 2
  %102 = load i16*, i16** %101, align 8
  %103 = getelementptr inbounds i16, i16* %102, i64 %97
  %104 = load i16, i16* %103, align 2
  %105 = icmp eq i8 %99, 0
  br i1 %105, label %308, label %294

106:                                              ; preds = %54
  %107 = icmp eq i8 %59, 1
  %108 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %32, i64 0, i32 2
  %109 = load i32, i32* %108, align 4
  br i1 %107, label %110, label %136

110:                                              ; preds = %106
  %111 = add nsw i32 %109, 280
  %112 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %57, i64 0, i32 1
  %113 = load i8*, i8** %112, align 8
  %114 = sext i32 %111 to i64
  %115 = getelementptr inbounds i8, i8* %113, i64 %114
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %116 to i32
  %118 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %57, i64 0, i32 2
  %119 = load i16*, i16** %118, align 8
  %120 = getelementptr inbounds i16, i16* %119, i64 %114
  %121 = load i16, i16* %120, align 2
  %122 = icmp eq i8 %116, 0
  br i1 %122, label %265, label %123

123:                                              ; preds = %110
  %124 = load i32, i32* %29, align 8
  %125 = icmp sgt i32 %124, 31
  br i1 %125, label %126, label %128

126:                                              ; preds = %123
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %0) #6
  %127 = load i32, i32* %29, align 8
  br label %128

128:                                              ; preds = %126, %123
  %129 = phi i32 [ %127, %126 ], [ %124, %123 ]
  %130 = zext i16 %121 to i64
  %131 = zext i32 %129 to i64
  %132 = shl i64 %130, %131
  %133 = load i64, i64* %30, align 8
  %134 = or i64 %132, %133
  store i64 %134, i64* %30, align 8
  %135 = add nsw i32 %129, %117
  store i32 %135, i32* %29, align 8
  br label %265

136:                                              ; preds = %106
  %137 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %32, i64 0, i32 1
  %138 = load i16, i16* %137, align 2
  %139 = icmp ult i16 %138, 512
  br i1 %139, label %140, label %151

140:                                              ; preds = %136
  %141 = zext i16 %138 to i64
  %142 = getelementptr inbounds [512 x %struct.VP8LPrefixCode], [512 x %struct.VP8LPrefixCode]* @kPrefixEncodeCode, i64 0, i64 %141, i32 0
  %143 = load i8, i8* %142, align 2
  %144 = getelementptr inbounds [512 x %struct.VP8LPrefixCode], [512 x %struct.VP8LPrefixCode]* @kPrefixEncodeCode, i64 0, i64 %141, i32 1
  %145 = load i8, i8* %144, align 1
  %146 = sext i8 %143 to i32
  %147 = sext i8 %145 to i32
  %148 = getelementptr inbounds [512 x i8], [512 x i8]* @kPrefixEncodeExtraBitsValue, i64 0, i64 %141
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i32
  br label %164

151:                                              ; preds = %136
  %152 = zext i16 %138 to i32
  %153 = add nsw i32 %152, -1
  %154 = call i32 @llvm.ctlz.i32(i32 %153, i1 true) #6, !range !13
  %155 = xor i32 %154, 31
  %156 = add nsw i32 %155, -1
  %157 = lshr i32 %153, %156
  %158 = and i32 %157, 1
  %159 = shl nsw i32 -1, %156
  %160 = xor i32 %159, -1
  %161 = and i32 %153, %160
  %162 = shl nuw nsw i32 %155, 1
  %163 = or i32 %158, %162
  br label %164

164:                                              ; preds = %140, %151
  %165 = phi i32 [ %150, %140 ], [ %161, %151 ]
  %166 = phi i32 [ %147, %140 ], [ %156, %151 ]
  %167 = phi i32 [ %146, %140 ], [ %163, %151 ]
  %168 = add nsw i32 %167, 256
  %169 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %57, i64 0, i32 1
  %170 = load i8*, i8** %169, align 8
  %171 = sext i32 %168 to i64
  %172 = getelementptr inbounds i8, i8* %170, i64 %171
  %173 = load i8, i8* %172, align 1
  %174 = zext i8 %173 to i32
  %175 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %57, i64 0, i32 2
  %176 = load i16*, i16** %175, align 8
  %177 = getelementptr inbounds i16, i16* %176, i64 %171
  %178 = load i16, i16* %177, align 2
  %179 = zext i16 %178 to i32
  %180 = shl i32 %165, %174
  %181 = or i32 %180, %179
  %182 = add nsw i32 %166, %174
  %183 = icmp sgt i32 %182, 0
  br i1 %183, label %184, label %197

184:                                              ; preds = %164
  %185 = load i32, i32* %29, align 8
  %186 = icmp sgt i32 %185, 31
  br i1 %186, label %187, label %189

187:                                              ; preds = %184
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %0) #6
  %188 = load i32, i32* %29, align 8
  br label %189

189:                                              ; preds = %187, %184
  %190 = phi i32 [ %188, %187 ], [ %185, %184 ]
  %191 = zext i32 %181 to i64
  %192 = zext i32 %190 to i64
  %193 = shl i64 %191, %192
  %194 = load i64, i64* %30, align 8
  %195 = or i64 %193, %194
  store i64 %195, i64* %30, align 8
  %196 = add nsw i32 %190, %182
  store i32 %196, i32* %29, align 8
  br label %197

197:                                              ; preds = %164, %189
  %198 = icmp slt i32 %109, 512
  br i1 %198, label %199, label %210

199:                                              ; preds = %197
  %200 = sext i32 %109 to i64
  %201 = getelementptr inbounds [512 x %struct.VP8LPrefixCode], [512 x %struct.VP8LPrefixCode]* @kPrefixEncodeCode, i64 0, i64 %200, i32 0
  %202 = load i8, i8* %201, align 2
  %203 = getelementptr inbounds [512 x %struct.VP8LPrefixCode], [512 x %struct.VP8LPrefixCode]* @kPrefixEncodeCode, i64 0, i64 %200, i32 1
  %204 = load i8, i8* %203, align 1
  %205 = sext i8 %202 to i32
  %206 = sext i8 %204 to i32
  %207 = getelementptr inbounds [512 x i8], [512 x i8]* @kPrefixEncodeExtraBitsValue, i64 0, i64 %200
  %208 = load i8, i8* %207, align 1
  %209 = zext i8 %208 to i32
  br label %222

210:                                              ; preds = %197
  %211 = add nsw i32 %109, -1
  %212 = call i32 @llvm.ctlz.i32(i32 %211, i1 true) #6, !range !13
  %213 = xor i32 %212, 31
  %214 = add nsw i32 %213, -1
  %215 = lshr i32 %211, %214
  %216 = and i32 %215, 1
  %217 = shl nsw i32 -1, %214
  %218 = xor i32 %217, -1
  %219 = and i32 %211, %218
  %220 = shl nuw nsw i32 %213, 1
  %221 = or i32 %216, %220
  br label %222

222:                                              ; preds = %199, %210
  %223 = phi i32 [ %209, %199 ], [ %219, %210 ]
  %224 = phi i32 [ %206, %199 ], [ %214, %210 ]
  %225 = phi i32 [ %205, %199 ], [ %221, %210 ]
  %226 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %57, i64 4, i32 1
  %227 = load i8*, i8** %226, align 8
  %228 = sext i32 %225 to i64
  %229 = getelementptr inbounds i8, i8* %227, i64 %228
  %230 = load i8, i8* %229, align 1
  %231 = zext i8 %230 to i32
  %232 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %57, i64 4, i32 2
  %233 = load i16*, i16** %232, align 8
  %234 = getelementptr inbounds i16, i16* %233, i64 %228
  %235 = load i16, i16* %234, align 2
  %236 = icmp eq i8 %230, 0
  br i1 %236, label %250, label %237

237:                                              ; preds = %222
  %238 = load i32, i32* %29, align 8
  %239 = icmp sgt i32 %238, 31
  br i1 %239, label %240, label %242

240:                                              ; preds = %237
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %0) #6
  %241 = load i32, i32* %29, align 8
  br label %242

242:                                              ; preds = %240, %237
  %243 = phi i32 [ %241, %240 ], [ %238, %237 ]
  %244 = zext i16 %235 to i64
  %245 = zext i32 %243 to i64
  %246 = shl i64 %244, %245
  %247 = load i64, i64* %30, align 8
  %248 = or i64 %246, %247
  store i64 %248, i64* %30, align 8
  %249 = add nsw i32 %243, %231
  store i32 %249, i32* %29, align 8
  br label %250

250:                                              ; preds = %222, %242
  %251 = icmp sgt i32 %224, 0
  br i1 %251, label %252, label %265

252:                                              ; preds = %250
  %253 = load i32, i32* %29, align 8
  %254 = icmp sgt i32 %253, 31
  br i1 %254, label %255, label %257

255:                                              ; preds = %252
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %0) #6
  %256 = load i32, i32* %29, align 8
  br label %257

257:                                              ; preds = %255, %252
  %258 = phi i32 [ %256, %255 ], [ %253, %252 ]
  %259 = zext i32 %223 to i64
  %260 = zext i32 %258 to i64
  %261 = shl i64 %259, %260
  %262 = load i64, i64* %30, align 8
  %263 = or i64 %261, %262
  store i64 %263, i64* %30, align 8
  %264 = add nsw i32 %258, %224
  store i32 %264, i32* %29, align 8
  br label %265

265:                                              ; preds = %336, %355, %257, %250, %128, %110
  %266 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %32, i64 0, i32 1
  %267 = load i16, i16* %266, align 2
  %268 = zext i16 %267 to i32
  %269 = add i32 %33, %268
  %270 = icmp slt i32 %269, %1
  br i1 %270, label %277, label %271

271:                                              ; preds = %265, %271
  %272 = phi i32 [ %274, %271 ], [ %269, %265 ]
  %273 = phi i32 [ %275, %271 ], [ %34, %265 ]
  %274 = sub nsw i32 %272, %1
  %275 = add nsw i32 %273, 1
  %276 = icmp slt i32 %274, %1
  br i1 %276, label %277, label %271

277:                                              ; preds = %271, %265
  %278 = phi i32 [ %34, %265 ], [ %275, %271 ]
  %279 = phi i32 [ %269, %265 ], [ %274, %271 ]
  %280 = load %struct.PixOrCopy*, %struct.PixOrCopy** %20, align 8
  %281 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %280, i64 1
  store %struct.PixOrCopy* %281, %struct.PixOrCopy** %20, align 8
  %282 = load %struct.PixOrCopy*, %struct.PixOrCopy** %21, align 8
  %283 = icmp eq %struct.PixOrCopy* %281, %282
  br i1 %283, label %284, label %286

284:                                              ; preds = %277
  call void @VP8LRefsCursorNextBlock(%struct.VP8LRefsCursor* nonnull %7) #6
  %285 = load %struct.PixOrCopy*, %struct.PixOrCopy** %20, align 8
  br label %286

286:                                              ; preds = %277, %284
  %287 = phi %struct.PixOrCopy* [ %281, %277 ], [ %285, %284 ]
  %288 = icmp eq %struct.PixOrCopy* %287, null
  br i1 %288, label %289, label %31

289:                                              ; preds = %286, %14
  %290 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 5
  %291 = load i32, i32* %290, align 8
  %292 = icmp ne i32 %291, 0
  %293 = zext i1 %292 to i32
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %19) #6
  ret i32 %293

294:                                              ; preds = %91
  %295 = load i32, i32* %29, align 8
  %296 = icmp sgt i32 %295, 31
  br i1 %296, label %297, label %299

297:                                              ; preds = %294
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %0) #6
  %298 = load i32, i32* %29, align 8
  br label %299

299:                                              ; preds = %297, %294
  %300 = phi i32 [ %298, %297 ], [ %295, %294 ]
  %301 = zext i16 %104 to i64
  %302 = zext i32 %300 to i64
  %303 = shl i64 %301, %302
  %304 = load i64, i64* %30, align 8
  %305 = or i64 %303, %304
  store i64 %305, i64* %30, align 8
  %306 = add nsw i32 %300, %100
  store i32 %306, i32* %29, align 8
  %307 = load i32, i32* %62, align 4
  br label %308

308:                                              ; preds = %299, %91
  %309 = phi i32 [ %307, %299 ], [ %92, %91 ]
  %310 = and i32 %309, 255
  %311 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %57, i64 2, i32 1
  %312 = load i8*, i8** %311, align 8
  %313 = zext i32 %310 to i64
  %314 = getelementptr inbounds i8, i8* %312, i64 %313
  %315 = load i8, i8* %314, align 1
  %316 = zext i8 %315 to i32
  %317 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %57, i64 2, i32 2
  %318 = load i16*, i16** %317, align 8
  %319 = getelementptr inbounds i16, i16* %318, i64 %313
  %320 = load i16, i16* %319, align 2
  %321 = icmp eq i8 %315, 0
  br i1 %321, label %336, label %322

322:                                              ; preds = %308
  %323 = load i32, i32* %29, align 8
  %324 = icmp sgt i32 %323, 31
  br i1 %324, label %325, label %327

325:                                              ; preds = %322
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %0) #6
  %326 = load i32, i32* %29, align 8
  br label %327

327:                                              ; preds = %325, %322
  %328 = phi i32 [ %326, %325 ], [ %323, %322 ]
  %329 = zext i16 %320 to i64
  %330 = zext i32 %328 to i64
  %331 = shl i64 %329, %330
  %332 = load i64, i64* %30, align 8
  %333 = or i64 %331, %332
  store i64 %333, i64* %30, align 8
  %334 = add nsw i32 %328, %316
  store i32 %334, i32* %29, align 8
  %335 = load i32, i32* %62, align 4
  br label %336

336:                                              ; preds = %327, %308
  %337 = phi i32 [ %335, %327 ], [ %309, %308 ]
  %338 = lshr i32 %337, 24
  %339 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %57, i64 3, i32 1
  %340 = load i8*, i8** %339, align 8
  %341 = zext i32 %338 to i64
  %342 = getelementptr inbounds i8, i8* %340, i64 %341
  %343 = load i8, i8* %342, align 1
  %344 = zext i8 %343 to i32
  %345 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %57, i64 3, i32 2
  %346 = load i16*, i16** %345, align 8
  %347 = getelementptr inbounds i16, i16* %346, i64 %341
  %348 = load i16, i16* %347, align 2
  %349 = icmp eq i8 %343, 0
  br i1 %349, label %265, label %350

350:                                              ; preds = %336
  %351 = load i32, i32* %29, align 8
  %352 = icmp sgt i32 %351, 31
  br i1 %352, label %353, label %355

353:                                              ; preds = %350
  call void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* %0) #6
  %354 = load i32, i32* %29, align 8
  br label %355

355:                                              ; preds = %353, %350
  %356 = phi i32 [ %354, %353 ], [ %351, %350 ]
  %357 = zext i16 %348 to i64
  %358 = zext i32 %356 to i64
  %359 = shl i64 %357, %358
  %360 = load i64, i64* %30, align 8
  %361 = or i64 %359, %360
  store i64 %361, i64* %30, align 8
  %362 = add nsw i32 %356, %344
  store i32 %362, i32* %29, align 8
  br label %265
}

declare void @VP8LFreeHistogramSet(%struct.VP8LHistogramSet*) local_unnamed_addr #2

declare void @VP8LCreateHuffmanTree(i32*, i32, i8*, %struct.HuffmanTree*, %struct.HuffmanTreeCode*) local_unnamed_addr #2

declare i32 @VP8LCreateCompressedHuffmanTree(%struct.HuffmanTreeCode*, %struct.HuffmanTreeToken*, i32) local_unnamed_addr #2

declare void @VP8LRefsCursorInit(%struct.VP8LRefsCursor* sret, %struct.VP8LBackwardRefs*) local_unnamed_addr #2

declare void @VP8LRefsCursorNextBlock(%struct.VP8LRefsCursor*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @AllocateTransformBuffer(%struct.VP8LEncoder* nocapture, i32, i32) unnamed_addr #0 {
  %4 = mul nsw i32 %2, %1
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %0, i64 0, i32 14
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %17, label %9

9:                                                ; preds = %3
  %10 = shl i32 %1, 1
  %11 = add i32 %10, 2
  %12 = sext i32 %11 to i64
  %13 = sext i32 %10 to i64
  %14 = add nsw i64 %13, 3
  %15 = lshr i64 %14, 2
  %16 = add nsw i64 %15, %12
  br label %21

17:                                               ; preds = %3
  %18 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %0, i64 0, i32 12
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %33, label %21

21:                                               ; preds = %9, %17
  %22 = phi i64 [ 0, %17 ], [ %16, %9 ]
  %23 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %0, i64 0, i32 10
  %24 = load i32, i32* %23, align 8
  %25 = shl nsw i32 -1, %24
  %26 = xor i32 %25, -1
  %27 = add i32 %26, %1
  %28 = lshr i32 %27, %24
  %29 = add i32 %26, %2
  %30 = lshr i32 %29, %24
  %31 = mul i32 %28, %30
  %32 = zext i32 %31 to i64
  br label %33

33:                                               ; preds = %17, %21
  %34 = phi i64 [ %22, %21 ], [ 0, %17 ]
  %35 = phi i64 [ %32, %21 ], [ 0, %17 ]
  %36 = add nsw i64 %5, 16
  %37 = add nsw i64 %36, %34
  %38 = add nsw i64 %37, %35
  %39 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %0, i64 0, i32 6
  %40 = load i32*, i32** %39, align 8
  %41 = icmp eq i32* %40, null
  %42 = bitcast i32* %40 to i8*
  br i1 %41, label %47, label %43

43:                                               ; preds = %33
  %44 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %0, i64 0, i32 7
  %45 = load i64, i64* %44, align 8
  %46 = icmp ugt i64 %38, %45
  br i1 %46, label %47, label %56

47:                                               ; preds = %43, %33
  tail call void @WebPSafeFree(i8* %42) #6
  %48 = bitcast i32** %39 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %48, i8 0, i64 16, i1 false) #6
  %49 = tail call i8* @WebPSafeMalloc(i64 %38, i64 4) #6
  %50 = icmp eq i8* %49, null
  br i1 %50, label %72, label %51

51:                                               ; preds = %47
  %52 = bitcast i32** %39 to i8**
  %53 = bitcast i8* %49 to i32*
  store i8* %49, i8** %52, align 8
  %54 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %0, i64 0, i32 7
  store i64 %38, i64* %54, align 8
  %55 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %0, i64 0, i32 3
  store i32 0, i32* %55, align 8
  br label %56

56:                                               ; preds = %51, %43
  %57 = phi i32* [ %53, %51 ], [ %40, %43 ]
  %58 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %0, i64 0, i32 2
  store i32* %57, i32** %58, align 8
  %59 = getelementptr inbounds i32, i32* %57, i64 %5
  %60 = ptrtoint i32* %59 to i64
  %61 = add i64 %60, 31
  %62 = and i64 %61, -32
  %63 = inttoptr i64 %62 to i32*
  %64 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %0, i64 0, i32 4
  store i32* %63, i32** %64, align 8
  %65 = getelementptr inbounds i32, i32* %63, i64 %34
  %66 = ptrtoint i32* %65 to i64
  %67 = add i64 %66, 31
  %68 = and i64 %67, -32
  %69 = inttoptr i64 %68 to i32*
  %70 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %0, i64 0, i32 5
  store i32* %69, i32** %70, align 8
  %71 = getelementptr inbounds %struct.VP8LEncoder, %struct.VP8LEncoder* %0, i64 0, i32 8
  store i32 %1, i32* %71, align 8
  br label %72

72:                                               ; preds = %47, %56
  %73 = phi i32 [ 0, %56 ], [ 1, %47 ]
  ret i32 %73
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #5

declare void @VP8LResidualImage(i32, i32, i32, i32, i32*, i32*, i32*, i32, i32, i32) local_unnamed_addr #2

declare void @VP8LColorSpaceTransform(i32, i32, i32, i32, i32*, i32*) local_unnamed_addr #2

declare void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter*) local_unnamed_addr #2

declare %struct.VP8LHistogram* @VP8LAllocateHistogram(i32) local_unnamed_addr #2

declare i32 @VP8LGetHistoImageSymbols(i32, i32, %struct.VP8LBackwardRefs*, i32, i32, i32, i32, %struct.VP8LHistogramSet*, %struct.VP8LHistogram*, i16*) local_unnamed_addr #2

declare void @VP8LFreeHistogram(%struct.VP8LHistogram*) local_unnamed_addr #2

declare void @VP8LHashChainClear(%struct.VP8LHashChain*) local_unnamed_addr #2

declare i8* @VP8LBitWriterFinish(%struct.VP8LBitWriter*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = !{!7}
!7 = distinct !{!7, !8}
!8 = distinct !{!8, !"LVerDomain"}
!9 = !{!10}
!10 = distinct !{!10, !8}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !3}
!13 = !{i32 0, i32 33}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.unroll.disable"}
!16 = distinct !{!16, !3}
!17 = distinct !{!17, !5, !3}
!18 = distinct !{!18, !15}
