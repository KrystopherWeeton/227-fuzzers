; ModuleID = '../../third_party/libzip/src/lib/zip_open.c'
source_filename = "../../third_party/libzip/src/lib/zip_open.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque
%struct.zip_progress = type opaque
%struct.zip_stat = type { i64, i8*, i64, i64, i64, i64, i32, i16, i16, i32 }
%struct.zip_buffer = type { i8, i8, i8*, i64, i64 }
%struct.zip_cdir = type { %struct.zip_entry*, i64, i64, i64, i64, %struct.zip_string*, i8 }

@zip_open_from_source.needed_support_read = internal unnamed_addr global i64 -1, align 8
@zip_open_from_source.needed_support_write = internal unnamed_addr global i64 -1, align 8
@.str = private unnamed_addr constant [5 x i8] c"PK\05\06\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"PK\06\07\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"PK\06\06\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.zip* @zip_open(i8*, i32, i32*) local_unnamed_addr #0 {
  %4 = alloca %struct.zip_error, align 8
  %5 = bitcast %struct.zip_error* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #7
  %6 = bitcast %struct.zip_error* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @zip_error_init(%struct.zip_error* nonnull %4) #7
  %7 = call %struct.zip_source* @zip_source_file_create(i8* %0, i64 0, i64 -1, %struct.zip_error* nonnull %4) #7
  %8 = icmp eq %struct.zip_source* %7, null
  br i1 %8, label %9, label %19

9:                                                ; preds = %3
  %10 = call i32 @zip_error_code_zip(%struct.zip_error* nonnull %4) #7
  %11 = call i32 @zip_error_system_type(%struct.zip_error* nonnull %4) #7
  %12 = icmp eq i32 %11, 1
  br i1 %12, label %13, label %16

13:                                               ; preds = %9
  %14 = call i32 @zip_error_code_system(%struct.zip_error* nonnull %4) #7
  %15 = tail call i32* @__errno_location() #8
  store i32 %14, i32* %15, align 4
  br label %16

16:                                               ; preds = %13, %9
  %17 = icmp eq i32* %2, null
  br i1 %17, label %32, label %18

18:                                               ; preds = %16
  store i32 %10, i32* %2, align 4
  br label %32

19:                                               ; preds = %3
  %20 = call %struct.zip* @zip_open_from_source(%struct.zip_source* nonnull %7, i32 %1, %struct.zip_error* nonnull %4)
  %21 = icmp eq %struct.zip* %20, null
  br i1 %21, label %22, label %32

22:                                               ; preds = %19
  call void @zip_source_free(%struct.zip_source* nonnull %7) #7
  %23 = call i32 @zip_error_code_zip(%struct.zip_error* nonnull %4) #7
  %24 = call i32 @zip_error_system_type(%struct.zip_error* nonnull %4) #7
  %25 = icmp eq i32 %24, 1
  br i1 %25, label %26, label %29

26:                                               ; preds = %22
  %27 = call i32 @zip_error_code_system(%struct.zip_error* nonnull %4) #7
  %28 = tail call i32* @__errno_location() #8
  store i32 %27, i32* %28, align 4
  br label %29

29:                                               ; preds = %26, %22
  %30 = icmp eq i32* %2, null
  br i1 %30, label %32, label %31

31:                                               ; preds = %29
  store i32 %23, i32* %2, align 4
  br label %32

32:                                               ; preds = %19, %31, %29, %18, %16
  %33 = phi %struct.zip* [ null, %16 ], [ null, %18 ], [ null, %29 ], [ null, %31 ], [ %20, %19 ]
  call void @zip_error_fini(%struct.zip_error* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #7
  ret %struct.zip* %33
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @zip_error_init(%struct.zip_error*) local_unnamed_addr #2

declare %struct.zip_source* @zip_source_file_create(i8*, i64, i64, %struct.zip_error*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_zip_set_open_error(i32*, %struct.zip_error*, i32) local_unnamed_addr #0 {
  %4 = icmp eq %struct.zip_error* %1, null
  br i1 %4, label %12, label %5

5:                                                ; preds = %3
  %6 = tail call i32 @zip_error_code_zip(%struct.zip_error* nonnull %1) #7
  %7 = tail call i32 @zip_error_system_type(%struct.zip_error* nonnull %1) #7
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %9, label %12

9:                                                ; preds = %5
  %10 = tail call i32 @zip_error_code_system(%struct.zip_error* nonnull %1) #7
  %11 = tail call i32* @__errno_location() #8
  store i32 %10, i32* %11, align 4
  br label %12

12:                                               ; preds = %3, %5, %9
  %13 = phi i32 [ %6, %9 ], [ %6, %5 ], [ %2, %3 ]
  %14 = icmp eq i32* %0, null
  br i1 %14, label %16, label %15

15:                                               ; preds = %12
  store i32 %13, i32* %0, align 4
  br label %16

16:                                               ; preds = %12, %15
  ret void
}

declare void @zip_error_fini(%struct.zip_error*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct.zip* @zip_open_from_source(%struct.zip_source*, i32, %struct.zip_error*) local_unnamed_addr #0 {
  %4 = alloca %struct.zip_stat, align 8
  %5 = icmp slt i32 %1, 0
  %6 = icmp eq %struct.zip_source* %0, null
  %7 = or i1 %6, %5
  br i1 %7, label %8, label %9

8:                                                ; preds = %3
  tail call void @zip_error_set(%struct.zip_error* %2, i32 18, i32 0) #7
  br label %93

9:                                                ; preds = %3
  %10 = tail call i64 @zip_source_supports(%struct.zip_source* nonnull %0) #7
  %11 = load i64, i64* @zip_open_from_source.needed_support_read, align 8
  %12 = icmp eq i64 %11, -1
  br i1 %12, label %13, label %17

13:                                               ; preds = %9
  %14 = tail call i64 (i32, ...) @zip_source_make_command_bitmap(i32 0, i32 1, i32 2, i32 6, i32 7, i32 3, i32 -1) #7
  store i64 %14, i64* @zip_open_from_source.needed_support_read, align 8
  %15 = tail call i64 (i32, ...) @zip_source_make_command_bitmap(i32 8, i32 9, i32 10, i32 12, i32 13, i32 15, i32 -1) #7
  store i64 %15, i64* @zip_open_from_source.needed_support_write, align 8
  %16 = load i64, i64* @zip_open_from_source.needed_support_read, align 8
  br label %17

17:                                               ; preds = %13, %9
  %18 = phi i64 [ %16, %13 ], [ %11, %9 ]
  %19 = and i64 %18, %10
  %20 = icmp eq i64 %19, %18
  br i1 %20, label %22, label %21

21:                                               ; preds = %17
  tail call void @zip_error_set(%struct.zip_error* %2, i32 28, i32 0) #7
  br label %93

22:                                               ; preds = %17
  %23 = load i64, i64* @zip_open_from_source.needed_support_write, align 8
  %24 = and i64 %23, %10
  %25 = icmp eq i64 %24, %23
  %26 = or i32 %1, 16
  %27 = select i1 %25, i32 %1, i32 %26
  %28 = and i32 %27, 24
  %29 = icmp eq i32 %28, 24
  br i1 %29, label %30, label %31

30:                                               ; preds = %22
  tail call void @zip_error_set(%struct.zip_error* %2, i32 25, i32 0) #7
  br label %93

31:                                               ; preds = %22
  %32 = bitcast %struct.zip_stat* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %32) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %32, i8 -86, i64 64, i1 false) #7
  call void @zip_stat_init(%struct.zip_stat* nonnull %4) #7
  %33 = call i32 @zip_source_stat(%struct.zip_source* nonnull %0, %struct.zip_stat* nonnull %4) #7
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %62, label %35

35:                                               ; preds = %31
  %36 = call %struct.zip_error* @zip_source_error(%struct.zip_source* nonnull %0) #7
  %37 = call i32 @zip_error_code_zip(%struct.zip_error* %36) #7
  %38 = icmp eq i32 %37, 5
  br i1 %38, label %39, label %42

39:                                               ; preds = %35
  %40 = call i32 @zip_error_code_system(%struct.zip_error* %36) #7
  %41 = icmp eq i32 %40, 2
  br i1 %41, label %43, label %42

42:                                               ; preds = %35, %39
  call void @_zip_error_copy(%struct.zip_error* %2, %struct.zip_error* %36) #7
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %32) #7
  br label %93

43:                                               ; preds = %39
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %32) #7
  %44 = and i32 %27, 1
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %47

46:                                               ; preds = %43
  call void @zip_error_set(%struct.zip_error* %2, i32 9, i32 0) #7
  br label %93

47:                                               ; preds = %43
  %48 = call %struct.zip* @_zip_new(%struct.zip_error* %2) #7
  %49 = icmp eq %struct.zip* %48, null
  br i1 %49, label %93, label %50

50:                                               ; preds = %47
  %51 = getelementptr inbounds %struct.zip, %struct.zip* %48, i64 0, i32 0
  store %struct.zip_source* %0, %struct.zip_source** %51, align 8
  %52 = getelementptr inbounds %struct.zip, %struct.zip* %48, i64 0, i32 1
  store i32 %27, i32* %52, align 8
  %53 = and i32 %27, 16
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %93, label %55

55:                                               ; preds = %50
  %56 = getelementptr inbounds %struct.zip, %struct.zip* %48, i64 0, i32 3
  %57 = load i32, i32* %56, align 8
  %58 = or i32 %57, 2
  store i32 %58, i32* %56, align 8
  %59 = getelementptr inbounds %struct.zip, %struct.zip* %48, i64 0, i32 4
  %60 = load i32, i32* %59, align 4
  %61 = or i32 %60, 2
  store i32 %61, i32* %59, align 4
  br label %93

62:                                               ; preds = %31
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %32) #7
  %63 = and i32 %27, 2
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %66, label %65

65:                                               ; preds = %62
  call void @zip_error_set(%struct.zip_error* %2, i32 10, i32 0) #7
  br label %93

66:                                               ; preds = %62
  %67 = call i32 @zip_source_open(%struct.zip_source* nonnull %0) #7
  %68 = icmp slt i32 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %66
  call void @_zip_error_set_from_source(%struct.zip_error* %2, %struct.zip_source* nonnull %0) #7
  br label %93

70:                                               ; preds = %66
  %71 = and i32 %27, 8
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %88, label %73

73:                                               ; preds = %70
  %74 = call %struct.zip* @_zip_new(%struct.zip_error* %2) #7
  %75 = icmp eq %struct.zip* %74, null
  br i1 %75, label %91, label %76

76:                                               ; preds = %73
  %77 = getelementptr inbounds %struct.zip, %struct.zip* %74, i64 0, i32 0
  store %struct.zip_source* %0, %struct.zip_source** %77, align 8
  %78 = getelementptr inbounds %struct.zip, %struct.zip* %74, i64 0, i32 1
  store i32 %27, i32* %78, align 8
  %79 = and i32 %27, 16
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %93, label %81

81:                                               ; preds = %76
  %82 = getelementptr inbounds %struct.zip, %struct.zip* %74, i64 0, i32 3
  %83 = load i32, i32* %82, align 8
  %84 = or i32 %83, 2
  store i32 %84, i32* %82, align 8
  %85 = getelementptr inbounds %struct.zip, %struct.zip* %74, i64 0, i32 4
  %86 = load i32, i32* %85, align 4
  %87 = or i32 %86, 2
  store i32 %87, i32* %85, align 4
  br label %93

88:                                               ; preds = %70
  %89 = call %struct.zip* @_zip_open(%struct.zip_source* nonnull %0, i32 %27, %struct.zip_error* %2)
  %90 = icmp eq %struct.zip* %89, null
  br i1 %90, label %91, label %93

91:                                               ; preds = %73, %88
  %92 = call i32 @zip_source_close(%struct.zip_source* nonnull %0) #7
  br label %93

93:                                               ; preds = %81, %76, %55, %50, %47, %42, %65, %69, %91, %88, %46, %30, %21, %8
  %94 = phi %struct.zip* [ null, %8 ], [ null, %21 ], [ null, %30 ], [ null, %46 ], [ null, %65 ], [ null, %69 ], [ null, %91 ], [ %89, %88 ], [ null, %42 ], [ null, %47 ], [ %48, %50 ], [ %48, %55 ], [ %74, %76 ], [ %74, %81 ]
  ret %struct.zip* %94
}

declare void @zip_source_free(%struct.zip_source*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #2

declare i64 @zip_source_supports(%struct.zip_source*) local_unnamed_addr #2

declare i64 @zip_source_make_command_bitmap(i32, ...) local_unnamed_addr #2

declare i32 @zip_source_open(%struct.zip_source*) local_unnamed_addr #2

declare void @_zip_error_set_from_source(%struct.zip_error*, %struct.zip_source*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct.zip* @_zip_open(%struct.zip_source*, i32, %struct.zip_error*) local_unnamed_addr #0 {
  %4 = alloca [56 x i8], align 16
  %5 = alloca %struct.zip_error, align 8
  %6 = alloca %struct.zip_stat, align 8
  %7 = bitcast %struct.zip_stat* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %7) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 64, i1 false)
  call void @zip_stat_init(%struct.zip_stat* nonnull %6) #7
  %8 = call i32 @zip_source_stat(%struct.zip_source* %0, %struct.zip_stat* nonnull %6) #7
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %3
  call void @_zip_error_set_from_source(%struct.zip_error* %2, %struct.zip_source* %0) #7
  br label %514

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %6, i64 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = and i64 %13, 4
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %16, label %17

16:                                               ; preds = %11
  call void @zip_error_set(%struct.zip_error* %2, i32 4, i32 95) #7
  br label %514

17:                                               ; preds = %11
  %18 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %6, i64 0, i32 3
  %19 = load i64, i64* %18, align 8
  %20 = call %struct.zip* @_zip_new(%struct.zip_error* %2) #7
  %21 = icmp eq %struct.zip* %20, null
  br i1 %21, label %514, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.zip, %struct.zip* %20, i64 0, i32 0
  store %struct.zip_source* %0, %struct.zip_source** %23, align 8
  %24 = getelementptr inbounds %struct.zip, %struct.zip* %20, i64 0, i32 1
  store i32 %1, i32* %24, align 8
  %25 = and i32 %1, 16
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds %struct.zip, %struct.zip* %20, i64 0, i32 3
  %29 = load i32, i32* %28, align 8
  %30 = or i32 %29, 2
  store i32 %30, i32* %28, align 8
  %31 = getelementptr inbounds %struct.zip, %struct.zip* %20, i64 0, i32 4
  %32 = load i32, i32* %31, align 4
  %33 = or i32 %32, 2
  store i32 %33, i32* %31, align 4
  br label %34

34:                                               ; preds = %22, %27
  %35 = icmp eq i64 %19, 0
  br i1 %35, label %36, label %40

36:                                               ; preds = %34
  %37 = call zeroext i1 @zip_source_accept_empty(%struct.zip_source* %0) #7
  br i1 %37, label %514, label %38

38:                                               ; preds = %36
  %39 = bitcast %struct.zip_error* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %39) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %39, i8 -86, i64 16, i1 false) #7
  br label %43

40:                                               ; preds = %34
  %41 = bitcast %struct.zip_error* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %41) #7
  %42 = icmp ult i64 %19, 22
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %41, i8 -86, i64 16, i1 false) #7
  br i1 %42, label %43, label %46

43:                                               ; preds = %38, %40
  %44 = phi i8* [ %39, %38 ], [ %41, %40 ]
  %45 = getelementptr inbounds %struct.zip, %struct.zip* %20, i64 0, i32 2
  call void @zip_error_set(%struct.zip_error* %45, i32 19, i32 0) #7
  br label %456

46:                                               ; preds = %40
  %47 = icmp ult i64 %19, 65578
  %48 = select i1 %47, i64 %19, i64 65578
  %49 = load %struct.zip_source*, %struct.zip_source** %23, align 8
  %50 = sub nsw i64 0, %48
  %51 = call i32 @zip_source_seek(%struct.zip_source* %49, i64 %50, i32 2) #7
  %52 = icmp slt i32 %51, 0
  br i1 %52, label %53, label %63

53:                                               ; preds = %46
  %54 = load %struct.zip_source*, %struct.zip_source** %23, align 8
  %55 = call %struct.zip_error* @zip_source_error(%struct.zip_source* %54) #7
  %56 = call i32 @zip_error_code_zip(%struct.zip_error* %55) #7
  %57 = icmp eq i32 %56, 4
  br i1 %57, label %58, label %61

58:                                               ; preds = %53
  %59 = call i32 @zip_error_code_system(%struct.zip_error* %55) #7
  %60 = icmp eq i32 %59, 27
  br i1 %60, label %63, label %61

61:                                               ; preds = %58, %53
  %62 = getelementptr inbounds %struct.zip, %struct.zip* %20, i64 0, i32 2
  call void @_zip_error_copy(%struct.zip_error* %62, %struct.zip_error* %55) #7
  br label %456

63:                                               ; preds = %58, %46
  %64 = load %struct.zip_source*, %struct.zip_source** %23, align 8
  %65 = call i64 @zip_source_tell(%struct.zip_source* %64) #7
  %66 = icmp slt i64 %65, 0
  br i1 %66, label %67, label %70

67:                                               ; preds = %63
  %68 = getelementptr inbounds %struct.zip, %struct.zip* %20, i64 0, i32 2
  %69 = load %struct.zip_source*, %struct.zip_source** %23, align 8
  call void @_zip_error_set_from_source(%struct.zip_error* %68, %struct.zip_source* %69) #7
  br label %456

70:                                               ; preds = %63
  %71 = load %struct.zip_source*, %struct.zip_source** %23, align 8
  %72 = getelementptr inbounds %struct.zip, %struct.zip* %20, i64 0, i32 2
  %73 = call %struct.zip_buffer* @_zip_buffer_new_from_source(%struct.zip_source* %71, i64 %48, i8* null, %struct.zip_error* %72) #7
  %74 = icmp eq %struct.zip_buffer* %73, null
  br i1 %74, label %456, label %75

75:                                               ; preds = %70
  %76 = icmp ugt i64 %48, 65577
  br i1 %76, label %77, label %79

77:                                               ; preds = %75
  %78 = call i32 @_zip_buffer_set_offset(%struct.zip_buffer* nonnull %73, i64 20) #7
  br label %79

79:                                               ; preds = %77, %75
  call void @zip_error_set(%struct.zip_error* nonnull %5, i32 19, i32 0) #7
  %80 = call i8* @_zip_buffer_get(%struct.zip_buffer* nonnull %73, i64 0) #7
  %81 = call i64 @_zip_buffer_left(%struct.zip_buffer* nonnull %73) #7
  %82 = add i64 %81, -18
  %83 = icmp ult i64 %82, 4
  br i1 %83, label %84, label %85

84:                                               ; preds = %79
  call void @_zip_buffer_free(%struct.zip_buffer* nonnull %73) #7
  br label %454

85:                                               ; preds = %79
  %86 = getelementptr inbounds %struct.zip, %struct.zip* %20, i64 0, i32 3
  %87 = getelementptr inbounds [56 x i8], [56 x i8]* %4, i64 0, i64 0
  br label %88

88:                                               ; preds = %439, %85
  %89 = phi i64 [ %81, %85 ], [ %447, %439 ]
  %90 = phi i64 [ -1, %85 ], [ %441, %439 ]
  %91 = phi i8* [ %80, %85 ], [ %105, %439 ]
  %92 = phi %struct.zip_cdir* [ null, %85 ], [ %440, %439 ]
  %93 = getelementptr inbounds i8, i8* %91, i64 -1
  %94 = ptrtoint i8* %91 to i64
  %95 = add i64 %89, -21
  %96 = add i64 %95, %94
  br label %97

97:                                               ; preds = %104, %88
  %98 = phi i8* [ %93, %88 ], [ %102, %104 ]
  %99 = getelementptr inbounds i8, i8* %98, i64 1
  %100 = ptrtoint i8* %99 to i64
  %101 = sub i64 %96, %100
  %102 = call i8* @memchr(i8* %99, i32 80, i64 %101) #9
  %103 = icmp eq i8* %102, null
  br i1 %103, label %450, label %104

104:                                              ; preds = %97
  %105 = getelementptr inbounds i8, i8* %102, i64 1
  %106 = call i32 @bcmp(i8* %105, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 1), i64 3) #7
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %108, label %97

108:                                              ; preds = %104
  %109 = call i8* @_zip_buffer_data(%struct.zip_buffer* nonnull %73) #7
  %110 = ptrtoint i8* %102 to i64
  %111 = ptrtoint i8* %109 to i64
  %112 = sub i64 %110, %111
  %113 = call i32 @_zip_buffer_set_offset(%struct.zip_buffer* nonnull %73, i64 %112) #7
  %114 = call i64 @_zip_buffer_offset(%struct.zip_buffer* %73) #7
  %115 = call i64 @_zip_buffer_left(%struct.zip_buffer* %73) #7
  %116 = icmp ult i64 %115, 22
  br i1 %116, label %117, label %118

117:                                              ; preds = %108
  call void @zip_error_set(%struct.zip_error* nonnull %5, i32 19, i32 0) #7
  br label %439

118:                                              ; preds = %108
  %119 = call i8* @_zip_buffer_get(%struct.zip_buffer* %73, i64 4) #7
  %120 = call i32 @bcmp(i8* %119, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 4) #7
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %123, label %122

122:                                              ; preds = %118
  call void @zip_error_set(%struct.zip_error* nonnull %5, i32 19, i32 0) #7
  br label %439

123:                                              ; preds = %118
  %124 = icmp ugt i64 %114, 19
  br i1 %124, label %125, label %239

125:                                              ; preds = %123
  %126 = call i8* @_zip_buffer_data(%struct.zip_buffer* %73) #7
  %127 = getelementptr inbounds i8, i8* %126, i64 -20
  %128 = getelementptr inbounds i8, i8* %127, i64 %114
  %129 = call i32 @bcmp(i8* %128, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 4) #7
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %131, label %239

131:                                              ; preds = %125
  %132 = add i64 %114, -20
  %133 = call i32 @_zip_buffer_set_offset(%struct.zip_buffer* %73, i64 %132) #7
  %134 = load %struct.zip_source*, %struct.zip_source** %23, align 8
  %135 = load i32, i32* %86, align 8
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %87) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %87, i8 -86, i64 56, i1 false) #7
  %136 = call i64 @_zip_buffer_offset(%struct.zip_buffer* %73) #7
  %137 = call i8* @_zip_buffer_get(%struct.zip_buffer* %73, i64 4) #7
  %138 = call zeroext i16 @_zip_buffer_get_16(%struct.zip_buffer* %73) #7
  %139 = zext i16 %138 to i32
  %140 = call zeroext i16 @_zip_buffer_get_16(%struct.zip_buffer* %73) #7
  %141 = zext i16 %140 to i32
  %142 = call i64 @_zip_buffer_get_64(%struct.zip_buffer* %73) #7
  %143 = icmp slt i64 %142, 0
  br i1 %143, label %144, label %145

144:                                              ; preds = %131
  call void @zip_error_set(%struct.zip_error* nonnull %5, i32 4, i32 27) #7
  br label %279

145:                                              ; preds = %131
  %146 = add nuw i64 %142, 56
  %147 = add i64 %136, %65
  %148 = icmp ugt i64 %146, %147
  br i1 %148, label %149, label %150

149:                                              ; preds = %145
  call void @zip_error_set(%struct.zip_error* nonnull %5, i32 21, i32 0) #7
  br label %279

150:                                              ; preds = %145
  %151 = icmp ult i64 %142, %65
  br i1 %151, label %159, label %152

152:                                              ; preds = %150
  %153 = call i64 @_zip_buffer_size(%struct.zip_buffer* %73) #7
  %154 = add i64 %153, %65
  %155 = icmp ugt i64 %146, %154
  br i1 %155, label %159, label %156

156:                                              ; preds = %152
  %157 = sub i64 %142, %65
  %158 = call i32 @_zip_buffer_set_offset(%struct.zip_buffer* %73, i64 %157) #7
  br label %166

159:                                              ; preds = %152, %150
  %160 = call i32 @zip_source_seek(%struct.zip_source* %134, i64 %142, i32 0) #7
  %161 = icmp slt i32 %160, 0
  br i1 %161, label %162, label %163

162:                                              ; preds = %159
  call void @_zip_error_set_from_source(%struct.zip_error* nonnull %5, %struct.zip_source* %134) #7
  br label %279

163:                                              ; preds = %159
  %164 = call %struct.zip_buffer* @_zip_buffer_new_from_source(%struct.zip_source* %134, i64 56, i8* nonnull %87, %struct.zip_error* nonnull %5) #7
  %165 = icmp eq %struct.zip_buffer* %164, null
  br i1 %165, label %279, label %166

166:                                              ; preds = %163, %156
  %167 = phi %struct.zip_buffer* [ %73, %156 ], [ %164, %163 ]
  %168 = phi i1 [ false, %156 ], [ true, %163 ]
  %169 = call i8* @_zip_buffer_get(%struct.zip_buffer* %167, i64 4) #7
  %170 = call i32 @bcmp(i8* %169, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i64 4) #7
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %174, label %172

172:                                              ; preds = %166
  call void @zip_error_set(%struct.zip_error* nonnull %5, i32 21, i32 0) #7
  br i1 %168, label %173, label %279

173:                                              ; preds = %172
  call void @_zip_buffer_free(%struct.zip_buffer* %167) #7
  br label %279

174:                                              ; preds = %166
  %175 = call i64 @_zip_buffer_get_64(%struct.zip_buffer* %167) #7
  %176 = and i32 %135, 4
  %177 = icmp ne i32 %176, 0
  br i1 %177, label %178, label %184

178:                                              ; preds = %174
  %179 = add nuw i64 %142, 12
  %180 = add i64 %179, %175
  %181 = icmp eq i64 %180, %147
  br i1 %181, label %184, label %182

182:                                              ; preds = %178
  call void @zip_error_set(%struct.zip_error* nonnull %5, i32 21, i32 0) #7
  br i1 %168, label %183, label %279

183:                                              ; preds = %182
  call void @_zip_buffer_free(%struct.zip_buffer* %167) #7
  br label %279

184:                                              ; preds = %178, %174
  %185 = call i8* @_zip_buffer_get(%struct.zip_buffer* %167, i64 4) #7
  %186 = call i32 @_zip_buffer_get_32(%struct.zip_buffer* %167) #7
  %187 = call i32 @_zip_buffer_get_32(%struct.zip_buffer* %167) #7
  %188 = icmp eq i16 %138, -1
  %189 = select i1 %188, i32 %186, i32 %139
  %190 = icmp eq i16 %140, -1
  %191 = select i1 %190, i32 %187, i32 %141
  br i1 %177, label %192, label %198

192:                                              ; preds = %184
  %193 = icmp eq i32 %191, %187
  %194 = icmp eq i32 %189, %186
  %195 = and i1 %194, %193
  br i1 %195, label %198, label %196

196:                                              ; preds = %192
  call void @zip_error_set(%struct.zip_error* nonnull %5, i32 21, i32 0) #7
  br i1 %168, label %197, label %279

197:                                              ; preds = %196
  call void @_zip_buffer_free(%struct.zip_buffer* %167) #7
  br label %279

198:                                              ; preds = %192, %184
  %199 = or i32 %191, %189
  %200 = icmp eq i32 %199, 0
  br i1 %200, label %203, label %201

201:                                              ; preds = %198
  call void @zip_error_set(%struct.zip_error* nonnull %5, i32 1, i32 0) #7
  br i1 %168, label %202, label %279

202:                                              ; preds = %201
  call void @_zip_buffer_free(%struct.zip_buffer* %167) #7
  br label %279

203:                                              ; preds = %198
  %204 = call i64 @_zip_buffer_get_64(%struct.zip_buffer* %167) #7
  %205 = call i64 @_zip_buffer_get_64(%struct.zip_buffer* %167) #7
  %206 = icmp eq i64 %204, %205
  br i1 %206, label %209, label %207

207:                                              ; preds = %203
  call void @zip_error_set(%struct.zip_error* nonnull %5, i32 1, i32 0) #7
  br i1 %168, label %208, label %279

208:                                              ; preds = %207
  call void @_zip_buffer_free(%struct.zip_buffer* %167) #7
  br label %279

209:                                              ; preds = %203
  %210 = call i64 @_zip_buffer_get_64(%struct.zip_buffer* %167) #7
  %211 = call i64 @_zip_buffer_get_64(%struct.zip_buffer* %167) #7
  %212 = call zeroext i1 @_zip_buffer_ok(%struct.zip_buffer* %167) #7
  br i1 %212, label %215, label %213

213:                                              ; preds = %209
  call void @zip_error_set(%struct.zip_error* nonnull %5, i32 20, i32 0) #7
  br i1 %168, label %214, label %279

214:                                              ; preds = %213
  call void @_zip_buffer_free(%struct.zip_buffer* %167) #7
  br label %279

215:                                              ; preds = %209
  br i1 %168, label %216, label %217

216:                                              ; preds = %215
  call void @_zip_buffer_free(%struct.zip_buffer* %167) #7
  br label %217

217:                                              ; preds = %216, %215
  %218 = icmp slt i64 %211, 0
  br i1 %218, label %222, label %219

219:                                              ; preds = %217
  %220 = add i64 %211, %210
  %221 = icmp ult i64 %220, %211
  br i1 %221, label %222, label %223

222:                                              ; preds = %219, %217
  call void @zip_error_set(%struct.zip_error* nonnull %5, i32 4, i32 27) #7
  br label %279

223:                                              ; preds = %219
  %224 = add i64 %142, %65
  %225 = icmp ugt i64 %220, %224
  br i1 %225, label %226, label %227

226:                                              ; preds = %223
  call void @zip_error_set(%struct.zip_error* nonnull %5, i32 21, i32 0) #7
  br label %279

227:                                              ; preds = %223
  %228 = xor i1 %177, true
  %229 = icmp eq i64 %220, %224
  %230 = or i1 %229, %228
  br i1 %230, label %232, label %231

231:                                              ; preds = %227
  call void @zip_error_set(%struct.zip_error* nonnull %5, i32 21, i32 0) #7
  br label %279

232:                                              ; preds = %227
  %233 = udiv i64 %210, 46
  %234 = icmp ugt i64 %204, %233
  br i1 %234, label %235, label %236

235:                                              ; preds = %232
  call void @zip_error_set(%struct.zip_error* nonnull %5, i32 21, i32 0) #7
  br label %279

236:                                              ; preds = %232
  %237 = call %struct.zip_cdir* @_zip_cdir_new(i64 %204, %struct.zip_error* nonnull %5) #7
  %238 = icmp eq %struct.zip_cdir* %237, null
  br i1 %238, label %279, label %280

239:                                              ; preds = %125, %123
  %240 = call i32 @_zip_buffer_set_offset(%struct.zip_buffer* %73, i64 %114) #7
  %241 = load i32, i32* %86, align 8
  %242 = call i64 @_zip_buffer_left(%struct.zip_buffer* %73) #7
  %243 = icmp ult i64 %242, 22
  br i1 %243, label %244, label %245

244:                                              ; preds = %239
  call void @zip_error_set(%struct.zip_error* nonnull %5, i32 21, i32 0) #7
  br label %439

245:                                              ; preds = %239
  %246 = call i64 @_zip_buffer_offset(%struct.zip_buffer* %73) #7
  %247 = call i8* @_zip_buffer_get(%struct.zip_buffer* %73, i64 4) #7
  %248 = call i32 @_zip_buffer_get_32(%struct.zip_buffer* %73) #7
  %249 = icmp eq i32 %248, 0
  br i1 %249, label %251, label %250

250:                                              ; preds = %245
  call void @zip_error_set(%struct.zip_error* nonnull %5, i32 1, i32 0) #7
  br label %439

251:                                              ; preds = %245
  %252 = call zeroext i16 @_zip_buffer_get_16(%struct.zip_buffer* %73) #7
  %253 = call zeroext i16 @_zip_buffer_get_16(%struct.zip_buffer* %73) #7
  %254 = zext i16 %253 to i64
  %255 = icmp eq i16 %253, %252
  br i1 %255, label %257, label %256

256:                                              ; preds = %251
  call void @zip_error_set(%struct.zip_error* nonnull %5, i32 19, i32 0) #7
  br label %439

257:                                              ; preds = %251
  %258 = call i32 @_zip_buffer_get_32(%struct.zip_buffer* %73) #7
  %259 = zext i32 %258 to i64
  %260 = call i32 @_zip_buffer_get_32(%struct.zip_buffer* %73) #7
  %261 = zext i32 %260 to i64
  %262 = add nuw nsw i64 %261, %259
  %263 = add i64 %246, %65
  %264 = icmp ugt i64 %262, %263
  br i1 %264, label %265, label %266

265:                                              ; preds = %257
  call void @zip_error_set(%struct.zip_error* nonnull %5, i32 21, i32 0) #7
  br label %439

266:                                              ; preds = %257
  %267 = and i32 %241, 4
  %268 = icmp eq i32 %267, 0
  %269 = icmp eq i64 %262, %263
  %270 = or i1 %268, %269
  br i1 %270, label %272, label %271

271:                                              ; preds = %266
  call void @zip_error_set(%struct.zip_error* nonnull %5, i32 21, i32 0) #7
  br label %439

272:                                              ; preds = %266
  %273 = call %struct.zip_cdir* @_zip_cdir_new(i64 %254, %struct.zip_error* nonnull %5) #7
  %274 = icmp eq %struct.zip_cdir* %273, null
  br i1 %274, label %439, label %275

275:                                              ; preds = %272
  %276 = getelementptr inbounds %struct.zip_cdir, %struct.zip_cdir* %273, i64 0, i32 6
  store i8 0, i8* %276, align 8
  %277 = getelementptr inbounds %struct.zip_cdir, %struct.zip_cdir* %273, i64 0, i32 3
  store i64 %259, i64* %277, align 8
  %278 = getelementptr inbounds %struct.zip_cdir, %struct.zip_cdir* %273, i64 0, i32 4
  store i64 %261, i64* %278, align 8
  br label %284

279:                                              ; preds = %236, %235, %231, %226, %222, %214, %213, %208, %207, %202, %201, %197, %196, %183, %182, %173, %172, %163, %162, %149, %144
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %87) #7
  br label %439

280:                                              ; preds = %236
  %281 = getelementptr inbounds %struct.zip_cdir, %struct.zip_cdir* %237, i64 0, i32 6
  store i8 1, i8* %281, align 8
  %282 = getelementptr inbounds %struct.zip_cdir, %struct.zip_cdir* %237, i64 0, i32 3
  store i64 %210, i64* %282, align 8
  %283 = getelementptr inbounds %struct.zip_cdir, %struct.zip_cdir* %237, i64 0, i32 4
  store i64 %211, i64* %283, align 8
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %87) #7
  br label %284

284:                                              ; preds = %280, %275
  %285 = phi %struct.zip_cdir* [ %273, %275 ], [ %237, %280 ]
  %286 = add i64 %114, 20
  %287 = call i32 @_zip_buffer_set_offset(%struct.zip_buffer* %73, i64 %286) #7
  %288 = call zeroext i16 @_zip_buffer_get_16(%struct.zip_buffer* %73) #7
  %289 = getelementptr inbounds %struct.zip_cdir, %struct.zip_cdir* %285, i64 0, i32 4
  %290 = load i64, i64* %289, align 8
  %291 = getelementptr inbounds %struct.zip_cdir, %struct.zip_cdir* %285, i64 0, i32 3
  %292 = load i64, i64* %291, align 8
  %293 = add i64 %292, %290
  %294 = add i64 %114, %65
  %295 = icmp ugt i64 %293, %294
  br i1 %295, label %296, label %297

296:                                              ; preds = %284
  call void @zip_error_set(%struct.zip_error* nonnull %5, i32 21, i32 0) #7
  call void @_zip_cdir_free(%struct.zip_cdir* nonnull %285) #7
  br label %439

297:                                              ; preds = %284
  %298 = icmp eq i16 %288, 0
  br i1 %298, label %299, label %303

299:                                              ; preds = %297
  %300 = load i32, i32* %24, align 8
  %301 = and i32 %300, 4
  %302 = icmp eq i32 %301, 0
  br i1 %302, label %323, label %303

303:                                              ; preds = %299, %297
  %304 = add i64 %114, 22
  %305 = call i32 @_zip_buffer_set_offset(%struct.zip_buffer* %73, i64 %304) #7
  %306 = call i64 @_zip_buffer_left(%struct.zip_buffer* %73) #7
  %307 = zext i16 %288 to i64
  %308 = icmp ult i64 %306, %307
  br i1 %308, label %315, label %309

309:                                              ; preds = %303
  %310 = load i32, i32* %24, align 8
  %311 = and i32 %310, 4
  %312 = icmp eq i32 %311, 0
  %313 = icmp eq i64 %306, %307
  %314 = or i1 %313, %312
  br i1 %314, label %316, label %315

315:                                              ; preds = %309, %303
  call void @zip_error_set(%struct.zip_error* nonnull %5, i32 21, i32 0) #7
  call void @_zip_cdir_free(%struct.zip_cdir* nonnull %285) #7
  br label %439

316:                                              ; preds = %309
  br i1 %298, label %323, label %317

317:                                              ; preds = %316
  %318 = call i8* @_zip_buffer_get(%struct.zip_buffer* %73, i64 %307) #7
  %319 = call %struct.zip_string* @_zip_string_new(i8* %318, i16 zeroext %288, i32 0, %struct.zip_error* nonnull %5) #7
  %320 = getelementptr inbounds %struct.zip_cdir, %struct.zip_cdir* %285, i64 0, i32 5
  store %struct.zip_string* %319, %struct.zip_string** %320, align 8
  %321 = icmp eq %struct.zip_string* %319, null
  br i1 %321, label %322, label %323

322:                                              ; preds = %317
  call void @_zip_cdir_free(%struct.zip_cdir* nonnull %285) #7
  br label %439

323:                                              ; preds = %317, %316, %299
  %324 = load i64, i64* %289, align 8
  %325 = icmp ult i64 %324, %65
  br i1 %325, label %338, label %326

326:                                              ; preds = %323
  %327 = sub i64 %324, %65
  %328 = call i32 @_zip_buffer_set_offset(%struct.zip_buffer* %73, i64 %327) #7
  %329 = load i64, i64* %291, align 8
  %330 = call i8* @_zip_buffer_get(%struct.zip_buffer* %73, i64 %329) #7
  %331 = icmp eq i8* %330, null
  br i1 %331, label %332, label %333

332:                                              ; preds = %326
  call void @zip_error_set(%struct.zip_error* nonnull %5, i32 21, i32 0) #7
  call void @_zip_cdir_free(%struct.zip_cdir* nonnull %285) #7
  br label %439

333:                                              ; preds = %326
  %334 = load i64, i64* %291, align 8
  %335 = call %struct.zip_buffer* @_zip_buffer_new(i8* nonnull %330, i64 %334) #7
  %336 = icmp eq %struct.zip_buffer* %335, null
  br i1 %336, label %337, label %349

337:                                              ; preds = %333
  call void @zip_error_set(%struct.zip_error* nonnull %5, i32 14, i32 0) #7
  call void @_zip_cdir_free(%struct.zip_cdir* nonnull %285) #7
  br label %439

338:                                              ; preds = %323
  %339 = load %struct.zip_source*, %struct.zip_source** %23, align 8
  %340 = call i32 @zip_source_seek(%struct.zip_source* %339, i64 %324, i32 0) #7
  %341 = icmp slt i32 %340, 0
  %342 = load %struct.zip_source*, %struct.zip_source** %23, align 8
  br i1 %341, label %343, label %344

343:                                              ; preds = %338
  call void @_zip_error_set_from_source(%struct.zip_error* nonnull %5, %struct.zip_source* %342) #7
  call void @_zip_cdir_free(%struct.zip_cdir* nonnull %285) #7
  br label %439

344:                                              ; preds = %338
  %345 = call i64 @zip_source_tell(%struct.zip_source* %342) #7
  %346 = load i64, i64* %289, align 8
  %347 = icmp eq i64 %345, %346
  br i1 %347, label %349, label %348

348:                                              ; preds = %344
  call void @zip_error_set(%struct.zip_error* nonnull %5, i32 19, i32 0) #7
  call void @_zip_cdir_free(%struct.zip_cdir* nonnull %285) #7
  br label %439

349:                                              ; preds = %344, %333
  %350 = phi %struct.zip_buffer* [ null, %344 ], [ %335, %333 ]
  %351 = load i64, i64* %291, align 8
  %352 = icmp eq i64 %351, 0
  %353 = getelementptr inbounds %struct.zip_cdir, %struct.zip_cdir* %285, i64 0, i32 1
  %354 = load i64, i64* %353, align 8
  %355 = icmp eq i64 %354, 0
  br i1 %352, label %396, label %356

356:                                              ; preds = %349
  %357 = getelementptr inbounds %struct.zip_cdir, %struct.zip_cdir* %285, i64 0, i32 6
  %358 = getelementptr inbounds %struct.zip_cdir, %struct.zip_cdir* %285, i64 0, i32 0
  br label %359

359:                                              ; preds = %390, %356
  %360 = phi i1 [ %355, %356 ], [ %395, %390 ]
  %361 = phi i64 [ %351, %356 ], [ %392, %390 ]
  %362 = phi i64 [ 0, %356 ], [ %391, %390 ]
  br i1 %360, label %363, label %371

363:                                              ; preds = %359
  %364 = load i8, i8* %357, align 8, !range !2
  %365 = icmp ne i8 %364, 0
  %366 = icmp ult i64 %361, 46
  %367 = or i1 %366, %365
  br i1 %367, label %398, label %368

368:                                              ; preds = %363
  %369 = call zeroext i1 @_zip_cdir_grow(%struct.zip_cdir* %285, i64 65536, %struct.zip_error* nonnull %5) #7
  br i1 %369, label %371, label %370

370:                                              ; preds = %368
  call void @_zip_cdir_free(%struct.zip_cdir* %285) #7
  call void @_zip_buffer_free(%struct.zip_buffer* %350) #7
  br label %439

371:                                              ; preds = %368, %359
  %372 = phi i1 [ false, %359 ], [ true, %368 ]
  %373 = call %struct.zip_dirent* @_zip_dirent_new() #7
  %374 = load %struct.zip_entry*, %struct.zip_entry** %358, align 8
  %375 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %374, i64 %362, i32 0
  store %struct.zip_dirent* %373, %struct.zip_dirent** %375, align 8
  %376 = icmp eq %struct.zip_dirent* %373, null
  br i1 %376, label %384, label %377

377:                                              ; preds = %371
  %378 = load %struct.zip_entry*, %struct.zip_entry** %358, align 8
  %379 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %378, i64 %362, i32 0
  %380 = load %struct.zip_dirent*, %struct.zip_dirent** %379, align 8
  %381 = load %struct.zip_source*, %struct.zip_source** %23, align 8
  %382 = call i64 @_zip_dirent_read(%struct.zip_dirent* %380, %struct.zip_source* %381, %struct.zip_buffer* %350, i1 zeroext false, %struct.zip_error* nonnull %5) #7
  %383 = icmp slt i64 %382, 0
  br i1 %383, label %384, label %390

384:                                              ; preds = %377, %371
  br i1 %372, label %385, label %389

385:                                              ; preds = %384
  %386 = call i32 @zip_error_code_zip(%struct.zip_error* nonnull %5) #7
  %387 = icmp eq i32 %386, 19
  br i1 %387, label %388, label %389

388:                                              ; preds = %385
  call void @zip_error_set(%struct.zip_error* nonnull %5, i32 21, i32 0) #7
  br label %389

389:                                              ; preds = %388, %385, %384
  call void @_zip_cdir_free(%struct.zip_cdir* %285) #7
  call void @_zip_buffer_free(%struct.zip_buffer* %350) #7
  br label %439

390:                                              ; preds = %377
  %391 = add i64 %362, 1
  %392 = sub i64 %361, %382
  %393 = icmp eq i64 %392, 0
  %394 = load i64, i64* %353, align 8
  %395 = icmp eq i64 %391, %394
  br i1 %393, label %396, label %359

396:                                              ; preds = %390, %349
  %397 = phi i1 [ %355, %349 ], [ %395, %390 ]
  br i1 %397, label %399, label %398

398:                                              ; preds = %363, %396
  call void @zip_error_set(%struct.zip_error* nonnull %5, i32 21, i32 0) #7
  call void @_zip_buffer_free(%struct.zip_buffer* %350) #7
  call void @_zip_cdir_free(%struct.zip_cdir* %285) #7
  br label %439

399:                                              ; preds = %396
  %400 = load i32, i32* %24, align 8
  %401 = and i32 %400, 4
  %402 = icmp eq i32 %401, 0
  br i1 %402, label %419, label %403

403:                                              ; preds = %399
  %404 = icmp eq %struct.zip_buffer* %350, null
  br i1 %404, label %407, label %405

405:                                              ; preds = %403
  %406 = call zeroext i1 @_zip_buffer_eof(%struct.zip_buffer* nonnull %350) #7
  br i1 %406, label %419, label %418

407:                                              ; preds = %403
  %408 = load %struct.zip_source*, %struct.zip_source** %23, align 8
  %409 = call i64 @zip_source_tell(%struct.zip_source* %408) #7
  %410 = icmp slt i64 %409, 0
  br i1 %410, label %411, label %413

411:                                              ; preds = %407
  %412 = load %struct.zip_source*, %struct.zip_source** %23, align 8
  call void @_zip_error_set_from_source(%struct.zip_error* nonnull %5, %struct.zip_source* %412) #7
  call void @_zip_cdir_free(%struct.zip_cdir* %285) #7
  br label %439

413:                                              ; preds = %407
  %414 = load i64, i64* %289, align 8
  %415 = load i64, i64* %291, align 8
  %416 = add i64 %415, %414
  %417 = icmp eq i64 %409, %416
  br i1 %417, label %419, label %418

418:                                              ; preds = %413, %405
  call void @zip_error_set(%struct.zip_error* nonnull %5, i32 21, i32 0) #7
  call void @_zip_buffer_free(%struct.zip_buffer* %350) #7
  call void @_zip_cdir_free(%struct.zip_cdir* %285) #7
  br label %439

419:                                              ; preds = %413, %405, %399
  call void @_zip_buffer_free(%struct.zip_buffer* %350) #7
  %420 = icmp eq %struct.zip_cdir* %285, null
  br i1 %420, label %439, label %421

421:                                              ; preds = %419
  %422 = icmp eq %struct.zip_cdir* %92, null
  br i1 %422, label %433, label %423

423:                                              ; preds = %421
  %424 = icmp slt i64 %90, 1
  br i1 %424, label %425, label %427

425:                                              ; preds = %423
  %426 = call fastcc i64 @_zip_checkcons(%struct.zip* %20, %struct.zip_cdir* nonnull %92, %struct.zip_error* nonnull %5) #7
  br label %427

427:                                              ; preds = %425, %423
  %428 = phi i64 [ %426, %425 ], [ %90, %423 ]
  %429 = call fastcc i64 @_zip_checkcons(%struct.zip* %20, %struct.zip_cdir* nonnull %285, %struct.zip_error* nonnull %5) #7
  %430 = icmp slt i64 %428, %429
  br i1 %430, label %431, label %432

431:                                              ; preds = %427
  call void @_zip_cdir_free(%struct.zip_cdir* nonnull %92) #7
  br label %439

432:                                              ; preds = %427
  call void @_zip_cdir_free(%struct.zip_cdir* nonnull %285) #7
  br label %439

433:                                              ; preds = %421
  %434 = load i32, i32* %24, align 8
  %435 = and i32 %434, 4
  %436 = icmp eq i32 %435, 0
  br i1 %436, label %439, label %437

437:                                              ; preds = %433
  %438 = call fastcc i64 @_zip_checkcons(%struct.zip* %20, %struct.zip_cdir* nonnull %285, %struct.zip_error* nonnull %5) #7
  br label %439

439:                                              ; preds = %437, %433, %432, %431, %419, %418, %411, %398, %389, %370, %348, %343, %337, %332, %322, %315, %296, %279, %272, %271, %265, %256, %250, %244, %122, %117
  %440 = phi %struct.zip_cdir* [ %92, %419 ], [ %285, %431 ], [ %92, %432 ], [ %285, %437 ], [ %285, %433 ], [ %92, %117 ], [ %92, %122 ], [ %92, %296 ], [ %92, %398 ], [ %92, %343 ], [ %92, %348 ], [ %92, %315 ], [ %92, %322 ], [ %92, %279 ], [ %92, %411 ], [ %92, %418 ], [ %92, %244 ], [ %92, %250 ], [ %92, %256 ], [ %92, %265 ], [ %92, %271 ], [ %92, %272 ], [ %92, %332 ], [ %92, %337 ], [ %92, %389 ], [ %92, %370 ]
  %441 = phi i64 [ %90, %419 ], [ %429, %431 ], [ %428, %432 ], [ %438, %437 ], [ 0, %433 ], [ %90, %117 ], [ %90, %122 ], [ %90, %296 ], [ %90, %398 ], [ %90, %343 ], [ %90, %348 ], [ %90, %315 ], [ %90, %322 ], [ %90, %279 ], [ %90, %411 ], [ %90, %418 ], [ %90, %244 ], [ %90, %250 ], [ %90, %256 ], [ %90, %265 ], [ %90, %271 ], [ %90, %272 ], [ %90, %332 ], [ %90, %337 ], [ %90, %389 ], [ %90, %370 ]
  %442 = call i8* @_zip_buffer_data(%struct.zip_buffer* nonnull %73) #7
  %443 = ptrtoint i8* %105 to i64
  %444 = ptrtoint i8* %442 to i64
  %445 = sub i64 %443, %444
  %446 = call i32 @_zip_buffer_set_offset(%struct.zip_buffer* nonnull %73, i64 %445) #7
  %447 = call i64 @_zip_buffer_left(%struct.zip_buffer* nonnull %73) #7
  %448 = add i64 %447, -18
  %449 = icmp ult i64 %448, 4
  br i1 %449, label %450, label %88

450:                                              ; preds = %439, %97
  %451 = phi %struct.zip_cdir* [ %92, %97 ], [ %440, %439 ]
  %452 = phi i64 [ %90, %97 ], [ %441, %439 ]
  call void @_zip_buffer_free(%struct.zip_buffer* nonnull %73) #7
  %453 = icmp slt i64 %452, 0
  br i1 %453, label %454, label %458

454:                                              ; preds = %450, %84
  %455 = phi %struct.zip_cdir* [ null, %84 ], [ %451, %450 ]
  call void @_zip_error_copy(%struct.zip_error* %72, %struct.zip_error* nonnull %5) #7
  call void @_zip_cdir_free(%struct.zip_cdir* %455) #7
  br label %456

456:                                              ; preds = %43, %67, %454, %61, %70
  %457 = phi i8* [ %41, %70 ], [ %41, %61 ], [ %41, %454 ], [ %41, %67 ], [ %44, %43 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %457) #7
  br label %460

458:                                              ; preds = %450
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %41) #7
  %459 = icmp eq %struct.zip_cdir* %451, null
  br i1 %459, label %460, label %462

460:                                              ; preds = %456, %458
  %461 = getelementptr inbounds %struct.zip, %struct.zip* %20, i64 0, i32 2
  call void @_zip_error_copy(%struct.zip_error* %2, %struct.zip_error* %461) #7
  call void @zip_source_keep(%struct.zip_source* %0) #7
  call void @zip_discard(%struct.zip* nonnull %20) #7
  br label %514

462:                                              ; preds = %458
  %463 = bitcast %struct.zip_cdir* %451 to i64*
  %464 = load i64, i64* %463, align 8
  %465 = getelementptr inbounds %struct.zip, %struct.zip* %20, i64 0, i32 11
  %466 = bitcast %struct.zip_entry** %465 to i64*
  store i64 %464, i64* %466, align 8
  %467 = getelementptr inbounds %struct.zip_cdir, %struct.zip_cdir* %451, i64 0, i32 1
  %468 = load i64, i64* %467, align 8
  %469 = getelementptr inbounds %struct.zip, %struct.zip* %20, i64 0, i32 9
  store i64 %468, i64* %469, align 8
  %470 = getelementptr inbounds %struct.zip_cdir, %struct.zip_cdir* %451, i64 0, i32 2
  %471 = load i64, i64* %470, align 8
  %472 = getelementptr inbounds %struct.zip, %struct.zip* %20, i64 0, i32 10
  store i64 %471, i64* %472, align 8
  %473 = getelementptr inbounds %struct.zip_cdir, %struct.zip_cdir* %451, i64 0, i32 5
  %474 = bitcast %struct.zip_string** %473 to i64*
  %475 = load i64, i64* %474, align 8
  %476 = getelementptr inbounds %struct.zip, %struct.zip* %20, i64 0, i32 6
  %477 = bitcast %struct.zip_string** %476 to i64*
  store i64 %475, i64* %477, align 8
  %478 = bitcast %struct.zip_cdir* %451 to i8*
  call void @free(i8* %478) #7
  %479 = getelementptr inbounds %struct.zip, %struct.zip* %20, i64 0, i32 15
  %480 = load %struct.zip_hash*, %struct.zip_hash** %479, align 8
  %481 = load i64, i64* %469, align 8
  %482 = call zeroext i1 @_zip_hash_reserve_capacity(%struct.zip_hash* %480, i64 %481, %struct.zip_error* %72) #7
  %483 = load i64, i64* %469, align 8
  %484 = icmp eq i64 %483, 0
  br i1 %484, label %511, label %485

485:                                              ; preds = %462
  %486 = getelementptr inbounds %struct.zip_error, %struct.zip_error* %72, i64 0, i32 0
  %487 = and i32 %1, 4
  %488 = icmp eq i32 %487, 0
  br label %489

489:                                              ; preds = %485, %507
  %490 = phi i64 [ 0, %485 ], [ %508, %507 ]
  %491 = load %struct.zip_entry*, %struct.zip_entry** %465, align 8
  %492 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %491, i64 %490, i32 0
  %493 = load %struct.zip_dirent*, %struct.zip_dirent** %492, align 8
  %494 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %493, i64 0, i32 12
  %495 = load %struct.zip_string*, %struct.zip_string** %494, align 8
  %496 = call i8* @_zip_string_get(%struct.zip_string* %495, i32* null, i32 0, %struct.zip_error* %2) #7
  %497 = icmp eq i8* %496, null
  br i1 %497, label %498, label %499

498:                                              ; preds = %489
  call void @zip_source_keep(%struct.zip_source* %0) #7
  call void @zip_discard(%struct.zip* nonnull %20) #7
  br label %514

499:                                              ; preds = %489
  %500 = load %struct.zip_hash*, %struct.zip_hash** %479, align 8
  %501 = call zeroext i1 @_zip_hash_add(%struct.zip_hash* %500, i8* nonnull %496, i64 %490, i32 8, %struct.zip_error* %72) #7
  br i1 %501, label %507, label %502

502:                                              ; preds = %499
  %503 = load i32, i32* %486, align 8
  %504 = icmp eq i32 %503, 10
  %505 = and i1 %488, %504
  br i1 %505, label %507, label %506

506:                                              ; preds = %502
  call void @_zip_error_copy(%struct.zip_error* %2, %struct.zip_error* %72) #7
  call void @zip_source_keep(%struct.zip_source* %0) #7
  call void @zip_discard(%struct.zip* nonnull %20) #7
  br label %514

507:                                              ; preds = %502, %499
  %508 = add nuw i64 %490, 1
  %509 = load i64, i64* %469, align 8
  %510 = icmp ult i64 %508, %509
  br i1 %510, label %489, label %511

511:                                              ; preds = %507, %462
  %512 = load i32, i32* %86, align 8
  %513 = getelementptr inbounds %struct.zip, %struct.zip* %20, i64 0, i32 4
  store i32 %512, i32* %513, align 4
  br label %514

514:                                              ; preds = %17, %506, %498, %36, %511, %460, %16, %10
  %515 = phi %struct.zip* [ null, %10 ], [ null, %16 ], [ null, %460 ], [ %20, %511 ], [ %20, %36 ], [ null, %498 ], [ null, %506 ], [ null, %17 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %7) #7
  ret %struct.zip* %515
}

declare i32 @zip_source_close(%struct.zip_source*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @zip_stat_init(%struct.zip_stat*) local_unnamed_addr #2

declare i32 @zip_source_stat(%struct.zip_source*, %struct.zip_stat*) local_unnamed_addr #2

declare zeroext i1 @zip_source_accept_empty(%struct.zip_source*) local_unnamed_addr #2

declare void @_zip_error_copy(%struct.zip_error*, %struct.zip_error*) local_unnamed_addr #2

declare void @zip_source_keep(%struct.zip_source*) local_unnamed_addr #2

declare void @zip_discard(%struct.zip*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

declare zeroext i1 @_zip_hash_reserve_capacity(%struct.zip_hash*, i64, %struct.zip_error*) local_unnamed_addr #2

declare i8* @_zip_string_get(%struct.zip_string*, i32*, i32, %struct.zip_error*) local_unnamed_addr #2

declare zeroext i1 @_zip_hash_add(%struct.zip_hash*, i8*, i64, i32, %struct.zip_error*) local_unnamed_addr #2

declare i32 @zip_error_code_zip(%struct.zip_error*) local_unnamed_addr #2

declare i32 @zip_error_system_type(%struct.zip_error*) local_unnamed_addr #2

declare i32 @zip_error_code_system(%struct.zip_error*) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #4

declare %struct.zip* @_zip_new(%struct.zip_error*) local_unnamed_addr #2

declare %struct.zip_error* @zip_source_error(%struct.zip_source*) local_unnamed_addr #2

declare i32 @zip_source_seek(%struct.zip_source*, i64, i32) local_unnamed_addr #2

declare i64 @zip_source_tell(%struct.zip_source*) local_unnamed_addr #2

declare %struct.zip_buffer* @_zip_buffer_new_from_source(%struct.zip_source*, i64, i8*, %struct.zip_error*) local_unnamed_addr #2

declare i32 @_zip_buffer_set_offset(%struct.zip_buffer*, i64) local_unnamed_addr #2

declare i8* @_zip_buffer_get(%struct.zip_buffer*, i64) local_unnamed_addr #2

declare i64 @_zip_buffer_left(%struct.zip_buffer*) local_unnamed_addr #2

declare i8* @_zip_buffer_data(%struct.zip_buffer*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @_zip_checkcons(%struct.zip* nocapture readonly, %struct.zip_cdir* nocapture readonly, %struct.zip_error*) unnamed_addr #0 {
  %4 = alloca %struct.zip_dirent, align 8
  %5 = bitcast %struct.zip_dirent* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %5) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 120, i1 false)
  call void @_zip_dirent_init(%struct.zip_dirent* nonnull %4) #7
  %6 = getelementptr inbounds %struct.zip_cdir, %struct.zip_cdir* %1, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %144, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.zip_cdir, %struct.zip_cdir* %1, i64 0, i32 0
  %11 = load %struct.zip_entry*, %struct.zip_entry** %10, align 8
  %12 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %11, i64 0, i32 0
  %13 = load %struct.zip_dirent*, %struct.zip_dirent** %12, align 8
  %14 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %13, i64 0, i32 18
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %struct.zip_cdir, %struct.zip_cdir* %1, i64 0, i32 0
  %17 = getelementptr inbounds %struct.zip_cdir, %struct.zip_cdir* %1, i64 0, i32 4
  %18 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 0
  %19 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %4, i64 0, i32 5
  %20 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %4, i64 0, i32 7
  %21 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %4, i64 0, i32 8
  %22 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %4, i64 0, i32 12
  %23 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %4, i64 0, i32 9
  %24 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %4, i64 0, i32 10
  %25 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %4, i64 0, i32 11
  %26 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %4, i64 0, i32 6
  %27 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %4, i64 0, i32 13
  br label %28

28:                                               ; preds = %9, %125
  %29 = phi i64 [ %15, %9 ], [ %53, %125 ]
  %30 = phi i64 [ %15, %9 ], [ %38, %125 ]
  %31 = phi i64 [ 0, %9 ], [ %141, %125 ]
  %32 = load %struct.zip_entry*, %struct.zip_entry** %16, align 8
  %33 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %32, i64 %31, i32 0
  %34 = load %struct.zip_dirent*, %struct.zip_dirent** %33, align 8
  %35 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %34, i64 0, i32 18
  %36 = load i64, i64* %35, align 8
  %37 = icmp ult i64 %36, %30
  %38 = select i1 %37, i64 %36, i64 %30
  %39 = load i64, i64* %17, align 8
  %40 = icmp ugt i64 %38, %39
  br i1 %40, label %41, label %42

41:                                               ; preds = %28
  call void @zip_error_set(%struct.zip_error* %2, i32 19, i32 0) #7
  br label %150

42:                                               ; preds = %28
  %43 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %34, i64 0, i32 10
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %34, i64 0, i32 12
  %46 = load %struct.zip_string*, %struct.zip_string** %45, align 8
  %47 = call zeroext i16 @_zip_string_length(%struct.zip_string* %46) #7
  %48 = zext i16 %47 to i64
  %49 = add i64 %36, 30
  %50 = add i64 %49, %44
  %51 = add i64 %50, %48
  %52 = icmp ugt i64 %51, %29
  %53 = select i1 %52, i64 %51, i64 %29
  %54 = load i64, i64* %17, align 8
  %55 = icmp ugt i64 %53, %54
  br i1 %55, label %56, label %57

56:                                               ; preds = %42
  call void @zip_error_set(%struct.zip_error* %2, i32 19, i32 0) #7
  br label %150

57:                                               ; preds = %42
  %58 = load %struct.zip_source*, %struct.zip_source** %18, align 8
  %59 = load %struct.zip_entry*, %struct.zip_entry** %16, align 8
  %60 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %59, i64 %31, i32 0
  %61 = load %struct.zip_dirent*, %struct.zip_dirent** %60, align 8
  %62 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %61, i64 0, i32 18
  %63 = load i64, i64* %62, align 8
  %64 = call i32 @zip_source_seek(%struct.zip_source* %58, i64 %63, i32 0) #7
  %65 = icmp slt i32 %64, 0
  %66 = load %struct.zip_source*, %struct.zip_source** %18, align 8
  br i1 %65, label %67, label %68

67:                                               ; preds = %57
  call void @_zip_error_set_from_source(%struct.zip_error* %2, %struct.zip_source* %66) #7
  br label %150

68:                                               ; preds = %57
  %69 = call i64 @_zip_dirent_read(%struct.zip_dirent* nonnull %4, %struct.zip_source* %66, %struct.zip_buffer* null, i1 zeroext true, %struct.zip_error* %2) #7
  %70 = icmp eq i64 %69, -1
  br i1 %70, label %71, label %72

71:                                               ; preds = %68
  call void @_zip_dirent_finalize(%struct.zip_dirent* nonnull %4) #7
  br label %150

72:                                               ; preds = %68
  %73 = load %struct.zip_entry*, %struct.zip_entry** %16, align 8
  %74 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %73, i64 %31, i32 0
  %75 = load %struct.zip_dirent*, %struct.zip_dirent** %74, align 8
  %76 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %75, i64 0, i32 5
  %77 = load i16, i16* %76, align 2
  %78 = load i16, i16* %19, align 2
  %79 = icmp ult i16 %77, %78
  br i1 %79, label %124, label %80

80:                                               ; preds = %72
  %81 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %75, i64 0, i32 7
  %82 = load i32, i32* %81, align 8
  %83 = load i32, i32* %20, align 8
  %84 = icmp eq i32 %82, %83
  br i1 %84, label %85, label %124

85:                                               ; preds = %80
  %86 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %75, i64 0, i32 8
  %87 = load i64, i64* %86, align 8
  %88 = load i64, i64* %21, align 8
  %89 = icmp eq i64 %87, %88
  br i1 %89, label %90, label %124

90:                                               ; preds = %85
  %91 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %75, i64 0, i32 12
  %92 = load %struct.zip_string*, %struct.zip_string** %91, align 8
  %93 = load %struct.zip_string*, %struct.zip_string** %22, align 8
  %94 = call i32 @_zip_string_equal(%struct.zip_string* %92, %struct.zip_string* %93) #7
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %124, label %96

96:                                               ; preds = %90
  %97 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %75, i64 0, i32 9
  %98 = load i32, i32* %97, align 8
  %99 = load i32, i32* %23, align 8
  %100 = icmp eq i32 %98, %99
  br i1 %100, label %103, label %101

101:                                              ; preds = %96
  %102 = load i64, i64* %24, align 8
  br label %113

103:                                              ; preds = %96
  %104 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %75, i64 0, i32 10
  %105 = load i64, i64* %104, align 8
  %106 = load i64, i64* %24, align 8
  %107 = icmp eq i64 %105, %106
  br i1 %107, label %108, label %113

108:                                              ; preds = %103
  %109 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %75, i64 0, i32 11
  %110 = load i64, i64* %109, align 8
  %111 = load i64, i64* %25, align 8
  %112 = icmp eq i64 %110, %111
  br i1 %112, label %125, label %113

113:                                              ; preds = %101, %108, %103
  %114 = phi i64 [ %102, %101 ], [ %105, %108 ], [ %106, %103 ]
  %115 = load i16, i16* %26, align 4
  %116 = and i16 %115, 8
  %117 = icmp ne i16 %116, 0
  %118 = icmp eq i32 %99, 0
  %119 = and i1 %118, %117
  %120 = load i64, i64* %25, align 8
  %121 = or i64 %114, %120
  %122 = icmp eq i64 %121, 0
  %123 = and i1 %122, %119
  br i1 %123, label %125, label %124

124:                                              ; preds = %90, %85, %80, %72, %113
  call void @zip_error_set(%struct.zip_error* %2, i32 21, i32 0) #7
  call void @_zip_dirent_finalize(%struct.zip_dirent* nonnull %4) #7
  br label %150

125:                                              ; preds = %113, %108
  %126 = load %struct.zip_entry*, %struct.zip_entry** %16, align 8
  %127 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %126, i64 %31, i32 0
  %128 = load %struct.zip_dirent*, %struct.zip_dirent** %127, align 8
  %129 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %128, i64 0, i32 13
  %130 = load %struct.zip_extra_field*, %struct.zip_extra_field** %129, align 8
  %131 = load %struct.zip_extra_field*, %struct.zip_extra_field** %27, align 8
  %132 = call %struct.zip_extra_field* @_zip_ef_merge(%struct.zip_extra_field* %130, %struct.zip_extra_field* %131) #7
  %133 = load %struct.zip_entry*, %struct.zip_entry** %16, align 8
  %134 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %133, i64 %31, i32 0
  %135 = load %struct.zip_dirent*, %struct.zip_dirent** %134, align 8
  %136 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %135, i64 0, i32 13
  store %struct.zip_extra_field* %132, %struct.zip_extra_field** %136, align 8
  %137 = load %struct.zip_entry*, %struct.zip_entry** %16, align 8
  %138 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %137, i64 %31, i32 0
  %139 = load %struct.zip_dirent*, %struct.zip_dirent** %138, align 8
  %140 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %139, i64 0, i32 1
  store i8 1, i8* %140, align 4
  store %struct.zip_extra_field* null, %struct.zip_extra_field** %27, align 8
  call void @_zip_dirent_finalize(%struct.zip_dirent* nonnull %4) #7
  %141 = add nuw i64 %31, 1
  %142 = load i64, i64* %6, align 8
  %143 = icmp ult i64 %141, %142
  br i1 %143, label %28, label %144

144:                                              ; preds = %125, %3
  %145 = phi i64 [ 0, %3 ], [ %38, %125 ]
  %146 = phi i64 [ 0, %3 ], [ %53, %125 ]
  %147 = sub i64 %146, %145
  %148 = icmp ult i64 %147, 9223372036854775807
  %149 = select i1 %148, i64 %147, i64 9223372036854775807
  br label %150

150:                                              ; preds = %144, %124, %71, %67, %56, %41
  %151 = phi i64 [ -1, %41 ], [ -1, %56 ], [ -1, %67 ], [ -1, %71 ], [ -1, %124 ], [ %149, %144 ]
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %5) #7
  ret i64 %151
}

declare void @_zip_cdir_free(%struct.zip_cdir*) local_unnamed_addr #2

declare void @_zip_buffer_free(%struct.zip_buffer*) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #5

declare i64 @_zip_buffer_offset(%struct.zip_buffer*) local_unnamed_addr #2

declare zeroext i16 @_zip_buffer_get_16(%struct.zip_buffer*) local_unnamed_addr #2

declare %struct.zip_string* @_zip_string_new(i8*, i16 zeroext, i32, %struct.zip_error*) local_unnamed_addr #2

declare %struct.zip_buffer* @_zip_buffer_new(i8*, i64) local_unnamed_addr #2

declare zeroext i1 @_zip_cdir_grow(%struct.zip_cdir*, i64, %struct.zip_error*) local_unnamed_addr #2

declare %struct.zip_dirent* @_zip_dirent_new() local_unnamed_addr #2

declare i64 @_zip_dirent_read(%struct.zip_dirent*, %struct.zip_source*, %struct.zip_buffer*, i1 zeroext, %struct.zip_error*) local_unnamed_addr #2

declare zeroext i1 @_zip_buffer_eof(%struct.zip_buffer*) local_unnamed_addr #2

declare i64 @_zip_buffer_get_64(%struct.zip_buffer*) local_unnamed_addr #2

declare i64 @_zip_buffer_size(%struct.zip_buffer*) local_unnamed_addr #2

declare i32 @_zip_buffer_get_32(%struct.zip_buffer*) local_unnamed_addr #2

declare zeroext i1 @_zip_buffer_ok(%struct.zip_buffer*) local_unnamed_addr #2

declare %struct.zip_cdir* @_zip_cdir_new(i64, %struct.zip_error*) local_unnamed_addr #2

declare void @_zip_dirent_init(%struct.zip_dirent*) local_unnamed_addr #2

declare zeroext i16 @_zip_string_length(%struct.zip_string*) local_unnamed_addr #2

declare void @_zip_dirent_finalize(%struct.zip_dirent*) local_unnamed_addr #2

declare %struct.zip_extra_field* @_zip_ef_merge(%struct.zip_extra_field*, %struct.zip_extra_field*) local_unnamed_addr #2

declare i32 @_zip_string_equal(%struct.zip_string*, %struct.zip_string*) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind readonly }
attributes #7 = { nounwind }
attributes #8 = { nounwind readnone }
attributes #9 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
