; ModuleID = '../../third_party/blink/renderer/core/css/parser/css_parser_fast_paths.cc'
source_filename = "../../third_party/blink/renderer/core/css/parser/css_parser_fast_paths.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr", i32, [4 x i8], %"class.std::__1::unique_ptr.136", %"class.std::__1::unique_ptr.136", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.146", %"class.std::__1::unique_ptr.152", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.169", %"class.std::__1::unique_ptr.175", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.182", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.5", %"class.std::__1::unique_ptr.9", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.21", %"class.std::__1::unique_ptr.27", %"class.std::__1::unique_ptr.33", %"class.std::__1::unique_ptr.44", %"class.std::__1::unique_ptr.51", %"class.std::__1::unique_ptr.51", %"class.std::__1::unique_ptr.58", %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.72", %"class.std::__1::unique_ptr.72", %"class.std::__1::unique_ptr.79", %"class.std::__1::unique_ptr.86", %"class.std::__1::unique_ptr.93", %"class.std::__1::unique_ptr.116", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.9" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.27" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.33" = type { %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.36" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.36" = type { %"struct.std::__1::__atomic_base.37" }
%"struct.std::__1::__atomic_base.37" = type { %"struct.std::__1::__atomic_base.38" }
%"struct.std::__1::__atomic_base.38" = type { %"struct.std::__1::__cxx_atomic_impl.39" }
%"struct.std::__1::__cxx_atomic_impl.39" = type { %"struct.std::__1::__cxx_atomic_base_impl.40" }
%"struct.std::__1::__cxx_atomic_base_impl.40" = type { i64 }
%"class.std::__1::unique_ptr.44" = type { %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { %"class.blink::Worklist.47"* }
%"class.blink::Worklist.47" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.36" }
%"class.std::__1::unique_ptr.51" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { %"class.blink::Worklist.54"* }
%"class.blink::Worklist.54" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.36" }
%"class.std::__1::unique_ptr.58" = type { %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %"class.blink::Worklist.61"* }
%"class.blink::Worklist.61" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.36" }
%"class.std::__1::unique_ptr.65" = type { %"class.std::__1::__compressed_pair.66" }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %"class.blink::Worklist.68"* }
%"class.blink::Worklist.68" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.36" }
%"class.std::__1::unique_ptr.72" = type { %"class.std::__1::__compressed_pair.73" }
%"class.std::__1::__compressed_pair.73" = type { %"struct.std::__1::__compressed_pair_elem.74" }
%"struct.std::__1::__compressed_pair_elem.74" = type { %"class.blink::Worklist.75"* }
%"class.blink::Worklist.75" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.36" }
%"class.std::__1::unique_ptr.79" = type { %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"class.blink::Worklist.82"* }
%"class.blink::Worklist.82" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.36" }
%"class.std::__1::unique_ptr.86" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"class.blink::Worklist.89"* }
%"class.blink::Worklist.89" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.36" }
%"class.std::__1::unique_ptr.93" = type { %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.95" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.96", %"class.std::__1::__compressed_pair.103", %"class.std::__1::__compressed_pair.108", %"class.std::__1::__compressed_pair.110", [4 x i8] }>
%"class.std::__1::unique_ptr.96" = type { %"class.std::__1::__compressed_pair.97" }
%"class.std::__1::__compressed_pair.97" = type { %"struct.std::__1::__compressed_pair_elem.98", %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.98" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.101" }
%"struct.std::__1::__compressed_pair_elem.101" = type { i64 }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.104" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.101" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { float }
%"class.std::__1::unique_ptr.116" = type { %"class.std::__1::__compressed_pair.117" }
%"class.std::__1::__compressed_pair.117" = type { %"struct.std::__1::__compressed_pair_elem.118" }
%"struct.std::__1::__compressed_pair_elem.118" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.119", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.119" = type { %"class.std::__1::__compressed_pair.120" }
%"class.std::__1::__compressed_pair.120" = type { %"struct.std::__1::__compressed_pair_elem.121" }
%"struct.std::__1::__compressed_pair_elem.121" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.128" }
%"class.WTF::Vector.128" = type { %"class.WTF::VectorBuffer.129" }
%"class.WTF::VectorBuffer.129" = type { %"class.WTF::VectorBufferBase.130" }
%"class.WTF::VectorBufferBase.130" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.136" = type { %"class.std::__1::__compressed_pair.137" }
%"class.std::__1::__compressed_pair.137" = type { %"struct.std::__1::__compressed_pair_elem.138" }
%"struct.std::__1::__compressed_pair_elem.138" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.144" }
%"class.WTF::VectorBuffer.144" = type { %"class.WTF::VectorBufferBase.145" }
%"class.WTF::VectorBufferBase.145" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.146" = type { %"class.std::__1::__compressed_pair.147" }
%"class.std::__1::__compressed_pair.147" = type { %"struct.std::__1::__compressed_pair_elem.148" }
%"struct.std::__1::__compressed_pair_elem.148" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.152" = type { %"class.std::__1::__compressed_pair.153" }
%"class.std::__1::__compressed_pair.153" = type { %"struct.std::__1::__compressed_pair_elem.154" }
%"struct.std::__1::__compressed_pair_elem.154" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.158" }
%"class.std::__1::unique_ptr.158" = type { %"class.std::__1::__compressed_pair.159" }
%"class.std::__1::__compressed_pair.159" = type { %"struct.std::__1::__compressed_pair_elem.160" }
%"struct.std::__1::__compressed_pair_elem.160" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.47"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.54"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.61"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.68"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.75"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.161" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.161" = type { %"struct.std::__1::__compressed_pair_elem.162" }
%"struct.std::__1::__compressed_pair_elem.162" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.169" = type { %"class.std::__1::__compressed_pair.170" }
%"class.std::__1::__compressed_pair.170" = type { %"struct.std::__1::__compressed_pair_elem.171" }
%"struct.std::__1::__compressed_pair_elem.171" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.175" = type { %"class.std::__1::__compressed_pair.176" }
%"class.std::__1::__compressed_pair.176" = type { %"struct.std::__1::__compressed_pair_elem.177" }
%"struct.std::__1::__compressed_pair_elem.177" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.181 }
%class.scoped_refptr.181 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.182" = type { %"struct.std::__1::__atomic_base.183" }
%"struct.std::__1::__atomic_base.183" = type { %"struct.std::__1::__cxx_atomic_impl.184" }
%"struct.std::__1::__cxx_atomic_impl.184" = type { %"struct.std::__1::__cxx_atomic_base_impl.185" }
%"struct.std::__1::__cxx_atomic_base_impl.185" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.blink::AtomicEntryFlag" = type { %"struct.std::__1::atomic.215" }
%"struct.std::__1::atomic.215" = type { %"struct.std::__1::__atomic_base.216" }
%"struct.std::__1::__atomic_base.216" = type { %"struct.std::__1::__atomic_base.217" }
%"struct.std::__1::__atomic_base.217" = type { %"struct.std::__1::__cxx_atomic_impl.218" }
%"struct.std::__1::__cxx_atomic_impl.218" = type { %"struct.std::__1::__cxx_atomic_base_impl.219" }
%"struct.std::__1::__cxx_atomic_base_impl.219" = type { i32 }
%"class.blink::CSSValue" = type { i8, i8, i8 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.blink::CSSIdentifierValue" = type { %"class.blink::CSSValue", i32 }
%"class.blink::cssvalue::CSSColor" = type { %"class.blink::CSSValue", %"class.blink::Color" }
%"class.blink::Color" = type { i32 }
%"class.blink::CSSNumericLiteralValue" = type { %"class.blink::CSSPrimitiveValue", double }
%"class.blink::CSSPrimitiveValue" = type { %"class.blink::CSSValue" }
%"class.blink::StylePropertyShorthand" = type { %"class.blink::CSSProperty"**, i32, i32 }
%"class.blink::CSSProperty" = type <{ %"class.blink::CSSUnresolvedProperty", i32, i32, i8, [7 x i8] }>
%"class.blink::CSSUnresolvedProperty" = type { i32 (...)** }
%"class.blink::CSSInheritedValue" = type { %"class.blink::CSSValue" }
%"class.blink::CSSInitialValue" = type { %"class.blink::CSSValue" }
%"class.blink::cssvalue::CSSUnsetValue" = type { %"class.blink::CSSValue" }
%"class.blink::cssvalue::CSSRevertValue" = type { %"class.blink::CSSValue" }
%"class.blink::CSSValueList" = type { %"class.blink::CSSValue", %"class.blink::HeapVector" }
%"class.blink::HeapVector" = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase", [32 x i8] }
%"class.WTF::VectorBufferBase" = type { %"class.blink::Member"*, i32, i32 }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::CSSValue"* }
%"class.blink::CSSFunctionValue" = type <{ %"class.blink::CSSValueList", i32, [4 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.206" }
%"class.std::__1::__compressed_pair.206" = type { %"struct.std::__1::__compressed_pair_elem.207" }
%"struct.std::__1::__compressed_pair_elem.207" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }
%"class.blink::HeapVectorBacking" = type { i8 }

$_ZN3WTF22EqualIgnoringASCIICaseILm8EEEbRKNS_10StringViewERAT__Kc = comdat any

$_ZN3WTF22EqualIgnoringASCIICaseILm6EEEbRKNS_10StringViewERAT__Kc = comdat any

$_ZN3WTF22EqualIgnoringASCIICaseILm7EEEbRKNS_10StringViewERAT__Kc = comdat any

$_ZN5blink8CSSValue14AllocateObjectINS_16CSSFunctionValueEEEPvm = comdat any

$_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc = comdat any

$_ZN5blink10TraceTraitINS_8CSSValueEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_8CSSValueEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_8CSSValueEE7GetNameEPKv = comdat any

$_ZN5blink8CSSValue14AllocateObjectINS_12CSSValueListEEEPvm = comdat any

$_ZN3WTF6VectorIN5blink6MemberIKNS1_8CSSValueEEELj4ENS1_13HeapAllocatorEE14AppendSlowCaseIRS4_EEvOT_ = comdat any

$_ZN3WTF6VectorIN5blink6MemberIKNS1_8CSSValueEEELj4ENS1_13HeapAllocatorEE14ExpandCapacityEj = comdat any

$_ZN3WTF6VectorIN5blink6MemberIKNS1_8CSSValueEEELj4ENS1_13HeapAllocatorEE15ReserveCapacityEj = comdat any

$_ZN3WTF6VectorIN5blink6MemberIKNS1_8CSSValueEEELj4ENS1_13HeapAllocatorEE16ReallocateBufferEj = comdat any

$_ZN5blink13HeapAllocator13QuantizedSizeINS_6MemberIKNS_8CSSValueEEEEEmm = comdat any

$_ZN5blink25MakeGarbageCollectedTraitINS_17HeapVectorBackingINS_6MemberIKNS_8CSSValueEEEN3WTF12VectorTraitsIS5_EEEEE4CallEm = comdat any

$_ZN5blink17HeapVectorBackingINS_6MemberIKNS_8CSSValueEEEN3WTF12VectorTraitsIS4_EEE14AllocateObjectIS8_EEPvm = comdat any

$_ZN5blink10TraceTraitINS_17HeapVectorBackingINS_6MemberIKNS_8CSSValueEEEN3WTF12VectorTraitsIS5_EEEEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink9NameTraitINS_17HeapVectorBackingINS_6MemberIKNS_8CSSValueEEEN3WTF12VectorTraitsIS5_EEEEE7GetNameEPKv = comdat any

$_ZN3WTF12VectorBufferIN5blink6MemberIKNS1_8CSSValueEEELj4ENS1_13HeapAllocatorEE22ReallyDeallocateBufferEPS5_ = comdat any

$_ZZN5blink11GCInfoTraitINS_8CSSValueEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_8CSSValueEE5IndexEvE13gc_info_index = comdat any

$_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberIKNS_8CSSValueEEEN3WTF12VectorTraitsIS5_EEEEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberIKNS_8CSSValueEEEN3WTF12VectorTraitsIS5_EEEEE5IndexEvE13gc_info_index = comdat any

@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@_ZZN5blinkL15ParseAlphaValueIDsEEbRPKT_S3_cRiE17kTenthAlphaValues = internal unnamed_addr constant [10 x i32] [i32 0, i32 26, i32 51, i32 77, i32 102, i32 128, i32 153, i32 179, i32 204, i32 230], align 16
@_ZN5blink26RuntimeEnabledFeaturesBase23is_css_logical_enabled_E = external local_unnamed_addr global i8, align 1
@_ZN5blink26RuntimeEnabledFeaturesBase25is_overflow_clip_enabled_E = external local_unnamed_addr global i8, align 1
@_ZN5blink26RuntimeEnabledFeaturesBase28is_css_math_variant_enabled_E = external local_unnamed_addr global i8, align 1
@_ZN5blink26RuntimeEnabledFeaturesBase23is_mathml_core_enabled_E = external local_unnamed_addr global i8, align 1
@_ZN5blink26RuntimeEnabledFeaturesBase21is_layout_ng_enabled_E = external local_unnamed_addr global i8, align 1
@_ZN5blink26RuntimeEnabledFeaturesBase26is_layout_ng_grid_enabled_E = external local_unnamed_addr global i8, align 1
@_ZN5blink26RuntimeEnabledFeaturesBase31is_bidi_caret_affinity_enabled_E = external local_unnamed_addr global i8, align 1
@_ZN5blink26RuntimeEnabledFeaturesBase33is_css_container_queries_enabled_E = external local_unnamed_addr global i8, align 1
@.str = private unnamed_addr constant [8 x i8] c"initial\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"inherit\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"unset\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"revert\00", align 1
@_ZN3WTF19kASCIICaseFoldTableE = external local_unnamed_addr constant [256 x i8], align 16
@.str.4 = private unnamed_addr constant [16 x i8] c"blink::CSSValue\00", align 1
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@.str.5 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.6 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_8CSSValueEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_8CSSValueEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_8CSSValueEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_8CSSValueEE7GetNameEPKv, i8 0 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_8CSSValueEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.7 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8
@_ZN5blink11ThreadState25incremental_marking_flag_E = external local_unnamed_addr global %"class.blink::AtomicEntryFlag", align 4
@.str.8 = private unnamed_addr constant [33 x i8] c"expanded_capacity > old_capacity\00", align 1
@.str.9 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.10 = private unnamed_addr constant [33 x i8] c"Allocator::IsAllocationAllowed()\00", align 1
@.str.11 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.12 = private unnamed_addr constant [74 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap_allocator_impl.h\00", align 1
@.str.13 = private unnamed_addr constant [18 x i8] c"num_elements > 0u\00", align 1
@.str.14 = private unnamed_addr constant [93 x i8] c"../../third_party/blink/renderer/platform/heap/impl/collection_support/heap_vector_backing.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberIKNS_8CSSValueEEEN3WTF12VectorTraitsIS5_EEEEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_17HeapVectorBackingINS_6MemberIKNS_8CSSValueEEEN3WTF12VectorTraitsIS5_EEEEE5TraceEPNS_7VisitorEPKv, void (i8*)* null, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_17HeapVectorBackingINS_6MemberIKNS_8CSSValueEEEN3WTF12VectorTraitsIS5_EEEEE7GetNameEPKv, i8 0 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberIKNS_8CSSValueEEEN3WTF12VectorTraitsIS5_EEEEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink17HeapVectorBackingINS1_6MemberIKNS1_8CSSValueEEENS_12VectorTraitsIS6_EEEEEEPKcv = private unnamed_addr constant [169 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::HeapVectorBacking<blink::Member<const blink::CSSValue>, WTF::VectorTraits<blink::Member<const blink::CSSValue> > >]\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::CSSValue"* @_ZN5blink18CSSParserFastPaths10ParseColorERKN3WTF6StringENS_13CSSParserModeE(%"class.WTF::String"* nocapture readonly dereferenceable(8), i8 zeroext) local_unnamed_addr #0 align 2 {
  %3 = tail call fastcc %"class.blink::CSSValue"* @_ZN5blinkL10ParseColorENS_13CSSPropertyIDERKN3WTF6StringENS_13CSSParserModeE(i32 2, %"class.WTF::String"* dereferenceable(8) %0, i8 zeroext %1)
  ret %"class.blink::CSSValue"* %3
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc %"class.blink::CSSValue"* @_ZN5blinkL10ParseColorENS_13CSSPropertyIDERKN3WTF6StringENS_13CSSParserModeE(i32, %"class.WTF::String"* nocapture readonly dereferenceable(8), i8 zeroext) unnamed_addr #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8, align 1
  %10 = alloca i8, align 1
  %11 = alloca i32, align 4
  %12 = alloca i16*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  %18 = alloca %"class.WTF::StringView", align 8
  %19 = alloca i32, align 4
  switch i32 %0, label %636 [
    i32 108, label %20
    i32 2, label %20
    i32 52, label %20
    i32 68, label %20
    i32 87, label %20
    i32 90, label %20
    i32 95, label %20
    i32 142, label %20
    i32 152, label %20
    i32 208, label %20
    i32 256, label %20
    i32 333, label %20
    i32 335, label %20
    i32 62, label %20
    i32 65, label %20
    i32 81, label %20
    i32 84, label %20
    i32 120, label %20
    i32 424, label %20
    i32 427, label %20
    i32 429, label %20
    i32 353, label %20
  ]

20:                                               ; preds = %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3
  %21 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %22 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %21, align 8
  %23 = icmp eq %"class.WTF::StringImpl"* %22, null
  br i1 %23, label %24, label %28

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %18, i64 0, i32 1
  store i8* null, i8** %25, align 8
  %26 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %27 = bitcast %"class.WTF::StringView"* %18 to i64*
  store i64 %26, i64* %27, align 8
  br label %35

28:                                               ; preds = %20
  %29 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %18, i64 0, i32 0
  store %"class.WTF::StringImpl"* %22, %"class.WTF::StringImpl"** %29, align 8
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %22, i64 0, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %22, i64 1
  %33 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %18, i64 0, i32 1
  %34 = bitcast i8** %33 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %32, %"class.WTF::StringImpl"** %34, align 8
  br label %35

35:                                               ; preds = %24, %28
  %36 = phi i32 [ %31, %28 ], [ 0, %24 ]
  %37 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %18, i64 0, i32 2
  store i32 %36, i32* %37, align 8
  %38 = tail call i32 @_ZN5blink17CssValueKeywordIDEN3WTF10StringViewE(%"class.WTF::StringView"* nonnull byval(%"class.WTF::StringView") align 8 %18) #9
  %39 = tail call zeroext i1 @_ZN5blink10StyleColor14IsColorKeywordENS_10CSSValueIDE(i32 %38) #9
  br i1 %39, label %40, label %45

40:                                               ; preds = %35
  %41 = tail call zeroext i1 @_ZN5blink20isValueAllowedInModeENS_10CSSValueIDENS_13CSSParserModeE(i32 %38, i8 zeroext %2) #9
  br i1 %41, label %42, label %636

42:                                               ; preds = %40
  %43 = tail call %"class.blink::CSSIdentifierValue"* @_ZN5blink18CSSIdentifierValue6CreateENS_10CSSValueIDE(i32 %38) #9
  %44 = getelementptr inbounds %"class.blink::CSSIdentifierValue", %"class.blink::CSSIdentifierValue"* %43, i64 0, i32 0
  br label %636

45:                                               ; preds = %35
  %46 = bitcast i32* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %46) #9
  store i32 -1431655766, i32* %19, align 4
  %47 = icmp eq i8 %2, 1
  br i1 %47, label %48, label %50

48:                                               ; preds = %45
  switch i32 %0, label %49 [
    i32 2, label %50
    i32 52, label %50
    i32 68, label %50
    i32 87, label %50
    i32 90, label %50
    i32 95, label %50
  ]

49:                                               ; preds = %48
  br label %50

50:                                               ; preds = %49, %48, %48, %48, %48, %48, %48, %45
  %51 = phi i8 [ 0, %45 ], [ 0, %49 ], [ 1, %48 ], [ 1, %48 ], [ 1, %48 ], [ 1, %48 ], [ 1, %48 ], [ 1, %48 ]
  %52 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %21, align 8
  %53 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load atomic i32, i32* %53 monotonic, align 4
  %55 = and i32 %54, 1
  %56 = icmp eq i32 %55, 0
  %57 = icmp eq %"class.WTF::StringImpl"* %52, null
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 1
  br i1 %56, label %343, label %59

59:                                               ; preds = %50
  %60 = bitcast %"class.WTF::StringImpl"* %58 to i8*
  %61 = select i1 %57, i8* null, i8* %60
  br i1 %57, label %62, label %64

62:                                               ; preds = %59
  %63 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %63) #9
  store i32 0, i32* %4, align 4
  br label %340

64:                                               ; preds = %59
  %65 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 1
  %66 = load i32, i32* %65, align 4
  %67 = icmp eq i8 %51, 0
  %68 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %68) #9
  store i32 0, i32* %4, align 4
  %69 = icmp ugt i32 %66, 3
  br i1 %69, label %70, label %77

70:                                               ; preds = %64
  %71 = load i8, i8* %61, align 1
  %72 = icmp eq i8 %71, 35
  br i1 %72, label %73, label %77

73:                                               ; preds = %70
  %74 = getelementptr inbounds i8, i8* %61, i64 1
  %75 = add i32 %66, -1
  %76 = call zeroext i1 @_ZN5blink5Color13ParseHexColorEPKhjRj(i8* %74, i32 %75, i32* nonnull dereferenceable(4) %19) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %68) #9
  br i1 %76, label %630, label %634

77:                                               ; preds = %70, %64
  br i1 %67, label %82, label %78

78:                                               ; preds = %77
  switch i32 %66, label %82 [
    i32 6, label %79
    i32 3, label %79
  ]

79:                                               ; preds = %78, %78
  %80 = call zeroext i1 @_ZN5blink5Color13ParseHexColorEPKhjRj(i8* %61, i32 %66, i32* nonnull dereferenceable(4) %19) #9
  br i1 %80, label %81, label %82

81:                                               ; preds = %79
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %68) #9
  br label %630

82:                                               ; preds = %79, %78, %77
  %83 = icmp ult i32 %66, 5
  br i1 %83, label %340, label %84

84:                                               ; preds = %82
  %85 = load i8, i8* %61, align 1
  %86 = or i8 %85, 32
  %87 = icmp eq i8 %86, 114
  br i1 %87, label %88, label %340

88:                                               ; preds = %84
  %89 = getelementptr inbounds i8, i8* %61, i64 1
  %90 = load i8, i8* %89, align 1
  %91 = or i8 %90, 32
  %92 = icmp eq i8 %91, 103
  br i1 %92, label %93, label %340

93:                                               ; preds = %88
  %94 = getelementptr inbounds i8, i8* %61, i64 2
  %95 = load i8, i8* %94, align 1
  %96 = or i8 %95, 32
  %97 = icmp eq i8 %96, 98
  br i1 %97, label %98, label %340

98:                                               ; preds = %93
  %99 = getelementptr inbounds i8, i8* %61, i64 3
  %100 = load i8, i8* %99, align 1
  %101 = icmp eq i8 %100, 40
  br i1 %101, label %109, label %102

102:                                              ; preds = %98
  %103 = or i8 %100, 32
  %104 = icmp eq i8 %103, 97
  br i1 %104, label %105, label %340

105:                                              ; preds = %102
  %106 = getelementptr inbounds i8, i8* %61, i64 4
  %107 = load i8, i8* %106, align 1
  %108 = icmp eq i8 %107, 40
  br i1 %108, label %109, label %340

109:                                              ; preds = %105, %98
  %110 = phi i64 [ 4, %98 ], [ 5, %105 ]
  %111 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %111) #9
  %112 = getelementptr inbounds i8, i8* %61, i64 %110
  store i8* %112, i8** %5, align 8
  %113 = zext i32 %66 to i64
  %114 = getelementptr inbounds i8, i8* %61, i64 %113
  %115 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %115) #9
  store i32 -1431655766, i32* %6, align 4
  %116 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %116) #9
  store i32 -1431655766, i32* %7, align 4
  %117 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %117) #9
  store i32 -1431655766, i32* %8, align 4
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %9) #9
  store i8 1, i8* %9, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %10) #9
  store i8 0, i8* %10, align 1
  %118 = call fastcc zeroext i1 @_ZN5blinkL28ParseColorNumberOrPercentageIhEEbRPKT_S3_cRbbRNS_17CSSPrimitiveValue8UnitTypeERi(i8** nonnull dereferenceable(8) %5, i8* %114, i8 signext 44, i8* nonnull dereferenceable(1) %9, i1 zeroext true, i32* nonnull dereferenceable(4) %4, i32* nonnull dereferenceable(4) %6) #9
  br i1 %118, label %119, label %342

119:                                              ; preds = %109
  %120 = call fastcc zeroext i1 @_ZN5blinkL28ParseColorNumberOrPercentageIhEEbRPKT_S3_cRbbRNS_17CSSPrimitiveValue8UnitTypeERi(i8** nonnull dereferenceable(8) %5, i8* %114, i8 signext 44, i8* nonnull dereferenceable(1) %9, i1 zeroext false, i32* nonnull dereferenceable(4) %4, i32* nonnull dereferenceable(4) %7) #9
  br i1 %120, label %121, label %342

121:                                              ; preds = %119
  %122 = call fastcc zeroext i1 @_ZN5blinkL28ParseColorNumberOrPercentageIhEEbRPKT_S3_cRbbRNS_17CSSPrimitiveValue8UnitTypeERi(i8** nonnull dereferenceable(8) %5, i8* %114, i8 signext 44, i8* nonnull dereferenceable(1) %10, i1 zeroext false, i32* nonnull dereferenceable(4) %4, i32* nonnull dereferenceable(4) %8) #9
  br i1 %122, label %133, label %123

123:                                              ; preds = %121
  %124 = call fastcc zeroext i1 @_ZN5blinkL28ParseColorNumberOrPercentageIhEEbRPKT_S3_cRbbRNS_17CSSPrimitiveValue8UnitTypeERi(i8** nonnull dereferenceable(8) %5, i8* %114, i8 signext 47, i8* nonnull dereferenceable(1) %10, i1 zeroext false, i32* nonnull dereferenceable(4) %4, i32* nonnull dereferenceable(4) %8) #9
  br i1 %124, label %125, label %128

125:                                              ; preds = %123
  %126 = load i8, i8* %9, align 1, !range !2
  %127 = icmp eq i8 %126, 0
  br i1 %127, label %342, label %136

128:                                              ; preds = %123
  %129 = call fastcc zeroext i1 @_ZN5blinkL28ParseColorNumberOrPercentageIhEEbRPKT_S3_cRbbRNS_17CSSPrimitiveValue8UnitTypeERi(i8** nonnull dereferenceable(8) %5, i8* %114, i8 signext 41, i8* nonnull dereferenceable(1) %10, i1 zeroext false, i32* nonnull dereferenceable(4) %4, i32* nonnull dereferenceable(4) %8) #9
  %130 = load i8*, i8** %5, align 8
  %131 = icmp eq i8* %130, %114
  %132 = and i1 %129, %131
  br i1 %132, label %333, label %342

133:                                              ; preds = %121
  %134 = load i8, i8* %9, align 1, !range !2
  %135 = icmp eq i8 %134, 0
  br i1 %135, label %136, label %342

136:                                              ; preds = %133, %125
  %137 = load i8*, i8** %5, align 8
  %138 = icmp eq i8* %137, %114
  br i1 %138, label %151, label %139

139:                                              ; preds = %136, %144
  %140 = phi i8* [ %145, %144 ], [ %137, %136 ]
  %141 = load i8, i8* %140, align 1
  %142 = icmp ult i8 %141, 33
  br i1 %142, label %143, label %147

143:                                              ; preds = %139
  switch i8 %141, label %151 [
    i8 32, label %144
    i8 10, label %144
    i8 9, label %144
    i8 13, label %144
    i8 12, label %144
  ]

144:                                              ; preds = %143, %143, %143, %143, %143
  %145 = getelementptr inbounds i8, i8* %140, i64 1
  store i8* %145, i8** %5, align 8
  %146 = icmp eq i8* %145, %114
  br i1 %146, label %151, label %139

147:                                              ; preds = %139
  %148 = icmp eq i8 %141, 45
  br i1 %148, label %149, label %151

149:                                              ; preds = %147
  %150 = getelementptr inbounds i8, i8* %140, i64 1
  store i8* %150, i8** %5, align 8
  br label %151

151:                                              ; preds = %144, %143, %149, %147, %136
  %152 = phi i8* [ %150, %149 ], [ %140, %147 ], [ %114, %136 ], [ %140, %143 ], [ %114, %144 ]
  %153 = phi i1 [ true, %149 ], [ false, %147 ], [ false, %136 ], [ false, %143 ], [ false, %144 ]
  %154 = ptrtoint i8* %114 to i64
  %155 = ptrtoint i8* %152 to i64
  %156 = sub i64 %154, %155
  %157 = icmp ult i64 %156, 2
  br i1 %157, label %342, label %158

158:                                              ; preds = %151
  %159 = add i64 %156, -1
  %160 = getelementptr inbounds i8, i8* %152, i64 %159
  %161 = load i8, i8* %160, align 1
  %162 = icmp eq i8 %161, 41
  br i1 %162, label %163, label %342

163:                                              ; preds = %158
  %164 = add i64 %156, -2
  %165 = getelementptr inbounds i8, i8* %152, i64 %164
  %166 = load i8, i8* %165, align 1
  %167 = add i8 %166, -48
  %168 = icmp ult i8 %167, 10
  br i1 %168, label %169, label %342

169:                                              ; preds = %163
  %170 = load i8, i8* %152, align 1
  switch i8 %170, label %171 [
    i8 48, label %206
    i8 49, label %206
    i8 46, label %206
  ]

171:                                              ; preds = %169
  %172 = trunc i64 %156 to i32
  %173 = icmp slt i32 %172, 1
  br i1 %173, label %342, label %174

174:                                              ; preds = %171
  %175 = and i64 %156, 4294967295
  %176 = icmp eq i8 %170, 41
  br i1 %176, label %342, label %177

177:                                              ; preds = %174, %192
  %178 = phi i8 [ %189, %192 ], [ 0, %174 ]
  %179 = phi i64 [ %190, %192 ], [ 0, %174 ]
  %180 = phi i8 [ %194, %192 ], [ %170, %174 ]
  %181 = add i8 %180, -48
  %182 = icmp ult i8 %181, 10
  br i1 %182, label %188, label %183

183:                                              ; preds = %177
  %184 = and i8 %178, 1
  %185 = icmp eq i8 %184, 0
  %186 = icmp eq i8 %180, 46
  %187 = and i1 %185, %186
  br i1 %187, label %188, label %342

188:                                              ; preds = %183, %177
  %189 = phi i8 [ %178, %177 ], [ 1, %183 ]
  %190 = add nuw nsw i64 %179, 1
  %191 = icmp eq i64 %190, %175
  br i1 %191, label %342, label %192

192:                                              ; preds = %188
  %193 = getelementptr inbounds i8, i8* %152, i64 %190
  %194 = load i8, i8* %193, align 1
  %195 = icmp eq i8 %194, 41
  br i1 %195, label %196, label %177

196:                                              ; preds = %192
  %197 = trunc i64 %190 to i32
  %198 = and i8 %189, 1
  %199 = icmp ne i8 %198, 0
  %200 = icmp eq i32 %197, 1
  %201 = and i1 %200, %199
  %202 = icmp eq i32 %197, 0
  %203 = or i1 %202, %201
  br i1 %203, label %342, label %204

204:                                              ; preds = %196
  %205 = select i1 %153, i32 0, i32 255
  store i8* %114, i8** %5, align 8
  br label %327

206:                                              ; preds = %169, %169, %169
  %207 = icmp ne i64 %156, 2
  %208 = icmp eq i8 %170, 46
  %209 = or i1 %207, %208
  br i1 %209, label %214, label %210

210:                                              ; preds = %206
  %211 = icmp eq i8 %170, 49
  %212 = select i1 %211, i32 255, i32 0
  %213 = select i1 %153, i32 0, i32 %212
  store i8* %114, i8** %5, align 8
  br label %327

214:                                              ; preds = %206
  %215 = trunc i64 %159 to i32
  switch i32 %215, label %241 [
    i32 3, label %216
    i32 2, label %227
  ]

216:                                              ; preds = %214
  %217 = icmp eq i8 %170, 48
  br i1 %217, label %218, label %241

218:                                              ; preds = %216
  %219 = getelementptr inbounds i8, i8* %152, i64 1
  %220 = load i8, i8* %219, align 1
  %221 = icmp eq i8 %220, 46
  br i1 %221, label %222, label %241

222:                                              ; preds = %218
  %223 = getelementptr inbounds i8, i8* %152, i64 2
  %224 = load i8, i8* %223, align 1
  %225 = add i8 %224, -48
  %226 = icmp ult i8 %225, 10
  br i1 %226, label %233, label %241

227:                                              ; preds = %214
  br i1 %208, label %228, label %241

228:                                              ; preds = %227
  %229 = getelementptr inbounds i8, i8* %152, i64 1
  %230 = load i8, i8* %229, align 1
  %231 = add i8 %230, -48
  %232 = icmp ult i8 %231, 10
  br i1 %232, label %233, label %241

233:                                              ; preds = %228, %222
  br i1 %153, label %239, label %234

234:                                              ; preds = %233
  %235 = zext i8 %166 to i64
  %236 = add nsw i64 %235, -48
  %237 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZZN5blinkL15ParseAlphaValueIDsEEbRPKT_S3_cRiE17kTenthAlphaValues, i64 0, i64 %236
  %238 = load i32, i32* %237, align 4
  br label %239

239:                                              ; preds = %234, %233
  %240 = phi i32 [ %238, %234 ], [ 0, %233 ]
  store i8* %114, i8** %5, align 8
  br label %327

241:                                              ; preds = %228, %227, %222, %218, %216, %214
  %242 = trunc i64 %156 to i32
  %243 = icmp slt i32 %242, 1
  br i1 %243, label %342, label %244

244:                                              ; preds = %241
  %245 = and i64 %156, 4294967295
  br label %246

246:                                              ; preds = %261, %244
  %247 = phi i8 [ %258, %261 ], [ 0, %244 ]
  %248 = phi i64 [ %259, %261 ], [ 0, %244 ]
  %249 = phi i8 [ %263, %261 ], [ %170, %244 ]
  %250 = add i8 %249, -48
  %251 = icmp ult i8 %250, 10
  br i1 %251, label %257, label %252

252:                                              ; preds = %246
  %253 = and i8 %247, 1
  %254 = icmp eq i8 %253, 0
  %255 = icmp eq i8 %249, 46
  %256 = and i1 %254, %255
  br i1 %256, label %257, label %342

257:                                              ; preds = %252, %246
  %258 = phi i8 [ %247, %246 ], [ 1, %252 ]
  %259 = add nuw nsw i64 %248, 1
  %260 = icmp eq i64 %259, %245
  br i1 %260, label %342, label %261

261:                                              ; preds = %257
  %262 = getelementptr inbounds i8, i8* %152, i64 %259
  %263 = load i8, i8* %262, align 1
  %264 = icmp eq i8 %263, 41
  br i1 %264, label %265, label %246

265:                                              ; preds = %261
  %266 = trunc i64 %259 to i32
  %267 = and i8 %258, 1
  %268 = icmp ne i8 %267, 0
  %269 = icmp eq i32 %266, 1
  %270 = and i1 %269, %268
  %271 = icmp eq i32 %266, 0
  %272 = or i1 %271, %270
  br i1 %272, label %342, label %273

273:                                              ; preds = %265
  %274 = icmp sgt i32 %266, 0
  br i1 %274, label %275, label %295

275:                                              ; preds = %273
  %276 = and i64 %259, 4294967295
  br i1 %208, label %295, label %277

277:                                              ; preds = %275, %289
  %278 = phi i32 [ %287, %289 ], [ 0, %275 ]
  %279 = phi double [ %285, %289 ], [ 0.000000e+00, %275 ]
  %280 = phi i64 [ %286, %289 ], [ 0, %275 ]
  %281 = phi i8 [ %291, %289 ], [ %170, %275 ]
  %282 = fmul double %279, 1.000000e+01
  %283 = uitofp i8 %281 to double
  %284 = fadd double %282, %283
  %285 = fadd double %284, -4.800000e+01
  %286 = add nuw nsw i64 %280, 1
  %287 = add nuw nsw i32 %278, 1
  %288 = icmp eq i64 %286, %276
  br i1 %288, label %295, label %289

289:                                              ; preds = %277
  %290 = getelementptr inbounds i8, i8* %152, i64 %286
  %291 = load i8, i8* %290, align 1
  %292 = icmp eq i8 %291, 46
  br i1 %292, label %293, label %277

293:                                              ; preds = %289
  %294 = trunc i64 %286 to i32
  br label %295

295:                                              ; preds = %277, %293, %275, %273
  %296 = phi i32 [ 0, %273 ], [ 0, %275 ], [ %294, %293 ], [ %287, %277 ]
  %297 = phi double [ 0.000000e+00, %273 ], [ 0.000000e+00, %275 ], [ %285, %293 ], [ %285, %277 ]
  %298 = add nuw nsw i32 %296, 1
  %299 = icmp eq i32 %298, %266
  br i1 %299, label %317, label %300

300:                                              ; preds = %295
  %301 = icmp slt i32 %298, %266
  br i1 %301, label %302, label %312

302:                                              ; preds = %300
  %303 = zext i32 %296 to i64
  %304 = add nuw nsw i64 %303, 1
  %305 = add nuw nsw i64 %303, 2
  %306 = getelementptr inbounds i8, i8* %152, i64 %304
  %307 = load i8, i8* %306, align 1
  %308 = uitofp i8 %307 to double
  %309 = fadd double %308, -4.800000e+01
  %310 = trunc i64 %305 to i32
  %311 = icmp sgt i32 %266, %310
  br i1 %311, label %685, label %312

312:                                              ; preds = %302, %685, %695, %705, %715, %725, %300
  %313 = phi double [ 0.000000e+00, %300 ], [ %309, %302 ], [ %692, %685 ], [ %702, %695 ], [ %712, %705 ], [ %722, %715 ], [ %731, %725 ]
  %314 = phi double [ 1.000000e+00, %300 ], [ 1.000000e+01, %302 ], [ 1.000000e+02, %685 ], [ 1.000000e+03, %695 ], [ 1.000000e+04, %705 ], [ 1.000000e+05, %715 ], [ 1.000000e+06, %725 ]
  %315 = fdiv double %313, %314
  %316 = fadd double %297, %315
  br label %317

317:                                              ; preds = %312, %295
  %318 = phi double [ %316, %312 ], [ %297, %295 ]
  br i1 %153, label %325, label %319

319:                                              ; preds = %317
  %320 = fcmp ogt double %318, 1.000000e+00
  %321 = select i1 %320, double 1.000000e+00, double %318
  %322 = fmul double %321, 2.550000e+02
  %323 = call double @llvm.round.f64(double %322) #9
  %324 = fptosi double %323 to i32
  br label %325

325:                                              ; preds = %319, %317
  %326 = phi i32 [ %324, %319 ], [ 0, %317 ]
  store i8* %114, i8** %5, align 8
  br label %327

327:                                              ; preds = %325, %239, %210, %204
  %328 = phi i32 [ %205, %204 ], [ %326, %325 ], [ %240, %239 ], [ %213, %210 ]
  %329 = load i32, i32* %6, align 4
  %330 = load i32, i32* %7, align 4
  %331 = load i32, i32* %8, align 4
  %332 = call i32 @_ZN5blink8MakeRGBAEiiii(i32 %329, i32 %330, i32 %331, i32 %328) #9
  br label %338

333:                                              ; preds = %128
  %334 = load i32, i32* %6, align 4
  %335 = load i32, i32* %7, align 4
  %336 = load i32, i32* %8, align 4
  %337 = call i32 @_ZN5blink7MakeRGBEiii(i32 %334, i32 %335, i32 %336) #9
  br label %338

338:                                              ; preds = %333, %327
  %339 = phi i32 [ %337, %333 ], [ %332, %327 ]
  store i32 %339, i32* %19, align 4
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %10) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %9) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %117) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %116) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %115) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %111) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %68) #9
  br label %630

340:                                              ; preds = %62, %105, %82, %93, %88, %84, %102
  %341 = phi i8* [ %63, %62 ], [ %68, %102 ], [ %68, %84 ], [ %68, %88 ], [ %68, %93 ], [ %68, %82 ], [ %68, %105 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %341) #9
  br label %634

342:                                              ; preds = %252, %257, %183, %188, %109, %119, %125, %128, %133, %151, %158, %163, %171, %174, %196, %241, %265
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %10) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %9) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %117) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %116) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %115) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %111) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %68) #9
  br label %634

343:                                              ; preds = %50
  %344 = bitcast %"class.WTF::StringImpl"* %58 to i16*
  %345 = select i1 %57, i16* null, i16* %344
  br i1 %57, label %346, label %348

346:                                              ; preds = %343
  %347 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %347) #9
  store i32 0, i32* %11, align 4
  br label %627

348:                                              ; preds = %343
  %349 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 1
  %350 = load i32, i32* %349, align 4
  %351 = icmp eq i8 %51, 0
  %352 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %352) #9
  store i32 0, i32* %11, align 4
  %353 = icmp ugt i32 %350, 3
  br i1 %353, label %354, label %361

354:                                              ; preds = %348
  %355 = load i16, i16* %345, align 2
  %356 = icmp eq i16 %355, 35
  br i1 %356, label %357, label %361

357:                                              ; preds = %354
  %358 = getelementptr inbounds i16, i16* %345, i64 1
  %359 = add i32 %350, -1
  %360 = call zeroext i1 @_ZN5blink5Color13ParseHexColorEPKDsjRj(i16* %358, i32 %359, i32* nonnull dereferenceable(4) %19) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %352) #9
  br i1 %360, label %630, label %634

361:                                              ; preds = %354, %348
  br i1 %351, label %366, label %362

362:                                              ; preds = %361
  switch i32 %350, label %366 [
    i32 6, label %363
    i32 3, label %363
  ]

363:                                              ; preds = %362, %362
  %364 = call zeroext i1 @_ZN5blink5Color13ParseHexColorEPKDsjRj(i16* %345, i32 %350, i32* nonnull dereferenceable(4) %19) #9
  br i1 %364, label %365, label %366

365:                                              ; preds = %363
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %352) #9
  br label %630

366:                                              ; preds = %363, %362, %361
  %367 = icmp ult i32 %350, 5
  br i1 %367, label %627, label %368

368:                                              ; preds = %366
  %369 = load i16, i16* %345, align 2
  %370 = or i16 %369, 32
  %371 = icmp eq i16 %370, 114
  br i1 %371, label %372, label %627

372:                                              ; preds = %368
  %373 = getelementptr inbounds i16, i16* %345, i64 1
  %374 = load i16, i16* %373, align 2
  %375 = or i16 %374, 32
  %376 = icmp eq i16 %375, 103
  br i1 %376, label %377, label %627

377:                                              ; preds = %372
  %378 = getelementptr inbounds i16, i16* %345, i64 2
  %379 = load i16, i16* %378, align 2
  %380 = or i16 %379, 32
  %381 = icmp eq i16 %380, 98
  br i1 %381, label %382, label %627

382:                                              ; preds = %377
  %383 = getelementptr inbounds i16, i16* %345, i64 3
  %384 = load i16, i16* %383, align 2
  %385 = icmp eq i16 %384, 40
  br i1 %385, label %393, label %386

386:                                              ; preds = %382
  %387 = or i16 %384, 32
  %388 = icmp eq i16 %387, 97
  br i1 %388, label %389, label %627

389:                                              ; preds = %386
  %390 = getelementptr inbounds i16, i16* %345, i64 4
  %391 = load i16, i16* %390, align 2
  %392 = icmp eq i16 %391, 40
  br i1 %392, label %393, label %627

393:                                              ; preds = %389, %382
  %394 = phi i64 [ 4, %382 ], [ 5, %389 ]
  %395 = bitcast i16** %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %395) #9
  %396 = getelementptr inbounds i16, i16* %345, i64 %394
  store i16* %396, i16** %12, align 8
  %397 = zext i32 %350 to i64
  %398 = getelementptr inbounds i16, i16* %345, i64 %397
  %399 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %399) #9
  store i32 -1431655766, i32* %13, align 4
  %400 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %400) #9
  store i32 -1431655766, i32* %14, align 4
  %401 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %401) #9
  store i32 -1431655766, i32* %15, align 4
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %16) #9
  store i8 1, i8* %16, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %17) #9
  store i8 0, i8* %17, align 1
  %402 = call fastcc zeroext i1 @_ZN5blinkL28ParseColorNumberOrPercentageIDsEEbRPKT_S3_cRbbRNS_17CSSPrimitiveValue8UnitTypeERi(i16** nonnull dereferenceable(8) %12, i16* %398, i8 signext 44, i8* nonnull dereferenceable(1) %16, i1 zeroext true, i32* nonnull dereferenceable(4) %11, i32* nonnull dereferenceable(4) %13) #9
  br i1 %402, label %403, label %629

403:                                              ; preds = %393
  %404 = call fastcc zeroext i1 @_ZN5blinkL28ParseColorNumberOrPercentageIDsEEbRPKT_S3_cRbbRNS_17CSSPrimitiveValue8UnitTypeERi(i16** nonnull dereferenceable(8) %12, i16* %398, i8 signext 44, i8* nonnull dereferenceable(1) %16, i1 zeroext false, i32* nonnull dereferenceable(4) %11, i32* nonnull dereferenceable(4) %14) #9
  br i1 %404, label %405, label %629

405:                                              ; preds = %403
  %406 = call fastcc zeroext i1 @_ZN5blinkL28ParseColorNumberOrPercentageIDsEEbRPKT_S3_cRbbRNS_17CSSPrimitiveValue8UnitTypeERi(i16** nonnull dereferenceable(8) %12, i16* %398, i8 signext 44, i8* nonnull dereferenceable(1) %17, i1 zeroext false, i32* nonnull dereferenceable(4) %11, i32* nonnull dereferenceable(4) %15) #9
  br i1 %406, label %417, label %407

407:                                              ; preds = %405
  %408 = call fastcc zeroext i1 @_ZN5blinkL28ParseColorNumberOrPercentageIDsEEbRPKT_S3_cRbbRNS_17CSSPrimitiveValue8UnitTypeERi(i16** nonnull dereferenceable(8) %12, i16* %398, i8 signext 47, i8* nonnull dereferenceable(1) %17, i1 zeroext false, i32* nonnull dereferenceable(4) %11, i32* nonnull dereferenceable(4) %15) #9
  br i1 %408, label %409, label %412

409:                                              ; preds = %407
  %410 = load i8, i8* %16, align 1, !range !2
  %411 = icmp eq i8 %410, 0
  br i1 %411, label %629, label %420

412:                                              ; preds = %407
  %413 = call fastcc zeroext i1 @_ZN5blinkL28ParseColorNumberOrPercentageIDsEEbRPKT_S3_cRbbRNS_17CSSPrimitiveValue8UnitTypeERi(i16** nonnull dereferenceable(8) %12, i16* %398, i8 signext 41, i8* nonnull dereferenceable(1) %17, i1 zeroext false, i32* nonnull dereferenceable(4) %11, i32* nonnull dereferenceable(4) %15) #9
  %414 = load i16*, i16** %12, align 8
  %415 = icmp eq i16* %414, %398
  %416 = and i1 %413, %415
  br i1 %416, label %620, label %629

417:                                              ; preds = %405
  %418 = load i8, i8* %16, align 1, !range !2
  %419 = icmp eq i8 %418, 0
  br i1 %419, label %420, label %629

420:                                              ; preds = %417, %409
  %421 = load i16*, i16** %12, align 8
  %422 = icmp eq i16* %421, %398
  br i1 %422, label %435, label %423

423:                                              ; preds = %420, %428
  %424 = phi i16* [ %429, %428 ], [ %421, %420 ]
  %425 = load i16, i16* %424, align 2
  %426 = icmp ult i16 %425, 33
  br i1 %426, label %427, label %431

427:                                              ; preds = %423
  switch i16 %425, label %435 [
    i16 32, label %428
    i16 10, label %428
    i16 9, label %428
    i16 13, label %428
    i16 12, label %428
  ]

428:                                              ; preds = %427, %427, %427, %427, %427
  %429 = getelementptr inbounds i16, i16* %424, i64 1
  store i16* %429, i16** %12, align 8
  %430 = icmp eq i16* %429, %398
  br i1 %430, label %435, label %423

431:                                              ; preds = %423
  %432 = icmp eq i16 %425, 45
  br i1 %432, label %433, label %435

433:                                              ; preds = %431
  %434 = getelementptr inbounds i16, i16* %424, i64 1
  store i16* %434, i16** %12, align 8
  br label %435

435:                                              ; preds = %428, %427, %433, %431, %420
  %436 = phi i16* [ %434, %433 ], [ %424, %431 ], [ %398, %420 ], [ %424, %427 ], [ %398, %428 ]
  %437 = phi i1 [ true, %433 ], [ false, %431 ], [ false, %420 ], [ false, %427 ], [ false, %428 ]
  %438 = ptrtoint i16* %398 to i64
  %439 = ptrtoint i16* %436 to i64
  %440 = sub i64 %438, %439
  %441 = ashr exact i64 %440, 1
  %442 = icmp ult i64 %441, 2
  br i1 %442, label %629, label %443

443:                                              ; preds = %435
  %444 = add nsw i64 %441, -1
  %445 = getelementptr inbounds i16, i16* %436, i64 %444
  %446 = load i16, i16* %445, align 2
  %447 = icmp eq i16 %446, 41
  br i1 %447, label %448, label %629

448:                                              ; preds = %443
  %449 = add nsw i64 %441, -2
  %450 = getelementptr inbounds i16, i16* %436, i64 %449
  %451 = load i16, i16* %450, align 2
  %452 = add i16 %451, -48
  %453 = icmp ult i16 %452, 10
  br i1 %453, label %454, label %629

454:                                              ; preds = %448
  %455 = load i16, i16* %436, align 2
  switch i16 %455, label %456 [
    i16 48, label %492
    i16 49, label %492
    i16 46, label %492
  ]

456:                                              ; preds = %454
  %457 = lshr exact i64 %440, 1
  %458 = trunc i64 %457 to i32
  %459 = icmp slt i32 %458, 1
  br i1 %459, label %629, label %460

460:                                              ; preds = %456
  %461 = and i64 %457, 4294967295
  %462 = icmp eq i16 %455, 41
  br i1 %462, label %629, label %463

463:                                              ; preds = %460, %478
  %464 = phi i8 [ %475, %478 ], [ 0, %460 ]
  %465 = phi i64 [ %476, %478 ], [ 0, %460 ]
  %466 = phi i16 [ %480, %478 ], [ %455, %460 ]
  %467 = add i16 %466, -48
  %468 = icmp ult i16 %467, 10
  br i1 %468, label %474, label %469

469:                                              ; preds = %463
  %470 = and i8 %464, 1
  %471 = icmp eq i8 %470, 0
  %472 = icmp eq i16 %466, 46
  %473 = and i1 %471, %472
  br i1 %473, label %474, label %629

474:                                              ; preds = %469, %463
  %475 = phi i8 [ %464, %463 ], [ 1, %469 ]
  %476 = add nuw nsw i64 %465, 1
  %477 = icmp eq i64 %476, %461
  br i1 %477, label %629, label %478

478:                                              ; preds = %474
  %479 = getelementptr inbounds i16, i16* %436, i64 %476
  %480 = load i16, i16* %479, align 2
  %481 = icmp eq i16 %480, 41
  br i1 %481, label %482, label %463

482:                                              ; preds = %478
  %483 = trunc i64 %476 to i32
  %484 = and i8 %475, 1
  %485 = icmp ne i8 %484, 0
  %486 = icmp eq i32 %483, 1
  %487 = and i1 %486, %485
  %488 = icmp eq i32 %483, 0
  %489 = or i1 %488, %487
  br i1 %489, label %629, label %490

490:                                              ; preds = %482
  %491 = select i1 %437, i32 0, i32 255
  store i16* %398, i16** %12, align 8
  br label %614

492:                                              ; preds = %454, %454, %454
  %493 = icmp ne i64 %440, 4
  %494 = icmp eq i16 %455, 46
  %495 = or i1 %493, %494
  br i1 %495, label %500, label %496

496:                                              ; preds = %492
  %497 = icmp eq i16 %455, 49
  %498 = select i1 %497, i32 255, i32 0
  %499 = select i1 %437, i32 0, i32 %498
  store i16* %398, i16** %12, align 8
  br label %614

500:                                              ; preds = %492
  %501 = trunc i64 %444 to i32
  switch i32 %501, label %527 [
    i32 3, label %502
    i32 2, label %513
  ]

502:                                              ; preds = %500
  %503 = icmp eq i16 %455, 48
  br i1 %503, label %504, label %527

504:                                              ; preds = %502
  %505 = getelementptr inbounds i16, i16* %436, i64 1
  %506 = load i16, i16* %505, align 2
  %507 = icmp eq i16 %506, 46
  br i1 %507, label %508, label %527

508:                                              ; preds = %504
  %509 = getelementptr inbounds i16, i16* %436, i64 2
  %510 = load i16, i16* %509, align 2
  %511 = add i16 %510, -48
  %512 = icmp ult i16 %511, 10
  br i1 %512, label %519, label %527

513:                                              ; preds = %500
  br i1 %494, label %514, label %527

514:                                              ; preds = %513
  %515 = getelementptr inbounds i16, i16* %436, i64 1
  %516 = load i16, i16* %515, align 2
  %517 = add i16 %516, -48
  %518 = icmp ult i16 %517, 10
  br i1 %518, label %519, label %527

519:                                              ; preds = %514, %508
  br i1 %437, label %525, label %520

520:                                              ; preds = %519
  %521 = zext i16 %451 to i64
  %522 = add nsw i64 %521, -48
  %523 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZZN5blinkL15ParseAlphaValueIDsEEbRPKT_S3_cRiE17kTenthAlphaValues, i64 0, i64 %522
  %524 = load i32, i32* %523, align 4
  br label %525

525:                                              ; preds = %520, %519
  %526 = phi i32 [ %524, %520 ], [ 0, %519 ]
  store i16* %398, i16** %12, align 8
  br label %614

527:                                              ; preds = %514, %513, %508, %504, %502, %500
  %528 = lshr exact i64 %440, 1
  %529 = trunc i64 %528 to i32
  %530 = icmp slt i32 %529, 1
  br i1 %530, label %629, label %531

531:                                              ; preds = %527
  %532 = and i64 %528, 4294967295
  br label %533

533:                                              ; preds = %548, %531
  %534 = phi i8 [ %545, %548 ], [ 0, %531 ]
  %535 = phi i64 [ %546, %548 ], [ 0, %531 ]
  %536 = phi i16 [ %550, %548 ], [ %455, %531 ]
  %537 = add i16 %536, -48
  %538 = icmp ult i16 %537, 10
  br i1 %538, label %544, label %539

539:                                              ; preds = %533
  %540 = and i8 %534, 1
  %541 = icmp eq i8 %540, 0
  %542 = icmp eq i16 %536, 46
  %543 = and i1 %541, %542
  br i1 %543, label %544, label %629

544:                                              ; preds = %539, %533
  %545 = phi i8 [ %534, %533 ], [ 1, %539 ]
  %546 = add nuw nsw i64 %535, 1
  %547 = icmp eq i64 %546, %532
  br i1 %547, label %629, label %548

548:                                              ; preds = %544
  %549 = getelementptr inbounds i16, i16* %436, i64 %546
  %550 = load i16, i16* %549, align 2
  %551 = icmp eq i16 %550, 41
  br i1 %551, label %552, label %533

552:                                              ; preds = %548
  %553 = trunc i64 %546 to i32
  %554 = and i8 %545, 1
  %555 = icmp ne i8 %554, 0
  %556 = icmp eq i32 %553, 1
  %557 = and i1 %556, %555
  %558 = icmp eq i32 %553, 0
  %559 = or i1 %558, %557
  br i1 %559, label %629, label %560

560:                                              ; preds = %552
  %561 = icmp sgt i32 %553, 0
  br i1 %561, label %562, label %582

562:                                              ; preds = %560
  %563 = and i64 %546, 4294967295
  br i1 %494, label %582, label %564

564:                                              ; preds = %562, %576
  %565 = phi i32 [ %574, %576 ], [ 0, %562 ]
  %566 = phi double [ %572, %576 ], [ 0.000000e+00, %562 ]
  %567 = phi i64 [ %573, %576 ], [ 0, %562 ]
  %568 = phi i16 [ %578, %576 ], [ %455, %562 ]
  %569 = fmul double %566, 1.000000e+01
  %570 = uitofp i16 %568 to double
  %571 = fadd double %569, %570
  %572 = fadd double %571, -4.800000e+01
  %573 = add nuw nsw i64 %567, 1
  %574 = add nuw nsw i32 %565, 1
  %575 = icmp eq i64 %573, %563
  br i1 %575, label %582, label %576

576:                                              ; preds = %564
  %577 = getelementptr inbounds i16, i16* %436, i64 %573
  %578 = load i16, i16* %577, align 2
  %579 = icmp eq i16 %578, 46
  br i1 %579, label %580, label %564

580:                                              ; preds = %576
  %581 = trunc i64 %573 to i32
  br label %582

582:                                              ; preds = %564, %580, %562, %560
  %583 = phi i32 [ 0, %560 ], [ 0, %562 ], [ %581, %580 ], [ %574, %564 ]
  %584 = phi double [ 0.000000e+00, %560 ], [ 0.000000e+00, %562 ], [ %572, %580 ], [ %572, %564 ]
  %585 = add nuw nsw i32 %583, 1
  %586 = icmp eq i32 %585, %553
  br i1 %586, label %604, label %587

587:                                              ; preds = %582
  %588 = icmp slt i32 %585, %553
  br i1 %588, label %589, label %599

589:                                              ; preds = %587
  %590 = zext i32 %583 to i64
  %591 = add nuw nsw i64 %590, 1
  %592 = add nuw nsw i64 %590, 2
  %593 = getelementptr inbounds i16, i16* %436, i64 %591
  %594 = load i16, i16* %593, align 2
  %595 = uitofp i16 %594 to double
  %596 = fadd double %595, -4.800000e+01
  %597 = trunc i64 %592 to i32
  %598 = icmp sgt i32 %553, %597
  br i1 %598, label %638, label %599

599:                                              ; preds = %589, %638, %648, %658, %668, %678, %587
  %600 = phi double [ 0.000000e+00, %587 ], [ %596, %589 ], [ %645, %638 ], [ %655, %648 ], [ %665, %658 ], [ %675, %668 ], [ %684, %678 ]
  %601 = phi double [ 1.000000e+00, %587 ], [ 1.000000e+01, %589 ], [ 1.000000e+02, %638 ], [ 1.000000e+03, %648 ], [ 1.000000e+04, %658 ], [ 1.000000e+05, %668 ], [ 1.000000e+06, %678 ]
  %602 = fdiv double %600, %601
  %603 = fadd double %584, %602
  br label %604

604:                                              ; preds = %599, %582
  %605 = phi double [ %603, %599 ], [ %584, %582 ]
  br i1 %437, label %612, label %606

606:                                              ; preds = %604
  %607 = fcmp ogt double %605, 1.000000e+00
  %608 = select i1 %607, double 1.000000e+00, double %605
  %609 = fmul double %608, 2.550000e+02
  %610 = call double @llvm.round.f64(double %609) #9
  %611 = fptosi double %610 to i32
  br label %612

612:                                              ; preds = %606, %604
  %613 = phi i32 [ %611, %606 ], [ 0, %604 ]
  store i16* %398, i16** %12, align 8
  br label %614

614:                                              ; preds = %612, %525, %496, %490
  %615 = phi i32 [ %491, %490 ], [ %613, %612 ], [ %526, %525 ], [ %499, %496 ]
  %616 = load i32, i32* %13, align 4
  %617 = load i32, i32* %14, align 4
  %618 = load i32, i32* %15, align 4
  %619 = call i32 @_ZN5blink8MakeRGBAEiiii(i32 %616, i32 %617, i32 %618, i32 %615) #9
  br label %625

620:                                              ; preds = %412
  %621 = load i32, i32* %13, align 4
  %622 = load i32, i32* %14, align 4
  %623 = load i32, i32* %15, align 4
  %624 = call i32 @_ZN5blink7MakeRGBEiii(i32 %621, i32 %622, i32 %623) #9
  br label %625

625:                                              ; preds = %620, %614
  %626 = phi i32 [ %624, %620 ], [ %619, %614 ]
  store i32 %626, i32* %19, align 4
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %17) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %16) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %401) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %400) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %399) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %395) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %352) #9
  br label %630

627:                                              ; preds = %346, %389, %366, %377, %372, %368, %386
  %628 = phi i8* [ %352, %386 ], [ %352, %368 ], [ %352, %372 ], [ %352, %377 ], [ %352, %366 ], [ %352, %389 ], [ %347, %346 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %628) #9
  br label %634

629:                                              ; preds = %539, %544, %469, %474, %393, %403, %409, %412, %417, %435, %443, %448, %456, %460, %482, %527, %552
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %17) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %16) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %401) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %400) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %399) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %395) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %352) #9
  br label %634

630:                                              ; preds = %625, %338, %73, %81, %357, %365
  %631 = load i32, i32* %19, align 4
  %632 = call %"class.blink::cssvalue::CSSColor"* @_ZN5blink8cssvalue8CSSColor6CreateEj(i32 %631) #9
  %633 = getelementptr inbounds %"class.blink::cssvalue::CSSColor", %"class.blink::cssvalue::CSSColor"* %632, i64 0, i32 0
  br label %634

634:                                              ; preds = %629, %342, %73, %340, %357, %627, %630
  %635 = phi %"class.blink::CSSValue"* [ %633, %630 ], [ null, %629 ], [ null, %342 ], [ null, %627 ], [ null, %357 ], [ null, %340 ], [ null, %73 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %46) #9
  br label %636

636:                                              ; preds = %3, %42, %634, %40
  %637 = phi %"class.blink::CSSValue"* [ %44, %42 ], [ %635, %634 ], [ null, %40 ], [ null, %3 ]
  ret %"class.blink::CSSValue"* %637

638:                                              ; preds = %589
  %639 = fmul double %596, 1.000000e+01
  %640 = add nuw nsw i64 %590, 3
  %641 = getelementptr inbounds i16, i16* %436, i64 %592
  %642 = load i16, i16* %641, align 2
  %643 = uitofp i16 %642 to double
  %644 = fadd double %639, %643
  %645 = fadd double %644, -4.800000e+01
  %646 = trunc i64 %640 to i32
  %647 = icmp sgt i32 %553, %646
  br i1 %647, label %648, label %599

648:                                              ; preds = %638
  %649 = fmul double %645, 1.000000e+01
  %650 = add nuw nsw i64 %590, 4
  %651 = getelementptr inbounds i16, i16* %436, i64 %640
  %652 = load i16, i16* %651, align 2
  %653 = uitofp i16 %652 to double
  %654 = fadd double %649, %653
  %655 = fadd double %654, -4.800000e+01
  %656 = trunc i64 %650 to i32
  %657 = icmp sgt i32 %553, %656
  br i1 %657, label %658, label %599

658:                                              ; preds = %648
  %659 = fmul double %655, 1.000000e+01
  %660 = add nuw nsw i64 %590, 5
  %661 = getelementptr inbounds i16, i16* %436, i64 %650
  %662 = load i16, i16* %661, align 2
  %663 = uitofp i16 %662 to double
  %664 = fadd double %659, %663
  %665 = fadd double %664, -4.800000e+01
  %666 = trunc i64 %660 to i32
  %667 = icmp sgt i32 %553, %666
  br i1 %667, label %668, label %599

668:                                              ; preds = %658
  %669 = fmul double %665, 1.000000e+01
  %670 = add nuw nsw i64 %590, 6
  %671 = getelementptr inbounds i16, i16* %436, i64 %660
  %672 = load i16, i16* %671, align 2
  %673 = uitofp i16 %672 to double
  %674 = fadd double %669, %673
  %675 = fadd double %674, -4.800000e+01
  %676 = trunc i64 %670 to i32
  %677 = icmp sgt i32 %553, %676
  br i1 %677, label %678, label %599

678:                                              ; preds = %668
  %679 = fmul double %675, 1.000000e+01
  %680 = getelementptr inbounds i16, i16* %436, i64 %670
  %681 = load i16, i16* %680, align 2
  %682 = uitofp i16 %681 to double
  %683 = fadd double %679, %682
  %684 = fadd double %683, -4.800000e+01
  br label %599

685:                                              ; preds = %302
  %686 = fmul double %309, 1.000000e+01
  %687 = add nuw nsw i64 %303, 3
  %688 = getelementptr inbounds i8, i8* %152, i64 %305
  %689 = load i8, i8* %688, align 1
  %690 = uitofp i8 %689 to double
  %691 = fadd double %686, %690
  %692 = fadd double %691, -4.800000e+01
  %693 = trunc i64 %687 to i32
  %694 = icmp sgt i32 %266, %693
  br i1 %694, label %695, label %312

695:                                              ; preds = %685
  %696 = fmul double %692, 1.000000e+01
  %697 = add nuw nsw i64 %303, 4
  %698 = getelementptr inbounds i8, i8* %152, i64 %687
  %699 = load i8, i8* %698, align 1
  %700 = uitofp i8 %699 to double
  %701 = fadd double %696, %700
  %702 = fadd double %701, -4.800000e+01
  %703 = trunc i64 %697 to i32
  %704 = icmp sgt i32 %266, %703
  br i1 %704, label %705, label %312

705:                                              ; preds = %695
  %706 = fmul double %702, 1.000000e+01
  %707 = add nuw nsw i64 %303, 5
  %708 = getelementptr inbounds i8, i8* %152, i64 %697
  %709 = load i8, i8* %708, align 1
  %710 = uitofp i8 %709 to double
  %711 = fadd double %706, %710
  %712 = fadd double %711, -4.800000e+01
  %713 = trunc i64 %707 to i32
  %714 = icmp sgt i32 %266, %713
  br i1 %714, label %715, label %312

715:                                              ; preds = %705
  %716 = fmul double %712, 1.000000e+01
  %717 = add nuw nsw i64 %303, 6
  %718 = getelementptr inbounds i8, i8* %152, i64 %707
  %719 = load i8, i8* %718, align 1
  %720 = uitofp i8 %719 to double
  %721 = fadd double %716, %720
  %722 = fadd double %721, -4.800000e+01
  %723 = trunc i64 %717 to i32
  %724 = icmp sgt i32 %266, %723
  br i1 %724, label %725, label %312

725:                                              ; preds = %715
  %726 = fmul double %722, 1.000000e+01
  %727 = getelementptr inbounds i8, i8* %152, i64 %717
  %728 = load i8, i8* %727, align 1
  %729 = uitofp i8 %728 to double
  %730 = fadd double %726, %729
  %731 = fadd double %730, -4.800000e+01
  br label %312
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink18CSSParserFastPaths30IsValidKeywordPropertyAndValueENS_13CSSPropertyIDENS_10CSSValueIDENS_13CSSParserModeE(i32, i32, i8 zeroext) local_unnamed_addr #0 align 2 {
  %4 = icmp eq i32 %1, 0
  br i1 %4, label %336, label %5

5:                                                ; preds = %3
  %6 = tail call zeroext i1 @_ZN5blink20isValueAllowedInModeENS_10CSSValueIDENS_13CSSParserModeE(i32 %1, i8 zeroext %2) #9
  br i1 %6, label %7, label %336

7:                                                ; preds = %5
  switch i32 %0, label %336 [
    i32 33, label %8
    i32 254, label %327
    i32 57, label %12
    i32 58, label %12
    i32 73, label %16
    i32 98, label %20
    i32 91, label %20
    i32 71, label %20
    i32 88, label %20
    i32 63, label %20
    i32 66, label %20
    i32 82, label %20
    i32 85, label %20
    i32 121, label %20
    i32 102, label %23
    i32 106, label %27
    i32 107, label %29
    i32 109, label %32
    i32 112, label %39
    i32 144, label %39
    i32 113, label %42
    i32 114, label %42
    i32 115, label %44
    i32 3, label %46
    i32 138, label %49
    i32 139, label %56
    i32 151, label %60
    i32 18, label %70
    i32 168, label %74
    i32 202, label %76
    i32 214, label %80
    i32 228, label %83
    i32 230, label %86
    i32 231, label %90
    i32 244, label %94
    i32 258, label %96
    i32 260, label %100
    i32 264, label %102
    i32 261, label %104
    i32 263, label %104
    i32 265, label %104
    i32 266, label %104
    i32 103, label %110
    i32 104, label %110
    i32 105, label %112
    i32 281, label %114
    i32 285, label %119
    i32 286, label %123
    i32 291, label %125
    i32 299, label %134
    i32 325, label %138
    i32 329, label %140
    i32 339, label %142
    i32 338, label %144
    i32 348, label %146
    i32 349, label %150
    i32 350, label %156
    i32 351, label %158
    i32 352, label %160
    i32 356, label %164
    i32 355, label %166
    i32 359, label %170
    i32 20, label %172
    i32 24, label %175
    i32 360, label %178
    i32 21, label %181
    i32 363, label %183
    i32 378, label %201
    i32 382, label %203
    i32 385, label %207
    i32 386, label %209
    i32 44, label %214
    i32 48, label %221
    i32 242, label %225
    i32 390, label %227
    i32 391, label %229
    i32 392, label %232
    i32 395, label %236
    i32 396, label %239
    i32 118, label %241
    i32 30, label %245
    i32 31, label %247
    i32 32, label %249
    i32 147, label %251
    i32 150, label %254
    i32 166, label %257
    i32 203, label %259
    i32 6, label %261
    i32 7, label %263
    i32 22, label %267
    i32 209, label %269
    i32 400, label %271
    i32 418, label %273
    i32 419, label %276
    i32 420, label %279
    i32 295, label %282
    i32 422, label %285
    i32 428, label %289
    i32 370, label %294
    i32 372, label %297
    i32 434, label %300
    i32 435, label %302
    i32 380, label %307
    i32 25, label %309
    i32 26, label %312
    i32 436, label %315
    i32 440, label %317
    i32 321, label %319
    i32 318, label %321
    i32 268, label %325
    i32 267, label %325
    i32 269, label %325
    i32 270, label %325
  ]

8:                                                ; preds = %7
  switch i32 %1, label %9 [
    i32 707, label %336
    i32 676, label %336
    i32 405, label %336
    i32 297, label %336
    i32 296, label %336
  ]

9:                                                ; preds = %8
  %10 = add i32 %1, -718
  %11 = icmp ult i32 %10, 7
  br label %336

12:                                               ; preds = %7, %7
  %13 = icmp eq i32 %1, 280
  %14 = icmp eq i32 %1, 283
  %15 = or i1 %13, %14
  br label %336

16:                                               ; preds = %7
  %17 = icmp eq i32 %1, 450
  %18 = icmp eq i32 %1, 496
  %19 = or i1 %17, %18
  br label %336

20:                                               ; preds = %7, %7, %7, %7, %7, %7, %7, %7, %7
  %21 = add i32 %1, -3
  %22 = icmp ult i32 %21, 10
  br label %336

23:                                               ; preds = %7
  %24 = icmp eq i32 %1, 579
  %25 = icmp eq i32 %1, 581
  %26 = or i1 %24, %25
  br label %336

27:                                               ; preds = %7
  switch i32 %1, label %28 [
    i32 728, label %336
    i32 405, label %336
    i32 498, label %336
  ]

28:                                               ; preds = %27
  br label %336

29:                                               ; preds = %7
  %30 = or i32 %1, 1
  %31 = icmp eq i32 %30, 303
  br label %336

32:                                               ; preds = %7
  switch i32 %1, label %33 [
    i32 463, label %336
    i32 307, label %336
    i32 306, label %336
    i32 3, label %336
  ]

33:                                               ; preds = %32
  %34 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase23is_css_logical_enabled_E, align 1, !range !2
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %336, label %36

36:                                               ; preds = %33
  %37 = or i32 %1, 1
  %38 = icmp eq i32 %37, 309
  br label %336

39:                                               ; preds = %7, %7
  %40 = add i32 %1, -673
  %41 = icmp ult i32 %40, 2
  br label %336

42:                                               ; preds = %7, %7
  switch i32 %1, label %43 [
    i32 713, label %336
    i32 405, label %336
    i32 714, label %336
  ]

43:                                               ; preds = %42
  br label %336

44:                                               ; preds = %7
  switch i32 %1, label %45 [
    i32 630, label %336
    i32 405, label %336
    i32 667, label %336
  ]

45:                                               ; preds = %44
  br label %336

46:                                               ; preds = %7
  %47 = add i32 %1, -443
  %48 = icmp ult i32 %47, 2
  br label %336

49:                                               ; preds = %7
  switch i32 %1, label %50 [
    i32 707, label %336
    i32 676, label %336
    i32 405, label %336
    i32 297, label %336
  ]

50:                                               ; preds = %49
  %51 = add i32 %1, -725
  %52 = icmp ult i32 %51, 3
  br i1 %52, label %336, label %53

53:                                               ; preds = %50
  %54 = add i32 %1, -720
  %55 = icmp ult i32 %54, 5
  br label %336

56:                                               ; preds = %7
  %57 = icmp eq i32 %1, 497
  %58 = icmp eq i32 %1, 469
  %59 = or i1 %57, %58
  br label %336

60:                                               ; preds = %7
  %61 = or i32 %1, 1
  %62 = icmp eq i32 %61, 307
  br i1 %62, label %336, label %63

63:                                               ; preds = %60
  %64 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase23is_css_logical_enabled_E, align 1, !range !2
  %65 = icmp ne i8 %64, 0
  %66 = icmp eq i32 %61, 309
  %67 = and i1 %66, %65
  %68 = icmp eq i32 %1, 3
  %69 = or i1 %68, %67
  ret i1 %69

70:                                               ; preds = %7
  %71 = icmp eq i32 %1, 3
  %72 = icmp eq i32 %1, 405
  %73 = or i1 %71, %72
  br label %336

74:                                               ; preds = %7
  switch i32 %1, label %75 [
    i32 669, label %336
    i32 405, label %336
    i32 668, label %336
  ]

75:                                               ; preds = %74
  br label %336

76:                                               ; preds = %7
  %77 = icmp eq i32 %1, 405
  %78 = icmp eq i32 %1, 470
  %79 = or i1 %77, %78
  br label %336

80:                                               ; preds = %7
  %81 = add i32 %1, -319
  %82 = icmp ult i32 %81, 2
  br label %336

83:                                               ; preds = %7
  %84 = add i32 %1, -711
  %85 = icmp ult i32 %84, 2
  br label %336

86:                                               ; preds = %7
  %87 = icmp eq i32 %1, 56
  %88 = icmp eq i32 %1, 504
  %89 = or i1 %87, %88
  br label %336

90:                                               ; preds = %7
  %91 = icmp eq i32 %1, 56
  %92 = icmp eq i32 %1, 504
  %93 = or i1 %91, %92
  br label %336

94:                                               ; preds = %7
  switch i32 %1, label %95 [
    i32 621, label %336
    i32 586, label %336
    i32 585, label %336
    i32 3, label %336
    i32 700, label %336
  ]

95:                                               ; preds = %94
  br label %336

96:                                               ; preds = %7
  switch i32 %1, label %97 [
    i32 405, label %336
    i32 3, label %336
  ]

97:                                               ; preds = %96
  %98 = add i32 %1, -5
  %99 = icmp ult i32 %98, 8
  br label %336

100:                                              ; preds = %7
  switch i32 %1, label %101 [
    i32 449, label %336
    i32 3, label %336
    i32 405, label %336
  ]

101:                                              ; preds = %100
  br label %336

102:                                              ; preds = %7
  switch i32 %1, label %103 [
    i32 546, label %336
    i32 56, label %336
    i32 551, label %336
  ]

103:                                              ; preds = %102
  br label %336

104:                                              ; preds = %7, %7, %7, %7
  switch i32 %1, label %105 [
    i32 495, label %336
    i32 488, label %336
    i32 449, label %336
    i32 405, label %336
    i32 4, label %336
  ]

105:                                              ; preds = %104
  %106 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase25is_overflow_clip_enabled_E, align 1, !range !2
  %107 = icmp ne i8 %106, 0
  %108 = icmp eq i32 %1, 541
  %109 = and i1 %108, %107
  br label %336

110:                                              ; preds = %7, %7
  switch i32 %1, label %111 [
    i32 840, label %336
    i32 839, label %336
    i32 838, label %336
    i32 837, label %336
    i32 836, label %336
    i32 457, label %336
    i32 405, label %336
    i32 307, label %336
    i32 306, label %336
    i32 524, label %336
  ]

111:                                              ; preds = %110
  br label %336

112:                                              ; preds = %7
  switch i32 %1, label %113 [
    i32 836, label %336
    i32 457, label %336
    i32 405, label %336
    i32 840, label %336
  ]

113:                                              ; preds = %112
  br label %336

114:                                              ; preds = %7
  %115 = or i32 %1, 8
  %116 = icmp eq i32 %115, 671
  %117 = icmp eq i32 %1, 672
  %118 = or i1 %117, %116
  br label %336

119:                                              ; preds = %7
  switch i32 %1, label %120 [
    i32 449, label %336
    i32 405, label %336
    i32 24, label %336
    i32 3, label %336
  ]

120:                                              ; preds = %119
  %121 = add i32 %1, -617
  %122 = icmp ult i32 %121, 7
  br label %336

123:                                              ; preds = %7
  switch i32 %1, label %124 [
    i32 498, label %336
    i32 494, label %336
    i32 467, label %336
    i32 455, label %336
    i32 681, label %336
  ]

124:                                              ; preds = %123
  br label %336

125:                                              ; preds = %7
  switch i32 %1, label %126 [
    i32 512, label %336
    i32 511, label %336
    i32 463, label %336
    i32 3, label %336
  ]

126:                                              ; preds = %125
  %127 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase23is_css_logical_enabled_E, align 1, !range !2
  %128 = icmp ne i8 %127, 0
  %129 = or i32 %1, 1
  %130 = icmp eq i32 %129, 379
  %131 = and i1 %130, %128
  %132 = icmp eq i32 %1, 405
  %133 = or i1 %132, %131
  br label %336

134:                                              ; preds = %7
  %135 = icmp eq i32 %1, 405
  %136 = icmp eq i32 %1, 746
  %137 = or i1 %135, %136
  br label %336

138:                                              ; preds = %7
  switch i32 %1, label %139 [
    i32 633, label %336
    i32 630, label %336
    i32 405, label %336
    i32 632, label %336
  ]

139:                                              ; preds = %138
  br label %336

140:                                              ; preds = %7
  switch i32 %1, label %141 [
    i32 626, label %336
    i32 625, label %336
    i32 624, label %336
    i32 56, label %336
    i32 3, label %336
    i32 627, label %336
  ]

141:                                              ; preds = %140
  br label %336

142:                                              ; preds = %7
  switch i32 %1, label %143 [
    i32 716, label %336
    i32 577, label %336
    i32 717, label %336
  ]

143:                                              ; preds = %142
  br label %336

144:                                              ; preds = %7
  switch i32 %1, label %145 [
    i32 715, label %336
    i32 577, label %336
    i32 323, label %336
  ]

145:                                              ; preds = %144
  br label %336

146:                                              ; preds = %7
  %147 = icmp eq i32 %1, 405
  %148 = icmp eq i32 %1, 467
  %149 = or i1 %147, %148
  br label %336

150:                                              ; preds = %7
  %151 = add i32 %1, -305
  %152 = icmp ult i32 %151, 12
  %153 = or i32 %1, 1
  %154 = icmp eq i32 %153, 507
  %155 = or i1 %154, %152
  br label %336

156:                                              ; preds = %7
  switch i32 %1, label %157 [
    i32 507, label %336
    i32 506, label %336
    i32 311, label %336
    i32 310, label %336
    i32 309, label %336
    i32 308, label %336
    i32 307, label %336
    i32 306, label %336
    i32 405, label %336
  ]

157:                                              ; preds = %156
  br label %336

158:                                              ; preds = %7
  switch i32 %1, label %159 [
    i32 506, label %336
    i32 297, label %336
    i32 507, label %336
  ]

159:                                              ; preds = %158
  br label %336

160:                                              ; preds = %7
  %161 = icmp eq i32 %1, 3
  %162 = icmp eq i32 %1, 24
  %163 = or i1 %161, %162
  br label %336

164:                                              ; preds = %7
  switch i32 %1, label %165 [
    i32 12, label %336
    i32 11, label %336
    i32 10, label %336
    i32 9, label %336
    i32 502, label %336
  ]

165:                                              ; preds = %164
  br label %336

166:                                              ; preds = %7
  %167 = icmp eq i32 %1, 405
  %168 = icmp eq i32 %1, 3
  %169 = or i1 %167, %168
  br label %336

170:                                              ; preds = %7
  switch i32 %1, label %171 [
    i32 405, label %336
    i32 318, label %336
    i32 317, label %336
    i32 3, label %336
  ]

171:                                              ; preds = %170
  br label %336

172:                                              ; preds = %7
  %173 = and i32 %1, -4
  %174 = icmp eq i32 %173, 660
  ret i1 %174

175:                                              ; preds = %7
  %176 = add i32 %1, -661
  %177 = icmp ult i32 %176, 4
  br label %336

178:                                              ; preds = %7
  %179 = add i32 %1, -541
  %180 = icmp ult i32 %179, 2
  br label %336

181:                                              ; preds = %7
  switch i32 %1, label %182 [
    i32 631, label %336
    i32 630, label %336
    i32 405, label %336
    i32 632, label %336
  ]

182:                                              ; preds = %181
  br label %336

183:                                              ; preds = %7
  switch i32 %1, label %184 [
    i32 447, label %336
    i32 446, label %336
    i32 445, label %336
    i32 3, label %336
  ]

184:                                              ; preds = %183
  %185 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase33is_css_container_queries_enabled_E, align 1, !range !2
  %186 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase26is_layout_ng_grid_enabled_E, align 1
  %187 = or i8 %186, %185
  %188 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase31is_bidi_caret_affinity_enabled_E, align 1
  %189 = or i8 %187, %188
  %190 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase21is_layout_ng_enabled_E, align 1
  %191 = or i8 %189, %190
  %192 = icmp ne i8 %191, 0
  %193 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase23is_mathml_core_enabled_E, align 1
  %194 = icmp ne i8 %193, 0
  %195 = and i1 %194, %192
  %196 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase28is_css_math_variant_enabled_E, align 1
  %197 = icmp ne i8 %196, 0
  %198 = or i1 %195, %197
  %199 = icmp eq i32 %1, 448
  %200 = and i1 %199, %198
  br label %336

201:                                              ; preds = %7
  switch i32 %1, label %202 [
    i32 475, label %336
    i32 474, label %336
    i32 473, label %336
    i32 471, label %336
    i32 470, label %336
    i32 466, label %336
    i32 461, label %336
    i32 56, label %336
    i32 472, label %336
  ]

202:                                              ; preds = %201
  br label %336

203:                                              ; preds = %7
  %204 = icmp eq i32 %1, 3
  %205 = icmp eq i32 %1, 729
  %206 = or i1 %204, %205
  br label %336

207:                                              ; preds = %7
  switch i32 %1, label %208 [
    i32 449, label %336
    i32 4, label %336
    i32 450, label %336
  ]

208:                                              ; preds = %207
  br label %336

209:                                              ; preds = %7
  %210 = and i32 %1, -2
  %211 = icmp eq i32 %210, 702
  %212 = icmp eq i32 %1, 3
  %213 = or i1 %212, %211
  br label %336

214:                                              ; preds = %7
  %215 = add i32 %1, -553
  %216 = icmp ult i32 %215, 24
  %217 = icmp eq i32 %1, 3
  %218 = or i1 %217, %216
  %219 = icmp eq i32 %1, 405
  %220 = or i1 %219, %218
  br label %336

221:                                              ; preds = %7
  %222 = icmp eq i32 %1, 449
  %223 = icmp eq i32 %1, 4
  %224 = or i1 %222, %223
  br label %336

225:                                              ; preds = %7
  switch i32 %1, label %226 [
    i32 698, label %336
    i32 697, label %336
    i32 696, label %336
    i32 695, label %336
    i32 694, label %336
    i32 693, label %336
    i32 692, label %336
    i32 691, label %336
    i32 690, label %336
    i32 689, label %336
    i32 688, label %336
    i32 687, label %336
    i32 686, label %336
    i32 488, label %336
    i32 56, label %336
    i32 699, label %336
  ]

226:                                              ; preds = %225
  br label %336

227:                                              ; preds = %7
  switch i32 %1, label %228 [
    i32 507, label %336
    i32 506, label %336
    i32 505, label %336
    i32 310, label %336
    i32 296, label %336
  ]

228:                                              ; preds = %227
  br label %336

229:                                              ; preds = %7
  %230 = or i32 %1, 1
  %231 = icmp eq i32 %230, 509
  br label %336

232:                                              ; preds = %7
  %233 = icmp eq i32 %1, 56
  %234 = icmp eq i32 %1, 510
  %235 = or i1 %233, %234
  br label %336

236:                                              ; preds = %7
  %237 = add i32 %1, -511
  %238 = icmp ult i32 %237, 4
  br label %336

239:                                              ; preds = %7
  switch i32 %1, label %240 [
    i32 507, label %336
    i32 506, label %336
    i32 310, label %336
    i32 311, label %336
  ]

240:                                              ; preds = %239
  br label %336

241:                                              ; preds = %7
  %242 = icmp eq i32 %1, 405
  %243 = icmp eq i32 %1, 701
  %244 = or i1 %242, %243
  br label %336

245:                                              ; preds = %7
  switch i32 %1, label %246 [
    i32 518, label %336
    i32 517, label %336
    i32 516, label %336
    i32 515, label %336
    i32 310, label %336
    i32 505, label %336
  ]

246:                                              ; preds = %245
  br label %336

247:                                              ; preds = %7
  switch i32 %1, label %248 [
    i32 516, label %336
    i32 515, label %336
    i32 310, label %336
    i32 296, label %336
    i32 505, label %336
  ]

248:                                              ; preds = %247
  br label %336

249:                                              ; preds = %7
  switch i32 %1, label %250 [
    i32 516, label %336
    i32 515, label %336
    i32 405, label %336
    i32 310, label %336
    i32 296, label %336
    i32 505, label %336
  ]

250:                                              ; preds = %249
  br label %336

251:                                              ; preds = %7
  %252 = add i32 %1, -522
  %253 = icmp ult i32 %252, 4
  br label %336

254:                                              ; preds = %7
  %255 = add i32 %1, -486
  %256 = icmp ult i32 %255, 42
  br i1 %256, label %331, label %336

257:                                              ; preds = %7
  switch i32 %1, label %258 [
    i32 405, label %336
    i32 3, label %336
    i32 552, label %336
  ]

258:                                              ; preds = %257
  br label %336

259:                                              ; preds = %7
  switch i32 %1, label %260 [
    i32 517, label %336
    i32 516, label %336
    i32 515, label %336
    i32 310, label %336
    i32 518, label %336
  ]

260:                                              ; preds = %259
  br label %336

261:                                              ; preds = %7
  switch i32 %1, label %262 [
    i32 405, label %336
    i32 56, label %336
    i32 3, label %336
  ]

262:                                              ; preds = %261
  br label %336

263:                                              ; preds = %7
  %264 = icmp eq i32 %1, 405
  %265 = icmp eq i32 %1, 3
  %266 = or i1 %264, %265
  br label %336

267:                                              ; preds = %7
  switch i32 %1, label %268 [
    i32 628, label %336
    i32 405, label %336
    i32 3, label %336
    i32 629, label %336
  ]

268:                                              ; preds = %267
  br label %336

269:                                              ; preds = %7
  switch i32 %1, label %270 [
    i32 549, label %336
    i32 548, label %336
    i32 405, label %336
    i32 56, label %336
    i32 551, label %336
  ]

270:                                              ; preds = %269
  br label %336

271:                                              ; preds = %7
  switch i32 %1, label %272 [
    i32 549, label %336
    i32 548, label %336
    i32 405, label %336
    i32 56, label %336
    i32 550, label %336
  ]

272:                                              ; preds = %271
  br label %336

273:                                              ; preds = %7
  %274 = or i32 %1, 1
  %275 = icmp eq i32 %274, 635
  br label %336

276:                                              ; preds = %7
  %277 = add i32 %1, -587
  %278 = icmp ult i32 %277, 2
  br label %336

279:                                              ; preds = %7
  %280 = add i32 %1, -645
  %281 = icmp ult i32 %280, 2
  br label %336

282:                                              ; preds = %7
  %283 = add i32 %1, -647
  %284 = icmp ult i32 %283, 2
  br label %336

285:                                              ; preds = %7
  %286 = icmp eq i32 %1, 3
  %287 = icmp eq i32 %1, 511
  %288 = or i1 %286, %287
  br label %336

289:                                              ; preds = %7
  %290 = add i32 %1, -321
  %291 = icmp ult i32 %290, 3
  %292 = icmp eq i32 %1, 3
  %293 = or i1 %292, %291
  br label %336

294:                                              ; preds = %7
  %295 = or i32 %1, 1
  %296 = icmp eq i32 %295, 599
  br label %336

297:                                              ; preds = %7
  %298 = or i32 %1, 1
  %299 = icmp eq i32 %298, 597
  br label %336

300:                                              ; preds = %7
  switch i32 %1, label %301 [
    i32 405, label %336
    i32 3, label %336
    i32 533, label %336
  ]

301:                                              ; preds = %300
  br label %336

302:                                              ; preds = %7
  %303 = or i32 %1, 1
  %304 = icmp eq i32 %303, 531
  %305 = icmp eq i32 %1, 532
  %306 = or i1 %305, %304
  br label %336

307:                                              ; preds = %7
  switch i32 %1, label %308 [
    i32 433, label %336
    i32 405, label %336
    i32 3, label %336
    i32 24, label %336
  ]

308:                                              ; preds = %307
  br label %336

309:                                              ; preds = %7
  %310 = add i32 %1, -642
  %311 = icmp ult i32 %310, 3
  br label %336

312:                                              ; preds = %7
  %313 = add i32 %1, -636
  %314 = icmp ult i32 %313, 9
  br label %336

315:                                              ; preds = %7
  switch i32 %1, label %316 [
    i32 493, label %336
    i32 492, label %336
    i32 491, label %336
    i32 486, label %336
    i32 56, label %336
    i32 464, label %336
  ]

316:                                              ; preds = %315
  br label %336

317:                                              ; preds = %7
  switch i32 %1, label %318 [
    i32 545, label %336
    i32 544, label %336
    i32 56, label %336
    i32 546, label %336
  ]

318:                                              ; preds = %317
  br label %336

319:                                              ; preds = %7
  switch i32 %1, label %320 [
    i32 500, label %336
    i32 405, label %336
    i32 3, label %336
  ]

320:                                              ; preds = %319
  br label %336

321:                                              ; preds = %7
  %322 = icmp eq i32 %1, 56
  %323 = icmp eq i32 %1, 456
  %324 = or i1 %322, %323
  br label %336

325:                                              ; preds = %7, %7, %7, %7
  switch i32 %1, label %326 [
    i32 585, label %336
    i32 405, label %336
    i32 3, label %336
  ]

326:                                              ; preds = %325
  br label %336

327:                                              ; preds = %7
  %328 = icmp eq i32 %1, 56
  %329 = icmp eq i32 %1, 3
  %330 = or i1 %328, %329
  br label %336

331:                                              ; preds = %254
  %332 = zext i32 %255 to i42
  %333 = lshr i42 -1099511627775, %332
  %334 = and i42 %333, 1
  %335 = icmp ne i42 %334, 0
  ret i1 %335

336:                                              ; preds = %254, %33, %3, %312, %251, %175, %126, %325, %319, %317, %315, %307, %300, %271, %269, %267, %261, %259, %257, %249, %247, %245, %239, %227, %225, %207, %201, %181, %170, %164, %158, %156, %144, %142, %140, %138, %123, %112, %110, %102, %100, %94, %74, %44, %42, %27, %7, %326, %325, %325, %320, %319, %319, %318, %317, %317, %317, %316, %315, %315, %315, %315, %315, %308, %307, %307, %307, %301, %300, %300, %272, %271, %271, %271, %271, %270, %269, %269, %269, %269, %268, %267, %267, %267, %262, %261, %261, %260, %259, %259, %259, %259, %258, %257, %257, %250, %249, %249, %249, %249, %249, %248, %247, %247, %247, %247, %246, %245, %245, %245, %245, %245, %240, %239, %239, %239, %228, %227, %227, %227, %227, %226, %225, %225, %225, %225, %225, %225, %225, %225, %225, %225, %225, %225, %225, %225, %225, %208, %207, %207, %202, %201, %201, %201, %201, %201, %201, %201, %201, %184, %183, %183, %183, %183, %182, %181, %181, %181, %171, %170, %170, %170, %165, %164, %164, %164, %164, %159, %158, %158, %157, %156, %156, %156, %156, %156, %156, %156, %156, %145, %144, %144, %143, %142, %142, %141, %140, %140, %140, %140, %140, %139, %138, %138, %138, %125, %125, %125, %125, %124, %123, %123, %123, %123, %120, %119, %119, %119, %119, %113, %112, %112, %112, %111, %110, %110, %110, %110, %110, %110, %110, %110, %110, %105, %104, %104, %104, %104, %104, %103, %102, %102, %101, %100, %100, %97, %96, %96, %95, %94, %94, %94, %94, %75, %74, %74, %60, %50, %53, %49, %49, %49, %49, %45, %44, %44, %43, %42, %42, %36, %32, %32, %32, %32, %28, %27, %27, %9, %8, %8, %8, %8, %8, %5, %327, %321, %309, %302, %297, %294, %289, %285, %282, %279, %276, %273, %263, %241, %236, %232, %229, %221, %214, %209, %203, %178, %166, %160, %150, %146, %134, %114, %90, %86, %83, %80, %76, %70, %56, %46, %39, %29, %23, %20, %16, %12
  %337 = phi i1 [ %330, %327 ], [ %324, %321 ], [ %311, %309 ], [ %306, %302 ], [ %299, %297 ], [ %296, %294 ], [ %293, %289 ], [ %288, %285 ], [ %284, %282 ], [ %281, %279 ], [ %278, %276 ], [ %275, %273 ], [ %266, %263 ], [ %244, %241 ], [ %238, %236 ], [ %235, %232 ], [ %231, %229 ], [ %224, %221 ], [ %220, %214 ], [ %213, %209 ], [ %206, %203 ], [ %180, %178 ], [ %169, %166 ], [ %163, %160 ], [ %155, %150 ], [ %149, %146 ], [ %137, %134 ], [ %118, %114 ], [ %93, %90 ], [ %89, %86 ], [ %85, %83 ], [ %82, %80 ], [ %79, %76 ], [ %73, %70 ], [ %59, %56 ], [ %48, %46 ], [ %41, %39 ], [ %31, %29 ], [ %26, %23 ], [ %22, %20 ], [ %19, %16 ], [ %15, %12 ], [ false, %5 ], [ false, %3 ], [ true, %8 ], [ %11, %9 ], [ true, %8 ], [ true, %8 ], [ true, %8 ], [ true, %8 ], [ true, %27 ], [ false, %28 ], [ true, %27 ], [ true, %32 ], [ false, %33 ], [ %38, %36 ], [ true, %32 ], [ true, %32 ], [ true, %32 ], [ true, %42 ], [ false, %43 ], [ true, %42 ], [ true, %44 ], [ false, %45 ], [ true, %44 ], [ true, %49 ], [ true, %50 ], [ %55, %53 ], [ true, %49 ], [ true, %49 ], [ true, %49 ], [ true, %60 ], [ true, %74 ], [ false, %75 ], [ true, %74 ], [ true, %94 ], [ false, %95 ], [ true, %94 ], [ true, %94 ], [ true, %94 ], [ true, %96 ], [ %99, %97 ], [ true, %96 ], [ true, %100 ], [ false, %101 ], [ true, %100 ], [ true, %102 ], [ false, %103 ], [ true, %102 ], [ true, %104 ], [ %109, %105 ], [ true, %104 ], [ true, %104 ], [ true, %104 ], [ true, %104 ], [ true, %110 ], [ false, %111 ], [ true, %110 ], [ true, %110 ], [ true, %110 ], [ true, %110 ], [ true, %110 ], [ true, %110 ], [ true, %110 ], [ true, %110 ], [ true, %112 ], [ false, %113 ], [ true, %112 ], [ true, %112 ], [ true, %119 ], [ %122, %120 ], [ true, %119 ], [ true, %119 ], [ true, %119 ], [ true, %123 ], [ false, %124 ], [ true, %123 ], [ true, %123 ], [ true, %123 ], [ true, %125 ], [ true, %125 ], [ true, %125 ], [ true, %125 ], [ true, %138 ], [ false, %139 ], [ true, %138 ], [ true, %138 ], [ true, %140 ], [ false, %141 ], [ true, %140 ], [ true, %140 ], [ true, %140 ], [ true, %140 ], [ true, %142 ], [ false, %143 ], [ true, %142 ], [ true, %144 ], [ false, %145 ], [ true, %144 ], [ false, %157 ], [ true, %156 ], [ true, %156 ], [ true, %156 ], [ true, %156 ], [ true, %156 ], [ true, %156 ], [ true, %156 ], [ true, %156 ], [ true, %158 ], [ false, %159 ], [ true, %158 ], [ true, %164 ], [ false, %165 ], [ true, %164 ], [ true, %164 ], [ true, %164 ], [ true, %170 ], [ false, %171 ], [ true, %170 ], [ true, %170 ], [ true, %181 ], [ false, %182 ], [ true, %181 ], [ true, %181 ], [ true, %183 ], [ %200, %184 ], [ true, %183 ], [ true, %183 ], [ true, %183 ], [ true, %201 ], [ false, %202 ], [ true, %201 ], [ true, %201 ], [ true, %201 ], [ true, %201 ], [ true, %201 ], [ true, %201 ], [ true, %201 ], [ true, %207 ], [ false, %208 ], [ true, %207 ], [ true, %225 ], [ false, %226 ], [ true, %225 ], [ true, %225 ], [ true, %225 ], [ true, %225 ], [ true, %225 ], [ true, %225 ], [ true, %225 ], [ true, %225 ], [ true, %225 ], [ true, %225 ], [ true, %225 ], [ true, %225 ], [ true, %225 ], [ true, %225 ], [ true, %227 ], [ false, %228 ], [ true, %227 ], [ true, %227 ], [ true, %227 ], [ true, %239 ], [ false, %240 ], [ true, %239 ], [ true, %239 ], [ true, %245 ], [ false, %246 ], [ true, %245 ], [ true, %245 ], [ true, %245 ], [ true, %245 ], [ true, %247 ], [ false, %248 ], [ true, %247 ], [ true, %247 ], [ true, %247 ], [ true, %249 ], [ false, %250 ], [ true, %249 ], [ true, %249 ], [ true, %249 ], [ true, %249 ], [ true, %257 ], [ false, %258 ], [ true, %257 ], [ true, %259 ], [ false, %260 ], [ true, %259 ], [ true, %259 ], [ true, %259 ], [ true, %261 ], [ false, %262 ], [ true, %261 ], [ true, %267 ], [ false, %268 ], [ true, %267 ], [ true, %267 ], [ true, %269 ], [ false, %270 ], [ true, %269 ], [ true, %269 ], [ true, %269 ], [ true, %271 ], [ false, %272 ], [ true, %271 ], [ true, %271 ], [ true, %271 ], [ true, %300 ], [ false, %301 ], [ true, %300 ], [ true, %307 ], [ false, %308 ], [ true, %307 ], [ true, %307 ], [ true, %315 ], [ false, %316 ], [ true, %315 ], [ true, %315 ], [ true, %315 ], [ true, %315 ], [ true, %317 ], [ false, %318 ], [ true, %317 ], [ true, %317 ], [ true, %319 ], [ false, %320 ], [ true, %319 ], [ true, %325 ], [ false, %326 ], [ true, %325 ], [ false, %7 ], [ true, %27 ], [ true, %42 ], [ true, %44 ], [ true, %74 ], [ true, %94 ], [ true, %100 ], [ true, %102 ], [ true, %110 ], [ true, %112 ], [ true, %123 ], [ %133, %126 ], [ true, %138 ], [ true, %140 ], [ true, %142 ], [ true, %144 ], [ true, %156 ], [ true, %158 ], [ true, %164 ], [ true, %170 ], [ true, %181 ], [ true, %201 ], [ true, %207 ], [ true, %225 ], [ true, %227 ], [ true, %239 ], [ true, %245 ], [ true, %247 ], [ true, %249 ], [ true, %257 ], [ true, %259 ], [ true, %261 ], [ true, %267 ], [ true, %269 ], [ true, %271 ], [ true, %300 ], [ true, %307 ], [ true, %315 ], [ true, %317 ], [ true, %319 ], [ true, %325 ], [ %177, %175 ], [ %253, %251 ], [ %314, %312 ], [ false, %254 ]
  ret i1 %337
}

declare zeroext i1 @_ZN5blink20isValueAllowedInModeENS_10CSSValueIDENS_13CSSParserModeE(i32, i8 zeroext) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN5blink18CSSParserFastPaths19IsKeywordPropertyIDENS_13CSSPropertyIDE(i32) local_unnamed_addr #2 align 2 {
  switch i32 %0, label %2 [
    i32 33, label %3
    i32 34, label %3
    i32 242, label %3
    i32 202, label %3
    i32 57, label %3
    i32 58, label %3
    i32 71, label %3
    i32 73, label %3
    i32 88, label %3
    i32 91, label %3
    i32 98, label %3
    i32 102, label %3
    i32 106, label %3
    i32 107, label %3
    i32 109, label %3
    i32 112, label %3
    i32 113, label %3
    i32 114, label %3
    i32 115, label %3
    i32 3, label %3
    i32 138, label %3
    i32 139, label %3
    i32 144, label %3
    i32 151, label %3
    i32 18, label %3
    i32 166, label %3
    i32 168, label %3
    i32 214, label %3
    i32 228, label %3
    i32 230, label %3
    i32 231, label %3
    i32 244, label %3
    i32 258, label %3
    i32 260, label %3
    i32 261, label %3
    i32 263, label %3
    i32 264, label %3
    i32 265, label %3
    i32 266, label %3
    i32 103, label %3
    i32 104, label %3
    i32 105, label %3
    i32 281, label %3
    i32 285, label %3
    i32 286, label %3
    i32 291, label %3
    i32 299, label %3
    i32 268, label %3
    i32 267, label %3
    i32 269, label %3
    i32 270, label %3
    i32 295, label %3
    i32 325, label %3
    i32 329, label %3
    i32 338, label %3
    i32 339, label %3
    i32 348, label %3
    i32 349, label %3
    i32 350, label %3
    i32 351, label %3
    i32 352, label %3
    i32 356, label %3
    i32 355, label %3
    i32 359, label %3
    i32 20, label %3
    i32 24, label %3
    i32 360, label %3
    i32 21, label %3
    i32 363, label %3
    i32 378, label %3
    i32 382, label %3
    i32 385, label %3
    i32 386, label %3
    i32 48, label %3
    i32 63, label %3
    i32 66, label %3
    i32 82, label %3
    i32 85, label %3
    i32 390, label %3
    i32 391, label %3
    i32 392, label %3
    i32 395, label %3
    i32 396, label %3
    i32 118, label %3
    i32 121, label %3
    i32 147, label %3
    i32 150, label %3
    i32 6, label %3
    i32 7, label %3
    i32 22, label %3
    i32 209, label %3
    i32 400, label %3
    i32 418, label %3
    i32 419, label %3
    i32 420, label %3
    i32 422, label %3
    i32 428, label %3
    i32 370, label %3
    i32 372, label %3
    i32 434, label %3
    i32 435, label %3
    i32 380, label %3
    i32 25, label %3
    i32 436, label %3
    i32 440, label %3
    i32 26, label %3
    i32 321, label %3
    i32 318, label %3
    i32 254, label %3
  ]

2:                                                ; preds = %1
  br label %3

3:                                                ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %2
  %4 = phi i1 [ false, %2 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ]
  ret i1 %4
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN5blink18CSSParserFastPaths17IsValidSystemFontENS_10CSSValueIDE(i32) local_unnamed_addr #2 align 2 {
  %2 = add i32 %0, -13
  %3 = icmp ult i32 %2, 9
  ret i1 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::CSSValue"* @_ZN5blink18CSSParserFastPaths15MaybeParseValueENS_13CSSPropertyIDERKN3WTF6StringENS_13CSSParserModeE(i32, %"class.WTF::String"* nocapture readonly dereferenceable(8), i8 zeroext) local_unnamed_addr #0 align 2 {
  %4 = alloca i8, align 1
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i16*, align 8
  %8 = alloca %"class.WTF::StringView", align 8
  %9 = alloca %"class.WTF::StringView", align 8
  %10 = alloca %"class.WTF::StringView", align 8
  %11 = alloca %"class.WTF::StringView", align 8
  %12 = alloca %"class.WTF::StringView", align 8
  %13 = alloca i8, align 1
  %14 = alloca i8, align 1
  %15 = icmp eq i8 %2, 3
  br i1 %15, label %128, label %16

16:                                               ; preds = %3
  switch i32 %0, label %128 [
    i32 61, label %18
    i32 171, label %18
    i32 237, label %18
    i32 239, label %18
    i32 8, label %18
    i32 165, label %18
    i32 438, label %18
    i32 238, label %18
    i32 240, label %18
    i32 274, label %18
    i32 277, label %18
    i32 278, label %18
    i32 279, label %18
    i32 309, label %18
    i32 310, label %18
    i32 311, label %18
    i32 312, label %18
    i32 313, label %18
    i32 314, label %18
    i32 315, label %18
    i32 316, label %18
    i32 272, label %18
    i32 273, label %18
    i32 275, label %18
    i32 276, label %18
    i32 323, label %18
    i32 289, label %18
    i32 296, label %18
    i32 297, label %18
    i32 100, label %17
    i32 133, label %17
    i32 134, label %17
    i32 206, label %17
    i32 218, label %17
    i32 221, label %17
    i32 222, label %17
    i32 223, label %17
    i32 247, label %17
    i32 292, label %17
    i32 367, label %17
    i32 216, label %17
    i32 217, label %17
    i32 219, label %17
    i32 220, label %17
    i32 442, label %17
    i32 443, label %17
  ]

17:                                               ; preds = %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16
  br label %18

18:                                               ; preds = %17, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16
  %19 = phi i8 [ 1, %17 ], [ 0, %16 ], [ 0, %16 ], [ 0, %16 ], [ 0, %16 ], [ 0, %16 ], [ 0, %16 ], [ 0, %16 ], [ 0, %16 ], [ 0, %16 ], [ 0, %16 ], [ 0, %16 ], [ 0, %16 ], [ 0, %16 ], [ 0, %16 ], [ 0, %16 ], [ 0, %16 ], [ 0, %16 ], [ 0, %16 ], [ 0, %16 ], [ 0, %16 ], [ 0, %16 ], [ 0, %16 ], [ 0, %16 ], [ 0, %16 ], [ 0, %16 ], [ 0, %16 ], [ 0, %16 ], [ 0, %16 ], [ 0, %16 ]
  %20 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %21 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %20, align 8
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = and i32 %23, 1
  %25 = icmp eq i32 %24, 0
  %26 = icmp eq %"class.WTF::StringImpl"* %21, null
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 1
  br i1 %25, label %67, label %28

28:                                               ; preds = %18
  %29 = bitcast %"class.WTF::StringImpl"* %27 to i8*
  %30 = select i1 %26, i8* null, i8* %29
  br i1 %26, label %59, label %31

31:                                               ; preds = %28
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = icmp ugt i32 %33, 2
  br i1 %34, label %35, label %49

35:                                               ; preds = %31
  %36 = add i32 %33, -2
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds i8, i8* %30, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = or i8 %39, 32
  %41 = icmp eq i8 %40, 112
  br i1 %41, label %42, label %51

42:                                               ; preds = %35
  %43 = add i32 %33, -1
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %30, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = or i8 %46, 32
  %48 = icmp eq i8 %47, 120
  br i1 %48, label %59, label %51

49:                                               ; preds = %31
  %50 = icmp eq i32 %33, 2
  br i1 %50, label %51, label %59

51:                                               ; preds = %49, %42, %35
  %52 = add i32 %33, -1
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds i8, i8* %30, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = icmp eq i8 %55, 37
  %57 = select i1 %56, i32 2, i32 1
  %58 = select i1 %56, i32 %52, i32 %33
  br label %59

59:                                               ; preds = %51, %49, %42, %28
  %60 = phi i32 [ 1, %49 ], [ 1, %28 ], [ 5, %42 ], [ %57, %51 ]
  %61 = phi i32 [ %33, %49 ], [ 0, %28 ], [ %36, %42 ], [ %58, %51 ]
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %13) #9
  store i8 -86, i8* %13, align 1
  %62 = zext i32 %61 to i64
  %63 = call double @_ZN3WTF18CharactersToDoubleEPKhmPb(i8* %30, i64 %62, i8* nonnull %13) #9
  %64 = load i8, i8* %13, align 1, !range !2
  %65 = icmp eq i8 %64, 0
  br i1 %65, label %66, label %106

66:                                               ; preds = %59
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %13) #9
  br label %128

67:                                               ; preds = %18
  %68 = bitcast %"class.WTF::StringImpl"* %27 to i16*
  %69 = select i1 %26, i16* null, i16* %68
  br i1 %26, label %98, label %70

70:                                               ; preds = %67
  %71 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 1
  %72 = load i32, i32* %71, align 4
  %73 = icmp ugt i32 %72, 2
  br i1 %73, label %74, label %88

74:                                               ; preds = %70
  %75 = add i32 %72, -2
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds i16, i16* %69, i64 %76
  %78 = load i16, i16* %77, align 2
  %79 = or i16 %78, 32
  %80 = icmp eq i16 %79, 112
  br i1 %80, label %81, label %90

81:                                               ; preds = %74
  %82 = add i32 %72, -1
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds i16, i16* %69, i64 %83
  %85 = load i16, i16* %84, align 2
  %86 = or i16 %85, 32
  %87 = icmp eq i16 %86, 120
  br i1 %87, label %98, label %90

88:                                               ; preds = %70
  %89 = icmp eq i32 %72, 2
  br i1 %89, label %90, label %98

90:                                               ; preds = %88, %81, %74
  %91 = add i32 %72, -1
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds i16, i16* %69, i64 %92
  %94 = load i16, i16* %93, align 2
  %95 = icmp eq i16 %94, 37
  %96 = select i1 %95, i32 2, i32 1
  %97 = select i1 %95, i32 %91, i32 %72
  br label %98

98:                                               ; preds = %90, %88, %81, %67
  %99 = phi i32 [ 1, %88 ], [ 1, %67 ], [ 5, %81 ], [ %96, %90 ]
  %100 = phi i32 [ %72, %88 ], [ 0, %67 ], [ %75, %81 ], [ %97, %90 ]
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %14) #9
  store i8 -86, i8* %14, align 1
  %101 = zext i32 %100 to i64
  %102 = call double @_ZN3WTF18CharactersToDoubleEPKDsmPb(i16* %69, i64 %101, i8* nonnull %14) #9
  %103 = load i8, i8* %14, align 1, !range !2
  %104 = icmp eq i8 %103, 0
  br i1 %104, label %105, label %106

105:                                              ; preds = %98
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %14) #9
  br label %128

106:                                              ; preds = %98, %59
  %107 = phi double [ %63, %59 ], [ %102, %98 ]
  %108 = phi i8* [ %13, %59 ], [ %14, %98 ]
  %109 = phi i32 [ %60, %59 ], [ %99, %98 ]
  %110 = fcmp ult double %107, 0x47EFFFFFE0000000
  %111 = fcmp ole double %107, 0xC7EFFFFFE0000000
  %112 = select i1 %111, double 0xC7EFFFFFE0000000, double %107
  %113 = select i1 %110, double %112, double 0x47EFFFFFE0000000
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %108) #9
  %114 = icmp eq i32 %109, 1
  br i1 %114, label %115, label %119

115:                                              ; preds = %106
  %116 = icmp eq i8 %2, 2
  br i1 %116, label %119, label %117

117:                                              ; preds = %115
  %118 = fcmp une double %113, 0.000000e+00
  br i1 %118, label %128, label %119

119:                                              ; preds = %117, %115, %106
  %120 = phi i32 [ %109, %106 ], [ 18, %115 ], [ 5, %117 ]
  %121 = fcmp olt double %113, 0.000000e+00
  %122 = icmp eq i8 %19, 0
  %123 = and i1 %122, %121
  br i1 %123, label %128, label %124

124:                                              ; preds = %119
  %125 = call %"class.blink::CSSNumericLiteralValue"* @_ZN5blink22CSSNumericLiteralValue6CreateEdNS_17CSSPrimitiveValue8UnitTypeE(double %113, i32 %120) #9
  %126 = getelementptr inbounds %"class.blink::CSSNumericLiteralValue", %"class.blink::CSSNumericLiteralValue"* %125, i64 0, i32 0, i32 0
  %127 = icmp eq %"class.blink::CSSNumericLiteralValue"* %125, null
  br i1 %127, label %128, label %1240

128:                                              ; preds = %66, %119, %117, %105, %16, %3, %124
  %129 = call fastcc %"class.blink::CSSValue"* @_ZN5blinkL10ParseColorENS_13CSSPropertyIDERKN3WTF6StringENS_13CSSParserModeE(i32 %0, %"class.WTF::String"* dereferenceable(8) %1, i8 zeroext %2)
  %130 = icmp eq %"class.blink::CSSValue"* %129, null
  br i1 %130, label %131, label %1240

131:                                              ; preds = %128
  %132 = bitcast %"class.WTF::StringView"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %132)
  %133 = call zeroext i1 @_ZN5blink18CSSParserFastPaths19IsKeywordPropertyIDENS_13CSSPropertyIDE(i32 %0) #9
  br i1 %133, label %223, label %134

134:                                              ; preds = %131
  %135 = bitcast %"class.WTF::StringView"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %135) #9
  %136 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %137 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %136, align 8
  %138 = icmp eq %"class.WTF::StringImpl"* %137, null
  br i1 %138, label %139, label %143

139:                                              ; preds = %134
  %140 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  store i8* null, i8** %140, align 8
  %141 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %142 = bitcast %"class.WTF::StringView"* %8 to i64*
  store i64 %141, i64* %142, align 8
  br label %150

143:                                              ; preds = %134
  %144 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 0
  store %"class.WTF::StringImpl"* %137, %"class.WTF::StringImpl"** %144, align 8
  %145 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %137, i64 0, i32 1
  %146 = load i32, i32* %145, align 4
  %147 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %137, i64 1
  %148 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  %149 = bitcast i8** %148 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %147, %"class.WTF::StringImpl"** %149, align 8
  br label %150

150:                                              ; preds = %143, %139
  %151 = phi i32 [ %146, %143 ], [ 0, %139 ]
  %152 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 2
  store i32 %151, i32* %152, align 8
  %153 = call zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm8EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* nonnull dereferenceable(24) %8, [8 x i8]* nonnull dereferenceable(8) @.str) #9
  %154 = bitcast %"class.WTF::StringView"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %154) #9
  %155 = bitcast %"class.WTF::StringView"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %155) #9
  %156 = bitcast %"class.WTF::StringView"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %156) #9
  br i1 %153, label %211, label %157

157:                                              ; preds = %150
  %158 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %136, align 8
  %159 = icmp eq %"class.WTF::StringImpl"* %158, null
  br i1 %159, label %160, label %164

160:                                              ; preds = %157
  %161 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 1
  store i8* null, i8** %161, align 8
  %162 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %163 = bitcast %"class.WTF::StringView"* %9 to i64*
  store i64 %162, i64* %163, align 8
  br label %171

164:                                              ; preds = %157
  %165 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 0
  store %"class.WTF::StringImpl"* %158, %"class.WTF::StringImpl"** %165, align 8
  %166 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %158, i64 0, i32 1
  %167 = load i32, i32* %166, align 4
  %168 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %158, i64 1
  %169 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 1
  %170 = bitcast i8** %169 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %168, %"class.WTF::StringImpl"** %170, align 8
  br label %171

171:                                              ; preds = %164, %160
  %172 = phi i32 [ %167, %164 ], [ 0, %160 ]
  %173 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 2
  store i32 %172, i32* %173, align 8
  %174 = call zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm8EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* nonnull dereferenceable(24) %9, [8 x i8]* nonnull dereferenceable(8) @.str.1) #9
  br i1 %174, label %211, label %175

175:                                              ; preds = %171
  %176 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %136, align 8
  %177 = icmp eq %"class.WTF::StringImpl"* %176, null
  br i1 %177, label %178, label %182

178:                                              ; preds = %175
  %179 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 1
  store i8* null, i8** %179, align 8
  %180 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %181 = bitcast %"class.WTF::StringView"* %10 to i64*
  store i64 %180, i64* %181, align 8
  br label %189

182:                                              ; preds = %175
  %183 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 0
  store %"class.WTF::StringImpl"* %176, %"class.WTF::StringImpl"** %183, align 8
  %184 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %176, i64 0, i32 1
  %185 = load i32, i32* %184, align 4
  %186 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %176, i64 1
  %187 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 1
  %188 = bitcast i8** %187 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %186, %"class.WTF::StringImpl"** %188, align 8
  br label %189

189:                                              ; preds = %182, %178
  %190 = phi i32 [ %185, %182 ], [ 0, %178 ]
  %191 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 2
  store i32 %190, i32* %191, align 8
  %192 = call zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm6EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* nonnull dereferenceable(24) %10, [6 x i8]* nonnull dereferenceable(6) @.str.2) #9
  br i1 %192, label %211, label %193

193:                                              ; preds = %189
  %194 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %136, align 8
  %195 = icmp eq %"class.WTF::StringImpl"* %194, null
  br i1 %195, label %196, label %200

196:                                              ; preds = %193
  %197 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 1
  store i8* null, i8** %197, align 8
  %198 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %199 = bitcast %"class.WTF::StringView"* %11 to i64*
  store i64 %198, i64* %199, align 8
  br label %207

200:                                              ; preds = %193
  %201 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 0
  store %"class.WTF::StringImpl"* %194, %"class.WTF::StringImpl"** %201, align 8
  %202 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %194, i64 0, i32 1
  %203 = load i32, i32* %202, align 4
  %204 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %194, i64 1
  %205 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 1
  %206 = bitcast i8** %205 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %204, %"class.WTF::StringImpl"** %206, align 8
  br label %207

207:                                              ; preds = %200, %196
  %208 = phi i32 [ %203, %200 ], [ 0, %196 ]
  %209 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 2
  store i32 %208, i32* %209, align 8
  %210 = call zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm7EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* nonnull dereferenceable(24) %11, [7 x i8]* nonnull dereferenceable(7) @.str.3) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %156) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %155) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %154) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %135) #9
  br i1 %210, label %212, label %259

211:                                              ; preds = %150, %171, %189
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %156) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %155) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %154) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %135) #9
  br label %212

212:                                              ; preds = %211, %207
  %213 = call dereferenceable(16) %"class.blink::StylePropertyShorthand"* @_ZN5blink20shorthandForPropertyENS_13CSSPropertyIDE(i32 %0) #9
  %214 = getelementptr inbounds %"class.blink::StylePropertyShorthand", %"class.blink::StylePropertyShorthand"* %213, i64 0, i32 1
  %215 = load i32, i32* %214, align 8
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %217, label %259

217:                                              ; preds = %212
  %218 = call dereferenceable(24) %"class.blink::CSSProperty"* @_ZN5blink11CSSProperty3GetENS_13CSSPropertyIDE(i32 %0) #9
  %219 = getelementptr inbounds %"class.blink::CSSProperty", %"class.blink::CSSProperty"* %218, i64 0, i32 2
  %220 = load i32, i32* %219, align 4
  %221 = and i32 %220, 8
  %222 = icmp eq i32 %221, 0
  br i1 %222, label %259, label %223

223:                                              ; preds = %217, %131
  %224 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %225 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %224, align 8
  %226 = icmp eq %"class.WTF::StringImpl"* %225, null
  br i1 %226, label %227, label %231

227:                                              ; preds = %223
  %228 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 1
  store i8* null, i8** %228, align 8
  %229 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %230 = bitcast %"class.WTF::StringView"* %12 to i64*
  store i64 %229, i64* %230, align 8
  br label %238

231:                                              ; preds = %223
  %232 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 0
  store %"class.WTF::StringImpl"* %225, %"class.WTF::StringImpl"** %232, align 8
  %233 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %225, i64 0, i32 1
  %234 = load i32, i32* %233, align 4
  %235 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %225, i64 1
  %236 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 1
  %237 = bitcast i8** %236 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %235, %"class.WTF::StringImpl"** %237, align 8
  br label %238

238:                                              ; preds = %231, %227
  %239 = phi i32 [ %234, %231 ], [ 0, %227 ]
  %240 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 2
  store i32 %239, i32* %240, align 8
  %241 = call i32 @_ZN5blink17CssValueKeywordIDEN3WTF10StringViewE(%"class.WTF::StringView"* nonnull byval(%"class.WTF::StringView") align 8 %12) #9
  switch i32 %241, label %254 [
    i32 0, label %259
    i32 1, label %242
    i32 2, label %245
    i32 749, label %248
    i32 748, label %251
  ]

242:                                              ; preds = %238
  %243 = call %"class.blink::CSSInheritedValue"* @_ZN5blink17CSSInheritedValue6CreateEv() #9
  %244 = getelementptr inbounds %"class.blink::CSSInheritedValue", %"class.blink::CSSInheritedValue"* %243, i64 0, i32 0
  br label %260

245:                                              ; preds = %238
  %246 = call %"class.blink::CSSInitialValue"* @_ZN5blink15CSSInitialValue6CreateEv() #9
  %247 = getelementptr inbounds %"class.blink::CSSInitialValue", %"class.blink::CSSInitialValue"* %246, i64 0, i32 0
  br label %260

248:                                              ; preds = %238
  %249 = call %"class.blink::cssvalue::CSSUnsetValue"* @_ZN5blink8cssvalue13CSSUnsetValue6CreateEv() #9
  %250 = getelementptr inbounds %"class.blink::cssvalue::CSSUnsetValue", %"class.blink::cssvalue::CSSUnsetValue"* %249, i64 0, i32 0
  br label %260

251:                                              ; preds = %238
  %252 = call %"class.blink::cssvalue::CSSRevertValue"* @_ZN5blink8cssvalue14CSSRevertValue6CreateEv() #9
  %253 = getelementptr inbounds %"class.blink::cssvalue::CSSRevertValue", %"class.blink::cssvalue::CSSRevertValue"* %252, i64 0, i32 0
  br label %260

254:                                              ; preds = %238
  %255 = call zeroext i1 @_ZN5blink18CSSParserFastPaths30IsValidKeywordPropertyAndValueENS_13CSSPropertyIDENS_10CSSValueIDENS_13CSSParserModeE(i32 %0, i32 %241, i8 zeroext %2) #9
  br i1 %255, label %256, label %259

256:                                              ; preds = %254
  %257 = call %"class.blink::CSSIdentifierValue"* @_ZN5blink18CSSIdentifierValue6CreateENS_10CSSValueIDE(i32 %241) #9
  %258 = getelementptr inbounds %"class.blink::CSSIdentifierValue", %"class.blink::CSSIdentifierValue"* %257, i64 0, i32 0
  br label %260

259:                                              ; preds = %207, %212, %217, %238, %254
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %132)
  br label %263

260:                                              ; preds = %242, %245, %248, %251, %256
  %261 = phi %"class.blink::CSSValue"* [ %244, %242 ], [ %247, %245 ], [ %250, %248 ], [ %253, %251 ], [ %258, %256 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %132)
  %262 = icmp eq %"class.blink::CSSValue"* %261, null
  br i1 %262, label %263, label %1240

263:                                              ; preds = %259, %260
  %264 = icmp eq i32 %0, 369
  br i1 %264, label %265, label %1240

265:                                              ; preds = %263
  %266 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %267 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %266, align 8
  %268 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %267, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %269 = load atomic i32, i32* %268 monotonic, align 4
  %270 = and i32 %269, 1
  %271 = icmp eq i32 %270, 0
  %272 = icmp eq %"class.WTF::StringImpl"* %267, null
  %273 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %267, i64 1
  br i1 %271, label %726, label %274

274:                                              ; preds = %265
  %275 = bitcast %"class.WTF::StringImpl"* %273 to i8*
  %276 = select i1 %272, i8* null, i8* %275
  br i1 %272, label %277, label %279

277:                                              ; preds = %274
  %278 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %278) #9
  store i8* %276, i8** %5, align 8
  br label %1236

279:                                              ; preds = %274
  %280 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %267, i64 0, i32 1
  %281 = load i32, i32* %280, align 4
  %282 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %282) #9
  store i8* %276, i8** %5, align 8
  %283 = icmp eq i32 %281, 0
  br i1 %283, label %1236, label %284

284:                                              ; preds = %279
  %285 = ptrtoint i8* %276 to i64
  br label %286

286:                                              ; preds = %291, %284
  %287 = phi i32 [ 0, %284 ], [ %293, %291 ]
  %288 = zext i32 %287 to i64
  %289 = getelementptr inbounds i8, i8* %276, i64 %288
  %290 = load i8, i8* %289, align 1
  switch i8 %290, label %295 [
    i8 32, label %291
    i8 9, label %291
    i8 10, label %291
  ]

291:                                              ; preds = %333, %286, %286, %286
  %292 = phi i32 [ %343, %333 ], [ %287, %286 ], [ %287, %286 ], [ %287, %286 ]
  %293 = add nuw i32 %292, 1
  %294 = icmp ult i32 %293, %281
  br i1 %294, label %286, label %345

295:                                              ; preds = %286
  %296 = sub i32 %281, %287
  %297 = icmp ult i32 %296, 12
  br i1 %297, label %1236, label %298

298:                                              ; preds = %295
  %299 = zext i8 %290 to i64
  %300 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %299
  %301 = load i8, i8* %300, align 1
  switch i8 %301, label %1236 [
    i8 116, label %302
    i8 109, label %311
    i8 115, label %320
  ]

302:                                              ; preds = %298
  %303 = add i32 %287, 8
  %304 = zext i32 %303 to i64
  %305 = getelementptr inbounds i8, i8* %276, i64 %304
  %306 = load i8, i8* %305, align 1
  %307 = zext i8 %306 to i64
  %308 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %307
  %309 = load i8, i8* %308, align 1
  %310 = icmp eq i8 %309, 101
  br i1 %310, label %329, label %1236

311:                                              ; preds = %298
  %312 = add i32 %287, 7
  %313 = zext i32 %312 to i64
  %314 = getelementptr inbounds i8, i8* %276, i64 %313
  %315 = load i8, i8* %314, align 1
  %316 = zext i8 %315 to i64
  %317 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %316
  %318 = load i8, i8* %317, align 1
  %319 = icmp eq i8 %318, 100
  br i1 %319, label %329, label %1236

320:                                              ; preds = %298
  %321 = add i32 %287, 6
  %322 = zext i32 %321 to i64
  %323 = getelementptr inbounds i8, i8* %276, i64 %322
  %324 = load i8, i8* %323, align 1
  %325 = zext i8 %324 to i64
  %326 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %325
  %327 = load i8, i8* %326, align 1
  %328 = icmp eq i8 %327, 100
  br i1 %328, label %329, label %1236

329:                                              ; preds = %320, %311, %302
  %330 = phi i32 [ 9, %302 ], [ 8, %311 ], [ 7, %320 ]
  %331 = add i32 %287, %330
  %332 = icmp ugt i32 %281, %331
  br i1 %332, label %333, label %1236

333:                                              ; preds = %329
  %334 = zext i32 %331 to i64
  %335 = getelementptr inbounds i8, i8* %276, i64 %334
  %336 = sub i32 %281, %331
  %337 = zext i32 %336 to i64
  %338 = call i8* @memchr(i8* %335, i32 41, i64 %337) #10
  %339 = icmp eq i8* %338, null
  %340 = ptrtoint i8* %338 to i64
  %341 = sub i64 %340, %285
  %342 = trunc i64 %341 to i32
  %343 = select i1 %339, i32 -1, i32 %342
  %344 = icmp eq i32 %343, -1
  br i1 %344, label %1236, label %291

345:                                              ; preds = %291
  %346 = icmp eq i32 %293, %281
  br i1 %346, label %347, label %1236

347:                                              ; preds = %345
  %348 = zext i32 %281 to i64
  %349 = getelementptr inbounds i8, i8* %276, i64 %348
  %350 = ptrtoint i8* %349 to i64
  br label %351

351:                                              ; preds = %721, %347
  %352 = phi i8* [ %276, %347 ], [ %722, %721 ]
  %353 = phi %"class.blink::CSSValueList"* [ null, %347 ], [ %697, %721 ]
  %354 = icmp ult i8* %352, %349
  br i1 %354, label %355, label %1236

355:                                              ; preds = %351, %358
  %356 = phi i8* [ %359, %358 ], [ %352, %351 ]
  %357 = load i8, i8* %356, align 1
  switch i8 %357, label %361 [
    i8 32, label %358
    i8 9, label %358
    i8 10, label %358
  ]

358:                                              ; preds = %355, %355, %355
  %359 = getelementptr inbounds i8, i8* %356, i64 1
  %360 = icmp eq i8* %359, %349
  br i1 %360, label %725, label %355

361:                                              ; preds = %355
  store i8* %356, i8** %5, align 8
  %362 = ptrtoint i8* %356 to i64
  %363 = sub i64 %350, %362
  %364 = icmp slt i64 %363, 12
  br i1 %364, label %1236, label %365

365:                                              ; preds = %361
  %366 = load i8, i8* %356, align 1
  %367 = zext i8 %366 to i64
  %368 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %367
  %369 = load i8, i8* %368, align 1
  switch i8 %369, label %1236 [
    i8 116, label %370
    i8 109, label %566
    i8 115, label %628
  ]

370:                                              ; preds = %365
  %371 = getelementptr inbounds i8, i8* %356, i64 1
  %372 = load i8, i8* %371, align 1
  %373 = zext i8 %372 to i64
  %374 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %373
  %375 = load i8, i8* %374, align 1
  %376 = icmp eq i8 %375, 114
  br i1 %376, label %377, label %1236

377:                                              ; preds = %370
  %378 = getelementptr inbounds i8, i8* %356, i64 2
  %379 = load i8, i8* %378, align 1
  %380 = zext i8 %379 to i64
  %381 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %380
  %382 = load i8, i8* %381, align 1
  %383 = icmp eq i8 %382, 97
  br i1 %383, label %384, label %1236

384:                                              ; preds = %377
  %385 = getelementptr inbounds i8, i8* %356, i64 3
  %386 = load i8, i8* %385, align 1
  %387 = zext i8 %386 to i64
  %388 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %387
  %389 = load i8, i8* %388, align 1
  %390 = icmp eq i8 %389, 110
  br i1 %390, label %391, label %1236

391:                                              ; preds = %384
  %392 = getelementptr inbounds i8, i8* %356, i64 4
  %393 = load i8, i8* %392, align 1
  %394 = zext i8 %393 to i64
  %395 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %394
  %396 = load i8, i8* %395, align 1
  %397 = icmp eq i8 %396, 115
  br i1 %397, label %398, label %1236

398:                                              ; preds = %391
  %399 = getelementptr inbounds i8, i8* %356, i64 5
  %400 = load i8, i8* %399, align 1
  %401 = zext i8 %400 to i64
  %402 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %401
  %403 = load i8, i8* %402, align 1
  %404 = icmp eq i8 %403, 108
  br i1 %404, label %405, label %1236

405:                                              ; preds = %398
  %406 = getelementptr inbounds i8, i8* %356, i64 6
  %407 = load i8, i8* %406, align 1
  %408 = zext i8 %407 to i64
  %409 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %408
  %410 = load i8, i8* %409, align 1
  %411 = icmp eq i8 %410, 97
  br i1 %411, label %412, label %1236

412:                                              ; preds = %405
  %413 = getelementptr inbounds i8, i8* %356, i64 7
  %414 = load i8, i8* %413, align 1
  %415 = zext i8 %414 to i64
  %416 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %415
  %417 = load i8, i8* %416, align 1
  %418 = icmp eq i8 %417, 116
  br i1 %418, label %419, label %1236

419:                                              ; preds = %412
  %420 = getelementptr inbounds i8, i8* %356, i64 8
  %421 = load i8, i8* %420, align 1
  %422 = zext i8 %421 to i64
  %423 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %422
  %424 = load i8, i8* %423, align 1
  %425 = icmp eq i8 %424, 101
  br i1 %425, label %426, label %1236

426:                                              ; preds = %419
  %427 = getelementptr inbounds i8, i8* %356, i64 9
  %428 = load i8, i8* %427, align 1
  %429 = zext i8 %428 to i64
  %430 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %429
  %431 = load i8, i8* %430, align 1
  switch i8 %431, label %1236 [
    i8 120, label %432
    i8 121, label %436
    i8 122, label %440
    i8 40, label %455
    i8 51, label %444
  ]

432:                                              ; preds = %426
  %433 = getelementptr inbounds i8, i8* %356, i64 10
  %434 = load i8, i8* %433, align 1
  %435 = icmp eq i8 %434, 40
  br i1 %435, label %455, label %1236

436:                                              ; preds = %426
  %437 = getelementptr inbounds i8, i8* %356, i64 10
  %438 = load i8, i8* %437, align 1
  %439 = icmp eq i8 %438, 40
  br i1 %439, label %455, label %1236

440:                                              ; preds = %426
  %441 = getelementptr inbounds i8, i8* %356, i64 10
  %442 = load i8, i8* %441, align 1
  %443 = icmp eq i8 %442, 40
  br i1 %443, label %455, label %1236

444:                                              ; preds = %426
  %445 = getelementptr inbounds i8, i8* %356, i64 10
  %446 = load i8, i8* %445, align 1
  %447 = zext i8 %446 to i64
  %448 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %447
  %449 = load i8, i8* %448, align 1
  %450 = icmp eq i8 %449, 100
  br i1 %450, label %451, label %1236

451:                                              ; preds = %444
  %452 = getelementptr inbounds i8, i8* %356, i64 11
  %453 = load i8, i8* %452, align 1
  %454 = icmp eq i8 %453, 40
  br i1 %454, label %455, label %1236

455:                                              ; preds = %451, %440, %436, %432, %426
  %456 = phi i32 [ 807, %432 ], [ 808, %436 ], [ 809, %440 ], [ 806, %426 ], [ 810, %451 ]
  %457 = phi i32 [ 1, %432 ], [ 1, %436 ], [ 1, %440 ], [ 2, %426 ], [ 3, %451 ]
  %458 = phi i64 [ 11, %432 ], [ 11, %436 ], [ 11, %440 ], [ 10, %426 ], [ 12, %451 ]
  %459 = getelementptr inbounds i8, i8* %356, i64 %458
  store i8* %459, i8** %5, align 8
  %460 = call i8* @_ZN5blink8CSSValue14AllocateObjectINS_16CSSFunctionValueEEEPvm(i64 64) #9
  %461 = bitcast i8* %460 to %"class.blink::CSSFunctionValue"*
  %462 = bitcast i8* %460 to %"class.blink::CSSValueList"*
  call void @_ZN5blink12CSSValueListC2ENS_8CSSValue9ClassTypeENS1_18ValueListSeparatorE(%"class.blink::CSSValueList"* %462, i32 53, i32 1) #9
  %463 = getelementptr inbounds i8, i8* %460, i64 56
  %464 = bitcast i8* %463 to i32*
  store i32 %456, i32* %464, align 8
  %465 = getelementptr inbounds i8, i8* %460, i64 -4
  %466 = bitcast i8* %465 to i16*
  %467 = load atomic i16, i16* %466 monotonic, align 2
  %468 = or i16 %467, 1
  store atomic i16 %468, i16* %466 release, align 2
  %469 = getelementptr inbounds i8, i8* %460, i64 8
  %470 = bitcast i8* %469 to %"class.WTF::Vector"*
  %471 = getelementptr inbounds i8, i8* %460, i64 20
  %472 = bitcast i8* %471 to i32*
  %473 = getelementptr inbounds i8, i8* %460, i64 16
  %474 = bitcast i8* %473 to i32*
  %475 = bitcast i8* %469 to %"class.blink::Member"**
  %476 = load i8*, i8** %5, align 8
  br label %477

477:                                              ; preds = %560, %455
  %478 = phi i8* [ %476, %455 ], [ %563, %560 ]
  %479 = phi i32 [ %457, %455 ], [ %564, %560 ]
  %480 = ptrtoint i8* %478 to i64
  %481 = sub i64 %350, %480
  %482 = trunc i64 %481 to i32
  %483 = icmp eq i32 %482, 0
  br i1 %483, label %724, label %484

484:                                              ; preds = %477
  %485 = icmp eq i32 %479, 1
  %486 = select i1 %485, i32 41, i32 44
  %487 = and i64 %481, 4294967295
  %488 = call i8* @memchr(i8* %478, i32 %486, i64 %487) #10
  %489 = icmp eq i8* %488, null
  %490 = ptrtoint i8* %488 to i64
  %491 = sub i64 %490, %480
  %492 = trunc i64 %491 to i32
  %493 = icmp eq i32 %492, -1
  %494 = or i1 %489, %493
  br i1 %494, label %724, label %495

495:                                              ; preds = %484
  %496 = icmp ugt i32 %492, 2
  br i1 %496, label %497, label %511

497:                                              ; preds = %495
  %498 = add i32 %492, -2
  %499 = zext i32 %498 to i64
  %500 = getelementptr inbounds i8, i8* %478, i64 %499
  %501 = load i8, i8* %500, align 1
  %502 = or i8 %501, 32
  %503 = icmp eq i8 %502, 112
  br i1 %503, label %504, label %513

504:                                              ; preds = %497
  %505 = add i64 %491, 4294967295
  %506 = and i64 %505, 4294967295
  %507 = getelementptr inbounds i8, i8* %478, i64 %506
  %508 = load i8, i8* %507, align 1
  %509 = or i8 %508, 32
  %510 = icmp eq i8 %509, 120
  br i1 %510, label %521, label %513

511:                                              ; preds = %495
  %512 = icmp eq i32 %492, 2
  br i1 %512, label %513, label %521

513:                                              ; preds = %511, %504, %497
  %514 = add i32 %492, -1
  %515 = zext i32 %514 to i64
  %516 = getelementptr inbounds i8, i8* %478, i64 %515
  %517 = load i8, i8* %516, align 1
  %518 = icmp eq i8 %517, 37
  %519 = select i1 %518, i32 2, i32 1
  %520 = select i1 %518, i32 %514, i32 %492
  br label %521

521:                                              ; preds = %513, %511, %504
  %522 = phi i32 [ 1, %511 ], [ 5, %504 ], [ %519, %513 ]
  %523 = phi i32 [ %492, %511 ], [ %498, %504 ], [ %520, %513 ]
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #9
  store i8 -86, i8* %4, align 1
  %524 = zext i32 %523 to i64
  %525 = call double @_ZN3WTF18CharactersToDoubleEPKhmPb(i8* %478, i64 %524, i8* nonnull %4) #9
  %526 = load i8, i8* %4, align 1, !range !2
  %527 = icmp eq i8 %526, 0
  br i1 %527, label %528, label %529

528:                                              ; preds = %521
  store i8* %478, i8** %5, align 8
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #9
  br label %1236

529:                                              ; preds = %521
  %530 = fcmp ult double %525, 0x47EFFFFFE0000000
  %531 = fcmp ole double %525, 0xC7EFFFFFE0000000
  %532 = select i1 %531, double 0xC7EFFFFFE0000000, double %525
  %533 = select i1 %530, double %532, double 0x47EFFFFFE0000000
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #9
  %534 = icmp eq i32 %522, 5
  br i1 %534, label %539, label %535

535:                                              ; preds = %529
  %536 = fcmp une double %533, 0.000000e+00
  %537 = icmp ne i32 %522, 1
  %538 = or i1 %537, %536
  br i1 %538, label %724, label %539

539:                                              ; preds = %535, %529
  %540 = call %"class.blink::CSSNumericLiteralValue"* @_ZN5blink22CSSNumericLiteralValue6CreateEdNS_17CSSPrimitiveValue8UnitTypeE(double %533, i32 5) #9
  %541 = load i32, i32* %472, align 4
  %542 = load i32, i32* %474, align 8
  %543 = icmp eq i32 %541, %542
  br i1 %543, label %558, label %544, !prof !3

544:                                              ; preds = %539
  %545 = load %"class.blink::Member"*, %"class.blink::Member"** %475, align 8
  %546 = zext i32 %541 to i64
  %547 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %545, i64 %546
  %548 = ptrtoint %"class.blink::CSSNumericLiteralValue"* %540 to i64
  %549 = bitcast %"class.blink::Member"* %547 to i64*
  store atomic i64 %548, i64* %549 monotonic, align 8
  %550 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %551 = icmp eq i32 %550, 0
  br i1 %551, label %555, label %552

552:                                              ; preds = %544
  %553 = getelementptr inbounds %"class.blink::CSSNumericLiteralValue", %"class.blink::CSSNumericLiteralValue"* %540, i64 0, i32 0, i32 0, i32 0
  %554 = call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %553) #9
  br label %555

555:                                              ; preds = %552, %544
  %556 = load i32, i32* %472, align 4
  %557 = add i32 %556, 1
  store i32 %557, i32* %472, align 4
  br label %560

558:                                              ; preds = %539
  %559 = getelementptr inbounds %"class.blink::CSSNumericLiteralValue", %"class.blink::CSSNumericLiteralValue"* %540, i64 0, i32 0, i32 0
  call void @_ZN3WTF6VectorIN5blink6MemberIKNS1_8CSSValueEEELj4ENS1_13HeapAllocatorEE14AppendSlowCaseIRS4_EEvOT_(%"class.WTF::Vector"* %470, %"class.blink::CSSValue"* dereferenceable(3) %559) #9
  br label %560

560:                                              ; preds = %558, %555
  %561 = add i64 %491, 1
  %562 = and i64 %561, 4294967295
  %563 = getelementptr inbounds i8, i8* %478, i64 %562
  %564 = add nsw i32 %479, -1
  %565 = icmp eq i32 %564, 0
  br i1 %565, label %683, label %477

566:                                              ; preds = %365
  %567 = getelementptr inbounds i8, i8* %356, i64 1
  %568 = load i8, i8* %567, align 1
  %569 = zext i8 %568 to i64
  %570 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %569
  %571 = load i8, i8* %570, align 1
  %572 = icmp eq i8 %571, 97
  br i1 %572, label %573, label %1236

573:                                              ; preds = %566
  %574 = getelementptr inbounds i8, i8* %356, i64 2
  %575 = load i8, i8* %574, align 1
  %576 = zext i8 %575 to i64
  %577 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %576
  %578 = load i8, i8* %577, align 1
  %579 = icmp eq i8 %578, 116
  br i1 %579, label %580, label %1236

580:                                              ; preds = %573
  %581 = getelementptr inbounds i8, i8* %356, i64 3
  %582 = load i8, i8* %581, align 1
  %583 = zext i8 %582 to i64
  %584 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %583
  %585 = load i8, i8* %584, align 1
  %586 = icmp eq i8 %585, 114
  br i1 %586, label %587, label %1236

587:                                              ; preds = %580
  %588 = getelementptr inbounds i8, i8* %356, i64 4
  %589 = load i8, i8* %588, align 1
  %590 = zext i8 %589 to i64
  %591 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %590
  %592 = load i8, i8* %591, align 1
  %593 = icmp eq i8 %592, 105
  br i1 %593, label %594, label %1236

594:                                              ; preds = %587
  %595 = getelementptr inbounds i8, i8* %356, i64 5
  %596 = load i8, i8* %595, align 1
  %597 = zext i8 %596 to i64
  %598 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %597
  %599 = load i8, i8* %598, align 1
  %600 = icmp eq i8 %599, 120
  br i1 %600, label %601, label %1236

601:                                              ; preds = %594
  %602 = getelementptr inbounds i8, i8* %356, i64 6
  %603 = load i8, i8* %602, align 1
  %604 = icmp eq i8 %603, 51
  br i1 %604, label %605, label %1236

605:                                              ; preds = %601
  %606 = getelementptr inbounds i8, i8* %356, i64 7
  %607 = load i8, i8* %606, align 1
  %608 = zext i8 %607 to i64
  %609 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %608
  %610 = load i8, i8* %609, align 1
  %611 = icmp eq i8 %610, 100
  br i1 %611, label %612, label %1236

612:                                              ; preds = %605
  %613 = getelementptr inbounds i8, i8* %356, i64 8
  %614 = load i8, i8* %613, align 1
  %615 = icmp eq i8 %614, 40
  br i1 %615, label %616, label %1236

616:                                              ; preds = %612
  %617 = getelementptr inbounds i8, i8* %356, i64 9
  store i8* %617, i8** %5, align 8
  %618 = call i8* @_ZN5blink8CSSValue14AllocateObjectINS_16CSSFunctionValueEEEPvm(i64 64) #9
  %619 = bitcast i8* %618 to %"class.blink::CSSFunctionValue"*
  %620 = bitcast i8* %618 to %"class.blink::CSSValueList"*
  call void @_ZN5blink12CSSValueListC2ENS_8CSSValue9ClassTypeENS1_18ValueListSeparatorE(%"class.blink::CSSValueList"* %620, i32 53, i32 1) #9
  %621 = getelementptr inbounds i8, i8* %618, i64 56
  %622 = bitcast i8* %621 to i32*
  store i32 791, i32* %622, align 8
  %623 = getelementptr inbounds i8, i8* %618, i64 -4
  %624 = bitcast i8* %623 to i16*
  %625 = load atomic i16, i16* %624 monotonic, align 2
  %626 = or i16 %625, 1
  store atomic i16 %626, i16* %624 release, align 2
  %627 = call fastcc zeroext i1 @_ZN5blinkL29ParseTransformNumberArgumentsIKhEEbRPT_S3_jPNS_16CSSFunctionValueE(i8** nonnull dereferenceable(8) %5, i8* %349, i32 16, %"class.blink::CSSFunctionValue"* %619) #9
  br i1 %627, label %684, label %1236

628:                                              ; preds = %365
  %629 = getelementptr inbounds i8, i8* %356, i64 1
  %630 = load i8, i8* %629, align 1
  %631 = zext i8 %630 to i64
  %632 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %631
  %633 = load i8, i8* %632, align 1
  %634 = icmp eq i8 %633, 99
  br i1 %634, label %635, label %1236

635:                                              ; preds = %628
  %636 = getelementptr inbounds i8, i8* %356, i64 2
  %637 = load i8, i8* %636, align 1
  %638 = zext i8 %637 to i64
  %639 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %638
  %640 = load i8, i8* %639, align 1
  %641 = icmp eq i8 %640, 97
  br i1 %641, label %642, label %1236

642:                                              ; preds = %635
  %643 = getelementptr inbounds i8, i8* %356, i64 3
  %644 = load i8, i8* %643, align 1
  %645 = zext i8 %644 to i64
  %646 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %645
  %647 = load i8, i8* %646, align 1
  %648 = icmp eq i8 %647, 108
  br i1 %648, label %649, label %1236

649:                                              ; preds = %642
  %650 = getelementptr inbounds i8, i8* %356, i64 4
  %651 = load i8, i8* %650, align 1
  %652 = zext i8 %651 to i64
  %653 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %652
  %654 = load i8, i8* %653, align 1
  %655 = icmp eq i8 %654, 101
  br i1 %655, label %656, label %1236

656:                                              ; preds = %649
  %657 = getelementptr inbounds i8, i8* %356, i64 5
  %658 = load i8, i8* %657, align 1
  %659 = icmp eq i8 %658, 51
  br i1 %659, label %660, label %1236

660:                                              ; preds = %656
  %661 = getelementptr inbounds i8, i8* %356, i64 6
  %662 = load i8, i8* %661, align 1
  %663 = zext i8 %662 to i64
  %664 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %663
  %665 = load i8, i8* %664, align 1
  %666 = icmp eq i8 %665, 100
  br i1 %666, label %667, label %1236

667:                                              ; preds = %660
  %668 = getelementptr inbounds i8, i8* %356, i64 7
  %669 = load i8, i8* %668, align 1
  %670 = icmp eq i8 %669, 40
  br i1 %670, label %671, label %1236

671:                                              ; preds = %667
  %672 = getelementptr inbounds i8, i8* %356, i64 8
  store i8* %672, i8** %5, align 8
  %673 = call i8* @_ZN5blink8CSSValue14AllocateObjectINS_16CSSFunctionValueEEEPvm(i64 64) #9
  %674 = bitcast i8* %673 to %"class.blink::CSSFunctionValue"*
  %675 = bitcast i8* %673 to %"class.blink::CSSValueList"*
  call void @_ZN5blink12CSSValueListC2ENS_8CSSValue9ClassTypeENS1_18ValueListSeparatorE(%"class.blink::CSSValueList"* %675, i32 53, i32 1) #9
  %676 = getelementptr inbounds i8, i8* %673, i64 56
  %677 = bitcast i8* %676 to i32*
  store i32 802, i32* %677, align 8
  %678 = getelementptr inbounds i8, i8* %673, i64 -4
  %679 = bitcast i8* %678 to i16*
  %680 = load atomic i16, i16* %679 monotonic, align 2
  %681 = or i16 %680, 1
  store atomic i16 %681, i16* %679 release, align 2
  %682 = call fastcc zeroext i1 @_ZN5blinkL29ParseTransformNumberArgumentsIKhEEbRPT_S3_jPNS_16CSSFunctionValueE(i8** nonnull dereferenceable(8) %5, i8* %349, i32 3, %"class.blink::CSSFunctionValue"* %674) #9
  br i1 %682, label %684, label %1236

683:                                              ; preds = %560
  store i8* %563, i8** %5, align 8
  br label %684

684:                                              ; preds = %683, %671, %616
  %685 = phi %"class.blink::CSSFunctionValue"* [ %619, %616 ], [ %674, %671 ], [ %461, %683 ]
  %686 = icmp eq %"class.blink::CSSFunctionValue"* %685, null
  br i1 %686, label %1236, label %687

687:                                              ; preds = %684
  %688 = icmp eq %"class.blink::CSSValueList"* %353, null
  br i1 %688, label %689, label %696

689:                                              ; preds = %687
  %690 = call i8* @_ZN5blink8CSSValue14AllocateObjectINS_12CSSValueListEEEPvm(i64 56) #9
  %691 = bitcast i8* %690 to %"class.blink::CSSValueList"*
  call void @_ZN5blink12CSSValueListC1ENS_8CSSValue18ValueListSeparatorE(%"class.blink::CSSValueList"* %691, i32 0) #9
  %692 = getelementptr inbounds i8, i8* %690, i64 -4
  %693 = bitcast i8* %692 to i16*
  %694 = load atomic i16, i16* %693 monotonic, align 2
  %695 = or i16 %694, 1
  store atomic i16 %695, i16* %693 release, align 2
  br label %696

696:                                              ; preds = %689, %687
  %697 = phi %"class.blink::CSSValueList"* [ %353, %687 ], [ %691, %689 ]
  %698 = getelementptr inbounds %"class.blink::CSSValueList", %"class.blink::CSSValueList"* %697, i64 0, i32 1, i32 0
  %699 = getelementptr inbounds %"class.blink::CSSValueList", %"class.blink::CSSValueList"* %697, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %700 = load i32, i32* %699, align 4
  %701 = getelementptr inbounds %"class.blink::CSSValueList", %"class.blink::CSSValueList"* %697, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %702 = load i32, i32* %701, align 8
  %703 = icmp eq i32 %700, %702
  br i1 %703, label %719, label %704, !prof !3

704:                                              ; preds = %696
  %705 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %698, i64 0, i32 0, i32 0, i32 0
  %706 = load %"class.blink::Member"*, %"class.blink::Member"** %705, align 8
  %707 = zext i32 %700 to i64
  %708 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %706, i64 %707
  %709 = ptrtoint %"class.blink::CSSFunctionValue"* %685 to i64
  %710 = bitcast %"class.blink::Member"* %708 to i64*
  store atomic i64 %709, i64* %710 monotonic, align 8
  %711 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %712 = icmp eq i32 %711, 0
  br i1 %712, label %716, label %713

713:                                              ; preds = %704
  %714 = getelementptr inbounds %"class.blink::CSSFunctionValue", %"class.blink::CSSFunctionValue"* %685, i64 0, i32 0, i32 0, i32 0
  %715 = call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %714) #9
  br label %716

716:                                              ; preds = %713, %704
  %717 = load i32, i32* %699, align 4
  %718 = add i32 %717, 1
  store i32 %718, i32* %699, align 4
  br label %721

719:                                              ; preds = %696
  %720 = getelementptr inbounds %"class.blink::CSSFunctionValue", %"class.blink::CSSFunctionValue"* %685, i64 0, i32 0, i32 0
  call void @_ZN3WTF6VectorIN5blink6MemberIKNS1_8CSSValueEEELj4ENS1_13HeapAllocatorEE14AppendSlowCaseIRS4_EEvOT_(%"class.WTF::Vector"* %698, %"class.blink::CSSValue"* dereferenceable(3) %720) #9
  br label %721

721:                                              ; preds = %719, %716
  %722 = load i8*, i8** %5, align 8
  %723 = icmp ult i8* %722, %349
  br i1 %723, label %351, label %1236

724:                                              ; preds = %535, %484, %477
  store i8* %478, i8** %5, align 8
  br label %1236

725:                                              ; preds = %358
  store i8* %349, i8** %5, align 8
  br label %1236

726:                                              ; preds = %265
  %727 = bitcast %"class.WTF::StringImpl"* %273 to i16*
  %728 = select i1 %272, i16* null, i16* %727
  br i1 %272, label %729, label %731

729:                                              ; preds = %726
  %730 = bitcast i16** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %730) #9
  store i16* %728, i16** %7, align 8
  br label %1236

731:                                              ; preds = %726
  %732 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %267, i64 0, i32 1
  %733 = load i32, i32* %732, align 4
  %734 = bitcast i16** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %734) #9
  store i16* %728, i16** %7, align 8
  %735 = icmp eq i32 %733, 0
  br i1 %735, label %1236, label %736

736:                                              ; preds = %731, %741
  %737 = phi i32 [ %743, %741 ], [ 0, %731 ]
  %738 = zext i32 %737 to i64
  %739 = getelementptr inbounds i16, i16* %728, i64 %738
  %740 = load i16, i16* %739, align 2
  switch i16 %740, label %745 [
    i16 32, label %741
    i16 9, label %741
    i16 10, label %741
  ]

741:                                              ; preds = %802, %736, %736, %736
  %742 = phi i32 [ %803, %802 ], [ %737, %736 ], [ %737, %736 ], [ %737, %736 ]
  %743 = add i32 %742, 1
  %744 = icmp ult i32 %743, %733
  br i1 %744, label %736, label %805

745:                                              ; preds = %736
  %746 = sub i32 %733, %737
  %747 = icmp ult i32 %746, 12
  br i1 %747, label %1236, label %748

748:                                              ; preds = %745
  %749 = add i16 %740, -65
  %750 = icmp ult i16 %749, 26
  %751 = zext i1 %750 to i16
  %752 = shl nuw nsw i16 %751, 5
  %753 = or i16 %752, %740
  switch i16 %753, label %1236 [
    i16 116, label %754
    i16 109, label %765
    i16 115, label %776
  ]

754:                                              ; preds = %748
  %755 = add i32 %737, 8
  %756 = zext i32 %755 to i64
  %757 = getelementptr inbounds i16, i16* %728, i64 %756
  %758 = load i16, i16* %757, align 2
  %759 = add i16 %758, -65
  %760 = icmp ult i16 %759, 26
  %761 = zext i1 %760 to i16
  %762 = shl nuw nsw i16 %761, 5
  %763 = or i16 %762, %758
  %764 = icmp eq i16 %763, 101
  br i1 %764, label %787, label %1236

765:                                              ; preds = %748
  %766 = add i32 %737, 7
  %767 = zext i32 %766 to i64
  %768 = getelementptr inbounds i16, i16* %728, i64 %767
  %769 = load i16, i16* %768, align 2
  %770 = add i16 %769, -65
  %771 = icmp ult i16 %770, 26
  %772 = zext i1 %771 to i16
  %773 = shl nuw nsw i16 %772, 5
  %774 = or i16 %773, %769
  %775 = icmp eq i16 %774, 100
  br i1 %775, label %787, label %1236

776:                                              ; preds = %748
  %777 = add i32 %737, 6
  %778 = zext i32 %777 to i64
  %779 = getelementptr inbounds i16, i16* %728, i64 %778
  %780 = load i16, i16* %779, align 2
  %781 = add i16 %780, -65
  %782 = icmp ult i16 %781, 26
  %783 = zext i1 %782 to i16
  %784 = shl nuw nsw i16 %783, 5
  %785 = or i16 %784, %780
  %786 = icmp eq i16 %785, 100
  br i1 %786, label %787, label %1236

787:                                              ; preds = %776, %765, %754
  %788 = phi i32 [ 9, %754 ], [ 8, %765 ], [ 7, %776 ]
  %789 = add i32 %737, %788
  %790 = icmp ult i32 %789, %733
  br i1 %790, label %791, label %1236

791:                                              ; preds = %787
  %792 = zext i32 %789 to i64
  br label %793

793:                                              ; preds = %798, %791
  %794 = phi i64 [ %792, %791 ], [ %799, %798 ]
  %795 = getelementptr inbounds i16, i16* %728, i64 %794
  %796 = load i16, i16* %795, align 2
  %797 = icmp eq i16 %796, 41
  br i1 %797, label %802, label %798

798:                                              ; preds = %793
  %799 = add nuw nsw i64 %794, 1
  %800 = trunc i64 %799 to i32
  %801 = icmp eq i32 %733, %800
  br i1 %801, label %1236, label %793

802:                                              ; preds = %793
  %803 = trunc i64 %794 to i32
  %804 = icmp eq i32 %803, -1
  br i1 %804, label %1236, label %741

805:                                              ; preds = %741
  %806 = icmp eq i32 %743, %733
  br i1 %806, label %807, label %1236

807:                                              ; preds = %805
  %808 = zext i32 %733 to i64
  %809 = getelementptr inbounds i16, i16* %728, i64 %808
  %810 = ptrtoint i16* %809 to i64
  br label %811

811:                                              ; preds = %1230, %807
  %812 = phi i16* [ %728, %807 ], [ %1231, %1230 ]
  %813 = phi %"class.blink::CSSValueList"* [ null, %807 ], [ %1206, %1230 ]
  %814 = icmp ult i16* %812, %809
  br i1 %814, label %815, label %1236

815:                                              ; preds = %811, %818
  %816 = phi i16* [ %819, %818 ], [ %812, %811 ]
  %817 = load i16, i16* %816, align 2
  switch i16 %817, label %821 [
    i16 32, label %818
    i16 9, label %818
    i16 10, label %818
  ]

818:                                              ; preds = %815, %815, %815
  %819 = getelementptr inbounds i16, i16* %816, i64 1
  %820 = icmp ult i16* %819, %809
  br i1 %820, label %815, label %1235

821:                                              ; preds = %815
  store i16* %816, i16** %7, align 8
  %822 = ptrtoint i16* %816 to i64
  %823 = sub i64 %810, %822
  %824 = icmp slt i64 %823, 24
  br i1 %824, label %1236, label %825

825:                                              ; preds = %821
  %826 = load i16, i16* %816, align 2
  %827 = add i16 %826, -65
  %828 = icmp ult i16 %827, 26
  %829 = zext i1 %828 to i16
  %830 = shl nuw nsw i16 %829, 5
  %831 = or i16 %830, %826
  switch i16 %831, label %1236 [
    i16 116, label %832
    i16 109, label %1053
    i16 115, label %1127
  ]

832:                                              ; preds = %825
  %833 = getelementptr inbounds i16, i16* %816, i64 1
  %834 = load i16, i16* %833, align 2
  %835 = add i16 %834, -65
  %836 = icmp ult i16 %835, 26
  %837 = zext i1 %836 to i16
  %838 = shl nuw nsw i16 %837, 5
  %839 = or i16 %838, %834
  %840 = icmp eq i16 %839, 114
  br i1 %840, label %841, label %1236

841:                                              ; preds = %832
  %842 = getelementptr inbounds i16, i16* %816, i64 2
  %843 = load i16, i16* %842, align 2
  %844 = add i16 %843, -65
  %845 = icmp ult i16 %844, 26
  %846 = zext i1 %845 to i16
  %847 = shl nuw nsw i16 %846, 5
  %848 = or i16 %847, %843
  %849 = icmp eq i16 %848, 97
  br i1 %849, label %850, label %1236

850:                                              ; preds = %841
  %851 = getelementptr inbounds i16, i16* %816, i64 3
  %852 = load i16, i16* %851, align 2
  %853 = add i16 %852, -65
  %854 = icmp ult i16 %853, 26
  %855 = zext i1 %854 to i16
  %856 = shl nuw nsw i16 %855, 5
  %857 = or i16 %856, %852
  %858 = icmp eq i16 %857, 110
  br i1 %858, label %859, label %1236

859:                                              ; preds = %850
  %860 = getelementptr inbounds i16, i16* %816, i64 4
  %861 = load i16, i16* %860, align 2
  %862 = add i16 %861, -65
  %863 = icmp ult i16 %862, 26
  %864 = zext i1 %863 to i16
  %865 = shl nuw nsw i16 %864, 5
  %866 = or i16 %865, %861
  %867 = icmp eq i16 %866, 115
  br i1 %867, label %868, label %1236

868:                                              ; preds = %859
  %869 = getelementptr inbounds i16, i16* %816, i64 5
  %870 = load i16, i16* %869, align 2
  %871 = add i16 %870, -65
  %872 = icmp ult i16 %871, 26
  %873 = zext i1 %872 to i16
  %874 = shl nuw nsw i16 %873, 5
  %875 = or i16 %874, %870
  %876 = icmp eq i16 %875, 108
  br i1 %876, label %877, label %1236

877:                                              ; preds = %868
  %878 = getelementptr inbounds i16, i16* %816, i64 6
  %879 = load i16, i16* %878, align 2
  %880 = add i16 %879, -65
  %881 = icmp ult i16 %880, 26
  %882 = zext i1 %881 to i16
  %883 = shl nuw nsw i16 %882, 5
  %884 = or i16 %883, %879
  %885 = icmp eq i16 %884, 97
  br i1 %885, label %886, label %1236

886:                                              ; preds = %877
  %887 = getelementptr inbounds i16, i16* %816, i64 7
  %888 = load i16, i16* %887, align 2
  %889 = add i16 %888, -65
  %890 = icmp ult i16 %889, 26
  %891 = zext i1 %890 to i16
  %892 = shl nuw nsw i16 %891, 5
  %893 = or i16 %892, %888
  %894 = icmp eq i16 %893, 116
  br i1 %894, label %895, label %1236

895:                                              ; preds = %886
  %896 = getelementptr inbounds i16, i16* %816, i64 8
  %897 = load i16, i16* %896, align 2
  %898 = add i16 %897, -65
  %899 = icmp ult i16 %898, 26
  %900 = zext i1 %899 to i16
  %901 = shl nuw nsw i16 %900, 5
  %902 = or i16 %901, %897
  %903 = icmp eq i16 %902, 101
  br i1 %903, label %904, label %1236

904:                                              ; preds = %895
  %905 = getelementptr inbounds i16, i16* %816, i64 9
  %906 = load i16, i16* %905, align 2
  %907 = add i16 %906, -65
  %908 = icmp ult i16 %907, 26
  %909 = zext i1 %908 to i16
  %910 = shl nuw nsw i16 %909, 5
  %911 = or i16 %910, %906
  switch i16 %911, label %1236 [
    i16 120, label %912
    i16 121, label %916
    i16 122, label %920
    i16 40, label %937
    i16 51, label %924
  ]

912:                                              ; preds = %904
  %913 = getelementptr inbounds i16, i16* %816, i64 10
  %914 = load i16, i16* %913, align 2
  %915 = icmp eq i16 %914, 40
  br i1 %915, label %937, label %1236

916:                                              ; preds = %904
  %917 = getelementptr inbounds i16, i16* %816, i64 10
  %918 = load i16, i16* %917, align 2
  %919 = icmp eq i16 %918, 40
  br i1 %919, label %937, label %1236

920:                                              ; preds = %904
  %921 = getelementptr inbounds i16, i16* %816, i64 10
  %922 = load i16, i16* %921, align 2
  %923 = icmp eq i16 %922, 40
  br i1 %923, label %937, label %1236

924:                                              ; preds = %904
  %925 = getelementptr inbounds i16, i16* %816, i64 10
  %926 = load i16, i16* %925, align 2
  %927 = add i16 %926, -65
  %928 = icmp ult i16 %927, 26
  %929 = zext i1 %928 to i16
  %930 = shl nuw nsw i16 %929, 5
  %931 = or i16 %930, %926
  %932 = icmp eq i16 %931, 100
  br i1 %932, label %933, label %1236

933:                                              ; preds = %924
  %934 = getelementptr inbounds i16, i16* %816, i64 11
  %935 = load i16, i16* %934, align 2
  %936 = icmp eq i16 %935, 40
  br i1 %936, label %937, label %1236

937:                                              ; preds = %933, %920, %916, %912, %904
  %938 = phi i32 [ 807, %912 ], [ 808, %916 ], [ 809, %920 ], [ 806, %904 ], [ 810, %933 ]
  %939 = phi i32 [ 1, %912 ], [ 1, %916 ], [ 1, %920 ], [ 2, %904 ], [ 3, %933 ]
  %940 = phi i64 [ 11, %912 ], [ 11, %916 ], [ 11, %920 ], [ 10, %904 ], [ 12, %933 ]
  %941 = getelementptr inbounds i16, i16* %816, i64 %940
  store i16* %941, i16** %7, align 8
  %942 = call i8* @_ZN5blink8CSSValue14AllocateObjectINS_16CSSFunctionValueEEEPvm(i64 64) #9
  %943 = bitcast i8* %942 to %"class.blink::CSSFunctionValue"*
  %944 = bitcast i8* %942 to %"class.blink::CSSValueList"*
  call void @_ZN5blink12CSSValueListC2ENS_8CSSValue9ClassTypeENS1_18ValueListSeparatorE(%"class.blink::CSSValueList"* %944, i32 53, i32 1) #9
  %945 = getelementptr inbounds i8, i8* %942, i64 56
  %946 = bitcast i8* %945 to i32*
  store i32 %938, i32* %946, align 8
  %947 = getelementptr inbounds i8, i8* %942, i64 -4
  %948 = bitcast i8* %947 to i16*
  %949 = load atomic i16, i16* %948 monotonic, align 2
  %950 = or i16 %949, 1
  store atomic i16 %950, i16* %948 release, align 2
  %951 = getelementptr inbounds i8, i8* %942, i64 8
  %952 = bitcast i8* %951 to %"class.WTF::Vector"*
  %953 = getelementptr inbounds i8, i8* %942, i64 20
  %954 = bitcast i8* %953 to i32*
  %955 = getelementptr inbounds i8, i8* %942, i64 16
  %956 = bitcast i8* %955 to i32*
  %957 = bitcast i8* %951 to %"class.blink::Member"**
  %958 = load i16*, i16** %7, align 8
  br label %959

959:                                              ; preds = %1047, %937
  %960 = phi i16* [ %958, %937 ], [ %1050, %1047 ]
  %961 = phi i32 [ %939, %937 ], [ %1051, %1047 ]
  %962 = ptrtoint i16* %960 to i64
  %963 = sub i64 %810, %962
  %964 = lshr exact i64 %963, 1
  %965 = trunc i64 %964 to i32
  %966 = icmp eq i32 %961, 1
  %967 = select i1 %966, i16 41, i16 44
  %968 = icmp eq i32 %965, 0
  br i1 %968, label %1234, label %969

969:                                              ; preds = %959
  %970 = and i64 %964, 4294967295
  br label %971

971:                                              ; preds = %976, %969
  %972 = phi i64 [ %977, %976 ], [ 0, %969 ]
  %973 = getelementptr inbounds i16, i16* %960, i64 %972
  %974 = load i16, i16* %973, align 2
  %975 = icmp eq i16 %974, %967
  br i1 %975, label %979, label %976

976:                                              ; preds = %971
  %977 = add nuw nsw i64 %972, 1
  %978 = icmp eq i64 %977, %970
  br i1 %978, label %1233, label %971

979:                                              ; preds = %971
  %980 = trunc i64 %972 to i32
  %981 = icmp eq i32 %980, -1
  br i1 %981, label %1234, label %982

982:                                              ; preds = %979
  %983 = icmp ugt i32 %980, 2
  br i1 %983, label %984, label %998

984:                                              ; preds = %982
  %985 = add i32 %980, -2
  %986 = zext i32 %985 to i64
  %987 = getelementptr inbounds i16, i16* %960, i64 %986
  %988 = load i16, i16* %987, align 2
  %989 = or i16 %988, 32
  %990 = icmp eq i16 %989, 112
  br i1 %990, label %991, label %1000

991:                                              ; preds = %984
  %992 = add nuw i64 %972, 4294967295
  %993 = and i64 %992, 4294967295
  %994 = getelementptr inbounds i16, i16* %960, i64 %993
  %995 = load i16, i16* %994, align 2
  %996 = or i16 %995, 32
  %997 = icmp eq i16 %996, 120
  br i1 %997, label %1008, label %1000

998:                                              ; preds = %982
  %999 = icmp eq i32 %980, 2
  br i1 %999, label %1000, label %1008

1000:                                             ; preds = %998, %991, %984
  %1001 = add i32 %980, -1
  %1002 = zext i32 %1001 to i64
  %1003 = getelementptr inbounds i16, i16* %960, i64 %1002
  %1004 = load i16, i16* %1003, align 2
  %1005 = icmp eq i16 %1004, 37
  %1006 = select i1 %1005, i32 2, i32 1
  %1007 = select i1 %1005, i32 %1001, i32 %980
  br label %1008

1008:                                             ; preds = %1000, %998, %991
  %1009 = phi i32 [ 1, %998 ], [ 5, %991 ], [ %1006, %1000 ]
  %1010 = phi i32 [ %980, %998 ], [ %985, %991 ], [ %1007, %1000 ]
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %6) #9
  store i8 -86, i8* %6, align 1
  %1011 = zext i32 %1010 to i64
  %1012 = call double @_ZN3WTF18CharactersToDoubleEPKDsmPb(i16* %960, i64 %1011, i8* nonnull %6) #9
  %1013 = load i8, i8* %6, align 1, !range !2
  %1014 = icmp eq i8 %1013, 0
  br i1 %1014, label %1015, label %1016

1015:                                             ; preds = %1008
  store i16* %960, i16** %7, align 8
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #9
  br label %1236

1016:                                             ; preds = %1008
  %1017 = fcmp ult double %1012, 0x47EFFFFFE0000000
  %1018 = fcmp ole double %1012, 0xC7EFFFFFE0000000
  %1019 = select i1 %1018, double 0xC7EFFFFFE0000000, double %1012
  %1020 = select i1 %1017, double %1019, double 0x47EFFFFFE0000000
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #9
  %1021 = icmp eq i32 %1009, 5
  br i1 %1021, label %1026, label %1022

1022:                                             ; preds = %1016
  %1023 = fcmp une double %1020, 0.000000e+00
  %1024 = icmp ne i32 %1009, 1
  %1025 = or i1 %1024, %1023
  br i1 %1025, label %1234, label %1026

1026:                                             ; preds = %1022, %1016
  %1027 = call %"class.blink::CSSNumericLiteralValue"* @_ZN5blink22CSSNumericLiteralValue6CreateEdNS_17CSSPrimitiveValue8UnitTypeE(double %1020, i32 5) #9
  %1028 = load i32, i32* %954, align 4
  %1029 = load i32, i32* %956, align 8
  %1030 = icmp eq i32 %1028, %1029
  br i1 %1030, label %1045, label %1031, !prof !3

1031:                                             ; preds = %1026
  %1032 = load %"class.blink::Member"*, %"class.blink::Member"** %957, align 8
  %1033 = zext i32 %1028 to i64
  %1034 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %1032, i64 %1033
  %1035 = ptrtoint %"class.blink::CSSNumericLiteralValue"* %1027 to i64
  %1036 = bitcast %"class.blink::Member"* %1034 to i64*
  store atomic i64 %1035, i64* %1036 monotonic, align 8
  %1037 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %1038 = icmp eq i32 %1037, 0
  br i1 %1038, label %1042, label %1039

1039:                                             ; preds = %1031
  %1040 = getelementptr inbounds %"class.blink::CSSNumericLiteralValue", %"class.blink::CSSNumericLiteralValue"* %1027, i64 0, i32 0, i32 0, i32 0
  %1041 = call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %1040) #9
  br label %1042

1042:                                             ; preds = %1039, %1031
  %1043 = load i32, i32* %954, align 4
  %1044 = add i32 %1043, 1
  store i32 %1044, i32* %954, align 4
  br label %1047

1045:                                             ; preds = %1026
  %1046 = getelementptr inbounds %"class.blink::CSSNumericLiteralValue", %"class.blink::CSSNumericLiteralValue"* %1027, i64 0, i32 0, i32 0
  call void @_ZN3WTF6VectorIN5blink6MemberIKNS1_8CSSValueEEELj4ENS1_13HeapAllocatorEE14AppendSlowCaseIRS4_EEvOT_(%"class.WTF::Vector"* %952, %"class.blink::CSSValue"* dereferenceable(3) %1046) #9
  br label %1047

1047:                                             ; preds = %1045, %1042
  %1048 = add nuw i64 %972, 1
  %1049 = and i64 %1048, 4294967295
  %1050 = getelementptr inbounds i16, i16* %960, i64 %1049
  %1051 = add nsw i32 %961, -1
  %1052 = icmp eq i32 %1051, 0
  br i1 %1052, label %1192, label %959

1053:                                             ; preds = %825
  %1054 = getelementptr inbounds i16, i16* %816, i64 1
  %1055 = load i16, i16* %1054, align 2
  %1056 = add i16 %1055, -65
  %1057 = icmp ult i16 %1056, 26
  %1058 = zext i1 %1057 to i16
  %1059 = shl nuw nsw i16 %1058, 5
  %1060 = or i16 %1059, %1055
  %1061 = icmp eq i16 %1060, 97
  br i1 %1061, label %1062, label %1236

1062:                                             ; preds = %1053
  %1063 = getelementptr inbounds i16, i16* %816, i64 2
  %1064 = load i16, i16* %1063, align 2
  %1065 = add i16 %1064, -65
  %1066 = icmp ult i16 %1065, 26
  %1067 = zext i1 %1066 to i16
  %1068 = shl nuw nsw i16 %1067, 5
  %1069 = or i16 %1068, %1064
  %1070 = icmp eq i16 %1069, 116
  br i1 %1070, label %1071, label %1236

1071:                                             ; preds = %1062
  %1072 = getelementptr inbounds i16, i16* %816, i64 3
  %1073 = load i16, i16* %1072, align 2
  %1074 = add i16 %1073, -65
  %1075 = icmp ult i16 %1074, 26
  %1076 = zext i1 %1075 to i16
  %1077 = shl nuw nsw i16 %1076, 5
  %1078 = or i16 %1077, %1073
  %1079 = icmp eq i16 %1078, 114
  br i1 %1079, label %1080, label %1236

1080:                                             ; preds = %1071
  %1081 = getelementptr inbounds i16, i16* %816, i64 4
  %1082 = load i16, i16* %1081, align 2
  %1083 = add i16 %1082, -65
  %1084 = icmp ult i16 %1083, 26
  %1085 = zext i1 %1084 to i16
  %1086 = shl nuw nsw i16 %1085, 5
  %1087 = or i16 %1086, %1082
  %1088 = icmp eq i16 %1087, 105
  br i1 %1088, label %1089, label %1236

1089:                                             ; preds = %1080
  %1090 = getelementptr inbounds i16, i16* %816, i64 5
  %1091 = load i16, i16* %1090, align 2
  %1092 = add i16 %1091, -65
  %1093 = icmp ult i16 %1092, 26
  %1094 = zext i1 %1093 to i16
  %1095 = shl nuw nsw i16 %1094, 5
  %1096 = or i16 %1095, %1091
  %1097 = icmp eq i16 %1096, 120
  br i1 %1097, label %1098, label %1236

1098:                                             ; preds = %1089
  %1099 = getelementptr inbounds i16, i16* %816, i64 6
  %1100 = load i16, i16* %1099, align 2
  %1101 = icmp eq i16 %1100, 51
  br i1 %1101, label %1102, label %1236

1102:                                             ; preds = %1098
  %1103 = getelementptr inbounds i16, i16* %816, i64 7
  %1104 = load i16, i16* %1103, align 2
  %1105 = add i16 %1104, -65
  %1106 = icmp ult i16 %1105, 26
  %1107 = zext i1 %1106 to i16
  %1108 = shl nuw nsw i16 %1107, 5
  %1109 = or i16 %1108, %1104
  %1110 = icmp eq i16 %1109, 100
  br i1 %1110, label %1111, label %1236

1111:                                             ; preds = %1102
  %1112 = getelementptr inbounds i16, i16* %816, i64 8
  %1113 = load i16, i16* %1112, align 2
  %1114 = icmp eq i16 %1113, 40
  br i1 %1114, label %1115, label %1236

1115:                                             ; preds = %1111
  %1116 = getelementptr inbounds i16, i16* %816, i64 9
  store i16* %1116, i16** %7, align 8
  %1117 = call i8* @_ZN5blink8CSSValue14AllocateObjectINS_16CSSFunctionValueEEEPvm(i64 64) #9
  %1118 = bitcast i8* %1117 to %"class.blink::CSSFunctionValue"*
  %1119 = bitcast i8* %1117 to %"class.blink::CSSValueList"*
  call void @_ZN5blink12CSSValueListC2ENS_8CSSValue9ClassTypeENS1_18ValueListSeparatorE(%"class.blink::CSSValueList"* %1119, i32 53, i32 1) #9
  %1120 = getelementptr inbounds i8, i8* %1117, i64 56
  %1121 = bitcast i8* %1120 to i32*
  store i32 791, i32* %1121, align 8
  %1122 = getelementptr inbounds i8, i8* %1117, i64 -4
  %1123 = bitcast i8* %1122 to i16*
  %1124 = load atomic i16, i16* %1123 monotonic, align 2
  %1125 = or i16 %1124, 1
  store atomic i16 %1125, i16* %1123 release, align 2
  %1126 = call fastcc zeroext i1 @_ZN5blinkL29ParseTransformNumberArgumentsIKDsEEbRPT_S3_jPNS_16CSSFunctionValueE(i16** nonnull dereferenceable(8) %7, i16* %809, i32 16, %"class.blink::CSSFunctionValue"* %1118) #9
  br i1 %1126, label %1193, label %1236

1127:                                             ; preds = %825
  %1128 = getelementptr inbounds i16, i16* %816, i64 1
  %1129 = load i16, i16* %1128, align 2
  %1130 = add i16 %1129, -65
  %1131 = icmp ult i16 %1130, 26
  %1132 = zext i1 %1131 to i16
  %1133 = shl nuw nsw i16 %1132, 5
  %1134 = or i16 %1133, %1129
  %1135 = icmp eq i16 %1134, 99
  br i1 %1135, label %1136, label %1236

1136:                                             ; preds = %1127
  %1137 = getelementptr inbounds i16, i16* %816, i64 2
  %1138 = load i16, i16* %1137, align 2
  %1139 = add i16 %1138, -65
  %1140 = icmp ult i16 %1139, 26
  %1141 = zext i1 %1140 to i16
  %1142 = shl nuw nsw i16 %1141, 5
  %1143 = or i16 %1142, %1138
  %1144 = icmp eq i16 %1143, 97
  br i1 %1144, label %1145, label %1236

1145:                                             ; preds = %1136
  %1146 = getelementptr inbounds i16, i16* %816, i64 3
  %1147 = load i16, i16* %1146, align 2
  %1148 = add i16 %1147, -65
  %1149 = icmp ult i16 %1148, 26
  %1150 = zext i1 %1149 to i16
  %1151 = shl nuw nsw i16 %1150, 5
  %1152 = or i16 %1151, %1147
  %1153 = icmp eq i16 %1152, 108
  br i1 %1153, label %1154, label %1236

1154:                                             ; preds = %1145
  %1155 = getelementptr inbounds i16, i16* %816, i64 4
  %1156 = load i16, i16* %1155, align 2
  %1157 = add i16 %1156, -65
  %1158 = icmp ult i16 %1157, 26
  %1159 = zext i1 %1158 to i16
  %1160 = shl nuw nsw i16 %1159, 5
  %1161 = or i16 %1160, %1156
  %1162 = icmp eq i16 %1161, 101
  br i1 %1162, label %1163, label %1236

1163:                                             ; preds = %1154
  %1164 = getelementptr inbounds i16, i16* %816, i64 5
  %1165 = load i16, i16* %1164, align 2
  %1166 = icmp eq i16 %1165, 51
  br i1 %1166, label %1167, label %1236

1167:                                             ; preds = %1163
  %1168 = getelementptr inbounds i16, i16* %816, i64 6
  %1169 = load i16, i16* %1168, align 2
  %1170 = add i16 %1169, -65
  %1171 = icmp ult i16 %1170, 26
  %1172 = zext i1 %1171 to i16
  %1173 = shl nuw nsw i16 %1172, 5
  %1174 = or i16 %1173, %1169
  %1175 = icmp eq i16 %1174, 100
  br i1 %1175, label %1176, label %1236

1176:                                             ; preds = %1167
  %1177 = getelementptr inbounds i16, i16* %816, i64 7
  %1178 = load i16, i16* %1177, align 2
  %1179 = icmp eq i16 %1178, 40
  br i1 %1179, label %1180, label %1236

1180:                                             ; preds = %1176
  %1181 = getelementptr inbounds i16, i16* %816, i64 8
  store i16* %1181, i16** %7, align 8
  %1182 = call i8* @_ZN5blink8CSSValue14AllocateObjectINS_16CSSFunctionValueEEEPvm(i64 64) #9
  %1183 = bitcast i8* %1182 to %"class.blink::CSSFunctionValue"*
  %1184 = bitcast i8* %1182 to %"class.blink::CSSValueList"*
  call void @_ZN5blink12CSSValueListC2ENS_8CSSValue9ClassTypeENS1_18ValueListSeparatorE(%"class.blink::CSSValueList"* %1184, i32 53, i32 1) #9
  %1185 = getelementptr inbounds i8, i8* %1182, i64 56
  %1186 = bitcast i8* %1185 to i32*
  store i32 802, i32* %1186, align 8
  %1187 = getelementptr inbounds i8, i8* %1182, i64 -4
  %1188 = bitcast i8* %1187 to i16*
  %1189 = load atomic i16, i16* %1188 monotonic, align 2
  %1190 = or i16 %1189, 1
  store atomic i16 %1190, i16* %1188 release, align 2
  %1191 = call fastcc zeroext i1 @_ZN5blinkL29ParseTransformNumberArgumentsIKDsEEbRPT_S3_jPNS_16CSSFunctionValueE(i16** nonnull dereferenceable(8) %7, i16* %809, i32 3, %"class.blink::CSSFunctionValue"* %1183) #9
  br i1 %1191, label %1193, label %1236

1192:                                             ; preds = %1047
  store i16* %1050, i16** %7, align 8
  br label %1193

1193:                                             ; preds = %1192, %1180, %1115
  %1194 = phi %"class.blink::CSSFunctionValue"* [ %1118, %1115 ], [ %1183, %1180 ], [ %943, %1192 ]
  %1195 = icmp eq %"class.blink::CSSFunctionValue"* %1194, null
  br i1 %1195, label %1236, label %1196

1196:                                             ; preds = %1193
  %1197 = icmp eq %"class.blink::CSSValueList"* %813, null
  br i1 %1197, label %1198, label %1205

1198:                                             ; preds = %1196
  %1199 = call i8* @_ZN5blink8CSSValue14AllocateObjectINS_12CSSValueListEEEPvm(i64 56) #9
  %1200 = bitcast i8* %1199 to %"class.blink::CSSValueList"*
  call void @_ZN5blink12CSSValueListC1ENS_8CSSValue18ValueListSeparatorE(%"class.blink::CSSValueList"* %1200, i32 0) #9
  %1201 = getelementptr inbounds i8, i8* %1199, i64 -4
  %1202 = bitcast i8* %1201 to i16*
  %1203 = load atomic i16, i16* %1202 monotonic, align 2
  %1204 = or i16 %1203, 1
  store atomic i16 %1204, i16* %1202 release, align 2
  br label %1205

1205:                                             ; preds = %1198, %1196
  %1206 = phi %"class.blink::CSSValueList"* [ %813, %1196 ], [ %1200, %1198 ]
  %1207 = getelementptr inbounds %"class.blink::CSSValueList", %"class.blink::CSSValueList"* %1206, i64 0, i32 1, i32 0
  %1208 = getelementptr inbounds %"class.blink::CSSValueList", %"class.blink::CSSValueList"* %1206, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %1209 = load i32, i32* %1208, align 4
  %1210 = getelementptr inbounds %"class.blink::CSSValueList", %"class.blink::CSSValueList"* %1206, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %1211 = load i32, i32* %1210, align 8
  %1212 = icmp eq i32 %1209, %1211
  br i1 %1212, label %1228, label %1213, !prof !3

1213:                                             ; preds = %1205
  %1214 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1207, i64 0, i32 0, i32 0, i32 0
  %1215 = load %"class.blink::Member"*, %"class.blink::Member"** %1214, align 8
  %1216 = zext i32 %1209 to i64
  %1217 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %1215, i64 %1216
  %1218 = ptrtoint %"class.blink::CSSFunctionValue"* %1194 to i64
  %1219 = bitcast %"class.blink::Member"* %1217 to i64*
  store atomic i64 %1218, i64* %1219 monotonic, align 8
  %1220 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %1221 = icmp eq i32 %1220, 0
  br i1 %1221, label %1225, label %1222

1222:                                             ; preds = %1213
  %1223 = getelementptr inbounds %"class.blink::CSSFunctionValue", %"class.blink::CSSFunctionValue"* %1194, i64 0, i32 0, i32 0, i32 0
  %1224 = call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %1223) #9
  br label %1225

1225:                                             ; preds = %1222, %1213
  %1226 = load i32, i32* %1208, align 4
  %1227 = add i32 %1226, 1
  store i32 %1227, i32* %1208, align 4
  br label %1230

1228:                                             ; preds = %1205
  %1229 = getelementptr inbounds %"class.blink::CSSFunctionValue", %"class.blink::CSSFunctionValue"* %1194, i64 0, i32 0, i32 0
  call void @_ZN3WTF6VectorIN5blink6MemberIKNS1_8CSSValueEEELj4ENS1_13HeapAllocatorEE14AppendSlowCaseIRS4_EEvOT_(%"class.WTF::Vector"* %1207, %"class.blink::CSSValue"* dereferenceable(3) %1229) #9
  br label %1230

1230:                                             ; preds = %1228, %1225
  %1231 = load i16*, i16** %7, align 8
  %1232 = icmp ult i16* %1231, %809
  br i1 %1232, label %811, label %1236

1233:                                             ; preds = %976
  store i16* %960, i16** %7, align 8
  br label %1236

1234:                                             ; preds = %1022, %979, %959
  store i16* %960, i16** %7, align 8
  br label %1236

1235:                                             ; preds = %818
  store i16* %819, i16** %7, align 8
  br label %1236

1236:                                             ; preds = %295, %298, %302, %311, %320, %329, %333, %351, %361, %365, %370, %377, %384, %391, %398, %405, %412, %419, %426, %432, %436, %440, %444, %451, %566, %573, %580, %587, %594, %601, %605, %612, %616, %628, %635, %642, %649, %656, %660, %667, %671, %684, %721, %745, %748, %754, %765, %776, %787, %802, %798, %811, %821, %825, %832, %841, %850, %859, %868, %877, %886, %895, %904, %912, %916, %920, %924, %933, %1053, %1062, %1071, %1080, %1089, %1098, %1102, %1111, %1115, %1127, %1136, %1145, %1154, %1163, %1167, %1176, %1180, %1193, %1230, %729, %731, %805, %1015, %1233, %1234, %1235, %277, %279, %345, %528, %724, %725
  %1237 = phi i8* [ %282, %345 ], [ %282, %528 ], [ %282, %724 ], [ %282, %725 ], [ %278, %277 ], [ %282, %279 ], [ %734, %805 ], [ %734, %1015 ], [ %734, %1233 ], [ %734, %1234 ], [ %734, %1235 ], [ %730, %729 ], [ %734, %731 ], [ %734, %1230 ], [ %734, %1193 ], [ %734, %1180 ], [ %734, %1176 ], [ %734, %1167 ], [ %734, %1163 ], [ %734, %1154 ], [ %734, %1145 ], [ %734, %1136 ], [ %734, %1127 ], [ %734, %1115 ], [ %734, %1111 ], [ %734, %1102 ], [ %734, %1098 ], [ %734, %1089 ], [ %734, %1080 ], [ %734, %1071 ], [ %734, %1062 ], [ %734, %1053 ], [ %734, %933 ], [ %734, %924 ], [ %734, %920 ], [ %734, %916 ], [ %734, %912 ], [ %734, %904 ], [ %734, %895 ], [ %734, %886 ], [ %734, %877 ], [ %734, %868 ], [ %734, %859 ], [ %734, %850 ], [ %734, %841 ], [ %734, %832 ], [ %734, %825 ], [ %734, %821 ], [ %734, %811 ], [ %734, %798 ], [ %734, %802 ], [ %734, %787 ], [ %734, %776 ], [ %734, %765 ], [ %734, %754 ], [ %734, %748 ], [ %734, %745 ], [ %282, %721 ], [ %282, %684 ], [ %282, %671 ], [ %282, %667 ], [ %282, %660 ], [ %282, %656 ], [ %282, %649 ], [ %282, %642 ], [ %282, %635 ], [ %282, %628 ], [ %282, %616 ], [ %282, %612 ], [ %282, %605 ], [ %282, %601 ], [ %282, %594 ], [ %282, %587 ], [ %282, %580 ], [ %282, %573 ], [ %282, %566 ], [ %282, %451 ], [ %282, %444 ], [ %282, %440 ], [ %282, %436 ], [ %282, %432 ], [ %282, %426 ], [ %282, %419 ], [ %282, %412 ], [ %282, %405 ], [ %282, %398 ], [ %282, %391 ], [ %282, %384 ], [ %282, %377 ], [ %282, %370 ], [ %282, %365 ], [ %282, %361 ], [ %282, %351 ], [ %282, %333 ], [ %282, %329 ], [ %282, %320 ], [ %282, %311 ], [ %282, %302 ], [ %282, %298 ], [ %282, %295 ]
  %1238 = phi %"class.blink::CSSValueList"* [ null, %345 ], [ null, %528 ], [ null, %724 ], [ %353, %725 ], [ null, %277 ], [ null, %279 ], [ null, %805 ], [ null, %1015 ], [ null, %1233 ], [ null, %1234 ], [ %813, %1235 ], [ null, %729 ], [ null, %731 ], [ %1206, %1230 ], [ null, %1193 ], [ null, %1180 ], [ null, %1176 ], [ null, %1167 ], [ null, %1163 ], [ null, %1154 ], [ null, %1145 ], [ null, %1136 ], [ null, %1127 ], [ null, %1115 ], [ null, %1111 ], [ null, %1102 ], [ null, %1098 ], [ null, %1089 ], [ null, %1080 ], [ null, %1071 ], [ null, %1062 ], [ null, %1053 ], [ null, %933 ], [ null, %924 ], [ null, %920 ], [ null, %916 ], [ null, %912 ], [ null, %904 ], [ null, %895 ], [ null, %886 ], [ null, %877 ], [ null, %868 ], [ null, %859 ], [ null, %850 ], [ null, %841 ], [ null, %832 ], [ null, %825 ], [ null, %821 ], [ %813, %811 ], [ null, %798 ], [ null, %802 ], [ null, %787 ], [ null, %776 ], [ null, %765 ], [ null, %754 ], [ null, %748 ], [ null, %745 ], [ %697, %721 ], [ null, %684 ], [ null, %671 ], [ null, %667 ], [ null, %660 ], [ null, %656 ], [ null, %649 ], [ null, %642 ], [ null, %635 ], [ null, %628 ], [ null, %616 ], [ null, %612 ], [ null, %605 ], [ null, %601 ], [ null, %594 ], [ null, %587 ], [ null, %580 ], [ null, %573 ], [ null, %566 ], [ null, %451 ], [ null, %444 ], [ null, %440 ], [ null, %436 ], [ null, %432 ], [ null, %426 ], [ null, %419 ], [ null, %412 ], [ null, %405 ], [ null, %398 ], [ null, %391 ], [ null, %384 ], [ null, %377 ], [ null, %370 ], [ null, %365 ], [ null, %361 ], [ %353, %351 ], [ null, %333 ], [ null, %329 ], [ null, %320 ], [ null, %311 ], [ null, %302 ], [ null, %298 ], [ null, %295 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1237) #9
  %1239 = getelementptr inbounds %"class.blink::CSSValueList", %"class.blink::CSSValueList"* %1238, i64 0, i32 0
  br label %1240

1240:                                             ; preds = %124, %128, %260, %263, %1236
  %1241 = phi %"class.blink::CSSValue"* [ %1239, %1236 ], [ null, %263 ], [ %261, %260 ], [ %129, %128 ], [ %126, %124 ]
  ret %"class.blink::CSSValue"* %1241
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

declare i32 @_ZN5blink17CssValueKeywordIDEN3WTF10StringViewE(%"class.WTF::StringView"* byval(%"class.WTF::StringView") align 8) local_unnamed_addr #1

declare zeroext i1 @_ZN5blink10StyleColor14IsColorKeywordENS_10CSSValueIDE(i32) local_unnamed_addr #1

declare %"class.blink::CSSIdentifierValue"* @_ZN5blink18CSSIdentifierValue6CreateENS_10CSSValueIDE(i32) local_unnamed_addr #1

declare %"class.blink::cssvalue::CSSColor"* @_ZN5blink8cssvalue8CSSColor6CreateEj(i32) local_unnamed_addr #1

declare zeroext i1 @_ZN5blink5Color13ParseHexColorEPKhjRj(i8*, i32, i32* dereferenceable(4)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN5blinkL28ParseColorNumberOrPercentageIhEEbRPKT_S3_cRbbRNS_17CSSPrimitiveValue8UnitTypeERi(i8** nocapture dereferenceable(8), i8*, i8 signext, i8* nocapture dereferenceable(1), i1 zeroext, i32* nocapture dereferenceable(4), i32* nocapture dereferenceable(4)) unnamed_addr #0 {
  %8 = load i8*, i8** %0, align 8
  %9 = icmp eq i8* %8, %1
  br i1 %9, label %238, label %10

10:                                               ; preds = %7, %15
  %11 = phi i8* [ %16, %15 ], [ %8, %7 ]
  %12 = load i8, i8* %11, align 1
  %13 = icmp ult i8 %12, 33
  br i1 %13, label %14, label %18

14:                                               ; preds = %10
  switch i8 %12, label %18 [
    i8 32, label %15
    i8 10, label %15
    i8 9, label %15
    i8 13, label %15
    i8 12, label %15
  ]

15:                                               ; preds = %14, %14, %14, %14, %14
  %16 = getelementptr inbounds i8, i8* %11, i64 1
  %17 = icmp eq i8* %16, %1
  br i1 %17, label %238, label %10

18:                                               ; preds = %10, %14
  %19 = icmp eq i8 %12, 45
  %20 = getelementptr inbounds i8, i8* %11, i64 1
  %21 = select i1 %19, i8* %20, i8* %11
  %22 = icmp eq i8* %21, %1
  br i1 %22, label %238, label %23

23:                                               ; preds = %18
  %24 = load i8, i8* %21, align 1
  %25 = add i8 %24, -48
  %26 = icmp ult i8 %25, 10
  br i1 %26, label %27, label %238

27:                                               ; preds = %23, %35
  %28 = phi i8* [ %37, %35 ], [ %21, %23 ]
  %29 = phi double [ %40, %35 ], [ 0.000000e+00, %23 ]
  %30 = icmp eq i8* %28, %1
  br i1 %30, label %238, label %31

31:                                               ; preds = %27
  %32 = load i8, i8* %28, align 1
  %33 = add i8 %32, -48
  %34 = icmp ult i8 %33, 10
  br i1 %34, label %35, label %52

35:                                               ; preds = %31
  %36 = fmul double %29, 1.000000e+01
  %37 = getelementptr inbounds i8, i8* %28, i64 1
  %38 = uitofp i8 %32 to double
  %39 = fadd double %36, %38
  %40 = fadd double %39, -4.800000e+01
  %41 = fcmp ult double %40, 2.550000e+02
  br i1 %41, label %27, label %42

42:                                               ; preds = %35
  %43 = icmp eq i8* %37, %1
  br i1 %43, label %238, label %44

44:                                               ; preds = %42, %49
  %45 = phi i8* [ %50, %49 ], [ %37, %42 ]
  %46 = load i8, i8* %45, align 1
  %47 = add i8 %46, -48
  %48 = icmp ult i8 %47, 10
  br i1 %48, label %49, label %52

49:                                               ; preds = %44
  %50 = getelementptr inbounds i8, i8* %45, i64 1
  %51 = icmp eq i8* %50, %1
  br i1 %51, label %238, label %44

52:                                               ; preds = %31, %44
  %53 = phi i8* [ %45, %44 ], [ %28, %31 ]
  %54 = phi double [ 2.550000e+02, %44 ], [ %29, %31 ]
  %55 = icmp eq i8* %53, %1
  br i1 %55, label %238, label %56

56:                                               ; preds = %52
  %57 = load i32, i32* %5, align 4
  %58 = icmp eq i32 %57, 1
  %59 = load i8, i8* %53, align 1
  %60 = icmp eq i8 %59, 37
  %61 = and i1 %58, %60
  br i1 %61, label %238, label %62

62:                                               ; preds = %56
  %63 = icmp eq i8 %59, 46
  br i1 %63, label %64, label %184

64:                                               ; preds = %62
  %65 = ptrtoint i8* %1 to i64
  %66 = ptrtoint i8* %53 to i64
  %67 = sub i64 %65, %66
  %68 = trunc i64 %67 to i32
  %69 = icmp slt i32 %68, 1
  br i1 %69, label %238, label %70

70:                                               ; preds = %64
  %71 = and i64 %67, 4294967295
  br label %72

72:                                               ; preds = %70, %87
  %73 = phi i8 [ 0, %70 ], [ %84, %87 ]
  %74 = phi i64 [ 0, %70 ], [ %85, %87 ]
  %75 = phi i8 [ 46, %70 ], [ %89, %87 ]
  %76 = add i8 %75, -48
  %77 = icmp ult i8 %76, 10
  br i1 %77, label %83, label %78

78:                                               ; preds = %72
  %79 = and i8 %73, 1
  %80 = icmp eq i8 %79, 0
  %81 = icmp eq i8 %75, 46
  %82 = and i1 %80, %81
  br i1 %82, label %83, label %121

83:                                               ; preds = %78, %72
  %84 = phi i8 [ %73, %72 ], [ 1, %78 ]
  %85 = add nuw nsw i64 %74, 1
  %86 = icmp eq i64 %85, %71
  br i1 %86, label %121, label %87

87:                                               ; preds = %83
  %88 = getelementptr inbounds i8, i8* %53, i64 %85
  %89 = load i8, i8* %88, align 1
  %90 = icmp eq i8 %89, 37
  br i1 %90, label %91, label %72

91:                                               ; preds = %87
  %92 = trunc i64 %85 to i32
  %93 = and i8 %84, 1
  %94 = icmp ne i8 %93, 0
  %95 = icmp eq i32 %92, 1
  %96 = and i1 %95, %94
  %97 = icmp eq i32 %92, 0
  %98 = or i1 %96, %97
  br i1 %98, label %121, label %99

99:                                               ; preds = %91
  %100 = icmp sgt i32 %92, 0
  br i1 %100, label %101, label %109

101:                                              ; preds = %99
  %102 = icmp eq i32 %92, 1
  br i1 %102, label %114, label %103

103:                                              ; preds = %101
  %104 = getelementptr inbounds i8, i8* %53, i64 1
  %105 = load i8, i8* %104, align 1
  %106 = uitofp i8 %105 to double
  %107 = fadd double %106, -4.800000e+01
  %108 = icmp sgt i32 %92, 2
  br i1 %108, label %279, label %109

109:                                              ; preds = %103, %287, %303, %311, %279, %295, %99
  %110 = phi double [ 0.000000e+00, %99 ], [ %107, %103 ], [ %285, %279 ], [ %293, %287 ], [ %301, %295 ], [ %309, %303 ], [ %317, %311 ]
  %111 = phi double [ 1.000000e+00, %99 ], [ 1.000000e+01, %103 ], [ 1.000000e+02, %279 ], [ 1.000000e+03, %287 ], [ 1.000000e+04, %295 ], [ 1.000000e+05, %303 ], [ 1.000000e+06, %311 ]
  %112 = fdiv double %110, %111
  %113 = fadd double %112, 0.000000e+00
  br label %114

114:                                              ; preds = %101, %109
  %115 = phi double [ %113, %109 ], [ 0.000000e+00, %101 ]
  %116 = shl i64 %85, 32
  %117 = ashr exact i64 %116, 32
  %118 = getelementptr inbounds i8, i8* %53, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = icmp eq i8 %119, 37
  br i1 %120, label %179, label %238

121:                                              ; preds = %78, %83, %91
  %122 = sext i8 %2 to i32
  %123 = icmp eq i8 %2, 46
  br i1 %123, label %150, label %124

124:                                              ; preds = %121, %143
  %125 = phi i8 [ %140, %143 ], [ 0, %121 ]
  %126 = phi i64 [ %141, %143 ], [ 0, %121 ]
  %127 = phi i8 [ %145, %143 ], [ 46, %121 ]
  %128 = icmp ult i8 %127, 33
  br i1 %128, label %129, label %131

129:                                              ; preds = %124
  %130 = trunc i64 %126 to i32
  switch i8 %127, label %238 [
    i8 32, label %150
    i8 10, label %150
    i8 9, label %150
    i8 13, label %150
    i8 12, label %150
  ]

131:                                              ; preds = %124
  %132 = add i8 %127, -48
  %133 = icmp ult i8 %132, 10
  br i1 %133, label %139, label %134

134:                                              ; preds = %131
  %135 = and i8 %125, 1
  %136 = icmp eq i8 %135, 0
  %137 = icmp eq i8 %127, 46
  %138 = and i1 %136, %137
  br i1 %138, label %139, label %238

139:                                              ; preds = %134, %131
  %140 = phi i8 [ %125, %131 ], [ 1, %134 ]
  %141 = add nuw nsw i64 %126, 1
  %142 = icmp eq i64 %141, %71
  br i1 %142, label %238, label %143

143:                                              ; preds = %139
  %144 = getelementptr inbounds i8, i8* %53, i64 %141
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i32
  %147 = icmp eq i32 %146, %122
  br i1 %147, label %148, label %124

148:                                              ; preds = %143
  %149 = trunc i64 %141 to i32
  br label %150

150:                                              ; preds = %121, %148, %129, %129, %129, %129, %129
  %151 = phi i8 [ %125, %129 ], [ %125, %129 ], [ %125, %129 ], [ %125, %129 ], [ %125, %129 ], [ %140, %148 ], [ 0, %121 ]
  %152 = phi i32 [ %130, %129 ], [ %130, %129 ], [ %130, %129 ], [ %130, %129 ], [ %130, %129 ], [ %149, %148 ], [ 0, %121 ]
  %153 = and i8 %151, 1
  %154 = icmp ne i8 %153, 0
  %155 = icmp eq i32 %152, 1
  %156 = and i1 %154, %155
  %157 = icmp eq i32 %152, 0
  %158 = or i1 %156, %157
  br i1 %158, label %238, label %159

159:                                              ; preds = %150
  %160 = icmp sgt i32 %152, 0
  br i1 %160, label %161, label %169

161:                                              ; preds = %159
  %162 = icmp eq i32 %152, 1
  br i1 %162, label %174, label %163

163:                                              ; preds = %161
  %164 = getelementptr inbounds i8, i8* %53, i64 1
  %165 = load i8, i8* %164, align 1
  %166 = uitofp i8 %165 to double
  %167 = fadd double %166, -4.800000e+01
  %168 = icmp sgt i32 %152, 2
  br i1 %168, label %240, label %169

169:                                              ; preds = %163, %248, %264, %272, %240, %256, %159
  %170 = phi double [ 0.000000e+00, %159 ], [ %167, %163 ], [ %246, %240 ], [ %254, %248 ], [ %262, %256 ], [ %270, %264 ], [ %278, %272 ]
  %171 = phi double [ 1.000000e+00, %159 ], [ 1.000000e+01, %163 ], [ 1.000000e+02, %240 ], [ 1.000000e+03, %248 ], [ 1.000000e+04, %256 ], [ 1.000000e+05, %264 ], [ 1.000000e+06, %272 ]
  %172 = fdiv double %170, %171
  %173 = fadd double %172, 0.000000e+00
  br label %174

174:                                              ; preds = %161, %169
  %175 = phi double [ %173, %169 ], [ 0.000000e+00, %161 ]
  %176 = sext i32 %152 to i64
  %177 = getelementptr inbounds i8, i8* %53, i64 %176
  %178 = load i8, i8* %177, align 1
  br label %179

179:                                              ; preds = %174, %114
  %180 = phi i8 [ %178, %174 ], [ 37, %114 ]
  %181 = phi double [ %175, %174 ], [ %115, %114 ]
  %182 = phi i8* [ %177, %174 ], [ %118, %114 ]
  %183 = fadd double %54, %181
  br label %184

184:                                              ; preds = %179, %62
  %185 = phi i8 [ %180, %179 ], [ %59, %62 ]
  %186 = phi i8* [ %182, %179 ], [ %53, %62 ]
  %187 = phi double [ %183, %179 ], [ %54, %62 ]
  %188 = icmp eq i32 %57, 2
  %189 = icmp eq i8 %185, 37
  br i1 %188, label %190, label %191

190:                                              ; preds = %184
  br i1 %189, label %192, label %238

191:                                              ; preds = %184
  br i1 %189, label %192, label %198

192:                                              ; preds = %190, %191
  store i32 2, i32* %5, align 4
  %193 = fdiv double %187, 1.000000e+02
  %194 = fmul double %193, 2.550000e+02
  %195 = fcmp ogt double %194, 2.550000e+02
  %196 = select i1 %195, double 2.550000e+02, double %194
  %197 = getelementptr inbounds i8, i8* %186, i64 1
  br label %199

198:                                              ; preds = %191
  store i32 1, i32* %5, align 4
  br label %199

199:                                              ; preds = %198, %192
  %200 = phi i8* [ %197, %192 ], [ %186, %198 ]
  %201 = phi double [ %196, %192 ], [ %187, %198 ]
  %202 = icmp eq i8* %200, %1
  br i1 %202, label %215, label %203

203:                                              ; preds = %199, %208
  %204 = phi i8* [ %209, %208 ], [ %200, %199 ]
  %205 = load i8, i8* %204, align 1
  %206 = icmp ult i8 %205, 33
  br i1 %206, label %207, label %211

207:                                              ; preds = %203
  switch i8 %205, label %211 [
    i8 32, label %208
    i8 10, label %208
    i8 9, label %208
    i8 13, label %208
    i8 12, label %208
  ]

208:                                              ; preds = %207, %207, %207, %207, %207
  %209 = getelementptr inbounds i8, i8* %204, i64 1
  %210 = icmp eq i8* %209, %1
  br i1 %210, label %215, label %203

211:                                              ; preds = %207, %203
  %212 = zext i8 %205 to i32
  %213 = sext i8 %2 to i32
  %214 = icmp eq i32 %212, %213
  br i1 %214, label %224, label %215

215:                                              ; preds = %208, %199, %211
  %216 = phi i8* [ %204, %211 ], [ %1, %199 ], [ %1, %208 ]
  %217 = load i8, i8* %3, align 1, !range !2
  %218 = icmp eq i8 %217, 0
  br i1 %218, label %238, label %219

219:                                              ; preds = %215
  %220 = getelementptr inbounds i8, i8* %216, i64 -1
  %221 = load i8, i8* %220, align 1
  %222 = icmp ult i8 %221, 33
  br i1 %222, label %223, label %238

223:                                              ; preds = %219
  switch i8 %221, label %238 [
    i8 32, label %233
    i8 10, label %233
    i8 9, label %233
    i8 13, label %233
    i8 12, label %233
  ]

224:                                              ; preds = %211
  %225 = load i8, i8* %3, align 1, !range !2
  %226 = icmp eq i8 %225, 0
  %227 = xor i1 %4, true
  %228 = or i1 %226, %227
  br i1 %228, label %230, label %229

229:                                              ; preds = %224
  store i8 0, i8* %3, align 1
  br label %231

230:                                              ; preds = %224
  br i1 %226, label %231, label %238

231:                                              ; preds = %230, %229
  %232 = getelementptr inbounds i8, i8* %204, i64 1
  br label %233

233:                                              ; preds = %223, %223, %223, %223, %223, %231
  %234 = phi i8* [ %232, %231 ], [ %216, %223 ], [ %216, %223 ], [ %216, %223 ], [ %216, %223 ], [ %216, %223 ]
  %235 = tail call double @llvm.round.f64(double %201)
  %236 = fptosi double %235 to i32
  %237 = select i1 %19, i32 0, i32 %236
  store i32 %237, i32* %6, align 4
  store i8* %234, i8** %0, align 8
  br label %238

238:                                              ; preds = %15, %27, %49, %139, %134, %42, %7, %56, %64, %223, %219, %150, %129, %114, %230, %215, %190, %52, %18, %23, %233
  %239 = phi i1 [ true, %233 ], [ false, %23 ], [ false, %18 ], [ false, %52 ], [ false, %190 ], [ false, %215 ], [ false, %230 ], [ false, %114 ], [ false, %129 ], [ false, %150 ], [ false, %219 ], [ false, %223 ], [ false, %64 ], [ false, %56 ], [ false, %7 ], [ false, %42 ], [ false, %134 ], [ false, %139 ], [ false, %49 ], [ false, %27 ], [ false, %15 ]
  ret i1 %239

240:                                              ; preds = %163
  %241 = fmul double %167, 1.000000e+01
  %242 = getelementptr inbounds i8, i8* %53, i64 2
  %243 = load i8, i8* %242, align 1
  %244 = uitofp i8 %243 to double
  %245 = fadd double %241, %244
  %246 = fadd double %245, -4.800000e+01
  %247 = icmp eq i32 %152, 3
  br i1 %247, label %169, label %248

248:                                              ; preds = %240
  %249 = fmul double %246, 1.000000e+01
  %250 = getelementptr inbounds i8, i8* %53, i64 3
  %251 = load i8, i8* %250, align 1
  %252 = uitofp i8 %251 to double
  %253 = fadd double %249, %252
  %254 = fadd double %253, -4.800000e+01
  %255 = icmp sgt i32 %152, 4
  br i1 %255, label %256, label %169

256:                                              ; preds = %248
  %257 = fmul double %254, 1.000000e+01
  %258 = getelementptr inbounds i8, i8* %53, i64 4
  %259 = load i8, i8* %258, align 1
  %260 = uitofp i8 %259 to double
  %261 = fadd double %257, %260
  %262 = fadd double %261, -4.800000e+01
  %263 = icmp eq i32 %152, 5
  br i1 %263, label %169, label %264

264:                                              ; preds = %256
  %265 = fmul double %262, 1.000000e+01
  %266 = getelementptr inbounds i8, i8* %53, i64 5
  %267 = load i8, i8* %266, align 1
  %268 = uitofp i8 %267 to double
  %269 = fadd double %265, %268
  %270 = fadd double %269, -4.800000e+01
  %271 = icmp sgt i32 %152, 6
  br i1 %271, label %272, label %169

272:                                              ; preds = %264
  %273 = fmul double %270, 1.000000e+01
  %274 = getelementptr inbounds i8, i8* %53, i64 6
  %275 = load i8, i8* %274, align 1
  %276 = uitofp i8 %275 to double
  %277 = fadd double %273, %276
  %278 = fadd double %277, -4.800000e+01
  br label %169

279:                                              ; preds = %103
  %280 = fmul double %107, 1.000000e+01
  %281 = getelementptr inbounds i8, i8* %53, i64 2
  %282 = load i8, i8* %281, align 1
  %283 = uitofp i8 %282 to double
  %284 = fadd double %280, %283
  %285 = fadd double %284, -4.800000e+01
  %286 = icmp eq i32 %92, 3
  br i1 %286, label %109, label %287

287:                                              ; preds = %279
  %288 = fmul double %285, 1.000000e+01
  %289 = getelementptr inbounds i8, i8* %53, i64 3
  %290 = load i8, i8* %289, align 1
  %291 = uitofp i8 %290 to double
  %292 = fadd double %288, %291
  %293 = fadd double %292, -4.800000e+01
  %294 = icmp sgt i32 %92, 4
  br i1 %294, label %295, label %109

295:                                              ; preds = %287
  %296 = fmul double %293, 1.000000e+01
  %297 = getelementptr inbounds i8, i8* %53, i64 4
  %298 = load i8, i8* %297, align 1
  %299 = uitofp i8 %298 to double
  %300 = fadd double %296, %299
  %301 = fadd double %300, -4.800000e+01
  %302 = icmp eq i32 %92, 5
  br i1 %302, label %109, label %303

303:                                              ; preds = %295
  %304 = fmul double %301, 1.000000e+01
  %305 = getelementptr inbounds i8, i8* %53, i64 5
  %306 = load i8, i8* %305, align 1
  %307 = uitofp i8 %306 to double
  %308 = fadd double %304, %307
  %309 = fadd double %308, -4.800000e+01
  %310 = icmp sgt i32 %92, 6
  br i1 %310, label %311, label %109

311:                                              ; preds = %303
  %312 = fmul double %309, 1.000000e+01
  %313 = getelementptr inbounds i8, i8* %53, i64 6
  %314 = load i8, i8* %313, align 1
  %315 = uitofp i8 %314 to double
  %316 = fadd double %312, %315
  %317 = fadd double %316, -4.800000e+01
  br label %109
}

declare i32 @_ZN5blink8MakeRGBAEiiii(i32, i32, i32, i32) local_unnamed_addr #1

declare i32 @_ZN5blink7MakeRGBEiii(i32, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare double @llvm.round.f64(double) #4

declare zeroext i1 @_ZN5blink5Color13ParseHexColorEPKDsjRj(i16*, i32, i32* dereferenceable(4)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN5blinkL28ParseColorNumberOrPercentageIDsEEbRPKT_S3_cRbbRNS_17CSSPrimitiveValue8UnitTypeERi(i16** nocapture dereferenceable(8), i16*, i8 signext, i8* nocapture dereferenceable(1), i1 zeroext, i32* nocapture dereferenceable(4), i32* nocapture dereferenceable(4)) unnamed_addr #0 {
  %8 = load i16*, i16** %0, align 8
  %9 = icmp eq i16* %8, %1
  br i1 %9, label %239, label %10

10:                                               ; preds = %7, %15
  %11 = phi i16* [ %16, %15 ], [ %8, %7 ]
  %12 = load i16, i16* %11, align 2
  %13 = icmp ult i16 %12, 33
  br i1 %13, label %14, label %18

14:                                               ; preds = %10
  switch i16 %12, label %18 [
    i16 32, label %15
    i16 10, label %15
    i16 9, label %15
    i16 13, label %15
    i16 12, label %15
  ]

15:                                               ; preds = %14, %14, %14, %14, %14
  %16 = getelementptr inbounds i16, i16* %11, i64 1
  %17 = icmp eq i16* %16, %1
  br i1 %17, label %239, label %10

18:                                               ; preds = %10, %14
  %19 = icmp eq i16 %12, 45
  %20 = getelementptr inbounds i16, i16* %11, i64 1
  %21 = select i1 %19, i16* %20, i16* %11
  %22 = icmp eq i16* %21, %1
  br i1 %22, label %239, label %23

23:                                               ; preds = %18
  %24 = load i16, i16* %21, align 2
  %25 = add i16 %24, -48
  %26 = icmp ult i16 %25, 10
  br i1 %26, label %27, label %239

27:                                               ; preds = %23, %35
  %28 = phi i16* [ %37, %35 ], [ %21, %23 ]
  %29 = phi double [ %40, %35 ], [ 0.000000e+00, %23 ]
  %30 = icmp eq i16* %28, %1
  br i1 %30, label %239, label %31

31:                                               ; preds = %27
  %32 = load i16, i16* %28, align 2
  %33 = add i16 %32, -48
  %34 = icmp ult i16 %33, 10
  br i1 %34, label %35, label %52

35:                                               ; preds = %31
  %36 = fmul double %29, 1.000000e+01
  %37 = getelementptr inbounds i16, i16* %28, i64 1
  %38 = uitofp i16 %32 to double
  %39 = fadd double %36, %38
  %40 = fadd double %39, -4.800000e+01
  %41 = fcmp ult double %40, 2.550000e+02
  br i1 %41, label %27, label %42

42:                                               ; preds = %35
  %43 = icmp eq i16* %37, %1
  br i1 %43, label %239, label %44

44:                                               ; preds = %42, %49
  %45 = phi i16* [ %50, %49 ], [ %37, %42 ]
  %46 = load i16, i16* %45, align 2
  %47 = add i16 %46, -48
  %48 = icmp ult i16 %47, 10
  br i1 %48, label %49, label %52

49:                                               ; preds = %44
  %50 = getelementptr inbounds i16, i16* %45, i64 1
  %51 = icmp eq i16* %50, %1
  br i1 %51, label %239, label %44

52:                                               ; preds = %31, %44
  %53 = phi i16* [ %45, %44 ], [ %28, %31 ]
  %54 = phi double [ 2.550000e+02, %44 ], [ %29, %31 ]
  %55 = icmp eq i16* %53, %1
  br i1 %55, label %239, label %56

56:                                               ; preds = %52
  %57 = load i32, i32* %5, align 4
  %58 = icmp eq i32 %57, 1
  %59 = load i16, i16* %53, align 2
  %60 = icmp eq i16 %59, 37
  %61 = and i1 %58, %60
  br i1 %61, label %239, label %62

62:                                               ; preds = %56
  %63 = icmp eq i16 %59, 46
  br i1 %63, label %64, label %185

64:                                               ; preds = %62
  %65 = ptrtoint i16* %1 to i64
  %66 = ptrtoint i16* %53 to i64
  %67 = sub i64 %65, %66
  %68 = lshr exact i64 %67, 1
  %69 = trunc i64 %68 to i32
  %70 = icmp slt i32 %69, 1
  br i1 %70, label %239, label %71

71:                                               ; preds = %64
  %72 = and i64 %68, 4294967295
  br label %73

73:                                               ; preds = %71, %88
  %74 = phi i8 [ 0, %71 ], [ %85, %88 ]
  %75 = phi i64 [ 0, %71 ], [ %86, %88 ]
  %76 = phi i16 [ 46, %71 ], [ %90, %88 ]
  %77 = add i16 %76, -48
  %78 = icmp ult i16 %77, 10
  br i1 %78, label %84, label %79

79:                                               ; preds = %73
  %80 = and i8 %74, 1
  %81 = icmp eq i8 %80, 0
  %82 = icmp eq i16 %76, 46
  %83 = and i1 %81, %82
  br i1 %83, label %84, label %122

84:                                               ; preds = %79, %73
  %85 = phi i8 [ %74, %73 ], [ 1, %79 ]
  %86 = add nuw nsw i64 %75, 1
  %87 = icmp eq i64 %86, %72
  br i1 %87, label %122, label %88

88:                                               ; preds = %84
  %89 = getelementptr inbounds i16, i16* %53, i64 %86
  %90 = load i16, i16* %89, align 2
  %91 = icmp eq i16 %90, 37
  br i1 %91, label %92, label %73

92:                                               ; preds = %88
  %93 = trunc i64 %86 to i32
  %94 = and i8 %85, 1
  %95 = icmp ne i8 %94, 0
  %96 = icmp eq i32 %93, 1
  %97 = and i1 %96, %95
  %98 = icmp eq i32 %93, 0
  %99 = or i1 %97, %98
  br i1 %99, label %122, label %100

100:                                              ; preds = %92
  %101 = icmp sgt i32 %93, 0
  br i1 %101, label %102, label %110

102:                                              ; preds = %100
  %103 = icmp eq i32 %93, 1
  br i1 %103, label %115, label %104

104:                                              ; preds = %102
  %105 = getelementptr inbounds i16, i16* %53, i64 1
  %106 = load i16, i16* %105, align 2
  %107 = uitofp i16 %106 to double
  %108 = fadd double %107, -4.800000e+01
  %109 = icmp sgt i32 %93, 2
  br i1 %109, label %280, label %110

110:                                              ; preds = %104, %288, %304, %312, %280, %296, %100
  %111 = phi double [ 0.000000e+00, %100 ], [ %108, %104 ], [ %286, %280 ], [ %294, %288 ], [ %302, %296 ], [ %310, %304 ], [ %318, %312 ]
  %112 = phi double [ 1.000000e+00, %100 ], [ 1.000000e+01, %104 ], [ 1.000000e+02, %280 ], [ 1.000000e+03, %288 ], [ 1.000000e+04, %296 ], [ 1.000000e+05, %304 ], [ 1.000000e+06, %312 ]
  %113 = fdiv double %111, %112
  %114 = fadd double %113, 0.000000e+00
  br label %115

115:                                              ; preds = %102, %110
  %116 = phi double [ %114, %110 ], [ 0.000000e+00, %102 ]
  %117 = shl i64 %86, 32
  %118 = ashr exact i64 %117, 32
  %119 = getelementptr inbounds i16, i16* %53, i64 %118
  %120 = load i16, i16* %119, align 2
  %121 = icmp eq i16 %120, 37
  br i1 %121, label %180, label %239

122:                                              ; preds = %79, %84, %92
  %123 = sext i8 %2 to i32
  %124 = icmp eq i8 %2, 46
  br i1 %124, label %151, label %125

125:                                              ; preds = %122, %144
  %126 = phi i8 [ %141, %144 ], [ 0, %122 ]
  %127 = phi i64 [ %142, %144 ], [ 0, %122 ]
  %128 = phi i16 [ %146, %144 ], [ 46, %122 ]
  %129 = icmp ult i16 %128, 33
  br i1 %129, label %130, label %132

130:                                              ; preds = %125
  %131 = trunc i64 %127 to i32
  switch i16 %128, label %239 [
    i16 32, label %151
    i16 10, label %151
    i16 9, label %151
    i16 13, label %151
    i16 12, label %151
  ]

132:                                              ; preds = %125
  %133 = add i16 %128, -48
  %134 = icmp ult i16 %133, 10
  br i1 %134, label %140, label %135

135:                                              ; preds = %132
  %136 = and i8 %126, 1
  %137 = icmp eq i8 %136, 0
  %138 = icmp eq i16 %128, 46
  %139 = and i1 %137, %138
  br i1 %139, label %140, label %239

140:                                              ; preds = %135, %132
  %141 = phi i8 [ %126, %132 ], [ 1, %135 ]
  %142 = add nuw nsw i64 %127, 1
  %143 = icmp eq i64 %142, %72
  br i1 %143, label %239, label %144

144:                                              ; preds = %140
  %145 = getelementptr inbounds i16, i16* %53, i64 %142
  %146 = load i16, i16* %145, align 2
  %147 = zext i16 %146 to i32
  %148 = icmp eq i32 %147, %123
  br i1 %148, label %149, label %125

149:                                              ; preds = %144
  %150 = trunc i64 %142 to i32
  br label %151

151:                                              ; preds = %122, %149, %130, %130, %130, %130, %130
  %152 = phi i8 [ %126, %130 ], [ %126, %130 ], [ %126, %130 ], [ %126, %130 ], [ %126, %130 ], [ %141, %149 ], [ 0, %122 ]
  %153 = phi i32 [ %131, %130 ], [ %131, %130 ], [ %131, %130 ], [ %131, %130 ], [ %131, %130 ], [ %150, %149 ], [ 0, %122 ]
  %154 = and i8 %152, 1
  %155 = icmp ne i8 %154, 0
  %156 = icmp eq i32 %153, 1
  %157 = and i1 %155, %156
  %158 = icmp eq i32 %153, 0
  %159 = or i1 %157, %158
  br i1 %159, label %239, label %160

160:                                              ; preds = %151
  %161 = icmp sgt i32 %153, 0
  br i1 %161, label %162, label %170

162:                                              ; preds = %160
  %163 = icmp eq i32 %153, 1
  br i1 %163, label %175, label %164

164:                                              ; preds = %162
  %165 = getelementptr inbounds i16, i16* %53, i64 1
  %166 = load i16, i16* %165, align 2
  %167 = uitofp i16 %166 to double
  %168 = fadd double %167, -4.800000e+01
  %169 = icmp sgt i32 %153, 2
  br i1 %169, label %241, label %170

170:                                              ; preds = %164, %249, %265, %273, %241, %257, %160
  %171 = phi double [ 0.000000e+00, %160 ], [ %168, %164 ], [ %247, %241 ], [ %255, %249 ], [ %263, %257 ], [ %271, %265 ], [ %279, %273 ]
  %172 = phi double [ 1.000000e+00, %160 ], [ 1.000000e+01, %164 ], [ 1.000000e+02, %241 ], [ 1.000000e+03, %249 ], [ 1.000000e+04, %257 ], [ 1.000000e+05, %265 ], [ 1.000000e+06, %273 ]
  %173 = fdiv double %171, %172
  %174 = fadd double %173, 0.000000e+00
  br label %175

175:                                              ; preds = %162, %170
  %176 = phi double [ %174, %170 ], [ 0.000000e+00, %162 ]
  %177 = sext i32 %153 to i64
  %178 = getelementptr inbounds i16, i16* %53, i64 %177
  %179 = load i16, i16* %178, align 2
  br label %180

180:                                              ; preds = %175, %115
  %181 = phi i16 [ %179, %175 ], [ 37, %115 ]
  %182 = phi double [ %176, %175 ], [ %116, %115 ]
  %183 = phi i16* [ %178, %175 ], [ %119, %115 ]
  %184 = fadd double %54, %182
  br label %185

185:                                              ; preds = %180, %62
  %186 = phi i16 [ %181, %180 ], [ %59, %62 ]
  %187 = phi i16* [ %183, %180 ], [ %53, %62 ]
  %188 = phi double [ %184, %180 ], [ %54, %62 ]
  %189 = icmp eq i32 %57, 2
  %190 = icmp eq i16 %186, 37
  br i1 %189, label %191, label %192

191:                                              ; preds = %185
  br i1 %190, label %193, label %239

192:                                              ; preds = %185
  br i1 %190, label %193, label %199

193:                                              ; preds = %191, %192
  store i32 2, i32* %5, align 4
  %194 = fdiv double %188, 1.000000e+02
  %195 = fmul double %194, 2.550000e+02
  %196 = fcmp ogt double %195, 2.550000e+02
  %197 = select i1 %196, double 2.550000e+02, double %195
  %198 = getelementptr inbounds i16, i16* %187, i64 1
  br label %200

199:                                              ; preds = %192
  store i32 1, i32* %5, align 4
  br label %200

200:                                              ; preds = %199, %193
  %201 = phi i16* [ %198, %193 ], [ %187, %199 ]
  %202 = phi double [ %197, %193 ], [ %188, %199 ]
  %203 = icmp eq i16* %201, %1
  br i1 %203, label %216, label %204

204:                                              ; preds = %200, %209
  %205 = phi i16* [ %210, %209 ], [ %201, %200 ]
  %206 = load i16, i16* %205, align 2
  %207 = icmp ult i16 %206, 33
  br i1 %207, label %208, label %212

208:                                              ; preds = %204
  switch i16 %206, label %212 [
    i16 32, label %209
    i16 10, label %209
    i16 9, label %209
    i16 13, label %209
    i16 12, label %209
  ]

209:                                              ; preds = %208, %208, %208, %208, %208
  %210 = getelementptr inbounds i16, i16* %205, i64 1
  %211 = icmp eq i16* %210, %1
  br i1 %211, label %216, label %204

212:                                              ; preds = %208, %204
  %213 = zext i16 %206 to i32
  %214 = sext i8 %2 to i32
  %215 = icmp eq i32 %213, %214
  br i1 %215, label %225, label %216

216:                                              ; preds = %209, %200, %212
  %217 = phi i16* [ %205, %212 ], [ %1, %200 ], [ %1, %209 ]
  %218 = load i8, i8* %3, align 1, !range !2
  %219 = icmp eq i8 %218, 0
  br i1 %219, label %239, label %220

220:                                              ; preds = %216
  %221 = getelementptr inbounds i16, i16* %217, i64 -1
  %222 = load i16, i16* %221, align 2
  %223 = icmp ult i16 %222, 33
  br i1 %223, label %224, label %239

224:                                              ; preds = %220
  switch i16 %222, label %239 [
    i16 32, label %234
    i16 10, label %234
    i16 9, label %234
    i16 13, label %234
    i16 12, label %234
  ]

225:                                              ; preds = %212
  %226 = load i8, i8* %3, align 1, !range !2
  %227 = icmp eq i8 %226, 0
  %228 = xor i1 %4, true
  %229 = or i1 %227, %228
  br i1 %229, label %231, label %230

230:                                              ; preds = %225
  store i8 0, i8* %3, align 1
  br label %232

231:                                              ; preds = %225
  br i1 %227, label %232, label %239

232:                                              ; preds = %231, %230
  %233 = getelementptr inbounds i16, i16* %205, i64 1
  br label %234

234:                                              ; preds = %224, %224, %224, %224, %224, %232
  %235 = phi i16* [ %233, %232 ], [ %217, %224 ], [ %217, %224 ], [ %217, %224 ], [ %217, %224 ], [ %217, %224 ]
  %236 = tail call double @llvm.round.f64(double %202)
  %237 = fptosi double %236 to i32
  %238 = select i1 %19, i32 0, i32 %237
  store i32 %238, i32* %6, align 4
  store i16* %235, i16** %0, align 8
  br label %239

239:                                              ; preds = %15, %27, %49, %140, %135, %42, %7, %56, %64, %224, %220, %151, %130, %115, %231, %216, %191, %52, %18, %23, %234
  %240 = phi i1 [ true, %234 ], [ false, %23 ], [ false, %18 ], [ false, %52 ], [ false, %191 ], [ false, %216 ], [ false, %231 ], [ false, %115 ], [ false, %130 ], [ false, %151 ], [ false, %220 ], [ false, %224 ], [ false, %64 ], [ false, %56 ], [ false, %7 ], [ false, %42 ], [ false, %135 ], [ false, %140 ], [ false, %49 ], [ false, %27 ], [ false, %15 ]
  ret i1 %240

241:                                              ; preds = %164
  %242 = fmul double %168, 1.000000e+01
  %243 = getelementptr inbounds i16, i16* %53, i64 2
  %244 = load i16, i16* %243, align 2
  %245 = uitofp i16 %244 to double
  %246 = fadd double %242, %245
  %247 = fadd double %246, -4.800000e+01
  %248 = icmp eq i32 %153, 3
  br i1 %248, label %170, label %249

249:                                              ; preds = %241
  %250 = fmul double %247, 1.000000e+01
  %251 = getelementptr inbounds i16, i16* %53, i64 3
  %252 = load i16, i16* %251, align 2
  %253 = uitofp i16 %252 to double
  %254 = fadd double %250, %253
  %255 = fadd double %254, -4.800000e+01
  %256 = icmp sgt i32 %153, 4
  br i1 %256, label %257, label %170

257:                                              ; preds = %249
  %258 = fmul double %255, 1.000000e+01
  %259 = getelementptr inbounds i16, i16* %53, i64 4
  %260 = load i16, i16* %259, align 2
  %261 = uitofp i16 %260 to double
  %262 = fadd double %258, %261
  %263 = fadd double %262, -4.800000e+01
  %264 = icmp eq i32 %153, 5
  br i1 %264, label %170, label %265

265:                                              ; preds = %257
  %266 = fmul double %263, 1.000000e+01
  %267 = getelementptr inbounds i16, i16* %53, i64 5
  %268 = load i16, i16* %267, align 2
  %269 = uitofp i16 %268 to double
  %270 = fadd double %266, %269
  %271 = fadd double %270, -4.800000e+01
  %272 = icmp sgt i32 %153, 6
  br i1 %272, label %273, label %170

273:                                              ; preds = %265
  %274 = fmul double %271, 1.000000e+01
  %275 = getelementptr inbounds i16, i16* %53, i64 6
  %276 = load i16, i16* %275, align 2
  %277 = uitofp i16 %276 to double
  %278 = fadd double %274, %277
  %279 = fadd double %278, -4.800000e+01
  br label %170

280:                                              ; preds = %104
  %281 = fmul double %108, 1.000000e+01
  %282 = getelementptr inbounds i16, i16* %53, i64 2
  %283 = load i16, i16* %282, align 2
  %284 = uitofp i16 %283 to double
  %285 = fadd double %281, %284
  %286 = fadd double %285, -4.800000e+01
  %287 = icmp eq i32 %93, 3
  br i1 %287, label %110, label %288

288:                                              ; preds = %280
  %289 = fmul double %286, 1.000000e+01
  %290 = getelementptr inbounds i16, i16* %53, i64 3
  %291 = load i16, i16* %290, align 2
  %292 = uitofp i16 %291 to double
  %293 = fadd double %289, %292
  %294 = fadd double %293, -4.800000e+01
  %295 = icmp sgt i32 %93, 4
  br i1 %295, label %296, label %110

296:                                              ; preds = %288
  %297 = fmul double %294, 1.000000e+01
  %298 = getelementptr inbounds i16, i16* %53, i64 4
  %299 = load i16, i16* %298, align 2
  %300 = uitofp i16 %299 to double
  %301 = fadd double %297, %300
  %302 = fadd double %301, -4.800000e+01
  %303 = icmp eq i32 %93, 5
  br i1 %303, label %110, label %304

304:                                              ; preds = %296
  %305 = fmul double %302, 1.000000e+01
  %306 = getelementptr inbounds i16, i16* %53, i64 5
  %307 = load i16, i16* %306, align 2
  %308 = uitofp i16 %307 to double
  %309 = fadd double %305, %308
  %310 = fadd double %309, -4.800000e+01
  %311 = icmp sgt i32 %93, 6
  br i1 %311, label %312, label %110

312:                                              ; preds = %304
  %313 = fmul double %310, 1.000000e+01
  %314 = getelementptr inbounds i16, i16* %53, i64 6
  %315 = load i16, i16* %314, align 2
  %316 = uitofp i16 %315 to double
  %317 = fadd double %313, %316
  %318 = fadd double %317, -4.800000e+01
  br label %110
}

declare %"class.blink::CSSNumericLiteralValue"* @_ZN5blink22CSSNumericLiteralValue6CreateEdNS_17CSSPrimitiveValue8UnitTypeE(double, i32) local_unnamed_addr #1

declare double @_ZN3WTF18CharactersToDoubleEPKhmPb(i8*, i64, i8*) local_unnamed_addr #1

declare double @_ZN3WTF18CharactersToDoubleEPKDsmPb(i16*, i64, i8*) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm8EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* dereferenceable(24), [8 x i8]* dereferenceable(8)) local_unnamed_addr #5 comdat {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 7
  br i1 %5, label %6, label %75

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 1
  br i1 %12, label %42, label %14

14:                                               ; preds = %6
  %15 = load i8*, i8** %13, align 8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i64
  %18 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds [8 x i8], [8 x i8]* %1, i64 0, i64 0
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i64
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = sext i8 %25 to i32
  %27 = icmp eq i32 %20, %26
  br i1 %27, label %28, label %75

28:                                               ; preds = %14
  %29 = getelementptr inbounds i8, i8* %15, i64 1
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i64
  %32 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %1, i64 0, i64 1
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i64
  %38 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = sext i8 %39 to i32
  %41 = icmp eq i32 %34, %40
  br i1 %41, label %157, label %75

42:                                               ; preds = %6
  %43 = bitcast i8** %13 to i16**
  %44 = load i16*, i16** %43, align 8
  %45 = load i16, i16* %44, align 2
  %46 = add i16 %45, -65
  %47 = icmp ult i16 %46, 26
  %48 = zext i1 %47 to i16
  %49 = shl nuw nsw i16 %48, 5
  %50 = or i16 %49, %45
  %51 = zext i16 %50 to i32
  %52 = getelementptr inbounds [8 x i8], [8 x i8]* %1, i64 0, i64 0
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i64
  %55 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = sext i8 %56 to i32
  %58 = icmp eq i32 %51, %57
  br i1 %58, label %59, label %75

59:                                               ; preds = %42
  %60 = getelementptr inbounds i16, i16* %44, i64 1
  %61 = load i16, i16* %60, align 2
  %62 = add i16 %61, -65
  %63 = icmp ult i16 %62, 26
  %64 = zext i1 %63 to i16
  %65 = shl nuw nsw i16 %64, 5
  %66 = or i16 %65, %61
  %67 = zext i16 %66 to i32
  %68 = getelementptr inbounds [8 x i8], [8 x i8]* %1, i64 0, i64 1
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i64
  %71 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = sext i8 %72 to i32
  %74 = icmp eq i32 %67, %73
  br i1 %74, label %77, label %75

75:                                               ; preds = %213, %14, %28, %157, %171, %185, %199, %42, %59, %77, %93, %109, %125, %2
  %76 = phi i1 [ false, %2 ], [ false, %42 ], [ false, %59 ], [ false, %77 ], [ false, %93 ], [ false, %109 ], [ false, %125 ], [ false, %14 ], [ false, %28 ], [ false, %157 ], [ false, %171 ], [ false, %185 ], [ false, %199 ], [ %226, %213 ]
  ret i1 %76

77:                                               ; preds = %59
  %78 = getelementptr inbounds i16, i16* %44, i64 2
  %79 = load i16, i16* %78, align 2
  %80 = add i16 %79, -65
  %81 = icmp ult i16 %80, 26
  %82 = zext i1 %81 to i16
  %83 = shl nuw nsw i16 %82, 5
  %84 = or i16 %83, %79
  %85 = zext i16 %84 to i32
  %86 = getelementptr inbounds [8 x i8], [8 x i8]* %1, i64 0, i64 2
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i64
  %89 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %88
  %90 = load i8, i8* %89, align 1
  %91 = sext i8 %90 to i32
  %92 = icmp eq i32 %85, %91
  br i1 %92, label %93, label %75

93:                                               ; preds = %77
  %94 = getelementptr inbounds i16, i16* %44, i64 3
  %95 = load i16, i16* %94, align 2
  %96 = add i16 %95, -65
  %97 = icmp ult i16 %96, 26
  %98 = zext i1 %97 to i16
  %99 = shl nuw nsw i16 %98, 5
  %100 = or i16 %99, %95
  %101 = zext i16 %100 to i32
  %102 = getelementptr inbounds [8 x i8], [8 x i8]* %1, i64 0, i64 3
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i64
  %105 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %104
  %106 = load i8, i8* %105, align 1
  %107 = sext i8 %106 to i32
  %108 = icmp eq i32 %101, %107
  br i1 %108, label %109, label %75

109:                                              ; preds = %93
  %110 = getelementptr inbounds i16, i16* %44, i64 4
  %111 = load i16, i16* %110, align 2
  %112 = add i16 %111, -65
  %113 = icmp ult i16 %112, 26
  %114 = zext i1 %113 to i16
  %115 = shl nuw nsw i16 %114, 5
  %116 = or i16 %115, %111
  %117 = zext i16 %116 to i32
  %118 = getelementptr inbounds [8 x i8], [8 x i8]* %1, i64 0, i64 4
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i64
  %121 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %120
  %122 = load i8, i8* %121, align 1
  %123 = sext i8 %122 to i32
  %124 = icmp eq i32 %117, %123
  br i1 %124, label %125, label %75

125:                                              ; preds = %109
  %126 = getelementptr inbounds i16, i16* %44, i64 5
  %127 = load i16, i16* %126, align 2
  %128 = add i16 %127, -65
  %129 = icmp ult i16 %128, 26
  %130 = zext i1 %129 to i16
  %131 = shl nuw nsw i16 %130, 5
  %132 = or i16 %131, %127
  %133 = zext i16 %132 to i32
  %134 = getelementptr inbounds [8 x i8], [8 x i8]* %1, i64 0, i64 5
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i64
  %137 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %136
  %138 = load i8, i8* %137, align 1
  %139 = sext i8 %138 to i32
  %140 = icmp eq i32 %133, %139
  br i1 %140, label %141, label %75

141:                                              ; preds = %125
  %142 = getelementptr inbounds i16, i16* %44, i64 6
  %143 = load i16, i16* %142, align 2
  %144 = add i16 %143, -65
  %145 = icmp ult i16 %144, 26
  %146 = zext i1 %145 to i16
  %147 = shl nuw nsw i16 %146, 5
  %148 = or i16 %147, %143
  %149 = zext i16 %148 to i32
  %150 = getelementptr inbounds [8 x i8], [8 x i8]* %1, i64 0, i64 6
  %151 = load i8, i8* %150, align 1
  %152 = zext i8 %151 to i64
  %153 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %152
  %154 = load i8, i8* %153, align 1
  %155 = sext i8 %154 to i32
  %156 = icmp eq i32 %149, %155
  ret i1 %156

157:                                              ; preds = %28
  %158 = getelementptr inbounds i8, i8* %15, i64 2
  %159 = load i8, i8* %158, align 1
  %160 = zext i8 %159 to i64
  %161 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %160
  %162 = load i8, i8* %161, align 1
  %163 = zext i8 %162 to i32
  %164 = getelementptr inbounds [8 x i8], [8 x i8]* %1, i64 0, i64 2
  %165 = load i8, i8* %164, align 1
  %166 = zext i8 %165 to i64
  %167 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %166
  %168 = load i8, i8* %167, align 1
  %169 = sext i8 %168 to i32
  %170 = icmp eq i32 %163, %169
  br i1 %170, label %171, label %75

171:                                              ; preds = %157
  %172 = getelementptr inbounds i8, i8* %15, i64 3
  %173 = load i8, i8* %172, align 1
  %174 = zext i8 %173 to i64
  %175 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %174
  %176 = load i8, i8* %175, align 1
  %177 = zext i8 %176 to i32
  %178 = getelementptr inbounds [8 x i8], [8 x i8]* %1, i64 0, i64 3
  %179 = load i8, i8* %178, align 1
  %180 = zext i8 %179 to i64
  %181 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %180
  %182 = load i8, i8* %181, align 1
  %183 = sext i8 %182 to i32
  %184 = icmp eq i32 %177, %183
  br i1 %184, label %185, label %75

185:                                              ; preds = %171
  %186 = getelementptr inbounds i8, i8* %15, i64 4
  %187 = load i8, i8* %186, align 1
  %188 = zext i8 %187 to i64
  %189 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %188
  %190 = load i8, i8* %189, align 1
  %191 = zext i8 %190 to i32
  %192 = getelementptr inbounds [8 x i8], [8 x i8]* %1, i64 0, i64 4
  %193 = load i8, i8* %192, align 1
  %194 = zext i8 %193 to i64
  %195 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %194
  %196 = load i8, i8* %195, align 1
  %197 = sext i8 %196 to i32
  %198 = icmp eq i32 %191, %197
  br i1 %198, label %199, label %75

199:                                              ; preds = %185
  %200 = getelementptr inbounds i8, i8* %15, i64 5
  %201 = load i8, i8* %200, align 1
  %202 = zext i8 %201 to i64
  %203 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %202
  %204 = load i8, i8* %203, align 1
  %205 = zext i8 %204 to i32
  %206 = getelementptr inbounds [8 x i8], [8 x i8]* %1, i64 0, i64 5
  %207 = load i8, i8* %206, align 1
  %208 = zext i8 %207 to i64
  %209 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %208
  %210 = load i8, i8* %209, align 1
  %211 = sext i8 %210 to i32
  %212 = icmp eq i32 %205, %211
  br i1 %212, label %213, label %75

213:                                              ; preds = %199
  %214 = getelementptr inbounds i8, i8* %15, i64 6
  %215 = load i8, i8* %214, align 1
  %216 = zext i8 %215 to i64
  %217 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %216
  %218 = load i8, i8* %217, align 1
  %219 = zext i8 %218 to i32
  %220 = getelementptr inbounds [8 x i8], [8 x i8]* %1, i64 0, i64 6
  %221 = load i8, i8* %220, align 1
  %222 = zext i8 %221 to i64
  %223 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %222
  %224 = load i8, i8* %223, align 1
  %225 = sext i8 %224 to i32
  %226 = icmp eq i32 %219, %225
  br label %75
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm6EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* dereferenceable(24), [6 x i8]* dereferenceable(6)) local_unnamed_addr #5 comdat {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 5
  br i1 %5, label %6, label %75

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 1
  br i1 %12, label %42, label %14

14:                                               ; preds = %6
  %15 = load i8*, i8** %13, align 8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i64
  %18 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds [6 x i8], [6 x i8]* %1, i64 0, i64 0
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i64
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = sext i8 %25 to i32
  %27 = icmp eq i32 %20, %26
  br i1 %27, label %28, label %75

28:                                               ; preds = %14
  %29 = getelementptr inbounds i8, i8* %15, i64 1
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i64
  %32 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = getelementptr inbounds [6 x i8], [6 x i8]* %1, i64 0, i64 1
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i64
  %38 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = sext i8 %39 to i32
  %41 = icmp eq i32 %34, %40
  br i1 %41, label %125, label %75

42:                                               ; preds = %6
  %43 = bitcast i8** %13 to i16**
  %44 = load i16*, i16** %43, align 8
  %45 = load i16, i16* %44, align 2
  %46 = add i16 %45, -65
  %47 = icmp ult i16 %46, 26
  %48 = zext i1 %47 to i16
  %49 = shl nuw nsw i16 %48, 5
  %50 = or i16 %49, %45
  %51 = zext i16 %50 to i32
  %52 = getelementptr inbounds [6 x i8], [6 x i8]* %1, i64 0, i64 0
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i64
  %55 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = sext i8 %56 to i32
  %58 = icmp eq i32 %51, %57
  br i1 %58, label %59, label %75

59:                                               ; preds = %42
  %60 = getelementptr inbounds i16, i16* %44, i64 1
  %61 = load i16, i16* %60, align 2
  %62 = add i16 %61, -65
  %63 = icmp ult i16 %62, 26
  %64 = zext i1 %63 to i16
  %65 = shl nuw nsw i16 %64, 5
  %66 = or i16 %65, %61
  %67 = zext i16 %66 to i32
  %68 = getelementptr inbounds [6 x i8], [6 x i8]* %1, i64 0, i64 1
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i64
  %71 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = sext i8 %72 to i32
  %74 = icmp eq i32 %67, %73
  br i1 %74, label %77, label %75

75:                                               ; preds = %153, %14, %28, %125, %139, %42, %59, %77, %93, %2
  %76 = phi i1 [ false, %2 ], [ false, %42 ], [ false, %59 ], [ false, %77 ], [ false, %93 ], [ false, %14 ], [ false, %28 ], [ false, %125 ], [ false, %139 ], [ %166, %153 ]
  ret i1 %76

77:                                               ; preds = %59
  %78 = getelementptr inbounds i16, i16* %44, i64 2
  %79 = load i16, i16* %78, align 2
  %80 = add i16 %79, -65
  %81 = icmp ult i16 %80, 26
  %82 = zext i1 %81 to i16
  %83 = shl nuw nsw i16 %82, 5
  %84 = or i16 %83, %79
  %85 = zext i16 %84 to i32
  %86 = getelementptr inbounds [6 x i8], [6 x i8]* %1, i64 0, i64 2
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i64
  %89 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %88
  %90 = load i8, i8* %89, align 1
  %91 = sext i8 %90 to i32
  %92 = icmp eq i32 %85, %91
  br i1 %92, label %93, label %75

93:                                               ; preds = %77
  %94 = getelementptr inbounds i16, i16* %44, i64 3
  %95 = load i16, i16* %94, align 2
  %96 = add i16 %95, -65
  %97 = icmp ult i16 %96, 26
  %98 = zext i1 %97 to i16
  %99 = shl nuw nsw i16 %98, 5
  %100 = or i16 %99, %95
  %101 = zext i16 %100 to i32
  %102 = getelementptr inbounds [6 x i8], [6 x i8]* %1, i64 0, i64 3
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i64
  %105 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %104
  %106 = load i8, i8* %105, align 1
  %107 = sext i8 %106 to i32
  %108 = icmp eq i32 %101, %107
  br i1 %108, label %109, label %75

109:                                              ; preds = %93
  %110 = getelementptr inbounds i16, i16* %44, i64 4
  %111 = load i16, i16* %110, align 2
  %112 = add i16 %111, -65
  %113 = icmp ult i16 %112, 26
  %114 = zext i1 %113 to i16
  %115 = shl nuw nsw i16 %114, 5
  %116 = or i16 %115, %111
  %117 = zext i16 %116 to i32
  %118 = getelementptr inbounds [6 x i8], [6 x i8]* %1, i64 0, i64 4
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i64
  %121 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %120
  %122 = load i8, i8* %121, align 1
  %123 = sext i8 %122 to i32
  %124 = icmp eq i32 %117, %123
  ret i1 %124

125:                                              ; preds = %28
  %126 = getelementptr inbounds i8, i8* %15, i64 2
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i64
  %129 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %128
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i32
  %132 = getelementptr inbounds [6 x i8], [6 x i8]* %1, i64 0, i64 2
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i64
  %135 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %134
  %136 = load i8, i8* %135, align 1
  %137 = sext i8 %136 to i32
  %138 = icmp eq i32 %131, %137
  br i1 %138, label %139, label %75

139:                                              ; preds = %125
  %140 = getelementptr inbounds i8, i8* %15, i64 3
  %141 = load i8, i8* %140, align 1
  %142 = zext i8 %141 to i64
  %143 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %142
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i32
  %146 = getelementptr inbounds [6 x i8], [6 x i8]* %1, i64 0, i64 3
  %147 = load i8, i8* %146, align 1
  %148 = zext i8 %147 to i64
  %149 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %148
  %150 = load i8, i8* %149, align 1
  %151 = sext i8 %150 to i32
  %152 = icmp eq i32 %145, %151
  br i1 %152, label %153, label %75

153:                                              ; preds = %139
  %154 = getelementptr inbounds i8, i8* %15, i64 4
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i64
  %157 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %156
  %158 = load i8, i8* %157, align 1
  %159 = zext i8 %158 to i32
  %160 = getelementptr inbounds [6 x i8], [6 x i8]* %1, i64 0, i64 4
  %161 = load i8, i8* %160, align 1
  %162 = zext i8 %161 to i64
  %163 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %162
  %164 = load i8, i8* %163, align 1
  %165 = sext i8 %164 to i32
  %166 = icmp eq i32 %159, %165
  br label %75
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm7EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* dereferenceable(24), [7 x i8]* dereferenceable(7)) local_unnamed_addr #5 comdat {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 6
  br i1 %5, label %6, label %75

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 1
  br i1 %12, label %42, label %14

14:                                               ; preds = %6
  %15 = load i8*, i8** %13, align 8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i64
  %18 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 0
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i64
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = sext i8 %25 to i32
  %27 = icmp eq i32 %20, %26
  br i1 %27, label %28, label %75

28:                                               ; preds = %14
  %29 = getelementptr inbounds i8, i8* %15, i64 1
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i64
  %32 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 1
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i64
  %38 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = sext i8 %39 to i32
  %41 = icmp eq i32 %34, %40
  br i1 %41, label %141, label %75

42:                                               ; preds = %6
  %43 = bitcast i8** %13 to i16**
  %44 = load i16*, i16** %43, align 8
  %45 = load i16, i16* %44, align 2
  %46 = add i16 %45, -65
  %47 = icmp ult i16 %46, 26
  %48 = zext i1 %47 to i16
  %49 = shl nuw nsw i16 %48, 5
  %50 = or i16 %49, %45
  %51 = zext i16 %50 to i32
  %52 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 0
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i64
  %55 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = sext i8 %56 to i32
  %58 = icmp eq i32 %51, %57
  br i1 %58, label %59, label %75

59:                                               ; preds = %42
  %60 = getelementptr inbounds i16, i16* %44, i64 1
  %61 = load i16, i16* %60, align 2
  %62 = add i16 %61, -65
  %63 = icmp ult i16 %62, 26
  %64 = zext i1 %63 to i16
  %65 = shl nuw nsw i16 %64, 5
  %66 = or i16 %65, %61
  %67 = zext i16 %66 to i32
  %68 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 1
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i64
  %71 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = sext i8 %72 to i32
  %74 = icmp eq i32 %67, %73
  br i1 %74, label %77, label %75

75:                                               ; preds = %183, %14, %28, %141, %155, %169, %42, %59, %77, %93, %109, %2
  %76 = phi i1 [ false, %2 ], [ false, %42 ], [ false, %59 ], [ false, %77 ], [ false, %93 ], [ false, %109 ], [ false, %14 ], [ false, %28 ], [ false, %141 ], [ false, %155 ], [ false, %169 ], [ %196, %183 ]
  ret i1 %76

77:                                               ; preds = %59
  %78 = getelementptr inbounds i16, i16* %44, i64 2
  %79 = load i16, i16* %78, align 2
  %80 = add i16 %79, -65
  %81 = icmp ult i16 %80, 26
  %82 = zext i1 %81 to i16
  %83 = shl nuw nsw i16 %82, 5
  %84 = or i16 %83, %79
  %85 = zext i16 %84 to i32
  %86 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 2
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i64
  %89 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %88
  %90 = load i8, i8* %89, align 1
  %91 = sext i8 %90 to i32
  %92 = icmp eq i32 %85, %91
  br i1 %92, label %93, label %75

93:                                               ; preds = %77
  %94 = getelementptr inbounds i16, i16* %44, i64 3
  %95 = load i16, i16* %94, align 2
  %96 = add i16 %95, -65
  %97 = icmp ult i16 %96, 26
  %98 = zext i1 %97 to i16
  %99 = shl nuw nsw i16 %98, 5
  %100 = or i16 %99, %95
  %101 = zext i16 %100 to i32
  %102 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 3
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i64
  %105 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %104
  %106 = load i8, i8* %105, align 1
  %107 = sext i8 %106 to i32
  %108 = icmp eq i32 %101, %107
  br i1 %108, label %109, label %75

109:                                              ; preds = %93
  %110 = getelementptr inbounds i16, i16* %44, i64 4
  %111 = load i16, i16* %110, align 2
  %112 = add i16 %111, -65
  %113 = icmp ult i16 %112, 26
  %114 = zext i1 %113 to i16
  %115 = shl nuw nsw i16 %114, 5
  %116 = or i16 %115, %111
  %117 = zext i16 %116 to i32
  %118 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 4
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i64
  %121 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %120
  %122 = load i8, i8* %121, align 1
  %123 = sext i8 %122 to i32
  %124 = icmp eq i32 %117, %123
  br i1 %124, label %125, label %75

125:                                              ; preds = %109
  %126 = getelementptr inbounds i16, i16* %44, i64 5
  %127 = load i16, i16* %126, align 2
  %128 = add i16 %127, -65
  %129 = icmp ult i16 %128, 26
  %130 = zext i1 %129 to i16
  %131 = shl nuw nsw i16 %130, 5
  %132 = or i16 %131, %127
  %133 = zext i16 %132 to i32
  %134 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 5
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i64
  %137 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %136
  %138 = load i8, i8* %137, align 1
  %139 = sext i8 %138 to i32
  %140 = icmp eq i32 %133, %139
  ret i1 %140

141:                                              ; preds = %28
  %142 = getelementptr inbounds i8, i8* %15, i64 2
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i64
  %145 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %144
  %146 = load i8, i8* %145, align 1
  %147 = zext i8 %146 to i32
  %148 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 2
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i64
  %151 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %150
  %152 = load i8, i8* %151, align 1
  %153 = sext i8 %152 to i32
  %154 = icmp eq i32 %147, %153
  br i1 %154, label %155, label %75

155:                                              ; preds = %141
  %156 = getelementptr inbounds i8, i8* %15, i64 3
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i64
  %159 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %158
  %160 = load i8, i8* %159, align 1
  %161 = zext i8 %160 to i32
  %162 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 3
  %163 = load i8, i8* %162, align 1
  %164 = zext i8 %163 to i64
  %165 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %164
  %166 = load i8, i8* %165, align 1
  %167 = sext i8 %166 to i32
  %168 = icmp eq i32 %161, %167
  br i1 %168, label %169, label %75

169:                                              ; preds = %155
  %170 = getelementptr inbounds i8, i8* %15, i64 4
  %171 = load i8, i8* %170, align 1
  %172 = zext i8 %171 to i64
  %173 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %172
  %174 = load i8, i8* %173, align 1
  %175 = zext i8 %174 to i32
  %176 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 4
  %177 = load i8, i8* %176, align 1
  %178 = zext i8 %177 to i64
  %179 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %178
  %180 = load i8, i8* %179, align 1
  %181 = sext i8 %180 to i32
  %182 = icmp eq i32 %175, %181
  br i1 %182, label %183, label %75

183:                                              ; preds = %169
  %184 = getelementptr inbounds i8, i8* %15, i64 5
  %185 = load i8, i8* %184, align 1
  %186 = zext i8 %185 to i64
  %187 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %186
  %188 = load i8, i8* %187, align 1
  %189 = zext i8 %188 to i32
  %190 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 5
  %191 = load i8, i8* %190, align 1
  %192 = zext i8 %191 to i64
  %193 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %192
  %194 = load i8, i8* %193, align 1
  %195 = sext i8 %194 to i32
  %196 = icmp eq i32 %189, %195
  br label %75
}

declare dereferenceable(16) %"class.blink::StylePropertyShorthand"* @_ZN5blink20shorthandForPropertyENS_13CSSPropertyIDE(i32) local_unnamed_addr #1

declare dereferenceable(24) %"class.blink::CSSProperty"* @_ZN5blink11CSSProperty3GetENS_13CSSPropertyIDE(i32) local_unnamed_addr #1

declare %"class.blink::CSSInheritedValue"* @_ZN5blink17CSSInheritedValue6CreateEv() local_unnamed_addr #1

declare %"class.blink::CSSInitialValue"* @_ZN5blink15CSSInitialValue6CreateEv() local_unnamed_addr #1

declare %"class.blink::cssvalue::CSSUnsetValue"* @_ZN5blink8cssvalue13CSSUnsetValue6CreateEv() local_unnamed_addr #1

declare %"class.blink::cssvalue::CSSRevertValue"* @_ZN5blink8cssvalue14CSSRevertValue6CreateEv() local_unnamed_addr #1

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN5blinkL29ParseTransformNumberArgumentsIKhEEbRPT_S3_jPNS_16CSSFunctionValueE(i8** nocapture dereferenceable(8), i8*, i32, %"class.blink::CSSFunctionValue"*) unnamed_addr #0 {
  %5 = alloca i8, align 1
  %6 = icmp eq i32 %2, 0
  br i1 %6, label %66, label %7

7:                                                ; preds = %4
  %8 = ptrtoint i8* %1 to i64
  %9 = getelementptr inbounds %"class.blink::CSSFunctionValue", %"class.blink::CSSFunctionValue"* %3, i64 0, i32 0, i32 1, i32 0
  %10 = getelementptr inbounds %"class.blink::CSSFunctionValue", %"class.blink::CSSFunctionValue"* %3, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %11 = getelementptr inbounds %"class.blink::CSSFunctionValue", %"class.blink::CSSFunctionValue"* %3, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %9, i64 0, i32 0, i32 0, i32 0
  %13 = load i8*, i8** %0, align 8
  br label %14

14:                                               ; preds = %7, %59
  %15 = phi i8* [ %13, %7 ], [ %63, %59 ]
  %16 = phi i32 [ %2, %7 ], [ %64, %59 ]
  %17 = ptrtoint i8* %15 to i64
  %18 = sub i64 %8, %17
  %19 = trunc i64 %18 to i32
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %66, label %21

21:                                               ; preds = %14
  %22 = icmp eq i32 %16, 1
  %23 = select i1 %22, i32 41, i32 44
  %24 = and i64 %18, 4294967295
  %25 = call i8* @memchr(i8* %15, i32 %23, i64 %24) #10
  %26 = icmp eq i8* %25, null
  %27 = ptrtoint i8* %25 to i64
  %28 = sub i64 %27, %17
  %29 = trunc i64 %28 to i32
  %30 = icmp eq i32 %29, -1
  %31 = or i1 %26, %30
  br i1 %31, label %66, label %32

32:                                               ; preds = %21
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %5) #9
  store i8 -86, i8* %5, align 1
  %33 = and i64 %28, 4294967295
  %34 = call double @_ZN3WTF18CharactersToDoubleEPKhmPb(i8* %15, i64 %33, i8* nonnull %5) #9
  %35 = load i8, i8* %5, align 1, !range !2
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %37, label %38

37:                                               ; preds = %32
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %5) #9
  br label %66

38:                                               ; preds = %32
  %39 = call %"class.blink::CSSNumericLiteralValue"* @_ZN5blink22CSSNumericLiteralValue6CreateEdNS_17CSSPrimitiveValue8UnitTypeE(double %34, i32 1) #9
  %40 = load i32, i32* %10, align 4
  %41 = load i32, i32* %11, align 8
  %42 = icmp eq i32 %40, %41
  br i1 %42, label %57, label %43, !prof !3

43:                                               ; preds = %38
  %44 = load %"class.blink::Member"*, %"class.blink::Member"** %12, align 8
  %45 = zext i32 %40 to i64
  %46 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %44, i64 %45
  %47 = ptrtoint %"class.blink::CSSNumericLiteralValue"* %39 to i64
  %48 = bitcast %"class.blink::Member"* %46 to i64*
  store atomic i64 %47, i64* %48 monotonic, align 8
  %49 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %54, label %51

51:                                               ; preds = %43
  %52 = getelementptr inbounds %"class.blink::CSSNumericLiteralValue", %"class.blink::CSSNumericLiteralValue"* %39, i64 0, i32 0, i32 0, i32 0
  %53 = call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %52) #9
  br label %54

54:                                               ; preds = %51, %43
  %55 = load i32, i32* %10, align 4
  %56 = add i32 %55, 1
  store i32 %56, i32* %10, align 4
  br label %59

57:                                               ; preds = %38
  %58 = getelementptr inbounds %"class.blink::CSSNumericLiteralValue", %"class.blink::CSSNumericLiteralValue"* %39, i64 0, i32 0, i32 0
  call void @_ZN3WTF6VectorIN5blink6MemberIKNS1_8CSSValueEEELj4ENS1_13HeapAllocatorEE14AppendSlowCaseIRS4_EEvOT_(%"class.WTF::Vector"* %9, %"class.blink::CSSValue"* dereferenceable(3) %58) #9
  br label %59

59:                                               ; preds = %57, %54
  %60 = add i64 %28, 1
  %61 = load i8*, i8** %0, align 8
  %62 = and i64 %60, 4294967295
  %63 = getelementptr inbounds i8, i8* %61, i64 %62
  store i8* %63, i8** %0, align 8
  %64 = add i32 %16, -1
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %5) #9
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %14

66:                                               ; preds = %59, %21, %14, %4, %37
  %67 = phi i1 [ false, %37 ], [ true, %4 ], [ true, %59 ], [ false, %21 ], [ false, %14 ]
  ret i1 %67
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink8CSSValue14AllocateObjectINS_16CSSFunctionValueEEEPvm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %3 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %2, i64 0, i32 1
  %4 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %3) #9
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %8, !prof !3

6:                                                ; preds = %1
  %7 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #9
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %3, i8* %7) #9
  br label %8

8:                                                ; preds = %1, %6
  %9 = phi i8* [ %7, %6 ], [ %4, %1 ]
  %10 = bitcast i8* %9 to %"class.blink::ThreadState"**
  %11 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %12, align 8
  %14 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_8CSSValueEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %8
  %17 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %18 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %17, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_8CSSValueEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_8CSSValueEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #9
  br label %19

19:                                               ; preds = %8, %16
  %20 = phi i32 [ %14, %8 ], [ %18, %16 ]
  %21 = tail call i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"* %13, %"class.blink::ThreadState"* %11, i64 %0, i32 7, i32 %20, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0))
  ret i8* %21
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"*, %"class.blink::ThreadState"*, i64, i32, i32, i8*) local_unnamed_addr #5 comdat align 2 {
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckOpResult", align 8
  %9 = alloca %"class.logging::CheckError", align 8
  %10 = sext i32 %3 to i64
  %11 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %0, i64 0, i32 19, i64 %10
  %12 = bitcast %"class.blink::BaseArena"** %11 to %"class.blink::NormalPageArena"**
  %13 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %12, align 8
  %14 = bitcast %"class.logging::CheckOpResult"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #9
  %15 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %8, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %15, align 8
  %16 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #9
  %17 = icmp ult i64 %2, -8
  br i1 %17, label %18, label %19

18:                                               ; preds = %6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #9
  store i8* null, i8** %15, align 8
  br label %29

19:                                               ; preds = %6
  %20 = add nsw i64 %2, 8
  %21 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %20) #9
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %2) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %7, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* %21, i8* %22) #9
  %23 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  %24 = load i8*, i8** %23, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #9
  store i8* %24, i8** %15, align 8
  %25 = icmp eq i8* %24, null
  br i1 %25, label %29, label %26

26:                                               ; preds = %19
  %27 = bitcast %"class.logging::CheckError"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %9, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.6, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %8) #9
  %28 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %9) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %9) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #9
  br label %29

29:                                               ; preds = %18, %19, %26
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #9
  %30 = add i64 %2, 15
  %31 = and i64 %30, -8
  %32 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %13, i64 0, i32 4
  %33 = load i64, i64* %32, align 8
  %34 = icmp ult i64 %33, %31
  br i1 %34, label %67, label %35, !prof !3

35:                                               ; preds = %29
  %36 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %13, i64 0, i32 3
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 %31
  store i8* %38, i8** %36, align 8
  %39 = sub i64 %33, %31
  store i64 %39, i64* %32, align 8
  %40 = bitcast i8* %37 to i32*
  store i32 0, i32* %40, align 4
  %41 = getelementptr inbounds i8, i8* %37, i64 4
  %42 = bitcast i8* %41 to i16*
  %43 = trunc i32 %4 to i16
  %44 = shl i16 %43, 2
  store atomic i16 %44, i16* %42 monotonic, align 2
  %45 = lshr exact i64 %31, 1
  %46 = trunc i64 %45 to i16
  %47 = getelementptr inbounds i8, i8* %37, i64 6
  %48 = bitcast i8* %47 to i16*
  store i16 %46, i16* %48, align 2
  %49 = ptrtoint i8* %37 to i64
  %50 = and i64 %49, -131072
  %51 = inttoptr i64 %50 to i8*
  %52 = getelementptr inbounds i8, i8* %51, i64 4400
  %53 = bitcast i8* %52 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %54 = bitcast i8* %52 to i64*
  %55 = load i64, i64* %54, align 16
  %56 = sub i64 %49, %55
  %57 = lshr i64 %56, 3
  %58 = lshr i64 %56, 6
  %59 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %53, i64 0, i32 0, i32 1, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = trunc i64 %57 to i32
  %62 = and i32 %61, 7
  %63 = shl i32 1, %62
  %64 = trunc i32 %63 to i8
  %65 = or i8 %60, %64
  store atomic i8 %65, i8* %59 release, align 1
  %66 = getelementptr inbounds i8, i8* %37, i64 8
  br label %70

67:                                               ; preds = %29
  %68 = zext i32 %4 to i64
  %69 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %13, i64 %31, i64 %68) #9
  br label %70

70:                                               ; preds = %35, %67
  %71 = phi i8* [ %66, %35 ], [ %69, %67 ]
  ret i8* %71
}

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #1

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #1

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #1

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #1

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #7

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_8CSSValueEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::CSSValue"*
  tail call void @_ZNK5blink8CSSValue5TraceEPNS_7VisitorE(%"class.blink::CSSValue"* %3, %"class.blink::Visitor"* %0) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_8CSSValueEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::CSSValue"*
  tail call void @_ZN5blink8CSSValue30FinalizeGarbageCollectedObjectEv(%"class.blink::CSSValue"* %2) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_8CSSValueEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0), i8 1 }
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic"*) local_unnamed_addr #1

declare void @_ZNK5blink8CSSValue5TraceEPNS_7VisitorE(%"class.blink::CSSValue"*, %"class.blink::Visitor"*) local_unnamed_addr #1

declare void @_ZN5blink8CSSValue30FinalizeGarbageCollectedObjectEv(%"class.blink::CSSValue"*) local_unnamed_addr #1

declare void @_ZN5blink12CSSValueListC2ENS_8CSSValue9ClassTypeENS1_18ValueListSeparatorE(%"class.blink::CSSValueList"*, i32, i32) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink8CSSValue14AllocateObjectINS_12CSSValueListEEEPvm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %3 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %2, i64 0, i32 1
  %4 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %3) #9
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %8, !prof !3

6:                                                ; preds = %1
  %7 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #9
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %3, i8* %7) #9
  br label %8

8:                                                ; preds = %1, %6
  %9 = phi i8* [ %7, %6 ], [ %4, %1 ]
  %10 = bitcast i8* %9 to %"class.blink::ThreadState"**
  %11 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %12, align 8
  %14 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_8CSSValueEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %8
  %17 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %18 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %17, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_8CSSValueEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_8CSSValueEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #9
  br label %19

19:                                               ; preds = %8, %16
  %20 = phi i32 [ %14, %8 ], [ %18, %16 ]
  %21 = tail call i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"* %13, %"class.blink::ThreadState"* %11, i64 %0, i32 7, i32 %20, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0))
  ret i8* %21
}

declare void @_ZN5blink12CSSValueListC1ENS_8CSSValue18ValueListSeparatorE(%"class.blink::CSSValueList"*, i32) unnamed_addr #1

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink6MemberIKNS1_8CSSValueEEELj4ENS1_13HeapAllocatorEE14AppendSlowCaseIRS4_EEvOT_(%"class.WTF::Vector"*, %"class.blink::CSSValue"* dereferenceable(3)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  tail call void @_ZN3WTF6VectorIN5blink6MemberIKNS1_8CSSValueEEELj4ENS1_13HeapAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector"* %0, i32 %5) #9
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.blink::Member"*, %"class.blink::Member"** %6, align 8
  %8 = load i32, i32* %3, align 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %7, i64 %9
  %11 = ptrtoint %"class.blink::CSSValue"* %1 to i64
  %12 = bitcast %"class.blink::Member"* %10 to i64*
  store atomic i64 %11, i64* %12 monotonic, align 8
  %13 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %18, label %15

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.blink::CSSValue", %"class.blink::CSSValue"* %1, i64 0, i32 0
  %17 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %16) #9
  br label %18

18:                                               ; preds = %2, %15
  %19 = load i32, i32* %3, align 4
  %20 = add i32 %19, 1
  store i32 %20, i32* %3, align 4
  ret void
}

declare zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink6MemberIKNS1_8CSSValueEEELj4ENS1_13HeapAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 1
  %9 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #9
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt i32 %8, %7
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %23

14:                                               ; preds = %2
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #9
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.8, i64 0, i64 0), i8* %15, i8* %16) #9
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %10, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.9, i64 0, i64 0), i32 1715, %"class.logging::CheckOpResult"* nonnull %4) #9
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #9
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #9
  %24 = icmp ugt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = icmp ugt i32 %25, %1
  %27 = select i1 %26, i32 %25, i32 %1
  call void @_ZN3WTF6VectorIN5blink6MemberIKNS1_8CSSValueEEELj4ENS1_13HeapAllocatorEE15ReserveCapacityEj(%"class.WTF::Vector"* %0, i32 %27)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink6MemberIKNS1_8CSSValueEEELj4ENS1_13HeapAllocatorEE15ReserveCapacityEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = icmp ult i32 %5, %1
  br i1 %6, label %7, label %75, !prof !4

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %9 = load %"class.blink::Member"*, %"class.blink::Member"** %8, align 8
  %10 = icmp eq %"class.blink::Member"* %9, null
  br i1 %10, label %11, label %30

11:                                               ; preds = %7
  %12 = icmp ugt i32 %1, 4
  br i1 %12, label %13, label %26

13:                                               ; preds = %11
  %14 = zext i32 %1 to i64
  %15 = tail call i64 @_ZN5blink13HeapAllocator13QuantizedSizeINS_6MemberIKNS_8CSSValueEEEEEmm(i64 %14) #9
  %16 = lshr i64 %15, 3
  %17 = tail call %"class.blink::HeapVectorBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_17HeapVectorBackingINS_6MemberIKNS_8CSSValueEEEN3WTF12VectorTraitsIS5_EEEEE4CallEm(i64 %16) #9
  %18 = ptrtoint %"class.blink::HeapVectorBacking"* %17 to i64
  %19 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %18, i64* %19 monotonic, align 8
  %20 = trunc i64 %16 to i32
  store i32 %20, i32* %4, align 8
  %21 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %75, label %23

23:                                               ; preds = %13
  %24 = getelementptr inbounds %"class.blink::HeapVectorBacking", %"class.blink::HeapVectorBacking"* %17, i64 0, i32 0
  %25 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %24) #9
  br label %75

26:                                               ; preds = %11
  %27 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %28 = ptrtoint i8* %27 to i64
  %29 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %28, i64* %29 monotonic, align 8
  store i32 4, i32* %4, align 8
  br label %75

30:                                               ; preds = %7
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %32 = bitcast i8* %31 to %"class.blink::Member"*
  %33 = icmp eq %"class.blink::Member"* %9, %32
  br i1 %33, label %49, label %34

34:                                               ; preds = %30
  %35 = icmp ult i32 %1, 5
  br i1 %35, label %41, label %36

36:                                               ; preds = %34
  %37 = zext i32 %1 to i64
  %38 = tail call i64 @_ZN5blink13HeapAllocator13QuantizedSizeINS_6MemberIKNS_8CSSValueEEEEEmm(i64 %37) #9
  %39 = load %"class.blink::Member"*, %"class.blink::Member"** %8, align 8
  %40 = icmp eq %"class.blink::Member"* %39, null
  br i1 %40, label %49, label %41

41:                                               ; preds = %34, %36
  %42 = phi i64 [ %38, %36 ], [ 32, %34 ]
  %43 = phi %"class.blink::Member"* [ %39, %36 ], [ %9, %34 ]
  %44 = bitcast %"class.blink::Member"* %43 to i8*
  %45 = tail call zeroext i1 @_ZN5blink13HeapAllocator19ExpandVectorBackingEPvm(i8* nonnull %44, i64 %42) #9
  br i1 %45, label %46, label %49

46:                                               ; preds = %41
  %47 = lshr i64 %42, 3
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %4, align 8
  br label %75

49:                                               ; preds = %30, %36, %41
  %50 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %51 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %50, i64 0, i32 1
  %52 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %51) #9
  %53 = icmp eq i8* %52, null
  br i1 %53, label %54, label %56, !prof !3

54:                                               ; preds = %49
  %55 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #9
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %51, i8* %55) #9
  br label %56

56:                                               ; preds = %54, %49
  %57 = phi i8* [ %55, %54 ], [ %52, %49 ]
  %58 = bitcast i8* %57 to %"class.blink::ThreadState"**
  %59 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %58, align 8
  %60 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %59, i64 0, i32 6
  %61 = load i8, i8* %60, align 8, !range !2
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %67, label %63

63:                                               ; preds = %56
  %64 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %59, i64 0, i32 16
  %65 = load i32, i32* %64, align 4
  %66 = icmp eq i32 %65, 1
  br i1 %66, label %71, label %67

67:                                               ; preds = %56, %63
  %68 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %59, i64 0, i32 13
  %69 = load i64, i64* %68, align 8
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %74, label %71

71:                                               ; preds = %63, %67
  %72 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %72) #9
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.9, i64 0, i64 0), i32 1810, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.10, i64 0, i64 0)) #9
  %73 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %72) #9
  br label %74

74:                                               ; preds = %67, %71
  call void @_ZN3WTF6VectorIN5blink6MemberIKNS1_8CSSValueEEELj4ENS1_13HeapAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"* %0, i32 %1)
  br label %75

75:                                               ; preds = %46, %26, %23, %13, %2, %74
  ret void
}

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #1

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink6MemberIKNS1_8CSSValueEEELj4ENS1_13HeapAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp ult i32 %1, 5
  br i1 %3, label %4, label %43

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.blink::Member"*, %"class.blink::Member"** %5, align 8
  %7 = icmp eq %"class.blink::Member"* %6, null
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = bitcast i8* %8 to %"class.blink::Member"*
  %10 = icmp eq %"class.blink::Member"* %6, %9
  %11 = or i1 %10, %7
  br i1 %11, label %12, label %16

12:                                               ; preds = %4
  %13 = ptrtoint i8* %8 to i64
  %14 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %13, i64* %14 monotonic, align 8
  %15 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 4, i32* %15, align 8
  br label %102

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0
  %21 = ptrtoint i8* %8 to i64
  %22 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %21, i64* %22 monotonic, align 8
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 4, i32* %23, align 8
  %24 = icmp eq i8* %8, null
  %25 = bitcast %"class.blink::Member"* %6 to i8*
  %26 = shl nuw nsw i64 %19, 3
  br i1 %24, label %42, label %27, !prof !3

27:                                               ; preds = %16
  tail call void @_ZN3WTF17AtomicWriteMemcpyEPvPKvm(i8* nonnull %8, i8* nonnull %25, i64 %26) #9
  %28 = icmp eq i32 %18, 0
  br i1 %28, label %42, label %29

29:                                               ; preds = %27, %39
  %30 = phi i64 [ %32, %39 ], [ %19, %27 ]
  %31 = phi %"class.blink::Member"* [ %40, %39 ], [ %9, %27 ]
  %32 = add nsw i64 %30, -1
  %33 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %39, label %35

35:                                               ; preds = %29
  %36 = bitcast %"class.blink::Member"* %31 to i8**
  %37 = load i8*, i8** %36, align 8
  %38 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %37) #9
  br label %39

39:                                               ; preds = %35, %29
  %40 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %31, i64 1
  %41 = icmp eq i64 %32, 0
  br i1 %41, label %42, label %29

42:                                               ; preds = %39, %16, %27
  tail call void @_ZN3WTF13AtomicMemzeroEPvm(i8* %25, i64 %26) #9
  tail call void @_ZN3WTF12VectorBufferIN5blink6MemberIKNS1_8CSSValueEEELj4ENS1_13HeapAllocatorEE22ReallyDeallocateBufferEPS5_(%"class.WTF::VectorBuffer"* %20, %"class.blink::Member"* %6) #9
  br label %102

43:                                               ; preds = %2
  %44 = zext i32 %1 to i64
  %45 = tail call i64 @_ZN5blink13HeapAllocator13QuantizedSizeINS_6MemberIKNS_8CSSValueEEEEEmm(i64 %44) #9
  %46 = lshr i64 %45, 3
  %47 = tail call %"class.blink::HeapVectorBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_17HeapVectorBackingINS_6MemberIKNS_8CSSValueEEEN3WTF12VectorTraitsIS5_EEEEE4CallEm(i64 %46) #9
  %48 = ptrtoint %"class.blink::HeapVectorBacking"* %47 to i64
  %49 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %50 = load %"class.blink::Member"*, %"class.blink::Member"** %49, align 8
  %51 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %52 = icmp ne %"class.blink::HeapVectorBacking"* %47, null
  %53 = icmp ne %"class.blink::Member"* %50, null
  %54 = and i1 %52, %53
  br i1 %54, label %55, label %81, !prof !4

55:                                               ; preds = %43
  %56 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %57 = bitcast i8* %56 to %"class.blink::Member"*
  %58 = icmp ne %"class.blink::Member"* %50, %57
  %59 = load i32, i32* %51, align 4
  %60 = zext i32 %59 to i64
  %61 = bitcast %"class.blink::Member"* %50 to i8*
  %62 = shl nuw nsw i64 %60, 3
  %63 = getelementptr inbounds %"class.blink::HeapVectorBacking", %"class.blink::HeapVectorBacking"* %47, i64 0, i32 0
  tail call void @_ZN3WTF17AtomicWriteMemcpyEPvPKvm(i8* nonnull %63, i8* nonnull %61, i64 %62) #9
  %64 = icmp eq i32 %59, 0
  %65 = or i1 %58, %64
  br i1 %65, label %81, label %66

66:                                               ; preds = %55
  %67 = bitcast %"class.blink::HeapVectorBacking"* %47 to %"class.blink::Member"*
  br label %68

68:                                               ; preds = %66, %78
  %69 = phi i64 [ %71, %78 ], [ %60, %66 ]
  %70 = phi %"class.blink::Member"* [ %79, %78 ], [ %67, %66 ]
  %71 = add nsw i64 %69, -1
  %72 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %78, label %74

74:                                               ; preds = %68
  %75 = bitcast %"class.blink::Member"* %70 to i8**
  %76 = load i8*, i8** %75, align 8
  %77 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %76) #9
  br label %78

78:                                               ; preds = %74, %68
  %79 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %70, i64 1
  %80 = icmp eq i64 %71, 0
  br i1 %80, label %81, label %68

81:                                               ; preds = %78, %43, %55
  %82 = bitcast %"class.WTF::Vector"* %0 to i8**
  %83 = load i8*, i8** %82, align 8
  %84 = load i32, i32* %51, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 3
  tail call void @_ZN3WTF13AtomicMemzeroEPvm(i8* %83, i64 %86) #9
  %87 = load %"class.blink::Member"*, %"class.blink::Member"** %49, align 8
  %88 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %89 = bitcast i8* %88 to %"class.blink::Member"*
  %90 = icmp eq %"class.blink::Member"* %87, %89
  br i1 %90, label %93, label %91, !prof !4

91:                                               ; preds = %81
  %92 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIN5blink6MemberIKNS1_8CSSValueEEELj4ENS1_13HeapAllocatorEE22ReallyDeallocateBufferEPS5_(%"class.WTF::VectorBuffer"* %92, %"class.blink::Member"* %87) #9
  br label %93

93:                                               ; preds = %81, %91
  %94 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %48, i64* %94 monotonic, align 8
  %95 = trunc i64 %46 to i32
  %96 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %95, i32* %96, align 8
  %97 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %102, label %99

99:                                               ; preds = %93
  %100 = getelementptr inbounds %"class.blink::HeapVectorBacking", %"class.blink::HeapVectorBacking"* %47, i64 0, i32 0
  %101 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %100) #9
  br label %102

102:                                              ; preds = %99, %93, %42, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN5blink13HeapAllocator13QuantizedSizeINS_6MemberIKNS_8CSSValueEEEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 16777216
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 16777216) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.11, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.12, i64 0, i64 0), i32 39, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = shl i64 %0, 3
  ret i64 %20
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::HeapVectorBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_17HeapVectorBackingINS_6MemberIKNS_8CSSValueEEEN3WTF12VectorTraitsIS5_EEEEE4CallEm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp eq i64 %0, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 0) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.13, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.14, i64 0, i64 0), i32 86, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = shl i64 %0, 3
  %21 = call i8* @_ZN5blink17HeapVectorBackingINS_6MemberIKNS_8CSSValueEEEN3WTF12VectorTraitsIS4_EEE14AllocateObjectIS8_EEPvm(i64 %20)
  %22 = bitcast i8* %21 to %"class.blink::HeapVectorBacking"*
  %23 = getelementptr inbounds i8, i8* %21, i64 -4
  %24 = bitcast i8* %23 to i16*
  %25 = load atomic i16, i16* %24 monotonic, align 2
  %26 = or i16 %25, 1
  store atomic i16 %26, i16* %24 release, align 2
  ret %"class.blink::HeapVectorBacking"* %22
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink17HeapVectorBackingINS_6MemberIKNS_8CSSValueEEEN3WTF12VectorTraitsIS4_EEE14AllocateObjectIS8_EEPvm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %3 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %2, i64 0, i32 1
  %4 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %3) #9
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %8, !prof !3

6:                                                ; preds = %1
  %7 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #9
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %3, i8* %7) #9
  br label %8

8:                                                ; preds = %1, %6
  %9 = phi i8* [ %7, %6 ], [ %4, %1 ]
  %10 = bitcast i8* %9 to %"class.blink::ThreadState"**
  %11 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %12, align 8
  %14 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberIKNS_8CSSValueEEEN3WTF12VectorTraitsIS5_EEEEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %8
  %17 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %18 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %17, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberIKNS_8CSSValueEEEN3WTF12VectorTraitsIS5_EEEEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberIKNS_8CSSValueEEEN3WTF12VectorTraitsIS5_EEEEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #9
  br label %19

19:                                               ; preds = %8, %16
  %20 = phi i32 [ %14, %8 ], [ %18, %16 ]
  %21 = tail call i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"* %13, %"class.blink::ThreadState"* %11, i64 %0, i32 4, i32 %20, i8* getelementptr inbounds ([169 x i8], [169 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink17HeapVectorBackingINS1_6MemberIKNS1_8CSSValueEEENS_12VectorTraitsIS6_EEEEEEPKcv, i64 0, i64 0))
  ret i8* %21
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_17HeapVectorBackingINS_6MemberIKNS_8CSSValueEEEN3WTF12VectorTraitsIS5_EEEEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::Member"*
  %4 = getelementptr inbounds i8, i8* %1, i64 -2
  %5 = bitcast i8* %4 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = lshr i16 %6, 2
  %8 = icmp eq i16 %7, 0
  br i1 %8, label %9, label %17, !prof !3

9:                                                ; preds = %2
  %10 = getelementptr inbounds i8, i8* %1, i64 -8
  %11 = ptrtoint i8* %10 to i64
  %12 = and i64 %11, -131072
  %13 = inttoptr i64 %12 to i8*
  %14 = getelementptr inbounds i8, i8* %13, i64 4144
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 16
  br label %20

17:                                               ; preds = %2
  %18 = zext i16 %7 to i64
  %19 = shl nuw nsw i64 %18, 3
  br label %20

20:                                               ; preds = %17, %9
  %21 = phi i64 [ %16, %9 ], [ %19, %17 ]
  %22 = add i64 %21, -8
  %23 = lshr i64 %22, 3
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %42, label %25

25:                                               ; preds = %20
  %26 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  br label %27

27:                                               ; preds = %39, %25
  %28 = phi i64 [ 0, %25 ], [ %40, %39 ]
  %29 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %3, i64 %28
  %30 = bitcast %"class.blink::Member"* %29 to i64*
  %31 = load atomic i64, i64* %30 monotonic, align 8
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %39, label %33

33:                                               ; preds = %27
  %34 = inttoptr i64 %31 to %"class.blink::CSSValue"*
  %35 = getelementptr inbounds %"class.blink::CSSValue", %"class.blink::CSSValue"* %34, i64 0, i32 0
  %36 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %26, align 8
  %37 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %36, i64 5
  %38 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %37, align 8
  tail call void %38(%"class.blink::Visitor"* %0, i8* %35, i8* %35, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_8CSSValueEE5TraceEPNS_7VisitorEPKv) #9
  br label %39

39:                                               ; preds = %33, %27
  %40 = add nuw nsw i64 %28, 1
  %41 = icmp eq i64 %40, %23
  br i1 %41, label %42, label %27

42:                                               ; preds = %39, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_17HeapVectorBackingINS_6MemberIKNS_8CSSValueEEEN3WTF12VectorTraitsIS5_EEEEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0), i8 1 }
}

declare zeroext i1 @_ZN5blink13HeapAllocator19ExpandVectorBackingEPvm(i8*, i64) local_unnamed_addr #1

declare void @_ZN3WTF17AtomicWriteMemcpyEPvPKvm(i8*, i8*, i64) local_unnamed_addr #1

declare void @_ZN3WTF13AtomicMemzeroEPvm(i8*, i64) local_unnamed_addr #1

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIN5blink6MemberIKNS1_8CSSValueEEELj4ENS1_13HeapAllocatorEE22ReallyDeallocateBufferEPS5_(%"class.WTF::VectorBuffer"*, %"class.blink::Member"*) local_unnamed_addr #8 comdat align 2 {
  %3 = bitcast %"class.blink::Member"* %1 to i8*
  tail call void @_ZN5blink13HeapAllocator17FreeVectorBackingEPv(i8* %3) #9
  ret void
}

declare void @_ZN5blink13HeapAllocator17FreeVectorBackingEPv(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN5blinkL29ParseTransformNumberArgumentsIKDsEEbRPT_S3_jPNS_16CSSFunctionValueE(i16** nocapture dereferenceable(8), i16*, i32, %"class.blink::CSSFunctionValue"*) unnamed_addr #0 {
  %5 = alloca i8, align 1
  %6 = icmp eq i32 %2, 0
  br i1 %6, label %71, label %7

7:                                                ; preds = %4
  %8 = ptrtoint i16* %1 to i64
  %9 = getelementptr inbounds %"class.blink::CSSFunctionValue", %"class.blink::CSSFunctionValue"* %3, i64 0, i32 0, i32 1, i32 0
  %10 = getelementptr inbounds %"class.blink::CSSFunctionValue", %"class.blink::CSSFunctionValue"* %3, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %11 = getelementptr inbounds %"class.blink::CSSFunctionValue", %"class.blink::CSSFunctionValue"* %3, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %9, i64 0, i32 0, i32 0, i32 0
  %13 = load i16*, i16** %0, align 8
  br label %14

14:                                               ; preds = %7, %64
  %15 = phi i16* [ %13, %7 ], [ %68, %64 ]
  %16 = phi i32 [ %2, %7 ], [ %69, %64 ]
  %17 = ptrtoint i16* %15 to i64
  %18 = sub i64 %8, %17
  %19 = lshr exact i64 %18, 1
  %20 = trunc i64 %19 to i32
  %21 = icmp eq i32 %16, 1
  %22 = select i1 %21, i16 41, i16 44
  %23 = icmp eq i32 %20, 0
  br i1 %23, label %71, label %24

24:                                               ; preds = %14
  %25 = and i64 %19, 4294967295
  br label %26

26:                                               ; preds = %24, %31
  %27 = phi i64 [ %32, %31 ], [ 0, %24 ]
  %28 = getelementptr inbounds i16, i16* %15, i64 %27
  %29 = load i16, i16* %28, align 2
  %30 = icmp eq i16 %29, %22
  br i1 %30, label %34, label %31

31:                                               ; preds = %26
  %32 = add nuw nsw i64 %27, 1
  %33 = icmp eq i64 %32, %25
  br i1 %33, label %71, label %26

34:                                               ; preds = %26
  %35 = trunc i64 %27 to i32
  %36 = icmp eq i32 %35, -1
  br i1 %36, label %71, label %37

37:                                               ; preds = %34
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %5) #9
  store i8 -86, i8* %5, align 1
  %38 = and i64 %27, 4294967295
  %39 = call double @_ZN3WTF18CharactersToDoubleEPKDsmPb(i16* %15, i64 %38, i8* nonnull %5) #9
  %40 = load i8, i8* %5, align 1, !range !2
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %37
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %5) #9
  br label %71

43:                                               ; preds = %37
  %44 = call %"class.blink::CSSNumericLiteralValue"* @_ZN5blink22CSSNumericLiteralValue6CreateEdNS_17CSSPrimitiveValue8UnitTypeE(double %39, i32 1) #9
  %45 = load i32, i32* %10, align 4
  %46 = load i32, i32* %11, align 8
  %47 = icmp eq i32 %45, %46
  br i1 %47, label %62, label %48, !prof !3

48:                                               ; preds = %43
  %49 = load %"class.blink::Member"*, %"class.blink::Member"** %12, align 8
  %50 = zext i32 %45 to i64
  %51 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %49, i64 %50
  %52 = ptrtoint %"class.blink::CSSNumericLiteralValue"* %44 to i64
  %53 = bitcast %"class.blink::Member"* %51 to i64*
  store atomic i64 %52, i64* %53 monotonic, align 8
  %54 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %59, label %56

56:                                               ; preds = %48
  %57 = getelementptr inbounds %"class.blink::CSSNumericLiteralValue", %"class.blink::CSSNumericLiteralValue"* %44, i64 0, i32 0, i32 0, i32 0
  %58 = call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %57) #9
  br label %59

59:                                               ; preds = %56, %48
  %60 = load i32, i32* %10, align 4
  %61 = add i32 %60, 1
  store i32 %61, i32* %10, align 4
  br label %64

62:                                               ; preds = %43
  %63 = getelementptr inbounds %"class.blink::CSSNumericLiteralValue", %"class.blink::CSSNumericLiteralValue"* %44, i64 0, i32 0, i32 0
  call void @_ZN3WTF6VectorIN5blink6MemberIKNS1_8CSSValueEEELj4ENS1_13HeapAllocatorEE14AppendSlowCaseIRS4_EEvOT_(%"class.WTF::Vector"* %9, %"class.blink::CSSValue"* dereferenceable(3) %63) #9
  br label %64

64:                                               ; preds = %62, %59
  %65 = add nuw i64 %27, 1
  %66 = load i16*, i16** %0, align 8
  %67 = and i64 %65, 4294967295
  %68 = getelementptr inbounds i16, i16* %66, i64 %67
  store i16* %68, i16** %0, align 8
  %69 = add i32 %16, -1
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %5) #9
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %14

71:                                               ; preds = %64, %34, %14, %31, %4, %42
  %72 = phi i1 [ false, %42 ], [ true, %4 ], [ false, %31 ], [ true, %64 ], [ false, %34 ], [ false, %14 ]
  ret i1 %72
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{!"branch_weights", i32 2000, i32 1}
