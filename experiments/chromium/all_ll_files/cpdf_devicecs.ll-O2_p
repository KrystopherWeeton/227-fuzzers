; ModuleID = '../../third_party/pdfium/core/fpdfapi/page/cpdf_devicecs.cpp'
source_filename = "../../third_party/pdfium/core/fpdfapi/page/cpdf_devicecs.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CPDF_DeviceCS = type { %class.CPDF_ColorSpace.base, [4 x i8] }
%class.CPDF_ColorSpace.base = type <{ %"class.fxcrt::Retainable", %"class.fxcrt::Observable", %"class.fxcrt::UnownedPtr", %"class.fxcrt::RetainPtr.144", i32, i32, i32 }>
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.fxcrt::Observable" = type { %"class.std::__1::set" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.fxcrt::UnownedPtr" = type { %class.CPDF_Document* }
%class.CPDF_Document = type { %"class.CPDF_Parser::ParsedObjectsHolder", %"class.fxcrt::Observable", %"class.std::__1::unique_ptr.16", %"class.fxcrt::RetainPtr.33", %"class.fxcrt::RetainPtr.33", %"class.std::__1::vector", i8, i8, i32, i32, %"class.std::__1::unique_ptr.105", %"class.std::__1::unique_ptr.112", %"class.std::__1::unique_ptr.118", %"class.std::__1::unique_ptr.124", %"class.std::__1::vector.130", %"class.CPDF_Document::StockFontClearer", %"class.std::__1::unique_ptr.138" }
%"class.CPDF_Parser::ParsedObjectsHolder" = type { %class.CPDF_IndirectObjectHolder }
%class.CPDF_IndirectObjectHolder = type { i32 (...)**, i32, %"class.std::__1::map", %"class.fxcrt::WeakPtr" }
%"class.std::__1::map" = type { %"class.std::__1::__tree.4" }
%"class.std::__1::__tree.4" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.5", %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.fxcrt::WeakPtr" = type { %"class.fxcrt::RetainPtr" }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.fxcrt::WeakPtr<fxcrt::StringPoolTemplate<fxcrt::ByteString>, std::__1::default_delete<fxcrt::StringPoolTemplate<fxcrt::ByteString> > >::Handle"* }
%"class.fxcrt::WeakPtr<fxcrt::StringPoolTemplate<fxcrt::ByteString>, std::__1::default_delete<fxcrt::StringPoolTemplate<fxcrt::ByteString> > >::Handle" = type { i64, %"class.std::__1::unique_ptr.188" }
%"class.std::__1::unique_ptr.188" = type { %"class.std::__1::__compressed_pair.189" }
%"class.std::__1::__compressed_pair.189" = type { %"struct.std::__1::__compressed_pair_elem.190" }
%"struct.std::__1::__compressed_pair_elem.190" = type { %"class.fxcrt::StringPoolTemplate"* }
%"class.fxcrt::StringPoolTemplate" = type { %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.191", %"class.std::__1::__compressed_pair.199", %"class.std::__1::__compressed_pair.204", %"class.std::__1::__compressed_pair.206", [4 x i8] }>
%"class.std::__1::unique_ptr.191" = type { %"class.std::__1::__compressed_pair.192" }
%"class.std::__1::__compressed_pair.192" = type { %"struct.std::__1::__compressed_pair_elem.193", %"struct.std::__1::__compressed_pair_elem.194" }
%"struct.std::__1::__compressed_pair_elem.193" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.194" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.195" }
%"class.std::__1::__compressed_pair.195" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.199" = type { %"struct.std::__1::__compressed_pair_elem.200" }
%"struct.std::__1::__compressed_pair_elem.200" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.204" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.206" = type { %"struct.std::__1::__compressed_pair_elem.207" }
%"struct.std::__1::__compressed_pair_elem.207" = type { float }
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %class.CPDF_Parser* }
%class.CPDF_Parser = type <{ %"class.std::__1::unique_ptr.19", %"class.std::__1::unique_ptr.23", %"class.fxcrt::UnownedPtr.29", i8, i8, i8, i8, i32, %"class.std::__1::unique_ptr.30", i64, %"class.fxcrt::RetainPtr.62", %"class.fxcrt::ByteString", %"class.std::__1::unique_ptr.74", %"class.std::__1::map.80", %"class.std::__1::set.89", i32, [4 x i8] }>
%"class.std::__1::unique_ptr.19" = type { %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %class.CPDF_SyntaxParser* }
%class.CPDF_SyntaxParser = type opaque
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.CPDF_Parser::ParsedObjectsHolder"* }
%"class.fxcrt::UnownedPtr.29" = type { %"class.CPDF_Parser::ParsedObjectsHolder"* }
%"class.std::__1::unique_ptr.30" = type { %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %class.CPDF_CrossRefTable* }
%class.CPDF_CrossRefTable = type { %"class.fxcrt::RetainPtr.33", %"class.std::__1::map.50" }
%"class.std::__1::map.50" = type { %"class.std::__1::__tree.51" }
%"class.std::__1::__tree.51" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.52", %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.fxcrt::RetainPtr.62" = type { %"class.std::__1::unique_ptr.63" }
%"class.std::__1::unique_ptr.63" = type { %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %class.CPDF_SecurityHandler* }
%class.CPDF_SecurityHandler = type opaque
%"class.fxcrt::ByteString" = type { %"class.fxcrt::RetainPtr.68" }
%"class.fxcrt::RetainPtr.68" = type { %"class.std::__1::unique_ptr.69" }
%"class.std::__1::unique_ptr.69" = type { %"class.std::__1::__compressed_pair.70" }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i8], [7 x i8] }>
%"class.std::__1::unique_ptr.74" = type { %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %class.CPDF_LinearizedHeader* }
%class.CPDF_LinearizedHeader = type opaque
%"class.std::__1::map.80" = type { %"class.std::__1::__tree.81" }
%"class.std::__1::__tree.81" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.82", %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.82" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::set.89" = type { %"class.std::__1::__tree.90" }
%"class.std::__1::__tree.90" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.91", %"class.std::__1::__compressed_pair.95" }
%"class.std::__1::__compressed_pair.91" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.fxcrt::RetainPtr.33" = type { %"class.std::__1::unique_ptr.34" }
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %class.CPDF_Dictionary* }
%class.CPDF_Dictionary = type { %class.CPDF_Object, i32, %"class.fxcrt::WeakPtr", %"class.std::__1::map.37" }
%class.CPDF_Object = type { %"class.fxcrt::Retainable", i32, i32 }
%"class.std::__1::map.37" = type { %"class.std::__1::__tree.38" }
%"class.std::__1::__tree.38" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.39", %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.100" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.101" }
%"struct.std::__1::__compressed_pair_elem.101" = type { %"struct.std::__1::pair"* }
%"class.std::__1::unique_ptr.105" = type { %"class.std::__1::__compressed_pair.106" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"class.CPDF_Document::RenderDataIface"* }
%"class.CPDF_Document::RenderDataIface" = type { i32 (...)**, %"class.fxcrt::UnownedPtr.108" }
%"class.fxcrt::UnownedPtr.108" = type { %class.CPDF_Document* }
%"class.std::__1::unique_ptr.112" = type { %"class.std::__1::__compressed_pair.113" }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.114" = type { %"class.CPDF_Document::PageDataIface"* }
%"class.CPDF_Document::PageDataIface" = type { i32 (...)**, %"class.fxcrt::UnownedPtr.108" }
%"class.std::__1::unique_ptr.118" = type { %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.120" = type { %class.JBig2_DocumentContext* }
%class.JBig2_DocumentContext = type opaque
%"class.std::__1::unique_ptr.124" = type { %"class.std::__1::__compressed_pair.125" }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { %"class.CPDF_Document::LinkListIface"* }
%"class.CPDF_Document::LinkListIface" = type { i32 (...)** }
%"class.std::__1::vector.130" = type { %"class.std::__1::__vector_base.131" }
%"class.std::__1::__vector_base.131" = type { i32*, i32*, %"class.std::__1::__compressed_pair.132" }
%"class.std::__1::__compressed_pair.132" = type { %"struct.std::__1::__compressed_pair_elem.133" }
%"struct.std::__1::__compressed_pair_elem.133" = type { i32* }
%"class.CPDF_Document::StockFontClearer" = type { %"class.fxcrt::UnownedPtr.137" }
%"class.fxcrt::UnownedPtr.137" = type { %"class.CPDF_Document::PageDataIface"* }
%"class.std::__1::unique_ptr.138" = type { %"class.std::__1::__compressed_pair.139" }
%"class.std::__1::__compressed_pair.139" = type { %"struct.std::__1::__compressed_pair_elem.140" }
%"struct.std::__1::__compressed_pair_elem.140" = type { %"class.CPDF_Document::Extension"* }
%"class.CPDF_Document::Extension" = type { i32 (...)** }
%"class.fxcrt::RetainPtr.144" = type { %"class.std::__1::unique_ptr.145" }
%"class.std::__1::unique_ptr.145" = type { %"class.std::__1::__compressed_pair.146" }
%"class.std::__1::__compressed_pair.146" = type { %"struct.std::__1::__compressed_pair_elem.147" }
%"struct.std::__1::__compressed_pair_elem.147" = type { %class.CPDF_Array* }
%class.CPDF_Array = type <{ %class.CPDF_Object, %"class.std::__1::vector.148", %"class.fxcrt::WeakPtr", i32, [4 x i8] }>
%"class.std::__1::vector.148" = type { %"class.std::__1::__vector_base.149" }
%"class.std::__1::__vector_base.149" = type { %"class.fxcrt::RetainPtr.150"*, %"class.fxcrt::RetainPtr.150"*, %"class.std::__1::__compressed_pair.156" }
%"class.fxcrt::RetainPtr.150" = type { %"class.std::__1::unique_ptr.151" }
%"class.std::__1::unique_ptr.151" = type { %"class.std::__1::__compressed_pair.152" }
%"class.std::__1::__compressed_pair.152" = type { %"struct.std::__1::__compressed_pair_elem.153" }
%"struct.std::__1::__compressed_pair_elem.153" = type { %class.CPDF_Object* }
%"class.std::__1::__compressed_pair.156" = type { %"struct.std::__1::__compressed_pair_elem.157" }
%"struct.std::__1::__compressed_pair_elem.157" = type { %"class.fxcrt::RetainPtr.150"* }
%class.CPDF_ColorSpace = type <{ %"class.fxcrt::Retainable", %"class.fxcrt::Observable", %"class.fxcrt::UnownedPtr", %"class.fxcrt::RetainPtr.144", i32, i32, i32, [4 x i8] }>
%"class.std::__1::set.163" = type opaque
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr.164", i64 }
%"class.fxcrt::UnownedPtr.164" = type { float* }
%class.CPDF_PatternCS = type opaque
%class.PatternValue = type { %"class.fxcrt::RetainPtr.182", %"struct.std::__1::array" }
%"class.fxcrt::RetainPtr.182" = type { %"class.std::__1::unique_ptr.183" }
%"class.std::__1::unique_ptr.183" = type { %"class.std::__1::__compressed_pair.184" }
%"class.std::__1::__compressed_pair.184" = type { %"struct.std::__1::__compressed_pair_elem.185" }
%"struct.std::__1::__compressed_pair_elem.185" = type { %class.CPDF_Pattern* }
%class.CPDF_Pattern = type { %"class.fxcrt::Retainable", %"class.fxcrt::Observable", %"class.fxcrt::UnownedPtr.108", %"class.fxcrt::RetainPtr.150", %class.CFX_Matrix, %class.CFX_Matrix }
%class.CFX_Matrix = type { float, float, float, float, float, float }
%"struct.std::__1::array" = type { [16 x float] }

@_ZTV13CPDF_DeviceCS = hidden unnamed_addr constant { [13 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CPDF_DeviceCS*)* @_ZN13CPDF_DeviceCSD2Ev to i8*), i8* bitcast (void (%class.CPDF_DeviceCS*)* @_ZN13CPDF_DeviceCSD0Ev to i8*), i8* bitcast (i1 (%class.CPDF_DeviceCS*, %"class.pdfium::span"*, float*, float*, float*)* @_ZNK13CPDF_DeviceCS6GetRGBEN6pdfium4spanIKfEEPfS4_S4_ to i8*), i8* bitcast (void (%class.CPDF_ColorSpace*, i32, float*, float*, float*)* @_ZNK15CPDF_ColorSpace15GetDefaultValueEiPfS0_S0_ to i8*), i8* bitcast (void (%class.CPDF_DeviceCS*, i8*, i8*, i32, i32, i32, i1)* @_ZNK13CPDF_DeviceCS18TranslateImageLineEPhPKhiiib to i8*), i8* bitcast (void (%class.CPDF_ColorSpace*, i1)* @_ZN15CPDF_ColorSpace19EnableStdConversionEb to i8*), i8* bitcast (i1 (%class.CPDF_ColorSpace*)* @_ZNK15CPDF_ColorSpace8IsNormalEv to i8*), i8* bitcast (%class.CPDF_PatternCS* (%class.CPDF_ColorSpace*)* @_ZN15CPDF_ColorSpace11AsPatternCSEv to i8*), i8* bitcast (%class.CPDF_PatternCS* (%class.CPDF_ColorSpace*)* @_ZNK15CPDF_ColorSpace11AsPatternCSEv to i8*), i8* bitcast (i1 (%class.CPDF_ColorSpace*, %class.PatternValue*, float*, float*, float*)* @_ZNK15CPDF_ColorSpace13GetPatternRGBERK12PatternValuePfS3_S3_ to i8*), i8* bitcast (i32 (%class.CPDF_DeviceCS*, %class.CPDF_Document*, %class.CPDF_Array*, %"class.std::__1::set.163"*)* @_ZN13CPDF_DeviceCS6v_LoadEP13CPDF_DocumentPK10CPDF_ArrayPNSt3__13setIPK11CPDF_ObjectNS5_4lessIS9_EENS5_9allocatorIS9_EEEE to i8*)] }, align 8

@_ZN13CPDF_DeviceCSC1EN15CPDF_ColorSpace6FamilyE = hidden unnamed_addr alias void (%class.CPDF_DeviceCS*, i32), void (%class.CPDF_DeviceCS*, i32)* @_ZN13CPDF_DeviceCSC2EN15CPDF_ColorSpace6FamilyE
@_ZN13CPDF_DeviceCSD1Ev = hidden unnamed_addr alias void (%class.CPDF_DeviceCS*), void (%class.CPDF_DeviceCS*)* @_ZN13CPDF_DeviceCSD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CPDF_DeviceCSC2EN15CPDF_ColorSpace6FamilyE(%class.CPDF_DeviceCS*, i32) unnamed_addr #0 align 2 {
  %3 = bitcast %class.CPDF_DeviceCS* %0 to %class.CPDF_ColorSpace*
  tail call void @_ZN15CPDF_ColorSpaceC2EP13CPDF_DocumentNS_6FamilyE(%class.CPDF_ColorSpace* %3, %class.CPDF_Document* null, i32 %1) #5
  %4 = getelementptr inbounds %class.CPDF_DeviceCS, %class.CPDF_DeviceCS* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTV13CPDF_DeviceCS, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %class.CPDF_DeviceCS, %class.CPDF_DeviceCS* %0, i64 0, i32 0, i32 4
  %6 = load i32, i32* %5, align 8
  %7 = tail call i32 @_ZN15CPDF_ColorSpace19ComponentsForFamilyENS_6FamilyE(i32 %6) #5
  tail call void @_ZN15CPDF_ColorSpace23SetComponentsForStockCSEj(%class.CPDF_ColorSpace* %3, i32 %7) #5
  ret void
}

declare void @_ZN15CPDF_ColorSpaceC2EP13CPDF_DocumentNS_6FamilyE(%class.CPDF_ColorSpace*, %class.CPDF_Document*, i32) unnamed_addr #1

declare void @_ZN15CPDF_ColorSpace23SetComponentsForStockCSEj(%class.CPDF_ColorSpace*, i32) local_unnamed_addr #1

declare i32 @_ZN15CPDF_ColorSpace19ComponentsForFamilyENS_6FamilyE(i32) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN15CPDF_ColorSpaceD2Ev(%class.CPDF_ColorSpace*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CPDF_DeviceCSD2Ev(%class.CPDF_DeviceCS*) unnamed_addr #0 align 2 {
  %2 = bitcast %class.CPDF_DeviceCS* %0 to %class.CPDF_ColorSpace*
  tail call void @_ZN15CPDF_ColorSpaceD2Ev(%class.CPDF_ColorSpace* %2) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CPDF_DeviceCSD0Ev(%class.CPDF_DeviceCS*) unnamed_addr #0 align 2 {
  %2 = bitcast %class.CPDF_DeviceCS* %0 to %class.CPDF_ColorSpace*
  tail call void @_ZN15CPDF_ColorSpaceD2Ev(%class.CPDF_ColorSpace* %2) #5
  %3 = bitcast %class.CPDF_DeviceCS* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #6
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN13CPDF_DeviceCS6v_LoadEP13CPDF_DocumentPK10CPDF_ArrayPNSt3__13setIPK11CPDF_ObjectNS5_4lessIS9_EENS5_9allocatorIS9_EEEE(%class.CPDF_DeviceCS* nocapture readnone, %class.CPDF_Document* nocapture readnone, %class.CPDF_Array* nocapture readnone, %"class.std::__1::set.163"* nocapture readnone) unnamed_addr #4 align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK13CPDF_DeviceCS6GetRGBEN6pdfium4spanIKfEEPfS4_S4_(%class.CPDF_DeviceCS* nocapture readonly, %"class.pdfium::span"* readonly, float*, float*, float*) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %class.CPDF_DeviceCS, %class.CPDF_DeviceCS* %0, i64 0, i32 0, i32 4
  %7 = load i32, i32* %6, align 8
  switch i32 %7, label %146 [
    i32 1, label %8
    i32 2, label %24
    i32 3, label %59
  ]

8:                                                ; preds = %5
  %9 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %1, i64 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %13, !prof !2

12:                                               ; preds = %8
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !4
  unreachable

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %1, i64 0, i32 0, i32 0
  %15 = load float*, float** %14, align 8
  %16 = load float, float* %15, align 4
  %17 = fcmp olt float %16, 0.000000e+00
  %18 = select i1 %17, float 0.000000e+00, float %16
  %19 = fcmp ogt float %18, 1.000000e+00
  %20 = select i1 %19, float 1.000000e+00, float %18
  store float %20, float* %2, align 4
  store float %20, float* %3, align 4
  %21 = bitcast float* %2 to i32*
  %22 = load i32, i32* %21, align 4
  %23 = bitcast float* %4 to i32*
  store i32 %22, i32* %23, align 4
  br label %146

24:                                               ; preds = %5
  %25 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %1, i64 0, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %28, label %29, !prof !2

28:                                               ; preds = %24
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !4
  unreachable

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %1, i64 0, i32 0, i32 0
  %31 = load float*, float** %30, align 8
  %32 = load float, float* %31, align 4
  %33 = fcmp olt float %32, 0.000000e+00
  %34 = select i1 %33, float 0.000000e+00, float %32
  %35 = fcmp ogt float %34, 1.000000e+00
  %36 = select i1 %35, float 1.000000e+00, float %34
  store float %36, float* %2, align 4
  %37 = load i64, i64* %25, align 8
  %38 = icmp ugt i64 %37, 1
  br i1 %38, label %40, label %39, !prof !5

39:                                               ; preds = %29
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !4
  unreachable

40:                                               ; preds = %29
  %41 = load float*, float** %30, align 8
  %42 = getelementptr inbounds float, float* %41, i64 1
  %43 = load float, float* %42, align 4
  %44 = fcmp olt float %43, 0.000000e+00
  %45 = select i1 %44, float 0.000000e+00, float %43
  %46 = fcmp ogt float %45, 1.000000e+00
  %47 = select i1 %46, float 1.000000e+00, float %45
  store float %47, float* %3, align 4
  %48 = load i64, i64* %25, align 8
  %49 = icmp ugt i64 %48, 2
  br i1 %49, label %51, label %50, !prof !5

50:                                               ; preds = %40
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !4
  unreachable

51:                                               ; preds = %40
  %52 = load float*, float** %30, align 8
  %53 = getelementptr inbounds float, float* %52, i64 2
  %54 = load float, float* %53, align 4
  %55 = fcmp olt float %54, 0.000000e+00
  %56 = select i1 %55, float 0.000000e+00, float %54
  %57 = fcmp ogt float %56, 1.000000e+00
  %58 = select i1 %57, float 1.000000e+00, float %56
  store float %58, float* %4, align 4
  br label %146

59:                                               ; preds = %5
  %60 = getelementptr inbounds %class.CPDF_DeviceCS, %class.CPDF_DeviceCS* %0, i64 0, i32 0, i32 5
  %61 = load i32, i32* %60, align 4
  %62 = icmp eq i32 %61, 0
  %63 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %1, i64 0, i32 1
  %64 = load i64, i64* %63, align 8
  br i1 %62, label %100, label %65

65:                                               ; preds = %59
  %66 = icmp ugt i64 %64, 3
  br i1 %66, label %68, label %67, !prof !5

67:                                               ; preds = %65
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !4
  unreachable

68:                                               ; preds = %65
  %69 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %1, i64 0, i32 0, i32 0
  %70 = load float*, float** %69, align 8
  %71 = getelementptr inbounds float, float* %70, i64 3
  %72 = load float, float* %71, align 4
  %73 = load float, float* %70, align 4
  %74 = fadd float %72, %73
  %75 = fcmp olt float %74, 1.000000e+00
  %76 = select i1 %75, float %74, float 1.000000e+00
  %77 = fsub float 1.000000e+00, %76
  store float %77, float* %2, align 4
  %78 = load i64, i64* %63, align 8
  %79 = icmp ugt i64 %78, 1
  br i1 %79, label %81, label %80, !prof !5

80:                                               ; preds = %68
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !4
  unreachable

81:                                               ; preds = %68
  %82 = load float*, float** %69, align 8
  %83 = getelementptr inbounds float, float* %82, i64 1
  %84 = load float, float* %83, align 4
  %85 = fadd float %72, %84
  %86 = fcmp olt float %85, 1.000000e+00
  %87 = select i1 %86, float %85, float 1.000000e+00
  %88 = fsub float 1.000000e+00, %87
  store float %88, float* %3, align 4
  %89 = load i64, i64* %63, align 8
  %90 = icmp ugt i64 %89, 2
  br i1 %90, label %92, label %91, !prof !5

91:                                               ; preds = %81
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !4
  unreachable

92:                                               ; preds = %81
  %93 = load float*, float** %69, align 8
  %94 = getelementptr inbounds float, float* %93, i64 2
  %95 = load float, float* %94, align 4
  %96 = fadd float %72, %95
  %97 = fcmp olt float %96, 1.000000e+00
  %98 = select i1 %97, float %96, float 1.000000e+00
  %99 = fsub float 1.000000e+00, %98
  store float %99, float* %4, align 4
  br label %146

100:                                              ; preds = %59
  %101 = icmp eq i64 %64, 0
  br i1 %101, label %102, label %103, !prof !2

102:                                              ; preds = %100
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !4
  unreachable

103:                                              ; preds = %100
  %104 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %1, i64 0, i32 0, i32 0
  %105 = load float*, float** %104, align 8
  %106 = load float, float* %105, align 4
  %107 = fcmp olt float %106, 0.000000e+00
  %108 = select i1 %107, float 0.000000e+00, float %106
  %109 = fcmp ogt float %108, 1.000000e+00
  %110 = select i1 %109, float 1.000000e+00, float %108
  %111 = icmp eq i64 %64, 1
  br i1 %111, label %112, label %113, !prof !2

112:                                              ; preds = %103
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !4
  unreachable

113:                                              ; preds = %103
  %114 = getelementptr inbounds float, float* %105, i64 1
  %115 = load float, float* %114, align 4
  %116 = fcmp olt float %115, 0.000000e+00
  %117 = select i1 %116, float 0.000000e+00, float %115
  %118 = fcmp ogt float %117, 1.000000e+00
  %119 = select i1 %118, float 1.000000e+00, float %117
  %120 = icmp ugt i64 %64, 2
  br i1 %120, label %122, label %121, !prof !5

121:                                              ; preds = %113
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !4
  unreachable

122:                                              ; preds = %113
  %123 = getelementptr inbounds float, float* %105, i64 2
  %124 = load float, float* %123, align 4
  %125 = fcmp olt float %124, 0.000000e+00
  %126 = select i1 %125, float 0.000000e+00, float %124
  %127 = icmp eq i64 %64, 3
  br i1 %127, label %128, label %129, !prof !2

128:                                              ; preds = %122
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !4
  unreachable

129:                                              ; preds = %122
  %130 = fcmp ogt float %126, 1.000000e+00
  %131 = select i1 %130, float 1.000000e+00, float %126
  %132 = getelementptr inbounds float, float* %105, i64 3
  %133 = load float, float* %132, align 4
  %134 = fcmp olt float %133, 0.000000e+00
  %135 = select i1 %134, float 0.000000e+00, float %133
  %136 = fcmp ogt float %135, 1.000000e+00
  %137 = select i1 %136, float 1.000000e+00, float %135
  %138 = tail call { <2 x float>, float } @_ZN4fxge17AdobeCMYK_to_sRGBEffff(float %110, float %119, float %131, float %137) #5
  %139 = extractvalue { <2 x float>, float } %138, 0
  %140 = extractvalue { <2 x float>, float } %138, 1
  %141 = bitcast <2 x float> %139 to <2 x i32>
  %142 = extractelement <2 x i32> %141, i32 0
  %143 = bitcast float* %2 to i32*
  store i32 %142, i32* %143, align 4
  %144 = extractelement <2 x i32> %141, i32 1
  %145 = bitcast float* %3 to i32*
  store i32 %144, i32* %145, align 4
  store float %140, float* %4, align 4
  br label %146

146:                                              ; preds = %5, %92, %129, %51, %13
  %147 = phi i1 [ true, %51 ], [ true, %13 ], [ true, %129 ], [ true, %92 ], [ false, %5 ]
  ret i1 %147
}

declare { <2 x float>, float } @_ZN4fxge17AdobeCMYK_to_sRGBEffff(float, float, float, float) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK13CPDF_DeviceCS18TranslateImageLineEPhPKhiiib(%class.CPDF_DeviceCS* nocapture readonly, i8*, i8*, i32, i32, i32, i1 zeroext) unnamed_addr #0 align 2 {
  %8 = getelementptr inbounds %class.CPDF_DeviceCS, %class.CPDF_DeviceCS* %0, i64 0, i32 0, i32 4
  %9 = load i32, i32* %8, align 8
  switch i32 %9, label %152 [
    i32 1, label %10
    i32 2, label %40
    i32 3, label %41
  ]

10:                                               ; preds = %7
  %11 = icmp sgt i32 %3, 0
  br i1 %11, label %12, label %152

12:                                               ; preds = %10
  %13 = zext i32 %3 to i64
  %14 = and i64 %13, 1
  %15 = icmp eq i32 %3, 1
  br i1 %15, label %141, label %16

16:                                               ; preds = %12
  %17 = sub nsw i64 %13, %14
  br label %18

18:                                               ; preds = %18, %16
  %19 = phi i64 [ 0, %16 ], [ %37, %18 ]
  %20 = phi i8* [ %1, %16 ], [ %36, %18 ]
  %21 = phi i64 [ %17, %16 ], [ %38, %18 ]
  %22 = getelementptr inbounds i8, i8* %2, i64 %19
  %23 = load i8, i8* %22, align 1
  %24 = getelementptr inbounds i8, i8* %20, i64 1
  store i8 %23, i8* %20, align 1
  %25 = load i8, i8* %22, align 1
  %26 = getelementptr inbounds i8, i8* %20, i64 2
  store i8 %25, i8* %24, align 1
  %27 = load i8, i8* %22, align 1
  %28 = getelementptr inbounds i8, i8* %20, i64 3
  store i8 %27, i8* %26, align 1
  %29 = or i64 %19, 1
  %30 = getelementptr inbounds i8, i8* %2, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = getelementptr inbounds i8, i8* %20, i64 4
  store i8 %31, i8* %28, align 1
  %33 = load i8, i8* %30, align 1
  %34 = getelementptr inbounds i8, i8* %20, i64 5
  store i8 %33, i8* %32, align 1
  %35 = load i8, i8* %30, align 1
  %36 = getelementptr inbounds i8, i8* %20, i64 6
  store i8 %35, i8* %34, align 1
  %37 = add nuw nsw i64 %19, 2
  %38 = add i64 %21, -2
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %141, label %18

40:                                               ; preds = %7
  tail call void @_ZN7fxcodec10ReverseRGBEPhPKhi(i8* %1, i8* %2, i32 %3) #5
  br label %152

41:                                               ; preds = %7
  %42 = icmp sgt i32 %3, 0
  br i1 %6, label %46, label %43

43:                                               ; preds = %41
  br i1 %42, label %44, label %152

44:                                               ; preds = %43
  %45 = getelementptr inbounds %class.CPDF_DeviceCS, %class.CPDF_DeviceCS* %0, i64 0, i32 0, i32 5
  br label %84

46:                                               ; preds = %41
  br i1 %42, label %47, label %152

47:                                               ; preds = %46, %47
  %48 = phi i8* [ %80, %47 ], [ %1, %46 ]
  %49 = phi i8* [ %81, %47 ], [ %2, %46 ]
  %50 = phi i32 [ %82, %47 ], [ 0, %46 ]
  %51 = getelementptr inbounds i8, i8* %49, i64 3
  %52 = load i8, i8* %51, align 1
  %53 = xor i8 %52, -1
  %54 = zext i8 %53 to i32
  %55 = load i8, i8* %49, align 1
  %56 = xor i8 %55, -1
  %57 = zext i8 %56 to i32
  %58 = mul nuw nsw i32 %57, %54
  %59 = trunc i32 %58 to i16
  %60 = udiv i16 %59, 255
  %61 = trunc i16 %60 to i8
  store i8 %61, i8* %48, align 1
  %62 = getelementptr inbounds i8, i8* %49, i64 1
  %63 = load i8, i8* %62, align 1
  %64 = xor i8 %63, -1
  %65 = zext i8 %64 to i32
  %66 = mul nuw nsw i32 %65, %54
  %67 = trunc i32 %66 to i16
  %68 = udiv i16 %67, 255
  %69 = trunc i16 %68 to i8
  %70 = getelementptr inbounds i8, i8* %48, i64 1
  store i8 %69, i8* %70, align 1
  %71 = getelementptr inbounds i8, i8* %49, i64 2
  %72 = load i8, i8* %71, align 1
  %73 = xor i8 %72, -1
  %74 = zext i8 %73 to i32
  %75 = mul nuw nsw i32 %74, %54
  %76 = trunc i32 %75 to i16
  %77 = udiv i16 %76, 255
  %78 = trunc i16 %77 to i8
  %79 = getelementptr inbounds i8, i8* %48, i64 2
  store i8 %78, i8* %79, align 1
  %80 = getelementptr inbounds i8, i8* %48, i64 3
  %81 = getelementptr inbounds i8, i8* %49, i64 4
  %82 = add nuw nsw i32 %50, 1
  %83 = icmp eq i32 %82, %3
  br i1 %83, label %152, label %47

84:                                               ; preds = %135, %44
  %85 = phi i8* [ %1, %44 ], [ %138, %135 ]
  %86 = phi i8* [ %2, %44 ], [ %137, %135 ]
  %87 = phi i32 [ 0, %44 ], [ %139, %135 ]
  %88 = load i32, i32* %45, align 4
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %119, label %90

90:                                               ; preds = %84
  %91 = getelementptr inbounds i8, i8* %86, i64 3
  %92 = load i8, i8* %91, align 1
  %93 = load i8, i8* %86, align 1
  %94 = zext i8 %93 to i32
  %95 = zext i8 %92 to i32
  %96 = add nuw nsw i32 %94, %95
  %97 = icmp ult i32 %96, 255
  %98 = select i1 %97, i32 %96, i32 255
  %99 = trunc i32 %98 to i8
  %100 = xor i8 %99, -1
  %101 = getelementptr inbounds i8, i8* %85, i64 2
  store i8 %100, i8* %101, align 1
  %102 = getelementptr inbounds i8, i8* %86, i64 1
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = add nuw nsw i32 %104, %95
  %106 = icmp ult i32 %105, 255
  %107 = select i1 %106, i32 %105, i32 255
  %108 = trunc i32 %107 to i8
  %109 = xor i8 %108, -1
  %110 = getelementptr inbounds i8, i8* %85, i64 1
  store i8 %109, i8* %110, align 1
  %111 = getelementptr inbounds i8, i8* %86, i64 2
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i32
  %114 = add nuw nsw i32 %113, %95
  %115 = icmp ult i32 %114, 255
  %116 = select i1 %115, i32 %114, i32 255
  %117 = trunc i32 %116 to i8
  %118 = xor i8 %117, -1
  br label %135

119:                                              ; preds = %84
  %120 = load i8, i8* %86, align 1
  %121 = getelementptr inbounds i8, i8* %86, i64 1
  %122 = load i8, i8* %121, align 1
  %123 = getelementptr inbounds i8, i8* %86, i64 2
  %124 = load i8, i8* %123, align 1
  %125 = getelementptr inbounds i8, i8* %86, i64 3
  %126 = load i8, i8* %125, align 1
  %127 = tail call i24 @_ZN4fxge18AdobeCMYK_to_sRGB1Ehhhh(i8 zeroext %120, i8 zeroext %122, i8 zeroext %124, i8 zeroext %126) #5
  %128 = trunc i24 %127 to i8
  %129 = lshr i24 %127, 8
  %130 = trunc i24 %129 to i8
  %131 = lshr i24 %127, 16
  %132 = trunc i24 %131 to i8
  %133 = getelementptr inbounds i8, i8* %85, i64 2
  %134 = getelementptr inbounds i8, i8* %85, i64 1
  store i8 %128, i8* %133, align 1
  store i8 %130, i8* %134, align 1
  br label %135

135:                                              ; preds = %119, %90
  %136 = phi i8 [ %118, %90 ], [ %132, %119 ]
  store i8 %136, i8* %85, align 1
  %137 = getelementptr inbounds i8, i8* %86, i64 4
  %138 = getelementptr inbounds i8, i8* %85, i64 3
  %139 = add nuw nsw i32 %87, 1
  %140 = icmp eq i32 %139, %3
  br i1 %140, label %152, label %84

141:                                              ; preds = %18, %12
  %142 = phi i64 [ 0, %12 ], [ %37, %18 ]
  %143 = phi i8* [ %1, %12 ], [ %36, %18 ]
  %144 = icmp eq i64 %14, 0
  br i1 %144, label %152, label %145

145:                                              ; preds = %141
  %146 = getelementptr inbounds i8, i8* %2, i64 %142
  %147 = load i8, i8* %146, align 1
  %148 = getelementptr inbounds i8, i8* %143, i64 1
  store i8 %147, i8* %143, align 1
  %149 = load i8, i8* %146, align 1
  %150 = getelementptr inbounds i8, i8* %143, i64 2
  store i8 %149, i8* %148, align 1
  %151 = load i8, i8* %146, align 1
  store i8 %151, i8* %150, align 1
  br label %152

152:                                              ; preds = %135, %47, %145, %141, %43, %46, %10, %7, %40
  ret void
}

declare void @_ZN7fxcodec10ReverseRGBEPhPKhi(i8*, i8*, i32) local_unnamed_addr #1

declare i24 @_ZN4fxge18AdobeCMYK_to_sRGB1Ehhhh(i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext) local_unnamed_addr #1

declare void @_ZNK15CPDF_ColorSpace15GetDefaultValueEiPfS0_S0_(%class.CPDF_ColorSpace*, i32, float*, float*, float*) unnamed_addr #1

declare void @_ZN15CPDF_ColorSpace19EnableStdConversionEb(%class.CPDF_ColorSpace*, i1 zeroext) unnamed_addr #1

declare zeroext i1 @_ZNK15CPDF_ColorSpace8IsNormalEv(%class.CPDF_ColorSpace*) unnamed_addr #1

declare %class.CPDF_PatternCS* @_ZN15CPDF_ColorSpace11AsPatternCSEv(%class.CPDF_ColorSpace*) unnamed_addr #1

declare %class.CPDF_PatternCS* @_ZNK15CPDF_ColorSpace11AsPatternCSEv(%class.CPDF_ColorSpace*) unnamed_addr #1

declare zeroext i1 @_ZNK15CPDF_ColorSpace13GetPatternRGBERK12PatternValuePfS3_S3_(%class.CPDF_ColorSpace*, %class.PatternValue* dereferenceable(72), float*, float*, float*) unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i32 -2143550358}
!4 = !{i32 -2143550337}
!5 = !{!"branch_weights", i32 2000, i32 1}
