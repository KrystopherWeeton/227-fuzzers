; ModuleID = '../../components/viz/service/display/output_surface.cc'
source_filename = "../../components/viz/service/display/output_surface.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.viz::OutputSurface::Capabilities" = type { i32, i32, i8, i32, i8, i8, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i8, i8, [15 x i32] }
%"class.viz::OutputSurface" = type { i32 (...)**, %"struct.viz::OutputSurface::Capabilities", %class.scoped_refptr, %"class.std::__1::unique_ptr", i32, %class.SkMatrix44 }
%class.scoped_refptr = type { %"class.viz::ContextProvider"* }
%"class.viz::ContextProvider" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.viz::SoftwareOutputDevice"* }
%"class.viz::SoftwareOutputDevice" = type { i32 (...)**, %class.scoped_refptr.0, %"class.viz::SoftwareOutputDeviceClient"*, %"class.gfx::Size", %"class.gfx::Rect", %class.sk_sp, %"class.std::__1::unique_ptr.2" }
%class.scoped_refptr.0 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe" }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.viz::SoftwareOutputDeviceClient" = type { i32 (...)** }
%"class.gfx::Size" = type { i32, i32 }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%class.sk_sp = type { %class.SkSurface* }
%class.SkSurface = type { %class.SkRefCnt.base, %class.SkSurfaceProps, i32, i32, i32 }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%class.SkSurfaceProps = type { i32, i32 }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.gfx::VSyncProvider"* }
%"class.gfx::VSyncProvider" = type opaque
%class.SkMatrix44 = type <{ [4 x [4 x float]], i8, [3 x i8] }>
%"class.viz::SkiaOutputSurface" = type opaque
%"struct.gfx::SwapResponse" = type { i64, i32, %"struct.gfx::SwapTimings" }
%"struct.gfx::SwapTimings" = type { %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks" }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.ui::LatencyInfo"*, %"class.ui::LatencyInfo"*, %"class.std::__1::__compressed_pair.14" }
%"class.ui::LatencyInfo" = type { %"class.base::flat_map", i64, i64, i8, i8, i8, i32, float, float, i64 }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.9" }
%"class.std::__1::vector.9" = type { %"class.std::__1::__vector_base.10" }
%"class.std::__1::__vector_base.10" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.11" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"struct.std::__1::pair"* }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.ui::LatencyInfo"* }
%"class.base::ScopedClosureRunner" = type { %"class.base::OnceCallback" }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.19 }
%class.scoped_refptr.19 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.20", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.20" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"struct.gpu::Mailbox" = type { [16 x i8] }
%"class.mojo::PendingReceiver" = type { %"struct.mojo::internal::PendingReceiverState" }
%"struct.mojo::internal::PendingReceiverState" = type { %"class.mojo::ScopedHandleBase", %"class.mojo::ConnectionGroup::Ref" }
%"class.mojo::ScopedHandleBase" = type { %"class.mojo::MessagePipeHandle" }
%"class.mojo::MessagePipeHandle" = type { %"class.mojo::Handle" }
%"class.mojo::Handle" = type { i32 }
%"class.mojo::ConnectionGroup::Ref" = type { i32, %class.scoped_refptr.21 }
%class.scoped_refptr.21 = type { %"class.mojo::ConnectionGroup"* }
%"class.mojo::ConnectionGroup" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.22", [4 x i8], %"class.base::RepeatingCallback.23", %class.scoped_refptr.0, %"class.mojo::ConnectionGroup::Ref", %"struct.std::__1::atomic.24", [4 x i8] }>
%"class.base::RefCountedThreadSafe.22" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::RepeatingCallback.23" = type { %"class.base::internal::CallbackBaseCopyable" }
%"struct.std::__1::atomic.24" = type { %"struct.std::__1::__atomic_base.25" }
%"struct.std::__1::__atomic_base.25" = type { %"struct.std::__1::__atomic_base.26" }
%"struct.std::__1::__atomic_base.26" = type { %"struct.std::__1::__cxx_atomic_impl.27" }
%"struct.std::__1::__cxx_atomic_impl.27" = type { %"struct.std::__1::__cxx_atomic_base_impl.28" }
%"struct.std::__1::__cxx_atomic_base_impl.28" = type { i32 }

$_ZN3viz13OutputSurface30SetNeedsMeasureNextDrawLatencyEv = comdat any

$_ZN3viz13OutputSurface12SetFrameRateEf = comdat any

@_ZTVN3viz13OutputSurfaceE = hidden unnamed_addr constant { [32 x i8*] } { [32 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.viz::OutputSurface"*)* @_ZN3viz13OutputSurfaceD2Ev to i8*), i8* bitcast (void (%"class.viz::OutputSurface"*)* @_ZN3viz13OutputSurfaceD0Ev to i8*), i8* bitcast (%"class.viz::SkiaOutputSurface"* (%"class.viz::OutputSurface"*)* @_ZN3viz13OutputSurface19AsSkiaOutputSurfaceEv to i8*), i8* bitcast (i32 (%"class.viz::OutputSurface"*)* @_ZNK3viz13OutputSurface16GetSurfaceHandleEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.viz::OutputSurface"*, %"class.gfx::Rect"*)* @_ZN3viz13OutputSurface16SetDrawRectangleERKN3gfx4RectE to i8*), i8* bitcast (void (%"class.viz::OutputSurface"*, i1)* @_ZN3viz13OutputSurface17SetEnableDCLayersEb to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast ({ i64, i64 } (%"class.viz::OutputSurface"*)* @_ZNK3viz13OutputSurface17GetOverlayMailboxEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast ({ i64, i64 } (%"class.viz::OutputSurface"*)* @_ZNK3viz13OutputSurface27GetCurrentFramebufferDamageEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.viz::OutputSurface"*, %"class.base::RepeatingCallback"*)* @_ZN3viz13OutputSurface19SetGpuVSyncCallbackEN4base17RepeatingCallbackIFvNS1_9TimeTicksENS1_9TimeDeltaEEEE to i8*), i8* bitcast (void (%"class.viz::OutputSurface"*, i1)* @_ZN3viz13OutputSurface18SetGpuVSyncEnabledEb to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.base::ScopedClosureRunner"*, %"class.viz::OutputSurface"*)* @_ZN3viz13OutputSurface20GetCacheBackBufferCbEv to i8*), i8* bitcast (void (%"class.viz::OutputSurface"*, i1)* @_ZN3viz13OutputSurface29SetNeedsSwapSizeNotificationsEb to i8*), i8* bitcast (void (%"class.viz::OutputSurface"*)* @_ZN3viz13OutputSurface30SetNeedsMeasureNextDrawLatencyEv to i8*), i8* bitcast (void (%"class.viz::OutputSurface"*, float)* @_ZN3viz13OutputSurface12SetFrameRateEf to i8*), i8* bitcast (void (%"class.viz::OutputSurface"*, %"class.mojo::PendingReceiver"*)* @_ZN3viz13OutputSurface37InitDelegatedInkPointRendererReceiverEN4mojo15PendingReceiverIN3gfx5mojom25DelegatedInkPointRendererEEE to i8*)] }, align 8
@constinit = private unnamed_addr constant [4 x [4 x float]] [[4 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00]], align 4

@_ZN3viz13OutputSurface12CapabilitiesC1Ev = hidden unnamed_addr alias void (%"struct.viz::OutputSurface::Capabilities"*), void (%"struct.viz::OutputSurface::Capabilities"*)* @_ZN3viz13OutputSurface12CapabilitiesC2Ev
@_ZN3viz13OutputSurface12CapabilitiesC1ERKS1_ = hidden unnamed_addr alias void (%"struct.viz::OutputSurface::Capabilities"*, %"struct.viz::OutputSurface::Capabilities"*), void (%"struct.viz::OutputSurface::Capabilities"*, %"struct.viz::OutputSurface::Capabilities"*)* @_ZN3viz13OutputSurface12CapabilitiesC2ERKS1_
@_ZN3viz13OutputSurfaceD1Ev = hidden unnamed_addr alias void (%"class.viz::OutputSurface"*), void (%"class.viz::OutputSurface"*)* @_ZN3viz13OutputSurfaceD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3viz13OutputSurface12CapabilitiesC2Ev(%"struct.viz::OutputSurface::Capabilities"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.viz::OutputSurface::Capabilities", %"struct.viz::OutputSurface::Capabilities"* %0, i64 0, i32 0
  store i32 1, i32* %2, align 4
  %3 = getelementptr inbounds %"struct.viz::OutputSurface::Capabilities", %"struct.viz::OutputSurface::Capabilities"* %0, i64 0, i32 1
  store i32 2, i32* %3, align 4
  %4 = getelementptr inbounds %"struct.viz::OutputSurface::Capabilities", %"struct.viz::OutputSurface::Capabilities"* %0, i64 0, i32 2
  store i8 1, i8* %4, align 4
  %5 = getelementptr inbounds %"struct.viz::OutputSurface::Capabilities", %"struct.viz::OutputSurface::Capabilities"* %0, i64 0, i32 3
  store i32 1, i32* %5, align 4
  %6 = getelementptr inbounds %"struct.viz::OutputSurface::Capabilities", %"struct.viz::OutputSurface::Capabilities"* %0, i64 0, i32 4
  %7 = getelementptr inbounds %"struct.viz::OutputSurface::Capabilities", %"struct.viz::OutputSurface::Capabilities"* %0, i64 0, i32 9
  store i32 0, i32* %7, align 4
  %8 = getelementptr inbounds %"struct.viz::OutputSurface::Capabilities", %"struct.viz::OutputSurface::Capabilities"* %0, i64 0, i32 10
  store i8 0, i8* %8, align 4
  %9 = getelementptr inbounds %"struct.viz::OutputSurface::Capabilities", %"struct.viz::OutputSurface::Capabilities"* %0, i64 0, i32 11
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %"struct.viz::OutputSurface::Capabilities", %"struct.viz::OutputSurface::Capabilities"* %0, i64 0, i32 12
  call void @llvm.memset.p0i8.i64(i8* align 4 %6, i8 0, i64 5, i1 false)
  store i8 1, i8* %10, align 2
  %11 = getelementptr inbounds %"struct.viz::OutputSurface::Capabilities", %"struct.viz::OutputSurface::Capabilities"* %0, i64 0, i32 13
  call void @llvm.memset.p0i8.i64(i8* align 1 %11, i8 0, i64 73, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz13OutputSurface12CapabilitiesC2ERKS1_(%"struct.viz::OutputSurface::Capabilities"* nocapture, %"struct.viz::OutputSurface::Capabilities"* nocapture readonly dereferenceable(104)) unnamed_addr #1 align 2 {
  %3 = bitcast %"struct.viz::OutputSurface::Capabilities"* %0 to i8*
  %4 = bitcast %"struct.viz::OutputSurface::Capabilities"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 4 %4, i64 104, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz13OutputSurfaceC2ENS0_4TypeE(%"class.viz::OutputSurface"* nocapture, i32) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [32 x i8*] }, { [32 x i8*] }* @_ZTVN3viz13OutputSurfaceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 1, i32 0
  store i32 1, i32* %4, align 4
  %5 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 1, i32 1
  store i32 2, i32* %5, align 4
  %6 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 1, i32 2
  store i8 1, i8* %6, align 4
  %7 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 1, i32 3
  store i32 1, i32* %7, align 4
  %8 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 1, i32 4
  %9 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 1, i32 9
  store i32 0, i32* %9, align 4
  %10 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 1, i32 10
  store i8 0, i8* %10, align 4
  %11 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 1, i32 11
  store i8 0, i8* %11, align 1
  %12 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 1, i32 12
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 5, i1 false) #8
  store i8 1, i8* %12, align 2
  %13 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 1, i32 13
  %14 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 4
  call void @llvm.memset.p0i8.i64(i8* align 1 %13, i8 0, i64 89, i1 false)
  store i32 %1, i32* %14, align 8
  %15 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 5
  %16 = bitcast %class.SkMatrix44* %15 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %16, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #8
  %17 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 5, i32 1
  store i8 0, i8* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz13OutputSurfaceC2E13scoped_refptrINS_15ContextProviderEE(%"class.viz::OutputSurface"* nocapture, %"class.viz::ContextProvider"*) unnamed_addr #1 align 2 {
  %3 = ptrtoint %"class.viz::ContextProvider"* %1 to i64
  %4 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [32 x i8*] }, { [32 x i8*] }* @_ZTVN3viz13OutputSurfaceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 1, i32 0
  store i32 1, i32* %5, align 4
  %6 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 1, i32 1
  store i32 2, i32* %6, align 4
  %7 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 1, i32 2
  store i8 1, i8* %7, align 4
  %8 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 1, i32 3
  store i32 1, i32* %8, align 4
  %9 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 1, i32 4
  %10 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 1, i32 9
  store i32 0, i32* %10, align 4
  %11 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 1, i32 10
  store i8 0, i8* %11, align 4
  %12 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 1, i32 11
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 1, i32 12
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %9, i8 0, i64 5, i1 false) #8
  store i8 1, i8* %13, align 2
  %14 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 1, i32 13
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %14, i8 0, i64 73, i1 false) #8
  %15 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 2
  %16 = bitcast %class.scoped_refptr* %15 to i64*
  store i64 %3, i64* %16, align 8
  %17 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 3
  %18 = bitcast %"class.std::__1::unique_ptr"* %17 to i64*
  store i64 0, i64* %18, align 8
  %19 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 4
  store i32 1, i32* %19, align 8
  %20 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 5
  %21 = bitcast %class.SkMatrix44* %20 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %21, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #8
  %22 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 5, i32 1
  store i8 0, i8* %22, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz13OutputSurfaceC2ENSt3__110unique_ptrINS_20SoftwareOutputDeviceENS1_14default_deleteIS3_EEEE(%"class.viz::OutputSurface"* nocapture, %"class.viz::SoftwareOutputDevice"*) unnamed_addr #1 align 2 {
  %3 = ptrtoint %"class.viz::SoftwareOutputDevice"* %1 to i64
  %4 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [32 x i8*] }, { [32 x i8*] }* @_ZTVN3viz13OutputSurfaceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 1, i32 0
  store i32 1, i32* %5, align 4
  %6 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 1, i32 1
  store i32 2, i32* %6, align 4
  %7 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 1, i32 2
  store i8 1, i8* %7, align 4
  %8 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 1, i32 3
  store i32 1, i32* %8, align 4
  %9 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 1, i32 4
  %10 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 1, i32 9
  store i32 0, i32* %10, align 4
  %11 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 1, i32 10
  store i8 0, i8* %11, align 4
  %12 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 1, i32 11
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 1, i32 12
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %9, i8 0, i64 5, i1 false) #8
  store i8 1, i8* %13, align 2
  %14 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 1, i32 13
  %15 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 3
  %16 = bitcast %"class.std::__1::unique_ptr"* %15 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 1 %14, i8 0, i64 81, i1 false)
  store i64 %3, i64* %16, align 8
  %17 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 4
  store i32 0, i32* %17, align 8
  %18 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 5
  %19 = bitcast %class.SkMatrix44* %18 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %19, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #8
  %20 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 5, i32 1
  store i8 0, i8* %20, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz13OutputSurfaceD2Ev(%"class.viz::OutputSurface"* nocapture) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [32 x i8*] }, { [32 x i8*] }* @_ZTVN3viz13OutputSurfaceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %4 = load %"class.viz::SoftwareOutputDevice"*, %"class.viz::SoftwareOutputDevice"** %3, align 8
  store %"class.viz::SoftwareOutputDevice"* null, %"class.viz::SoftwareOutputDevice"** %3, align 8
  %5 = icmp eq %"class.viz::SoftwareOutputDevice"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.viz::SoftwareOutputDevice"* %4 to void (%"class.viz::SoftwareOutputDevice"*)***
  %8 = load void (%"class.viz::SoftwareOutputDevice"*)**, void (%"class.viz::SoftwareOutputDevice"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.viz::SoftwareOutputDevice"*)*, void (%"class.viz::SoftwareOutputDevice"*)** %8, i64 1
  %10 = load void (%"class.viz::SoftwareOutputDevice"*)*, void (%"class.viz::SoftwareOutputDevice"*)** %9, align 8
  tail call void %10(%"class.viz::SoftwareOutputDevice"* nonnull %4) #8
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.viz::OutputSurface", %"class.viz::OutputSurface"* %0, i64 0, i32 2, i32 0
  %13 = load %"class.viz::ContextProvider"*, %"class.viz::ContextProvider"** %12, align 8
  %14 = icmp eq %"class.viz::ContextProvider"* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = bitcast %"class.viz::ContextProvider"* %13 to void (%"class.viz::ContextProvider"*)***
  %17 = load void (%"class.viz::ContextProvider"*)**, void (%"class.viz::ContextProvider"*)*** %16, align 8
  %18 = getelementptr inbounds void (%"class.viz::ContextProvider"*)*, void (%"class.viz::ContextProvider"*)** %17, i64 1
  %19 = load void (%"class.viz::ContextProvider"*)*, void (%"class.viz::ContextProvider"*)** %18, align 8
  tail call void %19(%"class.viz::ContextProvider"* nonnull %13) #8
  br label %20

20:                                               ; preds = %11, %15
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN3viz13OutputSurfaceD0Ev(%"class.viz::OutputSurface"* nocapture readnone) unnamed_addr #3 align 2 {
  tail call void @llvm.trap() #9
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN3viz13OutputSurface16SetDrawRectangleERKN3gfx4RectE(%"class.viz::OutputSurface"* nocapture, %"class.gfx::Rect"* nocapture dereferenceable(16)) unnamed_addr #5 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN3viz13OutputSurface17SetEnableDCLayersEb(%"class.viz::OutputSurface"* nocapture, i1 zeroext) unnamed_addr #5 align 2 {
  ret void
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden { i64, i64 } @_ZNK3viz13OutputSurface27GetCurrentFramebufferDamageEv(%"class.viz::OutputSurface"* nocapture readnone) unnamed_addr #6 align 2 {
  ret { i64, i64 } zeroinitializer
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden noalias %"class.viz::SkiaOutputSurface"* @_ZN3viz13OutputSurface19AsSkiaOutputSurfaceEv(%"class.viz::OutputSurface"* nocapture readnone) unnamed_addr #5 align 2 {
  ret %"class.viz::SkiaOutputSurface"* null
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZNK3viz13OutputSurface16GetSurfaceHandleEv(%"class.viz::OutputSurface"* nocapture readnone) unnamed_addr #5 align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz13OutputSurface23UpdateLatencyInfoOnSwapERKN3gfx12SwapResponseEPNSt3__16vectorIN2ui11LatencyInfoENS5_9allocatorIS8_EEEE(%"struct.gfx::SwapResponse"* nocapture readonly dereferenceable(56), %"class.std::__1::vector"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %4 = load %"class.ui::LatencyInfo"*, %"class.ui::LatencyInfo"** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %6 = load %"class.ui::LatencyInfo"*, %"class.ui::LatencyInfo"** %5, align 8
  %7 = icmp eq %"class.ui::LatencyInfo"* %4, %6
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"struct.gfx::SwapResponse", %"struct.gfx::SwapResponse"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %10 = getelementptr inbounds %"struct.gfx::SwapResponse", %"struct.gfx::SwapResponse"* %0, i64 0, i32 2, i32 1, i32 0, i32 0
  br label %12

11:                                               ; preds = %12, %2
  ret void

12:                                               ; preds = %8, %12
  %13 = phi %"class.ui::LatencyInfo"* [ %4, %8 ], [ %16, %12 ]
  %14 = load i64, i64* %9, align 8
  tail call void @_ZN2ui11LatencyInfo29AddLatencyNumberWithTimestampENS_20LatencyComponentTypeEN4base9TimeTicksE(%"class.ui::LatencyInfo"* %13, i32 11, i64 %14) #8
  %15 = load i64, i64* %10, align 8
  tail call void @_ZN2ui11LatencyInfo29AddLatencyNumberWithTimestampENS_20LatencyComponentTypeEN4base9TimeTicksE(%"class.ui::LatencyInfo"* %13, i32 12, i64 %15) #8
  %16 = getelementptr inbounds %"class.ui::LatencyInfo", %"class.ui::LatencyInfo"* %13, i64 1
  %17 = icmp eq %"class.ui::LatencyInfo"* %16, %6
  br i1 %17, label %11, label %12
}

declare void @_ZN2ui11LatencyInfo29AddLatencyNumberWithTimestampENS_20LatencyComponentTypeEN4base9TimeTicksE(%"class.ui::LatencyInfo"*, i32, i64) local_unnamed_addr #7

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN3viz13OutputSurface29SetNeedsSwapSizeNotificationsEb(%"class.viz::OutputSurface"* nocapture, i1 zeroext) unnamed_addr #5 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz13OutputSurface20GetCacheBackBufferCbEv(%"class.base::ScopedClosureRunner"* noalias sret, %"class.viz::OutputSurface"* nocapture readnone) unnamed_addr #1 align 2 {
  tail call void @_ZN4base19ScopedClosureRunnerC1Ev(%"class.base::ScopedClosureRunner"* %0) #8
  ret void
}

declare void @_ZN4base19ScopedClosureRunnerC1Ev(%"class.base::ScopedClosureRunner"*) unnamed_addr #7

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN3viz13OutputSurface19SetGpuVSyncCallbackEN4base17RepeatingCallbackIFvNS1_9TimeTicksENS1_9TimeDeltaEEEE(%"class.viz::OutputSurface"* nocapture, %"class.base::RepeatingCallback"* nocapture) unnamed_addr #5 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN3viz13OutputSurface18SetGpuVSyncEnabledEb(%"class.viz::OutputSurface"* nocapture, i1 zeroext) unnamed_addr #5 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZNK3viz13OutputSurface17GetOverlayMailboxEv(%"class.viz::OutputSurface"* nocapture readnone) unnamed_addr #1 align 2 {
  %2 = alloca { i64, i64 }, align 8
  %3 = bitcast { i64, i64 }* %2 to %"struct.gpu::Mailbox"*
  call void @_ZN3gpu7MailboxC1Ev(%"struct.gpu::Mailbox"* nonnull %3) #8
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %2, i64 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = insertvalue { i64, i64 } undef, i64 %5, 0
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %2, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = insertvalue { i64, i64 } %6, i64 %8, 1
  ret { i64, i64 } %9
}

declare void @_ZN3gpu7MailboxC1Ev(%"struct.gpu::Mailbox"*) unnamed_addr #7

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN3viz13OutputSurface37InitDelegatedInkPointRendererReceiverEN4mojo15PendingReceiverIN3gfx5mojom25DelegatedInkPointRendererEEE(%"class.viz::OutputSurface"* nocapture, %"class.mojo::PendingReceiver"* nocapture) unnamed_addr #5 align 2 {
  ret void
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3viz13OutputSurface30SetNeedsMeasureNextDrawLatencyEv(%"class.viz::OutputSurface"*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3viz13OutputSurface12SetFrameRateEf(%"class.viz::OutputSurface"*, float) unnamed_addr #1 comdat align 2 {
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
