; ModuleID = '../../third_party/webrtc/modules/audio_processing/aec3/matched_filter_avx2.cc'
source_filename = "../../third_party/webrtc/modules/audio_processing/aec3/matched_filter_avx2.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.rtc::ArrayView.0" = type { %"class.rtc::impl::ArrayViewBase.1" }
%"class.rtc::impl::ArrayViewBase.1" = type { float*, i64 }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc4aec322MatchedFilterCore_AVX2EmffN3rtc9ArrayViewIKfLln4711EEES4_NS2_IfLln4711EEEPbPf(i64, float, float, float*, i64, float*, i64, %"class.rtc::ArrayView.0"* nocapture readonly byval(%"class.rtc::ArrayView.0") align 8, i8* nocapture, float* nocapture) local_unnamed_addr #0 {
  %11 = getelementptr inbounds %"class.rtc::ArrayView.0", %"class.rtc::ArrayView.0"* %7, i64 0, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = trunc i64 %12 to i32
  %14 = icmp eq i64 %6, 0
  br i1 %14, label %20, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.rtc::ArrayView.0", %"class.rtc::ArrayView.0"* %7, i64 0, i32 0, i32 0
  %17 = shl i64 %4, 32
  %18 = add i64 %17, -4294967296
  %19 = ashr exact i64 %18, 32
  br label %21

20:                                               ; preds = %107, %10
  ret void

21:                                               ; preds = %107, %15
  %22 = phi i64 [ %0, %15 ], [ %110, %107 ]
  %23 = phi i64 [ 0, %15 ], [ %111, %107 ]
  %24 = getelementptr inbounds float, float* %3, i64 %22
  %25 = load float*, float** %16, align 8
  %26 = sub i64 %4, %22
  %27 = trunc i64 %26 to i32
  %28 = icmp slt i32 %27, %13
  %29 = select i1 %28, i32 %27, i32 %13
  %30 = sub nsw i32 %13, %29
  %31 = ashr i32 %29, 3
  %32 = icmp sgt i32 %29, 7
  br i1 %32, label %50, label %33

33:                                               ; preds = %50, %21
  %34 = phi <8 x float> [ zeroinitializer, %21 ], [ %60, %50 ]
  %35 = phi <8 x float> [ zeroinitializer, %21 ], [ %61, %50 ]
  %36 = phi float* [ %25, %21 ], [ %63, %50 ]
  %37 = phi float* [ %24, %21 ], [ %64, %50 ]
  %38 = and i32 %29, 7
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %71, label %40

40:                                               ; preds = %33
  %41 = add nsw i32 %38, -1
  %42 = zext i32 %41 to i64
  %43 = load float, float* %37, align 4
  %44 = fmul float %43, %43
  %45 = fadd float %44, 0.000000e+00
  %46 = load float, float* %36, align 4
  %47 = fmul float %43, %46
  %48 = fadd float %47, 0.000000e+00
  %49 = icmp ugt i32 %38, 1
  br i1 %49, label %204, label %66

50:                                               ; preds = %21, %50
  %51 = phi float* [ %64, %50 ], [ %24, %21 ]
  %52 = phi float* [ %63, %50 ], [ %25, %21 ]
  %53 = phi <8 x float> [ %61, %50 ], [ zeroinitializer, %21 ]
  %54 = phi i32 [ %62, %50 ], [ %31, %21 ]
  %55 = phi <8 x float> [ %60, %50 ], [ zeroinitializer, %21 ]
  %56 = bitcast float* %51 to <8 x float>*
  %57 = load <8 x float>, <8 x float>* %56, align 1
  %58 = bitcast float* %52 to <8 x float>*
  %59 = load <8 x float>, <8 x float>* %58, align 1
  %60 = call <8 x float> @llvm.fma.v8f32(<8 x float> %57, <8 x float> %57, <8 x float> %55) #2
  %61 = call <8 x float> @llvm.fma.v8f32(<8 x float> %59, <8 x float> %57, <8 x float> %53) #2
  %62 = add nsw i32 %54, -1
  %63 = getelementptr inbounds float, float* %52, i64 8
  %64 = getelementptr inbounds float, float* %51, i64 8
  %65 = icmp sgt i32 %62, 0
  br i1 %65, label %50, label %33

66:                                               ; preds = %224, %204, %254, %244, %234, %214, %40
  %67 = phi float [ %45, %40 ], [ %209, %204 ], [ %219, %214 ], [ %229, %224 ], [ %239, %234 ], [ %249, %244 ], [ %259, %254 ]
  %68 = phi float [ %48, %40 ], [ %212, %204 ], [ %222, %214 ], [ %232, %224 ], [ %242, %234 ], [ %252, %244 ], [ %262, %254 ]
  %69 = getelementptr float, float* %36, i64 1
  %70 = getelementptr float, float* %69, i64 %42
  br label %71

71:                                               ; preds = %66, %33
  %72 = phi float [ 0.000000e+00, %33 ], [ %67, %66 ]
  %73 = phi float [ 0.000000e+00, %33 ], [ %68, %66 ]
  %74 = phi float* [ %36, %33 ], [ %70, %66 ]
  %75 = ashr i32 %30, 3
  %76 = icmp sgt i32 %30, 7
  br i1 %76, label %113, label %129

77:                                               ; preds = %144
  %78 = fmul float %171, %2
  %79 = fdiv float %78, %160
  %80 = insertelement <8 x float> undef, float %79, i32 0
  %81 = shufflevector <8 x float> %80, <8 x float> undef, <8 x i32> zeroinitializer
  br i1 %32, label %85, label %82

82:                                               ; preds = %85, %77
  %83 = phi float* [ %24, %77 ], [ %96, %85 ]
  %84 = phi float* [ %25, %77 ], [ %95, %85 ]
  br i1 %39, label %98, label %100

85:                                               ; preds = %77, %85
  %86 = phi i32 [ %94, %85 ], [ %31, %77 ]
  %87 = phi float* [ %95, %85 ], [ %25, %77 ]
  %88 = phi float* [ %96, %85 ], [ %24, %77 ]
  %89 = bitcast float* %87 to <8 x float>*
  %90 = load <8 x float>, <8 x float>* %89, align 1
  %91 = bitcast float* %88 to <8 x float>*
  %92 = load <8 x float>, <8 x float>* %91, align 1
  %93 = call <8 x float> @llvm.fma.v8f32(<8 x float> %92, <8 x float> %81, <8 x float> %90) #2
  store <8 x float> %93, <8 x float>* %89, align 1
  %94 = add nsw i32 %86, -1
  %95 = getelementptr inbounds float, float* %87, i64 8
  %96 = getelementptr inbounds float, float* %88, i64 8
  %97 = icmp sgt i32 %94, 0
  br i1 %97, label %85, label %82

98:                                               ; preds = %100, %330, %346, %354, %362, %322, %338, %82
  %99 = phi float* [ %84, %82 ], [ %105, %100 ], [ %328, %322 ], [ %336, %330 ], [ %344, %338 ], [ %352, %346 ], [ %360, %354 ], [ %368, %362 ]
  br i1 %76, label %180, label %193

100:                                              ; preds = %82
  %101 = load float, float* %83, align 4
  %102 = fmul float %79, %101
  %103 = load float, float* %84, align 4
  %104 = fadd float %103, %102
  store float %104, float* %84, align 4
  %105 = getelementptr inbounds float, float* %84, i64 1
  %106 = icmp ugt i32 %38, 1
  br i1 %106, label %322, label %98

107:                                              ; preds = %144, %203
  %108 = icmp eq i64 %22, 0
  %109 = add i64 %22, -1
  %110 = select i1 %108, i64 %19, i64 %109
  %111 = add nuw i64 %23, 1
  %112 = icmp eq i64 %111, %6
  br i1 %112, label %20, label %21

113:                                              ; preds = %71, %113
  %114 = phi float* [ %127, %113 ], [ %3, %71 ]
  %115 = phi float* [ %126, %113 ], [ %74, %71 ]
  %116 = phi <8 x float> [ %124, %113 ], [ %35, %71 ]
  %117 = phi i32 [ %125, %113 ], [ %75, %71 ]
  %118 = phi <8 x float> [ %123, %113 ], [ %34, %71 ]
  %119 = bitcast float* %114 to <8 x float>*
  %120 = load <8 x float>, <8 x float>* %119, align 1
  %121 = bitcast float* %115 to <8 x float>*
  %122 = load <8 x float>, <8 x float>* %121, align 1
  %123 = call <8 x float> @llvm.fma.v8f32(<8 x float> %120, <8 x float> %120, <8 x float> %118) #2
  %124 = call <8 x float> @llvm.fma.v8f32(<8 x float> %122, <8 x float> %120, <8 x float> %116) #2
  %125 = add nsw i32 %117, -1
  %126 = getelementptr inbounds float, float* %115, i64 8
  %127 = getelementptr inbounds float, float* %114, i64 8
  %128 = icmp sgt i32 %125, 0
  br i1 %128, label %113, label %129

129:                                              ; preds = %113, %71
  %130 = phi <8 x float> [ %34, %71 ], [ %123, %113 ]
  %131 = phi <8 x float> [ %35, %71 ], [ %124, %113 ]
  %132 = phi float* [ %74, %71 ], [ %126, %113 ]
  %133 = phi float* [ %3, %71 ], [ %127, %113 ]
  %134 = and i32 %30, 7
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %144, label %136

136:                                              ; preds = %129
  %137 = load float, float* %133, align 4
  %138 = fmul float %137, %137
  %139 = fadd float %72, %138
  %140 = load float, float* %132, align 4
  %141 = fmul float %137, %140
  %142 = fadd float %73, %141
  %143 = icmp ugt i32 %134, 1
  br i1 %143, label %263, label %144

144:                                              ; preds = %136, %273, %293, %303, %313, %263, %283, %129
  %145 = phi float [ %72, %129 ], [ %139, %136 ], [ %268, %263 ], [ %278, %273 ], [ %288, %283 ], [ %298, %293 ], [ %308, %303 ], [ %318, %313 ]
  %146 = phi float [ %73, %129 ], [ %142, %136 ], [ %271, %263 ], [ %281, %273 ], [ %291, %283 ], [ %301, %293 ], [ %311, %303 ], [ %321, %313 ]
  %147 = shufflevector <8 x float> %130, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %148 = shufflevector <8 x float> %130, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %149 = fadd <4 x float> %147, %148
  %150 = shufflevector <8 x float> %131, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %151 = shufflevector <8 x float> %131, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %152 = fadd <4 x float> %150, %151
  %153 = extractelement <4 x float> %149, i32 0
  %154 = extractelement <4 x float> %149, i32 1
  %155 = fadd float %153, %154
  %156 = extractelement <4 x float> %149, i32 2
  %157 = fadd float %156, %155
  %158 = extractelement <4 x float> %149, i32 3
  %159 = fadd float %158, %157
  %160 = fadd float %145, %159
  %161 = extractelement <4 x float> %152, i32 0
  %162 = extractelement <4 x float> %152, i32 1
  %163 = fadd float %161, %162
  %164 = extractelement <4 x float> %152, i32 2
  %165 = fadd float %164, %163
  %166 = extractelement <4 x float> %152, i32 3
  %167 = fadd float %166, %165
  %168 = fadd float %146, %167
  %169 = getelementptr inbounds float, float* %5, i64 %23
  %170 = load float, float* %169, align 4
  %171 = fsub float %170, %168
  %172 = fcmp oge float %170, 3.200000e+04
  %173 = fcmp ole float %170, -3.200000e+04
  %174 = or i1 %173, %172
  %175 = fmul float %171, %171
  %176 = load float, float* %9, align 4
  %177 = fadd float %176, %175
  store float %177, float* %9, align 4
  %178 = fcmp ule float %160, %1
  %179 = or i1 %178, %174
  br i1 %179, label %107, label %77

180:                                              ; preds = %98, %180
  %181 = phi i32 [ %189, %180 ], [ %75, %98 ]
  %182 = phi float* [ %190, %180 ], [ %99, %98 ]
  %183 = phi float* [ %191, %180 ], [ %3, %98 ]
  %184 = bitcast float* %182 to <8 x float>*
  %185 = load <8 x float>, <8 x float>* %184, align 1
  %186 = bitcast float* %183 to <8 x float>*
  %187 = load <8 x float>, <8 x float>* %186, align 1
  %188 = call <8 x float> @llvm.fma.v8f32(<8 x float> %187, <8 x float> %81, <8 x float> %185) #2
  store <8 x float> %188, <8 x float>* %184, align 1
  %189 = add nsw i32 %181, -1
  %190 = getelementptr inbounds float, float* %182, i64 8
  %191 = getelementptr inbounds float, float* %183, i64 8
  %192 = icmp sgt i32 %189, 0
  br i1 %192, label %180, label %193

193:                                              ; preds = %180, %98
  %194 = phi float* [ %3, %98 ], [ %191, %180 ]
  %195 = phi float* [ %99, %98 ], [ %190, %180 ]
  br i1 %135, label %203, label %196

196:                                              ; preds = %193
  %197 = load float, float* %194, align 4
  %198 = fmul float %79, %197
  %199 = load float, float* %195, align 4
  %200 = fadd float %199, %198
  store float %200, float* %195, align 4
  %201 = getelementptr inbounds float, float* %195, i64 1
  %202 = icmp ugt i32 %134, 1
  br i1 %202, label %369, label %203

203:                                              ; preds = %196, %377, %393, %401, %409, %369, %385, %193
  store i8 1, i8* %8, align 1
  br label %107

204:                                              ; preds = %40
  %205 = getelementptr inbounds float, float* %37, i64 1
  %206 = getelementptr inbounds float, float* %36, i64 1
  %207 = load float, float* %205, align 4
  %208 = fmul float %207, %207
  %209 = fadd float %45, %208
  %210 = load float, float* %206, align 4
  %211 = fmul float %207, %210
  %212 = fadd float %48, %211
  %213 = icmp eq i32 %38, 2
  br i1 %213, label %66, label %214

214:                                              ; preds = %204
  %215 = getelementptr inbounds float, float* %37, i64 2
  %216 = getelementptr inbounds float, float* %36, i64 2
  %217 = load float, float* %215, align 4
  %218 = fmul float %217, %217
  %219 = fadd float %209, %218
  %220 = load float, float* %216, align 4
  %221 = fmul float %217, %220
  %222 = fadd float %212, %221
  %223 = icmp ugt i32 %38, 3
  br i1 %223, label %224, label %66

224:                                              ; preds = %214
  %225 = getelementptr inbounds float, float* %37, i64 3
  %226 = getelementptr inbounds float, float* %36, i64 3
  %227 = load float, float* %225, align 4
  %228 = fmul float %227, %227
  %229 = fadd float %219, %228
  %230 = load float, float* %226, align 4
  %231 = fmul float %227, %230
  %232 = fadd float %222, %231
  %233 = icmp eq i32 %38, 4
  br i1 %233, label %66, label %234

234:                                              ; preds = %224
  %235 = getelementptr inbounds float, float* %37, i64 4
  %236 = getelementptr inbounds float, float* %36, i64 4
  %237 = load float, float* %235, align 4
  %238 = fmul float %237, %237
  %239 = fadd float %229, %238
  %240 = load float, float* %236, align 4
  %241 = fmul float %237, %240
  %242 = fadd float %232, %241
  %243 = icmp ugt i32 %38, 5
  br i1 %243, label %244, label %66

244:                                              ; preds = %234
  %245 = getelementptr inbounds float, float* %37, i64 5
  %246 = getelementptr inbounds float, float* %36, i64 5
  %247 = load float, float* %245, align 4
  %248 = fmul float %247, %247
  %249 = fadd float %239, %248
  %250 = load float, float* %246, align 4
  %251 = fmul float %247, %250
  %252 = fadd float %242, %251
  %253 = icmp eq i32 %38, 7
  br i1 %253, label %254, label %66

254:                                              ; preds = %244
  %255 = getelementptr inbounds float, float* %37, i64 6
  %256 = getelementptr inbounds float, float* %36, i64 6
  %257 = load float, float* %255, align 4
  %258 = fmul float %257, %257
  %259 = fadd float %249, %258
  %260 = load float, float* %256, align 4
  %261 = fmul float %257, %260
  %262 = fadd float %252, %261
  br label %66

263:                                              ; preds = %136
  %264 = getelementptr inbounds float, float* %133, i64 1
  %265 = getelementptr inbounds float, float* %132, i64 1
  %266 = load float, float* %264, align 4
  %267 = fmul float %266, %266
  %268 = fadd float %139, %267
  %269 = load float, float* %265, align 4
  %270 = fmul float %266, %269
  %271 = fadd float %142, %270
  %272 = icmp eq i32 %134, 2
  br i1 %272, label %144, label %273

273:                                              ; preds = %263
  %274 = getelementptr inbounds float, float* %133, i64 2
  %275 = getelementptr inbounds float, float* %132, i64 2
  %276 = load float, float* %274, align 4
  %277 = fmul float %276, %276
  %278 = fadd float %268, %277
  %279 = load float, float* %275, align 4
  %280 = fmul float %276, %279
  %281 = fadd float %271, %280
  %282 = icmp ugt i32 %134, 3
  br i1 %282, label %283, label %144

283:                                              ; preds = %273
  %284 = getelementptr inbounds float, float* %133, i64 3
  %285 = getelementptr inbounds float, float* %132, i64 3
  %286 = load float, float* %284, align 4
  %287 = fmul float %286, %286
  %288 = fadd float %278, %287
  %289 = load float, float* %285, align 4
  %290 = fmul float %286, %289
  %291 = fadd float %281, %290
  %292 = icmp eq i32 %134, 4
  br i1 %292, label %144, label %293

293:                                              ; preds = %283
  %294 = getelementptr inbounds float, float* %133, i64 4
  %295 = getelementptr inbounds float, float* %132, i64 4
  %296 = load float, float* %294, align 4
  %297 = fmul float %296, %296
  %298 = fadd float %288, %297
  %299 = load float, float* %295, align 4
  %300 = fmul float %296, %299
  %301 = fadd float %291, %300
  %302 = icmp ugt i32 %134, 5
  br i1 %302, label %303, label %144

303:                                              ; preds = %293
  %304 = getelementptr inbounds float, float* %133, i64 5
  %305 = getelementptr inbounds float, float* %132, i64 5
  %306 = load float, float* %304, align 4
  %307 = fmul float %306, %306
  %308 = fadd float %298, %307
  %309 = load float, float* %305, align 4
  %310 = fmul float %306, %309
  %311 = fadd float %301, %310
  %312 = icmp eq i32 %134, 7
  br i1 %312, label %313, label %144

313:                                              ; preds = %303
  %314 = getelementptr inbounds float, float* %133, i64 6
  %315 = getelementptr inbounds float, float* %132, i64 6
  %316 = load float, float* %314, align 4
  %317 = fmul float %316, %316
  %318 = fadd float %308, %317
  %319 = load float, float* %315, align 4
  %320 = fmul float %316, %319
  %321 = fadd float %311, %320
  br label %144

322:                                              ; preds = %100
  %323 = getelementptr inbounds float, float* %83, i64 1
  %324 = load float, float* %323, align 4
  %325 = fmul float %79, %324
  %326 = load float, float* %105, align 4
  %327 = fadd float %326, %325
  store float %327, float* %105, align 4
  %328 = getelementptr inbounds float, float* %84, i64 2
  %329 = icmp eq i32 %38, 2
  br i1 %329, label %98, label %330

330:                                              ; preds = %322
  %331 = getelementptr inbounds float, float* %83, i64 2
  %332 = load float, float* %331, align 4
  %333 = fmul float %79, %332
  %334 = load float, float* %328, align 4
  %335 = fadd float %334, %333
  store float %335, float* %328, align 4
  %336 = getelementptr inbounds float, float* %84, i64 3
  %337 = icmp ugt i32 %38, 3
  br i1 %337, label %338, label %98

338:                                              ; preds = %330
  %339 = getelementptr inbounds float, float* %83, i64 3
  %340 = load float, float* %339, align 4
  %341 = fmul float %79, %340
  %342 = load float, float* %336, align 4
  %343 = fadd float %342, %341
  store float %343, float* %336, align 4
  %344 = getelementptr inbounds float, float* %84, i64 4
  %345 = icmp eq i32 %38, 4
  br i1 %345, label %98, label %346

346:                                              ; preds = %338
  %347 = getelementptr inbounds float, float* %83, i64 4
  %348 = load float, float* %347, align 4
  %349 = fmul float %79, %348
  %350 = load float, float* %344, align 4
  %351 = fadd float %350, %349
  store float %351, float* %344, align 4
  %352 = getelementptr inbounds float, float* %84, i64 5
  %353 = icmp ugt i32 %38, 5
  br i1 %353, label %354, label %98

354:                                              ; preds = %346
  %355 = getelementptr inbounds float, float* %83, i64 5
  %356 = load float, float* %355, align 4
  %357 = fmul float %79, %356
  %358 = load float, float* %352, align 4
  %359 = fadd float %358, %357
  store float %359, float* %352, align 4
  %360 = getelementptr inbounds float, float* %84, i64 6
  %361 = icmp eq i32 %38, 7
  br i1 %361, label %362, label %98

362:                                              ; preds = %354
  %363 = getelementptr inbounds float, float* %83, i64 6
  %364 = load float, float* %363, align 4
  %365 = fmul float %79, %364
  %366 = load float, float* %360, align 4
  %367 = fadd float %366, %365
  store float %367, float* %360, align 4
  %368 = getelementptr inbounds float, float* %84, i64 7
  br label %98

369:                                              ; preds = %196
  %370 = getelementptr inbounds float, float* %194, i64 1
  %371 = load float, float* %370, align 4
  %372 = fmul float %79, %371
  %373 = load float, float* %201, align 4
  %374 = fadd float %373, %372
  store float %374, float* %201, align 4
  %375 = getelementptr inbounds float, float* %195, i64 2
  %376 = icmp eq i32 %134, 2
  br i1 %376, label %203, label %377

377:                                              ; preds = %369
  %378 = getelementptr inbounds float, float* %194, i64 2
  %379 = load float, float* %378, align 4
  %380 = fmul float %79, %379
  %381 = load float, float* %375, align 4
  %382 = fadd float %381, %380
  store float %382, float* %375, align 4
  %383 = getelementptr inbounds float, float* %195, i64 3
  %384 = icmp ugt i32 %134, 3
  br i1 %384, label %385, label %203

385:                                              ; preds = %377
  %386 = getelementptr inbounds float, float* %194, i64 3
  %387 = load float, float* %386, align 4
  %388 = fmul float %79, %387
  %389 = load float, float* %383, align 4
  %390 = fadd float %389, %388
  store float %390, float* %383, align 4
  %391 = getelementptr inbounds float, float* %195, i64 4
  %392 = icmp eq i32 %134, 4
  br i1 %392, label %203, label %393

393:                                              ; preds = %385
  %394 = getelementptr inbounds float, float* %194, i64 4
  %395 = load float, float* %394, align 4
  %396 = fmul float %79, %395
  %397 = load float, float* %391, align 4
  %398 = fadd float %397, %396
  store float %398, float* %391, align 4
  %399 = getelementptr inbounds float, float* %195, i64 5
  %400 = icmp ugt i32 %134, 5
  br i1 %400, label %401, label %203

401:                                              ; preds = %393
  %402 = getelementptr inbounds float, float* %194, i64 5
  %403 = load float, float* %402, align 4
  %404 = fmul float %79, %403
  %405 = load float, float* %399, align 4
  %406 = fadd float %405, %404
  store float %406, float* %399, align 4
  %407 = getelementptr inbounds float, float* %195, i64 6
  %408 = icmp eq i32 %134, 7
  br i1 %408, label %409, label %203

409:                                              ; preds = %401
  %410 = getelementptr inbounds float, float* %194, i64 6
  %411 = load float, float* %410, align 4
  %412 = fmul float %79, %411
  %413 = load float, float* %407, align 4
  %414 = fadd float %413, %412
  store float %414, float* %407, align 4
  br label %203
}

; Function Attrs: nounwind readnone speculatable
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
