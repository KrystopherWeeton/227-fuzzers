; ModuleID = '../../third_party/libjxl/src/lib/jxl/enc_splines.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/enc_splines.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.jxl::Splines" = type { i32, %"class.std::__1::vector", %"class.std::__1::vector.8" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"*, %"class.std::__1::__compressed_pair.3" }
%"class.jxl::QuantizedSpline" = type { %"class.std::__1::vector.0", [3 x [32 x i32]], [32 x i32] }
%"class.std::__1::vector.0" = type { %"class.std::__1::__vector_base.1" }
%"class.std::__1::__vector_base.1" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair" }
%"struct.std::__1::pair" = type { i64, i64 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::pair"* }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.jxl::QuantizedSpline"* }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"*, %"class.std::__1::__compressed_pair.10" }
%"struct.jxl::Spline::Point" = type { float, float }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.jxl::Spline::Point"* }
%"struct.jxl::BitWriter" = type { i64, %"class.jxl::PaddedBytes", %"class.jxl::BitWriter::Allotment"* }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { i8* }
%"class.jxl::BitWriter::Allotment" = type { i64, i64, i64, i8, %"class.jxl::BitWriter::Allotment"* }
%"struct.jxl::HistogramParams" = type <{ i32, i32, i32, i32, %"class.std::__1::vector.18", i64, i8, [7 x i8] }>
%"class.std::__1::vector.18" = type { %"class.std::__1::__vector_base.19" }
%"class.std::__1::__vector_base.19" = type { i64*, i64*, %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { i64* }
%"struct.jxl::AuxOut" = type { %"struct.std::__1::array", i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array.25", %"struct.std::__1::array.25", i32, %"class.std::__1::basic_string", i64, %"class.std::__1::function", %"class.std::__1::function.31" }
%"struct.std::__1::array" = type { [21 x %"struct.jxl::AuxOut::LayerTotals"] }
%"struct.jxl::AuxOut::LayerTotals" = type { i64, i64, i64, i64, double }
%"struct.std::__1::array.25" = type { [8 x i32] }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { i1 (%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"*)* }
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane"] }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.std::__1::function.31" = type { %"class.std::__1::__function::__policy_func.35" }
%"class.std::__1::__function::__policy_func.35" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker.36", %"struct.std::__1::__function::__policy"* }
%"struct.std::__1::__function::__policy_invoker.36" = type { i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)* }
%"class.jxl::CodecInOut" = type { %"struct.jxl::SizeConstraints", %"class.jxl::DecoderHints", i32, float, i64, %"struct.jxl::Blobs", %"struct.jxl::CodecMetadata", %"class.jxl::ImageBundle", %"class.std::__1::vector.135", i8, i64 }
%"struct.jxl::SizeConstraints" = type { i32, i32, i64 }
%"class.jxl::DecoderHints" = type { %"class.std::__1::vector.37" }
%"class.std::__1::vector.37" = type { %"class.std::__1::__vector_base.38" }
%"class.std::__1::__vector_base.38" = type { %"struct.jxl::DecoderHints::KeyValue"*, %"struct.jxl::DecoderHints::KeyValue"*, %"class.std::__1::__compressed_pair.39" }
%"struct.jxl::DecoderHints::KeyValue" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"struct.jxl::DecoderHints::KeyValue"* }
%"struct.jxl::Blobs" = type { %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes" }
%"struct.jxl::CodecMetadata" = type { %"struct.jxl::ImageMetadata", %"class.jxl::SizeHeader", %"struct.jxl::CustomTransformData" }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.44", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"class.jxl::Fields" = type { i32 (...)** }
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector.44" = type { %"class.std::__1::__vector_base.45" }
%"class.std::__1::__vector_base.45" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.46" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"struct.jxl::ExtraChannelInfo"* }
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr.51", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.128", i64 }
%"class.std::__1::unique_ptr.51" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector.54", %"class.std::__1::vector.67", %"class.std::__1::vector.54", %"class.std::__1::vector.74", %"class.std::__1::vector.82", %"class.std::__1::vector.91", %"class.std::__1::vector.105", %"class.std::__1::vector.56", %"class.std::__1::vector.54", %"class.std::__1::vector.56", i32, i8, %"class.std::__1::vector.56" }
%"class.std::__1::vector.67" = type { %"class.std::__1::__vector_base.68" }
%"class.std::__1::__vector_base.68" = type { i32*, i32*, %"class.std::__1::__compressed_pair.69" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { i32* }
%"class.std::__1::vector.74" = type { %"class.std::__1::__vector_base.75" }
%"class.std::__1::__vector_base.75" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.77" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array.76", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array.76" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.78" }
%"struct.std::__1::__compressed_pair_elem.78" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.82" = type { %"class.std::__1::__vector_base.83" }
%"class.std::__1::__vector_base.83" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.86" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.84", %"struct.std::__1::array.85", i32, i8, [3 x i8] }>
%"struct.std::__1::array.84" = type { [17 x i32] }
%"struct.std::__1::array.85" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.91" = type { %"class.std::__1::__vector_base.92" }
%"class.std::__1::__vector_base.92" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.100" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.93" }
%"class.std::__1::vector.93" = type { %"class.std::__1::__vector_base.94" }
%"class.std::__1::__vector_base.94" = type { i16*, i16*, %"class.std::__1::__compressed_pair.95" }
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.96" = type { i16* }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.101" }
%"struct.std::__1::__compressed_pair_elem.101" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.105" = type { %"class.std::__1::__vector_base.106" }
%"class.std::__1::__vector_base.106" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.122" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.107", i32, %"class.std::__1::vector.108", %"class.std::__1::vector.115" }
%"struct.std::__1::array.107" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.108" = type { %"class.std::__1::__vector_base.109" }
%"class.std::__1::__vector_base.109" = type { i32*, i32*, %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { i32* }
%"class.std::__1::vector.115" = type { %"class.std::__1::__vector_base.116" }
%"class.std::__1::__vector_base.116" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.117" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.117" = type { %"struct.std::__1::__compressed_pair_elem.118" }
%"struct.std::__1::__compressed_pair_elem.118" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.122" = type { %"struct.std::__1::__compressed_pair_elem.123" }
%"struct.std::__1::__compressed_pair_elem.123" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"class.std::__1::vector.54" = type { %"class.std::__1::__vector_base.55" }
%"class.std::__1::__vector_base.55" = type { %"class.std::__1::vector.56"*, %"class.std::__1::vector.56"*, %"class.std::__1::__compressed_pair.62" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"class.std::__1::vector.56"* }
%"class.std::__1::vector.56" = type { %"class.std::__1::__vector_base.57" }
%"class.std::__1::__vector_base.57" = type { i8*, i8*, %"class.std::__1::__compressed_pair.58" }
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"class.std::__1::vector.128" = type { %"class.std::__1::__vector_base.129" }
%"class.std::__1::__vector_base.129" = type { %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.std::__1::__compressed_pair.130" }
%"class.std::__1::__compressed_pair.130" = type { %"struct.std::__1::__compressed_pair_elem.131" }
%"struct.std::__1::__compressed_pair_elem.131" = type { %"class.jxl::Plane"* }
%"class.std::__1::vector.135" = type { %"class.std::__1::__vector_base.136" }
%"class.std::__1::__vector_base.136" = type { %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*, %"class.std::__1::__compressed_pair.137" }
%"class.std::__1::__compressed_pair.137" = type { %"struct.std::__1::__compressed_pair_elem.138" }
%"struct.std::__1::__compressed_pair_elem.138" = type { %"class.jxl::ImageBundle"* }
%"class.std::__1::vector.142" = type { %"class.std::__1::__vector_base.143" }
%"class.std::__1::__vector_base.143" = type { %"class.std::__1::vector.144"*, %"class.std::__1::vector.144"*, %"class.std::__1::__compressed_pair.151" }
%"class.std::__1::vector.144" = type { %"class.std::__1::__vector_base.145" }
%"class.std::__1::__vector_base.145" = type { %"struct.jxl::Token"*, %"struct.jxl::Token"*, %"class.std::__1::__compressed_pair.146" }
%"struct.jxl::Token" = type { i32, i32 }
%"class.std::__1::__compressed_pair.146" = type { %"struct.std::__1::__compressed_pair_elem.147" }
%"struct.std::__1::__compressed_pair_elem.147" = type { %"struct.jxl::Token"* }
%"class.std::__1::__compressed_pair.151" = type { %"struct.std::__1::__compressed_pair_elem.152" }
%"struct.std::__1::__compressed_pair_elem.152" = type { %"class.std::__1::vector.144"* }
%"struct.jxl::EntropyEncodingData" = type { %"class.std::__1::vector.156", i8, %"class.std::__1::vector.164", %"struct.jxl::LZ77Params" }
%"class.std::__1::vector.156" = type { %"class.std::__1::__vector_base.157" }
%"class.std::__1::__vector_base.157" = type { %"class.std::__1::vector.158"*, %"class.std::__1::vector.158"*, %"class.std::__1::__compressed_pair.159" }
%"class.std::__1::vector.158" = type { %"class.std::__1::__vector_base.171" }
%"class.std::__1::__vector_base.171" = type { %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"*, %"class.std::__1::__compressed_pair.179" }
%"struct.jxl::ANSEncSymbolInfo" = type <{ i16, [6 x i8], %"class.std::__1::vector.172", i64, i8, i8, i16, [4 x i8] }>
%"class.std::__1::vector.172" = type { %"class.std::__1::__vector_base.173" }
%"class.std::__1::__vector_base.173" = type { i16*, i16*, %"class.std::__1::__compressed_pair.174" }
%"class.std::__1::__compressed_pair.174" = type { %"struct.std::__1::__compressed_pair_elem.175" }
%"struct.std::__1::__compressed_pair_elem.175" = type { i16* }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.180" }
%"struct.std::__1::__compressed_pair_elem.180" = type { %"struct.jxl::ANSEncSymbolInfo"* }
%"class.std::__1::__compressed_pair.159" = type { %"struct.std::__1::__compressed_pair_elem.160" }
%"struct.std::__1::__compressed_pair_elem.160" = type { %"class.std::__1::vector.158"* }
%"class.std::__1::vector.164" = type { %"class.std::__1::__vector_base.165" }
%"class.std::__1::__vector_base.165" = type { %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"*, %"class.std::__1::__compressed_pair.166" }
%"struct.jxl::HybridUintConfig" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.166" = type { %"struct.std::__1::__compressed_pair_elem.167" }
%"struct.std::__1::__compressed_pair_elem.167" = type { %"struct.jxl::HybridUintConfig"* }
%"struct.jxl::LZ77Params" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::HybridUintConfig", i64 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN3jxl22QuantizedSplineEncoder8TokenizeERKNS_15QuantizedSplineEPNSt3__16vectorINS_5TokenENS4_9allocatorIS6_EEEE = comdat any

@.str = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [52 x i8] c"../../third_party/libjxl/src/lib/jxl/enc_splines.cc\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"splines.HasAny()\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl13EncodeSplinesERKNS_7SplinesEPNS_9BitWriterEmRKNS_15HistogramParamsEPNS_6AuxOutE(%"class.jxl::Splines"* nocapture readonly dereferenceable(56), %"struct.jxl::BitWriter"*, i64, %"struct.jxl::HistogramParams"* dereferenceable(56), %"struct.jxl::AuxOut"*) local_unnamed_addr #0 {
  %6 = alloca %"class.std::__1::vector.142", align 8
  %7 = alloca %"struct.jxl::EntropyEncodingData", align 8
  %8 = alloca %"class.std::__1::vector.56", align 8
  %9 = getelementptr inbounds %"class.jxl::Splines", %"class.jxl::Splines"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = load %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"** %9, align 8
  %11 = getelementptr inbounds %"class.jxl::Splines", %"class.jxl::Splines"* %0, i64 0, i32 1, i32 0, i32 1
  %12 = load %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"** %11, align 8
  %13 = icmp eq %"class.jxl::QuantizedSpline"* %10, %12
  br i1 %13, label %14, label %17

14:                                               ; preds = %5
  %15 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.1, i64 0, i64 0), i32 78, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0)) #8
  %16 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

17:                                               ; preds = %5
  %18 = ptrtoint %"class.jxl::QuantizedSpline"* %10 to i64
  %19 = ptrtoint %"class.jxl::QuantizedSpline"* %12 to i64
  %20 = bitcast %"class.std::__1::vector.142"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %20) #8
  %21 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %6, i64 0, i32 0, i32 0
  %22 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %6, i64 0, i32 0, i32 1
  %23 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %24 = tail call i8* @_Znwm(i64 24) #10
  %25 = bitcast %"class.std::__1::vector.142"* %6 to i8**
  store i8* %24, i8** %25, align 8
  %26 = getelementptr inbounds i8, i8* %24, i64 24
  %27 = bitcast %"class.std::__1::vector.144"** %23 to i8**
  store i8* %26, i8** %27, align 8
  %28 = bitcast %"class.std::__1::vector.144"** %22 to i64*
  %29 = ptrtoint i8* %26 to i64
  store i64 %29, i64* %28, align 8
  %30 = bitcast i8* %24 to %"class.std::__1::vector.144"*
  %31 = sub i64 %19, %18
  %32 = sdiv exact i64 %31, 536
  %33 = getelementptr inbounds i8, i8* %24, i64 8
  %34 = bitcast i8* %33 to %"struct.jxl::Token"**
  %35 = getelementptr inbounds i8, i8* %24, i64 16
  %36 = bitcast i8* %35 to %"struct.jxl::Token"**
  %37 = bitcast i8* %33 to i64*
  %38 = bitcast i8* %24 to i64*
  %39 = bitcast i8* %35 to i64*
  %40 = tail call i8* @_Znwm(i64 8) #10
  %41 = getelementptr inbounds i8, i8* %40, i64 8
  %42 = bitcast i8* %41 to %"struct.jxl::Token"*
  %43 = ptrtoint i8* %41 to i64
  %44 = trunc i64 %32 to i32
  %45 = add i32 %44, -1
  %46 = bitcast i8* %40 to i32*
  store i32 4, i32* %46, align 4
  %47 = getelementptr inbounds i8, i8* %40, i64 4
  %48 = bitcast i8* %47 to i32*
  store i32 %45, i32* %48, align 4
  %49 = ptrtoint i8* %40 to i64
  store i64 %49, i64* %38, align 8
  store i64 %43, i64* %37, align 8
  store i64 %43, i64* %39, align 8
  %50 = getelementptr inbounds %"class.jxl::Splines", %"class.jxl::Splines"* %0, i64 0, i32 2, i32 0, i32 1
  %51 = bitcast %"struct.jxl::Spline::Point"** %50 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds %"class.jxl::Splines", %"class.jxl::Splines"* %0, i64 0, i32 2
  %54 = bitcast %"class.std::__1::vector.8"* %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %"class.jxl::Splines", %"class.jxl::Splines"* %0, i64 0, i32 2
  %57 = getelementptr inbounds %"class.jxl::Splines", %"class.jxl::Splines"* %0, i64 0, i32 2, i32 0, i32 1
  %58 = bitcast %"struct.jxl::Spline::Point"** %57 to i64*
  %59 = bitcast %"class.std::__1::vector.8"* %56 to i64*
  %60 = icmp eq i64 %52, %55
  br i1 %60, label %340, label %61

61:                                               ; preds = %17
  %62 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %56, i64 0, i32 0, i32 0
  %63 = bitcast i8* %33 to i64*
  %64 = bitcast i8* %24 to i64*
  %65 = bitcast i8* %35 to i64*
  br label %66

66:                                               ; preds = %327, %61
  %67 = phi i64 [ %55, %61 ], [ %330, %327 ]
  %68 = phi i64 [ 0, %61 ], [ %328, %327 ]
  %69 = phi i64 [ 0, %61 ], [ %78, %327 ]
  %70 = phi i64 [ 0, %61 ], [ %74, %327 ]
  %71 = inttoptr i64 %67 to %"struct.jxl::Spline::Point"*
  %72 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %71, i64 %68, i32 0
  %73 = load float, float* %72, align 4
  %74 = tail call i64 @lroundf(float %73) #8
  %75 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %62, align 8
  %76 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %75, i64 %68, i32 1
  %77 = load float, float* %76, align 4
  %78 = tail call i64 @lroundf(float %77) #8
  %79 = icmp eq i64 %68, 0
  br i1 %79, label %80, label %200

80:                                               ; preds = %66
  %81 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %34, align 8
  %82 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %36, align 8
  %83 = icmp ult %"struct.jxl::Token"* %81, %82
  %84 = ptrtoint %"struct.jxl::Token"* %82 to i64
  br i1 %83, label %85, label %91

85:                                               ; preds = %80
  %86 = trunc i64 %74 to i32
  %87 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %81, i64 0, i32 0
  store i32 2, i32* %87, align 4
  %88 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %81, i64 0, i32 1
  store i32 %86, i32* %88, align 4
  %89 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %81, i64 1
  %90 = ptrtoint %"struct.jxl::Token"* %89 to i64
  store i64 %90, i64* %63, align 8
  br label %139

91:                                               ; preds = %80
  %92 = ptrtoint %"struct.jxl::Token"* %81 to i64
  %93 = load i64, i64* %64, align 8
  %94 = sub i64 %92, %93
  %95 = ashr exact i64 %94, 3
  %96 = add nsw i64 %95, 1
  %97 = icmp ugt i64 %96, 2305843009213693951
  br i1 %97, label %98, label %100

98:                                               ; preds = %91
  %99 = bitcast i8* %24 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %99) #9
  unreachable

100:                                              ; preds = %91
  %101 = sub i64 %84, %93
  %102 = ashr exact i64 %101, 3
  %103 = icmp ult i64 %102, 1152921504606846975
  br i1 %103, label %104, label %112

104:                                              ; preds = %100
  %105 = ashr exact i64 %101, 2
  %106 = icmp ult i64 %105, %96
  %107 = select i1 %106, i64 %96, i64 %105
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %117, label %109

109:                                              ; preds = %104
  %110 = icmp ugt i64 %107, 2305843009213693951
  br i1 %110, label %111, label %112

111:                                              ; preds = %109
  tail call void @abort() #9
  unreachable

112:                                              ; preds = %109, %100
  %113 = phi i64 [ %107, %109 ], [ 2305843009213693951, %100 ]
  %114 = shl i64 %113, 3
  %115 = tail call i8* @_Znwm(i64 %114) #10
  %116 = bitcast i8* %115 to %"struct.jxl::Token"*
  br label %117

117:                                              ; preds = %112, %104
  %118 = phi i64 [ %113, %112 ], [ 0, %104 ]
  %119 = phi i8* [ %115, %112 ], [ null, %104 ]
  %120 = phi %"struct.jxl::Token"* [ %116, %112 ], [ null, %104 ]
  %121 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %120, i64 %95
  %122 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %120, i64 %118
  %123 = ptrtoint %"struct.jxl::Token"* %122 to i64
  %124 = trunc i64 %74 to i32
  %125 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %121, i64 0, i32 0
  store i32 2, i32* %125, align 4
  %126 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %120, i64 %95, i32 1
  store i32 %124, i32* %126, align 4
  %127 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %121, i64 1
  %128 = ptrtoint %"struct.jxl::Token"* %127 to i64
  %129 = ptrtoint %"struct.jxl::Token"* %120 to i64
  %130 = icmp sgt i64 %94, 0
  br i1 %130, label %131, label %133

131:                                              ; preds = %117
  %132 = inttoptr i64 %93 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %119, i8* align 4 %132, i64 %94, i1 false) #8
  br label %133

133:                                              ; preds = %131, %117
  store i64 %129, i64* %64, align 8
  store i64 %128, i64* %63, align 8
  store i64 %123, i64* %65, align 8
  %134 = icmp eq i64 %93, 0
  br i1 %134, label %139, label %135

135:                                              ; preds = %133
  %136 = inttoptr i64 %93 to i8*
  tail call void @_ZdlPv(i8* %136) #10
  %137 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %34, align 8
  %138 = ptrtoint %"struct.jxl::Token"* %137 to i64
  br label %139

139:                                              ; preds = %135, %133, %85
  %140 = phi i64 [ %138, %135 ], [ %128, %133 ], [ %90, %85 ]
  %141 = phi %"struct.jxl::Token"* [ %137, %135 ], [ %127, %133 ], [ %89, %85 ]
  %142 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %36, align 8
  %143 = icmp ult %"struct.jxl::Token"* %141, %142
  %144 = ptrtoint %"struct.jxl::Token"* %142 to i64
  br i1 %143, label %145, label %151

145:                                              ; preds = %139
  %146 = trunc i64 %78 to i32
  %147 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %141, i64 0, i32 0
  store i32 2, i32* %147, align 4
  %148 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %141, i64 0, i32 1
  store i32 %146, i32* %148, align 4
  %149 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %141, i64 1
  %150 = ptrtoint %"struct.jxl::Token"* %149 to i64
  store i64 %150, i64* %63, align 8
  br label %327

151:                                              ; preds = %139
  %152 = load i64, i64* %64, align 8
  %153 = sub i64 %140, %152
  %154 = ashr exact i64 %153, 3
  %155 = add nsw i64 %154, 1
  %156 = icmp ugt i64 %155, 2305843009213693951
  br i1 %156, label %157, label %159

157:                                              ; preds = %151
  %158 = bitcast i8* %24 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %158) #9
  unreachable

159:                                              ; preds = %151
  %160 = sub i64 %144, %152
  %161 = ashr exact i64 %160, 3
  %162 = icmp ult i64 %161, 1152921504606846975
  br i1 %162, label %163, label %171

163:                                              ; preds = %159
  %164 = ashr exact i64 %160, 2
  %165 = icmp ult i64 %164, %155
  %166 = select i1 %165, i64 %155, i64 %164
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %176, label %168

168:                                              ; preds = %163
  %169 = icmp ugt i64 %166, 2305843009213693951
  br i1 %169, label %170, label %171

170:                                              ; preds = %168
  tail call void @abort() #9
  unreachable

171:                                              ; preds = %168, %159
  %172 = phi i64 [ %166, %168 ], [ 2305843009213693951, %159 ]
  %173 = shl i64 %172, 3
  %174 = tail call i8* @_Znwm(i64 %173) #10
  %175 = bitcast i8* %174 to %"struct.jxl::Token"*
  br label %176

176:                                              ; preds = %171, %163
  %177 = phi i64 [ %172, %171 ], [ 0, %163 ]
  %178 = phi %"struct.jxl::Token"* [ %175, %171 ], [ null, %163 ]
  %179 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %178, i64 %154
  %180 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %178, i64 %177
  %181 = ptrtoint %"struct.jxl::Token"* %180 to i64
  %182 = trunc i64 %78 to i32
  %183 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %179, i64 0, i32 0
  store i32 2, i32* %183, align 4
  %184 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %178, i64 %154, i32 1
  store i32 %182, i32* %184, align 4
  %185 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %179, i64 1
  %186 = ptrtoint %"struct.jxl::Token"* %185 to i64
  %187 = sub i64 %140, %152
  %188 = ashr exact i64 %187, 3
  %189 = sub nsw i64 0, %188
  %190 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %179, i64 %189
  %191 = ptrtoint %"struct.jxl::Token"* %190 to i64
  %192 = icmp sgt i64 %187, 0
  br i1 %192, label %193, label %196

193:                                              ; preds = %176
  %194 = bitcast %"struct.jxl::Token"* %190 to i8*
  %195 = inttoptr i64 %152 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %194, i8* align 4 %195, i64 %187, i1 false) #8
  br label %196

196:                                              ; preds = %193, %176
  store i64 %191, i64* %64, align 8
  store i64 %186, i64* %63, align 8
  store i64 %181, i64* %65, align 8
  %197 = icmp eq i64 %152, 0
  br i1 %197, label %327, label %198

198:                                              ; preds = %196
  %199 = inttoptr i64 %152 to i8*
  tail call void @_ZdlPv(i8* %199) #10
  br label %327

200:                                              ; preds = %66
  %201 = sub nsw i64 %74, %70
  %202 = trunc i64 %201 to i32
  %203 = shl i32 %202, 1
  %204 = ashr i32 %202, 31
  %205 = xor i32 %203, %204
  %206 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %34, align 8
  %207 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %36, align 8
  %208 = icmp ult %"struct.jxl::Token"* %206, %207
  %209 = ptrtoint %"struct.jxl::Token"* %207 to i64
  br i1 %208, label %210, label %215

210:                                              ; preds = %200
  %211 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %206, i64 0, i32 0
  store i32 2, i32* %211, align 4
  %212 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %206, i64 0, i32 1
  store i32 %205, i32* %212, align 4
  %213 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %206, i64 1
  %214 = ptrtoint %"struct.jxl::Token"* %213 to i64
  store i64 %214, i64* %63, align 8
  br label %262

215:                                              ; preds = %200
  %216 = ptrtoint %"struct.jxl::Token"* %206 to i64
  %217 = load i64, i64* %64, align 8
  %218 = sub i64 %216, %217
  %219 = ashr exact i64 %218, 3
  %220 = add nsw i64 %219, 1
  %221 = icmp ugt i64 %220, 2305843009213693951
  br i1 %221, label %222, label %224

222:                                              ; preds = %215
  %223 = bitcast i8* %24 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %223) #9
  unreachable

224:                                              ; preds = %215
  %225 = sub i64 %209, %217
  %226 = ashr exact i64 %225, 3
  %227 = icmp ult i64 %226, 1152921504606846975
  br i1 %227, label %228, label %236

228:                                              ; preds = %224
  %229 = ashr exact i64 %225, 2
  %230 = icmp ult i64 %229, %220
  %231 = select i1 %230, i64 %220, i64 %229
  %232 = icmp eq i64 %231, 0
  br i1 %232, label %241, label %233

233:                                              ; preds = %228
  %234 = icmp ugt i64 %231, 2305843009213693951
  br i1 %234, label %235, label %236

235:                                              ; preds = %233
  tail call void @abort() #9
  unreachable

236:                                              ; preds = %233, %224
  %237 = phi i64 [ %231, %233 ], [ 2305843009213693951, %224 ]
  %238 = shl i64 %237, 3
  %239 = tail call i8* @_Znwm(i64 %238) #10
  %240 = bitcast i8* %239 to %"struct.jxl::Token"*
  br label %241

241:                                              ; preds = %236, %228
  %242 = phi i64 [ %237, %236 ], [ 0, %228 ]
  %243 = phi i8* [ %239, %236 ], [ null, %228 ]
  %244 = phi %"struct.jxl::Token"* [ %240, %236 ], [ null, %228 ]
  %245 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %244, i64 %219
  %246 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %244, i64 %242
  %247 = ptrtoint %"struct.jxl::Token"* %246 to i64
  %248 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %245, i64 0, i32 0
  store i32 2, i32* %248, align 4
  %249 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %244, i64 %219, i32 1
  store i32 %205, i32* %249, align 4
  %250 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %245, i64 1
  %251 = ptrtoint %"struct.jxl::Token"* %250 to i64
  %252 = ptrtoint %"struct.jxl::Token"* %244 to i64
  %253 = icmp sgt i64 %218, 0
  br i1 %253, label %254, label %256

254:                                              ; preds = %241
  %255 = inttoptr i64 %217 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %243, i8* align 4 %255, i64 %218, i1 false) #8
  br label %256

256:                                              ; preds = %254, %241
  store i64 %252, i64* %64, align 8
  store i64 %251, i64* %63, align 8
  store i64 %247, i64* %65, align 8
  %257 = icmp eq i64 %217, 0
  br i1 %257, label %262, label %258

258:                                              ; preds = %256
  %259 = inttoptr i64 %217 to i8*
  tail call void @_ZdlPv(i8* %259) #10
  %260 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %34, align 8
  %261 = ptrtoint %"struct.jxl::Token"* %260 to i64
  br label %262

262:                                              ; preds = %258, %256, %210
  %263 = phi i64 [ %214, %210 ], [ %251, %256 ], [ %261, %258 ]
  %264 = phi %"struct.jxl::Token"* [ %213, %210 ], [ %250, %256 ], [ %260, %258 ]
  %265 = sub nsw i64 %78, %69
  %266 = trunc i64 %265 to i32
  %267 = shl i32 %266, 1
  %268 = ashr i32 %266, 31
  %269 = xor i32 %267, %268
  %270 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %36, align 8
  %271 = icmp ult %"struct.jxl::Token"* %264, %270
  %272 = ptrtoint %"struct.jxl::Token"* %270 to i64
  br i1 %271, label %273, label %278

273:                                              ; preds = %262
  %274 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %264, i64 0, i32 0
  store i32 2, i32* %274, align 4
  %275 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %264, i64 0, i32 1
  store i32 %269, i32* %275, align 4
  %276 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %264, i64 1
  %277 = ptrtoint %"struct.jxl::Token"* %276 to i64
  store i64 %277, i64* %63, align 8
  br label %327

278:                                              ; preds = %262
  %279 = ptrtoint %"struct.jxl::Token"* %264 to i64
  %280 = load i64, i64* %64, align 8
  %281 = sub i64 %279, %280
  %282 = ashr exact i64 %281, 3
  %283 = add nsw i64 %282, 1
  %284 = icmp ugt i64 %283, 2305843009213693951
  br i1 %284, label %285, label %287

285:                                              ; preds = %278
  %286 = bitcast i8* %24 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %286) #9
  unreachable

287:                                              ; preds = %278
  %288 = sub i64 %272, %280
  %289 = ashr exact i64 %288, 3
  %290 = icmp ult i64 %289, 1152921504606846975
  br i1 %290, label %291, label %299

291:                                              ; preds = %287
  %292 = ashr exact i64 %288, 2
  %293 = icmp ult i64 %292, %283
  %294 = select i1 %293, i64 %283, i64 %292
  %295 = icmp eq i64 %294, 0
  br i1 %295, label %304, label %296

296:                                              ; preds = %291
  %297 = icmp ugt i64 %294, 2305843009213693951
  br i1 %297, label %298, label %299

298:                                              ; preds = %296
  tail call void @abort() #9
  unreachable

299:                                              ; preds = %296, %287
  %300 = phi i64 [ %294, %296 ], [ 2305843009213693951, %287 ]
  %301 = shl i64 %300, 3
  %302 = tail call i8* @_Znwm(i64 %301) #10
  %303 = bitcast i8* %302 to %"struct.jxl::Token"*
  br label %304

304:                                              ; preds = %299, %291
  %305 = phi i64 [ %300, %299 ], [ 0, %291 ]
  %306 = phi %"struct.jxl::Token"* [ %303, %299 ], [ null, %291 ]
  %307 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %306, i64 %282
  %308 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %306, i64 %305
  %309 = ptrtoint %"struct.jxl::Token"* %308 to i64
  %310 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %307, i64 0, i32 0
  store i32 2, i32* %310, align 4
  %311 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %306, i64 %282, i32 1
  store i32 %269, i32* %311, align 4
  %312 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %307, i64 1
  %313 = ptrtoint %"struct.jxl::Token"* %312 to i64
  %314 = sub i64 %263, %280
  %315 = ashr exact i64 %314, 3
  %316 = sub nsw i64 0, %315
  %317 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %307, i64 %316
  %318 = ptrtoint %"struct.jxl::Token"* %317 to i64
  %319 = icmp sgt i64 %314, 0
  br i1 %319, label %320, label %323

320:                                              ; preds = %304
  %321 = bitcast %"struct.jxl::Token"* %317 to i8*
  %322 = inttoptr i64 %280 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %321, i8* align 4 %322, i64 %314, i1 false) #8
  br label %323

323:                                              ; preds = %320, %304
  store i64 %318, i64* %64, align 8
  store i64 %313, i64* %63, align 8
  store i64 %309, i64* %65, align 8
  %324 = icmp eq i64 %280, 0
  br i1 %324, label %327, label %325

325:                                              ; preds = %323
  %326 = inttoptr i64 %280 to i8*
  tail call void @_ZdlPv(i8* %326) #10
  br label %327

327:                                              ; preds = %325, %323, %273, %198, %196, %145
  %328 = add nuw i64 %68, 1
  %329 = load i64, i64* %58, align 8
  %330 = load i64, i64* %59, align 8
  %331 = sub i64 %329, %330
  %332 = ashr exact i64 %331, 3
  %333 = icmp ult i64 %328, %332
  br i1 %333, label %66, label %334

334:                                              ; preds = %327
  %335 = load %"class.std::__1::vector.144"*, %"class.std::__1::vector.144"** %21, align 8
  %336 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %335, i64 0, i32 0, i32 1
  %337 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %336, align 8
  %338 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %335, i64 0, i32 0, i32 2, i32 0, i32 0
  %339 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %338, align 8
  br label %340

340:                                              ; preds = %334, %17
  %341 = phi %"struct.jxl::Token"* [ %339, %334 ], [ %42, %17 ]
  %342 = phi %"struct.jxl::Token"* [ %337, %334 ], [ %42, %17 ]
  %343 = phi %"class.std::__1::vector.144"* [ %335, %334 ], [ %30, %17 ]
  %344 = getelementptr inbounds %"class.jxl::Splines", %"class.jxl::Splines"* %0, i64 0, i32 0
  %345 = load i32, i32* %344, align 8
  %346 = shl i32 %345, 1
  %347 = ashr i32 %345, 31
  %348 = xor i32 %346, %347
  %349 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %343, i64 0, i32 0, i32 1
  %350 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %343, i64 0, i32 0, i32 2, i32 0, i32 0
  %351 = icmp ult %"struct.jxl::Token"* %342, %341
  %352 = ptrtoint %"struct.jxl::Token"* %341 to i64
  br i1 %351, label %353, label %359

353:                                              ; preds = %340
  %354 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %342, i64 0, i32 0
  store i32 0, i32* %354, align 4
  %355 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %342, i64 0, i32 1
  store i32 %348, i32* %355, align 4
  %356 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %342, i64 1
  %357 = ptrtoint %"struct.jxl::Token"* %356 to i64
  %358 = bitcast %"struct.jxl::Token"** %349 to i64*
  store i64 %357, i64* %358, align 8
  br label %417

359:                                              ; preds = %340
  %360 = ptrtoint %"struct.jxl::Token"* %342 to i64
  %361 = bitcast %"struct.jxl::Token"** %349 to i64*
  %362 = bitcast %"class.std::__1::vector.144"* %343 to i64*
  %363 = load i64, i64* %362, align 8
  %364 = sub i64 %360, %363
  %365 = ashr exact i64 %364, 3
  %366 = add nsw i64 %365, 1
  %367 = icmp ugt i64 %366, 2305843009213693951
  br i1 %367, label %368, label %370

368:                                              ; preds = %359
  %369 = bitcast %"class.std::__1::vector.144"* %343 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %369) #9
  unreachable

370:                                              ; preds = %359
  %371 = bitcast %"struct.jxl::Token"** %350 to i64*
  %372 = sub i64 %352, %363
  %373 = ashr exact i64 %372, 3
  %374 = icmp ult i64 %373, 1152921504606846975
  br i1 %374, label %375, label %383

375:                                              ; preds = %370
  %376 = ashr exact i64 %372, 2
  %377 = icmp ult i64 %376, %366
  %378 = select i1 %377, i64 %366, i64 %376
  %379 = icmp eq i64 %378, 0
  br i1 %379, label %388, label %380

380:                                              ; preds = %375
  %381 = icmp ugt i64 %378, 2305843009213693951
  br i1 %381, label %382, label %383

382:                                              ; preds = %380
  tail call void @abort() #9
  unreachable

383:                                              ; preds = %380, %370
  %384 = phi i64 [ %378, %380 ], [ 2305843009213693951, %370 ]
  %385 = shl i64 %384, 3
  %386 = tail call i8* @_Znwm(i64 %385) #10
  %387 = bitcast i8* %386 to %"struct.jxl::Token"*
  br label %388

388:                                              ; preds = %383, %375
  %389 = phi i64 [ %384, %383 ], [ 0, %375 ]
  %390 = phi %"struct.jxl::Token"* [ %387, %383 ], [ null, %375 ]
  %391 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %390, i64 %365
  %392 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %390, i64 %389
  %393 = ptrtoint %"struct.jxl::Token"* %392 to i64
  %394 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %391, i64 0, i32 0
  store i32 0, i32* %394, align 4
  %395 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %390, i64 %365, i32 1
  store i32 %348, i32* %395, align 4
  %396 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %391, i64 1
  %397 = ptrtoint %"struct.jxl::Token"* %396 to i64
  %398 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %343, i64 0, i32 0, i32 0
  %399 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %398, align 8
  %400 = load i64, i64* %361, align 8
  %401 = ptrtoint %"struct.jxl::Token"* %399 to i64
  %402 = sub i64 %400, %401
  %403 = ashr exact i64 %402, 3
  %404 = sub nsw i64 0, %403
  %405 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %391, i64 %404
  %406 = ptrtoint %"struct.jxl::Token"* %405 to i64
  %407 = icmp sgt i64 %402, 0
  br i1 %407, label %408, label %412

408:                                              ; preds = %388
  %409 = bitcast %"struct.jxl::Token"* %405 to i8*
  %410 = bitcast %"struct.jxl::Token"* %399 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %409, i8* align 4 %410, i64 %402, i1 false) #8
  %411 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %398, align 8
  br label %412

412:                                              ; preds = %408, %388
  %413 = phi %"struct.jxl::Token"* [ %399, %388 ], [ %411, %408 ]
  store i64 %406, i64* %362, align 8
  store i64 %397, i64* %361, align 8
  store i64 %393, i64* %371, align 8
  %414 = icmp eq %"struct.jxl::Token"* %413, null
  br i1 %414, label %417, label %415

415:                                              ; preds = %412
  %416 = bitcast %"struct.jxl::Token"* %413 to i8*
  tail call void @_ZdlPv(i8* %416) #10
  br label %417

417:                                              ; preds = %353, %412, %415
  %418 = getelementptr inbounds %"class.jxl::Splines", %"class.jxl::Splines"* %0, i64 0, i32 1, i32 0, i32 0
  %419 = load %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"** %418, align 8
  %420 = load %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"** %11, align 8
  %421 = icmp eq %"class.jxl::QuantizedSpline"* %419, %420
  br i1 %421, label %424, label %422

422:                                              ; preds = %417
  %423 = load %"class.std::__1::vector.144"*, %"class.std::__1::vector.144"** %21, align 8
  br label %519

424:                                              ; preds = %519, %417
  %425 = bitcast %"struct.jxl::EntropyEncodingData"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %425) #8
  %426 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %7, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %426, i8 -86, i64 80, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %425, i8 0, i64 24, i1 false) #8
  %427 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %7, i64 0, i32 2
  %428 = bitcast %"class.std::__1::vector.164"* %427 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %428, i8 0, i64 24, i1 false) #8
  %429 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %7, i64 0, i32 3
  call void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"* %429) #8
  %430 = bitcast %"class.std::__1::vector.56"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %430) #8
  %431 = getelementptr inbounds %"class.std::__1::vector.56", %"class.std::__1::vector.56"* %8, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %430, i8 0, i64 24, i1 false) #8
  %432 = call i64 @_ZN3jxl24BuildAndEncodeHistogramsERKNS_15HistogramParamsEmRNSt3__16vectorINS4_INS_5TokenENS3_9allocatorIS5_EEEENS6_IS8_EEEEPNS_19EntropyEncodingDataEPNS4_IhNS6_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"struct.jxl::HistogramParams"* dereferenceable(56) %3, i64 6, %"class.std::__1::vector.142"* nonnull dereferenceable(24) %6, %"struct.jxl::EntropyEncodingData"* nonnull %7, %"class.std::__1::vector.56"* nonnull %8, %"struct.jxl::BitWriter"* %1, i64 %2, %"struct.jxl::AuxOut"* %4) #8
  %433 = load %"class.std::__1::vector.144"*, %"class.std::__1::vector.144"** %21, align 8
  call void @_ZN3jxl11WriteTokensERKNSt3__16vectorINS_5TokenENS0_9allocatorIS2_EEEERKNS_19EntropyEncodingDataERKNS1_IhNS3_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"class.std::__1::vector.144"* dereferenceable(24) %433, %"struct.jxl::EntropyEncodingData"* nonnull dereferenceable(104) %7, %"class.std::__1::vector.56"* nonnull dereferenceable(24) %8, %"struct.jxl::BitWriter"* %1, i64 %2, %"struct.jxl::AuxOut"* %4) #8
  %434 = load i8*, i8** %431, align 8
  %435 = icmp eq i8* %434, null
  br i1 %435, label %440, label %436

436:                                              ; preds = %424
  %437 = getelementptr inbounds %"class.std::__1::vector.56", %"class.std::__1::vector.56"* %8, i64 0, i32 0, i32 1
  %438 = ptrtoint i8* %434 to i64
  %439 = bitcast i8** %437 to i64*
  store i64 %438, i64* %439, align 8
  call void @_ZdlPv(i8* nonnull %434) #10
  br label %440

440:                                              ; preds = %424, %436
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %430) #8
  %441 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %7, i64 0, i32 2, i32 0, i32 0
  %442 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %441, align 8
  %443 = icmp eq %"struct.jxl::HybridUintConfig"* %442, null
  br i1 %443, label %449, label %444

444:                                              ; preds = %440
  %445 = ptrtoint %"struct.jxl::HybridUintConfig"* %442 to i64
  %446 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %7, i64 0, i32 2, i32 0, i32 1
  %447 = bitcast %"struct.jxl::HybridUintConfig"** %446 to i64*
  store i64 %445, i64* %447, align 8
  %448 = bitcast %"struct.jxl::HybridUintConfig"* %442 to i8*
  call void @_ZdlPv(i8* %448) #10
  br label %449

449:                                              ; preds = %444, %440
  %450 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %7, i64 0, i32 0, i32 0, i32 0
  %451 = load %"class.std::__1::vector.158"*, %"class.std::__1::vector.158"** %450, align 8
  %452 = icmp eq %"class.std::__1::vector.158"* %451, null
  br i1 %452, label %494, label %453

453:                                              ; preds = %449
  %454 = bitcast %"class.std::__1::vector.158"* %451 to i8*
  %455 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %7, i64 0, i32 0, i32 0, i32 1
  %456 = load %"class.std::__1::vector.158"*, %"class.std::__1::vector.158"** %455, align 8
  %457 = icmp eq %"class.std::__1::vector.158"* %456, %451
  br i1 %457, label %492, label %458

458:                                              ; preds = %453, %487
  %459 = phi %"class.std::__1::vector.158"* [ %460, %487 ], [ %456, %453 ]
  %460 = getelementptr inbounds %"class.std::__1::vector.158", %"class.std::__1::vector.158"* %459, i64 -1
  %461 = getelementptr inbounds %"class.std::__1::vector.158", %"class.std::__1::vector.158"* %460, i64 0, i32 0, i32 0
  %462 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %461, align 8
  %463 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %462, null
  br i1 %463, label %487, label %464

464:                                              ; preds = %458
  %465 = bitcast %"struct.jxl::ANSEncSymbolInfo"* %462 to i8*
  %466 = getelementptr inbounds %"class.std::__1::vector.158", %"class.std::__1::vector.158"* %459, i64 -1, i32 0, i32 1
  %467 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %466, align 8
  %468 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %467, %462
  br i1 %468, label %485, label %469

469:                                              ; preds = %464, %480
  %470 = phi %"struct.jxl::ANSEncSymbolInfo"* [ %471, %480 ], [ %467, %464 ]
  %471 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %470, i64 -1
  %472 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %470, i64 -1, i32 2, i32 0, i32 0
  %473 = load i16*, i16** %472, align 8
  %474 = icmp eq i16* %473, null
  br i1 %474, label %480, label %475

475:                                              ; preds = %469
  %476 = ptrtoint i16* %473 to i64
  %477 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %470, i64 -1, i32 2, i32 0, i32 1
  %478 = bitcast i16** %477 to i64*
  store i64 %476, i64* %478, align 8
  %479 = bitcast i16* %473 to i8*
  call void @_ZdlPv(i8* %479) #10
  br label %480

480:                                              ; preds = %475, %469
  %481 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %471, %462
  br i1 %481, label %482, label %469

482:                                              ; preds = %480
  %483 = bitcast %"class.std::__1::vector.158"* %460 to i8**
  %484 = load i8*, i8** %483, align 8
  br label %485

485:                                              ; preds = %482, %464
  %486 = phi i8* [ %484, %482 ], [ %465, %464 ]
  store %"struct.jxl::ANSEncSymbolInfo"* %462, %"struct.jxl::ANSEncSymbolInfo"** %466, align 8
  call void @_ZdlPv(i8* %486) #10
  br label %487

487:                                              ; preds = %485, %458
  %488 = icmp eq %"class.std::__1::vector.158"* %460, %451
  br i1 %488, label %489, label %458

489:                                              ; preds = %487
  %490 = bitcast %"struct.jxl::EntropyEncodingData"* %7 to i8**
  %491 = load i8*, i8** %490, align 8
  br label %492

492:                                              ; preds = %489, %453
  %493 = phi i8* [ %491, %489 ], [ %454, %453 ]
  store %"class.std::__1::vector.158"* %451, %"class.std::__1::vector.158"** %455, align 8
  call void @_ZdlPv(i8* %493) #10
  br label %494

494:                                              ; preds = %449, %492
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %425) #8
  %495 = load %"class.std::__1::vector.144"*, %"class.std::__1::vector.144"** %21, align 8
  %496 = icmp eq %"class.std::__1::vector.144"* %495, null
  br i1 %496, label %518, label %497

497:                                              ; preds = %494
  %498 = bitcast %"class.std::__1::vector.144"* %495 to i8*
  %499 = load %"class.std::__1::vector.144"*, %"class.std::__1::vector.144"** %22, align 8
  %500 = icmp eq %"class.std::__1::vector.144"* %499, %495
  br i1 %500, label %516, label %501

501:                                              ; preds = %497, %512
  %502 = phi %"class.std::__1::vector.144"* [ %503, %512 ], [ %499, %497 ]
  %503 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %502, i64 -1
  %504 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %503, i64 0, i32 0, i32 0
  %505 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %504, align 8
  %506 = icmp eq %"struct.jxl::Token"* %505, null
  br i1 %506, label %512, label %507

507:                                              ; preds = %501
  %508 = ptrtoint %"struct.jxl::Token"* %505 to i64
  %509 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %502, i64 -1, i32 0, i32 1
  %510 = bitcast %"struct.jxl::Token"** %509 to i64*
  store i64 %508, i64* %510, align 8
  %511 = bitcast %"struct.jxl::Token"* %505 to i8*
  call void @_ZdlPv(i8* %511) #10
  br label %512

512:                                              ; preds = %507, %501
  %513 = icmp eq %"class.std::__1::vector.144"* %503, %495
  br i1 %513, label %514, label %501

514:                                              ; preds = %512
  %515 = load i8*, i8** %25, align 8
  br label %516

516:                                              ; preds = %514, %497
  %517 = phi i8* [ %515, %514 ], [ %498, %497 ]
  store %"class.std::__1::vector.144"* %495, %"class.std::__1::vector.144"** %22, align 8
  call void @_ZdlPv(i8* %517) #10
  br label %518

518:                                              ; preds = %494, %516
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %20) #8
  ret void

519:                                              ; preds = %422, %519
  %520 = phi %"class.jxl::QuantizedSpline"* [ %419, %422 ], [ %521, %519 ]
  tail call void @_ZN3jxl22QuantizedSplineEncoder8TokenizeERKNS_15QuantizedSplineEPNSt3__16vectorINS_5TokenENS4_9allocatorIS6_EEEE(%"class.jxl::QuantizedSpline"* dereferenceable(536) %520, %"class.std::__1::vector.144"* %423)
  %521 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %520, i64 1
  %522 = icmp eq %"class.jxl::QuantizedSpline"* %521, %420
  br i1 %522, label %424, label %519
}

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #1

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl22QuantizedSplineEncoder8TokenizeERKNS_15QuantizedSplineEPNSt3__16vectorINS_5TokenENS4_9allocatorIS6_EEEE(%"class.jxl::QuantizedSpline"* dereferenceable(536), %"class.std::__1::vector.144"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 0, i32 0, i32 1
  %4 = bitcast %"struct.std::__1::pair"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.jxl::QuantizedSpline"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 4
  %10 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %1, i64 0, i32 0, i32 1
  %11 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %10, align 8
  %12 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %13 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %12, align 8
  %14 = icmp ult %"struct.jxl::Token"* %11, %13
  %15 = ptrtoint %"struct.jxl::Token"* %13 to i64
  br i1 %14, label %16, label %23

16:                                               ; preds = %2
  %17 = trunc i64 %9 to i32
  %18 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %11, i64 0, i32 0
  store i32 6, i32* %18, align 4
  %19 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %11, i64 0, i32 1
  store i32 %17, i32* %19, align 4
  %20 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %11, i64 1
  %21 = ptrtoint %"struct.jxl::Token"* %20 to i64
  %22 = bitcast %"struct.jxl::Token"** %10 to i64*
  store i64 %21, i64* %22, align 8
  br label %82

23:                                               ; preds = %2
  %24 = ptrtoint %"struct.jxl::Token"* %11 to i64
  %25 = bitcast %"struct.jxl::Token"** %10 to i64*
  %26 = bitcast %"class.std::__1::vector.144"* %1 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = sub i64 %24, %27
  %29 = ashr exact i64 %28, 3
  %30 = add nsw i64 %29, 1
  %31 = icmp ugt i64 %30, 2305843009213693951
  br i1 %31, label %32, label %34

32:                                               ; preds = %23
  %33 = bitcast %"class.std::__1::vector.144"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %33) #9
  unreachable

34:                                               ; preds = %23
  %35 = bitcast %"struct.jxl::Token"** %12 to i64*
  %36 = sub i64 %15, %27
  %37 = ashr exact i64 %36, 3
  %38 = icmp ult i64 %37, 1152921504606846975
  br i1 %38, label %39, label %47

39:                                               ; preds = %34
  %40 = ashr exact i64 %36, 2
  %41 = icmp ult i64 %40, %30
  %42 = select i1 %41, i64 %30, i64 %40
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %52, label %44

44:                                               ; preds = %39
  %45 = icmp ugt i64 %42, 2305843009213693951
  br i1 %45, label %46, label %47

46:                                               ; preds = %44
  tail call void @abort() #9
  unreachable

47:                                               ; preds = %44, %34
  %48 = phi i64 [ %42, %44 ], [ 2305843009213693951, %34 ]
  %49 = shl i64 %48, 3
  %50 = tail call i8* @_Znwm(i64 %49) #10
  %51 = bitcast i8* %50 to %"struct.jxl::Token"*
  br label %52

52:                                               ; preds = %47, %39
  %53 = phi i64 [ %48, %47 ], [ 0, %39 ]
  %54 = phi %"struct.jxl::Token"* [ %51, %47 ], [ null, %39 ]
  %55 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %54, i64 %29
  %56 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %54, i64 %53
  %57 = ptrtoint %"struct.jxl::Token"* %56 to i64
  %58 = trunc i64 %9 to i32
  %59 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %55, i64 0, i32 0
  store i32 6, i32* %59, align 4
  %60 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %54, i64 %29, i32 1
  store i32 %58, i32* %60, align 4
  %61 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %55, i64 1
  %62 = ptrtoint %"struct.jxl::Token"* %61 to i64
  %63 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %1, i64 0, i32 0, i32 0
  %64 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %63, align 8
  %65 = load i64, i64* %25, align 8
  %66 = ptrtoint %"struct.jxl::Token"* %64 to i64
  %67 = sub i64 %65, %66
  %68 = ashr exact i64 %67, 3
  %69 = sub nsw i64 0, %68
  %70 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %55, i64 %69
  %71 = ptrtoint %"struct.jxl::Token"* %70 to i64
  %72 = icmp sgt i64 %67, 0
  br i1 %72, label %73, label %77

73:                                               ; preds = %52
  %74 = bitcast %"struct.jxl::Token"* %70 to i8*
  %75 = bitcast %"struct.jxl::Token"* %64 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %74, i8* align 4 %75, i64 %67, i1 false) #8
  %76 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %63, align 8
  br label %77

77:                                               ; preds = %73, %52
  %78 = phi %"struct.jxl::Token"* [ %64, %52 ], [ %76, %73 ]
  store i64 %71, i64* %26, align 8
  store i64 %62, i64* %25, align 8
  store i64 %57, i64* %35, align 8
  %79 = icmp eq %"struct.jxl::Token"* %78, null
  br i1 %79, label %82, label %80

80:                                               ; preds = %77
  %81 = bitcast %"struct.jxl::Token"* %78 to i8*
  tail call void @_ZdlPv(i8* %81) #10
  br label %82

82:                                               ; preds = %80, %77, %16
  %83 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 0, i32 0, i32 0
  %84 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %83, align 8
  %85 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %3, align 8
  %86 = icmp eq %"struct.std::__1::pair"* %84, %85
  %87 = bitcast %"struct.jxl::Token"** %10 to i64*
  %88 = bitcast %"class.std::__1::vector.144"* %1 to i64*
  %89 = bitcast %"struct.jxl::Token"** %12 to i64*
  br i1 %86, label %92, label %90

90:                                               ; preds = %82
  %91 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %1, i64 0, i32 0, i32 0
  br label %94

92:                                               ; preds = %236, %82
  %93 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %1, i64 0, i32 0, i32 0
  br label %313

94:                                               ; preds = %90, %236
  %95 = phi %"struct.std::__1::pair"* [ %84, %90 ], [ %237, %236 ]
  %96 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %95, i64 0, i32 0
  %97 = load i64, i64* %96, align 8
  %98 = trunc i64 %97 to i32
  %99 = shl i32 %98, 1
  %100 = ashr i32 %98, 31
  %101 = xor i32 %99, %100
  %102 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %10, align 8
  %103 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %12, align 8
  %104 = icmp ult %"struct.jxl::Token"* %102, %103
  %105 = ptrtoint %"struct.jxl::Token"* %103 to i64
  br i1 %104, label %106, label %111

106:                                              ; preds = %94
  %107 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %102, i64 0, i32 0
  store i32 8, i32* %107, align 4
  %108 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %102, i64 0, i32 1
  store i32 %101, i32* %108, align 4
  %109 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %102, i64 1
  %110 = ptrtoint %"struct.jxl::Token"* %109 to i64
  store i64 %110, i64* %87, align 8
  br label %166

111:                                              ; preds = %94
  %112 = ptrtoint %"struct.jxl::Token"* %102 to i64
  %113 = load i64, i64* %88, align 8
  %114 = sub i64 %112, %113
  %115 = ashr exact i64 %114, 3
  %116 = add nsw i64 %115, 1
  %117 = icmp ugt i64 %116, 2305843009213693951
  br i1 %117, label %118, label %120

118:                                              ; preds = %111
  %119 = bitcast %"class.std::__1::vector.144"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %119) #9
  unreachable

120:                                              ; preds = %111
  %121 = sub i64 %105, %113
  %122 = ashr exact i64 %121, 3
  %123 = icmp ult i64 %122, 1152921504606846975
  br i1 %123, label %124, label %132

124:                                              ; preds = %120
  %125 = ashr exact i64 %121, 2
  %126 = icmp ult i64 %125, %116
  %127 = select i1 %126, i64 %116, i64 %125
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %137, label %129

129:                                              ; preds = %124
  %130 = icmp ugt i64 %127, 2305843009213693951
  br i1 %130, label %131, label %132

131:                                              ; preds = %129
  tail call void @abort() #9
  unreachable

132:                                              ; preds = %129, %120
  %133 = phi i64 [ %127, %129 ], [ 2305843009213693951, %120 ]
  %134 = shl i64 %133, 3
  %135 = tail call i8* @_Znwm(i64 %134) #10
  %136 = bitcast i8* %135 to %"struct.jxl::Token"*
  br label %137

137:                                              ; preds = %132, %124
  %138 = phi i64 [ %133, %132 ], [ 0, %124 ]
  %139 = phi %"struct.jxl::Token"* [ %136, %132 ], [ null, %124 ]
  %140 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %139, i64 %115
  %141 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %139, i64 %138
  %142 = ptrtoint %"struct.jxl::Token"* %141 to i64
  %143 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %140, i64 0, i32 0
  store i32 8, i32* %143, align 4
  %144 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %139, i64 %115, i32 1
  store i32 %101, i32* %144, align 4
  %145 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %140, i64 1
  %146 = ptrtoint %"struct.jxl::Token"* %145 to i64
  %147 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %91, align 8
  %148 = load i64, i64* %87, align 8
  %149 = ptrtoint %"struct.jxl::Token"* %147 to i64
  %150 = sub i64 %148, %149
  %151 = ashr exact i64 %150, 3
  %152 = sub nsw i64 0, %151
  %153 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %140, i64 %152
  %154 = ptrtoint %"struct.jxl::Token"* %153 to i64
  %155 = icmp sgt i64 %150, 0
  br i1 %155, label %156, label %160

156:                                              ; preds = %137
  %157 = bitcast %"struct.jxl::Token"* %153 to i8*
  %158 = bitcast %"struct.jxl::Token"* %147 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %157, i8* align 4 %158, i64 %150, i1 false) #8
  %159 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %91, align 8
  br label %160

160:                                              ; preds = %156, %137
  %161 = phi %"struct.jxl::Token"* [ %147, %137 ], [ %159, %156 ]
  store i64 %154, i64* %88, align 8
  store i64 %146, i64* %87, align 8
  store i64 %142, i64* %89, align 8
  %162 = icmp eq %"struct.jxl::Token"* %161, null
  br i1 %162, label %166, label %163

163:                                              ; preds = %160
  %164 = bitcast %"struct.jxl::Token"* %161 to i8*
  tail call void @_ZdlPv(i8* %164) #10
  %165 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %10, align 8
  br label %166

166:                                              ; preds = %106, %160, %163
  %167 = phi %"struct.jxl::Token"* [ %109, %106 ], [ %145, %160 ], [ %165, %163 ]
  %168 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %95, i64 0, i32 1
  %169 = load i64, i64* %168, align 8
  %170 = trunc i64 %169 to i32
  %171 = shl i32 %170, 1
  %172 = ashr i32 %170, 31
  %173 = xor i32 %171, %172
  %174 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %12, align 8
  %175 = icmp ult %"struct.jxl::Token"* %167, %174
  %176 = ptrtoint %"struct.jxl::Token"* %174 to i64
  br i1 %175, label %177, label %182

177:                                              ; preds = %166
  %178 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %167, i64 0, i32 0
  store i32 8, i32* %178, align 4
  %179 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %167, i64 0, i32 1
  store i32 %173, i32* %179, align 4
  %180 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %167, i64 1
  %181 = ptrtoint %"struct.jxl::Token"* %180 to i64
  store i64 %181, i64* %87, align 8
  br label %236

182:                                              ; preds = %166
  %183 = ptrtoint %"struct.jxl::Token"* %167 to i64
  %184 = load i64, i64* %88, align 8
  %185 = sub i64 %183, %184
  %186 = ashr exact i64 %185, 3
  %187 = add nsw i64 %186, 1
  %188 = icmp ugt i64 %187, 2305843009213693951
  br i1 %188, label %189, label %191

189:                                              ; preds = %182
  %190 = bitcast %"class.std::__1::vector.144"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %190) #9
  unreachable

191:                                              ; preds = %182
  %192 = sub i64 %176, %184
  %193 = ashr exact i64 %192, 3
  %194 = icmp ult i64 %193, 1152921504606846975
  br i1 %194, label %195, label %203

195:                                              ; preds = %191
  %196 = ashr exact i64 %192, 2
  %197 = icmp ult i64 %196, %187
  %198 = select i1 %197, i64 %187, i64 %196
  %199 = icmp eq i64 %198, 0
  br i1 %199, label %208, label %200

200:                                              ; preds = %195
  %201 = icmp ugt i64 %198, 2305843009213693951
  br i1 %201, label %202, label %203

202:                                              ; preds = %200
  tail call void @abort() #9
  unreachable

203:                                              ; preds = %200, %191
  %204 = phi i64 [ %198, %200 ], [ 2305843009213693951, %191 ]
  %205 = shl i64 %204, 3
  %206 = tail call i8* @_Znwm(i64 %205) #10
  %207 = bitcast i8* %206 to %"struct.jxl::Token"*
  br label %208

208:                                              ; preds = %203, %195
  %209 = phi i64 [ %204, %203 ], [ 0, %195 ]
  %210 = phi %"struct.jxl::Token"* [ %207, %203 ], [ null, %195 ]
  %211 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %210, i64 %186
  %212 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %210, i64 %209
  %213 = ptrtoint %"struct.jxl::Token"* %212 to i64
  %214 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %211, i64 0, i32 0
  store i32 8, i32* %214, align 4
  %215 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %210, i64 %186, i32 1
  store i32 %173, i32* %215, align 4
  %216 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %211, i64 1
  %217 = ptrtoint %"struct.jxl::Token"* %216 to i64
  %218 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %91, align 8
  %219 = load i64, i64* %87, align 8
  %220 = ptrtoint %"struct.jxl::Token"* %218 to i64
  %221 = sub i64 %219, %220
  %222 = ashr exact i64 %221, 3
  %223 = sub nsw i64 0, %222
  %224 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %211, i64 %223
  %225 = ptrtoint %"struct.jxl::Token"* %224 to i64
  %226 = icmp sgt i64 %221, 0
  br i1 %226, label %227, label %231

227:                                              ; preds = %208
  %228 = bitcast %"struct.jxl::Token"* %224 to i8*
  %229 = bitcast %"struct.jxl::Token"* %218 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %228, i8* align 4 %229, i64 %221, i1 false) #8
  %230 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %91, align 8
  br label %231

231:                                              ; preds = %227, %208
  %232 = phi %"struct.jxl::Token"* [ %218, %208 ], [ %230, %227 ]
  store i64 %225, i64* %88, align 8
  store i64 %217, i64* %87, align 8
  store i64 %213, i64* %89, align 8
  %233 = icmp eq %"struct.jxl::Token"* %232, null
  br i1 %233, label %236, label %234

234:                                              ; preds = %231
  %235 = bitcast %"struct.jxl::Token"* %232 to i8*
  tail call void @_ZdlPv(i8* %235) #10
  br label %236

236:                                              ; preds = %177, %231, %234
  %237 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %95, i64 1
  %238 = icmp eq %"struct.std::__1::pair"* %237, %85
  br i1 %238, label %92, label %94

239:                                              ; preds = %388, %309
  %240 = phi i64 [ %310, %309 ], [ 0, %388 ]
  %241 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 2, i64 %240
  %242 = load i32, i32* %241, align 4
  %243 = shl i32 %242, 1
  %244 = ashr i32 %242, 31
  %245 = xor i32 %243, %244
  %246 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %10, align 8
  %247 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %12, align 8
  %248 = icmp ult %"struct.jxl::Token"* %246, %247
  %249 = ptrtoint %"struct.jxl::Token"* %247 to i64
  br i1 %248, label %250, label %255

250:                                              ; preds = %239
  %251 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %246, i64 0, i32 0
  store i32 10, i32* %251, align 4
  %252 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %246, i64 0, i32 1
  store i32 %245, i32* %252, align 4
  %253 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %246, i64 1
  %254 = ptrtoint %"struct.jxl::Token"* %253 to i64
  store i64 %254, i64* %87, align 8
  br label %309

255:                                              ; preds = %239
  %256 = ptrtoint %"struct.jxl::Token"* %246 to i64
  %257 = load i64, i64* %88, align 8
  %258 = sub i64 %256, %257
  %259 = ashr exact i64 %258, 3
  %260 = add nsw i64 %259, 1
  %261 = icmp ugt i64 %260, 2305843009213693951
  br i1 %261, label %262, label %264

262:                                              ; preds = %255
  %263 = bitcast %"class.std::__1::vector.144"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %263) #9
  unreachable

264:                                              ; preds = %255
  %265 = sub i64 %249, %257
  %266 = ashr exact i64 %265, 3
  %267 = icmp ult i64 %266, 1152921504606846975
  br i1 %267, label %268, label %276

268:                                              ; preds = %264
  %269 = ashr exact i64 %265, 2
  %270 = icmp ult i64 %269, %260
  %271 = select i1 %270, i64 %260, i64 %269
  %272 = icmp eq i64 %271, 0
  br i1 %272, label %281, label %273

273:                                              ; preds = %268
  %274 = icmp ugt i64 %271, 2305843009213693951
  br i1 %274, label %275, label %276

275:                                              ; preds = %273
  tail call void @abort() #9
  unreachable

276:                                              ; preds = %273, %264
  %277 = phi i64 [ %271, %273 ], [ 2305843009213693951, %264 ]
  %278 = shl i64 %277, 3
  %279 = tail call i8* @_Znwm(i64 %278) #10
  %280 = bitcast i8* %279 to %"struct.jxl::Token"*
  br label %281

281:                                              ; preds = %276, %268
  %282 = phi i64 [ %277, %276 ], [ 0, %268 ]
  %283 = phi %"struct.jxl::Token"* [ %280, %276 ], [ null, %268 ]
  %284 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %283, i64 %259
  %285 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %283, i64 %282
  %286 = ptrtoint %"struct.jxl::Token"* %285 to i64
  %287 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %284, i64 0, i32 0
  store i32 10, i32* %287, align 4
  %288 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %283, i64 %259, i32 1
  store i32 %245, i32* %288, align 4
  %289 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %284, i64 1
  %290 = ptrtoint %"struct.jxl::Token"* %289 to i64
  %291 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %93, align 8
  %292 = load i64, i64* %87, align 8
  %293 = ptrtoint %"struct.jxl::Token"* %291 to i64
  %294 = sub i64 %292, %293
  %295 = ashr exact i64 %294, 3
  %296 = sub nsw i64 0, %295
  %297 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %284, i64 %296
  %298 = ptrtoint %"struct.jxl::Token"* %297 to i64
  %299 = icmp sgt i64 %294, 0
  br i1 %299, label %300, label %304

300:                                              ; preds = %281
  %301 = bitcast %"struct.jxl::Token"* %297 to i8*
  %302 = bitcast %"struct.jxl::Token"* %291 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %301, i8* align 4 %302, i64 %294, i1 false) #8
  %303 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %93, align 8
  br label %304

304:                                              ; preds = %300, %281
  %305 = phi %"struct.jxl::Token"* [ %291, %281 ], [ %303, %300 ]
  store i64 %298, i64* %88, align 8
  store i64 %290, i64* %87, align 8
  store i64 %286, i64* %89, align 8
  %306 = icmp eq %"struct.jxl::Token"* %305, null
  br i1 %306, label %309, label %307

307:                                              ; preds = %304
  %308 = bitcast %"struct.jxl::Token"* %305 to i8*
  tail call void @_ZdlPv(i8* %308) #10
  br label %309

309:                                              ; preds = %250, %304, %307
  %310 = add nuw nsw i64 %240, 1
  %311 = icmp eq i64 %310, 32
  br i1 %311, label %312, label %239

312:                                              ; preds = %309
  ret void

313:                                              ; preds = %388, %92
  %314 = phi i64 [ 0, %92 ], [ %389, %388 ]
  br label %315

315:                                              ; preds = %385, %313
  %316 = phi i64 [ 0, %313 ], [ %386, %385 ]
  %317 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 %314, i64 %316
  %318 = load i32, i32* %317, align 4
  %319 = shl i32 %318, 1
  %320 = ashr i32 %318, 31
  %321 = xor i32 %319, %320
  %322 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %10, align 8
  %323 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %12, align 8
  %324 = icmp ult %"struct.jxl::Token"* %322, %323
  %325 = ptrtoint %"struct.jxl::Token"* %323 to i64
  br i1 %324, label %326, label %331

326:                                              ; preds = %315
  %327 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %322, i64 0, i32 0
  store i32 10, i32* %327, align 4
  %328 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %322, i64 0, i32 1
  store i32 %321, i32* %328, align 4
  %329 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %322, i64 1
  %330 = ptrtoint %"struct.jxl::Token"* %329 to i64
  store i64 %330, i64* %87, align 8
  br label %385

331:                                              ; preds = %315
  %332 = ptrtoint %"struct.jxl::Token"* %322 to i64
  %333 = load i64, i64* %88, align 8
  %334 = sub i64 %332, %333
  %335 = ashr exact i64 %334, 3
  %336 = add nsw i64 %335, 1
  %337 = icmp ugt i64 %336, 2305843009213693951
  br i1 %337, label %338, label %340

338:                                              ; preds = %331
  %339 = bitcast %"class.std::__1::vector.144"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %339) #9
  unreachable

340:                                              ; preds = %331
  %341 = sub i64 %325, %333
  %342 = ashr exact i64 %341, 3
  %343 = icmp ult i64 %342, 1152921504606846975
  br i1 %343, label %344, label %352

344:                                              ; preds = %340
  %345 = ashr exact i64 %341, 2
  %346 = icmp ult i64 %345, %336
  %347 = select i1 %346, i64 %336, i64 %345
  %348 = icmp eq i64 %347, 0
  br i1 %348, label %357, label %349

349:                                              ; preds = %344
  %350 = icmp ugt i64 %347, 2305843009213693951
  br i1 %350, label %351, label %352

351:                                              ; preds = %349
  tail call void @abort() #9
  unreachable

352:                                              ; preds = %349, %340
  %353 = phi i64 [ %347, %349 ], [ 2305843009213693951, %340 ]
  %354 = shl i64 %353, 3
  %355 = tail call i8* @_Znwm(i64 %354) #10
  %356 = bitcast i8* %355 to %"struct.jxl::Token"*
  br label %357

357:                                              ; preds = %352, %344
  %358 = phi i64 [ %353, %352 ], [ 0, %344 ]
  %359 = phi %"struct.jxl::Token"* [ %356, %352 ], [ null, %344 ]
  %360 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %359, i64 %335
  %361 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %359, i64 %358
  %362 = ptrtoint %"struct.jxl::Token"* %361 to i64
  %363 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %360, i64 0, i32 0
  store i32 10, i32* %363, align 4
  %364 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %359, i64 %335, i32 1
  store i32 %321, i32* %364, align 4
  %365 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %360, i64 1
  %366 = ptrtoint %"struct.jxl::Token"* %365 to i64
  %367 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %93, align 8
  %368 = load i64, i64* %87, align 8
  %369 = ptrtoint %"struct.jxl::Token"* %367 to i64
  %370 = sub i64 %368, %369
  %371 = ashr exact i64 %370, 3
  %372 = sub nsw i64 0, %371
  %373 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %360, i64 %372
  %374 = ptrtoint %"struct.jxl::Token"* %373 to i64
  %375 = icmp sgt i64 %370, 0
  br i1 %375, label %376, label %380

376:                                              ; preds = %357
  %377 = bitcast %"struct.jxl::Token"* %373 to i8*
  %378 = bitcast %"struct.jxl::Token"* %367 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %377, i8* align 4 %378, i64 %370, i1 false) #8
  %379 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %93, align 8
  br label %380

380:                                              ; preds = %376, %357
  %381 = phi %"struct.jxl::Token"* [ %367, %357 ], [ %379, %376 ]
  store i64 %374, i64* %88, align 8
  store i64 %366, i64* %87, align 8
  store i64 %362, i64* %89, align 8
  %382 = icmp eq %"struct.jxl::Token"* %381, null
  br i1 %382, label %385, label %383

383:                                              ; preds = %380
  %384 = bitcast %"struct.jxl::Token"* %381 to i8*
  tail call void @_ZdlPv(i8* %384) #10
  br label %385

385:                                              ; preds = %326, %380, %383
  %386 = add nuw nsw i64 %316, 1
  %387 = icmp eq i64 %386, 32
  br i1 %387, label %388, label %315

388:                                              ; preds = %385
  %389 = add nuw nsw i64 %314, 1
  %390 = icmp eq i64 %389, 3
  br i1 %390, label %239, label %313
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare i64 @_ZN3jxl24BuildAndEncodeHistogramsERKNS_15HistogramParamsEmRNSt3__16vectorINS4_INS_5TokenENS3_9allocatorIS5_EEEENS6_IS8_EEEEPNS_19EntropyEncodingDataEPNS4_IhNS6_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"struct.jxl::HistogramParams"* dereferenceable(56), i64, %"class.std::__1::vector.142"* dereferenceable(24), %"struct.jxl::EntropyEncodingData"*, %"class.std::__1::vector.56"*, %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #1

declare void @_ZN3jxl11WriteTokensERKNSt3__16vectorINS_5TokenENS0_9allocatorIS2_EEEERKNS_19EntropyEncodingDataERKNS1_IhNS3_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"class.std::__1::vector.144"* dereferenceable(24), %"struct.jxl::EntropyEncodingData"* dereferenceable(104), %"class.std::__1::vector.56"* dereferenceable(24), %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl11FindSplinesERKNS_6Image3IfEE(%"class.jxl::Splines"* noalias nocapture sret, %"class.jxl::Image3"* nocapture readnone dereferenceable(96)) local_unnamed_addr #0 {
  %3 = bitcast %"class.jxl::Splines"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 56, i1 false)
  ret void
}

; Function Attrs: nounwind
declare i64 @lroundf(float) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

declare void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"*) unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
