; ModuleID = '../../components/payments/core/payment_options.cc'
source_filename = "../../components/payments/core/payment_options.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.payments::PaymentOptions" = type { i8, i8, i8, i8, i32 }
%"class.base::DictionaryValue" = type { %"class.base::Value" }
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.0" }
%"union.absl::variant_internal::DestructibleUnionImpl.0" = type { %"union.absl::variant_internal::DestructibleUnionImpl.1" }
%"union.absl::variant_internal::DestructibleUnionImpl.1" = type { %"union.absl::variant_internal::DestructibleUnionImpl.2" }
%"union.absl::variant_internal::DestructibleUnionImpl.2" = type { %"union.absl::variant_internal::DestructibleUnionImpl.3" }
%"union.absl::variant_internal::DestructibleUnionImpl.3" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@_ZN8payments12_GLOBAL__N_131kPaymentOptionsRequestPayerNameE = internal constant [17 x i8] c"requestPayerName\00", align 16
@_ZN8payments12_GLOBAL__N_132kPaymentOptionsRequestPayerEmailE = internal constant [18 x i8] c"requestPayerEmail\00", align 16
@_ZN8payments12_GLOBAL__N_132kPaymentOptionsRequestPayerPhoneE = internal constant [18 x i8] c"requestPayerPhone\00", align 16
@_ZN8payments12_GLOBAL__N_130kPaymentOptionsRequestShippingE = internal constant [16 x i8] c"requestShipping\00", align 16
@_ZN8payments12_GLOBAL__N_127kPaymentOptionsShippingTypeE = internal constant [13 x i8] c"shippingType\00", align 1
@_ZN8payments12_GLOBAL__N_135kPaymentOptionsShippingTypeDeliveryE = internal constant [9 x i8] c"delivery\00", align 1
@_ZN8payments12_GLOBAL__N_133kPaymentOptionsShippingTypePickupE = internal constant [7 x i8] c"pickup\00", align 1

@_ZN8payments14PaymentOptionsC1Ev = hidden unnamed_addr alias void (%"class.payments::PaymentOptions"*), void (%"class.payments::PaymentOptions"*)* @_ZN8payments14PaymentOptionsC2Ev
@_ZN8payments14PaymentOptionsD1Ev = hidden unnamed_addr alias void (%"class.payments::PaymentOptions"*), void (%"class.payments::PaymentOptions"*)* @_ZN8payments14PaymentOptionsD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN8payments14PaymentOptionsC2Ev(%"class.payments::PaymentOptions"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.payments::PaymentOptions"* %0 to i64*
  store i64 0, i64* %2, align 4
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN8payments14PaymentOptionsD2Ev(%"class.payments::PaymentOptions"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK8payments14PaymentOptionseqERKS0_(%"class.payments::PaymentOptions"* nocapture readonly, %"class.payments::PaymentOptions"* nocapture readonly dereferenceable(8)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.payments::PaymentOptions", %"class.payments::PaymentOptions"* %0, i64 0, i32 0
  %4 = load i8, i8* %3, align 4, !range !2
  %5 = getelementptr inbounds %"class.payments::PaymentOptions", %"class.payments::PaymentOptions"* %1, i64 0, i32 0
  %6 = load i8, i8* %5, align 4, !range !2
  %7 = icmp eq i8 %4, %6
  br i1 %7, label %8, label %32

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.payments::PaymentOptions", %"class.payments::PaymentOptions"* %0, i64 0, i32 1
  %10 = load i8, i8* %9, align 1, !range !2
  %11 = getelementptr inbounds %"class.payments::PaymentOptions", %"class.payments::PaymentOptions"* %1, i64 0, i32 1
  %12 = load i8, i8* %11, align 1, !range !2
  %13 = icmp eq i8 %10, %12
  br i1 %13, label %14, label %32

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"class.payments::PaymentOptions", %"class.payments::PaymentOptions"* %0, i64 0, i32 2
  %16 = load i8, i8* %15, align 2, !range !2
  %17 = getelementptr inbounds %"class.payments::PaymentOptions", %"class.payments::PaymentOptions"* %1, i64 0, i32 2
  %18 = load i8, i8* %17, align 2, !range !2
  %19 = icmp eq i8 %16, %18
  br i1 %19, label %20, label %32

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"class.payments::PaymentOptions", %"class.payments::PaymentOptions"* %0, i64 0, i32 3
  %22 = load i8, i8* %21, align 1, !range !2
  %23 = getelementptr inbounds %"class.payments::PaymentOptions", %"class.payments::PaymentOptions"* %1, i64 0, i32 3
  %24 = load i8, i8* %23, align 1, !range !2
  %25 = icmp eq i8 %22, %24
  br i1 %25, label %26, label %32

26:                                               ; preds = %20
  %27 = getelementptr inbounds %"class.payments::PaymentOptions", %"class.payments::PaymentOptions"* %0, i64 0, i32 4
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %"class.payments::PaymentOptions", %"class.payments::PaymentOptions"* %1, i64 0, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %28, %30
  br label %32

32:                                               ; preds = %26, %20, %14, %8, %2
  %33 = phi i1 [ false, %20 ], [ false, %14 ], [ false, %8 ], [ false, %2 ], [ %31, %26 ]
  ret i1 %33
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK8payments14PaymentOptionsneERKS0_(%"class.payments::PaymentOptions"* nocapture readonly, %"class.payments::PaymentOptions"* nocapture readonly dereferenceable(8)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.payments::PaymentOptions", %"class.payments::PaymentOptions"* %0, i64 0, i32 0
  %4 = load i8, i8* %3, align 4, !range !2
  %5 = getelementptr inbounds %"class.payments::PaymentOptions", %"class.payments::PaymentOptions"* %1, i64 0, i32 0
  %6 = load i8, i8* %5, align 4, !range !2
  %7 = icmp eq i8 %4, %6
  br i1 %7, label %8, label %32

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.payments::PaymentOptions", %"class.payments::PaymentOptions"* %0, i64 0, i32 1
  %10 = load i8, i8* %9, align 1, !range !2
  %11 = getelementptr inbounds %"class.payments::PaymentOptions", %"class.payments::PaymentOptions"* %1, i64 0, i32 1
  %12 = load i8, i8* %11, align 1, !range !2
  %13 = icmp eq i8 %10, %12
  br i1 %13, label %14, label %32

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"class.payments::PaymentOptions", %"class.payments::PaymentOptions"* %0, i64 0, i32 2
  %16 = load i8, i8* %15, align 2, !range !2
  %17 = getelementptr inbounds %"class.payments::PaymentOptions", %"class.payments::PaymentOptions"* %1, i64 0, i32 2
  %18 = load i8, i8* %17, align 2, !range !2
  %19 = icmp eq i8 %16, %18
  br i1 %19, label %20, label %32

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"class.payments::PaymentOptions", %"class.payments::PaymentOptions"* %0, i64 0, i32 3
  %22 = load i8, i8* %21, align 1, !range !2
  %23 = getelementptr inbounds %"class.payments::PaymentOptions", %"class.payments::PaymentOptions"* %1, i64 0, i32 3
  %24 = load i8, i8* %23, align 1, !range !2
  %25 = icmp eq i8 %22, %24
  br i1 %25, label %26, label %32

26:                                               ; preds = %20
  %27 = getelementptr inbounds %"class.payments::PaymentOptions", %"class.payments::PaymentOptions"* %0, i64 0, i32 4
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %"class.payments::PaymentOptions", %"class.payments::PaymentOptions"* %1, i64 0, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = icmp ne i32 %28, %30
  br label %32

32:                                               ; preds = %2, %8, %14, %20, %26
  %33 = phi i1 [ true, %20 ], [ true, %14 ], [ true, %8 ], [ true, %2 ], [ %31, %26 ]
  ret i1 %33
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN8payments14PaymentOptions19FromDictionaryValueERKN4base15DictionaryValueE(%"class.payments::PaymentOptions"*, %"class.base::DictionaryValue"* dereferenceable(32)) local_unnamed_addr #3 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = getelementptr inbounds %"class.payments::PaymentOptions", %"class.payments::PaymentOptions"* %0, i64 0, i32 0
  %5 = tail call zeroext i1 @_ZNK4base15DictionaryValue10GetBooleanENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPb(%"class.base::DictionaryValue"* %1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @_ZN8payments12_GLOBAL__N_131kPaymentOptionsRequestPayerNameE, i64 0, i64 0), i64 16, i8* %4) #7
  %6 = getelementptr inbounds %"class.payments::PaymentOptions", %"class.payments::PaymentOptions"* %0, i64 0, i32 1
  %7 = tail call zeroext i1 @_ZNK4base15DictionaryValue10GetBooleanENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPb(%"class.base::DictionaryValue"* %1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @_ZN8payments12_GLOBAL__N_132kPaymentOptionsRequestPayerEmailE, i64 0, i64 0), i64 17, i8* %6) #7
  %8 = getelementptr inbounds %"class.payments::PaymentOptions", %"class.payments::PaymentOptions"* %0, i64 0, i32 2
  %9 = tail call zeroext i1 @_ZNK4base15DictionaryValue10GetBooleanENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPb(%"class.base::DictionaryValue"* %1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @_ZN8payments12_GLOBAL__N_132kPaymentOptionsRequestPayerPhoneE, i64 0, i64 0), i64 17, i8* %8) #7
  %10 = getelementptr inbounds %"class.payments::PaymentOptions", %"class.payments::PaymentOptions"* %0, i64 0, i32 3
  %11 = tail call zeroext i1 @_ZNK4base15DictionaryValue10GetBooleanENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPb(%"class.base::DictionaryValue"* %1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZN8payments12_GLOBAL__N_130kPaymentOptionsRequestShippingE, i64 0, i64 0), i64 15, i8* %10) #7
  %12 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #7
  %13 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 0, i64 24, i1 false) #7
  %15 = call zeroext i1 @_ZNK4base15DictionaryValue9GetStringENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS2_12basic_stringIcS4_NS2_9allocatorIcEEEE(%"class.base::DictionaryValue"* %1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @_ZN8payments12_GLOBAL__N_127kPaymentOptionsShippingTypeE, i64 0, i64 0), i64 12, %"class.std::__1::basic_string"* nonnull %3) #7
  %16 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %17 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %16, i64 0, i32 1, i32 0
  %18 = load i8, i8* %17, align 1
  %19 = icmp slt i8 %18, 0
  %20 = load i64, i64* %14, align 8
  %21 = zext i8 %18 to i64
  %22 = select i1 %19, i64 %20, i64 %21
  %23 = icmp eq i64 %22, 8
  br i1 %23, label %24, label %33

24:                                               ; preds = %2
  %25 = call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* nonnull %3, i64 0, i64 -1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @_ZN8payments12_GLOBAL__N_135kPaymentOptionsShippingTypeDeliveryE, i64 0, i64 0), i64 8) #7
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %31, label %27

27:                                               ; preds = %24
  %28 = load i8, i8* %17, align 1
  %29 = load i64, i64* %14, align 8
  %30 = zext i8 %28 to i64
  br label %33

31:                                               ; preds = %24
  %32 = getelementptr inbounds %"class.payments::PaymentOptions", %"class.payments::PaymentOptions"* %0, i64 0, i32 4
  store i32 1, i32* %32, align 4
  br label %49

33:                                               ; preds = %27, %2
  %34 = phi i64 [ %30, %27 ], [ %21, %2 ]
  %35 = phi i64 [ %29, %27 ], [ %20, %2 ]
  %36 = phi i8 [ %28, %27 ], [ %18, %2 ]
  %37 = icmp slt i8 %36, 0
  %38 = select i1 %37, i64 %35, i64 %34
  %39 = icmp eq i64 %38, 6
  br i1 %39, label %42, label %40

40:                                               ; preds = %33
  %41 = getelementptr inbounds %"class.payments::PaymentOptions", %"class.payments::PaymentOptions"* %0, i64 0, i32 4
  br label %47

42:                                               ; preds = %33
  %43 = call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* nonnull %3, i64 0, i64 -1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @_ZN8payments12_GLOBAL__N_133kPaymentOptionsShippingTypePickupE, i64 0, i64 0), i64 6) #7
  %44 = icmp eq i32 %43, 0
  %45 = getelementptr inbounds %"class.payments::PaymentOptions", %"class.payments::PaymentOptions"* %0, i64 0, i32 4
  br i1 %44, label %46, label %47

46:                                               ; preds = %42
  store i32 2, i32* %45, align 4
  br label %49

47:                                               ; preds = %40, %42
  %48 = phi i32* [ %41, %40 ], [ %45, %42 ]
  store i32 0, i32* %48, align 4
  br label %49

49:                                               ; preds = %46, %47, %31
  %50 = load i8, i8* %17, align 1
  %51 = icmp slt i8 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %49
  %53 = load i8*, i8** %13, align 8
  call void @_ZdlPv(i8* %53) #8
  br label %54

54:                                               ; preds = %49, %52
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #7
  ret i1 true
}

declare zeroext i1 @_ZNK4base15DictionaryValue10GetBooleanENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPb(%"class.base::DictionaryValue"*, i8*, i64, i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

declare zeroext i1 @_ZNK4base15DictionaryValue9GetStringENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS2_12basic_stringIcS4_NS2_9allocatorIcEEEE(%"class.base::DictionaryValue"*, i8*, i64, %"class.std::__1::basic_string"*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

declare i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"*, i64, i64, i8*, i64) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
