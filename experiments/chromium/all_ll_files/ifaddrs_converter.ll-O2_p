; ModuleID = '../../third_party/webrtc/rtc_base/ifaddrs_converter.cc'
source_filename = "../../third_party/webrtc/rtc_base/ifaddrs_converter.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.rtc::IfAddrsConverter" = type { i32 (...)** }
%struct.ifaddrs = type { %struct.ifaddrs*, i8*, i32, %struct.sockaddr*, %struct.sockaddr*, %union.anon, i8* }
%struct.sockaddr = type { i16, [14 x i8] }
%union.anon = type { %struct.sockaddr* }
%"class.rtc::InterfaceAddress" = type { %"class.rtc::IPAddress.base", i32 }
%"class.rtc::IPAddress.base" = type <{ i32 (...)**, i32, %union.anon.0 }>
%union.anon.0 = type { %struct.in6_addr }
%struct.in6_addr = type { %union.anon.1 }
%union.anon.1 = type { [4 x i32] }
%"class.rtc::IPAddress" = type <{ i32 (...)**, i32, %union.anon.0, [4 x i8] }>
%struct.sockaddr_in = type { i16, i16, %struct.in_addr, [8 x i8] }
%struct.in_addr = type { i32 }
%struct.sockaddr_in6 = type { i16, i16, i32, %struct.in6_addr, i32 }

$_ZN3rtc9IPAddressD2Ev = comdat any

$_ZN3rtc16InterfaceAddressD0Ev = comdat any

$_ZTVN3rtc16InterfaceAddressE = comdat any

@_ZTVN3rtc16IfAddrsConverterE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.rtc::IfAddrsConverter"*)* @_ZN3rtc16IfAddrsConverterD2Ev to i8*), i8* bitcast (void (%"class.rtc::IfAddrsConverter"*)* @_ZN3rtc16IfAddrsConverterD0Ev to i8*), i8* bitcast (i1 (%"class.rtc::IfAddrsConverter"*, %struct.ifaddrs*, %"class.rtc::InterfaceAddress"*, %"class.rtc::IPAddress"*)* @_ZN3rtc16IfAddrsConverter25ConvertIfAddrsToIPAddressEPK7ifaddrsPNS_16InterfaceAddressEPNS_9IPAddressE to i8*), i8* bitcast (i1 (%"class.rtc::IfAddrsConverter"*, %struct.ifaddrs*, i32*)* @_ZN3rtc16IfAddrsConverter37ConvertNativeAttributesToIPAttributesEPK7ifaddrsPi to i8*)] }, align 8
@_ZTVN3rtc16InterfaceAddressE = linkonce_odr hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.rtc::IPAddress"*)* @_ZN3rtc9IPAddressD2Ev to i8*), i8* bitcast (void (%"class.rtc::InterfaceAddress"*)* @_ZN3rtc16InterfaceAddressD0Ev to i8*)] }, comdat, align 8

@_ZN3rtc16IfAddrsConverterC1Ev = hidden unnamed_addr alias void (%"class.rtc::IfAddrsConverter"*), void (%"class.rtc::IfAddrsConverter"*)* @_ZN3rtc16IfAddrsConverterC2Ev
@_ZN3rtc16IfAddrsConverterD1Ev = hidden unnamed_addr alias void (%"class.rtc::IfAddrsConverter"*), void (%"class.rtc::IfAddrsConverter"*)* @_ZN3rtc16IfAddrsConverterD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3rtc16IfAddrsConverterC2Ev(%"class.rtc::IfAddrsConverter"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.rtc::IfAddrsConverter", %"class.rtc::IfAddrsConverter"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3rtc16IfAddrsConverterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN3rtc16IfAddrsConverterD2Ev(%"class.rtc::IfAddrsConverter"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3rtc16IfAddrsConverterD0Ev(%"class.rtc::IfAddrsConverter"*) unnamed_addr #2 align 2 {
  %2 = bitcast %"class.rtc::IfAddrsConverter"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #9
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3rtc16IfAddrsConverter25ConvertIfAddrsToIPAddressEPK7ifaddrsPNS_16InterfaceAddressEPNS_9IPAddressE(%"class.rtc::IfAddrsConverter"*, %struct.ifaddrs*, %"class.rtc::InterfaceAddress"*, %"class.rtc::IPAddress"* nocapture) unnamed_addr #2 align 2 {
  %5 = alloca %"class.rtc::InterfaceAddress", align 8
  %6 = alloca i32, align 4
  %7 = alloca %"class.rtc::InterfaceAddress", align 8
  %8 = alloca [4 x i32], align 4
  %9 = getelementptr inbounds %struct.ifaddrs, %struct.ifaddrs* %1, i64 0, i32 3
  %10 = load %struct.sockaddr*, %struct.sockaddr** %9, align 8
  %11 = getelementptr inbounds %struct.sockaddr, %struct.sockaddr* %10, i64 0, i32 0
  %12 = load i16, i16* %11, align 2
  switch i16 %12, label %65 [
    i16 2, label %13
    i16 10, label %34
  ]

13:                                               ; preds = %4
  %14 = bitcast %"class.rtc::InterfaceAddress"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %14) #10
  %15 = getelementptr inbounds %struct.sockaddr, %struct.sockaddr* %10, i64 0, i32 1, i64 2
  %16 = bitcast i8* %15 to i32*
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.rtc::InterfaceAddress", %"class.rtc::InterfaceAddress"* %5, i64 0, i32 0, i32 0
  %19 = getelementptr inbounds %"class.rtc::InterfaceAddress", %"class.rtc::InterfaceAddress"* %5, i64 0, i32 0, i32 1
  store i32 2, i32* %19, align 8
  %20 = getelementptr inbounds %"class.rtc::InterfaceAddress", %"class.rtc::InterfaceAddress"* %5, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i64 0
  store i32 %17, i32* %20, align 4
  %21 = getelementptr inbounds %"class.rtc::InterfaceAddress", %"class.rtc::InterfaceAddress"* %5, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i64 1
  %22 = bitcast i32* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %22, i8 0, i64 12, i1 false)
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3rtc16InterfaceAddressE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %18, align 8
  %23 = getelementptr inbounds %"class.rtc::InterfaceAddress", %"class.rtc::InterfaceAddress"* %5, i64 0, i32 1
  store i32 0, i32* %23, align 4
  %24 = call dereferenceable(32) %"class.rtc::InterfaceAddress"* @_ZN3rtc16InterfaceAddressaSERKS0_(%"class.rtc::InterfaceAddress"* %2, %"class.rtc::InterfaceAddress"* nonnull dereferenceable(32) %5) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %14) #10
  %25 = getelementptr inbounds %struct.ifaddrs, %struct.ifaddrs* %1, i64 0, i32 4
  %26 = bitcast %struct.sockaddr** %25 to %struct.sockaddr_in**
  %27 = load %struct.sockaddr_in*, %struct.sockaddr_in** %26, align 8
  %28 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i64 0, i32 2, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %3, i64 0, i32 1
  store i32 2, i32* %30, align 8
  %31 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i64 0
  store i32 %29, i32* %31, align 4
  %32 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i64 1
  %33 = bitcast i32* %32 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %33, i8 0, i64 12, i1 false)
  br label %65

34:                                               ; preds = %4
  %35 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %35) #10
  store i32 0, i32* %6, align 4
  %36 = bitcast %"class.rtc::IfAddrsConverter"* %0 to i1 (%"class.rtc::IfAddrsConverter"*, %struct.ifaddrs*, i32*)***
  %37 = load i1 (%"class.rtc::IfAddrsConverter"*, %struct.ifaddrs*, i32*)**, i1 (%"class.rtc::IfAddrsConverter"*, %struct.ifaddrs*, i32*)*** %36, align 8
  %38 = getelementptr inbounds i1 (%"class.rtc::IfAddrsConverter"*, %struct.ifaddrs*, i32*)*, i1 (%"class.rtc::IfAddrsConverter"*, %struct.ifaddrs*, i32*)** %37, i64 3
  %39 = load i1 (%"class.rtc::IfAddrsConverter"*, %struct.ifaddrs*, i32*)*, i1 (%"class.rtc::IfAddrsConverter"*, %struct.ifaddrs*, i32*)** %38, align 8
  %40 = call zeroext i1 %39(%"class.rtc::IfAddrsConverter"* %0, %struct.ifaddrs* %1, i32* nonnull %6) #10
  br i1 %40, label %41, label %63

41:                                               ; preds = %34
  %42 = bitcast %"class.rtc::InterfaceAddress"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %42) #10
  %43 = bitcast %struct.sockaddr** %9 to %struct.sockaddr_in6**
  %44 = load %struct.sockaddr_in6*, %struct.sockaddr_in6** %43, align 8
  %45 = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %44, i64 0, i32 3
  %46 = load i32, i32* %6, align 4
  %47 = getelementptr inbounds %"class.rtc::InterfaceAddress", %"class.rtc::InterfaceAddress"* %7, i64 0, i32 0, i32 0
  %48 = getelementptr inbounds %"class.rtc::InterfaceAddress", %"class.rtc::InterfaceAddress"* %7, i64 0, i32 0, i32 1
  store i32 10, i32* %48, align 8
  %49 = getelementptr inbounds %"class.rtc::InterfaceAddress", %"class.rtc::InterfaceAddress"* %7, i64 0, i32 0, i32 2, i32 0
  %50 = bitcast %struct.in6_addr* %49 to i8*
  %51 = bitcast %struct.in6_addr* %45 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %50, i8* align 4 %51, i64 16, i1 false) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3rtc16InterfaceAddressE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %47, align 8
  %52 = getelementptr inbounds %"class.rtc::InterfaceAddress", %"class.rtc::InterfaceAddress"* %7, i64 0, i32 1
  store i32 %46, i32* %52, align 4
  %53 = call dereferenceable(32) %"class.rtc::InterfaceAddress"* @_ZN3rtc16InterfaceAddressaSERKS0_(%"class.rtc::InterfaceAddress"* %2, %"class.rtc::InterfaceAddress"* nonnull dereferenceable(32) %7) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %42) #10
  %54 = bitcast [4 x i32]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %54)
  %55 = getelementptr inbounds %struct.ifaddrs, %struct.ifaddrs* %1, i64 0, i32 4
  %56 = bitcast %struct.sockaddr** %55 to %struct.sockaddr_in6**
  %57 = load %struct.sockaddr_in6*, %struct.sockaddr_in6** %56, align 8
  %58 = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %57, i64 0, i32 3
  %59 = bitcast %struct.in6_addr* %58 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %54, i8* align 4 %59, i64 16, i1 false)
  %60 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %3, i64 0, i32 1
  store i32 10, i32* %60, align 8
  %61 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %3, i64 0, i32 2
  %62 = bitcast %union.anon.0* %61 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %62, i8* nonnull align 4 %54, i64 16, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %54)
  br label %63

63:                                               ; preds = %34, %41
  %64 = phi i1 [ true, %41 ], [ false, %34 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %35) #10
  br label %65

65:                                               ; preds = %4, %63, %13
  %66 = phi i1 [ %64, %63 ], [ true, %13 ], [ false, %4 ]
  ret i1 %66
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

declare dereferenceable(32) %"class.rtc::InterfaceAddress"* @_ZN3rtc16InterfaceAddressaSERKS0_(%"class.rtc::InterfaceAddress"*, %"class.rtc::InterfaceAddress"* dereferenceable(32)) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3rtc9IPAddressD2Ev(%"class.rtc::IPAddress"*) unnamed_addr #2 comdat align 2 {
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden zeroext i1 @_ZN3rtc16IfAddrsConverter37ConvertNativeAttributesToIPAttributesEPK7ifaddrsPi(%"class.rtc::IfAddrsConverter"* nocapture readnone, %struct.ifaddrs* nocapture readnone, i32* nocapture) unnamed_addr #0 align 2 {
  store i32 0, i32* %2, align 4
  ret i1 true
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden noalias nonnull %"class.rtc::IfAddrsConverter"* @_ZN3rtc22CreateIfAddrsConverterEv() local_unnamed_addr #6 {
  %1 = tail call i8* @_Znwm(i64 8) #9
  %2 = bitcast i8* %1 to %"class.rtc::IfAddrsConverter"*
  %3 = bitcast i8* %1 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3rtc16IfAddrsConverterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  ret %"class.rtc::IfAddrsConverter"* %2
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3rtc16InterfaceAddressD0Ev(%"class.rtc::InterfaceAddress"*) unnamed_addr #8 comdat align 2 {
  %2 = bitcast %"class.rtc::InterfaceAddress"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #9
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { builtin nounwind }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
