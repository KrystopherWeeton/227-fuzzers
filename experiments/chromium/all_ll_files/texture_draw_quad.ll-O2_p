; ModuleID = '../../components/viz/common/quads/texture_draw_quad.cc'
source_filename = "../../components/viz/common/quads/texture_draw_quad.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.viz::TextureDrawQuad" = type { %"class.viz::DrawQuad.base", %"class.gfx::PointF", %"class.gfx::PointF", i32, [4 x float], i8, i32, %"struct.viz::TextureDrawQuad::OverlayResources" }
%"class.viz::DrawQuad.base" = type <{ i32 (...)**, i32, %"class.gfx::Rect", %"class.gfx::Rect", i8, [3 x i8], %"class.viz::SharedQuadState"*, %"struct.viz::DrawQuad::Resources" }>
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.viz::SharedQuadState" = type <{ %"class.gfx::Transform", %"class.gfx::Rect", %"class.gfx::Rect", %"class.gfx::MaskFilterInfo", %"class.absl::optional", i8, [3 x i8], float, i32, i32, i8, [3 x i8], %"class.absl::optional.0", float, i8, [3 x i8] }>
%"class.gfx::Transform" = type { %class.SkMatrix44 }
%class.SkMatrix44 = type <{ [4 x [4 x float]], i8, [3 x i8] }>
%"class.gfx::MaskFilterInfo" = type { %"class.gfx::RRectF" }
%"class.gfx::RRectF" = type { %class.SkRRect }
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%struct.SkRect = type { float, float, float, float }
%struct.SkPoint = type { float, float }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.gfx::Rect" }
%"class.absl::optional.0" = type { %"class.absl::optional_internal::optional_data.1" }
%"class.absl::optional_internal::optional_data.1" = type { %"class.absl::optional_internal::optional_data_base.2" }
%"class.absl::optional_internal::optional_data_base.2" = type { %"class.absl::optional_internal::optional_data_dtor_base.3" }
%"class.absl::optional_internal::optional_data_dtor_base.3" = type { i8, %union.anon.4 }
%union.anon.4 = type { i64 }
%"struct.viz::DrawQuad::Resources" = type { i32, [4 x %"class.util::IdType"] }
%"class.util::IdType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { i32 }
%"class.gfx::PointF" = type { float, float }
%"struct.viz::TextureDrawQuad::OverlayResources" = type { %"class.gfx::Size" }
%"class.viz::DrawQuad" = type <{ i32 (...)**, i32, %"class.gfx::Rect", %"class.gfx::Rect", i8, [3 x i8], %"class.viz::SharedQuadState"*, %"struct.viz::DrawQuad::Resources", [4 x i8] }>
%"class.base::trace_event::TracedValue" = type { %"class.base::trace_event::ConvertableToTraceFormat", %"class.std::__1::unique_ptr" }
%"class.base::trace_event::ConvertableToTraceFormat" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::trace_event::TracedValue::Writer"* }
%"class.base::trace_event::TracedValue::Writer" = type { i32 (...)** }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.8 }
%union.anon.8 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

$_ZN3viz15TextureDrawQuadD0Ev = comdat any

@_ZTVN3viz15TextureDrawQuadE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.viz::DrawQuad"*)* @_ZN3viz8DrawQuadD2Ev to i8*), i8* bitcast (void (%"class.viz::TextureDrawQuad"*)* @_ZN3viz15TextureDrawQuadD0Ev to i8*), i8* bitcast (void (%"class.viz::TextureDrawQuad"*, %"class.base::trace_event::TracedValue"*)* @_ZNK3viz15TextureDrawQuad11ExtendValueEPN4base11trace_event11TracedValueE to i8*)] }, align 8
@.str = private unnamed_addr constant [12 x i8] c"resource_id\00", align 1
@.str.1 = private unnamed_addr constant [20 x i8] c"premultiplied_alpha\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"uv_top_left\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"uv_bottom_right\00", align 1
@.str.4 = private unnamed_addr constant [17 x i8] c"background_color\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"vertex_opacity\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"y_flipped\00", align 1
@.str.7 = private unnamed_addr constant [17 x i8] c"nearest_neighbor\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"is_video_frame\00", align 1
@.str.9 = private unnamed_addr constant [21 x i8] c"protected_video_type\00", align 1

@_ZN3viz15TextureDrawQuadC1Ev = hidden unnamed_addr alias void (%"class.viz::TextureDrawQuad"*), void (%"class.viz::TextureDrawQuad"*)* @_ZN3viz15TextureDrawQuadC2Ev
@_ZN3viz15TextureDrawQuadC1ERKS0_ = hidden unnamed_addr alias void (%"class.viz::TextureDrawQuad"*, %"class.viz::TextureDrawQuad"*), void (%"class.viz::TextureDrawQuad"*, %"class.viz::TextureDrawQuad"*)* @_ZN3viz15TextureDrawQuadC2ERKS0_
@_ZN3viz15TextureDrawQuad16OverlayResourcesC1Ev = hidden unnamed_addr alias void (%"struct.viz::TextureDrawQuad::OverlayResources"*), void (%"struct.viz::TextureDrawQuad::OverlayResources"*)* @_ZN3viz15TextureDrawQuad16OverlayResourcesC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz15TextureDrawQuadC2Ev(%"class.viz::TextureDrawQuad"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.viz::TextureDrawQuad"* %0 to %"class.viz::DrawQuad"*
  tail call void @_ZN3viz8DrawQuadC2Ev(%"class.viz::DrawQuad"* %2) #8
  %3 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN3viz15TextureDrawQuadE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 1, i32 0
  %5 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 5
  %6 = bitcast float* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %6, i8 0, i64 36, i1 false)
  %7 = load i8, i8* %5, align 8
  %8 = and i8 %7, -128
  store i8 %8, i8* %5, align 8
  %9 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 6
  store i32 0, i32* %9, align 4
  %10 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 7, i32 0, i32 0
  store i32 0, i32* %10, align 4
  %11 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 7, i32 0, i32 1
  store i32 0, i32* %11, align 4
  ret void
}

declare void @_ZN3viz8DrawQuadC2Ev(%"class.viz::DrawQuad"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz15TextureDrawQuadC2ERKS0_(%"class.viz::TextureDrawQuad"*, %"class.viz::TextureDrawQuad"* dereferenceable(128)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.viz::TextureDrawQuad"* %0 to %"class.viz::DrawQuad"*
  %4 = bitcast %"class.viz::TextureDrawQuad"* %1 to %"class.viz::DrawQuad"*
  tail call void @_ZN3viz8DrawQuadC2ERKS0_(%"class.viz::DrawQuad"* %3, %"class.viz::DrawQuad"* dereferenceable(80) %4) #8
  %5 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN3viz15TextureDrawQuadE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %1, i64 0, i32 1
  %8 = bitcast %"class.gfx::PointF"* %6 to i8*
  %9 = bitcast %"class.gfx::PointF"* %7 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %8, i8* align 4 %9, i64 52, i1 false)
  ret void
}

declare void @_ZN3viz8DrawQuadC2ERKS0_(%"class.viz::DrawQuad"*, %"class.viz::DrawQuad"* dereferenceable(80)) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz15TextureDrawQuad6SetNewEPKNS_15SharedQuadStateERKN3gfx4RectES7_bN4util6IdTypeINS_20ResourceIdTypeMarkerEjLj0ELj1EEEbRKNS4_6PointFESE_jPKfbbbNS4_18ProtectedVideoTypeE(%"class.viz::TextureDrawQuad"*, %"class.viz::SharedQuadState"*, %"class.gfx::Rect"* dereferenceable(16), %"class.gfx::Rect"* dereferenceable(16), i1 zeroext, i32, i1 zeroext, %"class.gfx::PointF"* nocapture readonly dereferenceable(8), %"class.gfx::PointF"* nocapture readonly dereferenceable(8), i32, float* nocapture readonly, i1 zeroext, i1 zeroext, i1 zeroext, i32) local_unnamed_addr #0 align 2 {
  %16 = zext i1 %6 to i8
  %17 = zext i1 %11 to i8
  %18 = zext i1 %12 to i8
  %19 = zext i1 %13 to i8
  br i1 %4, label %35, label %20

20:                                               ; preds = %15
  %21 = load float, float* %10, align 4
  %22 = fcmp une float %21, 1.000000e+00
  br i1 %22, label %35, label %23

23:                                               ; preds = %20
  %24 = getelementptr inbounds float, float* %10, i64 1
  %25 = load float, float* %24, align 4
  %26 = fcmp une float %25, 1.000000e+00
  br i1 %26, label %35, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds float, float* %10, i64 2
  %29 = load float, float* %28, align 4
  %30 = fcmp une float %29, 1.000000e+00
  br i1 %30, label %35, label %31

31:                                               ; preds = %27
  %32 = getelementptr inbounds float, float* %10, i64 3
  %33 = load float, float* %32, align 4
  %34 = fcmp une float %33, 1.000000e+00
  br label %35

35:                                               ; preds = %31, %27, %23, %20, %15
  %36 = phi i1 [ true, %27 ], [ true, %23 ], [ true, %20 ], [ true, %15 ], [ %34, %31 ]
  %37 = bitcast %"class.viz::TextureDrawQuad"* %0 to %"class.viz::DrawQuad"*
  tail call void @_ZN3viz8DrawQuad6SetAllEPKNS_15SharedQuadStateENS0_8MaterialERKN3gfx4RectES8_b(%"class.viz::DrawQuad"* %37, %"class.viz::SharedQuadState"* %1, i32 8, %"class.gfx::Rect"* dereferenceable(16) %2, %"class.gfx::Rect"* dereferenceable(16) %3, i1 zeroext %36) #8
  %38 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 0, i32 7, i32 1, i64 0, i32 0, i32 0
  store i32 %5, i32* %38, align 4
  %39 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 0, i32 7, i32 0
  store i32 1, i32* %39, align 8
  %40 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 5
  %41 = load i8, i8* %40, align 8
  %42 = shl nuw nsw i8 %16, 2
  %43 = and i8 %41, -5
  %44 = or i8 %43, %42
  store i8 %44, i8* %40, align 8
  %45 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 1
  %46 = bitcast %"class.gfx::PointF"* %7 to i64*
  %47 = bitcast %"class.gfx::PointF"* %45 to i64*
  %48 = load i64, i64* %46, align 4
  store i64 %48, i64* %47, align 4
  %49 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 2
  %50 = bitcast %"class.gfx::PointF"* %8 to i64*
  %51 = bitcast %"class.gfx::PointF"* %49 to i64*
  %52 = load i64, i64* %50, align 4
  store i64 %52, i64* %51, align 4
  %53 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 3
  store i32 %9, i32* %53, align 4
  %54 = bitcast float* %10 to i32*
  %55 = load i32, i32* %54, align 4
  %56 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 4
  %57 = bitcast [4 x float]* %56 to i32*
  store i32 %55, i32* %57, align 8
  %58 = getelementptr inbounds float, float* %10, i64 1
  %59 = bitcast float* %58 to i32*
  %60 = load i32, i32* %59, align 4
  %61 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 4, i64 1
  %62 = bitcast float* %61 to i32*
  store i32 %60, i32* %62, align 4
  %63 = getelementptr inbounds float, float* %10, i64 2
  %64 = bitcast float* %63 to i32*
  %65 = load i32, i32* %64, align 4
  %66 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 4, i64 2
  %67 = bitcast float* %66 to i32*
  store i32 %65, i32* %67, align 8
  %68 = getelementptr inbounds float, float* %10, i64 3
  %69 = bitcast float* %68 to i32*
  %70 = load i32, i32* %69, align 4
  %71 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 4, i64 3
  %72 = bitcast float* %71 to i32*
  store i32 %70, i32* %72, align 4
  %73 = and i8 %44, -108
  %74 = shl nuw nsw i8 %18, 1
  %75 = shl nuw nsw i8 %19, 3
  %76 = trunc i32 %14 to i8
  %77 = shl i8 %76, 5
  %78 = and i8 %77, 96
  %79 = or i8 %74, %17
  %80 = or i8 %79, %75
  %81 = or i8 %80, %78
  %82 = or i8 %81, %73
  store i8 %82, i8* %40, align 8
  ret void
}

declare void @_ZN3viz8DrawQuad6SetAllEPKNS_15SharedQuadStateENS0_8MaterialERKN3gfx4RectES8_b(%"class.viz::DrawQuad"*, %"class.viz::SharedQuadState"*, i32, %"class.gfx::Rect"* dereferenceable(16), %"class.gfx::Rect"* dereferenceable(16), i1 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz15TextureDrawQuad6SetAllEPKNS_15SharedQuadStateERKN3gfx4RectES7_bN4util6IdTypeINS_20ResourceIdTypeMarkerEjLj0ELj1EEENS4_4SizeEbRKNS4_6PointFESF_jPKfbbbNS4_18ProtectedVideoTypeE(%"class.viz::TextureDrawQuad"*, %"class.viz::SharedQuadState"*, %"class.gfx::Rect"* dereferenceable(16), %"class.gfx::Rect"* dereferenceable(16), i1 zeroext, i32, i64, i1 zeroext, %"class.gfx::PointF"* nocapture readonly dereferenceable(8), %"class.gfx::PointF"* nocapture readonly dereferenceable(8), i32, float* nocapture readonly, i1 zeroext, i1 zeroext, i1 zeroext, i32) local_unnamed_addr #0 align 2 {
  %17 = zext i1 %7 to i8
  %18 = zext i1 %12 to i8
  %19 = zext i1 %13 to i8
  %20 = zext i1 %14 to i8
  %21 = bitcast %"class.viz::TextureDrawQuad"* %0 to %"class.viz::DrawQuad"*
  tail call void @_ZN3viz8DrawQuad6SetAllEPKNS_15SharedQuadStateENS0_8MaterialERKN3gfx4RectES8_b(%"class.viz::DrawQuad"* %21, %"class.viz::SharedQuadState"* %1, i32 8, %"class.gfx::Rect"* dereferenceable(16) %2, %"class.gfx::Rect"* dereferenceable(16) %3, i1 zeroext %4) #8
  %22 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 0, i32 7, i32 1, i64 0, i32 0, i32 0
  store i32 %5, i32* %22, align 4
  %23 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 7
  %24 = bitcast %"struct.viz::TextureDrawQuad::OverlayResources"* %23 to i64*
  store i64 %6, i64* %24, align 8
  %25 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 0, i32 7, i32 0
  store i32 1, i32* %25, align 8
  %26 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 5
  %27 = load i8, i8* %26, align 8
  %28 = shl nuw nsw i8 %17, 2
  %29 = and i8 %27, -5
  %30 = or i8 %29, %28
  store i8 %30, i8* %26, align 8
  %31 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 1
  %32 = bitcast %"class.gfx::PointF"* %8 to i64*
  %33 = bitcast %"class.gfx::PointF"* %31 to i64*
  %34 = load i64, i64* %32, align 4
  store i64 %34, i64* %33, align 4
  %35 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 2
  %36 = bitcast %"class.gfx::PointF"* %9 to i64*
  %37 = bitcast %"class.gfx::PointF"* %35 to i64*
  %38 = load i64, i64* %36, align 4
  store i64 %38, i64* %37, align 4
  %39 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 3
  store i32 %10, i32* %39, align 4
  %40 = bitcast float* %11 to i32*
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 4
  %43 = bitcast [4 x float]* %42 to i32*
  store i32 %41, i32* %43, align 8
  %44 = getelementptr inbounds float, float* %11, i64 1
  %45 = bitcast float* %44 to i32*
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 4, i64 1
  %48 = bitcast float* %47 to i32*
  store i32 %46, i32* %48, align 4
  %49 = getelementptr inbounds float, float* %11, i64 2
  %50 = bitcast float* %49 to i32*
  %51 = load i32, i32* %50, align 4
  %52 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 4, i64 2
  %53 = bitcast float* %52 to i32*
  store i32 %51, i32* %53, align 8
  %54 = getelementptr inbounds float, float* %11, i64 3
  %55 = bitcast float* %54 to i32*
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 4, i64 3
  %58 = bitcast float* %57 to i32*
  store i32 %56, i32* %58, align 4
  %59 = and i8 %30, -108
  %60 = shl nuw nsw i8 %19, 1
  %61 = shl nuw nsw i8 %20, 3
  %62 = trunc i32 %15 to i8
  %63 = shl i8 %62, 5
  %64 = and i8 %63, 96
  %65 = or i8 %60, %18
  %66 = or i8 %65, %61
  %67 = or i8 %66, %64
  %68 = or i8 %67, %59
  store i8 %68, i8* %26, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %"class.viz::TextureDrawQuad"* @_ZN3viz15TextureDrawQuad12MaterialCastEPKNS_8DrawQuadE(%"class.viz::DrawQuad"* readnone) local_unnamed_addr #3 align 2 {
  %2 = bitcast %"class.viz::DrawQuad"* %0 to %"class.viz::TextureDrawQuad"*
  ret %"class.viz::TextureDrawQuad"* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3viz15TextureDrawQuad11ExtendValueEPN4base11trace_event11TracedValueE(%"class.viz::TextureDrawQuad"*, %"class.base::trace_event::TracedValue"*) unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 0, i32 7, i32 1, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 4
  tail call void @_ZN4base11trace_event11TracedValue10SetIntegerEPKci(%"class.base::trace_event::TracedValue"* %1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 %5) #8
  %6 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 5
  %7 = load i8, i8* %6, align 8
  %8 = and i8 %7, 4
  %9 = icmp ne i8 %8, 0
  tail call void @_ZN4base11trace_event11TracedValue10SetBooleanEPKcb(%"class.base::trace_event::TracedValue"* %1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i1 zeroext %9) #8
  %10 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 1
  tail call void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx6PointFEPN4base11trace_event11TracedValueE(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), %"class.gfx::PointF"* dereferenceable(8) %10, %"class.base::trace_event::TracedValue"* %1) #8
  %11 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 2
  tail call void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx6PointFEPN4base11trace_event11TracedValueE(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0), %"class.gfx::PointF"* dereferenceable(8) %11, %"class.base::trace_event::TracedValue"* %1) #8
  %12 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #8
  %13 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 3
  %14 = load i32, i32* %13, align 4
  call void @_ZN11color_utils19SkColorToRgbaStringEj(%"class.std::__1::basic_string"* nonnull sret %3, i32 %14) #8
  %15 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %16 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %15, i64 0, i32 1, i32 0
  %17 = load i8, i8* %16, align 1
  %18 = icmp slt i8 %17, 0
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = select i1 %18, i8* %20, i8* %12
  %22 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = zext i8 %17 to i64
  %25 = select i1 %18, i64 %23, i64 %24
  call void @_ZN4base11trace_event11TracedValue9SetStringEPKcNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.base::trace_event::TracedValue"* %1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i64 0, i64 0), i8* %21, i64 %25) #8
  %26 = load i8, i8* %16, align 1
  %27 = icmp slt i8 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %2
  %29 = load i8*, i8** %19, align 8
  call void @_ZdlPv(i8* %29) #9
  br label %30

30:                                               ; preds = %2, %28
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #8
  call void @_ZN4base11trace_event11TracedValue10BeginArrayEPKc(%"class.base::trace_event::TracedValue"* %1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0)) #8
  %31 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 4, i64 0
  %32 = load float, float* %31, align 4
  %33 = fpext float %32 to double
  call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %1, double %33) #8
  %34 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 4, i64 1
  %35 = load float, float* %34, align 4
  %36 = fpext float %35 to double
  call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %1, double %36) #8
  %37 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 4, i64 2
  %38 = load float, float* %37, align 4
  %39 = fpext float %38 to double
  call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %1, double %39) #8
  %40 = getelementptr inbounds %"class.viz::TextureDrawQuad", %"class.viz::TextureDrawQuad"* %0, i64 0, i32 4, i64 3
  %41 = load float, float* %40, align 4
  %42 = fpext float %41 to double
  call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %1, double %42) #8
  call void @_ZN4base11trace_event11TracedValue8EndArrayEv(%"class.base::trace_event::TracedValue"* %1) #8
  %43 = load i8, i8* %6, align 8
  %44 = and i8 %43, 1
  %45 = icmp ne i8 %44, 0
  call void @_ZN4base11trace_event11TracedValue10SetBooleanEPKcb(%"class.base::trace_event::TracedValue"* %1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i64 0, i64 0), i1 zeroext %45) #8
  %46 = load i8, i8* %6, align 8
  %47 = and i8 %46, 2
  %48 = icmp ne i8 %47, 0
  call void @_ZN4base11trace_event11TracedValue10SetBooleanEPKcb(%"class.base::trace_event::TracedValue"* %1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.7, i64 0, i64 0), i1 zeroext %48) #8
  %49 = load i8, i8* %6, align 8
  %50 = and i8 %49, 16
  %51 = icmp ne i8 %50, 0
  call void @_ZN4base11trace_event11TracedValue10SetBooleanEPKcb(%"class.base::trace_event::TracedValue"* %1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0), i1 zeroext %51) #8
  %52 = load i8, i8* %6, align 8
  %53 = lshr i8 %52, 5
  %54 = and i8 %53, 3
  %55 = zext i8 %54 to i32
  call void @_ZN4base11trace_event11TracedValue10SetIntegerEPKci(%"class.base::trace_event::TracedValue"* %1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.9, i64 0, i64 0), i32 %55) #8
  ret void
}

declare void @_ZN4base11trace_event11TracedValue10SetIntegerEPKci(%"class.base::trace_event::TracedValue"*, i8*, i32) local_unnamed_addr #1

declare void @_ZN4base11trace_event11TracedValue10SetBooleanEPKcb(%"class.base::trace_event::TracedValue"*, i8*, i1 zeroext) local_unnamed_addr #1

declare void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx6PointFEPN4base11trace_event11TracedValueE(i8*, %"class.gfx::PointF"* dereferenceable(8), %"class.base::trace_event::TracedValue"*) local_unnamed_addr #1

declare void @_ZN4base11trace_event11TracedValue9SetStringEPKcNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.base::trace_event::TracedValue"*, i8*, i8*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN11color_utils19SkColorToRgbaStringEj(%"class.std::__1::basic_string"* sret, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN4base11trace_event11TracedValue10BeginArrayEPKc(%"class.base::trace_event::TracedValue"*, i8*) local_unnamed_addr #1

declare void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"*, double) local_unnamed_addr #1

declare void @_ZN4base11trace_event11TracedValue8EndArrayEv(%"class.base::trace_event::TracedValue"*) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3viz15TextureDrawQuad16OverlayResourcesC2Ev(%"struct.viz::TextureDrawQuad::OverlayResources"* nocapture) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"struct.viz::TextureDrawQuad::OverlayResources", %"struct.viz::TextureDrawQuad::OverlayResources"* %0, i64 0, i32 0, i32 0
  store i32 0, i32* %2, align 4
  %3 = getelementptr inbounds %"struct.viz::TextureDrawQuad::OverlayResources", %"struct.viz::TextureDrawQuad::OverlayResources"* %0, i64 0, i32 0, i32 1
  store i32 0, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind
declare void @_ZN3viz8DrawQuadD2Ev(%"class.viz::DrawQuad"*) unnamed_addr #5

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3viz15TextureDrawQuadD0Ev(%"class.viz::TextureDrawQuad"*) unnamed_addr #6 comdat align 2 {
  %2 = bitcast %"class.viz::TextureDrawQuad"* %0 to %"class.viz::DrawQuad"*
  tail call void @_ZN3viz8DrawQuadD2Ev(%"class.viz::DrawQuad"* %2) #8
  %3 = bitcast %"class.viz::TextureDrawQuad"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #9
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
