; ModuleID = '../../third_party/blink/renderer/core/xml/xslt_unicode_sort.cc'
source_filename = "../../third_party/blink/renderer/core/xml/xslt_unicode_sort.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StaticSingleton" = type { %"class.WTF::StaticSingleton<std::__1::unique_ptr<blink::(anonymous namespace)::UCollatorHolder, std::__1::default_delete<blink::(anonymous namespace)::UCollatorHolder> > >::InstanceStorage" }
%"class.WTF::StaticSingleton<std::__1::unique_ptr<blink::(anonymous namespace)::UCollatorHolder, std::__1::default_delete<blink::(anonymous namespace)::UCollatorHolder> > >::InstanceStorage" = type { [8 x i8] }
%struct._xsltTransformContext = type { %struct._xsltStylesheet*, i32, %struct._xsltTemplate*, i32, i32, %struct._xsltTemplate**, %struct._xsltStackElem*, i32, i32, %struct._xsltStackElem**, i32, %struct._xmlHashTable*, %struct._xmlHashTable*, %struct._xmlHashTable*, i8*, i8*, %struct._xsltDocument*, %struct._xsltDocument*, %struct._xmlNode*, %struct._xmlNodeSet*, %struct._xmlDoc*, %struct._xmlNode*, %struct._xmlXPathContext*, i32, %struct._xmlHashTable*, %struct._xmlNode*, i32, i8*, i32, i64, i32, i32, i64*, i8*, i32, i32, %struct._xsltRuntimeExtra*, %struct._xsltDocument*, i8*, void (i8*, i8*, ...)*, i8*, {}*, %struct._xmlDoc*, %struct._xmlDoc*, i32, i8*, i32, i32, i32, i64*, i32, %struct._xmlDict*, %struct._xmlDoc*, i32, i32, i32, %struct._xsltTemplate*, %struct._xmlNode*, %struct._xmlDoc*, %struct._xsltTransformCache*, i8*, %struct._xmlDoc*, %struct._xmlDoc*, i32, i32, i32, i32, i64, i64 }
%struct._xsltStylesheet = type { %struct._xsltStylesheet*, %struct._xsltStylesheet*, %struct._xsltStylesheet*, %struct._xsltDocument*, %struct._xmlDoc*, %struct._xmlHashTable*, i32, %struct._xmlHashTable*, %struct._xsltStackElem*, %struct._xsltTemplate*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._xmlHashTable*, %struct._xmlHashTable*, %struct._xmlHashTable*, i8*, i8*, i8*, i8*, i8*, i8*, i32, %struct._xsltDecimalFormat*, i32, i8*, i8*, i32, i8*, %struct._xsltElemPreComp*, i32, i32, i8*, i8**, i32, i32, i8*, %struct._xmlHashTable*, i32, %struct._xsltDocument*, %struct._xmlDict*, i8*, i8*, i32, i32, i32, %struct._xsltStylesheet*, i32, %struct._xmlHashTable*, %struct._xmlXPathContext* }
%struct._xsltDecimalFormat = type { %struct._xsltDecimalFormat*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8* }
%struct._xsltElemPreComp = type { %struct._xsltElemPreComp*, i32, void (%struct._xsltTransformContext*, %struct._xmlNode*, %struct._xmlNode*, %struct._xsltElemPreComp*)*, %struct._xmlNode*, void (%struct._xsltElemPreComp*)* }
%struct._xsltStackElem = type { %struct._xsltStackElem*, %struct._xsltStylePreComp*, i32, i8*, i8*, i8*, %struct._xmlNode*, %struct._xmlXPathObject*, %struct._xmlDoc*, i32, %struct._xsltTransformContext*, i32 }
%struct._xsltStylePreComp = type { %struct._xsltElemPreComp*, i32, void (%struct._xsltTransformContext*, %struct._xmlNode*, %struct._xmlNode*, %struct._xsltElemPreComp*)*, %struct._xmlNode*, i8*, i32, i32, i8*, i32, i32, i8*, i32, i8*, i8*, i32, i8*, i32, i32, i8*, i32, i8*, i32, i8*, i8*, i8*, %struct._xsltTemplate*, i8*, i32, i8*, i32, %struct._xsltNumberData, %struct._xmlXPathCompExpr*, %struct._xmlNs**, i32 }
%struct._xsltNumberData = type { i8*, i8*, i8*, i8*, i8*, i32, i32, i32, i32, %struct._xmlDoc*, %struct._xmlNode*, %struct._xsltCompMatch*, %struct._xsltCompMatch* }
%struct._xsltCompMatch = type opaque
%struct._xmlXPathCompExpr = type opaque
%struct._xmlNs = type { %struct._xmlNs*, i32, i8*, i8*, i8*, %struct._xmlDoc* }
%struct._xmlXPathObject = type { i32, %struct._xmlNodeSet*, i32, double, i8*, i8*, i32, i8*, i32 }
%struct._xmlNodeSet = type { i32, i32, %struct._xmlNode** }
%struct._xmlXPathContext = type { %struct._xmlDoc*, %struct._xmlNode*, i32, i32, %struct._xmlHashTable*, i32, i32, %struct._xmlXPathType*, i32, i32, %struct._xmlHashTable*, i32, i32, %struct._xmlXPathAxis*, %struct._xmlNs**, i32, i8*, i32, i32, i32, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlHashTable*, %struct._xmlXPathObject* (i8*, i8*, i8*)*, i8*, i8*, i8*, i8*, void (%struct._xmlXPathParserContext*, i32)* (i8*, i8*, i8*)*, i8*, %struct._xmlNs**, i32, i8*, void (i8*, %struct._xmlError*)*, %struct._xmlError, %struct._xmlNode*, %struct._xmlDict*, i32, i8*, i64, i64, i32 }
%struct._xmlXPathType = type { i8*, i32 (%struct._xmlXPathObject*, i32)* }
%struct._xmlXPathAxis = type { i8*, %struct._xmlXPathObject* (%struct._xmlXPathParserContext*, %struct._xmlXPathObject*)* }
%struct._xmlXPathParserContext = type { i8*, i8*, i32, %struct._xmlXPathContext*, %struct._xmlXPathObject*, i32, i32, %struct._xmlXPathObject**, %struct._xmlXPathCompExpr*, i32, %struct._xmlNode*, i32 }
%struct._xmlError = type { i32, i32, i8*, i32, i8*, i32, i8*, i8*, i8*, i32, i32, i8*, i8* }
%struct._xmlHashTable = type opaque
%struct._xsltRuntimeExtra = type { i8*, void (i8*)*, %union.anon }
%union.anon = type { i8* }
%struct._xsltDocument = type { %struct._xsltDocument*, i32, %struct._xmlDoc*, i8*, %struct._xsltDocument*, i32, i32 }
%struct._xmlDict = type opaque
%struct._xsltTemplate = type { %struct._xsltTemplate*, %struct._xsltStylesheet*, i8*, float, i8*, i8*, i8*, i8*, %struct._xmlNode*, %struct._xmlNode*, i32, %struct._xmlNs**, i32, i64, i8*, i32, i32, %struct._xsltTemplate**, i32* }
%struct._xmlNode = type { i8*, i32, i8*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlDoc*, %struct._xmlNs*, i8*, %struct._xmlAttr*, %struct._xmlNs*, i8*, i16, i16 }
%struct._xmlAttr = type { i8*, i32, i8*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlAttr*, %struct._xmlAttr*, %struct._xmlDoc*, %struct._xmlNs*, i32, i8* }
%struct._xsltTransformCache = type { %struct._xmlDoc*, i32, %struct._xsltStackElem*, i32 }
%struct._xmlDoc = type { i8*, i32, i8*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlDoc*, i32, i32, %struct._xmlDtd*, %struct._xmlDtd*, %struct._xmlNs*, i8*, i8*, i8*, i8*, i8*, i32, %struct._xmlDict*, i8*, i32, i32 }
%struct._xmlDtd = type { i8*, i32, i8*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlDoc*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlDoc*, i8*, i8*, i8*, i8*, i8*, i8*, i8* }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { i16*, i32, i32 }
%"struct.blink::(anonymous namespace)::UCollatorHolder" = type <{ %"class.std::__1::unique_ptr.2", [157 x i8], i8, [2 x i8] }>
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %struct.UCollator* }
%struct.UCollator = type opaque
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.10 }
%union.anon.10 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN3WTF6VectorIDsLj0ENS_18PartitionAllocatorEE6AppendIhEEvPKT_j = comdat any

$_ZN3WTF6VectorIDsLj0ENS_18PartitionAllocatorEE6AppendIDsEEvPKT_j = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm = comdat any

@.str = private unnamed_addr constant [10 x i8] c"data-type\00", align 1
@.str.1 = private unnamed_addr constant [37 x i8] c"http://www.w3.org/1999/XSL/Transform\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"text\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"number\00", align 1
@.str.4 = private unnamed_addr constant [51 x i8] c"xsltDoSortFunction: no support for data-type = %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"order\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"ascending\00", align 1
@.str.7 = private unnamed_addr constant [11 x i8] c"descending\00", align 1
@.str.8 = private unnamed_addr constant [48 x i8] c"xsltDoSortFunction: invalid value %s for order\0A\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"en\00", align 1
@.str.10 = private unnamed_addr constant [10 x i8] c"collation\00", align 1
@.str.11 = private unnamed_addr constant [5 x i8] c"root\00", align 1
@_ZZN5blink23XsltUnicodeSortFunctionEP21_xsltTransformContextPP8_xmlNodeiE17s_cached_collator = internal unnamed_addr global %"class.WTF::StaticSingleton" zeroinitializer, align 8
@_ZGVZN5blink23XsltUnicodeSortFunctionEP21_xsltTransformContextPP8_xmlNodeiE17s_cached_collator = internal global i64 0, align 8
@.str.12 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@xmlFree = external local_unnamed_addr global void (i8*)*, align 8
@.str.13 = private unnamed_addr constant [18 x i8] c"new_size >= size_\00", align 1
@.str.14 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.16 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.17 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv = private unnamed_addr constant [56 x i8] c"const char *WTF::GetStringWithTypeName() [T = char16_t]\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink23XsltUnicodeSortFunctionEP21_xsltTransformContextPP8_xmlNodei(%struct._xsltTransformContext*, %struct._xmlNode** readonly, i32) local_unnamed_addr #0 {
  %4 = alloca [15 x %struct._xmlXPathObject**], align 16
  %5 = alloca [15 x i32], align 16
  %6 = alloca [15 x i32], align 16
  %7 = alloca i32, align 4
  %8 = alloca [157 x i8], align 16
  %9 = alloca i8, align 1
  %10 = alloca %"class.WTF::Vector", align 8
  %11 = alloca %"class.WTF::Vector", align 8
  %12 = alloca %"class.WTF::Vector", align 8
  %13 = alloca %"class.WTF::Vector", align 8
  %14 = bitcast [15 x %struct._xmlXPathObject**]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %14) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 120, i1 false)
  %15 = bitcast [15 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 60, i8* nonnull %15) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 60, i1 false)
  %16 = bitcast [15 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 60, i8* nonnull %16) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 -86, i64 60, i1 false)
  %17 = icmp eq %struct._xsltTransformContext* %0, null
  %18 = icmp eq %struct._xmlNode** %1, null
  %19 = or i1 %17, %18
  %20 = add i32 %2, -1
  %21 = icmp ugt i32 %20, 13
  %22 = or i1 %19, %21
  br i1 %22, label %645, label %23

23:                                               ; preds = %3
  %24 = load %struct._xmlNode*, %struct._xmlNode** %1, align 8
  %25 = icmp eq %struct._xmlNode* %24, null
  br i1 %25, label %645, label %26

26:                                               ; preds = %23
  %27 = getelementptr inbounds %struct._xmlNode, %struct._xmlNode* %24, i64 0, i32 13
  %28 = bitcast i8** %27 to %struct._xsltStylePreComp**
  %29 = load %struct._xsltStylePreComp*, %struct._xsltStylePreComp** %28, align 8
  %30 = icmp eq %struct._xsltStylePreComp* %29, null
  br i1 %30, label %645, label %31

31:                                               ; preds = %26
  %32 = getelementptr inbounds %struct._xsltTransformContext, %struct._xsltTransformContext* %0, i64 0, i32 19
  %33 = load %struct._xmlNodeSet*, %struct._xmlNodeSet** %32, align 8
  %34 = icmp eq %struct._xmlNodeSet* %33, null
  br i1 %34, label %645, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %struct._xmlNodeSet, %struct._xmlNodeSet* %33, i64 0, i32 0
  %37 = load i32, i32* %36, align 8
  %38 = icmp slt i32 %37, 2
  br i1 %38, label %645, label %39

39:                                               ; preds = %35
  %40 = zext i32 %2 to i64
  br label %57

41:                                               ; preds = %116
  %42 = load i32, i32* %36, align 8
  %43 = load %struct._xmlNode*, %struct._xmlNode** %1, align 8
  %44 = tail call %struct._xmlXPathObject** @xsltComputeSortResult(%struct._xsltTransformContext* %0, %struct._xmlNode* %43) #9
  %45 = getelementptr inbounds [15 x %struct._xmlXPathObject**], [15 x %struct._xmlXPathObject**]* %4, i64 0, i64 0
  store %struct._xmlXPathObject** %44, %struct._xmlXPathObject*** %45, align 16
  %46 = getelementptr inbounds [15 x %struct._xmlXPathObject**], [15 x %struct._xmlXPathObject**]* %4, i64 0, i64 1
  %47 = bitcast %struct._xmlXPathObject*** %46 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %47, i8 0, i64 112, i1 false)
  %48 = load %struct._xmlNode*, %struct._xmlNode** %1, align 8
  %49 = getelementptr inbounds %struct._xmlNode, %struct._xmlNode* %48, i64 0, i32 13
  %50 = bitcast i8** %49 to %struct._xsltStylePreComp**
  %51 = load %struct._xsltStylePreComp*, %struct._xsltStylePreComp** %50, align 8
  %52 = getelementptr inbounds %struct._xsltStylePreComp, %struct._xsltStylePreComp* %51, i64 0, i32 9
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds %struct._xsltStylePreComp, %struct._xsltStylePreComp* %51, i64 0, i32 6
  %55 = load i32, i32* %54, align 4
  %56 = icmp eq %struct._xmlXPathObject** %44, null
  br i1 %56, label %645, label %125

57:                                               ; preds = %119, %39
  %58 = phi %struct._xsltStylePreComp* [ %29, %39 ], [ %124, %119 ]
  %59 = phi %struct._xmlNode* [ %24, %39 ], [ %121, %119 ]
  %60 = phi i64 [ 0, %39 ], [ %117, %119 ]
  %61 = getelementptr inbounds %struct._xmlNode*, %struct._xmlNode** %1, i64 %60
  %62 = getelementptr inbounds [15 x i32], [15 x i32]* %5, i64 0, i64 %60
  store i32 0, i32* %62, align 4
  %63 = getelementptr inbounds %struct._xsltStylePreComp, %struct._xsltStylePreComp* %58, i64 0, i32 4
  %64 = load i8*, i8** %63, align 8
  %65 = icmp eq i8* %64, null
  br i1 %65, label %66, label %88

66:                                               ; preds = %57
  %67 = getelementptr inbounds %struct._xsltStylePreComp, %struct._xsltStylePreComp* %58, i64 0, i32 5
  %68 = load i32, i32* %67, align 8
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %88, label %70

70:                                               ; preds = %66
  %71 = tail call i8* @xsltEvalAttrValueTemplate(%struct._xsltTransformContext* %0, %struct._xmlNode* %59, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0)) #9
  store i8* %71, i8** %63, align 8
  %72 = icmp eq i8* %71, null
  br i1 %72, label %88, label %73

73:                                               ; preds = %70
  store i32 1, i32* %62, align 4
  %74 = tail call i32 @xmlStrEqual(i8* nonnull %71, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0)) #9
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %78, label %76

76:                                               ; preds = %73
  %77 = getelementptr inbounds %struct._xsltStylePreComp, %struct._xsltStylePreComp* %58, i64 0, i32 6
  store i32 0, i32* %77, align 4
  br label %88

78:                                               ; preds = %73
  %79 = load i8*, i8** %63, align 8
  %80 = tail call i32 @xmlStrEqual(i8* %79, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0)) #9
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %84, label %82

82:                                               ; preds = %78
  %83 = getelementptr inbounds %struct._xsltStylePreComp, %struct._xsltStylePreComp* %58, i64 0, i32 6
  store i32 1, i32* %83, align 4
  br label %88

84:                                               ; preds = %78
  %85 = load %struct._xmlNode*, %struct._xmlNode** %61, align 8
  %86 = load i8*, i8** %63, align 8
  tail call void (%struct._xsltTransformContext*, %struct._xsltStylesheet*, %struct._xmlNode*, i8*, ...) @xsltTransformError(%struct._xsltTransformContext* %0, %struct._xsltStylesheet* null, %struct._xmlNode* %85, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.4, i64 0, i64 0), i8* %86) #9
  %87 = getelementptr inbounds %struct._xsltStylePreComp, %struct._xsltStylePreComp* %58, i64 0, i32 6
  store i32 0, i32* %87, align 4
  br label %88

88:                                               ; preds = %70, %66, %57, %82, %84, %76
  %89 = getelementptr inbounds [15 x i32], [15 x i32]* %6, i64 0, i64 %60
  store i32 0, i32* %89, align 4
  %90 = getelementptr inbounds %struct._xsltStylePreComp, %struct._xsltStylePreComp* %58, i64 0, i32 7
  %91 = load i8*, i8** %90, align 8
  %92 = icmp eq i8* %91, null
  br i1 %92, label %93, label %116

93:                                               ; preds = %88
  %94 = getelementptr inbounds %struct._xsltStylePreComp, %struct._xsltStylePreComp* %58, i64 0, i32 8
  %95 = load i32, i32* %94, align 8
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %116, label %97

97:                                               ; preds = %93
  %98 = load %struct._xmlNode*, %struct._xmlNode** %61, align 8
  %99 = tail call i8* @xsltEvalAttrValueTemplate(%struct._xsltTransformContext* %0, %struct._xmlNode* %98, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0)) #9
  store i8* %99, i8** %90, align 8
  %100 = icmp eq i8* %99, null
  br i1 %100, label %116, label %101

101:                                              ; preds = %97
  store i32 1, i32* %89, align 4
  %102 = tail call i32 @xmlStrEqual(i8* nonnull %99, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i64 0, i64 0)) #9
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %106, label %104

104:                                              ; preds = %101
  %105 = getelementptr inbounds %struct._xsltStylePreComp, %struct._xsltStylePreComp* %58, i64 0, i32 9
  store i32 0, i32* %105, align 4
  br label %116

106:                                              ; preds = %101
  %107 = load i8*, i8** %90, align 8
  %108 = tail call i32 @xmlStrEqual(i8* %107, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0)) #9
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %112, label %110

110:                                              ; preds = %106
  %111 = getelementptr inbounds %struct._xsltStylePreComp, %struct._xsltStylePreComp* %58, i64 0, i32 9
  store i32 1, i32* %111, align 4
  br label %116

112:                                              ; preds = %106
  %113 = load %struct._xmlNode*, %struct._xmlNode** %61, align 8
  %114 = load i8*, i8** %90, align 8
  tail call void (%struct._xsltTransformContext*, %struct._xsltStylesheet*, %struct._xmlNode*, i8*, ...) @xsltTransformError(%struct._xsltTransformContext* %0, %struct._xsltStylesheet* null, %struct._xmlNode* %113, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.8, i64 0, i64 0), i8* %114) #9
  %115 = getelementptr inbounds %struct._xsltStylePreComp, %struct._xsltStylePreComp* %58, i64 0, i32 9
  store i32 0, i32* %115, align 4
  br label %116

116:                                              ; preds = %97, %93, %88, %104, %112, %110
  %117 = add nuw nsw i64 %60, 1
  %118 = icmp eq i64 %117, %40
  br i1 %118, label %41, label %119

119:                                              ; preds = %116
  %120 = getelementptr inbounds %struct._xmlNode*, %struct._xmlNode** %1, i64 %117
  %121 = load %struct._xmlNode*, %struct._xmlNode** %120, align 8
  %122 = getelementptr inbounds %struct._xmlNode, %struct._xmlNode* %121, i64 0, i32 13
  %123 = bitcast i8** %122 to %struct._xsltStylePreComp**
  %124 = load %struct._xsltStylePreComp*, %struct._xsltStylePreComp** %123, align 8
  br label %57

125:                                              ; preds = %41
  %126 = getelementptr inbounds %struct._xsltStylePreComp, %struct._xsltStylePreComp* %51, i64 0, i32 11
  %127 = load i32, i32* %126, align 8
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %132, label %129

129:                                              ; preds = %125
  %130 = getelementptr inbounds %struct._xsltStylePreComp, %struct._xsltStylePreComp* %51, i64 0, i32 10
  %131 = load i8*, i8** %130, align 8
  br label %132

132:                                              ; preds = %125, %129
  %133 = phi i8* [ %131, %129 ], [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i64 0, i64 0), %125 ]
  %134 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %134) #9
  store i32 0, i32* %7, align 4
  %135 = getelementptr inbounds [157 x i8], [157 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 157, i8* nonnull %135) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %135, i8 -86, i64 157, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %9) #9
  store i8 -86, i8* %9, align 1
  %136 = call i32 @ucol_getFunctionalEquivalent_69(i8* nonnull %135, i32 157, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i64 0, i64 0), i8* %133, i8* nonnull %9, i32* nonnull %7) #9
  %137 = load i32, i32* %7, align 4
  %138 = icmp slt i32 %137, 1
  br i1 %138, label %140, label %139

139:                                              ; preds = %132
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %135, i8* align 1 getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0), i64 5, i1 false)
  store i32 0, i32* %7, align 4
  br label %140

140:                                              ; preds = %132, %139
  %141 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink23XsltUnicodeSortFunctionEP21_xsltTransformContextPP8_xmlNodeiE17s_cached_collator to i8*) acquire, align 8
  %142 = icmp eq i8 %141, 0
  br i1 %142, label %143, label %147, !prof !2

143:                                              ; preds = %140
  %144 = call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink23XsltUnicodeSortFunctionEP21_xsltTransformContextPP8_xmlNodeiE17s_cached_collator) #9
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %147, label %146

146:                                              ; preds = %143
  store i64 0, i64* bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink23XsltUnicodeSortFunctionEP21_xsltTransformContextPP8_xmlNodeiE17s_cached_collator to i64*), align 8
  call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink23XsltUnicodeSortFunctionEP21_xsltTransformContextPP8_xmlNodeiE17s_cached_collator) #9
  br label %147

147:                                              ; preds = %143, %146, %140
  %148 = load %"struct.blink::(anonymous namespace)::UCollatorHolder"*, %"struct.blink::(anonymous namespace)::UCollatorHolder"** bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink23XsltUnicodeSortFunctionEP21_xsltTransformContextPP8_xmlNodeiE17s_cached_collator to %"struct.blink::(anonymous namespace)::UCollatorHolder"**), align 8
  %149 = icmp eq %"struct.blink::(anonymous namespace)::UCollatorHolder"* %148, null
  %150 = ptrtoint %"struct.blink::(anonymous namespace)::UCollatorHolder"* %148 to i64
  br i1 %149, label %163, label %151

151:                                              ; preds = %147
  %152 = getelementptr inbounds %"struct.blink::(anonymous namespace)::UCollatorHolder", %"struct.blink::(anonymous namespace)::UCollatorHolder"* %148, i64 0, i32 1, i64 0
  %153 = call i32 @strcmp(i8* %152, i8* nonnull %135) #10
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %155, label %163

155:                                              ; preds = %151
  %156 = getelementptr inbounds %"struct.blink::(anonymous namespace)::UCollatorHolder", %"struct.blink::(anonymous namespace)::UCollatorHolder"* %148, i64 0, i32 2
  %157 = load i8, i8* %156, align 1, !range !3
  %158 = zext i8 %157 to i32
  %159 = getelementptr inbounds %struct._xsltStylePreComp, %struct._xsltStylePreComp* %51, i64 0, i32 14
  %160 = load i32, i32* %159, align 8
  %161 = icmp eq i32 %160, %158
  br i1 %161, label %162, label %163

162:                                              ; preds = %155
  store %"struct.blink::(anonymous namespace)::UCollatorHolder"* null, %"struct.blink::(anonymous namespace)::UCollatorHolder"** bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink23XsltUnicodeSortFunctionEP21_xsltTransformContextPP8_xmlNodeiE17s_cached_collator to %"struct.blink::(anonymous namespace)::UCollatorHolder"**), align 8
  br label %192

163:                                              ; preds = %147, %151, %155
  %164 = call i8* @_Znwm(i64 168) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %164, i8 0, i64 168, i1 false) #9
  %165 = ptrtoint i8* %164 to i64
  %166 = getelementptr inbounds i8, i8* %164, i64 8
  %167 = call i8* @strncpy(i8* %166, i8* nonnull %135, i64 157)
  %168 = getelementptr inbounds %struct._xsltStylePreComp, %struct._xsltStylePreComp* %51, i64 0, i32 14
  %169 = load i32, i32* %168, align 8
  %170 = icmp ne i32 %169, 0
  %171 = getelementptr inbounds i8, i8* %164, i64 165
  %172 = zext i1 %170 to i8
  store i8 %172, i8* %171, align 1
  %173 = call %struct.UCollator* @ucol_open_69(i8* %133, i32* nonnull %7) #9
  %174 = bitcast i8* %164 to %struct.UCollator**
  %175 = load %struct.UCollator*, %struct.UCollator** %174, align 8
  store %struct.UCollator* %173, %struct.UCollator** %174, align 8
  %176 = icmp eq %struct.UCollator* %175, null
  br i1 %176, label %178, label %177

177:                                              ; preds = %163
  call void @ucol_close_69(%struct.UCollator* nonnull %175) #9
  br label %178

178:                                              ; preds = %163, %177
  %179 = load i32, i32* %7, align 4
  %180 = icmp slt i32 %179, 1
  br i1 %180, label %186, label %181

181:                                              ; preds = %178
  store i32 0, i32* %7, align 4
  %182 = call %struct.UCollator* @ucol_open_69(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.12, i64 0, i64 0), i32* nonnull %7) #9
  %183 = load %struct.UCollator*, %struct.UCollator** %174, align 8
  store %struct.UCollator* %182, %struct.UCollator** %174, align 8
  %184 = icmp eq %struct.UCollator* %183, null
  br i1 %184, label %186, label %185

185:                                              ; preds = %181
  call void @ucol_close_69(%struct.UCollator* nonnull %183) #9
  br label %186

186:                                              ; preds = %185, %181, %178
  %187 = load %struct.UCollator*, %struct.UCollator** %174, align 8
  %188 = load i32, i32* %168, align 8
  %189 = icmp eq i32 %188, 0
  %190 = select i1 %189, i32 25, i32 24
  call void @ucol_setAttribute_69(%struct.UCollator* %187, i32 2, i32 %190, i32* nonnull %7) #9
  %191 = load %struct.UCollator*, %struct.UCollator** %174, align 8
  call void @ucol_setAttribute_69(%struct.UCollator* %191, i32 4, i32 17, i32* nonnull %7) #9
  br label %192

192:                                              ; preds = %186, %162
  %193 = phi i64 [ %150, %162 ], [ %165, %186 ]
  %194 = icmp sgt i32 %42, 1
  br i1 %194, label %195, label %224

195:                                              ; preds = %192
  %196 = icmp eq i32 %55, 0
  %197 = bitcast %"class.WTF::Vector"* %10 to i8*
  %198 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %10, i64 0, i32 0, i32 0, i32 0
  %199 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %10, i64 0, i32 0, i32 0, i32 2
  %200 = bitcast %"class.WTF::Vector"* %11 to i8*
  %201 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %11, i64 0, i32 0, i32 0, i32 0
  %202 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %11, i64 0, i32 0, i32 0, i32 2
  %203 = inttoptr i64 %193 to %"struct.blink::(anonymous namespace)::UCollatorHolder"*
  %204 = getelementptr inbounds %"struct.blink::(anonymous namespace)::UCollatorHolder", %"struct.blink::(anonymous namespace)::UCollatorHolder"* %203, i64 0, i32 0, i32 0, i32 0, i32 0
  %205 = icmp eq i32 %53, 0
  %206 = bitcast %"class.WTF::Vector"* %12 to i8*
  %207 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %12, i64 0, i32 0, i32 0, i32 0
  %208 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %12, i64 0, i32 0, i32 0, i32 2
  %209 = bitcast %"class.WTF::Vector"* %13 to i8*
  %210 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %13, i64 0, i32 0, i32 0, i32 0
  %211 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %13, i64 0, i32 0, i32 0, i32 2
  %212 = getelementptr inbounds %struct._xmlNodeSet, %struct._xmlNodeSet* %33, i64 0, i32 2
  %213 = icmp sgt i32 %2, 1
  %214 = sext i32 %2 to i64
  %215 = zext i32 %2 to i64
  br label %218

216:                                              ; preds = %591, %218
  %217 = icmp sgt i32 %219, 3
  br i1 %217, label %218, label %224

218:                                              ; preds = %195, %216
  %219 = phi i32 [ %42, %195 ], [ %220, %216 ]
  %220 = sdiv i32 %219, 2
  %221 = icmp slt i32 %220, %42
  br i1 %221, label %222, label %216

222:                                              ; preds = %218
  %223 = sext i32 %220 to i64
  br label %228

224:                                              ; preds = %216, %192
  %225 = icmp sgt i32 %42, 0
  %226 = zext i32 %2 to i64
  %227 = zext i32 %42 to i64
  br label %606

228:                                              ; preds = %591, %222
  %229 = phi i64 [ %223, %222 ], [ %592, %591 ]
  %230 = getelementptr inbounds %struct._xmlXPathObject*, %struct._xmlXPathObject** %44, i64 %229
  %231 = load %struct._xmlXPathObject*, %struct._xmlXPathObject** %230, align 8
  %232 = icmp eq %struct._xmlXPathObject* %231, null
  br i1 %232, label %591, label %233

233:                                              ; preds = %228
  %234 = trunc i64 %229 to i32
  %235 = sub i32 %234, %220
  %236 = trunc i64 %229 to i32
  br label %237

237:                                              ; preds = %233, %588
  %238 = phi i32 [ %589, %588 ], [ %235, %233 ]
  %239 = phi i32 [ %238, %588 ], [ %236, %233 ]
  %240 = sext i32 %238 to i64
  %241 = getelementptr inbounds %struct._xmlXPathObject*, %struct._xmlXPathObject** %44, i64 %240
  %242 = load %struct._xmlXPathObject*, %struct._xmlXPathObject** %241, align 8
  %243 = icmp eq %struct._xmlXPathObject* %242, null
  br i1 %243, label %244, label %247

244:                                              ; preds = %237
  %245 = ptrtoint %struct._xmlXPathObject* %242 to i64
  %246 = bitcast %struct._xmlXPathObject** %241 to i64*
  br label %553

247:                                              ; preds = %237
  br i1 %196, label %275, label %248

248:                                              ; preds = %247
  %249 = getelementptr inbounds %struct._xmlXPathObject, %struct._xmlXPathObject* %242, i64 0, i32 3
  %250 = load double, double* %249, align 8
  %251 = call i32 @xmlXPathIsNaN(double %250) #9
  %252 = icmp eq i32 %251, 0
  %253 = sext i32 %239 to i64
  %254 = getelementptr inbounds %struct._xmlXPathObject*, %struct._xmlXPathObject** %44, i64 %253
  %255 = load %struct._xmlXPathObject*, %struct._xmlXPathObject** %254, align 8
  %256 = getelementptr inbounds %struct._xmlXPathObject, %struct._xmlXPathObject* %255, i64 0, i32 3
  %257 = load double, double* %256, align 8
  %258 = call i32 @xmlXPathIsNaN(double %257) #9
  %259 = icmp ne i32 %258, 0
  br i1 %252, label %263, label %260

260:                                              ; preds = %248
  %261 = xor i1 %259, true
  %262 = sext i1 %261 to i32
  br label %368

263:                                              ; preds = %248
  br i1 %259, label %368, label %264

264:                                              ; preds = %263
  %265 = load %struct._xmlXPathObject*, %struct._xmlXPathObject** %241, align 8
  %266 = getelementptr inbounds %struct._xmlXPathObject, %struct._xmlXPathObject* %265, i64 0, i32 3
  %267 = load double, double* %266, align 8
  %268 = load %struct._xmlXPathObject*, %struct._xmlXPathObject** %254, align 8
  %269 = getelementptr inbounds %struct._xmlXPathObject, %struct._xmlXPathObject* %268, i64 0, i32 3
  %270 = load double, double* %269, align 8
  %271 = fcmp oeq double %267, %270
  br i1 %271, label %368, label %272

272:                                              ; preds = %264
  %273 = fcmp ogt double %267, %270
  %274 = select i1 %273, i32 1, i32 -1
  br label %368

275:                                              ; preds = %247
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %197) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %197, i8 0, i64 16, i1 false) #9
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %200) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %200, i8 0, i64 16, i1 false) #9
  %276 = load %struct._xmlXPathObject*, %struct._xmlXPathObject** %241, align 8
  %277 = getelementptr inbounds %struct._xmlXPathObject, %struct._xmlXPathObject* %276, i64 0, i32 4
  %278 = load i8*, i8** %277, align 8
  %279 = call %"class.WTF::StringImpl"* @_ZN3WTF6String8FromUTF8EPKh(i8* %278) #9
  %280 = icmp eq %"class.WTF::StringImpl"* %279, null
  br i1 %280, label %308, label %281

281:                                              ; preds = %275
  %282 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %279, i64 0, i32 1
  %283 = load i32, i32* %282, align 4
  %284 = icmp eq i32 %283, 0
  br i1 %284, label %295, label %285

285:                                              ; preds = %281
  %286 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %279, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %287 = load atomic i32, i32* %286 monotonic, align 4
  %288 = and i32 %287, 1
  %289 = icmp eq i32 %288, 0
  %290 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %279, i64 1
  br i1 %289, label %293, label %291

291:                                              ; preds = %285
  %292 = bitcast %"class.WTF::StringImpl"* %290 to i8*
  call void @_ZN3WTF6VectorIDsLj0ENS_18PartitionAllocatorEE6AppendIhEEvPKT_j(%"class.WTF::Vector"* nonnull %10, i8* %292, i32 %283) #9
  br label %295

293:                                              ; preds = %285
  %294 = bitcast %"class.WTF::StringImpl"* %290 to i16*
  call void @_ZN3WTF6VectorIDsLj0ENS_18PartitionAllocatorEE6AppendIDsEEvPKT_j(%"class.WTF::Vector"* nonnull %10, i16* %294, i32 %283) #9
  br label %295

295:                                              ; preds = %281, %291, %293
  %296 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %279, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %297 = load atomic i32, i32* %296 monotonic, align 4
  %298 = and i32 %297, 2
  %299 = icmp eq i32 %298, 0
  %300 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %279, i64 0, i32 0
  %301 = load i32, i32* %300, align 4
  br i1 %299, label %302, label %304

302:                                              ; preds = %295
  %303 = add i32 %301, -1
  store i32 %303, i32* %300, align 4
  br label %304

304:                                              ; preds = %302, %295
  %305 = phi i32 [ %303, %302 ], [ %301, %295 ]
  %306 = icmp eq i32 %305, 0
  br i1 %306, label %307, label %308

307:                                              ; preds = %304
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %279) #9
  br label %308

308:                                              ; preds = %275, %304, %307
  %309 = sext i32 %239 to i64
  %310 = getelementptr inbounds %struct._xmlXPathObject*, %struct._xmlXPathObject** %44, i64 %309
  %311 = load %struct._xmlXPathObject*, %struct._xmlXPathObject** %310, align 8
  %312 = getelementptr inbounds %struct._xmlXPathObject, %struct._xmlXPathObject* %311, i64 0, i32 4
  %313 = load i8*, i8** %312, align 8
  %314 = call %"class.WTF::StringImpl"* @_ZN3WTF6String8FromUTF8EPKh(i8* %313) #9
  %315 = icmp eq %"class.WTF::StringImpl"* %314, null
  br i1 %315, label %343, label %316

316:                                              ; preds = %308
  %317 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %314, i64 0, i32 1
  %318 = load i32, i32* %317, align 4
  %319 = icmp eq i32 %318, 0
  br i1 %319, label %330, label %320

320:                                              ; preds = %316
  %321 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %314, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %322 = load atomic i32, i32* %321 monotonic, align 4
  %323 = and i32 %322, 1
  %324 = icmp eq i32 %323, 0
  %325 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %314, i64 1
  br i1 %324, label %328, label %326

326:                                              ; preds = %320
  %327 = bitcast %"class.WTF::StringImpl"* %325 to i8*
  call void @_ZN3WTF6VectorIDsLj0ENS_18PartitionAllocatorEE6AppendIhEEvPKT_j(%"class.WTF::Vector"* nonnull %11, i8* %327, i32 %318) #9
  br label %330

328:                                              ; preds = %320
  %329 = bitcast %"class.WTF::StringImpl"* %325 to i16*
  call void @_ZN3WTF6VectorIDsLj0ENS_18PartitionAllocatorEE6AppendIDsEEvPKT_j(%"class.WTF::Vector"* nonnull %11, i16* %329, i32 %318) #9
  br label %330

330:                                              ; preds = %316, %326, %328
  %331 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %314, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %332 = load atomic i32, i32* %331 monotonic, align 4
  %333 = and i32 %332, 2
  %334 = icmp eq i32 %333, 0
  %335 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %314, i64 0, i32 0
  %336 = load i32, i32* %335, align 4
  br i1 %334, label %337, label %339

337:                                              ; preds = %330
  %338 = add i32 %336, -1
  store i32 %338, i32* %335, align 4
  br label %339

339:                                              ; preds = %337, %330
  %340 = phi i32 [ %338, %337 ], [ %336, %330 ]
  %341 = icmp eq i32 %340, 0
  br i1 %341, label %342, label %343

342:                                              ; preds = %339
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %314) #9
  br label %343

343:                                              ; preds = %308, %339, %342
  %344 = load %struct.UCollator*, %struct.UCollator** %204, align 8
  %345 = load i16*, i16** %198, align 8
  %346 = load i32, i32* %199, align 4
  %347 = load i16*, i16** %201, align 8
  %348 = load i32, i32* %202, align 4
  %349 = call i32 @ucol_strcoll_69(%struct.UCollator* %344, i16* %345, i32 %346, i16* %347, i32 %348) #9
  %350 = load i16*, i16** %201, align 8
  %351 = icmp eq i16* %350, null
  %352 = bitcast i16* %350 to i8*
  br i1 %351, label %358, label %353, !prof !4

353:                                              ; preds = %343
  %354 = load i32, i32* %202, align 4
  %355 = icmp eq i32 %354, 0
  br i1 %355, label %357, label %356, !prof !5

356:                                              ; preds = %353
  store i32 0, i32* %202, align 4
  br label %357

357:                                              ; preds = %356, %353
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %352) #9
  store i16* null, i16** %201, align 8
  br label %358

358:                                              ; preds = %343, %357
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %200) #9
  %359 = load i16*, i16** %198, align 8
  %360 = icmp eq i16* %359, null
  %361 = bitcast i16* %359 to i8*
  br i1 %360, label %367, label %362, !prof !4

362:                                              ; preds = %358
  %363 = load i32, i32* %199, align 4
  %364 = icmp eq i32 %363, 0
  br i1 %364, label %366, label %365, !prof !5

365:                                              ; preds = %362
  store i32 0, i32* %199, align 4
  br label %366

366:                                              ; preds = %365, %362
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %361) #9
  store i16* null, i16** %198, align 8
  br label %367

367:                                              ; preds = %358, %366
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %197) #9
  br label %368

368:                                              ; preds = %367, %260, %263, %264, %272
  %369 = phi i32 [ %349, %367 ], [ %262, %260 ], [ 1, %263 ], [ 0, %264 ], [ %274, %272 ]
  %370 = sub nsw i32 0, %369
  %371 = select i1 %205, i32 %369, i32 %370
  %372 = icmp eq i32 %371, 0
  br i1 %372, label %373, label %547

373:                                              ; preds = %368
  %374 = sext i32 %239 to i64
  br label %375

375:                                              ; preds = %373, %533
  %376 = phi i64 [ 1, %373 ], [ %536, %533 ]
  %377 = icmp slt i64 %376, %214
  br i1 %377, label %378, label %537

378:                                              ; preds = %375
  %379 = getelementptr inbounds %struct._xmlNode*, %struct._xmlNode** %1, i64 %376
  %380 = load %struct._xmlNode*, %struct._xmlNode** %379, align 8
  %381 = icmp eq %struct._xmlNode* %380, null
  br i1 %381, label %537, label %382

382:                                              ; preds = %378
  %383 = getelementptr inbounds %struct._xmlNode, %struct._xmlNode* %380, i64 0, i32 13
  %384 = bitcast i8** %383 to %struct._xsltStylePreComp**
  %385 = load %struct._xsltStylePreComp*, %struct._xsltStylePreComp** %384, align 8
  %386 = icmp eq %struct._xsltStylePreComp* %385, null
  br i1 %386, label %537, label %387

387:                                              ; preds = %382
  %388 = getelementptr inbounds %struct._xsltStylePreComp, %struct._xsltStylePreComp* %385, i64 0, i32 9
  %389 = load i32, i32* %388, align 4
  %390 = getelementptr inbounds %struct._xsltStylePreComp, %struct._xsltStylePreComp* %385, i64 0, i32 6
  %391 = load i32, i32* %390, align 4
  %392 = getelementptr inbounds [15 x %struct._xmlXPathObject**], [15 x %struct._xmlXPathObject**]* %4, i64 0, i64 %376
  %393 = load %struct._xmlXPathObject**, %struct._xmlXPathObject*** %392, align 8
  %394 = icmp eq %struct._xmlXPathObject** %393, null
  br i1 %394, label %395, label %398

395:                                              ; preds = %387
  %396 = call %struct._xmlXPathObject** @xsltComputeSortResult(%struct._xsltTransformContext* %0, %struct._xmlNode* nonnull %380) #9
  store %struct._xmlXPathObject** %396, %struct._xmlXPathObject*** %392, align 8
  %397 = icmp eq %struct._xmlXPathObject** %396, null
  br i1 %397, label %537, label %398

398:                                              ; preds = %387, %395
  %399 = phi %struct._xmlXPathObject** [ %396, %395 ], [ %393, %387 ]
  %400 = getelementptr inbounds %struct._xmlXPathObject*, %struct._xmlXPathObject** %399, i64 %240
  %401 = load %struct._xmlXPathObject*, %struct._xmlXPathObject** %400, align 8
  %402 = icmp eq %struct._xmlXPathObject* %401, null
  br i1 %402, label %403, label %408

403:                                              ; preds = %398
  %404 = getelementptr inbounds %struct._xmlXPathObject*, %struct._xmlXPathObject** %399, i64 %374
  %405 = load %struct._xmlXPathObject*, %struct._xmlXPathObject** %404, align 8
  %406 = icmp ne %struct._xmlXPathObject* %405, null
  %407 = zext i1 %406 to i32
  br label %533

408:                                              ; preds = %398
  %409 = icmp eq i32 %391, 0
  br i1 %409, label %436, label %410

410:                                              ; preds = %408
  %411 = getelementptr inbounds %struct._xmlXPathObject, %struct._xmlXPathObject* %401, i64 0, i32 3
  %412 = load double, double* %411, align 8
  %413 = call i32 @xmlXPathIsNaN(double %412) #9
  %414 = icmp eq i32 %413, 0
  %415 = getelementptr inbounds %struct._xmlXPathObject*, %struct._xmlXPathObject** %399, i64 %374
  %416 = load %struct._xmlXPathObject*, %struct._xmlXPathObject** %415, align 8
  %417 = getelementptr inbounds %struct._xmlXPathObject, %struct._xmlXPathObject* %416, i64 0, i32 3
  %418 = load double, double* %417, align 8
  %419 = call i32 @xmlXPathIsNaN(double %418) #9
  %420 = icmp ne i32 %419, 0
  br i1 %414, label %424, label %421

421:                                              ; preds = %410
  %422 = xor i1 %420, true
  %423 = sext i1 %422 to i32
  br label %528

424:                                              ; preds = %410
  br i1 %420, label %528, label %425

425:                                              ; preds = %424
  %426 = load %struct._xmlXPathObject*, %struct._xmlXPathObject** %400, align 8
  %427 = getelementptr inbounds %struct._xmlXPathObject, %struct._xmlXPathObject* %426, i64 0, i32 3
  %428 = load double, double* %427, align 8
  %429 = load %struct._xmlXPathObject*, %struct._xmlXPathObject** %415, align 8
  %430 = getelementptr inbounds %struct._xmlXPathObject, %struct._xmlXPathObject* %429, i64 0, i32 3
  %431 = load double, double* %430, align 8
  %432 = fcmp oeq double %428, %431
  br i1 %432, label %528, label %433

433:                                              ; preds = %425
  %434 = fcmp ogt double %428, %431
  %435 = select i1 %434, i32 1, i32 -1
  br label %528

436:                                              ; preds = %408
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %206) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %206, i8 0, i64 16, i1 false) #9
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %209) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %209, i8 0, i64 16, i1 false) #9
  %437 = load %struct._xmlXPathObject*, %struct._xmlXPathObject** %400, align 8
  %438 = getelementptr inbounds %struct._xmlXPathObject, %struct._xmlXPathObject* %437, i64 0, i32 4
  %439 = load i8*, i8** %438, align 8
  %440 = call %"class.WTF::StringImpl"* @_ZN3WTF6String8FromUTF8EPKh(i8* %439) #9
  %441 = icmp eq %"class.WTF::StringImpl"* %440, null
  br i1 %441, label %469, label %442

442:                                              ; preds = %436
  %443 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %440, i64 0, i32 1
  %444 = load i32, i32* %443, align 4
  %445 = icmp eq i32 %444, 0
  br i1 %445, label %456, label %446

446:                                              ; preds = %442
  %447 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %440, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %448 = load atomic i32, i32* %447 monotonic, align 4
  %449 = and i32 %448, 1
  %450 = icmp eq i32 %449, 0
  %451 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %440, i64 1
  br i1 %450, label %454, label %452

452:                                              ; preds = %446
  %453 = bitcast %"class.WTF::StringImpl"* %451 to i8*
  call void @_ZN3WTF6VectorIDsLj0ENS_18PartitionAllocatorEE6AppendIhEEvPKT_j(%"class.WTF::Vector"* nonnull %12, i8* %453, i32 %444) #9
  br label %456

454:                                              ; preds = %446
  %455 = bitcast %"class.WTF::StringImpl"* %451 to i16*
  call void @_ZN3WTF6VectorIDsLj0ENS_18PartitionAllocatorEE6AppendIDsEEvPKT_j(%"class.WTF::Vector"* nonnull %12, i16* %455, i32 %444) #9
  br label %456

456:                                              ; preds = %442, %452, %454
  %457 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %440, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %458 = load atomic i32, i32* %457 monotonic, align 4
  %459 = and i32 %458, 2
  %460 = icmp eq i32 %459, 0
  %461 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %440, i64 0, i32 0
  %462 = load i32, i32* %461, align 4
  br i1 %460, label %463, label %465

463:                                              ; preds = %456
  %464 = add i32 %462, -1
  store i32 %464, i32* %461, align 4
  br label %465

465:                                              ; preds = %463, %456
  %466 = phi i32 [ %464, %463 ], [ %462, %456 ]
  %467 = icmp eq i32 %466, 0
  br i1 %467, label %468, label %469

468:                                              ; preds = %465
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %440) #9
  br label %469

469:                                              ; preds = %436, %465, %468
  %470 = getelementptr inbounds %struct._xmlXPathObject*, %struct._xmlXPathObject** %399, i64 %374
  %471 = load %struct._xmlXPathObject*, %struct._xmlXPathObject** %470, align 8
  %472 = getelementptr inbounds %struct._xmlXPathObject, %struct._xmlXPathObject* %471, i64 0, i32 4
  %473 = load i8*, i8** %472, align 8
  %474 = call %"class.WTF::StringImpl"* @_ZN3WTF6String8FromUTF8EPKh(i8* %473) #9
  %475 = icmp eq %"class.WTF::StringImpl"* %474, null
  br i1 %475, label %503, label %476

476:                                              ; preds = %469
  %477 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %474, i64 0, i32 1
  %478 = load i32, i32* %477, align 4
  %479 = icmp eq i32 %478, 0
  br i1 %479, label %490, label %480

480:                                              ; preds = %476
  %481 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %474, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %482 = load atomic i32, i32* %481 monotonic, align 4
  %483 = and i32 %482, 1
  %484 = icmp eq i32 %483, 0
  %485 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %474, i64 1
  br i1 %484, label %488, label %486

486:                                              ; preds = %480
  %487 = bitcast %"class.WTF::StringImpl"* %485 to i8*
  call void @_ZN3WTF6VectorIDsLj0ENS_18PartitionAllocatorEE6AppendIhEEvPKT_j(%"class.WTF::Vector"* nonnull %13, i8* %487, i32 %478) #9
  br label %490

488:                                              ; preds = %480
  %489 = bitcast %"class.WTF::StringImpl"* %485 to i16*
  call void @_ZN3WTF6VectorIDsLj0ENS_18PartitionAllocatorEE6AppendIDsEEvPKT_j(%"class.WTF::Vector"* nonnull %13, i16* %489, i32 %478) #9
  br label %490

490:                                              ; preds = %476, %486, %488
  %491 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %474, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %492 = load atomic i32, i32* %491 monotonic, align 4
  %493 = and i32 %492, 2
  %494 = icmp eq i32 %493, 0
  %495 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %474, i64 0, i32 0
  %496 = load i32, i32* %495, align 4
  br i1 %494, label %497, label %499

497:                                              ; preds = %490
  %498 = add i32 %496, -1
  store i32 %498, i32* %495, align 4
  br label %499

499:                                              ; preds = %497, %490
  %500 = phi i32 [ %498, %497 ], [ %496, %490 ]
  %501 = icmp eq i32 %500, 0
  br i1 %501, label %502, label %503

502:                                              ; preds = %499
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %474) #9
  br label %503

503:                                              ; preds = %469, %499, %502
  %504 = load %struct.UCollator*, %struct.UCollator** %204, align 8
  %505 = load i16*, i16** %207, align 8
  %506 = load i32, i32* %208, align 4
  %507 = load i16*, i16** %210, align 8
  %508 = load i32, i32* %211, align 4
  %509 = call i32 @ucol_strcoll_69(%struct.UCollator* %504, i16* %505, i32 %506, i16* %507, i32 %508) #9
  %510 = load i16*, i16** %210, align 8
  %511 = icmp eq i16* %510, null
  %512 = bitcast i16* %510 to i8*
  br i1 %511, label %518, label %513, !prof !4

513:                                              ; preds = %503
  %514 = load i32, i32* %211, align 4
  %515 = icmp eq i32 %514, 0
  br i1 %515, label %517, label %516, !prof !5

516:                                              ; preds = %513
  store i32 0, i32* %211, align 4
  br label %517

517:                                              ; preds = %516, %513
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %512) #9
  store i16* null, i16** %210, align 8
  br label %518

518:                                              ; preds = %503, %517
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %209) #9
  %519 = load i16*, i16** %207, align 8
  %520 = icmp eq i16* %519, null
  %521 = bitcast i16* %519 to i8*
  br i1 %520, label %527, label %522, !prof !4

522:                                              ; preds = %518
  %523 = load i32, i32* %208, align 4
  %524 = icmp eq i32 %523, 0
  br i1 %524, label %526, label %525, !prof !5

525:                                              ; preds = %522
  store i32 0, i32* %208, align 4
  br label %526

526:                                              ; preds = %525, %522
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %521) #9
  store i16* null, i16** %207, align 8
  br label %527

527:                                              ; preds = %518, %526
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %206) #9
  br label %528

528:                                              ; preds = %433, %425, %424, %421, %527
  %529 = phi i32 [ %509, %527 ], [ %423, %421 ], [ 1, %424 ], [ 0, %425 ], [ %435, %433 ]
  %530 = icmp eq i32 %389, 0
  %531 = sub nsw i32 0, %529
  %532 = select i1 %530, i32 %529, i32 %531
  br label %533

533:                                              ; preds = %403, %528
  %534 = phi i32 [ %407, %403 ], [ %532, %528 ]
  %535 = icmp eq i32 %534, 0
  %536 = add nuw nsw i64 %376, 1
  br i1 %535, label %375, label %547

537:                                              ; preds = %382, %378, %375, %395
  %538 = load %struct._xmlXPathObject*, %struct._xmlXPathObject** %241, align 8
  %539 = getelementptr inbounds %struct._xmlXPathObject, %struct._xmlXPathObject* %538, i64 0, i32 6
  %540 = load i32, i32* %539, align 8
  %541 = getelementptr inbounds %struct._xmlXPathObject*, %struct._xmlXPathObject** %44, i64 %374
  %542 = load %struct._xmlXPathObject*, %struct._xmlXPathObject** %541, align 8
  %543 = getelementptr inbounds %struct._xmlXPathObject, %struct._xmlXPathObject* %542, i64 0, i32 6
  %544 = load i32, i32* %543, align 8
  %545 = icmp sgt i32 %540, %544
  %546 = zext i1 %545 to i32
  br label %547

547:                                              ; preds = %533, %368, %537
  %548 = phi i32 [ %546, %537 ], [ %371, %368 ], [ %534, %533 ]
  %549 = icmp sgt i32 %548, 0
  br i1 %549, label %550, label %591

550:                                              ; preds = %547
  %551 = bitcast %struct._xmlXPathObject** %241 to i64*
  %552 = load i64, i64* %551, align 8
  br label %553

553:                                              ; preds = %244, %550
  %554 = phi i64* [ %246, %244 ], [ %551, %550 ]
  %555 = phi i64 [ %245, %244 ], [ %552, %550 ]
  %556 = sext i32 %239 to i64
  %557 = getelementptr inbounds %struct._xmlXPathObject*, %struct._xmlXPathObject** %44, i64 %556
  %558 = bitcast %struct._xmlXPathObject** %557 to i64*
  %559 = load i64, i64* %558, align 8
  store i64 %559, i64* %554, align 8
  store i64 %555, i64* %558, align 8
  %560 = load %struct._xmlNode**, %struct._xmlNode*** %212, align 8
  %561 = getelementptr inbounds %struct._xmlNode*, %struct._xmlNode** %560, i64 %240
  %562 = bitcast %struct._xmlNode** %561 to i64*
  %563 = load i64, i64* %562, align 8
  %564 = getelementptr inbounds %struct._xmlNode*, %struct._xmlNode** %560, i64 %556
  %565 = bitcast %struct._xmlNode** %564 to i64*
  %566 = load i64, i64* %565, align 8
  store i64 %566, i64* %562, align 8
  %567 = load %struct._xmlNode**, %struct._xmlNode*** %212, align 8
  %568 = getelementptr inbounds %struct._xmlNode*, %struct._xmlNode** %567, i64 %556
  %569 = bitcast %struct._xmlNode** %568 to i64*
  store i64 %563, i64* %569, align 8
  br i1 %213, label %570, label %588

570:                                              ; preds = %553, %579
  %571 = phi i64 [ %586, %579 ], [ 1, %553 ]
  %572 = getelementptr inbounds %struct._xmlNode*, %struct._xmlNode** %1, i64 %571
  %573 = load %struct._xmlNode*, %struct._xmlNode** %572, align 8
  %574 = icmp eq %struct._xmlNode* %573, null
  br i1 %574, label %588, label %575

575:                                              ; preds = %570
  %576 = getelementptr inbounds [15 x %struct._xmlXPathObject**], [15 x %struct._xmlXPathObject**]* %4, i64 0, i64 %571
  %577 = load %struct._xmlXPathObject**, %struct._xmlXPathObject*** %576, align 8
  %578 = icmp eq %struct._xmlXPathObject** %577, null
  br i1 %578, label %588, label %579

579:                                              ; preds = %575
  %580 = getelementptr inbounds %struct._xmlXPathObject*, %struct._xmlXPathObject** %577, i64 %240
  %581 = bitcast %struct._xmlXPathObject** %580 to i64*
  %582 = load i64, i64* %581, align 8
  %583 = getelementptr inbounds %struct._xmlXPathObject*, %struct._xmlXPathObject** %577, i64 %556
  %584 = bitcast %struct._xmlXPathObject** %583 to i64*
  %585 = load i64, i64* %584, align 8
  store i64 %585, i64* %581, align 8
  store i64 %582, i64* %584, align 8
  %586 = add nuw nsw i64 %571, 1
  %587 = icmp eq i64 %586, %215
  br i1 %587, label %588, label %570

588:                                              ; preds = %575, %570, %579, %553
  %589 = sub nsw i32 %238, %220
  %590 = icmp sgt i32 %589, -1
  br i1 %590, label %237, label %591

591:                                              ; preds = %588, %547, %228
  %592 = add nsw i64 %229, 1
  %593 = trunc i64 %592 to i32
  %594 = icmp eq i32 %42, %593
  br i1 %594, label %216, label %228

595:                                              ; preds = %642
  %596 = load %"struct.blink::(anonymous namespace)::UCollatorHolder"*, %"struct.blink::(anonymous namespace)::UCollatorHolder"** bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink23XsltUnicodeSortFunctionEP21_xsltTransformContextPP8_xmlNodeiE17s_cached_collator to %"struct.blink::(anonymous namespace)::UCollatorHolder"**), align 8
  store i64 %193, i64* bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink23XsltUnicodeSortFunctionEP21_xsltTransformContextPP8_xmlNodeiE17s_cached_collator to i64*), align 8
  %597 = icmp eq %"struct.blink::(anonymous namespace)::UCollatorHolder"* %596, null
  br i1 %597, label %605, label %598

598:                                              ; preds = %595
  %599 = getelementptr inbounds %"struct.blink::(anonymous namespace)::UCollatorHolder", %"struct.blink::(anonymous namespace)::UCollatorHolder"* %596, i64 0, i32 0, i32 0, i32 0, i32 0
  %600 = load %struct.UCollator*, %struct.UCollator** %599, align 8
  store %struct.UCollator* null, %struct.UCollator** %599, align 8
  %601 = icmp eq %struct.UCollator* %600, null
  br i1 %601, label %603, label %602

602:                                              ; preds = %598
  call void @ucol_close_69(%struct.UCollator* nonnull %600) #9
  br label %603

603:                                              ; preds = %602, %598
  %604 = bitcast %"struct.blink::(anonymous namespace)::UCollatorHolder"* %596 to i8*
  call void @_ZdlPv(i8* %604) #11
  br label %605

605:                                              ; preds = %603, %595
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %9) #9
  call void @llvm.lifetime.end.p0i8(i64 157, i8* nonnull %135) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %134) #9
  br label %645

606:                                              ; preds = %642, %224
  %607 = phi i64 [ 0, %224 ], [ %643, %642 ]
  %608 = getelementptr inbounds %struct._xmlNode*, %struct._xmlNode** %1, i64 %607
  %609 = load %struct._xmlNode*, %struct._xmlNode** %608, align 8
  %610 = getelementptr inbounds %struct._xmlNode, %struct._xmlNode* %609, i64 0, i32 13
  %611 = bitcast i8** %610 to %struct._xsltStylePreComp**
  %612 = load %struct._xsltStylePreComp*, %struct._xsltStylePreComp** %611, align 8
  %613 = getelementptr inbounds [15 x i32], [15 x i32]* %5, i64 0, i64 %607
  %614 = load i32, i32* %613, align 4
  %615 = icmp eq i32 %614, 1
  br i1 %615, label %616, label %620

616:                                              ; preds = %606
  %617 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  %618 = getelementptr inbounds %struct._xsltStylePreComp, %struct._xsltStylePreComp* %612, i64 0, i32 4
  %619 = load i8*, i8** %618, align 8
  call void %617(i8* %619) #9
  store i8* null, i8** %618, align 8
  br label %620

620:                                              ; preds = %616, %606
  %621 = getelementptr inbounds [15 x i32], [15 x i32]* %6, i64 0, i64 %607
  %622 = load i32, i32* %621, align 4
  %623 = icmp eq i32 %622, 1
  br i1 %623, label %624, label %628

624:                                              ; preds = %620
  %625 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  %626 = getelementptr inbounds %struct._xsltStylePreComp, %struct._xsltStylePreComp* %612, i64 0, i32 7
  %627 = load i8*, i8** %626, align 8
  call void %625(i8* %627) #9
  store i8* null, i8** %626, align 8
  br label %628

628:                                              ; preds = %624, %620
  %629 = getelementptr inbounds [15 x %struct._xmlXPathObject**], [15 x %struct._xmlXPathObject**]* %4, i64 0, i64 %607
  %630 = load %struct._xmlXPathObject**, %struct._xmlXPathObject*** %629, align 8
  %631 = icmp eq %struct._xmlXPathObject** %630, null
  %632 = bitcast %struct._xmlXPathObject** %630 to i8*
  br i1 %631, label %642, label %633

633:                                              ; preds = %628
  br i1 %225, label %636, label %634

634:                                              ; preds = %636, %633
  %635 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  call void %635(i8* nonnull %632) #9
  br label %642

636:                                              ; preds = %633, %636
  %637 = phi i64 [ %640, %636 ], [ 0, %633 ]
  %638 = getelementptr inbounds %struct._xmlXPathObject*, %struct._xmlXPathObject** %630, i64 %637
  %639 = load %struct._xmlXPathObject*, %struct._xmlXPathObject** %638, align 8
  call void @xmlXPathFreeObject(%struct._xmlXPathObject* %639) #9
  %640 = add nuw nsw i64 %637, 1
  %641 = icmp eq i64 %640, %227
  br i1 %641, label %634, label %636

642:                                              ; preds = %628, %634
  %643 = add nuw nsw i64 %607, 1
  %644 = icmp eq i64 %643, %226
  br i1 %644, label %595, label %606

645:                                              ; preds = %605, %41, %35, %31, %26, %23, %3
  call void @llvm.lifetime.end.p0i8(i64 60, i8* nonnull %16) #9
  call void @llvm.lifetime.end.p0i8(i64 60, i8* nonnull %15) #9
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %14) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i8* @xsltEvalAttrValueTemplate(%struct._xsltTransformContext*, %struct._xmlNode*, i8*, i8*) local_unnamed_addr #2

declare i32 @xmlStrEqual(i8*, i8*) local_unnamed_addr #2

declare void @xsltTransformError(%struct._xsltTransformContext*, %struct._xsltStylesheet*, %struct._xmlNode*, i8*, ...) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare %struct._xmlXPathObject** @xsltComputeSortResult(%struct._xsltTransformContext*, %struct._xmlNode*) local_unnamed_addr #2

declare i32 @ucol_getFunctionalEquivalent_69(i8*, i32, i8*, i8*, i8*, i32*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #3

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #4

; Function Attrs: alwaysinline nofree nounwind ssp uwtable
declare i8* @strncpy(i8* noalias returned, i8* noalias nocapture readonly, i64) local_unnamed_addr #5

declare %struct.UCollator* @ucol_open_69(i8*, i32*) local_unnamed_addr #2

declare void @ucol_setAttribute_69(%struct.UCollator*, i32, i32, i32*) local_unnamed_addr #2

declare i32 @xmlXPathIsNaN(double) local_unnamed_addr #2

declare i32 @ucol_strcoll_69(%struct.UCollator*, i16*, i32, i16*, i32) local_unnamed_addr #2

declare void @xmlXPathFreeObject(%struct._xmlXPathObject*) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZN3WTF6String8FromUTF8EPKh(i8*) local_unnamed_addr #2

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

declare void @ucol_close_69(%struct.UCollator*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj0ENS_18PartitionAllocatorEE6AppendIhEEvPKT_j(%"class.WTF::Vector"*, i8*, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, %2
  %10 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp ugt i32 %9, %11
  br i1 %12, label %13, label %52

13:                                               ; preds = %3
  %14 = lshr i32 %11, 2
  %15 = add nuw i32 %11, 1
  %16 = add i32 %15, %14
  %17 = icmp ugt i32 %16, 4
  %18 = select i1 %17, i32 %16, i32 4
  %19 = icmp ugt i32 %18, %9
  %20 = select i1 %19, i32 %18, i32 %9
  %21 = icmp ult i32 %11, %20
  br i1 %21, label %22, label %52, !prof !4

22:                                               ; preds = %13
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i16*, i16** %23, align 8
  %25 = icmp eq i16* %24, null
  %26 = zext i32 %20 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64 %26) #9
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv, i64 0, i64 0)) #9
  br i1 %25, label %29, label %34

29:                                               ; preds = %22
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 1
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %10, align 8
  br label %52

34:                                               ; preds = %22
  %35 = lshr i64 %27, 1
  %36 = ptrtoint i8* %28 to i64
  %37 = load i16*, i16** %23, align 8
  %38 = icmp ne i8* %28, null
  %39 = icmp ne i16* %37, null
  %40 = and i1 %38, %39
  %41 = bitcast i16* %37 to i8*
  br i1 %40, label %42, label %48, !prof !4

42:                                               ; preds = %34
  %43 = load i32, i32* %7, align 4
  %44 = zext i32 %43 to i64
  %45 = shl nuw nsw i64 %44, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %28, i8* nonnull align 2 %41, i64 %45, i1 false) #9
  %46 = bitcast %"class.WTF::Vector"* %0 to i8**
  %47 = load i8*, i8** %46, align 8
  br label %48

48:                                               ; preds = %42, %34
  %49 = phi i8* [ %47, %42 ], [ %41, %34 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %49) #9
  %50 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %36, i64* %50 monotonic, align 8
  %51 = trunc i64 %35 to i32
  store i32 %51, i32* %10, align 8
  br label %52

52:                                               ; preds = %48, %29, %13, %3
  %53 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %53) #9
  %54 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %54, align 8
  %55 = load i32, i32* %7, align 4
  %56 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %56)
  %57 = icmp ult i32 %9, %55
  br i1 %57, label %59, label %58

58:                                               ; preds = %52
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56)
  store i8* null, i8** %54, align 8
  br label %68

59:                                               ; preds = %52
  %60 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  %61 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %55) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.13, i64 0, i64 0), i8* %60, i8* %61) #9
  %62 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %63 = load i8*, i8** %62, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56)
  store i8* %63, i8** %54, align 8
  %64 = icmp eq i8* %63, null
  br i1 %64, label %68, label %65

65:                                               ; preds = %59
  %66 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %66) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.14, i64 0, i64 0), i32 1907, %"class.logging::CheckOpResult"* nonnull %5) #9
  %67 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %66) #9
  br label %68

68:                                               ; preds = %58, %59, %65
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %53) #9
  %69 = zext i32 %2 to i64
  %70 = getelementptr inbounds i8, i8* %1, i64 %69
  %71 = icmp eq i32 %2, 0
  br i1 %71, label %158, label %72

72:                                               ; preds = %68
  %73 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %74 = load i16*, i16** %73, align 8
  %75 = load i32, i32* %7, align 4
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds i16, i16* %74, i64 %76
  %78 = icmp ult i32 %2, 16
  br i1 %78, label %147, label %79

79:                                               ; preds = %72
  %80 = bitcast i16* %77 to i8*
  %81 = add nuw nsw i64 %76, %69
  %82 = getelementptr i16, i16* %74, i64 %81
  %83 = bitcast i16* %82 to i8*
  %84 = icmp ugt i8* %70, %80
  %85 = icmp ugt i8* %83, %1
  %86 = and i1 %84, %85
  br i1 %86, label %147, label %87

87:                                               ; preds = %79
  %88 = and i64 %69, 4294967280
  %89 = getelementptr i16, i16* %77, i64 %88
  %90 = getelementptr i8, i8* %1, i64 %88
  %91 = add nsw i64 %88, -16
  %92 = lshr exact i64 %91, 4
  %93 = add nuw nsw i64 %92, 1
  %94 = and i64 %93, 1
  %95 = icmp eq i64 %91, 0
  br i1 %95, label %129, label %96

96:                                               ; preds = %87
  %97 = sub nuw nsw i64 %93, %94
  br label %98

98:                                               ; preds = %98, %96
  %99 = phi i64 [ 0, %96 ], [ %126, %98 ]
  %100 = phi i64 [ %97, %96 ], [ %127, %98 ]
  %101 = getelementptr i16, i16* %77, i64 %99
  %102 = getelementptr i8, i8* %1, i64 %99
  %103 = bitcast i8* %102 to <8 x i8>*
  %104 = load <8 x i8>, <8 x i8>* %103, align 1, !alias.scope !6
  %105 = getelementptr i8, i8* %102, i64 8
  %106 = bitcast i8* %105 to <8 x i8>*
  %107 = load <8 x i8>, <8 x i8>* %106, align 1, !alias.scope !6
  %108 = zext <8 x i8> %104 to <8 x i16>
  %109 = zext <8 x i8> %107 to <8 x i16>
  %110 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %110, align 2, !alias.scope !9, !noalias !6
  %111 = getelementptr i16, i16* %101, i64 8
  %112 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> %109, <8 x i16>* %112, align 2, !alias.scope !9, !noalias !6
  %113 = or i64 %99, 16
  %114 = getelementptr i16, i16* %77, i64 %113
  %115 = getelementptr i8, i8* %1, i64 %113
  %116 = bitcast i8* %115 to <8 x i8>*
  %117 = load <8 x i8>, <8 x i8>* %116, align 1, !alias.scope !6
  %118 = getelementptr i8, i8* %115, i64 8
  %119 = bitcast i8* %118 to <8 x i8>*
  %120 = load <8 x i8>, <8 x i8>* %119, align 1, !alias.scope !6
  %121 = zext <8 x i8> %117 to <8 x i16>
  %122 = zext <8 x i8> %120 to <8 x i16>
  %123 = bitcast i16* %114 to <8 x i16>*
  store <8 x i16> %121, <8 x i16>* %123, align 2, !alias.scope !9, !noalias !6
  %124 = getelementptr i16, i16* %114, i64 8
  %125 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> %122, <8 x i16>* %125, align 2, !alias.scope !9, !noalias !6
  %126 = add i64 %99, 32
  %127 = add i64 %100, -2
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %129, label %98, !llvm.loop !11

129:                                              ; preds = %98, %87
  %130 = phi i64 [ 0, %87 ], [ %126, %98 ]
  %131 = icmp eq i64 %94, 0
  br i1 %131, label %145, label %132

132:                                              ; preds = %129
  %133 = getelementptr i16, i16* %77, i64 %130
  %134 = getelementptr i8, i8* %1, i64 %130
  %135 = bitcast i8* %134 to <8 x i8>*
  %136 = load <8 x i8>, <8 x i8>* %135, align 1, !alias.scope !6
  %137 = getelementptr i8, i8* %134, i64 8
  %138 = bitcast i8* %137 to <8 x i8>*
  %139 = load <8 x i8>, <8 x i8>* %138, align 1, !alias.scope !6
  %140 = zext <8 x i8> %136 to <8 x i16>
  %141 = zext <8 x i8> %139 to <8 x i16>
  %142 = bitcast i16* %133 to <8 x i16>*
  store <8 x i16> %140, <8 x i16>* %142, align 2, !alias.scope !9, !noalias !6
  %143 = getelementptr i16, i16* %133, i64 8
  %144 = bitcast i16* %143 to <8 x i16>*
  store <8 x i16> %141, <8 x i16>* %144, align 2, !alias.scope !9, !noalias !6
  br label %145

145:                                              ; preds = %129, %132
  %146 = icmp eq i64 %88, %69
  br i1 %146, label %158, label %147

147:                                              ; preds = %145, %79, %72
  %148 = phi i16* [ %77, %79 ], [ %77, %72 ], [ %89, %145 ]
  %149 = phi i8* [ %1, %79 ], [ %1, %72 ], [ %90, %145 ]
  br label %150

150:                                              ; preds = %147, %150
  %151 = phi i16* [ %155, %150 ], [ %148, %147 ]
  %152 = phi i8* [ %156, %150 ], [ %149, %147 ]
  %153 = load i8, i8* %152, align 1
  %154 = zext i8 %153 to i16
  store i16 %154, i16* %151, align 2
  %155 = getelementptr inbounds i16, i16* %151, i64 1
  %156 = getelementptr inbounds i8, i8* %152, i64 1
  %157 = icmp eq i8* %156, %70
  br i1 %157, label %158, label %150, !llvm.loop !13

158:                                              ; preds = %150, %145, %68
  store i32 %9, i32* %7, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj0ENS_18PartitionAllocatorEE6AppendIDsEEvPKT_j(%"class.WTF::Vector"*, i16*, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, %2
  %10 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp ugt i32 %9, %11
  br i1 %12, label %13, label %101

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %15 = load i16*, i16** %14, align 8
  %16 = icmp ugt i16* %15, %1
  br i1 %16, label %21, label %17

17:                                               ; preds = %13
  %18 = zext i32 %8 to i64
  %19 = getelementptr inbounds i16, i16* %15, i64 %18
  %20 = icmp ugt i16* %19, %1
  br i1 %20, label %58, label %21

21:                                               ; preds = %17, %13
  %22 = lshr i32 %11, 2
  %23 = add nuw i32 %11, 1
  %24 = add i32 %23, %22
  %25 = icmp ugt i32 %24, 4
  %26 = select i1 %25, i32 %24, i32 4
  %27 = icmp ugt i32 %26, %9
  %28 = select i1 %27, i32 %26, i32 %9
  %29 = icmp ult i32 %11, %28
  br i1 %29, label %30, label %101, !prof !4

30:                                               ; preds = %21
  %31 = icmp eq i16* %15, null
  %32 = zext i32 %28 to i64
  %33 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64 %32) #9
  %34 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %33, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv, i64 0, i64 0)) #9
  br i1 %31, label %35, label %40

35:                                               ; preds = %30
  %36 = ptrtoint i8* %34 to i64
  %37 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %36, i64* %37 monotonic, align 8
  %38 = lshr i64 %33, 1
  %39 = trunc i64 %38 to i32
  store i32 %39, i32* %10, align 8
  br label %101

40:                                               ; preds = %30
  %41 = lshr i64 %33, 1
  %42 = ptrtoint i8* %34 to i64
  %43 = load i16*, i16** %14, align 8
  %44 = icmp ne i8* %34, null
  %45 = icmp ne i16* %43, null
  %46 = and i1 %44, %45
  %47 = bitcast i16* %43 to i8*
  br i1 %46, label %48, label %54, !prof !4

48:                                               ; preds = %40
  %49 = load i32, i32* %7, align 4
  %50 = zext i32 %49 to i64
  %51 = shl nuw nsw i64 %50, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %34, i8* nonnull align 2 %47, i64 %51, i1 false) #9
  %52 = bitcast %"class.WTF::Vector"* %0 to i8**
  %53 = load i8*, i8** %52, align 8
  br label %54

54:                                               ; preds = %48, %40
  %55 = phi i8* [ %53, %48 ], [ %47, %40 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %55) #9
  %56 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %42, i64* %56 monotonic, align 8
  %57 = trunc i64 %41 to i32
  store i32 %57, i32* %10, align 8
  br label %101

58:                                               ; preds = %17
  %59 = ptrtoint i16* %1 to i64
  %60 = ptrtoint i16* %15 to i64
  %61 = sub i64 %59, %60
  %62 = ashr exact i64 %61, 1
  %63 = lshr i32 %11, 2
  %64 = add nuw i32 %11, 1
  %65 = add i32 %64, %63
  %66 = icmp ugt i32 %65, 4
  %67 = select i1 %66, i32 %65, i32 4
  %68 = icmp ugt i32 %67, %9
  %69 = select i1 %68, i32 %67, i32 %9
  %70 = icmp ult i32 %11, %69
  br i1 %70, label %71, label %98, !prof !4

71:                                               ; preds = %58
  %72 = icmp eq i16* %15, null
  %73 = zext i32 %69 to i64
  %74 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64 %73) #9
  %75 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %74, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv, i64 0, i64 0)) #9
  %76 = ptrtoint i8* %75 to i64
  br i1 %72, label %77, label %79

77:                                               ; preds = %71
  %78 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %76, i64* %78 monotonic, align 8
  br label %94

79:                                               ; preds = %71
  %80 = load i16*, i16** %14, align 8
  %81 = icmp ne i8* %75, null
  %82 = icmp ne i16* %80, null
  %83 = and i1 %81, %82
  %84 = bitcast i16* %80 to i8*
  br i1 %83, label %85, label %91, !prof !4

85:                                               ; preds = %79
  %86 = load i32, i32* %7, align 4
  %87 = zext i32 %86 to i64
  %88 = shl nuw nsw i64 %87, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %75, i8* nonnull align 2 %84, i64 %88, i1 false) #9
  %89 = bitcast %"class.WTF::Vector"* %0 to i8**
  %90 = load i8*, i8** %89, align 8
  br label %91

91:                                               ; preds = %85, %79
  %92 = phi i8* [ %90, %85 ], [ %84, %79 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %92) #9
  %93 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %76, i64* %93 monotonic, align 8
  br label %94

94:                                               ; preds = %91, %77
  %95 = lshr i64 %74, 1
  %96 = trunc i64 %95 to i32
  store i32 %96, i32* %10, align 8
  %97 = bitcast i8* %75 to i16*
  br label %98

98:                                               ; preds = %94, %58
  %99 = phi i16* [ %15, %58 ], [ %97, %94 ]
  %100 = getelementptr inbounds i16, i16* %99, i64 %62
  br label %101

101:                                              ; preds = %98, %21, %35, %54, %3
  %102 = phi i16* [ %1, %3 ], [ %100, %98 ], [ %1, %21 ], [ %1, %35 ], [ %1, %54 ]
  %103 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %103) #9
  %104 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %104, align 8
  %105 = load i32, i32* %7, align 4
  %106 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %106)
  %107 = icmp ult i32 %9, %105
  br i1 %107, label %109, label %108

108:                                              ; preds = %101
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %106)
  store i8* null, i8** %104, align 8
  br label %118

109:                                              ; preds = %101
  %110 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  %111 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %105) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.13, i64 0, i64 0), i8* %110, i8* %111) #9
  %112 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %113 = load i8*, i8** %112, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %106)
  store i8* %113, i8** %104, align 8
  %114 = icmp eq i8* %113, null
  br i1 %114, label %118, label %115

115:                                              ; preds = %109
  %116 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %116) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.14, i64 0, i64 0), i32 1907, %"class.logging::CheckOpResult"* nonnull %5) #9
  %117 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %116) #9
  br label %118

118:                                              ; preds = %108, %109, %115
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %103) #9
  %119 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %120 = load i16*, i16** %119, align 8
  %121 = load i32, i32* %7, align 4
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds i16, i16* %120, i64 %122
  %124 = icmp ne i16* %123, null
  %125 = icmp ne i16* %102, null
  %126 = and i1 %125, %124
  br i1 %126, label %127, label %132, !prof !4

127:                                              ; preds = %118
  %128 = zext i32 %2 to i64
  %129 = bitcast i16* %123 to i8*
  %130 = bitcast i16* %102 to i8*
  %131 = shl nuw nsw i64 %128, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %129, i8* nonnull align 2 %130, i64 %131, i1 false) #9
  br label %132

132:                                              ; preds = %118, %127
  store i32 %9, i32* %7, align 4
  ret void
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 1072693248
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 1072693248) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.16, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.17, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = shl i64 %0, 1
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #9
  ret i64 %21
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { alwaysinline nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { nounwind readonly }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
!3 = !{i8 0, i8 2}
!4 = !{!"branch_weights", i32 2000, i32 1}
!5 = !{!"branch_weights", i32 1, i32 2000}
!6 = !{!7}
!7 = distinct !{!7, !8}
!8 = distinct !{!8, !"LVerDomain"}
!9 = !{!10}
!10 = distinct !{!10, !8}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.isvectorized", i32 1}
!13 = distinct !{!13, !12}
