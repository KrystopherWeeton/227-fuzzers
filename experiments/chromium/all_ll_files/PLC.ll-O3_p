; ModuleID = '../../third_party/opus/src/silk/PLC.c'
source_filename = "../../third_party/opus/src/silk/PLC.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.silk_decoder_state = type { i32, [320 x i32], [16 x i32], [480 x i16], i32, i8, i32, i32, i32, i32, i32, i32, i32, [16 x i16], i32, i8*, i8*, i32, i32, i32, i16, [3 x i32], i32, [3 x i32], %struct._silk_resampler_state_struct, %struct.silk_NLSF_CB_struct*, %struct.SideInfoIndices, %struct.silk_CNG_struct, i32, i32, i32, %struct.silk_PLC_struct }
%struct._silk_resampler_state_struct = type { [6 x i32], %union.anon, [48 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i16* }
%union.anon = type { [36 x i32] }
%struct.silk_NLSF_CB_struct = type { i16, i16, i16, i16, i8*, i16*, i8*, i8*, i8*, i8*, i8*, i16* }
%struct.SideInfoIndices = type { [4 x i8], [4 x i8], [17 x i8], i16, i8, i8, i8, i8, i8, i8, i8 }
%struct.silk_CNG_struct = type { [320 x i32], [16 x i16], [16 x i32], i32, i32, i32 }
%struct.silk_PLC_struct = type { i32, [5 x i16], [16 x i16], i32, i32, i16, i32, i32, i16, [2 x i32], i32, i32, i32 }
%struct.silk_decoder_control = type { [4 x i32], [4 x i32], [2 x [16 x i16]], [20 x i16], i32 }

@HARM_ATT_Q15 = internal unnamed_addr constant [2 x i16] [i16 32440, i16 31130], align 2
@PLC_RAND_ATTENUATE_V_Q15 = internal unnamed_addr constant [2 x i16] [i16 31130, i16 26214], align 2
@PLC_RAND_ATTENUATE_UV_Q15 = internal unnamed_addr constant [2 x i16] [i16 32440, i16 29491], align 2
@.str = private unnamed_addr constant [26 x i8] c"assertion failed: idx > 0\00", align 1
@.str.1 = private unnamed_addr constant [38 x i8] c"../../third_party/opus/src/silk/PLC.c\00", align 1
@.str.2 = private unnamed_addr constant [41 x i8] c"assertion failed: psDec->LPC_order >= 10\00", align 1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @silk_PLC_Reset(%struct.silk_decoder_state* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 9
  %3 = load i32, i32* %2, align 8
  %4 = shl i32 %3, 7
  %5 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 0
  store i32 %4, i32* %5, align 4
  %6 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 9, i64 0
  store i32 65536, i32* %6, align 4
  %7 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 9, i64 1
  store i32 65536, i32* %7, align 4
  %8 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 12
  store i32 20, i32* %8, align 4
  %9 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 11
  store i32 2, i32* %9, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @silk_PLC(%struct.silk_decoder_state*, %struct.silk_decoder_control* nocapture, i16* nocapture, i32, i32) local_unnamed_addr #1 {
  %6 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 6
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 10
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %7, %9
  br i1 %10, label %20, label %11

11:                                               ; preds = %5
  %12 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 9
  %13 = load i32, i32* %12, align 8
  %14 = shl i32 %13, 7
  %15 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 9, i64 0
  store i32 65536, i32* %16, align 4
  %17 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 9, i64 1
  store i32 65536, i32* %17, align 4
  %18 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 12
  store i32 20, i32* %18, align 4
  %19 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 11
  store i32 2, i32* %19, align 4
  store i32 %7, i32* %8, align 4
  br label %20

20:                                               ; preds = %5, %11
  %21 = icmp eq i32 %3, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %20
  tail call fastcc void @silk_PLC_conceal(%struct.silk_decoder_state* %0, %struct.silk_decoder_control* %1, i16* %2, i32 %4)
  %23 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 28
  %24 = load i32, i32* %23, align 8
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %23, align 8
  br label %179

26:                                               ; preds = %20
  %27 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31
  %28 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 26, i32 5
  %29 = load i8, i8* %28, align 1
  %30 = sext i8 %29 to i32
  %31 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 29
  store i32 %30, i32* %31, align 4
  %32 = icmp eq i8 %29, 2
  br i1 %32, label %33, label %145

33:                                               ; preds = %26
  %34 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 10
  %35 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 8
  %36 = load i32, i32* %35, align 4
  %37 = add nsw i32 %36, -1
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds %struct.silk_decoder_control, %struct.silk_decoder_control* %1, i64 0, i32 0, i64 %38
  %40 = load i32, i32* %39, align 4
  %41 = icmp slt i32 %40, 1
  %42 = icmp eq i32 %36, 0
  %43 = or i1 %42, %41
  br i1 %43, label %108, label %44

44:                                               ; preds = %33
  %45 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 1, i64 0
  %46 = bitcast i16* %45 to i8*
  %47 = getelementptr inbounds %struct.silk_PLC_struct, %struct.silk_PLC_struct* %27, i64 0, i32 0
  %48 = zext i32 %36 to i64
  br label %49

49:                                               ; preds = %97, %44
  %50 = phi i64 [ %100, %97 ], [ 0, %44 ]
  %51 = phi i32 [ %98, %97 ], [ %40, %44 ]
  %52 = phi i32 [ %99, %97 ], [ 0, %44 ]
  %53 = phi i32 [ %101, %97 ], [ 0, %44 ]
  %54 = xor i32 %53, -1
  %55 = add i32 %36, %54
  %56 = mul nsw i32 %55, 5
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds %struct.silk_decoder_control, %struct.silk_decoder_control* %1, i64 0, i32 3, i64 %57
  %59 = load i16, i16* %58, align 2
  %60 = sext i16 %59 to i32
  %61 = add nsw i64 %57, 1
  %62 = getelementptr inbounds %struct.silk_decoder_control, %struct.silk_decoder_control* %1, i64 0, i32 3, i64 %61
  %63 = load i16, i16* %62, align 2
  %64 = sext i16 %63 to i32
  %65 = add nsw i32 %64, %60
  %66 = add nsw i64 %57, 2
  %67 = getelementptr inbounds %struct.silk_decoder_control, %struct.silk_decoder_control* %1, i64 0, i32 3, i64 %66
  %68 = load i16, i16* %67, align 2
  %69 = sext i16 %68 to i32
  %70 = add nsw i32 %65, %69
  %71 = add nsw i64 %57, 3
  %72 = getelementptr inbounds %struct.silk_decoder_control, %struct.silk_decoder_control* %1, i64 0, i32 3, i64 %71
  %73 = load i16, i16* %72, align 2
  %74 = sext i16 %73 to i32
  %75 = add nsw i32 %70, %74
  %76 = add nsw i64 %57, 4
  %77 = getelementptr inbounds %struct.silk_decoder_control, %struct.silk_decoder_control* %1, i64 0, i32 3, i64 %76
  %78 = load i16, i16* %77, align 2
  %79 = sext i16 %78 to i32
  %80 = add nsw i32 %75, %79
  %81 = icmp sgt i32 %80, %52
  br i1 %81, label %82, label %97

82:                                               ; preds = %49
  %83 = trunc i64 %50 to i32
  %84 = xor i32 %83, 65535
  %85 = add i32 %84, %36
  %86 = shl i32 %85, 16
  %87 = ashr exact i32 %86, 16
  %88 = mul nsw i32 %87, 5
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds %struct.silk_decoder_control, %struct.silk_decoder_control* %1, i64 0, i32 3, i64 %89
  %91 = bitcast i16* %90 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %46, i8* align 2 %91, i64 10, i1 false) #7
  %92 = sext i32 %55 to i64
  %93 = getelementptr inbounds %struct.silk_decoder_control, %struct.silk_decoder_control* %1, i64 0, i32 0, i64 %92
  %94 = load i32, i32* %93, align 4
  %95 = shl i32 %94, 8
  store i32 %95, i32* %47, align 4
  %96 = load i32, i32* %39, align 4
  br label %97

97:                                               ; preds = %82, %49
  %98 = phi i32 [ %96, %82 ], [ %51, %49 ]
  %99 = phi i32 [ %80, %82 ], [ %52, %49 ]
  %100 = add nuw nsw i64 %50, 1
  %101 = add nuw nsw i32 %53, 1
  %102 = load i32, i32* %34, align 4
  %103 = trunc i64 %100 to i32
  %104 = mul nsw i32 %102, %103
  %105 = icmp sge i32 %104, %98
  %106 = icmp eq i64 %100, %48
  %107 = or i1 %106, %105
  br i1 %107, label %108, label %49

108:                                              ; preds = %97, %33
  %109 = phi i32 [ 0, %33 ], [ %99, %97 ]
  %110 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 1
  %111 = bitcast [5 x i16]* %110 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %111, i8 0, i64 10, i1 false) #7
  %112 = trunc i32 %109 to i16
  %113 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 1, i64 2
  store i16 %112, i16* %113, align 4
  %114 = icmp slt i32 %109, 11469
  br i1 %114, label %115, label %130

115:                                              ; preds = %108
  %116 = icmp sgt i32 %109, 1
  %117 = select i1 %116, i32 %109, i32 1
  %118 = udiv i32 11744256, %117
  %119 = shl i32 %118, 16
  %120 = ashr exact i32 %119, 16
  %121 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 1, i64 0
  store i16 0, i16* %121, align 2
  %122 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 1, i64 1
  store i16 0, i16* %122, align 2
  %123 = shl i32 %109, 16
  %124 = ashr exact i32 %123, 16
  %125 = mul nsw i32 %120, %124
  %126 = lshr i32 %125, 10
  %127 = trunc i32 %126 to i16
  store i16 %127, i16* %113, align 2
  %128 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 1, i64 3
  store i16 0, i16* %128, align 2
  %129 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 1, i64 4
  store i16 0, i16* %129, align 2
  br label %154

130:                                              ; preds = %108
  %131 = icmp sgt i32 %109, 15565
  br i1 %131, label %132, label %154

132:                                              ; preds = %130
  %133 = udiv i32 255016960, %109
  %134 = shl i32 %133, 16
  %135 = ashr exact i32 %134, 16
  %136 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 1, i64 0
  store i16 0, i16* %136, align 2
  %137 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 1, i64 1
  store i16 0, i16* %137, align 2
  %138 = shl i32 %109, 16
  %139 = ashr exact i32 %138, 16
  %140 = mul nsw i32 %135, %139
  %141 = lshr i32 %140, 14
  %142 = trunc i32 %141 to i16
  store i16 %142, i16* %113, align 2
  %143 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 1, i64 3
  store i16 0, i16* %143, align 2
  %144 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 1, i64 4
  store i16 0, i16* %144, align 2
  br label %154

145:                                              ; preds = %26
  %146 = shl i32 %7, 16
  %147 = ashr exact i32 %146, 16
  %148 = mul nsw i32 %147, 4608
  %149 = getelementptr inbounds %struct.silk_PLC_struct, %struct.silk_PLC_struct* %27, i64 0, i32 0
  store i32 %148, i32* %149, align 4
  %150 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 1, i64 0
  %151 = bitcast i16* %150 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %151, i8 0, i64 10, i1 false) #7
  %152 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 8
  %153 = load i32, i32* %152, align 4
  br label %154

154:                                              ; preds = %115, %130, %132, %145
  %155 = phi i32 [ %36, %132 ], [ %36, %115 ], [ %36, %130 ], [ %153, %145 ]
  %156 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 2, i64 0
  %157 = bitcast i16* %156 to i8*
  %158 = getelementptr inbounds %struct.silk_decoder_control, %struct.silk_decoder_control* %1, i64 0, i32 2, i64 1, i64 0
  %159 = bitcast i16* %158 to i8*
  %160 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 12
  %161 = load i32, i32* %160, align 4
  %162 = sext i32 %161 to i64
  %163 = shl nsw i64 %162, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %157, i8* align 4 %159, i64 %163, i1 false) #7
  %164 = getelementptr inbounds %struct.silk_decoder_control, %struct.silk_decoder_control* %1, i64 0, i32 4
  %165 = load i32, i32* %164, align 4
  %166 = trunc i32 %165 to i16
  %167 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 8
  store i16 %166, i16* %167, align 4
  %168 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 9, i64 0
  %169 = add nsw i32 %155, -2
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds %struct.silk_decoder_control, %struct.silk_decoder_control* %1, i64 0, i32 1, i64 %170
  %172 = bitcast i32* %171 to i64*
  %173 = bitcast i32* %168 to i64*
  %174 = load i64, i64* %172, align 4
  store i64 %174, i64* %173, align 4
  %175 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 10
  %176 = load i32, i32* %175, align 4
  %177 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 12
  store i32 %176, i32* %177, align 4
  %178 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 11
  store i32 %155, i32* %178, align 4
  br label %179

179:                                              ; preds = %154, %22
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @silk_PLC_conceal(%struct.silk_decoder_state*, %struct.silk_decoder_control* nocapture, i16* nocapture, i32) unnamed_addr #2 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca [16 x i16], align 16
  %10 = alloca [2 x i32], align 4
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #7
  store i32 -1431655766, i32* %5, align 4
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #7
  store i32 -1431655766, i32* %6, align 4
  %13 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #7
  store i32 -1431655766, i32* %7, align 4
  %14 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #7
  store i32 -1431655766, i32* %8, align 4
  %15 = bitcast [16 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %15) #7
  %16 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 0
  %17 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 1
  %18 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 2
  %19 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 3
  %20 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 4
  %21 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 5
  %22 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 6
  %23 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 7
  %24 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 8
  %25 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 9
  %26 = bitcast [2 x i32]* %10 to i8*
  %27 = bitcast [16 x i16]* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #7
  %28 = getelementptr inbounds [2 x i32], [2 x i32]* %10, i64 0, i64 0
  %29 = getelementptr inbounds [2 x i32], [2 x i32]* %10, i64 0, i64 1
  %30 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 11
  %31 = load i32, i32* %30, align 8
  %32 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 9
  %33 = load i32, i32* %32, align 8
  %34 = add nsw i32 %33, %31
  %35 = sext i32 %34 to i64
  %36 = shl nsw i64 %35, 2
  %37 = alloca i32, i64 %35, align 16
  %38 = bitcast i32* %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %38, i8 -86, i64 %36, i1 false)
  %39 = sext i32 %31 to i64
  %40 = shl nsw i64 %39, 1
  %41 = alloca i16, i64 %39, align 16
  %42 = bitcast i16* %41 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %42, i8 -86, i64 %40, i1 false)
  %43 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 9, i64 0
  %44 = load i32, i32* %43, align 4
  %45 = ashr i32 %44, 6
  store i32 %45, i32* %28, align 4
  %46 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 9, i64 1
  %47 = load i32, i32* %46, align 4
  %48 = ashr i32 %47, 6
  store i32 %48, i32* %29, align 4
  %49 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 14
  %50 = load i32, i32* %49, align 8
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %55, label %52

52:                                               ; preds = %4
  %53 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 2, i64 0
  %54 = bitcast i16* %53 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %54, i8 0, i64 32, i1 false)
  br label %55

55:                                               ; preds = %4, %52
  %56 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 1, i64 0
  %57 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 10
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 8
  %60 = load i32, i32* %59, align 4
  call fastcc void @silk_PLC_energy(i32* nonnull %7, i32* nonnull %5, i32* nonnull %8, i32* nonnull %6, i32* %56, i32* nonnull %28, i32 %58, i32 %60)
  %61 = load i32, i32* %7, align 4
  %62 = load i32, i32* %6, align 4
  %63 = ashr i32 %61, %62
  %64 = load i32, i32* %8, align 4
  %65 = load i32, i32* %5, align 4
  %66 = ashr i32 %64, %65
  %67 = icmp slt i32 %63, %66
  %68 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 11
  %69 = load i32, i32* %68, align 4
  %70 = zext i1 %67 to i32
  %71 = sub i32 %69, %70
  %72 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 12
  %73 = load i32, i32* %72, align 4
  %74 = mul nsw i32 %73, %71
  %75 = icmp sgt i32 %74, 128
  %76 = select i1 %75, i32 %74, i32 128
  %77 = add nsw i32 %76, -128
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 1, i64 %78
  %80 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 1, i64 0
  %81 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 5
  %82 = load i16, i16* %81, align 4
  %83 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 28
  %84 = load i32, i32* %83, align 8
  %85 = icmp slt i32 %84, 1
  %86 = select i1 %85, i32 %84, i32 1
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds [2 x i16], [2 x i16]* @HARM_ATT_Q15, i64 0, i64 %87
  %89 = load i16, i16* %88, align 2
  %90 = sext i16 %89 to i32
  %91 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 29
  %92 = load i32, i32* %91, align 4
  %93 = icmp eq i32 %92, 2
  %94 = select i1 %93, [2 x i16]* @PLC_RAND_ATTENUATE_V_Q15, [2 x i16]* @PLC_RAND_ATTENUATE_UV_Q15
  %95 = getelementptr inbounds [2 x i16], [2 x i16]* %94, i64 0, i64 %87
  %96 = load i16, i16* %95, align 2
  %97 = sext i16 %96 to i32
  %98 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 2, i64 0
  %99 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 12
  %100 = load i32, i32* %99, align 4
  call void @silk_bwexpander(i16* %98, i32 %100, i32 64881) #7
  %101 = bitcast i16* %98 to i8*
  %102 = load i32, i32* %99, align 4
  %103 = sext i32 %102 to i64
  %104 = shl nsw i64 %103, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %15, i8* align 2 %101, i64 %104, i1 false)
  %105 = load i32, i32* %83, align 8
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %148

107:                                              ; preds = %55
  %108 = load i32, i32* %91, align 4
  %109 = icmp eq i32 %108, 2
  br i1 %109, label %110, label %134

110:                                              ; preds = %107
  %111 = load i16, i16* %80, align 2
  %112 = sub i16 16384, %111
  %113 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 1, i64 1
  %114 = load i16, i16* %113, align 2
  %115 = sub i16 %112, %114
  %116 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 1, i64 2
  %117 = load i16, i16* %116, align 2
  %118 = sub i16 %115, %117
  %119 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 1, i64 3
  %120 = load i16, i16* %119, align 2
  %121 = sub i16 %118, %120
  %122 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 1, i64 4
  %123 = load i16, i16* %122, align 2
  %124 = sub i16 %121, %123
  %125 = icmp sgt i16 %124, 3277
  %126 = select i1 %125, i16 %124, i16 3277
  %127 = zext i16 %126 to i32
  %128 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 8
  %129 = load i16, i16* %128, align 4
  %130 = sext i16 %129 to i32
  %131 = mul nsw i32 %130, %127
  %132 = lshr i32 %131, 14
  %133 = trunc i32 %132 to i16
  br label %148

134:                                              ; preds = %107
  %135 = call i32 @silk_LPC_inverse_pred_gain_c(i16* %98, i32 %102) #7
  %136 = icmp slt i32 %135, 134217728
  %137 = select i1 %136, i32 %135, i32 134217728
  %138 = icmp sgt i32 %137, 4194304
  %139 = select i1 %138, i32 %137, i32 4194304
  %140 = shl nsw i32 %139, 3
  %141 = zext i32 %140 to i64
  %142 = sext i16 %96 to i64
  %143 = mul nsw i64 %141, %142
  %144 = lshr i64 %143, 16
  %145 = trunc i64 %144 to i32
  %146 = ashr i32 %145, 14
  %147 = load i32, i32* %99, align 4
  br label %148

148:                                              ; preds = %110, %134, %55
  %149 = phi i32 [ %102, %110 ], [ %147, %134 ], [ %102, %55 ]
  %150 = phi i32 [ %97, %110 ], [ %146, %134 ], [ %97, %55 ]
  %151 = phi i16 [ %133, %110 ], [ 16384, %134 ], [ %82, %55 ]
  %152 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 4
  %153 = load i32, i32* %152, align 4
  %154 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 0
  %155 = load i32, i32* %154, align 4
  %156 = ashr i32 %155, 7
  %157 = add nsw i32 %156, 1
  %158 = ashr i32 %157, 1
  %159 = load i32, i32* %30, align 8
  %160 = add i32 %159, -2
  %161 = sub i32 %160, %149
  %162 = sub i32 %161, %158
  %163 = icmp sgt i32 %162, 0
  br i1 %163, label %165, label %164

164:                                              ; preds = %148
  call void @celt_fatal(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0), i32 294) #8
  unreachable

165:                                              ; preds = %148
  %166 = sext i32 %162 to i64
  %167 = getelementptr inbounds i16, i16* %41, i64 %166
  %168 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 3, i64 %166
  %169 = sub nsw i32 %159, %162
  call void @silk_LPC_analysis_filter(i16* %167, i16* %168, i16* nonnull %16, i32 %169, i32 %149, i32 %3) #7
  %170 = load i32, i32* %46, align 4
  %171 = icmp slt i32 %170, 0
  %172 = sub nsw i32 0, %170
  %173 = select i1 %171, i32 %172, i32 %170
  %174 = call i32 @llvm.ctlz.i32(i32 %173, i1 false) #7, !range !2
  %175 = add nsw i32 %174, -1
  %176 = shl i32 %170, %175
  %177 = ashr i32 %176, 16
  %178 = sdiv i32 536870911, %177
  %179 = shl i32 %178, 16
  %180 = sext i32 %176 to i64
  %181 = zext i32 %178 to i64
  %182 = shl i64 %181, 48
  %183 = ashr exact i64 %182, 29
  %184 = mul i64 %183, %180
  %185 = and i64 %184, -34359738368
  %186 = sub i64 0, %185
  %187 = ashr exact i64 %186, 32
  %188 = sext i32 %178 to i64
  %189 = mul nsw i64 %187, %188
  %190 = lshr i64 %189, 16
  %191 = trunc i64 %190 to i32
  %192 = add i32 %179, %191
  %193 = icmp ult i32 %173, 65536
  br i1 %193, label %194, label %212

194:                                              ; preds = %165
  %195 = add nsw i32 %174, -16
  %196 = ashr i32 -2147483648, %195
  %197 = lshr i32 2147483647, %195
  %198 = icmp sgt i32 %196, %197
  br i1 %198, label %199, label %204

199:                                              ; preds = %194
  %200 = icmp sgt i32 %192, %196
  br i1 %200, label %209, label %201

201:                                              ; preds = %199
  %202 = icmp slt i32 %192, %197
  %203 = select i1 %202, i32 %197, i32 %192
  br label %209

204:                                              ; preds = %194
  %205 = icmp sgt i32 %192, %197
  br i1 %205, label %209, label %206

206:                                              ; preds = %204
  %207 = icmp slt i32 %192, %196
  %208 = select i1 %207, i32 %196, i32 %192
  br label %209

209:                                              ; preds = %206, %204, %201, %199
  %210 = phi i32 [ %196, %199 ], [ %203, %201 ], [ %197, %204 ], [ %208, %206 ]
  %211 = shl i32 %210, %195
  br label %215

212:                                              ; preds = %165
  %213 = sub nsw i32 16, %174
  %214 = ashr i32 %192, %213
  br label %215

215:                                              ; preds = %212, %209
  %216 = phi i32 [ %211, %209 ], [ %214, %212 ]
  %217 = load i32, i32* %99, align 4
  %218 = add nsw i32 %217, %162
  %219 = load i32, i32* %30, align 8
  %220 = icmp slt i32 %218, %219
  br i1 %220, label %221, label %252

221:                                              ; preds = %215
  %222 = icmp slt i32 %216, 1073741823
  %223 = select i1 %222, i32 %216, i32 1073741823
  %224 = sext i32 %223 to i64
  %225 = add i32 %159, %217
  %226 = add i32 %225, -2
  %227 = sub i32 %226, %149
  %228 = sub i32 %227, %158
  %229 = sext i32 %228 to i64
  %230 = sext i32 %219 to i64
  %231 = sub nsw i64 %230, %229
  %232 = xor i64 %229, -1
  %233 = add nsw i64 %232, %230
  %234 = and i64 %231, 3
  %235 = icmp eq i64 %234, 0
  br i1 %235, label %249, label %236

236:                                              ; preds = %221, %236
  %237 = phi i64 [ %246, %236 ], [ %229, %221 ]
  %238 = phi i64 [ %247, %236 ], [ %234, %221 ]
  %239 = getelementptr inbounds i16, i16* %41, i64 %237
  %240 = load i16, i16* %239, align 2
  %241 = sext i16 %240 to i64
  %242 = mul nsw i64 %241, %224
  %243 = lshr i64 %242, 16
  %244 = trunc i64 %243 to i32
  %245 = getelementptr inbounds i32, i32* %37, i64 %237
  store i32 %244, i32* %245, align 4
  %246 = add nsw i64 %237, 1
  %247 = add i64 %238, -1
  %248 = icmp eq i64 %247, 0
  br i1 %248, label %249, label %236, !llvm.loop !3

249:                                              ; preds = %236, %221
  %250 = phi i64 [ %229, %221 ], [ %246, %236 ]
  %251 = icmp ult i64 %233, 3
  br i1 %251, label %252, label %265

252:                                              ; preds = %249, %265, %215
  %253 = load i32, i32* %59, align 4
  %254 = icmp sgt i32 %253, 0
  br i1 %254, label %255, label %435

255:                                              ; preds = %252
  %256 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 1, i64 1
  %257 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 1, i64 2
  %258 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 1, i64 3
  %259 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 1, i64 4
  %260 = shl i32 %150, 16
  %261 = ashr exact i32 %260, 16
  %262 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 6
  %263 = load i32, i32* %57, align 4
  %264 = icmp sgt i32 %263, 0
  br label %300

265:                                              ; preds = %249, %265
  %266 = phi i64 [ %298, %265 ], [ %250, %249 ]
  %267 = getelementptr inbounds i16, i16* %41, i64 %266
  %268 = load i16, i16* %267, align 2
  %269 = sext i16 %268 to i64
  %270 = mul nsw i64 %269, %224
  %271 = lshr i64 %270, 16
  %272 = trunc i64 %271 to i32
  %273 = getelementptr inbounds i32, i32* %37, i64 %266
  store i32 %272, i32* %273, align 4
  %274 = add nsw i64 %266, 1
  %275 = getelementptr inbounds i16, i16* %41, i64 %274
  %276 = load i16, i16* %275, align 2
  %277 = sext i16 %276 to i64
  %278 = mul nsw i64 %277, %224
  %279 = lshr i64 %278, 16
  %280 = trunc i64 %279 to i32
  %281 = getelementptr inbounds i32, i32* %37, i64 %274
  store i32 %280, i32* %281, align 4
  %282 = add nsw i64 %266, 2
  %283 = getelementptr inbounds i16, i16* %41, i64 %282
  %284 = load i16, i16* %283, align 2
  %285 = sext i16 %284 to i64
  %286 = mul nsw i64 %285, %224
  %287 = lshr i64 %286, 16
  %288 = trunc i64 %287 to i32
  %289 = getelementptr inbounds i32, i32* %37, i64 %282
  store i32 %288, i32* %289, align 4
  %290 = add nsw i64 %266, 3
  %291 = getelementptr inbounds i16, i16* %41, i64 %290
  %292 = load i16, i16* %291, align 2
  %293 = sext i16 %292 to i64
  %294 = mul nsw i64 %293, %224
  %295 = lshr i64 %294, 16
  %296 = trunc i64 %295 to i32
  %297 = getelementptr inbounds i32, i32* %37, i64 %290
  store i32 %296, i32* %297, align 4
  %298 = add nsw i64 %266, 4
  %299 = icmp slt i64 %298, %230
  br i1 %299, label %265, label %252

300:                                              ; preds = %255, %331
  %301 = phi i16 [ %151, %255 ], [ %362, %331 ]
  %302 = phi i32 [ %153, %255 ], [ %338, %331 ]
  %303 = phi i32 [ %159, %255 ], [ %337, %331 ]
  %304 = phi i32 [ %158, %255 ], [ %377, %331 ]
  %305 = phi i32 [ 0, %255 ], [ %378, %331 ]
  br i1 %264, label %312, label %306

306:                                              ; preds = %300
  %307 = load i16, i16* %80, align 2
  %308 = load i16, i16* %256, align 2
  %309 = load i16, i16* %257, align 2
  %310 = load i16, i16* %258, align 2
  %311 = load i16, i16* %259, align 2
  br label %331

312:                                              ; preds = %300
  %313 = sub nsw i32 2, %304
  %314 = add i32 %313, %303
  %315 = sext i32 %314 to i64
  %316 = getelementptr inbounds i32, i32* %37, i64 %315
  %317 = sext i16 %301 to i64
  %318 = sext i32 %303 to i64
  %319 = load i16, i16* %80, align 2
  %320 = load i16, i16* %256, align 2
  %321 = load i16, i16* %257, align 2
  %322 = load i16, i16* %258, align 2
  %323 = load i16, i16* %259, align 2
  %324 = sext i16 %319 to i64
  %325 = sext i16 %320 to i64
  %326 = sext i16 %321 to i64
  %327 = sext i16 %322 to i64
  %328 = sext i16 %323 to i64
  br label %380

329:                                              ; preds = %380
  %330 = trunc i64 %430 to i32
  br label %331

331:                                              ; preds = %306, %329
  %332 = phi i16 [ %311, %306 ], [ %323, %329 ]
  %333 = phi i16 [ %310, %306 ], [ %322, %329 ]
  %334 = phi i16 [ %309, %306 ], [ %321, %329 ]
  %335 = phi i16 [ %308, %306 ], [ %320, %329 ]
  %336 = phi i16 [ %307, %306 ], [ %319, %329 ]
  %337 = phi i32 [ %303, %306 ], [ %330, %329 ]
  %338 = phi i32 [ %302, %306 ], [ %411, %329 ]
  %339 = sext i16 %336 to i32
  %340 = mul nsw i32 %339, %90
  %341 = lshr i32 %340, 15
  %342 = trunc i32 %341 to i16
  store i16 %342, i16* %80, align 2
  %343 = sext i16 %335 to i32
  %344 = mul nsw i32 %343, %90
  %345 = lshr i32 %344, 15
  %346 = trunc i32 %345 to i16
  store i16 %346, i16* %256, align 2
  %347 = sext i16 %334 to i32
  %348 = mul nsw i32 %347, %90
  %349 = lshr i32 %348, 15
  %350 = trunc i32 %349 to i16
  store i16 %350, i16* %257, align 2
  %351 = sext i16 %333 to i32
  %352 = mul nsw i32 %351, %90
  %353 = lshr i32 %352, 15
  %354 = trunc i32 %353 to i16
  store i16 %354, i16* %258, align 2
  %355 = sext i16 %332 to i32
  %356 = mul nsw i32 %355, %90
  %357 = lshr i32 %356, 15
  %358 = trunc i32 %357 to i16
  store i16 %358, i16* %259, align 2
  %359 = sext i16 %301 to i32
  %360 = mul nsw i32 %261, %359
  %361 = lshr i32 %360, 15
  %362 = trunc i32 %361 to i16
  %363 = load i32, i32* %154, align 4
  %364 = sext i32 %363 to i64
  %365 = mul nsw i64 %364, 655
  %366 = ashr i64 %365, 16
  %367 = trunc i64 %366 to i32
  %368 = add i32 %363, %367
  %369 = load i32, i32* %262, align 4
  %370 = shl i32 %369, 16
  %371 = ashr exact i32 %370, 16
  %372 = mul nsw i32 %371, 4608
  %373 = icmp slt i32 %368, %372
  %374 = select i1 %373, i32 %368, i32 %372
  store i32 %374, i32* %154, align 4
  %375 = ashr i32 %374, 7
  %376 = add nsw i32 %375, 1
  %377 = ashr i32 %376, 1
  %378 = add nuw nsw i32 %305, 1
  %379 = icmp slt i32 %378, %253
  br i1 %379, label %300, label %433

380:                                              ; preds = %312, %380
  %381 = phi i64 [ %318, %312 ], [ %430, %380 ]
  %382 = phi i32 [ 0, %312 ], [ %431, %380 ]
  %383 = phi i32* [ %316, %312 ], [ %409, %380 ]
  %384 = phi i32 [ %302, %312 ], [ %411, %380 ]
  %385 = load i32, i32* %383, align 4
  %386 = sext i32 %385 to i64
  %387 = mul nsw i64 %324, %386
  %388 = lshr i64 %387, 16
  %389 = getelementptr inbounds i32, i32* %383, i64 -1
  %390 = load i32, i32* %389, align 4
  %391 = sext i32 %390 to i64
  %392 = mul nsw i64 %325, %391
  %393 = lshr i64 %392, 16
  %394 = getelementptr inbounds i32, i32* %383, i64 -2
  %395 = load i32, i32* %394, align 4
  %396 = sext i32 %395 to i64
  %397 = mul nsw i64 %326, %396
  %398 = lshr i64 %397, 16
  %399 = getelementptr inbounds i32, i32* %383, i64 -3
  %400 = load i32, i32* %399, align 4
  %401 = sext i32 %400 to i64
  %402 = mul nsw i64 %327, %401
  %403 = lshr i64 %402, 16
  %404 = getelementptr inbounds i32, i32* %383, i64 -4
  %405 = load i32, i32* %404, align 4
  %406 = sext i32 %405 to i64
  %407 = mul nsw i64 %328, %406
  %408 = lshr i64 %407, 16
  %409 = getelementptr inbounds i32, i32* %383, i64 1
  %410 = mul i32 %384, 196314165
  %411 = add i32 %410, 907633515
  %412 = lshr i32 %411, 25
  %413 = add nuw nsw i64 %393, %388
  %414 = add nuw nsw i64 %413, %398
  %415 = add nuw nsw i64 %414, %403
  %416 = add nuw nsw i64 %415, %408
  %417 = shl i64 %416, 32
  %418 = add i64 %417, 8589934592
  %419 = lshr exact i64 %418, 32
  %420 = zext i32 %412 to i64
  %421 = getelementptr inbounds i32, i32* %79, i64 %420
  %422 = load i32, i32* %421, align 4
  %423 = sext i32 %422 to i64
  %424 = mul nsw i64 %423, %317
  %425 = lshr i64 %424, 16
  %426 = add nuw nsw i64 %419, %425
  %427 = trunc i64 %426 to i32
  %428 = shl i32 %427, 2
  %429 = getelementptr inbounds i32, i32* %37, i64 %381
  store i32 %428, i32* %429, align 4
  %430 = add nsw i64 %381, 1
  %431 = add nuw nsw i32 %382, 1
  %432 = icmp slt i32 %431, %263
  br i1 %432, label %380, label %329

433:                                              ; preds = %331
  %434 = trunc i32 %361 to i16
  br label %435

435:                                              ; preds = %433, %252
  %436 = phi i32 [ %158, %252 ], [ %377, %433 ]
  %437 = phi i32 [ %153, %252 ], [ %338, %433 ]
  %438 = phi i16 [ %151, %252 ], [ %434, %433 ]
  %439 = add nsw i32 %219, -16
  %440 = sext i32 %439 to i64
  %441 = getelementptr inbounds i32, i32* %37, i64 %440
  %442 = bitcast i32* %441 to i8*
  %443 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 2, i64 0
  %444 = bitcast i32* %443 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %442, i8* align 4 %444, i64 64, i1 false)
  %445 = icmp sgt i32 %217, 9
  br i1 %445, label %446, label %481

446:                                              ; preds = %435
  %447 = load i32, i32* %32, align 8
  %448 = icmp sgt i32 %447, 0
  br i1 %448, label %449, label %666

449:                                              ; preds = %446
  %450 = load i16, i16* %16, align 16
  %451 = sext i16 %450 to i64
  %452 = load i16, i16* %17, align 2
  %453 = sext i16 %452 to i64
  %454 = load i16, i16* %18, align 4
  %455 = sext i16 %454 to i64
  %456 = load i16, i16* %19, align 2
  %457 = sext i16 %456 to i64
  %458 = load i16, i16* %20, align 8
  %459 = sext i16 %458 to i64
  %460 = load i16, i16* %21, align 2
  %461 = sext i16 %460 to i64
  %462 = load i16, i16* %22, align 4
  %463 = sext i16 %462 to i64
  %464 = load i16, i16* %23, align 2
  %465 = sext i16 %464 to i64
  %466 = load i16, i16* %24, align 16
  %467 = sext i16 %466 to i64
  %468 = load i16, i16* %25, align 2
  %469 = sext i16 %468 to i64
  %470 = sext i32 %48 to i64
  %471 = getelementptr inbounds i32, i32* %441, i64 15
  %472 = load i32, i32* %471, align 4
  %473 = getelementptr inbounds i32, i32* %441, i64 13
  %474 = load i32, i32* %473, align 4
  %475 = getelementptr inbounds i32, i32* %441, i64 11
  %476 = load i32, i32* %475, align 4
  %477 = getelementptr inbounds i32, i32* %441, i64 9
  %478 = load i32, i32* %477, align 4
  %479 = getelementptr inbounds i32, i32* %441, i64 7
  %480 = load i32, i32* %479, align 4
  br label %482

481:                                              ; preds = %435
  call void @celt_fatal(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0), i32 348) #8
  unreachable

482:                                              ; preds = %664, %449
  %483 = phi i32 [ %480, %449 ], [ %538, %664 ]
  %484 = phi i32 [ %478, %449 ], [ %525, %664 ]
  %485 = phi i32 [ %476, %449 ], [ %512, %664 ]
  %486 = phi i32 [ %474, %449 ], [ %499, %664 ]
  %487 = phi i32 [ %472, %449 ], [ %642, %664 ]
  %488 = phi i32 [ %217, %449 ], [ %665, %664 ]
  %489 = phi i64 [ 0, %449 ], [ %660, %664 ]
  %490 = ashr i32 %488, 1
  %491 = add nuw nsw i64 %489, 16
  %492 = sext i32 %487 to i64
  %493 = mul nsw i64 %451, %492
  %494 = lshr i64 %493, 16
  %495 = trunc i64 %494 to i32
  %496 = add i32 %490, %495
  %497 = add nuw nsw i64 %489, 14
  %498 = getelementptr inbounds i32, i32* %441, i64 %497
  %499 = load i32, i32* %498, align 4
  %500 = sext i32 %499 to i64
  %501 = mul nsw i64 %453, %500
  %502 = lshr i64 %501, 16
  %503 = trunc i64 %502 to i32
  %504 = add i32 %496, %503
  %505 = sext i32 %486 to i64
  %506 = mul nsw i64 %455, %505
  %507 = lshr i64 %506, 16
  %508 = trunc i64 %507 to i32
  %509 = add i32 %504, %508
  %510 = add nuw nsw i64 %489, 12
  %511 = getelementptr inbounds i32, i32* %441, i64 %510
  %512 = load i32, i32* %511, align 4
  %513 = sext i32 %512 to i64
  %514 = mul nsw i64 %457, %513
  %515 = lshr i64 %514, 16
  %516 = trunc i64 %515 to i32
  %517 = add i32 %509, %516
  %518 = sext i32 %485 to i64
  %519 = mul nsw i64 %459, %518
  %520 = lshr i64 %519, 16
  %521 = trunc i64 %520 to i32
  %522 = add i32 %517, %521
  %523 = add nuw nsw i64 %489, 10
  %524 = getelementptr inbounds i32, i32* %441, i64 %523
  %525 = load i32, i32* %524, align 4
  %526 = sext i32 %525 to i64
  %527 = mul nsw i64 %461, %526
  %528 = lshr i64 %527, 16
  %529 = trunc i64 %528 to i32
  %530 = add i32 %522, %529
  %531 = sext i32 %484 to i64
  %532 = mul nsw i64 %463, %531
  %533 = lshr i64 %532, 16
  %534 = trunc i64 %533 to i32
  %535 = add i32 %530, %534
  %536 = add nuw nsw i64 %489, 8
  %537 = getelementptr inbounds i32, i32* %441, i64 %536
  %538 = load i32, i32* %537, align 4
  %539 = sext i32 %538 to i64
  %540 = mul nsw i64 %465, %539
  %541 = lshr i64 %540, 16
  %542 = trunc i64 %541 to i32
  %543 = add i32 %535, %542
  %544 = sext i32 %483 to i64
  %545 = mul nsw i64 %467, %544
  %546 = lshr i64 %545, 16
  %547 = trunc i64 %546 to i32
  %548 = add i32 %543, %547
  %549 = add nuw nsw i64 %489, 6
  %550 = getelementptr inbounds i32, i32* %441, i64 %549
  %551 = load i32, i32* %550, align 4
  %552 = sext i32 %551 to i64
  %553 = mul nsw i64 %469, %552
  %554 = lshr i64 %553, 16
  %555 = trunc i64 %554 to i32
  %556 = add i32 %548, %555
  %557 = icmp sgt i32 %488, 10
  br i1 %557, label %558, label %622

558:                                              ; preds = %482
  %559 = zext i32 %488 to i64
  %560 = trunc i64 %491 to i32
  %561 = add nsw i64 %559, -10
  %562 = and i64 %561, 1
  %563 = icmp eq i32 %488, 11
  br i1 %563, label %602, label %564

564:                                              ; preds = %558
  %565 = sub nsw i64 %561, %562
  br label %566

566:                                              ; preds = %566, %564
  %567 = phi i64 [ 10, %564 ], [ %598, %566 ]
  %568 = phi i32 [ 10, %564 ], [ %599, %566 ]
  %569 = phi i32 [ %556, %564 ], [ %597, %566 ]
  %570 = phi i64 [ %565, %564 ], [ %600, %566 ]
  %571 = xor i32 %568, -1
  %572 = add nsw i32 %560, %571
  %573 = sext i32 %572 to i64
  %574 = getelementptr inbounds i32, i32* %441, i64 %573
  %575 = load i32, i32* %574, align 4
  %576 = sext i32 %575 to i64
  %577 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 %567
  %578 = load i16, i16* %577, align 4
  %579 = sext i16 %578 to i64
  %580 = mul nsw i64 %579, %576
  %581 = lshr i64 %580, 16
  %582 = trunc i64 %581 to i32
  %583 = add i32 %569, %582
  %584 = or i64 %567, 1
  %585 = sub nuw nsw i32 -2, %568
  %586 = add nsw i32 %585, %560
  %587 = sext i32 %586 to i64
  %588 = getelementptr inbounds i32, i32* %441, i64 %587
  %589 = load i32, i32* %588, align 4
  %590 = sext i32 %589 to i64
  %591 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 %584
  %592 = load i16, i16* %591, align 2
  %593 = sext i16 %592 to i64
  %594 = mul nsw i64 %593, %590
  %595 = lshr i64 %594, 16
  %596 = trunc i64 %595 to i32
  %597 = add i32 %583, %596
  %598 = add nuw nsw i64 %567, 2
  %599 = add nuw nsw i32 %568, 2
  %600 = add i64 %570, -2
  %601 = icmp eq i64 %600, 0
  br i1 %601, label %602, label %566

602:                                              ; preds = %566, %558
  %603 = phi i32 [ undef, %558 ], [ %597, %566 ]
  %604 = phi i64 [ 10, %558 ], [ %598, %566 ]
  %605 = phi i32 [ 10, %558 ], [ %599, %566 ]
  %606 = phi i32 [ %556, %558 ], [ %597, %566 ]
  %607 = icmp eq i64 %562, 0
  br i1 %607, label %622, label %608

608:                                              ; preds = %602
  %609 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 %604
  %610 = load i16, i16* %609, align 2
  %611 = sext i16 %610 to i64
  %612 = xor i32 %605, -1
  %613 = add nsw i32 %560, %612
  %614 = sext i32 %613 to i64
  %615 = getelementptr inbounds i32, i32* %441, i64 %614
  %616 = load i32, i32* %615, align 4
  %617 = sext i32 %616 to i64
  %618 = mul nsw i64 %611, %617
  %619 = lshr i64 %618, 16
  %620 = trunc i64 %619 to i32
  %621 = add i32 %606, %620
  br label %622

622:                                              ; preds = %608, %602, %482
  %623 = phi i32 [ %556, %482 ], [ %603, %602 ], [ %621, %608 ]
  %624 = getelementptr inbounds i32, i32* %441, i64 %491
  %625 = load i32, i32* %624, align 4
  %626 = icmp sgt i32 %623, -134217728
  %627 = select i1 %626, i32 %623, i32 -134217728
  %628 = icmp slt i32 %627, 134217727
  %629 = select i1 %628, i32 %627, i32 134217727
  %630 = shl nsw i32 %629, 4
  %631 = add i32 %625, %630
  %632 = icmp sgt i32 %631, -1
  br i1 %632, label %633, label %637

633:                                              ; preds = %622
  %634 = and i32 %625, %630
  %635 = icmp slt i32 %634, 0
  %636 = select i1 %635, i32 -2147483648, i32 %631
  br label %641

637:                                              ; preds = %622
  %638 = or i32 %625, %630
  %639 = icmp sgt i32 %638, -1
  %640 = select i1 %639, i32 2147483647, i32 %631
  br label %641

641:                                              ; preds = %637, %633
  %642 = phi i32 [ %636, %633 ], [ %640, %637 ]
  store i32 %642, i32* %624, align 4
  %643 = sext i32 %642 to i64
  %644 = mul nsw i64 %643, %470
  %645 = lshr i64 %644, 16
  %646 = trunc i64 %645 to i32
  %647 = ashr i32 %646, 7
  %648 = add nsw i32 %647, 1
  %649 = ashr i32 %648, 1
  %650 = icmp sgt i32 %646, 8388479
  %651 = icmp slt i32 %648, -65536
  %652 = select i1 %651, i32 -32768, i32 %649
  %653 = select i1 %650, i32 32767, i32 %652
  %654 = icmp sgt i32 %653, -32768
  %655 = select i1 %654, i32 %653, i32 -32768
  %656 = icmp slt i32 %655, 32767
  %657 = select i1 %656, i32 %655, i32 32767
  %658 = trunc i32 %657 to i16
  %659 = getelementptr inbounds i16, i16* %2, i64 %489
  store i16 %658, i16* %659, align 2
  %660 = add nuw nsw i64 %489, 1
  %661 = load i32, i32* %32, align 8
  %662 = sext i32 %661 to i64
  %663 = icmp slt i64 %660, %662
  br i1 %663, label %664, label %666

664:                                              ; preds = %641
  %665 = load i32, i32* %99, align 4
  br label %482

666:                                              ; preds = %641, %446
  %667 = phi i32 [ %447, %446 ], [ %661, %641 ]
  %668 = sext i32 %667 to i64
  %669 = getelementptr inbounds i32, i32* %441, i64 %668
  %670 = bitcast i32* %669 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %444, i8* align 4 %670, i64 64, i1 false)
  store i32 %437, i32* %152, align 4
  store i16 %438, i16* %81, align 4
  %671 = insertelement <4 x i32> undef, i32 %436, i32 0
  %672 = shufflevector <4 x i32> %671, <4 x i32> undef, <4 x i32> zeroinitializer
  %673 = bitcast %struct.silk_decoder_control* %1 to <4 x i32>*
  store <4 x i32> %672, <4 x i32>* %673, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %15) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @silk_PLC_glue_frames(%struct.silk_decoder_state*, i16*, i32) local_unnamed_addr #1 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #7
  store i32 -1431655766, i32* %4, align 4
  %7 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #7
  store i32 -1431655766, i32* %5, align 4
  %8 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 28
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %15, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 6
  %13 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 7
  tail call void @silk_sum_sqr_shift(i32* %12, i32* %13, i16* %1, i32 %2) #7
  %14 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 3
  store i32 1, i32* %14, align 4
  br label %111

15:                                               ; preds = %3
  %16 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 3
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %110, label %19

19:                                               ; preds = %15
  call void @silk_sum_sqr_shift(i32* nonnull %5, i32* nonnull %4, i16* %1, i32 %2) #7
  %20 = load i32, i32* %4, align 4
  %21 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 7
  %22 = load i32, i32* %21, align 4
  %23 = icmp sgt i32 %20, %22
  br i1 %23, label %24, label %29

24:                                               ; preds = %19
  %25 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 6
  %26 = load i32, i32* %25, align 4
  %27 = sub nsw i32 %20, %22
  %28 = ashr i32 %26, %27
  store i32 %28, i32* %25, align 4
  br label %35

29:                                               ; preds = %19
  %30 = icmp slt i32 %20, %22
  br i1 %30, label %31, label %35

31:                                               ; preds = %29
  %32 = load i32, i32* %5, align 4
  %33 = sub nsw i32 %22, %20
  %34 = ashr i32 %32, %33
  store i32 %34, i32* %5, align 4
  br label %35

35:                                               ; preds = %29, %31, %24
  %36 = load i32, i32* %5, align 4
  %37 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 6
  %38 = load i32, i32* %37, align 4
  %39 = icmp sgt i32 %36, %38
  br i1 %39, label %40, label %110

40:                                               ; preds = %35
  %41 = call i32 @llvm.ctlz.i32(i32 %38, i1 false) #7, !range !2
  %42 = add nsw i32 %41, -1
  %43 = shl i32 %38, %42
  store i32 %43, i32* %37, align 4
  %44 = sub nsw i32 25, %41
  %45 = icmp sgt i32 %44, 0
  %46 = select i1 %45, i32 %44, i32 0
  %47 = ashr i32 %36, %46
  store i32 %47, i32* %5, align 4
  %48 = icmp sgt i32 %47, 1
  %49 = select i1 %48, i32 %47, i32 1
  %50 = sdiv i32 %43, %49
  %51 = icmp slt i32 %50, 1
  br i1 %51, label %86, label %52

52:                                               ; preds = %40
  %53 = call i32 @llvm.ctlz.i32(i32 %50, i1 false) #7, !range !2
  %54 = sub nsw i32 24, %53
  %55 = add nsw i32 %53, -24
  %56 = icmp eq i32 %54, 0
  br i1 %56, label %69, label %57

57:                                               ; preds = %52
  %58 = icmp ult i32 %50, 128
  br i1 %58, label %59, label %64

59:                                               ; preds = %57
  %60 = shl i32 %50, %55
  %61 = sub nuw nsw i32 56, %53
  %62 = lshr i32 %50, %61
  %63 = or i32 %62, %60
  br label %69

64:                                               ; preds = %57
  %65 = add nuw nsw i32 %53, 8
  %66 = shl i32 %50, %65
  %67 = lshr i32 %50, %54
  %68 = or i32 %66, %67
  br label %69

69:                                               ; preds = %64, %59, %52
  %70 = phi i32 [ %63, %59 ], [ %68, %64 ], [ %50, %52 ]
  %71 = and i32 %70, 127
  %72 = and i32 %53, 1
  %73 = icmp eq i32 %72, 0
  %74 = select i1 %73, i32 46214, i32 32768
  %75 = lshr i32 %53, 1
  %76 = lshr i32 %74, %75
  %77 = sext i32 %76 to i64
  %78 = zext i32 %71 to i64
  %79 = mul nuw nsw i64 %78, 59954170039369728
  %80 = lshr exact i64 %79, 48
  %81 = mul nsw i64 %80, %77
  %82 = lshr i64 %81, 16
  %83 = trunc i64 %82 to i32
  %84 = add i32 %76, %83
  %85 = shl i32 %84, 4
  br label %86

86:                                               ; preds = %40, %69
  %87 = phi i32 [ %85, %69 ], [ 0, %40 ]
  %88 = icmp sgt i32 %2, 0
  br i1 %88, label %89, label %110

89:                                               ; preds = %86
  %90 = sub nsw i32 65536, %87
  %91 = sdiv i32 %90, %2
  %92 = shl i32 %91, 2
  %93 = sext i32 %87 to i64
  %94 = sext i32 %92 to i64
  %95 = sext i32 %2 to i64
  br label %96

96:                                               ; preds = %96, %89
  %97 = phi i64 [ %107, %96 ], [ 0, %89 ]
  %98 = phi i64 [ %105, %96 ], [ %93, %89 ]
  %99 = getelementptr inbounds i16, i16* %1, i64 %97
  %100 = load i16, i16* %99, align 2
  %101 = sext i16 %100 to i64
  %102 = mul nsw i64 %98, %101
  %103 = lshr i64 %102, 16
  %104 = trunc i64 %103 to i16
  store i16 %104, i16* %99, align 2
  %105 = add i64 %98, %94
  %106 = icmp slt i64 %105, 65537
  %107 = add nuw nsw i64 %97, 1
  %108 = icmp slt i64 %107, %95
  %109 = and i1 %106, %108
  br i1 %109, label %96, label %110

110:                                              ; preds = %96, %86, %15, %35
  store i32 0, i32* %16, align 4
  br label %111

111:                                              ; preds = %110, %11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @silk_sum_sqr_shift(i32*, i32*, i16*, i32) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @silk_PLC_energy(i32*, i32*, i32*, i32*, i32* nocapture readonly, i32* nocapture readonly, i32, i32) unnamed_addr #2 {
  %9 = shl nsw i32 %6, 1
  %10 = sext i32 %9 to i64
  %11 = shl nsw i64 %10, 1
  %12 = alloca i16, i64 %10, align 16
  %13 = bitcast i16* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 %11, i1 false)
  %14 = icmp sgt i32 %6, 0
  %15 = sext i32 %6 to i64
  br i1 %14, label %16, label %107

16:                                               ; preds = %8
  %17 = add i32 %7, -2
  %18 = mul nsw i32 %17, %6
  %19 = sext i32 %18 to i64
  %20 = zext i32 %6 to i64
  %21 = load i32, i32* %5, align 4
  %22 = sext i32 %21 to i64
  %23 = icmp ult i32 %6, 4
  br i1 %23, label %50, label %24

24:                                               ; preds = %16
  %25 = and i64 %20, 4294967292
  %26 = insertelement <4 x i64> undef, i64 %22, i32 0
  %27 = shufflevector <4 x i64> %26, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %28

28:                                               ; preds = %28, %24
  %29 = phi i64 [ 0, %24 ], [ %46, %28 ]
  %30 = add nsw i64 %29, %19
  %31 = getelementptr inbounds i32, i32* %4, i64 %30
  %32 = bitcast i32* %31 to <4 x i32>*
  %33 = load <4 x i32>, <4 x i32>* %32, align 4
  %34 = sext <4 x i32> %33 to <4 x i64>
  %35 = mul nsw <4 x i64> %27, %34
  %36 = lshr <4 x i64> %35, <i64 16, i64 16, i64 16, i64 16>
  %37 = trunc <4 x i64> %36 to <4 x i32>
  %38 = lshr <4 x i64> %35, <i64 24, i64 24, i64 24, i64 24>
  %39 = trunc <4 x i64> %38 to <4 x i16>
  %40 = icmp sgt <4 x i32> %37, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %41 = icmp slt <4 x i32> %37, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %42 = select <4 x i1> %41, <4 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <4 x i16> %39
  %43 = select <4 x i1> %40, <4 x i16> <i16 32767, i16 32767, i16 32767, i16 32767>, <4 x i16> %42
  %44 = getelementptr inbounds i16, i16* %12, i64 %29
  %45 = bitcast i16* %44 to <4 x i16>*
  store <4 x i16> %43, <4 x i16>* %45, align 8
  %46 = add i64 %29, 4
  %47 = icmp eq i64 %46, %25
  br i1 %47, label %48, label %28, !llvm.loop !5

48:                                               ; preds = %28
  %49 = icmp eq i64 %25, %20
  br i1 %49, label %70, label %50

50:                                               ; preds = %48, %16
  %51 = phi i64 [ 0, %16 ], [ %25, %48 ]
  br label %52

52:                                               ; preds = %50, %52
  %53 = phi i64 [ %68, %52 ], [ %51, %50 ]
  %54 = add nsw i64 %53, %19
  %55 = getelementptr inbounds i32, i32* %4, i64 %54
  %56 = load i32, i32* %55, align 4
  %57 = sext i32 %56 to i64
  %58 = mul nsw i64 %22, %57
  %59 = lshr i64 %58, 16
  %60 = trunc i64 %59 to i32
  %61 = lshr i64 %58, 24
  %62 = trunc i64 %61 to i16
  %63 = icmp sgt i32 %60, 8388607
  %64 = icmp slt i32 %60, -8388608
  %65 = select i1 %64, i16 -32768, i16 %62
  %66 = select i1 %63, i16 32767, i16 %65
  %67 = getelementptr inbounds i16, i16* %12, i64 %53
  store i16 %66, i16* %67, align 2
  %68 = add nuw nsw i64 %53, 1
  %69 = icmp eq i64 %68, %20
  br i1 %69, label %70, label %52, !llvm.loop !7

70:                                               ; preds = %52, %48
  %71 = getelementptr inbounds i16, i16* %12, i64 %15
  %72 = add i32 %7, -1
  %73 = mul nsw i32 %72, %6
  %74 = getelementptr inbounds i32, i32* %5, i64 1
  %75 = sext i32 %73 to i64
  %76 = load i32, i32* %74, align 4
  %77 = sext i32 %76 to i64
  %78 = icmp ult i32 %6, 4
  br i1 %78, label %79, label %81

79:                                               ; preds = %105, %70
  %80 = phi i64 [ 0, %70 ], [ %82, %105 ]
  br label %109

81:                                               ; preds = %70
  %82 = and i64 %20, 4294967292
  %83 = insertelement <4 x i64> undef, i64 %77, i32 0
  %84 = shufflevector <4 x i64> %83, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %85

85:                                               ; preds = %85, %81
  %86 = phi i64 [ 0, %81 ], [ %103, %85 ]
  %87 = add nsw i64 %86, %75
  %88 = getelementptr inbounds i32, i32* %4, i64 %87
  %89 = bitcast i32* %88 to <4 x i32>*
  %90 = load <4 x i32>, <4 x i32>* %89, align 4
  %91 = sext <4 x i32> %90 to <4 x i64>
  %92 = mul nsw <4 x i64> %84, %91
  %93 = lshr <4 x i64> %92, <i64 16, i64 16, i64 16, i64 16>
  %94 = trunc <4 x i64> %93 to <4 x i32>
  %95 = lshr <4 x i64> %92, <i64 24, i64 24, i64 24, i64 24>
  %96 = trunc <4 x i64> %95 to <4 x i16>
  %97 = icmp sgt <4 x i32> %94, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %98 = icmp slt <4 x i32> %94, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %99 = select <4 x i1> %98, <4 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <4 x i16> %96
  %100 = select <4 x i1> %97, <4 x i16> <i16 32767, i16 32767, i16 32767, i16 32767>, <4 x i16> %99
  %101 = getelementptr inbounds i16, i16* %71, i64 %86
  %102 = bitcast i16* %101 to <4 x i16>*
  store <4 x i16> %100, <4 x i16>* %102, align 2
  %103 = add i64 %86, 4
  %104 = icmp eq i64 %103, %82
  br i1 %104, label %105, label %85, !llvm.loop !9

105:                                              ; preds = %85
  %106 = icmp eq i64 %82, %20
  br i1 %106, label %107, label %79

107:                                              ; preds = %109, %105, %8
  call void @silk_sum_sqr_shift(i32* %0, i32* %1, i16* nonnull %12, i32 %6) #7
  %108 = getelementptr inbounds i16, i16* %12, i64 %15
  call void @silk_sum_sqr_shift(i32* %2, i32* %3, i16* %108, i32 %6) #7
  ret void

109:                                              ; preds = %79, %109
  %110 = phi i64 [ %125, %109 ], [ %80, %79 ]
  %111 = add nsw i64 %110, %75
  %112 = getelementptr inbounds i32, i32* %4, i64 %111
  %113 = load i32, i32* %112, align 4
  %114 = sext i32 %113 to i64
  %115 = mul nsw i64 %77, %114
  %116 = lshr i64 %115, 16
  %117 = trunc i64 %116 to i32
  %118 = lshr i64 %115, 24
  %119 = trunc i64 %118 to i16
  %120 = icmp sgt i32 %117, 8388607
  %121 = icmp slt i32 %117, -8388608
  %122 = select i1 %121, i16 -32768, i16 %119
  %123 = select i1 %120, i16 32767, i16 %122
  %124 = getelementptr inbounds i16, i16* %71, i64 %110
  store i16 %123, i16* %124, align 2
  %125 = add nuw nsw i64 %110, 1
  %126 = icmp eq i64 %125, %20
  br i1 %126, label %107, label %109, !llvm.loop !10
}

declare void @silk_bwexpander(i16*, i32, i32) local_unnamed_addr #4

declare i32 @silk_LPC_inverse_pred_gain_c(i16*, i32) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #5

declare void @silk_LPC_analysis_filter(i16*, i16*, i16*, i32, i32, i32) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #6

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.isvectorized", i32 1}
!7 = distinct !{!7, !8, !6}
!8 = !{!"llvm.loop.unroll.runtime.disable"}
!9 = distinct !{!9, !6}
!10 = distinct !{!10, !8, !6}
