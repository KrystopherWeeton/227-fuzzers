; ModuleID = '../../mojo/public/cpp/bindings/lib/sync_event_watcher.cc'
source_filename = "../../mojo/public/cpp/bindings/lib/sync_event_watcher.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.mojo::SyncEventWatcher" = type { %"class.base::WaitableEvent"*, %"class.base::RepeatingCallback", %class.scoped_refptr.4, %"class.std::__1::unique_ptr", i64, %class.scoped_refptr.27 }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.2 }
%class.scoped_refptr.2 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.3", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.3" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.scoped_refptr.4 = type { %"class.mojo::SyncHandleRegistry"* }
%"class.mojo::SyncHandleRegistry" = type <{ %"class.base::RefCounted", [4 x i8], %"class.mojo::WaitSet", %"class.std::__1::map", %"class.std::__1::map.13", i8, [7 x i8] }>
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.mojo::WaitSet" = type { %class.scoped_refptr.5 }
%class.scoped_refptr.5 = type { %"class.mojo::WaitSet::State"* }
%"class.mojo::WaitSet::State" = type opaque
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.6", %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i64 }
%"class.std::__1::map.13" = type { %"class.std::__1::__tree.14" }
%"class.std::__1::__tree.14" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.15", %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.mojo::SyncHandleRegistry::Subscription"* }
%"class.mojo::SyncHandleRegistry::Subscription" = type { %"class.base::ScopedClosureRunner", %"class.base::CallbackListSubscription" }
%"class.base::ScopedClosureRunner" = type { %"class.base::OnceCallback" }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::CallbackListSubscription" = type { %"class.base::OnceCallback" }
%class.scoped_refptr.27 = type { %"class.base::RefCountedData"* }
%"class.base::RefCountedData" = type <{ %"class.base::RefCountedThreadSafe.28", i8, [3 x i8] }>
%"class.base::RefCountedThreadSafe.28" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::WaitableEvent" = type <{ %class.scoped_refptr, i8, [7 x i8] }>
%class.scoped_refptr = type { %"struct.base::WaitableEvent::WaitableEventKernel"* }
%"struct.base::WaitableEvent::WaitableEventKernel" = type { %"class.base::RefCountedThreadSafe", %"class.base::Lock", i8, i8, %"class.std::__1::list" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.base::StackVector" = type { %"class.base::StackContainer" }
%"class.base::StackContainer" = type { %"struct.base::StackAllocator<const bool *, 4>::Source", %"class.base::StackAllocator", %"class.std::__1::vector" }
%"struct.base::StackAllocator<const bool *, 4>::Source" = type { [32 x i8], i8, [7 x i8] }
%"class.base::StackAllocator" = type { %"struct.base::StackAllocator<const bool *, 4>::Source"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8**, i8**, %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32", %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.32" = type { i8** }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"class.base::StackAllocator" }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIPKbN4base14StackAllocatorIS2_Lm4EEEE21__push_back_slow_pathIRKS2_EEvOT_ = comdat any

@_ZN4mojo16SyncEventWatcherC1EPN4base13WaitableEventENS1_17RepeatingCallbackIFvvEEE = hidden unnamed_addr alias void (%"class.mojo::SyncEventWatcher"*, %"class.base::WaitableEvent"*, %"class.base::RepeatingCallback"*), void (%"class.mojo::SyncEventWatcher"*, %"class.base::WaitableEvent"*, %"class.base::RepeatingCallback"*)* @_ZN4mojo16SyncEventWatcherC2EPN4base13WaitableEventENS1_17RepeatingCallbackIFvvEEE
@_ZN4mojo16SyncEventWatcherD1Ev = hidden unnamed_addr alias void (%"class.mojo::SyncEventWatcher"*), void (%"class.mojo::SyncEventWatcher"*)* @_ZN4mojo16SyncEventWatcherD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4mojo16SyncEventWatcherC2EPN4base13WaitableEventENS1_17RepeatingCallbackIFvvEEE(%"class.mojo::SyncEventWatcher"* nocapture, %"class.base::WaitableEvent"*, %"class.base::RepeatingCallback"* nocapture) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.mojo::SyncEventWatcher", %"class.mojo::SyncEventWatcher"* %0, i64 0, i32 0
  store %"class.base::WaitableEvent"* %1, %"class.base::WaitableEvent"** %4, align 8
  %5 = getelementptr inbounds %"class.mojo::SyncEventWatcher", %"class.mojo::SyncEventWatcher"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = bitcast %"class.base::RepeatingCallback"* %2 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.base::RepeatingCallback"* %5 to i64*
  store i64 %8, i64* %9, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %6, align 8
  %10 = tail call %"class.mojo::SyncHandleRegistry"* @_ZN4mojo18SyncHandleRegistry7currentEv() #9
  %11 = getelementptr inbounds %"class.mojo::SyncEventWatcher", %"class.mojo::SyncEventWatcher"* %0, i64 0, i32 2, i32 0
  store %"class.mojo::SyncHandleRegistry"* %10, %"class.mojo::SyncHandleRegistry"** %11, align 8
  %12 = getelementptr inbounds %"class.mojo::SyncEventWatcher", %"class.mojo::SyncEventWatcher"* %0, i64 0, i32 3
  %13 = bitcast %"class.std::__1::unique_ptr"* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 16, i1 false)
  %14 = tail call i8* @_Znwm(i64 8) #10
  %15 = bitcast i8* %14 to i32*
  store i32 0, i32* %15, align 4
  %16 = getelementptr inbounds i8, i8* %14, i64 4
  store i8 0, i8* %16, align 4
  %17 = getelementptr inbounds %"class.mojo::SyncEventWatcher", %"class.mojo::SyncEventWatcher"* %0, i64 0, i32 5, i32 0
  %18 = bitcast %"class.base::RefCountedData"** %17 to i8**
  store i8* %14, i8** %18, align 8
  %19 = atomicrmw add i32* %15, i32 1 monotonic
  ret void
}

declare %"class.mojo::SyncHandleRegistry"* @_ZN4mojo18SyncHandleRegistry7currentEv() local_unnamed_addr #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4mojo16SyncEventWatcherD2Ev(%"class.mojo::SyncEventWatcher"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.mojo::SyncEventWatcher", %"class.mojo::SyncEventWatcher"* %0, i64 0, i32 5, i32 0
  %3 = load %"class.base::RefCountedData"*, %"class.base::RefCountedData"** %2, align 8
  %4 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %3, i64 0, i32 1
  store i8 1, i8* %4, align 4
  %5 = load %"class.base::RefCountedData"*, %"class.base::RefCountedData"** %2, align 8
  %6 = icmp eq %"class.base::RefCountedData"* %5, null
  br i1 %6, label %13, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw sub i32* %8, i32 1 acq_rel
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %13

11:                                               ; preds = %7
  %12 = bitcast %"class.base::RefCountedData"* %5 to i8*
  tail call void @_ZdlPv(i8* %12) #10
  br label %13

13:                                               ; preds = %1, %7, %11
  %14 = getelementptr inbounds %"class.mojo::SyncEventWatcher", %"class.mojo::SyncEventWatcher"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %15 = load %"class.mojo::SyncHandleRegistry::Subscription"*, %"class.mojo::SyncHandleRegistry::Subscription"** %14, align 8
  store %"class.mojo::SyncHandleRegistry::Subscription"* null, %"class.mojo::SyncHandleRegistry::Subscription"** %14, align 8
  %16 = icmp eq %"class.mojo::SyncHandleRegistry::Subscription"* %15, null
  br i1 %16, label %19, label %17

17:                                               ; preds = %13
  tail call void @_ZN4mojo18SyncHandleRegistry12SubscriptionD1Ev(%"class.mojo::SyncHandleRegistry::Subscription"* nonnull %15) #9
  %18 = bitcast %"class.mojo::SyncHandleRegistry::Subscription"* %15 to i8*
  tail call void @_ZdlPv(i8* %18) #10
  br label %19

19:                                               ; preds = %13, %17
  %20 = getelementptr inbounds %"class.mojo::SyncEventWatcher", %"class.mojo::SyncEventWatcher"* %0, i64 0, i32 2, i32 0
  %21 = load %"class.mojo::SyncHandleRegistry"*, %"class.mojo::SyncHandleRegistry"** %20, align 8
  %22 = icmp eq %"class.mojo::SyncHandleRegistry"* %21, null
  br i1 %22, label %30, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.mojo::SyncHandleRegistry", %"class.mojo::SyncHandleRegistry"* %21, i64 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %24) #9
  %25 = getelementptr inbounds %"class.mojo::SyncHandleRegistry", %"class.mojo::SyncHandleRegistry"* %21, i64 0, i32 0, i32 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %23
  tail call void @_ZN4mojo18SyncHandleRegistryD1Ev(%"class.mojo::SyncHandleRegistry"* nonnull %21) #9
  %29 = bitcast %"class.mojo::SyncHandleRegistry"* %21 to i8*
  tail call void @_ZdlPv(i8* %29) #10
  br label %30

30:                                               ; preds = %19, %23, %28
  %31 = getelementptr inbounds %"class.mojo::SyncEventWatcher", %"class.mojo::SyncEventWatcher"* %0, i64 0, i32 1, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %31) #9
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4mojo16SyncEventWatcher35AllowWokenUpBySyncWatchOnSameThreadEv(%"class.mojo::SyncEventWatcher"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.base::RepeatingCallback", align 8
  %3 = bitcast %"class.base::RepeatingCallback"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3)
  %4 = getelementptr inbounds %"class.mojo::SyncEventWatcher", %"class.mojo::SyncEventWatcher"* %0, i64 0, i32 4
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, 1
  store i64 %6, i64* %4, align 8
  %7 = icmp eq i64 %5, 0
  br i1 %7, label %8, label %26

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.mojo::SyncEventWatcher", %"class.mojo::SyncEventWatcher"* %0, i64 0, i32 2, i32 0
  %10 = load %"class.mojo::SyncHandleRegistry"*, %"class.mojo::SyncHandleRegistry"** %9, align 8
  %11 = getelementptr inbounds %"class.mojo::SyncEventWatcher", %"class.mojo::SyncEventWatcher"* %0, i64 0, i32 0
  %12 = load %"class.base::WaitableEvent"*, %"class.base::WaitableEvent"** %11, align 8
  %13 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %2, i64 0, i32 0
  %14 = getelementptr inbounds %"class.mojo::SyncEventWatcher", %"class.mojo::SyncEventWatcher"* %0, i64 0, i32 1, i32 0
  call void @_ZN4base8internal20CallbackBaseCopyableC2ERKS1_(%"class.base::internal::CallbackBaseCopyable"* nonnull %13, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8) %14) #9
  %15 = call %"class.mojo::SyncHandleRegistry::Subscription"* @_ZN4mojo18SyncHandleRegistry13RegisterEventEPN4base13WaitableEventENS1_17RepeatingCallbackIFvvEEE(%"class.mojo::SyncHandleRegistry"* %10, %"class.base::WaitableEvent"* %12, %"class.base::RepeatingCallback"* nonnull %2) #9
  %16 = ptrtoint %"class.mojo::SyncHandleRegistry::Subscription"* %15 to i64
  %17 = getelementptr inbounds %"class.mojo::SyncEventWatcher", %"class.mojo::SyncEventWatcher"* %0, i64 0, i32 3
  %18 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %17, i64 0, i32 0, i32 0, i32 0
  %19 = load %"class.mojo::SyncHandleRegistry::Subscription"*, %"class.mojo::SyncHandleRegistry::Subscription"** %18, align 8
  %20 = bitcast %"class.std::__1::unique_ptr"* %17 to i64*
  store i64 %16, i64* %20, align 8
  %21 = icmp eq %"class.mojo::SyncHandleRegistry::Subscription"* %19, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %8
  call void @_ZN4mojo18SyncHandleRegistry12SubscriptionD1Ev(%"class.mojo::SyncHandleRegistry::Subscription"* nonnull %19) #9
  %23 = bitcast %"class.mojo::SyncHandleRegistry::Subscription"* %19 to i8*
  call void @_ZdlPv(i8* %23) #10
  br label %24

24:                                               ; preds = %22, %8
  %25 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %2, i64 0, i32 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %25) #9
  br label %26

26:                                               ; preds = %1, %24
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4mojo16SyncEventWatcher22IncrementRegisterCountEv(%"class.mojo::SyncEventWatcher"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.base::RepeatingCallback", align 8
  %3 = getelementptr inbounds %"class.mojo::SyncEventWatcher", %"class.mojo::SyncEventWatcher"* %0, i64 0, i32 4
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 1
  store i64 %5, i64* %3, align 8
  %6 = icmp eq i64 %4, 0
  br i1 %6, label %7, label %25

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.mojo::SyncEventWatcher", %"class.mojo::SyncEventWatcher"* %0, i64 0, i32 2, i32 0
  %9 = load %"class.mojo::SyncHandleRegistry"*, %"class.mojo::SyncHandleRegistry"** %8, align 8
  %10 = getelementptr inbounds %"class.mojo::SyncEventWatcher", %"class.mojo::SyncEventWatcher"* %0, i64 0, i32 0
  %11 = load %"class.base::WaitableEvent"*, %"class.base::WaitableEvent"** %10, align 8
  %12 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %2, i64 0, i32 0
  %13 = getelementptr inbounds %"class.mojo::SyncEventWatcher", %"class.mojo::SyncEventWatcher"* %0, i64 0, i32 1, i32 0
  call void @_ZN4base8internal20CallbackBaseCopyableC2ERKS1_(%"class.base::internal::CallbackBaseCopyable"* nonnull %12, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8) %13) #9
  %14 = call %"class.mojo::SyncHandleRegistry::Subscription"* @_ZN4mojo18SyncHandleRegistry13RegisterEventEPN4base13WaitableEventENS1_17RepeatingCallbackIFvvEEE(%"class.mojo::SyncHandleRegistry"* %9, %"class.base::WaitableEvent"* %11, %"class.base::RepeatingCallback"* nonnull %2) #9
  %15 = ptrtoint %"class.mojo::SyncHandleRegistry::Subscription"* %14 to i64
  %16 = getelementptr inbounds %"class.mojo::SyncEventWatcher", %"class.mojo::SyncEventWatcher"* %0, i64 0, i32 3
  %17 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %16, i64 0, i32 0, i32 0, i32 0
  %18 = load %"class.mojo::SyncHandleRegistry::Subscription"*, %"class.mojo::SyncHandleRegistry::Subscription"** %17, align 8
  %19 = bitcast %"class.std::__1::unique_ptr"* %16 to i64*
  store i64 %15, i64* %19, align 8
  %20 = icmp eq %"class.mojo::SyncHandleRegistry::Subscription"* %18, null
  br i1 %20, label %23, label %21

21:                                               ; preds = %7
  call void @_ZN4mojo18SyncHandleRegistry12SubscriptionD1Ev(%"class.mojo::SyncHandleRegistry::Subscription"* nonnull %18) #9
  %22 = bitcast %"class.mojo::SyncHandleRegistry::Subscription"* %18 to i8*
  call void @_ZdlPv(i8* %22) #10
  br label %23

23:                                               ; preds = %21, %7
  %24 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %2, i64 0, i32 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %24) #9
  br label %25

25:                                               ; preds = %23, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4mojo16SyncEventWatcher9SyncWatchEPPKbm(%"class.mojo::SyncEventWatcher"*, i8**, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.base::RepeatingCallback", align 8
  %5 = alloca %"class.base::StackVector", align 8
  %6 = bitcast %"class.base::RepeatingCallback"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6)
  %7 = getelementptr inbounds %"class.mojo::SyncEventWatcher", %"class.mojo::SyncEventWatcher"* %0, i64 0, i32 4
  %8 = load i64, i64* %7, align 8
  %9 = add i64 %8, 1
  store i64 %9, i64* %7, align 8
  %10 = icmp eq i64 %8, 0
  br i1 %10, label %11, label %29

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.mojo::SyncEventWatcher", %"class.mojo::SyncEventWatcher"* %0, i64 0, i32 2, i32 0
  %13 = load %"class.mojo::SyncHandleRegistry"*, %"class.mojo::SyncHandleRegistry"** %12, align 8
  %14 = getelementptr inbounds %"class.mojo::SyncEventWatcher", %"class.mojo::SyncEventWatcher"* %0, i64 0, i32 0
  %15 = load %"class.base::WaitableEvent"*, %"class.base::WaitableEvent"** %14, align 8
  %16 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %4, i64 0, i32 0
  %17 = getelementptr inbounds %"class.mojo::SyncEventWatcher", %"class.mojo::SyncEventWatcher"* %0, i64 0, i32 1, i32 0
  call void @_ZN4base8internal20CallbackBaseCopyableC2ERKS1_(%"class.base::internal::CallbackBaseCopyable"* nonnull %16, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8) %17) #9
  %18 = call %"class.mojo::SyncHandleRegistry::Subscription"* @_ZN4mojo18SyncHandleRegistry13RegisterEventEPN4base13WaitableEventENS1_17RepeatingCallbackIFvvEEE(%"class.mojo::SyncHandleRegistry"* %13, %"class.base::WaitableEvent"* %15, %"class.base::RepeatingCallback"* nonnull %4) #9
  %19 = ptrtoint %"class.mojo::SyncHandleRegistry::Subscription"* %18 to i64
  %20 = getelementptr inbounds %"class.mojo::SyncEventWatcher", %"class.mojo::SyncEventWatcher"* %0, i64 0, i32 3
  %21 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %20, i64 0, i32 0, i32 0, i32 0
  %22 = load %"class.mojo::SyncHandleRegistry::Subscription"*, %"class.mojo::SyncHandleRegistry::Subscription"** %21, align 8
  %23 = bitcast %"class.std::__1::unique_ptr"* %20 to i64*
  store i64 %19, i64* %23, align 8
  %24 = icmp eq %"class.mojo::SyncHandleRegistry::Subscription"* %22, null
  br i1 %24, label %27, label %25

25:                                               ; preds = %11
  call void @_ZN4mojo18SyncHandleRegistry12SubscriptionD1Ev(%"class.mojo::SyncHandleRegistry::Subscription"* nonnull %22) #9
  %26 = bitcast %"class.mojo::SyncHandleRegistry::Subscription"* %22 to i8*
  call void @_ZdlPv(i8* %26) #10
  br label %27

27:                                               ; preds = %25, %11
  %28 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %4, i64 0, i32 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %28) #9
  br label %29

29:                                               ; preds = %3, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6)
  %30 = getelementptr inbounds %"class.mojo::SyncEventWatcher", %"class.mojo::SyncEventWatcher"* %0, i64 0, i32 5, i32 0
  %31 = load %"class.base::RefCountedData"*, %"class.base::RefCountedData"** %30, align 8
  %32 = icmp eq %"class.base::RefCountedData"* %31, null
  br i1 %32, label %36, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %31, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = atomicrmw add i32* %34, i32 1 monotonic
  br label %36

36:                                               ; preds = %29, %33
  %37 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %5, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %37) #9
  %38 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %5, i64 0, i32 0, i32 0, i32 0, i64 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %38, i8 -86, i64 32, i1 false)
  %39 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %5, i64 0, i32 0, i32 0
  %40 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %5, i64 0, i32 0, i32 0, i32 1
  %41 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %5, i64 0, i32 0, i32 1, i32 0
  store %"struct.base::StackAllocator<const bool *, 4>::Source"* %39, %"struct.base::StackAllocator<const bool *, 4>::Source"** %41, align 8
  %42 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %5, i64 0, i32 0, i32 2
  %43 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %5, i64 0, i32 0, i32 2, i32 0, i32 2, i32 1
  %44 = ptrtoint %"class.base::StackVector"* %5 to i64
  %45 = bitcast %"struct.std::__1::__compressed_pair_elem.33"* %43 to i64*
  store i64 %44, i64* %45, align 8
  %46 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %5, i64 0, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %47 = bitcast i8*** %46 to i64*
  %48 = bitcast %"class.std::__1::vector"* %42 to i64*
  %49 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %5, i64 0, i32 0, i32 2, i32 0, i32 1
  %50 = bitcast i8*** %49 to i64*
  store i8 1, i8* %40, align 8
  %51 = ptrtoint i8* %40 to i64
  store i64 %44, i64* %48, align 8
  store i64 %51, i64* %47, align 8
  %52 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %31, i64 0, i32 1
  %53 = ptrtoint i8* %52 to i64
  %54 = bitcast %"class.base::StackVector"* %5 to i64*
  store i64 %53, i64* %54, align 8
  %55 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %5, i64 0, i32 0, i32 0, i32 0, i64 8
  %56 = ptrtoint i8* %55 to i64
  store i64 %56, i64* %50, align 8
  %57 = getelementptr inbounds i8*, i8** %1, i64 %2
  %58 = icmp eq i64 %2, 0
  br i1 %58, label %74, label %59

59:                                               ; preds = %36, %71
  %60 = phi i8** [ %72, %71 ], [ %1, %36 ]
  %61 = load i8**, i8*** %49, align 8
  %62 = load i8**, i8*** %46, align 8
  %63 = icmp eq i8** %61, %62
  br i1 %63, label %70, label %64

64:                                               ; preds = %59
  %65 = bitcast i8** %60 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = bitcast i8** %61 to i64*
  store i64 %66, i64* %67, align 8
  %68 = getelementptr inbounds i8*, i8** %61, i64 1
  %69 = ptrtoint i8** %68 to i64
  store i64 %69, i64* %50, align 8
  br label %71

70:                                               ; preds = %59
  call void @_ZNSt3__16vectorIPKbN4base14StackAllocatorIS2_Lm4EEEE21__push_back_slow_pathIRKS2_EEvOT_(%"class.std::__1::vector"* %42, i8** dereferenceable(8) %60) #9
  br label %71

71:                                               ; preds = %70, %64
  %72 = getelementptr inbounds i8*, i8** %60, i64 1
  %73 = icmp eq i8** %72, %57
  br i1 %73, label %74, label %59

74:                                               ; preds = %71, %36
  %75 = getelementptr inbounds %"class.mojo::SyncEventWatcher", %"class.mojo::SyncEventWatcher"* %0, i64 0, i32 2, i32 0
  %76 = load %"class.mojo::SyncHandleRegistry"*, %"class.mojo::SyncHandleRegistry"** %75, align 8
  %77 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %42, i64 0, i32 0, i32 0
  %78 = load i8**, i8*** %77, align 8
  %79 = load i64, i64* %50, align 8
  %80 = ptrtoint i8** %78 to i64
  %81 = sub i64 %79, %80
  %82 = ashr exact i64 %81, 3
  %83 = call zeroext i1 @_ZN4mojo18SyncHandleRegistry4WaitEPPKbm(%"class.mojo::SyncHandleRegistry"* %76, i8** %78, i64 %82) #9
  %84 = load i8, i8* %52, align 4, !range !2
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %86, label %96

86:                                               ; preds = %74
  %87 = load i64, i64* %7, align 8
  %88 = add i64 %87, -1
  store i64 %88, i64* %7, align 8
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %90, label %96

90:                                               ; preds = %86
  %91 = getelementptr inbounds %"class.mojo::SyncEventWatcher", %"class.mojo::SyncEventWatcher"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %92 = load %"class.mojo::SyncHandleRegistry::Subscription"*, %"class.mojo::SyncHandleRegistry::Subscription"** %91, align 8
  store %"class.mojo::SyncHandleRegistry::Subscription"* null, %"class.mojo::SyncHandleRegistry::Subscription"** %91, align 8
  %93 = icmp eq %"class.mojo::SyncHandleRegistry::Subscription"* %92, null
  br i1 %93, label %96, label %94

94:                                               ; preds = %90
  call void @_ZN4mojo18SyncHandleRegistry12SubscriptionD1Ev(%"class.mojo::SyncHandleRegistry::Subscription"* nonnull %92) #9
  %95 = bitcast %"class.mojo::SyncHandleRegistry::Subscription"* %92 to i8*
  call void @_ZdlPv(i8* %95) #10
  br label %96

96:                                               ; preds = %94, %90, %86, %74
  %97 = phi i1 [ false, %74 ], [ %83, %86 ], [ %83, %90 ], [ %83, %94 ]
  %98 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  %99 = load i8**, i8*** %98, align 8
  %100 = icmp eq i8** %99, null
  br i1 %100, label %113, label %101

101:                                              ; preds = %96
  %102 = ptrtoint i8** %99 to i64
  store i64 %102, i64* %50, align 8
  %103 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %5, i64 0, i32 0, i32 2, i32 0, i32 2, i32 1, i32 0, i32 0
  %104 = load %"struct.base::StackAllocator<const bool *, 4>::Source"*, %"struct.base::StackAllocator<const bool *, 4>::Source"** %103, align 8
  %105 = icmp ne %"struct.base::StackAllocator<const bool *, 4>::Source"* %104, null
  %106 = bitcast %"struct.base::StackAllocator<const bool *, 4>::Source"* %104 to i8**
  %107 = icmp eq i8** %99, %106
  %108 = and i1 %105, %107
  br i1 %108, label %109, label %111

109:                                              ; preds = %101
  %110 = getelementptr inbounds %"struct.base::StackAllocator<const bool *, 4>::Source", %"struct.base::StackAllocator<const bool *, 4>::Source"* %104, i64 0, i32 1
  store i8 0, i8* %110, align 8
  br label %113

111:                                              ; preds = %101
  %112 = bitcast i8** %99 to i8*
  call void @_ZdlPv(i8* %112) #10
  br label %113

113:                                              ; preds = %96, %109, %111
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %37) #9
  br i1 %32, label %120, label %114

114:                                              ; preds = %113
  %115 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %31, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %116 = atomicrmw sub i32* %115, i32 1 acq_rel
  %117 = icmp eq i32 %116, 1
  br i1 %117, label %118, label %120

118:                                              ; preds = %114
  %119 = bitcast %"class.base::RefCountedData"* %31 to i8*
  call void @_ZdlPv(i8* %119) #10
  br label %120

120:                                              ; preds = %113, %114, %118
  ret i1 %97
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare zeroext i1 @_ZN4mojo18SyncHandleRegistry4WaitEPPKbm(%"class.mojo::SyncHandleRegistry"*, i8**, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4mojo16SyncEventWatcher22DecrementRegisterCountEv(%"class.mojo::SyncEventWatcher"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.mojo::SyncEventWatcher", %"class.mojo::SyncEventWatcher"* %0, i64 0, i32 4
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, -1
  store i64 %4, i64* %2, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %6, label %12

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.mojo::SyncEventWatcher", %"class.mojo::SyncEventWatcher"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %8 = load %"class.mojo::SyncHandleRegistry::Subscription"*, %"class.mojo::SyncHandleRegistry::Subscription"** %7, align 8
  store %"class.mojo::SyncHandleRegistry::Subscription"* null, %"class.mojo::SyncHandleRegistry::Subscription"** %7, align 8
  %9 = icmp eq %"class.mojo::SyncHandleRegistry::Subscription"* %8, null
  br i1 %9, label %12, label %10

10:                                               ; preds = %6
  tail call void @_ZN4mojo18SyncHandleRegistry12SubscriptionD1Ev(%"class.mojo::SyncHandleRegistry::Subscription"* nonnull %8) #9
  %11 = bitcast %"class.mojo::SyncHandleRegistry::Subscription"* %8 to i8*
  tail call void @_ZdlPv(i8* %11) #10
  br label %12

12:                                               ; preds = %10, %6, %1
  ret void
}

declare %"class.mojo::SyncHandleRegistry::Subscription"* @_ZN4mojo18SyncHandleRegistry13RegisterEventEPN4base13WaitableEventENS1_17RepeatingCallbackIFvvEEE(%"class.mojo::SyncHandleRegistry"*, %"class.base::WaitableEvent"*, %"class.base::RepeatingCallback"*) local_unnamed_addr #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

declare void @_ZN4base8internal20CallbackBaseCopyableC2ERKS1_(%"class.base::internal::CallbackBaseCopyable"*, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8)) unnamed_addr #1

declare void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4mojo18SyncHandleRegistryD1Ev(%"class.mojo::SyncHandleRegistry"*) unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIPKbN4base14StackAllocatorIS2_Lm4EEEE21__push_back_slow_pathIRKS2_EEvOT_(%"class.std::__1::vector"*, i8** dereferenceable(8)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 1, i32 0
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %5 = bitcast i8*** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector"* %0 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = ashr exact i64 %9, 3
  %11 = add nsw i64 %10, 1
  %12 = icmp ugt i64 %11, 2305843009213693951
  br i1 %12, label %13, label %15

13:                                               ; preds = %2
  %14 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %14) #11
  unreachable

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %17 = bitcast i8*** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %18, %8
  %20 = ashr exact i64 %19, 3
  %21 = icmp ult i64 %20, 1152921504606846975
  br i1 %21, label %22, label %27

22:                                               ; preds = %15
  %23 = ashr exact i64 %19, 2
  %24 = icmp ult i64 %23, %11
  %25 = select i1 %24, i64 %11, i64 %23
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %48, label %27

27:                                               ; preds = %15, %22
  %28 = phi i64 [ %25, %22 ], [ 2305843009213693951, %15 ]
  %29 = getelementptr inbounds %"class.base::StackAllocator", %"class.base::StackAllocator"* %3, i64 0, i32 0
  %30 = load %"struct.base::StackAllocator<const bool *, 4>::Source"*, %"struct.base::StackAllocator<const bool *, 4>::Source"** %29, align 8
  %31 = icmp eq %"struct.base::StackAllocator<const bool *, 4>::Source"* %30, null
  br i1 %31, label %41, label %32

32:                                               ; preds = %27
  %33 = getelementptr inbounds %"struct.base::StackAllocator<const bool *, 4>::Source", %"struct.base::StackAllocator<const bool *, 4>::Source"* %30, i64 0, i32 1
  %34 = load i8, i8* %33, align 8, !range !2
  %35 = icmp eq i8 %34, 0
  %36 = icmp ult i64 %28, 5
  %37 = and i1 %36, %35
  br i1 %37, label %38, label %41

38:                                               ; preds = %32
  store i8 1, i8* %33, align 8
  %39 = bitcast %"class.base::StackAllocator"* %3 to i8***
  %40 = load i8**, i8*** %39, align 8
  br label %48

41:                                               ; preds = %32, %27
  %42 = icmp ugt i64 %28, 2305843009213693951
  br i1 %42, label %43, label %44

43:                                               ; preds = %41
  tail call void @abort() #11
  unreachable

44:                                               ; preds = %41
  %45 = shl i64 %28, 3
  %46 = tail call i8* @_Znwm(i64 %45) #10
  %47 = bitcast i8* %46 to i8**
  br label %48

48:                                               ; preds = %22, %38, %44
  %49 = phi i64 [ 0, %22 ], [ %28, %38 ], [ %28, %44 ]
  %50 = phi i8** [ null, %22 ], [ %40, %38 ], [ %47, %44 ]
  %51 = getelementptr inbounds i8*, i8** %50, i64 %10
  %52 = getelementptr inbounds i8*, i8** %50, i64 %49
  %53 = ptrtoint i8** %52 to i64
  %54 = bitcast i8** %1 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = bitcast i8** %51 to i64*
  store i64 %55, i64* %56, align 8
  %57 = getelementptr inbounds i8*, i8** %51, i64 1
  %58 = ptrtoint i8** %57 to i64
  %59 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %60 = load i8**, i8*** %59, align 8
  %61 = ptrtoint i8** %60 to i64
  %62 = load i8**, i8*** %4, align 8
  %63 = icmp eq i8** %62, %60
  br i1 %63, label %236, label %64

64:                                               ; preds = %48
  %65 = getelementptr i8*, i8** %62, i64 -1
  %66 = ptrtoint i8** %65 to i64
  %67 = sub i64 %66, %61
  %68 = lshr i64 %67, 3
  %69 = add nuw nsw i64 %68, 1
  %70 = icmp ult i64 %69, 4
  br i1 %70, label %163, label %71

71:                                               ; preds = %64
  %72 = getelementptr i8*, i8** %62, i64 -1
  %73 = ptrtoint i8** %72 to i64
  %74 = sub i64 %73, %61
  %75 = lshr i64 %74, 3
  %76 = xor i64 %75, -1
  %77 = add nsw i64 %10, %76
  %78 = getelementptr i8*, i8** %50, i64 %77
  %79 = xor i64 %75, -1
  %80 = getelementptr i8*, i8** %62, i64 %79
  %81 = icmp ult i8** %78, %62
  %82 = icmp ult i8** %80, %51
  %83 = and i1 %81, %82
  br i1 %83, label %163, label %84

84:                                               ; preds = %71
  %85 = and i64 %69, 4611686018427387900
  %86 = sub nsw i64 0, %85
  %87 = getelementptr i8*, i8** %51, i64 %86
  %88 = sub nsw i64 0, %85
  %89 = getelementptr i8*, i8** %62, i64 %88
  %90 = add nsw i64 %85, -4
  %91 = lshr exact i64 %90, 2
  %92 = add nuw nsw i64 %91, 1
  %93 = and i64 %92, 1
  %94 = icmp eq i64 %90, 0
  br i1 %94, label %141, label %95

95:                                               ; preds = %84
  %96 = sub nuw nsw i64 %92, %93
  %97 = getelementptr i8*, i8** %51, i64 -1
  %98 = getelementptr i8*, i8** %62, i64 -1
  %99 = getelementptr i8*, i8** %51, i64 -1
  %100 = getelementptr i8*, i8** %62, i64 -1
  br label %101

101:                                              ; preds = %101, %95
  %102 = phi i64 [ 0, %95 ], [ %136, %101 ]
  %103 = phi i64 [ %96, %95 ], [ %137, %101 ]
  %104 = sub i64 0, %102
  %105 = sub i64 0, %102
  %106 = getelementptr inbounds i8*, i8** %97, i64 %104
  %107 = getelementptr inbounds i8*, i8** %98, i64 %105
  %108 = getelementptr inbounds i8*, i8** %107, i64 -1
  %109 = bitcast i8** %108 to <2 x i64>*
  %110 = load <2 x i64>, <2 x i64>* %109, align 8, !alias.scope !3
  %111 = getelementptr inbounds i8*, i8** %107, i64 -2
  %112 = getelementptr inbounds i8*, i8** %111, i64 -1
  %113 = bitcast i8** %112 to <2 x i64>*
  %114 = load <2 x i64>, <2 x i64>* %113, align 8, !alias.scope !3
  %115 = getelementptr inbounds i8*, i8** %106, i64 -1
  %116 = bitcast i8** %115 to <2 x i64>*
  store <2 x i64> %110, <2 x i64>* %116, align 8, !alias.scope !6, !noalias !3
  %117 = getelementptr inbounds i8*, i8** %106, i64 -2
  %118 = getelementptr inbounds i8*, i8** %117, i64 -1
  %119 = bitcast i8** %118 to <2 x i64>*
  store <2 x i64> %114, <2 x i64>* %119, align 8, !alias.scope !6, !noalias !3
  %120 = sub nuw nsw i64 -4, %102
  %121 = sub nuw nsw i64 -4, %102
  %122 = getelementptr inbounds i8*, i8** %99, i64 %120
  %123 = getelementptr inbounds i8*, i8** %100, i64 %121
  %124 = getelementptr inbounds i8*, i8** %123, i64 -1
  %125 = bitcast i8** %124 to <2 x i64>*
  %126 = load <2 x i64>, <2 x i64>* %125, align 8, !alias.scope !3
  %127 = getelementptr inbounds i8*, i8** %123, i64 -2
  %128 = getelementptr inbounds i8*, i8** %127, i64 -1
  %129 = bitcast i8** %128 to <2 x i64>*
  %130 = load <2 x i64>, <2 x i64>* %129, align 8, !alias.scope !3
  %131 = getelementptr inbounds i8*, i8** %122, i64 -1
  %132 = bitcast i8** %131 to <2 x i64>*
  store <2 x i64> %126, <2 x i64>* %132, align 8, !alias.scope !6, !noalias !3
  %133 = getelementptr inbounds i8*, i8** %122, i64 -2
  %134 = getelementptr inbounds i8*, i8** %133, i64 -1
  %135 = bitcast i8** %134 to <2 x i64>*
  store <2 x i64> %130, <2 x i64>* %135, align 8, !alias.scope !6, !noalias !3
  %136 = add i64 %102, 8
  %137 = add i64 %103, -2
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %101, !llvm.loop !8

139:                                              ; preds = %101
  %140 = sub nuw nsw i64 -8, %102
  br label %141

141:                                              ; preds = %139, %84
  %142 = phi i64 [ 0, %84 ], [ %140, %139 ]
  %143 = icmp eq i64 %93, 0
  br i1 %143, label %161, label %144

144:                                              ; preds = %141
  %145 = getelementptr i8*, i8** %51, i64 -1
  %146 = getelementptr i8*, i8** %62, i64 -1
  %147 = getelementptr inbounds i8*, i8** %145, i64 %142
  %148 = getelementptr inbounds i8*, i8** %146, i64 %142
  %149 = getelementptr inbounds i8*, i8** %148, i64 -1
  %150 = bitcast i8** %149 to <2 x i64>*
  %151 = load <2 x i64>, <2 x i64>* %150, align 8, !alias.scope !3
  %152 = getelementptr inbounds i8*, i8** %148, i64 -2
  %153 = getelementptr inbounds i8*, i8** %152, i64 -1
  %154 = bitcast i8** %153 to <2 x i64>*
  %155 = load <2 x i64>, <2 x i64>* %154, align 8, !alias.scope !3
  %156 = getelementptr inbounds i8*, i8** %147, i64 -1
  %157 = bitcast i8** %156 to <2 x i64>*
  store <2 x i64> %151, <2 x i64>* %157, align 8, !alias.scope !6, !noalias !3
  %158 = getelementptr inbounds i8*, i8** %147, i64 -2
  %159 = getelementptr inbounds i8*, i8** %158, i64 -1
  %160 = bitcast i8** %159 to <2 x i64>*
  store <2 x i64> %155, <2 x i64>* %160, align 8, !alias.scope !6, !noalias !3
  br label %161

161:                                              ; preds = %141, %144
  %162 = icmp eq i64 %69, %85
  br i1 %162, label %233, label %163

163:                                              ; preds = %161, %71, %64
  %164 = phi i8** [ %51, %71 ], [ %51, %64 ], [ %87, %161 ]
  %165 = phi i8** [ %62, %71 ], [ %62, %64 ], [ %89, %161 ]
  %166 = getelementptr i8*, i8** %165, i64 -1
  %167 = ptrtoint i8** %166 to i64
  %168 = sub i64 %167, %61
  %169 = lshr i64 %168, 3
  %170 = add nuw nsw i64 %169, 1
  %171 = and i64 %170, 7
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %184, label %173

173:                                              ; preds = %163, %173
  %174 = phi i8** [ %177, %173 ], [ %164, %163 ]
  %175 = phi i8** [ %178, %173 ], [ %165, %163 ]
  %176 = phi i64 [ %182, %173 ], [ %171, %163 ]
  %177 = getelementptr inbounds i8*, i8** %174, i64 -1
  %178 = getelementptr inbounds i8*, i8** %175, i64 -1
  %179 = bitcast i8** %178 to i64*
  %180 = load i64, i64* %179, align 8
  %181 = bitcast i8** %177 to i64*
  store i64 %180, i64* %181, align 8
  %182 = add i64 %176, -1
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %184, label %173, !llvm.loop !10

184:                                              ; preds = %173, %163
  %185 = phi i8** [ undef, %163 ], [ %177, %173 ]
  %186 = phi i8** [ %164, %163 ], [ %177, %173 ]
  %187 = phi i8** [ %165, %163 ], [ %178, %173 ]
  %188 = icmp ult i64 %168, 56
  br i1 %188, label %233, label %189

189:                                              ; preds = %184, %189
  %190 = phi i8** [ %227, %189 ], [ %186, %184 ]
  %191 = phi i8** [ %228, %189 ], [ %187, %184 ]
  %192 = getelementptr inbounds i8*, i8** %190, i64 -1
  %193 = getelementptr inbounds i8*, i8** %191, i64 -1
  %194 = bitcast i8** %193 to i64*
  %195 = load i64, i64* %194, align 8
  %196 = bitcast i8** %192 to i64*
  store i64 %195, i64* %196, align 8
  %197 = getelementptr inbounds i8*, i8** %190, i64 -2
  %198 = getelementptr inbounds i8*, i8** %191, i64 -2
  %199 = bitcast i8** %198 to i64*
  %200 = load i64, i64* %199, align 8
  %201 = bitcast i8** %197 to i64*
  store i64 %200, i64* %201, align 8
  %202 = getelementptr inbounds i8*, i8** %190, i64 -3
  %203 = getelementptr inbounds i8*, i8** %191, i64 -3
  %204 = bitcast i8** %203 to i64*
  %205 = load i64, i64* %204, align 8
  %206 = bitcast i8** %202 to i64*
  store i64 %205, i64* %206, align 8
  %207 = getelementptr inbounds i8*, i8** %190, i64 -4
  %208 = getelementptr inbounds i8*, i8** %191, i64 -4
  %209 = bitcast i8** %208 to i64*
  %210 = load i64, i64* %209, align 8
  %211 = bitcast i8** %207 to i64*
  store i64 %210, i64* %211, align 8
  %212 = getelementptr inbounds i8*, i8** %190, i64 -5
  %213 = getelementptr inbounds i8*, i8** %191, i64 -5
  %214 = bitcast i8** %213 to i64*
  %215 = load i64, i64* %214, align 8
  %216 = bitcast i8** %212 to i64*
  store i64 %215, i64* %216, align 8
  %217 = getelementptr inbounds i8*, i8** %190, i64 -6
  %218 = getelementptr inbounds i8*, i8** %191, i64 -6
  %219 = bitcast i8** %218 to i64*
  %220 = load i64, i64* %219, align 8
  %221 = bitcast i8** %217 to i64*
  store i64 %220, i64* %221, align 8
  %222 = getelementptr inbounds i8*, i8** %190, i64 -7
  %223 = getelementptr inbounds i8*, i8** %191, i64 -7
  %224 = bitcast i8** %223 to i64*
  %225 = load i64, i64* %224, align 8
  %226 = bitcast i8** %222 to i64*
  store i64 %225, i64* %226, align 8
  %227 = getelementptr inbounds i8*, i8** %190, i64 -8
  %228 = getelementptr inbounds i8*, i8** %191, i64 -8
  %229 = bitcast i8** %228 to i64*
  %230 = load i64, i64* %229, align 8
  %231 = bitcast i8** %227 to i64*
  store i64 %230, i64* %231, align 8
  %232 = icmp eq i8** %228, %60
  br i1 %232, label %233, label %189, !llvm.loop !12

233:                                              ; preds = %184, %189, %161
  %234 = phi i8** [ %87, %161 ], [ %185, %184 ], [ %227, %189 ]
  %235 = load i64, i64* %7, align 8
  br label %236

236:                                              ; preds = %48, %233
  %237 = phi i8** [ %234, %233 ], [ %51, %48 ]
  %238 = phi i64 [ %235, %233 ], [ %61, %48 ]
  %239 = ptrtoint i8** %237 to i64
  store i64 %239, i64* %7, align 8
  store i64 %58, i64* %5, align 8
  store i64 %53, i64* %17, align 8
  %240 = icmp eq i64 %238, 0
  br i1 %240, label %253, label %241

241:                                              ; preds = %236
  %242 = inttoptr i64 %238 to i8**
  %243 = getelementptr inbounds %"class.base::StackAllocator", %"class.base::StackAllocator"* %3, i64 0, i32 0
  %244 = load %"struct.base::StackAllocator<const bool *, 4>::Source"*, %"struct.base::StackAllocator<const bool *, 4>::Source"** %243, align 8
  %245 = icmp ne %"struct.base::StackAllocator<const bool *, 4>::Source"* %244, null
  %246 = bitcast %"struct.base::StackAllocator<const bool *, 4>::Source"* %244 to i8**
  %247 = icmp eq i8** %242, %246
  %248 = and i1 %245, %247
  br i1 %248, label %249, label %251

249:                                              ; preds = %241
  %250 = getelementptr inbounds %"struct.base::StackAllocator<const bool *, 4>::Source", %"struct.base::StackAllocator<const bool *, 4>::Source"* %244, i64 0, i32 1
  store i8 0, i8* %250, align 8
  br label %253

251:                                              ; preds = %241
  %252 = inttoptr i64 %238 to i8*
  tail call void @_ZdlPv(i8* %252) #10
  br label %253

253:                                              ; preds = %236, %249, %251
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4mojo18SyncHandleRegistry12SubscriptionD1Ev(%"class.mojo::SyncHandleRegistry::Subscription"*) unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !9}
