; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/blend_a64_hmask.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/blend_a64_hmask.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @aom_blend_a64_hmask_c(i8* nocapture, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %10 = icmp sgt i32 %8, 0
  br i1 %10, label %11, label %139

11:                                               ; preds = %9
  %12 = icmp sgt i32 %7, 0
  %13 = zext i32 %7 to i64
  %14 = add nsw i64 %13, -1
  %15 = getelementptr i8, i8* %6, i64 %13
  %16 = getelementptr i8, i8* %0, i64 %13
  %17 = getelementptr i8, i8* %2, i64 %13
  %18 = getelementptr i8, i8* %4, i64 %13
  %19 = icmp ult i32 %7, 16
  %20 = trunc i64 %14 to i32
  %21 = icmp ugt i64 %14, 4294967295
  %22 = trunc i64 %14 to i32
  %23 = icmp ugt i64 %14, 4294967295
  %24 = trunc i64 %14 to i32
  %25 = icmp ugt i64 %14, 4294967295
  %26 = and i64 %13, 4294967280
  %27 = icmp eq i64 %26, %13
  br label %28

28:                                               ; preds = %136, %11
  %29 = phi i32 [ 0, %11 ], [ %137, %136 ]
  %30 = mul i32 %29, %1
  %31 = zext i32 %30 to i64
  %32 = getelementptr i8, i8* %0, i64 %31
  %33 = getelementptr i8, i8* %16, i64 %31
  %34 = mul i32 %29, %3
  %35 = zext i32 %34 to i64
  %36 = getelementptr i8, i8* %2, i64 %35
  %37 = getelementptr i8, i8* %17, i64 %35
  %38 = mul i32 %29, %5
  %39 = zext i32 %38 to i64
  %40 = getelementptr i8, i8* %4, i64 %39
  %41 = getelementptr i8, i8* %18, i64 %39
  %42 = mul i32 %29, %1
  %43 = mul i32 %29, %3
  %44 = mul i32 %29, %5
  br i1 %12, label %45, label %136

45:                                               ; preds = %28
  %46 = mul i32 %29, %3
  %47 = mul i32 %29, %5
  %48 = mul i32 %29, %1
  br i1 %19, label %106, label %49

49:                                               ; preds = %45
  %50 = xor i32 %42, -1
  %51 = icmp ult i32 %50, %20
  %52 = or i1 %51, %21
  %53 = xor i32 %43, -1
  %54 = icmp ult i32 %53, %22
  %55 = or i1 %54, %23
  %56 = or i1 %52, %55
  %57 = xor i32 %44, -1
  %58 = icmp ult i32 %57, %24
  %59 = or i1 %58, %25
  %60 = or i1 %56, %59
  br i1 %60, label %106, label %61

61:                                               ; preds = %49
  %62 = icmp ugt i8* %33, %6
  %63 = icmp ult i8* %32, %15
  %64 = and i1 %62, %63
  %65 = icmp ult i8* %32, %37
  %66 = icmp ult i8* %36, %33
  %67 = and i1 %65, %66
  %68 = or i1 %64, %67
  %69 = icmp ult i8* %32, %41
  %70 = icmp ult i8* %40, %33
  %71 = and i1 %69, %70
  %72 = or i1 %68, %71
  br i1 %72, label %106, label %73

73:                                               ; preds = %61, %73
  %74 = phi i64 [ %103, %73 ], [ 0, %61 ]
  %75 = getelementptr inbounds i8, i8* %6, i64 %74
  %76 = bitcast i8* %75 to <16 x i8>*
  %77 = load <16 x i8>, <16 x i8>* %76, align 1, !alias.scope !2, !noalias !5
  %78 = zext <16 x i8> %77 to <16 x i32>
  %79 = trunc i64 %74 to i32
  %80 = add i32 %46, %79
  %81 = zext i32 %80 to i64
  %82 = getelementptr inbounds i8, i8* %2, i64 %81
  %83 = bitcast i8* %82 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 1, !alias.scope !7
  %85 = zext <16 x i8> %84 to <16 x i32>
  %86 = mul nuw nsw <16 x i32> %85, %78
  %87 = sub nsw <16 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %78
  %88 = add i32 %47, %79
  %89 = zext i32 %88 to i64
  %90 = getelementptr inbounds i8, i8* %4, i64 %89
  %91 = bitcast i8* %90 to <16 x i8>*
  %92 = load <16 x i8>, <16 x i8>* %91, align 1, !alias.scope !9
  %93 = zext <16 x i8> %92 to <16 x i32>
  %94 = mul nsw <16 x i32> %87, %93
  %95 = add nuw nsw <16 x i32> %86, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %96 = add nsw <16 x i32> %95, %94
  %97 = lshr <16 x i32> %96, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %98 = trunc <16 x i32> %97 to <16 x i8>
  %99 = add i32 %48, %79
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds i8, i8* %0, i64 %100
  %102 = bitcast i8* %101 to <16 x i8>*
  store <16 x i8> %98, <16 x i8>* %102, align 1, !alias.scope !5, !noalias !11
  %103 = add i64 %74, 16
  %104 = icmp eq i64 %103, %26
  br i1 %104, label %105, label %73, !llvm.loop !12

105:                                              ; preds = %73
  br i1 %27, label %136, label %106

106:                                              ; preds = %105, %61, %49, %45
  %107 = phi i64 [ 0, %61 ], [ 0, %49 ], [ 0, %45 ], [ %26, %105 ]
  br label %108

108:                                              ; preds = %106, %108
  %109 = phi i64 [ %134, %108 ], [ %107, %106 ]
  %110 = getelementptr inbounds i8, i8* %6, i64 %109
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i32
  %113 = trunc i64 %109 to i32
  %114 = add i32 %46, %113
  %115 = zext i32 %114 to i64
  %116 = getelementptr inbounds i8, i8* %2, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = mul nuw nsw i32 %118, %112
  %120 = sub nsw i32 64, %112
  %121 = add i32 %47, %113
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds i8, i8* %4, i64 %122
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i32
  %126 = mul nsw i32 %120, %125
  %127 = add nuw nsw i32 %119, 32
  %128 = add nsw i32 %127, %126
  %129 = lshr i32 %128, 6
  %130 = trunc i32 %129 to i8
  %131 = add i32 %48, %113
  %132 = zext i32 %131 to i64
  %133 = getelementptr inbounds i8, i8* %0, i64 %132
  store i8 %130, i8* %133, align 1
  %134 = add nuw nsw i64 %109, 1
  %135 = icmp eq i64 %134, %13
  br i1 %135, label %136, label %108, !llvm.loop !14

136:                                              ; preds = %108, %105, %28
  %137 = add nuw nsw i32 %29, 1
  %138 = icmp eq i32 %137, %8
  br i1 %138, label %139, label %28

139:                                              ; preds = %136, %9
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = !{!8}
!8 = distinct !{!8, !4}
!9 = !{!10}
!10 = distinct !{!10, !4}
!11 = !{!8, !10}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.isvectorized", i32 1}
!14 = distinct !{!14, !13}
