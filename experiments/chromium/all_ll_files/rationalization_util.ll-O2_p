; ModuleID = '../../components/autofill/core/browser/rationalization_util.cc'
source_filename = "../../components/autofill/core/browser/rationalization_util.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.autofill::AutofillField"**, %"class.autofill::AutofillField"**, %"class.std::__1::__compressed_pair.54" }
%"class.autofill::AutofillField" = type <{ i32 (...)**, %"struct.autofill::FormFieldData", %"class.absl::optional.21", %"class.std::__1::basic_string", i32, i8, [3 x i8], %"class.std::__1::vector.28", i8, [7 x i8], %"class.absl::optional.36", i32, %"class.autofill::AutofillType", i32, i32, %"class.autofill::DenseSet", %"class.std::__1::map", i32, %"class.absl::optional.49", [4 x i8], i64, i8, i8, [6 x i8], %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, i8, [3 x i8], i32, i8, [3 x i8] }>
%"struct.autofill::FormFieldData" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.autofill::internal::TokenType", %"class.autofill::FieldRendererId", %"class.autofill::FormRendererId", %"class.url::Origin", i32, %"class.std::__1::basic_string.1", i64, i8, i32, i8, i8, i32, i32, i32, i8, i8, %"class.std::__1::basic_string", %"class.std::__1::vector.14", %"class.std::__1::vector.14", i32, %"class.gfx::RectF", %"class.std::__1::vector.14", %"class.std::__1::vector.14" }
%"class.autofill::internal::TokenType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.autofill::FieldRendererId" = type { %"class.util::IdType" }
%"class.util::IdType" = type { %"class.base::StrongAlias.10" }
%"class.base::StrongAlias.10" = type { i32 }
%"class.autofill::FormRendererId" = type { %"class.util::IdType.11" }
%"class.util::IdType.11" = type { %"class.base::StrongAlias.12" }
%"class.base::StrongAlias.12" = type { i32 }
%"class.url::Origin" = type { %"class.url::SchemeHostPort", %"class.absl::optional" }
%"class.url::SchemeHostPort" = type <{ %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1", i16, [6 x i8] }>
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.13 }
%union.anon.13 = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.std::__1::basic_string.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.4 }
%union.anon.4 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::SizeF" = type { float, float }
%"class.std::__1::vector.14" = type { %"class.std::__1::__vector_base.15" }
%"class.std::__1::__vector_base.15" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.std::__1::basic_string"* }
%"class.absl::optional.21" = type { %"class.absl::optional_internal::optional_data.22" }
%"class.absl::optional_internal::optional_data.22" = type { %"class.absl::optional_internal::optional_data_base.23" }
%"class.absl::optional_internal::optional_data_base.23" = type { %"class.absl::optional_internal::optional_data_dtor_base.24" }
%"class.absl::optional_internal::optional_data_dtor_base.24" = type { i8, %union.anon.25 }
%union.anon.25 = type { %"class.autofill::FieldSignature" }
%"class.autofill::FieldSignature" = type { %"class.util::IdType.26" }
%"class.util::IdType.26" = type { %"class.base::StrongAlias.27" }
%"class.base::StrongAlias.27" = type { i32 }
%"class.std::__1::vector.28" = type { %"class.std::__1::__vector_base.29" }
%"class.std::__1::__vector_base.29" = type { %"class.autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction"*, %"class.autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction"*, %"class.std::__1::__compressed_pair.31" }
%"class.autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction" = type <{ %"class.google::protobuf::MessageLite", %"class.google::protobuf::internal::HasBits", %"class.google::protobuf::internal::CachedSize", i32, i8, [3 x i8] }>
%"class.google::protobuf::MessageLite" = type { i32 (...)**, %"class.google::protobuf::internal::InternalMetadata" }
%"class.google::protobuf::internal::InternalMetadata" = type { i8* }
%"class.google::protobuf::internal::HasBits" = type { [1 x i32] }
%"class.google::protobuf::internal::CachedSize" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.30" }
%"struct.std::__1::__atomic_base.30" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"class.autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction"* }
%"class.absl::optional.36" = type { %"class.absl::optional_internal::optional_data.37" }
%"class.absl::optional_internal::optional_data.37" = type { %"class.absl::optional_internal::optional_data_base.38" }
%"class.absl::optional_internal::optional_data_base.38" = type { %"class.absl::optional_internal::optional_data_dtor_base.39" }
%"class.absl::optional_internal::optional_data_dtor_base.39" = type { i8, %union.anon.40 }
%union.anon.40 = type { %"class.autofill::PasswordRequirementsSpec" }
%"class.autofill::PasswordRequirementsSpec" = type { %"class.google::protobuf::MessageLite", %"class.google::protobuf::internal::HasBits", %"class.google::protobuf::internal::CachedSize", %"class.autofill::PasswordRequirementsSpec_CharacterClass"*, %"class.autofill::PasswordRequirementsSpec_CharacterClass"*, %"class.autofill::PasswordRequirementsSpec_CharacterClass"*, %"class.autofill::PasswordRequirementsSpec_CharacterClass"*, %"class.autofill::PasswordRequirementsSpec_CharacterClass"*, i32, i32, i32, i32 }
%"class.autofill::PasswordRequirementsSpec_CharacterClass" = type { %"class.google::protobuf::MessageLite", %"class.google::protobuf::internal::HasBits", %"class.google::protobuf::internal::CachedSize", %"struct.google::protobuf::internal::ArenaStringPtr", i32, i32 }
%"struct.google::protobuf::internal::ArenaStringPtr" = type { %"class.std::__1::basic_string.1"* }
%"class.autofill::AutofillType" = type { i32, i32, i32 }
%"class.autofill::DenseSet" = type { %"class.std::__1::bitset" }
%"class.std::__1::bitset" = type { %"class.std::__1::__bitset" }
%"class.std::__1::__bitset" = type { [2 x i64] }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.41", %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { i64 }
%"class.absl::optional.49" = type { %"class.absl::optional_internal::optional_data.50" }
%"class.absl::optional_internal::optional_data.50" = type { %"class.absl::optional_internal::optional_data_base.51" }
%"class.absl::optional_internal::optional_data_base.51" = type { %"class.absl::optional_internal::optional_data_dtor_base.52" }
%"class.absl::optional_internal::optional_data_dtor_base.52" = type { i8, %union.anon.53 }
%union.anon.53 = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { %"class.autofill::AutofillField"** }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill20rationalization_util28RationalizePhoneNumberFieldsERNSt3__16vectorIPNS_13AutofillFieldENS1_9allocatorIS4_EEEE(%"class.std::__1::vector"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 {
  %2 = alloca %"class.autofill::AutofillType", align 8
  %3 = alloca %"class.autofill::AutofillType", align 8
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %5 = load %"class.autofill::AutofillField"**, %"class.autofill::AutofillField"*** %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = load %"class.autofill::AutofillField"**, %"class.autofill::AutofillField"*** %6, align 8
  %8 = icmp eq %"class.autofill::AutofillField"** %5, %7
  br i1 %8, label %57, label %9

9:                                                ; preds = %1
  %10 = bitcast %"class.autofill::AutofillType"* %2 to i8*
  %11 = bitcast %"class.autofill::AutofillType"* %2 to i64*
  %12 = getelementptr inbounds %"class.autofill::AutofillType", %"class.autofill::AutofillType"* %2, i64 0, i32 2
  br label %13

13:                                               ; preds = %9, %48
  %14 = phi %"class.autofill::AutofillField"* [ null, %9 ], [ %49, %48 ]
  %15 = phi %"class.autofill::AutofillField"* [ null, %9 ], [ %50, %48 ]
  %16 = phi %"class.autofill::AutofillField"* [ null, %9 ], [ %51, %48 ]
  %17 = phi i8 [ 0, %9 ], [ %52, %48 ]
  %18 = phi %"class.autofill::AutofillField"** [ %5, %9 ], [ %53, %48 ]
  %19 = load %"class.autofill::AutofillField"*, %"class.autofill::AutofillField"** %18, align 8
  %20 = getelementptr inbounds %"class.autofill::AutofillField", %"class.autofill::AutofillField"* %19, i64 0, i32 1, i32 20
  %21 = load i8, i8* %20, align 8, !range !2
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %48, label %23

23:                                               ; preds = %13
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %10) #3
  %24 = call { i64, i32 } @_ZNK8autofill13AutofillField4TypeEv(%"class.autofill::AutofillField"* %19) #3
  %25 = extractvalue { i64, i32 } %24, 0
  %26 = extractvalue { i64, i32 } %24, 1
  store i64 %25, i64* %11, align 8
  store i32 %26, i32* %12, align 8
  %27 = call i32 @_ZNK8autofill12AutofillType15GetStorableTypeEv(%"class.autofill::AutofillType"* nonnull %2) #3
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %10) #3
  switch i32 %27, label %41 [
    i32 10, label %28
    i32 62, label %28
    i32 11, label %35
    i32 63, label %35
    i32 12, label %38
    i32 64, label %38
    i32 13, label %57
    i32 65, label %57
    i32 14, label %55
    i32 66, label %55
  ]

28:                                               ; preds = %23, %23
  %29 = icmp eq %"class.autofill::AutofillField"* %14, null
  br i1 %29, label %30, label %57

30:                                               ; preds = %28
  %31 = getelementptr inbounds %"class.autofill::AutofillField", %"class.autofill::AutofillField"* %19, i64 0, i32 1, i32 17
  %32 = load i64, i64* %31, align 8
  %33 = icmp ult i64 %32, 5
  %34 = select i1 %33, i8 %17, i8 1
  br label %41

35:                                               ; preds = %23, %23
  %36 = icmp eq %"class.autofill::AutofillField"* %15, null
  %37 = select i1 %36, %"class.autofill::AutofillField"* %19, %"class.autofill::AutofillField"* %15
  br label %41

38:                                               ; preds = %23, %23
  %39 = icmp eq %"class.autofill::AutofillField"* %16, null
  %40 = select i1 %39, %"class.autofill::AutofillField"* %19, %"class.autofill::AutofillField"* %16
  br label %41

41:                                               ; preds = %38, %35, %30, %23
  %42 = phi i8 [ %17, %23 ], [ %34, %30 ], [ %17, %35 ], [ %17, %38 ]
  %43 = phi %"class.autofill::AutofillField"* [ %16, %23 ], [ %16, %30 ], [ %16, %35 ], [ %40, %38 ]
  %44 = phi %"class.autofill::AutofillField"* [ %15, %23 ], [ %15, %30 ], [ %37, %35 ], [ %15, %38 ]
  %45 = phi %"class.autofill::AutofillField"* [ %14, %23 ], [ %19, %30 ], [ %14, %35 ], [ %14, %38 ]
  %46 = and i8 %42, 1
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %48, label %57

48:                                               ; preds = %41, %13
  %49 = phi %"class.autofill::AutofillField"* [ %14, %13 ], [ %45, %41 ]
  %50 = phi %"class.autofill::AutofillField"* [ %15, %13 ], [ %44, %41 ]
  %51 = phi %"class.autofill::AutofillField"* [ %16, %13 ], [ %43, %41 ]
  %52 = phi i8 [ %17, %13 ], [ %42, %41 ]
  %53 = getelementptr inbounds %"class.autofill::AutofillField"*, %"class.autofill::AutofillField"** %18, i64 1
  %54 = icmp eq %"class.autofill::AutofillField"** %53, %7
  br i1 %54, label %57, label %13

55:                                               ; preds = %23, %23
  %56 = icmp eq %"class.autofill::AutofillField"* %19, null
  br i1 %56, label %57, label %67

57:                                               ; preds = %23, %23, %28, %41, %48, %1, %55
  %58 = phi %"class.autofill::AutofillField"* [ %14, %55 ], [ null, %1 ], [ %49, %48 ], [ %45, %41 ], [ %14, %28 ], [ %14, %23 ], [ %14, %23 ]
  %59 = phi %"class.autofill::AutofillField"* [ null, %55 ], [ null, %1 ], [ null, %48 ], [ null, %41 ], [ %19, %28 ], [ null, %23 ], [ null, %23 ]
  %60 = phi %"class.autofill::AutofillField"* [ %15, %55 ], [ null, %1 ], [ %50, %48 ], [ %44, %41 ], [ %15, %28 ], [ %15, %23 ], [ %15, %23 ]
  %61 = phi %"class.autofill::AutofillField"* [ %16, %55 ], [ null, %1 ], [ %51, %48 ], [ %43, %41 ], [ %16, %28 ], [ %16, %23 ], [ %16, %23 ]
  %62 = phi %"class.autofill::AutofillField"* [ null, %55 ], [ null, %1 ], [ null, %48 ], [ null, %41 ], [ null, %28 ], [ %19, %23 ], [ %19, %23 ]
  %63 = icmp eq %"class.autofill::AutofillField"* %62, null
  %64 = select i1 %63, %"class.autofill::AutofillField"* %60, %"class.autofill::AutofillField"* null
  %65 = select i1 %63, %"class.autofill::AutofillField"* %59, %"class.autofill::AutofillField"* null
  %66 = select i1 %63, %"class.autofill::AutofillField"* %58, %"class.autofill::AutofillField"* null
  br label %67

67:                                               ; preds = %57, %55
  %68 = phi %"class.autofill::AutofillField"* [ null, %55 ], [ %62, %57 ]
  %69 = phi %"class.autofill::AutofillField"* [ %19, %55 ], [ null, %57 ]
  %70 = phi %"class.autofill::AutofillField"* [ null, %55 ], [ %61, %57 ]
  %71 = phi %"class.autofill::AutofillField"* [ null, %55 ], [ %64, %57 ]
  %72 = phi %"class.autofill::AutofillField"* [ null, %55 ], [ %65, %57 ]
  %73 = phi %"class.autofill::AutofillField"* [ null, %55 ], [ %66, %57 ]
  %74 = load %"class.autofill::AutofillField"**, %"class.autofill::AutofillField"*** %4, align 8
  %75 = load %"class.autofill::AutofillField"**, %"class.autofill::AutofillField"*** %6, align 8
  %76 = icmp eq %"class.autofill::AutofillField"** %74, %75
  br i1 %76, label %81, label %77

77:                                               ; preds = %67
  %78 = bitcast %"class.autofill::AutofillType"* %3 to i8*
  %79 = bitcast %"class.autofill::AutofillType"* %3 to i64*
  %80 = getelementptr inbounds %"class.autofill::AutofillType", %"class.autofill::AutofillType"* %3, i64 0, i32 2
  br label %82

81:                                               ; preds = %111, %67
  ret void

82:                                               ; preds = %77, %111
  %83 = phi %"class.autofill::AutofillField"** [ %74, %77 ], [ %112, %111 ]
  %84 = load %"class.autofill::AutofillField"*, %"class.autofill::AutofillField"** %83, align 8
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %78) #3
  %85 = call { i64, i32 } @_ZNK8autofill13AutofillField4TypeEv(%"class.autofill::AutofillField"* %84) #3
  %86 = extractvalue { i64, i32 } %85, 0
  %87 = extractvalue { i64, i32 } %85, 1
  store i64 %86, i64* %79, align 8
  store i32 %87, i32* %80, align 8
  %88 = call i32 @_ZNK8autofill12AutofillType15GetStorableTypeEv(%"class.autofill::AutofillType"* nonnull %3) #3
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %78) #3
  switch i32 %88, label %111 [
    i32 10, label %89
    i32 62, label %89
    i32 11, label %95
    i32 63, label %95
    i32 12, label %99
    i32 64, label %99
    i32 13, label %103
    i32 65, label %103
    i32 14, label %107
    i32 66, label %107
  ]

89:                                               ; preds = %82, %82
  %90 = icmp eq %"class.autofill::AutofillField"* %84, %73
  %91 = icmp eq %"class.autofill::AutofillField"* %84, %72
  %92 = or i1 %90, %91
  br i1 %92, label %111, label %93

93:                                               ; preds = %89
  %94 = getelementptr inbounds %"class.autofill::AutofillField", %"class.autofill::AutofillField"* %84, i64 0, i32 22
  store i8 1, i8* %94, align 1
  br label %111

95:                                               ; preds = %82, %82
  %96 = icmp eq %"class.autofill::AutofillField"* %84, %71
  br i1 %96, label %111, label %97

97:                                               ; preds = %95
  %98 = getelementptr inbounds %"class.autofill::AutofillField", %"class.autofill::AutofillField"* %84, i64 0, i32 22
  store i8 1, i8* %98, align 1
  br label %111

99:                                               ; preds = %82, %82
  %100 = icmp eq %"class.autofill::AutofillField"* %84, %70
  br i1 %100, label %111, label %101

101:                                              ; preds = %99
  %102 = getelementptr inbounds %"class.autofill::AutofillField", %"class.autofill::AutofillField"* %84, i64 0, i32 22
  store i8 1, i8* %102, align 1
  br label %111

103:                                              ; preds = %82, %82
  %104 = icmp eq %"class.autofill::AutofillField"* %84, %68
  br i1 %104, label %111, label %105

105:                                              ; preds = %103
  %106 = getelementptr inbounds %"class.autofill::AutofillField", %"class.autofill::AutofillField"* %84, i64 0, i32 22
  store i8 1, i8* %106, align 1
  br label %111

107:                                              ; preds = %82, %82
  %108 = icmp eq %"class.autofill::AutofillField"* %84, %69
  br i1 %108, label %111, label %109

109:                                              ; preds = %107
  %110 = getelementptr inbounds %"class.autofill::AutofillField", %"class.autofill::AutofillField"* %84, i64 0, i32 22
  store i8 1, i8* %110, align 1
  br label %111

111:                                              ; preds = %89, %95, %99, %103, %107, %82, %109, %105, %101, %97, %93
  %112 = getelementptr inbounds %"class.autofill::AutofillField"*, %"class.autofill::AutofillField"** %83, i64 1
  %113 = load %"class.autofill::AutofillField"**, %"class.autofill::AutofillField"*** %6, align 8
  %114 = icmp eq %"class.autofill::AutofillField"** %112, %113
  br i1 %114, label %81, label %82
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare { i64, i32 } @_ZNK8autofill13AutofillField4TypeEv(%"class.autofill::AutofillField"*) local_unnamed_addr #2

declare i32 @_ZNK8autofill12AutofillType15GetStorableTypeEv(%"class.autofill::AutofillType"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
