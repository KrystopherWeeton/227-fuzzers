; ModuleID = '../../net/third_party/quiche/src/spdy/core/spdy_alt_svc_wire_format.cc'
source_filename = "../../net/third_party/quiche/src/spdy/core/spdy_alt_svc_wire_format.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.spdy::SpdyAltSvcWireFormat::AlternativeService" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", i16, i32, %"class.absl::InlinedVector" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.absl::InlinedVector" = type { %"class.absl::inlined_vector_internal::Storage" }
%"class.absl::inlined_vector_internal::Storage" = type { %"class.absl::container_internal::CompressedTuple", %"union.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Data" }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.3" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage.3" = type { i64 }
%"union.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Allocated", [16 x i8] }
%"struct.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Allocated" = type { i32*, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"*, %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"*, %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* }
%"class.absl::AlphaNum" = type { %"class.absl::string_view", [32 x i8] }
%"class.absl::string_view" = type { i8*, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN4absl23inlined_vector_internal7StorageIjLm8ENSt3__19allocatorIjEEE8InitFromERKS5_ = comdat any

$_ZN4absl23inlined_vector_internal7StorageIjLm8ENSt3__19allocatorIjEEE15EmplaceBackSlowIJjEEERjDpOT_ = comdat any

$_ZN4absl23inlined_vector_internal7StorageIjLm8ENSt3__19allocatorIjEEE15EmplaceBackSlowIJRKjEEERjDpOT_ = comdat any

$_ZNSt3__16vectorIN4spdy20SpdyAltSvcWireFormat18AlternativeServiceENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJRNS_12basic_stringIcNS_11char_traitsIcEENS4_IcEEEESD_RtRjRN4absl13InlinedVectorIjLm8ENS4_IjEEEEEEEvDpOT_ = comdat any

@.str = private unnamed_addr constant [6 x i8] c"clear\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"hq\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"ma\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"v\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"quic\00", align 1
@_ZZN4spdy20SpdyAltSvcWireFormat25SerializeHeaderFieldValueERKNSt3__16vectorINS0_18AlternativeServiceENS1_9allocatorIS3_EEEEE12kNibbleToHex = internal unnamed_addr constant [17 x i8] c"0123456789ABCDEF\00", align 16
@.str.5 = private unnamed_addr constant [2 x i8] c":\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"; ma=\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"; quic=\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"; v=\22\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c",\00", align 1

@_ZN4spdy20SpdyAltSvcWireFormat18AlternativeServiceC1Ev = hidden unnamed_addr alias void (%"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"*), void (%"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"*)* @_ZN4spdy20SpdyAltSvcWireFormat18AlternativeServiceC2Ev
@_ZN4spdy20SpdyAltSvcWireFormat18AlternativeServiceC1ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_tjN4absl13InlinedVectorIjLm8ENS6_IjEEEE = hidden unnamed_addr alias void (%"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"*, %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, i16, i32, %"class.absl::InlinedVector"*), void (%"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"*, %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, i16, i32, %"class.absl::InlinedVector"*)* @_ZN4spdy20SpdyAltSvcWireFormat18AlternativeServiceC2ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_tjN4absl13InlinedVectorIjLm8ENS6_IjEEEE
@_ZN4spdy20SpdyAltSvcWireFormat18AlternativeServiceD1Ev = hidden unnamed_addr alias void (%"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"*), void (%"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"*)* @_ZN4spdy20SpdyAltSvcWireFormat18AlternativeServiceD2Ev
@_ZN4spdy20SpdyAltSvcWireFormat18AlternativeServiceC1ERKS1_ = hidden unnamed_addr alias void (%"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"*, %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"*), void (%"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"*, %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"*)* @_ZN4spdy20SpdyAltSvcWireFormat18AlternativeServiceC2ERKS1_

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4spdy20SpdyAltSvcWireFormat18AlternativeServiceC2Ev(%"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %0, i64 0, i32 3
  %3 = bitcast %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 50, i1 false)
  store i32 86400, i32* %2, align 4
  %4 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4spdy20SpdyAltSvcWireFormat18AlternativeServiceC2ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_tjN4absl13InlinedVectorIjLm8ENS6_IjEEEE(%"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"*, %"class.std::__1::basic_string"* nocapture readonly dereferenceable(24), %"class.std::__1::basic_string"* nocapture readonly dereferenceable(24), i16 zeroext, i32, %"class.absl::InlinedVector"* nocapture) unnamed_addr #0 align 2 {
  %7 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %8 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %7, i64 0, i32 1, i32 0
  %9 = load i8, i8* %8, align 1
  %10 = icmp slt i8 %9, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %6
  %12 = bitcast %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %0 to i8*
  %13 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 24, i1 false) #15
  br label %20

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %0, i64 0, i32 0
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %15, i8* %17, i64 %19) #15
  br label %20

20:                                               ; preds = %11, %14
  %21 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %0, i64 0, i32 1
  %22 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %23 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %22, i64 0, i32 1, i32 0
  %24 = load i8, i8* %23, align 1
  %25 = icmp slt i8 %24, 0
  br i1 %25, label %29, label %26

26:                                               ; preds = %20
  %27 = bitcast %"class.std::__1::basic_string"* %21 to i8*
  %28 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %27, i8* align 8 %28, i64 24, i1 false) #15
  br label %34

29:                                               ; preds = %20
  %30 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %33 = load i64, i64* %32, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %21, i8* %31, i64 %33) #15
  br label %34

34:                                               ; preds = %26, %29
  %35 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %0, i64 0, i32 2
  store i16 %3, i16* %35, align 8
  %36 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %0, i64 0, i32 3
  store i32 %4, i32* %36, align 4
  %37 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %37, align 8
  %38 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %37, align 8
  %40 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %5, i64 0, i32 0, i32 1
  %41 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %0, i64 0, i32 4, i32 0, i32 1
  %42 = bitcast %"union.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Data"* %41 to i8*
  %43 = bitcast %"union.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Data"* %40 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* align 8 %43, i64 32, i1 false) #15
  store i64 0, i64* %38, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4spdy20SpdyAltSvcWireFormat18AlternativeServiceD2Ev(%"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, 1
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %0, i64 0, i32 4, i32 0, i32 1, i32 0, i32 0
  %8 = bitcast i32** %7 to i8**
  %9 = load i8*, i8** %8, align 8
  tail call void @_ZdlPv(i8* %9) #16
  br label %10

10:                                               ; preds = %1, %6
  %11 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %0, i64 0, i32 1
  %12 = bitcast %"class.std::__1::basic_string"* %11 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %13 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %12, i64 0, i32 1, i32 0
  %14 = load i8, i8* %13, align 1
  %15 = icmp slt i8 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %10
  %17 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  tail call void @_ZdlPv(i8* %18) #16
  br label %19

19:                                               ; preds = %10, %16
  %20 = bitcast %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %21 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %20, i64 0, i32 1, i32 0
  %22 = load i8, i8* %21, align 1
  %23 = icmp slt i8 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %19
  %25 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  tail call void @_ZdlPv(i8* %26) #16
  br label %27

27:                                               ; preds = %19, %24
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4spdy20SpdyAltSvcWireFormat18AlternativeServiceC2ERKS1_(%"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"*, %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* dereferenceable(96)) unnamed_addr #0 align 2 {
  %3 = bitcast %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %3, i64 0, i32 1, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = icmp slt i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %2
  %8 = bitcast %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %0 to i8*
  %9 = bitcast %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 24, i1 false) #15
  br label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %0, i64 0, i32 0
  %12 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %11, i8* %13, i64 %15) #15
  br label %16

16:                                               ; preds = %7, %10
  %17 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %0, i64 0, i32 1
  %18 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %1, i64 0, i32 1
  %19 = bitcast %"class.std::__1::basic_string"* %18 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %20 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %19, i64 0, i32 1, i32 0
  %21 = load i8, i8* %20, align 1
  %22 = icmp slt i8 %21, 0
  br i1 %22, label %26, label %23

23:                                               ; preds = %16
  %24 = bitcast %"class.std::__1::basic_string"* %17 to i8*
  %25 = bitcast %"class.std::__1::basic_string"* %18 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %25, i64 24, i1 false) #15
  br label %31

26:                                               ; preds = %16
  %27 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %30 = load i64, i64* %29, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %17, i8* %28, i64 %30) #15
  br label %31

31:                                               ; preds = %23, %26
  %32 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %0, i64 0, i32 2
  %33 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %1, i64 0, i32 2
  %34 = bitcast i16* %33 to i64*
  %35 = bitcast i16* %32 to i64*
  %36 = load i64, i64* %34, align 8
  store i64 %36, i64* %35, align 8
  %37 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %0, i64 0, i32 4
  %38 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %1, i64 0, i32 4
  %39 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %38, i64 0, i32 0
  %40 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %37, i64 0, i32 0
  %41 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %37, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %41, align 8
  %42 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %38, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = load i64, i64* %42, align 8
  %44 = icmp ult i64 %43, 2
  br i1 %44, label %54, label %45

45:                                               ; preds = %31
  %46 = and i64 %43, 1
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %53

48:                                               ; preds = %45
  store i64 %43, i64* %41, align 8
  %49 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %1, i64 0, i32 4, i32 0, i32 1
  %50 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %0, i64 0, i32 4, i32 0, i32 1
  %51 = bitcast %"union.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Data"* %50 to i8*
  %52 = bitcast %"union.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Data"* %49 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %51, i8* align 8 %52, i64 32, i1 false) #15
  br label %54

53:                                               ; preds = %45
  tail call void @_ZN4absl23inlined_vector_internal7StorageIjLm8ENSt3__19allocatorIjEEE8InitFromERKS5_(%"class.absl::inlined_vector_internal::Storage"* %40, %"class.absl::inlined_vector_internal::Storage"* dereferenceable(40) %39) #15
  br label %54

54:                                               ; preds = %31, %48, %53
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4spdy20SpdyAltSvcWireFormat21ParseHeaderFieldValueEN4absl11string_viewEPNSt3__16vectorINS0_18AlternativeServiceENS3_9allocatorIS5_EEEE(i8*, i64, %"class.std::__1::vector"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.absl::InlinedVector", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca i16, align 2
  %8 = alloca i32, align 4
  %9 = alloca %"class.absl::InlinedVector", align 8
  %10 = alloca %"class.std::__1::basic_string", align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %579, label %14

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %16 = load %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"*, %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %18 = load %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"*, %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"** %17, align 8
  %19 = icmp eq %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %18, %16
  br i1 %19, label %50, label %20

20:                                               ; preds = %14, %48
  %21 = phi %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* [ %22, %48 ], [ %18, %14 ]
  %22 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %21, i64 -1
  %23 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %21, i64 -1, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = and i64 %24, 1
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %31, label %27

27:                                               ; preds = %20
  %28 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %21, i64 -1, i32 4, i32 0, i32 1, i32 0, i32 0
  %29 = bitcast i32** %28 to i8**
  %30 = load i8*, i8** %29, align 8
  tail call void @_ZdlPv(i8* %30) #16
  br label %31

31:                                               ; preds = %27, %20
  %32 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %21, i64 -1, i32 1
  %33 = bitcast %"class.std::__1::basic_string"* %32 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %34 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %33, i64 0, i32 1, i32 0
  %35 = load i8, i8* %34, align 1
  %36 = icmp slt i8 %35, 0
  br i1 %36, label %37, label %40

37:                                               ; preds = %31
  %38 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %32, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  tail call void @_ZdlPv(i8* %39) #16
  br label %40

40:                                               ; preds = %37, %31
  %41 = bitcast %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %22 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %42 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %41, i64 0, i32 1, i32 0
  %43 = load i8, i8* %42, align 1
  %44 = icmp slt i8 %43, 0
  br i1 %44, label %45, label %48

45:                                               ; preds = %40
  %46 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = load i8*, i8** %46, align 8
  tail call void @_ZdlPv(i8* %47) #16
  br label %48

48:                                               ; preds = %45, %40
  %49 = icmp eq %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %22, %16
  br i1 %49, label %50, label %20

50:                                               ; preds = %48, %14
  store %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %16, %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"** %17, align 8
  %51 = icmp eq i64 %1, 5
  br i1 %51, label %52, label %55

52:                                               ; preds = %50
  %53 = tail call i32 @bcmp(i8* %0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i64 5) #15
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %579, label %55

55:                                               ; preds = %50, %52
  %56 = ptrtoint i8* %0 to i64
  %57 = getelementptr inbounds i8, i8* %0, i64 %1
  %58 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  %59 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %60 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %61 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %62 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %61, i64 0, i32 1, i32 0
  %63 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  %64 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %65 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %66 = bitcast i16* %7 to i8*
  %67 = bitcast i32* %8 to i8*
  %68 = bitcast %"class.absl::InlinedVector"* %9 to i8*
  %69 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %70 = bitcast %"class.std::__1::basic_string"* %10 to i8*
  %71 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %72 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %73 = bitcast %"class.std::__1::basic_string"* %10 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %74 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %73, i64 0, i32 1, i32 0
  %75 = ptrtoint i8* %57 to i64
  %76 = bitcast i32* %11 to i8*
  %77 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %9, i64 0, i32 0, i32 1, i32 0, i32 1
  %78 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %9, i64 0, i32 0, i32 1
  %79 = ptrtoint %"union.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Data"* %78 to i64
  %80 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %9, i64 0, i32 0, i32 1, i32 0, i32 0
  %81 = bitcast i32** %80 to i64*
  %82 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %9, i64 0, i32 0
  %83 = bitcast i32* %12 to i8*
  %84 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %85 = bitcast %"class.absl::InlinedVector"* %4 to i8*
  %86 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %4, i64 0, i32 0
  %87 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %88 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %4, i64 0, i32 0, i32 1
  %89 = bitcast %"union.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Data"* %88 to i8*
  %90 = bitcast %"union.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Data"* %78 to i8*
  %91 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %92 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %91, i64 0, i32 1, i32 0
  %93 = bitcast %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"** %17 to i64*
  %94 = bitcast i32** %80 to i8**
  %95 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %9, i64 0, i32 0, i32 1
  %96 = bitcast %"union.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Data"* %95 to i8*
  br label %97

97:                                               ; preds = %577, %55
  %98 = phi i64 [ %56, %55 ], [ %571, %577 ]
  %99 = inttoptr i64 %98 to i8*
  %100 = icmp eq i8* %57, %99
  br i1 %100, label %579, label %101

101:                                              ; preds = %97, %105
  %102 = phi i8* [ %106, %105 ], [ %99, %97 ]
  %103 = load i8, i8* %102, align 1
  %104 = icmp eq i8 %103, 61
  br i1 %104, label %108, label %105

105:                                              ; preds = %101
  %106 = getelementptr inbounds i8, i8* %102, i64 1
  %107 = icmp eq i8* %106, %57
  br i1 %107, label %108, label %101

108:                                              ; preds = %101, %105
  %109 = phi i8* [ %57, %105 ], [ %102, %101 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %58) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %58, i8 0, i64 24, i1 false) #15
  %110 = icmp eq i8* %109, %99
  br i1 %110, label %570, label %111

111:                                              ; preds = %108
  %112 = call zeroext i1 @_ZN4spdy20SpdyAltSvcWireFormat13PercentDecodeEPKcS2_PNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE(i8* %99, i8* %109, %"class.std::__1::basic_string"* nonnull %5)
  br i1 %112, label %113, label %570

113:                                              ; preds = %111
  %114 = load i8, i8* %62, align 1
  %115 = icmp slt i8 %114, 0
  %116 = load i64, i64* %60, align 8
  %117 = zext i8 %114 to i64
  %118 = select i1 %115, i64 %116, i64 %117
  %119 = icmp eq i64 %118, 2
  br i1 %119, label %120, label %123

120:                                              ; preds = %113
  %121 = call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* nonnull %5, i64 0, i64 -1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i64 2) #15
  %122 = icmp eq i32 %121, 0
  br label %123

123:                                              ; preds = %113, %120
  %124 = phi i1 [ %122, %120 ], [ false, %113 ]
  %125 = ptrtoint i8* %109 to i64
  %126 = icmp eq i8* %109, %57
  br i1 %126, label %570, label %127

127:                                              ; preds = %123
  %128 = getelementptr inbounds i8, i8* %109, i64 1
  %129 = ptrtoint i8* %128 to i64
  %130 = icmp eq i8* %128, %57
  br i1 %130, label %570, label %131

131:                                              ; preds = %127
  %132 = load i8, i8* %128, align 1
  %133 = icmp eq i8 %132, 34
  br i1 %133, label %134, label %570

134:                                              ; preds = %131
  %135 = getelementptr inbounds i8, i8* %109, i64 2
  %136 = ptrtoint i8* %135 to i64
  %137 = icmp eq i8* %135, %57
  br i1 %137, label %570, label %138

138:                                              ; preds = %134, %147
  %139 = phi i64 [ %151, %147 ], [ %136, %134 ]
  %140 = phi i8* [ %150, %147 ], [ %135, %134 ]
  %141 = phi i64 [ %149, %147 ], [ 2, %134 ]
  %142 = load i8, i8* %140, align 1
  switch i8 %142, label %147 [
    i8 34, label %153
    i8 92, label %143
  ]

143:                                              ; preds = %138
  %144 = add nsw i64 %141, 1
  %145 = getelementptr inbounds i8, i8* %109, i64 %144
  %146 = icmp eq i8* %145, %57
  br i1 %146, label %570, label %147

147:                                              ; preds = %138, %143
  %148 = phi i64 [ %144, %143 ], [ %141, %138 ]
  %149 = add nsw i64 %148, 1
  %150 = getelementptr inbounds i8, i8* %109, i64 %149
  %151 = ptrtoint i8* %150 to i64
  %152 = icmp eq i8* %150, %57
  br i1 %152, label %570, label %138

153:                                              ; preds = %138
  %154 = icmp eq i64 %141, 2
  br i1 %154, label %570, label %155

155:                                              ; preds = %153
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %63) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %63, i8 0, i64 24, i1 false) #15
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %66) #15
  store i16 -21846, i16* %7, align 2
  %156 = call zeroext i1 @_ZN4spdy20SpdyAltSvcWireFormat17ParseAltAuthorityEPKcS2_PNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPt(i8* %135, i8* %140, %"class.std::__1::basic_string"* nonnull %6, i16* nonnull %7)
  br i1 %156, label %157, label %562

157:                                              ; preds = %155
  %158 = getelementptr inbounds i8, i8* %140, i64 1
  %159 = ptrtoint i8* %158 to i64
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %67) #15
  store i32 86400, i32* %8, align 4
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %68) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %96, i8 -86, i64 32, i1 false)
  store i64 0, i64* %69, align 8
  %160 = icmp eq i8* %158, %57
  br i1 %160, label %168, label %161

161:                                              ; preds = %157, %165
  %162 = phi i8* [ %166, %165 ], [ %158, %157 ]
  %163 = load i8, i8* %162, align 1
  %164 = icmp eq i8 %163, 44
  br i1 %164, label %168, label %165

165:                                              ; preds = %161
  %166 = getelementptr inbounds i8, i8* %162, i64 1
  %167 = icmp eq i8* %166, %57
  br i1 %167, label %168, label %161

168:                                              ; preds = %161, %165, %157
  %169 = phi i8* [ %57, %157 ], [ %162, %161 ], [ %57, %165 ]
  br label %170

170:                                              ; preds = %168, %497
  %171 = phi i64 [ %490, %497 ], [ %159, %168 ]
  %172 = phi i8* [ %492, %497 ], [ %169, %168 ]
  %173 = inttoptr i64 %171 to i8*
  %174 = icmp eq i8* %172, %173
  br i1 %174, label %499, label %175

175:                                              ; preds = %170, %179
  %176 = phi i64 [ %181, %179 ], [ %171, %170 ]
  %177 = phi i8* [ %180, %179 ], [ %173, %170 ]
  %178 = load i8, i8* %177, align 1
  switch i8 %178, label %185 [
    i8 32, label %179
    i8 9, label %179
  ]

179:                                              ; preds = %175, %175
  %180 = getelementptr inbounds i8, i8* %177, i64 1
  %181 = ptrtoint i8* %180 to i64
  %182 = icmp eq i8* %180, %172
  br i1 %182, label %183, label %175

183:                                              ; preds = %179
  %184 = ptrtoint i8* %172 to i64
  br label %185

185:                                              ; preds = %175, %183
  %186 = phi i64 [ %184, %183 ], [ %176, %175 ]
  %187 = inttoptr i64 %186 to i8*
  %188 = icmp eq i8* %172, %187
  br i1 %188, label %499, label %189

189:                                              ; preds = %185
  %190 = load i8, i8* %187, align 1
  %191 = icmp eq i8 %190, 59
  br i1 %191, label %192, label %553

192:                                              ; preds = %189
  %193 = getelementptr inbounds i8, i8* %187, i64 1
  %194 = ptrtoint i8* %193 to i64
  %195 = icmp eq i8* %193, %172
  br i1 %195, label %206, label %196

196:                                              ; preds = %192, %200
  %197 = phi i64 [ %202, %200 ], [ %194, %192 ]
  %198 = phi i8* [ %201, %200 ], [ %193, %192 ]
  %199 = load i8, i8* %198, align 1
  switch i8 %199, label %206 [
    i8 32, label %200
    i8 9, label %200
  ]

200:                                              ; preds = %196, %196
  %201 = getelementptr inbounds i8, i8* %198, i64 1
  %202 = ptrtoint i8* %201 to i64
  %203 = icmp eq i8* %201, %172
  br i1 %203, label %204, label %196

204:                                              ; preds = %200
  %205 = ptrtoint i8* %172 to i64
  br label %206

206:                                              ; preds = %196, %204, %192
  %207 = phi i64 [ %194, %192 ], [ %205, %204 ], [ %197, %196 ]
  %208 = inttoptr i64 %207 to i8*
  %209 = icmp eq i8* %172, %208
  br i1 %209, label %499, label %210

210:                                              ; preds = %206
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %70) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %70, i8 0, i64 24, i1 false) #15
  br label %211

211:                                              ; preds = %210, %216
  %212 = phi i8* [ %223, %216 ], [ %208, %210 ]
  %213 = phi i64 [ %224, %216 ], [ %207, %210 ]
  %214 = load i8, i8* %212, align 1
  switch i8 %214, label %216 [
    i8 61, label %215
    i8 32, label %215
    i8 9, label %215
  ]

215:                                              ; preds = %211, %211, %211
  br label %226

216:                                              ; preds = %211
  %217 = tail call i32** @__ctype_tolower_loc() #17
  %218 = load i32*, i32** %217, align 8
  %219 = sext i8 %214 to i64
  %220 = getelementptr inbounds i32, i32* %218, i64 %219
  %221 = load i32, i32* %220, align 4
  %222 = trunc i32 %221 to i8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* nonnull %10, i8 signext %222) #15
  %223 = getelementptr inbounds i8, i8* %212, i64 1
  %224 = ptrtoint i8* %223 to i64
  %225 = icmp eq i8* %172, %223
  br i1 %225, label %238, label %211

226:                                              ; preds = %215, %233
  %227 = phi i8 [ %235, %233 ], [ %214, %215 ]
  %228 = phi i64 [ %234, %233 ], [ %213, %215 ]
  %229 = phi i8* [ %231, %233 ], [ %212, %215 ]
  switch i8 %227, label %240 [
    i8 32, label %230
    i8 9, label %230
  ]

230:                                              ; preds = %226, %226
  %231 = getelementptr inbounds i8, i8* %229, i64 1
  %232 = icmp eq i8* %231, %172
  br i1 %232, label %236, label %233

233:                                              ; preds = %230
  %234 = ptrtoint i8* %231 to i64
  %235 = load i8, i8* %231, align 1
  br label %226

236:                                              ; preds = %230
  %237 = ptrtoint i8* %172 to i64
  br label %240

238:                                              ; preds = %216
  %239 = ptrtoint i8* %172 to i64
  br label %240

240:                                              ; preds = %226, %238, %236
  %241 = phi i64 [ %237, %236 ], [ %239, %238 ], [ %228, %226 ]
  %242 = inttoptr i64 %241 to i8*
  %243 = icmp eq i8* %172, %242
  br i1 %243, label %489, label %244

244:                                              ; preds = %240
  %245 = load i8, i8* %242, align 1
  %246 = icmp eq i8 %245, 61
  br i1 %246, label %247, label %489

247:                                              ; preds = %244
  %248 = getelementptr inbounds i8, i8* %242, i64 1
  %249 = ptrtoint i8* %248 to i64
  %250 = icmp eq i8* %248, %172
  br i1 %250, label %261, label %251

251:                                              ; preds = %247, %255
  %252 = phi i64 [ %257, %255 ], [ %249, %247 ]
  %253 = phi i8* [ %256, %255 ], [ %248, %247 ]
  %254 = load i8, i8* %253, align 1
  switch i8 %254, label %261 [
    i8 32, label %255
    i8 9, label %255
  ]

255:                                              ; preds = %251, %251
  %256 = getelementptr inbounds i8, i8* %253, i64 1
  %257 = ptrtoint i8* %256 to i64
  %258 = icmp eq i8* %256, %172
  br i1 %258, label %259, label %251

259:                                              ; preds = %255
  %260 = ptrtoint i8* %172 to i64
  br label %261

261:                                              ; preds = %251, %259, %247
  %262 = phi i64 [ %249, %247 ], [ %260, %259 ], [ %252, %251 ]
  %263 = inttoptr i64 %262 to i8*
  %264 = icmp eq i8* %172, %263
  br i1 %264, label %275, label %265

265:                                              ; preds = %261, %269
  %266 = phi i8* [ %270, %269 ], [ %263, %261 ]
  %267 = phi i64 [ %271, %269 ], [ %262, %261 ]
  %268 = load i8, i8* %266, align 1
  switch i8 %268, label %269 [
    i8 59, label %275
    i8 32, label %275
    i8 9, label %275
  ]

269:                                              ; preds = %265
  %270 = getelementptr inbounds i8, i8* %266, i64 1
  %271 = ptrtoint i8* %270 to i64
  %272 = icmp eq i8* %172, %270
  br i1 %272, label %273, label %265

273:                                              ; preds = %269
  %274 = ptrtoint i8* %172 to i64
  br label %275

275:                                              ; preds = %265, %265, %265, %273, %261
  %276 = phi i64 [ %274, %273 ], [ %262, %261 ], [ %267, %265 ], [ %267, %265 ], [ %267, %265 ]
  %277 = phi i8* [ %172, %273 ], [ %172, %261 ], [ %266, %265 ], [ %266, %265 ], [ %266, %265 ]
  %278 = icmp eq i8* %277, %263
  br i1 %278, label %489, label %279

279:                                              ; preds = %275
  %280 = load i8, i8* %74, align 1
  %281 = icmp slt i8 %280, 0
  %282 = load i64, i64* %72, align 8
  %283 = zext i8 %280 to i64
  %284 = select i1 %281, i64 %282, i64 %283
  %285 = icmp eq i64 %284, 2
  br i1 %285, label %286, label %316

286:                                              ; preds = %279
  %287 = call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* nonnull %10, i64 0, i64 -1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i64 2) #15
  %288 = icmp eq i32 %287, 0
  br i1 %288, label %293, label %289

289:                                              ; preds = %286
  %290 = load i8, i8* %74, align 1
  %291 = load i64, i64* %72, align 8
  %292 = zext i8 %290 to i64
  br label %316

293:                                              ; preds = %286
  store i32 0, i32* %8, align 4
  br label %294

294:                                              ; preds = %293, %309
  %295 = phi i32 [ %311, %309 ], [ 0, %293 ]
  %296 = phi i8* [ %312, %309 ], [ %263, %293 ]
  %297 = load i8, i8* %296, align 1
  %298 = sext i8 %297 to i32
  %299 = add nsw i32 %298, -48
  %300 = icmp ugt i32 %299, 9
  %301 = icmp ugt i32 %295, 429496729
  %302 = or i1 %301, %300
  br i1 %302, label %489, label %303

303:                                              ; preds = %294
  %304 = mul i32 %295, 10
  store i32 %304, i32* %8, align 4
  %305 = load i8, i8* %296, align 1
  %306 = sext i8 %305 to i32
  %307 = sub nsw i32 47, %306
  %308 = icmp ugt i32 %304, %307
  br i1 %308, label %489, label %309

309:                                              ; preds = %303
  %310 = add i32 %304, -48
  %311 = add i32 %310, %306
  store i32 %311, i32* %8, align 4
  %312 = getelementptr inbounds i8, i8* %296, i64 1
  %313 = icmp eq i8* %312, %277
  br i1 %313, label %314, label %294

314:                                              ; preds = %309
  %315 = icmp eq i32 %311, 0
  br i1 %315, label %489, label %486

316:                                              ; preds = %289, %279
  %317 = phi i64 [ %292, %289 ], [ %283, %279 ]
  %318 = phi i64 [ %291, %289 ], [ %282, %279 ]
  %319 = phi i8 [ %290, %289 ], [ %280, %279 ]
  %320 = icmp slt i8 %319, 0
  %321 = select i1 %320, i64 %318, i64 %317
  br i1 %124, label %414, label %322

322:                                              ; preds = %316
  %323 = icmp eq i64 %321, 1
  br i1 %323, label %324, label %486

324:                                              ; preds = %322
  %325 = call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* nonnull %10, i64 0, i64 -1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0), i64 1) #15
  %326 = icmp eq i32 %325, 0
  br i1 %326, label %327, label %486

327:                                              ; preds = %324
  %328 = load i8, i8* %263, align 1
  %329 = icmp eq i8 %328, 34
  br i1 %329, label %330, label %489

330:                                              ; preds = %327
  %331 = getelementptr inbounds i8, i8* %263, i64 1
  %332 = icmp eq i8* %331, %57
  br i1 %332, label %489, label %333

333:                                              ; preds = %330, %337
  %334 = phi i8* [ %338, %337 ], [ %331, %330 ]
  %335 = load i8, i8* %334, align 1
  %336 = icmp eq i8 %335, 34
  br i1 %336, label %340, label %337

337:                                              ; preds = %333
  %338 = getelementptr inbounds i8, i8* %334, i64 1
  %339 = icmp eq i8* %338, %57
  br i1 %339, label %489, label %333

340:                                              ; preds = %333
  %341 = ptrtoint i8* %334 to i64
  %342 = icmp eq i8* %334, %57
  br i1 %342, label %489, label %343

343:                                              ; preds = %340
  %344 = getelementptr inbounds i8, i8* %334, i64 1
  %345 = ptrtoint i8* %344 to i64
  %346 = icmp eq i8* %344, %57
  br i1 %346, label %354, label %347

347:                                              ; preds = %343, %351
  %348 = phi i8* [ %352, %351 ], [ %344, %343 ]
  %349 = load i8, i8* %348, align 1
  %350 = icmp eq i8 %349, 44
  br i1 %350, label %354, label %351

351:                                              ; preds = %347
  %352 = getelementptr inbounds i8, i8* %348, i64 1
  %353 = icmp eq i8* %352, %57
  br i1 %353, label %354, label %347

354:                                              ; preds = %347, %351, %343
  %355 = phi i8* [ %57, %343 ], [ %348, %347 ], [ %57, %351 ]
  br label %356

356:                                              ; preds = %411, %354
  %357 = phi i8* [ %331, %354 ], [ %412, %411 ]
  %358 = icmp ult i8* %357, %344
  br i1 %358, label %359, label %486

359:                                              ; preds = %356
  %360 = icmp ult i8* %357, %334
  br i1 %360, label %361, label %368

361:                                              ; preds = %359, %365
  %362 = phi i8* [ %366, %365 ], [ %357, %359 ]
  %363 = load i8, i8* %362, align 1
  %364 = icmp eq i8 %363, 44
  br i1 %364, label %368, label %365

365:                                              ; preds = %361
  %366 = getelementptr inbounds i8, i8* %362, i64 1
  %367 = icmp eq i8* %366, %334
  br i1 %367, label %368, label %361

368:                                              ; preds = %361, %365, %359
  %369 = phi i8* [ %357, %359 ], [ %362, %361 ], [ %334, %365 ]
  %370 = icmp eq i8* %357, %369
  br i1 %370, label %489, label %371

371:                                              ; preds = %368, %385
  %372 = phi i16 [ %388, %385 ], [ 0, %368 ]
  %373 = phi i8* [ %389, %385 ], [ %357, %368 ]
  %374 = load i8, i8* %373, align 1
  %375 = sext i8 %374 to i32
  %376 = add nsw i32 %375, -48
  %377 = icmp ugt i32 %376, 9
  %378 = icmp ugt i16 %372, 6553
  %379 = or i1 %378, %377
  br i1 %379, label %489, label %380

380:                                              ; preds = %371
  %381 = mul i16 %372, 10
  %382 = zext i16 %381 to i32
  %383 = sub nuw nsw i32 65583, %375
  %384 = icmp slt i32 %383, %382
  br i1 %384, label %489, label %385

385:                                              ; preds = %380
  %386 = sext i8 %374 to i16
  %387 = add i16 %381, -48
  %388 = add i16 %387, %386
  %389 = getelementptr inbounds i8, i8* %373, i64 1
  %390 = icmp eq i8* %389, %369
  br i1 %390, label %391, label %371

391:                                              ; preds = %385
  %392 = icmp eq i16 %388, 0
  br i1 %392, label %489, label %393

393:                                              ; preds = %391
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %76) #15
  %394 = zext i16 %388 to i32
  store i32 %394, i32* %11, align 4
  %395 = load i64, i64* %69, align 8, !noalias !2
  %396 = and i64 %395, 1
  %397 = icmp eq i64 %396, 0
  %398 = load i64, i64* %77, align 8
  %399 = select i1 %397, i64 8, i64 %398
  %400 = lshr i64 %395, 1
  %401 = icmp eq i64 %400, %399
  br i1 %401, label %409, label %402, !prof !5

402:                                              ; preds = %393
  %403 = load i64, i64* %81, align 8
  %404 = select i1 %397, i64 %79, i64 %403
  %405 = inttoptr i64 %404 to i32*
  %406 = getelementptr inbounds i32, i32* %405, i64 %400
  store i32 %394, i32* %406, align 4
  %407 = load i64, i64* %69, align 8
  %408 = add i64 %407, 2
  store i64 %408, i64* %69, align 8
  br label %411

409:                                              ; preds = %393
  %410 = call dereferenceable(4) i32* @_ZN4absl23inlined_vector_internal7StorageIjLm8ENSt3__19allocatorIjEEE15EmplaceBackSlowIJjEEERjDpOT_(%"class.absl::inlined_vector_internal::Storage"* nonnull %82, i32* nonnull dereferenceable(4) %11) #15
  br label %411

411:                                              ; preds = %402, %409
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %76) #15
  %412 = getelementptr inbounds i8, i8* %369, i64 1
  %413 = icmp eq i8* %412, %334
  br i1 %413, label %489, label %356

414:                                              ; preds = %316
  %415 = icmp eq i64 %321, 4
  br i1 %415, label %416, label %486

416:                                              ; preds = %414
  %417 = call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* nonnull %10, i64 0, i64 -1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i64 4) #15
  %418 = icmp eq i32 %417, 0
  br i1 %418, label %419, label %486

419:                                              ; preds = %416
  %420 = load i8, i8* %263, align 1
  %421 = icmp eq i8 %420, 48
  br i1 %421, label %489, label %422

422:                                              ; preds = %419
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %83) #15
  store i32 -1431655766, i32* %12, align 4
  %423 = sub i64 %276, %262
  %424 = icmp sgt i64 %423, -1
  br i1 %424, label %426, label %425, !prof !6

425:                                              ; preds = %422
  call void @llvm.trap() #15
  unreachable

426:                                              ; preds = %422
  %427 = add nsw i64 %423, -1
  %428 = icmp ugt i64 %427, 7
  br i1 %428, label %485, label %429

429:                                              ; preds = %426
  store i32 0, i32* %12, align 4
  %430 = getelementptr inbounds i8, i8* %263, i64 %423
  %431 = tail call i16** @__ctype_b_loc() #17
  %432 = load i16*, i16** %431, align 8
  br label %433

433:                                              ; preds = %459, %429
  %434 = phi i32 [ 0, %429 ], [ %462, %459 ]
  %435 = phi i8* [ %263, %429 ], [ %463, %459 ]
  %436 = load i8, i8* %435, align 1
  %437 = sext i8 %436 to i64
  %438 = getelementptr inbounds i16, i16* %432, i64 %437
  %439 = load i16, i16* %438, align 2
  %440 = and i16 %439, 4096
  %441 = icmp eq i16 %440, 0
  br i1 %441, label %485, label %442

442:                                              ; preds = %433
  %443 = sext i8 %436 to i32
  %444 = shl i32 %434, 4
  store i32 %444, i32* %12, align 4
  %445 = add nsw i32 %443, -48
  %446 = icmp ult i32 %445, 10
  br i1 %446, label %447, label %449

447:                                              ; preds = %442
  %448 = add i8 %436, -48
  br label %459

449:                                              ; preds = %442
  %450 = add i8 %436, -65
  %451 = icmp ult i8 %450, 6
  br i1 %451, label %452, label %454

452:                                              ; preds = %449
  %453 = add nsw i8 %436, -55
  br label %459

454:                                              ; preds = %449
  %455 = add i8 %436, -97
  %456 = icmp ult i8 %455, 6
  %457 = add i8 %436, -87
  %458 = select i1 %456, i8 %457, i8 0
  br label %459

459:                                              ; preds = %454, %452, %447
  %460 = phi i8 [ %458, %454 ], [ %448, %447 ], [ %453, %452 ]
  %461 = sext i8 %460 to i32
  %462 = add i32 %444, %461
  store i32 %462, i32* %12, align 4
  %463 = getelementptr inbounds i8, i8* %435, i64 1
  %464 = icmp eq i8* %463, %430
  br i1 %464, label %465, label %433

465:                                              ; preds = %459
  %466 = icmp eq i32 %462, 0
  br i1 %466, label %485, label %467

467:                                              ; preds = %465
  %468 = load i64, i64* %69, align 8, !noalias !7
  %469 = and i64 %468, 1
  %470 = icmp eq i64 %469, 0
  %471 = load i64, i64* %77, align 8
  %472 = select i1 %470, i64 8, i64 %471
  %473 = lshr i64 %468, 1
  %474 = icmp eq i64 %473, %472
  br i1 %474, label %482, label %475, !prof !5

475:                                              ; preds = %467
  %476 = load i64, i64* %81, align 8
  %477 = select i1 %470, i64 %79, i64 %476
  %478 = inttoptr i64 %477 to i32*
  %479 = getelementptr inbounds i32, i32* %478, i64 %473
  store i32 %462, i32* %479, align 4
  %480 = load i64, i64* %69, align 8
  %481 = add i64 %480, 2
  store i64 %481, i64* %69, align 8
  br label %484

482:                                              ; preds = %467
  %483 = call dereferenceable(4) i32* @_ZN4absl23inlined_vector_internal7StorageIjLm8ENSt3__19allocatorIjEEE15EmplaceBackSlowIJRKjEEERjDpOT_(%"class.absl::inlined_vector_internal::Storage"* nonnull %82, i32* nonnull dereferenceable(4) %12) #15
  br label %484

484:                                              ; preds = %475, %482
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %83) #15
  br label %486

485:                                              ; preds = %433, %426, %465
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %83) #15
  br label %489

486:                                              ; preds = %356, %314, %414, %322, %484, %324, %416
  %487 = phi i64 [ %276, %314 ], [ %276, %416 ], [ %276, %324 ], [ %276, %484 ], [ %276, %322 ], [ %276, %414 ], [ %345, %356 ]
  %488 = phi i8* [ %172, %314 ], [ %172, %416 ], [ %172, %324 ], [ %172, %484 ], [ %172, %322 ], [ %172, %414 ], [ %355, %356 ]
  br label %489

489:                                              ; preds = %337, %391, %411, %368, %294, %303, %371, %380, %330, %314, %485, %486, %275, %327, %340, %419, %240, %244
  %490 = phi i64 [ %241, %240 ], [ %276, %275 ], [ %487, %486 ], [ %276, %314 ], [ %276, %419 ], [ %276, %485 ], [ %341, %340 ], [ %276, %327 ], [ %241, %244 ], [ %75, %330 ], [ %345, %380 ], [ %345, %371 ], [ %276, %303 ], [ %276, %294 ], [ %345, %368 ], [ %345, %411 ], [ %345, %391 ], [ %75, %337 ]
  %491 = phi i32 [ 1, %240 ], [ 1, %275 ], [ 0, %486 ], [ 1, %314 ], [ 1, %419 ], [ 1, %485 ], [ 1, %340 ], [ 1, %327 ], [ 1, %244 ], [ 1, %330 ], [ 1, %380 ], [ 1, %371 ], [ 1, %303 ], [ 1, %294 ], [ 1, %368 ], [ 1, %411 ], [ 1, %391 ], [ 1, %337 ]
  %492 = phi i8* [ %172, %240 ], [ %172, %275 ], [ %488, %486 ], [ %172, %314 ], [ %172, %419 ], [ %172, %485 ], [ %172, %340 ], [ %172, %327 ], [ %172, %244 ], [ %172, %330 ], [ %355, %380 ], [ %355, %371 ], [ %172, %303 ], [ %172, %294 ], [ %355, %368 ], [ %355, %411 ], [ %355, %391 ], [ %172, %337 ]
  %493 = load i8, i8* %74, align 1
  %494 = icmp slt i8 %493, 0
  br i1 %494, label %495, label %497

495:                                              ; preds = %489
  %496 = load i8*, i8** %71, align 8
  call void @_ZdlPv(i8* %496) #16
  br label %497

497:                                              ; preds = %489, %495
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %70) #15
  %498 = icmp eq i32 %491, 0
  br i1 %498, label %170, label %553

499:                                              ; preds = %170, %206, %185
  %500 = phi i64 [ %171, %170 ], [ %186, %185 ], [ %207, %206 ]
  %501 = load %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"*, %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"** %17, align 8
  %502 = load %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"*, %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"** %84, align 8
  %503 = icmp ult %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %501, %502
  br i1 %503, label %504, label %541

504:                                              ; preds = %499
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %85) #15
  %505 = load i16, i16* %7, align 2
  %506 = load i32, i32* %8, align 4
  store i64 0, i64* %87, align 8
  %507 = load i64, i64* %69, align 8
  %508 = icmp ult i64 %507, 2
  br i1 %508, label %514, label %509

509:                                              ; preds = %504
  %510 = and i64 %507, 1
  %511 = icmp eq i64 %510, 0
  br i1 %511, label %512, label %513

512:                                              ; preds = %509
  store i64 %507, i64* %87, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %89, i8* align 8 %90, i64 32, i1 false) #15
  br label %514

513:                                              ; preds = %509
  call void @_ZN4absl23inlined_vector_internal7StorageIjLm8ENSt3__19allocatorIjEEE8InitFromERKS5_(%"class.absl::inlined_vector_internal::Storage"* nonnull %86, %"class.absl::inlined_vector_internal::Storage"* nonnull dereferenceable(40) %82) #15
  br label %514

514:                                              ; preds = %513, %512, %504
  %515 = load i8, i8* %62, align 1
  %516 = icmp slt i8 %515, 0
  br i1 %516, label %519, label %517

517:                                              ; preds = %514
  %518 = bitcast %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %501 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %518, i8* nonnull align 8 %58, i64 24, i1 false) #15
  br label %523

519:                                              ; preds = %514
  %520 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %501, i64 0, i32 0
  %521 = load i8*, i8** %59, align 8
  %522 = load i64, i64* %60, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %520, i8* %521, i64 %522) #15
  br label %523

523:                                              ; preds = %519, %517
  %524 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %501, i64 0, i32 1
  %525 = load i8, i8* %92, align 1
  %526 = icmp slt i8 %525, 0
  br i1 %526, label %529, label %527

527:                                              ; preds = %523
  %528 = bitcast %"class.std::__1::basic_string"* %524 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %528, i8* nonnull align 8 %63, i64 24, i1 false) #15
  br label %532

529:                                              ; preds = %523
  %530 = load i8*, i8** %64, align 8
  %531 = load i64, i64* %65, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %524, i8* %530, i64 %531) #15
  br label %532

532:                                              ; preds = %527, %529
  %533 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %501, i64 0, i32 2
  store i16 %505, i16* %533, align 8
  %534 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %501, i64 0, i32 3
  store i32 %506, i32* %534, align 4
  %535 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %501, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  %536 = load i64, i64* %87, align 8
  store i64 %536, i64* %535, align 8
  %537 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %501, i64 0, i32 4, i32 0, i32 1
  %538 = bitcast %"union.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Data"* %537 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %538, i8* align 8 %89, i64 32, i1 false) #15
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %85) #15
  %539 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %501, i64 1
  %540 = ptrtoint %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %539 to i64
  store i64 %540, i64* %93, align 8
  br label %542

541:                                              ; preds = %499
  call void @_ZNSt3__16vectorIN4spdy20SpdyAltSvcWireFormat18AlternativeServiceENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJRNS_12basic_stringIcNS_11char_traitsIcEENS4_IcEEEESD_RtRjRN4absl13InlinedVectorIjLm8ENS4_IjEEEEEEEvDpOT_(%"class.std::__1::vector"* %2, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %5, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %6, i16* nonnull dereferenceable(2) %7, i32* nonnull dereferenceable(4) %8, %"class.absl::InlinedVector"* nonnull dereferenceable(40) %9) #15
  br label %542

542:                                              ; preds = %532, %541
  %543 = inttoptr i64 %500 to i8*
  %544 = icmp eq i8* %57, %543
  br i1 %544, label %553, label %545

545:                                              ; preds = %542, %549
  %546 = phi i8* [ %550, %549 ], [ %543, %542 ]
  %547 = phi i64 [ %551, %549 ], [ %500, %542 ]
  %548 = load i8, i8* %546, align 1
  switch i8 %548, label %553 [
    i8 32, label %549
    i8 9, label %549
    i8 44, label %549
  ]

549:                                              ; preds = %545, %545, %545
  %550 = getelementptr inbounds i8, i8* %546, i64 1
  %551 = ptrtoint i8* %550 to i64
  %552 = icmp eq i8* %57, %550
  br i1 %552, label %553, label %545

553:                                              ; preds = %189, %497, %545, %549, %542
  %554 = phi i64 [ %500, %542 ], [ %547, %545 ], [ %75, %549 ], [ %186, %189 ], [ %490, %497 ]
  %555 = phi i32 [ 0, %542 ], [ 0, %549 ], [ 0, %545 ], [ 1, %497 ], [ 1, %189 ]
  %556 = load i64, i64* %69, align 8
  %557 = and i64 %556, 1
  %558 = icmp eq i64 %557, 0
  br i1 %558, label %561, label %559

559:                                              ; preds = %553
  %560 = load i8*, i8** %94, align 8
  call void @_ZdlPv(i8* %560) #16
  br label %561

561:                                              ; preds = %553, %559
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %68) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %67) #15
  br label %562

562:                                              ; preds = %155, %561
  %563 = phi i64 [ %554, %561 ], [ %139, %155 ]
  %564 = phi i32 [ %555, %561 ], [ 1, %155 ]
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %66) #15
  %565 = load i8, i8* %92, align 1
  %566 = icmp slt i8 %565, 0
  br i1 %566, label %567, label %569

567:                                              ; preds = %562
  %568 = load i8*, i8** %64, align 8
  call void @_ZdlPv(i8* %568) #16
  br label %569

569:                                              ; preds = %562, %567
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %63) #15
  br label %570

570:                                              ; preds = %147, %143, %134, %153, %123, %131, %127, %569, %108, %111
  %571 = phi i64 [ %98, %108 ], [ %125, %123 ], [ %129, %127 ], [ %139, %153 ], [ %563, %569 ], [ %129, %131 ], [ %98, %111 ], [ %136, %134 ], [ %75, %143 ], [ %75, %147 ]
  %572 = phi i32 [ 1, %108 ], [ 1, %123 ], [ 1, %127 ], [ 1, %153 ], [ %564, %569 ], [ 1, %131 ], [ 1, %111 ], [ 1, %134 ], [ 1, %143 ], [ 1, %147 ]
  %573 = load i8, i8* %62, align 1
  %574 = icmp slt i8 %573, 0
  br i1 %574, label %575, label %577

575:                                              ; preds = %570
  %576 = load i8*, i8** %59, align 8
  call void @_ZdlPv(i8* %576) #16
  br label %577

577:                                              ; preds = %570, %575
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %58) #15
  %578 = icmp eq i32 %572, 0
  br i1 %578, label %97, label %579

579:                                              ; preds = %577, %97, %52, %3
  %580 = phi i1 [ false, %3 ], [ true, %52 ], [ true, %97 ], [ false, %577 ]
  ret i1 %580
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4spdy20SpdyAltSvcWireFormat13PercentDecodeEPKcS2_PNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE(i8* readonly, i8* readnone, %"class.std::__1::basic_string"*) local_unnamed_addr #0 align 2 {
  %4 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %4, i64 0, i32 1, i32 0
  %6 = load i8, i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  br i1 %7, label %8, label %12

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 0, i64* %11, align 8
  br label %14

12:                                               ; preds = %3
  %13 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  store i8 0, i8* %13, align 1
  store i8 0, i8* %5, align 1
  br label %14

14:                                               ; preds = %8, %12
  %15 = icmp eq i8* %0, %1
  br i1 %15, label %84, label %16

16:                                               ; preds = %14, %79
  %17 = phi i8* [ %82, %79 ], [ %0, %14 ]
  %18 = load i8, i8* %17, align 1
  %19 = icmp eq i8 %18, 37
  br i1 %19, label %20, label %79

20:                                               ; preds = %16
  %21 = getelementptr inbounds i8, i8* %17, i64 1
  %22 = icmp eq i8* %21, %1
  br i1 %22, label %84, label %23

23:                                               ; preds = %20
  %24 = load i8, i8* %21, align 1
  %25 = tail call i16** @__ctype_b_loc() #17
  %26 = load i16*, i16** %25, align 8
  %27 = sext i8 %24 to i64
  %28 = getelementptr inbounds i16, i16* %26, i64 %27
  %29 = load i16, i16* %28, align 2
  %30 = and i16 %29, 4096
  %31 = icmp eq i16 %30, 0
  br i1 %31, label %84, label %32

32:                                               ; preds = %23
  %33 = sext i8 %24 to i32
  %34 = add nsw i32 %33, -48
  %35 = icmp ult i32 %34, 10
  br i1 %35, label %36, label %38

36:                                               ; preds = %32
  %37 = add i8 %24, -48
  br label %48

38:                                               ; preds = %32
  %39 = add i8 %24, -65
  %40 = icmp ult i8 %39, 6
  br i1 %40, label %41, label %43

41:                                               ; preds = %38
  %42 = add nsw i8 %24, -55
  br label %48

43:                                               ; preds = %38
  %44 = add i8 %24, -97
  %45 = icmp ult i8 %44, 6
  %46 = add i8 %24, -87
  %47 = select i1 %45, i8 %46, i8 0
  br label %48

48:                                               ; preds = %36, %41, %43
  %49 = phi i8 [ %47, %43 ], [ %37, %36 ], [ %42, %41 ]
  %50 = shl i8 %49, 4
  %51 = getelementptr inbounds i8, i8* %17, i64 2
  %52 = icmp eq i8* %51, %1
  br i1 %52, label %84, label %53

53:                                               ; preds = %48
  %54 = load i8, i8* %51, align 1
  %55 = sext i8 %54 to i64
  %56 = getelementptr inbounds i16, i16* %26, i64 %55
  %57 = load i16, i16* %56, align 2
  %58 = and i16 %57, 4096
  %59 = icmp eq i16 %58, 0
  br i1 %59, label %84, label %60

60:                                               ; preds = %53
  %61 = sext i8 %54 to i32
  %62 = add nsw i32 %61, -48
  %63 = icmp ult i32 %62, 10
  br i1 %63, label %64, label %66

64:                                               ; preds = %60
  %65 = add i8 %54, -48
  br label %76

66:                                               ; preds = %60
  %67 = add i8 %54, -65
  %68 = icmp ult i8 %67, 6
  br i1 %68, label %69, label %71

69:                                               ; preds = %66
  %70 = add nsw i8 %54, -55
  br label %76

71:                                               ; preds = %66
  %72 = add i8 %54, -97
  %73 = icmp ult i8 %72, 6
  %74 = add i8 %54, -87
  %75 = select i1 %73, i8 %74, i8 0
  br label %76

76:                                               ; preds = %64, %69, %71
  %77 = phi i8 [ %75, %71 ], [ %65, %64 ], [ %70, %69 ]
  %78 = add i8 %77, %50
  br label %79

79:                                               ; preds = %16, %76
  %80 = phi i8 [ %78, %76 ], [ %18, %16 ]
  %81 = phi i8* [ %51, %76 ], [ %17, %16 ]
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %2, i8 signext %80) #15
  %82 = getelementptr inbounds i8, i8* %81, i64 1
  %83 = icmp eq i8* %82, %1
  br i1 %83, label %84, label %16

84:                                               ; preds = %23, %20, %48, %53, %79, %14
  %85 = phi i1 [ true, %14 ], [ true, %79 ], [ false, %53 ], [ false, %48 ], [ false, %20 ], [ false, %23 ]
  ret i1 %85
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4spdy20SpdyAltSvcWireFormat17ParseAltAuthorityEPKcS2_PNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPt(i8* readonly, i8* readnone, %"class.std::__1::basic_string"*, i16* nocapture) local_unnamed_addr #0 align 2 {
  %5 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %6 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %5, i64 0, i32 1, i32 0
  %7 = load i8, i8* %6, align 1
  %8 = icmp slt i8 %7, 0
  br i1 %8, label %9, label %13

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  store i8 0, i8* %11, align 1
  %12 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 0, i64* %12, align 8
  br label %15

13:                                               ; preds = %4
  %14 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  store i8 0, i8* %14, align 1
  store i8 0, i8* %6, align 1
  br label %15

15:                                               ; preds = %9, %13
  %16 = icmp eq i8* %0, %1
  br i1 %16, label %78, label %17

17:                                               ; preds = %15
  %18 = load i8, i8* %0, align 1
  %19 = icmp eq i8 %18, 91
  br i1 %19, label %20, label %30

20:                                               ; preds = %17, %26
  %21 = phi i8 [ %27, %26 ], [ 91, %17 ]
  %22 = phi i8* [ %24, %26 ], [ %0, %17 ]
  switch i8 %21, label %23 [
    i8 93, label %28
    i8 34, label %78
  ]

23:                                               ; preds = %20
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %2, i8 signext %21) #15
  %24 = getelementptr inbounds i8, i8* %22, i64 1
  %25 = icmp eq i8* %24, %1
  br i1 %25, label %78, label %26

26:                                               ; preds = %23
  %27 = load i8, i8* %24, align 1
  br label %20

28:                                               ; preds = %20
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %2, i8 signext 93) #15
  %29 = getelementptr inbounds i8, i8* %22, i64 1
  br label %45

30:                                               ; preds = %17, %43
  %31 = phi i8 [ %44, %43 ], [ %18, %17 ]
  %32 = phi i8* [ %41, %43 ], [ %0, %17 ]
  switch i8 %31, label %38 [
    i8 58, label %45
    i8 34, label %78
    i8 92, label %33
  ]

33:                                               ; preds = %30
  %34 = getelementptr inbounds i8, i8* %32, i64 1
  %35 = icmp eq i8* %34, %1
  br i1 %35, label %78, label %36

36:                                               ; preds = %33
  %37 = load i8, i8* %34, align 1
  br label %38

38:                                               ; preds = %36, %30
  %39 = phi i8 [ %37, %36 ], [ %31, %30 ]
  %40 = phi i8* [ %34, %36 ], [ %32, %30 ]
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %2, i8 signext %39) #15
  %41 = getelementptr inbounds i8, i8* %40, i64 1
  %42 = icmp eq i8* %41, %1
  br i1 %42, label %78, label %43

43:                                               ; preds = %38
  %44 = load i8, i8* %41, align 1
  br label %30

45:                                               ; preds = %30, %28
  %46 = phi i8* [ %29, %28 ], [ %32, %30 ]
  %47 = icmp eq i8* %46, %1
  br i1 %47, label %78, label %48

48:                                               ; preds = %45
  %49 = load i8, i8* %46, align 1
  %50 = icmp eq i8 %49, 58
  br i1 %50, label %51, label %78

51:                                               ; preds = %48
  %52 = getelementptr inbounds i8, i8* %46, i64 1
  store i16 0, i16* %3, align 2
  %53 = icmp eq i8* %52, %1
  br i1 %53, label %78, label %54

54:                                               ; preds = %51, %70
  %55 = phi i16 [ %73, %70 ], [ 0, %51 ]
  %56 = phi i8* [ %74, %70 ], [ %52, %51 ]
  %57 = load i8, i8* %56, align 1
  %58 = sext i8 %57 to i32
  %59 = add nsw i32 %58, -48
  %60 = icmp ugt i32 %59, 9
  %61 = icmp ugt i16 %55, 6553
  %62 = or i1 %61, %60
  br i1 %62, label %78, label %63

63:                                               ; preds = %54
  %64 = mul i16 %55, 10
  store i16 %64, i16* %3, align 2
  %65 = zext i16 %64 to i32
  %66 = load i8, i8* %56, align 1
  %67 = sext i8 %66 to i32
  %68 = sub nsw i32 65583, %67
  %69 = icmp slt i32 %68, %65
  br i1 %69, label %78, label %70

70:                                               ; preds = %63
  %71 = sext i8 %66 to i16
  %72 = add i16 %64, -48
  %73 = add i16 %72, %71
  store i16 %73, i16* %3, align 2
  %74 = getelementptr inbounds i8, i8* %56, i64 1
  %75 = icmp eq i8* %74, %1
  br i1 %75, label %76, label %54

76:                                               ; preds = %70
  %77 = icmp ne i16 %73, 0
  br label %78

78:                                               ; preds = %38, %33, %30, %23, %20, %63, %54, %76, %51, %45, %48, %15
  %79 = phi i1 [ false, %15 ], [ false, %48 ], [ false, %45 ], [ %77, %76 ], [ false, %51 ], [ false, %54 ], [ false, %63 ], [ false, %20 ], [ false, %23 ], [ false, %30 ], [ false, %33 ], [ false, %38 ]
  ret i1 %79
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4spdy20SpdyAltSvcWireFormat14SkipWhiteSpaceEPPKcS2_(i8** nocapture, i8* readnone) local_unnamed_addr #2 align 2 {
  %3 = load i8*, i8** %0, align 8
  %4 = icmp eq i8* %3, %1
  br i1 %4, label %11, label %5

5:                                                ; preds = %2, %8
  %6 = phi i8* [ %9, %8 ], [ %3, %2 ]
  %7 = load i8, i8* %6, align 1
  switch i8 %7, label %11 [
    i8 32, label %8
    i8 9, label %8
  ]

8:                                                ; preds = %5, %5
  %9 = getelementptr inbounds i8, i8* %6, i64 1
  store i8* %9, i8** %0, align 8
  %10 = icmp eq i8* %9, %1
  br i1 %10, label %11, label %5

11:                                               ; preds = %8, %5, %2
  ret void
}

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"*, i8 signext) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN4spdy20SpdyAltSvcWireFormat22ParsePositiveInteger32EPKcS2_Pj(i8* readonly, i8* readnone, i32* nocapture) local_unnamed_addr #2 align 2 {
  store i32 0, i32* %2, align 4
  %4 = icmp eq i8* %0, %1
  br i1 %4, label %27, label %5

5:                                                ; preds = %3, %20
  %6 = phi i32 [ %22, %20 ], [ 0, %3 ]
  %7 = phi i8* [ %23, %20 ], [ %0, %3 ]
  %8 = load i8, i8* %7, align 1
  %9 = sext i8 %8 to i32
  %10 = add nsw i32 %9, -48
  %11 = icmp ugt i32 %10, 9
  %12 = icmp ugt i32 %6, 429496729
  %13 = or i1 %12, %11
  br i1 %13, label %27, label %14

14:                                               ; preds = %5
  %15 = mul i32 %6, 10
  store i32 %15, i32* %2, align 4
  %16 = load i8, i8* %7, align 1
  %17 = sext i8 %16 to i32
  %18 = sub nsw i32 47, %17
  %19 = icmp ugt i32 %15, %18
  br i1 %19, label %27, label %20

20:                                               ; preds = %14
  %21 = add i32 %15, -48
  %22 = add i32 %21, %17
  store i32 %22, i32* %2, align 4
  %23 = getelementptr inbounds i8, i8* %7, i64 1
  %24 = icmp eq i8* %23, %1
  br i1 %24, label %25, label %5

25:                                               ; preds = %20
  %26 = icmp ne i32 %22, 0
  br label %27

27:                                               ; preds = %5, %14, %3, %25
  %28 = phi i1 [ %26, %25 ], [ false, %3 ], [ false, %14 ], [ false, %5 ]
  ret i1 %28
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN4spdy20SpdyAltSvcWireFormat22ParsePositiveInteger16EPKcS2_Pt(i8* readonly, i8* readnone, i16* nocapture) local_unnamed_addr #2 align 2 {
  store i16 0, i16* %2, align 2
  %4 = icmp eq i8* %0, %1
  br i1 %4, label %29, label %5

5:                                                ; preds = %3, %21
  %6 = phi i16 [ %24, %21 ], [ 0, %3 ]
  %7 = phi i8* [ %25, %21 ], [ %0, %3 ]
  %8 = load i8, i8* %7, align 1
  %9 = sext i8 %8 to i32
  %10 = add nsw i32 %9, -48
  %11 = icmp ugt i32 %10, 9
  %12 = icmp ugt i16 %6, 6553
  %13 = or i1 %12, %11
  br i1 %13, label %29, label %14

14:                                               ; preds = %5
  %15 = mul i16 %6, 10
  store i16 %15, i16* %2, align 2
  %16 = zext i16 %15 to i32
  %17 = load i8, i8* %7, align 1
  %18 = sext i8 %17 to i32
  %19 = sub nsw i32 65583, %18
  %20 = icmp slt i32 %19, %16
  br i1 %20, label %29, label %21

21:                                               ; preds = %14
  %22 = sext i8 %17 to i16
  %23 = add i16 %15, -48
  %24 = add i16 %23, %22
  store i16 %24, i16* %2, align 2
  %25 = getelementptr inbounds i8, i8* %7, i64 1
  %26 = icmp eq i8* %25, %1
  br i1 %26, label %27, label %5

27:                                               ; preds = %21
  %28 = icmp ne i16 %24, 0
  br label %29

29:                                               ; preds = %5, %14, %3, %27
  %30 = phi i1 [ %28, %27 ], [ false, %3 ], [ false, %14 ], [ false, %5 ]
  ret i1 %30
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i1 @_ZN4spdy20SpdyAltSvcWireFormat17HexDecodeToUInt32EN4absl11string_viewEPj(i8*, i64, i32* nocapture) local_unnamed_addr #4 align 2 {
  %4 = add i64 %1, -1
  %5 = icmp ugt i64 %4, 7
  br i1 %5, label %42, label %6

6:                                                ; preds = %3
  store i32 0, i32* %2, align 4
  %7 = getelementptr inbounds i8, i8* %0, i64 %1
  %8 = tail call i16** @__ctype_b_loc() #17
  br label %9

9:                                                ; preds = %6, %36
  %10 = phi i32 [ 0, %6 ], [ %39, %36 ]
  %11 = phi i8* [ %0, %6 ], [ %40, %36 ]
  %12 = load i8, i8* %11, align 1
  %13 = load i16*, i16** %8, align 8
  %14 = sext i8 %12 to i64
  %15 = getelementptr inbounds i16, i16* %13, i64 %14
  %16 = load i16, i16* %15, align 2
  %17 = and i16 %16, 4096
  %18 = icmp eq i16 %17, 0
  br i1 %18, label %42, label %19

19:                                               ; preds = %9
  %20 = sext i8 %12 to i32
  %21 = shl i32 %10, 4
  store i32 %21, i32* %2, align 4
  %22 = add nsw i32 %20, -48
  %23 = icmp ult i32 %22, 10
  br i1 %23, label %24, label %26

24:                                               ; preds = %19
  %25 = add i8 %12, -48
  br label %36

26:                                               ; preds = %19
  %27 = add i8 %12, -65
  %28 = icmp ult i8 %27, 6
  br i1 %28, label %29, label %31

29:                                               ; preds = %26
  %30 = add nsw i8 %12, -55
  br label %36

31:                                               ; preds = %26
  %32 = add i8 %12, -97
  %33 = icmp ult i8 %32, 6
  %34 = add i8 %12, -87
  %35 = select i1 %33, i8 %34, i8 0
  br label %36

36:                                               ; preds = %31, %29, %24
  %37 = phi i8 [ %35, %31 ], [ %25, %24 ], [ %30, %29 ]
  %38 = sext i8 %37 to i32
  %39 = add i32 %21, %38
  store i32 %39, i32* %2, align 4
  %40 = getelementptr inbounds i8, i8* %11, i64 1
  %41 = icmp eq i8* %40, %7
  br i1 %41, label %42, label %9

42:                                               ; preds = %9, %36, %3
  %43 = phi i1 [ false, %3 ], [ false, %9 ], [ true, %36 ]
  ret i1 %43
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4spdy20SpdyAltSvcWireFormat25SerializeHeaderFieldValueERKNSt3__16vectorINS0_18AlternativeServiceENS1_9allocatorIS3_EEEE(%"class.std::__1::basic_string"* noalias sret, %"class.std::__1::vector"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.absl::AlphaNum", align 8
  %5 = alloca %"class.absl::AlphaNum", align 8
  %6 = alloca %"class.absl::AlphaNum", align 8
  %7 = alloca %"class.absl::AlphaNum", align 8
  %8 = alloca %"class.absl::AlphaNum", align 8
  %9 = alloca %"class.absl::AlphaNum", align 8
  %10 = alloca %"class.absl::AlphaNum", align 8
  %11 = alloca %"class.absl::AlphaNum", align 8
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %13 = load %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"*, %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"** %12, align 8
  %14 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %15 = load %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"*, %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"** %14, align 8
  %16 = icmp eq %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %13, %15
  br i1 %16, label %17, label %22

17:                                               ; preds = %2
  %18 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %19 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %18, i64 0, i32 1, i32 0
  store i8 5, i8* %19, align 1
  %20 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i64 5, i1 false) #15
  %21 = getelementptr inbounds i8, i8* %20, i64 5
  store i8 0, i8* %21, align 1
  br label %248

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %23) #15
  %24 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 0, i64 24, i1 false) #15
  %25 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %26 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %25, i64 0, i32 1, i32 0
  %27 = bitcast %"class.absl::AlphaNum"* %4 to i8*
  %28 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %4, i64 0, i32 0, i32 0
  %29 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %4, i64 0, i32 0, i32 1
  %30 = bitcast %"class.absl::AlphaNum"* %5 to i8*
  %31 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %5, i64 0, i32 1, i64 0
  %32 = ptrtoint i8* %31 to i64
  %33 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %5, i64 0, i32 0, i32 0
  %34 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %5, i64 0, i32 0, i32 1
  %35 = bitcast %"class.absl::AlphaNum"* %6 to i8*
  %36 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %6, i64 0, i32 0, i32 0
  %37 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %6, i64 0, i32 0, i32 1
  %38 = bitcast %"class.absl::AlphaNum"* %7 to i8*
  %39 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %7, i64 0, i32 0, i32 0
  %40 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %7, i64 0, i32 0, i32 1
  %41 = bitcast %"class.absl::AlphaNum"* %8 to i8*
  %42 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %8, i64 0, i32 1, i64 0
  %43 = ptrtoint i8* %42 to i64
  %44 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %8, i64 0, i32 0, i32 0
  %45 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %8, i64 0, i32 0, i32 1
  %46 = bitcast %"class.absl::AlphaNum"* %11 to i8*
  %47 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %11, i64 0, i32 1, i64 0
  %48 = ptrtoint i8* %47 to i64
  %49 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %11, i64 0, i32 0, i32 0
  %50 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %11, i64 0, i32 0, i32 1
  %51 = bitcast %"class.absl::AlphaNum"* %9 to i8*
  %52 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %9, i64 0, i32 0, i32 0
  %53 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %9, i64 0, i32 0, i32 1
  %54 = bitcast %"class.absl::AlphaNum"* %10 to i8*
  br label %57

55:                                               ; preds = %242
  %56 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* nonnull align 8 %23, i64 24, i1 false) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %23) #15
  br label %248

57:                                               ; preds = %245, %22
  %58 = phi i64 [ 0, %22 ], [ %247, %245 ]
  %59 = phi i8 [ 0, %22 ], [ %246, %245 ]
  %60 = phi %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* [ %13, %22 ], [ %243, %245 ]
  %61 = icmp slt i8 %59, 0
  %62 = zext i8 %59 to i64
  %63 = select i1 %61, i64 %58, i64 %62
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %66, label %65

65:                                               ; preds = %57
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* nonnull %3, i8 signext 44) #15
  br label %66

66:                                               ; preds = %65, %57
  %67 = bitcast %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %60 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %68 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %67, i64 0, i32 1, i32 0
  %69 = load i8, i8* %68, align 1
  %70 = icmp slt i8 %69, 0
  %71 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %60, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %72 = load i64, i64* %71, align 8
  %73 = zext i8 %69 to i64
  %74 = select i1 %70, i64 %72, i64 %73
  %75 = icmp eq i64 %74, 2
  br i1 %75, label %76, label %81

76:                                               ; preds = %66
  %77 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %60, i64 0, i32 0
  %78 = call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %77, i64 0, i64 -1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i64 2) #15
  %79 = icmp eq i32 %78, 0
  %80 = load i8, i8* %68, align 1
  br label %81

81:                                               ; preds = %66, %76
  %82 = phi i8 [ %80, %76 ], [ %69, %66 ]
  %83 = phi i1 [ %79, %76 ], [ false, %66 ]
  %84 = icmp slt i8 %82, 0
  br i1 %84, label %85, label %89

85:                                               ; preds = %81
  %86 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %60, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %87 = load i8*, i8** %86, align 8
  %88 = load i64, i64* %71, align 8
  br label %92

89:                                               ; preds = %81
  %90 = bitcast %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %60 to i8*
  %91 = zext i8 %82 to i64
  br label %92

92:                                               ; preds = %85, %89
  %93 = phi i8* [ %87, %85 ], [ %90, %89 ]
  %94 = phi i64 [ %88, %85 ], [ %91, %89 ]
  %95 = getelementptr inbounds i8, i8* %93, i64 %94
  %96 = icmp eq i64 %94, 0
  br i1 %96, label %99, label %97

97:                                               ; preds = %92
  %98 = tail call i16** @__ctype_b_loc() #17
  br label %118

99:                                               ; preds = %138, %92
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* nonnull %3, i8 signext 61) #15
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* nonnull %3, i8 signext 34) #15
  %100 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %60, i64 0, i32 1
  %101 = bitcast %"class.std::__1::basic_string"* %100 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %102 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %101, i64 0, i32 1, i32 0
  %103 = load i8, i8* %102, align 1
  %104 = icmp slt i8 %103, 0
  br i1 %104, label %105, label %110

105:                                              ; preds = %99
  %106 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %100, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %107 = load i8*, i8** %106, align 8
  %108 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %60, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %109 = load i64, i64* %108, align 8
  br label %113

110:                                              ; preds = %99
  %111 = bitcast %"class.std::__1::basic_string"* %100 to i8*
  %112 = zext i8 %103 to i64
  br label %113

113:                                              ; preds = %105, %110
  %114 = phi i8* [ %107, %105 ], [ %111, %110 ]
  %115 = phi i64 [ %109, %105 ], [ %112, %110 ]
  %116 = getelementptr inbounds i8, i8* %114, i64 %115
  %117 = icmp eq i64 %115, 0
  br i1 %117, label %142, label %155

118:                                              ; preds = %97, %138
  %119 = phi i8* [ %93, %97 ], [ %140, %138 ]
  %120 = load i8, i8* %119, align 1
  %121 = sext i8 %120 to i32
  %122 = load i16*, i16** %98, align 8
  %123 = sext i8 %120 to i64
  %124 = getelementptr inbounds i16, i16* %122, i64 %123
  %125 = load i16, i16* %124, align 2
  %126 = and i16 %125, 8
  %127 = icmp eq i16 %126, 0
  br i1 %127, label %128, label %138

128:                                              ; preds = %118
  switch i32 %121, label %129 [
    i32 33, label %138
    i32 35, label %138
    i32 36, label %138
    i32 38, label %138
    i32 39, label %138
    i32 42, label %138
    i32 43, label %138
    i32 45, label %138
    i32 46, label %138
    i32 94, label %138
    i32 95, label %138
    i32 96, label %138
    i32 124, label %138
    i32 126, label %138
  ]

129:                                              ; preds = %128
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* nonnull %3, i8 signext 37) #15
  %130 = ashr i32 %121, 4
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds [17 x i8], [17 x i8]* @_ZZN4spdy20SpdyAltSvcWireFormat25SerializeHeaderFieldValueERKNSt3__16vectorINS0_18AlternativeServiceENS1_9allocatorIS3_EEEEE12kNibbleToHex, i64 0, i64 %131
  %133 = load i8, i8* %132, align 1
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* nonnull %3, i8 signext %133) #15
  %134 = and i32 %121, 15
  %135 = zext i32 %134 to i64
  %136 = getelementptr inbounds [17 x i8], [17 x i8]* @_ZZN4spdy20SpdyAltSvcWireFormat25SerializeHeaderFieldValueERKNSt3__16vectorINS0_18AlternativeServiceENS1_9allocatorIS3_EEEEE12kNibbleToHex, i64 0, i64 %135
  %137 = load i8, i8* %136, align 1
  br label %138

138:                                              ; preds = %128, %128, %128, %128, %128, %128, %128, %128, %128, %128, %128, %128, %128, %128, %118, %129
  %139 = phi i8 [ %137, %129 ], [ %120, %118 ], [ %120, %128 ], [ %120, %128 ], [ %120, %128 ], [ %120, %128 ], [ %120, %128 ], [ %120, %128 ], [ %120, %128 ], [ %120, %128 ], [ %120, %128 ], [ %120, %128 ], [ %120, %128 ], [ %120, %128 ], [ %120, %128 ], [ %120, %128 ]
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* nonnull %3, i8 signext %139) #15
  %140 = getelementptr inbounds i8, i8* %119, i64 1
  %141 = icmp eq i8* %140, %95
  br i1 %141, label %99, label %118

142:                                              ; preds = %159, %113
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %27) #15
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i8** %28, align 8
  store i64 1, i64* %29, align 8
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %30) #15
  %143 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %60, i64 0, i32 2
  %144 = load i16, i16* %143, align 8
  %145 = zext i16 %144 to i32
  %146 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEiPc(i32 %145, i8* %31) #15
  %147 = ptrtoint i8* %146 to i64
  %148 = sub i64 %147, %32
  store i8* %31, i8** %33, align 8
  %149 = icmp sgt i64 %148, -1
  br i1 %149, label %151, label %150, !prof !6

150:                                              ; preds = %142
  call void @llvm.trap() #15
  unreachable

151:                                              ; preds = %142
  store i64 %148, i64* %34, align 8
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %35) #15
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0), i8** %36, align 8
  store i64 1, i64* %37, align 8
  call void @_ZN4absl9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS_8AlphaNumESA_SA_(%"class.std::__1::basic_string"* nonnull %3, %"class.absl::AlphaNum"* nonnull dereferenceable(48) %4, %"class.absl::AlphaNum"* nonnull dereferenceable(48) %5, %"class.absl::AlphaNum"* nonnull dereferenceable(48) %6) #15
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %35) #15
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %30) #15
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %27) #15
  %152 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %60, i64 0, i32 3
  %153 = load i32, i32* %152, align 4
  %154 = icmp eq i32 %153, 86400
  br i1 %154, label %169, label %162

155:                                              ; preds = %113, %159
  %156 = phi i8* [ %160, %159 ], [ %114, %113 ]
  %157 = load i8, i8* %156, align 1
  switch i8 %157, label %159 [
    i8 34, label %158
    i8 92, label %158
  ]

158:                                              ; preds = %155, %155
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* nonnull %3, i8 signext 92) #15
  br label %159

159:                                              ; preds = %155, %158
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* nonnull %3, i8 signext %157) #15
  %160 = getelementptr inbounds i8, i8* %156, i64 1
  %161 = icmp eq i8* %160, %116
  br i1 %161, label %142, label %155

162:                                              ; preds = %151
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %38) #15
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8** %39, align 8
  store i64 5, i64* %40, align 8
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %41) #15
  %163 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEjPc(i32 %153, i8* %42) #15
  %164 = ptrtoint i8* %163 to i64
  %165 = sub i64 %164, %43
  store i8* %42, i8** %44, align 8
  %166 = icmp sgt i64 %165, -1
  br i1 %166, label %168, label %167, !prof !6

167:                                              ; preds = %162
  call void @llvm.trap() #15
  unreachable

168:                                              ; preds = %162
  store i64 %165, i64* %45, align 8
  call void @_ZN4absl9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS_8AlphaNumESA_(%"class.std::__1::basic_string"* nonnull %3, %"class.absl::AlphaNum"* nonnull dereferenceable(48) %7, %"class.absl::AlphaNum"* nonnull dereferenceable(48) %8) #15
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %41) #15
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %38) #15
  br label %169

169:                                              ; preds = %151, %168
  %170 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %60, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  %171 = load i64, i64* %170, align 8
  %172 = icmp ult i64 %171, 2
  br i1 %172, label %242, label %173

173:                                              ; preds = %169
  br i1 %83, label %174, label %194

174:                                              ; preds = %173
  %175 = and i64 %171, 1
  %176 = icmp eq i64 %175, 0
  br i1 %176, label %180, label %177

177:                                              ; preds = %174
  %178 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %60, i64 0, i32 4, i32 0, i32 1, i32 0, i32 0
  %179 = load i32*, i32** %178, align 8
  br label %183

180:                                              ; preds = %174
  %181 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %60, i64 0, i32 4, i32 0, i32 1
  %182 = bitcast %"union.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Data"* %181 to i32*
  br label %183

183:                                              ; preds = %177, %180
  %184 = phi i32* [ %179, %177 ], [ %182, %180 ]
  %185 = lshr i64 %171, 1
  %186 = getelementptr inbounds i32, i32* %184, i64 %185
  %187 = icmp eq i64 %185, 0
  br i1 %187, label %242, label %188

188:                                              ; preds = %183, %188
  %189 = phi i32* [ %192, %188 ], [ %184, %183 ]
  %190 = load i32, i32* %189, align 4
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %51) #15
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i64 0, i64 0), i8** %52, align 8
  store i64 7, i64* %53, align 8
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %54) #15
  %191 = zext i32 %190 to i64
  call void @_ZN4absl8AlphaNumC1ENS_3HexE(%"class.absl::AlphaNum"* nonnull %10, i64 %191, i64 12289) #15
  call void @_ZN4absl9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS_8AlphaNumESA_(%"class.std::__1::basic_string"* nonnull %3, %"class.absl::AlphaNum"* nonnull dereferenceable(48) %9, %"class.absl::AlphaNum"* nonnull dereferenceable(48) %10) #15
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %54) #15
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %51) #15
  %192 = getelementptr inbounds i32, i32* %189, i64 1
  %193 = icmp eq i32* %192, %186
  br i1 %193, label %242, label %188

194:                                              ; preds = %173
  %195 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0)) #15
  %196 = load i64, i64* %170, align 8
  %197 = and i64 %196, 1
  %198 = icmp eq i64 %197, 0
  br i1 %198, label %202, label %199

199:                                              ; preds = %194
  %200 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %60, i64 0, i32 4, i32 0, i32 1, i32 0, i32 0
  %201 = load i32*, i32** %200, align 8
  br label %205

202:                                              ; preds = %194
  %203 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %60, i64 0, i32 4, i32 0, i32 1
  %204 = bitcast %"union.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Data"* %203 to i32*
  br label %205

205:                                              ; preds = %199, %202
  %206 = phi i32* [ %201, %199 ], [ %204, %202 ]
  %207 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %60, i64 0, i32 4, i32 0, i32 1, i32 0, i32 0
  %208 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %60, i64 0, i32 4, i32 0, i32 1
  %209 = bitcast %"union.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Data"* %208 to i32*
  br label %210

210:                                              ; preds = %239, %205
  %211 = phi i64 [ %196, %205 ], [ %241, %239 ]
  %212 = phi i32* [ %206, %205 ], [ %240, %239 ]
  %213 = and i64 %211, 1
  %214 = icmp eq i64 %213, 0
  br i1 %214, label %217, label %215

215:                                              ; preds = %210
  %216 = load i32*, i32** %207, align 8
  br label %217

217:                                              ; preds = %210, %215
  %218 = phi i32* [ %216, %215 ], [ %209, %210 ]
  %219 = lshr i64 %211, 1
  %220 = getelementptr inbounds i32, i32* %218, i64 %219
  %221 = icmp eq i32* %212, %220
  br i1 %221, label %222, label %224

222:                                              ; preds = %217
  %223 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)) #15
  br label %242

224:                                              ; preds = %217
  br i1 %214, label %227, label %225

225:                                              ; preds = %224
  %226 = load i32*, i32** %207, align 8
  br label %227

227:                                              ; preds = %224, %225
  %228 = phi i32* [ %226, %225 ], [ %209, %224 ]
  %229 = icmp eq i32* %212, %228
  br i1 %229, label %232, label %230

230:                                              ; preds = %227
  %231 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)) #15
  br label %232

232:                                              ; preds = %227, %230
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %46) #15
  %233 = load i32, i32* %212, align 4
  %234 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEjPc(i32 %233, i8* %47) #15
  %235 = ptrtoint i8* %234 to i64
  %236 = sub i64 %235, %48
  store i8* %47, i8** %49, align 8
  %237 = icmp sgt i64 %236, -1
  br i1 %237, label %239, label %238, !prof !6

238:                                              ; preds = %232
  call void @llvm.trap() #15
  unreachable

239:                                              ; preds = %232
  store i64 %236, i64* %50, align 8
  call void @_ZN4absl9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS_8AlphaNumE(%"class.std::__1::basic_string"* nonnull %3, %"class.absl::AlphaNum"* nonnull dereferenceable(48) %11) #15
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %46) #15
  %240 = getelementptr inbounds i32, i32* %212, i64 1
  %241 = load i64, i64* %170, align 8
  br label %210

242:                                              ; preds = %188, %183, %222, %169
  %243 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %60, i64 1
  %244 = icmp eq %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %243, %15
  br i1 %244, label %55, label %245

245:                                              ; preds = %242
  %246 = load i8, i8* %26, align 1
  %247 = load i64, i64* %24, align 8
  br label %57

248:                                              ; preds = %55, %17
  ret void
}

declare void @_ZN4absl9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS_8AlphaNumESA_SA_(%"class.std::__1::basic_string"*, %"class.absl::AlphaNum"* dereferenceable(48), %"class.absl::AlphaNum"* dereferenceable(48), %"class.absl::AlphaNum"* dereferenceable(48)) local_unnamed_addr #3

declare void @_ZN4absl9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS_8AlphaNumESA_(%"class.std::__1::basic_string"*, %"class.absl::AlphaNum"* dereferenceable(48), %"class.absl::AlphaNum"* dereferenceable(48)) local_unnamed_addr #3

declare void @_ZN4absl8AlphaNumC1ENS_3HexE(%"class.absl::AlphaNum"*, i64, i64) unnamed_addr #3

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"*, i8*) local_unnamed_addr #3

declare void @_ZN4absl9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS_8AlphaNumE(%"class.std::__1::basic_string"*, %"class.absl::AlphaNum"* dereferenceable(48)) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden signext i8 @_ZN4spdy20SpdyAltSvcWireFormat13HexDigitToIntEc(i8 signext) local_unnamed_addr #5 align 2 {
  %2 = sext i8 %0 to i32
  %3 = add nsw i32 %2, -48
  %4 = icmp ult i32 %3, 10
  br i1 %4, label %13, label %5

5:                                                ; preds = %1
  %6 = add i8 %0, -65
  %7 = icmp ult i8 %6, 6
  br i1 %7, label %13, label %8

8:                                                ; preds = %5
  %9 = add i8 %0, -97
  %10 = icmp ult i8 %9, 6
  %11 = add i8 %0, -87
  %12 = select i1 %10, i8 %11, i8 0
  ret i8 %12

13:                                               ; preds = %5, %1
  %14 = phi i8 [ -48, %1 ], [ -55, %5 ]
  %15 = add i8 %14, %0
  ret i8 %15
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

; Function Attrs: nounwind readnone
declare i32** @__ctype_tolower_loc() local_unnamed_addr #7

; Function Attrs: nounwind readnone
declare i16** @__ctype_b_loc() local_unnamed_addr #7

declare i8* @_ZN4absl16numbers_internal15FastIntToBufferEiPc(i32, i8*) local_unnamed_addr #3

declare i8* @_ZN4absl16numbers_internal15FastIntToBufferEjPc(i32, i8*) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #3

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl23inlined_vector_internal7StorageIjLm8ENSt3__19allocatorIjEEE8InitFromERKS5_(%"class.absl::inlined_vector_internal::Storage"*, %"class.absl::inlined_vector_internal::Storage"* dereferenceable(40)) local_unnamed_addr #9 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = lshr i64 %4, 1
  %6 = and i64 %4, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %8, label %13

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1
  %10 = bitcast %"union.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Data"* %9 to i32*
  %11 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %1, i64 0, i32 1
  %12 = bitcast %"union.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Data"* %11 to i32*
  br label %27

13:                                               ; preds = %2
  %14 = icmp ugt i64 %5, 16
  %15 = select i1 %14, i64 %5, i64 16
  %16 = icmp ugt i64 %15, 4611686018427387903
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  tail call void @abort() #18
  unreachable

18:                                               ; preds = %13
  %19 = shl i64 %15, 2
  %20 = tail call i8* @_Znwm(i64 %19) #16
  %21 = bitcast i8* %20 to i32*
  %22 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %23 = bitcast i32** %22 to i8**
  store i8* %20, i8** %23, align 8
  %24 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %15, i64* %24, align 8
  %25 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %1, i64 0, i32 1, i32 0, i32 0
  %26 = load i32*, i32** %25, align 8
  br label %27

27:                                               ; preds = %18, %8
  %28 = phi i32* [ %26, %18 ], [ %12, %8 ]
  %29 = phi i32* [ %21, %18 ], [ %10, %8 ]
  %30 = bitcast i32* %29 to i8*
  %31 = bitcast i32* %28 to i8*
  %32 = shl i64 %5, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %31, i64 %32, i1 false) #15
  %33 = load i64, i64* %3, align 8
  %34 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i64 %33, i64* %34, align 8
  ret void
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #10

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #11

declare i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"*, i64, i64, i8*, i64) local_unnamed_addr #3

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(4) i32* @_ZN4absl23inlined_vector_internal7StorageIjLm8ENSt3__19allocatorIjEEE15EmplaceBackSlowIJjEEERjDpOT_(%"class.absl::inlined_vector_internal::Storage"*, i32* dereferenceable(4)) local_unnamed_addr #9 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !noalias !10
  %5 = and i64 %4, 1
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1
  %9 = ptrtoint %"union.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Data"* %8 to i64
  br label %19

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %12 = bitcast i32** %11 to i64*
  %13 = load i64, i64* %12, align 8, !noalias !10
  %14 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 1
  %15 = load i64, i64* %14, align 8, !noalias !10
  %16 = shl i64 %15, 1
  %17 = icmp ugt i64 %16, 4611686018427387903
  br i1 %17, label %18, label %19

18:                                               ; preds = %10
  tail call void @abort() #18
  unreachable

19:                                               ; preds = %7, %10
  %20 = phi i64 [ 16, %7 ], [ %16, %10 ]
  %21 = phi i64 [ %9, %7 ], [ %13, %10 ]
  %22 = inttoptr i64 %21 to i32*
  %23 = inttoptr i64 %21 to i8*
  %24 = lshr i64 %4, 1
  %25 = shl i64 %20, 2
  %26 = tail call i8* @_Znwm(i64 %25) #16
  %27 = bitcast i8* %26 to i32*
  %28 = ptrtoint i8* %26 to i64
  %29 = getelementptr inbounds i32, i32* %27, i64 %24
  %30 = load i32, i32* %1, align 4
  store i32 %30, i32* %29, align 4
  %31 = icmp eq i64 %24, 0
  br i1 %31, label %163, label %32

32:                                               ; preds = %19
  %33 = icmp ult i64 %4, 16
  br i1 %33, label %122, label %34

34:                                               ; preds = %32
  %35 = shl i64 %24, 2
  %36 = getelementptr i8, i8* %26, i64 %35
  %37 = getelementptr i32, i32* %22, i64 %24
  %38 = bitcast i32* %37 to i8*
  %39 = icmp ult i8* %26, %38
  %40 = icmp ugt i8* %36, %23
  %41 = and i1 %39, %40
  br i1 %41, label %122, label %42

42:                                               ; preds = %34
  %43 = and i64 %24, 9223372036854775800
  %44 = getelementptr i32, i32* %22, i64 %43
  %45 = add nsw i64 %43, -8
  %46 = lshr exact i64 %45, 3
  %47 = add nuw nsw i64 %46, 1
  %48 = and i64 %47, 3
  %49 = icmp ult i64 %45, 24
  br i1 %49, label %101, label %50

50:                                               ; preds = %42
  %51 = sub nsw i64 %47, %48
  br label %52

52:                                               ; preds = %52, %50
  %53 = phi i64 [ 0, %50 ], [ %98, %52 ]
  %54 = phi i64 [ %51, %50 ], [ %99, %52 ]
  %55 = getelementptr i32, i32* %22, i64 %53
  %56 = getelementptr inbounds i32, i32* %27, i64 %53
  %57 = bitcast i32* %55 to <4 x i32>*
  %58 = load <4 x i32>, <4 x i32>* %57, align 4, !alias.scope !13
  %59 = getelementptr i32, i32* %55, i64 4
  %60 = bitcast i32* %59 to <4 x i32>*
  %61 = load <4 x i32>, <4 x i32>* %60, align 4, !alias.scope !13
  %62 = bitcast i32* %56 to <4 x i32>*
  store <4 x i32> %58, <4 x i32>* %62, align 4, !alias.scope !16, !noalias !13
  %63 = getelementptr inbounds i32, i32* %56, i64 4
  %64 = bitcast i32* %63 to <4 x i32>*
  store <4 x i32> %61, <4 x i32>* %64, align 4, !alias.scope !16, !noalias !13
  %65 = or i64 %53, 8
  %66 = getelementptr i32, i32* %22, i64 %65
  %67 = getelementptr inbounds i32, i32* %27, i64 %65
  %68 = bitcast i32* %66 to <4 x i32>*
  %69 = load <4 x i32>, <4 x i32>* %68, align 4, !alias.scope !13
  %70 = getelementptr i32, i32* %66, i64 4
  %71 = bitcast i32* %70 to <4 x i32>*
  %72 = load <4 x i32>, <4 x i32>* %71, align 4, !alias.scope !13
  %73 = bitcast i32* %67 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %73, align 4, !alias.scope !16, !noalias !13
  %74 = getelementptr inbounds i32, i32* %67, i64 4
  %75 = bitcast i32* %74 to <4 x i32>*
  store <4 x i32> %72, <4 x i32>* %75, align 4, !alias.scope !16, !noalias !13
  %76 = or i64 %53, 16
  %77 = getelementptr i32, i32* %22, i64 %76
  %78 = getelementptr inbounds i32, i32* %27, i64 %76
  %79 = bitcast i32* %77 to <4 x i32>*
  %80 = load <4 x i32>, <4 x i32>* %79, align 4, !alias.scope !13
  %81 = getelementptr i32, i32* %77, i64 4
  %82 = bitcast i32* %81 to <4 x i32>*
  %83 = load <4 x i32>, <4 x i32>* %82, align 4, !alias.scope !13
  %84 = bitcast i32* %78 to <4 x i32>*
  store <4 x i32> %80, <4 x i32>* %84, align 4, !alias.scope !16, !noalias !13
  %85 = getelementptr inbounds i32, i32* %78, i64 4
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> %83, <4 x i32>* %86, align 4, !alias.scope !16, !noalias !13
  %87 = or i64 %53, 24
  %88 = getelementptr i32, i32* %22, i64 %87
  %89 = getelementptr inbounds i32, i32* %27, i64 %87
  %90 = bitcast i32* %88 to <4 x i32>*
  %91 = load <4 x i32>, <4 x i32>* %90, align 4, !alias.scope !13
  %92 = getelementptr i32, i32* %88, i64 4
  %93 = bitcast i32* %92 to <4 x i32>*
  %94 = load <4 x i32>, <4 x i32>* %93, align 4, !alias.scope !13
  %95 = bitcast i32* %89 to <4 x i32>*
  store <4 x i32> %91, <4 x i32>* %95, align 4, !alias.scope !16, !noalias !13
  %96 = getelementptr inbounds i32, i32* %89, i64 4
  %97 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %97, align 4, !alias.scope !16, !noalias !13
  %98 = add i64 %53, 32
  %99 = add i64 %54, -4
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %52, !llvm.loop !18

101:                                              ; preds = %52, %42
  %102 = phi i64 [ 0, %42 ], [ %98, %52 ]
  %103 = icmp eq i64 %48, 0
  br i1 %103, label %120, label %104

104:                                              ; preds = %101, %104
  %105 = phi i64 [ %117, %104 ], [ %102, %101 ]
  %106 = phi i64 [ %118, %104 ], [ %48, %101 ]
  %107 = getelementptr i32, i32* %22, i64 %105
  %108 = getelementptr inbounds i32, i32* %27, i64 %105
  %109 = bitcast i32* %107 to <4 x i32>*
  %110 = load <4 x i32>, <4 x i32>* %109, align 4, !alias.scope !13
  %111 = getelementptr i32, i32* %107, i64 4
  %112 = bitcast i32* %111 to <4 x i32>*
  %113 = load <4 x i32>, <4 x i32>* %112, align 4, !alias.scope !13
  %114 = bitcast i32* %108 to <4 x i32>*
  store <4 x i32> %110, <4 x i32>* %114, align 4, !alias.scope !16, !noalias !13
  %115 = getelementptr inbounds i32, i32* %108, i64 4
  %116 = bitcast i32* %115 to <4 x i32>*
  store <4 x i32> %113, <4 x i32>* %116, align 4, !alias.scope !16, !noalias !13
  %117 = add i64 %105, 8
  %118 = add i64 %106, -1
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %104, !llvm.loop !20

120:                                              ; preds = %104, %101
  %121 = icmp eq i64 %24, %43
  br i1 %121, label %163, label %122

122:                                              ; preds = %120, %34, %32
  %123 = phi i32* [ %22, %34 ], [ %22, %32 ], [ %44, %120 ]
  %124 = phi i64 [ 0, %34 ], [ 0, %32 ], [ %43, %120 ]
  %125 = xor i64 %124, -1
  %126 = add nsw i64 %24, %125
  %127 = and i64 %24, 3
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %139, label %129

129:                                              ; preds = %122, %129
  %130 = phi i32* [ %135, %129 ], [ %123, %122 ]
  %131 = phi i64 [ %136, %129 ], [ %124, %122 ]
  %132 = phi i64 [ %137, %129 ], [ %127, %122 ]
  %133 = getelementptr inbounds i32, i32* %27, i64 %131
  %134 = load i32, i32* %130, align 4
  store i32 %134, i32* %133, align 4
  %135 = getelementptr inbounds i32, i32* %130, i64 1
  %136 = add nuw nsw i64 %131, 1
  %137 = add i64 %132, -1
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %129, !llvm.loop !22

139:                                              ; preds = %129, %122
  %140 = phi i32* [ %123, %122 ], [ %135, %129 ]
  %141 = phi i64 [ %124, %122 ], [ %136, %129 ]
  %142 = icmp ult i64 %126, 3
  br i1 %142, label %163, label %143

143:                                              ; preds = %139, %143
  %144 = phi i32* [ %160, %143 ], [ %140, %139 ]
  %145 = phi i64 [ %161, %143 ], [ %141, %139 ]
  %146 = getelementptr inbounds i32, i32* %27, i64 %145
  %147 = load i32, i32* %144, align 4
  store i32 %147, i32* %146, align 4
  %148 = getelementptr inbounds i32, i32* %144, i64 1
  %149 = add nuw nsw i64 %145, 1
  %150 = getelementptr inbounds i32, i32* %27, i64 %149
  %151 = load i32, i32* %148, align 4
  store i32 %151, i32* %150, align 4
  %152 = getelementptr inbounds i32, i32* %144, i64 2
  %153 = add nuw nsw i64 %145, 2
  %154 = getelementptr inbounds i32, i32* %27, i64 %153
  %155 = load i32, i32* %152, align 4
  store i32 %155, i32* %154, align 4
  %156 = getelementptr inbounds i32, i32* %144, i64 3
  %157 = add nuw nsw i64 %145, 3
  %158 = getelementptr inbounds i32, i32* %27, i64 %157
  %159 = load i32, i32* %156, align 4
  store i32 %159, i32* %158, align 4
  %160 = getelementptr inbounds i32, i32* %144, i64 4
  %161 = add nuw nsw i64 %145, 4
  %162 = icmp eq i64 %161, %24
  br i1 %162, label %163, label %143, !llvm.loop !23

163:                                              ; preds = %139, %143, %120, %19
  br i1 %6, label %169, label %164

164:                                              ; preds = %163
  %165 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %166 = bitcast i32** %165 to i8**
  %167 = load i8*, i8** %166, align 8
  tail call void @_ZdlPv(i8* %167) #16
  %168 = load i64, i64* %3, align 8
  br label %169

169:                                              ; preds = %164, %163
  %170 = phi i64 [ %168, %164 ], [ %4, %163 ]
  %171 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %172 = bitcast i32** %171 to i64*
  store i64 %28, i64* %172, align 8
  %173 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %20, i64* %173, align 8
  %174 = or i64 %170, 1
  %175 = add i64 %174, 2
  store i64 %175, i64* %3, align 8
  ret i32* %29
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(4) i32* @_ZN4absl23inlined_vector_internal7StorageIjLm8ENSt3__19allocatorIjEEE15EmplaceBackSlowIJRKjEEERjDpOT_(%"class.absl::inlined_vector_internal::Storage"*, i32* dereferenceable(4)) local_unnamed_addr #9 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !noalias !24
  %5 = and i64 %4, 1
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1
  %9 = ptrtoint %"union.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Data"* %8 to i64
  br label %19

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %12 = bitcast i32** %11 to i64*
  %13 = load i64, i64* %12, align 8, !noalias !24
  %14 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 1
  %15 = load i64, i64* %14, align 8, !noalias !24
  %16 = shl i64 %15, 1
  %17 = icmp ugt i64 %16, 4611686018427387903
  br i1 %17, label %18, label %19

18:                                               ; preds = %10
  tail call void @abort() #18
  unreachable

19:                                               ; preds = %7, %10
  %20 = phi i64 [ 16, %7 ], [ %16, %10 ]
  %21 = phi i64 [ %9, %7 ], [ %13, %10 ]
  %22 = inttoptr i64 %21 to i32*
  %23 = inttoptr i64 %21 to i8*
  %24 = lshr i64 %4, 1
  %25 = shl i64 %20, 2
  %26 = tail call i8* @_Znwm(i64 %25) #16
  %27 = bitcast i8* %26 to i32*
  %28 = ptrtoint i8* %26 to i64
  %29 = getelementptr inbounds i32, i32* %27, i64 %24
  %30 = load i32, i32* %1, align 4
  store i32 %30, i32* %29, align 4
  %31 = icmp eq i64 %24, 0
  br i1 %31, label %163, label %32

32:                                               ; preds = %19
  %33 = icmp ult i64 %4, 16
  br i1 %33, label %122, label %34

34:                                               ; preds = %32
  %35 = shl i64 %24, 2
  %36 = getelementptr i8, i8* %26, i64 %35
  %37 = getelementptr i32, i32* %22, i64 %24
  %38 = bitcast i32* %37 to i8*
  %39 = icmp ult i8* %26, %38
  %40 = icmp ugt i8* %36, %23
  %41 = and i1 %39, %40
  br i1 %41, label %122, label %42

42:                                               ; preds = %34
  %43 = and i64 %24, 9223372036854775800
  %44 = getelementptr i32, i32* %22, i64 %43
  %45 = add nsw i64 %43, -8
  %46 = lshr exact i64 %45, 3
  %47 = add nuw nsw i64 %46, 1
  %48 = and i64 %47, 3
  %49 = icmp ult i64 %45, 24
  br i1 %49, label %101, label %50

50:                                               ; preds = %42
  %51 = sub nsw i64 %47, %48
  br label %52

52:                                               ; preds = %52, %50
  %53 = phi i64 [ 0, %50 ], [ %98, %52 ]
  %54 = phi i64 [ %51, %50 ], [ %99, %52 ]
  %55 = getelementptr i32, i32* %22, i64 %53
  %56 = getelementptr inbounds i32, i32* %27, i64 %53
  %57 = bitcast i32* %55 to <4 x i32>*
  %58 = load <4 x i32>, <4 x i32>* %57, align 4, !alias.scope !27
  %59 = getelementptr i32, i32* %55, i64 4
  %60 = bitcast i32* %59 to <4 x i32>*
  %61 = load <4 x i32>, <4 x i32>* %60, align 4, !alias.scope !27
  %62 = bitcast i32* %56 to <4 x i32>*
  store <4 x i32> %58, <4 x i32>* %62, align 4, !alias.scope !30, !noalias !27
  %63 = getelementptr inbounds i32, i32* %56, i64 4
  %64 = bitcast i32* %63 to <4 x i32>*
  store <4 x i32> %61, <4 x i32>* %64, align 4, !alias.scope !30, !noalias !27
  %65 = or i64 %53, 8
  %66 = getelementptr i32, i32* %22, i64 %65
  %67 = getelementptr inbounds i32, i32* %27, i64 %65
  %68 = bitcast i32* %66 to <4 x i32>*
  %69 = load <4 x i32>, <4 x i32>* %68, align 4, !alias.scope !27
  %70 = getelementptr i32, i32* %66, i64 4
  %71 = bitcast i32* %70 to <4 x i32>*
  %72 = load <4 x i32>, <4 x i32>* %71, align 4, !alias.scope !27
  %73 = bitcast i32* %67 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %73, align 4, !alias.scope !30, !noalias !27
  %74 = getelementptr inbounds i32, i32* %67, i64 4
  %75 = bitcast i32* %74 to <4 x i32>*
  store <4 x i32> %72, <4 x i32>* %75, align 4, !alias.scope !30, !noalias !27
  %76 = or i64 %53, 16
  %77 = getelementptr i32, i32* %22, i64 %76
  %78 = getelementptr inbounds i32, i32* %27, i64 %76
  %79 = bitcast i32* %77 to <4 x i32>*
  %80 = load <4 x i32>, <4 x i32>* %79, align 4, !alias.scope !27
  %81 = getelementptr i32, i32* %77, i64 4
  %82 = bitcast i32* %81 to <4 x i32>*
  %83 = load <4 x i32>, <4 x i32>* %82, align 4, !alias.scope !27
  %84 = bitcast i32* %78 to <4 x i32>*
  store <4 x i32> %80, <4 x i32>* %84, align 4, !alias.scope !30, !noalias !27
  %85 = getelementptr inbounds i32, i32* %78, i64 4
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> %83, <4 x i32>* %86, align 4, !alias.scope !30, !noalias !27
  %87 = or i64 %53, 24
  %88 = getelementptr i32, i32* %22, i64 %87
  %89 = getelementptr inbounds i32, i32* %27, i64 %87
  %90 = bitcast i32* %88 to <4 x i32>*
  %91 = load <4 x i32>, <4 x i32>* %90, align 4, !alias.scope !27
  %92 = getelementptr i32, i32* %88, i64 4
  %93 = bitcast i32* %92 to <4 x i32>*
  %94 = load <4 x i32>, <4 x i32>* %93, align 4, !alias.scope !27
  %95 = bitcast i32* %89 to <4 x i32>*
  store <4 x i32> %91, <4 x i32>* %95, align 4, !alias.scope !30, !noalias !27
  %96 = getelementptr inbounds i32, i32* %89, i64 4
  %97 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %97, align 4, !alias.scope !30, !noalias !27
  %98 = add i64 %53, 32
  %99 = add i64 %54, -4
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %52, !llvm.loop !32

101:                                              ; preds = %52, %42
  %102 = phi i64 [ 0, %42 ], [ %98, %52 ]
  %103 = icmp eq i64 %48, 0
  br i1 %103, label %120, label %104

104:                                              ; preds = %101, %104
  %105 = phi i64 [ %117, %104 ], [ %102, %101 ]
  %106 = phi i64 [ %118, %104 ], [ %48, %101 ]
  %107 = getelementptr i32, i32* %22, i64 %105
  %108 = getelementptr inbounds i32, i32* %27, i64 %105
  %109 = bitcast i32* %107 to <4 x i32>*
  %110 = load <4 x i32>, <4 x i32>* %109, align 4, !alias.scope !27
  %111 = getelementptr i32, i32* %107, i64 4
  %112 = bitcast i32* %111 to <4 x i32>*
  %113 = load <4 x i32>, <4 x i32>* %112, align 4, !alias.scope !27
  %114 = bitcast i32* %108 to <4 x i32>*
  store <4 x i32> %110, <4 x i32>* %114, align 4, !alias.scope !30, !noalias !27
  %115 = getelementptr inbounds i32, i32* %108, i64 4
  %116 = bitcast i32* %115 to <4 x i32>*
  store <4 x i32> %113, <4 x i32>* %116, align 4, !alias.scope !30, !noalias !27
  %117 = add i64 %105, 8
  %118 = add i64 %106, -1
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %104, !llvm.loop !33

120:                                              ; preds = %104, %101
  %121 = icmp eq i64 %24, %43
  br i1 %121, label %163, label %122

122:                                              ; preds = %120, %34, %32
  %123 = phi i32* [ %22, %34 ], [ %22, %32 ], [ %44, %120 ]
  %124 = phi i64 [ 0, %34 ], [ 0, %32 ], [ %43, %120 ]
  %125 = xor i64 %124, -1
  %126 = add nsw i64 %24, %125
  %127 = and i64 %24, 3
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %139, label %129

129:                                              ; preds = %122, %129
  %130 = phi i32* [ %135, %129 ], [ %123, %122 ]
  %131 = phi i64 [ %136, %129 ], [ %124, %122 ]
  %132 = phi i64 [ %137, %129 ], [ %127, %122 ]
  %133 = getelementptr inbounds i32, i32* %27, i64 %131
  %134 = load i32, i32* %130, align 4
  store i32 %134, i32* %133, align 4
  %135 = getelementptr inbounds i32, i32* %130, i64 1
  %136 = add nuw nsw i64 %131, 1
  %137 = add i64 %132, -1
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %129, !llvm.loop !34

139:                                              ; preds = %129, %122
  %140 = phi i32* [ %123, %122 ], [ %135, %129 ]
  %141 = phi i64 [ %124, %122 ], [ %136, %129 ]
  %142 = icmp ult i64 %126, 3
  br i1 %142, label %163, label %143

143:                                              ; preds = %139, %143
  %144 = phi i32* [ %160, %143 ], [ %140, %139 ]
  %145 = phi i64 [ %161, %143 ], [ %141, %139 ]
  %146 = getelementptr inbounds i32, i32* %27, i64 %145
  %147 = load i32, i32* %144, align 4
  store i32 %147, i32* %146, align 4
  %148 = getelementptr inbounds i32, i32* %144, i64 1
  %149 = add nuw nsw i64 %145, 1
  %150 = getelementptr inbounds i32, i32* %27, i64 %149
  %151 = load i32, i32* %148, align 4
  store i32 %151, i32* %150, align 4
  %152 = getelementptr inbounds i32, i32* %144, i64 2
  %153 = add nuw nsw i64 %145, 2
  %154 = getelementptr inbounds i32, i32* %27, i64 %153
  %155 = load i32, i32* %152, align 4
  store i32 %155, i32* %154, align 4
  %156 = getelementptr inbounds i32, i32* %144, i64 3
  %157 = add nuw nsw i64 %145, 3
  %158 = getelementptr inbounds i32, i32* %27, i64 %157
  %159 = load i32, i32* %156, align 4
  store i32 %159, i32* %158, align 4
  %160 = getelementptr inbounds i32, i32* %144, i64 4
  %161 = add nuw nsw i64 %145, 4
  %162 = icmp eq i64 %161, %24
  br i1 %162, label %163, label %143, !llvm.loop !35

163:                                              ; preds = %139, %143, %120, %19
  br i1 %6, label %169, label %164

164:                                              ; preds = %163
  %165 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %166 = bitcast i32** %165 to i8**
  %167 = load i8*, i8** %166, align 8
  tail call void @_ZdlPv(i8* %167) #16
  %168 = load i64, i64* %3, align 8
  br label %169

169:                                              ; preds = %164, %163
  %170 = phi i64 [ %168, %164 ], [ %4, %163 ]
  %171 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %172 = bitcast i32** %171 to i64*
  store i64 %28, i64* %172, align 8
  %173 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %20, i64* %173, align 8
  %174 = or i64 %170, 1
  %175 = add i64 %174, 2
  store i64 %175, i64* %3, align 8
  ret i32* %29
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN4spdy20SpdyAltSvcWireFormat18AlternativeServiceENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJRNS_12basic_stringIcNS_11char_traitsIcEENS4_IcEEEESD_RtRjRN4absl13InlinedVectorIjLm8ENS4_IjEEEEEEEvDpOT_(%"class.std::__1::vector"*, %"class.std::__1::basic_string"* dereferenceable(24), %"class.std::__1::basic_string"* dereferenceable(24), i16* dereferenceable(2), i32* dereferenceable(4), %"class.absl::InlinedVector"* dereferenceable(40)) local_unnamed_addr #12 comdat align 2 {
  %7 = alloca %"class.absl::InlinedVector", align 8
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %9 = bitcast %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = sdiv exact i64 %13, 96
  %15 = add nsw i64 %14, 1
  %16 = icmp ugt i64 %15, 192153584101141162
  br i1 %16, label %17, label %19

17:                                               ; preds = %6
  %18 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %18) #18
  unreachable

19:                                               ; preds = %6
  %20 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %21 = bitcast %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"** %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %22, %12
  %24 = sdiv exact i64 %23, 96
  %25 = icmp ult i64 %24, 96076792050570581
  br i1 %25, label %26, label %31

26:                                               ; preds = %19
  %27 = shl nsw i64 %24, 1
  %28 = icmp ult i64 %27, %15
  %29 = select i1 %28, i64 %15, i64 %27
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %36, label %31

31:                                               ; preds = %19, %26
  %32 = phi i64 [ %29, %26 ], [ 192153584101141162, %19 ]
  %33 = mul i64 %32, 96
  %34 = tail call i8* @_Znwm(i64 %33) #16
  %35 = bitcast i8* %34 to %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"*
  br label %36

36:                                               ; preds = %26, %31
  %37 = phi i64 [ %32, %31 ], [ 0, %26 ]
  %38 = phi %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* [ %35, %31 ], [ null, %26 ]
  %39 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %38, i64 %14
  %40 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %38, i64 %37
  %41 = ptrtoint %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %40 to i64
  %42 = bitcast %"class.absl::InlinedVector"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %42) #15
  %43 = load i16, i16* %3, align 2
  %44 = load i32, i32* %4, align 4
  %45 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %5, i64 0, i32 0
  %46 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %7, i64 0, i32 0
  %47 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %47, align 8
  %48 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = load i64, i64* %48, align 8
  %50 = icmp ult i64 %49, 2
  br i1 %50, label %60, label %51

51:                                               ; preds = %36
  %52 = and i64 %49, 1
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %54, label %59

54:                                               ; preds = %51
  store i64 %49, i64* %47, align 8
  %55 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %5, i64 0, i32 0, i32 1
  %56 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %7, i64 0, i32 0, i32 1
  %57 = bitcast %"union.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Data"* %56 to i8*
  %58 = bitcast %"union.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Data"* %55 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %57, i8* align 8 %58, i64 32, i1 false) #15
  br label %60

59:                                               ; preds = %51
  call void @_ZN4absl23inlined_vector_internal7StorageIjLm8ENSt3__19allocatorIjEEE8InitFromERKS5_(%"class.absl::inlined_vector_internal::Storage"* nonnull %46, %"class.absl::inlined_vector_internal::Storage"* dereferenceable(40) %45) #15
  br label %60

60:                                               ; preds = %59, %54, %36
  %61 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %62 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %61, i64 0, i32 1, i32 0
  %63 = load i8, i8* %62, align 1
  %64 = icmp slt i8 %63, 0
  br i1 %64, label %68, label %65

65:                                               ; preds = %60
  %66 = bitcast %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %39 to i8*
  %67 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %66, i8* align 8 %67, i64 24, i1 false) #15
  br label %74

68:                                               ; preds = %60
  %69 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %39, i64 0, i32 0
  %70 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %71 = load i8*, i8** %70, align 8
  %72 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %73 = load i64, i64* %72, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %69, i8* %71, i64 %73) #15
  br label %74

74:                                               ; preds = %68, %65
  %75 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %38, i64 %14, i32 1
  %76 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %77 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %76, i64 0, i32 1, i32 0
  %78 = load i8, i8* %77, align 1
  %79 = icmp slt i8 %78, 0
  br i1 %79, label %83, label %80

80:                                               ; preds = %74
  %81 = bitcast %"class.std::__1::basic_string"* %75 to i8*
  %82 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %81, i8* align 8 %82, i64 24, i1 false) #15
  br label %88

83:                                               ; preds = %74
  %84 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %85 = load i8*, i8** %84, align 8
  %86 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %87 = load i64, i64* %86, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %75, i8* %85, i64 %87) #15
  br label %88

88:                                               ; preds = %80, %83
  %89 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %38, i64 %14, i32 2
  store i16 %43, i16* %89, align 8
  %90 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %38, i64 %14, i32 3
  store i32 %44, i32* %90, align 4
  %91 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %38, i64 %14, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  %92 = load i64, i64* %47, align 8
  store i64 %92, i64* %91, align 8
  %93 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %7, i64 0, i32 0, i32 1
  %94 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %38, i64 %14, i32 4, i32 0, i32 1
  %95 = bitcast %"union.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Data"* %94 to i8*
  %96 = bitcast %"union.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Data"* %93 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %95, i8* align 8 %96, i64 32, i1 false) #15
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %42) #15
  %97 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %39, i64 1
  %98 = ptrtoint %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %97 to i64
  %99 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %100 = load %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"*, %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"** %99, align 8
  %101 = load %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"*, %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"** %8, align 8
  %102 = icmp eq %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %101, %100
  br i1 %102, label %103, label %105

103:                                              ; preds = %88
  %104 = ptrtoint %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %39 to i64
  store i64 %104, i64* %11, align 8
  store i64 %98, i64* %9, align 8
  store i64 %41, i64* %21, align 8
  br label %198

105:                                              ; preds = %88, %161
  %106 = phi %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* [ %108, %161 ], [ %39, %88 ]
  %107 = phi %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* [ %109, %161 ], [ %101, %88 ]
  %108 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %106, i64 -1
  %109 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %107, i64 -1
  %110 = bitcast %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %109 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %111 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %110, i64 0, i32 1, i32 0
  %112 = load i8, i8* %111, align 1
  %113 = icmp slt i8 %112, 0
  br i1 %113, label %117, label %114

114:                                              ; preds = %105
  %115 = bitcast %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %108 to i8*
  %116 = bitcast %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %109 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %115, i8* align 8 %116, i64 24, i1 false) #15
  br label %123

117:                                              ; preds = %105
  %118 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %108, i64 0, i32 0
  %119 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %109, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %120 = load i8*, i8** %119, align 8
  %121 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %107, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %122 = load i64, i64* %121, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %118, i8* %120, i64 %122) #15
  br label %123

123:                                              ; preds = %117, %114
  %124 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %106, i64 -1, i32 1
  %125 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %107, i64 -1, i32 1
  %126 = bitcast %"class.std::__1::basic_string"* %125 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %127 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %126, i64 0, i32 1, i32 0
  %128 = load i8, i8* %127, align 1
  %129 = icmp slt i8 %128, 0
  br i1 %129, label %133, label %130

130:                                              ; preds = %123
  %131 = bitcast %"class.std::__1::basic_string"* %124 to i8*
  %132 = bitcast %"class.std::__1::basic_string"* %125 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %131, i8* align 8 %132, i64 24, i1 false) #15
  br label %138

133:                                              ; preds = %123
  %134 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %125, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %135 = load i8*, i8** %134, align 8
  %136 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %107, i64 -1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %137 = load i64, i64* %136, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %124, i8* %135, i64 %137) #15
  br label %138

138:                                              ; preds = %133, %130
  %139 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %106, i64 -1, i32 2
  %140 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %107, i64 -1, i32 2
  %141 = bitcast i16* %140 to i64*
  %142 = bitcast i16* %139 to i64*
  %143 = load i64, i64* %141, align 8
  store i64 %143, i64* %142, align 8
  %144 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %106, i64 -1, i32 4
  %145 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %107, i64 -1, i32 4
  %146 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %145, i64 0, i32 0
  %147 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %144, i64 0, i32 0
  %148 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %144, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %148, align 8
  %149 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %145, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %150 = load i64, i64* %149, align 8
  %151 = icmp ult i64 %150, 2
  br i1 %151, label %161, label %152

152:                                              ; preds = %138
  %153 = and i64 %150, 1
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %155, label %160

155:                                              ; preds = %152
  store i64 %150, i64* %148, align 8
  %156 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %107, i64 -1, i32 4, i32 0, i32 1
  %157 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %106, i64 -1, i32 4, i32 0, i32 1
  %158 = bitcast %"union.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Data"* %157 to i8*
  %159 = bitcast %"union.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Data"* %156 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %158, i8* align 8 %159, i64 32, i1 false) #15
  br label %161

160:                                              ; preds = %152
  call void @_ZN4absl23inlined_vector_internal7StorageIjLm8ENSt3__19allocatorIjEEE8InitFromERKS5_(%"class.absl::inlined_vector_internal::Storage"* %147, %"class.absl::inlined_vector_internal::Storage"* dereferenceable(40) %146) #15
  br label %161

161:                                              ; preds = %160, %155, %138
  %162 = icmp eq %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %109, %100
  br i1 %162, label %163, label %105

163:                                              ; preds = %161
  %164 = load %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"*, %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"** %99, align 8
  %165 = load %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"*, %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"** %8, align 8
  %166 = ptrtoint %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %108 to i64
  store i64 %166, i64* %11, align 8
  store i64 %98, i64* %9, align 8
  store i64 %41, i64* %21, align 8
  %167 = icmp eq %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %165, %164
  br i1 %167, label %198, label %168

168:                                              ; preds = %163, %196
  %169 = phi %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* [ %170, %196 ], [ %165, %163 ]
  %170 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %169, i64 -1
  %171 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %169, i64 -1, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  %172 = load i64, i64* %171, align 8
  %173 = and i64 %172, 1
  %174 = icmp eq i64 %173, 0
  br i1 %174, label %179, label %175

175:                                              ; preds = %168
  %176 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %169, i64 -1, i32 4, i32 0, i32 1, i32 0, i32 0
  %177 = bitcast i32** %176 to i8**
  %178 = load i8*, i8** %177, align 8
  call void @_ZdlPv(i8* %178) #16
  br label %179

179:                                              ; preds = %175, %168
  %180 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %169, i64 -1, i32 1
  %181 = bitcast %"class.std::__1::basic_string"* %180 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %182 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %181, i64 0, i32 1, i32 0
  %183 = load i8, i8* %182, align 1
  %184 = icmp slt i8 %183, 0
  br i1 %184, label %185, label %188

185:                                              ; preds = %179
  %186 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %180, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %187 = load i8*, i8** %186, align 8
  call void @_ZdlPv(i8* %187) #16
  br label %188

188:                                              ; preds = %185, %179
  %189 = bitcast %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %170 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %190 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %189, i64 0, i32 1, i32 0
  %191 = load i8, i8* %190, align 1
  %192 = icmp slt i8 %191, 0
  br i1 %192, label %193, label %196

193:                                              ; preds = %188
  %194 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %170, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %195 = load i8*, i8** %194, align 8
  call void @_ZdlPv(i8* %195) #16
  br label %196

196:                                              ; preds = %193, %188
  %197 = icmp eq %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %170, %164
  br i1 %197, label %198, label %168

198:                                              ; preds = %196, %103, %163
  %199 = phi %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* [ %100, %103 ], [ %164, %163 ], [ %164, %196 ]
  %200 = icmp eq %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %199, null
  br i1 %200, label %203, label %201

201:                                              ; preds = %198
  %202 = bitcast %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %199 to i8*
  call void @_ZdlPv(i8* %202) #16
  br label %203

203:                                              ; preds = %198, %201
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #13

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #14

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nofree nounwind readonly }
attributes #15 = { nounwind }
attributes #16 = { builtin nounwind }
attributes #17 = { nounwind readnone }
attributes #18 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN4absl23inlined_vector_internal7StorageIjLm8ENSt3__19allocatorIjEEE15MakeStorageViewEv: argument 0"}
!4 = distinct !{!4, !"_ZN4absl23inlined_vector_internal7StorageIjLm8ENSt3__19allocatorIjEEE15MakeStorageViewEv"}
!5 = !{!"branch_weights", i32 1, i32 2000}
!6 = !{!"branch_weights", i32 2000, i32 1}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZN4absl23inlined_vector_internal7StorageIjLm8ENSt3__19allocatorIjEEE15MakeStorageViewEv: argument 0"}
!9 = distinct !{!9, !"_ZN4absl23inlined_vector_internal7StorageIjLm8ENSt3__19allocatorIjEEE15MakeStorageViewEv"}
!10 = !{!11}
!11 = distinct !{!11, !12, !"_ZN4absl23inlined_vector_internal7StorageIjLm8ENSt3__19allocatorIjEEE15MakeStorageViewEv: argument 0"}
!12 = distinct !{!12, !"_ZN4absl23inlined_vector_internal7StorageIjLm8ENSt3__19allocatorIjEEE15MakeStorageViewEv"}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !19}
!19 = !{!"llvm.loop.isvectorized", i32 1}
!20 = distinct !{!20, !21}
!21 = !{!"llvm.loop.unroll.disable"}
!22 = distinct !{!22, !21}
!23 = distinct !{!23, !19}
!24 = !{!25}
!25 = distinct !{!25, !26, !"_ZN4absl23inlined_vector_internal7StorageIjLm8ENSt3__19allocatorIjEEE15MakeStorageViewEv: argument 0"}
!26 = distinct !{!26, !"_ZN4absl23inlined_vector_internal7StorageIjLm8ENSt3__19allocatorIjEEE15MakeStorageViewEv"}
!27 = !{!28}
!28 = distinct !{!28, !29}
!29 = distinct !{!29, !"LVerDomain"}
!30 = !{!31}
!31 = distinct !{!31, !29}
!32 = distinct !{!32, !19}
!33 = distinct !{!33, !21}
!34 = distinct !{!34, !21}
!35 = distinct !{!35, !19}
