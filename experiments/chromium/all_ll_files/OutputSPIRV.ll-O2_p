; ModuleID = '../../third_party/angle/src/compiler/translator/OutputSPIRV.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/OutputSPIRV.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::TCompiler" = type { %"class.sh::TShHandleBase", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.8", %"class.std::__1::vector.8", %"class.std::__1::vector.8", %"struct.sh::ValidateASTOptions", %"class.angle::BitSetT", i8, i8, i32, i32, i32, %"class.sh::CallDAG", %"class.std::__1::vector.59", %struct.ShBuiltInResources, %"class.std::__1::basic_string", %"class.sh::TSymbolTable", %"class.std::__1::map.90", %"class.sh::ArrayBoundsClamper", %"class.sh::BuiltInFunctionEmulator", i32, %"class.sh::TInfoSink", %"class.sh::TDiagnostics", i8*, i8, i8, i8, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"class.std::__1::map.124", %struct.TPragma, i64 }
%"class.sh::TShHandleBase" = type { i32 (...)**, %"class.angle::PoolAllocator" }
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"*, %"class.std::__1::__compressed_pair.3" }
%"struct.sh::ShaderVariable" = type { i32, i32, %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector.117", i8, i8, %"class.std::__1::vector.1", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, i32, i8, i32, i32, i32, i8, i8, i8, i32, i8, i32, i8, i8, i8, i8, i32 }
%"class.std::__1::vector.117" = type { %"class.std::__1::__vector_base.118" }
%"class.std::__1::__vector_base.118" = type { i32*, i32*, %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.120" = type { i32* }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.sh::ShaderVariable"* }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"struct.sh::InterfaceBlock"*, %"struct.sh::InterfaceBlock"*, %"class.std::__1::__compressed_pair.15" }
%"struct.sh::InterfaceBlock" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, i32, i8, i32, i8, i8, i32, %"class.std::__1::vector.1" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.sh::InterfaceBlock"* }
%"struct.sh::ValidateASTOptions" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.angle::BitSetT" = type { i32 }
%"class.sh::CallDAG" = type { %"class.std::__1::vector.20", %"class.std::__1::map" }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { %"struct.sh::CallDAG::Record"*, %"struct.sh::CallDAG::Record"*, %"class.std::__1::__compressed_pair.46" }
%"struct.sh::CallDAG::Record" = type { %"class.sh::TIntermFunctionDefinition"*, %"class.std::__1::vector.39" }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TFunction" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TVector"*, %"class.sh::TVariable"**, i64, %"class.sh::TType"*, %"class.sh::ImmutableString", i8, i8, i8, i8, [4 x i8] }>
%"class.sh::TSymbol.base" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8 }>
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.sh::TVector" = type opaque
%"class.sh::TVariable" = type { %"class.sh::TSymbol.base", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TConstantUnion" = type { %union.anon.30, i32 }
%union.anon.30 = type { i32 }
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.22" = type opaque
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol.base", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector.23"*, i64, i32, %"class.std::__1::basic_string.24" }
%"class.sh::TVector.23" = type opaque
%"class.std::__1::basic_string.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon.27 }
%union.anon.27 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"class.sh::ImmutableString" = type { i8*, i64 }
%"class.std::__1::vector.39" = type { %"class.std::__1::__vector_base.40" }
%"class.std::__1::__vector_base.40" = type { i32*, i32*, %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { i32* }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"struct.sh::CallDAG::Record"* }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.51", %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { i64 }
%"class.std::__1::vector.59" = type { %"class.std::__1::__vector_base.60" }
%"class.std::__1::__vector_base.60" = type { %"struct.sh::TCompiler::FunctionMetadata"*, %"struct.sh::TCompiler::FunctionMetadata"*, %"class.std::__1::__compressed_pair.61" }
%"struct.sh::TCompiler::FunctionMetadata" = type { i8 }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"struct.sh::TCompiler::FunctionMetadata"* }
%struct.ShBuiltInResources = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 (i8*, i64)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array", %"struct.std::__1::array", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.std::__1::array" = type { [3 x i32] }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TSymbolTable" = type { %"class.sh::TSymbolTableBase", %"class.std::__1::vector.66", %"class.std::__1::vector.73", i8, i32, i32, i32, %struct.ShBuiltInResources, %"class.std::__1::map.81", %"class.sh::TVariable"* }
%"class.sh::TSymbolTableBase" = type { %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"* }
%"class.sh::TSymbol" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8, i8 }>
%"class.std::__1::vector.66" = type { %"class.std::__1::__vector_base.67" }
%"class.std::__1::__vector_base.67" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.73" = type { %"class.std::__1::__vector_base.74" }
%"class.std::__1::__vector_base.74" = type { %"class.std::__1::unique_ptr.75"*, %"class.std::__1::unique_ptr.75"*, %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::unique_ptr.75" = type opaque
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"class.std::__1::unique_ptr.75"* }
%"class.std::__1::map.81" = type { %"class.std::__1::__tree.82" }
%"class.std::__1::__tree.82" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.83", %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"class.std::__1::map.90" = type { %"class.std::__1::__tree.91" }
%"class.std::__1::__tree.91" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.92", %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"class.sh::ArrayBoundsClamper" = type <{ i32, i8, [3 x i8] }>
%"class.sh::BuiltInFunctionEmulator" = type { %"class.std::__1::map.101", %"class.std::__1::map", %"class.std::__1::vector.39", %"class.std::__1::vector.110" }
%"class.std::__1::map.101" = type { %"class.std::__1::__tree.102" }
%"class.std::__1::__tree.102" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.103", %"class.std::__1::__compressed_pair.107" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"class.std::__1::vector.110" = type { %"class.std::__1::__vector_base.111" }
%"class.std::__1::__vector_base.111" = type { i8* (i32)**, i8* (i32)**, %"class.std::__1::__compressed_pair.112" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { i8* (i32)** }
%"class.sh::TInfoSink" = type { %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase" }
%"class.sh::TInfoSinkBase" = type { %"class.std::__1::basic_string", %"class.std::__1::vector.117" }
%"class.sh::TDiagnostics" = type { %"class.angle::pp::Diagnostics", %"class.sh::TInfoSinkBase"*, i32, i32 }
%"class.angle::pp::Diagnostics" = type { i32 (...)** }
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.std::__1::map.124" = type { %"class.std::__1::__tree.125" }
%"class.std::__1::__tree.125" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.126", %"class.std::__1::__compressed_pair.130" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.130" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%struct.TPragma = type { i8, i8, i8, %"struct.TPragma::STDGL" }
%"struct.TPragma::STDGL" = type { i8 }
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.31", i8, [7 x i8] }>
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::TVector.31" = type { %"class.std::__1::vector.32" }
%"class.std::__1::vector.32" = type { %"class.std::__1::__vector_base.33" }
%"class.std::__1::__vector_base.33" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"class.sh::TIntermNode"** }
%"class.sh::(anonymous namespace)::OutputSPIRVTraverser" = type { %"class.sh::TIntermTraverser", %"class.sh::TCompiler"*, i64, %"class.sh::SPIRVBuilder" }
%"class.sh::TIntermTraverser" = type { i32 (...)**, i8, i8, i8, i32, i32, i8, %"class.std::__1::vector.135", %"class.sh::TSymbolTable"*, %"class.std::__1::vector.142", %"class.std::__1::vector.149", %"class.sh::TVector.31", %"class.std::__1::vector.156" }
%"class.std::__1::vector.135" = type { %"class.std::__1::__vector_base.136" }
%"class.std::__1::__vector_base.136" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"class.std::__1::__compressed_pair.137" }
%"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry" = type { %"class.sh::TIntermAggregateBase"*, %"class.sh::TIntermNode"*, %"class.sh::TVector.31" }
%"class.std::__1::__compressed_pair.137" = type { %"struct.std::__1::__compressed_pair_elem.138" }
%"struct.std::__1::__compressed_pair_elem.138" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* }
%"class.std::__1::vector.142" = type { %"class.std::__1::__vector_base.143" }
%"class.std::__1::__vector_base.143" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"class.std::__1::__compressed_pair.144" }
%"struct.sh::TIntermTraverser::NodeInsertMultipleEntry" = type { %"class.sh::TIntermBlock"*, i64, %"class.sh::TVector.31", %"class.sh::TVector.31" }
%"class.std::__1::__compressed_pair.144" = type { %"struct.std::__1::__compressed_pair_elem.145" }
%"struct.std::__1::__compressed_pair_elem.145" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"* }
%"class.std::__1::vector.149" = type { %"class.std::__1::__vector_base.150" }
%"class.std::__1::__vector_base.150" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"class.std::__1::__compressed_pair.151" }
%"struct.sh::TIntermTraverser::NodeUpdateEntry" = type <{ %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.151" = type { %"struct.std::__1::__compressed_pair_elem.152" }
%"struct.std::__1::__compressed_pair_elem.152" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"* }
%"class.std::__1::vector.156" = type { %"class.std::__1::__vector_base.157" }
%"class.std::__1::__vector_base.157" = type { %"struct.sh::TIntermTraverser::ParentBlock"*, %"struct.sh::TIntermTraverser::ParentBlock"*, %"class.std::__1::__compressed_pair.158" }
%"struct.sh::TIntermTraverser::ParentBlock" = type { %"class.sh::TIntermBlock"*, i64 }
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.159" }
%"struct.std::__1::__compressed_pair_elem.159" = type { %"struct.sh::TIntermTraverser::ParentBlock"* }
%"class.sh::SPIRVBuilder" = type <{ i8, [7 x i8], %"class.std::__1::set", %"class.std::__1::set.172", %"class.angle::FastVector", %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32", %"class.absl::flat_hash_map", %"class.std::__1::vector.117", %"class.std::__1::vector.117", %"class.std::__1::vector.117", %"class.std::__1::vector.117", %"class.std::__1::vector.117", %"class.std::__1::vector.117", %"class.std::__1::vector.117", [2 x %"class.angle::spirv::BoxedUint32"], %"class.absl::flat_hash_map.190", %"class.absl::flat_hash_map.190", %"class.absl::flat_hash_map.190", %"class.absl::flat_hash_map.203", %"class.absl::flat_hash_map.216", %"class.absl::flat_hash_map.203", i64 (i8*, i64)*, %"class.std::__1::map.124"*, i32, i32, i32, [4 x i8] }>
%"class.std::__1::set" = type { %"class.std::__1::__tree.163" }
%"class.std::__1::__tree.163" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.164", %"class.std::__1::__compressed_pair.168" }
%"class.std::__1::__compressed_pair.164" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.168" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"class.std::__1::set.172" = type { %"class.std::__1::__tree.173" }
%"class.std::__1::__tree.173" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.174", %"class.std::__1::__compressed_pair.178" }
%"class.std::__1::__compressed_pair.174" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.178" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"class.angle::FastVector" = type { %"struct.std::__1::array.182", %"class.angle::spirv::BoxedUint32"*, i64, i64 }
%"struct.std::__1::array.182" = type { [8 x %"class.angle::spirv::BoxedUint32"] }
%"class.angle::spirv::BoxedUint32" = type { %"struct.angle::spirv::IdRefHelper" }
%"struct.angle::spirv::IdRefHelper" = type { i32 }
%"class.absl::flat_hash_map" = type { %"class.absl::container_internal::raw_hash_map" }
%"class.absl::container_internal::raw_hash_map" = type { %"class.absl::container_internal::raw_hash_set" }
%"class.absl::container_internal::raw_hash_set" = type { i8*, %"union.absl::container_internal::map_slot_type"*, i64, i64, %"class.absl::container_internal::CompressedTuple" }
%"union.absl::container_internal::map_slot_type" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { %"struct.sh::SpirvType", %"struct.sh::SpirvTypeData", [4 x i8] }
%"struct.sh::SpirvType" = type <{ %"class.sh::TFieldListCollection"*, i32, i32, i8, i8, [2 x i8], i32, %"class.sh::TSpan", i32, i8, [3 x i8] }>
%"struct.sh::SpirvTypeData" = type { %"class.angle::spirv::BoxedUint32", i32, i32 }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage" = type { i64 }
%"class.absl::flat_hash_map.190" = type { %"class.absl::container_internal::raw_hash_map.191" }
%"class.absl::container_internal::raw_hash_map.191" = type { %"class.absl::container_internal::raw_hash_set.192" }
%"class.absl::container_internal::raw_hash_set.192" = type { i8*, %"union.absl::container_internal::map_slot_type.193"*, i64, i64, %"class.absl::container_internal::CompressedTuple.194" }
%"union.absl::container_internal::map_slot_type.193" = type { %"struct.std::__1::pair.231" }
%"struct.std::__1::pair.231" = type { i32, %"class.angle::spirv::BoxedUint32" }
%"class.absl::container_internal::CompressedTuple.194" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.195" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.195" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.absl::flat_hash_map.216" = type { %"class.absl::container_internal::raw_hash_map.217" }
%"class.absl::container_internal::raw_hash_map.217" = type { %"class.absl::container_internal::raw_hash_set.218" }
%"class.absl::container_internal::raw_hash_set.218" = type { i8*, %"union.absl::container_internal::map_slot_type.219"*, i64, i64, %"class.absl::container_internal::CompressedTuple.220" }
%"union.absl::container_internal::map_slot_type.219" = type { %"struct.std::__1::pair.237" }
%"struct.std::__1::pair.237" = type { %"struct.sh::SpirvIdAndStorageClass", %"class.angle::spirv::BoxedUint32" }
%"struct.sh::SpirvIdAndStorageClass" = type { %"class.angle::spirv::BoxedUint32", i32 }
%"class.absl::container_internal::CompressedTuple.220" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.221" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.221" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.absl::flat_hash_map.203" = type { %"class.absl::container_internal::raw_hash_map.204" }
%"class.absl::container_internal::raw_hash_map.204" = type { %"class.absl::container_internal::raw_hash_set.205" }
%"class.absl::container_internal::raw_hash_set.205" = type { i8*, %"union.absl::container_internal::map_slot_type.206"*, i64, i64, %"class.absl::container_internal::CompressedTuple.207" }
%"union.absl::container_internal::map_slot_type.206" = type { %"struct.sh::SpirvIdAndIdList", [8 x i8] }
%"struct.sh::SpirvIdAndIdList" = type { %"class.angle::spirv::BoxedUint32", %"class.angle::FastVector" }
%"class.absl::container_internal::CompressedTuple.207" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.208" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.208" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TIntermSwizzle" = type <{ %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TVector.239", i8, [7 x i8] }>
%"class.sh::TVector.239" = type { %"class.std::__1::vector.240" }
%"class.std::__1::vector.240" = type { %"class.std::__1::__vector_base.241" }
%"class.std::__1::__vector_base.241" = type { i32*, i32*, %"class.std::__1::__compressed_pair.242" }
%"class.std::__1::__compressed_pair.242" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.sh::TIntermUnary" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermTyped"*, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermTernary" = type { %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermIfElse" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermSwitch" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermCase" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"* }
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.31", i8, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermGlobalQualifierDeclaration" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermSymbol"*, i8, [7 x i8] }>
%"class.sh::TIntermDeclaration" = type { %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.31" }
%"class.angle::FastVector.246" = type { %"struct.std::__1::array.247", %"class.angle::spirv::BoxedUint32.248"*, i64, i64 }
%"struct.std::__1::array.247" = type { [8 x %"class.angle::spirv::BoxedUint32.248"] }
%"class.angle::spirv::BoxedUint32.248" = type { %"struct.angle::spirv::LiteralIntegerHelper" }
%"struct.angle::spirv::LiteralIntegerHelper" = type { i32 }
%"class.sh::TIntermLoop" = type { %"class.sh::TIntermNode", i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermBranch" = type { %"class.sh::TIntermNode", i8, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermPreprocessorDirective" = type { %"class.sh::TIntermNode", i32, %"class.sh::ImmutableString" }
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", i32 }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>
%"class.std::__1::__tree_node.260" = type { %"class.std::__1::__tree_node_base.base", i32 }

$_ZN2sh10IsShaderInENS_10TQualifierE = comdat any

$_ZN2sh11IsShaderOutENS_10TQualifierE = comdat any

$_ZN2sh15IsShaderIoBlockENS_10TQualifierE = comdat any

$_ZN2sh12SPIRVBuilderD2Ev = comdat any

$_ZNSt3__16__treeIN3spv13ExecutionModeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE = comdat any

$_ZNSt3__16__treeIN3spv10CapabilityENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE = comdat any

$_ZZN4absl18container_internal10EmptyGroupEvE11empty_group = comdat any

@_ZTVN2sh12_GLOBAL__N_120OutputSPIRVTraverserE = internal unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"*)* @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverserD2Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"*)* @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverserD0Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE to i8*)] }, align 8
@_ZZN4absl18container_internal10EmptyGroupEvE11empty_group = linkonce_odr hidden constant [16 x i8] c"\FF\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80", comdat, align 16
@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh11OutputSPIRVEPNS_9TCompilerEPNS_12TIntermBlockEm(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, i64) local_unnamed_addr #0 {
  %4 = alloca %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", align 8
  %5 = alloca %"class.std::__1::vector.117", align 16
  %6 = bitcast %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 776, i8* nonnull %6) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 776, i1 false)
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 0
  %8 = getelementptr inbounds %"class.sh::TCompiler", %"class.sh::TCompiler"* %0, i64 0, i32 21
  call void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"* nonnull %7, i1 zeroext true, i1 zeroext true, i1 zeroext true, %"class.sh::TSymbolTable"* %8) #9
  %9 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_120OutputSPIRVTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 1
  store %"class.sh::TCompiler"* %0, %"class.sh::TCompiler"** %10, align 8
  %11 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 2
  store i64 %2, i64* %11, align 8
  %12 = getelementptr inbounds %"class.sh::TCompiler", %"class.sh::TCompiler"* %0, i64 0, i32 14
  %13 = load i32, i32* %12, align 4
  %14 = call zeroext i8 @_ZN2gl10FromGLenumINS_10ShaderTypeEEET_j(i32 %13) #9
  %15 = getelementptr inbounds %"class.sh::TCompiler", %"class.sh::TCompiler"* %0, i64 0, i32 19, i32 58
  %16 = bitcast i64 (i8*, i64)** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.sh::TCompiler", %"class.sh::TCompiler"* %0, i64 0, i32 43
  %19 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 3, i32 0
  store i8 %14, i8* %19, align 8
  %20 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 3, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0
  %21 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 3, i32 2, i32 0, i32 1, i32 0, i32 0
  %22 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 3, i32 2, i32 0, i32 0
  %23 = bitcast %"class.std::__1::__tree_node_base"** %20 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 16, i1 false) #9
  store %"class.std::__1::__tree_end_node"* %21, %"class.std::__1::__tree_end_node"** %22, align 8
  %24 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 3, i32 3, i32 0, i32 1, i32 0, i32 0, i32 0
  %25 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 3, i32 3, i32 0, i32 1, i32 0, i32 0
  %26 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 3, i32 3, i32 0, i32 0
  %27 = bitcast %"class.std::__1::__tree_node_base"** %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %27, i8 0, i64 16, i1 false) #9
  store %"class.std::__1::__tree_end_node"* %25, %"class.std::__1::__tree_end_node"** %26, align 8
  %28 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 3, i32 4
  %29 = bitcast %"class.angle::FastVector"* %28 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 32, i1 false) #9
  %30 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 3, i32 4, i32 1
  %31 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %28, i64 0, i32 0, i32 0, i64 0
  store %"class.angle::spirv::BoxedUint32"* %31, %"class.angle::spirv::BoxedUint32"** %30, align 8
  %32 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 3, i32 4, i32 2
  %33 = bitcast i64* %32 to <2 x i64>*
  store <2 x i64> <i64 0, i64 8>, <2 x i64>* %33, align 8
  %34 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 3, i32 5, i32 0, i32 0
  store i32 0, i32* %34, align 8
  %35 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 3, i32 6, i32 0, i32 0
  store i32 1, i32* %35, align 4
  %36 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 3, i32 7, i32 0, i32 0, i32 0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %36, align 8
  %37 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 3, i32 7, i32 0, i32 0, i32 1
  %38 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 3, i32 16, i32 0, i32 0, i32 0
  %39 = bitcast %"union.absl::container_internal::map_slot_type"** %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %39, i8 0, i64 208, i1 false) #9
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %38, align 8
  %40 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 3, i32 16, i32 0, i32 0, i32 1
  %41 = bitcast %"union.absl::container_internal::map_slot_type.193"** %40 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %41, i8 0, i64 32, i1 false) #9
  %42 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 3, i32 17, i32 0, i32 0, i32 0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %42, align 8
  %43 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 3, i32 17, i32 0, i32 0, i32 1
  %44 = bitcast %"union.absl::container_internal::map_slot_type.193"** %43 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 32, i1 false) #9
  %45 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 3, i32 18, i32 0, i32 0, i32 0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %45, align 8
  %46 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 3, i32 18, i32 0, i32 0, i32 1
  %47 = bitcast %"union.absl::container_internal::map_slot_type.193"** %46 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %47, i8 0, i64 32, i1 false) #9
  %48 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 3, i32 19, i32 0, i32 0, i32 0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %48, align 8
  %49 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 3, i32 19, i32 0, i32 0, i32 1
  %50 = bitcast %"union.absl::container_internal::map_slot_type.206"** %49 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %50, i8 0, i64 32, i1 false) #9
  %51 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 3, i32 20, i32 0, i32 0, i32 0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %51, align 8
  %52 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 3, i32 20, i32 0, i32 0, i32 1
  %53 = bitcast %"union.absl::container_internal::map_slot_type.219"** %52 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %53, i8 0, i64 32, i1 false) #9
  %54 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 3, i32 21, i32 0, i32 0, i32 0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %54, align 8
  %55 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 3, i32 21, i32 0, i32 0, i32 1
  %56 = bitcast %"union.absl::container_internal::map_slot_type.206"** %55 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %56, i8 0, i64 32, i1 false) #9
  %57 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 3, i32 22
  %58 = bitcast i64 (i8*, i64)** %57 to i64*
  store i64 %17, i64* %58, align 8
  %59 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 3, i32 23
  store %"class.std::__1::map.124"* %18, %"class.std::__1::map.124"** %59, align 8
  %60 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 3, i32 24
  store i32 0, i32* %60, align 8
  %61 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 3, i32 25
  store i32 0, i32* %61, align 4
  %62 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 3, i32 26
  store i32 0, i32* %62, align 8
  call void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"* %1, %"class.sh::TIntermTraverser"* nonnull %7) #9
  %63 = bitcast %"class.std::__1::vector.117"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %63) #9
  %64 = getelementptr inbounds %"class.std::__1::vector.117", %"class.std::__1::vector.117"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  %65 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %4, i64 0, i32 3
  %66 = bitcast %"class.std::__1::vector.117"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %66, i8 -86, i64 24, i1 false)
  call void @_ZN2sh12SPIRVBuilder8getSpirvEv(%"class.std::__1::vector.117"* nonnull sret %5, %"class.sh::SPIRVBuilder"* %65) #9
  %67 = getelementptr inbounds %"class.sh::TCompiler", %"class.sh::TCompiler"* %0, i64 0, i32 26, i32 2, i32 1
  %68 = getelementptr inbounds %"class.std::__1::vector.117", %"class.std::__1::vector.117"* %67, i64 0, i32 0, i32 0
  %69 = load i32*, i32** %68, align 8
  %70 = icmp eq i32* %69, null
  br i1 %70, label %77, label %71

71:                                               ; preds = %3
  %72 = ptrtoint i32* %69 to i64
  %73 = getelementptr inbounds %"class.sh::TCompiler", %"class.sh::TCompiler"* %0, i64 0, i32 26, i32 2, i32 1, i32 0, i32 1
  %74 = bitcast i32** %73 to i64*
  store i64 %72, i64* %74, align 8
  %75 = bitcast i32* %69 to i8*
  call void @_ZdlPv(i8* %75) #10
  %76 = bitcast %"class.std::__1::vector.117"* %67 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %76, i8 0, i64 24, i1 false) #9
  br label %77

77:                                               ; preds = %71, %3
  %78 = bitcast %"class.std::__1::vector.117"* %5 to <2 x i64>*
  %79 = load <2 x i64>, <2 x i64>* %78, align 16
  %80 = bitcast %"class.std::__1::vector.117"* %67 to <2 x i64>*
  store <2 x i64> %79, <2 x i64>* %80, align 8
  %81 = bitcast i32** %64 to i64*
  %82 = load i64, i64* %81, align 16
  %83 = getelementptr inbounds %"class.sh::TCompiler", %"class.sh::TCompiler"* %0, i64 0, i32 26, i32 2, i32 1, i32 0, i32 2, i32 0, i32 0
  %84 = bitcast i32** %83 to i64*
  store i64 %82, i64* %84, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %63) #9
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_120OutputSPIRVTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  call void @_ZN2sh12SPIRVBuilderD2Ev(%"class.sh::SPIRVBuilder"* %65) #9
  call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* nonnull %7) #9
  call void @llvm.lifetime.end.p0i8(i64 776, i8* nonnull %6) #9
  ret i1 true
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"*, %"class.sh::TIntermTraverser"*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverserD2Ev(%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"*) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_120OutputSPIRVTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %0, i64 0, i32 3
  tail call void @_ZN2sh12SPIRVBuilderD2Ev(%"class.sh::SPIRVBuilder"* %3) #9
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %4) #9
  ret void
}

declare void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"*, i1 zeroext, i1 zeroext, i1 zeroext, %"class.sh::TSymbolTable"*) unnamed_addr #2

declare zeroext i8 @_ZN2gl10FromGLenumINS_10ShaderTypeEEET_j(i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverserD0Ev(%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"*) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_120OutputSPIRVTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %0, i64 0, i32 3
  tail call void @_ZN2sh12SPIRVBuilderD2Ev(%"class.sh::SPIRVBuilder"* %3) #9
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %4) #9
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* nocapture, %"class.sh::TIntermSymbol"* nocapture) unnamed_addr #4 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE(%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* nocapture, %"class.sh::TIntermConstantUnion"* nocapture) unnamed_addr #4 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE(%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* nocapture readnone, i32, %"class.sh::TIntermSwizzle"* nocapture readnone) unnamed_addr #4 align 2 {
  ret i1 true
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE(%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* nocapture readnone, i32, %"class.sh::TIntermBinary"* nocapture readnone) unnamed_addr #4 align 2 {
  ret i1 true
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE(%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* nocapture readnone, i32, %"class.sh::TIntermUnary"* nocapture readnone) unnamed_addr #4 align 2 {
  ret i1 true
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE(%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* nocapture readnone, i32, %"class.sh::TIntermTernary"* nocapture readnone) unnamed_addr #4 align 2 {
  ret i1 true
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE(%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* nocapture readnone, i32, %"class.sh::TIntermIfElse"* nocapture readnone) unnamed_addr #4 align 2 {
  ret i1 true
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE(%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* nocapture readnone, i32, %"class.sh::TIntermSwitch"* nocapture readnone) unnamed_addr #4 align 2 {
  ret i1 true
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE(%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* nocapture readnone, i32, %"class.sh::TIntermCase"* nocapture readnone) unnamed_addr #4 align 2 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE(%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* nocapture, %"class.sh::TIntermFunctionPrototype"* nocapture) unnamed_addr #4 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE(%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"* nocapture readonly) unnamed_addr #0 align 2 {
  %4 = alloca %"class.angle::FastVector", align 8
  switch i32 %1, label %127 [
    i32 0, label %5
    i32 2, label %113
  ]

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition", %"class.sh::TIntermFunctionDefinition"* %2, i64 0, i32 1
  %7 = load %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermFunctionPrototype"** %6, align 8
  %8 = getelementptr inbounds %"class.sh::TIntermFunctionPrototype", %"class.sh::TIntermFunctionPrototype"* %7, i64 0, i32 1
  %9 = load %"class.sh::TFunction"*, %"class.sh::TFunction"** %8, align 8
  %10 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %0, i64 0, i32 3
  %11 = getelementptr inbounds %"class.sh::TFunction", %"class.sh::TFunction"* %9, i64 0, i32 5
  %12 = load %"class.sh::TType"*, %"class.sh::TType"** %11, align 8
  %13 = tail call dereferenceable(12) %"struct.sh::SpirvTypeData"* @_ZN2sh12SPIRVBuilder11getTypeDataERKNS_5TTypeENS_19TLayoutBlockStorageE(%"class.sh::SPIRVBuilder"* %10, %"class.sh::TType"* dereferenceable(184) %12, i32 0) #9
  %14 = getelementptr inbounds %"struct.sh::SpirvTypeData", %"struct.sh::SpirvTypeData"* %13, i64 0, i32 0, i32 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = bitcast %"class.angle::FastVector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %16) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 0, i64 32, i1 false) #9
  %17 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %4, i64 0, i32 1
  %18 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %4, i64 0, i32 0, i32 0, i64 0
  store %"class.angle::spirv::BoxedUint32"* %18, %"class.angle::spirv::BoxedUint32"** %17, align 8
  %19 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %4, i64 0, i32 2
  %20 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %4, i64 0, i32 3
  %21 = bitcast i64* %19 to <2 x i64>*
  store <2 x i64> <i64 0, i64 8>, <2 x i64>* %21, align 8
  %22 = getelementptr inbounds %"class.sh::TFunction", %"class.sh::TFunction"* %9, i64 0, i32 4
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %28, label %25

25:                                               ; preds = %5
  %26 = getelementptr inbounds %"class.sh::TFunction", %"class.sh::TFunction"* %9, i64 0, i32 3
  %27 = bitcast %"class.angle::spirv::BoxedUint32"** %17 to i8**
  br label %34

28:                                               ; preds = %83, %5
  %29 = call i32 @_ZN2sh12SPIRVBuilder17getFunctionTypeIdEN5angle5spirv11BoxedUint32INS2_11IdRefHelperEEERKNS1_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(%"class.sh::SPIRVBuilder"* %10, i32 %15, %"class.angle::FastVector"* nonnull dereferenceable(56) %4) #9
  %30 = call i32 @_ZN2sh12SPIRVBuilder8getNewIdEv(%"class.sh::SPIRVBuilder"* %10) #9
  %31 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %0, i64 0, i32 3, i32 14
  call void @_ZN5angle5spirv13WriteFunctionEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEES9_N3spv19FunctionControlMaskES9_(%"class.std::__1::vector.117"* %31, i32 %15, i32 %30, i32 0, i32 %29) #9
  %32 = load i64, i64* %22, align 8
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %93, label %95

34:                                               ; preds = %25, %83
  %35 = phi i64 [ 0, %25 ], [ %90, %83 ]
  %36 = load %"class.sh::TVariable"**, %"class.sh::TVariable"*** %26, align 8
  %37 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %36, i64 %35
  %38 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %37, align 8
  %39 = getelementptr inbounds %"class.sh::TVariable", %"class.sh::TVariable"* %38, i64 0, i32 1
  %40 = load %"class.sh::TType"*, %"class.sh::TType"** %39, align 8
  %41 = call dereferenceable(12) %"struct.sh::SpirvTypeData"* @_ZN2sh12SPIRVBuilder11getTypeDataERKNS_5TTypeENS_19TLayoutBlockStorageE(%"class.sh::SPIRVBuilder"* %10, %"class.sh::TType"* dereferenceable(184) %40, i32 0) #9
  %42 = load i64, i64* %19, align 8
  %43 = load i64, i64* %20, align 8
  %44 = icmp eq i64 %42, %43
  br i1 %44, label %45, label %83

45:                                               ; preds = %34
  %46 = add i64 %42, 1
  %47 = icmp eq i64 %42, -1
  br i1 %47, label %83, label %48

48:                                               ; preds = %45
  %49 = icmp ugt i64 %42, 8
  %50 = select i1 %49, i64 %42, i64 8
  br label %51

51:                                               ; preds = %51, %48
  %52 = phi i64 [ %50, %48 ], [ %54, %51 ]
  %53 = icmp ult i64 %52, %46
  %54 = shl i64 %52, 1
  br i1 %53, label %51, label %55

55:                                               ; preds = %51
  %56 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %52, i64 4) #9
  %57 = extractvalue { i64, i1 } %56, 1
  %58 = extractvalue { i64, i1 } %56, 0
  %59 = select i1 %57, i64 -1, i64 %58
  %60 = call i8* @_Znam(i64 %59) #10
  %61 = icmp eq i64 %52, 0
  br i1 %61, label %64, label %62

62:                                               ; preds = %55
  %63 = shl nsw i64 %52, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %60, i8 0, i64 %63, i1 false) #9
  br label %64

64:                                               ; preds = %62, %55
  %65 = icmp eq i64 %42, 0
  br i1 %65, label %66, label %69

66:                                               ; preds = %64
  %67 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %17, align 8
  %68 = bitcast %"class.angle::spirv::BoxedUint32"* %67 to i8*
  br label %73

69:                                               ; preds = %64
  %70 = shl nuw i64 %42, 2
  %71 = load i8*, i8** %27, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %60, i8* align 4 %71, i64 %70, i1 false) #9
  %72 = bitcast i8* %71 to %"class.angle::spirv::BoxedUint32"*
  br label %73

73:                                               ; preds = %69, %66
  %74 = phi i8* [ %68, %66 ], [ %71, %69 ]
  %75 = phi %"class.angle::spirv::BoxedUint32"* [ %67, %66 ], [ %72, %69 ]
  %76 = icmp eq %"class.angle::spirv::BoxedUint32"* %75, %18
  %77 = icmp eq %"class.angle::spirv::BoxedUint32"* %75, null
  %78 = or i1 %76, %77
  br i1 %78, label %81, label %79

79:                                               ; preds = %73
  call void @_ZdaPv(i8* %74) #10
  %80 = load i64, i64* %19, align 8
  br label %81

81:                                               ; preds = %79, %73
  %82 = phi i64 [ %80, %79 ], [ %42, %73 ]
  store i8* %60, i8** %27, align 8
  store i64 %52, i64* %20, align 8
  br label %83

83:                                               ; preds = %34, %45, %81
  %84 = phi i64 [ %82, %81 ], [ -1, %45 ], [ %42, %34 ]
  %85 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %17, align 8
  %86 = add i64 %84, 1
  store i64 %86, i64* %19, align 8
  %87 = getelementptr inbounds %"struct.sh::SpirvTypeData", %"struct.sh::SpirvTypeData"* %41, i64 0, i32 0, i32 0, i32 0
  %88 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %85, i64 %84, i32 0, i32 0
  %89 = load i32, i32* %87, align 4
  store i32 %89, i32* %88, align 4
  %90 = add nuw i64 %35, 1
  %91 = load i64, i64* %22, align 8
  %92 = icmp ult i64 %90, %91
  br i1 %92, label %34, label %28

93:                                               ; preds = %95, %28
  %94 = call zeroext i1 @_ZNK2sh9TFunction6isMainEv(%"class.sh::TFunction"* %9) #9
  br i1 %94, label %104, label %105

95:                                               ; preds = %28, %95
  %96 = phi i64 [ %101, %95 ], [ 0, %28 ]
  %97 = call i32 @_ZN2sh12SPIRVBuilder8getNewIdEv(%"class.sh::SPIRVBuilder"* %10) #9
  %98 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %17, align 8
  %99 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %98, i64 %96, i32 0, i32 0
  %100 = load i32, i32* %99, align 4
  call void @_ZN5angle5spirv22WriteFunctionParameterEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEES9_(%"class.std::__1::vector.117"* %31, i32 %100, i32 %97) #9
  %101 = add nuw i64 %96, 1
  %102 = load i64, i64* %22, align 8
  %103 = icmp ult i64 %101, %102
  br i1 %103, label %95, label %93

104:                                              ; preds = %93
  call void @_ZN2sh12SPIRVBuilder15setEntryPointIdEN5angle5spirv11BoxedUint32INS2_11IdRefHelperEEE(%"class.sh::SPIRVBuilder"* %10, i32 %30) #9
  br label %105

105:                                              ; preds = %104, %93
  store i64 0, i64* %19, align 8
  %106 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %17, align 8
  %107 = icmp eq %"class.angle::spirv::BoxedUint32"* %106, %18
  %108 = icmp eq %"class.angle::spirv::BoxedUint32"* %106, null
  %109 = or i1 %107, %108
  br i1 %109, label %112, label %110

110:                                              ; preds = %105
  %111 = bitcast %"class.angle::spirv::BoxedUint32"* %106 to i8*
  call void @_ZdaPv(i8* %111) #10
  br label %112

112:                                              ; preds = %105, %110
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %16) #9
  br label %127

113:                                              ; preds = %3
  %114 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition", %"class.sh::TIntermFunctionDefinition"* %2, i64 0, i32 1
  %115 = load %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermFunctionPrototype"** %114, align 8
  %116 = getelementptr inbounds %"class.sh::TIntermFunctionPrototype", %"class.sh::TIntermFunctionPrototype"* %115, i64 0, i32 1
  %117 = load %"class.sh::TFunction"*, %"class.sh::TFunction"** %116, align 8
  %118 = getelementptr inbounds %"class.sh::TFunction", %"class.sh::TFunction"* %117, i64 0, i32 5
  %119 = load %"class.sh::TType"*, %"class.sh::TType"** %118, align 8
  %120 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %119, i64 0, i32 0
  %121 = load i32, i32* %120, align 8
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %123, label %125

123:                                              ; preds = %113
  %124 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %0, i64 0, i32 3, i32 14
  tail call void @_ZN5angle5spirv11WriteReturnEPNSt3__16vectorIjNS1_9allocatorIjEEEE(%"class.std::__1::vector.117"* %124) #9
  br label %125

125:                                              ; preds = %123, %113
  %126 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %0, i64 0, i32 3, i32 14
  tail call void @_ZN5angle5spirv16WriteFunctionEndEPNSt3__16vectorIjNS1_9allocatorIjEEEE(%"class.std::__1::vector.117"* %126) #9
  br label %127

127:                                              ; preds = %125, %3, %112
  ret i1 true
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE(%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* nocapture readnone, i32, %"class.sh::TIntermAggregate"* nocapture readnone) unnamed_addr #4 align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE(%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"*, i32, %"class.sh::TIntermBlock"* nocapture readnone) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %0, i64 0, i32 0, i32 11, i32 0
  %5 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %0, i64 0, i32 0, i32 11, i32 0, i32 0, i32 1
  %6 = bitcast %"class.sh::TIntermNode"*** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector.32"* %4 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = lshr exact i64 %10, 3
  %12 = trunc i64 %11 to i32
  %13 = icmp eq i32 %12, 1
  br i1 %13, label %20, label %14

14:                                               ; preds = %3
  %15 = icmp eq i32 %1, 0
  br i1 %15, label %16, label %20

16:                                               ; preds = %14
  %17 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %0, i64 0, i32 3
  %18 = tail call i32 @_ZN2sh12SPIRVBuilder8getNewIdEv(%"class.sh::SPIRVBuilder"* %17) #9
  %19 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %0, i64 0, i32 3, i32 14
  tail call void @_ZN5angle5spirv10WriteLabelEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEE(%"class.std::__1::vector.117"* %19, i32 %18) #9
  br label %20

20:                                               ; preds = %14, %16, %3
  %21 = phi i1 [ true, %3 ], [ false, %16 ], [ false, %14 ]
  ret i1 %21
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE(%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* nocapture readnone, i32, %"class.sh::TIntermGlobalQualifierDeclaration"* nocapture readnone) unnamed_addr #4 align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE(%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"*, i32, %"class.sh::TIntermDeclaration"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.angle::FastVector.246", align 8
  %5 = alloca %"class.angle::FastVector.246", align 8
  %6 = icmp eq i32 %1, 0
  br i1 %6, label %7, label %137

7:                                                ; preds = %3
  %8 = bitcast %"class.sh::TIntermDeclaration"* %2 to %"class.sh::TVector.31"* (%"class.sh::TIntermDeclaration"*)***
  %9 = load %"class.sh::TVector.31"* (%"class.sh::TIntermDeclaration"*)**, %"class.sh::TVector.31"* (%"class.sh::TIntermDeclaration"*)*** %8, align 8
  %10 = getelementptr inbounds %"class.sh::TVector.31"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermDeclaration"*)** %9, i64 27
  %11 = load %"class.sh::TVector.31"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermDeclaration"*)** %10, align 8
  %12 = tail call %"class.sh::TVector.31"* %11(%"class.sh::TIntermDeclaration"* %2) #9
  %13 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %12, i64 0, i32 0, i32 0, i32 0
  %14 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %13, align 8
  %15 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %14, align 8
  %16 = bitcast %"class.sh::TIntermNode"* %15 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %17 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %16, align 8
  %18 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %17, i64 4
  %19 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %18, align 8
  %20 = tail call %"class.sh::TIntermTyped"* %19(%"class.sh::TIntermNode"* %15) #9
  %21 = bitcast %"class.sh::TIntermTyped"* %20 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %22 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %21, align 8
  %23 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %22, i64 31
  %24 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %23, align 8
  %25 = tail call dereferenceable(184) %"class.sh::TType"* %24(%"class.sh::TIntermTyped"* %20) #9
  %26 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %20, i64 0, i32 0
  %27 = bitcast %"class.sh::TIntermTyped"* %20 to %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)***
  %28 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*** %27, align 8
  %29 = getelementptr inbounds %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %28, i64 19
  %30 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %29, align 8
  %31 = tail call %"class.sh::TIntermSymbol"* %30(%"class.sh::TIntermNode"* %26) #9
  %32 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %25, i64 0, i32 14
  %33 = load i8, i8* %32, align 8, !range !2
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %42, label %35

35:                                               ; preds = %7
  %36 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %31, i64 0, i32 1
  %37 = bitcast %"class.sh::TVariable"** %36 to %"class.sh::TSymbol"**
  %38 = load %"class.sh::TSymbol"*, %"class.sh::TSymbol"** %37, align 8
  %39 = getelementptr inbounds %"class.sh::TSymbol", %"class.sh::TSymbol"* %38, i64 0, i32 2
  %40 = load i8, i8* %39, align 4
  %41 = icmp eq i8 %40, 3
  br i1 %41, label %137, label %42

42:                                               ; preds = %7, %35
  %43 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %0, i64 0, i32 3
  %44 = tail call dereferenceable(12) %"struct.sh::SpirvTypeData"* @_ZN2sh12SPIRVBuilder11getTypeDataERKNS_5TTypeENS_19TLayoutBlockStorageE(%"class.sh::SPIRVBuilder"* %43, %"class.sh::TType"* dereferenceable(184) %25, i32 0) #9
  %45 = getelementptr inbounds %"struct.sh::SpirvTypeData", %"struct.sh::SpirvTypeData"* %44, i64 0, i32 0, i32 0, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %25, i64 0, i32 0
  %48 = load i32, i32* %47, align 8
  %49 = add i32 %48, -8
  %50 = icmp ult i32 %49, 43
  %51 = add i32 %48, -51
  %52 = icmp ult i32 %51, 33
  %53 = or i1 %50, %52
  br i1 %53, label %70, label %54

54:                                               ; preds = %42
  %55 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %25, i64 0, i32 2
  %56 = load i32, i32* %55, align 8
  %57 = tail call zeroext i1 @_ZN2sh10IsShaderInENS_10TQualifierE(i32 %56) #9
  br i1 %57, label %70, label %58

58:                                               ; preds = %54
  %59 = load i32, i32* %55, align 8
  %60 = tail call zeroext i1 @_ZN2sh11IsShaderOutENS_10TQualifierE(i32 %59) #9
  br i1 %60, label %70, label %61

61:                                               ; preds = %58
  %62 = load i32, i32* %47, align 8
  %63 = icmp eq i32 %62, 91
  br i1 %63, label %70, label %64

64:                                               ; preds = %61
  %65 = load i32, i32* %55, align 8
  switch i32 %65, label %66 [
    i32 59, label %70
    i32 1, label %69
  ]

66:                                               ; preds = %64
  %67 = tail call i32 @_ZN2sh12SPIRVBuilder16getTypePointerIdEN5angle5spirv11BoxedUint32INS2_11IdRefHelperEEEN3spv12StorageClassE(%"class.sh::SPIRVBuilder"* %43, i32 %46, i32 7) #9
  %68 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %0, i64 0, i32 3, i32 14
  br label %74

69:                                               ; preds = %64
  br label %70

70:                                               ; preds = %64, %69, %42, %54, %58, %61
  %71 = phi i32 [ 4, %64 ], [ 2, %61 ], [ 3, %58 ], [ 1, %54 ], [ 0, %42 ], [ 6, %69 ]
  %72 = tail call i32 @_ZN2sh12SPIRVBuilder16getTypePointerIdEN5angle5spirv11BoxedUint32INS2_11IdRefHelperEEEN3spv12StorageClassE(%"class.sh::SPIRVBuilder"* %43, i32 %46, i32 %71) #9
  %73 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %0, i64 0, i32 3, i32 13
  br label %74

74:                                               ; preds = %70, %66
  %75 = phi i32 [ %67, %66 ], [ %72, %70 ]
  %76 = phi i32 [ 7, %66 ], [ %71, %70 ]
  %77 = phi %"class.std::__1::vector.117"* [ %68, %66 ], [ %73, %70 ]
  %78 = tail call i32 @_ZN2sh12SPIRVBuilder8getNewIdEv(%"class.sh::SPIRVBuilder"* %43) #9
  tail call void @_ZN5angle5spirv13WriteVariableEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEES9_N3spv12StorageClassEPKS9_(%"class.std::__1::vector.117"* %77, i32 %75, i32 %78, i32 %76, %"class.angle::spirv::BoxedUint32"* null) #9
  %79 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %25, i64 0, i32 2
  %80 = load i32, i32* %79, align 8
  %81 = tail call zeroext i1 @_ZN2sh10IsShaderInENS_10TQualifierE(i32 %80)
  br i1 %81, label %85, label %82

82:                                               ; preds = %74
  %83 = load i32, i32* %79, align 8
  %84 = tail call zeroext i1 @_ZN2sh11IsShaderOutENS_10TQualifierE(i32 %83)
  br i1 %84, label %85, label %108

85:                                               ; preds = %82, %74
  tail call void @_ZN2sh12SPIRVBuilder32addEntryPointInterfaceVariableIdEN5angle5spirv11BoxedUint32INS2_11IdRefHelperEEE(%"class.sh::SPIRVBuilder"* %43, i32 %78) #9
  %86 = load i32, i32* %79, align 8
  %87 = tail call zeroext i1 @_ZN2sh15IsShaderIoBlockENS_10TQualifierE(i32 %86)
  %88 = load i32, i32* %47, align 8
  %89 = icmp eq i32 %88, 91
  %90 = and i1 %87, %89
  br i1 %90, label %91, label %128

91:                                               ; preds = %85
  %92 = load i32, i32* %79, align 8
  switch i32 %92, label %94 [
    i32 74, label %93
    i32 84, label %93
  ]

93:                                               ; preds = %91, %91
  tail call void @_ZN2sh12SPIRVBuilder22writePerVertexBuiltInsERKNS_5TTypeEN5angle5spirv11BoxedUint32INS5_11IdRefHelperEEE(%"class.sh::SPIRVBuilder"* %43, %"class.sh::TType"* dereferenceable(184) %25, i32 %46) #9
  br label %94

94:                                               ; preds = %91, %93
  %95 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %0, i64 0, i32 3, i32 10
  %96 = bitcast %"class.angle::FastVector.246"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %96) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %96, i8 0, i64 32, i1 false) #9
  %97 = getelementptr inbounds %"class.angle::FastVector.246", %"class.angle::FastVector.246"* %4, i64 0, i32 1
  %98 = getelementptr inbounds %"class.angle::FastVector.246", %"class.angle::FastVector.246"* %4, i64 0, i32 0, i32 0, i64 0
  store %"class.angle::spirv::BoxedUint32.248"* %98, %"class.angle::spirv::BoxedUint32.248"** %97, align 8
  %99 = getelementptr inbounds %"class.angle::FastVector.246", %"class.angle::FastVector.246"* %4, i64 0, i32 2
  %100 = bitcast i64* %99 to <2 x i64>*
  store <2 x i64> <i64 0, i64 8>, <2 x i64>* %100, align 8
  call void @_ZN5angle5spirv13WriteDecorateEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEEN3spv10DecorationERKNS_10FastVectorINS7_INS0_20LiteralIntegerHelperEEELm8ENS1_5arrayISE_Lm8EEEEE(%"class.std::__1::vector.117"* %95, i32 %46, i32 2, %"class.angle::FastVector.246"* nonnull dereferenceable(56) %4) #9
  store i64 0, i64* %99, align 8
  %101 = load %"class.angle::spirv::BoxedUint32.248"*, %"class.angle::spirv::BoxedUint32.248"** %97, align 8
  %102 = icmp eq %"class.angle::spirv::BoxedUint32.248"* %101, %98
  %103 = icmp eq %"class.angle::spirv::BoxedUint32.248"* %101, null
  %104 = or i1 %102, %103
  br i1 %104, label %107, label %105

105:                                              ; preds = %94
  %106 = bitcast %"class.angle::spirv::BoxedUint32.248"* %101 to i8*
  call void @_ZdaPv(i8* %106) #10
  br label %107

107:                                              ; preds = %94, %105
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %96) #9
  br label %128

108:                                              ; preds = %82
  %109 = load i32, i32* %47, align 8
  %110 = icmp eq i32 %109, 91
  br i1 %110, label %111, label %128

111:                                              ; preds = %108
  %112 = load i32, i32* %79, align 8
  %113 = icmp eq i32 %112, 6
  %114 = select i1 %113, i32 2, i32 3
  %115 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %0, i64 0, i32 3, i32 10
  %116 = bitcast %"class.angle::FastVector.246"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %116) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %116, i8 0, i64 32, i1 false) #9
  %117 = getelementptr inbounds %"class.angle::FastVector.246", %"class.angle::FastVector.246"* %5, i64 0, i32 1
  %118 = getelementptr inbounds %"class.angle::FastVector.246", %"class.angle::FastVector.246"* %5, i64 0, i32 0, i32 0, i64 0
  store %"class.angle::spirv::BoxedUint32.248"* %118, %"class.angle::spirv::BoxedUint32.248"** %117, align 8
  %119 = getelementptr inbounds %"class.angle::FastVector.246", %"class.angle::FastVector.246"* %5, i64 0, i32 2
  %120 = bitcast i64* %119 to <2 x i64>*
  store <2 x i64> <i64 0, i64 8>, <2 x i64>* %120, align 8
  call void @_ZN5angle5spirv13WriteDecorateEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEEN3spv10DecorationERKNS_10FastVectorINS7_INS0_20LiteralIntegerHelperEEELm8ENS1_5arrayISE_Lm8EEEEE(%"class.std::__1::vector.117"* %115, i32 %46, i32 %114, %"class.angle::FastVector.246"* nonnull dereferenceable(56) %5) #9
  store i64 0, i64* %119, align 8
  %121 = load %"class.angle::spirv::BoxedUint32.248"*, %"class.angle::spirv::BoxedUint32.248"** %117, align 8
  %122 = icmp eq %"class.angle::spirv::BoxedUint32.248"* %121, %118
  %123 = icmp eq %"class.angle::spirv::BoxedUint32.248"* %121, null
  %124 = or i1 %122, %123
  br i1 %124, label %127, label %125

125:                                              ; preds = %111
  %126 = bitcast %"class.angle::spirv::BoxedUint32.248"* %121 to i8*
  call void @_ZdaPv(i8* %126) #10
  br label %127

127:                                              ; preds = %111, %125
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %116) #9
  br label %128

128:                                              ; preds = %108, %127, %85, %107
  call void @_ZN2sh12SPIRVBuilder33writeInterfaceVariableDecorationsERKNS_5TTypeEN5angle5spirv11BoxedUint32INS5_11IdRefHelperEEE(%"class.sh::SPIRVBuilder"* %43, %"class.sh::TType"* dereferenceable(184) %25, i32 %78) #9
  %129 = getelementptr inbounds %"class.sh::(anonymous namespace)::OutputSPIRVTraverser", %"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* %0, i64 0, i32 3, i32 9
  %130 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %31, i64 0, i32 1
  %131 = bitcast %"class.sh::TVariable"** %130 to %"class.sh::TSymbol"**
  %132 = load %"class.sh::TSymbol"*, %"class.sh::TSymbol"** %131, align 8
  %133 = call { i8*, i64 } @_ZN2sh12SPIRVBuilder8hashNameEPKNS_7TSymbolE(%"class.sh::SPIRVBuilder"* %43, %"class.sh::TSymbol"* %132) #9
  %134 = extractvalue { i8*, i64 } %133, 0
  %135 = icmp eq i8* %134, null
  %136 = select i1 %135, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i8* %134
  call void @_ZN5angle5spirv9WriteNameEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEEPKc(%"class.std::__1::vector.117"* %129, i32 %78, i8* %136) #9
  br label %137

137:                                              ; preds = %128, %35, %3
  %138 = phi i1 [ true, %3 ], [ false, %35 ], [ false, %128 ]
  ret i1 %138
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE(%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* nocapture readnone, i32, %"class.sh::TIntermLoop"* nocapture readnone) unnamed_addr #4 align 2 {
  ret i1 true
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE(%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* nocapture readnone, i32, %"class.sh::TIntermBranch"* nocapture readnone) unnamed_addr #4 align 2 {
  ret i1 true
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_120OutputSPIRVTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE(%"class.sh::(anonymous namespace)::OutputSPIRVTraverser"* nocapture, %"class.sh::TIntermPreprocessorDirective"* nocapture) unnamed_addr #4 align 2 {
  ret void
}

declare void @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*) unnamed_addr #2

declare dereferenceable(12) %"struct.sh::SpirvTypeData"* @_ZN2sh12SPIRVBuilder11getTypeDataERKNS_5TTypeENS_19TLayoutBlockStorageE(%"class.sh::SPIRVBuilder"*, %"class.sh::TType"* dereferenceable(184), i32) local_unnamed_addr #2

declare i32 @_ZN2sh12SPIRVBuilder17getFunctionTypeIdEN5angle5spirv11BoxedUint32INS2_11IdRefHelperEEERKNS1_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(%"class.sh::SPIRVBuilder"*, i32, %"class.angle::FastVector"* dereferenceable(56)) local_unnamed_addr #2

declare i32 @_ZN2sh12SPIRVBuilder8getNewIdEv(%"class.sh::SPIRVBuilder"*) local_unnamed_addr #2

declare void @_ZN5angle5spirv13WriteFunctionEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEES9_N3spv19FunctionControlMaskES9_(%"class.std::__1::vector.117"*, i32, i32, i32, i32) local_unnamed_addr #2

declare void @_ZN5angle5spirv22WriteFunctionParameterEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEES9_(%"class.std::__1::vector.117"*, i32, i32) local_unnamed_addr #2

declare zeroext i1 @_ZNK2sh9TFunction6isMainEv(%"class.sh::TFunction"*) local_unnamed_addr #2

declare void @_ZN2sh12SPIRVBuilder15setEntryPointIdEN5angle5spirv11BoxedUint32INS2_11IdRefHelperEEE(%"class.sh::SPIRVBuilder"*, i32) local_unnamed_addr #2

declare void @_ZN5angle5spirv11WriteReturnEPNSt3__16vectorIjNS1_9allocatorIjEEEE(%"class.std::__1::vector.117"*) local_unnamed_addr #2

declare void @_ZN5angle5spirv16WriteFunctionEndEPNSt3__16vectorIjNS1_9allocatorIjEEEE(%"class.std::__1::vector.117"*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN5angle5spirv10WriteLabelEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEE(%"class.std::__1::vector.117"*, i32) local_unnamed_addr #2

declare i32 @_ZN2sh12SPIRVBuilder16getTypePointerIdEN5angle5spirv11BoxedUint32INS2_11IdRefHelperEEEN3spv12StorageClassE(%"class.sh::SPIRVBuilder"*, i32, i32) local_unnamed_addr #2

declare void @_ZN5angle5spirv13WriteVariableEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEES9_N3spv12StorageClassEPKS9_(%"class.std::__1::vector.117"*, i32, i32, i32, %"class.angle::spirv::BoxedUint32"*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh10IsShaderInENS_10TQualifierE(i32) local_unnamed_addr #3 comdat {
  switch i32 %0, label %2 [
    i32 9, label %3
    i32 82, label %3
    i32 88, label %3
    i32 72, label %3
    i32 12, label %3
    i32 74, label %3
    i32 3, label %3
    i32 4, label %3
    i32 49, label %3
    i32 50, label %3
    i32 51, label %3
    i32 52, label %3
    i32 53, label %3
    i32 80, label %3
  ]

2:                                                ; preds = %1
  br label %3

3:                                                ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %2
  %4 = phi i1 [ false, %2 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ]
  ret i1 %4
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh11IsShaderOutENS_10TQualifierE(i32) local_unnamed_addr #3 comdat {
  switch i32 %0, label %2 [
    i32 11, label %3
    i32 83, label %3
    i32 89, label %3
    i32 73, label %3
    i32 10, label %3
    i32 84, label %3
    i32 5, label %3
    i32 44, label %3
    i32 45, label %3
    i32 46, label %3
    i32 47, label %3
    i32 48, label %3
    i32 81, label %3
    i32 13, label %3
  ]

2:                                                ; preds = %1
  br label %3

3:                                                ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %2
  %4 = phi i1 [ false, %2 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ]
  ret i1 %4
}

declare void @_ZN2sh12SPIRVBuilder32addEntryPointInterfaceVariableIdEN5angle5spirv11BoxedUint32INS2_11IdRefHelperEEE(%"class.sh::SPIRVBuilder"*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh15IsShaderIoBlockENS_10TQualifierE(i32) local_unnamed_addr #3 comdat {
  switch i32 %0, label %2 [
    i32 74, label %3
    i32 84, label %3
    i32 11, label %3
    i32 82, label %3
    i32 83, label %3
    i32 88, label %3
    i32 89, label %3
    i32 72, label %3
    i32 73, label %3
    i32 12, label %3
  ]

2:                                                ; preds = %1
  br label %3

3:                                                ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %2
  %4 = phi i1 [ false, %2 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ]
  ret i1 %4
}

declare void @_ZN2sh12SPIRVBuilder22writePerVertexBuiltInsERKNS_5TTypeEN5angle5spirv11BoxedUint32INS5_11IdRefHelperEEE(%"class.sh::SPIRVBuilder"*, %"class.sh::TType"* dereferenceable(184), i32) local_unnamed_addr #2

declare void @_ZN5angle5spirv13WriteDecorateEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEEN3spv10DecorationERKNS_10FastVectorINS7_INS0_20LiteralIntegerHelperEEELm8ENS1_5arrayISE_Lm8EEEEE(%"class.std::__1::vector.117"*, i32, i32, %"class.angle::FastVector.246"* dereferenceable(56)) local_unnamed_addr #2

declare void @_ZN2sh12SPIRVBuilder33writeInterfaceVariableDecorationsERKNS_5TTypeEN5angle5spirv11BoxedUint32INS5_11IdRefHelperEEE(%"class.sh::SPIRVBuilder"*, %"class.sh::TType"* dereferenceable(184), i32) local_unnamed_addr #2

declare void @_ZN5angle5spirv9WriteNameEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEEPKc(%"class.std::__1::vector.117"*, i32, i8*) local_unnamed_addr #2

declare { i8*, i64 } @_ZN2sh12SPIRVBuilder8hashNameEPKNS_7TSymbolE(%"class.sh::SPIRVBuilder"*, %"class.sh::TSymbol"*) local_unnamed_addr #2

declare void @_ZN2sh12SPIRVBuilder8getSpirvEv(%"class.std::__1::vector.117"* sret, %"class.sh::SPIRVBuilder"*) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh12SPIRVBuilderD2Ev(%"class.sh::SPIRVBuilder"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 21, i32 0, i32 0, i32 3
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %32, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 21, i32 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 21, i32 0, i32 0, i32 1
  br label %11

8:                                                ; preds = %28
  %9 = load i8*, i8** %6, align 8
  tail call void @_ZdlPv(i8* %9) #10
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %6, align 8
  %10 = bitcast %"union.absl::container_internal::map_slot_type.206"** %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 32, i1 false) #9
  br label %32

11:                                               ; preds = %28, %5
  %12 = phi i64 [ 0, %5 ], [ %29, %28 ]
  %13 = load i8*, i8** %6, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 %12
  %15 = load i8, i8* %14, align 1
  %16 = icmp sgt i8 %15, -1
  br i1 %16, label %17, label %28

17:                                               ; preds = %11
  %18 = load %"union.absl::container_internal::map_slot_type.206"*, %"union.absl::container_internal::map_slot_type.206"** %7, align 8
  %19 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.206", %"union.absl::container_internal::map_slot_type.206"* %18, i64 %12, i32 0, i32 1, i32 2
  store i64 0, i64* %19, align 8
  %20 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.206", %"union.absl::container_internal::map_slot_type.206"* %18, i64 %12, i32 0, i32 1, i32 1
  %21 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %20, align 8
  %22 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.206", %"union.absl::container_internal::map_slot_type.206"* %18, i64 %12, i32 0, i32 1, i32 0, i32 0, i64 0
  %23 = icmp eq %"class.angle::spirv::BoxedUint32"* %21, %22
  %24 = icmp eq %"class.angle::spirv::BoxedUint32"* %21, null
  %25 = or i1 %23, %24
  br i1 %25, label %28, label %26

26:                                               ; preds = %17
  %27 = bitcast %"class.angle::spirv::BoxedUint32"* %21 to i8*
  tail call void @_ZdaPv(i8* %27) #10
  br label %28

28:                                               ; preds = %26, %17, %11
  %29 = add i64 %12, 1
  %30 = load i64, i64* %2, align 8
  %31 = icmp eq i64 %29, %30
  br i1 %31, label %8, label %11

32:                                               ; preds = %1, %8
  %33 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 20, i32 0, i32 0, i32 3
  %34 = load i64, i64* %33, align 8
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %41, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 20, i32 0, i32 0, i32 1
  %38 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 20, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  tail call void @_ZdlPv(i8* %39) #10
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %38, align 8
  %40 = bitcast %"union.absl::container_internal::map_slot_type.219"** %37 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 0, i64 32, i1 false) #9
  br label %41

41:                                               ; preds = %32, %36
  %42 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 19, i32 0, i32 0, i32 3
  %43 = load i64, i64* %42, align 8
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %72, label %45

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 19, i32 0, i32 0, i32 0
  %47 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 19, i32 0, i32 0, i32 1
  br label %51

48:                                               ; preds = %68
  %49 = load i8*, i8** %46, align 8
  tail call void @_ZdlPv(i8* %49) #10
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %46, align 8
  %50 = bitcast %"union.absl::container_internal::map_slot_type.206"** %47 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %50, i8 0, i64 32, i1 false) #9
  br label %72

51:                                               ; preds = %68, %45
  %52 = phi i64 [ 0, %45 ], [ %69, %68 ]
  %53 = load i8*, i8** %46, align 8
  %54 = getelementptr inbounds i8, i8* %53, i64 %52
  %55 = load i8, i8* %54, align 1
  %56 = icmp sgt i8 %55, -1
  br i1 %56, label %57, label %68

57:                                               ; preds = %51
  %58 = load %"union.absl::container_internal::map_slot_type.206"*, %"union.absl::container_internal::map_slot_type.206"** %47, align 8
  %59 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.206", %"union.absl::container_internal::map_slot_type.206"* %58, i64 %52, i32 0, i32 1, i32 2
  store i64 0, i64* %59, align 8
  %60 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.206", %"union.absl::container_internal::map_slot_type.206"* %58, i64 %52, i32 0, i32 1, i32 1
  %61 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %60, align 8
  %62 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.206", %"union.absl::container_internal::map_slot_type.206"* %58, i64 %52, i32 0, i32 1, i32 0, i32 0, i64 0
  %63 = icmp eq %"class.angle::spirv::BoxedUint32"* %61, %62
  %64 = icmp eq %"class.angle::spirv::BoxedUint32"* %61, null
  %65 = or i1 %63, %64
  br i1 %65, label %68, label %66

66:                                               ; preds = %57
  %67 = bitcast %"class.angle::spirv::BoxedUint32"* %61 to i8*
  tail call void @_ZdaPv(i8* %67) #10
  br label %68

68:                                               ; preds = %66, %57, %51
  %69 = add i64 %52, 1
  %70 = load i64, i64* %42, align 8
  %71 = icmp eq i64 %69, %70
  br i1 %71, label %48, label %51

72:                                               ; preds = %41, %48
  %73 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 18, i32 0, i32 0, i32 3
  %74 = load i64, i64* %73, align 8
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %81, label %76

76:                                               ; preds = %72
  %77 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 18, i32 0, i32 0, i32 1
  %78 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 18, i32 0, i32 0, i32 0
  %79 = load i8*, i8** %78, align 8
  tail call void @_ZdlPv(i8* %79) #10
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %78, align 8
  %80 = bitcast %"union.absl::container_internal::map_slot_type.193"** %77 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %80, i8 0, i64 32, i1 false) #9
  br label %81

81:                                               ; preds = %72, %76
  %82 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 17, i32 0, i32 0, i32 3
  %83 = load i64, i64* %82, align 8
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %81
  %86 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 17, i32 0, i32 0, i32 1
  %87 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 17, i32 0, i32 0, i32 0
  %88 = load i8*, i8** %87, align 8
  tail call void @_ZdlPv(i8* %88) #10
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %87, align 8
  %89 = bitcast %"union.absl::container_internal::map_slot_type.193"** %86 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %89, i8 0, i64 32, i1 false) #9
  br label %90

90:                                               ; preds = %81, %85
  %91 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 16, i32 0, i32 0, i32 3
  %92 = load i64, i64* %91, align 8
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %99, label %94

94:                                               ; preds = %90
  %95 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 16, i32 0, i32 0, i32 1
  %96 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 16, i32 0, i32 0, i32 0
  %97 = load i8*, i8** %96, align 8
  tail call void @_ZdlPv(i8* %97) #10
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %96, align 8
  %98 = bitcast %"union.absl::container_internal::map_slot_type.193"** %95 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %98, i8 0, i64 32, i1 false) #9
  br label %99

99:                                               ; preds = %90, %94
  %100 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 14, i32 0, i32 0
  %101 = load i32*, i32** %100, align 8
  %102 = icmp eq i32* %101, null
  br i1 %102, label %108, label %103

103:                                              ; preds = %99
  %104 = ptrtoint i32* %101 to i64
  %105 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 14, i32 0, i32 1
  %106 = bitcast i32** %105 to i64*
  store i64 %104, i64* %106, align 8
  %107 = bitcast i32* %101 to i8*
  tail call void @_ZdlPv(i8* %107) #10
  br label %108

108:                                              ; preds = %99, %103
  %109 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 13, i32 0, i32 0
  %110 = load i32*, i32** %109, align 8
  %111 = icmp eq i32* %110, null
  br i1 %111, label %117, label %112

112:                                              ; preds = %108
  %113 = ptrtoint i32* %110 to i64
  %114 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 13, i32 0, i32 1
  %115 = bitcast i32** %114 to i64*
  store i64 %113, i64* %115, align 8
  %116 = bitcast i32* %110 to i8*
  tail call void @_ZdlPv(i8* %116) #10
  br label %117

117:                                              ; preds = %108, %112
  %118 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 12, i32 0, i32 0
  %119 = load i32*, i32** %118, align 8
  %120 = icmp eq i32* %119, null
  br i1 %120, label %126, label %121

121:                                              ; preds = %117
  %122 = ptrtoint i32* %119 to i64
  %123 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 12, i32 0, i32 1
  %124 = bitcast i32** %123 to i64*
  store i64 %122, i64* %124, align 8
  %125 = bitcast i32* %119 to i8*
  tail call void @_ZdlPv(i8* %125) #10
  br label %126

126:                                              ; preds = %117, %121
  %127 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 11, i32 0, i32 0
  %128 = load i32*, i32** %127, align 8
  %129 = icmp eq i32* %128, null
  br i1 %129, label %135, label %130

130:                                              ; preds = %126
  %131 = ptrtoint i32* %128 to i64
  %132 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 11, i32 0, i32 1
  %133 = bitcast i32** %132 to i64*
  store i64 %131, i64* %133, align 8
  %134 = bitcast i32* %128 to i8*
  tail call void @_ZdlPv(i8* %134) #10
  br label %135

135:                                              ; preds = %126, %130
  %136 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 10, i32 0, i32 0
  %137 = load i32*, i32** %136, align 8
  %138 = icmp eq i32* %137, null
  br i1 %138, label %144, label %139

139:                                              ; preds = %135
  %140 = ptrtoint i32* %137 to i64
  %141 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 10, i32 0, i32 1
  %142 = bitcast i32** %141 to i64*
  store i64 %140, i64* %142, align 8
  %143 = bitcast i32* %137 to i8*
  tail call void @_ZdlPv(i8* %143) #10
  br label %144

144:                                              ; preds = %135, %139
  %145 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 9, i32 0, i32 0
  %146 = load i32*, i32** %145, align 8
  %147 = icmp eq i32* %146, null
  br i1 %147, label %153, label %148

148:                                              ; preds = %144
  %149 = ptrtoint i32* %146 to i64
  %150 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 9, i32 0, i32 1
  %151 = bitcast i32** %150 to i64*
  store i64 %149, i64* %151, align 8
  %152 = bitcast i32* %146 to i8*
  tail call void @_ZdlPv(i8* %152) #10
  br label %153

153:                                              ; preds = %144, %148
  %154 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 8, i32 0, i32 0
  %155 = load i32*, i32** %154, align 8
  %156 = icmp eq i32* %155, null
  br i1 %156, label %162, label %157

157:                                              ; preds = %153
  %158 = ptrtoint i32* %155 to i64
  %159 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 8, i32 0, i32 1
  %160 = bitcast i32** %159 to i64*
  store i64 %158, i64* %160, align 8
  %161 = bitcast i32* %155 to i8*
  tail call void @_ZdlPv(i8* %161) #10
  br label %162

162:                                              ; preds = %153, %157
  %163 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 7, i32 0, i32 0, i32 3
  %164 = load i64, i64* %163, align 8
  %165 = icmp eq i64 %164, 0
  br i1 %165, label %171, label %166

166:                                              ; preds = %162
  %167 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 7, i32 0, i32 0, i32 1
  %168 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 7, i32 0, i32 0, i32 0
  %169 = load i8*, i8** %168, align 8
  tail call void @_ZdlPv(i8* %169) #10
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %168, align 8
  %170 = bitcast %"union.absl::container_internal::map_slot_type"** %167 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %170, i8 0, i64 32, i1 false) #9
  br label %171

171:                                              ; preds = %162, %166
  %172 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 4, i32 2
  store i64 0, i64* %172, align 8
  %173 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 4, i32 1
  %174 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %173, align 8
  %175 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 4, i32 0, i32 0, i64 0
  %176 = icmp eq %"class.angle::spirv::BoxedUint32"* %174, %175
  %177 = icmp eq %"class.angle::spirv::BoxedUint32"* %174, null
  %178 = or i1 %176, %177
  br i1 %178, label %181, label %179

179:                                              ; preds = %171
  %180 = bitcast %"class.angle::spirv::BoxedUint32"* %174 to i8*
  tail call void @_ZdaPv(i8* %180) #10
  br label %181

181:                                              ; preds = %171, %179
  %182 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 3, i32 0
  %183 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 3, i32 0, i32 1, i32 0, i32 0
  %184 = bitcast %"class.std::__1::__tree_end_node"* %183 to %"class.std::__1::__tree_node"**
  %185 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %184, align 8
  tail call void @_ZNSt3__16__treeIN3spv13ExecutionModeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree.173"* %182, %"class.std::__1::__tree_node"* %185) #9
  %186 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 2, i32 0
  %187 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0
  %188 = bitcast %"class.std::__1::__tree_end_node"* %187 to %"class.std::__1::__tree_node.260"**
  %189 = load %"class.std::__1::__tree_node.260"*, %"class.std::__1::__tree_node.260"** %188, align 8
  tail call void @_ZNSt3__16__treeIN3spv10CapabilityENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree.163"* %186, %"class.std::__1::__tree_node.260"* %189) #9
  ret void
}

; Function Attrs: nounwind
declare void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"*) unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__treeIN3spv13ExecutionModeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree.173"*, %"class.std::__1::__tree_node"*) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.std::__1::__tree_node"* %1, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %2
  %5 = bitcast %"class.std::__1::__tree_node"* %1 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  tail call void @_ZNSt3__16__treeIN3spv13ExecutionModeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree.173"* %0, %"class.std::__1::__tree_node"* %6) #9
  %7 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::__tree_node_base"** %7 to %"class.std::__1::__tree_node"**
  %9 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %8, align 8
  tail call void @_ZNSt3__16__treeIN3spv13ExecutionModeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree.173"* %0, %"class.std::__1::__tree_node"* %9) #9
  %10 = bitcast %"class.std::__1::__tree_node"* %1 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  ret void

11:                                               ; preds = %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__treeIN3spv10CapabilityENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree.163"*, %"class.std::__1::__tree_node.260"*) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.std::__1::__tree_node.260"* %1, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %2
  %5 = bitcast %"class.std::__1::__tree_node.260"* %1 to %"class.std::__1::__tree_node.260"**
  %6 = load %"class.std::__1::__tree_node.260"*, %"class.std::__1::__tree_node.260"** %5, align 8
  tail call void @_ZNSt3__16__treeIN3spv10CapabilityENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree.163"* %0, %"class.std::__1::__tree_node.260"* %6) #9
  %7 = getelementptr inbounds %"class.std::__1::__tree_node.260", %"class.std::__1::__tree_node.260"* %1, i64 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::__tree_node_base"** %7 to %"class.std::__1::__tree_node.260"**
  %9 = load %"class.std::__1::__tree_node.260"*, %"class.std::__1::__tree_node.260"** %8, align 8
  tail call void @_ZNSt3__16__treeIN3spv10CapabilityENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree.163"* %0, %"class.std::__1::__tree_node.260"* %9) #9
  %10 = bitcast %"class.std::__1::__tree_node.260"* %1 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  ret void

11:                                               ; preds = %2
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
