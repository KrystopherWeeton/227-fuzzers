; ModuleID = '../../third_party/lzma_sdk/Bra86.c'
source_filename = "../../third_party/lzma_sdk/Bra86.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i64 @x86_Convert(i8*, i64, i32, i32* nocapture, i32) local_unnamed_addr #0 {
  %6 = icmp ult i64 %1, 5
  br i1 %6, label %130, label %7

7:                                                ; preds = %5
  %8 = load i32, i32* %3, align 4
  %9 = and i32 %8, 7
  %10 = add i64 %1, -4
  %11 = add i32 %2, 5
  %12 = getelementptr inbounds i8, i8* %0, i64 %10
  %13 = icmp sgt i64 %10, 0
  %14 = ptrtoint i8* %0 to i64
  br i1 %13, label %15, label %29

15:                                               ; preds = %7
  %16 = icmp ne i32 %4, 0
  br label %17

17:                                               ; preds = %15, %125
  %18 = phi i8* [ %0, %15 ], [ %128, %125 ]
  %19 = phi i32 [ %9, %15 ], [ %127, %125 ]
  %20 = phi i64 [ 0, %15 ], [ %126, %125 ]
  br label %21

21:                                               ; preds = %17, %26
  %22 = phi i8* [ %18, %17 ], [ %27, %26 ]
  %23 = load i8, i8* %22, align 1
  %24 = and i8 %23, -2
  %25 = icmp eq i8 %24, -24
  br i1 %25, label %40, label %26

26:                                               ; preds = %21
  %27 = getelementptr inbounds i8, i8* %22, i64 1
  %28 = icmp ult i8* %27, %12
  br i1 %28, label %21, label %29

29:                                               ; preds = %125, %26, %7
  %30 = phi i64 [ 0, %7 ], [ %20, %26 ], [ %126, %125 ]
  %31 = phi i32 [ %9, %7 ], [ %19, %26 ], [ %127, %125 ]
  %32 = phi i8* [ %0, %7 ], [ %27, %26 ], [ %128, %125 ]
  %33 = ptrtoint i8* %32 to i64
  %34 = sub i64 %33, %14
  %35 = sub i64 %34, %30
  %36 = icmp ugt i64 %35, 2
  %37 = trunc i64 %35 to i32
  %38 = lshr i32 %31, %37
  %39 = select i1 %36, i32 0, i32 %38
  store i32 %39, i32* %3, align 4
  br label %130

40:                                               ; preds = %21
  %41 = ptrtoint i8* %22 to i64
  %42 = sub i64 %41, %14
  %43 = sub i64 %42, %20
  %44 = icmp ugt i64 %43, 2
  br i1 %44, label %64, label %45

45:                                               ; preds = %40
  %46 = trunc i64 %43 to i32
  %47 = lshr i32 %19, %46
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %64, label %49

49:                                               ; preds = %45
  %50 = icmp ugt i32 %47, 4
  %51 = icmp eq i32 %47, 3
  %52 = or i1 %50, %51
  %53 = lshr i32 %47, 1
  br i1 %52, label %61, label %54

54:                                               ; preds = %49
  %55 = add nuw nsw i32 %53, 1
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds i8, i8* %22, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = add i8 %58, 1
  %60 = icmp ult i8 %59, 2
  br i1 %60, label %61, label %64

61:                                               ; preds = %49, %54
  %62 = or i32 %53, 4
  %63 = add i64 %42, 1
  br label %125

64:                                               ; preds = %40, %45, %54
  %65 = phi i32 [ 0, %40 ], [ 0, %45 ], [ %47, %54 ]
  %66 = getelementptr inbounds i8, i8* %22, i64 4
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = add nuw nsw i32 %68, 1
  %70 = and i32 %69, 254
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %121

72:                                               ; preds = %64
  %73 = shl nuw i32 %68, 24
  %74 = getelementptr inbounds i8, i8* %22, i64 3
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = shl nuw nsw i32 %76, 16
  %78 = or i32 %77, %73
  %79 = getelementptr inbounds i8, i8* %22, i64 2
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = shl nuw nsw i32 %81, 8
  %83 = or i32 %78, %82
  %84 = getelementptr inbounds i8, i8* %22, i64 1
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = or i32 %83, %86
  %88 = trunc i64 %42 to i32
  %89 = add i32 %11, %88
  %90 = add i64 %42, 5
  %91 = sub i32 0, %89
  %92 = select i1 %16, i32 %89, i32 %91
  %93 = add i32 %87, %92
  %94 = icmp eq i32 %65, 0
  br i1 %94, label %110, label %95

95:                                               ; preds = %72
  %96 = shl i32 %65, 2
  %97 = and i32 %96, 24
  %98 = lshr i32 %93, %97
  %99 = add i32 %98, 1
  %100 = and i32 %99, 254
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %110

102:                                              ; preds = %95
  %103 = shl i32 256, %97
  %104 = add nsw i32 %103, -1
  %105 = xor i32 %93, %104
  br i1 %16, label %106, label %108

106:                                              ; preds = %102
  %107 = add i32 %105, %89
  br label %110

108:                                              ; preds = %102
  %109 = sub i32 %105, %89
  br label %110

110:                                              ; preds = %95, %108, %106, %72
  %111 = phi i32 [ %93, %72 ], [ %107, %106 ], [ %109, %108 ], [ %93, %95 ]
  %112 = trunc i32 %111 to i8
  store i8 %112, i8* %84, align 1
  %113 = lshr i32 %111, 8
  %114 = trunc i32 %113 to i8
  store i8 %114, i8* %79, align 1
  %115 = lshr i32 %111, 16
  %116 = trunc i32 %115 to i8
  store i8 %116, i8* %74, align 1
  %117 = lshr i32 %111, 24
  %118 = trunc i32 %117 to i8
  %119 = and i8 %118, 1
  %120 = sub nsw i8 0, %119
  store i8 %120, i8* %66, align 1
  br label %125

121:                                              ; preds = %64
  %122 = lshr i32 %65, 1
  %123 = or i32 %122, 4
  %124 = add i64 %42, 1
  br label %125

125:                                              ; preds = %61, %110, %121
  %126 = phi i64 [ %90, %110 ], [ %124, %121 ], [ %63, %61 ]
  %127 = phi i32 [ 0, %110 ], [ %123, %121 ], [ %62, %61 ]
  %128 = getelementptr inbounds i8, i8* %0, i64 %126
  %129 = icmp slt i64 %126, %10
  br i1 %129, label %17, label %29

130:                                              ; preds = %29, %5
  %131 = phi i64 [ 0, %5 ], [ %34, %29 ]
  ret i64 %131
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
