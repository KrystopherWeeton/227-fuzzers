; ModuleID = '../../third_party/opus/src/silk/control_audio_bandwidth.c'
source_filename = "../../third_party/opus/src/silk/control_audio_bandwidth.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.silk_encoder_state = type { [2 x i32], i32, i32, %struct.silk_LP_state, %struct.silk_VAD_state, %struct.silk_nsq_state, [16 x i16], i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, %struct.silk_NLSF_CB_struct*, [4 x i32], i32, i32, [3 x i8], i8, [3 x i32], %struct.SideInfoIndices, [320 x i8], i32, [322 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i16, %struct._silk_resampler_state_struct, i32, i32, i32, i32, i32, i32, [3 x %struct.SideInfoIndices], [3 x [320 x i8]] }
%struct.silk_LP_state = type { [2 x i32], i32, i32, i32 }
%struct.silk_VAD_state = type { [2 x i32], [2 x i32], [2 x i32], [4 x i32], [4 x i32], i16, [4 x i32], [4 x i32], [4 x i32], i32 }
%struct.silk_nsq_state = type { [640 x i16], [640 x i32], [96 x i32], [24 x i32], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.silk_NLSF_CB_struct = type { i16, i16, i16, i16, i8*, i16*, i8*, i8*, i8*, i8*, i8*, i16* }
%struct.SideInfoIndices = type { [4 x i8], [4 x i8], [17 x i8], i16, i8, i8, i8, i8, i8, i8, i8 }
%struct._silk_resampler_state_struct = type { [6 x i32], %union.anon, [48 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i16* }
%union.anon = type { [36 x i32] }
%struct.silk_EncControlStruct = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @silk_control_audio_bandwidth(%struct.silk_encoder_state* nocapture, %struct.silk_EncControlStruct* nocapture) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 19
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 3, i32 3
  %8 = load i32, i32* %7, align 8
  br label %9

9:                                                ; preds = %6, %2
  %10 = phi i32 [ %8, %6 ], [ %4, %2 ]
  %11 = shl i32 %10, 16
  %12 = ashr exact i32 %11, 16
  %13 = mul nsw i32 %12, 1000
  %14 = icmp eq i32 %11, 0
  br i1 %14, label %15, label %23

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 18
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 14
  %19 = load i32, i32* %18, align 4
  %20 = icmp slt i32 %17, %19
  %21 = select i1 %20, i32 %17, i32 %19
  %22 = sdiv i32 %21, 1000
  br label %120

23:                                               ; preds = %9
  %24 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 14
  %25 = load i32, i32* %24, align 4
  %26 = icmp sgt i32 %13, %25
  %27 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 16
  %28 = load i32, i32* %27, align 4
  %29 = icmp sgt i32 %13, %28
  %30 = or i1 %26, %29
  br i1 %30, label %35, label %31

31:                                               ; preds = %23
  %32 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 17
  %33 = load i32, i32* %32, align 8
  %34 = icmp slt i32 %13, %33
  br i1 %34, label %35, label %43

35:                                               ; preds = %23, %31
  %36 = icmp slt i32 %25, %28
  %37 = select i1 %36, i32 %25, i32 %28
  %38 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 17
  %39 = load i32, i32* %38, align 8
  %40 = icmp sgt i32 %37, %39
  %41 = select i1 %40, i32 %37, i32 %39
  %42 = sdiv i32 %41, 1000
  br label %120

43:                                               ; preds = %31
  %44 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 3
  %45 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 3, i32 1
  %46 = load i32, i32* %45, align 8
  %47 = icmp sgt i32 %46, 255
  br i1 %47, label %48, label %50

48:                                               ; preds = %43
  %49 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 3, i32 2
  store i32 0, i32* %49, align 4
  br label %50

50:                                               ; preds = %48, %43
  %51 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 8
  %52 = load i32, i32* %51, align 8
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %58

54:                                               ; preds = %50
  %55 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %1, i64 0, i32 16
  %56 = load i32, i32* %55, align 4
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %120, label %58

58:                                               ; preds = %54, %50
  %59 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 18
  %60 = load i32, i32* %59, align 4
  %61 = icmp sgt i32 %13, %60
  br i1 %61, label %62, label %89

62:                                               ; preds = %58
  %63 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 3, i32 2
  %64 = load i32, i32* %63, align 4
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %68

66:                                               ; preds = %62
  store i32 256, i32* %45, align 8
  %67 = bitcast %struct.silk_LP_state* %44 to i64*
  store i64 0, i64* %67, align 8
  br label %68

68:                                               ; preds = %66, %62
  %69 = phi i32 [ 256, %66 ], [ %46, %62 ]
  %70 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %1, i64 0, i32 16
  %71 = load i32, i32* %70, align 4
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %76, label %73

73:                                               ; preds = %68
  store i32 0, i32* %63, align 4
  %74 = icmp eq i32 %10, 16
  %75 = select i1 %74, i32 12, i32 8
  br label %120

76:                                               ; preds = %68
  %77 = icmp slt i32 %69, 1
  br i1 %77, label %78, label %88

78:                                               ; preds = %76
  %79 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %1, i64 0, i32 22
  store i32 1, i32* %79, align 4
  %80 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %1, i64 0, i32 14
  %81 = load i32, i32* %80, align 4
  %82 = mul nsw i32 %81, 5
  %83 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %1, i64 0, i32 6
  %84 = load i32, i32* %83, align 4
  %85 = add nsw i32 %84, 5
  %86 = sdiv i32 %82, %85
  %87 = sub nsw i32 %81, %86
  store i32 %87, i32* %80, align 4
  br label %120

88:                                               ; preds = %76
  store i32 -2, i32* %63, align 4
  br label %120

89:                                               ; preds = %58
  %90 = icmp slt i32 %13, %60
  br i1 %90, label %91, label %115

91:                                               ; preds = %89
  %92 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %1, i64 0, i32 16
  %93 = load i32, i32* %92, align 4
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %100, label %95

95:                                               ; preds = %91
  %96 = icmp eq i32 %10, 8
  %97 = select i1 %96, i32 12, i32 16
  store i32 0, i32* %45, align 8
  %98 = bitcast %struct.silk_LP_state* %44 to i64*
  store i64 0, i64* %98, align 8
  %99 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 3, i32 2
  store i32 1, i32* %99, align 4
  br label %120

100:                                              ; preds = %91
  %101 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 3, i32 2
  %102 = load i32, i32* %101, align 4
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %104, label %114

104:                                              ; preds = %100
  %105 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %1, i64 0, i32 22
  store i32 1, i32* %105, align 4
  %106 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %1, i64 0, i32 14
  %107 = load i32, i32* %106, align 4
  %108 = mul nsw i32 %107, 5
  %109 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %1, i64 0, i32 6
  %110 = load i32, i32* %109, align 4
  %111 = add nsw i32 %110, 5
  %112 = sdiv i32 %108, %111
  %113 = sub nsw i32 %107, %112
  store i32 %113, i32* %106, align 4
  br label %120

114:                                              ; preds = %100
  store i32 1, i32* %101, align 4
  br label %120

115:                                              ; preds = %89
  %116 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 3, i32 2
  %117 = load i32, i32* %116, align 4
  %118 = icmp slt i32 %117, 0
  br i1 %118, label %119, label %120

119:                                              ; preds = %115
  store i32 1, i32* %116, align 4
  br label %120

120:                                              ; preds = %54, %35, %78, %88, %73, %115, %119, %95, %114, %104, %15
  %121 = phi i32 [ %22, %15 ], [ %42, %35 ], [ %75, %73 ], [ %10, %78 ], [ %10, %88 ], [ %97, %95 ], [ %10, %104 ], [ %10, %114 ], [ %10, %119 ], [ %10, %115 ], [ %10, %54 ]
  ret i32 %121
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
