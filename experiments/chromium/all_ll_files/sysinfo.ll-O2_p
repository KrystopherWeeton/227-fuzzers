; ModuleID = '../../third_party/abseil-cpp/absl/base/internal/sysinfo.cc'
source_filename = "../../third_party/abseil-cpp/absl/base/internal/sysinfo.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%"struct.absl::base_internal::SpinLockWaitTransition" = type { i32, i32, i8 }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.timespec = type { i64, i64 }

@_ZN4absl13base_internalL8num_cpusE = internal unnamed_addr global i32 0, align 4
@_ZN4absl13base_internalL21nominal_cpu_frequencyE = internal unnamed_addr global double 1.000000e+00, align 8
@_ZZN4absl13base_internal12GetCachedTIDEvE9thread_id = internal thread_local unnamed_addr global i32 0, align 4
@_ZGVZN4absl13base_internal12GetCachedTIDEvE9thread_id = internal thread_local unnamed_addr global i1 false, align 1
@_ZN4absl13base_internalL18init_num_cpus_onceE = internal global { { { i32 } } } zeroinitializer, align 4
@_ZN4absl13base_internalL31init_nominal_cpu_frequency_onceE = internal global { { { i32 } } } zeroinitializer, align 4
@"_ZZN4absl13base_internal12CallOnceImplIZNS0_7NumCPUsEvE3$_0JEEEvPNSt3__16atomicIjEENS0_14SchedulingModeEOT_DpOT0_E5trans" = internal constant [3 x %"struct.absl::base_internal::SpinLockWaitTransition"] [%"struct.absl::base_internal::SpinLockWaitTransition" { i32 0, i32 1707250555, i8 1 }, %"struct.absl::base_internal::SpinLockWaitTransition" { i32 1707250555, i32 94570706, i8 0 }, %"struct.absl::base_internal::SpinLockWaitTransition" { i32 221, i32 221, i8 1 }], align 16
@"_ZZN4absl13base_internal12CallOnceImplIZNS0_19NominalCPUFrequencyEvE3$_1JEEEvPNSt3__16atomicIjEENS0_14SchedulingModeEOT_DpOT0_E5trans" = internal constant [3 x %"struct.absl::base_internal::SpinLockWaitTransition"] [%"struct.absl::base_internal::SpinLockWaitTransition" { i32 0, i32 1707250555, i8 1 }, %"struct.absl::base_internal::SpinLockWaitTransition" { i32 1707250555, i32 94570706, i8 0 }, %"struct.absl::base_internal::SpinLockWaitTransition" { i32 221, i32 221, i8 1 }], align 16
@.str = private unnamed_addr constant [42 x i8] c"/sys/devices/system/cpu/cpu0/tsc_freq_khz\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"clock_gettime() failed\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN4absl13base_internal7NumCPUsEv() local_unnamed_addr #0 {
  %1 = load atomic i32, i32* getelementptr inbounds ({ { { i32 } } }, { { { i32 } } }* @_ZN4absl13base_internalL18init_num_cpus_onceE, i64 0, i32 0, i32 0, i32 0) acquire, align 4
  %2 = icmp eq i32 %1, 221
  br i1 %2, label %4, label %3, !prof !2

3:                                                ; preds = %0
  tail call fastcc void @"_ZN4absl13base_internal12CallOnceImplIZNS0_7NumCPUsEvE3$_0JEEEvPNSt3__16atomicIjEENS0_14SchedulingModeEOT_DpOT0_"(%"struct.std::__1::atomic"* bitcast ({ { { i32 } } }* @_ZN4absl13base_internalL18init_num_cpus_onceE to %"struct.std::__1::atomic"*)) #9
  br label %4

4:                                                ; preds = %0, %3
  %5 = load i32, i32* @_ZN4absl13base_internalL8num_cpusE, align 4
  ret i32 %5
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN4absl13base_internal19NominalCPUFrequencyEv() local_unnamed_addr #0 {
  %1 = load atomic i32, i32* getelementptr inbounds ({ { { i32 } } }, { { { i32 } } }* @_ZN4absl13base_internalL31init_nominal_cpu_frequency_onceE, i64 0, i32 0, i32 0, i32 0) acquire, align 4
  %2 = icmp eq i32 %1, 221
  br i1 %2, label %4, label %3, !prof !2

3:                                                ; preds = %0
  tail call fastcc void @"_ZN4absl13base_internal12CallOnceImplIZNS0_19NominalCPUFrequencyEvE3$_1JEEEvPNSt3__16atomicIjEENS0_14SchedulingModeEOT_DpOT0_"(%"struct.std::__1::atomic"* bitcast ({ { { i32 } } }* @_ZN4absl13base_internalL31init_nominal_cpu_frequency_onceE to %"struct.std::__1::atomic"*)) #9
  br label %4

4:                                                ; preds = %0, %3
  %5 = load double, double* @_ZN4absl13base_internalL21nominal_cpu_frequencyE, align 8
  ret double %5
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN4absl13base_internal6GetTIDEv() local_unnamed_addr #0 {
  %1 = tail call i64 (i64, ...) @syscall(i64 186) #9
  %2 = trunc i64 %1 to i32
  ret i32 %2
}

; Function Attrs: nounwind
declare i64 @syscall(i64, ...) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN4absl13base_internal12GetCachedTIDEv() local_unnamed_addr #0 {
  %1 = load i1, i1* @_ZGVZN4absl13base_internal12GetCachedTIDEvE9thread_id, align 1
  br i1 %1, label %2, label %4, !prof !3

2:                                                ; preds = %0
  %3 = load i32, i32* @_ZZN4absl13base_internal12GetCachedTIDEvE9thread_id, align 4
  br label %7

4:                                                ; preds = %0
  %5 = tail call i64 (i64, ...) @syscall(i64 186) #9
  %6 = trunc i64 %5 to i32
  store i32 %6, i32* @_ZZN4absl13base_internal12GetCachedTIDEvE9thread_id, align 4
  store i1 true, i1* @_ZGVZN4absl13base_internal12GetCachedTIDEvE9thread_id, align 1
  br label %7

7:                                                ; preds = %2, %4
  %8 = phi i32 [ %3, %2 ], [ %6, %4 ]
  ret i32 %8
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @"_ZN4absl13base_internal12CallOnceImplIZNS0_7NumCPUsEvE3$_0JEEEvPNSt3__16atomicIjEENS0_14SchedulingModeEOT_DpOT0_"(%"struct.std::__1::atomic"*) unnamed_addr #3 {
  %2 = getelementptr inbounds %"struct.std::__1::atomic", %"struct.std::__1::atomic"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = cmpxchg i32* %2, i32 0, i32 1707250555 monotonic monotonic
  %4 = extractvalue { i32, i1 } %3, 1
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = tail call i32 @_ZN4absl13base_internal12SpinLockWaitEPNSt3__16atomicIjEEiPKNS0_22SpinLockWaitTransitionENS0_14SchedulingModeE(%"struct.std::__1::atomic"* %0, i32 3, %"struct.absl::base_internal::SpinLockWaitTransition"* getelementptr inbounds ([3 x %"struct.absl::base_internal::SpinLockWaitTransition"], [3 x %"struct.absl::base_internal::SpinLockWaitTransition"]* @"_ZZN4absl13base_internal12CallOnceImplIZNS0_7NumCPUsEvE3$_0JEEEvPNSt3__16atomicIjEENS0_14SchedulingModeEOT_DpOT0_E5trans", i64 0, i64 0), i32 0) #9
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %13

8:                                                ; preds = %1, %5
  %9 = tail call i32 @_ZNSt3__16thread20hardware_concurrencyEv() #9
  store i32 %9, i32* @_ZN4absl13base_internalL8num_cpusE, align 4
  %10 = atomicrmw xchg i32* %2, i32 221 release
  %11 = icmp eq i32 %10, 94570706
  br i1 %11, label %12, label %13

12:                                               ; preds = %8
  tail call void @AbslInternalSpinLockWake(%"struct.std::__1::atomic"* %0, i1 zeroext true) #9
  br label %13

13:                                               ; preds = %8, %12, %5
  ret void
}

declare i32 @_ZN4absl13base_internal12SpinLockWaitEPNSt3__16atomicIjEEiPKNS0_22SpinLockWaitTransitionENS0_14SchedulingModeE(%"struct.std::__1::atomic"*, i32, %"struct.absl::base_internal::SpinLockWaitTransition"*, i32) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @_ZNSt3__16thread20hardware_concurrencyEv() local_unnamed_addr #2

declare void @AbslInternalSpinLockWake(%"struct.std::__1::atomic"*, i1 zeroext) local_unnamed_addr #4

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @"_ZN4absl13base_internal12CallOnceImplIZNS0_19NominalCPUFrequencyEvE3$_1JEEEvPNSt3__16atomicIjEENS0_14SchedulingModeEOT_DpOT0_"(%"struct.std::__1::atomic"*) unnamed_addr #3 {
  %2 = alloca %struct.timespec, align 8
  %3 = alloca [1024 x i8], align 16
  %4 = alloca i8*, align 8
  %5 = getelementptr inbounds %"struct.std::__1::atomic", %"struct.std::__1::atomic"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = cmpxchg i32* %5, i32 0, i32 1707250555 monotonic monotonic
  %7 = extractvalue { i32, i1 } %6, 1
  br i1 %7, label %11, label %8

8:                                                ; preds = %1
  %9 = tail call i32 @_ZN4absl13base_internal12SpinLockWaitEPNSt3__16atomicIjEEiPKNS0_22SpinLockWaitTransitionENS0_14SchedulingModeE(%"struct.std::__1::atomic"* %0, i32 3, %"struct.absl::base_internal::SpinLockWaitTransition"* getelementptr inbounds ([3 x %"struct.absl::base_internal::SpinLockWaitTransition"], [3 x %"struct.absl::base_internal::SpinLockWaitTransition"]* @"_ZZN4absl13base_internal12CallOnceImplIZNS0_19NominalCPUFrequencyEvE3$_1JEEEvPNSt3__16atomicIjEENS0_14SchedulingModeEOT_DpOT0_E5trans", i64 0, i64 0), i32 0) #9
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %77

11:                                               ; preds = %1, %8
  %12 = tail call i32 (i8*, i32, ...) @open64(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str, i64 0, i64 0), i32 0) #9
  %13 = icmp eq i32 %12, -1
  br i1 %13, label %34, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %15) #9
  %16 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #9
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %4, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 0, i64 1024, i1 false) #9
  %17 = call i64 @read(i32 %12, i8* nonnull %15, i64 1023) #9
  %18 = trunc i64 %17 to i32
  %19 = icmp slt i32 %18, 1
  br i1 %19, label %30, label %20

20:                                               ; preds = %14
  %21 = call i64 @strtol(i8* nonnull %15, i8** nonnull %4, i32 10) #9
  %22 = load i8, i8* %15, align 16
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %30, label %24

24:                                               ; preds = %20
  %25 = load i8*, i8** %4, align 8
  %26 = load i8, i8* %25, align 1
  switch i8 %26, label %30 [
    i8 10, label %27
    i8 0, label %27
  ]

27:                                               ; preds = %24, %24
  %28 = sitofp i64 %21 to double
  %29 = fmul double %28, 1.000000e+03
  br label %30

30:                                               ; preds = %27, %24, %20, %14
  %31 = phi double [ 0.000000e+00, %14 ], [ 0.000000e+00, %20 ], [ 0.000000e+00, %24 ], [ %29, %27 ]
  %32 = phi i1 [ false, %14 ], [ false, %20 ], [ false, %24 ], [ true, %27 ]
  %33 = call i32 @close(i32 %12) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #9
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %15) #9
  br i1 %32, label %72, label %34

34:                                               ; preds = %30, %11
  %35 = bitcast %struct.timespec* %2 to i8*
  %36 = getelementptr inbounds %struct.timespec, %struct.timespec* %2, i64 0, i32 0
  %37 = getelementptr inbounds %struct.timespec, %struct.timespec* %2, i64 0, i32 1
  br label %38

38:                                               ; preds = %68, %34
  %39 = phi i32 [ 0, %34 ], [ %70, %68 ]
  %40 = phi i32 [ 1000000, %34 ], [ %69, %68 ]
  %41 = phi double [ -1.000000e+00, %34 ], [ %62, %68 ]
  %42 = call fastcc { i64, i64 } @_ZN4absl13base_internalL14GetTimeTscPairEv() #9
  %43 = extractvalue { i64, i64 } %42, 0
  %44 = extractvalue { i64, i64 } %42, 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %35) #9
  store i64 0, i64* %36, align 8
  %45 = sext i32 %40 to i64
  store i64 %45, i64* %37, align 8
  br label %46

46:                                               ; preds = %49, %38
  %47 = call i32 @nanosleep(%struct.timespec* nonnull %2, %struct.timespec* nonnull %2) #9
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %46
  %50 = tail call i32* @__errno_location() #10
  %51 = load i32, i32* %50, align 4
  %52 = icmp eq i32 %51, 4
  br i1 %52, label %46, label %53

53:                                               ; preds = %49, %46
  %54 = call fastcc { i64, i64 } @_ZN4absl13base_internalL14GetTimeTscPairEv() #9
  %55 = extractvalue { i64, i64 } %54, 0
  %56 = extractvalue { i64, i64 } %54, 1
  %57 = sub nsw i64 %56, %44
  %58 = sitofp i64 %57 to double
  %59 = sub nsw i64 %55, %43
  %60 = sitofp i64 %59 to double
  %61 = fmul double %60, 1.000000e-09
  %62 = fdiv double %58, %61
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %35) #9
  %63 = fmul double %62, 0x3FEFAE147AE147AE
  %64 = fcmp olt double %63, %41
  %65 = fmul double %62, 1.010000e+00
  %66 = fcmp olt double %41, %65
  %67 = and i1 %64, %66
  br i1 %67, label %72, label %68

68:                                               ; preds = %53
  %69 = shl nsw i32 %40, 1
  %70 = add nuw nsw i32 %39, 1
  %71 = icmp eq i32 %70, 8
  br i1 %71, label %72, label %38

72:                                               ; preds = %53, %68, %30
  %73 = phi double [ %31, %30 ], [ %62, %68 ], [ %62, %53 ]
  store double %73, double* @_ZN4absl13base_internalL21nominal_cpu_frequencyE, align 8
  %74 = atomicrmw xchg i32* %5, i32 221 release
  %75 = icmp eq i32 %74, 94570706
  br i1 %75, label %76, label %77

76:                                               ; preds = %72
  call void @AbslInternalSpinLockWake(%"struct.std::__1::atomic"* %0, i1 zeroext true) #9
  br label %77

77:                                               ; preds = %72, %76, %8
  ret void
}

; Function Attrs: nofree
declare i32 @open64(i8* nocapture readonly, i32, ...) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree
declare i64 @read(i32, i8* nocapture, i64) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare i64 @strtol(i8* readonly, i8** nocapture, i32) local_unnamed_addr #6

declare i32 @close(i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal fastcc { i64, i64 } @_ZN4absl13base_internalL14GetTimeTscPairEv() unnamed_addr #0 {
  %1 = alloca %struct.timespec, align 8
  %2 = alloca %struct.timespec, align 8
  %3 = bitcast %struct.timespec* %1 to i8*
  %4 = getelementptr inbounds %struct.timespec, %struct.timespec* %1, i64 0, i32 0
  %5 = getelementptr inbounds %struct.timespec, %struct.timespec* %1, i64 0, i32 1
  %6 = bitcast %struct.timespec* %2 to i8*
  %7 = getelementptr inbounds %struct.timespec, %struct.timespec* %2, i64 0, i32 0
  %8 = getelementptr inbounds %struct.timespec, %struct.timespec* %2, i64 0, i32 1
  br label %12

9:                                                ; preds = %29
  %10 = insertvalue { i64, i64 } undef, i64 %36, 0
  %11 = insertvalue { i64, i64 } %10, i64 %38, 1
  ret { i64, i64 } %11

12:                                               ; preds = %29, %0
  %13 = phi i64 [ -6148914691236517206, %0 ], [ %38, %29 ]
  %14 = phi i32 [ 0, %0 ], [ %39, %29 ]
  %15 = phi i64 [ 9223372036854775807, %0 ], [ %37, %29 ]
  %16 = phi i64 [ -6148914691236517206, %0 ], [ %36, %29 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 -86, i64 16, i1 false) #9
  %17 = call i32 @clock_gettime(i32 4, %struct.timespec* nonnull %1) #9
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %20, label %19

19:                                               ; preds = %12
  call void @perror(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0)) #11
  call void @abort() #12
  unreachable

20:                                               ; preds = %12
  %21 = load i64, i64* %4, align 8
  %22 = mul nsw i64 %21, 1000000000
  %23 = load i64, i64* %5, align 8
  %24 = add nsw i64 %22, %23
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #9
  %25 = call i64 @_ZN4absl13base_internal18UnscaledCycleClock3NowEv() #9
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false) #9
  %26 = call i32 @clock_gettime(i32 4, %struct.timespec* nonnull %2) #9
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %29, label %28

28:                                               ; preds = %20
  call void @perror(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0)) #11
  call void @abort() #12
  unreachable

29:                                               ; preds = %20
  %30 = load i64, i64* %7, align 8
  %31 = mul nsw i64 %30, 1000000000
  %32 = load i64, i64* %8, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #9
  %33 = sub i64 %32, %24
  %34 = add i64 %33, %31
  %35 = icmp slt i64 %34, %15
  %36 = select i1 %35, i64 %24, i64 %16
  %37 = select i1 %35, i64 %34, i64 %15
  %38 = select i1 %35, i64 %25, i64 %13
  %39 = add nuw nsw i32 %14, 1
  %40 = icmp eq i32 %39, 10
  br i1 %40, label %9, label %12
}

declare i32 @nanosleep(%struct.timespec*, %struct.timespec*) local_unnamed_addr #4

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #7

; Function Attrs: nounwind
declare i32 @clock_gettime(i32, %struct.timespec*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare void @perror(i8* nocapture readonly) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

declare i64 @_ZN4absl13base_internal18UnscaledCycleClock3NowEv() local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { nounwind readnone }
attributes #11 = { cold nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1023, i32 1}
