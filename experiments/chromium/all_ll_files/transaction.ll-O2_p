; ModuleID = '../../sql/transaction.cc'
source_filename = "../../sql/transaction.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sql::Transaction" = type <{ %"class.sql::Database"*, i8, [7 x i8] }>
%"class.sql::Database" = type { %struct.sqlite3*, %"struct.sql::DatabaseOptions", %"class.base::flat_map", %"class.std::__1::set", i32, i8, i8, i8, i8, i8, i8, i32, %"class.base::RepeatingCallback", %"class.std::__1::basic_string", %"class.base::HistogramBase"*, %"class.std::__1::unique_ptr" }
%struct.sqlite3 = type opaque
%"struct.sql::DatabaseOptions" = type { i8, i8, i32, i32 }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::pair"* }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1", %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { i64 }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.9" }
%"struct.std::__1::__atomic_base.9" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::HistogramBase" = type opaque
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"class.sql::DatabaseMemoryDumpProvider"* }
%"class.sql::DatabaseMemoryDumpProvider" = type opaque

@_ZN3sql11TransactionC1EPNS_8DatabaseE = hidden unnamed_addr alias void (%"class.sql::Transaction"*, %"class.sql::Database"*), void (%"class.sql::Transaction"*, %"class.sql::Database"*)* @_ZN3sql11TransactionC2EPNS_8DatabaseE
@_ZN3sql11TransactionD1Ev = hidden unnamed_addr alias void (%"class.sql::Transaction"*), void (%"class.sql::Transaction"*)* @_ZN3sql11TransactionD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3sql11TransactionC2EPNS_8DatabaseE(%"class.sql::Transaction"* nocapture, %"class.sql::Database"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sql::Transaction", %"class.sql::Transaction"* %0, i64 0, i32 0
  store %"class.sql::Database"* %1, %"class.sql::Database"** %3, align 8
  %4 = getelementptr inbounds %"class.sql::Transaction", %"class.sql::Transaction"* %0, i64 0, i32 1
  store i8 0, i8* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3sql11TransactionD2Ev(%"class.sql::Transaction"* nocapture readonly) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.sql::Transaction", %"class.sql::Transaction"* %0, i64 0, i32 1
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.sql::Transaction", %"class.sql::Transaction"* %0, i64 0, i32 0
  %7 = load %"class.sql::Database"*, %"class.sql::Database"** %6, align 8
  tail call void @_ZN3sql8Database19RollbackTransactionEv(%"class.sql::Database"* %7) #3
  br label %8

8:                                                ; preds = %1, %5
  ret void
}

declare void @_ZN3sql8Database19RollbackTransactionEv(%"class.sql::Database"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3sql11Transaction5BeginEv(%"class.sql::Transaction"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.sql::Transaction", %"class.sql::Transaction"* %0, i64 0, i32 0
  %3 = load %"class.sql::Database"*, %"class.sql::Database"** %2, align 8
  %4 = tail call zeroext i1 @_ZN3sql8Database16BeginTransactionEv(%"class.sql::Database"* %3) #3
  %5 = getelementptr inbounds %"class.sql::Transaction", %"class.sql::Transaction"* %0, i64 0, i32 1
  %6 = zext i1 %4 to i8
  store i8 %6, i8* %5, align 8
  ret i1 %4
}

declare zeroext i1 @_ZN3sql8Database16BeginTransactionEv(%"class.sql::Database"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3sql11Transaction8RollbackEv(%"class.sql::Transaction"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.sql::Transaction", %"class.sql::Transaction"* %0, i64 0, i32 1
  store i8 0, i8* %2, align 8
  %3 = getelementptr inbounds %"class.sql::Transaction", %"class.sql::Transaction"* %0, i64 0, i32 0
  %4 = load %"class.sql::Database"*, %"class.sql::Database"** %3, align 8
  tail call void @_ZN3sql8Database19RollbackTransactionEv(%"class.sql::Database"* %4) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3sql11Transaction6CommitEv(%"class.sql::Transaction"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.sql::Transaction", %"class.sql::Transaction"* %0, i64 0, i32 1
  store i8 0, i8* %2, align 8
  %3 = getelementptr inbounds %"class.sql::Transaction", %"class.sql::Transaction"* %0, i64 0, i32 0
  %4 = load %"class.sql::Database"*, %"class.sql::Database"** %3, align 8
  %5 = tail call zeroext i1 @_ZN3sql8Database17CommitTransactionEv(%"class.sql::Database"* %4) #3
  ret i1 %5
}

declare zeroext i1 @_ZN3sql8Database17CommitTransactionEv(%"class.sql::Database"*) local_unnamed_addr #2

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
