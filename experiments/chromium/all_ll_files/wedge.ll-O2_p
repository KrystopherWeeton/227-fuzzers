; ModuleID = '../../third_party/dav1d/libdav1d/src/wedge.c'
source_filename = "../../third_party/dav1d/libdav1d/src/wedge.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.wedge_code_type = type { i8, i8, i8 }

@dav1d_init_wedge_masks.wedge_master_border = internal constant [3 x [8 x i8]] [[8 x i8] c"\01\02\06\12%5<?", [8 x i8] c"\01\04\0B\1B.:>?", [8 x i8] c"\00\02\07\15+9>@"], align 16
@wedge_masks_444_32x32 = internal global [32768 x i8] zeroinitializer, align 64
@wedge_codebook_16_heqw = internal constant [16 x %struct.wedge_code_type] [%struct.wedge_code_type { i8 2, i8 4, i8 4 }, %struct.wedge_code_type { i8 3, i8 4, i8 4 }, %struct.wedge_code_type { i8 4, i8 4, i8 4 }, %struct.wedge_code_type { i8 5, i8 4, i8 4 }, %struct.wedge_code_type { i8 0, i8 4, i8 2 }, %struct.wedge_code_type { i8 0, i8 4, i8 6 }, %struct.wedge_code_type { i8 1, i8 2, i8 4 }, %struct.wedge_code_type { i8 1, i8 6, i8 4 }, %struct.wedge_code_type { i8 2, i8 4, i8 2 }, %struct.wedge_code_type { i8 2, i8 4, i8 6 }, %struct.wedge_code_type { i8 5, i8 4, i8 2 }, %struct.wedge_code_type { i8 5, i8 4, i8 6 }, %struct.wedge_code_type { i8 3, i8 2, i8 4 }, %struct.wedge_code_type { i8 3, i8 6, i8 4 }, %struct.wedge_code_type { i8 4, i8 2, i8 4 }, %struct.wedge_code_type { i8 4, i8 6, i8 4 }], align 16
@wedge_masks_422_16x32 = internal global [16384 x i8] zeroinitializer, align 64
@wedge_masks_420_16x16 = internal global [8192 x i8] zeroinitializer, align 64
@wedge_masks_444_32x16 = internal global [16384 x i8] zeroinitializer, align 64
@wedge_codebook_16_hltw = internal constant [16 x %struct.wedge_code_type] [%struct.wedge_code_type { i8 2, i8 4, i8 4 }, %struct.wedge_code_type { i8 3, i8 4, i8 4 }, %struct.wedge_code_type { i8 4, i8 4, i8 4 }, %struct.wedge_code_type { i8 5, i8 4, i8 4 }, %struct.wedge_code_type { i8 1, i8 2, i8 4 }, %struct.wedge_code_type { i8 1, i8 4, i8 4 }, %struct.wedge_code_type { i8 1, i8 6, i8 4 }, %struct.wedge_code_type { i8 0, i8 4, i8 4 }, %struct.wedge_code_type { i8 2, i8 4, i8 2 }, %struct.wedge_code_type { i8 2, i8 4, i8 6 }, %struct.wedge_code_type { i8 5, i8 4, i8 2 }, %struct.wedge_code_type { i8 5, i8 4, i8 6 }, %struct.wedge_code_type { i8 3, i8 2, i8 4 }, %struct.wedge_code_type { i8 3, i8 6, i8 4 }, %struct.wedge_code_type { i8 4, i8 2, i8 4 }, %struct.wedge_code_type { i8 4, i8 6, i8 4 }], align 16
@wedge_masks_422_16x16 = internal global [8192 x i8] zeroinitializer, align 64
@wedge_masks_420_16x8 = internal global [4096 x i8] zeroinitializer, align 64
@wedge_masks_444_32x8 = internal global [8192 x i8] zeroinitializer, align 64
@wedge_masks_422_16x8 = internal global [4096 x i8] zeroinitializer, align 64
@wedge_masks_420_16x4 = internal global [2048 x i8] zeroinitializer, align 64
@wedge_masks_444_16x32 = internal global [16384 x i8] zeroinitializer, align 64
@wedge_codebook_16_hgtw = internal constant [16 x %struct.wedge_code_type] [%struct.wedge_code_type { i8 2, i8 4, i8 4 }, %struct.wedge_code_type { i8 3, i8 4, i8 4 }, %struct.wedge_code_type { i8 4, i8 4, i8 4 }, %struct.wedge_code_type { i8 5, i8 4, i8 4 }, %struct.wedge_code_type { i8 0, i8 4, i8 2 }, %struct.wedge_code_type { i8 0, i8 4, i8 4 }, %struct.wedge_code_type { i8 0, i8 4, i8 6 }, %struct.wedge_code_type { i8 1, i8 4, i8 4 }, %struct.wedge_code_type { i8 2, i8 4, i8 2 }, %struct.wedge_code_type { i8 2, i8 4, i8 6 }, %struct.wedge_code_type { i8 5, i8 4, i8 2 }, %struct.wedge_code_type { i8 5, i8 4, i8 6 }, %struct.wedge_code_type { i8 3, i8 2, i8 4 }, %struct.wedge_code_type { i8 3, i8 6, i8 4 }, %struct.wedge_code_type { i8 4, i8 2, i8 4 }, %struct.wedge_code_type { i8 4, i8 6, i8 4 }], align 16
@wedge_masks_422_8x32 = internal global [8192 x i8] zeroinitializer, align 64
@wedge_masks_420_8x16 = internal global [4096 x i8] zeroinitializer, align 64
@wedge_masks_444_16x16 = internal global [8192 x i8] zeroinitializer, align 64
@wedge_masks_422_8x16 = internal global [4096 x i8] zeroinitializer, align 64
@wedge_masks_420_8x8 = internal global [2048 x i8] zeroinitializer, align 64
@wedge_masks_444_16x8 = internal global [4096 x i8] zeroinitializer, align 64
@wedge_masks_422_8x8 = internal global [2048 x i8] zeroinitializer, align 64
@wedge_masks_420_8x4 = internal global [1024 x i8] zeroinitializer, align 64
@wedge_masks_444_8x32 = internal global [8192 x i8] zeroinitializer, align 64
@wedge_masks_422_4x32 = internal global [4096 x i8] zeroinitializer, align 64
@wedge_masks_420_4x16 = internal global [2048 x i8] zeroinitializer, align 64
@wedge_masks_444_8x16 = internal global [4096 x i8] zeroinitializer, align 64
@wedge_masks_422_4x16 = internal global [2048 x i8] zeroinitializer, align 64
@wedge_masks_420_4x8 = internal global [1024 x i8] zeroinitializer, align 32
@wedge_masks_444_8x8 = internal global [2048 x i8] zeroinitializer, align 64
@wedge_masks_422_4x8 = internal global [1024 x i8] zeroinitializer, align 32
@wedge_masks_420_4x4 = internal global [512 x i8] zeroinitializer, align 16
@ii_dc_mask = internal global [1024 x i8] zeroinitializer, align 64
@ii_nondc_mask_32x32 = internal global [3 x [1024 x i8]] zeroinitializer, align 64
@ii_nondc_mask_16x32 = internal global [3 x [512 x i8]] zeroinitializer, align 64
@ii_nondc_mask_16x16 = internal global [3 x [256 x i8]] zeroinitializer, align 64
@ii_nondc_mask_8x32 = internal global [3 x [256 x i8]] zeroinitializer, align 64
@ii_nondc_mask_8x16 = internal global [3 x [128 x i8]] zeroinitializer, align 64
@ii_nondc_mask_8x8 = internal global [3 x [64 x i8]] zeroinitializer, align 64
@ii_nondc_mask_4x16 = internal global [3 x [64 x i8]] zeroinitializer, align 64
@ii_nondc_mask_4x8 = internal global [3 x [32 x i8]] zeroinitializer, align 32
@ii_nondc_mask_4x4 = internal global [3 x [16 x i8]] zeroinitializer, align 16
@dav1d_ii_masks = hidden local_unnamed_addr global [22 x [3 x [4 x i8*]]] [[3 x [4 x i8*]] zeroinitializer, [3 x [4 x i8*]] zeroinitializer, [3 x [4 x i8*]] zeroinitializer, [3 x [4 x i8*]] zeroinitializer, [3 x [4 x i8*]] zeroinitializer, [3 x [4 x i8*]] zeroinitializer, [3 x [4 x i8*]] zeroinitializer, [3 x [4 x i8*]] [[4 x i8*] [i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ii_dc_mask, i32 0, i32 0), i8* getelementptr inbounds ([3 x [1024 x i8]], [3 x [1024 x i8]]* @ii_nondc_mask_32x32, i32 0, i32 0, i32 0), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [1024 x i8]], [3 x [1024 x i8]]* @ii_nondc_mask_32x32, i32 0, i32 0, i32 0), i64 1024), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [1024 x i8]], [3 x [1024 x i8]]* @ii_nondc_mask_32x32, i32 0, i32 0, i32 0), i64 2048)], [4 x i8*] [i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ii_dc_mask, i32 0, i32 0), i8* getelementptr inbounds ([3 x [512 x i8]], [3 x [512 x i8]]* @ii_nondc_mask_16x32, i32 0, i32 0, i32 0), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [512 x i8]], [3 x [512 x i8]]* @ii_nondc_mask_16x32, i32 0, i32 0, i32 0), i64 512), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [512 x i8]], [3 x [512 x i8]]* @ii_nondc_mask_16x32, i32 0, i32 0, i32 0), i64 1024)], [4 x i8*] [i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ii_dc_mask, i32 0, i32 0), i8* getelementptr inbounds ([3 x [256 x i8]], [3 x [256 x i8]]* @ii_nondc_mask_16x16, i32 0, i32 0, i32 0), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [256 x i8]], [3 x [256 x i8]]* @ii_nondc_mask_16x16, i32 0, i32 0, i32 0), i64 256), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [256 x i8]], [3 x [256 x i8]]* @ii_nondc_mask_16x16, i32 0, i32 0, i32 0), i64 512)]], [3 x [4 x i8*]] [[4 x i8*] [i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ii_dc_mask, i32 0, i32 0), i8* getelementptr inbounds ([3 x [1024 x i8]], [3 x [1024 x i8]]* @ii_nondc_mask_32x32, i32 0, i32 0, i32 0), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [1024 x i8]], [3 x [1024 x i8]]* @ii_nondc_mask_32x32, i32 0, i32 0, i32 0), i64 1024), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [1024 x i8]], [3 x [1024 x i8]]* @ii_nondc_mask_32x32, i32 0, i32 0, i32 0), i64 2048)], [4 x i8*] [i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ii_dc_mask, i32 0, i32 0), i8* getelementptr inbounds ([3 x [256 x i8]], [3 x [256 x i8]]* @ii_nondc_mask_16x16, i32 0, i32 0, i32 0), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [256 x i8]], [3 x [256 x i8]]* @ii_nondc_mask_16x16, i32 0, i32 0, i32 0), i64 256), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [256 x i8]], [3 x [256 x i8]]* @ii_nondc_mask_16x16, i32 0, i32 0, i32 0), i64 512)], [4 x i8*] [i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ii_dc_mask, i32 0, i32 0), i8* getelementptr inbounds ([3 x [256 x i8]], [3 x [256 x i8]]* @ii_nondc_mask_16x16, i32 0, i32 0, i32 0), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [256 x i8]], [3 x [256 x i8]]* @ii_nondc_mask_16x16, i32 0, i32 0, i32 0), i64 256), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [256 x i8]], [3 x [256 x i8]]* @ii_nondc_mask_16x16, i32 0, i32 0, i32 0), i64 512)]], [3 x [4 x i8*]] zeroinitializer, [3 x [4 x i8*]] zeroinitializer, [3 x [4 x i8*]] [[4 x i8*] [i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ii_dc_mask, i32 0, i32 0), i8* getelementptr inbounds ([3 x [512 x i8]], [3 x [512 x i8]]* @ii_nondc_mask_16x32, i32 0, i32 0, i32 0), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [512 x i8]], [3 x [512 x i8]]* @ii_nondc_mask_16x32, i32 0, i32 0, i32 0), i64 512), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [512 x i8]], [3 x [512 x i8]]* @ii_nondc_mask_16x32, i32 0, i32 0, i32 0), i64 1024)], [4 x i8*] [i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ii_dc_mask, i32 0, i32 0), i8* getelementptr inbounds ([3 x [256 x i8]], [3 x [256 x i8]]* @ii_nondc_mask_8x32, i32 0, i32 0, i32 0), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [256 x i8]], [3 x [256 x i8]]* @ii_nondc_mask_8x32, i32 0, i32 0, i32 0), i64 256), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [256 x i8]], [3 x [256 x i8]]* @ii_nondc_mask_8x32, i32 0, i32 0, i32 0), i64 512)], [4 x i8*] [i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ii_dc_mask, i32 0, i32 0), i8* getelementptr inbounds ([3 x [128 x i8]], [3 x [128 x i8]]* @ii_nondc_mask_8x16, i32 0, i32 0, i32 0), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [128 x i8]], [3 x [128 x i8]]* @ii_nondc_mask_8x16, i32 0, i32 0, i32 0), i64 128), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [128 x i8]], [3 x [128 x i8]]* @ii_nondc_mask_8x16, i32 0, i32 0, i32 0), i64 256)]], [3 x [4 x i8*]] [[4 x i8*] [i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ii_dc_mask, i32 0, i32 0), i8* getelementptr inbounds ([3 x [256 x i8]], [3 x [256 x i8]]* @ii_nondc_mask_16x16, i32 0, i32 0, i32 0), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [256 x i8]], [3 x [256 x i8]]* @ii_nondc_mask_16x16, i32 0, i32 0, i32 0), i64 256), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [256 x i8]], [3 x [256 x i8]]* @ii_nondc_mask_16x16, i32 0, i32 0, i32 0), i64 512)], [4 x i8*] [i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ii_dc_mask, i32 0, i32 0), i8* getelementptr inbounds ([3 x [128 x i8]], [3 x [128 x i8]]* @ii_nondc_mask_8x16, i32 0, i32 0, i32 0), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [128 x i8]], [3 x [128 x i8]]* @ii_nondc_mask_8x16, i32 0, i32 0, i32 0), i64 128), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [128 x i8]], [3 x [128 x i8]]* @ii_nondc_mask_8x16, i32 0, i32 0, i32 0), i64 256)], [4 x i8*] [i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ii_dc_mask, i32 0, i32 0), i8* getelementptr inbounds ([3 x [64 x i8]], [3 x [64 x i8]]* @ii_nondc_mask_8x8, i32 0, i32 0, i32 0), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [64 x i8]], [3 x [64 x i8]]* @ii_nondc_mask_8x8, i32 0, i32 0, i32 0), i64 64), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [64 x i8]], [3 x [64 x i8]]* @ii_nondc_mask_8x8, i32 0, i32 0, i32 0), i64 128)]], [3 x [4 x i8*]] [[4 x i8*] [i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ii_dc_mask, i32 0, i32 0), i8* getelementptr inbounds ([3 x [256 x i8]], [3 x [256 x i8]]* @ii_nondc_mask_16x16, i32 0, i32 0, i32 0), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [256 x i8]], [3 x [256 x i8]]* @ii_nondc_mask_16x16, i32 0, i32 0, i32 0), i64 256), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [256 x i8]], [3 x [256 x i8]]* @ii_nondc_mask_16x16, i32 0, i32 0, i32 0), i64 512)], [4 x i8*] [i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ii_dc_mask, i32 0, i32 0), i8* getelementptr inbounds ([3 x [64 x i8]], [3 x [64 x i8]]* @ii_nondc_mask_8x8, i32 0, i32 0, i32 0), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [64 x i8]], [3 x [64 x i8]]* @ii_nondc_mask_8x8, i32 0, i32 0, i32 0), i64 64), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [64 x i8]], [3 x [64 x i8]]* @ii_nondc_mask_8x8, i32 0, i32 0, i32 0), i64 128)], [4 x i8*] [i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ii_dc_mask, i32 0, i32 0), i8* getelementptr inbounds ([3 x [64 x i8]], [3 x [64 x i8]]* @ii_nondc_mask_8x8, i32 0, i32 0, i32 0), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [64 x i8]], [3 x [64 x i8]]* @ii_nondc_mask_8x8, i32 0, i32 0, i32 0), i64 64), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [64 x i8]], [3 x [64 x i8]]* @ii_nondc_mask_8x8, i32 0, i32 0, i32 0), i64 128)]], [3 x [4 x i8*]] zeroinitializer, [3 x [4 x i8*]] zeroinitializer, [3 x [4 x i8*]] [[4 x i8*] [i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ii_dc_mask, i32 0, i32 0), i8* getelementptr inbounds ([3 x [128 x i8]], [3 x [128 x i8]]* @ii_nondc_mask_8x16, i32 0, i32 0, i32 0), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [128 x i8]], [3 x [128 x i8]]* @ii_nondc_mask_8x16, i32 0, i32 0, i32 0), i64 128), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [128 x i8]], [3 x [128 x i8]]* @ii_nondc_mask_8x16, i32 0, i32 0, i32 0), i64 256)], [4 x i8*] [i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ii_dc_mask, i32 0, i32 0), i8* getelementptr inbounds ([3 x [64 x i8]], [3 x [64 x i8]]* @ii_nondc_mask_4x16, i32 0, i32 0, i32 0), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [64 x i8]], [3 x [64 x i8]]* @ii_nondc_mask_4x16, i32 0, i32 0, i32 0), i64 64), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [64 x i8]], [3 x [64 x i8]]* @ii_nondc_mask_4x16, i32 0, i32 0, i32 0), i64 128)], [4 x i8*] [i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ii_dc_mask, i32 0, i32 0), i8* getelementptr inbounds ([3 x [32 x i8]], [3 x [32 x i8]]* @ii_nondc_mask_4x8, i32 0, i32 0, i32 0), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [32 x i8]], [3 x [32 x i8]]* @ii_nondc_mask_4x8, i32 0, i32 0, i32 0), i64 32), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [32 x i8]], [3 x [32 x i8]]* @ii_nondc_mask_4x8, i32 0, i32 0, i32 0), i64 64)]], [3 x [4 x i8*]] [[4 x i8*] [i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ii_dc_mask, i32 0, i32 0), i8* getelementptr inbounds ([3 x [64 x i8]], [3 x [64 x i8]]* @ii_nondc_mask_8x8, i32 0, i32 0, i32 0), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [64 x i8]], [3 x [64 x i8]]* @ii_nondc_mask_8x8, i32 0, i32 0, i32 0), i64 64), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [64 x i8]], [3 x [64 x i8]]* @ii_nondc_mask_8x8, i32 0, i32 0, i32 0), i64 128)], [4 x i8*] [i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ii_dc_mask, i32 0, i32 0), i8* getelementptr inbounds ([3 x [32 x i8]], [3 x [32 x i8]]* @ii_nondc_mask_4x8, i32 0, i32 0, i32 0), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [32 x i8]], [3 x [32 x i8]]* @ii_nondc_mask_4x8, i32 0, i32 0, i32 0), i64 32), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [32 x i8]], [3 x [32 x i8]]* @ii_nondc_mask_4x8, i32 0, i32 0, i32 0), i64 64)], [4 x i8*] [i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ii_dc_mask, i32 0, i32 0), i8* getelementptr inbounds ([3 x [16 x i8]], [3 x [16 x i8]]* @ii_nondc_mask_4x4, i32 0, i32 0, i32 0), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [16 x i8]], [3 x [16 x i8]]* @ii_nondc_mask_4x4, i32 0, i32 0, i32 0), i64 16), i8* getelementptr (i8, i8* getelementptr inbounds ([3 x [16 x i8]], [3 x [16 x i8]]* @ii_nondc_mask_4x4, i32 0, i32 0, i32 0), i64 32)]], [3 x [4 x i8*]] zeroinitializer, [3 x [4 x i8*]] zeroinitializer, [3 x [4 x i8*]] zeroinitializer, [3 x [4 x i8*]] zeroinitializer], align 16
@dav1d_wedge_masks = common hidden local_unnamed_addr global [22 x [3 x [2 x [16 x i8*]]]] zeroinitializer, align 16
@build_nondc_ii_masks.ii_weights_1d = internal unnamed_addr constant [32 x i8] c"<4-'\22\1E\1A\16\13\11\0F\0D\0B\0A\08\07\06\06\05\04\04\03\03\02\02\02\02\01\01\01\01\01", align 16

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden void @dav1d_init_wedge_masks() local_unnamed_addr #0 {
  %1 = alloca [6 x [4096 x i8]], align 16
  %2 = getelementptr inbounds [6 x [4096 x i8]], [6 x [4096 x i8]]* %1, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24576, i8* nonnull %2) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %2, i8 -86, i64 24576, i1 false)
  br label %3

3:                                                ; preds = %3, %0
  %4 = phi i64 [ 0, %0 ], [ %11, %3 ]
  %5 = phi i32 [ 0, %0 ], [ %10, %3 ]
  %6 = getelementptr inbounds [6 x [4096 x i8]], [6 x [4096 x i8]]* %1, i64 0, i64 1, i64 %4
  call void @llvm.memset.p0i8.i64(i8* align 16 %6, i8 0, i64 28, i1 false) #4
  %7 = getelementptr inbounds i8, i8* %6, i64 28
  %8 = bitcast i8* %7 to i64*
  store i64 4629200324182606336, i64* %8, align 4
  %9 = getelementptr inbounds i8, i8* %6, i64 36
  call void @llvm.memset.p0i8.i64(i8* align 4 %9, i8 64, i64 28, i1 false) #4
  %10 = add nuw nsw i32 %5, 1
  %11 = add nuw nsw i64 %4, 64
  %12 = icmp eq i32 %10, 64
  br i1 %12, label %86, label %3

13:                                               ; preds = %86, %16
  %14 = phi i64 [ %17, %16 ], [ 0, %86 ]
  %15 = phi i64 [ %18, %16 ], [ 0, %86 ]
  br label %20

16:                                               ; preds = %20
  %17 = add nuw nsw i64 %14, 1
  %18 = add nuw nsw i64 %15, 64
  %19 = icmp eq i64 %17, 64
  br i1 %19, label %31, label %13

20:                                               ; preds = %20, %13
  %21 = phi i64 [ 0, %13 ], [ %28, %20 ]
  %22 = phi i64 [ 0, %13 ], [ %29, %20 ]
  %23 = add nuw nsw i64 %21, %15
  %24 = getelementptr inbounds [6 x [4096 x i8]], [6 x [4096 x i8]]* %1, i64 0, i64 3, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = add nuw nsw i64 %22, %14
  %27 = getelementptr inbounds [6 x [4096 x i8]], [6 x [4096 x i8]]* %1, i64 0, i64 2, i64 %26
  store i8 %25, i8* %27, align 1
  %28 = add nuw nsw i64 %21, 1
  %29 = add nuw nsw i64 %22, 64
  %30 = icmp eq i64 %28, 64
  br i1 %30, label %16, label %20

31:                                               ; preds = %16, %34
  %32 = phi i64 [ %35, %34 ], [ 0, %16 ]
  %33 = phi i64 [ %36, %34 ], [ 0, %16 ]
  br label %40

34:                                               ; preds = %40
  %35 = add nuw nsw i64 %32, 1
  %36 = add nuw nsw i64 %33, 64
  %37 = icmp eq i64 %35, 64
  br i1 %37, label %38, label %31

38:                                               ; preds = %34
  %39 = getelementptr inbounds [6 x [4096 x i8]], [6 x [4096 x i8]]* %1, i64 0, i64 0
  br label %51

40:                                               ; preds = %40, %31
  %41 = phi i64 [ 0, %31 ], [ %48, %40 ]
  %42 = phi i64 [ 0, %31 ], [ %49, %40 ]
  %43 = add nuw nsw i64 %41, %33
  %44 = getelementptr inbounds [6 x [4096 x i8]], [6 x [4096 x i8]]* %1, i64 0, i64 1, i64 %43
  %45 = load i8, i8* %44, align 1
  %46 = add nuw nsw i64 %42, %32
  %47 = getelementptr inbounds [6 x [4096 x i8]], [6 x [4096 x i8]]* %1, i64 0, i64 0, i64 %46
  store i8 %45, i8* %47, align 1
  %48 = add nuw nsw i64 %41, 1
  %49 = add nuw nsw i64 %42, 64
  %50 = icmp eq i64 %48, 64
  br i1 %50, label %34, label %40

51:                                               ; preds = %38, %55
  %52 = phi i64 [ %57, %55 ], [ 0, %38 ]
  %53 = phi i32 [ %56, %55 ], [ 0, %38 ]
  %54 = or i64 %52, 63
  br label %59

55:                                               ; preds = %59
  %56 = add nuw nsw i32 %53, 1
  %57 = add nuw nsw i64 %52, 64
  %58 = icmp eq i32 %56, 64
  br i1 %58, label %68, label %51

59:                                               ; preds = %59, %51
  %60 = phi i64 [ 0, %51 ], [ %66, %59 ]
  %61 = add nuw nsw i64 %60, %52
  %62 = getelementptr inbounds [6 x [4096 x i8]], [6 x [4096 x i8]]* %1, i64 0, i64 3, i64 %61
  %63 = load i8, i8* %62, align 1
  %64 = sub nuw nsw i64 %54, %60
  %65 = getelementptr inbounds [6 x [4096 x i8]], [6 x [4096 x i8]]* %1, i64 0, i64 4, i64 %64
  store i8 %63, i8* %65, align 1
  %66 = add nuw nsw i64 %60, 1
  %67 = icmp eq i64 %66, 64
  br i1 %67, label %55, label %59

68:                                               ; preds = %55, %72
  %69 = phi i64 [ %74, %72 ], [ 0, %55 ]
  %70 = phi i32 [ %73, %72 ], [ 0, %55 ]
  %71 = or i64 %69, 63
  br label %76

72:                                               ; preds = %76
  %73 = add nuw nsw i32 %70, 1
  %74 = add nuw nsw i64 %69, 64
  %75 = icmp eq i32 %73, 64
  br i1 %75, label %85, label %68

76:                                               ; preds = %76, %68
  %77 = phi i64 [ 0, %68 ], [ %83, %76 ]
  %78 = add nuw nsw i64 %77, %69
  %79 = getelementptr inbounds [6 x [4096 x i8]], [6 x [4096 x i8]]* %1, i64 0, i64 2, i64 %78
  %80 = load i8, i8* %79, align 1
  %81 = sub nuw nsw i64 %71, %77
  %82 = getelementptr inbounds [6 x [4096 x i8]], [6 x [4096 x i8]]* %1, i64 0, i64 5, i64 %81
  store i8 %80, i8* %82, align 1
  %83 = add nuw nsw i64 %77, 1
  %84 = icmp eq i64 %83, 64
  br i1 %84, label %72, label %76

85:                                               ; preds = %72
  call fastcc void @fill2d_16x2(i8* getelementptr inbounds ([32768 x i8], [32768 x i8]* @wedge_masks_444_32x32, i64 0, i64 0), i32 32, i32 32, i32 7, [4096 x i8]* nonnull %39, %struct.wedge_code_type* getelementptr inbounds ([16 x %struct.wedge_code_type], [16 x %struct.wedge_code_type]* @wedge_codebook_16_heqw, i64 0, i64 0), i8* getelementptr inbounds ([32768 x i8], [32768 x i8]* @wedge_masks_444_32x32, i64 0, i64 0), i8* getelementptr inbounds ([16384 x i8], [16384 x i8]* @wedge_masks_422_16x32, i64 0, i64 0), i8* getelementptr inbounds ([8192 x i8], [8192 x i8]* @wedge_masks_420_16x16, i64 0, i64 0), i32 31739) #5
  call fastcc void @fill2d_16x2(i8* getelementptr inbounds ([16384 x i8], [16384 x i8]* @wedge_masks_444_32x16, i64 0, i64 0), i32 32, i32 16, i32 8, [4096 x i8]* nonnull %39, %struct.wedge_code_type* getelementptr inbounds ([16 x %struct.wedge_code_type], [16 x %struct.wedge_code_type]* @wedge_codebook_16_hltw, i64 0, i64 0), i8* getelementptr inbounds ([16384 x i8], [16384 x i8]* @wedge_masks_444_32x16, i64 0, i64 0), i8* getelementptr inbounds ([8192 x i8], [8192 x i8]* @wedge_masks_422_16x16, i64 0, i64 0), i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @wedge_masks_420_16x8, i64 0, i64 0), i32 31723) #5
  call fastcc void @fill2d_16x2(i8* getelementptr inbounds ([8192 x i8], [8192 x i8]* @wedge_masks_444_32x8, i64 0, i64 0), i32 32, i32 8, i32 9, [4096 x i8]* nonnull %39, %struct.wedge_code_type* getelementptr inbounds ([16 x %struct.wedge_code_type], [16 x %struct.wedge_code_type]* @wedge_codebook_16_hltw, i64 0, i64 0), i8* getelementptr inbounds ([8192 x i8], [8192 x i8]* @wedge_masks_444_32x8, i64 0, i64 0), i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @wedge_masks_422_16x8, i64 0, i64 0), i8* getelementptr inbounds ([2048 x i8], [2048 x i8]* @wedge_masks_420_16x4, i64 0, i64 0), i32 27627) #5
  call fastcc void @fill2d_16x2(i8* getelementptr inbounds ([16384 x i8], [16384 x i8]* @wedge_masks_444_16x32, i64 0, i64 0), i32 16, i32 32, i32 11, [4096 x i8]* nonnull %39, %struct.wedge_code_type* getelementptr inbounds ([16 x %struct.wedge_code_type], [16 x %struct.wedge_code_type]* @wedge_codebook_16_hgtw, i64 0, i64 0), i8* getelementptr inbounds ([16384 x i8], [16384 x i8]* @wedge_masks_444_16x32, i64 0, i64 0), i8* getelementptr inbounds ([8192 x i8], [8192 x i8]* @wedge_masks_422_8x32, i64 0, i64 0), i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @wedge_masks_420_8x16, i64 0, i64 0), i32 31723) #5
  call fastcc void @fill2d_16x2(i8* getelementptr inbounds ([8192 x i8], [8192 x i8]* @wedge_masks_444_16x16, i64 0, i64 0), i32 16, i32 16, i32 12, [4096 x i8]* nonnull %39, %struct.wedge_code_type* getelementptr inbounds ([16 x %struct.wedge_code_type], [16 x %struct.wedge_code_type]* @wedge_codebook_16_heqw, i64 0, i64 0), i8* getelementptr inbounds ([8192 x i8], [8192 x i8]* @wedge_masks_444_16x16, i64 0, i64 0), i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @wedge_masks_422_8x16, i64 0, i64 0), i8* getelementptr inbounds ([2048 x i8], [2048 x i8]* @wedge_masks_420_8x8, i64 0, i64 0), i32 31739) #5
  call fastcc void @fill2d_16x2(i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @wedge_masks_444_16x8, i64 0, i64 0), i32 16, i32 8, i32 13, [4096 x i8]* nonnull %39, %struct.wedge_code_type* getelementptr inbounds ([16 x %struct.wedge_code_type], [16 x %struct.wedge_code_type]* @wedge_codebook_16_hltw, i64 0, i64 0), i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @wedge_masks_444_16x8, i64 0, i64 0), i8* getelementptr inbounds ([2048 x i8], [2048 x i8]* @wedge_masks_422_8x8, i64 0, i64 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @wedge_masks_420_8x4, i64 0, i64 0), i32 31723) #5
  call fastcc void @fill2d_16x2(i8* getelementptr inbounds ([8192 x i8], [8192 x i8]* @wedge_masks_444_8x32, i64 0, i64 0), i32 8, i32 32, i32 15, [4096 x i8]* nonnull %39, %struct.wedge_code_type* getelementptr inbounds ([16 x %struct.wedge_code_type], [16 x %struct.wedge_code_type]* @wedge_codebook_16_hgtw, i64 0, i64 0), i8* getelementptr inbounds ([8192 x i8], [8192 x i8]* @wedge_masks_444_8x32, i64 0, i64 0), i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @wedge_masks_422_4x32, i64 0, i64 0), i8* getelementptr inbounds ([2048 x i8], [2048 x i8]* @wedge_masks_420_4x16, i64 0, i64 0), i32 31467) #5
  call fastcc void @fill2d_16x2(i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @wedge_masks_444_8x16, i64 0, i64 0), i32 8, i32 16, i32 16, [4096 x i8]* nonnull %39, %struct.wedge_code_type* getelementptr inbounds ([16 x %struct.wedge_code_type], [16 x %struct.wedge_code_type]* @wedge_codebook_16_hgtw, i64 0, i64 0), i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @wedge_masks_444_8x16, i64 0, i64 0), i8* getelementptr inbounds ([2048 x i8], [2048 x i8]* @wedge_masks_422_4x16, i64 0, i64 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @wedge_masks_420_4x8, i64 0, i64 0), i32 31723) #5
  call fastcc void @fill2d_16x2(i8* getelementptr inbounds ([2048 x i8], [2048 x i8]* @wedge_masks_444_8x8, i64 0, i64 0), i32 8, i32 8, i32 17, [4096 x i8]* nonnull %39, %struct.wedge_code_type* getelementptr inbounds ([16 x %struct.wedge_code_type], [16 x %struct.wedge_code_type]* @wedge_codebook_16_heqw, i64 0, i64 0), i8* getelementptr inbounds ([2048 x i8], [2048 x i8]* @wedge_masks_444_8x8, i64 0, i64 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @wedge_masks_422_4x8, i64 0, i64 0), i8* getelementptr inbounds ([512 x i8], [512 x i8]* @wedge_masks_420_4x4, i64 0, i64 0), i32 31739) #5
  call void @llvm.lifetime.end.p0i8(i64 24576, i8* nonnull %2) #4
  ret void

86:                                               ; preds = %3, %86
  %87 = phi i64 [ %95, %86 ], [ 0, %3 ]
  %88 = phi i32 [ %93, %86 ], [ 48, %3 ]
  %89 = phi i32 [ %94, %86 ], [ 0, %3 ]
  %90 = getelementptr inbounds [6 x [4096 x i8]], [6 x [4096 x i8]]* %1, i64 0, i64 3, i64 %87
  call fastcc void @insert_border(i8* %90, i8* getelementptr inbounds ([3 x [8 x i8]], [3 x [8 x i8]]* @dav1d_init_wedge_masks.wedge_master_border, i64 0, i64 1, i64 0), i32 %88)
  %91 = or i64 %87, 64
  %92 = getelementptr inbounds [6 x [4096 x i8]], [6 x [4096 x i8]]* %1, i64 0, i64 3, i64 %91
  %93 = add nsw i32 %88, -1
  call fastcc void @insert_border(i8* %92, i8* getelementptr inbounds ([3 x [8 x i8]], [3 x [8 x i8]]* @dav1d_init_wedge_masks.wedge_master_border, i64 0, i64 0, i64 0), i32 %93)
  %94 = add nuw nsw i32 %89, 2
  %95 = add nuw nsw i64 %87, 128
  %96 = icmp ult i32 %94, 64
  br i1 %96, label %86, label %13
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @insert_border(i8* nocapture, i8* nocapture readonly, i32) unnamed_addr #2 {
  %4 = icmp sgt i32 %2, 4
  br i1 %4, label %5, label %8

5:                                                ; preds = %3
  %6 = add nsw i32 %2, -4
  %7 = sext i32 %6 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 0, i64 %7, i1 false)
  br label %8

8:                                                ; preds = %5, %3
  %9 = select i1 %4, i32 %2, i32 4
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds i8, i8* %0, i64 %10
  %12 = getelementptr inbounds i8, i8* %11, i64 -4
  %13 = sub nsw i32 4, %2
  %14 = icmp sgt i32 %13, 0
  %15 = select i1 %14, i32 %13, i32 0
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds i8, i8* %1, i64 %16
  %18 = sub nsw i32 64, %2
  %19 = icmp slt i32 %18, 8
  %20 = select i1 %19, i32 %18, i32 8
  %21 = sext i32 %20 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 %17, i64 %21, i1 false)
  %22 = icmp slt i32 %2, 60
  br i1 %22, label %23, label %29

23:                                               ; preds = %8
  %24 = sext i32 %2 to i64
  %25 = getelementptr inbounds i8, i8* %0, i64 %24
  %26 = getelementptr inbounds i8, i8* %25, i64 4
  %27 = sub nsw i32 60, %2
  %28 = sext i32 %27 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %26, i8 64, i64 %28, i1 false)
  br label %29

29:                                               ; preds = %23, %8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: cold nounwind optsize ssp uwtable
define internal fastcc void @fill2d_16x2(i8* nocapture, i32, i32, i32, [4096 x i8]* nocapture readonly, %struct.wedge_code_type* nocapture readonly, i8*, i8*, i8*, i32) unnamed_addr #0 {
  %11 = icmp sgt i32 %2, 0
  %12 = sext i32 %1 to i64
  %13 = mul nsw i32 %2, %1
  %14 = sext i32 %13 to i64
  br label %18

15:                                               ; preds = %48
  %16 = icmp sgt i32 %1, 0
  %17 = zext i32 %1 to i64
  br label %61

18:                                               ; preds = %48, %10
  %19 = phi i64 [ 0, %10 ], [ %50, %48 ]
  %20 = phi i8* [ %0, %10 ], [ %49, %48 ]
  br i1 %11, label %21, label %48

21:                                               ; preds = %18
  %22 = getelementptr inbounds %struct.wedge_code_type, %struct.wedge_code_type* %5, i64 %19, i32 2
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = mul nsw i32 %24, %2
  %26 = lshr i32 %25, 3
  %27 = getelementptr inbounds %struct.wedge_code_type, %struct.wedge_code_type* %5, i64 %19, i32 1
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = mul nsw i32 %29, %1
  %31 = ashr i32 %30, 3
  %32 = getelementptr inbounds %struct.wedge_code_type, %struct.wedge_code_type* %5, i64 %19, i32 0
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i64
  %35 = shl i32 %26, 6
  %36 = sub i32 2080, %35
  %37 = sub i32 %36, %31
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds [4096 x i8], [4096 x i8]* %4, i64 %34, i64 %38
  br label %40

40:                                               ; preds = %40, %21
  %41 = phi i32 [ 0, %21 ], [ %46, %40 ]
  %42 = phi i8* [ %20, %21 ], [ %45, %40 ]
  %43 = phi i8* [ %39, %21 ], [ %44, %40 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %42, i8* align 1 %43, i64 %12, i1 false) #4
  %44 = getelementptr inbounds i8, i8* %43, i64 64
  %45 = getelementptr inbounds i8, i8* %42, i64 %12
  %46 = add nuw nsw i32 %41, 1
  %47 = icmp eq i32 %46, %2
  br i1 %47, label %48, label %40

48:                                               ; preds = %40, %18
  %49 = getelementptr inbounds i8, i8* %20, i64 %14
  %50 = add nuw nsw i64 %19, 1
  %51 = icmp eq i64 %50, 16
  br i1 %51, label %15, label %18

52:                                               ; preds = %82
  %53 = ashr i32 %13, 1
  %54 = ashr i32 %13, 2
  %55 = shl i32 %13, 4
  %56 = shl nsw i32 %53, 4
  %57 = shl nsw i32 %54, 4
  %58 = zext i32 %3 to i64
  %59 = sext i32 %53 to i64
  %60 = sext i32 %54 to i64
  br label %87

61:                                               ; preds = %82, %15
  %62 = phi i64 [ 0, %15 ], [ %84, %82 ]
  %63 = phi i32 [ 0, %15 ], [ %83, %82 ]
  %64 = getelementptr inbounds i8, i8* %49, i64 %62
  %65 = getelementptr inbounds i8, i8* %0, i64 %62
  br i1 %11, label %66, label %82

66:                                               ; preds = %61, %69
  %67 = phi i64 [ %71, %69 ], [ 0, %61 ]
  %68 = phi i32 [ %70, %69 ], [ 0, %61 ]
  br i1 %16, label %73, label %69

69:                                               ; preds = %73, %66
  %70 = add nuw nsw i32 %68, 1
  %71 = add nsw i64 %67, %12
  %72 = icmp eq i32 %70, %2
  br i1 %72, label %82, label %66

73:                                               ; preds = %66, %73
  %74 = phi i64 [ %80, %73 ], [ 0, %66 ]
  %75 = add nsw i64 %74, %67
  %76 = getelementptr inbounds i8, i8* %65, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = sub i8 64, %77
  %79 = getelementptr inbounds i8, i8* %64, i64 %75
  store i8 %78, i8* %79, align 1
  %80 = add nuw nsw i64 %74, 1
  %81 = icmp eq i64 %80, %17
  br i1 %81, label %69, label %73

82:                                               ; preds = %69, %61
  %83 = add nuw nsw i32 %63, 1
  %84 = add nsw i64 %62, %14
  %85 = icmp eq i32 %83, 16
  br i1 %85, label %52, label %61

86:                                               ; preds = %87
  ret void

87:                                               ; preds = %87, %52
  %88 = phi i64 [ 0, %52 ], [ %126, %87 ]
  %89 = phi i8* [ %6, %52 ], [ %117, %87 ]
  %90 = phi i8* [ %7, %52 ], [ %118, %87 ]
  %91 = phi i8* [ %8, %52 ], [ %119, %87 ]
  %92 = trunc i64 %88 to i32
  %93 = lshr i32 %9, %92
  %94 = and i32 %93, 1
  %95 = mul nuw nsw i32 %55, %94
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds i8, i8* %89, i64 %96
  %98 = getelementptr inbounds [22 x [3 x [2 x [16 x i8*]]]], [22 x [3 x [2 x [16 x i8*]]]]* @dav1d_wedge_masks, i64 0, i64 %58, i64 0, i64 0, i64 %88
  store i8* %97, i8** %98, align 8
  %99 = getelementptr inbounds [22 x [3 x [2 x [16 x i8*]]]], [22 x [3 x [2 x [16 x i8*]]]]* @dav1d_wedge_masks, i64 0, i64 %58, i64 0, i64 1, i64 %88
  store i8* %97, i8** %99, align 8
  %100 = mul nuw nsw i32 %94, %56
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds i8, i8* %90, i64 %101
  %103 = getelementptr inbounds [22 x [3 x [2 x [16 x i8*]]]], [22 x [3 x [2 x [16 x i8*]]]]* @dav1d_wedge_masks, i64 0, i64 %58, i64 1, i64 0, i64 %88
  store i8* %102, i8** %103, align 8
  %104 = xor i32 %94, 1
  %105 = mul nuw nsw i32 %104, %56
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i8, i8* %90, i64 %106
  %108 = getelementptr inbounds [22 x [3 x [2 x [16 x i8*]]]], [22 x [3 x [2 x [16 x i8*]]]]* @dav1d_wedge_masks, i64 0, i64 %58, i64 1, i64 1, i64 %88
  store i8* %107, i8** %108, align 8
  %109 = mul nuw nsw i32 %94, %57
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds i8, i8* %91, i64 %110
  %112 = getelementptr inbounds [22 x [3 x [2 x [16 x i8*]]]], [22 x [3 x [2 x [16 x i8*]]]]* @dav1d_wedge_masks, i64 0, i64 %58, i64 2, i64 0, i64 %88
  store i8* %111, i8** %112, align 8
  %113 = mul nuw nsw i32 %104, %57
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds i8, i8* %91, i64 %114
  %116 = getelementptr inbounds [22 x [3 x [2 x [16 x i8*]]]], [22 x [3 x [2 x [16 x i8*]]]]* @dav1d_wedge_masks, i64 0, i64 %58, i64 2, i64 1, i64 %88
  store i8* %115, i8** %116, align 8
  %117 = getelementptr inbounds i8, i8* %89, i64 %14
  %118 = getelementptr inbounds i8, i8* %90, i64 %59
  %119 = getelementptr inbounds i8, i8* %91, i64 %60
  tail call fastcc void @init_chroma(i8* %102, i8* %97, i32 0, i32 %1, i32 %2, i32 0) #5
  %120 = load i8*, i8** %108, align 8
  %121 = load i8*, i8** %98, align 8
  tail call fastcc void @init_chroma(i8* %120, i8* %121, i32 1, i32 %1, i32 %2, i32 0) #5
  %122 = load i8*, i8** %112, align 8
  %123 = load i8*, i8** %98, align 8
  tail call fastcc void @init_chroma(i8* %122, i8* %123, i32 0, i32 %1, i32 %2, i32 1) #5
  %124 = load i8*, i8** %116, align 8
  %125 = load i8*, i8** %98, align 8
  tail call fastcc void @init_chroma(i8* %124, i8* %125, i32 1, i32 %1, i32 %2, i32 1) #5
  %126 = add nuw nsw i64 %88, 1
  %127 = icmp eq i64 %126, 16
  br i1 %127, label %86, label %87
}

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden void @dav1d_init_interintra_masks() local_unnamed_addr #0 {
  tail call void @llvm.memset.p0i8.i64(i8* align 64 getelementptr inbounds ([1024 x i8], [1024 x i8]* @ii_dc_mask, i64 0, i64 0), i8 32, i64 1024, i1 false)
  br label %1

1:                                                ; preds = %7, %0
  %2 = phi i64 [ 0, %0 ], [ %8, %7 ]
  %3 = phi i64 [ 0, %0 ], [ %9, %7 ]
  %4 = getelementptr inbounds [3 x [1024 x i8]], [3 x [1024 x i8]]* @ii_nondc_mask_32x32, i64 0, i64 0, i64 %3
  %5 = getelementptr inbounds [32 x i8], [32 x i8]* @build_nondc_ii_masks.ii_weights_1d, i64 0, i64 %2
  %6 = load i8, i8* %5, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 32 %4, i8 %6, i64 32, i1 false) #4
  br label %11

7:                                                ; preds = %11
  %8 = add nuw nsw i64 %2, 1
  %9 = add nuw nsw i64 %3, 32
  %10 = icmp eq i64 %8, 32
  br i1 %10, label %26, label %1

11:                                               ; preds = %11, %1
  %12 = phi i64 [ %24, %11 ], [ 0, %1 ]
  %13 = icmp ult i64 %12, %2
  %14 = select i1 %13, i64 %12, i64 %2
  %15 = shl i64 %14, 32
  %16 = ashr exact i64 %15, 32
  %17 = getelementptr inbounds [32 x i8], [32 x i8]* @build_nondc_ii_masks.ii_weights_1d, i64 0, i64 %16
  %18 = load i8, i8* %17, align 1
  %19 = add nuw nsw i64 %12, %3
  %20 = getelementptr inbounds [3 x [1024 x i8]], [3 x [1024 x i8]]* @ii_nondc_mask_32x32, i64 0, i64 2, i64 %19
  store i8 %18, i8* %20, align 1
  %21 = getelementptr inbounds [32 x i8], [32 x i8]* @build_nondc_ii_masks.ii_weights_1d, i64 0, i64 %12
  %22 = load i8, i8* %21, align 1
  %23 = getelementptr inbounds [3 x [1024 x i8]], [3 x [1024 x i8]]* @ii_nondc_mask_32x32, i64 0, i64 1, i64 %19
  store i8 %22, i8* %23, align 1
  %24 = add nuw nsw i64 %12, 1
  %25 = icmp eq i64 %24, 32
  br i1 %25, label %7, label %11

26:                                               ; preds = %7, %32
  %27 = phi i64 [ %33, %32 ], [ 0, %7 ]
  %28 = phi i64 [ %34, %32 ], [ 0, %7 ]
  %29 = getelementptr inbounds [3 x [512 x i8]], [3 x [512 x i8]]* @ii_nondc_mask_16x32, i64 0, i64 0, i64 %28
  %30 = getelementptr inbounds [32 x i8], [32 x i8]* @build_nondc_ii_masks.ii_weights_1d, i64 0, i64 %27
  %31 = load i8, i8* %30, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %29, i8 %31, i64 16, i1 false) #4
  br label %36

32:                                               ; preds = %36
  %33 = add nuw nsw i64 %27, 1
  %34 = add nuw nsw i64 %28, 16
  %35 = icmp eq i64 %33, 32
  br i1 %35, label %51, label %26

36:                                               ; preds = %36, %26
  %37 = phi i64 [ %49, %36 ], [ 0, %26 ]
  %38 = icmp ult i64 %37, %27
  %39 = select i1 %38, i64 %37, i64 %27
  %40 = shl i64 %39, 32
  %41 = ashr exact i64 %40, 32
  %42 = getelementptr inbounds [32 x i8], [32 x i8]* @build_nondc_ii_masks.ii_weights_1d, i64 0, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = add nuw nsw i64 %37, %28
  %45 = getelementptr inbounds [3 x [512 x i8]], [3 x [512 x i8]]* @ii_nondc_mask_16x32, i64 0, i64 2, i64 %44
  store i8 %43, i8* %45, align 1
  %46 = getelementptr inbounds [32 x i8], [32 x i8]* @build_nondc_ii_masks.ii_weights_1d, i64 0, i64 %37
  %47 = load i8, i8* %46, align 1
  %48 = getelementptr inbounds [3 x [512 x i8]], [3 x [512 x i8]]* @ii_nondc_mask_16x32, i64 0, i64 1, i64 %44
  store i8 %47, i8* %48, align 1
  %49 = add nuw nsw i64 %37, 1
  %50 = icmp eq i64 %49, 16
  br i1 %50, label %32, label %36

51:                                               ; preds = %32, %58
  %52 = phi i64 [ %59, %58 ], [ 0, %32 ]
  %53 = phi i64 [ %60, %58 ], [ 0, %32 ]
  %54 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* @ii_nondc_mask_16x16, i64 0, i64 0, i64 %53
  %55 = shl nuw nsw i64 %52, 1
  %56 = getelementptr inbounds [32 x i8], [32 x i8]* @build_nondc_ii_masks.ii_weights_1d, i64 0, i64 %55
  %57 = load i8, i8* %56, align 2
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %54, i8 %57, i64 16, i1 false) #4
  br label %62

58:                                               ; preds = %62
  %59 = add nuw nsw i64 %52, 1
  %60 = add nuw nsw i64 %53, 16
  %61 = icmp eq i64 %59, 16
  br i1 %61, label %79, label %51

62:                                               ; preds = %62, %51
  %63 = phi i64 [ %77, %62 ], [ 0, %51 ]
  %64 = icmp ult i64 %63, %52
  %65 = select i1 %64, i64 %63, i64 %52
  %66 = trunc i64 %65 to i32
  %67 = shl nsw i32 %66, 1
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds [32 x i8], [32 x i8]* @build_nondc_ii_masks.ii_weights_1d, i64 0, i64 %68
  %70 = load i8, i8* %69, align 2
  %71 = add nuw nsw i64 %63, %53
  %72 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* @ii_nondc_mask_16x16, i64 0, i64 2, i64 %71
  store i8 %70, i8* %72, align 1
  %73 = shl nuw nsw i64 %63, 1
  %74 = getelementptr inbounds [32 x i8], [32 x i8]* @build_nondc_ii_masks.ii_weights_1d, i64 0, i64 %73
  %75 = load i8, i8* %74, align 2
  %76 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* @ii_nondc_mask_16x16, i64 0, i64 1, i64 %71
  store i8 %75, i8* %76, align 1
  %77 = add nuw nsw i64 %63, 1
  %78 = icmp eq i64 %77, 16
  br i1 %78, label %58, label %62

79:                                               ; preds = %58, %85
  %80 = phi i64 [ %86, %85 ], [ 0, %58 ]
  %81 = phi i64 [ %87, %85 ], [ 0, %58 ]
  %82 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* @ii_nondc_mask_8x32, i64 0, i64 0, i64 %81
  %83 = getelementptr inbounds [32 x i8], [32 x i8]* @build_nondc_ii_masks.ii_weights_1d, i64 0, i64 %80
  %84 = load i8, i8* %83, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %82, i8 %84, i64 8, i1 false) #4
  br label %89

85:                                               ; preds = %89
  %86 = add nuw nsw i64 %80, 1
  %87 = add nuw nsw i64 %81, 8
  %88 = icmp eq i64 %86, 32
  br i1 %88, label %104, label %79

89:                                               ; preds = %89, %79
  %90 = phi i64 [ %102, %89 ], [ 0, %79 ]
  %91 = icmp ult i64 %90, %80
  %92 = select i1 %91, i64 %90, i64 %80
  %93 = shl i64 %92, 32
  %94 = ashr exact i64 %93, 32
  %95 = getelementptr inbounds [32 x i8], [32 x i8]* @build_nondc_ii_masks.ii_weights_1d, i64 0, i64 %94
  %96 = load i8, i8* %95, align 1
  %97 = add nuw nsw i64 %90, %81
  %98 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* @ii_nondc_mask_8x32, i64 0, i64 2, i64 %97
  store i8 %96, i8* %98, align 1
  %99 = getelementptr inbounds [32 x i8], [32 x i8]* @build_nondc_ii_masks.ii_weights_1d, i64 0, i64 %90
  %100 = load i8, i8* %99, align 1
  %101 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* @ii_nondc_mask_8x32, i64 0, i64 1, i64 %97
  store i8 %100, i8* %101, align 1
  %102 = add nuw nsw i64 %90, 1
  %103 = icmp eq i64 %102, 8
  br i1 %103, label %85, label %89

104:                                              ; preds = %85, %111
  %105 = phi i64 [ %112, %111 ], [ 0, %85 ]
  %106 = phi i64 [ %113, %111 ], [ 0, %85 ]
  %107 = getelementptr inbounds [3 x [128 x i8]], [3 x [128 x i8]]* @ii_nondc_mask_8x16, i64 0, i64 0, i64 %106
  %108 = shl nuw nsw i64 %105, 1
  %109 = getelementptr inbounds [32 x i8], [32 x i8]* @build_nondc_ii_masks.ii_weights_1d, i64 0, i64 %108
  %110 = load i8, i8* %109, align 2
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %107, i8 %110, i64 8, i1 false) #4
  br label %115

111:                                              ; preds = %115
  %112 = add nuw nsw i64 %105, 1
  %113 = add nuw nsw i64 %106, 8
  %114 = icmp eq i64 %112, 16
  br i1 %114, label %132, label %104

115:                                              ; preds = %115, %104
  %116 = phi i64 [ %130, %115 ], [ 0, %104 ]
  %117 = icmp ult i64 %116, %105
  %118 = select i1 %117, i64 %116, i64 %105
  %119 = trunc i64 %118 to i32
  %120 = shl nsw i32 %119, 1
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds [32 x i8], [32 x i8]* @build_nondc_ii_masks.ii_weights_1d, i64 0, i64 %121
  %123 = load i8, i8* %122, align 2
  %124 = add nuw nsw i64 %116, %106
  %125 = getelementptr inbounds [3 x [128 x i8]], [3 x [128 x i8]]* @ii_nondc_mask_8x16, i64 0, i64 2, i64 %124
  store i8 %123, i8* %125, align 1
  %126 = shl nuw nsw i64 %116, 1
  %127 = getelementptr inbounds [32 x i8], [32 x i8]* @build_nondc_ii_masks.ii_weights_1d, i64 0, i64 %126
  %128 = load i8, i8* %127, align 2
  %129 = getelementptr inbounds [3 x [128 x i8]], [3 x [128 x i8]]* @ii_nondc_mask_8x16, i64 0, i64 1, i64 %124
  store i8 %128, i8* %129, align 1
  %130 = add nuw nsw i64 %116, 1
  %131 = icmp eq i64 %130, 8
  br i1 %131, label %111, label %115

132:                                              ; preds = %111, %139
  %133 = phi i64 [ %140, %139 ], [ 0, %111 ]
  %134 = phi i64 [ %141, %139 ], [ 0, %111 ]
  %135 = getelementptr inbounds [3 x [64 x i8]], [3 x [64 x i8]]* @ii_nondc_mask_8x8, i64 0, i64 0, i64 %134
  %136 = shl nsw i64 %133, 2
  %137 = getelementptr inbounds [32 x i8], [32 x i8]* @build_nondc_ii_masks.ii_weights_1d, i64 0, i64 %136
  %138 = load i8, i8* %137, align 4
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %135, i8 %138, i64 8, i1 false) #4
  br label %143

139:                                              ; preds = %143
  %140 = add nuw nsw i64 %133, 1
  %141 = add nuw nsw i64 %134, 8
  %142 = icmp eq i64 %140, 8
  br i1 %142, label %160, label %132

143:                                              ; preds = %143, %132
  %144 = phi i64 [ %158, %143 ], [ 0, %132 ]
  %145 = icmp ult i64 %144, %133
  %146 = select i1 %145, i64 %144, i64 %133
  %147 = trunc i64 %146 to i32
  %148 = shl nsw i32 %147, 2
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds [32 x i8], [32 x i8]* @build_nondc_ii_masks.ii_weights_1d, i64 0, i64 %149
  %151 = load i8, i8* %150, align 4
  %152 = add nuw nsw i64 %144, %134
  %153 = getelementptr inbounds [3 x [64 x i8]], [3 x [64 x i8]]* @ii_nondc_mask_8x8, i64 0, i64 2, i64 %152
  store i8 %151, i8* %153, align 1
  %154 = shl nsw i64 %144, 2
  %155 = getelementptr inbounds [32 x i8], [32 x i8]* @build_nondc_ii_masks.ii_weights_1d, i64 0, i64 %154
  %156 = load i8, i8* %155, align 4
  %157 = getelementptr inbounds [3 x [64 x i8]], [3 x [64 x i8]]* @ii_nondc_mask_8x8, i64 0, i64 1, i64 %152
  store i8 %156, i8* %157, align 1
  %158 = add nuw nsw i64 %144, 1
  %159 = icmp eq i64 %158, 8
  br i1 %159, label %139, label %143

160:                                              ; preds = %139, %167
  %161 = phi i64 [ %168, %167 ], [ 0, %139 ]
  %162 = phi i64 [ %169, %167 ], [ 0, %139 ]
  %163 = getelementptr inbounds [3 x [64 x i8]], [3 x [64 x i8]]* @ii_nondc_mask_4x16, i64 0, i64 0, i64 %162
  %164 = shl nuw nsw i64 %161, 1
  %165 = getelementptr inbounds [32 x i8], [32 x i8]* @build_nondc_ii_masks.ii_weights_1d, i64 0, i64 %164
  %166 = load i8, i8* %165, align 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %163, i8 %166, i64 4, i1 false) #4
  br label %171

167:                                              ; preds = %171
  %168 = add nuw nsw i64 %161, 1
  %169 = add nuw nsw i64 %162, 4
  %170 = icmp eq i64 %168, 16
  br i1 %170, label %188, label %160

171:                                              ; preds = %171, %160
  %172 = phi i64 [ %186, %171 ], [ 0, %160 ]
  %173 = icmp ult i64 %172, %161
  %174 = select i1 %173, i64 %172, i64 %161
  %175 = trunc i64 %174 to i32
  %176 = shl nsw i32 %175, 1
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds [32 x i8], [32 x i8]* @build_nondc_ii_masks.ii_weights_1d, i64 0, i64 %177
  %179 = load i8, i8* %178, align 2
  %180 = add nuw nsw i64 %172, %162
  %181 = getelementptr inbounds [3 x [64 x i8]], [3 x [64 x i8]]* @ii_nondc_mask_4x16, i64 0, i64 2, i64 %180
  store i8 %179, i8* %181, align 1
  %182 = shl nuw nsw i64 %172, 1
  %183 = getelementptr inbounds [32 x i8], [32 x i8]* @build_nondc_ii_masks.ii_weights_1d, i64 0, i64 %182
  %184 = load i8, i8* %183, align 2
  %185 = getelementptr inbounds [3 x [64 x i8]], [3 x [64 x i8]]* @ii_nondc_mask_4x16, i64 0, i64 1, i64 %180
  store i8 %184, i8* %185, align 1
  %186 = add nuw nsw i64 %172, 1
  %187 = icmp eq i64 %186, 4
  br i1 %187, label %167, label %171

188:                                              ; preds = %167, %195
  %189 = phi i64 [ %196, %195 ], [ 0, %167 ]
  %190 = phi i64 [ %197, %195 ], [ 0, %167 ]
  %191 = getelementptr inbounds [3 x [32 x i8]], [3 x [32 x i8]]* @ii_nondc_mask_4x8, i64 0, i64 0, i64 %190
  %192 = shl nsw i64 %189, 2
  %193 = getelementptr inbounds [32 x i8], [32 x i8]* @build_nondc_ii_masks.ii_weights_1d, i64 0, i64 %192
  %194 = load i8, i8* %193, align 4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %191, i8 %194, i64 4, i1 false) #4
  br label %199

195:                                              ; preds = %199
  %196 = add nuw nsw i64 %189, 1
  %197 = add nuw nsw i64 %190, 4
  %198 = icmp eq i64 %196, 8
  br i1 %198, label %216, label %188

199:                                              ; preds = %199, %188
  %200 = phi i64 [ %214, %199 ], [ 0, %188 ]
  %201 = icmp ult i64 %200, %189
  %202 = select i1 %201, i64 %200, i64 %189
  %203 = trunc i64 %202 to i32
  %204 = shl nsw i32 %203, 2
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds [32 x i8], [32 x i8]* @build_nondc_ii_masks.ii_weights_1d, i64 0, i64 %205
  %207 = load i8, i8* %206, align 4
  %208 = add nuw nsw i64 %200, %190
  %209 = getelementptr inbounds [3 x [32 x i8]], [3 x [32 x i8]]* @ii_nondc_mask_4x8, i64 0, i64 2, i64 %208
  store i8 %207, i8* %209, align 1
  %210 = shl nsw i64 %200, 2
  %211 = getelementptr inbounds [32 x i8], [32 x i8]* @build_nondc_ii_masks.ii_weights_1d, i64 0, i64 %210
  %212 = load i8, i8* %211, align 4
  %213 = getelementptr inbounds [3 x [32 x i8]], [3 x [32 x i8]]* @ii_nondc_mask_4x8, i64 0, i64 1, i64 %208
  store i8 %212, i8* %213, align 1
  %214 = add nuw nsw i64 %200, 1
  %215 = icmp eq i64 %214, 4
  br i1 %215, label %195, label %199

216:                                              ; preds = %195, %223
  %217 = phi i64 [ %224, %223 ], [ 0, %195 ]
  %218 = phi i64 [ %225, %223 ], [ 0, %195 ]
  %219 = getelementptr inbounds [3 x [16 x i8]], [3 x [16 x i8]]* @ii_nondc_mask_4x4, i64 0, i64 0, i64 %218
  %220 = shl nsw i64 %217, 3
  %221 = getelementptr inbounds [32 x i8], [32 x i8]* @build_nondc_ii_masks.ii_weights_1d, i64 0, i64 %220
  %222 = load i8, i8* %221, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %219, i8 %222, i64 4, i1 false) #4
  br label %227

223:                                              ; preds = %227
  %224 = add nuw nsw i64 %217, 1
  %225 = add nuw nsw i64 %218, 4
  %226 = icmp eq i64 %224, 4
  br i1 %226, label %244, label %216

227:                                              ; preds = %227, %216
  %228 = phi i64 [ %242, %227 ], [ 0, %216 ]
  %229 = icmp ult i64 %228, %217
  %230 = select i1 %229, i64 %228, i64 %217
  %231 = trunc i64 %230 to i32
  %232 = shl nsw i32 %231, 3
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds [32 x i8], [32 x i8]* @build_nondc_ii_masks.ii_weights_1d, i64 0, i64 %233
  %235 = load i8, i8* %234, align 8
  %236 = add nuw nsw i64 %228, %218
  %237 = getelementptr inbounds [3 x [16 x i8]], [3 x [16 x i8]]* @ii_nondc_mask_4x4, i64 0, i64 2, i64 %236
  store i8 %235, i8* %237, align 1
  %238 = shl nsw i64 %228, 3
  %239 = getelementptr inbounds [32 x i8], [32 x i8]* @build_nondc_ii_masks.ii_weights_1d, i64 0, i64 %238
  %240 = load i8, i8* %239, align 8
  %241 = getelementptr inbounds [3 x [16 x i8]], [3 x [16 x i8]]* @ii_nondc_mask_4x4, i64 0, i64 1, i64 %236
  store i8 %240, i8* %241, align 1
  %242 = add nuw nsw i64 %228, 1
  %243 = icmp eq i64 %242, 4
  br i1 %243, label %223, label %227

244:                                              ; preds = %223
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: cold nofree norecurse nounwind optsize ssp uwtable
define internal fastcc void @init_chroma(i8* nocapture, i8* nocapture readonly, i32, i32, i32, i32) unnamed_addr #3 {
  %7 = icmp sgt i32 %4, 0
  br i1 %7, label %8, label %21

8:                                                ; preds = %6
  %9 = icmp sgt i32 %3, 0
  %10 = icmp eq i32 %5, 0
  %11 = add nsw i32 %5, 1
  %12 = shl i32 %3, %5
  %13 = sext i32 %12 to i64
  %14 = ashr i32 %3, 1
  %15 = sext i32 %14 to i64
  %16 = sext i32 %3 to i64
  br label %17

17:                                               ; preds = %8, %22
  %18 = phi i32 [ 0, %8 ], [ %25, %22 ]
  %19 = phi i8* [ %0, %8 ], [ %24, %22 ]
  %20 = phi i8* [ %1, %8 ], [ %23, %22 ]
  br i1 %9, label %27, label %22

21:                                               ; preds = %22, %6
  ret void

22:                                               ; preds = %50, %17
  %23 = getelementptr inbounds i8, i8* %20, i64 %13
  %24 = getelementptr inbounds i8, i8* %19, i64 %15
  %25 = add nsw i32 %11, %18
  %26 = icmp slt i32 %25, %4
  br i1 %26, label %17, label %21

27:                                               ; preds = %17, %50
  %28 = phi i64 [ %57, %50 ], [ 0, %17 ]
  %29 = getelementptr inbounds i8, i8* %20, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = or i64 %28, 1
  %33 = getelementptr inbounds i8, i8* %20, i64 %32
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = add nuw nsw i32 %31, 1
  %37 = add nuw nsw i32 %36, %35
  br i1 %10, label %50, label %38

38:                                               ; preds = %27
  %39 = add nsw i64 %28, %16
  %40 = getelementptr inbounds i8, i8* %20, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = add nsw i64 %39, 1
  %44 = getelementptr inbounds i8, i8* %20, i64 %43
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = add nuw nsw i32 %37, 1
  %48 = add nuw nsw i32 %47, %42
  %49 = add nuw nsw i32 %48, %46
  br label %50

50:                                               ; preds = %27, %38
  %51 = phi i32 [ %49, %38 ], [ %37, %27 ]
  %52 = sub nsw i32 %51, %2
  %53 = ashr i32 %52, %11
  %54 = trunc i32 %53 to i8
  %55 = lshr exact i64 %28, 1
  %56 = getelementptr inbounds i8, i8* %19, i64 %55
  store i8 %54, i8* %56, align 1
  %57 = add nuw nsw i64 %28, 2
  %58 = icmp slt i64 %57, %16
  br i1 %58, label %27, label %22
}

attributes #0 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold nofree norecurse nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { cold }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
