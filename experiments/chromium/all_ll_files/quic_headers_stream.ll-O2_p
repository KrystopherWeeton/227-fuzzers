; ModuleID = '../../net/third_party/quiche/src/quic/core/http/quic_headers_stream.cc'
source_filename = "../../net/third_party/quiche/src/quic/core/http/quic_headers_stream.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.absl::container_internal::btree_node" = type { i8 }
%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"struct.quic::QuicHeadersStream::CompressedHeaderInfo" = type { i64, i64, i64, %"class.quic::QuicReferenceCountedPointer" }
%"class.quic::QuicReferenceCountedPointer" = type { %"class.quic::QuicReferenceCountedPointerImpl" }
%"class.quic::QuicReferenceCountedPointerImpl" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.quic::QuicAckListenerInterface"* }
%"class.quic::QuicAckListenerInterface" = type { %"class.quic::QuicReferenceCounted.base", [4 x i8] }
%"class.quic::QuicReferenceCounted.base" = type { %"class.quic::QuicReferenceCountedImpl.base" }
%"class.quic::QuicReferenceCountedImpl.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe" }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.quic::QuicHeadersStream" = type { %"class.quic::QuicStream.base", %"class.quic::QuicSpdySession"*, %"class.quiche::QuicheCircularDeque.630" }
%"class.quic::QuicStream.base" = type <{ %"class.quic::QuicStreamSequencer::StreamInterface", %"class.quic::QuicStreamSequencer", i32, [4 x i8], %"class.quic::QuicSession"*, %"class.quic::StreamDelegateInterface"*, %"class.spdy::StreamPrecedence", i64, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [6 x i8], %"class.absl::optional.412", %"class.quic::QuicFlowController"*, i8, [7 x i8], i64, i8, [7 x i8], %"class.quic::QuicStreamSendBuffer", i64, i8, [7 x i8], %"class.quic::QuicTime", i8, [3 x i8], i32, %"class.quic::QuicTime", i8 }>
%"class.quic::QuicStreamSequencer::StreamInterface" = type { i32 (...)** }
%"class.quic::QuicStreamSequencer" = type <{ i32 (...)**, %"class.quic::QuicStreamSequencer::StreamInterface"*, %"class.quic::QuicStreamSequencerBuffer", i64, i64, i8, [3 x i8], i32, i32, i8, i8, [2 x i8] }>
%"class.quic::QuicStreamSequencerBuffer" = type { i64, i64, i64, i64, i8, %"class.std::__1::unique_ptr", i64, %"class.quic::QuicIntervalSet" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** }
%"struct.quic::QuicStreamSequencerBuffer::BufferBlock" = type { [8192 x i8] }
%"class.quic::QuicIntervalSet" = type { %"class.absl::btree_set" }
%"class.absl::btree_set" = type { %"class.absl::container_internal::btree_set_container" }
%"class.absl::container_internal::btree_set_container" = type { %"class.absl::container_internal::btree_container" }
%"class.absl::container_internal::btree_container" = type { %"class.absl::container_internal::btree" }
%"class.absl::container_internal::btree" = type { %"class.absl::container_internal::CompressedTuple", %"class.absl::container_internal::btree_node"*, i64 }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.3" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage.3" = type { %"class.absl::container_internal::btree_node"* }
%"class.quic::QuicSession" = type <{ %"class.quic::QuicConnectionVisitorInterface", %"class.quic::SessionNotifierInterface", %"class.quic::QuicStreamFrameDataProducer", %"class.quic::QuicStreamIdManager::DelegateInterface", %"class.quic::HandshakerDelegateInterface", %"class.quic::StreamDelegateInterface", %"class.quic::QuicControlFrameManager::DelegateInterface", %"class.absl::flat_hash_map", %"class.quic::QuicConnection"*, i8, [7 x i8], %"class.quic::QuicSession::Visitor"*, %"class.quic::QuicWriteBlockedList", %"class.std::__1::vector.304", %"class.quic::QuicConfig", %"class.absl::flat_hash_map.350", %"class.absl::flat_hash_map.359", %"class.quic::LegacyQuicStreamIdManager", %"class.quic::UberQuicStreamIdManager", i64, i64, i64, i64, %"struct.quic::QuicConnectionCloseFrame", %"class.quic::QuicFlowController", i32, i8, i8, [2 x i8], %"class.quic::QuicControlFrameManager", i32, [4 x i8], %"class.quic::QuicDatagramQueue", %"class.quiche::QuicheLinkedHashMap", %"class.std::__1::unique_ptr.177", %"class.std::__1::vector", %"class.absl::optional.406", i8, i8, i8, i8, [4 x i8] }>
%"class.quic::QuicConnectionVisitorInterface" = type { i32 (...)** }
%"class.quic::SessionNotifierInterface" = type { i32 (...)** }
%"class.quic::QuicStreamFrameDataProducer" = type { i32 (...)** }
%"class.quic::QuicStreamIdManager::DelegateInterface" = type { i32 (...)** }
%"class.quic::HandshakerDelegateInterface" = type { i32 (...)** }
%"class.quic::StreamDelegateInterface" = type { i32 (...)** }
%"class.quic::QuicControlFrameManager::DelegateInterface" = type { i32 (...)** }
%"class.absl::flat_hash_map" = type { %"class.absl::container_internal::raw_hash_map" }
%"class.absl::container_internal::raw_hash_map" = type { %"class.absl::container_internal::raw_hash_set" }
%"class.absl::container_internal::raw_hash_set" = type { i8*, %"union.absl::container_internal::map_slot_type"*, i64, i64, %"class.absl::container_internal::CompressedTuple.4" }
%"union.absl::container_internal::map_slot_type" = type opaque
%"class.absl::container_internal::CompressedTuple.4" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.5" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.5" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.6" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage.6" = type { i64 }
%"class.quic::QuicConnection" = type <{ %"class.quic::QuicFramerVisitorInterface", %"class.quic::QuicBlockedWriterInterface", %"class.quic::QuicPacketCreator::DelegateInterface", %"class.quic::QuicSentPacketManager::NetworkChangeVisitor", %"class.quic::QuicNetworkBlackholeDetector::Delegate", %"class.quic::QuicIdleNetworkDetector::Delegate", %"class.quic::QuicPathValidator::SendDelegate", %"class.quic::QuicConnectionIdManagerVisitorInterface", %"class.quic::QuicFramer", i8, i8, i8, i8, [4 x i8], %"class.quic::QuicConnectionHelperInterface"*, %"class.quic::QuicAlarmFactory"*, %"struct.quic::PerPacketOptions"*, %"class.quic::QuicPacketWriter"*, i8, i8, [6 x i8], %"class.quic::QuicClock"*, %"class.quic::QuicRandom"*, %"class.quic::QuicConnectionId", %"class.quic::QuicConnectionId", i8, i8, [2 x i8], %"class.quic::QuicSocketAddress", [4 x i8], %"struct.quic::QuicConnection::PathState", i8, [7 x i8], %"class.quic::QuicPacketNumber", i8, [7 x i8], %"class.quic::QuicPacketNumber", i8, [7 x i8], i64, i8*, i8, [7 x i8], %"struct.quic::QuicPacketHeader", i8, [7 x i8], %"class.quic::QuicPacketNumber", [3 x %"class.quic::QuicPacketNumber"], %"class.quic::QuicPacketNumber", %"class.std::__1::deque", %"class.quiche::QuicheCircularDeque", i64, i64, %"class.std::__1::unique_ptr.66", i32, [4 x i8], i64, %"struct.quic::QuicConnectionStats", %"class.quic::UberReceivedPacketManager", i32, i8, i8, [2 x i8], %"class.quic::QuicTime::Delta", %"class.quic::QuicTime::Delta", i32, i32, %"class.quic::QuicOneBlockArena", %"class.quic::QuicArenaScopedPtr", %"class.quic::QuicArenaScopedPtr", %"class.quic::QuicArenaScopedPtr", %"class.quic::QuicArenaScopedPtr", %"class.quic::QuicArenaScopedPtr", %"class.quic::QuicArenaScopedPtr", %"class.quic::QuicArenaScopedPtr", %"class.quic::QuicArenaScopedPtr", %"class.quic::QuicConnectionVisitorInterface"*, %"class.quic::QuicConnectionDebugVisitor"*, %"class.quic::QuicPacketCreator", %"class.quic::QuicTime", %"class.quic::QuicSentPacketManager", i8, i8, i8, i8, %"class.quic::QuicSocketAddress", %"class.quic::QuicSocketAddress", [4 x i8], %"class.quic::QuicConnectionId", i8, [7 x i8], %"class.std::__1::vector", i64, i16, [6 x i8], i64, i64, i64, i8, i8, [6 x i8], i64, i64, i8, i8, i8, i8, %"struct.std::__1::array.40", i32, i8, i8, i8, [5 x i8], %"class.std::__1::unique_ptr.174", %"class.std::__1::unique_ptr.194", %"class.quic::QuicTime::Delta", %"class.std::__1::unique_ptr.216", %"class.quiche::QuicheCircularDeque.222", %"class.quiche::QuicheCircularDeque.225", %"class.std::__1::vector.228", %"class.absl::optional.235", %"class.quic::QuicConnectionId", %"class.absl::optional.235", %"class.std::__1::list", %"class.quic::QuicCoalescedPacket", %"class.quic::QuicConnectionMtuDiscoverer", %"class.quic::QuicNetworkBlackholeDetector", %"class.quic::QuicIdleNetworkDetector", i8, i8, i8, i8, [4 x i8], %"class.std::__1::basic_string", i8, [7 x i8], i64, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8], %"class.quic::QuicPathValidator", %"struct.quic::QuicConnection::PathState", i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [5 x i8] }>
%"class.quic::QuicFramerVisitorInterface" = type { i32 (...)** }
%"class.quic::QuicBlockedWriterInterface" = type { i32 (...)** }
%"class.quic::QuicPacketCreator::DelegateInterface" = type { i32 (...)** }
%"class.quic::QuicSentPacketManager::NetworkChangeVisitor" = type { i32 (...)** }
%"class.quic::QuicNetworkBlackholeDetector::Delegate" = type { i32 (...)** }
%"class.quic::QuicIdleNetworkDetector::Delegate" = type { i32 (...)** }
%"class.quic::QuicPathValidator::SendDelegate" = type { i32 (...)** }
%"class.quic::QuicConnectionIdManagerVisitorInterface" = type { i32 (...)** }
%"class.quic::QuicFramer" = type { i32 (...)**, %"class.std::__1::basic_string", %"class.quic::QuicFramerVisitorInterface"*, i32, %"class.quic::QuicPacketNumber", [3 x %"class.quic::QuicPacketNumber"], %"class.quic::QuicConnectionId", %"class.quic::QuicConnectionId", %"struct.quic::ParsedQuicVersion", %"class.std::__1::vector", [4 x %"class.std::__1::unique_ptr.26"], i8, i8, i8, [4 x %"class.std::__1::unique_ptr.32"], i8, i8, %"struct.std::__1::array", i8, %"class.quic::QuicTime", %"class.quic::QuicTime::Delta", i8, i8, i8, %"class.quic::QuicPacketNumber", i64, %"class.std::__1::unique_ptr.26", %"class.std::__1::unique_ptr.26", %"class.quic::QuicPacketNumber", %"class.quic::QuicStreamFrameDataProducer"*, i8, i8, i8, i8, i8, i8, i64, i32, i32, i64 }
%"struct.quic::ParsedQuicVersion" = type { i32, i32 }
%"class.std::__1::unique_ptr.32" = type { %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"class.quic::QuicEncrypter"* }
%"class.quic::QuicEncrypter" = type { %"class.quic::QuicCrypter" }
%"class.quic::QuicCrypter" = type { i32 (...)** }
%"struct.std::__1::array" = type { [32 x i8] }
%"class.std::__1::unique_ptr.26" = type { %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"class.quic::QuicDecrypter"* }
%"class.quic::QuicDecrypter" = type { %"class.quic::QuicCrypter" }
%"class.quic::QuicConnectionHelperInterface" = type { i32 (...)** }
%"class.quic::QuicAlarmFactory" = type { i32 (...)** }
%"struct.quic::PerPacketOptions" = type <{ i32 (...)**, %"class.quic::QuicTime::Delta", i8, [7 x i8] }>
%"class.quic::QuicPacketWriter" = type { i32 (...)** }
%"class.quic::QuicClock" = type { i32 (...)**, i8, %"class.quic::QuicTime::Delta" }
%"class.quic::QuicRandom" = type { i32 (...)** }
%"struct.quic::QuicPacketHeader" = type { %"class.quic::QuicConnectionId", i8, %"class.quic::QuicConnectionId", i8, i8, i8, i8, i8, i8, %"struct.quic::ParsedQuicVersion", %"struct.std::__1::array"*, %"class.quic::QuicPacketNumber", i8, i8, %"struct.std::__1::array.40", i8, %"class.absl::string_view", i8, i64 }
%"class.absl::string_view" = type { i8*, i64 }
%"class.quic::QuicPacketNumber" = type { i64 }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.59" }
%"struct.std::__1::__split_buffer" = type { %"struct.quic::QuicConnection::UndecryptablePacket"**, %"struct.quic::QuicConnection::UndecryptablePacket"**, %"struct.quic::QuicConnection::UndecryptablePacket"**, %"class.std::__1::__compressed_pair.54" }
%"struct.quic::QuicConnection::UndecryptablePacket" = type <{ %"class.std::__1::unique_ptr.48", i8, [7 x i8] }>
%"class.std::__1::unique_ptr.48" = type { %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"class.quic::QuicEncryptedPacket"* }
%"class.quic::QuicEncryptedPacket" = type { %"class.quic::QuicData.base", [7 x i8] }
%"class.quic::QuicData.base" = type <{ i32 (...)**, i8*, i64, i8 }>
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { %"struct.quic::QuicConnection::UndecryptablePacket"** }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { i64 }
%"class.quiche::QuicheCircularDeque" = type { i64, i64, %"struct.quiche::QuicheCircularDeque<std::__1::unique_ptr<quic::QuicEncryptedPacket, std::__1::default_delete<quic::QuicEncryptedPacket> >, 3, std::__1::allocator<std::__1::unique_ptr<quic::QuicEncryptedPacket, std::__1::default_delete<quic::QuicEncryptedPacket> > > >::AllocatorAndData" }
%"struct.quiche::QuicheCircularDeque<std::__1::unique_ptr<quic::QuicEncryptedPacket, std::__1::default_delete<quic::QuicEncryptedPacket> >, 3, std::__1::allocator<std::__1::unique_ptr<quic::QuicEncryptedPacket, std::__1::default_delete<quic::QuicEncryptedPacket> > > >::AllocatorAndData" = type { %"class.std::__1::unique_ptr.48"*, i64 }
%"class.std::__1::unique_ptr.66" = type { %"class.std::__1::__compressed_pair.67" }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::__compressed_pair_elem.68" = type { %"class.std::__1::vector.69"* }
%"class.std::__1::vector.69" = type opaque
%"struct.quic::QuicConnectionStats" = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, float, i32, i32, i64, i64, i64, i64, %"class.quic::QuicTimeAccumulator", i32, i32, i8, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %"class.quic::QuicBandwidth", i64, i64, i64, i64, i64, i32, %"class.quic::QuicTime", %"class.quic::QuicTime", i64, i64, i64, i8, i64, i64, i64, i8, i8, %"class.quic::QuicPacketNumber", i64, i64, i64, i32, i64, i64, i8, i8, i64, i64, i64, i64, i64, i64, i64, i64, %"class.absl::optional.73", %"class.absl::optional.73", %"class.absl::optional.73" }
%"class.quic::QuicTimeAccumulator" = type { %"class.quic::QuicTime::Delta", %"class.quic::QuicTime" }
%"class.quic::QuicBandwidth" = type { i64 }
%"class.absl::optional.73" = type { %"class.absl::optional_internal::optional_data.74" }
%"class.absl::optional_internal::optional_data.74" = type { %"class.absl::optional_internal::optional_data_base.75" }
%"class.absl::optional_internal::optional_data_base.75" = type { %"class.absl::optional_internal::optional_data_dtor_base.76" }
%"class.absl::optional_internal::optional_data_dtor_base.76" = type { i8, %union.anon.77 }
%union.anon.77 = type { %"struct.quic::QuicConnectionStats::TlsServerOperationStats" }
%"struct.quic::QuicConnectionStats::TlsServerOperationStats" = type { i8, %"class.quic::QuicTime::Delta" }
%"class.quic::UberReceivedPacketManager" = type <{ i32 (...)**, [3 x %"class.quic::QuicReceivedPacketManager"], i8, [7 x i8] }>
%"class.quic::QuicReceivedPacketManager" = type { i32 (...)**, %"class.quic::QuicPacketNumber", %"struct.quic::QuicAckFrame", i8, i64, %"class.quic::QuicTime", i8, %"class.quic::QuicPacketNumber", %"struct.quic::QuicConnectionStats"*, i64, i64, i64, float, i8, i8, i8, %"class.quic::QuicTime::Delta", %"class.quic::QuicTime", %"class.quic::QuicTime", i8, %"class.quic::QuicPacketNumber", i64 }
%"struct.quic::QuicAckFrame" = type { %"class.quic::QuicPacketNumber", %"class.quic::QuicTime::Delta", %"class.std::__1::vector.82", %"class.quic::PacketNumberQueue", i8, i64, i64, i64 }
%"class.std::__1::vector.82" = type { %"class.std::__1::__vector_base.83" }
%"class.std::__1::__vector_base.83" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.84" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.85" }
%"struct.std::__1::__compressed_pair_elem.85" = type { %"struct.std::__1::pair"* }
%"class.quic::PacketNumberQueue" = type { %"class.quic::QuicIntervalSet.89" }
%"class.quic::QuicIntervalSet.89" = type { %"class.absl::btree_set.90" }
%"class.absl::btree_set.90" = type { %"class.absl::container_internal::btree_set_container.91" }
%"class.absl::container_internal::btree_set_container.91" = type { %"class.absl::container_internal::btree_container.92" }
%"class.absl::container_internal::btree_container.92" = type { %"class.absl::container_internal::btree.93" }
%"class.absl::container_internal::btree.93" = type { %"class.absl::container_internal::CompressedTuple.94", %"class.absl::container_internal::btree_node.101"*, i64 }
%"class.absl::container_internal::CompressedTuple.94" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.95" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.95" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.100" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage.100" = type { %"class.absl::container_internal::btree_node.101"* }
%"class.absl::container_internal::btree_node.101" = type { i8 }
%"class.quic::QuicOneBlockArena" = type { [1056 x i8], i32, [4 x i8] }
%"class.quic::QuicArenaScopedPtr" = type { i8* }
%"class.quic::QuicConnectionDebugVisitor" = type { %"class.quic::QuicSentPacketManager::DebugDelegate" }
%"class.quic::QuicSentPacketManager::DebugDelegate" = type { i32 (...)** }
%"class.quic::QuicPacketCreator" = type <{ %"class.quic::QuicPacketCreator::DelegateInterface"*, %"class.quic::QuicPacketCreator::DebugDelegate"*, %"class.quic::QuicFramer"*, %"class.quic::QuicRandom"*, i8, i8, %"struct.std::__1::array", [6 x i8], i64, i64, i8, [7 x i8], %"class.std::__1::vector.103", i64, %"class.quic::QuicConnectionId", %"class.quic::QuicConnectionId", %"struct.quic::SerializedPacket", %"class.std::__1::basic_string", i64, i8, i8, i8, i8, [4 x i8], %"class.quic::QuicPacketNumber", i64, i64, i8, [7 x i8] }>
%"class.quic::QuicPacketCreator::DebugDelegate" = type { i32 (...)** }
%"class.std::__1::vector.103" = type { %"class.std::__1::__vector_base.104" }
%"class.std::__1::__vector_base.104" = type { %"struct.quic::QuicFrame"*, %"struct.quic::QuicFrame"*, %"class.std::__1::__compressed_pair.132" }
%"struct.quic::QuicFrame" = type { %union.anon.105 }
%union.anon.105 = type { %"struct.quic::QuicStreamFrame" }
%"struct.quic::QuicStreamFrame" = type { i8, i8, i16, i32, i8*, i64 }
%"class.std::__1::__compressed_pair.132" = type { %"struct.std::__1::__compressed_pair_elem.133" }
%"struct.std::__1::__compressed_pair_elem.133" = type { %"struct.quic::QuicFrame"* }
%"struct.quic::SerializedPacket" = type <{ i8*, i16, [6 x i8], %"class.std::__1::function", %"class.std::__1::vector.103", %"class.std::__1::vector.103", i8, [7 x i8], %"class.quic::QuicPacketNumber", i8, i8, i8, i8, i8, [3 x i8], %"class.quic::QuicPacketNumber", i8, i8, i8, i8, %"class.quic::QuicSocketAddress", [4 x i8] }>
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { void (%"union.std::__1::__function::__policy_storage"*, i8*)* }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.quic::QuicSentPacketManager" = type <{ i32 (...)**, %"class.quic::QuicUnackedPacketMap", %"class.quic::QuicClock"*, %"class.quic::QuicRandom"*, %"struct.quic::QuicConnectionStats"*, %"class.quic::QuicSentPacketManager::DebugDelegate"*, %"class.quic::QuicSentPacketManager::NetworkChangeVisitor"*, i64, %"class.quic::RttStats", %"class.std::__1::unique_ptr.41", %"class.quic::LossDetectionInterface"*, %"class.quic::UberLossAlgorithm", %"class.quic::QuicPacketNumber", i64, i64, i64, i64, i64, i64, i8, i8, i8, i8, [4 x i8], %"class.quic::QuicTime::Delta", %"class.quic::QuicTime::Delta", %"class.std::__1::vector.156", %"class.std::__1::vector.163", %"class.quic::QuicPacketNumber", i16, [6 x i8], %"class.quic::PacingSender", i8, [7 x i8], %"class.quic::QuicSustainedBandwidthRecorder", %"class.quic::QuicPacketNumber", [3 x %"class.quic::QuicPacketNumber"], %"class.quic::QuicTime::Delta", %"class.quic::QuicTime::Delta", i8, [7 x i8], %"class.quiche::QuicheCircularDeque.170", %"struct.quic::QuicAckFrame", i8, [7 x i8], %"class.std::__1::reverse_iterator", i8, [7 x i8], i64, i64, i8, i8, i8, [5 x i8], i64, i32, [4 x i8], i64, i8, i8, i8, i8, float, i8, [3 x i8], float, i32, i8, [3 x i8] }>
%"class.quic::QuicUnackedPacketMap" = type <{ i8, [7 x i8], %"class.quic::QuicPacketNumber", [3 x %"class.quic::QuicPacketNumber"], %"class.quic::QuicPacketNumber", %"class.quic::QuicPacketNumber", [3 x %"class.quic::QuicPacketNumber"], %"class.quiche::QuicheCircularDeque.137", %"class.quic::QuicPacketNumber", i64, [3 x i64], i64, %"class.quic::QuicTime", [3 x %"class.quic::QuicTime"], %"class.quic::QuicTime", %"struct.quic::QuicStreamFrame", %"class.quic::SessionNotifierInterface"*, i8, i8, [6 x i8] }>
%"class.quiche::QuicheCircularDeque.137" = type { i64, i64, %"struct.quiche::QuicheCircularDeque<quic::QuicTransmissionInfo, 3, std::__1::allocator<quic::QuicTransmissionInfo> >::AllocatorAndData" }
%"struct.quiche::QuicheCircularDeque<quic::QuicTransmissionInfo, 3, std::__1::allocator<quic::QuicTransmissionInfo> >::AllocatorAndData" = type { %"struct.quic::QuicTransmissionInfo"*, i64 }
%"struct.quic::QuicTransmissionInfo" = type { %"class.std::__1::vector.103", %"class.quic::QuicTime", i16, i8, i8, i8, i8, i8, i8, %"class.quic::QuicPacketNumber", %"class.quic::QuicPacketNumber" }
%"class.quic::RttStats" = type <{ %"class.quic::QuicTime::Delta", %"class.quic::QuicTime::Delta", %"class.quic::QuicTime::Delta", %"class.quic::QuicTime::Delta", %"class.quic::QuicTime::Delta", %"struct.quic::RttStats::StandardDeviationCaculator", i8, [7 x i8], %"class.quic::QuicTime::Delta", %"class.quic::QuicTime", i8, [7 x i8] }>
%"struct.quic::RttStats::StandardDeviationCaculator" = type { i8, double }
%"class.std::__1::unique_ptr.41" = type { %"class.std::__1::__compressed_pair.42" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"class.quic::SendAlgorithmInterface"* }
%"class.quic::SendAlgorithmInterface" = type { i32 (...)** }
%"class.quic::LossDetectionInterface" = type { i32 (...)** }
%"class.quic::UberLossAlgorithm" = type <{ %"class.quic::LossDetectionInterface", [3 x %"class.quic::GeneralLossAlgorithm"], %"class.std::__1::unique_ptr.140", %"struct.quic::LossDetectionParameters", i8, i8, i8, i8, i8, [3 x i8] }>
%"class.quic::GeneralLossAlgorithm" = type <{ %"class.quic::LossDetectionInterface", %"class.quic::LossDetectionInterface"*, %"class.quic::QuicTime", i32, [4 x i8], i64, i8, i8, i8, [5 x i8], %"class.quic::QuicPacketNumber", i8, [7 x i8] }>
%"class.std::__1::unique_ptr.140" = type { %"class.std::__1::__compressed_pair.141" }
%"class.std::__1::__compressed_pair.141" = type { %"struct.std::__1::__compressed_pair_elem.142" }
%"struct.std::__1::__compressed_pair_elem.142" = type { %"class.quic::LossDetectionTunerInterface"* }
%"class.quic::LossDetectionTunerInterface" = type { i32 (...)** }
%"struct.quic::LossDetectionParameters" = type { %"class.absl::optional.146", %"class.absl::optional.151" }
%"class.absl::optional.146" = type { %"class.absl::optional_internal::optional_data.147" }
%"class.absl::optional_internal::optional_data.147" = type { %"class.absl::optional_internal::optional_data_base.148" }
%"class.absl::optional_internal::optional_data_base.148" = type { %"class.absl::optional_internal::optional_data_dtor_base.149" }
%"class.absl::optional_internal::optional_data_dtor_base.149" = type { i8, %union.anon.150 }
%union.anon.150 = type { i32 }
%"class.absl::optional.151" = type { %"class.absl::optional_internal::optional_data.152" }
%"class.absl::optional_internal::optional_data.152" = type { %"class.absl::optional_internal::optional_data_base.153" }
%"class.absl::optional_internal::optional_data_base.153" = type { %"class.absl::optional_internal::optional_data_dtor_base.154" }
%"class.absl::optional_internal::optional_data_dtor_base.154" = type { i8, %union.anon.155 }
%union.anon.155 = type { i64 }
%"class.std::__1::vector.156" = type { %"class.std::__1::__vector_base.157" }
%"class.std::__1::__vector_base.157" = type { %"struct.quic::AckedPacket"*, %"struct.quic::AckedPacket"*, %"class.std::__1::__compressed_pair.158" }
%"struct.quic::AckedPacket" = type { %"class.quic::QuicPacketNumber", i16, %"class.quic::QuicTime" }
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.159" }
%"struct.std::__1::__compressed_pair_elem.159" = type { %"struct.quic::AckedPacket"* }
%"class.std::__1::vector.163" = type { %"class.std::__1::__vector_base.164" }
%"class.std::__1::__vector_base.164" = type { %"struct.quic::LostPacket"*, %"struct.quic::LostPacket"*, %"class.std::__1::__compressed_pair.165" }
%"struct.quic::LostPacket" = type <{ %"class.quic::QuicPacketNumber", i16, [6 x i8] }>
%"class.std::__1::__compressed_pair.165" = type { %"struct.std::__1::__compressed_pair_elem.166" }
%"struct.std::__1::__compressed_pair_elem.166" = type { %"struct.quic::LostPacket"* }
%"class.quic::PacingSender" = type <{ %"class.quic::SendAlgorithmInterface"*, %"class.quic::QuicBandwidth", i32, [4 x i8], %"class.quic::QuicTime", i32, i32, %"class.quic::QuicTime::Delta", i8, [7 x i8] }>
%"class.quic::QuicSustainedBandwidthRecorder" = type { i8, i8, i8, %"class.quic::QuicBandwidth", %"class.quic::QuicBandwidth", i64, %"class.quic::QuicTime" }
%"class.quiche::QuicheCircularDeque.170" = type { i64, i64, %"struct.quiche::QuicheCircularDeque<std::__1::pair<quic::QuicTime::Delta, unsigned long>, 3, std::__1::allocator<std::__1::pair<quic::QuicTime::Delta, unsigned long> > >::AllocatorAndData" }
%"struct.quiche::QuicheCircularDeque<std::__1::pair<quic::QuicTime::Delta, unsigned long>, 3, std::__1::allocator<std::__1::pair<quic::QuicTime::Delta, unsigned long> > >::AllocatorAndData" = type { %"struct.std::__1::pair.173"*, i64 }
%"struct.std::__1::pair.173" = type opaque
%"class.std::__1::reverse_iterator" = type { %"struct.absl::container_internal::btree_iterator", %"struct.absl::container_internal::btree_iterator" }
%"struct.absl::container_internal::btree_iterator" = type <{ %"class.absl::container_internal::btree_node.101"*, i32, [4 x i8] }>
%"class.quic::QuicSocketAddress" = type <{ %"class.quic::QuicIpAddress", i16, [2 x i8] }>
%"class.quic::QuicIpAddress" = type { %union.anon.38, i32 }
%union.anon.38 = type { %struct.in6_addr }
%struct.in6_addr = type { %union.anon.39 }
%union.anon.39 = type { [4 x i32] }
%"struct.std::__1::array.40" = type { [16 x i8] }
%"class.std::__1::unique_ptr.174" = type { %"class.std::__1::__compressed_pair.175" }
%"class.std::__1::__compressed_pair.175" = type { %"struct.std::__1::__compressed_pair_elem.176" }
%"struct.std::__1::__compressed_pair_elem.176" = type { %"class.quic::QuicPeerIssuedConnectionIdManager"* }
%"class.quic::QuicPeerIssuedConnectionIdManager" = type { i64, %"class.quic::QuicClock"*, %"class.std::__1::unique_ptr.177", %"class.std::__1::vector.184", %"class.std::__1::vector.184", %"class.std::__1::vector.184", %"class.quic::QuicIntervalSet", i64 }
%"class.std::__1::vector.184" = type { %"class.std::__1::__vector_base.185" }
%"class.std::__1::__vector_base.185" = type { %"struct.quic::QuicConnectionIdData"*, %"struct.quic::QuicConnectionIdData"*, %"class.std::__1::__compressed_pair.186" }
%"struct.quic::QuicConnectionIdData" = type { %"class.quic::QuicConnectionId", i64, %"struct.std::__1::array.40" }
%"class.std::__1::__compressed_pair.186" = type { %"struct.std::__1::__compressed_pair_elem.187" }
%"struct.std::__1::__compressed_pair_elem.187" = type { %"struct.quic::QuicConnectionIdData"* }
%"class.std::__1::unique_ptr.194" = type { %"class.std::__1::__compressed_pair.195" }
%"class.std::__1::__compressed_pair.195" = type { %"struct.std::__1::__compressed_pair_elem.196" }
%"struct.std::__1::__compressed_pair_elem.196" = type { %"class.quic::QuicSelfIssuedConnectionIdManager"* }
%"class.quic::QuicSelfIssuedConnectionIdManager" = type { i32 (...)**, i64, %"class.quic::QuicClock"*, %"class.quic::QuicConnectionIdManagerVisitorInterface"*, %"class.std::__1::vector.197", %"class.std::__1::vector.205", %"class.std::__1::unique_ptr.177", %"class.quic::QuicConnectionId", i64, i64 }
%"class.std::__1::vector.197" = type { %"class.std::__1::__vector_base.198" }
%"class.std::__1::__vector_base.198" = type { %"struct.std::__1::pair.199"*, %"struct.std::__1::pair.199"*, %"class.std::__1::__compressed_pair.200" }
%"struct.std::__1::pair.199" = type opaque
%"class.std::__1::__compressed_pair.200" = type { %"struct.std::__1::__compressed_pair_elem.201" }
%"struct.std::__1::__compressed_pair_elem.201" = type { %"struct.std::__1::pair.199"* }
%"class.std::__1::vector.205" = type { %"class.std::__1::__vector_base.206" }
%"class.std::__1::__vector_base.206" = type { %"struct.std::__1::pair.207"*, %"struct.std::__1::pair.207"*, %"class.std::__1::__compressed_pair.208" }
%"struct.std::__1::pair.207" = type opaque
%"class.std::__1::__compressed_pair.208" = type { %"struct.std::__1::__compressed_pair_elem.209" }
%"struct.std::__1::__compressed_pair_elem.209" = type { %"struct.std::__1::pair.207"* }
%"class.quic::QuicTime::Delta" = type { i64 }
%"class.std::__1::unique_ptr.216" = type { %"class.std::__1::__compressed_pair.217" }
%"class.std::__1::__compressed_pair.217" = type { %"struct.std::__1::__compressed_pair_elem.218" }
%"struct.std::__1::__compressed_pair_elem.218" = type { %"struct.std::__1::array.122"* }
%"struct.std::__1::array.122" = type { [8 x i8] }
%"class.quiche::QuicheCircularDeque.222" = type { i64, i64, %"struct.quiche::QuicheCircularDeque<std::__1::array<unsigned char, 8>, 3, std::__1::allocator<std::__1::array<unsigned char, 8> > >::AllocatorAndData" }
%"struct.quiche::QuicheCircularDeque<std::__1::array<unsigned char, 8>, 3, std::__1::allocator<std::__1::array<unsigned char, 8> > >::AllocatorAndData" = type { %"struct.std::__1::array.122"*, i64 }
%"class.quiche::QuicheCircularDeque.225" = type { i64, i64, %"struct.quiche::QuicheCircularDeque<quic::QuicConnection::PendingPathChallenge, 3, std::__1::allocator<quic::QuicConnection::PendingPathChallenge> >::AllocatorAndData" }
%"struct.quiche::QuicheCircularDeque<quic::QuicConnection::PendingPathChallenge, 3, std::__1::allocator<quic::QuicConnection::PendingPathChallenge> >::AllocatorAndData" = type { %"struct.quic::QuicConnection::PendingPathChallenge"*, i64 }
%"struct.quic::QuicConnection::PendingPathChallenge" = type { %"struct.std::__1::array.122", %"class.quic::QuicSocketAddress" }
%"class.std::__1::vector.228" = type { %"class.std::__1::__vector_base.229" }
%"class.std::__1::__vector_base.229" = type { %"class.quic::QuicConnectionId"*, %"class.quic::QuicConnectionId"*, %"class.std::__1::__compressed_pair.230" }
%"class.std::__1::__compressed_pair.230" = type { %"struct.std::__1::__compressed_pair_elem.231" }
%"struct.std::__1::__compressed_pair_elem.231" = type { %"class.quic::QuicConnectionId"* }
%"class.quic::QuicConnectionId" = type { %union.anon.18 }
%union.anon.18 = type { %struct.anon.20 }
%struct.anon.20 = type { i8, i8* }
%"class.absl::optional.235" = type { %"class.absl::optional_internal::optional_data.236" }
%"class.absl::optional_internal::optional_data.236" = type { %"class.absl::optional_internal::optional_data_base.237" }
%"class.absl::optional_internal::optional_data_base.237" = type { %"class.absl::optional_internal::optional_data_dtor_base.238" }
%"class.absl::optional_internal::optional_data_dtor_base.238" = type { i8, %union.anon.239 }
%union.anon.239 = type { %"class.quic::QuicConnectionId" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.240" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.240" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"class.quic::QuicCoalescedPacket" = type { %"class.quic::QuicSocketAddress", %"class.quic::QuicSocketAddress", i16, i16, [4 x %"class.std::__1::basic_string"], [4 x i8], %"class.std::__1::unique_ptr.244" }
%"class.std::__1::unique_ptr.244" = type { %"class.std::__1::__compressed_pair.245" }
%"class.std::__1::__compressed_pair.245" = type { %"struct.std::__1::__compressed_pair_elem.246" }
%"struct.std::__1::__compressed_pair_elem.246" = type { %"struct.quic::SerializedPacket"* }
%"class.quic::QuicConnectionMtuDiscoverer" = type { i16, i16, i16, i16, i64, %"class.quic::QuicPacketNumber" }
%"class.quic::QuicNetworkBlackholeDetector" = type { %"class.quic::QuicNetworkBlackholeDetector::Delegate"*, %"class.quic::QuicTime", %"class.quic::QuicTime", %"class.quic::QuicTime", %"class.quic::QuicArenaScopedPtr" }
%"class.quic::QuicIdleNetworkDetector" = type <{ %"class.quic::QuicIdleNetworkDetector::Delegate"*, %"class.quic::QuicTime", %"class.quic::QuicTime::Delta", %"class.quic::QuicTime", %"class.quic::QuicTime", %"class.quic::QuicTime::Delta", %"class.quic::QuicArenaScopedPtr", i8, [7 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.quic::QuicPathValidator" = type { %"class.std::__1::vector.250", %"class.quic::QuicPathValidator::SendDelegate"*, %"class.quic::QuicRandom"*, %"class.std::__1::unique_ptr.254", %"class.std::__1::unique_ptr.260", %"class.quic::QuicArenaScopedPtr", i64 }
%"class.std::__1::vector.250" = type { %"class.std::__1::__vector_base.251" }
%"class.std::__1::__vector_base.251" = type { %"struct.std::__1::array.122"*, %"struct.std::__1::array.122"*, %"class.std::__1::__compressed_pair.252" }
%"class.std::__1::__compressed_pair.252" = type { %"struct.std::__1::__compressed_pair_elem.218" }
%"class.std::__1::unique_ptr.254" = type { %"class.std::__1::__compressed_pair.255" }
%"class.std::__1::__compressed_pair.255" = type { %"struct.std::__1::__compressed_pair_elem.256" }
%"struct.std::__1::__compressed_pair_elem.256" = type { %"class.quic::QuicPathValidationContext"* }
%"class.quic::QuicPathValidationContext" = type { i32 (...)**, %"class.quic::QuicSocketAddress", %"class.quic::QuicSocketAddress", %"class.quic::QuicSocketAddress" }
%"class.std::__1::unique_ptr.260" = type { %"class.std::__1::__compressed_pair.261" }
%"class.std::__1::__compressed_pair.261" = type { %"struct.std::__1::__compressed_pair_elem.262" }
%"struct.std::__1::__compressed_pair_elem.262" = type { %"class.quic::QuicPathValidator::ResultDelegate"* }
%"class.quic::QuicPathValidator::ResultDelegate" = type { i32 (...)** }
%"struct.quic::QuicConnection::PathState" = type { %"class.quic::QuicSocketAddress", %"class.quic::QuicSocketAddress", %"class.quic::QuicConnectionId", %"class.quic::QuicConnectionId", %"struct.std::__1::array.40", i8, i8, i64, i64, %"class.std::__1::unique_ptr.41", %"class.absl::optional" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, [7 x i8], %union.anon.47 }
%union.anon.47 = type { %"class.quic::RttStats" }
%"class.quic::QuicSession::Visitor" = type { i32 (...)** }
%"class.quic::QuicWriteBlockedList" = type { %"class.http2::PriorityWriteScheduler", [8 x i32], [8 x i64], i8, %"class.quic::QuicWriteBlockedList::StaticStreamCollection" }
%"class.http2::PriorityWriteScheduler" = type <{ %"class.http2::WriteScheduler", i64, [8 x %"struct.http2::PriorityWriteScheduler<unsigned int>::PriorityInfo"], %"class.std::__1::unordered_map", i32, [4 x i8] }>
%"class.http2::WriteScheduler" = type { i32 (...)** }
%"struct.http2::PriorityWriteScheduler<unsigned int>::PriorityInfo" = type { %"class.std::__1::deque.266", i64 }
%"class.std::__1::deque.266" = type { %"class.std::__1::__deque_base.267" }
%"class.std::__1::__deque_base.267" = type { %"struct.std::__1::__split_buffer.268", i64, %"class.std::__1::__compressed_pair.274" }
%"struct.std::__1::__split_buffer.268" = type { %"struct.http2::PriorityWriteScheduler<unsigned int>::StreamInfo"***, %"struct.http2::PriorityWriteScheduler<unsigned int>::StreamInfo"***, %"struct.http2::PriorityWriteScheduler<unsigned int>::StreamInfo"***, %"class.std::__1::__compressed_pair.269" }
%"struct.http2::PriorityWriteScheduler<unsigned int>::StreamInfo" = type { i8, i32, i8 }
%"class.std::__1::__compressed_pair.269" = type { %"struct.std::__1::__compressed_pair_elem.270" }
%"struct.std::__1::__compressed_pair_elem.270" = type { %"struct.http2::PriorityWriteScheduler<unsigned int>::StreamInfo"*** }
%"class.std::__1::__compressed_pair.274" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.278", %"class.std::__1::__compressed_pair.286", %"class.std::__1::__compressed_pair.291", %"class.std::__1::__compressed_pair.294", [4 x i8] }>
%"class.std::__1::unique_ptr.278" = type { %"class.std::__1::__compressed_pair.279" }
%"class.std::__1::__compressed_pair.279" = type { %"struct.std::__1::__compressed_pair_elem.280", %"struct.std::__1::__compressed_pair_elem.281" }
%"struct.std::__1::__compressed_pair_elem.280" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.281" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.282" }
%"class.std::__1::__compressed_pair.282" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"class.std::__1::__compressed_pair.286" = type { %"struct.std::__1::__compressed_pair_elem.287" }
%"struct.std::__1::__compressed_pair_elem.287" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.291" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"class.std::__1::__compressed_pair.294" = type { %"struct.std::__1::__compressed_pair_elem.295" }
%"struct.std::__1::__compressed_pair_elem.295" = type { float }
%"class.quic::QuicWriteBlockedList::StaticStreamCollection" = type { i64, %"class.std::__1::vector.297" }
%"class.std::__1::vector.297" = type { %"class.std::__1::__vector_base.298" }
%"class.std::__1::__vector_base.298" = type { %"struct.quic::QuicWriteBlockedList::StaticStreamCollection::StreamIdBlockedPair"*, %"struct.quic::QuicWriteBlockedList::StaticStreamCollection::StreamIdBlockedPair"*, %"class.std::__1::__compressed_pair.299" }
%"struct.quic::QuicWriteBlockedList::StaticStreamCollection::StreamIdBlockedPair" = type { i32, i8 }
%"class.std::__1::__compressed_pair.299" = type { %"struct.std::__1::__compressed_pair_elem.300" }
%"struct.std::__1::__compressed_pair_elem.300" = type { %"struct.quic::QuicWriteBlockedList::StaticStreamCollection::StreamIdBlockedPair"* }
%"class.std::__1::vector.304" = type { %"class.std::__1::__vector_base.305" }
%"class.std::__1::__vector_base.305" = type { %"class.std::__1::unique_ptr.306"*, %"class.std::__1::unique_ptr.306"*, %"class.std::__1::__compressed_pair.312" }
%"class.std::__1::unique_ptr.306" = type { %"class.std::__1::__compressed_pair.307" }
%"class.std::__1::__compressed_pair.307" = type { %"struct.std::__1::__compressed_pair_elem.308" }
%"struct.std::__1::__compressed_pair_elem.308" = type { %"class.quic::QuicStream"* }
%"class.quic::QuicStream" = type <{ %"class.quic::QuicStreamSequencer::StreamInterface", %"class.quic::QuicStreamSequencer", i32, [4 x i8], %"class.quic::QuicSession"*, %"class.quic::StreamDelegateInterface"*, %"class.spdy::StreamPrecedence", i64, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [6 x i8], %"class.absl::optional.412", %"class.quic::QuicFlowController"*, i8, [7 x i8], i64, i8, [7 x i8], %"class.quic::QuicStreamSendBuffer", i64, i8, [7 x i8], %"class.quic::QuicTime", i8, [3 x i8], i32, %"class.quic::QuicTime", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.312" = type { %"struct.std::__1::__compressed_pair_elem.313" }
%"struct.std::__1::__compressed_pair_elem.313" = type { %"class.std::__1::unique_ptr.306"* }
%"class.quic::QuicConfig" = type { i8, %"class.quic::QuicTime::Delta", %"class.quic::QuicTime::Delta", i64, %"class.quic::QuicFixedTagVector", %"class.quic::QuicFixedTagVector", %"class.quic::QuicTime::Delta", %"class.absl::optional.324", %"class.quic::QuicFixedUint32", %"class.quic::QuicFixedUint32", %"class.quic::QuicFixedUint32", %"class.quic::QuicFixedUint62", %"class.quic::QuicFixedUint62", %"class.quic::QuicFixedUint62", %"class.quic::QuicFixedUint62", %"class.quic::QuicFixedUint62", %"class.quic::QuicFixedUint62", %"class.quic::QuicFixedUint32", i8, i8, [6 x i8], %"class.quic::QuicFixedSocketAddress", %"class.quic::QuicFixedSocketAddress", %"class.absl::optional.329", %"class.quic::QuicFixedStatelessResetToken", %"class.std::__1::vector.317", %"class.quic::QuicFixedUint32", %"class.quic::QuicFixedUint32", %"class.quic::QuicFixedUint32", %"class.quic::QuicFixedUint62", %"class.quic::QuicFixedUint62", %"class.quic::QuicFixedUint62", %"class.absl::optional.235", %"class.absl::optional.235", %"class.absl::optional.235", %"class.absl::optional.235", %"class.absl::optional.235", %"class.absl::optional.235", %"class.absl::flat_hash_map.335", %"class.absl::flat_hash_map.335" }
%"class.quic::QuicFixedTagVector" = type { %"class.quic::QuicConfigValue.base", i8, i8, %"class.std::__1::vector.317", %"class.std::__1::vector.317" }
%"class.quic::QuicConfigValue.base" = type <{ i32 (...)**, i32, i8 }>
%"class.absl::optional.324" = type { %"class.absl::optional_internal::optional_data.325" }
%"class.absl::optional_internal::optional_data.325" = type { %"class.absl::optional_internal::optional_data_base.326" }
%"class.absl::optional_internal::optional_data_base.326" = type { %"class.absl::optional_internal::optional_data_dtor_base.327" }
%"class.absl::optional_internal::optional_data_dtor_base.327" = type { i8, %union.anon.328 }
%union.anon.328 = type { %"class.quic::QuicTime::Delta" }
%"class.quic::QuicFixedSocketAddress" = type { %"class.quic::QuicConfigValue.base", i8, i8, i8, %"class.quic::QuicSocketAddress", %"class.quic::QuicSocketAddress" }
%"class.absl::optional.329" = type { %"class.absl::optional_internal::optional_data.330" }
%"class.absl::optional_internal::optional_data.330" = type { %"class.absl::optional_internal::optional_data_base.331" }
%"class.absl::optional_internal::optional_data_base.331" = type { %"class.absl::optional_internal::optional_data_dtor_base.332" }
%"class.absl::optional_internal::optional_data_dtor_base.332" = type { i8, %union.anon.333 }
%union.anon.333 = type { %"struct.std::__1::pair.334" }
%"struct.std::__1::pair.334" = type { %"class.quic::QuicConnectionId", %"struct.std::__1::array.40" }
%"class.quic::QuicFixedStatelessResetToken" = type { %"class.quic::QuicConfigValue.base", i8, i8, %"struct.std::__1::array.40", %"struct.std::__1::array.40", i8 }
%"class.std::__1::vector.317" = type { %"class.std::__1::__vector_base.318" }
%"class.std::__1::__vector_base.318" = type { i32*, i32*, %"class.std::__1::__compressed_pair.319" }
%"class.std::__1::__compressed_pair.319" = type { %"struct.std::__1::__compressed_pair_elem.320" }
%"struct.std::__1::__compressed_pair_elem.320" = type { i32* }
%"class.quic::QuicFixedUint32" = type { %"class.quic::QuicConfigValue.base", i8, i8, i32, i32 }
%"class.quic::QuicFixedUint62" = type { %"class.quic::QuicConfigValue.base", i8, i8, i64, i64 }
%"class.absl::flat_hash_map.335" = type { %"class.absl::container_internal::raw_hash_map.336" }
%"class.absl::container_internal::raw_hash_map.336" = type { %"class.absl::container_internal::raw_hash_set.337" }
%"class.absl::container_internal::raw_hash_set.337" = type { i8*, %"union.absl::container_internal::map_slot_type.338"*, i64, i64, %"class.absl::container_internal::CompressedTuple.339" }
%"union.absl::container_internal::map_slot_type.338" = type opaque
%"class.absl::container_internal::CompressedTuple.339" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.340" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.340" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.6" }
%"class.absl::flat_hash_map.350" = type { %"class.absl::container_internal::raw_hash_map.351" }
%"class.absl::container_internal::raw_hash_map.351" = type { %"class.absl::container_internal::raw_hash_set.352" }
%"class.absl::container_internal::raw_hash_set.352" = type { i8*, %"union.absl::container_internal::map_slot_type.353"*, i64, i64, %"class.absl::container_internal::CompressedTuple.354" }
%"union.absl::container_internal::map_slot_type.353" = type opaque
%"class.absl::container_internal::CompressedTuple.354" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.355" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.355" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.6" }
%"class.absl::flat_hash_map.359" = type { %"class.absl::container_internal::raw_hash_map.360" }
%"class.absl::container_internal::raw_hash_map.360" = type { %"class.absl::container_internal::raw_hash_set.361" }
%"class.absl::container_internal::raw_hash_set.361" = type { i8*, %"union.absl::container_internal::map_slot_type.362"*, i64, i64, %"class.absl::container_internal::CompressedTuple.363" }
%"union.absl::container_internal::map_slot_type.362" = type opaque
%"class.absl::container_internal::CompressedTuple.363" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.364" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.364" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.6" }
%"class.quic::LegacyQuicStreamIdManager" = type { i8, i32, i64, i64, i32, %"class.absl::flat_hash_set", i32, i64, i64 }
%"class.absl::flat_hash_set" = type { %"class.absl::container_internal::raw_hash_set.368" }
%"class.absl::container_internal::raw_hash_set.368" = type { i8*, i32*, i64, i64, %"class.absl::container_internal::CompressedTuple.369" }
%"class.absl::container_internal::CompressedTuple.369" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.370" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.370" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.6" }
%"class.quic::UberQuicStreamIdManager" = type { %"struct.quic::ParsedQuicVersion", %"class.quic::QuicStreamIdManager", %"class.quic::QuicStreamIdManager" }
%"class.quic::QuicStreamIdManager" = type <{ %"class.quic::QuicStreamIdManager::DelegateInterface"*, i8, i8, [2 x i8], %"struct.quic::ParsedQuicVersion", i32, i32, i32, i32, i32, i32, i32, %"class.absl::flat_hash_set", i32, [4 x i8] }>
%"struct.quic::QuicConnectionCloseFrame" = type { i32, i64, i32, %"class.std::__1::basic_string", i64 }
%"class.quic::QuicFlowController" = type { %"class.quic::QuicFlowControllerInterface", %"class.quic::QuicSession"*, %"class.quic::QuicConnection"*, i32, i8, i8, i64, i64, i64, i64, i64, i64, i64, i8, %"class.quic::QuicFlowControllerInterface"*, i64, %"class.quic::QuicTime" }
%"class.quic::QuicFlowControllerInterface" = type { i32 (...)** }
%"class.quic::QuicControlFrameManager" = type { %"class.quiche::QuicheCircularDeque.372", i32, i32, i32, %"class.quiche::QuicheLinkedHashMap", %"class.quic::QuicControlFrameManager::DelegateInterface"*, %"class.absl::flat_hash_map.388" }
%"class.quiche::QuicheCircularDeque.372" = type { i64, i64, %"struct.quiche::QuicheCircularDeque<quic::QuicFrame, 3, std::__1::allocator<quic::QuicFrame> >::AllocatorAndData" }
%"struct.quiche::QuicheCircularDeque<quic::QuicFrame, 3, std::__1::allocator<quic::QuicFrame> >::AllocatorAndData" = type { %"struct.quic::QuicFrame"*, i64 }
%"class.absl::flat_hash_map.388" = type { %"class.absl::container_internal::raw_hash_map.389" }
%"class.absl::container_internal::raw_hash_map.389" = type { %"class.absl::container_internal::raw_hash_set.390" }
%"class.absl::container_internal::raw_hash_set.390" = type { i8*, %"union.absl::container_internal::map_slot_type.391"*, i64, i64, %"class.absl::container_internal::CompressedTuple.392" }
%"union.absl::container_internal::map_slot_type.391" = type opaque
%"class.absl::container_internal::CompressedTuple.392" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.393" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.393" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.6" }
%"class.quic::QuicDatagramQueue" = type { %"class.quic::QuicSession"*, %"class.quic::QuicClock"*, %"class.quic::QuicTime::Delta", %"class.quiche::QuicheCircularDeque.397", %"class.std::__1::unique_ptr.400" }
%"class.quiche::QuicheCircularDeque.397" = type { i64, i64, %"struct.quiche::QuicheCircularDeque<quic::QuicDatagramQueue::Datagram, 3, std::__1::allocator<quic::QuicDatagramQueue::Datagram> >::AllocatorAndData" }
%"struct.quiche::QuicheCircularDeque<quic::QuicDatagramQueue::Datagram, 3, std::__1::allocator<quic::QuicDatagramQueue::Datagram> >::AllocatorAndData" = type { %"struct.quic::QuicDatagramQueue::Datagram"*, i64 }
%"struct.quic::QuicDatagramQueue::Datagram" = type { %"class.quic::QuicMemSlice", %"class.quic::QuicTime" }
%"class.quic::QuicMemSlice" = type { %"class.quic::QuicMemSliceImpl" }
%"class.quic::QuicMemSliceImpl" = type { %class.scoped_refptr.125, i64 }
%class.scoped_refptr.125 = type { %"class.net::IOBuffer"* }
%"class.net::IOBuffer" = type { i32 (...)**, %"class.base::RefCountedThreadSafe.126", i8* }
%"class.base::RefCountedThreadSafe.126" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::unique_ptr.400" = type { %"class.std::__1::__compressed_pair.401" }
%"class.std::__1::__compressed_pair.401" = type { %"struct.std::__1::__compressed_pair_elem.402" }
%"struct.std::__1::__compressed_pair_elem.402" = type { %"class.quic::QuicDatagramQueue::Observer"* }
%"class.quic::QuicDatagramQueue::Observer" = type { i32 (...)** }
%"class.quiche::QuicheLinkedHashMap" = type { %"class.absl::node_hash_map", %"class.std::__1::list.381" }
%"class.absl::node_hash_map" = type { %"class.absl::container_internal::raw_hash_map.373" }
%"class.absl::container_internal::raw_hash_map.373" = type { %"class.absl::container_internal::raw_hash_set.374" }
%"class.absl::container_internal::raw_hash_set.374" = type { i8*, %"struct.std::__1::pair.375"**, i64, i64, %"class.absl::container_internal::CompressedTuple.376" }
%"struct.std::__1::pair.375" = type opaque
%"class.absl::container_internal::CompressedTuple.376" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.377" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.377" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.6" }
%"class.std::__1::list.381" = type { %"class.std::__1::__list_imp.382" }
%"class.std::__1::__list_imp.382" = type { %"struct.std::__1::__list_node_base.383", %"class.std::__1::__compressed_pair.384" }
%"struct.std::__1::__list_node_base.383" = type { %"struct.std::__1::__list_node_base.383"*, %"struct.std::__1::__list_node_base.383"* }
%"class.std::__1::__compressed_pair.384" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"class.std::__1::unique_ptr.177" = type { %"class.std::__1::__compressed_pair.178" }
%"class.std::__1::__compressed_pair.178" = type { %"struct.std::__1::__compressed_pair_elem.179" }
%"struct.std::__1::__compressed_pair_elem.179" = type { %"class.quic::QuicAlarm"* }
%"class.quic::QuicAlarm" = type { i32 (...)**, %"class.quic::QuicArenaScopedPtr.180", %"class.quic::QuicTime" }
%"class.quic::QuicArenaScopedPtr.180" = type { i8* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.quic::ParsedQuicVersion"*, %"struct.quic::ParsedQuicVersion"*, %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"struct.quic::ParsedQuicVersion"* }
%"class.absl::optional.406" = type { %"class.absl::optional_internal::optional_data.407" }
%"class.absl::optional_internal::optional_data.407" = type { %"class.absl::optional_internal::optional_data_base.408" }
%"class.absl::optional_internal::optional_data_base.408" = type { %"class.absl::optional_internal::optional_data_dtor_base.409" }
%"class.absl::optional_internal::optional_data_dtor_base.409" = type { i8, %union.anon.410 }
%union.anon.410 = type { %"class.std::__1::basic_string" }
%"class.spdy::StreamPrecedence" = type { i8, %union.anon.411 }
%union.anon.411 = type { %"struct.spdy::StreamPrecedence<unsigned int>::Http2StreamDependency" }
%"struct.spdy::StreamPrecedence<unsigned int>::Http2StreamDependency" = type { i32, i32, i8 }
%"class.absl::optional.412" = type { %"class.absl::optional_internal::optional_data.413" }
%"class.absl::optional_internal::optional_data.413" = type { %"class.absl::optional_internal::optional_data_base.414" }
%"class.absl::optional_internal::optional_data_base.414" = type { %"class.absl::optional_internal::optional_data_dtor_base.415" }
%"class.absl::optional_internal::optional_data_dtor_base.415" = type { i8, %union.anon.416 }
%union.anon.416 = type { %"class.quic::QuicFlowController" }
%"class.quic::QuicStreamSendBuffer" = type <{ i64, %"class.quic::QuicIntervalDeque", i64, %"class.quic::QuicBufferAllocator"*, i64, i64, %"class.quic::QuicIntervalSet", %"class.quic::QuicIntervalSet", i32, [4 x i8] }>
%"class.quic::QuicIntervalDeque" = type { %"class.quiche::QuicheCircularDeque.419", %"class.absl::optional.151" }
%"class.quiche::QuicheCircularDeque.419" = type { i64, i64, %"struct.quiche::QuicheCircularDeque<quic::BufferedSlice, 3, std::__1::allocator<quic::BufferedSlice> >::AllocatorAndData" }
%"struct.quiche::QuicheCircularDeque<quic::BufferedSlice, 3, std::__1::allocator<quic::BufferedSlice> >::AllocatorAndData" = type { %"struct.quic::BufferedSlice"*, i64 }
%"struct.quic::BufferedSlice" = type { %"class.quic::QuicMemSlice", i64 }
%"class.quic::QuicBufferAllocator" = type { i32 (...)** }
%"class.quic::QuicTime" = type { i64 }
%"class.quiche::QuicheCircularDeque.630" = type { i64, i64, %"struct.quiche::QuicheCircularDeque<quic::QuicHeadersStream::CompressedHeaderInfo, 3, std::__1::allocator<quic::QuicHeadersStream::CompressedHeaderInfo> >::AllocatorAndData" }
%"struct.quiche::QuicheCircularDeque<quic::QuicHeadersStream::CompressedHeaderInfo, 3, std::__1::allocator<quic::QuicHeadersStream::CompressedHeaderInfo> >::AllocatorAndData" = type { %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"*, i64 }
%"class.quic::QuicSpdySession" = type { %"class.quic::QuicSession.base", %"class.quic::QpackEncoder::DecoderStreamErrorDelegate", %"class.quic::QpackDecoder::EncoderStreamErrorDelegate", %"class.std::__1::unique_ptr.422", %"class.std::__1::unique_ptr.491", %"class.quic::QuicHeadersStream"*, %"class.quic::QuicSendControlStream"*, %"class.quic::QuicReceiveControlStream"*, %"class.quic::QpackReceiveStream"*, %"class.quic::QpackReceiveStream"*, %"class.quic::QpackSendStream"*, %"class.quic::QpackSendStream"*, %"struct.quic::SettingsFrame", i64, i64, i64, i64, i32, i32, i64, i8, [7 x i8], %"class.spdy::SpdyFramer", %"class.http2::Http2DecoderAdapter", %"class.std::__1::unique_ptr.599", %"class.absl::optional.151", %"class.quic::Http3DebugVisitor"*, %"class.absl::flat_hash_map.605", i32, %"class.absl::optional.151", %"class.absl::optional.151", i64, i8, i8, %"class.absl::flat_hash_map.614", i8, %"class.absl::flat_hash_set", %"class.std::__1::list.623" }
%"class.quic::QuicSession.base" = type <{ %"class.quic::QuicConnectionVisitorInterface", %"class.quic::SessionNotifierInterface", %"class.quic::QuicStreamFrameDataProducer", %"class.quic::QuicStreamIdManager::DelegateInterface", %"class.quic::HandshakerDelegateInterface", %"class.quic::StreamDelegateInterface", %"class.quic::QuicControlFrameManager::DelegateInterface", %"class.absl::flat_hash_map", %"class.quic::QuicConnection"*, i8, [7 x i8], %"class.quic::QuicSession::Visitor"*, %"class.quic::QuicWriteBlockedList", %"class.std::__1::vector.304", %"class.quic::QuicConfig", %"class.absl::flat_hash_map.350", %"class.absl::flat_hash_map.359", %"class.quic::LegacyQuicStreamIdManager", %"class.quic::UberQuicStreamIdManager", i64, i64, i64, i64, %"struct.quic::QuicConnectionCloseFrame", %"class.quic::QuicFlowController", i32, i8, i8, [2 x i8], %"class.quic::QuicControlFrameManager", i32, [4 x i8], %"class.quic::QuicDatagramQueue", %"class.quiche::QuicheLinkedHashMap", %"class.std::__1::unique_ptr.177", %"class.std::__1::vector", %"class.absl::optional.406", i8, i8, i8, i8 }>
%"class.quic::QpackEncoder::DecoderStreamErrorDelegate" = type { i32 (...)** }
%"class.quic::QpackDecoder::EncoderStreamErrorDelegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr.422" = type { %"class.std::__1::__compressed_pair.423" }
%"class.std::__1::__compressed_pair.423" = type { %"struct.std::__1::__compressed_pair_elem.424" }
%"struct.std::__1::__compressed_pair_elem.424" = type { %"class.quic::QpackEncoder"* }
%"class.quic::QpackEncoder" = type <{ %"class.quic::QpackDecoderStreamReceiver::Delegate", %"class.quic::QpackEncoder::DecoderStreamErrorDelegate"*, %"class.quic::QpackDecoderStreamReceiver", %"class.quic::QpackEncoderStreamSender", %"class.quic::QpackEncoderHeaderTable", i64, %"class.quic::QpackBlockingManager", i32, [4 x i8] }>
%"class.quic::QpackDecoderStreamReceiver::Delegate" = type { i32 (...)** }
%"class.quic::QpackDecoderStreamReceiver" = type <{ %"class.quic::QpackInstructionDecoder::Delegate", %"class.quic::QpackStreamReceiver", %"class.quic::QpackInstructionDecoder", %"class.quic::QpackDecoderStreamReceiver::Delegate"*, i8, [7 x i8] }>
%"class.quic::QpackInstructionDecoder::Delegate" = type { i32 (...)** }
%"class.quic::QpackStreamReceiver" = type { i32 (...)** }
%"class.quic::QpackInstructionDecoder" = type { %"class.std::__1::vector.425"*, %"class.quic::QpackInstructionDecoder::Delegate"*, i8, i64, i64, %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, i64, %"class.http2::HpackVarintDecoder", %"class.http2::HpackHuffmanDecoder", i8, i32, %"struct.quic::QpackInstruction"*, %"class.std::__1::__wrap_iter" }
%"class.std::__1::vector.425" = type opaque
%"class.http2::HpackVarintDecoder" = type <{ i64, i8, [7 x i8] }>
%"class.http2::HpackHuffmanDecoder" = type { %"class.http2::HuffmanBitBuffer" }
%"class.http2::HuffmanBitBuffer" = type { i64, i64 }
%"struct.quic::QpackInstruction" = type { %"struct.quic::QpackInstructionOpcode", %"class.std::__1::vector.426" }
%"struct.quic::QpackInstructionOpcode" = type { i8, i8 }
%"class.std::__1::vector.426" = type { %"class.std::__1::__vector_base.427" }
%"class.std::__1::__vector_base.427" = type { %"struct.quic::QpackInstructionField"*, %"struct.quic::QpackInstructionField"*, %"class.std::__1::__compressed_pair.428" }
%"struct.quic::QpackInstructionField" = type { i32, i8 }
%"class.std::__1::__compressed_pair.428" = type { %"struct.std::__1::__compressed_pair_elem.429" }
%"struct.std::__1::__compressed_pair_elem.429" = type { %"struct.quic::QpackInstructionField"* }
%"class.std::__1::__wrap_iter" = type { %"struct.quic::QpackInstructionField"* }
%"class.quic::QpackEncoderStreamSender" = type { %"class.quic::QpackStreamSenderDelegate"*, %"class.quic::QpackInstructionEncoder", %"class.std::__1::basic_string" }
%"class.quic::QpackStreamSenderDelegate" = type { i32 (...)** }
%"class.quic::QpackInstructionEncoder" = type { i8, i64, i8, i32, %"struct.quic::QpackInstruction"*, %"class.std::__1::__wrap_iter" }
%"class.quic::QpackEncoderHeaderTable" = type { %"class.quic::QpackHeaderTableBase.base", %"class.absl::flat_hash_map.445"*, %"class.absl::flat_hash_map.460"*, %"class.absl::flat_hash_map.445", %"class.absl::flat_hash_map.460" }
%"class.quic::QpackHeaderTableBase.base" = type <{ i32 (...)**, %"class.std::__1::deque.433", i64, i64, i64, i64, i64, i8 }>
%"class.std::__1::deque.433" = type { %"class.std::__1::__deque_base.434" }
%"class.std::__1::__deque_base.434" = type { %"struct.std::__1::__split_buffer.435", i64, %"class.std::__1::__compressed_pair.441" }
%"struct.std::__1::__split_buffer.435" = type { %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"**, %"class.std::__1::__compressed_pair.436" }
%"class.spdy::HpackEntry" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.436" = type { %"struct.std::__1::__compressed_pair_elem.437" }
%"struct.std::__1::__compressed_pair_elem.437" = type { %"class.spdy::HpackEntry"** }
%"class.std::__1::__compressed_pair.441" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"class.absl::flat_hash_map.445" = type { %"class.absl::container_internal::raw_hash_map.446" }
%"class.absl::container_internal::raw_hash_map.446" = type { %"class.absl::container_internal::raw_hash_set.447" }
%"class.absl::container_internal::raw_hash_set.447" = type { i8*, %"union.absl::container_internal::map_slot_type.448"*, i64, i64, %"class.absl::container_internal::CompressedTuple.449" }
%"union.absl::container_internal::map_slot_type.448" = type opaque
%"class.absl::container_internal::CompressedTuple.449" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.450" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.450" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.6" }
%"class.absl::flat_hash_map.460" = type { %"class.absl::container_internal::raw_hash_map.461" }
%"class.absl::container_internal::raw_hash_map.461" = type { %"class.absl::container_internal::raw_hash_set.462" }
%"class.absl::container_internal::raw_hash_set.462" = type { i8*, %"union.absl::container_internal::map_slot_type.463"*, i64, i64, %"class.absl::container_internal::CompressedTuple.464" }
%"union.absl::container_internal::map_slot_type.463" = type opaque
%"class.absl::container_internal::CompressedTuple.464" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.465" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.465" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.6" }
%"class.quic::QpackBlockingManager" = type { %"class.absl::flat_hash_map.471", %"class.std::__1::map", i64 }
%"class.absl::flat_hash_map.471" = type { %"class.absl::container_internal::raw_hash_map.472" }
%"class.absl::container_internal::raw_hash_map.472" = type { %"class.absl::container_internal::raw_hash_set.473" }
%"class.absl::container_internal::raw_hash_set.473" = type { i8*, %"union.absl::container_internal::map_slot_type.474"*, i64, i64, %"class.absl::container_internal::CompressedTuple.475" }
%"union.absl::container_internal::map_slot_type.474" = type opaque
%"class.absl::container_internal::CompressedTuple.475" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.476" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.476" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.6" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.480", %"class.std::__1::__compressed_pair.485" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.480" = type { %"struct.std::__1::__compressed_pair_elem.481" }
%"struct.std::__1::__compressed_pair_elem.481" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.485" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"class.std::__1::unique_ptr.491" = type { %"class.std::__1::__compressed_pair.492" }
%"class.std::__1::__compressed_pair.492" = type { %"struct.std::__1::__compressed_pair_elem.493" }
%"struct.std::__1::__compressed_pair_elem.493" = type { %"class.quic::QpackDecoder"* }
%"class.quic::QpackDecoder" = type { %"class.quic::QpackEncoderStreamReceiver::Delegate", %"class.quic::QpackProgressiveDecoder::BlockedStreamLimitEnforcer", %"class.quic::QpackProgressiveDecoder::DecodingCompletedVisitor", %"class.quic::QpackDecoder::EncoderStreamErrorDelegate"*, %"class.quic::QpackEncoderStreamReceiver", %"class.quic::QpackDecoderStreamSender", %"class.quic::QpackDecoderHeaderTable", %"class.std::__1::set", i64, i64 }
%"class.quic::QpackEncoderStreamReceiver::Delegate" = type { i32 (...)** }
%"class.quic::QpackProgressiveDecoder::BlockedStreamLimitEnforcer" = type { i32 (...)** }
%"class.quic::QpackProgressiveDecoder::DecodingCompletedVisitor" = type { i32 (...)** }
%"class.quic::QpackEncoderStreamReceiver" = type <{ %"class.quic::QpackInstructionDecoder::Delegate", %"class.quic::QpackStreamReceiver", %"class.quic::QpackInstructionDecoder", %"class.quic::QpackEncoderStreamReceiver::Delegate"*, i8, [7 x i8] }>
%"class.quic::QpackDecoderStreamSender" = type { %"class.quic::QpackStreamSenderDelegate"*, %"class.quic::QpackInstructionEncoder", %"class.std::__1::basic_string" }
%"class.quic::QpackDecoderHeaderTable" = type { %"class.quic::QpackHeaderTableBase.base.496", %"class.std::__1::vector.497"*, %"class.std::__1::multimap" }
%"class.quic::QpackHeaderTableBase.base.496" = type <{ i32 (...)**, %"class.quiche::QuicheCircularDeque.495", i64, i64, i64, i64, i64, i8 }>
%"class.quiche::QuicheCircularDeque.495" = type { i64, i64, %"struct.quiche::QuicheCircularDeque<spdy::HpackEntry, 3, std::__1::allocator<spdy::HpackEntry> >::AllocatorAndData" }
%"struct.quiche::QuicheCircularDeque<spdy::HpackEntry, 3, std::__1::allocator<spdy::HpackEntry> >::AllocatorAndData" = type { %"class.spdy::HpackEntry"*, i64 }
%"class.std::__1::vector.497" = type opaque
%"class.std::__1::multimap" = type { %"class.std::__1::__tree.498" }
%"class.std::__1::__tree.498" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.499", %"class.std::__1::__compressed_pair.503" }
%"class.std::__1::__compressed_pair.499" = type { %"struct.std::__1::__compressed_pair_elem.481" }
%"class.std::__1::__compressed_pair.503" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"class.std::__1::set" = type { %"class.std::__1::__tree.506" }
%"class.std::__1::__tree.506" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.507", %"class.std::__1::__compressed_pair.511" }
%"class.std::__1::__compressed_pair.507" = type { %"struct.std::__1::__compressed_pair_elem.481" }
%"class.std::__1::__compressed_pair.511" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"class.quic::QuicSendControlStream" = type { %"class.quic::QuicStream.base", i8, %"struct.quic::SettingsFrame", %"class.quic::QuicSpdySession"* }
%"class.quic::QuicReceiveControlStream" = type { %"class.quic::QuicStream.base", %"class.quic::HttpDecoder::Visitor", i8, [7 x i8], %"class.quic::HttpDecoder", %"class.quic::QuicSpdySession"* }
%"class.quic::HttpDecoder::Visitor" = type { i32 (...)** }
%"class.quic::HttpDecoder" = type <{ %"class.quic::HttpDecoder::Visitor"*, i8, [3 x i8], i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i32, [4 x i8], %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"struct.std::__1::array.531", %"struct.std::__1::array.531", %"struct.std::__1::array.531", i8, i8, [6 x i8] }>
%"struct.std::__1::array.531" = type { [8 x i8] }
%"class.quic::QpackReceiveStream" = type { %"class.quic::QuicStream.base", %"class.quic::QpackStreamReceiver"* }
%"class.quic::QpackSendStream" = type <{ %"class.quic::QuicStream.base", [7 x i8], %"class.quic::QpackStreamSenderDelegate", i64, i8, [7 x i8] }>
%"struct.quic::SettingsFrame" = type { %"class.absl::flat_hash_map.517" }
%"class.absl::flat_hash_map.517" = type { %"class.absl::container_internal::raw_hash_map.518" }
%"class.absl::container_internal::raw_hash_map.518" = type { %"class.absl::container_internal::raw_hash_set.519" }
%"class.absl::container_internal::raw_hash_set.519" = type { i8*, %"union.absl::container_internal::map_slot_type.520"*, i64, i64, %"class.absl::container_internal::CompressedTuple.521" }
%"union.absl::container_internal::map_slot_type.520" = type { %"struct.std::__1::pair.635" }
%"struct.std::__1::pair.635" = type { i64, i64 }
%"class.absl::container_internal::CompressedTuple.521" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.522" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.522" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.6" }
%"class.spdy::SpdyFramer" = type <{ i32 (...)**, %"class.std::__1::unique_ptr.532", %"class.spdy::SpdyFramerDebugVisitorInterface"*, i32, [4 x i8] }>
%"class.std::__1::unique_ptr.532" = type { %"class.std::__1::__compressed_pair.533" }
%"class.std::__1::__compressed_pair.533" = type { %"struct.std::__1::__compressed_pair_elem.534" }
%"struct.std::__1::__compressed_pair_elem.534" = type { %"class.spdy::HpackEncoder"* }
%"class.spdy::HpackEncoder" = type <{ %"class.spdy::HpackHeaderTable", %"class.spdy::HpackOutputStream", i64, %"class.std::__1::function.535", %"class.std::__1::function.541", i8, i8, [6 x i8] }>
%"class.spdy::HpackHeaderTable" = type { %"class.std::__1::vector.497"*, %"class.std::__1::deque.433", %"class.absl::flat_hash_map.445"*, %"class.absl::flat_hash_map.460"*, %"class.absl::flat_hash_map.445", %"class.absl::flat_hash_map.460", i64, i64, i64, i64 }
%"class.spdy::HpackOutputStream" = type { %"class.std::__1::basic_string", i64 }
%"class.std::__1::function.535" = type { %"class.std::__1::__function::__policy_func.539" }
%"class.std::__1::__function::__policy_func.539" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker.540", %"struct.std::__1::__function::__policy"* }
%"struct.std::__1::__function::__policy_invoker.540" = type { void (%"union.std::__1::__function::__policy_storage"*, %"class.absl::string_view"*, %"class.absl::string_view"*)* }
%"class.std::__1::function.541" = type { %"class.std::__1::__function::__policy_func.545" }
%"class.std::__1::__function::__policy_func.545" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker.546", %"struct.std::__1::__function::__policy"* }
%"struct.std::__1::__function::__policy_invoker.546" = type { i1 (%"union.std::__1::__function::__policy_storage"*, %"class.absl::string_view"*, %"class.absl::string_view"*)* }
%"class.spdy::SpdyFramerDebugVisitorInterface" = type { i32 (...)** }
%"class.http2::Http2DecoderAdapter" = type { %"class.http2::Http2FrameDecoderListener", %"struct.http2::Http2FrameHeader", %"struct.http2::Http2FrameHeader", %"class.absl::optional.151", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, %"class.std::__1::basic_string", %"class.http2::Http2FrameDecoderNoOpListener", %"class.spdy::SpdyFramerVisitorInterface"*, %"class.spdy::SpdyFramerDebugVisitorInterface"*, %"class.spdy::ExtensionVisitorInterface"*, %"class.std::__1::unique_ptr.550", %"class.std::__1::unique_ptr.592", i8, i32, i32, i64, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.http2::Http2FrameDecoderListener" = type { i32 (...)** }
%"struct.http2::Http2FrameHeader" = type { i32, i32, i8, i32 }
%"class.http2::Http2FrameDecoderNoOpListener" = type { %"class.http2::Http2FrameDecoderListener" }
%"class.spdy::SpdyFramerVisitorInterface" = type { i32 (...)** }
%"class.spdy::ExtensionVisitorInterface" = type { i32 (...)** }
%"class.std::__1::unique_ptr.550" = type { %"class.std::__1::__compressed_pair.551" }
%"class.std::__1::__compressed_pair.551" = type { %"struct.std::__1::__compressed_pair_elem.552" }
%"struct.std::__1::__compressed_pair_elem.552" = type { %"class.spdy::HpackDecoderAdapter"* }
%"class.spdy::HpackDecoderAdapter" = type { %"class.spdy::HpackDecoderAdapter::ListenerAdapter", %"class.http2::HpackDecoder", i64, i64, i8, i32, %"class.std::__1::basic_string" }
%"class.spdy::HpackDecoderAdapter::ListenerAdapter" = type { %"class.http2::HpackDecoderListener", %"class.spdy::Http2HeaderBlock", %"class.spdy::SpdyHeadersHandlerInterface"*, i64, i64 }
%"class.http2::HpackDecoderListener" = type { i32 (...)** }
%"class.spdy::Http2HeaderBlock" = type { %"class.quiche::QuicheLinkedHashMap.553", %"class.spdy::SpdyHeaderStorage", i64, i64 }
%"class.quiche::QuicheLinkedHashMap.553" = type { %"class.absl::node_hash_map.554", %"class.std::__1::list.565" }
%"class.absl::node_hash_map.554" = type { %"class.absl::container_internal::raw_hash_map.555" }
%"class.absl::container_internal::raw_hash_map.555" = type { %"class.absl::container_internal::raw_hash_set.556" }
%"class.absl::container_internal::raw_hash_set.556" = type { i8*, %"struct.std::__1::pair.557"**, i64, i64, %"class.absl::container_internal::CompressedTuple.558" }
%"struct.std::__1::pair.557" = type { %"class.absl::string_view", %"class.std::__1::__list_iterator" }
%"class.std::__1::__list_iterator" = type { %"struct.std::__1::__list_node_base.567"* }
%"struct.std::__1::__list_node_base.567" = type { %"struct.std::__1::__list_node_base.567"*, %"struct.std::__1::__list_node_base.567"* }
%"class.absl::container_internal::CompressedTuple.558" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.559" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.559" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.6" }
%"class.std::__1::list.565" = type { %"class.std::__1::__list_imp.566" }
%"class.std::__1::__list_imp.566" = type { %"struct.std::__1::__list_node_base.567", %"class.std::__1::__compressed_pair.568" }
%"class.std::__1::__compressed_pair.568" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"class.spdy::SpdyHeaderStorage" = type { %"class.spdy::SpdySimpleArena" }
%"class.spdy::SpdySimpleArena" = type { i64, %"class.std::__1::vector.572", %"class.spdy::SpdySimpleArena::Status" }
%"class.std::__1::vector.572" = type { %"class.std::__1::__vector_base.573" }
%"class.std::__1::__vector_base.573" = type { %"struct.spdy::SpdySimpleArena::Block"*, %"struct.spdy::SpdySimpleArena::Block"*, %"class.std::__1::__compressed_pair.580" }
%"struct.spdy::SpdySimpleArena::Block" = type { %"class.std::__1::unique_ptr.574", i64, i64 }
%"class.std::__1::unique_ptr.574" = type { %"class.std::__1::__compressed_pair.575" }
%"class.std::__1::__compressed_pair.575" = type { %"struct.std::__1::__compressed_pair_elem.576" }
%"struct.std::__1::__compressed_pair_elem.576" = type { i8* }
%"class.std::__1::__compressed_pair.580" = type { %"struct.std::__1::__compressed_pair_elem.581" }
%"struct.std::__1::__compressed_pair_elem.581" = type { %"struct.spdy::SpdySimpleArena::Block"* }
%"class.spdy::SpdySimpleArena::Status" = type { i64 }
%"class.spdy::SpdyHeadersHandlerInterface" = type { i32 (...)** }
%"class.http2::HpackDecoder" = type { i32 (...)**, %"class.http2::HpackDecoderState", %"class.http2::HpackWholeEntryBuffer", %"class.http2::HpackBlockDecoder", i32, %"class.std::__1::basic_string" }
%"class.http2::HpackDecoderState" = type { %"class.http2::HpackWholeEntryListener", %"class.http2::HpackDecoderTables", %"class.http2::HpackDecoderListener"*, i32, i32, i8, i8, i8, i32, %"class.std::__1::basic_string" }
%"class.http2::HpackWholeEntryListener" = type { i32 (...)** }
%"class.http2::HpackDecoderTables" = type { %"class.http2::HpackDecoderStaticTable", %"class.http2::HpackDecoderDynamicTable" }
%"class.http2::HpackDecoderStaticTable" = type { %"class.std::__1::vector.585"* }
%"class.std::__1::vector.585" = type opaque
%"class.http2::HpackDecoderDynamicTable" = type { %"class.quiche::QuicheCircularDeque.586", i64, i64, i64 }
%"class.quiche::QuicheCircularDeque.586" = type { i64, i64, %"struct.quiche::QuicheCircularDeque<http2::HpackStringPair, 3, std::__1::allocator<http2::HpackStringPair> >::AllocatorAndData" }
%"struct.quiche::QuicheCircularDeque<http2::HpackStringPair, 3, std::__1::allocator<http2::HpackStringPair> >::AllocatorAndData" = type { %"struct.http2::HpackStringPair"*, i64 }
%"struct.http2::HpackStringPair" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.http2::HpackWholeEntryBuffer" = type <{ %"class.http2::HpackEntryDecoderListener", %"class.http2::HpackWholeEntryListener"*, %"class.http2::HpackDecoderStringBuffer", %"class.http2::HpackDecoderStringBuffer", i64, i64, i32, i8, [3 x i8] }>
%"class.http2::HpackEntryDecoderListener" = type { i32 (...)** }
%"class.http2::HpackDecoderStringBuffer" = type <{ %"class.std::__1::basic_string", %"class.absl::string_view", %"class.http2::HpackHuffmanDecoder", i64, i8, i8, i8, [5 x i8] }>
%"class.http2::HpackBlockDecoder" = type <{ %"class.http2::HpackEntryDecoder", %"class.http2::HpackEntryDecoderListener"*, i8, [7 x i8] }>
%"class.http2::HpackEntryDecoder" = type { %"class.http2::HpackEntryTypeDecoder", %"class.http2::HpackStringDecoder", i32, i32 }
%"class.http2::HpackEntryTypeDecoder" = type { %"class.http2::HpackVarintDecoder", i32, [4 x i8] }
%"class.http2::HpackStringDecoder" = type <{ %"class.http2::HpackVarintDecoder", i64, i32, i8, [3 x i8] }>
%"class.std::__1::unique_ptr.592" = type { %"class.std::__1::__compressed_pair.593" }
%"class.std::__1::__compressed_pair.593" = type { %"struct.std::__1::__compressed_pair_elem.594" }
%"struct.std::__1::__compressed_pair_elem.594" = type { %"class.http2::Http2FrameDecoder"* }
%"class.http2::Http2FrameDecoder" = type { %"class.http2::FrameDecoderState", %union.anon.595, i32, i64, %"class.http2::Http2FrameDecoderNoOpListener" }
%"class.http2::FrameDecoderState" = type { %"class.http2::Http2FrameDecoderListener"*, %"struct.http2::Http2FrameHeader", i32, i32, %"class.http2::Http2StructureDecoder" }
%"class.http2::Http2StructureDecoder" = type <{ i32, [9 x i8], [3 x i8] }>
%union.anon.595 = type { %"class.http2::HeadersPayloadDecoder" }
%"class.http2::HeadersPayloadDecoder" = type { i32, %"struct.http2::Http2PriorityFields" }
%"struct.http2::Http2PriorityFields" = type <{ i32, i32, i8, [3 x i8] }>
%"class.std::__1::unique_ptr.599" = type { %"class.std::__1::__compressed_pair.600" }
%"class.std::__1::__compressed_pair.600" = type { %"struct.std::__1::__compressed_pair_elem.601" }
%"struct.std::__1::__compressed_pair_elem.601" = type { %"class.quic::QuicSpdySession::SpdyFramerVisitor"* }
%"class.quic::QuicSpdySession::SpdyFramerVisitor" = type opaque
%"class.quic::Http3DebugVisitor" = type { i32 (...)** }
%"class.absl::flat_hash_map.605" = type { %"class.absl::container_internal::raw_hash_map.606" }
%"class.absl::container_internal::raw_hash_map.606" = type { %"class.absl::container_internal::raw_hash_set.607" }
%"class.absl::container_internal::raw_hash_set.607" = type { i8*, %"union.absl::container_internal::map_slot_type.608"*, i64, i64, %"class.absl::container_internal::CompressedTuple.609" }
%"union.absl::container_internal::map_slot_type.608" = type opaque
%"class.absl::container_internal::CompressedTuple.609" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.610" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.610" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.6" }
%"class.absl::flat_hash_map.614" = type { %"class.absl::container_internal::raw_hash_map.615" }
%"class.absl::container_internal::raw_hash_map.615" = type { %"class.absl::container_internal::raw_hash_set.616" }
%"class.absl::container_internal::raw_hash_set.616" = type { i8*, %"union.absl::container_internal::map_slot_type.617"*, i64, i64, %"class.absl::container_internal::CompressedTuple.618" }
%"union.absl::container_internal::map_slot_type.617" = type opaque
%"class.absl::container_internal::CompressedTuple.618" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.619" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.619" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.6" }
%"class.std::__1::list.623" = type { %"class.std::__1::__list_imp.624" }
%"class.std::__1::__list_imp.624" = type { %"struct.std::__1::__list_node_base.625", %"class.std::__1::__compressed_pair.626" }
%"struct.std::__1::__list_node_base.625" = type { %"struct.std::__1::__list_node_base.625"*, %"struct.std::__1::__list_node_base.625"* }
%"class.std::__1::__compressed_pair.626" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"class.quic::QuicReferenceCountedImpl" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8] }>
%struct.iovec = type { i8*, i64 }
%"class.quic::QuicInterval" = type { i64, i64 }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::allocator" = type { i8 }
%"struct.std::__1::pair.642" = type { %"struct.absl::container_internal::btree_iterator.640", i8, [7 x i8] }
%"struct.absl::container_internal::btree_iterator.640" = type <{ %"class.absl::container_internal::btree_node"*, i32, [4 x i8] }>
%"struct.quic::QuicRstStreamFrame" = type { i32, i32, i32, i64, i64 }
%"struct.quic::QuicWindowUpdateFrame" = type { i32, i32, i64 }
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>
%"struct.std::__1::pair.644" = type { i64, %"struct.absl::container_internal::btree_iterator.640" }

$_ZN4quic15QuicIntervalSetImE10DifferenceERKS1_ = comdat any

$_ZNK4quic10QuicStream2idEv = comdat any

$_ZN4quic10QuicStream28MaybeSendPriorityUpdateFrameEv = comdat any

$_ZN4quic10QuicStream17OnCanWriteNewDataEv = comdat any

$_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16clear_and_deleteEPSD_PSB_ = comdat any

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

$_ZNK6quiche19QuicheCircularDequeIN4quic17QuicHeadersStream20CompressedHeaderInfoELm3ENSt3__19allocatorIS3_EEE12DestroyRangeEmm = comdat any

$_ZN4quic15QuicIntervalSetImE3AddERKNS_12QuicIntervalImEE = comdat any

$_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE11erase_rangeENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EESJ_ = comdat any

$_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE22rebalance_after_deleteENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EE = comdat any

$_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE5eraseENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EE = comdat any

$_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE22try_merge_or_rebalanceEPNS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EE = comdat any

$_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE23rebalance_right_to_leftEiPSD_PSB_ = comdat any

$_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE23rebalance_left_to_rightEiPSD_PSB_ = comdat any

$_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE5mergeEPSD_PSB_ = comdat any

$_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE13insert_uniqueIS5_JRKS5_EEENS9_4pairINS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EEbEERKT_DpOT0_ = comdat any

$_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16internal_emplaceIJRKS5_EEENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EESM_DpOT_ = comdat any

$_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE18rebalance_or_splitEPNS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EE = comdat any

$_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE5splitEiPSD_PSB_ = comdat any

$_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE18insert_hint_uniqueIS5_JRKS5_EEENS9_4pairINS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EEbEESN_RKT_DpOT0_ = comdat any

$_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE18insert_hint_uniqueIS5_JS5_EEENS9_4pairINS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EEbEESL_RKT_DpOT0_ = comdat any

$_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16internal_emplaceIJS5_EEENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EESK_DpOT_ = comdat any

$_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE13insert_uniqueIS5_JS5_EEENS9_4pairINS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EEbEERKT_DpOT0_ = comdat any

$_ZN6quiche19QuicheCircularDequeIN4quic17QuicHeadersStream20CompressedHeaderInfoELm3ENSt3__19allocatorIS3_EEE8RelocateEm = comdat any

$_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node = comdat any

@_ZTVN4quic17QuicHeadersStreamE = hidden unnamed_addr constant { [32 x i8*] } { [32 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.quic::QuicHeadersStream"*)* @_ZN4quic17QuicHeadersStreamD2Ev to i8*), i8* bitcast (void (%"class.quic::QuicHeadersStream"*)* @_ZN4quic17QuicHeadersStreamD0Ev to i8*), i8* bitcast (void (%"class.quic::QuicHeadersStream"*)* @_ZN4quic17QuicHeadersStream15OnDataAvailableEv to i8*), i8* bitcast (void (%"class.quic::QuicStream"*)* @_ZN4quic10QuicStream9OnFinReadEv to i8*), i8* bitcast (void (%"class.quic::QuicStream"*, i64)* @_ZN4quic10QuicStream16AddBytesConsumedEm to i8*), i8* bitcast (void (%"class.quic::QuicStream"*, i32)* @_ZN4quic10QuicStream5ResetENS_22QuicRstStreamErrorCodeE to i8*), i8* bitcast (void (%"class.quic::QuicStream"*, i32, %"class.std::__1::basic_string"*)* @_ZN4quic10QuicStream20OnUnrecoverableErrorENS_13QuicErrorCodeERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE to i8*), i8* bitcast (void (%"class.quic::QuicStream"*, i32, i64, %"class.std::__1::basic_string"*)* @_ZN4quic10QuicStream20OnUnrecoverableErrorENS_13QuicErrorCodeENS_27QuicIetfTransportErrorCodesERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE to i8*), i8* bitcast (i32 (%"class.quic::QuicStream"*)* @_ZNK4quic10QuicStream2idEv to i8*), i8* bitcast (void (%"struct.quic::ParsedQuicVersion"*, %"class.quic::QuicStream"*)* @_ZNK4quic10QuicStream7versionEv to i8*), i8* bitcast (void (%"class.quic::QuicStream"*, %"struct.quic::QuicStreamFrame"*)* @_ZN4quic10QuicStream13OnStreamFrameERKNS_15QuicStreamFrameE to i8*), i8* bitcast (void (%"class.quic::QuicStream"*)* @_ZN4quic10QuicStream10OnCanWriteEv to i8*), i8* bitcast (void (%"class.quic::QuicHeadersStream"*, %"struct.quic::QuicRstStreamFrame"*)* @_ZN4quic17QuicHeadersStream13OnStreamResetERKNS_18QuicRstStreamFrameE to i8*), i8* bitcast (void (%"class.quic::QuicStream"*, i32, i32)* @_ZN4quic10QuicStream18OnConnectionClosedENS_13QuicErrorCodeENS_21ConnectionCloseSourceE to i8*), i8* bitcast (void (%"class.quic::QuicStream"*)* @_ZN4quic10QuicStream28MaybeSendPriorityUpdateFrameEv to i8*), i8* bitcast (void (%"class.quic::QuicStream"*, %"struct.quic::QuicWindowUpdateFrame"*)* @_ZN4quic10QuicStream19OnWindowUpdateFrameERKNS_21QuicWindowUpdateFrameE to i8*), i8* bitcast (void (%"class.quic::QuicStream"*)* @_ZN4quic10QuicStream11StopReadingEv to i8*), i8* bitcast (i1 (%"class.quic::QuicHeadersStream"*, i64, i64, i1, i64, i64, i64*)* @_ZN4quic17QuicHeadersStream18OnStreamFrameAckedEmmbNS_8QuicTime5DeltaES1_Pm to i8*), i8* bitcast (void (%"class.quic::QuicHeadersStream"*, i64, i64, i1)* @_ZN4quic17QuicHeadersStream26OnStreamFrameRetransmittedEmmb to i8*), i8* bitcast (void (%"class.quic::QuicStream"*, i64, i64, i1)* @_ZN4quic10QuicStream17OnStreamFrameLostEmmb to i8*), i8* bitcast (i1 (%"class.quic::QuicStream"*, i64, i64, i1, i8)* @_ZN4quic10QuicStream20RetransmitStreamDataEmmbNS_16TransmissionTypeE to i8*), i8* bitcast (i1 (%"class.quic::QuicStream"*)* @_ZNK4quic10QuicStream24HasPendingRetransmissionEv to i8*), i8* bitcast (i1 (%"class.quic::QuicStream"*, i32)* @_ZN4quic10QuicStream13OnStopSendingENS_22QuicRstStreamErrorCodeE to i8*), i8* bitcast (void (%"class.quic::QuicHeadersStream"*, i64, i64, %"class.quic::QuicReferenceCountedPointer"*)* @_ZN4quic17QuicHeadersStream14OnDataBufferedEmmRKNS_27QuicReferenceCountedPointerINS_24QuicAckListenerInterfaceEEE to i8*), i8* bitcast (void (%"class.quic::QuicStream"*)* @_ZN4quic10QuicStream7OnCloseEv to i8*), i8* bitcast (void (%"class.quic::QuicStream"*)* @_ZN4quic10QuicStream17OnCanWriteNewDataEv to i8*), i8* bitcast (void (%"class.quic::QuicStream"*, i64)* @_ZN4quic10QuicStream20OnStreamDataConsumedEm to i8*), i8* bitcast (void (%"class.quic::QuicStream"*)* @_ZN4quic10QuicStream26WritePendingRetransmissionEv to i8*), i8* bitcast (void (%"class.quic::QuicStream"*)* @_ZN4quic10QuicStream16OnDeadlinePassedEv to i8*), i8* bitcast (void (%"class.quic::QuicStream"*)* @_ZN4quic10QuicStream14CloseWriteSideEv to i8*)] }, align 8
@.str = private unnamed_addr constant [71 x i8] c"../../net/third_party/quiche/src/quic/core/http/quic_headers_stream.cc\00", align 1
@.str.1 = private unnamed_addr constant [46 x i8] c"Unsent stream data is acked. unacked_length: \00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c" acked_length: \00", align 1
@.str.3 = private unnamed_addr constant [28 x i8] c"Unsent stream data is acked\00", align 1
@.str.4 = private unnamed_addr constant [32 x i8] c"Attempt to reset headers stream\00", align 1
@_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node = linkonce_odr hidden constant { %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 } { %"class.absl::container_internal::btree_node"* bitcast ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to %"class.absl::container_internal::btree_node"*), i8 0, i8 0, i8 0, i8 1 }, comdat, align 8
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8

@_ZN4quic17QuicHeadersStream20CompressedHeaderInfoC1EmmNS_27QuicReferenceCountedPointerINS_24QuicAckListenerInterfaceEEE = hidden unnamed_addr alias void (%"struct.quic::QuicHeadersStream::CompressedHeaderInfo"*, i64, i64, %"class.quic::QuicReferenceCountedPointer"*), void (%"struct.quic::QuicHeadersStream::CompressedHeaderInfo"*, i64, i64, %"class.quic::QuicReferenceCountedPointer"*)* @_ZN4quic17QuicHeadersStream20CompressedHeaderInfoC2EmmNS_27QuicReferenceCountedPointerINS_24QuicAckListenerInterfaceEEE
@_ZN4quic17QuicHeadersStream20CompressedHeaderInfoC1ERKS1_ = hidden unnamed_addr alias void (%"struct.quic::QuicHeadersStream::CompressedHeaderInfo"*, %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"*), void (%"struct.quic::QuicHeadersStream::CompressedHeaderInfo"*, %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"*)* @_ZN4quic17QuicHeadersStream20CompressedHeaderInfoC2ERKS1_
@_ZN4quic17QuicHeadersStream20CompressedHeaderInfoD1Ev = hidden unnamed_addr alias void (%"struct.quic::QuicHeadersStream::CompressedHeaderInfo"*), void (%"struct.quic::QuicHeadersStream::CompressedHeaderInfo"*)* @_ZN4quic17QuicHeadersStream20CompressedHeaderInfoD2Ev
@_ZN4quic17QuicHeadersStreamC1EPNS_15QuicSpdySessionE = hidden unnamed_addr alias void (%"class.quic::QuicHeadersStream"*, %"class.quic::QuicSpdySession"*), void (%"class.quic::QuicHeadersStream"*, %"class.quic::QuicSpdySession"*)* @_ZN4quic17QuicHeadersStreamC2EPNS_15QuicSpdySessionE
@_ZN4quic17QuicHeadersStreamD1Ev = hidden unnamed_addr alias void (%"class.quic::QuicHeadersStream"*), void (%"class.quic::QuicHeadersStream"*)* @_ZN4quic17QuicHeadersStreamD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4quic17QuicHeadersStream20CompressedHeaderInfoC2EmmNS_27QuicReferenceCountedPointerINS_24QuicAckListenerInterfaceEEE(%"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* nocapture, i64, i64, %"class.quic::QuicReferenceCountedPointer"* nocapture) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %0, i64 0, i32 0
  store i64 %1, i64* %5, align 8
  %6 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %0, i64 0, i32 1
  store i64 %2, i64* %6, align 8
  %7 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %0, i64 0, i32 2
  store i64 %2, i64* %7, align 8
  %8 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %0, i64 0, i32 3
  %9 = getelementptr inbounds %"class.quic::QuicReferenceCountedPointer", %"class.quic::QuicReferenceCountedPointer"* %3, i64 0, i32 0, i32 0, i32 0
  %10 = bitcast %"class.quic::QuicReferenceCountedPointer"* %3 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.quic::QuicReferenceCountedPointer"* %8 to i64*
  store i64 %11, i64* %12, align 8
  store %"class.quic::QuicAckListenerInterface"* null, %"class.quic::QuicAckListenerInterface"** %9, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic17QuicHeadersStream20CompressedHeaderInfoC2ERKS1_(%"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* nocapture, %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* nocapture readonly dereferenceable(32)) unnamed_addr #1 align 2 {
  %3 = bitcast %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %0 to i8*
  %4 = bitcast %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 24, i1 false)
  %5 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %1, i64 0, i32 3, i32 0, i32 0, i32 0
  %6 = load %"class.quic::QuicAckListenerInterface"*, %"class.quic::QuicAckListenerInterface"** %5, align 8
  %7 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  store %"class.quic::QuicAckListenerInterface"* %6, %"class.quic::QuicAckListenerInterface"** %7, align 8
  %8 = icmp eq %"class.quic::QuicAckListenerInterface"* %6, null
  br i1 %8, label %12, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.quic::QuicAckListenerInterface", %"class.quic::QuicAckListenerInterface"* %6, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = atomicrmw add i32* %10, i32 1 monotonic
  br label %12

12:                                               ; preds = %2, %9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic17QuicHeadersStream20CompressedHeaderInfoD2Ev(%"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* nocapture readonly) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %3 = load %"class.quic::QuicAckListenerInterface"*, %"class.quic::QuicAckListenerInterface"** %2, align 8
  %4 = icmp eq %"class.quic::QuicAckListenerInterface"* %3, null
  br i1 %4, label %17, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.quic::QuicAckListenerInterface", %"class.quic::QuicAckListenerInterface"* %3, i64 0, i32 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw sub i32* %7, i32 1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %17

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %6, i64 -2
  %12 = bitcast %"class.base::RefCountedThreadSafe"* %11 to %"class.quic::QuicReferenceCountedImpl"*
  %13 = bitcast %"class.base::RefCountedThreadSafe"* %11 to void (%"class.quic::QuicReferenceCountedImpl"*)***
  %14 = load void (%"class.quic::QuicReferenceCountedImpl"*)**, void (%"class.quic::QuicReferenceCountedImpl"*)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.quic::QuicReferenceCountedImpl"*)*, void (%"class.quic::QuicReferenceCountedImpl"*)** %14, i64 1
  %16 = load void (%"class.quic::QuicReferenceCountedImpl"*)*, void (%"class.quic::QuicReferenceCountedImpl"*)** %15, align 8
  tail call void %16(%"class.quic::QuicReferenceCountedImpl"* nonnull %12) #10
  br label %17

17:                                               ; preds = %1, %5, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic17QuicHeadersStreamC2EPNS_15QuicSpdySessionE(%"class.quic::QuicHeadersStream"*, %"class.quic::QuicSpdySession"*) unnamed_addr #1 align 2 {
  %3 = bitcast %"class.quic::QuicHeadersStream"* %0 to %"class.quic::QuicStream"*
  %4 = bitcast %"class.quic::QuicSpdySession"* %1 to %"class.quic::QuicSession"*
  %5 = getelementptr inbounds %"class.quic::QuicSpdySession", %"class.quic::QuicSpdySession"* %1, i64 0, i32 0, i32 8
  %6 = load %"class.quic::QuicConnection"*, %"class.quic::QuicConnection"** %5, align 8
  %7 = getelementptr inbounds %"class.quic::QuicConnection", %"class.quic::QuicConnection"* %6, i64 0, i32 8, i32 8, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = tail call i32 @_ZN4quic9QuicUtils18GetHeadersStreamIdENS_20QuicTransportVersionE(i32 %8) #10
  tail call void @_ZN4quic10QuicStreamC2EjPNS_11QuicSessionEbNS_10StreamTypeE(%"class.quic::QuicStream"* %3, i32 %9, %"class.quic::QuicSession"* %4, i1 zeroext true, i32 0) #10
  %10 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [32 x i8*] }, { [32 x i8*] }* @_ZTVN4quic17QuicHeadersStreamE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %11 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 1
  store %"class.quic::QuicSpdySession"* %1, %"class.quic::QuicSpdySession"** %11, align 8
  %12 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 2
  %13 = bitcast %"class.quiche::QuicheCircularDeque.630"* %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 32, i1 false) #10
  %14 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 0, i32 23
  store i8 0, i8* %14, align 8
  ret void
}

declare i32 @_ZN4quic9QuicUtils18GetHeadersStreamIdENS_20QuicTransportVersionE(i32) local_unnamed_addr #3

declare void @_ZN4quic10QuicStreamC2EjPNS_11QuicSessionEbNS_10StreamTypeE(%"class.quic::QuicStream"*, i32, %"class.quic::QuicSession"*, i1 zeroext, i32) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic17QuicHeadersStreamD2Ev(%"class.quic::QuicHeadersStream"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [32 x i8*] }, { [32 x i8*] }* @_ZTVN4quic17QuicHeadersStreamE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"class.quiche::QuicheCircularDeque.630", %"class.quiche::QuicheCircularDeque.630"* %3, i64 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 2, i32 1
  %7 = load i64, i64* %6, align 8
  tail call void @_ZNK6quiche19QuicheCircularDequeIN4quic17QuicHeadersStream20CompressedHeaderInfoELm3ENSt3__19allocatorIS3_EEE12DestroyRangeEmm(%"class.quiche::QuicheCircularDeque.630"* %3, i64 %5, i64 %7) #10
  %8 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 2, i32 2, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %15, label %11

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 2, i32 2, i32 0
  %13 = bitcast %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"** %12 to i8**
  %14 = load i8*, i8** %13, align 8
  tail call void @_ZdlPv(i8* %14) #11
  br label %15

15:                                               ; preds = %1, %11
  %16 = bitcast %"class.quic::QuicHeadersStream"* %0 to %"class.quic::QuicStream"*
  tail call void @_ZN4quic10QuicStreamD2Ev(%"class.quic::QuicStream"* %16) #10
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4quic10QuicStreamD2Ev(%"class.quic::QuicStream"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic17QuicHeadersStreamD0Ev(%"class.quic::QuicHeadersStream"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [32 x i8*] }, { [32 x i8*] }* @_ZTVN4quic17QuicHeadersStreamE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"class.quiche::QuicheCircularDeque.630", %"class.quiche::QuicheCircularDeque.630"* %3, i64 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 2, i32 1
  %7 = load i64, i64* %6, align 8
  tail call void @_ZNK6quiche19QuicheCircularDequeIN4quic17QuicHeadersStream20CompressedHeaderInfoELm3ENSt3__19allocatorIS3_EEE12DestroyRangeEmm(%"class.quiche::QuicheCircularDeque.630"* %3, i64 %5, i64 %7) #10
  %8 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 2, i32 2, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %15, label %11

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 2, i32 2, i32 0
  %13 = bitcast %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"** %12 to i8**
  %14 = load i8*, i8** %13, align 8
  tail call void @_ZdlPv(i8* %14) #11
  br label %15

15:                                               ; preds = %1, %11
  %16 = bitcast %"class.quic::QuicHeadersStream"* %0 to %"class.quic::QuicStream"*
  tail call void @_ZN4quic10QuicStreamD2Ev(%"class.quic::QuicStream"* %16) #10
  %17 = bitcast %"class.quic::QuicHeadersStream"* %0 to i8*
  tail call void @_ZdlPv(i8* %17) #11
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic17QuicHeadersStream15OnDataAvailableEv(%"class.quic::QuicHeadersStream"*) unnamed_addr #1 align 2 {
  %2 = alloca %struct.iovec, align 8
  %3 = bitcast %struct.iovec* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #10
  %4 = getelementptr inbounds %struct.iovec, %struct.iovec* %2, i64 0, i32 1
  %5 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %struct.iovec* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 16, i1 false)
  %8 = call zeroext i1 @_ZNK4quic19QuicStreamSequencer17GetReadableRegionEP5iovec(%"class.quic::QuicStreamSequencer"* %6, %struct.iovec* nonnull %2) #10
  br i1 %8, label %9, label %24

9:                                                ; preds = %1, %22
  %10 = load %"class.quic::QuicSpdySession"*, %"class.quic::QuicSpdySession"** %5, align 8
  %11 = call i64 @_ZN4quic15QuicSpdySession17ProcessHeaderDataERK5iovec(%"class.quic::QuicSpdySession"* %10, %struct.iovec* nonnull dereferenceable(16) %2) #10
  %12 = load i64, i64* %4, align 8
  %13 = icmp eq i64 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %9
  call void @_ZN4quic19QuicStreamSequencer12MarkConsumedEm(%"class.quic::QuicStreamSequencer"* %6, i64 %11) #10
  %15 = load %"class.quic::QuicSpdySession"*, %"class.quic::QuicSpdySession"** %5, align 8
  %16 = bitcast %"class.quic::QuicSpdySession"* %15 to i1 (%"class.quic::QuicSpdySession"*)***
  %17 = load i1 (%"class.quic::QuicSpdySession"*)**, i1 (%"class.quic::QuicSpdySession"*)*** %16, align 8
  %18 = getelementptr inbounds i1 (%"class.quic::QuicSpdySession"*)*, i1 (%"class.quic::QuicSpdySession"*)** %17, i64 124
  %19 = load i1 (%"class.quic::QuicSpdySession"*)*, i1 (%"class.quic::QuicSpdySession"*)** %18, align 8
  %20 = call zeroext i1 %19(%"class.quic::QuicSpdySession"* %15) #10
  br i1 %20, label %21, label %22

21:                                               ; preds = %14
  call void @_ZN4quic19QuicStreamSequencer20ReleaseBufferIfEmptyEv(%"class.quic::QuicStreamSequencer"* %6) #10
  br label %22

22:                                               ; preds = %14, %21
  %23 = call zeroext i1 @_ZNK4quic19QuicStreamSequencer17GetReadableRegionEP5iovec(%"class.quic::QuicStreamSequencer"* %6, %struct.iovec* nonnull %2) #10
  br i1 %23, label %9, label %24

24:                                               ; preds = %9, %22, %1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare zeroext i1 @_ZNK4quic19QuicStreamSequencer17GetReadableRegionEP5iovec(%"class.quic::QuicStreamSequencer"*, %struct.iovec*) local_unnamed_addr #3

declare i64 @_ZN4quic15QuicSpdySession17ProcessHeaderDataERK5iovec(%"class.quic::QuicSpdySession"*, %struct.iovec* dereferenceable(16)) local_unnamed_addr #3

declare void @_ZN4quic19QuicStreamSequencer12MarkConsumedEm(%"class.quic::QuicStreamSequencer"*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic17QuicHeadersStream27MaybeReleaseSequencerBufferEv(%"class.quic::QuicHeadersStream"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 1
  %3 = load %"class.quic::QuicSpdySession"*, %"class.quic::QuicSpdySession"** %2, align 8
  %4 = bitcast %"class.quic::QuicSpdySession"* %3 to i1 (%"class.quic::QuicSpdySession"*)***
  %5 = load i1 (%"class.quic::QuicSpdySession"*)**, i1 (%"class.quic::QuicSpdySession"*)*** %4, align 8
  %6 = getelementptr inbounds i1 (%"class.quic::QuicSpdySession"*)*, i1 (%"class.quic::QuicSpdySession"*)** %5, i64 124
  %7 = load i1 (%"class.quic::QuicSpdySession"*)*, i1 (%"class.quic::QuicSpdySession"*)** %6, align 8
  %8 = tail call zeroext i1 %7(%"class.quic::QuicSpdySession"* %3) #10
  br i1 %8, label %9, label %11

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 0, i32 1
  tail call void @_ZN4quic19QuicStreamSequencer20ReleaseBufferIfEmptyEv(%"class.quic::QuicStreamSequencer"* %10) #10
  br label %11

11:                                               ; preds = %9, %1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN4quic19QuicStreamSequencer20ReleaseBufferIfEmptyEv(%"class.quic::QuicStreamSequencer"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4quic17QuicHeadersStream18OnStreamFrameAckedEmmbNS_8QuicTime5DeltaES1_Pm(%"class.quic::QuicHeadersStream"*, i64, i64, i1 zeroext, i64, i64, i64*) unnamed_addr #1 align 2 {
  %8 = alloca %"class.quic::QuicInterval", align 8
  %9 = alloca %"class.quic::QuicIntervalSet", align 8
  %10 = alloca %"class.logging::LogMessage", align 8
  %11 = alloca %"class.std::__1::basic_string", align 8
  %12 = bitcast %"class.quic::QuicIntervalSet"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #10
  %13 = getelementptr inbounds %"class.quic::QuicIntervalSet", %"class.quic::QuicIntervalSet"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = getelementptr inbounds %"class.quic::QuicIntervalSet", %"class.quic::QuicIntervalSet"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %15 = getelementptr inbounds %"class.quic::QuicIntervalSet", %"class.quic::QuicIntervalSet"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %16 = add i64 %2, %1
  %17 = bitcast %"class.quic::QuicIntervalSet"* %9 to i64*
  store i64 ptrtoint ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to i64), i64* %17, align 8
  store %"class.absl::container_internal::btree_node"* bitcast ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to %"class.absl::container_internal::btree_node"*), %"class.absl::container_internal::btree_node"** %14, align 8
  store i64 0, i64* %15, align 8
  %18 = bitcast %"class.quic::QuicInterval"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %18) #10
  %19 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %8, i64 0, i32 0
  store i64 %1, i64* %19, align 8
  %20 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %8, i64 0, i32 1
  store i64 %16, i64* %20, align 8
  call void @_ZN4quic15QuicIntervalSetImE3AddERKNS_12QuicIntervalImEE(%"class.quic::QuicIntervalSet"* nonnull %9, %"class.quic::QuicInterval"* nonnull dereferenceable(16) %8) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18) #10
  %21 = bitcast %"class.quic::QuicHeadersStream"* %0 to %"class.quic::QuicStream"*
  %22 = call dereferenceable(24) %"class.quic::QuicIntervalSet"* @_ZNK4quic10QuicStream11bytes_ackedEv(%"class.quic::QuicStream"* %21) #10
  call void @_ZN4quic15QuicIntervalSetImE10DifferenceERKS1_(%"class.quic::QuicIntervalSet"* nonnull %9, %"class.quic::QuicIntervalSet"* dereferenceable(24) %22)
  %23 = bitcast %"class.quic::QuicIntervalSet"* %9 to i64**
  %24 = load i64*, i64** %23, align 8
  %25 = load i64, i64* %24, align 8
  %26 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %14, align 8
  %27 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %26, i64 8, i32 0
  %28 = getelementptr inbounds i8, i8* %27, i64 2
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = inttoptr i64 %25 to %"class.absl::container_internal::btree_node"*
  %32 = icmp ne %"class.absl::container_internal::btree_node"* %26, %31
  %33 = icmp ne i8 %29, 0
  %34 = or i1 %32, %33
  br i1 %34, label %35, label %40

35:                                               ; preds = %7
  %36 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 2, i32 0
  %37 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 2, i32 1
  %38 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 2, i32 2, i32 0
  %39 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 2, i32 2, i32 1
  br label %49

40:                                               ; preds = %203, %7
  %41 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 2, i32 2, i32 0
  %42 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 2, i32 0
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 2, i32 1
  %45 = load i64, i64* %44, align 8
  %46 = icmp eq i64 %43, %45
  br i1 %46, label %241, label %47

47:                                               ; preds = %40
  %48 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 2, i32 2, i32 1
  br label %210

49:                                               ; preds = %35, %203
  %50 = phi %"class.absl::container_internal::btree_node"* [ %31, %35 ], [ %206, %203 ]
  %51 = phi i32 [ 0, %35 ], [ %205, %203 ]
  %52 = phi i64 [ %25, %35 ], [ %204, %203 ]
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %54, label %55, !prof !2

54:                                               ; preds = %49
  call void @llvm.trap() #10
  unreachable

55:                                               ; preds = %49
  %56 = icmp slt i32 %51, 0
  br i1 %56, label %57, label %58, !prof !2

57:                                               ; preds = %55
  call void @llvm.trap() #10
  unreachable

58:                                               ; preds = %55
  %59 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %50, i64 8, i32 0
  %60 = getelementptr inbounds i8, i8* %59, i64 2
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = icmp slt i32 %51, %62
  br i1 %63, label %65, label %64, !prof !3

64:                                               ; preds = %58
  call void @llvm.trap() #10
  unreachable

65:                                               ; preds = %58
  %66 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %50, i64 16, i32 0
  %67 = bitcast i8* %66 to %"class.quic::QuicInterval"*
  %68 = sext i32 %51 to i64
  %69 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %67, i64 %68, i32 0
  %70 = load i64, i64* %69, align 8
  %71 = load i64, i64* %36, align 8, !noalias !4
  %72 = load i64, i64* %37, align 8, !noalias !7
  %73 = icmp eq i64 %71, %72
  br i1 %73, label %155, label %74

74:                                               ; preds = %65
  %75 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %67, i64 %68, i32 1
  %76 = load i64, i64* %75, align 8
  %77 = sub i64 %76, %70
  br label %78

78:                                               ; preds = %74, %145
  %79 = phi i64 [ %146, %145 ], [ %70, %74 ]
  %80 = phi i64 [ %152, %145 ], [ %71, %74 ]
  %81 = phi i64 [ %147, %145 ], [ %77, %74 ]
  %82 = load %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"*, %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"** %38, align 8
  %83 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %82, i64 %80, i32 0
  %84 = load i64, i64* %83, align 8
  %85 = icmp ugt i64 %84, %79
  br i1 %85, label %155, label %86

86:                                               ; preds = %78
  %87 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %82, i64 %80, i32 1
  %88 = load i64, i64* %87, align 8
  %89 = add i64 %88, %84
  %90 = icmp ult i64 %79, %89
  br i1 %90, label %91, label %145

91:                                               ; preds = %86
  %92 = sub i64 %84, %79
  %93 = add i64 %88, %92
  %94 = icmp ult i64 %93, %81
  %95 = select i1 %94, i64 %93, i64 %81
  %96 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %82, i64 %80, i32 2
  %97 = load i64, i64* %96, align 8
  %98 = icmp ult i64 %97, %95
  br i1 %98, label %99, label %127

99:                                               ; preds = %91
  %100 = call zeroext i1 @_ZN7logging22ShouldCreateLogMessageEi(i32 2) #10
  br i1 %100, label %101, label %110

101:                                              ; preds = %99
  %102 = bitcast %"class.logging::LogMessage"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 304, i8* nonnull %102) #10
  call void @_ZN7logging10LogMessageC1EPKcii(%"class.logging::LogMessage"* nonnull %10, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str, i64 0, i64 0), i32 87, i32 2) #10
  %103 = getelementptr inbounds %"class.logging::LogMessage", %"class.logging::LogMessage"* %10, i64 0, i32 2
  %104 = bitcast %"class.std::__1::basic_ostringstream"* %103 to %"class.std::__1::basic_ostream"*
  %105 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %104, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.1, i64 0, i64 0), i64 45) #10
  %106 = load i64, i64* %96, align 8
  %107 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEm(%"class.std::__1::basic_ostream"* %105, i64 %106) #10
  %108 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %107, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 15) #10
  %109 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEm(%"class.std::__1::basic_ostream"* %108, i64 %95) #10
  call void @_ZN7logging10LogMessageD1Ev(%"class.logging::LogMessage"* nonnull %10) #10
  call void @llvm.lifetime.end.p0i8(i64 304, i8* nonnull %102) #10
  br label %110

110:                                              ; preds = %99, %101
  %111 = bitcast %"class.std::__1::basic_string"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %111) #10
  %112 = call i8* @_Znwm(i64 32) #11
  %113 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %112, i8** %113, align 8
  %114 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %115 = bitcast i64* %114 to <2 x i64>*
  store <2 x i64> <i64 27, i64 -9223372036854775776>, <2 x i64>* %115, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %112, i8* align 1 getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i64 0, i64 0), i64 27, i1 false) #10
  %116 = getelementptr inbounds i8, i8* %112, i64 27
  store i8 0, i8* %116, align 1
  %117 = bitcast %"class.quic::QuicHeadersStream"* %0 to void (%"class.quic::QuicStream"*, i32, %"class.std::__1::basic_string"*)***
  %118 = load void (%"class.quic::QuicStream"*, i32, %"class.std::__1::basic_string"*)**, void (%"class.quic::QuicStream"*, i32, %"class.std::__1::basic_string"*)*** %117, align 8
  %119 = getelementptr inbounds void (%"class.quic::QuicStream"*, i32, %"class.std::__1::basic_string"*)*, void (%"class.quic::QuicStream"*, i32, %"class.std::__1::basic_string"*)** %118, i64 6
  %120 = load void (%"class.quic::QuicStream"*, i32, %"class.std::__1::basic_string"*)*, void (%"class.quic::QuicStream"*, i32, %"class.std::__1::basic_string"*)** %119, align 8
  call void %120(%"class.quic::QuicStream"* %21, i32 1, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %11) #10
  %121 = bitcast %"class.std::__1::basic_string"* %11 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %122 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %121, i64 0, i32 1, i32 0
  %123 = load i8, i8* %122, align 1
  %124 = icmp slt i8 %123, 0
  br i1 %124, label %125, label %154

125:                                              ; preds = %110
  %126 = load i8*, i8** %113, align 8
  call void @_ZdlPv(i8* %126) #11
  br label %154

127:                                              ; preds = %91
  %128 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %82, i64 %80, i32 3, i32 0, i32 0, i32 0
  %129 = load %"class.quic::QuicAckListenerInterface"*, %"class.quic::QuicAckListenerInterface"** %128, align 8
  %130 = icmp ne %"class.quic::QuicAckListenerInterface"* %129, null
  %131 = icmp ne i64 %95, 0
  %132 = and i1 %131, %130
  br i1 %132, label %133, label %140

133:                                              ; preds = %127
  %134 = trunc i64 %95 to i32
  %135 = bitcast %"class.quic::QuicAckListenerInterface"* %129 to void (%"class.quic::QuicAckListenerInterface"*, i32, i64)***
  %136 = load void (%"class.quic::QuicAckListenerInterface"*, i32, i64)**, void (%"class.quic::QuicAckListenerInterface"*, i32, i64)*** %135, align 8
  %137 = getelementptr inbounds void (%"class.quic::QuicAckListenerInterface"*, i32, i64)*, void (%"class.quic::QuicAckListenerInterface"*, i32, i64)** %136, i64 2
  %138 = load void (%"class.quic::QuicAckListenerInterface"*, i32, i64)*, void (%"class.quic::QuicAckListenerInterface"*, i32, i64)** %137, align 8
  call void %138(%"class.quic::QuicAckListenerInterface"* nonnull %129, i32 %134, i64 %4) #10
  %139 = load i64, i64* %96, align 8
  br label %140

140:                                              ; preds = %127, %133
  %141 = phi i64 [ %97, %127 ], [ %139, %133 ]
  %142 = sub i64 %141, %95
  store i64 %142, i64* %96, align 8
  %143 = add i64 %95, %79
  %144 = sub i64 %81, %95
  br label %145

145:                                              ; preds = %86, %140
  %146 = phi i64 [ %143, %140 ], [ %79, %86 ]
  %147 = phi i64 [ %144, %140 ], [ %81, %86 ]
  %148 = load i64, i64* %39, align 8
  %149 = add i64 %148, -1
  %150 = icmp eq i64 %149, %80
  %151 = add i64 %80, 1
  %152 = select i1 %150, i64 0, i64 %151
  %153 = icmp eq i64 %152, %72
  br i1 %153, label %155, label %78

154:                                              ; preds = %125, %110
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %111) #10
  br label %243

155:                                              ; preds = %78, %145, %65
  %156 = getelementptr inbounds i8, i8* %59, i64 3
  %157 = load i8, i8* %156, align 1
  %158 = icmp eq i8 %157, 0
  %159 = add nsw i32 %51, 1
  br i1 %158, label %178, label %160

160:                                              ; preds = %155
  %161 = load i8, i8* %60, align 1
  %162 = zext i8 %161 to i32
  %163 = icmp eq i32 %159, %162
  br i1 %163, label %164, label %203

164:                                              ; preds = %160, %173
  %165 = phi i8* [ %169, %173 ], [ %59, %160 ]
  %166 = phi %"class.absl::container_internal::btree_node"* [ %168, %173 ], [ %50, %160 ]
  %167 = bitcast %"class.absl::container_internal::btree_node"* %166 to %"class.absl::container_internal::btree_node"**
  %168 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %167, align 8
  %169 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %168, i64 8, i32 0
  %170 = getelementptr inbounds i8, i8* %169, i64 3
  %171 = load i8, i8* %170, align 1
  %172 = icmp eq i8 %171, 0
  br i1 %172, label %173, label %203

173:                                              ; preds = %164
  %174 = load i8, i8* %165, align 1
  %175 = getelementptr inbounds i8, i8* %169, i64 2
  %176 = load i8, i8* %175, align 1
  %177 = icmp eq i8 %174, %176
  br i1 %177, label %164, label %200

178:                                              ; preds = %155
  %179 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %50, i64 256, i32 0
  %180 = bitcast i8* %179 to %"class.absl::container_internal::btree_node"**
  %181 = sext i32 %159 to i64
  %182 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %180, i64 %181
  %183 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %182, align 8
  %184 = ptrtoint %"class.absl::container_internal::btree_node"* %183 to i64
  %185 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %183, i64 8, i32 0
  %186 = getelementptr inbounds i8, i8* %185, i64 3
  %187 = load i8, i8* %186, align 1
  %188 = icmp eq i8 %187, 0
  br i1 %188, label %189, label %203

189:                                              ; preds = %178, %189
  %190 = phi %"class.absl::container_internal::btree_node"* [ %193, %189 ], [ %183, %178 ]
  %191 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %190, i64 256, i32 0
  %192 = bitcast i8* %191 to %"class.absl::container_internal::btree_node"**
  %193 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %192, align 8
  %194 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %193, i64 8, i32 0
  %195 = getelementptr inbounds i8, i8* %194, i64 3
  %196 = load i8, i8* %195, align 1
  %197 = icmp eq i8 %196, 0
  br i1 %197, label %189, label %198

198:                                              ; preds = %189
  %199 = ptrtoint %"class.absl::container_internal::btree_node"* %193 to i64
  br label %203

200:                                              ; preds = %173
  %201 = ptrtoint %"class.absl::container_internal::btree_node"* %168 to i64
  %202 = zext i8 %174 to i32
  br label %203

203:                                              ; preds = %164, %200, %198, %160, %178
  %204 = phi i64 [ %52, %160 ], [ %184, %178 ], [ %199, %198 ], [ %201, %200 ], [ %52, %164 ]
  %205 = phi i32 [ %159, %160 ], [ 0, %178 ], [ 0, %198 ], [ %202, %200 ], [ %159, %164 ]
  %206 = inttoptr i64 %204 to %"class.absl::container_internal::btree_node"*
  %207 = icmp ne %"class.absl::container_internal::btree_node"* %26, %206
  %208 = icmp ne i32 %205, %30
  %209 = or i1 %207, %208
  br i1 %209, label %49, label %40

210:                                              ; preds = %47, %232
  %211 = phi i64 [ %43, %47 ], [ %238, %232 ]
  %212 = load %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"*, %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"** %41, align 8
  %213 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %212, i64 %211, i32 2
  %214 = load i64, i64* %213, align 8
  %215 = icmp eq i64 %214, 0
  br i1 %215, label %216, label %241

216:                                              ; preds = %210
  %217 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %212, i64 %211, i32 3, i32 0, i32 0, i32 0
  %218 = load %"class.quic::QuicAckListenerInterface"*, %"class.quic::QuicAckListenerInterface"** %217, align 8
  %219 = icmp eq %"class.quic::QuicAckListenerInterface"* %218, null
  br i1 %219, label %232, label %220

220:                                              ; preds = %216
  %221 = getelementptr inbounds %"class.quic::QuicAckListenerInterface", %"class.quic::QuicAckListenerInterface"* %218, i64 0, i32 0, i32 0, i32 1
  %222 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %221, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %223 = atomicrmw sub i32* %222, i32 1 acq_rel
  %224 = icmp eq i32 %223, 1
  br i1 %224, label %225, label %232

225:                                              ; preds = %220
  %226 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %221, i64 -2
  %227 = bitcast %"class.base::RefCountedThreadSafe"* %226 to %"class.quic::QuicReferenceCountedImpl"*
  %228 = bitcast %"class.base::RefCountedThreadSafe"* %226 to void (%"class.quic::QuicReferenceCountedImpl"*)***
  %229 = load void (%"class.quic::QuicReferenceCountedImpl"*)**, void (%"class.quic::QuicReferenceCountedImpl"*)*** %228, align 8
  %230 = getelementptr inbounds void (%"class.quic::QuicReferenceCountedImpl"*)*, void (%"class.quic::QuicReferenceCountedImpl"*)** %229, i64 1
  %231 = load void (%"class.quic::QuicReferenceCountedImpl"*)*, void (%"class.quic::QuicReferenceCountedImpl"*)** %230, align 8
  call void %231(%"class.quic::QuicReferenceCountedImpl"* nonnull %227) #10
  br label %232

232:                                              ; preds = %216, %220, %225
  %233 = load i64, i64* %42, align 8
  %234 = load i64, i64* %48, align 8
  %235 = add i64 %234, -1
  %236 = icmp eq i64 %235, %233
  %237 = add i64 %233, 1
  %238 = select i1 %236, i64 0, i64 %237
  store i64 %238, i64* %42, align 8
  %239 = load i64, i64* %44, align 8
  %240 = icmp eq i64 %238, %239
  br i1 %240, label %241, label %210

241:                                              ; preds = %210, %232, %40
  %242 = call zeroext i1 @_ZN4quic10QuicStream18OnStreamFrameAckedEmmbNS_8QuicTime5DeltaES1_Pm(%"class.quic::QuicStream"* %21, i64 %1, i64 %2, i1 zeroext %3, i64 %4, i64 %5, i64* %6) #10
  br label %243

243:                                              ; preds = %154, %241
  %244 = phi i1 [ %242, %241 ], [ false, %154 ]
  %245 = load i64, i64* %15, align 8
  %246 = icmp eq i64 %245, 0
  br i1 %246, label %250, label %247

247:                                              ; preds = %243
  %248 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %13, align 8
  %249 = bitcast %"class.quic::QuicIntervalSet"* %9 to %"class.std::__1::allocator"*
  call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16clear_and_deleteEPSD_PSB_(%"class.absl::container_internal::btree_node"* %248, %"class.std::__1::allocator"* nonnull %249) #10
  br label %250

250:                                              ; preds = %243, %247
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #10
  ret i1 %244
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4quic15QuicIntervalSetImE10DifferenceERKS1_(%"class.quic::QuicIntervalSet"*, %"class.quic::QuicIntervalSet"* dereferenceable(24)) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"struct.std::__1::pair.642", align 8
  %4 = alloca %"struct.std::__1::pair.642", align 8
  %5 = alloca %"class.absl::btree_set", align 16
  %6 = alloca %"class.absl::btree_set", align 16
  %7 = alloca %"class.quic::QuicInterval", align 8
  %8 = alloca %"class.quic::QuicInterval", align 8
  %9 = getelementptr inbounds %"class.quic::QuicIntervalSet", %"class.quic::QuicIntervalSet"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %10 = load i64, i64* %9, align 8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %325, label %12

12:                                               ; preds = %2
  %13 = bitcast %"class.absl::btree_set"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #10
  %14 = getelementptr inbounds %"class.absl::btree_set", %"class.absl::btree_set"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.absl::btree_set", %"class.absl::btree_set"* %6, i64 0, i32 0, i32 0, i32 0, i32 1
  %16 = getelementptr inbounds %"class.absl::btree_set", %"class.absl::btree_set"* %6, i64 0, i32 0, i32 0, i32 0, i32 2
  %17 = bitcast %"class.absl::btree_set"* %6 to i64*
  store i64 ptrtoint ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to i64), i64* %17, align 16
  store %"class.absl::container_internal::btree_node"* bitcast ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to %"class.absl::container_internal::btree_node"*), %"class.absl::container_internal::btree_node"** %15, align 8
  store i64 0, i64* %16, align 16
  %18 = getelementptr inbounds %"class.quic::QuicIntervalSet", %"class.quic::QuicIntervalSet"* %0, i64 0, i32 0
  %19 = bitcast %"class.quic::QuicIntervalSet"* %0 to %"class.absl::container_internal::btree_node"***
  %20 = load %"class.absl::container_internal::btree_node"**, %"class.absl::container_internal::btree_node"*** %19, align 8
  %21 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %20, align 8
  %22 = ptrtoint %"class.absl::container_internal::btree_node"* %21 to i64
  %23 = bitcast %"class.quic::QuicInterval"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %23) #10
  %24 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %7, i64 0, i32 0
  %25 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %7, i64 0, i32 1
  %26 = icmp eq %"class.absl::container_internal::btree_node"* %21, null
  %27 = bitcast %"class.quic::QuicInterval"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 -86, i64 16, i1 false)
  br i1 %26, label %28, label %29, !prof !2

28:                                               ; preds = %12
  tail call void @llvm.trap() #10
  unreachable

29:                                               ; preds = %12
  %30 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %21, i64 8, i32 0
  %31 = getelementptr inbounds i8, i8* %30, i64 2
  %32 = load i8, i8* %31, align 1
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %34, label %35, !prof !2

34:                                               ; preds = %29
  tail call void @llvm.trap() #10
  unreachable

35:                                               ; preds = %29
  %36 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %21, i64 16, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %23, i8* align 8 %36, i64 16, i1 false)
  %37 = getelementptr inbounds %"class.quic::QuicIntervalSet", %"class.quic::QuicIntervalSet"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %37, align 8
  %39 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %38, i64 8, i32 0
  %40 = getelementptr inbounds i8, i8* %39, i64 2
  %41 = load i8, i8* %40, align 1
  %42 = icmp ne %"class.absl::container_internal::btree_node"* %38, %21
  %43 = icmp ne i8 %41, 0
  %44 = or i1 %42, %43
  br i1 %44, label %47, label %45

45:                                               ; preds = %35
  %46 = ptrtoint %"class.absl::container_internal::btree_node"* %38 to i64
  br label %281

47:                                               ; preds = %35
  %48 = bitcast %"class.quic::QuicIntervalSet"* %1 to i64**
  %49 = load i64*, i64** %48, align 8
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds %"class.quic::QuicIntervalSet", %"class.quic::QuicIntervalSet"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %52 = bitcast %"class.quic::QuicInterval"* %8 to i8*
  %53 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %8, i64 0, i32 0
  %54 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %8, i64 0, i32 1
  %55 = bitcast %"struct.std::__1::pair.642"* %4 to i8*
  %56 = getelementptr inbounds %"class.absl::btree_set", %"class.absl::btree_set"* %6, i64 0, i32 0, i32 0, i32 0
  %57 = bitcast %"struct.std::__1::pair.642"* %3 to i8*
  br label %58

58:                                               ; preds = %47, %262
  %59 = phi %"class.absl::container_internal::btree_node"* [ %21, %47 ], [ %265, %262 ]
  %60 = phi i32 [ 0, %47 ], [ %269, %262 ]
  %61 = phi i64 [ %22, %47 ], [ %268, %262 ]
  %62 = phi i32 [ 0, %47 ], [ %263, %262 ]
  %63 = phi i64 [ %50, %47 ], [ %264, %262 ]
  %64 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %51, align 8
  %65 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %64, i64 8, i32 0
  %66 = getelementptr inbounds i8, i8* %65, i64 2
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = inttoptr i64 %63 to %"class.absl::container_internal::btree_node"*
  %70 = icmp eq %"class.absl::container_internal::btree_node"* %64, %69
  %71 = icmp eq i32 %62, %68
  %72 = and i1 %70, %71
  br i1 %72, label %94, label %73

73:                                               ; preds = %58
  %74 = load i64, i64* %25, align 8
  %75 = icmp eq i64 %63, 0
  br i1 %75, label %76, label %77, !prof !2

76:                                               ; preds = %73
  call void @llvm.trap() #10
  unreachable

77:                                               ; preds = %73
  %78 = icmp slt i32 %62, 0
  br i1 %78, label %79, label %80, !prof !2

79:                                               ; preds = %77
  call void @llvm.trap() #10
  unreachable

80:                                               ; preds = %77
  %81 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %69, i64 8, i32 0
  %82 = getelementptr inbounds i8, i8* %81, i64 2
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = icmp slt i32 %62, %84
  br i1 %85, label %87, label %86, !prof !3

86:                                               ; preds = %80
  call void @llvm.trap() #10
  unreachable

87:                                               ; preds = %80
  %88 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %69, i64 16, i32 0
  %89 = bitcast i8* %88 to %"class.quic::QuicInterval"*
  %90 = sext i32 %62 to i64
  %91 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %89, i64 %90, i32 0
  %92 = load i64, i64* %91, align 8
  %93 = icmp ugt i64 %74, %92
  br i1 %93, label %100, label %94

94:                                               ; preds = %87, %58
  %95 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %15, align 8
  %96 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %95, i64 8, i32 0
  %97 = getelementptr inbounds i8, i8* %96, i64 2
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %57) #10
  call void @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE18insert_hint_uniqueIS5_JRKS5_EEENS9_4pairINS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EEbEESN_RKT_DpOT0_(%"struct.std::__1::pair.642"* nonnull sret %3, %"class.absl::container_internal::btree"* nonnull %56, %"class.absl::container_internal::btree_node"* %95, i32 %99, %"class.quic::QuicInterval"* nonnull dereferenceable(16) %7, %"class.quic::QuicInterval"* nonnull dereferenceable(16) %7) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %57) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 0, i64 16, i1 false) #10
  br label %178

100:                                              ; preds = %87
  %101 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %89, i64 %90, i32 1
  %102 = load i64, i64* %101, align 8
  %103 = load i64, i64* %24, align 8
  %104 = icmp ugt i64 %102, %103
  br i1 %104, label %146, label %105

105:                                              ; preds = %100
  %106 = getelementptr inbounds i8, i8* %81, i64 3
  %107 = load i8, i8* %106, align 1
  %108 = icmp eq i8 %107, 0
  %109 = add nuw nsw i32 %62, 1
  br i1 %108, label %126, label %110

110:                                              ; preds = %105
  %111 = icmp eq i32 %109, %84
  br i1 %111, label %112, label %168

112:                                              ; preds = %110, %121
  %113 = phi i8* [ %117, %121 ], [ %81, %110 ]
  %114 = phi %"class.absl::container_internal::btree_node"* [ %116, %121 ], [ %69, %110 ]
  %115 = bitcast %"class.absl::container_internal::btree_node"* %114 to %"class.absl::container_internal::btree_node"**
  %116 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %115, align 8
  %117 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %116, i64 8, i32 0
  %118 = getelementptr inbounds i8, i8* %117, i64 3
  %119 = load i8, i8* %118, align 1
  %120 = icmp eq i8 %119, 0
  br i1 %120, label %121, label %168

121:                                              ; preds = %112
  %122 = load i8, i8* %113, align 1
  %123 = getelementptr inbounds i8, i8* %117, i64 2
  %124 = load i8, i8* %123, align 1
  %125 = icmp eq i8 %122, %124
  br i1 %125, label %112, label %165

126:                                              ; preds = %105
  %127 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %69, i64 256, i32 0
  %128 = bitcast i8* %127 to %"class.absl::container_internal::btree_node"**
  %129 = sext i32 %109 to i64
  %130 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %128, i64 %129
  %131 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %130, align 8
  %132 = ptrtoint %"class.absl::container_internal::btree_node"* %131 to i64
  %133 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %131, i64 8, i32 0
  %134 = getelementptr inbounds i8, i8* %133, i64 3
  %135 = load i8, i8* %134, align 1
  %136 = icmp eq i8 %135, 0
  br i1 %136, label %137, label %168

137:                                              ; preds = %126, %137
  %138 = phi %"class.absl::container_internal::btree_node"* [ %141, %137 ], [ %131, %126 ]
  %139 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %138, i64 256, i32 0
  %140 = bitcast i8* %139 to %"class.absl::container_internal::btree_node"**
  %141 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %140, align 8
  %142 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %141, i64 8, i32 0
  %143 = getelementptr inbounds i8, i8* %142, i64 3
  %144 = load i8, i8* %143, align 1
  %145 = icmp eq i8 %144, 0
  br i1 %145, label %137, label %163

146:                                              ; preds = %100
  %147 = icmp ult i64 %103, %92
  br i1 %147, label %148, label %162

148:                                              ; preds = %146
  %149 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %15, align 8
  %150 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %149, i64 8, i32 0
  %151 = getelementptr inbounds i8, i8* %150, i64 2
  %152 = load i8, i8* %151, align 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %52) #10
  %153 = zext i8 %152 to i32
  store i64 %103, i64* %53, align 8
  %154 = load i64, i64* %91, align 8
  store i64 %154, i64* %54, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %55) #10
  call void @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE18insert_hint_uniqueIS5_JS5_EEENS9_4pairINS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EEbEESL_RKT_DpOT0_(%"struct.std::__1::pair.642"* nonnull sret %4, %"class.absl::container_internal::btree"* nonnull %56, %"class.absl::container_internal::btree_node"* %149, i32 %153, %"class.quic::QuicInterval"* nonnull dereferenceable(16) %8, %"class.quic::QuicInterval"* nonnull dereferenceable(16) %8) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %55) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %52) #10
  %155 = load i8, i8* %82, align 1
  %156 = zext i8 %155 to i32
  %157 = icmp slt i32 %62, %156
  br i1 %157, label %159, label %158, !prof !3

158:                                              ; preds = %148
  call void @llvm.trap() #10
  unreachable

159:                                              ; preds = %148
  %160 = load i64, i64* %101, align 8
  store i64 %160, i64* %24, align 8
  %161 = load i64, i64* %25, align 8
  br label %168

162:                                              ; preds = %146
  store i64 %102, i64* %24, align 8
  br label %168

163:                                              ; preds = %137
  %164 = ptrtoint %"class.absl::container_internal::btree_node"* %141 to i64
  br label %168

165:                                              ; preds = %121
  %166 = ptrtoint %"class.absl::container_internal::btree_node"* %116 to i64
  %167 = zext i8 %122 to i32
  br label %168

168:                                              ; preds = %112, %165, %163, %110, %126, %162, %159
  %169 = phi i64 [ %161, %159 ], [ %74, %162 ], [ %74, %110 ], [ %74, %126 ], [ %74, %163 ], [ %74, %165 ], [ %74, %112 ]
  %170 = phi i64 [ %160, %159 ], [ %102, %162 ], [ %103, %110 ], [ %103, %126 ], [ %103, %163 ], [ %103, %165 ], [ %103, %112 ]
  %171 = phi i64 [ %63, %159 ], [ %63, %162 ], [ %63, %110 ], [ %132, %126 ], [ %164, %163 ], [ %166, %165 ], [ %63, %112 ]
  %172 = phi i32 [ %62, %159 ], [ %62, %162 ], [ %109, %110 ], [ 0, %126 ], [ 0, %163 ], [ %167, %165 ], [ %84, %112 ]
  %173 = icmp ult i64 %170, %169
  br i1 %173, label %174, label %178

174:                                              ; preds = %168
  %175 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %37, align 8
  %176 = ptrtoint %"class.absl::container_internal::btree_node"* %175 to i64
  %177 = inttoptr i64 %61 to %"class.absl::container_internal::btree_node"*
  br label %262

178:                                              ; preds = %94, %168
  %179 = phi i32 [ %62, %94 ], [ %172, %168 ]
  %180 = phi i64 [ %63, %94 ], [ %171, %168 ]
  %181 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %59, i64 8, i32 0
  %182 = getelementptr inbounds i8, i8* %181, i64 3
  %183 = load i8, i8* %182, align 1
  %184 = icmp eq i8 %183, 0
  %185 = add nsw i32 %60, 1
  br i1 %184, label %205, label %186

186:                                              ; preds = %178
  %187 = getelementptr inbounds i8, i8* %181, i64 2
  %188 = load i8, i8* %187, align 1
  %189 = zext i8 %188 to i32
  %190 = icmp eq i32 %185, %189
  br i1 %190, label %191, label %230

191:                                              ; preds = %186, %200
  %192 = phi i8* [ %196, %200 ], [ %181, %186 ]
  %193 = phi %"class.absl::container_internal::btree_node"* [ %195, %200 ], [ %59, %186 ]
  %194 = bitcast %"class.absl::container_internal::btree_node"* %193 to %"class.absl::container_internal::btree_node"**
  %195 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %194, align 8
  %196 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %195, i64 8, i32 0
  %197 = getelementptr inbounds i8, i8* %196, i64 3
  %198 = load i8, i8* %197, align 1
  %199 = icmp eq i8 %198, 0
  br i1 %199, label %200, label %230

200:                                              ; preds = %191
  %201 = load i8, i8* %192, align 1
  %202 = getelementptr inbounds i8, i8* %196, i64 2
  %203 = load i8, i8* %202, align 1
  %204 = icmp eq i8 %201, %203
  br i1 %204, label %191, label %227

205:                                              ; preds = %178
  %206 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %59, i64 256, i32 0
  %207 = bitcast i8* %206 to %"class.absl::container_internal::btree_node"**
  %208 = sext i32 %185 to i64
  %209 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %207, i64 %208
  %210 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %209, align 8
  %211 = ptrtoint %"class.absl::container_internal::btree_node"* %210 to i64
  %212 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %210, i64 8, i32 0
  %213 = getelementptr inbounds i8, i8* %212, i64 3
  %214 = load i8, i8* %213, align 1
  %215 = icmp eq i8 %214, 0
  br i1 %215, label %216, label %230

216:                                              ; preds = %205, %216
  %217 = phi %"class.absl::container_internal::btree_node"* [ %220, %216 ], [ %210, %205 ]
  %218 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %217, i64 256, i32 0
  %219 = bitcast i8* %218 to %"class.absl::container_internal::btree_node"**
  %220 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %219, align 8
  %221 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %220, i64 8, i32 0
  %222 = getelementptr inbounds i8, i8* %221, i64 3
  %223 = load i8, i8* %222, align 1
  %224 = icmp eq i8 %223, 0
  br i1 %224, label %216, label %225

225:                                              ; preds = %216
  %226 = ptrtoint %"class.absl::container_internal::btree_node"* %220 to i64
  br label %230

227:                                              ; preds = %200
  %228 = ptrtoint %"class.absl::container_internal::btree_node"* %195 to i64
  %229 = zext i8 %201 to i32
  br label %230

230:                                              ; preds = %191, %227, %225, %186, %205
  %231 = phi i64 [ %61, %186 ], [ %211, %205 ], [ %226, %225 ], [ %228, %227 ], [ %61, %191 ]
  %232 = phi i32 [ %185, %186 ], [ 0, %205 ], [ 0, %225 ], [ %229, %227 ], [ %185, %191 ]
  %233 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %37, align 8
  %234 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %233, i64 8, i32 0
  %235 = getelementptr inbounds i8, i8* %234, i64 2
  %236 = load i8, i8* %235, align 1
  %237 = zext i8 %236 to i32
  %238 = inttoptr i64 %231 to %"class.absl::container_internal::btree_node"*
  %239 = icmp ne %"class.absl::container_internal::btree_node"* %233, %238
  %240 = icmp ne i32 %232, %237
  %241 = or i1 %239, %240
  %242 = ptrtoint %"class.absl::container_internal::btree_node"* %233 to i64
  br i1 %241, label %243, label %262

243:                                              ; preds = %230
  %244 = icmp eq i64 %231, 0
  br i1 %244, label %245, label %246, !prof !2

245:                                              ; preds = %243
  call void @llvm.trap() #10
  unreachable

246:                                              ; preds = %243
  %247 = icmp slt i32 %232, 0
  br i1 %247, label %248, label %249, !prof !2

248:                                              ; preds = %246
  call void @llvm.trap() #10
  unreachable

249:                                              ; preds = %246
  %250 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %238, i64 8, i32 0
  %251 = getelementptr inbounds i8, i8* %250, i64 2
  %252 = load i8, i8* %251, align 1
  %253 = zext i8 %252 to i32
  %254 = icmp slt i32 %232, %253
  br i1 %254, label %256, label %255, !prof !3

255:                                              ; preds = %249
  call void @llvm.trap() #10
  unreachable

256:                                              ; preds = %249
  %257 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %238, i64 16, i32 0
  %258 = bitcast i8* %257 to %"class.quic::QuicInterval"*
  %259 = sext i32 %232 to i64
  %260 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %258, i64 %259
  %261 = bitcast %"class.quic::QuicInterval"* %260 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %23, i8* align 8 %261, i64 16, i1 false)
  br label %262

262:                                              ; preds = %174, %230, %256
  %263 = phi i32 [ %172, %174 ], [ %179, %230 ], [ %179, %256 ]
  %264 = phi i64 [ %171, %174 ], [ %180, %230 ], [ %180, %256 ]
  %265 = phi %"class.absl::container_internal::btree_node"* [ %177, %174 ], [ %238, %230 ], [ %238, %256 ]
  %266 = phi i64 [ %176, %174 ], [ %242, %230 ], [ %242, %256 ]
  %267 = phi %"class.absl::container_internal::btree_node"* [ %175, %174 ], [ %233, %230 ], [ %233, %256 ]
  %268 = phi i64 [ %61, %174 ], [ %231, %230 ], [ %231, %256 ]
  %269 = phi i32 [ %60, %174 ], [ %232, %230 ], [ %232, %256 ]
  %270 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %267, i64 8, i32 0
  %271 = getelementptr inbounds i8, i8* %270, i64 2
  %272 = load i8, i8* %271, align 1
  %273 = zext i8 %272 to i32
  %274 = icmp ne %"class.absl::container_internal::btree_node"* %267, %265
  %275 = icmp ne i32 %269, %273
  %276 = or i1 %274, %275
  br i1 %276, label %58, label %277

277:                                              ; preds = %262
  %278 = bitcast %"class.absl::btree_set"* %6 to <2 x i64>*
  %279 = load <2 x i64>, <2 x i64>* %278, align 16
  %280 = load i64, i64* %16, align 16
  br label %281

281:                                              ; preds = %45, %277
  %282 = phi i64 [ %46, %45 ], [ %266, %277 ]
  %283 = phi i64 [ 0, %45 ], [ %280, %277 ]
  %284 = phi <2 x i64> [ <i64 ptrtoint ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to i64), i64 ptrtoint ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to i64)>, %45 ], [ %279, %277 ]
  %285 = bitcast %"class.absl::container_internal::btree_node"** %15 to i64*
  %286 = bitcast %"class.absl::btree_set"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %286) #10
  %287 = getelementptr inbounds %"class.absl::btree_set", %"class.absl::btree_set"* %5, i64 0, i32 0, i32 0, i32 0, i32 2
  store i64 ptrtoint ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to i64), i64* %285, align 8
  %288 = bitcast %"class.absl::btree_set"* %5 to <2 x i64>*
  store <2 x i64> %284, <2 x i64>* %288, align 16
  store i64 0, i64* %16, align 16
  store i64 %283, i64* %287, align 16
  store %"class.absl::container_internal::btree_node"* bitcast ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to %"class.absl::container_internal::btree_node"*), %"class.absl::container_internal::btree_node"** %14, align 16
  %289 = icmp eq %"class.absl::btree_set"* %6, %18
  %290 = extractelement <2 x i64> %284, i32 0
  %291 = inttoptr i64 %290 to %"class.absl::container_internal::btree_node"*
  br i1 %289, label %297, label %292

292:                                              ; preds = %281
  %293 = bitcast %"class.quic::QuicIntervalSet"* %0 to i64*
  %294 = load i64, i64* %293, align 8
  store i64 %294, i64* %17, align 16
  store i64 %282, i64* %285, align 8
  %295 = bitcast %"class.quic::QuicIntervalSet"* %0 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to i64), i64 ptrtoint ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to i64)>, <2 x i64>* %295, align 8
  %296 = load i64, i64* %9, align 8
  store i64 %296, i64* %16, align 16
  store i64 0, i64* %9, align 8
  br label %297

297:                                              ; preds = %292, %281
  %298 = icmp eq %"class.absl::btree_set"* %5, %18
  br i1 %298, label %314, label %299

299:                                              ; preds = %297
  %300 = load i64, i64* %9, align 8
  %301 = icmp eq i64 %300, 0
  br i1 %301, label %309, label %302

302:                                              ; preds = %299
  %303 = getelementptr inbounds %"class.quic::QuicIntervalSet", %"class.quic::QuicIntervalSet"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %304 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %303, align 8
  %305 = bitcast %"class.quic::QuicIntervalSet"* %0 to %"class.std::__1::allocator"*
  call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16clear_and_deleteEPSD_PSB_(%"class.absl::container_internal::btree_node"* %304, %"class.std::__1::allocator"* %305) #10
  %306 = bitcast %"class.absl::btree_set"* %5 to <2 x i64>*
  %307 = load <2 x i64>, <2 x i64>* %306, align 16
  %308 = load i64, i64* %287, align 16
  br label %309

309:                                              ; preds = %302, %299
  %310 = phi i64 [ %308, %302 ], [ %283, %299 ]
  %311 = phi <2 x i64> [ %307, %302 ], [ %284, %299 ]
  %312 = bitcast %"class.quic::QuicIntervalSet"* %0 to <2 x i64>*
  store <2 x i64> %311, <2 x i64>* %312, align 8
  %313 = bitcast %"class.absl::btree_set"* %5 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to i64), i64 ptrtoint ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to i64)>, <2 x i64>* %313, align 16
  store i64 %310, i64* %9, align 8
  store i64 0, i64* %287, align 16
  br label %318

314:                                              ; preds = %297
  %315 = icmp eq i64 %283, 0
  br i1 %315, label %318, label %316

316:                                              ; preds = %314
  %317 = bitcast %"class.absl::btree_set"* %5 to %"class.std::__1::allocator"*
  call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16clear_and_deleteEPSD_PSB_(%"class.absl::container_internal::btree_node"* %291, %"class.std::__1::allocator"* nonnull %317) #10
  br label %318

318:                                              ; preds = %309, %314, %316
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %286) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %23) #10
  %319 = load i64, i64* %16, align 16
  %320 = icmp eq i64 %319, 0
  br i1 %320, label %324, label %321

321:                                              ; preds = %318
  %322 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %14, align 16
  %323 = bitcast %"class.absl::btree_set"* %6 to %"class.std::__1::allocator"*
  call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16clear_and_deleteEPSD_PSB_(%"class.absl::container_internal::btree_node"* %322, %"class.std::__1::allocator"* nonnull %323) #10
  br label %324

324:                                              ; preds = %318, %321
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #10
  br label %325

325:                                              ; preds = %2, %324
  ret void
}

declare dereferenceable(24) %"class.quic::QuicIntervalSet"* @_ZNK4quic10QuicStream11bytes_ackedEv(%"class.quic::QuicStream"*) local_unnamed_addr #3

declare zeroext i1 @_ZN7logging22ShouldCreateLogMessageEi(i32) local_unnamed_addr #3

declare void @_ZN7logging10LogMessageC1EPKcii(%"class.logging::LogMessage"*, i8*, i32, i32) unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEm(%"class.std::__1::basic_ostream"*, i64) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10LogMessageD1Ev(%"class.logging::LogMessage"*) unnamed_addr #4

declare zeroext i1 @_ZN4quic10QuicStream18OnStreamFrameAckedEmmbNS_8QuicTime5DeltaES1_Pm(%"class.quic::QuicStream"*, i64, i64, i1 zeroext, i64, i64, i64*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic17QuicHeadersStream26OnStreamFrameRetransmittedEmmb(%"class.quic::QuicHeadersStream"*, i64, i64, i1 zeroext) unnamed_addr #1 align 2 {
  %5 = bitcast %"class.quic::QuicHeadersStream"* %0 to %"class.quic::QuicStream"*
  tail call void @_ZN4quic10QuicStream26OnStreamFrameRetransmittedEmmb(%"class.quic::QuicStream"* %5, i64 %1, i64 %2, i1 zeroext false) #10
  %6 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 2, i32 0
  %7 = load i64, i64* %6, align 8, !noalias !10
  %8 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 2, i32 1
  %9 = load i64, i64* %8, align 8, !noalias !13
  %10 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 2, i32 2, i32 0
  %11 = icmp eq i64 %7, %9
  br i1 %11, label %55, label %12

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 2, i32 2, i32 1
  br label %14

14:                                               ; preds = %12, %46
  %15 = phi i64 [ %1, %12 ], [ %48, %46 ]
  %16 = phi i64 [ %2, %12 ], [ %47, %46 ]
  %17 = phi i64 [ %7, %12 ], [ %53, %46 ]
  %18 = load %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"*, %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"** %10, align 8
  %19 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %18, i64 %17, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = icmp ugt i64 %20, %15
  br i1 %21, label %55, label %22

22:                                               ; preds = %14
  %23 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %18, i64 %17, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = add i64 %24, %20
  %26 = icmp ult i64 %15, %25
  br i1 %26, label %27, label %46

27:                                               ; preds = %22
  %28 = sub i64 %20, %15
  %29 = add i64 %24, %28
  %30 = icmp ult i64 %29, %16
  %31 = select i1 %30, i64 %29, i64 %16
  %32 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %18, i64 %17, i32 3, i32 0, i32 0, i32 0
  %33 = load %"class.quic::QuicAckListenerInterface"*, %"class.quic::QuicAckListenerInterface"** %32, align 8
  %34 = icmp ne %"class.quic::QuicAckListenerInterface"* %33, null
  %35 = icmp ne i64 %31, 0
  %36 = and i1 %35, %34
  br i1 %36, label %37, label %43

37:                                               ; preds = %27
  %38 = trunc i64 %31 to i32
  %39 = bitcast %"class.quic::QuicAckListenerInterface"* %33 to void (%"class.quic::QuicAckListenerInterface"*, i32)***
  %40 = load void (%"class.quic::QuicAckListenerInterface"*, i32)**, void (%"class.quic::QuicAckListenerInterface"*, i32)*** %39, align 8
  %41 = getelementptr inbounds void (%"class.quic::QuicAckListenerInterface"*, i32)*, void (%"class.quic::QuicAckListenerInterface"*, i32)** %40, i64 3
  %42 = load void (%"class.quic::QuicAckListenerInterface"*, i32)*, void (%"class.quic::QuicAckListenerInterface"*, i32)** %41, align 8
  tail call void %42(%"class.quic::QuicAckListenerInterface"* nonnull %33, i32 %38) #10
  br label %43

43:                                               ; preds = %37, %27
  %44 = add i64 %31, %15
  %45 = sub i64 %16, %31
  br label %46

46:                                               ; preds = %43, %22
  %47 = phi i64 [ %16, %22 ], [ %45, %43 ]
  %48 = phi i64 [ %15, %22 ], [ %44, %43 ]
  %49 = load i64, i64* %13, align 8
  %50 = add i64 %49, -1
  %51 = icmp eq i64 %50, %17
  %52 = add i64 %17, 1
  %53 = select i1 %51, i64 0, i64 %52
  %54 = icmp eq i64 %53, %9
  br i1 %54, label %55, label %14

55:                                               ; preds = %14, %46, %4
  ret void
}

declare void @_ZN4quic10QuicStream26OnStreamFrameRetransmittedEmmb(%"class.quic::QuicStream"*, i64, i64, i1 zeroext) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic17QuicHeadersStream14OnDataBufferedEmmRKNS_27QuicReferenceCountedPointerINS_24QuicAckListenerInterfaceEEE(%"class.quic::QuicHeadersStream"*, i64, i64, %"class.quic::QuicReferenceCountedPointer"* nocapture readonly dereferenceable(8)) unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.quiche::QuicheCircularDeque.630", %"class.quiche::QuicheCircularDeque.630"* %5, i64 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 2, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %7, %9
  br i1 %10, label %69, label %11

11:                                               ; preds = %4
  %12 = icmp eq i64 %9, 0
  br i1 %12, label %18, label %13

13:                                               ; preds = %11
  %14 = add i64 %9, -1
  %15 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 2, i32 2, i32 0
  %16 = load %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"*, %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"** %15, align 8
  %17 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %16, i64 %14, i32 0
  br label %25

18:                                               ; preds = %11
  %19 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 2, i32 2, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %20, -1
  %22 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 2, i32 2, i32 0
  %23 = load %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"*, %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"** %22, align 8
  %24 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %23, i64 %21, i32 0
  br label %25

25:                                               ; preds = %13, %18
  %26 = phi i64 [ %14, %13 ], [ %21, %18 ]
  %27 = phi i64* [ %17, %13 ], [ %24, %18 ]
  %28 = phi %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* [ %16, %13 ], [ %23, %18 ]
  %29 = phi %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"** [ %15, %13 ], [ %22, %18 ]
  %30 = load i64, i64* %27, align 8
  %31 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %28, i64 %26, i32 1
  %32 = load i64, i64* %31, align 8
  %33 = add i64 %32, %30
  %34 = icmp eq i64 %33, %1
  br i1 %34, label %35, label %69

35:                                               ; preds = %25
  br i1 %12, label %36, label %39

36:                                               ; preds = %35
  %37 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 2, i32 2, i32 1
  %38 = load i64, i64* %37, align 8
  br label %39

39:                                               ; preds = %35, %36
  %40 = phi i64 [ %38, %36 ], [ %9, %35 ]
  %41 = add i64 %40, -1
  %42 = getelementptr inbounds %"class.quic::QuicReferenceCountedPointer", %"class.quic::QuicReferenceCountedPointer"* %3, i64 0, i32 0, i32 0, i32 0
  %43 = load %"class.quic::QuicAckListenerInterface"*, %"class.quic::QuicAckListenerInterface"** %42, align 8
  %44 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %28, i64 %41, i32 3, i32 0, i32 0, i32 0
  %45 = load %"class.quic::QuicAckListenerInterface"*, %"class.quic::QuicAckListenerInterface"** %44, align 8
  %46 = icmp eq %"class.quic::QuicAckListenerInterface"* %43, %45
  br i1 %46, label %47, label %69

47:                                               ; preds = %39
  br i1 %12, label %48, label %51

48:                                               ; preds = %47
  %49 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 2, i32 2, i32 1
  %50 = load i64, i64* %49, align 8
  br label %51

51:                                               ; preds = %47, %48
  %52 = phi i64 [ %50, %48 ], [ %9, %47 ]
  %53 = add i64 %52, -1
  %54 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %28, i64 %53, i32 1
  %55 = load i64, i64* %54, align 8
  %56 = add i64 %55, %2
  store i64 %56, i64* %54, align 8
  %57 = load i64, i64* %8, align 8
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %62

59:                                               ; preds = %51
  %60 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 2, i32 2, i32 1
  %61 = load i64, i64* %60, align 8
  br label %62

62:                                               ; preds = %51, %59
  %63 = phi i64 [ %61, %59 ], [ %57, %51 ]
  %64 = add i64 %63, -1
  %65 = load %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"*, %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"** %29, align 8
  %66 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %65, i64 %64, i32 2
  %67 = load i64, i64* %66, align 8
  %68 = add i64 %67, %2
  store i64 %68, i64* %66, align 8
  br label %135

69:                                               ; preds = %39, %25, %4
  %70 = getelementptr inbounds %"class.quic::QuicReferenceCountedPointer", %"class.quic::QuicReferenceCountedPointer"* %3, i64 0, i32 0, i32 0, i32 0
  %71 = load %"class.quic::QuicAckListenerInterface"*, %"class.quic::QuicAckListenerInterface"** %70, align 8
  %72 = icmp eq %"class.quic::QuicAckListenerInterface"* %71, null
  br i1 %72, label %78, label %73

73:                                               ; preds = %69
  %74 = getelementptr inbounds %"class.quic::QuicAckListenerInterface", %"class.quic::QuicAckListenerInterface"* %71, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %75 = atomicrmw add i32* %74, i32 1 monotonic
  %76 = load i64, i64* %6, align 8
  %77 = load i64, i64* %8, align 8
  br label %78

78:                                               ; preds = %69, %73
  %79 = phi i64 [ %9, %69 ], [ %77, %73 ]
  %80 = phi i64 [ %7, %69 ], [ %76, %73 ]
  %81 = icmp ult i64 %79, %80
  %82 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 2, i32 2, i32 1
  %83 = load i64, i64* %82, align 8
  %84 = select i1 %81, i64 %83, i64 0
  %85 = sub i64 1, %80
  %86 = add i64 %85, %79
  %87 = add i64 %86, %84
  %88 = icmp eq i64 %83, 0
  %89 = add i64 %83, -1
  %90 = select i1 %88, i64 0, i64 %89
  %91 = icmp ult i64 %90, %87
  br i1 %91, label %92, label %100

92:                                               ; preds = %78
  %93 = lshr i64 %90, 2
  %94 = icmp ugt i64 %93, 3
  %95 = select i1 %94, i64 %93, i64 3
  %96 = add i64 %95, %90
  %97 = icmp ult i64 %87, %96
  %98 = select i1 %97, i64 %96, i64 %87
  tail call void @_ZN6quiche19QuicheCircularDequeIN4quic17QuicHeadersStream20CompressedHeaderInfoELm3ENSt3__19allocatorIS3_EEE8RelocateEm(%"class.quiche::QuicheCircularDeque.630"* %5, i64 %98) #10
  %99 = load i64, i64* %8, align 8
  br label %100

100:                                              ; preds = %92, %78
  %101 = phi i64 [ %79, %78 ], [ %99, %92 ]
  %102 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 2, i32 2, i32 0
  %103 = load %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"*, %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"** %102, align 8
  %104 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %103, i64 %101, i32 0
  store i64 %1, i64* %104, align 8
  %105 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %103, i64 %101, i32 1
  store i64 %2, i64* %105, align 8
  %106 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %103, i64 %101, i32 2
  store i64 %2, i64* %106, align 8
  %107 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %103, i64 %101, i32 3, i32 0, i32 0, i32 0
  store %"class.quic::QuicAckListenerInterface"* %71, %"class.quic::QuicAckListenerInterface"** %107, align 8
  br i1 %72, label %128, label %108

108:                                              ; preds = %100
  %109 = getelementptr inbounds %"class.quic::QuicAckListenerInterface", %"class.quic::QuicAckListenerInterface"* %71, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %110 = atomicrmw add i32* %109, i32 1 monotonic
  %111 = load i64, i64* %8, align 8
  %112 = load i64, i64* %82, align 8
  %113 = add i64 %112, -1
  %114 = icmp eq i64 %113, %111
  %115 = add i64 %111, 1
  %116 = select i1 %114, i64 0, i64 %115
  store i64 %116, i64* %8, align 8
  %117 = getelementptr inbounds %"class.quic::QuicAckListenerInterface", %"class.quic::QuicAckListenerInterface"* %71, i64 0, i32 0, i32 0, i32 1
  %118 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %117, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %119 = atomicrmw sub i32* %118, i32 1 acq_rel
  %120 = icmp eq i32 %119, 1
  br i1 %120, label %121, label %135

121:                                              ; preds = %108
  %122 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %117, i64 -2
  %123 = bitcast %"class.base::RefCountedThreadSafe"* %122 to %"class.quic::QuicReferenceCountedImpl"*
  %124 = bitcast %"class.base::RefCountedThreadSafe"* %122 to void (%"class.quic::QuicReferenceCountedImpl"*)***
  %125 = load void (%"class.quic::QuicReferenceCountedImpl"*)**, void (%"class.quic::QuicReferenceCountedImpl"*)*** %124, align 8
  %126 = getelementptr inbounds void (%"class.quic::QuicReferenceCountedImpl"*)*, void (%"class.quic::QuicReferenceCountedImpl"*)** %125, i64 1
  %127 = load void (%"class.quic::QuicReferenceCountedImpl"*)*, void (%"class.quic::QuicReferenceCountedImpl"*)** %126, align 8
  tail call void %127(%"class.quic::QuicReferenceCountedImpl"* nonnull %123) #10
  br label %135

128:                                              ; preds = %100
  %129 = load i64, i64* %8, align 8
  %130 = load i64, i64* %82, align 8
  %131 = add i64 %130, -1
  %132 = icmp eq i64 %131, %129
  %133 = add i64 %129, 1
  %134 = select i1 %132, i64 0, i64 %133
  store i64 %134, i64* %8, align 8
  br label %135

135:                                              ; preds = %128, %108, %121, %62
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic17QuicHeadersStream13OnStreamResetERKNS_18QuicRstStreamFrameE(%"class.quic::QuicHeadersStream"* nocapture readonly, %"struct.quic::QuicRstStreamFrame"* nocapture readnone dereferenceable(32)) unnamed_addr #1 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = getelementptr inbounds %"class.quic::QuicHeadersStream", %"class.quic::QuicHeadersStream"* %0, i64 0, i32 0, i32 5
  %5 = load %"class.quic::StreamDelegateInterface"*, %"class.quic::StreamDelegateInterface"** %4, align 8
  %6 = tail call i8* @_Znwm(i64 32) #11
  %7 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %6, i8** %7, align 8
  %8 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %9 = bitcast i64* %8 to <2 x i64>*
  store <2 x i64> <i64 31, i64 -9223372036854775776>, <2 x i64>* %9, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %6, i8* align 1 getelementptr inbounds ([32 x i8], [32 x i8]* @.str.4, i64 0, i64 0), i64 31, i1 false) #10
  %10 = getelementptr inbounds i8, i8* %6, i64 31
  store i8 0, i8* %10, align 1
  %11 = bitcast %"class.quic::StreamDelegateInterface"* %5 to void (%"class.quic::StreamDelegateInterface"*, i32, %"class.std::__1::basic_string"*)***
  %12 = load void (%"class.quic::StreamDelegateInterface"*, i32, %"class.std::__1::basic_string"*)**, void (%"class.quic::StreamDelegateInterface"*, i32, %"class.std::__1::basic_string"*)*** %11, align 8
  %13 = getelementptr inbounds void (%"class.quic::StreamDelegateInterface"*, i32, %"class.std::__1::basic_string"*)*, void (%"class.quic::StreamDelegateInterface"*, i32, %"class.std::__1::basic_string"*)** %12, i64 2
  %14 = load void (%"class.quic::StreamDelegateInterface"*, i32, %"class.std::__1::basic_string"*)*, void (%"class.quic::StreamDelegateInterface"*, i32, %"class.std::__1::basic_string"*)** %13, align 8
  call void %14(%"class.quic::StreamDelegateInterface"* %5, i32 17, %"class.std::__1::basic_string"* nonnull %3) #10
  %15 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %16 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %15, i64 0, i32 1, i32 0
  %17 = load i8, i8* %16, align 1
  %18 = icmp slt i8 %17, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %2
  %20 = load i8*, i8** %7, align 8
  call void @_ZdlPv(i8* %20) #11
  br label %21

21:                                               ; preds = %2, %19
  ret void
}

declare void @_ZN4quic10QuicStream9OnFinReadEv(%"class.quic::QuicStream"*) unnamed_addr #3

declare void @_ZN4quic10QuicStream16AddBytesConsumedEm(%"class.quic::QuicStream"*, i64) unnamed_addr #3

declare void @_ZN4quic10QuicStream5ResetENS_22QuicRstStreamErrorCodeE(%"class.quic::QuicStream"*, i32) unnamed_addr #3

declare void @_ZN4quic10QuicStream20OnUnrecoverableErrorENS_13QuicErrorCodeERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(%"class.quic::QuicStream"*, i32, %"class.std::__1::basic_string"* dereferenceable(24)) unnamed_addr #3

declare void @_ZN4quic10QuicStream20OnUnrecoverableErrorENS_13QuicErrorCodeENS_27QuicIetfTransportErrorCodesERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE(%"class.quic::QuicStream"*, i32, i64, %"class.std::__1::basic_string"* dereferenceable(24)) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK4quic10QuicStream2idEv(%"class.quic::QuicStream"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.quic::QuicStream", %"class.quic::QuicStream"* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

declare void @_ZNK4quic10QuicStream7versionEv(%"struct.quic::ParsedQuicVersion"* sret, %"class.quic::QuicStream"*) unnamed_addr #3

declare void @_ZN4quic10QuicStream13OnStreamFrameERKNS_15QuicStreamFrameE(%"class.quic::QuicStream"*, %"struct.quic::QuicStreamFrame"* dereferenceable(24)) unnamed_addr #3

declare void @_ZN4quic10QuicStream10OnCanWriteEv(%"class.quic::QuicStream"*) unnamed_addr #3

declare void @_ZN4quic10QuicStream18OnConnectionClosedENS_13QuicErrorCodeENS_21ConnectionCloseSourceE(%"class.quic::QuicStream"*, i32, i32) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4quic10QuicStream28MaybeSendPriorityUpdateFrameEv(%"class.quic::QuicStream"*) unnamed_addr #1 comdat align 2 {
  ret void
}

declare void @_ZN4quic10QuicStream19OnWindowUpdateFrameERKNS_21QuicWindowUpdateFrameE(%"class.quic::QuicStream"*, %"struct.quic::QuicWindowUpdateFrame"* dereferenceable(16)) unnamed_addr #3

declare void @_ZN4quic10QuicStream11StopReadingEv(%"class.quic::QuicStream"*) unnamed_addr #3

declare void @_ZN4quic10QuicStream17OnStreamFrameLostEmmb(%"class.quic::QuicStream"*, i64, i64, i1 zeroext) unnamed_addr #3

declare zeroext i1 @_ZN4quic10QuicStream20RetransmitStreamDataEmmbNS_16TransmissionTypeE(%"class.quic::QuicStream"*, i64, i64, i1 zeroext, i8 signext) unnamed_addr #3

declare zeroext i1 @_ZNK4quic10QuicStream24HasPendingRetransmissionEv(%"class.quic::QuicStream"*) unnamed_addr #3

declare zeroext i1 @_ZN4quic10QuicStream13OnStopSendingENS_22QuicRstStreamErrorCodeE(%"class.quic::QuicStream"*, i32) unnamed_addr #3

declare void @_ZN4quic10QuicStream7OnCloseEv(%"class.quic::QuicStream"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4quic10QuicStream17OnCanWriteNewDataEv(%"class.quic::QuicStream"*) unnamed_addr #1 comdat align 2 {
  ret void
}

declare void @_ZN4quic10QuicStream20OnStreamDataConsumedEm(%"class.quic::QuicStream"*, i64) unnamed_addr #3

declare void @_ZN4quic10QuicStream26WritePendingRetransmissionEv(%"class.quic::QuicStream"*) unnamed_addr #3

declare void @_ZN4quic10QuicStream16OnDeadlinePassedEv(%"class.quic::QuicStream"*) unnamed_addr #3

declare void @_ZN4quic10QuicStream14CloseWriteSideEv(%"class.quic::QuicStream"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16clear_and_deleteEPSD_PSB_(%"class.absl::container_internal::btree_node"*, %"class.std::__1::allocator"*) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %0, i64 8, i32 0
  %4 = getelementptr inbounds i8, i8* %3, i64 3
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %83

7:                                                ; preds = %2
  %8 = getelementptr inbounds i8, i8* %3, i64 2
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %83, label %11

11:                                               ; preds = %7
  %12 = bitcast %"class.absl::container_internal::btree_node"* %0 to %"class.absl::container_internal::btree_node"**
  %13 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %12, align 8
  br label %14

14:                                               ; preds = %11, %14
  %15 = phi %"class.absl::container_internal::btree_node"* [ %18, %14 ], [ %0, %11 ]
  %16 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %15, i64 256, i32 0
  %17 = bitcast i8* %16 to %"class.absl::container_internal::btree_node"**
  %18 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %17, align 8
  %19 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %18, i64 8, i32 0
  %20 = getelementptr inbounds i8, i8* %19, i64 3
  %21 = load i8, i8* %20, align 1
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %14, label %23

23:                                               ; preds = %14
  %24 = bitcast %"class.absl::container_internal::btree_node"* %18 to %"class.absl::container_internal::btree_node"**
  %25 = load i8, i8* %19, align 1
  %26 = zext i8 %25 to i32
  %27 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %24, align 8
  br label %30

28:                                               ; preds = %78
  %29 = zext i8 %73 to i32
  br label %66

30:                                               ; preds = %66, %23
  %31 = phi i32 [ %26, %23 ], [ %69, %66 ]
  %32 = phi %"class.absl::container_internal::btree_node"* [ %27, %23 ], [ %68, %66 ]
  %33 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %32, i64 256, i32 0
  %34 = bitcast i8* %33 to %"class.absl::container_internal::btree_node"**
  %35 = sext i32 %31 to i64
  %36 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %34, i64 %35
  %37 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %36, align 8
  %38 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %37, i64 8, i32 0
  %39 = getelementptr inbounds i8, i8* %38, i64 3
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %42, label %56

42:                                               ; preds = %30, %42
  %43 = phi %"class.absl::container_internal::btree_node"* [ %46, %42 ], [ %37, %30 ]
  %44 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %43, i64 256, i32 0
  %45 = bitcast i8* %44 to %"class.absl::container_internal::btree_node"**
  %46 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %45, align 8
  %47 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %46, i64 8, i32 0
  %48 = getelementptr inbounds i8, i8* %47, i64 3
  %49 = load i8, i8* %48, align 1
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %42, label %51

51:                                               ; preds = %42
  %52 = load i8, i8* %47, align 1
  %53 = zext i8 %52 to i32
  %54 = bitcast %"class.absl::container_internal::btree_node"* %46 to %"class.absl::container_internal::btree_node"**
  %55 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %54, align 8
  br label %56

56:                                               ; preds = %30, %51
  %57 = phi %"class.absl::container_internal::btree_node"* [ %37, %30 ], [ %46, %51 ]
  %58 = phi i32 [ %31, %30 ], [ %53, %51 ]
  %59 = phi %"class.absl::container_internal::btree_node"* [ %32, %30 ], [ %55, %51 ]
  %60 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %57, i64 0, i32 0
  tail call void @_ZdlPv(i8* %60) #11
  %61 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %59, i64 8, i32 0
  %62 = getelementptr inbounds i8, i8* %61, i64 2
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = icmp slt i32 %58, %64
  br i1 %65, label %66, label %70

66:                                               ; preds = %56, %28
  %67 = phi i32 [ %58, %56 ], [ %29, %28 ]
  %68 = phi %"class.absl::container_internal::btree_node"* [ %59, %56 ], [ %75, %28 ]
  %69 = add nsw i32 %67, 1
  br label %30

70:                                               ; preds = %56, %78
  %71 = phi %"class.absl::container_internal::btree_node"* [ %75, %78 ], [ %59, %56 ]
  %72 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %71, i64 8, i32 0
  %73 = load i8, i8* %72, align 1
  %74 = bitcast %"class.absl::container_internal::btree_node"* %71 to %"class.absl::container_internal::btree_node"**
  %75 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %74, align 8
  %76 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %71, i64 0, i32 0
  tail call void @_ZdlPv(i8* %76) #11
  %77 = icmp eq %"class.absl::container_internal::btree_node"* %75, %13
  br i1 %77, label %85, label %78

78:                                               ; preds = %70
  %79 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %75, i64 8, i32 0
  %80 = getelementptr inbounds i8, i8* %79, i64 2
  %81 = load i8, i8* %80, align 1
  %82 = icmp ult i8 %73, %81
  br i1 %82, label %28, label %70

83:                                               ; preds = %7, %2
  %84 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %0, i64 0, i32 0
  tail call void @_ZdlPv(i8* %84) #11
  br label %85

85:                                               ; preds = %70, %83
  ret void
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #1 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #10
  %7 = load i8, i8* %6, align 8, !range !16
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #10
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #10
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #10
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #10
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #10
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #10
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #10
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #1 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #10
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #10
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = icmp ult i64 %17, 23
  %34 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 24, i1 false)
  br i1 %33, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = add nuw i64 %17, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #11
  store i8* %40, i8** %32, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %47

43:                                               ; preds = %30
  %44 = trunc i64 %17 to i8
  %45 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  br label %47

47:                                               ; preds = %35, %43
  %48 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %42, %35 ], [ %45, %43 ]
  %49 = phi i8* [ %40, %35 ], [ %31, %43 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 %5, i64 %17, i1 false) #10
  %50 = getelementptr inbounds i8, i8* %49, i64 %17
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %32, align 8
  %55 = select i1 %53, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #10
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %51, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %47
  %65 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %65) #11
  br label %66

66:                                               ; preds = %47, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #10
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #10
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #4

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #3

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK6quiche19QuicheCircularDequeIN4quic17QuicHeadersStream20CompressedHeaderInfoELm3ENSt3__19allocatorIS3_EEE12DestroyRangeEmm(%"class.quiche::QuicheCircularDeque.630"*, i64, i64) local_unnamed_addr #1 comdat align 2 {
  %4 = icmp ult i64 %2, %1
  br i1 %4, label %30, label %5

5:                                                ; preds = %3
  %6 = icmp eq i64 %1, %2
  br i1 %6, label %82, label %7

7:                                                ; preds = %5
  %8 = getelementptr inbounds %"class.quiche::QuicheCircularDeque.630", %"class.quiche::QuicheCircularDeque.630"* %0, i64 0, i32 2, i32 0
  br label %9

9:                                                ; preds = %27, %7
  %10 = phi i64 [ %1, %7 ], [ %28, %27 ]
  %11 = load %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"*, %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"** %8, align 8
  %12 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %11, i64 %10, i32 3, i32 0, i32 0, i32 0
  %13 = load %"class.quic::QuicAckListenerInterface"*, %"class.quic::QuicAckListenerInterface"** %12, align 8
  %14 = icmp eq %"class.quic::QuicAckListenerInterface"* %13, null
  br i1 %14, label %27, label %15

15:                                               ; preds = %9
  %16 = getelementptr inbounds %"class.quic::QuicAckListenerInterface", %"class.quic::QuicAckListenerInterface"* %13, i64 0, i32 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = atomicrmw sub i32* %17, i32 1 acq_rel
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %20, label %27

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %16, i64 -2
  %22 = bitcast %"class.base::RefCountedThreadSafe"* %21 to %"class.quic::QuicReferenceCountedImpl"*
  %23 = bitcast %"class.base::RefCountedThreadSafe"* %21 to void (%"class.quic::QuicReferenceCountedImpl"*)***
  %24 = load void (%"class.quic::QuicReferenceCountedImpl"*)**, void (%"class.quic::QuicReferenceCountedImpl"*)*** %23, align 8
  %25 = getelementptr inbounds void (%"class.quic::QuicReferenceCountedImpl"*)*, void (%"class.quic::QuicReferenceCountedImpl"*)** %24, i64 1
  %26 = load void (%"class.quic::QuicReferenceCountedImpl"*)*, void (%"class.quic::QuicReferenceCountedImpl"*)** %25, align 8
  tail call void %26(%"class.quic::QuicReferenceCountedImpl"* nonnull %22) #10
  br label %27

27:                                               ; preds = %20, %15, %9
  %28 = add i64 %10, 1
  %29 = icmp eq i64 %28, %2
  br i1 %29, label %82, label %9

30:                                               ; preds = %3
  %31 = getelementptr inbounds %"class.quiche::QuicheCircularDeque.630", %"class.quiche::QuicheCircularDeque.630"* %0, i64 0, i32 2, i32 1
  %32 = load i64, i64* %31, align 8
  %33 = icmp eq i64 %32, %1
  br i1 %33, label %57, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds %"class.quiche::QuicheCircularDeque.630", %"class.quiche::QuicheCircularDeque.630"* %0, i64 0, i32 2, i32 0
  br label %36

36:                                               ; preds = %54, %34
  %37 = phi i64 [ %1, %34 ], [ %55, %54 ]
  %38 = load %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"*, %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"** %35, align 8
  %39 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %38, i64 %37, i32 3, i32 0, i32 0, i32 0
  %40 = load %"class.quic::QuicAckListenerInterface"*, %"class.quic::QuicAckListenerInterface"** %39, align 8
  %41 = icmp eq %"class.quic::QuicAckListenerInterface"* %40, null
  br i1 %41, label %54, label %42

42:                                               ; preds = %36
  %43 = getelementptr inbounds %"class.quic::QuicAckListenerInterface", %"class.quic::QuicAckListenerInterface"* %40, i64 0, i32 0, i32 0, i32 1
  %44 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %43, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = atomicrmw sub i32* %44, i32 1 acq_rel
  %46 = icmp eq i32 %45, 1
  br i1 %46, label %47, label %54

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %43, i64 -2
  %49 = bitcast %"class.base::RefCountedThreadSafe"* %48 to %"class.quic::QuicReferenceCountedImpl"*
  %50 = bitcast %"class.base::RefCountedThreadSafe"* %48 to void (%"class.quic::QuicReferenceCountedImpl"*)***
  %51 = load void (%"class.quic::QuicReferenceCountedImpl"*)**, void (%"class.quic::QuicReferenceCountedImpl"*)*** %50, align 8
  %52 = getelementptr inbounds void (%"class.quic::QuicReferenceCountedImpl"*)*, void (%"class.quic::QuicReferenceCountedImpl"*)** %51, i64 1
  %53 = load void (%"class.quic::QuicReferenceCountedImpl"*)*, void (%"class.quic::QuicReferenceCountedImpl"*)** %52, align 8
  tail call void %53(%"class.quic::QuicReferenceCountedImpl"* nonnull %49) #10
  br label %54

54:                                               ; preds = %47, %42, %36
  %55 = add i64 %37, 1
  %56 = icmp eq i64 %55, %32
  br i1 %56, label %57, label %36

57:                                               ; preds = %54, %30
  %58 = icmp eq i64 %2, 0
  br i1 %58, label %82, label %59

59:                                               ; preds = %57
  %60 = getelementptr inbounds %"class.quiche::QuicheCircularDeque.630", %"class.quiche::QuicheCircularDeque.630"* %0, i64 0, i32 2, i32 0
  br label %61

61:                                               ; preds = %79, %59
  %62 = phi i64 [ 0, %59 ], [ %80, %79 ]
  %63 = load %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"*, %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"** %60, align 8
  %64 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %63, i64 %62, i32 3, i32 0, i32 0, i32 0
  %65 = load %"class.quic::QuicAckListenerInterface"*, %"class.quic::QuicAckListenerInterface"** %64, align 8
  %66 = icmp eq %"class.quic::QuicAckListenerInterface"* %65, null
  br i1 %66, label %79, label %67

67:                                               ; preds = %61
  %68 = getelementptr inbounds %"class.quic::QuicAckListenerInterface", %"class.quic::QuicAckListenerInterface"* %65, i64 0, i32 0, i32 0, i32 1
  %69 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %68, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %70 = atomicrmw sub i32* %69, i32 1 acq_rel
  %71 = icmp eq i32 %70, 1
  br i1 %71, label %72, label %79

72:                                               ; preds = %67
  %73 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %68, i64 -2
  %74 = bitcast %"class.base::RefCountedThreadSafe"* %73 to %"class.quic::QuicReferenceCountedImpl"*
  %75 = bitcast %"class.base::RefCountedThreadSafe"* %73 to void (%"class.quic::QuicReferenceCountedImpl"*)***
  %76 = load void (%"class.quic::QuicReferenceCountedImpl"*)**, void (%"class.quic::QuicReferenceCountedImpl"*)*** %75, align 8
  %77 = getelementptr inbounds void (%"class.quic::QuicReferenceCountedImpl"*)*, void (%"class.quic::QuicReferenceCountedImpl"*)** %76, i64 1
  %78 = load void (%"class.quic::QuicReferenceCountedImpl"*)*, void (%"class.quic::QuicReferenceCountedImpl"*)** %77, align 8
  tail call void %78(%"class.quic::QuicReferenceCountedImpl"* nonnull %74) #10
  br label %79

79:                                               ; preds = %72, %67, %61
  %80 = add nuw i64 %62, 1
  %81 = icmp eq i64 %80, %2
  br i1 %81, label %82, label %61

82:                                               ; preds = %27, %79, %57, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4quic15QuicIntervalSetImE3AddERKNS_12QuicIntervalImEE(%"class.quic::QuicIntervalSet"*, %"class.quic::QuicInterval"* dereferenceable(16)) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"struct.std::__1::pair.644", align 8
  %4 = alloca %"class.quic::QuicInterval", align 8
  %5 = alloca %"struct.std::__1::pair.642", align 8
  %6 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %1, i64 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %1, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp ult i64 %7, %9
  br i1 %10, label %11, label %343

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.quic::QuicIntervalSet", %"class.quic::QuicIntervalSet"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %13

13:                                               ; preds = %45, %11
  %14 = phi %"class.absl::container_internal::btree_node"** [ %12, %11 ], [ %49, %45 ]
  %15 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %14, align 8
  %16 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %15, i64 8, i32 0
  %17 = getelementptr inbounds i8, i8* %16, i64 2
  %18 = load i8, i8* %17, align 1
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %37, label %20

20:                                               ; preds = %13
  %21 = zext i8 %18 to i32
  %22 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %15, i64 16, i32 0
  %23 = bitcast i8* %22 to %"class.quic::QuicInterval"*
  br label %24

24:                                               ; preds = %24, %20
  %25 = phi i32 [ 0, %20 ], [ %35, %24 ]
  %26 = phi i32 [ %21, %20 ], [ %34, %24 ]
  %27 = add nsw i32 %26, %25
  %28 = ashr i32 %27, 1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %23, i64 %29, i32 0
  %31 = load i64, i64* %30, align 8
  %32 = icmp ult i64 %31, %7
  %33 = add nsw i32 %28, 1
  %34 = select i1 %32, i32 %26, i32 %28
  %35 = select i1 %32, i32 %33, i32 %25
  %36 = icmp eq i32 %35, %34
  br i1 %36, label %37, label %24

37:                                               ; preds = %24, %13
  %38 = phi i32 [ 0, %13 ], [ %34, %24 ]
  %39 = getelementptr inbounds i8, i8* %16, i64 3
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %45, label %42

42:                                               ; preds = %37
  %43 = zext i8 %18 to i32
  %44 = icmp eq i32 %38, %43
  br i1 %44, label %50, label %66

45:                                               ; preds = %37
  %46 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %15, i64 256, i32 0
  %47 = bitcast i8* %46 to %"class.absl::container_internal::btree_node"**
  %48 = sext i32 %38 to i64
  %49 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %47, i64 %48
  br label %13

50:                                               ; preds = %42, %58
  %51 = phi %"class.absl::container_internal::btree_node"* [ %53, %58 ], [ %15, %42 ]
  %52 = bitcast %"class.absl::container_internal::btree_node"* %51 to %"class.absl::container_internal::btree_node"**
  %53 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %52, align 8
  %54 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %53, i64 8, i32 0
  %55 = getelementptr inbounds i8, i8* %54, i64 3
  %56 = load i8, i8* %55, align 1
  %57 = icmp eq i8 %56, 0
  br i1 %57, label %58, label %70

58:                                               ; preds = %50
  %59 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %51, i64 8, i32 0
  %60 = load i8, i8* %59, align 1
  %61 = getelementptr inbounds i8, i8* %54, i64 2
  %62 = load i8, i8* %61, align 1
  %63 = icmp eq i8 %60, %62
  br i1 %63, label %50, label %64

64:                                               ; preds = %58
  %65 = zext i8 %60 to i32
  br label %66

66:                                               ; preds = %64, %42
  %67 = phi i32 [ %65, %64 ], [ %38, %42 ]
  %68 = phi %"class.absl::container_internal::btree_node"* [ %53, %64 ], [ %15, %42 ]
  %69 = icmp eq %"class.absl::container_internal::btree_node"* %68, null
  br i1 %69, label %70, label %77

70:                                               ; preds = %50, %66
  %71 = getelementptr inbounds %"class.quic::QuicIntervalSet", %"class.quic::QuicIntervalSet"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %72 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %71, align 8
  %73 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %72, i64 8, i32 0
  %74 = getelementptr inbounds i8, i8* %73, i64 2
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  br label %77

77:                                               ; preds = %66, %70
  %78 = phi %"class.absl::container_internal::btree_node"* [ %72, %70 ], [ %68, %66 ]
  %79 = phi i32 [ %76, %70 ], [ %67, %66 ]
  %80 = ptrtoint %"class.absl::container_internal::btree_node"* %78 to i64
  %81 = bitcast %"class.quic::QuicInterval"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %81) #10
  %82 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %4, i64 0, i32 0
  %83 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %4, i64 0, i32 1
  %84 = bitcast %"class.quic::QuicInterval"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %81, i8* align 8 %84, i64 16, i1 false)
  %85 = bitcast %"class.quic::QuicIntervalSet"* %0 to %"class.absl::container_internal::btree_node"***
  %86 = load %"class.absl::container_internal::btree_node"**, %"class.absl::container_internal::btree_node"*** %85, align 8
  %87 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %86, align 8
  %88 = icmp ne %"class.absl::container_internal::btree_node"* %78, %87
  %89 = icmp ne i32 %79, 0
  %90 = or i1 %89, %88
  br i1 %90, label %91, label %226

91:                                               ; preds = %77
  %92 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %78, i64 8, i32 0
  %93 = getelementptr inbounds i8, i8* %92, i64 3
  %94 = load i8, i8* %93, align 1
  %95 = icmp eq i8 %94, 0
  br i1 %95, label %111, label %96

96:                                               ; preds = %91
  %97 = add nsw i32 %79, -1
  %98 = icmp sgt i32 %79, 0
  br i1 %98, label %147, label %99

99:                                               ; preds = %96, %107
  %100 = phi %"class.absl::container_internal::btree_node"* [ %102, %107 ], [ %78, %96 ]
  %101 = bitcast %"class.absl::container_internal::btree_node"* %100 to %"class.absl::container_internal::btree_node"**
  %102 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %101, align 8
  %103 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %102, i64 8, i32 0
  %104 = getelementptr inbounds i8, i8* %103, i64 3
  %105 = load i8, i8* %104, align 1
  %106 = icmp eq i8 %105, 0
  br i1 %106, label %107, label %147

107:                                              ; preds = %99
  %108 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %100, i64 8, i32 0
  %109 = load i8, i8* %108, align 1
  %110 = icmp eq i8 %109, 0
  br i1 %110, label %99, label %143

111:                                              ; preds = %91
  %112 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %78, i64 256, i32 0
  %113 = bitcast i8* %112 to %"class.absl::container_internal::btree_node"**
  %114 = sext i32 %79 to i64
  %115 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %113, i64 %114
  %116 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %115, align 8
  %117 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %116, i64 8, i32 0
  %118 = getelementptr inbounds i8, i8* %117, i64 3
  %119 = load i8, i8* %118, align 1
  %120 = icmp eq i8 %119, 0
  %121 = getelementptr inbounds i8, i8* %117, i64 2
  %122 = load i8, i8* %121, align 1
  br i1 %120, label %123, label %137

123:                                              ; preds = %111, %123
  %124 = phi i8 [ %136, %123 ], [ %122, %111 ]
  %125 = phi %"class.absl::container_internal::btree_node"* [ %130, %123 ], [ %116, %111 ]
  %126 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %125, i64 256, i32 0
  %127 = bitcast i8* %126 to %"class.absl::container_internal::btree_node"**
  %128 = zext i8 %124 to i64
  %129 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %127, i64 %128
  %130 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %129, align 8
  %131 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %130, i64 8, i32 0
  %132 = getelementptr inbounds i8, i8* %131, i64 3
  %133 = load i8, i8* %132, align 1
  %134 = icmp eq i8 %133, 0
  %135 = getelementptr inbounds i8, i8* %131, i64 2
  %136 = load i8, i8* %135, align 1
  br i1 %134, label %123, label %137

137:                                              ; preds = %123, %111
  %138 = phi %"class.absl::container_internal::btree_node"* [ %116, %111 ], [ %130, %123 ]
  %139 = phi i8 [ %122, %111 ], [ %136, %123 ]
  %140 = ptrtoint %"class.absl::container_internal::btree_node"* %138 to i64
  %141 = zext i8 %139 to i32
  %142 = add nsw i32 %141, -1
  br label %147

143:                                              ; preds = %107
  %144 = ptrtoint %"class.absl::container_internal::btree_node"* %102 to i64
  %145 = zext i8 %109 to i32
  %146 = add nsw i32 %145, -1
  br label %147

147:                                              ; preds = %99, %143, %96, %137
  %148 = phi i64 [ %140, %137 ], [ %80, %96 ], [ %144, %143 ], [ %80, %99 ]
  %149 = phi i32 [ %142, %137 ], [ %97, %96 ], [ %146, %143 ], [ %97, %99 ]
  %150 = inttoptr i64 %148 to %"class.absl::container_internal::btree_node"*
  %151 = icmp eq i64 %148, 0
  br i1 %151, label %152, label %153, !prof !2

152:                                              ; preds = %147
  tail call void @llvm.trap() #10
  unreachable

153:                                              ; preds = %147
  %154 = icmp slt i32 %149, 0
  br i1 %154, label %155, label %156, !prof !2

155:                                              ; preds = %153
  tail call void @llvm.trap() #10
  unreachable

156:                                              ; preds = %153
  %157 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %150, i64 8, i32 0
  %158 = getelementptr inbounds i8, i8* %157, i64 2
  %159 = load i8, i8* %158, align 1
  %160 = zext i8 %159 to i32
  %161 = icmp slt i32 %149, %160
  br i1 %161, label %163, label %162, !prof !3

162:                                              ; preds = %156
  tail call void @llvm.trap() #10
  unreachable

163:                                              ; preds = %156
  %164 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %150, i64 16, i32 0
  %165 = bitcast i8* %164 to %"class.quic::QuicInterval"*
  %166 = sext i32 %149 to i64
  %167 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %165, i64 %166, i32 0
  %168 = load i64, i64* %167, align 8
  %169 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %165, i64 %166, i32 1
  %170 = load i64, i64* %169, align 8
  %171 = icmp ult i64 %168, %170
  br i1 %171, label %172, label %180

172:                                              ; preds = %163
  %173 = load i64, i64* %82, align 8
  %174 = load i64, i64* %83, align 8
  %175 = icmp uge i64 %173, %174
  %176 = icmp ult i64 %174, %168
  %177 = or i1 %175, %176
  %178 = icmp ult i64 %170, %173
  %179 = or i1 %178, %177
  br i1 %179, label %180, label %226

180:                                              ; preds = %163, %172
  %181 = getelementptr inbounds i8, i8* %157, i64 3
  %182 = load i8, i8* %181, align 1
  %183 = icmp eq i8 %182, 0
  %184 = add nuw nsw i32 %149, 1
  br i1 %183, label %201, label %185

185:                                              ; preds = %180
  %186 = icmp eq i32 %184, %160
  br i1 %186, label %187, label %226

187:                                              ; preds = %185, %196
  %188 = phi i8* [ %192, %196 ], [ %157, %185 ]
  %189 = phi %"class.absl::container_internal::btree_node"* [ %191, %196 ], [ %150, %185 ]
  %190 = bitcast %"class.absl::container_internal::btree_node"* %189 to %"class.absl::container_internal::btree_node"**
  %191 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %190, align 8
  %192 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %191, i64 8, i32 0
  %193 = getelementptr inbounds i8, i8* %192, i64 3
  %194 = load i8, i8* %193, align 1
  %195 = icmp eq i8 %194, 0
  br i1 %195, label %196, label %226

196:                                              ; preds = %187
  %197 = load i8, i8* %188, align 1
  %198 = getelementptr inbounds i8, i8* %192, i64 2
  %199 = load i8, i8* %198, align 1
  %200 = icmp eq i8 %197, %199
  br i1 %200, label %187, label %223

201:                                              ; preds = %180
  %202 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %150, i64 256, i32 0
  %203 = bitcast i8* %202 to %"class.absl::container_internal::btree_node"**
  %204 = sext i32 %184 to i64
  %205 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %203, i64 %204
  %206 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %205, align 8
  %207 = ptrtoint %"class.absl::container_internal::btree_node"* %206 to i64
  %208 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %206, i64 8, i32 0
  %209 = getelementptr inbounds i8, i8* %208, i64 3
  %210 = load i8, i8* %209, align 1
  %211 = icmp eq i8 %210, 0
  br i1 %211, label %212, label %226

212:                                              ; preds = %201, %212
  %213 = phi %"class.absl::container_internal::btree_node"* [ %216, %212 ], [ %206, %201 ]
  %214 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %213, i64 256, i32 0
  %215 = bitcast i8* %214 to %"class.absl::container_internal::btree_node"**
  %216 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %215, align 8
  %217 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %216, i64 8, i32 0
  %218 = getelementptr inbounds i8, i8* %217, i64 3
  %219 = load i8, i8* %218, align 1
  %220 = icmp eq i8 %219, 0
  br i1 %220, label %212, label %221

221:                                              ; preds = %212
  %222 = ptrtoint %"class.absl::container_internal::btree_node"* %216 to i64
  br label %226

223:                                              ; preds = %196
  %224 = ptrtoint %"class.absl::container_internal::btree_node"* %191 to i64
  %225 = zext i8 %197 to i32
  br label %226

226:                                              ; preds = %187, %223, %221, %185, %77, %201, %172
  %227 = phi i64 [ %148, %172 ], [ %148, %185 ], [ %207, %201 ], [ %80, %77 ], [ %222, %221 ], [ %224, %223 ], [ %148, %187 ]
  %228 = phi i32 [ %149, %172 ], [ %184, %185 ], [ 0, %201 ], [ 0, %77 ], [ 0, %221 ], [ %225, %223 ], [ %160, %187 ]
  %229 = inttoptr i64 %227 to %"class.absl::container_internal::btree_node"*
  %230 = getelementptr inbounds %"class.quic::QuicIntervalSet", %"class.quic::QuicIntervalSet"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %231 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %230, align 8
  %232 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %231, i64 8, i32 0
  %233 = getelementptr inbounds i8, i8* %232, i64 2
  %234 = load i8, i8* %233, align 1
  %235 = zext i8 %234 to i32
  %236 = icmp ne %"class.absl::container_internal::btree_node"* %231, %229
  %237 = icmp ne i32 %228, %235
  %238 = or i1 %236, %237
  br i1 %238, label %239, label %337

239:                                              ; preds = %226, %328
  %240 = phi %"class.absl::container_internal::btree_node"* [ %333, %328 ], [ %229, %226 ]
  %241 = phi i32 [ %330, %328 ], [ %228, %226 ]
  %242 = phi i64 [ %329, %328 ], [ %227, %226 ]
  %243 = icmp eq i64 %242, 0
  br i1 %243, label %244, label %245, !prof !2

244:                                              ; preds = %239
  tail call void @llvm.trap() #10
  unreachable

245:                                              ; preds = %239
  %246 = icmp slt i32 %241, 0
  br i1 %246, label %247, label %248, !prof !2

247:                                              ; preds = %245
  tail call void @llvm.trap() #10
  unreachable

248:                                              ; preds = %245
  %249 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %240, i64 8, i32 0
  %250 = getelementptr inbounds i8, i8* %249, i64 2
  %251 = load i8, i8* %250, align 1
  %252 = zext i8 %251 to i32
  %253 = icmp slt i32 %241, %252
  br i1 %253, label %255, label %254, !prof !3

254:                                              ; preds = %248
  tail call void @llvm.trap() #10
  unreachable

255:                                              ; preds = %248
  %256 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %240, i64 16, i32 0
  %257 = bitcast i8* %256 to %"class.quic::QuicInterval"*
  %258 = sext i32 %241 to i64
  %259 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %257, i64 %258, i32 0
  %260 = load i64, i64* %259, align 8
  %261 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %257, i64 %258, i32 1
  %262 = load i64, i64* %261, align 8
  %263 = icmp ult i64 %260, %262
  br i1 %263, label %264, label %337

264:                                              ; preds = %255
  %265 = load i64, i64* %82, align 8
  %266 = load i64, i64* %83, align 8
  %267 = icmp uge i64 %265, %266
  %268 = icmp ult i64 %266, %260
  %269 = or i1 %267, %268
  %270 = icmp ult i64 %262, %265
  %271 = or i1 %270, %269
  br i1 %271, label %337, label %272

272:                                              ; preds = %264
  %273 = icmp ult i64 %260, %265
  br i1 %273, label %274, label %276

274:                                              ; preds = %272
  store i64 %260, i64* %82, align 8
  %275 = load i64, i64* %261, align 8
  br label %276

276:                                              ; preds = %274, %272
  %277 = phi i64 [ %275, %274 ], [ %262, %272 ]
  %278 = icmp ugt i64 %277, %266
  br i1 %278, label %279, label %280

279:                                              ; preds = %276
  store i64 %277, i64* %83, align 8
  br label %280

280:                                              ; preds = %276, %279
  %281 = getelementptr inbounds i8, i8* %249, i64 3
  %282 = load i8, i8* %281, align 1
  %283 = icmp eq i8 %282, 0
  %284 = add nuw nsw i32 %241, 1
  br i1 %283, label %303, label %285

285:                                              ; preds = %280
  %286 = load i8, i8* %250, align 1
  %287 = zext i8 %286 to i32
  %288 = icmp eq i32 %284, %287
  br i1 %288, label %289, label %328

289:                                              ; preds = %285, %298
  %290 = phi i8* [ %294, %298 ], [ %249, %285 ]
  %291 = phi %"class.absl::container_internal::btree_node"* [ %293, %298 ], [ %240, %285 ]
  %292 = bitcast %"class.absl::container_internal::btree_node"* %291 to %"class.absl::container_internal::btree_node"**
  %293 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %292, align 8
  %294 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %293, i64 8, i32 0
  %295 = getelementptr inbounds i8, i8* %294, i64 3
  %296 = load i8, i8* %295, align 1
  %297 = icmp eq i8 %296, 0
  br i1 %297, label %298, label %328

298:                                              ; preds = %289
  %299 = load i8, i8* %290, align 1
  %300 = getelementptr inbounds i8, i8* %294, i64 2
  %301 = load i8, i8* %300, align 1
  %302 = icmp eq i8 %299, %301
  br i1 %302, label %289, label %325

303:                                              ; preds = %280
  %304 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %240, i64 256, i32 0
  %305 = bitcast i8* %304 to %"class.absl::container_internal::btree_node"**
  %306 = sext i32 %284 to i64
  %307 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %305, i64 %306
  %308 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %307, align 8
  %309 = ptrtoint %"class.absl::container_internal::btree_node"* %308 to i64
  %310 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %308, i64 8, i32 0
  %311 = getelementptr inbounds i8, i8* %310, i64 3
  %312 = load i8, i8* %311, align 1
  %313 = icmp eq i8 %312, 0
  br i1 %313, label %314, label %328

314:                                              ; preds = %303, %314
  %315 = phi %"class.absl::container_internal::btree_node"* [ %318, %314 ], [ %308, %303 ]
  %316 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %315, i64 256, i32 0
  %317 = bitcast i8* %316 to %"class.absl::container_internal::btree_node"**
  %318 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %317, align 8
  %319 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %318, i64 8, i32 0
  %320 = getelementptr inbounds i8, i8* %319, i64 3
  %321 = load i8, i8* %320, align 1
  %322 = icmp eq i8 %321, 0
  br i1 %322, label %314, label %323

323:                                              ; preds = %314
  %324 = ptrtoint %"class.absl::container_internal::btree_node"* %318 to i64
  br label %328

325:                                              ; preds = %298
  %326 = ptrtoint %"class.absl::container_internal::btree_node"* %293 to i64
  %327 = zext i8 %299 to i32
  br label %328

328:                                              ; preds = %289, %325, %323, %285, %303
  %329 = phi i64 [ %242, %285 ], [ %309, %303 ], [ %324, %323 ], [ %326, %325 ], [ %242, %289 ]
  %330 = phi i32 [ %284, %285 ], [ 0, %303 ], [ 0, %323 ], [ %327, %325 ], [ %284, %289 ]
  %331 = load i8, i8* %233, align 1
  %332 = zext i8 %331 to i32
  %333 = inttoptr i64 %329 to %"class.absl::container_internal::btree_node"*
  %334 = icmp ne %"class.absl::container_internal::btree_node"* %231, %333
  %335 = icmp ne i32 %330, %332
  %336 = or i1 %334, %335
  br i1 %336, label %239, label %337

337:                                              ; preds = %264, %255, %328, %226
  %338 = phi i32 [ %228, %226 ], [ %241, %264 ], [ %241, %255 ], [ %330, %328 ]
  %339 = phi %"class.absl::container_internal::btree_node"* [ %229, %226 ], [ %240, %264 ], [ %240, %255 ], [ %231, %328 ]
  %340 = bitcast %"struct.std::__1::pair.644"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %340) #10
  %341 = getelementptr inbounds %"class.quic::QuicIntervalSet", %"class.quic::QuicIntervalSet"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE11erase_rangeENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EESJ_(%"struct.std::__1::pair.644"* nonnull sret %3, %"class.absl::container_internal::btree"* %341, %"class.absl::container_internal::btree_node"* %229, i32 %228, %"class.absl::container_internal::btree_node"* %339, i32 %338) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %340) #10
  %342 = bitcast %"struct.std::__1::pair.642"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %342) #10
  call void @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE13insert_uniqueIS5_JRKS5_EEENS9_4pairINS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EEbEERKT_DpOT0_(%"struct.std::__1::pair.642"* nonnull sret %5, %"class.absl::container_internal::btree"* %341, %"class.quic::QuicInterval"* nonnull dereferenceable(16) %4, %"class.quic::QuicInterval"* nonnull dereferenceable(16) %4) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %342) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %81) #10
  br label %343

343:                                              ; preds = %2, %337
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE11erase_rangeENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EESJ_(%"struct.std::__1::pair.644"* noalias sret, %"class.absl::container_internal::btree"*, %"class.absl::container_internal::btree_node"*, i32, %"class.absl::container_internal::btree_node"*, i32) local_unnamed_addr #1 comdat align 2 {
  %7 = icmp ne %"class.absl::container_internal::btree_node"* %2, %4
  %8 = icmp ne i32 %5, %3
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %406

10:                                               ; preds = %6
  %11 = ptrtoint %"class.absl::container_internal::btree_node"* %2 to i64
  br label %12

12:                                               ; preds = %67, %10
  %13 = phi %"class.absl::container_internal::btree_node"* [ %70, %67 ], [ %2, %10 ]
  %14 = phi i64 [ %17, %67 ], [ 0, %10 ]
  %15 = phi i32 [ %69, %67 ], [ %3, %10 ]
  %16 = phi i64 [ %68, %67 ], [ %11, %10 ]
  %17 = add nuw nsw i64 %14, 1
  %18 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %13, i64 8, i32 0
  %19 = getelementptr inbounds i8, i8* %18, i64 3
  %20 = load i8, i8* %19, align 1
  %21 = icmp eq i8 %20, 0
  %22 = add nsw i32 %15, 1
  br i1 %21, label %42, label %23

23:                                               ; preds = %12
  %24 = getelementptr inbounds i8, i8* %18, i64 2
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = icmp eq i32 %22, %26
  br i1 %27, label %28, label %67

28:                                               ; preds = %23, %37
  %29 = phi i8* [ %33, %37 ], [ %18, %23 ]
  %30 = phi %"class.absl::container_internal::btree_node"* [ %32, %37 ], [ %13, %23 ]
  %31 = bitcast %"class.absl::container_internal::btree_node"* %30 to %"class.absl::container_internal::btree_node"**
  %32 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %31, align 8
  %33 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %32, i64 8, i32 0
  %34 = getelementptr inbounds i8, i8* %33, i64 3
  %35 = load i8, i8* %34, align 1
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %37, label %67

37:                                               ; preds = %28
  %38 = load i8, i8* %29, align 1
  %39 = getelementptr inbounds i8, i8* %33, i64 2
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i8 %38, %40
  br i1 %41, label %28, label %64

42:                                               ; preds = %12
  %43 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %13, i64 256, i32 0
  %44 = bitcast i8* %43 to %"class.absl::container_internal::btree_node"**
  %45 = sext i32 %22 to i64
  %46 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %44, i64 %45
  %47 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %46, align 8
  %48 = ptrtoint %"class.absl::container_internal::btree_node"* %47 to i64
  %49 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %47, i64 8, i32 0
  %50 = getelementptr inbounds i8, i8* %49, i64 3
  %51 = load i8, i8* %50, align 1
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %53, label %67

53:                                               ; preds = %42, %53
  %54 = phi %"class.absl::container_internal::btree_node"* [ %57, %53 ], [ %47, %42 ]
  %55 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %54, i64 256, i32 0
  %56 = bitcast i8* %55 to %"class.absl::container_internal::btree_node"**
  %57 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %56, align 8
  %58 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %57, i64 8, i32 0
  %59 = getelementptr inbounds i8, i8* %58, i64 3
  %60 = load i8, i8* %59, align 1
  %61 = icmp eq i8 %60, 0
  br i1 %61, label %53, label %62

62:                                               ; preds = %53
  %63 = ptrtoint %"class.absl::container_internal::btree_node"* %57 to i64
  br label %67

64:                                               ; preds = %37
  %65 = ptrtoint %"class.absl::container_internal::btree_node"* %32 to i64
  %66 = zext i8 %38 to i32
  br label %67

67:                                               ; preds = %28, %64, %62, %42, %23
  %68 = phi i64 [ %16, %23 ], [ %48, %42 ], [ %63, %62 ], [ %65, %64 ], [ %16, %28 ]
  %69 = phi i32 [ %22, %23 ], [ 0, %42 ], [ 0, %62 ], [ %66, %64 ], [ %22, %28 ]
  %70 = inttoptr i64 %68 to %"class.absl::container_internal::btree_node"*
  %71 = icmp ne %"class.absl::container_internal::btree_node"* %70, %4
  %72 = icmp ne i32 %69, %5
  %73 = or i1 %71, %72
  br i1 %73, label %12, label %74

74:                                               ; preds = %67
  %75 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %1, i64 0, i32 2
  %76 = load i64, i64* %75, align 8
  %77 = icmp eq i64 %76, %17
  br i1 %77, label %78, label %83

78:                                               ; preds = %74
  %79 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %80 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %79, align 8
  %81 = bitcast %"class.absl::container_internal::btree"* %1 to %"class.std::__1::allocator"*
  tail call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16clear_and_deleteEPSD_PSB_(%"class.absl::container_internal::btree_node"* %80, %"class.std::__1::allocator"* %81) #10
  %82 = bitcast %"class.absl::container_internal::btree"* %1 to <2 x %"class.absl::container_internal::btree_node"*>*
  store <2 x %"class.absl::container_internal::btree_node"*> <%"class.absl::container_internal::btree_node"* bitcast ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to %"class.absl::container_internal::btree_node"*), %"class.absl::container_internal::btree_node"* bitcast ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to %"class.absl::container_internal::btree_node"*)>, <2 x %"class.absl::container_internal::btree_node"*>* %82, align 8
  store i64 0, i64* %75, align 8
  br label %406

83:                                               ; preds = %74
  %84 = icmp eq %"class.absl::container_internal::btree_node"* %2, %4
  br i1 %84, label %85, label %236

85:                                               ; preds = %83
  %86 = sub nsw i32 %5, %3
  %87 = trunc i32 %86 to i8
  %88 = bitcast %"class.absl::container_internal::btree"* %1 to %"class.std::__1::allocator"*
  %89 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 8, i32 0
  %90 = getelementptr inbounds i8, i8* %89, i64 2
  %91 = load i8, i8* %90, align 1
  %92 = and i32 %3, 255
  %93 = and i32 %86, 255
  %94 = add nuw nsw i32 %93, %92
  %95 = zext i8 %91 to i32
  %96 = and i32 %94, 255
  %97 = sub nsw i32 %95, %96
  %98 = sext i32 %97 to i64
  %99 = zext i32 %96 to i64
  %100 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 16, i32 0
  %101 = bitcast i8* %100 to %"class.quic::QuicInterval"*
  %102 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %101, i64 %99
  %103 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %102, i64 %98
  %104 = icmp eq i32 %97, 0
  br i1 %104, label %152, label %105

105:                                              ; preds = %85
  %106 = zext i32 %92 to i64
  %107 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %101, i64 %106
  %108 = zext i8 %91 to i64
  %109 = shl nuw nsw i64 %108, 4
  %110 = add nsw i64 %109, -16
  %111 = shl nuw nsw i32 %96, 4
  %112 = zext i32 %111 to i64
  %113 = sub nsw i64 %110, %112
  %114 = lshr exact i64 %113, 4
  %115 = add nuw nsw i64 %114, 1
  %116 = and i64 %115, 3
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %128, label %118

118:                                              ; preds = %105, %118
  %119 = phi %"class.quic::QuicInterval"* [ %125, %118 ], [ %107, %105 ]
  %120 = phi %"class.quic::QuicInterval"* [ %124, %118 ], [ %102, %105 ]
  %121 = phi i64 [ %126, %118 ], [ %116, %105 ]
  %122 = bitcast %"class.quic::QuicInterval"* %119 to i8*
  %123 = bitcast %"class.quic::QuicInterval"* %120 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %122, i8* align 8 %123, i64 16, i1 false) #10
  %124 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %120, i64 1
  %125 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %119, i64 1
  %126 = add i64 %121, -1
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %128, label %118, !llvm.loop !17

128:                                              ; preds = %118, %105
  %129 = phi %"class.quic::QuicInterval"* [ %107, %105 ], [ %125, %118 ]
  %130 = phi %"class.quic::QuicInterval"* [ %102, %105 ], [ %124, %118 ]
  %131 = icmp ult i64 %113, 48
  br i1 %131, label %152, label %132

132:                                              ; preds = %128, %132
  %133 = phi %"class.quic::QuicInterval"* [ %150, %132 ], [ %129, %128 ]
  %134 = phi %"class.quic::QuicInterval"* [ %149, %132 ], [ %130, %128 ]
  %135 = bitcast %"class.quic::QuicInterval"* %133 to i8*
  %136 = bitcast %"class.quic::QuicInterval"* %134 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %135, i8* align 8 %136, i64 16, i1 false) #10
  %137 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %134, i64 1
  %138 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %133, i64 1
  %139 = bitcast %"class.quic::QuicInterval"* %138 to i8*
  %140 = bitcast %"class.quic::QuicInterval"* %137 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %139, i8* align 8 %140, i64 16, i1 false) #10
  %141 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %134, i64 2
  %142 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %133, i64 2
  %143 = bitcast %"class.quic::QuicInterval"* %142 to i8*
  %144 = bitcast %"class.quic::QuicInterval"* %141 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %143, i8* align 8 %144, i64 16, i1 false) #10
  %145 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %134, i64 3
  %146 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %133, i64 3
  %147 = bitcast %"class.quic::QuicInterval"* %146 to i8*
  %148 = bitcast %"class.quic::QuicInterval"* %145 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %147, i8* align 8 %148, i64 16, i1 false) #10
  %149 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %134, i64 4
  %150 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %133, i64 4
  %151 = icmp eq %"class.quic::QuicInterval"* %149, %103
  br i1 %151, label %152, label %132

152:                                              ; preds = %128, %132, %85
  %153 = getelementptr inbounds i8, i8* %89, i64 3
  %154 = load i8, i8* %153, align 1
  %155 = icmp eq i8 %154, 0
  br i1 %155, label %156, label %229

156:                                              ; preds = %152
  %157 = icmp eq i8 %87, 0
  br i1 %157, label %163, label %158

158:                                              ; preds = %156
  %159 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 256, i32 0
  %160 = bitcast i8* %159 to %"class.absl::container_internal::btree_node"**
  %161 = zext i32 %92 to i64
  %162 = zext i32 %93 to i64
  br label %191

163:                                              ; preds = %191, %156
  %164 = icmp ult i32 %94, %95
  br i1 %164, label %165, label %229

165:                                              ; preds = %163
  %166 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 256, i32 0
  %167 = bitcast i8* %166 to %"class.absl::container_internal::btree_node"**
  %168 = zext i32 %94 to i64
  %169 = zext i32 %93 to i64
  %170 = zext i8 %91 to i64
  %171 = sub nsw i64 %170, %168
  %172 = xor i64 %168, -1
  %173 = add nsw i64 %172, %170
  %174 = and i64 %171, 3
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %188, label %176

176:                                              ; preds = %165, %176
  %177 = phi i64 [ %179, %176 ], [ %168, %165 ]
  %178 = phi i64 [ %186, %176 ], [ %174, %165 ]
  %179 = add nuw nsw i64 %177, 1
  %180 = sub nsw i64 %179, %169
  %181 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %167, i64 %179
  %182 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %181, align 8
  %183 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %167, i64 %180
  store %"class.absl::container_internal::btree_node"* %182, %"class.absl::container_internal::btree_node"** %183, align 8
  %184 = trunc i64 %180 to i8
  %185 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %182, i64 8, i32 0
  store i8 %184, i8* %185, align 1
  %186 = add i64 %178, -1
  %187 = icmp eq i64 %186, 0
  br i1 %187, label %188, label %176, !llvm.loop !19

188:                                              ; preds = %176, %165
  %189 = phi i64 [ %168, %165 ], [ %179, %176 ]
  %190 = icmp ult i64 %173, 3
  br i1 %190, label %229, label %198

191:                                              ; preds = %191, %158
  %192 = phi i64 [ 0, %158 ], [ %193, %191 ]
  %193 = add nuw nsw i64 %192, 1
  %194 = add nuw nsw i64 %193, %161
  %195 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %160, i64 %194
  %196 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %195, align 8
  tail call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16clear_and_deleteEPSD_PSB_(%"class.absl::container_internal::btree_node"* %196, %"class.std::__1::allocator"* %88) #10
  %197 = icmp eq i64 %193, %162
  br i1 %197, label %163, label %191

198:                                              ; preds = %188, %198
  %199 = phi i64 [ %221, %198 ], [ %189, %188 ]
  %200 = add nuw nsw i64 %199, 1
  %201 = sub nsw i64 %200, %169
  %202 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %167, i64 %200
  %203 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %202, align 8
  %204 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %167, i64 %201
  store %"class.absl::container_internal::btree_node"* %203, %"class.absl::container_internal::btree_node"** %204, align 8
  %205 = trunc i64 %201 to i8
  %206 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %203, i64 8, i32 0
  store i8 %205, i8* %206, align 1
  %207 = add nuw nsw i64 %199, 2
  %208 = sub nsw i64 %207, %169
  %209 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %167, i64 %207
  %210 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %209, align 8
  %211 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %167, i64 %208
  store %"class.absl::container_internal::btree_node"* %210, %"class.absl::container_internal::btree_node"** %211, align 8
  %212 = trunc i64 %208 to i8
  %213 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %210, i64 8, i32 0
  store i8 %212, i8* %213, align 1
  %214 = add nuw nsw i64 %199, 3
  %215 = sub nsw i64 %214, %169
  %216 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %167, i64 %214
  %217 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %216, align 8
  %218 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %167, i64 %215
  store %"class.absl::container_internal::btree_node"* %217, %"class.absl::container_internal::btree_node"** %218, align 8
  %219 = trunc i64 %215 to i8
  %220 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %217, i64 8, i32 0
  store i8 %219, i8* %220, align 1
  %221 = add nuw nsw i64 %199, 4
  %222 = sub nsw i64 %221, %169
  %223 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %167, i64 %221
  %224 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %223, align 8
  %225 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %167, i64 %222
  store %"class.absl::container_internal::btree_node"* %224, %"class.absl::container_internal::btree_node"** %225, align 8
  %226 = trunc i64 %222 to i8
  %227 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %224, i64 8, i32 0
  store i8 %226, i8* %227, align 1
  %228 = icmp eq i64 %221, %170
  br i1 %228, label %229, label %198

229:                                              ; preds = %188, %198, %152, %163
  %230 = sub i8 %91, %87
  store i8 %230, i8* %90, align 1
  %231 = load i64, i64* %75, align 8
  %232 = sub nsw i64 %231, %17
  store i64 %232, i64* %75, align 8
  %233 = tail call { %"class.absl::container_internal::btree_node"*, i32 } @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE22rebalance_after_deleteENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EE(%"class.absl::container_internal::btree"* %1, %"class.absl::container_internal::btree_node"* %2, i32 %3)
  %234 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %233, 0
  %235 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %233, 1
  br label %406

236:                                              ; preds = %83
  %237 = sub nsw i64 %76, %17
  %238 = bitcast %"class.absl::container_internal::btree"* %1 to %"class.std::__1::allocator"*
  br label %239

239:                                              ; preds = %236, %400
  %240 = phi i64 [ %76, %236 ], [ %404, %400 ]
  %241 = phi i32 [ %3, %236 ], [ %403, %400 ]
  %242 = phi %"class.absl::container_internal::btree_node"* [ %2, %236 ], [ %402, %400 ]
  %243 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %242, i64 8, i32 0
  %244 = getelementptr inbounds i8, i8* %243, i64 3
  %245 = load i8, i8* %244, align 1
  %246 = icmp eq i8 %245, 0
  br i1 %246, label %398, label %247

247:                                              ; preds = %239
  %248 = sub nsw i64 %240, %237
  %249 = getelementptr inbounds i8, i8* %243, i64 2
  %250 = load i8, i8* %249, align 1
  %251 = zext i8 %250 to i32
  %252 = sub nsw i32 %251, %241
  %253 = sext i32 %252 to i64
  %254 = icmp sgt i64 %248, %253
  %255 = select i1 %254, i64 %253, i64 %248
  %256 = trunc i64 %255 to i8
  %257 = and i32 %241, 255
  %258 = trunc i64 %255 to i32
  %259 = and i32 %258, 255
  %260 = add nuw nsw i32 %259, %257
  %261 = and i32 %260, 255
  %262 = sub nsw i32 %251, %261
  %263 = sext i32 %262 to i64
  %264 = zext i32 %261 to i64
  %265 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %242, i64 16, i32 0
  %266 = bitcast i8* %265 to %"class.quic::QuicInterval"*
  %267 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %266, i64 %264
  %268 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %267, i64 %263
  %269 = icmp eq i32 %262, 0
  br i1 %269, label %393, label %270

270:                                              ; preds = %247
  %271 = zext i32 %257 to i64
  %272 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %266, i64 %271
  %273 = zext i8 %250 to i64
  %274 = shl nuw nsw i64 %273, 4
  %275 = add nsw i64 %274, -16
  %276 = shl nuw nsw i32 %261, 4
  %277 = zext i32 %276 to i64
  %278 = sub nsw i64 %275, %277
  %279 = lshr exact i64 %278, 4
  %280 = add nuw nsw i64 %279, 1
  %281 = and i64 %280, 3
  %282 = icmp eq i64 %281, 0
  br i1 %282, label %293, label %283

283:                                              ; preds = %270, %283
  %284 = phi %"class.quic::QuicInterval"* [ %290, %283 ], [ %272, %270 ]
  %285 = phi %"class.quic::QuicInterval"* [ %289, %283 ], [ %267, %270 ]
  %286 = phi i64 [ %291, %283 ], [ %281, %270 ]
  %287 = bitcast %"class.quic::QuicInterval"* %284 to i8*
  %288 = bitcast %"class.quic::QuicInterval"* %285 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %287, i8* align 8 %288, i64 16, i1 false) #10
  %289 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %285, i64 1
  %290 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %284, i64 1
  %291 = add i64 %286, -1
  %292 = icmp eq i64 %291, 0
  br i1 %292, label %293, label %283, !llvm.loop !20

293:                                              ; preds = %283, %270
  %294 = phi %"class.quic::QuicInterval"* [ %272, %270 ], [ %290, %283 ]
  %295 = phi %"class.quic::QuicInterval"* [ %267, %270 ], [ %289, %283 ]
  %296 = icmp ult i64 %278, 48
  br i1 %296, label %317, label %297

297:                                              ; preds = %293, %297
  %298 = phi %"class.quic::QuicInterval"* [ %315, %297 ], [ %294, %293 ]
  %299 = phi %"class.quic::QuicInterval"* [ %314, %297 ], [ %295, %293 ]
  %300 = bitcast %"class.quic::QuicInterval"* %298 to i8*
  %301 = bitcast %"class.quic::QuicInterval"* %299 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %300, i8* align 8 %301, i64 16, i1 false) #10
  %302 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %299, i64 1
  %303 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %298, i64 1
  %304 = bitcast %"class.quic::QuicInterval"* %303 to i8*
  %305 = bitcast %"class.quic::QuicInterval"* %302 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %304, i8* align 8 %305, i64 16, i1 false) #10
  %306 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %299, i64 2
  %307 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %298, i64 2
  %308 = bitcast %"class.quic::QuicInterval"* %307 to i8*
  %309 = bitcast %"class.quic::QuicInterval"* %306 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %308, i8* align 8 %309, i64 16, i1 false) #10
  %310 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %299, i64 3
  %311 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %298, i64 3
  %312 = bitcast %"class.quic::QuicInterval"* %311 to i8*
  %313 = bitcast %"class.quic::QuicInterval"* %310 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %312, i8* align 8 %313, i64 16, i1 false) #10
  %314 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %299, i64 4
  %315 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %298, i64 4
  %316 = icmp eq %"class.quic::QuicInterval"* %314, %268
  br i1 %316, label %317, label %297

317:                                              ; preds = %297, %293
  %318 = load i8, i8* %244, align 1
  %319 = icmp eq i8 %318, 0
  br i1 %319, label %320, label %393

320:                                              ; preds = %317
  %321 = icmp eq i8 %256, 0
  br i1 %321, label %327, label %322

322:                                              ; preds = %320
  %323 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %242, i64 256, i32 0
  %324 = bitcast i8* %323 to %"class.absl::container_internal::btree_node"**
  %325 = zext i32 %257 to i64
  %326 = and i64 %255, 255
  br label %355

327:                                              ; preds = %355, %320
  %328 = icmp ult i32 %260, %251
  br i1 %328, label %329, label %393

329:                                              ; preds = %327
  %330 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %242, i64 256, i32 0
  %331 = bitcast i8* %330 to %"class.absl::container_internal::btree_node"**
  %332 = zext i32 %260 to i64
  %333 = and i64 %255, 255
  %334 = zext i8 %250 to i64
  %335 = sub nsw i64 %273, %332
  %336 = xor i64 %332, -1
  %337 = add nsw i64 %336, %273
  %338 = and i64 %335, 3
  %339 = icmp eq i64 %338, 0
  br i1 %339, label %352, label %340

340:                                              ; preds = %329, %340
  %341 = phi i64 [ %343, %340 ], [ %332, %329 ]
  %342 = phi i64 [ %350, %340 ], [ %338, %329 ]
  %343 = add nuw nsw i64 %341, 1
  %344 = sub nsw i64 %343, %333
  %345 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %331, i64 %343
  %346 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %345, align 8
  %347 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %331, i64 %344
  store %"class.absl::container_internal::btree_node"* %346, %"class.absl::container_internal::btree_node"** %347, align 8
  %348 = trunc i64 %344 to i8
  %349 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %346, i64 8, i32 0
  store i8 %348, i8* %349, align 1
  %350 = add i64 %342, -1
  %351 = icmp eq i64 %350, 0
  br i1 %351, label %352, label %340, !llvm.loop !21

352:                                              ; preds = %340, %329
  %353 = phi i64 [ %332, %329 ], [ %343, %340 ]
  %354 = icmp ult i64 %337, 3
  br i1 %354, label %393, label %362

355:                                              ; preds = %355, %322
  %356 = phi i64 [ 0, %322 ], [ %357, %355 ]
  %357 = add nuw nsw i64 %356, 1
  %358 = add nuw nsw i64 %357, %325
  %359 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %324, i64 %358
  %360 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %359, align 8
  tail call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16clear_and_deleteEPSD_PSB_(%"class.absl::container_internal::btree_node"* %360, %"class.std::__1::allocator"* %238) #10
  %361 = icmp eq i64 %357, %326
  br i1 %361, label %327, label %355

362:                                              ; preds = %352, %362
  %363 = phi i64 [ %385, %362 ], [ %353, %352 ]
  %364 = add nuw nsw i64 %363, 1
  %365 = sub nsw i64 %364, %333
  %366 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %331, i64 %364
  %367 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %366, align 8
  %368 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %331, i64 %365
  store %"class.absl::container_internal::btree_node"* %367, %"class.absl::container_internal::btree_node"** %368, align 8
  %369 = trunc i64 %365 to i8
  %370 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %367, i64 8, i32 0
  store i8 %369, i8* %370, align 1
  %371 = add nuw nsw i64 %363, 2
  %372 = sub nsw i64 %371, %333
  %373 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %331, i64 %371
  %374 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %373, align 8
  %375 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %331, i64 %372
  store %"class.absl::container_internal::btree_node"* %374, %"class.absl::container_internal::btree_node"** %375, align 8
  %376 = trunc i64 %372 to i8
  %377 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %374, i64 8, i32 0
  store i8 %376, i8* %377, align 1
  %378 = add nuw nsw i64 %363, 3
  %379 = sub nsw i64 %378, %333
  %380 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %331, i64 %378
  %381 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %380, align 8
  %382 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %331, i64 %379
  store %"class.absl::container_internal::btree_node"* %381, %"class.absl::container_internal::btree_node"** %382, align 8
  %383 = trunc i64 %379 to i8
  %384 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %381, i64 8, i32 0
  store i8 %383, i8* %384, align 1
  %385 = add nuw nsw i64 %363, 4
  %386 = sub nsw i64 %385, %333
  %387 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %331, i64 %385
  %388 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %387, align 8
  %389 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %331, i64 %386
  store %"class.absl::container_internal::btree_node"* %388, %"class.absl::container_internal::btree_node"** %389, align 8
  %390 = trunc i64 %386 to i8
  %391 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %388, i64 8, i32 0
  store i8 %390, i8* %391, align 1
  %392 = icmp eq i64 %385, %334
  br i1 %392, label %393, label %362

393:                                              ; preds = %352, %362, %247, %317, %327
  %394 = sub i8 %250, %256
  store i8 %394, i8* %249, align 1
  %395 = load i64, i64* %75, align 8
  %396 = sub nsw i64 %395, %255
  store i64 %396, i64* %75, align 8
  %397 = tail call { %"class.absl::container_internal::btree_node"*, i32 } @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE22rebalance_after_deleteENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EE(%"class.absl::container_internal::btree"* %1, %"class.absl::container_internal::btree_node"* %242, i32 %241)
  br label %400

398:                                              ; preds = %239
  %399 = tail call { %"class.absl::container_internal::btree_node"*, i32 } @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE5eraseENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EE(%"class.absl::container_internal::btree"* %1, %"class.absl::container_internal::btree_node"* %242, i32 %241)
  br label %400

400:                                              ; preds = %398, %393
  %401 = phi { %"class.absl::container_internal::btree_node"*, i32 } [ %399, %398 ], [ %397, %393 ]
  %402 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %401, 0
  %403 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %401, 1
  %404 = load i64, i64* %75, align 8
  %405 = icmp sgt i64 %404, %237
  br i1 %405, label %239, label %406

406:                                              ; preds = %400, %6, %229, %78
  %407 = phi i64 [ %17, %229 ], [ %17, %78 ], [ 0, %6 ], [ %17, %400 ]
  %408 = phi %"class.absl::container_internal::btree_node"* [ %234, %229 ], [ bitcast ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to %"class.absl::container_internal::btree_node"*), %78 ], [ %2, %6 ], [ %402, %400 ]
  %409 = phi i32 [ %235, %229 ], [ 0, %78 ], [ %5, %6 ], [ %403, %400 ]
  %410 = getelementptr inbounds %"struct.std::__1::pair.644", %"struct.std::__1::pair.644"* %0, i64 0, i32 0
  store i64 %407, i64* %410, align 8
  %411 = getelementptr inbounds %"struct.std::__1::pair.644", %"struct.std::__1::pair.644"* %0, i64 0, i32 1, i32 0
  store %"class.absl::container_internal::btree_node"* %408, %"class.absl::container_internal::btree_node"** %411, align 8
  %412 = getelementptr inbounds %"struct.std::__1::pair.644", %"struct.std::__1::pair.644"* %0, i64 0, i32 1, i32 1
  store i32 %409, i32* %412, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.absl::container_internal::btree_node"*, i32 } @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE22rebalance_after_deleteENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EE(%"class.absl::container_internal::btree"*, %"class.absl::container_internal::btree_node"*, i32) local_unnamed_addr #1 comdat align 2 {
  %4 = alloca { %"class.absl::container_internal::btree_node"*, i32 }, align 8
  %5 = bitcast { %"class.absl::container_internal::btree_node"*, i32 }* %4 to %"struct.absl::container_internal::btree_iterator.640"*
  %6 = getelementptr inbounds { %"class.absl::container_internal::btree_node"*, i32 }, { %"class.absl::container_internal::btree_node"*, i32 }* %4, i64 0, i32 0
  store %"class.absl::container_internal::btree_node"* %1, %"class.absl::container_internal::btree_node"** %6, align 8
  %7 = getelementptr inbounds { %"class.absl::container_internal::btree_node"*, i32 }, { %"class.absl::container_internal::btree_node"*, i32 }* %4, i64 0, i32 1
  store i32 %2, i32* %7, align 8
  %8 = bitcast { %"class.absl::container_internal::btree_node"*, i32 }* %4 to i64*
  %9 = ptrtoint %"class.absl::container_internal::btree_node"* %1 to i64
  %10 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %11 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %10, align 8
  %12 = icmp eq %"class.absl::container_internal::btree_node"* %11, %1
  br i1 %12, label %15, label %51

13:                                               ; preds = %68
  %14 = inttoptr i64 %75 to %"class.absl::container_internal::btree_node"*
  br label %15

15:                                               ; preds = %13, %3
  %16 = phi i32 [ %2, %3 ], [ %66, %13 ]
  %17 = phi i64 [ %9, %3 ], [ %67, %13 ]
  %18 = phi %"class.absl::container_internal::btree_node"* [ %1, %3 ], [ %14, %13 ]
  %19 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %18, i64 8, i32 0
  %20 = getelementptr inbounds i8, i8* %19, i64 2
  %21 = load i8, i8* %20, align 1
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %23, label %40

23:                                               ; preds = %15
  %24 = getelementptr inbounds i8, i8* %19, i64 3
  %25 = load i8, i8* %24, align 1
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %29, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %0, i64 0, i32 1
  store %"class.absl::container_internal::btree_node"* bitcast ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to %"class.absl::container_internal::btree_node"*), %"class.absl::container_internal::btree_node"** %28, align 8
  br label %37

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %18, i64 256, i32 0
  %31 = bitcast i8* %30 to %"class.absl::container_internal::btree_node"**
  %32 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %31, align 8
  %33 = bitcast %"class.absl::container_internal::btree_node"* %32 to i64**
  %34 = load i64*, i64** %33, align 8
  %35 = load i64, i64* %34, align 8
  %36 = bitcast %"class.absl::container_internal::btree_node"* %32 to i64*
  store i64 %35, i64* %36, align 8
  br label %37

37:                                               ; preds = %29, %27
  %38 = phi %"class.absl::container_internal::btree_node"* [ %32, %29 ], [ bitcast ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to %"class.absl::container_internal::btree_node"*), %27 ]
  store %"class.absl::container_internal::btree_node"* %38, %"class.absl::container_internal::btree_node"** %10, align 8
  %39 = bitcast %"class.absl::container_internal::btree"* %0 to %"class.std::__1::allocator"*
  call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16clear_and_deleteEPSD_PSB_(%"class.absl::container_internal::btree_node"* %18, %"class.std::__1::allocator"* %39) #10
  br label %40

40:                                               ; preds = %15, %37
  %41 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %0, i64 0, i32 2
  %42 = load i64, i64* %41, align 8
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %79

44:                                               ; preds = %40
  %45 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %0, i64 0, i32 1
  %46 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %45, align 8
  %47 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %46, i64 8, i32 0
  %48 = getelementptr inbounds i8, i8* %47, i64 2
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  br label %135

51:                                               ; preds = %3, %68
  %52 = phi %"class.absl::container_internal::btree_node"* [ %76, %68 ], [ %1, %3 ]
  %53 = phi i8 [ %70, %68 ], [ 1, %3 ]
  %54 = phi i64 [ %67, %68 ], [ %9, %3 ]
  %55 = phi i32 [ %66, %68 ], [ %2, %3 ]
  %56 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %52, i64 8, i32 0
  %57 = getelementptr inbounds i8, i8* %56, i64 2
  %58 = load i8, i8* %57, align 1
  %59 = icmp ugt i8 %58, 6
  br i1 %59, label %79, label %60

60:                                               ; preds = %51
  %61 = call zeroext i1 @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE22try_merge_or_rebalanceEPNS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EE(%"class.absl::container_internal::btree"* %0, %"struct.absl::container_internal::btree_iterator.640"* nonnull %5)
  %62 = and i8 %53, 1
  %63 = icmp eq i8 %62, 0
  %64 = load i64, i64* %8, align 8
  %65 = load i32, i32* %7, align 8
  %66 = select i1 %63, i32 %55, i32 %65
  %67 = select i1 %63, i64 %54, i64 %64
  br i1 %61, label %68, label %79

68:                                               ; preds = %60
  %69 = inttoptr i64 %64 to %"class.absl::container_internal::btree_node"*
  %70 = select i1 %63, i8 %53, i8 0
  %71 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %69, i64 8, i32 0
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  store i32 %73, i32* %7, align 8
  %74 = inttoptr i64 %64 to i64*
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %8, align 8
  %76 = inttoptr i64 %75 to %"class.absl::container_internal::btree_node"*
  %77 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %10, align 8
  %78 = icmp eq %"class.absl::container_internal::btree_node"* %77, %76
  br i1 %78, label %13, label %51

79:                                               ; preds = %60, %51, %40
  %80 = phi i32 [ %16, %40 ], [ %66, %60 ], [ %55, %51 ]
  %81 = phi i64 [ %17, %40 ], [ %67, %60 ], [ %54, %51 ]
  %82 = inttoptr i64 %81 to %"class.absl::container_internal::btree_node"*
  %83 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %82, i64 8, i32 0
  %84 = getelementptr inbounds i8, i8* %83, i64 2
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = icmp eq i32 %80, %86
  br i1 %87, label %88, label %131

88:                                               ; preds = %79
  %89 = getelementptr inbounds i8, i8* %83, i64 3
  %90 = load i8, i8* %89, align 1
  %91 = icmp eq i8 %90, 0
  br i1 %91, label %106, label %92

92:                                               ; preds = %88, %101
  %93 = phi i8* [ %97, %101 ], [ %83, %88 ]
  %94 = phi %"class.absl::container_internal::btree_node"* [ %96, %101 ], [ %82, %88 ]
  %95 = bitcast %"class.absl::container_internal::btree_node"* %94 to %"class.absl::container_internal::btree_node"**
  %96 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %95, align 8
  %97 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %96, i64 8, i32 0
  %98 = getelementptr inbounds i8, i8* %97, i64 3
  %99 = load i8, i8* %98, align 1
  %100 = icmp eq i8 %99, 0
  br i1 %100, label %101, label %131

101:                                              ; preds = %92
  %102 = load i8, i8* %93, align 1
  %103 = getelementptr inbounds i8, i8* %97, i64 2
  %104 = load i8, i8* %103, align 1
  %105 = icmp eq i8 %102, %104
  br i1 %105, label %92, label %128

106:                                              ; preds = %88
  %107 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %82, i64 256, i32 0
  %108 = bitcast i8* %107 to %"class.absl::container_internal::btree_node"**
  %109 = zext i8 %85 to i64
  %110 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %108, i64 %109
  %111 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %110, align 8
  %112 = ptrtoint %"class.absl::container_internal::btree_node"* %111 to i64
  %113 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %111, i64 8, i32 0
  %114 = getelementptr inbounds i8, i8* %113, i64 3
  %115 = load i8, i8* %114, align 1
  %116 = icmp eq i8 %115, 0
  br i1 %116, label %117, label %131

117:                                              ; preds = %106, %117
  %118 = phi %"class.absl::container_internal::btree_node"* [ %121, %117 ], [ %111, %106 ]
  %119 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %118, i64 256, i32 0
  %120 = bitcast i8* %119 to %"class.absl::container_internal::btree_node"**
  %121 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %120, align 8
  %122 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %121, i64 8, i32 0
  %123 = getelementptr inbounds i8, i8* %122, i64 3
  %124 = load i8, i8* %123, align 1
  %125 = icmp eq i8 %124, 0
  br i1 %125, label %117, label %126

126:                                              ; preds = %117
  %127 = ptrtoint %"class.absl::container_internal::btree_node"* %121 to i64
  br label %131

128:                                              ; preds = %101
  %129 = ptrtoint %"class.absl::container_internal::btree_node"* %96 to i64
  %130 = zext i8 %102 to i32
  br label %131

131:                                              ; preds = %92, %128, %126, %106, %79
  %132 = phi i32 [ %80, %79 ], [ 0, %106 ], [ 0, %126 ], [ %130, %128 ], [ %80, %92 ]
  %133 = phi i64 [ %81, %79 ], [ %112, %106 ], [ %127, %126 ], [ %129, %128 ], [ %81, %92 ]
  %134 = inttoptr i64 %133 to %"class.absl::container_internal::btree_node"*
  br label %135

135:                                              ; preds = %131, %44
  %136 = phi %"class.absl::container_internal::btree_node"* [ %46, %44 ], [ %134, %131 ]
  %137 = phi i32 [ %50, %44 ], [ %132, %131 ]
  %138 = insertvalue { %"class.absl::container_internal::btree_node"*, i32 } undef, %"class.absl::container_internal::btree_node"* %136, 0
  %139 = insertvalue { %"class.absl::container_internal::btree_node"*, i32 } %138, i32 %137, 1
  ret { %"class.absl::container_internal::btree_node"*, i32 } %139
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.absl::container_internal::btree_node"*, i32 } @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE5eraseENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EE(%"class.absl::container_internal::btree"*, %"class.absl::container_internal::btree_node"*, i32) local_unnamed_addr #1 comdat align 2 {
  %4 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %1, i64 8, i32 0
  %5 = getelementptr inbounds i8, i8* %4, i64 3
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %48

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %1, i64 256, i32 0
  %10 = bitcast i8* %9 to %"class.absl::container_internal::btree_node"**
  %11 = sext i32 %2 to i64
  %12 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %10, i64 %11
  %13 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %12, align 8
  %14 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %13, i64 8, i32 0
  %15 = getelementptr inbounds i8, i8* %14, i64 3
  %16 = load i8, i8* %15, align 1
  %17 = icmp eq i8 %16, 0
  %18 = getelementptr inbounds i8, i8* %14, i64 2
  %19 = load i8, i8* %18, align 1
  br i1 %17, label %20, label %34

20:                                               ; preds = %8, %20
  %21 = phi i8 [ %33, %20 ], [ %19, %8 ]
  %22 = phi %"class.absl::container_internal::btree_node"* [ %27, %20 ], [ %13, %8 ]
  %23 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %22, i64 256, i32 0
  %24 = bitcast i8* %23 to %"class.absl::container_internal::btree_node"**
  %25 = zext i8 %21 to i64
  %26 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %24, i64 %25
  %27 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %26, align 8
  %28 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %27, i64 8, i32 0
  %29 = getelementptr inbounds i8, i8* %28, i64 3
  %30 = load i8, i8* %29, align 1
  %31 = icmp eq i8 %30, 0
  %32 = getelementptr inbounds i8, i8* %28, i64 2
  %33 = load i8, i8* %32, align 1
  br i1 %31, label %20, label %34

34:                                               ; preds = %20, %8
  %35 = phi %"class.absl::container_internal::btree_node"* [ %13, %8 ], [ %27, %20 ]
  %36 = phi i8 [ %19, %8 ], [ %33, %20 ]
  %37 = zext i8 %36 to i32
  %38 = add nsw i32 %37, -1
  %39 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %35, i64 16, i32 0
  %40 = bitcast i8* %39 to %"class.quic::QuicInterval"*
  %41 = sext i32 %38 to i64
  %42 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %40, i64 %41
  %43 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %1, i64 16, i32 0
  %44 = bitcast i8* %43 to %"class.quic::QuicInterval"*
  %45 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %44, i64 %11
  %46 = bitcast %"class.quic::QuicInterval"* %45 to i8*
  %47 = bitcast %"class.quic::QuicInterval"* %42 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 8 %47, i64 16, i1 false) #10
  br label %48

48:                                               ; preds = %3, %34
  %49 = phi i32 [ %38, %34 ], [ %2, %3 ]
  %50 = phi %"class.absl::container_internal::btree_node"* [ %35, %34 ], [ %1, %3 ]
  %51 = phi i1 [ true, %34 ], [ false, %3 ]
  %52 = bitcast %"class.absl::container_internal::btree"* %0 to %"class.std::__1::allocator"*
  %53 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %50, i64 8, i32 0
  %54 = getelementptr inbounds i8, i8* %53, i64 2
  %55 = load i8, i8* %54, align 1
  %56 = and i32 %49, 255
  %57 = add nuw nsw i32 %56, 1
  %58 = zext i8 %55 to i32
  %59 = and i32 %57, 255
  %60 = sub nsw i32 %58, %59
  %61 = sext i32 %60 to i64
  %62 = zext i32 %59 to i64
  %63 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %50, i64 16, i32 0
  %64 = bitcast i8* %63 to %"class.quic::QuicInterval"*
  %65 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %64, i64 %62
  %66 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %65, i64 %61
  %67 = icmp eq i32 %60, 0
  br i1 %67, label %115, label %68

68:                                               ; preds = %48
  %69 = zext i32 %56 to i64
  %70 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %64, i64 %69
  %71 = zext i8 %55 to i64
  %72 = shl nuw nsw i64 %71, 4
  %73 = add nsw i64 %72, -16
  %74 = shl nuw nsw i32 %59, 4
  %75 = zext i32 %74 to i64
  %76 = sub nsw i64 %73, %75
  %77 = lshr exact i64 %76, 4
  %78 = add nuw nsw i64 %77, 1
  %79 = and i64 %78, 3
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %91, label %81

81:                                               ; preds = %68, %81
  %82 = phi %"class.quic::QuicInterval"* [ %88, %81 ], [ %70, %68 ]
  %83 = phi %"class.quic::QuicInterval"* [ %87, %81 ], [ %65, %68 ]
  %84 = phi i64 [ %89, %81 ], [ %79, %68 ]
  %85 = bitcast %"class.quic::QuicInterval"* %82 to i8*
  %86 = bitcast %"class.quic::QuicInterval"* %83 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %85, i8* align 8 %86, i64 16, i1 false) #10
  %87 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %83, i64 1
  %88 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %82, i64 1
  %89 = add i64 %84, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %81, !llvm.loop !22

91:                                               ; preds = %81, %68
  %92 = phi %"class.quic::QuicInterval"* [ %70, %68 ], [ %88, %81 ]
  %93 = phi %"class.quic::QuicInterval"* [ %65, %68 ], [ %87, %81 ]
  %94 = icmp ult i64 %76, 48
  br i1 %94, label %115, label %95

95:                                               ; preds = %91, %95
  %96 = phi %"class.quic::QuicInterval"* [ %113, %95 ], [ %92, %91 ]
  %97 = phi %"class.quic::QuicInterval"* [ %112, %95 ], [ %93, %91 ]
  %98 = bitcast %"class.quic::QuicInterval"* %96 to i8*
  %99 = bitcast %"class.quic::QuicInterval"* %97 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %98, i8* align 8 %99, i64 16, i1 false) #10
  %100 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %97, i64 1
  %101 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %96, i64 1
  %102 = bitcast %"class.quic::QuicInterval"* %101 to i8*
  %103 = bitcast %"class.quic::QuicInterval"* %100 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %102, i8* align 8 %103, i64 16, i1 false) #10
  %104 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %97, i64 2
  %105 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %96, i64 2
  %106 = bitcast %"class.quic::QuicInterval"* %105 to i8*
  %107 = bitcast %"class.quic::QuicInterval"* %104 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %106, i8* align 8 %107, i64 16, i1 false) #10
  %108 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %97, i64 3
  %109 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %96, i64 3
  %110 = bitcast %"class.quic::QuicInterval"* %109 to i8*
  %111 = bitcast %"class.quic::QuicInterval"* %108 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %110, i8* align 8 %111, i64 16, i1 false) #10
  %112 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %97, i64 4
  %113 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %96, i64 4
  %114 = icmp eq %"class.quic::QuicInterval"* %112, %66
  br i1 %114, label %115, label %95

115:                                              ; preds = %91, %95, %48
  %116 = getelementptr inbounds i8, i8* %53, i64 3
  %117 = load i8, i8* %116, align 1
  %118 = icmp eq i8 %117, 0
  br i1 %118, label %119, label %177

119:                                              ; preds = %115
  %120 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %50, i64 256, i32 0
  %121 = bitcast i8* %120 to %"class.absl::container_internal::btree_node"**
  %122 = add nuw nsw i32 %56, 1
  %123 = zext i32 %122 to i64
  %124 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %121, i64 %123
  %125 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %124, align 8
  tail call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16clear_and_deleteEPSD_PSB_(%"class.absl::container_internal::btree_node"* %125, %"class.std::__1::allocator"* %52) #10
  %126 = icmp ult i32 %57, %58
  br i1 %126, label %127, label %177

127:                                              ; preds = %119
  %128 = zext i32 %57 to i64
  %129 = zext i8 %55 to i64
  %130 = add nsw i64 %128, -1
  %131 = sub nsw i64 %129, %128
  %132 = add nsw i64 %129, -2
  %133 = sub nsw i64 %132, %130
  %134 = and i64 %131, 3
  %135 = icmp eq i64 %134, 0
  br i1 %135, label %147, label %136

136:                                              ; preds = %127, %136
  %137 = phi i64 [ %139, %136 ], [ %128, %127 ]
  %138 = phi i64 [ %145, %136 ], [ %134, %127 ]
  %139 = add nuw nsw i64 %137, 1
  %140 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %121, i64 %139
  %141 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %140, align 8
  %142 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %121, i64 %137
  store %"class.absl::container_internal::btree_node"* %141, %"class.absl::container_internal::btree_node"** %142, align 8
  %143 = trunc i64 %137 to i8
  %144 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %141, i64 8, i32 0
  store i8 %143, i8* %144, align 1
  %145 = add i64 %138, -1
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %147, label %136, !llvm.loop !23

147:                                              ; preds = %136, %127
  %148 = phi i64 [ %128, %127 ], [ %139, %136 ]
  %149 = icmp ult i64 %133, 3
  br i1 %149, label %177, label %150

150:                                              ; preds = %147, %150
  %151 = phi i64 [ %170, %150 ], [ %148, %147 ]
  %152 = add nuw nsw i64 %151, 1
  %153 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %121, i64 %152
  %154 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %153, align 8
  %155 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %121, i64 %151
  store %"class.absl::container_internal::btree_node"* %154, %"class.absl::container_internal::btree_node"** %155, align 8
  %156 = trunc i64 %151 to i8
  %157 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %154, i64 8, i32 0
  store i8 %156, i8* %157, align 1
  %158 = add nuw nsw i64 %151, 2
  %159 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %121, i64 %158
  %160 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %159, align 8
  %161 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %121, i64 %152
  store %"class.absl::container_internal::btree_node"* %160, %"class.absl::container_internal::btree_node"** %161, align 8
  %162 = trunc i64 %152 to i8
  %163 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %160, i64 8, i32 0
  store i8 %162, i8* %163, align 1
  %164 = add nuw nsw i64 %151, 3
  %165 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %121, i64 %164
  %166 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %165, align 8
  %167 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %121, i64 %158
  store %"class.absl::container_internal::btree_node"* %166, %"class.absl::container_internal::btree_node"** %167, align 8
  %168 = trunc i64 %158 to i8
  %169 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %166, i64 8, i32 0
  store i8 %168, i8* %169, align 1
  %170 = add nuw nsw i64 %151, 4
  %171 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %121, i64 %170
  %172 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %171, align 8
  %173 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %121, i64 %164
  store %"class.absl::container_internal::btree_node"* %172, %"class.absl::container_internal::btree_node"** %173, align 8
  %174 = trunc i64 %164 to i8
  %175 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %172, i64 8, i32 0
  store i8 %174, i8* %175, align 1
  %176 = icmp eq i64 %170, %129
  br i1 %176, label %177, label %150

177:                                              ; preds = %147, %150, %115, %119
  %178 = add i8 %55, -1
  store i8 %178, i8* %54, align 1
  %179 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %0, i64 0, i32 2
  %180 = load i64, i64* %179, align 8
  %181 = add nsw i64 %180, -1
  store i64 %181, i64* %179, align 8
  %182 = tail call { %"class.absl::container_internal::btree_node"*, i32 } @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE22rebalance_after_deleteENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EE(%"class.absl::container_internal::btree"* %0, %"class.absl::container_internal::btree_node"* %50, i32 %49)
  %183 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %182, 0
  %184 = ptrtoint %"class.absl::container_internal::btree_node"* %183 to i64
  %185 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %182, 1
  br i1 %51, label %186, label %236

186:                                              ; preds = %177
  %187 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %183, i64 8, i32 0
  %188 = getelementptr inbounds i8, i8* %187, i64 3
  %189 = load i8, i8* %188, align 1
  %190 = icmp eq i8 %189, 0
  %191 = add nsw i32 %185, 1
  br i1 %190, label %211, label %192

192:                                              ; preds = %186
  %193 = getelementptr inbounds i8, i8* %187, i64 2
  %194 = load i8, i8* %193, align 1
  %195 = zext i8 %194 to i32
  %196 = icmp eq i32 %191, %195
  br i1 %196, label %197, label %236

197:                                              ; preds = %192, %206
  %198 = phi i8* [ %202, %206 ], [ %187, %192 ]
  %199 = phi %"class.absl::container_internal::btree_node"* [ %201, %206 ], [ %183, %192 ]
  %200 = bitcast %"class.absl::container_internal::btree_node"* %199 to %"class.absl::container_internal::btree_node"**
  %201 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %200, align 8
  %202 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %201, i64 8, i32 0
  %203 = getelementptr inbounds i8, i8* %202, i64 3
  %204 = load i8, i8* %203, align 1
  %205 = icmp eq i8 %204, 0
  br i1 %205, label %206, label %236

206:                                              ; preds = %197
  %207 = load i8, i8* %198, align 1
  %208 = getelementptr inbounds i8, i8* %202, i64 2
  %209 = load i8, i8* %208, align 1
  %210 = icmp eq i8 %207, %209
  br i1 %210, label %197, label %233

211:                                              ; preds = %186
  %212 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %183, i64 256, i32 0
  %213 = bitcast i8* %212 to %"class.absl::container_internal::btree_node"**
  %214 = sext i32 %191 to i64
  %215 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %213, i64 %214
  %216 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %215, align 8
  %217 = ptrtoint %"class.absl::container_internal::btree_node"* %216 to i64
  %218 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %216, i64 8, i32 0
  %219 = getelementptr inbounds i8, i8* %218, i64 3
  %220 = load i8, i8* %219, align 1
  %221 = icmp eq i8 %220, 0
  br i1 %221, label %222, label %236

222:                                              ; preds = %211, %222
  %223 = phi %"class.absl::container_internal::btree_node"* [ %226, %222 ], [ %216, %211 ]
  %224 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %223, i64 256, i32 0
  %225 = bitcast i8* %224 to %"class.absl::container_internal::btree_node"**
  %226 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %225, align 8
  %227 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %226, i64 8, i32 0
  %228 = getelementptr inbounds i8, i8* %227, i64 3
  %229 = load i8, i8* %228, align 1
  %230 = icmp eq i8 %229, 0
  br i1 %230, label %222, label %231

231:                                              ; preds = %222
  %232 = ptrtoint %"class.absl::container_internal::btree_node"* %226 to i64
  br label %236

233:                                              ; preds = %206
  %234 = ptrtoint %"class.absl::container_internal::btree_node"* %201 to i64
  %235 = zext i8 %207 to i32
  br label %236

236:                                              ; preds = %197, %233, %231, %192, %211, %177
  %237 = phi i32 [ %185, %177 ], [ %191, %192 ], [ 0, %211 ], [ 0, %231 ], [ %235, %233 ], [ %191, %197 ]
  %238 = phi i64 [ %184, %177 ], [ %184, %192 ], [ %217, %211 ], [ %232, %231 ], [ %234, %233 ], [ %184, %197 ]
  %239 = inttoptr i64 %238 to %"class.absl::container_internal::btree_node"*
  %240 = insertvalue { %"class.absl::container_internal::btree_node"*, i32 } undef, %"class.absl::container_internal::btree_node"* %239, 0
  %241 = insertvalue { %"class.absl::container_internal::btree_node"*, i32 } %240, i32 %237, 1
  ret { %"class.absl::container_internal::btree_node"*, i32 } %241
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE22try_merge_or_rebalanceEPNS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EE(%"class.absl::container_internal::btree"*, %"struct.absl::container_internal::btree_iterator.640"*) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"struct.absl::container_internal::btree_iterator.640", %"struct.absl::container_internal::btree_iterator.640"* %1, i64 0, i32 0
  %4 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %3, align 8
  %5 = bitcast %"class.absl::container_internal::btree_node"* %4 to %"class.absl::container_internal::btree_node"**
  %6 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %5, align 8
  %7 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %4, i64 8, i32 0
  %8 = load i8, i8* %7, align 1
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %37, label %10

10:                                               ; preds = %2
  %11 = zext i8 %8 to i64
  %12 = add nsw i64 %11, -1
  %13 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %6, i64 256, i32 0
  %14 = bitcast i8* %13 to %"class.absl::container_internal::btree_node"**
  %15 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %14, i64 %12
  %16 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %15, align 8
  %17 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %16, i64 8, i32 0
  %18 = getelementptr inbounds i8, i8* %17, i64 2
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = add nuw nsw i32 %20, 1
  %22 = getelementptr inbounds i8, i8* %7, i64 2
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = add nuw nsw i32 %21, %24
  %26 = icmp ult i32 %25, 16
  br i1 %26, label %27, label %37

27:                                               ; preds = %10
  %28 = getelementptr inbounds %"struct.absl::container_internal::btree_iterator.640", %"struct.absl::container_internal::btree_iterator.640"* %1, i64 0, i32 1
  %29 = load i32, i32* %28, align 8
  %30 = add nsw i32 %29, %21
  store i32 %30, i32* %28, align 8
  %31 = bitcast %"class.absl::container_internal::btree"* %0 to %"class.std::__1::allocator"*
  tail call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE5mergeEPSD_PSB_(%"class.absl::container_internal::btree_node"* %16, %"class.absl::container_internal::btree_node"* %4, %"class.std::__1::allocator"* %31) #10
  %32 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %0, i64 0, i32 1
  %33 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %32, align 8
  %34 = icmp eq %"class.absl::container_internal::btree_node"* %33, %4
  br i1 %34, label %35, label %36

35:                                               ; preds = %27
  store %"class.absl::container_internal::btree_node"* %16, %"class.absl::container_internal::btree_node"** %32, align 8
  br label %36

36:                                               ; preds = %27, %35
  store %"class.absl::container_internal::btree_node"* %16, %"class.absl::container_internal::btree_node"** %3, align 8
  br label %113

37:                                               ; preds = %2, %10
  %38 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %6, i64 8, i32 0
  %39 = getelementptr inbounds i8, i8* %38, i64 2
  %40 = load i8, i8* %39, align 1
  %41 = icmp ult i8 %8, %40
  br i1 %41, label %42, label %80

42:                                               ; preds = %37
  %43 = zext i8 %8 to i64
  %44 = add nuw nsw i64 %43, 1
  %45 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %6, i64 256, i32 0
  %46 = bitcast i8* %45 to %"class.absl::container_internal::btree_node"**
  %47 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %46, i64 %44
  %48 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %47, align 8
  %49 = getelementptr inbounds i8, i8* %7, i64 2
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = add nuw nsw i32 %51, 1
  %53 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %48, i64 8, i32 0
  %54 = getelementptr inbounds i8, i8* %53, i64 2
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = add nuw nsw i32 %52, %56
  %58 = icmp ult i32 %57, 16
  br i1 %58, label %59, label %65

59:                                               ; preds = %42
  %60 = bitcast %"class.absl::container_internal::btree"* %0 to %"class.std::__1::allocator"*
  tail call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE5mergeEPSD_PSB_(%"class.absl::container_internal::btree_node"* %4, %"class.absl::container_internal::btree_node"* %48, %"class.std::__1::allocator"* %60) #10
  %61 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %0, i64 0, i32 1
  %62 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %61, align 8
  %63 = icmp eq %"class.absl::container_internal::btree_node"* %62, %48
  br i1 %63, label %64, label %113

64:                                               ; preds = %59
  store %"class.absl::container_internal::btree_node"* %4, %"class.absl::container_internal::btree_node"** %61, align 8
  br label %113

65:                                               ; preds = %42
  %66 = icmp ugt i8 %55, 7
  br i1 %66, label %67, label %80

67:                                               ; preds = %65
  %68 = icmp eq i8 %50, 0
  br i1 %68, label %73, label %69

69:                                               ; preds = %67
  %70 = getelementptr inbounds %"struct.absl::container_internal::btree_iterator.640", %"struct.absl::container_internal::btree_iterator.640"* %1, i64 0, i32 1
  %71 = load i32, i32* %70, align 8
  %72 = icmp sgt i32 %71, 0
  br i1 %72, label %73, label %80

73:                                               ; preds = %69, %67
  %74 = sub nsw i32 %56, %51
  %75 = sdiv i32 %74, 2
  %76 = add nsw i32 %56, -1
  %77 = icmp slt i32 %76, %75
  %78 = select i1 %77, i32 %76, i32 %75
  %79 = bitcast %"class.absl::container_internal::btree"* %0 to %"class.std::__1::allocator"*
  tail call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE23rebalance_right_to_leftEiPSD_PSB_(%"class.absl::container_internal::btree_node"* %4, i32 %78, %"class.absl::container_internal::btree_node"* %48, %"class.std::__1::allocator"* %79)
  br label %113

80:                                               ; preds = %69, %65, %37
  br i1 %9, label %113, label %81

81:                                               ; preds = %80
  %82 = zext i8 %8 to i64
  %83 = add nsw i64 %82, -1
  %84 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %6, i64 256, i32 0
  %85 = bitcast i8* %84 to %"class.absl::container_internal::btree_node"**
  %86 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %85, i64 %83
  %87 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %86, align 8
  %88 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %87, i64 8, i32 0
  %89 = getelementptr inbounds i8, i8* %88, i64 2
  %90 = load i8, i8* %89, align 1
  %91 = icmp ugt i8 %90, 7
  br i1 %91, label %92, label %113

92:                                               ; preds = %81
  %93 = getelementptr inbounds i8, i8* %7, i64 2
  %94 = load i8, i8* %93, align 1
  %95 = icmp eq i8 %94, 0
  br i1 %95, label %101, label %96

96:                                               ; preds = %92
  %97 = getelementptr inbounds %"struct.absl::container_internal::btree_iterator.640", %"struct.absl::container_internal::btree_iterator.640"* %1, i64 0, i32 1
  %98 = load i32, i32* %97, align 8
  %99 = zext i8 %94 to i32
  %100 = icmp slt i32 %98, %99
  br i1 %100, label %101, label %113

101:                                              ; preds = %92, %96
  %102 = phi i32 [ %99, %96 ], [ 0, %92 ]
  %103 = zext i8 %90 to i32
  %104 = sub nsw i32 %103, %102
  %105 = sdiv i32 %104, 2
  %106 = add nsw i32 %103, -1
  %107 = icmp slt i32 %106, %105
  %108 = select i1 %107, i32 %106, i32 %105
  %109 = bitcast %"class.absl::container_internal::btree"* %0 to %"class.std::__1::allocator"*
  tail call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE23rebalance_left_to_rightEiPSD_PSB_(%"class.absl::container_internal::btree_node"* %87, i32 %108, %"class.absl::container_internal::btree_node"* %4, %"class.std::__1::allocator"* %109)
  %110 = getelementptr inbounds %"struct.absl::container_internal::btree_iterator.640", %"struct.absl::container_internal::btree_iterator.640"* %1, i64 0, i32 1
  %111 = load i32, i32* %110, align 8
  %112 = add nsw i32 %111, %108
  store i32 %112, i32* %110, align 8
  br label %113

113:                                              ; preds = %80, %81, %96, %64, %59, %73, %101, %36
  %114 = phi i1 [ false, %101 ], [ true, %36 ], [ false, %80 ], [ true, %64 ], [ true, %59 ], [ false, %73 ], [ false, %96 ], [ false, %81 ]
  ret i1 %114
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE23rebalance_right_to_leftEiPSD_PSB_(%"class.absl::container_internal::btree_node"*, i32, %"class.absl::container_internal::btree_node"*, %"class.std::__1::allocator"*) local_unnamed_addr #1 comdat align 2 {
  %5 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %0, i64 8, i32 0
  %6 = getelementptr inbounds i8, i8* %5, i64 2
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i64
  %9 = load i8, i8* %5, align 1
  %10 = zext i8 %9 to i64
  %11 = bitcast %"class.absl::container_internal::btree_node"* %0 to %"class.absl::container_internal::btree_node"**
  %12 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %11, align 8
  %13 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %0, i64 16, i32 0
  %14 = bitcast i8* %13 to %"class.quic::QuicInterval"*
  %15 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %14, i64 %8
  %16 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %12, i64 16, i32 0
  %17 = bitcast i8* %16 to %"class.quic::QuicInterval"*
  %18 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %17, i64 %10
  %19 = bitcast %"class.quic::QuicInterval"* %15 to i8*
  %20 = bitcast %"class.quic::QuicInterval"* %18 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 16, i1 false) #10
  %21 = add nsw i32 %1, -1
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 16, i32 0
  %24 = bitcast i8* %23 to %"class.quic::QuicInterval"*
  %25 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %24, i64 %22
  %26 = icmp eq i32 %21, 0
  br i1 %26, label %76, label %27

27:                                               ; preds = %4
  %28 = shl nuw nsw i64 %8, 32
  %29 = add nuw nsw i64 %28, 4294967296
  %30 = lshr exact i64 %29, 32
  %31 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %14, i64 %30
  %32 = shl nsw i64 %22, 4
  %33 = add nsw i64 %32, -16
  %34 = lshr exact i64 %33, 4
  %35 = add nuw nsw i64 %34, 1
  %36 = and i64 %35, 3
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %48, label %38

38:                                               ; preds = %27, %38
  %39 = phi %"class.quic::QuicInterval"* [ %45, %38 ], [ %31, %27 ]
  %40 = phi %"class.quic::QuicInterval"* [ %44, %38 ], [ %24, %27 ]
  %41 = phi i64 [ %46, %38 ], [ %36, %27 ]
  %42 = bitcast %"class.quic::QuicInterval"* %39 to i8*
  %43 = bitcast %"class.quic::QuicInterval"* %40 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* align 8 %43, i64 16, i1 false) #10
  %44 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %40, i64 1
  %45 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %39, i64 1
  %46 = add i64 %41, -1
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %38, !llvm.loop !24

48:                                               ; preds = %38, %27
  %49 = phi %"class.quic::QuicInterval"* [ %31, %27 ], [ %45, %38 ]
  %50 = phi %"class.quic::QuicInterval"* [ %24, %27 ], [ %44, %38 ]
  %51 = icmp ult i64 %33, 48
  br i1 %51, label %72, label %52

52:                                               ; preds = %48, %52
  %53 = phi %"class.quic::QuicInterval"* [ %70, %52 ], [ %49, %48 ]
  %54 = phi %"class.quic::QuicInterval"* [ %69, %52 ], [ %50, %48 ]
  %55 = bitcast %"class.quic::QuicInterval"* %53 to i8*
  %56 = bitcast %"class.quic::QuicInterval"* %54 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %55, i8* align 8 %56, i64 16, i1 false) #10
  %57 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %54, i64 1
  %58 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %53, i64 1
  %59 = bitcast %"class.quic::QuicInterval"* %58 to i8*
  %60 = bitcast %"class.quic::QuicInterval"* %57 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %59, i8* align 8 %60, i64 16, i1 false) #10
  %61 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %54, i64 2
  %62 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %53, i64 2
  %63 = bitcast %"class.quic::QuicInterval"* %62 to i8*
  %64 = bitcast %"class.quic::QuicInterval"* %61 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %63, i8* align 8 %64, i64 16, i1 false) #10
  %65 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %54, i64 3
  %66 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %53, i64 3
  %67 = bitcast %"class.quic::QuicInterval"* %66 to i8*
  %68 = bitcast %"class.quic::QuicInterval"* %65 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %67, i8* align 8 %68, i64 16, i1 false) #10
  %69 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %54, i64 4
  %70 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %53, i64 4
  %71 = icmp eq %"class.quic::QuicInterval"* %69, %25
  br i1 %71, label %72, label %52

72:                                               ; preds = %52, %48
  %73 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %11, align 8
  %74 = load i8, i8* %5, align 1
  %75 = zext i8 %74 to i64
  br label %76

76:                                               ; preds = %72, %4
  %77 = phi i64 [ %75, %72 ], [ %10, %4 ]
  %78 = phi %"class.absl::container_internal::btree_node"* [ %73, %72 ], [ %12, %4 ]
  %79 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %78, i64 16, i32 0
  %80 = bitcast i8* %79 to %"class.quic::QuicInterval"*
  %81 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %80, i64 %77
  %82 = bitcast %"class.quic::QuicInterval"* %81 to i8*
  %83 = bitcast %"class.quic::QuicInterval"* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %82, i8* align 8 %83, i64 16, i1 false) #10
  %84 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 8, i32 0
  %85 = getelementptr inbounds i8, i8* %84, i64 2
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = sub nsw i32 %87, %1
  %89 = sext i32 %88 to i64
  %90 = sext i32 %1 to i64
  %91 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %24, i64 %90
  %92 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %91, i64 %89
  %93 = icmp eq i32 %88, 0
  br i1 %93, label %138, label %94

94:                                               ; preds = %76
  %95 = zext i8 %86 to i64
  %96 = shl nuw nsw i64 %95, 4
  %97 = add nsw i64 %96, -16
  %98 = shl nsw i64 %90, 4
  %99 = sub nsw i64 %97, %98
  %100 = lshr exact i64 %99, 4
  %101 = add nuw nsw i64 %100, 1
  %102 = and i64 %101, 3
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %114, label %104

104:                                              ; preds = %94, %104
  %105 = phi %"class.quic::QuicInterval"* [ %111, %104 ], [ %24, %94 ]
  %106 = phi %"class.quic::QuicInterval"* [ %110, %104 ], [ %91, %94 ]
  %107 = phi i64 [ %112, %104 ], [ %102, %94 ]
  %108 = bitcast %"class.quic::QuicInterval"* %105 to i8*
  %109 = bitcast %"class.quic::QuicInterval"* %106 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %108, i8* align 8 %109, i64 16, i1 false) #10
  %110 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %106, i64 1
  %111 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %105, i64 1
  %112 = add i64 %107, -1
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %104, !llvm.loop !25

114:                                              ; preds = %104, %94
  %115 = phi %"class.quic::QuicInterval"* [ %24, %94 ], [ %111, %104 ]
  %116 = phi %"class.quic::QuicInterval"* [ %91, %94 ], [ %110, %104 ]
  %117 = icmp ult i64 %99, 48
  br i1 %117, label %138, label %118

118:                                              ; preds = %114, %118
  %119 = phi %"class.quic::QuicInterval"* [ %136, %118 ], [ %115, %114 ]
  %120 = phi %"class.quic::QuicInterval"* [ %135, %118 ], [ %116, %114 ]
  %121 = bitcast %"class.quic::QuicInterval"* %119 to i8*
  %122 = bitcast %"class.quic::QuicInterval"* %120 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %121, i8* align 8 %122, i64 16, i1 false) #10
  %123 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %120, i64 1
  %124 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %119, i64 1
  %125 = bitcast %"class.quic::QuicInterval"* %124 to i8*
  %126 = bitcast %"class.quic::QuicInterval"* %123 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %125, i8* align 8 %126, i64 16, i1 false) #10
  %127 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %120, i64 2
  %128 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %119, i64 2
  %129 = bitcast %"class.quic::QuicInterval"* %128 to i8*
  %130 = bitcast %"class.quic::QuicInterval"* %127 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %129, i8* align 8 %130, i64 16, i1 false) #10
  %131 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %120, i64 3
  %132 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %119, i64 3
  %133 = bitcast %"class.quic::QuicInterval"* %132 to i8*
  %134 = bitcast %"class.quic::QuicInterval"* %131 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %133, i8* align 8 %134, i64 16, i1 false) #10
  %135 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %120, i64 4
  %136 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %119, i64 4
  %137 = icmp eq %"class.quic::QuicInterval"* %135, %92
  br i1 %137, label %138, label %118

138:                                              ; preds = %114, %118, %76
  %139 = getelementptr inbounds i8, i8* %5, i64 3
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 0
  br i1 %141, label %142, label %221

142:                                              ; preds = %138
  %143 = icmp sgt i32 %1, 0
  br i1 %143, label %144, label %170

144:                                              ; preds = %142
  %145 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 256, i32 0
  %146 = bitcast i8* %145 to %"class.absl::container_internal::btree_node"**
  %147 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %0, i64 256, i32 0
  %148 = bitcast i8* %147 to %"class.absl::container_internal::btree_node"**
  %149 = zext i32 %1 to i64
  %150 = and i64 %149, 1
  %151 = icmp eq i32 %1, 1
  br i1 %151, label %154, label %152

152:                                              ; preds = %144
  %153 = sub nsw i64 %149, %150
  br label %177

154:                                              ; preds = %177, %144
  %155 = phi i64 [ 0, %144 ], [ %194, %177 ]
  %156 = icmp eq i64 %150, 0
  br i1 %156, label %170, label %157

157:                                              ; preds = %154
  %158 = load i8, i8* %6, align 1
  %159 = zext i8 %158 to i32
  %160 = trunc i64 %155 to i32
  %161 = add i32 %160, 1
  %162 = add i32 %161, %159
  %163 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %146, i64 %155
  %164 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %163, align 8
  %165 = zext i32 %162 to i64
  %166 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %148, i64 %165
  store %"class.absl::container_internal::btree_node"* %164, %"class.absl::container_internal::btree_node"** %166, align 8
  %167 = trunc i32 %162 to i8
  %168 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %164, i64 8, i32 0
  store i8 %167, i8* %168, align 1
  %169 = bitcast %"class.absl::container_internal::btree_node"* %164 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %0, %"class.absl::container_internal::btree_node"** %169, align 8
  br label %170

170:                                              ; preds = %157, %154, %142
  %171 = load i8, i8* %85, align 1
  %172 = zext i8 %171 to i32
  %173 = icmp slt i32 %172, %1
  br i1 %173, label %221, label %174

174:                                              ; preds = %170
  %175 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 256, i32 0
  %176 = bitcast i8* %175 to %"class.absl::container_internal::btree_node"**
  br label %206

177:                                              ; preds = %177, %152
  %178 = phi i64 [ 0, %152 ], [ %194, %177 ]
  %179 = phi i64 [ %153, %152 ], [ %204, %177 ]
  %180 = load i8, i8* %6, align 1
  %181 = zext i8 %180 to i32
  %182 = or i64 %178, 1
  %183 = trunc i64 %182 to i32
  %184 = add i32 %183, %181
  %185 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %146, i64 %178
  %186 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %185, align 8
  %187 = zext i32 %184 to i64
  %188 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %148, i64 %187
  store %"class.absl::container_internal::btree_node"* %186, %"class.absl::container_internal::btree_node"** %188, align 8
  %189 = trunc i32 %184 to i8
  %190 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %186, i64 8, i32 0
  store i8 %189, i8* %190, align 1
  %191 = bitcast %"class.absl::container_internal::btree_node"* %186 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %0, %"class.absl::container_internal::btree_node"** %191, align 8
  %192 = load i8, i8* %6, align 1
  %193 = zext i8 %192 to i32
  %194 = add nuw nsw i64 %178, 2
  %195 = trunc i64 %194 to i32
  %196 = add i32 %195, %193
  %197 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %146, i64 %182
  %198 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %197, align 8
  %199 = zext i32 %196 to i64
  %200 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %148, i64 %199
  store %"class.absl::container_internal::btree_node"* %198, %"class.absl::container_internal::btree_node"** %200, align 8
  %201 = trunc i32 %196 to i8
  %202 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %198, i64 8, i32 0
  store i8 %201, i8* %202, align 1
  %203 = bitcast %"class.absl::container_internal::btree_node"* %198 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %0, %"class.absl::container_internal::btree_node"** %203, align 8
  %204 = add i64 %179, -2
  %205 = icmp eq i64 %204, 0
  br i1 %205, label %154, label %177

206:                                              ; preds = %206, %174
  %207 = phi i64 [ %215, %206 ], [ 0, %174 ]
  %208 = add nsw i64 %207, %90
  %209 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %176, i64 %208
  %210 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %209, align 8
  %211 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %176, i64 %207
  store %"class.absl::container_internal::btree_node"* %210, %"class.absl::container_internal::btree_node"** %211, align 8
  %212 = trunc i64 %207 to i8
  %213 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %210, i64 8, i32 0
  store i8 %212, i8* %213, align 1
  %214 = bitcast %"class.absl::container_internal::btree_node"* %210 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %2, %"class.absl::container_internal::btree_node"** %214, align 8
  %215 = add nuw nsw i64 %207, 1
  %216 = load i8, i8* %85, align 1
  %217 = zext i8 %216 to i32
  %218 = sub nsw i32 %217, %1
  %219 = sext i32 %218 to i64
  %220 = icmp slt i64 %207, %219
  br i1 %220, label %206, label %221

221:                                              ; preds = %206, %170, %138
  %222 = load i8, i8* %6, align 1
  %223 = trunc i32 %1 to i8
  %224 = add i8 %222, %223
  store i8 %224, i8* %6, align 1
  %225 = load i8, i8* %85, align 1
  %226 = sub i8 %225, %223
  store i8 %226, i8* %85, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE23rebalance_left_to_rightEiPSD_PSB_(%"class.absl::container_internal::btree_node"*, i32, %"class.absl::container_internal::btree_node"*, %"class.std::__1::allocator"*) local_unnamed_addr #1 comdat align 2 {
  %5 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 8, i32 0
  %6 = getelementptr inbounds i8, i8* %5, i64 2
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i64
  %9 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 16, i32 0
  %10 = bitcast i8* %9 to %"class.quic::QuicInterval"*
  %11 = shl nuw nsw i64 %8, 32
  %12 = add nsw i64 %11, -4294967296
  %13 = ashr exact i64 %12, 32
  %14 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %10, i64 %13
  %15 = sub nsw i64 0, %8
  %16 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %14, i64 %15
  %17 = icmp eq i8 %7, 0
  br i1 %17, label %65, label %18

18:                                               ; preds = %4
  %19 = zext i32 %1 to i64
  %20 = add nuw nsw i64 %8, %19
  %21 = shl i64 %20, 32
  %22 = add i64 %21, -4294967296
  %23 = ashr exact i64 %22, 32
  %24 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %10, i64 %23
  %25 = shl nuw nsw i64 %8, 4
  %26 = add nsw i64 %25, -16
  %27 = lshr exact i64 %26, 4
  %28 = add nuw nsw i64 %27, 1
  %29 = and i64 %28, 3
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %41, label %31

31:                                               ; preds = %18, %31
  %32 = phi %"class.quic::QuicInterval"* [ %38, %31 ], [ %24, %18 ]
  %33 = phi %"class.quic::QuicInterval"* [ %37, %31 ], [ %14, %18 ]
  %34 = phi i64 [ %39, %31 ], [ %29, %18 ]
  %35 = bitcast %"class.quic::QuicInterval"* %32 to i8*
  %36 = bitcast %"class.quic::QuicInterval"* %33 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 16, i1 false) #10
  %37 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %33, i64 -1
  %38 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %32, i64 -1
  %39 = add i64 %34, -1
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %31, !llvm.loop !26

41:                                               ; preds = %31, %18
  %42 = phi %"class.quic::QuicInterval"* [ %24, %18 ], [ %38, %31 ]
  %43 = phi %"class.quic::QuicInterval"* [ %14, %18 ], [ %37, %31 ]
  %44 = icmp ult i64 %26, 48
  br i1 %44, label %65, label %45

45:                                               ; preds = %41, %45
  %46 = phi %"class.quic::QuicInterval"* [ %63, %45 ], [ %42, %41 ]
  %47 = phi %"class.quic::QuicInterval"* [ %62, %45 ], [ %43, %41 ]
  %48 = bitcast %"class.quic::QuicInterval"* %46 to i8*
  %49 = bitcast %"class.quic::QuicInterval"* %47 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* align 8 %49, i64 16, i1 false) #10
  %50 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %47, i64 -1
  %51 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %46, i64 -1
  %52 = bitcast %"class.quic::QuicInterval"* %51 to i8*
  %53 = bitcast %"class.quic::QuicInterval"* %50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 16, i1 false) #10
  %54 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %47, i64 -2
  %55 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %46, i64 -2
  %56 = bitcast %"class.quic::QuicInterval"* %55 to i8*
  %57 = bitcast %"class.quic::QuicInterval"* %54 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* align 8 %57, i64 16, i1 false) #10
  %58 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %47, i64 -3
  %59 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %46, i64 -3
  %60 = bitcast %"class.quic::QuicInterval"* %59 to i8*
  %61 = bitcast %"class.quic::QuicInterval"* %58 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %60, i8* align 8 %61, i64 16, i1 false) #10
  %62 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %47, i64 -4
  %63 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %46, i64 -4
  %64 = icmp eq %"class.quic::QuicInterval"* %62, %16
  br i1 %64, label %65, label %45

65:                                               ; preds = %41, %45, %4
  %66 = add nsw i32 %1, -1
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %0, i64 8, i32 0
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i64
  %71 = bitcast %"class.absl::container_internal::btree_node"* %0 to %"class.absl::container_internal::btree_node"**
  %72 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %71, align 8
  %73 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %10, i64 %67
  %74 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %72, i64 16, i32 0
  %75 = bitcast i8* %74 to %"class.quic::QuicInterval"*
  %76 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %75, i64 %70
  %77 = bitcast %"class.quic::QuicInterval"* %73 to i8*
  %78 = bitcast %"class.quic::QuicInterval"* %76 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %77, i8* align 8 %78, i64 16, i1 false) #10
  %79 = getelementptr inbounds i8, i8* %68, i64 2
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = sub nsw i32 %81, %66
  %83 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %0, i64 16, i32 0
  %84 = bitcast i8* %83 to %"class.quic::QuicInterval"*
  %85 = sext i32 %82 to i64
  %86 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %84, i64 %85
  %87 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %86, i64 %67
  %88 = icmp eq i32 %66, 0
  br i1 %88, label %133, label %89

89:                                               ; preds = %65
  %90 = shl nsw i64 %67, 4
  %91 = add nsw i64 %90, -16
  %92 = lshr exact i64 %91, 4
  %93 = add nuw nsw i64 %92, 1
  %94 = and i64 %93, 3
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %106, label %96

96:                                               ; preds = %89, %96
  %97 = phi %"class.quic::QuicInterval"* [ %103, %96 ], [ %10, %89 ]
  %98 = phi %"class.quic::QuicInterval"* [ %102, %96 ], [ %86, %89 ]
  %99 = phi i64 [ %104, %96 ], [ %94, %89 ]
  %100 = bitcast %"class.quic::QuicInterval"* %97 to i8*
  %101 = bitcast %"class.quic::QuicInterval"* %98 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %100, i8* align 8 %101, i64 16, i1 false) #10
  %102 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %98, i64 1
  %103 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %97, i64 1
  %104 = add i64 %99, -1
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %106, label %96, !llvm.loop !27

106:                                              ; preds = %96, %89
  %107 = phi %"class.quic::QuicInterval"* [ %10, %89 ], [ %103, %96 ]
  %108 = phi %"class.quic::QuicInterval"* [ %86, %89 ], [ %102, %96 ]
  %109 = icmp ult i64 %91, 48
  br i1 %109, label %130, label %110

110:                                              ; preds = %106, %110
  %111 = phi %"class.quic::QuicInterval"* [ %128, %110 ], [ %107, %106 ]
  %112 = phi %"class.quic::QuicInterval"* [ %127, %110 ], [ %108, %106 ]
  %113 = bitcast %"class.quic::QuicInterval"* %111 to i8*
  %114 = bitcast %"class.quic::QuicInterval"* %112 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %113, i8* align 8 %114, i64 16, i1 false) #10
  %115 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %112, i64 1
  %116 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %111, i64 1
  %117 = bitcast %"class.quic::QuicInterval"* %116 to i8*
  %118 = bitcast %"class.quic::QuicInterval"* %115 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %117, i8* align 8 %118, i64 16, i1 false) #10
  %119 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %112, i64 2
  %120 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %111, i64 2
  %121 = bitcast %"class.quic::QuicInterval"* %120 to i8*
  %122 = bitcast %"class.quic::QuicInterval"* %119 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %121, i8* align 8 %122, i64 16, i1 false) #10
  %123 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %112, i64 3
  %124 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %111, i64 3
  %125 = bitcast %"class.quic::QuicInterval"* %124 to i8*
  %126 = bitcast %"class.quic::QuicInterval"* %123 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %125, i8* align 8 %126, i64 16, i1 false) #10
  %127 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %112, i64 4
  %128 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %111, i64 4
  %129 = icmp eq %"class.quic::QuicInterval"* %127, %87
  br i1 %129, label %130, label %110

130:                                              ; preds = %110, %106
  %131 = load i8, i8* %79, align 1
  %132 = zext i8 %131 to i32
  br label %133

133:                                              ; preds = %130, %65
  %134 = phi i32 [ %132, %130 ], [ %81, %65 ]
  %135 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %71, align 8
  %136 = load i8, i8* %68, align 1
  %137 = zext i8 %136 to i64
  %138 = sub nsw i32 %134, %1
  %139 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %135, i64 16, i32 0
  %140 = bitcast i8* %139 to %"class.quic::QuicInterval"*
  %141 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %140, i64 %137
  %142 = sext i32 %138 to i64
  %143 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %84, i64 %142
  %144 = bitcast %"class.quic::QuicInterval"* %141 to i8*
  %145 = bitcast %"class.quic::QuicInterval"* %143 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %144, i8* align 8 %145, i64 16, i1 false) #10
  %146 = getelementptr inbounds i8, i8* %68, i64 3
  %147 = load i8, i8* %146, align 1
  %148 = icmp eq i8 %147, 0
  br i1 %148, label %149, label %247

149:                                              ; preds = %133
  %150 = load i8, i8* %6, align 1
  %151 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 256, i32 0
  %152 = bitcast i8* %151 to %"class.absl::container_internal::btree_node"**
  %153 = zext i8 %150 to i64
  %154 = sext i32 %1 to i64
  %155 = and i64 %153, 1
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %157, label %166

157:                                              ; preds = %149
  %158 = add nsw i64 %153, %154
  %159 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %152, i64 %153
  %160 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %159, align 8
  %161 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %152, i64 %158
  store %"class.absl::container_internal::btree_node"* %160, %"class.absl::container_internal::btree_node"** %161, align 8
  %162 = trunc i64 %158 to i8
  %163 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %160, i64 8, i32 0
  store i8 %162, i8* %163, align 1
  %164 = bitcast %"class.absl::container_internal::btree_node"* %160 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %2, %"class.absl::container_internal::btree_node"** %164, align 8
  %165 = add nsw i64 %153, -1
  br label %166

166:                                              ; preds = %157, %149
  %167 = phi i64 [ %153, %149 ], [ %165, %157 ]
  %168 = icmp eq i8 %150, 0
  br i1 %168, label %169, label %179

169:                                              ; preds = %179, %166
  %170 = icmp slt i32 %1, 1
  br i1 %170, label %247, label %171

171:                                              ; preds = %169
  %172 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %0, i64 256, i32 0
  %173 = bitcast i8* %172 to %"class.absl::container_internal::btree_node"**
  %174 = zext i32 %1 to i64
  %175 = and i64 %174, 1
  %176 = icmp eq i32 %1, 1
  br i1 %176, label %230, label %177

177:                                              ; preds = %171
  %178 = sub nsw i64 %174, %175
  br label %198

179:                                              ; preds = %166, %179
  %180 = phi i64 [ %196, %179 ], [ %167, %166 ]
  %181 = add nsw i64 %180, %154
  %182 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %152, i64 %180
  %183 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %182, align 8
  %184 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %152, i64 %181
  store %"class.absl::container_internal::btree_node"* %183, %"class.absl::container_internal::btree_node"** %184, align 8
  %185 = trunc i64 %181 to i8
  %186 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %183, i64 8, i32 0
  store i8 %185, i8* %186, align 1
  %187 = bitcast %"class.absl::container_internal::btree_node"* %183 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %2, %"class.absl::container_internal::btree_node"** %187, align 8
  %188 = add nsw i64 %180, -1
  %189 = add nsw i64 %188, %154
  %190 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %152, i64 %188
  %191 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %190, align 8
  %192 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %152, i64 %189
  store %"class.absl::container_internal::btree_node"* %191, %"class.absl::container_internal::btree_node"** %192, align 8
  %193 = trunc i64 %189 to i8
  %194 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %191, i64 8, i32 0
  store i8 %193, i8* %194, align 1
  %195 = bitcast %"class.absl::container_internal::btree_node"* %191 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %2, %"class.absl::container_internal::btree_node"** %195, align 8
  %196 = add nsw i64 %180, -2
  %197 = icmp slt i64 %180, 2
  br i1 %197, label %169, label %179

198:                                              ; preds = %198, %177
  %199 = phi i64 [ 1, %177 ], [ %227, %198 ]
  %200 = phi i64 [ %178, %177 ], [ %228, %198 ]
  %201 = add nsw i64 %199, -1
  %202 = load i8, i8* %79, align 1
  %203 = zext i8 %202 to i32
  %204 = trunc i64 %199 to i32
  %205 = sub i32 %204, %1
  %206 = add i32 %205, %203
  %207 = sext i32 %206 to i64
  %208 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %173, i64 %207
  %209 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %208, align 8
  %210 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %152, i64 %201
  store %"class.absl::container_internal::btree_node"* %209, %"class.absl::container_internal::btree_node"** %210, align 8
  %211 = trunc i64 %201 to i8
  %212 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %209, i64 8, i32 0
  store i8 %211, i8* %212, align 1
  %213 = bitcast %"class.absl::container_internal::btree_node"* %209 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %2, %"class.absl::container_internal::btree_node"** %213, align 8
  %214 = load i8, i8* %79, align 1
  %215 = zext i8 %214 to i32
  %216 = trunc i64 %199 to i32
  %217 = add i32 %216, 1
  %218 = sub i32 %217, %1
  %219 = add i32 %218, %215
  %220 = sext i32 %219 to i64
  %221 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %173, i64 %220
  %222 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %221, align 8
  %223 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %152, i64 %199
  store %"class.absl::container_internal::btree_node"* %222, %"class.absl::container_internal::btree_node"** %223, align 8
  %224 = trunc i64 %199 to i8
  %225 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %222, i64 8, i32 0
  store i8 %224, i8* %225, align 1
  %226 = bitcast %"class.absl::container_internal::btree_node"* %222 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %2, %"class.absl::container_internal::btree_node"** %226, align 8
  %227 = add nuw nsw i64 %199, 2
  %228 = add i64 %200, -2
  %229 = icmp eq i64 %228, 0
  br i1 %229, label %230, label %198

230:                                              ; preds = %198, %171
  %231 = phi i64 [ 1, %171 ], [ %227, %198 ]
  %232 = icmp eq i64 %175, 0
  br i1 %232, label %247, label %233

233:                                              ; preds = %230
  %234 = add nsw i64 %231, -1
  %235 = load i8, i8* %79, align 1
  %236 = zext i8 %235 to i32
  %237 = trunc i64 %231 to i32
  %238 = sub i32 %237, %1
  %239 = add i32 %238, %236
  %240 = sext i32 %239 to i64
  %241 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %173, i64 %240
  %242 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %241, align 8
  %243 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %152, i64 %234
  store %"class.absl::container_internal::btree_node"* %242, %"class.absl::container_internal::btree_node"** %243, align 8
  %244 = trunc i64 %234 to i8
  %245 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %242, i64 8, i32 0
  store i8 %244, i8* %245, align 1
  %246 = bitcast %"class.absl::container_internal::btree_node"* %242 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %2, %"class.absl::container_internal::btree_node"** %246, align 8
  br label %247

247:                                              ; preds = %233, %230, %169, %133
  %248 = load i8, i8* %79, align 1
  %249 = trunc i32 %1 to i8
  %250 = sub i8 %248, %249
  store i8 %250, i8* %79, align 1
  %251 = load i8, i8* %6, align 1
  %252 = add i8 %251, %249
  store i8 %252, i8* %6, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE5mergeEPSD_PSB_(%"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"*, %"class.std::__1::allocator"*) local_unnamed_addr #1 comdat align 2 {
  %4 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %0, i64 8, i32 0
  %5 = getelementptr inbounds i8, i8* %4, i64 2
  %6 = load i8, i8* %5, align 1
  %7 = bitcast %"class.absl::container_internal::btree_node"* %0 to %"class.absl::container_internal::btree_node"**
  %8 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %7, align 8
  %9 = load i8, i8* %4, align 1
  %10 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %8, i64 16, i32 0
  %11 = bitcast i8* %10 to %"class.quic::QuicInterval"*
  %12 = zext i8 %9 to i64
  %13 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %11, i64 %12
  %14 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %0, i64 16, i32 0
  %15 = bitcast i8* %14 to %"class.quic::QuicInterval"*
  %16 = zext i8 %6 to i64
  %17 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %15, i64 %16
  %18 = bitcast %"class.quic::QuicInterval"* %13 to i8*
  %19 = bitcast %"class.quic::QuicInterval"* %17 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %18, i64 16, i1 false) #10
  %20 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %1, i64 8, i32 0
  %21 = getelementptr inbounds i8, i8* %20, i64 2
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i64
  %24 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %1, i64 16, i32 0
  %25 = bitcast i8* %24 to %"class.quic::QuicInterval"*
  %26 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %25, i64 %23
  %27 = icmp eq i8 %22, 0
  br i1 %27, label %73, label %28

28:                                               ; preds = %3
  %29 = shl nuw nsw i64 %16, 32
  %30 = add nuw nsw i64 %29, 4294967296
  %31 = lshr exact i64 %30, 32
  %32 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %15, i64 %31
  %33 = shl nuw nsw i64 %23, 4
  %34 = add nsw i64 %33, -16
  %35 = lshr exact i64 %34, 4
  %36 = add nuw nsw i64 %35, 1
  %37 = and i64 %36, 3
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %49, label %39

39:                                               ; preds = %28, %39
  %40 = phi %"class.quic::QuicInterval"* [ %46, %39 ], [ %32, %28 ]
  %41 = phi %"class.quic::QuicInterval"* [ %45, %39 ], [ %25, %28 ]
  %42 = phi i64 [ %47, %39 ], [ %37, %28 ]
  %43 = bitcast %"class.quic::QuicInterval"* %40 to i8*
  %44 = bitcast %"class.quic::QuicInterval"* %41 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %43, i8* align 8 %44, i64 16, i1 false) #10
  %45 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %41, i64 1
  %46 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %40, i64 1
  %47 = add i64 %42, -1
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %49, label %39, !llvm.loop !28

49:                                               ; preds = %39, %28
  %50 = phi %"class.quic::QuicInterval"* [ %32, %28 ], [ %46, %39 ]
  %51 = phi %"class.quic::QuicInterval"* [ %25, %28 ], [ %45, %39 ]
  %52 = icmp ult i64 %34, 48
  br i1 %52, label %73, label %53

53:                                               ; preds = %49, %53
  %54 = phi %"class.quic::QuicInterval"* [ %71, %53 ], [ %50, %49 ]
  %55 = phi %"class.quic::QuicInterval"* [ %70, %53 ], [ %51, %49 ]
  %56 = bitcast %"class.quic::QuicInterval"* %54 to i8*
  %57 = bitcast %"class.quic::QuicInterval"* %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* align 8 %57, i64 16, i1 false) #10
  %58 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %55, i64 1
  %59 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %54, i64 1
  %60 = bitcast %"class.quic::QuicInterval"* %59 to i8*
  %61 = bitcast %"class.quic::QuicInterval"* %58 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %60, i8* align 8 %61, i64 16, i1 false) #10
  %62 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %55, i64 2
  %63 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %54, i64 2
  %64 = bitcast %"class.quic::QuicInterval"* %63 to i8*
  %65 = bitcast %"class.quic::QuicInterval"* %62 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %64, i8* align 8 %65, i64 16, i1 false) #10
  %66 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %55, i64 3
  %67 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %54, i64 3
  %68 = bitcast %"class.quic::QuicInterval"* %67 to i8*
  %69 = bitcast %"class.quic::QuicInterval"* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %68, i8* align 8 %69, i64 16, i1 false) #10
  %70 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %55, i64 4
  %71 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %54, i64 4
  %72 = icmp eq %"class.quic::QuicInterval"* %70, %26
  br i1 %72, label %73, label %53

73:                                               ; preds = %49, %53, %3
  %74 = getelementptr inbounds i8, i8* %4, i64 3
  %75 = load i8, i8* %74, align 1
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %79, label %77

77:                                               ; preds = %73
  %78 = load i8, i8* %21, align 1
  br label %100

79:                                               ; preds = %73
  %80 = load i8, i8* %5, align 1
  %81 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %1, i64 256, i32 0
  %82 = bitcast i8* %81 to %"class.absl::container_internal::btree_node"**
  %83 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %0, i64 256, i32 0
  %84 = bitcast i8* %83 to %"class.absl::container_internal::btree_node"**
  %85 = zext i8 %80 to i64
  br label %86

86:                                               ; preds = %86, %79
  %87 = phi i64 [ %96, %86 ], [ 0, %79 ]
  %88 = phi i64 [ %89, %86 ], [ %85, %79 ]
  %89 = add nuw nsw i64 %88, 1
  %90 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %82, i64 %87
  %91 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %90, align 8
  %92 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %84, i64 %89
  store %"class.absl::container_internal::btree_node"* %91, %"class.absl::container_internal::btree_node"** %92, align 8
  %93 = trunc i64 %89 to i8
  %94 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %91, i64 8, i32 0
  store i8 %93, i8* %94, align 1
  %95 = bitcast %"class.absl::container_internal::btree_node"* %91 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %0, %"class.absl::container_internal::btree_node"** %95, align 8
  %96 = add nuw nsw i64 %87, 1
  %97 = load i8, i8* %21, align 1
  %98 = zext i8 %97 to i64
  %99 = icmp ult i64 %87, %98
  br i1 %99, label %86, label %100

100:                                              ; preds = %86, %77
  %101 = phi i8 [ %78, %77 ], [ %97, %86 ]
  %102 = load i8, i8* %5, align 1
  %103 = add i8 %102, 1
  %104 = add i8 %103, %101
  store i8 %104, i8* %5, align 1
  store i8 0, i8* %21, align 1
  %105 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %7, align 8
  %106 = load i8, i8* %4, align 1
  %107 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %105, i64 8, i32 0
  %108 = getelementptr inbounds i8, i8* %107, i64 2
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %106 to i32
  %111 = add nuw nsw i32 %110, 1
  %112 = zext i8 %109 to i32
  %113 = and i32 %111, 255
  %114 = sub nsw i32 %112, %113
  %115 = sext i32 %114 to i64
  %116 = zext i32 %113 to i64
  %117 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %105, i64 16, i32 0
  %118 = bitcast i8* %117 to %"class.quic::QuicInterval"*
  %119 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %118, i64 %116
  %120 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %119, i64 %115
  %121 = icmp eq i32 %114, 0
  br i1 %121, label %169, label %122

122:                                              ; preds = %100
  %123 = zext i8 %106 to i64
  %124 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %118, i64 %123
  %125 = zext i8 %109 to i64
  %126 = shl nuw nsw i64 %125, 4
  %127 = add nsw i64 %126, -16
  %128 = shl nuw nsw i32 %113, 4
  %129 = zext i32 %128 to i64
  %130 = sub nsw i64 %127, %129
  %131 = lshr exact i64 %130, 4
  %132 = add nuw nsw i64 %131, 1
  %133 = and i64 %132, 3
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %145, label %135

135:                                              ; preds = %122, %135
  %136 = phi %"class.quic::QuicInterval"* [ %142, %135 ], [ %124, %122 ]
  %137 = phi %"class.quic::QuicInterval"* [ %141, %135 ], [ %119, %122 ]
  %138 = phi i64 [ %143, %135 ], [ %133, %122 ]
  %139 = bitcast %"class.quic::QuicInterval"* %136 to i8*
  %140 = bitcast %"class.quic::QuicInterval"* %137 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %139, i8* align 8 %140, i64 16, i1 false) #10
  %141 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %137, i64 1
  %142 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %136, i64 1
  %143 = add i64 %138, -1
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %145, label %135, !llvm.loop !29

145:                                              ; preds = %135, %122
  %146 = phi %"class.quic::QuicInterval"* [ %124, %122 ], [ %142, %135 ]
  %147 = phi %"class.quic::QuicInterval"* [ %119, %122 ], [ %141, %135 ]
  %148 = icmp ult i64 %130, 48
  br i1 %148, label %169, label %149

149:                                              ; preds = %145, %149
  %150 = phi %"class.quic::QuicInterval"* [ %167, %149 ], [ %146, %145 ]
  %151 = phi %"class.quic::QuicInterval"* [ %166, %149 ], [ %147, %145 ]
  %152 = bitcast %"class.quic::QuicInterval"* %150 to i8*
  %153 = bitcast %"class.quic::QuicInterval"* %151 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %152, i8* align 8 %153, i64 16, i1 false) #10
  %154 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %151, i64 1
  %155 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %150, i64 1
  %156 = bitcast %"class.quic::QuicInterval"* %155 to i8*
  %157 = bitcast %"class.quic::QuicInterval"* %154 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %156, i8* align 8 %157, i64 16, i1 false) #10
  %158 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %151, i64 2
  %159 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %150, i64 2
  %160 = bitcast %"class.quic::QuicInterval"* %159 to i8*
  %161 = bitcast %"class.quic::QuicInterval"* %158 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %160, i8* align 8 %161, i64 16, i1 false) #10
  %162 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %151, i64 3
  %163 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %150, i64 3
  %164 = bitcast %"class.quic::QuicInterval"* %163 to i8*
  %165 = bitcast %"class.quic::QuicInterval"* %162 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %164, i8* align 8 %165, i64 16, i1 false) #10
  %166 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %151, i64 4
  %167 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %150, i64 4
  %168 = icmp eq %"class.quic::QuicInterval"* %166, %120
  br i1 %168, label %169, label %149

169:                                              ; preds = %145, %149, %100
  %170 = getelementptr inbounds i8, i8* %107, i64 3
  %171 = load i8, i8* %170, align 1
  %172 = icmp eq i8 %171, 0
  br i1 %172, label %173, label %231

173:                                              ; preds = %169
  %174 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %105, i64 256, i32 0
  %175 = bitcast i8* %174 to %"class.absl::container_internal::btree_node"**
  %176 = zext i8 %106 to i64
  %177 = add nuw nsw i64 %176, 1
  %178 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %175, i64 %177
  %179 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %178, align 8
  tail call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16clear_and_deleteEPSD_PSB_(%"class.absl::container_internal::btree_node"* %179, %"class.std::__1::allocator"* %2) #10
  %180 = icmp ult i32 %111, %112
  br i1 %180, label %181, label %231

181:                                              ; preds = %173
  %182 = zext i32 %111 to i64
  %183 = zext i8 %109 to i64
  %184 = add nsw i64 %182, -1
  %185 = sub nsw i64 %183, %182
  %186 = add nsw i64 %183, -2
  %187 = sub nsw i64 %186, %184
  %188 = and i64 %185, 3
  %189 = icmp eq i64 %188, 0
  br i1 %189, label %201, label %190

190:                                              ; preds = %181, %190
  %191 = phi i64 [ %193, %190 ], [ %182, %181 ]
  %192 = phi i64 [ %199, %190 ], [ %188, %181 ]
  %193 = add nuw nsw i64 %191, 1
  %194 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %175, i64 %193
  %195 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %194, align 8
  %196 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %175, i64 %191
  store %"class.absl::container_internal::btree_node"* %195, %"class.absl::container_internal::btree_node"** %196, align 8
  %197 = trunc i64 %191 to i8
  %198 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %195, i64 8, i32 0
  store i8 %197, i8* %198, align 1
  %199 = add i64 %192, -1
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %201, label %190, !llvm.loop !30

201:                                              ; preds = %190, %181
  %202 = phi i64 [ %182, %181 ], [ %193, %190 ]
  %203 = icmp ult i64 %187, 3
  br i1 %203, label %231, label %204

204:                                              ; preds = %201, %204
  %205 = phi i64 [ %224, %204 ], [ %202, %201 ]
  %206 = add nuw nsw i64 %205, 1
  %207 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %175, i64 %206
  %208 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %207, align 8
  %209 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %175, i64 %205
  store %"class.absl::container_internal::btree_node"* %208, %"class.absl::container_internal::btree_node"** %209, align 8
  %210 = trunc i64 %205 to i8
  %211 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %208, i64 8, i32 0
  store i8 %210, i8* %211, align 1
  %212 = add nuw nsw i64 %205, 2
  %213 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %175, i64 %212
  %214 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %213, align 8
  %215 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %175, i64 %206
  store %"class.absl::container_internal::btree_node"* %214, %"class.absl::container_internal::btree_node"** %215, align 8
  %216 = trunc i64 %206 to i8
  %217 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %214, i64 8, i32 0
  store i8 %216, i8* %217, align 1
  %218 = add nuw nsw i64 %205, 3
  %219 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %175, i64 %218
  %220 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %219, align 8
  %221 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %175, i64 %212
  store %"class.absl::container_internal::btree_node"* %220, %"class.absl::container_internal::btree_node"** %221, align 8
  %222 = trunc i64 %212 to i8
  %223 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %220, i64 8, i32 0
  store i8 %222, i8* %223, align 1
  %224 = add nuw nsw i64 %205, 4
  %225 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %175, i64 %224
  %226 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %225, align 8
  %227 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %175, i64 %218
  store %"class.absl::container_internal::btree_node"* %226, %"class.absl::container_internal::btree_node"** %227, align 8
  %228 = trunc i64 %218 to i8
  %229 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %226, i64 8, i32 0
  store i8 %228, i8* %229, align 1
  %230 = icmp eq i64 %224, %183
  br i1 %230, label %231, label %204

231:                                              ; preds = %201, %204, %169, %173
  %232 = add i8 %109, -1
  store i8 %232, i8* %108, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE13insert_uniqueIS5_JRKS5_EEENS9_4pairINS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EEbEERKT_DpOT0_(%"struct.std::__1::pair.642"* noalias sret, %"class.absl::container_internal::btree"*, %"class.quic::QuicInterval"* dereferenceable(16), %"class.quic::QuicInterval"* dereferenceable(16)) local_unnamed_addr #1 comdat align 2 {
  %5 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %1, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %8, label %18

8:                                                ; preds = %4
  %9 = tail call i8* @_Znwm(i64 32) #11
  %10 = bitcast i8* %9 to i8**
  store i8* %9, i8** %10, align 8
  %11 = getelementptr inbounds i8, i8* %9, i64 8
  store i8 0, i8* %11, align 1
  %12 = getelementptr inbounds i8, i8* %9, i64 9
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds i8, i8* %9, i64 10
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds i8, i8* %9, i64 11
  store i8 1, i8* %14, align 1
  %15 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %1, i64 0, i32 1
  %16 = bitcast %"class.absl::container_internal::btree_node"** %15 to i8**
  store i8* %9, i8** %16, align 8
  %17 = bitcast %"class.absl::container_internal::btree"* %1 to i8**
  store i8* %9, i8** %17, align 8
  br label %18

18:                                               ; preds = %8, %4
  %19 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %2, i64 0, i32 0
  %21 = load i64, i64* %20, align 8
  br label %22

22:                                               ; preds = %54, %18
  %23 = phi %"class.absl::container_internal::btree_node"** [ %19, %18 ], [ %58, %54 ]
  %24 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %23, align 8
  %25 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %24, i64 8, i32 0
  %26 = getelementptr inbounds i8, i8* %25, i64 2
  %27 = load i8, i8* %26, align 1
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %46, label %29

29:                                               ; preds = %22
  %30 = zext i8 %27 to i32
  %31 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %24, i64 16, i32 0
  %32 = bitcast i8* %31 to %"class.quic::QuicInterval"*
  br label %33

33:                                               ; preds = %33, %29
  %34 = phi i32 [ 0, %29 ], [ %44, %33 ]
  %35 = phi i32 [ %30, %29 ], [ %43, %33 ]
  %36 = add nsw i32 %35, %34
  %37 = ashr i32 %36, 1
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %32, i64 %38, i32 0
  %40 = load i64, i64* %39, align 8
  %41 = icmp ult i64 %40, %21
  %42 = add nsw i32 %37, 1
  %43 = select i1 %41, i32 %35, i32 %37
  %44 = select i1 %41, i32 %42, i32 %34
  %45 = icmp eq i32 %44, %43
  br i1 %45, label %46, label %33

46:                                               ; preds = %33, %22
  %47 = phi i32 [ 0, %22 ], [ %43, %33 ]
  %48 = getelementptr inbounds i8, i8* %25, i64 3
  %49 = load i8, i8* %48, align 1
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %54, label %51

51:                                               ; preds = %46
  %52 = zext i8 %27 to i32
  %53 = icmp eq i32 %47, %52
  br i1 %53, label %59, label %75

54:                                               ; preds = %46
  %55 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %24, i64 256, i32 0
  %56 = bitcast i8* %55 to %"class.absl::container_internal::btree_node"**
  %57 = sext i32 %47 to i64
  %58 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %56, i64 %57
  br label %22

59:                                               ; preds = %51, %67
  %60 = phi %"class.absl::container_internal::btree_node"* [ %62, %67 ], [ %24, %51 ]
  %61 = bitcast %"class.absl::container_internal::btree_node"* %60 to %"class.absl::container_internal::btree_node"**
  %62 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %61, align 8
  %63 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %62, i64 8, i32 0
  %64 = getelementptr inbounds i8, i8* %63, i64 3
  %65 = load i8, i8* %64, align 1
  %66 = icmp eq i8 %65, 0
  br i1 %66, label %67, label %92

67:                                               ; preds = %59
  %68 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %60, i64 8, i32 0
  %69 = load i8, i8* %68, align 1
  %70 = getelementptr inbounds i8, i8* %63, i64 2
  %71 = load i8, i8* %70, align 1
  %72 = icmp eq i8 %69, %71
  br i1 %72, label %59, label %73

73:                                               ; preds = %67
  %74 = zext i8 %69 to i32
  br label %75

75:                                               ; preds = %73, %51
  %76 = phi i32 [ %74, %73 ], [ %47, %51 ]
  %77 = phi %"class.absl::container_internal::btree_node"* [ %62, %73 ], [ %24, %51 ]
  %78 = icmp eq %"class.absl::container_internal::btree_node"* %77, null
  br i1 %78, label %92, label %79

79:                                               ; preds = %75
  %80 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %77, i64 16, i32 0
  %81 = bitcast i8* %80 to %"class.quic::QuicInterval"*
  %82 = sext i32 %76 to i64
  %83 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %81, i64 %82, i32 0
  %84 = load i64, i64* %83, align 8
  %85 = icmp ult i64 %21, %84
  br i1 %85, label %92, label %86

86:                                               ; preds = %79
  %87 = getelementptr inbounds %"struct.std::__1::pair.642", %"struct.std::__1::pair.642"* %0, i64 0, i32 0, i32 0
  store %"class.absl::container_internal::btree_node"* %77, %"class.absl::container_internal::btree_node"** %87, align 8
  %88 = getelementptr inbounds %"struct.std::__1::pair.642", %"struct.std::__1::pair.642"* %0, i64 0, i32 0, i32 1
  store i32 %76, i32* %88, align 8
  %89 = getelementptr inbounds %"struct.std::__1::pair.642", %"struct.std::__1::pair.642"* %0, i64 0, i32 0, i32 2, i64 0
  %90 = getelementptr inbounds %"struct.std::__1::pair.642", %"struct.std::__1::pair.642"* %0, i64 0, i32 1
  %91 = bitcast i8* %89 to i32*
  store i32 -1431655766, i32* %91, align 4
  store i8 0, i8* %90, align 8
  br label %99

92:                                               ; preds = %59, %79, %75
  %93 = tail call { %"class.absl::container_internal::btree_node"*, i32 } @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16internal_emplaceIJRKS5_EEENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EESM_DpOT_(%"class.absl::container_internal::btree"* %1, %"class.absl::container_internal::btree_node"* %24, i32 %47, %"class.quic::QuicInterval"* dereferenceable(16) %3)
  %94 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %93, 0
  %95 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %93, 1
  %96 = getelementptr inbounds %"struct.std::__1::pair.642", %"struct.std::__1::pair.642"* %0, i64 0, i32 0, i32 0
  store %"class.absl::container_internal::btree_node"* %94, %"class.absl::container_internal::btree_node"** %96, align 8
  %97 = getelementptr inbounds %"struct.std::__1::pair.642", %"struct.std::__1::pair.642"* %0, i64 0, i32 0, i32 1
  store i32 %95, i32* %97, align 8
  %98 = getelementptr inbounds %"struct.std::__1::pair.642", %"struct.std::__1::pair.642"* %0, i64 0, i32 1
  store i8 1, i8* %98, align 8
  br label %99

99:                                               ; preds = %86, %92
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden { %"class.absl::container_internal::btree_node"*, i32 } @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16internal_emplaceIJRKS5_EEENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EESM_DpOT_(%"class.absl::container_internal::btree"*, %"class.absl::container_internal::btree_node"*, i32, %"class.quic::QuicInterval"* dereferenceable(16)) local_unnamed_addr #8 comdat align 2 {
  %5 = alloca { %"class.absl::container_internal::btree_node"*, i32 }, align 8
  %6 = bitcast { %"class.absl::container_internal::btree_node"*, i32 }* %5 to %"struct.absl::container_internal::btree_iterator.640"*
  %7 = getelementptr inbounds { %"class.absl::container_internal::btree_node"*, i32 }, { %"class.absl::container_internal::btree_node"*, i32 }* %5, i64 0, i32 0
  store %"class.absl::container_internal::btree_node"* %1, %"class.absl::container_internal::btree_node"** %7, align 8
  %8 = getelementptr inbounds { %"class.absl::container_internal::btree_node"*, i32 }, { %"class.absl::container_internal::btree_node"*, i32 }* %5, i64 0, i32 1
  store i32 %2, i32* %8, align 8
  %9 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %1, i64 8, i32 0
  %10 = getelementptr inbounds i8, i8* %9, i64 3
  %11 = load i8, i8* %10, align 1
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %46

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %1, i64 256, i32 0
  %15 = bitcast i8* %14 to %"class.absl::container_internal::btree_node"**
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %15, i64 %16
  %18 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %17, align 8
  store %"class.absl::container_internal::btree_node"* %18, %"class.absl::container_internal::btree_node"** %7, align 8
  %19 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %18, i64 8, i32 0
  %20 = getelementptr inbounds i8, i8* %19, i64 3
  %21 = load i8, i8* %20, align 1
  %22 = icmp eq i8 %21, 0
  %23 = getelementptr inbounds i8, i8* %19, i64 2
  %24 = load i8, i8* %23, align 1
  br i1 %22, label %25, label %39

25:                                               ; preds = %13, %25
  %26 = phi i8 [ %38, %25 ], [ %24, %13 ]
  %27 = phi %"class.absl::container_internal::btree_node"* [ %32, %25 ], [ %18, %13 ]
  %28 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %27, i64 256, i32 0
  %29 = bitcast i8* %28 to %"class.absl::container_internal::btree_node"**
  %30 = zext i8 %26 to i64
  %31 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %29, i64 %30
  %32 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %31, align 8
  store %"class.absl::container_internal::btree_node"* %32, %"class.absl::container_internal::btree_node"** %7, align 8
  %33 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %32, i64 8, i32 0
  %34 = getelementptr inbounds i8, i8* %33, i64 3
  %35 = load i8, i8* %34, align 1
  %36 = icmp eq i8 %35, 0
  %37 = getelementptr inbounds i8, i8* %33, i64 2
  %38 = load i8, i8* %37, align 1
  br i1 %36, label %25, label %39

39:                                               ; preds = %25, %13
  %40 = phi %"class.absl::container_internal::btree_node"* [ %18, %13 ], [ %32, %25 ]
  %41 = phi i8 [ %24, %13 ], [ %38, %25 ]
  %42 = zext i8 %41 to i32
  store i32 %42, i32* %8, align 8
  %43 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %40, i64 8, i32 0
  %44 = getelementptr inbounds i8, i8* %43, i64 3
  %45 = load i8, i8* %44, align 1
  br label %46

46:                                               ; preds = %4, %39
  %47 = phi i8 [ %11, %4 ], [ %45, %39 ]
  %48 = phi %"class.absl::container_internal::btree_node"* [ %1, %4 ], [ %40, %39 ]
  %49 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %48, i64 8, i32 0
  %50 = icmp eq i8 %47, 0
  %51 = select i1 %50, i8 15, i8 %47
  %52 = bitcast %"class.absl::container_internal::btree"* %0 to %"class.std::__1::allocator"*
  %53 = getelementptr inbounds i8, i8* %49, i64 2
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %51 to i32
  %56 = icmp eq i8 %54, %51
  br i1 %56, label %57, label %138

57:                                               ; preds = %46
  %58 = icmp ult i8 %51, 15
  br i1 %58, label %59, label %136

59:                                               ; preds = %57
  %60 = shl nuw nsw i32 %55, 1
  %61 = icmp ult i32 %60, 15
  %62 = select i1 %61, i32 %60, i32 15
  %63 = shl nuw nsw i32 %62, 4
  %64 = add nuw nsw i32 %63, 23
  %65 = and i32 %64, 496
  %66 = zext i32 %65 to i64
  %67 = tail call i8* @_Znwm(i64 %66) #11
  %68 = bitcast i8* %67 to i8**
  store i8* %67, i8** %68, align 8
  %69 = getelementptr inbounds i8, i8* %67, i64 8
  store i8 0, i8* %69, align 1
  %70 = getelementptr inbounds i8, i8* %67, i64 9
  store i8 0, i8* %70, align 1
  %71 = getelementptr inbounds i8, i8* %67, i64 10
  store i8 0, i8* %71, align 1
  %72 = trunc i32 %62 to i8
  %73 = getelementptr inbounds i8, i8* %67, i64 11
  store i8 %72, i8* %73, align 1
  %74 = bitcast { %"class.absl::container_internal::btree_node"*, i32 }* %5 to i8**
  store i8* %67, i8** %74, align 8
  %75 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %76 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %75, align 8
  %77 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %76, i64 8, i32 0
  %78 = getelementptr inbounds i8, i8* %77, i64 2
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i64
  %81 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %76, i64 16, i32 0
  %82 = bitcast i8* %81 to %"class.quic::QuicInterval"*
  %83 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %82, i64 %80
  %84 = icmp eq i8 %79, 0
  %85 = bitcast i8* %67 to %"class.absl::container_internal::btree_node"*
  br i1 %84, label %131, label %86

86:                                               ; preds = %59
  %87 = getelementptr inbounds i8, i8* %67, i64 16
  %88 = bitcast i8* %87 to %"class.quic::QuicInterval"*
  %89 = shl nuw nsw i64 %80, 4
  %90 = add nsw i64 %89, -16
  %91 = lshr exact i64 %90, 4
  %92 = add nuw nsw i64 %91, 1
  %93 = and i64 %92, 3
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %105, label %95

95:                                               ; preds = %86, %95
  %96 = phi %"class.quic::QuicInterval"* [ %102, %95 ], [ %88, %86 ]
  %97 = phi %"class.quic::QuicInterval"* [ %101, %95 ], [ %82, %86 ]
  %98 = phi i64 [ %103, %95 ], [ %93, %86 ]
  %99 = bitcast %"class.quic::QuicInterval"* %96 to i8*
  %100 = bitcast %"class.quic::QuicInterval"* %97 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %99, i8* align 8 %100, i64 16, i1 false) #10
  %101 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %97, i64 1
  %102 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %96, i64 1
  %103 = add i64 %98, -1
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %105, label %95, !llvm.loop !31

105:                                              ; preds = %95, %86
  %106 = phi %"class.quic::QuicInterval"* [ %88, %86 ], [ %102, %95 ]
  %107 = phi %"class.quic::QuicInterval"* [ %82, %86 ], [ %101, %95 ]
  %108 = icmp ult i64 %90, 48
  br i1 %108, label %129, label %109

109:                                              ; preds = %105, %109
  %110 = phi %"class.quic::QuicInterval"* [ %127, %109 ], [ %106, %105 ]
  %111 = phi %"class.quic::QuicInterval"* [ %126, %109 ], [ %107, %105 ]
  %112 = bitcast %"class.quic::QuicInterval"* %110 to i8*
  %113 = bitcast %"class.quic::QuicInterval"* %111 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %112, i8* align 8 %113, i64 16, i1 false) #10
  %114 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %111, i64 1
  %115 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %110, i64 1
  %116 = bitcast %"class.quic::QuicInterval"* %115 to i8*
  %117 = bitcast %"class.quic::QuicInterval"* %114 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %116, i8* align 8 %117, i64 16, i1 false) #10
  %118 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %111, i64 2
  %119 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %110, i64 2
  %120 = bitcast %"class.quic::QuicInterval"* %119 to i8*
  %121 = bitcast %"class.quic::QuicInterval"* %118 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %120, i8* align 8 %121, i64 16, i1 false) #10
  %122 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %111, i64 3
  %123 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %110, i64 3
  %124 = bitcast %"class.quic::QuicInterval"* %123 to i8*
  %125 = bitcast %"class.quic::QuicInterval"* %122 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %124, i8* align 8 %125, i64 16, i1 false) #10
  %126 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %111, i64 4
  %127 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %110, i64 4
  %128 = icmp eq %"class.quic::QuicInterval"* %126, %83
  br i1 %128, label %129, label %109

129:                                              ; preds = %109, %105
  %130 = load i8, i8* %78, align 1
  br label %131

131:                                              ; preds = %129, %59
  %132 = phi i8 [ %130, %129 ], [ 0, %59 ]
  store i8 %132, i8* %71, align 1
  store i8 0, i8* %78, align 1
  tail call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16clear_and_deleteEPSD_PSB_(%"class.absl::container_internal::btree_node"* %76, %"class.std::__1::allocator"* %52)
  %133 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %0, i64 0, i32 1
  %134 = bitcast %"class.absl::container_internal::btree_node"** %133 to i8**
  store i8* %67, i8** %134, align 8
  %135 = bitcast %"class.absl::container_internal::btree"* %0 to i8**
  store i8* %67, i8** %135, align 8
  br label %138

136:                                              ; preds = %57
  call void @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE18rebalance_or_splitEPNS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EE(%"class.absl::container_internal::btree"* %0, %"struct.absl::container_internal::btree_iterator.640"* nonnull %6)
  %137 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %7, align 8
  br label %138

138:                                              ; preds = %131, %136, %46
  %139 = phi %"class.absl::container_internal::btree_node"* [ %85, %131 ], [ %137, %136 ], [ %48, %46 ]
  %140 = load i32, i32* %8, align 8
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %139, i64 8, i32 0
  %143 = getelementptr inbounds i8, i8* %142, i64 2
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i64
  %146 = icmp sgt i64 %145, %141
  br i1 %146, label %147, label %204

147:                                              ; preds = %138
  %148 = sub nsw i64 %145, %141
  %149 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %139, i64 16, i32 0
  %150 = bitcast i8* %149 to %"class.quic::QuicInterval"*
  %151 = shl nuw nsw i64 %145, 32
  %152 = add nsw i64 %151, -4294967296
  %153 = ashr exact i64 %152, 32
  %154 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %150, i64 %153
  %155 = sub nsw i64 0, %148
  %156 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %154, i64 %155
  %157 = icmp eq i64 %148, 0
  br i1 %157, label %204, label %158

158:                                              ; preds = %147
  %159 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %150, i64 %145
  %160 = shl nuw nsw i64 %145, 4
  %161 = add nsw i64 %160, -16
  %162 = shl nsw i64 %141, 4
  %163 = sub nsw i64 %161, %162
  %164 = lshr exact i64 %163, 4
  %165 = add nuw nsw i64 %164, 1
  %166 = and i64 %165, 3
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %178, label %168

168:                                              ; preds = %158, %168
  %169 = phi %"class.quic::QuicInterval"* [ %175, %168 ], [ %159, %158 ]
  %170 = phi %"class.quic::QuicInterval"* [ %174, %168 ], [ %154, %158 ]
  %171 = phi i64 [ %176, %168 ], [ %166, %158 ]
  %172 = bitcast %"class.quic::QuicInterval"* %169 to i8*
  %173 = bitcast %"class.quic::QuicInterval"* %170 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %172, i8* align 8 %173, i64 16, i1 false) #10
  %174 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %170, i64 -1
  %175 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %169, i64 -1
  %176 = add i64 %171, -1
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %178, label %168, !llvm.loop !32

178:                                              ; preds = %168, %158
  %179 = phi %"class.quic::QuicInterval"* [ %159, %158 ], [ %175, %168 ]
  %180 = phi %"class.quic::QuicInterval"* [ %154, %158 ], [ %174, %168 ]
  %181 = icmp ult i64 %163, 48
  br i1 %181, label %202, label %182

182:                                              ; preds = %178, %182
  %183 = phi %"class.quic::QuicInterval"* [ %200, %182 ], [ %179, %178 ]
  %184 = phi %"class.quic::QuicInterval"* [ %199, %182 ], [ %180, %178 ]
  %185 = bitcast %"class.quic::QuicInterval"* %183 to i8*
  %186 = bitcast %"class.quic::QuicInterval"* %184 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %185, i8* align 8 %186, i64 16, i1 false) #10
  %187 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %184, i64 -1
  %188 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %183, i64 -1
  %189 = bitcast %"class.quic::QuicInterval"* %188 to i8*
  %190 = bitcast %"class.quic::QuicInterval"* %187 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %189, i8* align 8 %190, i64 16, i1 false) #10
  %191 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %184, i64 -2
  %192 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %183, i64 -2
  %193 = bitcast %"class.quic::QuicInterval"* %192 to i8*
  %194 = bitcast %"class.quic::QuicInterval"* %191 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %193, i8* align 8 %194, i64 16, i1 false) #10
  %195 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %184, i64 -3
  %196 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %183, i64 -3
  %197 = bitcast %"class.quic::QuicInterval"* %196 to i8*
  %198 = bitcast %"class.quic::QuicInterval"* %195 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %197, i8* align 8 %198, i64 16, i1 false) #10
  %199 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %184, i64 -4
  %200 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %183, i64 -4
  %201 = icmp eq %"class.quic::QuicInterval"* %199, %156
  br i1 %201, label %202, label %182

202:                                              ; preds = %182, %178
  %203 = load i8, i8* %143, align 1
  br label %204

204:                                              ; preds = %138, %202, %147
  %205 = phi i8 [ %203, %202 ], [ %144, %147 ], [ %144, %138 ]
  %206 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %139, i64 16, i32 0
  %207 = bitcast i8* %206 to %"class.quic::QuicInterval"*
  %208 = and i64 %141, 255
  %209 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %207, i64 %208
  %210 = bitcast %"class.quic::QuicInterval"* %209 to i8*
  %211 = bitcast %"class.quic::QuicInterval"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %210, i8* align 8 %211, i64 16, i1 false) #10
  %212 = add i8 %205, 1
  store i8 %212, i8* %143, align 1
  %213 = getelementptr inbounds i8, i8* %142, i64 3
  %214 = load i8, i8* %213, align 1
  %215 = icmp eq i8 %214, 0
  br i1 %215, label %216, label %270

216:                                              ; preds = %204
  %217 = zext i8 %212 to i64
  %218 = add nsw i64 %141, 1
  %219 = icmp slt i64 %218, %217
  br i1 %219, label %220, label %270

220:                                              ; preds = %216
  %221 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %139, i64 256, i32 0
  %222 = bitcast i8* %221 to %"class.absl::container_internal::btree_node"**
  %223 = xor i64 %141, 3
  %224 = add nsw i64 %223, %217
  %225 = add nsw i64 %217, -2
  %226 = sub nsw i64 %225, %141
  %227 = and i64 %224, 3
  %228 = icmp eq i64 %227, 0
  br i1 %228, label %240, label %229

229:                                              ; preds = %220, %229
  %230 = phi i64 [ %232, %229 ], [ %217, %220 ]
  %231 = phi i64 [ %238, %229 ], [ %227, %220 ]
  %232 = add nsw i64 %230, -1
  %233 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %232
  %234 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %233, align 8
  %235 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %230
  store %"class.absl::container_internal::btree_node"* %234, %"class.absl::container_internal::btree_node"** %235, align 8
  %236 = trunc i64 %230 to i8
  %237 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %234, i64 8, i32 0
  store i8 %236, i8* %237, align 1
  %238 = add i64 %231, -1
  %239 = icmp eq i64 %238, 0
  br i1 %239, label %240, label %229, !llvm.loop !33

240:                                              ; preds = %229, %220
  %241 = phi i64 [ %217, %220 ], [ %232, %229 ]
  %242 = icmp ult i64 %226, 3
  br i1 %242, label %270, label %243

243:                                              ; preds = %240, %243
  %244 = phi i64 [ %263, %243 ], [ %241, %240 ]
  %245 = add nsw i64 %244, -1
  %246 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %245
  %247 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %246, align 8
  %248 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %244
  store %"class.absl::container_internal::btree_node"* %247, %"class.absl::container_internal::btree_node"** %248, align 8
  %249 = trunc i64 %244 to i8
  %250 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %247, i64 8, i32 0
  store i8 %249, i8* %250, align 1
  %251 = add nsw i64 %244, -2
  %252 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %251
  %253 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %252, align 8
  %254 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %245
  store %"class.absl::container_internal::btree_node"* %253, %"class.absl::container_internal::btree_node"** %254, align 8
  %255 = trunc i64 %245 to i8
  %256 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %253, i64 8, i32 0
  store i8 %255, i8* %256, align 1
  %257 = add nsw i64 %244, -3
  %258 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %257
  %259 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %258, align 8
  %260 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %251
  store %"class.absl::container_internal::btree_node"* %259, %"class.absl::container_internal::btree_node"** %260, align 8
  %261 = trunc i64 %251 to i8
  %262 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %259, i64 8, i32 0
  store i8 %261, i8* %262, align 1
  %263 = add nsw i64 %244, -4
  %264 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %263
  %265 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %264, align 8
  %266 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %257
  store %"class.absl::container_internal::btree_node"* %265, %"class.absl::container_internal::btree_node"** %266, align 8
  %267 = trunc i64 %257 to i8
  %268 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %265, i64 8, i32 0
  store i8 %267, i8* %268, align 1
  %269 = icmp slt i64 %218, %263
  br i1 %269, label %243, label %270

270:                                              ; preds = %240, %243, %204, %216
  %271 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %0, i64 0, i32 2
  %272 = load i64, i64* %271, align 8
  %273 = add nsw i64 %272, 1
  store i64 %273, i64* %271, align 8
  %274 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %7, align 8
  %275 = load i32, i32* %8, align 8
  %276 = insertvalue { %"class.absl::container_internal::btree_node"*, i32 } undef, %"class.absl::container_internal::btree_node"* %274, 0
  %277 = insertvalue { %"class.absl::container_internal::btree_node"*, i32 } %276, i32 %275, 1
  ret { %"class.absl::container_internal::btree_node"*, i32 } %277
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE18rebalance_or_splitEPNS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EE(%"class.absl::container_internal::btree"*, %"struct.absl::container_internal::btree_iterator.640"*) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"struct.absl::container_internal::btree_iterator.640", align 8
  %4 = getelementptr inbounds %"struct.absl::container_internal::btree_iterator.640", %"struct.absl::container_internal::btree_iterator.640"* %1, i64 0, i32 0
  %5 = getelementptr inbounds %"struct.absl::container_internal::btree_iterator.640", %"struct.absl::container_internal::btree_iterator.640"* %1, i64 0, i32 1
  %6 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %4, align 8
  %7 = bitcast %"class.absl::container_internal::btree_node"* %6 to %"class.absl::container_internal::btree_node"**
  %8 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %7, align 8
  %9 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %10 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %9, align 8
  %11 = icmp eq %"class.absl::container_internal::btree_node"* %6, %10
  br i1 %11, label %106, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %6, i64 8, i32 0
  %14 = load i8, i8* %13, align 1
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %50, label %16

16:                                               ; preds = %12
  %17 = zext i8 %14 to i64
  %18 = add nsw i64 %17, -1
  %19 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %8, i64 256, i32 0
  %20 = bitcast i8* %19 to %"class.absl::container_internal::btree_node"**
  %21 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %20, i64 %18
  %22 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %21, align 8
  %23 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %22, i64 8, i32 0
  %24 = getelementptr inbounds i8, i8* %23, i64 2
  %25 = load i8, i8* %24, align 1
  %26 = icmp ult i8 %25, 15
  br i1 %26, label %27, label %50

27:                                               ; preds = %16
  %28 = zext i8 %25 to i32
  %29 = sub nuw nsw i32 15, %28
  %30 = load i32, i32* %5, align 4
  %31 = icmp slt i32 %30, 15
  %32 = zext i1 %31 to i32
  %33 = lshr i32 %29, %32
  %34 = icmp sgt i32 %33, 1
  %35 = select i1 %34, i32 %33, i32 1
  %36 = icmp sge i32 %30, %35
  %37 = add nuw nsw i32 %35, %28
  %38 = icmp ult i32 %37, 15
  %39 = or i1 %36, %38
  br i1 %39, label %40, label %50

40:                                               ; preds = %27
  %41 = bitcast %"class.absl::container_internal::btree"* %0 to %"class.std::__1::allocator"*
  tail call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE23rebalance_right_to_leftEiPSD_PSB_(%"class.absl::container_internal::btree_node"* %22, i32 %35, %"class.absl::container_internal::btree_node"* %6, %"class.std::__1::allocator"* %41)
  %42 = load i32, i32* %5, align 4
  %43 = sub nsw i32 %42, %35
  store i32 %43, i32* %5, align 4
  %44 = icmp slt i32 %43, 0
  br i1 %44, label %45, label %160

45:                                               ; preds = %40
  %46 = load i8, i8* %24, align 1
  %47 = zext i8 %46 to i32
  %48 = add nsw i32 %43, 1
  %49 = add nsw i32 %48, %47
  store i32 %49, i32* %5, align 4
  store %"class.absl::container_internal::btree_node"* %22, %"class.absl::container_internal::btree_node"** %4, align 8
  br label %160

50:                                               ; preds = %12, %27, %16
  %51 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %8, i64 8, i32 0
  %52 = getelementptr inbounds i8, i8* %51, i64 2
  %53 = load i8, i8* %52, align 1
  %54 = icmp ult i8 %14, %53
  br i1 %54, label %55, label %95

55:                                               ; preds = %50
  %56 = zext i8 %14 to i64
  %57 = add nuw nsw i64 %56, 1
  %58 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %8, i64 256, i32 0
  %59 = bitcast i8* %58 to %"class.absl::container_internal::btree_node"**
  %60 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %59, i64 %57
  %61 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %60, align 8
  %62 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %61, i64 8, i32 0
  %63 = getelementptr inbounds i8, i8* %62, i64 2
  %64 = load i8, i8* %63, align 1
  %65 = icmp ult i8 %64, 15
  br i1 %65, label %66, label %95

66:                                               ; preds = %55
  %67 = zext i8 %64 to i32
  %68 = sub nuw nsw i32 15, %67
  %69 = load i32, i32* %5, align 4
  %70 = icmp sgt i32 %69, 0
  %71 = select i1 %70, i32 2, i32 1
  %72 = sdiv i32 %68, %71
  %73 = icmp sgt i32 %72, 1
  %74 = select i1 %73, i32 %72, i32 1
  %75 = getelementptr inbounds i8, i8* %13, i64 2
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = sub nsw i32 %77, %74
  %79 = icmp sle i32 %69, %78
  %80 = add nuw nsw i32 %74, %67
  %81 = icmp ult i32 %80, 15
  %82 = or i1 %79, %81
  br i1 %82, label %83, label %95

83:                                               ; preds = %66
  %84 = bitcast %"class.absl::container_internal::btree"* %0 to %"class.std::__1::allocator"*
  tail call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE23rebalance_left_to_rightEiPSD_PSB_(%"class.absl::container_internal::btree_node"* %6, i32 %74, %"class.absl::container_internal::btree_node"* %61, %"class.std::__1::allocator"* %84)
  %85 = load i32, i32* %5, align 4
  %86 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %4, align 8
  %87 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %86, i64 8, i32 0
  %88 = getelementptr inbounds i8, i8* %87, i64 2
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = icmp sgt i32 %85, %90
  br i1 %91, label %92, label %160

92:                                               ; preds = %83
  %93 = xor i32 %90, -1
  %94 = add i32 %85, %93
  store i32 %94, i32* %5, align 4
  store %"class.absl::container_internal::btree_node"* %61, %"class.absl::container_internal::btree_node"** %4, align 8
  br label %160

95:                                               ; preds = %55, %66, %50
  %96 = icmp eq i8 %53, 15
  br i1 %96, label %97, label %117

97:                                               ; preds = %95
  %98 = bitcast %"struct.absl::container_internal::btree_iterator.640"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %98) #10
  %99 = getelementptr inbounds %"struct.absl::container_internal::btree_iterator.640", %"struct.absl::container_internal::btree_iterator.640"* %3, i64 0, i32 1
  %100 = bitcast %"class.absl::container_internal::btree_node"* %6 to i64*
  %101 = bitcast %"struct.absl::container_internal::btree_iterator.640"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %101, i8 -86, i64 16, i1 false)
  %102 = load i64, i64* %100, align 8
  %103 = load i8, i8* %13, align 1
  %104 = zext i8 %103 to i32
  %105 = bitcast %"struct.absl::container_internal::btree_iterator.640"* %3 to i64*
  store i64 %102, i64* %105, align 8
  store i32 %104, i32* %99, align 8
  call void @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE18rebalance_or_splitEPNS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EE(%"class.absl::container_internal::btree"* %0, %"struct.absl::container_internal::btree_iterator.640"* nonnull %3)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %98) #10
  br label %117

106:                                              ; preds = %2
  %107 = tail call i8* @_Znwm(i64 384) #11
  %108 = bitcast i8* %107 to %"class.absl::container_internal::btree_node"*
  %109 = bitcast i8* %107 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %8, %"class.absl::container_internal::btree_node"** %109, align 8
  %110 = getelementptr inbounds i8, i8* %107, i64 8
  %111 = bitcast i8* %110 to i32*
  store i32 0, i32* %111, align 1
  %112 = getelementptr inbounds i8, i8* %107, i64 256
  %113 = bitcast i8* %112 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %6, %"class.absl::container_internal::btree_node"** %113, align 8
  %114 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %6, i64 8, i32 0
  store i8 0, i8* %114, align 1
  %115 = bitcast %"class.absl::container_internal::btree_node"* %6 to i8**
  store i8* %107, i8** %115, align 8
  %116 = bitcast %"class.absl::container_internal::btree"* %0 to i8**
  store i8* %107, i8** %116, align 8
  br label %117

117:                                              ; preds = %95, %97, %106
  %118 = phi %"class.absl::container_internal::btree_node"* [ %8, %97 ], [ %8, %95 ], [ %108, %106 ]
  %119 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %4, align 8
  %120 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %119, i64 8, i32 0
  %121 = getelementptr inbounds i8, i8* %120, i64 3
  %122 = load i8, i8* %121, align 1
  %123 = icmp eq i8 %122, 0
  br i1 %123, label %140, label %124

124:                                              ; preds = %117
  %125 = call i8* @_Znwm(i64 256) #11
  %126 = bitcast i8* %125 to %"class.absl::container_internal::btree_node"*
  %127 = bitcast i8* %125 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %118, %"class.absl::container_internal::btree_node"** %127, align 8
  %128 = getelementptr inbounds i8, i8* %125, i64 8
  store i8 0, i8* %128, align 1
  %129 = getelementptr inbounds i8, i8* %125, i64 9
  store i8 0, i8* %129, align 1
  %130 = getelementptr inbounds i8, i8* %125, i64 10
  store i8 0, i8* %130, align 1
  %131 = getelementptr inbounds i8, i8* %125, i64 11
  store i8 15, i8* %131, align 1
  %132 = load i32, i32* %5, align 4
  %133 = bitcast %"class.absl::container_internal::btree"* %0 to %"class.std::__1::allocator"*
  call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE5splitEiPSD_PSB_(%"class.absl::container_internal::btree_node"* %119, i32 %132, %"class.absl::container_internal::btree_node"* nonnull %126, %"class.std::__1::allocator"* %133)
  %134 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %0, i64 0, i32 1
  %135 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %134, align 8
  %136 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %4, align 8
  %137 = icmp eq %"class.absl::container_internal::btree_node"* %135, %136
  br i1 %137, label %138, label %148

138:                                              ; preds = %124
  %139 = bitcast %"class.absl::container_internal::btree_node"** %134 to i8**
  store i8* %125, i8** %139, align 8
  br label %148

140:                                              ; preds = %117
  %141 = call i8* @_Znwm(i64 384) #11
  %142 = bitcast i8* %141 to %"class.absl::container_internal::btree_node"*
  %143 = bitcast i8* %141 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %118, %"class.absl::container_internal::btree_node"** %143, align 8
  %144 = getelementptr inbounds i8, i8* %141, i64 8
  %145 = bitcast i8* %144 to i32*
  store i32 0, i32* %145, align 1
  %146 = load i32, i32* %5, align 4
  %147 = bitcast %"class.absl::container_internal::btree"* %0 to %"class.std::__1::allocator"*
  call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE5splitEiPSD_PSB_(%"class.absl::container_internal::btree_node"* %119, i32 %146, %"class.absl::container_internal::btree_node"* nonnull %142, %"class.std::__1::allocator"* %147)
  br label %148

148:                                              ; preds = %124, %138, %140
  %149 = phi %"class.absl::container_internal::btree_node"* [ %126, %138 ], [ %126, %124 ], [ %142, %140 ]
  %150 = load i32, i32* %5, align 4
  %151 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %4, align 8
  %152 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %151, i64 8, i32 0
  %153 = getelementptr inbounds i8, i8* %152, i64 2
  %154 = load i8, i8* %153, align 1
  %155 = zext i8 %154 to i32
  %156 = icmp sgt i32 %150, %155
  br i1 %156, label %157, label %160

157:                                              ; preds = %148
  %158 = xor i32 %155, -1
  %159 = add i32 %150, %158
  store i32 %159, i32* %5, align 4
  store %"class.absl::container_internal::btree_node"* %149, %"class.absl::container_internal::btree_node"** %4, align 8
  br label %160

160:                                              ; preds = %83, %92, %40, %45, %148, %157
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE5splitEiPSD_PSB_(%"class.absl::container_internal::btree_node"*, i32, %"class.absl::container_internal::btree_node"*, %"class.std::__1::allocator"*) local_unnamed_addr #1 comdat align 2 {
  switch i32 %1, label %10 [
    i32 0, label %5
    i32 15, label %15
  ]

5:                                                ; preds = %4
  %6 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %0, i64 8, i32 0
  %7 = getelementptr inbounds i8, i8* %6, i64 2
  %8 = load i8, i8* %7, align 1
  %9 = add i8 %8, -1
  br label %15

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %0, i64 8, i32 0
  %12 = getelementptr inbounds i8, i8* %11, i64 2
  %13 = load i8, i8* %12, align 1
  %14 = lshr i8 %13, 1
  br label %15

15:                                               ; preds = %4, %10, %5
  %16 = phi i8 [ %14, %10 ], [ %9, %5 ], [ 0, %4 ]
  %17 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 8, i32 0
  %18 = getelementptr inbounds i8, i8* %17, i64 2
  store i8 %16, i8* %18, align 1
  %19 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %0, i64 8, i32 0
  %20 = getelementptr inbounds i8, i8* %19, i64 2
  %21 = load i8, i8* %20, align 1
  %22 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 8, i32 0
  %23 = getelementptr inbounds i8, i8* %22, i64 2
  %24 = sub i8 %21, %16
  store i8 %24, i8* %20, align 1
  %25 = load i8, i8* %23, align 1
  %26 = zext i8 %25 to i64
  %27 = zext i8 %24 to i64
  %28 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %0, i64 16, i32 0
  %29 = bitcast i8* %28 to %"class.quic::QuicInterval"*
  %30 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %29, i64 %27
  %31 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %30, i64 %26
  %32 = icmp eq i8 %25, 0
  br i1 %32, label %78, label %33

33:                                               ; preds = %15
  %34 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 16, i32 0
  %35 = bitcast i8* %34 to %"class.quic::QuicInterval"*
  %36 = shl nuw nsw i64 %26, 4
  %37 = add nsw i64 %36, -16
  %38 = lshr exact i64 %37, 4
  %39 = add nuw nsw i64 %38, 1
  %40 = and i64 %39, 3
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %52, label %42

42:                                               ; preds = %33, %42
  %43 = phi %"class.quic::QuicInterval"* [ %49, %42 ], [ %35, %33 ]
  %44 = phi %"class.quic::QuicInterval"* [ %48, %42 ], [ %30, %33 ]
  %45 = phi i64 [ %50, %42 ], [ %40, %33 ]
  %46 = bitcast %"class.quic::QuicInterval"* %43 to i8*
  %47 = bitcast %"class.quic::QuicInterval"* %44 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 8 %47, i64 16, i1 false) #10
  %48 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %44, i64 1
  %49 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %43, i64 1
  %50 = add i64 %45, -1
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %52, label %42, !llvm.loop !34

52:                                               ; preds = %42, %33
  %53 = phi %"class.quic::QuicInterval"* [ %35, %33 ], [ %49, %42 ]
  %54 = phi %"class.quic::QuicInterval"* [ %30, %33 ], [ %48, %42 ]
  %55 = icmp ult i64 %37, 48
  br i1 %55, label %76, label %56

56:                                               ; preds = %52, %56
  %57 = phi %"class.quic::QuicInterval"* [ %74, %56 ], [ %53, %52 ]
  %58 = phi %"class.quic::QuicInterval"* [ %73, %56 ], [ %54, %52 ]
  %59 = bitcast %"class.quic::QuicInterval"* %57 to i8*
  %60 = bitcast %"class.quic::QuicInterval"* %58 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %59, i8* align 8 %60, i64 16, i1 false) #10
  %61 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %58, i64 1
  %62 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %57, i64 1
  %63 = bitcast %"class.quic::QuicInterval"* %62 to i8*
  %64 = bitcast %"class.quic::QuicInterval"* %61 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %63, i8* align 8 %64, i64 16, i1 false) #10
  %65 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %58, i64 2
  %66 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %57, i64 2
  %67 = bitcast %"class.quic::QuicInterval"* %66 to i8*
  %68 = bitcast %"class.quic::QuicInterval"* %65 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %67, i8* align 8 %68, i64 16, i1 false) #10
  %69 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %58, i64 3
  %70 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %57, i64 3
  %71 = bitcast %"class.quic::QuicInterval"* %70 to i8*
  %72 = bitcast %"class.quic::QuicInterval"* %69 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %71, i8* align 8 %72, i64 16, i1 false) #10
  %73 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %58, i64 4
  %74 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %57, i64 4
  %75 = icmp eq %"class.quic::QuicInterval"* %73, %31
  br i1 %75, label %76, label %56

76:                                               ; preds = %56, %52
  %77 = load i8, i8* %20, align 1
  br label %78

78:                                               ; preds = %76, %15
  %79 = phi i8 [ %77, %76 ], [ %24, %15 ]
  %80 = add i8 %79, -1
  store i8 %80, i8* %20, align 1
  %81 = bitcast %"class.absl::container_internal::btree_node"* %0 to %"class.absl::container_internal::btree_node"**
  %82 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %81, align 8
  %83 = load i8, i8* %19, align 1
  %84 = zext i8 %83 to i64
  %85 = zext i8 %80 to i64
  %86 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %29, i64 %85
  %87 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %82, i64 8, i32 0
  %88 = getelementptr inbounds i8, i8* %87, i64 2
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i64
  %91 = icmp ugt i8 %89, %83
  br i1 %91, label %92, label %149

92:                                               ; preds = %78
  %93 = sub nsw i64 %90, %84
  %94 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %82, i64 16, i32 0
  %95 = bitcast i8* %94 to %"class.quic::QuicInterval"*
  %96 = shl nuw nsw i64 %90, 32
  %97 = add nsw i64 %96, -4294967296
  %98 = ashr exact i64 %97, 32
  %99 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %95, i64 %98
  %100 = sub nsw i64 0, %93
  %101 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %99, i64 %100
  %102 = icmp eq i64 %93, 0
  br i1 %102, label %149, label %103

103:                                              ; preds = %92
  %104 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %95, i64 %90
  %105 = shl nuw nsw i64 %90, 4
  %106 = add nsw i64 %105, -16
  %107 = shl nuw nsw i64 %84, 4
  %108 = sub nsw i64 %106, %107
  %109 = lshr exact i64 %108, 4
  %110 = add nuw nsw i64 %109, 1
  %111 = and i64 %110, 3
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %123, label %113

113:                                              ; preds = %103, %113
  %114 = phi %"class.quic::QuicInterval"* [ %120, %113 ], [ %104, %103 ]
  %115 = phi %"class.quic::QuicInterval"* [ %119, %113 ], [ %99, %103 ]
  %116 = phi i64 [ %121, %113 ], [ %111, %103 ]
  %117 = bitcast %"class.quic::QuicInterval"* %114 to i8*
  %118 = bitcast %"class.quic::QuicInterval"* %115 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %117, i8* align 8 %118, i64 16, i1 false) #10
  %119 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %115, i64 -1
  %120 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %114, i64 -1
  %121 = add i64 %116, -1
  %122 = icmp eq i64 %121, 0
  br i1 %122, label %123, label %113, !llvm.loop !35

123:                                              ; preds = %113, %103
  %124 = phi %"class.quic::QuicInterval"* [ %104, %103 ], [ %120, %113 ]
  %125 = phi %"class.quic::QuicInterval"* [ %99, %103 ], [ %119, %113 ]
  %126 = icmp ult i64 %108, 48
  br i1 %126, label %147, label %127

127:                                              ; preds = %123, %127
  %128 = phi %"class.quic::QuicInterval"* [ %145, %127 ], [ %124, %123 ]
  %129 = phi %"class.quic::QuicInterval"* [ %144, %127 ], [ %125, %123 ]
  %130 = bitcast %"class.quic::QuicInterval"* %128 to i8*
  %131 = bitcast %"class.quic::QuicInterval"* %129 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %130, i8* align 8 %131, i64 16, i1 false) #10
  %132 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %129, i64 -1
  %133 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %128, i64 -1
  %134 = bitcast %"class.quic::QuicInterval"* %133 to i8*
  %135 = bitcast %"class.quic::QuicInterval"* %132 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %134, i8* align 8 %135, i64 16, i1 false) #10
  %136 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %129, i64 -2
  %137 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %128, i64 -2
  %138 = bitcast %"class.quic::QuicInterval"* %137 to i8*
  %139 = bitcast %"class.quic::QuicInterval"* %136 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %138, i8* align 8 %139, i64 16, i1 false) #10
  %140 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %129, i64 -3
  %141 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %128, i64 -3
  %142 = bitcast %"class.quic::QuicInterval"* %141 to i8*
  %143 = bitcast %"class.quic::QuicInterval"* %140 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %142, i8* align 8 %143, i64 16, i1 false) #10
  %144 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %129, i64 -4
  %145 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %128, i64 -4
  %146 = icmp eq %"class.quic::QuicInterval"* %144, %101
  br i1 %146, label %147, label %127

147:                                              ; preds = %127, %123
  %148 = load i8, i8* %88, align 1
  br label %149

149:                                              ; preds = %78, %147, %92
  %150 = phi i8 [ %148, %147 ], [ %89, %92 ], [ %89, %78 ]
  %151 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %82, i64 16, i32 0
  %152 = bitcast i8* %151 to %"class.quic::QuicInterval"*
  %153 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %152, i64 %84
  %154 = bitcast %"class.quic::QuicInterval"* %86 to i8*
  %155 = bitcast %"class.quic::QuicInterval"* %153 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %155, i8* align 8 %154, i64 16, i1 false) #10
  %156 = add i8 %150, 1
  store i8 %156, i8* %88, align 1
  %157 = getelementptr inbounds i8, i8* %87, i64 3
  %158 = load i8, i8* %157, align 1
  %159 = icmp eq i8 %158, 0
  br i1 %159, label %160, label %214

160:                                              ; preds = %149
  %161 = zext i8 %156 to i64
  %162 = add nuw nsw i64 %84, 1
  %163 = icmp ult i64 %162, %161
  br i1 %163, label %164, label %214

164:                                              ; preds = %160
  %165 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %82, i64 256, i32 0
  %166 = bitcast i8* %165 to %"class.absl::container_internal::btree_node"**
  %167 = xor i64 %84, 3
  %168 = add nuw nsw i64 %167, %161
  %169 = add nsw i64 %161, -2
  %170 = sub nsw i64 %169, %84
  %171 = and i64 %168, 3
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %184, label %173

173:                                              ; preds = %164, %173
  %174 = phi i64 [ %176, %173 ], [ %161, %164 ]
  %175 = phi i64 [ %182, %173 ], [ %171, %164 ]
  %176 = add nsw i64 %174, -1
  %177 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %166, i64 %176
  %178 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %177, align 8
  %179 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %166, i64 %174
  store %"class.absl::container_internal::btree_node"* %178, %"class.absl::container_internal::btree_node"** %179, align 8
  %180 = trunc i64 %174 to i8
  %181 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %178, i64 8, i32 0
  store i8 %180, i8* %181, align 1
  %182 = add i64 %175, -1
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %184, label %173, !llvm.loop !36

184:                                              ; preds = %173, %164
  %185 = phi i64 [ %161, %164 ], [ %176, %173 ]
  %186 = icmp ult i64 %170, 3
  br i1 %186, label %214, label %187

187:                                              ; preds = %184, %187
  %188 = phi i64 [ %207, %187 ], [ %185, %184 ]
  %189 = add nsw i64 %188, -1
  %190 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %166, i64 %189
  %191 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %190, align 8
  %192 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %166, i64 %188
  store %"class.absl::container_internal::btree_node"* %191, %"class.absl::container_internal::btree_node"** %192, align 8
  %193 = trunc i64 %188 to i8
  %194 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %191, i64 8, i32 0
  store i8 %193, i8* %194, align 1
  %195 = add nsw i64 %188, -2
  %196 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %166, i64 %195
  %197 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %196, align 8
  %198 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %166, i64 %189
  store %"class.absl::container_internal::btree_node"* %197, %"class.absl::container_internal::btree_node"** %198, align 8
  %199 = trunc i64 %189 to i8
  %200 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %197, i64 8, i32 0
  store i8 %199, i8* %200, align 1
  %201 = add nsw i64 %188, -3
  %202 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %166, i64 %201
  %203 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %202, align 8
  %204 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %166, i64 %195
  store %"class.absl::container_internal::btree_node"* %203, %"class.absl::container_internal::btree_node"** %204, align 8
  %205 = trunc i64 %195 to i8
  %206 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %203, i64 8, i32 0
  store i8 %205, i8* %206, align 1
  %207 = add nsw i64 %188, -4
  %208 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %166, i64 %207
  %209 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %208, align 8
  %210 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %166, i64 %201
  store %"class.absl::container_internal::btree_node"* %209, %"class.absl::container_internal::btree_node"** %210, align 8
  %211 = trunc i64 %201 to i8
  %212 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %209, i64 8, i32 0
  store i8 %211, i8* %212, align 1
  %213 = icmp slt i64 %162, %207
  br i1 %213, label %187, label %214

214:                                              ; preds = %184, %187, %149, %160
  %215 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %81, align 8
  %216 = load i8, i8* %19, align 1
  %217 = zext i8 %216 to i32
  %218 = add nuw nsw i32 %217, 1
  %219 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %215, i64 256, i32 0
  %220 = bitcast i8* %219 to %"class.absl::container_internal::btree_node"**
  %221 = zext i32 %218 to i64
  %222 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %220, i64 %221
  store %"class.absl::container_internal::btree_node"* %2, %"class.absl::container_internal::btree_node"** %222, align 8
  %223 = trunc i32 %218 to i8
  store i8 %223, i8* %22, align 1
  %224 = bitcast %"class.absl::container_internal::btree_node"* %2 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %215, %"class.absl::container_internal::btree_node"** %224, align 8
  %225 = getelementptr inbounds i8, i8* %19, i64 3
  %226 = load i8, i8* %225, align 1
  %227 = icmp eq i8 %226, 0
  br i1 %227, label %228, label %251

228:                                              ; preds = %214
  %229 = load i8, i8* %20, align 1
  %230 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %0, i64 256, i32 0
  %231 = bitcast i8* %230 to %"class.absl::container_internal::btree_node"**
  %232 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 256, i32 0
  %233 = bitcast i8* %232 to %"class.absl::container_internal::btree_node"**
  %234 = zext i8 %229 to i64
  br label %235

235:                                              ; preds = %235, %228
  %236 = phi i64 [ %246, %235 ], [ 0, %228 ]
  %237 = phi i64 [ %239, %235 ], [ %234, %228 ]
  %238 = phi i32 [ %247, %235 ], [ 0, %228 ]
  %239 = add nuw nsw i64 %237, 1
  %240 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %231, i64 %239
  %241 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %240, align 8
  %242 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %233, i64 %236
  store %"class.absl::container_internal::btree_node"* %241, %"class.absl::container_internal::btree_node"** %242, align 8
  %243 = trunc i32 %238 to i8
  %244 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %241, i64 8, i32 0
  store i8 %243, i8* %244, align 1
  %245 = bitcast %"class.absl::container_internal::btree_node"* %241 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %2, %"class.absl::container_internal::btree_node"** %245, align 8
  %246 = add nuw nsw i64 %236, 1
  %247 = add nuw nsw i32 %238, 1
  %248 = load i8, i8* %23, align 1
  %249 = zext i8 %248 to i64
  %250 = icmp ult i64 %236, %249
  br i1 %250, label %235, label %251

251:                                              ; preds = %235, %214
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE18insert_hint_uniqueIS5_JRKS5_EEENS9_4pairINS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EEbEESN_RKT_DpOT0_(%"struct.std::__1::pair.642"* noalias sret, %"class.absl::container_internal::btree"*, %"class.absl::container_internal::btree_node"*, i32, %"class.quic::QuicInterval"* dereferenceable(16), %"class.quic::QuicInterval"* dereferenceable(16)) local_unnamed_addr #8 comdat align 2 {
  %7 = ptrtoint %"class.absl::container_internal::btree_node"* %2 to i64
  %8 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %1, i64 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %181, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %1, i64 0, i32 1
  %13 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %12, align 8
  %14 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %13, i64 8, i32 0
  %15 = getelementptr inbounds i8, i8* %14, i64 2
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = icmp eq %"class.absl::container_internal::btree_node"* %13, %2
  %19 = icmp eq i32 %17, %3
  %20 = and i1 %18, %19
  br i1 %20, label %30, label %21

21:                                               ; preds = %11
  %22 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 16, i32 0
  %23 = bitcast i8* %22 to %"class.quic::QuicInterval"*
  %24 = sext i32 %3 to i64
  %25 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %4, i64 0, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %23, i64 %24, i32 0
  %28 = load i64, i64* %27, align 8
  %29 = icmp ult i64 %26, %28
  br i1 %29, label %30, label %109

30:                                               ; preds = %11, %21
  %31 = bitcast %"class.absl::container_internal::btree"* %1 to %"class.absl::container_internal::btree_node"***
  %32 = load %"class.absl::container_internal::btree_node"**, %"class.absl::container_internal::btree_node"*** %31, align 8
  %33 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %32, align 8
  %34 = icmp eq %"class.absl::container_internal::btree_node"* %33, %2
  %35 = icmp eq i32 %3, 0
  %36 = and i1 %35, %34
  br i1 %36, label %102, label %37

37:                                               ; preds = %30
  %38 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 8, i32 0
  %39 = getelementptr inbounds i8, i8* %38, i64 3
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %57, label %42

42:                                               ; preds = %37
  %43 = add nsw i32 %3, -1
  %44 = icmp sgt i32 %3, 0
  br i1 %44, label %91, label %45

45:                                               ; preds = %42, %53
  %46 = phi %"class.absl::container_internal::btree_node"* [ %48, %53 ], [ %2, %42 ]
  %47 = bitcast %"class.absl::container_internal::btree_node"* %46 to %"class.absl::container_internal::btree_node"**
  %48 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %47, align 8
  %49 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %48, i64 8, i32 0
  %50 = getelementptr inbounds i8, i8* %49, i64 3
  %51 = load i8, i8* %50, align 1
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %53, label %91

53:                                               ; preds = %45
  %54 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %46, i64 8, i32 0
  %55 = load i8, i8* %54, align 1
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %45, label %88

57:                                               ; preds = %37
  %58 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 256, i32 0
  %59 = bitcast i8* %58 to %"class.absl::container_internal::btree_node"**
  %60 = sext i32 %3 to i64
  %61 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %59, i64 %60
  %62 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %61, align 8
  %63 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %62, i64 8, i32 0
  %64 = getelementptr inbounds i8, i8* %63, i64 3
  %65 = load i8, i8* %64, align 1
  %66 = icmp eq i8 %65, 0
  %67 = getelementptr inbounds i8, i8* %63, i64 2
  %68 = load i8, i8* %67, align 1
  br i1 %66, label %69, label %83

69:                                               ; preds = %57, %69
  %70 = phi i8 [ %82, %69 ], [ %68, %57 ]
  %71 = phi %"class.absl::container_internal::btree_node"* [ %76, %69 ], [ %62, %57 ]
  %72 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %71, i64 256, i32 0
  %73 = bitcast i8* %72 to %"class.absl::container_internal::btree_node"**
  %74 = zext i8 %70 to i64
  %75 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %73, i64 %74
  %76 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %75, align 8
  %77 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %76, i64 8, i32 0
  %78 = getelementptr inbounds i8, i8* %77, i64 3
  %79 = load i8, i8* %78, align 1
  %80 = icmp eq i8 %79, 0
  %81 = getelementptr inbounds i8, i8* %77, i64 2
  %82 = load i8, i8* %81, align 1
  br i1 %80, label %69, label %83

83:                                               ; preds = %69, %57
  %84 = phi %"class.absl::container_internal::btree_node"* [ %62, %57 ], [ %76, %69 ]
  %85 = phi i8 [ %68, %57 ], [ %82, %69 ]
  %86 = zext i8 %85 to i32
  %87 = add nsw i32 %86, -1
  br label %91

88:                                               ; preds = %53
  %89 = zext i8 %55 to i32
  %90 = add nsw i32 %89, -1
  br label %91

91:                                               ; preds = %45, %88, %83, %42
  %92 = phi i32 [ %87, %83 ], [ %43, %42 ], [ %90, %88 ], [ %43, %45 ]
  %93 = phi %"class.absl::container_internal::btree_node"* [ %84, %83 ], [ %2, %42 ], [ %48, %88 ], [ %2, %45 ]
  %94 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %93, i64 16, i32 0
  %95 = bitcast i8* %94 to %"class.quic::QuicInterval"*
  %96 = sext i32 %92 to i64
  %97 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %95, i64 %96, i32 0
  %98 = load i64, i64* %97, align 8
  %99 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %4, i64 0, i32 0
  %100 = load i64, i64* %99, align 8
  %101 = icmp ult i64 %98, %100
  br i1 %101, label %102, label %181

102:                                              ; preds = %30, %91
  %103 = tail call { %"class.absl::container_internal::btree_node"*, i32 } @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16internal_emplaceIJRKS5_EEENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EESM_DpOT_(%"class.absl::container_internal::btree"* %1, %"class.absl::container_internal::btree_node"* %2, i32 %3, %"class.quic::QuicInterval"* dereferenceable(16) %5)
  %104 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %103, 0
  %105 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %103, 1
  %106 = getelementptr inbounds %"struct.std::__1::pair.642", %"struct.std::__1::pair.642"* %0, i64 0, i32 0, i32 0
  store %"class.absl::container_internal::btree_node"* %104, %"class.absl::container_internal::btree_node"** %106, align 8
  %107 = getelementptr inbounds %"struct.std::__1::pair.642", %"struct.std::__1::pair.642"* %0, i64 0, i32 0, i32 1
  store i32 %105, i32* %107, align 8
  %108 = getelementptr inbounds %"struct.std::__1::pair.642", %"struct.std::__1::pair.642"* %0, i64 0, i32 1
  store i8 1, i8* %108, align 8
  br label %182

109:                                              ; preds = %21
  %110 = icmp ult i64 %28, %26
  br i1 %110, label %111, label %177

111:                                              ; preds = %109
  %112 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 8, i32 0
  %113 = getelementptr inbounds i8, i8* %112, i64 3
  %114 = load i8, i8* %113, align 1
  %115 = icmp eq i8 %114, 0
  %116 = add nsw i32 %3, 1
  br i1 %115, label %136, label %117

117:                                              ; preds = %111
  %118 = getelementptr inbounds i8, i8* %112, i64 2
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i32
  %121 = icmp eq i32 %116, %120
  br i1 %121, label %122, label %157

122:                                              ; preds = %117, %131
  %123 = phi i8* [ %127, %131 ], [ %112, %117 ]
  %124 = phi %"class.absl::container_internal::btree_node"* [ %126, %131 ], [ %2, %117 ]
  %125 = bitcast %"class.absl::container_internal::btree_node"* %124 to %"class.absl::container_internal::btree_node"**
  %126 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %125, align 8
  %127 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %126, i64 8, i32 0
  %128 = getelementptr inbounds i8, i8* %127, i64 3
  %129 = load i8, i8* %128, align 1
  %130 = icmp eq i8 %129, 0
  br i1 %130, label %131, label %157

131:                                              ; preds = %122
  %132 = load i8, i8* %123, align 1
  %133 = getelementptr inbounds i8, i8* %127, i64 2
  %134 = load i8, i8* %133, align 1
  %135 = icmp eq i8 %132, %134
  br i1 %135, label %122, label %155

136:                                              ; preds = %111
  %137 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 256, i32 0
  %138 = bitcast i8* %137 to %"class.absl::container_internal::btree_node"**
  %139 = sext i32 %116 to i64
  %140 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %138, i64 %139
  %141 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %140, align 8
  %142 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %141, i64 8, i32 0
  %143 = getelementptr inbounds i8, i8* %142, i64 3
  %144 = load i8, i8* %143, align 1
  %145 = icmp eq i8 %144, 0
  br i1 %145, label %146, label %157

146:                                              ; preds = %136, %146
  %147 = phi %"class.absl::container_internal::btree_node"* [ %150, %146 ], [ %141, %136 ]
  %148 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %147, i64 256, i32 0
  %149 = bitcast i8* %148 to %"class.absl::container_internal::btree_node"**
  %150 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %149, align 8
  %151 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %150, i64 8, i32 0
  %152 = getelementptr inbounds i8, i8* %151, i64 3
  %153 = load i8, i8* %152, align 1
  %154 = icmp eq i8 %153, 0
  br i1 %154, label %146, label %157

155:                                              ; preds = %131
  %156 = zext i8 %132 to i32
  br label %157

157:                                              ; preds = %122, %146, %155, %117, %136
  %158 = phi %"class.absl::container_internal::btree_node"* [ %2, %117 ], [ %141, %136 ], [ %126, %155 ], [ %150, %146 ], [ %2, %122 ]
  %159 = phi i32 [ %116, %117 ], [ 0, %136 ], [ %156, %155 ], [ 0, %146 ], [ %116, %122 ]
  %160 = icmp eq %"class.absl::container_internal::btree_node"* %158, %13
  %161 = icmp eq i32 %159, %17
  %162 = and i1 %160, %161
  br i1 %162, label %170, label %163

163:                                              ; preds = %157
  %164 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %158, i64 16, i32 0
  %165 = bitcast i8* %164 to %"class.quic::QuicInterval"*
  %166 = sext i32 %159 to i64
  %167 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %165, i64 %166, i32 0
  %168 = load i64, i64* %167, align 8
  %169 = icmp ult i64 %26, %168
  br i1 %169, label %170, label %181

170:                                              ; preds = %157, %163
  %171 = tail call { %"class.absl::container_internal::btree_node"*, i32 } @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16internal_emplaceIJRKS5_EEENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EESM_DpOT_(%"class.absl::container_internal::btree"* %1, %"class.absl::container_internal::btree_node"* %158, i32 %159, %"class.quic::QuicInterval"* dereferenceable(16) %5)
  %172 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %171, 0
  %173 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %171, 1
  %174 = getelementptr inbounds %"struct.std::__1::pair.642", %"struct.std::__1::pair.642"* %0, i64 0, i32 0, i32 0
  store %"class.absl::container_internal::btree_node"* %172, %"class.absl::container_internal::btree_node"** %174, align 8
  %175 = getelementptr inbounds %"struct.std::__1::pair.642", %"struct.std::__1::pair.642"* %0, i64 0, i32 0, i32 1
  store i32 %173, i32* %175, align 8
  %176 = getelementptr inbounds %"struct.std::__1::pair.642", %"struct.std::__1::pair.642"* %0, i64 0, i32 1
  store i8 1, i8* %176, align 8
  br label %182

177:                                              ; preds = %109
  %178 = bitcast %"struct.std::__1::pair.642"* %0 to i64*
  store i64 %7, i64* %178, align 8
  %179 = getelementptr inbounds %"struct.std::__1::pair.642", %"struct.std::__1::pair.642"* %0, i64 0, i32 0, i32 1
  store i32 %3, i32* %179, align 8
  %180 = getelementptr inbounds %"struct.std::__1::pair.642", %"struct.std::__1::pair.642"* %0, i64 0, i32 1
  store i8 0, i8* %180, align 8
  br label %182

181:                                              ; preds = %91, %163, %6
  tail call void @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE13insert_uniqueIS5_JRKS5_EEENS9_4pairINS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EEbEERKT_DpOT0_(%"struct.std::__1::pair.642"* sret %0, %"class.absl::container_internal::btree"* %1, %"class.quic::QuicInterval"* dereferenceable(16) %4, %"class.quic::QuicInterval"* dereferenceable(16) %5)
  br label %182

182:                                              ; preds = %181, %177, %170, %102
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE18insert_hint_uniqueIS5_JS5_EEENS9_4pairINS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EEbEESL_RKT_DpOT0_(%"struct.std::__1::pair.642"* noalias sret, %"class.absl::container_internal::btree"*, %"class.absl::container_internal::btree_node"*, i32, %"class.quic::QuicInterval"* dereferenceable(16), %"class.quic::QuicInterval"* dereferenceable(16)) local_unnamed_addr #8 comdat align 2 {
  %7 = ptrtoint %"class.absl::container_internal::btree_node"* %2 to i64
  %8 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %1, i64 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %181, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %1, i64 0, i32 1
  %13 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %12, align 8
  %14 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %13, i64 8, i32 0
  %15 = getelementptr inbounds i8, i8* %14, i64 2
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = icmp eq %"class.absl::container_internal::btree_node"* %13, %2
  %19 = icmp eq i32 %17, %3
  %20 = and i1 %18, %19
  br i1 %20, label %30, label %21

21:                                               ; preds = %11
  %22 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 16, i32 0
  %23 = bitcast i8* %22 to %"class.quic::QuicInterval"*
  %24 = sext i32 %3 to i64
  %25 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %4, i64 0, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %23, i64 %24, i32 0
  %28 = load i64, i64* %27, align 8
  %29 = icmp ult i64 %26, %28
  br i1 %29, label %30, label %109

30:                                               ; preds = %11, %21
  %31 = bitcast %"class.absl::container_internal::btree"* %1 to %"class.absl::container_internal::btree_node"***
  %32 = load %"class.absl::container_internal::btree_node"**, %"class.absl::container_internal::btree_node"*** %31, align 8
  %33 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %32, align 8
  %34 = icmp eq %"class.absl::container_internal::btree_node"* %33, %2
  %35 = icmp eq i32 %3, 0
  %36 = and i1 %35, %34
  br i1 %36, label %102, label %37

37:                                               ; preds = %30
  %38 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 8, i32 0
  %39 = getelementptr inbounds i8, i8* %38, i64 3
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %57, label %42

42:                                               ; preds = %37
  %43 = add nsw i32 %3, -1
  %44 = icmp sgt i32 %3, 0
  br i1 %44, label %91, label %45

45:                                               ; preds = %42, %53
  %46 = phi %"class.absl::container_internal::btree_node"* [ %48, %53 ], [ %2, %42 ]
  %47 = bitcast %"class.absl::container_internal::btree_node"* %46 to %"class.absl::container_internal::btree_node"**
  %48 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %47, align 8
  %49 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %48, i64 8, i32 0
  %50 = getelementptr inbounds i8, i8* %49, i64 3
  %51 = load i8, i8* %50, align 1
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %53, label %91

53:                                               ; preds = %45
  %54 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %46, i64 8, i32 0
  %55 = load i8, i8* %54, align 1
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %45, label %88

57:                                               ; preds = %37
  %58 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 256, i32 0
  %59 = bitcast i8* %58 to %"class.absl::container_internal::btree_node"**
  %60 = sext i32 %3 to i64
  %61 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %59, i64 %60
  %62 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %61, align 8
  %63 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %62, i64 8, i32 0
  %64 = getelementptr inbounds i8, i8* %63, i64 3
  %65 = load i8, i8* %64, align 1
  %66 = icmp eq i8 %65, 0
  %67 = getelementptr inbounds i8, i8* %63, i64 2
  %68 = load i8, i8* %67, align 1
  br i1 %66, label %69, label %83

69:                                               ; preds = %57, %69
  %70 = phi i8 [ %82, %69 ], [ %68, %57 ]
  %71 = phi %"class.absl::container_internal::btree_node"* [ %76, %69 ], [ %62, %57 ]
  %72 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %71, i64 256, i32 0
  %73 = bitcast i8* %72 to %"class.absl::container_internal::btree_node"**
  %74 = zext i8 %70 to i64
  %75 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %73, i64 %74
  %76 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %75, align 8
  %77 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %76, i64 8, i32 0
  %78 = getelementptr inbounds i8, i8* %77, i64 3
  %79 = load i8, i8* %78, align 1
  %80 = icmp eq i8 %79, 0
  %81 = getelementptr inbounds i8, i8* %77, i64 2
  %82 = load i8, i8* %81, align 1
  br i1 %80, label %69, label %83

83:                                               ; preds = %69, %57
  %84 = phi %"class.absl::container_internal::btree_node"* [ %62, %57 ], [ %76, %69 ]
  %85 = phi i8 [ %68, %57 ], [ %82, %69 ]
  %86 = zext i8 %85 to i32
  %87 = add nsw i32 %86, -1
  br label %91

88:                                               ; preds = %53
  %89 = zext i8 %55 to i32
  %90 = add nsw i32 %89, -1
  br label %91

91:                                               ; preds = %45, %88, %83, %42
  %92 = phi i32 [ %87, %83 ], [ %43, %42 ], [ %90, %88 ], [ %43, %45 ]
  %93 = phi %"class.absl::container_internal::btree_node"* [ %84, %83 ], [ %2, %42 ], [ %48, %88 ], [ %2, %45 ]
  %94 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %93, i64 16, i32 0
  %95 = bitcast i8* %94 to %"class.quic::QuicInterval"*
  %96 = sext i32 %92 to i64
  %97 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %95, i64 %96, i32 0
  %98 = load i64, i64* %97, align 8
  %99 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %4, i64 0, i32 0
  %100 = load i64, i64* %99, align 8
  %101 = icmp ult i64 %98, %100
  br i1 %101, label %102, label %181

102:                                              ; preds = %30, %91
  %103 = tail call { %"class.absl::container_internal::btree_node"*, i32 } @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16internal_emplaceIJS5_EEENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EESK_DpOT_(%"class.absl::container_internal::btree"* %1, %"class.absl::container_internal::btree_node"* %2, i32 %3, %"class.quic::QuicInterval"* dereferenceable(16) %5)
  %104 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %103, 0
  %105 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %103, 1
  %106 = getelementptr inbounds %"struct.std::__1::pair.642", %"struct.std::__1::pair.642"* %0, i64 0, i32 0, i32 0
  store %"class.absl::container_internal::btree_node"* %104, %"class.absl::container_internal::btree_node"** %106, align 8
  %107 = getelementptr inbounds %"struct.std::__1::pair.642", %"struct.std::__1::pair.642"* %0, i64 0, i32 0, i32 1
  store i32 %105, i32* %107, align 8
  %108 = getelementptr inbounds %"struct.std::__1::pair.642", %"struct.std::__1::pair.642"* %0, i64 0, i32 1
  store i8 1, i8* %108, align 8
  br label %182

109:                                              ; preds = %21
  %110 = icmp ult i64 %28, %26
  br i1 %110, label %111, label %177

111:                                              ; preds = %109
  %112 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 8, i32 0
  %113 = getelementptr inbounds i8, i8* %112, i64 3
  %114 = load i8, i8* %113, align 1
  %115 = icmp eq i8 %114, 0
  %116 = add nsw i32 %3, 1
  br i1 %115, label %136, label %117

117:                                              ; preds = %111
  %118 = getelementptr inbounds i8, i8* %112, i64 2
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i32
  %121 = icmp eq i32 %116, %120
  br i1 %121, label %122, label %157

122:                                              ; preds = %117, %131
  %123 = phi i8* [ %127, %131 ], [ %112, %117 ]
  %124 = phi %"class.absl::container_internal::btree_node"* [ %126, %131 ], [ %2, %117 ]
  %125 = bitcast %"class.absl::container_internal::btree_node"* %124 to %"class.absl::container_internal::btree_node"**
  %126 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %125, align 8
  %127 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %126, i64 8, i32 0
  %128 = getelementptr inbounds i8, i8* %127, i64 3
  %129 = load i8, i8* %128, align 1
  %130 = icmp eq i8 %129, 0
  br i1 %130, label %131, label %157

131:                                              ; preds = %122
  %132 = load i8, i8* %123, align 1
  %133 = getelementptr inbounds i8, i8* %127, i64 2
  %134 = load i8, i8* %133, align 1
  %135 = icmp eq i8 %132, %134
  br i1 %135, label %122, label %155

136:                                              ; preds = %111
  %137 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 256, i32 0
  %138 = bitcast i8* %137 to %"class.absl::container_internal::btree_node"**
  %139 = sext i32 %116 to i64
  %140 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %138, i64 %139
  %141 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %140, align 8
  %142 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %141, i64 8, i32 0
  %143 = getelementptr inbounds i8, i8* %142, i64 3
  %144 = load i8, i8* %143, align 1
  %145 = icmp eq i8 %144, 0
  br i1 %145, label %146, label %157

146:                                              ; preds = %136, %146
  %147 = phi %"class.absl::container_internal::btree_node"* [ %150, %146 ], [ %141, %136 ]
  %148 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %147, i64 256, i32 0
  %149 = bitcast i8* %148 to %"class.absl::container_internal::btree_node"**
  %150 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %149, align 8
  %151 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %150, i64 8, i32 0
  %152 = getelementptr inbounds i8, i8* %151, i64 3
  %153 = load i8, i8* %152, align 1
  %154 = icmp eq i8 %153, 0
  br i1 %154, label %146, label %157

155:                                              ; preds = %131
  %156 = zext i8 %132 to i32
  br label %157

157:                                              ; preds = %122, %146, %155, %117, %136
  %158 = phi %"class.absl::container_internal::btree_node"* [ %2, %117 ], [ %141, %136 ], [ %126, %155 ], [ %150, %146 ], [ %2, %122 ]
  %159 = phi i32 [ %116, %117 ], [ 0, %136 ], [ %156, %155 ], [ 0, %146 ], [ %116, %122 ]
  %160 = icmp eq %"class.absl::container_internal::btree_node"* %158, %13
  %161 = icmp eq i32 %159, %17
  %162 = and i1 %160, %161
  br i1 %162, label %170, label %163

163:                                              ; preds = %157
  %164 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %158, i64 16, i32 0
  %165 = bitcast i8* %164 to %"class.quic::QuicInterval"*
  %166 = sext i32 %159 to i64
  %167 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %165, i64 %166, i32 0
  %168 = load i64, i64* %167, align 8
  %169 = icmp ult i64 %26, %168
  br i1 %169, label %170, label %181

170:                                              ; preds = %157, %163
  %171 = tail call { %"class.absl::container_internal::btree_node"*, i32 } @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16internal_emplaceIJS5_EEENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EESK_DpOT_(%"class.absl::container_internal::btree"* %1, %"class.absl::container_internal::btree_node"* %158, i32 %159, %"class.quic::QuicInterval"* dereferenceable(16) %5)
  %172 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %171, 0
  %173 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %171, 1
  %174 = getelementptr inbounds %"struct.std::__1::pair.642", %"struct.std::__1::pair.642"* %0, i64 0, i32 0, i32 0
  store %"class.absl::container_internal::btree_node"* %172, %"class.absl::container_internal::btree_node"** %174, align 8
  %175 = getelementptr inbounds %"struct.std::__1::pair.642", %"struct.std::__1::pair.642"* %0, i64 0, i32 0, i32 1
  store i32 %173, i32* %175, align 8
  %176 = getelementptr inbounds %"struct.std::__1::pair.642", %"struct.std::__1::pair.642"* %0, i64 0, i32 1
  store i8 1, i8* %176, align 8
  br label %182

177:                                              ; preds = %109
  %178 = bitcast %"struct.std::__1::pair.642"* %0 to i64*
  store i64 %7, i64* %178, align 8
  %179 = getelementptr inbounds %"struct.std::__1::pair.642", %"struct.std::__1::pair.642"* %0, i64 0, i32 0, i32 1
  store i32 %3, i32* %179, align 8
  %180 = getelementptr inbounds %"struct.std::__1::pair.642", %"struct.std::__1::pair.642"* %0, i64 0, i32 1
  store i8 0, i8* %180, align 8
  br label %182

181:                                              ; preds = %91, %163, %6
  tail call void @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE13insert_uniqueIS5_JS5_EEENS9_4pairINS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EEbEERKT_DpOT0_(%"struct.std::__1::pair.642"* sret %0, %"class.absl::container_internal::btree"* %1, %"class.quic::QuicInterval"* dereferenceable(16) %4, %"class.quic::QuicInterval"* dereferenceable(16) %5)
  br label %182

182:                                              ; preds = %181, %177, %170, %102
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden { %"class.absl::container_internal::btree_node"*, i32 } @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16internal_emplaceIJS5_EEENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EESK_DpOT_(%"class.absl::container_internal::btree"*, %"class.absl::container_internal::btree_node"*, i32, %"class.quic::QuicInterval"* dereferenceable(16)) local_unnamed_addr #8 comdat align 2 {
  %5 = alloca { %"class.absl::container_internal::btree_node"*, i32 }, align 8
  %6 = bitcast { %"class.absl::container_internal::btree_node"*, i32 }* %5 to %"struct.absl::container_internal::btree_iterator.640"*
  %7 = getelementptr inbounds { %"class.absl::container_internal::btree_node"*, i32 }, { %"class.absl::container_internal::btree_node"*, i32 }* %5, i64 0, i32 0
  store %"class.absl::container_internal::btree_node"* %1, %"class.absl::container_internal::btree_node"** %7, align 8
  %8 = getelementptr inbounds { %"class.absl::container_internal::btree_node"*, i32 }, { %"class.absl::container_internal::btree_node"*, i32 }* %5, i64 0, i32 1
  store i32 %2, i32* %8, align 8
  %9 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %1, i64 8, i32 0
  %10 = getelementptr inbounds i8, i8* %9, i64 3
  %11 = load i8, i8* %10, align 1
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %46

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %1, i64 256, i32 0
  %15 = bitcast i8* %14 to %"class.absl::container_internal::btree_node"**
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %15, i64 %16
  %18 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %17, align 8
  store %"class.absl::container_internal::btree_node"* %18, %"class.absl::container_internal::btree_node"** %7, align 8
  %19 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %18, i64 8, i32 0
  %20 = getelementptr inbounds i8, i8* %19, i64 3
  %21 = load i8, i8* %20, align 1
  %22 = icmp eq i8 %21, 0
  %23 = getelementptr inbounds i8, i8* %19, i64 2
  %24 = load i8, i8* %23, align 1
  br i1 %22, label %25, label %39

25:                                               ; preds = %13, %25
  %26 = phi i8 [ %38, %25 ], [ %24, %13 ]
  %27 = phi %"class.absl::container_internal::btree_node"* [ %32, %25 ], [ %18, %13 ]
  %28 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %27, i64 256, i32 0
  %29 = bitcast i8* %28 to %"class.absl::container_internal::btree_node"**
  %30 = zext i8 %26 to i64
  %31 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %29, i64 %30
  %32 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %31, align 8
  store %"class.absl::container_internal::btree_node"* %32, %"class.absl::container_internal::btree_node"** %7, align 8
  %33 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %32, i64 8, i32 0
  %34 = getelementptr inbounds i8, i8* %33, i64 3
  %35 = load i8, i8* %34, align 1
  %36 = icmp eq i8 %35, 0
  %37 = getelementptr inbounds i8, i8* %33, i64 2
  %38 = load i8, i8* %37, align 1
  br i1 %36, label %25, label %39

39:                                               ; preds = %25, %13
  %40 = phi %"class.absl::container_internal::btree_node"* [ %18, %13 ], [ %32, %25 ]
  %41 = phi i8 [ %24, %13 ], [ %38, %25 ]
  %42 = zext i8 %41 to i32
  store i32 %42, i32* %8, align 8
  %43 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %40, i64 8, i32 0
  %44 = getelementptr inbounds i8, i8* %43, i64 3
  %45 = load i8, i8* %44, align 1
  br label %46

46:                                               ; preds = %4, %39
  %47 = phi i8 [ %11, %4 ], [ %45, %39 ]
  %48 = phi %"class.absl::container_internal::btree_node"* [ %1, %4 ], [ %40, %39 ]
  %49 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %48, i64 8, i32 0
  %50 = icmp eq i8 %47, 0
  %51 = select i1 %50, i8 15, i8 %47
  %52 = bitcast %"class.absl::container_internal::btree"* %0 to %"class.std::__1::allocator"*
  %53 = getelementptr inbounds i8, i8* %49, i64 2
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %51 to i32
  %56 = icmp eq i8 %54, %51
  br i1 %56, label %57, label %138

57:                                               ; preds = %46
  %58 = icmp ult i8 %51, 15
  br i1 %58, label %59, label %136

59:                                               ; preds = %57
  %60 = shl nuw nsw i32 %55, 1
  %61 = icmp ult i32 %60, 15
  %62 = select i1 %61, i32 %60, i32 15
  %63 = shl nuw nsw i32 %62, 4
  %64 = add nuw nsw i32 %63, 23
  %65 = and i32 %64, 496
  %66 = zext i32 %65 to i64
  %67 = tail call i8* @_Znwm(i64 %66) #11
  %68 = bitcast i8* %67 to i8**
  store i8* %67, i8** %68, align 8
  %69 = getelementptr inbounds i8, i8* %67, i64 8
  store i8 0, i8* %69, align 1
  %70 = getelementptr inbounds i8, i8* %67, i64 9
  store i8 0, i8* %70, align 1
  %71 = getelementptr inbounds i8, i8* %67, i64 10
  store i8 0, i8* %71, align 1
  %72 = trunc i32 %62 to i8
  %73 = getelementptr inbounds i8, i8* %67, i64 11
  store i8 %72, i8* %73, align 1
  %74 = bitcast { %"class.absl::container_internal::btree_node"*, i32 }* %5 to i8**
  store i8* %67, i8** %74, align 8
  %75 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %76 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %75, align 8
  %77 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %76, i64 8, i32 0
  %78 = getelementptr inbounds i8, i8* %77, i64 2
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i64
  %81 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %76, i64 16, i32 0
  %82 = bitcast i8* %81 to %"class.quic::QuicInterval"*
  %83 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %82, i64 %80
  %84 = icmp eq i8 %79, 0
  %85 = bitcast i8* %67 to %"class.absl::container_internal::btree_node"*
  br i1 %84, label %131, label %86

86:                                               ; preds = %59
  %87 = getelementptr inbounds i8, i8* %67, i64 16
  %88 = bitcast i8* %87 to %"class.quic::QuicInterval"*
  %89 = shl nuw nsw i64 %80, 4
  %90 = add nsw i64 %89, -16
  %91 = lshr exact i64 %90, 4
  %92 = add nuw nsw i64 %91, 1
  %93 = and i64 %92, 3
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %105, label %95

95:                                               ; preds = %86, %95
  %96 = phi %"class.quic::QuicInterval"* [ %102, %95 ], [ %88, %86 ]
  %97 = phi %"class.quic::QuicInterval"* [ %101, %95 ], [ %82, %86 ]
  %98 = phi i64 [ %103, %95 ], [ %93, %86 ]
  %99 = bitcast %"class.quic::QuicInterval"* %96 to i8*
  %100 = bitcast %"class.quic::QuicInterval"* %97 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %99, i8* align 8 %100, i64 16, i1 false) #10
  %101 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %97, i64 1
  %102 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %96, i64 1
  %103 = add i64 %98, -1
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %105, label %95, !llvm.loop !37

105:                                              ; preds = %95, %86
  %106 = phi %"class.quic::QuicInterval"* [ %88, %86 ], [ %102, %95 ]
  %107 = phi %"class.quic::QuicInterval"* [ %82, %86 ], [ %101, %95 ]
  %108 = icmp ult i64 %90, 48
  br i1 %108, label %129, label %109

109:                                              ; preds = %105, %109
  %110 = phi %"class.quic::QuicInterval"* [ %127, %109 ], [ %106, %105 ]
  %111 = phi %"class.quic::QuicInterval"* [ %126, %109 ], [ %107, %105 ]
  %112 = bitcast %"class.quic::QuicInterval"* %110 to i8*
  %113 = bitcast %"class.quic::QuicInterval"* %111 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %112, i8* align 8 %113, i64 16, i1 false) #10
  %114 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %111, i64 1
  %115 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %110, i64 1
  %116 = bitcast %"class.quic::QuicInterval"* %115 to i8*
  %117 = bitcast %"class.quic::QuicInterval"* %114 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %116, i8* align 8 %117, i64 16, i1 false) #10
  %118 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %111, i64 2
  %119 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %110, i64 2
  %120 = bitcast %"class.quic::QuicInterval"* %119 to i8*
  %121 = bitcast %"class.quic::QuicInterval"* %118 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %120, i8* align 8 %121, i64 16, i1 false) #10
  %122 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %111, i64 3
  %123 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %110, i64 3
  %124 = bitcast %"class.quic::QuicInterval"* %123 to i8*
  %125 = bitcast %"class.quic::QuicInterval"* %122 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %124, i8* align 8 %125, i64 16, i1 false) #10
  %126 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %111, i64 4
  %127 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %110, i64 4
  %128 = icmp eq %"class.quic::QuicInterval"* %126, %83
  br i1 %128, label %129, label %109

129:                                              ; preds = %109, %105
  %130 = load i8, i8* %78, align 1
  br label %131

131:                                              ; preds = %129, %59
  %132 = phi i8 [ %130, %129 ], [ 0, %59 ]
  store i8 %132, i8* %71, align 1
  store i8 0, i8* %78, align 1
  tail call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16clear_and_deleteEPSD_PSB_(%"class.absl::container_internal::btree_node"* %76, %"class.std::__1::allocator"* %52)
  %133 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %0, i64 0, i32 1
  %134 = bitcast %"class.absl::container_internal::btree_node"** %133 to i8**
  store i8* %67, i8** %134, align 8
  %135 = bitcast %"class.absl::container_internal::btree"* %0 to i8**
  store i8* %67, i8** %135, align 8
  br label %138

136:                                              ; preds = %57
  call void @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE18rebalance_or_splitEPNS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EE(%"class.absl::container_internal::btree"* %0, %"struct.absl::container_internal::btree_iterator.640"* nonnull %6)
  %137 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %7, align 8
  br label %138

138:                                              ; preds = %131, %136, %46
  %139 = phi %"class.absl::container_internal::btree_node"* [ %85, %131 ], [ %137, %136 ], [ %48, %46 ]
  %140 = load i32, i32* %8, align 8
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %139, i64 8, i32 0
  %143 = getelementptr inbounds i8, i8* %142, i64 2
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i64
  %146 = icmp sgt i64 %145, %141
  br i1 %146, label %147, label %204

147:                                              ; preds = %138
  %148 = sub nsw i64 %145, %141
  %149 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %139, i64 16, i32 0
  %150 = bitcast i8* %149 to %"class.quic::QuicInterval"*
  %151 = shl nuw nsw i64 %145, 32
  %152 = add nsw i64 %151, -4294967296
  %153 = ashr exact i64 %152, 32
  %154 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %150, i64 %153
  %155 = sub nsw i64 0, %148
  %156 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %154, i64 %155
  %157 = icmp eq i64 %148, 0
  br i1 %157, label %204, label %158

158:                                              ; preds = %147
  %159 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %150, i64 %145
  %160 = shl nuw nsw i64 %145, 4
  %161 = add nsw i64 %160, -16
  %162 = shl nsw i64 %141, 4
  %163 = sub nsw i64 %161, %162
  %164 = lshr exact i64 %163, 4
  %165 = add nuw nsw i64 %164, 1
  %166 = and i64 %165, 3
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %178, label %168

168:                                              ; preds = %158, %168
  %169 = phi %"class.quic::QuicInterval"* [ %175, %168 ], [ %159, %158 ]
  %170 = phi %"class.quic::QuicInterval"* [ %174, %168 ], [ %154, %158 ]
  %171 = phi i64 [ %176, %168 ], [ %166, %158 ]
  %172 = bitcast %"class.quic::QuicInterval"* %169 to i8*
  %173 = bitcast %"class.quic::QuicInterval"* %170 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %172, i8* align 8 %173, i64 16, i1 false) #10
  %174 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %170, i64 -1
  %175 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %169, i64 -1
  %176 = add i64 %171, -1
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %178, label %168, !llvm.loop !38

178:                                              ; preds = %168, %158
  %179 = phi %"class.quic::QuicInterval"* [ %159, %158 ], [ %175, %168 ]
  %180 = phi %"class.quic::QuicInterval"* [ %154, %158 ], [ %174, %168 ]
  %181 = icmp ult i64 %163, 48
  br i1 %181, label %202, label %182

182:                                              ; preds = %178, %182
  %183 = phi %"class.quic::QuicInterval"* [ %200, %182 ], [ %179, %178 ]
  %184 = phi %"class.quic::QuicInterval"* [ %199, %182 ], [ %180, %178 ]
  %185 = bitcast %"class.quic::QuicInterval"* %183 to i8*
  %186 = bitcast %"class.quic::QuicInterval"* %184 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %185, i8* align 8 %186, i64 16, i1 false) #10
  %187 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %184, i64 -1
  %188 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %183, i64 -1
  %189 = bitcast %"class.quic::QuicInterval"* %188 to i8*
  %190 = bitcast %"class.quic::QuicInterval"* %187 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %189, i8* align 8 %190, i64 16, i1 false) #10
  %191 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %184, i64 -2
  %192 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %183, i64 -2
  %193 = bitcast %"class.quic::QuicInterval"* %192 to i8*
  %194 = bitcast %"class.quic::QuicInterval"* %191 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %193, i8* align 8 %194, i64 16, i1 false) #10
  %195 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %184, i64 -3
  %196 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %183, i64 -3
  %197 = bitcast %"class.quic::QuicInterval"* %196 to i8*
  %198 = bitcast %"class.quic::QuicInterval"* %195 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %197, i8* align 8 %198, i64 16, i1 false) #10
  %199 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %184, i64 -4
  %200 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %183, i64 -4
  %201 = icmp eq %"class.quic::QuicInterval"* %199, %156
  br i1 %201, label %202, label %182

202:                                              ; preds = %182, %178
  %203 = load i8, i8* %143, align 1
  br label %204

204:                                              ; preds = %138, %202, %147
  %205 = phi i8 [ %203, %202 ], [ %144, %147 ], [ %144, %138 ]
  %206 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %139, i64 16, i32 0
  %207 = bitcast i8* %206 to %"class.quic::QuicInterval"*
  %208 = and i64 %141, 255
  %209 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %207, i64 %208
  %210 = bitcast %"class.quic::QuicInterval"* %209 to i8*
  %211 = bitcast %"class.quic::QuicInterval"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %210, i8* align 8 %211, i64 16, i1 false) #10
  %212 = add i8 %205, 1
  store i8 %212, i8* %143, align 1
  %213 = getelementptr inbounds i8, i8* %142, i64 3
  %214 = load i8, i8* %213, align 1
  %215 = icmp eq i8 %214, 0
  br i1 %215, label %216, label %270

216:                                              ; preds = %204
  %217 = zext i8 %212 to i64
  %218 = add nsw i64 %141, 1
  %219 = icmp slt i64 %218, %217
  br i1 %219, label %220, label %270

220:                                              ; preds = %216
  %221 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %139, i64 256, i32 0
  %222 = bitcast i8* %221 to %"class.absl::container_internal::btree_node"**
  %223 = xor i64 %141, 3
  %224 = add nsw i64 %223, %217
  %225 = add nsw i64 %217, -2
  %226 = sub nsw i64 %225, %141
  %227 = and i64 %224, 3
  %228 = icmp eq i64 %227, 0
  br i1 %228, label %240, label %229

229:                                              ; preds = %220, %229
  %230 = phi i64 [ %232, %229 ], [ %217, %220 ]
  %231 = phi i64 [ %238, %229 ], [ %227, %220 ]
  %232 = add nsw i64 %230, -1
  %233 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %232
  %234 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %233, align 8
  %235 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %230
  store %"class.absl::container_internal::btree_node"* %234, %"class.absl::container_internal::btree_node"** %235, align 8
  %236 = trunc i64 %230 to i8
  %237 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %234, i64 8, i32 0
  store i8 %236, i8* %237, align 1
  %238 = add i64 %231, -1
  %239 = icmp eq i64 %238, 0
  br i1 %239, label %240, label %229, !llvm.loop !39

240:                                              ; preds = %229, %220
  %241 = phi i64 [ %217, %220 ], [ %232, %229 ]
  %242 = icmp ult i64 %226, 3
  br i1 %242, label %270, label %243

243:                                              ; preds = %240, %243
  %244 = phi i64 [ %263, %243 ], [ %241, %240 ]
  %245 = add nsw i64 %244, -1
  %246 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %245
  %247 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %246, align 8
  %248 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %244
  store %"class.absl::container_internal::btree_node"* %247, %"class.absl::container_internal::btree_node"** %248, align 8
  %249 = trunc i64 %244 to i8
  %250 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %247, i64 8, i32 0
  store i8 %249, i8* %250, align 1
  %251 = add nsw i64 %244, -2
  %252 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %251
  %253 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %252, align 8
  %254 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %245
  store %"class.absl::container_internal::btree_node"* %253, %"class.absl::container_internal::btree_node"** %254, align 8
  %255 = trunc i64 %245 to i8
  %256 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %253, i64 8, i32 0
  store i8 %255, i8* %256, align 1
  %257 = add nsw i64 %244, -3
  %258 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %257
  %259 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %258, align 8
  %260 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %251
  store %"class.absl::container_internal::btree_node"* %259, %"class.absl::container_internal::btree_node"** %260, align 8
  %261 = trunc i64 %251 to i8
  %262 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %259, i64 8, i32 0
  store i8 %261, i8* %262, align 1
  %263 = add nsw i64 %244, -4
  %264 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %263
  %265 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %264, align 8
  %266 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %257
  store %"class.absl::container_internal::btree_node"* %265, %"class.absl::container_internal::btree_node"** %266, align 8
  %267 = trunc i64 %257 to i8
  %268 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %265, i64 8, i32 0
  store i8 %267, i8* %268, align 1
  %269 = icmp slt i64 %218, %263
  br i1 %269, label %243, label %270

270:                                              ; preds = %240, %243, %204, %216
  %271 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %0, i64 0, i32 2
  %272 = load i64, i64* %271, align 8
  %273 = add nsw i64 %272, 1
  store i64 %273, i64* %271, align 8
  %274 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %7, align 8
  %275 = load i32, i32* %8, align 8
  %276 = insertvalue { %"class.absl::container_internal::btree_node"*, i32 } undef, %"class.absl::container_internal::btree_node"* %274, 0
  %277 = insertvalue { %"class.absl::container_internal::btree_node"*, i32 } %276, i32 %275, 1
  ret { %"class.absl::container_internal::btree_node"*, i32 } %277
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE13insert_uniqueIS5_JS5_EEENS9_4pairINS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EEbEERKT_DpOT0_(%"struct.std::__1::pair.642"* noalias sret, %"class.absl::container_internal::btree"*, %"class.quic::QuicInterval"* dereferenceable(16), %"class.quic::QuicInterval"* dereferenceable(16)) local_unnamed_addr #1 comdat align 2 {
  %5 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %1, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %8, label %18

8:                                                ; preds = %4
  %9 = tail call i8* @_Znwm(i64 32) #11
  %10 = bitcast i8* %9 to i8**
  store i8* %9, i8** %10, align 8
  %11 = getelementptr inbounds i8, i8* %9, i64 8
  store i8 0, i8* %11, align 1
  %12 = getelementptr inbounds i8, i8* %9, i64 9
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds i8, i8* %9, i64 10
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds i8, i8* %9, i64 11
  store i8 1, i8* %14, align 1
  %15 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %1, i64 0, i32 1
  %16 = bitcast %"class.absl::container_internal::btree_node"** %15 to i8**
  store i8* %9, i8** %16, align 8
  %17 = bitcast %"class.absl::container_internal::btree"* %1 to i8**
  store i8* %9, i8** %17, align 8
  br label %18

18:                                               ; preds = %8, %4
  %19 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %2, i64 0, i32 0
  %21 = load i64, i64* %20, align 8
  br label %22

22:                                               ; preds = %54, %18
  %23 = phi %"class.absl::container_internal::btree_node"** [ %19, %18 ], [ %58, %54 ]
  %24 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %23, align 8
  %25 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %24, i64 8, i32 0
  %26 = getelementptr inbounds i8, i8* %25, i64 2
  %27 = load i8, i8* %26, align 1
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %46, label %29

29:                                               ; preds = %22
  %30 = zext i8 %27 to i32
  %31 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %24, i64 16, i32 0
  %32 = bitcast i8* %31 to %"class.quic::QuicInterval"*
  br label %33

33:                                               ; preds = %33, %29
  %34 = phi i32 [ 0, %29 ], [ %44, %33 ]
  %35 = phi i32 [ %30, %29 ], [ %43, %33 ]
  %36 = add nsw i32 %35, %34
  %37 = ashr i32 %36, 1
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %32, i64 %38, i32 0
  %40 = load i64, i64* %39, align 8
  %41 = icmp ult i64 %40, %21
  %42 = add nsw i32 %37, 1
  %43 = select i1 %41, i32 %35, i32 %37
  %44 = select i1 %41, i32 %42, i32 %34
  %45 = icmp eq i32 %44, %43
  br i1 %45, label %46, label %33

46:                                               ; preds = %33, %22
  %47 = phi i32 [ 0, %22 ], [ %43, %33 ]
  %48 = getelementptr inbounds i8, i8* %25, i64 3
  %49 = load i8, i8* %48, align 1
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %54, label %51

51:                                               ; preds = %46
  %52 = zext i8 %27 to i32
  %53 = icmp eq i32 %47, %52
  br i1 %53, label %59, label %75

54:                                               ; preds = %46
  %55 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %24, i64 256, i32 0
  %56 = bitcast i8* %55 to %"class.absl::container_internal::btree_node"**
  %57 = sext i32 %47 to i64
  %58 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %56, i64 %57
  br label %22

59:                                               ; preds = %51, %67
  %60 = phi %"class.absl::container_internal::btree_node"* [ %62, %67 ], [ %24, %51 ]
  %61 = bitcast %"class.absl::container_internal::btree_node"* %60 to %"class.absl::container_internal::btree_node"**
  %62 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %61, align 8
  %63 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %62, i64 8, i32 0
  %64 = getelementptr inbounds i8, i8* %63, i64 3
  %65 = load i8, i8* %64, align 1
  %66 = icmp eq i8 %65, 0
  br i1 %66, label %67, label %92

67:                                               ; preds = %59
  %68 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %60, i64 8, i32 0
  %69 = load i8, i8* %68, align 1
  %70 = getelementptr inbounds i8, i8* %63, i64 2
  %71 = load i8, i8* %70, align 1
  %72 = icmp eq i8 %69, %71
  br i1 %72, label %59, label %73

73:                                               ; preds = %67
  %74 = zext i8 %69 to i32
  br label %75

75:                                               ; preds = %73, %51
  %76 = phi i32 [ %74, %73 ], [ %47, %51 ]
  %77 = phi %"class.absl::container_internal::btree_node"* [ %62, %73 ], [ %24, %51 ]
  %78 = icmp eq %"class.absl::container_internal::btree_node"* %77, null
  br i1 %78, label %92, label %79

79:                                               ; preds = %75
  %80 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %77, i64 16, i32 0
  %81 = bitcast i8* %80 to %"class.quic::QuicInterval"*
  %82 = sext i32 %76 to i64
  %83 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %81, i64 %82, i32 0
  %84 = load i64, i64* %83, align 8
  %85 = icmp ult i64 %21, %84
  br i1 %85, label %92, label %86

86:                                               ; preds = %79
  %87 = getelementptr inbounds %"struct.std::__1::pair.642", %"struct.std::__1::pair.642"* %0, i64 0, i32 0, i32 0
  store %"class.absl::container_internal::btree_node"* %77, %"class.absl::container_internal::btree_node"** %87, align 8
  %88 = getelementptr inbounds %"struct.std::__1::pair.642", %"struct.std::__1::pair.642"* %0, i64 0, i32 0, i32 1
  store i32 %76, i32* %88, align 8
  %89 = getelementptr inbounds %"struct.std::__1::pair.642", %"struct.std::__1::pair.642"* %0, i64 0, i32 0, i32 2, i64 0
  %90 = getelementptr inbounds %"struct.std::__1::pair.642", %"struct.std::__1::pair.642"* %0, i64 0, i32 1
  %91 = bitcast i8* %89 to i32*
  store i32 -1431655766, i32* %91, align 4
  store i8 0, i8* %90, align 8
  br label %99

92:                                               ; preds = %59, %79, %75
  %93 = tail call { %"class.absl::container_internal::btree_node"*, i32 } @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16internal_emplaceIJS5_EEENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EESK_DpOT_(%"class.absl::container_internal::btree"* %1, %"class.absl::container_internal::btree_node"* %24, i32 %47, %"class.quic::QuicInterval"* dereferenceable(16) %3)
  %94 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %93, 0
  %95 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %93, 1
  %96 = getelementptr inbounds %"struct.std::__1::pair.642", %"struct.std::__1::pair.642"* %0, i64 0, i32 0, i32 0
  store %"class.absl::container_internal::btree_node"* %94, %"class.absl::container_internal::btree_node"** %96, align 8
  %97 = getelementptr inbounds %"struct.std::__1::pair.642", %"struct.std::__1::pair.642"* %0, i64 0, i32 0, i32 1
  store i32 %95, i32* %97, align 8
  %98 = getelementptr inbounds %"struct.std::__1::pair.642", %"struct.std::__1::pair.642"* %0, i64 0, i32 1
  store i8 1, i8* %98, align 8
  br label %99

99:                                               ; preds = %86, %92
  ret void
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6quiche19QuicheCircularDequeIN4quic17QuicHeadersStream20CompressedHeaderInfoELm3ENSt3__19allocatorIS3_EEE8RelocateEm(%"class.quiche::QuicheCircularDeque.630"*, i64) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.quiche::QuicheCircularDeque.630", %"class.quiche::QuicheCircularDeque.630"* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.quiche::QuicheCircularDeque.630", %"class.quiche::QuicheCircularDeque.630"* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp ult i64 %6, %4
  br i1 %7, label %8, label %12

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.quiche::QuicheCircularDeque.630", %"class.quiche::QuicheCircularDeque.630"* %0, i64 0, i32 2, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = add i64 %10, %6
  br label %12

12:                                               ; preds = %2, %8
  %13 = phi i64 [ %11, %8 ], [ %6, %2 ]
  %14 = sub i64 %13, %4
  %15 = add i64 %1, 1
  %16 = getelementptr inbounds %"class.quiche::QuicheCircularDeque.630", %"class.quiche::QuicheCircularDeque.630"* %0, i64 0, i32 2
  %17 = icmp ugt i64 %15, 576460752303423487
  br i1 %17, label %18, label %19

18:                                               ; preds = %12
  tail call void @abort() #12
  unreachable

19:                                               ; preds = %12
  %20 = shl i64 %15, 5
  %21 = tail call i8* @_Znwm(i64 %20) #11
  %22 = bitcast i8* %21 to %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"*
  %23 = icmp ult i64 %4, %6
  br i1 %23, label %24, label %60

24:                                               ; preds = %19
  %25 = getelementptr inbounds %"class.quiche::QuicheCircularDeque.630", %"class.quiche::QuicheCircularDeque.630"* %0, i64 0, i32 2, i32 0
  %26 = load %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"*, %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"** %25, align 8
  %27 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %26, i64 %6
  %28 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %26, i64 %4
  br label %29

29:                                               ; preds = %56, %24
  %30 = phi %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* [ %58, %56 ], [ %28, %24 ]
  %31 = phi %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* [ %57, %56 ], [ %22, %24 ]
  %32 = bitcast %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %31 to i8*
  %33 = bitcast %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %30 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %33, i64 24, i1 false) #10
  %34 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %30, i64 0, i32 3, i32 0, i32 0, i32 0
  %35 = load %"class.quic::QuicAckListenerInterface"*, %"class.quic::QuicAckListenerInterface"** %34, align 8
  %36 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %31, i64 0, i32 3, i32 0, i32 0, i32 0
  store %"class.quic::QuicAckListenerInterface"* %35, %"class.quic::QuicAckListenerInterface"** %36, align 8
  %37 = icmp eq %"class.quic::QuicAckListenerInterface"* %35, null
  br i1 %37, label %41, label %38

38:                                               ; preds = %29
  %39 = getelementptr inbounds %"class.quic::QuicAckListenerInterface", %"class.quic::QuicAckListenerInterface"* %35, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = atomicrmw add i32* %39, i32 1 monotonic
  br label %41

41:                                               ; preds = %38, %29
  %42 = load %"class.quic::QuicAckListenerInterface"*, %"class.quic::QuicAckListenerInterface"** %34, align 8
  %43 = icmp eq %"class.quic::QuicAckListenerInterface"* %42, null
  br i1 %43, label %56, label %44

44:                                               ; preds = %41
  %45 = getelementptr inbounds %"class.quic::QuicAckListenerInterface", %"class.quic::QuicAckListenerInterface"* %42, i64 0, i32 0, i32 0, i32 1
  %46 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %45, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = atomicrmw sub i32* %46, i32 1 acq_rel
  %48 = icmp eq i32 %47, 1
  br i1 %48, label %49, label %56

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %45, i64 -2
  %51 = bitcast %"class.base::RefCountedThreadSafe"* %50 to %"class.quic::QuicReferenceCountedImpl"*
  %52 = bitcast %"class.base::RefCountedThreadSafe"* %50 to void (%"class.quic::QuicReferenceCountedImpl"*)***
  %53 = load void (%"class.quic::QuicReferenceCountedImpl"*)**, void (%"class.quic::QuicReferenceCountedImpl"*)*** %52, align 8
  %54 = getelementptr inbounds void (%"class.quic::QuicReferenceCountedImpl"*)*, void (%"class.quic::QuicReferenceCountedImpl"*)** %53, i64 1
  %55 = load void (%"class.quic::QuicReferenceCountedImpl"*)*, void (%"class.quic::QuicReferenceCountedImpl"*)** %54, align 8
  tail call void %55(%"class.quic::QuicReferenceCountedImpl"* nonnull %51) #10
  br label %56

56:                                               ; preds = %49, %44, %41
  %57 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %31, i64 1
  %58 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %30, i64 1
  %59 = icmp eq %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %58, %27
  br i1 %59, label %143, label %29

60:                                               ; preds = %19
  br i1 %7, label %61, label %143

61:                                               ; preds = %60
  %62 = getelementptr inbounds %"class.quiche::QuicheCircularDeque.630", %"class.quiche::QuicheCircularDeque.630"* %0, i64 0, i32 2, i32 1
  %63 = load i64, i64* %62, align 8
  %64 = sub i64 %63, %4
  %65 = getelementptr inbounds %"class.quiche::QuicheCircularDeque.630", %"class.quiche::QuicheCircularDeque.630"* %0, i64 0, i32 2, i32 0
  %66 = load %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"*, %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"** %65, align 8
  %67 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %66, i64 %63
  %68 = icmp eq i64 %63, %4
  br i1 %68, label %105, label %69

69:                                               ; preds = %61
  %70 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %66, i64 %4
  br label %71

71:                                               ; preds = %98, %69
  %72 = phi %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* [ %100, %98 ], [ %70, %69 ]
  %73 = phi %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* [ %99, %98 ], [ %22, %69 ]
  %74 = bitcast %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %73 to i8*
  %75 = bitcast %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %72 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %74, i8* align 8 %75, i64 24, i1 false) #10
  %76 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %72, i64 0, i32 3, i32 0, i32 0, i32 0
  %77 = load %"class.quic::QuicAckListenerInterface"*, %"class.quic::QuicAckListenerInterface"** %76, align 8
  %78 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %73, i64 0, i32 3, i32 0, i32 0, i32 0
  store %"class.quic::QuicAckListenerInterface"* %77, %"class.quic::QuicAckListenerInterface"** %78, align 8
  %79 = icmp eq %"class.quic::QuicAckListenerInterface"* %77, null
  br i1 %79, label %83, label %80

80:                                               ; preds = %71
  %81 = getelementptr inbounds %"class.quic::QuicAckListenerInterface", %"class.quic::QuicAckListenerInterface"* %77, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %82 = atomicrmw add i32* %81, i32 1 monotonic
  br label %83

83:                                               ; preds = %80, %71
  %84 = load %"class.quic::QuicAckListenerInterface"*, %"class.quic::QuicAckListenerInterface"** %76, align 8
  %85 = icmp eq %"class.quic::QuicAckListenerInterface"* %84, null
  br i1 %85, label %98, label %86

86:                                               ; preds = %83
  %87 = getelementptr inbounds %"class.quic::QuicAckListenerInterface", %"class.quic::QuicAckListenerInterface"* %84, i64 0, i32 0, i32 0, i32 1
  %88 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %87, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %89 = atomicrmw sub i32* %88, i32 1 acq_rel
  %90 = icmp eq i32 %89, 1
  br i1 %90, label %91, label %98

91:                                               ; preds = %86
  %92 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %87, i64 -2
  %93 = bitcast %"class.base::RefCountedThreadSafe"* %92 to %"class.quic::QuicReferenceCountedImpl"*
  %94 = bitcast %"class.base::RefCountedThreadSafe"* %92 to void (%"class.quic::QuicReferenceCountedImpl"*)***
  %95 = load void (%"class.quic::QuicReferenceCountedImpl"*)**, void (%"class.quic::QuicReferenceCountedImpl"*)*** %94, align 8
  %96 = getelementptr inbounds void (%"class.quic::QuicReferenceCountedImpl"*)*, void (%"class.quic::QuicReferenceCountedImpl"*)** %95, i64 1
  %97 = load void (%"class.quic::QuicReferenceCountedImpl"*)*, void (%"class.quic::QuicReferenceCountedImpl"*)** %96, align 8
  tail call void %97(%"class.quic::QuicReferenceCountedImpl"* nonnull %93) #10
  br label %98

98:                                               ; preds = %91, %86, %83
  %99 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %73, i64 1
  %100 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %72, i64 1
  %101 = icmp eq %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %100, %67
  br i1 %101, label %102, label %71

102:                                              ; preds = %98
  %103 = load i64, i64* %5, align 8
  %104 = load %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"*, %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"** %65, align 8
  br label %105

105:                                              ; preds = %102, %61
  %106 = phi %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* [ %104, %102 ], [ %66, %61 ]
  %107 = phi i64 [ %103, %102 ], [ %6, %61 ]
  %108 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %106, i64 %107
  %109 = icmp eq i64 %107, 0
  br i1 %109, label %143, label %110

110:                                              ; preds = %105
  %111 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %22, i64 %64
  br label %112

112:                                              ; preds = %110, %139
  %113 = phi %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* [ %141, %139 ], [ %106, %110 ]
  %114 = phi %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* [ %140, %139 ], [ %111, %110 ]
  %115 = bitcast %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %114 to i8*
  %116 = bitcast %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %113 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %115, i8* align 8 %116, i64 24, i1 false) #10
  %117 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %113, i64 0, i32 3, i32 0, i32 0, i32 0
  %118 = load %"class.quic::QuicAckListenerInterface"*, %"class.quic::QuicAckListenerInterface"** %117, align 8
  %119 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %114, i64 0, i32 3, i32 0, i32 0, i32 0
  store %"class.quic::QuicAckListenerInterface"* %118, %"class.quic::QuicAckListenerInterface"** %119, align 8
  %120 = icmp eq %"class.quic::QuicAckListenerInterface"* %118, null
  br i1 %120, label %124, label %121

121:                                              ; preds = %112
  %122 = getelementptr inbounds %"class.quic::QuicAckListenerInterface", %"class.quic::QuicAckListenerInterface"* %118, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %123 = atomicrmw add i32* %122, i32 1 monotonic
  br label %124

124:                                              ; preds = %121, %112
  %125 = load %"class.quic::QuicAckListenerInterface"*, %"class.quic::QuicAckListenerInterface"** %117, align 8
  %126 = icmp eq %"class.quic::QuicAckListenerInterface"* %125, null
  br i1 %126, label %139, label %127

127:                                              ; preds = %124
  %128 = getelementptr inbounds %"class.quic::QuicAckListenerInterface", %"class.quic::QuicAckListenerInterface"* %125, i64 0, i32 0, i32 0, i32 1
  %129 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %128, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %130 = atomicrmw sub i32* %129, i32 1 acq_rel
  %131 = icmp eq i32 %130, 1
  br i1 %131, label %132, label %139

132:                                              ; preds = %127
  %133 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %128, i64 -2
  %134 = bitcast %"class.base::RefCountedThreadSafe"* %133 to %"class.quic::QuicReferenceCountedImpl"*
  %135 = bitcast %"class.base::RefCountedThreadSafe"* %133 to void (%"class.quic::QuicReferenceCountedImpl"*)***
  %136 = load void (%"class.quic::QuicReferenceCountedImpl"*)**, void (%"class.quic::QuicReferenceCountedImpl"*)*** %135, align 8
  %137 = getelementptr inbounds void (%"class.quic::QuicReferenceCountedImpl"*)*, void (%"class.quic::QuicReferenceCountedImpl"*)** %136, i64 1
  %138 = load void (%"class.quic::QuicReferenceCountedImpl"*)*, void (%"class.quic::QuicReferenceCountedImpl"*)** %137, align 8
  tail call void %138(%"class.quic::QuicReferenceCountedImpl"* nonnull %134) #10
  br label %139

139:                                              ; preds = %132, %127, %124
  %140 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %114, i64 1
  %141 = getelementptr inbounds %"struct.quic::QuicHeadersStream::CompressedHeaderInfo", %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %113, i64 1
  %142 = icmp eq %"struct.quic::QuicHeadersStream::CompressedHeaderInfo"* %141, %108
  br i1 %142, label %143, label %112

143:                                              ; preds = %139, %56, %105, %60
  %144 = getelementptr inbounds %"class.quiche::QuicheCircularDeque.630", %"class.quiche::QuicheCircularDeque.630"* %0, i64 0, i32 2, i32 1
  %145 = load i64, i64* %144, align 8
  %146 = icmp eq i64 %145, 0
  %147 = bitcast %"struct.quiche::QuicheCircularDeque<quic::QuicHeadersStream::CompressedHeaderInfo, 3, std::__1::allocator<quic::QuicHeadersStream::CompressedHeaderInfo> >::AllocatorAndData"* %16 to i8**
  br i1 %146, label %150, label %148

148:                                              ; preds = %143
  %149 = load i8*, i8** %147, align 8
  tail call void @_ZdlPv(i8* %149) #11
  br label %150

150:                                              ; preds = %143, %148
  store i8* %21, i8** %147, align 8
  store i64 %15, i64* %144, align 8
  store i64 0, i64* %3, align 8
  store i64 %14, i64* %5, align 8
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { cold noreturn nounwind }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{!5}
!5 = distinct !{!5, !6, !"_ZN6quiche19QuicheCircularDequeIN4quic17QuicHeadersStream20CompressedHeaderInfoELm3ENSt3__19allocatorIS3_EEE5beginEv: argument 0"}
!6 = distinct !{!6, !"_ZN6quiche19QuicheCircularDequeIN4quic17QuicHeadersStream20CompressedHeaderInfoELm3ENSt3__19allocatorIS3_EEE5beginEv"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZN6quiche19QuicheCircularDequeIN4quic17QuicHeadersStream20CompressedHeaderInfoELm3ENSt3__19allocatorIS3_EEE3endEv: argument 0"}
!9 = distinct !{!9, !"_ZN6quiche19QuicheCircularDequeIN4quic17QuicHeadersStream20CompressedHeaderInfoELm3ENSt3__19allocatorIS3_EEE3endEv"}
!10 = !{!11}
!11 = distinct !{!11, !12, !"_ZN6quiche19QuicheCircularDequeIN4quic17QuicHeadersStream20CompressedHeaderInfoELm3ENSt3__19allocatorIS3_EEE5beginEv: argument 0"}
!12 = distinct !{!12, !"_ZN6quiche19QuicheCircularDequeIN4quic17QuicHeadersStream20CompressedHeaderInfoELm3ENSt3__19allocatorIS3_EEE5beginEv"}
!13 = !{!14}
!14 = distinct !{!14, !15, !"_ZN6quiche19QuicheCircularDequeIN4quic17QuicHeadersStream20CompressedHeaderInfoELm3ENSt3__19allocatorIS3_EEE3endEv: argument 0"}
!15 = distinct !{!15, !"_ZN6quiche19QuicheCircularDequeIN4quic17QuicHeadersStream20CompressedHeaderInfoELm3ENSt3__19allocatorIS3_EEE3endEv"}
!16 = !{i8 0, i8 2}
!17 = distinct !{!17, !18}
!18 = !{!"llvm.loop.unroll.disable"}
!19 = distinct !{!19, !18}
!20 = distinct !{!20, !18}
!21 = distinct !{!21, !18}
!22 = distinct !{!22, !18}
!23 = distinct !{!23, !18}
!24 = distinct !{!24, !18}
!25 = distinct !{!25, !18}
!26 = distinct !{!26, !18}
!27 = distinct !{!27, !18}
!28 = distinct !{!28, !18}
!29 = distinct !{!29, !18}
!30 = distinct !{!30, !18}
!31 = distinct !{!31, !18}
!32 = distinct !{!32, !18}
!33 = distinct !{!33, !18}
!34 = distinct !{!34, !18}
!35 = distinct !{!35, !18}
!36 = distinct !{!36, !18}
!37 = distinct !{!37, !18}
!38 = distinct !{!38, !18}
!39 = distinct !{!39, !18}
