; ModuleID = '../../third_party/libjxl/src/lib/jxl/image_bundle.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/image_bundle.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.85", i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector", %"class.std::__1::vector.10", %"class.std::__1::vector", %"class.std::__1::vector.17", %"class.std::__1::vector.24", %"class.std::__1::vector.33", %"class.std::__1::vector.47", %"class.std::__1::vector.0", %"class.std::__1::vector", %"class.std::__1::vector.0", i32, i8, %"class.std::__1::vector.0" }
%"class.jxl::Fields" = type { i32 (...)** }
%"class.std::__1::vector.10" = type { %"class.std::__1::__vector_base.11" }
%"class.std::__1::__vector_base.11" = type { i32*, i32*, %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { i32* }
%"class.std::__1::vector.17" = type { %"class.std::__1::__vector_base.18" }
%"class.std::__1::__vector_base.18" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.19" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.24" = type { %"class.std::__1::__vector_base.25" }
%"class.std::__1::__vector_base.25" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.28" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.26", %"struct.std::__1::array.27", i32, i8, [3 x i8] }>
%"struct.std::__1::array.26" = type { [17 x i32] }
%"struct.std::__1::array.27" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.33" = type { %"class.std::__1::__vector_base.34" }
%"class.std::__1::__vector_base.34" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.42" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.35" }
%"class.std::__1::vector.35" = type { %"class.std::__1::__vector_base.36" }
%"class.std::__1::__vector_base.36" = type { i16*, i16*, %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { i16* }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.47" = type { %"class.std::__1::__vector_base.48" }
%"class.std::__1::__vector_base.48" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.64" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.49", i32, %"class.std::__1::vector.50", %"class.std::__1::vector.57" }
%"struct.std::__1::array.49" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.50" = type { %"class.std::__1::__vector_base.51" }
%"class.std::__1::__vector_base.51" = type { i32*, i32*, %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { i32* }
%"class.std::__1::vector.57" = type { %"class.std::__1::__vector_base.58" }
%"class.std::__1::__vector_base.58" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.59" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"*, %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.std::__1::vector.0"* }
%"class.std::__1::vector.0" = type { %"class.std::__1::__vector_base.1" }
%"class.std::__1::__vector_base.1" = type { i8*, i8*, %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { i8* }
%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.70" }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.78", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector.78" = type { %"class.std::__1::__vector_base.79" }
%"class.std::__1::__vector_base.79" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.80" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"struct.jxl::ExtraChannelInfo"* }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane"] }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr.75" }
%"class.std::__1::unique_ptr.75" = type { %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr.75" }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"class.std::__1::vector.85" = type { %"class.std::__1::__vector_base.86" }
%"class.std::__1::__vector_base.86" = type { %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"class.jxl::Plane"* }
%"struct.std::__1::__split_buffer" = type { %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.88", %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.95" = type { %"class.std::__1::allocator.90"* }
%"class.std::__1::allocator.90" = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN3jxl6Image3IfE8ShrinkToEmm = comdat any

$_ZNK3jxl13ImageMetadata12GetAlphaBitsEv = comdat any

$_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE6insertENS_11__wrap_iterIPKS3_EEOS3_ = comdat any

$_ZNSt3__114__split_bufferIN3jxl5PlaneIfEERNS_9allocatorIS3_EEE9push_backEOS3_ = comdat any

@.str = private unnamed_addr constant [22 x i8] c"%s:%d: JXL_CHECK: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [53 x i8] c"../../third_party/libjxl/src/lib/jxl/image_bundle.cc\00", align 1
@.str.2 = private unnamed_addr constant [41 x i8] c"color.xsize() != 0 && color.ysize() != 0\00", align 1
@.str.3 = private unnamed_addr constant [57 x i8] c"metadata_->color_encoding.IsGray() == c_current.IsGray()\00", align 1
@.str.4 = private unnamed_addr constant [26 x i8] c"!c_current_.ICC().empty()\00", align 1
@.str.5 = private unnamed_addr constant [47 x i8] c"metadata_->color_encoding.IsGray() == IsGray()\00", align 1
@.str.6 = private unnamed_addr constant [56 x i8] c"%s:%d: JXL_ABORT: MD alpha_bits %u IB alpha %zu x %zu\0A\0A\00", align 1
@.str.7 = private unnamed_addr constant [17 x i8] c"alpha_bits <= 32\00", align 1
@.str.8 = private unnamed_addr constant [19 x i8] c"xs != 0 && ys != 0\00", align 1
@.str.9 = private unnamed_addr constant [17 x i8] c"ec.xsize() == xs\00", align 1
@.str.10 = private unnamed_addr constant [17 x i8] c"ec.ysize() == ys\00", align 1
@.str.11 = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.12 = private unnamed_addr constant [11 x i8] c"HasAlpha()\00", align 1
@.str.13 = private unnamed_addr constant [28 x i8] c"ec < extra_channels_.size()\00", align 1
@.str.14 = private unnamed_addr constant [11 x i8] c"HasDepth()\00", align 1
@.str.15 = private unnamed_addr constant [15 x i8] c"eci != nullptr\00", align 1
@.str.16 = private unnamed_addr constant [41 x i8] c"alpha.xsize() != 0 && alpha.ysize() != 0\00", align 1
@.str.17 = private unnamed_addr constant [48 x i8] c"eci->alpha_associated == alpha_is_premultiplied\00", align 1
@.str.18 = private unnamed_addr constant [41 x i8] c"plane.xsize() != 0 && plane.ysize() != 0\00", align 1
@.str.19 = private unnamed_addr constant [45 x i8] c"../../third_party/libjxl/src/lib/jxl/image.h\00", align 1
@.str.20 = private unnamed_addr constant [21 x i8] c"xsize <= orig_xsize_\00", align 1
@.str.21 = private unnamed_addr constant [21 x i8] c"ysize <= orig_ysize_\00", align 1
@.str.22 = private unnamed_addr constant [54 x i8] c"../../third_party/libjxl/src/lib/jxl/image_metadata.h\00", align 1
@.str.23 = private unnamed_addr constant [38 x i8] c"alpha->bit_depth.bits_per_sample != 0\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl11ImageBundle8ShrinkToEmm(%"class.jxl::ImageBundle"*, i64, i64) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  tail call void @_ZN3jxl6Image3IfE8ShrinkToEmm(%"class.jxl::Image3"* %8, i64 %1, i64 %2)
  br label %9

9:                                                ; preds = %3, %7
  %10 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %11 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %10, align 8
  %12 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %13 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %12, align 8
  %14 = icmp eq %"class.jxl::Plane"* %11, %13
  br i1 %14, label %18, label %15

15:                                               ; preds = %9
  %16 = trunc i64 %1 to i32
  %17 = trunc i64 %2 to i32
  br label %19

18:                                               ; preds = %36, %9
  ret void

19:                                               ; preds = %15, %36
  %20 = phi %"class.jxl::Plane"* [ %11, %15 ], [ %39, %36 ]
  %21 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %20, i64 0, i32 0, i32 2
  %22 = load i32, i32* %21, align 8
  %23 = zext i32 %22 to i64
  %24 = icmp ult i64 %23, %1
  br i1 %24, label %25, label %28

25:                                               ; preds = %19
  %26 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.19, i64 0, i64 0), i32 63, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.20, i64 0, i64 0)) #8
  %27 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

28:                                               ; preds = %19
  %29 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %20, i64 0, i32 0, i32 3
  %30 = load i32, i32* %29, align 4
  %31 = zext i32 %30 to i64
  %32 = icmp ult i64 %31, %2
  br i1 %32, label %33, label %36

33:                                               ; preds = %28
  %34 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.19, i64 0, i64 0), i32 64, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.21, i64 0, i64 0)) #8
  %35 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

36:                                               ; preds = %28
  %37 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %20, i64 0, i32 0, i32 0
  store i32 %16, i32* %37, align 8
  %38 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %20, i64 0, i32 0, i32 1
  store i32 %17, i32* %38, align 4
  %39 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %20, i64 1
  %40 = icmp eq %"class.jxl::Plane"* %39, %13
  br i1 %40, label %18, label %19
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6Image3IfE8ShrinkToEmm(%"class.jxl::Image3"*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = trunc i64 %1 to i32
  %5 = trunc i64 %2 to i32
  %6 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = zext i32 %7 to i64
  %9 = icmp ult i64 %8, %1
  br i1 %9, label %10, label %13

10:                                               ; preds = %33, %21, %3
  %11 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.19, i64 0, i64 0), i32 63, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.20, i64 0, i64 0)) #8
  %12 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i64
  %17 = icmp ult i64 %16, %2
  br i1 %17, label %18, label %21

18:                                               ; preds = %40, %28, %13
  %19 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.19, i64 0, i64 0), i32 64, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.21, i64 0, i64 0)) #8
  %20 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

21:                                               ; preds = %13
  %22 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 0
  store i32 %4, i32* %22, align 8
  %23 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 1
  store i32 %5, i32* %23, align 4
  %24 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 2
  %25 = load i32, i32* %24, align 8
  %26 = zext i32 %25 to i64
  %27 = icmp ult i64 %26, %1
  br i1 %27, label %10, label %28

28:                                               ; preds = %21
  %29 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 3
  %30 = load i32, i32* %29, align 4
  %31 = zext i32 %30 to i64
  %32 = icmp ult i64 %31, %2
  br i1 %32, label %18, label %33

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 0
  store i32 %4, i32* %34, align 8
  %35 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 1
  store i32 %5, i32* %35, align 4
  %36 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 2
  %37 = load i32, i32* %36, align 8
  %38 = zext i32 %37 to i64
  %39 = icmp ult i64 %38, %1
  br i1 %39, label %10, label %40

40:                                               ; preds = %33
  %41 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 3
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  %44 = icmp ult i64 %43, %2
  br i1 %44, label %18, label %45

45:                                               ; preds = %40
  %46 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 0
  store i32 %4, i32* %46, align 8
  %47 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 1
  store i32 %5, i32* %47, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl11ImageBundle12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::ImageBundle"*, %"class.jxl::Image3"* nocapture dereferenceable(96), %"struct.jxl::ColorEncoding"* nocapture readonly dereferenceable(152)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %11, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %7, %3
  %12 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 41, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.2, i64 0, i64 0)) #8
  %13 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

14:                                               ; preds = %7
  %15 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 9
  %16 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %15, align 8
  %17 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %16, i64 0, i32 7, i32 9
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 1
  %20 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 9
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %21, 1
  %23 = xor i1 %19, %22
  br i1 %23, label %24, label %27

24:                                               ; preds = %14
  %25 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 42, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.3, i64 0, i64 0)) #8
  %26 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

27:                                               ; preds = %14
  %28 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  %29 = bitcast %"class.jxl::Image3"* %28 to i8*
  %30 = bitcast %"class.jxl::Image3"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 24, i1 false) #8
  %31 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5
  %32 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 5
  %33 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %32, i64 0, i32 0, i32 0, i32 0
  %34 = bitcast %"class.std::__1::unique_ptr.75"* %32 to i64*
  %35 = load i64, i64* %34, align 8
  store i8* null, i8** %33, align 8
  %36 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %31, i64 0, i32 0, i32 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = bitcast %"class.std::__1::unique_ptr.75"* %31 to i64*
  store i64 %35, i64* %38, align 8
  %39 = icmp eq i8* %37, null
  br i1 %39, label %41, label %40

40:                                               ; preds = %27
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %37) #8
  br label %41

41:                                               ; preds = %40, %27
  %42 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 1
  %43 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1
  %44 = bitcast %"class.jxl::Plane"* %43 to i8*
  %45 = bitcast %"class.jxl::Plane"* %42 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %44, i8* align 8 %45, i64 24, i1 false) #8
  %46 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5
  %47 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 1, i32 0, i32 5
  %48 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %47, i64 0, i32 0, i32 0, i32 0
  %49 = bitcast %"class.std::__1::unique_ptr.75"* %47 to i64*
  %50 = load i64, i64* %49, align 8
  store i8* null, i8** %48, align 8
  %51 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %46, i64 0, i32 0, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = bitcast %"class.std::__1::unique_ptr.75"* %46 to i64*
  store i64 %50, i64* %53, align 8
  %54 = icmp eq i8* %52, null
  br i1 %54, label %56, label %55

55:                                               ; preds = %41
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %52) #8
  br label %56

56:                                               ; preds = %55, %41
  %57 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 2
  %58 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2
  %59 = bitcast %"class.jxl::Plane"* %58 to i8*
  %60 = bitcast %"class.jxl::Plane"* %57 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %59, i8* align 8 %60, i64 24, i1 false) #8
  %61 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5
  %62 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 2, i32 0, i32 5
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %62, i64 0, i32 0, i32 0, i32 0
  %64 = bitcast %"class.std::__1::unique_ptr.75"* %62 to i64*
  %65 = load i64, i64* %64, align 8
  store i8* null, i8** %63, align 8
  %66 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %61, i64 0, i32 0, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = bitcast %"class.std::__1::unique_ptr.75"* %61 to i64*
  store i64 %65, i64* %68, align 8
  %69 = icmp eq i8* %67, null
  br i1 %69, label %71, label %70

70:                                               ; preds = %56
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %67) #8
  br label %71

71:                                               ; preds = %56, %70
  %72 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 1
  %73 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %72, i8* align 8 %73, i64 12, i1 false) #8
  %74 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 1
  %75 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 4, i32 1
  %76 = bitcast i32* %74 to i8*
  %77 = bitcast i32* %75 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %77, i64 16, i1 false) #8
  %78 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 5
  %79 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 5
  %80 = bitcast i32* %78 to i8*
  %81 = bitcast i32* %79 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %80, i8* align 8 %81, i64 6, i1 false) #8
  %82 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8
  %83 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 8, i32 0
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 1
  %86 = load i64, i64* %85, align 8
  %87 = icmp ult i64 %86, %84
  br i1 %87, label %88, label %89

88:                                               ; preds = %71
  tail call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %82, i64 %84) #8
  br label %89

89:                                               ; preds = %88, %71
  %90 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 2, i32 0, i32 0, i32 0
  %91 = load i8*, i8** %90, align 8
  %92 = icmp eq i8* %91, null
  %93 = select i1 %92, i64 0, i64 %84
  %94 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %82, i64 0, i32 0
  store i64 %93, i64* %94, align 8
  br i1 %92, label %98, label %95

95:                                               ; preds = %89
  %96 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %97 = load i8*, i8** %96, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %91, i8* align 1 %97, i64 %93, i1 false) #8
  br label %98

98:                                               ; preds = %89, %95
  %99 = load i32, i32* %20, align 8
  %100 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  store i32 %99, i32* %100, align 8
  %101 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 10, i32 1
  %102 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 10, i32 1
  %103 = bitcast i32* %102 to i64*
  %104 = bitcast i32* %101 to i64*
  %105 = load i64, i64* %103, align 8
  store i64 %105, i64* %104, align 8
  %106 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 11, i32 1
  %107 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 11, i32 1
  %108 = bitcast i32* %107 to i64*
  %109 = bitcast i32* %106 to i64*
  %110 = load i64, i64* %108, align 8
  store i64 %110, i64* %109, align 8
  %111 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 12, i32 1
  %112 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 12, i32 1
  %113 = bitcast i32* %112 to i64*
  %114 = bitcast i32* %111 to i64*
  %115 = load i64, i64* %113, align 8
  store i64 %115, i64* %114, align 8
  %116 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 13, i32 1
  %117 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 13, i32 1
  %118 = bitcast i32* %117 to i64*
  %119 = bitcast i32* %116 to i64*
  %120 = load i64, i64* %118, align 8
  store i64 %120, i64* %119, align 8
  tail call void @_ZNK3jxl11ImageBundle11VerifySizesEv(%"class.jxl::ImageBundle"* %0)
  ret void
}

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #2

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3jxl11ImageBundle11VerifySizesEv(%"class.jxl::ImageBundle"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %2, align 8
  %4 = icmp eq %"struct.jxl::jpeg::JPEGData"* %3, null
  br i1 %4, label %5, label %18

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %25

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %11 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %10, align 8
  %12 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %13 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %12, align 8
  %14 = icmp eq %"class.jxl::Plane"* %11, %13
  br i1 %14, label %25, label %15

15:                                               ; preds = %9
  %16 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %11, i64 0, i32 0, i32 0
  %17 = load i32, i32* %16, align 8
  br label %25

18:                                               ; preds = %1
  %19 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 1
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 2
  %23 = load i32, i32* %22, align 4
  %24 = sext i32 %23 to i64
  br label %42

25:                                               ; preds = %5, %9, %15
  %26 = phi i32 [ %7, %5 ], [ 0, %9 ], [ %17, %15 ]
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = zext i32 %29 to i64
  %31 = icmp eq i32 %29, 0
  br i1 %31, label %32, label %42

32:                                               ; preds = %25
  %33 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %34 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %33, align 8
  %35 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %36 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %35, align 8
  %37 = icmp eq %"class.jxl::Plane"* %34, %36
  br i1 %37, label %42, label %38

38:                                               ; preds = %32
  %39 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %34, i64 0, i32 0, i32 1
  %40 = load i32, i32* %39, align 4
  %41 = zext i32 %40 to i64
  br label %42

42:                                               ; preds = %18, %25, %32, %38
  %43 = phi i64 [ %21, %18 ], [ %27, %38 ], [ %27, %32 ], [ %27, %25 ]
  %44 = phi i64 [ %24, %18 ], [ %41, %38 ], [ 0, %32 ], [ %30, %25 ]
  %45 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %46 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %45, align 8
  %47 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %48 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %47, align 8
  %49 = icmp eq %"class.jxl::Plane"* %46, %48
  br i1 %49, label %77, label %50

50:                                               ; preds = %42
  %51 = icmp ne i64 %43, 0
  %52 = icmp ne i64 %44, 0
  %53 = and i1 %51, %52
  br i1 %53, label %59, label %54

54:                                               ; preds = %50
  %55 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 69, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.8, i64 0, i64 0)) #8
  %56 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

57:                                               ; preds = %68
  %58 = icmp eq %"class.jxl::Plane"* %73, %48
  br i1 %58, label %77, label %59

59:                                               ; preds = %50, %57
  %60 = phi %"class.jxl::Plane"* [ %73, %57 ], [ %46, %50 ]
  %61 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %60, i64 0, i32 0, i32 0
  %62 = load i32, i32* %61, align 8
  %63 = zext i32 %62 to i64
  %64 = icmp eq i64 %43, %63
  br i1 %64, label %68, label %65

65:                                               ; preds = %59
  %66 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 71, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.9, i64 0, i64 0)) #8
  %67 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

68:                                               ; preds = %59
  %69 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %60, i64 0, i32 0, i32 1
  %70 = load i32, i32* %69, align 4
  %71 = zext i32 %70 to i64
  %72 = icmp eq i64 %44, %71
  %73 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %60, i64 1
  br i1 %72, label %57, label %74

74:                                               ; preds = %68
  %75 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 72, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 0)) #8
  %76 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

77:                                               ; preds = %57, %42
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3jxl11ImageBundle14VerifyMetadataEv(%"class.jxl::ImageBundle"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 49, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4, i64 0, i64 0)) #8
  %7 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 9
  %10 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %9, align 8
  %11 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %10, i64 0, i32 7, i32 9
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 1
  %14 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  %15 = load i32, i32* %14, align 8
  %16 = icmp eq i32 %15, 1
  %17 = xor i1 %13, %16
  br i1 %17, label %18, label %21

18:                                               ; preds = %8
  %19 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 50, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.5, i64 0, i64 0)) #8
  %20 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

21:                                               ; preds = %8
  %22 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %10, i64 0, i32 17, i32 0, i32 0
  %23 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %22, align 8
  %24 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %10, i64 0, i32 17, i32 0, i32 1
  %25 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %24, align 8
  %26 = icmp eq %"struct.jxl::ExtraChannelInfo"* %23, %25
  br i1 %26, label %93, label %29

27:                                               ; preds = %29
  %28 = icmp eq %"struct.jxl::ExtraChannelInfo"* %34, %25
  br i1 %28, label %67, label %29

29:                                               ; preds = %21, %27
  %30 = phi %"struct.jxl::ExtraChannelInfo"* [ %34, %27 ], [ %23, %21 ]
  %31 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %30, i64 0, i32 2
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %32, 0
  %34 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %30, i64 1
  br i1 %33, label %35, label %27

35:                                               ; preds = %29
  %36 = icmp eq %"struct.jxl::ExtraChannelInfo"* %30, null
  br i1 %36, label %67, label %37

37:                                               ; preds = %35
  %38 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %30, i64 0, i32 3, i32 3
  %39 = load i32, i32* %38, align 4
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %44

41:                                               ; preds = %37
  %42 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.22, i64 0, i64 0), i32 207, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.23, i64 0, i64 0)) #8
  %43 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

44:                                               ; preds = %37
  %45 = tail call dereferenceable(32) %"class.jxl::Plane"* @_ZNK3jxl11ImageBundle5alphaEv(%"class.jxl::ImageBundle"* %0)
  %46 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %45, i64 0, i32 0, i32 0
  %47 = load i32, i32* %46, align 8
  %48 = icmp eq i32 %47, 0
  %49 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %9, align 8
  br i1 %48, label %55, label %50

50:                                               ; preds = %44
  %51 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %49, i64 0, i32 17, i32 0, i32 0
  %52 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %51, align 8
  %53 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %49, i64 0, i32 17, i32 0, i32 1
  %54 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %53, align 8
  br label %67

55:                                               ; preds = %44
  %56 = tail call i32 @_ZNK3jxl13ImageMetadata12GetAlphaBitsEv(%"struct.jxl::ImageMetadata"* %49)
  %57 = tail call dereferenceable(32) %"class.jxl::Plane"* @_ZNK3jxl11ImageBundle5alphaEv(%"class.jxl::ImageBundle"* %0)
  %58 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %57, i64 0, i32 0, i32 0
  %59 = load i32, i32* %58, align 8
  %60 = zext i32 %59 to i64
  %61 = tail call dereferenceable(32) %"class.jxl::Plane"* @_ZNK3jxl11ImageBundle5alphaEv(%"class.jxl::ImageBundle"* %0)
  %62 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %61, i64 0, i32 0, i32 1
  %63 = load i32, i32* %62, align 4
  %64 = zext i32 %63 to i64
  %65 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 54, i32 %56, i64 %60, i64 %64) #8
  %66 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

67:                                               ; preds = %27, %50, %35
  %68 = phi %"struct.jxl::ExtraChannelInfo"* [ %54, %50 ], [ %25, %35 ], [ %25, %27 ]
  %69 = phi %"struct.jxl::ExtraChannelInfo"* [ %52, %50 ], [ %23, %35 ], [ %23, %27 ]
  %70 = icmp eq %"struct.jxl::ExtraChannelInfo"* %69, %68
  br i1 %70, label %93, label %73

71:                                               ; preds = %73
  %72 = icmp eq %"struct.jxl::ExtraChannelInfo"* %78, %68
  br i1 %72, label %93, label %73

73:                                               ; preds = %67, %71
  %74 = phi %"struct.jxl::ExtraChannelInfo"* [ %78, %71 ], [ %69, %67 ]
  %75 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %74, i64 0, i32 2
  %76 = load i32, i32* %75, align 4
  %77 = icmp eq i32 %76, 0
  %78 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %74, i64 1
  br i1 %77, label %79, label %71

79:                                               ; preds = %73
  %80 = icmp eq %"struct.jxl::ExtraChannelInfo"* %74, null
  br i1 %80, label %93, label %81

81:                                               ; preds = %79
  %82 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %74, i64 0, i32 3, i32 3
  %83 = load i32, i32* %82, align 4
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %88

85:                                               ; preds = %81
  %86 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.22, i64 0, i64 0), i32 207, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.23, i64 0, i64 0)) #8
  %87 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

88:                                               ; preds = %81
  %89 = icmp ult i32 %83, 33
  br i1 %89, label %93, label %90

90:                                               ; preds = %88
  %91 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 57, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.7, i64 0, i64 0)) #8
  %92 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

93:                                               ; preds = %71, %21, %67, %79, %88
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(32) %"class.jxl::Plane"* @_ZNK3jxl11ImageBundle5alphaEv(%"class.jxl::ImageBundle"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 9
  %3 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %2, align 8
  %4 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %3, i64 0, i32 17, i32 0, i32 0
  %5 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %4, align 8
  %6 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %3, i64 0, i32 17, i32 0, i32 1
  %7 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %6, align 8
  %8 = icmp eq %"struct.jxl::ExtraChannelInfo"* %5, %7
  %9 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %5 to i64
  br i1 %8, label %20, label %12

10:                                               ; preds = %12
  %11 = icmp eq %"struct.jxl::ExtraChannelInfo"* %17, %7
  br i1 %11, label %20, label %12

12:                                               ; preds = %1, %10
  %13 = phi %"struct.jxl::ExtraChannelInfo"* [ %17, %10 ], [ %5, %1 ]
  %14 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %13, i64 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  %17 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %13, i64 1
  br i1 %16, label %18, label %10

18:                                               ; preds = %12
  %19 = icmp eq %"struct.jxl::ExtraChannelInfo"* %13, null
  br i1 %19, label %20, label %25

20:                                               ; preds = %10, %18, %1
  %21 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 90, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.12, i64 0, i64 0)) #8
  %22 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

23:                                               ; preds = %25
  %24 = icmp eq %"struct.jxl::ExtraChannelInfo"* %30, %7
  br i1 %24, label %31, label %25

25:                                               ; preds = %18, %23
  %26 = phi %"struct.jxl::ExtraChannelInfo"* [ %30, %23 ], [ %5, %18 ]
  %27 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %26, i64 0, i32 2
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %28, 0
  %30 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %26, i64 1
  br i1 %29, label %31, label %23

31:                                               ; preds = %23, %25
  %32 = phi %"struct.jxl::ExtraChannelInfo"* [ %26, %25 ], [ null, %23 ]
  %33 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %32 to i64
  %34 = sub i64 %33, %9
  %35 = sdiv exact i64 %34, 96
  %36 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %37 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %38 = bitcast %"class.jxl::Plane"** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.std::__1::vector.85"* %36 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %39, %41
  %43 = ashr exact i64 %42, 5
  %44 = icmp ult i64 %35, %43
  br i1 %44, label %48, label %45

45:                                               ; preds = %31
  %46 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 93, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.13, i64 0, i64 0)) #8
  %47 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

48:                                               ; preds = %31
  %49 = inttoptr i64 %41 to %"class.jxl::Plane"*
  %50 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %49, i64 %35
  ret %"class.jxl::Plane"* %50
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3jxl13ImageMetadata12GetAlphaBitsEv(%"struct.jxl::ImageMetadata"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 17, i32 0, i32 0
  %3 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %2, align 8
  %4 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 17, i32 0, i32 1
  %5 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %4, align 8
  %6 = icmp eq %"struct.jxl::ExtraChannelInfo"* %3, %5
  br i1 %6, label %24, label %9

7:                                                ; preds = %9
  %8 = icmp eq %"struct.jxl::ExtraChannelInfo"* %14, %5
  br i1 %8, label %24, label %9

9:                                                ; preds = %1, %7
  %10 = phi %"struct.jxl::ExtraChannelInfo"* [ %14, %7 ], [ %3, %1 ]
  %11 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %10, i64 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  %14 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %10, i64 1
  br i1 %13, label %15, label %7

15:                                               ; preds = %9
  %16 = icmp eq %"struct.jxl::ExtraChannelInfo"* %10, null
  br i1 %16, label %24, label %17

17:                                               ; preds = %15
  %18 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %10, i64 0, i32 3, i32 3
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %24

21:                                               ; preds = %17
  %22 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.22, i64 0, i64 0), i32 207, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.23, i64 0, i64 0)) #8
  %23 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

24:                                               ; preds = %7, %1, %17, %15
  %25 = phi i32 [ 0, %15 ], [ %19, %17 ], [ 0, %1 ], [ 0, %7 ]
  ret i32 %25
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK3jxl11ImageBundle18DetectRealBitdepthEv(%"class.jxl::ImageBundle"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 9
  %3 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %2, align 8
  %4 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %3, i64 0, i32 3, i32 3
  %5 = load i32, i32* %4, align 4
  %6 = zext i32 %5 to i64
  ret i64 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.jxl::Plane"* @_ZN3jxl11ImageBundle5alphaEv(%"class.jxl::ImageBundle"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 9
  %3 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %2, align 8
  %4 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %3, i64 0, i32 17, i32 0, i32 0
  %5 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %4, align 8
  %6 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %3, i64 0, i32 17, i32 0, i32 1
  %7 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %6, align 8
  %8 = icmp eq %"struct.jxl::ExtraChannelInfo"* %5, %7
  %9 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %5 to i64
  br i1 %8, label %20, label %12

10:                                               ; preds = %12
  %11 = icmp eq %"struct.jxl::ExtraChannelInfo"* %17, %7
  br i1 %11, label %20, label %12

12:                                               ; preds = %1, %10
  %13 = phi %"struct.jxl::ExtraChannelInfo"* [ %17, %10 ], [ %5, %1 ]
  %14 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %13, i64 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  %17 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %13, i64 1
  br i1 %16, label %18, label %10

18:                                               ; preds = %12
  %19 = icmp eq %"struct.jxl::ExtraChannelInfo"* %13, null
  br i1 %19, label %20, label %25

20:                                               ; preds = %10, %18, %1
  %21 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 97, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.12, i64 0, i64 0)) #8
  %22 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

23:                                               ; preds = %25
  %24 = icmp eq %"struct.jxl::ExtraChannelInfo"* %30, %7
  br i1 %24, label %31, label %25

25:                                               ; preds = %18, %23
  %26 = phi %"struct.jxl::ExtraChannelInfo"* [ %30, %23 ], [ %5, %18 ]
  %27 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %26, i64 0, i32 2
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %28, 0
  %30 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %26, i64 1
  br i1 %29, label %31, label %23

31:                                               ; preds = %23, %25
  %32 = phi %"struct.jxl::ExtraChannelInfo"* [ %26, %25 ], [ null, %23 ]
  %33 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %32 to i64
  %34 = sub i64 %33, %9
  %35 = sdiv exact i64 %34, 96
  %36 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %37 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %38 = bitcast %"class.jxl::Plane"** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.std::__1::vector.85"* %36 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %39, %41
  %43 = ashr exact i64 %42, 5
  %44 = icmp ult i64 %35, %43
  br i1 %44, label %48, label %45

45:                                               ; preds = %31
  %46 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 100, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.13, i64 0, i64 0)) #8
  %47 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

48:                                               ; preds = %31
  %49 = inttoptr i64 %41 to %"class.jxl::Plane"*
  %50 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %49, i64 %35
  ret %"class.jxl::Plane"* %50
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(32) %"class.jxl::Plane"* @_ZNK3jxl11ImageBundle5depthEv(%"class.jxl::ImageBundle"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 9
  %3 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %2, align 8
  %4 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %3, i64 0, i32 17, i32 0, i32 0
  %5 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %4, align 8
  %6 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %3, i64 0, i32 17, i32 0, i32 1
  %7 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %6, align 8
  %8 = icmp eq %"struct.jxl::ExtraChannelInfo"* %5, %7
  %9 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %5 to i64
  br i1 %8, label %20, label %12

10:                                               ; preds = %12
  %11 = icmp eq %"struct.jxl::ExtraChannelInfo"* %17, %7
  br i1 %11, label %20, label %12

12:                                               ; preds = %1, %10
  %13 = phi %"struct.jxl::ExtraChannelInfo"* [ %17, %10 ], [ %5, %1 ]
  %14 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %13, i64 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 1
  %17 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %13, i64 1
  br i1 %16, label %18, label %10

18:                                               ; preds = %12
  %19 = icmp eq %"struct.jxl::ExtraChannelInfo"* %13, null
  br i1 %19, label %20, label %25

20:                                               ; preds = %10, %18, %1
  %21 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 105, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i64 0, i64 0)) #8
  %22 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

23:                                               ; preds = %25
  %24 = icmp eq %"struct.jxl::ExtraChannelInfo"* %30, %7
  br i1 %24, label %31, label %25

25:                                               ; preds = %18, %23
  %26 = phi %"struct.jxl::ExtraChannelInfo"* [ %30, %23 ], [ %5, %18 ]
  %27 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %26, i64 0, i32 2
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %28, 1
  %30 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %26, i64 1
  br i1 %29, label %31, label %23

31:                                               ; preds = %23, %25
  %32 = phi %"struct.jxl::ExtraChannelInfo"* [ %26, %25 ], [ null, %23 ]
  %33 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %32 to i64
  %34 = sub i64 %33, %9
  %35 = sdiv exact i64 %34, 96
  %36 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %37 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %38 = bitcast %"class.jxl::Plane"** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.std::__1::vector.85"* %36 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %39, %41
  %43 = ashr exact i64 %42, 5
  %44 = icmp ult i64 %35, %43
  br i1 %44, label %48, label %45

45:                                               ; preds = %31
  %46 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 108, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.13, i64 0, i64 0)) #8
  %47 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

48:                                               ; preds = %31
  %49 = inttoptr i64 %41 to %"class.jxl::Plane"*
  %50 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %49, i64 %35
  ret %"class.jxl::Plane"* %50
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl11ImageBundle8SetAlphaEONS_5PlaneIfEEb(%"class.jxl::ImageBundle"*, %"class.jxl::Plane"* dereferenceable(32), i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 9
  %5 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %4, align 8
  %6 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %5, i64 0, i32 17, i32 0, i32 0
  %7 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %6, align 8
  %8 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %5, i64 0, i32 17, i32 0, i32 1
  %9 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %8, align 8
  %10 = icmp eq %"struct.jxl::ExtraChannelInfo"* %7, %9
  %11 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %7 to i64
  br i1 %10, label %22, label %14

12:                                               ; preds = %14
  %13 = icmp eq %"struct.jxl::ExtraChannelInfo"* %19, %9
  br i1 %13, label %22, label %14

14:                                               ; preds = %3, %12
  %15 = phi %"struct.jxl::ExtraChannelInfo"* [ %19, %12 ], [ %7, %3 ]
  %16 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %15, i64 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 0
  %19 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %15, i64 1
  br i1 %18, label %20, label %12

20:                                               ; preds = %14
  %21 = icmp eq %"struct.jxl::ExtraChannelInfo"* %15, null
  br i1 %21, label %22, label %25

22:                                               ; preds = %12, %3, %20
  %23 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 115, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.15, i64 0, i64 0)) #8
  %24 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

25:                                               ; preds = %20
  %26 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %33, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %36

33:                                               ; preds = %29, %25
  %34 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 116, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.16, i64 0, i64 0)) #8
  %35 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

36:                                               ; preds = %29
  %37 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %15, i64 0, i32 6
  %38 = load i8, i8* %37, align 8, !range !2
  %39 = zext i8 %38 to i32
  %40 = zext i1 %2 to i32
  %41 = icmp eq i32 %39, %40
  br i1 %41, label %45, label %42

42:                                               ; preds = %36
  %43 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 117, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.17, i64 0, i64 0)) #8
  %44 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

45:                                               ; preds = %36
  %46 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %47 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %46, i64 0, i32 0, i32 0
  %48 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %47, align 8
  %49 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %15 to i64
  %50 = sub i64 %49, %11
  %51 = sdiv exact i64 %50, 96
  %52 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %48, i64 %51
  %53 = tail call %"class.jxl::Plane"* @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE6insertENS_11__wrap_iterIPKS3_EEOS3_(%"class.std::__1::vector.85"* %46, %"class.jxl::Plane"* %52, %"class.jxl::Plane"* dereferenceable(32) %1)
  tail call void @_ZNK3jxl11ImageBundle11VerifySizesEv(%"class.jxl::ImageBundle"* %0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.jxl::Plane"* @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE6insertENS_11__wrap_iterIPKS3_EEOS3_(%"class.std::__1::vector.85"*, %"class.jxl::Plane"*, %"class.jxl::Plane"* dereferenceable(32)) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %"class.jxl::Plane"* %1 to i64
  %5 = alloca %"struct.std::__1::__split_buffer", align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %0, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %0, i64 0, i32 0, i32 1
  %8 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %9, align 8
  %11 = icmp ult %"class.jxl::Plane"* %8, %10
  %12 = ptrtoint %"class.jxl::Plane"* %8 to i64
  %13 = ptrtoint %"class.jxl::Plane"* %10 to i64
  br i1 %11, label %14, label %123

14:                                               ; preds = %3
  %15 = icmp eq %"class.jxl::Plane"* %8, %1
  br i1 %15, label %16, label %28

16:                                               ; preds = %14
  %17 = bitcast %"class.jxl::Plane"* %1 to i8*
  %18 = bitcast %"class.jxl::Plane"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 24, i1 false) #8
  %19 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5
  %20 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 5
  %21 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %20, i64 0, i32 0, i32 0, i32 0
  %22 = bitcast %"class.std::__1::unique_ptr.75"* %20 to i64*
  %23 = load i64, i64* %22, align 8
  store i8* null, i8** %21, align 8
  %24 = bitcast %"class.std::__1::unique_ptr.75"* %19 to i64*
  store i64 %23, i64* %24, align 8
  %25 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 1
  %26 = ptrtoint %"class.jxl::Plane"* %25 to i64
  %27 = bitcast %"class.jxl::Plane"** %7 to i64*
  store i64 %26, i64* %27, align 8
  br label %328

28:                                               ; preds = %14
  %29 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 1
  %30 = ptrtoint %"class.jxl::Plane"* %29 to i64
  %31 = sub i64 %12, %30
  %32 = ashr exact i64 %31, 5
  %33 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 %32
  %34 = bitcast %"class.jxl::Plane"** %7 to i64*
  %35 = icmp ult %"class.jxl::Plane"* %33, %8
  br i1 %35, label %36, label %64

36:                                               ; preds = %28
  %37 = sub nsw i64 0, %32
  %38 = getelementptr %"class.jxl::Plane", %"class.jxl::Plane"* %8, i64 %37, i32 0, i32 0
  %39 = bitcast i32* %38 to i8*
  %40 = xor i64 %4, -1
  %41 = getelementptr i8, i8* %39, i64 %40
  %42 = ptrtoint i8* %41 to i64
  %43 = and i64 %42, 32
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %45, label %56

45:                                               ; preds = %36
  %46 = bitcast %"class.jxl::Plane"* %8 to i8*
  %47 = bitcast %"class.jxl::Plane"* %33 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 8 %47, i64 24, i1 false) #8
  %48 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %8, i64 0, i32 0, i32 5
  %49 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 %32, i32 0, i32 5
  %50 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %49, i64 0, i32 0, i32 0, i32 0
  %51 = bitcast %"class.std::__1::unique_ptr.75"* %49 to i64*
  %52 = load i64, i64* %51, align 8
  store i8* null, i8** %50, align 8
  %53 = bitcast %"class.std::__1::unique_ptr.75"* %48 to i64*
  store i64 %52, i64* %53, align 8
  %54 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %33, i64 1
  %55 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %8, i64 1
  br label %56

56:                                               ; preds = %45, %36
  %57 = phi %"class.jxl::Plane"* [ %8, %36 ], [ %55, %45 ]
  %58 = phi %"class.jxl::Plane"* [ %33, %36 ], [ %54, %45 ]
  %59 = phi %"class.jxl::Plane"* [ undef, %36 ], [ %55, %45 ]
  %60 = icmp ult i8* %41, inttoptr (i64 32 to i8*)
  br i1 %60, label %61, label %86

61:                                               ; preds = %86, %56
  %62 = phi %"class.jxl::Plane"* [ %59, %56 ], [ %108, %86 ]
  %63 = ptrtoint %"class.jxl::Plane"* %62 to i64
  br label %64

64:                                               ; preds = %61, %28
  %65 = phi i64 [ %63, %61 ], [ %12, %28 ]
  store i64 %65, i64* %34, align 8
  %66 = icmp eq i64 %31, 0
  br i1 %66, label %110, label %67

67:                                               ; preds = %64, %84
  %68 = phi %"class.jxl::Plane"* [ %71, %84 ], [ %8, %64 ]
  %69 = phi %"class.jxl::Plane"* [ %70, %84 ], [ %33, %64 ]
  %70 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %69, i64 -1
  %71 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %68, i64 -1
  %72 = bitcast %"class.jxl::Plane"* %71 to i8*
  %73 = bitcast %"class.jxl::Plane"* %70 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %72, i8* align 8 %73, i64 24, i1 false) #8
  %74 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %68, i64 -1, i32 0, i32 5
  %75 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %69, i64 -1, i32 0, i32 5
  %76 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %75, i64 0, i32 0, i32 0, i32 0
  %77 = bitcast %"class.std::__1::unique_ptr.75"* %75 to i64*
  %78 = load i64, i64* %77, align 8
  store i8* null, i8** %76, align 8
  %79 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %74, i64 0, i32 0, i32 0, i32 0
  %80 = load i8*, i8** %79, align 8
  %81 = bitcast %"class.std::__1::unique_ptr.75"* %74 to i64*
  store i64 %78, i64* %81, align 8
  %82 = icmp eq i8* %80, null
  br i1 %82, label %84, label %83

83:                                               ; preds = %67
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %80) #8
  br label %84

84:                                               ; preds = %83, %67
  %85 = icmp eq %"class.jxl::Plane"* %70, %1
  br i1 %85, label %110, label %67

86:                                               ; preds = %56, %86
  %87 = phi %"class.jxl::Plane"* [ %108, %86 ], [ %57, %56 ]
  %88 = phi %"class.jxl::Plane"* [ %107, %86 ], [ %58, %56 ]
  %89 = bitcast %"class.jxl::Plane"* %87 to i8*
  %90 = bitcast %"class.jxl::Plane"* %88 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %89, i8* align 8 %90, i64 24, i1 false) #8
  %91 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %87, i64 0, i32 0, i32 5
  %92 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %88, i64 0, i32 0, i32 5
  %93 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %92, i64 0, i32 0, i32 0, i32 0
  %94 = bitcast %"class.std::__1::unique_ptr.75"* %92 to i64*
  %95 = load i64, i64* %94, align 8
  store i8* null, i8** %93, align 8
  %96 = bitcast %"class.std::__1::unique_ptr.75"* %91 to i64*
  store i64 %95, i64* %96, align 8
  %97 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %88, i64 1
  %98 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %87, i64 1
  %99 = bitcast %"class.jxl::Plane"* %98 to i8*
  %100 = bitcast %"class.jxl::Plane"* %97 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %99, i8* align 8 %100, i64 24, i1 false) #8
  %101 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %87, i64 1, i32 0, i32 5
  %102 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %88, i64 1, i32 0, i32 5
  %103 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %102, i64 0, i32 0, i32 0, i32 0
  %104 = bitcast %"class.std::__1::unique_ptr.75"* %102 to i64*
  %105 = load i64, i64* %104, align 8
  store i8* null, i8** %103, align 8
  %106 = bitcast %"class.std::__1::unique_ptr.75"* %101 to i64*
  store i64 %105, i64* %106, align 8
  %107 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %88, i64 2
  %108 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %87, i64 2
  %109 = icmp ult %"class.jxl::Plane"* %107, %8
  br i1 %109, label %86, label %61

110:                                              ; preds = %84, %64
  %111 = bitcast %"class.jxl::Plane"* %1 to i8*
  %112 = bitcast %"class.jxl::Plane"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %111, i8* align 8 %112, i64 24, i1 false) #8
  %113 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5
  %114 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 5
  %115 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %114, i64 0, i32 0, i32 0, i32 0
  %116 = bitcast %"class.std::__1::unique_ptr.75"* %114 to i64*
  %117 = load i64, i64* %116, align 8
  store i8* null, i8** %115, align 8
  %118 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %113, i64 0, i32 0, i32 0, i32 0
  %119 = load i8*, i8** %118, align 8
  %120 = bitcast %"class.std::__1::unique_ptr.75"* %113 to i64*
  store i64 %117, i64* %120, align 8
  %121 = icmp eq i8* %119, null
  br i1 %121, label %328, label %122

122:                                              ; preds = %110
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %119) #8
  br label %328

123:                                              ; preds = %3
  %124 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %0, i64 0, i32 0, i32 2
  %125 = bitcast %"struct.std::__1::__split_buffer"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %125) #8
  %126 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 0
  %127 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 1
  %128 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 2
  %129 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 3, i32 0, i32 0
  %130 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 3, i32 1, i32 0
  %131 = bitcast %"class.jxl::Plane"** %7 to i64*
  %132 = bitcast %"class.std::__1::vector.85"* %0 to i64*
  %133 = bitcast %"struct.std::__1::__split_buffer"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %133, i8 -86, i64 40, i1 false)
  %134 = load i64, i64* %132, align 8
  %135 = sub i64 %12, %134
  %136 = ashr exact i64 %135, 5
  %137 = add nsw i64 %136, 1
  %138 = icmp ugt i64 %137, 576460752303423487
  br i1 %138, label %139, label %141

139:                                              ; preds = %123
  %140 = bitcast %"class.std::__1::vector.85"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %140) #9
  unreachable

141:                                              ; preds = %123
  %142 = bitcast %"class.jxl::Plane"** %9 to i64*
  %143 = sub i64 %13, %134
  %144 = ashr exact i64 %143, 5
  %145 = icmp ult i64 %144, 288230376151711743
  br i1 %145, label %150, label %146

146:                                              ; preds = %141
  %147 = sub i64 %4, %134
  %148 = ashr exact i64 %147, 5
  store %"class.jxl::Plane"* null, %"class.jxl::Plane"** %129, align 8
  %149 = bitcast %"class.std::__1::allocator.90"** %130 to %"class.std::__1::__compressed_pair.87"**
  store %"class.std::__1::__compressed_pair.87"* %124, %"class.std::__1::__compressed_pair.87"** %149, align 8
  br label %161

150:                                              ; preds = %141
  %151 = ashr exact i64 %143, 4
  %152 = icmp ult i64 %151, %137
  %153 = select i1 %152, i64 %137, i64 %151
  %154 = sub i64 %4, %134
  %155 = ashr exact i64 %154, 5
  store %"class.jxl::Plane"* null, %"class.jxl::Plane"** %129, align 8
  %156 = bitcast %"class.std::__1::allocator.90"** %130 to %"class.std::__1::__compressed_pair.87"**
  store %"class.std::__1::__compressed_pair.87"* %124, %"class.std::__1::__compressed_pair.87"** %156, align 8
  %157 = icmp eq i64 %153, 0
  br i1 %157, label %167, label %158

158:                                              ; preds = %150
  %159 = icmp ugt i64 %153, 576460752303423487
  br i1 %159, label %160, label %161

160:                                              ; preds = %158
  tail call void @abort() #9
  unreachable

161:                                              ; preds = %146, %158
  %162 = phi i64 [ 576460752303423487, %146 ], [ %153, %158 ]
  %163 = phi i64 [ %148, %146 ], [ %155, %158 ]
  %164 = shl i64 %162, 5
  %165 = tail call i8* @_Znwm(i64 %164) #10
  %166 = bitcast i8* %165 to %"class.jxl::Plane"*
  br label %167

167:                                              ; preds = %150, %161
  %168 = phi i64 [ %163, %161 ], [ %155, %150 ]
  %169 = phi i64 [ %162, %161 ], [ 0, %150 ]
  %170 = phi %"class.jxl::Plane"* [ %166, %161 ], [ null, %150 ]
  store %"class.jxl::Plane"* %170, %"class.jxl::Plane"** %126, align 8
  %171 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %170, i64 %168
  store %"class.jxl::Plane"* %171, %"class.jxl::Plane"** %128, align 8
  store %"class.jxl::Plane"* %171, %"class.jxl::Plane"** %127, align 8
  %172 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %170, i64 %169
  store %"class.jxl::Plane"* %172, %"class.jxl::Plane"** %129, align 8
  call void @_ZNSt3__114__split_bufferIN3jxl5PlaneIfEERNS_9allocatorIS3_EEE9push_backEOS3_(%"struct.std::__1::__split_buffer"* nonnull %5, %"class.jxl::Plane"* dereferenceable(32) %2)
  %173 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %127, align 8
  %174 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %6, align 8
  %175 = icmp eq %"class.jxl::Plane"* %174, %1
  br i1 %175, label %229, label %176

176:                                              ; preds = %167
  %177 = ptrtoint %"class.jxl::Plane"* %174 to i64
  %178 = getelementptr %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 -1, i32 0, i32 0
  %179 = ptrtoint i32* %178 to i64
  %180 = sub i64 %179, %177
  %181 = and i64 %180, 32
  %182 = icmp eq i64 %181, 0
  br i1 %182, label %183, label %196

183:                                              ; preds = %176
  %184 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %173, i64 -1
  %185 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 -1
  %186 = bitcast %"class.jxl::Plane"* %184 to i8*
  %187 = bitcast %"class.jxl::Plane"* %185 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %186, i8* align 8 %187, i64 24, i1 false) #8
  %188 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %173, i64 -1, i32 0, i32 5
  %189 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 -1, i32 0, i32 5
  %190 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %189, i64 0, i32 0, i32 0, i32 0
  %191 = bitcast %"class.std::__1::unique_ptr.75"* %189 to i64*
  %192 = load i64, i64* %191, align 8
  store i8* null, i8** %190, align 8
  %193 = bitcast %"class.std::__1::unique_ptr.75"* %188 to i64*
  store i64 %192, i64* %193, align 8
  %194 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %127, align 8
  %195 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %194, i64 -1
  store %"class.jxl::Plane"* %195, %"class.jxl::Plane"** %127, align 8
  br label %196

196:                                              ; preds = %183, %176
  %197 = phi %"class.jxl::Plane"* [ undef, %176 ], [ %195, %183 ]
  %198 = phi %"class.jxl::Plane"* [ %173, %176 ], [ %195, %183 ]
  %199 = phi %"class.jxl::Plane"* [ %1, %176 ], [ %185, %183 ]
  %200 = icmp ult i64 %180, 32
  br i1 %200, label %229, label %201

201:                                              ; preds = %196, %201
  %202 = phi %"class.jxl::Plane"* [ %227, %201 ], [ %198, %196 ]
  %203 = phi %"class.jxl::Plane"* [ %217, %201 ], [ %199, %196 ]
  %204 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %202, i64 -1
  %205 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %203, i64 -1
  %206 = bitcast %"class.jxl::Plane"* %204 to i8*
  %207 = bitcast %"class.jxl::Plane"* %205 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %206, i8* align 8 %207, i64 24, i1 false) #8
  %208 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %202, i64 -1, i32 0, i32 5
  %209 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %203, i64 -1, i32 0, i32 5
  %210 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %209, i64 0, i32 0, i32 0, i32 0
  %211 = bitcast %"class.std::__1::unique_ptr.75"* %209 to i64*
  %212 = load i64, i64* %211, align 8
  store i8* null, i8** %210, align 8
  %213 = bitcast %"class.std::__1::unique_ptr.75"* %208 to i64*
  store i64 %212, i64* %213, align 8
  %214 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %127, align 8
  %215 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %214, i64 -1
  store %"class.jxl::Plane"* %215, %"class.jxl::Plane"** %127, align 8
  %216 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %214, i64 -2
  %217 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %203, i64 -2
  %218 = bitcast %"class.jxl::Plane"* %216 to i8*
  %219 = bitcast %"class.jxl::Plane"* %217 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %218, i8* align 8 %219, i64 24, i1 false) #8
  %220 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %214, i64 -2, i32 0, i32 5
  %221 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %203, i64 -2, i32 0, i32 5
  %222 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %221, i64 0, i32 0, i32 0, i32 0
  %223 = bitcast %"class.std::__1::unique_ptr.75"* %221 to i64*
  %224 = load i64, i64* %223, align 8
  store i8* null, i8** %222, align 8
  %225 = bitcast %"class.std::__1::unique_ptr.75"* %220 to i64*
  store i64 %224, i64* %225, align 8
  %226 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %127, align 8
  %227 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %226, i64 -1
  store %"class.jxl::Plane"* %227, %"class.jxl::Plane"** %127, align 8
  %228 = icmp eq %"class.jxl::Plane"* %217, %174
  br i1 %228, label %229, label %201

229:                                              ; preds = %196, %201, %167
  %230 = phi %"class.jxl::Plane"* [ %173, %167 ], [ %197, %196 ], [ %227, %201 ]
  %231 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %7, align 8
  %232 = icmp eq %"class.jxl::Plane"* %231, %1
  br i1 %232, label %233, label %239

233:                                              ; preds = %229
  %234 = ptrtoint %"class.jxl::Plane"* %231 to i64
  %235 = ptrtoint %"class.jxl::Plane"* %230 to i64
  %236 = bitcast %"class.jxl::Plane"** %127 to i64*
  %237 = bitcast %"class.jxl::Plane"** %128 to i64*
  %238 = load i64, i64* %237, align 8
  br label %296

239:                                              ; preds = %229
  %240 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %128, align 8
  %241 = getelementptr %"class.jxl::Plane", %"class.jxl::Plane"* %231, i64 -1, i32 0, i32 0
  %242 = ptrtoint i32* %241 to i64
  %243 = sub i64 %242, %4
  %244 = and i64 %243, 32
  %245 = icmp eq i64 %244, 0
  br i1 %245, label %246, label %258

246:                                              ; preds = %239
  %247 = bitcast %"class.jxl::Plane"* %240 to i8*
  %248 = bitcast %"class.jxl::Plane"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %247, i8* align 8 %248, i64 24, i1 false) #8
  %249 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %240, i64 0, i32 0, i32 5
  %250 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5
  %251 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %250, i64 0, i32 0, i32 0, i32 0
  %252 = bitcast %"class.std::__1::unique_ptr.75"* %250 to i64*
  %253 = load i64, i64* %252, align 8
  store i8* null, i8** %251, align 8
  %254 = bitcast %"class.std::__1::unique_ptr.75"* %249 to i64*
  store i64 %253, i64* %254, align 8
  %255 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 1
  %256 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %128, align 8
  %257 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %256, i64 1
  store %"class.jxl::Plane"* %257, %"class.jxl::Plane"** %128, align 8
  br label %258

258:                                              ; preds = %246, %239
  %259 = phi %"class.jxl::Plane"* [ undef, %239 ], [ %257, %246 ]
  %260 = phi %"class.jxl::Plane"* [ %240, %239 ], [ %257, %246 ]
  %261 = phi %"class.jxl::Plane"* [ %1, %239 ], [ %255, %246 ]
  %262 = icmp ult i64 %243, 32
  br i1 %262, label %289, label %263

263:                                              ; preds = %258, %263
  %264 = phi %"class.jxl::Plane"* [ %287, %263 ], [ %260, %258 ]
  %265 = phi %"class.jxl::Plane"* [ %285, %263 ], [ %261, %258 ]
  %266 = bitcast %"class.jxl::Plane"* %264 to i8*
  %267 = bitcast %"class.jxl::Plane"* %265 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %266, i8* align 8 %267, i64 24, i1 false) #8
  %268 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %264, i64 0, i32 0, i32 5
  %269 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %265, i64 0, i32 0, i32 5
  %270 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %269, i64 0, i32 0, i32 0, i32 0
  %271 = bitcast %"class.std::__1::unique_ptr.75"* %269 to i64*
  %272 = load i64, i64* %271, align 8
  store i8* null, i8** %270, align 8
  %273 = bitcast %"class.std::__1::unique_ptr.75"* %268 to i64*
  store i64 %272, i64* %273, align 8
  %274 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %265, i64 1
  %275 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %128, align 8
  %276 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %275, i64 1
  store %"class.jxl::Plane"* %276, %"class.jxl::Plane"** %128, align 8
  %277 = bitcast %"class.jxl::Plane"* %276 to i8*
  %278 = bitcast %"class.jxl::Plane"* %274 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %277, i8* align 8 %278, i64 24, i1 false) #8
  %279 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %275, i64 1, i32 0, i32 5
  %280 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %265, i64 1, i32 0, i32 5
  %281 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %280, i64 0, i32 0, i32 0, i32 0
  %282 = bitcast %"class.std::__1::unique_ptr.75"* %280 to i64*
  %283 = load i64, i64* %282, align 8
  store i8* null, i8** %281, align 8
  %284 = bitcast %"class.std::__1::unique_ptr.75"* %279 to i64*
  store i64 %283, i64* %284, align 8
  %285 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %265, i64 2
  %286 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %128, align 8
  %287 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %286, i64 1
  store %"class.jxl::Plane"* %287, %"class.jxl::Plane"** %128, align 8
  %288 = icmp eq %"class.jxl::Plane"* %285, %231
  br i1 %288, label %289, label %263

289:                                              ; preds = %263, %258
  %290 = phi %"class.jxl::Plane"* [ %259, %258 ], [ %287, %263 ]
  %291 = ptrtoint %"class.jxl::Plane"* %290 to i64
  %292 = bitcast %"class.jxl::Plane"** %127 to i64*
  %293 = load i64, i64* %292, align 8
  %294 = load i64, i64* %131, align 8
  %295 = bitcast %"class.jxl::Plane"** %128 to i64*
  br label %296

296:                                              ; preds = %233, %289
  %297 = phi i64* [ %237, %233 ], [ %295, %289 ]
  %298 = phi i64 [ %238, %233 ], [ %291, %289 ]
  %299 = phi i64 [ %234, %233 ], [ %294, %289 ]
  %300 = phi i64* [ %236, %233 ], [ %292, %289 ]
  %301 = phi i64 [ %235, %233 ], [ %293, %289 ]
  %302 = load i64, i64* %132, align 8
  store i64 %301, i64* %132, align 8
  store i64 %302, i64* %300, align 8
  store i64 %298, i64* %131, align 8
  store i64 %299, i64* %297, align 8
  %303 = load i64, i64* %142, align 8
  %304 = bitcast %"class.jxl::Plane"** %129 to i64*
  %305 = load i64, i64* %304, align 8
  store i64 %305, i64* %142, align 8
  store i64 %303, i64* %304, align 8
  %306 = bitcast %"struct.std::__1::__split_buffer"* %5 to i64*
  store i64 %302, i64* %306, align 8
  %307 = inttoptr i64 %302 to %"class.jxl::Plane"*
  %308 = inttoptr i64 %299 to %"class.jxl::Plane"*
  %309 = icmp eq %"class.jxl::Plane"* %308, %307
  br i1 %309, label %322, label %310

310:                                              ; preds = %296, %317
  %311 = phi %"class.jxl::Plane"* [ %318, %317 ], [ %308, %296 ]
  %312 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %311, i64 -1
  store %"class.jxl::Plane"* %312, %"class.jxl::Plane"** %128, align 8
  %313 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %311, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %314 = load i8*, i8** %313, align 8
  store i8* null, i8** %313, align 8
  %315 = icmp eq i8* %314, null
  br i1 %315, label %317, label %316

316:                                              ; preds = %310
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %314) #8
  br label %317

317:                                              ; preds = %316, %310
  %318 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %128, align 8
  %319 = icmp eq %"class.jxl::Plane"* %318, %307
  br i1 %319, label %320, label %310

320:                                              ; preds = %317
  %321 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %126, align 8
  br label %322

322:                                              ; preds = %320, %296
  %323 = phi %"class.jxl::Plane"* [ %321, %320 ], [ %307, %296 ]
  %324 = icmp eq %"class.jxl::Plane"* %323, null
  br i1 %324, label %327, label %325

325:                                              ; preds = %322
  %326 = bitcast %"class.jxl::Plane"* %323 to i8*
  call void @_ZdlPv(i8* %326) #10
  br label %327

327:                                              ; preds = %322, %325
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %125) #8
  br label %328

328:                                              ; preds = %122, %110, %16, %327
  %329 = phi %"class.jxl::Plane"* [ %1, %16 ], [ %173, %327 ], [ %1, %110 ], [ %1, %122 ]
  ret %"class.jxl::Plane"* %329
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl11ImageBundle16SetExtraChannelsEONSt3__16vectorINS_5PlaneIfEENS1_9allocatorIS4_EEEE(%"class.jxl::ImageBundle"* nocapture, %"class.std::__1::vector.85"* nocapture dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %1, i64 0, i32 0, i32 0
  %4 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %1, i64 0, i32 0, i32 1
  %6 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %5, align 8
  %7 = icmp eq %"class.jxl::Plane"* %4, %6
  %8 = ptrtoint %"class.jxl::Plane"* %4 to i64
  br i1 %7, label %11, label %51

9:                                                ; preds = %56
  %10 = icmp eq %"class.jxl::Plane"* %60, %6
  br i1 %10, label %11, label %51

11:                                               ; preds = %9, %2
  %12 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %13 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %12, i64 0, i32 0, i32 0
  %14 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %13, align 8
  %15 = icmp eq %"class.jxl::Plane"* %14, null
  br i1 %15, label %38, label %16

16:                                               ; preds = %11
  %17 = bitcast %"class.jxl::Plane"* %14 to i8*
  %18 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %19 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %18, align 8
  %20 = icmp eq %"class.jxl::Plane"* %19, %14
  br i1 %20, label %33, label %21

21:                                               ; preds = %16, %28
  %22 = phi %"class.jxl::Plane"* [ %23, %28 ], [ %19, %16 ]
  %23 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %22, i64 -1
  %24 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %22, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  store i8* null, i8** %24, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %28, label %27

27:                                               ; preds = %21
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %25) #8
  br label %28

28:                                               ; preds = %27, %21
  %29 = icmp eq %"class.jxl::Plane"* %23, %14
  br i1 %29, label %30, label %21

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::vector.85"* %12 to i8**
  %32 = load i8*, i8** %31, align 8
  br label %33

33:                                               ; preds = %30, %16
  %34 = phi i8* [ %32, %30 ], [ %17, %16 ]
  store %"class.jxl::Plane"* %14, %"class.jxl::Plane"** %18, align 8
  tail call void @_ZdlPv(i8* %34) #10
  %35 = bitcast %"class.std::__1::vector.85"* %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 24, i1 false) #8
  %36 = bitcast %"class.std::__1::vector.85"* %1 to i64*
  %37 = load i64, i64* %36, align 8
  br label %38

38:                                               ; preds = %11, %33
  %39 = phi i64 [ %37, %33 ], [ %8, %11 ]
  %40 = bitcast %"class.std::__1::vector.85"* %12 to i64*
  store i64 %39, i64* %40, align 8
  %41 = bitcast %"class.jxl::Plane"** %5 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %44 = bitcast %"class.jxl::Plane"** %43 to i64*
  store i64 %42, i64* %44, align 8
  %45 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %46 = bitcast %"class.jxl::Plane"** %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 2, i32 0, i32 0
  %49 = bitcast %"class.jxl::Plane"** %48 to i64*
  store i64 %47, i64* %49, align 8
  %50 = bitcast %"class.std::__1::vector.85"* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %50, i8 0, i64 24, i1 false) #8
  tail call void @_ZNK3jxl11ImageBundle11VerifySizesEv(%"class.jxl::ImageBundle"* %0)
  ret void

51:                                               ; preds = %2, %9
  %52 = phi %"class.jxl::Plane"* [ %60, %9 ], [ %4, %2 ]
  %53 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %52, i64 0, i32 0, i32 0
  %54 = load i32, i32* %53, align 8
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %61, label %56

56:                                               ; preds = %51
  %57 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %52, i64 0, i32 0, i32 1
  %58 = load i32, i32* %57, align 4
  %59 = icmp eq i32 %58, 0
  %60 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %52, i64 1
  br i1 %59, label %61, label %9

61:                                               ; preds = %56, %51
  %62 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 127, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.18, i64 0, i64 0)) #8
  %63 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"*, i64) local_unnamed_addr #2

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIN3jxl5PlaneIfEERNS_9allocatorIS3_EEE9push_backEOS3_(%"struct.std::__1::__split_buffer"*, %"class.jxl::Plane"* dereferenceable(32)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %4 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %5, align 8
  %7 = icmp eq %"class.jxl::Plane"* %4, %6
  %8 = ptrtoint %"class.jxl::Plane"* %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %11 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %13 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %12, align 8
  %14 = icmp ugt %"class.jxl::Plane"* %11, %13
  %15 = ptrtoint %"class.jxl::Plane"* %13 to i64
  br i1 %14, label %16, label %49

16:                                               ; preds = %9
  %17 = ptrtoint %"class.jxl::Plane"* %11 to i64
  %18 = sub i64 %17, %15
  %19 = ashr exact i64 %18, 5
  %20 = add nsw i64 %19, 1
  %21 = sdiv i64 %20, -2
  %22 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %11, i64 %21
  %23 = icmp eq %"class.jxl::Plane"* %11, %4
  br i1 %23, label %45, label %24

24:                                               ; preds = %16, %39
  %25 = phi %"class.jxl::Plane"* [ %41, %39 ], [ %22, %16 ]
  %26 = phi %"class.jxl::Plane"* [ %40, %39 ], [ %11, %16 ]
  %27 = bitcast %"class.jxl::Plane"* %25 to i8*
  %28 = bitcast %"class.jxl::Plane"* %26 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %27, i8* align 8 %28, i64 24, i1 false) #8
  %29 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %25, i64 0, i32 0, i32 5
  %30 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %26, i64 0, i32 0, i32 5
  %31 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %30, i64 0, i32 0, i32 0, i32 0
  %32 = bitcast %"class.std::__1::unique_ptr.75"* %30 to i64*
  %33 = load i64, i64* %32, align 8
  store i8* null, i8** %31, align 8
  %34 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %29, i64 0, i32 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = bitcast %"class.std::__1::unique_ptr.75"* %29 to i64*
  store i64 %33, i64* %36, align 8
  %37 = icmp eq i8* %35, null
  br i1 %37, label %39, label %38

38:                                               ; preds = %24
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %35) #8
  br label %39

39:                                               ; preds = %38, %24
  %40 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %26, i64 1
  %41 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %25, i64 1
  %42 = icmp eq %"class.jxl::Plane"* %40, %4
  br i1 %42, label %43, label %24

43:                                               ; preds = %39
  %44 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %10, align 8
  br label %45

45:                                               ; preds = %43, %16
  %46 = phi %"class.jxl::Plane"* [ %4, %16 ], [ %44, %43 ]
  %47 = phi %"class.jxl::Plane"* [ %22, %16 ], [ %41, %43 ]
  store %"class.jxl::Plane"* %47, %"class.jxl::Plane"** %3, align 8
  %48 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %46, i64 %21
  store %"class.jxl::Plane"* %48, %"class.jxl::Plane"** %10, align 8
  br label %147

49:                                               ; preds = %9
  %50 = bitcast %"class.jxl::Plane"** %5 to i64*
  %51 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %52 = sub i64 %8, %15
  %53 = ashr exact i64 %52, 4
  %54 = icmp eq i64 %52, 0
  %55 = select i1 %54, i64 1, i64 %53
  %56 = icmp ugt i64 %55, 576460752303423487
  br i1 %56, label %57, label %58

57:                                               ; preds = %49
  tail call void @abort() #9
  unreachable

58:                                               ; preds = %49
  %59 = lshr i64 %55, 2
  %60 = shl i64 %55, 5
  %61 = tail call i8* @_Znwm(i64 %60) #10
  %62 = bitcast i8* %61 to %"class.jxl::Plane"*
  %63 = ptrtoint i8* %61 to i64
  %64 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %62, i64 %59
  %65 = ptrtoint %"class.jxl::Plane"* %64 to i64
  %66 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %62, i64 %55
  %67 = ptrtoint %"class.jxl::Plane"* %66 to i64
  %68 = ptrtoint %"class.jxl::Plane"* %11 to i64
  %69 = ptrtoint %"class.jxl::Plane"* %4 to i64
  %70 = sub i64 %69, %68
  %71 = ashr exact i64 %70, 5
  %72 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %64, i64 %71
  %73 = icmp eq i64 %70, 0
  br i1 %73, label %126, label %74

74:                                               ; preds = %58
  %75 = add i64 %70, -32
  %76 = and i64 %75, 32
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %78, label %90

78:                                               ; preds = %74
  %79 = bitcast %"class.jxl::Plane"* %64 to i8*
  %80 = bitcast %"class.jxl::Plane"* %11 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %79, i8* align 8 %80, i64 24, i1 false) #8
  %81 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %62, i64 %59, i32 0, i32 5
  %82 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %11, i64 0, i32 0, i32 5
  %83 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %82, i64 0, i32 0, i32 0, i32 0
  %84 = bitcast %"class.std::__1::unique_ptr.75"* %82 to i64*
  %85 = load i64, i64* %84, align 8
  store i8* null, i8** %83, align 8
  %86 = bitcast %"class.std::__1::unique_ptr.75"* %81 to i64*
  store i64 %85, i64* %86, align 8
  %87 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %64, i64 1
  %88 = ptrtoint %"class.jxl::Plane"* %87 to i64
  %89 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %11, i64 1
  br label %90

90:                                               ; preds = %78, %74
  %91 = phi %"class.jxl::Plane"* [ %64, %74 ], [ %87, %78 ]
  %92 = phi i64 [ %65, %74 ], [ %88, %78 ]
  %93 = phi %"class.jxl::Plane"* [ %11, %74 ], [ %89, %78 ]
  %94 = icmp ult i64 %75, 32
  br i1 %94, label %121, label %95

95:                                               ; preds = %90, %95
  %96 = phi %"class.jxl::Plane"* [ %117, %95 ], [ %91, %90 ]
  %97 = phi i64 [ %118, %95 ], [ %92, %90 ]
  %98 = phi %"class.jxl::Plane"* [ %119, %95 ], [ %93, %90 ]
  %99 = inttoptr i64 %97 to i8*
  %100 = bitcast %"class.jxl::Plane"* %98 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %99, i8* align 8 %100, i64 24, i1 false) #8
  %101 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %96, i64 0, i32 0, i32 5
  %102 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %98, i64 0, i32 0, i32 5
  %103 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %102, i64 0, i32 0, i32 0, i32 0
  %104 = bitcast %"class.std::__1::unique_ptr.75"* %102 to i64*
  %105 = load i64, i64* %104, align 8
  store i8* null, i8** %103, align 8
  %106 = bitcast %"class.std::__1::unique_ptr.75"* %101 to i64*
  store i64 %105, i64* %106, align 8
  %107 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %96, i64 1
  %108 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %98, i64 1
  %109 = bitcast %"class.jxl::Plane"* %107 to i8*
  %110 = bitcast %"class.jxl::Plane"* %108 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %109, i8* align 8 %110, i64 24, i1 false) #8
  %111 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %96, i64 1, i32 0, i32 5
  %112 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %98, i64 1, i32 0, i32 5
  %113 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %112, i64 0, i32 0, i32 0, i32 0
  %114 = bitcast %"class.std::__1::unique_ptr.75"* %112 to i64*
  %115 = load i64, i64* %114, align 8
  store i8* null, i8** %113, align 8
  %116 = bitcast %"class.std::__1::unique_ptr.75"* %111 to i64*
  store i64 %115, i64* %116, align 8
  %117 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %96, i64 2
  %118 = ptrtoint %"class.jxl::Plane"* %117 to i64
  %119 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %98, i64 2
  %120 = icmp eq %"class.jxl::Plane"* %72, %117
  br i1 %120, label %121, label %95

121:                                              ; preds = %95, %90
  %122 = ptrtoint %"class.jxl::Plane"* %72 to i64
  %123 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %12, align 8
  %124 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %10, align 8
  %125 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %3, align 8
  br label %126

126:                                              ; preds = %58, %121
  %127 = phi %"class.jxl::Plane"* [ %125, %121 ], [ %4, %58 ]
  %128 = phi %"class.jxl::Plane"* [ %124, %121 ], [ %11, %58 ]
  %129 = phi %"class.jxl::Plane"* [ %123, %121 ], [ %13, %58 ]
  %130 = phi i64 [ %122, %121 ], [ %65, %58 ]
  store i64 %63, i64* %51, align 8
  %131 = bitcast %"class.jxl::Plane"** %10 to i64*
  store i64 %65, i64* %131, align 8
  %132 = bitcast %"class.jxl::Plane"** %3 to i64*
  store i64 %130, i64* %132, align 8
  store i64 %67, i64* %50, align 8
  %133 = icmp eq %"class.jxl::Plane"* %127, %128
  br i1 %133, label %143, label %134

134:                                              ; preds = %126, %141
  %135 = phi %"class.jxl::Plane"* [ %136, %141 ], [ %127, %126 ]
  %136 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %135, i64 -1
  %137 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %135, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %138 = load i8*, i8** %137, align 8
  store i8* null, i8** %137, align 8
  %139 = icmp eq i8* %138, null
  br i1 %139, label %141, label %140

140:                                              ; preds = %134
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %138) #8
  br label %141

141:                                              ; preds = %140, %134
  %142 = icmp eq %"class.jxl::Plane"* %136, %128
  br i1 %142, label %143, label %134

143:                                              ; preds = %141, %126
  %144 = icmp eq %"class.jxl::Plane"* %129, null
  br i1 %144, label %147, label %145

145:                                              ; preds = %143
  %146 = bitcast %"class.jxl::Plane"* %129 to i8*
  tail call void @_ZdlPv(i8* %146) #10
  br label %147

147:                                              ; preds = %145, %143, %45, %2
  %148 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %3, align 8
  %149 = bitcast %"class.jxl::Plane"* %148 to i8*
  %150 = bitcast %"class.jxl::Plane"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %149, i8* align 8 %150, i64 24, i1 false) #8
  %151 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %148, i64 0, i32 0, i32 5
  %152 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5
  %153 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %152, i64 0, i32 0, i32 0, i32 0
  %154 = bitcast %"class.std::__1::unique_ptr.75"* %152 to i64*
  %155 = load i64, i64* %154, align 8
  store i8* null, i8** %153, align 8
  %156 = bitcast %"class.std::__1::unique_ptr.75"* %151 to i64*
  store i64 %155, i64* %156, align 8
  %157 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %3, align 8
  %158 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %157, i64 1
  store %"class.jxl::Plane"* %158, %"class.jxl::Plane"** %3, align 8
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
