; ModuleID = '../../components/viz/service/surfaces/pending_copy_output_request.cc'
source_filename = "../../components/viz/service/surfaces/pending_copy_output_request.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.viz::PendingCopyOutputRequest" = type { %"class.viz::LocalSurfaceId", %"class.viz::SubtreeCaptureId", %"class.std::__1::unique_ptr" }
%"class.viz::LocalSurfaceId" = type { i32, i32, %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.viz::SubtreeCaptureId" = type { i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.viz::CopyOutputRequest"* }
%"class.viz::CopyOutputRequest" = type { i8, %"class.base::OnceCallback", %class.scoped_refptr.1, %"class.gfx::Vector2d", %"class.gfx::Vector2d", %"class.absl::optional", %"class.absl::optional.3", %"class.absl::optional.3" }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.scoped_refptr.1 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.2" }>
%"class.base::RefCountedThreadSafe.2" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.gfx::Vector2d" = type { i32, i32 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.base::UnguessableToken" }
%"class.absl::optional.3" = type { %"class.absl::optional_internal::optional_data.4" }
%"class.absl::optional_internal::optional_data.4" = type { %"class.absl::optional_internal::optional_data_base.5" }
%"class.absl::optional_internal::optional_data_base.5" = type { %"class.absl::optional_internal::optional_data_dtor_base.6" }
%"class.absl::optional_internal::optional_data_dtor_base.6" = type { i8, %union.anon.7 }
%union.anon.7 = type { %"class.gfx::Rect" }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }

@_ZN3viz24PendingCopyOutputRequestC1ENS_14LocalSurfaceIdENS_16SubtreeCaptureIdENSt3__110unique_ptrINS_17CopyOutputRequestENS3_14default_deleteIS5_EEEE = hidden unnamed_addr alias void (%"struct.viz::PendingCopyOutputRequest"*, %"class.viz::LocalSurfaceId"*, i32, %"class.viz::CopyOutputRequest"*), void (%"struct.viz::PendingCopyOutputRequest"*, %"class.viz::LocalSurfaceId"*, i32, %"class.viz::CopyOutputRequest"*)* @_ZN3viz24PendingCopyOutputRequestC2ENS_14LocalSurfaceIdENS_16SubtreeCaptureIdENSt3__110unique_ptrINS_17CopyOutputRequestENS3_14default_deleteIS5_EEEE
@_ZN3viz24PendingCopyOutputRequestC1EOS0_ = hidden unnamed_addr alias void (%"struct.viz::PendingCopyOutputRequest"*, %"struct.viz::PendingCopyOutputRequest"*), void (%"struct.viz::PendingCopyOutputRequest"*, %"struct.viz::PendingCopyOutputRequest"*)* @_ZN3viz24PendingCopyOutputRequestC2EOS0_
@_ZN3viz24PendingCopyOutputRequestD1Ev = hidden unnamed_addr alias void (%"struct.viz::PendingCopyOutputRequest"*), void (%"struct.viz::PendingCopyOutputRequest"*)* @_ZN3viz24PendingCopyOutputRequestD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz24PendingCopyOutputRequestC2ENS_14LocalSurfaceIdENS_16SubtreeCaptureIdENSt3__110unique_ptrINS_17CopyOutputRequestENS3_14default_deleteIS5_EEEE(%"struct.viz::PendingCopyOutputRequest"* nocapture, %"class.viz::LocalSurfaceId"* nocapture readonly, i32, %"class.viz::CopyOutputRequest"*) unnamed_addr #0 align 2 {
  %5 = ptrtoint %"class.viz::CopyOutputRequest"* %3 to i64
  %6 = getelementptr inbounds %"struct.viz::PendingCopyOutputRequest", %"struct.viz::PendingCopyOutputRequest"* %0, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.viz::LocalSurfaceId", %"class.viz::LocalSurfaceId"* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  store i32 %8, i32* %6, align 8
  %9 = getelementptr inbounds %"struct.viz::PendingCopyOutputRequest", %"struct.viz::PendingCopyOutputRequest"* %0, i64 0, i32 0, i32 1
  %10 = getelementptr inbounds %"class.viz::LocalSurfaceId", %"class.viz::LocalSurfaceId"* %1, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  store i32 %11, i32* %9, align 4
  %12 = getelementptr inbounds %"struct.viz::PendingCopyOutputRequest", %"struct.viz::PendingCopyOutputRequest"* %0, i64 0, i32 0, i32 2
  %13 = getelementptr inbounds %"class.viz::LocalSurfaceId", %"class.viz::LocalSurfaceId"* %1, i64 0, i32 2
  %14 = bitcast %"class.base::UnguessableToken"* %12 to i8*
  %15 = bitcast %"class.base::UnguessableToken"* %13 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 16, i1 false) #4
  %16 = getelementptr inbounds %"struct.viz::PendingCopyOutputRequest", %"struct.viz::PendingCopyOutputRequest"* %0, i64 0, i32 1, i32 0
  store i32 %2, i32* %16, align 8
  %17 = getelementptr inbounds %"struct.viz::PendingCopyOutputRequest", %"struct.viz::PendingCopyOutputRequest"* %0, i64 0, i32 2
  %18 = bitcast %"class.std::__1::unique_ptr"* %17 to i64*
  store i64 %5, i64* %18, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz24PendingCopyOutputRequestC2EOS0_(%"struct.viz::PendingCopyOutputRequest"* nocapture, %"struct.viz::PendingCopyOutputRequest"* nocapture dereferenceable(40)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.viz::PendingCopyOutputRequest", %"struct.viz::PendingCopyOutputRequest"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"struct.viz::PendingCopyOutputRequest", %"struct.viz::PendingCopyOutputRequest"* %1, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 8
  store i32 %5, i32* %3, align 8
  %6 = getelementptr inbounds %"struct.viz::PendingCopyOutputRequest", %"struct.viz::PendingCopyOutputRequest"* %0, i64 0, i32 0, i32 1
  %7 = getelementptr inbounds %"struct.viz::PendingCopyOutputRequest", %"struct.viz::PendingCopyOutputRequest"* %1, i64 0, i32 0, i32 1
  %8 = load i32, i32* %7, align 4
  store i32 %8, i32* %6, align 4
  %9 = getelementptr inbounds %"struct.viz::PendingCopyOutputRequest", %"struct.viz::PendingCopyOutputRequest"* %0, i64 0, i32 0, i32 2
  %10 = getelementptr inbounds %"struct.viz::PendingCopyOutputRequest", %"struct.viz::PendingCopyOutputRequest"* %1, i64 0, i32 0, i32 2
  %11 = bitcast %"class.base::UnguessableToken"* %9 to i8*
  %12 = bitcast %"class.base::UnguessableToken"* %10 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 16, i1 false) #4
  %13 = getelementptr inbounds %"struct.viz::PendingCopyOutputRequest", %"struct.viz::PendingCopyOutputRequest"* %1, i64 0, i32 1, i32 0
  %14 = getelementptr inbounds %"struct.viz::PendingCopyOutputRequest", %"struct.viz::PendingCopyOutputRequest"* %0, i64 0, i32 1, i32 0
  %15 = load i32, i32* %13, align 8
  store i32 %15, i32* %14, align 8
  %16 = getelementptr inbounds %"struct.viz::PendingCopyOutputRequest", %"struct.viz::PendingCopyOutputRequest"* %0, i64 0, i32 2
  %17 = getelementptr inbounds %"struct.viz::PendingCopyOutputRequest", %"struct.viz::PendingCopyOutputRequest"* %1, i64 0, i32 2
  %18 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %17, i64 0, i32 0, i32 0, i32 0
  %19 = bitcast %"class.std::__1::unique_ptr"* %17 to i64*
  %20 = load i64, i64* %19, align 8
  store %"class.viz::CopyOutputRequest"* null, %"class.viz::CopyOutputRequest"** %18, align 8
  %21 = bitcast %"class.std::__1::unique_ptr"* %16 to i64*
  store i64 %20, i64* %21, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(40) %"struct.viz::PendingCopyOutputRequest"* @_ZN3viz24PendingCopyOutputRequestaSEOS0_(%"struct.viz::PendingCopyOutputRequest"* returned, %"struct.viz::PendingCopyOutputRequest"* nocapture dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"struct.viz::PendingCopyOutputRequest"* %0 to i8*
  %4 = bitcast %"struct.viz::PendingCopyOutputRequest"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 24, i1 false)
  %5 = getelementptr inbounds %"struct.viz::PendingCopyOutputRequest", %"struct.viz::PendingCopyOutputRequest"* %1, i64 0, i32 1, i32 0
  %6 = getelementptr inbounds %"struct.viz::PendingCopyOutputRequest", %"struct.viz::PendingCopyOutputRequest"* %0, i64 0, i32 1, i32 0
  %7 = load i32, i32* %5, align 8
  store i32 %7, i32* %6, align 8
  %8 = getelementptr inbounds %"struct.viz::PendingCopyOutputRequest", %"struct.viz::PendingCopyOutputRequest"* %0, i64 0, i32 2
  %9 = getelementptr inbounds %"struct.viz::PendingCopyOutputRequest", %"struct.viz::PendingCopyOutputRequest"* %1, i64 0, i32 2
  %10 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %9, i64 0, i32 0, i32 0, i32 0
  %11 = bitcast %"class.std::__1::unique_ptr"* %9 to i64*
  %12 = load i64, i64* %11, align 8
  store %"class.viz::CopyOutputRequest"* null, %"class.viz::CopyOutputRequest"** %10, align 8
  %13 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %8, i64 0, i32 0, i32 0, i32 0
  %14 = load %"class.viz::CopyOutputRequest"*, %"class.viz::CopyOutputRequest"** %13, align 8
  %15 = bitcast %"class.std::__1::unique_ptr"* %8 to i64*
  store i64 %12, i64* %15, align 8
  %16 = icmp eq %"class.viz::CopyOutputRequest"* %14, null
  br i1 %16, label %19, label %17

17:                                               ; preds = %2
  tail call void @_ZN3viz17CopyOutputRequestD1Ev(%"class.viz::CopyOutputRequest"* nonnull %14) #4
  %18 = getelementptr inbounds %"class.viz::CopyOutputRequest", %"class.viz::CopyOutputRequest"* %14, i64 0, i32 0
  tail call void @_ZdlPv(i8* %18) #5
  br label %19

19:                                               ; preds = %2, %17
  ret %"struct.viz::PendingCopyOutputRequest"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz24PendingCopyOutputRequestD2Ev(%"struct.viz::PendingCopyOutputRequest"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.viz::PendingCopyOutputRequest", %"struct.viz::PendingCopyOutputRequest"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = load %"class.viz::CopyOutputRequest"*, %"class.viz::CopyOutputRequest"** %2, align 8
  store %"class.viz::CopyOutputRequest"* null, %"class.viz::CopyOutputRequest"** %2, align 8
  %4 = icmp eq %"class.viz::CopyOutputRequest"* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  tail call void @_ZN3viz17CopyOutputRequestD1Ev(%"class.viz::CopyOutputRequest"* nonnull %3) #4
  %6 = getelementptr inbounds %"class.viz::CopyOutputRequest", %"class.viz::CopyOutputRequest"* %3, i64 0, i32 0
  tail call void @_ZdlPv(i8* %6) #5
  br label %7

7:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind
declare void @_ZN3viz17CopyOutputRequestD1Ev(%"class.viz::CopyOutputRequest"*) unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
