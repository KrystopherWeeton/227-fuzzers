; ModuleID = '../../third_party/pdfium/core/fxcrt/fx_extension.cpp'
source_filename = "../../third_party/pdfium/core/fxcrt/fx_extension.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }

@_ZZ22FXSYS_IntToTwoHexCharshPcE4kHex = internal unnamed_addr constant [17 x i8] c"0123456789ABCDEF\00", align 16
@_ZN12_GLOBAL__N_111g_time_funcE = internal unnamed_addr global i64 ()* @_ZN12_GLOBAL__N_119DefaultTimeFunctionEv, align 8
@_ZN12_GLOBAL__N_116g_localtime_funcE = internal unnamed_addr global %struct.tm* (i64*)* @_ZN12_GLOBAL__N_124DefaultLocaltimeFunctionEPKl, align 8

; Function Attrs: nounwind ssp uwtable
define hidden float @_Z12FXSYS_wcstofPKwiPi(i32* nocapture readonly, i32, i32*) local_unnamed_addr #0 {
  %4 = icmp slt i32 %1, 0
  br i1 %4, label %5, label %8

5:                                                ; preds = %3
  %6 = tail call i64 @wcslen(i32* %0) #6
  %7 = trunc i64 %6 to i32
  br label %8

8:                                                ; preds = %5, %3
  %9 = phi i32 [ %7, %5 ], [ %1, %3 ]
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %176, label %11

11:                                               ; preds = %8
  %12 = load i32, i32* %0, align 4
  switch i32 %12, label %16 [
    i32 45, label %13
    i32 43, label %14
  ]

13:                                               ; preds = %11
  br label %14

14:                                               ; preds = %11, %13
  %15 = phi i1 [ false, %11 ], [ true, %13 ]
  br label %16

16:                                               ; preds = %11, %14
  %17 = phi i32 [ 0, %11 ], [ 1, %14 ]
  %18 = phi i1 [ false, %11 ], [ %15, %14 ]
  %19 = icmp slt i32 %17, %9
  br i1 %19, label %20, label %45

20:                                               ; preds = %16
  %21 = zext i32 %17 to i64
  %22 = zext i32 %9 to i64
  br label %23

23:                                               ; preds = %33, %20
  %24 = phi i64 [ %21, %20 ], [ %38, %33 ]
  %25 = phi float [ 0.000000e+00, %20 ], [ %37, %33 ]
  %26 = phi i32 [ %17, %20 ], [ %39, %33 ]
  %27 = getelementptr inbounds i32, i32* %0, i64 %24
  %28 = load i32, i32* %27, align 4
  %29 = icmp ugt i32 %28, 127
  br i1 %29, label %43, label %30

30:                                               ; preds = %23
  %31 = tail call i32 @iswdigit(i32 %28) #7
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %41, label %33

33:                                               ; preds = %30
  %34 = fmul float %25, 1.000000e+01
  %35 = add nsw i32 %28, -48
  %36 = sitofp i32 %35 to float
  %37 = fadd float %34, %36
  %38 = add nuw nsw i64 %24, 1
  %39 = add nuw nsw i32 %26, 1
  %40 = icmp eq i64 %38, %22
  br i1 %40, label %45, label %23

41:                                               ; preds = %30
  %42 = trunc i64 %24 to i32
  br label %45

43:                                               ; preds = %23
  %44 = trunc i64 %24 to i32
  br label %45

45:                                               ; preds = %33, %41, %43, %16
  %46 = phi i32 [ %17, %16 ], [ %42, %41 ], [ %44, %43 ], [ %39, %33 ]
  %47 = phi float [ 0.000000e+00, %16 ], [ %25, %41 ], [ %25, %43 ], [ %37, %33 ]
  %48 = icmp slt i32 %46, %9
  br i1 %48, label %49, label %79

49:                                               ; preds = %45
  %50 = zext i32 %46 to i64
  %51 = getelementptr inbounds i32, i32* %0, i64 %50
  %52 = load i32, i32* %51, align 4
  %53 = icmp eq i32 %52, 46
  br i1 %53, label %54, label %79

54:                                               ; preds = %49
  %55 = add nuw nsw i32 %46, 1
  %56 = icmp slt i32 %55, %9
  br i1 %56, label %57, label %79

57:                                               ; preds = %54, %69
  %58 = phi i64 [ %62, %69 ], [ %50, %54 ]
  %59 = phi i32 [ %75, %69 ], [ %55, %54 ]
  %60 = phi float [ %74, %69 ], [ 0x3FB99999A0000000, %54 ]
  %61 = phi float [ %73, %69 ], [ %47, %54 ]
  %62 = add i64 %58, 1
  %63 = getelementptr inbounds i32, i32* %0, i64 %62
  %64 = load i32, i32* %63, align 4
  %65 = icmp ugt i32 %64, 127
  br i1 %65, label %77, label %66

66:                                               ; preds = %57
  %67 = tail call i32 @iswdigit(i32 %64) #7
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %77, label %69

69:                                               ; preds = %66
  %70 = add nsw i32 %64, -48
  %71 = sitofp i32 %70 to float
  %72 = fmul float %60, %71
  %73 = fadd float %61, %72
  %74 = fmul float %60, 0x3FB99999A0000000
  %75 = add nsw i32 %59, 1
  %76 = icmp eq i32 %75, %9
  br i1 %76, label %168, label %57

77:                                               ; preds = %66, %57
  %78 = trunc i64 %62 to i32
  br label %79

79:                                               ; preds = %77, %54, %49, %45
  %80 = phi i32 [ %46, %49 ], [ %46, %45 ], [ %55, %54 ], [ %78, %77 ]
  %81 = phi float [ %47, %49 ], [ %47, %45 ], [ %47, %54 ], [ %61, %77 ]
  %82 = icmp slt i32 %80, %9
  br i1 %82, label %83, label %168

83:                                               ; preds = %79
  %84 = sext i32 %80 to i64
  %85 = getelementptr inbounds i32, i32* %0, i64 %84
  %86 = load i32, i32* %85, align 4
  switch i32 %86, label %168 [
    i32 101, label %87
    i32 69, label %87
  ]

87:                                               ; preds = %83, %83
  %88 = add nsw i32 %80, 1
  %89 = icmp slt i32 %88, %9
  br i1 %89, label %90, label %97

90:                                               ; preds = %87
  %91 = sext i32 %88 to i64
  %92 = getelementptr inbounds i32, i32* %0, i64 %91
  %93 = load i32, i32* %92, align 4
  switch i32 %93, label %97 [
    i32 45, label %94
    i32 43, label %94
  ]

94:                                               ; preds = %90, %90
  %95 = icmp eq i32 %93, 45
  %96 = add nsw i32 %80, 2
  br label %97

97:                                               ; preds = %90, %94, %87
  %98 = phi i32 [ %96, %94 ], [ %88, %87 ], [ %88, %90 ]
  %99 = phi i1 [ %95, %94 ], [ false, %87 ], [ false, %90 ]
  %100 = icmp slt i32 %98, %9
  br i1 %100, label %101, label %168

101:                                              ; preds = %97
  %102 = sext i32 %98 to i64
  br label %103

103:                                              ; preds = %126, %101
  %104 = phi i64 [ %102, %101 ], [ %127, %126 ]
  %105 = phi i32 [ 0, %101 ], [ %119, %126 ]
  %106 = phi i32 [ %98, %101 ], [ %128, %126 ]
  %107 = getelementptr inbounds i32, i32* %0, i64 %104
  %108 = load i32, i32* %107, align 4
  %109 = icmp ugt i32 %108, 127
  br i1 %109, label %131, label %110

110:                                              ; preds = %103
  %111 = tail call i32 @iswdigit(i32 %108) #7
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %133, label %113

113:                                              ; preds = %110
  %114 = sitofp i32 %105 to float
  %115 = fmul float %114, 1.000000e+01
  %116 = add nsw i32 %108, -48
  %117 = sitofp i32 %116 to float
  %118 = fadd float %115, %117
  %119 = fptosi float %118 to i32
  %120 = icmp sgt i32 %119, 37
  %121 = icmp sgt i32 %119, 38
  %122 = select i1 %99, i1 %120, i1 %121
  br i1 %122, label %123, label %126

123:                                              ; preds = %113
  %124 = icmp eq i32* %2, null
  br i1 %124, label %176, label %125

125:                                              ; preds = %123
  store i32 0, i32* %2, align 4
  br label %176

126:                                              ; preds = %113
  %127 = add nsw i64 %104, 1
  %128 = add nsw i32 %106, 1
  %129 = trunc i64 %127 to i32
  %130 = icmp eq i32 %9, %129
  br i1 %130, label %135, label %103

131:                                              ; preds = %103
  %132 = trunc i64 %104 to i32
  br label %135

133:                                              ; preds = %110
  %134 = trunc i64 %104 to i32
  br label %135

135:                                              ; preds = %126, %133, %131
  %136 = phi i32 [ %132, %131 ], [ %134, %133 ], [ %128, %126 ]
  %137 = phi i32 [ %105, %131 ], [ %105, %133 ], [ %119, %126 ]
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %168, label %139

139:                                              ; preds = %135
  %140 = sext i32 %137 to i64
  %141 = icmp sgt i32 %137, 0
  %142 = and i64 %140, 1
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %153, label %144

144:                                              ; preds = %139
  br i1 %141, label %145, label %150

145:                                              ; preds = %144
  br i1 %99, label %148, label %146

146:                                              ; preds = %145
  %147 = fmul float %81, 1.000000e+01
  br label %150

148:                                              ; preds = %145
  %149 = fdiv float %81, 1.000000e+01
  br label %150

150:                                              ; preds = %148, %146, %144
  %151 = phi float [ %149, %148 ], [ %147, %146 ], [ %81, %144 ]
  %152 = add nsw i64 %140, -1
  br label %153

153:                                              ; preds = %139, %150
  %154 = phi float [ undef, %139 ], [ %151, %150 ]
  %155 = phi i64 [ %140, %139 ], [ %152, %150 ]
  %156 = phi float [ %81, %139 ], [ %151, %150 ]
  %157 = icmp eq i32 %137, 1
  br i1 %157, label %168, label %158

158:                                              ; preds = %153, %183
  %159 = phi i64 [ %185, %183 ], [ %155, %153 ]
  %160 = phi float [ %184, %183 ], [ %156, %153 ]
  br i1 %141, label %161, label %166

161:                                              ; preds = %158
  br i1 %99, label %162, label %164

162:                                              ; preds = %161
  %163 = fdiv float %160, 1.000000e+01
  br label %166

164:                                              ; preds = %161
  %165 = fmul float %160, 1.000000e+01
  br label %166

166:                                              ; preds = %158, %164, %162
  %167 = phi float [ %163, %162 ], [ %165, %164 ], [ %160, %158 ]
  br i1 %141, label %178, label %183

168:                                              ; preds = %69, %153, %183, %97, %135, %83, %79
  %169 = phi i32 [ %80, %79 ], [ %80, %83 ], [ %136, %135 ], [ %98, %97 ], [ %136, %183 ], [ %136, %153 ], [ %9, %69 ]
  %170 = phi float [ %81, %79 ], [ %81, %83 ], [ %81, %135 ], [ %81, %97 ], [ %154, %153 ], [ %184, %183 ], [ %73, %69 ]
  %171 = icmp eq i32* %2, null
  br i1 %171, label %173, label %172

172:                                              ; preds = %168
  store i32 %169, i32* %2, align 4
  br label %173

173:                                              ; preds = %168, %172
  %174 = fsub float -0.000000e+00, %170
  %175 = select i1 %18, float %174, float %170
  br label %176

176:                                              ; preds = %125, %123, %173, %8
  %177 = phi float [ 0.000000e+00, %8 ], [ %175, %173 ], [ 0.000000e+00, %123 ], [ 0.000000e+00, %125 ]
  ret float %177

178:                                              ; preds = %166
  br i1 %99, label %181, label %179

179:                                              ; preds = %178
  %180 = fmul float %167, 1.000000e+01
  br label %183

181:                                              ; preds = %178
  %182 = fdiv float %167, 1.000000e+01
  br label %183

183:                                              ; preds = %181, %179, %166
  %184 = phi float [ %182, %181 ], [ %180, %179 ], [ %167, %166 ]
  %185 = add i64 %159, -2
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %168, label %158
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @wcslen(i32* nocapture) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32* @_Z13FXSYS_wcsncpyPwPKwm(i32* returned, i32* nocapture readonly, i64) local_unnamed_addr #2 {
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %14, label %5

5:                                                ; preds = %3, %5
  %6 = phi i64 [ %11, %5 ], [ 0, %3 ]
  %7 = getelementptr inbounds i32, i32* %1, i64 %6
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 %6
  store i32 %8, i32* %9, align 4
  %10 = icmp ne i32 %8, 0
  %11 = add nuw i64 %6, 1
  %12 = icmp ult i64 %11, %2
  %13 = and i1 %10, %12
  br i1 %13, label %5, label %14

14:                                               ; preds = %5, %3
  ret i32* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_Z14FXSYS_wcsnicmpPKwS0_m(i32* nocapture readonly, i32* nocapture readonly, i64) local_unnamed_addr #0 {
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %19, label %9

5:                                                ; preds = %9
  %6 = getelementptr inbounds i32, i32* %11, i64 1
  %7 = getelementptr inbounds i32, i32* %12, i64 1
  %8 = icmp eq i64 %13, 0
  br i1 %8, label %19, label %9

9:                                                ; preds = %3, %5
  %10 = phi i64 [ %13, %5 ], [ %2, %3 ]
  %11 = phi i32* [ %6, %5 ], [ %1, %3 ]
  %12 = phi i32* [ %7, %5 ], [ %0, %3 ]
  %13 = add i64 %10, -1
  %14 = load i32, i32* %12, align 4
  %15 = tail call i32 @u_tolower_69(i32 %14) #7
  %16 = load i32, i32* %11, align 4
  %17 = tail call i32 @u_tolower_69(i32 %16) #7
  %18 = icmp eq i32 %15, %17
  br i1 %18, label %5, label %19

19:                                               ; preds = %5, %9, %3
  %20 = phi i32 [ 0, %3 ], [ %15, %9 ], [ %15, %5 ]
  %21 = phi i32 [ 0, %3 ], [ %15, %5 ], [ %17, %9 ]
  %22 = sub nsw i32 %20, %21
  ret i32 %22
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_Z22FXSYS_IntToTwoHexCharshPc(i8 zeroext, i8* nocapture) local_unnamed_addr #3 {
  %3 = zext i8 %0 to i32
  %4 = lshr i32 %3, 4
  %5 = zext i32 %4 to i64
  %6 = getelementptr inbounds [17 x i8], [17 x i8]* @_ZZ22FXSYS_IntToTwoHexCharshPcE4kHex, i64 0, i64 %5
  %7 = load i8, i8* %6, align 1
  store i8 %7, i8* %1, align 1
  %8 = and i32 %3, 15
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds [17 x i8], [17 x i8]* @_ZZ22FXSYS_IntToTwoHexCharshPcE4kHex, i64 0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr inbounds i8, i8* %1, i64 1
  store i8 %11, i8* %12, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_Z23FXSYS_IntToFourHexCharstPc(i16 zeroext, i8* nocapture) local_unnamed_addr #3 {
  %3 = lshr i16 %0, 8
  %4 = zext i16 %3 to i32
  %5 = lshr i32 %4, 4
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds [17 x i8], [17 x i8]* @_ZZ22FXSYS_IntToTwoHexCharshPcE4kHex, i64 0, i64 %6
  %8 = load i8, i8* %7, align 1
  store i8 %8, i8* %1, align 1
  %9 = and i32 %4, 15
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds [17 x i8], [17 x i8]* @_ZZ22FXSYS_IntToTwoHexCharshPcE4kHex, i64 0, i64 %10
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds i8, i8* %1, i64 1
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds i8, i8* %1, i64 2
  %15 = and i16 %0, 255
  %16 = zext i16 %15 to i32
  %17 = lshr i32 %16, 4
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds [17 x i8], [17 x i8]* @_ZZ22FXSYS_IntToTwoHexCharshPcE4kHex, i64 0, i64 %18
  %20 = load i8, i8* %19, align 1
  store i8 %20, i8* %14, align 1
  %21 = and i32 %16, 15
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds [17 x i8], [17 x i8]* @_ZZ22FXSYS_IntToTwoHexCharshPcE4kHex, i64 0, i64 %22
  %24 = load i8, i8* %23, align 1
  %25 = getelementptr inbounds i8, i8* %1, i64 3
  store i8 %24, i8* %25, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i64 @_Z15FXSYS_ToUTF16BEjPc(i32, i8* nocapture) local_unnamed_addr #3 {
  %3 = icmp ult i32 %0, 65536
  br i1 %3, label %4, label %26

4:                                                ; preds = %2
  %5 = lshr i32 %0, 8
  %6 = lshr i32 %0, 12
  %7 = and i32 %6, 15
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds [17 x i8], [17 x i8]* @_ZZ22FXSYS_IntToTwoHexCharshPcE4kHex, i64 0, i64 %8
  %10 = load i8, i8* %9, align 1
  store i8 %10, i8* %1, align 1
  %11 = and i32 %5, 15
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds [17 x i8], [17 x i8]* @_ZZ22FXSYS_IntToTwoHexCharshPcE4kHex, i64 0, i64 %12
  %14 = load i8, i8* %13, align 1
  %15 = getelementptr inbounds i8, i8* %1, i64 1
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds i8, i8* %1, i64 2
  %17 = lshr i32 %0, 4
  %18 = and i32 %17, 15
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds [17 x i8], [17 x i8]* @_ZZ22FXSYS_IntToTwoHexCharshPcE4kHex, i64 0, i64 %19
  %21 = load i8, i8* %20, align 1
  store i8 %21, i8* %16, align 1
  %22 = and i32 %0, 15
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds [17 x i8], [17 x i8]* @_ZZ22FXSYS_IntToTwoHexCharshPcE4kHex, i64 0, i64 %23
  %25 = load i8, i8* %24, align 1
  br label %72

26:                                               ; preds = %2
  %27 = add i32 %0, -65536
  %28 = lshr i32 %27, 10
  %29 = trunc i32 %28 to i16
  %30 = add i16 %29, -10240
  %31 = lshr i16 %30, 8
  %32 = zext i16 %31 to i32
  %33 = lshr i32 %32, 4
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds [17 x i8], [17 x i8]* @_ZZ22FXSYS_IntToTwoHexCharshPcE4kHex, i64 0, i64 %34
  %36 = load i8, i8* %35, align 1
  store i8 %36, i8* %1, align 1
  %37 = and i32 %32, 15
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds [17 x i8], [17 x i8]* @_ZZ22FXSYS_IntToTwoHexCharshPcE4kHex, i64 0, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = getelementptr inbounds i8, i8* %1, i64 1
  store i8 %40, i8* %41, align 1
  %42 = getelementptr inbounds i8, i8* %1, i64 2
  %43 = and i16 %30, 255
  %44 = zext i16 %43 to i32
  %45 = lshr i32 %44, 4
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds [17 x i8], [17 x i8]* @_ZZ22FXSYS_IntToTwoHexCharshPcE4kHex, i64 0, i64 %46
  %48 = load i8, i8* %47, align 1
  store i8 %48, i8* %42, align 1
  %49 = and i32 %44, 15
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds [17 x i8], [17 x i8]* @_ZZ22FXSYS_IntToTwoHexCharshPcE4kHex, i64 0, i64 %50
  %52 = load i8, i8* %51, align 1
  %53 = getelementptr inbounds i8, i8* %1, i64 4
  %54 = lshr i32 %27, 8
  store i8 68, i8* %53, align 1
  %55 = and i32 %54, 3
  %56 = or i32 %55, 12
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds [17 x i8], [17 x i8]* @_ZZ22FXSYS_IntToTwoHexCharshPcE4kHex, i64 0, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = getelementptr inbounds i8, i8* %1, i64 5
  store i8 %59, i8* %60, align 1
  %61 = getelementptr inbounds i8, i8* %1, i64 6
  %62 = lshr i32 %27, 4
  %63 = and i32 %62, 15
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds [17 x i8], [17 x i8]* @_ZZ22FXSYS_IntToTwoHexCharshPcE4kHex, i64 0, i64 %64
  %66 = load i8, i8* %65, align 1
  store i8 %66, i8* %61, align 1
  %67 = and i32 %27, 15
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds [17 x i8], [17 x i8]* @_ZZ22FXSYS_IntToTwoHexCharshPcE4kHex, i64 0, i64 %68
  %70 = load i8, i8* %69, align 1
  %71 = getelementptr inbounds i8, i8* %1, i64 7
  store i8 %70, i8* %71, align 1
  br label %72

72:                                               ; preds = %26, %4
  %73 = phi i8 [ %52, %26 ], [ %25, %4 ]
  %74 = phi i64 [ 8, %26 ], [ 4, %4 ]
  %75 = getelementptr inbounds i8, i8* %1, i64 3
  store i8 %73, i8* %75, align 1
  ret i64 %74
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_Z21FXSYS_SetTimeFunctionPFlvE(i64 ()*) local_unnamed_addr #3 {
  %2 = icmp eq i64 ()* %0, null
  %3 = select i1 %2, i64 ()* @_ZN12_GLOBAL__N_119DefaultTimeFunctionEv, i64 ()* %0
  store i64 ()* %3, i64 ()** @_ZN12_GLOBAL__N_111g_time_funcE, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @_ZN12_GLOBAL__N_119DefaultTimeFunctionEv() #0 {
  %1 = tail call i64 @time(i64* null) #7
  ret i64 %1
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_Z26FXSYS_SetLocaltimeFunctionPFP2tmPKlE(%struct.tm* (i64*)*) local_unnamed_addr #3 {
  %2 = icmp eq %struct.tm* (i64*)* %0, null
  %3 = select i1 %2, %struct.tm* (i64*)* @_ZN12_GLOBAL__N_124DefaultLocaltimeFunctionEPKl, %struct.tm* (i64*)* %0
  store %struct.tm* (i64*)* %3, %struct.tm* (i64*)** @_ZN12_GLOBAL__N_116g_localtime_funcE, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal %struct.tm* @_ZN12_GLOBAL__N_124DefaultLocaltimeFunctionEPKl(i64*) #0 {
  %2 = tail call %struct.tm* @localtime(i64* %0) #7
  ret %struct.tm* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_Z10FXSYS_timePl(i64*) local_unnamed_addr #0 {
  %2 = load i64 ()*, i64 ()** @_ZN12_GLOBAL__N_111g_time_funcE, align 8
  %3 = tail call i64 %2() #7
  %4 = icmp eq i64* %0, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  store i64 %3, i64* %0, align 8
  br label %6

6:                                                ; preds = %1, %5
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.tm* @_Z15FXSYS_localtimePKl(i64*) local_unnamed_addr #0 {
  %2 = load %struct.tm* (i64*)*, %struct.tm* (i64*)** @_ZN12_GLOBAL__N_116g_localtime_funcE, align 8
  %3 = tail call %struct.tm* %2(i64* %0) #7
  ret %struct.tm* %3
}

; Function Attrs: nounwind
declare i32 @iswdigit(i32) local_unnamed_addr #4

declare i32 @u_tolower_69(i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare i64 @time(i64*) local_unnamed_addr #4

; Function Attrs: nounwind
declare %struct.tm* @localtime(i64*) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
