; ModuleID = '../../third_party/boringssl/src/ssl/s3_lib.cc'
source_filename = "../../third_party/boringssl/src/ssl/s3_lib.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.bssl::SSL3_STATE" = type <{ [8 x i8], [8 x i8], [32 x i8], [32 x i8], %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer", %"class.bssl::Span", i32, i32, i32, i32, i8*, i32, i32, %"class.std::__1::unique_ptr", i32, i32, i32, i32, i16, i8, i8, i8, i16, i8, %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr.6", %"class.std::__1::unique_ptr.6", %"class.std::__1::unique_ptr.11", [48 x i8], [48 x i8], [48 x i8], i8, i8, i8, [12 x i8], i8, i8, [12 x i8], [2 x i8], i8, %"class.std::__1::unique_ptr.78", %"class.bssl::Array", %"class.bssl::Array", %"class.std::__1::unique_ptr.42", [64 x i8], %"class.bssl::Array", %struct.srtp_protection_profile_st* }>
%"class.bssl::SSLBuffer" = type <{ i8*, i16, i16, i16, [5 x i8], i8, [4 x i8] }>
%"class.bssl::Span" = type { i8*, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %struct.err_save_state_st* }
%struct.err_save_state_st = type opaque
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %struct.buf_mem_st* }
%struct.buf_mem_st = type { i64, i8*, i64 }
%"class.std::__1::unique_ptr.6" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.bssl::SSLAEADContext"* }
%"class.bssl::SSLAEADContext" = type <{ %struct.ssl_cipher_st*, %"class.bssl::internal::StackAllocated", [12 x i8], i8, i8, i16, i8, i8, [6 x i8] }>
%struct.ssl_cipher_st = type { i8*, i8*, i32, i32, i32, i32, i32, i32 }
%"class.bssl::internal::StackAllocated" = type { %struct.evp_aead_ctx_st }
%struct.evp_aead_ctx_st = type { %struct.evp_aead_st*, %union.evp_aead_ctx_st_state, i8 }
%struct.evp_aead_st = type opaque
%union.evp_aead_ctx_st_state = type { i64, [576 x i8] }
%"class.std::__1::unique_ptr.11" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"struct.bssl::SSL_HANDSHAKE"* }
%"struct.bssl::SSL_HANDSHAKE" = type <{ %struct.ssl_st*, %"struct.bssl::SSL_CONFIG"*, i32, i32, i32, i16, i16, i64, [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], %union.anon.103, i16, [2 x i8], %"class.std::__1::unique_ptr", [2 x %"class.std::__1::unique_ptr.104"], %"class.bssl::SSLTranscript", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array.52", %"class.bssl::Array.52", %"class.bssl::Array.52", %"class.bssl::Array", i16, [6 x i8], %"class.bssl::internal::StackAllocated.110", %"class.bssl::Array", %"class.std::__1::unique_ptr.42", %"class.std::__1::unique_ptr.36", %struct.stack_st_X509_NAME*, %"class.bssl::Array", %"class.std::__1::unique_ptr.31", %"class.std::__1::unique_ptr.31", %"class.std::__1::unique_ptr.78", %"class.std::__1::unique_ptr.78", %"class.std::__1::unique_ptr.93", %struct.ssl_cipher_st*, %"class.bssl::Array", %"class.std::__1::unique_ptr.111", i32, i16, i16, i16, i8, [32 x i8], i8, [6 x i8], [6 x i8] }>
%struct.ssl_st = type <{ %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"class.std::__1::unique_ptr.15", i16, i16, [4 x i8], %"class.std::__1::unique_ptr.68", %"class.std::__1::unique_ptr.68", i32 (%"struct.bssl::SSL_HANDSHAKE"*)*, %"struct.bssl::SSL3_STATE"*, %"struct.bssl::DTLS1_STATE"*, void (i32, i32, i32, i8*, i64, %struct.ssl_st*, i8*)*, i8*, i32, [4 x i8], %"class.std::__1::unique_ptr.78", void (%struct.ssl_st*, i32, i32)*, %"class.std::__1::unique_ptr.83", %"class.std::__1::unique_ptr.83", %struct.crypto_ex_data_st, i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr.42", %struct.ssl_quic_method_st*, i32, i8, [3 x i8] }>
%"struct.bssl::SSL_PROTOCOL_METHOD" = type { i8, i1 (%struct.ssl_st*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*, %"struct.bssl::SSLMessage"*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, %"class.bssl::Span"*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, i32 (%struct.ssl_st*)*, i1 (%struct.ssl_st*, %struct.cbb_st*, %struct.cbb_st*, i8)*, i1 (%struct.ssl_st*, %struct.cbb_st*, %"class.bssl::Array"*)*, i1 (%struct.ssl_st*, %"class.bssl::Array"*)*, i1 (%struct.ssl_st*)*, i32 (%struct.ssl_st*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*, i32, %"class.bssl::SSLAEADContext"*, i8*, i64)*, i1 (%struct.ssl_st*, i32, %"class.bssl::SSLAEADContext"*, i8*, i64)* }
%"struct.bssl::SSLMessage" = type { i8, i8, %struct.cbs_st, %struct.cbs_st }
%struct.cbs_st = type { i8*, i64 }
%struct.cbb_st = type { %struct.cbb_buffer_st*, %struct.cbb_st*, i64, i8, i8, i8 }
%struct.cbb_buffer_st = type { i8*, i64, i64, i8, i8 }
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"struct.bssl::SSL_CONFIG"* }
%"class.std::__1::unique_ptr.68" = type { %"class.std::__1::__compressed_pair.69" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %struct.bio_st* }
%struct.bio_st = type { %struct.bio_method_st*, i32, i32, i32, i32, i32, i32, i8*, %struct.bio_st*, i64, i64 }
%struct.bio_method_st = type { i32, i8*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*)*, i32 (%struct.bio_st*, i8*, i32)*, i64 (%struct.bio_st*, i32, i64, i8*)*, i32 (%struct.bio_st*)*, i32 (%struct.bio_st*)*, i64 (%struct.bio_st*, i32, i64 (%struct.bio_st*, i32, i8*, i32, i64, i64)*)* }
%"struct.bssl::DTLS1_STATE" = type <{ i8, [256 x i8], [7 x i8], i64, i16, i16, [4 x i8], %"struct.bssl::DTLS1_BITMAP", i16, i16, [8 x i8], [4 x i8], %"class.std::__1::unique_ptr.6", [7 x %"class.std::__1::unique_ptr.73"], [7 x %"struct.bssl::DTLS_OUTGOING_MESSAGE"], i8, i8, [2 x i8], i32, i32, i32, %"struct.bssl::OPENSSL_timeval", i32, [4 x i8] }>
%"struct.bssl::DTLS1_BITMAP" = type { i64, i64 }
%"class.std::__1::unique_ptr.73" = type { %"class.std::__1::__compressed_pair.74" }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"struct.bssl::hm_fragment"* }
%"struct.bssl::hm_fragment" = type { i8, i16, i32, i8*, i8* }
%"struct.bssl::DTLS_OUTGOING_MESSAGE" = type <{ i8*, i32, i16, i8, i8 }>
%"struct.bssl::OPENSSL_timeval" = type { i64, i32 }
%"class.std::__1::unique_ptr.83" = type { %"class.std::__1::__compressed_pair.84" }
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.85" }
%"struct.std::__1::__compressed_pair_elem.85" = type { %struct.ssl_ctx_st* }
%struct.ssl_ctx_st = type <{ %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"struct.bssl::SSL_X509_METHOD"*, %union.crypto_mutex_st, i16, i16, [4 x i8], %struct.ssl_quic_method_st*, %"class.std::__1::unique_ptr.18", %struct.x509_store_st*, %struct.lhash_st_SSL_SESSION*, i64, %struct.ssl_session_st*, %struct.ssl_session_st*, i32, i32, i32, i32, i32 (%struct.ssl_st*, %struct.ssl_session_st*)*, void (%struct.ssl_ctx_st*, %struct.ssl_session_st*)*, %struct.ssl_session_st* (%struct.ssl_st*, i8*, i32, i32*)*, i32, [4 x i8], i32 (%struct.x509_store_ctx_st*, i8*)*, i8*, i32 (%struct.ssl_st*, i8*)*, i32 (i8*, i32, i32, i8*)*, i8*, i32 (%struct.ssl_st*, %struct.x509_st**, %struct.evp_pkey_st**)*, void (%struct.ssl_st*, %struct.evp_pkey_st**)*, %struct.crypto_ex_data_st, void (%struct.ssl_st*, i32, i32)*, %"class.std::__1::unique_ptr.36", %struct.stack_st_X509_NAME*, i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr.28", void (i32, i32, i32, i8*, i64, %struct.ssl_st*, i8*)*, i8*, i32, [4 x i8], i32 (i32, %struct.x509_store_ctx_st*)*, %struct.X509_VERIFY_PARAM_st*, i32 (%struct.ssl_early_callback_ctx*)*, i32 (%struct.ssl_early_callback_ctx*)*, i8, i8, i16, [4 x i8], i32 (%struct.ssl_st*, i32*, i8*)*, i8*, %"class.std::__1::unique_ptr.86", %"class.std::__1::unique_ptr.86", i32 (%struct.ssl_st*, i8*, i8*, %struct.evp_cipher_ctx_st*, %struct.hmac_ctx_st*, i32)*, %"class.std::__1::unique_ptr.42", i32 (%struct.ssl_st*, i8*, i8*, i32, i8*, i32)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, i32 (%struct.ssl_st*, i8**, i32*, i8*)*, i8*, i32 (%struct.ssl_st*, i8**, i8*, i8*, i32, i8*)*, i8*, i32 (%struct.ssl_st*, i8**, i8*, i8*, i32, i8*)*, i8*, %"class.bssl::Array", %"class.std::__1::unique_ptr.61", %"class.bssl::GrowableArray.91", %"class.bssl::Array.52", %"class.std::__1::unique_ptr.31", %"class.std::__1::unique_ptr.93", void (%struct.ssl_st*, i8*)*, void (%struct.ssl_st*, %struct.timeval*)*, %struct.crypto_buffer_pool_st*, %struct.ssl_ticket_aead_method_st*, i32 (%struct.ssl_st*, i8*)*, i8*, %"class.bssl::Array.52", i16, [6 x i8] }>
%"struct.bssl::SSL_X509_METHOD" = type { i1 (%struct.stack_st_CRYPTO_BUFFER*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*, %"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, i1 (%struct.ssl_session_st*)*, i1 (%struct.ssl_session_st*, %struct.ssl_session_st*)*, void (%struct.ssl_session_st*)*, i1 (%struct.ssl_session_st*, %"struct.bssl::SSL_HANDSHAKE"*, i8*)*, void (%"struct.bssl::SSL_HANDSHAKE"*)*, i1 (%"struct.bssl::SSL_HANDSHAKE"*)*, void (%"struct.bssl::SSL_CONFIG"*)*, void (%"struct.bssl::SSL_CONFIG"*)*, i1 (%"struct.bssl::SSL_HANDSHAKE"*)*, i1 (%struct.ssl_ctx_st*)*, void (%struct.ssl_ctx_st*)*, void (%struct.ssl_ctx_st*)* }
%struct.stack_st_CRYPTO_BUFFER = type opaque
%"struct.bssl::CERT" = type { %"class.std::__1::unique_ptr.31", %"class.std::__1::unique_ptr.36", %struct.stack_st_X509*, %struct.x509_st*, %struct.x509_st*, %struct.ssl_private_key_method_st*, %"struct.bssl::SSL_X509_METHOD"*, %"class.bssl::Array.52", i32 (%struct.ssl_st*, i8*)*, i8*, %struct.x509_store_st*, %"class.std::__1::unique_ptr.47", %"class.std::__1::unique_ptr.47", i8, [32 x i8], %"class.std::__1::unique_ptr.53", %"class.std::__1::unique_ptr.31", %struct.ssl_private_key_method_st* }
%struct.stack_st_X509 = type opaque
%struct.x509_st = type { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st }
%struct.x509_cinf_st = type { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.X509_val_st = type opaque
%struct.X509_name_st = type { %struct.stack_st_X509_NAME_ENTRY*, i32, %struct.buf_mem_st*, i8*, i32 }
%struct.stack_st_X509_NAME_ENTRY = type opaque
%struct.X509_pubkey_st = type opaque
%struct.stack_st_X509_EXTENSION = type opaque
%struct.ASN1_ENCODING_st = type { i8*, i64, i32, i8 }
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_type_st = type { i32, %union.anon.41 }
%union.anon.41 = type { i8* }
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.AUTHORITY_KEYID_st = type opaque
%struct.X509_POLICY_CACHE_st = type opaque
%struct.stack_st_DIST_POINT = type opaque
%struct.stack_st_GENERAL_NAME = type opaque
%struct.NAME_CONSTRAINTS_st = type opaque
%struct.x509_cert_aux_st = type opaque
%struct.crypto_buffer_st = type opaque
%"class.std::__1::unique_ptr.47" = type { %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %struct.crypto_buffer_st* }
%"class.std::__1::unique_ptr.53" = type { %"class.std::__1::__compressed_pair.54" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { %"struct.bssl::DC"* }
%"struct.bssl::DC" = type { %"class.std::__1::unique_ptr.47", i16, %"class.std::__1::unique_ptr.31" }
%struct.ssl_private_key_method_st = type { i32 (%struct.ssl_st*, i8*, i64*, i64, i16, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64)* }
%union.crypto_mutex_st = type { double, [48 x i8] }
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"struct.bssl::SSLCipherPreferenceList"* }
%"struct.bssl::SSLCipherPreferenceList" = type { %"class.std::__1::unique_ptr.21", i8* }
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %struct.stack_st_SSL_CIPHER* }
%struct.stack_st_SSL_CIPHER = type opaque
%struct.x509_store_st = type { i32, %struct.stack_st_X509_OBJECT*, %union.crypto_mutex_st, %struct.stack_st_X509*, %struct.stack_st_X509_LOOKUP*, %struct.X509_VERIFY_PARAM_st*, i32 (%struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)*, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, i32 (%struct.x509_store_ctx_st*)*, i32 }
%struct.stack_st_X509_OBJECT = type opaque
%struct.stack_st_X509_LOOKUP = type opaque
%struct.x509_store_ctx_st = type { %struct.x509_store_st*, %struct.x509_st*, %struct.stack_st_X509*, %struct.stack_st_X509_CRL*, %struct.X509_VERIFY_PARAM_st*, i8*, {}*, i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, {}*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)*, {}*, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, {}*, i32, i32, %struct.stack_st_X509*, %struct.X509_POLICY_TREE_st*, i32, i32, i32, %struct.x509_st*, %struct.x509_st*, %struct.X509_crl_st*, i32, i32, %struct.x509_store_ctx_st*, %struct.crypto_ex_data_st }
%struct.stack_st_X509_CRL = type opaque
%struct.X509_POLICY_TREE_st = type opaque
%struct.X509_crl_st = type { %struct.X509_crl_info_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, i32, %struct.AUTHORITY_KEYID_st*, %struct.ISSUING_DIST_POINT_st*, i32, i32, %struct.asn1_string_st*, %struct.asn1_string_st*, [20 x i8], %struct.stack_st_GENERAL_NAMES*, %struct.x509_crl_method_st*, i8* }
%struct.X509_crl_info_st = type { %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_REVOKED*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.stack_st_X509_REVOKED = type opaque
%struct.ISSUING_DIST_POINT_st = type opaque
%struct.stack_st_GENERAL_NAMES = type opaque
%struct.x509_crl_method_st = type opaque
%struct.lhash_st_SSL_SESSION = type opaque
%struct.ssl_session_st = type { i32, i16, i16, i16, i32, [48 x i8], i32, [32 x i8], i8, [32 x i8], %"class.std::__1::unique_ptr.42", %"class.std::__1::unique_ptr.36", %"struct.bssl::SSL_X509_METHOD"*, %struct.x509_st*, %struct.stack_st_X509*, %struct.stack_st_X509*, i64, i32, i32, i64, %struct.ssl_cipher_st*, %struct.crypto_ex_data_st, %struct.ssl_session_st*, %struct.ssl_session_st*, %"class.bssl::Array", %"class.std::__1::unique_ptr.47", %"class.std::__1::unique_ptr.47", [32 x i8], [64 x i8], i8, i32, i32, i32, %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", i8, %"class.bssl::Array" }
%struct.evp_pkey_st = type { i32, i32, %union.anon, %struct.evp_pkey_asn1_method_st* }
%union.anon = type { i8* }
%struct.evp_pkey_asn1_method_st = type opaque
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"struct.bssl::CERT"* }
%struct.X509_VERIFY_PARAM_st = type { i8*, i64, i64, i64, i32, i32, i32, %struct.stack_st_ASN1_OBJECT*, %struct.X509_VERIFY_PARAM_ID_st* }
%struct.stack_st_ASN1_OBJECT = type opaque
%struct.X509_VERIFY_PARAM_ID_st = type opaque
%struct.ssl_early_callback_ctx = type { %struct.ssl_st*, i8*, i64, i16, i8*, i64, i8*, i64, i8*, i64, i8*, i64, i8*, i64 }
%"class.std::__1::unique_ptr.86" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"struct.bssl::TicketKey"* }
%"struct.bssl::TicketKey" = type { [16 x i8], [16 x i8], [16 x i8], i64 }
%struct.evp_cipher_ctx_st = type { %struct.evp_cipher_st*, i8*, i8*, i32, i32, i32, [16 x i8], [16 x i8], [32 x i8], i32, i32, i32, [32 x i8] }
%struct.evp_cipher_st = type { i32, i32, i32, i32, i32, i32, i8*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i32)*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i64)*, void (%struct.evp_cipher_ctx_st*)*, i32 (%struct.evp_cipher_ctx_st*, i32, i32, i8*)* }
%struct.hmac_ctx_st = type { %struct.env_md_st*, %struct.env_md_ctx_st, %struct.env_md_ctx_st, %struct.env_md_ctx_st }
%struct.env_md_st = type opaque
%struct.env_md_ctx_st = type { %struct.env_md_st*, i8*, %struct.evp_pkey_ctx_st*, %struct.evp_md_pctx_ops* }
%struct.evp_pkey_ctx_st = type opaque
%struct.evp_md_pctx_ops = type opaque
%"class.std::__1::unique_ptr.61" = type { %"class.std::__1::__compressed_pair.62" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %struct.stack_st_SRTP_PROTECTION_PROFILE* }
%struct.stack_st_SRTP_PROTECTION_PROFILE = type opaque
%"class.bssl::GrowableArray.91" = type { i64, %"class.bssl::Array.92" }
%"class.bssl::Array.92" = type { %"struct.bssl::CertCompressionAlg"*, i64 }
%"struct.bssl::CertCompressionAlg" = type <{ i32 (%struct.ssl_st*, %struct.cbb_st*, i8*, i64)*, i32 (%struct.ssl_st*, %struct.crypto_buffer_st**, i64, i8*, i64)*, i16, [6 x i8] }>
%struct.timeval = type { i64, i64 }
%struct.crypto_buffer_pool_st = type opaque
%struct.ssl_ticket_aead_method_st = type { i64 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)* }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%struct.ssl_quic_method_st = type { i32 (%struct.ssl_st*, i32, %struct.ssl_cipher_st*, i8*, i64)*, i32 (%struct.ssl_st*, i32, %struct.ssl_cipher_st*, i8*, i64)*, i32 (%struct.ssl_st*, i32, i8*, i64)*, i32 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i32, i8)* }
%"struct.bssl::SSL_CONFIG" = type <{ %struct.ssl_st*, i16, i16, [4 x i8], %struct.X509_VERIFY_PARAM_st*, %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.28", i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.ssl_st*, i8*)*, %"class.std::__1::unique_ptr.42", i32 (%struct.ssl_st*, i8*, i8*, i32, i8*, i32)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, %"class.std::__1::unique_ptr.36", %struct.stack_st_X509_NAME*, %"class.bssl::Array.52", %"class.std::__1::unique_ptr.31", %"class.bssl::Array", %"class.bssl::GrowableArray", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array.52", %"class.std::__1::unique_ptr.61", i8, i16, [5 x i8] }>
%"class.bssl::GrowableArray" = type { i64, %"class.bssl::Array.60" }
%"class.bssl::Array.60" = type { %"struct.bssl::ALPSConfig"*, i64 }
%"struct.bssl::ALPSConfig" = type { %"class.bssl::Array", %"class.bssl::Array" }
%union.anon.103 = type { i32 }
%"class.std::__1::unique_ptr.104" = type { %"class.std::__1::__compressed_pair.105" }
%"class.std::__1::__compressed_pair.105" = type { %"struct.std::__1::__compressed_pair_elem.106" }
%"struct.std::__1::__compressed_pair_elem.106" = type { %"class.bssl::SSLKeyShare"* }
%"class.bssl::SSLKeyShare" = type { i32 (...)** }
%"class.bssl::SSLTranscript" = type { %"class.std::__1::unique_ptr.1", %"class.bssl::internal::StackAllocated.109" }
%"class.bssl::internal::StackAllocated.109" = type { %struct.env_md_ctx_st }
%"class.bssl::Array.52" = type { i16*, i64 }
%"class.bssl::internal::StackAllocated.110" = type { %struct.evp_hpke_ctx_st }
%struct.evp_hpke_ctx_st = type { %struct.evp_hpke_aead_st*, %struct.evp_hpke_kdf_st*, %struct.evp_aead_ctx_st, [24 x i8], [64 x i8], i64, i32 }
%struct.evp_hpke_aead_st = type opaque
%struct.evp_hpke_kdf_st = type opaque
%"class.std::__1::unique_ptr.36" = type { %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %struct.stack_st_CRYPTO_BUFFER* }
%struct.stack_st_X509_NAME = type opaque
%"class.std::__1::unique_ptr.31" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %struct.evp_pkey_st* }
%"class.std::__1::unique_ptr.93" = type { %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.95" = type { %struct.ssl_ech_server_config_list_st* }
%struct.ssl_ech_server_config_list_st = type <{ %"class.bssl::GrowableArray.96", i32, [4 x i8] }>
%"class.bssl::GrowableArray.96" = type { i64, %"class.bssl::Array.97" }
%"class.bssl::Array.97" = type { %"class.std::__1::unique_ptr.98"*, i64 }
%"class.std::__1::unique_ptr.98" = type opaque
%"class.std::__1::unique_ptr.111" = type { %"class.std::__1::__compressed_pair.112" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { %"struct.bssl::SSL_HANDSHAKE_HINTS"* }
%"struct.bssl::SSL_HANDSHAKE_HINTS" = type <{ %"class.bssl::Array", i16, [6 x i8], %"class.bssl::Array", %"class.bssl::Array", i16, [6 x i8], %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", i8, [7 x i8] }>
%"class.std::__1::unique_ptr.78" = type { %"class.std::__1::__compressed_pair.79" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %struct.ssl_session_st* }
%"class.std::__1::unique_ptr.42" = type { %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { i8* }
%"class.bssl::Array" = type { i8*, i64 }
%struct.srtp_protection_profile_st = type { i8*, i64 }

@.str = private unnamed_addr constant [47 x i8] c"../../third_party/boringssl/src/ssl/internal.h\00", align 1

@_ZN4bssl10SSL3_STATEC1Ev = hidden unnamed_addr alias void (%"struct.bssl::SSL3_STATE"*), void (%"struct.bssl::SSL3_STATE"*)* @_ZN4bssl10SSL3_STATEC2Ev
@_ZN4bssl10SSL3_STATED1Ev = hidden unnamed_addr alias void (%"struct.bssl::SSL3_STATE"*), void (%"struct.bssl::SSL3_STATE"*)* @_ZN4bssl10SSL3_STATED2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4bssl10SSL3_STATEC2Ev(%"struct.bssl::SSL3_STATE"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %0, i64 0, i32 0, i64 0
  %3 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %0, i64 0, i32 4, i32 5
  store i8 0, i8* %3, align 1
  %4 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %0, i64 0, i32 5
  %5 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %0, i64 0, i32 5, i32 5
  store i8 0, i8* %5, align 1
  %6 = bitcast %"class.bssl::SSLBuffer"* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 14, i1 false) #4
  %7 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %0, i64 0, i32 6
  %8 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %0, i64 0, i32 25
  %9 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %0, i64 0, i32 32
  %10 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %0, i64 0, i32 47
  call void @llvm.memset.p0i8.i64(i8* align 1 %2, i8 0, i64 94, i1 false)
  %11 = bitcast %"class.bssl::Span"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 79, i1 false)
  %12 = bitcast %"class.std::__1::unique_ptr.1"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 36, i1 false)
  %13 = bitcast %"class.std::__1::unique_ptr.6"* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 199, i1 false)
  %14 = bitcast %"class.std::__1::unique_ptr.78"* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 136, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4bssl10SSL3_STATED2Ev(%"struct.bssl::SSL3_STATE"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %0, i64 0, i32 52
  %3 = getelementptr inbounds %"class.bssl::Array", %"class.bssl::Array"* %2, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  tail call void @OPENSSL_free(i8* %4) #4
  %5 = bitcast %"class.bssl::Array"* %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false) #4
  %6 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %0, i64 0, i32 50, i32 0, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  store i8* null, i8** %6, align 8
  %8 = icmp eq i8* %7, null
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  tail call void @OPENSSL_free(i8* nonnull %7) #4
  br label %10

10:                                               ; preds = %1, %9
  %11 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %0, i64 0, i32 49
  %12 = getelementptr inbounds %"class.bssl::Array", %"class.bssl::Array"* %11, i64 0, i32 0
  %13 = load i8*, i8** %12, align 8
  tail call void @OPENSSL_free(i8* %13) #4
  %14 = bitcast %"class.bssl::Array"* %11 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 16, i1 false) #4
  %15 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %0, i64 0, i32 48
  %16 = getelementptr inbounds %"class.bssl::Array", %"class.bssl::Array"* %15, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  tail call void @OPENSSL_free(i8* %17) #4
  %18 = bitcast %"class.bssl::Array"* %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 16, i1 false) #4
  %19 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %0, i64 0, i32 47, i32 0, i32 0, i32 0
  %20 = load %struct.ssl_session_st*, %struct.ssl_session_st** %19, align 8
  store %struct.ssl_session_st* null, %struct.ssl_session_st** %19, align 8
  %21 = icmp eq %struct.ssl_session_st* %20, null
  br i1 %21, label %23, label %22

22:                                               ; preds = %10
  tail call void @SSL_SESSION_free(%struct.ssl_session_st* nonnull %20) #4
  br label %23

23:                                               ; preds = %10, %22
  %24 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %0, i64 0, i32 34, i32 0, i32 0, i32 0
  %25 = load %"struct.bssl::SSL_HANDSHAKE"*, %"struct.bssl::SSL_HANDSHAKE"** %24, align 8
  store %"struct.bssl::SSL_HANDSHAKE"* null, %"struct.bssl::SSL_HANDSHAKE"** %24, align 8
  %26 = icmp eq %"struct.bssl::SSL_HANDSHAKE"* %25, null
  br i1 %26, label %29, label %27

27:                                               ; preds = %23
  tail call void @_ZN4bssl13SSL_HANDSHAKED1Ev(%"struct.bssl::SSL_HANDSHAKE"* nonnull %25) #4
  %28 = bitcast %"struct.bssl::SSL_HANDSHAKE"* %25 to i8*
  tail call void @OPENSSL_free(i8* nonnull %28) #4
  br label %29

29:                                               ; preds = %23, %27
  %30 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %0, i64 0, i32 33, i32 0, i32 0, i32 0
  %31 = load %"class.bssl::SSLAEADContext"*, %"class.bssl::SSLAEADContext"** %30, align 8
  store %"class.bssl::SSLAEADContext"* null, %"class.bssl::SSLAEADContext"** %30, align 8
  %32 = icmp eq %"class.bssl::SSLAEADContext"* %31, null
  br i1 %32, label %35, label %33

33:                                               ; preds = %29
  tail call void @_ZN4bssl14SSLAEADContextD1Ev(%"class.bssl::SSLAEADContext"* nonnull %31) #4
  %34 = bitcast %"class.bssl::SSLAEADContext"* %31 to i8*
  tail call void @OPENSSL_free(i8* nonnull %34) #4
  br label %35

35:                                               ; preds = %29, %33
  %36 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %0, i64 0, i32 32, i32 0, i32 0, i32 0
  %37 = load %"class.bssl::SSLAEADContext"*, %"class.bssl::SSLAEADContext"** %36, align 8
  store %"class.bssl::SSLAEADContext"* null, %"class.bssl::SSLAEADContext"** %36, align 8
  %38 = icmp eq %"class.bssl::SSLAEADContext"* %37, null
  br i1 %38, label %41, label %39

39:                                               ; preds = %35
  tail call void @_ZN4bssl14SSLAEADContextD1Ev(%"class.bssl::SSLAEADContext"* nonnull %37) #4
  %40 = bitcast %"class.bssl::SSLAEADContext"* %37 to i8*
  tail call void @OPENSSL_free(i8* nonnull %40) #4
  br label %41

41:                                               ; preds = %35, %39
  %42 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %0, i64 0, i32 27, i32 0, i32 0, i32 0
  %43 = load %struct.buf_mem_st*, %struct.buf_mem_st** %42, align 8
  store %struct.buf_mem_st* null, %struct.buf_mem_st** %42, align 8
  %44 = icmp eq %struct.buf_mem_st* %43, null
  br i1 %44, label %46, label %45

45:                                               ; preds = %41
  tail call void @BUF_MEM_free(%struct.buf_mem_st* nonnull %43) #4
  br label %46

46:                                               ; preds = %41, %45
  %47 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %0, i64 0, i32 26, i32 0, i32 0, i32 0
  %48 = load %struct.buf_mem_st*, %struct.buf_mem_st** %47, align 8
  store %struct.buf_mem_st* null, %struct.buf_mem_st** %47, align 8
  %49 = icmp eq %struct.buf_mem_st* %48, null
  br i1 %49, label %51, label %50

50:                                               ; preds = %46
  tail call void @BUF_MEM_free(%struct.buf_mem_st* nonnull %48) #4
  br label %51

51:                                               ; preds = %46, %50
  %52 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %0, i64 0, i32 25, i32 0, i32 0, i32 0
  %53 = load %struct.buf_mem_st*, %struct.buf_mem_st** %52, align 8
  store %struct.buf_mem_st* null, %struct.buf_mem_st** %52, align 8
  %54 = icmp eq %struct.buf_mem_st* %53, null
  br i1 %54, label %56, label %55

55:                                               ; preds = %51
  tail call void @BUF_MEM_free(%struct.buf_mem_st* nonnull %53) #4
  br label %56

56:                                               ; preds = %51, %55
  %57 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %0, i64 0, i32 14, i32 0, i32 0, i32 0
  %58 = load %struct.err_save_state_st*, %struct.err_save_state_st** %57, align 8
  store %struct.err_save_state_st* null, %struct.err_save_state_st** %57, align 8
  %59 = icmp eq %struct.err_save_state_st* %58, null
  br i1 %59, label %61, label %60

60:                                               ; preds = %56
  tail call void @ERR_SAVE_STATE_free(%struct.err_save_state_st* nonnull %58) #4
  br label %61

61:                                               ; preds = %56, %60
  %62 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %0, i64 0, i32 5
  tail call void @_ZN4bssl9SSLBuffer5ClearEv(%"class.bssl::SSLBuffer"* %62) #4
  %63 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %0, i64 0, i32 4
  tail call void @_ZN4bssl9SSLBuffer5ClearEv(%"class.bssl::SSLBuffer"* %63) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl7tls_newEP6ssl_st(%struct.ssl_st*) local_unnamed_addr #0 {
  %2 = tail call i8* @OPENSSL_malloc(i64 584) #4
  %3 = icmp eq i8* %2, null
  br i1 %3, label %4, label %5

4:                                                ; preds = %1
  tail call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 196) #4
  br label %60

5:                                                ; preds = %1
  %6 = bitcast i8* %2 to %"struct.bssl::SSL3_STATE"*
  %7 = getelementptr inbounds i8, i8* %2, i64 99
  store i8 0, i8* %7, align 1
  %8 = getelementptr inbounds i8, i8* %2, i64 104
  %9 = getelementptr inbounds i8, i8* %2, i64 123
  store i8 0, i8* %9, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 14, i1 false) #4
  %10 = getelementptr inbounds i8, i8* %2, i64 128
  %11 = getelementptr inbounds i8, i8* %2, i64 208
  %12 = getelementptr inbounds i8, i8* %2, i64 248
  %13 = getelementptr inbounds i8, i8* %2, i64 448
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %2, i8 0, i64 94, i1 false) #4
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 79, i1 false) #4
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 36, i1 false) #4
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 199, i1 false) #4
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 136, i1 false) #4
  %14 = tail call i32 @SSL_is_dtls(%struct.ssl_st* %0) #4
  %15 = icmp ne i32 %14, 0
  %16 = tail call %"class.bssl::SSLAEADContext"* @_ZN4bssl14SSLAEADContext16CreateNullCipherEb(i1 zeroext %15) #4
  %17 = ptrtoint %"class.bssl::SSLAEADContext"* %16 to i64
  %18 = bitcast i8* %12 to %"class.bssl::SSLAEADContext"**
  %19 = load %"class.bssl::SSLAEADContext"*, %"class.bssl::SSLAEADContext"** %18, align 8
  %20 = bitcast i8* %12 to i64*
  store i64 %17, i64* %20, align 8
  %21 = icmp eq %"class.bssl::SSLAEADContext"* %19, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %5
  tail call void @_ZN4bssl14SSLAEADContextD1Ev(%"class.bssl::SSLAEADContext"* nonnull %19) #4
  %23 = bitcast %"class.bssl::SSLAEADContext"* %19 to i8*
  tail call void @OPENSSL_free(i8* nonnull %23) #4
  br label %24

24:                                               ; preds = %22, %5
  %25 = tail call i32 @SSL_is_dtls(%struct.ssl_st* %0) #4
  %26 = icmp ne i32 %25, 0
  %27 = tail call %"class.bssl::SSLAEADContext"* @_ZN4bssl14SSLAEADContext16CreateNullCipherEb(i1 zeroext %26) #4
  %28 = ptrtoint %"class.bssl::SSLAEADContext"* %27 to i64
  %29 = getelementptr inbounds i8, i8* %2, i64 256
  %30 = bitcast i8* %29 to %"class.bssl::SSLAEADContext"**
  %31 = load %"class.bssl::SSLAEADContext"*, %"class.bssl::SSLAEADContext"** %30, align 8
  %32 = bitcast i8* %29 to i64*
  store i64 %28, i64* %32, align 8
  %33 = icmp eq %"class.bssl::SSLAEADContext"* %31, null
  br i1 %33, label %36, label %34

34:                                               ; preds = %24
  tail call void @_ZN4bssl14SSLAEADContextD1Ev(%"class.bssl::SSLAEADContext"* nonnull %31) #4
  %35 = bitcast %"class.bssl::SSLAEADContext"* %31 to i8*
  tail call void @OPENSSL_free(i8* nonnull %35) #4
  br label %36

36:                                               ; preds = %34, %24
  %37 = tail call %"struct.bssl::SSL_HANDSHAKE"* @_ZN4bssl17ssl_handshake_newEP6ssl_st(%struct.ssl_st* %0) #4
  %38 = ptrtoint %"struct.bssl::SSL_HANDSHAKE"* %37 to i64
  %39 = getelementptr inbounds i8, i8* %2, i64 264
  %40 = bitcast i8* %39 to %"struct.bssl::SSL_HANDSHAKE"**
  %41 = load %"struct.bssl::SSL_HANDSHAKE"*, %"struct.bssl::SSL_HANDSHAKE"** %40, align 8
  %42 = bitcast i8* %39 to i64*
  store i64 %38, i64* %42, align 8
  %43 = icmp eq %"struct.bssl::SSL_HANDSHAKE"* %41, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %36
  tail call void @_ZN4bssl13SSL_HANDSHAKED1Ev(%"struct.bssl::SSL_HANDSHAKE"* nonnull %41) #4
  %45 = bitcast %"struct.bssl::SSL_HANDSHAKE"* %41 to i8*
  tail call void @OPENSSL_free(i8* nonnull %45) #4
  br label %46

46:                                               ; preds = %44, %36
  %47 = load %"class.bssl::SSLAEADContext"*, %"class.bssl::SSLAEADContext"** %18, align 8
  %48 = icmp eq %"class.bssl::SSLAEADContext"* %47, null
  br i1 %48, label %59, label %49

49:                                               ; preds = %46
  %50 = load %"class.bssl::SSLAEADContext"*, %"class.bssl::SSLAEADContext"** %30, align 8
  %51 = icmp eq %"class.bssl::SSLAEADContext"* %50, null
  br i1 %51, label %59, label %52

52:                                               ; preds = %49
  %53 = load %"struct.bssl::SSL_HANDSHAKE"*, %"struct.bssl::SSL_HANDSHAKE"** %40, align 8
  %54 = icmp eq %"struct.bssl::SSL_HANDSHAKE"* %53, null
  br i1 %54, label %59, label %55

55:                                               ; preds = %52
  %56 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 8
  %57 = bitcast %"struct.bssl::SSL3_STATE"** %56 to i8**
  store i8* %2, i8** %57, align 8
  %58 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 2
  store i16 771, i16* %58, align 8
  br label %60

59:                                               ; preds = %52, %49, %46
  tail call void @_ZN4bssl10SSL3_STATED2Ev(%"struct.bssl::SSL3_STATE"* nonnull %6) #4
  tail call void @OPENSSL_free(i8* nonnull %2) #4
  br label %60

60:                                               ; preds = %4, %55, %59
  %61 = phi i1 [ false, %59 ], [ false, %4 ], [ true, %55 ]
  ret i1 %61
}

declare %"class.bssl::SSLAEADContext"* @_ZN4bssl14SSLAEADContext16CreateNullCipherEb(i1 zeroext) local_unnamed_addr #1

declare i32 @SSL_is_dtls(%struct.ssl_st*) local_unnamed_addr #1

declare %"struct.bssl::SSL_HANDSHAKE"* @_ZN4bssl17ssl_handshake_newEP6ssl_st(%struct.ssl_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4bssl8tls_freeEP6ssl_st(%struct.ssl_st*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.ssl_st* %0, null
  br i1 %2, label %9, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 8
  %5 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %4, align 8
  %6 = icmp eq %"struct.bssl::SSL3_STATE"* %5, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  tail call void @_ZN4bssl10SSL3_STATED2Ev(%"struct.bssl::SSL3_STATE"* nonnull %5) #4
  %8 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %5, i64 0, i32 0, i64 0
  tail call void @OPENSSL_free(i8* %8) #4
  store %"struct.bssl::SSL3_STATE"* null, %"struct.bssl::SSL3_STATE"** %4, align 8
  br label %9

9:                                                ; preds = %1, %3, %7
  ret void
}

declare void @_ZN4bssl9SSLBuffer5ClearEv(%"class.bssl::SSLBuffer"*) local_unnamed_addr #1

declare void @SSL_SESSION_free(%struct.ssl_session_st*) local_unnamed_addr #1

declare void @OPENSSL_free(i8*) local_unnamed_addr #1

declare void @ERR_SAVE_STATE_free(%struct.err_save_state_st*) local_unnamed_addr #1

declare void @BUF_MEM_free(%struct.buf_mem_st*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4bssl14SSLAEADContextD1Ev(%"class.bssl::SSLAEADContext"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN4bssl13SSL_HANDSHAKED1Ev(%"struct.bssl::SSL_HANDSHAKE"*) unnamed_addr #2

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #1

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
