; ModuleID = '../../sql/recover_module/btree.cc'
source_filename = "../../sql/recover_module/btree.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sql::recover::InnerPageDecoder" = type { i32, %"class.sql::recover::DatabasePageReader"*, i32, i32 }
%"class.sql::recover::DatabasePageReader" = type <{ i32, [4 x i8], %"class.std::__1::unique_ptr", %"class.sql::recover::VirtualTable"*, i32, [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.sql::recover::VirtualTable" = type opaque
%"class.sql::recover::LeafPageDecoder" = type <{ i64, %"class.sql::recover::DatabasePageReader"*, i32, i32, i64, i64, i32, [4 x i8] }>

@_ZN3sql7recover16InnerPageDecoderC1EPNS0_18DatabasePageReaderE = hidden unnamed_addr alias void (%"class.sql::recover::InnerPageDecoder"*, %"class.sql::recover::DatabasePageReader"*), void (%"class.sql::recover::InnerPageDecoder"*, %"class.sql::recover::DatabasePageReader"*)* @_ZN3sql7recover16InnerPageDecoderC2EPNS0_18DatabasePageReaderE
@_ZN3sql7recover15LeafPageDecoderC1EPNS0_18DatabasePageReaderE = hidden unnamed_addr alias void (%"class.sql::recover::LeafPageDecoder"*, %"class.sql::recover::DatabasePageReader"*), void (%"class.sql::recover::LeafPageDecoder"*, %"class.sql::recover::DatabasePageReader"*)* @_ZN3sql7recover15LeafPageDecoderC2EPNS0_18DatabasePageReaderE

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3sql7recover16InnerPageDecoderC2EPNS0_18DatabasePageReaderE(%"class.sql::recover::InnerPageDecoder"* nocapture, %"class.sql::recover::DatabasePageReader"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sql::recover::InnerPageDecoder", %"class.sql::recover::InnerPageDecoder"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.sql::recover::DatabasePageReader", %"class.sql::recover::DatabasePageReader"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  store i32 %5, i32* %3, align 8
  %6 = getelementptr inbounds %"class.sql::recover::InnerPageDecoder", %"class.sql::recover::InnerPageDecoder"* %0, i64 0, i32 1
  store %"class.sql::recover::DatabasePageReader"* %1, %"class.sql::recover::DatabasePageReader"** %6, align 8
  %7 = getelementptr inbounds %"class.sql::recover::InnerPageDecoder", %"class.sql::recover::InnerPageDecoder"* %0, i64 0, i32 2
  %8 = getelementptr inbounds %"class.sql::recover::DatabasePageReader", %"class.sql::recover::DatabasePageReader"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 3
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = shl nuw nsw i32 %12, 8
  %14 = getelementptr inbounds i8, i8* %9, i64 4
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = or i32 %13, %16
  %18 = getelementptr inbounds %"class.sql::recover::DatabasePageReader", %"class.sql::recover::DatabasePageReader"* %1, i64 0, i32 4
  %19 = load i32, i32* %18, align 8
  %20 = add nsw i32 %19, -12
  %21 = ashr i32 %20, 1
  %22 = icmp slt i32 %21, %17
  %23 = select i1 %22, i32 %21, i32 %17
  store i32 %23, i32* %7, align 8
  %24 = getelementptr inbounds %"class.sql::recover::InnerPageDecoder", %"class.sql::recover::InnerPageDecoder"* %0, i64 0, i32 3
  store i32 0, i32* %24, align 4
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_ZN3sql7recover16InnerPageDecoder16ComputeCellCountEPNS0_18DatabasePageReaderE(%"class.sql::recover::DatabasePageReader"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.sql::recover::DatabasePageReader", %"class.sql::recover::DatabasePageReader"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds i8, i8* %3, i64 3
  %5 = load i8, i8* %4, align 1
  %6 = zext i8 %5 to i32
  %7 = shl nuw nsw i32 %6, 8
  %8 = getelementptr inbounds i8, i8* %3, i64 4
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = or i32 %7, %10
  %12 = getelementptr inbounds %"class.sql::recover::DatabasePageReader", %"class.sql::recover::DatabasePageReader"* %0, i64 0, i32 4
  %13 = load i32, i32* %12, align 8
  %14 = add nsw i32 %13, -12
  %15 = ashr i32 %14, 1
  %16 = icmp slt i32 %15, %11
  %17 = select i1 %16, i32 %15, i32 %11
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3sql7recover16InnerPageDecoder10TryAdvanceEv(%"class.sql::recover::InnerPageDecoder"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.sql::recover::InnerPageDecoder", %"class.sql::recover::InnerPageDecoder"* %0, i64 0, i32 1
  %3 = load %"class.sql::recover::DatabasePageReader"*, %"class.sql::recover::DatabasePageReader"** %2, align 8
  %4 = getelementptr inbounds %"class.sql::recover::InnerPageDecoder", %"class.sql::recover::InnerPageDecoder"* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = tail call i32 @_ZN3sql7recover18DatabasePageReader8ReadPageEi(%"class.sql::recover::DatabasePageReader"* %3, i32 %5) #6
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %13, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.sql::recover::InnerPageDecoder", %"class.sql::recover::InnerPageDecoder"* %0, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = add nsw i32 %10, 1
  %12 = getelementptr inbounds %"class.sql::recover::InnerPageDecoder", %"class.sql::recover::InnerPageDecoder"* %0, i64 0, i32 3
  store i32 %11, i32* %12, align 4
  br label %80

13:                                               ; preds = %1
  %14 = load %"class.sql::recover::DatabasePageReader"*, %"class.sql::recover::DatabasePageReader"** %2, align 8
  %15 = getelementptr inbounds %"class.sql::recover::DatabasePageReader", %"class.sql::recover::DatabasePageReader"* %14, i64 0, i32 2, i32 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %"class.sql::recover::InnerPageDecoder", %"class.sql::recover::InnerPageDecoder"* %0, i64 0, i32 3
  %18 = load i32, i32* %17, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %17, align 4
  %20 = getelementptr inbounds %"class.sql::recover::InnerPageDecoder", %"class.sql::recover::InnerPageDecoder"* %0, i64 0, i32 2
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %18, %21
  br i1 %22, label %23, label %42

23:                                               ; preds = %13
  %24 = getelementptr inbounds i8, i8* %16, i64 8
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = shl nuw i32 %26, 24
  %28 = getelementptr inbounds i8, i8* %16, i64 9
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = shl nuw nsw i32 %30, 16
  %32 = or i32 %31, %27
  %33 = getelementptr inbounds i8, i8* %16, i64 10
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = shl nuw nsw i32 %35, 8
  %37 = or i32 %32, %36
  %38 = getelementptr inbounds i8, i8* %16, i64 11
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = or i32 %37, %40
  br label %80

42:                                               ; preds = %13
  %43 = shl i32 %18, 1
  %44 = add nsw i32 %43, 12
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i8, i8* %16, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = shl nuw nsw i32 %48, 8
  %50 = getelementptr inbounds i8, i8* %46, i64 1
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = or i32 %49, %52
  %54 = add nuw nsw i32 %53, 4
  %55 = getelementptr inbounds %"class.sql::recover::DatabasePageReader", %"class.sql::recover::DatabasePageReader"* %14, i64 0, i32 4
  %56 = load i32, i32* %55, align 8
  %57 = icmp sge i32 %54, %56
  %58 = icmp ult i32 %53, 12
  %59 = or i1 %58, %57
  br i1 %59, label %80, label %60

60:                                               ; preds = %42
  %61 = zext i32 %53 to i64
  %62 = getelementptr inbounds i8, i8* %16, i64 %61
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = shl nuw i32 %64, 24
  %66 = getelementptr inbounds i8, i8* %62, i64 1
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = shl nuw nsw i32 %68, 16
  %70 = or i32 %69, %65
  %71 = getelementptr inbounds i8, i8* %62, i64 2
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = shl nuw nsw i32 %73, 8
  %75 = or i32 %70, %74
  %76 = getelementptr inbounds i8, i8* %62, i64 3
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = or i32 %75, %78
  br label %80

80:                                               ; preds = %42, %23, %60, %8
  %81 = phi i32 [ 0, %8 ], [ %41, %23 ], [ %79, %60 ], [ 0, %42 ]
  ret i32 %81
}

declare i32 @_ZN3sql7recover18DatabasePageReader8ReadPageEi(%"class.sql::recover::DatabasePageReader"*, i32) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN3sql7recover16InnerPageDecoder13IsOnValidPageEPNS0_18DatabasePageReaderE(%"class.sql::recover::DatabasePageReader"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sql::recover::DatabasePageReader", %"class.sql::recover::DatabasePageReader"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 5
  ret i1 %5
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3sql7recover15LeafPageDecoderC2EPNS0_18DatabasePageReaderE(%"class.sql::recover::LeafPageDecoder"* nocapture, %"class.sql::recover::DatabasePageReader"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sql::recover::LeafPageDecoder", %"class.sql::recover::LeafPageDecoder"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.sql::recover::DatabasePageReader", %"class.sql::recover::DatabasePageReader"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = sext i32 %5 to i64
  store i64 %6, i64* %3, align 8
  %7 = getelementptr inbounds %"class.sql::recover::LeafPageDecoder", %"class.sql::recover::LeafPageDecoder"* %0, i64 0, i32 1
  store %"class.sql::recover::DatabasePageReader"* %1, %"class.sql::recover::DatabasePageReader"** %7, align 8
  %8 = getelementptr inbounds %"class.sql::recover::LeafPageDecoder", %"class.sql::recover::LeafPageDecoder"* %0, i64 0, i32 2
  %9 = getelementptr inbounds %"class.sql::recover::DatabasePageReader", %"class.sql::recover::DatabasePageReader"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 3
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = shl nuw nsw i32 %13, 8
  %15 = getelementptr inbounds i8, i8* %10, i64 4
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = or i32 %14, %17
  %19 = getelementptr inbounds %"class.sql::recover::DatabasePageReader", %"class.sql::recover::DatabasePageReader"* %1, i64 0, i32 4
  %20 = load i32, i32* %19, align 8
  %21 = add nsw i32 %20, -8
  %22 = ashr i32 %21, 1
  %23 = icmp slt i32 %22, %18
  %24 = select i1 %23, i32 %22, i32 %18
  store i32 %24, i32* %8, align 8
  %25 = getelementptr inbounds %"class.sql::recover::LeafPageDecoder", %"class.sql::recover::LeafPageDecoder"* %0, i64 0, i32 3
  %26 = bitcast i32* %25 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %26, i8 0, i64 24, i1 false)
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_ZN3sql7recover15LeafPageDecoder16ComputeCellCountEPNS0_18DatabasePageReaderE(%"class.sql::recover::DatabasePageReader"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.sql::recover::DatabasePageReader", %"class.sql::recover::DatabasePageReader"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds i8, i8* %3, i64 3
  %5 = load i8, i8* %4, align 1
  %6 = zext i8 %5 to i32
  %7 = shl nuw nsw i32 %6, 8
  %8 = getelementptr inbounds i8, i8* %3, i64 4
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = or i32 %7, %10
  %12 = getelementptr inbounds %"class.sql::recover::DatabasePageReader", %"class.sql::recover::DatabasePageReader"* %0, i64 0, i32 4
  %13 = load i32, i32* %12, align 8
  %14 = add nsw i32 %13, -8
  %15 = ashr i32 %14, 1
  %16 = icmp slt i32 %15, %11
  %17 = select i1 %16, i32 %15, i32 %11
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3sql7recover15LeafPageDecoder10TryAdvanceEv(%"class.sql::recover::LeafPageDecoder"*) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.sql::recover::LeafPageDecoder", %"class.sql::recover::LeafPageDecoder"* %0, i64 0, i32 1
  %3 = load %"class.sql::recover::DatabasePageReader"*, %"class.sql::recover::DatabasePageReader"** %2, align 8
  %4 = getelementptr inbounds %"class.sql::recover::LeafPageDecoder", %"class.sql::recover::LeafPageDecoder"* %0, i64 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @_ZN3sql7recover18DatabasePageReader8ReadPageEi(%"class.sql::recover::DatabasePageReader"* %3, i32 %6) #6
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %13, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.sql::recover::LeafPageDecoder", %"class.sql::recover::LeafPageDecoder"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %"class.sql::recover::LeafPageDecoder", %"class.sql::recover::LeafPageDecoder"* %0, i64 0, i32 3
  store i32 %11, i32* %12, align 4
  br label %62

13:                                               ; preds = %1
  %14 = load %"class.sql::recover::DatabasePageReader"*, %"class.sql::recover::DatabasePageReader"** %2, align 8
  %15 = getelementptr inbounds %"class.sql::recover::DatabasePageReader", %"class.sql::recover::DatabasePageReader"* %14, i64 0, i32 2, i32 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %"class.sql::recover::LeafPageDecoder", %"class.sql::recover::LeafPageDecoder"* %0, i64 0, i32 3
  %18 = load i32, i32* %17, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %17, align 4
  %20 = shl i32 %18, 1
  %21 = add nsw i32 %20, 8
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i8, i8* %16, i64 %22
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = shl nuw nsw i32 %25, 8
  %27 = getelementptr inbounds i8, i8* %23, i64 1
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = or i32 %26, %29
  %31 = add nuw nsw i32 %30, 3
  %32 = getelementptr inbounds %"class.sql::recover::DatabasePageReader", %"class.sql::recover::DatabasePageReader"* %14, i64 0, i32 4
  %33 = load i32, i32* %32, align 8
  %34 = icmp sge i32 %31, %33
  %35 = icmp ult i32 %30, 8
  %36 = or i1 %35, %34
  br i1 %36, label %62, label %37

37:                                               ; preds = %13
  %38 = zext i32 %30 to i64
  %39 = getelementptr inbounds i8, i8* %16, i64 %38
  %40 = sext i32 %33 to i64
  %41 = getelementptr inbounds i8, i8* %16, i64 %40
  %42 = tail call { i64, i8* } @_ZN3sql7recover11ParseVarintEPKhS2_(i8* %39, i8* %41) #6
  %43 = extractvalue { i64, i8* } %42, 0
  %44 = extractvalue { i64, i8* } %42, 1
  %45 = getelementptr inbounds %"class.sql::recover::LeafPageDecoder", %"class.sql::recover::LeafPageDecoder"* %0, i64 0, i32 4
  store i64 %43, i64* %45, align 8
  %46 = icmp eq i8* %44, %41
  %47 = icmp slt i64 %43, 1
  %48 = or i1 %46, %47
  br i1 %48, label %62, label %49

49:                                               ; preds = %37
  %50 = tail call { i64, i8* } @_ZN3sql7recover11ParseVarintEPKhS2_(i8* %44, i8* %41) #6
  %51 = extractvalue { i64, i8* } %50, 0
  %52 = extractvalue { i64, i8* } %50, 1
  %53 = getelementptr inbounds %"class.sql::recover::LeafPageDecoder", %"class.sql::recover::LeafPageDecoder"* %0, i64 0, i32 5
  store i64 %51, i64* %53, align 8
  %54 = icmp eq i8* %52, %41
  br i1 %54, label %55, label %56

55:                                               ; preds = %49
  store i64 0, i64* %45, align 8
  br label %62

56:                                               ; preds = %49
  %57 = ptrtoint i8* %52 to i64
  %58 = ptrtoint i8* %16 to i64
  %59 = sub i64 %57, %58
  %60 = trunc i64 %59 to i32
  %61 = getelementptr inbounds %"class.sql::recover::LeafPageDecoder", %"class.sql::recover::LeafPageDecoder"* %0, i64 0, i32 6
  store i32 %60, i32* %61, align 8
  br label %62

62:                                               ; preds = %37, %56, %55, %13, %9
  %63 = phi i1 [ false, %9 ], [ false, %13 ], [ false, %37 ], [ false, %55 ], [ true, %56 ]
  ret i1 %63
}

declare { i64, i8* } @_ZN3sql7recover11ParseVarintEPKhS2_(i8*, i8*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN3sql7recover15LeafPageDecoder13IsOnValidPageEPNS0_18DatabasePageReaderE(%"class.sql::recover::DatabasePageReader"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sql::recover::DatabasePageReader", %"class.sql::recover::DatabasePageReader"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 13
  ret i1 %5
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
