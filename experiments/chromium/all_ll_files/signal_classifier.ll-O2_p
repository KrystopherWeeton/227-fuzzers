; ModuleID = '../../third_party/webrtc/modules/audio_processing/agc2/signal_classifier.cc'
source_filename = "../../third_party/webrtc/modules/audio_processing/agc2/signal_classifier.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::SignalClassifier::FrameExtender" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { float*, float*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { float* }
%"class.webrtc::SignalClassifier" = type <{ %"class.webrtc::ApmDataDumper"*, %"class.webrtc::DownSampler", %"class.std::__1::unique_ptr", %"class.webrtc::NoiseSpectrumEstimator", i32, i32, i32, i32, %"class.webrtc::OouraFft", [7 x i8] }>
%"class.webrtc::DownSampler" = type <{ %"class.webrtc::ApmDataDumper"*, i32, i32, %"class.webrtc::BiQuadFilter", [4 x i8] }>
%"class.webrtc::BiQuadFilter" = type { %"struct.webrtc::BiQuadFilter::BiQuadState", %"struct.webrtc::BiQuadFilter::BiQuadCoefficients" }
%"struct.webrtc::BiQuadFilter::BiQuadState" = type { [2 x float], [2 x float] }
%"struct.webrtc::BiQuadFilter::BiQuadCoefficients" = type { [3 x float], [2 x float] }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.webrtc::SignalClassifier::FrameExtender"* }
%"class.webrtc::NoiseSpectrumEstimator" = type <{ %"class.webrtc::ApmDataDumper"*, [65 x float], [4 x i8] }>
%"class.webrtc::OouraFft" = type { i8 }
%"class.webrtc::ApmDataDumper" = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }

@_ZN6webrtc16SignalClassifier13FrameExtenderC1Emm = hidden unnamed_addr alias void (%"class.webrtc::SignalClassifier::FrameExtender"*, i64, i64), void (%"class.webrtc::SignalClassifier::FrameExtender"*, i64, i64)* @_ZN6webrtc16SignalClassifier13FrameExtenderC2Emm
@_ZN6webrtc16SignalClassifier13FrameExtenderD1Ev = hidden unnamed_addr alias void (%"class.webrtc::SignalClassifier::FrameExtender"*), void (%"class.webrtc::SignalClassifier::FrameExtender"*)* @_ZN6webrtc16SignalClassifier13FrameExtenderD2Ev
@_ZN6webrtc16SignalClassifierC1EPNS_13ApmDataDumperE = hidden unnamed_addr alias void (%"class.webrtc::SignalClassifier"*, %"class.webrtc::ApmDataDumper"*), void (%"class.webrtc::SignalClassifier"*, %"class.webrtc::ApmDataDumper"*)* @_ZN6webrtc16SignalClassifierC2EPNS_13ApmDataDumperE
@_ZN6webrtc16SignalClassifierD1Ev = hidden unnamed_addr alias void (%"class.webrtc::SignalClassifier"*), void (%"class.webrtc::SignalClassifier"*)* @_ZN6webrtc16SignalClassifierD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16SignalClassifier13FrameExtenderC2Emm(%"class.webrtc::SignalClassifier::FrameExtender"*, i64, i64) unnamed_addr #0 align 2 {
  %4 = sub i64 %2, %1
  %5 = bitcast %"class.webrtc::SignalClassifier::FrameExtender"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false) #7
  %6 = icmp eq i64 %4, 0
  br i1 %6, label %26, label %7

7:                                                ; preds = %3
  %8 = icmp ugt i64 %4, 4611686018427387903
  br i1 %8, label %9, label %11

9:                                                ; preds = %7
  %10 = bitcast %"class.webrtc::SignalClassifier::FrameExtender"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %10) #8
  unreachable

11:                                               ; preds = %7
  %12 = shl i64 %4, 2
  %13 = tail call i8* @_Znwm(i64 %12) #9
  %14 = bitcast i8* %13 to float*
  %15 = getelementptr inbounds %"class.webrtc::SignalClassifier::FrameExtender", %"class.webrtc::SignalClassifier::FrameExtender"* %0, i64 0, i32 0, i32 0, i32 1
  %16 = bitcast %"class.webrtc::SignalClassifier::FrameExtender"* %0 to i8**
  store i8* %13, i8** %16, align 8
  %17 = getelementptr inbounds float, float* %14, i64 %4
  %18 = getelementptr inbounds %"class.webrtc::SignalClassifier::FrameExtender", %"class.webrtc::SignalClassifier::FrameExtender"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store float* %17, float** %18, align 8
  %19 = shl i64 %2, 2
  %20 = add i64 %19, -4
  %21 = shl i64 %1, 2
  %22 = sub i64 %20, %21
  %23 = add i64 %22, 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %13, i8 0, i64 %23, i1 false)
  %24 = bitcast float** %15 to i64*
  %25 = ptrtoint float* %17 to i64
  store i64 %25, i64* %24, align 8
  br label %26

26:                                               ; preds = %3, %11
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16SignalClassifier13FrameExtenderD2Ev(%"class.webrtc::SignalClassifier::FrameExtender"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::SignalClassifier::FrameExtender", %"class.webrtc::SignalClassifier::FrameExtender"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load float*, float** %2, align 8
  %4 = icmp eq float* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint float* %3 to i64
  %7 = getelementptr inbounds %"class.webrtc::SignalClassifier::FrameExtender", %"class.webrtc::SignalClassifier::FrameExtender"* %0, i64 0, i32 0, i32 0, i32 1
  %8 = bitcast float** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast float* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #9
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16SignalClassifier13FrameExtender11ExtendFrameEN3rtc9ArrayViewIKfLln4711EEENS3_IfLln4711EEE(%"class.webrtc::SignalClassifier::FrameExtender"* nocapture readonly, float*, i64, float*, i64) local_unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.webrtc::SignalClassifier::FrameExtender", %"class.webrtc::SignalClassifier::FrameExtender"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %"class.webrtc::SignalClassifier::FrameExtender", %"class.webrtc::SignalClassifier::FrameExtender"* %0, i64 0, i32 0, i32 0, i32 1
  %9 = bitcast float** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.webrtc::SignalClassifier::FrameExtender"* %0 to i64*
  %12 = ptrtoint float* %7 to i64
  %13 = sub i64 %10, %12
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %18, label %15

15:                                               ; preds = %5
  %16 = bitcast float* %3 to i8*
  %17 = bitcast float* %7 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %16, i8* align 4 %17, i64 %13, i1 false) #7
  br label %18

18:                                               ; preds = %5, %15
  %19 = icmp eq i64 %2, 0
  br i1 %19, label %29, label %20

20:                                               ; preds = %18
  %21 = shl nuw i64 %2, 2
  %22 = load i64, i64* %9, align 8
  %23 = load i64, i64* %11, align 8
  %24 = sub i64 %22, %23
  %25 = ashr exact i64 %24, 2
  %26 = getelementptr inbounds float, float* %3, i64 %25
  %27 = bitcast float* %26 to i8*
  %28 = bitcast float* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %27, i8* align 4 %28, i64 %21, i1 false) #7
  br label %29

29:                                               ; preds = %18, %20
  %30 = load i64, i64* %9, align 8
  %31 = load i64, i64* %11, align 8
  %32 = sub i64 %30, %31
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %41, label %34

34:                                               ; preds = %29
  %35 = inttoptr i64 %31 to i8*
  %36 = ashr exact i64 %32, 2
  %37 = sub nsw i64 0, %36
  %38 = getelementptr inbounds float, float* %3, i64 %4
  %39 = getelementptr inbounds float, float* %38, i64 %37
  %40 = bitcast float* %39 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %35, i8* align 4 %40, i64 %32, i1 false) #7
  br label %41

41:                                               ; preds = %29, %34
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16SignalClassifierC2EPNS_13ApmDataDumperE(%"class.webrtc::SignalClassifier"*, %"class.webrtc::ApmDataDumper"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 0
  store %"class.webrtc::ApmDataDumper"* %1, %"class.webrtc::ApmDataDumper"** %3, align 8
  %4 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 1
  tail call void @_ZN6webrtc11DownSamplerC1EPNS_13ApmDataDumperE(%"class.webrtc::DownSampler"* %4, %"class.webrtc::ApmDataDumper"* %1) #7
  %5 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 2
  %6 = bitcast %"class.std::__1::unique_ptr"* %5 to i64*
  store i64 0, i64* %6, align 8
  %7 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 3
  %8 = load %"class.webrtc::ApmDataDumper"*, %"class.webrtc::ApmDataDumper"** %3, align 8
  tail call void @_ZN6webrtc22NoiseSpectrumEstimatorC1EPNS_13ApmDataDumperE(%"class.webrtc::NoiseSpectrumEstimator"* %7, %"class.webrtc::ApmDataDumper"* %8) #7
  %9 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 8
  %10 = tail call i32 @_ZN6webrtc10GetCPUInfoENS_10CPUFeatureE(i32 0) #7
  %11 = icmp ne i32 %10, 0
  tail call void @_ZN6webrtc8OouraFftC1Eb(%"class.webrtc::OouraFft"* %9, i1 zeroext %11) #7
  tail call void @_ZN6webrtc16SignalClassifier10InitializeEi(%"class.webrtc::SignalClassifier"* %0, i32 48000)
  ret void
}

declare void @_ZN6webrtc11DownSamplerC1EPNS_13ApmDataDumperE(%"class.webrtc::DownSampler"*, %"class.webrtc::ApmDataDumper"*) unnamed_addr #2

declare void @_ZN6webrtc22NoiseSpectrumEstimatorC1EPNS_13ApmDataDumperE(%"class.webrtc::NoiseSpectrumEstimator"*, %"class.webrtc::ApmDataDumper"*) unnamed_addr #2

declare void @_ZN6webrtc8OouraFftC1Eb(%"class.webrtc::OouraFft"*, i1 zeroext) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16SignalClassifier10InitializeEi(%"class.webrtc::SignalClassifier"*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 1
  tail call void @_ZN6webrtc11DownSampler10InitializeEi(%"class.webrtc::DownSampler"* %3, i32 %1) #7
  %4 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 3
  tail call void @_ZN6webrtc22NoiseSpectrumEstimator10InitializeEv(%"class.webrtc::NoiseSpectrumEstimator"* %4) #7
  %5 = tail call i8* @_Znwm(i64 24) #9
  %6 = tail call i8* @_Znwm(i64 192) #9
  %7 = getelementptr inbounds i8, i8* %5, i64 8
  %8 = bitcast i8* %5 to i8**
  store i8* %6, i8** %8, align 8
  %9 = getelementptr inbounds i8, i8* %6, i64 192
  %10 = getelementptr inbounds i8, i8* %5, i64 16
  %11 = bitcast i8* %10 to i8**
  store i8* %9, i8** %11, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %6, i8 0, i64 192, i1 false) #7
  %12 = bitcast i8* %7 to i64*
  %13 = ptrtoint i8* %9 to i64
  store i64 %13, i64* %12, align 8
  %14 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %15 = load %"class.webrtc::SignalClassifier::FrameExtender"*, %"class.webrtc::SignalClassifier::FrameExtender"** %14, align 8
  %16 = bitcast %"class.webrtc::SignalClassifier::FrameExtender"** %14 to i8**
  store i8* %5, i8** %16, align 8
  %17 = icmp eq %"class.webrtc::SignalClassifier::FrameExtender"* %15, null
  br i1 %17, label %29, label %18

18:                                               ; preds = %2
  %19 = getelementptr inbounds %"class.webrtc::SignalClassifier::FrameExtender", %"class.webrtc::SignalClassifier::FrameExtender"* %15, i64 0, i32 0, i32 0, i32 0
  %20 = load float*, float** %19, align 8
  %21 = icmp eq float* %20, null
  br i1 %21, label %27, label %22

22:                                               ; preds = %18
  %23 = ptrtoint float* %20 to i64
  %24 = getelementptr inbounds %"class.webrtc::SignalClassifier::FrameExtender", %"class.webrtc::SignalClassifier::FrameExtender"* %15, i64 0, i32 0, i32 0, i32 1
  %25 = bitcast float** %24 to i64*
  store i64 %23, i64* %25, align 8
  %26 = bitcast float* %20 to i8*
  tail call void @_ZdlPv(i8* %26) #9
  br label %27

27:                                               ; preds = %22, %18
  %28 = bitcast %"class.webrtc::SignalClassifier::FrameExtender"* %15 to i8*
  tail call void @_ZdlPv(i8* %28) #9
  br label %29

29:                                               ; preds = %2, %27
  %30 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 4
  store i32 %1, i32* %30, align 8
  %31 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 5
  store i32 2, i32* %31, align 4
  %32 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 6
  store i32 3, i32* %32, align 8
  %33 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 7
  store i32 0, i32* %33, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16SignalClassifierD2Ev(%"class.webrtc::SignalClassifier"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 8
  tail call void @_ZN6webrtc8OouraFftD1Ev(%"class.webrtc::OouraFft"* %2) #7
  %3 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load %"class.webrtc::SignalClassifier::FrameExtender"*, %"class.webrtc::SignalClassifier::FrameExtender"** %3, align 8
  store %"class.webrtc::SignalClassifier::FrameExtender"* null, %"class.webrtc::SignalClassifier::FrameExtender"** %3, align 8
  %5 = icmp eq %"class.webrtc::SignalClassifier::FrameExtender"* %4, null
  br i1 %5, label %17, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.webrtc::SignalClassifier::FrameExtender", %"class.webrtc::SignalClassifier::FrameExtender"* %4, i64 0, i32 0, i32 0, i32 0
  %8 = load float*, float** %7, align 8
  %9 = icmp eq float* %8, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %6
  %11 = ptrtoint float* %8 to i64
  %12 = getelementptr inbounds %"class.webrtc::SignalClassifier::FrameExtender", %"class.webrtc::SignalClassifier::FrameExtender"* %4, i64 0, i32 0, i32 0, i32 1
  %13 = bitcast float** %12 to i64*
  store i64 %11, i64* %13, align 8
  %14 = bitcast float* %8 to i8*
  tail call void @_ZdlPv(i8* %14) #9
  br label %15

15:                                               ; preds = %10, %6
  %16 = bitcast %"class.webrtc::SignalClassifier::FrameExtender"* %4 to i8*
  tail call void @_ZdlPv(i8* %16) #9
  br label %17

17:                                               ; preds = %1, %15
  ret void
}

; Function Attrs: nounwind
declare void @_ZN6webrtc8OouraFftD1Ev(%"class.webrtc::OouraFft"*) unnamed_addr #3

declare void @_ZN6webrtc11DownSampler10InitializeEi(%"class.webrtc::DownSampler"*, i32) local_unnamed_addr #2

declare void @_ZN6webrtc22NoiseSpectrumEstimator10InitializeEv(%"class.webrtc::NoiseSpectrumEstimator"*) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6webrtc16SignalClassifier7AnalyzeEN3rtc9ArrayViewIKfLln4711EEE(%"class.webrtc::SignalClassifier"*, float*, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca [128 x float], align 16
  %5 = alloca [80 x float], align 16
  %6 = alloca [128 x float], align 16
  %7 = alloca [65 x float], align 16
  %8 = bitcast [80 x float]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 320, i8* nonnull %8) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -1, i64 320, i1 false)
  %9 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 1
  %10 = icmp eq i64 %2, 0
  %11 = select i1 %10, float* null, float* %1
  %12 = getelementptr inbounds [80 x float], [80 x float]* %5, i64 0, i64 0
  call void @_ZN6webrtc11DownSampler10DownSampleEN3rtc9ArrayViewIKfLln4711EEENS2_IfLln4711EEE(%"class.webrtc::DownSampler"* %9, float* %11, i64 %2, float* nonnull %12, i64 80) #7
  %13 = bitcast [128 x float]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %13) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -1, i64 512, i1 false)
  %14 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %15 = load %"class.webrtc::SignalClassifier::FrameExtender"*, %"class.webrtc::SignalClassifier::FrameExtender"** %14, align 8
  %16 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 0
  %17 = getelementptr inbounds %"class.webrtc::SignalClassifier::FrameExtender", %"class.webrtc::SignalClassifier::FrameExtender"* %15, i64 0, i32 0, i32 0, i32 0
  %18 = load float*, float** %17, align 8
  %19 = getelementptr inbounds %"class.webrtc::SignalClassifier::FrameExtender", %"class.webrtc::SignalClassifier::FrameExtender"* %15, i64 0, i32 0, i32 0, i32 1
  %20 = bitcast float** %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.webrtc::SignalClassifier::FrameExtender"* %15 to i64*
  %23 = ptrtoint float* %18 to i64
  %24 = sub i64 %21, %23
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %3
  %27 = bitcast float* %18 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 16 %13, i8* align 4 %27, i64 %24, i1 false) #7
  %28 = load i64, i64* %20, align 8
  %29 = load i64, i64* %22, align 8
  %30 = sub i64 %28, %29
  %31 = ashr i64 %30, 2
  br label %32

32:                                               ; preds = %26, %3
  %33 = phi i64 [ %31, %26 ], [ 0, %3 ]
  %34 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 %33
  %35 = bitcast float* %34 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %35, i8* nonnull align 16 %8, i64 320, i1 false) #7
  %36 = load i64, i64* %20, align 8
  %37 = load i64, i64* %22, align 8
  %38 = sub i64 %36, %37
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %47, label %40

40:                                               ; preds = %32
  %41 = inttoptr i64 %37 to i8*
  %42 = ashr exact i64 %38, 2
  %43 = sub nsw i64 0, %42
  %44 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 128
  %45 = getelementptr inbounds float, float* %44, i64 %43
  %46 = bitcast float* %45 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %41, i8* align 4 %46, i64 %38, i1 false) #7
  br label %47

47:                                               ; preds = %32, %40
  %48 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 128
  br label %49

49:                                               ; preds = %49, %47
  %50 = phi float [ 0.000000e+00, %47 ], [ %74, %49 ]
  %51 = phi float* [ %16, %47 ], [ %75, %49 ]
  %52 = load float, float* %51, align 4
  %53 = fadd float %50, %52
  %54 = getelementptr inbounds float, float* %51, i64 1
  %55 = load float, float* %54, align 4
  %56 = fadd float %53, %55
  %57 = getelementptr inbounds float, float* %51, i64 2
  %58 = load float, float* %57, align 4
  %59 = fadd float %56, %58
  %60 = getelementptr inbounds float, float* %51, i64 3
  %61 = load float, float* %60, align 4
  %62 = fadd float %59, %61
  %63 = getelementptr inbounds float, float* %51, i64 4
  %64 = load float, float* %63, align 4
  %65 = fadd float %62, %64
  %66 = getelementptr inbounds float, float* %51, i64 5
  %67 = load float, float* %66, align 4
  %68 = fadd float %65, %67
  %69 = getelementptr inbounds float, float* %51, i64 6
  %70 = load float, float* %69, align 4
  %71 = fadd float %68, %70
  %72 = getelementptr inbounds float, float* %51, i64 7
  %73 = load float, float* %72, align 4
  %74 = fadd float %71, %73
  %75 = getelementptr inbounds float, float* %51, i64 8
  %76 = icmp eq float* %75, %48
  br i1 %76, label %77, label %49

77:                                               ; preds = %49
  %78 = fmul float %74, 7.812500e-03
  %79 = insertelement <4 x float> undef, float %78, i32 0
  %80 = shufflevector <4 x float> %79, <4 x float> undef, <4 x i32> zeroinitializer
  %81 = insertelement <4 x float> undef, float %78, i32 0
  %82 = shufflevector <4 x float> %81, <4 x float> undef, <4 x i32> zeroinitializer
  %83 = bitcast [128 x float]* %6 to <4 x float>*
  %84 = load <4 x float>, <4 x float>* %83, align 16
  %85 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 4
  %86 = bitcast float* %85 to <4 x float>*
  %87 = load <4 x float>, <4 x float>* %86, align 16
  %88 = fsub <4 x float> %84, %80
  %89 = fsub <4 x float> %87, %82
  %90 = bitcast [128 x float]* %6 to <4 x float>*
  store <4 x float> %88, <4 x float>* %90, align 16
  %91 = bitcast float* %85 to <4 x float>*
  store <4 x float> %89, <4 x float>* %91, align 16
  %92 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 8
  %93 = bitcast float* %92 to <4 x float>*
  %94 = load <4 x float>, <4 x float>* %93, align 16
  %95 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 12
  %96 = bitcast float* %95 to <4 x float>*
  %97 = load <4 x float>, <4 x float>* %96, align 16
  %98 = fsub <4 x float> %94, %80
  %99 = fsub <4 x float> %97, %82
  %100 = bitcast float* %92 to <4 x float>*
  store <4 x float> %98, <4 x float>* %100, align 16
  %101 = bitcast float* %95 to <4 x float>*
  store <4 x float> %99, <4 x float>* %101, align 16
  %102 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 16
  %103 = bitcast float* %102 to <4 x float>*
  %104 = load <4 x float>, <4 x float>* %103, align 16
  %105 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 20
  %106 = bitcast float* %105 to <4 x float>*
  %107 = load <4 x float>, <4 x float>* %106, align 16
  %108 = fsub <4 x float> %104, %80
  %109 = fsub <4 x float> %107, %82
  %110 = bitcast float* %102 to <4 x float>*
  store <4 x float> %108, <4 x float>* %110, align 16
  %111 = bitcast float* %105 to <4 x float>*
  store <4 x float> %109, <4 x float>* %111, align 16
  %112 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 24
  %113 = bitcast float* %112 to <4 x float>*
  %114 = load <4 x float>, <4 x float>* %113, align 16
  %115 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 28
  %116 = bitcast float* %115 to <4 x float>*
  %117 = load <4 x float>, <4 x float>* %116, align 16
  %118 = fsub <4 x float> %114, %80
  %119 = fsub <4 x float> %117, %82
  %120 = bitcast float* %112 to <4 x float>*
  store <4 x float> %118, <4 x float>* %120, align 16
  %121 = bitcast float* %115 to <4 x float>*
  store <4 x float> %119, <4 x float>* %121, align 16
  %122 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 32
  %123 = bitcast float* %122 to <4 x float>*
  %124 = load <4 x float>, <4 x float>* %123, align 16
  %125 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 36
  %126 = bitcast float* %125 to <4 x float>*
  %127 = load <4 x float>, <4 x float>* %126, align 16
  %128 = fsub <4 x float> %124, %80
  %129 = fsub <4 x float> %127, %82
  %130 = bitcast float* %122 to <4 x float>*
  store <4 x float> %128, <4 x float>* %130, align 16
  %131 = bitcast float* %125 to <4 x float>*
  store <4 x float> %129, <4 x float>* %131, align 16
  %132 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 40
  %133 = bitcast float* %132 to <4 x float>*
  %134 = load <4 x float>, <4 x float>* %133, align 16
  %135 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 44
  %136 = bitcast float* %135 to <4 x float>*
  %137 = load <4 x float>, <4 x float>* %136, align 16
  %138 = fsub <4 x float> %134, %80
  %139 = fsub <4 x float> %137, %82
  %140 = bitcast float* %132 to <4 x float>*
  store <4 x float> %138, <4 x float>* %140, align 16
  %141 = bitcast float* %135 to <4 x float>*
  store <4 x float> %139, <4 x float>* %141, align 16
  %142 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 48
  %143 = bitcast float* %142 to <4 x float>*
  %144 = load <4 x float>, <4 x float>* %143, align 16
  %145 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 52
  %146 = bitcast float* %145 to <4 x float>*
  %147 = load <4 x float>, <4 x float>* %146, align 16
  %148 = fsub <4 x float> %144, %80
  %149 = fsub <4 x float> %147, %82
  %150 = bitcast float* %142 to <4 x float>*
  store <4 x float> %148, <4 x float>* %150, align 16
  %151 = bitcast float* %145 to <4 x float>*
  store <4 x float> %149, <4 x float>* %151, align 16
  %152 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 56
  %153 = bitcast float* %152 to <4 x float>*
  %154 = load <4 x float>, <4 x float>* %153, align 16
  %155 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 60
  %156 = bitcast float* %155 to <4 x float>*
  %157 = load <4 x float>, <4 x float>* %156, align 16
  %158 = fsub <4 x float> %154, %80
  %159 = fsub <4 x float> %157, %82
  %160 = bitcast float* %152 to <4 x float>*
  store <4 x float> %158, <4 x float>* %160, align 16
  %161 = bitcast float* %155 to <4 x float>*
  store <4 x float> %159, <4 x float>* %161, align 16
  %162 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 64
  %163 = bitcast float* %162 to <4 x float>*
  %164 = load <4 x float>, <4 x float>* %163, align 16
  %165 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 68
  %166 = bitcast float* %165 to <4 x float>*
  %167 = load <4 x float>, <4 x float>* %166, align 16
  %168 = fsub <4 x float> %164, %80
  %169 = fsub <4 x float> %167, %82
  %170 = bitcast float* %162 to <4 x float>*
  store <4 x float> %168, <4 x float>* %170, align 16
  %171 = bitcast float* %165 to <4 x float>*
  store <4 x float> %169, <4 x float>* %171, align 16
  %172 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 72
  %173 = bitcast float* %172 to <4 x float>*
  %174 = load <4 x float>, <4 x float>* %173, align 16
  %175 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 76
  %176 = bitcast float* %175 to <4 x float>*
  %177 = load <4 x float>, <4 x float>* %176, align 16
  %178 = fsub <4 x float> %174, %80
  %179 = fsub <4 x float> %177, %82
  %180 = bitcast float* %172 to <4 x float>*
  store <4 x float> %178, <4 x float>* %180, align 16
  %181 = bitcast float* %175 to <4 x float>*
  store <4 x float> %179, <4 x float>* %181, align 16
  %182 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 80
  %183 = bitcast float* %182 to <4 x float>*
  %184 = load <4 x float>, <4 x float>* %183, align 16
  %185 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 84
  %186 = bitcast float* %185 to <4 x float>*
  %187 = load <4 x float>, <4 x float>* %186, align 16
  %188 = fsub <4 x float> %184, %80
  %189 = fsub <4 x float> %187, %82
  %190 = bitcast float* %182 to <4 x float>*
  store <4 x float> %188, <4 x float>* %190, align 16
  %191 = bitcast float* %185 to <4 x float>*
  store <4 x float> %189, <4 x float>* %191, align 16
  %192 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 88
  %193 = bitcast float* %192 to <4 x float>*
  %194 = load <4 x float>, <4 x float>* %193, align 16
  %195 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 92
  %196 = bitcast float* %195 to <4 x float>*
  %197 = load <4 x float>, <4 x float>* %196, align 16
  %198 = fsub <4 x float> %194, %80
  %199 = fsub <4 x float> %197, %82
  %200 = bitcast float* %192 to <4 x float>*
  store <4 x float> %198, <4 x float>* %200, align 16
  %201 = bitcast float* %195 to <4 x float>*
  store <4 x float> %199, <4 x float>* %201, align 16
  %202 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 96
  %203 = bitcast float* %202 to <4 x float>*
  %204 = load <4 x float>, <4 x float>* %203, align 16
  %205 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 100
  %206 = bitcast float* %205 to <4 x float>*
  %207 = load <4 x float>, <4 x float>* %206, align 16
  %208 = fsub <4 x float> %204, %80
  %209 = fsub <4 x float> %207, %82
  %210 = bitcast float* %202 to <4 x float>*
  store <4 x float> %208, <4 x float>* %210, align 16
  %211 = bitcast float* %205 to <4 x float>*
  store <4 x float> %209, <4 x float>* %211, align 16
  %212 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 104
  %213 = bitcast float* %212 to <4 x float>*
  %214 = load <4 x float>, <4 x float>* %213, align 16
  %215 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 108
  %216 = bitcast float* %215 to <4 x float>*
  %217 = load <4 x float>, <4 x float>* %216, align 16
  %218 = fsub <4 x float> %214, %80
  %219 = fsub <4 x float> %217, %82
  %220 = bitcast float* %212 to <4 x float>*
  store <4 x float> %218, <4 x float>* %220, align 16
  %221 = bitcast float* %215 to <4 x float>*
  store <4 x float> %219, <4 x float>* %221, align 16
  %222 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 112
  %223 = bitcast float* %222 to <4 x float>*
  %224 = load <4 x float>, <4 x float>* %223, align 16
  %225 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 116
  %226 = bitcast float* %225 to <4 x float>*
  %227 = load <4 x float>, <4 x float>* %226, align 16
  %228 = fsub <4 x float> %224, %80
  %229 = fsub <4 x float> %227, %82
  %230 = bitcast float* %222 to <4 x float>*
  store <4 x float> %228, <4 x float>* %230, align 16
  %231 = bitcast float* %225 to <4 x float>*
  store <4 x float> %229, <4 x float>* %231, align 16
  %232 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 120
  %233 = bitcast float* %232 to <4 x float>*
  %234 = load <4 x float>, <4 x float>* %233, align 16
  %235 = getelementptr inbounds [128 x float], [128 x float]* %6, i64 0, i64 124
  %236 = bitcast float* %235 to <4 x float>*
  %237 = load <4 x float>, <4 x float>* %236, align 16
  %238 = fsub <4 x float> %234, %80
  %239 = fsub <4 x float> %237, %82
  %240 = bitcast float* %232 to <4 x float>*
  store <4 x float> %238, <4 x float>* %240, align 16
  %241 = bitcast float* %235 to <4 x float>*
  store <4 x float> %239, <4 x float>* %241, align 16
  %242 = bitcast [65 x float]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 260, i8* nonnull %242) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %242, i8 -1, i64 256, i1 false)
  %243 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 8
  %244 = getelementptr inbounds [65 x float], [65 x float]* %7, i64 0, i64 0
  %245 = bitcast [128 x float]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %245) #7
  %246 = getelementptr inbounds [128 x float], [128 x float]* %4, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %245, i8* nonnull align 16 %13, i64 512, i1 false) #7
  call void @_ZNK6webrtc8OouraFft3FftEPf(%"class.webrtc::OouraFft"* %243, float* nonnull %246) #7
  %247 = load float, float* %246, align 16
  %248 = fmul float %247, %247
  store float %248, float* %244, align 16
  %249 = getelementptr inbounds [128 x float], [128 x float]* %4, i64 0, i64 1
  %250 = load float, float* %249, align 4
  %251 = fmul float %250, %250
  %252 = getelementptr inbounds [65 x float], [65 x float]* %7, i64 0, i64 64
  store float %251, float* %252, align 16
  %253 = getelementptr inbounds [65 x float], [65 x float]* %7, i64 0, i64 1
  %254 = getelementptr inbounds [65 x float], [65 x float]* %7, i64 0, i64 64
  %255 = getelementptr inbounds [128 x float], [128 x float]* %4, i64 0, i64 2
  %256 = getelementptr inbounds [128 x float], [128 x float]* %4, i64 1, i64 0
  %257 = icmp ult float* %253, %256
  %258 = icmp ult float* %255, %254
  %259 = and i1 %257, %258
  br i1 %259, label %280, label %260

260:                                              ; preds = %77
  %261 = getelementptr inbounds [128 x float], [128 x float]* %4, i64 0, i64 121
  %262 = getelementptr inbounds [128 x float], [128 x float]* %4, i64 0, i64 2
  %263 = getelementptr inbounds [128 x float], [128 x float]* %4, i64 0, i64 2
  br label %264

264:                                              ; preds = %495, %260
  %265 = phi i64 [ 0, %260 ], [ %508, %495 ]
  %266 = or i64 %265, 1
  %267 = shl nuw i64 %265, 1
  %268 = getelementptr inbounds float, float* %262, i64 %267
  %269 = bitcast float* %268 to <8 x float>*
  %270 = load <8 x float>, <8 x float>* %269, align 8
  %271 = fmul <8 x float> %270, %270
  %272 = shufflevector <8 x float> %271, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %273 = getelementptr inbounds [65 x float], [65 x float]* %7, i64 0, i64 %266
  %274 = fmul <8 x float> %270, %270
  %275 = shufflevector <8 x float> %274, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %276 = fadd <4 x float> %272, %275
  %277 = bitcast float* %273 to <4 x float>*
  store <4 x float> %276, <4 x float>* %277, align 4, !alias.scope !2, !noalias !5
  %278 = or i64 %265, 4
  %279 = icmp eq i64 %278, 60
  br i1 %279, label %280, label %495, !llvm.loop !7

280:                                              ; preds = %264, %77
  %281 = phi i64 [ 1, %77 ], [ 61, %264 ]
  %282 = phi float* [ %249, %77 ], [ %261, %264 ]
  %283 = getelementptr inbounds float, float* %282, i64 1
  %284 = load float, float* %283, align 4
  %285 = fmul float %284, %284
  %286 = getelementptr inbounds [65 x float], [65 x float]* %7, i64 0, i64 %281
  store float %285, float* %286, align 4
  %287 = getelementptr inbounds float, float* %282, i64 2
  %288 = load float, float* %287, align 4
  %289 = fmul float %288, %288
  %290 = fadd float %285, %289
  store float %290, float* %286, align 4
  %291 = add nuw nsw i64 %281, 1
  br label %292

292:                                              ; preds = %292, %280
  %293 = phi i64 [ %291, %280 ], [ %312, %292 ]
  %294 = phi float* [ %287, %280 ], [ %308, %292 ]
  %295 = getelementptr inbounds float, float* %294, i64 1
  %296 = load float, float* %295, align 4
  %297 = fmul float %296, %296
  %298 = getelementptr inbounds [65 x float], [65 x float]* %7, i64 0, i64 %293
  store float %297, float* %298, align 4
  %299 = getelementptr inbounds float, float* %294, i64 2
  %300 = load float, float* %299, align 4
  %301 = fmul float %300, %300
  %302 = fadd float %297, %301
  store float %302, float* %298, align 4
  %303 = add nuw nsw i64 %293, 1
  %304 = getelementptr inbounds float, float* %294, i64 3
  %305 = load float, float* %304, align 4
  %306 = fmul float %305, %305
  %307 = getelementptr inbounds [65 x float], [65 x float]* %7, i64 0, i64 %303
  store float %306, float* %307, align 4
  %308 = getelementptr inbounds float, float* %294, i64 4
  %309 = load float, float* %308, align 4
  %310 = fmul float %309, %309
  %311 = fadd float %306, %310
  store float %311, float* %307, align 4
  %312 = add nuw nsw i64 %293, 2
  %313 = icmp eq i64 %312, 64
  br i1 %313, label %314, label %292, !llvm.loop !9

314:                                              ; preds = %292
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %245) #7
  %315 = getelementptr inbounds [65 x float], [65 x float]* %7, i64 0, i64 1
  %316 = bitcast float* %315 to <4 x float>*
  %317 = load <4 x float>, <4 x float>* %316, align 4
  %318 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 3, i32 1, i64 1
  %319 = bitcast float* %318 to <4 x float>*
  %320 = load <4 x float>, <4 x float>* %319, align 4
  %321 = fmul <4 x float> %320, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %322 = fcmp olt <4 x float> %317, %321
  %323 = fmul <4 x float> %317, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %324 = fcmp ogt <4 x float> %323, %320
  %325 = and <4 x i1> %324, %322
  %326 = zext <4 x i1> %325 to <4 x i32>
  %327 = getelementptr inbounds [65 x float], [65 x float]* %7, i64 0, i64 5
  %328 = bitcast float* %327 to <4 x float>*
  %329 = load <4 x float>, <4 x float>* %328, align 4
  %330 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 3, i32 1, i64 5
  %331 = bitcast float* %330 to <4 x float>*
  %332 = load <4 x float>, <4 x float>* %331, align 4
  %333 = fmul <4 x float> %332, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %334 = fcmp olt <4 x float> %329, %333
  %335 = fmul <4 x float> %329, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %336 = fcmp ogt <4 x float> %335, %332
  %337 = and <4 x i1> %336, %334
  %338 = zext <4 x i1> %337 to <4 x i32>
  %339 = add nuw nsw <4 x i32> %326, %338
  %340 = getelementptr inbounds [65 x float], [65 x float]* %7, i64 0, i64 9
  %341 = bitcast float* %340 to <4 x float>*
  %342 = load <4 x float>, <4 x float>* %341, align 4
  %343 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 3, i32 1, i64 9
  %344 = bitcast float* %343 to <4 x float>*
  %345 = load <4 x float>, <4 x float>* %344, align 4
  %346 = fmul <4 x float> %345, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %347 = fcmp olt <4 x float> %342, %346
  %348 = fmul <4 x float> %342, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %349 = fcmp ogt <4 x float> %348, %345
  %350 = and <4 x i1> %349, %347
  %351 = zext <4 x i1> %350 to <4 x i32>
  %352 = add nuw nsw <4 x i32> %339, %351
  %353 = getelementptr inbounds [65 x float], [65 x float]* %7, i64 0, i64 13
  %354 = bitcast float* %353 to <4 x float>*
  %355 = load <4 x float>, <4 x float>* %354, align 4
  %356 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 3, i32 1, i64 13
  %357 = bitcast float* %356 to <4 x float>*
  %358 = load <4 x float>, <4 x float>* %357, align 4
  %359 = fmul <4 x float> %358, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %360 = fcmp olt <4 x float> %355, %359
  %361 = fmul <4 x float> %355, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %362 = fcmp ogt <4 x float> %361, %358
  %363 = and <4 x i1> %362, %360
  %364 = zext <4 x i1> %363 to <4 x i32>
  %365 = add nuw nsw <4 x i32> %352, %364
  %366 = getelementptr inbounds [65 x float], [65 x float]* %7, i64 0, i64 17
  %367 = bitcast float* %366 to <4 x float>*
  %368 = load <4 x float>, <4 x float>* %367, align 4
  %369 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 3, i32 1, i64 17
  %370 = bitcast float* %369 to <4 x float>*
  %371 = load <4 x float>, <4 x float>* %370, align 4
  %372 = fmul <4 x float> %371, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %373 = fcmp olt <4 x float> %368, %372
  %374 = fmul <4 x float> %368, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %375 = fcmp ogt <4 x float> %374, %371
  %376 = and <4 x i1> %375, %373
  %377 = zext <4 x i1> %376 to <4 x i32>
  %378 = add nuw nsw <4 x i32> %365, %377
  %379 = getelementptr inbounds [65 x float], [65 x float]* %7, i64 0, i64 21
  %380 = bitcast float* %379 to <4 x float>*
  %381 = load <4 x float>, <4 x float>* %380, align 4
  %382 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 3, i32 1, i64 21
  %383 = bitcast float* %382 to <4 x float>*
  %384 = load <4 x float>, <4 x float>* %383, align 4
  %385 = fmul <4 x float> %384, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %386 = fcmp olt <4 x float> %381, %385
  %387 = fmul <4 x float> %381, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %388 = fcmp ogt <4 x float> %387, %384
  %389 = and <4 x i1> %388, %386
  %390 = zext <4 x i1> %389 to <4 x i32>
  %391 = add nuw nsw <4 x i32> %378, %390
  %392 = getelementptr inbounds [65 x float], [65 x float]* %7, i64 0, i64 25
  %393 = bitcast float* %392 to <4 x float>*
  %394 = load <4 x float>, <4 x float>* %393, align 4
  %395 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 3, i32 1, i64 25
  %396 = bitcast float* %395 to <4 x float>*
  %397 = load <4 x float>, <4 x float>* %396, align 4
  %398 = fmul <4 x float> %397, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %399 = fcmp olt <4 x float> %394, %398
  %400 = fmul <4 x float> %394, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %401 = fcmp ogt <4 x float> %400, %397
  %402 = and <4 x i1> %401, %399
  %403 = zext <4 x i1> %402 to <4 x i32>
  %404 = add nuw nsw <4 x i32> %391, %403
  %405 = getelementptr inbounds [65 x float], [65 x float]* %7, i64 0, i64 29
  %406 = bitcast float* %405 to <4 x float>*
  %407 = load <4 x float>, <4 x float>* %406, align 4
  %408 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 3, i32 1, i64 29
  %409 = bitcast float* %408 to <4 x float>*
  %410 = load <4 x float>, <4 x float>* %409, align 4
  %411 = fmul <4 x float> %410, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %412 = fcmp olt <4 x float> %407, %411
  %413 = fmul <4 x float> %407, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %414 = fcmp ogt <4 x float> %413, %410
  %415 = and <4 x i1> %414, %412
  %416 = zext <4 x i1> %415 to <4 x i32>
  %417 = add nuw nsw <4 x i32> %404, %416
  %418 = getelementptr inbounds [65 x float], [65 x float]* %7, i64 0, i64 33
  %419 = bitcast float* %418 to <4 x float>*
  %420 = load <4 x float>, <4 x float>* %419, align 4
  %421 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 3, i32 1, i64 33
  %422 = bitcast float* %421 to <4 x float>*
  %423 = load <4 x float>, <4 x float>* %422, align 4
  %424 = fmul <4 x float> %423, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %425 = fcmp olt <4 x float> %420, %424
  %426 = fmul <4 x float> %420, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %427 = fcmp ogt <4 x float> %426, %423
  %428 = and <4 x i1> %427, %425
  %429 = zext <4 x i1> %428 to <4 x i32>
  %430 = add nuw nsw <4 x i32> %417, %429
  %431 = shufflevector <4 x i32> %430, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %432 = add <4 x i32> %430, %431
  %433 = shufflevector <4 x i32> %432, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %434 = add <4 x i32> %432, %433
  %435 = extractelement <4 x i32> %434, i32 0
  %436 = getelementptr inbounds [65 x float], [65 x float]* %7, i64 0, i64 37
  %437 = load float, float* %436, align 4
  %438 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 3, i32 1, i64 37
  %439 = load float, float* %438, align 4
  %440 = fmul float %439, 3.000000e+00
  %441 = fcmp olt float %437, %440
  %442 = fmul float %437, 3.000000e+00
  %443 = fcmp ogt float %442, %439
  %444 = and i1 %443, %441
  %445 = zext i1 %444 to i32
  %446 = add nuw nsw i32 %435, %445
  %447 = getelementptr inbounds [65 x float], [65 x float]* %7, i64 0, i64 38
  %448 = load float, float* %447, align 8
  %449 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 3, i32 1, i64 38
  %450 = load float, float* %449, align 4
  %451 = fmul float %450, 3.000000e+00
  %452 = fcmp olt float %448, %451
  %453 = fmul float %448, 3.000000e+00
  %454 = fcmp ogt float %453, %450
  %455 = and i1 %454, %452
  %456 = zext i1 %455 to i32
  %457 = add nuw nsw i32 %446, %456
  %458 = getelementptr inbounds [65 x float], [65 x float]* %7, i64 0, i64 39
  %459 = load float, float* %458, align 4
  %460 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 3, i32 1, i64 39
  %461 = load float, float* %460, align 4
  %462 = fmul float %461, 3.000000e+00
  %463 = fcmp olt float %459, %462
  %464 = fmul float %459, 3.000000e+00
  %465 = fcmp ogt float %464, %461
  %466 = and i1 %465, %463
  %467 = zext i1 %466 to i32
  %468 = add nuw nsw i32 %457, %467
  %469 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 3
  %470 = icmp ugt i32 %468, 15
  %471 = zext i1 %470 to i32
  %472 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 5
  %473 = load i32, i32* %472, align 4
  %474 = icmp sgt i32 %473, 0
  call void @_ZN6webrtc22NoiseSpectrumEstimator6UpdateEN3rtc9ArrayViewIKfLln4711EEEb(%"class.webrtc::NoiseSpectrumEstimator"* %469, float* nonnull %244, i64 65, i1 zeroext %474) #7
  %475 = load i32, i32* %472, align 4
  %476 = icmp sgt i32 %475, 1
  %477 = select i1 %476, i32 %475, i32 1
  %478 = add nsw i32 %477, -1
  store i32 %478, i32* %472, align 4
  %479 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 7
  %480 = load i32, i32* %479, align 4
  %481 = icmp eq i32 %480, %471
  br i1 %481, label %482, label %489

482:                                              ; preds = %314
  %483 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 6
  %484 = load i32, i32* %483, align 8
  %485 = icmp sgt i32 %484, 1
  %486 = select i1 %485, i32 %484, i32 1
  %487 = add nsw i32 %486, -1
  store i32 %487, i32* %483, align 8
  %488 = icmp slt i32 %486, 2
  br label %491

489:                                              ; preds = %314
  store i32 %471, i32* %479, align 4
  %490 = getelementptr inbounds %"class.webrtc::SignalClassifier", %"class.webrtc::SignalClassifier"* %0, i64 0, i32 6
  store i32 3, i32* %490, align 8
  br label %491

491:                                              ; preds = %489, %482
  %492 = phi i1 [ false, %489 ], [ %488, %482 ]
  %493 = and i1 %470, %492
  %494 = zext i1 %493 to i32
  call void @llvm.lifetime.end.p0i8(i64 260, i8* nonnull %242) #7
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %13) #7
  call void @llvm.lifetime.end.p0i8(i64 320, i8* nonnull %8) #7
  ret i32 %494

495:                                              ; preds = %264
  %496 = or i64 %265, 5
  %497 = shl nuw i64 %278, 1
  %498 = getelementptr inbounds float, float* %263, i64 %497
  %499 = bitcast float* %498 to <8 x float>*
  %500 = load <8 x float>, <8 x float>* %499, align 8
  %501 = fmul <8 x float> %500, %500
  %502 = shufflevector <8 x float> %501, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %503 = getelementptr inbounds [65 x float], [65 x float]* %7, i64 0, i64 %496
  %504 = fmul <8 x float> %500, %500
  %505 = shufflevector <8 x float> %504, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %506 = fadd <4 x float> %502, %505
  %507 = bitcast float* %503 to <4 x float>*
  store <4 x float> %506, <4 x float>* %507, align 4, !alias.scope !2, !noalias !5
  %508 = add nuw nsw i64 %265, 8
  br label %264
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN6webrtc11DownSampler10DownSampleEN3rtc9ArrayViewIKfLln4711EEENS2_IfLln4711EEE(%"class.webrtc::DownSampler"*, float*, i64, float*, i64) local_unnamed_addr #2

declare void @_ZN6webrtc22NoiseSpectrumEstimator6UpdateEN3rtc9ArrayViewIKfLln4711EEEb(%"class.webrtc::NoiseSpectrumEstimator"*, float*, i64, i1 zeroext) local_unnamed_addr #2

declare i32 @_ZN6webrtc10GetCPUInfoENS_10CPUFeatureE(i32) local_unnamed_addr #2

declare void @_ZNK6webrtc8OouraFft3FftEPf(%"class.webrtc::OouraFft"*, float*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
