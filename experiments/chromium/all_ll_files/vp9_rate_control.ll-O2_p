; ModuleID = '../../media/gpu/vaapi/vp9_rate_control.cc'
source_filename = "../../media/gpu/vaapi/vp9_rate_control.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.media::VP9RateControl" = type { i32 (...)** }
%"struct.libvpx::VP9RateControlRtcConfig" = type { i32, i32, i32, i32, i64, i64, i64, i64, i32, i32, i32, double, i32, i32, [12 x i32], [12 x i32], [5 x i32], [5 x i32], [12 x i32], [5 x i32] }
%"class.libvpx::VP9RateControlRTC" = type { %struct.VP9_COMP* }
%struct.VP9_COMP = type { %struct.FRAME_INFO, [8 x i8], %struct.QUANTS, %struct.ThreadData, %struct.MB_MODE_INFO_EXT*, [8 x i8], [256 x [8 x i16]], [256 x [8 x i16]], %struct.VP9Common, %struct.VP9EncoderConfig, %struct.lookahead_ctx*, %struct.lookahead_entry*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i8, [50 x %struct.TplDepFrame], [8 x %struct.yv12_buffer_config*], [8 x %struct.EncFrameBuf], %union.pthread_mutex_t, i32, %struct.KMEANS_DATA*, i32, i32, [8 x double], [8 x double], [8 x i32], i32, %struct.TileDataEnc*, i32, i32, [3 x i32], i32, i32, i32, [8 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64*, i32, i32, double*, %struct.yv12_buffer_config, [4 x [64 x %struct.TOKENEXTRA*]], [4 x [64 x %struct.TOKENLIST*]], i64, %struct.RD_OPT, %struct.CODING_CONTEXT, [2 x i32*], [2 x i32*], [2 x i32*], [2 x i32*], i64, i64, i64, %struct.RATE_CONTROL, double, [8 x [4 x i32]], %struct.vpx_codec_pkt_list*, [25 x %struct.MBGRAPH_FRAME_STATS], i32, i32, i32, %struct.SPEED_FEATURES, i32, i32, i32, i32, i32, i8*, i8*, [8 x i32], %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i32 (%struct.macroblock*, %struct.mv*, %struct.mv*, i32, i32, %struct.vp9_variance_vtable*, i32, i32, i32*, i32*, i32**, i32*, i32*, i8*, i32, i32, i32)*, %struct.scale_factors, i32 (%struct.macroblock*, %struct.search_site_config*, %struct.mv*, %struct.mv*, i32, i32, i32*, %struct.vp9_variance_vtable*, %struct.mv*)*, [13 x %struct.vp9_variance_vtable], i64, i64, i64, i64, %struct.TWO_PASS, i8, %struct.yv12_buffer_config, %struct.ALT_REF_AQ*, i32, i32, i32, i32, i32, i32, %struct.SVC, %struct.diff*, i32, i32, i32, %struct.search_site_config, [10 x i32], [7 x [4 x i32]], [2 x [10 x [10 x i32]]], [10 x [10 x [10 x i32]]], [4 x [3 x i32]], [16 x [4 x i32]], [3 x [2 x [4 x i32]]], %struct.vp9_denoiser, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.noise_estimate, i8*, [4 x i64], i64, i64, i64, i8, i32, %struct.VPxWorker*, %struct.EncWorkerData*, %struct.VP9LfSyncData, %struct.VP9BitstreamWorkerData*, i32, %struct.Vp9LevelInfo, %struct.MultiThreadHandle, void (%struct.VP9RowMTSyncData*, i32, i32)*, void (%struct.VP9RowMTSyncData*, i32, i32, i32)*, %struct.ARNRFilterData, i32, i32, i8*, i8*, i8*, i8*, i8, i8, i8*, i32, %struct.LevelConstraint, i8*, i8*, i32, %struct.vpx_roi_map, i32, %struct.EXT_RATECTRL, [8 x i8] }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PICK_MODE_CONTEXT*, %struct.PC_TREE*, %struct.PC_TREE*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], %struct.macroblockd, %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, [4 x i32], [4 x i32], i32, [4 x i32], [4 x i32], [4 x i32], [2 x i32*], [2 x i32*], i32**, [4 x i32], [2 x i32*], [2 x i32*], i32**, i32, i32, %struct.MvLimits, [4 x [256 x i8]], [4 x i32], i32, i32, [4 x [2 x [2 x [6 x [2 x [6 x [12 x i32]]]]]]], i32, i32, i32, i32, i32, [12 x i8], [12 x i64], [4 x %struct.mv], [2 x i8], i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, [25 x i8], i8, i8, void (i16*, i32*, i32)*, void (i32*, i8*, i32, i32)*, void (i32*, i16*, i32, i32, i32)*, [8 x i8], [4096 x i8], %struct.scale_factors*, [8 x i8] }
%struct.macroblock_plane = type { [4096 x i16], i32*, i32*, i16*, %struct.buf_2d, [8 x i8], [8 x i16], i16*, i16*, i16*, i16*, i16*, [2 x i64], [8 x i8] }
%struct.buf_2d = type { i8*, i32 }
%struct.macroblockd = type { [3 x %struct.macroblockd_plane], i8, i8, %struct.FRAME_COUNTS*, %struct.TileInfo, i32, %struct.MODE_INFO**, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i32, [3 x i8]*, i32, i32, i32, i32, %struct.frame_contexts*, [2 x %struct.RefBuffer*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [16 x i8]], i8*, [8 x i8], i32, i32, i32, %struct.vpx_internal_error_info*, i32* }
%struct.macroblockd_plane = type { i32*, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i16, i16, i8, i8, i16*, i32* }
%struct.TileInfo = type { i32, i32, i32, i32 }
%struct.MODE_INFO = type { i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x %union.int_mv], [4 x %struct.b_mode_info] }
%union.int_mv = type { i32 }
%struct.b_mode_info = type { i8, [2 x %union.int_mv] }
%struct.frame_contexts = type { [4 x [9 x i8]], [10 x [9 x i8]], [16 x [3 x i8]], [4 x [2 x [2 x [6 x [6 x [3 x i8]]]]]], [4 x [2 x i8]], [7 x [3 x i8]], [4 x i8], [5 x i8], [5 x [2 x i8]], [5 x i8], %struct.tx_probs, [3 x i8], %struct.nmv_context, i32 }
%struct.tx_probs = type { [2 x [3 x i8]], [2 x [2 x i8]], [2 x [1 x i8]] }
%struct.nmv_context = type { [3 x i8], [2 x %struct.nmv_component] }
%struct.nmv_component = type { i8, [10 x i8], [1 x i8], [10 x i8], [2 x [3 x i8]], [3 x i8], i8, i8 }
%struct.RefBuffer = type { i32, %struct.yv12_buffer_config*, %struct.scale_factors }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.MvLimits = type { i32, i32, i32, i32 }
%struct.mv = type { i16, i16 }
%struct.RD_COUNTS = type { [4 x [2 x [2 x [6 x [6 x [12 x i32]]]]]], [3 x i64], [4 x i64] }
%struct.FRAME_COUNTS = type { [4 x [10 x i32]], [10 x [10 x i32]], [16 x [4 x i32]], [4 x [2 x [2 x [6 x [6 x [4 x i32]]]]]], [4 x [2 x [2 x [6 x [6 x i32]]]]], [4 x [3 x i32]], [7 x [4 x i32]], [4 x [2 x i32]], [5 x [2 x i32]], [5 x [2 x [2 x i32]]], [5 x [2 x i32]], %struct.tx_counts, [3 x [2 x i32]], %struct.nmv_context_counts }
%struct.tx_counts = type { [2 x [4 x i32]], [2 x [3 x i32]], [2 x [2 x i32]], [4 x i32] }
%struct.nmv_context_counts = type { [4 x i32], [2 x %struct.nmv_component_counts] }
%struct.nmv_component_counts = type { [2 x i32], [11 x i32], [2 x i32], [10 x [2 x i32]], [2 x [4 x i32]], [4 x i32], [2 x i32], [2 x i32] }
%struct.PICK_MODE_CONTEXT = type { %struct.MODE_INFO, %struct.MB_MODE_INFO_EXT, i8*, [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], i32, i32, i32, i32, i32, [12 x i8], i32, i32, i32, i32, [4 x i64], i32, i64, i64, i32, i32, i32, i8, %union.int_mv, i8, i8, i32, [4 x %struct.mv], i8, i32, i8 }
%struct.MB_MODE_INFO_EXT = type { [4 x [2 x %union.int_mv]], [4 x i8] }
%struct.PC_TREE = type { i32, i32, i8, %struct.PICK_MODE_CONTEXT, [2 x %struct.PICK_MODE_CONTEXT], [2 x %struct.PICK_MODE_CONTEXT], %union.anon, %struct.mv }
%union.anon = type { [4 x %struct.PC_TREE*] }
%struct.VP9Common = type { %struct.vpx_internal_error_info, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], [8 x i32], [3 x %struct.RefBuffer], i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], i32, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, i32 (%struct.VP9Common*, i32)*, void (%struct.VP9Common*)*, void (%struct.VP9Common*)*, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, i32, i32, i32, [2 x i8*], i8*, i8*, i32, i8, [11 x i8], %struct.loop_filter_info_n, i32, [4 x i32], %struct.loopfilter, %struct.segmentation, i8, [2 x i8], i32, %struct.frame_contexts*, %struct.frame_contexts*, i32, %struct.FRAME_COUNTS, i32, i32, i32, i32, i32, %struct.postproc_state, i32, i32, i32, i32, i32, i32, %struct.BufferPool*, i8*, i8*, i32, i32, [8 x i8] }
%struct.RefCntBuffer = type { i32, %struct.MV_REF*, i32, i32, i8, i32, i32, %struct.vpx_codec_frame_buffer, %struct.yv12_buffer_config }
%struct.MV_REF = type { [2 x %union.int_mv], [2 x i8] }
%struct.vpx_codec_frame_buffer = type { i8*, i64, i8* }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [8 x [4 x [2 x i8]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { i32, i32, i32, i32, i8, i8, [4 x i8], [4 x i8], [2 x i8], [2 x i8], %struct.LOOP_FILTER_MASK*, i32 }
%struct.LOOP_FILTER_MASK = type { [4 x i64], [4 x i64], i64, [4 x i16], [4 x i16], i16, [64 x i8] }
%struct.segmentation = type { i8, i8, i8, i8, i8, [7 x i8], [3 x i8], [8 x [4 x i16]], [8 x i32], i32 }
%struct.postproc_state = type { i32, i32, i32, i32, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i8*, i8* }
%struct.BufferPool = type { i8*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)*, [12 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.VP9EncoderConfig = type { i32, i32, i32, i32, i32, double, %struct.vpx_rational, %struct.vpx_rational64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [12 x i32], [5 x i32], [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.vpx_rational = type { i32, i32 }
%struct.vpx_rational64 = type { i64, i32 }
%struct.vpx_fixed_buf = type { i8*, i64 }
%struct.lookahead_ctx = type { i32, i32, i32, i32, i32, %struct.lookahead_entry* }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, i32, i32, i32, i32, i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, i64, i32, %union.int_mv }
%struct.EncFrameBuf = type { i32, i32, %struct.yv12_buffer_config }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.KMEANS_DATA = type { double, i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [13 x [30 x i32]], [13 x [30 x i8]], %struct.FIRSTPASS_DATA, %struct.VP9RowMTSyncData, i32* }
%struct.FIRSTPASS_DATA = type { double, double, i64, i64, i64, i64, i32, i32, double, double, double, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32 }
%struct.VP9RowMTSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32 }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.4, %union.anon.5, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.4 = type { i64 }
%union.anon.5 = type { i64 }
%struct.TOKENEXTRA = type { i8*, i16, i32 }
%struct.TOKENLIST = type { %struct.TOKENEXTRA*, %struct.TOKENEXTRA*, i32 }
%struct.RD_OPT = type { [30 x i32], [6 x i32], [8 x [13 x [30 x i32]]], [4 x [3 x i64]], [4 x [4 x i64]], i32, i32, double }
%struct.CODING_CONTEXT = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [3 x i8], i8*, [4 x i8], [2 x i8], %struct.frame_contexts }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, [2 x i32], i32, i32, i32, i32, i32, [5 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, [2 x i32], [2 x i32], [5 x i32], i32, i32, [25 x i64], i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, [5 x i32], double, i32, i32, i32, i32 }
%struct.vpx_codec_pkt_list = type { i32, i32, [1 x %struct.vpx_codec_cx_pkt] }
%struct.vpx_codec_cx_pkt = type { i32, %union.anon.7 }
%union.anon.7 = type { %struct.anon.8, [40 x i8] }
%struct.anon.8 = type { i8*, i64, i64, i64, i32, i32, [5 x i32], [5 x i32], [5 x i8] }
%struct.MBGRAPH_FRAME_STATS = type { %struct.MBGRAPH_MB_STATS* }
%struct.MBGRAPH_MB_STATS = type { [4 x %struct.anon.9] }
%struct.anon.9 = type { i32, %union.anon.10 }
%union.anon.10 = type { %union.int_mv }
%struct.SPEED_FEATURES = type { %struct.MV_SPEED_FEATURES, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i8, i8, i32, i32, i8, i8, i8, i32, i32, i32, i32, i32, i32, [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], [4 x i32], [13 x i32], i32, i32, i32, i32, i32, [13 x i32], i32, i32, i32, i8, i32, i32, i32, i8, i32, i32, i32, %struct.PARTITION_SEARCH_BREAKOUT_THR, %struct.anon.11, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, %struct.ADAPT_SUBPEL_FORCE_STOP, i32 }
%struct.ADAPT_SUBPEL_FORCE_STOP = type { i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.PARTITION_SEARCH_BREAKOUT_THR = type { i64, i32 }
%struct.anon.11 = type { i32, [3 x float], i32, i32, [4 x i32] }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, double, [3 x i32], i32, double, i32, i32, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.vp9_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)* }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)*, [2 x [2 x [2 x void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*]]], [2 x [2 x [2 x void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*]]] }
%struct.TWO_PASS = type { i32, i32, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRST_PASS_INFO, %struct.FIRSTPASS_STATS, i32, i64, double, double, double, double, %struct.FP_MB_FLOAT_STATS*, i32, i64, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [6 x i32], %struct.GF_GROUP }
%struct.FIRST_PASS_INFO = type { %struct.FIRSTPASS_STATS*, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64 }
%struct.FP_MB_FLOAT_STATS = type { double, double, double }
%struct.GF_GROUP = type { i8, [252 x i32], [252 x i32], [252 x i8], [252 x i8], [252 x i8], [252 x i32], [252 x i32], i32, i32, [50 x i32], i32, i32, i32, i32, i32, i32 }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ALT_REF_AQ = type opaque
%struct.SVC = type { i32, i32, i32, i32, i32, i32, %struct.lookahead_entry, i32, [25 x %struct.yv12_buffer_config], %struct.yv12_buffer_config, i32, i32, [12 x %struct.LAYER_CONTEXT], i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [2 x %struct.BUFFER_LONGTERM_REF], i32, i32, i32, i32, [5 x i8], [5 x i32], i8*, [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, i32, i32, [5 x i32], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i32], [8 x i8], [8 x i8], [5 x i32], i8, i8, i8, [8 x i8], i32, [5 x i32], i32, [5 x i64], i64, i64, [5 x i64], i32, i32, i32, i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, %struct.TWO_PASS, %struct.vpx_fixed_buf, i32, i32, i32, i32, %struct.lookahead_entry*, i32, i32, i32, i64, i32, i8*, i8*, i8*, i32, i32, i32, i8, i32 }
%struct.BUFFER_LONGTERM_REF = type { i32, i32 }
%struct.diff = type { i32, i32, i32 }
%struct.search_site_config = type { [88 x %struct.mv], [88 x i64], i32, i32 }
%struct.vp9_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VPxWorker = type { %struct.VPxWorkerImpl*, i32, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.VPxWorkerImpl = type opaque
%struct.EncWorkerData = type { %struct.VP9_COMP*, %struct.ThreadData*, i32, i32, [64 x i32] }
%struct.VP9LfSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, %struct.LoopFilterWorkerData*, i32, i32, %union.pthread_mutex_t*, %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.VP9Common*, [3 x %struct.macroblockd_plane], i32, i32, i32 }
%struct.VP9BitstreamWorkerData = type opaque
%struct.Vp9LevelInfo = type { %struct.Vp9LevelStats, %struct.Vp9LevelSpec }
%struct.Vp9LevelStats = type { i8, i32, i64, i64, double, %struct.FrameWindowBuffer, i32 }
%struct.FrameWindowBuffer = type { [128 x %struct.FrameRecord], i8, i8 }
%struct.FrameRecord = type { i64, i32, i32 }
%struct.Vp9LevelSpec = type { i32, i64, i32, i32, double, double, double, i8, i32, i8 }
%struct.MultiThreadHandle = type { i32, i32, i32, [4 x i32], %struct.JobQueue*, i32, [64 x %struct.RowMTInfo], [80 x i32] }
%struct.JobQueue = type { i8*, %struct.JobNode }
%struct.JobNode = type { i32, i32, i32 }
%struct.RowMTInfo = type { %struct.JobQueueHandle, %union.pthread_mutex_t }
%struct.JobQueueHandle = type { i8*, i32 }
%struct.ARNRFilterData = type { [25 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors }
%struct.LevelConstraint = type { i8, i8, i32, double }
%struct.vpx_roi_map = type { i8, i8*, i32, i32, [8 x i32], [8 x i32], [8 x i32], [8 x i32], [4 x i32] }
%struct.EXT_RATECTRL = type { i32, i8*, %struct.vpx_rc_funcs, %struct.vpx_rc_config, %struct.vpx_rc_firstpass_stats }
%struct.vpx_rc_funcs = type { i32 (i8*, %struct.vpx_rc_config*, i8**)*, i32 (i8*, %struct.vpx_rc_firstpass_stats*)*, i32 (i8*, %struct.vpx_rc_encodeframe_info*, %struct.vpx_rc_encodeframe_decision*)*, i32 (i8*, %struct.vpx_rc_encodeframe_result*)*, i32 (i8*)*, i8* }
%struct.vpx_rc_encodeframe_info = type { i32, i32, i32, i32, [3 x i32], [3 x i32] }
%struct.vpx_rc_encodeframe_decision = type { i32 }
%struct.vpx_rc_encodeframe_result = type { i64, i64, i64 }
%struct.vpx_rc_config = type { i32, i32, i32, i32, i32, i32 }
%struct.vpx_rc_firstpass_stats = type { %struct.vpx_rc_frame_stats*, i32 }
%struct.vpx_rc_frame_stats = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }
%"class.media::(anonymous namespace)::LibvpxVP9RateControl" = type { %"class.media::VP9RateControl", %"class.std::__1::unique_ptr.1" }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.libvpx::VP9RateControlRTC"* }
%"struct.libvpx::VP9FrameParamsQpRTC" = type { i32, i32, i32 }

$_ZN6libvpx17VP9RateControlRTCD2Ev = comdat any

@_ZTVN5media12_GLOBAL__N_120LibvpxVP9RateControlE = internal unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.media::(anonymous namespace)::LibvpxVP9RateControl"*)* @_ZN5media12_GLOBAL__N_120LibvpxVP9RateControlD2Ev to i8*), i8* bitcast (void (%"class.media::(anonymous namespace)::LibvpxVP9RateControl"*)* @_ZN5media12_GLOBAL__N_120LibvpxVP9RateControlD0Ev to i8*), i8* bitcast (void (%"class.media::(anonymous namespace)::LibvpxVP9RateControl"*, %"struct.libvpx::VP9RateControlRtcConfig"*)* @_ZN5media12_GLOBAL__N_120LibvpxVP9RateControl17UpdateRateControlERKN6libvpx23VP9RateControlRtcConfigE to i8*), i8* bitcast (void (%"class.media::(anonymous namespace)::LibvpxVP9RateControl"*, %"struct.libvpx::VP9FrameParamsQpRTC"*)* @_ZN5media12_GLOBAL__N_120LibvpxVP9RateControl9ComputeQPERKN6libvpx19VP9FrameParamsQpRTCE to i8*), i8* bitcast (i32 (%"class.media::(anonymous namespace)::LibvpxVP9RateControl"*)* @_ZNK5media12_GLOBAL__N_120LibvpxVP9RateControl5GetQPEv to i8*), i8* bitcast (i32 (%"class.media::(anonymous namespace)::LibvpxVP9RateControl"*)* @_ZNK5media12_GLOBAL__N_120LibvpxVP9RateControl18GetLoopfilterLevelEv to i8*), i8* bitcast (void (%"class.media::(anonymous namespace)::LibvpxVP9RateControl"*, i64)* @_ZN5media12_GLOBAL__N_120LibvpxVP9RateControl16PostEncodeUpdateEm to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden %"class.media::VP9RateControl"* @_ZN5media14VP9RateControl6CreateERKN6libvpx23VP9RateControlRtcConfigE(%"struct.libvpx::VP9RateControlRtcConfig"* dereferenceable(288)) local_unnamed_addr #0 align 2 {
  %2 = tail call %"class.libvpx::VP9RateControlRTC"* @_ZN6libvpx17VP9RateControlRTC6CreateERKNS_23VP9RateControlRtcConfigE(%"struct.libvpx::VP9RateControlRtcConfig"* dereferenceable(288) %0) #4
  %3 = icmp eq %"class.libvpx::VP9RateControlRTC"* %2, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %1
  %5 = ptrtoint %"class.libvpx::VP9RateControlRTC"* %2 to i64
  %6 = tail call i8* @_Znwm(i64 16) #5
  %7 = bitcast i8* %6 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN5media12_GLOBAL__N_120LibvpxVP9RateControlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds i8, i8* %6, i64 8
  %9 = bitcast i8* %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = bitcast i8* %6 to %"class.media::VP9RateControl"*
  br label %11

11:                                               ; preds = %1, %4
  %12 = phi %"class.media::VP9RateControl"* [ %10, %4 ], [ null, %1 ]
  ret %"class.media::VP9RateControl"* %12
}

declare %"class.libvpx::VP9RateControlRTC"* @_ZN6libvpx17VP9RateControlRTC6CreateERKNS_23VP9RateControlRtcConfigE(%"struct.libvpx::VP9RateControlRtcConfig"* dereferenceable(288)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6libvpx17VP9RateControlRTCD2Ev(%"class.libvpx::VP9RateControlRTC"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.libvpx::VP9RateControlRTC", %"class.libvpx::VP9RateControlRTC"* %0, i64 0, i32 0
  %3 = load %struct.VP9_COMP*, %struct.VP9_COMP** %2, align 8
  %4 = icmp eq %struct.VP9_COMP* %3, null
  br i1 %4, label %43, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %3, i64 0, i32 104, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %15

9:                                                ; preds = %5, %18
  %10 = phi %struct.VP9_COMP* [ %19, %18 ], [ %3, %5 ]
  %11 = phi i32 [ %20, %18 ], [ 0, %5 ]
  %12 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %10, i64 0, i32 104, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %24, label %18

15:                                               ; preds = %18, %5
  %16 = phi %struct.VP9_COMP* [ %3, %5 ], [ %19, %18 ]
  %17 = bitcast %struct.VP9_COMP* %16 to i8*
  tail call void @vpx_free(i8* %17) #4
  br label %43

18:                                               ; preds = %24, %9
  %19 = phi %struct.VP9_COMP* [ %10, %9 ], [ %39, %24 ]
  %20 = add nuw nsw i32 %11, 1
  %21 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %19, i64 0, i32 104, i32 2
  %22 = load i32, i32* %21, align 8
  %23 = icmp slt i32 %20, %22
  br i1 %23, label %9, label %15

24:                                               ; preds = %9, %24
  %25 = phi %struct.VP9_COMP* [ %39, %24 ], [ %10, %9 ]
  %26 = phi i32 [ %38, %24 ], [ 0, %9 ]
  %27 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %25, i64 0, i32 9, i32 42
  %28 = load i32, i32* %27, align 16
  %29 = mul nsw i32 %28, %11
  %30 = add nsw i32 %29, %26
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %25, i64 0, i32 104, i32 12, i64 %31, i32 23
  %33 = load i8*, i8** %32, align 8
  tail call void @vpx_free(i8* %33) #4
  %34 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %25, i64 0, i32 104, i32 12, i64 %31, i32 24
  %35 = load i8*, i8** %34, align 8
  tail call void @vpx_free(i8* %35) #4
  %36 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %25, i64 0, i32 104, i32 12, i64 %31, i32 25
  %37 = load i8*, i8** %36, align 8
  tail call void @vpx_free(i8* %37) #4
  %38 = add nuw nsw i32 %26, 1
  %39 = load %struct.VP9_COMP*, %struct.VP9_COMP** %2, align 8
  %40 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %39, i64 0, i32 104, i32 3
  %41 = load i32, i32* %40, align 4
  %42 = icmp slt i32 %38, %41
  br i1 %42, label %24, label %18

43:                                               ; preds = %1, %15
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

declare void @vpx_free(i8*) local_unnamed_addr #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN5media12_GLOBAL__N_120LibvpxVP9RateControlD2Ev(%"class.media::(anonymous namespace)::LibvpxVP9RateControl"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.media::(anonymous namespace)::LibvpxVP9RateControl", %"class.media::(anonymous namespace)::LibvpxVP9RateControl"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN5media12_GLOBAL__N_120LibvpxVP9RateControlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.media::(anonymous namespace)::LibvpxVP9RateControl", %"class.media::(anonymous namespace)::LibvpxVP9RateControl"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.libvpx::VP9RateControlRTC"*, %"class.libvpx::VP9RateControlRTC"** %3, align 8
  store %"class.libvpx::VP9RateControlRTC"* null, %"class.libvpx::VP9RateControlRTC"** %3, align 8
  %5 = icmp eq %"class.libvpx::VP9RateControlRTC"* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  tail call void @_ZN6libvpx17VP9RateControlRTCD2Ev(%"class.libvpx::VP9RateControlRTC"* nonnull %4) #4
  %7 = bitcast %"class.libvpx::VP9RateControlRTC"* %4 to i8*
  tail call void @_ZdlPv(i8* %7) #5
  br label %8

8:                                                ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN5media12_GLOBAL__N_120LibvpxVP9RateControlD0Ev(%"class.media::(anonymous namespace)::LibvpxVP9RateControl"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.media::(anonymous namespace)::LibvpxVP9RateControl", %"class.media::(anonymous namespace)::LibvpxVP9RateControl"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN5media12_GLOBAL__N_120LibvpxVP9RateControlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.media::(anonymous namespace)::LibvpxVP9RateControl", %"class.media::(anonymous namespace)::LibvpxVP9RateControl"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.libvpx::VP9RateControlRTC"*, %"class.libvpx::VP9RateControlRTC"** %3, align 8
  store %"class.libvpx::VP9RateControlRTC"* null, %"class.libvpx::VP9RateControlRTC"** %3, align 8
  %5 = icmp eq %"class.libvpx::VP9RateControlRTC"* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  tail call void @_ZN6libvpx17VP9RateControlRTCD2Ev(%"class.libvpx::VP9RateControlRTC"* nonnull %4) #4
  %7 = bitcast %"class.libvpx::VP9RateControlRTC"* %4 to i8*
  tail call void @_ZdlPv(i8* %7) #5
  br label %8

8:                                                ; preds = %1, %6
  %9 = bitcast %"class.media::(anonymous namespace)::LibvpxVP9RateControl"* %0 to i8*
  tail call void @_ZdlPv(i8* %9) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN5media12_GLOBAL__N_120LibvpxVP9RateControl17UpdateRateControlERKN6libvpx23VP9RateControlRtcConfigE(%"class.media::(anonymous namespace)::LibvpxVP9RateControl"* nocapture readonly, %"struct.libvpx::VP9RateControlRtcConfig"* dereferenceable(288)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.media::(anonymous namespace)::LibvpxVP9RateControl", %"class.media::(anonymous namespace)::LibvpxVP9RateControl"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.libvpx::VP9RateControlRTC"*, %"class.libvpx::VP9RateControlRTC"** %3, align 8
  tail call void @_ZN6libvpx17VP9RateControlRTC17UpdateRateControlERKNS_23VP9RateControlRtcConfigE(%"class.libvpx::VP9RateControlRTC"* %4, %"struct.libvpx::VP9RateControlRtcConfig"* dereferenceable(288) %1) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN5media12_GLOBAL__N_120LibvpxVP9RateControl9ComputeQPERKN6libvpx19VP9FrameParamsQpRTCE(%"class.media::(anonymous namespace)::LibvpxVP9RateControl"* nocapture readonly, %"struct.libvpx::VP9FrameParamsQpRTC"* dereferenceable(12)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.media::(anonymous namespace)::LibvpxVP9RateControl", %"class.media::(anonymous namespace)::LibvpxVP9RateControl"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.libvpx::VP9RateControlRTC"*, %"class.libvpx::VP9RateControlRTC"** %3, align 8
  tail call void @_ZN6libvpx17VP9RateControlRTC9ComputeQPERKNS_19VP9FrameParamsQpRTCE(%"class.libvpx::VP9RateControlRTC"* %4, %"struct.libvpx::VP9FrameParamsQpRTC"* dereferenceable(12) %1) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZNK5media12_GLOBAL__N_120LibvpxVP9RateControl5GetQPEv(%"class.media::(anonymous namespace)::LibvpxVP9RateControl"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.media::(anonymous namespace)::LibvpxVP9RateControl", %"class.media::(anonymous namespace)::LibvpxVP9RateControl"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %"class.libvpx::VP9RateControlRTC"*, %"class.libvpx::VP9RateControlRTC"** %2, align 8
  %4 = tail call i32 @_ZNK6libvpx17VP9RateControlRTC5GetQPEv(%"class.libvpx::VP9RateControlRTC"* %3) #4
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZNK5media12_GLOBAL__N_120LibvpxVP9RateControl18GetLoopfilterLevelEv(%"class.media::(anonymous namespace)::LibvpxVP9RateControl"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.media::(anonymous namespace)::LibvpxVP9RateControl", %"class.media::(anonymous namespace)::LibvpxVP9RateControl"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %"class.libvpx::VP9RateControlRTC"*, %"class.libvpx::VP9RateControlRTC"** %2, align 8
  %4 = tail call i32 @_ZNK6libvpx17VP9RateControlRTC18GetLoopfilterLevelEv(%"class.libvpx::VP9RateControlRTC"* %3) #4
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN5media12_GLOBAL__N_120LibvpxVP9RateControl16PostEncodeUpdateEm(%"class.media::(anonymous namespace)::LibvpxVP9RateControl"* nocapture readonly, i64) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.media::(anonymous namespace)::LibvpxVP9RateControl", %"class.media::(anonymous namespace)::LibvpxVP9RateControl"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.libvpx::VP9RateControlRTC"*, %"class.libvpx::VP9RateControlRTC"** %3, align 8
  tail call void @_ZN6libvpx17VP9RateControlRTC16PostEncodeUpdateEm(%"class.libvpx::VP9RateControlRTC"* %4, i64 %1) #4
  ret void
}

declare void @_ZN6libvpx17VP9RateControlRTC17UpdateRateControlERKNS_23VP9RateControlRtcConfigE(%"class.libvpx::VP9RateControlRTC"*, %"struct.libvpx::VP9RateControlRtcConfig"* dereferenceable(288)) local_unnamed_addr #1

declare void @_ZN6libvpx17VP9RateControlRTC9ComputeQPERKNS_19VP9FrameParamsQpRTCE(%"class.libvpx::VP9RateControlRTC"*, %"struct.libvpx::VP9FrameParamsQpRTC"* dereferenceable(12)) local_unnamed_addr #1

declare i32 @_ZNK6libvpx17VP9RateControlRTC5GetQPEv(%"class.libvpx::VP9RateControlRTC"*) local_unnamed_addr #1

declare i32 @_ZNK6libvpx17VP9RateControlRTC18GetLoopfilterLevelEv(%"class.libvpx::VP9RateControlRTC"*) local_unnamed_addr #1

declare void @_ZN6libvpx17VP9RateControlRTC16PostEncodeUpdateEm(%"class.libvpx::VP9RateControlRTC"*, i64) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
