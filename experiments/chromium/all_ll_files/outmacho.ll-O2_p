; ModuleID = '../../third_party/nasm/output/outmacho.c'
source_filename = "../../third_party/nasm/output/outmacho.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.dfmt = type { i8*, i8*, void ()*, void (i8*, i32, i32)*, void (i8*, i32, i64, i32, i8*)*, void (i8*, i8*)*, void (i32)*, void (i32, i8*)*, void ()*, %struct.pragma_facility* }
%struct.pragma_facility = type { i8*, i32 (%struct.pragma*)* }
%struct.pragma = type { %struct.pragma_facility*, i8*, i8*, i8*, i32 }
%struct.ofmt = type { i8*, i8*, i8*, i32, i32, %struct.dfmt**, %struct.dfmt*, i8*, void ()*, void ()*, void (%struct.out_data*)*, void (i32, i8*, i32, i64, i32, i32)*, void (i8*, i32, i64, i32, i8*)*, i32 (i8*, i32*)*, i32 (i8*, i32, i32, i32*, i8*)*, void (i32, i32)*, i32 (i32)*, i32 (i32, i8*)*, void ()*, %struct.pragma_facility* }
%struct.out_data = type { i64, i32, i32, i32, i32, i32, i32, i64, %struct.itemplate*, i8*, i64, i32, i32, i64, %struct.src_location }
%struct.itemplate = type opaque
%struct.src_location = type { i8*, i32 }
%struct.file_list = type { %struct.file_list*, %struct.file_list*, i8*, i32, %struct.dir_list* }
%struct.dir_list = type { %struct.dir_list*, %struct.dir_list*, i8*, i32 }
%struct.dw_sect_list = type { %struct.SAA*, i32, i32, i64, i32, %struct.dw_sect_list*, %struct.dw_sect_list* }
%struct.SAA = type { i64, i64, i64, i64, i64, i64, i8**, i64, i64, i8**, i64, i64, i8** }
%struct.RAA = type opaque
%struct.hash_table = type { %struct.hash_node*, i64, i64, i64 }
%struct.hash_node = type { i64, i8*, i64, i8* }
%struct.macho_fmt = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }
%struct.section = type { %struct.section*, %struct.SAA*, i32, i32, i32, %struct.reloc*, [2 x %struct.rbtree*], i32, i8, [34 x i8], [16 x i8], [16 x i8], i64, i64, i64, i32, i32, i32, i32 }
%struct.reloc = type { %struct.reloc*, i32, i32 }
%struct.rbtree = type { i64, %struct.rbtree*, %struct.rbtree*, i8 }
%struct.symbol = type { [2 x %struct.rbtree], %struct.symbol*, i8*, i32, i32, i32, i8, i8, i16 }
%struct.macho_known_section_attr = type { i8*, i32 }
%struct.macho_known_section = type { i8*, i8*, i8*, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.optimization = type { i32, i32 }
%struct.section_info = type { i64, i32 }
%struct.hash_insert = type { %struct.hash_table*, %struct.hash_node*, %struct.hash_node }
%union.offset = type { i64 }

@.str = private unnamed_addr constant [51 x i8] c"Mach-O i386 (Mach, including MacOS X and variants)\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"macho32\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c".o\00", align 1
@macho32_df_arr = internal constant [2 x %struct.dfmt*] [%struct.dfmt* @macho32_df_dwarf, %struct.dfmt* null], align 16
@macho32_df_dwarf = internal constant %struct.dfmt { i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0), void ()* @macho_dbg_init, void (i8*, i32, i32)* @macho_dbg_linenum, void (i8*, i32, i64, i32, i8*)* @null_debug_deflabel, void (i8*, i8*)* @null_debug_directive, void (i32)* @null_debug_typevalue, void (i32, i8*)* @macho_dbg_output, void ()* @macho_dbg_cleanup, %struct.pragma_facility* null }, align 8
@macho_stdmac = external constant [0 x i8], align 1
@macho_pragma_list = internal constant [2 x %struct.pragma_facility] [%struct.pragma_facility { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.82, i32 0, i32 0), i32 (%struct.pragma*)* @macho_pragma }, %struct.pragma_facility { i8* null, i32 (%struct.pragma*)* @macho_pragma }], align 16
@of_macho32 = hidden local_unnamed_addr constant %struct.ofmt { i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i32 0, i32 32, %struct.dfmt** getelementptr inbounds ([2 x %struct.dfmt*], [2 x %struct.dfmt*]* @macho32_df_arr, i32 0, i32 0), %struct.dfmt* @macho32_df_dwarf, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @macho_stdmac, i32 0, i32 0), void ()* @macho32_init, void ()* @null_reset, void (%struct.out_data*)* @nasm_do_legacy_output, void (i32, i8*, i32, i64, i32, i32)* @macho_output, void (i8*, i32, i64, i32, i8*)* @macho_symdef, i32 (i8*, i32*)* @macho_section, i32 (i8*, i32, i32, i32*, i8*)* @macho_herelabel, void (i32, i32)* @macho_sectalign, i32 (i32)* @null_segbase, i32 (i32, i8*)* @null_directive, void ()* @macho_cleanup, %struct.pragma_facility* getelementptr inbounds ([2 x %struct.pragma_facility], [2 x %struct.pragma_facility]* @macho_pragma_list, i32 0, i32 0) }, align 8
@.str.3 = private unnamed_addr constant [53 x i8] c"Mach-O x86-64 (Mach, including MacOS X and variants)\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"macho64\00", align 1
@macho64_df_arr = internal constant [2 x %struct.dfmt*] [%struct.dfmt* @macho64_df_dwarf, %struct.dfmt* null], align 16
@macho64_df_dwarf = internal constant %struct.dfmt { i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0), void ()* @macho_dbg_init, void (i8*, i32, i32)* @macho_dbg_linenum, void (i8*, i32, i64, i32, i8*)* @null_debug_deflabel, void (i8*, i8*)* @null_debug_directive, void (i32)* @null_debug_typevalue, void (i32, i8*)* @macho_dbg_output, void ()* @macho_dbg_cleanup, %struct.pragma_facility* null }, align 8
@of_macho64 = hidden constant %struct.ofmt { i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i32 0, i32 64, %struct.dfmt** getelementptr inbounds ([2 x %struct.dfmt*], [2 x %struct.dfmt*]* @macho64_df_arr, i32 0, i32 0), %struct.dfmt* @macho64_df_dwarf, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @macho_stdmac, i32 0, i32 0), void ()* @macho64_init, void ()* @null_reset, void (%struct.out_data*)* @nasm_do_legacy_output, void (i32, i8*, i32, i64, i32, i32)* @macho_output, void (i8*, i32, i64, i32, i8*)* @macho_symdef, i32 (i8*, i32*)* @macho_section, i32 (i8*, i32, i32, i32*, i8*)* @macho_herelabel, void (i32, i32)* @macho_sectalign, i32 (i32)* @null_segbase, i32 (i32, i8*)* @null_directive, void ()* @macho_cleanup, %struct.pragma_facility* getelementptr inbounds ([2 x %struct.pragma_facility], [2 x %struct.pragma_facility]* @macho_pragma_list, i32 0, i32 0) }, align 8
@.str.5 = private unnamed_addr constant [35 x i8] c"Mach-O i386 dwarf for Darwin/MacOS\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"dwarf\00", align 1
@dw_cur_file = internal unnamed_addr global %struct.file_list* null, align 8
@dw_head_file = internal unnamed_addr global %struct.file_list* null, align 8
@dbg_immcall = internal unnamed_addr global i1 false, align 1
@cur_line = internal unnamed_addr global i32 0, align 4
@dw_num_files = internal unnamed_addr global i32 0, align 4
@dw_last_file_next = internal unnamed_addr global %struct.file_list** null, align 8
@dw_head_dir = internal unnamed_addr global %struct.dir_list* null, align 8
@dw_num_dirs = internal unnamed_addr global i32 0, align 4
@dw_last_dir_next = internal unnamed_addr global %struct.dir_list** null, align 8
@dw_cur_sect = internal unnamed_addr global %struct.dw_sect_list* null, align 8
@dw_head_sect = internal unnamed_addr global %struct.dw_sect_list* null, align 8
@dw_num_sects = internal unnamed_addr global i32 0, align 4
@ofmt = external local_unnamed_addr global %struct.ofmt*, align 8
@dw_last_sect = internal unnamed_addr global %struct.dw_sect_list* null, align 8
@.str.7 = private unnamed_addr constant [14 x i8] c".debug_abbrev\00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c".debug_info\00", align 1
@.str.9 = private unnamed_addr constant [12 x i8] c".debug_line\00", align 1
@.str.10 = private unnamed_addr constant [11 x i8] c".debug_str\00", align 1
@.str.11 = private unnamed_addr constant [8 x i8] c"__DWARF\00", align 1
@.str.12 = private unnamed_addr constant [13 x i8] c"__debug_line\00", align 1
@.str.13 = private unnamed_addr constant [41 x i8] c"../../third_party/nasm/output/outmacho.c\00", align 1
@.str.14 = private unnamed_addr constant [18 x i8] c"p_section != NULL\00", align 1
@module_name = internal unnamed_addr global i8* null, align 8
@.str.15 = private unnamed_addr constant [12 x i8] c"__debug_str\00", align 1
@.str.16 = private unnamed_addr constant [13 x i8] c"__debug_info\00", align 1
@.str.17 = private unnamed_addr constant [15 x i8] c"__debug_abbrev\00", align 1
@section_by_index = internal unnamed_addr global %struct.RAA* null, align 8
@.str.18 = private unnamed_addr constant [12 x i8] c"%-16s,%-16s\00", align 1
@section_by_name = internal global %struct.hash_table zeroinitializer, align 8
@fmt = internal unnamed_addr global %struct.macho_fmt zeroinitializer, align 4
@macho32_fmt = internal unnamed_addr constant %struct.macho_fmt { i32 4, i32 -17958194, i32 7, i32 1, i32 28, i32 56, i32 68, i32 12, i32 2, i32 0, i32 0, i32 5, i8 0 }, align 4
@macho_gotpcrel_sect = internal unnamed_addr global i32 0, align 4
@inname = external local_unnamed_addr global i8*, align 8
@sects = internal global %struct.section* null, align 8
@sectstail = internal unnamed_addr global %struct.section** null, align 8
@absolute_sect = internal global %struct.section zeroinitializer, align 8
@syms = internal global %struct.symbol* null, align 8
@symstail = internal unnamed_addr global %struct.symbol** null, align 8
@nsyms = internal unnamed_addr global i32 0, align 4
@nlocalsym = internal unnamed_addr global i32 0, align 4
@nextdefsym = internal unnamed_addr global i32 0, align 4
@nundefsym = internal unnamed_addr global i32 0, align 4
@extsyms = internal unnamed_addr global %struct.RAA* null, align 8
@strs = internal unnamed_addr global %struct.SAA* null, align 8
@zero_buffer = external constant [65536 x i8], align 16
@strslen = internal unnamed_addr global i32 0, align 4
@macho_tlvp_sect = internal unnamed_addr global i32 0, align 4
@.str.19 = private unnamed_addr constant [7 x i8] c"..tlvp\00", align 1
@.str.20 = private unnamed_addr constant [62 x i8] c"attempt to assemble code in section %d: defaulting to `.text'\00", align 1
@.str.21 = private unnamed_addr constant [7 x i8] c"__TEXT\00", align 1
@.str.22 = private unnamed_addr constant [7 x i8] c"__text\00", align 1
@.str.23 = private unnamed_addr constant [23 x i8] c"text section not found\00", align 1
@dfmt = external local_unnamed_addr global %struct.dfmt*, align 8
@.str.24 = private unnamed_addr constant [53 x i8] c"attempt to initialize memory in BSS section: ignored\00", align 1
@.str.25 = private unnamed_addr constant [49 x i8] c"section size may be negativewith address symbols\00", align 1
@.str.26 = private unnamed_addr constant [55 x i8] c"uninitialized space declared in %s,%s section: zeroing\00", align 1
@.str.27 = private unnamed_addr constant [55 x i8] c"Mach-O format does not support section base references\00", align 1
@.str.28 = private unnamed_addr constant [64 x i8] c"Mach-O 64-bit format does not support 32-bit absolute addresses\00", align 1
@.str.29 = private unnamed_addr constant [47 x i8] c"Mach-O format does not support this use of WRT\00", align 1
@.str.30 = private unnamed_addr constant [46 x i8] c"Unsupported non-32-bit Macho-O relocation [2]\00", align 1
@.str.31 = private unnamed_addr constant [37 x i8] c"Unrepresentable relocation in Mach-O\00", align 1
@.str.32 = private unnamed_addr constant [26 x i8] c"reltype <= fmt.maxreltype\00", align 1
@.str.33 = private unnamed_addr constant [49 x i8] c"relcation with subtractionbecomes to be obsolete\00", align 1
@.str.34 = private unnamed_addr constant [30 x i8] c"Unsupported use of use of WRT\00", align 1
@.str.35 = private unnamed_addr constant [25 x i8] c"Symbol for WRT not found\00", align 1
@.str.36 = private unnamed_addr constant [56 x i8] c"unable to find a suitable%s%s symbol for this reference\00", align 1
@.str.38 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.39 = private unnamed_addr constant [11 x i8] c" absolute \00", align 1
@.str.40 = private unnamed_addr constant [3 x i8] c" \09\00", align 1
@.str.41 = private unnamed_addr constant [15 x i8] c"private_extern\00", align 1
@.str.42 = private unnamed_addr constant [67 x i8] c"The Mach-O format does not (yet) support forward reference fixups.\00", align 1
@.str.43 = private unnamed_addr constant [11 x i8] c"..gotpcrel\00", align 1
@.str.44 = private unnamed_addr constant [33 x i8] c"unrecognized special symbol `%s'\00", align 1
@.str.45 = private unnamed_addr constant [32 x i8] c"unrecognised symbol type `%.*s'\00", align 1
@.str.46 = private unnamed_addr constant [55 x i8] c"in-file index for section %d not found, is_global = %d\00", align 1
@.str.47 = private unnamed_addr constant [42 x i8] c"no special symbol features supported here\00", align 1
@.str.48 = private unnamed_addr constant [6 x i8] c".text\00", align 1
@.str.49 = private unnamed_addr constant [20 x i8] c"empty segment name\0A\00", align 1
@.str.50 = private unnamed_addr constant [26 x i8] c"segment name %s too long\0A\00", align 1
@.str.51 = private unnamed_addr constant [20 x i8] c"empty section name\0A\00", align 1
@.str.52 = private unnamed_addr constant [26 x i8] c"section name %s too long\0A\00", align 1
@.str.53 = private unnamed_addr constant [25 x i8] c"unknown section name %s\0A\00", align 1
@seg_nsects = internal unnamed_addr global i32 0, align 4
@.str.54 = private unnamed_addr constant [7 x i8] c"align=\00", align 1
@.str.55 = private unnamed_addr constant [67 x i8] c"unknown or missing alignment value \22%s\22 specified for section \22%s\22\00", align 1
@.str.56 = private unnamed_addr constant [57 x i8] c"alignment of %d (for section \22%s\22) is not a power of two\00", align 1
@sect_attribs = internal unnamed_addr constant [10 x %struct.macho_known_section_attr] [%struct.macho_known_section_attr { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.66, i32 0, i32 0), i32 0 }, %struct.macho_known_section_attr { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.67, i32 0, i32 0), i32 -2147482624 }, %struct.macho_known_section_attr { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.68, i32 0, i32 0), i32 1024 }, %struct.macho_known_section_attr { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.69, i32 0, i32 0), i32 1 }, %struct.macho_known_section_attr { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.70, i32 0, i32 0), i32 1 }, %struct.macho_known_section_attr { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.71, i32 0, i32 0), i32 -1879046913 }, %struct.macho_known_section_attr { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.72, i32 0, i32 0), i32 -2013264641 }, %struct.macho_known_section_attr { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.73, i32 0, i32 0), i32 -1610611457 }, %struct.macho_known_section_attr { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.74, i32 0, i32 0), i32 -2113927937 }, %struct.macho_known_section_attr zeroinitializer], align 16
@.str.57 = private unnamed_addr constant [44 x i8] c"unknown section attribute %s for section %s\00", align 1
@.str.58 = private unnamed_addr constant [48 x i8] c"inconsistent section attributes for section %s\0A\00", align 1
@known_sections = internal constant [8 x %struct.macho_known_section] [%struct.macho_known_section { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.48, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i32 0, i32 0), i32 -2147482624 }, %struct.macho_known_section { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.59, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.60, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.61, i32 0, i32 0), i32 0 }, %struct.macho_known_section { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.62, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.60, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.63, i32 0, i32 0), i32 0 }, %struct.macho_known_section { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.64, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.60, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.65, i32 0, i32 0), i32 1 }, %struct.macho_known_section { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i32 0, i32 0), i32 33554432 }, %struct.macho_known_section { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.16, i32 0, i32 0), i32 33554432 }, %struct.macho_known_section { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i32 0, i32 0), i32 33554432 }, %struct.macho_known_section { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.15, i32 0, i32 0), i32 33554432 }], align 16
@.str.59 = private unnamed_addr constant [6 x i8] c".data\00", align 1
@.str.60 = private unnamed_addr constant [7 x i8] c"__DATA\00", align 1
@.str.61 = private unnamed_addr constant [7 x i8] c"__data\00", align 1
@.str.62 = private unnamed_addr constant [8 x i8] c".rodata\00", align 1
@.str.63 = private unnamed_addr constant [8 x i8] c"__const\00", align 1
@.str.64 = private unnamed_addr constant [5 x i8] c".bss\00", align 1
@.str.65 = private unnamed_addr constant [6 x i8] c"__bss\00", align 1
@.str.66 = private unnamed_addr constant [5 x i8] c"data\00", align 1
@.str.67 = private unnamed_addr constant [5 x i8] c"code\00", align 1
@.str.68 = private unnamed_addr constant [6 x i8] c"mixed\00", align 1
@.str.69 = private unnamed_addr constant [4 x i8] c"bss\00", align 1
@.str.70 = private unnamed_addr constant [9 x i8] c"zerofill\00", align 1
@.str.71 = private unnamed_addr constant [14 x i8] c"no_dead_strip\00", align 1
@.str.72 = private unnamed_addr constant [13 x i8] c"live_support\00", align 1
@.str.73 = private unnamed_addr constant [18 x i8] c"strip_static_syms\00", align 1
@.str.74 = private unnamed_addr constant [6 x i8] c"debug\00", align 1
@head_flags = internal unnamed_addr global i32 0, align 4
@.str.75 = private unnamed_addr constant [11 x i8] c"!(seg & 1)\00", align 1
@extdefsyms = internal unnamed_addr global %struct.symbol** null, align 8
@undefsyms = internal unnamed_addr global %struct.symbol** null, align 8
@sectstab = internal unnamed_addr global %struct.section** null, align 8
@seg_vmsize = internal unnamed_addr global i64 0, align 8
@seg_filesize = internal unnamed_addr global i64 0, align 8
@head_ncmds = internal unnamed_addr global i32 0, align 4
@head_sizeofcmds = internal unnamed_addr global i32 0, align 4
@.str.76 = private unnamed_addr constant [40 x i8] c"MachO output is limited to %d sections\0A\00", align 1
@.str.77 = private unnamed_addr constant [13 x i8] c"no sections?\00", align 1
@ofile = external local_unnamed_addr global %struct._IO_FILE*, align 8
@.str.78 = private unnamed_addr constant [40 x i8] c"(s->flags & SECTION_TYPE) != S_ZEROFILL\00", align 1
@.str.79 = private unnamed_addr constant [23 x i8] c"s->pad != (uint32_t)-1\00", align 1
@rel_padcnt = internal unnamed_addr global i64 0, align 8
@.str.80 = private unnamed_addr constant [22 x i8] c"r->snum <= seg_nsects\00", align 1
@.str.81 = private unnamed_addr constant [24 x i8] c"sym->sect <= seg_nsects\00", align 1
@.str.82 = private unnamed_addr constant [6 x i8] c"macho\00", align 1
@optimizing = external local_unnamed_addr global %struct.optimization, align 4
@_pass_type = external local_unnamed_addr global i32, align 4
@.str.83 = private unnamed_addr constant [32 x i8] c"invalid symbol in NO_DEAD_STRIP\00", align 1
@.str.84 = private unnamed_addr constant [35 x i8] c"cannot parse contents after symbol\00", align 1
@nasm_ctype_tab = external local_unnamed_addr global [256 x i16], align 16
@.str.85 = private unnamed_addr constant [37 x i8] c"unknown symbol `%s' in no_dead_strip\00", align 1
@.str.86 = private unnamed_addr constant [36 x i8] c"symbol `%s' is external or absolute\00", align 1
@.str.87 = private unnamed_addr constant [37 x i8] c"Mach-O x86-64 dwarf for Darwin/MacOS\00", align 1
@macho64_fmt = internal unnamed_addr constant %struct.macho_fmt { i32 8, i32 -17958193, i32 16777223, i32 25, i32 32, i32 72, i32 80, i32 16, i32 6, i32 0, i32 1, i32 9, i8 1 }, align 4

; Function Attrs: nounwind ssp uwtable
define internal void @macho32_init() #0 {
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 bitcast (%struct.macho_fmt* @fmt to i8*), i8* align 4 bitcast (%struct.macho_fmt* @macho32_fmt to i8*), i64 52, i1 false)
  %1 = load i64, i64* bitcast (i8** @inname to i64*), align 8
  store i64 %1, i64* bitcast (i8** @module_name to i64*), align 8
  store %struct.section* null, %struct.section** @sects, align 8
  store %struct.section** @sects, %struct.section*** @sectstail, align 8
  store i32 -1, i32* getelementptr inbounds (%struct.section, %struct.section* @absolute_sect, i64 0, i32 2), align 8
  store %struct.symbol* null, %struct.symbol** @syms, align 8
  store %struct.symbol** @syms, %struct.symbol*** @symstail, align 8
  store i32 0, i32* @nsyms, align 4
  store i32 0, i32* @nlocalsym, align 4
  store i32 0, i32* @nextdefsym, align 4
  store i32 0, i32* @nundefsym, align 4
  store %struct.RAA* null, %struct.RAA** @extsyms, align 8
  %2 = tail call %struct.SAA* @saa_init(i64 1) #13
  store %struct.SAA* %2, %struct.SAA** @strs, align 8
  store %struct.RAA* null, %struct.RAA** @section_by_index, align 8
  tail call void @saa_wbytes(%struct.SAA* %2, i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @zero_buffer, i64 0, i64 0), i64 1) #13
  store i32 1, i32* @strslen, align 4
  %3 = tail call i32 @seg_alloc() #13
  %4 = add nsw i32 %3, 1
  store i32 %4, i32* @macho_tlvp_sect, align 4
  tail call void @backend_label(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i64 0, i64 0), i32 %4, i64 0) #13
  store i32 -1, i32* @macho_gotpcrel_sect, align 4
  ret void
}

declare void @null_reset() #1

declare void @nasm_do_legacy_output(%struct.out_data*) #1

; Function Attrs: nounwind ssp uwtable
define internal void @macho_output(i32, i8*, i32, i64, i32, i32) #0 {
  %7 = alloca [34 x i8], align 16
  %8 = alloca [16 x i8], align 16
  %9 = alloca %struct.section_info, align 8
  %10 = alloca i64, align 8
  %11 = alloca [2 x i8], align 1
  %12 = alloca [3 x i8], align 1
  %13 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #13
  %14 = and i32 %0, -1073741823
  %15 = icmp eq i32 %14, 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 16, i1 false)
  br i1 %15, label %16, label %23

16:                                               ; preds = %6
  %17 = load %struct.RAA*, %struct.RAA** @section_by_index, align 8
  %18 = ashr i32 %0, 1
  %19 = sext i32 %18 to i64
  %20 = tail call i8* @raa_read_ptr(%struct.RAA* %17, i64 %19) #13
  %21 = bitcast i8* %20 to %struct.section*
  %22 = icmp eq i8* %20, null
  br i1 %22, label %23, label %34

23:                                               ; preds = %6, %16
  tail call void (i32, i8*, ...) @nasm_warn(i32 2228224, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.20, i64 0, i64 0), i32 %0) #13
  %24 = getelementptr inbounds [34 x i8], [34 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 34, i8* nonnull %24) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 -86, i64 34, i1 false) #13
  %25 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %24, i64 34, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i64 0, i64 0)) #13
  %26 = call i8** @hash_find(%struct.hash_table* nonnull @section_by_name, i8* nonnull %24, %struct.hash_insert* null) #13
  %27 = icmp eq i8** %26, null
  br i1 %27, label %28, label %29

28:                                               ; preds = %23
  call void @llvm.lifetime.end.p0i8(i64 34, i8* nonnull %24) #13
  br label %33

29:                                               ; preds = %23
  %30 = bitcast i8** %26 to %struct.section**
  %31 = load %struct.section*, %struct.section** %30, align 8
  call void @llvm.lifetime.end.p0i8(i64 34, i8* nonnull %24) #13
  %32 = icmp eq %struct.section* %31, null
  br i1 %32, label %33, label %34

33:                                               ; preds = %28, %29
  call void (i8*, ...) @nasm_panic(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.23, i64 0, i64 0)) #14
  unreachable

34:                                               ; preds = %29, %16
  %35 = phi %struct.section* [ %21, %16 ], [ %31, %29 ]
  %36 = getelementptr inbounds %struct.section, %struct.section* %35, i64 0, i32 17
  %37 = load i32, i32* %36, align 8
  %38 = and i32 %37, 1024
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %50, label %40

40:                                               ; preds = %34
  %41 = bitcast %struct.section_info* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %41) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %41, i8 -86, i64 16, i1 false)
  %42 = getelementptr inbounds %struct.section, %struct.section* %35, i64 0, i32 13
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %struct.section_info, %struct.section_info* %9, i64 0, i32 0
  store i64 %43, i64* %44, align 8
  %45 = getelementptr inbounds %struct.section_info, %struct.section_info* %9, i64 0, i32 1
  store i32 %0, i32* %45, align 8
  %46 = load %struct.dfmt*, %struct.dfmt** @dfmt, align 8
  %47 = getelementptr inbounds %struct.dfmt, %struct.dfmt* %46, i64 0, i32 7
  %48 = load void (i32, i8*)*, void (i32, i8*)** %47, align 8
  call void %48(i32 0, i8* nonnull %41) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %41) #13
  %49 = load i32, i32* %36, align 8
  br label %50

50:                                               ; preds = %34, %40
  %51 = phi i32 [ %37, %34 ], [ %49, %40 ]
  %52 = and i32 %51, 255
  %53 = icmp eq i32 %52, 1
  %54 = icmp ne i32 %2, 1
  %55 = and i1 %54, %53
  br i1 %55, label %56, label %61

56:                                               ; preds = %50
  call void (i32, i8*, ...) @nasm_warn(i32 2228224, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.24, i64 0, i64 0)) #13
  call void (i32, i8*, ...) @nasm_warn(i32 2228224, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.25, i64 0, i64 0)) #13
  %57 = call i64 @realsize(i32 %2, i64 %3) #13
  %58 = getelementptr inbounds %struct.section, %struct.section* %35, i64 0, i32 13
  %59 = load i64, i64* %58, align 8
  %60 = add i64 %59, %57
  store i64 %60, i64* %58, align 8
  br label %254

61:                                               ; preds = %50
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 0, i64 16, i1 false)
  switch i32 %2, label %253 [
    i32 1, label %62
    i32 0, label %76
    i32 3, label %83
    i32 6, label %127
    i32 7, label %127
    i32 8, label %159
    i32 9, label %159
  ]

62:                                               ; preds = %61
  br i1 %53, label %72, label %63

63:                                               ; preds = %62
  %64 = getelementptr inbounds %struct.section, %struct.section* %35, i64 0, i32 11, i64 0
  %65 = getelementptr inbounds %struct.section, %struct.section* %35, i64 0, i32 10, i64 0
  call void (i32, i8*, ...) @nasm_warn(i32 2097152, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.26, i64 0, i64 0), i8* %64, i8* %65) #13
  %66 = getelementptr inbounds %struct.section, %struct.section* %35, i64 0, i32 1
  %67 = load %struct.SAA*, %struct.SAA** %66, align 8
  %68 = and i64 %3, 4294967295
  call void @saa_wbytes(%struct.SAA* %67, i8* null, i64 %68) #13
  %69 = getelementptr inbounds %struct.section, %struct.section* %35, i64 0, i32 13
  %70 = load i64, i64* %69, align 8
  %71 = add i64 %70, %68
  store i64 %71, i64* %69, align 8
  br label %254

72:                                               ; preds = %62
  %73 = getelementptr inbounds %struct.section, %struct.section* %35, i64 0, i32 13
  %74 = load i64, i64* %73, align 8
  %75 = add i64 %74, %3
  store i64 %75, i64* %73, align 8
  br label %254

76:                                               ; preds = %61
  %77 = getelementptr inbounds %struct.section, %struct.section* %35, i64 0, i32 1
  %78 = load %struct.SAA*, %struct.SAA** %77, align 8
  %79 = and i64 %3, 4294967295
  call void @saa_wbytes(%struct.SAA* %78, i8* %1, i64 %79) #13
  %80 = getelementptr inbounds %struct.section, %struct.section* %35, i64 0, i32 13
  %81 = load i64, i64* %80, align 8
  %82 = add i64 %81, %79
  store i64 %82, i64* %80, align 8
  br label %254

83:                                               ; preds = %61
  %84 = trunc i64 %3 to i32
  %85 = icmp slt i32 %84, 0
  %86 = sub nsw i32 0, %84
  %87 = select i1 %85, i32 %86, i32 %84
  %88 = bitcast i8* %1 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = icmp eq i32 %4, -1
  br i1 %90, label %118, label %91

91:                                               ; preds = %83
  %92 = and i32 %4, 1
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %95, label %94

94:                                               ; preds = %91
  call void (i32, i8*, ...) @nasm_error(i32 4, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.27, i64 0, i64 0)) #13
  br label %118

95:                                               ; preds = %91
  %96 = icmp eq i32 %5, -1
  br i1 %96, label %97, label %106

97:                                               ; preds = %95
  %98 = load i32, i32* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 0), align 4
  %99 = icmp eq i32 %98, 8
  %100 = icmp ne i32 %87, 8
  %101 = and i1 %100, %99
  br i1 %101, label %102, label %103

102:                                              ; preds = %97
  call void (i32, i8*, ...) @nasm_error(i32 4, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.28, i64 0, i64 0)) #13
  br label %118

103:                                              ; preds = %97
  %104 = call fastcc i64 @add_reloc(%struct.section* nonnull %35, i32 %4, i64 %89, i32 0, i32 %87)
  %105 = add nsw i64 %104, %89
  br label %118

106:                                              ; preds = %95
  %107 = load i32, i32* @macho_tlvp_sect, align 4
  %108 = icmp eq i32 %107, %5
  %109 = load i32, i32* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 0), align 4
  %110 = icmp ne i32 %109, 8
  %111 = and i1 %108, %110
  %112 = icmp eq i32 %87, %109
  %113 = and i1 %112, %111
  br i1 %113, label %114, label %117

114:                                              ; preds = %106
  %115 = call fastcc i64 @add_reloc(%struct.section* nonnull %35, i32 %4, i64 %89, i32 2, i32 %87)
  %116 = add nsw i64 %115, %89
  br label %118

117:                                              ; preds = %106
  call void (i32, i8*, ...) @nasm_error(i32 4, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.29, i64 0, i64 0)) #13
  br label %118

118:                                              ; preds = %83, %94, %114, %117, %102, %103
  %119 = phi i64 [ %89, %94 ], [ %89, %102 ], [ %105, %103 ], [ %116, %114 ], [ %89, %117 ], [ %89, %83 ]
  %120 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %120)
  store i64 %119, i64* %10, align 8
  %121 = zext i32 %87 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %13, i8* nonnull align 8 %120, i64 %121, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %120)
  %122 = getelementptr inbounds %struct.section, %struct.section* %35, i64 0, i32 1
  %123 = load %struct.SAA*, %struct.SAA** %122, align 8
  call void @saa_wbytes(%struct.SAA* %123, i8* nonnull %13, i64 %121) #13
  %124 = getelementptr inbounds %struct.section, %struct.section* %35, i64 0, i32 13
  %125 = load i64, i64* %124, align 8
  %126 = add i64 %125, %121
  store i64 %126, i64* %124, align 8
  br label %254

127:                                              ; preds = %61, %61
  %128 = bitcast i8* %1 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = sub i64 %129, %3
  %131 = icmp eq i32 %4, -1
  %132 = and i32 %4, 1
  %133 = icmp eq i32 %132, 0
  %134 = or i1 %131, %133
  br i1 %134, label %136, label %135

135:                                              ; preds = %127
  call void (i32, i8*, ...) @nasm_error(i32 4, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.27, i64 0, i64 0)) #13
  br label %148

136:                                              ; preds = %127
  %137 = load i32, i32* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 0), align 4
  %138 = icmp eq i32 %137, 8
  br i1 %138, label %139, label %140

139:                                              ; preds = %136
  call void (i32, i8*, ...) @nasm_error(i32 4, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.30, i64 0, i64 0)) #13
  br label %148

140:                                              ; preds = %136
  %141 = icmp eq i32 %5, -1
  br i1 %141, label %143, label %142

142:                                              ; preds = %140
  call void (i32, i8*, ...) @nasm_error(i32 4, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.29, i64 0, i64 0)) #13
  br label %148

143:                                              ; preds = %140
  %144 = icmp eq i32 %2, 6
  %145 = select i1 %144, i32 1, i32 2
  %146 = call fastcc i64 @add_reloc(%struct.section* nonnull %35, i32 %4, i64 %129, i32 1, i32 %145)
  %147 = add nsw i64 %146, %130
  br label %148

148:                                              ; preds = %135, %142, %143, %139
  %149 = phi i64 [ %130, %135 ], [ %130, %139 ], [ %130, %142 ], [ %147, %143 ]
  %150 = bitcast [16 x i8]* %8 to i16*
  %151 = trunc i64 %149 to i16
  store i16 %151, i16* %150, align 16
  %152 = icmp eq i32 %2, 6
  %153 = select i1 %152, i64 1, i64 2
  %154 = getelementptr inbounds %struct.section, %struct.section* %35, i64 0, i32 1
  %155 = load %struct.SAA*, %struct.SAA** %154, align 8
  call void @saa_wbytes(%struct.SAA* %155, i8* nonnull %13, i64 %153) #13
  %156 = getelementptr inbounds %struct.section, %struct.section* %35, i64 0, i32 13
  %157 = load i64, i64* %156, align 8
  %158 = add i64 %157, %153
  store i64 %158, i64* %156, align 8
  br label %254

159:                                              ; preds = %61, %61
  %160 = bitcast i8* %1 to i64*
  %161 = load i64, i64* %160, align 8
  %162 = sub i64 %161, %3
  %163 = icmp eq i32 %4, -1
  %164 = and i32 %4, 1
  %165 = icmp eq i32 %164, 0
  %166 = or i1 %163, %165
  br i1 %166, label %168, label %167

167:                                              ; preds = %159
  call void (i32, i8*, ...) @nasm_error(i32 4, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.27, i64 0, i64 0)) #13
  br label %239

168:                                              ; preds = %159
  %169 = icmp eq i32 %5, -1
  br i1 %169, label %170, label %202

170:                                              ; preds = %168
  %171 = load i32, i32* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 0), align 4
  %172 = icmp ne i32 %171, 8
  %173 = and i32 %51, 1024
  %174 = icmp eq i32 %173, 0
  %175 = or i1 %174, %172
  br i1 %175, label %239, label %176

176:                                              ; preds = %170
  %177 = getelementptr inbounds [2 x i8], [2 x i8]* %11, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %177) #13
  %178 = getelementptr inbounds [2 x i8], [2 x i8]* %11, i64 0, i64 1
  store i8 0, i8* %178, align 1
  store i8 0, i8* %177, align 1
  %179 = getelementptr inbounds %struct.section, %struct.section* %35, i64 0, i32 1
  %180 = load %struct.SAA*, %struct.SAA** %179, align 8
  %181 = getelementptr inbounds %struct.SAA, %struct.SAA* %180, i64 0, i32 5
  %182 = load i64, i64* %181, align 8
  %183 = icmp ugt i64 %182, 1
  br i1 %183, label %184, label %186, !prof !2

184:                                              ; preds = %176
  %185 = add i64 %182, -2
  call void @saa_fread(%struct.SAA* %180, i64 %185, i8* nonnull %177, i64 2) #13
  br label %189

186:                                              ; preds = %176
  %187 = icmp eq i64 %182, 1
  br i1 %187, label %188, label %189

188:                                              ; preds = %186
  call void @saa_fread(%struct.SAA* %180, i64 0, i8* %178, i64 1) #13
  br label %189

189:                                              ; preds = %186, %188, %184
  %190 = load i8, i8* %177, align 1
  %191 = icmp eq i8 %190, 15
  %192 = load i8, i8* %178, align 1
  br i1 %191, label %196, label %193

193:                                              ; preds = %189
  %194 = and i8 %192, -2
  %195 = icmp eq i8 %194, -24
  br i1 %195, label %199, label %200

196:                                              ; preds = %189
  %197 = and i8 %192, -16
  %198 = icmp eq i8 %197, -128
  br i1 %198, label %199, label %200

199:                                              ; preds = %196, %193
  br label %200

200:                                              ; preds = %193, %199, %196
  %201 = phi i32 [ 3, %199 ], [ 1, %196 ], [ 1, %193 ]
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %177) #13
  br label %239

202:                                              ; preds = %168
  %203 = load i32, i32* @macho_gotpcrel_sect, align 4
  %204 = icmp eq i32 %203, %5
  br i1 %204, label %205, label %232

205:                                              ; preds = %202
  %206 = and i32 %51, 1024
  %207 = icmp eq i32 %206, 0
  br i1 %207, label %239, label %208

208:                                              ; preds = %205
  %209 = getelementptr inbounds %struct.section, %struct.section* %35, i64 0, i32 1
  %210 = load %struct.SAA*, %struct.SAA** %209, align 8
  %211 = getelementptr inbounds %struct.SAA, %struct.SAA* %210, i64 0, i32 5
  %212 = load i64, i64* %211, align 8
  %213 = icmp ugt i64 %212, 2
  br i1 %213, label %214, label %239

214:                                              ; preds = %208
  %215 = getelementptr inbounds [3 x i8], [3 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %215) #13
  store i8 -86, i8* %215, align 1
  %216 = getelementptr inbounds [3 x i8], [3 x i8]* %12, i64 0, i64 1
  store i8 -86, i8* %216, align 1
  %217 = getelementptr inbounds [3 x i8], [3 x i8]* %12, i64 0, i64 2
  store i8 -86, i8* %217, align 1
  %218 = add i64 %212, -3
  call void @saa_fread(%struct.SAA* %210, i64 %218, i8* nonnull %215, i64 3) #13
  %219 = load i8, i8* %215, align 1
  %220 = and i8 %219, -8
  %221 = icmp eq i8 %220, 72
  %222 = load i8, i8* %216, align 1
  %223 = icmp eq i8 %222, -117
  %224 = and i1 %221, %223
  br i1 %224, label %225, label %230

225:                                              ; preds = %214
  %226 = load i8, i8* %217, align 1
  %227 = and i8 %226, -57
  %228 = icmp eq i8 %227, 5
  %229 = select i1 %228, i32 6, i32 5
  br label %230

230:                                              ; preds = %225, %214
  %231 = phi i32 [ 5, %214 ], [ %229, %225 ]
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %215) #13
  br label %239

232:                                              ; preds = %202
  %233 = load i32, i32* @macho_tlvp_sect, align 4
  %234 = icmp eq i32 %233, %5
  %235 = load i32, i32* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 0), align 4
  %236 = icmp eq i32 %235, 8
  %237 = and i1 %234, %236
  br i1 %237, label %239, label %238

238:                                              ; preds = %232
  call void (i32, i8*, ...) @nasm_error(i32 4, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.29, i64 0, i64 0)) #13
  br label %239

239:                                              ; preds = %170, %232, %205, %200, %238, %208, %230, %167
  %240 = phi i32 [ 1, %167 ], [ %201, %200 ], [ 1, %170 ], [ %231, %230 ], [ 5, %208 ], [ 5, %205 ], [ 1, %238 ], [ 2, %232 ]
  %241 = icmp eq i32 %2, 8
  %242 = select i1 %241, i32 4, i32 8
  %243 = call fastcc i64 @add_reloc(%struct.section* nonnull %35, i32 %4, i64 %161, i32 %240, i32 %242)
  %244 = add nsw i64 %162, %243
  %245 = bitcast [16 x i8]* %8 to i32*
  %246 = trunc i64 %244 to i32
  store i32 %246, i32* %245, align 16
  %247 = getelementptr inbounds %struct.section, %struct.section* %35, i64 0, i32 1
  %248 = load %struct.SAA*, %struct.SAA** %247, align 8
  %249 = zext i32 %242 to i64
  call void @saa_wbytes(%struct.SAA* %248, i8* nonnull %13, i64 %249) #13
  %250 = getelementptr inbounds %struct.section, %struct.section* %35, i64 0, i32 13
  %251 = load i64, i64* %250, align 8
  %252 = add i64 %251, %249
  store i64 %252, i64* %250, align 8
  br label %254

253:                                              ; preds = %61
  call void (i32, i8*, ...) @nasm_error(i32 4, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.31, i64 0, i64 0)) #13
  br label %254

254:                                              ; preds = %76, %118, %148, %239, %253, %72, %63, %56
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @macho_symdef(i8*, i32, i64, i32, i8*) #0 {
  %6 = icmp eq i32 %3, 3
  br i1 %6, label %7, label %34

7:                                                ; preds = %5
  %8 = icmp eq i8* %4, null
  br i1 %8, label %33, label %9

9:                                                ; preds = %7
  %10 = tail call i64 @strcspn(i8* nonnull %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i64 0, i64 0)) #15
  %11 = shl i64 %10, 32
  %12 = ashr exact i64 %11, 32
  %13 = tail call i32 @strncasecmp(i8* nonnull %4, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.41, i64 0, i64 0), i64 %12) #15
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %33

15:                                               ; preds = %9
  %16 = load %struct.symbol*, %struct.symbol** @syms, align 8
  %17 = icmp eq %struct.symbol* %16, null
  br i1 %17, label %33, label %18

18:                                               ; preds = %15, %29
  %19 = phi %struct.symbol* [ %31, %29 ], [ %16, %15 ]
  %20 = getelementptr inbounds %struct.symbol, %struct.symbol* %19, i64 0, i32 2
  %21 = load i8*, i8** %20, align 8
  %22 = tail call i32 @strcmp(i8* %0, i8* %21) #15
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %29

24:                                               ; preds = %18
  %25 = getelementptr inbounds %struct.symbol, %struct.symbol* %19, i64 0, i32 6
  %26 = load i8, i8* %25, align 4
  %27 = and i8 %26, 16
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %33, label %143

29:                                               ; preds = %18
  %30 = getelementptr inbounds %struct.symbol, %struct.symbol* %19, i64 0, i32 1
  %31 = load %struct.symbol*, %struct.symbol** %30, align 8
  %32 = icmp eq %struct.symbol* %31, null
  br i1 %32, label %33, label %18

33:                                               ; preds = %29, %15, %24, %9, %7
  tail call void (i32, i8*, ...) @nasm_error(i32 4, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.42, i64 0, i64 0)) #13
  br label %143

34:                                               ; preds = %5
  %35 = load i8, i8* %0, align 1
  %36 = icmp eq i8 %35, 46
  br i1 %36, label %37, label %52

37:                                               ; preds = %34
  %38 = getelementptr inbounds i8, i8* %0, i64 1
  %39 = load i8, i8* %38, align 1
  %40 = icmp eq i8 %39, 46
  br i1 %40, label %41, label %52

41:                                               ; preds = %37
  %42 = getelementptr inbounds i8, i8* %0, i64 2
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, 64
  br i1 %44, label %52, label %45

45:                                               ; preds = %41
  %46 = tail call i32 @strcmp(i8* %0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.43, i64 0, i64 0)) #15
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %143, label %48

48:                                               ; preds = %45
  %49 = tail call i32 @strcmp(i8* %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i64 0, i64 0)) #15
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %143, label %51

51:                                               ; preds = %48
  tail call void (i32, i8*, ...) @nasm_error(i32 4, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.44, i64 0, i64 0), i8* %0) #13
  br label %143

52:                                               ; preds = %41, %37, %34
  %53 = tail call noalias i8* @nasm_zalloc(i64 96) #16
  %54 = load i8**, i8*** bitcast (%struct.symbol*** @symstail to i8***), align 8
  store i8* %53, i8** %54, align 8
  %55 = getelementptr inbounds i8, i8* %53, i64 64
  %56 = bitcast i8* %55 to %struct.symbol**
  store %struct.symbol* null, %struct.symbol** %56, align 8
  store i8* %55, i8** bitcast (%struct.symbol*** @symstail to i8**), align 8
  %57 = getelementptr inbounds i8, i8* %53, i64 72
  %58 = bitcast i8* %57 to i8**
  store i8* %0, i8** %58, align 8
  %59 = load i32, i32* @strslen, align 4
  %60 = getelementptr inbounds i8, i8* %53, i64 88
  %61 = bitcast i8* %60 to i32*
  store i32 %59, i32* %61, align 8
  %62 = getelementptr inbounds i8, i8* %53, i64 92
  store i8 0, i8* %62, align 4
  %63 = getelementptr inbounds i8, i8* %53, i64 94
  %64 = bitcast i8* %63 to i16*
  store i16 0, i16* %64, align 2
  %65 = bitcast i8* %53 to %struct.rbtree*
  %66 = bitcast i8* %53 to i64*
  store i64 %2, i64* %66, align 8
  %67 = getelementptr inbounds i8, i8* %53, i64 32
  %68 = bitcast i8* %67 to %struct.rbtree*
  %69 = bitcast i8* %67 to i64*
  store i64 %2, i64* %69, align 8
  %70 = getelementptr inbounds i8, i8* %53, i64 80
  %71 = bitcast i8* %70 to i32*
  store i32 -1, i32* %71, align 8
  %72 = icmp ne i32 %3, 0
  br i1 %72, label %73, label %86

73:                                               ; preds = %52
  store i8 1, i8* %62, align 4
  %74 = icmp eq i32 %3, 1
  br i1 %74, label %75, label %86

75:                                               ; preds = %73
  %76 = icmp eq i8* %4, null
  br i1 %76, label %86, label %77

77:                                               ; preds = %75
  %78 = tail call i64 @strcspn(i8* nonnull %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i64 0, i64 0)) #15
  %79 = shl i64 %78, 32
  %80 = ashr exact i64 %79, 32
  %81 = tail call i32 @strncasecmp(i8* nonnull %4, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.41, i64 0, i64 0), i64 %80) #15
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %84

83:                                               ; preds = %77
  store i8 17, i8* %62, align 4
  br label %86

84:                                               ; preds = %77
  %85 = trunc i64 %78 to i32
  tail call void (i32, i8*, ...) @nasm_error(i32 4, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.45, i64 0, i64 0), i32 %85, i8* nonnull %4) #13
  br label %86

86:                                               ; preds = %52, %75, %84, %83, %73
  %87 = phi i1 [ false, %73 ], [ true, %83 ], [ true, %84 ], [ true, %75 ], [ false, %52 ]
  %88 = load i32, i32* @nsyms, align 4
  store i32 %88, i32* %71, align 8
  %89 = icmp eq i32 %1, -1
  br i1 %89, label %90, label %93

90:                                               ; preds = %86
  %91 = load i8, i8* %62, align 4
  %92 = or i8 %91, 2
  store i8 %92, i8* %62, align 4
  br label %126

93:                                               ; preds = %86
  %94 = and i32 %1, -1073741823
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %99, label %96

96:                                               ; preds = %93
  %97 = load i8, i8* %62, align 4
  %98 = or i8 %97, 14
  store i8 %98, i8* %62, align 4
  br label %115

99:                                               ; preds = %93
  %100 = load %struct.RAA*, %struct.RAA** @section_by_index, align 8
  %101 = ashr i32 %1, 1
  %102 = sext i32 %101 to i64
  %103 = tail call i8* @raa_read_ptr(%struct.RAA* %100, i64 %102) #13
  %104 = load i8, i8* %62, align 4
  %105 = or i8 %104, 14
  store i8 %105, i8* %62, align 4
  %106 = icmp eq i8* %103, null
  br i1 %106, label %107, label %109

107:                                              ; preds = %99
  %108 = load i32, i32* @nsyms, align 4
  br label %115

109:                                              ; preds = %99
  %110 = bitcast i8* %103 to %struct.section*
  %111 = getelementptr inbounds i8, i8* %103, i64 24
  %112 = bitcast i8* %111 to i32*
  %113 = load i32, i32* %112, align 8
  %114 = trunc i32 %113 to i8
  br label %126

115:                                              ; preds = %107, %96
  %116 = phi i32 [ %108, %107 ], [ %88, %96 ]
  %117 = getelementptr inbounds i8, i8* %53, i64 93
  store i8 0, i8* %117, align 1
  %118 = load %struct.RAA*, %struct.RAA** @extsyms, align 8
  %119 = sext i32 %1 to i64
  %120 = zext i32 %116 to i64
  %121 = tail call %struct.RAA* @raa_write(%struct.RAA* %118, i64 %119, i64 %120) #13
  store %struct.RAA* %121, %struct.RAA** @extsyms, align 8
  %122 = add i32 %3, -1
  %123 = icmp ult i32 %122, 2
  br i1 %123, label %125, label %124

124:                                              ; preds = %115
  tail call void (i8*, ...) @nasm_panic(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.46, i64 0, i64 0), i32 %1, i32 %3) #14
  unreachable

125:                                              ; preds = %115
  store i8 1, i8* %62, align 4
  br label %137

126:                                              ; preds = %90, %109
  %127 = phi i8 [ 0, %90 ], [ %114, %109 ]
  %128 = phi %struct.section* [ @absolute_sect, %90 ], [ %110, %109 ]
  %129 = getelementptr inbounds i8, i8* %53, i64 93
  store i8 %127, i8* %129, align 1
  %130 = getelementptr inbounds %struct.section, %struct.section* %128, i64 0, i32 6, i64 0
  %131 = load %struct.rbtree*, %struct.rbtree** %130, align 8
  %132 = tail call %struct.rbtree* @rb_insert(%struct.rbtree* %131, %struct.rbtree* %65) #13
  store %struct.rbtree* %132, %struct.rbtree** %130, align 8
  br i1 %72, label %133, label %137

133:                                              ; preds = %126
  %134 = getelementptr inbounds %struct.section, %struct.section* %128, i64 0, i32 6, i64 1
  %135 = load %struct.rbtree*, %struct.rbtree** %134, align 8
  %136 = tail call %struct.rbtree* @rb_insert(%struct.rbtree* %135, %struct.rbtree* %68) #13
  store %struct.rbtree* %136, %struct.rbtree** %134, align 8
  br label %137

137:                                              ; preds = %125, %126, %133
  %138 = load i32, i32* @nsyms, align 4
  %139 = add i32 %138, 1
  store i32 %139, i32* @nsyms, align 4
  %140 = icmp eq i8* %4, null
  %141 = or i1 %140, %87
  br i1 %141, label %143, label %142

142:                                              ; preds = %137
  tail call void (i32, i8*, ...) @nasm_error(i32 4, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.47, i64 0, i64 0)) #13
  br label %143

143:                                              ; preds = %142, %137, %51, %45, %48, %24, %33
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @macho_section(i8*, i32* nocapture) #0 {
  %3 = alloca %struct.hash_insert, align 8
  %4 = alloca [34 x i8], align 16
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #13
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %5, align 8
  %8 = icmp eq i8* %0, null
  br i1 %8, label %9, label %12

9:                                                ; preds = %2
  %10 = load i32, i32* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 0), align 4
  %11 = shl i32 %10, 3
  store i32 %11, i32* %1, align 4
  store i8* null, i8** %5, align 8
  br label %14

12:                                               ; preds = %2
  store i8* %0, i8** %5, align 8
  %13 = call i8* @strsep(i8** nonnull %5, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i64 0, i64 0)) #13
  br label %14

14:                                               ; preds = %12, %9
  %15 = phi i8* [ %13, %12 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.48, i64 0, i64 0), %9 ]
  %16 = call i8* @strchr(i8* %15, i32 44) #15
  %17 = icmp ne i8* %16, null
  br i1 %17, label %18, label %38

18:                                               ; preds = %14
  store i8 0, i8* %16, align 1
  %19 = getelementptr inbounds i8, i8* %16, i64 1
  %20 = call i64 @strlen(i8* %15) #15
  %21 = trunc i64 %20 to i32
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %24

23:                                               ; preds = %18
  call void (i32, i8*, ...) @nasm_error(i32 4, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.49, i64 0, i64 0)) #13
  br label %27

24:                                               ; preds = %18
  %25 = icmp sgt i32 %21, 16
  br i1 %25, label %26, label %27

26:                                               ; preds = %24
  call void (i32, i8*, ...) @nasm_error(i32 4, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.50, i64 0, i64 0), i8* %15) #13
  br label %27

27:                                               ; preds = %24, %26, %23
  %28 = call i64 @strlen(i8* %19) #15
  %29 = trunc i64 %28 to i32
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %32

31:                                               ; preds = %27
  call void (i32, i8*, ...) @nasm_error(i32 4, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.51, i64 0, i64 0)) #13
  br label %35

32:                                               ; preds = %27
  %33 = icmp sgt i32 %29, 16
  br i1 %33, label %34, label %35

34:                                               ; preds = %32
  call void (i32, i8*, ...) @nasm_error(i32 4, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.52, i64 0, i64 0), i8* %19) #13
  br label %35

35:                                               ; preds = %32, %34, %31
  %36 = call fastcc %struct.macho_known_section* @lookup_known_section(i8* %19, i1 zeroext true)
  %37 = icmp eq %struct.macho_known_section* %36, null
  br i1 %37, label %53, label %47

38:                                               ; preds = %14
  %39 = call fastcc %struct.macho_known_section* @lookup_known_section(i8* %15, i1 zeroext false)
  %40 = icmp eq %struct.macho_known_section* %39, null
  br i1 %40, label %41, label %42

41:                                               ; preds = %38
  call void (i32, i8*, ...) @nasm_error(i32 4, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.53, i64 0, i64 0), i8* %15) #13
  br label %199

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.macho_known_section, %struct.macho_known_section* %39, i64 0, i32 1
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr inbounds %struct.macho_known_section, %struct.macho_known_section* %39, i64 0, i32 2
  %46 = load i8*, i8** %45, align 8
  br label %47

47:                                               ; preds = %35, %42
  %48 = phi %struct.macho_known_section* [ %39, %42 ], [ %36, %35 ]
  %49 = phi i8* [ %46, %42 ], [ %19, %35 ]
  %50 = phi i8* [ %44, %42 ], [ %15, %35 ]
  %51 = getelementptr inbounds %struct.macho_known_section, %struct.macho_known_section* %48, i64 0, i32 3
  %52 = load i32, i32* %51, align 8
  br label %53

53:                                               ; preds = %47, %35
  %54 = phi i8* [ %19, %35 ], [ %49, %47 ]
  %55 = phi i8* [ %15, %35 ], [ %50, %47 ]
  %56 = phi i32 [ 0, %35 ], [ %52, %47 ]
  %57 = bitcast %struct.hash_insert* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %57) #13
  %58 = getelementptr inbounds [34 x i8], [34 x i8]* %4, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %57, i8 -86, i64 48, i1 false) #13
  call void @llvm.lifetime.start.p0i8(i64 34, i8* nonnull %58) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %58, i8 -86, i64 34, i1 false) #13
  %59 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %58, i64 34, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.18, i64 0, i64 0), i8* %55, i8* %54) #13
  %60 = call i8** @hash_find(%struct.hash_table* nonnull @section_by_name, i8* nonnull %58, %struct.hash_insert* nonnull %3) #13
  %61 = icmp eq i8** %60, null
  br i1 %61, label %64, label %62

62:                                               ; preds = %53
  %63 = load i8*, i8** %60, align 8
  br label %82

64:                                               ; preds = %53
  %65 = call noalias i8* @nasm_zalloc(i64 168) #16
  %66 = getelementptr inbounds i8, i8* %65, i64 111
  %67 = call i8* @strncpy(i8* %66, i8* %55, i64 16) #13
  %68 = getelementptr inbounds i8, i8* %65, i64 95
  %69 = call i8* @strncpy(i8* %68, i8* %54, i64 16) #13
  %70 = getelementptr inbounds i8, i8* %65, i64 61
  %71 = call i8* @strncpy(i8* %70, i8* nonnull %58, i64 34) #13
  %72 = call i8** @hash_add(%struct.hash_insert* nonnull %3, i8* %70, i8* %65) #13
  %73 = call i32 @seg_alloc() #13
  %74 = getelementptr inbounds i8, i8* %65, i64 20
  %75 = bitcast i8* %74 to i32*
  store i32 %73, i32* %75, align 4
  %76 = getelementptr inbounds i8, i8* %65, i64 16
  %77 = bitcast i8* %76 to i32*
  store i32 %73, i32* %77, align 8
  %78 = load %struct.RAA*, %struct.RAA** @section_by_index, align 8
  %79 = ashr i32 %73, 1
  %80 = sext i32 %79 to i64
  %81 = call %struct.RAA* @raa_write_ptr(%struct.RAA* %78, i64 %80, i8* %65) #13
  store %struct.RAA* %81, %struct.RAA** @section_by_index, align 8
  br label %82

82:                                               ; preds = %62, %64
  %83 = phi i8* [ %63, %62 ], [ %65, %64 ]
  call void @llvm.lifetime.end.p0i8(i64 34, i8* nonnull %58) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %57) #13
  %84 = getelementptr inbounds i8, i8* %83, i64 8
  %85 = bitcast i8* %84 to %struct.SAA**
  %86 = load %struct.SAA*, %struct.SAA** %85, align 8
  %87 = icmp eq %struct.SAA* %86, null
  br i1 %87, label %88, label %106

88:                                               ; preds = %82
  %89 = load i8**, i8*** bitcast (%struct.section*** @sectstail to i8***), align 8
  store i8* %83, i8** %89, align 8
  store i8* %83, i8** bitcast (%struct.section*** @sectstail to i8**), align 8
  %90 = call %struct.SAA* @saa_init(i64 1) #13
  store %struct.SAA* %90, %struct.SAA** %85, align 8
  %91 = load i32, i32* @seg_nsects, align 4
  %92 = add i32 %91, 1
  store i32 %92, i32* @seg_nsects, align 4
  %93 = getelementptr inbounds i8, i8* %83, i64 24
  %94 = bitcast i8* %93 to i32*
  store i32 %92, i32* %94, align 8
  %95 = getelementptr inbounds i8, i8* %83, i64 56
  %96 = bitcast i8* %95 to i32*
  store i32 -1, i32* %96, align 8
  %97 = getelementptr inbounds i8, i8* %83, i64 152
  %98 = bitcast i8* %97 to i32*
  store i32 -1, i32* %98, align 8
  %99 = getelementptr inbounds i8, i8* %83, i64 60
  store i8 0, i8* %99, align 4
  %100 = getelementptr inbounds i8, i8* %83, i64 136
  %101 = bitcast i8* %100 to <2 x i64>*
  store <2 x i64> <i64 0, i64 -1>, <2 x i64>* %101, align 8
  %102 = getelementptr inbounds i8, i8* %83, i64 156
  %103 = bitcast i8* %102 to i32*
  store i32 0, i32* %103, align 4
  %104 = getelementptr inbounds i8, i8* %83, i64 160
  %105 = bitcast i8* %104 to i32*
  store i32 %56, i32* %105, align 8
  br label %106

106:                                              ; preds = %88, %82
  br i1 %17, label %107, label %108

107:                                              ; preds = %106
  store i8 44, i8* %16, align 1
  br label %108

108:                                              ; preds = %107, %106
  %109 = getelementptr inbounds i8, i8* %83, i64 60
  %110 = load i8, i8* %109, align 4, !range !3
  %111 = icmp ne i8 %110, 0
  %112 = or i1 %17, %111
  %113 = zext i1 %112 to i8
  store i8 %113, i8* %109, align 4
  %114 = bitcast i8** %6 to i8*
  %115 = getelementptr inbounds i8, i8* %83, i64 56
  %116 = bitcast i8* %115 to i32*
  br label %117

117:                                              ; preds = %163, %108
  %118 = phi i32 [ %173, %163 ], [ -2147482369, %108 ]
  br label %119

119:                                              ; preds = %223, %117
  br label %120

120:                                              ; preds = %119, %126
  %121 = load i8*, i8** %5, align 8
  %122 = icmp eq i8* %121, null
  br i1 %122, label %174, label %123

123:                                              ; preds = %120
  %124 = call i8* @strsep(i8** nonnull %5, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i64 0, i64 0)) #13
  %125 = icmp eq i8* %124, null
  br i1 %125, label %174, label %126

126:                                              ; preds = %123
  %127 = load i8, i8* %124, align 1
  %128 = icmp eq i8 %127, 0
  br i1 %128, label %120, label %129

129:                                              ; preds = %126
  %130 = call i32 @strncasecmp(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.54, i64 0, i64 0), i8* nonnull %124, i64 6) #15
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %135, label %132

132:                                              ; preds = %129
  %133 = call i32 @strcasecmp(i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.66, i64 0, i64 0), i8* nonnull %124) #15
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %163, label %160

135:                                              ; preds = %129
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %114) #13
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %136 = getelementptr inbounds i8, i8* %124, i64 6
  %137 = call i64 @strtoul(i8* %136, i8** nonnull %6, i32 0) #13
  %138 = trunc i64 %137 to i32
  %139 = call i32 @llvm.ctpop.i32(i32 %138) #13, !range !4
  %140 = icmp ugt i32 %139, 1
  br i1 %140, label %146, label %141, !prof !5

141:                                              ; preds = %135
  %142 = icmp eq i32 %138, 0
  br i1 %142, label %146, label %143

143:                                              ; preds = %141
  %144 = call i32 @llvm.ctlz.i32(i32 %138, i1 true) #13, !range !4
  %145 = xor i32 %144, 31
  br label %146

146:                                              ; preds = %135, %141, %143
  %147 = phi i32 [ -1, %135 ], [ %145, %143 ], [ 0, %141 ]
  %148 = load i8*, i8** %6, align 8
  %149 = load i8, i8* %148, align 1
  %150 = icmp eq i8 %149, 0
  br i1 %150, label %152, label %151

151:                                              ; preds = %146
  call void (i32, i8*, ...) @nasm_error(i32 4, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.55, i64 0, i64 0), i8* %136, i8* %15) #13
  br label %155

152:                                              ; preds = %146
  %153 = icmp slt i32 %147, 0
  br i1 %153, label %154, label %155

154:                                              ; preds = %152
  call void (i32, i8*, ...) @nasm_error(i32 4, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.56, i64 0, i64 0), i32 %138, i8* %15) #13
  br label %155

155:                                              ; preds = %152, %154, %151
  %156 = load i32, i32* %116, align 8
  %157 = icmp slt i32 %156, %147
  br i1 %157, label %158, label %159

158:                                              ; preds = %155
  store i32 %147, i32* %116, align 8
  br label %159

159:                                              ; preds = %158, %155
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %114) #13
  br label %223

160:                                              ; preds = %132
  %161 = call i32 @strcasecmp(i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.67, i64 0, i64 0), i8* nonnull %124) #15
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %163, label %201

163:                                              ; preds = %219, %216, %213, %210, %207, %204, %201, %160, %132
  %164 = phi %struct.macho_known_section_attr* [ getelementptr inbounds ([10 x %struct.macho_known_section_attr], [10 x %struct.macho_known_section_attr]* @sect_attribs, i64 0, i64 0), %132 ], [ getelementptr inbounds ([10 x %struct.macho_known_section_attr], [10 x %struct.macho_known_section_attr]* @sect_attribs, i64 0, i64 1), %160 ], [ getelementptr inbounds ([10 x %struct.macho_known_section_attr], [10 x %struct.macho_known_section_attr]* @sect_attribs, i64 0, i64 2), %201 ], [ getelementptr inbounds ([10 x %struct.macho_known_section_attr], [10 x %struct.macho_known_section_attr]* @sect_attribs, i64 0, i64 3), %204 ], [ getelementptr inbounds ([10 x %struct.macho_known_section_attr], [10 x %struct.macho_known_section_attr]* @sect_attribs, i64 0, i64 4), %207 ], [ getelementptr inbounds ([10 x %struct.macho_known_section_attr], [10 x %struct.macho_known_section_attr]* @sect_attribs, i64 0, i64 5), %210 ], [ getelementptr inbounds ([10 x %struct.macho_known_section_attr], [10 x %struct.macho_known_section_attr]* @sect_attribs, i64 0, i64 6), %213 ], [ getelementptr inbounds ([10 x %struct.macho_known_section_attr], [10 x %struct.macho_known_section_attr]* @sect_attribs, i64 0, i64 7), %216 ], [ getelementptr inbounds ([10 x %struct.macho_known_section_attr], [10 x %struct.macho_known_section_attr]* @sect_attribs, i64 0, i64 8), %219 ]
  %165 = getelementptr inbounds %struct.macho_known_section_attr, %struct.macho_known_section_attr* %164, i64 0, i32 1
  %166 = load i32, i32* %165, align 8
  %167 = and i32 %166, -2147482369
  %168 = icmp eq i32 %167, -2147482369
  %169 = and i32 %118, 2147482368
  %170 = or i32 %167, %169
  %171 = select i1 %168, i32 %118, i32 %170
  %172 = and i32 %166, 2147482368
  %173 = or i32 %171, %172
  br label %117

174:                                              ; preds = %123, %120
  %175 = and i32 %118, -2147482369
  %176 = icmp eq i32 %175, -2147482369
  br i1 %176, label %189, label %177

177:                                              ; preds = %174
  %178 = getelementptr inbounds i8, i8* %83, i64 160
  %179 = bitcast i8* %178 to i32*
  %180 = load i32, i32* %179, align 8
  br i1 %87, label %186, label %181

181:                                              ; preds = %177
  %182 = xor i32 %180, %118
  %183 = and i32 %182, -2147482369
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %186, label %185

185:                                              ; preds = %181
  call void (i32, i8*, ...) @nasm_error(i32 4, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.58, i64 0, i64 0), i8* %15) #13
  br label %195

186:                                              ; preds = %177, %181
  %187 = and i32 %180, 2147482368
  %188 = or i32 %187, %118
  store i32 %188, i32* %179, align 8
  br label %195

189:                                              ; preds = %174
  %190 = and i32 %118, 2147482368
  %191 = getelementptr inbounds i8, i8* %83, i64 160
  %192 = bitcast i8* %191 to i32*
  %193 = load i32, i32* %192, align 8
  %194 = or i32 %193, %190
  store i32 %194, i32* %192, align 8
  br label %195

195:                                              ; preds = %185, %186, %189
  %196 = getelementptr inbounds i8, i8* %83, i64 20
  %197 = bitcast i8* %196 to i32*
  %198 = load i32, i32* %197, align 4
  br label %199

199:                                              ; preds = %195, %41
  %200 = phi i32 [ %198, %195 ], [ -1, %41 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #13
  ret i32 %200

201:                                              ; preds = %160
  %202 = call i32 @strcasecmp(i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.68, i64 0, i64 0), i8* nonnull %124) #15
  %203 = icmp eq i32 %202, 0
  br i1 %203, label %163, label %204

204:                                              ; preds = %201
  %205 = call i32 @strcasecmp(i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.69, i64 0, i64 0), i8* nonnull %124) #15
  %206 = icmp eq i32 %205, 0
  br i1 %206, label %163, label %207

207:                                              ; preds = %204
  %208 = call i32 @strcasecmp(i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.70, i64 0, i64 0), i8* nonnull %124) #15
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %163, label %210

210:                                              ; preds = %207
  %211 = call i32 @strcasecmp(i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.71, i64 0, i64 0), i8* nonnull %124) #15
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %163, label %213

213:                                              ; preds = %210
  %214 = call i32 @strcasecmp(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.72, i64 0, i64 0), i8* nonnull %124) #15
  %215 = icmp eq i32 %214, 0
  br i1 %215, label %163, label %216

216:                                              ; preds = %213
  %217 = call i32 @strcasecmp(i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str.73, i64 0, i64 0), i8* nonnull %124) #15
  %218 = icmp eq i32 %217, 0
  br i1 %218, label %163, label %219

219:                                              ; preds = %216
  %220 = call i32 @strcasecmp(i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.74, i64 0, i64 0), i8* nonnull %124) #15
  %221 = icmp eq i32 %220, 0
  br i1 %221, label %163, label %222

222:                                              ; preds = %219
  call void (i32, i8*, ...) @nasm_error(i32 4, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.57, i64 0, i64 0), i8* nonnull %124, i8* %15) #13
  br label %223

223:                                              ; preds = %222, %159
  br label %119
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @macho_herelabel(i8* nocapture readnone, i32, i32, i32* nocapture, i8* nocapture) #0 {
  %6 = load i32, i32* @head_flags, align 4
  %7 = and i32 %6, 8192
  %8 = icmp ne i32 %7, 0
  %9 = icmp ne i32 %1, 0
  %10 = and i1 %9, %8
  %11 = and i32 %2, -1073741823
  %12 = icmp eq i32 %11, 0
  %13 = and i1 %12, %10
  br i1 %13, label %14, label %33

14:                                               ; preds = %5
  %15 = load %struct.RAA*, %struct.RAA** @section_by_index, align 8
  %16 = ashr i32 %2, 1
  %17 = sext i32 %16 to i64
  %18 = tail call i8* @raa_read_ptr(%struct.RAA* %15, i64 %17) #13
  %19 = icmp eq i8* %18, null
  br i1 %19, label %33, label %20

20:                                               ; preds = %14
  %21 = load i32, i32* %3, align 4
  %22 = icmp eq i32 %21, -1
  br i1 %22, label %23, label %29

23:                                               ; preds = %20
  %24 = tail call i32 @seg_alloc() #13
  store i32 %24, i32* %3, align 4
  %25 = load %struct.RAA*, %struct.RAA** @section_by_index, align 8
  %26 = ashr i32 %24, 1
  %27 = sext i32 %26 to i64
  %28 = tail call %struct.RAA* @raa_write_ptr(%struct.RAA* %25, i64 %27, i8* nonnull %18) #13
  store %struct.RAA* %28, %struct.RAA** @section_by_index, align 8
  br label %29

29:                                               ; preds = %23, %20
  %30 = phi i32 [ %24, %23 ], [ %21, %20 ]
  %31 = getelementptr inbounds i8, i8* %18, i64 20
  %32 = bitcast i8* %31 to i32*
  store i32 %30, i32* %32, align 4
  store i8 1, i8* %4, align 1
  br label %33

33:                                               ; preds = %5, %14, %29
  %34 = phi i32 [ %30, %29 ], [ %2, %5 ], [ %2, %14 ]
  ret i32 %34
}

; Function Attrs: nounwind ssp uwtable
define internal void @macho_sectalign(i32, i32) #0 {
  %3 = and i32 %0, 1
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %6, label %5, !prof !2

5:                                                ; preds = %2
  tail call void @nasm_assert_failed(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.13, i64 0, i64 0), i32 1109, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.75, i64 0, i64 0)) #14
  unreachable

6:                                                ; preds = %2
  %7 = and i32 %0, -1073741823
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %26

9:                                                ; preds = %6
  %10 = load %struct.RAA*, %struct.RAA** @section_by_index, align 8
  %11 = ashr i32 %0, 1
  %12 = sext i32 %11 to i64
  %13 = tail call i8* @raa_read_ptr(%struct.RAA* %10, i64 %12) #13
  %14 = icmp ne i8* %13, null
  %15 = tail call i32 @llvm.ctpop.i32(i32 %1), !range !4
  %16 = icmp eq i32 %15, 1
  %17 = and i1 %16, %14
  br i1 %17, label %18, label %26

18:                                               ; preds = %9
  %19 = tail call i32 @llvm.ctlz.i32(i32 %1, i1 true) #13, !range !4
  %20 = xor i32 %19, 31
  %21 = getelementptr inbounds i8, i8* %13, i64 56
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = icmp slt i32 %23, %20
  br i1 %24, label %25, label %26

25:                                               ; preds = %18
  store i32 %20, i32* %22, align 8
  br label %26

26:                                               ; preds = %6, %18, %25, %9
  ret void
}

declare i32 @null_segbase(i32) #1

declare i32 @null_directive(i32, i8*) #1

; Function Attrs: nounwind ssp uwtable
define internal void @macho_cleanup() #0 {
  %1 = alloca %union.offset, align 8
  %2 = alloca [34 x i8], align 16
  %3 = load %struct.dfmt*, %struct.dfmt** @dfmt, align 8
  %4 = getelementptr inbounds %struct.dfmt, %struct.dfmt* %3, i64 0, i32 8
  %5 = load void ()*, void ()** %4, align 8
  tail call void %5() #13
  store i32 0, i32* @nsyms, align 4
  store i32 1, i32* @strslen, align 4
  %6 = load %struct.symbol*, %struct.symbol** @syms, align 8
  %7 = icmp eq %struct.symbol* %6, null
  br i1 %7, label %52, label %8

8:                                                ; preds = %0, %47
  %9 = phi i32 [ %48, %47 ], [ 1, %0 ]
  %10 = phi %struct.symbol* [ %50, %47 ], [ %6, %0 ]
  %11 = getelementptr inbounds %struct.symbol, %struct.symbol* %10, i64 0, i32 6
  %12 = load i8, i8* %11, align 4
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %8
  store i8 1, i8* %11, align 4
  br label %28

15:                                               ; preds = %8
  %16 = zext i8 %12 to i32
  %17 = and i32 %16, 1
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %25

19:                                               ; preds = %15
  %20 = load i32, i32* @nsyms, align 4
  %21 = getelementptr inbounds %struct.symbol, %struct.symbol* %10, i64 0, i32 4
  store i32 %20, i32* %21, align 4
  %22 = add i32 %20, 1
  store i32 %22, i32* @nsyms, align 4
  %23 = load i32, i32* @nlocalsym, align 4
  %24 = add i32 %23, 1
  store i32 %24, i32* @nlocalsym, align 4
  br label %47

25:                                               ; preds = %15
  %26 = and i32 %16, 14
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %29

28:                                               ; preds = %25, %14
  br label %29

29:                                               ; preds = %25, %28
  %30 = phi i32* [ @nundefsym, %28 ], [ @nextdefsym, %25 ]
  %31 = load i32, i32* %30, align 4
  %32 = add i32 %31, 1
  store i32 %32, i32* %30, align 4
  %33 = getelementptr inbounds %struct.symbol, %struct.symbol* %10, i64 0, i32 5
  store i32 %9, i32* %33, align 8
  %34 = load %struct.SAA*, %struct.SAA** @strs, align 8
  %35 = getelementptr inbounds %struct.symbol, %struct.symbol* %10, i64 0, i32 2
  %36 = load i8*, i8** %35, align 8
  %37 = tail call i64 @strlen(i8* %36) #15
  %38 = shl i64 %37, 32
  %39 = add i64 %38, 4294967296
  %40 = ashr exact i64 %39, 32
  tail call void @saa_wbytes(%struct.SAA* %34, i8* %36, i64 %40) #13
  %41 = load i8*, i8** %35, align 8
  %42 = tail call i64 @strlen(i8* %41) #15
  %43 = load i32, i32* @strslen, align 4
  %44 = trunc i64 %42 to i32
  %45 = add i32 %44, 1
  %46 = add i32 %45, %43
  store i32 %46, i32* @strslen, align 4
  br label %47

47:                                               ; preds = %29, %19
  %48 = phi i32 [ %46, %29 ], [ %9, %19 ]
  %49 = getelementptr inbounds %struct.symbol, %struct.symbol* %10, i64 0, i32 1
  %50 = load %struct.symbol*, %struct.symbol** %49, align 8
  %51 = icmp eq %struct.symbol* %50, null
  br i1 %51, label %52, label %8

52:                                               ; preds = %47, %0
  %53 = load i32, i32* @nextdefsym, align 4
  %54 = zext i32 %53 to i64
  %55 = shl nuw nsw i64 %54, 3
  %56 = tail call noalias i8* @nasm_malloc(i64 %55) #16
  store i8* %56, i8** bitcast (%struct.symbol*** @extdefsyms to i8**), align 8
  %57 = load i32, i32* @nundefsym, align 4
  %58 = zext i32 %57 to i64
  %59 = shl nuw nsw i64 %58, 3
  %60 = tail call noalias i8* @nasm_malloc(i64 %59) #16
  store i8* %60, i8** bitcast (%struct.symbol*** @undefsyms to i8**), align 8
  %61 = load %struct.symbol*, %struct.symbol** @syms, align 8
  %62 = icmp eq %struct.symbol* %61, null
  br i1 %62, label %107, label %63

63:                                               ; preds = %52, %101
  %64 = phi %struct.symbol* [ %105, %101 ], [ %61, %52 ]
  %65 = phi i32 [ %103, %101 ], [ 0, %52 ]
  %66 = phi i32 [ %102, %101 ], [ 0, %52 ]
  %67 = getelementptr inbounds %struct.symbol, %struct.symbol* %64, i64 0, i32 6
  %68 = load i8, i8* %67, align 4
  %69 = zext i8 %68 to i32
  %70 = and i32 %69, 1
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %88

72:                                               ; preds = %63
  %73 = load i32, i32* @strslen, align 4
  %74 = getelementptr inbounds %struct.symbol, %struct.symbol* %64, i64 0, i32 5
  store i32 %73, i32* %74, align 8
  %75 = load %struct.SAA*, %struct.SAA** @strs, align 8
  %76 = getelementptr inbounds %struct.symbol, %struct.symbol* %64, i64 0, i32 2
  %77 = load i8*, i8** %76, align 8
  %78 = tail call i64 @strlen(i8* %77) #15
  %79 = shl i64 %78, 32
  %80 = add i64 %79, 4294967296
  %81 = ashr exact i64 %80, 32
  tail call void @saa_wbytes(%struct.SAA* %75, i8* %77, i64 %81) #13
  %82 = load i8*, i8** %76, align 8
  %83 = tail call i64 @strlen(i8* %82) #15
  %84 = load i32, i32* @strslen, align 4
  %85 = trunc i64 %83 to i32
  %86 = add i32 %85, 1
  %87 = add i32 %86, %84
  store i32 %87, i32* @strslen, align 4
  br label %101

88:                                               ; preds = %63
  %89 = and i32 %69, 14
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %96, label %91

91:                                               ; preds = %88
  %92 = load %struct.symbol**, %struct.symbol*** @extdefsyms, align 8
  %93 = add i32 %66, 1
  %94 = zext i32 %66 to i64
  %95 = getelementptr inbounds %struct.symbol*, %struct.symbol** %92, i64 %94
  store %struct.symbol* %64, %struct.symbol** %95, align 8
  br label %101

96:                                               ; preds = %88
  %97 = load %struct.symbol**, %struct.symbol*** @undefsyms, align 8
  %98 = add i32 %65, 1
  %99 = zext i32 %65 to i64
  %100 = getelementptr inbounds %struct.symbol*, %struct.symbol** %97, i64 %99
  store %struct.symbol* %64, %struct.symbol** %100, align 8
  br label %101

101:                                              ; preds = %96, %91, %72
  %102 = phi i32 [ %66, %72 ], [ %93, %91 ], [ %66, %96 ]
  %103 = phi i32 [ %65, %72 ], [ %65, %91 ], [ %98, %96 ]
  %104 = getelementptr inbounds %struct.symbol, %struct.symbol* %64, i64 0, i32 1
  %105 = load %struct.symbol*, %struct.symbol** %104, align 8
  %106 = icmp eq %struct.symbol* %105, null
  br i1 %106, label %107, label %63

107:                                              ; preds = %101, %52
  %108 = load i8*, i8** bitcast (%struct.symbol*** @extdefsyms to i8**), align 8
  %109 = load i32, i32* @nextdefsym, align 4
  %110 = zext i32 %109 to i64
  tail call void @qsort(i8* %108, i64 %110, i64 8, i32 (i8*, i8*)* bitcast (i32 (%struct.symbol**, %struct.symbol**)* @layout_compare to i32 (i8*, i8*)*)) #13
  %111 = load i8*, i8** bitcast (%struct.symbol*** @undefsyms to i8**), align 8
  %112 = load i32, i32* @nundefsym, align 4
  %113 = zext i32 %112 to i64
  tail call void @qsort(i8* %111, i64 %113, i64 8, i32 (i8*, i8*)* bitcast (i32 (%struct.symbol**, %struct.symbol**)* @layout_compare to i32 (i8*, i8*)*)) #13
  %114 = load i32, i32* @nextdefsym, align 4
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %143, label %116

116:                                              ; preds = %107
  %117 = load %struct.symbol**, %struct.symbol*** @extdefsyms, align 8
  %118 = load i32, i32* @nsyms, align 4
  %119 = zext i32 %114 to i64
  %120 = add nsw i64 %119, -1
  %121 = and i64 %119, 3
  %122 = icmp ult i64 %120, 3
  br i1 %122, label %125, label %123

123:                                              ; preds = %116
  %124 = sub nsw i64 %119, %121
  br label %155

125:                                              ; preds = %155, %116
  %126 = phi i32 [ undef, %116 ], [ %177, %155 ]
  %127 = phi i64 [ 0, %116 ], [ %178, %155 ]
  %128 = phi i32 [ %118, %116 ], [ %177, %155 ]
  %129 = icmp eq i64 %121, 0
  br i1 %129, label %141, label %130

130:                                              ; preds = %125, %130
  %131 = phi i64 [ %138, %130 ], [ %127, %125 ]
  %132 = phi i32 [ %137, %130 ], [ %128, %125 ]
  %133 = phi i64 [ %139, %130 ], [ %121, %125 ]
  %134 = getelementptr inbounds %struct.symbol*, %struct.symbol** %117, i64 %131
  %135 = load %struct.symbol*, %struct.symbol** %134, align 8
  %136 = getelementptr inbounds %struct.symbol, %struct.symbol* %135, i64 0, i32 4
  store i32 %132, i32* %136, align 4
  %137 = add i32 %132, 1
  %138 = add nuw nsw i64 %131, 1
  %139 = add i64 %133, -1
  %140 = icmp eq i64 %139, 0
  br i1 %140, label %141, label %130, !llvm.loop !6

141:                                              ; preds = %130, %125
  %142 = phi i32 [ %126, %125 ], [ %137, %130 ]
  store i32 %142, i32* @nsyms, align 4
  br label %143

143:                                              ; preds = %141, %107
  %144 = load i32, i32* @nundefsym, align 4
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %225, label %146

146:                                              ; preds = %143
  %147 = load %struct.symbol**, %struct.symbol*** @undefsyms, align 8
  %148 = load i32, i32* @nsyms, align 4
  %149 = zext i32 %144 to i64
  %150 = add nsw i64 %149, -1
  %151 = and i64 %149, 3
  %152 = icmp ult i64 %150, 3
  br i1 %152, label %207, label %153

153:                                              ; preds = %146
  %154 = sub nsw i64 %149, %151
  br label %181

155:                                              ; preds = %155, %123
  %156 = phi i64 [ 0, %123 ], [ %178, %155 ]
  %157 = phi i32 [ %118, %123 ], [ %177, %155 ]
  %158 = phi i64 [ %124, %123 ], [ %179, %155 ]
  %159 = getelementptr inbounds %struct.symbol*, %struct.symbol** %117, i64 %156
  %160 = load %struct.symbol*, %struct.symbol** %159, align 8
  %161 = getelementptr inbounds %struct.symbol, %struct.symbol* %160, i64 0, i32 4
  store i32 %157, i32* %161, align 4
  %162 = add i32 %157, 1
  %163 = or i64 %156, 1
  %164 = getelementptr inbounds %struct.symbol*, %struct.symbol** %117, i64 %163
  %165 = load %struct.symbol*, %struct.symbol** %164, align 8
  %166 = getelementptr inbounds %struct.symbol, %struct.symbol* %165, i64 0, i32 4
  store i32 %162, i32* %166, align 4
  %167 = add i32 %157, 2
  %168 = or i64 %156, 2
  %169 = getelementptr inbounds %struct.symbol*, %struct.symbol** %117, i64 %168
  %170 = load %struct.symbol*, %struct.symbol** %169, align 8
  %171 = getelementptr inbounds %struct.symbol, %struct.symbol* %170, i64 0, i32 4
  store i32 %167, i32* %171, align 4
  %172 = add i32 %157, 3
  %173 = or i64 %156, 3
  %174 = getelementptr inbounds %struct.symbol*, %struct.symbol** %117, i64 %173
  %175 = load %struct.symbol*, %struct.symbol** %174, align 8
  %176 = getelementptr inbounds %struct.symbol, %struct.symbol* %175, i64 0, i32 4
  store i32 %172, i32* %176, align 4
  %177 = add i32 %157, 4
  %178 = add nuw nsw i64 %156, 4
  %179 = add i64 %158, -4
  %180 = icmp eq i64 %179, 0
  br i1 %180, label %125, label %155

181:                                              ; preds = %181, %153
  %182 = phi i64 [ 0, %153 ], [ %204, %181 ]
  %183 = phi i32 [ %148, %153 ], [ %203, %181 ]
  %184 = phi i64 [ %154, %153 ], [ %205, %181 ]
  %185 = getelementptr inbounds %struct.symbol*, %struct.symbol** %147, i64 %182
  %186 = load %struct.symbol*, %struct.symbol** %185, align 8
  %187 = getelementptr inbounds %struct.symbol, %struct.symbol* %186, i64 0, i32 4
  store i32 %183, i32* %187, align 4
  %188 = add i32 %183, 1
  %189 = or i64 %182, 1
  %190 = getelementptr inbounds %struct.symbol*, %struct.symbol** %147, i64 %189
  %191 = load %struct.symbol*, %struct.symbol** %190, align 8
  %192 = getelementptr inbounds %struct.symbol, %struct.symbol* %191, i64 0, i32 4
  store i32 %188, i32* %192, align 4
  %193 = add i32 %183, 2
  %194 = or i64 %182, 2
  %195 = getelementptr inbounds %struct.symbol*, %struct.symbol** %147, i64 %194
  %196 = load %struct.symbol*, %struct.symbol** %195, align 8
  %197 = getelementptr inbounds %struct.symbol, %struct.symbol* %196, i64 0, i32 4
  store i32 %193, i32* %197, align 4
  %198 = add i32 %183, 3
  %199 = or i64 %182, 3
  %200 = getelementptr inbounds %struct.symbol*, %struct.symbol** %147, i64 %199
  %201 = load %struct.symbol*, %struct.symbol** %200, align 8
  %202 = getelementptr inbounds %struct.symbol, %struct.symbol* %201, i64 0, i32 4
  store i32 %198, i32* %202, align 4
  %203 = add i32 %183, 4
  %204 = add nuw nsw i64 %182, 4
  %205 = add i64 %184, -4
  %206 = icmp eq i64 %205, 0
  br i1 %206, label %207, label %181

207:                                              ; preds = %181, %146
  %208 = phi i32 [ undef, %146 ], [ %203, %181 ]
  %209 = phi i64 [ 0, %146 ], [ %204, %181 ]
  %210 = phi i32 [ %148, %146 ], [ %203, %181 ]
  %211 = icmp eq i64 %151, 0
  br i1 %211, label %223, label %212

212:                                              ; preds = %207, %212
  %213 = phi i64 [ %220, %212 ], [ %209, %207 ]
  %214 = phi i32 [ %219, %212 ], [ %210, %207 ]
  %215 = phi i64 [ %221, %212 ], [ %151, %207 ]
  %216 = getelementptr inbounds %struct.symbol*, %struct.symbol** %147, i64 %213
  %217 = load %struct.symbol*, %struct.symbol** %216, align 8
  %218 = getelementptr inbounds %struct.symbol, %struct.symbol* %217, i64 0, i32 4
  store i32 %214, i32* %218, align 4
  %219 = add i32 %214, 1
  %220 = add nuw nsw i64 %213, 1
  %221 = add i64 %215, -1
  %222 = icmp eq i64 %221, 0
  br i1 %222, label %223, label %212, !llvm.loop !8

223:                                              ; preds = %212, %207
  %224 = phi i32 [ %208, %207 ], [ %219, %212 ]
  store i32 %224, i32* @nsyms, align 4
  br label %225

225:                                              ; preds = %143, %223
  %226 = load %struct.section*, %struct.section** @sects, align 8
  %227 = icmp eq %struct.section* %226, null
  br i1 %227, label %309, label %228

228:                                              ; preds = %225, %263
  %229 = phi %struct.section* [ %265, %263 ], [ %226, %225 ]
  %230 = getelementptr inbounds %struct.section, %struct.section* %229, i64 0, i32 5
  %231 = load %struct.reloc*, %struct.reloc** %230, align 8
  %232 = icmp eq %struct.reloc* %231, null
  br i1 %232, label %263, label %233

233:                                              ; preds = %228, %259
  %234 = phi %struct.reloc* [ %261, %259 ], [ %231, %228 ]
  %235 = getelementptr inbounds %struct.reloc, %struct.reloc* %234, i64 0, i32 2
  %236 = load i32, i32* %235, align 4
  %237 = and i32 %236, 134217728
  %238 = icmp eq i32 %237, 0
  br i1 %238, label %259, label %239

239:                                              ; preds = %233
  %240 = load %struct.symbol*, %struct.symbol** @syms, align 8
  %241 = icmp eq %struct.symbol* %240, null
  br i1 %241, label %259, label %242

242:                                              ; preds = %239
  %243 = and i32 %236, 16777215
  br label %244

244:                                              ; preds = %255, %242
  %245 = phi %struct.symbol* [ %240, %242 ], [ %257, %255 ]
  %246 = getelementptr inbounds %struct.symbol, %struct.symbol* %245, i64 0, i32 3
  %247 = load i32, i32* %246, align 8
  %248 = icmp eq i32 %247, %243
  br i1 %248, label %249, label %255

249:                                              ; preds = %244
  %250 = getelementptr inbounds %struct.symbol, %struct.symbol* %245, i64 0, i32 4
  %251 = load i32, i32* %250, align 4
  %252 = and i32 %251, 16777215
  %253 = and i32 %236, -16777216
  %254 = or i32 %252, %253
  store i32 %254, i32* %235, align 4
  br label %259

255:                                              ; preds = %244
  %256 = getelementptr inbounds %struct.symbol, %struct.symbol* %245, i64 0, i32 1
  %257 = load %struct.symbol*, %struct.symbol** %256, align 8
  %258 = icmp eq %struct.symbol* %257, null
  br i1 %258, label %259, label %244

259:                                              ; preds = %255, %249, %239, %233
  %260 = getelementptr inbounds %struct.reloc, %struct.reloc* %234, i64 0, i32 0
  %261 = load %struct.reloc*, %struct.reloc** %260, align 8
  %262 = icmp eq %struct.reloc* %261, null
  br i1 %262, label %263, label %233

263:                                              ; preds = %259, %228
  %264 = getelementptr inbounds %struct.section, %struct.section* %229, i64 0, i32 0
  %265 = load %struct.section*, %struct.section** %264, align 8
  %266 = icmp eq %struct.section* %265, null
  br i1 %266, label %267, label %228

267:                                              ; preds = %263
  br i1 %227, label %309, label %268

268:                                              ; preds = %267
  %269 = load i64, i64* @seg_vmsize, align 8
  br label %270

270:                                              ; preds = %304, %268
  %271 = phi i64 [ %305, %304 ], [ %269, %268 ]
  %272 = phi %struct.section* [ %307, %304 ], [ %226, %268 ]
  %273 = getelementptr inbounds %struct.section, %struct.section* %272, i64 0, i32 12
  store i64 %271, i64* %273, align 8
  %274 = getelementptr inbounds %struct.section, %struct.section* %272, i64 0, i32 7
  %275 = load i32, i32* %274, align 8
  %276 = icmp eq i32 %275, -1
  br i1 %276, label %277, label %278

277:                                              ; preds = %270
  store i32 0, i32* %274, align 8
  br label %278

278:                                              ; preds = %277, %270
  %279 = phi i32 [ 0, %277 ], [ %275, %270 ]
  %280 = zext i32 %279 to i64
  %281 = shl nsw i64 -1, %280
  %282 = xor i64 %281, -1
  %283 = add i64 %271, %282
  %284 = and i64 %283, %281
  store i64 %284, i64* %273, align 8
  %285 = getelementptr inbounds %struct.section, %struct.section* %272, i64 0, i32 13
  %286 = load i64, i64* %285, align 8
  %287 = add i64 %284, %286
  store i64 %287, i64* @seg_vmsize, align 8
  %288 = getelementptr inbounds %struct.section, %struct.section* %272, i64 0, i32 17
  %289 = load i32, i32* %288, align 8
  %290 = and i32 %289, 255
  %291 = icmp eq i32 %290, 1
  br i1 %291, label %304, label %292

292:                                              ; preds = %278
  %293 = load i64, i64* @seg_filesize, align 8
  %294 = add i64 %293, 3
  %295 = and i64 %294, 4294967292
  %296 = sub i64 %295, %293
  %297 = trunc i64 %296 to i32
  %298 = getelementptr inbounds %struct.section, %struct.section* %272, i64 0, i32 15
  store i32 %297, i32* %298, align 8
  %299 = and i64 %296, 4294967295
  %300 = add i64 %299, %293
  %301 = getelementptr inbounds %struct.section, %struct.section* %272, i64 0, i32 14
  store i64 %300, i64* %301, align 8
  %302 = add i64 %300, %286
  store i64 %302, i64* @seg_filesize, align 8
  %303 = add i64 %299, %287
  store i64 %303, i64* @seg_vmsize, align 8
  br label %304

304:                                              ; preds = %292, %278
  %305 = phi i64 [ %287, %278 ], [ %303, %292 ]
  %306 = getelementptr inbounds %struct.section, %struct.section* %272, i64 0, i32 0
  %307 = load %struct.section*, %struct.section** %306, align 8
  %308 = icmp eq %struct.section* %307, null
  br i1 %308, label %309, label %270

309:                                              ; preds = %304, %225, %267
  %310 = load i32, i32* @seg_nsects, align 4
  %311 = icmp eq i32 %310, 0
  br i1 %311, label %321, label %312

312:                                              ; preds = %309
  %313 = load i32, i32* @head_ncmds, align 4
  %314 = add i32 %313, 1
  store i32 %314, i32* @head_ncmds, align 4
  %315 = load i32, i32* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 5), align 4
  %316 = load i32, i32* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 6), align 4
  %317 = mul i32 %316, %310
  %318 = add i32 %317, %315
  %319 = load i32, i32* @head_sizeofcmds, align 4
  %320 = add i32 %318, %319
  store i32 %320, i32* @head_sizeofcmds, align 4
  br label %321

321:                                              ; preds = %312, %309
  %322 = load i32, i32* @nsyms, align 4
  %323 = icmp eq i32 %322, 0
  br i1 %323, label %329, label %324

324:                                              ; preds = %321
  %325 = load i32, i32* @head_ncmds, align 4
  %326 = add i32 %325, 1
  store i32 %326, i32* @head_ncmds, align 4
  %327 = load i32, i32* @head_sizeofcmds, align 4
  %328 = add i32 %327, 24
  store i32 %328, i32* @head_sizeofcmds, align 4
  br label %329

329:                                              ; preds = %324, %321
  %330 = icmp ugt i32 %310, 255
  br i1 %330, label %331, label %332

331:                                              ; preds = %329
  tail call void (i8*, ...) @nasm_fatal(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.76, i64 0, i64 0), i32 255) #14
  unreachable

332:                                              ; preds = %329
  %333 = add nuw nsw i32 %310, 1
  %334 = zext i32 %333 to i64
  %335 = shl nuw nsw i64 %334, 3
  %336 = tail call noalias i8* @nasm_malloc(i64 %335) #16
  %337 = bitcast i8* %336 to %struct.section**
  store i8* %336, i8** bitcast (%struct.section*** @sectstab to i8**), align 8
  store %struct.section* @absolute_sect, %struct.section** %337, align 8
  %338 = load %struct.section*, %struct.section** @sects, align 8
  %339 = icmp eq %struct.section* %338, null
  br i1 %339, label %348, label %340

340:                                              ; preds = %332, %340
  %341 = phi i64 [ %345, %340 ], [ 1, %332 ]
  %342 = phi %struct.section* [ %346, %340 ], [ %338, %332 ]
  %343 = getelementptr inbounds %struct.section*, %struct.section** %337, i64 %341
  store %struct.section* %342, %struct.section** %343, align 8
  %344 = getelementptr inbounds %struct.section, %struct.section* %342, i64 0, i32 0
  %345 = add nuw i64 %341, 1
  %346 = load %struct.section*, %struct.section** %344, align 8
  %347 = icmp eq %struct.section* %346, null
  br i1 %347, label %348, label %340

348:                                              ; preds = %340, %332
  %349 = load i32, i32* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 1), align 4
  %350 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  tail call void @fwriteint32_t(i32 %349, %struct._IO_FILE* %350) #13
  %351 = load i32, i32* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 2), align 4
  %352 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  tail call void @fwriteint32_t(i32 %351, %struct._IO_FILE* %352) #13
  %353 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  tail call void @fwriteint32_t(i32 3, %struct._IO_FILE* %353) #13
  %354 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  tail call void @fwriteint32_t(i32 1, %struct._IO_FILE* %354) #13
  %355 = load i32, i32* @head_ncmds, align 4
  %356 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  tail call void @fwriteint32_t(i32 %355, %struct._IO_FILE* %356) #13
  %357 = load i32, i32* @head_sizeofcmds, align 4
  %358 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  tail call void @fwriteint32_t(i32 %357, %struct._IO_FILE* %358) #13
  %359 = load i32, i32* @head_flags, align 4
  %360 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  tail call void @fwriteint32_t(i32 %359, %struct._IO_FILE* %360) #13
  %361 = load i32, i32* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 4), align 4
  %362 = add i32 %361, -28
  %363 = zext i32 %362 to i64
  %364 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  tail call void @fwritezero(i64 %363, %struct._IO_FILE* %364) #13
  %365 = load i32, i32* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 4), align 4
  %366 = load i32, i32* @head_sizeofcmds, align 4
  %367 = add i32 %366, %365
  %368 = zext i32 %367 to i64
  %369 = load i32, i32* @seg_nsects, align 4
  %370 = icmp eq i32 %369, 0
  br i1 %370, label %521, label %371

371:                                              ; preds = %348
  %372 = load i64, i64* @seg_filesize, align 8
  %373 = add i64 %372, %368
  %374 = load i32, i32* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 0), align 4
  %375 = add i32 %374, -1
  %376 = zext i32 %375 to i64
  %377 = add i64 %373, %376
  %378 = sub i32 0, %374
  %379 = zext i32 %378 to i64
  %380 = and i64 %377, %379
  %381 = load i32, i32* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 3), align 4
  %382 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  tail call void @fwriteint32_t(i32 %381, %struct._IO_FILE* %382) #13
  %383 = load i32, i32* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 5), align 4
  %384 = load i32, i32* @seg_nsects, align 4
  %385 = load i32, i32* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 6), align 4
  %386 = mul i32 %385, %384
  %387 = add i32 %386, %383
  %388 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  tail call void @fwriteint32_t(i32 %387, %struct._IO_FILE* %388) #13
  %389 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  tail call void @fwritezero(i64 16, %struct._IO_FILE* %389) #13
  %390 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %391 = load i32, i32* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 0), align 4
  tail call void @fwriteaddr(i64 0, i32 %391, %struct._IO_FILE* %390) #13
  %392 = load i64, i64* @seg_vmsize, align 8
  %393 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %394 = load i32, i32* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 0), align 4
  tail call void @fwriteaddr(i64 %392, i32 %394, %struct._IO_FILE* %393) #13
  %395 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %396 = load i32, i32* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 0), align 4
  tail call void @fwriteaddr(i64 %368, i32 %396, %struct._IO_FILE* %395) #13
  %397 = load i64, i64* @seg_filesize, align 8
  %398 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %399 = load i32, i32* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 0), align 4
  tail call void @fwriteaddr(i64 %397, i32 %399, %struct._IO_FILE* %398) #13
  %400 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  tail call void @fwriteint32_t(i32 7, %struct._IO_FILE* %400) #13
  %401 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  tail call void @fwriteint32_t(i32 7, %struct._IO_FILE* %401) #13
  %402 = load i32, i32* @seg_nsects, align 4
  %403 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  tail call void @fwriteint32_t(i32 %402, %struct._IO_FILE* %403) #13
  %404 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  tail call void @fwriteint32_t(i32 0, %struct._IO_FILE* %404) #13
  %405 = load %struct.section*, %struct.section** @sects, align 8
  %406 = icmp eq %struct.section* %405, null
  br i1 %406, label %407, label %409

407:                                              ; preds = %371
  %408 = trunc i64 %380 to i32
  br label %515

409:                                              ; preds = %371
  %410 = getelementptr inbounds [34 x i8], [34 x i8]* %2, i64 0, i64 0
  %411 = trunc i64 %380 to i32
  br label %412

412:                                              ; preds = %504, %409
  %413 = phi %struct.section* [ %405, %409 ], [ %513, %504 ]
  %414 = phi i32 [ 0, %409 ], [ %506, %504 ]
  %415 = phi i64 [ %368, %409 ], [ %505, %504 ]
  %416 = getelementptr inbounds %struct.section, %struct.section* %413, i64 0, i32 16
  %417 = load i32, i32* %416, align 4
  %418 = icmp eq i32 %417, 0
  br i1 %418, label %432, label %419

419:                                              ; preds = %412
  %420 = getelementptr inbounds %struct.section, %struct.section* %413, i64 0, i32 17
  %421 = load i32, i32* %420, align 8
  %422 = and i32 %421, 255
  %423 = icmp eq i32 %422, 1
  br i1 %423, label %424, label %425, !prof !5

424:                                              ; preds = %419
  call void @nasm_assert_failed(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.13, i64 0, i64 0), i32 1333, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.78, i64 0, i64 0)) #14
  unreachable

425:                                              ; preds = %419
  %426 = or i32 %421, 256
  store i32 %426, i32* %420, align 8
  %427 = getelementptr inbounds %struct.section, %struct.section* %413, i64 0, i32 18
  %428 = load i32, i32* %427, align 4
  %429 = icmp eq i32 %428, 0
  br i1 %429, label %455, label %430

430:                                              ; preds = %425
  %431 = or i32 %421, 768
  store i32 %431, i32* %420, align 8
  br label %455

432:                                              ; preds = %412
  %433 = getelementptr inbounds %struct.section, %struct.section* %413, i64 0, i32 11, i64 0
  %434 = call i32 @strncmp(i8* %433, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.60, i64 0, i64 0), i64 16) #15
  %435 = icmp eq i32 %434, 0
  br i1 %435, label %436, label %455

436:                                              ; preds = %432
  %437 = getelementptr inbounds %struct.section, %struct.section* %413, i64 0, i32 10, i64 0
  %438 = call i32 @strncmp(i8* %437, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.63, i64 0, i64 0), i64 16) #15
  %439 = icmp eq i32 %438, 0
  br i1 %439, label %440, label %455

440:                                              ; preds = %436
  %441 = getelementptr inbounds %struct.section, %struct.section* %413, i64 0, i32 8
  %442 = load i8, i8* %441, align 4, !range !3
  %443 = icmp eq i8 %442, 0
  br i1 %443, label %444, label %455

444:                                              ; preds = %440
  call void @llvm.lifetime.start.p0i8(i64 34, i8* nonnull %410) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %410, i8 -86, i64 34, i1 false) #13
  %445 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %410, i64 34, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.63, i64 0, i64 0)) #13
  %446 = call i8** @hash_find(%struct.hash_table* nonnull @section_by_name, i8* nonnull %410, %struct.hash_insert* null) #13
  %447 = icmp eq i8** %446, null
  br i1 %447, label %448, label %449

448:                                              ; preds = %444
  call void @llvm.lifetime.end.p0i8(i64 34, i8* nonnull %410) #13
  br label %453

449:                                              ; preds = %444
  %450 = bitcast i8** %446 to %struct.section**
  %451 = load %struct.section*, %struct.section** %450, align 8
  call void @llvm.lifetime.end.p0i8(i64 34, i8* nonnull %410) #13
  %452 = icmp eq %struct.section* %451, null
  br i1 %452, label %453, label %455

453:                                              ; preds = %449, %448
  %454 = call i8* @strncpy(i8* %433, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i64 0, i64 0), i64 16) #13
  br label %455

455:                                              ; preds = %453, %449, %440, %436, %432, %430, %425
  %456 = getelementptr inbounds %struct.section, %struct.section* %413, i64 0, i32 10, i64 0
  %457 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @nasm_write(i8* %456, i64 16, %struct._IO_FILE* %457) #13
  %458 = getelementptr inbounds %struct.section, %struct.section* %413, i64 0, i32 11, i64 0
  %459 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @nasm_write(i8* %458, i64 16, %struct._IO_FILE* %459) #13
  %460 = getelementptr inbounds %struct.section, %struct.section* %413, i64 0, i32 12
  %461 = load i64, i64* %460, align 8
  %462 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %463 = load i32, i32* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 0), align 4
  call void @fwriteaddr(i64 %461, i32 %463, %struct._IO_FILE* %462) #13
  %464 = getelementptr inbounds %struct.section, %struct.section* %413, i64 0, i32 13
  %465 = load i64, i64* %464, align 8
  %466 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %467 = load i32, i32* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 0), align 4
  call void @fwriteaddr(i64 %465, i32 %467, %struct._IO_FILE* %466) #13
  %468 = getelementptr inbounds %struct.section, %struct.section* %413, i64 0, i32 17
  %469 = load i32, i32* %468, align 8
  %470 = and i32 %469, 255
  %471 = icmp eq i32 %470, 1
  br i1 %471, label %497, label %472

472:                                              ; preds = %455
  %473 = getelementptr inbounds %struct.section, %struct.section* %413, i64 0, i32 15
  %474 = load i32, i32* %473, align 8
  %475 = icmp eq i32 %474, -1
  br i1 %475, label %476, label %477, !prof !5

476:                                              ; preds = %472
  call void @nasm_assert_failed(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.13, i64 0, i64 0), i32 1357, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.79, i64 0, i64 0)) #14
  unreachable

477:                                              ; preds = %472
  %478 = zext i32 %474 to i64
  %479 = add i64 %415, %478
  %480 = trunc i64 %479 to i32
  %481 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @fwriteint32_t(i32 %480, %struct._IO_FILE* %481) #13
  %482 = load i64, i64* %464, align 8
  %483 = add i64 %482, %479
  %484 = getelementptr inbounds %struct.section, %struct.section* %413, i64 0, i32 7
  %485 = load i32, i32* %484, align 8
  %486 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @fwriteint32_t(i32 %485, %struct._IO_FILE* %486) #13
  %487 = load i32, i32* %416, align 4
  %488 = icmp eq i32 %487, 0
  %489 = add i32 %414, %411
  %490 = select i1 %488, i32 0, i32 %489
  %491 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @fwriteint32_t(i32 %490, %struct._IO_FILE* %491) #13
  %492 = load i32, i32* %416, align 4
  %493 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @fwriteint32_t(i32 %492, %struct._IO_FILE* %493) #13
  %494 = load i32, i32* %416, align 4
  %495 = shl i32 %494, 3
  %496 = add i32 %495, %414
  br label %504

497:                                              ; preds = %455
  %498 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @fwriteint32_t(i32 0, %struct._IO_FILE* %498) #13
  %499 = getelementptr inbounds %struct.section, %struct.section* %413, i64 0, i32 7
  %500 = load i32, i32* %499, align 8
  %501 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @fwriteint32_t(i32 %500, %struct._IO_FILE* %501) #13
  %502 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @fwriteint32_t(i32 0, %struct._IO_FILE* %502) #13
  %503 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @fwriteint32_t(i32 0, %struct._IO_FILE* %503) #13
  br label %504

504:                                              ; preds = %497, %477
  %505 = phi i64 [ %483, %477 ], [ %415, %497 ]
  %506 = phi i32 [ %496, %477 ], [ %414, %497 ]
  %507 = load i32, i32* %468, align 8
  %508 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @fwriteint32_t(i32 %507, %struct._IO_FILE* %508) #13
  %509 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @fwriteint32_t(i32 0, %struct._IO_FILE* %509) #13
  %510 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %511 = load i32, i32* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 0), align 4
  call void @fwriteaddr(i64 0, i32 %511, %struct._IO_FILE* %510) #13
  %512 = getelementptr inbounds %struct.section, %struct.section* %413, i64 0, i32 0
  %513 = load %struct.section*, %struct.section** %512, align 8
  %514 = icmp eq %struct.section* %513, null
  br i1 %514, label %515, label %412

515:                                              ; preds = %504, %407
  %516 = phi i32 [ %408, %407 ], [ %411, %504 ]
  %517 = phi i64 [ %368, %407 ], [ %505, %504 ]
  %518 = phi i32 [ 0, %407 ], [ %506, %504 ]
  %519 = sub i64 %380, %517
  store i64 %519, i64* @rel_padcnt, align 8
  %520 = add i32 %518, %516
  br label %522

521:                                              ; preds = %348
  tail call void (i32, i8*, ...) @nasm_warn(i32 2228224, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.77, i64 0, i64 0)) #13
  br label %522

522:                                              ; preds = %521, %515
  %523 = phi i32 [ %520, %515 ], [ %367, %521 ]
  %524 = load i32, i32* @nsyms, align 4
  %525 = icmp eq i32 %524, 0
  br i1 %525, label %539, label %526

526:                                              ; preds = %522
  %527 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @fwriteint32_t(i32 2, %struct._IO_FILE* %527) #13
  %528 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @fwriteint32_t(i32 24, %struct._IO_FILE* %528) #13
  %529 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @fwriteint32_t(i32 %523, %struct._IO_FILE* %529) #13
  %530 = load i32, i32* @nsyms, align 4
  %531 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @fwriteint32_t(i32 %530, %struct._IO_FILE* %531) #13
  %532 = load i32, i32* @nsyms, align 4
  %533 = load i32, i32* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 7), align 4
  %534 = mul i32 %533, %532
  %535 = add i32 %534, %523
  %536 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @fwriteint32_t(i32 %535, %struct._IO_FILE* %536) #13
  %537 = load i32, i32* @strslen, align 4
  %538 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @fwriteint32_t(i32 %537, %struct._IO_FILE* %538) #13
  br label %539

539:                                              ; preds = %526, %522
  %540 = load i32, i32* @seg_nsects, align 4
  %541 = icmp eq i32 %540, 0
  br i1 %541, label %648, label %542

542:                                              ; preds = %539
  %543 = bitcast %union.offset* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %543) #13
  %544 = getelementptr inbounds %union.offset, %union.offset* %1, i64 0, i32 0
  store i64 -6148914691236517206, i64* %544, align 8
  %545 = load %struct.section*, %struct.section** @sects, align 8
  %546 = icmp eq %struct.section* %545, null
  br i1 %546, label %622, label %547

547:                                              ; preds = %542, %618
  %548 = phi %struct.section* [ %620, %618 ], [ %545, %542 ]
  %549 = getelementptr inbounds %struct.section, %struct.section* %548, i64 0, i32 17
  %550 = load i32, i32* %549, align 8
  %551 = and i32 %550, 255
  %552 = icmp eq i32 %551, 1
  br i1 %552, label %618, label %553

553:                                              ; preds = %547
  %554 = getelementptr inbounds %struct.section, %struct.section* %548, i64 0, i32 1
  %555 = load %struct.SAA*, %struct.SAA** %554, align 8
  call void @saa_rewind(%struct.SAA* %555) #13
  %556 = getelementptr inbounds %struct.section, %struct.section* %548, i64 0, i32 5
  %557 = load %struct.reloc*, %struct.reloc** %556, align 8
  %558 = icmp eq %struct.reloc* %557, null
  br i1 %558, label %611, label %559

559:                                              ; preds = %553
  %560 = getelementptr inbounds %struct.section, %struct.section* %548, i64 0, i32 12
  br label %561

561:                                              ; preds = %603, %559
  %562 = phi %struct.reloc* [ %557, %559 ], [ %609, %603 ]
  %563 = getelementptr inbounds %struct.reloc, %struct.reloc* %562, i64 0, i32 2
  %564 = load i32, i32* %563, align 4
  %565 = lshr i32 %564, 25
  %566 = and i32 %565, 3
  %567 = shl i32 1, %566
  %568 = icmp sgt i32 %567, 4
  %569 = select i1 %568, i32 8, i32 %567
  store i64 0, i64* %544, align 8
  %570 = load %struct.SAA*, %struct.SAA** %554, align 8
  %571 = getelementptr inbounds %struct.reloc, %struct.reloc* %562, i64 0, i32 1
  %572 = load i32, i32* %571, align 8
  %573 = sext i32 %572 to i64
  %574 = zext i32 %569 to i64
  call void @saa_fread(%struct.SAA* %570, i64 %573, i8* nonnull %543, i64 %574) #13
  %575 = load i64, i64* %544, align 8
  %576 = load i32, i32* %563, align 4
  %577 = and i32 %576, 134217728
  %578 = icmp eq i32 %577, 0
  br i1 %578, label %579, label %597

579:                                              ; preds = %561
  %580 = and i32 %576, 16777215
  %581 = load i32, i32* @seg_nsects, align 4
  %582 = icmp ugt i32 %580, %581
  br i1 %582, label %583, label %584, !prof !5

583:                                              ; preds = %579
  call void @nasm_assert_failed(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.13, i64 0, i64 0), i32 1457, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.80, i64 0, i64 0)) #14
  unreachable

584:                                              ; preds = %579
  %585 = load %struct.section**, %struct.section*** @sectstab, align 8
  %586 = zext i32 %580 to i64
  %587 = getelementptr inbounds %struct.section*, %struct.section** %585, i64 %586
  %588 = load %struct.section*, %struct.section** %587, align 8
  %589 = getelementptr inbounds %struct.section, %struct.section* %588, i64 0, i32 12
  %590 = load i64, i64* %589, align 8
  %591 = add i64 %590, %575
  %592 = and i32 %576, 16777216
  %593 = icmp eq i32 %592, 0
  br i1 %593, label %603, label %594

594:                                              ; preds = %584
  %595 = load i64, i64* %560, align 8
  %596 = sub i64 %591, %595
  br label %603

597:                                              ; preds = %561
  %598 = and i32 %576, -251658240
  %599 = icmp eq i32 %598, 16777216
  br i1 %599, label %600, label %603

600:                                              ; preds = %597
  %601 = load i64, i64* %560, align 8
  %602 = sub i64 %575, %601
  br label %603

603:                                              ; preds = %600, %597, %594, %584
  %604 = phi i64 [ %602, %600 ], [ %575, %597 ], [ %596, %594 ], [ %591, %584 ]
  store i64 %604, i64* %544, align 8
  %605 = load %struct.SAA*, %struct.SAA** %554, align 8
  %606 = load i32, i32* %571, align 8
  %607 = sext i32 %606 to i64
  call void @saa_fwrite(%struct.SAA* %605, i64 %607, i8* nonnull %543, i64 %574) #13
  %608 = getelementptr inbounds %struct.reloc, %struct.reloc* %562, i64 0, i32 0
  %609 = load %struct.reloc*, %struct.reloc** %608, align 8
  %610 = icmp eq %struct.reloc* %609, null
  br i1 %610, label %611, label %561

611:                                              ; preds = %603, %553
  %612 = getelementptr inbounds %struct.section, %struct.section* %548, i64 0, i32 15
  %613 = load i32, i32* %612, align 8
  %614 = zext i32 %613 to i64
  %615 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @fwritezero(i64 %614, %struct._IO_FILE* %615) #13
  %616 = load %struct.SAA*, %struct.SAA** %554, align 8
  %617 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @saa_fpwrite(%struct.SAA* %616, %struct._IO_FILE* %617) #13
  br label %618

618:                                              ; preds = %611, %547
  %619 = getelementptr inbounds %struct.section, %struct.section* %548, i64 0, i32 0
  %620 = load %struct.section*, %struct.section** %619, align 8
  %621 = icmp eq %struct.section* %620, null
  br i1 %621, label %622, label %547

622:                                              ; preds = %618, %542
  %623 = load i64, i64* @rel_padcnt, align 8
  %624 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @fwritezero(i64 %623, %struct._IO_FILE* %624) #13
  %625 = load %struct.section*, %struct.section** @sects, align 8
  %626 = icmp eq %struct.section* %625, null
  br i1 %626, label %647, label %627

627:                                              ; preds = %622, %643
  %628 = phi %struct.section* [ %645, %643 ], [ %625, %622 ]
  %629 = getelementptr inbounds %struct.section, %struct.section* %628, i64 0, i32 5
  %630 = load %struct.reloc*, %struct.reloc** %629, align 8
  %631 = icmp eq %struct.reloc* %630, null
  br i1 %631, label %643, label %632

632:                                              ; preds = %627, %632
  %633 = phi %struct.reloc* [ %641, %632 ], [ %630, %627 ]
  %634 = getelementptr inbounds %struct.reloc, %struct.reloc* %633, i64 0, i32 1
  %635 = load i32, i32* %634, align 8
  %636 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @fwriteint32_t(i32 %635, %struct._IO_FILE* %636) #13
  %637 = getelementptr inbounds %struct.reloc, %struct.reloc* %633, i64 0, i32 2
  %638 = load i32, i32* %637, align 4
  %639 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @fwriteint32_t(i32 %638, %struct._IO_FILE* %639) #13
  %640 = getelementptr inbounds %struct.reloc, %struct.reloc* %633, i64 0, i32 0
  %641 = load %struct.reloc*, %struct.reloc** %640, align 8
  %642 = icmp eq %struct.reloc* %641, null
  br i1 %642, label %643, label %632

643:                                              ; preds = %632, %627
  %644 = getelementptr inbounds %struct.section, %struct.section* %628, i64 0, i32 0
  %645 = load %struct.section*, %struct.section** %644, align 8
  %646 = icmp eq %struct.section* %645, null
  br i1 %646, label %647, label %627

647:                                              ; preds = %643, %622
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %543) #13
  br label %648

648:                                              ; preds = %647, %539
  %649 = load i32, i32* @nsyms, align 4
  %650 = icmp eq i32 %649, 0
  br i1 %650, label %796, label %651

651:                                              ; preds = %648
  %652 = load %struct.symbol*, %struct.symbol** @syms, align 8
  %653 = icmp eq %struct.symbol* %652, null
  br i1 %653, label %654, label %657

654:                                              ; preds = %699, %651
  %655 = load i32, i32* @nextdefsym, align 4
  %656 = icmp eq i32 %655, 0
  br i1 %656, label %703, label %706

657:                                              ; preds = %651, %699
  %658 = phi %struct.symbol* [ %701, %699 ], [ %652, %651 ]
  %659 = getelementptr inbounds %struct.symbol, %struct.symbol* %658, i64 0, i32 6
  %660 = load i8, i8* %659, align 4
  %661 = and i8 %660, 1
  %662 = icmp eq i8 %661, 0
  br i1 %662, label %663, label %699

663:                                              ; preds = %657
  %664 = getelementptr inbounds %struct.symbol, %struct.symbol* %658, i64 0, i32 5
  %665 = load i32, i32* %664, align 8
  %666 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @fwriteint32_t(i32 %665, %struct._IO_FILE* %666) #13
  %667 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @nasm_write(i8* %659, i64 1, %struct._IO_FILE* %667) #13
  %668 = getelementptr inbounds %struct.symbol, %struct.symbol* %658, i64 0, i32 7
  %669 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @nasm_write(i8* %668, i64 1, %struct._IO_FILE* %669) #13
  %670 = getelementptr inbounds %struct.symbol, %struct.symbol* %658, i64 0, i32 8
  %671 = load i16, i16* %670, align 2
  %672 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @fwriteint16_t(i16 zeroext %671, %struct._IO_FILE* %672) #13
  %673 = load i8, i8* %659, align 4
  %674 = and i8 %673, 14
  %675 = icmp eq i8 %674, 14
  br i1 %675, label %676, label %694

676:                                              ; preds = %663
  %677 = load i8, i8* %668, align 1
  %678 = icmp eq i8 %677, 0
  br i1 %678, label %694, label %679

679:                                              ; preds = %676
  %680 = zext i8 %677 to i32
  %681 = load i32, i32* @seg_nsects, align 4
  %682 = icmp ult i32 %681, %680
  br i1 %682, label %683, label %684, !prof !5

683:                                              ; preds = %679
  call void @nasm_assert_failed(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.13, i64 0, i64 0), i32 1503, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.81, i64 0, i64 0)) #14
  unreachable

684:                                              ; preds = %679
  %685 = load %struct.section**, %struct.section*** @sectstab, align 8
  %686 = zext i8 %677 to i64
  %687 = getelementptr inbounds %struct.section*, %struct.section** %685, i64 %686
  %688 = load %struct.section*, %struct.section** %687, align 8
  %689 = getelementptr inbounds %struct.section, %struct.section* %688, i64 0, i32 12
  %690 = load i64, i64* %689, align 8
  %691 = getelementptr inbounds %struct.symbol, %struct.symbol* %658, i64 0, i32 0, i64 0, i32 0
  %692 = load i64, i64* %691, align 8
  %693 = add i64 %692, %690
  store i64 %693, i64* %691, align 8
  br label %694

694:                                              ; preds = %684, %676, %663
  %695 = getelementptr inbounds %struct.symbol, %struct.symbol* %658, i64 0, i32 0, i64 0, i32 0
  %696 = load i64, i64* %695, align 8
  %697 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %698 = load i32, i32* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 0), align 4
  call void @fwriteaddr(i64 %696, i32 %698, %struct._IO_FILE* %697) #13
  br label %699

699:                                              ; preds = %694, %657
  %700 = getelementptr inbounds %struct.symbol, %struct.symbol* %658, i64 0, i32 1
  %701 = load %struct.symbol*, %struct.symbol** %700, align 8
  %702 = icmp eq %struct.symbol* %701, null
  br i1 %702, label %654, label %657

703:                                              ; preds = %742, %654
  %704 = load i32, i32* @nundefsym, align 4
  %705 = icmp eq i32 %704, 0
  br i1 %705, label %796, label %751

706:                                              ; preds = %654, %742
  %707 = phi i64 [ %747, %742 ], [ 0, %654 ]
  %708 = load %struct.symbol**, %struct.symbol*** @extdefsyms, align 8
  %709 = getelementptr inbounds %struct.symbol*, %struct.symbol** %708, i64 %707
  %710 = load %struct.symbol*, %struct.symbol** %709, align 8
  %711 = getelementptr inbounds %struct.symbol, %struct.symbol* %710, i64 0, i32 5
  %712 = load i32, i32* %711, align 8
  %713 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @fwriteint32_t(i32 %712, %struct._IO_FILE* %713) #13
  %714 = getelementptr inbounds %struct.symbol, %struct.symbol* %710, i64 0, i32 6
  %715 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @nasm_write(i8* %714, i64 1, %struct._IO_FILE* %715) #13
  %716 = getelementptr inbounds %struct.symbol, %struct.symbol* %710, i64 0, i32 7
  %717 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @nasm_write(i8* %716, i64 1, %struct._IO_FILE* %717) #13
  %718 = getelementptr inbounds %struct.symbol, %struct.symbol* %710, i64 0, i32 8
  %719 = load i16, i16* %718, align 2
  %720 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @fwriteint16_t(i16 zeroext %719, %struct._IO_FILE* %720) #13
  %721 = load i8, i8* %714, align 4
  %722 = and i8 %721, 14
  %723 = icmp eq i8 %722, 14
  br i1 %723, label %724, label %742

724:                                              ; preds = %706
  %725 = load i8, i8* %716, align 1
  %726 = icmp eq i8 %725, 0
  br i1 %726, label %742, label %727

727:                                              ; preds = %724
  %728 = zext i8 %725 to i32
  %729 = load i32, i32* @seg_nsects, align 4
  %730 = icmp ult i32 %729, %728
  br i1 %730, label %731, label %732, !prof !5

731:                                              ; preds = %727
  call void @nasm_assert_failed(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.13, i64 0, i64 0), i32 1521, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.81, i64 0, i64 0)) #14
  unreachable

732:                                              ; preds = %727
  %733 = load %struct.section**, %struct.section*** @sectstab, align 8
  %734 = zext i8 %725 to i64
  %735 = getelementptr inbounds %struct.section*, %struct.section** %733, i64 %734
  %736 = load %struct.section*, %struct.section** %735, align 8
  %737 = getelementptr inbounds %struct.section, %struct.section* %736, i64 0, i32 12
  %738 = load i64, i64* %737, align 8
  %739 = getelementptr inbounds %struct.symbol, %struct.symbol* %710, i64 0, i32 0, i64 0, i32 0
  %740 = load i64, i64* %739, align 8
  %741 = add i64 %740, %738
  store i64 %741, i64* %739, align 8
  br label %742

742:                                              ; preds = %732, %724, %706
  %743 = getelementptr inbounds %struct.symbol, %struct.symbol* %710, i64 0, i32 0, i64 0, i32 0
  %744 = load i64, i64* %743, align 8
  %745 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %746 = load i32, i32* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 0), align 4
  call void @fwriteaddr(i64 %744, i32 %746, %struct._IO_FILE* %745) #13
  %747 = add nuw nsw i64 %707, 1
  %748 = load i32, i32* @nextdefsym, align 4
  %749 = zext i32 %748 to i64
  %750 = icmp ult i64 %747, %749
  br i1 %750, label %706, label %703

751:                                              ; preds = %703, %787
  %752 = phi i64 [ %792, %787 ], [ 0, %703 ]
  %753 = load %struct.symbol**, %struct.symbol*** @undefsyms, align 8
  %754 = getelementptr inbounds %struct.symbol*, %struct.symbol** %753, i64 %752
  %755 = load %struct.symbol*, %struct.symbol** %754, align 8
  %756 = getelementptr inbounds %struct.symbol, %struct.symbol* %755, i64 0, i32 5
  %757 = load i32, i32* %756, align 8
  %758 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @fwriteint32_t(i32 %757, %struct._IO_FILE* %758) #13
  %759 = getelementptr inbounds %struct.symbol, %struct.symbol* %755, i64 0, i32 6
  %760 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @nasm_write(i8* %759, i64 1, %struct._IO_FILE* %760) #13
  %761 = getelementptr inbounds %struct.symbol, %struct.symbol* %755, i64 0, i32 7
  %762 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @nasm_write(i8* %761, i64 1, %struct._IO_FILE* %762) #13
  %763 = getelementptr inbounds %struct.symbol, %struct.symbol* %755, i64 0, i32 8
  %764 = load i16, i16* %763, align 2
  %765 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @fwriteint16_t(i16 zeroext %764, %struct._IO_FILE* %765) #13
  %766 = load i8, i8* %759, align 4
  %767 = and i8 %766, 14
  %768 = icmp eq i8 %767, 14
  br i1 %768, label %769, label %787

769:                                              ; preds = %751
  %770 = load i8, i8* %761, align 1
  %771 = icmp eq i8 %770, 0
  br i1 %771, label %787, label %772

772:                                              ; preds = %769
  %773 = zext i8 %770 to i32
  %774 = load i32, i32* @seg_nsects, align 4
  %775 = icmp ult i32 %774, %773
  br i1 %775, label %776, label %777, !prof !5

776:                                              ; preds = %772
  call void @nasm_assert_failed(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.13, i64 0, i64 0), i32 1538, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.81, i64 0, i64 0)) #14
  unreachable

777:                                              ; preds = %772
  %778 = load %struct.section**, %struct.section*** @sectstab, align 8
  %779 = zext i8 %770 to i64
  %780 = getelementptr inbounds %struct.section*, %struct.section** %778, i64 %779
  %781 = load %struct.section*, %struct.section** %780, align 8
  %782 = getelementptr inbounds %struct.section, %struct.section* %781, i64 0, i32 12
  %783 = load i64, i64* %782, align 8
  %784 = getelementptr inbounds %struct.symbol, %struct.symbol* %755, i64 0, i32 0, i64 0, i32 0
  %785 = load i64, i64* %784, align 8
  %786 = add i64 %785, %783
  store i64 %786, i64* %784, align 8
  br label %787

787:                                              ; preds = %777, %769, %751
  %788 = getelementptr inbounds %struct.symbol, %struct.symbol* %755, i64 0, i32 0, i64 0, i32 0
  %789 = load i64, i64* %788, align 8
  %790 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %791 = load i32, i32* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 0), align 4
  call void @fwriteaddr(i64 %789, i32 %791, %struct._IO_FILE* %790) #13
  %792 = add nuw nsw i64 %752, 1
  %793 = load i32, i32* @nundefsym, align 4
  %794 = zext i32 %793 to i64
  %795 = icmp ult i64 %792, %794
  br i1 %795, label %751, label %796

796:                                              ; preds = %787, %648, %703
  %797 = load %struct.SAA*, %struct.SAA** @strs, align 8
  %798 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @saa_fpwrite(%struct.SAA* %797, %struct._IO_FILE* %798) #13
  %799 = load %struct.section*, %struct.section** @sects, align 8
  %800 = getelementptr inbounds %struct.section, %struct.section* %799, i64 0, i32 0
  %801 = load %struct.section*, %struct.section** %800, align 8
  %802 = icmp eq %struct.section* %801, null
  br i1 %802, label %826, label %803

803:                                              ; preds = %796, %820
  %804 = phi %struct.section* [ %824, %820 ], [ %801, %796 ]
  %805 = phi %struct.section* [ %822, %820 ], [ %799, %796 ]
  store %struct.section* %804, %struct.section** @sects, align 8
  %806 = getelementptr inbounds %struct.section, %struct.section* %805, i64 0, i32 1
  %807 = load %struct.SAA*, %struct.SAA** %806, align 8
  call void @saa_free(%struct.SAA* %807) #13
  %808 = getelementptr inbounds %struct.section, %struct.section* %805, i64 0, i32 5
  %809 = load %struct.reloc*, %struct.reloc** %808, align 8
  %810 = icmp eq %struct.reloc* %809, null
  br i1 %810, label %820, label %811

811:                                              ; preds = %803
  %812 = bitcast %struct.reloc** %808 to i64*
  br label %813

813:                                              ; preds = %811, %813
  %814 = phi %struct.reloc* [ %809, %811 ], [ %818, %813 ]
  %815 = bitcast %struct.reloc* %814 to i64*
  %816 = load i64, i64* %815, align 8
  store i64 %816, i64* %812, align 8
  %817 = bitcast %struct.reloc* %814 to i8*
  call void @nasm_free(i8* nonnull %817) #13
  %818 = load %struct.reloc*, %struct.reloc** %808, align 8
  %819 = icmp eq %struct.reloc* %818, null
  br i1 %819, label %820, label %813

820:                                              ; preds = %813, %803
  %821 = bitcast %struct.section* %805 to i8*
  call void @nasm_free(i8* %821) #13
  %822 = load %struct.section*, %struct.section** @sects, align 8
  %823 = getelementptr inbounds %struct.section, %struct.section* %822, i64 0, i32 0
  %824 = load %struct.section*, %struct.section** %823, align 8
  %825 = icmp eq %struct.section* %824, null
  br i1 %825, label %826, label %803

826:                                              ; preds = %820, %796
  %827 = load %struct.SAA*, %struct.SAA** @strs, align 8
  call void @saa_free(%struct.SAA* %827) #13
  %828 = load %struct.RAA*, %struct.RAA** @extsyms, align 8
  call void @raa_free(%struct.RAA* %828) #13
  %829 = load %struct.symbol*, %struct.symbol** @syms, align 8
  %830 = icmp eq %struct.symbol* %829, null
  br i1 %830, label %839, label %831

831:                                              ; preds = %826, %831
  %832 = phi %struct.symbol* [ %837, %831 ], [ %829, %826 ]
  %833 = getelementptr inbounds %struct.symbol, %struct.symbol* %832, i64 0, i32 1
  %834 = bitcast %struct.symbol** %833 to i64*
  %835 = load i64, i64* %834, align 8
  store i64 %835, i64* bitcast (%struct.symbol** @syms to i64*), align 8
  %836 = bitcast %struct.symbol* %832 to i8*
  call void @nasm_free(i8* nonnull %836) #13
  %837 = load %struct.symbol*, %struct.symbol** @syms, align 8
  %838 = icmp eq %struct.symbol* %837, null
  br i1 %838, label %839, label %831

839:                                              ; preds = %831, %826
  %840 = load i8*, i8** bitcast (%struct.symbol*** @extdefsyms to i8**), align 8
  call void @nasm_free(i8* %840) #13
  %841 = load i8*, i8** bitcast (%struct.symbol*** @undefsyms to i8**), align 8
  call void @nasm_free(i8* %841) #13
  %842 = load i8*, i8** bitcast (%struct.section*** @sectstab to i8**), align 8
  call void @nasm_free(i8* %842) #13
  %843 = load %struct.RAA*, %struct.RAA** @section_by_index, align 8
  call void @raa_free(%struct.RAA* %843) #13
  call void @hash_free(%struct.hash_table* nonnull @section_by_name) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @macho64_init() #0 {
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 bitcast (%struct.macho_fmt* @fmt to i8*), i8* align 4 bitcast (%struct.macho_fmt* @macho64_fmt to i8*), i64 52, i1 false)
  %1 = load i64, i64* bitcast (i8** @inname to i64*), align 8
  store i64 %1, i64* bitcast (i8** @module_name to i64*), align 8
  store %struct.section* null, %struct.section** @sects, align 8
  store %struct.section** @sects, %struct.section*** @sectstail, align 8
  store i32 -1, i32* getelementptr inbounds (%struct.section, %struct.section* @absolute_sect, i64 0, i32 2), align 8
  store %struct.symbol* null, %struct.symbol** @syms, align 8
  store %struct.symbol** @syms, %struct.symbol*** @symstail, align 8
  store i32 0, i32* @nsyms, align 4
  store i32 0, i32* @nlocalsym, align 4
  store i32 0, i32* @nextdefsym, align 4
  store i32 0, i32* @nundefsym, align 4
  store %struct.RAA* null, %struct.RAA** @extsyms, align 8
  %2 = tail call %struct.SAA* @saa_init(i64 1) #13
  store %struct.SAA* %2, %struct.SAA** @strs, align 8
  store %struct.RAA* null, %struct.RAA** @section_by_index, align 8
  tail call void @saa_wbytes(%struct.SAA* %2, i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @zero_buffer, i64 0, i64 0), i64 1) #13
  store i32 1, i32* @strslen, align 4
  %3 = tail call i32 @seg_alloc() #13
  %4 = add nsw i32 %3, 1
  store i32 %4, i32* @macho_tlvp_sect, align 4
  tail call void @backend_label(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i64 0, i64 0), i32 %4, i64 0) #13
  %5 = tail call i32 @seg_alloc() #13
  %6 = add nsw i32 %5, 1
  store i32 %6, i32* @macho_gotpcrel_sect, align 4
  tail call void @backend_label(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.43, i64 0, i64 0), i32 %6, i64 0) #13
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @macho_dbg_init() #2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @macho_dbg_linenum(i8*, i32, i32) #0 {
  %4 = tail call noalias i8* @nasm_basename(i8* %0) #13
  %5 = tail call noalias i8* @nasm_dirname(i8* %0) #13
  %6 = load %struct.file_list*, %struct.file_list** @dw_cur_file, align 8
  %7 = icmp eq %struct.file_list* %6, null
  br i1 %7, label %20, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.file_list, %struct.file_list* %6, i64 0, i32 2
  %10 = load i8*, i8** %9, align 8
  %11 = tail call i32 @strcmp(i8* %4, i8* %10) #15
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %20

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.file_list, %struct.file_list* %6, i64 0, i32 4
  %15 = load %struct.dir_list*, %struct.dir_list** %14, align 8
  %16 = getelementptr inbounds %struct.dir_list, %struct.dir_list* %15, i64 0, i32 2
  %17 = load i8*, i8** %16, align 8
  %18 = tail call i32 @strcmp(i8* %5, i8* %17) #15
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %84, label %20

20:                                               ; preds = %13, %8, %3
  %21 = load %struct.file_list*, %struct.file_list** @dw_head_file, align 8
  %22 = icmp eq %struct.file_list* %21, null
  br i1 %22, label %41, label %23

23:                                               ; preds = %20, %37
  %24 = phi %struct.file_list* [ %39, %37 ], [ %21, %20 ]
  %25 = getelementptr inbounds %struct.file_list, %struct.file_list* %24, i64 0, i32 2
  %26 = load i8*, i8** %25, align 8
  %27 = tail call i32 @strcmp(i8* %4, i8* %26) #15
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %37

29:                                               ; preds = %23
  %30 = getelementptr inbounds %struct.file_list, %struct.file_list* %24, i64 0, i32 4
  %31 = load %struct.dir_list*, %struct.dir_list** %30, align 8
  %32 = getelementptr inbounds %struct.dir_list, %struct.dir_list* %31, i64 0, i32 2
  %33 = load i8*, i8** %32, align 8
  %34 = tail call i32 @strcmp(i8* %5, i8* %33) #15
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %29
  store %struct.file_list* %24, %struct.file_list** @dw_cur_file, align 8
  br label %84

37:                                               ; preds = %29, %23
  %38 = getelementptr inbounds %struct.file_list, %struct.file_list* %24, i64 0, i32 0
  %39 = load %struct.file_list*, %struct.file_list** %38, align 8
  %40 = icmp eq %struct.file_list* %39, null
  br i1 %40, label %41, label %23

41:                                               ; preds = %37, %20
  %42 = tail call noalias i8* @nasm_zalloc(i64 40) #16
  store i8* %42, i8** bitcast (%struct.file_list** @dw_cur_file to i8**), align 8
  %43 = load i32, i32* @dw_num_files, align 4
  %44 = add i32 %43, 1
  store i32 %44, i32* @dw_num_files, align 4
  %45 = getelementptr inbounds i8, i8* %42, i64 24
  %46 = bitcast i8* %45 to i32*
  store i32 %44, i32* %46, align 8
  %47 = getelementptr inbounds i8, i8* %42, i64 16
  %48 = bitcast i8* %47 to i8**
  store i8* %4, i8** %48, align 8
  %49 = load %struct.file_list*, %struct.file_list** @dw_head_file, align 8
  %50 = icmp eq %struct.file_list* %49, null
  %51 = ptrtoint i8* %42 to i64
  %52 = load i64*, i64** bitcast (%struct.file_list*** @dw_last_file_next to i64**), align 8
  %53 = select i1 %50, i64* bitcast (%struct.file_list** @dw_head_file to i64*), i64* %52
  store i64 %51, i64* %53, align 8
  store i8* %42, i8** bitcast (%struct.file_list*** @dw_last_file_next to i8**), align 8
  %54 = load %struct.dir_list*, %struct.dir_list** @dw_head_dir, align 8
  %55 = icmp eq %struct.dir_list* %54, null
  br i1 %55, label %69, label %56

56:                                               ; preds = %41, %65
  %57 = phi %struct.dir_list* [ %67, %65 ], [ %54, %41 ]
  %58 = getelementptr inbounds %struct.dir_list, %struct.dir_list* %57, i64 0, i32 2
  %59 = load i8*, i8** %58, align 8
  %60 = tail call i32 @strcmp(i8* %5, i8* %59) #15
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %65

62:                                               ; preds = %56
  %63 = getelementptr inbounds i8, i8* %42, i64 32
  %64 = bitcast i8* %63 to %struct.dir_list**
  store %struct.dir_list* %57, %struct.dir_list** %64, align 8
  br label %84

65:                                               ; preds = %56
  %66 = getelementptr inbounds %struct.dir_list, %struct.dir_list* %57, i64 0, i32 0
  %67 = load %struct.dir_list*, %struct.dir_list** %66, align 8
  %68 = icmp eq %struct.dir_list* %67, null
  br i1 %68, label %69, label %56

69:                                               ; preds = %65, %41
  %70 = tail call noalias i8* @nasm_zalloc(i64 32) #16
  %71 = load i32, i32* @dw_num_dirs, align 4
  %72 = add i32 %71, 1
  store i32 %72, i32* @dw_num_dirs, align 4
  %73 = getelementptr inbounds i8, i8* %70, i64 24
  %74 = bitcast i8* %73 to i32*
  store i32 %71, i32* %74, align 8
  %75 = getelementptr inbounds i8, i8* %70, i64 16
  %76 = bitcast i8* %75 to i8**
  store i8* %5, i8** %76, align 8
  %77 = load %struct.dir_list*, %struct.dir_list** @dw_head_dir, align 8
  %78 = icmp eq %struct.dir_list* %77, null
  %79 = load i8**, i8*** bitcast (%struct.dir_list*** @dw_last_dir_next to i8***), align 8
  %80 = select i1 %78, i8** bitcast (%struct.dir_list** @dw_head_dir to i8**), i8** %79
  store i8* %70, i8** %80, align 8
  store i8* %70, i8** bitcast (%struct.dir_list*** @dw_last_dir_next to i8**), align 8
  %81 = load %struct.file_list*, %struct.file_list** @dw_cur_file, align 8
  %82 = getelementptr inbounds %struct.file_list, %struct.file_list* %81, i64 0, i32 4
  %83 = bitcast %struct.dir_list** %82 to i8**
  store i8* %70, i8** %83, align 8
  br label %84

84:                                               ; preds = %69, %62, %36, %13
  store i1 true, i1* @dbg_immcall, align 1
  store i32 %1, i32* @cur_line, align 4
  ret void
}

declare void @null_debug_deflabel(i8*, i32, i64, i32, i8*) #1

declare void @null_debug_directive(i8*, i8*) #1

declare void @null_debug_typevalue(i32) #1

; Function Attrs: nounwind ssp uwtable
define internal void @macho_dbg_output(i32, i8* nocapture readonly) #0 {
  %3 = getelementptr inbounds i8, i8* %1, i64 8
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = load %struct.dw_sect_list*, %struct.dw_sect_list** @dw_cur_sect, align 8
  %7 = icmp eq %struct.dw_sect_list* %6, null
  br i1 %7, label %12, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.dw_sect_list, %struct.dw_sect_list* %6, i64 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, %5
  br i1 %11, label %59, label %12

12:                                               ; preds = %2, %8
  %13 = load %struct.dw_sect_list*, %struct.dw_sect_list** @dw_head_sect, align 8
  %14 = icmp ne %struct.dw_sect_list* %13, null
  %15 = load i32, i32* @dw_num_sects, align 4
  %16 = icmp ne i32 %15, 0
  %17 = and i1 %14, %16
  br i1 %17, label %18, label %30

18:                                               ; preds = %12, %25
  %19 = phi i32 [ %28, %25 ], [ 0, %12 ]
  %20 = phi %struct.dw_sect_list* [ %27, %25 ], [ %13, %12 ]
  %21 = getelementptr inbounds %struct.dw_sect_list, %struct.dw_sect_list* %20, i64 0, i32 1
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %22, %5
  br i1 %23, label %24, label %25

24:                                               ; preds = %18
  store %struct.dw_sect_list* %20, %struct.dw_sect_list** @dw_cur_sect, align 8
  br label %59

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.dw_sect_list, %struct.dw_sect_list* %20, i64 0, i32 5
  %27 = load %struct.dw_sect_list*, %struct.dw_sect_list** %26, align 8
  %28 = add nuw i32 %19, 1
  %29 = icmp ult i32 %28, %15
  br i1 %29, label %18, label %30

30:                                               ; preds = %25, %12
  %31 = tail call noalias i8* @nasm_zalloc(i64 48) #16
  store i8* %31, i8** bitcast (%struct.dw_sect_list** @dw_cur_sect to i8**), align 8
  %32 = load i32, i32* @dw_num_sects, align 4
  %33 = add i32 %32, 1
  store i32 %33, i32* @dw_num_sects, align 4
  %34 = tail call %struct.SAA* @saa_init(i64 1) #13
  %35 = load %struct.dw_sect_list*, %struct.dw_sect_list** @dw_cur_sect, align 8
  %36 = getelementptr inbounds %struct.dw_sect_list, %struct.dw_sect_list* %35, i64 0, i32 0
  store %struct.SAA* %34, %struct.SAA** %36, align 8
  %37 = getelementptr inbounds %struct.dw_sect_list, %struct.dw_sect_list* %35, i64 0, i32 4
  store i32 1, i32* %37, align 8
  %38 = getelementptr inbounds %struct.dw_sect_list, %struct.dw_sect_list* %35, i64 0, i32 2
  store i32 1, i32* %38, align 4
  %39 = getelementptr inbounds %struct.dw_sect_list, %struct.dw_sect_list* %35, i64 0, i32 3
  store i64 0, i64* %39, align 8
  %40 = getelementptr inbounds %struct.dw_sect_list, %struct.dw_sect_list* %35, i64 0, i32 5
  store %struct.dw_sect_list* null, %struct.dw_sect_list** %40, align 8
  %41 = getelementptr inbounds %struct.dw_sect_list, %struct.dw_sect_list* %35, i64 0, i32 1
  store i32 %5, i32* %41, align 8
  tail call void @saa_write8(%struct.SAA* %34, i8 zeroext 0) #13
  %42 = load %struct.ofmt*, %struct.ofmt** @ofmt, align 8
  %43 = icmp eq %struct.ofmt* %42, @of_macho64
  %44 = select i1 %43, i8 9, i8 5
  tail call void @saa_write8(%struct.SAA* %34, i8 zeroext %44) #13
  tail call void @saa_write8(%struct.SAA* %34, i8 zeroext 2) #13
  %45 = load %struct.ofmt*, %struct.ofmt** @ofmt, align 8
  %46 = icmp eq %struct.ofmt* %45, @of_macho64
  br i1 %46, label %47, label %48

47:                                               ; preds = %30
  tail call void @saa_write64(%struct.SAA* %34, i64 0) #13
  br label %49

48:                                               ; preds = %30
  tail call void @saa_write32(%struct.SAA* %34, i32 0) #13
  br label %49

49:                                               ; preds = %48, %47
  %50 = load %struct.dw_sect_list*, %struct.dw_sect_list** @dw_head_sect, align 8
  %51 = icmp eq %struct.dw_sect_list* %50, null
  %52 = load i64, i64* bitcast (%struct.dw_sect_list** @dw_cur_sect to i64*), align 8
  %53 = inttoptr i64 %52 to %struct.dw_sect_list*
  br i1 %51, label %54, label %55

54:                                               ; preds = %49
  store i64 %52, i64* bitcast (%struct.dw_sect_list** @dw_last_sect to i64*), align 8
  store i64 %52, i64* bitcast (%struct.dw_sect_list** @dw_head_sect to i64*), align 8
  br label %59

55:                                               ; preds = %49
  %56 = load %struct.dw_sect_list*, %struct.dw_sect_list** @dw_last_sect, align 8
  %57 = getelementptr inbounds %struct.dw_sect_list, %struct.dw_sect_list* %56, i64 0, i32 5
  %58 = bitcast %struct.dw_sect_list** %57 to i64*
  store i64 %52, i64* %58, align 8
  store i64 %52, i64* bitcast (%struct.dw_sect_list** @dw_last_sect to i64*), align 8
  br label %59

59:                                               ; preds = %8, %24, %54, %55
  %60 = phi %struct.dw_sect_list* [ %6, %8 ], [ %20, %24 ], [ %53, %54 ], [ %53, %55 ]
  %61 = load i1, i1* @dbg_immcall, align 1
  br i1 %61, label %62, label %108

62:                                               ; preds = %59
  %63 = load i32, i32* @cur_line, align 4
  %64 = getelementptr inbounds %struct.dw_sect_list, %struct.dw_sect_list* %60, i64 0, i32 2
  %65 = load i32, i32* %64, align 4
  %66 = sub i32 %63, %65
  %67 = bitcast i8* %1 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.dw_sect_list, %struct.dw_sect_list* %60, i64 0, i32 3
  %70 = load i64, i64* %69, align 8
  %71 = sub i64 %68, %70
  %72 = trunc i64 %71 to i32
  %73 = load %struct.file_list*, %struct.file_list** @dw_cur_file, align 8
  %74 = getelementptr inbounds %struct.file_list, %struct.file_list* %73, i64 0, i32 3
  %75 = load i32, i32* %74, align 8
  %76 = getelementptr inbounds %struct.dw_sect_list, %struct.dw_sect_list* %60, i64 0, i32 0
  %77 = load %struct.SAA*, %struct.SAA** %76, align 8
  %78 = getelementptr inbounds %struct.dw_sect_list, %struct.dw_sect_list* %60, i64 0, i32 4
  %79 = load i32, i32* %78, align 8
  %80 = icmp eq i32 %75, %79
  br i1 %80, label %85, label %81

81:                                               ; preds = %62
  tail call void @saa_write8(%struct.SAA* %77, i8 zeroext 4) #13
  %82 = trunc i32 %75 to i8
  tail call void @saa_write8(%struct.SAA* %77, i8 zeroext %82) #13
  %83 = load %struct.dw_sect_list*, %struct.dw_sect_list** @dw_cur_sect, align 8
  %84 = getelementptr inbounds %struct.dw_sect_list, %struct.dw_sect_list* %83, i64 0, i32 4
  store i32 %75, i32* %84, align 8
  br label %85

85:                                               ; preds = %62, %81
  %86 = icmp eq i32 %66, 0
  br i1 %86, label %107, label %87

87:                                               ; preds = %85
  %88 = add i32 %66, 5
  %89 = mul nsw i32 %72, 14
  %90 = add i32 %66, 18
  %91 = add i32 %90, %89
  %92 = icmp ult i32 %88, 14
  %93 = icmp slt i32 %91, 256
  %94 = and i1 %92, %93
  br i1 %94, label %95, label %97

95:                                               ; preds = %87
  %96 = trunc i32 %91 to i8
  br label %100

97:                                               ; preds = %87
  tail call void @saa_write8(%struct.SAA* %77, i8 zeroext 3) #13
  tail call void @saa_wleb128s(%struct.SAA* %77, i32 %66) #13
  %98 = icmp eq i32 %72, 0
  br i1 %98, label %100, label %99

99:                                               ; preds = %97
  tail call void @saa_write8(%struct.SAA* %77, i8 zeroext 2) #13
  tail call void @saa_wleb128u(%struct.SAA* %77, i32 %72) #13
  br label %100

100:                                              ; preds = %99, %97, %95
  %101 = phi i8 [ %96, %95 ], [ 1, %97 ], [ 1, %99 ]
  tail call void @saa_write8(%struct.SAA* %77, i8 zeroext %101) #13
  %102 = load i32, i32* @cur_line, align 4
  %103 = load %struct.dw_sect_list*, %struct.dw_sect_list** @dw_cur_sect, align 8
  %104 = getelementptr inbounds %struct.dw_sect_list, %struct.dw_sect_list* %103, i64 0, i32 2
  store i32 %102, i32* %104, align 4
  %105 = load i64, i64* %67, align 8
  %106 = getelementptr inbounds %struct.dw_sect_list, %struct.dw_sect_list* %103, i64 0, i32 3
  store i64 %105, i64* %106, align 8
  br label %107

107:                                              ; preds = %85, %100
  store i1 false, i1* @dbg_immcall, align 1
  br label %108

108:                                              ; preds = %107, %59
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @macho_dbg_cleanup() #0 {
  %1 = alloca [34 x i8], align 16
  %2 = alloca i32, align 4
  %3 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #13
  store i32 0, i32* %2, align 4
  %4 = call i32 @macho_section(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i64 0, i64 0), i32* nonnull %2) #13
  %5 = call i32 @macho_section(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i32* nonnull %2) #13
  %6 = call i32 @macho_section(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.9, i64 0, i64 0), i32* nonnull %2) #13
  %7 = call i32 @macho_section(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i64 0, i64 0), i32* nonnull %2) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #13
  %8 = load %struct.dw_sect_list*, %struct.dw_sect_list** @dw_head_sect, align 8
  %9 = icmp eq %struct.dw_sect_list* %8, null
  br i1 %9, label %41, label %10

10:                                               ; preds = %0, %24
  %11 = phi %struct.dw_sect_list* [ %39, %24 ], [ %8, %0 ]
  %12 = phi i64 [ %37, %24 ], [ 0, %0 ]
  %13 = phi i64 [ %36, %24 ], [ 0, %0 ]
  %14 = getelementptr inbounds %struct.dw_sect_list, %struct.dw_sect_list* %11, i64 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = and i32 %15, -1073741823
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %24

18:                                               ; preds = %10
  %19 = load %struct.RAA*, %struct.RAA** @section_by_index, align 8
  %20 = ashr i32 %15, 1
  %21 = sext i32 %20 to i64
  %22 = tail call i8* @raa_read_ptr(%struct.RAA* %19, i64 %21) #13
  %23 = bitcast i8* %22 to %struct.section*
  br label %24

24:                                               ; preds = %18, %10
  %25 = phi %struct.section* [ %23, %18 ], [ null, %10 ]
  %26 = getelementptr inbounds %struct.section, %struct.section* %25, i64 0, i32 13
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %struct.dw_sect_list, %struct.dw_sect_list* %11, i64 0, i32 0
  %29 = load %struct.SAA*, %struct.SAA** %28, align 8
  tail call void @saa_write8(%struct.SAA* %29, i8 zeroext 2) #13
  %30 = getelementptr inbounds %struct.dw_sect_list, %struct.dw_sect_list* %11, i64 0, i32 3
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %27, %31
  %33 = trunc i64 %32 to i8
  tail call void @saa_write8(%struct.SAA* %29, i8 zeroext %33) #13
  tail call void @saa_write8(%struct.SAA* %29, i8 zeroext 0) #13
  tail call void @saa_write8(%struct.SAA* %29, i8 zeroext 1) #13
  tail call void @saa_write8(%struct.SAA* %29, i8 zeroext 1) #13
  %34 = getelementptr inbounds %struct.SAA, %struct.SAA* %29, i64 0, i32 5
  %35 = load i64, i64* %34, align 8
  %36 = add i64 %35, %13
  %37 = add i64 %27, %12
  %38 = getelementptr inbounds %struct.dw_sect_list, %struct.dw_sect_list* %11, i64 0, i32 5
  %39 = load %struct.dw_sect_list*, %struct.dw_sect_list** %38, align 8
  %40 = icmp eq %struct.dw_sect_list* %39, null
  br i1 %40, label %41, label %10

41:                                               ; preds = %24, %0
  %42 = phi i64 [ 0, %0 ], [ %36, %24 ]
  %43 = phi i64 [ 0, %0 ], [ %37, %24 ]
  %44 = tail call %struct.SAA* @saa_init(i64 1) #13
  %45 = getelementptr inbounds [34 x i8], [34 x i8]* %1, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 34, i8* nonnull %45) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %45, i8 -86, i64 34, i1 false) #13
  %46 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %45, i64 34, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i64 0, i64 0)) #13
  %47 = call i8** @hash_find(%struct.hash_table* nonnull @section_by_name, i8* nonnull %45, %struct.hash_insert* null) #13
  %48 = icmp eq i8** %47, null
  br i1 %48, label %49, label %50

49:                                               ; preds = %41
  call void @llvm.lifetime.end.p0i8(i64 34, i8* nonnull %45) #13
  br label %54

50:                                               ; preds = %41
  %51 = bitcast i8** %47 to %struct.section**
  %52 = load %struct.section*, %struct.section** %51, align 8
  call void @llvm.lifetime.end.p0i8(i64 34, i8* nonnull %45) #13
  %53 = icmp eq %struct.section* %52, null
  br i1 %53, label %54, label %55, !prof !5

54:                                               ; preds = %50, %49
  call void @nasm_assert_failed(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.13, i64 0, i64 0), i32 1874, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.14, i64 0, i64 0)) #14
  unreachable

55:                                               ; preds = %50
  call void @saa_write8(%struct.SAA* %44, i8 zeroext 1) #13
  call void @saa_write8(%struct.SAA* %44, i8 zeroext 1) #13
  call void @saa_write8(%struct.SAA* %44, i8 zeroext -5) #13
  call void @saa_write8(%struct.SAA* %44, i8 zeroext 14) #13
  call void @saa_write8(%struct.SAA* %44, i8 zeroext 13) #13
  call void @saa_write8(%struct.SAA* %44, i8 zeroext 0) #13
  call void @saa_write8(%struct.SAA* %44, i8 zeroext 1) #13
  call void @saa_write8(%struct.SAA* %44, i8 zeroext 1) #13
  call void @saa_write8(%struct.SAA* %44, i8 zeroext 1) #13
  call void @saa_write8(%struct.SAA* %44, i8 zeroext 1) #13
  call void @saa_write8(%struct.SAA* %44, i8 zeroext 0) #13
  call void @saa_write8(%struct.SAA* %44, i8 zeroext 0) #13
  call void @saa_write8(%struct.SAA* %44, i8 zeroext 0) #13
  call void @saa_write8(%struct.SAA* %44, i8 zeroext 1) #13
  call void @saa_write8(%struct.SAA* %44, i8 zeroext 0) #13
  call void @saa_write8(%struct.SAA* %44, i8 zeroext 0) #13
  call void @saa_write8(%struct.SAA* %44, i8 zeroext 1) #13
  %56 = load %struct.dir_list*, %struct.dir_list** @dw_head_dir, align 8
  %57 = icmp eq %struct.dir_list* %56, null
  br i1 %57, label %66, label %58

58:                                               ; preds = %55, %58
  %59 = phi %struct.dir_list* [ %64, %58 ], [ %56, %55 ]
  %60 = getelementptr inbounds %struct.dir_list, %struct.dir_list* %59, i64 0, i32 2
  %61 = load i8*, i8** %60, align 8
  %62 = call i64 @saa_wcstring(%struct.SAA* %44, i8* %61) #13
  %63 = getelementptr inbounds %struct.dir_list, %struct.dir_list* %59, i64 0, i32 0
  %64 = load %struct.dir_list*, %struct.dir_list** %63, align 8
  %65 = icmp eq %struct.dir_list* %64, null
  br i1 %65, label %66, label %58

66:                                               ; preds = %58, %55
  call void @saa_write8(%struct.SAA* %44, i8 zeroext 0) #13
  %67 = load %struct.file_list*, %struct.file_list** @dw_head_file, align 8
  %68 = icmp eq %struct.file_list* %67, null
  br i1 %68, label %82, label %69

69:                                               ; preds = %66, %69
  %70 = phi %struct.file_list* [ %80, %69 ], [ %67, %66 ]
  %71 = getelementptr inbounds %struct.file_list, %struct.file_list* %70, i64 0, i32 2
  %72 = load i8*, i8** %71, align 8
  %73 = call i64 @saa_wcstring(%struct.SAA* %44, i8* %72) #13
  %74 = getelementptr inbounds %struct.file_list, %struct.file_list* %70, i64 0, i32 4
  %75 = load %struct.dir_list*, %struct.dir_list** %74, align 8
  %76 = getelementptr inbounds %struct.dir_list, %struct.dir_list* %75, i64 0, i32 3
  %77 = load i32, i32* %76, align 8
  %78 = trunc i32 %77 to i8
  call void @saa_write8(%struct.SAA* %44, i8 zeroext %78) #13
  call void @saa_write8(%struct.SAA* %44, i8 zeroext 0) #13
  call void @saa_write8(%struct.SAA* %44, i8 zeroext 0) #13
  %79 = getelementptr inbounds %struct.file_list, %struct.file_list* %70, i64 0, i32 0
  %80 = load %struct.file_list*, %struct.file_list** %79, align 8
  %81 = icmp eq %struct.file_list* %80, null
  br i1 %81, label %82, label %69

82:                                               ; preds = %69, %66
  call void @saa_write8(%struct.SAA* %44, i8 zeroext 0) #13
  %83 = getelementptr inbounds %struct.SAA, %struct.SAA* %44, i64 0, i32 5
  %84 = load i64, i64* %83, align 8
  %85 = add i64 %84, %42
  %86 = add i64 %85, 10
  %87 = call noalias i8* @nasm_malloc(i64 %86) #16
  %88 = bitcast i8* %87 to i32*
  %89 = trunc i64 %85 to i32
  %90 = add i32 %89, 6
  %91 = getelementptr inbounds i8, i8* %87, i64 4
  store i32 %90, i32* %88, align 4
  %92 = bitcast i8* %91 to i16*
  %93 = getelementptr inbounds i8, i8* %87, i64 6
  store i16 2, i16* %92, align 2
  %94 = bitcast i8* %93 to i32*
  %95 = trunc i64 %84 to i32
  %96 = getelementptr inbounds i8, i8* %87, i64 10
  store i32 %95, i32* %94, align 4
  call void @saa_rnbytes(%struct.SAA* %44, i8* %96, i64 %84) #13
  call void @saa_free(%struct.SAA* %44) #13
  %97 = load %struct.dw_sect_list*, %struct.dw_sect_list** @dw_head_sect, align 8
  %98 = icmp eq %struct.dw_sect_list* %97, null
  br i1 %98, label %112, label %99

99:                                               ; preds = %82
  %100 = getelementptr inbounds i8, i8* %96, i64 %84
  br label %101

101:                                              ; preds = %101, %99
  %102 = phi %struct.dw_sect_list* [ %110, %101 ], [ %97, %99 ]
  %103 = phi i8* [ %108, %101 ], [ %100, %99 ]
  %104 = getelementptr inbounds %struct.dw_sect_list, %struct.dw_sect_list* %102, i64 0, i32 0
  %105 = load %struct.SAA*, %struct.SAA** %104, align 8
  %106 = getelementptr inbounds %struct.SAA, %struct.SAA* %105, i64 0, i32 5
  %107 = load i64, i64* %106, align 8
  call void @saa_rnbytes(%struct.SAA* %105, i8* %103, i64 %107) #13
  %108 = getelementptr inbounds i8, i8* %103, i64 %107
  call void @saa_free(%struct.SAA* %105) #13
  %109 = getelementptr inbounds %struct.dw_sect_list, %struct.dw_sect_list* %102, i64 0, i32 5
  %110 = load %struct.dw_sect_list*, %struct.dw_sect_list** %109, align 8
  %111 = icmp eq %struct.dw_sect_list* %110, null
  br i1 %111, label %112, label %101

112:                                              ; preds = %101, %82
  %113 = getelementptr inbounds %struct.section, %struct.section* %52, i64 0, i32 2
  %114 = load i32, i32* %113, align 8
  call void @macho_output(i32 %114, i8* %87, i32 0, i64 %86, i32 -1, i32 0) #13
  call void @nasm_free(i8* %87) #13
  %115 = call %struct.SAA* @saa_init(i64 1) #13
  %116 = load i8*, i8** @module_name, align 8
  %117 = call noalias i8* @nasm_realpath(i8* %116) #13
  %118 = call noalias i8* @nasm_basename(i8* %117) #13
  %119 = call noalias i8* @nasm_dirname(i8* %117) #13
  call void @llvm.lifetime.start.p0i8(i64 34, i8* nonnull %45) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %45, i8 -86, i64 34, i1 false) #13
  %120 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %45, i64 34, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.15, i64 0, i64 0)) #13
  %121 = call i8** @hash_find(%struct.hash_table* nonnull @section_by_name, i8* nonnull %45, %struct.hash_insert* null) #13
  %122 = icmp eq i8** %121, null
  br i1 %122, label %123, label %124

123:                                              ; preds = %112
  call void @llvm.lifetime.end.p0i8(i64 34, i8* nonnull %45) #13
  br label %128

124:                                              ; preds = %112
  %125 = bitcast i8** %121 to %struct.section**
  %126 = load %struct.section*, %struct.section** %125, align 8
  call void @llvm.lifetime.end.p0i8(i64 34, i8* nonnull %45) #13
  %127 = icmp eq %struct.section* %126, null
  br i1 %127, label %128, label %129, !prof !5

128:                                              ; preds = %124, %123
  call void @nasm_assert_failed(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.13, i64 0, i64 0), i32 1942, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.14, i64 0, i64 0)) #14
  unreachable

129:                                              ; preds = %124
  %130 = call i8* @nasm_signature() #13
  %131 = call i64 @saa_wcstring(%struct.SAA* %115, i8* %130) #13
  %132 = call i64 @saa_wcstring(%struct.SAA* %115, i8* %118) #13
  %133 = call i64 @saa_wcstring(%struct.SAA* %115, i8* %119) #13
  %134 = getelementptr inbounds %struct.SAA, %struct.SAA* %115, i64 0, i32 5
  %135 = load i64, i64* %134, align 8
  %136 = call noalias i8* @nasm_malloc(i64 %135) #16
  call void @saa_rnbytes(%struct.SAA* %115, i8* %136, i64 %135) #13
  %137 = getelementptr inbounds %struct.section, %struct.section* %126, i64 0, i32 2
  %138 = load i32, i32* %137, align 8
  call void @macho_output(i32 %138, i8* %136, i32 0, i64 %135, i32 -1, i32 0) #13
  call void @nasm_free(i8* %117) #13
  call void @nasm_free(i8* %118) #13
  call void @nasm_free(i8* %119) #13
  call void @saa_free(%struct.SAA* %115) #13
  call void @nasm_free(i8* %136) #13
  %139 = call %struct.SAA* @saa_init(i64 1) #13
  call void @llvm.lifetime.start.p0i8(i64 34, i8* nonnull %45) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %45, i8 -86, i64 34, i1 false) #13
  %140 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %45, i64 34, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.16, i64 0, i64 0)) #13
  %141 = call i8** @hash_find(%struct.hash_table* nonnull @section_by_name, i8* nonnull %45, %struct.hash_insert* null) #13
  %142 = icmp eq i8** %141, null
  br i1 %142, label %143, label %144

143:                                              ; preds = %129
  call void @llvm.lifetime.end.p0i8(i64 34, i8* nonnull %45) #13
  br label %148

144:                                              ; preds = %129
  %145 = bitcast i8** %141 to %struct.section**
  %146 = load %struct.section*, %struct.section** %145, align 8
  call void @llvm.lifetime.end.p0i8(i64 34, i8* nonnull %45) #13
  %147 = icmp eq %struct.section* %146, null
  br i1 %147, label %148, label %149, !prof !5

148:                                              ; preds = %144, %143
  call void @nasm_assert_failed(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.13, i64 0, i64 0), i32 1966, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.14, i64 0, i64 0)) #14
  unreachable

149:                                              ; preds = %144
  %150 = add i64 %132, %131
  %151 = trunc i64 %150 to i32
  %152 = trunc i64 %131 to i32
  call void @saa_write16(%struct.SAA* %139, i16 zeroext 2) #13
  call void @saa_write32(%struct.SAA* %139, i32 0) #13
  %153 = load %struct.ofmt*, %struct.ofmt** @ofmt, align 8
  %154 = icmp eq %struct.ofmt* %153, @of_macho64
  %155 = select i1 %154, i8 8, i8 4
  call void @saa_write8(%struct.SAA* %139, i8 zeroext %155) #13
  call void @saa_write8(%struct.SAA* %139, i8 zeroext 1) #13
  call void @saa_write32(%struct.SAA* %139, i32 0) #13
  call void @saa_write16(%struct.SAA* %139, i16 zeroext -32767) #13
  call void @saa_write32(%struct.SAA* %139, i32 %152) #13
  call void @saa_write32(%struct.SAA* %139, i32 %151) #13
  call void @saa_write32(%struct.SAA* %139, i32 0) #13
  %156 = load %struct.ofmt*, %struct.ofmt** @ofmt, align 8
  %157 = icmp eq %struct.ofmt* %156, @of_macho64
  br i1 %157, label %158, label %159

158:                                              ; preds = %149
  call void @saa_write64(%struct.SAA* %139, i64 0) #13
  call void @saa_write64(%struct.SAA* %139, i64 %43) #13
  br label %161

159:                                              ; preds = %149
  call void @saa_write32(%struct.SAA* %139, i32 0) #13
  %160 = trunc i64 %43 to i32
  call void @saa_write32(%struct.SAA* %139, i32 %160) #13
  br label %161

161:                                              ; preds = %159, %158
  call void @saa_write8(%struct.SAA* %139, i8 zeroext 2) #13
  %162 = load %struct.ofmt*, %struct.ofmt** @ofmt, align 8
  %163 = icmp eq %struct.ofmt* %162, @of_macho64
  br i1 %163, label %164, label %165

164:                                              ; preds = %161
  call void @saa_write64(%struct.SAA* %139, i64 0) #13
  call void @saa_write64(%struct.SAA* %139, i64 0) #13
  br label %166

165:                                              ; preds = %161
  call void @saa_write32(%struct.SAA* %139, i32 0) #13
  call void @saa_write32(%struct.SAA* %139, i32 0) #13
  br label %166

166:                                              ; preds = %165, %164
  call void @saa_write8(%struct.SAA* %139, i8 zeroext 0) #13
  %167 = getelementptr inbounds %struct.SAA, %struct.SAA* %139, i64 0, i32 5
  %168 = load i64, i64* %167, align 8
  %169 = add i64 %168, 4
  %170 = call noalias i8* @nasm_malloc(i64 %169) #16
  %171 = bitcast i8* %170 to i32*
  %172 = trunc i64 %168 to i32
  %173 = getelementptr inbounds i8, i8* %170, i64 4
  store i32 %172, i32* %171, align 4
  call void @saa_rnbytes(%struct.SAA* %139, i8* %173, i64 %168) #13
  %174 = getelementptr inbounds %struct.section, %struct.section* %146, i64 0, i32 2
  %175 = load i32, i32* %174, align 8
  call void @macho_output(i32 %175, i8* %170, i32 0, i64 %169, i32 -1, i32 0) #13
  call void @saa_free(%struct.SAA* %139) #13
  call void @nasm_free(i8* %170) #13
  %176 = call %struct.SAA* @saa_init(i64 1) #13
  call void @llvm.lifetime.start.p0i8(i64 34, i8* nonnull %45) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %45, i8 -86, i64 34, i1 false) #13
  %177 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %45, i64 34, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i64 0, i64 0)) #13
  %178 = call i8** @hash_find(%struct.hash_table* nonnull @section_by_name, i8* nonnull %45, %struct.hash_insert* null) #13
  %179 = icmp eq i8** %178, null
  br i1 %179, label %180, label %181

180:                                              ; preds = %166
  call void @llvm.lifetime.end.p0i8(i64 34, i8* nonnull %45) #13
  br label %185

181:                                              ; preds = %166
  %182 = bitcast i8** %178 to %struct.section**
  %183 = load %struct.section*, %struct.section** %182, align 8
  call void @llvm.lifetime.end.p0i8(i64 34, i8* nonnull %45) #13
  %184 = icmp eq %struct.section* %183, null
  br i1 %184, label %185, label %186, !prof !5

185:                                              ; preds = %181, %180
  call void @nasm_assert_failed(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.13, i64 0, i64 0), i32 2016, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.14, i64 0, i64 0)) #14
  unreachable

186:                                              ; preds = %181
  call void @saa_write8(%struct.SAA* %176, i8 zeroext 1) #13
  call void @saa_write8(%struct.SAA* %176, i8 zeroext 17) #13
  call void @saa_write8(%struct.SAA* %176, i8 zeroext 1) #13
  call void @saa_write8(%struct.SAA* %176, i8 zeroext 37) #13
  call void @saa_write8(%struct.SAA* %176, i8 zeroext 14) #13
  call void @saa_write8(%struct.SAA* %176, i8 zeroext 19) #13
  call void @saa_write8(%struct.SAA* %176, i8 zeroext 5) #13
  call void @saa_write8(%struct.SAA* %176, i8 zeroext 3) #13
  call void @saa_write8(%struct.SAA* %176, i8 zeroext 14) #13
  call void @saa_write8(%struct.SAA* %176, i8 zeroext 27) #13
  call void @saa_write8(%struct.SAA* %176, i8 zeroext 14) #13
  call void @saa_write8(%struct.SAA* %176, i8 zeroext 16) #13
  call void @saa_write8(%struct.SAA* %176, i8 zeroext 6) #13
  call void @saa_write8(%struct.SAA* %176, i8 zeroext 17) #13
  call void @saa_write8(%struct.SAA* %176, i8 zeroext 1) #13
  call void @saa_write8(%struct.SAA* %176, i8 zeroext 18) #13
  call void @saa_write8(%struct.SAA* %176, i8 zeroext 1) #13
  call void @saa_write16(%struct.SAA* %176, i16 zeroext 0) #13
  call void @saa_write8(%struct.SAA* %176, i8 zeroext 2) #13
  call void @saa_write8(%struct.SAA* %176, i8 zeroext 46) #13
  call void @saa_write8(%struct.SAA* %176, i8 zeroext 0) #13
  call void @saa_write8(%struct.SAA* %176, i8 zeroext 17) #13
  call void @saa_write8(%struct.SAA* %176, i8 zeroext 1) #13
  call void @saa_write8(%struct.SAA* %176, i8 zeroext 64) #13
  call void @saa_write8(%struct.SAA* %176, i8 zeroext 1) #13
  call void @saa_write16(%struct.SAA* %176, i16 zeroext 0) #13
  call void @saa_write8(%struct.SAA* %176, i8 zeroext 0) #13
  %187 = getelementptr inbounds %struct.SAA, %struct.SAA* %176, i64 0, i32 5
  %188 = load i64, i64* %187, align 8
  %189 = call noalias i8* @nasm_malloc(i64 %188) #16
  call void @saa_rnbytes(%struct.SAA* %176, i8* %189, i64 %188) #13
  %190 = getelementptr inbounds %struct.section, %struct.section* %183, i64 0, i32 2
  %191 = load i32, i32* %190, align 8
  call void @macho_output(i32 %191, i8* %189, i32 0, i64 %188, i32 -1, i32 0) #13
  call void @saa_free(%struct.SAA* %176) #13
  call void @nasm_free(i8* %189) #13
  %192 = load %struct.dw_sect_list*, %struct.dw_sect_list** @dw_head_sect, align 8
  %193 = load %struct.file_list*, %struct.file_list** @dw_head_file, align 8
  %194 = load i32, i32* @dw_num_sects, align 4
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %196, label %199

196:                                              ; preds = %199, %186
  %197 = load i32, i32* @dw_num_files, align 4
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %217, label %208

199:                                              ; preds = %186, %199
  %200 = phi %struct.dw_sect_list* [ %204, %199 ], [ %192, %186 ]
  %201 = phi i32 [ %205, %199 ], [ 0, %186 ]
  %202 = bitcast %struct.dw_sect_list* %200 to i8*
  %203 = getelementptr inbounds %struct.dw_sect_list, %struct.dw_sect_list* %200, i64 0, i32 5
  %204 = load %struct.dw_sect_list*, %struct.dw_sect_list** %203, align 8
  call void @nasm_free(i8* %202) #13
  %205 = add nuw i32 %201, 1
  %206 = load i32, i32* @dw_num_sects, align 4
  %207 = icmp ult i32 %205, %206
  br i1 %207, label %199, label %196

208:                                              ; preds = %196, %208
  %209 = phi %struct.file_list* [ %213, %208 ], [ %193, %196 ]
  %210 = phi i32 [ %214, %208 ], [ 0, %196 ]
  %211 = bitcast %struct.file_list* %209 to i8*
  %212 = getelementptr inbounds %struct.file_list, %struct.file_list* %209, i64 0, i32 0
  %213 = load %struct.file_list*, %struct.file_list** %212, align 8
  call void @nasm_free(i8* %211) #13
  %214 = add nuw i32 %210, 1
  %215 = load i32, i32* @dw_num_files, align 4
  %216 = icmp ult i32 %214, %215
  br i1 %216, label %208, label %217

217:                                              ; preds = %208, %196
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare noalias i8* @nasm_basename(i8*) local_unnamed_addr #1

declare noalias i8* @nasm_dirname(i8*) local_unnamed_addr #1

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: allocsize(0)
declare noalias i8* @nasm_zalloc(i64) local_unnamed_addr #5

declare %struct.SAA* @saa_init(i64) local_unnamed_addr #1

declare void @saa_write8(%struct.SAA*, i8 zeroext) local_unnamed_addr #1

declare void @saa_write64(%struct.SAA*, i64) local_unnamed_addr #1

declare void @saa_write32(%struct.SAA*, i32) local_unnamed_addr #1

declare void @saa_wleb128s(%struct.SAA*, i32) local_unnamed_addr #1

declare void @saa_wleb128u(%struct.SAA*, i32) local_unnamed_addr #1

declare void @nasm_free(i8*) local_unnamed_addr #1

; Function Attrs: cold noreturn
declare void @nasm_assert_failed(i8*, i32, i8*) local_unnamed_addr #6

declare i64 @saa_wcstring(%struct.SAA*, i8*) local_unnamed_addr #1

; Function Attrs: allocsize(0)
declare noalias i8* @nasm_malloc(i64) local_unnamed_addr #5

declare void @saa_rnbytes(%struct.SAA*, i8*, i64) local_unnamed_addr #1

declare void @saa_free(%struct.SAA*) local_unnamed_addr #1

declare noalias i8* @nasm_realpath(i8*) local_unnamed_addr #1

declare i8* @nasm_signature() local_unnamed_addr #1

declare void @saa_write16(%struct.SAA*, i16 zeroext) local_unnamed_addr #1

declare i8* @raa_read_ptr(%struct.RAA*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nofree nounwind
declare i32 @snprintf(i8* nocapture, i64, i8* nocapture readonly, ...) local_unnamed_addr #7

declare i8** @hash_find(%struct.hash_table*, i8*, %struct.hash_insert*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

declare void @saa_wbytes(%struct.SAA*, i8*, i64) local_unnamed_addr #1

declare i32 @seg_alloc() local_unnamed_addr #1

declare void @backend_label(i8*, i32, i64) local_unnamed_addr #1

declare void @nasm_warn(i32, i8*, ...) local_unnamed_addr #1

; Function Attrs: cold noreturn
declare void @nasm_panic(i8*, ...) local_unnamed_addr #6

declare i64 @realsize(i32, i64) local_unnamed_addr #1

declare void @nasm_error(i32, i8*, ...) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @add_reloc(%struct.section* nocapture, i32, i64, i32, i32) unnamed_addr #0 {
  %6 = load i32, i32* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 8), align 4
  %7 = icmp ult i32 %6, %3
  br i1 %7, label %8, label %9, !prof !5

8:                                                ; preds = %5
  tail call void @nasm_assert_failed(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.13, i64 0, i64 0), i32 411, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.32, i64 0, i64 0)) #14
  unreachable

9:                                                ; preds = %5
  %10 = tail call noalias i8* @nasm_malloc(i64 16) #16
  %11 = getelementptr inbounds %struct.section, %struct.section* %0, i64 0, i32 13
  %12 = load i64, i64* %11, align 8
  %13 = trunc i64 %12 to i32
  %14 = and i32 %13, 2147483647
  %15 = getelementptr inbounds i8, i8* %10, i64 8
  %16 = bitcast i8* %15 to i32*
  store i32 %14, i32* %16, align 8
  %17 = getelementptr inbounds i8, i8* %10, i64 12
  %18 = bitcast i8* %17 to i32*
  %19 = icmp eq i32 %4, 0
  br i1 %19, label %23, label %20

20:                                               ; preds = %9
  %21 = tail call i32 @llvm.ctlz.i32(i32 %4, i1 true) #13, !range !4
  %22 = xor i32 %21, 31
  br label %23

23:                                               ; preds = %9, %20
  %24 = phi i32 [ %22, %20 ], [ 0, %9 ]
  %25 = shl nsw i32 %24, 25
  %26 = and i32 %25, 100663296
  %27 = load i32, i32* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 9), align 4
  %28 = shl i32 %27, 28
  %29 = or i32 %26, %28
  %30 = or i32 %29, 134217728
  store i32 %30, i32* %18, align 4
  %31 = and i32 %1, -1073741823
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %44

33:                                               ; preds = %23
  %34 = load %struct.RAA*, %struct.RAA** @section_by_index, align 8
  %35 = ashr i32 %1, 1
  %36 = sext i32 %35 to i64
  %37 = tail call i8* @raa_read_ptr(%struct.RAA* %34, i64 %36) #13
  %38 = bitcast i8* %37 to %struct.section*
  %39 = icmp eq i8* %37, null
  br i1 %39, label %44, label %40

40:                                               ; preds = %33
  %41 = getelementptr inbounds i8, i8* %37, i64 24
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 8
  br label %44

44:                                               ; preds = %33, %23, %40
  %45 = phi %struct.section* [ %38, %40 ], [ @absolute_sect, %33 ], [ @absolute_sect, %23 ]
  %46 = phi %struct.section* [ %38, %40 ], [ null, %33 ], [ null, %23 ]
  %47 = phi i32 [ %43, %40 ], [ 0, %33 ], [ 0, %23 ]
  switch i32 %3, label %48 [
    i32 0, label %50
    i32 1, label %71
    i32 3, label %71
    i32 4, label %105
    i32 5, label %113
    i32 6, label %109
    i32 2, label %110
  ]

48:                                               ; preds = %44
  %49 = load i32, i32* %18, align 4
  br label %157

50:                                               ; preds = %44
  %51 = icmp eq i32 %1, -1
  br i1 %51, label %52, label %55

52:                                               ; preds = %50
  %53 = load i32, i32* %18, align 4
  %54 = and i32 %53, -134217729
  store i32 %54, i32* %18, align 4
  br label %157

55:                                               ; preds = %50
  %56 = icmp eq i32 %47, 0
  br i1 %56, label %57, label %66

57:                                               ; preds = %55
  %58 = load %struct.RAA*, %struct.RAA** @extsyms, align 8
  %59 = sext i32 %1 to i64
  %60 = tail call i64 @raa_read(%struct.RAA* %58, i64 %59) #13
  %61 = trunc i64 %60 to i32
  %62 = load i32, i32* %18, align 4
  %63 = and i32 %61, 16777215
  %64 = and i32 %62, -16777216
  %65 = or i32 %64, %63
  store i32 %65, i32* %18, align 4
  br label %157

66:                                               ; preds = %55
  %67 = load i32, i32* %18, align 4
  %68 = and i32 %47, 16777215
  %69 = and i32 %67, -150994944
  %70 = or i32 %69, %68
  store i32 %70, i32* %18, align 4
  br label %157

71:                                               ; preds = %44, %44
  %72 = load i32, i32* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 10), align 4
  %73 = load i32, i32* %18, align 4
  %74 = shl i32 %72, 28
  %75 = and i32 %73, 251658239
  %76 = or i32 %74, %75
  %77 = or i32 %76, 16777216
  store i32 %77, i32* %18, align 4
  %78 = icmp eq i32 %1, -1
  br i1 %78, label %79, label %81

79:                                               ; preds = %71
  %80 = and i32 %77, -134217729
  store i32 %80, i32* %18, align 4
  br label %157

81:                                               ; preds = %71
  %82 = icmp eq i32 %47, 0
  br i1 %82, label %83, label %97

83:                                               ; preds = %81
  %84 = getelementptr inbounds %struct.section, %struct.section* %0, i64 0, i32 18
  store i32 1, i32* %84, align 4
  %85 = load %struct.RAA*, %struct.RAA** @extsyms, align 8
  %86 = sext i32 %1 to i64
  %87 = tail call i64 @raa_read(%struct.RAA* %85, i64 %86) #13
  %88 = trunc i64 %87 to i32
  %89 = load i32, i32* %18, align 4
  %90 = and i32 %88, 16777215
  %91 = and i32 %89, -16777216
  %92 = or i32 %91, %90
  store i32 %92, i32* %18, align 4
  %93 = icmp eq i32 %3, 3
  br i1 %93, label %94, label %157

94:                                               ; preds = %83
  %95 = and i32 %92, 268435455
  %96 = or i32 %95, 536870912
  store i32 %96, i32* %18, align 4
  br label %157

97:                                               ; preds = %81
  %98 = and i32 %47, 16777215
  %99 = and i32 %77, -150994944
  %100 = or i32 %99, %98
  store i32 %100, i32* %18, align 4
  %101 = icmp eq i32 %3, 3
  br i1 %101, label %102, label %157

102:                                              ; preds = %97
  %103 = and i32 %100, 134217727
  %104 = or i32 %103, 536870912
  store i32 %104, i32* %18, align 4
  br label %157

105:                                              ; preds = %44
  tail call void (i32, i8*, ...) @nasm_warn(i32 2228224, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.33, i64 0, i64 0)) #13
  %106 = load i32, i32* %18, align 4
  %107 = and i32 %106, 134217727
  %108 = or i32 %107, 1342177280
  store i32 %108, i32* %18, align 4
  br label %157

109:                                              ; preds = %44
  br label %113

110:                                              ; preds = %44
  %111 = load i32, i32* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 11), align 4
  %112 = shl i32 %111, 28
  br label %113

113:                                              ; preds = %44, %110, %109
  %114 = phi i32 [ %112, %110 ], [ 805306368, %109 ], [ 1073741824, %44 ]
  %115 = load i32, i32* %18, align 4
  %116 = and i32 %115, 268435455
  %117 = or i32 %116, %114
  store i32 %117, i32* %18, align 4
  %118 = load i32, i32* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 0), align 4
  %119 = icmp eq i32 %118, 8
  %120 = zext i1 %119 to i32
  %121 = shl nuw nsw i32 %120, 24
  %122 = and i32 %117, -16777217
  %123 = or i32 %121, %122
  store i32 %123, i32* %18, align 4
  %124 = icmp eq i32 %1, -1
  br i1 %124, label %219, label %125

125:                                              ; preds = %113
  %126 = icmp eq i32 %47, 0
  br i1 %126, label %127, label %136

127:                                              ; preds = %125
  %128 = load %struct.RAA*, %struct.RAA** @extsyms, align 8
  %129 = sext i32 %1 to i64
  %130 = tail call i64 @raa_read(%struct.RAA* %128, i64 %129) #13
  %131 = trunc i64 %130 to i32
  %132 = load i32, i32* %18, align 4
  %133 = and i32 %131, 16777215
  %134 = and i32 %132, -16777216
  %135 = or i32 %134, %133
  store i32 %135, i32* %18, align 4
  br label %157

136:                                              ; preds = %125
  %137 = getelementptr inbounds %struct.section, %struct.section* %46, i64 0, i32 6, i64 0
  %138 = load %struct.rbtree*, %struct.rbtree** %137, align 8
  %139 = tail call %struct.rbtree* @rb_search(%struct.rbtree* %138, i64 %2) #13
  %140 = icmp eq %struct.rbtree* %139, null
  br i1 %140, label %145, label %141

141:                                              ; preds = %136
  %142 = getelementptr inbounds %struct.rbtree, %struct.rbtree* %139, i64 0, i32 0
  %143 = load i64, i64* %142, align 8
  %144 = icmp eq i64 %143, %2
  br i1 %144, label %148, label %145

145:                                              ; preds = %136, %141
  %146 = icmp eq %struct.section* %46, @absolute_sect
  %147 = select i1 %146, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.39, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.38, i64 0, i64 0)
  tail call void (i32, i8*, ...) @nasm_error(i32 4, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.38, i64 0, i64 0), i8* %147) #13
  br label %219

148:                                              ; preds = %141
  %149 = sub i64 0, %2
  %150 = getelementptr inbounds %struct.rbtree, %struct.rbtree* %139, i64 2, i32 2
  %151 = bitcast %struct.rbtree** %150 to i32*
  %152 = load i32, i32* %151, align 8
  %153 = load i32, i32* %18, align 4
  %154 = and i32 %152, 16777215
  %155 = and i32 %153, -16777216
  %156 = or i32 %155, %154
  store i32 %156, i32* %18, align 4
  br label %157

157:                                              ; preds = %48, %148, %127, %79, %97, %102, %83, %94, %52, %66, %57, %105
  %158 = phi i32 [ %49, %48 ], [ %135, %127 ], [ %108, %105 ], [ %80, %79 ], [ %96, %94 ], [ %92, %83 ], [ %104, %102 ], [ %100, %97 ], [ %54, %52 ], [ %65, %57 ], [ %70, %66 ], [ %156, %148 ]
  %159 = phi i64 [ 0, %48 ], [ 0, %127 ], [ 0, %105 ], [ 0, %79 ], [ 0, %94 ], [ 0, %83 ], [ 0, %102 ], [ 0, %97 ], [ 0, %52 ], [ 0, %57 ], [ 0, %66 ], [ %149, %148 ]
  %160 = and i32 %158, 134217728
  %161 = icmp ne i32 %160, 0
  %162 = load i8, i8* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 12), align 4
  %163 = icmp eq i8 %162, 0
  %164 = or i1 %161, %163
  br i1 %164, label %186, label %165

165:                                              ; preds = %157
  %166 = getelementptr inbounds %struct.section, %struct.section* %45, i64 0, i32 6, i64 0
  %167 = load %struct.rbtree*, %struct.rbtree** %166, align 8
  %168 = tail call %struct.rbtree* @rb_search(%struct.rbtree* %167, i64 %2) #13
  %169 = icmp eq %struct.rbtree* %168, null
  br i1 %169, label %170, label %174

170:                                              ; preds = %165
  %171 = icmp eq %struct.section* %45, @absolute_sect
  %172 = select i1 %171, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.39, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.38, i64 0, i64 0)
  tail call void (i32, i8*, ...) @nasm_error(i32 4, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.38, i64 0, i64 0), i8* %172) #13
  %173 = load i32, i32* %18, align 4
  br label %186

174:                                              ; preds = %165
  %175 = getelementptr inbounds %struct.rbtree, %struct.rbtree* %168, i64 0, i32 0
  %176 = load i64, i64* %175, align 8
  %177 = sub i64 %159, %176
  %178 = getelementptr inbounds %struct.rbtree, %struct.rbtree* %168, i64 2, i32 2
  %179 = bitcast %struct.rbtree** %178 to i32*
  %180 = load i32, i32* %179, align 8
  %181 = load i32, i32* %18, align 4
  %182 = and i32 %180, 16777215
  %183 = and i32 %181, -150994944
  %184 = or i32 %182, %183
  %185 = or i32 %184, 134217728
  store i32 %185, i32* %18, align 4
  br label %186

186:                                              ; preds = %170, %174, %157
  %187 = phi i32 [ %158, %157 ], [ %185, %174 ], [ %173, %170 ]
  %188 = phi i64 [ %159, %157 ], [ %177, %174 ], [ %159, %170 ]
  %189 = and i32 %187, 16777216
  %190 = icmp eq i32 %189, 0
  %191 = and i32 %187, 134217728
  br i1 %190, label %205, label %192

192:                                              ; preds = %186
  %193 = icmp ne i32 %191, 0
  %194 = load i32, i32* getelementptr inbounds (%struct.macho_fmt, %struct.macho_fmt* @fmt, i64 0, i32 0), align 4
  %195 = icmp eq i32 %194, 8
  %196 = and i1 %193, %195
  br i1 %196, label %197, label %199

197:                                              ; preds = %192
  %198 = sext i32 %4 to i64
  br label %202

199:                                              ; preds = %192
  %200 = load i64, i64* %11, align 8
  %201 = sub nsw i64 0, %200
  br label %202

202:                                              ; preds = %199, %197
  %203 = phi i64 [ %198, %197 ], [ %201, %199 ]
  %204 = add nsw i64 %203, %188
  br label %205

205:                                              ; preds = %186, %202
  %206 = phi i64 [ %204, %202 ], [ %188, %186 ]
  %207 = getelementptr inbounds %struct.section, %struct.section* %0, i64 0, i32 5
  %208 = bitcast %struct.reloc** %207 to i64*
  %209 = load i64, i64* %208, align 8
  %210 = bitcast i8* %10 to i64*
  store i64 %209, i64* %210, align 8
  %211 = bitcast %struct.reloc** %207 to i8**
  store i8* %10, i8** %211, align 8
  %212 = icmp eq i32 %191, 0
  br i1 %212, label %215, label %213

213:                                              ; preds = %205
  %214 = getelementptr inbounds %struct.section, %struct.section* %0, i64 0, i32 18
  store i32 1, i32* %214, align 4
  br label %215

215:                                              ; preds = %205, %213
  %216 = getelementptr inbounds %struct.section, %struct.section* %0, i64 0, i32 16
  %217 = load i32, i32* %216, align 4
  %218 = add i32 %217, 1
  store i32 %218, i32* %216, align 4
  br label %221

219:                                              ; preds = %113, %145
  %220 = phi i8* [ getelementptr inbounds ([25 x i8], [25 x i8]* @.str.35, i64 0, i64 0), %145 ], [ getelementptr inbounds ([30 x i8], [30 x i8]* @.str.34, i64 0, i64 0), %113 ]
  tail call void (i32, i8*, ...) @nasm_error(i32 4, i8* %220) #13
  tail call void @nasm_free(i8* %10) #13
  br label %221

221:                                              ; preds = %219, %215
  %222 = phi i64 [ %206, %215 ], [ 0, %219 ]
  ret i64 %222
}

declare void @saa_fread(%struct.SAA*, i64, i8*, i64) local_unnamed_addr #1

declare i64 @raa_read(%struct.RAA*, i64) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #8

declare %struct.rbtree* @rb_search(%struct.rbtree*, i64) local_unnamed_addr #1

; Function Attrs: nofree nounwind readonly
declare i64 @strcspn(i8* nocapture, i8* nocapture) local_unnamed_addr #4

; Function Attrs: nofree nounwind readonly
declare i32 @strncasecmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #4

declare %struct.RAA* @raa_write(%struct.RAA*, i64, i64) local_unnamed_addr #1

declare %struct.rbtree* @rb_insert(%struct.rbtree*, %struct.rbtree*) local_unnamed_addr #1

; Function Attrs: nounwind
declare i8* @strsep(i8**, i8*) local_unnamed_addr #9

; Function Attrs: nofree nounwind readonly
declare i8* @strchr(i8*, i32) local_unnamed_addr #4

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #10

; Function Attrs: nounwind readonly ssp uwtable
define internal fastcc %struct.macho_known_section* @lookup_known_section(i8* readonly, i1 zeroext) unnamed_addr #11 {
  %3 = icmp eq i8* %0, null
  br i1 %3, label %15, label %4

4:                                                ; preds = %2
  %5 = load i8, i8* %0, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %15, label %7

7:                                                ; preds = %4
  %8 = select i1 %1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.48, i64 0, i64 0)
  %9 = tail call i32 @strcmp(i8* nonnull %0, i8* %8) #15
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %15, label %11

11:                                               ; preds = %7
  %12 = select i1 %1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.61, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.59, i64 0, i64 0)
  %13 = tail call i32 @strcmp(i8* nonnull %0, i8* %12) #15
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %7, %11, %17, %21, %25, %29, %33, %2, %4
  %16 = phi %struct.macho_known_section* [ null, %4 ], [ null, %2 ], [ getelementptr inbounds ([8 x %struct.macho_known_section], [8 x %struct.macho_known_section]* @known_sections, i64 0, i64 0), %7 ], [ getelementptr inbounds ([8 x %struct.macho_known_section], [8 x %struct.macho_known_section]* @known_sections, i64 0, i64 1), %11 ], [ getelementptr inbounds ([8 x %struct.macho_known_section], [8 x %struct.macho_known_section]* @known_sections, i64 0, i64 2), %17 ], [ getelementptr inbounds ([8 x %struct.macho_known_section], [8 x %struct.macho_known_section]* @known_sections, i64 0, i64 3), %21 ], [ getelementptr inbounds ([8 x %struct.macho_known_section], [8 x %struct.macho_known_section]* @known_sections, i64 0, i64 4), %25 ], [ getelementptr inbounds ([8 x %struct.macho_known_section], [8 x %struct.macho_known_section]* @known_sections, i64 0, i64 5), %29 ], [ getelementptr inbounds ([8 x %struct.macho_known_section], [8 x %struct.macho_known_section]* @known_sections, i64 0, i64 6), %33 ]
  ret %struct.macho_known_section* %16

17:                                               ; preds = %11
  %18 = select i1 %1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.63, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.62, i64 0, i64 0)
  %19 = tail call i32 @strcmp(i8* nonnull %0, i8* %18) #15
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %15, label %21

21:                                               ; preds = %17
  %22 = select i1 %1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.64, i64 0, i64 0)
  %23 = tail call i32 @strcmp(i8* nonnull %0, i8* %22) #15
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %15, label %25

25:                                               ; preds = %21
  %26 = select i1 %1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i64 0, i64 0)
  %27 = tail call i32 @strcmp(i8* nonnull %0, i8* %26) #15
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %15, label %29

29:                                               ; preds = %25
  %30 = select i1 %1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0)
  %31 = tail call i32 @strcmp(i8* nonnull %0, i8* %30) #15
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %15, label %33

33:                                               ; preds = %29
  %34 = select i1 %1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.9, i64 0, i64 0)
  %35 = tail call i32 @strcmp(i8* nonnull %0, i8* %34) #15
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %15, label %37

37:                                               ; preds = %33
  %38 = select i1 %1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i64 0, i64 0)
  %39 = tail call i32 @strcmp(i8* nonnull %0, i8* %38) #15
  %40 = icmp eq i32 %39, 0
  %41 = select i1 %40, %struct.macho_known_section* getelementptr inbounds ([8 x %struct.macho_known_section], [8 x %struct.macho_known_section]* @known_sections, i64 0, i64 7), %struct.macho_known_section* null
  ret %struct.macho_known_section* %41
}

; Function Attrs: nofree nounwind
declare i64 @strtoul(i8* readonly, i8** nocapture, i32) local_unnamed_addr #7

; Function Attrs: nofree nounwind readonly
declare i32 @strcasecmp(i8* nocapture, i8* nocapture) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare i8* @strncpy(i8* returned, i8* nocapture readonly, i64) local_unnamed_addr #7

declare i8** @hash_add(%struct.hash_insert*, i8*, i8*) local_unnamed_addr #1

declare %struct.RAA* @raa_write_ptr(%struct.RAA*, i64, i8*) local_unnamed_addr #1

declare void @raa_free(%struct.RAA*) local_unnamed_addr #1

declare void @hash_free(%struct.hash_table*) local_unnamed_addr #1

; Function Attrs: nofree
declare void @qsort(i8*, i64, i64, i32 (i8*, i8*)* nocapture) local_unnamed_addr #12

; Function Attrs: nounwind readonly ssp uwtable
define internal i32 @layout_compare(%struct.symbol** nocapture readonly, %struct.symbol** nocapture readonly) #11 {
  %3 = load %struct.symbol*, %struct.symbol** %0, align 8
  %4 = getelementptr inbounds %struct.symbol, %struct.symbol* %3, i64 0, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = load %struct.symbol*, %struct.symbol** %1, align 8
  %7 = getelementptr inbounds %struct.symbol, %struct.symbol* %6, i64 0, i32 2
  %8 = load i8*, i8** %7, align 8
  %9 = tail call i32 @strcmp(i8* %5, i8* %8) #15
  ret i32 %9
}

; Function Attrs: cold noreturn
declare void @nasm_fatal(i8*, ...) local_unnamed_addr #6

declare void @fwriteint32_t(i32, %struct._IO_FILE*) local_unnamed_addr #1

declare void @saa_fpwrite(%struct.SAA*, %struct._IO_FILE*) local_unnamed_addr #1

declare void @fwritezero(i64, %struct._IO_FILE*) local_unnamed_addr #1

; Function Attrs: nofree nounwind readonly
declare i32 @strncmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #4

declare void @nasm_write(i8*, i64, %struct._IO_FILE*) local_unnamed_addr #1

declare void @fwriteaddr(i64, i32, %struct._IO_FILE*) local_unnamed_addr #1

declare void @saa_rewind(%struct.SAA*) local_unnamed_addr #1

declare void @saa_fwrite(%struct.SAA*, i64, i8*, i64) local_unnamed_addr #1

declare void @fwriteint16_t(i16 zeroext, %struct._IO_FILE*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @macho_pragma(%struct.pragma* nocapture readonly) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  %4 = getelementptr inbounds %struct.pragma, %struct.pragma* %0, i64 0, i32 4
  %5 = load i32, i32* %4, align 8
  switch i32 %5, label %96 [
    i32 38, label %6
    i32 39, label %20
  ]

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.pragma, %struct.pragma* %0, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %96

11:                                               ; preds = %6
  %12 = load i32, i32* @_pass_type, align 4
  %13 = icmp ult i32 %12, 3
  br i1 %13, label %17, label %14

14:                                               ; preds = %11
  %15 = load i32, i32* @head_flags, align 4
  %16 = or i32 %15, 8192
  store i32 %16, i32* @head_flags, align 4
  br label %17

17:                                               ; preds = %14, %11
  %18 = load i32, i32* getelementptr inbounds (%struct.optimization, %struct.optimization* @optimizing, i64 0, i32 1), align 4
  %19 = or i32 %18, 1
  store i32 %19, i32* getelementptr inbounds (%struct.optimization, %struct.optimization* @optimizing, i64 0, i32 1), align 4
  br label %96

20:                                               ; preds = %1
  %21 = getelementptr inbounds %struct.pragma, %struct.pragma* %0, i64 0, i32 3
  %22 = load i8*, i8** %21, align 8
  %23 = tail call noalias i8* @nasm_strdup(i8* %22) #13
  %24 = load i8, i8* %23, align 1
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %94, label %26

26:                                               ; preds = %20
  %27 = bitcast i32* %2 to i8*
  %28 = bitcast i64* %3 to i8*
  br label %29

29:                                               ; preds = %90, %26
  %30 = phi i8 [ %24, %26 ], [ %91, %90 ]
  %31 = phi i8* [ %23, %26 ], [ %92, %90 ]
  %32 = zext i8 %30 to i64
  %33 = getelementptr inbounds [256 x i16], [256 x i16]* @nasm_ctype_tab, i64 0, i64 %32
  %34 = load i16, i16* %33, align 2
  %35 = and i16 %34, 256
  %36 = icmp eq i16 %35, 0
  br i1 %36, label %50, label %37

37:                                               ; preds = %29
  %38 = getelementptr inbounds i8, i8* %31, i64 1
  br label %39

39:                                               ; preds = %39, %37
  %40 = phi i8* [ %41, %39 ], [ %38, %37 ]
  %41 = getelementptr inbounds i8, i8* %40, i64 1
  %42 = load i8, i8* %40, align 1
  %43 = zext i8 %42 to i64
  %44 = getelementptr inbounds [256 x i16], [256 x i16]* @nasm_ctype_tab, i64 0, i64 %43
  %45 = load i16, i16* %44, align 2
  %46 = trunc i16 %45 to i8
  %47 = icmp slt i8 %46, 0
  br i1 %47, label %39, label %48

48:                                               ; preds = %39
  %49 = load i8, i8* %41, align 1
  switch i8 %49, label %51 [
    i8 0, label %58
    i8 44, label %58
  ]

50:                                               ; preds = %29
  call void (i32, i8*, ...) @nasm_error(i32 4, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.83, i64 0, i64 0)) #13
  br label %94

51:                                               ; preds = %48
  %52 = zext i8 %49 to i64
  %53 = getelementptr inbounds [256 x i16], [256 x i16]* @nasm_ctype_tab, i64 0, i64 %52
  %54 = load i16, i16* %53, align 2
  %55 = and i16 %54, 2
  %56 = icmp eq i16 %55, 0
  br i1 %56, label %57, label %58

57:                                               ; preds = %51
  call void (i32, i8*, ...) @nasm_error(i32 4, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.84, i64 0, i64 0)) #13
  br label %94

58:                                               ; preds = %51, %48, %48
  store i8 0, i8* %41, align 1
  %59 = load i32, i32* @_pass_type, align 4
  %60 = icmp ult i32 %59, 3
  br i1 %60, label %82, label %61

61:                                               ; preds = %58
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %27) #13
  store i32 -1431655766, i32* %2, align 4
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #13
  store i64 -6148914691236517206, i64* %3, align 8
  %62 = call i32 @lookup_label(i8* %31, i32* nonnull %2, i64* nonnull %3) #13
  %63 = icmp eq i32 %62, -1
  br i1 %63, label %64, label %65

64:                                               ; preds = %61
  call void (i32, i8*, ...) @nasm_error(i32 4, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.85, i64 0, i64 0), i8* %31) #13
  br label %81

65:                                               ; preds = %61
  %66 = load i32, i32* %2, align 4
  %67 = and i32 %66, -1073741823
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %75

69:                                               ; preds = %65
  %70 = load %struct.RAA*, %struct.RAA** @section_by_index, align 8
  %71 = ashr i32 %66, 1
  %72 = sext i32 %71 to i64
  %73 = call i8* @raa_read_ptr(%struct.RAA* %70, i64 %72) #13
  %74 = icmp eq i8* %73, null
  br i1 %74, label %75, label %76

75:                                               ; preds = %69, %65
  call void (i32, i8*, ...) @nasm_error(i32 4, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.86, i64 0, i64 0), i8* %31) #13
  br label %81

76:                                               ; preds = %69
  %77 = getelementptr inbounds i8, i8* %73, i64 160
  %78 = bitcast i8* %77 to i32*
  %79 = load i32, i32* %78, align 8
  %80 = or i32 %79, 268435456
  store i32 %80, i32* %78, align 8
  br label %81

81:                                               ; preds = %76, %75, %64
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %27) #13
  br label %82

82:                                               ; preds = %81, %58
  store i8 %49, i8* %41, align 1
  %83 = call i8* @nasm_skip_spaces(i8* nonnull %41) #13
  %84 = load i8, i8* %83, align 1
  %85 = icmp eq i8 %84, 44
  br i1 %85, label %86, label %90

86:                                               ; preds = %82
  %87 = getelementptr inbounds i8, i8* %83, i64 1
  %88 = call i8* @nasm_skip_spaces(i8* %87) #13
  %89 = load i8, i8* %88, align 1
  br label %90

90:                                               ; preds = %86, %82
  %91 = phi i8 [ %89, %86 ], [ %84, %82 ]
  %92 = phi i8* [ %88, %86 ], [ %83, %82 ]
  %93 = icmp eq i8 %91, 0
  br i1 %93, label %94, label %29

94:                                               ; preds = %90, %20, %50, %57
  %95 = phi i32 [ 2, %57 ], [ 2, %50 ], [ 1, %20 ], [ 1, %90 ]
  call void @nasm_free(i8* %23) #13
  br label %96

96:                                               ; preds = %1, %6, %94, %17
  %97 = phi i32 [ %95, %94 ], [ 1, %17 ], [ 3, %6 ], [ 0, %1 ]
  ret i32 %97
}

declare noalias i8* @nasm_strdup(i8*) local_unnamed_addr #1

declare i8* @nasm_skip_spaces(i8*) local_unnamed_addr #1

declare i32 @lookup_label(i8*, i32*, i64*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctpop.i32(i32) #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { allocsize(0) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { cold noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind }
attributes #14 = { cold noreturn nounwind }
attributes #15 = { nounwind readonly }
attributes #16 = { nounwind allocsize(0) }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{i8 0, i8 2}
!4 = !{i32 0, i32 33}
!5 = !{!"branch_weights", i32 1, i32 2000}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.unroll.disable"}
!8 = distinct !{!8, !7}
