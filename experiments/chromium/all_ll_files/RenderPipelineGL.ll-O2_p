; ModuleID = '../../third_party/dawn/src/dawn_native/opengl/RenderPipelineGL.cpp'
source_filename = "../../third_party/dawn/src/dawn_native/opengl/RenderPipelineGL.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.dawn_native::opengl::RenderPipeline" = type { %"class.dawn_native::RenderPipelineBase.base", %"class.dawn_native::opengl::PipelineGL", i32, i32, %"class.ityp::array.169" }
%"class.dawn_native::RenderPipelineBase.base" = type <{ %"class.dawn_native::PipelineBase", i32, [4 x i8], %"class.ityp::bitset.136", %"class.ityp::array.137", %"class.ityp::bitset.139", %"class.ityp::array.142", %class.Ref.144, %"class.ityp::array.148", %"class.ityp::array.150", %"struct.dawn_native::PrimitiveState", %"struct.dawn_native::DepthStencilState", %"struct.dawn_native::MultisampleState", i8 }>
%"class.dawn_native::PipelineBase" = type { %"class.dawn_native::CachedObject.base", i32, %"class.dawn_native::PerStage", %class.Ref.122, %"class.ityp::array.127" }
%"class.dawn_native::CachedObject.base" = type <{ %"class.dawn_native::ObjectBase", i8, [7 x i8], i64, i8 }>
%"class.dawn_native::ObjectBase" = type { %class.RefCounted, %"class.dawn_native::DeviceBase"* }
%class.RefCounted = type { i32 (...)**, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.dawn_native::DeviceBase" = type { %class.RefCounted, i64, i64, i64, void (i32, i8*, i8*)*, i8*, void (i8*, i8*)*, i8*, %"class.std::__1::unique_ptr", %class.Ref, %"class.dawn_native::AdapterBase"*, %"class.std::__1::unique_ptr.2", %class.Ref.8, %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.16", %class.Ref.22, %"class.std::__1::unique_ptr.24", i32, %"struct.std::__1::array", %"struct.dawn_native::TogglesSet", %"struct.dawn_native::TogglesSet", i64, %"struct.dawn_native::ExtensionsSet", %"class.std::__1::unique_ptr.33", %"class.std::__1::unique_ptr.39" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.dawn_native::ErrorScopeStack"* }
%"class.dawn_native::ErrorScopeStack" = type opaque
%class.Ref = type { %class.RefBase }
%class.RefBase = type { %"class.dawn_native::InstanceBase"* }
%"class.dawn_native::InstanceBase" = type opaque
%"class.dawn_native::AdapterBase" = type opaque
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.dawn_native::DeviceBase::Caches"* }
%"struct.dawn_native::DeviceBase::Caches" = type opaque
%class.Ref.8 = type { %class.RefBase.9 }
%class.RefBase.9 = type { %"class.dawn_native::BindGroupLayoutBase"* }
%"class.dawn_native::BindGroupLayoutBase" = type opaque
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.dawn_native::DynamicUploader"* }
%"class.dawn_native::DynamicUploader" = type opaque
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.dawn_native::CallbackTaskManager"* }
%"class.dawn_native::CallbackTaskManager" = type opaque
%class.Ref.22 = type { %class.RefBase.23 }
%class.RefBase.23 = type { %"class.dawn_native::QueueBase"* }
%"class.dawn_native::QueueBase" = type opaque
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"struct.dawn_native::DeviceBase::DeprecationWarnings"* }
%"struct.dawn_native::DeviceBase::DeprecationWarnings" = type opaque
%"struct.std::__1::array" = type { [55 x %"struct.dawn_native::Format"] }
%"struct.dawn_native::Format" = type { i32, i8, i8, i8, i8, i8, %"struct.std::__1::array.30" }
%"struct.std::__1::array.30" = type { [3 x %"struct.dawn_native::AspectInfo"] }
%"struct.dawn_native::AspectInfo" = type { %"struct.dawn_native::TexelBlockInfo", i32, i8, i32 }
%"struct.dawn_native::TexelBlockInfo" = type { i32, i32, i32 }
%"struct.dawn_native::TogglesSet" = type { %"class.std::__1::bitset" }
%"class.std::__1::bitset" = type { %"class.std::__1::__bitset" }
%"class.std::__1::__bitset" = type { i64 }
%"struct.dawn_native::ExtensionsSet" = type { %"class.std::__1::bitset.31" }
%"class.std::__1::bitset.31" = type { %"class.std::__1::__bitset.32" }
%"class.std::__1::__bitset.32" = type { i64 }
%"class.std::__1::unique_ptr.33" = type { %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"struct.dawn_native::InternalPipelineStore"* }
%"struct.dawn_native::InternalPipelineStore" = type opaque
%"class.std::__1::unique_ptr.39" = type { %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"class.dawn_native::PersistentCache"* }
%"class.dawn_native::PersistentCache" = type opaque
%"class.dawn_native::PerStage" = type { %"struct.std::__1::array.45" }
%"struct.std::__1::array.45" = type { [3 x %"struct.dawn_native::ProgrammableStage"] }
%"struct.dawn_native::ProgrammableStage" = type { %class.Ref.46, %"class.std::__1::basic_string", %"struct.dawn_native::EntryPointMetadata"* }
%class.Ref.46 = type { %class.RefBase.47 }
%class.RefBase.47 = type { %"class.dawn_native::ShaderModuleBase"* }
%"class.dawn_native::ShaderModuleBase" = type { %"class.dawn_native::CachedObject.base", i32, %"class.std::__1::vector", %"class.std::__1::basic_string", %"class.std::__1::unordered_map", %"class.std::__1::vector", %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.81", %"class.std::__1::unique_ptr.87" }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.56", %"class.std::__1::__compressed_pair.65", %"class.std::__1::__compressed_pair.70", %"class.std::__1::__compressed_pair.72", [4 x i8] }>
%"class.std::__1::unique_ptr.56" = type { %"class.std::__1::__compressed_pair.57" }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58", %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.59" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.60" }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { i64 }
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"struct.std::__1::__compressed_pair_elem.66" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.73" }
%"struct.std::__1::__compressed_pair_elem.73" = type { float }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { i32* }
%"class.std::__1::unique_ptr.75" = type { %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"class.tint::Program"* }
%"class.tint::Program" = type opaque
%"class.std::__1::unique_ptr.81" = type { %"class.std::__1::__compressed_pair.82" }
%"class.std::__1::__compressed_pair.82" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"struct.std::__1::__compressed_pair_elem.83" = type { %"class.dawn_native::TintSource"* }
%"class.dawn_native::TintSource" = type opaque
%"class.std::__1::unique_ptr.87" = type { %"class.std::__1::__compressed_pair.88" }
%"class.std::__1::__compressed_pair.88" = type { %"struct.std::__1::__compressed_pair_elem.89" }
%"struct.std::__1::__compressed_pair_elem.89" = type { %"class.dawn_native::OwnedCompilationMessages"* }
%"class.dawn_native::OwnedCompilationMessages" = type { %struct.WGPUCompilationInfo, %"class.std::__1::vector.90", %"class.std::__1::vector.97" }
%struct.WGPUCompilationInfo = type { i32, %struct.WGPUCompilationMessage* }
%struct.WGPUCompilationMessage = type { i8*, i32, i64, i64, i64, i64 }
%"class.std::__1::vector.90" = type { %"class.std::__1::__vector_base.91" }
%"class.std::__1::__vector_base.91" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::vector.97" = type { %"class.std::__1::__vector_base.98" }
%"class.std::__1::__vector_base.98" = type { %struct.WGPUCompilationMessage*, %struct.WGPUCompilationMessage*, %"class.std::__1::__compressed_pair.99" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.100" = type { %struct.WGPUCompilationMessage* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.51" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.dawn_native::EntryPointMetadata" = type { %"class.ityp::array", %"class.std::__1::bitset.116", %"class.ityp::array.118", %"class.ityp::bitset", %"struct.dawn_native::Origin3D", i32 }
%"class.ityp::array" = type { %"struct.std::__1::array.107" }
%"struct.std::__1::array.107" = type { [4 x %"class.std::__1::map"] }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.108", %"class.std::__1::__compressed_pair.113" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.109" }
%"struct.std::__1::__compressed_pair_elem.109" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"class.std::__1::bitset.116" = type { %"class.std::__1::__bitset.117" }
%"class.std::__1::__bitset.117" = type { i64 }
%"class.ityp::array.118" = type { %"struct.std::__1::array.119" }
%"struct.std::__1::array.119" = type { [4 x i32] }
%"class.ityp::bitset" = type { %"class.std::__1::bitset.120" }
%"class.std::__1::bitset.120" = type { %"class.std::__1::__bitset.121" }
%"class.std::__1::__bitset.121" = type { i64 }
%"struct.dawn_native::Origin3D" = type { i32, i32, i32 }
%class.Ref.122 = type { %class.RefBase.123 }
%class.RefBase.123 = type { %"class.dawn_native::PipelineLayoutBase"* }
%"class.dawn_native::PipelineLayoutBase" = type { %"class.dawn_native::CachedObject.base", %"class.ityp::array.124", %"class.ityp::bitset.126" }
%"class.ityp::array.124" = type { %"struct.std::__1::array.125" }
%"struct.std::__1::array.125" = type { [4 x %class.Ref.8] }
%"class.ityp::bitset.126" = type { %"class.std::__1::bitset.120" }
%"class.ityp::array.127" = type { %"struct.std::__1::array.128" }
%"struct.std::__1::array.128" = type { [4 x %"class.std::__1::vector.129"] }
%"class.std::__1::vector.129" = type { %"class.std::__1::__vector_base.130" }
%"class.std::__1::__vector_base.130" = type { i64*, i64*, %"class.std::__1::__compressed_pair.131" }
%"class.std::__1::__compressed_pair.131" = type { %"struct.std::__1::__compressed_pair_elem.132" }
%"struct.std::__1::__compressed_pair_elem.132" = type { i64* }
%"class.ityp::bitset.136" = type { %"class.std::__1::bitset.116" }
%"class.ityp::array.137" = type { %"struct.std::__1::array.138" }
%"struct.std::__1::array.138" = type { [16 x %"struct.dawn_native::VertexAttributeInfo"] }
%"struct.dawn_native::VertexAttributeInfo" = type { i32, i64, i8, i8 }
%"class.ityp::bitset.139" = type { %"class.std::__1::bitset.140" }
%"class.std::__1::bitset.140" = type { %"class.std::__1::__bitset.141" }
%"class.std::__1::__bitset.141" = type { i64 }
%"class.ityp::array.142" = type { %"struct.std::__1::array.143" }
%"struct.std::__1::array.143" = type { [8 x %"struct.dawn_native::VertexBufferInfo"] }
%"struct.dawn_native::VertexBufferInfo" = type { i64, i32 }
%class.Ref.144 = type { %class.RefBase.145 }
%class.RefBase.145 = type { %"class.dawn_native::AttachmentState"* }
%"class.dawn_native::AttachmentState" = type { %"class.dawn_native::CachedObject.base", %"class.dawn_native::AttachmentStateBlueprint" }
%"class.dawn_native::AttachmentStateBlueprint" = type { %"class.ityp::bitset", %"class.ityp::array.146", i32, i32 }
%"class.ityp::array.146" = type { %"struct.std::__1::array.147" }
%"struct.std::__1::array.147" = type { [4 x i32] }
%"class.ityp::array.148" = type { %"struct.std::__1::array.149" }
%"struct.std::__1::array.149" = type { [4 x %"struct.dawn_native::ColorTargetState"] }
%"struct.dawn_native::ColorTargetState" = type <{ %"struct.dawn_native::ChainedStruct"*, i32, [4 x i8], %"struct.dawn_native::BlendState"*, i32, [4 x i8] }>
%"struct.dawn_native::ChainedStruct" = type <{ %"struct.dawn_native::ChainedStruct"*, i32, [4 x i8] }>
%"struct.dawn_native::BlendState" = type { %"struct.dawn_native::BlendComponent", %"struct.dawn_native::BlendComponent" }
%"struct.dawn_native::BlendComponent" = type { i32, i32, i32 }
%"class.ityp::array.150" = type { %"struct.std::__1::array.151" }
%"struct.std::__1::array.151" = type { [4 x %"struct.dawn_native::BlendState"] }
%"struct.dawn_native::PrimitiveState" = type { %"struct.dawn_native::ChainedStruct"*, i32, i32, i32, i32 }
%"struct.dawn_native::DepthStencilState" = type { %"struct.dawn_native::ChainedStruct"*, i32, i8, i32, %"struct.dawn_native::StencilFaceState", %"struct.dawn_native::StencilFaceState", i32, i32, i32, float, float }
%"struct.dawn_native::StencilFaceState" = type { i32, i32, i32, i32 }
%"struct.dawn_native::MultisampleState" = type <{ %"struct.dawn_native::ChainedStruct"*, i32, i32, i8, [7 x i8] }>
%"class.dawn_native::opengl::PipelineGL" = type { i32, %"class.std::__1::vector.152", %"class.std::__1::vector.160", %"class.std::__1::vector", %class.Ref.167 }
%"class.std::__1::vector.152" = type { %"class.std::__1::__vector_base.153" }
%"class.std::__1::__vector_base.153" = type { %"class.std::__1::vector.154"*, %"class.std::__1::vector.154"*, %"class.std::__1::__compressed_pair.155" }
%"class.std::__1::vector.154" = type opaque
%"class.std::__1::__compressed_pair.155" = type { %"struct.std::__1::__compressed_pair_elem.156" }
%"struct.std::__1::__compressed_pair_elem.156" = type { %"class.std::__1::vector.154"* }
%"class.std::__1::vector.160" = type { %"class.std::__1::__vector_base.161" }
%"class.std::__1::__vector_base.161" = type { %"class.std::__1::vector"*, %"class.std::__1::vector"*, %"class.std::__1::__compressed_pair.162" }
%"class.std::__1::__compressed_pair.162" = type { %"struct.std::__1::__compressed_pair_elem.163" }
%"struct.std::__1::__compressed_pair_elem.163" = type { %"class.std::__1::vector"* }
%class.Ref.167 = type { %class.RefBase.168 }
%class.RefBase.168 = type { %"class.dawn_native::opengl::Sampler"* }
%"class.dawn_native::opengl::Sampler" = type opaque
%"class.ityp::array.169" = type { %"struct.std::__1::array.170" }
%"struct.std::__1::array.170" = type { [8 x %"class.ityp::bitset.136"] }
%"class.dawn_native::opengl::Device" = type <{ %"class.dawn_native::DeviceBase", %"struct.dawn_native::opengl::OpenGLFunctions", %"class.std::__1::queue", %"struct.std::__1::array.201", [4 x i8] }>
%"struct.dawn_native::opengl::OpenGLFunctions" = type { %"struct.dawn_native::opengl::OpenGLFunctionsBase", %"struct.dawn_native::opengl::OpenGLVersion", [4 x i8], %"class.std::__1::unordered_set" }
%"struct.dawn_native::opengl::OpenGLFunctionsBase" = type { void (i32)*, void (i32, i32)*, void (i32, i32, i8*)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32)*, void (float, float, float, float)*, void (i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i64, i8*, i32)*, void (i32, i64, i64, i8*)*, i32 (i32)*, void (i32)*, void (float, float, float, float)*, void (float)*, void (i32)*, void (i8, i8, i8, i8)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, i32 ()*, i32 (i32)*, void (i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32)*, void (i32, i32*)*, void (i32)*, void (i32, i32*)*, void (i32)*, void (i8)*, void (float, float)*, void (i32, i32)*, void (i32)*, void (i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i8*)*, void (i32)*, void (i32)*, void ()*, void ()*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32)*, void (i32, i32*)*, void (i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32*, i32*)*, i32 (i32, i8*)*, void (i32, i8*)*, void (i32, i32, i32*)*, i32 ()*, void (i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*, i32*)*, void (i32, i32, i32*, i8*)*, i8* (i32)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, i32 (i32, i8*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i8**)*, void (i32, i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, void (float)*, void (i32)*, void (i32, i32)*, void (float, float)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void ()*, void (i32, i32, i32, i32)*, void (float, i8)*, void (i32, i32, i32, i32)*, void (i32, i32*, i32, i8*, i32)*, void (i32, i32, i8**, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, float)*, void (i32, i32, float*)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32)*, void (i32)*, void (i32, float)*, void (i32, float*)*, void (i32, float, float)*, void (i32, float*)*, void (i32, float, float, float)*, void (i32, float*)*, void (i32, float, float, float, float)*, void (i32, float*)*, void (i32, i32, i32, i8, i32, i8*)*, void (i32, i32, i32, i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32*)*, void (i32, i32*)*, i8 (i32)*, void (i32, i32)*, void (i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, i8 (i32)*, void (i32, i32, i8**)*, void (i32, i32*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, i8* (i32, i64, i64, i32)*, void (i32, i64, i64)*, void (i32)*, void (i32, i32*)*, void (i32, i32*)*, i8 (i32)*, void (i32, i32, i32*)*, void (i32)*, void ()*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32)*, void (i32, i32, i8**, i32)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32*)*, i32 (i32, i8*)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, float, i32)*, i8* (i32, i32)*, void (i32, i32, i64, i64, i64)*, void (i32, i32, i8**, i32*)*, void (i32, i32, i32*, i32, i32*)*, i32 (i32, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*, i8*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i8*, i32)*, %struct.__GLsync* (i32, i32)*, i8 (%struct.__GLsync*)*, void (%struct.__GLsync*)*, i32 (%struct.__GLsync*, i32, i64)*, void (%struct.__GLsync*, i32, i64)*, void (i32, i64*)*, void (%struct.__GLsync*, i32, i32, i32*, i32*)*, void (i32, i32, i64*)*, void (i32, i32, i64*)*, void (i32, i32*)*, void (i32, i32*)*, i8 (i32)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, i8 (i32)*, void ()*, void ()*, void (i32, i32, i32*, i32*, i8*)*, void (i32, i32, i8*, i32)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32*)*, void (i32, i32, i32)*, void (i64)*, void (i32, i8*)*, void (i32, i32, i8*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*)*, i32 (i32, i32, i8*)*, void (i32, i32, i32, i32, i32*, i8*)*, void (i32, i32, i32, i32, i32*, i32, i32*, i32*)*, i32 (i32, i32, i8*)*, void (i32, i32, i32)*, void (i32, i32)*, i32 (i32, i32, i8**)*, void (i32)*, void (i32, i32*)*, void (i32, i32*)*, i8 (i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, float)*, void (i32, i32, float, float)*, void (i32, i32, float, float, float)*, void (i32, i32, float, float, float, float)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32, i8, i32, i32, i32)*, void (i32, i32, i8*)*, void (i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i8)*, void (i32, i32, float*)*, void (i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, float*)*, void (i32, i32, i64, i32)*, void (i32, i32, i32, i8, i32)*, void (i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32)*, void ()*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32*, i8)*, void (i32, i32, i32, i32, i32, i8*)*, void (void (i32, i32, i32, i32, i32, i8*, i8*)*, i8*)*, i32 (i32, i32, i32*, i32*, i32*, i32*, i32*, i8*)*, void (i32, i32, i32, i8*)*, void ()*, void (i32, i32, i32, i8*)*, void (i32, i32, i32, i32*, i8*)*, void (i8*, i32, i8*)*, void (i8*, i32, i32*, i8*)*, void (i32, i8**)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i8, i8, i8, i8)*, i8 (i32, i32)*, void (i32, i32, i32, i8*, i32)*, void (i32, i32, i32, i32, i32, i8*, i32)*, void (i32, i32, i32, i8*, i32, i32)*, void (i32, i32, i32, i32)*, void (float, float, float, float, float, float, float, float)*, i32 ()*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (float)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32, i32, i32, i32, i8)*, void (float)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32)*, void (double)*, void (i32)*, void (i32, float)*, void (i32, double*)*, void (i32, i32, i32, i32, i8*)*, void (double, double)*, void (i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i8*)*, void (i32, i32*, i32*, i32)*, void (i32, i32*, i32, i8**, i32)*, void (i32, float)*, void (i32, float*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i64, i64, i8*)*, i8* (i32, i32)*, void (i32, i32, double*)*, void (i32, double)*, void (i32, double*)*, void (i32, i16)*, void (i32, i16*)*, void (i32, double, double)*, void (i32, double*)*, void (i32, i16, i16)*, void (i32, i16*)*, void (i32, double, double, double)*, void (i32, double*)*, void (i32, i16, i16, i16)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i8, i8, i8, i8)*, void (i32, i8*)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, double, double, double, double)*, void (i32, double*)*, void (i32, i32*)*, void (i32, i16, i16, i16, i16)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i32)*, void (i32, i32)*, void ()*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i8*)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, i16*)*, void (i32, i32, i8*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32)*, void (i32, i32, i32, i32*, i8*)*, void (i32, i32*, i32, i8**, i32, i32*)*, void (i32)*, void (i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i8*)*, i32 (i32, i8*)*, void (i32, i32)*, void (i32, i32, i64*)*, void (i32, i32, i64*)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, double)*, void (i32, double, double)*, void (i32, double, double, double)*, void (i32, double, double, double, double)*, void (i32, i32, double*)*, void (i32, i32, double*)*, void (i32, i32, double*)*, void (i32, i32, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, double*)*, i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)*, void (i32, i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32*, i8*)*, void (i32, i32, i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, float*)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, double)*, void (i32, i32, i32, double*)*, void (i32, i32, double, double)*, void (i32, i32, i32, double*)*, void (i32, i32, double, double, double)*, void (i32, i32, i32, double*)*, void (i32, i32, double, double, double, double)*, void (i32, i32, i32, double*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, double*)*, void (i32, double)*, void (i32, double, double)*, void (i32, double, double, double)*, void (i32, double, double, double, double)*, void (i32, double*)*, void (i32, double*)*, void (i32, double*)*, void (i32, double*)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, double*)*, void (i32, i32, float*)*, void (i32, float, float, float, float)*, void (i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, double*)*, void (i32, double, double)*, void (i32, i32, float*)*, void (i32, i32, double*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i8*, i32, i32)*, void (i32, i32, i32, i8*, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i32, i32, i8*)*, void (i32, i32, i32, i32, i64*)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i64, i64)*, void (i32)*, void (i32, i8*, i32, i32)*, void (i32, i32, i8*, i32, i32)*, i32 (i32, i32, i8*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i64, i8*, i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*, i64*, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i64*, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i64*)*, void (i32, i32*)*, void (i32, i64, i8*, i32)*, void (i32, i64, i8*, i32)*, void (i32, i64, i64, i8*)*, void (i32, i32, i64, i64, i64)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i32, i32, i8*)*, i8* (i32, i32)*, i8* (i32, i64, i64, i32)*, i8 (i32)*, void (i32, i64, i64)*, void (i32, i32, i32*)*, void (i32, i32, i64*)*, void (i32, i32, i8**)*, void (i32, i64, i64, i8*)*, void (i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, float, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i8*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i64, i32)*, void (i32, i32, i32, i32*, i64*, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32, i8, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i64*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, double*)*, void (i32, i32, i32, double*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i16*)*, void (i32, i8*)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i8*, i32, i8*, i8*)*, void (i32, i8, i32, i32, i32, i8*)*, void (i32, i8, i32, i32, i32, i8*)*, void ()*, void (i32, i8*, i32, i32*, i32*)*, void (i32, i8*, i64, i32, i32)*, void (i32, i32, i8*, i64, i32, i32)*, void (float, float, float)* }
%struct.__GLsync = type opaque
%"struct.dawn_native::opengl::OpenGLVersion" = type { i32, i32, i32 }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.171" }
%"class.std::__1::__hash_table.171" = type <{ %"class.std::__1::unique_ptr.172", %"class.std::__1::__compressed_pair.182", %"class.std::__1::__compressed_pair.187", %"class.std::__1::__compressed_pair.189", [4 x i8] }>
%"class.std::__1::unique_ptr.172" = type { %"class.std::__1::__compressed_pair.173" }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174", %"struct.std::__1::__compressed_pair_elem.176" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"struct.std::__1::__hash_node_base.175"** }
%"struct.std::__1::__hash_node_base.175" = type { %"struct.std::__1::__hash_node_base.175"* }
%"struct.std::__1::__compressed_pair_elem.176" = type { %"class.std::__1::__bucket_list_deallocator.177" }
%"class.std::__1::__bucket_list_deallocator.177" = type { %"class.std::__1::__compressed_pair.178" }
%"class.std::__1::__compressed_pair.178" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"class.std::__1::__compressed_pair.182" = type { %"struct.std::__1::__compressed_pair_elem.183" }
%"struct.std::__1::__compressed_pair_elem.183" = type { %"struct.std::__1::__hash_node_base.175" }
%"class.std::__1::__compressed_pair.187" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"class.std::__1::__compressed_pair.189" = type { %"struct.std::__1::__compressed_pair_elem.73" }
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.197" }
%"struct.std::__1::__split_buffer" = type { %"struct.std::__1::pair"**, %"struct.std::__1::pair"**, %"struct.std::__1::pair"**, %"class.std::__1::__compressed_pair.192" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.192" = type { %"struct.std::__1::__compressed_pair_elem.193" }
%"struct.std::__1::__compressed_pair_elem.193" = type { %"struct.std::__1::pair"** }
%"class.std::__1::__compressed_pair.197" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::array.201" = type { [55 x %"struct.dawn_native::opengl::GLFormat"] }
%"struct.dawn_native::opengl::GLFormat" = type { i32, i32, i32, i8, i32 }
%"struct.dawn_native::RenderPipelineDescriptor" = type { %"struct.dawn_native::ChainedStruct"*, i8*, %"class.dawn_native::PipelineLayoutBase"*, %"struct.dawn_native::VertexState", %"struct.dawn_native::PrimitiveState", %"struct.dawn_native::DepthStencilState"*, %"struct.dawn_native::MultisampleState", %"struct.dawn_native::FragmentState"* }
%"struct.dawn_native::VertexState" = type { %"struct.dawn_native::ChainedStruct"*, %"class.dawn_native::ShaderModuleBase"*, i8*, i32, %"struct.dawn_native::VertexBufferLayout"* }
%"struct.dawn_native::VertexBufferLayout" = type { i64, i32, i32, %"struct.dawn_native::VertexAttribute"* }
%"struct.dawn_native::VertexAttribute" = type { i32, i64, i32 }
%"struct.dawn_native::FragmentState" = type { %"struct.dawn_native::ChainedStruct"*, %"class.dawn_native::ShaderModuleBase"*, i8*, i32, %"struct.dawn_native::ColorTargetState"* }
%"class.dawn_native::RenderPipelineBase" = type <{ %"class.dawn_native::PipelineBase", i32, [4 x i8], %"class.ityp::bitset.136", %"class.ityp::array.137", %"class.ityp::bitset.139", %"class.ityp::array.142", %class.Ref.144, %"class.ityp::array.148", %"class.ityp::array.150", %"struct.dawn_native::PrimitiveState", %"struct.dawn_native::DepthStencilState", %"struct.dawn_native::MultisampleState", i8, [7 x i8] }>
%"class.dawn_native::opengl::PipelineLayout" = type opaque
%"class.std::__1::__bit_iterator" = type <{ i64*, i32, [4 x i8] }>
%"class.BitSetIterator<16, unsigned char>::Iterator" = type { %"class.std::__1::bitset.116", i64, i64 }
%"class.dawn_native::opengl::PersistentPipelineState" = type { i32, i32, i32, i32 }
%"class.std::__1::__bit_iterator.208" = type <{ i64*, i32, [4 x i8] }>
%"class.BitSetIterator<4, unsigned char>::Iterator" = type { %"class.std::__1::bitset.120", i64, i64 }

$_ZNSt3__116__copy_unalignedINS_8__bitsetILm1ELm16EEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS3_IS4_XT0_EXLi0EEEES6_S5_ = comdat any

$_ZNSt3__116__copy_unalignedINS_8__bitsetILm1ELm4EEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS3_IS4_XT0_EXLi0EEEES6_S5_ = comdat any

$_ZZN14BitSetIteratorILm16EhE8Iterator10getNextBitEvE8wordMask = comdat any

$_ZZN14BitSetIteratorILm4EhE8Iterator10getNextBitEvE8wordMask = comdat any

@_ZTVN11dawn_native6opengl14RenderPipelineE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.dawn_native::opengl::RenderPipeline"*)* @_ZN11dawn_native6opengl14RenderPipelineD2Ev to i8*), i8* bitcast (void (%"class.dawn_native::opengl::RenderPipeline"*)* @_ZN11dawn_native6opengl14RenderPipelineD0Ev to i8*), i8* bitcast (void (%class.RefCounted*)* @_ZN10RefCounted10DeleteThisEv to i8*), i8* bitcast (i64 (%"class.dawn_native::RenderPipelineBase"*)* @_ZN11dawn_native18RenderPipelineBase18ComputeContentHashEv to i8*)] }, align 8
@_ZZN14BitSetIteratorILm16EhE8Iterator10getNextBitEvE8wordMask = linkonce_odr hidden local_unnamed_addr global { i64 } { i64 65535 }, comdat, align 8
@_ZZN14BitSetIteratorILm4EhE8Iterator10getNextBitEvE8wordMask = linkonce_odr hidden local_unnamed_addr global { i64 } { i64 15 }, comdat, align 8
@switch.table._ZN11dawn_native6opengl14RenderPipelineC2EPNS0_6DeviceEPKNS_24RenderPipelineDescriptorE = private unnamed_addr constant [5 x i32] [i32 0, i32 1, i32 3, i32 4, i32 5], align 4
@switch.table._ZN11dawn_native6opengl14RenderPipeline8ApplyNowERNS0_23PersistentPipelineStateE.13 = private unnamed_addr constant [5 x i32] [i32 32774, i32 32778, i32 32779, i32 32775, i32 32776], align 4
@switch.table._ZN11dawn_native6opengl14RenderPipeline8ApplyNowERNS0_23PersistentPipelineStateE.14 = private unnamed_addr constant [13 x i32] [i32 0, i32 1, i32 768, i32 769, i32 770, i32 771, i32 774, i32 775, i32 772, i32 773, i32 776, i32 32771, i32 32772], align 4
@switch.table._ZN11dawn_native6opengl14RenderPipeline8ApplyNowERNS0_23PersistentPipelineStateE.15 = private unnamed_addr constant [8 x i32] [i32 7680, i32 0, i32 7681, i32 5386, i32 7682, i32 7683, i32 34055, i32 34056], align 4
@switch.table._ZN11dawn_native6opengl14RenderPipeline8ApplyNowERNS0_23PersistentPipelineStateE.17 = private unnamed_addr constant [13 x i32] [i32 0, i32 1, i32 768, i32 769, i32 770, i32 771, i32 774, i32 775, i32 772, i32 773, i32 776, i32 32769, i32 32770], align 4

@_ZN11dawn_native6opengl14RenderPipelineC1EPNS0_6DeviceEPKNS_24RenderPipelineDescriptorE = hidden unnamed_addr alias void (%"class.dawn_native::opengl::RenderPipeline"*, %"class.dawn_native::opengl::Device"*, %"struct.dawn_native::RenderPipelineDescriptor"*), void (%"class.dawn_native::opengl::RenderPipeline"*, %"class.dawn_native::opengl::Device"*, %"struct.dawn_native::RenderPipelineDescriptor"*)* @_ZN11dawn_native6opengl14RenderPipelineC2EPNS0_6DeviceEPKNS_24RenderPipelineDescriptorE
@_ZN11dawn_native6opengl14RenderPipelineD1Ev = hidden unnamed_addr alias void (%"class.dawn_native::opengl::RenderPipeline"*), void (%"class.dawn_native::opengl::RenderPipeline"*)* @_ZN11dawn_native6opengl14RenderPipelineD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11dawn_native6opengl14RenderPipelineC2EPNS0_6DeviceEPKNS_24RenderPipelineDescriptorE(%"class.dawn_native::opengl::RenderPipeline"*, %"class.dawn_native::opengl::Device"*, %"struct.dawn_native::RenderPipelineDescriptor"*) unnamed_addr #0 align 2 {
  %4 = bitcast %"class.dawn_native::opengl::RenderPipeline"* %0 to %"class.dawn_native::RenderPipelineBase"*
  %5 = getelementptr inbounds %"class.dawn_native::opengl::Device", %"class.dawn_native::opengl::Device"* %1, i64 0, i32 0
  tail call void @_ZN11dawn_native18RenderPipelineBaseC2EPNS_10DeviceBaseEPKNS_24RenderPipelineDescriptorE(%"class.dawn_native::RenderPipelineBase"* %4, %"class.dawn_native::DeviceBase"* %5, %"struct.dawn_native::RenderPipelineDescriptor"* %2) #7
  %6 = getelementptr inbounds %"class.dawn_native::opengl::RenderPipeline", %"class.dawn_native::opengl::RenderPipeline"* %0, i64 0, i32 1
  tail call void @_ZN11dawn_native6opengl10PipelineGLC2Ev(%"class.dawn_native::opengl::PipelineGL"* %6) #7
  %7 = getelementptr inbounds %"class.dawn_native::opengl::RenderPipeline", %"class.dawn_native::opengl::RenderPipeline"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN11dawn_native6opengl14RenderPipelineE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds %"class.dawn_native::opengl::RenderPipeline", %"class.dawn_native::opengl::RenderPipeline"* %0, i64 0, i32 2
  store i32 0, i32* %8, align 8
  %9 = getelementptr inbounds %"class.dawn_native::opengl::RenderPipeline", %"class.dawn_native::opengl::RenderPipeline"* %0, i64 0, i32 3
  %10 = tail call i32 @_ZNK11dawn_native18RenderPipelineBase20GetPrimitiveTopologyEv(%"class.dawn_native::RenderPipelineBase"* %4) #7
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds [5 x i32], [5 x i32]* @switch.table._ZN11dawn_native6opengl14RenderPipelineC2EPNS0_6DeviceEPKNS_24RenderPipelineDescriptorE, i64 0, i64 %11
  %13 = load i32, i32* %12, align 4
  store i32 %13, i32* %9, align 4
  %14 = getelementptr inbounds %"class.dawn_native::opengl::RenderPipeline", %"class.dawn_native::opengl::RenderPipeline"* %0, i64 0, i32 4
  %15 = bitcast %"class.ityp::array.169"* %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 64, i1 false) #7
  %16 = getelementptr inbounds %"class.dawn_native::opengl::Device", %"class.dawn_native::opengl::Device"* %1, i64 0, i32 1
  %17 = getelementptr inbounds %"class.dawn_native::opengl::RenderPipeline", %"class.dawn_native::opengl::RenderPipeline"* %0, i64 0, i32 0, i32 0
  %18 = tail call %"class.dawn_native::PipelineLayoutBase"* @_ZN11dawn_native12PipelineBase9GetLayoutEv(%"class.dawn_native::PipelineBase"* %17) #7
  %19 = bitcast %"class.dawn_native::PipelineLayoutBase"* %18 to %"class.dawn_native::opengl::PipelineLayout"*
  %20 = tail call dereferenceable(120) %"class.dawn_native::PerStage"* @_ZNK11dawn_native12PipelineBase12GetAllStagesEv(%"class.dawn_native::PipelineBase"* %17) #7
  tail call void @_ZN11dawn_native6opengl10PipelineGL10InitializeERKNS0_15OpenGLFunctionsEPKNS0_14PipelineLayoutERKNS_8PerStageINS_17ProgrammableStageEEE(%"class.dawn_native::opengl::PipelineGL"* %6, %"struct.dawn_native::opengl::OpenGLFunctions"* dereferenceable(5664) %16, %"class.dawn_native::opengl::PipelineLayout"* %19, %"class.dawn_native::PerStage"* dereferenceable(120) %20) #7
  tail call void @_ZN11dawn_native6opengl14RenderPipeline23CreateVAOForVertexStateEv(%"class.dawn_native::opengl::RenderPipeline"* %0)
  ret void
}

declare void @_ZN11dawn_native18RenderPipelineBaseC2EPNS_10DeviceBaseEPKNS_24RenderPipelineDescriptorE(%"class.dawn_native::RenderPipelineBase"*, %"class.dawn_native::DeviceBase"*, %"struct.dawn_native::RenderPipelineDescriptor"*) unnamed_addr #1

declare void @_ZN11dawn_native6opengl10PipelineGLC2Ev(%"class.dawn_native::opengl::PipelineGL"*) unnamed_addr #1

declare i32 @_ZNK11dawn_native18RenderPipelineBase20GetPrimitiveTopologyEv(%"class.dawn_native::RenderPipelineBase"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN11dawn_native6opengl10PipelineGL10InitializeERKNS0_15OpenGLFunctionsEPKNS0_14PipelineLayoutERKNS_8PerStageINS_17ProgrammableStageEEE(%"class.dawn_native::opengl::PipelineGL"*, %"struct.dawn_native::opengl::OpenGLFunctions"* dereferenceable(5664), %"class.dawn_native::opengl::PipelineLayout"*, %"class.dawn_native::PerStage"* dereferenceable(120)) local_unnamed_addr #1

declare %"class.dawn_native::PipelineLayoutBase"* @_ZN11dawn_native12PipelineBase9GetLayoutEv(%"class.dawn_native::PipelineBase"*) local_unnamed_addr #1

declare dereferenceable(120) %"class.dawn_native::PerStage"* @_ZNK11dawn_native12PipelineBase12GetAllStagesEv(%"class.dawn_native::PipelineBase"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11dawn_native6opengl14RenderPipeline23CreateVAOForVertexStateEv(%"class.dawn_native::opengl::RenderPipeline"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.std::__1::__bit_iterator", align 8
  %3 = alloca %"class.std::__1::__bit_iterator", align 8
  %4 = alloca %"class.std::__1::__bit_iterator", align 8
  %5 = alloca %"class.std::__1::__bit_iterator", align 8
  %6 = alloca %"class.std::__1::__bit_iterator", align 8
  %7 = alloca %"class.std::__1::__bit_iterator", align 8
  %8 = alloca %"class.std::__1::__bit_iterator", align 8
  %9 = alloca %"class.std::__1::__bit_iterator", align 8
  %10 = alloca %"class.BitSetIterator<16, unsigned char>::Iterator", align 8
  %11 = getelementptr inbounds %"class.dawn_native::opengl::RenderPipeline", %"class.dawn_native::opengl::RenderPipeline"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %12 = tail call %"class.dawn_native::DeviceBase"* @_ZNK11dawn_native10ObjectBase9GetDeviceEv(%"class.dawn_native::ObjectBase"* %11) #7
  %13 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %12, i64 1, i32 18, i32 0, i64 14, i32 6, i32 0, i64 1, i32 2
  %14 = bitcast i8* %13 to void (i32, i32*)**
  %15 = load void (i32, i32*)*, void (i32, i32*)** %14, align 8
  %16 = getelementptr inbounds %"class.dawn_native::opengl::RenderPipeline", %"class.dawn_native::opengl::RenderPipeline"* %0, i64 0, i32 2
  tail call void %15(i32 1, i32* %16) #7
  %17 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %12, i64 1, i32 18, i32 0, i64 14, i32 6, i32 0, i64 1
  %18 = bitcast %"struct.dawn_native::AspectInfo"* %17 to void (i32)**
  %19 = load void (i32)*, void (i32)** %18, align 8
  %20 = load i32, i32* %16, align 8
  tail call void %19(i32 %20) #7
  %21 = bitcast %"class.dawn_native::opengl::RenderPipeline"* %0 to %"class.dawn_native::RenderPipelineBase"*
  %22 = tail call dereferenceable(8) %"class.ityp::bitset.136"* @_ZNK11dawn_native18RenderPipelineBase25GetAttributeLocationsUsedEv(%"class.dawn_native::RenderPipelineBase"* %21) #7
  %23 = getelementptr inbounds %"class.ityp::bitset.136", %"class.ityp::bitset.136"* %22, i64 0, i32 0, i32 0, i32 0
  %24 = load i64, i64* %23, align 8, !noalias !2
  %25 = bitcast %"class.BitSetIterator<16, unsigned char>::Iterator"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %25) #7
  %26 = getelementptr inbounds %"class.BitSetIterator<16, unsigned char>::Iterator", %"class.BitSetIterator<16, unsigned char>::Iterator"* %10, i64 0, i32 0, i32 0, i32 0
  %27 = getelementptr inbounds %"class.BitSetIterator<16, unsigned char>::Iterator", %"class.BitSetIterator<16, unsigned char>::Iterator"* %10, i64 0, i32 1
  %28 = getelementptr inbounds %"class.BitSetIterator<16, unsigned char>::Iterator", %"class.BitSetIterator<16, unsigned char>::Iterator"* %10, i64 0, i32 2
  store i64 %24, i64* %26, align 8, !alias.scope !5
  %29 = bitcast i64* %27 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 16, i1 false) #7, !alias.scope !5
  %30 = and i64 %24, 65535
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %65, label %32

32:                                               ; preds = %1
  %33 = ptrtoint %"class.BitSetIterator<16, unsigned char>::Iterator"* %10 to i64
  %34 = bitcast %"class.std::__1::__bit_iterator"* %5 to i8*
  %35 = bitcast %"class.std::__1::__bit_iterator"* %2 to i8*
  %36 = bitcast %"class.std::__1::__bit_iterator"* %3 to i8*
  %37 = bitcast %"class.std::__1::__bit_iterator"* %4 to i8*
  %38 = bitcast %"class.std::__1::__bit_iterator"* %2 to i64*
  %39 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %2, i64 0, i32 1
  %40 = bitcast %"class.std::__1::__bit_iterator"* %3 to i64*
  %41 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 1
  %42 = bitcast %"class.std::__1::__bit_iterator"* %4 to i64*
  %43 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %4, i64 0, i32 1
  br label %44

44:                                               ; preds = %56, %32
  %45 = phi i64 [ %24, %32 ], [ %58, %56 ]
  %46 = load i64, i64* getelementptr inbounds ({ i64 }, { i64 }* @_ZZN14BitSetIteratorILm16EhE8Iterator10getNextBitEvE8wordMask, i64 0, i32 0), align 8
  %47 = and i64 %46, %45
  %48 = and i64 %47, 4294967295
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %56, label %50

50:                                               ; preds = %44
  %51 = trunc i64 %47 to i32
  %52 = call i32 @_Z11ScanForwardj(i32 %51) #7
  %53 = zext i32 %52 to i64
  %54 = load i64, i64* %28, align 8, !alias.scope !5
  %55 = add i64 %54, %53
  br label %62

56:                                               ; preds = %44
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %34) #7, !noalias !5
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %35) #7, !noalias !5
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %36) #7, !noalias !5
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %37) #7, !noalias !5
  store i64 %33, i64* %38, align 8, !noalias !8
  store i32 16, i32* %39, align 8, !noalias !8
  store i64 %33, i64* %40, align 8, !noalias !8
  store i32 16, i32* %41, align 8, !noalias !8
  store i64 %33, i64* %42, align 8, !noalias !8
  store i32 0, i32* %43, align 8, !noalias !8
  call void @_ZNSt3__116__copy_unalignedINS_8__bitsetILm1ELm16EEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS3_IS4_XT0_EXLi0EEEES6_S5_(%"class.std::__1::__bit_iterator"* nonnull sret %5, %"class.std::__1::__bit_iterator"* nonnull %2, %"class.std::__1::__bit_iterator"* nonnull %3, %"class.std::__1::__bit_iterator"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %35) #7, !noalias !5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %36) #7, !noalias !5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %37) #7, !noalias !5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %34) #7, !noalias !5
  %57 = load i64, i64* %26, align 8, !alias.scope !5
  %58 = and i64 %57, -65536
  store i64 %58, i64* %26, align 8, !alias.scope !5
  %59 = load i64, i64* %28, align 8, !alias.scope !5
  %60 = add i64 %59, 32
  store i64 %60, i64* %28, align 8, !alias.scope !5
  %61 = icmp ult i64 %60, 16
  br i1 %61, label %44, label %62

62:                                               ; preds = %56, %50
  %63 = phi i64 [ %54, %50 ], [ %60, %56 ]
  %64 = phi i64 [ %55, %50 ], [ 0, %56 ]
  store i64 %64, i64* %27, align 8, !alias.scope !5
  br label %67

65:                                               ; preds = %1
  store i64 32, i64* %28, align 8, !alias.scope !5
  %66 = ptrtoint %"class.BitSetIterator<16, unsigned char>::Iterator"* %10 to i64
  br label %67

67:                                               ; preds = %62, %65
  %68 = phi i64 [ %33, %62 ], [ %66, %65 ]
  %69 = phi i64 [ %64, %62 ], [ 0, %65 ]
  %70 = phi i64 [ %63, %62 ], [ 32, %65 ]
  %71 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %12, i64 1, i32 18, i32 0, i64 2, i32 6, i32 0, i64 0, i32 2
  %72 = bitcast i8* %71 to void (i32)**
  %73 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %12, i64 1, i32 18, i32 0, i64 20, i32 6, i32 0, i64 0, i32 0, i32 2
  %74 = bitcast i32* %73 to void (i32, i32)**
  %75 = bitcast %"class.std::__1::__bit_iterator"* %9 to i8*
  %76 = bitcast %"class.std::__1::__bit_iterator"* %6 to i8*
  %77 = bitcast %"class.std::__1::__bit_iterator"* %7 to i8*
  %78 = bitcast %"class.std::__1::__bit_iterator"* %8 to i8*
  %79 = bitcast %"class.std::__1::__bit_iterator"* %6 to i64*
  %80 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %6, i64 0, i32 1
  %81 = bitcast %"class.std::__1::__bit_iterator"* %7 to i64*
  %82 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %7, i64 0, i32 1
  %83 = bitcast %"class.std::__1::__bit_iterator"* %8 to i64*
  %84 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %8, i64 0, i32 1
  br label %85

85:                                               ; preds = %151, %67
  %86 = phi i64 [ %153, %151 ], [ %69, %67 ]
  %87 = phi i64 [ %152, %151 ], [ %70, %67 ]
  %88 = icmp eq i64 %87, 32
  br i1 %88, label %89, label %94

89:                                               ; preds = %85
  %90 = load i64, i64* %26, align 8
  %91 = and i64 %90, 65535
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %93, label %94

93:                                               ; preds = %89
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %25) #7
  ret void

94:                                               ; preds = %89, %85
  %95 = trunc i64 %86 to i8
  %96 = call dereferenceable(24) %"struct.dawn_native::VertexAttributeInfo"* @_ZNK11dawn_native18RenderPipelineBase12GetAttributeEh(%"class.dawn_native::RenderPipelineBase"* %21, i8 zeroext %95) #7
  %97 = trunc i64 %86 to i32
  %98 = and i32 %97, 255
  %99 = load void (i32)*, void (i32)** %72, align 8
  call void %99(i32 %98) #7
  %100 = getelementptr inbounds %"struct.dawn_native::VertexAttributeInfo", %"struct.dawn_native::VertexAttributeInfo"* %96, i64 0, i32 3
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i64
  %103 = and i64 %86, 255
  %104 = getelementptr inbounds %"class.dawn_native::opengl::RenderPipeline", %"class.dawn_native::opengl::RenderPipeline"* %0, i64 0, i32 4, i32 0, i32 0, i64 %102, i32 0, i32 0, i32 0
  %105 = shl i64 1, %103
  %106 = load i64, i64* %104, align 8
  %107 = or i64 %106, %105
  store i64 %107, i64* %104, align 8
  %108 = load i8, i8* %100, align 1
  %109 = call dereferenceable(16) %"struct.dawn_native::VertexBufferInfo"* @_ZNK11dawn_native18RenderPipelineBase15GetVertexBufferEh(%"class.dawn_native::RenderPipelineBase"* %21, i8 zeroext %108) #7
  %110 = getelementptr inbounds %"struct.dawn_native::VertexBufferInfo", %"struct.dawn_native::VertexBufferInfo"* %109, i64 0, i32 0
  %111 = load i64, i64* %110, align 8
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %113, label %115

113:                                              ; preds = %94
  %114 = load void (i32, i32)*, void (i32, i32)** %74, align 8
  call void %114(i32 %98, i32 -1) #7
  br label %121

115:                                              ; preds = %94
  %116 = getelementptr inbounds %"struct.dawn_native::VertexBufferInfo", %"struct.dawn_native::VertexBufferInfo"* %109, i64 0, i32 1
  %117 = load i32, i32* %116, align 8
  %118 = icmp eq i32 %117, 1
  br i1 %118, label %119, label %121

119:                                              ; preds = %115
  %120 = load void (i32, i32)*, void (i32, i32)** %74, align 8
  call void %120(i32 %98, i32 1) #7
  br label %121

121:                                              ; preds = %119, %115, %113
  %122 = load i64, i64* %27, align 8
  %123 = load i64, i64* %28, align 8
  %124 = sub i64 %122, %123
  %125 = icmp ugt i64 %124, 15
  br i1 %125, label %126, label %127

126:                                              ; preds = %121
  call void @abort() #8
  unreachable

127:                                              ; preds = %121
  %128 = shl i64 1, %124
  %129 = xor i64 %128, -1
  %130 = load i64, i64* %26, align 8
  %131 = and i64 %130, %129
  store i64 %131, i64* %26, align 8
  %132 = icmp ult i64 %123, 16
  br i1 %132, label %133, label %151

133:                                              ; preds = %127, %145
  %134 = phi i64 [ %147, %145 ], [ %131, %127 ]
  %135 = load i64, i64* getelementptr inbounds ({ i64 }, { i64 }* @_ZZN14BitSetIteratorILm16EhE8Iterator10getNextBitEvE8wordMask, i64 0, i32 0), align 8
  %136 = and i64 %135, %134
  %137 = and i64 %136, 4294967295
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %145, label %139

139:                                              ; preds = %133
  %140 = trunc i64 %136 to i32
  %141 = call i32 @_Z11ScanForwardj(i32 %140) #7
  %142 = zext i32 %141 to i64
  %143 = load i64, i64* %28, align 8
  %144 = add i64 %143, %142
  br label %151

145:                                              ; preds = %133
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %75) #7
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %76) #7
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %77) #7
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %78) #7
  store i64 %68, i64* %79, align 8, !noalias !11
  store i32 16, i32* %80, align 8, !noalias !11
  store i64 %68, i64* %81, align 8, !noalias !11
  store i32 16, i32* %82, align 8, !noalias !11
  store i64 %68, i64* %83, align 8, !noalias !11
  store i32 0, i32* %84, align 8, !noalias !11
  call void @_ZNSt3__116__copy_unalignedINS_8__bitsetILm1ELm16EEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS3_IS4_XT0_EXLi0EEEES6_S5_(%"class.std::__1::__bit_iterator"* nonnull sret %9, %"class.std::__1::__bit_iterator"* nonnull %6, %"class.std::__1::__bit_iterator"* nonnull %7, %"class.std::__1::__bit_iterator"* nonnull %8) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %76) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %77) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %78) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %75) #7
  %146 = load i64, i64* %26, align 8
  %147 = and i64 %146, -65536
  store i64 %147, i64* %26, align 8
  %148 = load i64, i64* %28, align 8
  %149 = add i64 %148, 32
  store i64 %149, i64* %28, align 8
  %150 = icmp ult i64 %149, 16
  br i1 %150, label %133, label %151

151:                                              ; preds = %145, %127, %139
  %152 = phi i64 [ %143, %139 ], [ %123, %127 ], [ %149, %145 ]
  %153 = phi i64 [ %144, %139 ], [ 0, %127 ], [ 0, %145 ]
  store i64 %153, i64* %27, align 8
  br label %85
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11dawn_native6opengl14RenderPipelineD2Ev(%"class.dawn_native::opengl::RenderPipeline"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.dawn_native::opengl::RenderPipeline", %"class.dawn_native::opengl::RenderPipeline"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN11dawn_native6opengl14RenderPipelineE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.dawn_native::opengl::RenderPipeline", %"class.dawn_native::opengl::RenderPipeline"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = tail call %"class.dawn_native::DeviceBase"* @_ZNK11dawn_native10ObjectBase9GetDeviceEv(%"class.dawn_native::ObjectBase"* %3) #7
  %5 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %4, i64 1, i32 18, i32 0, i64 14, i32 6, i32 0, i64 1, i32 0, i32 2
  %6 = bitcast i32* %5 to void (i32, i32*)**
  %7 = load void (i32, i32*)*, void (i32, i32*)** %6, align 8
  %8 = getelementptr inbounds %"class.dawn_native::opengl::RenderPipeline", %"class.dawn_native::opengl::RenderPipeline"* %0, i64 0, i32 2
  tail call void %7(i32 1, i32* %8) #7
  %9 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %4, i64 1, i32 18, i32 0, i64 14, i32 6, i32 0, i64 1
  %10 = bitcast %"struct.dawn_native::AspectInfo"* %9 to void (i32)**
  %11 = load void (i32)*, void (i32)** %10, align 8
  tail call void %11(i32 0) #7
  %12 = getelementptr inbounds %"class.dawn_native::opengl::RenderPipeline", %"class.dawn_native::opengl::RenderPipeline"* %0, i64 0, i32 1
  tail call void @_ZN11dawn_native6opengl10PipelineGLD2Ev(%"class.dawn_native::opengl::PipelineGL"* %12) #7
  %13 = bitcast %"class.dawn_native::opengl::RenderPipeline"* %0 to %"class.dawn_native::RenderPipelineBase"*
  tail call void @_ZN11dawn_native18RenderPipelineBaseD2Ev(%"class.dawn_native::RenderPipelineBase"* %13) #7
  ret void
}

declare %"class.dawn_native::DeviceBase"* @_ZNK11dawn_native10ObjectBase9GetDeviceEv(%"class.dawn_native::ObjectBase"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN11dawn_native6opengl10PipelineGLD2Ev(%"class.dawn_native::opengl::PipelineGL"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN11dawn_native18RenderPipelineBaseD2Ev(%"class.dawn_native::RenderPipelineBase"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11dawn_native6opengl14RenderPipelineD0Ev(%"class.dawn_native::opengl::RenderPipeline"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.dawn_native::opengl::RenderPipeline", %"class.dawn_native::opengl::RenderPipeline"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN11dawn_native6opengl14RenderPipelineE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.dawn_native::opengl::RenderPipeline", %"class.dawn_native::opengl::RenderPipeline"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = tail call %"class.dawn_native::DeviceBase"* @_ZNK11dawn_native10ObjectBase9GetDeviceEv(%"class.dawn_native::ObjectBase"* %3) #7
  %5 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %4, i64 1, i32 18, i32 0, i64 14, i32 6, i32 0, i64 1, i32 0, i32 2
  %6 = bitcast i32* %5 to void (i32, i32*)**
  %7 = load void (i32, i32*)*, void (i32, i32*)** %6, align 8
  %8 = getelementptr inbounds %"class.dawn_native::opengl::RenderPipeline", %"class.dawn_native::opengl::RenderPipeline"* %0, i64 0, i32 2
  tail call void %7(i32 1, i32* %8) #7
  %9 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %4, i64 1, i32 18, i32 0, i64 14, i32 6, i32 0, i64 1
  %10 = bitcast %"struct.dawn_native::AspectInfo"* %9 to void (i32)**
  %11 = load void (i32)*, void (i32)** %10, align 8
  tail call void %11(i32 0) #7
  %12 = getelementptr inbounds %"class.dawn_native::opengl::RenderPipeline", %"class.dawn_native::opengl::RenderPipeline"* %0, i64 0, i32 1
  tail call void @_ZN11dawn_native6opengl10PipelineGLD2Ev(%"class.dawn_native::opengl::PipelineGL"* %12) #7
  %13 = bitcast %"class.dawn_native::opengl::RenderPipeline"* %0 to %"class.dawn_native::RenderPipelineBase"*
  tail call void @_ZN11dawn_native18RenderPipelineBaseD2Ev(%"class.dawn_native::RenderPipelineBase"* %13) #7
  %14 = bitcast %"class.dawn_native::opengl::RenderPipeline"* %0 to i8*
  tail call void @_ZdlPv(i8* %14) #9
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK11dawn_native6opengl14RenderPipeline22GetGLPrimitiveTopologyEv(%"class.dawn_native::opengl::RenderPipeline"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.dawn_native::opengl::RenderPipeline", %"class.dawn_native::opengl::RenderPipeline"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 4
  ret i32 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK11dawn_native6opengl14RenderPipeline30GetAttributesUsingVertexBufferEh(%"class.dawn_native::opengl::RenderPipeline"* nocapture readonly, i8 zeroext) local_unnamed_addr #5 align 2 {
  %3 = zext i8 %1 to i64
  %4 = getelementptr inbounds %"class.dawn_native::opengl::RenderPipeline", %"class.dawn_native::opengl::RenderPipeline"* %0, i64 0, i32 4, i32 0, i32 0, i64 %3, i32 0, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  ret i64 %5
}

declare dereferenceable(8) %"class.ityp::bitset.136"* @_ZNK11dawn_native18RenderPipelineBase25GetAttributeLocationsUsedEv(%"class.dawn_native::RenderPipelineBase"*) local_unnamed_addr #1

declare dereferenceable(24) %"struct.dawn_native::VertexAttributeInfo"* @_ZNK11dawn_native18RenderPipelineBase12GetAttributeEh(%"class.dawn_native::RenderPipelineBase"*, i8 zeroext) local_unnamed_addr #1

declare dereferenceable(16) %"struct.dawn_native::VertexBufferInfo"* @_ZNK11dawn_native18RenderPipelineBase15GetVertexBufferEh(%"class.dawn_native::RenderPipelineBase"*, i8 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11dawn_native6opengl14RenderPipeline8ApplyNowERNS0_23PersistentPipelineStateE(%"class.dawn_native::opengl::RenderPipeline"*, %"class.dawn_native::opengl::PersistentPipelineState"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::__bit_iterator.208", align 8
  %4 = alloca %"class.std::__1::__bit_iterator.208", align 8
  %5 = alloca %"class.std::__1::__bit_iterator.208", align 8
  %6 = alloca %"class.std::__1::__bit_iterator.208", align 8
  %7 = alloca %"class.std::__1::__bit_iterator.208", align 8
  %8 = alloca %"class.std::__1::__bit_iterator.208", align 8
  %9 = alloca %"class.std::__1::__bit_iterator.208", align 8
  %10 = alloca %"class.std::__1::__bit_iterator.208", align 8
  %11 = alloca %"class.std::__1::__bit_iterator.208", align 8
  %12 = alloca %"class.std::__1::__bit_iterator.208", align 8
  %13 = alloca %"class.std::__1::__bit_iterator.208", align 8
  %14 = alloca %"class.std::__1::__bit_iterator.208", align 8
  %15 = alloca %"class.std::__1::__bit_iterator.208", align 8
  %16 = alloca %"class.std::__1::__bit_iterator.208", align 8
  %17 = alloca %"class.std::__1::__bit_iterator.208", align 8
  %18 = alloca %"class.std::__1::__bit_iterator.208", align 8
  %19 = alloca %"class.BitSetIterator<4, unsigned char>::Iterator", align 8
  %20 = alloca %"class.BitSetIterator<4, unsigned char>::Iterator", align 8
  %21 = getelementptr inbounds %"class.dawn_native::opengl::RenderPipeline", %"class.dawn_native::opengl::RenderPipeline"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %22 = tail call %"class.dawn_native::DeviceBase"* @_ZNK11dawn_native10ObjectBase9GetDeviceEv(%"class.dawn_native::ObjectBase"* %21) #7
  %23 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %22, i64 1
  %24 = bitcast %"class.dawn_native::DeviceBase"* %23 to %"struct.dawn_native::opengl::OpenGLFunctions"*
  %25 = getelementptr inbounds %"class.dawn_native::opengl::RenderPipeline", %"class.dawn_native::opengl::RenderPipeline"* %0, i64 0, i32 1
  tail call void @_ZN11dawn_native6opengl10PipelineGL8ApplyNowERKNS0_15OpenGLFunctionsE(%"class.dawn_native::opengl::PipelineGL"* %25, %"struct.dawn_native::opengl::OpenGLFunctions"* dereferenceable(5664) %24) #7
  %26 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %22, i64 1, i32 18, i32 0, i64 14, i32 6, i32 0, i64 1
  %27 = bitcast %"struct.dawn_native::AspectInfo"* %26 to void (i32)**
  %28 = load void (i32)*, void (i32)** %27, align 8
  %29 = getelementptr inbounds %"class.dawn_native::opengl::RenderPipeline", %"class.dawn_native::opengl::RenderPipeline"* %0, i64 0, i32 2
  %30 = load i32, i32* %29, align 8
  tail call void %28(i32 %30) #7
  %31 = bitcast %"class.dawn_native::opengl::RenderPipeline"* %0 to %"class.dawn_native::RenderPipelineBase"*
  %32 = tail call i32 @_ZNK11dawn_native18RenderPipelineBase12GetFrontFaceEv(%"class.dawn_native::RenderPipelineBase"* %31) #7
  %33 = tail call i32 @_ZNK11dawn_native18RenderPipelineBase11GetCullModeEv(%"class.dawn_native::RenderPipelineBase"* %31) #7
  %34 = icmp eq i32 %32, 0
  %35 = select i1 %34, i32 2304, i32 2305
  %36 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %22, i64 1, i32 18, i32 0, i64 2, i32 6, i32 0, i64 2, i32 0, i32 2
  %37 = bitcast i32* %36 to void (i32)**
  %38 = load void (i32)*, void (i32)** %37, align 8
  tail call void %38(i32 %35) #7
  %39 = icmp eq i32 %33, 0
  br i1 %39, label %40, label %44

40:                                               ; preds = %2
  %41 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %22, i64 1, i32 18, i32 0, i64 1, i32 6, i32 0, i64 2, i32 1
  %42 = bitcast i32* %41 to void (i32)**
  %43 = load void (i32)*, void (i32)** %42, align 8
  tail call void %43(i32 2884) #7
  br label %53

44:                                               ; preds = %2
  %45 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %22, i64 1, i32 18, i32 0, i64 2, i32 6, i32 0, i64 0, i32 0, i32 2
  %46 = bitcast i32* %45 to void (i32)**
  %47 = load void (i32)*, void (i32)** %46, align 8
  tail call void %47(i32 2884) #7
  %48 = icmp eq i32 %33, 1
  %49 = select i1 %48, i32 1028, i32 1029
  %50 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %22, i64 1, i32 18, i32 0, i64 0, i32 6, i32 0, i64 2, i32 0, i32 2
  %51 = bitcast i32* %50 to void (i32)**
  %52 = load void (i32)*, void (i32)** %51, align 8
  tail call void %52(i32 %49) #7
  br label %53

53:                                               ; preds = %40, %44
  %54 = tail call %"struct.dawn_native::DepthStencilState"* @_ZNK11dawn_native18RenderPipelineBase20GetDepthStencilStateEv(%"class.dawn_native::RenderPipelineBase"* %31) #7
  %55 = getelementptr inbounds %"struct.dawn_native::DepthStencilState", %"struct.dawn_native::DepthStencilState"* %54, i64 0, i32 3
  %56 = load i32, i32* %55, align 8
  %57 = icmp eq i32 %56, 8
  br i1 %57, label %58, label %66

58:                                               ; preds = %53
  %59 = getelementptr inbounds %"struct.dawn_native::DepthStencilState", %"struct.dawn_native::DepthStencilState"* %54, i64 0, i32 2
  %60 = load i8, i8* %59, align 4, !range !14
  %61 = icmp eq i8 %60, 0
  br i1 %61, label %62, label %66

62:                                               ; preds = %58
  %63 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %22, i64 1, i32 18, i32 0, i64 1, i32 6, i32 0, i64 2, i32 1
  %64 = bitcast i32* %63 to void (i32)**
  %65 = load void (i32)*, void (i32)** %64, align 8
  tail call void %65(i32 2929) #7
  br label %70

66:                                               ; preds = %58, %53
  %67 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %22, i64 1, i32 18, i32 0, i64 2, i32 6, i32 0, i64 0, i32 0, i32 2
  %68 = bitcast i32* %67 to void (i32)**
  %69 = load void (i32)*, void (i32)** %68, align 8
  tail call void %69(i32 2929) #7
  br label %70

70:                                               ; preds = %66, %62
  %71 = getelementptr inbounds %"struct.dawn_native::DepthStencilState", %"struct.dawn_native::DepthStencilState"* %54, i64 0, i32 2
  %72 = load i8, i8* %71, align 4, !range !14
  %73 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %22, i64 1, i32 18, i32 0, i64 1, i32 6, i32 0, i64 1, i32 1
  %74 = bitcast i32* %73 to void (i8)**
  %75 = load void (i8)*, void (i8)** %74, align 8
  tail call void %75(i8 zeroext %72) #7
  %76 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %22, i64 1, i32 18, i32 0, i64 1, i32 6, i32 0, i64 1, i32 0, i32 1
  %77 = bitcast i32* %76 to void (i32)**
  %78 = load void (i32)*, void (i32)** %77, align 8
  %79 = load i32, i32* %55, align 8
  %80 = tail call i32 @_ZN11dawn_native6opengl23ToOpenGLCompareFunctionEN4wgpu15CompareFunctionE(i32 %79) #7
  tail call void %78(i32 %80) #7
  %81 = tail call zeroext i1 @_ZN11dawn_native18StencilTestEnabledEPKNS_17DepthStencilStateE(%"struct.dawn_native::DepthStencilState"* %54) #7
  br i1 %81, label %82, label %86

82:                                               ; preds = %70
  %83 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %22, i64 1, i32 18, i32 0, i64 2, i32 6, i32 0, i64 0, i32 0, i32 2
  %84 = bitcast i32* %83 to void (i32)**
  %85 = load void (i32)*, void (i32)** %84, align 8
  tail call void %85(i32 2960) #7
  br label %90

86:                                               ; preds = %70
  %87 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %22, i64 1, i32 18, i32 0, i64 1, i32 6, i32 0, i64 2, i32 1
  %88 = bitcast i32* %87 to void (i32)**
  %89 = load void (i32)*, void (i32)** %88, align 8
  tail call void %89(i32 2960) #7
  br label %90

90:                                               ; preds = %86, %82
  %91 = getelementptr inbounds %"struct.dawn_native::DepthStencilState", %"struct.dawn_native::DepthStencilState"* %54, i64 0, i32 5, i32 0
  %92 = load i32, i32* %91, align 4
  %93 = tail call i32 @_ZN11dawn_native6opengl23ToOpenGLCompareFunctionEN4wgpu15CompareFunctionE(i32 %92) #7
  %94 = getelementptr inbounds %"struct.dawn_native::DepthStencilState", %"struct.dawn_native::DepthStencilState"* %54, i64 0, i32 4, i32 0
  %95 = load i32, i32* %94, align 4
  %96 = tail call i32 @_ZN11dawn_native6opengl23ToOpenGLCompareFunctionEN4wgpu15CompareFunctionE(i32 %95) #7
  %97 = getelementptr inbounds %"struct.dawn_native::DepthStencilState", %"struct.dawn_native::DepthStencilState"* %54, i64 0, i32 6
  %98 = load i32, i32* %97, align 4
  tail call void @_ZN11dawn_native6opengl23PersistentPipelineState22SetStencilFuncsAndMaskERKNS0_15OpenGLFunctionsEjjj(%"class.dawn_native::opengl::PersistentPipelineState"* %1, %"struct.dawn_native::opengl::OpenGLFunctions"* dereferenceable(5664) %24, i32 %93, i32 %96, i32 %98) #7
  %99 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %22, i64 1, i32 18, i32 0, i64 8, i32 6
  %100 = bitcast %"struct.std::__1::array.30"* %99 to void (i32, i32, i32, i32)**
  %101 = load void (i32, i32, i32, i32)*, void (i32, i32, i32, i32)** %100, align 8
  %102 = getelementptr inbounds %"struct.dawn_native::DepthStencilState", %"struct.dawn_native::DepthStencilState"* %54, i64 0, i32 5, i32 1
  %103 = load i32, i32* %102, align 4
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds [8 x i32], [8 x i32]* @switch.table._ZN11dawn_native6opengl14RenderPipeline8ApplyNowERNS0_23PersistentPipelineStateE.15, i64 0, i64 %104
  %106 = load i32, i32* %105, align 4
  %107 = getelementptr inbounds %"struct.dawn_native::DepthStencilState", %"struct.dawn_native::DepthStencilState"* %54, i64 0, i32 5, i32 2
  %108 = load i32, i32* %107, align 4
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds [8 x i32], [8 x i32]* @switch.table._ZN11dawn_native6opengl14RenderPipeline8ApplyNowERNS0_23PersistentPipelineStateE.15, i64 0, i64 %109
  %111 = load i32, i32* %110, align 4
  %112 = getelementptr inbounds %"struct.dawn_native::DepthStencilState", %"struct.dawn_native::DepthStencilState"* %54, i64 0, i32 5, i32 3
  %113 = load i32, i32* %112, align 4
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds [8 x i32], [8 x i32]* @switch.table._ZN11dawn_native6opengl14RenderPipeline8ApplyNowERNS0_23PersistentPipelineStateE.15, i64 0, i64 %114
  %116 = load i32, i32* %115, align 4
  tail call void %101(i32 1029, i32 %106, i32 %111, i32 %116) #7
  %117 = load void (i32, i32, i32, i32)*, void (i32, i32, i32, i32)** %100, align 8
  %118 = getelementptr inbounds %"struct.dawn_native::DepthStencilState", %"struct.dawn_native::DepthStencilState"* %54, i64 0, i32 4, i32 1
  %119 = load i32, i32* %118, align 4
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds [8 x i32], [8 x i32]* @switch.table._ZN11dawn_native6opengl14RenderPipeline8ApplyNowERNS0_23PersistentPipelineStateE.15, i64 0, i64 %120
  %122 = load i32, i32* %121, align 4
  %123 = getelementptr inbounds %"struct.dawn_native::DepthStencilState", %"struct.dawn_native::DepthStencilState"* %54, i64 0, i32 4, i32 2
  %124 = load i32, i32* %123, align 4
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds [8 x i32], [8 x i32]* @switch.table._ZN11dawn_native6opengl14RenderPipeline8ApplyNowERNS0_23PersistentPipelineStateE.15, i64 0, i64 %125
  %127 = load i32, i32* %126, align 4
  %128 = getelementptr inbounds %"struct.dawn_native::DepthStencilState", %"struct.dawn_native::DepthStencilState"* %54, i64 0, i32 4, i32 3
  %129 = load i32, i32* %128, align 4
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds [8 x i32], [8 x i32]* @switch.table._ZN11dawn_native6opengl14RenderPipeline8ApplyNowERNS0_23PersistentPipelineStateE.15, i64 0, i64 %130
  %132 = load i32, i32* %131, align 4
  tail call void %117(i32 1028, i32 %122, i32 %127, i32 %132) #7
  %133 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %22, i64 1, i32 18, i32 0, i64 7, i32 6, i32 0, i64 2, i32 1
  %134 = bitcast i32* %133 to void (i32)**
  %135 = load void (i32)*, void (i32)** %134, align 8
  %136 = getelementptr inbounds %"struct.dawn_native::DepthStencilState", %"struct.dawn_native::DepthStencilState"* %54, i64 0, i32 7
  %137 = load i32, i32* %136, align 8
  tail call void %135(i32 %137) #7
  %138 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %22, i64 1, i32 18, i32 0, i64 27, i32 6, i32 0, i64 0, i32 3
  %139 = bitcast i32* %138 to void (i32, i32)**
  %140 = load void (i32, i32)*, void (i32, i32)** %139, align 8
  %141 = tail call i32 @_ZNK11dawn_native18RenderPipelineBase13GetSampleMaskEv(%"class.dawn_native::RenderPipelineBase"* %31) #7
  tail call void %140(i32 0, i32 %141) #7
  %142 = tail call zeroext i1 @_ZNK11dawn_native18RenderPipelineBase24IsAlphaToCoverageEnabledEv(%"class.dawn_native::RenderPipelineBase"* %31) #7
  br i1 %142, label %143, label %147

143:                                              ; preds = %90
  %144 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %22, i64 1, i32 18, i32 0, i64 2, i32 6, i32 0, i64 0, i32 0, i32 2
  %145 = bitcast i32* %144 to void (i32)**
  %146 = load void (i32)*, void (i32)** %145, align 8
  tail call void %146(i32 32926) #7
  br label %151

147:                                              ; preds = %90
  %148 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %22, i64 1, i32 18, i32 0, i64 1, i32 6, i32 0, i64 2, i32 1
  %149 = bitcast i32* %148 to void (i32)**
  %150 = load void (i32)*, void (i32)** %149, align 8
  tail call void %150(i32 32926) #7
  br label %151

151:                                              ; preds = %147, %143
  %152 = tail call zeroext i1 @_ZNK11dawn_native18RenderPipelineBase18IsDepthBiasEnabledEv(%"class.dawn_native::RenderPipelineBase"* %31) #7
  br i1 %152, label %153, label %170

153:                                              ; preds = %151
  %154 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %22, i64 1, i32 18, i32 0, i64 2, i32 6, i32 0, i64 0, i32 0, i32 2
  %155 = bitcast i32* %154 to void (i32)**
  %156 = load void (i32)*, void (i32)** %155, align 8
  tail call void %156(i32 32823) #7
  %157 = tail call i32 @_ZNK11dawn_native18RenderPipelineBase12GetDepthBiasEv(%"class.dawn_native::RenderPipelineBase"* %31) #7
  %158 = sitofp i32 %157 to float
  %159 = tail call float @_ZNK11dawn_native18RenderPipelineBase22GetDepthBiasSlopeScaleEv(%"class.dawn_native::RenderPipelineBase"* %31) #7
  %160 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %22, i64 2, i32 18, i32 0, i64 7, i32 6, i32 0, i64 1, i32 1
  %161 = bitcast i32* %160 to void (float, float, float)**
  %162 = load void (float, float, float)*, void (float, float, float)** %161, align 8
  %163 = icmp eq void (float, float, float)* %162, null
  br i1 %163, label %166, label %164

164:                                              ; preds = %153
  %165 = tail call float @_ZNK11dawn_native18RenderPipelineBase17GetDepthBiasClampEv(%"class.dawn_native::RenderPipelineBase"* %31) #7
  tail call void %162(float %159, float %158, float %165) #7
  br label %174

166:                                              ; preds = %153
  %167 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %22, i64 1, i32 18, i32 0, i64 6, i32 6, i32 0, i64 2, i32 2
  %168 = bitcast i8* %167 to void (float, float)**
  %169 = load void (float, float)*, void (float, float)** %168, align 8
  tail call void %169(float %159, float %158) #7
  br label %174

170:                                              ; preds = %151
  %171 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %22, i64 1, i32 18, i32 0, i64 1, i32 6, i32 0, i64 2, i32 1
  %172 = bitcast i32* %171 to void (i32)**
  %173 = load void (i32)*, void (i32)** %172, align 8
  tail call void %173(i32 32823) #7
  br label %174

174:                                              ; preds = %164, %166, %170
  %175 = tail call %"class.dawn_native::DeviceBase"* @_ZNK11dawn_native10ObjectBase9GetDeviceEv(%"class.dawn_native::ObjectBase"* %21) #7
  %176 = tail call zeroext i1 @_ZNK11dawn_native10DeviceBase15IsToggleEnabledENS_6ToggleE(%"class.dawn_native::DeviceBase"* %175, i32 15) #7
  %177 = tail call i64 @_ZNK11dawn_native18RenderPipelineBase23GetColorAttachmentsMaskEv(%"class.dawn_native::RenderPipelineBase"* %31) #7
  br i1 %176, label %346, label %178

178:                                              ; preds = %174
  %179 = bitcast %"class.BitSetIterator<4, unsigned char>::Iterator"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %179) #7
  %180 = getelementptr inbounds %"class.BitSetIterator<4, unsigned char>::Iterator", %"class.BitSetIterator<4, unsigned char>::Iterator"* %19, i64 0, i32 0, i32 0, i32 0
  %181 = getelementptr inbounds %"class.BitSetIterator<4, unsigned char>::Iterator", %"class.BitSetIterator<4, unsigned char>::Iterator"* %19, i64 0, i32 1
  %182 = getelementptr inbounds %"class.BitSetIterator<4, unsigned char>::Iterator", %"class.BitSetIterator<4, unsigned char>::Iterator"* %19, i64 0, i32 2
  store i64 %177, i64* %180, align 8, !alias.scope !15
  %183 = bitcast i64* %181 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %183, i8 0, i64 16, i1 false) #7, !alias.scope !15
  %184 = and i64 %177, 15
  %185 = icmp eq i64 %184, 0
  br i1 %185, label %219, label %186

186:                                              ; preds = %178
  %187 = ptrtoint %"class.BitSetIterator<4, unsigned char>::Iterator"* %19 to i64
  %188 = bitcast %"class.std::__1::__bit_iterator.208"* %14 to i8*
  %189 = bitcast %"class.std::__1::__bit_iterator.208"* %11 to i8*
  %190 = bitcast %"class.std::__1::__bit_iterator.208"* %12 to i8*
  %191 = bitcast %"class.std::__1::__bit_iterator.208"* %13 to i8*
  %192 = bitcast %"class.std::__1::__bit_iterator.208"* %11 to i64*
  %193 = getelementptr inbounds %"class.std::__1::__bit_iterator.208", %"class.std::__1::__bit_iterator.208"* %11, i64 0, i32 1
  %194 = bitcast %"class.std::__1::__bit_iterator.208"* %12 to i64*
  %195 = getelementptr inbounds %"class.std::__1::__bit_iterator.208", %"class.std::__1::__bit_iterator.208"* %12, i64 0, i32 1
  %196 = bitcast %"class.std::__1::__bit_iterator.208"* %13 to i64*
  %197 = getelementptr inbounds %"class.std::__1::__bit_iterator.208", %"class.std::__1::__bit_iterator.208"* %13, i64 0, i32 1
  br label %198

198:                                              ; preds = %210, %186
  %199 = phi i64 [ %177, %186 ], [ %212, %210 ]
  %200 = load i64, i64* getelementptr inbounds ({ i64 }, { i64 }* @_ZZN14BitSetIteratorILm4EhE8Iterator10getNextBitEvE8wordMask, i64 0, i32 0), align 8
  %201 = and i64 %200, %199
  %202 = and i64 %201, 4294967295
  %203 = icmp eq i64 %202, 0
  br i1 %203, label %210, label %204

204:                                              ; preds = %198
  %205 = trunc i64 %201 to i32
  %206 = call i32 @_Z11ScanForwardj(i32 %205) #7
  %207 = zext i32 %206 to i64
  %208 = load i64, i64* %182, align 8, !alias.scope !15
  %209 = add i64 %208, %207
  br label %216

210:                                              ; preds = %198
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %188) #7, !noalias !15
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %189) #7, !noalias !15
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %190) #7, !noalias !15
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %191) #7, !noalias !15
  store i64 %187, i64* %192, align 8, !noalias !18
  store i32 4, i32* %193, align 8, !noalias !18
  store i64 %187, i64* %194, align 8, !noalias !18
  store i32 4, i32* %195, align 8, !noalias !18
  store i64 %187, i64* %196, align 8, !noalias !18
  store i32 0, i32* %197, align 8, !noalias !18
  call void @_ZNSt3__116__copy_unalignedINS_8__bitsetILm1ELm4EEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS3_IS4_XT0_EXLi0EEEES6_S5_(%"class.std::__1::__bit_iterator.208"* nonnull sret %14, %"class.std::__1::__bit_iterator.208"* nonnull %11, %"class.std::__1::__bit_iterator.208"* nonnull %12, %"class.std::__1::__bit_iterator.208"* nonnull %13) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %189) #7, !noalias !15
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %190) #7, !noalias !15
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %191) #7, !noalias !15
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %188) #7, !noalias !15
  %211 = load i64, i64* %180, align 8, !alias.scope !15
  %212 = and i64 %211, -16
  store i64 %212, i64* %180, align 8, !alias.scope !15
  %213 = load i64, i64* %182, align 8, !alias.scope !15
  %214 = add i64 %213, 32
  store i64 %214, i64* %182, align 8, !alias.scope !15
  %215 = icmp ult i64 %214, 4
  br i1 %215, label %198, label %216

216:                                              ; preds = %210, %204
  %217 = phi i64 [ %208, %204 ], [ %214, %210 ]
  %218 = phi i64 [ %209, %204 ], [ 0, %210 ]
  store i64 %218, i64* %181, align 8, !alias.scope !15
  br label %221

219:                                              ; preds = %178
  store i64 32, i64* %182, align 8, !alias.scope !15
  %220 = ptrtoint %"class.BitSetIterator<4, unsigned char>::Iterator"* %19 to i64
  br label %221

221:                                              ; preds = %216, %219
  %222 = phi i64 [ %187, %216 ], [ %220, %219 ]
  %223 = phi i64 [ %218, %216 ], [ 0, %219 ]
  %224 = phi i64 [ %217, %216 ], [ 32, %219 ]
  %225 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %22, i64 1, i32 18, i32 0, i64 29, i32 6, i32 0, i64 0, i32 3
  %226 = bitcast i32* %225 to void (i32, i32)**
  %227 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %22, i64 1, i32 18, i32 0, i64 29, i32 6, i32 0, i64 1, i32 3
  %228 = bitcast i32* %227 to void (i32, i32, i32)**
  %229 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %22, i64 1, i32 18, i32 0, i64 29, i32 6, i32 0, i64 2, i32 1
  %230 = bitcast i32* %229 to void (i32, i32, i32, i32, i32)**
  %231 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %22, i64 1, i32 18, i32 0, i64 29, i32 6, i32 0, i64 1, i32 0, i32 1
  %232 = bitcast i32* %231 to void (i32, i32)**
  %233 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %22, i64 1, i32 18, i32 0, i64 29, i32 6, i32 0, i64 2, i32 3
  %234 = bitcast i32* %233 to void (i32, i8, i8, i8, i8)**
  %235 = bitcast %"class.std::__1::__bit_iterator.208"* %10 to i8*
  %236 = bitcast %"class.std::__1::__bit_iterator.208"* %7 to i8*
  %237 = bitcast %"class.std::__1::__bit_iterator.208"* %8 to i8*
  %238 = bitcast %"class.std::__1::__bit_iterator.208"* %9 to i8*
  %239 = bitcast %"class.std::__1::__bit_iterator.208"* %7 to i64*
  %240 = getelementptr inbounds %"class.std::__1::__bit_iterator.208", %"class.std::__1::__bit_iterator.208"* %7, i64 0, i32 1
  %241 = bitcast %"class.std::__1::__bit_iterator.208"* %8 to i64*
  %242 = getelementptr inbounds %"class.std::__1::__bit_iterator.208", %"class.std::__1::__bit_iterator.208"* %8, i64 0, i32 1
  %243 = bitcast %"class.std::__1::__bit_iterator.208"* %9 to i64*
  %244 = getelementptr inbounds %"class.std::__1::__bit_iterator.208", %"class.std::__1::__bit_iterator.208"* %9, i64 0, i32 1
  br label %245

245:                                              ; preds = %343, %221
  %246 = phi i64 [ %345, %343 ], [ %223, %221 ]
  %247 = phi i64 [ %344, %343 ], [ %224, %221 ]
  %248 = icmp eq i64 %247, 32
  br i1 %248, label %249, label %253

249:                                              ; preds = %245
  %250 = load i64, i64* %180, align 8
  %251 = and i64 %250, 15
  %252 = icmp eq i64 %251, 0
  br i1 %252, label %517, label %253

253:                                              ; preds = %249, %245
  %254 = trunc i64 %246 to i8
  %255 = call %"struct.dawn_native::ColorTargetState"* @_ZNK11dawn_native18RenderPipelineBase19GetColorTargetStateEh(%"class.dawn_native::RenderPipelineBase"* %31, i8 zeroext %254) #7
  %256 = trunc i64 %246 to i32
  %257 = and i32 %256, 255
  %258 = getelementptr inbounds %"struct.dawn_native::ColorTargetState", %"struct.dawn_native::ColorTargetState"* %255, i64 0, i32 3
  %259 = load %"struct.dawn_native::BlendState"*, %"struct.dawn_native::BlendState"** %258, align 8
  %260 = icmp eq %"struct.dawn_native::BlendState"* %259, null
  br i1 %260, label %297, label %261

261:                                              ; preds = %253
  %262 = load void (i32, i32)*, void (i32, i32)** %226, align 8
  call void %262(i32 3042, i32 %257) #7
  %263 = load void (i32, i32, i32)*, void (i32, i32, i32)** %228, align 8
  %264 = load %"struct.dawn_native::BlendState"*, %"struct.dawn_native::BlendState"** %258, align 8
  %265 = getelementptr inbounds %"struct.dawn_native::BlendState", %"struct.dawn_native::BlendState"* %264, i64 0, i32 0, i32 0
  %266 = load i32, i32* %265, align 4
  %267 = sext i32 %266 to i64
  %268 = getelementptr inbounds [5 x i32], [5 x i32]* @switch.table._ZN11dawn_native6opengl14RenderPipeline8ApplyNowERNS0_23PersistentPipelineStateE.13, i64 0, i64 %267
  %269 = load i32, i32* %268, align 4
  %270 = getelementptr inbounds %"struct.dawn_native::BlendState", %"struct.dawn_native::BlendState"* %264, i64 0, i32 1, i32 0
  %271 = load i32, i32* %270, align 4
  %272 = sext i32 %271 to i64
  %273 = getelementptr inbounds [5 x i32], [5 x i32]* @switch.table._ZN11dawn_native6opengl14RenderPipeline8ApplyNowERNS0_23PersistentPipelineStateE.13, i64 0, i64 %272
  %274 = load i32, i32* %273, align 4
  call void %263(i32 %257, i32 %269, i32 %274) #7
  %275 = load void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)** %230, align 8
  %276 = load %"struct.dawn_native::BlendState"*, %"struct.dawn_native::BlendState"** %258, align 8
  %277 = getelementptr inbounds %"struct.dawn_native::BlendState", %"struct.dawn_native::BlendState"* %276, i64 0, i32 0, i32 1
  %278 = load i32, i32* %277, align 4
  %279 = sext i32 %278 to i64
  %280 = getelementptr inbounds [13 x i32], [13 x i32]* @switch.table._ZN11dawn_native6opengl14RenderPipeline8ApplyNowERNS0_23PersistentPipelineStateE.17, i64 0, i64 %279
  %281 = load i32, i32* %280, align 4
  %282 = getelementptr inbounds %"struct.dawn_native::BlendState", %"struct.dawn_native::BlendState"* %276, i64 0, i32 0, i32 2
  %283 = load i32, i32* %282, align 4
  %284 = sext i32 %283 to i64
  %285 = getelementptr inbounds [13 x i32], [13 x i32]* @switch.table._ZN11dawn_native6opengl14RenderPipeline8ApplyNowERNS0_23PersistentPipelineStateE.17, i64 0, i64 %284
  %286 = load i32, i32* %285, align 4
  %287 = getelementptr inbounds %"struct.dawn_native::BlendState", %"struct.dawn_native::BlendState"* %276, i64 0, i32 1, i32 1
  %288 = load i32, i32* %287, align 4
  %289 = sext i32 %288 to i64
  %290 = getelementptr inbounds [13 x i32], [13 x i32]* @switch.table._ZN11dawn_native6opengl14RenderPipeline8ApplyNowERNS0_23PersistentPipelineStateE.14, i64 0, i64 %289
  %291 = load i32, i32* %290, align 4
  %292 = getelementptr inbounds %"struct.dawn_native::BlendState", %"struct.dawn_native::BlendState"* %276, i64 0, i32 1, i32 2
  %293 = load i32, i32* %292, align 4
  %294 = sext i32 %293 to i64
  %295 = getelementptr inbounds [13 x i32], [13 x i32]* @switch.table._ZN11dawn_native6opengl14RenderPipeline8ApplyNowERNS0_23PersistentPipelineStateE.14, i64 0, i64 %294
  %296 = load i32, i32* %295, align 4
  call void %275(i32 %257, i32 %281, i32 %286, i32 %291, i32 %296) #7
  br label %299

297:                                              ; preds = %253
  %298 = load void (i32, i32)*, void (i32, i32)** %232, align 8
  call void %298(i32 3042, i32 %257) #7
  br label %299

299:                                              ; preds = %261, %297
  %300 = load void (i32, i8, i8, i8, i8)*, void (i32, i8, i8, i8, i8)** %234, align 8
  %301 = getelementptr inbounds %"struct.dawn_native::ColorTargetState", %"struct.dawn_native::ColorTargetState"* %255, i64 0, i32 4
  %302 = load i32, i32* %301, align 8
  %303 = trunc i32 %302 to i8
  %304 = and i8 %303, 1
  %305 = lshr i32 %302, 1
  %306 = trunc i32 %305 to i8
  %307 = and i8 %306, 1
  %308 = lshr i32 %302, 2
  %309 = trunc i32 %308 to i8
  %310 = and i8 %309, 1
  %311 = lshr i32 %302, 3
  %312 = trunc i32 %311 to i8
  %313 = and i8 %312, 1
  call void %300(i32 %257, i8 zeroext %304, i8 zeroext %307, i8 zeroext %310, i8 zeroext %313) #7
  %314 = load i64, i64* %181, align 8
  %315 = load i64, i64* %182, align 8
  %316 = sub i64 %314, %315
  %317 = icmp ugt i64 %316, 3
  br i1 %317, label %318, label %319

318:                                              ; preds = %299
  call void @abort() #8
  unreachable

319:                                              ; preds = %299
  %320 = shl i64 1, %316
  %321 = xor i64 %320, -1
  %322 = load i64, i64* %180, align 8
  %323 = and i64 %322, %321
  store i64 %323, i64* %180, align 8
  %324 = icmp ult i64 %315, 4
  br i1 %324, label %325, label %343

325:                                              ; preds = %319, %337
  %326 = phi i64 [ %339, %337 ], [ %323, %319 ]
  %327 = load i64, i64* getelementptr inbounds ({ i64 }, { i64 }* @_ZZN14BitSetIteratorILm4EhE8Iterator10getNextBitEvE8wordMask, i64 0, i32 0), align 8
  %328 = and i64 %327, %326
  %329 = and i64 %328, 4294967295
  %330 = icmp eq i64 %329, 0
  br i1 %330, label %337, label %331

331:                                              ; preds = %325
  %332 = trunc i64 %328 to i32
  %333 = call i32 @_Z11ScanForwardj(i32 %332) #7
  %334 = zext i32 %333 to i64
  %335 = load i64, i64* %182, align 8
  %336 = add i64 %335, %334
  br label %343

337:                                              ; preds = %325
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %235) #7
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %236) #7
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %237) #7
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %238) #7
  store i64 %222, i64* %239, align 8, !noalias !21
  store i32 4, i32* %240, align 8, !noalias !21
  store i64 %222, i64* %241, align 8, !noalias !21
  store i32 4, i32* %242, align 8, !noalias !21
  store i64 %222, i64* %243, align 8, !noalias !21
  store i32 0, i32* %244, align 8, !noalias !21
  call void @_ZNSt3__116__copy_unalignedINS_8__bitsetILm1ELm4EEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS3_IS4_XT0_EXLi0EEEES6_S5_(%"class.std::__1::__bit_iterator.208"* nonnull sret %10, %"class.std::__1::__bit_iterator.208"* nonnull %7, %"class.std::__1::__bit_iterator.208"* nonnull %8, %"class.std::__1::__bit_iterator.208"* nonnull %9) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %236) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %237) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %238) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %235) #7
  %338 = load i64, i64* %180, align 8
  %339 = and i64 %338, -16
  store i64 %339, i64* %180, align 8
  %340 = load i64, i64* %182, align 8
  %341 = add i64 %340, 32
  store i64 %341, i64* %182, align 8
  %342 = icmp ult i64 %341, 4
  br i1 %342, label %325, label %343

343:                                              ; preds = %337, %319, %331
  %344 = phi i64 [ %335, %331 ], [ %315, %319 ], [ %341, %337 ]
  %345 = phi i64 [ %336, %331 ], [ 0, %319 ], [ 0, %337 ]
  store i64 %345, i64* %181, align 8
  br label %245

346:                                              ; preds = %174
  %347 = bitcast %"class.BitSetIterator<4, unsigned char>::Iterator"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %347) #7
  %348 = getelementptr inbounds %"class.BitSetIterator<4, unsigned char>::Iterator", %"class.BitSetIterator<4, unsigned char>::Iterator"* %20, i64 0, i32 0, i32 0, i32 0
  %349 = getelementptr inbounds %"class.BitSetIterator<4, unsigned char>::Iterator", %"class.BitSetIterator<4, unsigned char>::Iterator"* %20, i64 0, i32 1
  %350 = getelementptr inbounds %"class.BitSetIterator<4, unsigned char>::Iterator", %"class.BitSetIterator<4, unsigned char>::Iterator"* %20, i64 0, i32 2
  store i64 %177, i64* %348, align 8, !alias.scope !24
  %351 = bitcast i64* %349 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %351, i8 0, i64 16, i1 false) #7, !alias.scope !24
  %352 = and i64 %177, 15
  %353 = icmp eq i64 %352, 0
  br i1 %353, label %387, label %354

354:                                              ; preds = %346
  %355 = ptrtoint %"class.BitSetIterator<4, unsigned char>::Iterator"* %20 to i64
  %356 = bitcast %"class.std::__1::__bit_iterator.208"* %6 to i8*
  %357 = bitcast %"class.std::__1::__bit_iterator.208"* %3 to i8*
  %358 = bitcast %"class.std::__1::__bit_iterator.208"* %4 to i8*
  %359 = bitcast %"class.std::__1::__bit_iterator.208"* %5 to i8*
  %360 = bitcast %"class.std::__1::__bit_iterator.208"* %3 to i64*
  %361 = getelementptr inbounds %"class.std::__1::__bit_iterator.208", %"class.std::__1::__bit_iterator.208"* %3, i64 0, i32 1
  %362 = bitcast %"class.std::__1::__bit_iterator.208"* %4 to i64*
  %363 = getelementptr inbounds %"class.std::__1::__bit_iterator.208", %"class.std::__1::__bit_iterator.208"* %4, i64 0, i32 1
  %364 = bitcast %"class.std::__1::__bit_iterator.208"* %5 to i64*
  %365 = getelementptr inbounds %"class.std::__1::__bit_iterator.208", %"class.std::__1::__bit_iterator.208"* %5, i64 0, i32 1
  br label %366

366:                                              ; preds = %378, %354
  %367 = phi i64 [ %177, %354 ], [ %380, %378 ]
  %368 = load i64, i64* getelementptr inbounds ({ i64 }, { i64 }* @_ZZN14BitSetIteratorILm4EhE8Iterator10getNextBitEvE8wordMask, i64 0, i32 0), align 8
  %369 = and i64 %368, %367
  %370 = and i64 %369, 4294967295
  %371 = icmp eq i64 %370, 0
  br i1 %371, label %378, label %372

372:                                              ; preds = %366
  %373 = trunc i64 %369 to i32
  %374 = call i32 @_Z11ScanForwardj(i32 %373) #7
  %375 = zext i32 %374 to i64
  %376 = load i64, i64* %350, align 8, !alias.scope !24
  %377 = add i64 %376, %375
  br label %384

378:                                              ; preds = %366
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %356) #7, !noalias !24
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %357) #7, !noalias !24
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %358) #7, !noalias !24
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %359) #7, !noalias !24
  store i64 %355, i64* %360, align 8, !noalias !27
  store i32 4, i32* %361, align 8, !noalias !27
  store i64 %355, i64* %362, align 8, !noalias !27
  store i32 4, i32* %363, align 8, !noalias !27
  store i64 %355, i64* %364, align 8, !noalias !27
  store i32 0, i32* %365, align 8, !noalias !27
  call void @_ZNSt3__116__copy_unalignedINS_8__bitsetILm1ELm4EEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS3_IS4_XT0_EXLi0EEEES6_S5_(%"class.std::__1::__bit_iterator.208"* nonnull sret %6, %"class.std::__1::__bit_iterator.208"* nonnull %3, %"class.std::__1::__bit_iterator.208"* nonnull %4, %"class.std::__1::__bit_iterator.208"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %357) #7, !noalias !24
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %358) #7, !noalias !24
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %359) #7, !noalias !24
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %356) #7, !noalias !24
  %379 = load i64, i64* %348, align 8, !alias.scope !24
  %380 = and i64 %379, -16
  store i64 %380, i64* %348, align 8, !alias.scope !24
  %381 = load i64, i64* %350, align 8, !alias.scope !24
  %382 = add i64 %381, 32
  store i64 %382, i64* %350, align 8, !alias.scope !24
  %383 = icmp ult i64 %382, 4
  br i1 %383, label %366, label %384

384:                                              ; preds = %378, %372
  %385 = phi i64 [ %376, %372 ], [ %382, %378 ]
  %386 = phi i64 [ %377, %372 ], [ 0, %378 ]
  store i64 %386, i64* %349, align 8, !alias.scope !24
  br label %389

387:                                              ; preds = %346
  store i64 32, i64* %350, align 8, !alias.scope !24
  %388 = ptrtoint %"class.BitSetIterator<4, unsigned char>::Iterator"* %20 to i64
  br label %389

389:                                              ; preds = %384, %387
  %390 = phi i64 [ %355, %384 ], [ %388, %387 ]
  %391 = phi i64 [ %386, %384 ], [ 0, %387 ]
  %392 = phi i64 [ %385, %384 ], [ 32, %387 ]
  %393 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %22, i64 1, i32 18, i32 0, i64 2, i32 6, i32 0, i64 0, i32 0, i32 2
  %394 = bitcast i32* %393 to void (i32)**
  %395 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %22, i64 1, i32 8
  %396 = bitcast %"class.std::__1::unique_ptr"* %395 to void (i32, i32)**
  %397 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %22, i64 1, i32 10
  %398 = bitcast %"class.dawn_native::AdapterBase"** %397 to void (i32, i32, i32, i32)**
  %399 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %22, i64 1, i32 18, i32 0, i64 1, i32 6, i32 0, i64 2, i32 1
  %400 = bitcast i32* %399 to void (i32)**
  %401 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %22, i64 1, i32 18, i32 0, i64 0, i32 1
  %402 = bitcast i8* %401 to void (i8, i8, i8, i8)**
  %403 = bitcast %"class.std::__1::__bit_iterator.208"* %18 to i8*
  %404 = bitcast %"class.std::__1::__bit_iterator.208"* %15 to i8*
  %405 = bitcast %"class.std::__1::__bit_iterator.208"* %16 to i8*
  %406 = bitcast %"class.std::__1::__bit_iterator.208"* %17 to i8*
  %407 = bitcast %"class.std::__1::__bit_iterator.208"* %15 to i64*
  %408 = getelementptr inbounds %"class.std::__1::__bit_iterator.208", %"class.std::__1::__bit_iterator.208"* %15, i64 0, i32 1
  %409 = bitcast %"class.std::__1::__bit_iterator.208"* %16 to i64*
  %410 = getelementptr inbounds %"class.std::__1::__bit_iterator.208", %"class.std::__1::__bit_iterator.208"* %16, i64 0, i32 1
  %411 = bitcast %"class.std::__1::__bit_iterator.208"* %17 to i64*
  %412 = getelementptr inbounds %"class.std::__1::__bit_iterator.208", %"class.std::__1::__bit_iterator.208"* %17, i64 0, i32 1
  br label %413

413:                                              ; preds = %514, %389
  %414 = phi i64 [ %391, %389 ], [ %516, %514 ]
  %415 = phi i64 [ %392, %389 ], [ %515, %514 ]
  %416 = phi %"struct.dawn_native::ColorTargetState"* [ null, %389 ], [ %484, %514 ]
  %417 = icmp eq i64 %415, 32
  br i1 %417, label %418, label %422

418:                                              ; preds = %413
  %419 = load i64, i64* %348, align 8
  %420 = and i64 %419, 15
  %421 = icmp eq i64 %420, 0
  br i1 %421, label %517, label %422

422:                                              ; preds = %418, %413
  %423 = trunc i64 %414 to i8
  %424 = call %"struct.dawn_native::ColorTargetState"* @_ZNK11dawn_native18RenderPipelineBase19GetColorTargetStateEh(%"class.dawn_native::RenderPipelineBase"* %31, i8 zeroext %423) #7
  %425 = icmp eq %"struct.dawn_native::ColorTargetState"* %416, null
  %426 = getelementptr inbounds %"struct.dawn_native::ColorTargetState", %"struct.dawn_native::ColorTargetState"* %424, i64 0, i32 3
  br i1 %425, label %427, label %483

427:                                              ; preds = %422
  %428 = load %"struct.dawn_native::BlendState"*, %"struct.dawn_native::BlendState"** %426, align 8
  %429 = icmp eq %"struct.dawn_native::BlendState"* %428, null
  br i1 %429, label %466, label %430

430:                                              ; preds = %427
  %431 = load void (i32)*, void (i32)** %394, align 8
  call void %431(i32 3042) #7
  %432 = load void (i32, i32)*, void (i32, i32)** %396, align 8
  %433 = load %"struct.dawn_native::BlendState"*, %"struct.dawn_native::BlendState"** %426, align 8
  %434 = getelementptr inbounds %"struct.dawn_native::BlendState", %"struct.dawn_native::BlendState"* %433, i64 0, i32 0, i32 0
  %435 = load i32, i32* %434, align 4
  %436 = sext i32 %435 to i64
  %437 = getelementptr inbounds [5 x i32], [5 x i32]* @switch.table._ZN11dawn_native6opengl14RenderPipeline8ApplyNowERNS0_23PersistentPipelineStateE.13, i64 0, i64 %436
  %438 = load i32, i32* %437, align 4
  %439 = getelementptr inbounds %"struct.dawn_native::BlendState", %"struct.dawn_native::BlendState"* %433, i64 0, i32 1, i32 0
  %440 = load i32, i32* %439, align 4
  %441 = sext i32 %440 to i64
  %442 = getelementptr inbounds [5 x i32], [5 x i32]* @switch.table._ZN11dawn_native6opengl14RenderPipeline8ApplyNowERNS0_23PersistentPipelineStateE.13, i64 0, i64 %441
  %443 = load i32, i32* %442, align 4
  call void %432(i32 %438, i32 %443) #7
  %444 = load void (i32, i32, i32, i32)*, void (i32, i32, i32, i32)** %398, align 8
  %445 = load %"struct.dawn_native::BlendState"*, %"struct.dawn_native::BlendState"** %426, align 8
  %446 = getelementptr inbounds %"struct.dawn_native::BlendState", %"struct.dawn_native::BlendState"* %445, i64 0, i32 0, i32 1
  %447 = load i32, i32* %446, align 4
  %448 = sext i32 %447 to i64
  %449 = getelementptr inbounds [13 x i32], [13 x i32]* @switch.table._ZN11dawn_native6opengl14RenderPipeline8ApplyNowERNS0_23PersistentPipelineStateE.17, i64 0, i64 %448
  %450 = load i32, i32* %449, align 4
  %451 = getelementptr inbounds %"struct.dawn_native::BlendState", %"struct.dawn_native::BlendState"* %445, i64 0, i32 0, i32 2
  %452 = load i32, i32* %451, align 4
  %453 = sext i32 %452 to i64
  %454 = getelementptr inbounds [13 x i32], [13 x i32]* @switch.table._ZN11dawn_native6opengl14RenderPipeline8ApplyNowERNS0_23PersistentPipelineStateE.17, i64 0, i64 %453
  %455 = load i32, i32* %454, align 4
  %456 = getelementptr inbounds %"struct.dawn_native::BlendState", %"struct.dawn_native::BlendState"* %445, i64 0, i32 1, i32 1
  %457 = load i32, i32* %456, align 4
  %458 = sext i32 %457 to i64
  %459 = getelementptr inbounds [13 x i32], [13 x i32]* @switch.table._ZN11dawn_native6opengl14RenderPipeline8ApplyNowERNS0_23PersistentPipelineStateE.14, i64 0, i64 %458
  %460 = load i32, i32* %459, align 4
  %461 = getelementptr inbounds %"struct.dawn_native::BlendState", %"struct.dawn_native::BlendState"* %445, i64 0, i32 1, i32 2
  %462 = load i32, i32* %461, align 4
  %463 = sext i32 %462 to i64
  %464 = getelementptr inbounds [13 x i32], [13 x i32]* @switch.table._ZN11dawn_native6opengl14RenderPipeline8ApplyNowERNS0_23PersistentPipelineStateE.14, i64 0, i64 %463
  %465 = load i32, i32* %464, align 4
  call void %444(i32 %450, i32 %455, i32 %460, i32 %465) #7
  br label %468

466:                                              ; preds = %427
  %467 = load void (i32)*, void (i32)** %400, align 8
  call void %467(i32 3042) #7
  br label %468

468:                                              ; preds = %430, %466
  %469 = load void (i8, i8, i8, i8)*, void (i8, i8, i8, i8)** %402, align 8
  %470 = getelementptr inbounds %"struct.dawn_native::ColorTargetState", %"struct.dawn_native::ColorTargetState"* %424, i64 0, i32 4
  %471 = load i32, i32* %470, align 8
  %472 = trunc i32 %471 to i8
  %473 = and i8 %472, 1
  %474 = lshr i32 %471, 1
  %475 = trunc i32 %474 to i8
  %476 = and i8 %475, 1
  %477 = lshr i32 %471, 2
  %478 = trunc i32 %477 to i8
  %479 = and i8 %478, 1
  %480 = lshr i32 %471, 3
  %481 = trunc i32 %480 to i8
  %482 = and i8 %481, 1
  call void %469(i8 zeroext %473, i8 zeroext %476, i8 zeroext %479, i8 zeroext %482) #7
  br label %483

483:                                              ; preds = %422, %468
  %484 = phi %"struct.dawn_native::ColorTargetState"* [ %424, %468 ], [ %416, %422 ]
  %485 = load i64, i64* %349, align 8
  %486 = load i64, i64* %350, align 8
  %487 = sub i64 %485, %486
  %488 = icmp ugt i64 %487, 3
  br i1 %488, label %489, label %490

489:                                              ; preds = %483
  call void @abort() #8
  unreachable

490:                                              ; preds = %483
  %491 = shl i64 1, %487
  %492 = xor i64 %491, -1
  %493 = load i64, i64* %348, align 8
  %494 = and i64 %493, %492
  store i64 %494, i64* %348, align 8
  %495 = icmp ult i64 %486, 4
  br i1 %495, label %496, label %514

496:                                              ; preds = %490, %508
  %497 = phi i64 [ %510, %508 ], [ %494, %490 ]
  %498 = load i64, i64* getelementptr inbounds ({ i64 }, { i64 }* @_ZZN14BitSetIteratorILm4EhE8Iterator10getNextBitEvE8wordMask, i64 0, i32 0), align 8
  %499 = and i64 %498, %497
  %500 = and i64 %499, 4294967295
  %501 = icmp eq i64 %500, 0
  br i1 %501, label %508, label %502

502:                                              ; preds = %496
  %503 = trunc i64 %499 to i32
  %504 = call i32 @_Z11ScanForwardj(i32 %503) #7
  %505 = zext i32 %504 to i64
  %506 = load i64, i64* %350, align 8
  %507 = add i64 %506, %505
  br label %514

508:                                              ; preds = %496
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %403) #7
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %404) #7
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %405) #7
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %406) #7
  store i64 %390, i64* %407, align 8, !noalias !30
  store i32 4, i32* %408, align 8, !noalias !30
  store i64 %390, i64* %409, align 8, !noalias !30
  store i32 4, i32* %410, align 8, !noalias !30
  store i64 %390, i64* %411, align 8, !noalias !30
  store i32 0, i32* %412, align 8, !noalias !30
  call void @_ZNSt3__116__copy_unalignedINS_8__bitsetILm1ELm4EEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS3_IS4_XT0_EXLi0EEEES6_S5_(%"class.std::__1::__bit_iterator.208"* nonnull sret %18, %"class.std::__1::__bit_iterator.208"* nonnull %15, %"class.std::__1::__bit_iterator.208"* nonnull %16, %"class.std::__1::__bit_iterator.208"* nonnull %17) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %404) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %405) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %406) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %403) #7
  %509 = load i64, i64* %348, align 8
  %510 = and i64 %509, -16
  store i64 %510, i64* %348, align 8
  %511 = load i64, i64* %350, align 8
  %512 = add i64 %511, 32
  store i64 %512, i64* %350, align 8
  %513 = icmp ult i64 %512, 4
  br i1 %513, label %496, label %514

514:                                              ; preds = %508, %490, %502
  %515 = phi i64 [ %506, %502 ], [ %486, %490 ], [ %512, %508 ]
  %516 = phi i64 [ %507, %502 ], [ 0, %490 ], [ 0, %508 ]
  store i64 %516, i64* %349, align 8
  br label %413

517:                                              ; preds = %249, %418
  %518 = phi i8* [ %347, %418 ], [ %179, %249 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %518) #7
  ret void
}

declare void @_ZN11dawn_native6opengl10PipelineGL8ApplyNowERKNS0_15OpenGLFunctionsE(%"class.dawn_native::opengl::PipelineGL"*, %"struct.dawn_native::opengl::OpenGLFunctions"* dereferenceable(5664)) local_unnamed_addr #1

declare i32 @_ZNK11dawn_native18RenderPipelineBase12GetFrontFaceEv(%"class.dawn_native::RenderPipelineBase"*) local_unnamed_addr #1

declare i32 @_ZNK11dawn_native18RenderPipelineBase11GetCullModeEv(%"class.dawn_native::RenderPipelineBase"*) local_unnamed_addr #1

declare %"struct.dawn_native::DepthStencilState"* @_ZNK11dawn_native18RenderPipelineBase20GetDepthStencilStateEv(%"class.dawn_native::RenderPipelineBase"*) local_unnamed_addr #1

declare i32 @_ZNK11dawn_native18RenderPipelineBase13GetSampleMaskEv(%"class.dawn_native::RenderPipelineBase"*) local_unnamed_addr #1

declare zeroext i1 @_ZNK11dawn_native18RenderPipelineBase24IsAlphaToCoverageEnabledEv(%"class.dawn_native::RenderPipelineBase"*) local_unnamed_addr #1

declare zeroext i1 @_ZNK11dawn_native18RenderPipelineBase18IsDepthBiasEnabledEv(%"class.dawn_native::RenderPipelineBase"*) local_unnamed_addr #1

declare i32 @_ZNK11dawn_native18RenderPipelineBase12GetDepthBiasEv(%"class.dawn_native::RenderPipelineBase"*) local_unnamed_addr #1

declare float @_ZNK11dawn_native18RenderPipelineBase22GetDepthBiasSlopeScaleEv(%"class.dawn_native::RenderPipelineBase"*) local_unnamed_addr #1

declare float @_ZNK11dawn_native18RenderPipelineBase17GetDepthBiasClampEv(%"class.dawn_native::RenderPipelineBase"*) local_unnamed_addr #1

declare zeroext i1 @_ZNK11dawn_native10DeviceBase15IsToggleEnabledENS_6ToggleE(%"class.dawn_native::DeviceBase"*, i32) local_unnamed_addr #1

declare i64 @_ZNK11dawn_native18RenderPipelineBase23GetColorAttachmentsMaskEv(%"class.dawn_native::RenderPipelineBase"*) local_unnamed_addr #1

declare %"struct.dawn_native::ColorTargetState"* @_ZNK11dawn_native18RenderPipelineBase19GetColorTargetStateEh(%"class.dawn_native::RenderPipelineBase"*, i8 zeroext) local_unnamed_addr #1

declare void @_ZN10RefCounted10DeleteThisEv(%class.RefCounted*) unnamed_addr #1

declare i64 @_ZN11dawn_native18RenderPipelineBase18ComputeContentHashEv(%"class.dawn_native::RenderPipelineBase"*) unnamed_addr #1

declare i32 @_ZN11dawn_native6opengl23ToOpenGLCompareFunctionEN4wgpu15CompareFunctionE(i32) local_unnamed_addr #1

declare zeroext i1 @_ZN11dawn_native18StencilTestEnabledEPKNS_17DepthStencilStateE(%"struct.dawn_native::DepthStencilState"*) local_unnamed_addr #1

declare void @_ZN11dawn_native6opengl23PersistentPipelineState22SetStencilFuncsAndMaskERKNS0_15OpenGLFunctionsEjjj(%"class.dawn_native::opengl::PersistentPipelineState"*, %"struct.dawn_native::opengl::OpenGLFunctions"* dereferenceable(5664), i32, i32, i32) local_unnamed_addr #1

declare i32 @_Z11ScanForwardj(i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__116__copy_unalignedINS_8__bitsetILm1ELm16EEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS3_IS4_XT0_EXLi0EEEES6_S5_(%"class.std::__1::__bit_iterator"* noalias sret, %"class.std::__1::__bit_iterator"*, %"class.std::__1::__bit_iterator"*, %"class.std::__1::__bit_iterator"*) local_unnamed_addr #0 comdat {
  %5 = bitcast %"class.std::__1::__bit_iterator"* %2 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::__bit_iterator"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = shl i64 %9, 3
  %11 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %2, i64 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = zext i32 %12 to i64
  %14 = add nsw i64 %10, %13
  %15 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %1, i64 0, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = zext i32 %16 to i64
  %18 = sub i64 %14, %17
  %19 = icmp sgt i64 %18, 0
  %20 = inttoptr i64 %8 to i64*
  br i1 %19, label %21, label %185

21:                                               ; preds = %4
  %22 = icmp eq i32 %16, 0
  br i1 %22, label %93, label %23

23:                                               ; preds = %21
  %24 = sub i32 64, %16
  %25 = zext i32 %24 to i64
  %26 = icmp slt i64 %18, %25
  %27 = select i1 %26, i64 %18, i64 %25
  %28 = sub nsw i64 %18, %27
  %29 = shl i64 -1, %17
  %30 = sub nsw i64 %25, %27
  %31 = lshr i64 -1, %30
  %32 = and i64 %31, %29
  %33 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %1, i64 0, i32 0
  %34 = load i64, i64* %20, align 8
  %35 = and i64 %32, %34
  %36 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 1
  %37 = load i32, i32* %36, align 8
  %38 = sub i32 64, %37
  %39 = zext i32 %38 to i64
  %40 = icmp ugt i64 %27, %39
  %41 = select i1 %40, i64 %39, i64 %27
  %42 = zext i32 %37 to i64
  %43 = shl i64 -1, %42
  %44 = sub nsw i64 %39, %41
  %45 = lshr i64 -1, %44
  %46 = and i64 %45, %43
  %47 = xor i64 %46, -1
  %48 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 0
  %49 = load i64*, i64** %48, align 8
  %50 = load i64, i64* %49, align 8
  %51 = and i64 %50, %47
  store i64 %51, i64* %49, align 8
  %52 = load i32, i32* %36, align 8
  %53 = load i32, i32* %15, align 8
  %54 = icmp ugt i32 %52, %53
  %55 = sub i32 %53, %52
  %56 = zext i32 %55 to i64
  %57 = lshr i64 %35, %56
  %58 = sub i32 %52, %53
  %59 = zext i32 %58 to i64
  %60 = shl i64 %35, %59
  %61 = select i1 %54, i64 %60, i64 %57
  %62 = load i64*, i64** %48, align 8
  %63 = load i64, i64* %62, align 8
  %64 = or i64 %63, %61
  store i64 %64, i64* %62, align 8
  %65 = load i32, i32* %36, align 8
  %66 = zext i32 %65 to i64
  %67 = add nuw nsw i64 %41, %66
  %68 = lshr i64 %67, 6
  %69 = load i64*, i64** %48, align 8
  %70 = getelementptr inbounds i64, i64* %69, i64 %68
  store i64* %70, i64** %48, align 8
  %71 = trunc i64 %41 to i32
  %72 = add i32 %65, %71
  %73 = and i32 %72, 63
  store i32 %73, i32* %36, align 8
  %74 = sub i64 %27, %41
  %75 = icmp sgt i64 %74, 0
  br i1 %75, label %76, label %90

76:                                               ; preds = %23
  %77 = sub nsw i64 64, %74
  %78 = lshr i64 -1, %77
  %79 = xor i64 %78, -1
  %80 = load i64, i64* %70, align 8
  %81 = and i64 %80, %79
  store i64 %81, i64* %70, align 8
  %82 = load i32, i32* %15, align 8
  %83 = zext i32 %82 to i64
  %84 = add nuw nsw i64 %41, %83
  %85 = lshr i64 %35, %84
  %86 = load i64*, i64** %48, align 8
  %87 = load i64, i64* %86, align 8
  %88 = or i64 %85, %87
  store i64 %88, i64* %86, align 8
  %89 = trunc i64 %74 to i32
  store i32 %89, i32* %36, align 8
  br label %90

90:                                               ; preds = %76, %23
  %91 = load i64*, i64** %33, align 8
  %92 = getelementptr inbounds i64, i64* %91, i64 1
  store i64* %92, i64** %33, align 8
  br label %93

93:                                               ; preds = %21, %90
  %94 = phi i64* [ %20, %21 ], [ %92, %90 ]
  %95 = phi i64 [ %18, %21 ], [ %28, %90 ]
  %96 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 1
  %97 = load i32, i32* %96, align 8
  %98 = sub i32 64, %97
  %99 = zext i32 %97 to i64
  %100 = shl i64 -1, %99
  %101 = icmp sgt i64 %95, 63
  br i1 %101, label %102, label %134

102:                                              ; preds = %93
  %103 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %1, i64 0, i32 0
  %104 = xor i64 %100, -1
  %105 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 0
  %106 = zext i32 %98 to i64
  br label %107

107:                                              ; preds = %102, %107
  %108 = phi i64* [ %94, %102 ], [ %130, %107 ]
  %109 = phi i64 [ %95, %102 ], [ %128, %107 ]
  %110 = load i64, i64* %108, align 8
  %111 = load i64*, i64** %105, align 8
  %112 = load i64, i64* %111, align 8
  %113 = and i64 %112, %104
  store i64 %113, i64* %111, align 8
  %114 = load i32, i32* %96, align 8
  %115 = zext i32 %114 to i64
  %116 = shl i64 %110, %115
  %117 = load i64*, i64** %105, align 8
  %118 = load i64, i64* %117, align 8
  %119 = or i64 %118, %116
  store i64 %119, i64* %117, align 8
  %120 = load i64*, i64** %105, align 8
  %121 = getelementptr inbounds i64, i64* %120, i64 1
  store i64* %121, i64** %105, align 8
  %122 = load i64, i64* %121, align 8
  %123 = and i64 %122, %100
  store i64 %123, i64* %121, align 8
  %124 = lshr i64 %110, %106
  %125 = load i64*, i64** %105, align 8
  %126 = load i64, i64* %125, align 8
  %127 = or i64 %126, %124
  store i64 %127, i64* %125, align 8
  %128 = add nsw i64 %109, -64
  %129 = load i64*, i64** %103, align 8
  %130 = getelementptr inbounds i64, i64* %129, i64 1
  store i64* %130, i64** %103, align 8
  %131 = icmp sgt i64 %128, 63
  br i1 %131, label %107, label %132

132:                                              ; preds = %107
  %133 = and i64 %95, 63
  br label %134

134:                                              ; preds = %132, %93
  %135 = phi i64* [ %94, %93 ], [ %130, %132 ]
  %136 = phi i64 [ %95, %93 ], [ %133, %132 ]
  %137 = icmp sgt i64 %136, 0
  br i1 %137, label %138, label %185

138:                                              ; preds = %134
  %139 = sub nuw nsw i64 64, %136
  %140 = lshr i64 -1, %139
  %141 = load i64, i64* %135, align 8
  %142 = and i64 %141, %140
  %143 = zext i32 %98 to i64
  %144 = icmp sgt i64 %136, %143
  %145 = select i1 %144, i64 %143, i64 %136
  %146 = load i32, i32* %96, align 8
  %147 = zext i32 %146 to i64
  %148 = shl i64 -1, %147
  %149 = sub nsw i64 %143, %145
  %150 = lshr i64 -1, %149
  %151 = and i64 %148, %150
  %152 = xor i64 %151, -1
  %153 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 0
  %154 = load i64*, i64** %153, align 8
  %155 = load i64, i64* %154, align 8
  %156 = and i64 %155, %152
  store i64 %156, i64* %154, align 8
  %157 = load i32, i32* %96, align 8
  %158 = zext i32 %157 to i64
  %159 = shl i64 %142, %158
  %160 = load i64*, i64** %153, align 8
  %161 = load i64, i64* %160, align 8
  %162 = or i64 %161, %159
  store i64 %162, i64* %160, align 8
  %163 = load i32, i32* %96, align 8
  %164 = zext i32 %163 to i64
  %165 = add nuw nsw i64 %145, %164
  %166 = lshr i64 %165, 6
  %167 = load i64*, i64** %153, align 8
  %168 = getelementptr inbounds i64, i64* %167, i64 %166
  store i64* %168, i64** %153, align 8
  %169 = trunc i64 %145 to i32
  %170 = add i32 %163, %169
  %171 = and i32 %170, 63
  store i32 %171, i32* %96, align 8
  %172 = sub nsw i64 %136, %145
  %173 = icmp sgt i64 %172, 0
  br i1 %173, label %174, label %185

174:                                              ; preds = %138
  %175 = sub nuw nsw i64 64, %172
  %176 = lshr i64 -1, %175
  %177 = xor i64 %176, -1
  %178 = load i64, i64* %168, align 8
  %179 = and i64 %178, %177
  store i64 %179, i64* %168, align 8
  %180 = lshr i64 %142, %145
  %181 = load i64*, i64** %153, align 8
  %182 = load i64, i64* %181, align 8
  %183 = or i64 %182, %180
  store i64 %183, i64* %181, align 8
  %184 = trunc i64 %172 to i32
  store i32 %184, i32* %96, align 8
  br label %185

185:                                              ; preds = %134, %174, %138, %4
  %186 = bitcast %"class.std::__1::__bit_iterator"* %3 to i64*
  %187 = load i64, i64* %186, align 8
  %188 = bitcast %"class.std::__1::__bit_iterator"* %0 to i64*
  store i64 %187, i64* %188, align 8
  %189 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %0, i64 0, i32 1
  %190 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 1
  %191 = load i32, i32* %190, align 8
  store i32 %191, i32* %189, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__116__copy_unalignedINS_8__bitsetILm1ELm4EEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS3_IS4_XT0_EXLi0EEEES6_S5_(%"class.std::__1::__bit_iterator.208"* noalias sret, %"class.std::__1::__bit_iterator.208"*, %"class.std::__1::__bit_iterator.208"*, %"class.std::__1::__bit_iterator.208"*) local_unnamed_addr #0 comdat {
  %5 = bitcast %"class.std::__1::__bit_iterator.208"* %2 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::__bit_iterator.208"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = shl i64 %9, 3
  %11 = getelementptr inbounds %"class.std::__1::__bit_iterator.208", %"class.std::__1::__bit_iterator.208"* %2, i64 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = zext i32 %12 to i64
  %14 = add nsw i64 %10, %13
  %15 = getelementptr inbounds %"class.std::__1::__bit_iterator.208", %"class.std::__1::__bit_iterator.208"* %1, i64 0, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = zext i32 %16 to i64
  %18 = sub i64 %14, %17
  %19 = icmp sgt i64 %18, 0
  %20 = inttoptr i64 %8 to i64*
  br i1 %19, label %21, label %185

21:                                               ; preds = %4
  %22 = icmp eq i32 %16, 0
  br i1 %22, label %93, label %23

23:                                               ; preds = %21
  %24 = sub i32 64, %16
  %25 = zext i32 %24 to i64
  %26 = icmp slt i64 %18, %25
  %27 = select i1 %26, i64 %18, i64 %25
  %28 = sub nsw i64 %18, %27
  %29 = shl i64 -1, %17
  %30 = sub nsw i64 %25, %27
  %31 = lshr i64 -1, %30
  %32 = and i64 %31, %29
  %33 = getelementptr inbounds %"class.std::__1::__bit_iterator.208", %"class.std::__1::__bit_iterator.208"* %1, i64 0, i32 0
  %34 = load i64, i64* %20, align 8
  %35 = and i64 %32, %34
  %36 = getelementptr inbounds %"class.std::__1::__bit_iterator.208", %"class.std::__1::__bit_iterator.208"* %3, i64 0, i32 1
  %37 = load i32, i32* %36, align 8
  %38 = sub i32 64, %37
  %39 = zext i32 %38 to i64
  %40 = icmp ugt i64 %27, %39
  %41 = select i1 %40, i64 %39, i64 %27
  %42 = zext i32 %37 to i64
  %43 = shl i64 -1, %42
  %44 = sub nsw i64 %39, %41
  %45 = lshr i64 -1, %44
  %46 = and i64 %45, %43
  %47 = xor i64 %46, -1
  %48 = getelementptr inbounds %"class.std::__1::__bit_iterator.208", %"class.std::__1::__bit_iterator.208"* %3, i64 0, i32 0
  %49 = load i64*, i64** %48, align 8
  %50 = load i64, i64* %49, align 8
  %51 = and i64 %50, %47
  store i64 %51, i64* %49, align 8
  %52 = load i32, i32* %36, align 8
  %53 = load i32, i32* %15, align 8
  %54 = icmp ugt i32 %52, %53
  %55 = sub i32 %53, %52
  %56 = zext i32 %55 to i64
  %57 = lshr i64 %35, %56
  %58 = sub i32 %52, %53
  %59 = zext i32 %58 to i64
  %60 = shl i64 %35, %59
  %61 = select i1 %54, i64 %60, i64 %57
  %62 = load i64*, i64** %48, align 8
  %63 = load i64, i64* %62, align 8
  %64 = or i64 %63, %61
  store i64 %64, i64* %62, align 8
  %65 = load i32, i32* %36, align 8
  %66 = zext i32 %65 to i64
  %67 = add nuw nsw i64 %41, %66
  %68 = lshr i64 %67, 6
  %69 = load i64*, i64** %48, align 8
  %70 = getelementptr inbounds i64, i64* %69, i64 %68
  store i64* %70, i64** %48, align 8
  %71 = trunc i64 %41 to i32
  %72 = add i32 %65, %71
  %73 = and i32 %72, 63
  store i32 %73, i32* %36, align 8
  %74 = sub i64 %27, %41
  %75 = icmp sgt i64 %74, 0
  br i1 %75, label %76, label %90

76:                                               ; preds = %23
  %77 = sub nsw i64 64, %74
  %78 = lshr i64 -1, %77
  %79 = xor i64 %78, -1
  %80 = load i64, i64* %70, align 8
  %81 = and i64 %80, %79
  store i64 %81, i64* %70, align 8
  %82 = load i32, i32* %15, align 8
  %83 = zext i32 %82 to i64
  %84 = add nuw nsw i64 %41, %83
  %85 = lshr i64 %35, %84
  %86 = load i64*, i64** %48, align 8
  %87 = load i64, i64* %86, align 8
  %88 = or i64 %85, %87
  store i64 %88, i64* %86, align 8
  %89 = trunc i64 %74 to i32
  store i32 %89, i32* %36, align 8
  br label %90

90:                                               ; preds = %76, %23
  %91 = load i64*, i64** %33, align 8
  %92 = getelementptr inbounds i64, i64* %91, i64 1
  store i64* %92, i64** %33, align 8
  br label %93

93:                                               ; preds = %21, %90
  %94 = phi i64* [ %20, %21 ], [ %92, %90 ]
  %95 = phi i64 [ %18, %21 ], [ %28, %90 ]
  %96 = getelementptr inbounds %"class.std::__1::__bit_iterator.208", %"class.std::__1::__bit_iterator.208"* %3, i64 0, i32 1
  %97 = load i32, i32* %96, align 8
  %98 = sub i32 64, %97
  %99 = zext i32 %97 to i64
  %100 = shl i64 -1, %99
  %101 = icmp sgt i64 %95, 63
  br i1 %101, label %102, label %134

102:                                              ; preds = %93
  %103 = getelementptr inbounds %"class.std::__1::__bit_iterator.208", %"class.std::__1::__bit_iterator.208"* %1, i64 0, i32 0
  %104 = xor i64 %100, -1
  %105 = getelementptr inbounds %"class.std::__1::__bit_iterator.208", %"class.std::__1::__bit_iterator.208"* %3, i64 0, i32 0
  %106 = zext i32 %98 to i64
  br label %107

107:                                              ; preds = %102, %107
  %108 = phi i64* [ %94, %102 ], [ %130, %107 ]
  %109 = phi i64 [ %95, %102 ], [ %128, %107 ]
  %110 = load i64, i64* %108, align 8
  %111 = load i64*, i64** %105, align 8
  %112 = load i64, i64* %111, align 8
  %113 = and i64 %112, %104
  store i64 %113, i64* %111, align 8
  %114 = load i32, i32* %96, align 8
  %115 = zext i32 %114 to i64
  %116 = shl i64 %110, %115
  %117 = load i64*, i64** %105, align 8
  %118 = load i64, i64* %117, align 8
  %119 = or i64 %118, %116
  store i64 %119, i64* %117, align 8
  %120 = load i64*, i64** %105, align 8
  %121 = getelementptr inbounds i64, i64* %120, i64 1
  store i64* %121, i64** %105, align 8
  %122 = load i64, i64* %121, align 8
  %123 = and i64 %122, %100
  store i64 %123, i64* %121, align 8
  %124 = lshr i64 %110, %106
  %125 = load i64*, i64** %105, align 8
  %126 = load i64, i64* %125, align 8
  %127 = or i64 %126, %124
  store i64 %127, i64* %125, align 8
  %128 = add nsw i64 %109, -64
  %129 = load i64*, i64** %103, align 8
  %130 = getelementptr inbounds i64, i64* %129, i64 1
  store i64* %130, i64** %103, align 8
  %131 = icmp sgt i64 %128, 63
  br i1 %131, label %107, label %132

132:                                              ; preds = %107
  %133 = and i64 %95, 63
  br label %134

134:                                              ; preds = %132, %93
  %135 = phi i64* [ %94, %93 ], [ %130, %132 ]
  %136 = phi i64 [ %95, %93 ], [ %133, %132 ]
  %137 = icmp sgt i64 %136, 0
  br i1 %137, label %138, label %185

138:                                              ; preds = %134
  %139 = sub nuw nsw i64 64, %136
  %140 = lshr i64 -1, %139
  %141 = load i64, i64* %135, align 8
  %142 = and i64 %141, %140
  %143 = zext i32 %98 to i64
  %144 = icmp sgt i64 %136, %143
  %145 = select i1 %144, i64 %143, i64 %136
  %146 = load i32, i32* %96, align 8
  %147 = zext i32 %146 to i64
  %148 = shl i64 -1, %147
  %149 = sub nsw i64 %143, %145
  %150 = lshr i64 -1, %149
  %151 = and i64 %148, %150
  %152 = xor i64 %151, -1
  %153 = getelementptr inbounds %"class.std::__1::__bit_iterator.208", %"class.std::__1::__bit_iterator.208"* %3, i64 0, i32 0
  %154 = load i64*, i64** %153, align 8
  %155 = load i64, i64* %154, align 8
  %156 = and i64 %155, %152
  store i64 %156, i64* %154, align 8
  %157 = load i32, i32* %96, align 8
  %158 = zext i32 %157 to i64
  %159 = shl i64 %142, %158
  %160 = load i64*, i64** %153, align 8
  %161 = load i64, i64* %160, align 8
  %162 = or i64 %161, %159
  store i64 %162, i64* %160, align 8
  %163 = load i32, i32* %96, align 8
  %164 = zext i32 %163 to i64
  %165 = add nuw nsw i64 %145, %164
  %166 = lshr i64 %165, 6
  %167 = load i64*, i64** %153, align 8
  %168 = getelementptr inbounds i64, i64* %167, i64 %166
  store i64* %168, i64** %153, align 8
  %169 = trunc i64 %145 to i32
  %170 = add i32 %163, %169
  %171 = and i32 %170, 63
  store i32 %171, i32* %96, align 8
  %172 = sub nsw i64 %136, %145
  %173 = icmp sgt i64 %172, 0
  br i1 %173, label %174, label %185

174:                                              ; preds = %138
  %175 = sub nuw nsw i64 64, %172
  %176 = lshr i64 -1, %175
  %177 = xor i64 %176, -1
  %178 = load i64, i64* %168, align 8
  %179 = and i64 %178, %177
  store i64 %179, i64* %168, align 8
  %180 = lshr i64 %142, %145
  %181 = load i64*, i64** %153, align 8
  %182 = load i64, i64* %181, align 8
  %183 = or i64 %182, %180
  store i64 %183, i64* %181, align 8
  %184 = trunc i64 %172 to i32
  store i32 %184, i32* %96, align 8
  br label %185

185:                                              ; preds = %134, %174, %138, %4
  %186 = bitcast %"class.std::__1::__bit_iterator.208"* %3 to i64*
  %187 = load i64, i64* %186, align 8
  %188 = bitcast %"class.std::__1::__bit_iterator.208"* %0 to i64*
  store i64 %187, i64* %188, align 8
  %189 = getelementptr inbounds %"class.std::__1::__bit_iterator.208", %"class.std::__1::__bit_iterator.208"* %0, i64 0, i32 1
  %190 = getelementptr inbounds %"class.std::__1::__bit_iterator.208", %"class.std::__1::__bit_iterator.208"* %3, i64 0, i32 1
  %191 = load i32, i32* %190, align 8
  store i32 %191, i32* %189, align 8
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN4ityp13IterateBitSetERKNS_6bitsetIhLm16EEE: argument 0"}
!4 = distinct !{!4, !"_ZN4ityp13IterateBitSetERKNS_6bitsetIhLm16EEE"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZNK14BitSetIteratorILm16EhE5beginEv: argument 0"}
!7 = distinct !{!7, !"_ZNK14BitSetIteratorILm16EhE5beginEv"}
!8 = !{!9, !6}
!9 = distinct !{!9, !10, !"_ZNSt3__14copyINS_8__bitsetILm1ELm16EEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS3_IS4_XT0_EXLi0EEEES6_S5_: argument 0"}
!10 = distinct !{!10, !"_ZNSt3__14copyINS_8__bitsetILm1ELm16EEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS3_IS4_XT0_EXLi0EEEES6_S5_"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZNSt3__14copyINS_8__bitsetILm1ELm16EEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS3_IS4_XT0_EXLi0EEEES6_S5_: argument 0"}
!13 = distinct !{!13, !"_ZNSt3__14copyINS_8__bitsetILm1ELm16EEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS3_IS4_XT0_EXLi0EEEES6_S5_"}
!14 = !{i8 0, i8 2}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_ZNK14BitSetIteratorILm4EhE5beginEv: argument 0"}
!17 = distinct !{!17, !"_ZNK14BitSetIteratorILm4EhE5beginEv"}
!18 = !{!19, !16}
!19 = distinct !{!19, !20, !"_ZNSt3__14copyINS_8__bitsetILm1ELm4EEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS3_IS4_XT0_EXLi0EEEES6_S5_: argument 0"}
!20 = distinct !{!20, !"_ZNSt3__14copyINS_8__bitsetILm1ELm4EEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS3_IS4_XT0_EXLi0EEEES6_S5_"}
!21 = !{!22}
!22 = distinct !{!22, !23, !"_ZNSt3__14copyINS_8__bitsetILm1ELm4EEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS3_IS4_XT0_EXLi0EEEES6_S5_: argument 0"}
!23 = distinct !{!23, !"_ZNSt3__14copyINS_8__bitsetILm1ELm4EEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS3_IS4_XT0_EXLi0EEEES6_S5_"}
!24 = !{!25}
!25 = distinct !{!25, !26, !"_ZNK14BitSetIteratorILm4EhE5beginEv: argument 0"}
!26 = distinct !{!26, !"_ZNK14BitSetIteratorILm4EhE5beginEv"}
!27 = !{!28, !25}
!28 = distinct !{!28, !29, !"_ZNSt3__14copyINS_8__bitsetILm1ELm4EEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS3_IS4_XT0_EXLi0EEEES6_S5_: argument 0"}
!29 = distinct !{!29, !"_ZNSt3__14copyINS_8__bitsetILm1ELm4EEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS3_IS4_XT0_EXLi0EEEES6_S5_"}
!30 = !{!31}
!31 = distinct !{!31, !32, !"_ZNSt3__14copyINS_8__bitsetILm1ELm4EEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS3_IS4_XT0_EXLi0EEEES6_S5_: argument 0"}
!32 = distinct !{!32, !"_ZNSt3__14copyINS_8__bitsetILm1ELm4EEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS3_IS4_XT0_EXLi0EEEES6_S5_"}
