; ModuleID = '../../third_party/blink/renderer/platform/scheduler/common/throttling/budget_pool.cc'
source_filename = "../../third_party/blink/renderer/platform/scheduler/common/throttling/budget_pool.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.base::trace_event::TraceCategory" = type { i8, i32, i8* }
%"class.blink::scheduler::BudgetPool" = type <{ i32 (...)**, i8*, %"class.blink::scheduler::BudgetPoolController"*, %"class.WTF::HashSet", i8, [7 x i8] }>
%"class.blink::scheduler::BudgetPoolController" = type { i32 (...)** }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"class.base::sequence_manager::TaskQueue"**, i32, i32, i32, [4 x i8] }>
%"class.base::sequence_manager::TaskQueue" = type { i32 (...)**, %"class.base::RefCountedThreadSafe", %"class.base::internal::CheckedLock", %"class.std::__1::unique_ptr", %"class.base::WeakPtr", %class.scoped_refptr.8, %class.scoped_refptr.9, i32, i32, i8*, %"class.base::WeakPtrFactory" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::internal::CheckedLock" = type { %"class.base::Lock" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::sequence_manager::internal::TaskQueueImpl"* }
%"class.base::sequence_manager::internal::TaskQueueImpl" = type opaque
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.2", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.2" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.3" }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%class.scoped_refptr.8 = type { %"class.base::sequence_manager::internal::AssociatedThreadId"* }
%"class.base::sequence_manager::internal::AssociatedThreadId" = type opaque
%class.scoped_refptr.9 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.10" }>
%"class.base::RefCountedThreadSafe.10" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.11 }
%class.scoped_refptr.11 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::sequence_manager::LazyNow" = type { %"class.base::TickClock"*, %"class.absl::optional" }
%"class.base::TickClock" = type opaque
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.base::TimeTicks" }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::trace_event::TraceArguments" = type { i8, [2 x i8], [2 x i8*], [2 x %"union.base::trace_event::TraceValue"] }
%"union.base::trace_event::TraceValue" = type { i64 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.28 }
%union.anon.28 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN3WTF9HashTableIPN4base16sequence_manager9TaskQueueES4_NS_17IdentityExtractorENS_7PtrHashIS3_EENS_10HashTraitsIS4_EES9_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS7_S9_SA_EERKS4_RS4_EENS_18HashTableAddResultISB_S4_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableIPN4base16sequence_manager9TaskQueueES4_NS_17IdentityExtractorENS_7PtrHashIS3_EENS_10HashTraitsIS4_EES9_NS_18PartitionAllocatorEE6ExpandEPS4_ = comdat any

$_ZN3WTF9HashTableIPN4base16sequence_manager9TaskQueueES4_NS_17IdentityExtractorENS_7PtrHashIS3_EENS_10HashTraitsIS4_EES9_NS_18PartitionAllocatorEE8RehashToEPS4_jSC_ = comdat any

@_ZTVN5blink9scheduler10BudgetPoolE = hidden unnamed_addr constant { [12 x i8*] } { [12 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::scheduler::BudgetPool"*)* @_ZN5blink9scheduler10BudgetPoolD2Ev to i8*), i8* bitcast (void (%"class.blink::scheduler::BudgetPool"*)* @_ZN5blink9scheduler10BudgetPoolD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@_ZN4base11trace_event16CategoryRegistry11categories_E = external global [300 x %"struct.base::trace_event::TraceCategory"], align 16
@.str = private unnamed_addr constant [28 x i8] c"BudgetPool_EnableThrottling\00", align 1
@.str.1 = private unnamed_addr constant [29 x i8] c"BudgetPool_DisableThrottling\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"new_size > table_size_\00", align 1
@.str.3 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/wtf/hash_table.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN4base16sequence_manager9TaskQueueEEEPKcv = private unnamed_addr constant [83 x i8] c"const char *WTF::GetStringWithTypeName() [T = base::sequence_manager::TaskQueue *]\00", align 1

@_ZN5blink9scheduler10BudgetPoolD1Ev = hidden unnamed_addr alias void (%"class.blink::scheduler::BudgetPool"*), void (%"class.blink::scheduler::BudgetPool"*)* @_ZN5blink9scheduler10BudgetPoolD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9scheduler10BudgetPoolC2EPKcPNS0_20BudgetPoolControllerE(%"class.blink::scheduler::BudgetPool"* nocapture, i8*, %"class.blink::scheduler::BudgetPoolController"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN5blink9scheduler10BudgetPoolE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 1
  store i8* %1, i8** %5, align 8
  %6 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 2
  store %"class.blink::scheduler::BudgetPoolController"* %2, %"class.blink::scheduler::BudgetPoolController"** %6, align 8
  %7 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 3
  %8 = bitcast %"class.WTF::HashSet"* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 20, i1 false) #7
  %9 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 4
  store i8 1, i8* %9, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9scheduler10BudgetPoolD2Ev(%"class.blink::scheduler::BudgetPool"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN5blink9scheduler10BudgetPoolE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 3, i32 0, i32 0
  %4 = load %"class.base::sequence_manager::TaskQueue"**, %"class.base::sequence_manager::TaskQueue"*** %3, align 8
  %5 = icmp eq %"class.base::sequence_manager::TaskQueue"** %4, null
  br i1 %5, label %8, label %6, !prof !2

6:                                                ; preds = %1
  %7 = bitcast %"class.base::sequence_manager::TaskQueue"** %4 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %7) #7
  store %"class.base::sequence_manager::TaskQueue"** null, %"class.base::sequence_manager::TaskQueue"*** %3, align 8
  br label %8

8:                                                ; preds = %1, %6
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN5blink9scheduler10BudgetPoolD0Ev(%"class.blink::scheduler::BudgetPool"* nocapture readnone) unnamed_addr #1 align 2 {
  tail call void @llvm.trap() #8
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @_ZNK5blink9scheduler10BudgetPool4NameEv(%"class.blink::scheduler::BudgetPool"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 1
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9scheduler10BudgetPool8AddQueueEN4base9TimeTicksEPNS2_16sequence_manager9TaskQueueE(%"class.blink::scheduler::BudgetPool"*, i64, %"class.base::sequence_manager::TaskQueue"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.base::sequence_manager::TaskQueue"*, align 8
  store %"class.base::sequence_manager::TaskQueue"* %2, %"class.base::sequence_manager::TaskQueue"** %4, align 8
  %5 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 2
  %6 = load %"class.blink::scheduler::BudgetPoolController"*, %"class.blink::scheduler::BudgetPoolController"** %5, align 8
  %7 = bitcast %"class.blink::scheduler::BudgetPoolController"* %6 to void (%"class.blink::scheduler::BudgetPoolController"*, %"class.base::sequence_manager::TaskQueue"*, %"class.blink::scheduler::BudgetPool"*)***
  %8 = load void (%"class.blink::scheduler::BudgetPoolController"*, %"class.base::sequence_manager::TaskQueue"*, %"class.blink::scheduler::BudgetPool"*)**, void (%"class.blink::scheduler::BudgetPoolController"*, %"class.base::sequence_manager::TaskQueue"*, %"class.blink::scheduler::BudgetPool"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.blink::scheduler::BudgetPoolController"*, %"class.base::sequence_manager::TaskQueue"*, %"class.blink::scheduler::BudgetPool"*)*, void (%"class.blink::scheduler::BudgetPoolController"*, %"class.base::sequence_manager::TaskQueue"*, %"class.blink::scheduler::BudgetPool"*)** %8, i64 2
  %10 = load void (%"class.blink::scheduler::BudgetPoolController"*, %"class.base::sequence_manager::TaskQueue"*, %"class.blink::scheduler::BudgetPool"*)*, void (%"class.blink::scheduler::BudgetPoolController"*, %"class.base::sequence_manager::TaskQueue"*, %"class.blink::scheduler::BudgetPool"*)** %9, align 8
  tail call void %10(%"class.blink::scheduler::BudgetPoolController"* %6, %"class.base::sequence_manager::TaskQueue"* %2, %"class.blink::scheduler::BudgetPool"* %0) #7
  %11 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 3, i32 0
  %12 = call { %"class.base::sequence_manager::TaskQueue"**, i8 } @_ZN3WTF9HashTableIPN4base16sequence_manager9TaskQueueES4_NS_17IdentityExtractorENS_7PtrHashIS3_EENS_10HashTraitsIS4_EES9_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS7_S9_SA_EERKS4_RS4_EENS_18HashTableAddResultISB_S4_EEOT0_OT1_(%"class.WTF::HashTable"* %11, %"class.base::sequence_manager::TaskQueue"** nonnull dereferenceable(8) %4, %"class.base::sequence_manager::TaskQueue"** nonnull dereferenceable(8) %4) #7
  %13 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 4
  %14 = load i8, i8* %13, align 8, !range !3
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %23, label %16

16:                                               ; preds = %3
  %17 = load %"class.blink::scheduler::BudgetPoolController"*, %"class.blink::scheduler::BudgetPoolController"** %5, align 8
  %18 = load %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %4, align 8
  %19 = bitcast %"class.blink::scheduler::BudgetPoolController"* %17 to void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)***
  %20 = load void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)**, void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)*** %19, align 8
  %21 = getelementptr inbounds void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)*, void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)** %20, i64 5
  %22 = load void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)*, void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)** %21, align 8
  call void %22(%"class.blink::scheduler::BudgetPoolController"* %17, i64 %1, %"class.base::sequence_manager::TaskQueue"* %18) #7
  br label %23

23:                                               ; preds = %3, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9scheduler10BudgetPool15UnregisterQueueEPN4base16sequence_manager9TaskQueueE(%"class.blink::scheduler::BudgetPool"*, %"class.base::sequence_manager::TaskQueue"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN5blink9scheduler10BudgetPool15DissociateQueueEPN4base16sequence_manager9TaskQueueE(%"class.blink::scheduler::BudgetPool"* %0, %"class.base::sequence_manager::TaskQueue"* %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9scheduler10BudgetPool15DissociateQueueEPN4base16sequence_manager9TaskQueueE(%"class.blink::scheduler::BudgetPool"*, %"class.base::sequence_manager::TaskQueue"*) local_unnamed_addr #0 align 2 {
  %3 = ptrtoint %"class.base::sequence_manager::TaskQueue"* %1 to i64
  %4 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 2
  %5 = load %"class.blink::scheduler::BudgetPoolController"*, %"class.blink::scheduler::BudgetPoolController"** %4, align 8
  %6 = bitcast %"class.blink::scheduler::BudgetPoolController"* %5 to void (%"class.blink::scheduler::BudgetPoolController"*, %"class.base::sequence_manager::TaskQueue"*, %"class.blink::scheduler::BudgetPool"*)***
  %7 = load void (%"class.blink::scheduler::BudgetPoolController"*, %"class.base::sequence_manager::TaskQueue"*, %"class.blink::scheduler::BudgetPool"*)**, void (%"class.blink::scheduler::BudgetPoolController"*, %"class.base::sequence_manager::TaskQueue"*, %"class.blink::scheduler::BudgetPool"*)*** %6, align 8
  %8 = getelementptr inbounds void (%"class.blink::scheduler::BudgetPoolController"*, %"class.base::sequence_manager::TaskQueue"*, %"class.blink::scheduler::BudgetPool"*)*, void (%"class.blink::scheduler::BudgetPoolController"*, %"class.base::sequence_manager::TaskQueue"*, %"class.blink::scheduler::BudgetPool"*)** %7, i64 3
  %9 = load void (%"class.blink::scheduler::BudgetPoolController"*, %"class.base::sequence_manager::TaskQueue"*, %"class.blink::scheduler::BudgetPool"*)*, void (%"class.blink::scheduler::BudgetPoolController"*, %"class.base::sequence_manager::TaskQueue"*, %"class.blink::scheduler::BudgetPool"*)** %8, align 8
  tail call void %9(%"class.blink::scheduler::BudgetPoolController"* %5, %"class.base::sequence_manager::TaskQueue"* %1, %"class.blink::scheduler::BudgetPool"* %0) #7
  %10 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 3
  %11 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %10, i64 0, i32 0
  %12 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %10, i64 0, i32 0, i32 0
  %13 = load %"class.base::sequence_manager::TaskQueue"**, %"class.base::sequence_manager::TaskQueue"*** %12, align 8
  %14 = icmp eq %"class.base::sequence_manager::TaskQueue"** %13, null
  %15 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 3, i32 0, i32 1
  %16 = load i32, i32* %15, align 8
  br i1 %14, label %78, label %17

17:                                               ; preds = %2
  %18 = add i32 %16, -1
  %19 = zext i32 %18 to i64
  %20 = shl i64 %3, 32
  %21 = xor i64 %20, -1
  %22 = add i64 %21, %3
  %23 = lshr i64 %22, 22
  %24 = xor i64 %23, %22
  %25 = shl i64 %24, 13
  %26 = xor i64 %25, -1
  %27 = add i64 %24, %26
  %28 = lshr i64 %27, 8
  %29 = xor i64 %28, %27
  %30 = mul i64 %29, 9
  %31 = lshr i64 %30, 15
  %32 = xor i64 %31, %30
  %33 = shl i64 %32, 27
  %34 = xor i64 %33, -1
  %35 = add i64 %32, %34
  %36 = lshr i64 %35, 31
  %37 = xor i64 %36, %35
  %38 = trunc i64 %37 to i32
  %39 = and i32 %18, %38
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %13, i64 %40
  %42 = load %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %41, align 8
  %43 = icmp eq %"class.base::sequence_manager::TaskQueue"* %42, %1
  br i1 %43, label %73, label %44

44:                                               ; preds = %17
  %45 = xor i32 %38, -1
  %46 = lshr i32 %38, 23
  %47 = add i32 %46, %45
  %48 = shl i32 %47, 12
  %49 = xor i32 %48, %47
  %50 = lshr i32 %49, 7
  %51 = xor i32 %50, %49
  %52 = shl i32 %51, 2
  %53 = xor i32 %52, %51
  %54 = lshr i32 %53, 20
  %55 = xor i32 %54, %53
  %56 = or i32 %55, 1
  %57 = zext i32 %56 to i64
  br label %58

58:                                               ; preds = %63, %44
  %59 = phi %"class.base::sequence_manager::TaskQueue"* [ %42, %44 ], [ %69, %63 ]
  %60 = phi i64 [ %40, %44 ], [ %67, %63 ]
  %61 = phi i64 [ 0, %44 ], [ %65, %63 ]
  %62 = icmp eq %"class.base::sequence_manager::TaskQueue"* %59, null
  br i1 %62, label %78, label %63

63:                                               ; preds = %58
  %64 = icmp eq i64 %61, 0
  %65 = select i1 %64, i64 %57, i64 %61
  %66 = add i64 %65, %60
  %67 = and i64 %66, %19
  %68 = getelementptr inbounds %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %13, i64 %67
  %69 = load %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %68, align 8
  %70 = icmp eq %"class.base::sequence_manager::TaskQueue"* %69, %1
  br i1 %70, label %71, label %58

71:                                               ; preds = %63
  %72 = getelementptr inbounds %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %13, i64 %67
  br label %73

73:                                               ; preds = %71, %17
  %74 = phi %"class.base::sequence_manager::TaskQueue"** [ %41, %17 ], [ %72, %71 ]
  %75 = icmp eq %"class.base::sequence_manager::TaskQueue"** %74, null
  br i1 %75, label %78, label %76

76:                                               ; preds = %73
  %77 = zext i32 %16 to i64
  br label %81

78:                                               ; preds = %58, %73, %2
  %79 = zext i32 %16 to i64
  %80 = getelementptr inbounds %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %13, i64 %79
  br label %81

81:                                               ; preds = %76, %78
  %82 = phi i64 [ %77, %76 ], [ %79, %78 ]
  %83 = phi %"class.base::sequence_manager::TaskQueue"** [ %74, %76 ], [ %80, %78 ]
  %84 = getelementptr inbounds %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %13, i64 %82
  %85 = icmp eq %"class.base::sequence_manager::TaskQueue"** %84, %83
  br i1 %85, label %108, label %86

86:                                               ; preds = %81
  store %"class.base::sequence_manager::TaskQueue"* inttoptr (i64 -1 to %"class.base::sequence_manager::TaskQueue"*), %"class.base::sequence_manager::TaskQueue"** %83, align 8
  %87 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 3, i32 0, i32 3
  %88 = load i32, i32* %87, align 8
  %89 = add i32 %88, 1
  %90 = and i32 %89, 2147483647
  %91 = and i32 %88, -2147483648
  %92 = or i32 %90, %91
  store i32 %92, i32* %87, align 8
  %93 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 3, i32 0, i32 2
  %94 = load i32, i32* %93, align 4
  %95 = add i32 %94, -1
  store i32 %95, i32* %93, align 4
  %96 = mul i32 %95, 6
  %97 = load i32, i32* %15, align 8
  %98 = icmp ult i32 %96, %97
  %99 = icmp ugt i32 %97, 8
  %100 = and i1 %98, %99
  br i1 %100, label %101, label %108

101:                                              ; preds = %86
  %102 = lshr i32 %97, 1
  %103 = zext i32 %102 to i64
  %104 = shl nuw nsw i64 %103, 3
  %105 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %104, i8* getelementptr inbounds ([83 x i8], [83 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN4base16sequence_manager9TaskQueueEEEPKcv, i64 0, i64 0)) #7
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %105, i8 0, i64 %104, i1 false) #7
  %106 = bitcast i8* %105 to %"class.base::sequence_manager::TaskQueue"**
  %107 = tail call %"class.base::sequence_manager::TaskQueue"** @_ZN3WTF9HashTableIPN4base16sequence_manager9TaskQueueES4_NS_17IdentityExtractorENS_7PtrHashIS3_EENS_10HashTraitsIS4_EES9_NS_18PartitionAllocatorEE8RehashToEPS4_jSC_(%"class.WTF::HashTable"* %11, %"class.base::sequence_manager::TaskQueue"** %106, i32 %102, %"class.base::sequence_manager::TaskQueue"** null) #7
  br label %108

108:                                              ; preds = %81, %86, %101
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9scheduler10BudgetPool11RemoveQueueEN4base9TimeTicksEPNS2_16sequence_manager9TaskQueueE(%"class.blink::scheduler::BudgetPool"*, i64, %"class.base::sequence_manager::TaskQueue"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN5blink9scheduler10BudgetPool15DissociateQueueEPN4base16sequence_manager9TaskQueueE(%"class.blink::scheduler::BudgetPool"* %0, %"class.base::sequence_manager::TaskQueue"* %2)
  %4 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 4
  %5 = load i8, i8* %4, align 8, !range !3
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %14, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 2
  %9 = load %"class.blink::scheduler::BudgetPoolController"*, %"class.blink::scheduler::BudgetPoolController"** %8, align 8
  %10 = bitcast %"class.blink::scheduler::BudgetPoolController"* %9 to void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)***
  %11 = load void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)**, void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)*, void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)** %11, i64 5
  %13 = load void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)*, void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)** %12, align 8
  tail call void %13(%"class.blink::scheduler::BudgetPoolController"* %9, i64 %1, %"class.base::sequence_manager::TaskQueue"* %2) #7
  br label %14

14:                                               ; preds = %3, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9scheduler10BudgetPool16EnableThrottlingEPN4base16sequence_manager7LazyNowE(%"class.blink::scheduler::BudgetPool"* nocapture, %"class.base::sequence_manager::LazyNow"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::TimeTicks", align 8
  %4 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 4
  %5 = load i8, i8* %4, align 8, !range !3
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %72

7:                                                ; preds = %2
  store i8 1, i8* %4, align 8
  %8 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 107, i32 0), align 16
  %9 = and i8 %8, 25
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %17, label %11, !prof !2

11:                                               ; preds = %7
  %12 = tail call i32 @_ZN4base14PlatformThread9CurrentIdEv() #7
  %13 = bitcast %"class.base::TimeTicks"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #7
  %14 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %3, i64 0, i32 0, i32 0
  %15 = tail call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #7
  store i64 %15, i64* %14, align 8
  %16 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext 88, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 107, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0), i8* null, i64 0, i64 0, i32 %12, %"class.base::TimeTicks"* nonnull dereferenceable(8) %3, %"class.base::trace_event::TraceArguments"* null, i32 0) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #7
  br label %17

17:                                               ; preds = %7, %11
  %18 = phi i64 [ -6148914691236517206, %7 ], [ %16, %11 ]
  %19 = phi i8* [ inttoptr (i64 -6148914691236517206 to i8*), %7 ], [ getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0), %11 ]
  %20 = phi i8* [ null, %7 ], [ getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 107, i32 0), %11 ]
  %21 = call i64 @_ZN4base16sequence_manager7LazyNow3NowEv(%"class.base::sequence_manager::LazyNow"* %1) #7
  %22 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 3, i32 0, i32 2
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, 0
  %25 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 3, i32 0, i32 0
  %26 = load %"class.base::sequence_manager::TaskQueue"**, %"class.base::sequence_manager::TaskQueue"*** %25, align 8
  %27 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 3, i32 0, i32 1
  %28 = load i32, i32* %27, align 8
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %26, i64 %29
  br i1 %24, label %66, label %31

31:                                               ; preds = %17
  %32 = icmp eq i32 %28, 0
  br i1 %32, label %40, label %33

33:                                               ; preds = %31, %37
  %34 = phi %"class.base::sequence_manager::TaskQueue"** [ %38, %37 ], [ %26, %31 ]
  %35 = bitcast %"class.base::sequence_manager::TaskQueue"** %34 to i64*
  %36 = load i64, i64* %35, align 8
  switch i64 %36, label %40 [
    i64 -1, label %37
    i64 0, label %37
  ]

37:                                               ; preds = %33, %33
  %38 = getelementptr inbounds %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %34, i64 1
  %39 = icmp eq %"class.base::sequence_manager::TaskQueue"** %38, %30
  br i1 %39, label %66, label %33

40:                                               ; preds = %33, %31
  %41 = phi %"class.base::sequence_manager::TaskQueue"** [ %26, %31 ], [ %34, %33 ]
  %42 = icmp eq %"class.base::sequence_manager::TaskQueue"** %41, %30
  br i1 %42, label %66, label %43

43:                                               ; preds = %40
  %44 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 2
  %45 = load %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %41, align 8
  br label %46

46:                                               ; preds = %63, %43
  %47 = phi %"class.base::sequence_manager::TaskQueue"* [ %45, %43 ], [ %64, %63 ]
  %48 = phi %"class.base::sequence_manager::TaskQueue"** [ %41, %43 ], [ %57, %63 ]
  %49 = load %"class.blink::scheduler::BudgetPoolController"*, %"class.blink::scheduler::BudgetPoolController"** %44, align 8
  %50 = bitcast %"class.blink::scheduler::BudgetPoolController"* %49 to void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)***
  %51 = load void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)**, void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)*** %50, align 8
  %52 = getelementptr inbounds void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)*, void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)** %51, i64 5
  %53 = load void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)*, void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)** %52, align 8
  call void %53(%"class.blink::scheduler::BudgetPoolController"* %49, i64 %21, %"class.base::sequence_manager::TaskQueue"* %47) #7
  %54 = getelementptr inbounds %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %48, i64 1
  %55 = icmp eq %"class.base::sequence_manager::TaskQueue"** %54, %30
  br i1 %55, label %66, label %56

56:                                               ; preds = %46, %60
  %57 = phi %"class.base::sequence_manager::TaskQueue"** [ %61, %60 ], [ %54, %46 ]
  %58 = bitcast %"class.base::sequence_manager::TaskQueue"** %57 to i64*
  %59 = load i64, i64* %58, align 8
  switch i64 %59, label %63 [
    i64 -1, label %60
    i64 0, label %60
  ]

60:                                               ; preds = %56, %56
  %61 = getelementptr inbounds %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %57, i64 1
  %62 = icmp eq %"class.base::sequence_manager::TaskQueue"** %61, %30
  br i1 %62, label %66, label %56

63:                                               ; preds = %56
  %64 = inttoptr i64 %59 to %"class.base::sequence_manager::TaskQueue"*
  %65 = icmp eq %"class.base::sequence_manager::TaskQueue"** %57, %30
  br i1 %65, label %66, label %46

66:                                               ; preds = %37, %46, %63, %60, %17, %40
  %67 = icmp eq i8* %20, null
  br i1 %67, label %72, label %68

68:                                               ; preds = %66
  %69 = load i8, i8* %20, align 1
  %70 = icmp eq i8 %69, 0
  br i1 %70, label %72, label %71

71:                                               ; preds = %68
  call void @_ZN20trace_event_internal24UpdateTraceEventDurationEPKhPKcN4base11trace_event16TraceEventHandleE(i8* nonnull %20, i8* %19, i64 %18) #7
  br label %72

72:                                               ; preds = %71, %68, %66, %2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9scheduler10BudgetPool33UpdateThrottlingStateForAllQueuesEN4base9TimeTicksE(%"class.blink::scheduler::BudgetPool"* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 3, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  %6 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 3, i32 0, i32 0
  %7 = load %"class.base::sequence_manager::TaskQueue"**, %"class.base::sequence_manager::TaskQueue"*** %6, align 8
  %8 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 3, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %7, i64 %10
  br i1 %5, label %26, label %12

12:                                               ; preds = %2
  %13 = icmp eq i32 %9, 0
  br i1 %13, label %21, label %14

14:                                               ; preds = %12, %18
  %15 = phi %"class.base::sequence_manager::TaskQueue"** [ %19, %18 ], [ %7, %12 ]
  %16 = bitcast %"class.base::sequence_manager::TaskQueue"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  switch i64 %17, label %21 [
    i64 -1, label %18
    i64 0, label %18
  ]

18:                                               ; preds = %14, %14
  %19 = getelementptr inbounds %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %15, i64 1
  %20 = icmp eq %"class.base::sequence_manager::TaskQueue"** %19, %11
  br i1 %20, label %26, label %14

21:                                               ; preds = %14, %12
  %22 = phi %"class.base::sequence_manager::TaskQueue"** [ %7, %12 ], [ %15, %14 ]
  %23 = icmp eq %"class.base::sequence_manager::TaskQueue"** %22, %11
  br i1 %23, label %26, label %24

24:                                               ; preds = %21
  %25 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 2
  br label %27

26:                                               ; preds = %18, %27, %44, %41, %2, %21
  ret void

27:                                               ; preds = %24, %44
  %28 = phi %"class.base::sequence_manager::TaskQueue"** [ %22, %24 ], [ %38, %44 ]
  %29 = load %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %28, align 8
  %30 = load %"class.blink::scheduler::BudgetPoolController"*, %"class.blink::scheduler::BudgetPoolController"** %25, align 8
  %31 = bitcast %"class.blink::scheduler::BudgetPoolController"* %30 to void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)***
  %32 = load void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)**, void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)*** %31, align 8
  %33 = getelementptr inbounds void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)*, void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)** %32, i64 5
  %34 = load void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)*, void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)** %33, align 8
  tail call void %34(%"class.blink::scheduler::BudgetPoolController"* %30, i64 %1, %"class.base::sequence_manager::TaskQueue"* %29) #7
  %35 = getelementptr inbounds %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %28, i64 1
  %36 = icmp eq %"class.base::sequence_manager::TaskQueue"** %35, %11
  br i1 %36, label %26, label %37

37:                                               ; preds = %27, %41
  %38 = phi %"class.base::sequence_manager::TaskQueue"** [ %42, %41 ], [ %35, %27 ]
  %39 = bitcast %"class.base::sequence_manager::TaskQueue"** %38 to i64*
  %40 = load i64, i64* %39, align 8
  switch i64 %40, label %44 [
    i64 -1, label %41
    i64 0, label %41
  ]

41:                                               ; preds = %37, %37
  %42 = getelementptr inbounds %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %38, i64 1
  %43 = icmp eq %"class.base::sequence_manager::TaskQueue"** %42, %11
  br i1 %43, label %26, label %37

44:                                               ; preds = %37
  %45 = icmp eq %"class.base::sequence_manager::TaskQueue"** %38, %11
  br i1 %45, label %26, label %27
}

declare i64 @_ZN4base16sequence_manager7LazyNow3NowEv(%"class.base::sequence_manager::LazyNow"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9scheduler10BudgetPool17DisableThrottlingEPN4base16sequence_manager7LazyNowE(%"class.blink::scheduler::BudgetPool"* nocapture, %"class.base::sequence_manager::LazyNow"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::TimeTicks", align 8
  %4 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 4
  %5 = load i8, i8* %4, align 8, !range !3
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %70, label %7

7:                                                ; preds = %2
  store i8 0, i8* %4, align 8
  %8 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 107, i32 0), align 16
  %9 = and i8 %8, 25
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %17, label %11, !prof !2

11:                                               ; preds = %7
  %12 = tail call i32 @_ZN4base14PlatformThread9CurrentIdEv() #7
  %13 = bitcast %"class.base::TimeTicks"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #7
  %14 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %3, i64 0, i32 0, i32 0
  %15 = tail call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #7
  store i64 %15, i64* %14, align 8
  %16 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext 88, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 107, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0), i8* null, i64 0, i64 0, i32 %12, %"class.base::TimeTicks"* nonnull dereferenceable(8) %3, %"class.base::trace_event::TraceArguments"* null, i32 0) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #7
  br label %17

17:                                               ; preds = %7, %11
  %18 = phi i8* [ inttoptr (i64 -6148914691236517206 to i8*), %7 ], [ getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0), %11 ]
  %19 = phi i8* [ null, %7 ], [ getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 107, i32 0), %11 ]
  %20 = phi i64 [ -6148914691236517206, %7 ], [ %16, %11 ]
  %21 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 3, i32 0, i32 2
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %22, 0
  %24 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 3, i32 0, i32 0
  %25 = load %"class.base::sequence_manager::TaskQueue"**, %"class.base::sequence_manager::TaskQueue"*** %24, align 8
  %26 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 3, i32 0, i32 1
  %27 = load i32, i32* %26, align 8
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %25, i64 %28
  br i1 %23, label %44, label %30

30:                                               ; preds = %17
  %31 = icmp eq i32 %27, 0
  br i1 %31, label %39, label %32

32:                                               ; preds = %30, %36
  %33 = phi %"class.base::sequence_manager::TaskQueue"** [ %37, %36 ], [ %25, %30 ]
  %34 = bitcast %"class.base::sequence_manager::TaskQueue"** %33 to i64*
  %35 = load i64, i64* %34, align 8
  switch i64 %35, label %39 [
    i64 -1, label %36
    i64 0, label %36
  ]

36:                                               ; preds = %32, %32
  %37 = getelementptr inbounds %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %33, i64 1
  %38 = icmp eq %"class.base::sequence_manager::TaskQueue"** %37, %29
  br i1 %38, label %44, label %32

39:                                               ; preds = %32, %30
  %40 = phi %"class.base::sequence_manager::TaskQueue"** [ %25, %30 ], [ %33, %32 ]
  %41 = icmp eq %"class.base::sequence_manager::TaskQueue"** %40, %29
  br i1 %41, label %44, label %42

42:                                               ; preds = %39
  %43 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 2
  br label %50

44:                                               ; preds = %36, %50, %68, %65, %17, %39
  %45 = icmp eq i8* %19, null
  br i1 %45, label %70, label %46

46:                                               ; preds = %44
  %47 = load i8, i8* %19, align 1
  %48 = icmp eq i8 %47, 0
  br i1 %48, label %70, label %49

49:                                               ; preds = %46
  call void @_ZN20trace_event_internal24UpdateTraceEventDurationEPKhPKcN4base11trace_event16TraceEventHandleE(i8* nonnull %19, i8* %18, i64 %20) #7
  br label %70

50:                                               ; preds = %42, %68
  %51 = phi %"class.base::sequence_manager::TaskQueue"** [ %40, %42 ], [ %62, %68 ]
  %52 = load %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %51, align 8
  %53 = load %"class.blink::scheduler::BudgetPoolController"*, %"class.blink::scheduler::BudgetPoolController"** %43, align 8
  %54 = call i64 @_ZN4base16sequence_manager7LazyNow3NowEv(%"class.base::sequence_manager::LazyNow"* %1) #7
  %55 = bitcast %"class.blink::scheduler::BudgetPoolController"* %53 to void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)***
  %56 = load void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)**, void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)*** %55, align 8
  %57 = getelementptr inbounds void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)*, void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)** %56, i64 5
  %58 = load void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)*, void (%"class.blink::scheduler::BudgetPoolController"*, i64, %"class.base::sequence_manager::TaskQueue"*)** %57, align 8
  call void %58(%"class.blink::scheduler::BudgetPoolController"* %53, i64 %54, %"class.base::sequence_manager::TaskQueue"* %52) #7
  %59 = getelementptr inbounds %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %51, i64 1
  %60 = icmp eq %"class.base::sequence_manager::TaskQueue"** %59, %29
  br i1 %60, label %44, label %61

61:                                               ; preds = %50, %65
  %62 = phi %"class.base::sequence_manager::TaskQueue"** [ %66, %65 ], [ %59, %50 ]
  %63 = bitcast %"class.base::sequence_manager::TaskQueue"** %62 to i64*
  %64 = load i64, i64* %63, align 8
  switch i64 %64, label %68 [
    i64 -1, label %65
    i64 0, label %65
  ]

65:                                               ; preds = %61, %61
  %66 = getelementptr inbounds %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %62, i64 1
  %67 = icmp eq %"class.base::sequence_manager::TaskQueue"** %66, %29
  br i1 %67, label %44, label %61

68:                                               ; preds = %61
  %69 = icmp eq %"class.base::sequence_manager::TaskQueue"** %62, %29
  br i1 %69, label %44, label %50

70:                                               ; preds = %49, %46, %44, %2
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink9scheduler10BudgetPool19IsThrottlingEnabledEv(%"class.blink::scheduler::BudgetPool"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 4
  %3 = load i8, i8* %2, align 8, !range !3
  %4 = icmp ne i8 %3, 0
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9scheduler10BudgetPool5CloseEv(%"class.blink::scheduler::BudgetPool"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::scheduler::BudgetPool", %"class.blink::scheduler::BudgetPool"* %0, i64 0, i32 2
  %3 = load %"class.blink::scheduler::BudgetPoolController"*, %"class.blink::scheduler::BudgetPoolController"** %2, align 8
  %4 = bitcast %"class.blink::scheduler::BudgetPoolController"* %3 to void (%"class.blink::scheduler::BudgetPoolController"*, %"class.blink::scheduler::BudgetPool"*)***
  %5 = load void (%"class.blink::scheduler::BudgetPoolController"*, %"class.blink::scheduler::BudgetPool"*)**, void (%"class.blink::scheduler::BudgetPoolController"*, %"class.blink::scheduler::BudgetPool"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::scheduler::BudgetPoolController"*, %"class.blink::scheduler::BudgetPool"*)*, void (%"class.blink::scheduler::BudgetPoolController"*, %"class.blink::scheduler::BudgetPool"*)** %5, i64 4
  %7 = load void (%"class.blink::scheduler::BudgetPoolController"*, %"class.blink::scheduler::BudgetPool"*)*, void (%"class.blink::scheduler::BudgetPoolController"*, %"class.blink::scheduler::BudgetPool"*)** %6, align 8
  tail call void %7(%"class.blink::scheduler::BudgetPoolController"* %3, %"class.blink::scheduler::BudgetPool"* %0) #7
  ret void
}

declare void @__cxa_pure_virtual() unnamed_addr

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #5

declare i32 @_ZN4base14PlatformThread9CurrentIdEv() local_unnamed_addr #5

declare i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() local_unnamed_addr #5

declare i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext, i8*, i8*, i8*, i64, i64, i32, %"class.base::TimeTicks"* dereferenceable(8), %"class.base::trace_event::TraceArguments"*, i32) local_unnamed_addr #5

declare void @_ZN20trace_event_internal24UpdateTraceEventDurationEPKhPKcN4base11trace_event16TraceEventHandleE(i8*, i8*, i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.base::sequence_manager::TaskQueue"**, i8 } @_ZN3WTF9HashTableIPN4base16sequence_manager9TaskQueueES4_NS_17IdentityExtractorENS_7PtrHashIS3_EENS_10HashTraitsIS4_EES9_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS7_S9_SA_EERKS4_RS4_EENS_18HashTableAddResultISB_S4_EEOT0_OT1_(%"class.WTF::HashTable"*, %"class.base::sequence_manager::TaskQueue"** dereferenceable(8), %"class.base::sequence_manager::TaskQueue"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %5 = load %"class.base::sequence_manager::TaskQueue"**, %"class.base::sequence_manager::TaskQueue"*** %4, align 8
  %6 = icmp eq %"class.base::sequence_manager::TaskQueue"** %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"class.base::sequence_manager::TaskQueue"** @_ZN3WTF9HashTableIPN4base16sequence_manager9TaskQueueES4_NS_17IdentityExtractorENS_7PtrHashIS3_EENS_10HashTraitsIS4_EES9_NS_18PartitionAllocatorEE6ExpandEPS4_(%"class.WTF::HashTable"* %0, %"class.base::sequence_manager::TaskQueue"** null)
  %9 = load %"class.base::sequence_manager::TaskQueue"**, %"class.base::sequence_manager::TaskQueue"*** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"class.base::sequence_manager::TaskQueue"** [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = bitcast %"class.base::sequence_manager::TaskQueue"** %1 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = shl i64 %17, 32
  %19 = xor i64 %18, -1
  %20 = add i64 %17, %19
  %21 = lshr i64 %20, 22
  %22 = xor i64 %21, %20
  %23 = shl i64 %22, 13
  %24 = xor i64 %23, -1
  %25 = add i64 %22, %24
  %26 = lshr i64 %25, 8
  %27 = xor i64 %26, %25
  %28 = mul i64 %27, 9
  %29 = lshr i64 %28, 15
  %30 = xor i64 %29, %28
  %31 = shl i64 %30, 27
  %32 = xor i64 %31, -1
  %33 = add i64 %30, %32
  %34 = lshr i64 %33, 31
  %35 = xor i64 %34, %33
  %36 = trunc i64 %35 to i32
  %37 = and i32 %14, %36
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %11, i64 %38
  %40 = load %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %39, align 8
  %41 = icmp eq %"class.base::sequence_manager::TaskQueue"* %40, null
  %42 = inttoptr i64 %17 to %"class.base::sequence_manager::TaskQueue"*
  br i1 %41, label %76, label %43

43:                                               ; preds = %10
  %44 = xor i32 %36, -1
  %45 = lshr i32 %36, 23
  %46 = add i32 %45, %44
  %47 = shl i32 %46, 12
  %48 = xor i32 %47, %46
  %49 = lshr i32 %48, 7
  %50 = xor i32 %49, %48
  %51 = shl i32 %50, 2
  %52 = xor i32 %51, %50
  %53 = lshr i32 %52, 20
  %54 = xor i32 %53, %52
  %55 = or i32 %54, 1
  %56 = zext i32 %55 to i64
  br label %57

57:                                               ; preds = %43, %64
  %58 = phi %"class.base::sequence_manager::TaskQueue"* [ %40, %43 ], [ %72, %64 ]
  %59 = phi %"class.base::sequence_manager::TaskQueue"** [ %39, %43 ], [ %71, %64 ]
  %60 = phi %"class.base::sequence_manager::TaskQueue"** [ null, %43 ], [ %66, %64 ]
  %61 = phi i64 [ %38, %43 ], [ %70, %64 ]
  %62 = phi i64 [ 0, %43 ], [ %68, %64 ]
  %63 = icmp eq %"class.base::sequence_manager::TaskQueue"* %58, %42
  br i1 %63, label %103, label %64

64:                                               ; preds = %57
  %65 = icmp eq %"class.base::sequence_manager::TaskQueue"* %58, inttoptr (i64 -1 to %"class.base::sequence_manager::TaskQueue"*)
  %66 = select i1 %65, %"class.base::sequence_manager::TaskQueue"** %59, %"class.base::sequence_manager::TaskQueue"** %60
  %67 = icmp eq i64 %62, 0
  %68 = select i1 %67, i64 %56, i64 %62
  %69 = add i64 %68, %61
  %70 = and i64 %69, %15
  %71 = getelementptr inbounds %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %11, i64 %70
  %72 = load %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %71, align 8
  %73 = icmp eq %"class.base::sequence_manager::TaskQueue"* %72, null
  br i1 %73, label %74, label %57

74:                                               ; preds = %64
  %75 = icmp eq %"class.base::sequence_manager::TaskQueue"** %66, null
  br i1 %75, label %76, label %79

76:                                               ; preds = %10, %74
  %77 = phi %"class.base::sequence_manager::TaskQueue"** [ %71, %74 ], [ %39, %10 ]
  %78 = bitcast %"class.base::sequence_manager::TaskQueue"** %77 to i64*
  br label %87

79:                                               ; preds = %74
  %80 = bitcast %"class.base::sequence_manager::TaskQueue"** %66 to i64*
  store i64 0, i64* %80, align 8
  %81 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %82 = load i32, i32* %81, align 8
  %83 = add i32 %82, 2147483647
  %84 = and i32 %83, 2147483647
  %85 = and i32 %82, -2147483648
  %86 = or i32 %84, %85
  store i32 %86, i32* %81, align 8
  br label %87

87:                                               ; preds = %76, %79
  %88 = phi i64* [ %78, %76 ], [ %80, %79 ]
  %89 = phi %"class.base::sequence_manager::TaskQueue"** [ %77, %76 ], [ %66, %79 ]
  %90 = bitcast %"class.base::sequence_manager::TaskQueue"** %2 to i64*
  %91 = load i64, i64* %90, align 8
  store i64 %91, i64* %88, align 8
  %92 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %93 = load i32, i32* %92, align 4
  %94 = add i32 %93, 1
  store i32 %94, i32* %92, align 4
  %95 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %96 = load i32, i32* %95, align 8
  %97 = add i32 %96, %94
  %98 = shl i32 %97, 1
  %99 = load i32, i32* %12, align 8
  %100 = icmp ult i32 %98, %99
  br i1 %100, label %103, label %101

101:                                              ; preds = %87
  %102 = tail call %"class.base::sequence_manager::TaskQueue"** @_ZN3WTF9HashTableIPN4base16sequence_manager9TaskQueueES4_NS_17IdentityExtractorENS_7PtrHashIS3_EENS_10HashTraitsIS4_EES9_NS_18PartitionAllocatorEE6ExpandEPS4_(%"class.WTF::HashTable"* %0, %"class.base::sequence_manager::TaskQueue"** %89)
  br label %103

103:                                              ; preds = %57, %87, %101
  %104 = phi i8 [ 1, %87 ], [ 1, %101 ], [ 0, %57 ]
  %105 = phi %"class.base::sequence_manager::TaskQueue"** [ %89, %87 ], [ %102, %101 ], [ %59, %57 ]
  %106 = insertvalue { %"class.base::sequence_manager::TaskQueue"**, i8 } undef, %"class.base::sequence_manager::TaskQueue"** %105, 0
  %107 = insertvalue { %"class.base::sequence_manager::TaskQueue"**, i8 } %106, i8 %104, 1
  ret { %"class.base::sequence_manager::TaskQueue"**, i8 } %107
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.base::sequence_manager::TaskQueue"** @_ZN3WTF9HashTableIPN4base16sequence_manager9TaskQueueES4_NS_17IdentityExtractorENS_7PtrHashIS3_EENS_10HashTraitsIS4_EES9_NS_18PartitionAllocatorEE6ExpandEPS4_(%"class.WTF::HashTable"*, %"class.base::sequence_manager::TaskQueue"**) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #7
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #7
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i8* %22, i8* %23) #7
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.3, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #7
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #7
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #7
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 3
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([83 x i8], [83 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN4base16sequence_manager9TaskQueueEEEPKcv, i64 0, i64 0)) #7
  call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 0, i64 %34, i1 false) #7
  %36 = bitcast i8* %35 to %"class.base::sequence_manager::TaskQueue"**
  %37 = call %"class.base::sequence_manager::TaskQueue"** @_ZN3WTF9HashTableIPN4base16sequence_manager9TaskQueueES4_NS_17IdentityExtractorENS_7PtrHashIS3_EENS_10HashTraitsIS4_EES9_NS_18PartitionAllocatorEE8RehashToEPS4_jSC_(%"class.WTF::HashTable"* %0, %"class.base::sequence_manager::TaskQueue"** %36, i32 %32, %"class.base::sequence_manager::TaskQueue"** %1) #7
  ret %"class.base::sequence_manager::TaskQueue"** %37
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #5

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #6

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #5

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.base::sequence_manager::TaskQueue"** @_ZN3WTF9HashTableIPN4base16sequence_manager9TaskQueueES4_NS_17IdentityExtractorENS_7PtrHashIS3_EENS_10HashTraitsIS4_EES9_NS_18PartitionAllocatorEE8RehashToEPS4_jSC_(%"class.WTF::HashTable"*, %"class.base::sequence_manager::TaskQueue"**, i32, %"class.base::sequence_manager::TaskQueue"**) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint %"class.base::sequence_manager::TaskQueue"** %1 to i64
  %6 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  br i1 %8, label %10, label %13

10:                                               ; preds = %4
  %11 = bitcast %"class.WTF::HashTable"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  br label %20

13:                                               ; preds = %4
  %14 = add i32 %2, -1
  %15 = zext i32 %14 to i64
  %16 = load %"class.base::sequence_manager::TaskQueue"**, %"class.base::sequence_manager::TaskQueue"*** %9, align 8
  %17 = ptrtoint %"class.base::sequence_manager::TaskQueue"** %16 to i64
  br label %31

18:                                               ; preds = %119
  %19 = bitcast %"class.WTF::HashTable"* %0 to i64*
  br label %20

20:                                               ; preds = %10, %18
  %21 = phi i64* [ %11, %10 ], [ %19, %18 ]
  %22 = phi i64 [ %12, %10 ], [ %120, %18 ]
  %23 = phi %"class.base::sequence_manager::TaskQueue"** [ null, %10 ], [ %123, %18 ]
  store atomic i64 %5, i64* %21 monotonic, align 8
  store i32 %2, i32* %6, align 8
  %24 = icmp eq i64 %22, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %20
  %26 = inttoptr i64 %22 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %26) #7
  br label %27

27:                                               ; preds = %20, %25
  %28 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %29 = load i32, i32* %28, align 8
  %30 = and i32 %29, -2147483648
  store i32 %30, i32* %28, align 8
  ret %"class.base::sequence_manager::TaskQueue"** %23

31:                                               ; preds = %13, %119
  %32 = phi i64 [ %17, %13 ], [ %120, %119 ]
  %33 = phi i32 [ %7, %13 ], [ %121, %119 ]
  %34 = phi %"class.base::sequence_manager::TaskQueue"** [ %16, %13 ], [ %122, %119 ]
  %35 = phi %"class.base::sequence_manager::TaskQueue"** [ null, %13 ], [ %123, %119 ]
  %36 = phi i32 [ 0, %13 ], [ %124, %119 ]
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %34, i64 %37
  %39 = bitcast %"class.base::sequence_manager::TaskQueue"** %38 to i64*
  %40 = load i64, i64* %39, align 8
  switch i64 %40, label %41 [
    i64 -1, label %119
    i64 0, label %119
  ]

41:                                               ; preds = %31
  %42 = shl i64 %40, 32
  %43 = xor i64 %42, -1
  %44 = add i64 %40, %43
  %45 = lshr i64 %44, 22
  %46 = xor i64 %45, %44
  %47 = shl i64 %46, 13
  %48 = xor i64 %47, -1
  %49 = add i64 %46, %48
  %50 = lshr i64 %49, 8
  %51 = xor i64 %50, %49
  %52 = mul i64 %51, 9
  %53 = lshr i64 %52, 15
  %54 = xor i64 %53, %52
  %55 = shl i64 %54, 27
  %56 = xor i64 %55, -1
  %57 = add i64 %54, %56
  %58 = lshr i64 %57, 31
  %59 = xor i64 %58, %57
  %60 = trunc i64 %59 to i32
  %61 = and i32 %14, %60
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %1, i64 %62
  %64 = ptrtoint %"class.base::sequence_manager::TaskQueue"** %63 to i64
  %65 = load %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %63, align 8
  %66 = icmp eq %"class.base::sequence_manager::TaskQueue"* %65, null
  %67 = inttoptr i64 %40 to %"class.base::sequence_manager::TaskQueue"*
  br i1 %66, label %85, label %68

68:                                               ; preds = %41
  %69 = xor i32 %60, -1
  %70 = lshr i32 %60, 23
  %71 = add i32 %70, %69
  %72 = shl i32 %71, 12
  %73 = xor i32 %72, %71
  %74 = lshr i32 %73, 7
  %75 = xor i32 %74, %73
  %76 = shl i32 %75, 2
  %77 = xor i32 %76, %75
  %78 = lshr i32 %77, 20
  %79 = xor i32 %78, %77
  %80 = or i32 %79, 1
  %81 = zext i32 %80 to i64
  br label %91

82:                                               ; preds = %98
  %83 = ptrtoint %"class.base::sequence_manager::TaskQueue"** %105 to i64
  %84 = inttoptr i64 %100 to %"class.base::sequence_manager::TaskQueue"**
  br label %85

85:                                               ; preds = %82, %41
  %86 = phi i64 [ %83, %82 ], [ %64, %41 ]
  %87 = phi %"class.base::sequence_manager::TaskQueue"** [ %84, %82 ], [ null, %41 ]
  %88 = icmp eq %"class.base::sequence_manager::TaskQueue"** %87, null
  %89 = ptrtoint %"class.base::sequence_manager::TaskQueue"** %87 to i64
  %90 = select i1 %88, i64 %86, i64 %89
  br label %109

91:                                               ; preds = %98, %68
  %92 = phi i64 [ 0, %68 ], [ %100, %98 ]
  %93 = phi %"class.base::sequence_manager::TaskQueue"* [ %65, %68 ], [ %107, %98 ]
  %94 = phi i64 [ %64, %68 ], [ %106, %98 ]
  %95 = phi i64 [ %62, %68 ], [ %104, %98 ]
  %96 = phi i64 [ 0, %68 ], [ %102, %98 ]
  %97 = icmp eq %"class.base::sequence_manager::TaskQueue"* %93, %67
  br i1 %97, label %109, label %98

98:                                               ; preds = %91
  %99 = icmp eq %"class.base::sequence_manager::TaskQueue"* %93, inttoptr (i64 -1 to %"class.base::sequence_manager::TaskQueue"*)
  %100 = select i1 %99, i64 %94, i64 %92
  %101 = icmp eq i64 %96, 0
  %102 = select i1 %101, i64 %81, i64 %96
  %103 = add i64 %102, %95
  %104 = and i64 %103, %15
  %105 = getelementptr inbounds %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %1, i64 %104
  %106 = ptrtoint %"class.base::sequence_manager::TaskQueue"** %105 to i64
  %107 = load %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %105, align 8
  %108 = icmp eq %"class.base::sequence_manager::TaskQueue"* %107, null
  br i1 %108, label %82, label %91

109:                                              ; preds = %91, %85
  %110 = phi i64 [ %90, %85 ], [ %94, %91 ]
  %111 = inttoptr i64 %110 to %"class.base::sequence_manager::TaskQueue"**
  %112 = inttoptr i64 %110 to i64*
  store i64 %40, i64* %112, align 8
  %113 = load %"class.base::sequence_manager::TaskQueue"**, %"class.base::sequence_manager::TaskQueue"*** %9, align 8
  %114 = getelementptr inbounds %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %113, i64 %37
  %115 = icmp eq %"class.base::sequence_manager::TaskQueue"** %114, %3
  %116 = select i1 %115, %"class.base::sequence_manager::TaskQueue"** %111, %"class.base::sequence_manager::TaskQueue"** %35
  %117 = load i32, i32* %6, align 8
  %118 = ptrtoint %"class.base::sequence_manager::TaskQueue"** %113 to i64
  br label %119

119:                                              ; preds = %31, %31, %109
  %120 = phi i64 [ %32, %31 ], [ %118, %109 ], [ %32, %31 ]
  %121 = phi i32 [ %33, %31 ], [ %117, %109 ], [ %33, %31 ]
  %122 = phi %"class.base::sequence_manager::TaskQueue"** [ %34, %31 ], [ %113, %109 ], [ %34, %31 ]
  %123 = phi %"class.base::sequence_manager::TaskQueue"** [ %35, %31 ], [ %116, %109 ], [ %35, %31 ]
  %124 = add i32 %36, 1
  %125 = icmp eq i32 %124, %121
  br i1 %125, label %18, label %31
}

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { cold noreturn nounwind }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{i8 0, i8 2}
