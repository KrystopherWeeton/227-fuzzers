; ModuleID = '../../v8/src/compiler/state-values-utils.cc'
source_filename = "../../v8/src/compiler/state-values-utils.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::compiler::StateValuesCache" = type { %"class.v8::internal::compiler::JSGraph"*, %"class.v8::base::CustomMatcherTemplateHashMapImpl", %"class.v8::internal::ZoneVector.666", %"class.v8::internal::compiler::Node"* }
%"class.v8::base::CustomMatcherTemplateHashMapImpl" = type { %"class.v8::base::TemplateHashMapImpl" }
%"class.v8::base::TemplateHashMapImpl" = type { %"struct.v8::base::TemplateHashMapImpl<void *, void *, v8::base::HashEqualityThenKeyMatcher<void *, bool (*)(void *, void *)>, v8::internal::ZoneAllocationPolicy>::Impl" }
%"struct.v8::base::TemplateHashMapImpl<void *, void *, v8::base::HashEqualityThenKeyMatcher<void *, bool (*)(void *, void *)>, v8::internal::ZoneAllocationPolicy>::Impl" = type { %"struct.v8::base::HashEqualityThenKeyMatcher", %"class.v8::internal::ZoneAllocationPolicy", %"struct.v8::base::TemplateHashMapEntry"*, i32, i32 }
%"struct.v8::base::HashEqualityThenKeyMatcher" = type { i1 (i8*, i8*)* }
%"class.v8::internal::ZoneAllocationPolicy" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.2" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type opaque
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"struct.v8::base::TemplateHashMapEntry" = type <{ i8*, i8*, i32, [4 x i8] }>
%"class.v8::internal::ZoneVector.666" = type { %"class.std::__1::vector.667" }
%"class.std::__1::vector.667" = type { %"class.std::__1::__vector_base.668" }
%"class.std::__1::__vector_base.668" = type { %"struct.std::__1::array"*, %"struct.std::__1::array"*, %"class.std::__1::__compressed_pair.669" }
%"struct.std::__1::array" = type { [8 x %"class.v8::internal::compiler::Node"*] }
%"class.std::__1::__compressed_pair.669" = type { %"struct.std::__1::__compressed_pair_elem.670", %"struct.std::__1::__compressed_pair_elem.671" }
%"struct.std::__1::__compressed_pair_elem.670" = type { %"struct.std::__1::array"* }
%"struct.std::__1::__compressed_pair_elem.671" = type { %"class.v8::internal::ZoneAllocator.672" }
%"class.v8::internal::ZoneAllocator.672" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::compiler::Node" = type { %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Type", i32, i32, %"struct.v8::internal::compiler::Node::Use"* }
%"class.v8::internal::compiler::Operator" = type <{ i32 (...)**, i8*, i16, %"class.v8::base::Flags", i8, i32, i32, i32, i32, i8, [3 x i8], i32, [4 x i8] }>
%"class.v8::base::Flags" = type { i8 }
%"class.v8::internal::compiler::Type" = type { i64 }
%"struct.v8::internal::compiler::Node::Use" = type { %"struct.v8::internal::compiler::Node::Use"*, %"struct.v8::internal::compiler::Node::Use"*, i32 }
%"class.v8::internal::compiler::JSGraph" = type { %"class.v8::internal::compiler::MachineGraph", %"class.v8::internal::Isolate"*, %"class.v8::internal::compiler::JSOperatorBuilder"*, %"class.v8::internal::compiler::SimplifiedOperatorBuilder"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"* }
%"class.v8::internal::compiler::MachineGraph" = type { %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::MachineOperatorBuilder"*, %"class.v8::internal::compiler::CommonNodeCache", %"class.v8::internal::compiler::Node"* }
%"class.v8::internal::compiler::Graph" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, i32, i32, %"class.v8::internal::ZoneVector" }
%"class.v8::internal::ZoneVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.v8::internal::compiler::GraphDecorator"**, %"class.v8::internal::compiler::GraphDecorator"**, %"class.std::__1::__compressed_pair.8" }
%"class.v8::internal::compiler::GraphDecorator" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9", %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.v8::internal::compiler::GraphDecorator"** }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.v8::internal::ZoneAllocator" }
%"class.v8::internal::ZoneAllocator" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::compiler::CommonOperatorBuilder" = type { %"struct.v8::internal::compiler::CommonOperatorGlobalCache"*, %"class.v8::internal::Zone"* }
%"struct.v8::internal::compiler::CommonOperatorGlobalCache" = type opaque
%"class.v8::internal::compiler::MachineOperatorBuilder" = type <{ %"class.v8::internal::Zone"*, %"struct.v8::internal::compiler::MachineOperatorGlobalCache"*, i8, [3 x i8], %"class.v8::base::Flags.11", %"class.v8::internal::compiler::MachineOperatorBuilder::AlignmentRequirements", [4 x i8] }>
%"struct.v8::internal::compiler::MachineOperatorGlobalCache" = type opaque
%"class.v8::base::Flags.11" = type { i32 }
%"class.v8::internal::compiler::MachineOperatorBuilder::AlignmentRequirements" = type { i32, %"class.v8::base::EnumSet", %"class.v8::base::EnumSet" }
%"class.v8::base::EnumSet" = type { i32 }
%"class.v8::internal::compiler::CommonNodeCache" = type { %"class.v8::internal::compiler::NodeCache", %"class.v8::internal::compiler::NodeCache.29", %"class.v8::internal::compiler::NodeCache", %"class.v8::internal::compiler::NodeCache", %"class.v8::internal::compiler::NodeCache.29", %"class.v8::internal::compiler::NodeCache.29", %"class.v8::internal::compiler::NodeCache.29", %"class.v8::internal::compiler::NodeCache.29", %"class.v8::internal::compiler::NodeCache.29", %"class.v8::internal::compiler::NodeCache.56", %"class.v8::internal::compiler::NodeCache.83" }
%"class.v8::internal::compiler::NodeCache" = type { %"class.v8::internal::ZoneUnorderedMap" }
%"class.v8::internal::ZoneUnorderedMap" = type { %"class.std::__1::unordered_map" }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.12", %"class.std::__1::__compressed_pair.20", %"class.std::__1::__compressed_pair.24", %"class.std::__1::__compressed_pair.26", [4 x i8] }>
%"class.std::__1::unique_ptr.12" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14", %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17", %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.17" = type { i64 }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.v8::internal::ZoneAllocator.19" }
%"class.v8::internal::ZoneAllocator.19" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21", %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"struct.std::__1::__hash_node_base" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"class.v8::internal::ZoneAllocator.23" }
%"class.v8::internal::ZoneAllocator.23" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { float }
%"class.v8::internal::compiler::NodeCache.29" = type { %"class.v8::internal::ZoneUnorderedMap.30" }
%"class.v8::internal::ZoneUnorderedMap.30" = type { %"class.std::__1::unordered_map.31" }
%"class.std::__1::unordered_map.31" = type { %"class.std::__1::__hash_table.32" }
%"class.std::__1::__hash_table.32" = type <{ %"class.std::__1::unique_ptr.33", %"class.std::__1::__compressed_pair.42", %"class.std::__1::__compressed_pair.46", %"class.std::__1::__compressed_pair.50", [4 x i8] }>
%"class.std::__1::unique_ptr.33" = type { %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35", %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"struct.std::__1::__hash_node_base.36"** }
%"struct.std::__1::__hash_node_base.36" = type { %"struct.std::__1::__hash_node_base.36"* }
%"struct.std::__1::__compressed_pair_elem.37" = type { %"class.std::__1::__bucket_list_deallocator.38" }
%"class.std::__1::__bucket_list_deallocator.38" = type { %"class.std::__1::__compressed_pair.39" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.17", %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"class.v8::internal::ZoneAllocator.41" }
%"class.v8::internal::ZoneAllocator.41" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43", %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"struct.std::__1::__hash_node_base.36" }
%"struct.std::__1::__compressed_pair_elem.44" = type { %"class.v8::internal::ZoneAllocator.45" }
%"class.v8::internal::ZoneAllocator.45" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.v8::internal::compiler::NodeCache.56" = type { %"class.v8::internal::ZoneUnorderedMap.57" }
%"class.v8::internal::ZoneUnorderedMap.57" = type { %"class.std::__1::unordered_map.58" }
%"class.std::__1::unordered_map.58" = type { %"class.std::__1::__hash_table.59" }
%"class.std::__1::__hash_table.59" = type <{ %"class.std::__1::unique_ptr.60", %"class.std::__1::__compressed_pair.69", %"class.std::__1::__compressed_pair.73", %"class.std::__1::__compressed_pair.77", [4 x i8] }>
%"class.std::__1::unique_ptr.60" = type { %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62", %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"struct.std::__1::__hash_node_base.63"** }
%"struct.std::__1::__hash_node_base.63" = type { %"struct.std::__1::__hash_node_base.63"* }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"class.std::__1::__bucket_list_deallocator.65" }
%"class.std::__1::__bucket_list_deallocator.65" = type { %"class.std::__1::__compressed_pair.66" }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.17", %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %"class.v8::internal::ZoneAllocator.68" }
%"class.v8::internal::ZoneAllocator.68" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70", %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %"struct.std::__1::__hash_node_base.63" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %"class.v8::internal::ZoneAllocator.72" }
%"class.v8::internal::ZoneAllocator.72" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.73" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.v8::internal::compiler::NodeCache.83" = type { %"class.v8::internal::ZoneUnorderedMap.84" }
%"class.v8::internal::ZoneUnorderedMap.84" = type { %"class.std::__1::unordered_map.85" }
%"class.std::__1::unordered_map.85" = type { %"class.std::__1::__hash_table.86" }
%"class.std::__1::__hash_table.86" = type <{ %"class.std::__1::unique_ptr.87", %"class.std::__1::__compressed_pair.96", %"class.std::__1::__compressed_pair.100", %"class.std::__1::__compressed_pair.104", [4 x i8] }>
%"class.std::__1::unique_ptr.87" = type { %"class.std::__1::__compressed_pair.88" }
%"class.std::__1::__compressed_pair.88" = type { %"struct.std::__1::__compressed_pair_elem.89", %"struct.std::__1::__compressed_pair_elem.91" }
%"struct.std::__1::__compressed_pair_elem.89" = type { %"struct.std::__1::__hash_node_base.90"** }
%"struct.std::__1::__hash_node_base.90" = type { %"struct.std::__1::__hash_node_base.90"* }
%"struct.std::__1::__compressed_pair_elem.91" = type { %"class.std::__1::__bucket_list_deallocator.92" }
%"class.std::__1::__bucket_list_deallocator.92" = type { %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.17", %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { %"class.v8::internal::ZoneAllocator.95" }
%"class.v8::internal::ZoneAllocator.95" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.97", %"struct.std::__1::__compressed_pair_elem.98" }
%"struct.std::__1::__compressed_pair_elem.97" = type { %"struct.std::__1::__hash_node_base.90" }
%"struct.std::__1::__compressed_pair_elem.98" = type { %"class.v8::internal::ZoneAllocator.99" }
%"class.v8::internal::ZoneAllocator.99" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.v8::internal::Isolate" = type { %"class.v8::internal::IsolateData", %"class.std::__1::unique_ptr.115", %"class.v8::internal::Heap", %"class.v8::internal::ReadOnlyHeap"*, %"class.std::__1::shared_ptr.441", %"class.std::__1::unique_ptr.442", i32, %"class.v8::internal::Isolate::EntryStackItem"*, i32, %"class.v8::internal::StringStream"*, [13 x i64], %"class.v8::internal::Bootstrapper"*, %"class.v8::internal::RuntimeProfiler"*, %"class.v8::internal::CompilationCache"*, %"class.std::__1::shared_ptr.448", %"class.v8::base::RecursiveMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::internal::Logger"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::Deoptimizer"*, i8, %"class.v8::internal::MaterializedObjectStore"*, i8, i32, i32, %"class.v8::internal::DescriptorLookupCache"*, %"struct.v8::internal::HandleScopeData", %"class.v8::internal::HandleScopeImplementer"*, %"class.v8::internal::UnicodeCache"*, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::InnerPointerToCodeCache"*, %"class.v8::internal::GlobalHandles"*, %"class.v8::internal::EternalHandles"*, %"class.v8::internal::ThreadManager"*, %"class.v8::bigint::Processor"*, %"class.v8::internal::RuntimeState", %"class.v8::internal::Builtins", %"class.v8::internal::SetupIsolateDelegate"*, %"class.v8::internal::RegExpStack"*, %"class.std::__1::vector.463", %"class.v8::internal::DateCache"*, %"class.v8::base::RandomNumberGenerator"*, %"class.v8::base::RandomNumberGenerator"*, %"struct.std::__1::atomic.470", {}*, i8*, void (i32, %"class.v8::Promise"*, %"class.v8::Value"*)*, {}*, {}*, %"struct.std::__1::atomic.480", {}*, %"class.v8::base::Mutex", double, %"class.std::__1::basic_string", %"class.std::__1::unordered_map.490", %"struct.std::__1::atomic.167", i8, i8, i8, i8, i8, i8, double, %"class.v8::internal::Debug"*, %"class.v8::internal::HeapProfiler"*, %"class.std::__1::unique_ptr.524", %"class.v8::internal::AstStringConstants"*, %"class.v8::internal::interpreter::Interpreter"*, %"class.v8::internal::compiler::PerIsolateCompilerCache"*, %"class.v8::internal::Zone"*, %"class.v8::internal::CompilerDispatcher"*, %"class.std::__1::queue", void (i8*, i8*)*, void (i8*, i1)*, void (i8*, i32)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*, i1)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::Context"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, %"class.v8::String"* (%"class.v8::Isolate"*, i8*)*, i1 (%"class.v8::Context"*)*, i1 (%"class.v8::Context"*)*, %"class.v8::internal::Relocatable"*, %"class.std::__1::vector.541"*, %"class.v8::internal::Object", i64*, %"class.v8::internal::AddressToIndexHashMap"*, %"class.v8::internal::HeapObjectToIndexHashMap"*, %"class.v8::internal::MicrotaskQueue"*, %"class.v8::internal::CompilationStatistics"*, %"class.v8::internal::CodeTracer"*, i32, void (%"class.v8::PromiseRejectMessage"*)*, %"class.v8::StartupData"*, i32, i32, i32, i64, i8, i8, i32, i8, i32, %"class.v8_inspector::V8Inspector"*, i8, i8, i8, i32, i32, %"class.v8::internal::compiler::NodeObserver"*, i8, [128 x i32], [256 x i32], [251 x i32], [251 x i32], %"class.v8::internal::OptimizingCompileDispatcher"*, %"class.std::__1::unique_ptr.542", i32, i8, i8, i32, i32, %"class.std::__1::vector.548", %"class.std::__1::vector.548", void (%"class.v8::Isolate"*, i32)*, %"class.std::__1::shared_ptr.555", i64, %"class.std::__1::unordered_map.556", i64, %"struct.v8::metrics::LongTaskStats", %"class.std::__1::vector.316", %"class.v8::internal::BuiltinsConstantsTableBuilder"*, i8*, i32, i8*, i32, %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::shared_ptr.175", %"class.v8::internal::FutexWaitListNode", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::debug::ConsoleDelegate"*, %"class.v8::debug::AsyncEventDelegate"*, i32, i32, %"class.std::__1::unique_ptr.615", i1 (%"class.v8::Isolate"*)*, i8, %"class.v8::base::Mutex", %"struct.v8::internal::ManagedPtrDestructor"*, i64, i64, %"class.v8::internal::wasm::WasmEngine"*, %"class.std::__1::unique_ptr.621", %"class.v8::internal::EmbeddedFileWriterInterface"*, %"class.v8::Context::BackupIncumbentScope"*, {}*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate::ThreadDataTable", i8, %"class.v8::internal::Isolate"*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"struct.std::__1::atomic.655", %"class.std::__1::vector.659", %"class.std::__1::vector.659", void (i32, %"class.std::__1::basic_string"*)* }
%"class.v8::internal::IsolateData" = type { [4 x i8*], i64, i64, i64, i64, i64, %"class.v8::internal::StackGuard", %"class.v8::internal::RootsTable", %"class.v8::internal::ExternalReferenceTable", %"class.v8::internal::ThreadLocalTop", [1711 x i64], [1711 x i64], i8, [15 x i8] }
%"class.v8::internal::StackGuard" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::StackGuard::ThreadLocal" }
%"class.v8::internal::StackGuard::ThreadLocal" = type { i64, i64, i64, i64, %"class.v8::internal::InterruptsScope"*, i64 }
%"class.v8::internal::InterruptsScope" = type { i32 (...)**, %"class.v8::internal::StackGuard"*, i64, i64, i32, %"class.v8::internal::InterruptsScope"* }
%"class.v8::internal::RootsTable" = type { [669 x i64] }
%"class.v8::internal::ExternalReferenceTable" = type { [1042 x i64], i32, i32 }
%"class.v8::internal::ThreadLocalTop" = type { %"class.v8::TryCatch"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Context", %"struct.std::__1::atomic.110", %"class.v8::internal::Object", %"class.v8::internal::Context", i64, i64, i64, i64, i64, %"class.v8::internal::Object", i8, i8, %"class.v8::internal::Object", i64, i64, i64, %"class.v8::internal::PromiseOnStack"*, %"class.v8::internal::Simulator"*, i64, %"class.v8::internal::ExternalCallbackScope"*, i32, void (%"class.v8::Object"*, i32, %"class.v8::Value"*)*, i64 }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"struct.std::__1::atomic.110" = type { %"struct.std::__1::__atomic_base.111" }
%"struct.std::__1::__atomic_base.111" = type { %"struct.std::__1::__cxx_atomic_impl.112" }
%"struct.std::__1::__cxx_atomic_impl.112" = type { %"struct.std::__1::__cxx_atomic_base_impl.113" }
%"struct.std::__1::__cxx_atomic_base_impl.113" = type { %"class.v8::internal::ThreadId" }
%"class.v8::internal::ThreadId" = type { i32 }
%"class.v8::internal::Context" = type { %"class.v8::internal::TorqueGeneratedContext" }
%"class.v8::internal::TorqueGeneratedContext" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::HeapObject" = type { %"class.v8::internal::Object" }
%"class.v8::internal::PromiseOnStack" = type { %"class.v8::internal::Handle", %"class.v8::internal::PromiseOnStack"* }
%"class.v8::internal::Handle" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"class.v8::internal::Simulator" = type opaque
%"class.v8::internal::ExternalCallbackScope" = type opaque
%"class.v8::Object" = type { i8 }
%"class.v8::Value" = type { i8 }
%"class.std::__1::unique_ptr.115" = type { %"class.std::__1::__compressed_pair.116" }
%"class.std::__1::__compressed_pair.116" = type { %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"class.v8::internal::IsolateAllocator"* }
%"class.v8::internal::IsolateAllocator" = type { i8*, %"class.v8::PageAllocator"* }
%"class.v8::internal::Heap" = type { %"class.std::__1::unordered_map.121", %"struct.std::__1::atomic", %"class.v8::internal::Heap::ExternalMemoryAccounting", %"class.v8::internal::Isolate"*, i64, i64, i64, i64, %"struct.std::__1::atomic", i64, i64, i64, i64, i64, i8, i64, i64, %"struct.std::__1::atomic", i64, i64, %"struct.std::__1::atomic", %"struct.std::__1::atomic.150", %"class.std::__1::vector.154", i32, %"class.v8::internal::NewSpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::CodeSpace"*, %"class.v8::internal::MapSpace"*, %"class.v8::internal::OldLargeObjectSpace"*, %"class.v8::internal::CodeLargeObjectSpace"*, %"class.v8::internal::NewLargeObjectSpace"*, %"class.v8::internal::ReadOnlySpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::MapSpace"*, %"class.std::__1::unique_ptr.161", %"class.std::__1::unique_ptr.161", [8 x %"class.v8::internal::Space"*], %"class.v8::internal::LocalHeap"*, %"class.v8::internal::ArrayBufferExtension"*, %"class.v8::internal::ArrayBufferExtension"*, i8, i64, %"struct.std::__1::atomic.176", i32, i32, i32, i32, %"class.v8::internal::AllocationObserver"*, %"class.v8::internal::StressScavengeObserver"*, double, i32, i32, i32, i64, i32, [128 x i64], %"struct.std::__1::atomic", i64, i8, %"struct.std::__1::atomic", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.std::__1::vector.180", %"class.std::__1::vector.180", i64 ()*, [113 x i32], i64, double, double, i64, i64, double, i32, i32, i32, i32, double, double, double, %"class.std::__1::unique_ptr.187", %"class.std::__1::unique_ptr.193", %"class.v8::internal::MinorMarkCompactCollector"*, %"class.std::__1::unique_ptr.199", %"class.std::__1::unique_ptr.205", %"class.std::__1::unique_ptr.211", %"class.std::__1::unique_ptr.217", %"class.std::__1::unique_ptr.223", %"class.std::__1::unique_ptr.229", %"class.std::__1::unique_ptr.235", %"class.std::__1::unique_ptr.241", %"class.std::__1::unique_ptr.247", %"class.std::__1::unique_ptr.247", %"class.std::__1::unique_ptr.253", %"class.std::__1::unique_ptr.259", %"class.std::__1::unique_ptr.259", %"class.std::__1::unique_ptr.265", %"class.std::__1::unique_ptr.271", %"class.std::__1::shared_ptr.277", %"class.v8::CppHeap"*, %"class.v8::EmbedderRootsHandler"*, %"class.v8::internal::StrongRootsEntry"*, %"class.v8::base::Mutex", i8, i64, i64, i64, i64, %"class.std::__1::unordered_map.278", %"class.std::__1::unique_ptr.304", [512 x i8], i8, i8, i64, i8, i32, i32, %"class.std::__1::unique_ptr.310", i8, %"class.v8::internal::Heap::ExternalStringTable", %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.323", i32, i8, i8, i8, i8, i8, %"class.v8::internal::HeapObject", %"class.v8::base::SharedMutex", %"class.v8::base::Mutex", %"class.std::__1::unordered_set", i8, [7 x i8], %"class.std::__1::unordered_map.352", %"class.std::__1::unordered_map.378", %"class.std::__1::unordered_map.352", %"class.std::__1::unordered_map.402", %"class.std::__1::vector.428", i8, %"class.std::__1::unique_ptr.435", i32, i32 }
%"class.std::__1::unordered_map.121" = type { %"class.std::__1::__hash_table.122" }
%"class.std::__1::__hash_table.122" = type <{ %"class.std::__1::unique_ptr.123", %"class.std::__1::__compressed_pair.131", %"class.std::__1::__compressed_pair.136", %"class.std::__1::__compressed_pair.139", [4 x i8] }>
%"class.std::__1::unique_ptr.123" = type { %"class.std::__1::__compressed_pair.124" }
%"class.std::__1::__compressed_pair.124" = type { %"struct.std::__1::__compressed_pair_elem.125", %"struct.std::__1::__compressed_pair_elem.127" }
%"struct.std::__1::__compressed_pair_elem.125" = type { %"struct.std::__1::__hash_node_base.126"** }
%"struct.std::__1::__hash_node_base.126" = type { %"struct.std::__1::__hash_node_base.126"* }
%"struct.std::__1::__compressed_pair_elem.127" = type { %"class.std::__1::__bucket_list_deallocator.128" }
%"class.std::__1::__bucket_list_deallocator.128" = type { %"class.std::__1::__compressed_pair.129" }
%"class.std::__1::__compressed_pair.129" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::__compressed_pair.131" = type { %"struct.std::__1::__compressed_pair_elem.132" }
%"struct.std::__1::__compressed_pair_elem.132" = type { %"struct.std::__1::__hash_node_base.126" }
%"class.std::__1::__compressed_pair.136" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::__compressed_pair.139" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.v8::internal::Heap::ExternalMemoryAccounting" = type { %"struct.std::__1::atomic.145", %"struct.std::__1::atomic.145", %"struct.std::__1::atomic.145" }
%"struct.std::__1::atomic.145" = type { %"struct.std::__1::__atomic_base.146" }
%"struct.std::__1::__atomic_base.146" = type { %"struct.std::__1::__atomic_base.147" }
%"struct.std::__1::__atomic_base.147" = type { %"struct.std::__1::__cxx_atomic_impl.148" }
%"struct.std::__1::__cxx_atomic_impl.148" = type { %"struct.std::__1::__cxx_atomic_base_impl.149" }
%"struct.std::__1::__cxx_atomic_base_impl.149" = type { i64 }
%"struct.std::__1::atomic.150" = type { %"struct.std::__1::__atomic_base.151" }
%"struct.std::__1::__atomic_base.151" = type { %"struct.std::__1::__cxx_atomic_impl.152" }
%"struct.std::__1::__cxx_atomic_impl.152" = type { %"struct.std::__1::__cxx_atomic_base_impl.153" }
%"struct.std::__1::__cxx_atomic_base_impl.153" = type { i32 }
%"class.std::__1::vector.154" = type { %"class.std::__1::__vector_base.155" }
%"class.std::__1::__vector_base.155" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.156" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.156" = type { %"struct.std::__1::__compressed_pair_elem.157" }
%"struct.std::__1::__compressed_pair_elem.157" = type { %"struct.std::__1::pair"* }
%"class.v8::internal::NewSpace" = type opaque
%"class.v8::internal::CodeSpace" = type opaque
%"class.v8::internal::OldLargeObjectSpace" = type opaque
%"class.v8::internal::CodeLargeObjectSpace" = type opaque
%"class.v8::internal::NewLargeObjectSpace" = type opaque
%"class.v8::internal::ReadOnlySpace" = type opaque
%"class.v8::internal::OldSpace" = type opaque
%"class.v8::internal::MapSpace" = type opaque
%"class.std::__1::unique_ptr.161" = type { %"class.std::__1::__compressed_pair.162" }
%"class.std::__1::__compressed_pair.162" = type { %"struct.std::__1::__compressed_pair_elem.163" }
%"struct.std::__1::__compressed_pair_elem.163" = type { %"class.v8::internal::ConcurrentAllocator"* }
%"class.v8::internal::ConcurrentAllocator" = type opaque
%"class.v8::internal::Space" = type opaque
%"class.v8::internal::LocalHeap" = type opaque
%"class.v8::internal::ArrayBufferExtension" = type { %"struct.std::__1::atomic.167", %"struct.std::__1::atomic.171", %"class.std::__1::shared_ptr", %"class.v8::internal::ArrayBufferExtension"*, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic.171" = type { %"struct.std::__1::__atomic_base.172" }
%"struct.std::__1::__atomic_base.172" = type { %"struct.std::__1::__cxx_atomic_impl.173" }
%"struct.std::__1::__cxx_atomic_impl.173" = type { %"struct.std::__1::__cxx_atomic_base_impl.174" }
%"struct.std::__1::__cxx_atomic_base_impl.174" = type { i8 }
%"class.std::__1::shared_ptr" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::BackingStore" = type <{ i8*, %"struct.std::__1::atomic", i64, %"union.v8::internal::BackingStore::TypeSpecificData", i16, [6 x i8] }>
%"union.v8::internal::BackingStore::TypeSpecificData" = type { %"class.std::__1::shared_ptr.175" }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"struct.std::__1::atomic.176" = type { %"struct.std::__1::__atomic_base.177" }
%"struct.std::__1::__atomic_base.177" = type { %"struct.std::__1::__cxx_atomic_impl.178" }
%"struct.std::__1::__cxx_atomic_impl.178" = type { %"struct.std::__1::__cxx_atomic_base_impl.179" }
%"struct.std::__1::__cxx_atomic_base_impl.179" = type { i32 }
%"class.v8::internal::AllocationObserver" = type { i32 (...)**, i64 }
%"class.v8::internal::StressScavengeObserver" = type opaque
%"class.std::__1::vector.180" = type { %"class.std::__1::__vector_base.181" }
%"class.std::__1::__vector_base.181" = type { %"struct.v8::internal::Heap::GCCallbackTuple"*, %"struct.v8::internal::Heap::GCCallbackTuple"*, %"class.std::__1::__compressed_pair.182" }
%"struct.v8::internal::Heap::GCCallbackTuple" = type { void (%"class.v8::Isolate"*, i32, i32, i8*)*, i32, i8* }
%"class.v8::Isolate" = type { i8 }
%"class.std::__1::__compressed_pair.182" = type { %"struct.std::__1::__compressed_pair_elem.183" }
%"struct.std::__1::__compressed_pair_elem.183" = type { %"struct.v8::internal::Heap::GCCallbackTuple"* }
%"class.std::__1::unique_ptr.187" = type { %"class.std::__1::__compressed_pair.188" }
%"class.std::__1::__compressed_pair.188" = type { %"struct.std::__1::__compressed_pair_elem.189" }
%"struct.std::__1::__compressed_pair_elem.189" = type { %"class.v8::internal::GCTracer"* }
%"class.v8::internal::GCTracer" = type opaque
%"class.std::__1::unique_ptr.193" = type { %"class.std::__1::__compressed_pair.194" }
%"class.std::__1::__compressed_pair.194" = type { %"struct.std::__1::__compressed_pair_elem.195" }
%"struct.std::__1::__compressed_pair_elem.195" = type { %"class.v8::internal::MarkCompactCollector"* }
%"class.v8::internal::MarkCompactCollector" = type opaque
%"class.v8::internal::MinorMarkCompactCollector" = type opaque
%"class.std::__1::unique_ptr.199" = type { %"class.std::__1::__compressed_pair.200" }
%"class.std::__1::__compressed_pair.200" = type { %"struct.std::__1::__compressed_pair_elem.201" }
%"struct.std::__1::__compressed_pair_elem.201" = type { %"class.v8::internal::ScavengerCollector"* }
%"class.v8::internal::ScavengerCollector" = type opaque
%"class.std::__1::unique_ptr.205" = type { %"class.std::__1::__compressed_pair.206" }
%"class.std::__1::__compressed_pair.206" = type { %"struct.std::__1::__compressed_pair_elem.207" }
%"struct.std::__1::__compressed_pair_elem.207" = type { %"class.v8::internal::ArrayBufferSweeper"* }
%"class.v8::internal::ArrayBufferSweeper" = type opaque
%"class.std::__1::unique_ptr.211" = type { %"class.std::__1::__compressed_pair.212" }
%"class.std::__1::__compressed_pair.212" = type { %"struct.std::__1::__compressed_pair_elem.213" }
%"struct.std::__1::__compressed_pair_elem.213" = type { %"class.v8::internal::MemoryAllocator"* }
%"class.v8::internal::MemoryAllocator" = type opaque
%"class.std::__1::unique_ptr.217" = type { %"class.std::__1::__compressed_pair.218" }
%"class.std::__1::__compressed_pair.218" = type { %"struct.std::__1::__compressed_pair_elem.219" }
%"struct.std::__1::__compressed_pair_elem.219" = type { %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::IncrementalMarking" = type opaque
%"class.std::__1::unique_ptr.223" = type { %"class.std::__1::__compressed_pair.224" }
%"class.std::__1::__compressed_pair.224" = type { %"struct.std::__1::__compressed_pair_elem.225" }
%"struct.std::__1::__compressed_pair_elem.225" = type { %"class.v8::internal::ConcurrentMarking"* }
%"class.v8::internal::ConcurrentMarking" = type opaque
%"class.std::__1::unique_ptr.229" = type { %"class.std::__1::__compressed_pair.230" }
%"class.std::__1::__compressed_pair.230" = type { %"struct.std::__1::__compressed_pair_elem.231" }
%"struct.std::__1::__compressed_pair_elem.231" = type { %"class.v8::internal::GCIdleTimeHandler"* }
%"class.v8::internal::GCIdleTimeHandler" = type opaque
%"class.std::__1::unique_ptr.235" = type { %"class.std::__1::__compressed_pair.236" }
%"class.std::__1::__compressed_pair.236" = type { %"struct.std::__1::__compressed_pair_elem.237" }
%"struct.std::__1::__compressed_pair_elem.237" = type { %"class.v8::internal::MemoryMeasurement"* }
%"class.v8::internal::MemoryMeasurement" = type opaque
%"class.std::__1::unique_ptr.241" = type { %"class.std::__1::__compressed_pair.242" }
%"class.std::__1::__compressed_pair.242" = type { %"struct.std::__1::__compressed_pair_elem.243" }
%"struct.std::__1::__compressed_pair_elem.243" = type { %"class.v8::internal::MemoryReducer"* }
%"class.v8::internal::MemoryReducer" = type opaque
%"class.std::__1::unique_ptr.247" = type { %"class.std::__1::__compressed_pair.248" }
%"class.std::__1::__compressed_pair.248" = type { %"struct.std::__1::__compressed_pair_elem.249" }
%"struct.std::__1::__compressed_pair_elem.249" = type { %"class.v8::internal::ObjectStats"* }
%"class.v8::internal::ObjectStats" = type opaque
%"class.std::__1::unique_ptr.253" = type { %"class.std::__1::__compressed_pair.254" }
%"class.std::__1::__compressed_pair.254" = type { %"struct.std::__1::__compressed_pair_elem.255" }
%"struct.std::__1::__compressed_pair_elem.255" = type { %"class.v8::internal::ScavengeJob"* }
%"class.v8::internal::ScavengeJob" = type opaque
%"class.std::__1::unique_ptr.259" = type { %"class.std::__1::__compressed_pair.260" }
%"class.std::__1::__compressed_pair.260" = type { %"struct.std::__1::__compressed_pair_elem.261" }
%"struct.std::__1::__compressed_pair_elem.261" = type { %"class.v8::internal::AllocationObserver"* }
%"class.std::__1::unique_ptr.265" = type { %"class.std::__1::__compressed_pair.266" }
%"class.std::__1::__compressed_pair.266" = type { %"struct.std::__1::__compressed_pair_elem.267" }
%"struct.std::__1::__compressed_pair_elem.267" = type { %"class.v8::internal::LocalEmbedderHeapTracer"* }
%"class.v8::internal::LocalEmbedderHeapTracer" = type opaque
%"class.std::__1::unique_ptr.271" = type { %"class.std::__1::__compressed_pair.272" }
%"class.std::__1::__compressed_pair.272" = type { %"struct.std::__1::__compressed_pair_elem.273" }
%"struct.std::__1::__compressed_pair_elem.273" = type { %"class.v8::internal::MarkingBarrier"* }
%"class.v8::internal::MarkingBarrier" = type opaque
%"class.std::__1::shared_ptr.277" = type { %"class.v8::internal::CodeRange"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::CodeRange" = type opaque
%"class.v8::CppHeap" = type opaque
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"class.v8::internal::StrongRootsEntry" = type { %"class.v8::internal::FullObjectSlot", %"class.v8::internal::FullObjectSlot", %"class.v8::internal::StrongRootsEntry"*, %"class.v8::internal::StrongRootsEntry"* }
%"class.v8::internal::FullObjectSlot" = type { %"class.v8::internal::SlotBase" }
%"class.v8::internal::SlotBase" = type { i64 }
%"class.std::__1::unordered_map.278" = type { %"class.std::__1::__hash_table.279" }
%"class.std::__1::__hash_table.279" = type <{ %"class.std::__1::unique_ptr.280", %"class.std::__1::__compressed_pair.290", %"class.std::__1::__compressed_pair.295", %"class.std::__1::__compressed_pair.298", [4 x i8] }>
%"class.std::__1::unique_ptr.280" = type { %"class.std::__1::__compressed_pair.281" }
%"class.std::__1::__compressed_pair.281" = type { %"struct.std::__1::__compressed_pair_elem.282", %"struct.std::__1::__compressed_pair_elem.284" }
%"struct.std::__1::__compressed_pair_elem.282" = type { %"struct.std::__1::__hash_node_base.283"** }
%"struct.std::__1::__hash_node_base.283" = type { %"struct.std::__1::__hash_node_base.283"* }
%"struct.std::__1::__compressed_pair_elem.284" = type { %"class.std::__1::__bucket_list_deallocator.285" }
%"class.std::__1::__bucket_list_deallocator.285" = type { %"class.std::__1::__compressed_pair.286" }
%"class.std::__1::__compressed_pair.286" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::__compressed_pair.290" = type { %"struct.std::__1::__compressed_pair_elem.291" }
%"struct.std::__1::__compressed_pair_elem.291" = type { %"struct.std::__1::__hash_node_base.283" }
%"class.std::__1::__compressed_pair.295" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::__compressed_pair.298" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.std::__1::unique_ptr.304" = type { %"class.std::__1::__compressed_pair.305" }
%"class.std::__1::__compressed_pair.305" = type { %"struct.std::__1::__compressed_pair_elem.306" }
%"struct.std::__1::__compressed_pair_elem.306" = type { %"class.v8::internal::GlobalHandleVector"* }
%"class.v8::internal::GlobalHandleVector" = type opaque
%"class.std::__1::unique_ptr.310" = type { %"class.std::__1::__compressed_pair.311" }
%"class.std::__1::__compressed_pair.311" = type { %"struct.std::__1::__compressed_pair_elem.312" }
%"struct.std::__1::__compressed_pair_elem.312" = type { %"class.v8::internal::GlobalSafepoint"* }
%"class.v8::internal::GlobalSafepoint" = type opaque
%"class.v8::internal::Heap::ExternalStringTable" = type { %"class.v8::internal::Heap"*, %"class.std::__1::vector.316", %"class.std::__1::vector.316" }
%"class.std::__1::unique_ptr.323" = type { %"class.std::__1::__compressed_pair.324" }
%"class.std::__1::__compressed_pair.324" = type { %"struct.std::__1::__compressed_pair_elem.325" }
%"struct.std::__1::__compressed_pair_elem.325" = type { %"class.v8::internal::CollectionBarrier"* }
%"class.v8::internal::CollectionBarrier" = type opaque
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.329" }
%"class.std::__1::__hash_table.329" = type <{ %"class.std::__1::unique_ptr.330", %"class.std::__1::__compressed_pair.340", %"class.std::__1::__compressed_pair.345", %"class.std::__1::__compressed_pair.347", [4 x i8] }>
%"class.std::__1::unique_ptr.330" = type { %"class.std::__1::__compressed_pair.331" }
%"class.std::__1::__compressed_pair.331" = type { %"struct.std::__1::__compressed_pair_elem.332", %"struct.std::__1::__compressed_pair_elem.334" }
%"struct.std::__1::__compressed_pair_elem.332" = type { %"struct.std::__1::__hash_node_base.333"** }
%"struct.std::__1::__hash_node_base.333" = type { %"struct.std::__1::__hash_node_base.333"* }
%"struct.std::__1::__compressed_pair_elem.334" = type { %"class.std::__1::__bucket_list_deallocator.335" }
%"class.std::__1::__bucket_list_deallocator.335" = type { %"class.std::__1::__compressed_pair.336" }
%"class.std::__1::__compressed_pair.336" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::__compressed_pair.340" = type { %"struct.std::__1::__compressed_pair_elem.341" }
%"struct.std::__1::__compressed_pair_elem.341" = type { %"struct.std::__1::__hash_node_base.333" }
%"class.std::__1::__compressed_pair.345" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::__compressed_pair.347" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.std::__1::unordered_map.378" = type { %"class.std::__1::__hash_table.379" }
%"class.std::__1::__hash_table.379" = type <{ %"class.std::__1::unique_ptr.380", %"class.std::__1::__compressed_pair.390", %"class.std::__1::__compressed_pair.395", %"class.std::__1::__compressed_pair.398", [4 x i8] }>
%"class.std::__1::unique_ptr.380" = type { %"class.std::__1::__compressed_pair.381" }
%"class.std::__1::__compressed_pair.381" = type { %"struct.std::__1::__compressed_pair_elem.382", %"struct.std::__1::__compressed_pair_elem.384" }
%"struct.std::__1::__compressed_pair_elem.382" = type { %"struct.std::__1::__hash_node_base.383"** }
%"struct.std::__1::__hash_node_base.383" = type { %"struct.std::__1::__hash_node_base.383"* }
%"struct.std::__1::__compressed_pair_elem.384" = type { %"class.std::__1::__bucket_list_deallocator.385" }
%"class.std::__1::__bucket_list_deallocator.385" = type { %"class.std::__1::__compressed_pair.386" }
%"class.std::__1::__compressed_pair.386" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::__compressed_pair.390" = type { %"struct.std::__1::__compressed_pair_elem.391" }
%"struct.std::__1::__compressed_pair_elem.391" = type { %"struct.std::__1::__hash_node_base.383" }
%"class.std::__1::__compressed_pair.395" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::__compressed_pair.398" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.std::__1::unordered_map.352" = type { %"class.std::__1::__hash_table.353" }
%"class.std::__1::__hash_table.353" = type <{ %"class.std::__1::unique_ptr.354", %"class.std::__1::__compressed_pair.364", %"class.std::__1::__compressed_pair.369", %"class.std::__1::__compressed_pair.372", [4 x i8] }>
%"class.std::__1::unique_ptr.354" = type { %"class.std::__1::__compressed_pair.355" }
%"class.std::__1::__compressed_pair.355" = type { %"struct.std::__1::__compressed_pair_elem.356", %"struct.std::__1::__compressed_pair_elem.358" }
%"struct.std::__1::__compressed_pair_elem.356" = type { %"struct.std::__1::__hash_node_base.357"** }
%"struct.std::__1::__hash_node_base.357" = type { %"struct.std::__1::__hash_node_base.357"* }
%"struct.std::__1::__compressed_pair_elem.358" = type { %"class.std::__1::__bucket_list_deallocator.359" }
%"class.std::__1::__bucket_list_deallocator.359" = type { %"class.std::__1::__compressed_pair.360" }
%"class.std::__1::__compressed_pair.360" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::__compressed_pair.364" = type { %"struct.std::__1::__compressed_pair_elem.365" }
%"struct.std::__1::__compressed_pair_elem.365" = type { %"struct.std::__1::__hash_node_base.357" }
%"class.std::__1::__compressed_pair.369" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::__compressed_pair.372" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.std::__1::unordered_map.402" = type { %"class.std::__1::__hash_table.403" }
%"class.std::__1::__hash_table.403" = type <{ %"class.std::__1::unique_ptr.404", %"class.std::__1::__compressed_pair.414", %"class.std::__1::__compressed_pair.419", %"class.std::__1::__compressed_pair.424", [4 x i8] }>
%"class.std::__1::unique_ptr.404" = type { %"class.std::__1::__compressed_pair.405" }
%"class.std::__1::__compressed_pair.405" = type { %"struct.std::__1::__compressed_pair_elem.406", %"struct.std::__1::__compressed_pair_elem.408" }
%"struct.std::__1::__compressed_pair_elem.406" = type { %"struct.std::__1::__hash_node_base.407"** }
%"struct.std::__1::__hash_node_base.407" = type { %"struct.std::__1::__hash_node_base.407"* }
%"struct.std::__1::__compressed_pair_elem.408" = type { %"class.std::__1::__bucket_list_deallocator.409" }
%"class.std::__1::__bucket_list_deallocator.409" = type { %"class.std::__1::__compressed_pair.410" }
%"class.std::__1::__compressed_pair.410" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::__compressed_pair.414" = type { %"struct.std::__1::__compressed_pair_elem.415" }
%"struct.std::__1::__compressed_pair_elem.415" = type { %"struct.std::__1::__hash_node_base.407" }
%"class.std::__1::__compressed_pair.419" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::__compressed_pair.424" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.std::__1::vector.428" = type { %"class.std::__1::__vector_base.429" }
%"class.std::__1::__vector_base.429" = type { %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.std::__1::__compressed_pair.430" }
%"class.v8::internal::HeapObjectAllocationTracker" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.430" = type { %"struct.std::__1::__compressed_pair_elem.431" }
%"struct.std::__1::__compressed_pair_elem.431" = type { %"class.v8::internal::HeapObjectAllocationTracker"** }
%"class.std::__1::unique_ptr.435" = type { %"class.std::__1::__compressed_pair.436" }
%"class.std::__1::__compressed_pair.436" = type { %"struct.std::__1::__compressed_pair_elem.437" }
%"struct.std::__1::__compressed_pair_elem.437" = type { %"class.v8::internal::third_party_heap::Heap"* }
%"class.v8::internal::third_party_heap::Heap" = type opaque
%"class.v8::internal::ReadOnlyHeap" = type { i32 (...)**, i8, %"class.v8::internal::ReadOnlySpace"*, %"class.std::__1::vector.316" }
%"class.std::__1::shared_ptr.441" = type { %"class.v8::internal::ReadOnlyArtifacts"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::ReadOnlyArtifacts" = type opaque
%"class.std::__1::unique_ptr.442" = type { %"class.std::__1::__compressed_pair.443" }
%"class.std::__1::__compressed_pair.443" = type { %"struct.std::__1::__compressed_pair_elem.444" }
%"struct.std::__1::__compressed_pair_elem.444" = type { %"class.v8::internal::StringTable"* }
%"class.v8::internal::StringTable" = type opaque
%"class.v8::internal::Isolate::EntryStackItem" = type { i32, %"class.v8::internal::Isolate::PerIsolateThreadData"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate::EntryStackItem"* }
%"class.v8::internal::Isolate::PerIsolateThreadData" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::ThreadId", i64, %"class.v8::internal::ThreadState"* }
%"class.v8::internal::ThreadState" = type opaque
%"class.v8::internal::StringStream" = type opaque
%"class.v8::internal::Bootstrapper" = type opaque
%"class.v8::internal::RuntimeProfiler" = type opaque
%"class.v8::internal::CompilationCache" = type opaque
%"class.std::__1::shared_ptr.448" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::Counters" = type opaque
%"class.v8::base::RecursiveMutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::base::SharedMutex" = type { %union.pthread_rwlock_t }
%union.pthread_rwlock_t = type { %struct.__pthread_rwlock_arch_t }
%struct.__pthread_rwlock_arch_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%"class.v8::internal::Logger" = type opaque
%"class.v8::internal::StubCache" = type opaque
%"class.v8::internal::Deoptimizer" = type opaque
%"class.v8::internal::MaterializedObjectStore" = type opaque
%"class.v8::internal::DescriptorLookupCache" = type opaque
%"struct.v8::internal::HandleScopeData" = type { i64*, i64*, i32, i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::CanonicalHandleScope" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::OptimizedCompilationInfo"*, %"class.v8::internal::Zone"*, %"class.v8::internal::RootIndexMap"*, %"class.std::__1::unique_ptr.449", i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::OptimizedCompilationInfo" = type opaque
%"class.v8::internal::RootIndexMap" = type opaque
%"class.std::__1::unique_ptr.449" = type { %"class.std::__1::__compressed_pair.450" }
%"class.std::__1::__compressed_pair.450" = type { %"struct.std::__1::__compressed_pair_elem.451" }
%"struct.std::__1::__compressed_pair_elem.451" = type { %"class.v8::internal::IdentityMap"* }
%"class.v8::internal::IdentityMap" = type opaque
%"class.v8::internal::HandleScopeImplementer" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::DetachableVector", %"class.v8::internal::DetachableVector.455", %"class.v8::internal::DetachableVector.456", %"class.v8::internal::DetachableVector.455", i64*, i64*, %"struct.v8::internal::HandleScopeData" }
%"class.v8::internal::DetachableVector" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVectorBase" = type { i8*, i64, i64 }
%"class.v8::internal::DetachableVector.456" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVector.455" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::UnicodeCache" = type opaque
%"class.v8::internal::InnerPointerToCodeCache" = type opaque
%"class.v8::internal::GlobalHandles" = type opaque
%"class.v8::internal::EternalHandles" = type opaque
%"class.v8::internal::ThreadManager" = type opaque
%"class.v8::bigint::Processor" = type opaque
%"class.v8::internal::RuntimeState" = type { %"class.std::__1::unique_ptr.457" }
%"class.std::__1::unique_ptr.457" = type { %"class.std::__1::__compressed_pair.458" }
%"class.std::__1::__compressed_pair.458" = type { %"struct.std::__1::__compressed_pair_elem.459" }
%"struct.std::__1::__compressed_pair_elem.459" = type { %"struct.v8::internal::Runtime::Function"* }
%"struct.v8::internal::Runtime::Function" = type { i32, i32, i8*, i64, i8, i8 }
%"class.v8::internal::Builtins" = type { %"class.v8::internal::Isolate"*, i8, i32 }
%"class.v8::internal::SetupIsolateDelegate" = type opaque
%"class.v8::internal::RegExpStack" = type opaque
%"class.std::__1::vector.463" = type { %"class.std::__1::__vector_base.464" }
%"class.std::__1::__vector_base.464" = type { i32*, i32*, %"class.std::__1::__compressed_pair.465" }
%"class.std::__1::__compressed_pair.465" = type { %"struct.std::__1::__compressed_pair_elem.466" }
%"struct.std::__1::__compressed_pair_elem.466" = type { i32* }
%"class.v8::internal::DateCache" = type opaque
%"class.v8::base::RandomNumberGenerator" = type opaque
%"struct.std::__1::atomic.470" = type { %"struct.std::__1::__atomic_base.471" }
%"struct.std::__1::__atomic_base.471" = type { %"struct.std::__1::__cxx_atomic_impl.472" }
%"struct.std::__1::__cxx_atomic_impl.472" = type { %"struct.std::__1::__cxx_atomic_base_impl.473" }
%"struct.std::__1::__cxx_atomic_base_impl.473" = type { i32 }
%"class.v8::Promise" = type { i8 }
%"struct.std::__1::atomic.480" = type { %"struct.std::__1::__atomic_base.481" }
%"struct.std::__1::__atomic_base.481" = type { %"struct.std::__1::__cxx_atomic_impl.482" }
%"struct.std::__1::__cxx_atomic_impl.482" = type { %"struct.std::__1::__cxx_atomic_base_impl.483" }
%"struct.std::__1::__cxx_atomic_base_impl.483" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.485" }
%"class.std::__1::__compressed_pair.485" = type { %"struct.std::__1::__compressed_pair_elem.486" }
%"struct.std::__1::__compressed_pair_elem.486" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unordered_map.490" = type { %"class.std::__1::__hash_table.491" }
%"class.std::__1::__hash_table.491" = type <{ %"class.std::__1::unique_ptr.492", %"class.std::__1::__compressed_pair.502", %"class.std::__1::__compressed_pair.507", %"class.std::__1::__compressed_pair.510", [4 x i8] }>
%"class.std::__1::unique_ptr.492" = type { %"class.std::__1::__compressed_pair.493" }
%"class.std::__1::__compressed_pair.493" = type { %"struct.std::__1::__compressed_pair_elem.494", %"struct.std::__1::__compressed_pair_elem.496" }
%"struct.std::__1::__compressed_pair_elem.494" = type { %"struct.std::__1::__hash_node_base.495"** }
%"struct.std::__1::__hash_node_base.495" = type { %"struct.std::__1::__hash_node_base.495"* }
%"struct.std::__1::__compressed_pair_elem.496" = type { %"class.std::__1::__bucket_list_deallocator.497" }
%"class.std::__1::__bucket_list_deallocator.497" = type { %"class.std::__1::__compressed_pair.498" }
%"class.std::__1::__compressed_pair.498" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::__compressed_pair.502" = type { %"struct.std::__1::__compressed_pair_elem.503" }
%"struct.std::__1::__compressed_pair_elem.503" = type { %"struct.std::__1::__hash_node_base.495" }
%"class.std::__1::__compressed_pair.507" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::__compressed_pair.510" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::atomic.167" = type { %"struct.std::__1::__atomic_base.168" }
%"struct.std::__1::__atomic_base.168" = type { %"struct.std::__1::__cxx_atomic_impl.169" }
%"struct.std::__1::__cxx_atomic_impl.169" = type { %"struct.std::__1::__cxx_atomic_base_impl.170" }
%"struct.std::__1::__cxx_atomic_base_impl.170" = type { i8 }
%"class.v8::internal::Debug" = type { %"class.v8::debug::DebugDelegate"*, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"class.v8::internal::DebugInfoListNode"*, %"class.std::__1::unique_ptr.516", %"class.v8::internal::Handle.522", %"class.v8::internal::DebugFeatureTracker", %"class.v8::internal::Debug::ThreadLocal", %"class.v8::internal::Handle.523", %"class.v8::internal::Isolate"* }
%"class.v8::debug::DebugDelegate" = type { i32 (...)** }
%"class.v8::internal::DebugInfoListNode" = type { i64*, %"class.v8::internal::DebugInfoListNode"* }
%"class.std::__1::unique_ptr.516" = type { %"class.std::__1::__compressed_pair.517" }
%"class.std::__1::__compressed_pair.517" = type { %"struct.std::__1::__compressed_pair_elem.518" }
%"struct.std::__1::__compressed_pair_elem.518" = type { %"class.v8::internal::Debug::TemporaryObjectsTracker"* }
%"class.v8::internal::Debug::TemporaryObjectsTracker" = type opaque
%"class.v8::internal::Handle.522" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::DebugFeatureTracker" = type <{ %"class.v8::internal::Isolate"*, i32, [4 x i8] }>
%"class.v8::internal::Debug::ThreadLocal" = type <{ i64, i32, i8, [3 x i8], %"class.v8::internal::Object", i8, [3 x i8], i32, i32, i32, %"class.v8::internal::Object", %"class.v8::internal::Object", i32, i8, [3 x i8] }>
%"class.v8::internal::Handle.523" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HeapProfiler" = type opaque
%"class.std::__1::unique_ptr.524" = type { %"class.std::__1::__compressed_pair.525" }
%"class.std::__1::__compressed_pair.525" = type { %"struct.std::__1::__compressed_pair_elem.526" }
%"struct.std::__1::__compressed_pair_elem.526" = type { %"class.v8::internal::CodeEventDispatcher"* }
%"class.v8::internal::CodeEventDispatcher" = type opaque
%"class.v8::internal::AstStringConstants" = type opaque
%"class.v8::internal::interpreter::Interpreter" = type opaque
%"class.v8::internal::compiler::PerIsolateCompilerCache" = type opaque
%"class.v8::internal::CompilerDispatcher" = type opaque
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.536" }
%"struct.std::__1::__split_buffer" = type { %"struct.std::__1::pair.530"**, %"struct.std::__1::pair.530"**, %"struct.std::__1::pair.530"**, %"class.std::__1::__compressed_pair.531" }
%"struct.std::__1::pair.530" = type opaque
%"class.std::__1::__compressed_pair.531" = type { %"struct.std::__1::__compressed_pair_elem.532" }
%"struct.std::__1::__compressed_pair_elem.532" = type { %"struct.std::__1::pair.530"** }
%"class.std::__1::__compressed_pair.536" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::String" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::FunctionCallbackInfo" = type <{ i64*, i64*, i32, [4 x i8] }>
%"class.v8::internal::Relocatable" = type { i32 (...)**, %"class.v8::internal::Isolate"*, %"class.v8::internal::Relocatable"* }
%"class.std::__1::vector.541" = type opaque
%"class.v8::internal::Object" = type { %"class.v8::internal::TaggedImpl" }
%"class.v8::internal::TaggedImpl" = type { i64 }
%"class.v8::internal::AddressToIndexHashMap" = type opaque
%"class.v8::internal::HeapObjectToIndexHashMap" = type opaque
%"class.v8::internal::MicrotaskQueue" = type opaque
%"class.v8::internal::CompilationStatistics" = type opaque
%"class.v8::internal::CodeTracer" = type opaque
%"class.v8::PromiseRejectMessage" = type { %"class.v8::Local.475", i32, %"class.v8::Local.114" }
%"class.v8::Local.475" = type { %"class.v8::Promise"* }
%"class.v8::Local.114" = type { %"class.v8::Value"* }
%"class.v8::StartupData" = type { i8*, i32 }
%"class.v8_inspector::V8Inspector" = type opaque
%"class.v8::internal::compiler::NodeObserver" = type opaque
%"class.v8::internal::OptimizingCompileDispatcher" = type opaque
%"class.std::__1::unique_ptr.542" = type { %"class.std::__1::__compressed_pair.543" }
%"class.std::__1::__compressed_pair.543" = type { %"struct.std::__1::__compressed_pair_elem.544" }
%"struct.std::__1::__compressed_pair_elem.544" = type { %"class.v8::internal::PersistentHandlesList"* }
%"class.v8::internal::PersistentHandlesList" = type opaque
%"class.std::__1::vector.548" = type { %"class.std::__1::__vector_base.549" }
%"class.std::__1::__vector_base.549" = type { void (%"class.v8::Isolate"*)**, void (%"class.v8::Isolate"*)**, %"class.std::__1::__compressed_pair.550" }
%"class.std::__1::__compressed_pair.550" = type { %"struct.std::__1::__compressed_pair_elem.551" }
%"struct.std::__1::__compressed_pair_elem.551" = type { void (%"class.v8::Isolate"*)** }
%"class.std::__1::shared_ptr.555" = type { %"class.v8::internal::metrics::Recorder"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::metrics::Recorder" = type opaque
%"class.std::__1::unordered_map.556" = type { %"class.std::__1::__hash_table.557" }
%"class.std::__1::__hash_table.557" = type <{ %"class.std::__1::unique_ptr.558", %"class.std::__1::__compressed_pair.568", %"class.std::__1::__compressed_pair.573", %"class.std::__1::__compressed_pair.578", [4 x i8] }>
%"class.std::__1::unique_ptr.558" = type { %"class.std::__1::__compressed_pair.559" }
%"class.std::__1::__compressed_pair.559" = type { %"struct.std::__1::__compressed_pair_elem.560", %"struct.std::__1::__compressed_pair_elem.562" }
%"struct.std::__1::__compressed_pair_elem.560" = type { %"struct.std::__1::__hash_node_base.561"** }
%"struct.std::__1::__hash_node_base.561" = type { %"struct.std::__1::__hash_node_base.561"* }
%"struct.std::__1::__compressed_pair_elem.562" = type { %"class.std::__1::__bucket_list_deallocator.563" }
%"class.std::__1::__bucket_list_deallocator.563" = type { %"class.std::__1::__compressed_pair.564" }
%"class.std::__1::__compressed_pair.564" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::__compressed_pair.568" = type { %"struct.std::__1::__compressed_pair_elem.569" }
%"struct.std::__1::__compressed_pair_elem.569" = type { %"struct.std::__1::__hash_node_base.561" }
%"class.std::__1::__compressed_pair.573" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::__compressed_pair.578" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.v8::metrics::LongTaskStats" = type { i64, i64, i64 }
%"class.std::__1::vector.316" = type { %"class.std::__1::__vector_base.317" }
%"class.std::__1::__vector_base.317" = type { %"class.v8::internal::Object"*, %"class.v8::internal::Object"*, %"class.std::__1::__compressed_pair.318" }
%"class.std::__1::__compressed_pair.318" = type { %"struct.std::__1::__compressed_pair_elem.319" }
%"struct.std::__1::__compressed_pair_elem.319" = type { %"class.v8::internal::Object"* }
%"class.v8::internal::BuiltinsConstantsTableBuilder" = type opaque
%"class.v8::ArrayBuffer::Allocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.175" = type { %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::FutexWaitListNode" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::shared_ptr.584", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::base::ConditionVariable", %"class.v8::internal::FutexWaitListNode"*, %"class.v8::internal::FutexWaitListNode"*, %"class.std::__1::weak_ptr", i64, i8*, i8, i8, %"class.v8::Global", %"class.v8::Global.613", %"class.v8::base::TimeTicks", i64 }
%"class.std::__1::shared_ptr.584" = type { %"class.v8::TaskRunner"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::TaskRunner" = type { i32 (...)** }
%"class.v8::base::ConditionVariable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.609, %union.anon.611, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.609 = type { i64 }
%union.anon.611 = type { i64 }
%"class.std::__1::weak_ptr" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::Global" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Promise"* }
%"class.v8::Global.613" = type { %"class.v8::PersistentBase.614" }
%"class.v8::PersistentBase.614" = type { %"class.v8::Context"* }
%"class.v8::base::TimeTicks" = type { %"class.v8::base::time_internal::TimeBase" }
%"class.v8::base::time_internal::TimeBase" = type { i64 }
%"class.v8::internal::CancelableTaskManager" = type <{ i64, %"class.std::__1::unordered_map.585", %"class.v8::base::ConditionVariable", %"class.v8::base::Mutex", i8, [7 x i8] }>
%"class.std::__1::unordered_map.585" = type { %"class.std::__1::__hash_table.586" }
%"class.std::__1::__hash_table.586" = type <{ %"class.std::__1::unique_ptr.587", %"class.std::__1::__compressed_pair.597", %"class.std::__1::__compressed_pair.602", %"class.std::__1::__compressed_pair.605", [4 x i8] }>
%"class.std::__1::unique_ptr.587" = type { %"class.std::__1::__compressed_pair.588" }
%"class.std::__1::__compressed_pair.588" = type { %"struct.std::__1::__compressed_pair_elem.589", %"struct.std::__1::__compressed_pair_elem.591" }
%"struct.std::__1::__compressed_pair_elem.589" = type { %"struct.std::__1::__hash_node_base.590"** }
%"struct.std::__1::__hash_node_base.590" = type { %"struct.std::__1::__hash_node_base.590"* }
%"struct.std::__1::__compressed_pair_elem.591" = type { %"class.std::__1::__bucket_list_deallocator.592" }
%"class.std::__1::__bucket_list_deallocator.592" = type { %"class.std::__1::__compressed_pair.593" }
%"class.std::__1::__compressed_pair.593" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::__compressed_pair.597" = type { %"struct.std::__1::__compressed_pair_elem.598" }
%"struct.std::__1::__compressed_pair_elem.598" = type { %"struct.std::__1::__hash_node_base.590" }
%"class.std::__1::__compressed_pair.602" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::__compressed_pair.605" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.v8::debug::ConsoleDelegate" = type { i32 (...)** }
%"class.v8::debug::AsyncEventDelegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr.615" = type { %"class.std::__1::__compressed_pair.616" }
%"class.std::__1::__compressed_pair.616" = type { %"struct.std::__1::__compressed_pair_elem.617" }
%"struct.std::__1::__compressed_pair_elem.617" = type { %"class.v8::internal::LocalIsolate"* }
%"class.v8::internal::LocalIsolate" = type opaque
%"struct.v8::internal::ManagedPtrDestructor" = type opaque
%"class.v8::internal::wasm::WasmEngine" = type opaque
%"class.std::__1::unique_ptr.621" = type { %"class.std::__1::__compressed_pair.622" }
%"class.std::__1::__compressed_pair.622" = type { %"struct.std::__1::__compressed_pair_elem.623" }
%"struct.std::__1::__compressed_pair_elem.623" = type { %"class.v8::internal::TracingCpuProfilerImpl"* }
%"class.v8::internal::TracingCpuProfilerImpl" = type opaque
%"class.v8::internal::EmbeddedFileWriterInterface" = type opaque
%"class.v8::Context::BackupIncumbentScope" = type { %"class.v8::Local.476", i64, %"class.v8::Context::BackupIncumbentScope"* }
%"class.v8::Local.476" = type { %"class.v8::Context"* }
%"class.v8::internal::Isolate::ThreadDataTable" = type { %"class.std::__1::unordered_map.629" }
%"class.std::__1::unordered_map.629" = type { %"class.std::__1::__hash_table.630" }
%"class.std::__1::__hash_table.630" = type <{ %"class.std::__1::unique_ptr.631", %"class.std::__1::__compressed_pair.641", %"class.std::__1::__compressed_pair.646", %"class.std::__1::__compressed_pair.649", [4 x i8] }>
%"class.std::__1::unique_ptr.631" = type { %"class.std::__1::__compressed_pair.632" }
%"class.std::__1::__compressed_pair.632" = type { %"struct.std::__1::__compressed_pair_elem.633", %"struct.std::__1::__compressed_pair_elem.635" }
%"struct.std::__1::__compressed_pair_elem.633" = type { %"struct.std::__1::__hash_node_base.634"** }
%"struct.std::__1::__hash_node_base.634" = type { %"struct.std::__1::__hash_node_base.634"* }
%"struct.std::__1::__compressed_pair_elem.635" = type { %"class.std::__1::__bucket_list_deallocator.636" }
%"class.std::__1::__bucket_list_deallocator.636" = type { %"class.std::__1::__compressed_pair.637" }
%"class.std::__1::__compressed_pair.637" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::__compressed_pair.641" = type { %"struct.std::__1::__compressed_pair_elem.642" }
%"struct.std::__1::__compressed_pair_elem.642" = type { %"struct.std::__1::__hash_node_base.634" }
%"class.std::__1::__compressed_pair.646" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::__compressed_pair.649" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%"struct.std::__1::atomic.655" = type { %"struct.std::__1::__atomic_base.656" }
%"struct.std::__1::__atomic_base.656" = type { %"struct.std::__1::__cxx_atomic_impl.657" }
%"struct.std::__1::__cxx_atomic_impl.657" = type { %"struct.std::__1::__cxx_atomic_base_impl.658" }
%"struct.std::__1::__cxx_atomic_base_impl.658" = type { %"class.std::__1::vector.659"* }
%"class.std::__1::vector.659" = type { %"class.std::__1::__vector_base.660" }
%"class.std::__1::__vector_base.660" = type { %"struct.v8::MemoryRange"*, %"struct.v8::MemoryRange"*, %"class.std::__1::__compressed_pair.661" }
%"struct.v8::MemoryRange" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.661" = type { %"struct.std::__1::__compressed_pair_elem.662" }
%"struct.std::__1::__compressed_pair_elem.662" = type { %"struct.v8::MemoryRange"* }
%"class.v8::internal::compiler::JSOperatorBuilder" = type { %"struct.v8::internal::compiler::JSOperatorGlobalCache"*, %"class.v8::internal::Zone"* }
%"struct.v8::internal::compiler::JSOperatorGlobalCache" = type opaque
%"class.v8::internal::compiler::SimplifiedOperatorBuilder" = type opaque
%"class.v8::internal::compiler::StateValuesAccess::iterator" = type { [8 x %"class.v8::internal::compiler::SparseInputMask::InputIterator"], i32, [4 x i8] }
%"class.v8::internal::compiler::SparseInputMask::InputIterator" = type <{ i32, [4 x i8], %"class.v8::internal::compiler::Node"*, i32, [4 x i8] }>
%"class.v8::internal::compiler::SparseInputMask" = type { i32 }
%"struct.v8::internal::compiler::StateValuesCache::StateValuesKey" = type { %"struct.v8::internal::compiler::StateValuesCache::NodeKey", i64, %"class.v8::internal::compiler::SparseInputMask", %"class.v8::internal::compiler::Node"** }
%"struct.v8::internal::compiler::StateValuesCache::NodeKey" = type { %"class.v8::internal::compiler::Node"* }
%"struct.v8::internal::compiler::Node::OutOfLineInputs" = type { %"class.v8::internal::compiler::Node"*, i32, i32 }
%class.anon.684 = type { i8** }
%class.anon = type { i8 }
%"class.v8::internal::BitVector" = type { i32, i32, %"union.v8::internal::BitVector::DataStorage" }
%"union.v8::internal::BitVector::DataStorage" = type { i64* }
%"class.v8::internal::ZoneVector.673" = type { %"class.std::__1::vector.674" }
%"class.std::__1::vector.674" = type { %"class.std::__1::__vector_base.675" }
%"class.std::__1::__vector_base.675" = type { %"class.v8::internal::MachineType"*, %"class.v8::internal::MachineType"*, %"class.std::__1::__compressed_pair.676" }
%"class.v8::internal::MachineType" = type { i8, i8 }
%"class.std::__1::__compressed_pair.676" = type { %"struct.std::__1::__compressed_pair_elem.677", %"struct.std::__1::__compressed_pair_elem.678" }
%"struct.std::__1::__compressed_pair_elem.677" = type { %"class.v8::internal::MachineType"* }
%"struct.std::__1::__compressed_pair_elem.678" = type { %"class.v8::internal::ZoneAllocator.679" }
%"class.v8::internal::ZoneAllocator.679" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::compiler::StateValuesAccess" = type { %"class.v8::internal::compiler::Node"* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorINS_5arrayIPN2v88internal8compiler4NodeELm8EEENS3_13ZoneAllocatorIS7_EEE8__appendEm = comdat any

$_ZN2v84base19TemplateHashMapImplIPvS2_NS0_26HashEqualityThenKeyMatcherIS2_PFbS2_S2_EEENS_8internal20ZoneAllocationPolicyEE14LookupOrInsertIS2_ZNS9_14LookupOrInsertIZNS9_14LookupOrInsertERKS2_jEUlvE_EEPNS0_20TemplateHashMapEntryIS2_S2_EESD_jRKT_EUlvE_SE_EESH_SK_jRKT0_RKT1_ = comdat any

$_ZN2v84base19TemplateHashMapImplIPvS2_NS0_26HashEqualityThenKeyMatcherIS2_PFbS2_S2_EEENS_8internal20ZoneAllocationPolicyEE6ResizeEv = comdat any

@.str = private unnamed_addr constant [18 x i8] c"Check failed: %s.\00", align 1
@.str.1 = private unnamed_addr constant [33 x i8] c"kMaxInlineDepth > current_depth_\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"other.done()\00", align 1
@.str.3 = private unnamed_addr constant [35 x i8] c"Out of memory: HashMap::Initialize\00", align 1

@_ZN2v88internal8compiler16StateValuesCacheC1EPNS1_7JSGraphE = hidden unnamed_addr alias void (%"class.v8::internal::compiler::StateValuesCache"*, %"class.v8::internal::compiler::JSGraph"*), void (%"class.v8::internal::compiler::StateValuesCache"*, %"class.v8::internal::compiler::JSGraph"*)* @_ZN2v88internal8compiler16StateValuesCacheC2EPNS1_7JSGraphE
@_ZN2v88internal8compiler17StateValuesAccess8iteratorC1EPNS1_4NodeE = hidden unnamed_addr alias void (%"class.v8::internal::compiler::StateValuesAccess::iterator"*, %"class.v8::internal::compiler::Node"*), void (%"class.v8::internal::compiler::StateValuesAccess::iterator"*, %"class.v8::internal::compiler::Node"*)* @_ZN2v88internal8compiler17StateValuesAccess8iteratorC2EPNS1_4NodeE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler16StateValuesCacheC2EPNS1_7JSGraphE(%"class.v8::internal::compiler::StateValuesCache"* nocapture, %"class.v8::internal::compiler::JSGraph"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesCache", %"class.v8::internal::compiler::StateValuesCache"* %0, i64 0, i32 0
  store %"class.v8::internal::compiler::JSGraph"* %1, %"class.v8::internal::compiler::JSGraph"** %3, align 8
  %4 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesCache", %"class.v8::internal::compiler::StateValuesCache"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %1, i64 0, i32 0, i32 0
  %6 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::compiler::Graph", %"class.v8::internal::compiler::Graph"* %6, i64 0, i32 0
  %8 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %7, align 8
  %9 = ptrtoint %"class.v8::internal::Zone"* %8 to i64
  %10 = bitcast %"class.v8::base::CustomMatcherTemplateHashMapImpl"* %4 to i64*
  store i64 ptrtoint (i1 (i8*, i8*)* @_ZN2v88internal8compiler16StateValuesCache12AreKeysEqualEPvS3_ to i64), i64* %10, align 8
  %11 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesCache", %"class.v8::internal::compiler::StateValuesCache"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %12 = bitcast %"class.v8::internal::ZoneAllocationPolicy"* %11 to i64*
  store i64 %9, i64* %12, align 8
  %13 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesCache", %"class.v8::internal::compiler::StateValuesCache"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %14 = bitcast %"struct.v8::base::TemplateHashMapEntry"** %13 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 16, i1 false) #6
  %15 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %8, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %8, i64 0, i32 3
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %18, %16
  %20 = icmp ult i64 %19, 192
  br i1 %20, label %21, label %23, !prof !2

21:                                               ; preds = %2
  %22 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %8, i64 192) #6
  br label %25

23:                                               ; preds = %2
  %24 = add i64 %16, 192
  store i64 %24, i64* %15, align 8
  br label %25

25:                                               ; preds = %23, %21
  %26 = phi i64 [ %22, %21 ], [ %16, %23 ]
  %27 = inttoptr i64 %26 to %"struct.v8::base::TemplateHashMapEntry"*
  store %"struct.v8::base::TemplateHashMapEntry"* %27, %"struct.v8::base::TemplateHashMapEntry"** %13, align 8
  %28 = icmp eq i64 %26, 0
  br i1 %28, label %29, label %30

29:                                               ; preds = %25
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.3, i64 0, i64 0)) #7
  unreachable

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesCache", %"class.v8::internal::compiler::StateValuesCache"* %0, i64 0, i32 1, i32 0, i32 0, i32 3
  store i32 8, i32* %31, align 8
  %32 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %27, i64 0, i32 0
  store i8* null, i8** %32, align 8
  %33 = load i32, i32* %31, align 8
  %34 = icmp ugt i32 %33, 1
  br i1 %34, label %35, label %43

35:                                               ; preds = %30, %35
  %36 = phi i64 [ %39, %35 ], [ 1, %30 ]
  %37 = load %"struct.v8::base::TemplateHashMapEntry"*, %"struct.v8::base::TemplateHashMapEntry"** %13, align 8
  %38 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %37, i64 %36, i32 0
  store i8* null, i8** %38, align 8
  %39 = add nuw nsw i64 %36, 1
  %40 = load i32, i32* %31, align 8
  %41 = zext i32 %40 to i64
  %42 = icmp ult i64 %39, %41
  br i1 %42, label %35, label %43

43:                                               ; preds = %35, %30
  %44 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesCache", %"class.v8::internal::compiler::StateValuesCache"* %0, i64 0, i32 1, i32 0, i32 0, i32 4
  store i32 0, i32* %44, align 4
  %45 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesCache", %"class.v8::internal::compiler::StateValuesCache"* %0, i64 0, i32 2
  %46 = bitcast %"class.v8::internal::compiler::StateValuesCache"* %0 to i64***
  %47 = load i64**, i64*** %46, align 8
  %48 = load i64*, i64** %47, align 8
  %49 = load i64, i64* %48, align 8
  %50 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesCache", %"class.v8::internal::compiler::StateValuesCache"* %0, i64 0, i32 2, i32 0, i32 0, i32 2, i32 1
  %51 = bitcast %"struct.std::__1::__compressed_pair_elem.671"* %50 to i64*
  %52 = bitcast %"class.v8::internal::ZoneVector.666"* %45 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %52, i8 0, i64 24, i1 false) #6
  store i64 %49, i64* %51, align 8
  %53 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesCache", %"class.v8::internal::compiler::StateValuesCache"* %0, i64 0, i32 3
  store %"class.v8::internal::compiler::Node"* null, %"class.v8::internal::compiler::Node"** %53, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal8compiler16StateValuesCache12AreKeysEqualEPvS3_(i8*, i8*) #0 align 2 {
  %3 = bitcast i8* %0 to %"class.v8::internal::compiler::Node"**
  %4 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3, align 8
  %5 = icmp eq %"class.v8::internal::compiler::Node"* %4, null
  %6 = bitcast i8* %1 to %"class.v8::internal::compiler::Node"**
  %7 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6, align 8
  %8 = icmp eq %"class.v8::internal::compiler::Node"* %7, null
  br i1 %5, label %9, label %47

9:                                                ; preds = %2
  br i1 %8, label %10, label %44

10:                                               ; preds = %9
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds i8, i8* %1, i64 8
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = icmp eq i64 %13, %16
  br i1 %17, label %18, label %53

18:                                               ; preds = %10
  %19 = getelementptr inbounds i8, i8* %0, i64 16
  %20 = bitcast i8* %19 to %"class.v8::internal::compiler::SparseInputMask"*
  %21 = getelementptr inbounds i8, i8* %1, i64 16
  %22 = bitcast i8* %21 to %"class.v8::internal::compiler::SparseInputMask"*
  %23 = tail call zeroext i1 @_ZN2v88internal8compilerneERKNS1_15SparseInputMaskES4_(%"class.v8::internal::compiler::SparseInputMask"* dereferenceable(4) %20, %"class.v8::internal::compiler::SparseInputMask"* dereferenceable(4) %22) #6
  br i1 %23, label %53, label %24

24:                                               ; preds = %18
  %25 = load i64, i64* %12, align 8
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %53, label %27

27:                                               ; preds = %24
  %28 = getelementptr inbounds i8, i8* %0, i64 24
  %29 = bitcast i8* %28 to %"class.v8::internal::compiler::Node"***
  %30 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %29, align 8
  %31 = getelementptr inbounds i8, i8* %1, i64 24
  %32 = bitcast i8* %31 to %"class.v8::internal::compiler::Node"***
  %33 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %32, align 8
  br label %36

34:                                               ; preds = %36
  %35 = icmp eq i64 %43, %25
  br i1 %35, label %53, label %36

36:                                               ; preds = %34, %27
  %37 = phi i64 [ 0, %27 ], [ %43, %34 ]
  %38 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %30, i64 %37
  %39 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %38, align 8
  %40 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %33, i64 %37
  %41 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %40, align 8
  %42 = icmp eq %"class.v8::internal::compiler::Node"* %39, %41
  %43 = add nuw i64 %37, 1
  br i1 %42, label %34, label %53

44:                                               ; preds = %9
  %45 = bitcast i8* %0 to %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey"*
  %46 = tail call zeroext i1 @_ZN2v88internal8compiler16StateValuesCache17IsKeysEqualToNodeEPNS2_14StateValuesKeyEPNS1_4NodeE(%"struct.v8::internal::compiler::StateValuesCache::StateValuesKey"* %45, %"class.v8::internal::compiler::Node"* nonnull %7)
  br label %53

47:                                               ; preds = %2
  br i1 %8, label %48, label %51

48:                                               ; preds = %47
  %49 = bitcast i8* %1 to %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey"*
  %50 = tail call zeroext i1 @_ZN2v88internal8compiler16StateValuesCache17IsKeysEqualToNodeEPNS2_14StateValuesKeyEPNS1_4NodeE(%"struct.v8::internal::compiler::StateValuesCache::StateValuesKey"* %49, %"class.v8::internal::compiler::Node"* nonnull %4)
  br label %53

51:                                               ; preds = %47
  %52 = icmp eq %"class.v8::internal::compiler::Node"* %4, %7
  br label %53

53:                                               ; preds = %36, %34, %24, %18, %10, %51, %48, %44
  %54 = phi i1 [ %46, %44 ], [ %50, %48 ], [ %52, %51 ], [ false, %18 ], [ false, %10 ], [ true, %24 ], [ true, %34 ], [ false, %36 ]
  ret i1 %54
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal8compiler16StateValuesCache17AreValueKeysEqualEPNS2_14StateValuesKeyES4_(%"struct.v8::internal::compiler::StateValuesCache::StateValuesKey"*, %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey", %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey"* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey", %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey"* %1, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %4, %6
  br i1 %7, label %8, label %30

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey", %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey"* %0, i64 0, i32 2
  %10 = getelementptr inbounds %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey", %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey"* %1, i64 0, i32 2
  %11 = tail call zeroext i1 @_ZN2v88internal8compilerneERKNS1_15SparseInputMaskES4_(%"class.v8::internal::compiler::SparseInputMask"* dereferenceable(4) %9, %"class.v8::internal::compiler::SparseInputMask"* dereferenceable(4) %10) #6
  br i1 %11, label %30, label %12

12:                                               ; preds = %8
  %13 = load i64, i64* %3, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %30, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey", %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey"* %0, i64 0, i32 3
  %17 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %16, align 8
  %18 = getelementptr inbounds %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey", %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey"* %1, i64 0, i32 3
  %19 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %18, align 8
  br label %22

20:                                               ; preds = %22
  %21 = icmp ult i64 %29, %13
  br i1 %21, label %22, label %30

22:                                               ; preds = %15, %20
  %23 = phi i64 [ 0, %15 ], [ %29, %20 ]
  %24 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %17, i64 %23
  %25 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %24, align 8
  %26 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %19, i64 %23
  %27 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %26, align 8
  %28 = icmp eq %"class.v8::internal::compiler::Node"* %25, %27
  %29 = add nuw i64 %23, 1
  br i1 %28, label %20, label %30

30:                                               ; preds = %22, %20, %12, %2, %8
  %31 = phi i1 [ false, %8 ], [ false, %2 ], [ true, %12 ], [ false, %22 ], [ true, %20 ]
  ret i1 %31
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal8compiler16StateValuesCache17IsKeysEqualToNodeEPNS2_14StateValuesKeyEPNS1_4NodeE(%"struct.v8::internal::compiler::StateValuesCache::StateValuesKey"*, %"class.v8::internal::compiler::Node"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::compiler::SparseInputMask", align 4
  %4 = getelementptr inbounds %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey", %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %1, i64 0, i32 3
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, 251658240
  %9 = icmp eq i32 %8, 251658240
  br i1 %9, label %13, label %10

10:                                               ; preds = %2
  %11 = lshr i32 %7, 24
  %12 = and i32 %11, 15
  br label %20

13:                                               ; preds = %2
  %14 = ptrtoint %"class.v8::internal::compiler::Node"* %1 to i64
  %15 = add i64 %14, 32
  %16 = inttoptr i64 %15 to %"struct.v8::internal::compiler::Node::OutOfLineInputs"**
  %17 = load %"struct.v8::internal::compiler::Node::OutOfLineInputs"*, %"struct.v8::internal::compiler::Node::OutOfLineInputs"** %16, align 8
  %18 = getelementptr inbounds %"struct.v8::internal::compiler::Node::OutOfLineInputs", %"struct.v8::internal::compiler::Node::OutOfLineInputs"* %17, i64 0, i32 1
  %19 = load i32, i32* %18, align 8
  br label %20

20:                                               ; preds = %10, %13
  %21 = phi i32 [ %12, %10 ], [ %19, %13 ]
  %22 = sext i32 %21 to i64
  %23 = icmp eq i64 %5, %22
  br i1 %23, label %24, label %75

24:                                               ; preds = %20
  %25 = bitcast %"class.v8::internal::compiler::SparseInputMask"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %25) #6
  %26 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %1, i64 0, i32 0
  %27 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %26, align 8
  %28 = tail call i32 @_ZN2v88internal8compiler17SparseInputMaskOfEPKNS1_8OperatorE(%"class.v8::internal::compiler::Operator"* %27) #6
  %29 = getelementptr inbounds %"class.v8::internal::compiler::SparseInputMask", %"class.v8::internal::compiler::SparseInputMask"* %3, i64 0, i32 0
  store i32 %28, i32* %29, align 4
  %30 = getelementptr inbounds %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey", %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey"* %0, i64 0, i32 2
  %31 = call zeroext i1 @_ZN2v88internal8compilerneERKNS1_15SparseInputMaskES4_(%"class.v8::internal::compiler::SparseInputMask"* nonnull dereferenceable(4) %3, %"class.v8::internal::compiler::SparseInputMask"* dereferenceable(4) %30) #6
  br i1 %31, label %73, label %32

32:                                               ; preds = %24
  %33 = load i64, i64* %4, align 8
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %73, label %35

35:                                               ; preds = %32
  %36 = getelementptr inbounds %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey", %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey"* %0, i64 0, i32 3
  %37 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %36, align 8
  %38 = load i32, i32* %6, align 4
  %39 = and i32 %38, 251658240
  %40 = icmp eq i32 %39, 251658240
  %41 = ptrtoint %"class.v8::internal::compiler::Node"* %1 to i64
  %42 = add i64 %41, 32
  %43 = inttoptr i64 %42 to %"class.v8::internal::compiler::Node"**
  br i1 %40, label %44, label %63

44:                                               ; preds = %35
  %45 = inttoptr i64 %42 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = add i64 %46, 16
  %48 = inttoptr i64 %47 to %"class.v8::internal::compiler::Node"**
  br label %49

49:                                               ; preds = %44, %59
  %50 = phi i64 [ %58, %59 ], [ 0, %44 ]
  %51 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %37, i64 %50
  %52 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %51, align 8
  %53 = shl i64 %50, 32
  %54 = ashr exact i64 %53, 32
  %55 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %48, i64 %54
  %56 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %55, align 8
  %57 = icmp eq %"class.v8::internal::compiler::Node"* %52, %56
  %58 = add nuw i64 %50, 1
  br i1 %57, label %59, label %73

59:                                               ; preds = %49
  %60 = icmp ult i64 %58, %33
  br i1 %60, label %49, label %73

61:                                               ; preds = %63
  %62 = icmp ult i64 %72, %33
  br i1 %62, label %63, label %73

63:                                               ; preds = %35, %61
  %64 = phi i64 [ %72, %61 ], [ 0, %35 ]
  %65 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %37, i64 %64
  %66 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %65, align 8
  %67 = shl i64 %64, 32
  %68 = ashr exact i64 %67, 32
  %69 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %43, i64 %68
  %70 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %69, align 8
  %71 = icmp eq %"class.v8::internal::compiler::Node"* %66, %70
  %72 = add nuw i64 %64, 1
  br i1 %71, label %61, label %73

73:                                               ; preds = %61, %63, %59, %49, %32, %24
  %74 = phi i1 [ false, %24 ], [ true, %32 ], [ true, %59 ], [ false, %49 ], [ true, %61 ], [ false, %63 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %25) #6
  br label %75

75:                                               ; preds = %20, %73
  %76 = phi i1 [ %74, %73 ], [ false, %20 ]
  ret i1 %76
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @_ZN2v88internal8compiler17SparseInputMaskOfEPKNS1_8OperatorE(%"class.v8::internal::compiler::Operator"*) local_unnamed_addr #2

declare zeroext i1 @_ZN2v88internal8compilerneERKNS1_15SparseInputMaskES4_(%"class.v8::internal::compiler::SparseInputMask"* dereferenceable(4), %"class.v8::internal::compiler::SparseInputMask"* dereferenceable(4)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler16StateValuesCache19GetEmptyStateValuesEv(%"class.v8::internal::compiler::StateValuesCache"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesCache", %"class.v8::internal::compiler::StateValuesCache"* %0, i64 0, i32 3
  %3 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2, align 8
  %4 = icmp eq %"class.v8::internal::compiler::Node"* %3, null
  br i1 %4, label %5, label %14

5:                                                ; preds = %1
  %6 = bitcast %"class.v8::internal::compiler::StateValuesCache"* %0 to %"class.v8::internal::compiler::MachineGraph"**
  %7 = load %"class.v8::internal::compiler::MachineGraph"*, %"class.v8::internal::compiler::MachineGraph"** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::compiler::MachineGraph", %"class.v8::internal::compiler::MachineGraph"* %7, i64 0, i32 0
  %9 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::compiler::MachineGraph", %"class.v8::internal::compiler::MachineGraph"* %7, i64 0, i32 1
  %11 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %10, align 8
  %12 = tail call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder11StateValuesEiNS1_15SparseInputMaskE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %11, i32 0, i32 0) #6
  %13 = tail call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %9, %"class.v8::internal::compiler::Operator"* %12, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #6
  store %"class.v8::internal::compiler::Node"* %13, %"class.v8::internal::compiler::Node"** %2, align 8
  br label %14

14:                                               ; preds = %5, %1
  %15 = phi %"class.v8::internal::compiler::Node"* [ %13, %5 ], [ %3, %1 ]
  ret %"class.v8::internal::compiler::Node"* %15
}

declare %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder11StateValuesEiNS1_15SparseInputMaskE(%"class.v8::internal::compiler::CommonOperatorBuilder"*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"struct.std::__1::array"* @_ZN2v88internal8compiler16StateValuesCache15GetWorkingSpaceEm(%"class.v8::internal::compiler::StateValuesCache"*, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesCache", %"class.v8::internal::compiler::StateValuesCache"* %0, i64 0, i32 2, i32 0
  %4 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesCache", %"class.v8::internal::compiler::StateValuesCache"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %5 = bitcast %"struct.std::__1::array"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector.667"* %3 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = ashr exact i64 %9, 6
  %11 = icmp ugt i64 %10, %1
  %12 = inttoptr i64 %8 to %"struct.std::__1::array"*
  br i1 %11, label %24, label %13

13:                                               ; preds = %2
  %14 = add i64 %1, 1
  %15 = icmp ugt i64 %14, %10
  br i1 %15, label %16, label %20

16:                                               ; preds = %13
  %17 = sub i64 %14, %10
  tail call void @_ZNSt3__16vectorINS_5arrayIPN2v88internal8compiler4NodeELm8EEENS3_13ZoneAllocatorIS7_EEE8__appendEm(%"class.std::__1::vector.667"* %3, i64 %17) #6
  %18 = getelementptr inbounds %"class.std::__1::vector.667", %"class.std::__1::vector.667"* %3, i64 0, i32 0, i32 0
  %19 = load %"struct.std::__1::array"*, %"struct.std::__1::array"** %18, align 8
  br label %24

20:                                               ; preds = %13
  %21 = icmp ult i64 %14, %10
  br i1 %21, label %22, label %24

22:                                               ; preds = %20
  %23 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %12, i64 %14
  store %"struct.std::__1::array"* %23, %"struct.std::__1::array"** %4, align 8
  br label %24

24:                                               ; preds = %22, %20, %16, %2
  %25 = phi %"struct.std::__1::array"* [ %12, %22 ], [ %12, %20 ], [ %19, %16 ], [ %12, %2 ]
  %26 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %25, i64 %1
  ret %"struct.std::__1::array"* %26
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler16StateValuesCache22GetValuesNodeFromCacheEPPNS1_4NodeEmNS1_15SparseInputMaskE(%"class.v8::internal::compiler::StateValuesCache"*, %"class.v8::internal::compiler::Node"**, i64, i32) local_unnamed_addr #0 align 2 {
  %5 = alloca %class.anon.684, align 8
  %6 = alloca %class.anon, align 1
  %7 = alloca %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey", align 8
  %8 = alloca i8*, align 8
  %9 = bitcast %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #6
  %10 = getelementptr inbounds %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey", %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey"* %7, i64 0, i32 0, i32 0
  store %"class.v8::internal::compiler::Node"* null, %"class.v8::internal::compiler::Node"** %10, align 8
  %11 = getelementptr inbounds %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey", %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey"* %7, i64 0, i32 1
  store i64 %2, i64* %11, align 8
  %12 = getelementptr inbounds %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey", %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey"* %7, i64 0, i32 2, i32 0
  store i32 %3, i32* %12, align 8
  %13 = getelementptr inbounds %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey", %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey"* %7, i64 0, i32 3
  store %"class.v8::internal::compiler::Node"** %1, %"class.v8::internal::compiler::Node"*** %13, align 8
  %14 = icmp eq i64 %2, 0
  br i1 %14, label %63, label %15

15:                                               ; preds = %4
  %16 = and i64 %2, 1
  %17 = icmp eq i64 %2, 1
  br i1 %17, label %20, label %18

18:                                               ; preds = %15
  %19 = sub i64 %2, %16
  br label %42

20:                                               ; preds = %116, %15
  %21 = phi i64 [ undef, %15 ], [ %119, %116 ]
  %22 = phi i64 [ 0, %15 ], [ %120, %116 ]
  %23 = phi i64 [ %2, %15 ], [ %119, %116 ]
  %24 = icmp eq i64 %16, 0
  br i1 %24, label %38, label %25

25:                                               ; preds = %20
  %26 = mul i64 %23, 23
  %27 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1, i64 %22
  %28 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %27, align 8
  %29 = icmp eq %"class.v8::internal::compiler::Node"* %28, null
  br i1 %29, label %35, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %28, i64 0, i32 3
  %32 = load i32, i32* %31, align 4
  %33 = and i32 %32, 16777215
  %34 = zext i32 %33 to i64
  br label %35

35:                                               ; preds = %25, %30
  %36 = phi i64 [ %34, %30 ], [ 0, %25 ]
  %37 = add i64 %26, %36
  br label %38

38:                                               ; preds = %20, %35
  %39 = phi i64 [ %21, %20 ], [ %37, %35 ]
  %40 = trunc i64 %39 to i32
  %41 = and i32 %40, 2147483647
  br label %63

42:                                               ; preds = %116, %18
  %43 = phi i64 [ 0, %18 ], [ %120, %116 ]
  %44 = phi i64 [ %2, %18 ], [ %119, %116 ]
  %45 = phi i64 [ %19, %18 ], [ %121, %116 ]
  %46 = mul i64 %44, 23
  %47 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1, i64 %43
  %48 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %47, align 8
  %49 = icmp eq %"class.v8::internal::compiler::Node"* %48, null
  br i1 %49, label %54, label %50

50:                                               ; preds = %42
  %51 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %48, i64 0, i32 3
  %52 = load i32, i32* %51, align 4
  %53 = and i32 %52, 16777215
  br label %54

54:                                               ; preds = %50, %42
  %55 = phi i32 [ %53, %50 ], [ 0, %42 ]
  %56 = zext i32 %55 to i64
  %57 = add i64 %46, %56
  %58 = or i64 %43, 1
  %59 = mul i64 %57, 23
  %60 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1, i64 %58
  %61 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %60, align 8
  %62 = icmp eq %"class.v8::internal::compiler::Node"* %61, null
  br i1 %62, label %116, label %112

63:                                               ; preds = %4, %38
  %64 = phi i32 [ 0, %4 ], [ %41, %38 ]
  %65 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesCache", %"class.v8::internal::compiler::StateValuesCache"* %0, i64 0, i32 1, i32 0
  %66 = bitcast i8** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %66) #6
  %67 = bitcast i8** %8 to %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey"**
  store %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey"* %7, %"struct.v8::internal::compiler::StateValuesCache::StateValuesKey"** %67, align 8
  %68 = getelementptr inbounds %class.anon, %class.anon* %6, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %68) #6
  %69 = bitcast %class.anon.684* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %69) #6
  %70 = getelementptr inbounds %class.anon.684, %class.anon.684* %5, i64 0, i32 0
  store i8** %8, i8*** %70, align 8
  %71 = call %"struct.v8::base::TemplateHashMapEntry"* @_ZN2v84base19TemplateHashMapImplIPvS2_NS0_26HashEqualityThenKeyMatcherIS2_PFbS2_S2_EEENS_8internal20ZoneAllocationPolicyEE14LookupOrInsertIS2_ZNS9_14LookupOrInsertIZNS9_14LookupOrInsertERKS2_jEUlvE_EEPNS0_20TemplateHashMapEntryIS2_S2_EESD_jRKT_EUlvE_SE_EESH_SK_jRKT0_RKT1_(%"class.v8::base::TemplateHashMapImpl"* %65, i8** nonnull dereferenceable(8) %8, i32 %64, %class.anon.684* nonnull dereferenceable(8) %5, %class.anon* nonnull dereferenceable(1) %6) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %69) #6
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %68) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %66) #6
  %72 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %71, i64 0, i32 1
  %73 = load i8*, i8** %72, align 8
  %74 = icmp eq i8* %73, null
  br i1 %74, label %75, label %107

75:                                               ; preds = %63
  %76 = trunc i64 %2 to i32
  %77 = bitcast %"class.v8::internal::compiler::StateValuesCache"* %0 to %"class.v8::internal::compiler::MachineGraph"**
  %78 = load %"class.v8::internal::compiler::MachineGraph"*, %"class.v8::internal::compiler::MachineGraph"** %77, align 8
  %79 = getelementptr inbounds %"class.v8::internal::compiler::MachineGraph", %"class.v8::internal::compiler::MachineGraph"* %78, i64 0, i32 0
  %80 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %79, align 8
  %81 = getelementptr inbounds %"class.v8::internal::compiler::MachineGraph", %"class.v8::internal::compiler::MachineGraph"* %78, i64 0, i32 1
  %82 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %81, align 8
  %83 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder11StateValuesEiNS1_15SparseInputMaskE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %82, i32 %76, i32 %3) #6
  %84 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %80, %"class.v8::internal::compiler::Operator"* %83, i32 %76, %"class.v8::internal::compiler::Node"** %1, i1 zeroext false) #6
  %85 = ptrtoint %"class.v8::internal::compiler::Node"* %84 to i64
  %86 = load %"class.v8::internal::compiler::MachineGraph"*, %"class.v8::internal::compiler::MachineGraph"** %77, align 8
  %87 = getelementptr inbounds %"class.v8::internal::compiler::MachineGraph", %"class.v8::internal::compiler::MachineGraph"* %86, i64 0, i32 0
  %88 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %87, align 8
  %89 = getelementptr inbounds %"class.v8::internal::compiler::Graph", %"class.v8::internal::compiler::Graph"* %88, i64 0, i32 0
  %90 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %89, align 8
  %91 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %90, i64 0, i32 2
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %90, i64 0, i32 3
  %94 = load i64, i64* %93, align 8
  %95 = sub i64 %94, %92
  %96 = icmp ult i64 %95, 8
  br i1 %96, label %97, label %99, !prof !2

97:                                               ; preds = %75
  %98 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %90, i64 8) #6
  br label %101

99:                                               ; preds = %75
  %100 = add i64 %92, 8
  store i64 %100, i64* %91, align 8
  br label %101

101:                                              ; preds = %97, %99
  %102 = phi i64 [ %98, %97 ], [ %92, %99 ]
  %103 = inttoptr i64 %102 to %"struct.v8::internal::compiler::StateValuesCache::NodeKey"*
  %104 = inttoptr i64 %102 to i64*
  store i64 %85, i64* %104, align 8
  %105 = bitcast %"struct.v8::base::TemplateHashMapEntry"* %71 to %"struct.v8::internal::compiler::StateValuesCache::NodeKey"**
  store %"struct.v8::internal::compiler::StateValuesCache::NodeKey"* %103, %"struct.v8::internal::compiler::StateValuesCache::NodeKey"** %105, align 8
  %106 = bitcast i8** %72 to i64*
  store i64 %85, i64* %106, align 8
  br label %109

107:                                              ; preds = %63
  %108 = ptrtoint i8* %73 to i64
  br label %109

109:                                              ; preds = %107, %101
  %110 = phi i64 [ %85, %101 ], [ %108, %107 ]
  %111 = inttoptr i64 %110 to %"class.v8::internal::compiler::Node"*
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #6
  ret %"class.v8::internal::compiler::Node"* %111

112:                                              ; preds = %54
  %113 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %61, i64 0, i32 3
  %114 = load i32, i32* %113, align 4
  %115 = and i32 %114, 16777215
  br label %116

116:                                              ; preds = %112, %54
  %117 = phi i32 [ %115, %112 ], [ 0, %54 ]
  %118 = zext i32 %117 to i64
  %119 = add i64 %59, %118
  %120 = add nuw i64 %43, 2
  %121 = add i64 %45, -2
  %122 = icmp eq i64 %121, 0
  br i1 %122, label %20, label %42
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Operator"*, i32, %"class.v8::internal::compiler::Node"**, i1 zeroext) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN2v88internal8compiler16StateValuesCache20FillBufferWithValuesEPNSt3__15arrayIPNS1_4NodeELm8EEEPmS9_PS6_mPKNS0_9BitVectorEi(%"class.v8::internal::compiler::StateValuesCache"* nocapture readnone, %"struct.std::__1::array"* nocapture, i64* nocapture, i64* nocapture, %"class.v8::internal::compiler::Node"** nocapture readonly, i64, %"class.v8::internal::BitVector"* readonly, i32) local_unnamed_addr #3 align 2 {
  %9 = load i64, i64* %2, align 8
  %10 = load i64, i64* %3, align 8
  %11 = icmp ult i64 %10, %5
  br i1 %11, label %12, label %88

12:                                               ; preds = %8
  %13 = icmp eq %"class.v8::internal::BitVector"* %6, null
  %14 = getelementptr inbounds %"class.v8::internal::BitVector", %"class.v8::internal::BitVector"* %6, i64 0, i32 1
  %15 = getelementptr inbounds %"class.v8::internal::BitVector", %"class.v8::internal::BitVector"* %6, i64 0, i32 2
  %16 = getelementptr inbounds %"union.v8::internal::BitVector::DataStorage", %"union.v8::internal::BitVector::DataStorage"* %15, i64 0, i32 0
  %17 = bitcast %"union.v8::internal::BitVector::DataStorage"* %15 to i64*
  %18 = icmp ult i64 %9, 8
  br i1 %13, label %20, label %19

19:                                               ; preds = %12
  br i1 %18, label %44, label %88

20:                                               ; preds = %12
  br i1 %18, label %21, label %88

21:                                               ; preds = %20, %39
  %22 = phi i32 [ %28, %39 ], [ 0, %20 ]
  %23 = phi i64 [ %35, %39 ], [ %9, %20 ]
  %24 = phi i64 [ %37, %39 ], [ %10, %20 ]
  %25 = phi i64 [ %40, %39 ], [ %9, %20 ]
  %26 = trunc i64 %23 to i32
  %27 = shl i32 1, %26
  %28 = or i32 %27, %22
  %29 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4, i64 %24
  %30 = bitcast %"class.v8::internal::compiler::Node"** %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = add nuw nsw i64 %25, 1
  store i64 %32, i64* %2, align 8
  %33 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %1, i64 0, i32 0, i64 %25
  %34 = bitcast %"class.v8::internal::compiler::Node"** %33 to i64*
  store i64 %31, i64* %34, align 8
  %35 = add nuw nsw i64 %23, 1
  %36 = load i64, i64* %3, align 8
  %37 = add i64 %36, 1
  store i64 %37, i64* %3, align 8
  %38 = icmp ult i64 %37, %5
  br i1 %38, label %39, label %88

39:                                               ; preds = %21
  %40 = load i64, i64* %2, align 8
  %41 = icmp ult i64 %40, 8
  %42 = icmp ult i64 %35, 31
  %43 = and i1 %42, %41
  br i1 %43, label %21, label %88

44:                                               ; preds = %19, %83
  %45 = phi i32 [ %79, %83 ], [ 0, %19 ]
  %46 = phi i64 [ %80, %83 ], [ %9, %19 ]
  %47 = phi i64 [ %81, %83 ], [ %10, %19 ]
  %48 = phi i64 [ %84, %83 ], [ %9, %19 ]
  %49 = trunc i64 %47 to i32
  %50 = add nsw i32 %49, %7
  %51 = load i32, i32* %14, align 4
  %52 = icmp eq i32 %51, 1
  br i1 %52, label %58, label %53

53:                                               ; preds = %44
  %54 = load i64*, i64** %16, align 8
  %55 = sdiv i32 %50, 64
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i64, i64* %54, i64 %56
  br label %58

58:                                               ; preds = %44, %53
  %59 = phi i64* [ %57, %53 ], [ %17, %44 ]
  %60 = load i64, i64* %59, align 8
  %61 = srem i32 %50, 64
  %62 = zext i32 %61 to i64
  %63 = shl i64 1, %62
  %64 = and i64 %60, %63
  %65 = icmp eq i64 %64, 0
  br i1 %65, label %77, label %66

66:                                               ; preds = %58
  %67 = trunc i64 %46 to i32
  %68 = shl i32 1, %67
  %69 = or i32 %68, %45
  %70 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4, i64 %47
  %71 = bitcast %"class.v8::internal::compiler::Node"** %70 to i64*
  %72 = load i64, i64* %71, align 8
  %73 = add nuw nsw i64 %48, 1
  store i64 %73, i64* %2, align 8
  %74 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %1, i64 0, i32 0, i64 %48
  %75 = bitcast %"class.v8::internal::compiler::Node"** %74 to i64*
  store i64 %72, i64* %75, align 8
  %76 = load i64, i64* %3, align 8
  br label %77

77:                                               ; preds = %58, %66
  %78 = phi i64 [ %76, %66 ], [ %47, %58 ]
  %79 = phi i32 [ %69, %66 ], [ %45, %58 ]
  %80 = add nuw nsw i64 %46, 1
  %81 = add i64 %78, 1
  store i64 %81, i64* %3, align 8
  %82 = icmp ult i64 %81, %5
  br i1 %82, label %83, label %88

83:                                               ; preds = %77
  %84 = load i64, i64* %2, align 8
  %85 = icmp ult i64 %84, 8
  %86 = icmp ult i64 %80, 31
  %87 = and i1 %86, %85
  br i1 %87, label %44, label %88

88:                                               ; preds = %77, %83, %21, %39, %19, %20, %8
  %89 = phi i32 [ 0, %8 ], [ 0, %20 ], [ 0, %19 ], [ %28, %39 ], [ %28, %21 ], [ %79, %83 ], [ %79, %77 ]
  %90 = phi i64 [ %9, %8 ], [ %9, %20 ], [ %9, %19 ], [ %35, %39 ], [ %35, %21 ], [ %80, %83 ], [ %80, %77 ]
  %91 = trunc i64 %90 to i32
  %92 = shl i32 1, %91
  %93 = or i32 %92, %89
  ret i32 %93
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler16StateValuesCache9BuildTreeEPmPPNS1_4NodeEmPKNS0_9BitVectorEim(%"class.v8::internal::compiler::StateValuesCache"*, i64* nocapture, %"class.v8::internal::compiler::Node"** nocapture, i64, %"class.v8::internal::BitVector"*, i32, i64) local_unnamed_addr #0 align 2 {
  %8 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesCache", %"class.v8::internal::compiler::StateValuesCache"* %0, i64 0, i32 2, i32 0
  %9 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesCache", %"class.v8::internal::compiler::StateValuesCache"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %10 = bitcast %"struct.std::__1::array"** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.std::__1::vector.667"* %8 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = ashr exact i64 %14, 6
  %16 = icmp ugt i64 %15, %6
  %17 = inttoptr i64 %13 to %"struct.std::__1::array"*
  br i1 %16, label %29, label %18

18:                                               ; preds = %7
  %19 = add i64 %6, 1
  %20 = icmp ugt i64 %19, %15
  br i1 %20, label %21, label %25

21:                                               ; preds = %18
  %22 = sub i64 %19, %15
  tail call void @_ZNSt3__16vectorINS_5arrayIPN2v88internal8compiler4NodeELm8EEENS3_13ZoneAllocatorIS7_EEE8__appendEm(%"class.std::__1::vector.667"* %8, i64 %22) #6
  %23 = getelementptr inbounds %"class.std::__1::vector.667", %"class.std::__1::vector.667"* %8, i64 0, i32 0, i32 0
  %24 = load %"struct.std::__1::array"*, %"struct.std::__1::array"** %23, align 8
  br label %29

25:                                               ; preds = %18
  %26 = icmp ult i64 %19, %15
  br i1 %26, label %27, label %29

27:                                               ; preds = %25
  %28 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %17, i64 %19
  store %"struct.std::__1::array"* %28, %"struct.std::__1::array"** %9, align 8
  br label %29

29:                                               ; preds = %7, %21, %25, %27
  %30 = phi %"struct.std::__1::array"* [ %17, %27 ], [ %17, %25 ], [ %24, %21 ], [ %17, %7 ]
  %31 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %30, i64 %6
  %32 = icmp eq i64 %6, 0
  %33 = load i64, i64* %1, align 8
  %34 = icmp ult i64 %33, %3
  br i1 %32, label %38, label %35

35:                                               ; preds = %29
  br i1 %34, label %36, label %212

36:                                               ; preds = %35
  %37 = add i64 %6, -1
  br label %114

38:                                               ; preds = %29
  br i1 %34, label %39, label %107

39:                                               ; preds = %38
  %40 = icmp eq %"class.v8::internal::BitVector"* %4, null
  %41 = getelementptr inbounds %"class.v8::internal::BitVector", %"class.v8::internal::BitVector"* %4, i64 0, i32 1
  %42 = getelementptr inbounds %"class.v8::internal::BitVector", %"class.v8::internal::BitVector"* %4, i64 0, i32 2
  %43 = getelementptr inbounds %"union.v8::internal::BitVector::DataStorage", %"union.v8::internal::BitVector::DataStorage"* %42, i64 0, i32 0
  %44 = bitcast %"union.v8::internal::BitVector::DataStorage"* %42 to i64*
  br i1 %40, label %45, label %63

45:                                               ; preds = %39, %50
  %46 = phi i64 [ %57, %50 ], [ 0, %39 ]
  %47 = phi i64 [ %61, %50 ], [ %33, %39 ]
  %48 = phi i32 [ %53, %50 ], [ 0, %39 ]
  %49 = icmp eq i64 %46, 8
  br i1 %49, label %107, label %50

50:                                               ; preds = %45
  %51 = trunc i64 %46 to i32
  %52 = shl i32 1, %51
  %53 = or i32 %52, %48
  %54 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2, i64 %47
  %55 = bitcast %"class.v8::internal::compiler::Node"** %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = add nuw nsw i64 %46, 1
  %58 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %30, i64 0, i32 0, i64 %46
  %59 = bitcast %"class.v8::internal::compiler::Node"** %58 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %1, align 8
  %61 = add i64 %60, 1
  store i64 %61, i64* %1, align 8
  %62 = icmp ult i64 %61, %3
  br i1 %62, label %45, label %107

63:                                               ; preds = %39, %100
  %64 = phi i64 [ %101, %100 ], [ 0, %39 ]
  %65 = phi i64 [ %105, %100 ], [ %33, %39 ]
  %66 = phi i64 [ %104, %100 ], [ 0, %39 ]
  %67 = phi i32 [ %103, %100 ], [ 0, %39 ]
  %68 = icmp ult i64 %64, 8
  %69 = icmp ult i64 %66, 31
  %70 = and i1 %68, %69
  br i1 %70, label %71, label %107

71:                                               ; preds = %63
  %72 = trunc i64 %65 to i32
  %73 = add nsw i32 %72, %5
  %74 = load i32, i32* %41, align 4
  %75 = icmp eq i32 %74, 1
  br i1 %75, label %81, label %76

76:                                               ; preds = %71
  %77 = load i64*, i64** %43, align 8
  %78 = sdiv i32 %73, 64
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i64, i64* %77, i64 %79
  br label %81

81:                                               ; preds = %76, %71
  %82 = phi i64* [ %80, %76 ], [ %44, %71 ]
  %83 = load i64, i64* %82, align 8
  %84 = srem i32 %73, 64
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = and i64 %83, %86
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %100, label %89

89:                                               ; preds = %81
  %90 = trunc i64 %66 to i32
  %91 = shl i32 1, %90
  %92 = or i32 %91, %67
  %93 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2, i64 %65
  %94 = bitcast %"class.v8::internal::compiler::Node"** %93 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = add nuw nsw i64 %64, 1
  %97 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %30, i64 0, i32 0, i64 %64
  %98 = bitcast %"class.v8::internal::compiler::Node"** %97 to i64*
  store i64 %95, i64* %98, align 8
  %99 = load i64, i64* %1, align 8
  br label %100

100:                                              ; preds = %89, %81
  %101 = phi i64 [ %64, %81 ], [ %96, %89 ]
  %102 = phi i64 [ %65, %81 ], [ %99, %89 ]
  %103 = phi i32 [ %67, %81 ], [ %92, %89 ]
  %104 = add nuw nsw i64 %66, 1
  %105 = add i64 %102, 1
  store i64 %105, i64* %1, align 8
  %106 = icmp ult i64 %105, %3
  br i1 %106, label %63, label %107

107:                                              ; preds = %63, %100, %50, %45, %38
  %108 = phi i64 [ 0, %38 ], [ 8, %45 ], [ %57, %50 ], [ %64, %63 ], [ %101, %100 ]
  %109 = phi i32 [ 0, %38 ], [ %48, %45 ], [ %53, %50 ], [ %67, %63 ], [ %103, %100 ]
  %110 = phi i64 [ 0, %38 ], [ 8, %45 ], [ %57, %50 ], [ %66, %63 ], [ %104, %100 ]
  %111 = trunc i64 %110 to i32
  %112 = shl i32 1, %111
  %113 = or i32 %112, %109
  br label %212

114:                                              ; preds = %36, %199
  %115 = phi i64 [ %33, %36 ], [ %203, %199 ]
  %116 = phi i64 [ 0, %36 ], [ %201, %199 ]
  %117 = sub i64 %3, %115
  %118 = sub nuw nsw i64 8, %116
  %119 = icmp ult i64 %117, %118
  br i1 %119, label %120, label %199

120:                                              ; preds = %114
  %121 = icmp eq %"class.v8::internal::BitVector"* %4, null
  %122 = getelementptr inbounds %"class.v8::internal::BitVector", %"class.v8::internal::BitVector"* %4, i64 0, i32 1
  %123 = getelementptr inbounds %"class.v8::internal::BitVector", %"class.v8::internal::BitVector"* %4, i64 0, i32 2
  %124 = getelementptr inbounds %"union.v8::internal::BitVector::DataStorage", %"union.v8::internal::BitVector::DataStorage"* %123, i64 0, i32 0
  %125 = bitcast %"union.v8::internal::BitVector::DataStorage"* %123 to i64*
  br i1 %121, label %126, label %144

126:                                              ; preds = %120, %131
  %127 = phi i64 [ %138, %131 ], [ %116, %120 ]
  %128 = phi i64 [ %142, %131 ], [ %115, %120 ]
  %129 = phi i32 [ %134, %131 ], [ 0, %120 ]
  %130 = icmp eq i64 %127, 8
  br i1 %130, label %188, label %131

131:                                              ; preds = %126
  %132 = trunc i64 %127 to i32
  %133 = shl i32 1, %132
  %134 = or i32 %133, %129
  %135 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2, i64 %128
  %136 = bitcast %"class.v8::internal::compiler::Node"** %135 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = add nuw nsw i64 %127, 1
  %139 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %30, i64 %6, i32 0, i64 %127
  %140 = bitcast %"class.v8::internal::compiler::Node"** %139 to i64*
  store i64 %137, i64* %140, align 8
  %141 = load i64, i64* %1, align 8
  %142 = add i64 %141, 1
  store i64 %142, i64* %1, align 8
  %143 = icmp ult i64 %142, %3
  br i1 %143, label %126, label %188

144:                                              ; preds = %120, %181
  %145 = phi i64 [ %182, %181 ], [ %116, %120 ]
  %146 = phi i64 [ %186, %181 ], [ %115, %120 ]
  %147 = phi i64 [ %185, %181 ], [ %116, %120 ]
  %148 = phi i32 [ %184, %181 ], [ 0, %120 ]
  %149 = icmp ult i64 %145, 8
  %150 = icmp ult i64 %147, 31
  %151 = and i1 %149, %150
  br i1 %151, label %152, label %188

152:                                              ; preds = %144
  %153 = trunc i64 %146 to i32
  %154 = add nsw i32 %153, %5
  %155 = load i32, i32* %122, align 4
  %156 = icmp eq i32 %155, 1
  br i1 %156, label %162, label %157

157:                                              ; preds = %152
  %158 = load i64*, i64** %124, align 8
  %159 = sdiv i32 %154, 64
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds i64, i64* %158, i64 %160
  br label %162

162:                                              ; preds = %157, %152
  %163 = phi i64* [ %161, %157 ], [ %125, %152 ]
  %164 = load i64, i64* %163, align 8
  %165 = srem i32 %154, 64
  %166 = zext i32 %165 to i64
  %167 = shl i64 1, %166
  %168 = and i64 %164, %167
  %169 = icmp eq i64 %168, 0
  br i1 %169, label %181, label %170

170:                                              ; preds = %162
  %171 = trunc i64 %147 to i32
  %172 = shl i32 1, %171
  %173 = or i32 %172, %148
  %174 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2, i64 %146
  %175 = bitcast %"class.v8::internal::compiler::Node"** %174 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = add nuw nsw i64 %145, 1
  %178 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %30, i64 %6, i32 0, i64 %145
  %179 = bitcast %"class.v8::internal::compiler::Node"** %178 to i64*
  store i64 %176, i64* %179, align 8
  %180 = load i64, i64* %1, align 8
  br label %181

181:                                              ; preds = %170, %162
  %182 = phi i64 [ %145, %162 ], [ %177, %170 ]
  %183 = phi i64 [ %146, %162 ], [ %180, %170 ]
  %184 = phi i32 [ %148, %162 ], [ %173, %170 ]
  %185 = add nuw nsw i64 %147, 1
  %186 = add i64 %183, 1
  store i64 %186, i64* %1, align 8
  %187 = icmp ult i64 %186, %3
  br i1 %187, label %144, label %188

188:                                              ; preds = %144, %181, %131, %126
  %189 = phi i64 [ 8, %126 ], [ %138, %131 ], [ %145, %144 ], [ %182, %181 ]
  %190 = phi i32 [ %129, %126 ], [ %134, %131 ], [ %148, %144 ], [ %184, %181 ]
  %191 = phi i64 [ 8, %126 ], [ %138, %131 ], [ %147, %144 ], [ %185, %181 ]
  %192 = trunc i64 %191 to i32
  %193 = shl i32 1, %192
  %194 = trunc i64 %116 to i32
  %195 = shl nsw i32 -1, %194
  %196 = xor i32 %195, -1
  %197 = or i32 %190, %196
  %198 = or i32 %197, %193
  br label %212

199:                                              ; preds = %114
  %200 = tail call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler16StateValuesCache9BuildTreeEPmPPNS1_4NodeEmPKNS0_9BitVectorEim(%"class.v8::internal::compiler::StateValuesCache"* %0, i64* %1, %"class.v8::internal::compiler::Node"** %2, i64 %3, %"class.v8::internal::BitVector"* %4, i32 %5, i64 %37)
  %201 = add nuw nsw i64 %116, 1
  %202 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %30, i64 %6, i32 0, i64 %116
  store %"class.v8::internal::compiler::Node"* %200, %"class.v8::internal::compiler::Node"** %202, align 8
  %203 = load i64, i64* %1, align 8
  %204 = icmp ult i64 %203, %3
  %205 = icmp ult i64 %201, 8
  %206 = and i1 %205, %204
  br i1 %206, label %114, label %207

207:                                              ; preds = %199
  %208 = icmp eq i64 %116, 0
  br i1 %208, label %209, label %212

209:                                              ; preds = %207
  %210 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %31, i64 0, i32 0, i64 0
  %211 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %210, align 8
  br label %217

212:                                              ; preds = %35, %188, %107, %207
  %213 = phi i32 [ 0, %207 ], [ %198, %188 ], [ %113, %107 ], [ 0, %35 ]
  %214 = phi i64 [ %201, %207 ], [ %189, %188 ], [ %108, %107 ], [ 0, %35 ]
  %215 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %31, i64 0, i32 0, i64 0
  %216 = tail call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler16StateValuesCache22GetValuesNodeFromCacheEPPNS1_4NodeEmNS1_15SparseInputMaskE(%"class.v8::internal::compiler::StateValuesCache"* %0, %"class.v8::internal::compiler::Node"** %215, i64 %214, i32 %213)
  br label %217

217:                                              ; preds = %212, %209
  %218 = phi %"class.v8::internal::compiler::Node"* [ %211, %209 ], [ %216, %212 ]
  ret %"class.v8::internal::compiler::Node"* %218
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler16StateValuesCache16GetNodeForValuesEPPNS1_4NodeEmPKNS0_9BitVectorEi(%"class.v8::internal::compiler::StateValuesCache"*, %"class.v8::internal::compiler::Node"** nocapture, i64, %"class.v8::internal::BitVector"*, i32) local_unnamed_addr #0 align 2 {
  %6 = alloca i64, align 8
  %7 = icmp eq i64 %2, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %5
  %9 = icmp ugt i64 %2, 8
  br i1 %9, label %23, label %29

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesCache", %"class.v8::internal::compiler::StateValuesCache"* %0, i64 0, i32 3
  %12 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %11, align 8
  %13 = icmp eq %"class.v8::internal::compiler::Node"* %12, null
  br i1 %13, label %14, label %33

14:                                               ; preds = %10
  %15 = bitcast %"class.v8::internal::compiler::StateValuesCache"* %0 to %"class.v8::internal::compiler::MachineGraph"**
  %16 = load %"class.v8::internal::compiler::MachineGraph"*, %"class.v8::internal::compiler::MachineGraph"** %15, align 8
  %17 = getelementptr inbounds %"class.v8::internal::compiler::MachineGraph", %"class.v8::internal::compiler::MachineGraph"* %16, i64 0, i32 0
  %18 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %17, align 8
  %19 = getelementptr inbounds %"class.v8::internal::compiler::MachineGraph", %"class.v8::internal::compiler::MachineGraph"* %16, i64 0, i32 1
  %20 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %19, align 8
  %21 = tail call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder11StateValuesEiNS1_15SparseInputMaskE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %20, i32 0, i32 0) #6
  %22 = tail call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %18, %"class.v8::internal::compiler::Operator"* %21, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #6
  store %"class.v8::internal::compiler::Node"* %22, %"class.v8::internal::compiler::Node"** %11, align 8
  br label %33

23:                                               ; preds = %8, %23
  %24 = phi i64 [ %27, %23 ], [ 8, %8 ]
  %25 = phi i64 [ %26, %23 ], [ 0, %8 ]
  %26 = add i64 %25, 1
  %27 = shl i64 %24, 3
  %28 = icmp ult i64 %27, %2
  br i1 %28, label %23, label %29

29:                                               ; preds = %23, %8
  %30 = phi i64 [ 0, %8 ], [ %26, %23 ]
  %31 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #6
  store i64 0, i64* %6, align 8
  %32 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler16StateValuesCache9BuildTreeEPmPPNS1_4NodeEmPKNS0_9BitVectorEim(%"class.v8::internal::compiler::StateValuesCache"* %0, i64* nonnull %6, %"class.v8::internal::compiler::Node"** %1, i64 %2, %"class.v8::internal::BitVector"* %3, i32 %4, i64 %30)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #6
  br label %33

33:                                               ; preds = %14, %10, %29
  %34 = phi %"class.v8::internal::compiler::Node"* [ %32, %29 ], [ %22, %14 ], [ %12, %10 ]
  ret %"class.v8::internal::compiler::Node"* %34
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler17StateValuesAccess8iteratorC2EPNS1_4NodeE(%"class.v8::internal::compiler::StateValuesAccess::iterator"*, %"class.v8::internal::compiler::Node"*) unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::compiler::SparseInputMask::InputIterator", align 8
  %4 = alloca %"class.v8::internal::compiler::SparseInputMask", align 4
  %5 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesAccess::iterator", %"class.v8::internal::compiler::StateValuesAccess::iterator"* %0, i64 0, i32 1
  store i32 0, i32* %5, align 8
  %6 = bitcast %"class.v8::internal::compiler::SparseInputMask::InputIterator"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #6
  %7 = bitcast %"class.v8::internal::compiler::SparseInputMask"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #6
  %8 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %1, i64 0, i32 0
  %9 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %8, align 8
  %10 = tail call i32 @_ZN2v88internal8compiler17SparseInputMaskOfEPKNS1_8OperatorE(%"class.v8::internal::compiler::Operator"* %9) #6
  %11 = getelementptr inbounds %"class.v8::internal::compiler::SparseInputMask", %"class.v8::internal::compiler::SparseInputMask"* %4, i64 0, i32 0
  store i32 %10, i32* %11, align 4
  call void @_ZN2v88internal8compiler15SparseInputMask17IterateOverInputsEPNS1_4NodeE(%"class.v8::internal::compiler::SparseInputMask::InputIterator"* nonnull sret %3, %"class.v8::internal::compiler::SparseInputMask"* nonnull %4, %"class.v8::internal::compiler::Node"* %1) #6
  %12 = load i32, i32* %5, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesAccess::iterator", %"class.v8::internal::compiler::StateValuesAccess::iterator"* %0, i64 0, i32 0, i64 %13
  %15 = bitcast %"class.v8::internal::compiler::SparseInputMask::InputIterator"* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* nonnull align 8 %6, i64 20, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #6
  call void @_ZN2v88internal8compiler17StateValuesAccess8iterator11EnsureValidEv(%"class.v8::internal::compiler::StateValuesAccess::iterator"* %0)
  ret void
}

declare void @_ZN2v88internal8compiler15SparseInputMask17IterateOverInputsEPNS1_4NodeE(%"class.v8::internal::compiler::SparseInputMask::InputIterator"* sret, %"class.v8::internal::compiler::SparseInputMask"*, %"class.v8::internal::compiler::Node"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler17StateValuesAccess8iterator11EnsureValidEv(%"class.v8::internal::compiler::StateValuesAccess::iterator"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::compiler::SparseInputMask::InputIterator", align 8
  %3 = alloca %"class.v8::internal::compiler::SparseInputMask", align 4
  %4 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesAccess::iterator", %"class.v8::internal::compiler::StateValuesAccess::iterator"* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesAccess::iterator", %"class.v8::internal::compiler::StateValuesAccess::iterator"* %0, i64 0, i32 0, i64 %6
  %8 = call zeroext i1 @_ZNK2v88internal8compiler15SparseInputMask13InputIterator6IsRealEv(%"class.v8::internal::compiler::SparseInputMask::InputIterator"* %7) #6
  br i1 %8, label %9, label %48

9:                                                ; preds = %1
  %10 = bitcast %"class.v8::internal::compiler::SparseInputMask::InputIterator"* %2 to i8*
  %11 = bitcast %"class.v8::internal::compiler::SparseInputMask"* %3 to i8*
  %12 = getelementptr inbounds %"class.v8::internal::compiler::SparseInputMask", %"class.v8::internal::compiler::SparseInputMask"* %3, i64 0, i32 0
  br label %13

13:                                               ; preds = %9, %43
  %14 = phi %"class.v8::internal::compiler::SparseInputMask::InputIterator"* [ %7, %9 ], [ %46, %43 ]
  %15 = call zeroext i1 @_ZNK2v88internal8compiler15SparseInputMask13InputIterator5IsEndEv(%"class.v8::internal::compiler::SparseInputMask::InputIterator"* %14) #6
  br i1 %15, label %16, label %23

16:                                               ; preds = %13
  %17 = load i32, i32* %4, align 8
  %18 = add nsw i32 %17, -1
  store i32 %18, i32* %4, align 8
  %19 = icmp slt i32 %17, 1
  br i1 %19, label %48, label %20

20:                                               ; preds = %16
  %21 = sext i32 %18 to i64
  %22 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesAccess::iterator", %"class.v8::internal::compiler::StateValuesAccess::iterator"* %0, i64 0, i32 0, i64 %21
  call void @_ZN2v88internal8compiler15SparseInputMask13InputIterator7AdvanceEv(%"class.v8::internal::compiler::SparseInputMask::InputIterator"* %22) #6
  br label %43

23:                                               ; preds = %13
  %24 = call %"class.v8::internal::compiler::Node"* @_ZNK2v88internal8compiler15SparseInputMask13InputIterator7GetRealEv(%"class.v8::internal::compiler::SparseInputMask::InputIterator"* %14) #6
  %25 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %24, i64 0, i32 0
  %26 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %25, align 8
  %27 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %26, i64 0, i32 2
  %28 = load i16, i16* %27, align 8
  %29 = and i16 %28, -2
  %30 = icmp eq i16 %29, 42
  br i1 %30, label %31, label %48

31:                                               ; preds = %23
  %32 = load i32, i32* %4, align 8
  %33 = add nsw i32 %32, 1
  store i32 %33, i32* %4, align 8
  %34 = icmp slt i32 %33, 8
  br i1 %34, label %36, label %35, !prof !3

35:                                               ; preds = %31
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0)) #7
  unreachable

36:                                               ; preds = %31
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #6
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #6
  %37 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %25, align 8
  %38 = call i32 @_ZN2v88internal8compiler17SparseInputMaskOfEPKNS1_8OperatorE(%"class.v8::internal::compiler::Operator"* %37) #6
  store i32 %38, i32* %12, align 4
  call void @_ZN2v88internal8compiler15SparseInputMask17IterateOverInputsEPNS1_4NodeE(%"class.v8::internal::compiler::SparseInputMask::InputIterator"* nonnull sret %2, %"class.v8::internal::compiler::SparseInputMask"* nonnull %3, %"class.v8::internal::compiler::Node"* %24) #6
  %39 = load i32, i32* %4, align 8
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesAccess::iterator", %"class.v8::internal::compiler::StateValuesAccess::iterator"* %0, i64 0, i32 0, i64 %40
  %42 = bitcast %"class.v8::internal::compiler::SparseInputMask::InputIterator"* %41 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* nonnull align 8 %10, i64 20, i1 false) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #6
  br label %43

43:                                               ; preds = %36, %20
  %44 = load i32, i32* %4, align 8
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesAccess::iterator", %"class.v8::internal::compiler::StateValuesAccess::iterator"* %0, i64 0, i32 0, i64 %45
  %47 = call zeroext i1 @_ZNK2v88internal8compiler15SparseInputMask13InputIterator6IsRealEv(%"class.v8::internal::compiler::SparseInputMask::InputIterator"* %46) #6
  br i1 %47, label %13, label %48

48:                                               ; preds = %16, %23, %43, %1
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.v8::internal::compiler::SparseInputMask::InputIterator"* @_ZN2v88internal8compiler17StateValuesAccess8iterator3TopEv(%"class.v8::internal::compiler::StateValuesAccess::iterator"* readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesAccess::iterator", %"class.v8::internal::compiler::StateValuesAccess::iterator"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesAccess::iterator", %"class.v8::internal::compiler::StateValuesAccess::iterator"* %0, i64 0, i32 0, i64 %4
  ret %"class.v8::internal::compiler::SparseInputMask::InputIterator"* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler17StateValuesAccess8iterator4PushEPNS1_4NodeE(%"class.v8::internal::compiler::StateValuesAccess::iterator"* nocapture, %"class.v8::internal::compiler::Node"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::compiler::SparseInputMask::InputIterator", align 8
  %4 = alloca %"class.v8::internal::compiler::SparseInputMask", align 4
  %5 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesAccess::iterator", %"class.v8::internal::compiler::StateValuesAccess::iterator"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = add nsw i32 %6, 1
  store i32 %7, i32* %5, align 8
  %8 = icmp slt i32 %7, 8
  br i1 %8, label %10, label %9, !prof !3

9:                                                ; preds = %2
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0)) #7
  unreachable

10:                                               ; preds = %2
  %11 = bitcast %"class.v8::internal::compiler::SparseInputMask::InputIterator"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #6
  %12 = bitcast %"class.v8::internal::compiler::SparseInputMask"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #6
  %13 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %1, i64 0, i32 0
  %14 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %13, align 8
  %15 = tail call i32 @_ZN2v88internal8compiler17SparseInputMaskOfEPKNS1_8OperatorE(%"class.v8::internal::compiler::Operator"* %14) #6
  %16 = getelementptr inbounds %"class.v8::internal::compiler::SparseInputMask", %"class.v8::internal::compiler::SparseInputMask"* %4, i64 0, i32 0
  store i32 %15, i32* %16, align 4
  call void @_ZN2v88internal8compiler15SparseInputMask17IterateOverInputsEPNS1_4NodeE(%"class.v8::internal::compiler::SparseInputMask::InputIterator"* nonnull sret %3, %"class.v8::internal::compiler::SparseInputMask"* nonnull %4, %"class.v8::internal::compiler::Node"* %1) #6
  %17 = load i32, i32* %5, align 8
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesAccess::iterator", %"class.v8::internal::compiler::StateValuesAccess::iterator"* %0, i64 0, i32 0, i64 %18
  %20 = bitcast %"class.v8::internal::compiler::SparseInputMask::InputIterator"* %19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* nonnull align 8 %11, i64 20, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #6
  ret void
}

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #5

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler17StateValuesAccess8iterator3PopEv(%"class.v8::internal::compiler::StateValuesAccess::iterator"* nocapture) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesAccess::iterator", %"class.v8::internal::compiler::StateValuesAccess::iterator"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = add nsw i32 %3, -1
  store i32 %4, i32* %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler17StateValuesAccess8iterator7AdvanceEv(%"class.v8::internal::compiler::StateValuesAccess::iterator"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesAccess::iterator", %"class.v8::internal::compiler::StateValuesAccess::iterator"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesAccess::iterator", %"class.v8::internal::compiler::StateValuesAccess::iterator"* %0, i64 0, i32 0, i64 %4
  tail call void @_ZN2v88internal8compiler15SparseInputMask13InputIterator7AdvanceEv(%"class.v8::internal::compiler::SparseInputMask::InputIterator"* %5) #6
  tail call void @_ZN2v88internal8compiler17StateValuesAccess8iterator11EnsureValidEv(%"class.v8::internal::compiler::StateValuesAccess::iterator"* %0)
  ret void
}

declare void @_ZN2v88internal8compiler15SparseInputMask13InputIterator7AdvanceEv(%"class.v8::internal::compiler::SparseInputMask::InputIterator"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN2v88internal8compiler17StateValuesAccess8iterator19AdvanceTillNotEmptyEv(%"class.v8::internal::compiler::StateValuesAccess::iterator"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesAccess::iterator", %"class.v8::internal::compiler::StateValuesAccess::iterator"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %19, label %5

5:                                                ; preds = %1, %11
  %6 = phi i32 [ %17, %11 ], [ %3, %1 ]
  %7 = phi i64 [ %16, %11 ], [ 0, %1 ]
  %8 = sext i32 %6 to i64
  %9 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesAccess::iterator", %"class.v8::internal::compiler::StateValuesAccess::iterator"* %0, i64 0, i32 0, i64 %8
  %10 = tail call zeroext i1 @_ZNK2v88internal8compiler15SparseInputMask13InputIterator6IsRealEv(%"class.v8::internal::compiler::SparseInputMask::InputIterator"* %9) #6
  br i1 %10, label %19, label %11

11:                                               ; preds = %5
  %12 = load i32, i32* %2, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesAccess::iterator", %"class.v8::internal::compiler::StateValuesAccess::iterator"* %0, i64 0, i32 0, i64 %13
  %15 = tail call i64 @_ZN2v88internal8compiler15SparseInputMask13InputIterator22AdvanceToNextRealOrEndEv(%"class.v8::internal::compiler::SparseInputMask::InputIterator"* %14) #6
  %16 = add i64 %15, %7
  tail call void @_ZN2v88internal8compiler17StateValuesAccess8iterator11EnsureValidEv(%"class.v8::internal::compiler::StateValuesAccess::iterator"* %0)
  %17 = load i32, i32* %2, align 8
  %18 = icmp slt i32 %17, 0
  br i1 %18, label %19, label %5

19:                                               ; preds = %11, %5, %1
  %20 = phi i64 [ 0, %1 ], [ %7, %5 ], [ %16, %11 ]
  ret i64 %20
}

declare i64 @_ZN2v88internal8compiler15SparseInputMask13InputIterator22AdvanceToNextRealOrEndEv(%"class.v8::internal::compiler::SparseInputMask::InputIterator"*) local_unnamed_addr #2

declare zeroext i1 @_ZNK2v88internal8compiler15SparseInputMask13InputIterator5IsEndEv(%"class.v8::internal::compiler::SparseInputMask::InputIterator"*) local_unnamed_addr #2

declare %"class.v8::internal::compiler::Node"* @_ZNK2v88internal8compiler15SparseInputMask13InputIterator7GetRealEv(%"class.v8::internal::compiler::SparseInputMask::InputIterator"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler17StateValuesAccess8iterator4nodeEv(%"class.v8::internal::compiler::StateValuesAccess::iterator"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesAccess::iterator", %"class.v8::internal::compiler::StateValuesAccess::iterator"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesAccess::iterator", %"class.v8::internal::compiler::StateValuesAccess::iterator"* %0, i64 0, i32 0, i64 %4
  %6 = tail call zeroext i1 @_ZNK2v88internal8compiler15SparseInputMask13InputIterator6IsRealEv(%"class.v8::internal::compiler::SparseInputMask::InputIterator"* %5) #6
  br i1 %6, label %7, label %9

7:                                                ; preds = %1
  %8 = tail call %"class.v8::internal::compiler::Node"* @_ZNK2v88internal8compiler15SparseInputMask13InputIterator7GetRealEv(%"class.v8::internal::compiler::SparseInputMask::InputIterator"* %5) #6
  br label %9

9:                                                ; preds = %1, %7
  %10 = phi %"class.v8::internal::compiler::Node"* [ %8, %7 ], [ null, %1 ]
  ret %"class.v8::internal::compiler::Node"* %10
}

; Function Attrs: nounwind ssp uwtable
define hidden i16 @_ZN2v88internal8compiler17StateValuesAccess8iterator4typeEv(%"class.v8::internal::compiler::StateValuesAccess::iterator"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesAccess::iterator", %"class.v8::internal::compiler::StateValuesAccess::iterator"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesAccess::iterator", %"class.v8::internal::compiler::StateValuesAccess::iterator"* %0, i64 0, i32 0, i64 %4, i32 2
  %6 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %6, i64 0, i32 0
  %8 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %8, i64 0, i32 2
  %10 = load i16, i16* %9, align 8
  %11 = icmp eq i16 %10, 42
  br i1 %11, label %24, label %12

12:                                               ; preds = %1
  %13 = tail call %"class.v8::internal::ZoneVector.673"* @_ZN2v88internal8compiler14MachineTypesOfEPKNS1_8OperatorE(%"class.v8::internal::compiler::Operator"* %8) #6
  %14 = load i32, i32* %2, align 8
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesAccess::iterator", %"class.v8::internal::compiler::StateValuesAccess::iterator"* %0, i64 0, i32 0, i64 %15, i32 3
  %17 = load i32, i32* %16, align 8
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds %"class.v8::internal::ZoneVector.673", %"class.v8::internal::ZoneVector.673"* %13, i64 0, i32 0, i32 0, i32 0
  %20 = load %"class.v8::internal::MachineType"*, %"class.v8::internal::MachineType"** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::MachineType", %"class.v8::internal::MachineType"* %20, i64 %18
  %22 = bitcast %"class.v8::internal::MachineType"* %21 to i16*
  %23 = load i16, i16* %22, align 1
  br label %24

24:                                               ; preds = %1, %12
  %25 = phi i16 [ %23, %12 ], [ 1801, %1 ]
  ret i16 %25
}

declare %"class.v8::internal::ZoneVector.673"* @_ZN2v88internal8compiler14MachineTypesOfEPKNS1_8OperatorE(%"class.v8::internal::compiler::Operator"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal8compiler17StateValuesAccess8iteratorneERKS3_(%"class.v8::internal::compiler::StateValuesAccess::iterator"* nocapture readonly, %"class.v8::internal::compiler::StateValuesAccess::iterator"* nocapture readonly dereferenceable(200)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesAccess::iterator", %"class.v8::internal::compiler::StateValuesAccess::iterator"* %1, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = icmp slt i32 %4, 0
  br i1 %5, label %7, label %6, !prof !3

6:                                                ; preds = %2
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0)) #7
  unreachable

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesAccess::iterator", %"class.v8::internal::compiler::StateValuesAccess::iterator"* %0, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = icmp sgt i32 %9, -1
  ret i1 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(200) %"class.v8::internal::compiler::StateValuesAccess::iterator"* @_ZN2v88internal8compiler17StateValuesAccess8iteratorppEv(%"class.v8::internal::compiler::StateValuesAccess::iterator"* returned) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesAccess::iterator", %"class.v8::internal::compiler::StateValuesAccess::iterator"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesAccess::iterator", %"class.v8::internal::compiler::StateValuesAccess::iterator"* %0, i64 0, i32 0, i64 %4
  tail call void @_ZN2v88internal8compiler15SparseInputMask13InputIterator7AdvanceEv(%"class.v8::internal::compiler::SparseInputMask::InputIterator"* %5) #6
  tail call void @_ZN2v88internal8compiler17StateValuesAccess8iterator11EnsureValidEv(%"class.v8::internal::compiler::StateValuesAccess::iterator"* %0) #6
  ret %"class.v8::internal::compiler::StateValuesAccess::iterator"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden { %"class.v8::internal::compiler::Node"*, i64 } @_ZN2v88internal8compiler17StateValuesAccess8iteratordeEv(%"class.v8::internal::compiler::StateValuesAccess::iterator"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesAccess::iterator", %"class.v8::internal::compiler::StateValuesAccess::iterator"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesAccess::iterator", %"class.v8::internal::compiler::StateValuesAccess::iterator"* %0, i64 0, i32 0, i64 %4
  %6 = tail call zeroext i1 @_ZNK2v88internal8compiler15SparseInputMask13InputIterator6IsRealEv(%"class.v8::internal::compiler::SparseInputMask::InputIterator"* %5) #6
  br i1 %6, label %7, label %9

7:                                                ; preds = %1
  %8 = tail call %"class.v8::internal::compiler::Node"* @_ZNK2v88internal8compiler15SparseInputMask13InputIterator7GetRealEv(%"class.v8::internal::compiler::SparseInputMask::InputIterator"* %5) #6
  br label %9

9:                                                ; preds = %1, %7
  %10 = phi %"class.v8::internal::compiler::Node"* [ %8, %7 ], [ null, %1 ]
  %11 = load i32, i32* %2, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesAccess::iterator", %"class.v8::internal::compiler::StateValuesAccess::iterator"* %0, i64 0, i32 0, i64 %12, i32 2
  %14 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %14, i64 0, i32 0
  %16 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %15, align 8
  %17 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %16, i64 0, i32 2
  %18 = load i16, i16* %17, align 8
  %19 = icmp eq i16 %18, 42
  br i1 %19, label %33, label %20

20:                                               ; preds = %9
  %21 = tail call %"class.v8::internal::ZoneVector.673"* @_ZN2v88internal8compiler14MachineTypesOfEPKNS1_8OperatorE(%"class.v8::internal::compiler::Operator"* %16) #6
  %22 = load i32, i32* %2, align 8
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesAccess::iterator", %"class.v8::internal::compiler::StateValuesAccess::iterator"* %0, i64 0, i32 0, i64 %23, i32 3
  %25 = load i32, i32* %24, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds %"class.v8::internal::ZoneVector.673", %"class.v8::internal::ZoneVector.673"* %21, i64 0, i32 0, i32 0, i32 0
  %28 = load %"class.v8::internal::MachineType"*, %"class.v8::internal::MachineType"** %27, align 8
  %29 = getelementptr inbounds %"class.v8::internal::MachineType", %"class.v8::internal::MachineType"* %28, i64 %26
  %30 = bitcast %"class.v8::internal::MachineType"* %29 to i16*
  %31 = load i16, i16* %30, align 1
  %32 = zext i16 %31 to i64
  br label %33

33:                                               ; preds = %9, %20
  %34 = phi i64 [ %32, %20 ], [ 1801, %9 ]
  %35 = insertvalue { %"class.v8::internal::compiler::Node"*, i64 } undef, %"class.v8::internal::compiler::Node"* %10, 0
  %36 = insertvalue { %"class.v8::internal::compiler::Node"*, i64 } %35, i64 %34, 1
  ret { %"class.v8::internal::compiler::Node"*, i64 } %36
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK2v88internal8compiler17StateValuesAccess4sizeEv(%"class.v8::internal::compiler::StateValuesAccess"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::compiler::SparseInputMask", align 4
  %3 = alloca %"class.v8::internal::compiler::SparseInputMask::InputIterator", align 8
  %4 = alloca %"class.v8::internal::compiler::StateValuesAccess", align 8
  %5 = bitcast %"class.v8::internal::compiler::SparseInputMask"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #6
  %6 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesAccess", %"class.v8::internal::compiler::StateValuesAccess"* %0, i64 0, i32 0
  %7 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %7, i64 0, i32 0
  %9 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %8, align 8
  %10 = tail call i32 @_ZN2v88internal8compiler17SparseInputMaskOfEPKNS1_8OperatorE(%"class.v8::internal::compiler::Operator"* %9) #6
  %11 = getelementptr inbounds %"class.v8::internal::compiler::SparseInputMask", %"class.v8::internal::compiler::SparseInputMask"* %2, i64 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = bitcast %"class.v8::internal::compiler::SparseInputMask::InputIterator"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #6
  %13 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6, align 8
  call void @_ZN2v88internal8compiler15SparseInputMask17IterateOverInputsEPNS1_4NodeE(%"class.v8::internal::compiler::SparseInputMask::InputIterator"* nonnull sret %3, %"class.v8::internal::compiler::SparseInputMask"* nonnull %2, %"class.v8::internal::compiler::Node"* %13) #6
  %14 = call zeroext i1 @_ZNK2v88internal8compiler15SparseInputMask13InputIterator5IsEndEv(%"class.v8::internal::compiler::SparseInputMask::InputIterator"* nonnull %3) #6
  br i1 %14, label %39, label %15

15:                                               ; preds = %1
  %16 = bitcast %"class.v8::internal::compiler::StateValuesAccess"* %4 to i8*
  %17 = getelementptr inbounds %"class.v8::internal::compiler::StateValuesAccess", %"class.v8::internal::compiler::StateValuesAccess"* %4, i64 0, i32 0
  br label %18

18:                                               ; preds = %15, %36
  %19 = phi i64 [ 0, %15 ], [ %37, %36 ]
  %20 = call zeroext i1 @_ZNK2v88internal8compiler15SparseInputMask13InputIterator6IsRealEv(%"class.v8::internal::compiler::SparseInputMask::InputIterator"* nonnull %3) #6
  br i1 %20, label %23, label %21

21:                                               ; preds = %18
  %22 = add i64 %19, 1
  br label %36

23:                                               ; preds = %18
  %24 = call %"class.v8::internal::compiler::Node"* @_ZNK2v88internal8compiler15SparseInputMask13InputIterator7GetRealEv(%"class.v8::internal::compiler::SparseInputMask::InputIterator"* nonnull %3) #6
  %25 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %24, i64 0, i32 0
  %26 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %25, align 8
  %27 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %26, i64 0, i32 2
  %28 = load i16, i16* %27, align 8
  %29 = and i16 %28, -2
  %30 = icmp eq i16 %29, 42
  br i1 %30, label %31, label %33

31:                                               ; preds = %23
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #6
  store %"class.v8::internal::compiler::Node"* %24, %"class.v8::internal::compiler::Node"** %17, align 8
  %32 = call i64 @_ZNK2v88internal8compiler17StateValuesAccess4sizeEv(%"class.v8::internal::compiler::StateValuesAccess"* nonnull %4)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #6
  br label %33

33:                                               ; preds = %23, %31
  %34 = phi i64 [ %32, %31 ], [ 1, %23 ]
  %35 = add i64 %34, %19
  br label %36

36:                                               ; preds = %21, %33
  %37 = phi i64 [ %22, %21 ], [ %35, %33 ]
  call void @_ZN2v88internal8compiler15SparseInputMask13InputIterator7AdvanceEv(%"class.v8::internal::compiler::SparseInputMask::InputIterator"* nonnull %3) #6
  %38 = call zeroext i1 @_ZNK2v88internal8compiler15SparseInputMask13InputIterator5IsEndEv(%"class.v8::internal::compiler::SparseInputMask::InputIterator"* nonnull %3) #6
  br i1 %38, label %39, label %18

39:                                               ; preds = %36, %1
  %40 = phi i64 [ 0, %1 ], [ %37, %36 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #6
  ret i64 %40
}

declare zeroext i1 @_ZNK2v88internal8compiler15SparseInputMask13InputIterator6IsRealEv(%"class.v8::internal::compiler::SparseInputMask::InputIterator"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_5arrayIPN2v88internal8compiler4NodeELm8EEENS3_13ZoneAllocatorIS7_EEE8__appendEm(%"class.std::__1::vector.667"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.667", %"class.std::__1::vector.667"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.std::__1::array"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.667", %"class.std::__1::vector.667"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.std::__1::array"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 6
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.std::__1::array"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"struct.std::__1::array", %"struct.std::__1::array"* %13, i64 %18, i32 0, i64 0
  %20 = bitcast %"class.v8::internal::compiler::Node"** %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 64
  %25 = and i64 %24, -64
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %25, i1 false) #6
  %26 = ptrtoint %"struct.std::__1::array"* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  ret void

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.667"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 6
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 33554431
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.667"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #7
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 6
  %41 = icmp ult i64 %40, 16777215
  br i1 %41, label %42, label %47

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 5
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %65, label %47

47:                                               ; preds = %38, %42
  %48 = phi i64 [ %45, %42 ], [ 33554431, %38 ]
  %49 = getelementptr inbounds %"class.std::__1::vector.667", %"class.std::__1::vector.667"* %0, i64 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %50 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %49, align 8
  %51 = shl i64 %48, 6
  %52 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %50, i64 0, i32 2
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %50, i64 0, i32 3
  %55 = load i64, i64* %54, align 8
  %56 = sub i64 %55, %53
  %57 = icmp ugt i64 %51, %56
  br i1 %57, label %58, label %60, !prof !2

58:                                               ; preds = %47
  %59 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %50, i64 %51) #6
  br label %62

60:                                               ; preds = %47
  %61 = add i64 %53, %51
  store i64 %61, i64* %52, align 8
  br label %62

62:                                               ; preds = %60, %58
  %63 = phi i64 [ %59, %58 ], [ %53, %60 ]
  %64 = inttoptr i64 %63 to %"struct.std::__1::array"*
  br label %65

65:                                               ; preds = %42, %62
  %66 = phi i64 [ %48, %62 ], [ 0, %42 ]
  %67 = phi %"struct.std::__1::array"* [ %64, %62 ], [ null, %42 ]
  %68 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %67, i64 %33
  %69 = ptrtoint %"struct.std::__1::array"* %68 to i64
  %70 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %67, i64 %66
  %71 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %68, i64 %1
  %72 = shl nsw i64 %1, 6
  %73 = add i64 %72, -64
  %74 = lshr exact i64 %73, 6
  %75 = add nuw nsw i64 %74, 1
  %76 = and i64 %75, 7
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %89, label %78

78:                                               ; preds = %65, %78
  %79 = phi %"struct.std::__1::array"* [ %83, %78 ], [ %68, %65 ]
  %80 = phi i64 [ %84, %78 ], [ %69, %65 ]
  %81 = phi i64 [ %85, %78 ], [ %76, %65 ]
  %82 = inttoptr i64 %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %82, i8 0, i64 64, i1 false) #6
  %83 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %79, i64 1
  %84 = ptrtoint %"struct.std::__1::array"* %83 to i64
  %85 = add i64 %81, -1
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %87, label %78, !llvm.loop !4

87:                                               ; preds = %78
  %88 = ptrtoint %"struct.std::__1::array"* %83 to i64
  br label %89

89:                                               ; preds = %65, %87
  %90 = phi %"struct.std::__1::array"* [ %68, %65 ], [ %83, %87 ]
  %91 = phi i64 [ %69, %65 ], [ %88, %87 ]
  %92 = icmp ult i64 %73, 448
  br i1 %92, label %114, label %93

93:                                               ; preds = %89, %93
  %94 = phi %"struct.std::__1::array"* [ %111, %93 ], [ %90, %89 ]
  %95 = phi i64 [ %112, %93 ], [ %91, %89 ]
  %96 = inttoptr i64 %95 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %96, i8 0, i64 64, i1 false) #6
  %97 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %94, i64 1
  %98 = bitcast %"struct.std::__1::array"* %97 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %98, i8 0, i64 64, i1 false) #6
  %99 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %94, i64 2
  %100 = bitcast %"struct.std::__1::array"* %99 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %100, i8 0, i64 64, i1 false) #6
  %101 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %94, i64 3
  %102 = bitcast %"struct.std::__1::array"* %101 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %102, i8 0, i64 64, i1 false) #6
  %103 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %94, i64 4
  %104 = bitcast %"struct.std::__1::array"* %103 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 64, i1 false) #6
  %105 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %94, i64 5
  %106 = bitcast %"struct.std::__1::array"* %105 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %106, i8 0, i64 64, i1 false) #6
  %107 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %94, i64 6
  %108 = bitcast %"struct.std::__1::array"* %107 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %108, i8 0, i64 64, i1 false) #6
  %109 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %94, i64 7
  %110 = bitcast %"struct.std::__1::array"* %109 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %110, i8 0, i64 64, i1 false) #6
  %111 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %94, i64 8
  %112 = ptrtoint %"struct.std::__1::array"* %111 to i64
  %113 = icmp eq %"struct.std::__1::array"* %71, %111
  br i1 %113, label %114, label %93

114:                                              ; preds = %93, %89
  %115 = ptrtoint %"struct.std::__1::array"* %70 to i64
  %116 = ptrtoint %"struct.std::__1::array"* %71 to i64
  %117 = getelementptr inbounds %"class.std::__1::vector.667", %"class.std::__1::vector.667"* %0, i64 0, i32 0, i32 0
  %118 = load %"struct.std::__1::array"*, %"struct.std::__1::array"** %117, align 8
  %119 = load %"struct.std::__1::array"*, %"struct.std::__1::array"** %6, align 8
  %120 = icmp eq %"struct.std::__1::array"* %119, %118
  br i1 %120, label %168, label %121

121:                                              ; preds = %114
  %122 = ptrtoint %"struct.std::__1::array"* %118 to i64
  %123 = getelementptr %"struct.std::__1::array", %"struct.std::__1::array"* %119, i64 -1, i32 0, i64 0
  %124 = ptrtoint %"class.v8::internal::compiler::Node"** %123 to i64
  %125 = sub i64 %124, %122
  %126 = lshr i64 %125, 6
  %127 = add nuw nsw i64 %126, 1
  %128 = and i64 %127, 3
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %140, label %130

130:                                              ; preds = %121, %130
  %131 = phi %"struct.std::__1::array"* [ %134, %130 ], [ %68, %121 ]
  %132 = phi %"struct.std::__1::array"* [ %135, %130 ], [ %119, %121 ]
  %133 = phi i64 [ %138, %130 ], [ %128, %121 ]
  %134 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %131, i64 -1
  %135 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %132, i64 -1
  %136 = bitcast %"struct.std::__1::array"* %134 to i8*
  %137 = bitcast %"struct.std::__1::array"* %135 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %136, i8* align 8 %137, i64 64, i1 false) #6
  %138 = add i64 %133, -1
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %140, label %130, !llvm.loop !6

140:                                              ; preds = %130, %121
  %141 = phi %"struct.std::__1::array"* [ undef, %121 ], [ %134, %130 ]
  %142 = phi %"struct.std::__1::array"* [ %68, %121 ], [ %134, %130 ]
  %143 = phi %"struct.std::__1::array"* [ %119, %121 ], [ %135, %130 ]
  %144 = icmp ult i64 %125, 192
  br i1 %144, label %165, label %145

145:                                              ; preds = %140, %145
  %146 = phi %"struct.std::__1::array"* [ %160, %145 ], [ %142, %140 ]
  %147 = phi %"struct.std::__1::array"* [ %161, %145 ], [ %143, %140 ]
  %148 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %146, i64 -1
  %149 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %147, i64 -1
  %150 = bitcast %"struct.std::__1::array"* %148 to i8*
  %151 = bitcast %"struct.std::__1::array"* %149 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %150, i8* align 8 %151, i64 64, i1 false) #6
  %152 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %146, i64 -2
  %153 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %147, i64 -2
  %154 = bitcast %"struct.std::__1::array"* %152 to i8*
  %155 = bitcast %"struct.std::__1::array"* %153 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %154, i8* align 8 %155, i64 64, i1 false) #6
  %156 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %146, i64 -3
  %157 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %147, i64 -3
  %158 = bitcast %"struct.std::__1::array"* %156 to i8*
  %159 = bitcast %"struct.std::__1::array"* %157 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %158, i8* align 8 %159, i64 64, i1 false) #6
  %160 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %146, i64 -4
  %161 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %147, i64 -4
  %162 = bitcast %"struct.std::__1::array"* %160 to i8*
  %163 = bitcast %"struct.std::__1::array"* %161 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %162, i8* align 8 %163, i64 64, i1 false) #6
  %164 = icmp eq %"struct.std::__1::array"* %161, %118
  br i1 %164, label %165, label %145

165:                                              ; preds = %145, %140
  %166 = phi %"struct.std::__1::array"* [ %141, %140 ], [ %160, %145 ]
  %167 = ptrtoint %"struct.std::__1::array"* %166 to i64
  br label %168

168:                                              ; preds = %114, %165
  %169 = phi i64 [ %167, %165 ], [ %69, %114 ]
  store i64 %169, i64* %30, align 8
  store i64 %116, i64* %7, align 8
  store i64 %115, i64* %4, align 8
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.v8::base::TemplateHashMapEntry"* @_ZN2v84base19TemplateHashMapImplIPvS2_NS0_26HashEqualityThenKeyMatcherIS2_PFbS2_S2_EEENS_8internal20ZoneAllocationPolicyEE14LookupOrInsertIS2_ZNS9_14LookupOrInsertIZNS9_14LookupOrInsertERKS2_jEUlvE_EEPNS0_20TemplateHashMapEntryIS2_S2_EESD_jRKT_EUlvE_SE_EESH_SK_jRKT0_RKT1_(%"class.v8::base::TemplateHashMapImpl"*, i8** dereferenceable(8), i32, %class.anon.684* dereferenceable(8), %class.anon* dereferenceable(1)) local_unnamed_addr #0 comdat align 2 {
  %6 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl", %"class.v8::base::TemplateHashMapImpl"* %0, i64 0, i32 0, i32 3
  %7 = load i32, i32* %6, align 8
  %8 = add i32 %7, -1
  %9 = and i32 %8, %2
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl", %"class.v8::base::TemplateHashMapImpl"* %0, i64 0, i32 0, i32 2
  %12 = load %"struct.v8::base::TemplateHashMapEntry"*, %"struct.v8::base::TemplateHashMapEntry"** %11, align 8
  %13 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %12, i64 %10
  %14 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %13, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %47, label %17

17:                                               ; preds = %5
  %18 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl", %"class.v8::base::TemplateHashMapImpl"* %0, i64 0, i32 0, i32 0, i32 0
  br label %19

19:                                               ; preds = %33, %17
  %20 = phi i32 [ %7, %17 ], [ %34, %33 ]
  %21 = phi i8* [ %15, %17 ], [ %41, %33 ]
  %22 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %13, %17 ], [ %39, %33 ]
  %23 = phi i64 [ %10, %17 ], [ %38, %33 ]
  %24 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %12, i64 %23, i32 2
  %25 = load i32, i32* %24, align 8
  %26 = icmp eq i32 %25, %2
  br i1 %26, label %27, label %33

27:                                               ; preds = %19
  %28 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %18, align 8
  %29 = load i8*, i8** %1, align 8
  %30 = tail call zeroext i1 %28(i8* %29, i8* nonnull %21) #6
  br i1 %30, label %43, label %31

31:                                               ; preds = %27
  %32 = load i32, i32* %6, align 8
  br label %33

33:                                               ; preds = %31, %19
  %34 = phi i32 [ %32, %31 ], [ %20, %19 ]
  %35 = add nuw nsw i64 %23, 1
  %36 = add i32 %34, -1
  %37 = zext i32 %36 to i64
  %38 = and i64 %35, %37
  %39 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %12, i64 %38
  %40 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %39, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = icmp eq i8* %41, null
  br i1 %42, label %47, label %19

43:                                               ; preds = %27
  %44 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %22, i64 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = icmp eq i8* %45, null
  br i1 %46, label %47, label %99

47:                                               ; preds = %33, %5, %43
  %48 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %22, %43 ], [ %13, %5 ], [ %39, %33 ]
  %49 = getelementptr inbounds %class.anon.684, %class.anon.684* %3, i64 0, i32 0
  %50 = load i8**, i8*** %49, align 8
  %51 = load i8*, i8** %50, align 8
  %52 = ptrtoint i8* %51 to i64
  %53 = bitcast %"struct.v8::base::TemplateHashMapEntry"* %48 to i64*
  store i64 %52, i64* %53, align 8
  %54 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %48, i64 0, i32 1
  %55 = bitcast i8** %54 to i64*
  store i64 0, i64* %55, align 8
  %56 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %48, i64 0, i32 2
  store i32 %2, i32* %56, align 8
  %57 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl", %"class.v8::base::TemplateHashMapImpl"* %0, i64 0, i32 0, i32 4
  %58 = load i32, i32* %57, align 4
  %59 = add i32 %58, 1
  store i32 %59, i32* %57, align 4
  %60 = lshr i32 %59, 2
  %61 = add i32 %60, %59
  %62 = load i32, i32* %6, align 8
  %63 = icmp ult i32 %61, %62
  br i1 %63, label %99, label %64

64:                                               ; preds = %47
  tail call void @_ZN2v84base19TemplateHashMapImplIPvS2_NS0_26HashEqualityThenKeyMatcherIS2_PFbS2_S2_EEENS_8internal20ZoneAllocationPolicyEE6ResizeEv(%"class.v8::base::TemplateHashMapImpl"* %0) #6
  %65 = load i32, i32* %6, align 8
  %66 = add i32 %65, -1
  %67 = and i32 %66, %2
  %68 = zext i32 %67 to i64
  %69 = load %"struct.v8::base::TemplateHashMapEntry"*, %"struct.v8::base::TemplateHashMapEntry"** %11, align 8
  %70 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %69, i64 %68
  %71 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %70, i64 0, i32 0
  %72 = load i8*, i8** %71, align 8
  %73 = icmp eq i8* %72, null
  br i1 %73, label %99, label %74

74:                                               ; preds = %64
  %75 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl", %"class.v8::base::TemplateHashMapImpl"* %0, i64 0, i32 0, i32 0, i32 0
  br label %76

76:                                               ; preds = %89, %74
  %77 = phi i32 [ %65, %74 ], [ %90, %89 ]
  %78 = phi i8* [ %72, %74 ], [ %97, %89 ]
  %79 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %70, %74 ], [ %95, %89 ]
  %80 = phi i64 [ %68, %74 ], [ %94, %89 ]
  %81 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %69, i64 %80, i32 2
  %82 = load i32, i32* %81, align 8
  %83 = icmp eq i32 %82, %2
  br i1 %83, label %84, label %89

84:                                               ; preds = %76
  %85 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %75, align 8
  %86 = tail call zeroext i1 %85(i8* %51, i8* nonnull %78) #6
  br i1 %86, label %99, label %87

87:                                               ; preds = %84
  %88 = load i32, i32* %6, align 8
  br label %89

89:                                               ; preds = %87, %76
  %90 = phi i32 [ %88, %87 ], [ %77, %76 ]
  %91 = add nuw nsw i64 %80, 1
  %92 = add i32 %90, -1
  %93 = zext i32 %92 to i64
  %94 = and i64 %91, %93
  %95 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %69, i64 %94
  %96 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %95, i64 0, i32 0
  %97 = load i8*, i8** %96, align 8
  %98 = icmp eq i8* %97, null
  br i1 %98, label %99, label %76

99:                                               ; preds = %89, %84, %43, %64, %47
  %100 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %22, %43 ], [ %48, %47 ], [ %70, %64 ], [ %95, %89 ], [ %79, %84 ]
  ret %"struct.v8::base::TemplateHashMapEntry"* %100
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v84base19TemplateHashMapImplIPvS2_NS0_26HashEqualityThenKeyMatcherIS2_PFbS2_S2_EEENS_8internal20ZoneAllocationPolicyEE6ResizeEv(%"class.v8::base::TemplateHashMapImpl"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl", %"class.v8::base::TemplateHashMapImpl"* %0, i64 0, i32 0, i32 2
  %3 = load %"struct.v8::base::TemplateHashMapEntry"*, %"struct.v8::base::TemplateHashMapEntry"** %2, align 8
  %4 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl", %"class.v8::base::TemplateHashMapImpl"* %0, i64 0, i32 0, i32 3
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl", %"class.v8::base::TemplateHashMapImpl"* %0, i64 0, i32 0, i32 4
  %7 = load i32, i32* %6, align 4
  %8 = shl i32 %5, 1
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl", %"class.v8::base::TemplateHashMapImpl"* %0, i64 0, i32 0, i32 1, i32 0
  %11 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %10, align 8
  %12 = mul nuw nsw i64 %9, 24
  %13 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %11, i64 0, i32 2
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %11, i64 0, i32 3
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %16, %14
  %18 = icmp ugt i64 %12, %17
  br i1 %18, label %19, label %21, !prof !2

19:                                               ; preds = %1
  %20 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %11, i64 %12) #6
  br label %23

21:                                               ; preds = %1
  %22 = add i64 %14, %12
  store i64 %22, i64* %13, align 8
  br label %23

23:                                               ; preds = %21, %19
  %24 = phi i64 [ %20, %19 ], [ %14, %21 ]
  %25 = inttoptr i64 %24 to %"struct.v8::base::TemplateHashMapEntry"*
  store %"struct.v8::base::TemplateHashMapEntry"* %25, %"struct.v8::base::TemplateHashMapEntry"** %2, align 8
  %26 = icmp eq i64 %24, 0
  br i1 %26, label %27, label %28

27:                                               ; preds = %23
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.3, i64 0, i64 0)) #7
  unreachable

28:                                               ; preds = %23
  store i32 %8, i32* %4, align 8
  %29 = icmp eq i32 %8, 0
  br i1 %29, label %42, label %30

30:                                               ; preds = %28
  %31 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %25, i64 0, i32 0
  store i8* null, i8** %31, align 8
  %32 = load i32, i32* %4, align 8
  %33 = icmp ugt i32 %32, 1
  br i1 %33, label %34, label %42

34:                                               ; preds = %30, %34
  %35 = phi i64 [ %38, %34 ], [ 1, %30 ]
  %36 = load %"struct.v8::base::TemplateHashMapEntry"*, %"struct.v8::base::TemplateHashMapEntry"** %2, align 8
  %37 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %36, i64 %35, i32 0
  store i8* null, i8** %37, align 8
  %38 = add nuw nsw i64 %35, 1
  %39 = load i32, i32* %4, align 8
  %40 = zext i32 %39 to i64
  %41 = icmp ult i64 %38, %40
  br i1 %41, label %34, label %42

42:                                               ; preds = %34, %30, %28
  store i32 0, i32* %6, align 4
  %43 = icmp eq i32 %7, 0
  br i1 %43, label %46, label %44

44:                                               ; preds = %42
  %45 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl", %"class.v8::base::TemplateHashMapImpl"* %0, i64 0, i32 0, i32 0, i32 0
  br label %47

46:                                               ; preds = %145, %42
  ret void

47:                                               ; preds = %44, %145
  %48 = phi i32 [ %7, %44 ], [ %146, %145 ]
  %49 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %3, %44 ], [ %147, %145 ]
  %50 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %49, i64 0, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = icmp eq i8* %51, null
  br i1 %52, label %145, label %53

53:                                               ; preds = %47
  %54 = ptrtoint i8* %51 to i64
  %55 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %49, i64 0, i32 2
  %56 = load i32, i32* %55, align 8
  %57 = load i32, i32* %4, align 8
  %58 = add i32 %57, -1
  %59 = and i32 %58, %56
  %60 = zext i32 %59 to i64
  %61 = load %"struct.v8::base::TemplateHashMapEntry"*, %"struct.v8::base::TemplateHashMapEntry"** %2, align 8
  %62 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %61, i64 %60
  %63 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %62, i64 0, i32 0
  %64 = load i8*, i8** %63, align 8
  %65 = icmp eq i8* %64, null
  br i1 %65, label %95, label %66

66:                                               ; preds = %53, %80
  %67 = phi i32 [ %81, %80 ], [ %57, %53 ]
  %68 = phi i8* [ %88, %80 ], [ %64, %53 ]
  %69 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %86, %80 ], [ %62, %53 ]
  %70 = phi i64 [ %85, %80 ], [ %60, %53 ]
  %71 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %61, i64 %70, i32 2
  %72 = load i32, i32* %71, align 8
  %73 = icmp eq i32 %72, %56
  br i1 %73, label %74, label %80

74:                                               ; preds = %66
  %75 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %45, align 8
  %76 = load i8*, i8** %50, align 8
  %77 = tail call zeroext i1 %75(i8* %76, i8* nonnull %68) #6
  br i1 %77, label %90, label %78

78:                                               ; preds = %74
  %79 = load i32, i32* %4, align 8
  br label %80

80:                                               ; preds = %78, %66
  %81 = phi i32 [ %79, %78 ], [ %67, %66 ]
  %82 = add nuw nsw i64 %70, 1
  %83 = add i32 %81, -1
  %84 = zext i32 %83 to i64
  %85 = and i64 %82, %84
  %86 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %61, i64 %85
  %87 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %86, i64 0, i32 0
  %88 = load i8*, i8** %87, align 8
  %89 = icmp eq i8* %88, null
  br i1 %89, label %90, label %66

90:                                               ; preds = %80, %74
  %91 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %86, %80 ], [ %69, %74 ]
  %92 = load i32, i32* %55, align 8
  %93 = bitcast %"struct.v8::base::TemplateHashMapEntry"* %49 to i64*
  %94 = load i64, i64* %93, align 8
  br label %95

95:                                               ; preds = %53, %90
  %96 = phi i64 [ %94, %90 ], [ %54, %53 ]
  %97 = phi i32 [ %92, %90 ], [ %56, %53 ]
  %98 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %91, %90 ], [ %62, %53 ]
  %99 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %49, i64 0, i32 1
  %100 = bitcast i8** %99 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = bitcast %"struct.v8::base::TemplateHashMapEntry"* %98 to i64*
  store i64 %96, i64* %102, align 8
  %103 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %98, i64 0, i32 1
  %104 = bitcast i8** %103 to i64*
  store i64 %101, i64* %104, align 8
  %105 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %98, i64 0, i32 2
  store i32 %97, i32* %105, align 8
  %106 = load i32, i32* %6, align 4
  %107 = add i32 %106, 1
  store i32 %107, i32* %6, align 4
  %108 = lshr i32 %107, 2
  %109 = add i32 %108, %107
  %110 = load i32, i32* %4, align 8
  %111 = icmp ult i32 %109, %110
  br i1 %111, label %143, label %112

112:                                              ; preds = %95
  tail call void @_ZN2v84base19TemplateHashMapImplIPvS2_NS0_26HashEqualityThenKeyMatcherIS2_PFbS2_S2_EEENS_8internal20ZoneAllocationPolicyEE6ResizeEv(%"class.v8::base::TemplateHashMapImpl"* %0) #6
  %113 = load i32, i32* %4, align 8
  %114 = add i32 %113, -1
  %115 = and i32 %114, %97
  %116 = zext i32 %115 to i64
  %117 = load %"struct.v8::base::TemplateHashMapEntry"*, %"struct.v8::base::TemplateHashMapEntry"** %2, align 8
  %118 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %117, i64 %116, i32 0
  %119 = load i8*, i8** %118, align 8
  %120 = icmp eq i8* %119, null
  br i1 %120, label %143, label %121

121:                                              ; preds = %112, %134
  %122 = phi i32 [ %135, %134 ], [ %113, %112 ]
  %123 = phi i8* [ %141, %134 ], [ %119, %112 ]
  %124 = phi i64 [ %139, %134 ], [ %116, %112 ]
  %125 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %117, i64 %124, i32 2
  %126 = load i32, i32* %125, align 8
  %127 = icmp eq i32 %126, %97
  br i1 %127, label %128, label %134

128:                                              ; preds = %121
  %129 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %45, align 8
  %130 = load i8*, i8** %50, align 8
  %131 = tail call zeroext i1 %129(i8* %130, i8* nonnull %123) #6
  br i1 %131, label %143, label %132

132:                                              ; preds = %128
  %133 = load i32, i32* %4, align 8
  br label %134

134:                                              ; preds = %132, %121
  %135 = phi i32 [ %133, %132 ], [ %122, %121 ]
  %136 = add nuw nsw i64 %124, 1
  %137 = add i32 %135, -1
  %138 = zext i32 %137 to i64
  %139 = and i64 %136, %138
  %140 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %117, i64 %139, i32 0
  %141 = load i8*, i8** %140, align 8
  %142 = icmp eq i8* %141, null
  br i1 %142, label %143, label %121

143:                                              ; preds = %128, %134, %112, %95
  %144 = add i32 %48, -1
  br label %145

145:                                              ; preds = %47, %143
  %146 = phi i32 [ %144, %143 ], [ %48, %47 ]
  %147 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %49, i64 1
  %148 = icmp eq i32 %146, 0
  br i1 %148, label %46, label %47
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !5}
