; ModuleID = '../../third_party/blink/renderer/core/dom/element-hot.cc'
source_filename = "../../third_party/blink/renderer/core/dom/element-hot.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::QualifiedName" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.blink::QualifiedName::QualifiedNameImpl"* }
%"class.blink::QualifiedName::QualifiedNameImpl" = type { %"class.WTF::RefCounted", i32, %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr.6 }
%class.scoped_refptr.6 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::ThreadSpecific" = type { %"class.WTF::Threading"*, %"class.base::ThreadLocalStorage::Slot" }
%"class.WTF::Threading" = type <{ %"class.std::__1::unique_ptr.1228", %"class.std::__1::unique_ptr.1234", i32, [4 x i8] }>
%"class.std::__1::unique_ptr.1228" = type { %"class.std::__1::__compressed_pair.1229" }
%"class.std::__1::__compressed_pair.1229" = type { %"struct.std::__1::__compressed_pair_elem.1230" }
%"struct.std::__1::__compressed_pair_elem.1230" = type { %"class.WTF::AtomicStringTable"* }
%"class.WTF::AtomicStringTable" = type { %"class.WTF::HashSet.675" }
%"class.WTF::HashSet.675" = type { %"class.WTF::HashTable.676" }
%"class.WTF::HashTable.676" = type <{ %"class.WTF::StringImpl"**, i32, i32, i32, [4 x i8] }>
%"class.std::__1::unique_ptr.1234" = type { %"class.std::__1::__compressed_pair.1235" }
%"class.std::__1::__compressed_pair.1235" = type { %"struct.std::__1::__compressed_pair_elem.1236" }
%"struct.std::__1::__compressed_pair_elem.1236" = type { %"struct.WTF::ICUConverterWrapper"* }
%"struct.WTF::ICUConverterWrapper" = type opaque
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"class.blink::AtomicEntryFlag" = type { %"struct.std::__1::atomic.119" }
%"struct.std::__1::atomic.119" = type { %"struct.std::__1::__atomic_base.120" }
%"struct.std::__1::__atomic_base.120" = type { %"struct.std::__1::__atomic_base.121" }
%"struct.std::__1::__atomic_base.121" = type { %"struct.std::__1::__cxx_atomic_impl.122" }
%"struct.std::__1::__cxx_atomic_impl.122" = type { %"struct.std::__1::__cxx_atomic_base_impl.123" }
%"struct.std::__1::__cxx_atomic_base_impl.123" = type { i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.172", i32, [4 x i8], %"class.std::__1::unique_ptr.308", %"class.std::__1::unique_ptr.308", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.318", %"class.std::__1::unique_ptr.324", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.336", %"class.std::__1::unique_ptr.342", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.349", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.172" = type { %"class.std::__1::__compressed_pair.173" }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.175", %"class.std::__1::unique_ptr.181", %"class.std::__1::unique_ptr.187", %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.199", %"class.std::__1::unique_ptr.205", %"class.std::__1::unique_ptr.216", %"class.std::__1::unique_ptr.223", %"class.std::__1::unique_ptr.223", %"class.std::__1::unique_ptr.230", %"class.std::__1::unique_ptr.237", %"class.std::__1::unique_ptr.244", %"class.std::__1::unique_ptr.244", %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.258", %"class.std::__1::unique_ptr.265", %"class.std::__1::unique_ptr.288", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.175" = type { %"class.std::__1::__compressed_pair.176" }
%"class.std::__1::__compressed_pair.176" = type { %"struct.std::__1::__compressed_pair_elem.177" }
%"struct.std::__1::__compressed_pair_elem.177" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.181" = type { %"class.std::__1::__compressed_pair.182" }
%"class.std::__1::__compressed_pair.182" = type { %"struct.std::__1::__compressed_pair_elem.183" }
%"struct.std::__1::__compressed_pair_elem.183" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.187" = type { %"class.std::__1::__compressed_pair.188" }
%"class.std::__1::__compressed_pair.188" = type { %"struct.std::__1::__compressed_pair_elem.189" }
%"struct.std::__1::__compressed_pair_elem.189" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.193" = type { %"class.std::__1::__compressed_pair.194" }
%"class.std::__1::__compressed_pair.194" = type { %"struct.std::__1::__compressed_pair_elem.195" }
%"struct.std::__1::__compressed_pair_elem.195" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.199" = type { %"class.std::__1::__compressed_pair.200" }
%"class.std::__1::__compressed_pair.200" = type { %"struct.std::__1::__compressed_pair_elem.201" }
%"struct.std::__1::__compressed_pair_elem.201" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.205" = type { %"class.std::__1::__compressed_pair.206" }
%"class.std::__1::__compressed_pair.206" = type { %"struct.std::__1::__compressed_pair_elem.207" }
%"struct.std::__1::__compressed_pair_elem.207" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.208" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.208" = type { %"struct.std::__1::__atomic_base.209" }
%"struct.std::__1::__atomic_base.209" = type { %"struct.std::__1::__atomic_base.210" }
%"struct.std::__1::__atomic_base.210" = type { %"struct.std::__1::__cxx_atomic_impl.211" }
%"struct.std::__1::__cxx_atomic_impl.211" = type { %"struct.std::__1::__cxx_atomic_base_impl.212" }
%"struct.std::__1::__cxx_atomic_base_impl.212" = type { i64 }
%"class.std::__1::unique_ptr.216" = type { %"class.std::__1::__compressed_pair.217" }
%"class.std::__1::__compressed_pair.217" = type { %"struct.std::__1::__compressed_pair_elem.218" }
%"struct.std::__1::__compressed_pair_elem.218" = type { %"class.blink::Worklist.219"* }
%"class.blink::Worklist.219" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.208" }
%"class.std::__1::unique_ptr.223" = type { %"class.std::__1::__compressed_pair.224" }
%"class.std::__1::__compressed_pair.224" = type { %"struct.std::__1::__compressed_pair_elem.225" }
%"struct.std::__1::__compressed_pair_elem.225" = type { %"class.blink::Worklist.226"* }
%"class.blink::Worklist.226" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.208" }
%"class.std::__1::unique_ptr.230" = type { %"class.std::__1::__compressed_pair.231" }
%"class.std::__1::__compressed_pair.231" = type { %"struct.std::__1::__compressed_pair_elem.232" }
%"struct.std::__1::__compressed_pair_elem.232" = type { %"class.blink::Worklist.233"* }
%"class.blink::Worklist.233" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.208" }
%"class.std::__1::unique_ptr.237" = type { %"class.std::__1::__compressed_pair.238" }
%"class.std::__1::__compressed_pair.238" = type { %"struct.std::__1::__compressed_pair_elem.239" }
%"struct.std::__1::__compressed_pair_elem.239" = type { %"class.blink::Worklist.240"* }
%"class.blink::Worklist.240" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.208" }
%"class.std::__1::unique_ptr.244" = type { %"class.std::__1::__compressed_pair.245" }
%"class.std::__1::__compressed_pair.245" = type { %"struct.std::__1::__compressed_pair_elem.246" }
%"struct.std::__1::__compressed_pair_elem.246" = type { %"class.blink::Worklist.247"* }
%"class.blink::Worklist.247" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.208" }
%"class.std::__1::unique_ptr.251" = type { %"class.std::__1::__compressed_pair.252" }
%"class.std::__1::__compressed_pair.252" = type { %"struct.std::__1::__compressed_pair_elem.253" }
%"struct.std::__1::__compressed_pair_elem.253" = type { %"class.blink::Worklist.254"* }
%"class.blink::Worklist.254" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.208" }
%"class.std::__1::unique_ptr.258" = type { %"class.std::__1::__compressed_pair.259" }
%"class.std::__1::__compressed_pair.259" = type { %"struct.std::__1::__compressed_pair_elem.260" }
%"struct.std::__1::__compressed_pair_elem.260" = type { %"class.blink::Worklist.261"* }
%"class.blink::Worklist.261" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.208" }
%"class.std::__1::unique_ptr.265" = type { %"class.std::__1::__compressed_pair.266" }
%"class.std::__1::__compressed_pair.266" = type { %"struct.std::__1::__compressed_pair_elem.267" }
%"struct.std::__1::__compressed_pair_elem.267" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.268", %"class.std::__1::__compressed_pair.275", %"class.std::__1::__compressed_pair.280", %"class.std::__1::__compressed_pair.282", [4 x i8] }>
%"class.std::__1::unique_ptr.268" = type { %"class.std::__1::__compressed_pair.269" }
%"class.std::__1::__compressed_pair.269" = type { %"struct.std::__1::__compressed_pair_elem.270", %"struct.std::__1::__compressed_pair_elem.271" }
%"struct.std::__1::__compressed_pair_elem.270" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.271" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.272" }
%"class.std::__1::__compressed_pair.272" = type { %"struct.std::__1::__compressed_pair_elem.273" }
%"struct.std::__1::__compressed_pair_elem.273" = type { i64 }
%"class.std::__1::__compressed_pair.275" = type { %"struct.std::__1::__compressed_pair_elem.276" }
%"struct.std::__1::__compressed_pair_elem.276" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.280" = type { %"struct.std::__1::__compressed_pair_elem.273" }
%"class.std::__1::__compressed_pair.282" = type { %"struct.std::__1::__compressed_pair_elem.283" }
%"struct.std::__1::__compressed_pair_elem.283" = type { float }
%"class.std::__1::unique_ptr.288" = type { %"class.std::__1::__compressed_pair.289" }
%"class.std::__1::__compressed_pair.289" = type { %"struct.std::__1::__compressed_pair_elem.290" }
%"struct.std::__1::__compressed_pair_elem.290" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.291", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.291" = type { %"class.std::__1::__compressed_pair.292" }
%"class.std::__1::__compressed_pair.292" = type { %"struct.std::__1::__compressed_pair_elem.293" }
%"struct.std::__1::__compressed_pair_elem.293" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.300" }
%"class.WTF::Vector.300" = type { %"class.WTF::VectorBuffer.301" }
%"class.WTF::VectorBuffer.301" = type { %"class.WTF::VectorBufferBase.302" }
%"class.WTF::VectorBufferBase.302" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.308" = type { %"class.std::__1::__compressed_pair.309" }
%"class.std::__1::__compressed_pair.309" = type { %"struct.std::__1::__compressed_pair_elem.310" }
%"struct.std::__1::__compressed_pair_elem.310" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.316" }
%"class.WTF::VectorBuffer.316" = type { %"class.WTF::VectorBufferBase.317" }
%"class.WTF::VectorBufferBase.317" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.318" = type { %"class.std::__1::__compressed_pair.319" }
%"class.std::__1::__compressed_pair.319" = type { %"struct.std::__1::__compressed_pair_elem.320" }
%"struct.std::__1::__compressed_pair_elem.320" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.324" = type { %"class.std::__1::__compressed_pair.325" }
%"class.std::__1::__compressed_pair.325" = type { %"struct.std::__1::__compressed_pair_elem.326" }
%"struct.std::__1::__compressed_pair_elem.326" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.330" }
%"class.std::__1::unique_ptr.330" = type { %"class.std::__1::__compressed_pair.331" }
%"class.std::__1::__compressed_pair.331" = type { %"struct.std::__1::__compressed_pair_elem.332" }
%"struct.std::__1::__compressed_pair_elem.332" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.219"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.226"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.233"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.240"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.247"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.598" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.598" = type { %"struct.std::__1::__compressed_pair_elem.599" }
%"struct.std::__1::__compressed_pair_elem.599" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.336" = type { %"class.std::__1::__compressed_pair.337" }
%"class.std::__1::__compressed_pair.337" = type { %"struct.std::__1::__compressed_pair_elem.338" }
%"struct.std::__1::__compressed_pair_elem.338" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.342" = type { %"class.std::__1::__compressed_pair.343" }
%"class.std::__1::__compressed_pair.343" = type { %"struct.std::__1::__compressed_pair_elem.344" }
%"struct.std::__1::__compressed_pair_elem.344" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.348 }
%class.scoped_refptr.348 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.349" = type { %"struct.std::__1::__atomic_base.350" }
%"struct.std::__1::__atomic_base.350" = type { %"struct.std::__1::__cxx_atomic_impl.351" }
%"struct.std::__1::__cxx_atomic_impl.351" = type { %"struct.std::__1::__cxx_atomic_base_impl.352" }
%"struct.std::__1::__cxx_atomic_base_impl.352" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.WTF::ThreadSpecific.1270" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::Element" = type { %"class.blink::ContainerNode", %"class.blink::Animatable", %"class.blink::QualifiedName", %"class.blink::Member.8" }
%"class.blink::ContainerNode" = type { %"class.blink::Node", %"class.blink::Member", %"class.blink::Member" }
%"class.blink::Node" = type { %"class.blink::EventTarget", i32, %"class.blink::Member", %"class.blink::Member.0", %"class.blink::Member", %"class.blink::Member", %"class.blink::Member.2" }
%"class.blink::EventTarget" = type { %"class.blink::ScriptWrappable" }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::Member.0" = type { %"class.blink::MemberBase.1" }
%"class.blink::MemberBase.1" = type { %"class.blink::TreeScope"* }
%"class.blink::TreeScope" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.21", %"class.blink::Member.23", %"class.blink::Member.0", %"class.blink::Member.25", %"class.blink::Member.25", %"class.blink::Member.44", %"class.blink::Member.46", %"class.blink::Member.48", %"class.blink::RadioButtonGroupScope", %"class.blink::Member.53", %"class.blink::HeapVector.55" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::Member.21" = type { %"class.blink::MemberBase.22" }
%"class.blink::MemberBase.22" = type { %"class.blink::ContainerNode"* }
%"class.blink::Member.23" = type { %"class.blink::MemberBase.24" }
%"class.blink::MemberBase.24" = type { %"class.blink::Document"* }
%"class.blink::Document" = type { %"class.blink::ContainerNode", %"class.blink::TreeScope", %"class.blink::UseCounter", %"class.blink::Supplementable", i32, %"class.blink::DocumentLifecycle", i8, i8, %"class.WTF::Vector.115", %"class.WTF::Vector.115", i8, i32, %"class.blink::Member.126", %"class.blink::Member.128", %"class.blink::Member.130", %"class.blink::Member.132", %"class.blink::Member.134", %"class.blink::Member.136", i8, %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.std::__1::unique_ptr.144", %"class.blink::KURL", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.blink::Member.150", %"class.blink::Member.152", %"class.blink::Member.61", i32, i32, i32, i8, %"class.blink::TaskHandle", %"class.blink::TaskHandle", %"class.WTF::Vector.155", i8, i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapVector", %"class.blink::Member.36", %"class.blink::Member.365", %"class.blink::Member.36", %"class.blink::Member.36", %"class.blink::Member.36", %"class.blink::UserActionElementSet", %"class.blink::Member.374", double, double, i64, i64, %"class.blink::HeapHashSet.376", %"class.blink::HeapHashSet.383", i16, i8, %"class.blink::Member.390", %"class.blink::Member.408", %"class.blink::Member.410", %"class.blink::Member.412", %"class.blink::TextLinkColors", %"class.blink::Member.414", i8, [7 x i8], %"class.blink::HeapHashMap.416", i32, i32, i8, i8, i8, i32, i32, i32, i8, %"class.WTF::String", %"class.WTF::String", %"class.blink::Member.36", %"class.WTF::Vector.423", %"class.blink::Member.428", %"class.blink::Member.430", i8, %"class.blink::Member.36", i8, i32, i8, %"class.base::ElapsedTimer", %"class.blink::Member.432", %"class.blink::HeapVector.434", %"class.std::__1::unique_ptr.442", %"class.WTF::String", %"class.WTF::String", i8, %"class.WTF::AtomicString", %"class.blink::DocumentEncodingData", i8, i8, [6 x i8], %"class.blink::HeapHashSet.448", %"class.blink::LiveNodeListRegistry", %"class.blink::Member.461", %"class.WTF::Vector.463", i8, i8, %"class.std::__1::unique_ptr.468", %"class.blink::NthIndexCache"*, i8, i8, i8, i8, i8, i8, %"class.blink::LayoutView"*, %"class.blink::HeapVector", %"class.blink::HeapVector.474", i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapTaskRunnerTimer", %"class.blink::DocumentTiming", %"class.blink::Member.482", i8, i32, %"class.blink::Member.484", %"class.blink::Member.486", %"class.blink::Member.488", %"class.blink::HeapTaskRunnerTimer", %"class.blink::Member.490", %"class.WTF::HashMap.492", %"class.blink::Member.497", %"class.blink::Member.499", %"class.blink::Member.501", %"class.blink::Member.503", %"class.blink::Member.23", %"class.blink::Member.23", %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapHashSet.505", i8, i32, %"class.blink::Member.512", %"class.blink::Member.514", i32, %"class.blink::Member.516", %"class.blink::Member.518", %"class.blink::Member.520", %"class.std::__1::unique_ptr.522", i64, %"class.std::__1::unique_ptr.528", i32, i32, %"class.blink::Member.534", %"class.blink::Member.536", %"class.blink::Member.538", i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, %"class.blink::Member.540", %"class.WTF::Vector.542", %"class.WTF::AtomicString", %"class.blink::HeapHashMap.547", %"class.blink::Member.554", %"class.std::__1::unique_ptr.556", %"class.blink::Member.562", i8, i8, %"class.WTF::String", %"class.blink::Member.564", i8, [7 x i8], %"class.blink::HeapHashMap.566", %"class.blink::HeapObserverSet", %"class.blink::Member.580", i8, i8, i8, i8, i8, i8, i8, %"class.blink::Member.582", i32, i8, i8, %"class.blink::WeakMember.584", %"class.blink::Member.585" }
%"class.blink::UseCounter" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::Supplementable" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.108" }
%"class.blink::HeapHashMap.108" = type { %"class.WTF::HashMap.111" }
%"class.WTF::HashMap.111" = type { %"class.WTF::HashTable.112" }
%"class.WTF::HashTable.112" = type <{ %"struct.WTF::KeyValuePair.114"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.114" = type opaque
%"class.blink::DocumentLifecycle" = type <{ i32, i32, i32, i8, i8, [2 x i8] }>
%"class.WTF::Vector.115" = type { %"class.WTF::VectorBuffer.116" }
%"class.WTF::VectorBuffer.116" = type { %"class.WTF::VectorBufferBase.117" }
%"class.WTF::VectorBufferBase.117" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.118 }
%class.scoped_refptr.118 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.119" }
%"class.blink::Member.126" = type { %"class.blink::MemberBase.127" }
%"class.blink::MemberBase.127" = type { %"class.blink::LocalDOMWindow"* }
%"class.blink::LocalDOMWindow" = type opaque
%"class.blink::Member.128" = type { %"class.blink::MemberBase.129" }
%"class.blink::MemberBase.129" = type { %"class.blink::ExecutionContext"* }
%"class.blink::ExecutionContext" = type <{ %"class.blink::Supplementable.603", %"class.blink::MojoBindingContext", %"class.blink::ConsoleLogger", %"class.blink::UseCounter", %"class.blink::FeatureContext", %"class.v8::Isolate"*, %"class.blink::SecurityContext", %"class.blink::Member.644", i32, i8, [3 x i8], %"class.blink::HeapVector.646", i32, i8, i8, i8, i8, i8, i8, [6 x i8], %"class.blink::Member.654", %"class.blink::Member.656", %"class.blink::DOMTimerCoordinator", i32, [4 x i8], %"class.std::__1::unique_ptr.665", %"class.blink::Member.671", %"class.blink::Member.673", i8, [7 x i8] }>
%"class.blink::Supplementable.603" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.604" }
%"class.blink::HeapHashMap.604" = type { %"class.WTF::HashMap.607" }
%"class.WTF::HashMap.607" = type { %"class.WTF::HashTable.608" }
%"class.WTF::HashTable.608" = type <{ %"struct.WTF::KeyValuePair.610"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.610" = type opaque
%"class.blink::MojoBindingContext" = type { %"class.blink::ContextLifecycleNotifier", %"class.blink::Supplementable.619" }
%"class.blink::ContextLifecycleNotifier" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapObserverSet.611" }
%"class.blink::HeapObserverSet.611" = type { i32, [4 x i8], %"class.blink::HeapHashSet.612" }
%"class.blink::HeapHashSet.612" = type { %"class.WTF::HashSet.615" }
%"class.WTF::HashSet.615" = type { %"class.WTF::HashTable.616" }
%"class.WTF::HashTable.616" = type <{ %"class.blink::WeakMember.618"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.618" = type opaque
%"class.blink::Supplementable.619" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.620" }
%"class.blink::HeapHashMap.620" = type { %"class.WTF::HashMap.623" }
%"class.WTF::HashMap.623" = type { %"class.WTF::HashTable.624" }
%"class.WTF::HashTable.624" = type <{ %"struct.WTF::KeyValuePair.626"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.626" = type { i8*, %"class.blink::Member.1192" }
%"class.blink::Member.1192" = type { %"class.blink::MemberBase.1193" }
%"class.blink::MemberBase.1193" = type { %"class.blink::Supplement"* }
%"class.blink::Supplement" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.1194" }
%"class.blink::Member.1194" = type { %"class.blink::MemberBase.1195" }
%"class.blink::MemberBase.1195" = type { %"class.blink::MojoBindingContext"* }
%"class.blink::ConsoleLogger" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::FeatureContext" = type { i32 (...)** }
%"class.blink::SecurityContext" = type { i32 (...)**, i32, %class.scoped_refptr.627, %"class.std::__1::unique_ptr.628", %"class.std::__1::unique_ptr.628", %"class.std::__1::unique_ptr.634", %"class.std::__1::unique_ptr.634", %"class.blink::Member.128", i32, [4 x i8], %"class.WTF::HashSet.640", i32, i32 }
%class.scoped_refptr.627 = type { %"class.blink::SecurityOrigin"* }
%"class.blink::SecurityOrigin" = type opaque
%"class.std::__1::unique_ptr.628" = type { %"class.std::__1::__compressed_pair.629" }
%"class.std::__1::__compressed_pair.629" = type { %"struct.std::__1::__compressed_pair_elem.630" }
%"struct.std::__1::__compressed_pair_elem.630" = type { %"class.blink::PermissionsPolicy"* }
%"class.blink::PermissionsPolicy" = type opaque
%"class.std::__1::unique_ptr.634" = type { %"class.std::__1::__compressed_pair.635" }
%"class.std::__1::__compressed_pair.635" = type { %"struct.std::__1::__compressed_pair_elem.636" }
%"struct.std::__1::__compressed_pair_elem.636" = type { %"class.blink::DocumentPolicy"* }
%"class.blink::DocumentPolicy" = type opaque
%"class.WTF::HashSet.640" = type { %"class.WTF::HashTable.641" }
%"class.WTF::HashTable.641" = type <{ i32*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.644" = type { %"class.blink::MemberBase.645" }
%"class.blink::MemberBase.645" = type { %"class.blink::Agent"* }
%"class.blink::Agent" = type opaque
%"class.blink::HeapVector.646" = type { %"class.WTF::Vector.649" }
%"class.WTF::Vector.649" = type { %"class.WTF::VectorBuffer.650" }
%"class.WTF::VectorBuffer.650" = type { %"class.WTF::VectorBufferBase.651" }
%"class.WTF::VectorBufferBase.651" = type { %"class.blink::Member.652"*, i32, i32 }
%"class.blink::Member.652" = type opaque
%"class.blink::Member.654" = type { %"class.blink::MemberBase.655" }
%"class.blink::MemberBase.655" = type { %"class.blink::PublicURLManager"* }
%"class.blink::PublicURLManager" = type opaque
%"class.blink::Member.656" = type { %"class.blink::MemberBase.657" }
%"class.blink::MemberBase.657" = type { %"class.blink::ContentSecurityPolicyDelegate"* }
%"class.blink::ContentSecurityPolicyDelegate" = type opaque
%"class.blink::DOMTimerCoordinator" = type { %"class.blink::HeapHashMap.658", i32, i32 }
%"class.blink::HeapHashMap.658" = type { %"class.WTF::HashMap.661" }
%"class.WTF::HashMap.661" = type { %"class.WTF::HashTable.662" }
%"class.WTF::HashTable.662" = type <{ %"struct.WTF::KeyValuePair.664"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.664" = type opaque
%"class.std::__1::unique_ptr.665" = type { %"class.std::__1::__compressed_pair.666" }
%"class.std::__1::__compressed_pair.666" = type { %"struct.std::__1::__compressed_pair_elem.667" }
%"struct.std::__1::__compressed_pair_elem.667" = type { %"class.blink::PolicyContainer"* }
%"class.blink::PolicyContainer" = type opaque
%"class.blink::Member.671" = type { %"class.blink::MemberBase.672" }
%"class.blink::MemberBase.672" = type { %"class.blink::OriginTrialContext"* }
%"class.blink::OriginTrialContext" = type opaque
%"class.blink::Member.673" = type { %"class.blink::MemberBase.674" }
%"class.blink::MemberBase.674" = type { %"class.blink::ContentSecurityPolicy"* }
%"class.blink::ContentSecurityPolicy" = type opaque
%"class.blink::Member.130" = type { %"class.blink::MemberBase.131" }
%"class.blink::MemberBase.131" = type { %"class.blink::ResourceFetcher"* }
%"class.blink::ResourceFetcher" = type opaque
%"class.blink::Member.132" = type { %"class.blink::MemberBase.133" }
%"class.blink::MemberBase.133" = type { %"class.blink::DocumentParser"* }
%"class.blink::DocumentParser" = type opaque
%"class.blink::Member.134" = type { %"class.blink::MemberBase.135" }
%"class.blink::MemberBase.135" = type { %"class.blink::ContextFeatures"* }
%"class.blink::ContextFeatures" = type opaque
%"class.blink::Member.136" = type { %"class.blink::MemberBase.137" }
%"class.blink::MemberBase.137" = type { %"class.blink::HttpRefreshScheduler"* }
%"class.blink::HttpRefreshScheduler" = type opaque
%"class.std::__1::unique_ptr.144" = type { %"class.std::__1::__compressed_pair.145" }
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"struct.std::__1::__compressed_pair_elem.146" = type { %"class.blink::OriginAccessEntry"* }
%"class.blink::OriginAccessEntry" = type opaque
%"class.blink::KURL" = type { i8, i8, %"class.WTF::String", %"struct.url::Parsed", %"class.WTF::String", %"class.std::__1::unique_ptr.138" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr.138" = type { %"class.std::__1::__compressed_pair.139" }
%"class.std::__1::__compressed_pair.139" = type { %"struct.std::__1::__compressed_pair_elem.140" }
%"struct.std::__1::__compressed_pair_elem.140" = type { %"class.blink::KURL"* }
%"class.blink::Member.150" = type { %"class.blink::MemberBase.151" }
%"class.blink::MemberBase.151" = type { %"class.blink::DocumentType"* }
%"class.blink::DocumentType" = type opaque
%"class.blink::Member.152" = type { %"class.blink::MemberBase.153" }
%"class.blink::MemberBase.153" = type { %"class.blink::DOMImplementation"* }
%"class.blink::DOMImplementation" = type opaque
%"class.blink::Member.61" = type { %"class.blink::MemberBase.62" }
%"class.blink::MemberBase.62" = type { %"class.blink::CSSStyleSheet"* }
%"class.blink::CSSStyleSheet" = type { %"class.blink::StyleSheet", %"class.blink::Member.63", i8, i8, i8, i8, i8, %"class.WTF::String", %class.scoped_refptr.65, %"class.WTF::Vector.79", %"class.WTF::Vector.79", %"class.blink::Member", %"class.blink::Member.84", %"class.blink::HeapHashSet", %"class.blink::Member.23", %"class.WTF::HashSet.92", %"class.WTF::TextPosition", %"class.blink::Member.96", %"class.blink::HeapVector.98", %"class.blink::Member.105" }
%"class.blink::StyleSheet" = type { %"class.blink::ScriptWrappable" }
%"class.blink::Member.63" = type { %"class.blink::MemberBase.64" }
%"class.blink::MemberBase.64" = type { %"class.blink::StyleSheetContents"* }
%"class.blink::StyleSheetContents" = type opaque
%class.scoped_refptr.65 = type { %"class.blink::MediaQuerySet"* }
%"class.blink::MediaQuerySet" = type { %"class.WTF::RefCounted.66", %"class.WTF::Vector.68" }
%"class.WTF::RefCounted.66" = type { %"class.base::RefCounted.67" }
%"class.base::RefCounted.67" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.68" = type { %"class.WTF::VectorBuffer.69" }
%"class.WTF::VectorBuffer.69" = type { %"class.WTF::VectorBufferBase.70" }
%"class.WTF::VectorBufferBase.70" = type { %"class.std::__1::unique_ptr"*, i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::MediaQuery"* }
%"class.blink::MediaQuery" = type { i32, %"class.WTF::String", %"class.WTF::Vector.71", %"class.WTF::String" }
%"class.WTF::Vector.71" = type { %"class.WTF::VectorBuffer.72" }
%"class.WTF::VectorBuffer.72" = type { %"class.WTF::VectorBufferBase.73" }
%"class.WTF::VectorBufferBase.73" = type { %"class.blink::MediaQueryExp"*, i32, i32 }
%"class.blink::MediaQueryExp" = type opaque
%"class.WTF::Vector.79" = type { %"class.WTF::VectorBuffer.80" }
%"class.WTF::VectorBuffer.80" = type { %"class.WTF::VectorBufferBase.81" }
%"class.WTF::VectorBufferBase.81" = type { %"class.blink::MediaQueryResult"*, i32, i32 }
%"class.blink::MediaQueryResult" = type opaque
%"class.blink::Member.84" = type { %"class.blink::MemberBase.85" }
%"class.blink::MemberBase.85" = type { %"class.blink::CSSRule"* }
%"class.blink::CSSRule" = type { %"class.blink::ScriptWrappable", i8, %"class.blink::Member.86" }
%"class.blink::Member.86" = type { %"class.blink::MemberBase.87" }
%"class.blink::MemberBase.87" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::HeapHashSet" = type { %"class.WTF::HashSet" }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable.90" }
%"class.WTF::HashTable.90" = type <{ %"class.blink::WeakMember"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember" = type { %"class.blink::MemberBase.1" }
%"class.WTF::HashSet.92" = type { %"class.WTF::HashTable.93" }
%"class.WTF::HashTable.93" = type <{ %"class.WTF::AtomicString"*, i32, i32, i32, [4 x i8] }>
%"class.WTF::TextPosition" = type { %"class.WTF::OrdinalNumber", %"class.WTF::OrdinalNumber" }
%"class.WTF::OrdinalNumber" = type { i32 }
%"class.blink::Member.96" = type { %"class.blink::MemberBase.97" }
%"class.blink::MemberBase.97" = type { %"class.blink::MediaList"* }
%"class.blink::MediaList" = type { %"class.blink::ScriptWrappable", %class.scoped_refptr.65, %"class.blink::Member.61", %"class.blink::Member.84" }
%"class.blink::HeapVector.98" = type { %"class.WTF::Vector.101" }
%"class.WTF::Vector.101" = type { %"class.WTF::VectorBuffer.102" }
%"class.WTF::VectorBuffer.102" = type { %"class.WTF::VectorBufferBase.103" }
%"class.WTF::VectorBufferBase.103" = type { %"class.blink::Member.84"*, i32, i32 }
%"class.blink::Member.105" = type { %"class.blink::MemberBase.106" }
%"class.blink::MemberBase.106" = type { %"class.blink::CSSRuleList"* }
%"class.blink::CSSRuleList" = type opaque
%"class.blink::TaskHandle" = type { %class.scoped_refptr.154 }
%class.scoped_refptr.154 = type { %"class.blink::TaskHandle::Runner"* }
%"class.blink::TaskHandle::Runner" = type opaque
%"class.WTF::Vector.155" = type { %"class.WTF::VectorBuffer.156" }
%"class.WTF::VectorBuffer.156" = type { %"class.WTF::VectorBufferBase.157" }
%"class.WTF::VectorBufferBase.157" = type { %"struct.blink::Document::PendingJavascriptUrl"*, i32, i32 }
%"struct.blink::Document::PendingJavascriptUrl" = type { %"class.blink::KURL", %class.scoped_refptr.158 }
%class.scoped_refptr.158 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted.159", i32, i32, %"class.blink::Persistent" }
%"class.WTF::RefCounted.159" = type { %"class.base::RefCounted.160" }
%"class.base::RefCounted.160" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap.163" }
%"class.blink::HeapHashMap.163" = type { %"class.WTF::HashMap.166" }
%"class.WTF::HashMap.166" = type { %"class.WTF::HashTable.167" }
%"class.WTF::HashTable.167" = type <{ %"struct.WTF::KeyValuePair.169"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.169" = type { %"class.blink::WeakMember.170", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::WeakMember.170" = type { %"class.blink::MemberBase.171" }
%"class.blink::MemberBase.171" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.blink::Member.365" = type { %"class.blink::MemberBase.366" }
%"class.blink::MemberBase.366" = type { %"class.blink::Range"* }
%"class.blink::Range" = type opaque
%"class.blink::UserActionElementSet" = type { %"class.blink::HeapHashMap.367" }
%"class.blink::HeapHashMap.367" = type { %"class.WTF::HashMap.370" }
%"class.WTF::HashMap.370" = type { %"class.WTF::HashTable.371" }
%"class.WTF::HashTable.371" = type <{ %"struct.WTF::KeyValuePair.373"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.373" = type opaque
%"class.blink::Member.374" = type { %"class.blink::MemberBase.375" }
%"class.blink::MemberBase.375" = type { %"class.blink::RootScrollerController"* }
%"class.blink::RootScrollerController" = type opaque
%"class.blink::HeapHashSet.376" = type { %"class.WTF::HashSet.379" }
%"class.WTF::HashSet.379" = type { %"class.WTF::HashTable.380" }
%"class.WTF::HashTable.380" = type <{ %"class.blink::WeakMember.382"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.382" = type opaque
%"class.blink::HeapHashSet.383" = type { %"class.WTF::HashSet.386" }
%"class.WTF::HashSet.386" = type { %"class.WTF::HashTable.387" }
%"class.WTF::HashTable.387" = type <{ %"class.blink::WeakMember.389"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.389" = type opaque
%"class.blink::Member.390" = type { %"class.blink::MemberBase.391" }
%"class.blink::MemberBase.391" = type { %"class.blink::ElementIntersectionObserverData"* }
%"class.blink::ElementIntersectionObserverData" = type { %"class.blink::NameClient", %"class.blink::HeapHashMap.394", %"class.blink::HeapHashSet.401" }
%"class.blink::HeapHashMap.394" = type { %"class.WTF::HashMap.397" }
%"class.WTF::HashMap.397" = type { %"class.WTF::HashTable.398" }
%"class.WTF::HashTable.398" = type <{ %"struct.WTF::KeyValuePair.400"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.400" = type opaque
%"class.blink::HeapHashSet.401" = type { %"class.WTF::HashSet.404" }
%"class.WTF::HashSet.404" = type { %"class.WTF::HashTable.405" }
%"class.WTF::HashTable.405" = type <{ %"class.blink::WeakMember.407"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.407" = type opaque
%"class.blink::Member.408" = type { %"class.blink::MemberBase.409" }
%"class.blink::MemberBase.409" = type { %"class.blink::StyleEngine"* }
%"class.blink::StyleEngine" = type opaque
%"class.blink::Member.410" = type { %"class.blink::MemberBase.411" }
%"class.blink::MemberBase.411" = type { %"class.blink::StyleSheetList"* }
%"class.blink::StyleSheetList" = type { %"class.blink::ScriptWrappable", %"class.blink::Member.0", %"class.blink::HeapVector.55" }
%"class.blink::Member.412" = type { %"class.blink::MemberBase.413" }
%"class.blink::MemberBase.413" = type { %"class.blink::FormController"* }
%"class.blink::FormController" = type opaque
%"class.blink::TextLinkColors" = type { %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", i8, i8, i8, i8 }
%"class.blink::Color" = type { i32 }
%"class.blink::Member.414" = type { %"class.blink::MemberBase.415" }
%"class.blink::MemberBase.415" = type { %"class.blink::VisitedLinkState"* }
%"class.blink::VisitedLinkState" = type opaque
%"class.blink::HeapHashMap.416" = type { %"class.WTF::HashMap.419" }
%"class.WTF::HashMap.419" = type { %"class.WTF::HashTable.420" }
%"class.WTF::HashTable.420" = type <{ %"struct.WTF::KeyValuePair.422"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.422" = type opaque
%"class.WTF::Vector.423" = type { %"class.WTF::VectorBuffer.424" }
%"class.WTF::VectorBuffer.424" = type { %"class.WTF::VectorBufferBase.425" }
%"class.WTF::VectorBufferBase.425" = type { %"class.blink::AXContext"**, i32, i32 }
%"class.blink::AXContext" = type opaque
%"class.blink::Member.428" = type { %"class.blink::MemberBase.429" }
%"class.blink::MemberBase.429" = type { %"class.blink::AXObjectCache"* }
%"class.blink::AXObjectCache" = type opaque
%"class.blink::Member.430" = type { %"class.blink::MemberBase.431" }
%"class.blink::MemberBase.431" = type { %"class.blink::DocumentMarkerController"* }
%"class.blink::DocumentMarkerController" = type opaque
%"class.blink::Member.36" = type { %"class.blink::MemberBase.37" }
%"class.blink::MemberBase.37" = type { %"class.blink::Element"* }
%"class.base::ElapsedTimer" = type { %"class.base::TimeTicks" }
%"class.blink::Member.432" = type { %"class.blink::MemberBase.433" }
%"class.blink::MemberBase.433" = type { %"class.blink::ScriptRunner"* }
%"class.blink::ScriptRunner" = type opaque
%"class.blink::HeapVector.434" = type { %"class.WTF::Vector.437" }
%"class.WTF::Vector.437" = type { %"class.WTF::VectorBuffer.438" }
%"class.WTF::VectorBuffer.438" = type { %"class.WTF::VectorBufferBase.439" }
%"class.WTF::VectorBufferBase.439" = type { %"class.blink::Member.440"*, i32, i32 }
%"class.blink::Member.440" = type opaque
%"class.std::__1::unique_ptr.442" = type { %"class.std::__1::__compressed_pair.443" }
%"class.std::__1::__compressed_pair.443" = type { %"struct.std::__1::__compressed_pair_elem.444" }
%"struct.std::__1::__compressed_pair_elem.444" = type { %"class.blink::TransformSource"* }
%"class.blink::TransformSource" = type opaque
%"class.blink::DocumentEncodingData" = type <{ %"class.WTF::TextEncoding", i8, i8, [6 x i8] }>
%"class.WTF::TextEncoding" = type { i8* }
%"class.blink::HeapHashSet.448" = type { %"class.WTF::HashSet.451" }
%"class.WTF::HashSet.451" = type { %"class.WTF::HashTable.452" }
%"class.WTF::HashTable.452" = type <{ %"class.blink::WeakMember.454"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.454" = type opaque
%"class.blink::LiveNodeListRegistry" = type <{ %"class.WTF::Vector.455", i32, [4 x i8] }>
%"class.WTF::Vector.455" = type { %"class.WTF::VectorBuffer.456" }
%"class.WTF::VectorBuffer.456" = type { %"class.WTF::VectorBufferBase.457" }
%"class.WTF::VectorBufferBase.457" = type { %"struct.std::__1::pair.458"*, i32, i32 }
%"struct.std::__1::pair.458" = type opaque
%"class.blink::Member.461" = type { %"class.blink::MemberBase.462" }
%"class.blink::MemberBase.462" = type { %"class.blink::SVGDocumentExtensions"* }
%"class.blink::SVGDocumentExtensions" = type opaque
%"class.WTF::Vector.463" = type { %"class.WTF::VectorBuffer.464" }
%"class.WTF::VectorBuffer.464" = type { %"class.WTF::VectorBufferBase.465" }
%"class.WTF::VectorBufferBase.465" = type { %"struct.blink::AnnotatedRegionValue"*, i32, i32 }
%"struct.blink::AnnotatedRegionValue" = type opaque
%"class.std::__1::unique_ptr.468" = type { %"class.std::__1::__compressed_pair.469" }
%"class.std::__1::__compressed_pair.469" = type { %"struct.std::__1::__compressed_pair_elem.470" }
%"struct.std::__1::__compressed_pair_elem.470" = type { %"class.blink::SelectorQueryCache"* }
%"class.blink::SelectorQueryCache" = type opaque
%"class.blink::NthIndexCache" = type opaque
%"class.blink::LayoutView" = type opaque
%"class.blink::HeapVector" = type { %"class.WTF::Vector.40" }
%"class.WTF::Vector.40" = type { %"class.WTF::VectorBuffer.41" }
%"class.WTF::VectorBuffer.41" = type { %"class.WTF::VectorBufferBase.42" }
%"class.WTF::VectorBufferBase.42" = type { %"class.blink::Member.36"*, i32, i32 }
%"class.blink::HeapVector.474" = type { %"class.WTF::Vector.477" }
%"class.WTF::Vector.477" = type { %"class.WTF::VectorBuffer.478" }
%"class.WTF::VectorBuffer.478" = type { %"class.WTF::VectorBufferBase.479" }
%"class.WTF::VectorBufferBase.479" = type { %"class.blink::Member.480"*, i32, i32 }
%"class.blink::Member.480" = type opaque
%"class.blink::DocumentTiming" = type { %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.blink::Member.23" }
%"class.blink::Member.482" = type { %"class.blink::MemberBase.483" }
%"class.blink::MemberBase.483" = type { %"class.blink::MediaQueryMatcher"* }
%"class.blink::MediaQueryMatcher" = type opaque
%"class.blink::Member.484" = type { %"class.blink::MemberBase.485" }
%"class.blink::MemberBase.485" = type { %"class.blink::ScriptedAnimationController"* }
%"class.blink::ScriptedAnimationController" = type opaque
%"class.blink::Member.486" = type { %"class.blink::MemberBase.487" }
%"class.blink::MemberBase.487" = type { %"class.blink::ScriptedIdleTaskController"* }
%"class.blink::ScriptedIdleTaskController" = type opaque
%"class.blink::Member.488" = type { %"class.blink::MemberBase.489" }
%"class.blink::MemberBase.489" = type { %"class.blink::TextAutosizer"* }
%"class.blink::TextAutosizer" = type opaque
%"class.blink::Member.490" = type { %"class.blink::MemberBase.491" }
%"class.blink::MemberBase.491" = type { %"class.blink::ElementDataCache"* }
%"class.blink::ElementDataCache" = type opaque
%"class.WTF::HashMap.492" = type { %"class.WTF::HashTable.493" }
%"class.WTF::HashTable.493" = type <{ %"struct.WTF::KeyValuePair.496"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.496" = type opaque
%"class.blink::Member.497" = type { %"class.blink::MemberBase.498" }
%"class.blink::MemberBase.498" = type { %"class.blink::DocumentAnimations"* }
%"class.blink::DocumentAnimations" = type opaque
%"class.blink::Member.499" = type { %"class.blink::MemberBase.500" }
%"class.blink::MemberBase.500" = type { %"class.blink::DocumentTimeline"* }
%"class.blink::DocumentTimeline" = type opaque
%"class.blink::Member.501" = type { %"class.blink::MemberBase.502" }
%"class.blink::MemberBase.502" = type { %"class.blink::PendingAnimations"* }
%"class.blink::PendingAnimations" = type opaque
%"class.blink::Member.503" = type { %"class.blink::MemberBase.504" }
%"class.blink::MemberBase.504" = type { %"class.blink::WorkletAnimationController"* }
%"class.blink::WorkletAnimationController" = type opaque
%"class.blink::HeapTaskRunnerTimer" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.364", { i64, i64 } }
%"class.blink::TimerBase" = type { i32 (...)**, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::Location", %class.scoped_refptr.355, %"class.base::WeakPtrFactory" }
%"class.base::TimeDelta" = type { i64 }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%class.scoped_refptr.355 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.356" }>
%"class.base::RefCountedThreadSafe.356" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.357 }
%class.scoped_refptr.357 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.358", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.358" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.359" }
%"struct.std::__1::atomic.359" = type { %"struct.std::__1::__atomic_base.360" }
%"struct.std::__1::__atomic_base.360" = type { %"struct.std::__1::__atomic_base.361" }
%"struct.std::__1::__atomic_base.361" = type { %"struct.std::__1::__cxx_atomic_impl.362" }
%"struct.std::__1::__cxx_atomic_impl.362" = type { %"struct.std::__1::__cxx_atomic_base_impl.363" }
%"struct.std::__1::__cxx_atomic_base_impl.363" = type { i8 }
%"class.blink::WeakMember.364" = type { %"class.blink::MemberBase.24" }
%"class.blink::HeapHashSet.505" = type { %"class.WTF::HashSet.508" }
%"class.WTF::HashSet.508" = type { %"class.WTF::HashTable.509" }
%"class.WTF::HashTable.509" = type <{ %"class.blink::Member.511"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.511" = type opaque
%"class.blink::Member.512" = type { %"class.blink::MemberBase.513" }
%"class.blink::MemberBase.513" = type { %"class.blink::CanvasFontCache"* }
%"class.blink::CanvasFontCache" = type opaque
%"class.blink::Member.514" = type { %"class.blink::MemberBase.515" }
%"class.blink::MemberBase.515" = type { %"class.blink::IntersectionObserverController"* }
%"class.blink::IntersectionObserverController" = type opaque
%"class.blink::Member.516" = type { %"class.blink::MemberBase.517" }
%"class.blink::MemberBase.517" = type { %"class.blink::SnapCoordinator"* }
%"class.blink::SnapCoordinator" = type opaque
%"class.blink::Member.518" = type { %"class.blink::MemberBase.519" }
%"class.blink::MemberBase.519" = type { %"class.blink::PropertyRegistry"* }
%"class.blink::PropertyRegistry" = type opaque
%"class.blink::Member.520" = type { %"class.blink::MemberBase.521" }
%"class.blink::MemberBase.521" = type { %"class.blink::Document::NetworkStateObserver"* }
%"class.blink::Document::NetworkStateObserver" = type opaque
%"class.std::__1::unique_ptr.522" = type { %"class.std::__1::__compressed_pair.523" }
%"class.std::__1::__compressed_pair.523" = type { %"struct.std::__1::__compressed_pair_elem.524" }
%"struct.std::__1::__compressed_pair_elem.524" = type { %"class.ukm::UkmRecorder"* }
%"class.ukm::UkmRecorder" = type opaque
%"class.std::__1::unique_ptr.528" = type { %"class.std::__1::__compressed_pair.529" }
%"class.std::__1::__compressed_pair.529" = type { %"struct.std::__1::__compressed_pair_elem.530" }
%"struct.std::__1::__compressed_pair_elem.530" = type { %"class.blink::FontMatchingMetrics"* }
%"class.blink::FontMatchingMetrics" = type opaque
%"class.blink::Member.534" = type { %"class.blink::MemberBase.535" }
%"class.blink::MemberBase.535" = type { %"class.blink::DOMFeaturePolicy"* }
%"class.blink::DOMFeaturePolicy" = type opaque
%"class.blink::Member.536" = type { %"class.blink::MemberBase.537" }
%"class.blink::MemberBase.537" = type { %"class.blink::SlotAssignmentEngine"* }
%"class.blink::SlotAssignmentEngine" = type opaque
%"class.blink::Member.538" = type { %"class.blink::MemberBase.539" }
%"class.blink::MemberBase.539" = type { %"class.blink::ViewportData"* }
%"class.blink::ViewportData" = type opaque
%"class.blink::Member.540" = type { %"class.blink::MemberBase.541" }
%"class.blink::MemberBase.541" = type { %"class.blink::LazyLoadImageObserver"* }
%"class.blink::LazyLoadImageObserver" = type opaque
%"class.WTF::Vector.542" = type { %"class.WTF::VectorBuffer.543" }
%"class.WTF::VectorBuffer.543" = type { %"class.WTF::VectorBufferBase.544" }
%"class.WTF::VectorBufferBase.544" = type { i8*, i32, i32 }
%"class.blink::HeapHashMap.547" = type { %"class.WTF::HashMap.550" }
%"class.WTF::HashMap.550" = type { %"class.WTF::HashTable.551" }
%"class.WTF::HashTable.551" = type <{ %"struct.WTF::KeyValuePair.553"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.553" = type opaque
%"class.blink::Member.554" = type { %"class.blink::MemberBase.555" }
%"class.blink::MemberBase.555" = type { %"class.blink::BeforeUnloadEventListener"* }
%"class.blink::BeforeUnloadEventListener" = type opaque
%"class.std::__1::unique_ptr.556" = type { %"class.std::__1::__compressed_pair.557" }
%"class.std::__1::__compressed_pair.557" = type { %"struct.std::__1::__compressed_pair_elem.558" }
%"struct.std::__1::__compressed_pair_elem.558" = type { %"class.blink::DocumentResourceCoordinator"* }
%"class.blink::DocumentResourceCoordinator" = type opaque
%"class.blink::Member.562" = type { %"class.blink::MemberBase.563" }
%"class.blink::MemberBase.563" = type { %"class.blink::CookieJar"* }
%"class.blink::CookieJar" = type opaque
%"class.blink::Member.564" = type { %"class.blink::MemberBase.565" }
%"class.blink::MemberBase.565" = type { %"class.blink::FragmentDirective"* }
%"class.blink::FragmentDirective" = type { %"class.blink::ScriptWrappable" }
%"class.blink::HeapHashMap.566" = type { %"class.WTF::HashMap.569" }
%"class.WTF::HashMap.569" = type { %"class.WTF::HashTable.570" }
%"class.WTF::HashTable.570" = type <{ %"struct.WTF::KeyValuePair.572"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.572" = type opaque
%"class.blink::HeapObserverSet" = type { i32, [4 x i8], %"class.blink::HeapHashSet.573" }
%"class.blink::HeapHashSet.573" = type { %"class.WTF::HashSet.576" }
%"class.WTF::HashSet.576" = type { %"class.WTF::HashTable.577" }
%"class.WTF::HashTable.577" = type <{ %"class.blink::WeakMember.579"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.579" = type opaque
%"class.blink::Member.580" = type { %"class.blink::MemberBase.581" }
%"class.blink::MemberBase.581" = type { %"class.blink::DisplayLockDocumentState"* }
%"class.blink::DisplayLockDocumentState" = type opaque
%"class.blink::Member.582" = type { %"class.blink::MemberBase.583" }
%"class.blink::MemberBase.583" = type { %"class.blink::FontPreloadManager"* }
%"class.blink::FontPreloadManager" = type <{ %"class.blink::Member.23", %"class.blink::HeapHashSet.589", i32, [4 x i8], %"class.blink::HeapTaskRunnerTimer.596", %"class.base::TimeDelta", i32, [4 x i8] }>
%"class.blink::HeapHashSet.589" = type { %"class.WTF::HashSet.592" }
%"class.WTF::HashSet.592" = type { %"class.WTF::HashTable.593" }
%"class.WTF::HashTable.593" = type <{ %"class.blink::Member.595"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.595" = type opaque
%"class.blink::HeapTaskRunnerTimer.596" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.597", { i64, i64 } }
%"class.blink::WeakMember.597" = type { %"class.blink::MemberBase.583" }
%"class.blink::WeakMember.584" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::Node"* }
%"class.blink::Member.585" = type { %"class.blink::MemberBase.586" }
%"class.blink::MemberBase.586" = type { %"class.blink::DocumentData"* }
%"class.blink::DocumentData" = type opaque
%"class.blink::Member.25" = type { %"class.blink::MemberBase.26" }
%"class.blink::MemberBase.26" = type { %"class.blink::TreeOrderedMap"* }
%"class.blink::TreeOrderedMap" = type { %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { %"class.WTF::AtomicString", %"class.blink::Member.32" }
%"class.blink::Member.32" = type { %"class.blink::MemberBase.33" }
%"class.blink::MemberBase.33" = type { %"class.blink::TreeOrderedMap::MapEntry"* }
%"class.blink::TreeOrderedMap::MapEntry" = type { %"class.blink::Member.36", i32, %"class.blink::HeapVector" }
%"class.blink::Member.44" = type { %"class.blink::MemberBase.45" }
%"class.blink::MemberBase.45" = type { %"class.blink::IdTargetObserverRegistry"* }
%"class.blink::IdTargetObserverRegistry" = type opaque
%"class.blink::Member.46" = type { %"class.blink::MemberBase.47" }
%"class.blink::MemberBase.47" = type { %"class.blink::ScopedStyleResolver"* }
%"class.blink::ScopedStyleResolver" = type opaque
%"class.blink::Member.48" = type { %"class.blink::MemberBase.49" }
%"class.blink::MemberBase.49" = type { %"class.blink::DOMSelection"* }
%"class.blink::DOMSelection" = type opaque
%"class.blink::RadioButtonGroupScope" = type { %"class.blink::Member.50" }
%"class.blink::Member.50" = type { %"class.blink::MemberBase.51" }
%"class.blink::MemberBase.51" = type { %"class.blink::HeapHashMap.52"* }
%"class.blink::HeapHashMap.52" = type opaque
%"class.blink::Member.53" = type { %"class.blink::MemberBase.54" }
%"class.blink::MemberBase.54" = type { %"class.blink::SVGTreeScopeResources"* }
%"class.blink::SVGTreeScopeResources" = type opaque
%"class.blink::HeapVector.55" = type { %"class.WTF::Vector.58" }
%"class.WTF::Vector.58" = type { %"class.WTF::VectorBuffer.59" }
%"class.WTF::VectorBuffer.59" = type { %"class.WTF::VectorBufferBase.60" }
%"class.WTF::VectorBufferBase.60" = type { %"class.blink::Member.61"*, i32, i32 }
%"class.blink::Member.2" = type { %"class.blink::MemberBase.3" }
%"class.blink::MemberBase.3" = type { %"class.blink::NodeData"* }
%"class.blink::NodeData" = type { i16, %"class.WTF::ConcurrentlyReadBitField" }
%"class.WTF::ConcurrentlyReadBitField" = type { %"class.WTF::SingleThreadedBitField" }
%"class.WTF::SingleThreadedBitField" = type { i16 }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::Animatable" = type { i32 (...)** }
%"class.blink::Member.8" = type { %"class.blink::MemberBase.9" }
%"class.blink::MemberBase.9" = type { %"class.blink::ElementData"* }
%"class.blink::ElementData" = type { %"class.WTF::ConcurrentlyReadBitField.12", %"class.blink::Member.14", %"class.blink::SpaceSplitString", %"class.WTF::AtomicString" }
%"class.WTF::ConcurrentlyReadBitField.12" = type { %"class.WTF::SingleThreadedBitField.13" }
%"class.WTF::SingleThreadedBitField.13" = type { i32 }
%"class.blink::Member.14" = type { %"class.blink::MemberBase.15" }
%"class.blink::MemberBase.15" = type { %"class.blink::CSSPropertyValueSet"* }
%"class.blink::CSSPropertyValueSet" = type { i32 }
%"class.blink::SpaceSplitString" = type { %class.scoped_refptr.18 }
%class.scoped_refptr.18 = type { %"class.blink::SpaceSplitString::Data"* }
%"class.blink::SpaceSplitString::Data" = type { %"class.WTF::RefCounted.19", %"class.WTF::AtomicString", %"class.WTF::Vector" }
%"class.WTF::RefCounted.19" = type { %"class.base::RefCounted.20" }
%"class.base::RefCounted.20" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase", [32 x i8] }
%"class.WTF::VectorBufferBase" = type { %"class.WTF::AtomicString"*, i32, i32 }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1222" }
%"class.std::__1::__compressed_pair.1222" = type { %"struct.std::__1::__compressed_pair_elem.1223" }
%"struct.std::__1::__compressed_pair_elem.1223" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.1224 }
%union.anon.1224 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::SVGElement" = type { %"class.blink::Element", %"class.blink::HeapHashSet.679", %"class.blink::HeapHashMap.686", %"class.blink::Member.693", %"class.blink::Member.695" }
%"class.blink::HeapHashSet.679" = type { %"class.WTF::HashSet.682" }
%"class.WTF::HashSet.682" = type { %"class.WTF::HashTable.683" }
%"class.WTF::HashTable.683" = type <{ %"class.blink::WeakMember.685"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.685" = type opaque
%"class.blink::HeapHashMap.686" = type { %"class.WTF::HashMap.689" }
%"class.WTF::HashMap.689" = type { %"class.WTF::HashTable.690" }
%"class.WTF::HashTable.690" = type <{ %"struct.WTF::KeyValuePair.692"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.692" = type opaque
%"class.blink::Member.693" = type { %"class.blink::MemberBase.694" }
%"class.blink::MemberBase.694" = type { %"class.blink::SVGElementRareData"* }
%"class.blink::SVGElementRareData" = type opaque
%"class.blink::Member.695" = type { %"class.blink::MemberBase.696" }
%"class.blink::MemberBase.696" = type { %"class.blink::SVGAnimatedString"* }
%"class.blink::SVGAnimatedString" = type opaque
%"class.blink::Attribute" = type { %"class.blink::QualifiedName", %"class.WTF::AtomicString" }
%"class.blink::UniqueElementData" = type { %"class.blink::ElementData", %"class.blink::Member.14", %"class.WTF::Vector.704" }
%"class.WTF::Vector.704" = type { %"class.WTF::VectorBuffer.705" }
%"class.WTF::VectorBuffer.705" = type { %"class.WTF::VectorBufferBase.706", [64 x i8] }
%"class.WTF::VectorBufferBase.706" = type { %"class.blink::Attribute"*, i32, i32 }
%"class.blink::AttributeCollectionGeneric" = type { %"class.blink::AttributeArray" }
%"class.blink::AttributeArray" = type <{ %"class.blink::Attribute"*, i32, [4 x i8] }>
%"struct.std::__1::pair.697" = type { i32, %"class.blink::QualifiedName" }
%"struct.std::__1::pair.698" = type { i32, %"class.blink::QualifiedName" }
%"class.blink::MutableAttributeCollection" = type { %"class.blink::AttributeCollectionGeneric.1243" }
%"class.blink::AttributeCollectionGeneric.1243" = type { %"class.WTF::Vector.704"* }
%"class.blink::ExceptionState" = type { i32 (...)**, %"class.blink::ExceptionContext", %"class.blink::ExceptionState::ContextScope"*, %"class.v8::Isolate"*, i32, %"class.WTF::String", %"class.blink::TraceWrapperV8Reference.699" }
%"class.blink::ExceptionContext" = type { i16, i16, i8*, i8* }
%"class.blink::ExceptionState::ContextScope" = type { %"class.blink::ExceptionState"*, %"class.blink::ExceptionState::ContextScope"*, %"class.blink::ExceptionContext" }
%"class.blink::TraceWrapperV8Reference.699" = type { %"class.v8::TracedReference.700" }
%"class.v8::TracedReference.700" = type { %"class.v8::BasicTracedReference.701" }
%"class.v8::BasicTracedReference.701" = type { %"class.v8::TracedReferenceBase" }
%"class.WTF::StringAppend" = type { %"class.WTF::StringAppend.702", i8* }
%"class.WTF::StringAppend.702" = type { i8*, %"class.WTF::AtomicString" }
%"class.WTF::StringTypeAdapter.1271" = type <{ i8*, i32, [4 x i8] }>
%"class.blink::V8UnionStringOrTrustedHTMLOrTrustedScriptOrTrustedScriptURL" = type opaque
%"class.blink::Attr" = type { %"class.blink::Node", %"class.blink::Member.36", %"class.blink::QualifiedName", %"class.WTF::AtomicString" }
%"class.blink::NodeRareData" = type { %"class.blink::NodeData", %"class.blink::Member.709", %"class.blink::Member.712", %"class.blink::Member.714", %"class.blink::Member.732", %"class.blink::Member.734" }
%"class.blink::Member.709" = type { %"class.blink::MemberBase.710" }
%"class.blink::MemberBase.710" = type { %"class.blink::NodeRenderingData"* }
%"class.blink::NodeRenderingData" = type { %"class.blink::NodeData", %"class.blink::LayoutObject"*, %class.scoped_refptr.711 }
%"class.blink::LayoutObject" = type opaque
%class.scoped_refptr.711 = type { %"class.blink::ComputedStyle"* }
%"class.blink::ComputedStyle" = type opaque
%"class.blink::Member.712" = type { %"class.blink::MemberBase.713" }
%"class.blink::MemberBase.713" = type { %"class.blink::NodeListsNodeData"* }
%"class.blink::NodeListsNodeData" = type opaque
%"class.blink::Member.714" = type { %"class.blink::MemberBase.715" }
%"class.blink::MemberBase.715" = type { %"class.blink::NodeMutationObserverData"* }
%"class.blink::NodeMutationObserverData" = type { %"class.blink::HeapVector.718", %"class.blink::HeapHashSet.726" }
%"class.blink::HeapVector.718" = type { %"class.WTF::Vector.721" }
%"class.WTF::Vector.721" = type { %"class.WTF::VectorBuffer.722" }
%"class.WTF::VectorBuffer.722" = type { %"class.WTF::VectorBufferBase.723" }
%"class.WTF::VectorBufferBase.723" = type { %"class.blink::Member.724"*, i32, i32 }
%"class.blink::Member.724" = type { %"class.blink::MemberBase.1186" }
%"class.blink::MemberBase.1186" = type { %"class.blink::MutationObserverRegistration"* }
%"class.blink::MutationObserverRegistration" = type opaque
%"class.blink::HeapHashSet.726" = type { %"class.WTF::HashSet.729" }
%"class.WTF::HashSet.729" = type { %"class.WTF::HashTable.730" }
%"class.WTF::HashTable.730" = type <{ %"class.blink::Member.724"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.732" = type { %"class.blink::MemberBase.733" }
%"class.blink::MemberBase.733" = type { %"class.blink::FlatTreeNodeData"* }
%"class.blink::FlatTreeNodeData" = type opaque
%"class.blink::Member.734" = type { %"class.blink::MemberBase.735" }
%"class.blink::MemberBase.735" = type { %"class.blink::HeapHashSet.736"* }
%"class.blink::HeapHashSet.736" = type opaque
%"class.blink::ElementRareData" = type <{ %"class.blink::NodeRareData", %"class.blink::FloatSize", %"class.WTF::AtomicString", %"class.blink::Member.737", %"class.blink::Member.739", %"class.blink::Member.743", %"class.blink::Member.745", %"class.blink::Member.745", %"class.std::__1::unique_ptr.747", %"class.blink::Member.758", %"class.blink::Member.760", %"class.blink::Member.770", %"class.blink::Member.773", %"class.blink::Member.775", %"class.blink::Member.390", %"class.blink::Member.1040", %"class.blink::Member.1043", %"class.WTF::AtomicString", %"class.blink::Member.1054", %"class.blink::Member.1056", %"class.blink::Member.1062", %"class.blink::Member.1064", %"class.blink::Member.1080", i8, i8, i8, [5 x i8] }>
%"class.blink::FloatSize" = type { float, float }
%"class.blink::Member.737" = type { %"class.blink::MemberBase.738" }
%"class.blink::MemberBase.738" = type { %"class.blink::DatasetDOMStringMap"* }
%"class.blink::DatasetDOMStringMap" = type { %"class.blink::DOMStringMap", %"class.blink::Member.36" }
%"class.blink::DOMStringMap" = type { %"class.blink::ScriptWrappable" }
%"class.blink::Member.739" = type { %"class.blink::MemberBase.740" }
%"class.blink::MemberBase.740" = type { %"class.blink::ShadowRoot"* }
%"class.blink::ShadowRoot" = type <{ %"class.blink::DocumentFragment", %"class.blink::TreeScope", %"class.blink::Member.410", %"class.blink::Member.741", i32, [4 x i8] }>
%"class.blink::DocumentFragment" = type { %"class.blink::ContainerNode" }
%"class.blink::Member.741" = type { %"class.blink::MemberBase.742" }
%"class.blink::MemberBase.742" = type { %"class.blink::SlotAssignment"* }
%"class.blink::SlotAssignment" = type opaque
%"class.blink::Member.743" = type { %"class.blink::MemberBase.744" }
%"class.blink::MemberBase.744" = type { %"class.blink::EditContext"* }
%"class.blink::EditContext" = type opaque
%"class.blink::Member.745" = type { %"class.blink::MemberBase.746" }
%"class.blink::MemberBase.746" = type { %"class.blink::DOMTokenList"* }
%"class.blink::DOMTokenList" = type <{ %"class.blink::ScriptWrappable", %"class.blink::SpaceSplitString", %"class.blink::Member.36", %"class.blink::QualifiedName", i8, [7 x i8] }>
%"class.std::__1::unique_ptr.747" = type { %"class.std::__1::__compressed_pair.748" }
%"class.std::__1::__compressed_pair.748" = type { %"struct.std::__1::__compressed_pair_elem.749" }
%"struct.std::__1::__compressed_pair_elem.749" = type { %"class.blink::NamesMap"* }
%"class.blink::NamesMap" = type { %"class.WTF::HashMap.750" }
%"class.WTF::HashMap.750" = type { %"class.WTF::HashTable.751" }
%"class.WTF::HashTable.751" = type <{ %"struct.WTF::KeyValuePair.754"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.754" = type { %"class.WTF::AtomicString", %"class.absl::optional.1187" }
%"class.absl::optional.1187" = type { %"class.absl::optional_internal::optional_data.1188" }
%"class.absl::optional_internal::optional_data.1188" = type { %"class.absl::optional_internal::optional_data_base.1189" }
%"class.absl::optional_internal::optional_data_base.1189" = type { %"class.absl::optional_internal::optional_data_dtor_base.1190" }
%"class.absl::optional_internal::optional_data_dtor_base.1190" = type { i8, %union.anon.1191 }
%union.anon.1191 = type { %"class.blink::SpaceSplitString" }
%"class.blink::Member.758" = type { %"class.blink::MemberBase.759" }
%"class.blink::MemberBase.759" = type { %"class.blink::NamedNodeMap"* }
%"class.blink::NamedNodeMap" = type { %"class.blink::ScriptWrappable", %"class.blink::Member.36" }
%"class.blink::Member.760" = type { %"class.blink::MemberBase.761" }
%"class.blink::MemberBase.761" = type { %"class.blink::HeapVector.762"* }
%"class.blink::HeapVector.762" = type { %"class.WTF::Vector.765" }
%"class.WTF::Vector.765" = type { %"class.WTF::VectorBuffer.766" }
%"class.WTF::VectorBuffer.766" = type { %"class.WTF::VectorBufferBase.767" }
%"class.WTF::VectorBufferBase.767" = type { %"class.blink::Member.768"*, i32, i32 }
%"class.blink::Member.768" = type { %"class.blink::MemberBase.1221" }
%"class.blink::MemberBase.1221" = type { %"class.blink::Attr"* }
%"class.blink::Member.770" = type { %"class.blink::MemberBase.771" }
%"class.blink::MemberBase.771" = type { %"class.blink::InlineCSSStyleDeclaration"* }
%"class.blink::InlineCSSStyleDeclaration" = type { %"class.blink::AbstractPropertySetCSSStyleDeclaration", %"class.blink::Member.36" }
%"class.blink::AbstractPropertySetCSSStyleDeclaration" = type { %"class.blink::CSSStyleDeclaration" }
%"class.blink::CSSStyleDeclaration" = type { %"class.blink::ScriptWrappable", %"class.blink::ExecutionContextClient" }
%"class.blink::ExecutionContextClient" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::WeakMember.772" }
%"class.blink::WeakMember.772" = type { %"class.blink::MemberBase.129" }
%"class.blink::Member.773" = type { %"class.blink::MemberBase.774" }
%"class.blink::MemberBase.774" = type { %"class.blink::InlineStylePropertyMap"* }
%"class.blink::InlineStylePropertyMap" = type { %"class.blink::StylePropertyMap", %"class.blink::Member.36" }
%"class.blink::StylePropertyMap" = type { %"class.blink::StylePropertyMapReadOnlyMainThread" }
%"class.blink::StylePropertyMapReadOnlyMainThread" = type { %"class.blink::StylePropertyMapReadOnly" }
%"class.blink::StylePropertyMapReadOnly" = type { %"class.blink::ScriptWrappable", %"class.blink::PairIterable" }
%"class.blink::PairIterable" = type { %"class.blink::Iterable" }
%"class.blink::Iterable" = type { i32 (...)** }
%"class.blink::Member.775" = type { %"class.blink::MemberBase.776" }
%"class.blink::MemberBase.776" = type { %"class.blink::ElementAnimations"* }
%"class.blink::ElementAnimations" = type { %"class.blink::EffectStack", %"class.blink::CSSAnimations", %"class.blink::HeapHashCountedSet", %"class.blink::HeapHashSet.1026", i8, %class.scoped_refptr.1033, %"class.std::__1::unique_ptr.1034" }
%"class.blink::EffectStack" = type { %"class.blink::HeapVector.779" }
%"class.blink::HeapVector.779" = type { %"class.WTF::Vector.782" }
%"class.WTF::Vector.782" = type { %"class.WTF::VectorBuffer.783" }
%"class.WTF::VectorBuffer.783" = type { %"class.WTF::VectorBufferBase.784" }
%"class.WTF::VectorBufferBase.784" = type { %"class.blink::Member.785"*, i32, i32 }
%"class.blink::Member.785" = type { %"class.blink::MemberBase.786" }
%"class.blink::MemberBase.786" = type { %"class.blink::SampledEffect"* }
%"class.blink::SampledEffect" = type { %"class.blink::WeakMember.789", %"class.blink::HeapVector.791", i32, i32 }
%"class.blink::WeakMember.789" = type { %"class.blink::MemberBase.790" }
%"class.blink::MemberBase.790" = type { %"class.blink::KeyframeEffect"* }
%"class.blink::KeyframeEffect" = type { %"class.blink::AnimationEffect", %"class.blink::Member.36", %"class.blink::Member.36", %"class.WTF::String", %"class.blink::Member.844", %"class.blink::Member.785", i32, %"class.WTF::Vector.1181", i8, %"class.absl::optional.1075" }
%"class.blink::AnimationEffect" = type { %"class.blink::ScriptWrappable", %"class.blink::Member.826", %"struct.blink::Timing", %"class.blink::Member.830", %"struct.blink::Timing::CalculatedTiming", i8, %"class.absl::optional", %"class.absl::optional.839", %"class.blink::AnimationTimeDelta" }
%"class.blink::Member.826" = type { %"class.blink::MemberBase.827" }
%"class.blink::MemberBase.827" = type { %"class.blink::AnimationEffectOwner"* }
%"class.blink::AnimationEffectOwner" = type { %"class.blink::GarbageCollectedMixin" }
%"struct.blink::Timing" = type <{ %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta", i32, [4 x i8], double, double, %"class.absl::optional", i32, [4 x i8], %class.scoped_refptr.828, i16, [6 x i8] }>
%class.scoped_refptr.828 = type { %"class.blink::TimingFunction"* }
%"class.blink::TimingFunction" = type { i32 (...)**, %"class.WTF::ThreadSafeRefCounted", i32 }
%"class.WTF::ThreadSafeRefCounted" = type { %"class.base::RefCountedThreadSafe.829" }
%"class.base::RefCountedThreadSafe.829" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.blink::Member.830" = type { %"class.blink::MemberBase.831" }
%"class.blink::MemberBase.831" = type { %"class.blink::AnimationEffect::EventDelegate"* }
%"class.blink::AnimationEffect::EventDelegate" = type { i32 (...)** }
%"struct.blink::Timing::CalculatedTiming" = type { i32, %"class.absl::optional.834", %"class.absl::optional.834", i8, i8, i8, %"class.absl::optional", %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta" }
%"class.absl::optional.834" = type { %"class.absl::optional_internal::optional_data.835" }
%"class.absl::optional_internal::optional_data.835" = type { %"class.absl::optional_internal::optional_data_base.836" }
%"class.absl::optional_internal::optional_data_base.836" = type { %"class.absl::optional_internal::optional_data_dtor_base.837" }
%"class.absl::optional_internal::optional_data_dtor_base.837" = type { i8, %union.anon.838 }
%union.anon.838 = type { double }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.blink::AnimationTimeDelta" }
%"class.absl::optional.839" = type { %"class.absl::optional_internal::optional_data.840" }
%"class.absl::optional_internal::optional_data.840" = type { %"class.absl::optional_internal::optional_data_base.841" }
%"class.absl::optional_internal::optional_data_base.841" = type { %"class.absl::optional_internal::optional_data_dtor_base.842" }
%"class.absl::optional_internal::optional_data_dtor_base.842" = type { i8, %union.anon.843 }
%union.anon.843 = type { i32 }
%"class.blink::AnimationTimeDelta" = type { double }
%"class.blink::Member.844" = type { %"class.blink::MemberBase.845" }
%"class.blink::MemberBase.845" = type { %"class.blink::KeyframeEffectModelBase"* }
%"class.blink::KeyframeEffectModelBase" = type <{ %"class.blink::EffectModel", %"class.blink::HeapVector.848", %"class.blink::Member.856", %"class.blink::Member.881", i32, [4 x i8], double, %"class.blink::AnimationTimeDelta", i32, [4 x i8], %class.scoped_refptr.828, i8, i8, i8, [5 x i8] }>
%"class.blink::EffectModel" = type { i32 (...)** }
%"class.blink::HeapVector.848" = type { %"class.WTF::Vector.851" }
%"class.WTF::Vector.851" = type { %"class.WTF::VectorBuffer.852" }
%"class.WTF::VectorBuffer.852" = type { %"class.WTF::VectorBufferBase.853" }
%"class.WTF::VectorBufferBase.853" = type { %"class.blink::Member.854"*, i32, i32 }
%"class.blink::Member.854" = type { %"class.blink::MemberBase.1199" }
%"class.blink::MemberBase.1199" = type { %"class.blink::Keyframe"* }
%"class.blink::Keyframe" = type { i32 (...)**, %"class.absl::optional.834", %"class.absl::optional.1202", %class.scoped_refptr.828 }
%"class.absl::optional.1202" = type { %"class.absl::optional_internal::optional_data.1203" }
%"class.absl::optional_internal::optional_data.1203" = type { %"class.absl::optional_internal::optional_data_base.1204" }
%"class.absl::optional_internal::optional_data_base.1204" = type { %"class.absl::optional_internal::optional_data_dtor_base.1205" }
%"class.absl::optional_internal::optional_data_dtor_base.1205" = type { i8, %union.anon.1206 }
%union.anon.1206 = type { i32 }
%"class.blink::Member.856" = type { %"class.blink::MemberBase.857" }
%"class.blink::MemberBase.857" = type { %"class.blink::HeapHashMap.858"* }
%"class.blink::HeapHashMap.858" = type { %"class.WTF::HashMap.861" }
%"class.WTF::HashMap.861" = type { %"class.WTF::HashTable.862" }
%"class.WTF::HashTable.862" = type <{ %"struct.WTF::KeyValuePair.864"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.864" = type { %"class.blink::PropertyHandle", %"class.blink::Member.866" }
%"class.blink::PropertyHandle" = type { i32, %union.anon.865, %"class.WTF::AtomicString" }
%union.anon.865 = type { %"class.blink::CSSProperty"* }
%"class.blink::CSSProperty" = type <{ %"class.blink::CSSUnresolvedProperty", i32, i32, i8, [7 x i8] }>
%"class.blink::CSSUnresolvedProperty" = type { i32 (...)** }
%"class.blink::Member.866" = type { %"class.blink::MemberBase.867" }
%"class.blink::MemberBase.867" = type { %"class.blink::KeyframeEffectModelBase::PropertySpecificKeyframeGroup"* }
%"class.blink::KeyframeEffectModelBase::PropertySpecificKeyframeGroup" = type { %"class.blink::HeapVector.870" }
%"class.blink::HeapVector.870" = type { %"class.WTF::Vector.873" }
%"class.WTF::Vector.873" = type { %"class.WTF::VectorBuffer.874" }
%"class.WTF::VectorBuffer.874" = type { %"class.WTF::VectorBufferBase.875" }
%"class.WTF::VectorBufferBase.875" = type { %"class.blink::Member.876"*, i32, i32 }
%"class.blink::Member.876" = type { %"class.blink::MemberBase.877" }
%"class.blink::MemberBase.877" = type { %"class.blink::Keyframe::PropertySpecificKeyframe"* }
%"class.blink::Keyframe::PropertySpecificKeyframe" = type <{ i32 (...)**, double, %class.scoped_refptr.828, i32, [4 x i8] }>
%"class.blink::Member.881" = type { %"class.blink::MemberBase.882" }
%"class.blink::MemberBase.882" = type { %"class.blink::InterpolationEffect"* }
%"class.blink::InterpolationEffect" = type { i8, %"class.blink::HeapVector.885" }
%"class.blink::HeapVector.885" = type { %"class.WTF::Vector.888" }
%"class.WTF::Vector.888" = type { %"class.WTF::VectorBuffer.889" }
%"class.WTF::VectorBuffer.889" = type { %"class.WTF::VectorBufferBase.890" }
%"class.WTF::VectorBufferBase.890" = type { %"class.blink::Member.891"*, i32, i32 }
%"class.blink::Member.891" = type { %"class.blink::MemberBase.1196" }
%"class.blink::MemberBase.1196" = type { %"class.blink::InterpolationEffect::InterpolationRecord"* }
%"class.blink::InterpolationEffect::InterpolationRecord" = type { %"class.blink::Member.797", %class.scoped_refptr.828, double, double, double, double }
%"class.blink::Member.797" = type { %"class.blink::MemberBase.798" }
%"class.blink::MemberBase.798" = type { %"class.blink::Interpolation"* }
%"class.blink::Interpolation" = type { i32 (...)** }
%"class.WTF::Vector.1181" = type { %"class.WTF::VectorBuffer.1182" }
%"class.WTF::VectorBuffer.1182" = type { %"class.WTF::VectorBufferBase.1183" }
%"class.WTF::VectorBufferBase.1183" = type { i32*, i32, i32 }
%"class.absl::optional.1075" = type { %"class.absl::optional_internal::optional_data.1076" }
%"class.absl::optional_internal::optional_data.1076" = type { %"class.absl::optional_internal::optional_data_base.1077" }
%"class.absl::optional_internal::optional_data_base.1077" = type { %"class.absl::optional_internal::optional_data_dtor_base.1078" }
%"class.absl::optional_internal::optional_data_dtor_base.1078" = type { i8, %union.anon.1079 }
%union.anon.1079 = type { %"class.blink::FloatSize" }
%"class.blink::HeapVector.791" = type { %"class.WTF::Vector.794" }
%"class.WTF::Vector.794" = type { %"class.WTF::VectorBuffer.795" }
%"class.WTF::VectorBuffer.795" = type { %"class.WTF::VectorBufferBase.796" }
%"class.WTF::VectorBufferBase.796" = type { %"class.blink::Member.797"*, i32, i32 }
%"class.blink::CSSAnimations" = type { %"class.blink::HeapVector.803", %"class.blink::HeapHashMap.811", %"class.blink::CSSAnimationUpdate", %"class.blink::HeapHashMap.1013", %"class.blink::HeapHashMap.1013" }
%"class.blink::HeapVector.803" = type { %"class.WTF::Vector.806" }
%"class.WTF::Vector.806" = type { %"class.WTF::VectorBuffer.807" }
%"class.WTF::VectorBuffer.807" = type { %"class.WTF::VectorBufferBase.808" }
%"class.WTF::VectorBufferBase.808" = type { %"class.blink::Member.809"*, i32, i32 }
%"class.blink::Member.809" = type opaque
%"class.blink::HeapHashMap.811" = type { %"class.WTF::HashMap.814" }
%"class.WTF::HashMap.814" = type { %"class.WTF::HashTable.815" }
%"class.WTF::HashTable.815" = type <{ %"struct.WTF::KeyValuePair.817"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.817" = type opaque
%"class.blink::CSSAnimationUpdate" = type { %"class.blink::HeapVector.818", %"class.WTF::Vector.976", %"class.blink::HeapHashSet.981", %"class.WTF::Vector.976", %"class.blink::HeapVector.988", %"class.blink::HeapVector.995", %"class.blink::HeapHashMap.1002", %"class.WTF::HashSet.1009", %"class.WTF::HashSet.1009", %"class.blink::HeapHashMap.1013", %"class.blink::HeapHashMap.1013", %"class.blink::HeapHashMap.1013", %"class.blink::HeapHashMap.1013" }
%"class.blink::HeapVector.818" = type { %"class.WTF::Vector.821" }
%"class.WTF::Vector.821" = type { %"class.WTF::VectorBuffer.822" }
%"class.WTF::VectorBuffer.822" = type { %"class.WTF::VectorBufferBase.823" }
%"class.WTF::VectorBufferBase.823" = type { %"class.blink::NewCSSAnimation"*, i32, i32 }
%"class.blink::NewCSSAnimation" = type { %"class.WTF::AtomicString", i64, i64, %"class.blink::Member.824", %"struct.blink::Timing", %"class.blink::Member.898", i32, %"class.blink::Member.910", %"class.WTF::Vector.970" }
%"class.blink::Member.824" = type { %"class.blink::MemberBase.825" }
%"class.blink::MemberBase.825" = type { %"class.blink::InertEffect"* }
%"class.blink::InertEffect" = type { %"class.blink::AnimationEffect", %"class.blink::Member.844", i8, %"class.absl::optional", %"class.absl::optional.893" }
%"class.absl::optional.893" = type { %"class.absl::optional_internal::optional_data.894" }
%"class.absl::optional_internal::optional_data.894" = type { %"class.absl::optional_internal::optional_data_base.895" }
%"class.absl::optional_internal::optional_data_base.895" = type { %"class.absl::optional_internal::optional_data_dtor_base.896" }
%"class.absl::optional_internal::optional_data_dtor_base.896" = type { i8, %union.anon.897 }
%union.anon.897 = type { i32 }
%"class.blink::Member.898" = type { %"class.blink::MemberBase.899" }
%"class.blink::MemberBase.899" = type { %"class.blink::StyleRuleKeyframes"* }
%"class.blink::StyleRuleKeyframes" = type <{ %"class.blink::StyleRuleBase", [7 x i8], %"class.blink::HeapVector.902", %"class.WTF::AtomicString", i32, [4 x i8] }>
%"class.blink::StyleRuleBase" = type { i8 }
%"class.blink::HeapVector.902" = type { %"class.WTF::Vector.905" }
%"class.WTF::Vector.905" = type { %"class.WTF::VectorBuffer.906" }
%"class.WTF::VectorBuffer.906" = type { %"class.WTF::VectorBufferBase.907" }
%"class.WTF::VectorBufferBase.907" = type { %"class.blink::Member.908"*, i32, i32 }
%"class.blink::Member.908" = type opaque
%"class.blink::Member.910" = type { %"class.blink::MemberBase.911" }
%"class.blink::MemberBase.911" = type { %"class.blink::AnimationTimeline"* }
%"class.blink::AnimationTimeline" = type { %"class.blink::ScriptWrappable", %"class.blink::Member.23", i32, [4 x i8], %"class.blink::HeapHashSet.912", %"class.blink::HeapHashSet.920", %"class.std::__1::unique_ptr.927", %"class.absl::optional.960" }
%"class.blink::HeapHashSet.912" = type { %"class.WTF::HashSet.915" }
%"class.WTF::HashSet.915" = type { %"class.WTF::HashTable.916" }
%"class.WTF::HashTable.916" = type <{ %"class.blink::Member.918"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.918" = type { %"class.blink::MemberBase.919" }
%"class.blink::MemberBase.919" = type { %"class.blink::Animation"* }
%"class.blink::Animation" = type <{ %"class.blink::EventTargetWithInlineData", %"class.blink::ActiveScriptWrappable", %"class.blink::ExecutionContextLifecycleObserver.base", [4 x i8], %"class.blink::CompositorAnimationDelegate", %"class.blink::CompositorAnimationClient", %"class.blink::AnimationEffectOwner", %"class.blink::ThreadState::PrefinalizerRegistration", [7 x i8], %"class.WTF::String", i32, [4 x i8], double, %"class.absl::optional.834", %"class.absl::optional", %"class.absl::optional", %"class.absl::optional.893", %"class.absl::optional", i8, [3 x i8], i32, %"class.blink::Member.1158", %"class.blink::Member.1158", %"class.blink::Member.1160", %"class.blink::Member.23", %"class.blink::Member.910", i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, [3 x i8], %"class.blink::Member.1162", %"class.blink::Member.1162", %"class.blink::Member.1162", %"class.std::__1::unique_ptr.1164", i8, [3 x i8], i32, %"class.blink::Member.1170", i8, [7 x i8], %"class.base::TimeTicks", i8, i8, i8, [5 x i8] }>
%"class.blink::EventTargetWithInlineData" = type { %"class.blink::EventTarget", %"class.blink::EventTargetData" }
%"class.blink::EventTargetData" = type { %"class.blink::EventListenerMap", %"class.std::__1::unique_ptr.1096" }
%"class.blink::EventListenerMap" = type { %"class.blink::HeapVector.1084" }
%"class.blink::HeapVector.1084" = type { %"class.WTF::Vector.1087" }
%"class.WTF::Vector.1087" = type { %"class.WTF::VectorBuffer.1088" }
%"class.WTF::VectorBuffer.1088" = type { %"class.WTF::VectorBufferBase.1089", [32 x i8] }
%"class.WTF::VectorBufferBase.1089" = type { %"struct.std::__1::pair.1090"*, i32, i32 }
%"struct.std::__1::pair.1090" = type { %"class.WTF::AtomicString", %"class.blink::Member.1091" }
%"class.blink::Member.1091" = type { %"class.blink::MemberBase.1092" }
%"class.blink::MemberBase.1092" = type { %"class.blink::HeapVector.1093"* }
%"class.blink::HeapVector.1093" = type opaque
%"class.std::__1::unique_ptr.1096" = type { %"class.std::__1::__compressed_pair.1097" }
%"class.std::__1::__compressed_pair.1097" = type { %"struct.std::__1::__compressed_pair_elem.1098" }
%"struct.std::__1::__compressed_pair_elem.1098" = type { %"class.WTF::Vector.1099"* }
%"class.WTF::Vector.1099" = type opaque
%"class.blink::ActiveScriptWrappable" = type { %"class.blink::ActiveScriptWrappableBase" }
%"class.blink::ActiveScriptWrappableBase" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::ExecutionContextLifecycleObserver.base" = type <{ %"class.blink::ContextLifecycleObserver", i32 }>
%"class.blink::ContextLifecycleObserver" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::WeakMember.1156" }
%"class.blink::WeakMember.1156" = type { %"class.blink::MemberBase.1157" }
%"class.blink::MemberBase.1157" = type { %"class.blink::ContextLifecycleNotifier"* }
%"class.blink::CompositorAnimationDelegate" = type { i32 (...)** }
%"class.blink::CompositorAnimationClient" = type { i32 (...)** }
%"class.blink::ThreadState::PrefinalizerRegistration" = type { i8 }
%"class.blink::Member.1158" = type { %"class.blink::MemberBase.1159" }
%"class.blink::MemberBase.1159" = type { %"class.blink::ScriptPromiseProperty"* }
%"class.blink::ScriptPromiseProperty" = type opaque
%"class.blink::Member.1160" = type { %"class.blink::MemberBase.1161" }
%"class.blink::MemberBase.1161" = type { %"class.blink::AnimationEffect"* }
%"class.blink::Member.1162" = type { %"class.blink::MemberBase.1163" }
%"class.blink::MemberBase.1163" = type { %"class.blink::Event"* }
%"class.blink::Event" = type opaque
%"class.std::__1::unique_ptr.1164" = type { %"class.std::__1::__compressed_pair.1165" }
%"class.std::__1::__compressed_pair.1165" = type { %"struct.std::__1::__compressed_pair_elem.1166" }
%"struct.std::__1::__compressed_pair_elem.1166" = type { %"class.blink::Animation::CompositorState"* }
%"class.blink::Animation::CompositorState" = type { %"class.absl::optional.834", %"class.absl::optional.834", double, i8, i32 }
%"class.blink::Member.1170" = type { %"class.blink::MemberBase.1171" }
%"class.blink::MemberBase.1171" = type { %"class.blink::Animation::CompositorAnimationHolder"* }
%"class.blink::Animation::CompositorAnimationHolder" = type { %"class.blink::ThreadState::PrefinalizerRegistration.1174", %"class.std::__1::unique_ptr.1175", %"class.blink::Member.918" }
%"class.blink::ThreadState::PrefinalizerRegistration.1174" = type { i8 }
%"class.std::__1::unique_ptr.1175" = type { %"class.std::__1::__compressed_pair.1176" }
%"class.std::__1::__compressed_pair.1176" = type { %"struct.std::__1::__compressed_pair_elem.1177" }
%"struct.std::__1::__compressed_pair_elem.1177" = type { %"class.blink::CompositorAnimation"* }
%"class.blink::CompositorAnimation" = type opaque
%"class.blink::HeapHashSet.920" = type { %"class.WTF::HashSet.923" }
%"class.WTF::HashSet.923" = type { %"class.WTF::HashTable.924" }
%"class.WTF::HashTable.924" = type <{ %"class.blink::WeakMember.926"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.926" = type opaque
%"class.std::__1::unique_ptr.927" = type { %"class.std::__1::__compressed_pair.928" }
%"class.std::__1::__compressed_pair.928" = type { %"struct.std::__1::__compressed_pair_elem.929" }
%"struct.std::__1::__compressed_pair_elem.929" = type { %"class.blink::CompositorAnimationTimeline"* }
%"class.blink::CompositorAnimationTimeline" = type { %class.scoped_refptr.930 }
%class.scoped_refptr.930 = type { %"class.cc::AnimationTimeline"* }
%"class.cc::AnimationTimeline" = type <{ i32 (...)**, %"class.base::RefCounted.931", [4 x i8], %"class.std::__1::unordered_map", i32, [4 x i8], %"class.cc::AnimationHost"*, i8, i8, [6 x i8] }>
%"class.base::RefCounted.931" = type { %"class.base::subtle::RefCountedBase" }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table.932" }
%"class.std::__1::__hash_table.932" = type <{ %"class.std::__1::unique_ptr.933", %"class.std::__1::__compressed_pair.943", %"class.std::__1::__compressed_pair.948", %"class.std::__1::__compressed_pair.952", [4 x i8] }>
%"class.std::__1::unique_ptr.933" = type { %"class.std::__1::__compressed_pair.934" }
%"class.std::__1::__compressed_pair.934" = type { %"struct.std::__1::__compressed_pair_elem.935", %"struct.std::__1::__compressed_pair_elem.937" }
%"struct.std::__1::__compressed_pair_elem.935" = type { %"struct.std::__1::__hash_node_base.936"** }
%"struct.std::__1::__hash_node_base.936" = type { %"struct.std::__1::__hash_node_base.936"* }
%"struct.std::__1::__compressed_pair_elem.937" = type { %"class.std::__1::__bucket_list_deallocator.938" }
%"class.std::__1::__bucket_list_deallocator.938" = type { %"class.std::__1::__compressed_pair.939" }
%"class.std::__1::__compressed_pair.939" = type { %"struct.std::__1::__compressed_pair_elem.273" }
%"class.std::__1::__compressed_pair.943" = type { %"struct.std::__1::__compressed_pair_elem.944" }
%"struct.std::__1::__compressed_pair_elem.944" = type { %"struct.std::__1::__hash_node_base.936" }
%"class.std::__1::__compressed_pair.948" = type { %"struct.std::__1::__compressed_pair_elem.273" }
%"class.std::__1::__compressed_pair.952" = type { %"struct.std::__1::__compressed_pair_elem.283" }
%"class.cc::AnimationHost" = type opaque
%"class.absl::optional.960" = type { %"class.absl::optional_internal::optional_data.961" }
%"class.absl::optional_internal::optional_data.961" = type { %"class.absl::optional_internal::optional_data_base.962" }
%"class.absl::optional_internal::optional_data_base.962" = type { %"class.absl::optional_internal::optional_data_dtor_base.963" }
%"class.absl::optional_internal::optional_data_dtor_base.963" = type { i8, %union.anon.964 }
%union.anon.964 = type { %"struct.blink::AnimationTimeline::PhaseAndTime" }
%"struct.blink::AnimationTimeline::PhaseAndTime" = type { i32, %"class.absl::optional.965" }
%"class.absl::optional.965" = type { %"class.absl::optional_internal::optional_data.966" }
%"class.absl::optional_internal::optional_data.966" = type { %"class.absl::optional_internal::optional_data_base.967" }
%"class.absl::optional_internal::optional_data_base.967" = type { %"class.absl::optional_internal::optional_data_dtor_base.968" }
%"class.absl::optional_internal::optional_data_dtor_base.968" = type { i8, %union.anon.969 }
%union.anon.969 = type { %"class.base::TimeDelta" }
%"class.WTF::Vector.970" = type { %"class.WTF::VectorBuffer.971" }
%"class.WTF::VectorBuffer.971" = type { %"class.WTF::VectorBufferBase.972" }
%"class.WTF::VectorBufferBase.972" = type { i32*, i32, i32 }
%"class.blink::HeapHashSet.981" = type { %"class.WTF::HashSet.984" }
%"class.WTF::HashSet.984" = type { %"class.WTF::HashTable.985" }
%"class.WTF::HashTable.985" = type <{ %"class.blink::Member.987"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.987" = type { %"class.blink::MemberBase.1207" }
%"class.blink::MemberBase.1207" = type { %"class.blink::Animation"* }
%"class.WTF::Vector.976" = type { %"class.WTF::VectorBuffer.977" }
%"class.WTF::VectorBuffer.977" = type { %"class.WTF::VectorBufferBase.978" }
%"class.WTF::VectorBufferBase.978" = type { i32*, i32, i32 }
%"class.blink::HeapVector.988" = type { %"class.WTF::Vector.991" }
%"class.WTF::Vector.991" = type { %"class.WTF::VectorBuffer.992" }
%"class.WTF::VectorBuffer.992" = type { %"class.WTF::VectorBufferBase.993" }
%"class.WTF::VectorBufferBase.993" = type { %"class.blink::UpdatedCSSAnimation"*, i32, i32 }
%"class.blink::UpdatedCSSAnimation" = type { i32, %"class.blink::Member.918", %"class.blink::Member.824", %"struct.blink::Timing", %"class.blink::Member.898", i32, %"class.blink::Member.910", %"class.WTF::Vector.970" }
%"class.blink::HeapVector.995" = type { %"class.WTF::Vector.998" }
%"class.WTF::Vector.998" = type { %"class.WTF::VectorBuffer.999" }
%"class.WTF::VectorBuffer.999" = type { %"class.WTF::VectorBufferBase.1000" }
%"class.WTF::VectorBufferBase.1000" = type { %"class.blink::Member.918"*, i32, i32 }
%"class.blink::HeapHashMap.1002" = type { %"class.WTF::HashMap.1005" }
%"class.WTF::HashMap.1005" = type { %"class.WTF::HashTable.1006" }
%"class.WTF::HashTable.1006" = type <{ %"struct.WTF::KeyValuePair.1008"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1008" = type { %"class.blink::PropertyHandle", %"class.blink::Member.1217" }
%"class.blink::Member.1217" = type { %"class.blink::MemberBase.1218" }
%"class.blink::MemberBase.1218" = type { %"struct.blink::CSSAnimationUpdate::NewTransition"* }
%"struct.blink::CSSAnimationUpdate::NewTransition" = type { i32 (...)**, %"class.blink::PropertyHandle", %class.scoped_refptr.711, %class.scoped_refptr.711, %class.scoped_refptr.711, double, %"class.blink::Member.824" }
%"class.WTF::HashSet.1009" = type { %"class.WTF::HashTable.1010" }
%"class.WTF::HashTable.1010" = type <{ %"class.blink::PropertyHandle"*, i32, i32, i32, [4 x i8] }>
%"class.blink::HeapHashMap.1013" = type { %"class.WTF::HashMap.1016" }
%"class.WTF::HashMap.1016" = type { %"class.WTF::HashTable.1017" }
%"class.WTF::HashTable.1017" = type <{ %"struct.WTF::KeyValuePair.1019"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1019" = type { %"class.blink::PropertyHandle", %"class.blink::Member.1208" }
%"class.blink::Member.1208" = type { %"class.blink::MemberBase.1209" }
%"class.blink::MemberBase.1209" = type { %"class.blink::HeapVector.1210"* }
%"class.blink::HeapVector.1210" = type { %"class.WTF::Vector.1213" }
%"class.WTF::Vector.1213" = type { %"class.WTF::VectorBuffer.1214" }
%"class.WTF::VectorBuffer.1214" = type { %"class.WTF::VectorBufferBase.796", [8 x i8] }
%"class.blink::HeapHashCountedSet" = type { %"class.WTF::HashCountedSet" }
%"class.WTF::HashCountedSet" = type { %"class.WTF::HashMap.1022" }
%"class.WTF::HashMap.1022" = type { %"class.WTF::HashTable.1023" }
%"class.WTF::HashTable.1023" = type <{ %"struct.WTF::KeyValuePair.1025"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1025" = type opaque
%"class.blink::HeapHashSet.1026" = type { %"class.WTF::HashSet.1029" }
%"class.WTF::HashSet.1029" = type { %"class.WTF::HashTable.1030" }
%"class.WTF::HashTable.1030" = type <{ %"class.blink::WeakMember.1032"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.1032" = type opaque
%class.scoped_refptr.1033 = type { %"class.blink::ComputedStyle"* }
%"class.std::__1::unique_ptr.1034" = type { %"class.std::__1::__compressed_pair.1035" }
%"class.std::__1::__compressed_pair.1035" = type { %"struct.std::__1::__compressed_pair_elem.1036" }
%"struct.std::__1::__compressed_pair_elem.1036" = type { %"class.blink::CSSBitsetBase"* }
%"class.blink::CSSBitsetBase" = type opaque
%"class.blink::Member.1040" = type { %"class.blink::MemberBase.1041" }
%"class.blink::MemberBase.1041" = type { %"class.blink::HeapHashMap.1042"* }
%"class.blink::HeapHashMap.1042" = type opaque
%"class.blink::Member.1043" = type { %"class.blink::MemberBase.1044" }
%"class.blink::MemberBase.1044" = type { %"class.blink::CustomElementDefinition"* }
%"class.blink::CustomElementDefinition" = type { %"class.blink::NameClient", %"class.blink::CustomElementDescriptor", %"class.blink::HeapVector.1047", %"class.WTF::HashSet.92", i8, i8, i8, i8, i8, %"class.blink::HeapVector.55" }
%"class.blink::CustomElementDescriptor" = type { %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.blink::HeapVector.1047" = type { %"class.WTF::Vector.1050" }
%"class.WTF::Vector.1050" = type { %"class.WTF::VectorBuffer.1051" }
%"class.WTF::VectorBuffer.1051" = type { %"class.WTF::VectorBufferBase.42", [8 x i8] }
%"class.blink::Member.1054" = type { %"class.blink::MemberBase.1055" }
%"class.blink::MemberBase.1055" = type { %"class.blink::ElementInternals"* }
%"class.blink::ElementInternals" = type opaque
%"class.blink::Member.1056" = type { %"class.blink::MemberBase.1057" }
%"class.blink::MemberBase.1057" = type { %"class.blink::PseudoElementData"* }
%"class.blink::PseudoElementData" = type { %"class.blink::Member.1060", %"class.blink::Member.1060", %"class.blink::Member.1060", %"class.blink::Member.1060", %"class.blink::Member.1060" }
%"class.blink::Member.1060" = type { %"class.blink::MemberBase.1061" }
%"class.blink::MemberBase.1061" = type { %"class.blink::PseudoElement"* }
%"class.blink::PseudoElement" = type <{ %"class.blink::Element", i8, [7 x i8] }>
%"class.blink::Member.1062" = type { %"class.blink::MemberBase.1063" }
%"class.blink::MemberBase.1063" = type { %"class.blink::AccessibleNode"* }
%"class.blink::AccessibleNode" = type { %"class.blink::EventTargetWithInlineData", %"class.WTF::Vector.1103", %"class.WTF::Vector.1109", %"class.WTF::Vector.1115", %"class.WTF::Vector.1121", %"class.WTF::Vector.1127", %"class.blink::HeapVector.1133", %"class.blink::HeapVector.1141", %"class.blink::Member.36", %"class.blink::Member.23", %"class.blink::HeapVector.1149", %"class.blink::Member.1062" }
%"class.WTF::Vector.1103" = type { %"class.WTF::VectorBuffer.1104" }
%"class.WTF::VectorBuffer.1104" = type { %"class.WTF::VectorBufferBase.1105" }
%"class.WTF::VectorBufferBase.1105" = type { %"struct.std::__1::pair.1106"*, i32, i32 }
%"struct.std::__1::pair.1106" = type opaque
%"class.WTF::Vector.1109" = type { %"class.WTF::VectorBuffer.1110" }
%"class.WTF::VectorBuffer.1110" = type { %"class.WTF::VectorBufferBase.1111" }
%"class.WTF::VectorBufferBase.1111" = type { %"struct.std::__1::pair.1112"*, i32, i32 }
%"struct.std::__1::pair.1112" = type opaque
%"class.WTF::Vector.1115" = type { %"class.WTF::VectorBuffer.1116" }
%"class.WTF::VectorBuffer.1116" = type { %"class.WTF::VectorBufferBase.1117" }
%"class.WTF::VectorBufferBase.1117" = type { %"struct.std::__1::pair.1118"*, i32, i32 }
%"struct.std::__1::pair.1118" = type opaque
%"class.WTF::Vector.1121" = type { %"class.WTF::VectorBuffer.1122" }
%"class.WTF::VectorBuffer.1122" = type { %"class.WTF::VectorBufferBase.1123" }
%"class.WTF::VectorBufferBase.1123" = type { %"struct.std::__1::pair.1124"*, i32, i32 }
%"struct.std::__1::pair.1124" = type opaque
%"class.WTF::Vector.1127" = type { %"class.WTF::VectorBuffer.1128" }
%"class.WTF::VectorBuffer.1128" = type { %"class.WTF::VectorBufferBase.1129" }
%"class.WTF::VectorBufferBase.1129" = type { %"struct.std::__1::pair.1130"*, i32, i32 }
%"struct.std::__1::pair.1130" = type opaque
%"class.blink::HeapVector.1133" = type { %"class.WTF::Vector.1136" }
%"class.WTF::Vector.1136" = type { %"class.WTF::VectorBuffer.1137" }
%"class.WTF::VectorBuffer.1137" = type { %"class.WTF::VectorBufferBase.1138" }
%"class.WTF::VectorBufferBase.1138" = type { %"struct.std::__1::pair.1139"*, i32, i32 }
%"struct.std::__1::pair.1139" = type opaque
%"class.blink::HeapVector.1141" = type { %"class.WTF::Vector.1144" }
%"class.WTF::Vector.1144" = type { %"class.WTF::VectorBuffer.1145" }
%"class.WTF::VectorBuffer.1145" = type { %"class.WTF::VectorBufferBase.1146" }
%"class.WTF::VectorBufferBase.1146" = type { %"struct.std::__1::pair.1147"*, i32, i32 }
%"struct.std::__1::pair.1147" = type opaque
%"class.blink::HeapVector.1149" = type { %"class.WTF::Vector.1152" }
%"class.WTF::Vector.1152" = type { %"class.WTF::VectorBuffer.1153" }
%"class.WTF::VectorBuffer.1153" = type { %"class.WTF::VectorBufferBase.1154" }
%"class.WTF::VectorBufferBase.1154" = type { %"class.blink::Member.1062"*, i32, i32 }
%"class.blink::Member.1064" = type { %"class.blink::MemberBase.1065" }
%"class.blink::MemberBase.1065" = type { %"class.blink::DisplayLockContext"* }
%"class.blink::DisplayLockContext" = type <{ %"class.blink::LocalFrameView::LifecycleNotificationObserver", %"class.blink::WeakMember.1068", %"class.blink::WeakMember.364", i32, [4 x i8], %"class.blink::HeapHashSet.1069", i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i16, i8, i8, i8, i8, i8, i8, i8, [6 x i8], i8, i32, i8, i8, [2 x i8], %"class.absl::optional.1075", [4 x i8] }>
%"class.blink::LocalFrameView::LifecycleNotificationObserver" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::WeakMember.1068" = type { %"class.blink::MemberBase.37" }
%"class.blink::HeapHashSet.1069" = type { %"class.WTF::HashSet.1072" }
%"class.WTF::HashSet.1072" = type { %"class.WTF::HashTable.1073" }
%"class.WTF::HashTable.1073" = type <{ %"class.blink::Member.36"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1080" = type { %"class.blink::MemberBase.1081" }
%"class.blink::MemberBase.1081" = type { %"class.blink::ContainerQueryEvaluator"* }
%"class.blink::ContainerQueryEvaluator" = type opaque
%"class.logging::CheckOpResult" = type { i8* }
%"class.blink::HeapVectorBacking" = type { i8 }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }
%"class.WTF::StringTypeAdapter.1272" = type { %"class.WTF::StringTypeAdapter.1273" }
%"class.WTF::StringTypeAdapter.1273" = type { %"class.WTF::StringView" }

$_ZN3WTF17AtomicStringTable18WeakFindLowercasedERKNS_10StringViewE = comdat any

$_ZN3WTF17AtomicStringTable8WeakFindERKNS_10StringViewE = comdat any

$_ZNK3WTF12StringAppendINS0_IPKcNS_12AtomicStringEEES2_EcvNS_6StringEEv = comdat any

$_ZNK5blink26AttributeCollectionGenericIKNS_14AttributeArrayES2_E2atEj = comdat any

$_ZNK5blink26AttributeCollectionGenericIN3WTF6VectorINS_9AttributeELj4ENS1_18PartitionAllocatorEEERS5_E2atEj = comdat any

$_ZN3WTF6VectorIN5blink6MemberINS1_4AttrEEELj0ENS1_13HeapAllocatorEE14AppendSlowCaseIRPS3_EEvOT_ = comdat any

$_ZN3WTF6VectorIN5blink6MemberINS1_4AttrEEELj0ENS1_13HeapAllocatorEE15ReserveCapacityEj = comdat any

$_ZN3WTF6VectorIN5blink6MemberINS1_4AttrEEELj0ENS1_13HeapAllocatorEE16ReallocateBufferEj = comdat any

$_ZN5blink13HeapAllocator13QuantizedSizeINS_6MemberINS_4AttrEEEEEmm = comdat any

$_ZN5blink25MakeGarbageCollectedTraitINS_17HeapVectorBackingINS_6MemberINS_4AttrEEEN3WTF12VectorTraitsIS4_EEEEE4CallEm = comdat any

$_ZN5blink17HeapVectorBackingINS_6MemberINS_4AttrEEEN3WTF12VectorTraitsIS3_EEE14AllocateObjectIS7_EEPvm = comdat any

$_ZN5blink10TraceTraitINS_17HeapVectorBackingINS_6MemberINS_4AttrEEEN3WTF12VectorTraitsIS4_EEEEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink9NameTraitINS_17HeapVectorBackingINS_6MemberINS_4AttrEEEN3WTF12VectorTraitsIS4_EEEEE7GetNameEPKv = comdat any

$_ZN5blink10TraceTraitINS_4AttrEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZNK5blink26AttributeCollectionGenericIKNS_14AttributeArrayES2_E14FindWithPrefixERKN3WTF10StringViewE = comdat any

$_ZNK3WTF12StringAppendINS0_IPKcNS_12AtomicStringEEES2_E6lengthEv = comdat any

$_ZNK3WTF12StringAppendINS0_IPKcNS_12AtomicStringEEES2_E7WriteToEPh = comdat any

$_ZNK3WTF12StringAppendINS0_IPKcNS_12AtomicStringEEES2_E7WriteToEPDs = comdat any

$_ZNK3WTF12StringAppendIPKcNS_12AtomicStringEE6lengthEv = comdat any

$_ZN5blink25MakeGarbageCollectedTraitINS_4AttrEE4CallIJRNS_8DocumentEKNS_13QualifiedNameERKN3WTF12AtomicStringEEEEPS1_DpOT_ = comdat any

$_ZN5blink10TraceTraitINS_15ScriptWrappableEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_15ScriptWrappableEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_15ScriptWrappableEE7GetNameEPKv = comdat any

$_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_4AttrEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_4AttrEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE13gc_info_index = comdat any

$_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index = comdat any

@_ZN5blink10html_names10kStyleAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN3WTF11g_null_atomE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@.str = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.1 = private unnamed_addr constant [33 x i8] c"' is not a valid attribute name.\00", align 1
@.str.2 = private unnamed_addr constant [131 x i8] c"The node provided is an attribute node that is already an attribute of another Element; attribute nodes must be explicitly cloned.\00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@.str.3 = private unnamed_addr constant [73 x i8] c"../../third_party/blink/renderer/platform/wtf/text/atomic_string_table.h\00", align 1
@.str.4 = private unnamed_addr constant [53 x i8] c"!str || str->IsAtomic() || str == StringImpl::empty_\00", align 1
@_ZN3WTF9Threading12static_data_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_9ThreadingEEEPKcv = private unnamed_addr constant [62 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::Threading]\00", align 1
@_ZN5blink11g_null_nameE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@.str.5 = private unnamed_addr constant [15 x i8] c"index < size()\00", align 1
@.str.6 = private unnamed_addr constant [65 x i8] c"../../third_party/blink/renderer/core/dom/attribute_collection.h\00", align 1
@_ZN5blink11ThreadState25incremental_marking_flag_E = external local_unnamed_addr global %"class.blink::AtomicEntryFlag", align 4
@.str.7 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.8 = private unnamed_addr constant [33 x i8] c"Allocator::IsAllocationAllowed()\00", align 1
@.str.9 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.10 = private unnamed_addr constant [74 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap_allocator_impl.h\00", align 1
@.str.11 = private unnamed_addr constant [18 x i8] c"num_elements > 0u\00", align 1
@.str.12 = private unnamed_addr constant [93 x i8] c"../../third_party/blink/renderer/platform/heap/impl/collection_support/heap_vector_backing.h\00", align 1
@_ZN5blink11ThreadState26main_thread_state_storage_E = external local_unnamed_addr global [0 x i8], align 1
@.str.13 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.14 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_4AttrEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_17HeapVectorBackingINS_6MemberINS_4AttrEEEN3WTF12VectorTraitsIS4_EEEEE5TraceEPNS_7VisitorEPKv, void (i8*)* null, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_17HeapVectorBackingINS_6MemberINS_4AttrEEEN3WTF12VectorTraitsIS4_EEEEE7GetNameEPKv, i8 0 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_4AttrEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.15 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific.1270"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@.str.16 = private unnamed_addr constant [27 x i8] c"total >= adapter1.length()\00", align 1
@.str.17 = private unnamed_addr constant [70 x i8] c"../../third_party/blink/renderer/platform/wtf/text/string_operators.h\00", align 1
@.str.18 = private unnamed_addr constant [27 x i8] c"total >= adapter2.length()\00", align 1
@_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_15ScriptWrappableEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_15ScriptWrappableEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_15ScriptWrappableEE7GetNameEPKv, i8 1 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK5blink7Element24WeakLowercaseIfNecessaryERKN3WTF10StringViewE(%"class.blink::Element"* nocapture readonly, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = and i32 %5, 48
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %73, !prof !2

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %10 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %9, align 8
  %11 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %10, i64 0, i32 2, i32 0, i32 0
  %12 = load %"class.blink::Document"*, %"class.blink::Document"** %11, align 8
  %13 = getelementptr inbounds %"class.blink::Document", %"class.blink::Document"* %12, i64 0, i32 107
  %14 = load i8, i8* %13, align 8
  %15 = and i8 %14, 1
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %73, label %17, !prof !3

17:                                               ; preds = %8
  %18 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 1
  %21 = bitcast %"class.WTF::StringImpl"* %20 to i8*
  %22 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %23 = load i8*, i8** %22, align 8
  %24 = icmp eq i8* %23, %21
  br i1 %24, label %25, label %59

25:                                               ; preds = %17
  %26 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = icmp ne i32 %27, %29
  %31 = icmp eq %"class.WTF::StringImpl"* %19, null
  %32 = or i1 %31, %30
  br i1 %32, label %59, label %33

33:                                               ; preds = %25
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = load atomic i32, i32* %34 acquire, align 4
  %36 = and i32 %35, 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %59, label %38

38:                                               ; preds = %33
  %39 = load atomic i32, i32* %34 monotonic, align 4
  %40 = and i32 %39, 8
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %44

42:                                               ; preds = %38
  %43 = tail call i32 @_ZNK3WTF10StringImpl17ComputeASCIIFlagsEv(%"class.WTF::StringImpl"* nonnull %19) #7
  br label %44

44:                                               ; preds = %38, %42
  %45 = phi i32 [ %43, %42 ], [ %39, %38 ]
  %46 = and i32 %45, 32
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %59, label %48

48:                                               ; preds = %44
  %49 = ptrtoint %"class.WTF::StringImpl"* %19 to i64
  %50 = load atomic i32, i32* %34 acquire, align 4
  %51 = and i32 %50, 4
  %52 = icmp ne i32 %51, 0
  %53 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %54 = icmp eq %"class.WTF::StringImpl"* %53, %19
  %55 = or i1 %52, %54
  br i1 %55, label %87, label %56

56:                                               ; preds = %48
  %57 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %57) #7
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.3, i64 0, i64 0), i32 57, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.4, i64 0, i64 0)) #7
  %58 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %57) #7
  br label %87

59:                                               ; preds = %44, %33, %25, %17
  %60 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN3WTF9Threading12static_data_E, align 8
  %61 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %60, i64 0, i32 1
  %62 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %61) #7
  %63 = bitcast i8* %62 to %"class.WTF::Threading"*
  %64 = icmp eq i8* %62, null
  br i1 %64, label %65, label %68, !prof !3

65:                                               ; preds = %59
  %66 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 24, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_9ThreadingEEEPKcv, i64 0, i64 0)) #7
  %67 = bitcast i8* %66 to %"class.WTF::Threading"*
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %61, i8* %66) #7
  tail call void @_ZN3WTF9ThreadingC1Ev(%"class.WTF::Threading"* %67) #7
  br label %68

68:                                               ; preds = %59, %65
  %69 = phi %"class.WTF::Threading"* [ %67, %65 ], [ %63, %59 ]
  %70 = getelementptr inbounds %"class.WTF::Threading", %"class.WTF::Threading"* %69, i64 0, i32 0, i32 0, i32 0, i32 0
  %71 = load %"class.WTF::AtomicStringTable"*, %"class.WTF::AtomicStringTable"** %70, align 8
  %72 = tail call i64 @_ZN3WTF17AtomicStringTable18WeakFindLowercasedERKNS_10StringViewE(%"class.WTF::AtomicStringTable"* %71, %"class.WTF::StringView"* dereferenceable(24) %1)
  br label %87

73:                                               ; preds = %8, %2
  %74 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN3WTF9Threading12static_data_E, align 8
  %75 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %74, i64 0, i32 1
  %76 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %75) #7
  %77 = bitcast i8* %76 to %"class.WTF::Threading"*
  %78 = icmp eq i8* %76, null
  br i1 %78, label %79, label %82, !prof !3

79:                                               ; preds = %73
  %80 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 24, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_9ThreadingEEEPKcv, i64 0, i64 0)) #7
  %81 = bitcast i8* %80 to %"class.WTF::Threading"*
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %75, i8* %80) #7
  tail call void @_ZN3WTF9ThreadingC1Ev(%"class.WTF::Threading"* %81) #7
  br label %82

82:                                               ; preds = %73, %79
  %83 = phi %"class.WTF::Threading"* [ %81, %79 ], [ %77, %73 ]
  %84 = getelementptr inbounds %"class.WTF::Threading", %"class.WTF::Threading"* %83, i64 0, i32 0, i32 0, i32 0, i32 0
  %85 = load %"class.WTF::AtomicStringTable"*, %"class.WTF::AtomicStringTable"** %84, align 8
  %86 = tail call i64 @_ZN3WTF17AtomicStringTable8WeakFindERKNS_10StringViewE(%"class.WTF::AtomicStringTable"* %85, %"class.WTF::StringView"* dereferenceable(24) %1)
  br label %87

87:                                               ; preds = %56, %48, %68, %82
  %88 = phi i64 [ %72, %68 ], [ %86, %82 ], [ %49, %48 ], [ %49, %56 ]
  ret i64 %88
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF17AtomicStringTable18WeakFindLowercasedERKNS_10StringViewE(%"class.WTF::AtomicStringTable"*, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %23, !prof !3

8:                                                ; preds = %2
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %10 = ptrtoint %"class.WTF::StringImpl"* %9 to i64
  %11 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %11, label %291, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 acquire, align 4
  %15 = and i32 %14, 4
  %16 = icmp ne i32 %15, 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %18 = icmp eq %"class.WTF::StringImpl"* %17, %9
  %19 = or i1 %16, %18
  br i1 %19, label %291, label %20

20:                                               ; preds = %12
  %21 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #7
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.3, i64 0, i64 0), i32 57, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.4, i64 0, i64 0)) #7
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #7
  br label %291

23:                                               ; preds = %2
  %24 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %26 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 1
  %27 = bitcast %"class.WTF::StringImpl"* %26 to i8*
  %28 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %29 = load i8*, i8** %28, align 8
  %30 = icmp eq i8* %29, %27
  br i1 %30, label %31, label %289, !prof !4

31:                                               ; preds = %23
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 0, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = icmp ne i32 %6, %33
  %35 = icmp eq %"class.WTF::StringImpl"* %25, null
  %36 = or i1 %35, %34
  br i1 %36, label %289, label %37, !prof !5

37:                                               ; preds = %31
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = load atomic i32, i32* %38 acquire, align 4
  %40 = and i32 %39, 4
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %289, label %42, !prof !3

42:                                               ; preds = %37
  %43 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 1
  %45 = bitcast %"class.WTF::StringImpl"* %44 to i8*
  %46 = load i8*, i8** %28, align 8
  %47 = icmp eq i8* %46, %45
  %48 = bitcast i8* %46 to i16*
  %49 = load i32, i32* %5, align 8
  br i1 %47, label %50, label %70

50:                                               ; preds = %42
  %51 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 1
  %52 = load i32, i32* %51, align 4
  %53 = icmp ne i32 %49, %52
  %54 = icmp eq %"class.WTF::StringImpl"* %43, null
  %55 = or i1 %54, %53
  br i1 %55, label %70, label %56

56:                                               ; preds = %50
  %57 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = load atomic i32, i32* %57 monotonic, align 4
  %59 = and i32 %58, 8
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %63

61:                                               ; preds = %56
  %62 = tail call i32 @_ZNK3WTF10StringImpl17ComputeASCIIFlagsEv(%"class.WTF::StringImpl"* nonnull %43) #7
  br label %63

63:                                               ; preds = %61, %56
  %64 = phi i32 [ %62, %61 ], [ %58, %56 ]
  %65 = and i32 %64, 32
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %289, label %67, !prof !3

67:                                               ; preds = %63
  %68 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %69 = load i8*, i8** %28, align 8
  br label %264

70:                                               ; preds = %42, %50
  %71 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %72 = load atomic i32, i32* %71 monotonic, align 4
  %73 = and i32 %72, 1
  %74 = icmp eq i32 %73, 0
  %75 = icmp eq i32 %49, 0
  br i1 %74, label %171, label %76

76:                                               ; preds = %70
  br i1 %75, label %264, label %77

77:                                               ; preds = %76
  %78 = zext i32 %49 to i64
  %79 = icmp ult i32 %49, 32
  br i1 %79, label %80, label %83

80:                                               ; preds = %145, %77
  %81 = phi i64 [ 0, %77 ], [ %84, %145 ]
  %82 = phi i1 [ false, %77 ], [ %157, %145 ]
  br label %161

83:                                               ; preds = %77
  %84 = and i64 %78, 4294967264
  %85 = add nsw i64 %84, -32
  %86 = lshr exact i64 %85, 5
  %87 = add nuw nsw i64 %86, 1
  %88 = and i64 %87, 1
  %89 = icmp eq i64 %85, 0
  br i1 %89, label %125, label %90

90:                                               ; preds = %83
  %91 = sub nuw nsw i64 %87, %88
  br label %92

92:                                               ; preds = %92, %90
  %93 = phi i64 [ 0, %90 ], [ %122, %92 ]
  %94 = phi <16 x i1> [ zeroinitializer, %90 ], [ %120, %92 ]
  %95 = phi <16 x i1> [ zeroinitializer, %90 ], [ %121, %92 ]
  %96 = phi i64 [ %91, %90 ], [ %123, %92 ]
  %97 = getelementptr inbounds i8, i8* %46, i64 %93
  %98 = bitcast i8* %97 to <16 x i8>*
  %99 = load <16 x i8>, <16 x i8>* %98, align 1
  %100 = getelementptr inbounds i8, i8* %97, i64 16
  %101 = bitcast i8* %100 to <16 x i8>*
  %102 = load <16 x i8>, <16 x i8>* %101, align 1
  %103 = add <16 x i8> %99, <i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65>
  %104 = add <16 x i8> %102, <i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65>
  %105 = icmp ult <16 x i8> %103, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %106 = icmp ult <16 x i8> %104, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %107 = or <16 x i1> %94, %105
  %108 = or <16 x i1> %95, %106
  %109 = or i64 %93, 32
  %110 = getelementptr inbounds i8, i8* %46, i64 %109
  %111 = bitcast i8* %110 to <16 x i8>*
  %112 = load <16 x i8>, <16 x i8>* %111, align 1
  %113 = getelementptr inbounds i8, i8* %110, i64 16
  %114 = bitcast i8* %113 to <16 x i8>*
  %115 = load <16 x i8>, <16 x i8>* %114, align 1
  %116 = add <16 x i8> %112, <i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65>
  %117 = add <16 x i8> %115, <i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65>
  %118 = icmp ult <16 x i8> %116, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %119 = icmp ult <16 x i8> %117, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %120 = or <16 x i1> %107, %118
  %121 = or <16 x i1> %108, %119
  %122 = add i64 %93, 64
  %123 = add i64 %96, -2
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %92, !llvm.loop !6

125:                                              ; preds = %92, %83
  %126 = phi <16 x i1> [ undef, %83 ], [ %120, %92 ]
  %127 = phi <16 x i1> [ undef, %83 ], [ %121, %92 ]
  %128 = phi i64 [ 0, %83 ], [ %122, %92 ]
  %129 = phi <16 x i1> [ zeroinitializer, %83 ], [ %120, %92 ]
  %130 = phi <16 x i1> [ zeroinitializer, %83 ], [ %121, %92 ]
  %131 = icmp eq i64 %88, 0
  br i1 %131, label %145, label %132

132:                                              ; preds = %125
  %133 = getelementptr inbounds i8, i8* %46, i64 %128
  %134 = getelementptr inbounds i8, i8* %133, i64 16
  %135 = bitcast i8* %134 to <16 x i8>*
  %136 = load <16 x i8>, <16 x i8>* %135, align 1
  %137 = add <16 x i8> %136, <i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65>
  %138 = icmp ult <16 x i8> %137, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %139 = or <16 x i1> %130, %138
  %140 = bitcast i8* %133 to <16 x i8>*
  %141 = load <16 x i8>, <16 x i8>* %140, align 1
  %142 = add <16 x i8> %141, <i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65>
  %143 = icmp ult <16 x i8> %142, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %144 = or <16 x i1> %129, %143
  br label %145

145:                                              ; preds = %125, %132
  %146 = phi <16 x i1> [ %126, %125 ], [ %144, %132 ]
  %147 = phi <16 x i1> [ %127, %125 ], [ %139, %132 ]
  %148 = or <16 x i1> %147, %146
  %149 = shufflevector <16 x i1> %148, <16 x i1> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %150 = or <16 x i1> %148, %149
  %151 = shufflevector <16 x i1> %150, <16 x i1> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %152 = or <16 x i1> %150, %151
  %153 = shufflevector <16 x i1> %152, <16 x i1> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %154 = or <16 x i1> %152, %153
  %155 = shufflevector <16 x i1> %154, <16 x i1> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %156 = or <16 x i1> %154, %155
  %157 = extractelement <16 x i1> %156, i32 0
  %158 = icmp eq i64 %84, %78
  br i1 %158, label %159, label %80

159:                                              ; preds = %161, %145
  %160 = phi i1 [ %157, %145 ], [ %168, %161 ]
  br i1 %160, label %289, label %264, !prof !3

161:                                              ; preds = %80, %161
  %162 = phi i64 [ %169, %161 ], [ %81, %80 ]
  %163 = phi i1 [ %168, %161 ], [ %82, %80 ]
  %164 = getelementptr inbounds i8, i8* %46, i64 %162
  %165 = load i8, i8* %164, align 1
  %166 = add i8 %165, -65
  %167 = icmp ult i8 %166, 26
  %168 = or i1 %163, %167
  %169 = add nuw nsw i64 %162, 1
  %170 = icmp eq i64 %169, %78
  br i1 %170, label %159, label %161, !llvm.loop !8

171:                                              ; preds = %70
  br i1 %75, label %264, label %172

172:                                              ; preds = %171
  %173 = zext i32 %49 to i64
  %174 = icmp ult i32 %49, 16
  br i1 %174, label %249, label %175

175:                                              ; preds = %172
  %176 = and i64 %173, 4294967280
  %177 = add nsw i64 %176, -16
  %178 = lshr exact i64 %177, 4
  %179 = add nuw nsw i64 %178, 1
  %180 = and i64 %179, 1
  %181 = icmp eq i64 %177, 0
  br i1 %181, label %217, label %182

182:                                              ; preds = %175
  %183 = sub nuw nsw i64 %179, %180
  br label %184

184:                                              ; preds = %184, %182
  %185 = phi i64 [ 0, %182 ], [ %214, %184 ]
  %186 = phi <8 x i1> [ zeroinitializer, %182 ], [ %212, %184 ]
  %187 = phi <8 x i1> [ zeroinitializer, %182 ], [ %213, %184 ]
  %188 = phi i64 [ %183, %182 ], [ %215, %184 ]
  %189 = getelementptr inbounds i16, i16* %48, i64 %185
  %190 = bitcast i16* %189 to <8 x i16>*
  %191 = load <8 x i16>, <8 x i16>* %190, align 2
  %192 = getelementptr inbounds i16, i16* %189, i64 8
  %193 = bitcast i16* %192 to <8 x i16>*
  %194 = load <8 x i16>, <8 x i16>* %193, align 2
  %195 = add <8 x i16> %191, <i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65>
  %196 = add <8 x i16> %194, <i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65>
  %197 = icmp ult <8 x i16> %195, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %198 = icmp ult <8 x i16> %196, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %199 = or <8 x i1> %186, %197
  %200 = or <8 x i1> %187, %198
  %201 = or i64 %185, 16
  %202 = getelementptr inbounds i16, i16* %48, i64 %201
  %203 = bitcast i16* %202 to <8 x i16>*
  %204 = load <8 x i16>, <8 x i16>* %203, align 2
  %205 = getelementptr inbounds i16, i16* %202, i64 8
  %206 = bitcast i16* %205 to <8 x i16>*
  %207 = load <8 x i16>, <8 x i16>* %206, align 2
  %208 = add <8 x i16> %204, <i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65>
  %209 = add <8 x i16> %207, <i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65>
  %210 = icmp ult <8 x i16> %208, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %211 = icmp ult <8 x i16> %209, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %212 = or <8 x i1> %199, %210
  %213 = or <8 x i1> %200, %211
  %214 = add i64 %185, 32
  %215 = add i64 %188, -2
  %216 = icmp eq i64 %215, 0
  br i1 %216, label %217, label %184, !llvm.loop !10

217:                                              ; preds = %184, %175
  %218 = phi <8 x i1> [ undef, %175 ], [ %212, %184 ]
  %219 = phi <8 x i1> [ undef, %175 ], [ %213, %184 ]
  %220 = phi i64 [ 0, %175 ], [ %214, %184 ]
  %221 = phi <8 x i1> [ zeroinitializer, %175 ], [ %212, %184 ]
  %222 = phi <8 x i1> [ zeroinitializer, %175 ], [ %213, %184 ]
  %223 = icmp eq i64 %180, 0
  br i1 %223, label %237, label %224

224:                                              ; preds = %217
  %225 = getelementptr inbounds i16, i16* %48, i64 %220
  %226 = getelementptr inbounds i16, i16* %225, i64 8
  %227 = bitcast i16* %226 to <8 x i16>*
  %228 = load <8 x i16>, <8 x i16>* %227, align 2
  %229 = add <8 x i16> %228, <i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65>
  %230 = icmp ult <8 x i16> %229, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %231 = or <8 x i1> %222, %230
  %232 = bitcast i16* %225 to <8 x i16>*
  %233 = load <8 x i16>, <8 x i16>* %232, align 2
  %234 = add <8 x i16> %233, <i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65>
  %235 = icmp ult <8 x i16> %234, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %236 = or <8 x i1> %221, %235
  br label %237

237:                                              ; preds = %217, %224
  %238 = phi <8 x i1> [ %218, %217 ], [ %236, %224 ]
  %239 = phi <8 x i1> [ %219, %217 ], [ %231, %224 ]
  %240 = or <8 x i1> %239, %238
  %241 = shufflevector <8 x i1> %240, <8 x i1> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %242 = or <8 x i1> %240, %241
  %243 = shufflevector <8 x i1> %242, <8 x i1> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %244 = or <8 x i1> %242, %243
  %245 = shufflevector <8 x i1> %244, <8 x i1> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %246 = or <8 x i1> %244, %245
  %247 = extractelement <8 x i1> %246, i32 0
  %248 = icmp eq i64 %176, %173
  br i1 %248, label %262, label %249

249:                                              ; preds = %237, %172
  %250 = phi i64 [ 0, %172 ], [ %176, %237 ]
  %251 = phi i1 [ false, %172 ], [ %247, %237 ]
  br label %252

252:                                              ; preds = %249, %252
  %253 = phi i64 [ %260, %252 ], [ %250, %249 ]
  %254 = phi i1 [ %259, %252 ], [ %251, %249 ]
  %255 = getelementptr inbounds i16, i16* %48, i64 %253
  %256 = load i16, i16* %255, align 2
  %257 = add i16 %256, -65
  %258 = icmp ult i16 %257, 26
  %259 = or i1 %254, %258
  %260 = add nuw nsw i64 %253, 1
  %261 = icmp eq i64 %260, %173
  br i1 %261, label %262, label %252, !llvm.loop !11

262:                                              ; preds = %252, %237
  %263 = phi i1 [ %247, %237 ], [ %259, %252 ]
  br i1 %263, label %289, label %264, !prof !3

264:                                              ; preds = %67, %262, %159, %171, %76
  %265 = phi i8* [ %69, %67 ], [ %46, %262 ], [ %46, %159 ], [ %46, %171 ], [ %46, %76 ]
  %266 = phi %"class.WTF::StringImpl"* [ %68, %67 ], [ %43, %262 ], [ %43, %159 ], [ %43, %171 ], [ %43, %76 ]
  %267 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %266, i64 1
  %268 = bitcast %"class.WTF::StringImpl"* %267 to i8*
  %269 = icmp eq i8* %265, %268
  br i1 %269, label %270, label %291

270:                                              ; preds = %264
  %271 = load i32, i32* %5, align 8
  %272 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %266, i64 0, i32 1
  %273 = load i32, i32* %272, align 4
  %274 = icmp eq i32 %271, %273
  br i1 %274, label %275, label %291

275:                                              ; preds = %270
  %276 = ptrtoint %"class.WTF::StringImpl"* %266 to i64
  %277 = icmp eq %"class.WTF::StringImpl"* %266, null
  br i1 %277, label %291, label %278

278:                                              ; preds = %275
  %279 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %266, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %280 = load atomic i32, i32* %279 acquire, align 4
  %281 = and i32 %280, 4
  %282 = icmp ne i32 %281, 0
  %283 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %284 = icmp eq %"class.WTF::StringImpl"* %283, %266
  %285 = or i1 %282, %284
  br i1 %285, label %291, label %286

286:                                              ; preds = %278
  %287 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %287) #7
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.3, i64 0, i64 0), i32 57, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.4, i64 0, i64 0)) #7
  %288 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %287) #7
  br label %291

289:                                              ; preds = %63, %262, %159, %37, %23, %31
  %290 = tail call i64 @_ZN3WTF17AtomicStringTable22WeakFindLowercasedSlowERKNS_10StringViewE(%"class.WTF::AtomicStringTable"* %0, %"class.WTF::StringView"* dereferenceable(24) %1) #7
  br label %291

291:                                              ; preds = %264, %270, %286, %278, %275, %20, %12, %8, %289
  %292 = phi i64 [ %290, %289 ], [ %10, %8 ], [ %10, %12 ], [ %10, %20 ], [ %276, %275 ], [ %276, %278 ], [ %276, %286 ], [ 0, %270 ], [ 0, %264 ]
  ret i64 %292
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF17AtomicStringTable8WeakFindERKNS_10StringViewE(%"class.WTF::AtomicStringTable"*, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %23, !prof !3

8:                                                ; preds = %2
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %10 = ptrtoint %"class.WTF::StringImpl"* %9 to i64
  %11 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %11, label %69, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 acquire, align 4
  %15 = and i32 %14, 4
  %16 = icmp ne i32 %15, 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %18 = icmp eq %"class.WTF::StringImpl"* %17, %9
  %19 = or i1 %16, %18
  br i1 %19, label %69, label %20

20:                                               ; preds = %12
  %21 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #7
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.3, i64 0, i64 0), i32 57, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.4, i64 0, i64 0)) #7
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #7
  br label %69

23:                                               ; preds = %2
  %24 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %26 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 1
  %27 = bitcast %"class.WTF::StringImpl"* %26 to i8*
  %28 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %29 = load i8*, i8** %28, align 8
  %30 = icmp eq i8* %29, %27
  br i1 %30, label %31, label %67, !prof !4

31:                                               ; preds = %23
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 0, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = icmp ne i32 %6, %33
  %35 = icmp eq %"class.WTF::StringImpl"* %25, null
  %36 = or i1 %35, %34
  br i1 %36, label %67, label %37, !prof !5

37:                                               ; preds = %31
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = load atomic i32, i32* %38 acquire, align 4
  %40 = and i32 %39, 4
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %67, label %42, !prof !3

42:                                               ; preds = %37
  %43 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 1
  %45 = bitcast %"class.WTF::StringImpl"* %44 to i8*
  %46 = load i8*, i8** %28, align 8
  %47 = icmp eq i8* %46, %45
  br i1 %47, label %48, label %69

48:                                               ; preds = %42
  %49 = load i32, i32* %5, align 8
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 1
  %51 = load i32, i32* %50, align 4
  %52 = icmp eq i32 %49, %51
  br i1 %52, label %53, label %69

53:                                               ; preds = %48
  %54 = ptrtoint %"class.WTF::StringImpl"* %43 to i64
  %55 = icmp eq %"class.WTF::StringImpl"* %43, null
  br i1 %55, label %69, label %56

56:                                               ; preds = %53
  %57 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = load atomic i32, i32* %57 acquire, align 4
  %59 = and i32 %58, 4
  %60 = icmp ne i32 %59, 0
  %61 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %62 = icmp eq %"class.WTF::StringImpl"* %61, %43
  %63 = or i1 %60, %62
  br i1 %63, label %69, label %64

64:                                               ; preds = %56
  %65 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %65) #7
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.3, i64 0, i64 0), i32 57, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.4, i64 0, i64 0)) #7
  %66 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %65) #7
  br label %69

67:                                               ; preds = %37, %23, %31
  %68 = tail call i64 @_ZN3WTF17AtomicStringTable12WeakFindSlowERKNS_10StringViewE(%"class.WTF::AtomicStringTable"* %0, %"class.WTF::StringView"* dereferenceable(24) %1) #7
  br label %69

69:                                               ; preds = %42, %48, %64, %56, %53, %20, %12, %8, %67
  %70 = phi i64 [ %68, %67 ], [ %10, %8 ], [ %10, %12 ], [ %10, %20 ], [ %54, %53 ], [ %54, %56 ], [ %54, %64 ], [ 0, %48 ], [ 0, %42 ]
  ret i64 %70
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink7Element26SynchronizeAttributeHintedERKN3WTF12AtomicStringENS1_17AtomicStringTable10WeakResultE(%"class.blink::Element"*, %"class.WTF::AtomicString"* dereferenceable(8), i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.blink::QualifiedName", align 8
  %5 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %5, align 8
  %7 = icmp eq %"class.blink::ElementData"* %6, null
  br i1 %7, label %28, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %6, i64 0, i32 0, i32 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = and i32 %10, 1073741824
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %22, label %13

13:                                               ; preds = %8
  %14 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names10kStyleAttrE, align 8
  %15 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %14, i64 0, i32 0, i32 0
  %16 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %15, align 8
  %17 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %16, i64 0, i32 3
  %18 = bitcast %"class.WTF::AtomicString"* %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %19, %2
  br i1 %20, label %21, label %22

21:                                               ; preds = %13
  tail call void @_ZNK5blink7Element33SynchronizeStyleAttributeInternalEv(%"class.blink::Element"* %0) #7
  br label %28

22:                                               ; preds = %8, %13
  %23 = icmp slt i32 %10, 0
  br i1 %23, label %24, label %28

24:                                               ; preds = %22
  %25 = bitcast %"class.blink::Element"* %0 to %"class.blink::SVGElement"*
  %26 = bitcast %"class.blink::QualifiedName"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #7
  %27 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  call void @_ZN5blink13QualifiedNameC1ERKN3WTF12AtomicStringES4_S4_(%"class.blink::QualifiedName"* nonnull %4, %"class.WTF::AtomicString"* dereferenceable(8) %27, %"class.WTF::AtomicString"* dereferenceable(8) %1, %"class.WTF::AtomicString"* dereferenceable(8) %27) #7
  call void @_ZNK5blink10SVGElement23SynchronizeSVGAttributeERKNS_13QualifiedNameE(%"class.blink::SVGElement"* %25, %"class.blink::QualifiedName"* nonnull dereferenceable(8) %4) #7
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #7
  br label %28

28:                                               ; preds = %3, %21, %24, %22
  ret void
}

declare void @_ZNK5blink7Element33SynchronizeStyleAttributeInternalEv(%"class.blink::Element"*) local_unnamed_addr #2

declare void @_ZNK5blink10SVGElement23SynchronizeSVGAttributeERKNS_13QualifiedNameE(%"class.blink::SVGElement"*, %"class.blink::QualifiedName"* dereferenceable(8)) local_unnamed_addr #2

declare void @_ZN5blink13QualifiedNameC1ERKN3WTF12AtomicStringES4_S4_(%"class.blink::QualifiedName"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8)) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(8) %"class.WTF::AtomicString"* @_ZNK5blink7Element18GetAttributeHintedERKN3WTF12AtomicStringENS1_17AtomicStringTable10WeakResultE(%"class.blink::Element"*, %"class.WTF::AtomicString"* dereferenceable(8), i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.blink::QualifiedName", align 8
  %5 = alloca { %"class.blink::Attribute"*, i32 }, align 8
  %6 = alloca %"class.WTF::StringView", align 8
  %7 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %0, i64 0, i32 3, i32 0, i32 0
  %8 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %7, align 8
  %9 = icmp eq %"class.blink::ElementData"* %8, null
  br i1 %9, label %10, label %12

10:                                               ; preds = %3
  %11 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  ret %"class.WTF::AtomicString"* %11

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %8, i64 0, i32 0, i32 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = and i32 %14, 1073741824
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %12
  %18 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names10kStyleAttrE, align 8
  %19 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %18, i64 0, i32 0, i32 0
  %20 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %19, align 8
  %21 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %20, i64 0, i32 3
  %22 = bitcast %"class.WTF::AtomicString"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %23, %2
  br i1 %24, label %25, label %26

25:                                               ; preds = %17
  tail call void @_ZNK5blink7Element33SynchronizeStyleAttributeInternalEv(%"class.blink::Element"* %0) #7
  br label %32

26:                                               ; preds = %17, %12
  %27 = icmp slt i32 %14, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %26
  %29 = bitcast %"class.blink::Element"* %0 to %"class.blink::SVGElement"*
  %30 = bitcast %"class.blink::QualifiedName"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #7
  %31 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  call void @_ZN5blink13QualifiedNameC1ERKN3WTF12AtomicStringES4_S4_(%"class.blink::QualifiedName"* nonnull %4, %"class.WTF::AtomicString"* dereferenceable(8) %31, %"class.WTF::AtomicString"* dereferenceable(8) %1, %"class.WTF::AtomicString"* dereferenceable(8) %31) #7
  call void @_ZNK5blink10SVGElement23SynchronizeSVGAttributeERKNS_13QualifiedNameE(%"class.blink::SVGElement"* %29, %"class.blink::QualifiedName"* nonnull dereferenceable(8) %4) #7
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #7
  br label %32

32:                                               ; preds = %25, %26, %28
  %33 = bitcast { %"class.blink::Attribute"*, i32 }* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %33) #7
  %34 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %7, align 8
  %35 = icmp eq %"class.blink::ElementData"* %34, null
  br i1 %35, label %36, label %38

36:                                               ; preds = %32
  %37 = load i32, i32* null, align 536870912
  br label %50

38:                                               ; preds = %32
  %39 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %34, i64 0, i32 0, i32 0, i32 0
  %40 = load i32, i32* %39, align 4
  %41 = and i32 %40, 1
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %50, label %43

43:                                               ; preds = %38
  %44 = bitcast %"class.blink::ElementData"* %34 to %"class.blink::UniqueElementData"*
  %45 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %34, i64 1, i32 1
  %46 = bitcast %"class.blink::Member.14"* %45 to %"class.blink::Attribute"**
  %47 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %46, align 8
  %48 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %44, i64 0, i32 2, i32 0, i32 0, i32 2
  %49 = load i32, i32* %48, align 4
  br label %56

50:                                               ; preds = %38, %36
  %51 = phi i32 [ %37, %36 ], [ %40, %38 ]
  %52 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %34, i64 1
  %53 = bitcast %"class.blink::ElementData"* %52 to %"class.blink::Attribute"*
  %54 = lshr i32 %51, 1
  %55 = and i32 %54, 268435455
  br label %56

56:                                               ; preds = %43, %50
  %57 = phi %"class.blink::Attribute"* [ %53, %50 ], [ %47, %43 ]
  %58 = phi i32 [ %55, %50 ], [ %49, %43 ]
  %59 = getelementptr inbounds { %"class.blink::Attribute"*, i32 }, { %"class.blink::Attribute"*, i32 }* %5, i64 0, i32 0
  store %"class.blink::Attribute"* %57, %"class.blink::Attribute"** %59, align 8
  %60 = getelementptr inbounds { %"class.blink::Attribute"*, i32 }, { %"class.blink::Attribute"*, i32 }* %5, i64 0, i32 1
  store i32 %58, i32* %60, align 8
  %61 = bitcast { %"class.blink::Attribute"*, i32 }* %5 to %"class.blink::AttributeCollectionGeneric"*
  %62 = bitcast %"class.WTF::StringView"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %62) #7
  %63 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %64 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %63, align 8
  %65 = icmp eq %"class.WTF::StringImpl"* %64, null
  br i1 %65, label %66, label %70

66:                                               ; preds = %56
  %67 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  store i8* null, i8** %67, align 8
  %68 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %69 = bitcast %"class.WTF::StringView"* %6 to i64*
  store i64 %68, i64* %69, align 8
  br label %77

70:                                               ; preds = %56
  %71 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 0
  store %"class.WTF::StringImpl"* %64, %"class.WTF::StringImpl"** %71, align 8
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %64, i64 0, i32 1
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %64, i64 1
  %75 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  %76 = bitcast i8** %75 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %74, %"class.WTF::StringImpl"** %76, align 8
  br label %77

77:                                               ; preds = %66, %70
  %78 = phi i32 [ %73, %70 ], [ 0, %66 ]
  %79 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 2
  store i32 %78, i32* %79, align 8
  %80 = zext i32 %58 to i64
  %81 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %57, i64 %80
  %82 = icmp eq i32 %58, 0
  %83 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  br i1 %82, label %114, label %84

84:                                               ; preds = %77
  %85 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %83, i64 0, i32 0, i32 0, i32 0
  %86 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %85, align 8
  br label %87

87:                                               ; preds = %101, %84
  %88 = phi %"class.blink::Attribute"* [ %57, %84 ], [ %103, %101 ]
  %89 = phi i32 [ 0, %84 ], [ %104, %101 ]
  %90 = phi i8 [ 0, %84 ], [ %102, %101 ]
  %91 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %88, i64 0, i32 0, i32 0, i32 0
  %92 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %91, align 8
  %93 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %92, i64 0, i32 2, i32 0, i32 0, i32 0
  %94 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %93, align 8
  %95 = icmp eq %"class.WTF::StringImpl"* %94, %86
  br i1 %95, label %96, label %101

96:                                               ; preds = %87
  %97 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %92, i64 0, i32 3
  %98 = bitcast %"class.WTF::AtomicString"* %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = icmp eq i64 %99, %2
  br i1 %100, label %111, label %101

101:                                              ; preds = %96, %87
  %102 = phi i8 [ %90, %96 ], [ 1, %87 ]
  %103 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %88, i64 1
  %104 = add i32 %89, 1
  %105 = icmp eq %"class.blink::Attribute"* %103, %81
  br i1 %105, label %106, label %87

106:                                              ; preds = %101
  %107 = and i8 %102, 1
  %108 = icmp eq i8 %107, 0
  br i1 %108, label %114, label %109

109:                                              ; preds = %106
  %110 = call i32 @_ZNK5blink26AttributeCollectionGenericIKNS_14AttributeArrayES2_E14FindWithPrefixERKN3WTF10StringViewE(%"class.blink::AttributeCollectionGeneric"* nonnull %61, %"class.WTF::StringView"* nonnull dereferenceable(24) %6) #7
  br label %111

111:                                              ; preds = %96, %109
  %112 = phi i32 [ %110, %109 ], [ %89, %96 ]
  %113 = icmp eq i32 %112, -1
  br i1 %113, label %114, label %115

114:                                              ; preds = %77, %111, %106
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %62) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %33) #7
  ret %"class.WTF::AtomicString"* %83

115:                                              ; preds = %111
  %116 = call dereferenceable(16) %"class.blink::Attribute"* @_ZNK5blink26AttributeCollectionGenericIKNS_14AttributeArrayES2_E2atEj(%"class.blink::AttributeCollectionGeneric"* nonnull %61, i32 %112) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %62) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %33) #7
  %117 = icmp eq %"class.blink::Attribute"* %116, null
  %118 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %116, i64 0, i32 1
  %119 = select i1 %117, %"class.WTF::AtomicString"* %83, %"class.WTF::AtomicString"* %118
  ret %"class.WTF::AtomicString"* %119
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink7Element26LookupAttributeQNameHintedERKN3WTF12AtomicStringENS1_17AtomicStringTable10WeakResultE(%"struct.std::__1::pair.697"* noalias nocapture sret, %"class.blink::Element"*, %"class.WTF::AtomicString"* dereferenceable(8), i64) local_unnamed_addr #0 align 2 {
  %5 = alloca %"struct.std::__1::pair.698", align 8
  %6 = alloca %"class.blink::QualifiedName", align 8
  %7 = alloca %"class.WTF::AtomicString", align 8
  %8 = alloca { %"class.blink::Attribute"*, i32 }, align 8
  %9 = alloca %"class.WTF::StringView", align 8
  %10 = alloca %"struct.std::__1::pair.698", align 8
  %11 = alloca %"class.blink::QualifiedName", align 8
  %12 = alloca %"class.WTF::AtomicString", align 8
  %13 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %1, i64 0, i32 3, i32 0, i32 0
  %14 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %13, align 8
  %15 = icmp eq %"class.blink::ElementData"* %14, null
  br i1 %15, label %16, label %72

16:                                               ; preds = %4
  %17 = bitcast %"struct.std::__1::pair.698"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17) #7
  %18 = bitcast %"class.blink::QualifiedName"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #7
  %19 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %20 = bitcast %"class.WTF::AtomicString"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #7
  %21 = tail call %"class.WTF::StringImpl"* @_ZNK5blink7Element20LowercaseIfNecessaryERKN3WTF12AtomicStringE(%"class.blink::Element"* %1, %"class.WTF::AtomicString"* dereferenceable(8) %2) #7
  %22 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %7, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %21, %"class.WTF::StringImpl"** %22, align 8
  call void @_ZN5blink13QualifiedNameC1ERKN3WTF12AtomicStringES4_S4_(%"class.blink::QualifiedName"* nonnull %6, %"class.WTF::AtomicString"* dereferenceable(8) %19, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %7, %"class.WTF::AtomicString"* dereferenceable(8) %19) #7
  %23 = getelementptr inbounds %"struct.std::__1::pair.698", %"struct.std::__1::pair.698"* %5, i64 0, i32 0
  store i32 -1, i32* %23, align 8, !alias.scope !12
  %24 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %6, i64 0, i32 0, i32 0
  %25 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %24, align 8, !noalias !12
  %26 = getelementptr inbounds %"struct.std::__1::pair.698", %"struct.std::__1::pair.698"* %5, i64 0, i32 1, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %25, %"class.blink::QualifiedName::QualifiedNameImpl"** %26, align 8, !alias.scope !12
  %27 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %25, null
  br i1 %27, label %28, label %31

28:                                               ; preds = %16
  %29 = getelementptr inbounds %"struct.std::__1::pair.697", %"struct.std::__1::pair.697"* %0, i64 0, i32 0
  store i32 -1, i32* %29, align 8
  %30 = getelementptr inbounds %"struct.std::__1::pair.697", %"struct.std::__1::pair.697"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* null, %"class.blink::QualifiedName::QualifiedNameImpl"** %30, align 8
  br label %54

31:                                               ; preds = %16
  %32 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %25, i64 0, i32 1
  %33 = load i32, i32* %32, align 4, !noalias !12
  %34 = and i32 %33, 16777216
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %39, label %36

36:                                               ; preds = %31
  %37 = getelementptr inbounds %"struct.std::__1::pair.697", %"struct.std::__1::pair.697"* %0, i64 0, i32 0
  store i32 -1, i32* %37, align 8
  %38 = getelementptr inbounds %"struct.std::__1::pair.697", %"struct.std::__1::pair.697"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %25, %"class.blink::QualifiedName::QualifiedNameImpl"** %38, align 8
  br label %46

39:                                               ; preds = %31
  %40 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %25, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %40) #7, !noalias !12
  %41 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %26, align 8
  %42 = load i32, i32* %23, align 8
  %43 = getelementptr inbounds %"struct.std::__1::pair.697", %"struct.std::__1::pair.697"* %0, i64 0, i32 0
  store i32 %42, i32* %43, align 8
  %44 = getelementptr inbounds %"struct.std::__1::pair.697", %"struct.std::__1::pair.697"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %41, %"class.blink::QualifiedName::QualifiedNameImpl"** %44, align 8
  %45 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %41, null
  br i1 %45, label %54, label %46

46:                                               ; preds = %36, %39
  %47 = phi %"class.blink::QualifiedName::QualifiedNameImpl"* [ %25, %36 ], [ %41, %39 ]
  %48 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %47, i64 0, i32 1
  %49 = load i32, i32* %48, align 4
  %50 = and i32 %49, 16777216
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %46
  %53 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %47, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %53) #7
  br label %54

54:                                               ; preds = %28, %39, %46, %52
  %55 = getelementptr inbounds %"struct.std::__1::pair.698", %"struct.std::__1::pair.698"* %5, i64 0, i32 1
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* %55) #7
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* nonnull %6) #7
  %56 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %22, align 8
  %57 = icmp eq %"class.WTF::StringImpl"* %56, null
  br i1 %57, label %71, label %58

58:                                               ; preds = %54
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %56, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %60 = load atomic i32, i32* %59 monotonic, align 4
  %61 = and i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %56, i64 0, i32 0
  %64 = load i32, i32* %63, align 4
  br i1 %62, label %65, label %67

65:                                               ; preds = %58
  %66 = add i32 %64, -1
  store i32 %66, i32* %63, align 4
  br label %67

67:                                               ; preds = %65, %58
  %68 = phi i32 [ %66, %65 ], [ %64, %58 ]
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %71

70:                                               ; preds = %67
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %56) #7
  br label %71

71:                                               ; preds = %54, %67, %70
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #7
  br label %260

72:                                               ; preds = %4
  %73 = bitcast { %"class.blink::Attribute"*, i32 }* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %73) #7
  %74 = getelementptr inbounds { %"class.blink::Attribute"*, i32 }, { %"class.blink::Attribute"*, i32 }* %8, i64 0, i32 0
  %75 = getelementptr inbounds { %"class.blink::Attribute"*, i32 }, { %"class.blink::Attribute"*, i32 }* %8, i64 0, i32 1
  %76 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %14, i64 0, i32 0, i32 0, i32 0
  %77 = bitcast { %"class.blink::Attribute"*, i32 }* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %77, i8 -86, i64 16, i1 false)
  %78 = load i32, i32* %76, align 4
  %79 = and i32 %78, 1
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %88, label %81

81:                                               ; preds = %72
  %82 = bitcast %"class.blink::ElementData"* %14 to %"class.blink::UniqueElementData"*
  %83 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %14, i64 1, i32 1
  %84 = bitcast %"class.blink::Member.14"* %83 to %"class.blink::Attribute"**
  %85 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %84, align 8
  %86 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %82, i64 0, i32 2, i32 0, i32 0, i32 2
  %87 = load i32, i32* %86, align 4
  br label %93

88:                                               ; preds = %72
  %89 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %14, i64 1
  %90 = bitcast %"class.blink::ElementData"* %89 to %"class.blink::Attribute"*
  %91 = lshr i32 %78, 1
  %92 = and i32 %91, 268435455
  br label %93

93:                                               ; preds = %81, %88
  %94 = phi %"class.blink::Attribute"* [ %90, %88 ], [ %85, %81 ]
  %95 = phi i32 [ %92, %88 ], [ %87, %81 ]
  store %"class.blink::Attribute"* %94, %"class.blink::Attribute"** %74, align 8
  store i32 %95, i32* %75, align 8
  %96 = bitcast { %"class.blink::Attribute"*, i32 }* %8 to %"class.blink::AttributeCollectionGeneric"*
  %97 = bitcast %"class.WTF::StringView"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %97) #7
  %98 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %99 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %98, align 8
  %100 = icmp eq %"class.WTF::StringImpl"* %99, null
  br i1 %100, label %101, label %105

101:                                              ; preds = %93
  %102 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 1
  store i8* null, i8** %102, align 8
  %103 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %104 = bitcast %"class.WTF::StringView"* %9 to i64*
  store i64 %103, i64* %104, align 8
  br label %112

105:                                              ; preds = %93
  %106 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 0
  store %"class.WTF::StringImpl"* %99, %"class.WTF::StringImpl"** %106, align 8
  %107 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %99, i64 0, i32 1
  %108 = load i32, i32* %107, align 4
  %109 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %99, i64 1
  %110 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 1
  %111 = bitcast i8** %110 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %109, %"class.WTF::StringImpl"** %111, align 8
  br label %112

112:                                              ; preds = %101, %105
  %113 = phi i32 [ %108, %105 ], [ 0, %101 ]
  %114 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 2
  store i32 %113, i32* %114, align 8
  %115 = zext i32 %95 to i64
  %116 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %94, i64 %115
  %117 = icmp eq i32 %95, 0
  br i1 %117, label %146, label %118

118:                                              ; preds = %112
  %119 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %120 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %119, i64 0, i32 0, i32 0, i32 0
  %121 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %120, align 8
  br label %122

122:                                              ; preds = %136, %118
  %123 = phi %"class.blink::Attribute"* [ %94, %118 ], [ %138, %136 ]
  %124 = phi i32 [ 0, %118 ], [ %139, %136 ]
  %125 = phi i8 [ 0, %118 ], [ %137, %136 ]
  %126 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %123, i64 0, i32 0, i32 0, i32 0
  %127 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %126, align 8
  %128 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %127, i64 0, i32 2, i32 0, i32 0, i32 0
  %129 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %128, align 8
  %130 = icmp eq %"class.WTF::StringImpl"* %129, %121
  br i1 %130, label %131, label %136

131:                                              ; preds = %122
  %132 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %127, i64 0, i32 3
  %133 = bitcast %"class.WTF::AtomicString"* %132 to i64*
  %134 = load i64, i64* %133, align 8
  %135 = icmp eq i64 %134, %3
  br i1 %135, label %146, label %136

136:                                              ; preds = %131, %122
  %137 = phi i8 [ %125, %131 ], [ 1, %122 ]
  %138 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %123, i64 1
  %139 = add i32 %124, 1
  %140 = icmp eq %"class.blink::Attribute"* %138, %116
  br i1 %140, label %141, label %122

141:                                              ; preds = %136
  %142 = and i8 %137, 1
  %143 = icmp eq i8 %142, 0
  br i1 %143, label %146, label %144

144:                                              ; preds = %141
  %145 = call i32 @_ZNK5blink26AttributeCollectionGenericIKNS_14AttributeArrayES2_E14FindWithPrefixERKN3WTF10StringViewE(%"class.blink::AttributeCollectionGeneric"* nonnull %96, %"class.WTF::StringView"* nonnull dereferenceable(24) %9) #7
  br label %146

146:                                              ; preds = %131, %112, %141, %144
  %147 = phi i32 [ %145, %144 ], [ -1, %141 ], [ -1, %112 ], [ %124, %131 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %97) #7
  %148 = bitcast %"struct.std::__1::pair.698"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %148) #7
  %149 = bitcast %"class.blink::QualifiedName"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %149) #7
  %150 = icmp eq i32 %147, -1
  br i1 %150, label %205, label %151

151:                                              ; preds = %146
  %152 = call dereferenceable(16) %"class.blink::Attribute"* @_ZNK5blink26AttributeCollectionGenericIKNS_14AttributeArrayES2_E2atEj(%"class.blink::AttributeCollectionGeneric"* nonnull %96, i32 %147) #7
  %153 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %152, i64 0, i32 0, i32 0, i32 0
  %154 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %153, align 8
  %155 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %11, i64 0, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %154, %"class.blink::QualifiedName::QualifiedNameImpl"** %155, align 8
  %156 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %154, null
  br i1 %156, label %157, label %160

157:                                              ; preds = %151
  %158 = getelementptr inbounds %"struct.std::__1::pair.698", %"struct.std::__1::pair.698"* %10, i64 0, i32 0
  store i32 %147, i32* %158, align 8, !alias.scope !15
  %159 = getelementptr inbounds %"struct.std::__1::pair.698", %"struct.std::__1::pair.698"* %10, i64 0, i32 1, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* null, %"class.blink::QualifiedName::QualifiedNameImpl"** %159, align 8, !alias.scope !15
  br label %185

160:                                              ; preds = %151
  %161 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %154, i64 0, i32 1
  %162 = load i32, i32* %161, align 4
  %163 = and i32 %162, 16777216
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %168, label %165

165:                                              ; preds = %160
  %166 = getelementptr inbounds %"struct.std::__1::pair.698", %"struct.std::__1::pair.698"* %10, i64 0, i32 0
  store i32 %147, i32* %166, align 8, !alias.scope !15
  %167 = getelementptr inbounds %"struct.std::__1::pair.698", %"struct.std::__1::pair.698"* %10, i64 0, i32 1, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %154, %"class.blink::QualifiedName::QualifiedNameImpl"** %167, align 8, !alias.scope !15
  br label %174

168:                                              ; preds = %160
  %169 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %154, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %169) #7
  %170 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %155, align 8, !noalias !15
  %171 = getelementptr inbounds %"struct.std::__1::pair.698", %"struct.std::__1::pair.698"* %10, i64 0, i32 0
  store i32 %147, i32* %171, align 8, !alias.scope !15
  %172 = getelementptr inbounds %"struct.std::__1::pair.698", %"struct.std::__1::pair.698"* %10, i64 0, i32 1, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %170, %"class.blink::QualifiedName::QualifiedNameImpl"** %172, align 8, !alias.scope !15
  %173 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %170, null
  br i1 %173, label %185, label %174

174:                                              ; preds = %165, %168
  %175 = phi %"class.blink::QualifiedName::QualifiedNameImpl"** [ %167, %165 ], [ %172, %168 ]
  %176 = phi i32* [ %166, %165 ], [ %171, %168 ]
  %177 = phi %"class.blink::QualifiedName::QualifiedNameImpl"* [ %154, %165 ], [ %170, %168 ]
  %178 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %177, i64 0, i32 1
  %179 = load i32, i32* %178, align 4, !noalias !15
  %180 = and i32 %179, 16777216
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %188, label %182

182:                                              ; preds = %174
  %183 = getelementptr inbounds %"struct.std::__1::pair.697", %"struct.std::__1::pair.697"* %0, i64 0, i32 0
  store i32 %147, i32* %183, align 8
  %184 = getelementptr inbounds %"struct.std::__1::pair.697", %"struct.std::__1::pair.697"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %177, %"class.blink::QualifiedName::QualifiedNameImpl"** %184, align 8
  br label %195

185:                                              ; preds = %157, %168
  %186 = getelementptr inbounds %"struct.std::__1::pair.697", %"struct.std::__1::pair.697"* %0, i64 0, i32 0
  store i32 %147, i32* %186, align 8
  %187 = getelementptr inbounds %"struct.std::__1::pair.697", %"struct.std::__1::pair.697"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* null, %"class.blink::QualifiedName::QualifiedNameImpl"** %187, align 8
  br label %203

188:                                              ; preds = %174
  %189 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %177, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %189) #7, !noalias !15
  %190 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %175, align 8
  %191 = load i32, i32* %176, align 8
  %192 = getelementptr inbounds %"struct.std::__1::pair.697", %"struct.std::__1::pair.697"* %0, i64 0, i32 0
  store i32 %191, i32* %192, align 8
  %193 = getelementptr inbounds %"struct.std::__1::pair.697", %"struct.std::__1::pair.697"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %190, %"class.blink::QualifiedName::QualifiedNameImpl"** %193, align 8
  %194 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %190, null
  br i1 %194, label %203, label %195

195:                                              ; preds = %182, %188
  %196 = phi %"class.blink::QualifiedName::QualifiedNameImpl"* [ %177, %182 ], [ %190, %188 ]
  %197 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %196, i64 0, i32 1
  %198 = load i32, i32* %197, align 4
  %199 = and i32 %198, 16777216
  %200 = icmp eq i32 %199, 0
  br i1 %200, label %201, label %203

201:                                              ; preds = %195
  %202 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %196, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %202) #7
  br label %203

203:                                              ; preds = %185, %188, %195, %201
  %204 = getelementptr inbounds %"struct.std::__1::pair.698", %"struct.std::__1::pair.698"* %10, i64 0, i32 1
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* %204) #7
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* nonnull %11) #7
  br label %259

205:                                              ; preds = %146
  %206 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %207 = bitcast %"class.WTF::AtomicString"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %207) #7
  %208 = call %"class.WTF::StringImpl"* @_ZNK5blink7Element20LowercaseIfNecessaryERKN3WTF12AtomicStringE(%"class.blink::Element"* %1, %"class.WTF::AtomicString"* dereferenceable(8) %2) #7
  %209 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %12, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %208, %"class.WTF::StringImpl"** %209, align 8
  call void @_ZN5blink13QualifiedNameC1ERKN3WTF12AtomicStringES4_S4_(%"class.blink::QualifiedName"* nonnull %11, %"class.WTF::AtomicString"* dereferenceable(8) %206, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %12, %"class.WTF::AtomicString"* dereferenceable(8) %206) #7
  %210 = getelementptr inbounds %"struct.std::__1::pair.698", %"struct.std::__1::pair.698"* %10, i64 0, i32 0
  store i32 -1, i32* %210, align 8, !alias.scope !18
  %211 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %11, i64 0, i32 0, i32 0
  %212 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %211, align 8, !noalias !18
  %213 = getelementptr inbounds %"struct.std::__1::pair.698", %"struct.std::__1::pair.698"* %10, i64 0, i32 1, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %212, %"class.blink::QualifiedName::QualifiedNameImpl"** %213, align 8, !alias.scope !18
  %214 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %212, null
  br i1 %214, label %215, label %218

215:                                              ; preds = %205
  %216 = getelementptr inbounds %"struct.std::__1::pair.697", %"struct.std::__1::pair.697"* %0, i64 0, i32 0
  store i32 -1, i32* %216, align 8
  %217 = getelementptr inbounds %"struct.std::__1::pair.697", %"struct.std::__1::pair.697"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* null, %"class.blink::QualifiedName::QualifiedNameImpl"** %217, align 8
  br label %241

218:                                              ; preds = %205
  %219 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %212, i64 0, i32 1
  %220 = load i32, i32* %219, align 4, !noalias !18
  %221 = and i32 %220, 16777216
  %222 = icmp eq i32 %221, 0
  br i1 %222, label %226, label %223

223:                                              ; preds = %218
  %224 = getelementptr inbounds %"struct.std::__1::pair.697", %"struct.std::__1::pair.697"* %0, i64 0, i32 0
  store i32 -1, i32* %224, align 8
  %225 = getelementptr inbounds %"struct.std::__1::pair.697", %"struct.std::__1::pair.697"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %212, %"class.blink::QualifiedName::QualifiedNameImpl"** %225, align 8
  br label %233

226:                                              ; preds = %218
  %227 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %212, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %227) #7, !noalias !18
  %228 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %213, align 8
  %229 = load i32, i32* %210, align 8
  %230 = getelementptr inbounds %"struct.std::__1::pair.697", %"struct.std::__1::pair.697"* %0, i64 0, i32 0
  store i32 %229, i32* %230, align 8
  %231 = getelementptr inbounds %"struct.std::__1::pair.697", %"struct.std::__1::pair.697"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %228, %"class.blink::QualifiedName::QualifiedNameImpl"** %231, align 8
  %232 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %228, null
  br i1 %232, label %241, label %233

233:                                              ; preds = %223, %226
  %234 = phi %"class.blink::QualifiedName::QualifiedNameImpl"* [ %212, %223 ], [ %228, %226 ]
  %235 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %234, i64 0, i32 1
  %236 = load i32, i32* %235, align 4
  %237 = and i32 %236, 16777216
  %238 = icmp eq i32 %237, 0
  br i1 %238, label %239, label %241

239:                                              ; preds = %233
  %240 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %234, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %240) #7
  br label %241

241:                                              ; preds = %215, %226, %233, %239
  %242 = getelementptr inbounds %"struct.std::__1::pair.698", %"struct.std::__1::pair.698"* %10, i64 0, i32 1
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* %242) #7
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* nonnull %11) #7
  %243 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %209, align 8
  %244 = icmp eq %"class.WTF::StringImpl"* %243, null
  br i1 %244, label %258, label %245

245:                                              ; preds = %241
  %246 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %243, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %247 = load atomic i32, i32* %246 monotonic, align 4
  %248 = and i32 %247, 2
  %249 = icmp eq i32 %248, 0
  %250 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %243, i64 0, i32 0
  %251 = load i32, i32* %250, align 4
  br i1 %249, label %252, label %254

252:                                              ; preds = %245
  %253 = add i32 %251, -1
  store i32 %253, i32* %250, align 4
  br label %254

254:                                              ; preds = %252, %245
  %255 = phi i32 [ %253, %252 ], [ %251, %245 ]
  %256 = icmp eq i32 %255, 0
  br i1 %256, label %257, label %258

257:                                              ; preds = %254
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %243) #7
  br label %258

258:                                              ; preds = %241, %254, %257
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %207) #7
  br label %259

259:                                              ; preds = %203, %258
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %149) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %148) #7
  br label %260

260:                                              ; preds = %259, %71
  %261 = phi i8* [ %73, %259 ], [ %17, %71 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %261) #7
  ret void
}

declare %"class.WTF::StringImpl"* @_ZNK5blink7Element20LowercaseIfNecessaryERKN3WTF12AtomicStringE(%"class.blink::Element"*, %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink7Element12setAttributeERKNS_13QualifiedNameERKN3WTF12AtomicStringE(%"class.blink::Element"*, %"class.blink::QualifiedName"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = alloca { %"class.blink::Attribute"*, i32 }, align 8
  %5 = alloca %"class.WTF::AtomicString", align 8
  %6 = alloca %"class.blink::QualifiedName", align 8
  %7 = alloca %"class.blink::MutableAttributeCollection", align 8
  %8 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %0, i64 0, i32 3, i32 0, i32 0
  %9 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %8, align 8
  %10 = icmp eq %"class.blink::ElementData"* %9, null
  br i1 %10, label %78, label %11

11:                                               ; preds = %3
  %12 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names10kStyleAttrE, align 8
  %13 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %1, i64 0, i32 0, i32 0
  %14 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %12, i64 0, i32 0, i32 0
  %16 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %15, align 8
  %17 = icmp ne %"class.blink::QualifiedName::QualifiedNameImpl"* %14, %16
  %18 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %9, i64 0, i32 0, i32 0, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = and i32 %19, 1073741824
  %21 = icmp eq i32 %20, 0
  %22 = or i1 %17, %21
  br i1 %22, label %24, label %23, !prof !21

23:                                               ; preds = %11
  tail call void @_ZNK5blink7Element33SynchronizeStyleAttributeInternalEv(%"class.blink::Element"* %0) #7
  br label %28

24:                                               ; preds = %11
  %25 = icmp slt i32 %19, 0
  br i1 %25, label %26, label %28, !prof !3

26:                                               ; preds = %24
  %27 = bitcast %"class.blink::Element"* %0 to %"class.blink::SVGElement"*
  tail call void @_ZNK5blink10SVGElement23SynchronizeSVGAttributeERKNS_13QualifiedNameE(%"class.blink::SVGElement"* %27, %"class.blink::QualifiedName"* dereferenceable(8) %1) #7
  br label %28

28:                                               ; preds = %23, %24, %26
  %29 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %8, align 8
  %30 = icmp eq %"class.blink::ElementData"* %29, null
  br i1 %30, label %78, label %31

31:                                               ; preds = %28
  %32 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %29, i64 0, i32 0, i32 0, i32 0
  %33 = load i32, i32* %32, align 4
  %34 = and i32 %33, 1
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %43, label %36

36:                                               ; preds = %31
  %37 = bitcast %"class.blink::ElementData"* %29 to %"class.blink::UniqueElementData"*
  %38 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %29, i64 1, i32 1
  %39 = bitcast %"class.blink::Member.14"* %38 to %"class.blink::Attribute"**
  %40 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %39, align 8
  %41 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %37, i64 0, i32 2, i32 0, i32 0, i32 2
  %42 = load i32, i32* %41, align 4
  br label %48

43:                                               ; preds = %31
  %44 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %29, i64 1
  %45 = bitcast %"class.blink::ElementData"* %44 to %"class.blink::Attribute"*
  %46 = lshr i32 %33, 1
  %47 = and i32 %46, 268435455
  br label %48

48:                                               ; preds = %36, %43
  %49 = phi %"class.blink::Attribute"* [ %45, %43 ], [ %40, %36 ]
  %50 = phi i32 [ %47, %43 ], [ %42, %36 ]
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %49, i64 %51
  %53 = icmp eq i32 %50, 0
  br i1 %53, label %78, label %54

54:                                               ; preds = %48
  %55 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %13, align 8
  %56 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %55, i64 0, i32 3, i32 0, i32 0, i32 0
  %57 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %55, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %58

58:                                               ; preds = %74, %54
  %59 = phi %"class.blink::Attribute"* [ %49, %54 ], [ %75, %74 ]
  %60 = phi i32 [ 0, %54 ], [ %76, %74 ]
  %61 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %59, i64 0, i32 0, i32 0, i32 0
  %62 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %61, align 8
  %63 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %62, %55
  br i1 %63, label %78, label %64

64:                                               ; preds = %58
  %65 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %62, i64 0, i32 3, i32 0, i32 0, i32 0
  %66 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %65, align 8
  %67 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %56, align 8
  %68 = icmp eq %"class.WTF::StringImpl"* %66, %67
  br i1 %68, label %69, label %74

69:                                               ; preds = %64
  %70 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %62, i64 0, i32 4, i32 0, i32 0, i32 0
  %71 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %70, align 8
  %72 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %57, align 8
  %73 = icmp eq %"class.WTF::StringImpl"* %71, %72
  br i1 %73, label %78, label %74

74:                                               ; preds = %69, %64
  %75 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %59, i64 1
  %76 = add i32 %60, 1
  %77 = icmp eq %"class.blink::Attribute"* %75, %52
  br i1 %77, label %78, label %58

78:                                               ; preds = %74, %69, %58, %3, %48, %28
  %79 = phi i1 [ true, %28 ], [ false, %48 ], [ true, %3 ], [ false, %58 ], [ false, %69 ], [ false, %74 ]
  %80 = phi %"class.blink::ElementData"* [ null, %28 ], [ %29, %48 ], [ null, %3 ], [ %29, %58 ], [ %29, %69 ], [ %29, %74 ]
  %81 = phi i32 [ -1, %28 ], [ -1, %48 ], [ -1, %3 ], [ -1, %74 ], [ %60, %69 ], [ %60, %58 ]
  %82 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %83 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %82, align 8
  %84 = icmp eq %"class.WTF::StringImpl"* %83, null
  %85 = icmp eq i32 %81, -1
  br i1 %84, label %86, label %88

86:                                               ; preds = %78
  br i1 %85, label %234, label %87

87:                                               ; preds = %86
  tail call void @_ZN5blink7Element23RemoveAttributeInternalEjNS0_30SynchronizationOfLazyAttributeE(%"class.blink::Element"* %0, i32 %81, i32 0) #7
  br label %234

88:                                               ; preds = %78
  br i1 %85, label %89, label %90

89:                                               ; preds = %88
  tail call void @_ZN5blink7Element23AppendAttributeInternalERKNS_13QualifiedNameERKN3WTF12AtomicStringENS0_30SynchronizationOfLazyAttributeE(%"class.blink::Element"* %0, %"class.blink::QualifiedName"* dereferenceable(8) %1, %"class.WTF::AtomicString"* dereferenceable(8) %2, i32 0) #7
  br label %234

90:                                               ; preds = %88
  %91 = bitcast { %"class.blink::Attribute"*, i32 }* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %91) #7
  br i1 %79, label %92, label %94

92:                                               ; preds = %90
  %93 = load i32, i32* null, align 536870912
  br label %106

94:                                               ; preds = %90
  %95 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %80, i64 0, i32 0, i32 0, i32 0
  %96 = load i32, i32* %95, align 4
  %97 = and i32 %96, 1
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %106, label %99

99:                                               ; preds = %94
  %100 = bitcast %"class.blink::ElementData"* %80 to %"class.blink::UniqueElementData"*
  %101 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %80, i64 1, i32 1
  %102 = bitcast %"class.blink::Member.14"* %101 to %"class.blink::Attribute"**
  %103 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %102, align 8
  %104 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %100, i64 0, i32 2, i32 0, i32 0, i32 2
  %105 = load i32, i32* %104, align 4
  br label %112

106:                                              ; preds = %94, %92
  %107 = phi i32 [ %93, %92 ], [ %96, %94 ]
  %108 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %80, i64 1
  %109 = bitcast %"class.blink::ElementData"* %108 to %"class.blink::Attribute"*
  %110 = lshr i32 %107, 1
  %111 = and i32 %110, 268435455
  br label %112

112:                                              ; preds = %106, %99
  %113 = phi %"class.blink::Attribute"* [ %109, %106 ], [ %103, %99 ]
  %114 = phi i32 [ %111, %106 ], [ %105, %99 ]
  %115 = getelementptr inbounds { %"class.blink::Attribute"*, i32 }, { %"class.blink::Attribute"*, i32 }* %4, i64 0, i32 0
  store %"class.blink::Attribute"* %113, %"class.blink::Attribute"** %115, align 8
  %116 = getelementptr inbounds { %"class.blink::Attribute"*, i32 }, { %"class.blink::Attribute"*, i32 }* %4, i64 0, i32 1
  store i32 %114, i32* %116, align 8
  %117 = bitcast { %"class.blink::Attribute"*, i32 }* %4 to %"class.blink::AttributeCollectionGeneric"*
  %118 = call dereferenceable(16) %"class.blink::Attribute"* @_ZNK5blink26AttributeCollectionGenericIKNS_14AttributeArrayES2_E2atEj(%"class.blink::AttributeCollectionGeneric"* nonnull %117, i32 %81) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %91) #7
  %119 = bitcast %"class.WTF::AtomicString"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %119) #7
  %120 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %5, i64 0, i32 0, i32 0, i32 0
  %121 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %118, i64 0, i32 1, i32 0, i32 0, i32 0
  %122 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %121, align 8
  store %"class.WTF::StringImpl"* %122, %"class.WTF::StringImpl"** %120, align 8
  %123 = icmp eq %"class.WTF::StringImpl"* %122, null
  br i1 %123, label %141, label %124

124:                                              ; preds = %112
  %125 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %122, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %126 = load atomic i32, i32* %125 monotonic, align 4
  %127 = and i32 %126, 2
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %129, label %141

129:                                              ; preds = %124
  %130 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %122, i64 0, i32 0
  %131 = load i32, i32* %130, align 4
  %132 = zext i32 %131 to i33
  %133 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %132, i33 1) #7
  %134 = extractvalue { i33, i1 } %133, 1
  %135 = extractvalue { i33, i1 } %133, 0
  %136 = icmp slt i33 %135, 0
  %137 = or i1 %134, %136
  br i1 %137, label %138, label %139, !prof !3

138:                                              ; preds = %129
  call void @llvm.trap() #7
  unreachable

139:                                              ; preds = %129
  %140 = trunc i33 %135 to i32
  store i32 %140, i32* %130, align 4
  br label %141

141:                                              ; preds = %139, %124, %112
  %142 = bitcast %"class.blink::QualifiedName"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %142) #7
  %143 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %6, i64 0, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* inttoptr (i64 -6148914691236517206 to %"class.blink::QualifiedName::QualifiedNameImpl"*), %"class.blink::QualifiedName::QualifiedNameImpl"** %143, align 8
  %144 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %118, i64 0, i32 0, i32 0, i32 0
  %145 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %144, align 8
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %145, %"class.blink::QualifiedName::QualifiedNameImpl"** %143, align 8
  %146 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %145, null
  br i1 %146, label %154, label %147

147:                                              ; preds = %141
  %148 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %145, i64 0, i32 1
  %149 = load i32, i32* %148, align 4
  %150 = and i32 %149, 16777216
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %152, label %154

152:                                              ; preds = %147
  %153 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %145, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %153) #7
  br label %154

154:                                              ; preds = %152, %147, %141
  call void @_ZN5blink7Element19WillModifyAttributeERKNS_13QualifiedNameERKN3WTF12AtomicStringES7_(%"class.blink::Element"* %0, %"class.blink::QualifiedName"* nonnull dereferenceable(8) %6, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %5, %"class.WTF::AtomicString"* dereferenceable(8) %2) #7
  %155 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %82, align 8
  %156 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %120, align 8
  %157 = icmp eq %"class.WTF::StringImpl"* %155, %156
  br i1 %157, label %217, label %158

158:                                              ; preds = %154
  %159 = bitcast %"class.blink::MutableAttributeCollection"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %159) #7
  %160 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %8, align 8
  %161 = icmp eq %"class.blink::ElementData"* %160, null
  br i1 %161, label %168, label %162

162:                                              ; preds = %158
  %163 = bitcast %"class.blink::ElementData"* %160 to %"class.blink::UniqueElementData"*
  %164 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %160, i64 0, i32 0, i32 0, i32 0
  %165 = load i32, i32* %164, align 4
  %166 = and i32 %165, 1
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %168, label %171

168:                                              ; preds = %162, %158
  call void @_ZN5blink7Element23CreateUniqueElementDataEv(%"class.blink::Element"* %0) #7
  %169 = bitcast %"class.blink::ElementData"** %8 to %"class.blink::UniqueElementData"**
  %170 = load %"class.blink::UniqueElementData"*, %"class.blink::UniqueElementData"** %169, align 8
  br label %171

171:                                              ; preds = %168, %162
  %172 = phi %"class.blink::UniqueElementData"* [ %170, %168 ], [ %163, %162 ]
  %173 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %172, i64 0, i32 2
  %174 = getelementptr inbounds %"class.blink::MutableAttributeCollection", %"class.blink::MutableAttributeCollection"* %7, i64 0, i32 0, i32 0
  store %"class.WTF::Vector.704"* %173, %"class.WTF::Vector.704"** %174, align 8
  %175 = getelementptr inbounds %"class.blink::MutableAttributeCollection", %"class.blink::MutableAttributeCollection"* %7, i64 0, i32 0
  %176 = call dereferenceable(16) %"class.blink::Attribute"* @_ZNK5blink26AttributeCollectionGenericIN3WTF6VectorINS_9AttributeELj4ENS1_18PartitionAllocatorEEERS5_E2atEj(%"class.blink::AttributeCollectionGeneric.1243"* nonnull %175, i32 %81) #7
  %177 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %176, i64 0, i32 1
  %178 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %82, align 8
  %179 = icmp eq %"class.WTF::StringImpl"* %178, null
  br i1 %179, label %197, label %180

180:                                              ; preds = %171
  %181 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %178, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %182 = load atomic i32, i32* %181 monotonic, align 4
  %183 = and i32 %182, 2
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %185, label %197

185:                                              ; preds = %180
  %186 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %178, i64 0, i32 0
  %187 = load i32, i32* %186, align 4
  %188 = zext i32 %187 to i33
  %189 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %188, i33 1) #7
  %190 = extractvalue { i33, i1 } %189, 1
  %191 = extractvalue { i33, i1 } %189, 0
  %192 = icmp slt i33 %191, 0
  %193 = or i1 %190, %192
  br i1 %193, label %194, label %195, !prof !3

194:                                              ; preds = %185
  call void @llvm.trap() #7
  unreachable

195:                                              ; preds = %185
  %196 = trunc i33 %191 to i32
  store i32 %196, i32* %186, align 4
  br label %197

197:                                              ; preds = %195, %180, %171
  %198 = ptrtoint %"class.WTF::StringImpl"* %178 to i64
  %199 = bitcast %"class.WTF::AtomicString"* %177 to i64*
  %200 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %177, i64 0, i32 0, i32 0, i32 0
  %201 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %200, align 8
  store i64 %198, i64* %199, align 8
  %202 = icmp eq %"class.WTF::StringImpl"* %201, null
  br i1 %202, label %216, label %203

203:                                              ; preds = %197
  %204 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %201, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %205 = load atomic i32, i32* %204 monotonic, align 4
  %206 = and i32 %205, 2
  %207 = icmp eq i32 %206, 0
  %208 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %201, i64 0, i32 0
  %209 = load i32, i32* %208, align 4
  br i1 %207, label %210, label %212

210:                                              ; preds = %203
  %211 = add i32 %209, -1
  store i32 %211, i32* %208, align 4
  br label %212

212:                                              ; preds = %210, %203
  %213 = phi i32 [ %211, %210 ], [ %209, %203 ]
  %214 = icmp eq i32 %213, 0
  br i1 %214, label %215, label %216

215:                                              ; preds = %212
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %201) #7
  br label %216

216:                                              ; preds = %215, %212, %197
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %159) #7
  br label %217

217:                                              ; preds = %216, %154
  call void @_ZN5blink7Element18DidModifyAttributeERKNS_13QualifiedNameERKN3WTF12AtomicStringES7_(%"class.blink::Element"* %0, %"class.blink::QualifiedName"* nonnull dereferenceable(8) %6, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %5, %"class.WTF::AtomicString"* dereferenceable(8) %2) #7
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* nonnull %6) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %142) #7
  %218 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %120, align 8
  %219 = icmp eq %"class.WTF::StringImpl"* %218, null
  br i1 %219, label %233, label %220

220:                                              ; preds = %217
  %221 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %218, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %222 = load atomic i32, i32* %221 monotonic, align 4
  %223 = and i32 %222, 2
  %224 = icmp eq i32 %223, 0
  %225 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %218, i64 0, i32 0
  %226 = load i32, i32* %225, align 4
  br i1 %224, label %227, label %229

227:                                              ; preds = %220
  %228 = add i32 %226, -1
  store i32 %228, i32* %225, align 4
  br label %229

229:                                              ; preds = %227, %220
  %230 = phi i32 [ %228, %227 ], [ %226, %220 ]
  %231 = icmp eq i32 %230, 0
  br i1 %231, label %232, label %233

232:                                              ; preds = %229
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %218) #7
  br label %233

233:                                              ; preds = %232, %229, %217
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %119) #7
  br label %234

234:                                              ; preds = %86, %87, %89, %233
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink7Element12setAttributeERKNS_13QualifiedNameERKN3WTF12AtomicStringERNS_14ExceptionStateE(%"class.blink::Element"*, %"class.blink::QualifiedName"* dereferenceable(8), %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8), %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %5 = alloca { %"class.blink::Attribute"*, i32 }, align 8
  %6 = alloca %"class.WTF::AtomicString", align 8
  %7 = alloca %"class.blink::QualifiedName", align 8
  %8 = alloca %"class.blink::MutableAttributeCollection", align 8
  %9 = alloca %"class.WTF::AtomicString", align 8
  %10 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %0, i64 0, i32 3, i32 0, i32 0
  %11 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %10, align 8
  %12 = icmp eq %"class.blink::ElementData"* %11, null
  br i1 %12, label %80, label %13

13:                                               ; preds = %4
  %14 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names10kStyleAttrE, align 8
  %15 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %1, i64 0, i32 0, i32 0
  %16 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %15, align 8
  %17 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %14, i64 0, i32 0, i32 0
  %18 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %17, align 8
  %19 = icmp ne %"class.blink::QualifiedName::QualifiedNameImpl"* %16, %18
  %20 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %11, i64 0, i32 0, i32 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = and i32 %21, 1073741824
  %23 = icmp eq i32 %22, 0
  %24 = or i1 %19, %23
  br i1 %24, label %26, label %25, !prof !21

25:                                               ; preds = %13
  tail call void @_ZNK5blink7Element33SynchronizeStyleAttributeInternalEv(%"class.blink::Element"* %0) #7
  br label %30

26:                                               ; preds = %13
  %27 = icmp slt i32 %21, 0
  br i1 %27, label %28, label %30, !prof !3

28:                                               ; preds = %26
  %29 = bitcast %"class.blink::Element"* %0 to %"class.blink::SVGElement"*
  tail call void @_ZNK5blink10SVGElement23SynchronizeSVGAttributeERKNS_13QualifiedNameE(%"class.blink::SVGElement"* %29, %"class.blink::QualifiedName"* dereferenceable(8) %1) #7
  br label %30

30:                                               ; preds = %25, %26, %28
  %31 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %10, align 8
  %32 = icmp eq %"class.blink::ElementData"* %31, null
  br i1 %32, label %80, label %33

33:                                               ; preds = %30
  %34 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %31, i64 0, i32 0, i32 0, i32 0
  %35 = load i32, i32* %34, align 4
  %36 = and i32 %35, 1
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %45, label %38

38:                                               ; preds = %33
  %39 = bitcast %"class.blink::ElementData"* %31 to %"class.blink::UniqueElementData"*
  %40 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %31, i64 1, i32 1
  %41 = bitcast %"class.blink::Member.14"* %40 to %"class.blink::Attribute"**
  %42 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %41, align 8
  %43 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %39, i64 0, i32 2, i32 0, i32 0, i32 2
  %44 = load i32, i32* %43, align 4
  br label %50

45:                                               ; preds = %33
  %46 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %31, i64 1
  %47 = bitcast %"class.blink::ElementData"* %46 to %"class.blink::Attribute"*
  %48 = lshr i32 %35, 1
  %49 = and i32 %48, 268435455
  br label %50

50:                                               ; preds = %38, %45
  %51 = phi %"class.blink::Attribute"* [ %47, %45 ], [ %42, %38 ]
  %52 = phi i32 [ %49, %45 ], [ %44, %38 ]
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %51, i64 %53
  %55 = icmp eq i32 %52, 0
  br i1 %55, label %80, label %56

56:                                               ; preds = %50
  %57 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %15, align 8
  %58 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %57, i64 0, i32 3, i32 0, i32 0, i32 0
  %59 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %57, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %60

60:                                               ; preds = %76, %56
  %61 = phi %"class.blink::Attribute"* [ %51, %56 ], [ %77, %76 ]
  %62 = phi i32 [ 0, %56 ], [ %78, %76 ]
  %63 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %61, i64 0, i32 0, i32 0, i32 0
  %64 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %63, align 8
  %65 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %64, %57
  br i1 %65, label %80, label %66

66:                                               ; preds = %60
  %67 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %64, i64 0, i32 3, i32 0, i32 0, i32 0
  %68 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %67, align 8
  %69 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %58, align 8
  %70 = icmp eq %"class.WTF::StringImpl"* %68, %69
  br i1 %70, label %71, label %76

71:                                               ; preds = %66
  %72 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %64, i64 0, i32 4, i32 0, i32 0, i32 0
  %73 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %72, align 8
  %74 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  %75 = icmp eq %"class.WTF::StringImpl"* %73, %74
  br i1 %75, label %80, label %76

76:                                               ; preds = %71, %66
  %77 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %61, i64 1
  %78 = add i32 %62, 1
  %79 = icmp eq %"class.blink::Attribute"* %77, %54
  br i1 %79, label %80, label %60

80:                                               ; preds = %76, %71, %60, %4, %50, %30
  %81 = phi i32 [ -1, %30 ], [ -1, %50 ], [ -1, %4 ], [ -1, %76 ], [ %62, %71 ], [ %62, %60 ]
  %82 = bitcast %"class.WTF::AtomicString"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %82) #7
  %83 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %9, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* inttoptr (i64 -6148914691236517206 to %"class.WTF::StringImpl"*), %"class.WTF::StringImpl"** %83, align 8
  %84 = tail call i32 @_ZNK5blink7Element31ExpectedTrustedTypeForAttributeERKNS_13QualifiedNameE(%"class.blink::Element"* %0, %"class.blink::QualifiedName"* dereferenceable(8) %1) #7
  %85 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %86 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %85, align 8
  %87 = icmp eq %"class.WTF::StringImpl"* %86, null
  br i1 %87, label %105, label %88

88:                                               ; preds = %80
  %89 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %86, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %90 = load atomic i32, i32* %89 monotonic, align 4
  %91 = and i32 %90, 2
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %105

93:                                               ; preds = %88
  %94 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %86, i64 0, i32 0
  %95 = load i32, i32* %94, align 4
  %96 = zext i32 %95 to i33
  %97 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %96, i33 1) #7
  %98 = extractvalue { i33, i1 } %97, 1
  %99 = extractvalue { i33, i1 } %97, 0
  %100 = icmp slt i33 %99, 0
  %101 = or i1 %98, %100
  br i1 %101, label %102, label %103, !prof !3

102:                                              ; preds = %93
  tail call void @llvm.trap() #7
  unreachable

103:                                              ; preds = %93
  %104 = trunc i33 %99 to i32
  store i32 %104, i32* %94, align 4
  br label %105

105:                                              ; preds = %80, %88, %103
  %106 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %0, i64 0, i32 0, i32 0
  %107 = bitcast %"class.blink::Element"* %0 to %"class.blink::ExecutionContext"* (%"class.blink::Node"*)***
  %108 = load %"class.blink::ExecutionContext"* (%"class.blink::Node"*)**, %"class.blink::ExecutionContext"* (%"class.blink::Node"*)*** %107, align 8
  %109 = getelementptr inbounds %"class.blink::ExecutionContext"* (%"class.blink::Node"*)*, %"class.blink::ExecutionContext"* (%"class.blink::Node"*)** %108, i64 10
  %110 = load %"class.blink::ExecutionContext"* (%"class.blink::Node"*)*, %"class.blink::ExecutionContext"* (%"class.blink::Node"*)** %109, align 8
  %111 = tail call %"class.blink::ExecutionContext"* %110(%"class.blink::Node"* %106) #7
  %112 = tail call %"class.WTF::StringImpl"* @_ZN5blink20TrustedTypesCheckForENS_19SpecificTrustedTypeEN3WTF6StringEPKNS_16ExecutionContextERNS_14ExceptionStateE(i32 %84, %"class.WTF::StringImpl"* %86, %"class.blink::ExecutionContext"* %111, %"class.blink::ExceptionState"* dereferenceable(72) %3) #7
  %113 = icmp eq %"class.WTF::StringImpl"* %112, null
  br i1 %113, label %137, label %114

114:                                              ; preds = %105
  %115 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %112, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %116 = load atomic i32, i32* %115 acquire, align 4
  %117 = and i32 %116, 4
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %135, label %119

119:                                              ; preds = %114
  %120 = load atomic i32, i32* %115 monotonic, align 4
  %121 = and i32 %120, 2
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %123, label %139

123:                                              ; preds = %119
  %124 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %112, i64 0, i32 0
  %125 = load i32, i32* %124, align 4
  %126 = zext i32 %125 to i33
  %127 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %126, i33 1) #7
  %128 = extractvalue { i33, i1 } %127, 1
  %129 = extractvalue { i33, i1 } %127, 0
  %130 = icmp slt i33 %129, 0
  %131 = or i1 %128, %130
  br i1 %131, label %132, label %133, !prof !3

132:                                              ; preds = %123
  tail call void @llvm.trap() #7
  unreachable

133:                                              ; preds = %123
  %134 = trunc i33 %129 to i32
  store i32 %134, i32* %124, align 4
  br label %139

135:                                              ; preds = %114
  %136 = tail call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %112) #7
  br label %139

137:                                              ; preds = %105
  %138 = bitcast %"class.WTF::AtomicString"* %9 to i64*
  store i64 0, i64* %138, align 8
  br label %154

139:                                              ; preds = %119, %133, %135
  %140 = phi %"class.WTF::StringImpl"* [ %112, %133 ], [ %112, %119 ], [ %136, %135 ]
  %141 = ptrtoint %"class.WTF::StringImpl"* %140 to i64
  %142 = bitcast %"class.WTF::AtomicString"* %9 to i64*
  store i64 %141, i64* %142, align 8
  %143 = load atomic i32, i32* %115 monotonic, align 4
  %144 = and i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %112, i64 0, i32 0
  %147 = load i32, i32* %146, align 4
  br i1 %145, label %148, label %150

148:                                              ; preds = %139
  %149 = add i32 %147, -1
  store i32 %149, i32* %146, align 4
  br label %150

150:                                              ; preds = %148, %139
  %151 = phi i32 [ %149, %148 ], [ %147, %139 ]
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %153, label %154

153:                                              ; preds = %150
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %112) #7
  br label %154

154:                                              ; preds = %137, %150, %153
  %155 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %156 = load i32, i32* %155, align 8
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %158, label %312

158:                                              ; preds = %154
  %159 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %83, align 8
  %160 = icmp eq %"class.WTF::StringImpl"* %159, null
  %161 = icmp eq i32 %81, -1
  br i1 %160, label %162, label %164

162:                                              ; preds = %158
  br i1 %161, label %328, label %163

163:                                              ; preds = %162
  tail call void @_ZN5blink7Element23RemoveAttributeInternalEjNS0_30SynchronizationOfLazyAttributeE(%"class.blink::Element"* %0, i32 %81, i32 0) #7
  br label %312

164:                                              ; preds = %158
  br i1 %161, label %165, label %166

165:                                              ; preds = %164
  call void @_ZN5blink7Element23AppendAttributeInternalERKNS_13QualifiedNameERKN3WTF12AtomicStringENS0_30SynchronizationOfLazyAttributeE(%"class.blink::Element"* %0, %"class.blink::QualifiedName"* dereferenceable(8) %1, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %9, i32 0) #7
  br label %312

166:                                              ; preds = %164
  %167 = bitcast { %"class.blink::Attribute"*, i32 }* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %167) #7
  %168 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %10, align 8
  %169 = icmp eq %"class.blink::ElementData"* %168, null
  br i1 %169, label %170, label %172

170:                                              ; preds = %166
  %171 = load i32, i32* null, align 536870912
  br label %184

172:                                              ; preds = %166
  %173 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %168, i64 0, i32 0, i32 0, i32 0
  %174 = load i32, i32* %173, align 4
  %175 = and i32 %174, 1
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %184, label %177

177:                                              ; preds = %172
  %178 = bitcast %"class.blink::ElementData"* %168 to %"class.blink::UniqueElementData"*
  %179 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %168, i64 1, i32 1
  %180 = bitcast %"class.blink::Member.14"* %179 to %"class.blink::Attribute"**
  %181 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %180, align 8
  %182 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %178, i64 0, i32 2, i32 0, i32 0, i32 2
  %183 = load i32, i32* %182, align 4
  br label %190

184:                                              ; preds = %172, %170
  %185 = phi i32 [ %171, %170 ], [ %174, %172 ]
  %186 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %168, i64 1
  %187 = bitcast %"class.blink::ElementData"* %186 to %"class.blink::Attribute"*
  %188 = lshr i32 %185, 1
  %189 = and i32 %188, 268435455
  br label %190

190:                                              ; preds = %184, %177
  %191 = phi %"class.blink::Attribute"* [ %187, %184 ], [ %181, %177 ]
  %192 = phi i32 [ %189, %184 ], [ %183, %177 ]
  %193 = getelementptr inbounds { %"class.blink::Attribute"*, i32 }, { %"class.blink::Attribute"*, i32 }* %5, i64 0, i32 0
  store %"class.blink::Attribute"* %191, %"class.blink::Attribute"** %193, align 8
  %194 = getelementptr inbounds { %"class.blink::Attribute"*, i32 }, { %"class.blink::Attribute"*, i32 }* %5, i64 0, i32 1
  store i32 %192, i32* %194, align 8
  %195 = bitcast { %"class.blink::Attribute"*, i32 }* %5 to %"class.blink::AttributeCollectionGeneric"*
  %196 = call dereferenceable(16) %"class.blink::Attribute"* @_ZNK5blink26AttributeCollectionGenericIKNS_14AttributeArrayES2_E2atEj(%"class.blink::AttributeCollectionGeneric"* nonnull %195, i32 %81) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %167) #7
  %197 = bitcast %"class.WTF::AtomicString"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %197) #7
  %198 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %6, i64 0, i32 0, i32 0, i32 0
  %199 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %196, i64 0, i32 1, i32 0, i32 0, i32 0
  %200 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %199, align 8
  store %"class.WTF::StringImpl"* %200, %"class.WTF::StringImpl"** %198, align 8
  %201 = icmp eq %"class.WTF::StringImpl"* %200, null
  br i1 %201, label %219, label %202

202:                                              ; preds = %190
  %203 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %200, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %204 = load atomic i32, i32* %203 monotonic, align 4
  %205 = and i32 %204, 2
  %206 = icmp eq i32 %205, 0
  br i1 %206, label %207, label %219

207:                                              ; preds = %202
  %208 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %200, i64 0, i32 0
  %209 = load i32, i32* %208, align 4
  %210 = zext i32 %209 to i33
  %211 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %210, i33 1) #7
  %212 = extractvalue { i33, i1 } %211, 1
  %213 = extractvalue { i33, i1 } %211, 0
  %214 = icmp slt i33 %213, 0
  %215 = or i1 %212, %214
  br i1 %215, label %216, label %217, !prof !3

216:                                              ; preds = %207
  call void @llvm.trap() #7
  unreachable

217:                                              ; preds = %207
  %218 = trunc i33 %213 to i32
  store i32 %218, i32* %208, align 4
  br label %219

219:                                              ; preds = %217, %202, %190
  %220 = bitcast %"class.blink::QualifiedName"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %220) #7
  %221 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %7, i64 0, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* inttoptr (i64 -6148914691236517206 to %"class.blink::QualifiedName::QualifiedNameImpl"*), %"class.blink::QualifiedName::QualifiedNameImpl"** %221, align 8
  %222 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %196, i64 0, i32 0, i32 0, i32 0
  %223 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %222, align 8
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %223, %"class.blink::QualifiedName::QualifiedNameImpl"** %221, align 8
  %224 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %223, null
  br i1 %224, label %232, label %225

225:                                              ; preds = %219
  %226 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %223, i64 0, i32 1
  %227 = load i32, i32* %226, align 4
  %228 = and i32 %227, 16777216
  %229 = icmp eq i32 %228, 0
  br i1 %229, label %230, label %232

230:                                              ; preds = %225
  %231 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %223, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %231) #7
  br label %232

232:                                              ; preds = %230, %225, %219
  call void @_ZN5blink7Element19WillModifyAttributeERKNS_13QualifiedNameERKN3WTF12AtomicStringES7_(%"class.blink::Element"* %0, %"class.blink::QualifiedName"* nonnull dereferenceable(8) %7, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %6, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %9) #7
  %233 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %83, align 8
  %234 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %198, align 8
  %235 = icmp eq %"class.WTF::StringImpl"* %233, %234
  br i1 %235, label %295, label %236

236:                                              ; preds = %232
  %237 = bitcast %"class.blink::MutableAttributeCollection"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %237) #7
  %238 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %10, align 8
  %239 = icmp eq %"class.blink::ElementData"* %238, null
  br i1 %239, label %246, label %240

240:                                              ; preds = %236
  %241 = bitcast %"class.blink::ElementData"* %238 to %"class.blink::UniqueElementData"*
  %242 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %238, i64 0, i32 0, i32 0, i32 0
  %243 = load i32, i32* %242, align 4
  %244 = and i32 %243, 1
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %246, label %249

246:                                              ; preds = %240, %236
  call void @_ZN5blink7Element23CreateUniqueElementDataEv(%"class.blink::Element"* %0) #7
  %247 = bitcast %"class.blink::ElementData"** %10 to %"class.blink::UniqueElementData"**
  %248 = load %"class.blink::UniqueElementData"*, %"class.blink::UniqueElementData"** %247, align 8
  br label %249

249:                                              ; preds = %246, %240
  %250 = phi %"class.blink::UniqueElementData"* [ %248, %246 ], [ %241, %240 ]
  %251 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %250, i64 0, i32 2
  %252 = getelementptr inbounds %"class.blink::MutableAttributeCollection", %"class.blink::MutableAttributeCollection"* %8, i64 0, i32 0, i32 0
  store %"class.WTF::Vector.704"* %251, %"class.WTF::Vector.704"** %252, align 8
  %253 = getelementptr inbounds %"class.blink::MutableAttributeCollection", %"class.blink::MutableAttributeCollection"* %8, i64 0, i32 0
  %254 = call dereferenceable(16) %"class.blink::Attribute"* @_ZNK5blink26AttributeCollectionGenericIN3WTF6VectorINS_9AttributeELj4ENS1_18PartitionAllocatorEEERS5_E2atEj(%"class.blink::AttributeCollectionGeneric.1243"* nonnull %253, i32 %81) #7
  %255 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %254, i64 0, i32 1
  %256 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %83, align 8
  %257 = icmp eq %"class.WTF::StringImpl"* %256, null
  br i1 %257, label %275, label %258

258:                                              ; preds = %249
  %259 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %256, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %260 = load atomic i32, i32* %259 monotonic, align 4
  %261 = and i32 %260, 2
  %262 = icmp eq i32 %261, 0
  br i1 %262, label %263, label %275

263:                                              ; preds = %258
  %264 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %256, i64 0, i32 0
  %265 = load i32, i32* %264, align 4
  %266 = zext i32 %265 to i33
  %267 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %266, i33 1) #7
  %268 = extractvalue { i33, i1 } %267, 1
  %269 = extractvalue { i33, i1 } %267, 0
  %270 = icmp slt i33 %269, 0
  %271 = or i1 %268, %270
  br i1 %271, label %272, label %273, !prof !3

272:                                              ; preds = %263
  call void @llvm.trap() #7
  unreachable

273:                                              ; preds = %263
  %274 = trunc i33 %269 to i32
  store i32 %274, i32* %264, align 4
  br label %275

275:                                              ; preds = %273, %258, %249
  %276 = ptrtoint %"class.WTF::StringImpl"* %256 to i64
  %277 = bitcast %"class.WTF::AtomicString"* %255 to i64*
  %278 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %255, i64 0, i32 0, i32 0, i32 0
  %279 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %278, align 8
  store i64 %276, i64* %277, align 8
  %280 = icmp eq %"class.WTF::StringImpl"* %279, null
  br i1 %280, label %294, label %281

281:                                              ; preds = %275
  %282 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %279, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %283 = load atomic i32, i32* %282 monotonic, align 4
  %284 = and i32 %283, 2
  %285 = icmp eq i32 %284, 0
  %286 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %279, i64 0, i32 0
  %287 = load i32, i32* %286, align 4
  br i1 %285, label %288, label %290

288:                                              ; preds = %281
  %289 = add i32 %287, -1
  store i32 %289, i32* %286, align 4
  br label %290

290:                                              ; preds = %288, %281
  %291 = phi i32 [ %289, %288 ], [ %287, %281 ]
  %292 = icmp eq i32 %291, 0
  br i1 %292, label %293, label %294

293:                                              ; preds = %290
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %279) #7
  br label %294

294:                                              ; preds = %293, %290, %275
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %237) #7
  br label %295

295:                                              ; preds = %294, %232
  call void @_ZN5blink7Element18DidModifyAttributeERKNS_13QualifiedNameERKN3WTF12AtomicStringES7_(%"class.blink::Element"* %0, %"class.blink::QualifiedName"* nonnull dereferenceable(8) %7, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %6, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %9) #7
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* nonnull %7) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %220) #7
  %296 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %198, align 8
  %297 = icmp eq %"class.WTF::StringImpl"* %296, null
  br i1 %297, label %311, label %298

298:                                              ; preds = %295
  %299 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %296, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %300 = load atomic i32, i32* %299 monotonic, align 4
  %301 = and i32 %300, 2
  %302 = icmp eq i32 %301, 0
  %303 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %296, i64 0, i32 0
  %304 = load i32, i32* %303, align 4
  br i1 %302, label %305, label %307

305:                                              ; preds = %298
  %306 = add i32 %304, -1
  store i32 %306, i32* %303, align 4
  br label %307

307:                                              ; preds = %305, %298
  %308 = phi i32 [ %306, %305 ], [ %304, %298 ]
  %309 = icmp eq i32 %308, 0
  br i1 %309, label %310, label %311

310:                                              ; preds = %307
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %296) #7
  br label %311

311:                                              ; preds = %310, %307, %295
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %197) #7
  br label %312

312:                                              ; preds = %154, %311, %165, %163
  %313 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %83, align 8
  %314 = icmp eq %"class.WTF::StringImpl"* %313, null
  br i1 %314, label %328, label %315

315:                                              ; preds = %312
  %316 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %313, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %317 = load atomic i32, i32* %316 monotonic, align 4
  %318 = and i32 %317, 2
  %319 = icmp eq i32 %318, 0
  %320 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %313, i64 0, i32 0
  %321 = load i32, i32* %320, align 4
  br i1 %319, label %322, label %324

322:                                              ; preds = %315
  %323 = add i32 %321, -1
  store i32 %323, i32* %320, align 4
  br label %324

324:                                              ; preds = %322, %315
  %325 = phi i32 [ %323, %322 ], [ %321, %315 ]
  %326 = icmp eq i32 %325, 0
  br i1 %326, label %327, label %328

327:                                              ; preds = %324
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %313) #7
  br label %328

328:                                              ; preds = %162, %312, %324, %327
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %82) #7
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN5blink20TrustedTypesCheckForENS_19SpecificTrustedTypeEN3WTF6StringEPKNS_16ExecutionContextERNS_14ExceptionStateE(i32, %"class.WTF::StringImpl"*, %"class.blink::ExecutionContext"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #2

declare i32 @_ZNK5blink7Element31ExpectedTrustedTypeForAttributeERKNS_13QualifiedNameE(%"class.blink::Element"*, %"class.blink::QualifiedName"* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink7Element28SetSynchronizedLazyAttributeERKNS_13QualifiedNameERKN3WTF12AtomicStringE(%"class.blink::Element"*, %"class.blink::QualifiedName"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = alloca { %"class.blink::Attribute"*, i32 }, align 8
  %5 = alloca %"class.blink::QualifiedName", align 8
  %6 = alloca %"class.blink::MutableAttributeCollection", align 8
  %7 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %0, i64 0, i32 3, i32 0, i32 0
  %8 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %7, align 8
  %9 = icmp eq %"class.blink::ElementData"* %8, null
  br i1 %9, label %58, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %8, i64 0, i32 0, i32 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = and i32 %12, 1
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %22, label %15

15:                                               ; preds = %10
  %16 = bitcast %"class.blink::ElementData"* %8 to %"class.blink::UniqueElementData"*
  %17 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %8, i64 1, i32 1
  %18 = bitcast %"class.blink::Member.14"* %17 to %"class.blink::Attribute"**
  %19 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %18, align 8
  %20 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %16, i64 0, i32 2, i32 0, i32 0, i32 2
  %21 = load i32, i32* %20, align 4
  br label %27

22:                                               ; preds = %10
  %23 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %8, i64 1
  %24 = bitcast %"class.blink::ElementData"* %23 to %"class.blink::Attribute"*
  %25 = lshr i32 %12, 1
  %26 = and i32 %25, 268435455
  br label %27

27:                                               ; preds = %15, %22
  %28 = phi %"class.blink::Attribute"* [ %24, %22 ], [ %19, %15 ]
  %29 = phi i32 [ %26, %22 ], [ %21, %15 ]
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %28, i64 %30
  %32 = icmp eq i32 %29, 0
  br i1 %32, label %58, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %1, i64 0, i32 0, i32 0
  %35 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %34, align 8
  %36 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %35, i64 0, i32 3, i32 0, i32 0, i32 0
  %37 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %35, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %38

38:                                               ; preds = %54, %33
  %39 = phi %"class.blink::Attribute"* [ %28, %33 ], [ %55, %54 ]
  %40 = phi i32 [ 0, %33 ], [ %56, %54 ]
  %41 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %39, i64 0, i32 0, i32 0, i32 0
  %42 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %41, align 8
  %43 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %42, %35
  br i1 %43, label %58, label %44

44:                                               ; preds = %38
  %45 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %42, i64 0, i32 3, i32 0, i32 0, i32 0
  %46 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %45, align 8
  %47 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %36, align 8
  %48 = icmp eq %"class.WTF::StringImpl"* %46, %47
  br i1 %48, label %49, label %54

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %42, i64 0, i32 4, i32 0, i32 0, i32 0
  %51 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %50, align 8
  %52 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %37, align 8
  %53 = icmp eq %"class.WTF::StringImpl"* %51, %52
  br i1 %53, label %58, label %54

54:                                               ; preds = %49, %44
  %55 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %39, i64 1
  %56 = add i32 %40, 1
  %57 = icmp eq %"class.blink::Attribute"* %55, %31
  br i1 %57, label %58, label %38

58:                                               ; preds = %54, %49, %38, %27, %3
  %59 = phi i32 [ -1, %3 ], [ -1, %27 ], [ -1, %54 ], [ %40, %49 ], [ %40, %38 ]
  %60 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %61 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %60, align 8
  %62 = icmp eq %"class.WTF::StringImpl"* %61, null
  %63 = icmp eq i32 %59, -1
  br i1 %62, label %64, label %66

64:                                               ; preds = %58
  br i1 %63, label %206, label %65

65:                                               ; preds = %64
  tail call void @_ZN5blink7Element23RemoveAttributeInternalEjNS0_30SynchronizationOfLazyAttributeE(%"class.blink::Element"* %0, i32 %59, i32 1) #7
  br label %206

66:                                               ; preds = %58
  br i1 %63, label %67, label %68

67:                                               ; preds = %66
  tail call void @_ZN5blink7Element23AppendAttributeInternalERKNS_13QualifiedNameERKN3WTF12AtomicStringENS0_30SynchronizationOfLazyAttributeE(%"class.blink::Element"* %0, %"class.blink::QualifiedName"* dereferenceable(8) %1, %"class.WTF::AtomicString"* dereferenceable(8) %2, i32 1) #7
  br label %206

68:                                               ; preds = %66
  %69 = bitcast { %"class.blink::Attribute"*, i32 }* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %69) #7
  br i1 %9, label %70, label %72

70:                                               ; preds = %68
  %71 = load i32, i32* null, align 536870912
  br label %84

72:                                               ; preds = %68
  %73 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %8, i64 0, i32 0, i32 0, i32 0
  %74 = load i32, i32* %73, align 4
  %75 = and i32 %74, 1
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %84, label %77

77:                                               ; preds = %72
  %78 = bitcast %"class.blink::ElementData"* %8 to %"class.blink::UniqueElementData"*
  %79 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %8, i64 1, i32 1
  %80 = bitcast %"class.blink::Member.14"* %79 to %"class.blink::Attribute"**
  %81 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %80, align 8
  %82 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %78, i64 0, i32 2, i32 0, i32 0, i32 2
  %83 = load i32, i32* %82, align 4
  br label %90

84:                                               ; preds = %72, %70
  %85 = phi i32 [ %71, %70 ], [ %74, %72 ]
  %86 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %8, i64 1
  %87 = bitcast %"class.blink::ElementData"* %86 to %"class.blink::Attribute"*
  %88 = lshr i32 %85, 1
  %89 = and i32 %88, 268435455
  br label %90

90:                                               ; preds = %84, %77
  %91 = phi %"class.blink::Attribute"* [ %87, %84 ], [ %81, %77 ]
  %92 = phi i32 [ %89, %84 ], [ %83, %77 ]
  %93 = getelementptr inbounds { %"class.blink::Attribute"*, i32 }, { %"class.blink::Attribute"*, i32 }* %4, i64 0, i32 0
  store %"class.blink::Attribute"* %91, %"class.blink::Attribute"** %93, align 8
  %94 = getelementptr inbounds { %"class.blink::Attribute"*, i32 }, { %"class.blink::Attribute"*, i32 }* %4, i64 0, i32 1
  store i32 %92, i32* %94, align 8
  %95 = bitcast { %"class.blink::Attribute"*, i32 }* %4 to %"class.blink::AttributeCollectionGeneric"*
  %96 = call dereferenceable(16) %"class.blink::Attribute"* @_ZNK5blink26AttributeCollectionGenericIKNS_14AttributeArrayES2_E2atEj(%"class.blink::AttributeCollectionGeneric"* nonnull %95, i32 %59) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %69) #7
  %97 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %96, i64 0, i32 1, i32 0, i32 0, i32 0
  %98 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %97, align 8
  %99 = icmp eq %"class.WTF::StringImpl"* %98, null
  br i1 %99, label %117, label %100

100:                                              ; preds = %90
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = load atomic i32, i32* %101 monotonic, align 4
  %103 = and i32 %102, 2
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %117

105:                                              ; preds = %100
  %106 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 0
  %107 = load i32, i32* %106, align 4
  %108 = zext i32 %107 to i33
  %109 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %108, i33 1) #7
  %110 = extractvalue { i33, i1 } %109, 1
  %111 = extractvalue { i33, i1 } %109, 0
  %112 = icmp slt i33 %111, 0
  %113 = or i1 %110, %112
  br i1 %113, label %114, label %115, !prof !3

114:                                              ; preds = %105
  call void @llvm.trap() #7
  unreachable

115:                                              ; preds = %105
  %116 = trunc i33 %111 to i32
  store i32 %116, i32* %106, align 4
  br label %117

117:                                              ; preds = %115, %100, %90
  %118 = bitcast %"class.blink::QualifiedName"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %118) #7
  %119 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %5, i64 0, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* inttoptr (i64 -6148914691236517206 to %"class.blink::QualifiedName::QualifiedNameImpl"*), %"class.blink::QualifiedName::QualifiedNameImpl"** %119, align 8
  %120 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %96, i64 0, i32 0, i32 0, i32 0
  %121 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %120, align 8
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %121, %"class.blink::QualifiedName::QualifiedNameImpl"** %119, align 8
  %122 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %121, null
  br i1 %122, label %130, label %123

123:                                              ; preds = %117
  %124 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %121, i64 0, i32 1
  %125 = load i32, i32* %124, align 4
  %126 = and i32 %125, 16777216
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %128, label %130

128:                                              ; preds = %123
  %129 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %121, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %129) #7
  br label %130

130:                                              ; preds = %128, %123, %117
  %131 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %60, align 8
  %132 = icmp eq %"class.WTF::StringImpl"* %131, %98
  br i1 %132, label %192, label %133

133:                                              ; preds = %130
  %134 = bitcast %"class.blink::MutableAttributeCollection"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %134) #7
  %135 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %7, align 8
  %136 = icmp eq %"class.blink::ElementData"* %135, null
  br i1 %136, label %143, label %137

137:                                              ; preds = %133
  %138 = bitcast %"class.blink::ElementData"* %135 to %"class.blink::UniqueElementData"*
  %139 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %135, i64 0, i32 0, i32 0, i32 0
  %140 = load i32, i32* %139, align 4
  %141 = and i32 %140, 1
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %143, label %146

143:                                              ; preds = %137, %133
  call void @_ZN5blink7Element23CreateUniqueElementDataEv(%"class.blink::Element"* %0) #7
  %144 = bitcast %"class.blink::ElementData"** %7 to %"class.blink::UniqueElementData"**
  %145 = load %"class.blink::UniqueElementData"*, %"class.blink::UniqueElementData"** %144, align 8
  br label %146

146:                                              ; preds = %143, %137
  %147 = phi %"class.blink::UniqueElementData"* [ %145, %143 ], [ %138, %137 ]
  %148 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %147, i64 0, i32 2
  %149 = getelementptr inbounds %"class.blink::MutableAttributeCollection", %"class.blink::MutableAttributeCollection"* %6, i64 0, i32 0, i32 0
  store %"class.WTF::Vector.704"* %148, %"class.WTF::Vector.704"** %149, align 8
  %150 = getelementptr inbounds %"class.blink::MutableAttributeCollection", %"class.blink::MutableAttributeCollection"* %6, i64 0, i32 0
  %151 = call dereferenceable(16) %"class.blink::Attribute"* @_ZNK5blink26AttributeCollectionGenericIN3WTF6VectorINS_9AttributeELj4ENS1_18PartitionAllocatorEEERS5_E2atEj(%"class.blink::AttributeCollectionGeneric.1243"* nonnull %150, i32 %59) #7
  %152 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %151, i64 0, i32 1
  %153 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %60, align 8
  %154 = icmp eq %"class.WTF::StringImpl"* %153, null
  br i1 %154, label %172, label %155

155:                                              ; preds = %146
  %156 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %153, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %157 = load atomic i32, i32* %156 monotonic, align 4
  %158 = and i32 %157, 2
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %160, label %172

160:                                              ; preds = %155
  %161 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %153, i64 0, i32 0
  %162 = load i32, i32* %161, align 4
  %163 = zext i32 %162 to i33
  %164 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %163, i33 1) #7
  %165 = extractvalue { i33, i1 } %164, 1
  %166 = extractvalue { i33, i1 } %164, 0
  %167 = icmp slt i33 %166, 0
  %168 = or i1 %165, %167
  br i1 %168, label %169, label %170, !prof !3

169:                                              ; preds = %160
  call void @llvm.trap() #7
  unreachable

170:                                              ; preds = %160
  %171 = trunc i33 %166 to i32
  store i32 %171, i32* %161, align 4
  br label %172

172:                                              ; preds = %170, %155, %146
  %173 = ptrtoint %"class.WTF::StringImpl"* %153 to i64
  %174 = bitcast %"class.WTF::AtomicString"* %152 to i64*
  %175 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %152, i64 0, i32 0, i32 0, i32 0
  %176 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %175, align 8
  store i64 %173, i64* %174, align 8
  %177 = icmp eq %"class.WTF::StringImpl"* %176, null
  br i1 %177, label %191, label %178

178:                                              ; preds = %172
  %179 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %176, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %180 = load atomic i32, i32* %179 monotonic, align 4
  %181 = and i32 %180, 2
  %182 = icmp eq i32 %181, 0
  %183 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %176, i64 0, i32 0
  %184 = load i32, i32* %183, align 4
  br i1 %182, label %185, label %187

185:                                              ; preds = %178
  %186 = add i32 %184, -1
  store i32 %186, i32* %183, align 4
  br label %187

187:                                              ; preds = %185, %178
  %188 = phi i32 [ %186, %185 ], [ %184, %178 ]
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %190, label %191

190:                                              ; preds = %187
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %176) #7
  br label %191

191:                                              ; preds = %190, %187, %172
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %134) #7
  br label %192

192:                                              ; preds = %191, %130
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %118) #7
  br i1 %99, label %206, label %193

193:                                              ; preds = %192
  %194 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %195 = load atomic i32, i32* %194 monotonic, align 4
  %196 = and i32 %195, 2
  %197 = icmp eq i32 %196, 0
  %198 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 0
  %199 = load i32, i32* %198, align 4
  br i1 %197, label %200, label %202

200:                                              ; preds = %193
  %201 = add i32 %199, -1
  store i32 %201, i32* %198, align 4
  br label %202

202:                                              ; preds = %200, %193
  %203 = phi i32 [ %201, %200 ], [ %199, %193 ]
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %205, label %206

205:                                              ; preds = %202
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %98) #7
  br label %206

206:                                              ; preds = %192, %202, %205, %64, %65, %67
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink7Element18SetAttributeHintedERKN3WTF12AtomicStringENS1_17AtomicStringTable10WeakResultES4_RNS_14ExceptionStateE(%"class.blink::Element"*, %"class.WTF::AtomicString"* dereferenceable(8), i64, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8), %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %6 = alloca { %"class.blink::Attribute"*, i32 }, align 8
  %7 = alloca %"class.WTF::AtomicString", align 8
  %8 = alloca %"class.blink::QualifiedName", align 8
  %9 = alloca %"class.blink::MutableAttributeCollection", align 8
  %10 = alloca %"class.blink::QualifiedName", align 8
  %11 = alloca %"class.WTF::StringView", align 8
  %12 = alloca %"class.WTF::String", align 8
  %13 = alloca %"class.WTF::StringAppend", align 8
  %14 = alloca i32, align 4
  %15 = alloca %"class.blink::QualifiedName", align 8
  %16 = alloca %"struct.std::__1::pair.697", align 8
  %17 = alloca %"class.WTF::AtomicString", align 8
  %18 = bitcast %"class.WTF::StringView"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %18) #7
  %19 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = icmp eq %"class.WTF::StringImpl"* %20, null
  br i1 %21, label %22, label %26

22:                                               ; preds = %5
  %23 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 1
  store i8* null, i8** %23, align 8
  %24 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %25 = bitcast %"class.WTF::StringView"* %11 to i64*
  store i64 %24, i64* %25, align 8
  br label %33

26:                                               ; preds = %5
  %27 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 0
  store %"class.WTF::StringImpl"* %20, %"class.WTF::StringImpl"** %27, align 8
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 1
  %31 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 1
  %32 = bitcast i8** %31 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %30, %"class.WTF::StringImpl"** %32, align 8
  br label %33

33:                                               ; preds = %22, %26
  %34 = phi i32 [ %29, %26 ], [ 0, %22 ]
  %35 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 2
  store i32 %34, i32* %35, align 8
  %36 = call zeroext i1 @_ZN5blink8Document11IsValidNameERKN3WTF10StringViewE(%"class.WTF::StringView"* nonnull dereferenceable(24) %11) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18) #7
  br i1 %36, label %186, label %37

37:                                               ; preds = %33
  %38 = bitcast %"class.WTF::String"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %38) #7
  %39 = bitcast %"class.WTF::StringAppend"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %39) #7
  %40 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %41 = icmp eq %"class.WTF::StringImpl"* %40, null
  br i1 %41, label %117, label %42

42:                                               ; preds = %37
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = and i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 0, i32 0
  %48 = load i32, i32* %47, align 4
  br i1 %46, label %49, label %59

49:                                               ; preds = %42
  %50 = zext i32 %48 to i33
  %51 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %50, i33 1) #7
  %52 = extractvalue { i33, i1 } %51, 1
  %53 = extractvalue { i33, i1 } %51, 0
  %54 = icmp slt i33 %53, 0
  %55 = or i1 %52, %54
  br i1 %55, label %56, label %57, !prof !3

56:                                               ; preds = %49
  call void @llvm.trap() #7
  unreachable

57:                                               ; preds = %49
  %58 = trunc i33 %53 to i32
  store i32 %58, i32* %47, align 4
  br label %59

59:                                               ; preds = %57, %42
  %60 = phi i32 [ %58, %57 ], [ %48, %42 ]
  %61 = load atomic i32, i32* %43 monotonic, align 4
  %62 = and i32 %61, 2
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %74

64:                                               ; preds = %59
  %65 = zext i32 %60 to i33
  %66 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %65, i33 1) #7
  %67 = extractvalue { i33, i1 } %66, 1
  %68 = extractvalue { i33, i1 } %66, 0
  %69 = icmp slt i33 %68, 0
  %70 = or i1 %67, %69
  br i1 %70, label %71, label %72, !prof !3

71:                                               ; preds = %64
  call void @llvm.trap() #7
  unreachable

72:                                               ; preds = %64
  %73 = trunc i33 %68 to i32
  store i32 %73, i32* %47, align 4
  br label %74

74:                                               ; preds = %72, %59
  %75 = phi i32 [ %73, %72 ], [ %60, %59 ]
  %76 = load atomic i32, i32* %43 monotonic, align 4
  %77 = and i32 %76, 2
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %81

79:                                               ; preds = %74
  %80 = add i32 %75, -1
  store i32 %80, i32* %47, align 4
  br label %81

81:                                               ; preds = %79, %74
  %82 = phi i32 [ %80, %79 ], [ %75, %74 ]
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %85

84:                                               ; preds = %81
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %40) #7
  br label %85

85:                                               ; preds = %81, %84
  %86 = load atomic i32, i32* %43 monotonic, align 4, !noalias !22
  %87 = and i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = load i32, i32* %47, align 4
  br i1 %88, label %90, label %100

90:                                               ; preds = %85
  %91 = zext i32 %89 to i33
  %92 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %91, i33 1) #7
  %93 = extractvalue { i33, i1 } %92, 1
  %94 = extractvalue { i33, i1 } %92, 0
  %95 = icmp slt i33 %94, 0
  %96 = or i1 %93, %95
  br i1 %96, label %97, label %98, !prof !3

97:                                               ; preds = %90
  call void @llvm.trap() #7, !noalias !22
  unreachable

98:                                               ; preds = %90
  %99 = trunc i33 %94 to i32
  store i32 %99, i32* %47, align 4, !noalias !22
  br label %100

100:                                              ; preds = %85, %98
  %101 = phi i32 [ %99, %98 ], [ %89, %85 ]
  %102 = bitcast %"class.WTF::StringAppend"* %13 to i64*
  store i64 ptrtoint ([2 x i8]* @.str to i64), i64* %102, align 8, !alias.scope !22
  %103 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %13, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %40, %"class.WTF::StringImpl"** %103, align 8, !alias.scope !22
  %104 = load atomic i32, i32* %43 monotonic, align 4, !noalias !22
  %105 = and i32 %104, 2
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %121

107:                                              ; preds = %100
  %108 = zext i32 %101 to i33
  %109 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %108, i33 1) #7
  %110 = extractvalue { i33, i1 } %109, 1
  %111 = extractvalue { i33, i1 } %109, 0
  %112 = icmp slt i33 %111, 0
  %113 = or i1 %110, %112
  br i1 %113, label %114, label %115, !prof !3

114:                                              ; preds = %107
  call void @llvm.trap() #7, !noalias !22
  unreachable

115:                                              ; preds = %107
  %116 = trunc i33 %111 to i32
  store i32 %116, i32* %47, align 4, !noalias !22
  br label %121

117:                                              ; preds = %37
  %118 = bitcast %"class.WTF::StringAppend"* %13 to i64*
  store i64 ptrtoint ([2 x i8]* @.str to i64), i64* %118, align 8, !alias.scope !22
  %119 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %13, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %119, align 8, !alias.scope !22
  %120 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %13, i64 0, i32 1
  store i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0), i8** %120, align 8, !alias.scope !22
  br label %133

121:                                              ; preds = %115, %100
  %122 = phi i32 [ %116, %115 ], [ %101, %100 ]
  %123 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %13, i64 0, i32 1
  store i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0), i8** %123, align 8, !alias.scope !22
  %124 = load atomic i32, i32* %43 monotonic, align 4, !noalias !22
  %125 = and i32 %124, 2
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %129

127:                                              ; preds = %121
  %128 = add i32 %122, -1
  store i32 %128, i32* %47, align 4, !noalias !22
  br label %129

129:                                              ; preds = %127, %121
  %130 = phi i32 [ %128, %127 ], [ %122, %121 ]
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %132, label %133

132:                                              ; preds = %129
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %40) #7, !noalias !22
  br label %133

133:                                              ; preds = %117, %129, %132
  %134 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_12AtomicStringEEES2_EcvNS_6StringEEv(%"class.WTF::StringAppend"* nonnull %13)
  %135 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %12, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %134, %"class.WTF::StringImpl"** %135, align 8
  %136 = bitcast %"class.blink::ExceptionState"* %4 to void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)***
  %137 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)**, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*** %136, align 8
  %138 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)** %137, align 8
  call void %138(%"class.blink::ExceptionState"* %4, i32 5, %"class.WTF::String"* nonnull dereferenceable(8) %12) #7
  %139 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %135, align 8
  %140 = icmp eq %"class.WTF::StringImpl"* %139, null
  br i1 %140, label %154, label %141

141:                                              ; preds = %133
  %142 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %139, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %143 = load atomic i32, i32* %142 monotonic, align 4
  %144 = and i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %139, i64 0, i32 0
  %147 = load i32, i32* %146, align 4
  br i1 %145, label %148, label %150

148:                                              ; preds = %141
  %149 = add i32 %147, -1
  store i32 %149, i32* %146, align 4
  br label %150

150:                                              ; preds = %148, %141
  %151 = phi i32 [ %149, %148 ], [ %147, %141 ]
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %153, label %154

153:                                              ; preds = %150
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %139) #7
  br label %154

154:                                              ; preds = %133, %150, %153
  %155 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %13, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %156 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %155, align 8
  %157 = icmp eq %"class.WTF::StringImpl"* %156, null
  br i1 %157, label %171, label %158

158:                                              ; preds = %154
  %159 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %156, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %160 = load atomic i32, i32* %159 monotonic, align 4
  %161 = and i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %156, i64 0, i32 0
  %164 = load i32, i32* %163, align 4
  br i1 %162, label %165, label %167

165:                                              ; preds = %158
  %166 = add i32 %164, -1
  store i32 %166, i32* %163, align 4
  br label %167

167:                                              ; preds = %165, %158
  %168 = phi i32 [ %166, %165 ], [ %164, %158 ]
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %170, label %171

170:                                              ; preds = %167
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %156) #7
  br label %171

171:                                              ; preds = %154, %167, %170
  br i1 %41, label %185, label %172

172:                                              ; preds = %171
  %173 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %174 = load atomic i32, i32* %173 monotonic, align 4
  %175 = and i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 0, i32 0
  %178 = load i32, i32* %177, align 4
  br i1 %176, label %179, label %181

179:                                              ; preds = %172
  %180 = add i32 %178, -1
  store i32 %180, i32* %177, align 4
  br label %181

181:                                              ; preds = %179, %172
  %182 = phi i32 [ %180, %179 ], [ %178, %172 ]
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %184, label %185

184:                                              ; preds = %181
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %40) #7
  br label %185

185:                                              ; preds = %171, %181, %184
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %39) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %38) #7
  br label %506

186:                                              ; preds = %33
  %187 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %0, i64 0, i32 3, i32 0, i32 0
  %188 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %187, align 8
  %189 = icmp eq %"class.blink::ElementData"* %188, null
  br i1 %189, label %210, label %190

190:                                              ; preds = %186
  %191 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %188, i64 0, i32 0, i32 0, i32 0
  %192 = load i32, i32* %191, align 4
  %193 = and i32 %192, 1073741824
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %204, label %195

195:                                              ; preds = %190
  %196 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names10kStyleAttrE, align 8
  %197 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %196, i64 0, i32 0, i32 0
  %198 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %197, align 8
  %199 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %198, i64 0, i32 3
  %200 = bitcast %"class.WTF::AtomicString"* %199 to i64*
  %201 = load i64, i64* %200, align 8
  %202 = icmp eq i64 %201, %2
  br i1 %202, label %203, label %204

203:                                              ; preds = %195
  call void @_ZNK5blink7Element33SynchronizeStyleAttributeInternalEv(%"class.blink::Element"* %0) #7
  br label %210

204:                                              ; preds = %195, %190
  %205 = icmp slt i32 %192, 0
  br i1 %205, label %206, label %210

206:                                              ; preds = %204
  %207 = bitcast %"class.blink::Element"* %0 to %"class.blink::SVGElement"*
  %208 = bitcast %"class.blink::QualifiedName"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %208) #7
  %209 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  call void @_ZN5blink13QualifiedNameC1ERKN3WTF12AtomicStringES4_S4_(%"class.blink::QualifiedName"* nonnull %10, %"class.WTF::AtomicString"* dereferenceable(8) %209, %"class.WTF::AtomicString"* dereferenceable(8) %1, %"class.WTF::AtomicString"* dereferenceable(8) %209) #7
  call void @_ZNK5blink10SVGElement23SynchronizeSVGAttributeERKNS_13QualifiedNameE(%"class.blink::SVGElement"* %207, %"class.blink::QualifiedName"* nonnull dereferenceable(8) %10) #7
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* nonnull %10) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %208) #7
  br label %210

210:                                              ; preds = %186, %203, %204, %206
  %211 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %211) #7
  store i32 -1431655766, i32* %14, align 4
  %212 = bitcast %"class.blink::QualifiedName"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %212) #7
  %213 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %15, i64 0, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* inttoptr (i64 -6148914691236517206 to %"class.blink::QualifiedName::QualifiedNameImpl"*), %"class.blink::QualifiedName::QualifiedNameImpl"** %213, align 8
  %214 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink11g_null_nameE, align 8
  %215 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %214, i64 0, i32 0, i32 0
  %216 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %215, align 8
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %216, %"class.blink::QualifiedName::QualifiedNameImpl"** %213, align 8
  %217 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %216, null
  br i1 %217, label %225, label %218

218:                                              ; preds = %210
  %219 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %216, i64 0, i32 1
  %220 = load i32, i32* %219, align 4
  %221 = and i32 %220, 16777216
  %222 = icmp eq i32 %221, 0
  br i1 %222, label %223, label %225

223:                                              ; preds = %218
  %224 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %216, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %224) #7
  br label %225

225:                                              ; preds = %210, %218, %223
  %226 = bitcast %"struct.std::__1::pair.697"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %226) #7
  call void @_ZNK5blink7Element26LookupAttributeQNameHintedERKN3WTF12AtomicStringENS1_17AtomicStringTable10WeakResultE(%"struct.std::__1::pair.697"* nonnull sret %16, %"class.blink::Element"* %0, %"class.WTF::AtomicString"* dereferenceable(8) %1, i64 %2)
  %227 = getelementptr inbounds %"struct.std::__1::pair.697", %"struct.std::__1::pair.697"* %16, i64 0, i32 0
  %228 = load i32, i32* %227, align 8
  store i32 %228, i32* %14, align 4
  %229 = getelementptr inbounds %"struct.std::__1::pair.697", %"struct.std::__1::pair.697"* %16, i64 0, i32 1, i32 0, i32 0
  %230 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %229, align 8
  %231 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %230, null
  br i1 %231, label %239, label %232

232:                                              ; preds = %225
  %233 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %230, i64 0, i32 1
  %234 = load i32, i32* %233, align 4
  %235 = and i32 %234, 16777216
  %236 = icmp eq i32 %235, 0
  br i1 %236, label %237, label %239

237:                                              ; preds = %232
  %238 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %230, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %238) #7
  br label %239

239:                                              ; preds = %237, %232, %225
  %240 = ptrtoint %"class.blink::QualifiedName::QualifiedNameImpl"* %230 to i64
  %241 = bitcast %"class.blink::QualifiedName"* %15 to i64*
  %242 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %213, align 8
  store i64 %240, i64* %241, align 8
  %243 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %242, null
  br i1 %243, label %256, label %244

244:                                              ; preds = %239
  %245 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %242, i64 0, i32 1
  %246 = load i32, i32* %245, align 4
  %247 = and i32 %246, 16777216
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %249, label %256

249:                                              ; preds = %244
  %250 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %242, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %250) #7
  %251 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %242, i64 0, i32 0, i32 0, i32 0, i32 0
  %252 = load i32, i32* %251, align 4
  %253 = icmp eq i32 %252, 0
  br i1 %253, label %254, label %256

254:                                              ; preds = %249
  call void @_ZN5blink13QualifiedName17QualifiedNameImplD1Ev(%"class.blink::QualifiedName::QualifiedNameImpl"* nonnull %242) #7
  %255 = bitcast %"class.blink::QualifiedName::QualifiedNameImpl"* %242 to i8*
  call void @free(i8* %255) #7
  br label %256

256:                                              ; preds = %239, %244, %249, %254
  %257 = getelementptr inbounds %"struct.std::__1::pair.697", %"struct.std::__1::pair.697"* %16, i64 0, i32 1
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* %257) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %226) #7
  %258 = bitcast %"class.WTF::AtomicString"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %258) #7
  %259 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %17, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* inttoptr (i64 -6148914691236517206 to %"class.WTF::StringImpl"*), %"class.WTF::StringImpl"** %259, align 8
  %260 = call i32 @_ZNK5blink7Element31ExpectedTrustedTypeForAttributeERKNS_13QualifiedNameE(%"class.blink::Element"* %0, %"class.blink::QualifiedName"* nonnull dereferenceable(8) %15) #7
  %261 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %3, i64 0, i32 0, i32 0, i32 0
  %262 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %261, align 8
  %263 = icmp eq %"class.WTF::StringImpl"* %262, null
  br i1 %263, label %281, label %264

264:                                              ; preds = %256
  %265 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %262, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %266 = load atomic i32, i32* %265 monotonic, align 4
  %267 = and i32 %266, 2
  %268 = icmp eq i32 %267, 0
  br i1 %268, label %269, label %281

269:                                              ; preds = %264
  %270 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %262, i64 0, i32 0
  %271 = load i32, i32* %270, align 4
  %272 = zext i32 %271 to i33
  %273 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %272, i33 1) #7
  %274 = extractvalue { i33, i1 } %273, 1
  %275 = extractvalue { i33, i1 } %273, 0
  %276 = icmp slt i33 %275, 0
  %277 = or i1 %274, %276
  br i1 %277, label %278, label %279, !prof !3

278:                                              ; preds = %269
  call void @llvm.trap() #7
  unreachable

279:                                              ; preds = %269
  %280 = trunc i33 %275 to i32
  store i32 %280, i32* %270, align 4
  br label %281

281:                                              ; preds = %256, %264, %279
  %282 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %0, i64 0, i32 0, i32 0
  %283 = bitcast %"class.blink::Element"* %0 to %"class.blink::ExecutionContext"* (%"class.blink::Node"*)***
  %284 = load %"class.blink::ExecutionContext"* (%"class.blink::Node"*)**, %"class.blink::ExecutionContext"* (%"class.blink::Node"*)*** %283, align 8
  %285 = getelementptr inbounds %"class.blink::ExecutionContext"* (%"class.blink::Node"*)*, %"class.blink::ExecutionContext"* (%"class.blink::Node"*)** %284, i64 10
  %286 = load %"class.blink::ExecutionContext"* (%"class.blink::Node"*)*, %"class.blink::ExecutionContext"* (%"class.blink::Node"*)** %285, align 8
  %287 = call %"class.blink::ExecutionContext"* %286(%"class.blink::Node"* %282) #7
  %288 = call %"class.WTF::StringImpl"* @_ZN5blink20TrustedTypesCheckForENS_19SpecificTrustedTypeEN3WTF6StringEPKNS_16ExecutionContextERNS_14ExceptionStateE(i32 %260, %"class.WTF::StringImpl"* %262, %"class.blink::ExecutionContext"* %287, %"class.blink::ExceptionState"* dereferenceable(72) %4) #7
  %289 = icmp eq %"class.WTF::StringImpl"* %288, null
  br i1 %289, label %313, label %290

290:                                              ; preds = %281
  %291 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %288, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %292 = load atomic i32, i32* %291 acquire, align 4
  %293 = and i32 %292, 4
  %294 = icmp eq i32 %293, 0
  br i1 %294, label %311, label %295

295:                                              ; preds = %290
  %296 = load atomic i32, i32* %291 monotonic, align 4
  %297 = and i32 %296, 2
  %298 = icmp eq i32 %297, 0
  br i1 %298, label %299, label %315

299:                                              ; preds = %295
  %300 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %288, i64 0, i32 0
  %301 = load i32, i32* %300, align 4
  %302 = zext i32 %301 to i33
  %303 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %302, i33 1) #7
  %304 = extractvalue { i33, i1 } %303, 1
  %305 = extractvalue { i33, i1 } %303, 0
  %306 = icmp slt i33 %305, 0
  %307 = or i1 %304, %306
  br i1 %307, label %308, label %309, !prof !3

308:                                              ; preds = %299
  call void @llvm.trap() #7
  unreachable

309:                                              ; preds = %299
  %310 = trunc i33 %305 to i32
  store i32 %310, i32* %300, align 4
  br label %315

311:                                              ; preds = %290
  %312 = call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %288) #7
  br label %315

313:                                              ; preds = %281
  %314 = bitcast %"class.WTF::AtomicString"* %17 to i64*
  store i64 0, i64* %314, align 8
  br label %330

315:                                              ; preds = %295, %309, %311
  %316 = phi %"class.WTF::StringImpl"* [ %288, %309 ], [ %288, %295 ], [ %312, %311 ]
  %317 = ptrtoint %"class.WTF::StringImpl"* %316 to i64
  %318 = bitcast %"class.WTF::AtomicString"* %17 to i64*
  store i64 %317, i64* %318, align 8
  %319 = load atomic i32, i32* %291 monotonic, align 4
  %320 = and i32 %319, 2
  %321 = icmp eq i32 %320, 0
  %322 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %288, i64 0, i32 0
  %323 = load i32, i32* %322, align 4
  br i1 %321, label %324, label %326

324:                                              ; preds = %315
  %325 = add i32 %323, -1
  store i32 %325, i32* %322, align 4
  br label %326

326:                                              ; preds = %324, %315
  %327 = phi i32 [ %325, %324 ], [ %323, %315 ]
  %328 = icmp eq i32 %327, 0
  br i1 %328, label %329, label %330

329:                                              ; preds = %326
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %288) #7
  br label %330

330:                                              ; preds = %313, %326, %329
  %331 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %4, i64 0, i32 4
  %332 = load i32, i32* %331, align 8
  %333 = icmp eq i32 %332, 0
  br i1 %333, label %334, label %489

334:                                              ; preds = %330
  %335 = load i32, i32* %14, align 4
  %336 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %259, align 8
  %337 = icmp eq %"class.WTF::StringImpl"* %336, null
  %338 = icmp eq i32 %335, -1
  br i1 %337, label %339, label %341

339:                                              ; preds = %334
  br i1 %338, label %505, label %340

340:                                              ; preds = %339
  call void @_ZN5blink7Element23RemoveAttributeInternalEjNS0_30SynchronizationOfLazyAttributeE(%"class.blink::Element"* %0, i32 %335, i32 0) #7
  br label %489

341:                                              ; preds = %334
  br i1 %338, label %342, label %343

342:                                              ; preds = %341
  call void @_ZN5blink7Element23AppendAttributeInternalERKNS_13QualifiedNameERKN3WTF12AtomicStringENS0_30SynchronizationOfLazyAttributeE(%"class.blink::Element"* %0, %"class.blink::QualifiedName"* nonnull dereferenceable(8) %15, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %17, i32 0) #7
  br label %489

343:                                              ; preds = %341
  %344 = bitcast { %"class.blink::Attribute"*, i32 }* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %344) #7
  %345 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %187, align 8
  %346 = icmp eq %"class.blink::ElementData"* %345, null
  br i1 %346, label %347, label %349

347:                                              ; preds = %343
  %348 = load i32, i32* null, align 536870912
  br label %361

349:                                              ; preds = %343
  %350 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %345, i64 0, i32 0, i32 0, i32 0
  %351 = load i32, i32* %350, align 4
  %352 = and i32 %351, 1
  %353 = icmp eq i32 %352, 0
  br i1 %353, label %361, label %354

354:                                              ; preds = %349
  %355 = bitcast %"class.blink::ElementData"* %345 to %"class.blink::UniqueElementData"*
  %356 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %345, i64 1, i32 1
  %357 = bitcast %"class.blink::Member.14"* %356 to %"class.blink::Attribute"**
  %358 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %357, align 8
  %359 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %355, i64 0, i32 2, i32 0, i32 0, i32 2
  %360 = load i32, i32* %359, align 4
  br label %367

361:                                              ; preds = %349, %347
  %362 = phi i32 [ %348, %347 ], [ %351, %349 ]
  %363 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %345, i64 1
  %364 = bitcast %"class.blink::ElementData"* %363 to %"class.blink::Attribute"*
  %365 = lshr i32 %362, 1
  %366 = and i32 %365, 268435455
  br label %367

367:                                              ; preds = %361, %354
  %368 = phi %"class.blink::Attribute"* [ %364, %361 ], [ %358, %354 ]
  %369 = phi i32 [ %366, %361 ], [ %360, %354 ]
  %370 = getelementptr inbounds { %"class.blink::Attribute"*, i32 }, { %"class.blink::Attribute"*, i32 }* %6, i64 0, i32 0
  store %"class.blink::Attribute"* %368, %"class.blink::Attribute"** %370, align 8
  %371 = getelementptr inbounds { %"class.blink::Attribute"*, i32 }, { %"class.blink::Attribute"*, i32 }* %6, i64 0, i32 1
  store i32 %369, i32* %371, align 8
  %372 = bitcast { %"class.blink::Attribute"*, i32 }* %6 to %"class.blink::AttributeCollectionGeneric"*
  %373 = call dereferenceable(16) %"class.blink::Attribute"* @_ZNK5blink26AttributeCollectionGenericIKNS_14AttributeArrayES2_E2atEj(%"class.blink::AttributeCollectionGeneric"* nonnull %372, i32 %335) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %344) #7
  %374 = bitcast %"class.WTF::AtomicString"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %374) #7
  %375 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %7, i64 0, i32 0, i32 0, i32 0
  %376 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %373, i64 0, i32 1, i32 0, i32 0, i32 0
  %377 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %376, align 8
  store %"class.WTF::StringImpl"* %377, %"class.WTF::StringImpl"** %375, align 8
  %378 = icmp eq %"class.WTF::StringImpl"* %377, null
  br i1 %378, label %396, label %379

379:                                              ; preds = %367
  %380 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %377, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %381 = load atomic i32, i32* %380 monotonic, align 4
  %382 = and i32 %381, 2
  %383 = icmp eq i32 %382, 0
  br i1 %383, label %384, label %396

384:                                              ; preds = %379
  %385 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %377, i64 0, i32 0
  %386 = load i32, i32* %385, align 4
  %387 = zext i32 %386 to i33
  %388 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %387, i33 1) #7
  %389 = extractvalue { i33, i1 } %388, 1
  %390 = extractvalue { i33, i1 } %388, 0
  %391 = icmp slt i33 %390, 0
  %392 = or i1 %389, %391
  br i1 %392, label %393, label %394, !prof !3

393:                                              ; preds = %384
  call void @llvm.trap() #7
  unreachable

394:                                              ; preds = %384
  %395 = trunc i33 %390 to i32
  store i32 %395, i32* %385, align 4
  br label %396

396:                                              ; preds = %394, %379, %367
  %397 = bitcast %"class.blink::QualifiedName"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %397) #7
  %398 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %8, i64 0, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* inttoptr (i64 -6148914691236517206 to %"class.blink::QualifiedName::QualifiedNameImpl"*), %"class.blink::QualifiedName::QualifiedNameImpl"** %398, align 8
  %399 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %373, i64 0, i32 0, i32 0, i32 0
  %400 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %399, align 8
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %400, %"class.blink::QualifiedName::QualifiedNameImpl"** %398, align 8
  %401 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %400, null
  br i1 %401, label %409, label %402

402:                                              ; preds = %396
  %403 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %400, i64 0, i32 1
  %404 = load i32, i32* %403, align 4
  %405 = and i32 %404, 16777216
  %406 = icmp eq i32 %405, 0
  br i1 %406, label %407, label %409

407:                                              ; preds = %402
  %408 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %400, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %408) #7
  br label %409

409:                                              ; preds = %407, %402, %396
  call void @_ZN5blink7Element19WillModifyAttributeERKNS_13QualifiedNameERKN3WTF12AtomicStringES7_(%"class.blink::Element"* %0, %"class.blink::QualifiedName"* nonnull dereferenceable(8) %8, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %7, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %17) #7
  %410 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %259, align 8
  %411 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %375, align 8
  %412 = icmp eq %"class.WTF::StringImpl"* %410, %411
  br i1 %412, label %472, label %413

413:                                              ; preds = %409
  %414 = bitcast %"class.blink::MutableAttributeCollection"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %414) #7
  %415 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %187, align 8
  %416 = icmp eq %"class.blink::ElementData"* %415, null
  br i1 %416, label %423, label %417

417:                                              ; preds = %413
  %418 = bitcast %"class.blink::ElementData"* %415 to %"class.blink::UniqueElementData"*
  %419 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %415, i64 0, i32 0, i32 0, i32 0
  %420 = load i32, i32* %419, align 4
  %421 = and i32 %420, 1
  %422 = icmp eq i32 %421, 0
  br i1 %422, label %423, label %426

423:                                              ; preds = %417, %413
  call void @_ZN5blink7Element23CreateUniqueElementDataEv(%"class.blink::Element"* %0) #7
  %424 = bitcast %"class.blink::ElementData"** %187 to %"class.blink::UniqueElementData"**
  %425 = load %"class.blink::UniqueElementData"*, %"class.blink::UniqueElementData"** %424, align 8
  br label %426

426:                                              ; preds = %423, %417
  %427 = phi %"class.blink::UniqueElementData"* [ %425, %423 ], [ %418, %417 ]
  %428 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %427, i64 0, i32 2
  %429 = getelementptr inbounds %"class.blink::MutableAttributeCollection", %"class.blink::MutableAttributeCollection"* %9, i64 0, i32 0, i32 0
  store %"class.WTF::Vector.704"* %428, %"class.WTF::Vector.704"** %429, align 8
  %430 = getelementptr inbounds %"class.blink::MutableAttributeCollection", %"class.blink::MutableAttributeCollection"* %9, i64 0, i32 0
  %431 = call dereferenceable(16) %"class.blink::Attribute"* @_ZNK5blink26AttributeCollectionGenericIN3WTF6VectorINS_9AttributeELj4ENS1_18PartitionAllocatorEEERS5_E2atEj(%"class.blink::AttributeCollectionGeneric.1243"* nonnull %430, i32 %335) #7
  %432 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %431, i64 0, i32 1
  %433 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %259, align 8
  %434 = icmp eq %"class.WTF::StringImpl"* %433, null
  br i1 %434, label %452, label %435

435:                                              ; preds = %426
  %436 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %433, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %437 = load atomic i32, i32* %436 monotonic, align 4
  %438 = and i32 %437, 2
  %439 = icmp eq i32 %438, 0
  br i1 %439, label %440, label %452

440:                                              ; preds = %435
  %441 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %433, i64 0, i32 0
  %442 = load i32, i32* %441, align 4
  %443 = zext i32 %442 to i33
  %444 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %443, i33 1) #7
  %445 = extractvalue { i33, i1 } %444, 1
  %446 = extractvalue { i33, i1 } %444, 0
  %447 = icmp slt i33 %446, 0
  %448 = or i1 %445, %447
  br i1 %448, label %449, label %450, !prof !3

449:                                              ; preds = %440
  call void @llvm.trap() #7
  unreachable

450:                                              ; preds = %440
  %451 = trunc i33 %446 to i32
  store i32 %451, i32* %441, align 4
  br label %452

452:                                              ; preds = %450, %435, %426
  %453 = ptrtoint %"class.WTF::StringImpl"* %433 to i64
  %454 = bitcast %"class.WTF::AtomicString"* %432 to i64*
  %455 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %432, i64 0, i32 0, i32 0, i32 0
  %456 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %455, align 8
  store i64 %453, i64* %454, align 8
  %457 = icmp eq %"class.WTF::StringImpl"* %456, null
  br i1 %457, label %471, label %458

458:                                              ; preds = %452
  %459 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %456, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %460 = load atomic i32, i32* %459 monotonic, align 4
  %461 = and i32 %460, 2
  %462 = icmp eq i32 %461, 0
  %463 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %456, i64 0, i32 0
  %464 = load i32, i32* %463, align 4
  br i1 %462, label %465, label %467

465:                                              ; preds = %458
  %466 = add i32 %464, -1
  store i32 %466, i32* %463, align 4
  br label %467

467:                                              ; preds = %465, %458
  %468 = phi i32 [ %466, %465 ], [ %464, %458 ]
  %469 = icmp eq i32 %468, 0
  br i1 %469, label %470, label %471

470:                                              ; preds = %467
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %456) #7
  br label %471

471:                                              ; preds = %470, %467, %452
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %414) #7
  br label %472

472:                                              ; preds = %471, %409
  call void @_ZN5blink7Element18DidModifyAttributeERKNS_13QualifiedNameERKN3WTF12AtomicStringES7_(%"class.blink::Element"* %0, %"class.blink::QualifiedName"* nonnull dereferenceable(8) %8, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %7, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %17) #7
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* nonnull %8) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %397) #7
  %473 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %375, align 8
  %474 = icmp eq %"class.WTF::StringImpl"* %473, null
  br i1 %474, label %488, label %475

475:                                              ; preds = %472
  %476 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %473, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %477 = load atomic i32, i32* %476 monotonic, align 4
  %478 = and i32 %477, 2
  %479 = icmp eq i32 %478, 0
  %480 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %473, i64 0, i32 0
  %481 = load i32, i32* %480, align 4
  br i1 %479, label %482, label %484

482:                                              ; preds = %475
  %483 = add i32 %481, -1
  store i32 %483, i32* %480, align 4
  br label %484

484:                                              ; preds = %482, %475
  %485 = phi i32 [ %483, %482 ], [ %481, %475 ]
  %486 = icmp eq i32 %485, 0
  br i1 %486, label %487, label %488

487:                                              ; preds = %484
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %473) #7
  br label %488

488:                                              ; preds = %487, %484, %472
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %374) #7
  br label %489

489:                                              ; preds = %330, %488, %342, %340
  %490 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %259, align 8
  %491 = icmp eq %"class.WTF::StringImpl"* %490, null
  br i1 %491, label %505, label %492

492:                                              ; preds = %489
  %493 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %490, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %494 = load atomic i32, i32* %493 monotonic, align 4
  %495 = and i32 %494, 2
  %496 = icmp eq i32 %495, 0
  %497 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %490, i64 0, i32 0
  %498 = load i32, i32* %497, align 4
  br i1 %496, label %499, label %501

499:                                              ; preds = %492
  %500 = add i32 %498, -1
  store i32 %500, i32* %497, align 4
  br label %501

501:                                              ; preds = %499, %492
  %502 = phi i32 [ %500, %499 ], [ %498, %492 ]
  %503 = icmp eq i32 %502, 0
  br i1 %503, label %504, label %505

504:                                              ; preds = %501
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %490) #7
  br label %505

505:                                              ; preds = %339, %489, %501, %504
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %258) #7
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* nonnull %15) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %212) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %211) #7
  br label %506

506:                                              ; preds = %505, %185
  ret void
}

declare zeroext i1 @_ZN5blink8Document11IsValidNameERKN3WTF10StringViewE(%"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_12AtomicStringEEES2_EcvNS_6StringEEv(%"class.WTF::StringAppend"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.WTF::StringTypeAdapter.1271", align 8
  %3 = alloca %"class.WTF::StringTypeAdapter.1271", align 8
  %4 = alloca i8*, align 8
  %5 = alloca i16*, align 8
  %6 = bitcast %"class.WTF::StringTypeAdapter.1271"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #7
  %7 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false) #7
  %8 = load i8*, i8** %7, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.1271"* nonnull %3, i8* %8) #7
  %9 = bitcast %"class.WTF::StringTypeAdapter.1271"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #7
  %10 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false) #7
  %11 = load i8*, i8** %10, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.1271"* nonnull %2, i8* %11) #7
  %12 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = icmp eq %"class.WTF::StringImpl"* %13, null
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %16 = select i1 %14, %"class.WTF::StringImpl"* %15, %"class.WTF::StringImpl"* %13
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #7
  br i1 %20, label %57, label %21

21:                                               ; preds = %1
  %22 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #7
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %4, align 8
  %23 = call i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_12AtomicStringEEES2_E6lengthEv(%"class.WTF::StringAppend"* %0)
  %24 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32 %23, i8** nonnull dereferenceable(8) %4) #7
  %25 = load i8*, i8** %4, align 8
  call void @_ZNK3WTF12StringAppendINS0_IPKcNS_12AtomicStringEEES2_E7WriteToEPh(%"class.WTF::StringAppend"* %0, i8* %25)
  %26 = icmp eq %"class.WTF::StringImpl"* %24, null
  br i1 %26, label %93, label %27

27:                                               ; preds = %21
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load atomic i32, i32* %28 monotonic, align 4
  %30 = and i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 0
  %33 = load i32, i32* %32, align 4
  br i1 %31, label %34, label %44

34:                                               ; preds = %27
  %35 = zext i32 %33 to i33
  %36 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %35, i33 1) #7
  %37 = extractvalue { i33, i1 } %36, 1
  %38 = extractvalue { i33, i1 } %36, 0
  %39 = icmp slt i33 %38, 0
  %40 = or i1 %37, %39
  br i1 %40, label %41, label %42, !prof !3

41:                                               ; preds = %34
  call void @llvm.trap() #7
  unreachable

42:                                               ; preds = %34
  %43 = trunc i33 %38 to i32
  store i32 %43, i32* %32, align 4
  br label %44

44:                                               ; preds = %27, %42
  %45 = phi i32 [ %43, %42 ], [ %33, %27 ]
  %46 = ptrtoint %"class.WTF::StringImpl"* %24 to i64
  %47 = load atomic i32, i32* %28 monotonic, align 4
  %48 = and i32 %47, 2
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %53

50:                                               ; preds = %44
  %51 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 0
  %52 = add i32 %45, -1
  store i32 %52, i32* %51, align 4
  br label %53

53:                                               ; preds = %50, %44
  %54 = phi i32 [ %52, %50 ], [ %45, %44 ]
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %93

56:                                               ; preds = %53
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %24) #7
  br label %93

57:                                               ; preds = %1
  %58 = bitcast i16** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %58) #7
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %5, align 8
  %59 = call i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_12AtomicStringEEES2_E6lengthEv(%"class.WTF::StringAppend"* %0)
  %60 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32 %59, i16** nonnull dereferenceable(8) %5) #7
  %61 = load i16*, i16** %5, align 8
  call void @_ZNK3WTF12StringAppendINS0_IPKcNS_12AtomicStringEEES2_E7WriteToEPDs(%"class.WTF::StringAppend"* %0, i16* %61)
  %62 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %62, label %93, label %63

63:                                               ; preds = %57
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %65 = load atomic i32, i32* %64 monotonic, align 4
  %66 = and i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %69 = load i32, i32* %68, align 4
  br i1 %67, label %70, label %80

70:                                               ; preds = %63
  %71 = zext i32 %69 to i33
  %72 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %71, i33 1) #7
  %73 = extractvalue { i33, i1 } %72, 1
  %74 = extractvalue { i33, i1 } %72, 0
  %75 = icmp slt i33 %74, 0
  %76 = or i1 %73, %75
  br i1 %76, label %77, label %78, !prof !3

77:                                               ; preds = %70
  call void @llvm.trap() #7
  unreachable

78:                                               ; preds = %70
  %79 = trunc i33 %74 to i32
  store i32 %79, i32* %68, align 4
  br label %80

80:                                               ; preds = %63, %78
  %81 = phi i32 [ %79, %78 ], [ %69, %63 ]
  %82 = ptrtoint %"class.WTF::StringImpl"* %60 to i64
  %83 = load atomic i32, i32* %64 monotonic, align 4
  %84 = and i32 %83, 2
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %89

86:                                               ; preds = %80
  %87 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %88 = add i32 %81, -1
  store i32 %88, i32* %87, align 4
  br label %89

89:                                               ; preds = %86, %80
  %90 = phi i32 [ %88, %86 ], [ %81, %80 ]
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %93

92:                                               ; preds = %89
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %60) #7
  br label %93

93:                                               ; preds = %92, %89, %57, %56, %53, %21
  %94 = phi i8* [ %22, %21 ], [ %22, %53 ], [ %22, %56 ], [ %58, %57 ], [ %58, %89 ], [ %58, %92 ]
  %95 = phi i64 [ 0, %21 ], [ %46, %53 ], [ %46, %56 ], [ 0, %57 ], [ %82, %89 ], [ %82, %92 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %94) #7
  %96 = inttoptr i64 %95 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %96
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink7Element18SetAttributeHintedERKN3WTF12AtomicStringENS1_17AtomicStringTable10WeakResultEPKNS_59V8UnionStringOrTrustedHTMLOrTrustedScriptOrTrustedScriptURLERNS_14ExceptionStateE(%"class.blink::Element"*, %"class.WTF::AtomicString"* dereferenceable(8), i64, %"class.blink::V8UnionStringOrTrustedHTMLOrTrustedScriptOrTrustedScriptURL"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %6 = alloca { %"class.blink::Attribute"*, i32 }, align 8
  %7 = alloca %"class.WTF::AtomicString", align 8
  %8 = alloca %"class.blink::QualifiedName", align 8
  %9 = alloca %"class.blink::MutableAttributeCollection", align 8
  %10 = alloca %"class.blink::QualifiedName", align 8
  %11 = alloca %"class.WTF::StringView", align 8
  %12 = alloca %"class.WTF::String", align 8
  %13 = alloca %"class.WTF::StringAppend", align 8
  %14 = alloca i32, align 4
  %15 = alloca %"class.blink::QualifiedName", align 8
  %16 = alloca %"struct.std::__1::pair.697", align 8
  %17 = alloca %"class.WTF::AtomicString", align 8
  %18 = bitcast %"class.WTF::StringView"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %18) #7
  %19 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = icmp eq %"class.WTF::StringImpl"* %20, null
  br i1 %21, label %22, label %26

22:                                               ; preds = %5
  %23 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 1
  store i8* null, i8** %23, align 8
  %24 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %25 = bitcast %"class.WTF::StringView"* %11 to i64*
  store i64 %24, i64* %25, align 8
  br label %33

26:                                               ; preds = %5
  %27 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 0
  store %"class.WTF::StringImpl"* %20, %"class.WTF::StringImpl"** %27, align 8
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 1
  %31 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 1
  %32 = bitcast i8** %31 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %30, %"class.WTF::StringImpl"** %32, align 8
  br label %33

33:                                               ; preds = %22, %26
  %34 = phi i32 [ %29, %26 ], [ 0, %22 ]
  %35 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 2
  store i32 %34, i32* %35, align 8
  %36 = call zeroext i1 @_ZN5blink8Document11IsValidNameERKN3WTF10StringViewE(%"class.WTF::StringView"* nonnull dereferenceable(24) %11) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18) #7
  br i1 %36, label %186, label %37

37:                                               ; preds = %33
  %38 = bitcast %"class.WTF::String"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %38) #7
  %39 = bitcast %"class.WTF::StringAppend"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %39) #7
  %40 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %41 = icmp eq %"class.WTF::StringImpl"* %40, null
  br i1 %41, label %117, label %42

42:                                               ; preds = %37
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = and i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 0, i32 0
  %48 = load i32, i32* %47, align 4
  br i1 %46, label %49, label %59

49:                                               ; preds = %42
  %50 = zext i32 %48 to i33
  %51 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %50, i33 1) #7
  %52 = extractvalue { i33, i1 } %51, 1
  %53 = extractvalue { i33, i1 } %51, 0
  %54 = icmp slt i33 %53, 0
  %55 = or i1 %52, %54
  br i1 %55, label %56, label %57, !prof !3

56:                                               ; preds = %49
  call void @llvm.trap() #7
  unreachable

57:                                               ; preds = %49
  %58 = trunc i33 %53 to i32
  store i32 %58, i32* %47, align 4
  br label %59

59:                                               ; preds = %57, %42
  %60 = phi i32 [ %58, %57 ], [ %48, %42 ]
  %61 = load atomic i32, i32* %43 monotonic, align 4
  %62 = and i32 %61, 2
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %74

64:                                               ; preds = %59
  %65 = zext i32 %60 to i33
  %66 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %65, i33 1) #7
  %67 = extractvalue { i33, i1 } %66, 1
  %68 = extractvalue { i33, i1 } %66, 0
  %69 = icmp slt i33 %68, 0
  %70 = or i1 %67, %69
  br i1 %70, label %71, label %72, !prof !3

71:                                               ; preds = %64
  call void @llvm.trap() #7
  unreachable

72:                                               ; preds = %64
  %73 = trunc i33 %68 to i32
  store i32 %73, i32* %47, align 4
  br label %74

74:                                               ; preds = %72, %59
  %75 = phi i32 [ %73, %72 ], [ %60, %59 ]
  %76 = load atomic i32, i32* %43 monotonic, align 4
  %77 = and i32 %76, 2
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %81

79:                                               ; preds = %74
  %80 = add i32 %75, -1
  store i32 %80, i32* %47, align 4
  br label %81

81:                                               ; preds = %79, %74
  %82 = phi i32 [ %80, %79 ], [ %75, %74 ]
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %85

84:                                               ; preds = %81
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %40) #7
  br label %85

85:                                               ; preds = %81, %84
  %86 = load atomic i32, i32* %43 monotonic, align 4, !noalias !25
  %87 = and i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = load i32, i32* %47, align 4
  br i1 %88, label %90, label %100

90:                                               ; preds = %85
  %91 = zext i32 %89 to i33
  %92 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %91, i33 1) #7
  %93 = extractvalue { i33, i1 } %92, 1
  %94 = extractvalue { i33, i1 } %92, 0
  %95 = icmp slt i33 %94, 0
  %96 = or i1 %93, %95
  br i1 %96, label %97, label %98, !prof !3

97:                                               ; preds = %90
  call void @llvm.trap() #7, !noalias !25
  unreachable

98:                                               ; preds = %90
  %99 = trunc i33 %94 to i32
  store i32 %99, i32* %47, align 4, !noalias !25
  br label %100

100:                                              ; preds = %85, %98
  %101 = phi i32 [ %99, %98 ], [ %89, %85 ]
  %102 = bitcast %"class.WTF::StringAppend"* %13 to i64*
  store i64 ptrtoint ([2 x i8]* @.str to i64), i64* %102, align 8, !alias.scope !25
  %103 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %13, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %40, %"class.WTF::StringImpl"** %103, align 8, !alias.scope !25
  %104 = load atomic i32, i32* %43 monotonic, align 4, !noalias !25
  %105 = and i32 %104, 2
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %121

107:                                              ; preds = %100
  %108 = zext i32 %101 to i33
  %109 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %108, i33 1) #7
  %110 = extractvalue { i33, i1 } %109, 1
  %111 = extractvalue { i33, i1 } %109, 0
  %112 = icmp slt i33 %111, 0
  %113 = or i1 %110, %112
  br i1 %113, label %114, label %115, !prof !3

114:                                              ; preds = %107
  call void @llvm.trap() #7, !noalias !25
  unreachable

115:                                              ; preds = %107
  %116 = trunc i33 %111 to i32
  store i32 %116, i32* %47, align 4, !noalias !25
  br label %121

117:                                              ; preds = %37
  %118 = bitcast %"class.WTF::StringAppend"* %13 to i64*
  store i64 ptrtoint ([2 x i8]* @.str to i64), i64* %118, align 8, !alias.scope !25
  %119 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %13, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %119, align 8, !alias.scope !25
  %120 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %13, i64 0, i32 1
  store i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0), i8** %120, align 8, !alias.scope !25
  br label %133

121:                                              ; preds = %115, %100
  %122 = phi i32 [ %116, %115 ], [ %101, %100 ]
  %123 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %13, i64 0, i32 1
  store i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0), i8** %123, align 8, !alias.scope !25
  %124 = load atomic i32, i32* %43 monotonic, align 4, !noalias !25
  %125 = and i32 %124, 2
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %129

127:                                              ; preds = %121
  %128 = add i32 %122, -1
  store i32 %128, i32* %47, align 4, !noalias !25
  br label %129

129:                                              ; preds = %127, %121
  %130 = phi i32 [ %128, %127 ], [ %122, %121 ]
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %132, label %133

132:                                              ; preds = %129
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %40) #7, !noalias !25
  br label %133

133:                                              ; preds = %117, %129, %132
  %134 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_12AtomicStringEEES2_EcvNS_6StringEEv(%"class.WTF::StringAppend"* nonnull %13)
  %135 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %12, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %134, %"class.WTF::StringImpl"** %135, align 8
  %136 = bitcast %"class.blink::ExceptionState"* %4 to void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)***
  %137 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)**, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*** %136, align 8
  %138 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)** %137, align 8
  call void %138(%"class.blink::ExceptionState"* %4, i32 5, %"class.WTF::String"* nonnull dereferenceable(8) %12) #7
  %139 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %135, align 8
  %140 = icmp eq %"class.WTF::StringImpl"* %139, null
  br i1 %140, label %154, label %141

141:                                              ; preds = %133
  %142 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %139, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %143 = load atomic i32, i32* %142 monotonic, align 4
  %144 = and i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %139, i64 0, i32 0
  %147 = load i32, i32* %146, align 4
  br i1 %145, label %148, label %150

148:                                              ; preds = %141
  %149 = add i32 %147, -1
  store i32 %149, i32* %146, align 4
  br label %150

150:                                              ; preds = %148, %141
  %151 = phi i32 [ %149, %148 ], [ %147, %141 ]
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %153, label %154

153:                                              ; preds = %150
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %139) #7
  br label %154

154:                                              ; preds = %133, %150, %153
  %155 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %13, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %156 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %155, align 8
  %157 = icmp eq %"class.WTF::StringImpl"* %156, null
  br i1 %157, label %171, label %158

158:                                              ; preds = %154
  %159 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %156, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %160 = load atomic i32, i32* %159 monotonic, align 4
  %161 = and i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %156, i64 0, i32 0
  %164 = load i32, i32* %163, align 4
  br i1 %162, label %165, label %167

165:                                              ; preds = %158
  %166 = add i32 %164, -1
  store i32 %166, i32* %163, align 4
  br label %167

167:                                              ; preds = %165, %158
  %168 = phi i32 [ %166, %165 ], [ %164, %158 ]
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %170, label %171

170:                                              ; preds = %167
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %156) #7
  br label %171

171:                                              ; preds = %154, %167, %170
  br i1 %41, label %185, label %172

172:                                              ; preds = %171
  %173 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %174 = load atomic i32, i32* %173 monotonic, align 4
  %175 = and i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 0, i32 0
  %178 = load i32, i32* %177, align 4
  br i1 %176, label %179, label %181

179:                                              ; preds = %172
  %180 = add i32 %178, -1
  store i32 %180, i32* %177, align 4
  br label %181

181:                                              ; preds = %179, %172
  %182 = phi i32 [ %180, %179 ], [ %178, %172 ]
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %184, label %185

184:                                              ; preds = %181
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %40) #7
  br label %185

185:                                              ; preds = %171, %181, %184
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %39) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %38) #7
  br label %485

186:                                              ; preds = %33
  %187 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %0, i64 0, i32 3, i32 0, i32 0
  %188 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %187, align 8
  %189 = icmp eq %"class.blink::ElementData"* %188, null
  br i1 %189, label %210, label %190

190:                                              ; preds = %186
  %191 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %188, i64 0, i32 0, i32 0, i32 0
  %192 = load i32, i32* %191, align 4
  %193 = and i32 %192, 1073741824
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %204, label %195

195:                                              ; preds = %190
  %196 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names10kStyleAttrE, align 8
  %197 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %196, i64 0, i32 0, i32 0
  %198 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %197, align 8
  %199 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %198, i64 0, i32 3
  %200 = bitcast %"class.WTF::AtomicString"* %199 to i64*
  %201 = load i64, i64* %200, align 8
  %202 = icmp eq i64 %201, %2
  br i1 %202, label %203, label %204

203:                                              ; preds = %195
  call void @_ZNK5blink7Element33SynchronizeStyleAttributeInternalEv(%"class.blink::Element"* %0) #7
  br label %210

204:                                              ; preds = %195, %190
  %205 = icmp slt i32 %192, 0
  br i1 %205, label %206, label %210

206:                                              ; preds = %204
  %207 = bitcast %"class.blink::Element"* %0 to %"class.blink::SVGElement"*
  %208 = bitcast %"class.blink::QualifiedName"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %208) #7
  %209 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  call void @_ZN5blink13QualifiedNameC1ERKN3WTF12AtomicStringES4_S4_(%"class.blink::QualifiedName"* nonnull %10, %"class.WTF::AtomicString"* dereferenceable(8) %209, %"class.WTF::AtomicString"* dereferenceable(8) %1, %"class.WTF::AtomicString"* dereferenceable(8) %209) #7
  call void @_ZNK5blink10SVGElement23SynchronizeSVGAttributeERKNS_13QualifiedNameE(%"class.blink::SVGElement"* %207, %"class.blink::QualifiedName"* nonnull dereferenceable(8) %10) #7
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* nonnull %10) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %208) #7
  br label %210

210:                                              ; preds = %186, %203, %204, %206
  %211 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %211) #7
  store i32 -1431655766, i32* %14, align 4
  %212 = bitcast %"class.blink::QualifiedName"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %212) #7
  %213 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %15, i64 0, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* inttoptr (i64 -6148914691236517206 to %"class.blink::QualifiedName::QualifiedNameImpl"*), %"class.blink::QualifiedName::QualifiedNameImpl"** %213, align 8
  %214 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink11g_null_nameE, align 8
  %215 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %214, i64 0, i32 0, i32 0
  %216 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %215, align 8
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %216, %"class.blink::QualifiedName::QualifiedNameImpl"** %213, align 8
  %217 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %216, null
  br i1 %217, label %225, label %218

218:                                              ; preds = %210
  %219 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %216, i64 0, i32 1
  %220 = load i32, i32* %219, align 4
  %221 = and i32 %220, 16777216
  %222 = icmp eq i32 %221, 0
  br i1 %222, label %223, label %225

223:                                              ; preds = %218
  %224 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %216, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %224) #7
  br label %225

225:                                              ; preds = %210, %218, %223
  %226 = bitcast %"struct.std::__1::pair.697"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %226) #7
  call void @_ZNK5blink7Element26LookupAttributeQNameHintedERKN3WTF12AtomicStringENS1_17AtomicStringTable10WeakResultE(%"struct.std::__1::pair.697"* nonnull sret %16, %"class.blink::Element"* %0, %"class.WTF::AtomicString"* dereferenceable(8) %1, i64 %2)
  %227 = getelementptr inbounds %"struct.std::__1::pair.697", %"struct.std::__1::pair.697"* %16, i64 0, i32 0
  %228 = load i32, i32* %227, align 8
  store i32 %228, i32* %14, align 4
  %229 = getelementptr inbounds %"struct.std::__1::pair.697", %"struct.std::__1::pair.697"* %16, i64 0, i32 1, i32 0, i32 0
  %230 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %229, align 8
  %231 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %230, null
  br i1 %231, label %239, label %232

232:                                              ; preds = %225
  %233 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %230, i64 0, i32 1
  %234 = load i32, i32* %233, align 4
  %235 = and i32 %234, 16777216
  %236 = icmp eq i32 %235, 0
  br i1 %236, label %237, label %239

237:                                              ; preds = %232
  %238 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %230, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %238) #7
  br label %239

239:                                              ; preds = %237, %232, %225
  %240 = ptrtoint %"class.blink::QualifiedName::QualifiedNameImpl"* %230 to i64
  %241 = bitcast %"class.blink::QualifiedName"* %15 to i64*
  %242 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %213, align 8
  store i64 %240, i64* %241, align 8
  %243 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %242, null
  br i1 %243, label %256, label %244

244:                                              ; preds = %239
  %245 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %242, i64 0, i32 1
  %246 = load i32, i32* %245, align 4
  %247 = and i32 %246, 16777216
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %249, label %256

249:                                              ; preds = %244
  %250 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %242, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %250) #7
  %251 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %242, i64 0, i32 0, i32 0, i32 0, i32 0
  %252 = load i32, i32* %251, align 4
  %253 = icmp eq i32 %252, 0
  br i1 %253, label %254, label %256

254:                                              ; preds = %249
  call void @_ZN5blink13QualifiedName17QualifiedNameImplD1Ev(%"class.blink::QualifiedName::QualifiedNameImpl"* nonnull %242) #7
  %255 = bitcast %"class.blink::QualifiedName::QualifiedNameImpl"* %242 to i8*
  call void @free(i8* %255) #7
  br label %256

256:                                              ; preds = %239, %244, %249, %254
  %257 = getelementptr inbounds %"struct.std::__1::pair.697", %"struct.std::__1::pair.697"* %16, i64 0, i32 1
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* %257) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %226) #7
  %258 = bitcast %"class.WTF::AtomicString"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %258) #7
  %259 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %17, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* inttoptr (i64 -6148914691236517206 to %"class.WTF::StringImpl"*), %"class.WTF::StringImpl"** %259, align 8
  %260 = call i32 @_ZNK5blink7Element31ExpectedTrustedTypeForAttributeERKNS_13QualifiedNameE(%"class.blink::Element"* %0, %"class.blink::QualifiedName"* nonnull dereferenceable(8) %15) #7
  %261 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %0, i64 0, i32 0, i32 0
  %262 = bitcast %"class.blink::Element"* %0 to %"class.blink::ExecutionContext"* (%"class.blink::Node"*)***
  %263 = load %"class.blink::ExecutionContext"* (%"class.blink::Node"*)**, %"class.blink::ExecutionContext"* (%"class.blink::Node"*)*** %262, align 8
  %264 = getelementptr inbounds %"class.blink::ExecutionContext"* (%"class.blink::Node"*)*, %"class.blink::ExecutionContext"* (%"class.blink::Node"*)** %263, i64 10
  %265 = load %"class.blink::ExecutionContext"* (%"class.blink::Node"*)*, %"class.blink::ExecutionContext"* (%"class.blink::Node"*)** %264, align 8
  %266 = call %"class.blink::ExecutionContext"* %265(%"class.blink::Node"* %261) #7
  %267 = call %"class.WTF::StringImpl"* @_ZN5blink20TrustedTypesCheckForENS_19SpecificTrustedTypeEPKNS_59V8UnionStringOrTrustedHTMLOrTrustedScriptOrTrustedScriptURLEPKNS_16ExecutionContextERNS_14ExceptionStateE(i32 %260, %"class.blink::V8UnionStringOrTrustedHTMLOrTrustedScriptOrTrustedScriptURL"* %3, %"class.blink::ExecutionContext"* %266, %"class.blink::ExceptionState"* dereferenceable(72) %4) #7
  %268 = icmp eq %"class.WTF::StringImpl"* %267, null
  br i1 %268, label %292, label %269

269:                                              ; preds = %256
  %270 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %267, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %271 = load atomic i32, i32* %270 acquire, align 4
  %272 = and i32 %271, 4
  %273 = icmp eq i32 %272, 0
  br i1 %273, label %290, label %274

274:                                              ; preds = %269
  %275 = load atomic i32, i32* %270 monotonic, align 4
  %276 = and i32 %275, 2
  %277 = icmp eq i32 %276, 0
  br i1 %277, label %278, label %294

278:                                              ; preds = %274
  %279 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %267, i64 0, i32 0
  %280 = load i32, i32* %279, align 4
  %281 = zext i32 %280 to i33
  %282 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %281, i33 1) #7
  %283 = extractvalue { i33, i1 } %282, 1
  %284 = extractvalue { i33, i1 } %282, 0
  %285 = icmp slt i33 %284, 0
  %286 = or i1 %283, %285
  br i1 %286, label %287, label %288, !prof !3

287:                                              ; preds = %278
  call void @llvm.trap() #7
  unreachable

288:                                              ; preds = %278
  %289 = trunc i33 %284 to i32
  store i32 %289, i32* %279, align 4
  br label %294

290:                                              ; preds = %269
  %291 = call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %267) #7
  br label %294

292:                                              ; preds = %256
  %293 = bitcast %"class.WTF::AtomicString"* %17 to i64*
  store i64 0, i64* %293, align 8
  br label %309

294:                                              ; preds = %274, %288, %290
  %295 = phi %"class.WTF::StringImpl"* [ %267, %288 ], [ %267, %274 ], [ %291, %290 ]
  %296 = ptrtoint %"class.WTF::StringImpl"* %295 to i64
  %297 = bitcast %"class.WTF::AtomicString"* %17 to i64*
  store i64 %296, i64* %297, align 8
  %298 = load atomic i32, i32* %270 monotonic, align 4
  %299 = and i32 %298, 2
  %300 = icmp eq i32 %299, 0
  %301 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %267, i64 0, i32 0
  %302 = load i32, i32* %301, align 4
  br i1 %300, label %303, label %305

303:                                              ; preds = %294
  %304 = add i32 %302, -1
  store i32 %304, i32* %301, align 4
  br label %305

305:                                              ; preds = %303, %294
  %306 = phi i32 [ %304, %303 ], [ %302, %294 ]
  %307 = icmp eq i32 %306, 0
  br i1 %307, label %308, label %309

308:                                              ; preds = %305
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %267) #7
  br label %309

309:                                              ; preds = %292, %305, %308
  %310 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %4, i64 0, i32 4
  %311 = load i32, i32* %310, align 8
  %312 = icmp eq i32 %311, 0
  br i1 %312, label %313, label %468

313:                                              ; preds = %309
  %314 = load i32, i32* %14, align 4
  %315 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %259, align 8
  %316 = icmp eq %"class.WTF::StringImpl"* %315, null
  %317 = icmp eq i32 %314, -1
  br i1 %316, label %318, label %320

318:                                              ; preds = %313
  br i1 %317, label %484, label %319

319:                                              ; preds = %318
  call void @_ZN5blink7Element23RemoveAttributeInternalEjNS0_30SynchronizationOfLazyAttributeE(%"class.blink::Element"* %0, i32 %314, i32 0) #7
  br label %468

320:                                              ; preds = %313
  br i1 %317, label %321, label %322

321:                                              ; preds = %320
  call void @_ZN5blink7Element23AppendAttributeInternalERKNS_13QualifiedNameERKN3WTF12AtomicStringENS0_30SynchronizationOfLazyAttributeE(%"class.blink::Element"* %0, %"class.blink::QualifiedName"* nonnull dereferenceable(8) %15, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %17, i32 0) #7
  br label %468

322:                                              ; preds = %320
  %323 = bitcast { %"class.blink::Attribute"*, i32 }* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %323) #7
  %324 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %187, align 8
  %325 = icmp eq %"class.blink::ElementData"* %324, null
  br i1 %325, label %326, label %328

326:                                              ; preds = %322
  %327 = load i32, i32* null, align 536870912
  br label %340

328:                                              ; preds = %322
  %329 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %324, i64 0, i32 0, i32 0, i32 0
  %330 = load i32, i32* %329, align 4
  %331 = and i32 %330, 1
  %332 = icmp eq i32 %331, 0
  br i1 %332, label %340, label %333

333:                                              ; preds = %328
  %334 = bitcast %"class.blink::ElementData"* %324 to %"class.blink::UniqueElementData"*
  %335 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %324, i64 1, i32 1
  %336 = bitcast %"class.blink::Member.14"* %335 to %"class.blink::Attribute"**
  %337 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %336, align 8
  %338 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %334, i64 0, i32 2, i32 0, i32 0, i32 2
  %339 = load i32, i32* %338, align 4
  br label %346

340:                                              ; preds = %328, %326
  %341 = phi i32 [ %327, %326 ], [ %330, %328 ]
  %342 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %324, i64 1
  %343 = bitcast %"class.blink::ElementData"* %342 to %"class.blink::Attribute"*
  %344 = lshr i32 %341, 1
  %345 = and i32 %344, 268435455
  br label %346

346:                                              ; preds = %340, %333
  %347 = phi %"class.blink::Attribute"* [ %343, %340 ], [ %337, %333 ]
  %348 = phi i32 [ %345, %340 ], [ %339, %333 ]
  %349 = getelementptr inbounds { %"class.blink::Attribute"*, i32 }, { %"class.blink::Attribute"*, i32 }* %6, i64 0, i32 0
  store %"class.blink::Attribute"* %347, %"class.blink::Attribute"** %349, align 8
  %350 = getelementptr inbounds { %"class.blink::Attribute"*, i32 }, { %"class.blink::Attribute"*, i32 }* %6, i64 0, i32 1
  store i32 %348, i32* %350, align 8
  %351 = bitcast { %"class.blink::Attribute"*, i32 }* %6 to %"class.blink::AttributeCollectionGeneric"*
  %352 = call dereferenceable(16) %"class.blink::Attribute"* @_ZNK5blink26AttributeCollectionGenericIKNS_14AttributeArrayES2_E2atEj(%"class.blink::AttributeCollectionGeneric"* nonnull %351, i32 %314) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %323) #7
  %353 = bitcast %"class.WTF::AtomicString"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %353) #7
  %354 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %7, i64 0, i32 0, i32 0, i32 0
  %355 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %352, i64 0, i32 1, i32 0, i32 0, i32 0
  %356 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %355, align 8
  store %"class.WTF::StringImpl"* %356, %"class.WTF::StringImpl"** %354, align 8
  %357 = icmp eq %"class.WTF::StringImpl"* %356, null
  br i1 %357, label %375, label %358

358:                                              ; preds = %346
  %359 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %356, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %360 = load atomic i32, i32* %359 monotonic, align 4
  %361 = and i32 %360, 2
  %362 = icmp eq i32 %361, 0
  br i1 %362, label %363, label %375

363:                                              ; preds = %358
  %364 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %356, i64 0, i32 0
  %365 = load i32, i32* %364, align 4
  %366 = zext i32 %365 to i33
  %367 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %366, i33 1) #7
  %368 = extractvalue { i33, i1 } %367, 1
  %369 = extractvalue { i33, i1 } %367, 0
  %370 = icmp slt i33 %369, 0
  %371 = or i1 %368, %370
  br i1 %371, label %372, label %373, !prof !3

372:                                              ; preds = %363
  call void @llvm.trap() #7
  unreachable

373:                                              ; preds = %363
  %374 = trunc i33 %369 to i32
  store i32 %374, i32* %364, align 4
  br label %375

375:                                              ; preds = %373, %358, %346
  %376 = bitcast %"class.blink::QualifiedName"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %376) #7
  %377 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %8, i64 0, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* inttoptr (i64 -6148914691236517206 to %"class.blink::QualifiedName::QualifiedNameImpl"*), %"class.blink::QualifiedName::QualifiedNameImpl"** %377, align 8
  %378 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %352, i64 0, i32 0, i32 0, i32 0
  %379 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %378, align 8
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %379, %"class.blink::QualifiedName::QualifiedNameImpl"** %377, align 8
  %380 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %379, null
  br i1 %380, label %388, label %381

381:                                              ; preds = %375
  %382 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %379, i64 0, i32 1
  %383 = load i32, i32* %382, align 4
  %384 = and i32 %383, 16777216
  %385 = icmp eq i32 %384, 0
  br i1 %385, label %386, label %388

386:                                              ; preds = %381
  %387 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %379, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %387) #7
  br label %388

388:                                              ; preds = %386, %381, %375
  call void @_ZN5blink7Element19WillModifyAttributeERKNS_13QualifiedNameERKN3WTF12AtomicStringES7_(%"class.blink::Element"* %0, %"class.blink::QualifiedName"* nonnull dereferenceable(8) %8, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %7, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %17) #7
  %389 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %259, align 8
  %390 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %354, align 8
  %391 = icmp eq %"class.WTF::StringImpl"* %389, %390
  br i1 %391, label %451, label %392

392:                                              ; preds = %388
  %393 = bitcast %"class.blink::MutableAttributeCollection"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %393) #7
  %394 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %187, align 8
  %395 = icmp eq %"class.blink::ElementData"* %394, null
  br i1 %395, label %402, label %396

396:                                              ; preds = %392
  %397 = bitcast %"class.blink::ElementData"* %394 to %"class.blink::UniqueElementData"*
  %398 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %394, i64 0, i32 0, i32 0, i32 0
  %399 = load i32, i32* %398, align 4
  %400 = and i32 %399, 1
  %401 = icmp eq i32 %400, 0
  br i1 %401, label %402, label %405

402:                                              ; preds = %396, %392
  call void @_ZN5blink7Element23CreateUniqueElementDataEv(%"class.blink::Element"* %0) #7
  %403 = bitcast %"class.blink::ElementData"** %187 to %"class.blink::UniqueElementData"**
  %404 = load %"class.blink::UniqueElementData"*, %"class.blink::UniqueElementData"** %403, align 8
  br label %405

405:                                              ; preds = %402, %396
  %406 = phi %"class.blink::UniqueElementData"* [ %404, %402 ], [ %397, %396 ]
  %407 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %406, i64 0, i32 2
  %408 = getelementptr inbounds %"class.blink::MutableAttributeCollection", %"class.blink::MutableAttributeCollection"* %9, i64 0, i32 0, i32 0
  store %"class.WTF::Vector.704"* %407, %"class.WTF::Vector.704"** %408, align 8
  %409 = getelementptr inbounds %"class.blink::MutableAttributeCollection", %"class.blink::MutableAttributeCollection"* %9, i64 0, i32 0
  %410 = call dereferenceable(16) %"class.blink::Attribute"* @_ZNK5blink26AttributeCollectionGenericIN3WTF6VectorINS_9AttributeELj4ENS1_18PartitionAllocatorEEERS5_E2atEj(%"class.blink::AttributeCollectionGeneric.1243"* nonnull %409, i32 %314) #7
  %411 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %410, i64 0, i32 1
  %412 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %259, align 8
  %413 = icmp eq %"class.WTF::StringImpl"* %412, null
  br i1 %413, label %431, label %414

414:                                              ; preds = %405
  %415 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %412, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %416 = load atomic i32, i32* %415 monotonic, align 4
  %417 = and i32 %416, 2
  %418 = icmp eq i32 %417, 0
  br i1 %418, label %419, label %431

419:                                              ; preds = %414
  %420 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %412, i64 0, i32 0
  %421 = load i32, i32* %420, align 4
  %422 = zext i32 %421 to i33
  %423 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %422, i33 1) #7
  %424 = extractvalue { i33, i1 } %423, 1
  %425 = extractvalue { i33, i1 } %423, 0
  %426 = icmp slt i33 %425, 0
  %427 = or i1 %424, %426
  br i1 %427, label %428, label %429, !prof !3

428:                                              ; preds = %419
  call void @llvm.trap() #7
  unreachable

429:                                              ; preds = %419
  %430 = trunc i33 %425 to i32
  store i32 %430, i32* %420, align 4
  br label %431

431:                                              ; preds = %429, %414, %405
  %432 = ptrtoint %"class.WTF::StringImpl"* %412 to i64
  %433 = bitcast %"class.WTF::AtomicString"* %411 to i64*
  %434 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %411, i64 0, i32 0, i32 0, i32 0
  %435 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %434, align 8
  store i64 %432, i64* %433, align 8
  %436 = icmp eq %"class.WTF::StringImpl"* %435, null
  br i1 %436, label %450, label %437

437:                                              ; preds = %431
  %438 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %435, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %439 = load atomic i32, i32* %438 monotonic, align 4
  %440 = and i32 %439, 2
  %441 = icmp eq i32 %440, 0
  %442 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %435, i64 0, i32 0
  %443 = load i32, i32* %442, align 4
  br i1 %441, label %444, label %446

444:                                              ; preds = %437
  %445 = add i32 %443, -1
  store i32 %445, i32* %442, align 4
  br label %446

446:                                              ; preds = %444, %437
  %447 = phi i32 [ %445, %444 ], [ %443, %437 ]
  %448 = icmp eq i32 %447, 0
  br i1 %448, label %449, label %450

449:                                              ; preds = %446
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %435) #7
  br label %450

450:                                              ; preds = %449, %446, %431
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %393) #7
  br label %451

451:                                              ; preds = %450, %388
  call void @_ZN5blink7Element18DidModifyAttributeERKNS_13QualifiedNameERKN3WTF12AtomicStringES7_(%"class.blink::Element"* %0, %"class.blink::QualifiedName"* nonnull dereferenceable(8) %8, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %7, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %17) #7
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* nonnull %8) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %376) #7
  %452 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %354, align 8
  %453 = icmp eq %"class.WTF::StringImpl"* %452, null
  br i1 %453, label %467, label %454

454:                                              ; preds = %451
  %455 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %452, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %456 = load atomic i32, i32* %455 monotonic, align 4
  %457 = and i32 %456, 2
  %458 = icmp eq i32 %457, 0
  %459 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %452, i64 0, i32 0
  %460 = load i32, i32* %459, align 4
  br i1 %458, label %461, label %463

461:                                              ; preds = %454
  %462 = add i32 %460, -1
  store i32 %462, i32* %459, align 4
  br label %463

463:                                              ; preds = %461, %454
  %464 = phi i32 [ %462, %461 ], [ %460, %454 ]
  %465 = icmp eq i32 %464, 0
  br i1 %465, label %466, label %467

466:                                              ; preds = %463
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %452) #7
  br label %467

467:                                              ; preds = %466, %463, %451
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %353) #7
  br label %468

468:                                              ; preds = %309, %467, %321, %319
  %469 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %259, align 8
  %470 = icmp eq %"class.WTF::StringImpl"* %469, null
  br i1 %470, label %484, label %471

471:                                              ; preds = %468
  %472 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %469, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %473 = load atomic i32, i32* %472 monotonic, align 4
  %474 = and i32 %473, 2
  %475 = icmp eq i32 %474, 0
  %476 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %469, i64 0, i32 0
  %477 = load i32, i32* %476, align 4
  br i1 %475, label %478, label %480

478:                                              ; preds = %471
  %479 = add i32 %477, -1
  store i32 %479, i32* %476, align 4
  br label %480

480:                                              ; preds = %478, %471
  %481 = phi i32 [ %479, %478 ], [ %477, %471 ]
  %482 = icmp eq i32 %481, 0
  br i1 %482, label %483, label %484

483:                                              ; preds = %480
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %469) #7
  br label %484

484:                                              ; preds = %318, %468, %480, %483
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %258) #7
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* nonnull %15) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %212) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %211) #7
  br label %485

485:                                              ; preds = %484, %185
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN5blink20TrustedTypesCheckForENS_19SpecificTrustedTypeEPKNS_59V8UnionStringOrTrustedHTMLOrTrustedScriptOrTrustedScriptURLEPKNS_16ExecutionContextERNS_14ExceptionStateE(i32, %"class.blink::V8UnionStringOrTrustedHTMLOrTrustedScriptOrTrustedScriptURL"*, %"class.blink::ExecutionContext"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::Attr"* @_ZN5blink7Element16setAttributeNodeEPNS_4AttrERNS_14ExceptionStateE(%"class.blink::Element"*, %"class.blink::Attr"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = alloca { %"class.blink::Attribute"*, i32 }, align 8
  %5 = alloca %"class.WTF::AtomicString", align 8
  %6 = alloca %"class.blink::QualifiedName", align 8
  %7 = alloca %"class.blink::MutableAttributeCollection", align 8
  %8 = alloca %"class.blink::Attr"*, align 8
  %9 = alloca %"class.blink::QualifiedName", align 8
  %10 = alloca %"class.WTF::String", align 8
  %11 = alloca %"class.WTF::AtomicString", align 8
  %12 = alloca %"class.blink::QualifiedName", align 8
  %13 = alloca { %"class.blink::Attribute"*, i32 }, align 8
  %14 = alloca %"class.blink::QualifiedName", align 8
  %15 = alloca %"class.WTF::AtomicString", align 8
  %16 = alloca %"class.blink::QualifiedName", align 8
  %17 = alloca %"class.blink::QualifiedName", align 8
  %18 = alloca %"class.blink::QualifiedName", align 8
  %19 = bitcast %"class.blink::QualifiedName"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #7
  call void @_ZNK5blink4Attr16GetQualifiedNameEv(%"class.blink::QualifiedName"* nonnull sret %9, %"class.blink::Attr"* %1) #7
  %20 = call %"class.blink::Attr"* @_ZN5blink7Element12AttrIfExistsERKNS_13QualifiedNameE(%"class.blink::Element"* %0, %"class.blink::QualifiedName"* nonnull dereferenceable(8) %9) #7
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* nonnull %9) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #7
  %21 = icmp eq %"class.blink::Attr"* %20, %1
  br i1 %21, label %550, label %22

22:                                               ; preds = %3
  %23 = getelementptr inbounds %"class.blink::Attr", %"class.blink::Attr"* %1, i64 0, i32 1, i32 0, i32 0
  %24 = load %"class.blink::Element"*, %"class.blink::Element"** %23, align 8
  %25 = icmp eq %"class.blink::Element"* %24, null
  br i1 %25, label %27, label %26

26:                                               ; preds = %22
  call void @_ZN5blink14ExceptionState17ThrowDOMExceptionENS_16DOMExceptionCodeEPKc(%"class.blink::ExceptionState"* %2, i32 10, i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.2, i64 0, i64 0)) #7
  br label %550

27:                                               ; preds = %22
  %28 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %0, i64 0, i32 0, i32 0
  %29 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %0, i64 0, i32 0, i32 0, i32 1
  %30 = load i32, i32* %29, align 8
  %31 = and i32 %30, 48
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %106, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds %"class.blink::Attr", %"class.blink::Attr"* %1, i64 0, i32 0, i32 3, i32 0, i32 0
  %35 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %34, align 8
  %36 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %35, i64 0, i32 2, i32 0, i32 0
  %37 = load %"class.blink::Document"*, %"class.blink::Document"** %36, align 8
  %38 = getelementptr inbounds %"class.blink::Document", %"class.blink::Document"* %37, i64 0, i32 107
  %39 = load i8, i8* %38, align 8
  %40 = and i8 %39, 1
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %106, label %42

42:                                               ; preds = %33
  %43 = getelementptr inbounds %"class.blink::Attr", %"class.blink::Attr"* %1, i64 0, i32 2
  %44 = call %"class.WTF::StringImpl"* @_ZNK5blink13QualifiedName8ToStringEv(%"class.blink::QualifiedName"* %43) #7
  %45 = bitcast %"class.WTF::String"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %45) #7
  %46 = call %"class.WTF::StringImpl"* @_ZNK5blink13QualifiedName8ToStringEv(%"class.blink::QualifiedName"* %43) #7
  %47 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %10, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %46, %"class.WTF::StringImpl"** %47, align 8
  %48 = call %"class.WTF::StringImpl"* @_ZNK3WTF6String10LowerASCIIEv(%"class.WTF::String"* nonnull %10) #7
  %49 = call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %44, %"class.WTF::StringImpl"* %48) #7
  %50 = icmp eq %"class.WTF::StringImpl"* %48, null
  br i1 %50, label %64, label %51

51:                                               ; preds = %42
  %52 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %48, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %53 = load atomic i32, i32* %52 monotonic, align 4
  %54 = and i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %48, i64 0, i32 0
  %57 = load i32, i32* %56, align 4
  br i1 %55, label %58, label %60

58:                                               ; preds = %51
  %59 = add i32 %57, -1
  store i32 %59, i32* %56, align 4
  br label %60

60:                                               ; preds = %58, %51
  %61 = phi i32 [ %59, %58 ], [ %57, %51 ]
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %64

63:                                               ; preds = %60
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %48) #7
  br label %64

64:                                               ; preds = %42, %60, %63
  %65 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %47, align 8
  %66 = icmp eq %"class.WTF::StringImpl"* %65, null
  br i1 %66, label %80, label %67

67:                                               ; preds = %64
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load atomic i32, i32* %68 monotonic, align 4
  %70 = and i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 0
  %73 = load i32, i32* %72, align 4
  br i1 %71, label %74, label %76

74:                                               ; preds = %67
  %75 = add i32 %73, -1
  store i32 %75, i32* %72, align 4
  br label %76

76:                                               ; preds = %74, %67
  %77 = phi i32 [ %75, %74 ], [ %73, %67 ]
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %80

79:                                               ; preds = %76
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %65) #7
  br label %80

80:                                               ; preds = %64, %76, %79
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %45) #7
  %81 = icmp eq %"class.WTF::StringImpl"* %44, null
  br i1 %81, label %95, label %82

82:                                               ; preds = %80
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %84 = load atomic i32, i32* %83 monotonic, align 4
  %85 = and i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 0, i32 0
  %88 = load i32, i32* %87, align 4
  br i1 %86, label %89, label %91

89:                                               ; preds = %82
  %90 = add i32 %88, -1
  store i32 %90, i32* %87, align 4
  br label %91

91:                                               ; preds = %89, %82
  %92 = phi i32 [ %90, %89 ], [ %88, %82 ]
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %95

94:                                               ; preds = %91
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %44) #7
  br i1 %49, label %106, label %96

95:                                               ; preds = %91, %80
  br i1 %49, label %106, label %96

96:                                               ; preds = %94, %95
  %97 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %98 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %97, align 8
  %99 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %98, i64 0, i32 2, i32 0, i32 0
  %100 = load %"class.blink::Document"*, %"class.blink::Document"** %99, align 8
  %101 = getelementptr inbounds %"class.blink::Document", %"class.blink::Document"* %100, i64 0, i32 2
  %102 = bitcast %"class.blink::UseCounter"* %101 to void (%"class.blink::UseCounter"*, i32)***
  %103 = load void (%"class.blink::UseCounter"*, i32)**, void (%"class.blink::UseCounter"*, i32)*** %102, align 8
  %104 = getelementptr inbounds void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %103, i64 3
  %105 = load void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %104, align 8
  call void %105(%"class.blink::UseCounter"* %101, i32 845) #7
  br label %106

106:                                              ; preds = %94, %95, %33, %27, %96
  call void @_ZNK5blink7Element24SynchronizeAllAttributesEv(%"class.blink::Element"* %0) #7
  %107 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %0, i64 0, i32 3, i32 0, i32 0
  %108 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %107, align 8
  %109 = icmp eq %"class.blink::ElementData"* %108, null
  br i1 %109, label %116, label %110

110:                                              ; preds = %106
  %111 = bitcast %"class.blink::ElementData"* %108 to %"class.blink::UniqueElementData"*
  %112 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %108, i64 0, i32 0, i32 0, i32 0
  %113 = load i32, i32* %112, align 4
  %114 = and i32 %113, 1
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %119

116:                                              ; preds = %110, %106
  call void @_ZN5blink7Element23CreateUniqueElementDataEv(%"class.blink::Element"* %0) #7
  %117 = bitcast %"class.blink::ElementData"** %107 to %"class.blink::UniqueElementData"**
  %118 = load %"class.blink::UniqueElementData"*, %"class.blink::UniqueElementData"** %117, align 8
  br label %119

119:                                              ; preds = %110, %116
  %120 = phi %"class.blink::UniqueElementData"* [ %118, %116 ], [ %111, %110 ]
  %121 = bitcast %"class.WTF::AtomicString"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %121) #7
  %122 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %11, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* inttoptr (i64 -6148914691236517206 to %"class.WTF::StringImpl"*), %"class.WTF::StringImpl"** %122, align 8
  %123 = bitcast %"class.blink::QualifiedName"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %123) #7
  call void @_ZNK5blink4Attr16GetQualifiedNameEv(%"class.blink::QualifiedName"* nonnull sret %12, %"class.blink::Attr"* %1) #7
  %124 = call i32 @_ZNK5blink7Element31ExpectedTrustedTypeForAttributeERKNS_13QualifiedNameE(%"class.blink::Element"* %0, %"class.blink::QualifiedName"* nonnull dereferenceable(8) %12) #7
  %125 = call dereferenceable(8) %"class.WTF::AtomicString"* @_ZNK5blink4Attr5valueEv(%"class.blink::Attr"* %1) #7
  %126 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %125, i64 0, i32 0, i32 0, i32 0
  %127 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %126, align 8
  %128 = icmp eq %"class.WTF::StringImpl"* %127, null
  br i1 %128, label %146, label %129

129:                                              ; preds = %119
  %130 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %127, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %131 = load atomic i32, i32* %130 monotonic, align 4
  %132 = and i32 %131, 2
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %146

134:                                              ; preds = %129
  %135 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %127, i64 0, i32 0
  %136 = load i32, i32* %135, align 4
  %137 = zext i32 %136 to i33
  %138 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %137, i33 1) #7
  %139 = extractvalue { i33, i1 } %138, 1
  %140 = extractvalue { i33, i1 } %138, 0
  %141 = icmp slt i33 %140, 0
  %142 = or i1 %139, %141
  br i1 %142, label %143, label %144, !prof !3

143:                                              ; preds = %134
  call void @llvm.trap() #7
  unreachable

144:                                              ; preds = %134
  %145 = trunc i33 %140 to i32
  store i32 %145, i32* %135, align 4
  br label %146

146:                                              ; preds = %119, %129, %144
  %147 = bitcast %"class.blink::Element"* %0 to %"class.blink::ExecutionContext"* (%"class.blink::Node"*)***
  %148 = load %"class.blink::ExecutionContext"* (%"class.blink::Node"*)**, %"class.blink::ExecutionContext"* (%"class.blink::Node"*)*** %147, align 8
  %149 = getelementptr inbounds %"class.blink::ExecutionContext"* (%"class.blink::Node"*)*, %"class.blink::ExecutionContext"* (%"class.blink::Node"*)** %148, i64 10
  %150 = load %"class.blink::ExecutionContext"* (%"class.blink::Node"*)*, %"class.blink::ExecutionContext"* (%"class.blink::Node"*)** %149, align 8
  %151 = call %"class.blink::ExecutionContext"* %150(%"class.blink::Node"* %28) #7
  %152 = call %"class.WTF::StringImpl"* @_ZN5blink20TrustedTypesCheckForENS_19SpecificTrustedTypeEN3WTF6StringEPKNS_16ExecutionContextERNS_14ExceptionStateE(i32 %124, %"class.WTF::StringImpl"* %127, %"class.blink::ExecutionContext"* %151, %"class.blink::ExceptionState"* dereferenceable(72) %2) #7
  %153 = icmp eq %"class.WTF::StringImpl"* %152, null
  br i1 %153, label %177, label %154

154:                                              ; preds = %146
  %155 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %156 = load atomic i32, i32* %155 acquire, align 4
  %157 = and i32 %156, 4
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %175, label %159

159:                                              ; preds = %154
  %160 = load atomic i32, i32* %155 monotonic, align 4
  %161 = and i32 %160, 2
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %163, label %179

163:                                              ; preds = %159
  %164 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 0
  %165 = load i32, i32* %164, align 4
  %166 = zext i32 %165 to i33
  %167 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %166, i33 1) #7
  %168 = extractvalue { i33, i1 } %167, 1
  %169 = extractvalue { i33, i1 } %167, 0
  %170 = icmp slt i33 %169, 0
  %171 = or i1 %168, %170
  br i1 %171, label %172, label %173, !prof !3

172:                                              ; preds = %163
  call void @llvm.trap() #7
  unreachable

173:                                              ; preds = %163
  %174 = trunc i33 %169 to i32
  store i32 %174, i32* %164, align 4
  br label %179

175:                                              ; preds = %154
  %176 = call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %152) #7
  br label %179

177:                                              ; preds = %146
  %178 = bitcast %"class.WTF::AtomicString"* %11 to i64*
  store i64 0, i64* %178, align 8
  br label %194

179:                                              ; preds = %159, %173, %175
  %180 = phi %"class.WTF::StringImpl"* [ %152, %173 ], [ %152, %159 ], [ %176, %175 ]
  %181 = ptrtoint %"class.WTF::StringImpl"* %180 to i64
  %182 = bitcast %"class.WTF::AtomicString"* %11 to i64*
  store i64 %181, i64* %182, align 8
  %183 = load atomic i32, i32* %155 monotonic, align 4
  %184 = and i32 %183, 2
  %185 = icmp eq i32 %184, 0
  %186 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 0
  %187 = load i32, i32* %186, align 4
  br i1 %185, label %188, label %190

188:                                              ; preds = %179
  %189 = add i32 %187, -1
  store i32 %189, i32* %186, align 4
  br label %190

190:                                              ; preds = %188, %179
  %191 = phi i32 [ %189, %188 ], [ %187, %179 ]
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %193, label %194

193:                                              ; preds = %190
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %152) #7
  br label %194

194:                                              ; preds = %177, %190, %193
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* nonnull %12) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %123) #7
  %195 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %2, i64 0, i32 4
  %196 = load i32, i32* %195, align 8
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %198, label %532

198:                                              ; preds = %194
  %199 = bitcast { %"class.blink::Attribute"*, i32 }* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %199) #7
  %200 = getelementptr inbounds { %"class.blink::Attribute"*, i32 }, { %"class.blink::Attribute"*, i32 }* %13, i64 0, i32 0
  %201 = getelementptr inbounds { %"class.blink::Attribute"*, i32 }, { %"class.blink::Attribute"*, i32 }* %13, i64 0, i32 1
  %202 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %120, i64 0, i32 2, i32 0, i32 0, i32 0
  %203 = bitcast %"class.blink::Attribute"** %202 to i64*
  %204 = bitcast { %"class.blink::Attribute"*, i32 }* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %204, i8 -86, i64 16, i1 false)
  %205 = load i64, i64* %203, align 8
  %206 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %120, i64 0, i32 2, i32 0, i32 0, i32 2
  %207 = load i32, i32* %206, align 4
  %208 = bitcast { %"class.blink::Attribute"*, i32 }* %13 to i64*
  store i64 %205, i64* %208, align 8
  store i32 %207, i32* %201, align 8
  %209 = bitcast { %"class.blink::Attribute"*, i32 }* %13 to %"class.blink::AttributeCollectionGeneric"*
  %210 = bitcast %"class.blink::QualifiedName"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %210) #7
  call void @_ZNK5blink4Attr16GetQualifiedNameEv(%"class.blink::QualifiedName"* nonnull sret %14, %"class.blink::Attr"* %1) #7
  %211 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %200, align 8
  %212 = load i32, i32* %201, align 8
  %213 = zext i32 %212 to i64
  %214 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %211, i64 %213
  %215 = icmp eq i32 %212, 0
  br i1 %215, label %241, label %216

216:                                              ; preds = %198
  %217 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %14, i64 0, i32 0, i32 0
  %218 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %217, align 8
  %219 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %218, i64 0, i32 3, i32 0, i32 0, i32 0
  %220 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %218, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %221

221:                                              ; preds = %237, %216
  %222 = phi %"class.blink::Attribute"* [ %211, %216 ], [ %238, %237 ]
  %223 = phi i32 [ 0, %216 ], [ %239, %237 ]
  %224 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %222, i64 0, i32 0, i32 0, i32 0
  %225 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %224, align 8
  %226 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %225, %218
  br i1 %226, label %241, label %227

227:                                              ; preds = %221
  %228 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %225, i64 0, i32 3, i32 0, i32 0, i32 0
  %229 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %228, align 8
  %230 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %219, align 8
  %231 = icmp eq %"class.WTF::StringImpl"* %229, %230
  br i1 %231, label %232, label %237

232:                                              ; preds = %227
  %233 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %225, i64 0, i32 4, i32 0, i32 0, i32 0
  %234 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %233, align 8
  %235 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %220, align 8
  %236 = icmp eq %"class.WTF::StringImpl"* %234, %235
  br i1 %236, label %241, label %237

237:                                              ; preds = %232, %227
  %238 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %222, i64 1
  %239 = add i32 %223, 1
  %240 = icmp eq %"class.blink::Attribute"* %238, %214
  br i1 %240, label %241, label %221

241:                                              ; preds = %221, %232, %237, %198
  %242 = phi i32 [ -1, %198 ], [ -1, %237 ], [ %223, %232 ], [ %223, %221 ]
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* nonnull %14) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %210) #7
  %243 = bitcast %"class.WTF::AtomicString"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %243) #7
  %244 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %15, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %244, align 8
  %245 = icmp eq i32 %242, -1
  br i1 %245, label %320, label %246

246:                                              ; preds = %241
  %247 = call dereferenceable(16) %"class.blink::Attribute"* @_ZNK5blink26AttributeCollectionGenericIKNS_14AttributeArrayES2_E2atEj(%"class.blink::AttributeCollectionGeneric"* nonnull %209, i32 %242) #7
  %248 = bitcast %"class.blink::QualifiedName"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %248) #7
  call void @_ZNK5blink4Attr16GetQualifiedNameEv(%"class.blink::QualifiedName"* nonnull sret %16, %"class.blink::Attr"* %1) #7
  %249 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %247, i64 0, i32 0, i32 0, i32 0
  %250 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %249, align 8
  %251 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %16, i64 0, i32 0, i32 0
  %252 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %251, align 8
  %253 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %250, %252
  br i1 %253, label %254, label %255

254:                                              ; preds = %246
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* nonnull %16) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %248) #7
  br label %308

255:                                              ; preds = %246
  %256 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %250, i64 0, i32 3, i32 0, i32 0, i32 0
  %257 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %256, align 8
  %258 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %252, i64 0, i32 3, i32 0, i32 0, i32 0
  %259 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %258, align 8
  %260 = icmp eq %"class.WTF::StringImpl"* %257, %259
  br i1 %260, label %262, label %261

261:                                              ; preds = %255
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* nonnull %16) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %248) #7
  br label %268

262:                                              ; preds = %255
  %263 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %250, i64 0, i32 4, i32 0, i32 0, i32 0
  %264 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %263, align 8
  %265 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %252, i64 0, i32 4, i32 0, i32 0, i32 0
  %266 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %265, align 8
  %267 = icmp eq %"class.WTF::StringImpl"* %264, %266
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* nonnull %16) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %248) #7
  br i1 %267, label %308, label %268

268:                                              ; preds = %261, %262
  %269 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %249, align 8
  %270 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %269, i64 0, i32 3, i32 0, i32 0, i32 0
  %271 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %270, align 8
  %272 = icmp eq %"class.WTF::StringImpl"* %271, null
  br i1 %272, label %290, label %273

273:                                              ; preds = %268
  %274 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %271, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %275 = load atomic i32, i32* %274 monotonic, align 4
  %276 = and i32 %275, 2
  %277 = icmp eq i32 %276, 0
  br i1 %277, label %278, label %290

278:                                              ; preds = %273
  %279 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %271, i64 0, i32 0
  %280 = load i32, i32* %279, align 4
  %281 = zext i32 %280 to i33
  %282 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %281, i33 1) #7
  %283 = extractvalue { i33, i1 } %282, 1
  %284 = extractvalue { i33, i1 } %282, 0
  %285 = icmp slt i33 %284, 0
  %286 = or i1 %283, %285
  br i1 %286, label %287, label %288, !prof !3

287:                                              ; preds = %278
  call void @llvm.trap() #7
  unreachable

288:                                              ; preds = %278
  %289 = trunc i33 %284 to i32
  store i32 %289, i32* %279, align 4
  br label %290

290:                                              ; preds = %288, %273, %268
  %291 = ptrtoint %"class.WTF::StringImpl"* %271 to i64
  %292 = bitcast %"class.WTF::AtomicString"* %15 to i64*
  %293 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %244, align 8
  store i64 %291, i64* %292, align 8
  %294 = icmp eq %"class.WTF::StringImpl"* %293, null
  br i1 %294, label %308, label %295

295:                                              ; preds = %290
  %296 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %293, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %297 = load atomic i32, i32* %296 monotonic, align 4
  %298 = and i32 %297, 2
  %299 = icmp eq i32 %298, 0
  %300 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %293, i64 0, i32 0
  %301 = load i32, i32* %300, align 4
  br i1 %299, label %302, label %304

302:                                              ; preds = %295
  %303 = add i32 %301, -1
  store i32 %303, i32* %300, align 4
  br label %304

304:                                              ; preds = %302, %295
  %305 = phi i32 [ %303, %302 ], [ %301, %295 ]
  %306 = icmp eq i32 %305, 0
  br i1 %306, label %307, label %308

307:                                              ; preds = %304
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %293) #7
  br label %308

308:                                              ; preds = %307, %304, %290, %254, %262
  %309 = icmp eq %"class.blink::Attr"* %20, null
  br i1 %309, label %312, label %310

310:                                              ; preds = %308
  %311 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %247, i64 0, i32 1
  call void @_ZN5blink7Element34DetachAttrNodeFromElementWithValueEPNS_4AttrERKN3WTF12AtomicStringE(%"class.blink::Element"* %0, %"class.blink::Attr"* nonnull %20, %"class.WTF::AtomicString"* dereferenceable(8) %311) #7
  br label %320

312:                                              ; preds = %308
  %313 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %314 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %313, align 8
  %315 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %314, i64 0, i32 2, i32 0, i32 0
  %316 = load %"class.blink::Document"*, %"class.blink::Document"** %315, align 8
  %317 = bitcast %"class.blink::QualifiedName"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %317) #7
  call void @_ZNK5blink4Attr16GetQualifiedNameEv(%"class.blink::QualifiedName"* nonnull sret %17, %"class.blink::Attr"* %1) #7
  %318 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %247, i64 0, i32 1
  %319 = call %"class.blink::Attr"* @_ZN5blink25MakeGarbageCollectedTraitINS_4AttrEE4CallIJRNS_8DocumentEKNS_13QualifiedNameERKN3WTF12AtomicStringEEEEPS1_DpOT_(%"class.blink::Document"* dereferenceable(2848) %316, %"class.blink::QualifiedName"* nonnull dereferenceable(8) %17, %"class.WTF::AtomicString"* dereferenceable(8) %318) #7
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* nonnull %17) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %317) #7
  br label %320

320:                                              ; preds = %310, %312, %241
  %321 = phi %"class.blink::Attr"* [ %20, %241 ], [ %20, %310 ], [ %319, %312 ]
  %322 = bitcast %"class.blink::QualifiedName"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %322) #7
  call void @_ZNK5blink4Attr16GetQualifiedNameEv(%"class.blink::QualifiedName"* nonnull sret %18, %"class.blink::Attr"* %1) #7
  %323 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %122, align 8
  %324 = icmp eq %"class.WTF::StringImpl"* %323, null
  br i1 %324, label %325, label %327

325:                                              ; preds = %320
  br i1 %245, label %475, label %326

326:                                              ; preds = %325
  call void @_ZN5blink7Element23RemoveAttributeInternalEjNS0_30SynchronizationOfLazyAttributeE(%"class.blink::Element"* %0, i32 %242, i32 0) #7
  br label %475

327:                                              ; preds = %320
  br i1 %245, label %328, label %329

328:                                              ; preds = %327
  call void @_ZN5blink7Element23AppendAttributeInternalERKNS_13QualifiedNameERKN3WTF12AtomicStringENS0_30SynchronizationOfLazyAttributeE(%"class.blink::Element"* %0, %"class.blink::QualifiedName"* nonnull dereferenceable(8) %18, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %11, i32 0) #7
  br label %475

329:                                              ; preds = %327
  %330 = bitcast { %"class.blink::Attribute"*, i32 }* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %330) #7
  %331 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %107, align 8
  %332 = icmp eq %"class.blink::ElementData"* %331, null
  br i1 %332, label %333, label %335

333:                                              ; preds = %329
  %334 = load i32, i32* null, align 536870912
  br label %347

335:                                              ; preds = %329
  %336 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %331, i64 0, i32 0, i32 0, i32 0
  %337 = load i32, i32* %336, align 4
  %338 = and i32 %337, 1
  %339 = icmp eq i32 %338, 0
  br i1 %339, label %347, label %340

340:                                              ; preds = %335
  %341 = bitcast %"class.blink::ElementData"* %331 to %"class.blink::UniqueElementData"*
  %342 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %331, i64 1, i32 1
  %343 = bitcast %"class.blink::Member.14"* %342 to %"class.blink::Attribute"**
  %344 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %343, align 8
  %345 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %341, i64 0, i32 2, i32 0, i32 0, i32 2
  %346 = load i32, i32* %345, align 4
  br label %353

347:                                              ; preds = %335, %333
  %348 = phi i32 [ %334, %333 ], [ %337, %335 ]
  %349 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %331, i64 1
  %350 = bitcast %"class.blink::ElementData"* %349 to %"class.blink::Attribute"*
  %351 = lshr i32 %348, 1
  %352 = and i32 %351, 268435455
  br label %353

353:                                              ; preds = %347, %340
  %354 = phi %"class.blink::Attribute"* [ %350, %347 ], [ %344, %340 ]
  %355 = phi i32 [ %352, %347 ], [ %346, %340 ]
  %356 = getelementptr inbounds { %"class.blink::Attribute"*, i32 }, { %"class.blink::Attribute"*, i32 }* %4, i64 0, i32 0
  store %"class.blink::Attribute"* %354, %"class.blink::Attribute"** %356, align 8
  %357 = getelementptr inbounds { %"class.blink::Attribute"*, i32 }, { %"class.blink::Attribute"*, i32 }* %4, i64 0, i32 1
  store i32 %355, i32* %357, align 8
  %358 = bitcast { %"class.blink::Attribute"*, i32 }* %4 to %"class.blink::AttributeCollectionGeneric"*
  %359 = call dereferenceable(16) %"class.blink::Attribute"* @_ZNK5blink26AttributeCollectionGenericIKNS_14AttributeArrayES2_E2atEj(%"class.blink::AttributeCollectionGeneric"* nonnull %358, i32 %242) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %330) #7
  %360 = bitcast %"class.WTF::AtomicString"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %360) #7
  %361 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %5, i64 0, i32 0, i32 0, i32 0
  %362 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %359, i64 0, i32 1, i32 0, i32 0, i32 0
  %363 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %362, align 8
  store %"class.WTF::StringImpl"* %363, %"class.WTF::StringImpl"** %361, align 8
  %364 = icmp eq %"class.WTF::StringImpl"* %363, null
  br i1 %364, label %382, label %365

365:                                              ; preds = %353
  %366 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %363, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %367 = load atomic i32, i32* %366 monotonic, align 4
  %368 = and i32 %367, 2
  %369 = icmp eq i32 %368, 0
  br i1 %369, label %370, label %382

370:                                              ; preds = %365
  %371 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %363, i64 0, i32 0
  %372 = load i32, i32* %371, align 4
  %373 = zext i32 %372 to i33
  %374 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %373, i33 1) #7
  %375 = extractvalue { i33, i1 } %374, 1
  %376 = extractvalue { i33, i1 } %374, 0
  %377 = icmp slt i33 %376, 0
  %378 = or i1 %375, %377
  br i1 %378, label %379, label %380, !prof !3

379:                                              ; preds = %370
  call void @llvm.trap() #7
  unreachable

380:                                              ; preds = %370
  %381 = trunc i33 %376 to i32
  store i32 %381, i32* %371, align 4
  br label %382

382:                                              ; preds = %380, %365, %353
  %383 = bitcast %"class.blink::QualifiedName"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %383) #7
  %384 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %6, i64 0, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* inttoptr (i64 -6148914691236517206 to %"class.blink::QualifiedName::QualifiedNameImpl"*), %"class.blink::QualifiedName::QualifiedNameImpl"** %384, align 8
  %385 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %359, i64 0, i32 0, i32 0, i32 0
  %386 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %385, align 8
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %386, %"class.blink::QualifiedName::QualifiedNameImpl"** %384, align 8
  %387 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %386, null
  br i1 %387, label %395, label %388

388:                                              ; preds = %382
  %389 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %386, i64 0, i32 1
  %390 = load i32, i32* %389, align 4
  %391 = and i32 %390, 16777216
  %392 = icmp eq i32 %391, 0
  br i1 %392, label %393, label %395

393:                                              ; preds = %388
  %394 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %386, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %394) #7
  br label %395

395:                                              ; preds = %393, %388, %382
  call void @_ZN5blink7Element19WillModifyAttributeERKNS_13QualifiedNameERKN3WTF12AtomicStringES7_(%"class.blink::Element"* %0, %"class.blink::QualifiedName"* nonnull dereferenceable(8) %6, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %5, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %11) #7
  %396 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %122, align 8
  %397 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %361, align 8
  %398 = icmp eq %"class.WTF::StringImpl"* %396, %397
  br i1 %398, label %458, label %399

399:                                              ; preds = %395
  %400 = bitcast %"class.blink::MutableAttributeCollection"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %400) #7
  %401 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %107, align 8
  %402 = icmp eq %"class.blink::ElementData"* %401, null
  br i1 %402, label %409, label %403

403:                                              ; preds = %399
  %404 = bitcast %"class.blink::ElementData"* %401 to %"class.blink::UniqueElementData"*
  %405 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %401, i64 0, i32 0, i32 0, i32 0
  %406 = load i32, i32* %405, align 4
  %407 = and i32 %406, 1
  %408 = icmp eq i32 %407, 0
  br i1 %408, label %409, label %412

409:                                              ; preds = %403, %399
  call void @_ZN5blink7Element23CreateUniqueElementDataEv(%"class.blink::Element"* %0) #7
  %410 = bitcast %"class.blink::ElementData"** %107 to %"class.blink::UniqueElementData"**
  %411 = load %"class.blink::UniqueElementData"*, %"class.blink::UniqueElementData"** %410, align 8
  br label %412

412:                                              ; preds = %409, %403
  %413 = phi %"class.blink::UniqueElementData"* [ %411, %409 ], [ %404, %403 ]
  %414 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %413, i64 0, i32 2
  %415 = getelementptr inbounds %"class.blink::MutableAttributeCollection", %"class.blink::MutableAttributeCollection"* %7, i64 0, i32 0, i32 0
  store %"class.WTF::Vector.704"* %414, %"class.WTF::Vector.704"** %415, align 8
  %416 = getelementptr inbounds %"class.blink::MutableAttributeCollection", %"class.blink::MutableAttributeCollection"* %7, i64 0, i32 0
  %417 = call dereferenceable(16) %"class.blink::Attribute"* @_ZNK5blink26AttributeCollectionGenericIN3WTF6VectorINS_9AttributeELj4ENS1_18PartitionAllocatorEEERS5_E2atEj(%"class.blink::AttributeCollectionGeneric.1243"* nonnull %416, i32 %242) #7
  %418 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %417, i64 0, i32 1
  %419 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %122, align 8
  %420 = icmp eq %"class.WTF::StringImpl"* %419, null
  br i1 %420, label %438, label %421

421:                                              ; preds = %412
  %422 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %419, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %423 = load atomic i32, i32* %422 monotonic, align 4
  %424 = and i32 %423, 2
  %425 = icmp eq i32 %424, 0
  br i1 %425, label %426, label %438

426:                                              ; preds = %421
  %427 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %419, i64 0, i32 0
  %428 = load i32, i32* %427, align 4
  %429 = zext i32 %428 to i33
  %430 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %429, i33 1) #7
  %431 = extractvalue { i33, i1 } %430, 1
  %432 = extractvalue { i33, i1 } %430, 0
  %433 = icmp slt i33 %432, 0
  %434 = or i1 %431, %433
  br i1 %434, label %435, label %436, !prof !3

435:                                              ; preds = %426
  call void @llvm.trap() #7
  unreachable

436:                                              ; preds = %426
  %437 = trunc i33 %432 to i32
  store i32 %437, i32* %427, align 4
  br label %438

438:                                              ; preds = %436, %421, %412
  %439 = ptrtoint %"class.WTF::StringImpl"* %419 to i64
  %440 = bitcast %"class.WTF::AtomicString"* %418 to i64*
  %441 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %418, i64 0, i32 0, i32 0, i32 0
  %442 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %441, align 8
  store i64 %439, i64* %440, align 8
  %443 = icmp eq %"class.WTF::StringImpl"* %442, null
  br i1 %443, label %457, label %444

444:                                              ; preds = %438
  %445 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %442, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %446 = load atomic i32, i32* %445 monotonic, align 4
  %447 = and i32 %446, 2
  %448 = icmp eq i32 %447, 0
  %449 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %442, i64 0, i32 0
  %450 = load i32, i32* %449, align 4
  br i1 %448, label %451, label %453

451:                                              ; preds = %444
  %452 = add i32 %450, -1
  store i32 %452, i32* %449, align 4
  br label %453

453:                                              ; preds = %451, %444
  %454 = phi i32 [ %452, %451 ], [ %450, %444 ]
  %455 = icmp eq i32 %454, 0
  br i1 %455, label %456, label %457

456:                                              ; preds = %453
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %442) #7
  br label %457

457:                                              ; preds = %456, %453, %438
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %400) #7
  br label %458

458:                                              ; preds = %457, %395
  call void @_ZN5blink7Element18DidModifyAttributeERKNS_13QualifiedNameERKN3WTF12AtomicStringES7_(%"class.blink::Element"* %0, %"class.blink::QualifiedName"* nonnull dereferenceable(8) %6, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %5, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %11) #7
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* nonnull %6) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %383) #7
  %459 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %361, align 8
  %460 = icmp eq %"class.WTF::StringImpl"* %459, null
  br i1 %460, label %474, label %461

461:                                              ; preds = %458
  %462 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %459, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %463 = load atomic i32, i32* %462 monotonic, align 4
  %464 = and i32 %463, 2
  %465 = icmp eq i32 %464, 0
  %466 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %459, i64 0, i32 0
  %467 = load i32, i32* %466, align 4
  br i1 %465, label %468, label %470

468:                                              ; preds = %461
  %469 = add i32 %467, -1
  store i32 %469, i32* %466, align 4
  br label %470

470:                                              ; preds = %468, %461
  %471 = phi i32 [ %469, %468 ], [ %467, %461 ]
  %472 = icmp eq i32 %471, 0
  br i1 %472, label %473, label %474

473:                                              ; preds = %470
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %459) #7
  br label %474

474:                                              ; preds = %473, %470, %458
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %360) #7
  br label %475

475:                                              ; preds = %325, %326, %328, %474
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* nonnull %18) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %322) #7
  call void @_ZN5blink4Attr15AttachToElementEPNS_7ElementERKN3WTF12AtomicStringE(%"class.blink::Attr"* %1, %"class.blink::Element"* %0, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %15) #7
  %476 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %477 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %476, align 8
  %478 = getelementptr inbounds %"class.blink::Attr", %"class.blink::Attr"* %1, i64 0, i32 0
  call void @_ZN5blink9TreeScope13AdoptIfNeededERNS_4NodeE(%"class.blink::TreeScope"* %477, %"class.blink::Node"* dereferenceable(64) %478) #7
  %479 = load i32, i32* %29, align 8
  %480 = and i32 %479, 1
  %481 = icmp eq i32 %480, 0
  br i1 %481, label %486, label %482

482:                                              ; preds = %475
  %483 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %0, i64 0, i32 0, i32 0, i32 6, i32 0, i32 0
  %484 = bitcast %"class.blink::NodeData"** %483 to %"class.blink::NodeRareData"**
  %485 = load %"class.blink::NodeRareData"*, %"class.blink::NodeRareData"** %484, align 8
  br label %488

486:                                              ; preds = %475
  %487 = call dereferenceable(48) %"class.blink::NodeRareData"* @_ZN5blink4Node14CreateRareDataEv(%"class.blink::Node"* %28) #7
  br label %488

488:                                              ; preds = %482, %486
  %489 = phi %"class.blink::NodeRareData"* [ %485, %482 ], [ %487, %486 ]
  %490 = bitcast %"class.blink::NodeRareData"* %489 to %"class.blink::ElementRareData"*
  %491 = bitcast %"class.blink::Attr"** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %491)
  store %"class.blink::Attr"* %1, %"class.blink::Attr"** %8, align 8
  %492 = call dereferenceable(16) %"class.blink::HeapVector.762"* @_ZN5blink15ElementRareData18EnsureAttrNodeListEv(%"class.blink::ElementRareData"* %490) #7
  %493 = getelementptr inbounds %"class.blink::HeapVector.762", %"class.blink::HeapVector.762"* %492, i64 0, i32 0, i32 0, i32 0, i32 2
  %494 = load i32, i32* %493, align 4
  %495 = getelementptr inbounds %"class.blink::HeapVector.762", %"class.blink::HeapVector.762"* %492, i64 0, i32 0, i32 0, i32 0, i32 1
  %496 = load i32, i32* %495, align 8
  %497 = icmp eq i32 %494, %496
  br i1 %497, label %513, label %498, !prof !3

498:                                              ; preds = %488
  %499 = ptrtoint %"class.blink::Attr"* %1 to i64
  %500 = getelementptr inbounds %"class.blink::HeapVector.762", %"class.blink::HeapVector.762"* %492, i64 0, i32 0, i32 0, i32 0, i32 0
  %501 = load %"class.blink::Member.768"*, %"class.blink::Member.768"** %500, align 8
  %502 = zext i32 %494 to i64
  %503 = getelementptr inbounds %"class.blink::Member.768", %"class.blink::Member.768"* %501, i64 %502
  %504 = bitcast %"class.blink::Member.768"* %503 to i64*
  store atomic i64 %499, i64* %504 monotonic, align 8
  %505 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %506 = icmp eq i32 %505, 0
  br i1 %506, label %510, label %507

507:                                              ; preds = %498
  %508 = bitcast %"class.blink::Attr"* %1 to i8*
  %509 = call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %508) #7
  br label %510

510:                                              ; preds = %507, %498
  %511 = load i32, i32* %493, align 4
  %512 = add i32 %511, 1
  store i32 %512, i32* %493, align 4
  br label %515

513:                                              ; preds = %488
  %514 = getelementptr inbounds %"class.blink::HeapVector.762", %"class.blink::HeapVector.762"* %492, i64 0, i32 0
  call void @_ZN3WTF6VectorIN5blink6MemberINS1_4AttrEEELj0ENS1_13HeapAllocatorEE14AppendSlowCaseIRPS3_EEvOT_(%"class.WTF::Vector.765"* %514, %"class.blink::Attr"** nonnull dereferenceable(8) %8) #7
  br label %515

515:                                              ; preds = %510, %513
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %491)
  %516 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %244, align 8
  %517 = icmp eq %"class.WTF::StringImpl"* %516, null
  br i1 %517, label %531, label %518

518:                                              ; preds = %515
  %519 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %516, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %520 = load atomic i32, i32* %519 monotonic, align 4
  %521 = and i32 %520, 2
  %522 = icmp eq i32 %521, 0
  %523 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %516, i64 0, i32 0
  %524 = load i32, i32* %523, align 4
  br i1 %522, label %525, label %527

525:                                              ; preds = %518
  %526 = add i32 %524, -1
  store i32 %526, i32* %523, align 4
  br label %527

527:                                              ; preds = %525, %518
  %528 = phi i32 [ %526, %525 ], [ %524, %518 ]
  %529 = icmp eq i32 %528, 0
  br i1 %529, label %530, label %531

530:                                              ; preds = %527
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %516) #7
  br label %531

531:                                              ; preds = %515, %527, %530
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %243) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %199) #7
  br label %532

532:                                              ; preds = %194, %531
  %533 = phi %"class.blink::Attr"* [ %321, %531 ], [ null, %194 ]
  %534 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %122, align 8
  %535 = icmp eq %"class.WTF::StringImpl"* %534, null
  br i1 %535, label %549, label %536

536:                                              ; preds = %532
  %537 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %534, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %538 = load atomic i32, i32* %537 monotonic, align 4
  %539 = and i32 %538, 2
  %540 = icmp eq i32 %539, 0
  %541 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %534, i64 0, i32 0
  %542 = load i32, i32* %541, align 4
  br i1 %540, label %543, label %545

543:                                              ; preds = %536
  %544 = add i32 %542, -1
  store i32 %544, i32* %541, align 4
  br label %545

545:                                              ; preds = %543, %536
  %546 = phi i32 [ %544, %543 ], [ %542, %536 ]
  %547 = icmp eq i32 %546, 0
  br i1 %547, label %548, label %549

548:                                              ; preds = %545
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %534) #7
  br label %549

549:                                              ; preds = %532, %545, %548
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %121) #7
  br label %550

550:                                              ; preds = %3, %549, %26
  %551 = phi %"class.blink::Attr"* [ null, %26 ], [ %533, %549 ], [ %1, %3 ]
  ret %"class.blink::Attr"* %551
}

declare %"class.blink::Attr"* @_ZN5blink7Element12AttrIfExistsERKNS_13QualifiedNameE(%"class.blink::Element"*, %"class.blink::QualifiedName"* dereferenceable(8)) local_unnamed_addr #2

declare void @_ZNK5blink4Attr16GetQualifiedNameEv(%"class.blink::QualifiedName"* sret, %"class.blink::Attr"*) local_unnamed_addr #2

declare void @_ZN5blink14ExceptionState17ThrowDOMExceptionENS_16DOMExceptionCodeEPKc(%"class.blink::ExceptionState"*, i32, i8*) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZNK3WTF6String10LowerASCIIEv(%"class.WTF::String"*) local_unnamed_addr #2

declare void @_ZNK5blink7Element24SynchronizeAllAttributesEv(%"class.blink::Element"*) local_unnamed_addr #2

declare dereferenceable(8) %"class.WTF::AtomicString"* @_ZNK5blink4Attr5valueEv(%"class.blink::Attr"*) local_unnamed_addr #2

declare void @_ZN5blink7Element34DetachAttrNodeFromElementWithValueEPNS_4AttrERKN3WTF12AtomicStringE(%"class.blink::Element"*, %"class.blink::Attr"*, %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #2

declare void @_ZN5blink4Attr15AttachToElementEPNS_7ElementERKN3WTF12AtomicStringE(%"class.blink::Attr"*, %"class.blink::Element"*, %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #2

declare void @_ZN5blink9TreeScope13AdoptIfNeededERNS_4NodeE(%"class.blink::TreeScope"*, %"class.blink::Node"* dereferenceable(64)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink7Element21RemoveAttributeHintedERKN3WTF12AtomicStringENS1_17AtomicStringTable10WeakResultE(%"class.blink::Element"*, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8), i64) local_unnamed_addr #0 align 2 {
  %4 = alloca { %"class.blink::Attribute"*, i32 }, align 8
  %5 = alloca %"class.WTF::StringView", align 8
  %6 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %0, i64 0, i32 3, i32 0, i32 0
  %7 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %6, align 8
  %8 = icmp eq %"class.blink::ElementData"* %7, null
  br i1 %8, label %105, label %9

9:                                                ; preds = %3
  %10 = bitcast { %"class.blink::Attribute"*, i32 }* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #7
  %11 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %7, i64 0, i32 0, i32 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = and i32 %12, 1
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %22, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.blink::ElementData"* %7 to %"class.blink::UniqueElementData"*
  %17 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %7, i64 1, i32 1
  %18 = bitcast %"class.blink::Member.14"* %17 to %"class.blink::Attribute"**
  %19 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %18, align 8
  %20 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %16, i64 0, i32 2, i32 0, i32 0, i32 2
  %21 = load i32, i32* %20, align 4
  br label %27

22:                                               ; preds = %9
  %23 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %7, i64 1
  %24 = bitcast %"class.blink::ElementData"* %23 to %"class.blink::Attribute"*
  %25 = lshr i32 %12, 1
  %26 = and i32 %25, 268435455
  br label %27

27:                                               ; preds = %15, %22
  %28 = phi %"class.blink::Attribute"* [ %24, %22 ], [ %19, %15 ]
  %29 = phi i32 [ %26, %22 ], [ %21, %15 ]
  %30 = getelementptr inbounds { %"class.blink::Attribute"*, i32 }, { %"class.blink::Attribute"*, i32 }* %4, i64 0, i32 0
  store %"class.blink::Attribute"* %28, %"class.blink::Attribute"** %30, align 8
  %31 = getelementptr inbounds { %"class.blink::Attribute"*, i32 }, { %"class.blink::Attribute"*, i32 }* %4, i64 0, i32 1
  store i32 %29, i32* %31, align 8
  %32 = bitcast { %"class.blink::Attribute"*, i32 }* %4 to %"class.blink::AttributeCollectionGeneric"*
  %33 = bitcast %"class.WTF::StringView"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %33) #7
  %34 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %35 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %34, align 8
  %36 = icmp eq %"class.WTF::StringImpl"* %35, null
  br i1 %36, label %37, label %41

37:                                               ; preds = %27
  %38 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 1
  store i8* null, i8** %38, align 8
  %39 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %40 = bitcast %"class.WTF::StringView"* %5 to i64*
  store i64 %39, i64* %40, align 8
  br label %48

41:                                               ; preds = %27
  %42 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 0
  store %"class.WTF::StringImpl"* %35, %"class.WTF::StringImpl"** %42, align 8
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 1
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 1
  %46 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 1
  %47 = bitcast i8** %46 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %45, %"class.WTF::StringImpl"** %47, align 8
  br label %48

48:                                               ; preds = %37, %41
  %49 = phi i32 [ %44, %41 ], [ 0, %37 ]
  %50 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 2
  store i32 %49, i32* %50, align 8
  %51 = zext i32 %29 to i64
  %52 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %28, i64 %51
  %53 = icmp eq i32 %29, 0
  br i1 %53, label %82, label %54

54:                                               ; preds = %48
  %55 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %56 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %55, i64 0, i32 0, i32 0, i32 0
  %57 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %56, align 8
  br label %58

58:                                               ; preds = %72, %54
  %59 = phi %"class.blink::Attribute"* [ %28, %54 ], [ %74, %72 ]
  %60 = phi i32 [ 0, %54 ], [ %75, %72 ]
  %61 = phi i8 [ 0, %54 ], [ %73, %72 ]
  %62 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %59, i64 0, i32 0, i32 0, i32 0
  %63 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %62, align 8
  %64 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %63, i64 0, i32 2, i32 0, i32 0, i32 0
  %65 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %64, align 8
  %66 = icmp eq %"class.WTF::StringImpl"* %65, %57
  br i1 %66, label %67, label %72

67:                                               ; preds = %58
  %68 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %63, i64 0, i32 3
  %69 = bitcast %"class.WTF::AtomicString"* %68 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = icmp eq i64 %70, %2
  br i1 %71, label %83, label %72

72:                                               ; preds = %67, %58
  %73 = phi i8 [ %61, %67 ], [ 1, %58 ]
  %74 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %59, i64 1
  %75 = add i32 %60, 1
  %76 = icmp eq %"class.blink::Attribute"* %74, %52
  br i1 %76, label %77, label %58

77:                                               ; preds = %72
  %78 = and i8 %73, 1
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %82, label %80

80:                                               ; preds = %77
  %81 = call i32 @_ZNK5blink26AttributeCollectionGenericIKNS_14AttributeArrayES2_E14FindWithPrefixERKN3WTF10StringViewE(%"class.blink::AttributeCollectionGeneric"* nonnull %32, %"class.WTF::StringView"* nonnull dereferenceable(24) %5) #7
  br label %83

82:                                               ; preds = %77, %48
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %33) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #7
  br label %86

83:                                               ; preds = %67, %80
  %84 = phi i32 [ %81, %80 ], [ %60, %67 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %33) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #7
  %85 = icmp eq i32 %84, -1
  br i1 %85, label %86, label %104

86:                                               ; preds = %82, %83
  %87 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names10kStyleAttrE, align 8
  %88 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %87, i64 0, i32 0, i32 0
  %89 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %88, align 8
  %90 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %89, i64 0, i32 3
  %91 = bitcast %"class.WTF::AtomicString"* %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = icmp eq i64 %92, %2
  br i1 %93, label %94, label %105, !prof !3

94:                                               ; preds = %86
  %95 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %6, align 8
  %96 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %95, i64 0, i32 0, i32 0, i32 0
  %97 = load i32, i32* %96, align 4
  %98 = and i32 %97, 1073741824
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %105, label %100

100:                                              ; preds = %94
  %101 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %0, i64 0, i32 0, i32 0
  %102 = call zeroext i1 @_ZNK5blink4Node15IsStyledElementEv(%"class.blink::Node"* %101) #7
  br i1 %102, label %103, label %105

103:                                              ; preds = %100
  call void @_ZN5blink7Element30RemoveAllInlineStylePropertiesEv(%"class.blink::Element"* %0) #7
  br label %105

104:                                              ; preds = %83
  call void @_ZN5blink7Element23RemoveAttributeInternalEjNS0_30SynchronizationOfLazyAttributeE(%"class.blink::Element"* %0, i32 %84, i32 0) #7
  br label %105

105:                                              ; preds = %94, %104, %103, %100, %86, %3
  ret void
}

declare zeroext i1 @_ZNK5blink4Node15IsStyledElementEv(%"class.blink::Node"*) local_unnamed_addr #2

declare void @_ZN5blink7Element30RemoveAllInlineStylePropertiesEv(%"class.blink::Element"*) local_unnamed_addr #2

declare void @_ZN5blink7Element23RemoveAttributeInternalEjNS0_30SynchronizationOfLazyAttributeE(%"class.blink::Element"*, i32, i32) local_unnamed_addr #2

declare i32 @_ZNK3WTF10StringImpl17ComputeASCIIFlagsEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #2

declare void @_ZN3WTF9ThreadingC1Ev(%"class.WTF::Threading"*) unnamed_addr #2

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #2

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #2

declare i64 @_ZN3WTF17AtomicStringTable22WeakFindLowercasedSlowERKNS_10StringViewE(%"class.WTF::AtomicStringTable"*, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #2

declare i64 @_ZN3WTF17AtomicStringTable12WeakFindSlowERKNS_10StringViewE(%"class.WTF::AtomicStringTable"*, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #2

declare void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #4

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

declare %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"*) local_unnamed_addr #2

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

declare void @_ZN5blink7Element23AppendAttributeInternalERKNS_13QualifiedNameERKN3WTF12AtomicStringENS0_30SynchronizationOfLazyAttributeE(%"class.blink::Element"*, %"class.blink::QualifiedName"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8), i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.blink::Attribute"* @_ZNK5blink26AttributeCollectionGenericIKNS_14AttributeArrayES2_E2atEj(%"class.blink::AttributeCollectionGeneric"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #7
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.blink::AttributeCollectionGeneric", %"class.blink::AttributeCollectionGeneric"* %0, i64 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #7
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0), i8* %14, i8* %15) #7
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.6, i64 0, i64 0), i32 55, %"class.logging::CheckOpResult"* nonnull %4) #7
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #7
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #7
  %23 = getelementptr inbounds %"class.blink::AttributeCollectionGeneric", %"class.blink::AttributeCollectionGeneric"* %0, i64 0, i32 0, i32 0
  %24 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %24, i64 %25
  ret %"class.blink::Attribute"* %26
}

declare void @_ZN5blink7Element19WillModifyAttributeERKNS_13QualifiedNameERKN3WTF12AtomicStringES7_(%"class.blink::Element"*, %"class.blink::QualifiedName"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.blink::Attribute"* @_ZNK5blink26AttributeCollectionGenericIN3WTF6VectorINS_9AttributeELj4ENS1_18PartitionAllocatorEEERS5_E2atEj(%"class.blink::AttributeCollectionGeneric.1243"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #7
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.blink::AttributeCollectionGeneric.1243", %"class.blink::AttributeCollectionGeneric.1243"* %0, i64 0, i32 0
  %9 = load %"class.WTF::Vector.704"*, %"class.WTF::Vector.704"** %8, align 8
  %10 = getelementptr inbounds %"class.WTF::Vector.704", %"class.WTF::Vector.704"* %9, i64 0, i32 0, i32 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12)
  %13 = icmp ugt i32 %11, %1
  br i1 %13, label %14, label %15

14:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  store i8* null, i8** %7, align 8
  br label %24

15:                                               ; preds = %2
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #7
  %17 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %11) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0), i8* %16, i8* %17) #7
  %18 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %19 = load i8*, i8** %18, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  store i8* %19, i8** %7, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %24, label %21

21:                                               ; preds = %15
  %22 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.6, i64 0, i64 0), i32 55, %"class.logging::CheckOpResult"* nonnull %4) #7
  %23 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #7
  br label %24

24:                                               ; preds = %14, %15, %21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #7
  %25 = load %"class.WTF::Vector.704"*, %"class.WTF::Vector.704"** %8, align 8
  %26 = getelementptr inbounds %"class.WTF::Vector.704", %"class.WTF::Vector.704"* %25, i64 0, i32 0, i32 0, i32 0
  %27 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %26, align 8
  %28 = zext i32 %1 to i64
  %29 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %27, i64 %28
  ret %"class.blink::Attribute"* %29
}

declare void @_ZN5blink7Element18DidModifyAttributeERKNS_13QualifiedNameERKN3WTF12AtomicStringES7_(%"class.blink::Element"*, %"class.blink::QualifiedName"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #2

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

declare zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZNK5blink13QualifiedName8ToStringEv(%"class.blink::QualifiedName"*) local_unnamed_addr #2

declare void @_ZN5blink7Element23CreateUniqueElementDataEv(%"class.blink::Element"*) local_unnamed_addr #2

declare dereferenceable(48) %"class.blink::NodeRareData"* @_ZN5blink4Node14CreateRareDataEv(%"class.blink::Node"*) local_unnamed_addr #2

declare dereferenceable(16) %"class.blink::HeapVector.762"* @_ZN5blink15ElementRareData18EnsureAttrNodeListEv(%"class.blink::ElementRareData"*) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink6MemberINS1_4AttrEEELj0ENS1_13HeapAllocatorEE14AppendSlowCaseIRPS3_EEvOT_(%"class.WTF::Vector.765"*, %"class.blink::Attr"** dereferenceable(8)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.765", %"class.WTF::Vector.765"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.765", %"class.WTF::Vector.765"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = lshr i32 %7, 2
  %9 = add i32 %7, 1
  %10 = add i32 %9, %8
  %11 = icmp ugt i32 %10, 4
  %12 = select i1 %11, i32 %10, i32 4
  %13 = icmp ugt i32 %12, %5
  %14 = select i1 %13, i32 %12, i32 %5
  tail call void @_ZN3WTF6VectorIN5blink6MemberINS1_4AttrEEELj0ENS1_13HeapAllocatorEE15ReserveCapacityEj(%"class.WTF::Vector.765"* %0, i32 %14) #7
  %15 = getelementptr inbounds %"class.WTF::Vector.765", %"class.WTF::Vector.765"* %0, i64 0, i32 0, i32 0, i32 0
  %16 = load %"class.blink::Member.768"*, %"class.blink::Member.768"** %15, align 8
  %17 = load i32, i32* %3, align 4
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds %"class.blink::Member.768", %"class.blink::Member.768"* %16, i64 %18
  %20 = bitcast %"class.blink::Attr"** %1 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.blink::Member.768"* %19 to i64*
  store atomic i64 %21, i64* %22 monotonic, align 8
  %23 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %28, label %25

25:                                               ; preds = %2
  %26 = inttoptr i64 %21 to i8*
  %27 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %26) #7
  br label %28

28:                                               ; preds = %2, %25
  %29 = load i32, i32* %3, align 4
  %30 = add i32 %29, 1
  store i32 %30, i32* %3, align 4
  ret void
}

declare zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink6MemberINS1_4AttrEEELj0ENS1_13HeapAllocatorEE15ReserveCapacityEj(%"class.WTF::Vector.765"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.WTF::Vector.765", %"class.WTF::Vector.765"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = icmp ult i32 %5, %1
  br i1 %6, label %7, label %59, !prof !2

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.WTF::Vector.765", %"class.WTF::Vector.765"* %0, i64 0, i32 0, i32 0, i32 0
  %9 = load %"class.blink::Member.768"*, %"class.blink::Member.768"** %8, align 8
  %10 = icmp eq %"class.blink::Member.768"* %9, null
  %11 = zext i32 %1 to i64
  %12 = tail call i64 @_ZN5blink13HeapAllocator13QuantizedSizeINS_6MemberINS_4AttrEEEEEmm(i64 %11) #7
  br i1 %10, label %13, label %24

13:                                               ; preds = %7
  %14 = lshr i64 %12, 3
  %15 = tail call %"class.blink::HeapVectorBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_17HeapVectorBackingINS_6MemberINS_4AttrEEEN3WTF12VectorTraitsIS4_EEEEE4CallEm(i64 %14) #7
  %16 = ptrtoint %"class.blink::HeapVectorBacking"* %15 to i64
  %17 = bitcast %"class.WTF::Vector.765"* %0 to i64*
  store atomic i64 %16, i64* %17 monotonic, align 8
  %18 = trunc i64 %14 to i32
  store i32 %18, i32* %4, align 8
  %19 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %59, label %21

21:                                               ; preds = %13
  %22 = getelementptr inbounds %"class.blink::HeapVectorBacking", %"class.blink::HeapVectorBacking"* %15, i64 0, i32 0
  %23 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %22) #7
  br label %59

24:                                               ; preds = %7
  %25 = load %"class.blink::Member.768"*, %"class.blink::Member.768"** %8, align 8
  %26 = icmp eq %"class.blink::Member.768"* %25, null
  br i1 %26, label %33, label %27

27:                                               ; preds = %24
  %28 = bitcast %"class.blink::Member.768"* %25 to i8*
  %29 = tail call zeroext i1 @_ZN5blink13HeapAllocator19ExpandVectorBackingEPvm(i8* nonnull %28, i64 %12) #7
  br i1 %29, label %30, label %33

30:                                               ; preds = %27
  %31 = lshr i64 %12, 3
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %4, align 8
  br label %59

33:                                               ; preds = %24, %27
  %34 = load %"class.WTF::ThreadSpecific.1270"*, %"class.WTF::ThreadSpecific.1270"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %35 = getelementptr inbounds %"class.WTF::ThreadSpecific.1270", %"class.WTF::ThreadSpecific.1270"* %34, i64 0, i32 1
  %36 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %35) #7
  %37 = icmp eq i8* %36, null
  br i1 %37, label %38, label %40, !prof !3

38:                                               ; preds = %33
  %39 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #7
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %35, i8* %39) #7
  br label %40

40:                                               ; preds = %38, %33
  %41 = phi i8* [ %39, %38 ], [ %36, %33 ]
  %42 = bitcast i8* %41 to %"class.blink::ThreadState"**
  %43 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %42, align 8
  %44 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %43, i64 0, i32 6
  %45 = load i8, i8* %44, align 8, !range !28
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %51, label %47

47:                                               ; preds = %40
  %48 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %43, i64 0, i32 16
  %49 = load i32, i32* %48, align 4
  %50 = icmp eq i32 %49, 1
  br i1 %50, label %55, label %51

51:                                               ; preds = %40, %47
  %52 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %43, i64 0, i32 13
  %53 = load i64, i64* %52, align 8
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %58, label %55

55:                                               ; preds = %47, %51
  %56 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %56) #7
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.7, i64 0, i64 0), i32 1810, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.8, i64 0, i64 0)) #7
  %57 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56) #7
  br label %58

58:                                               ; preds = %51, %55
  call void @_ZN3WTF6VectorIN5blink6MemberINS1_4AttrEEELj0ENS1_13HeapAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.765"* %0, i32 %1)
  br label %59

59:                                               ; preds = %30, %21, %13, %2, %58
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink6MemberINS1_4AttrEEELj0ENS1_13HeapAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.765"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %13

4:                                                ; preds = %2
  %5 = bitcast %"class.WTF::Vector.765"* %0 to i8**
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::Vector.765", %"class.WTF::Vector.765"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = bitcast %"class.WTF::Vector.765"* %0 to i64*
  store atomic i64 0, i64* %10 monotonic, align 8
  %11 = getelementptr inbounds %"class.WTF::Vector.765", %"class.WTF::Vector.765"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %11, align 8
  %12 = shl nuw nsw i64 %9, 3
  tail call void @_ZN3WTF13AtomicMemzeroEPvm(i8* %6, i64 %12) #7
  tail call void @_ZN5blink13HeapAllocator17FreeVectorBackingEPv(i8* %6) #7
  br label %50

13:                                               ; preds = %2
  %14 = zext i32 %1 to i64
  %15 = tail call i64 @_ZN5blink13HeapAllocator13QuantizedSizeINS_6MemberINS_4AttrEEEEEmm(i64 %14) #7
  %16 = lshr i64 %15, 3
  %17 = tail call %"class.blink::HeapVectorBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_17HeapVectorBackingINS_6MemberINS_4AttrEEEN3WTF12VectorTraitsIS4_EEEEE4CallEm(i64 %16) #7
  %18 = ptrtoint %"class.blink::HeapVectorBacking"* %17 to i64
  %19 = getelementptr inbounds %"class.WTF::Vector.765", %"class.WTF::Vector.765"* %0, i64 0, i32 0, i32 0, i32 0
  %20 = load %"class.blink::Member.768"*, %"class.blink::Member.768"** %19, align 8
  %21 = getelementptr inbounds %"class.WTF::Vector.765", %"class.WTF::Vector.765"* %0, i64 0, i32 0, i32 0, i32 2
  %22 = icmp ne %"class.blink::HeapVectorBacking"* %17, null
  %23 = icmp ne %"class.blink::Member.768"* %20, null
  %24 = and i1 %22, %23
  %25 = bitcast %"class.blink::Member.768"* %20 to i8*
  br i1 %24, label %28, label %26, !prof !2

26:                                               ; preds = %13
  %27 = bitcast %"class.WTF::Vector.765"* %0 to i8**
  br label %35

28:                                               ; preds = %13
  %29 = load i32, i32* %21, align 4
  %30 = zext i32 %29 to i64
  %31 = shl nuw nsw i64 %30, 3
  %32 = getelementptr inbounds %"class.blink::HeapVectorBacking", %"class.blink::HeapVectorBacking"* %17, i64 0, i32 0
  tail call void @_ZN3WTF17AtomicWriteMemcpyEPvPKvm(i8* nonnull %32, i8* nonnull %25, i64 %31) #7
  %33 = bitcast %"class.WTF::Vector.765"* %0 to i8**
  %34 = load i8*, i8** %33, align 8
  br label %35

35:                                               ; preds = %26, %28
  %36 = phi i8** [ %27, %26 ], [ %33, %28 ]
  %37 = phi i8* [ %25, %26 ], [ %34, %28 ]
  %38 = load i32, i32* %21, align 4
  %39 = zext i32 %38 to i64
  %40 = shl nuw nsw i64 %39, 3
  tail call void @_ZN3WTF13AtomicMemzeroEPvm(i8* %37, i64 %40) #7
  %41 = load i8*, i8** %36, align 8
  tail call void @_ZN5blink13HeapAllocator17FreeVectorBackingEPv(i8* %41) #7
  %42 = bitcast %"class.WTF::Vector.765"* %0 to i64*
  store atomic i64 %18, i64* %42 monotonic, align 8
  %43 = trunc i64 %16 to i32
  %44 = getelementptr inbounds %"class.WTF::Vector.765", %"class.WTF::Vector.765"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %43, i32* %44, align 8
  %45 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %50, label %47

47:                                               ; preds = %35
  %48 = getelementptr inbounds %"class.blink::HeapVectorBacking", %"class.blink::HeapVectorBacking"* %17, i64 0, i32 0
  %49 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %48) #7
  br label %50

50:                                               ; preds = %47, %35, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN5blink13HeapAllocator13QuantizedSizeINS_6MemberINS_4AttrEEEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #7
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 16777216
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #7
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 16777216) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.9, i64 0, i64 0), i8* %11, i8* %12) #7
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.10, i64 0, i64 0), i32 39, %"class.logging::CheckOpResult"* nonnull %3) #7
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #7
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #7
  %20 = shl i64 %0, 3
  ret i64 %20
}

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::HeapVectorBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_17HeapVectorBackingINS_6MemberINS_4AttrEEEN3WTF12VectorTraitsIS4_EEEEE4CallEm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #7
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp eq i64 %0, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 0) #7
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 0) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.11, i64 0, i64 0), i8* %11, i8* %12) #7
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.12, i64 0, i64 0), i32 86, %"class.logging::CheckOpResult"* nonnull %3) #7
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #7
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #7
  %20 = shl i64 %0, 3
  %21 = call i8* @_ZN5blink17HeapVectorBackingINS_6MemberINS_4AttrEEEN3WTF12VectorTraitsIS3_EEE14AllocateObjectIS7_EEPvm(i64 %20)
  %22 = bitcast i8* %21 to %"class.blink::HeapVectorBacking"*
  %23 = getelementptr inbounds i8, i8* %21, i64 -4
  %24 = bitcast i8* %23 to i16*
  %25 = load atomic i16, i16* %24 monotonic, align 2
  %26 = or i16 %25, 1
  store atomic i16 %26, i16* %24 release, align 2
  ret %"class.blink::HeapVectorBacking"* %22
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink17HeapVectorBackingINS_6MemberINS_4AttrEEEN3WTF12VectorTraitsIS3_EEE14AllocateObjectIS7_EEPvm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** bitcast ([0 x i8]* @_ZN5blink11ThreadState26main_thread_state_storage_E to %"class.blink::ThreadHeap"**), align 8
  %6 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_4AttrEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %10 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %9, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_4AttrEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_4AttrEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #7
  br label %11

11:                                               ; preds = %1, %8
  %12 = phi i32 [ %6, %1 ], [ %10, %8 ]
  %13 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %5, i64 0, i32 19, i64 4
  %14 = bitcast %"class.blink::BaseArena"** %13 to %"class.blink::NormalPageArena"**
  %15 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %14, align 8
  %16 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #7
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #7
  %19 = icmp ult i64 %0, -8
  br i1 %19, label %20, label %21

20:                                               ; preds = %11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #7
  store i8* null, i8** %17, align 8
  br label %31

21:                                               ; preds = %11
  %22 = add nsw i64 %0, 8
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %22) #7
  %24 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.13, i64 0, i64 0), i8* %23, i8* %24) #7
  %25 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %26 = load i8*, i8** %25, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #7
  store i8* %26, i8** %17, align 8
  %27 = icmp eq i8* %26, null
  br i1 %27, label %31, label %28

28:                                               ; preds = %21
  %29 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.14, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %3) #7
  %30 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #7
  br label %31

31:                                               ; preds = %20, %21, %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #7
  %32 = add i64 %0, 15
  %33 = and i64 %32, -8
  %34 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %15, i64 0, i32 4
  %35 = load i64, i64* %34, align 8
  %36 = icmp ult i64 %35, %33
  br i1 %36, label %69, label %37, !prof !3

37:                                               ; preds = %31
  %38 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %15, i64 0, i32 3
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 %33
  store i8* %40, i8** %38, align 8
  %41 = sub i64 %35, %33
  store i64 %41, i64* %34, align 8
  %42 = bitcast i8* %39 to i32*
  store i32 0, i32* %42, align 4
  %43 = getelementptr inbounds i8, i8* %39, i64 4
  %44 = bitcast i8* %43 to i16*
  %45 = trunc i32 %12 to i16
  %46 = shl i16 %45, 2
  store atomic i16 %46, i16* %44 monotonic, align 2
  %47 = lshr exact i64 %33, 1
  %48 = trunc i64 %47 to i16
  %49 = getelementptr inbounds i8, i8* %39, i64 6
  %50 = bitcast i8* %49 to i16*
  store i16 %48, i16* %50, align 2
  %51 = ptrtoint i8* %39 to i64
  %52 = and i64 %51, -131072
  %53 = inttoptr i64 %52 to i8*
  %54 = getelementptr inbounds i8, i8* %53, i64 4400
  %55 = bitcast i8* %54 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %56 = bitcast i8* %54 to i64*
  %57 = load i64, i64* %56, align 16
  %58 = sub i64 %51, %57
  %59 = lshr i64 %58, 3
  %60 = lshr i64 %58, 6
  %61 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %55, i64 0, i32 0, i32 1, i64 %60
  %62 = load i8, i8* %61, align 1
  %63 = trunc i64 %59 to i32
  %64 = and i32 %63, 7
  %65 = shl i32 1, %64
  %66 = trunc i32 %65 to i8
  %67 = or i8 %62, %66
  store atomic i8 %67, i8* %61 release, align 1
  %68 = getelementptr inbounds i8, i8* %39, i64 8
  br label %72

69:                                               ; preds = %31
  %70 = zext i32 %12 to i64
  %71 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %15, i64 %33, i64 %70) #7
  br label %72

72:                                               ; preds = %37, %69
  %73 = phi i8* [ %68, %37 ], [ %71, %69 ]
  ret i8* %73
}

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_17HeapVectorBackingINS_6MemberINS_4AttrEEEN3WTF12VectorTraitsIS4_EEEEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::Member.768"*
  %4 = getelementptr inbounds i8, i8* %1, i64 -2
  %5 = bitcast i8* %4 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = lshr i16 %6, 2
  %8 = icmp eq i16 %7, 0
  br i1 %8, label %9, label %17, !prof !3

9:                                                ; preds = %2
  %10 = getelementptr inbounds i8, i8* %1, i64 -8
  %11 = ptrtoint i8* %10 to i64
  %12 = and i64 %11, -131072
  %13 = inttoptr i64 %12 to i8*
  %14 = getelementptr inbounds i8, i8* %13, i64 4144
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 16
  br label %20

17:                                               ; preds = %2
  %18 = zext i16 %7 to i64
  %19 = shl nuw nsw i64 %18, 3
  br label %20

20:                                               ; preds = %17, %9
  %21 = phi i64 [ %16, %9 ], [ %19, %17 ]
  %22 = add i64 %21, -8
  %23 = lshr i64 %22, 3
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %41, label %25

25:                                               ; preds = %20
  %26 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  br label %27

27:                                               ; preds = %38, %25
  %28 = phi i64 [ 0, %25 ], [ %39, %38 ]
  %29 = getelementptr inbounds %"class.blink::Member.768", %"class.blink::Member.768"* %3, i64 %28
  %30 = bitcast %"class.blink::Member.768"* %29 to i64*
  %31 = load atomic i64, i64* %30 monotonic, align 8
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %38, label %33

33:                                               ; preds = %27
  %34 = inttoptr i64 %31 to i8*
  %35 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %26, align 8
  %36 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %35, i64 5
  %37 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %36, align 8
  tail call void %37(%"class.blink::Visitor"* %0, i8* nonnull %34, i8* nonnull %34, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_4AttrEE5TraceEPNS_7VisitorEPKv) #7
  br label %38

38:                                               ; preds = %33, %27
  %39 = add nuw nsw i64 %28, 1
  %40 = icmp eq i64 %39, %23
  br i1 %40, label %41, label %27

41:                                               ; preds = %38, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_17HeapVectorBackingINS_6MemberINS_4AttrEEEN3WTF12VectorTraitsIS4_EEEEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.15, i64 0, i64 0), i8 1 }
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_4AttrEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::Attr"*
  tail call void @_ZNK5blink4Attr5TraceEPNS_7VisitorE(%"class.blink::Attr"* %3, %"class.blink::Visitor"* %0) #7
  ret void
}

declare void @_ZNK5blink4Attr5TraceEPNS_7VisitorE(%"class.blink::Attr"*, %"class.blink::Visitor"*) unnamed_addr #2

declare zeroext i1 @_ZN5blink13HeapAllocator19ExpandVectorBackingEPvm(i8*, i64) local_unnamed_addr #2

declare void @_ZN3WTF17AtomicWriteMemcpyEPvPKvm(i8*, i8*, i64) local_unnamed_addr #2

declare void @_ZN3WTF13AtomicMemzeroEPvm(i8*, i64) local_unnamed_addr #2

declare void @_ZN5blink13HeapAllocator17FreeVectorBackingEPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK5blink26AttributeCollectionGenericIKNS_14AttributeArrayES2_E14FindWithPrefixERKN3WTF10StringViewE(%"class.blink::AttributeCollectionGeneric"*, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringView", align 8
  %4 = getelementptr inbounds %"class.blink::AttributeCollectionGeneric", %"class.blink::AttributeCollectionGeneric"* %0, i64 0, i32 0, i32 0
  %5 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %4, align 8
  %6 = getelementptr inbounds %"class.blink::AttributeCollectionGeneric", %"class.blink::AttributeCollectionGeneric"* %0, i64 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %5, i64 %8
  %10 = icmp eq i32 %7, 0
  br i1 %10, label %58, label %11

11:                                               ; preds = %2
  %12 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %13 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %12, i64 0, i32 0, i32 0, i32 0
  %14 = bitcast %"class.WTF::StringView"* %3 to i8*
  %15 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 0
  %16 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 1
  %17 = bitcast i8** %16 to %"class.WTF::StringImpl"**
  %18 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 2
  %19 = bitcast %"class.WTF::StringView"* %3 to i64*
  br label %20

20:                                               ; preds = %11, %54
  %21 = phi %"class.blink::Attribute"* [ %5, %11 ], [ %55, %54 ]
  %22 = phi i32 [ 0, %11 ], [ %56, %54 ]
  %23 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %21, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %23, align 8
  %25 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %24, i64 0, i32 2, i32 0, i32 0, i32 0
  %26 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %25, align 8
  %27 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %28 = icmp eq %"class.WTF::StringImpl"* %26, %27
  br i1 %28, label %54, label %29

29:                                               ; preds = %20
  %30 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %21, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #7
  %31 = call %"class.WTF::StringImpl"* @_ZNK5blink13QualifiedName8ToStringEv(%"class.blink::QualifiedName"* %30) #7
  %32 = icmp eq %"class.WTF::StringImpl"* %31, null
  br i1 %32, label %33, label %36

33:                                               ; preds = %29
  store i8* null, i8** %16, align 8
  %34 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %34, i64* %19, align 8
  store i32 0, i32* %18, align 8
  %35 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* dereferenceable(24) %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %3) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #7
  br i1 %35, label %58, label %54

36:                                               ; preds = %29
  store %"class.WTF::StringImpl"* %31, %"class.WTF::StringImpl"** %15, align 8
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 1
  store %"class.WTF::StringImpl"* %39, %"class.WTF::StringImpl"** %17, align 8
  store i32 %38, i32* %18, align 8
  %40 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* dereferenceable(24) %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %3) #7
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load atomic i32, i32* %41 monotonic, align 4
  %43 = and i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 0
  %46 = load i32, i32* %45, align 4
  br i1 %44, label %47, label %49

47:                                               ; preds = %36
  %48 = add i32 %46, -1
  store i32 %48, i32* %45, align 4
  br label %49

49:                                               ; preds = %47, %36
  %50 = phi i32 [ %48, %47 ], [ %46, %36 ]
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %53

52:                                               ; preds = %49
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %31) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #7
  br i1 %40, label %58, label %54

53:                                               ; preds = %49
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #7
  br i1 %40, label %58, label %54

54:                                               ; preds = %20, %52, %33, %53
  %55 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %21, i64 1
  %56 = add i32 %22, 1
  %57 = icmp eq %"class.blink::Attribute"* %55, %9
  br i1 %57, label %58, label %20

58:                                               ; preds = %54, %53, %33, %52, %2
  %59 = phi i32 [ -1, %2 ], [ %22, %52 ], [ %22, %33 ], [ %22, %53 ], [ -1, %54 ]
  ret i32 %59
}

declare zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* dereferenceable(24), %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32, i8** dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_12AtomicStringEEES2_E6lengthEv(%"class.WTF::StringAppend"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.1271", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %10 = bitcast %"class.WTF::StringTypeAdapter.1271"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #7
  %11 = getelementptr inbounds %"class.WTF::StringTypeAdapter.1271", %"class.WTF::StringTypeAdapter.1271"* %4, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  %13 = bitcast %"class.WTF::StringTypeAdapter.1271"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 16, i1 false)
  %14 = load i8*, i8** %12, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.1271"* nonnull %4, i8* %14) #7
  %15 = call i32 @_ZNK3WTF12StringAppendIPKcNS_12AtomicStringEE6lengthEv(%"class.WTF::StringAppend.702"* %9) #7
  %16 = load i32, i32* %11, align 8
  %17 = add i32 %16, %15
  %18 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #7
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %19, align 8
  %20 = call i32 @_ZNK3WTF12StringAppendIPKcNS_12AtomicStringEE6lengthEv(%"class.WTF::StringAppend.702"* %9) #7
  %21 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21)
  %22 = icmp ult i32 %17, %20
  br i1 %22, label %24, label %23

23:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* null, i8** %19, align 8
  br label %33

24:                                               ; preds = %1
  %25 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #7
  %26 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %20) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.16, i64 0, i64 0), i8* %25, i8* %26) #7
  %27 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %28 = load i8*, i8** %27, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* %28, i8** %19, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %24
  %31 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.17, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #7
  %32 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #7
  br label %33

33:                                               ; preds = %23, %24, %30
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #7
  %34 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #7
  %35 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %35, align 8
  %36 = load i32, i32* %11, align 8
  %37 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
  %38 = icmp ult i32 %17, %36
  br i1 %38, label %40, label %39

39:                                               ; preds = %33
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* null, i8** %35, align 8
  br label %49

40:                                               ; preds = %33
  %41 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #7
  %42 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %36) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.18, i64 0, i64 0), i8* %41, i8* %42) #7
  %43 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* %44, i8** %35, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.17, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #7
  %48 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #7
  br label %49

49:                                               ; preds = %39, %40, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #7
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_IPKcNS_12AtomicStringEEES2_E7WriteToEPh(%"class.WTF::StringAppend"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.1271", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.1272", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter.1271", align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %7 = bitcast %"class.WTF::StringTypeAdapter.1271"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #7
  %8 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  %9 = bitcast %"class.WTF::StringTypeAdapter.1271"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false)
  %10 = load i8*, i8** %8, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.1271"* nonnull %5, i8* %10) #7
  %11 = bitcast %"class.WTF::StringTypeAdapter.1271"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #7
  %12 = getelementptr inbounds %"class.WTF::StringTypeAdapter.1271", %"class.WTF::StringTypeAdapter.1271"* %3, i64 0, i32 1
  %13 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 16, i1 false) #7
  %14 = load i8*, i8** %13, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.1271"* nonnull %3, i8* %14) #7
  %15 = bitcast %"class.WTF::StringTypeAdapter.1272"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #7
  %16 = getelementptr inbounds %"class.WTF::StringTypeAdapter.1272", %"class.WTF::StringTypeAdapter.1272"* %4, i64 0, i32 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.WTF::StringTypeAdapter.1272", %"class.WTF::StringTypeAdapter.1272"* %4, i64 0, i32 0, i32 0, i32 2
  %18 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 24, i1 false) #7
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = icmp eq %"class.WTF::StringImpl"* %19, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %2
  %22 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %29

23:                                               ; preds = %2
  %24 = ptrtoint %"class.WTF::StringImpl"* %19 to i64
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 1
  %28 = bitcast %"class.WTF::StringImpl"* %27 to i8*
  br label %29

29:                                               ; preds = %21, %23
  %30 = phi i8* [ null, %21 ], [ %28, %23 ]
  %31 = phi i64 [ %22, %21 ], [ %24, %23 ]
  %32 = phi i32 [ 0, %21 ], [ %26, %23 ]
  %33 = bitcast %"class.WTF::StringTypeAdapter.1272"* %4 to i64*
  store i64 %31, i64* %33, align 8
  store i8* %30, i8** %16, align 8
  store i32 %32, i32* %17, align 8
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.1271"* nonnull %3, i8* %1) #7
  %34 = getelementptr inbounds %"class.WTF::StringTypeAdapter.1272", %"class.WTF::StringTypeAdapter.1272"* %4, i64 0, i32 0
  %35 = load i32, i32* %12, align 8
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %1, i64 %36
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.1273"* nonnull %34, i8* %37) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #7
  %38 = call i32 @_ZNK3WTF12StringAppendIPKcNS_12AtomicStringEE6lengthEv(%"class.WTF::StringAppend.702"* %6) #7
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %1, i64 %39
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.1271"* nonnull %5, i8* %40) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #7
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32, i16** dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_IPKcNS_12AtomicStringEEES2_E7WriteToEPDs(%"class.WTF::StringAppend"*, i16*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.1271", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.1272", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter.1271", align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %7 = bitcast %"class.WTF::StringTypeAdapter.1271"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #7
  %8 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  %9 = bitcast %"class.WTF::StringTypeAdapter.1271"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false)
  %10 = load i8*, i8** %8, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.1271"* nonnull %5, i8* %10) #7
  %11 = bitcast %"class.WTF::StringTypeAdapter.1271"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #7
  %12 = getelementptr inbounds %"class.WTF::StringTypeAdapter.1271", %"class.WTF::StringTypeAdapter.1271"* %3, i64 0, i32 1
  %13 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 16, i1 false) #7
  %14 = load i8*, i8** %13, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.1271"* nonnull %3, i8* %14) #7
  %15 = bitcast %"class.WTF::StringTypeAdapter.1272"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #7
  %16 = getelementptr inbounds %"class.WTF::StringTypeAdapter.1272", %"class.WTF::StringTypeAdapter.1272"* %4, i64 0, i32 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.WTF::StringTypeAdapter.1272", %"class.WTF::StringTypeAdapter.1272"* %4, i64 0, i32 0, i32 0, i32 2
  %18 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 24, i1 false) #7
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = icmp eq %"class.WTF::StringImpl"* %19, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %2
  %22 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %29

23:                                               ; preds = %2
  %24 = ptrtoint %"class.WTF::StringImpl"* %19 to i64
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 1
  %28 = bitcast %"class.WTF::StringImpl"* %27 to i8*
  br label %29

29:                                               ; preds = %21, %23
  %30 = phi i8* [ null, %21 ], [ %28, %23 ]
  %31 = phi i64 [ %22, %21 ], [ %24, %23 ]
  %32 = phi i32 [ 0, %21 ], [ %26, %23 ]
  %33 = bitcast %"class.WTF::StringTypeAdapter.1272"* %4 to i64*
  store i64 %31, i64* %33, align 8
  store i8* %30, i8** %16, align 8
  store i32 %32, i32* %17, align 8
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.1271"* nonnull %3, i16* %1) #7
  %34 = getelementptr inbounds %"class.WTF::StringTypeAdapter.1272", %"class.WTF::StringTypeAdapter.1272"* %4, i64 0, i32 0
  %35 = load i32, i32* %12, align 8
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds i16, i16* %1, i64 %36
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.1273"* nonnull %34, i16* %37) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #7
  %38 = call i32 @_ZNK3WTF12StringAppendIPKcNS_12AtomicStringEE6lengthEv(%"class.WTF::StringAppend.702"* %6) #7
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds i16, i16* %1, i64 %39
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.1271"* nonnull %5, i16* %40) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #7
  ret void
}

declare void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.1271"*, i8*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendIPKcNS_12AtomicStringEE6lengthEv(%"class.WTF::StringAppend.702"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.1271", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = bitcast %"class.WTF::StringTypeAdapter.1271"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #7
  %10 = getelementptr inbounds %"class.WTF::StringTypeAdapter.1271", %"class.WTF::StringTypeAdapter.1271"* %4, i64 0, i32 1
  %11 = getelementptr inbounds %"class.WTF::StringAppend.702", %"class.WTF::StringAppend.702"* %0, i64 0, i32 0
  %12 = bitcast %"class.WTF::StringTypeAdapter.1271"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 16, i1 false)
  %13 = load i8*, i8** %11, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.1271"* nonnull %4, i8* %13) #7
  %14 = getelementptr inbounds %"class.WTF::StringAppend.702", %"class.WTF::StringAppend.702"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = icmp eq %"class.WTF::StringImpl"* %15, null
  br i1 %16, label %20, label %17

17:                                               ; preds = %1
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  br label %20

20:                                               ; preds = %1, %17
  %21 = phi i32 [ %19, %17 ], [ 0, %1 ]
  %22 = load i32, i32* %10, align 8
  %23 = add i32 %22, %21
  %24 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #7
  %25 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %25, align 8
  %26 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26)
  %27 = icmp ult i32 %23, %22
  br i1 %27, label %29, label %28

28:                                               ; preds = %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* null, i8** %25, align 8
  br label %38

29:                                               ; preds = %20
  %30 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #7
  %31 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %22) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.16, i64 0, i64 0), i8* %30, i8* %31) #7
  %32 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* %33, i8** %25, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %38, label %35

35:                                               ; preds = %29
  %36 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.17, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #7
  %37 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #7
  br label %38

38:                                               ; preds = %28, %29, %35
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #7
  %39 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #7
  %40 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %40, align 8
  %41 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41)
  %42 = icmp ult i32 %23, %21
  br i1 %42, label %44, label %43

43:                                               ; preds = %38
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41)
  store i8* null, i8** %40, align 8
  br label %53

44:                                               ; preds = %38
  %45 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #7
  %46 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %21) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.18, i64 0, i64 0), i8* %45, i8* %46) #7
  %47 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %48 = load i8*, i8** %47, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41)
  store i8* %48, i8** %40, align 8
  %49 = icmp eq i8* %48, null
  br i1 %49, label %53, label %50

50:                                               ; preds = %44
  %51 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %51) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.17, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #7
  %52 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %51) #7
  br label %53

53:                                               ; preds = %43, %44, %50
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #7
  ret i32 %23
}

declare void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.1271"*, i8*) local_unnamed_addr #2

declare void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.1273"*, i8*) local_unnamed_addr #2

declare void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.1271"*, i16*) local_unnamed_addr #2

declare void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.1273"*, i16*) local_unnamed_addr #2

declare void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN5blink13QualifiedName17QualifiedNameImplD1Ev(%"class.blink::QualifiedName::QualifiedNameImpl"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::Attr"* @_ZN5blink25MakeGarbageCollectedTraitINS_4AttrEE4CallIJRNS_8DocumentEKNS_13QualifiedNameERKN3WTF12AtomicStringEEEEPS1_DpOT_(%"class.blink::Document"* dereferenceable(2848), %"class.blink::QualifiedName"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** bitcast ([0 x i8]* @_ZN5blink11ThreadState26main_thread_state_storage_E to %"class.blink::ThreadHeap"**), align 8
  %5 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %9 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %8, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #7
  br label %10

10:                                               ; preds = %7, %3
  %11 = phi i32 [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %4, i64 0, i32 19, i64 6
  %13 = bitcast %"class.blink::BaseArena"** %12 to %"class.blink::NormalPageArena"**
  %14 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %14, i64 0, i32 4
  %16 = load i64, i64* %15, align 8
  %17 = icmp ult i64 %16, 96
  br i1 %17, label %48, label %18, !prof !3

18:                                               ; preds = %10
  %19 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %14, i64 0, i32 3
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 96
  store i8* %21, i8** %19, align 8
  %22 = add i64 %16, -96
  store i64 %22, i64* %15, align 8
  %23 = bitcast i8* %20 to i32*
  store i32 0, i32* %23, align 4
  %24 = getelementptr inbounds i8, i8* %20, i64 4
  %25 = bitcast i8* %24 to i16*
  %26 = trunc i32 %11 to i16
  %27 = shl i16 %26, 2
  store atomic i16 %27, i16* %25 monotonic, align 2
  %28 = getelementptr inbounds i8, i8* %20, i64 6
  %29 = bitcast i8* %28 to i16*
  store i16 48, i16* %29, align 2
  %30 = ptrtoint i8* %20 to i64
  %31 = and i64 %30, -131072
  %32 = inttoptr i64 %31 to i8*
  %33 = getelementptr inbounds i8, i8* %32, i64 4400
  %34 = bitcast i8* %33 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %35 = bitcast i8* %33 to i64*
  %36 = load i64, i64* %35, align 16
  %37 = sub i64 %30, %36
  %38 = lshr i64 %37, 3
  %39 = lshr i64 %37, 6
  %40 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %34, i64 0, i32 0, i32 1, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = trunc i64 %38 to i32
  %43 = and i32 %42, 7
  %44 = shl i32 1, %43
  %45 = trunc i32 %44 to i8
  %46 = or i8 %41, %45
  store atomic i8 %46, i8* %40 release, align 1
  %47 = getelementptr inbounds i8, i8* %20, i64 8
  br label %51

48:                                               ; preds = %10
  %49 = zext i32 %11 to i64
  %50 = tail call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %14, i64 96, i64 %49) #7
  br label %51

51:                                               ; preds = %18, %48
  %52 = phi i8* [ %47, %18 ], [ %50, %48 ]
  %53 = bitcast i8* %52 to %"class.blink::Attr"*
  tail call void @_ZN5blink4AttrC1ERNS_8DocumentERKNS_13QualifiedNameERKN3WTF12AtomicStringE(%"class.blink::Attr"* %53, %"class.blink::Document"* dereferenceable(2848) %0, %"class.blink::QualifiedName"* dereferenceable(8) %1, %"class.WTF::AtomicString"* dereferenceable(8) %2) #7
  %54 = getelementptr inbounds i8, i8* %52, i64 -4
  %55 = bitcast i8* %54 to i16*
  %56 = load atomic i16, i16* %55 monotonic, align 2
  %57 = or i16 %56, 1
  store atomic i16 %57, i16* %55 release, align 2
  ret %"class.blink::Attr"* %53
}

declare void @_ZN5blink4AttrC1ERNS_8DocumentERKNS_13QualifiedNameERKN3WTF12AtomicStringE(%"class.blink::Attr"*, %"class.blink::Document"* dereferenceable(2848), %"class.blink::QualifiedName"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_15ScriptWrappableEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::ScriptWrappable"*
  %4 = bitcast i8* %1 to void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)**, void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)*, void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)** %5, i64 5
  %7 = load void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)*, void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::ScriptWrappable"* %3, %"class.blink::Visitor"* %0) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_15ScriptWrappableEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::ScriptWrappable"*
  %3 = bitcast i8* %0 to void (%"class.blink::ScriptWrappable"*)***
  %4 = load void (%"class.blink::ScriptWrappable"*)**, void (%"class.blink::ScriptWrappable"*)*** %3, align 8
  %5 = getelementptr inbounds void (%"class.blink::ScriptWrappable"*)*, void (%"class.blink::ScriptWrappable"*)** %4, i64 1
  %6 = load void (%"class.blink::ScriptWrappable"*)*, void (%"class.blink::ScriptWrappable"*)** %5, align 8
  tail call void %6(%"class.blink::ScriptWrappable"* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_15ScriptWrappableEE7GetNameEPKv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::NameClient"*
  %3 = bitcast i8* %0 to i8* (%"class.blink::NameClient"*)***
  %4 = load i8* (%"class.blink::NameClient"*)**, i8* (%"class.blink::NameClient"*)*** %3, align 8
  %5 = load i8* (%"class.blink::NameClient"*)*, i8* (%"class.blink::NameClient"*)** %4, align 8
  %6 = tail call i8* %5(%"class.blink::NameClient"* %2) #7
  %7 = insertvalue { i8*, i8 } undef, i8* %6, 0
  %8 = insertvalue { i8*, i8 } %7, i8 0, 1
  ret { i8*, i8 } %8
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{!"branch_weights", i32 2146410443, i32 1073205}
!5 = !{!"branch_weights", i32 1073205, i32 2146410443}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.isvectorized", i32 1}
!8 = distinct !{!8, !9, !7}
!9 = !{!"llvm.loop.unroll.runtime.disable"}
!10 = distinct !{!10, !7}
!11 = distinct !{!11, !9, !7}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZNSt3__19make_pairIRKjN5blink13QualifiedNameEEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENS6_IT0_E4typeEEEOS7_OSA_: argument 0"}
!14 = distinct !{!14, !"_ZNSt3__19make_pairIRKjN5blink13QualifiedNameEEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENS6_IT0_E4typeEEEOS7_OSA_"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_ZNSt3__19make_pairIRjKN5blink13QualifiedNameEEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENS6_IT0_E4typeEEEOS7_OSA_: argument 0"}
!17 = distinct !{!17, !"_ZNSt3__19make_pairIRjKN5blink13QualifiedNameEEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENS6_IT0_E4typeEEEOS7_OSA_"}
!18 = !{!19}
!19 = distinct !{!19, !20, !"_ZNSt3__19make_pairIRjKN5blink13QualifiedNameEEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENS6_IT0_E4typeEEEOS7_OSA_: argument 0"}
!20 = distinct !{!20, !"_ZNSt3__19make_pairIRjKN5blink13QualifiedNameEEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENS6_IT0_E4typeEEEOS7_OSA_"}
!21 = !{!"branch_weights", i32 4001, i32 1}
!22 = !{!23}
!23 = distinct !{!23, !24, !"_ZN3WTFplIPKcNS_12AtomicStringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_: argument 0"}
!24 = distinct !{!24, !"_ZN3WTFplIPKcNS_12AtomicStringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"_ZN3WTFplIPKcNS_12AtomicStringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_: argument 0"}
!27 = distinct !{!27, !"_ZN3WTFplIPKcNS_12AtomicStringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_"}
!28 = !{i8 0, i8 2}
