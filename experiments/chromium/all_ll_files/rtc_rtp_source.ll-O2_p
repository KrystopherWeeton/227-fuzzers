; ModuleID = '../../third_party/blink/renderer/platform/peerconnection/rtc_rtp_source.cc'
source_filename = "../../third_party/blink/renderer/platform/peerconnection/rtc_rtp_source.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::RTCRtpSource" = type { %"class.webrtc::RtpSource" }
%"class.webrtc::RtpSource" = type <{ i64, i32, i32, %"struct.webrtc::RtpSource::Extensions", i32, [4 x i8] }>
%"struct.webrtc::RtpSource::Extensions" = type { %"class.absl::optional", %"class.absl::optional.0" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i8 }
%"class.absl::optional.0" = type { %"class.absl::optional_internal::optional_data.1" }
%"class.absl::optional_internal::optional_data.1" = type { %"class.absl::optional_internal::optional_data_base.2" }
%"class.absl::optional_internal::optional_data_base.2" = type { %"class.absl::optional_internal::optional_data_dtor_base.3" }
%"class.absl::optional_internal::optional_data_dtor_base.3" = type { i8, %union.anon.4 }
%union.anon.4 = type { %"struct.webrtc::AbsoluteCaptureTime" }
%"struct.webrtc::AbsoluteCaptureTime" = type { i64, %"class.absl::optional.5" }
%"class.absl::optional.5" = type { %"class.absl::optional_internal::optional_data.6" }
%"class.absl::optional_internal::optional_data.6" = type { %"class.absl::optional_internal::optional_data_base.7" }
%"class.absl::optional_internal::optional_data_base.7" = type { %"class.absl::optional_internal::optional_data_dtor_base.8" }
%"class.absl::optional_internal::optional_data_dtor_base.8" = type { i8, %union.anon.9 }
%union.anon.9 = type { i64 }

@_ZN5blink12RTCRtpSourceC1ERKN6webrtc9RtpSourceE = hidden unnamed_addr alias void (%"class.blink::RTCRtpSource"*, %"class.webrtc::RtpSource"*), void (%"class.blink::RTCRtpSource"*, %"class.webrtc::RtpSource"*)* @_ZN5blink12RTCRtpSourceC2ERKN6webrtc9RtpSourceE
@_ZN5blink12RTCRtpSourceD1Ev = hidden unnamed_addr alias void (%"class.blink::RTCRtpSource"*), void (%"class.blink::RTCRtpSource"*)* @_ZN5blink12RTCRtpSourceD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12RTCRtpSourceC2ERKN6webrtc9RtpSourceE(%"class.blink::RTCRtpSource"* nocapture, %"class.webrtc::RtpSource"* nocapture readonly dereferenceable(64)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::RTCRtpSource"* %0 to i8*
  %4 = bitcast %"class.webrtc::RtpSource"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 64, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5blink12RTCRtpSourceD2Ev(%"class.blink::RTCRtpSource"* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK5blink12RTCRtpSource10SourceTypeEv(%"class.blink::RTCRtpSource"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::RTCRtpSource", %"class.blink::RTCRtpSource"* %0, i64 0, i32 0, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 1
  %5 = zext i1 %4 to i32
  ret i32 %5
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK5blink12RTCRtpSource9TimestampEv(%"class.blink::RTCRtpSource"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::RTCRtpSource", %"class.blink::RTCRtpSource"* %0, i64 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = icmp slt i64 %3, 0
  %5 = select i1 %4, i64 -9223372036854775808, i64 9223372036854775807
  %6 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %3, i64 1000) #6
  %7 = extractvalue { i64, i1 } %6, 1
  %8 = extractvalue { i64, i1 } %6, 0
  %9 = select i1 %7, i64 %5, i64 %8, !prof !2
  ret i64 %9
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK5blink12RTCRtpSource6SourceEv(%"class.blink::RTCRtpSource"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::RTCRtpSource", %"class.blink::RTCRtpSource"* %0, i64 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden { i8, double } @_ZNK5blink12RTCRtpSource10AudioLevelEv(%"class.blink::RTCRtpSource"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::RTCRtpSource", %"class.blink::RTCRtpSource"* %0, i64 0, i32 0, i32 3
  %3 = bitcast %"struct.webrtc::RtpSource::Extensions"* %2 to i16*
  %4 = load i16, i16* %3, align 8
  %5 = trunc i16 %4 to i8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %15, label %7

7:                                                ; preds = %1
  %8 = lshr i16 %4, 8
  %9 = trunc i16 %8 to i8
  %10 = icmp ugt i8 %9, 126
  br i1 %10, label %15, label %11

11:                                               ; preds = %7
  %12 = uitofp i8 %9 to double
  %13 = fdiv double %12, -2.000000e+01
  %14 = tail call double @pow(double 1.000000e+01, double %13) #6
  br label %15

15:                                               ; preds = %1, %7, %11
  %16 = phi i8 [ 1, %11 ], [ 0, %1 ], [ 1, %7 ]
  %17 = phi double [ %14, %11 ], [ undef, %1 ], [ 0.000000e+00, %7 ]
  %18 = insertvalue { i8, double } undef, i8 %16, 0
  %19 = insertvalue { i8, double } %18, double %17, 1
  ret { i8, double } %19
}

; Function Attrs: nofree nounwind
declare double @pow(double, double) local_unnamed_addr #4

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK5blink12RTCRtpSource12RtpTimestampEv(%"class.blink::RTCRtpSource"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::RTCRtpSource", %"class.blink::RTCRtpSource"* %0, i64 0, i32 0, i32 4
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden { i8, i64 } @_ZNK5blink12RTCRtpSource16CaptureTimestampEv(%"class.blink::RTCRtpSource"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::RTCRtpSource", %"class.blink::RTCRtpSource"* %0, i64 0, i32 0, i32 3, i32 1, i32 0, i32 0, i32 0, i32 0
  %3 = load i8, i8* %2, align 8
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %12, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::RTCRtpSource", %"class.blink::RTCRtpSource"* %0, i64 0, i32 0, i32 3, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = uitofp i64 %7 to double
  %9 = fmul double %8, 0x3E8F400000000000
  %10 = tail call double @llvm.round.f64(double %9) #6
  %11 = fptosi double %10 to i64
  br label %12

12:                                               ; preds = %1, %5
  %13 = phi i8 [ 1, %5 ], [ 0, %1 ]
  %14 = phi i64 [ %11, %5 ], [ undef, %1 ]
  %15 = insertvalue { i8, i64 } undef, i8 %13, 0
  %16 = insertvalue { i8, i64 } %15, i64 %14, 1
  ret { i8, i64 } %16
}

; Function Attrs: nounwind ssp uwtable
define hidden { i8, i64 } @_ZNK5blink12RTCRtpSource23SenderCaptureTimeOffsetEv(%"class.blink::RTCRtpSource"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::RTCRtpSource", %"class.blink::RTCRtpSource"* %0, i64 0, i32 0, i32 3, i32 1, i32 0, i32 0, i32 0, i32 0
  %3 = load i8, i8* %2, align 8
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %16, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::RTCRtpSource", %"class.blink::RTCRtpSource"* %0, i64 0, i32 0, i32 3, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %7 = load i8, i8* %6, align 8
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %16, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.blink::RTCRtpSource", %"class.blink::RTCRtpSource"* %0, i64 0, i32 0, i32 3, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = uitofp i64 %11 to double
  %13 = fmul double %12, 0x3E8F400000000000
  %14 = tail call double @llvm.round.f64(double %13) #6
  %15 = fptosi double %14 to i64
  br label %16

16:                                               ; preds = %1, %5, %9
  %17 = phi i8 [ 1, %9 ], [ 0, %5 ], [ 0, %1 ]
  %18 = phi i64 [ %15, %9 ], [ undef, %5 ], [ undef, %1 ]
  %19 = insertvalue { i8, i64 } undef, i8 %17, 0
  %20 = insertvalue { i8, i64 } %19, i64 %18, 1
  ret { i8, i64 } %20
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.smul.with.overflow.i64(i64, i64) #5

; Function Attrs: nounwind readnone speculatable
declare double @llvm.round.f64(double) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
