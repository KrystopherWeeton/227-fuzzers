; ModuleID = '../../v8/src/compiler/backend/gap-resolver.cc'
source_filename = "../../v8/src/compiler/backend/gap-resolver.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::compiler::GapResolver" = type <{ %"class.v8::internal::compiler::GapResolver::Assembler"*, i8, [7 x i8] }>
%"class.v8::internal::compiler::GapResolver::Assembler" = type { i32 (...)** }
%"class.v8::internal::compiler::ParallelMove" = type { %"class.v8::internal::ZoneVector" }
%"class.v8::internal::ZoneVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"**, %"class.std::__1::__compressed_pair" }
%"class.v8::internal::compiler::MoveOperands" = type { %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand" }
%"class.v8::internal::compiler::InstructionOperand" = type { i64 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.0" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::compiler::MoveOperands"** }
%"struct.std::__1::__compressed_pair_elem.0" = type { %"class.v8::internal::ZoneAllocator" }
%"class.v8::internal::ZoneAllocator" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.5" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type opaque
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIPN2v88internal8compiler12MoveOperandsENS2_13ZoneAllocatorIS5_EEE8__appendEm = comdat any

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler11GapResolver7ResolveEPNS1_12ParallelMoveE(%"class.v8::internal::compiler::GapResolver"* nocapture readonly, %"class.v8::internal::compiler::ParallelMove"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %1, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %5 = bitcast %"class.v8::internal::compiler::MoveOperands"*** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.v8::internal::compiler::ParallelMove"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %131, label %11

11:                                               ; preds = %2
  %12 = ashr exact i64 %9, 3
  %13 = inttoptr i64 %8 to %"class.v8::internal::compiler::MoveOperands"**
  %14 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  br label %21

15:                                               ; preds = %114
  %16 = load i64, i64* %5, align 8
  %17 = load i64, i64* %7, align 8
  %18 = sub i64 %16, %17
  %19 = ashr exact i64 %18, 3
  %20 = icmp eq i64 %118, %19
  br i1 %20, label %131, label %122

21:                                               ; preds = %120, %11
  %22 = phi %"class.v8::internal::compiler::MoveOperands"** [ %13, %11 ], [ %121, %120 ]
  %23 = phi i64 [ %12, %11 ], [ %118, %120 ]
  %24 = phi i64 [ 0, %11 ], [ %117, %120 ]
  %25 = phi i8 [ 0, %11 ], [ %116, %120 ]
  %26 = phi i8 [ 0, %11 ], [ %115, %120 ]
  %27 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %22, i64 %24
  %28 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %27, align 8
  %29 = getelementptr %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %28, i64 0, i32 0, i32 0
  %30 = load i64, i64* %29, align 8
  %31 = and i64 %30, 7
  switch i64 %31, label %34 [
    i64 0, label %71
    i64 4, label %32
  ]

32:                                               ; preds = %21
  %33 = add nuw i64 %24, 1
  br label %82

34:                                               ; preds = %21
  %35 = icmp ugt i64 %31, 4
  br i1 %35, label %36, label %49

36:                                               ; preds = %34
  %37 = and i64 %30, 24
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %39, label %44

39:                                               ; preds = %36
  %40 = lshr i64 %30, 5
  %41 = trunc i64 %40 to i8
  %42 = icmp ugt i8 %41, 11
  %43 = select i1 %42, i64 416, i64 0
  br label %44

44:                                               ; preds = %39, %36
  %45 = phi i64 [ 0, %36 ], [ %43, %39 ]
  %46 = and i64 %30, -8168
  %47 = or i64 %46, %45
  %48 = or i64 %47, 5
  br label %49

49:                                               ; preds = %44, %34
  %50 = phi i64 [ %48, %44 ], [ %30, %34 ]
  %51 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %28, i64 0, i32 1, i32 0
  %52 = load i64, i64* %51, align 8
  %53 = and i64 %52, 7
  %54 = icmp ugt i64 %53, 4
  br i1 %54, label %55, label %68

55:                                               ; preds = %49
  %56 = and i64 %52, 24
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %63

58:                                               ; preds = %55
  %59 = lshr i64 %52, 5
  %60 = trunc i64 %59 to i8
  %61 = icmp ugt i8 %60, 11
  %62 = select i1 %61, i64 416, i64 0
  br label %63

63:                                               ; preds = %58, %55
  %64 = phi i64 [ 0, %55 ], [ %62, %58 ]
  %65 = and i64 %52, -8168
  %66 = or i64 %65, %64
  %67 = or i64 %66, 5
  br label %68

68:                                               ; preds = %49, %63
  %69 = phi i64 [ %67, %63 ], [ %52, %49 ]
  %70 = icmp eq i64 %50, %69
  br i1 %70, label %71, label %79

71:                                               ; preds = %21, %68
  %72 = add i64 %23, -1
  %73 = icmp ult i64 %24, %72
  br i1 %73, label %74, label %114

74:                                               ; preds = %71
  %75 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %22, i64 %72
  %76 = bitcast %"class.v8::internal::compiler::MoveOperands"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = bitcast %"class.v8::internal::compiler::MoveOperands"** %27 to i64*
  store i64 %77, i64* %78, align 8
  br label %114

79:                                               ; preds = %68
  %80 = add nuw i64 %24, 1
  %81 = icmp eq i64 %31, 2
  br i1 %81, label %91, label %82

82:                                               ; preds = %32, %79
  %83 = phi i64 [ %33, %32 ], [ %80, %79 ]
  %84 = and i64 %30, 24
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %86, label %91

86:                                               ; preds = %82
  %87 = lshr i64 %30, 5
  %88 = trunc i64 %87 to i8
  %89 = icmp ugt i8 %88, 11
  %90 = select i1 %89, i32 2, i32 1
  br label %91

91:                                               ; preds = %79, %82, %86
  %92 = phi i64 [ %80, %79 ], [ %83, %86 ], [ %83, %82 ]
  %93 = phi i32 [ 0, %79 ], [ %90, %86 ], [ 3, %82 ]
  %94 = shl i32 1, %93
  %95 = trunc i32 %94 to i8
  %96 = or i8 %25, %95
  %97 = getelementptr %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %28, i64 0, i32 1, i32 0
  %98 = load i64, i64* %97, align 8
  %99 = and i64 %98, 7
  %100 = icmp eq i64 %99, 2
  br i1 %100, label %109, label %101

101:                                              ; preds = %91
  %102 = and i64 %98, 24
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %104, label %109

104:                                              ; preds = %101
  %105 = lshr i64 %98, 5
  %106 = trunc i64 %105 to i8
  %107 = icmp ugt i8 %106, 11
  %108 = select i1 %107, i32 2, i32 1
  br label %109

109:                                              ; preds = %91, %101, %104
  %110 = phi i32 [ 0, %91 ], [ %108, %104 ], [ 3, %101 ]
  %111 = shl i32 1, %110
  %112 = trunc i32 %111 to i8
  %113 = or i8 %26, %112
  br label %114

114:                                              ; preds = %71, %74, %109
  %115 = phi i8 [ %26, %74 ], [ %26, %71 ], [ %113, %109 ]
  %116 = phi i8 [ %25, %74 ], [ %25, %71 ], [ %96, %109 ]
  %117 = phi i64 [ %24, %74 ], [ %24, %71 ], [ %92, %109 ]
  %118 = phi i64 [ %72, %74 ], [ %72, %71 ], [ %23, %109 ]
  %119 = icmp ult i64 %117, %118
  br i1 %119, label %120, label %15

120:                                              ; preds = %114
  %121 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %14, align 8
  br label %21

122:                                              ; preds = %15
  %123 = icmp ugt i64 %118, %19
  %124 = inttoptr i64 %17 to %"class.v8::internal::compiler::MoveOperands"**
  br i1 %123, label %125, label %127

125:                                              ; preds = %122
  %126 = sub i64 %118, %19
  tail call void @_ZNSt3__16vectorIPN2v88internal8compiler12MoveOperandsENS2_13ZoneAllocatorIS5_EEE8__appendEm(%"class.std::__1::vector"* %3, i64 %126) #4
  br label %131

127:                                              ; preds = %122
  %128 = icmp ult i64 %118, %19
  br i1 %128, label %129, label %131

129:                                              ; preds = %127
  %130 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %124, i64 %118
  store %"class.v8::internal::compiler::MoveOperands"** %130, %"class.v8::internal::compiler::MoveOperands"*** %4, align 8
  br label %131

131:                                              ; preds = %2, %129, %127, %125, %15
  %132 = phi i8 [ %116, %129 ], [ %116, %127 ], [ %116, %125 ], [ %116, %15 ], [ 0, %2 ]
  %133 = phi i8 [ %115, %129 ], [ %115, %127 ], [ %115, %125 ], [ %115, %15 ], [ 0, %2 ]
  %134 = and i8 %132, %133
  %135 = icmp eq i8 %134, 0
  br i1 %135, label %136, label %140

136:                                              ; preds = %131
  %137 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %138 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %137, align 8
  %139 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %4, align 8
  br label %150

140:                                              ; preds = %131
  %141 = load i64, i64* %5, align 8
  %142 = load i64, i64* %7, align 8
  %143 = sub i64 %141, %142
  %144 = ashr exact i64 %143, 3
  %145 = icmp ult i64 %144, 2
  %146 = inttoptr i64 %142 to %"class.v8::internal::compiler::MoveOperands"**
  %147 = inttoptr i64 %141 to %"class.v8::internal::compiler::MoveOperands"**
  br i1 %145, label %150, label %148

148:                                              ; preds = %140
  %149 = icmp eq i64 %141, %142
  br i1 %149, label %190, label %168

150:                                              ; preds = %136, %140
  %151 = phi %"class.v8::internal::compiler::MoveOperands"** [ %139, %136 ], [ %147, %140 ]
  %152 = phi %"class.v8::internal::compiler::MoveOperands"** [ %138, %136 ], [ %146, %140 ]
  %153 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %152, %151
  br i1 %153, label %190, label %154

154:                                              ; preds = %150
  %155 = getelementptr inbounds %"class.v8::internal::compiler::GapResolver", %"class.v8::internal::compiler::GapResolver"* %0, i64 0, i32 0
  br label %156

156:                                              ; preds = %154, %156
  %157 = phi %"class.v8::internal::compiler::MoveOperands"** [ %152, %154 ], [ %166, %156 ]
  %158 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %157, align 8
  %159 = load %"class.v8::internal::compiler::GapResolver::Assembler"*, %"class.v8::internal::compiler::GapResolver::Assembler"** %155, align 8
  %160 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %158, i64 0, i32 0
  %161 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %158, i64 0, i32 1
  %162 = bitcast %"class.v8::internal::compiler::GapResolver::Assembler"* %159 to void (%"class.v8::internal::compiler::GapResolver::Assembler"*, %"class.v8::internal::compiler::InstructionOperand"*, %"class.v8::internal::compiler::InstructionOperand"*)***
  %163 = load void (%"class.v8::internal::compiler::GapResolver::Assembler"*, %"class.v8::internal::compiler::InstructionOperand"*, %"class.v8::internal::compiler::InstructionOperand"*)**, void (%"class.v8::internal::compiler::GapResolver::Assembler"*, %"class.v8::internal::compiler::InstructionOperand"*, %"class.v8::internal::compiler::InstructionOperand"*)*** %162, align 8
  %164 = getelementptr inbounds void (%"class.v8::internal::compiler::GapResolver::Assembler"*, %"class.v8::internal::compiler::InstructionOperand"*, %"class.v8::internal::compiler::InstructionOperand"*)*, void (%"class.v8::internal::compiler::GapResolver::Assembler"*, %"class.v8::internal::compiler::InstructionOperand"*, %"class.v8::internal::compiler::InstructionOperand"*)** %163, i64 2
  %165 = load void (%"class.v8::internal::compiler::GapResolver::Assembler"*, %"class.v8::internal::compiler::InstructionOperand"*, %"class.v8::internal::compiler::InstructionOperand"*)*, void (%"class.v8::internal::compiler::GapResolver::Assembler"*, %"class.v8::internal::compiler::InstructionOperand"*, %"class.v8::internal::compiler::InstructionOperand"*)** %164, align 8
  tail call void %165(%"class.v8::internal::compiler::GapResolver::Assembler"* %159, %"class.v8::internal::compiler::InstructionOperand"* %160, %"class.v8::internal::compiler::InstructionOperand"* %161) #4
  %166 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %157, i64 1
  %167 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %166, %151
  br i1 %167, label %190, label %156

168:                                              ; preds = %148, %182
  %169 = phi i64 [ %183, %182 ], [ %142, %148 ]
  %170 = phi i64 [ %184, %182 ], [ %141, %148 ]
  %171 = phi %"class.v8::internal::compiler::MoveOperands"** [ %189, %182 ], [ %146, %148 ]
  %172 = phi i64 [ %185, %182 ], [ 0, %148 ]
  %173 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %171, i64 %172
  %174 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %173, align 8
  %175 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %174, i64 0, i32 0, i32 0
  %176 = load i64, i64* %175, align 8
  %177 = and i64 %176, 7
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %182, label %179

179:                                              ; preds = %168
  tail call void @_ZN2v88internal8compiler11GapResolver11PerformMoveEPNS1_12ParallelMoveEPNS1_12MoveOperandsE(%"class.v8::internal::compiler::GapResolver"* %0, %"class.v8::internal::compiler::ParallelMove"* %1, %"class.v8::internal::compiler::MoveOperands"* %174)
  %180 = load i64, i64* %5, align 8
  %181 = load i64, i64* %7, align 8
  br label %182

182:                                              ; preds = %179, %168
  %183 = phi i64 [ %181, %179 ], [ %169, %168 ]
  %184 = phi i64 [ %180, %179 ], [ %170, %168 ]
  %185 = add nuw i64 %172, 1
  %186 = sub i64 %184, %183
  %187 = ashr exact i64 %186, 3
  %188 = icmp ult i64 %185, %187
  %189 = inttoptr i64 %183 to %"class.v8::internal::compiler::MoveOperands"**
  br i1 %188, label %168, label %190

190:                                              ; preds = %182, %156, %148, %150
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler11GapResolver11PerformMoveEPNS1_12ParallelMoveEPNS1_12MoveOperandsE(%"class.v8::internal::compiler::GapResolver"* nocapture readonly, %"class.v8::internal::compiler::ParallelMove"* nocapture readonly, %"class.v8::internal::compiler::MoveOperands"* nocapture) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.v8::internal::compiler::InstructionOperand", align 8
  %5 = alloca %"class.v8::internal::compiler::InstructionOperand", align 8
  %6 = bitcast %"class.v8::internal::compiler::InstructionOperand"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #4
  %7 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %2, i64 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %4, i64 0, i32 0
  %9 = load i64, i64* %7, align 8
  store i64 %9, i64* %8, align 8
  %10 = bitcast %"class.v8::internal::compiler::InstructionOperand"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #4
  %11 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %2, i64 0, i32 1, i32 0
  %12 = getelementptr inbounds %"class.v8::internal::compiler::InstructionOperand", %"class.v8::internal::compiler::InstructionOperand"* %5, i64 0, i32 0
  %13 = load i64, i64* %11, align 8
  store i64 %13, i64* %12, align 8
  store i64 0, i64* %11, align 8
  %14 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %15 = bitcast %"class.v8::internal::compiler::MoveOperands"*** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %"class.v8::internal::compiler::ParallelMove"* %1 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = icmp eq i64 %16, %18
  br i1 %19, label %22, label %64

20:                                               ; preds = %83
  %21 = load i64, i64* %7, align 8
  br label %22

22:                                               ; preds = %20, %3
  %23 = phi i64 [ %21, %20 ], [ %9, %3 ]
  store i64 %23, i64* %8, align 8
  %24 = and i64 %23, 7
  %25 = icmp eq i64 %24, 4
  br i1 %25, label %26, label %28

26:                                               ; preds = %22
  %27 = load i64, i64* %12, align 8
  br label %92

28:                                               ; preds = %22
  %29 = icmp ugt i64 %24, 4
  br i1 %29, label %30, label %43

30:                                               ; preds = %28
  %31 = and i64 %23, 24
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = lshr i64 %23, 5
  %35 = trunc i64 %34 to i8
  %36 = icmp ugt i8 %35, 11
  %37 = select i1 %36, i64 416, i64 0
  br label %38

38:                                               ; preds = %33, %30
  %39 = phi i64 [ 0, %30 ], [ %37, %33 ]
  %40 = and i64 %23, -8168
  %41 = or i64 %40, %39
  %42 = or i64 %41, 5
  br label %43

43:                                               ; preds = %38, %28
  %44 = phi i64 [ %42, %38 ], [ %23, %28 ]
  %45 = load i64, i64* %12, align 8
  %46 = and i64 %45, 7
  %47 = icmp ugt i64 %46, 4
  br i1 %47, label %48, label %61

48:                                               ; preds = %43
  %49 = and i64 %45, 24
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %51, label %56

51:                                               ; preds = %48
  %52 = lshr i64 %45, 5
  %53 = trunc i64 %52 to i8
  %54 = icmp ugt i8 %53, 11
  %55 = select i1 %54, i64 416, i64 0
  br label %56

56:                                               ; preds = %51, %48
  %57 = phi i64 [ 0, %48 ], [ %55, %51 ]
  %58 = and i64 %45, -8168
  %59 = or i64 %58, %57
  %60 = or i64 %59, 5
  br label %61

61:                                               ; preds = %43, %56
  %62 = phi i64 [ %60, %56 ], [ %45, %43 ]
  %63 = icmp eq i64 %44, %62
  br i1 %63, label %90, label %92

64:                                               ; preds = %3, %83
  %65 = phi i64 [ %86, %83 ], [ %18, %3 ]
  %66 = phi i64 [ %84, %83 ], [ 0, %3 ]
  %67 = inttoptr i64 %65 to %"class.v8::internal::compiler::MoveOperands"**
  %68 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %67, i64 %66
  %69 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %68, align 8
  %70 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %69, i64 0, i32 0, i32 0
  %71 = load i64, i64* %70, align 8
  %72 = and i64 %71, 7
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %83, label %74

74:                                               ; preds = %64
  %75 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %69, i64 0, i32 1, i32 0
  %76 = load i64, i64* %75, align 8
  %77 = and i64 %76, 7
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %83, label %79

79:                                               ; preds = %74
  %80 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %69, i64 0, i32 0
  %81 = call zeroext i1 @_ZNK2v88internal8compiler18InstructionOperand14InterferesWithERKS2_(%"class.v8::internal::compiler::InstructionOperand"* %80, %"class.v8::internal::compiler::InstructionOperand"* nonnull dereferenceable(8) %5) #4
  br i1 %81, label %82, label %83

82:                                               ; preds = %79
  call void @_ZN2v88internal8compiler11GapResolver11PerformMoveEPNS1_12ParallelMoveEPNS1_12MoveOperandsE(%"class.v8::internal::compiler::GapResolver"* %0, %"class.v8::internal::compiler::ParallelMove"* %1, %"class.v8::internal::compiler::MoveOperands"* %69)
  br label %83

83:                                               ; preds = %74, %79, %82, %64
  %84 = add nuw i64 %66, 1
  %85 = load i64, i64* %15, align 8
  %86 = load i64, i64* %17, align 8
  %87 = sub i64 %85, %86
  %88 = ashr exact i64 %87, 3
  %89 = icmp ult i64 %84, %88
  br i1 %89, label %64, label %20

90:                                               ; preds = %61
  %91 = bitcast %"class.v8::internal::compiler::MoveOperands"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %91, i8 0, i64 16, i1 false) #4
  br label %237

92:                                               ; preds = %26, %61
  %93 = phi i64 [ %27, %26 ], [ %45, %61 ]
  store i64 %93, i64* %11, align 8
  %94 = getelementptr inbounds %"class.v8::internal::compiler::ParallelMove", %"class.v8::internal::compiler::ParallelMove"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %95 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %94, align 8
  %96 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %14, align 8
  %97 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %95, %96
  br i1 %97, label %115, label %98

98:                                               ; preds = %92, %108
  %99 = phi %"class.v8::internal::compiler::MoveOperands"** [ %109, %108 ], [ %95, %92 ]
  %100 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %99, align 8
  %101 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %100, i64 0, i32 0, i32 0
  %102 = load i64, i64* %101, align 8
  %103 = and i64 %102, 7
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %108, label %105

105:                                              ; preds = %98
  %106 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %100, i64 0, i32 0
  %107 = call zeroext i1 @_ZNK2v88internal8compiler18InstructionOperand14InterferesWithERKS2_(%"class.v8::internal::compiler::InstructionOperand"* %106, %"class.v8::internal::compiler::InstructionOperand"* nonnull dereferenceable(8) %5) #4
  br i1 %107, label %111, label %108

108:                                              ; preds = %105, %98
  %109 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %99, i64 1
  %110 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %109, %96
  br i1 %110, label %111, label %98

111:                                              ; preds = %105, %108
  %112 = phi %"class.v8::internal::compiler::MoveOperands"** [ %96, %108 ], [ %99, %105 ]
  %113 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %14, align 8
  %114 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %112, %113
  br i1 %114, label %115, label %123

115:                                              ; preds = %92, %111
  %116 = getelementptr inbounds %"class.v8::internal::compiler::GapResolver", %"class.v8::internal::compiler::GapResolver"* %0, i64 0, i32 0
  %117 = load %"class.v8::internal::compiler::GapResolver::Assembler"*, %"class.v8::internal::compiler::GapResolver::Assembler"** %116, align 8
  %118 = bitcast %"class.v8::internal::compiler::GapResolver::Assembler"* %117 to void (%"class.v8::internal::compiler::GapResolver::Assembler"*, %"class.v8::internal::compiler::InstructionOperand"*, %"class.v8::internal::compiler::InstructionOperand"*)***
  %119 = load void (%"class.v8::internal::compiler::GapResolver::Assembler"*, %"class.v8::internal::compiler::InstructionOperand"*, %"class.v8::internal::compiler::InstructionOperand"*)**, void (%"class.v8::internal::compiler::GapResolver::Assembler"*, %"class.v8::internal::compiler::InstructionOperand"*, %"class.v8::internal::compiler::InstructionOperand"*)*** %118, align 8
  %120 = getelementptr inbounds void (%"class.v8::internal::compiler::GapResolver::Assembler"*, %"class.v8::internal::compiler::InstructionOperand"*, %"class.v8::internal::compiler::InstructionOperand"*)*, void (%"class.v8::internal::compiler::GapResolver::Assembler"*, %"class.v8::internal::compiler::InstructionOperand"*, %"class.v8::internal::compiler::InstructionOperand"*)** %119, i64 2
  %121 = load void (%"class.v8::internal::compiler::GapResolver::Assembler"*, %"class.v8::internal::compiler::InstructionOperand"*, %"class.v8::internal::compiler::InstructionOperand"*)*, void (%"class.v8::internal::compiler::GapResolver::Assembler"*, %"class.v8::internal::compiler::InstructionOperand"*, %"class.v8::internal::compiler::InstructionOperand"*)** %120, align 8
  call void %121(%"class.v8::internal::compiler::GapResolver::Assembler"* %117, %"class.v8::internal::compiler::InstructionOperand"* nonnull %4, %"class.v8::internal::compiler::InstructionOperand"* nonnull %5) #4
  %122 = bitcast %"class.v8::internal::compiler::MoveOperands"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %122, i8 0, i64 16, i1 false) #4
  br label %237

123:                                              ; preds = %111
  %124 = load i64, i64* %8, align 8
  %125 = and i64 %124, 7
  %126 = icmp ugt i64 %125, 4
  %127 = and i64 %124, 24
  %128 = icmp eq i64 %127, 8
  %129 = and i1 %126, %128
  br i1 %129, label %130, label %132

130:                                              ; preds = %123
  %131 = load i64, i64* %12, align 8
  store i64 %131, i64* %8, align 8
  store i64 %124, i64* %12, align 8
  br label %132

132:                                              ; preds = %123, %130
  %133 = getelementptr inbounds %"class.v8::internal::compiler::GapResolver", %"class.v8::internal::compiler::GapResolver"* %0, i64 0, i32 0
  %134 = load %"class.v8::internal::compiler::GapResolver::Assembler"*, %"class.v8::internal::compiler::GapResolver::Assembler"** %133, align 8
  %135 = bitcast %"class.v8::internal::compiler::GapResolver::Assembler"* %134 to void (%"class.v8::internal::compiler::GapResolver::Assembler"*, %"class.v8::internal::compiler::InstructionOperand"*, %"class.v8::internal::compiler::InstructionOperand"*)***
  %136 = load void (%"class.v8::internal::compiler::GapResolver::Assembler"*, %"class.v8::internal::compiler::InstructionOperand"*, %"class.v8::internal::compiler::InstructionOperand"*)**, void (%"class.v8::internal::compiler::GapResolver::Assembler"*, %"class.v8::internal::compiler::InstructionOperand"*, %"class.v8::internal::compiler::InstructionOperand"*)*** %135, align 8
  %137 = getelementptr inbounds void (%"class.v8::internal::compiler::GapResolver::Assembler"*, %"class.v8::internal::compiler::InstructionOperand"*, %"class.v8::internal::compiler::InstructionOperand"*)*, void (%"class.v8::internal::compiler::GapResolver::Assembler"*, %"class.v8::internal::compiler::InstructionOperand"*, %"class.v8::internal::compiler::InstructionOperand"*)** %136, i64 3
  %138 = load void (%"class.v8::internal::compiler::GapResolver::Assembler"*, %"class.v8::internal::compiler::InstructionOperand"*, %"class.v8::internal::compiler::InstructionOperand"*)*, void (%"class.v8::internal::compiler::GapResolver::Assembler"*, %"class.v8::internal::compiler::InstructionOperand"*, %"class.v8::internal::compiler::InstructionOperand"*)** %137, align 8
  call void %138(%"class.v8::internal::compiler::GapResolver::Assembler"* %134, %"class.v8::internal::compiler::InstructionOperand"* nonnull %4, %"class.v8::internal::compiler::InstructionOperand"* nonnull %5) #4
  %139 = bitcast %"class.v8::internal::compiler::MoveOperands"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %139, i8 0, i64 16, i1 false) #4
  %140 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %94, align 8
  %141 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %14, align 8
  %142 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %140, %141
  br i1 %142, label %237, label %143

143:                                              ; preds = %132, %234
  %144 = phi %"class.v8::internal::compiler::MoveOperands"** [ %235, %234 ], [ %140, %132 ]
  %145 = load %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %144, align 8
  %146 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %145, i64 0, i32 0, i32 0
  %147 = load i64, i64* %146, align 8
  %148 = and i64 %147, 7
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %234, label %150

150:                                              ; preds = %143
  %151 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands", %"class.v8::internal::compiler::MoveOperands"* %145, i64 0, i32 0
  %152 = load i64, i64* %8, align 8
  %153 = and i64 %152, 7
  %154 = icmp eq i64 %153, 4
  br i1 %154, label %155, label %157

155:                                              ; preds = %150
  %156 = icmp eq %"class.v8::internal::compiler::InstructionOperand"* %4, %151
  br i1 %156, label %191, label %193

157:                                              ; preds = %150
  %158 = icmp ugt i64 %153, 4
  br i1 %158, label %159, label %172

159:                                              ; preds = %157
  %160 = and i64 %152, 24
  %161 = icmp eq i64 %160, 0
  br i1 %161, label %162, label %167

162:                                              ; preds = %159
  %163 = lshr i64 %152, 5
  %164 = trunc i64 %163 to i8
  %165 = icmp ugt i8 %164, 11
  %166 = select i1 %165, i64 416, i64 0
  br label %167

167:                                              ; preds = %162, %159
  %168 = phi i64 [ 0, %159 ], [ %166, %162 ]
  %169 = and i64 %152, -8168
  %170 = or i64 %169, %168
  %171 = or i64 %170, 5
  br label %172

172:                                              ; preds = %167, %157
  %173 = phi i64 [ %171, %167 ], [ %152, %157 ]
  %174 = icmp ugt i64 %148, 4
  br i1 %174, label %175, label %188

175:                                              ; preds = %172
  %176 = and i64 %147, 24
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %178, label %183

178:                                              ; preds = %175
  %179 = lshr i64 %147, 5
  %180 = trunc i64 %179 to i8
  %181 = icmp ugt i8 %180, 11
  %182 = select i1 %181, i64 416, i64 0
  br label %183

183:                                              ; preds = %178, %175
  %184 = phi i64 [ 0, %175 ], [ %182, %178 ]
  %185 = and i64 %147, -8168
  %186 = or i64 %185, %184
  %187 = or i64 %186, 5
  br label %188

188:                                              ; preds = %172, %183
  %189 = phi i64 [ %187, %183 ], [ %147, %172 ]
  %190 = icmp eq i64 %173, %189
  br i1 %190, label %191, label %193

191:                                              ; preds = %155, %188
  %192 = load i64, i64* %12, align 8
  store i64 %192, i64* %146, align 8
  br label %234

193:                                              ; preds = %155, %188
  %194 = load i64, i64* %12, align 8
  %195 = and i64 %194, 7
  %196 = icmp eq i64 %195, 4
  br i1 %196, label %197, label %199

197:                                              ; preds = %193
  %198 = icmp eq %"class.v8::internal::compiler::InstructionOperand"* %5, %151
  br i1 %198, label %233, label %234

199:                                              ; preds = %193
  %200 = icmp ugt i64 %195, 4
  br i1 %200, label %201, label %214

201:                                              ; preds = %199
  %202 = and i64 %194, 24
  %203 = icmp eq i64 %202, 0
  br i1 %203, label %204, label %209

204:                                              ; preds = %201
  %205 = lshr i64 %194, 5
  %206 = trunc i64 %205 to i8
  %207 = icmp ugt i8 %206, 11
  %208 = select i1 %207, i64 416, i64 0
  br label %209

209:                                              ; preds = %204, %201
  %210 = phi i64 [ 0, %201 ], [ %208, %204 ]
  %211 = and i64 %194, -8168
  %212 = or i64 %211, %210
  %213 = or i64 %212, 5
  br label %214

214:                                              ; preds = %209, %199
  %215 = phi i64 [ %213, %209 ], [ %194, %199 ]
  %216 = icmp ugt i64 %148, 4
  br i1 %216, label %217, label %230

217:                                              ; preds = %214
  %218 = and i64 %147, 24
  %219 = icmp eq i64 %218, 0
  br i1 %219, label %220, label %225

220:                                              ; preds = %217
  %221 = lshr i64 %147, 5
  %222 = trunc i64 %221 to i8
  %223 = icmp ugt i8 %222, 11
  %224 = select i1 %223, i64 416, i64 0
  br label %225

225:                                              ; preds = %220, %217
  %226 = phi i64 [ 0, %217 ], [ %224, %220 ]
  %227 = and i64 %147, -8168
  %228 = or i64 %227, %226
  %229 = or i64 %228, 5
  br label %230

230:                                              ; preds = %214, %225
  %231 = phi i64 [ %229, %225 ], [ %147, %214 ]
  %232 = icmp eq i64 %215, %231
  br i1 %232, label %233, label %234

233:                                              ; preds = %197, %230
  store i64 %152, i64* %146, align 8
  br label %234

234:                                              ; preds = %197, %191, %233, %230, %143
  %235 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %144, i64 1
  %236 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %235, %141
  br i1 %236, label %237, label %143

237:                                              ; preds = %234, %132, %115, %90
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #4
  ret void
}

declare zeroext i1 @_ZNK2v88internal8compiler18InstructionOperand14InterferesWithERKS2_(%"class.v8::internal::compiler::InstructionOperand"*, %"class.v8::internal::compiler::InstructionOperand"* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIPN2v88internal8compiler12MoveOperandsENS2_13ZoneAllocatorIS5_EEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.v8::internal::compiler::MoveOperands"*** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.v8::internal::compiler::MoveOperands"*** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 3
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.v8::internal::compiler::MoveOperands"**
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %13, i64 %18
  %20 = bitcast %"class.v8::internal::compiler::MoveOperands"** %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 8
  %25 = and i64 %24, -8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %25, i1 false) #4
  %26 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  ret void

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 3
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 268435455
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #5
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 3
  %41 = icmp ult i64 %40, 134217727
  br i1 %41, label %42, label %47

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 2
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %65, label %47

47:                                               ; preds = %38, %42
  %48 = phi i64 [ %45, %42 ], [ 268435455, %38 ]
  %49 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %50 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %49, align 8
  %51 = shl i64 %48, 3
  %52 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %50, i64 0, i32 2
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %50, i64 0, i32 3
  %55 = load i64, i64* %54, align 8
  %56 = sub i64 %55, %53
  %57 = icmp ugt i64 %51, %56
  br i1 %57, label %58, label %60, !prof !2

58:                                               ; preds = %47
  %59 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %50, i64 %51) #4
  br label %62

60:                                               ; preds = %47
  %61 = add i64 %53, %51
  store i64 %61, i64* %52, align 8
  br label %62

62:                                               ; preds = %60, %58
  %63 = phi i64 [ %59, %58 ], [ %53, %60 ]
  %64 = inttoptr i64 %63 to %"class.v8::internal::compiler::MoveOperands"**
  br label %65

65:                                               ; preds = %62, %42
  %66 = phi i64 [ %48, %62 ], [ 0, %42 ]
  %67 = phi %"class.v8::internal::compiler::MoveOperands"** [ %64, %62 ], [ null, %42 ]
  %68 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %67, i64 %33
  %69 = bitcast %"class.v8::internal::compiler::MoveOperands"** %68 to i8*
  %70 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %67, i64 %66
  %71 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %68, i64 %1
  %72 = shl i64 %1, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %69, i8 0, i64 %72, i1 false) #4
  %73 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %70 to i64
  %74 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %71 to i64
  %75 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %76 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %75, align 8
  %77 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %76 to i64
  %78 = load %"class.v8::internal::compiler::MoveOperands"**, %"class.v8::internal::compiler::MoveOperands"*** %6, align 8
  %79 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %78, %76
  br i1 %79, label %249, label %80

80:                                               ; preds = %65
  %81 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %78, i64 -1
  %82 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %81 to i64
  %83 = sub i64 %82, %77
  %84 = lshr i64 %83, 3
  %85 = add nuw nsw i64 %84, 1
  %86 = icmp ult i64 %85, 4
  br i1 %86, label %179, label %87

87:                                               ; preds = %80
  %88 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %78, i64 -1
  %89 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %88 to i64
  %90 = sub i64 %89, %77
  %91 = lshr i64 %90, 3
  %92 = xor i64 %91, -1
  %93 = add nsw i64 %33, %92
  %94 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %67, i64 %93
  %95 = xor i64 %91, -1
  %96 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %78, i64 %95
  %97 = icmp ult %"class.v8::internal::compiler::MoveOperands"** %94, %78
  %98 = icmp ult %"class.v8::internal::compiler::MoveOperands"** %96, %68
  %99 = and i1 %97, %98
  br i1 %99, label %179, label %100

100:                                              ; preds = %87
  %101 = and i64 %85, 4611686018427387900
  %102 = sub nsw i64 0, %101
  %103 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %68, i64 %102
  %104 = sub nsw i64 0, %101
  %105 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %78, i64 %104
  %106 = add nsw i64 %101, -4
  %107 = lshr exact i64 %106, 2
  %108 = add nuw nsw i64 %107, 1
  %109 = and i64 %108, 1
  %110 = icmp eq i64 %106, 0
  br i1 %110, label %157, label %111

111:                                              ; preds = %100
  %112 = sub nuw nsw i64 %108, %109
  %113 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %68, i64 -1
  %114 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %78, i64 -1
  %115 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %68, i64 -1
  %116 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %78, i64 -1
  br label %117

117:                                              ; preds = %117, %111
  %118 = phi i64 [ 0, %111 ], [ %152, %117 ]
  %119 = phi i64 [ %112, %111 ], [ %153, %117 ]
  %120 = sub i64 0, %118
  %121 = sub i64 0, %118
  %122 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %113, i64 %120
  %123 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %114, i64 %121
  %124 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %123, i64 -1
  %125 = bitcast %"class.v8::internal::compiler::MoveOperands"** %124 to <2 x i64>*
  %126 = load <2 x i64>, <2 x i64>* %125, align 8, !alias.scope !3
  %127 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %123, i64 -2
  %128 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %127, i64 -1
  %129 = bitcast %"class.v8::internal::compiler::MoveOperands"** %128 to <2 x i64>*
  %130 = load <2 x i64>, <2 x i64>* %129, align 8, !alias.scope !3
  %131 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %122, i64 -1
  %132 = bitcast %"class.v8::internal::compiler::MoveOperands"** %131 to <2 x i64>*
  store <2 x i64> %126, <2 x i64>* %132, align 8, !alias.scope !6, !noalias !3
  %133 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %122, i64 -2
  %134 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %133, i64 -1
  %135 = bitcast %"class.v8::internal::compiler::MoveOperands"** %134 to <2 x i64>*
  store <2 x i64> %130, <2 x i64>* %135, align 8, !alias.scope !6, !noalias !3
  %136 = sub nuw nsw i64 -4, %118
  %137 = sub nuw nsw i64 -4, %118
  %138 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %115, i64 %136
  %139 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %116, i64 %137
  %140 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %139, i64 -1
  %141 = bitcast %"class.v8::internal::compiler::MoveOperands"** %140 to <2 x i64>*
  %142 = load <2 x i64>, <2 x i64>* %141, align 8, !alias.scope !3
  %143 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %139, i64 -2
  %144 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %143, i64 -1
  %145 = bitcast %"class.v8::internal::compiler::MoveOperands"** %144 to <2 x i64>*
  %146 = load <2 x i64>, <2 x i64>* %145, align 8, !alias.scope !3
  %147 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %138, i64 -1
  %148 = bitcast %"class.v8::internal::compiler::MoveOperands"** %147 to <2 x i64>*
  store <2 x i64> %142, <2 x i64>* %148, align 8, !alias.scope !6, !noalias !3
  %149 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %138, i64 -2
  %150 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %149, i64 -1
  %151 = bitcast %"class.v8::internal::compiler::MoveOperands"** %150 to <2 x i64>*
  store <2 x i64> %146, <2 x i64>* %151, align 8, !alias.scope !6, !noalias !3
  %152 = add i64 %118, 8
  %153 = add i64 %119, -2
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %155, label %117, !llvm.loop !8

155:                                              ; preds = %117
  %156 = sub nuw nsw i64 -8, %118
  br label %157

157:                                              ; preds = %155, %100
  %158 = phi i64 [ 0, %100 ], [ %156, %155 ]
  %159 = icmp eq i64 %109, 0
  br i1 %159, label %177, label %160

160:                                              ; preds = %157
  %161 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %68, i64 -1
  %162 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %78, i64 -1
  %163 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %161, i64 %158
  %164 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %162, i64 %158
  %165 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %164, i64 -1
  %166 = bitcast %"class.v8::internal::compiler::MoveOperands"** %165 to <2 x i64>*
  %167 = load <2 x i64>, <2 x i64>* %166, align 8, !alias.scope !3
  %168 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %164, i64 -2
  %169 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %168, i64 -1
  %170 = bitcast %"class.v8::internal::compiler::MoveOperands"** %169 to <2 x i64>*
  %171 = load <2 x i64>, <2 x i64>* %170, align 8, !alias.scope !3
  %172 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %163, i64 -1
  %173 = bitcast %"class.v8::internal::compiler::MoveOperands"** %172 to <2 x i64>*
  store <2 x i64> %167, <2 x i64>* %173, align 8, !alias.scope !6, !noalias !3
  %174 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %163, i64 -2
  %175 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %174, i64 -1
  %176 = bitcast %"class.v8::internal::compiler::MoveOperands"** %175 to <2 x i64>*
  store <2 x i64> %171, <2 x i64>* %176, align 8, !alias.scope !6, !noalias !3
  br label %177

177:                                              ; preds = %157, %160
  %178 = icmp eq i64 %85, %101
  br i1 %178, label %249, label %179

179:                                              ; preds = %177, %87, %80
  %180 = phi %"class.v8::internal::compiler::MoveOperands"** [ %68, %87 ], [ %68, %80 ], [ %103, %177 ]
  %181 = phi %"class.v8::internal::compiler::MoveOperands"** [ %78, %87 ], [ %78, %80 ], [ %105, %177 ]
  %182 = getelementptr %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %181, i64 -1
  %183 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %182 to i64
  %184 = sub i64 %183, %77
  %185 = lshr i64 %184, 3
  %186 = add nuw nsw i64 %185, 1
  %187 = and i64 %186, 7
  %188 = icmp eq i64 %187, 0
  br i1 %188, label %200, label %189

189:                                              ; preds = %179, %189
  %190 = phi %"class.v8::internal::compiler::MoveOperands"** [ %193, %189 ], [ %180, %179 ]
  %191 = phi %"class.v8::internal::compiler::MoveOperands"** [ %194, %189 ], [ %181, %179 ]
  %192 = phi i64 [ %198, %189 ], [ %187, %179 ]
  %193 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %190, i64 -1
  %194 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %191, i64 -1
  %195 = bitcast %"class.v8::internal::compiler::MoveOperands"** %194 to i64*
  %196 = load i64, i64* %195, align 8
  %197 = bitcast %"class.v8::internal::compiler::MoveOperands"** %193 to i64*
  store i64 %196, i64* %197, align 8
  %198 = add i64 %192, -1
  %199 = icmp eq i64 %198, 0
  br i1 %199, label %200, label %189, !llvm.loop !10

200:                                              ; preds = %189, %179
  %201 = phi %"class.v8::internal::compiler::MoveOperands"** [ undef, %179 ], [ %193, %189 ]
  %202 = phi %"class.v8::internal::compiler::MoveOperands"** [ %180, %179 ], [ %193, %189 ]
  %203 = phi %"class.v8::internal::compiler::MoveOperands"** [ %181, %179 ], [ %194, %189 ]
  %204 = icmp ult i64 %184, 56
  br i1 %204, label %249, label %205

205:                                              ; preds = %200, %205
  %206 = phi %"class.v8::internal::compiler::MoveOperands"** [ %243, %205 ], [ %202, %200 ]
  %207 = phi %"class.v8::internal::compiler::MoveOperands"** [ %244, %205 ], [ %203, %200 ]
  %208 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %206, i64 -1
  %209 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %207, i64 -1
  %210 = bitcast %"class.v8::internal::compiler::MoveOperands"** %209 to i64*
  %211 = load i64, i64* %210, align 8
  %212 = bitcast %"class.v8::internal::compiler::MoveOperands"** %208 to i64*
  store i64 %211, i64* %212, align 8
  %213 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %206, i64 -2
  %214 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %207, i64 -2
  %215 = bitcast %"class.v8::internal::compiler::MoveOperands"** %214 to i64*
  %216 = load i64, i64* %215, align 8
  %217 = bitcast %"class.v8::internal::compiler::MoveOperands"** %213 to i64*
  store i64 %216, i64* %217, align 8
  %218 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %206, i64 -3
  %219 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %207, i64 -3
  %220 = bitcast %"class.v8::internal::compiler::MoveOperands"** %219 to i64*
  %221 = load i64, i64* %220, align 8
  %222 = bitcast %"class.v8::internal::compiler::MoveOperands"** %218 to i64*
  store i64 %221, i64* %222, align 8
  %223 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %206, i64 -4
  %224 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %207, i64 -4
  %225 = bitcast %"class.v8::internal::compiler::MoveOperands"** %224 to i64*
  %226 = load i64, i64* %225, align 8
  %227 = bitcast %"class.v8::internal::compiler::MoveOperands"** %223 to i64*
  store i64 %226, i64* %227, align 8
  %228 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %206, i64 -5
  %229 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %207, i64 -5
  %230 = bitcast %"class.v8::internal::compiler::MoveOperands"** %229 to i64*
  %231 = load i64, i64* %230, align 8
  %232 = bitcast %"class.v8::internal::compiler::MoveOperands"** %228 to i64*
  store i64 %231, i64* %232, align 8
  %233 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %206, i64 -6
  %234 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %207, i64 -6
  %235 = bitcast %"class.v8::internal::compiler::MoveOperands"** %234 to i64*
  %236 = load i64, i64* %235, align 8
  %237 = bitcast %"class.v8::internal::compiler::MoveOperands"** %233 to i64*
  store i64 %236, i64* %237, align 8
  %238 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %206, i64 -7
  %239 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %207, i64 -7
  %240 = bitcast %"class.v8::internal::compiler::MoveOperands"** %239 to i64*
  %241 = load i64, i64* %240, align 8
  %242 = bitcast %"class.v8::internal::compiler::MoveOperands"** %238 to i64*
  store i64 %241, i64* %242, align 8
  %243 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %206, i64 -8
  %244 = getelementptr inbounds %"class.v8::internal::compiler::MoveOperands"*, %"class.v8::internal::compiler::MoveOperands"** %207, i64 -8
  %245 = bitcast %"class.v8::internal::compiler::MoveOperands"** %244 to i64*
  %246 = load i64, i64* %245, align 8
  %247 = bitcast %"class.v8::internal::compiler::MoveOperands"** %243 to i64*
  store i64 %246, i64* %247, align 8
  %248 = icmp eq %"class.v8::internal::compiler::MoveOperands"** %244, %76
  br i1 %248, label %249, label %205, !llvm.loop !12

249:                                              ; preds = %200, %205, %177, %65
  %250 = phi %"class.v8::internal::compiler::MoveOperands"** [ %68, %65 ], [ %103, %177 ], [ %201, %200 ], [ %243, %205 ]
  %251 = ptrtoint %"class.v8::internal::compiler::MoveOperands"** %250 to i64
  store i64 %251, i64* %30, align 8
  store i64 %74, i64* %7, align 8
  store i64 %73, i64* %4, align 8
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

declare i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !9}
