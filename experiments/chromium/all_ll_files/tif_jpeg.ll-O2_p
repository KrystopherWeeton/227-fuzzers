; ModuleID = '../../third_party/pdfium/third_party/libtiff/tif_jpeg.c'
source_filename = "../../third_party/pdfium/third_party/libtiff/tif_jpeg.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%struct._TIFFField = type { i32, i16, i16, i32, i32, i32, i32, i16, i8, i8, i8*, %struct._TIFFFieldArray* }
%struct._TIFFFieldArray = type { i32, i32, i32, %struct._TIFFField* }
%struct.tiff = type { i8*, i32, i32, i32, i64, i64, i64*, i16, i16, %struct.TIFFDirectory, %struct.TIFFDirectory, %union.anon.0, i16, i32, i16, i32, i64, i64, i16, i64, i32, i32, i64, i32, {}*, {}*, i32 (%struct.tiff*, i16)*, {}*, i32, i32 (%struct.tiff*, i16)*, {}*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, void (%struct.tiff*)*, i32 (%struct.tiff*, i32)*, void (%struct.tiff*)*, i32 (%struct.tiff*, i32)*, void (%struct.tiff*, i32*, i32*)*, i8*, i64, i64, i8*, i64, i64, i64, i8*, i64, i8*, i64, i32 (i8*, i8**, i64*)*, void (i8*, i8*, i64)*, i8*, i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)*, i64 (i8*, i64, i32)*, i32 (i8*)*, i64 (i8*)*, void (%struct.tiff*, i8*, i64)*, %struct._TIFFField**, i64, %struct._TIFFField*, %struct.TIFFTagMethods, %struct.client_info*, %struct._TIFFFieldArray*, i64 }
%struct.TIFFDirectory = type { [4 x i64], i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i16, i16, i16, i16, i32, i16, i16, double*, double*, float, float, i16, i16, float, float, [2 x i16], [3 x i16*], [2 x i16], i16, i16*, i32, i32, i64*, i64*, i32, %struct.TIFFDirEntry, %struct.TIFFDirEntry, i16, i64*, [2 x i16], i16, [3 x i16*], float*, i32, i8*, i32, %struct.TIFFTagValue*, i8 }
%struct.TIFFDirEntry = type { i16, i16, i64, %union.anon, i8 }
%union.anon = type { i64 }
%struct.TIFFTagValue = type { %struct._TIFFField*, i32, i8* }
%union.anon.0 = type { %struct.TIFFHeaderBig }
%struct.TIFFHeaderBig = type { i16, i16, i16, i16, i64 }
%struct.TIFFTagMethods = type { i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, void (%struct.tiff*, %struct._IO_FILE*, i64)* }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.client_info = type { %struct.client_info*, i8*, i8* }
%struct.JPEGState = type { %union.anon.1, i32, %struct.jpeg_error_mgr, [1 x %struct.__jmp_buf_tag], %struct.jpeg_progress_mgr, %struct.jpeg_destination_mgr, %struct.jpeg_source_mgr, %struct.tiff*, i16, i16, i16, i64, [10 x i8**], i32, i32, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, void (%struct.tiff*, %struct._IO_FILE*, i64)*, i32 (%struct.tiff*, i32)*, void (%struct.tiff*, i32*, i32*)*, i8*, i32, i32, i32, i32, i32, i32 }
%union.anon.1 = type { %struct.jpeg_decompress_struct }
%struct.jpeg_decompress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i8, i8, i16, i16, i32, i8, i32, %struct.jpeg_marker_struct*, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64, i64 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.jpeg_marker_struct = type { %struct.jpeg_marker_struct*, i8, i32, i32, i8* }
%struct.jpeg_decomp_master = type opaque
%struct.jpeg_d_main_controller = type opaque
%struct.jpeg_d_coef_controller = type opaque
%struct.jpeg_d_post_controller = type opaque
%struct.jpeg_input_controller = type opaque
%struct.jpeg_marker_reader = type opaque
%struct.jpeg_entropy_decoder = type opaque
%struct.jpeg_inverse_dct = type opaque
%struct.jpeg_upsampler = type opaque
%struct.jpeg_color_deconverter = type opaque
%struct.jpeg_color_quantizer = type opaque
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon.2, i32, i64, i8**, i32, i8**, i32, i32 }
%union.anon.2 = type { [8 x i32], [48 x i8] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_destination_mgr = type { i8*, i64, void (%struct.jpeg_compress_struct*)*, i32 (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)* }
%struct.jpeg_compress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_destination_mgr*, i32, i32, i32, i32, double, i32, i32, i32, %struct.jpeg_component_info*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], [16 x i8], [16 x i8], [16 x i8], i32, %struct.jpeg_scan_info*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i16, i16, i32, i32, i32, i32, i32, i32, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, %struct.jpeg_comp_master*, %struct.jpeg_c_main_controller*, %struct.jpeg_c_prep_controller*, %struct.jpeg_c_coef_controller*, %struct.jpeg_marker_writer*, %struct.jpeg_color_converter*, %struct.jpeg_downsampler*, %struct.jpeg_forward_dct*, %struct.jpeg_entropy_encoder*, %struct.jpeg_scan_info*, i32 }
%struct.jpeg_comp_master = type opaque
%struct.jpeg_c_main_controller = type opaque
%struct.jpeg_c_prep_controller = type opaque
%struct.jpeg_c_coef_controller = type opaque
%struct.jpeg_marker_writer = type opaque
%struct.jpeg_color_converter = type opaque
%struct.jpeg_downsampler = type opaque
%struct.jpeg_forward_dct = type opaque
%struct.jpeg_entropy_encoder = type opaque
%struct.jpeg_scan_info = type { i32, [4 x i32], i32, i32, i32, i32 }
%struct.jpeg_source_mgr = type { i8*, i64, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i64)*, i32 (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*)* }

@jpegFields = internal constant [4 x %struct._TIFFField] [%struct._TIFFField { i32 347, i16 -3, i16 -3, i32 7, i32 0, i32 40, i32 40, i16 66, i8 0, i8 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i32 0, i32 0), %struct._TIFFFieldArray* null }, %struct._TIFFField { i32 65537, i16 0, i16 0, i32 0, i32 0, i32 13, i32 0, i16 0, i8 1, i8 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.7, i32 0, i32 0), %struct._TIFFFieldArray* null }, %struct._TIFFField { i32 65538, i16 0, i16 0, i32 0, i32 0, i32 13, i32 0, i16 0, i8 0, i8 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.7, i32 0, i32 0), %struct._TIFFFieldArray* null }, %struct._TIFFField { i32 65539, i16 0, i16 0, i32 0, i32 0, i32 13, i32 0, i16 0, i8 0, i8 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.7, i32 0, i32 0), %struct._TIFFFieldArray* null }], align 16
@.str = private unnamed_addr constant [13 x i8] c"TIFFInitJPEG\00", align 1
@.str.1 = private unnamed_addr constant [40 x i8] c"Merging JPEG codec-specific tags failed\00", align 1
@.str.2 = private unnamed_addr constant [30 x i8] c"No space for JPEG state block\00", align 1
@.str.3 = private unnamed_addr constant [42 x i8] c"Failed to allocate memory for JPEG tables\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"JPEGLib\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@std_fill_input_buffer.dummy_EOI = internal constant [2 x i8] c"\FF\D9", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"JPEGTables\00", align 1
@.str.7 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.8 = private unnamed_addr constant [28 x i8] c"  JPEG Tables: (%lu bytes)\0A\00", align 1
@JPEGFixupTagsSubsampling.module = internal constant [25 x i8] c"JPEGFixupTagsSubsampling\00", align 16
@.str.9 = private unnamed_addr constant [93 x i8] c"Unable to allocate memory for auto-correcting of subsampling values; auto-correcting skipped\00", align 1
@.str.10 = private unnamed_addr constant [124 x i8] c"Unable to auto-correct subsampling values, likely corrupt JPEG compressed data in first strip/tile; auto-correcting skipped\00", align 1
@JPEGFixupTagsSubsamplingSec.module = internal constant [28 x i8] c"JPEGFixupTagsSubsamplingSec\00", align 16
@.str.11 = private unnamed_addr constant [122 x i8] c"Subsampling values inside JPEG compressed data have no TIFF equivalent, auto-correction of TIFF subsampling values failed\00", align 1
@.str.12 = private unnamed_addr constant [118 x i8] c"Auto-corrected former TIFF subsampling values [%d,%d] to match subsampling values inside JPEG compressed data [%d,%d]\00", align 1
@.str.13 = private unnamed_addr constant [16 x i8] c"JPEGSetupDecode\00", align 1
@.str.14 = private unnamed_addr constant [23 x i8] c"Bogus JPEGTables field\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"JPEGMEM\00", align 1
@JPEGPreDecode.module = internal constant [14 x i8] c"JPEGPreDecode\00", align 1
@.str.16 = private unnamed_addr constant [57 x i8] c"Improper JPEG strip/tile size, expected %dx%d, got %dx%d\00", align 1
@.str.17 = private unnamed_addr constant [71 x i8] c"JPEG strip size exceeds expected dimensions, expected %dx%d, got %dx%d\00", align 1
@.str.18 = private unnamed_addr constant [76 x i8] c"JPEG strip/tile size exceeds expected dimensions, expected %dx%d, got %dx%d\00", align 1
@.str.19 = private unnamed_addr constant [30 x i8] c"Improper JPEG component count\00", align 1
@.str.20 = private unnamed_addr constant [29 x i8] c"Improper JPEG data precision\00", align 1
@.str.21 = private unnamed_addr constant [38 x i8] c"LIBTIFF_ALLOW_LARGE_LIBJPEG_MEM_ALLOC\00", align 1
@.str.22 = private unnamed_addr constant [330 x i8] c"Reading this strip would require libjpeg to allocate at least %u bytes. This is disabled since above the %u threshold. You may override this restriction by defining the LIBTIFF_ALLOW_LARGE_LIBJPEG_MEM_ALLOC environment variable, or recompile libtiff by defining the TIFF_LIBJPEG_LARGEST_MEM_ALLOC macro to a value greater than %u\00", align 1
@.str.23 = private unnamed_addr constant [65 x i8] c"Improper JPEG sampling factors %d,%d\0AApparently should be %d,%d.\00", align 1
@.str.24 = private unnamed_addr constant [31 x i8] c"Improper JPEG sampling factors\00", align 1
@.str.25 = private unnamed_addr constant [17 x i8] c"TIFFReadScanline\00", align 1
@.str.26 = private unnamed_addr constant [141 x i8] c"scanline oriented access is not supported for downsampled JPEG compressed images, consider enabling TIFF_JPEGCOLORMODE as JPEGCOLORMODE_RGB.\00", align 1
@.str.27 = private unnamed_addr constant [14 x i8] c"JPEGDecodeRaw\00", align 1
@.str.28 = private unnamed_addr constant [50 x i8] c"application buffer not large enough for all data.\00", align 1
@.str.29 = private unnamed_addr constant [77 x i8] c"application buffer not large enough for all data, possible subsampling issue\00", align 1
@.str.30 = private unnamed_addr constant [37 x i8] c"LIBTIFF_JPEG_MAX_ALLOWED_SCAN_NUMBER\00", align 1
@.str.31 = private unnamed_addr constant [26 x i8] c"TIFFjpeg_progress_monitor\00", align 1
@.str.32 = private unnamed_addr constant [139 x i8] c"Scan number %d exceeds maximum scans (%d). This limit can be raised through the LIBTIFF_JPEG_MAX_ALLOWED_SCAN_NUMBER environment variable.\00", align 1
@.str.33 = private unnamed_addr constant [29 x i8] c"fractional scanline not read\00", align 1
@JPEGSetupEncode.module = internal constant [16 x i8] c"JPEGSetupEncode\00", align 16
@.str.34 = private unnamed_addr constant [43 x i8] c"Invalig horizontal/vertical sampling value\00", align 1
@.str.35 = private unnamed_addr constant [38 x i8] c"BitsPerSample %d not allowed for JPEG\00", align 1
@.str.36 = private unnamed_addr constant [50 x i8] c"PhotometricInterpretation %d not allowed for JPEG\00", align 1
@.str.37 = private unnamed_addr constant [40 x i8] c"JPEG tile height must be multiple of %d\00", align 1
@.str.38 = private unnamed_addr constant [39 x i8] c"JPEG tile width must be multiple of %d\00", align 1
@.str.39 = private unnamed_addr constant [45 x i8] c"RowsPerStrip must be multiple of %d for JPEG\00", align 1
@.str.40 = private unnamed_addr constant [10 x i8] zeroinitializer, align 1
@.str.41 = private unnamed_addr constant [21 x i8] c"TIFFjpeg_tables_dest\00", align 1
@.str.42 = private unnamed_addr constant [24 x i8] c"No space for JPEGTables\00", align 1
@JPEGPreEncode.module = internal constant [14 x i8] c"JPEGPreEncode\00", align 1
@.str.43 = private unnamed_addr constant [30 x i8] c"Strip/tile too large for JPEG\00", align 1
@.str.44 = private unnamed_addr constant [30 x i8] c"fractional scanline discarded\00", align 1
@.str.45 = private unnamed_addr constant [11 x i8] c"JPEGEncode\00", align 1
@.str.46 = private unnamed_addr constant [26 x i8] c"Failed to allocate memory\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @TIFFJPEGIsFullStripRequired(%struct.tiff*) local_unnamed_addr #0 {
  %2 = alloca %struct.JPEGState, align 8
  %3 = bitcast %struct.JPEGState* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1320, i8* nonnull %3) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 0, i64 1320, i1 false)
  %4 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %2, i64 0, i32 7
  store %struct.tiff* %0, %struct.tiff** %4, align 8
  %5 = call fastcc i32 @TIFFjpeg_create_decompress(%struct.JPEGState* nonnull %2)
  %6 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %2, i64 0, i32 6
  %7 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %2, i64 0, i32 0, i32 0, i32 6
  store %struct.jpeg_source_mgr* %6, %struct.jpeg_source_mgr** %7, align 8
  %8 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %2, i64 0, i32 6, i32 2
  store void (%struct.jpeg_decompress_struct*)* @std_init_source, void (%struct.jpeg_decompress_struct*)** %8, align 8
  %9 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %2, i64 0, i32 6, i32 3
  store i32 (%struct.jpeg_decompress_struct*)* @std_fill_input_buffer, i32 (%struct.jpeg_decompress_struct*)** %9, align 8
  %10 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %2, i64 0, i32 6, i32 4
  store void (%struct.jpeg_decompress_struct*, i64)* @std_skip_input_data, void (%struct.jpeg_decompress_struct*, i64)** %10, align 8
  %11 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %2, i64 0, i32 6, i32 5
  store i32 (%struct.jpeg_decompress_struct*, i32)* @jpeg_resync_to_restart, i32 (%struct.jpeg_decompress_struct*, i32)** %11, align 8
  %12 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %2, i64 0, i32 6, i32 6
  store void (%struct.jpeg_decompress_struct*)* @std_term_source, void (%struct.jpeg_decompress_struct*)** %12, align 8
  %13 = bitcast %struct.jpeg_source_mgr* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 16, i1 false) #11
  %14 = call fastcc i32 @TIFFjpeg_read_header(%struct.JPEGState* nonnull %2, i32 1)
  %15 = icmp eq i32 %14, 1
  br i1 %15, label %16, label %18

16:                                               ; preds = %1
  %17 = call fastcc i32 @TIFFjpeg_has_multiple_scans(%struct.JPEGState* nonnull %2)
  br label %18

18:                                               ; preds = %1, %16
  %19 = phi i32 [ %17, %16 ], [ 0, %1 ]
  call fastcc void @TIFFjpeg_destroy(%struct.JPEGState* nonnull %2)
  call void @llvm.lifetime.end.p0i8(i64 1320, i8* nonnull %3) #11
  ret i32 %19
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @TIFFjpeg_create_decompress(%struct.JPEGState*) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 2
  %3 = call %struct.jpeg_error_mgr* @jpeg_std_error(%struct.jpeg_error_mgr* %2) #11
  %4 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 0, i32 0, i32 0
  store %struct.jpeg_error_mgr* %3, %struct.jpeg_error_mgr** %4, align 8
  %5 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %2, i64 0, i32 0
  store void (%struct.jpeg_common_struct*)* @TIFFjpeg_error_exit, void (%struct.jpeg_common_struct*)** %5, align 8
  %6 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 2, i32 2
  store void (%struct.jpeg_common_struct*)* @TIFFjpeg_output_message, void (%struct.jpeg_common_struct*)** %6, align 8
  %7 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 0, i32 0, i32 3
  store i8* null, i8** %7, align 8
  %8 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 3, i64 0
  %9 = call i32 @_setjmp(%struct.__jmp_buf_tag* %8) #12
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %13

11:                                               ; preds = %1
  %12 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 0, i32 0
  call void @jpeg_CreateDecompress(%struct.jpeg_decompress_struct* %12, i32 62, i64 632) #11
  br label %13

13:                                               ; preds = %1, %11
  %14 = phi i32 [ 1, %11 ], [ 0, %1 ]
  ret i32 %14
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @TIFFjpeg_read_header(%struct.JPEGState*, i32) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 3, i64 0
  %4 = call i32 @_setjmp(%struct.__jmp_buf_tag* %3) #12
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 0, i32 0
  %8 = call i32 @jpeg_read_header(%struct.jpeg_decompress_struct* %7, i32 %1) #11
  br label %9

9:                                                ; preds = %2, %6
  %10 = phi i32 [ %8, %6 ], [ -1, %2 ]
  ret i32 %10
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @TIFFjpeg_destroy(%struct.JPEGState*) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 3, i64 0
  %3 = call i32 @_setjmp(%struct.__jmp_buf_tag* %2) #12
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %7

5:                                                ; preds = %1
  %6 = bitcast %struct.JPEGState* %0 to %struct.jpeg_common_struct*
  call void @jpeg_destroy(%struct.jpeg_common_struct* %6) #11
  br label %7

7:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @TIFFjpeg_has_multiple_scans(%struct.JPEGState*) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 3, i64 0
  %3 = call i32 @_setjmp(%struct.__jmp_buf_tag* %2) #12
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 0, i32 0
  %7 = call i32 @jpeg_has_multiple_scans(%struct.jpeg_decompress_struct* %6) #11
  br label %8

8:                                                ; preds = %1, %5
  %9 = phi i32 [ %7, %5 ], [ 0, %1 ]
  ret i32 %9
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @TIFFInitJPEG(%struct.tiff*, i32) local_unnamed_addr #0 {
  %3 = tail call i32 @_TIFFMergeFields(%struct.tiff* %0, %struct._TIFFField* getelementptr inbounds ([4 x %struct._TIFFField], [4 x %struct._TIFFField]* @jpegFields, i64 0, i64 0), i32 4) #11
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %8

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %7 = load i8*, i8** %6, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %7, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0)) #11
  br label %78

8:                                                ; preds = %2
  %9 = tail call i8* @_TIFFmalloc(i64 1320) #11
  %10 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  store i8* %9, i8** %10, align 8
  %11 = icmp eq i8* %9, null
  br i1 %11, label %12, label %15

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %14 = load i8*, i8** %13, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %14, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i64 0, i64 0)) #11
  br label %78

15:                                               ; preds = %8
  tail call void @_TIFFmemset(i8* nonnull %9, i32 0, i64 1320) #11
  %16 = bitcast i8** %10 to %struct.JPEGState**
  %17 = load %struct.JPEGState*, %struct.JPEGState** %16, align 8
  %18 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %17, i64 0, i32 7
  store %struct.tiff* %0, %struct.tiff** %18, align 8
  %19 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 65
  %20 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 65, i32 1
  %21 = bitcast i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %17, i64 0, i32 15
  %24 = bitcast i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %23 to i64*
  store i64 %22, i64* %24, align 8
  store i32 (%struct.tiff*, i32, %struct.__va_list_tag*)* @JPEGVGetField, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %20, align 8
  %25 = getelementptr inbounds %struct.TIFFTagMethods, %struct.TIFFTagMethods* %19, i64 0, i32 0
  %26 = bitcast %struct.TIFFTagMethods* %19 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %17, i64 0, i32 16
  %29 = bitcast i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %28 to i64*
  store i64 %27, i64* %29, align 8
  store i32 (%struct.tiff*, i32, %struct.__va_list_tag*)* @JPEGVSetField, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %25, align 8
  %30 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 65, i32 2
  %31 = bitcast void (%struct.tiff*, %struct._IO_FILE*, i64)** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %17, i64 0, i32 17
  %34 = bitcast void (%struct.tiff*, %struct._IO_FILE*, i64)** %33 to i64*
  store i64 %32, i64* %34, align 8
  store void (%struct.tiff*, %struct._IO_FILE*, i64)* @JPEGPrintDir, void (%struct.tiff*, %struct._IO_FILE*, i64)** %30, align 8
  %35 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %17, i64 0, i32 20
  store i8* null, i8** %35, align 8
  %36 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %17, i64 0, i32 21
  %37 = bitcast i32* %36 to <4 x i32>*
  store <4 x i32> <i32 0, i32 75, i32 0, i32 3>, <4 x i32>* %37, align 8
  %38 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %17, i64 0, i32 25
  store i32 0, i32* %38, align 8
  %39 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 24
  %40 = bitcast {}** %39 to <2 x i32 (%struct.tiff*)*>*
  store <2 x i32 (%struct.tiff*)*> <i32 (%struct.tiff*)* @JPEGFixupTags, i32 (%struct.tiff*)* @JPEGSetupDecode>, <2 x i32 (%struct.tiff*)*>* %40, align 8
  %41 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 26
  store i32 (%struct.tiff*, i16)* @JPEGPreDecode, i32 (%struct.tiff*, i16)** %41, align 8
  %42 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 31
  %43 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 33
  %44 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 35
  %45 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 27
  %46 = bitcast {}** %45 to i32 (%struct.tiff*)**
  store i32 (%struct.tiff*)* @JPEGSetupEncode, i32 (%struct.tiff*)** %46, align 8
  %47 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 29
  store i32 (%struct.tiff*, i16)* @JPEGPreEncode, i32 (%struct.tiff*, i16)** %47, align 8
  %48 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 30
  %49 = bitcast {}** %48 to i32 (%struct.tiff*)**
  store i32 (%struct.tiff*)* @JPEGPostEncode, i32 (%struct.tiff*)** %49, align 8
  %50 = bitcast i32 (%struct.tiff*, i8*, i64, i16)** %42 to <2 x i32 (%struct.tiff*, i8*, i64, i16)*>*
  store <2 x i32 (%struct.tiff*, i8*, i64, i16)*> <i32 (%struct.tiff*, i8*, i64, i16)* @JPEGDecode, i32 (%struct.tiff*, i8*, i64, i16)* @JPEGEncode>, <2 x i32 (%struct.tiff*, i8*, i64, i16)*>* %50, align 8
  %51 = bitcast i32 (%struct.tiff*, i8*, i64, i16)** %43 to <2 x i32 (%struct.tiff*, i8*, i64, i16)*>*
  store <2 x i32 (%struct.tiff*, i8*, i64, i16)*> <i32 (%struct.tiff*, i8*, i64, i16)* @JPEGDecode, i32 (%struct.tiff*, i8*, i64, i16)* @JPEGEncode>, <2 x i32 (%struct.tiff*, i8*, i64, i16)*>* %51, align 8
  %52 = bitcast i32 (%struct.tiff*, i8*, i64, i16)** %44 to <2 x i32 (%struct.tiff*, i8*, i64, i16)*>*
  store <2 x i32 (%struct.tiff*, i8*, i64, i16)*> <i32 (%struct.tiff*, i8*, i64, i16)* @JPEGDecode, i32 (%struct.tiff*, i8*, i64, i16)* @JPEGEncode>, <2 x i32 (%struct.tiff*, i8*, i64, i16)*>* %52, align 8
  %53 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 39
  store void (%struct.tiff*)* @JPEGCleanup, void (%struct.tiff*)** %53, align 8
  %54 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 40
  %55 = bitcast i32 (%struct.tiff*, i32)** %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %17, i64 0, i32 18
  %58 = bitcast i32 (%struct.tiff*, i32)** %57 to i64*
  store i64 %56, i64* %58, align 8
  store i32 (%struct.tiff*, i32)* @JPEGDefaultStripSize, i32 (%struct.tiff*, i32)** %54, align 8
  %59 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 41
  %60 = bitcast void (%struct.tiff*, i32*, i32*)** %59 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %17, i64 0, i32 19
  %63 = bitcast void (%struct.tiff*, i32*, i32*)** %62 to i64*
  store i64 %61, i64* %63, align 8
  store void (%struct.tiff*, i32*, i32*)* @JPEGDefaultTileSize, void (%struct.tiff*, i32*, i32*)** %59, align 8
  %64 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 3
  %65 = load i32, i32* %64, align 8
  %66 = or i32 %65, 256
  store i32 %66, i32* %64, align 8
  %67 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %17, i64 0, i32 1
  store i32 0, i32* %67, align 8
  %68 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 4
  %69 = load i64, i64* %68, align 8
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %78

71:                                               ; preds = %15
  store i32 2000, i32* %36, align 8
  %72 = tail call i8* @_TIFFmalloc(i64 2000) #11
  store i8* %72, i8** %35, align 8
  %73 = icmp eq i8* %72, null
  br i1 %73, label %75, label %74

74:                                               ; preds = %71
  tail call void @_TIFFmemset(i8* nonnull %72, i32 0, i64 2000) #11
  br label %78

75:                                               ; preds = %71
  %76 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %77 = load i8*, i8** %76, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %77, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.3, i64 0, i64 0)) #11
  br label %78

78:                                               ; preds = %15, %74, %75, %12, %5
  %79 = phi i32 [ 0, %12 ], [ 0, %75 ], [ 0, %5 ], [ 1, %74 ], [ 1, %15 ]
  ret i32 %79
}

declare i32 @_TIFFMergeFields(%struct.tiff*, %struct._TIFFField*, i32) local_unnamed_addr #2

declare void @TIFFErrorExt(i8*, i8*, i8*, ...) local_unnamed_addr #2

declare i8* @_TIFFmalloc(i64) local_unnamed_addr #2

declare void @_TIFFmemset(i8*, i32, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal i32 @JPEGVGetField(%struct.tiff*, i32, %struct.__va_list_tag*) #0 {
  %4 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %5 = bitcast i8** %4 to %struct.JPEGState**
  %6 = load %struct.JPEGState*, %struct.JPEGState** %5, align 8
  switch i32 %1, label %106 [
    i32 347, label %7
    i32 65537, label %46
    i32 65538, label %66
    i32 65539, label %86
  ]

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 21
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = icmp ult i32 %11, 41
  br i1 %12, label %13, label %19

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 3
  %15 = load i8*, i8** %14, align 8
  %16 = sext i32 %11 to i64
  %17 = getelementptr i8, i8* %15, i64 %16
  %18 = add nuw nsw i32 %11, 8
  store i32 %18, i32* %10, align 8
  br label %23

19:                                               ; preds = %7
  %20 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 2
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr i8, i8* %21, i64 8
  store i8* %22, i8** %20, align 8
  br label %23

23:                                               ; preds = %19, %13
  %24 = phi i8* [ %17, %13 ], [ %21, %19 ]
  %25 = bitcast i8* %24 to i32**
  %26 = load i32*, i32** %25, align 8
  store i32 %9, i32* %26, align 4
  %27 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 20
  %28 = bitcast i8** %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = load i32, i32* %10, align 8
  %31 = icmp ult i32 %30, 41
  br i1 %31, label %32, label %38

32:                                               ; preds = %23
  %33 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 3
  %34 = load i8*, i8** %33, align 8
  %35 = sext i32 %30 to i64
  %36 = getelementptr i8, i8* %34, i64 %35
  %37 = add nuw nsw i32 %30, 8
  store i32 %37, i32* %10, align 8
  br label %42

38:                                               ; preds = %23
  %39 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 2
  %40 = load i8*, i8** %39, align 8
  %41 = getelementptr i8, i8* %40, i64 8
  store i8* %41, i8** %39, align 8
  br label %42

42:                                               ; preds = %38, %32
  %43 = phi i8* [ %36, %32 ], [ %40, %38 ]
  %44 = bitcast i8* %43 to i64**
  %45 = load i64*, i64** %44, align 8
  store i64 %29, i64* %45, align 8
  br label %110

46:                                               ; preds = %3
  %47 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 22
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 0
  %50 = load i32, i32* %49, align 8
  %51 = icmp ult i32 %50, 41
  br i1 %51, label %52, label %58

52:                                               ; preds = %46
  %53 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 3
  %54 = load i8*, i8** %53, align 8
  %55 = sext i32 %50 to i64
  %56 = getelementptr i8, i8* %54, i64 %55
  %57 = add nuw nsw i32 %50, 8
  store i32 %57, i32* %49, align 8
  br label %62

58:                                               ; preds = %46
  %59 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 2
  %60 = load i8*, i8** %59, align 8
  %61 = getelementptr i8, i8* %60, i64 8
  store i8* %61, i8** %59, align 8
  br label %62

62:                                               ; preds = %58, %52
  %63 = phi i8* [ %56, %52 ], [ %60, %58 ]
  %64 = bitcast i8* %63 to i32**
  %65 = load i32*, i32** %64, align 8
  store i32 %48, i32* %65, align 4
  br label %110

66:                                               ; preds = %3
  %67 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 23
  %68 = load i32, i32* %67, align 8
  %69 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 0
  %70 = load i32, i32* %69, align 8
  %71 = icmp ult i32 %70, 41
  br i1 %71, label %72, label %78

72:                                               ; preds = %66
  %73 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 3
  %74 = load i8*, i8** %73, align 8
  %75 = sext i32 %70 to i64
  %76 = getelementptr i8, i8* %74, i64 %75
  %77 = add nuw nsw i32 %70, 8
  store i32 %77, i32* %69, align 8
  br label %82

78:                                               ; preds = %66
  %79 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 2
  %80 = load i8*, i8** %79, align 8
  %81 = getelementptr i8, i8* %80, i64 8
  store i8* %81, i8** %79, align 8
  br label %82

82:                                               ; preds = %78, %72
  %83 = phi i8* [ %76, %72 ], [ %80, %78 ]
  %84 = bitcast i8* %83 to i32**
  %85 = load i32*, i32** %84, align 8
  store i32 %68, i32* %85, align 4
  br label %110

86:                                               ; preds = %3
  %87 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 24
  %88 = load i32, i32* %87, align 4
  %89 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 0
  %90 = load i32, i32* %89, align 8
  %91 = icmp ult i32 %90, 41
  br i1 %91, label %92, label %98

92:                                               ; preds = %86
  %93 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 3
  %94 = load i8*, i8** %93, align 8
  %95 = sext i32 %90 to i64
  %96 = getelementptr i8, i8* %94, i64 %95
  %97 = add nuw nsw i32 %90, 8
  store i32 %97, i32* %89, align 8
  br label %102

98:                                               ; preds = %86
  %99 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 2
  %100 = load i8*, i8** %99, align 8
  %101 = getelementptr i8, i8* %100, i64 8
  store i8* %101, i8** %99, align 8
  br label %102

102:                                              ; preds = %98, %92
  %103 = phi i8* [ %96, %92 ], [ %100, %98 ]
  %104 = bitcast i8* %103 to i32**
  %105 = load i32*, i32** %104, align 8
  store i32 %88, i32* %105, align 4
  br label %110

106:                                              ; preds = %3
  %107 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 15
  %108 = load i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %107, align 8
  %109 = tail call i32 %108(%struct.tiff* %0, i32 %1, %struct.__va_list_tag* %2) #11
  br label %110

110:                                              ; preds = %42, %62, %82, %102, %106
  %111 = phi i32 [ %109, %106 ], [ 1, %102 ], [ 1, %82 ], [ 1, %62 ], [ 1, %42 ]
  ret i32 %111
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @JPEGVSetField(%struct.tiff*, i32, %struct.__va_list_tag*) #0 {
  %4 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %5 = bitcast i8** %4 to %struct.JPEGState**
  %6 = load %struct.JPEGState*, %struct.JPEGState** %5, align 8
  switch i32 %1, label %186 [
    i32 347, label %7
    i32 65537, label %50
    i32 65538, label %69
    i32 262, label %123
    i32 65539, label %162
    i32 530, label %181
  ]

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = icmp ult i32 %9, 41
  br i1 %10, label %11, label %17

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 3
  %13 = load i8*, i8** %12, align 8
  %14 = sext i32 %9 to i64
  %15 = getelementptr i8, i8* %13, i64 %14
  %16 = add nuw nsw i32 %9, 8
  store i32 %16, i32* %8, align 8
  br label %21

17:                                               ; preds = %7
  %18 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 2
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr i8, i8* %19, i64 8
  store i8* %20, i8** %18, align 8
  br label %21

21:                                               ; preds = %17, %11
  %22 = phi i32 [ %16, %11 ], [ %9, %17 ]
  %23 = phi i8* [ %15, %11 ], [ %19, %17 ]
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %205, label %27

27:                                               ; preds = %21
  %28 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 20
  %29 = icmp ult i32 %22, 41
  br i1 %29, label %30, label %36

30:                                               ; preds = %27
  %31 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 3
  %32 = load i8*, i8** %31, align 8
  %33 = sext i32 %22 to i64
  %34 = getelementptr i8, i8* %32, i64 %33
  %35 = add nuw nsw i32 %22, 8
  store i32 %35, i32* %8, align 8
  br label %40

36:                                               ; preds = %27
  %37 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 2
  %38 = load i8*, i8** %37, align 8
  %39 = getelementptr i8, i8* %38, i64 8
  store i8* %39, i8** %37, align 8
  br label %40

40:                                               ; preds = %36, %30
  %41 = phi i8* [ %34, %30 ], [ %38, %36 ]
  %42 = bitcast i8* %41 to i8**
  %43 = load i8*, i8** %42, align 8
  tail call void @_TIFFsetByteArray(i8** %28, i8* %43, i32 %25) #11
  %44 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 21
  store i32 %25, i32* %44, align 8
  %45 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 0, i64 2
  %46 = load i64, i64* %45, align 8
  %47 = or i64 %46, 4
  store i64 %47, i64* %45, align 8
  %48 = tail call %struct._TIFFField* @TIFFFieldWithTag(%struct.tiff* %0, i32 347) #11
  %49 = icmp eq %struct._TIFFField* %48, null
  br i1 %49, label %205, label %190

50:                                               ; preds = %3
  %51 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 0
  %52 = load i32, i32* %51, align 8
  %53 = icmp ult i32 %52, 41
  br i1 %53, label %54, label %60

54:                                               ; preds = %50
  %55 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 3
  %56 = load i8*, i8** %55, align 8
  %57 = sext i32 %52 to i64
  %58 = getelementptr i8, i8* %56, i64 %57
  %59 = add nuw nsw i32 %52, 8
  store i32 %59, i32* %51, align 8
  br label %64

60:                                               ; preds = %50
  %61 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 2
  %62 = load i8*, i8** %61, align 8
  %63 = getelementptr i8, i8* %62, i64 8
  store i8* %63, i8** %61, align 8
  br label %64

64:                                               ; preds = %60, %54
  %65 = phi i8* [ %58, %54 ], [ %62, %60 ]
  %66 = bitcast i8* %65 to i32*
  %67 = load i32, i32* %66, align 4
  %68 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 22
  store i32 %67, i32* %68, align 4
  br label %205

69:                                               ; preds = %3
  %70 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 0
  %71 = load i32, i32* %70, align 8
  %72 = icmp ult i32 %71, 41
  br i1 %72, label %73, label %79

73:                                               ; preds = %69
  %74 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 3
  %75 = load i8*, i8** %74, align 8
  %76 = sext i32 %71 to i64
  %77 = getelementptr i8, i8* %75, i64 %76
  %78 = add nuw nsw i32 %71, 8
  store i32 %78, i32* %70, align 8
  br label %83

79:                                               ; preds = %69
  %80 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 2
  %81 = load i8*, i8** %80, align 8
  %82 = getelementptr i8, i8* %81, i64 8
  store i8* %82, i8** %80, align 8
  br label %83

83:                                               ; preds = %79, %73
  %84 = phi i8* [ %77, %73 ], [ %81, %79 ]
  %85 = bitcast i8* %84 to i32*
  %86 = load i32, i32* %85, align 4
  %87 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 23
  store i32 %86, i32* %87, align 8
  %88 = load %struct.JPEGState*, %struct.JPEGState** %5, align 8
  %89 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 3
  %90 = load i32, i32* %89, align 8
  %91 = and i32 %90, -16385
  store i32 %91, i32* %89, align 8
  %92 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 24
  %93 = load i16, i16* %92, align 2
  %94 = icmp eq i16 %93, 1
  br i1 %94, label %95, label %105

95:                                               ; preds = %83
  %96 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 11
  %97 = load i16, i16* %96, align 2
  %98 = icmp eq i16 %97, 6
  br i1 %98, label %99, label %105

99:                                               ; preds = %95
  %100 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %88, i64 0, i32 23
  %101 = load i32, i32* %100, align 8
  %102 = icmp eq i32 %101, 1
  br i1 %102, label %103, label %105

103:                                              ; preds = %99
  %104 = or i32 %90, 16384
  store i32 %104, i32* %89, align 8
  br label %105

105:                                              ; preds = %103, %99, %95, %83
  %106 = phi i32 [ %104, %103 ], [ %91, %99 ], [ %91, %95 ], [ %91, %83 ]
  %107 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 22
  %108 = load i64, i64* %107, align 8
  %109 = icmp sgt i64 %108, 0
  br i1 %109, label %110, label %117

110:                                              ; preds = %105
  %111 = and i32 %106, 1024
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %115, label %113

113:                                              ; preds = %110
  %114 = tail call i64 @TIFFTileSize(%struct.tiff* %0) #11
  br label %115

115:                                              ; preds = %113, %110
  %116 = phi i64 [ %114, %113 ], [ -1, %110 ]
  store i64 %116, i64* %107, align 8
  br label %117

117:                                              ; preds = %115, %105
  %118 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 43
  %119 = load i64, i64* %118, align 8
  %120 = icmp sgt i64 %119, 0
  br i1 %120, label %121, label %205

121:                                              ; preds = %117
  %122 = tail call i64 @TIFFScanlineSize(%struct.tiff* %0) #11
  store i64 %122, i64* %118, align 8
  br label %205

123:                                              ; preds = %3
  %124 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 16
  %125 = load i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %124, align 8
  %126 = tail call i32 %125(%struct.tiff* %0, i32 262, %struct.__va_list_tag* %2) #11
  %127 = load %struct.JPEGState*, %struct.JPEGState** %5, align 8
  %128 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 3
  %129 = load i32, i32* %128, align 8
  %130 = and i32 %129, -16385
  store i32 %130, i32* %128, align 8
  %131 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 24
  %132 = load i16, i16* %131, align 2
  %133 = icmp eq i16 %132, 1
  br i1 %133, label %134, label %144

134:                                              ; preds = %123
  %135 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 11
  %136 = load i16, i16* %135, align 2
  %137 = icmp eq i16 %136, 6
  br i1 %137, label %138, label %144

138:                                              ; preds = %134
  %139 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %127, i64 0, i32 23
  %140 = load i32, i32* %139, align 8
  %141 = icmp eq i32 %140, 1
  br i1 %141, label %142, label %144

142:                                              ; preds = %138
  %143 = or i32 %129, 16384
  store i32 %143, i32* %128, align 8
  br label %144

144:                                              ; preds = %142, %138, %134, %123
  %145 = phi i32 [ %143, %142 ], [ %130, %138 ], [ %130, %134 ], [ %130, %123 ]
  %146 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 22
  %147 = load i64, i64* %146, align 8
  %148 = icmp sgt i64 %147, 0
  br i1 %148, label %149, label %156

149:                                              ; preds = %144
  %150 = and i32 %145, 1024
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %154, label %152

152:                                              ; preds = %149
  %153 = tail call i64 @TIFFTileSize(%struct.tiff* %0) #11
  br label %154

154:                                              ; preds = %152, %149
  %155 = phi i64 [ %153, %152 ], [ -1, %149 ]
  store i64 %155, i64* %146, align 8
  br label %156

156:                                              ; preds = %154, %144
  %157 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 43
  %158 = load i64, i64* %157, align 8
  %159 = icmp sgt i64 %158, 0
  br i1 %159, label %160, label %205

160:                                              ; preds = %156
  %161 = tail call i64 @TIFFScanlineSize(%struct.tiff* %0) #11
  store i64 %161, i64* %157, align 8
  br label %205

162:                                              ; preds = %3
  %163 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 0
  %164 = load i32, i32* %163, align 8
  %165 = icmp ult i32 %164, 41
  br i1 %165, label %166, label %172

166:                                              ; preds = %162
  %167 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 3
  %168 = load i8*, i8** %167, align 8
  %169 = sext i32 %164 to i64
  %170 = getelementptr i8, i8* %168, i64 %169
  %171 = add nuw nsw i32 %164, 8
  store i32 %171, i32* %163, align 8
  br label %176

172:                                              ; preds = %162
  %173 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 2
  %174 = load i8*, i8** %173, align 8
  %175 = getelementptr i8, i8* %174, i64 8
  store i8* %175, i8** %173, align 8
  br label %176

176:                                              ; preds = %172, %166
  %177 = phi i8* [ %170, %166 ], [ %174, %172 ]
  %178 = bitcast i8* %177 to i32*
  %179 = load i32, i32* %178, align 4
  %180 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 24
  store i32 %179, i32* %180, align 4
  br label %205

181:                                              ; preds = %3
  %182 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 25
  store i32 1, i32* %182, align 8
  %183 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 16
  %184 = load i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %183, align 8
  %185 = tail call i32 %184(%struct.tiff* %0, i32 530, %struct.__va_list_tag* %2) #11
  br label %205

186:                                              ; preds = %3
  %187 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 16
  %188 = load i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %187, align 8
  %189 = tail call i32 %188(%struct.tiff* %0, i32 %1, %struct.__va_list_tag* %2) #11
  br label %205

190:                                              ; preds = %40
  %191 = getelementptr inbounds %struct._TIFFField, %struct._TIFFField* %48, i64 0, i32 7
  %192 = load i16, i16* %191, align 8
  %193 = zext i16 %192 to i32
  %194 = and i32 %193, 31
  %195 = zext i32 %194 to i64
  %196 = shl i64 1, %195
  %197 = lshr i32 %193, 5
  %198 = zext i32 %197 to i64
  %199 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 0, i64 %198
  %200 = load i64, i64* %199, align 8
  %201 = or i64 %196, %200
  store i64 %201, i64* %199, align 8
  %202 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 3
  %203 = load i32, i32* %202, align 8
  %204 = or i32 %203, 8
  store i32 %204, i32* %202, align 8
  br label %205

205:                                              ; preds = %160, %156, %121, %117, %40, %21, %190, %186, %181, %176, %64
  %206 = phi i32 [ %189, %186 ], [ %185, %181 ], [ 1, %176 ], [ 1, %64 ], [ 1, %190 ], [ 0, %21 ], [ 0, %40 ], [ 1, %117 ], [ 1, %121 ], [ %126, %156 ], [ %126, %160 ]
  ret i32 %206
}

; Function Attrs: nounwind ssp uwtable
define internal void @JPEGPrintDir(%struct.tiff*, %struct._IO_FILE*, i64) #0 {
  %4 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %5 = bitcast i8** %4 to %struct.JPEGState**
  %6 = load %struct.JPEGState*, %struct.JPEGState** %5, align 8
  %7 = icmp eq %struct.JPEGState* %6, null
  br i1 %7, label %23, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 0, i64 2
  %10 = load i64, i64* %9, align 8
  %11 = and i64 %10, 4
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %18, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 21
  %15 = load i32, i32* %14, align 8
  %16 = zext i32 %15 to i64
  %17 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8, i64 0, i64 0), i64 %16)
  br label %18

18:                                               ; preds = %8, %13
  %19 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 17
  %20 = load void (%struct.tiff*, %struct._IO_FILE*, i64)*, void (%struct.tiff*, %struct._IO_FILE*, i64)** %19, align 8
  %21 = icmp eq void (%struct.tiff*, %struct._IO_FILE*, i64)* %20, null
  br i1 %21, label %23, label %22

22:                                               ; preds = %18
  tail call void %20(%struct.tiff* %0, %struct._IO_FILE* %1, i64 %2) #11
  br label %23

23:                                               ; preds = %18, %3, %22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @JPEGFixupTags(%struct.tiff*) #0 {
  %2 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %3 = bitcast i8** %2 to %struct.JPEGState**
  %4 = load %struct.JPEGState*, %struct.JPEGState** %3, align 8
  %5 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 11
  %6 = load i16, i16* %5, align 2
  %7 = icmp eq i16 %6, 6
  br i1 %7, label %8, label %430

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 24
  %10 = load i16, i16* %9, align 2
  %11 = icmp eq i16 %10, 1
  br i1 %11, label %12, label %430

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 15
  %14 = load i16, i16* %13, align 2
  %15 = icmp eq i16 %14, 3
  br i1 %15, label %16, label %430

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %4, i64 0, i32 25
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %430

20:                                               ; preds = %16
  %21 = tail call i64 @TIFFGetStrileOffset(%struct.tiff* %0, i32 0) #11
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %430, label %23

23:                                               ; preds = %20
  %24 = tail call i8* @_TIFFmalloc(i64 2048) #11
  %25 = icmp eq i8* %24, null
  br i1 %25, label %26, label %29

26:                                               ; preds = %23
  %27 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %28 = load i8*, i8** %27, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFWarningExt(i8* %28, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @JPEGFixupTagsSubsampling.module, i64 0, i64 0), i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.9, i64 0, i64 0)) #11
  br label %430

29:                                               ; preds = %23
  %30 = tail call i64 @TIFFGetStrileByteCount(%struct.tiff* %0, i32 0) #11
  %31 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 58
  %32 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %33 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 56
  br label %34

34:                                               ; preds = %74, %29
  %35 = phi i64 [ 0, %29 ], [ %75, %74 ]
  %36 = phi i64 [ %21, %29 ], [ %76, %74 ]
  %37 = phi i64 [ %30, %29 ], [ %77, %74 ]
  %38 = phi i8 [ 0, %29 ], [ %78, %74 ]
  %39 = phi i32 [ 0, %29 ], [ %79, %74 ]
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %43, label %41

41:                                               ; preds = %34
  %42 = inttoptr i64 %35 to i8*
  br label %63

43:                                               ; preds = %34
  %44 = icmp eq i64 %37, 0
  br i1 %44, label %427, label %45

45:                                               ; preds = %43
  %46 = icmp eq i8 %38, 0
  br i1 %46, label %47, label %51

47:                                               ; preds = %45
  %48 = load i64 (i8*, i64, i32)*, i64 (i8*, i64, i32)** %31, align 8
  %49 = load i8*, i8** %32, align 8
  %50 = tail call i64 %48(i8* %49, i64 %36, i32 0) #11
  br label %51

51:                                               ; preds = %47, %45
  %52 = phi i8 [ 1, %47 ], [ %38, %45 ]
  %53 = icmp ult i64 %37, 2048
  %54 = select i1 %53, i64 %37, i64 2048
  %55 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %33, align 8
  %56 = load i8*, i8** %32, align 8
  %57 = tail call i64 %55(i8* %56, i8* nonnull %24, i64 %54) #11
  %58 = icmp eq i64 %57, %54
  br i1 %58, label %59, label %427

59:                                               ; preds = %51
  %60 = trunc i64 %54 to i32
  %61 = add i64 %54, %36
  %62 = sub i64 %37, %54
  br label %63

63:                                               ; preds = %59, %41
  %64 = phi i64 [ %61, %59 ], [ %36, %41 ]
  %65 = phi i64 [ %62, %59 ], [ %37, %41 ]
  %66 = phi i8 [ %52, %59 ], [ %38, %41 ]
  %67 = phi i32 [ %60, %59 ], [ %39, %41 ]
  %68 = phi i8* [ %24, %59 ], [ %42, %41 ]
  %69 = load i8, i8* %68, align 1
  %70 = getelementptr inbounds i8, i8* %68, i64 1
  %71 = ptrtoint i8* %70 to i64
  %72 = add i32 %67, -1
  %73 = icmp eq i8 %69, -1
  br i1 %73, label %80, label %74

74:                                               ; preds = %63, %425, %199, %194, %189, %183
  %75 = phi i64 [ %71, %63 ], [ %176, %183 ], [ %176, %199 ], [ %192, %189 ], [ %176, %194 ], [ %426, %425 ]
  %76 = phi i64 [ %64, %63 ], [ %169, %183 ], [ %200, %199 ], [ %169, %189 ], [ %169, %194 ], [ %108, %425 ]
  %77 = phi i64 [ %65, %63 ], [ %170, %183 ], [ %201, %199 ], [ %170, %189 ], [ 0, %194 ], [ %109, %425 ]
  %78 = phi i8 [ %66, %63 ], [ %171, %183 ], [ 0, %199 ], [ %171, %189 ], [ %171, %194 ], [ %110, %425 ]
  %79 = phi i32 [ %72, %63 ], [ %177, %183 ], [ 0, %199 ], [ %193, %189 ], [ 0, %194 ], [ %115, %425 ]
  br label %34

80:                                               ; preds = %63, %107
  %81 = phi i64 [ %108, %107 ], [ %64, %63 ]
  %82 = phi i64 [ %109, %107 ], [ %65, %63 ]
  %83 = phi i8 [ %110, %107 ], [ %66, %63 ]
  %84 = phi i8* [ %114, %107 ], [ %70, %63 ]
  %85 = phi i32 [ %115, %107 ], [ %72, %63 ]
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %107

87:                                               ; preds = %80
  %88 = icmp eq i64 %82, 0
  br i1 %88, label %427, label %89

89:                                               ; preds = %87
  %90 = icmp eq i8 %83, 0
  br i1 %90, label %91, label %95

91:                                               ; preds = %89
  %92 = load i64 (i8*, i64, i32)*, i64 (i8*, i64, i32)** %31, align 8
  %93 = load i8*, i8** %32, align 8
  %94 = tail call i64 %92(i8* %93, i64 %81, i32 0) #11
  br label %95

95:                                               ; preds = %91, %89
  %96 = phi i8 [ 1, %91 ], [ %83, %89 ]
  %97 = icmp ult i64 %82, 2048
  %98 = select i1 %97, i64 %82, i64 2048
  %99 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %33, align 8
  %100 = load i8*, i8** %32, align 8
  %101 = tail call i64 %99(i8* %100, i8* nonnull %24, i64 %98) #11
  %102 = icmp eq i64 %101, %98
  br i1 %102, label %103, label %427

103:                                              ; preds = %95
  %104 = trunc i64 %98 to i32
  %105 = add i64 %98, %81
  %106 = sub i64 %82, %98
  br label %107

107:                                              ; preds = %103, %80
  %108 = phi i64 [ %105, %103 ], [ %81, %80 ]
  %109 = phi i64 [ %106, %103 ], [ %82, %80 ]
  %110 = phi i8 [ %96, %103 ], [ %83, %80 ]
  %111 = phi i32 [ %104, %103 ], [ %85, %80 ]
  %112 = phi i8* [ %24, %103 ], [ %84, %80 ]
  %113 = load i8, i8* %112, align 1
  %114 = getelementptr inbounds i8, i8* %112, i64 1
  %115 = add i32 %111, -1
  switch i8 %113, label %427 [
    i8 -1, label %80
    i8 -40, label %425
    i8 -2, label %116
    i8 -32, label %116
    i8 -31, label %116
    i8 -30, label %116
    i8 -29, label %116
    i8 -28, label %116
    i8 -27, label %116
    i8 -26, label %116
    i8 -25, label %116
    i8 -24, label %116
    i8 -23, label %116
    i8 -22, label %116
    i8 -21, label %116
    i8 -20, label %116
    i8 -19, label %116
    i8 -18, label %116
    i8 -17, label %116
    i8 -37, label %116
    i8 -38, label %116
    i8 -60, label %116
    i8 -35, label %116
    i8 -64, label %202
    i8 -63, label %202
    i8 -62, label %202
    i8 -55, label %202
    i8 -54, label %202
  ]

116:                                              ; preds = %107, %107, %107, %107, %107, %107, %107, %107, %107, %107, %107, %107, %107, %107, %107, %107, %107, %107, %107, %107, %107
  %117 = icmp eq i32 %115, 0
  br i1 %117, label %118, label %138

118:                                              ; preds = %116
  %119 = icmp eq i64 %109, 0
  br i1 %119, label %427, label %120

120:                                              ; preds = %118
  %121 = icmp eq i8 %110, 0
  br i1 %121, label %122, label %126

122:                                              ; preds = %120
  %123 = load i64 (i8*, i64, i32)*, i64 (i8*, i64, i32)** %31, align 8
  %124 = load i8*, i8** %32, align 8
  %125 = tail call i64 %123(i8* %124, i64 %108, i32 0) #11
  br label %126

126:                                              ; preds = %122, %120
  %127 = phi i8 [ 1, %122 ], [ %110, %120 ]
  %128 = icmp ult i64 %109, 2048
  %129 = select i1 %128, i64 %109, i64 2048
  %130 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %33, align 8
  %131 = load i8*, i8** %32, align 8
  %132 = tail call i64 %130(i8* %131, i8* nonnull %24, i64 %129) #11
  %133 = icmp eq i64 %132, %129
  br i1 %133, label %134, label %427

134:                                              ; preds = %126
  %135 = trunc i64 %129 to i32
  %136 = add i64 %129, %108
  %137 = sub i64 %109, %129
  br label %138

138:                                              ; preds = %134, %116
  %139 = phi i64 [ %136, %134 ], [ %108, %116 ]
  %140 = phi i64 [ %137, %134 ], [ %109, %116 ]
  %141 = phi i8 [ %127, %134 ], [ %110, %116 ]
  %142 = phi i32 [ %135, %134 ], [ %115, %116 ]
  %143 = phi i8* [ %24, %134 ], [ %114, %116 ]
  %144 = load i8, i8* %143, align 1
  %145 = getelementptr inbounds i8, i8* %143, i64 1
  %146 = add i32 %142, -1
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %148, label %168

148:                                              ; preds = %138
  %149 = icmp eq i64 %140, 0
  br i1 %149, label %427, label %150

150:                                              ; preds = %148
  %151 = icmp eq i8 %141, 0
  br i1 %151, label %152, label %156

152:                                              ; preds = %150
  %153 = load i64 (i8*, i64, i32)*, i64 (i8*, i64, i32)** %31, align 8
  %154 = load i8*, i8** %32, align 8
  %155 = tail call i64 %153(i8* %154, i64 %139, i32 0) #11
  br label %156

156:                                              ; preds = %152, %150
  %157 = phi i8 [ 1, %152 ], [ %141, %150 ]
  %158 = icmp ult i64 %140, 2048
  %159 = select i1 %158, i64 %140, i64 2048
  %160 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %33, align 8
  %161 = load i8*, i8** %32, align 8
  %162 = tail call i64 %160(i8* %161, i8* nonnull %24, i64 %159) #11
  %163 = icmp eq i64 %162, %159
  br i1 %163, label %164, label %427

164:                                              ; preds = %156
  %165 = trunc i64 %159 to i32
  %166 = add i64 %159, %139
  %167 = sub i64 %140, %159
  br label %168

168:                                              ; preds = %164, %138
  %169 = phi i64 [ %166, %164 ], [ %139, %138 ]
  %170 = phi i64 [ %167, %164 ], [ %140, %138 ]
  %171 = phi i8 [ %157, %164 ], [ %141, %138 ]
  %172 = phi i32 [ %165, %164 ], [ %146, %138 ]
  %173 = phi i8* [ %24, %164 ], [ %145, %138 ]
  %174 = load i8, i8* %173, align 1
  %175 = getelementptr inbounds i8, i8* %173, i64 1
  %176 = ptrtoint i8* %175 to i64
  %177 = add i32 %172, -1
  %178 = zext i8 %144 to i16
  %179 = shl nuw i16 %178, 8
  %180 = zext i8 %174 to i16
  %181 = or i16 %179, %180
  %182 = icmp ult i16 %181, 2
  br i1 %182, label %427, label %183

183:                                              ; preds = %168
  %184 = add i16 %181, -2
  %185 = icmp eq i16 %184, 0
  br i1 %185, label %74, label %186

186:                                              ; preds = %183
  %187 = zext i16 %184 to i32
  %188 = icmp ult i32 %177, %187
  br i1 %188, label %194, label %189

189:                                              ; preds = %186
  %190 = zext i16 %184 to i64
  %191 = getelementptr inbounds i8, i8* %175, i64 %190
  %192 = ptrtoint i8* %191 to i64
  %193 = sub i32 %177, %187
  br label %74

194:                                              ; preds = %186
  %195 = trunc i32 %177 to i16
  %196 = sub i16 %184, %195
  %197 = zext i16 %196 to i64
  %198 = icmp ult i64 %170, %197
  br i1 %198, label %74, label %199

199:                                              ; preds = %194
  %200 = add i64 %169, %197
  %201 = sub i64 %170, %197
  br label %74

202:                                              ; preds = %107, %107, %107, %107, %107
  %203 = icmp eq i32 %115, 0
  br i1 %203, label %204, label %224

204:                                              ; preds = %202
  %205 = icmp eq i64 %109, 0
  br i1 %205, label %427, label %206

206:                                              ; preds = %204
  %207 = icmp eq i8 %110, 0
  br i1 %207, label %208, label %212

208:                                              ; preds = %206
  %209 = load i64 (i8*, i64, i32)*, i64 (i8*, i64, i32)** %31, align 8
  %210 = load i8*, i8** %32, align 8
  %211 = tail call i64 %209(i8* %210, i64 %108, i32 0) #11
  br label %212

212:                                              ; preds = %208, %206
  %213 = phi i8 [ 1, %208 ], [ %110, %206 ]
  %214 = icmp ult i64 %109, 2048
  %215 = select i1 %214, i64 %109, i64 2048
  %216 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %33, align 8
  %217 = load i8*, i8** %32, align 8
  %218 = tail call i64 %216(i8* %217, i8* nonnull %24, i64 %215) #11
  %219 = icmp eq i64 %218, %215
  br i1 %219, label %220, label %427

220:                                              ; preds = %212
  %221 = trunc i64 %215 to i32
  %222 = add i64 %215, %108
  %223 = sub i64 %109, %215
  br label %224

224:                                              ; preds = %220, %202
  %225 = phi i64 [ %222, %220 ], [ %108, %202 ]
  %226 = phi i64 [ %223, %220 ], [ %109, %202 ]
  %227 = phi i8 [ %213, %220 ], [ %110, %202 ]
  %228 = phi i32 [ %221, %220 ], [ %115, %202 ]
  %229 = phi i8* [ %24, %220 ], [ %114, %202 ]
  %230 = load i8, i8* %229, align 1
  %231 = getelementptr inbounds i8, i8* %229, i64 1
  %232 = add i32 %228, -1
  %233 = icmp eq i32 %232, 0
  br i1 %233, label %234, label %254

234:                                              ; preds = %224
  %235 = icmp eq i64 %226, 0
  br i1 %235, label %427, label %236

236:                                              ; preds = %234
  %237 = icmp eq i8 %227, 0
  br i1 %237, label %238, label %242

238:                                              ; preds = %236
  %239 = load i64 (i8*, i64, i32)*, i64 (i8*, i64, i32)** %31, align 8
  %240 = load i8*, i8** %32, align 8
  %241 = tail call i64 %239(i8* %240, i64 %225, i32 0) #11
  br label %242

242:                                              ; preds = %238, %236
  %243 = phi i8 [ 1, %238 ], [ %227, %236 ]
  %244 = icmp ult i64 %226, 2048
  %245 = select i1 %244, i64 %226, i64 2048
  %246 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %33, align 8
  %247 = load i8*, i8** %32, align 8
  %248 = tail call i64 %246(i8* %247, i8* nonnull %24, i64 %245) #11
  %249 = icmp eq i64 %248, %245
  br i1 %249, label %250, label %427

250:                                              ; preds = %242
  %251 = trunc i64 %245 to i32
  %252 = add i64 %245, %225
  %253 = sub i64 %226, %245
  br label %254

254:                                              ; preds = %250, %224
  %255 = phi i64 [ %252, %250 ], [ %225, %224 ]
  %256 = phi i64 [ %253, %250 ], [ %226, %224 ]
  %257 = phi i8 [ %243, %250 ], [ %227, %224 ]
  %258 = phi i32 [ %251, %250 ], [ %232, %224 ]
  %259 = phi i8* [ %24, %250 ], [ %231, %224 ]
  %260 = load i8, i8* %259, align 1
  %261 = zext i8 %230 to i32
  %262 = shl nuw nsw i32 %261, 8
  %263 = zext i8 %260 to i32
  %264 = or i32 %262, %263
  %265 = load i16, i16* %13, align 2
  %266 = zext i16 %265 to i32
  %267 = mul nuw nsw i32 %266, 3
  %268 = add nuw nsw i32 %267, 8
  %269 = icmp eq i32 %268, %264
  br i1 %269, label %270, label %427

270:                                              ; preds = %254
  %271 = add i32 %258, -1
  %272 = icmp ult i32 %271, 7
  br i1 %272, label %273, label %281

273:                                              ; preds = %270
  %274 = sub nuw nsw i32 8, %258
  %275 = and i32 %274, 65535
  %276 = zext i32 %275 to i64
  %277 = icmp ult i64 %256, %276
  br i1 %277, label %427, label %278

278:                                              ; preds = %273
  %279 = add i64 %255, %276
  %280 = sub i64 %256, %276
  br label %285

281:                                              ; preds = %270
  %282 = getelementptr inbounds i8, i8* %259, i64 8
  %283 = add i32 %258, -8
  %284 = icmp eq i32 %283, 0
  br i1 %284, label %285, label %308

285:                                              ; preds = %281, %278
  %286 = phi i64 [ %279, %278 ], [ %255, %281 ]
  %287 = phi i64 [ %280, %278 ], [ %256, %281 ]
  %288 = phi i8 [ 0, %278 ], [ %257, %281 ]
  %289 = icmp eq i64 %287, 0
  br i1 %289, label %427, label %290

290:                                              ; preds = %285
  %291 = icmp eq i8 %288, 0
  br i1 %291, label %292, label %296

292:                                              ; preds = %290
  %293 = load i64 (i8*, i64, i32)*, i64 (i8*, i64, i32)** %31, align 8
  %294 = load i8*, i8** %32, align 8
  %295 = tail call i64 %293(i8* %294, i64 %286, i32 0) #11
  br label %296

296:                                              ; preds = %292, %290
  %297 = phi i8 [ 1, %292 ], [ %288, %290 ]
  %298 = icmp ult i64 %287, 2048
  %299 = select i1 %298, i64 %287, i64 2048
  %300 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %33, align 8
  %301 = load i8*, i8** %32, align 8
  %302 = tail call i64 %300(i8* %301, i8* nonnull %24, i64 %299) #11
  %303 = icmp eq i64 %302, %299
  br i1 %303, label %304, label %427

304:                                              ; preds = %296
  %305 = trunc i64 %299 to i32
  %306 = add i64 %299, %286
  %307 = sub i64 %287, %299
  br label %308

308:                                              ; preds = %304, %281
  %309 = phi i64 [ %306, %304 ], [ %255, %281 ]
  %310 = phi i64 [ %307, %304 ], [ %256, %281 ]
  %311 = phi i8 [ %297, %304 ], [ %257, %281 ]
  %312 = phi i32 [ %305, %304 ], [ %283, %281 ]
  %313 = phi i8* [ %24, %304 ], [ %282, %281 ]
  %314 = load i8, i8* %313, align 1
  %315 = getelementptr inbounds i8, i8* %313, i64 1
  %316 = lshr i8 %314, 4
  %317 = and i8 %314, 15
  %318 = icmp eq i32 %312, 1
  br i1 %318, label %322, label %319

319:                                              ; preds = %308
  %320 = getelementptr inbounds i8, i8* %313, i64 2
  %321 = add i32 %312, -2
  br label %327

322:                                              ; preds = %308
  %323 = icmp eq i64 %310, 0
  br i1 %323, label %327, label %324

324:                                              ; preds = %322
  %325 = add i64 %309, 1
  %326 = add i64 %310, -1
  br label %327

327:                                              ; preds = %324, %322, %319
  %328 = phi i64 [ %325, %324 ], [ %309, %319 ], [ %309, %322 ]
  %329 = phi i64 [ %326, %324 ], [ %310, %319 ], [ 0, %322 ]
  %330 = phi i8 [ 0, %324 ], [ %311, %319 ], [ %311, %322 ]
  %331 = phi i8* [ %315, %324 ], [ %320, %319 ], [ %315, %322 ]
  %332 = phi i32 [ 0, %324 ], [ %321, %319 ], [ 0, %322 ]
  %333 = load i16, i16* %13, align 2
  %334 = icmp ugt i16 %333, 1
  br i1 %334, label %335, label %405

335:                                              ; preds = %327, %396
  %336 = phi i64 [ %397, %396 ], [ %328, %327 ]
  %337 = phi i64 [ %398, %396 ], [ %329, %327 ]
  %338 = phi i8 [ %399, %396 ], [ %330, %327 ]
  %339 = phi i8* [ %400, %396 ], [ %331, %327 ]
  %340 = phi i32 [ %401, %396 ], [ %332, %327 ]
  %341 = phi i16 [ %402, %396 ], [ 1, %327 ]
  %342 = icmp eq i32 %340, 0
  br i1 %342, label %343, label %348

343:                                              ; preds = %335
  %344 = icmp eq i64 %337, 0
  br i1 %344, label %427, label %345

345:                                              ; preds = %343
  %346 = add i64 %336, 1
  %347 = add i64 %337, -1
  br label %352

348:                                              ; preds = %335
  %349 = getelementptr inbounds i8, i8* %339, i64 1
  %350 = add i32 %340, -1
  %351 = icmp eq i32 %350, 0
  br i1 %351, label %352, label %375

352:                                              ; preds = %348, %345
  %353 = phi i64 [ %346, %345 ], [ %336, %348 ]
  %354 = phi i64 [ %347, %345 ], [ %337, %348 ]
  %355 = phi i8 [ 0, %345 ], [ %338, %348 ]
  %356 = icmp eq i64 %354, 0
  br i1 %356, label %427, label %357

357:                                              ; preds = %352
  %358 = icmp eq i8 %355, 0
  br i1 %358, label %359, label %363

359:                                              ; preds = %357
  %360 = load i64 (i8*, i64, i32)*, i64 (i8*, i64, i32)** %31, align 8
  %361 = load i8*, i8** %32, align 8
  %362 = tail call i64 %360(i8* %361, i64 %353, i32 0) #11
  br label %363

363:                                              ; preds = %359, %357
  %364 = phi i8 [ 1, %359 ], [ %355, %357 ]
  %365 = icmp ult i64 %354, 2048
  %366 = select i1 %365, i64 %354, i64 2048
  %367 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %33, align 8
  %368 = load i8*, i8** %32, align 8
  %369 = tail call i64 %367(i8* %368, i8* nonnull %24, i64 %366) #11
  %370 = icmp eq i64 %369, %366
  br i1 %370, label %371, label %427

371:                                              ; preds = %363
  %372 = trunc i64 %366 to i32
  %373 = add i64 %366, %353
  %374 = sub i64 %354, %366
  br label %375

375:                                              ; preds = %371, %348
  %376 = phi i64 [ %373, %371 ], [ %336, %348 ]
  %377 = phi i64 [ %374, %371 ], [ %337, %348 ]
  %378 = phi i8 [ %364, %371 ], [ %338, %348 ]
  %379 = phi i32 [ %372, %371 ], [ %350, %348 ]
  %380 = phi i8* [ %24, %371 ], [ %349, %348 ]
  %381 = load i8, i8* %380, align 1
  %382 = getelementptr inbounds i8, i8* %380, i64 1
  %383 = icmp eq i8 %381, 17
  br i1 %383, label %386, label %384

384:                                              ; preds = %375
  %385 = load i8*, i8** %32, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFWarningExt(i8* %385, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @JPEGFixupTagsSubsamplingSec.module, i64 0, i64 0), i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.11, i64 0, i64 0)) #11
  br label %429

386:                                              ; preds = %375
  %387 = icmp eq i32 %379, 1
  br i1 %387, label %391, label %388

388:                                              ; preds = %386
  %389 = getelementptr inbounds i8, i8* %380, i64 2
  %390 = add i32 %379, -2
  br label %396

391:                                              ; preds = %386
  %392 = icmp eq i64 %377, 0
  br i1 %392, label %396, label %393

393:                                              ; preds = %391
  %394 = add i64 %376, 1
  %395 = add i64 %377, -1
  br label %396

396:                                              ; preds = %393, %391, %388
  %397 = phi i64 [ %394, %393 ], [ %376, %388 ], [ %376, %391 ]
  %398 = phi i64 [ %395, %393 ], [ %377, %388 ], [ 0, %391 ]
  %399 = phi i8 [ 0, %393 ], [ %378, %388 ], [ %378, %391 ]
  %400 = phi i8* [ %382, %393 ], [ %389, %388 ], [ %382, %391 ]
  %401 = phi i32 [ 0, %393 ], [ %390, %388 ], [ 0, %391 ]
  %402 = add nuw i16 %341, 1
  %403 = load i16, i16* %13, align 2
  %404 = icmp ult i16 %402, %403
  br i1 %404, label %335, label %405

405:                                              ; preds = %396, %327
  %406 = zext i8 %316 to i32
  switch i8 %316, label %409 [
    i8 1, label %407
    i8 2, label %407
    i8 4, label %407
  ]

407:                                              ; preds = %405, %405, %405
  %408 = zext i8 %317 to i32
  switch i8 %317, label %409 [
    i8 1, label %411
    i8 2, label %411
    i8 4, label %411
  ]

409:                                              ; preds = %407, %405
  %410 = load i8*, i8** %32, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFWarningExt(i8* %410, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @JPEGFixupTagsSubsamplingSec.module, i64 0, i64 0), i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.11, i64 0, i64 0)) #11
  br label %429

411:                                              ; preds = %407, %407, %407
  %412 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 41, i64 0
  %413 = load i16, i16* %412, align 8
  %414 = zext i16 %413 to i32
  %415 = icmp eq i32 %406, %414
  %416 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 41, i64 1
  %417 = load i16, i16* %416, align 2
  %418 = zext i16 %417 to i32
  %419 = icmp eq i32 %408, %418
  %420 = and i1 %415, %419
  br i1 %420, label %429, label %421

421:                                              ; preds = %411
  %422 = load i8*, i8** %32, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFWarningExt(i8* %422, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @JPEGFixupTagsSubsamplingSec.module, i64 0, i64 0), i8* getelementptr inbounds ([118 x i8], [118 x i8]* @.str.12, i64 0, i64 0), i32 %414, i32 %418, i32 %406, i32 %408) #11
  %423 = zext i8 %316 to i16
  store i16 %423, i16* %412, align 8
  %424 = zext i8 %317 to i16
  store i16 %424, i16* %416, align 2
  br label %429

425:                                              ; preds = %107
  %426 = ptrtoint i8* %114 to i64
  br label %74

427:                                              ; preds = %168, %156, %148, %126, %118, %51, %43, %107, %95, %87, %363, %352, %343, %296, %285, %273, %254, %242, %234, %212, %204
  %428 = load i8*, i8** %32, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFWarningExt(i8* %428, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @JPEGFixupTagsSubsampling.module, i64 0, i64 0), i8* getelementptr inbounds ([124 x i8], [124 x i8]* @.str.10, i64 0, i64 0)) #11
  br label %429

429:                                              ; preds = %427, %421, %411, %409, %384
  tail call void @_TIFFfree(i8* nonnull %24) #11
  br label %430

430:                                              ; preds = %429, %26, %20, %16, %12, %8, %1
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @JPEGSetupDecode(%struct.tiff* nocapture) #0 {
  %2 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %3 = bitcast i8** %2 to %struct.JPEGState**
  %4 = load %struct.JPEGState*, %struct.JPEGState** %3, align 8
  %5 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %4, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %13, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %4, i64 0, i32 0, i32 0, i32 4
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %17

12:                                               ; preds = %8
  tail call fastcc void @TIFFjpeg_destroy(%struct.JPEGState* %4) #11
  store i32 0, i32* %5, align 8
  br label %13

13:                                               ; preds = %12, %1
  %14 = tail call fastcc i32 @TIFFjpeg_create_decompress(%struct.JPEGState* %4) #11
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %17, label %16

16:                                               ; preds = %13
  store i32 1, i32* %5, align 8
  br label %17

17:                                               ; preds = %8, %13, %16
  %18 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 0, i64 2
  %19 = load i64, i64* %18, align 8
  %20 = and i64 %19, 4
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %36, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %4, i64 0, i32 6
  %24 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %4, i64 0, i32 0, i32 0, i32 6
  store %struct.jpeg_source_mgr* %23, %struct.jpeg_source_mgr** %24, align 8
  %25 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %4, i64 0, i32 6, i32 2
  %26 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %4, i64 0, i32 6, i32 3
  store i32 (%struct.jpeg_decompress_struct*)* @std_fill_input_buffer, i32 (%struct.jpeg_decompress_struct*)** %26, align 8
  %27 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %4, i64 0, i32 6, i32 4
  store void (%struct.jpeg_decompress_struct*, i64)* @std_skip_input_data, void (%struct.jpeg_decompress_struct*, i64)** %27, align 8
  %28 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %4, i64 0, i32 6, i32 5
  store i32 (%struct.jpeg_decompress_struct*, i32)* @jpeg_resync_to_restart, i32 (%struct.jpeg_decompress_struct*, i32)** %28, align 8
  %29 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %4, i64 0, i32 6, i32 6
  store void (%struct.jpeg_decompress_struct*)* @std_term_source, void (%struct.jpeg_decompress_struct*)** %29, align 8
  %30 = bitcast %struct.jpeg_source_mgr* %23 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 16, i1 false) #11
  store void (%struct.jpeg_decompress_struct*)* @tables_init_source, void (%struct.jpeg_decompress_struct*)** %25, align 8
  %31 = tail call fastcc i32 @TIFFjpeg_read_header(%struct.JPEGState* %4, i32 0)
  %32 = icmp eq i32 %31, 2
  br i1 %32, label %36, label %33

33:                                               ; preds = %22
  %34 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %35 = load i8*, i8** %34, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %35, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.14, i64 0, i64 0)) #11
  br label %61

36:                                               ; preds = %22, %17
  %37 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 11
  %38 = load i16, i16* %37, align 2
  %39 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %4, i64 0, i32 8
  store i16 %38, i16* %39, align 8
  %40 = icmp eq i16 %38, 6
  br i1 %40, label %41, label %47

41:                                               ; preds = %36
  %42 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 41, i64 0
  %43 = load i16, i16* %42, align 8
  %44 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %4, i64 0, i32 9
  store i16 %43, i16* %44, align 2
  %45 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 41, i64 1
  %46 = load i16, i16* %45, align 2
  br label %49

47:                                               ; preds = %36
  %48 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %4, i64 0, i32 9
  store i16 1, i16* %48, align 2
  br label %49

49:                                               ; preds = %47, %41
  %50 = phi i16 [ 1, %47 ], [ %46, %41 ]
  %51 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %4, i64 0, i32 10
  store i16 %50, i16* %51, align 4
  %52 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %4, i64 0, i32 6
  %53 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %4, i64 0, i32 0, i32 0, i32 6
  store %struct.jpeg_source_mgr* %52, %struct.jpeg_source_mgr** %53, align 8
  %54 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %4, i64 0, i32 6, i32 2
  store void (%struct.jpeg_decompress_struct*)* @std_init_source, void (%struct.jpeg_decompress_struct*)** %54, align 8
  %55 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %4, i64 0, i32 6, i32 3
  store i32 (%struct.jpeg_decompress_struct*)* @std_fill_input_buffer, i32 (%struct.jpeg_decompress_struct*)** %55, align 8
  %56 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %4, i64 0, i32 6, i32 4
  store void (%struct.jpeg_decompress_struct*, i64)* @std_skip_input_data, void (%struct.jpeg_decompress_struct*, i64)** %56, align 8
  %57 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %4, i64 0, i32 6, i32 5
  store i32 (%struct.jpeg_decompress_struct*, i32)* @jpeg_resync_to_restart, i32 (%struct.jpeg_decompress_struct*, i32)** %57, align 8
  %58 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %4, i64 0, i32 6, i32 6
  store void (%struct.jpeg_decompress_struct*)* @std_term_source, void (%struct.jpeg_decompress_struct*)** %58, align 8
  %59 = bitcast %struct.jpeg_source_mgr* %52 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %59, i8 0, i64 16, i1 false) #11
  %60 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 61
  store void (%struct.tiff*, i8*, i64)* @_TIFFNoPostDecode, void (%struct.tiff*, i8*, i64)** %60, align 8
  br label %61

61:                                               ; preds = %49, %33
  %62 = phi i32 [ 0, %33 ], [ 1, %49 ]
  ret i32 %62
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @JPEGPreDecode(%struct.tiff*, i16 zeroext) #0 {
  %3 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %4 = bitcast i8** %3 to %struct.JPEGState**
  %5 = load %struct.JPEGState*, %struct.JPEGState** %4, align 8
  %6 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 0, i32 0, i32 4
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %14

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 25
  %11 = bitcast {}** %10 to i32 (%struct.tiff*)**
  %12 = load i32 (%struct.tiff*)*, i32 (%struct.tiff*)** %11, align 8
  %13 = tail call i32 %12(%struct.tiff* %0) #11
  br label %14

14:                                               ; preds = %9, %2
  %15 = tail call fastcc i32 @TIFFjpeg_abort(%struct.JPEGState* %5)
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %305, label %17

17:                                               ; preds = %14
  %18 = tail call fastcc i32 @TIFFjpeg_read_header(%struct.JPEGState* %5, i32 1)
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %20, label %305

20:                                               ; preds = %17
  %21 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 6
  %22 = bitcast %struct.jpeg_source_mgr* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 49
  %25 = bitcast i8** %24 to i64*
  store i64 %23, i64* %25, align 8
  %26 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 6, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 50
  store i64 %27, i64* %28, align 8
  %29 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 3
  %30 = load i32, i32* %29, align 8
  %31 = and i32 %30, 1024
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %39, label %33

33:                                               ; preds = %20
  %34 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 4
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 5
  %37 = load i32, i32* %36, align 8
  %38 = tail call i64 @TIFFTileRowSize(%struct.tiff* %0) #11
  br label %52

39:                                               ; preds = %20
  %40 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 1
  %41 = load i32, i32* %40, align 8
  %42 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 2
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 13
  %45 = load i32, i32* %44, align 4
  %46 = sub i32 %43, %45
  %47 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 16
  %48 = load i32, i32* %47, align 4
  %49 = icmp ugt i32 %46, %48
  %50 = select i1 %49, i32 %48, i32 %46
  %51 = tail call i64 @TIFFScanlineSize(%struct.tiff* %0) #11
  br label %52

52:                                               ; preds = %39, %33
  %53 = phi i64 [ %51, %39 ], [ %38, %33 ]
  %54 = phi i32 [ %41, %39 ], [ %35, %33 ]
  %55 = phi i32 [ %50, %39 ], [ %37, %33 ]
  %56 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 11
  store i64 %53, i64* %56, align 8
  %57 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 24
  %58 = load i16, i16* %57, align 2
  %59 = icmp ne i16 %58, 2
  %60 = icmp eq i16 %1, 0
  %61 = or i1 %60, %59
  br i1 %61, label %83, label %62

62:                                               ; preds = %52
  %63 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 9
  %64 = load i16, i16* %63, align 2
  %65 = zext i16 %64 to i32
  %66 = sub nsw i32 0, %65
  %67 = icmp ult i32 %54, %66
  br i1 %67, label %68, label %72

68:                                               ; preds = %62
  %69 = add i32 %54, -1
  %70 = add i32 %69, %65
  %71 = udiv i32 %70, %65
  br label %72

72:                                               ; preds = %62, %68
  %73 = phi i32 [ %71, %68 ], [ 0, %62 ]
  %74 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 10
  %75 = load i16, i16* %74, align 4
  %76 = zext i16 %75 to i32
  %77 = sub nsw i32 0, %76
  %78 = icmp ult i32 %55, %77
  br i1 %78, label %79, label %83

79:                                               ; preds = %72
  %80 = add i32 %55, -1
  %81 = add i32 %80, %76
  %82 = udiv i32 %81, %76
  br label %83

83:                                               ; preds = %79, %72, %52
  %84 = phi i32 [ %54, %52 ], [ %73, %72 ], [ %73, %79 ]
  %85 = phi i32 [ %55, %52 ], [ 0, %72 ], [ %82, %79 ]
  %86 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 0, i32 0, i32 7
  %87 = load i32, i32* %86, align 8
  %88 = icmp ult i32 %87, %84
  %89 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 0, i32 0, i32 8
  %90 = load i32, i32* %89, align 4
  %91 = icmp ult i32 %90, %85
  %92 = or i1 %88, %91
  br i1 %92, label %93, label %97

93:                                               ; preds = %83
  %94 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %95 = load i8*, i8** %94, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFWarningExt(i8* %95, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @JPEGPreDecode.module, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.16, i64 0, i64 0), i32 %84, i32 %85, i32 %87, i32 %90) #11
  %96 = load i32, i32* %86, align 8
  br label %97

97:                                               ; preds = %83, %93
  %98 = phi i32 [ %96, %93 ], [ %87, %83 ]
  %99 = icmp eq i32 %98, %84
  br i1 %99, label %100, label %118

100:                                              ; preds = %97
  %101 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 0, i32 0, i32 8
  %102 = load i32, i32* %101, align 4
  %103 = icmp ugt i32 %102, %85
  br i1 %103, label %104, label %118

104:                                              ; preds = %100
  %105 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 13
  %106 = load i32, i32* %105, align 4
  %107 = add i32 %106, %85
  %108 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 2
  %109 = load i32, i32* %108, align 4
  %110 = icmp eq i32 %107, %109
  br i1 %110, label %111, label %118

111:                                              ; preds = %104
  %112 = load i32, i32* %29, align 8
  %113 = and i32 %112, 1024
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %118

115:                                              ; preds = %111
  %116 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %117 = load i8*, i8** %116, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFWarningExt(i8* %117, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @JPEGPreDecode.module, i64 0, i64 0), i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.17, i64 0, i64 0), i32 %84, i32 %85, i32 %84, i32 %102) #11
  br label %127

118:                                              ; preds = %111, %104, %100, %97
  %119 = icmp ugt i32 %98, %84
  %120 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 0, i32 0, i32 8
  %121 = load i32, i32* %120, align 4
  %122 = icmp ugt i32 %121, %85
  %123 = or i1 %119, %122
  br i1 %123, label %124, label %127

124:                                              ; preds = %118
  %125 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %126 = load i8*, i8** %125, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %126, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @JPEGPreDecode.module, i64 0, i64 0), i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.18, i64 0, i64 0), i32 %84, i32 %85, i32 %98, i32 %121) #11
  br label %305

127:                                              ; preds = %118, %115
  %128 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 0, i32 0, i32 9
  %129 = load i32, i32* %128, align 8
  %130 = load i16, i16* %57, align 2
  %131 = icmp eq i16 %130, 1
  br i1 %131, label %132, label %136

132:                                              ; preds = %127
  %133 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 15
  %134 = load i16, i16* %133, align 2
  %135 = zext i16 %134 to i32
  br label %136

136:                                              ; preds = %127, %132
  %137 = phi i32 [ %135, %132 ], [ 1, %127 ]
  %138 = icmp eq i32 %129, %137
  br i1 %138, label %142, label %139

139:                                              ; preds = %136
  %140 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %141 = load i8*, i8** %140, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %141, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @JPEGPreDecode.module, i64 0, i64 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.19, i64 0, i64 0)) #11
  br label %305

142:                                              ; preds = %136
  %143 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 0, i32 0, i32 43
  %144 = load i32, i32* %143, align 8
  %145 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 8
  %146 = load i16, i16* %145, align 4
  %147 = zext i16 %146 to i32
  %148 = icmp eq i32 %144, %147
  br i1 %148, label %152, label %149

149:                                              ; preds = %142
  %150 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %151 = load i8*, i8** %150, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %151, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @JPEGPreDecode.module, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.20, i64 0, i64 0)) #11
  br label %305

152:                                              ; preds = %142
  %153 = tail call fastcc i32 @TIFFjpeg_has_multiple_scans(%struct.JPEGState* %5)
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %183, label %155

155:                                              ; preds = %152
  %156 = load i32, i32* %86, align 8
  %157 = zext i32 %156 to i64
  %158 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 0, i32 0, i32 8
  %159 = load i32, i32* %158, align 4
  %160 = zext i32 %159 to i64
  %161 = mul nuw i64 %160, %157
  %162 = load i32, i32* %128, align 8
  %163 = sext i32 %162 to i64
  %164 = mul i64 %161, %163
  %165 = load i16, i16* %145, align 4
  %166 = zext i16 %165 to i64
  %167 = add nuw nsw i64 %166, 7
  %168 = lshr i64 %167, 3
  %169 = mul i64 %164, %168
  %170 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 0, i32 0, i32 45
  %171 = load i32, i32* %170, align 8
  %172 = icmp eq i32 %171, 0
  %173 = mul i64 %169, 3
  %174 = select i1 %172, i64 %169, i64 %173
  %175 = icmp ugt i64 %174, 104857600
  br i1 %175, label %176, label %183

176:                                              ; preds = %155
  %177 = tail call i8* @getenv(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.21, i64 0, i64 0)) #11
  %178 = icmp eq i8* %177, null
  br i1 %178, label %179, label %183

179:                                              ; preds = %176
  %180 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %181 = load i8*, i8** %180, align 8
  %182 = trunc i64 %174 to i32
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %181, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @JPEGPreDecode.module, i64 0, i64 0), i8* getelementptr inbounds ([330 x i8], [330 x i8]* @.str.22, i64 0, i64 0), i32 %182, i32 104857600, i32 104857600) #11
  br label %305

183:                                              ; preds = %176, %155, %152
  %184 = load i16, i16* %57, align 2
  %185 = icmp eq i16 %184, 1
  %186 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 0, i32 0, i32 44
  %187 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %186, align 8
  %188 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %187, i64 0, i32 2
  %189 = load i32, i32* %188, align 8
  br i1 %185, label %190, label %225

190:                                              ; preds = %183
  %191 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 9
  %192 = load i16, i16* %191, align 2
  %193 = zext i16 %192 to i32
  %194 = icmp eq i32 %189, %193
  %195 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %187, i64 0, i32 3
  %196 = load i32, i32* %195, align 4
  %197 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 10
  %198 = load i16, i16* %197, align 4
  %199 = zext i16 %198 to i32
  %200 = icmp eq i32 %196, %199
  %201 = and i1 %194, %200
  br i1 %201, label %202, label %207

202:                                              ; preds = %190
  %203 = load i32, i32* %128, align 8
  %204 = icmp sgt i32 %203, 1
  br i1 %204, label %205, label %234

205:                                              ; preds = %202
  %206 = sext i32 %203 to i64
  br label %212

207:                                              ; preds = %190
  %208 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %209 = load i8*, i8** %208, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %209, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @JPEGPreDecode.module, i64 0, i64 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.23, i64 0, i64 0), i32 %189, i32 %196, i32 %193, i32 %199) #11
  br label %305

210:                                              ; preds = %217
  %211 = icmp slt i64 %221, %206
  br i1 %211, label %212, label %234

212:                                              ; preds = %205, %210
  %213 = phi i64 [ 1, %205 ], [ %221, %210 ]
  %214 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %187, i64 %213, i32 2
  %215 = load i32, i32* %214, align 8
  %216 = icmp eq i32 %215, 1
  br i1 %216, label %217, label %222

217:                                              ; preds = %212
  %218 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %187, i64 %213, i32 3
  %219 = load i32, i32* %218, align 4
  %220 = icmp eq i32 %219, 1
  %221 = add nuw nsw i64 %213, 1
  br i1 %220, label %210, label %222

222:                                              ; preds = %217, %212
  %223 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %224 = load i8*, i8** %223, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %224, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @JPEGPreDecode.module, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24, i64 0, i64 0)) #11
  br label %305

225:                                              ; preds = %183
  %226 = icmp eq i32 %189, 1
  br i1 %226, label %227, label %231

227:                                              ; preds = %225
  %228 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %187, i64 0, i32 3
  %229 = load i32, i32* %228, align 4
  %230 = icmp eq i32 %229, 1
  br i1 %230, label %245, label %231

231:                                              ; preds = %227, %225
  %232 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %233 = load i8*, i8** %232, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %233, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @JPEGPreDecode.module, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24, i64 0, i64 0)) #11
  br label %305

234:                                              ; preds = %210, %202
  %235 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 8
  %236 = load i16, i16* %235, align 8
  %237 = icmp eq i16 %236, 6
  br i1 %237, label %238, label %245

238:                                              ; preds = %234
  %239 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 23
  %240 = load i32, i32* %239, align 8
  %241 = icmp eq i32 %240, 1
  br i1 %241, label %242, label %245

242:                                              ; preds = %238
  %243 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 0, i32 0, i32 10
  store i32 3, i32* %243, align 4
  %244 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 0, i32 0, i32 11
  store i32 2, i32* %244, align 8
  br label %258

245:                                              ; preds = %227, %238, %234
  %246 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 0, i32 0, i32 10
  store i32 0, i32* %246, align 4
  %247 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 0, i32 0, i32 11
  store i32 0, i32* %247, align 8
  %248 = load i16, i16* %57, align 2
  %249 = icmp eq i16 %248, 1
  br i1 %249, label %250, label %258

250:                                              ; preds = %245
  %251 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 9
  %252 = load i16, i16* %251, align 2
  %253 = icmp eq i16 %252, 1
  br i1 %253, label %254, label %259

254:                                              ; preds = %250
  %255 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 10
  %256 = load i16, i16* %255, align 4
  %257 = icmp eq i16 %256, 1
  br i1 %257, label %258, label %259

258:                                              ; preds = %242, %254, %245
  br label %259

259:                                              ; preds = %250, %254, %258
  %260 = phi i32 [ 0, %258 ], [ 1, %254 ], [ 1, %250 ]
  %261 = phi i32 (%struct.tiff*, i8*, i64, i16)* [ @JPEGDecode, %258 ], [ @DecodeRowError, %254 ], [ @DecodeRowError, %250 ]
  %262 = phi i32 (%struct.tiff*, i8*, i64, i16)* [ @JPEGDecode, %258 ], [ @JPEGDecodeRaw, %254 ], [ @JPEGDecodeRaw, %250 ]
  %263 = phi i1 [ true, %258 ], [ false, %254 ], [ false, %250 ]
  %264 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 0, i32 0, i32 16
  store i32 %260, i32* %264, align 4
  %265 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 31
  store i32 (%struct.tiff*, i8*, i64, i16)* %261, i32 (%struct.tiff*, i8*, i64, i16)** %265, align 8
  %266 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 33
  store i32 (%struct.tiff*, i8*, i64, i16)* %262, i32 (%struct.tiff*, i8*, i64, i16)** %266, align 8
  %267 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 35
  store i32 (%struct.tiff*, i8*, i64, i16)* %262, i32 (%struct.tiff*, i8*, i64, i16)** %267, align 8
  %268 = tail call fastcc i32 @TIFFjpeg_start_decompress(%struct.JPEGState* %5)
  %269 = icmp eq i32 %268, 0
  %270 = or i1 %263, %269
  %271 = xor i1 %269, true
  %272 = zext i1 %271 to i32
  br i1 %270, label %305, label %273

273:                                              ; preds = %259
  %274 = load i32, i32* %128, align 8
  %275 = load %struct.JPEGState*, %struct.JPEGState** %4, align 8
  %276 = icmp sgt i32 %274, 0
  br i1 %276, label %277, label %301

277:                                              ; preds = %273
  %278 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %186, align 8
  %279 = zext i32 %274 to i64
  br label %280

280:                                              ; preds = %294, %277
  %281 = phi i64 [ 0, %277 ], [ %298, %294 ]
  %282 = phi i32 [ 0, %277 ], [ %296, %294 ]
  %283 = phi %struct.jpeg_component_info* [ %278, %277 ], [ %299, %294 ]
  %284 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %283, i64 0, i32 2
  %285 = load i32, i32* %284, align 8
  %286 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %283, i64 0, i32 3
  %287 = load i32, i32* %286, align 4
  %288 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %283, i64 0, i32 7
  %289 = load i32, i32* %288, align 4
  %290 = shl i32 %289, 3
  %291 = shl nsw i32 %287, 3
  %292 = tail call fastcc i8** @TIFFjpeg_alloc_sarray(%struct.JPEGState* %275, i32 %290, i32 %291) #11
  %293 = icmp eq i8** %292, null
  br i1 %293, label %305, label %294

294:                                              ; preds = %280
  %295 = mul nsw i32 %287, %285
  %296 = add nsw i32 %295, %282
  %297 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %275, i64 0, i32 12, i64 %281
  store i8** %292, i8*** %297, align 8
  %298 = add nuw nsw i64 %281, 1
  %299 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %283, i64 1
  %300 = icmp eq i64 %298, %279
  br i1 %300, label %301, label %280

301:                                              ; preds = %294, %273
  %302 = phi i32 [ 0, %273 ], [ %296, %294 ]
  %303 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %275, i64 0, i32 14
  store i32 %302, i32* %303, align 4
  %304 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 13
  store i32 8, i32* %304, align 8
  br label %305

305:                                              ; preds = %280, %259, %301, %179, %17, %14, %231, %222, %207, %149, %139, %124
  %306 = phi i32 [ 0, %124 ], [ 0, %139 ], [ 0, %149 ], [ 0, %207 ], [ 0, %222 ], [ 0, %231 ], [ 0, %14 ], [ 0, %17 ], [ 0, %179 ], [ %272, %259 ], [ 1, %301 ], [ 0, %280 ]
  ret i32 %306
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @JPEGDecode(%struct.tiff* nocapture, i8*, i64, i16 zeroext) #0 {
  %5 = alloca i8*, align 8
  %6 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %7 = bitcast i8** %6 to %struct.JPEGState**
  %8 = load %struct.JPEGState*, %struct.JPEGState** %7, align 8
  %9 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 49
  %10 = bitcast i8** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %8, i64 0, i32 6
  %13 = bitcast %struct.jpeg_source_mgr* %12 to i64*
  store i64 %11, i64* %13, align 8
  %14 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 50
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %8, i64 0, i32 6, i32 1
  store i64 %15, i64* %16, align 8
  %17 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %8, i64 0, i32 11
  %18 = load i64, i64* %17, align 8
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %64, label %20

20:                                               ; preds = %4
  %21 = sdiv i64 %2, %18
  %22 = srem i64 %2, %18
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %29, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %26 = load i8*, i8** %25, align 8
  %27 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 0
  %28 = load i8*, i8** %27, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFWarningExt(i8* %26, i8* %28, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.33, i64 0, i64 0)) #11
  br label %29

29:                                               ; preds = %20, %24
  %30 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %8, i64 0, i32 0, i32 0, i32 8
  %31 = load i32, i32* %30, align 4
  %32 = zext i32 %31 to i64
  %33 = icmp sgt i64 %21, %32
  %34 = select i1 %33, i64 %32, i64 %21
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %52, label %36

36:                                               ; preds = %29
  %37 = bitcast i8** %5 to i8*
  %38 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 13
  br label %39

39:                                               ; preds = %36, %45
  %40 = phi i8* [ %49, %45 ], [ %1, %36 ]
  %41 = phi i64 [ %50, %45 ], [ %34, %36 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37) #11
  store i8* %40, i8** %5, align 8
  %42 = call fastcc i32 @TIFFjpeg_read_scanlines(%struct.JPEGState* %8, i8** nonnull %5)
  %43 = icmp eq i32 %42, 1
  br i1 %43, label %45, label %44

44:                                               ; preds = %39
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37) #11
  br label %64

45:                                               ; preds = %39
  %46 = load i32, i32* %38, align 4
  %47 = add i32 %46, 1
  store i32 %47, i32* %38, align 4
  %48 = load i64, i64* %17, align 8
  %49 = getelementptr inbounds i8, i8* %40, i64 %48
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37) #11
  %50 = add nsw i64 %41, -1
  %51 = icmp sgt i64 %50, 0
  br i1 %51, label %39, label %52

52:                                               ; preds = %45, %29
  %53 = load i64, i64* %13, align 8
  store i64 %53, i64* %10, align 8
  %54 = load i64, i64* %16, align 8
  store i64 %54, i64* %14, align 8
  %55 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %8, i64 0, i32 0, i32 0, i32 34
  %56 = load i32, i32* %55, align 8
  %57 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %8, i64 0, i32 0, i32 0, i32 28
  %58 = load i32, i32* %57, align 4
  %59 = icmp ult i32 %56, %58
  br i1 %59, label %64, label %60

60:                                               ; preds = %52
  %61 = call fastcc i32 @TIFFjpeg_finish_decompress(%struct.JPEGState* %8)
  %62 = icmp ne i32 %61, 0
  %63 = zext i1 %62 to i32
  br label %64

64:                                               ; preds = %44, %52, %60, %4
  %65 = phi i32 [ 0, %44 ], [ 0, %4 ], [ 1, %52 ], [ %63, %60 ]
  ret i32 %65
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @JPEGSetupEncode(%struct.tiff*) #0 {
  %2 = alloca float*, align 8
  %3 = alloca [6 x float], align 16
  %4 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %5 = bitcast i8** %4 to %struct.JPEGState**
  %6 = load %struct.JPEGState*, %struct.JPEGState** %5, align 8
  %7 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %15, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 0, i32 0, i32 4
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %31, label %14

14:                                               ; preds = %10
  tail call fastcc void @TIFFjpeg_destroy(%struct.JPEGState* %6) #11
  store i32 0, i32* %7, align 8
  br label %15

15:                                               ; preds = %14, %1
  %16 = tail call fastcc i32 @TIFFjpeg_create_compress(%struct.JPEGState* %6) #11
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %31, label %18

18:                                               ; preds = %15
  %19 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 0, i32 0, i32 1
  %20 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %19, align 8
  %21 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %20, i64 0, i32 11
  %22 = load i64, i64* %21, align 8
  %23 = icmp sgt i64 %22, 0
  br i1 %23, label %24, label %30

24:                                               ; preds = %18
  %25 = tail call i8* @getenv(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i64 0, i64 0)) #11
  %26 = icmp eq i8* %25, null
  %27 = icmp slt i64 %22, 10485760
  %28 = and i1 %27, %26
  br i1 %28, label %29, label %30

29:                                               ; preds = %24
  store i64 10485760, i64* %21, align 8
  br label %30

30:                                               ; preds = %29, %24, %18
  store i32 1, i32* %7, align 8
  br label %31

31:                                               ; preds = %10, %15, %30
  %32 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 11
  %33 = load i16, i16* %32, align 2
  %34 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 8
  store i16 %33, i16* %34, align 8
  %35 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 24
  %36 = load i16, i16* %35, align 2
  %37 = icmp eq i16 %36, 1
  br i1 %37, label %38, label %72

38:                                               ; preds = %31
  %39 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 15
  %40 = load i16, i16* %39, align 2
  %41 = zext i16 %40 to i32
  %42 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 0, i32 0, i32 9
  store i32 %41, i32* %42, align 8
  %43 = icmp eq i16 %33, 6
  br i1 %43, label %44, label %51

44:                                               ; preds = %38
  %45 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 23
  %46 = load i32, i32* %45, align 8
  %47 = icmp eq i32 %46, 1
  %48 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 0, i32 0, i32 10
  br i1 %47, label %49, label %50

49:                                               ; preds = %44
  store i32 2, i32* %48, align 4
  br label %75

50:                                               ; preds = %44
  store i32 3, i32* %48, align 4
  br label %75

51:                                               ; preds = %38
  %52 = load i16, i16* %32, align 2
  %53 = icmp ult i16 %52, 2
  br i1 %53, label %54, label %59

54:                                               ; preds = %51
  %55 = load i16, i16* %39, align 2
  %56 = icmp eq i16 %55, 1
  br i1 %56, label %57, label %70

57:                                               ; preds = %54
  %58 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 0, i32 0, i32 10
  store i32 1, i32* %58, align 4
  br label %75

59:                                               ; preds = %51
  switch i16 %52, label %70 [
    i16 2, label %60
    i16 5, label %65
  ]

60:                                               ; preds = %59
  %61 = load i16, i16* %39, align 2
  %62 = icmp eq i16 %61, 3
  br i1 %62, label %63, label %70

63:                                               ; preds = %60
  %64 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 0, i32 0, i32 10
  store i32 2, i32* %64, align 4
  br label %75

65:                                               ; preds = %59
  %66 = load i16, i16* %39, align 2
  %67 = icmp eq i16 %66, 4
  br i1 %67, label %68, label %70

68:                                               ; preds = %65
  %69 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 0, i32 0, i32 10
  store i32 4, i32* %69, align 4
  br label %75

70:                                               ; preds = %59, %54, %60, %65
  %71 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 0, i32 0, i32 10
  store i32 0, i32* %71, align 4
  br label %75

72:                                               ; preds = %31
  %73 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 0, i32 0, i32 9
  store i32 1, i32* %73, align 8
  %74 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 0, i32 0, i32 10
  store i32 0, i32* %74, align 4
  br label %75

75:                                               ; preds = %50, %49, %63, %70, %68, %57, %72
  %76 = tail call fastcc i32 @TIFFjpeg_set_defaults(%struct.JPEGState* %6)
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %303, label %78

78:                                               ; preds = %75
  %79 = load i16, i16* %34, align 8
  switch i16 %79, label %126 [
    i16 6, label %80
    i16 3, label %122
    i16 4, label %122
  ]

80:                                               ; preds = %78
  %81 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 41, i64 0
  %82 = load i16, i16* %81, align 8
  %83 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 9
  store i16 %82, i16* %83, align 2
  %84 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 41, i64 1
  %85 = load i16, i16* %84, align 2
  %86 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 10
  store i16 %85, i16* %86, align 4
  %87 = icmp eq i16 %82, 0
  %88 = icmp eq i16 %85, 0
  %89 = or i1 %87, %88
  br i1 %89, label %90, label %93

90:                                               ; preds = %80
  %91 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %92 = load i8*, i8** %91, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %92, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @JPEGSetupEncode.module, i64 0, i64 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.34, i64 0, i64 0)) #11
  br label %303

93:                                               ; preds = %80
  %94 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 8
  %95 = load i16, i16* %94, align 4
  %96 = icmp ugt i16 %95, 16
  br i1 %96, label %97, label %101

97:                                               ; preds = %93
  %98 = zext i16 %95 to i32
  %99 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %100 = load i8*, i8** %99, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %100, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @JPEGSetupEncode.module, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.35, i64 0, i64 0), i32 %98) #11
  br label %303

101:                                              ; preds = %93
  %102 = bitcast float** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %102) #11
  store float* inttoptr (i64 -6148914691236517206 to float*), float** %2, align 8
  %103 = call i32 (%struct.tiff*, i32, ...) @TIFFGetField(%struct.tiff* %0, i32 532, float** nonnull %2) #11
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %121

105:                                              ; preds = %101
  %106 = bitcast [6 x float]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %106) #11
  %107 = getelementptr inbounds [6 x float], [6 x float]* %3, i64 0, i64 0
  %108 = getelementptr inbounds [6 x float], [6 x float]* %3, i64 0, i64 1
  %109 = getelementptr inbounds [6 x float], [6 x float]* %3, i64 0, i64 2
  %110 = getelementptr inbounds [6 x float], [6 x float]* %3, i64 0, i64 3
  %111 = getelementptr inbounds [6 x float], [6 x float]* %3, i64 0, i64 4
  %112 = getelementptr inbounds [6 x float], [6 x float]* %3, i64 0, i64 5
  %113 = load i16, i16* %94, align 4
  %114 = zext i16 %113 to i64
  %115 = shl i64 1, %114
  store float 0.000000e+00, float* %107, align 16
  %116 = add nsw i64 %115, -1
  %117 = sitofp i64 %116 to float
  store float %117, float* %108, align 4
  %118 = ashr i64 %115, 1
  %119 = sitofp i64 %118 to float
  store float %119, float* %109, align 8
  store float %117, float* %110, align 4
  store float %119, float* %111, align 16
  store float %117, float* %112, align 4
  %120 = call i32 (%struct.tiff*, i32, ...) @TIFFSetField(%struct.tiff* %0, i32 532, float* nonnull %107) #11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %106) #11
  br label %121

121:                                              ; preds = %101, %105
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %102) #11
  br label %129

122:                                              ; preds = %78, %78
  %123 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %124 = load i8*, i8** %123, align 8
  %125 = zext i16 %79 to i32
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %124, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @JPEGSetupEncode.module, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.36, i64 0, i64 0), i32 %125) #11
  br label %303

126:                                              ; preds = %78
  %127 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 9
  store i16 1, i16* %127, align 2
  %128 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 10
  store i16 1, i16* %128, align 4
  br label %129

129:                                              ; preds = %126, %121
  %130 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 8
  %131 = load i16, i16* %130, align 4
  %132 = icmp eq i16 %131, 8
  br i1 %132, label %137, label %133

133:                                              ; preds = %129
  %134 = zext i16 %131 to i32
  %135 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %136 = load i8*, i8** %135, align 8
  call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %136, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @JPEGSetupEncode.module, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.35, i64 0, i64 0), i32 %134) #11
  br label %303

137:                                              ; preds = %129
  %138 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 0, i32 0, i32 13
  store i32 8, i32* %138, align 8
  %139 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 3
  %140 = load i32, i32* %139, align 8
  %141 = and i32 %140, 1024
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %167, label %143

143:                                              ; preds = %137
  %144 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 5
  %145 = load i32, i32* %144, align 8
  %146 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 10
  %147 = load i16, i16* %146, align 4
  %148 = zext i16 %147 to i32
  %149 = shl nuw nsw i32 %148, 3
  %150 = urem i32 %145, %149
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %155, label %152

152:                                              ; preds = %143
  %153 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %154 = load i8*, i8** %153, align 8
  call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %154, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @JPEGSetupEncode.module, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.37, i64 0, i64 0), i32 %149) #11
  br label %303

155:                                              ; preds = %143
  %156 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 4
  %157 = load i32, i32* %156, align 4
  %158 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 9
  %159 = load i16, i16* %158, align 2
  %160 = zext i16 %159 to i32
  %161 = shl nuw nsw i32 %160, 3
  %162 = urem i32 %157, %161
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %183, label %164

164:                                              ; preds = %155
  %165 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %166 = load i8*, i8** %165, align 8
  call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %166, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @JPEGSetupEncode.module, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.38, i64 0, i64 0), i32 %161) #11
  br label %303

167:                                              ; preds = %137
  %168 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 16
  %169 = load i32, i32* %168, align 4
  %170 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 2
  %171 = load i32, i32* %170, align 4
  %172 = icmp ult i32 %169, %171
  br i1 %172, label %173, label %183

173:                                              ; preds = %167
  %174 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 10
  %175 = load i16, i16* %174, align 4
  %176 = zext i16 %175 to i32
  %177 = shl nuw nsw i32 %176, 3
  %178 = urem i32 %169, %177
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %183, label %180

180:                                              ; preds = %173
  %181 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %182 = load i8*, i8** %181, align 8
  call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %182, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @JPEGSetupEncode.module, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.39, i64 0, i64 0), i32 %177) #11
  br label %303

183:                                              ; preds = %155, %173, %167
  %184 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 24
  %185 = load i32, i32* %184, align 4
  %186 = and i32 %185, 3
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %292, label %188

188:                                              ; preds = %183
  %189 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 20
  %190 = load i8*, i8** %189, align 8
  %191 = icmp eq i8* %190, null
  br i1 %191, label %195, label %192

192:                                              ; preds = %188
  %193 = call i32 @bcmp(i8* nonnull %190, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.40, i64 0, i64 0), i64 8)
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %195, label %296

195:                                              ; preds = %192, %188
  %196 = load %struct.JPEGState*, %struct.JPEGState** %5, align 8
  %197 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %196, i64 0, i32 22
  %198 = load i32, i32* %197, align 4
  %199 = call fastcc i32 @TIFFjpeg_set_quality(%struct.JPEGState* %196, i32 %198) #11
  %200 = icmp eq i32 %199, 0
  br i1 %200, label %303, label %201

201:                                              ; preds = %195
  %202 = call fastcc i32 @TIFFjpeg_suppress_tables(%struct.JPEGState* %196) #11
  %203 = icmp eq i32 %202, 0
  br i1 %203, label %303, label %204

204:                                              ; preds = %201
  %205 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %196, i64 0, i32 24
  %206 = load i32, i32* %205, align 4
  %207 = and i32 %206, 1
  %208 = icmp eq i32 %207, 0
  br i1 %208, label %227, label %209

209:                                              ; preds = %204
  %210 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %196, i64 0, i32 0, i32 0, i32 17
  %211 = bitcast i32* %210 to %struct.JQUANT_TBL**
  %212 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %211, align 8
  %213 = icmp eq %struct.JQUANT_TBL* %212, null
  br i1 %213, label %216, label %214

214:                                              ; preds = %209
  %215 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %212, i64 0, i32 1
  store i32 0, i32* %215, align 4
  br label %216

216:                                              ; preds = %214, %209
  %217 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %196, i64 0, i32 8
  %218 = load i16, i16* %217, align 8
  %219 = icmp eq i16 %218, 6
  br i1 %219, label %220, label %227

220:                                              ; preds = %216
  %221 = getelementptr inbounds i32, i32* %210, i64 2
  %222 = bitcast i32* %221 to %struct.JQUANT_TBL**
  %223 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %222, align 8
  %224 = icmp eq %struct.JQUANT_TBL* %223, null
  br i1 %224, label %227, label %225

225:                                              ; preds = %220
  %226 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %223, i64 0, i32 1
  store i32 0, i32* %226, align 4
  br label %227

227:                                              ; preds = %225, %220, %216, %204
  %228 = load i32, i32* %205, align 4
  %229 = and i32 %228, 2
  %230 = icmp eq i32 %229, 0
  br i1 %230, label %263, label %231

231:                                              ; preds = %227
  %232 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %196, i64 0, i32 0, i32 0, i32 25
  %233 = bitcast i32* %232 to %struct.JHUFF_TBL**
  %234 = load %struct.JHUFF_TBL*, %struct.JHUFF_TBL** %233, align 8
  %235 = icmp eq %struct.JHUFF_TBL* %234, null
  br i1 %235, label %238, label %236

236:                                              ; preds = %231
  %237 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %234, i64 0, i32 2
  store i32 0, i32* %237, align 4
  br label %238

238:                                              ; preds = %236, %231
  %239 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %196, i64 0, i32 0, i32 0, i32 33
  %240 = bitcast i8*** %239 to %struct.JHUFF_TBL**
  %241 = load %struct.JHUFF_TBL*, %struct.JHUFF_TBL** %240, align 8
  %242 = icmp eq %struct.JHUFF_TBL* %241, null
  br i1 %242, label %245, label %243

243:                                              ; preds = %238
  %244 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %241, i64 0, i32 2
  store i32 0, i32* %244, align 4
  br label %245

245:                                              ; preds = %243, %238
  %246 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %196, i64 0, i32 8
  %247 = load i16, i16* %246, align 8
  %248 = icmp eq i16 %247, 6
  br i1 %248, label %249, label %263

249:                                              ; preds = %245
  %250 = getelementptr inbounds i32, i32* %232, i64 2
  %251 = bitcast i32* %250 to %struct.JHUFF_TBL**
  %252 = load %struct.JHUFF_TBL*, %struct.JHUFF_TBL** %251, align 8
  %253 = icmp eq %struct.JHUFF_TBL* %252, null
  br i1 %253, label %256, label %254

254:                                              ; preds = %249
  %255 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %252, i64 0, i32 2
  store i32 0, i32* %255, align 4
  br label %256

256:                                              ; preds = %254, %249
  %257 = getelementptr inbounds i8**, i8*** %239, i64 1
  %258 = bitcast i8*** %257 to %struct.JHUFF_TBL**
  %259 = load %struct.JHUFF_TBL*, %struct.JHUFF_TBL** %258, align 8
  %260 = icmp eq %struct.JHUFF_TBL* %259, null
  br i1 %260, label %263, label %261

261:                                              ; preds = %256
  %262 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %259, i64 0, i32 2
  store i32 0, i32* %262, align 4
  br label %263

263:                                              ; preds = %261, %256, %245, %227
  %264 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %196, i64 0, i32 20
  %265 = load i8*, i8** %264, align 8
  %266 = icmp eq i8* %265, null
  br i1 %266, label %268, label %267

267:                                              ; preds = %263
  call void @_TIFFfree(i8* nonnull %265) #11
  br label %268

268:                                              ; preds = %267, %263
  %269 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %196, i64 0, i32 21
  store i32 1000, i32* %269, align 8
  %270 = call i8* @_TIFFmalloc(i64 1000) #11
  store i8* %270, i8** %264, align 8
  %271 = icmp eq i8* %270, null
  br i1 %271, label %272, label %277

272:                                              ; preds = %268
  store i32 0, i32* %269, align 8
  %273 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %196, i64 0, i32 7
  %274 = load %struct.tiff*, %struct.tiff** %273, align 8
  %275 = getelementptr inbounds %struct.tiff, %struct.tiff* %274, i64 0, i32 55
  %276 = load i8*, i8** %275, align 8
  call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %276, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.41, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.42, i64 0, i64 0)) #11
  br label %303

277:                                              ; preds = %268
  %278 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %196, i64 0, i32 5
  %279 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %196, i64 0, i32 0, i32 0, i32 6
  %280 = bitcast %struct.jpeg_source_mgr** %279 to %struct.jpeg_destination_mgr**
  store %struct.jpeg_destination_mgr* %278, %struct.jpeg_destination_mgr** %280, align 8
  %281 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %196, i64 0, i32 5, i32 2
  store void (%struct.jpeg_compress_struct*)* @tables_init_destination, void (%struct.jpeg_compress_struct*)** %281, align 8
  %282 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %196, i64 0, i32 5, i32 3
  store i32 (%struct.jpeg_compress_struct*)* @tables_empty_output_buffer, i32 (%struct.jpeg_compress_struct*)** %282, align 8
  %283 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %196, i64 0, i32 5, i32 4
  store void (%struct.jpeg_compress_struct*)* @tables_term_destination, void (%struct.jpeg_compress_struct*)** %283, align 8
  %284 = call fastcc i32 @TIFFjpeg_write_tables(%struct.JPEGState* %196) #11
  %285 = icmp eq i32 %284, 0
  br i1 %285, label %303, label %286

286:                                              ; preds = %277
  %287 = load i32, i32* %139, align 8
  %288 = or i32 %287, 8
  store i32 %288, i32* %139, align 8
  %289 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 0, i64 2
  %290 = load i64, i64* %289, align 8
  %291 = or i64 %290, 4
  store i64 %291, i64* %289, align 8
  br label %296

292:                                              ; preds = %183
  %293 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 0, i64 2
  %294 = load i64, i64* %293, align 8
  %295 = and i64 %294, -5
  store i64 %295, i64* %293, align 8
  br label %296

296:                                              ; preds = %192, %286, %292
  %297 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 5
  %298 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 0, i32 0, i32 6
  %299 = bitcast %struct.jpeg_source_mgr** %298 to %struct.jpeg_destination_mgr**
  store %struct.jpeg_destination_mgr* %297, %struct.jpeg_destination_mgr** %299, align 8
  %300 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 5, i32 2
  store void (%struct.jpeg_compress_struct*)* @std_init_destination, void (%struct.jpeg_compress_struct*)** %300, align 8
  %301 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 5, i32 3
  store i32 (%struct.jpeg_compress_struct*)* @std_empty_output_buffer, i32 (%struct.jpeg_compress_struct*)** %301, align 8
  %302 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 5, i32 4
  store void (%struct.jpeg_compress_struct*)* @std_term_destination, void (%struct.jpeg_compress_struct*)** %302, align 8
  br label %303

303:                                              ; preds = %272, %201, %195, %277, %75, %296, %180, %164, %152, %133, %122, %97, %90
  %304 = phi i32 [ 0, %133 ], [ 0, %152 ], [ 0, %164 ], [ 1, %296 ], [ 0, %180 ], [ 0, %122 ], [ 0, %90 ], [ 0, %97 ], [ 0, %75 ], [ 0, %277 ], [ 0, %195 ], [ 0, %201 ], [ 0, %272 ]
  ret i32 %304
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @JPEGPreEncode(%struct.tiff*, i16 zeroext) #0 {
  %3 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %4 = bitcast i8** %3 to %struct.JPEGState**
  %5 = load %struct.JPEGState*, %struct.JPEGState** %4, align 8
  %6 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 0, i32 0, i32 4
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %9, label %14

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 27
  %11 = bitcast {}** %10 to i32 (%struct.tiff*)**
  %12 = load i32 (%struct.tiff*)*, i32 (%struct.tiff*)** %11, align 8
  %13 = tail call i32 %12(%struct.tiff* %0) #11
  br label %14

14:                                               ; preds = %9, %2
  %15 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 3
  %16 = load i32, i32* %15, align 8
  %17 = and i32 %16, 1024
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %25, label %19

19:                                               ; preds = %14
  %20 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 4
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 5
  %23 = load i32, i32* %22, align 8
  %24 = tail call i64 @TIFFTileRowSize(%struct.tiff* %0) #11
  br label %38

25:                                               ; preds = %14
  %26 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 1
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 13
  %31 = load i32, i32* %30, align 4
  %32 = sub i32 %29, %31
  %33 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 16
  %34 = load i32, i32* %33, align 4
  %35 = icmp ugt i32 %32, %34
  %36 = select i1 %35, i32 %34, i32 %32
  %37 = tail call i64 @TIFFScanlineSize(%struct.tiff* %0) #11
  br label %38

38:                                               ; preds = %25, %19
  %39 = phi i64 [ %37, %25 ], [ %24, %19 ]
  %40 = phi i32 [ %27, %25 ], [ %21, %19 ]
  %41 = phi i32 [ %36, %25 ], [ %23, %19 ]
  %42 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 11
  store i64 %39, i64* %42, align 8
  %43 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 24
  %44 = load i16, i16* %43, align 2
  %45 = icmp ne i16 %44, 2
  %46 = icmp eq i16 %1, 0
  %47 = or i1 %46, %45
  br i1 %47, label %69, label %48

48:                                               ; preds = %38
  %49 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 9
  %50 = load i16, i16* %49, align 2
  %51 = zext i16 %50 to i32
  %52 = sub nsw i32 0, %51
  %53 = icmp ult i32 %40, %52
  br i1 %53, label %54, label %58

54:                                               ; preds = %48
  %55 = add i32 %40, -1
  %56 = add i32 %55, %51
  %57 = udiv i32 %56, %51
  br label %58

58:                                               ; preds = %48, %54
  %59 = phi i32 [ %57, %54 ], [ 0, %48 ]
  %60 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 10
  %61 = load i16, i16* %60, align 4
  %62 = zext i16 %61 to i32
  %63 = sub nsw i32 0, %62
  %64 = icmp ult i32 %41, %63
  br i1 %64, label %65, label %69

65:                                               ; preds = %58
  %66 = add i32 %41, -1
  %67 = add i32 %66, %62
  %68 = udiv i32 %67, %62
  br label %69

69:                                               ; preds = %65, %58, %38
  %70 = phi i32 [ %40, %38 ], [ %59, %58 ], [ %59, %65 ]
  %71 = phi i32 [ %41, %38 ], [ 0, %58 ], [ %68, %65 ]
  %72 = or i32 %71, %70
  %73 = icmp ugt i32 %72, 65535
  br i1 %73, label %74, label %77

74:                                               ; preds = %69
  %75 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %76 = load i8*, i8** %75, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %76, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @JPEGPreEncode.module, i64 0, i64 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.43, i64 0, i64 0)) #11
  br label %269

77:                                               ; preds = %69
  %78 = bitcast %struct.JPEGState* %5 to %struct.jpeg_compress_struct*
  %79 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 0, i32 0, i32 7
  store i32 %70, i32* %79, align 8
  %80 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 0, i32 0, i32 8
  store i32 %71, i32* %80, align 4
  %81 = load i16, i16* %43, align 2
  %82 = icmp eq i16 %81, 1
  br i1 %82, label %83, label %126

83:                                               ; preds = %77
  %84 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 15
  %85 = load i16, i16* %84, align 2
  %86 = zext i16 %85 to i32
  %87 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 0, i32 0, i32 9
  store i32 %86, i32* %87, align 8
  %88 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 8
  %89 = load i16, i16* %88, align 8
  %90 = icmp eq i16 %89, 6
  br i1 %90, label %91, label %121

91:                                               ; preds = %83
  %92 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 23
  %93 = load i32, i32* %92, align 8
  %94 = icmp eq i32 %93, 1
  br i1 %94, label %104, label %95

95:                                               ; preds = %91
  %96 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 9
  %97 = load i16, i16* %96, align 2
  %98 = icmp eq i16 %97, 1
  br i1 %98, label %99, label %103

99:                                               ; preds = %95
  %100 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 10
  %101 = load i16, i16* %100, align 4
  %102 = icmp eq i16 %101, 1
  br i1 %102, label %104, label %103

103:                                              ; preds = %99, %95
  br label %104

104:                                              ; preds = %99, %91, %103
  %105 = phi i32 [ 1, %103 ], [ 0, %99 ], [ 0, %91 ]
  %106 = tail call fastcc i32 @TIFFjpeg_set_colorspace(%struct.JPEGState* %5, i32 3)
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %269, label %108

108:                                              ; preds = %104
  %109 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 9
  %110 = load i16, i16* %109, align 2
  %111 = zext i16 %110 to i32
  %112 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 0, i32 0, i32 15
  %113 = bitcast i32* %112 to %struct.jpeg_component_info**
  %114 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %113, align 8
  %115 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %114, i64 0, i32 2
  store i32 %111, i32* %115, align 8
  %116 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 10
  %117 = load i16, i16* %116, align 4
  %118 = zext i16 %117 to i32
  %119 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %113, align 8
  %120 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %119, i64 0, i32 3
  store i32 %118, i32* %120, align 4
  br label %146

121:                                              ; preds = %83
  %122 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 0, i32 0, i32 10
  %123 = load i32, i32* %122, align 4
  %124 = tail call fastcc i32 @TIFFjpeg_set_colorspace(%struct.JPEGState* %5, i32 %123)
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %269, label %146

126:                                              ; preds = %77
  %127 = tail call fastcc i32 @TIFFjpeg_set_colorspace(%struct.JPEGState* %5, i32 0)
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %269, label %129

129:                                              ; preds = %126
  %130 = zext i16 %1 to i32
  %131 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 0, i32 0, i32 15
  %132 = bitcast i32* %131 to %struct.jpeg_component_info**
  %133 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %132, align 8
  %134 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %133, i64 0, i32 0
  store i32 %130, i32* %134, align 8
  %135 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 8
  %136 = load i16, i16* %135, align 8
  %137 = icmp ne i16 %136, 6
  %138 = or i1 %46, %137
  br i1 %138, label %146, label %139

139:                                              ; preds = %129
  %140 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %132, align 8
  %141 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %140, i64 0, i32 4
  store i32 1, i32* %141, align 8
  %142 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %132, align 8
  %143 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %142, i64 0, i32 5
  store i32 1, i32* %143, align 4
  %144 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %132, align 8
  %145 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %144, i64 0, i32 6
  store i32 1, i32* %145, align 8
  br label %146

146:                                              ; preds = %129, %121, %139, %108
  %147 = phi i32 [ %105, %108 ], [ 0, %121 ], [ 0, %139 ], [ 0, %129 ]
  %148 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 0, i32 0, i32 42, i64 3
  %149 = bitcast %struct.JHUFF_TBL** %148 to i32*
  store i32 0, i32* %149, align 8
  %150 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %78, i64 0, i32 38
  store i32 0, i32* %150, align 4
  %151 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 22
  %152 = load i32, i32* %151, align 4
  %153 = tail call fastcc i32 @TIFFjpeg_set_quality(%struct.JPEGState* %5, i32 %152)
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %269, label %155

155:                                              ; preds = %146
  %156 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 24
  %157 = load i32, i32* %156, align 4
  %158 = and i32 %157, 1
  %159 = icmp eq i32 %158, 0
  %160 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 0, i32 0, i32 17
  %161 = bitcast i32* %160 to %struct.JQUANT_TBL**
  %162 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %161, align 8
  %163 = icmp eq %struct.JQUANT_TBL* %162, null
  br i1 %159, label %174, label %164

164:                                              ; preds = %155
  br i1 %163, label %167, label %165

165:                                              ; preds = %164
  %166 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %162, i64 0, i32 1
  store i32 1, i32* %166, align 4
  br label %167

167:                                              ; preds = %164, %165
  %168 = getelementptr inbounds i32, i32* %160, i64 2
  %169 = bitcast i32* %168 to %struct.JQUANT_TBL**
  %170 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %169, align 8
  %171 = icmp eq %struct.JQUANT_TBL* %170, null
  br i1 %171, label %184, label %172

172:                                              ; preds = %167
  %173 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %170, i64 0, i32 1
  store i32 1, i32* %173, align 4
  br label %184

174:                                              ; preds = %155
  br i1 %163, label %177, label %175

175:                                              ; preds = %174
  %176 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %162, i64 0, i32 1
  store i32 0, i32* %176, align 4
  br label %177

177:                                              ; preds = %174, %175
  %178 = getelementptr inbounds i32, i32* %160, i64 2
  %179 = bitcast i32* %178 to %struct.JQUANT_TBL**
  %180 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %179, align 8
  %181 = icmp eq %struct.JQUANT_TBL* %180, null
  br i1 %181, label %184, label %182

182:                                              ; preds = %177
  %183 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %180, i64 0, i32 1
  store i32 0, i32* %183, align 4
  br label %184

184:                                              ; preds = %182, %177, %172, %167
  %185 = load i32, i32* %156, align 4
  %186 = and i32 %185, 2
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %216, label %188

188:                                              ; preds = %184
  %189 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 0, i32 0, i32 25
  %190 = bitcast i32* %189 to %struct.JHUFF_TBL**
  %191 = load %struct.JHUFF_TBL*, %struct.JHUFF_TBL** %190, align 8
  %192 = icmp eq %struct.JHUFF_TBL* %191, null
  br i1 %192, label %195, label %193

193:                                              ; preds = %188
  %194 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %191, i64 0, i32 2
  store i32 1, i32* %194, align 4
  br label %195

195:                                              ; preds = %193, %188
  %196 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 0, i32 0, i32 33
  %197 = bitcast i8*** %196 to %struct.JHUFF_TBL**
  %198 = load %struct.JHUFF_TBL*, %struct.JHUFF_TBL** %197, align 8
  %199 = icmp eq %struct.JHUFF_TBL* %198, null
  br i1 %199, label %202, label %200

200:                                              ; preds = %195
  %201 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %198, i64 0, i32 2
  store i32 1, i32* %201, align 4
  br label %202

202:                                              ; preds = %195, %200
  %203 = getelementptr inbounds i32, i32* %189, i64 2
  %204 = bitcast i32* %203 to %struct.JHUFF_TBL**
  %205 = load %struct.JHUFF_TBL*, %struct.JHUFF_TBL** %204, align 8
  %206 = icmp eq %struct.JHUFF_TBL* %205, null
  br i1 %206, label %209, label %207

207:                                              ; preds = %202
  %208 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %205, i64 0, i32 2
  store i32 1, i32* %208, align 4
  br label %209

209:                                              ; preds = %207, %202
  %210 = getelementptr inbounds i8**, i8*** %196, i64 1
  %211 = bitcast i8*** %210 to %struct.JHUFF_TBL**
  %212 = load %struct.JHUFF_TBL*, %struct.JHUFF_TBL** %211, align 8
  %213 = icmp eq %struct.JHUFF_TBL* %212, null
  br i1 %213, label %216, label %214

214:                                              ; preds = %209
  %215 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %212, i64 0, i32 2
  store i32 1, i32* %215, align 4
  br label %216

216:                                              ; preds = %184, %214, %209
  %217 = phi i32 [ 0, %209 ], [ 0, %214 ], [ 1, %184 ]
  %218 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 0, i32 0, i32 42
  %219 = bitcast [4 x %struct.JHUFF_TBL*]* %218 to i32*
  store i32 %217, i32* %219, align 8
  %220 = icmp ne i32 %147, 0
  %221 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 0, i32 0, i32 41, i64 3
  %222 = bitcast %struct.JHUFF_TBL** %221 to i32*
  %223 = zext i1 %220 to i32
  %224 = select i1 %220, i32 (%struct.tiff*, i8*, i64, i16)* @JPEGEncodeRaw, i32 (%struct.tiff*, i8*, i64, i16)* @JPEGEncode
  %225 = select i1 %220, i32 (%struct.tiff*, i8*, i64, i16)* @JPEGEncodeRaw, i32 (%struct.tiff*, i8*, i64, i16)* @JPEGEncode
  %226 = select i1 %220, i32 (%struct.tiff*, i8*, i64, i16)* @JPEGEncodeRaw, i32 (%struct.tiff*, i8*, i64, i16)* @JPEGEncode
  store i32 %223, i32* %222, align 8
  %227 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 32
  store i32 (%struct.tiff*, i8*, i64, i16)* %224, i32 (%struct.tiff*, i8*, i64, i16)** %227, align 8
  %228 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 34
  store i32 (%struct.tiff*, i8*, i64, i16)* %225, i32 (%struct.tiff*, i8*, i64, i16)** %228, align 8
  %229 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 36
  store i32 (%struct.tiff*, i8*, i64, i16)* %226, i32 (%struct.tiff*, i8*, i64, i16)** %229, align 8
  %230 = tail call fastcc i32 @TIFFjpeg_start_compress(%struct.JPEGState* %5)
  %231 = icmp eq i32 %230, 0
  br i1 %231, label %269, label %232

232:                                              ; preds = %216
  br i1 %220, label %233, label %267

233:                                              ; preds = %232
  %234 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %78, i64 0, i32 13
  %235 = load i32, i32* %234, align 4
  %236 = load %struct.JPEGState*, %struct.JPEGState** %4, align 8
  %237 = icmp sgt i32 %235, 0
  br i1 %237, label %238, label %264

238:                                              ; preds = %233
  %239 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 0, i32 0, i32 15
  %240 = bitcast i32* %239 to %struct.jpeg_component_info**
  %241 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %240, align 8
  %242 = zext i32 %235 to i64
  br label %243

243:                                              ; preds = %257, %238
  %244 = phi i64 [ 0, %238 ], [ %261, %257 ]
  %245 = phi i32 [ 0, %238 ], [ %259, %257 ]
  %246 = phi %struct.jpeg_component_info* [ %241, %238 ], [ %262, %257 ]
  %247 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %246, i64 0, i32 2
  %248 = load i32, i32* %247, align 8
  %249 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %246, i64 0, i32 3
  %250 = load i32, i32* %249, align 4
  %251 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %246, i64 0, i32 7
  %252 = load i32, i32* %251, align 4
  %253 = shl i32 %252, 3
  %254 = shl nsw i32 %250, 3
  %255 = tail call fastcc i8** @TIFFjpeg_alloc_sarray(%struct.JPEGState* %236, i32 %253, i32 %254) #11
  %256 = icmp eq i8** %255, null
  br i1 %256, label %269, label %257

257:                                              ; preds = %243
  %258 = mul nsw i32 %250, %248
  %259 = add nsw i32 %258, %245
  %260 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %236, i64 0, i32 12, i64 %244
  store i8** %255, i8*** %260, align 8
  %261 = add nuw nsw i64 %244, 1
  %262 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %246, i64 1
  %263 = icmp eq i64 %261, %242
  br i1 %263, label %264, label %243

264:                                              ; preds = %257, %233
  %265 = phi i32 [ 0, %233 ], [ %259, %257 ]
  %266 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %236, i64 0, i32 14
  store i32 %265, i32* %266, align 4
  br label %267

267:                                              ; preds = %264, %232
  %268 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 13
  store i32 0, i32* %268, align 8
  br label %269

269:                                              ; preds = %243, %216, %146, %126, %121, %104, %267, %74
  %270 = phi i32 [ 0, %74 ], [ 1, %267 ], [ 0, %104 ], [ 0, %121 ], [ 0, %126 ], [ 0, %146 ], [ 0, %216 ], [ 0, %243 ]
  ret i32 %270
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @JPEGPostEncode(%struct.tiff* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %3 = bitcast i8** %2 to %struct.JPEGState**
  %4 = load %struct.JPEGState*, %struct.JPEGState** %3, align 8
  %5 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %4, i64 0, i32 13
  %6 = load i32, i32* %5, align 8
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %64

8:                                                ; preds = %1
  %9 = bitcast %struct.JPEGState* %4 to %struct.jpeg_compress_struct*
  %10 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %9, i64 0, i32 13
  %11 = load i32, i32* %10, align 4
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %55

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %4, i64 0, i32 0, i32 0, i32 15
  %15 = bitcast i32* %14 to %struct.jpeg_component_info**
  %16 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %15, align 8
  br label %17

17:                                               ; preds = %52, %13
  %18 = phi i32 [ %11, %13 ], [ %48, %52 ]
  %19 = phi i32 [ %6, %13 ], [ %54, %52 ]
  %20 = phi i64 [ 0, %13 ], [ %49, %52 ]
  %21 = phi %struct.jpeg_component_info* [ %16, %13 ], [ %53, %52 ]
  %22 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %21, i64 0, i32 3
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %21, i64 0, i32 7
  %25 = load i32, i32* %24, align 4
  %26 = shl i32 %25, 3
  %27 = zext i32 %26 to i64
  %28 = mul i32 %19, %23
  %29 = shl i32 %23, 3
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %31, label %47

31:                                               ; preds = %17
  %32 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %4, i64 0, i32 12, i64 %20
  %33 = sext i32 %28 to i64
  br label %34

34:                                               ; preds = %34, %31
  %35 = phi i64 [ %33, %31 ], [ %42, %34 ]
  %36 = load i8**, i8*** %32, align 8
  %37 = getelementptr inbounds i8*, i8** %36, i64 %35
  %38 = load i8*, i8** %37, align 8
  %39 = add nsw i64 %35, -1
  %40 = getelementptr inbounds i8*, i8** %36, i64 %39
  %41 = load i8*, i8** %40, align 8
  tail call void @_TIFFmemcpy(i8* %38, i8* %41, i64 %27) #11
  %42 = add nsw i64 %35, 1
  %43 = trunc i64 %42 to i32
  %44 = icmp eq i32 %29, %43
  br i1 %44, label %45, label %34

45:                                               ; preds = %34
  %46 = load i32, i32* %10, align 4
  br label %47

47:                                               ; preds = %45, %17
  %48 = phi i32 [ %46, %45 ], [ %18, %17 ]
  %49 = add nuw nsw i64 %20, 1
  %50 = sext i32 %48 to i64
  %51 = icmp slt i64 %49, %50
  br i1 %51, label %52, label %55

52:                                               ; preds = %47
  %53 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %21, i64 1
  %54 = load i32, i32* %5, align 8
  br label %17

55:                                               ; preds = %47, %8
  %56 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %4, i64 0, i32 0, i32 0, i32 46
  %57 = load i32, i32* %56, align 4
  %58 = shl nsw i32 %57, 3
  %59 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %4, i64 0, i32 12, i64 0
  %60 = tail call fastcc i32 @TIFFjpeg_write_raw_data(%struct.JPEGState* %4, i8*** %59, i32 %58)
  %61 = icmp eq i32 %60, %58
  br i1 %61, label %62, label %67

62:                                               ; preds = %55
  %63 = load %struct.JPEGState*, %struct.JPEGState** %3, align 8
  br label %64

64:                                               ; preds = %62, %1
  %65 = phi %struct.JPEGState* [ %63, %62 ], [ %4, %1 ]
  %66 = tail call fastcc i32 @TIFFjpeg_finish_compress(%struct.JPEGState* %65)
  br label %67

67:                                               ; preds = %55, %64
  %68 = phi i32 [ %66, %64 ], [ 0, %55 ]
  ret i32 %68
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @JPEGEncode(%struct.tiff* nocapture, i8*, i64, i16 zeroext) #0 {
  %5 = alloca [1 x i8*], align 8
  %6 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %7 = bitcast i8** %6 to %struct.JPEGState**
  %8 = load %struct.JPEGState*, %struct.JPEGState** %7, align 8
  %9 = bitcast [1 x i8*]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #11
  %10 = getelementptr inbounds [1 x i8*], [1 x i8*]* %5, i64 0, i64 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %8, i64 0, i32 11
  %12 = load i64, i64* %11, align 8
  %13 = sdiv i64 %2, %12
  %14 = srem i64 %2, %12
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %21, label %16

16:                                               ; preds = %4
  %17 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFWarningExt(i8* %18, i8* %20, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.44, i64 0, i64 0)) #11
  br label %21

21:                                               ; preds = %4, %16
  %22 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 3
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 1024
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %38

26:                                               ; preds = %21
  %27 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 13
  %28 = load i32, i32* %27, align 4
  %29 = zext i32 %28 to i64
  %30 = add nsw i64 %13, %29
  %31 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 2
  %32 = load i32, i32* %31, align 4
  %33 = zext i32 %32 to i64
  %34 = icmp sgt i64 %30, %33
  br i1 %34, label %35, label %38

35:                                               ; preds = %26
  %36 = sub i32 %32, %28
  %37 = zext i32 %36 to i64
  br label %38

38:                                               ; preds = %21, %35, %26
  %39 = phi i64 [ %13, %21 ], [ %37, %35 ], [ %13, %26 ]
  %40 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %8, i64 0, i32 0, i32 0, i32 13
  %41 = load i32, i32* %40, align 8
  %42 = icmp eq i32 %41, 12
  br i1 %42, label %43, label %58

43:                                               ; preds = %38
  %44 = load i64, i64* %11, align 8
  %45 = shl nsw i64 %44, 1
  %46 = sdiv i64 %45, 3
  %47 = shl i64 %46, 32
  %48 = ashr exact i64 %47, 31
  %49 = tail call i8* @_TIFFmalloc(i64 %48) #11
  %50 = icmp eq i8* %49, null
  br i1 %50, label %55, label %51

51:                                               ; preds = %43
  %52 = bitcast i8* %49 to i16*
  %53 = trunc i64 %46 to i32
  %54 = load i32, i32* %40, align 8
  br label %58

55:                                               ; preds = %43
  %56 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %57 = load i8*, i8** %56, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %57, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.45, i64 0, i64 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.46, i64 0, i64 0)) #11
  br label %152

58:                                               ; preds = %51, %38
  %59 = phi i32 [ %54, %51 ], [ %41, %38 ]
  %60 = phi i8* [ %49, %51 ], [ null, %38 ]
  %61 = phi i16* [ %52, %51 ], [ null, %38 ]
  %62 = phi i32 [ %53, %51 ], [ 0, %38 ]
  %63 = icmp sgt i64 %39, 0
  %64 = icmp eq i32 %59, 12
  br i1 %63, label %65, label %150

65:                                               ; preds = %58
  %66 = sdiv i32 %62, 2
  %67 = icmp sgt i32 %62, 1
  %68 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 13
  %69 = zext i32 %66 to i64
  %70 = and i64 %69, 1
  %71 = and i32 %62, -2
  %72 = icmp eq i32 %71, 2
  %73 = sub nsw i64 %69, %70
  %74 = icmp eq i64 %70, 0
  br label %75

75:                                               ; preds = %140, %65
  %76 = phi i1 [ %64, %65 ], [ %146, %140 ]
  %77 = phi i64 [ %39, %65 ], [ %79, %140 ]
  %78 = phi i8* [ %1, %65 ], [ %144, %140 ]
  %79 = add nsw i64 %77, -1
  br i1 %76, label %80, label %117

80:                                               ; preds = %75
  store i8* %60, i8** %10, align 8
  br i1 %67, label %81, label %135

81:                                               ; preds = %80
  br i1 %72, label %118, label %82

82:                                               ; preds = %81, %82
  %83 = phi i64 [ %114, %82 ], [ 0, %81 ]
  %84 = phi i64 [ %115, %82 ], [ %73, %81 ]
  %85 = mul nuw nsw i64 %83, 3
  %86 = getelementptr inbounds i8, i8* %78, i64 %85
  %87 = shl nuw nsw i64 %83, 1
  %88 = getelementptr inbounds i16, i16* %61, i64 %87
  %89 = bitcast i16* %88 to i8*
  %90 = load i8, i8* %86, align 1
  %91 = shl i8 %90, 4
  %92 = getelementptr inbounds i8, i8* %86, i64 1
  %93 = load i8, i8* %92, align 1
  %94 = lshr i8 %93, 4
  %95 = or i8 %94, %91
  store i8 %95, i8* %89, align 1
  %96 = getelementptr inbounds i8, i8* %86, i64 2
  %97 = load i8, i8* %96, align 1
  %98 = getelementptr inbounds i8, i8* %89, i64 1
  store i8 %97, i8* %98, align 1
  %99 = or i64 %83, 1
  %100 = mul nuw nsw i64 %99, 3
  %101 = getelementptr inbounds i8, i8* %78, i64 %100
  %102 = shl nuw nsw i64 %99, 1
  %103 = getelementptr inbounds i16, i16* %61, i64 %102
  %104 = bitcast i16* %103 to i8*
  %105 = load i8, i8* %101, align 1
  %106 = shl i8 %105, 4
  %107 = getelementptr inbounds i8, i8* %101, i64 1
  %108 = load i8, i8* %107, align 1
  %109 = lshr i8 %108, 4
  %110 = or i8 %109, %106
  store i8 %110, i8* %104, align 1
  %111 = getelementptr inbounds i8, i8* %101, i64 2
  %112 = load i8, i8* %111, align 1
  %113 = getelementptr inbounds i8, i8* %104, i64 1
  store i8 %112, i8* %113, align 1
  %114 = add nuw nsw i64 %83, 2
  %115 = add i64 %84, -2
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %118, label %82

117:                                              ; preds = %75
  store i8* %78, i8** %10, align 8
  br label %135

118:                                              ; preds = %82, %81
  %119 = phi i64 [ 0, %81 ], [ %114, %82 ]
  br i1 %74, label %135, label %120

120:                                              ; preds = %118
  %121 = mul nuw nsw i64 %119, 3
  %122 = getelementptr inbounds i8, i8* %78, i64 %121
  %123 = shl nuw nsw i64 %119, 1
  %124 = getelementptr inbounds i16, i16* %61, i64 %123
  %125 = bitcast i16* %124 to i8*
  %126 = load i8, i8* %122, align 1
  %127 = shl i8 %126, 4
  %128 = getelementptr inbounds i8, i8* %122, i64 1
  %129 = load i8, i8* %128, align 1
  %130 = lshr i8 %129, 4
  %131 = or i8 %130, %127
  store i8 %131, i8* %125, align 1
  %132 = getelementptr inbounds i8, i8* %122, i64 2
  %133 = load i8, i8* %132, align 1
  %134 = getelementptr inbounds i8, i8* %125, i64 1
  store i8 %133, i8* %134, align 1
  br label %135

135:                                              ; preds = %120, %118, %80, %117
  %136 = call fastcc i32 @TIFFjpeg_write_scanlines(%struct.JPEGState* %8, i8** nonnull %10)
  %137 = icmp eq i32 %136, 1
  br i1 %137, label %138, label %152

138:                                              ; preds = %135
  %139 = icmp sgt i64 %79, 0
  br i1 %139, label %140, label %147

140:                                              ; preds = %138
  %141 = load i32, i32* %68, align 4
  %142 = add i32 %141, 1
  store i32 %142, i32* %68, align 4
  %143 = load i64, i64* %11, align 8
  %144 = getelementptr inbounds i8, i8* %78, i64 %143
  %145 = load i32, i32* %40, align 8
  %146 = icmp eq i32 %145, 12
  br label %75

147:                                              ; preds = %138
  %148 = load i32, i32* %40, align 8
  %149 = icmp eq i32 %148, 12
  br i1 %149, label %151, label %152

150:                                              ; preds = %58
  br i1 %64, label %151, label %152

151:                                              ; preds = %147, %150
  call void @_TIFFfree(i8* %60) #11
  br label %152

152:                                              ; preds = %135, %147, %150, %151, %55
  %153 = phi i32 [ 0, %55 ], [ 1, %151 ], [ 1, %150 ], [ 1, %147 ], [ 0, %135 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #11
  ret i32 %153
}

; Function Attrs: nounwind ssp uwtable
define internal void @JPEGCleanup(%struct.tiff*) #0 {
  %2 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %3 = bitcast i8** %2 to %struct.JPEGState**
  %4 = load %struct.JPEGState*, %struct.JPEGState** %3, align 8
  %5 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %4, i64 0, i32 15
  %6 = bitcast i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 65
  %9 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 65, i32 1
  %10 = bitcast i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %9 to i64*
  store i64 %7, i64* %10, align 8
  %11 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %4, i64 0, i32 16
  %12 = bitcast i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %struct.TIFFTagMethods* %8 to i64*
  store i64 %13, i64* %14, align 8
  %15 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %4, i64 0, i32 17
  %16 = bitcast void (%struct.tiff*, %struct._IO_FILE*, i64)** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 65, i32 2
  %19 = bitcast void (%struct.tiff*, %struct._IO_FILE*, i64)** %18 to i64*
  store i64 %17, i64* %19, align 8
  %20 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %4, i64 0, i32 1
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %24, label %23

23:                                               ; preds = %1
  tail call fastcc void @TIFFjpeg_destroy(%struct.JPEGState* %4)
  br label %24

24:                                               ; preds = %1, %23
  %25 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %4, i64 0, i32 20
  %26 = load i8*, i8** %25, align 8
  %27 = icmp eq i8* %26, null
  br i1 %27, label %29, label %28

28:                                               ; preds = %24
  tail call void @_TIFFfree(i8* nonnull %26) #11
  br label %29

29:                                               ; preds = %24, %28
  %30 = load i8*, i8** %2, align 8
  tail call void @_TIFFfree(i8* %30) #11
  store i8* null, i8** %2, align 8
  tail call void @_TIFFSetDefaultCompressionState(%struct.tiff* %0) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @JPEGDefaultStripSize(%struct.tiff*, i32) #0 {
  %3 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %4 = bitcast i8** %3 to %struct.JPEGState**
  %5 = load %struct.JPEGState*, %struct.JPEGState** %4, align 8
  %6 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %5, i64 0, i32 18
  %7 = load i32 (%struct.tiff*, i32)*, i32 (%struct.tiff*, i32)** %6, align 8
  %8 = tail call i32 %7(%struct.tiff* %0, i32 %1) #11
  %9 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = icmp ult i32 %8, %10
  br i1 %11, label %12, label %26

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 41, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = zext i16 %14 to i32
  %16 = shl nuw nsw i32 %15, 3
  %17 = sub nsw i32 0, %16
  %18 = icmp ult i32 %8, %17
  br i1 %18, label %19, label %23

19:                                               ; preds = %12
  %20 = add i32 %8, -1
  %21 = add i32 %20, %16
  %22 = udiv i32 %21, %16
  br label %23

23:                                               ; preds = %12, %19
  %24 = phi i32 [ %22, %19 ], [ 0, %12 ]
  %25 = mul i32 %24, %16
  br label %26

26:                                               ; preds = %23, %2
  %27 = phi i32 [ %25, %23 ], [ %8, %2 ]
  ret i32 %27
}

; Function Attrs: nounwind ssp uwtable
define internal void @JPEGDefaultTileSize(%struct.tiff*, i32*, i32*) #0 {
  %4 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %5 = bitcast i8** %4 to %struct.JPEGState**
  %6 = load %struct.JPEGState*, %struct.JPEGState** %5, align 8
  %7 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %6, i64 0, i32 19
  %8 = load void (%struct.tiff*, i32*, i32*)*, void (%struct.tiff*, i32*, i32*)** %7, align 8
  tail call void %8(%struct.tiff* %0, i32* %1, i32* %2) #11
  %9 = load i32, i32* %1, align 4
  %10 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 41, i64 0
  %11 = load i16, i16* %10, align 8
  %12 = zext i16 %11 to i32
  %13 = shl nuw nsw i32 %12, 3
  %14 = sub nsw i32 0, %13
  %15 = icmp ult i32 %9, %14
  br i1 %15, label %16, label %20

16:                                               ; preds = %3
  %17 = add i32 %9, -1
  %18 = add i32 %17, %13
  %19 = udiv i32 %18, %13
  br label %20

20:                                               ; preds = %3, %16
  %21 = phi i32 [ %19, %16 ], [ 0, %3 ]
  %22 = mul i32 %21, %13
  store i32 %22, i32* %1, align 4
  %23 = load i32, i32* %2, align 4
  %24 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 41, i64 1
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = shl nuw nsw i32 %26, 3
  %28 = sub nsw i32 0, %27
  %29 = icmp ult i32 %23, %28
  br i1 %29, label %30, label %34

30:                                               ; preds = %20
  %31 = add i32 %23, -1
  %32 = add i32 %31, %27
  %33 = udiv i32 %32, %27
  br label %34

34:                                               ; preds = %20, %30
  %35 = phi i32 [ %33, %30 ], [ 0, %20 ]
  %36 = mul i32 %35, %27
  store i32 %36, i32* %2, align 4
  ret void
}

declare %struct.jpeg_error_mgr* @jpeg_std_error(%struct.jpeg_error_mgr*) local_unnamed_addr #2

; Function Attrs: noreturn nounwind ssp uwtable
define internal void @TIFFjpeg_error_exit(%struct.jpeg_common_struct*) #3 {
  %2 = alloca [200 x i8], align 16
  %3 = getelementptr inbounds [200 x i8], [200 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %3) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %3, i8 -86, i64 200, i1 false)
  %4 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %5 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %4, align 8
  %6 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %5, i64 0, i32 3
  %7 = load void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*, i8*)** %6, align 8
  call void %7(%struct.jpeg_common_struct* %0, i8* nonnull %3) #11
  %8 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 28, i32 2
  %9 = bitcast %struct.jpeg_progress_mgr** %8 to %struct.tiff**
  %10 = load %struct.tiff*, %struct.tiff** %9, align 8
  %11 = getelementptr inbounds %struct.tiff, %struct.tiff* %10, i64 0, i32 55
  %12 = load i8*, i8** %11, align 8
  call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %12, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i8* nonnull %3) #11
  call void @jpeg_abort(%struct.jpeg_common_struct* %0) #11
  %13 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 20, i32 1
  %14 = bitcast %struct.jpeg_memory_mgr** %13 to %struct.__jmp_buf_tag*
  call void @longjmp(%struct.__jmp_buf_tag* %14, i32 1) #13
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define internal void @TIFFjpeg_output_message(%struct.jpeg_common_struct*) #0 {
  %2 = alloca [200 x i8], align 16
  %3 = getelementptr inbounds [200 x i8], [200 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %3) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %3, i8 -86, i64 200, i1 false)
  %4 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %5 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %4, align 8
  %6 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %5, i64 0, i32 3
  %7 = load void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*, i8*)** %6, align 8
  call void %7(%struct.jpeg_common_struct* %0, i8* nonnull %3) #11
  %8 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 28, i32 2
  %9 = bitcast %struct.jpeg_progress_mgr** %8 to %struct.tiff**
  %10 = load %struct.tiff*, %struct.tiff** %9, align 8
  %11 = getelementptr inbounds %struct.tiff, %struct.tiff* %10, i64 0, i32 55
  %12 = load i8*, i8** %11, align 8
  call void (i8*, i8*, i8*, ...) @TIFFWarningExt(i8* %12, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i8* nonnull %3) #11
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %3) #11
  ret void
}

; Function Attrs: nounwind returns_twice
declare i32 @_setjmp(%struct.__jmp_buf_tag*) local_unnamed_addr #4

declare void @jpeg_CreateDecompress(%struct.jpeg_decompress_struct*, i32, i64) local_unnamed_addr #2

declare void @jpeg_abort(%struct.jpeg_common_struct*) local_unnamed_addr #2

; Function Attrs: noreturn nounwind
declare void @longjmp(%struct.__jmp_buf_tag*, i32) local_unnamed_addr #5

declare void @TIFFWarningExt(i8*, i8*, i8*, ...) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @std_init_source(%struct.jpeg_decompress_struct* nocapture) #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 1, i32 71, i64 5
  %3 = bitcast i32* %2 to %struct.tiff**
  %4 = load %struct.tiff*, %struct.tiff** %3, align 8
  %5 = getelementptr inbounds %struct.tiff, %struct.tiff* %4, i64 0, i32 45
  %6 = bitcast i8** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 1, i32 67, i64 1
  %9 = bitcast %struct.jpeg_component_info** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = getelementptr inbounds %struct.tiff, %struct.tiff* %4, i64 0, i32 50
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 1, i32 67, i64 2
  %13 = bitcast %struct.jpeg_component_info** %12 to i64*
  store i64 %11, i64* %13, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @std_fill_input_buffer(%struct.jpeg_decompress_struct*) #0 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %3 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %2, align 8
  %4 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %3, i64 0, i32 5
  store i32 120, i32* %4, align 8
  %5 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %2, align 8
  %6 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %5, i64 0, i32 1
  %7 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %6, align 8
  %8 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %7(%struct.jpeg_common_struct* %8, i32 -1) #11
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 1, i32 67, i64 1
  %10 = bitcast %struct.jpeg_component_info** %9 to i8**
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @std_fill_input_buffer.dummy_EOI, i64 0, i64 0), i8** %10, align 8
  %11 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 1, i32 67, i64 2
  %12 = bitcast %struct.jpeg_component_info** %11 to i64*
  store i64 2, i64* %12, align 8
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define internal void @std_skip_input_data(%struct.jpeg_decompress_struct*, i64) #0 {
  %3 = icmp sgt i64 %1, 0
  br i1 %3, label %4, label %27

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 1, i32 67, i64 2
  %6 = bitcast %struct.jpeg_component_info** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = icmp ult i64 %7, %1
  br i1 %8, label %9, label %19

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %11 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %10, align 8
  %12 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %11, i64 0, i32 5
  store i32 120, i32* %12, align 8
  %13 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %10, align 8
  %14 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %13, i64 0, i32 1
  %15 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %14, align 8
  %16 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %15(%struct.jpeg_common_struct* %16, i32 -1) #11
  %17 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 1, i32 67, i64 1
  %18 = bitcast %struct.jpeg_component_info** %17 to i8**
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @std_fill_input_buffer.dummy_EOI, i64 0, i64 0), i8** %18, align 8
  br label %25

19:                                               ; preds = %4
  %20 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 1, i32 67, i64 1
  %21 = bitcast %struct.jpeg_component_info** %20 to i8**
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  store i8* %23, i8** %21, align 8
  %24 = sub i64 %7, %1
  br label %25

25:                                               ; preds = %19, %9
  %26 = phi i64 [ 2, %9 ], [ %24, %19 ]
  store i64 %26, i64* %6, align 8
  br label %27

27:                                               ; preds = %25, %2
  ret void
}

declare i32 @jpeg_resync_to_restart(%struct.jpeg_decompress_struct*, i32) #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @std_term_source(%struct.jpeg_decompress_struct* nocapture) #7 {
  ret void
}

declare i32 @jpeg_read_header(%struct.jpeg_decompress_struct*, i32) local_unnamed_addr #2

declare void @jpeg_destroy(%struct.jpeg_common_struct*) local_unnamed_addr #2

declare i32 @jpeg_has_multiple_scans(%struct.jpeg_decompress_struct*) local_unnamed_addr #2

declare void @_TIFFsetByteArray(i8**, i8*, i32) local_unnamed_addr #2

declare %struct._TIFFField* @TIFFFieldWithTag(%struct.tiff*, i32) local_unnamed_addr #2

declare i64 @TIFFTileSize(%struct.tiff*) local_unnamed_addr #2

declare i64 @TIFFScanlineSize(%struct.tiff*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #8

declare i64 @TIFFGetStrileOffset(%struct.tiff*, i32) local_unnamed_addr #2

declare i64 @TIFFGetStrileByteCount(%struct.tiff*, i32) local_unnamed_addr #2

declare void @_TIFFfree(i8*) local_unnamed_addr #2

declare void @_TIFFNoPostDecode(%struct.tiff*, i8*, i64) #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @TIFFjpeg_create_compress(%struct.JPEGState*) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 2
  %3 = call %struct.jpeg_error_mgr* @jpeg_std_error(%struct.jpeg_error_mgr* %2) #11
  %4 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 0, i32 0, i32 0
  store %struct.jpeg_error_mgr* %3, %struct.jpeg_error_mgr** %4, align 8
  %5 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %2, i64 0, i32 0
  store void (%struct.jpeg_common_struct*)* @TIFFjpeg_error_exit, void (%struct.jpeg_common_struct*)** %5, align 8
  %6 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 2, i32 2
  store void (%struct.jpeg_common_struct*)* @TIFFjpeg_output_message, void (%struct.jpeg_common_struct*)** %6, align 8
  %7 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 0, i32 0, i32 3
  store i8* null, i8** %7, align 8
  %8 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 3, i64 0
  %9 = call i32 @_setjmp(%struct.__jmp_buf_tag* %8) #12
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %13

11:                                               ; preds = %1
  %12 = bitcast %struct.JPEGState* %0 to %struct.jpeg_compress_struct*
  call void @jpeg_CreateCompress(%struct.jpeg_compress_struct* %12, i32 62, i64 520) #11
  br label %13

13:                                               ; preds = %1, %11
  %14 = phi i32 [ 1, %11 ], [ 0, %1 ]
  ret i32 %14
}

; Function Attrs: nofree nounwind readonly
declare i8* @getenv(i8* nocapture) local_unnamed_addr #9

declare void @jpeg_CreateCompress(%struct.jpeg_compress_struct*, i32, i64) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @tables_init_source(%struct.jpeg_decompress_struct* nocapture) #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 2, i32 3
  %3 = bitcast i8** %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 1, i32 67, i64 1
  %6 = bitcast %struct.jpeg_component_info** %5 to i64*
  store i64 %4, i64* %6, align 8
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 2, i32 4
  %8 = load i32, i32* %7, align 8
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 1, i32 67, i64 2
  %11 = bitcast %struct.jpeg_component_info** %10 to i64*
  store i64 %9, i64* %11, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @TIFFjpeg_abort(%struct.JPEGState*) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 3, i64 0
  %3 = call i32 @_setjmp(%struct.__jmp_buf_tag* %2) #12
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %7

5:                                                ; preds = %1
  %6 = bitcast %struct.JPEGState* %0 to %struct.jpeg_common_struct*
  call void @jpeg_abort(%struct.jpeg_common_struct* %6) #11
  br label %7

7:                                                ; preds = %1, %5
  %8 = phi i32 [ 1, %5 ], [ 0, %1 ]
  ret i32 %8
}

declare i64 @TIFFTileRowSize(%struct.tiff*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal i32 @DecodeRowError(%struct.tiff* nocapture readonly, i8* nocapture readnone, i64, i16 zeroext) #0 {
  %5 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %6 = load i8*, i8** %5, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %6, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.25, i64 0, i64 0), i8* getelementptr inbounds ([141 x i8], [141 x i8]* @.str.26, i64 0, i64 0)) #11
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @JPEGDecodeRaw(%struct.tiff* nocapture, i8* nocapture, i64, i16 zeroext) #0 {
  %5 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %6 = bitcast i8** %5 to %struct.JPEGState**
  %7 = load %struct.JPEGState*, %struct.JPEGState** %6, align 8
  %8 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %7, i64 0, i32 0, i32 0, i32 8
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 13
  %14 = load i32, i32* %13, align 4
  %15 = sub i32 %12, %14
  %16 = icmp ugt i32 %9, %15
  br i1 %16, label %17, label %24

17:                                               ; preds = %4
  %18 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 3
  %19 = load i32, i32* %18, align 8
  %20 = and i32 %19, 1024
  %21 = icmp eq i32 %20, 0
  %22 = zext i32 %15 to i64
  %23 = select i1 %21, i64 %22, i64 %10
  br label %24

24:                                               ; preds = %17, %4
  %25 = phi i64 [ %10, %4 ], [ %23, %17 ]
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %337, label %27

27:                                               ; preds = %24
  %28 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %7, i64 0, i32 0, i32 0, i32 44
  %29 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %28, align 8
  %30 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %29, i64 1, i32 10
  %31 = load i32, i32* %30, align 8
  %32 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %7, i64 0, i32 14
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %7, i64 0, i32 11
  %35 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %7, i64 0, i32 13
  %36 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %7, i64 0, i32 0, i32 0, i32 62
  %37 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %7, i64 0, i32 12, i64 0
  %38 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %7, i64 0, i32 0, i32 0, i32 9
  %39 = sext i32 %33 to i64
  %40 = add i32 %31, -1
  %41 = zext i32 %40 to i64
  %42 = mul nsw i64 %39, %41
  %43 = icmp eq i32 %31, 0
  %44 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %7, i64 0, i32 10
  %45 = load i64, i64* %34, align 8
  %46 = and i32 %31, 7
  %47 = icmp eq i32 %46, 0
  %48 = icmp ult i32 %40, 7
  br label %49

49:                                               ; preds = %323, %27
  %50 = phi i64 [ %45, %27 ], [ %330, %323 ]
  %51 = phi i64 [ %2, %27 ], [ %332, %323 ]
  %52 = phi i8* [ %1, %27 ], [ %331, %323 ]
  %53 = phi i64 [ %25, %27 ], [ %335, %323 ]
  %54 = icmp slt i64 %51, %50
  br i1 %54, label %55, label %58

55:                                               ; preds = %49
  %56 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %57 = load i8*, i8** %56, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %57, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.27, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.28, i64 0, i64 0)) #11
  br label %347

58:                                               ; preds = %49
  %59 = load i32, i32* %35, align 8
  %60 = icmp sgt i32 %59, 7
  br i1 %60, label %61, label %67

61:                                               ; preds = %58
  %62 = load i32, i32* %36, align 4
  %63 = shl nsw i32 %62, 3
  %64 = tail call fastcc i32 @TIFFjpeg_read_raw_data(%struct.JPEGState* %7, i8*** %37, i32 %63)
  %65 = icmp eq i32 %64, %63
  br i1 %65, label %66, label %347

66:                                               ; preds = %61
  store i32 0, i32* %35, align 8
  br label %67

67:                                               ; preds = %66, %58
  %68 = phi i32 [ 0, %66 ], [ %59, %58 ]
  %69 = load i32, i32* %38, align 8
  %70 = icmp sgt i32 %69, 0
  br i1 %70, label %71, label %323

71:                                               ; preds = %67
  %72 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %28, align 8
  br label %73

73:                                               ; preds = %71, %314
  %74 = phi i32 [ %69, %71 ], [ %315, %314 ]
  %75 = phi i64 [ 0, %71 ], [ %317, %314 ]
  %76 = phi i32 [ 0, %71 ], [ %316, %314 ]
  %77 = phi %struct.jpeg_component_info* [ %72, %71 ], [ %318, %314 ]
  %78 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %77, i64 0, i32 2
  %79 = load i32, i32* %78, align 8
  %80 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %77, i64 0, i32 3
  %81 = load i32, i32* %80, align 4
  %82 = icmp sgt i32 %81, 0
  br i1 %82, label %83, label %314

83:                                               ; preds = %73
  %84 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %7, i64 0, i32 12, i64 %75
  %85 = sext i32 %79 to i64
  %86 = add i64 %42, %85
  %87 = icmp eq i32 %79, 1
  %88 = icmp sgt i32 %79, 0
  %89 = sext i32 %76 to i64
  %90 = zext i32 %79 to i64
  %91 = add nsw i64 %89, %90
  %92 = and i64 %90, 4294967264
  %93 = add nsw i64 %92, -32
  %94 = lshr exact i64 %93, 5
  %95 = add nuw nsw i64 %94, 1
  %96 = icmp ult i32 %79, 32
  %97 = and i64 %90, 4294967264
  %98 = and i64 %95, 3
  %99 = icmp ult i64 %93, 96
  %100 = sub nsw i64 %95, %98
  %101 = icmp eq i64 %98, 0
  %102 = icmp eq i64 %97, %90
  %103 = and i64 %90, 3
  %104 = icmp eq i64 %103, 0
  br label %105

105:                                              ; preds = %303, %83
  %106 = phi i64 [ %307, %303 ], [ 0, %83 ]
  %107 = phi i64 [ %304, %303 ], [ %89, %83 ]
  %108 = phi i32 [ %305, %303 ], [ 0, %83 ]
  %109 = mul i64 %106, %85
  %110 = add i64 %109, %89
  %111 = add i64 %91, %109
  %112 = load i8**, i8*** %84, align 8
  %113 = load i32, i32* %35, align 8
  %114 = mul nsw i32 %113, %81
  %115 = add nsw i32 %114, %108
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds i8*, i8** %112, i64 %116
  %118 = load i8*, i8** %117, align 8
  %119 = getelementptr inbounds i8, i8* %52, i64 %107
  %120 = add i64 %86, %107
  %121 = icmp slt i64 %51, %120
  br i1 %121, label %308, label %122

122:                                              ; preds = %105
  br i1 %87, label %124, label %123

123:                                              ; preds = %122
  br i1 %43, label %303, label %171

124:                                              ; preds = %122
  br i1 %43, label %303, label %125

125:                                              ; preds = %124
  br i1 %47, label %137, label %126

126:                                              ; preds = %125, %126
  %127 = phi i8* [ %134, %126 ], [ %119, %125 ]
  %128 = phi i32 [ %131, %126 ], [ %31, %125 ]
  %129 = phi i8* [ %132, %126 ], [ %118, %125 ]
  %130 = phi i32 [ %135, %126 ], [ %46, %125 ]
  %131 = add i32 %128, -1
  %132 = getelementptr inbounds i8, i8* %129, i64 1
  %133 = load i8, i8* %129, align 1
  store i8 %133, i8* %127, align 1
  %134 = getelementptr inbounds i8, i8* %127, i64 %39
  %135 = add i32 %130, -1
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %137, label %126, !llvm.loop !2

137:                                              ; preds = %126, %125
  %138 = phi i8* [ %119, %125 ], [ %134, %126 ]
  %139 = phi i32 [ %31, %125 ], [ %131, %126 ]
  %140 = phi i8* [ %118, %125 ], [ %132, %126 ]
  br i1 %48, label %303, label %141

141:                                              ; preds = %137, %141
  %142 = phi i8* [ %169, %141 ], [ %138, %137 ]
  %143 = phi i32 [ %166, %141 ], [ %139, %137 ]
  %144 = phi i8* [ %167, %141 ], [ %140, %137 ]
  %145 = getelementptr inbounds i8, i8* %144, i64 1
  %146 = load i8, i8* %144, align 1
  store i8 %146, i8* %142, align 1
  %147 = getelementptr inbounds i8, i8* %142, i64 %39
  %148 = getelementptr inbounds i8, i8* %144, i64 2
  %149 = load i8, i8* %145, align 1
  store i8 %149, i8* %147, align 1
  %150 = getelementptr inbounds i8, i8* %147, i64 %39
  %151 = getelementptr inbounds i8, i8* %144, i64 3
  %152 = load i8, i8* %148, align 1
  store i8 %152, i8* %150, align 1
  %153 = getelementptr inbounds i8, i8* %150, i64 %39
  %154 = getelementptr inbounds i8, i8* %144, i64 4
  %155 = load i8, i8* %151, align 1
  store i8 %155, i8* %153, align 1
  %156 = getelementptr inbounds i8, i8* %153, i64 %39
  %157 = getelementptr inbounds i8, i8* %144, i64 5
  %158 = load i8, i8* %154, align 1
  store i8 %158, i8* %156, align 1
  %159 = getelementptr inbounds i8, i8* %156, i64 %39
  %160 = getelementptr inbounds i8, i8* %144, i64 6
  %161 = load i8, i8* %157, align 1
  store i8 %161, i8* %159, align 1
  %162 = getelementptr inbounds i8, i8* %159, i64 %39
  %163 = getelementptr inbounds i8, i8* %144, i64 7
  %164 = load i8, i8* %160, align 1
  store i8 %164, i8* %162, align 1
  %165 = getelementptr inbounds i8, i8* %162, i64 %39
  %166 = add i32 %143, -8
  %167 = getelementptr inbounds i8, i8* %144, i64 8
  %168 = load i8, i8* %163, align 1
  store i8 %168, i8* %165, align 1
  %169 = getelementptr inbounds i8, i8* %165, i64 %39
  %170 = icmp eq i32 %166, 0
  br i1 %170, label %303, label %141

171:                                              ; preds = %123, %298
  %172 = phi i64 [ %302, %298 ], [ 0, %123 ]
  %173 = phi i32 [ %181, %298 ], [ %31, %123 ]
  %174 = phi i8* [ %300, %298 ], [ %119, %123 ]
  %175 = phi i8* [ %299, %298 ], [ %118, %123 ]
  %176 = mul i64 %172, %39
  %177 = add i64 %110, %176
  %178 = getelementptr i8, i8* %52, i64 %177
  %179 = add i64 %111, %176
  %180 = getelementptr i8, i8* %52, i64 %179
  %181 = add i32 %173, -1
  br i1 %88, label %182, label %298

182:                                              ; preds = %171
  br i1 %96, label %258, label %183

183:                                              ; preds = %182
  %184 = getelementptr i8, i8* %175, i64 %90
  %185 = icmp ult i8* %178, %184
  %186 = icmp ult i8* %175, %180
  %187 = and i1 %185, %186
  br i1 %187, label %258, label %188

188:                                              ; preds = %183
  %189 = getelementptr i8, i8* %175, i64 %97
  br i1 %99, label %239, label %190

190:                                              ; preds = %188, %190
  %191 = phi i64 [ %236, %190 ], [ 0, %188 ]
  %192 = phi i64 [ %237, %190 ], [ %100, %188 ]
  %193 = getelementptr i8, i8* %175, i64 %191
  %194 = bitcast i8* %193 to <16 x i8>*
  %195 = load <16 x i8>, <16 x i8>* %194, align 1, !alias.scope !4
  %196 = getelementptr i8, i8* %193, i64 16
  %197 = bitcast i8* %196 to <16 x i8>*
  %198 = load <16 x i8>, <16 x i8>* %197, align 1, !alias.scope !4
  %199 = getelementptr inbounds i8, i8* %174, i64 %191
  %200 = bitcast i8* %199 to <16 x i8>*
  store <16 x i8> %195, <16 x i8>* %200, align 1, !alias.scope !7, !noalias !4
  %201 = getelementptr inbounds i8, i8* %199, i64 16
  %202 = bitcast i8* %201 to <16 x i8>*
  store <16 x i8> %198, <16 x i8>* %202, align 1, !alias.scope !7, !noalias !4
  %203 = or i64 %191, 32
  %204 = getelementptr i8, i8* %175, i64 %203
  %205 = bitcast i8* %204 to <16 x i8>*
  %206 = load <16 x i8>, <16 x i8>* %205, align 1, !alias.scope !4
  %207 = getelementptr i8, i8* %204, i64 16
  %208 = bitcast i8* %207 to <16 x i8>*
  %209 = load <16 x i8>, <16 x i8>* %208, align 1, !alias.scope !4
  %210 = getelementptr inbounds i8, i8* %174, i64 %203
  %211 = bitcast i8* %210 to <16 x i8>*
  store <16 x i8> %206, <16 x i8>* %211, align 1, !alias.scope !7, !noalias !4
  %212 = getelementptr inbounds i8, i8* %210, i64 16
  %213 = bitcast i8* %212 to <16 x i8>*
  store <16 x i8> %209, <16 x i8>* %213, align 1, !alias.scope !7, !noalias !4
  %214 = or i64 %191, 64
  %215 = getelementptr i8, i8* %175, i64 %214
  %216 = bitcast i8* %215 to <16 x i8>*
  %217 = load <16 x i8>, <16 x i8>* %216, align 1, !alias.scope !4
  %218 = getelementptr i8, i8* %215, i64 16
  %219 = bitcast i8* %218 to <16 x i8>*
  %220 = load <16 x i8>, <16 x i8>* %219, align 1, !alias.scope !4
  %221 = getelementptr inbounds i8, i8* %174, i64 %214
  %222 = bitcast i8* %221 to <16 x i8>*
  store <16 x i8> %217, <16 x i8>* %222, align 1, !alias.scope !7, !noalias !4
  %223 = getelementptr inbounds i8, i8* %221, i64 16
  %224 = bitcast i8* %223 to <16 x i8>*
  store <16 x i8> %220, <16 x i8>* %224, align 1, !alias.scope !7, !noalias !4
  %225 = or i64 %191, 96
  %226 = getelementptr i8, i8* %175, i64 %225
  %227 = bitcast i8* %226 to <16 x i8>*
  %228 = load <16 x i8>, <16 x i8>* %227, align 1, !alias.scope !4
  %229 = getelementptr i8, i8* %226, i64 16
  %230 = bitcast i8* %229 to <16 x i8>*
  %231 = load <16 x i8>, <16 x i8>* %230, align 1, !alias.scope !4
  %232 = getelementptr inbounds i8, i8* %174, i64 %225
  %233 = bitcast i8* %232 to <16 x i8>*
  store <16 x i8> %228, <16 x i8>* %233, align 1, !alias.scope !7, !noalias !4
  %234 = getelementptr inbounds i8, i8* %232, i64 16
  %235 = bitcast i8* %234 to <16 x i8>*
  store <16 x i8> %231, <16 x i8>* %235, align 1, !alias.scope !7, !noalias !4
  %236 = add i64 %191, 128
  %237 = add i64 %192, -4
  %238 = icmp eq i64 %237, 0
  br i1 %238, label %239, label %190, !llvm.loop !9

239:                                              ; preds = %190, %188
  %240 = phi i64 [ 0, %188 ], [ %236, %190 ]
  br i1 %101, label %257, label %241

241:                                              ; preds = %239, %241
  %242 = phi i64 [ %254, %241 ], [ %240, %239 ]
  %243 = phi i64 [ %255, %241 ], [ %98, %239 ]
  %244 = getelementptr i8, i8* %175, i64 %242
  %245 = bitcast i8* %244 to <16 x i8>*
  %246 = load <16 x i8>, <16 x i8>* %245, align 1, !alias.scope !4
  %247 = getelementptr i8, i8* %244, i64 16
  %248 = bitcast i8* %247 to <16 x i8>*
  %249 = load <16 x i8>, <16 x i8>* %248, align 1, !alias.scope !4
  %250 = getelementptr inbounds i8, i8* %174, i64 %242
  %251 = bitcast i8* %250 to <16 x i8>*
  store <16 x i8> %246, <16 x i8>* %251, align 1, !alias.scope !7, !noalias !4
  %252 = getelementptr inbounds i8, i8* %250, i64 16
  %253 = bitcast i8* %252 to <16 x i8>*
  store <16 x i8> %249, <16 x i8>* %253, align 1, !alias.scope !7, !noalias !4
  %254 = add i64 %242, 32
  %255 = add i64 %243, -1
  %256 = icmp eq i64 %255, 0
  br i1 %256, label %257, label %241, !llvm.loop !11

257:                                              ; preds = %241, %239
  br i1 %102, label %298, label %258

258:                                              ; preds = %257, %183, %182
  %259 = phi i64 [ 0, %183 ], [ 0, %182 ], [ %97, %257 ]
  %260 = phi i8* [ %175, %183 ], [ %175, %182 ], [ %189, %257 ]
  %261 = xor i64 %259, -1
  %262 = add nsw i64 %261, %90
  br i1 %104, label %273, label %263

263:                                              ; preds = %258, %263
  %264 = phi i64 [ %270, %263 ], [ %259, %258 ]
  %265 = phi i8* [ %267, %263 ], [ %260, %258 ]
  %266 = phi i64 [ %271, %263 ], [ %103, %258 ]
  %267 = getelementptr inbounds i8, i8* %265, i64 1
  %268 = load i8, i8* %265, align 1
  %269 = getelementptr inbounds i8, i8* %174, i64 %264
  store i8 %268, i8* %269, align 1
  %270 = add nuw nsw i64 %264, 1
  %271 = add i64 %266, -1
  %272 = icmp eq i64 %271, 0
  br i1 %272, label %273, label %263, !llvm.loop !12

273:                                              ; preds = %263, %258
  %274 = phi i8* [ undef, %258 ], [ %267, %263 ]
  %275 = phi i64 [ %259, %258 ], [ %270, %263 ]
  %276 = phi i8* [ %260, %258 ], [ %267, %263 ]
  %277 = icmp ult i64 %262, 3
  br i1 %277, label %298, label %278

278:                                              ; preds = %273, %278
  %279 = phi i64 [ %296, %278 ], [ %275, %273 ]
  %280 = phi i8* [ %293, %278 ], [ %276, %273 ]
  %281 = getelementptr inbounds i8, i8* %280, i64 1
  %282 = load i8, i8* %280, align 1
  %283 = getelementptr inbounds i8, i8* %174, i64 %279
  store i8 %282, i8* %283, align 1
  %284 = add nuw nsw i64 %279, 1
  %285 = getelementptr inbounds i8, i8* %280, i64 2
  %286 = load i8, i8* %281, align 1
  %287 = getelementptr inbounds i8, i8* %174, i64 %284
  store i8 %286, i8* %287, align 1
  %288 = add nuw nsw i64 %279, 2
  %289 = getelementptr inbounds i8, i8* %280, i64 3
  %290 = load i8, i8* %285, align 1
  %291 = getelementptr inbounds i8, i8* %174, i64 %288
  store i8 %290, i8* %291, align 1
  %292 = add nuw nsw i64 %279, 3
  %293 = getelementptr inbounds i8, i8* %280, i64 4
  %294 = load i8, i8* %289, align 1
  %295 = getelementptr inbounds i8, i8* %174, i64 %292
  store i8 %294, i8* %295, align 1
  %296 = add nuw nsw i64 %279, 4
  %297 = icmp eq i64 %296, %90
  br i1 %297, label %298, label %278, !llvm.loop !13

298:                                              ; preds = %273, %278, %257, %171
  %299 = phi i8* [ %175, %171 ], [ %189, %257 ], [ %274, %273 ], [ %293, %278 ]
  %300 = getelementptr inbounds i8, i8* %174, i64 %39
  %301 = icmp eq i32 %181, 0
  %302 = add i64 %172, 1
  br i1 %301, label %303, label %171

303:                                              ; preds = %298, %137, %141, %123, %124
  %304 = add i64 %107, %85
  %305 = add nuw nsw i32 %108, 1
  %306 = icmp eq i32 %305, %81
  %307 = add i64 %106, 1
  br i1 %306, label %311, label %105

308:                                              ; preds = %105
  %309 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %310 = load i8*, i8** %309, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %310, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.27, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.29, i64 0, i64 0)) #11
  br label %347

311:                                              ; preds = %303
  %312 = trunc i64 %304 to i32
  %313 = load i32, i32* %38, align 8
  br label %314

314:                                              ; preds = %311, %73
  %315 = phi i32 [ %74, %73 ], [ %313, %311 ]
  %316 = phi i32 [ %76, %73 ], [ %312, %311 ]
  %317 = add nuw nsw i64 %75, 1
  %318 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %77, i64 1
  %319 = sext i32 %315 to i64
  %320 = icmp slt i64 %317, %319
  br i1 %320, label %73, label %321

321:                                              ; preds = %314
  %322 = load i32, i32* %35, align 8
  br label %323

323:                                              ; preds = %321, %67
  %324 = phi i32 [ %322, %321 ], [ %68, %67 ]
  %325 = add nsw i32 %324, 1
  store i32 %325, i32* %35, align 8
  %326 = load i16, i16* %44, align 4
  %327 = zext i16 %326 to i32
  %328 = load i32, i32* %13, align 4
  %329 = add i32 %328, %327
  store i32 %329, i32* %13, align 4
  %330 = load i64, i64* %34, align 8
  %331 = getelementptr inbounds i8, i8* %52, i64 %330
  %332 = sub nsw i64 %51, %330
  %333 = load i16, i16* %44, align 4
  %334 = zext i16 %333 to i64
  %335 = sub nsw i64 %53, %334
  %336 = icmp sgt i64 %335, 0
  br i1 %336, label %49, label %337

337:                                              ; preds = %323, %24
  %338 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %7, i64 0, i32 0, i32 0, i32 34
  %339 = load i32, i32* %338, align 8
  %340 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %7, i64 0, i32 0, i32 0, i32 28
  %341 = load i32, i32* %340, align 4
  %342 = icmp ult i32 %339, %341
  br i1 %342, label %347, label %343

343:                                              ; preds = %337
  %344 = tail call fastcc i32 @TIFFjpeg_finish_decompress(%struct.JPEGState* %7)
  %345 = icmp ne i32 %344, 0
  %346 = zext i1 %345 to i32
  br label %347

347:                                              ; preds = %61, %308, %55, %337, %343
  %348 = phi i32 [ 1, %337 ], [ %346, %343 ], [ 0, %55 ], [ 0, %308 ], [ 0, %61 ]
  ret i32 %348
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @TIFFjpeg_start_decompress(%struct.JPEGState*) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 4
  %3 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 0, i32 0, i32 2
  store %struct.jpeg_progress_mgr* %2, %struct.jpeg_progress_mgr** %4, align 8
  %5 = bitcast %struct.jpeg_progress_mgr* %2 to void (%struct.jpeg_common_struct*)**
  store void (%struct.jpeg_common_struct*)* @TIFFjpeg_progress_monitor, void (%struct.jpeg_common_struct*)** %5, align 8
  %6 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 26
  store i32 100, i32* %6, align 4
  %7 = call i8* @getenv(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.30, i64 0, i64 0)) #11
  %8 = icmp eq i8* %7, null
  br i1 %8, label %12, label %9

9:                                                ; preds = %1
  %10 = call i64 @strtol(i8* nocapture nonnull %7, i8** null, i32 10) #11
  %11 = trunc i64 %10 to i32
  store i32 %11, i32* %6, align 4
  br label %12

12:                                               ; preds = %1, %9
  %13 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 3, i64 0
  %14 = call i32 @_setjmp(%struct.__jmp_buf_tag* %13) #12
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %12
  %17 = call i32 @jpeg_start_decompress(%struct.jpeg_decompress_struct* %3) #11
  br label %18

18:                                               ; preds = %12, %16
  %19 = phi i32 [ 1, %16 ], [ 0, %12 ]
  ret i32 %19
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @TIFFjpeg_read_raw_data(%struct.JPEGState*, i8***, i32) unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 3, i64 0
  %5 = call i32 @_setjmp(%struct.__jmp_buf_tag* %4) #12
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 0, i32 0
  %9 = call i32 @jpeg_read_raw_data(%struct.jpeg_decompress_struct* %8, i8*** %1, i32 %2) #11
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi i32 [ %9, %7 ], [ -1, %3 ]
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @TIFFjpeg_finish_decompress(%struct.JPEGState*) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 3, i64 0
  %3 = call i32 @_setjmp(%struct.__jmp_buf_tag* %2) #12
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 0, i32 0
  %7 = call i32 @jpeg_finish_decompress(%struct.jpeg_decompress_struct* %6) #11
  br label %8

8:                                                ; preds = %1, %5
  %9 = phi i32 [ %7, %5 ], [ -1, %1 ]
  ret i32 %9
}

declare i32 @jpeg_read_raw_data(%struct.jpeg_decompress_struct*, i8***, i32) local_unnamed_addr #2

declare i32 @jpeg_finish_decompress(%struct.jpeg_decompress_struct*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @TIFFjpeg_progress_monitor(%struct.jpeg_common_struct*) #0 {
  %2 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 4
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %20, label %5

5:                                                ; preds = %1
  %6 = bitcast %struct.jpeg_common_struct* %0 to %struct.jpeg_decompress_struct*
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %6, i64 0, i32 35
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 32, i32 5
  %10 = load i32, i32* %9, align 4
  %11 = icmp slt i32 %8, %10
  br i1 %11, label %20, label %12

12:                                               ; preds = %5
  %13 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 28, i32 2
  %14 = bitcast %struct.jpeg_progress_mgr** %13 to %struct.tiff**
  %15 = load %struct.tiff*, %struct.tiff** %14, align 8
  %16 = getelementptr inbounds %struct.tiff, %struct.tiff* %15, i64 0, i32 55
  %17 = load i8*, i8** %16, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %17, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31, i64 0, i64 0), i8* getelementptr inbounds ([139 x i8], [139 x i8]* @.str.32, i64 0, i64 0), i32 %8, i32 %10) #11
  tail call void @jpeg_abort(%struct.jpeg_common_struct* %0) #11
  %18 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 20, i32 1
  %19 = bitcast %struct.jpeg_memory_mgr** %18 to %struct.__jmp_buf_tag*
  tail call void @longjmp(%struct.__jmp_buf_tag* %19, i32 1) #13
  unreachable

20:                                               ; preds = %5, %1
  ret void
}

declare i32 @jpeg_start_decompress(%struct.jpeg_decompress_struct*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare i64 @strtol(i8* readonly, i8** nocapture, i32) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define internal fastcc i8** @TIFFjpeg_alloc_sarray(%struct.JPEGState*, i32, i32) unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 3, i64 0
  %5 = call i32 @_setjmp(%struct.__jmp_buf_tag* %4) #12
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %14

7:                                                ; preds = %3
  %8 = bitcast %struct.JPEGState* %0 to %struct.jpeg_common_struct*
  %9 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 0, i32 0, i32 1
  %10 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %9, align 8
  %11 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %10, i64 0, i32 2
  %12 = load i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)** %11, align 8
  %13 = call i8** %12(%struct.jpeg_common_struct* %8, i32 1, i32 %1, i32 %2) #11
  br label %14

14:                                               ; preds = %3, %7
  %15 = phi i8** [ %13, %7 ], [ null, %3 ]
  ret i8** %15
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @TIFFjpeg_read_scanlines(%struct.JPEGState*, i8**) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 3, i64 0
  %4 = call i32 @_setjmp(%struct.__jmp_buf_tag* %3) #12
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 0, i32 0
  %8 = call i32 @jpeg_read_scanlines(%struct.jpeg_decompress_struct* %7, i8** %1, i32 1) #11
  br label %9

9:                                                ; preds = %2, %6
  %10 = phi i32 [ %8, %6 ], [ -1, %2 ]
  ret i32 %10
}

declare i32 @jpeg_read_scanlines(%struct.jpeg_decompress_struct*, i8**, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @TIFFjpeg_set_defaults(%struct.JPEGState*) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 3, i64 0
  %3 = call i32 @_setjmp(%struct.__jmp_buf_tag* %2) #12
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %7

5:                                                ; preds = %1
  %6 = bitcast %struct.JPEGState* %0 to %struct.jpeg_compress_struct*
  call void @jpeg_set_defaults(%struct.jpeg_compress_struct* %6) #11
  br label %7

7:                                                ; preds = %1, %5
  %8 = phi i32 [ 1, %5 ], [ 0, %1 ]
  ret i32 %8
}

declare i32 @TIFFGetField(%struct.tiff*, i32, ...) local_unnamed_addr #2

declare i32 @TIFFSetField(%struct.tiff*, i32, ...) local_unnamed_addr #2

declare void @jpeg_set_defaults(%struct.jpeg_compress_struct*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @TIFFjpeg_set_quality(%struct.JPEGState*, i32) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 3, i64 0
  %4 = call i32 @_setjmp(%struct.__jmp_buf_tag* %3) #12
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %8

6:                                                ; preds = %2
  %7 = bitcast %struct.JPEGState* %0 to %struct.jpeg_compress_struct*
  call void @jpeg_set_quality(%struct.jpeg_compress_struct* %7, i32 %1, i32 0) #11
  br label %8

8:                                                ; preds = %2, %6
  %9 = phi i32 [ 1, %6 ], [ 0, %2 ]
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @TIFFjpeg_suppress_tables(%struct.JPEGState*) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 3, i64 0
  %3 = call i32 @_setjmp(%struct.__jmp_buf_tag* %2) #12
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %7

5:                                                ; preds = %1
  %6 = bitcast %struct.JPEGState* %0 to %struct.jpeg_compress_struct*
  call void @jpeg_suppress_tables(%struct.jpeg_compress_struct* %6, i32 1) #11
  br label %7

7:                                                ; preds = %1, %5
  %8 = phi i32 [ 1, %5 ], [ 0, %1 ]
  ret i32 %8
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @TIFFjpeg_write_tables(%struct.JPEGState*) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 3, i64 0
  %3 = call i32 @_setjmp(%struct.__jmp_buf_tag* %2) #12
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %7

5:                                                ; preds = %1
  %6 = bitcast %struct.JPEGState* %0 to %struct.jpeg_compress_struct*
  call void @jpeg_write_tables(%struct.jpeg_compress_struct* %6) #11
  br label %7

7:                                                ; preds = %1, %5
  %8 = phi i32 [ 1, %5 ], [ 0, %1 ]
  ret i32 %8
}

declare void @jpeg_set_quality(%struct.jpeg_compress_struct*, i32, i32) local_unnamed_addr #2

declare void @jpeg_suppress_tables(%struct.jpeg_compress_struct*, i32) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @tables_init_destination(%struct.jpeg_compress_struct* nocapture) #6 {
  %2 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 2, i32 23
  %3 = bitcast %struct.jpeg_scan_info** %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 2
  %6 = bitcast %struct.jpeg_compress_struct* %5 to i64*
  store i64 %4, i64* %6, align 8
  %7 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 2, i32 24
  %8 = load i32, i32* %7, align 8
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 2, i32 1
  %11 = bitcast %struct.jpeg_memory_mgr** %10 to i64*
  store i64 %9, i64* %11, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @tables_empty_output_buffer(%struct.jpeg_compress_struct*) #0 {
  %2 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 2, i32 23
  %3 = bitcast %struct.jpeg_scan_info** %2 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 2, i32 24
  %6 = load i32, i32* %5, align 8
  %7 = add i32 %6, 1000
  %8 = zext i32 %7 to i64
  %9 = tail call i8* @_TIFFrealloc(i8* %4, i64 %8) #11
  %10 = icmp eq i8* %9, null
  br i1 %10, label %11, label %21

11:                                               ; preds = %1
  %12 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %13 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %12, align 8
  %14 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %13, i64 0, i32 5
  store i32 54, i32* %14, align 8
  %15 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %12, align 8
  %16 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %15, i64 0, i32 6, i32 0, i64 0
  store i32 100, i32* %16, align 4
  %17 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %12, align 8
  %18 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %17, i64 0, i32 0
  %19 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %18, align 8
  %20 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %19(%struct.jpeg_common_struct* %20) #11
  br label %21

21:                                               ; preds = %11, %1
  %22 = load i32, i32* %5, align 8
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds i8, i8* %9, i64 %23
  %25 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 2
  %26 = bitcast %struct.jpeg_compress_struct* %25 to i8**
  store i8* %24, i8** %26, align 8
  %27 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 2, i32 1
  %28 = bitcast %struct.jpeg_memory_mgr** %27 to i64*
  store i64 1000, i64* %28, align 8
  store i8* %9, i8** %3, align 8
  %29 = add i32 %22, 1000
  store i32 %29, i32* %5, align 8
  ret i32 1
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @tables_term_destination(%struct.jpeg_compress_struct* nocapture) #6 {
  %2 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 2, i32 1
  %3 = bitcast %struct.jpeg_memory_mgr** %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = trunc i64 %4 to i32
  %6 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 2, i32 24
  %7 = load i32, i32* %6, align 8
  %8 = sub i32 %7, %5
  store i32 %8, i32* %6, align 8
  ret void
}

declare i8* @_TIFFrealloc(i8*, i64) local_unnamed_addr #2

declare void @jpeg_write_tables(%struct.jpeg_compress_struct*) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @std_init_destination(%struct.jpeg_compress_struct* nocapture) #6 {
  %2 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 2, i32 16
  %3 = bitcast [4 x %struct.JQUANT_TBL*]* %2 to %struct.tiff**
  %4 = load %struct.tiff*, %struct.tiff** %3, align 8
  %5 = getelementptr inbounds %struct.tiff, %struct.tiff* %4, i64 0, i32 45
  %6 = bitcast i8** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 2
  %9 = bitcast %struct.jpeg_compress_struct* %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = getelementptr inbounds %struct.tiff, %struct.tiff* %4, i64 0, i32 46
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 2, i32 1
  %13 = bitcast %struct.jpeg_memory_mgr** %12 to i64*
  store i64 %11, i64* %13, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @std_empty_output_buffer(%struct.jpeg_compress_struct* nocapture) #0 {
  %2 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 2, i32 16
  %3 = bitcast [4 x %struct.JQUANT_TBL*]* %2 to %struct.tiff**
  %4 = load %struct.tiff*, %struct.tiff** %3, align 8
  %5 = getelementptr inbounds %struct.tiff, %struct.tiff* %4, i64 0, i32 46
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %struct.tiff, %struct.tiff* %4, i64 0, i32 50
  store i64 %6, i64* %7, align 8
  %8 = tail call i32 @TIFFFlushData1(%struct.tiff* %4) #11
  %9 = getelementptr inbounds %struct.tiff, %struct.tiff* %4, i64 0, i32 45
  %10 = bitcast i8** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 2
  %13 = bitcast %struct.jpeg_compress_struct* %12 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %5, align 8
  %15 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 2, i32 1
  %16 = bitcast %struct.jpeg_memory_mgr** %15 to i64*
  store i64 %14, i64* %16, align 8
  ret i32 1
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @std_term_destination(%struct.jpeg_compress_struct* nocapture readonly) #6 {
  %2 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 2, i32 16
  %3 = bitcast [4 x %struct.JQUANT_TBL*]* %2 to %struct.tiff**
  %4 = load %struct.tiff*, %struct.tiff** %3, align 8
  %5 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 2
  %6 = bitcast %struct.jpeg_compress_struct* %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.tiff, %struct.tiff* %4, i64 0, i32 49
  %9 = bitcast i8** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = getelementptr inbounds %struct.tiff, %struct.tiff* %4, i64 0, i32 46
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 2, i32 1
  %13 = bitcast %struct.jpeg_memory_mgr** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub nsw i64 %11, %14
  %16 = getelementptr inbounds %struct.tiff, %struct.tiff* %4, i64 0, i32 50
  store i64 %15, i64* %16, align 8
  ret void
}

declare i32 @TIFFFlushData1(%struct.tiff*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @TIFFjpeg_set_colorspace(%struct.JPEGState*, i32) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 3, i64 0
  %4 = call i32 @_setjmp(%struct.__jmp_buf_tag* %3) #12
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %8

6:                                                ; preds = %2
  %7 = bitcast %struct.JPEGState* %0 to %struct.jpeg_compress_struct*
  call void @jpeg_set_colorspace(%struct.jpeg_compress_struct* %7, i32 %1) #11
  br label %8

8:                                                ; preds = %2, %6
  %9 = phi i32 [ 1, %6 ], [ 0, %2 ]
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @JPEGEncodeRaw(%struct.tiff* nocapture, i8* nocapture readonly, i64, i16 zeroext) #0 {
  %5 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %6 = bitcast i8** %5 to %struct.JPEGState**
  %7 = load %struct.JPEGState*, %struct.JPEGState** %6, align 8
  %8 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %7, i64 0, i32 14
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %struct.JPEGState* %7 to %struct.jpeg_compress_struct*
  %11 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %7, i64 0, i32 0, i32 0, i32 7
  %12 = load i32, i32* %11, align 8
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %7, i64 0, i32 9
  %15 = load i16, i16* %14, align 2
  %16 = zext i16 %15 to i64
  %17 = add nsw i64 %13, -1
  %18 = add nsw i64 %17, %16
  %19 = sdiv i64 %18, %16
  %20 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %7, i64 0, i32 10
  %21 = load i16, i16* %20, align 4
  %22 = zext i16 %21 to i64
  %23 = mul nuw nsw i64 %22, %16
  %24 = add nuw nsw i64 %23, 2
  %25 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %7, i64 0, i32 0, i32 0, i32 13
  %26 = load i32, i32* %25, align 8
  %27 = sext i32 %26 to i64
  %28 = mul i64 %19, %27
  %29 = mul i64 %28, %24
  %30 = add nsw i64 %29, 7
  %31 = sdiv i64 %30, 8
  %32 = sdiv i64 %2, %31
  %33 = mul nsw i64 %32, %22
  %34 = srem i64 %2, %31
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %41, label %36

36:                                               ; preds = %4
  %37 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %38 = load i8*, i8** %37, align 8
  %39 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 0
  %40 = load i8*, i8** %39, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFWarningExt(i8* %38, i8* %40, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.44, i64 0, i64 0)) #11
  br label %41

41:                                               ; preds = %4, %36
  %42 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %7, i64 0, i32 0, i32 0, i32 15
  %43 = bitcast i32* %42 to %struct.jpeg_component_info**
  %44 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %43, align 8
  %45 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %44, i64 1, i32 10
  %46 = load i32, i32* %45, align 8
  %47 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %7, i64 0, i32 0, i32 0, i32 46
  %48 = icmp sgt i64 %33, 0
  br i1 %48, label %49, label %388

49:                                               ; preds = %41
  %50 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %10, i64 0, i32 13
  %51 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %7, i64 0, i32 13
  %52 = icmp eq i32 %46, 0
  %53 = sext i32 %9 to i64
  %54 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %7, i64 0, i32 12, i64 0
  %55 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 13
  %56 = add i32 %46, -1
  %57 = and i32 %46, 7
  %58 = icmp eq i32 %57, 0
  %59 = icmp ult i32 %56, 7
  br label %60

60:                                               ; preds = %384, %49
  %61 = phi i64 [ %387, %384 ], [ 0, %49 ]
  %62 = phi %struct.jpeg_component_info* [ %386, %384 ], [ %44, %49 ]
  %63 = phi i64 [ %382, %384 ], [ %33, %49 ]
  %64 = phi i8* [ %385, %384 ], [ %1, %49 ]
  %65 = mul i64 %31, %61
  %66 = load i32, i32* %50, align 4
  %67 = icmp sgt i32 %66, 0
  br i1 %67, label %68, label %365

68:                                               ; preds = %60, %358
  %69 = phi i32 [ %359, %358 ], [ %66, %60 ]
  %70 = phi i64 [ %361, %358 ], [ 0, %60 ]
  %71 = phi %struct.jpeg_component_info* [ %362, %358 ], [ %62, %60 ]
  %72 = phi i32 [ %360, %358 ], [ 0, %60 ]
  %73 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %71, i64 0, i32 2
  %74 = load i32, i32* %73, align 8
  %75 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %71, i64 0, i32 3
  %76 = load i32, i32* %75, align 4
  %77 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %71, i64 0, i32 7
  %78 = load i32, i32* %77, align 4
  %79 = shl i32 %78, 3
  %80 = mul i32 %74, %46
  %81 = sub i32 %79, %80
  %82 = icmp sgt i32 %76, 0
  br i1 %82, label %83, label %358

83:                                               ; preds = %68
  %84 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %7, i64 0, i32 12, i64 %70
  %85 = icmp eq i32 %74, 1
  %86 = icmp sgt i32 %74, 0
  %87 = icmp sgt i32 %81, 0
  %88 = sext i32 %72 to i64
  %89 = sext i32 %74 to i64
  %90 = zext i32 %74 to i64
  %91 = add i64 %65, %88
  %92 = add i64 %91, %90
  %93 = and i64 %90, 4294967264
  %94 = add nsw i64 %93, -32
  %95 = lshr exact i64 %94, 5
  %96 = add nuw nsw i64 %95, 1
  %97 = xor i32 %80, -1
  %98 = add i32 %79, %97
  %99 = icmp ult i32 %74, 32
  %100 = and i64 %90, 4294967264
  %101 = and i64 %96, 3
  %102 = icmp ult i64 %94, 96
  %103 = sub nsw i64 %96, %101
  %104 = icmp eq i64 %101, 0
  %105 = icmp eq i64 %100, %90
  %106 = and i64 %90, 7
  %107 = icmp eq i64 %106, 0
  %108 = and i32 %81, 7
  %109 = icmp ult i32 %98, 7
  %110 = sub i32 %81, %108
  %111 = icmp eq i32 %108, 0
  br label %112

112:                                              ; preds = %350, %83
  %113 = phi i64 [ %354, %350 ], [ 0, %83 ]
  %114 = phi i64 [ %351, %350 ], [ %88, %83 ]
  %115 = phi i32 [ %352, %350 ], [ 0, %83 ]
  %116 = mul i64 %113, %89
  %117 = add i64 %91, %116
  %118 = add i64 %92, %116
  %119 = getelementptr inbounds i8, i8* %64, i64 %114
  %120 = load i8**, i8*** %84, align 8
  %121 = load i32, i32* %51, align 8
  %122 = mul nsw i32 %121, %76
  %123 = add nsw i32 %122, %115
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds i8*, i8** %120, i64 %124
  %126 = load i8*, i8** %125, align 8
  br i1 %85, label %128, label %127

127:                                              ; preds = %112
  br i1 %52, label %324, label %176

128:                                              ; preds = %112
  br i1 %52, label %324, label %129

129:                                              ; preds = %128
  br i1 %58, label %141, label %130

130:                                              ; preds = %129, %130
  %131 = phi i32 [ %135, %130 ], [ %46, %129 ]
  %132 = phi i8* [ %137, %130 ], [ %126, %129 ]
  %133 = phi i8* [ %138, %130 ], [ %119, %129 ]
  %134 = phi i32 [ %139, %130 ], [ %57, %129 ]
  %135 = add i32 %131, -1
  %136 = load i8, i8* %133, align 1
  %137 = getelementptr inbounds i8, i8* %132, i64 1
  store i8 %136, i8* %132, align 1
  %138 = getelementptr inbounds i8, i8* %133, i64 %53
  %139 = add i32 %134, -1
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %141, label %130, !llvm.loop !14

141:                                              ; preds = %130, %129
  %142 = phi i8* [ undef, %129 ], [ %137, %130 ]
  %143 = phi i32 [ %46, %129 ], [ %135, %130 ]
  %144 = phi i8* [ %126, %129 ], [ %137, %130 ]
  %145 = phi i8* [ %119, %129 ], [ %138, %130 ]
  br i1 %59, label %324, label %146

146:                                              ; preds = %141, %146
  %147 = phi i32 [ %171, %146 ], [ %143, %141 ]
  %148 = phi i8* [ %173, %146 ], [ %144, %141 ]
  %149 = phi i8* [ %174, %146 ], [ %145, %141 ]
  %150 = load i8, i8* %149, align 1
  %151 = getelementptr inbounds i8, i8* %148, i64 1
  store i8 %150, i8* %148, align 1
  %152 = getelementptr inbounds i8, i8* %149, i64 %53
  %153 = load i8, i8* %152, align 1
  %154 = getelementptr inbounds i8, i8* %148, i64 2
  store i8 %153, i8* %151, align 1
  %155 = getelementptr inbounds i8, i8* %152, i64 %53
  %156 = load i8, i8* %155, align 1
  %157 = getelementptr inbounds i8, i8* %148, i64 3
  store i8 %156, i8* %154, align 1
  %158 = getelementptr inbounds i8, i8* %155, i64 %53
  %159 = load i8, i8* %158, align 1
  %160 = getelementptr inbounds i8, i8* %148, i64 4
  store i8 %159, i8* %157, align 1
  %161 = getelementptr inbounds i8, i8* %158, i64 %53
  %162 = load i8, i8* %161, align 1
  %163 = getelementptr inbounds i8, i8* %148, i64 5
  store i8 %162, i8* %160, align 1
  %164 = getelementptr inbounds i8, i8* %161, i64 %53
  %165 = load i8, i8* %164, align 1
  %166 = getelementptr inbounds i8, i8* %148, i64 6
  store i8 %165, i8* %163, align 1
  %167 = getelementptr inbounds i8, i8* %164, i64 %53
  %168 = load i8, i8* %167, align 1
  %169 = getelementptr inbounds i8, i8* %148, i64 7
  store i8 %168, i8* %166, align 1
  %170 = getelementptr inbounds i8, i8* %167, i64 %53
  %171 = add i32 %147, -8
  %172 = load i8, i8* %170, align 1
  %173 = getelementptr inbounds i8, i8* %148, i64 8
  store i8 %172, i8* %169, align 1
  %174 = getelementptr inbounds i8, i8* %170, i64 %53
  %175 = icmp eq i32 %171, 0
  br i1 %175, label %324, label %146

176:                                              ; preds = %127, %319
  %177 = phi i64 [ %323, %319 ], [ 0, %127 ]
  %178 = phi i32 [ %186, %319 ], [ %46, %127 ]
  %179 = phi i8* [ %320, %319 ], [ %126, %127 ]
  %180 = phi i8* [ %321, %319 ], [ %119, %127 ]
  %181 = mul i64 %177, %53
  %182 = add i64 %117, %181
  %183 = getelementptr i8, i8* %1, i64 %182
  %184 = add i64 %118, %181
  %185 = getelementptr i8, i8* %1, i64 %184
  %186 = add i32 %178, -1
  br i1 %86, label %187, label %319

187:                                              ; preds = %176
  br i1 %99, label %263, label %188

188:                                              ; preds = %187
  %189 = getelementptr i8, i8* %179, i64 %90
  %190 = icmp ult i8* %179, %185
  %191 = icmp ult i8* %183, %189
  %192 = and i1 %190, %191
  br i1 %192, label %263, label %193

193:                                              ; preds = %188
  %194 = getelementptr i8, i8* %179, i64 %100
  br i1 %102, label %244, label %195

195:                                              ; preds = %193, %195
  %196 = phi i64 [ %241, %195 ], [ 0, %193 ]
  %197 = phi i64 [ %242, %195 ], [ %103, %193 ]
  %198 = getelementptr i8, i8* %179, i64 %196
  %199 = getelementptr inbounds i8, i8* %180, i64 %196
  %200 = bitcast i8* %199 to <16 x i8>*
  %201 = load <16 x i8>, <16 x i8>* %200, align 1, !alias.scope !15
  %202 = getelementptr inbounds i8, i8* %199, i64 16
  %203 = bitcast i8* %202 to <16 x i8>*
  %204 = load <16 x i8>, <16 x i8>* %203, align 1, !alias.scope !15
  %205 = bitcast i8* %198 to <16 x i8>*
  store <16 x i8> %201, <16 x i8>* %205, align 1, !alias.scope !18, !noalias !15
  %206 = getelementptr i8, i8* %198, i64 16
  %207 = bitcast i8* %206 to <16 x i8>*
  store <16 x i8> %204, <16 x i8>* %207, align 1, !alias.scope !18, !noalias !15
  %208 = or i64 %196, 32
  %209 = getelementptr i8, i8* %179, i64 %208
  %210 = getelementptr inbounds i8, i8* %180, i64 %208
  %211 = bitcast i8* %210 to <16 x i8>*
  %212 = load <16 x i8>, <16 x i8>* %211, align 1, !alias.scope !15
  %213 = getelementptr inbounds i8, i8* %210, i64 16
  %214 = bitcast i8* %213 to <16 x i8>*
  %215 = load <16 x i8>, <16 x i8>* %214, align 1, !alias.scope !15
  %216 = bitcast i8* %209 to <16 x i8>*
  store <16 x i8> %212, <16 x i8>* %216, align 1, !alias.scope !18, !noalias !15
  %217 = getelementptr i8, i8* %209, i64 16
  %218 = bitcast i8* %217 to <16 x i8>*
  store <16 x i8> %215, <16 x i8>* %218, align 1, !alias.scope !18, !noalias !15
  %219 = or i64 %196, 64
  %220 = getelementptr i8, i8* %179, i64 %219
  %221 = getelementptr inbounds i8, i8* %180, i64 %219
  %222 = bitcast i8* %221 to <16 x i8>*
  %223 = load <16 x i8>, <16 x i8>* %222, align 1, !alias.scope !15
  %224 = getelementptr inbounds i8, i8* %221, i64 16
  %225 = bitcast i8* %224 to <16 x i8>*
  %226 = load <16 x i8>, <16 x i8>* %225, align 1, !alias.scope !15
  %227 = bitcast i8* %220 to <16 x i8>*
  store <16 x i8> %223, <16 x i8>* %227, align 1, !alias.scope !18, !noalias !15
  %228 = getelementptr i8, i8* %220, i64 16
  %229 = bitcast i8* %228 to <16 x i8>*
  store <16 x i8> %226, <16 x i8>* %229, align 1, !alias.scope !18, !noalias !15
  %230 = or i64 %196, 96
  %231 = getelementptr i8, i8* %179, i64 %230
  %232 = getelementptr inbounds i8, i8* %180, i64 %230
  %233 = bitcast i8* %232 to <16 x i8>*
  %234 = load <16 x i8>, <16 x i8>* %233, align 1, !alias.scope !15
  %235 = getelementptr inbounds i8, i8* %232, i64 16
  %236 = bitcast i8* %235 to <16 x i8>*
  %237 = load <16 x i8>, <16 x i8>* %236, align 1, !alias.scope !15
  %238 = bitcast i8* %231 to <16 x i8>*
  store <16 x i8> %234, <16 x i8>* %238, align 1, !alias.scope !18, !noalias !15
  %239 = getelementptr i8, i8* %231, i64 16
  %240 = bitcast i8* %239 to <16 x i8>*
  store <16 x i8> %237, <16 x i8>* %240, align 1, !alias.scope !18, !noalias !15
  %241 = add i64 %196, 128
  %242 = add i64 %197, -4
  %243 = icmp eq i64 %242, 0
  br i1 %243, label %244, label %195, !llvm.loop !20

244:                                              ; preds = %195, %193
  %245 = phi i64 [ 0, %193 ], [ %241, %195 ]
  br i1 %104, label %262, label %246

246:                                              ; preds = %244, %246
  %247 = phi i64 [ %259, %246 ], [ %245, %244 ]
  %248 = phi i64 [ %260, %246 ], [ %101, %244 ]
  %249 = getelementptr i8, i8* %179, i64 %247
  %250 = getelementptr inbounds i8, i8* %180, i64 %247
  %251 = bitcast i8* %250 to <16 x i8>*
  %252 = load <16 x i8>, <16 x i8>* %251, align 1, !alias.scope !15
  %253 = getelementptr inbounds i8, i8* %250, i64 16
  %254 = bitcast i8* %253 to <16 x i8>*
  %255 = load <16 x i8>, <16 x i8>* %254, align 1, !alias.scope !15
  %256 = bitcast i8* %249 to <16 x i8>*
  store <16 x i8> %252, <16 x i8>* %256, align 1, !alias.scope !18, !noalias !15
  %257 = getelementptr i8, i8* %249, i64 16
  %258 = bitcast i8* %257 to <16 x i8>*
  store <16 x i8> %255, <16 x i8>* %258, align 1, !alias.scope !18, !noalias !15
  %259 = add i64 %247, 32
  %260 = add i64 %248, -1
  %261 = icmp eq i64 %260, 0
  br i1 %261, label %262, label %246, !llvm.loop !21

262:                                              ; preds = %246, %244
  br i1 %105, label %319, label %263

263:                                              ; preds = %262, %188, %187
  %264 = phi i64 [ 0, %188 ], [ 0, %187 ], [ %100, %262 ]
  %265 = phi i8* [ %179, %188 ], [ %179, %187 ], [ %194, %262 ]
  %266 = xor i64 %264, -1
  %267 = add nsw i64 %266, %90
  br i1 %107, label %278, label %268

268:                                              ; preds = %263, %268
  %269 = phi i64 [ %275, %268 ], [ %264, %263 ]
  %270 = phi i8* [ %274, %268 ], [ %265, %263 ]
  %271 = phi i64 [ %276, %268 ], [ %106, %263 ]
  %272 = getelementptr inbounds i8, i8* %180, i64 %269
  %273 = load i8, i8* %272, align 1
  %274 = getelementptr inbounds i8, i8* %270, i64 1
  store i8 %273, i8* %270, align 1
  %275 = add nuw nsw i64 %269, 1
  %276 = add i64 %271, -1
  %277 = icmp eq i64 %276, 0
  br i1 %277, label %278, label %268, !llvm.loop !22

278:                                              ; preds = %268, %263
  %279 = phi i8* [ undef, %263 ], [ %274, %268 ]
  %280 = phi i64 [ %264, %263 ], [ %275, %268 ]
  %281 = phi i8* [ %265, %263 ], [ %274, %268 ]
  %282 = icmp ult i64 %267, 7
  br i1 %282, label %319, label %283

283:                                              ; preds = %278, %283
  %284 = phi i64 [ %317, %283 ], [ %280, %278 ]
  %285 = phi i8* [ %316, %283 ], [ %281, %278 ]
  %286 = getelementptr inbounds i8, i8* %180, i64 %284
  %287 = load i8, i8* %286, align 1
  %288 = getelementptr inbounds i8, i8* %285, i64 1
  store i8 %287, i8* %285, align 1
  %289 = add nuw nsw i64 %284, 1
  %290 = getelementptr inbounds i8, i8* %180, i64 %289
  %291 = load i8, i8* %290, align 1
  %292 = getelementptr inbounds i8, i8* %285, i64 2
  store i8 %291, i8* %288, align 1
  %293 = add nuw nsw i64 %284, 2
  %294 = getelementptr inbounds i8, i8* %180, i64 %293
  %295 = load i8, i8* %294, align 1
  %296 = getelementptr inbounds i8, i8* %285, i64 3
  store i8 %295, i8* %292, align 1
  %297 = add nuw nsw i64 %284, 3
  %298 = getelementptr inbounds i8, i8* %180, i64 %297
  %299 = load i8, i8* %298, align 1
  %300 = getelementptr inbounds i8, i8* %285, i64 4
  store i8 %299, i8* %296, align 1
  %301 = add nuw nsw i64 %284, 4
  %302 = getelementptr inbounds i8, i8* %180, i64 %301
  %303 = load i8, i8* %302, align 1
  %304 = getelementptr inbounds i8, i8* %285, i64 5
  store i8 %303, i8* %300, align 1
  %305 = add nuw nsw i64 %284, 5
  %306 = getelementptr inbounds i8, i8* %180, i64 %305
  %307 = load i8, i8* %306, align 1
  %308 = getelementptr inbounds i8, i8* %285, i64 6
  store i8 %307, i8* %304, align 1
  %309 = add nuw nsw i64 %284, 6
  %310 = getelementptr inbounds i8, i8* %180, i64 %309
  %311 = load i8, i8* %310, align 1
  %312 = getelementptr inbounds i8, i8* %285, i64 7
  store i8 %311, i8* %308, align 1
  %313 = add nuw nsw i64 %284, 7
  %314 = getelementptr inbounds i8, i8* %180, i64 %313
  %315 = load i8, i8* %314, align 1
  %316 = getelementptr inbounds i8, i8* %285, i64 8
  store i8 %315, i8* %312, align 1
  %317 = add nuw nsw i64 %284, 8
  %318 = icmp eq i64 %317, %90
  br i1 %318, label %319, label %283, !llvm.loop !23

319:                                              ; preds = %278, %283, %262, %176
  %320 = phi i8* [ %179, %176 ], [ %194, %262 ], [ %279, %278 ], [ %316, %283 ]
  %321 = getelementptr inbounds i8, i8* %180, i64 %53
  %322 = icmp eq i32 %186, 0
  %323 = add i64 %177, 1
  br i1 %322, label %324, label %176

324:                                              ; preds = %319, %141, %146, %127, %128
  %325 = phi i8* [ %126, %128 ], [ %126, %127 ], [ %142, %141 ], [ %173, %146 ], [ %320, %319 ]
  br i1 %87, label %326, label %350

326:                                              ; preds = %324
  %327 = getelementptr i8, i8* %325, i64 -1
  %328 = load i8, i8* %327, align 1
  br i1 %109, label %342, label %329

329:                                              ; preds = %326, %329
  %330 = phi i8* [ %339, %329 ], [ %325, %326 ]
  %331 = phi i32 [ %340, %329 ], [ %110, %326 ]
  store i8 %328, i8* %330, align 1
  %332 = getelementptr inbounds i8, i8* %330, i64 1
  store i8 %328, i8* %332, align 1
  %333 = getelementptr inbounds i8, i8* %330, i64 2
  store i8 %328, i8* %333, align 1
  %334 = getelementptr inbounds i8, i8* %330, i64 3
  store i8 %328, i8* %334, align 1
  %335 = getelementptr inbounds i8, i8* %330, i64 4
  store i8 %328, i8* %335, align 1
  %336 = getelementptr inbounds i8, i8* %330, i64 5
  store i8 %328, i8* %336, align 1
  %337 = getelementptr inbounds i8, i8* %330, i64 6
  store i8 %328, i8* %337, align 1
  %338 = getelementptr inbounds i8, i8* %330, i64 7
  store i8 %328, i8* %338, align 1
  %339 = getelementptr inbounds i8, i8* %330, i64 8
  %340 = add i32 %331, -8
  %341 = icmp eq i32 %340, 0
  br i1 %341, label %342, label %329

342:                                              ; preds = %329, %326
  %343 = phi i8* [ %325, %326 ], [ %339, %329 ]
  br i1 %111, label %350, label %344

344:                                              ; preds = %342, %344
  %345 = phi i8* [ %347, %344 ], [ %343, %342 ]
  %346 = phi i32 [ %348, %344 ], [ %108, %342 ]
  store i8 %328, i8* %345, align 1
  %347 = getelementptr inbounds i8, i8* %345, i64 1
  %348 = add i32 %346, -1
  %349 = icmp eq i32 %348, 0
  br i1 %349, label %350, label %344, !llvm.loop !24

350:                                              ; preds = %342, %344, %324
  %351 = add i64 %114, %89
  %352 = add nuw nsw i32 %115, 1
  %353 = icmp eq i32 %352, %76
  %354 = add i64 %113, 1
  br i1 %353, label %355, label %112

355:                                              ; preds = %350
  %356 = trunc i64 %351 to i32
  %357 = load i32, i32* %50, align 4
  br label %358

358:                                              ; preds = %355, %68
  %359 = phi i32 [ %69, %68 ], [ %357, %355 ]
  %360 = phi i32 [ %72, %68 ], [ %356, %355 ]
  %361 = add nuw nsw i64 %70, 1
  %362 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %71, i64 1
  %363 = sext i32 %359 to i64
  %364 = icmp slt i64 %361, %363
  br i1 %364, label %68, label %365

365:                                              ; preds = %358, %60
  %366 = load i32, i32* %51, align 8
  %367 = add nsw i32 %366, 1
  store i32 %367, i32* %51, align 8
  %368 = icmp sgt i32 %366, 6
  br i1 %368, label %369, label %375

369:                                              ; preds = %365
  %370 = load i32, i32* %47, align 4
  %371 = shl nsw i32 %370, 3
  %372 = tail call fastcc i32 @TIFFjpeg_write_raw_data(%struct.JPEGState* %7, i8*** %54, i32 %371)
  %373 = icmp eq i32 %372, %371
  br i1 %373, label %374, label %388

374:                                              ; preds = %369
  store i32 0, i32* %51, align 8
  br label %375

375:                                              ; preds = %374, %365
  %376 = load i16, i16* %20, align 4
  %377 = zext i16 %376 to i32
  %378 = load i32, i32* %55, align 4
  %379 = add i32 %378, %377
  store i32 %379, i32* %55, align 4
  %380 = load i16, i16* %20, align 4
  %381 = zext i16 %380 to i64
  %382 = sub nsw i64 %63, %381
  %383 = icmp sgt i64 %382, 0
  br i1 %383, label %384, label %388

384:                                              ; preds = %375
  %385 = getelementptr inbounds i8, i8* %64, i64 %31
  %386 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %43, align 8
  %387 = add i64 %61, 1
  br label %60

388:                                              ; preds = %369, %375, %41
  %389 = phi i32 [ 1, %41 ], [ 1, %375 ], [ 0, %369 ]
  ret i32 %389
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @TIFFjpeg_start_compress(%struct.JPEGState*) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 3, i64 0
  %3 = call i32 @_setjmp(%struct.__jmp_buf_tag* %2) #12
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %7

5:                                                ; preds = %1
  %6 = bitcast %struct.JPEGState* %0 to %struct.jpeg_compress_struct*
  call void @jpeg_start_compress(%struct.jpeg_compress_struct* %6, i32 0) #11
  br label %7

7:                                                ; preds = %1, %5
  %8 = phi i32 [ 1, %5 ], [ 0, %1 ]
  ret i32 %8
}

declare void @jpeg_set_colorspace(%struct.jpeg_compress_struct*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @TIFFjpeg_write_raw_data(%struct.JPEGState*, i8***, i32) unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 3, i64 0
  %5 = call i32 @_setjmp(%struct.__jmp_buf_tag* %4) #12
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = bitcast %struct.JPEGState* %0 to %struct.jpeg_compress_struct*
  %9 = call i32 @jpeg_write_raw_data(%struct.jpeg_compress_struct* %8, i8*** %1, i32 %2) #11
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi i32 [ %9, %7 ], [ -1, %3 ]
  ret i32 %11
}

declare i32 @jpeg_write_raw_data(%struct.jpeg_compress_struct*, i8***, i32) local_unnamed_addr #2

declare void @jpeg_start_compress(%struct.jpeg_compress_struct*, i32) local_unnamed_addr #2

declare void @_TIFFmemcpy(i8*, i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @TIFFjpeg_finish_compress(%struct.JPEGState*) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 3, i64 0
  %3 = call i32 @_setjmp(%struct.__jmp_buf_tag* %2) #12
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %7

5:                                                ; preds = %1
  %6 = bitcast %struct.JPEGState* %0 to %struct.jpeg_compress_struct*
  call void @jpeg_finish_compress(%struct.jpeg_compress_struct* %6) #11
  br label %7

7:                                                ; preds = %1, %5
  %8 = phi i32 [ 1, %5 ], [ 0, %1 ]
  ret i32 %8
}

declare void @jpeg_finish_compress(%struct.jpeg_compress_struct*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @TIFFjpeg_write_scanlines(%struct.JPEGState*, i8**) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.JPEGState, %struct.JPEGState* %0, i64 0, i32 3, i64 0
  %4 = call i32 @_setjmp(%struct.__jmp_buf_tag* %3) #12
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = bitcast %struct.JPEGState* %0 to %struct.jpeg_compress_struct*
  %8 = call i32 @jpeg_write_scanlines(%struct.jpeg_compress_struct* %7, i8** %1, i32 1) #11
  br label %9

9:                                                ; preds = %2, %6
  %10 = phi i32 [ %8, %6 ], [ -1, %2 ]
  ret i32 %10
}

declare i32 @jpeg_write_scanlines(%struct.jpeg_compress_struct*, i8**, i32) local_unnamed_addr #2

declare void @_TIFFSetDefaultCompressionState(%struct.tiff*) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #10

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind returns_twice "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree nounwind readonly }
attributes #11 = { nounwind }
attributes #12 = { nounwind returns_twice }
attributes #13 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{!5}
!5 = distinct !{!5, !6}
!6 = distinct !{!6, !"LVerDomain"}
!7 = !{!8}
!8 = distinct !{!8, !6}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.isvectorized", i32 1}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !3}
!13 = distinct !{!13, !10}
!14 = distinct !{!14, !3}
!15 = !{!16}
!16 = distinct !{!16, !17}
!17 = distinct !{!17, !"LVerDomain"}
!18 = !{!19}
!19 = distinct !{!19, !17}
!20 = distinct !{!20, !10}
!21 = distinct !{!21, !3}
!22 = distinct !{!22, !3}
!23 = distinct !{!23, !10}
!24 = distinct !{!24, !3}
