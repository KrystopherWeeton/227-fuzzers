; ModuleID = '../../third_party/icu/source/i18n/number_notation.cpp'
source_filename = "../../third_party/icu/source/i18n/number_notation.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.icu_69::number::ScientificNotation" = type { %"class.icu_69::number::Notation" }
%"class.icu_69::number::Notation" = type { i32, %"union.icu_69::number::Notation::NotationUnion" }
%"union.icu_69::number::Notation::NotationUnion" = type { %"struct.icu_69::number::Notation::NotationUnion::ScientificSettings" }
%"struct.icu_69::number::Notation::NotationUnion::ScientificSettings" = type { i8, i8, i16, i32 }

@_ZN6icu_696number18ScientificNotationC1Eabs18UNumberSignDisplay = hidden unnamed_addr alias void (%"class.icu_69::number::ScientificNotation"*, i8, i1, i16, i32), void (%"class.icu_69::number::ScientificNotation"*, i8, i1, i16, i32)* @_ZN6icu_696number18ScientificNotationC2Eabs18UNumberSignDisplay

; Function Attrs: nounwind readnone ssp uwtable
define hidden { i64, i32 } @_ZN6icu_696number8Notation10scientificEv() local_unnamed_addr #0 align 2 {
  %1 = alloca %"class.icu_69::number::Notation", align 8
  %2 = getelementptr inbounds %"class.icu_69::number::Notation", %"class.icu_69::number::Notation"* %1, i64 0, i32 0
  store i32 0, i32* %2, align 8
  %3 = getelementptr inbounds %"class.icu_69::number::Notation", %"class.icu_69::number::Notation"* %1, i64 0, i32 1
  %4 = bitcast %"union.icu_69::number::Notation::NotationUnion"* %3 to i64*
  store i64 65537, i64* %4, align 4
  %5 = bitcast %"class.icu_69::number::Notation"* %1 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = insertvalue { i64, i32 } undef, i64 %6, 0
  %8 = insertvalue { i64, i32 } %7, i32 0, 1
  ret { i64, i32 } %8
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden { i64, i32 } @_ZN6icu_696number8Notation11engineeringEv() local_unnamed_addr #0 align 2 {
  %1 = alloca %"class.icu_69::number::Notation", align 8
  %2 = getelementptr inbounds %"class.icu_69::number::Notation", %"class.icu_69::number::Notation"* %1, i64 0, i32 0
  store i32 0, i32* %2, align 8
  %3 = getelementptr inbounds %"class.icu_69::number::Notation", %"class.icu_69::number::Notation"* %1, i64 0, i32 1
  %4 = bitcast %"union.icu_69::number::Notation::NotationUnion"* %3 to i64*
  store i64 65539, i64* %4, align 4
  %5 = bitcast %"class.icu_69::number::Notation"* %1 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = insertvalue { i64, i32 } undef, i64 %6, 0
  %8 = insertvalue { i64, i32 } %7, i32 0, 1
  ret { i64, i32 } %8
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6icu_696number18ScientificNotationC2Eabs18UNumberSignDisplay(%"class.icu_69::number::ScientificNotation"* nocapture, i8 signext, i1 zeroext, i16 signext, i32) unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.icu_69::number::ScientificNotation", %"class.icu_69::number::ScientificNotation"* %0, i64 0, i32 0, i32 0
  %7 = zext i32 %4 to i64
  %8 = shl nuw i64 %7, 32
  %9 = zext i16 %3 to i64
  %10 = shl nuw nsw i64 %9, 16
  %11 = zext i1 %2 to i64
  %12 = shl nuw nsw i64 %11, 8
  %13 = zext i8 %1 to i64
  %14 = or i64 %12, %13
  %15 = or i64 %14, %10
  %16 = or i64 %15, %8
  store i32 0, i32* %6, align 4
  %17 = getelementptr inbounds %"class.icu_69::number::ScientificNotation", %"class.icu_69::number::ScientificNotation"* %0, i64 0, i32 0, i32 1
  %18 = bitcast %"union.icu_69::number::Notation::NotationUnion"* %17 to i64*
  store i64 %16, i64* %18, align 4
  ret void
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden { i64, i32 } @_ZN6icu_696number8Notation12compactShortEv() local_unnamed_addr #0 align 2 {
  %1 = alloca %"class.icu_69::number::Notation", align 8
  %2 = getelementptr inbounds %"class.icu_69::number::Notation", %"class.icu_69::number::Notation"* %1, i64 0, i32 0
  store i32 1, i32* %2, align 8
  %3 = getelementptr inbounds %"class.icu_69::number::Notation", %"class.icu_69::number::Notation"* %1, i64 0, i32 1
  %4 = bitcast %"union.icu_69::number::Notation::NotationUnion"* %3 to i64*
  store i64 -6148914694099828736, i64* %4, align 4
  %5 = bitcast %"class.icu_69::number::Notation"* %1 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = insertvalue { i64, i32 } undef, i64 %6, 0
  %8 = insertvalue { i64, i32 } %7, i32 -1431655766, 1
  ret { i64, i32 } %8
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden { i64, i32 } @_ZN6icu_696number8Notation11compactLongEv() local_unnamed_addr #0 align 2 {
  %1 = alloca %"class.icu_69::number::Notation", align 8
  %2 = getelementptr inbounds %"class.icu_69::number::Notation", %"class.icu_69::number::Notation"* %1, i64 0, i32 0
  store i32 1, i32* %2, align 8
  %3 = getelementptr inbounds %"class.icu_69::number::Notation", %"class.icu_69::number::Notation"* %1, i64 0, i32 1
  %4 = bitcast %"union.icu_69::number::Notation::NotationUnion"* %3 to i64*
  store i64 -6148914694099828735, i64* %4, align 4
  %5 = bitcast %"class.icu_69::number::Notation"* %1 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = insertvalue { i64, i32 } undef, i64 %6, 0
  %8 = insertvalue { i64, i32 } %7, i32 -1431655766, 1
  ret { i64, i32 } %8
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden { i64, i32 } @_ZN6icu_696number8Notation6simpleEv() local_unnamed_addr #2 align 2 {
  %1 = alloca %"class.icu_69::number::Notation", align 8
  %2 = getelementptr inbounds %"class.icu_69::number::Notation", %"class.icu_69::number::Notation"* %1, i64 0, i32 0
  store i32 2, i32* %2, align 8
  %3 = getelementptr inbounds %"class.icu_69::number::Notation", %"class.icu_69::number::Notation"* %1, i64 0, i32 1
  %4 = bitcast %"union.icu_69::number::Notation::NotationUnion"* %3 to i64*
  store i64 0, i64* %4, align 4
  %5 = bitcast %"class.icu_69::number::Notation"* %1 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = insertvalue { i64, i32 } undef, i64 %6, 0
  %8 = insertvalue { i64, i32 } %7, i32 0, 1
  ret { i64, i32 } %8
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i32 } @_ZNK6icu_696number18ScientificNotation21withMinExponentDigitsEi(%"class.icu_69::number::ScientificNotation"* nocapture readonly, i32) local_unnamed_addr #3 align 2 {
  %3 = alloca %"class.icu_69::number::Notation", align 8
  %4 = add i32 %1, -1
  %5 = icmp ult i32 %4, 999
  br i1 %5, label %6, label %25

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.icu_69::number::ScientificNotation", %"class.icu_69::number::ScientificNotation"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  %8 = load i8, i8* %7, align 4
  %9 = getelementptr inbounds %"class.icu_69::number::ScientificNotation", %"class.icu_69::number::ScientificNotation"* %0, i64 0, i32 0, i32 1, i32 0, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = getelementptr inbounds %"class.icu_69::number::ScientificNotation", %"class.icu_69::number::ScientificNotation"* %0, i64 0, i32 0, i32 1, i32 0, i32 3
  %12 = load i32, i32* %11, align 4
  %13 = zext i32 %12 to i64
  %14 = shl nuw i64 %13, 32
  %15 = shl i32 %1, 16
  %16 = zext i32 %15 to i64
  %17 = zext i8 %10 to i64
  %18 = shl nuw nsw i64 %17, 8
  %19 = zext i8 %8 to i64
  %20 = or i64 %19, %16
  %21 = or i64 %20, %18
  %22 = or i64 %21, %14
  %23 = getelementptr inbounds %"class.icu_69::number::Notation", %"class.icu_69::number::Notation"* %3, i64 0, i32 1
  %24 = bitcast %"union.icu_69::number::Notation::NotationUnion"* %23 to i64*
  store i64 %22, i64* %24, align 4
  br label %28

25:                                               ; preds = %2
  %26 = getelementptr inbounds %"class.icu_69::number::Notation", %"class.icu_69::number::Notation"* %3, i64 0, i32 1
  %27 = bitcast %"union.icu_69::number::Notation::NotationUnion"* %26 to i32*
  store i32 65810, i32* %27, align 4
  br label %28

28:                                               ; preds = %25, %6
  %29 = phi i32 [ undef, %25 ], [ %12, %6 ]
  %30 = phi i32 [ 3, %25 ], [ 0, %6 ]
  %31 = getelementptr inbounds %"class.icu_69::number::Notation", %"class.icu_69::number::Notation"* %3, i64 0, i32 0
  store i32 %30, i32* %31, align 8
  %32 = bitcast %"class.icu_69::number::Notation"* %3 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = insertvalue { i64, i32 } undef, i64 %33, 0
  %35 = insertvalue { i64, i32 } %34, i32 %29, 1
  ret { i64, i32 } %35
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i32 } @_ZNK6icu_696number18ScientificNotation23withExponentSignDisplayE18UNumberSignDisplay(%"class.icu_69::number::ScientificNotation"* nocapture readonly, i32) local_unnamed_addr #3 align 2 {
  %3 = alloca %"class.icu_69::number::Notation", align 8
  %4 = getelementptr inbounds %"class.icu_69::number::ScientificNotation", %"class.icu_69::number::ScientificNotation"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  %5 = load i8, i8* %4, align 4
  %6 = getelementptr inbounds %"class.icu_69::number::ScientificNotation", %"class.icu_69::number::ScientificNotation"* %0, i64 0, i32 0, i32 1, i32 0, i32 1
  %7 = load i8, i8* %6, align 1
  %8 = getelementptr inbounds %"class.icu_69::number::ScientificNotation", %"class.icu_69::number::ScientificNotation"* %0, i64 0, i32 0, i32 1, i32 0, i32 2
  %9 = load i16, i16* %8, align 2
  %10 = getelementptr inbounds %"class.icu_69::number::Notation", %"class.icu_69::number::Notation"* %3, i64 0, i32 0
  store i32 0, i32* %10, align 8
  %11 = zext i32 %1 to i64
  %12 = shl nuw i64 %11, 32
  %13 = zext i16 %9 to i64
  %14 = shl nuw nsw i64 %13, 16
  %15 = zext i8 %7 to i64
  %16 = shl nuw nsw i64 %15, 8
  %17 = zext i8 %5 to i64
  %18 = or i64 %12, %17
  %19 = or i64 %18, %16
  %20 = or i64 %19, %14
  %21 = getelementptr inbounds %"class.icu_69::number::Notation", %"class.icu_69::number::Notation"* %3, i64 0, i32 1
  %22 = bitcast %"union.icu_69::number::Notation::NotationUnion"* %21 to i64*
  store i64 %20, i64* %22, align 4
  %23 = bitcast %"class.icu_69::number::Notation"* %3 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = insertvalue { i64, i32 } undef, i64 %24, 0
  %26 = insertvalue { i64, i32 } %25, i32 %1, 1
  ret { i64, i32 } %26
}

attributes #0 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
