; ModuleID = '../../third_party/webrtc/modules/audio_processing/aec3/matched_filter_lag_aggregator.cc'
source_filename = "../../third_party/webrtc/modules/audio_processing/aec3/matched_filter_lag_aggregator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.webrtc::MatchedFilterLagAggregator" = type { %"class.webrtc::ApmDataDumper"*, %"class.std::__1::vector", %"struct.std::__1::array", i32, i8, %"struct.webrtc::EchoCanceller3Config::Delay::DelaySelectionThresholds" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"struct.std::__1::array" = type { [250 x i32] }
%"struct.webrtc::EchoCanceller3Config::Delay::DelaySelectionThresholds" = type { i32, i32 }
%"class.webrtc::ApmDataDumper" = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"struct.webrtc::DelayEstimate" }
%"struct.webrtc::DelayEstimate" = type { i32, i64, i64, i64 }
%"struct.webrtc::MatchedFilter::LagEstimate" = type <{ float, i8, [3 x i8], i64, i8, [7 x i8] }>

@_ZN6webrtc26MatchedFilterLagAggregatorC1EPNS_13ApmDataDumperEmRKNS_20EchoCanceller3Config5Delay24DelaySelectionThresholdsE = hidden unnamed_addr alias void (%"class.webrtc::MatchedFilterLagAggregator"*, %"class.webrtc::ApmDataDumper"*, i64, %"struct.webrtc::EchoCanceller3Config::Delay::DelaySelectionThresholds"*), void (%"class.webrtc::MatchedFilterLagAggregator"*, %"class.webrtc::ApmDataDumper"*, i64, %"struct.webrtc::EchoCanceller3Config::Delay::DelaySelectionThresholds"*)* @_ZN6webrtc26MatchedFilterLagAggregatorC2EPNS_13ApmDataDumperEmRKNS_20EchoCanceller3Config5Delay24DelaySelectionThresholdsE
@_ZN6webrtc26MatchedFilterLagAggregatorD1Ev = hidden unnamed_addr alias void (%"class.webrtc::MatchedFilterLagAggregator"*), void (%"class.webrtc::MatchedFilterLagAggregator"*)* @_ZN6webrtc26MatchedFilterLagAggregatorD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc26MatchedFilterLagAggregatorC2EPNS_13ApmDataDumperEmRKNS_20EchoCanceller3Config5Delay24DelaySelectionThresholdsE(%"class.webrtc::MatchedFilterLagAggregator"*, %"class.webrtc::ApmDataDumper"*, i64, %"struct.webrtc::EchoCanceller3Config::Delay::DelaySelectionThresholds"* nocapture readonly dereferenceable(8)) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.webrtc::MatchedFilterLagAggregator", %"class.webrtc::MatchedFilterLagAggregator"* %0, i64 0, i32 0
  store %"class.webrtc::ApmDataDumper"* %1, %"class.webrtc::ApmDataDumper"** %5, align 8
  %6 = getelementptr inbounds %"class.webrtc::MatchedFilterLagAggregator", %"class.webrtc::MatchedFilterLagAggregator"* %0, i64 0, i32 1
  %7 = add i64 %2, 1
  %8 = bitcast %"class.std::__1::vector"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #5
  %9 = icmp eq i64 %7, 0
  br i1 %9, label %26, label %10

10:                                               ; preds = %4
  %11 = icmp ugt i64 %7, 4611686018427387903
  br i1 %11, label %12, label %14

12:                                               ; preds = %10
  %13 = bitcast %"class.std::__1::vector"* %6 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #6
  unreachable

14:                                               ; preds = %10
  %15 = shl i64 %7, 2
  %16 = tail call i8* @_Znwm(i64 %15) #7
  %17 = bitcast i8* %16 to i32*
  %18 = getelementptr inbounds %"class.webrtc::MatchedFilterLagAggregator", %"class.webrtc::MatchedFilterLagAggregator"* %0, i64 0, i32 1, i32 0, i32 1
  %19 = bitcast %"class.std::__1::vector"* %6 to i8**
  store i8* %16, i8** %19, align 8
  %20 = getelementptr inbounds i32, i32* %17, i64 %7
  %21 = getelementptr inbounds %"class.webrtc::MatchedFilterLagAggregator", %"class.webrtc::MatchedFilterLagAggregator"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  store i32* %20, i32** %21, align 8
  %22 = shl i64 %2, 2
  %23 = add nuw i64 %22, 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %16, i8 0, i64 %23, i1 false)
  %24 = bitcast i32** %18 to i64*
  %25 = ptrtoint i32* %20 to i64
  store i64 %25, i64* %24, align 8
  br label %26

26:                                               ; preds = %4, %14
  %27 = getelementptr inbounds %"class.webrtc::MatchedFilterLagAggregator", %"class.webrtc::MatchedFilterLagAggregator"* %0, i64 0, i32 3
  store i32 0, i32* %27, align 8
  %28 = getelementptr inbounds %"class.webrtc::MatchedFilterLagAggregator", %"class.webrtc::MatchedFilterLagAggregator"* %0, i64 0, i32 4
  store i8 0, i8* %28, align 4
  %29 = getelementptr inbounds %"class.webrtc::MatchedFilterLagAggregator", %"class.webrtc::MatchedFilterLagAggregator"* %0, i64 0, i32 5
  %30 = bitcast %"struct.webrtc::EchoCanceller3Config::Delay::DelaySelectionThresholds"* %3 to i64*
  %31 = bitcast %"struct.webrtc::EchoCanceller3Config::Delay::DelaySelectionThresholds"* %29 to i64*
  %32 = load i64, i64* %30, align 4
  store i64 %32, i64* %31, align 8
  %33 = getelementptr %"class.webrtc::MatchedFilterLagAggregator", %"class.webrtc::MatchedFilterLagAggregator"* %0, i64 0, i32 2, i32 0, i64 0
  %34 = bitcast i32* %33 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %34, i8 0, i64 1000, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc26MatchedFilterLagAggregatorD2Ev(%"class.webrtc::MatchedFilterLagAggregator"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::MatchedFilterLagAggregator", %"class.webrtc::MatchedFilterLagAggregator"* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load i32*, i32** %2, align 8
  %4 = icmp eq i32* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i32* %3 to i64
  %7 = getelementptr inbounds %"class.webrtc::MatchedFilterLagAggregator", %"class.webrtc::MatchedFilterLagAggregator"* %0, i64 0, i32 1, i32 0, i32 1
  %8 = bitcast i32** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast i32* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #7
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc26MatchedFilterLagAggregator5ResetEb(%"class.webrtc::MatchedFilterLagAggregator"* nocapture, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::MatchedFilterLagAggregator", %"class.webrtc::MatchedFilterLagAggregator"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = getelementptr inbounds %"class.webrtc::MatchedFilterLagAggregator", %"class.webrtc::MatchedFilterLagAggregator"* %0, i64 0, i32 1, i32 0, i32 1
  %6 = bitcast i32** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = ptrtoint i32* %4 to i64
  %9 = sub i64 %7, %8
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %11, label %18

11:                                               ; preds = %2
  %12 = bitcast i32* %4 to i8*
  %13 = and i64 %9, -4
  %14 = icmp ult i64 %9, 4
  %15 = sext i1 %14 to i64
  %16 = shl nsw i64 %15, 2
  %17 = sub i64 %13, %16
  call void @llvm.memset.p0i8.i64(i8* align 4 %12, i8 0, i64 %17, i1 false)
  br label %18

18:                                               ; preds = %11, %2
  %19 = getelementptr %"class.webrtc::MatchedFilterLagAggregator", %"class.webrtc::MatchedFilterLagAggregator"* %0, i64 0, i32 2, i32 0, i64 0
  %20 = bitcast i32* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %20, i8 0, i64 1004, i1 false)
  br i1 %1, label %21, label %23

21:                                               ; preds = %18
  %22 = getelementptr inbounds %"class.webrtc::MatchedFilterLagAggregator", %"class.webrtc::MatchedFilterLagAggregator"* %0, i64 0, i32 4
  store i8 0, i8* %22, align 4
  br label %23

23:                                               ; preds = %21, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc26MatchedFilterLagAggregator9AggregateEN3rtc9ArrayViewIKNS_13MatchedFilter11LagEstimateELln4711EEE(%"class.absl::optional"* noalias nocapture sret, %"class.webrtc::MatchedFilterLagAggregator"* nocapture, %"struct.webrtc::MatchedFilter::LagEstimate"*, i64) local_unnamed_addr #0 align 2 {
  %5 = icmp eq i64 %3, 0
  br i1 %5, label %169, label %9

6:                                                ; preds = %26
  %7 = getelementptr inbounds %"class.webrtc::MatchedFilterLagAggregator", %"class.webrtc::MatchedFilterLagAggregator"* %1, i64 0, i32 1, i32 0, i32 0
  %8 = icmp eq i32 %27, -1
  br i1 %8, label %169, label %31

9:                                                ; preds = %4, %26
  %10 = phi float [ %28, %26 ], [ 0.000000e+00, %4 ]
  %11 = phi i32 [ %27, %26 ], [ -1, %4 ]
  %12 = phi i64 [ %29, %26 ], [ 0, %4 ]
  %13 = getelementptr inbounds %"struct.webrtc::MatchedFilter::LagEstimate", %"struct.webrtc::MatchedFilter::LagEstimate"* %2, i64 %12, i32 4
  %14 = load i8, i8* %13, align 8, !range !2
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %26, label %16

16:                                               ; preds = %9
  %17 = getelementptr inbounds %"struct.webrtc::MatchedFilter::LagEstimate", %"struct.webrtc::MatchedFilter::LagEstimate"* %2, i64 %12, i32 1
  %18 = load i8, i8* %17, align 4, !range !2
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %26, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"struct.webrtc::MatchedFilter::LagEstimate", %"struct.webrtc::MatchedFilter::LagEstimate"* %2, i64 %12, i32 0
  %22 = load float, float* %21, align 8
  %23 = fcmp ogt float %22, %10
  br i1 %23, label %24, label %26

24:                                               ; preds = %20
  %25 = trunc i64 %12 to i32
  br label %26

26:                                               ; preds = %16, %9, %24, %20
  %27 = phi i32 [ %25, %24 ], [ %11, %20 ], [ %11, %16 ], [ %11, %9 ]
  %28 = phi float [ %22, %24 ], [ %10, %20 ], [ %10, %16 ], [ %10, %9 ]
  %29 = add nuw i64 %12, 1
  %30 = icmp eq i64 %29, %3
  br i1 %30, label %6, label %9

31:                                               ; preds = %6
  %32 = getelementptr inbounds %"class.webrtc::MatchedFilterLagAggregator", %"class.webrtc::MatchedFilterLagAggregator"* %1, i64 0, i32 1, i32 0, i32 1
  %33 = load i32*, i32** %7, align 8
  %34 = getelementptr inbounds %"class.webrtc::MatchedFilterLagAggregator", %"class.webrtc::MatchedFilterLagAggregator"* %1, i64 0, i32 3
  %35 = load i32, i32* %34, align 8
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds %"class.webrtc::MatchedFilterLagAggregator", %"class.webrtc::MatchedFilterLagAggregator"* %1, i64 0, i32 2, i32 0, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i32, i32* %33, i64 %39
  %41 = load i32, i32* %40, align 4
  %42 = add nsw i32 %41, -1
  store i32 %42, i32* %40, align 4
  %43 = sext i32 %27 to i64
  %44 = getelementptr inbounds %"struct.webrtc::MatchedFilter::LagEstimate", %"struct.webrtc::MatchedFilter::LagEstimate"* %2, i64 %43, i32 3
  %45 = load i64, i64* %44, align 8
  %46 = trunc i64 %45 to i32
  %47 = load i32, i32* %34, align 8
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds %"class.webrtc::MatchedFilterLagAggregator", %"class.webrtc::MatchedFilterLagAggregator"* %1, i64 0, i32 2, i32 0, i64 %48
  store i32 %46, i32* %49, align 4
  %50 = load i32, i32* %34, align 8
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds %"class.webrtc::MatchedFilterLagAggregator", %"class.webrtc::MatchedFilterLagAggregator"* %1, i64 0, i32 2, i32 0, i64 %51
  %53 = load i32, i32* %52, align 4
  %54 = sext i32 %53 to i64
  %55 = load i32*, i32** %7, align 8
  %56 = getelementptr inbounds i32, i32* %55, i64 %54
  %57 = load i32, i32* %56, align 4
  %58 = add nsw i32 %57, 1
  store i32 %58, i32* %56, align 4
  %59 = load i32, i32* %34, align 8
  %60 = add nsw i32 %59, 1
  %61 = sext i32 %60 to i64
  %62 = urem i64 %61, 250
  %63 = trunc i64 %62 to i32
  store i32 %63, i32* %34, align 8
  %64 = load i32*, i32** %7, align 8
  %65 = ptrtoint i32* %64 to i64
  %66 = load i32*, i32** %32, align 8
  %67 = icmp eq i32* %64, %66
  br i1 %67, label %129, label %68

68:                                               ; preds = %31
  %69 = getelementptr inbounds i32, i32* %64, i64 1
  %70 = icmp eq i32* %69, %66
  br i1 %70, label %129, label %71

71:                                               ; preds = %68
  %72 = getelementptr i32, i32* %66, i64 -2
  %73 = ptrtoint i32* %72 to i64
  %74 = sub i64 %73, %65
  %75 = lshr i64 %74, 2
  %76 = add nuw nsw i64 %75, 1
  %77 = and i64 %76, 3
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %92, label %79

79:                                               ; preds = %71, %79
  %80 = phi i32* [ %89, %79 ], [ %69, %71 ]
  %81 = phi i64 [ %88, %79 ], [ %65, %71 ]
  %82 = phi i64 [ %90, %79 ], [ %77, %71 ]
  %83 = ptrtoint i32* %80 to i64
  %84 = inttoptr i64 %81 to i32*
  %85 = load i32, i32* %84, align 4
  %86 = load i32, i32* %80, align 4
  %87 = icmp slt i32 %85, %86
  %88 = select i1 %87, i64 %83, i64 %81
  %89 = getelementptr inbounds i32, i32* %80, i64 1
  %90 = add i64 %82, -1
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %79, !llvm.loop !3

92:                                               ; preds = %79, %71
  %93 = phi i64 [ undef, %71 ], [ %88, %79 ]
  %94 = phi i32* [ %69, %71 ], [ %89, %79 ]
  %95 = phi i64 [ %65, %71 ], [ %88, %79 ]
  %96 = icmp ult i64 %74, 12
  br i1 %96, label %129, label %97

97:                                               ; preds = %92, %97
  %98 = phi i32* [ %127, %97 ], [ %94, %92 ]
  %99 = phi i64 [ %126, %97 ], [ %95, %92 ]
  %100 = ptrtoint i32* %98 to i64
  %101 = inttoptr i64 %99 to i32*
  %102 = load i32, i32* %101, align 4
  %103 = load i32, i32* %98, align 4
  %104 = icmp slt i32 %102, %103
  %105 = select i1 %104, i64 %100, i64 %99
  %106 = getelementptr inbounds i32, i32* %98, i64 1
  %107 = ptrtoint i32* %106 to i64
  %108 = inttoptr i64 %105 to i32*
  %109 = load i32, i32* %108, align 4
  %110 = load i32, i32* %106, align 4
  %111 = icmp slt i32 %109, %110
  %112 = select i1 %111, i64 %107, i64 %105
  %113 = getelementptr inbounds i32, i32* %98, i64 2
  %114 = ptrtoint i32* %113 to i64
  %115 = inttoptr i64 %112 to i32*
  %116 = load i32, i32* %115, align 4
  %117 = load i32, i32* %113, align 4
  %118 = icmp slt i32 %116, %117
  %119 = select i1 %118, i64 %114, i64 %112
  %120 = getelementptr inbounds i32, i32* %98, i64 3
  %121 = ptrtoint i32* %120 to i64
  %122 = inttoptr i64 %119 to i32*
  %123 = load i32, i32* %122, align 4
  %124 = load i32, i32* %120, align 4
  %125 = icmp slt i32 %123, %124
  %126 = select i1 %125, i64 %121, i64 %119
  %127 = getelementptr inbounds i32, i32* %98, i64 4
  %128 = icmp eq i32* %127, %66
  br i1 %128, label %129, label %97

129:                                              ; preds = %92, %97, %31, %68
  %130 = phi i64 [ %65, %31 ], [ %65, %68 ], [ %93, %92 ], [ %126, %97 ]
  %131 = sub i64 %130, %65
  %132 = getelementptr inbounds %"class.webrtc::MatchedFilterLagAggregator", %"class.webrtc::MatchedFilterLagAggregator"* %1, i64 0, i32 4
  %133 = load i8, i8* %132, align 4, !range !2
  %134 = icmp eq i8 %133, 0
  br i1 %134, label %140, label %135

135:                                              ; preds = %129
  %136 = getelementptr inbounds %"class.webrtc::MatchedFilterLagAggregator", %"class.webrtc::MatchedFilterLagAggregator"* %1, i64 0, i32 5, i32 1
  %137 = load i32, i32* %136, align 4
  %138 = shl i64 %131, 30
  %139 = ashr exact i64 %138, 32
  br label %149

140:                                              ; preds = %129
  %141 = shl i64 %131, 30
  %142 = ashr exact i64 %141, 32
  %143 = getelementptr inbounds i32, i32* %64, i64 %142
  %144 = load i32, i32* %143, align 4
  %145 = getelementptr inbounds %"class.webrtc::MatchedFilterLagAggregator", %"class.webrtc::MatchedFilterLagAggregator"* %1, i64 0, i32 5, i32 1
  %146 = load i32, i32* %145, align 4
  %147 = icmp sgt i32 %144, %146
  %148 = zext i1 %147 to i8
  br label %149

149:                                              ; preds = %135, %140
  %150 = phi i64 [ %139, %135 ], [ %142, %140 ]
  %151 = phi i32 [ %137, %135 ], [ %146, %140 ]
  %152 = phi i8 [ 1, %135 ], [ %148, %140 ]
  store i8 %152, i8* %132, align 4
  %153 = getelementptr inbounds i32, i32* %64, i64 %150
  %154 = load i32, i32* %153, align 4
  %155 = icmp sgt i32 %154, %151
  br i1 %155, label %162, label %156

156:                                              ; preds = %149
  %157 = getelementptr inbounds %"class.webrtc::MatchedFilterLagAggregator", %"class.webrtc::MatchedFilterLagAggregator"* %1, i64 0, i32 5, i32 0
  %158 = load i32, i32* %157, align 8
  %159 = icmp sgt i32 %154, %158
  %160 = icmp eq i8 %152, 0
  %161 = and i1 %160, %159
  br i1 %161, label %162, label %169

162:                                              ; preds = %156, %149
  %163 = zext i8 %152 to i32
  %164 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %164, align 8
  %165 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store i32 %163, i32* %165, align 8
  %166 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  store i64 %150, i64* %166, align 8
  %167 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2
  %168 = bitcast i64* %167 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %168, i8 0, i64 16, i1 false)
  br label %173

169:                                              ; preds = %4, %156, %6
  %170 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %170, align 8
  %171 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %172 = bitcast %union.anon* %171 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %172, i8 0, i64 32, i1 false) #5
  br label %173

173:                                              ; preds = %162, %169
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
